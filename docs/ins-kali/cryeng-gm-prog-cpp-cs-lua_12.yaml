- en: Chapter 12. Debugging and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。调试和性能分析
- en: Creating efficient and bug-free code can be difficult. Therefore, the engine
    exposes a number of tools to help developers in this regard, allowing easy identification
    of bugs and visualization of performance problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建高效且无bug的代码可能很困难。因此，引擎提供了许多工具来帮助开发人员，以便轻松识别错误并可视化性能问题。
- en: It is important to keep the debugging and profiling tools in mind at all times
    when writing both game and engine logic, in order to make sure that your code
    runs optimally and can be easily scanned for issues. Simply adding a few game
    log warnings can be vital for saving a bunch of time when resolving future issues!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写游戏和引擎逻辑时，始终牢记调试和性能分析工具非常重要，以确保代码运行良好并且可以轻松地扫描问题。在解决未来问题时，添加一些游戏日志警告可能非常重要，可以节省大量时间！
- en: 'In this chapter we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning common ways of debugging CryENGINE applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习调试CryENGINE应用程序的常见方法
- en: Utilizing the built-in profilers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用内置性能分析工具
- en: Creating our own console variables and commands
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们自己的控制台变量和命令
- en: Debugging the game logic
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试游戏逻辑
- en: Keeping your code bug-free can be very difficult, especially if you only rely
    on your debugger. CryENGINE exposes a number of systems for aiding the debugging
    of your code, even when you're not attached to the running process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 保持代码无bug可能非常困难，特别是如果你只依赖于调试器。即使没有连接到运行中的进程，CryENGINE也会暴露一些系统来帮助调试代码。
- en: 'Always keep in mind which configuration you build the GameDll with. This can
    be changed before building your project in Visual Studio, as shown in the following
    screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 始终牢记使用哪种配置构建GameDll。在构建项目之前，可以在Visual Studio中更改此配置，如下面的屏幕截图所示：
- en: '![Debugging the game logic](img/5909_12_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![调试游戏逻辑](img/5909_12_01.jpg)'
- en: 'By default, there are three primary configurations as shown in the following
    table:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，有三种主要配置，如下表所示：
- en: '| Configuration name | Description |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 配置名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Profile | Used when developing the application, makes sure debug databases
    are generated. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 配置文件 | 在开发应用程序时使用，确保生成调试数据库。 |'
- en: '| Debug | Used when you need compilation optimizations turned off, as well
    as extra CryENGINE helpers that are turned on specifically for this mode. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 调试 | 当您需要关闭编译优化以及专门为此模式打开的额外CryENGINE助手时使用。 |'
- en: '| Release | This mode is meant to be used earlier for final builds that are
    sent to end users.This configuration does a bunch of things, including disabling
    the generation of debug databases and multiple debug-only CryENGINE systems.It
    is also common practice for CryENGINE games to link all libraries such as CryGame
    into one Launcher application for security. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 发布 | 此模式旨在用于发送给最终用户的最终构建。此配置执行一系列操作，包括禁用调试数据库的生成和多个仅用于调试的CryENGINE系统。CryENGINE游戏通常会将所有库（如CryGame）链接到一个启动器应用程序中以确保安全。
    |'
- en: Logging to the console and files
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录到控制台和文件
- en: 'The logging system allows for printing text to console and the `.log` file
    contained in the root file structure. The name of the log depends on which application
    was launched:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 日志系统允许将文本打印到控制台和根文件结构中包含的`.log`文件中。日志的名称取决于启动了哪个应用程序：
- en: '| Log name | Description |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 日志名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Game.log` | Used by the Launcher application. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `Game.log` | 由启动器应用程序使用。 |'
- en: '| `Editor.log` | Only used by the Sandbox Editor application. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `Editor.log` | 仅供沙盒编辑器应用程序使用。 |'
- en: '| `Server.log` | Used for the dedicated server. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Server.log` | 用于专用服务器。 |'
- en: Logging functionality is commonly used for very severe issues, or to warn designers
    of unsupported behavior.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 日志功能通常用于非常严重的问题，或者警告设计人员不支持的行为。
- en: The biggest benefit of logging severe errors and initialization statistics is
    that you'll often be able to figure out why your code is not working as it should
    on the end user's computer by simply reading their game log.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 记录严重错误和初始化统计信息的最大好处是，通过简单地阅读用户的游戏日志，您通常可以弄清楚为什么您的代码在最终用户的计算机上无法正常工作。
- en: Log verbosity
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志冗长度
- en: The log verbosity is set by using the `log_verbosity` console variable (for
    the visual part of the console) and `log_writeToFileVerbosity` (for the log written
    to disk).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`log_verbosity`控制台变量（用于控制台的可视部分）和`log_writeToFileVerbosity`（用于写入磁盘的日志）来设置日志冗长度。
- en: Verbosity determines which messages should be logged/displayed, and is useful
    for filtering out less severe messages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 冗长度确定应该记录/显示哪些消息，并且对于过滤掉不太严重的消息非常有用。
- en: '| Verbosity level | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 冗长度级别 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-1` (no logging) | Suppresses all logged information, including `CryLogAlways`.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `-1`（无日志记录） | 抑制所有已记录的信息，包括`CryLogAlways`。 |'
- en: '| `0` (always) | Suppresses all logged information, excluding that logged using
    `CryLogAlways`. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `0`（始终） | 抑制所有已记录的信息，不包括使用`CryLogAlways`记录的信息。 |'
- en: '| `1` (error) | Same as level 0, but with additional errors. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `1`（错误） | 与级别0相同，但包括额外的错误。 |'
- en: '| `2` (warning) | Same as level 1, but with additional warnings. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `2`（警告） | 与级别1相同，但包括额外的警告。 |'
- en: '| `3` (message) | Same as level 2, but with additional messages. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `3`（消息） | 与级别2相同，但包括额外的消息。 |'
- en: '| `4` (comment) | Highest verbosity, logs everything mentioned previously as
    well as additional comments. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `4`（注释） | 最高冗长度，记录之前提到的所有内容以及额外的注释。 |'
- en: Global log functions
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局日志函数
- en: 'The following is a list of global log functions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是全局日志函数列表：
- en: '`CryLog`: This function logs a message to the console and file log, assuming
    log verbosity is 3 or higher.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CryLog`：此函数将消息记录到控制台和文件日志中，假设日志冗长度为3或更高。'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`CryLogAlways`: This function logs a message to the console and file, assuming
    log verbosity is 0 or higher.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CryLogAlways`：此函数将消息记录到控制台和文件中，假设日志冗长度为0或更高。'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`CryWarning`: This function outputs a warning to the log and console, prefixed
    by [Warning]. It is also useful for warning designers that they''re using functionality
    incorrectly. It will only log to file if log verbosity is 2 or higher.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CryWarning`：此函数向日志和控制台输出一个警告，前缀为[Warning]。它还可用于警告设计人员他们错误地使用功能。只有在日志详细程度为2或更高时才会记录到文件中。'
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`CryFatalError`: This function is used to designate that a severe error has
    occurred, and results in a message box followed by program termination.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CryFatalError`：此函数用于指定发生了严重错误，并导致消息框后跟程序终止。'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`CryComment`: This function outputs a comment, assuming log verbosity is 4.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CryComment`：此函数输出一个注释，假设日志详细程度为4。'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: Logging in C# is done by using the static `Debug` class. For example,
    to log a message, one would use `Debug.Log("message");`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在C#中，通过使用静态的`Debug`类来记录日志。例如，要记录一条消息，可以使用`Debug.Log("message");`
- en: To log using Lua, use the `System.Log` function, for example, `System.Log("MyMessage");`
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Lua进行记录，可以使用`System.Log`函数，例如，`System.Log("MyMessage");`
- en: The persistent debug
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久调试
- en: The persistent debug system allows the drawing of persistent helpers that give
    visual feedback on game logic. For example, the system is used in the following
    screenshot to draw the direction the player is facing at their world position
    on every frame, where each arrow lasts for a specified number of seconds before
    disappearing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 持久调试系统允许绘制持久性辅助工具，以在游戏逻辑上提供视觉反馈。例如，该系统在以下截图中用于在每一帧上绘制玩家在其世界位置面对的方向，其中每个箭头在消失之前持续了指定数量的秒数。
- en: 'The system can bring very interesting effects, such as a way to see player
    rotation and physical interactions, as displayed in the free-to-play game SNOW:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统可以带来非常有趣的效果，例如一种查看玩家旋转和物理交互的方式，如在免费游戏SNOW中显示的那样：
- en: '![The persistent debug](img/5909_12_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![持久调试](img/5909_12_02.jpg)'
- en: C++
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C++
- en: 'The `IPersistantDebug` interface can be accessed via the game framework as
    shown:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过游戏框架访问`IPersistantDebug`接口，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Prior to calling the various drawing functions, we'll need to call `IPersistantDebug::Begin`
    to signal that a new group of persistant debug should begin.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用各种绘图函数之前，我们需要调用`IPersistantDebug::Begin`来表示应该开始新的持久调试组。
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The last boolean parameter specifies whether or not the system should clear
    all previously drawn persistent debug objects for the selected scope (`"myPersistentDebug"`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个布尔参数指定系统是否应清除所选范围内所有先前绘制的持久调试对象（“myPersistentDebug”）。
- en: 'We can now use the various **Add*** functions, such as `AddSphere`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用各种**Add***函数，例如`AddSphere`：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the previous snippet, the system will draw a red sphere of radius `0.3` at
    `0`, `0`, `10` in the game world. The sphere will disappear after `2` seconds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个片段中，系统将在游戏世界中的`0`，`0`，`10`处绘制一个半径为`0.3`的红色球体。球体将在`2`秒后消失。
- en: C#
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C#
- en: 'In C#, the persistent debug interface can be accessed by using the static `Debug`
    class. For example, to add a sphere as we did previously, use the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，可以通过使用静态的`Debug`类来访问持久调试接口。例如，要添加一个球体，可以使用以下代码：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: CryAssert
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CryAssert
- en: The CryAssert system allows developers to make sure that certain variables are
    kept within boundaries. By doing checks that are only compiled in developer builds,
    it's possible to continuously test how systems interact with others. This is good
    for both performance and for making sure that your features are less bug-prone.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: CryAssert系统允许开发人员确保某些变量保持在边界内。通过进行仅在开发构建中编译的检查，可以不断测试系统如何与其他系统交互。这对性能和确保功能不容易出错都很有好处。
- en: The system can be toggled by using the `sys_asserts` CVar, and may require defining
    the `USE_CRYASSERT` macro in your `StdAfx` header.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`sys_asserts` CVar来切换系统，并且可能需要在`StdAfx`头文件中定义`USE_CRYASSERT`宏。
- en: 'To do an assertion, use the `CRY_ASSERT` macro as shown:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行断言，请使用`CRY_ASSERT`宏，如下所示：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will then be checked each time the code is run, except in release mode,
    and will output a big warning message box when the condition is false.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后每次运行代码时都会进行检查，除了在发布模式下，并且当条件为假时会输出一个大的警告消息框。
- en: Profiling
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: When working with real-time products such as CryENGINE, programmers constantly
    have to consider the performance of their code. To aid in this, we'll be able
    to use the `profile` console variable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理实时产品（如CryENGINE）时，程序员不断地需要考虑其代码的性能。为了帮助解决这个问题，我们可以使用`profile`控制台变量。
- en: 'The CVar allows for getting visual statistics on the most intensive parts of
    your code as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CVar允许获取代码最密集部分的可视化统计信息，如下截图所示：
- en: '![Profiling](img/5909_12_03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![分析](img/5909_12_03.jpg)'
- en: In the previous screenshot, profile was set to `1`, the default mode, which
    sorts the most intensive functions being called for each frame.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，profile设置为`1`，默认模式，对每一帧调用的最密集的函数进行排序。
- en: Profile usages
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用情况分析
- en: 'Currently, the profile variable supports 13 different states as listed in the
    following table:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，profile变量支持以下表中列出的13种不同状态：
- en: '| Value | Description |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0 | Default value; when this is set, the profiling system will be inactive.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 默认值；当设置为此值时，分析系统将处于非活动状态。 |'
- en: '| 1 | Self time |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 自身时间 |'
- en: '| 2 | Hierarchical time |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 分层时间 |'
- en: '| 3 | Extended self time |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 扩展自身时间 |'
- en: '| 4 | Extended hierarchical time |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 扩展分层时间 |'
- en: '| 5 | Peaks time |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 峰值时间 |'
- en: '| 6 | Subsystem info |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 子系统信息 |'
- en: '| 7 | Calls number |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 调用次数 |'
- en: '| 8 | Standard deviation |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 标准偏差 |'
- en: '| 9 | Memory allocation |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 内存分配 |'
- en: '| 10 | Memory allocation (in bytes) |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 内存分配（以字节为单位） |'
- en: '| 11 | Stalls |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 停顿 |'
- en: '| -1 | Used to enable the profiling system, without drawing information to
    the screen. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| -1 | 用于启用分析系统，而不将信息绘制到屏幕上。 |'
- en: Profiling in C++
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C++中进行分析
- en: 'To profile in C++, we can make use of the `FUNCTION_PROFILER` pre-processor
    macro definition, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中进行分析，我们可以利用`FUNCTION_PROFILER`预处理器宏定义，如下所示：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The macro will set up the necessary profiler objects: one static `CFrameProfiler`
    object that is kept for the method, and one `CFrameProfilerSection` object that
    is created each time the method is run (and destroyed when returning).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该宏将设置必要的分析器对象：一个静态的`CFrameProfiler`对象，该对象保留在方法中，以及一个`CFrameProfilerSection`对象，每次运行该方法时都会创建（并在返回时销毁）。
- en: 'If the profiler detects that your code runs heavily in relation to other engine
    functions, it will be displayed further up the profile graphs, as shown in the
    following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果分析器检测到您的代码与其他引擎功能的关系密切，它将在分析图表中显示更多，如下面的截图所示：
- en: '![Profiling in C++](img/5909_12_04.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![C++中的分析](img/5909_12_04.jpg)'
- en: If you want to debug a certain section of your code, you can also use the `FRAME_PROFILER`
    macro, which works the same as `FUNCTION_PROFILER`, except that it allows you
    to specify the name of the profiled section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要调试代码的某个部分，还可以使用`FRAME_PROFILER`宏，其工作方式与`FUNCTION_PROFILER`相同，只是允许您指定受监视部分的名称。
- en: 'An example use case for `FRAME_PROFILER` is inside an `if` block, as the frame
    profiler section will be destroyed after the block is done:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`FRAME_PROFILER`的一个示例用例是在`if`块内部，因为帧分析器部分将在块完成后被销毁：'
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now profile the previous code in the game, as shown in the following
    screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在游戏中对先前的代码进行分析，如下面的截图所示：
- en: '![Profiling in C++](img/5909_12_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![C++中的分析](img/5909_12_05.jpg)'
- en: Profiling in C#
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在C#中进行分析
- en: It's also possible to profile your C# code in roughly the same manner. The difference
    is that we can't rely on destructors/finalizers in managed code, and will, therefore,
    have to do a bit of work ourselves.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以以大致相同的方式对C#代码进行分析。不同之处在于我们不能依赖托管代码中的析构函数/终结器，因此必须自己做一些工作。
- en: 'The first thing we have to do is create a `CryEngine.Profiling.FrameProfiler`
    object which will persist for the lifetime of our entity. Then simply call `FrameProfiler.CreateSection`
    on the new frame profiler object each time you need to profile your function,
    and then call `FrameProfilerSection.End` on the resulting object when you''re
    done using the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是创建一个`CryEngine.Profiling.FrameProfiler`对象，该对象将在实体的生命周期内持续存在。然后只需在每次需要对函数进行分析时在新的帧分析器对象上调用`FrameProfiler.CreateSection`，然后在使用以下代码时在生成的对象上调用`FrameProfilerSection.End`：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will then result in the profiler listing `SpawnPoint.OnUpdate`, as shown
    in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，分析器将列出`SpawnPoint.OnUpdate`，如下面的截图所示：
- en: '![Profiling in C#](img/5909_12_06.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![C#中的分析](img/5909_12_06.jpg)'
- en: The console
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台
- en: Although not directly linked to debugging, the CryENGINE console provides the
    means for creating commands that can execute functions directly from the game,
    and the creation of variables that can be modified to change the way the world
    behaves.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管与调试没有直接关联，但CryENGINE控制台提供了创建命令的手段，这些命令可以直接从游戏中执行函数，并创建可以修改以改变世界行为方式的变量。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Fun fact: by using the hashtag (`#`) sign in the console, we can execute Lua
    directly in-game, for example, `#System.Log("My message!");`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是：通过在控制台中使用井号（`#`）符号，我们可以直接在游戏中执行Lua，例如，`#System.Log("My message!");`
- en: Console variables
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台变量
- en: '**Console variables**, commonly referred to as **CVars**, allow the exposure
    of variables in your code to the CryENGINE console, effectively allowing the tweaking
    of settings at runtime or through config (`.cfg`) files.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台变量**，通常称为**CVars**，允许在CryENGINE控制台中公开代码中的变量，有效地允许在运行时或通过配置（`.cfg`）文件中调整设置。'
- en: Pretty much every subsystem uses console variables at runtime in order to tweak
    the behaviour of systems without requiring code modifications.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个子系统都在运行时使用控制台变量，以便在不需要代码修改的情况下调整系统的行为。
- en: Registering a CVar
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册CVar
- en: When registering a new CVar, it's important to distinguish between by-reference
    variables and wrapped variables.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册新的CVar时，重要的是要区分引用变量和包装变量。
- en: The difference is that a by-reference CVar points to a variable defined in your
    own code that updated directly when the value is changed via the console.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于引用CVar指向您自己代码中定义的变量，当通过控制台更改值时会直接更新。
- en: Wrapped variables contain the variable itself inside a specialized **ICVar**
    (C++) implementation inside `CrySystem.dll`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 包装变量包含专门的**ICVar**（C++）实现中的变量本身，位于`CrySystem.dll`中。
- en: By-reference, CVars are most commonly used, as they do not require calling `IConsole::GetCVar`
    every time we want to know the value of the console variable.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 引用变量最常用于CVars，因为它们不需要每次想要知道控制台变量的值时都调用`IConsole::GetCVar`。
- en: In C++
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在C++中
- en: 'To register a by-reference console variable in C++, call `IConsole::Register`
    as shown:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要在C++中注册引用控制台变量，请调用`IConsole::Register`，如下所示：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, the default value of the `g_myVariable` CVar will be `3.0f`. If we changed
    the value via the console, `m_myVariable` will be updated immediately.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`g_myVariable` CVar的默认值将是`3.0f`。如果我们通过控制台更改了值，`m_myVariable`将立即更新。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To find out what the `VF_CHEAT` flag does, see the *Flags* section discussed
    further.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解`VF_CHEAT`标志的作用，请参阅*标志*部分的进一步讨论。
- en: To register a wrapped console variable, use `IConsole::RegisterString`, `RegisterFloat`,
    or `RegisterInt`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册包装的控制台变量，请使用`IConsole::RegisterString`，`RegisterFloat`或`RegisterInt`。
- en: In C#
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在C#中
- en: 'To register a by-reference console variable via CryMono, use `CVar.RegisterFloat`
    or `CVar.RegisterInt`, as shown in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过CryMono注册引用控制台变量，请使用`CVar.RegisterFloat`或`CVar.RegisterInt`，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Due to the backend structure of C++ and C# strings being different, creating
    by-reference string CVars is not possible.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C++和C#字符串的后端结构不同，因此无法创建引用字符串CVars。
- en: If you prefer to use wrapped variables, use `CVar.Register`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用包装变量，请使用`CVar.Register`。
- en: Flags
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标志
- en: When registering a new CVar, the developer should specify a default flag. The
    flags control how the variable behaves when modified or queried.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册新的CVar时，开发人员应指定默认标志。标志控制变量在修改或查询时的行为。
- en: '`VF_NULL`: This flag is set to zero, and is used when no other flags are present.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_NULL`: 如果没有其他标志存在，则将此标志设置为零。'
- en: '`VF_CHEAT`: This flag is used to prevent changes to the variable when cheats
    are enabled, for example, in release mode or multiplayer.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_CHEAT`: 此标志用于在启用作弊时防止更改变量，例如在发布模式或多人游戏中。'
- en: '`VF_READONLY`: This flag can never be changed by the user.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_READONLY`: 用户永远无法更改此标志。'
- en: '`VF_REQUIRE_LEVEL_RELOAD`: This flag warns the user that a change to the variable
    will require a level reload to come into effect.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_REQUIRE_LEVEL_RELOAD`: 此标志警告用户更改变量将需要重新加载级别才能生效。'
- en: '`VF_REQUIRE_APP_RESTART`: This flag warns the user that a change will require
    an application restart to come into effect.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_REQUIRE_APP_RESTART`: 此标志警告用户更改将需要重新启动应用程序才能生效。'
- en: '`VF_MODIFIED`: This flag is set when the variable is modified.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_MODIFIED`: 当变量被修改时设置此标志。'
- en: '`VF_WASINCONFIG`: This flag is set if the variable is changed via a configuration
    (`.cfg`) file.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_WASINCONFIG`: 如果变量是通过配置（.cfg）文件更改的，则设置此标志。'
- en: '`VF_RESTRICTEDMODE`: This flag is set if the variable should be visible and
    usable in restricted (release) console mode.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_RESTRICTEDMODE`: 如果变量应在受限制（发布）的控制台模式中可见和可用，则设置此标志。'
- en: '`VF_INVISIBLE`: This flag is set if the variable should not be visible to the
    user in the console.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_INVISIBLE`: 如果变量不应在控制台中对用户可见，则设置此标志。'
- en: '`VF_ALWAYSONCHANGE`: This flag always accepts the new value, and calls on-change
    callbacks even if the value stayed the same.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_ALWAYSONCHANGE`: 此标志始终接受新值，并在值保持不变时调用更改回调。'
- en: '`VF_BLOCKFRAME`: This flag blocks the execution of further console commands
    for one frame after the variable was used.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_BLOCKFRAME`: 此标志在使用变量后阻止执行更多控制台命令一帧。'
- en: '`VF_CONST_CVAR`: This flag is set if the variable should not be editable via
    configuration (`.cfg`) files.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_CONST_CVAR`: 如果变量不应通过配置（.cfg）文件进行编辑，则设置此标志。'
- en: '`VF_CHEAT_ALWAYS_CHECK`: This flag is set if the variable is very vulnerable,
    and should be checked continuously.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_CHEAT_ALWAYS_CHECK`: 如果变量非常脆弱并且应该持续检查，则设置此标志。'
- en: '`VF_CHEAT_NOCHECK`: This flag is same as `VF_CHEAT`, except that it will not
    be checked due to changes to it being harmless.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VF_CHEAT_NOCHECK`: 此标志与`VF_CHEAT`相同，只是由于对其进行的更改是无害的，因此不会进行检查。'
- en: Console variable groups
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台变量组
- en: In order to facilitate the creation of different system specifications (Low
    / Medium / High / Very High graphic levels), otherwise called **Sys Spec**, we
    can utilize CVar groups. These groups allow the value of multiple CVars to be
    changed simultaneously whenever the spec is changed.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于创建不同的系统规格（低/中/高/非常高的图形级别），也称为**Sys Spec**，我们可以利用CVar组。这些组允许在更改规范时同时更改多个CVars的值。
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are unsure of what Sys Specs do, read the *System specifications* section
    discussed later in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定Sys Specs的作用，请阅读本章后面讨论的*系统规格*部分。
- en: To change the system spec, the user can simply change the value of the `sys_spec`
    console variable. Once changed, the engine will parse the linked spec file in
    `Engine/Config/CVarGroups/` and set the CVar values defined.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改系统规范，用户只需更改`sys_spec`控制台变量的值。一旦更改，引擎将解析`Engine/Config/CVarGroups/`中的链接规范文件，并设置定义的CVar值。
- en: For example, if the `sys_spec_GameEffects` CVar is changed, the engine will
    open `Engine/Config/CVarGroups/sys_spec_GameEffects.cfg`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果更改了`sys_spec_GameEffects` CVar，引擎将打开`Engine/Config/CVarGroups/sys_spec_GameEffects.cfg`。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `sys_spec_Full` group is considered the root group, and is what is triggered
    when the `sys_spec` CVar is changed. It is set to update all subgroups, such as
    `sys_spec_Quality`, when it is changed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys_spec_Full`组被视为根组，并且在更改`sys_spec` CVar时触发。当更改时，它将更新所有子组，例如`sys_spec_Quality`。'
- en: Cfg structure
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Cfg结构
- en: 'The structure of a CVar group configuration file is relatively easy to understand.
    As an example, see the following `sys_spec_GameEffects` file:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: CVar组配置文件的结构相对容易理解。例如，查看以下`sys_spec_GameEffects`文件：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first three lines defines which spec is default for this configuration file,
    in this case High (`3`).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 前三行定义了此配置文件的默认规范，本例中为高（`3`）。
- en: Following the default spec are the default values for CVars in the high spec.
    These will be used as a baseline and applied to all specs, unless overridden.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认规范之后是高规范中CVars的默认值。除非被覆盖，否则这些值将被用作基线并应用于所有规范。
- en: Postioned after the default spec are Low Spec (`[1]`), Medium Spec (`[2]`) and
    Very High Spec (`[4]`). The CVars placed after the definitions define what values
    the variables should be set to in that spec.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认规范之后是低规范（`[1]`）、中等规范（`[2]`）和非常高规范（`[4]`）。在定义之后放置的CVars定义了在该规范中应将变量设置为的值。
- en: System specifications
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 系统规格
- en: The current system spec is determined by the value of the `sys_spec` CVar. Changing
    the value of the variable will automatically load shaders and CVar groups that
    have been tweaked specifically for that spec. For example, if the game is running
    a bit badly on your PC, you might want to change the spec to Low (`1`).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当前系统规范由`sys_spec` CVar的值确定。更改变量的值将自动加载为该规范专门调整的着色器和CVar组。例如，如果游戏在您的PC上运行得有点糟糕，您可能想将规范更改为低（`1`）。
- en: '`0`: Custom'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`: 自定义'
- en: '`1`: Low'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1`: 低'
- en: '`2`: Medium'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2`: 中等'
- en: '`3`: High'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3`: 高'
- en: '`4`: Very High'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4`: 非常高'
- en: '`5`: Xbox 360'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`5`: Xbox 360'
- en: '`6`: PlayStation 3'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`6`: PlayStation 3'
- en: Console commands
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台命令
- en: '**Console commands** (commonly referred to as **CCommands**), are essentially
    functions that have been mapped to console variables. However, instead of changing
    the value of a referenced variable when the command is entered into the console,
    the call will trigger a function that was specified while registering the command.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台命令**（通常称为**CCommands**）本质上是已映射到控制台变量的函数。但是，与将命令输入控制台时更改引用变量的值不同，调用将触发在注册命令时指定的函数。'
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that console variables can also specify `On Change` callbacks that are
    automatically invoked when the value is changed. Prefer console commands when
    an internal variable is not relevant to your intent.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，控制台变量还可以指定“On Change”回调，在值更改时会自动调用。当内部变量与您的意图无关时，请使用控制台命令。
- en: Registering a console command in C#
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在C#中注册控制台命令
- en: 'To register a console command in C#, use `ConsoleCommand.Register` as shown
    in the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要在C#中注册控制台命令，请使用`ConsoleCommand.Register`，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Triggering `MyCSharpCommand` in the console will now result in the `OnMyCSharpCommand`
    function being invoked.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中触发`MyCSharpCommand`现在将导致调用`OnMyCSharpCommand`函数。
- en: Arguments
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: When your callback is triggered, you'll be able to retrieve the set of arguments
    that were added after the command itself. For example, if the user were to activate
    the command by typing `MyCommand 2`, we might want to retrieve the `2` part of
    the string.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发回调时，您将能够检索在命令本身之后添加的参数集。例如，如果用户通过键入`MyCommand 2`来激活命令，我们可能希望检索字符串的`2`部分。
- en: 'To do so, use the `ConsoleCommandArgs.Args` array, and specify which index
    the argument you want is at. For the previous example, it would look like the
    following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请使用`ConsoleCommandArgs.Args`数组，并指定要获取的参数的索引。对于前面的示例，代码将如下所示：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To retrieve the full command line that was specified with the command, use `ConsoleCommandArgs.FullCommandLine`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索使用命令指定的完整命令行，请使用`ConsoleCommandArgs.FullCommandLine`。
- en: Creating a Console Command in C++
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在C++中创建控制台命令
- en: 'To add a new console command in C++, use `IConsole::AddCommand` as shown:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要在C++中添加新的控制台命令，请使用`IConsole::AddCommand`，如下所示：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After compiling and starting the engine, you will be able to type `MyCommand`
    in the console and trigger your `MyCommandCallback` function.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并启动引擎后，您将能够在控制台中键入`MyCommand`并触发您的`MyCommandCallback`函数。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们有：
- en: Learned how to use a selection of the engine's debugging tools
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会了如何使用引擎的一些调试工具
- en: Profiled our code to ensure optimal performance
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们的代码进行了性能优化
- en: Learned what console variables (CVars) are, and how to use them
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了什么是控制台变量（CVars），以及如何使用它们
- en: Created custom console commands
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义控制台命令
- en: You should now have a basic understanding of how to best program in CryENGINE.
    Make sure that you always keep profiling and debugging methods in mind, in order
    to ensure that your code runs optimally.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对如何在CryENGINE中进行最佳编程有了基本的了解。请确保始终牢记性能分析和调试方法，以确保您的代码运行良好。
- en: Assuming that you've read the book's chapters in order, you should now be aware
    of the workings of the most important engine systems. We hope you enjoyed the
    read, and wish you the best of luck with using your newly-gained CryENGINE knowledge!
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您按顺序阅读了本书的章节，现在您应该了解最重要的引擎系统的运作方式。我们希望您喜欢阅读，并祝您在使用您新获得的CryENGINE知识时一切顺利！
