["```js\n<button id=\"billButton\" onclick=\"billTheUser(some, sales, data)\">Bill me</button>\n```", "```js\nfunction billTheUser(some, sales, data) {\n window.alert(\"Billing the user...\");\n // *actually bill the user*\n}\n```", "```js\n<button id=\"billButton\" onclick=\"billTheUser(some, sales, data)\">Bill me</button>\n<b>WARNING: PRESS ONLY ONCE, DO NOT PRESS AGAIN!!</b>\n```", "```js\nlet clicked = false;\n.\n.\n.\nfunction billTheUser(some, sales, data) {\n if (!clicked) {\n        clicked = true;\n window.alert(\"Billing the user...\");\n // *actually bill the user*\n }\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n    document.getElementById(\"billButton\").onclick = null;\n window.alert(\"Billing the user...\");\n // actually bill the user\n}\n```", "```js\n<button\n id=\"billButton\"\n    onclick=\"billTheUser('billButton', some, sales, data)\"\n>\n Bill me\n</button>;\n```", "```js\nfunction billTheUser(buttonId, some, sales, data) {\n    document.getElementById(buttonId).onclick = null;\n window.alert(\"Billing the user...\");\n // actually bill the user\n}\n```", "```js\nfunction alreadyBilled() {\n window.alert(\"Your billing process is running; don't click, please.\");\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n    document.getElementById(\"billButton\").onclick = alreadyBilled;\n window.alert(\"Billing the user...\");\n // actually bill the user\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n    document.getElementById(\"billButton\").setAttribute(\"disabled\", \"true\");\n window.alert(\"Billing the user...\");\n // actually bill the user\n}\n```", "```js\nfunction billTheUser(some, sales, data) {\n    billTheUser = function() {};\n window.alert(\"Billing the user...\");\n // *actually bill the user*\n}\n```", "```js\nvar billTheUser = (clicked => {\n return (some, sales, data) => {\n        if (!clicked) {\n            clicked = true;\n window.alert(\"Billing the user...\");\n // *actually bill the user*\n }\n };\n})(false);\n```", "```js\nconst once = fn => {\n let done = false;\n    return (...args) => {\n if (!done) {\n done = true;\n            fn(...args);\n }\n };\n};\n```", "```js\n<button id=\"billButton\" onclick=\"once(billTheUser)(some, sales, data)\">\n Bill me\n</button>;\n```", "```js\nconst squeak = a => console.log(a, \" squeak!!\");\nsqueak(\"original\"); // \"original squeak!!\"\nsqueak(\"original\"); // \"original squeak!!\" squeak(\"original\"); // \"original squeak!!\" const squeakOnce = once(squeak);\nsqueakOnce(\"only once\"); // \"only once squeak!!\"\nsqueakOnce(\"only once\"); // no output\nsqueakOnce(\"only once\"); // no output\n```", "```js\n<!DOCTYPE html> <html> <head>\n  <meta  charset=\"utf-8\">\n  <title>Jasmine Spec Runner v2.6.1</title>\n\n <link  rel=\"shortcut icon\"  type=\"image/png\"  href=\"lib/jasmine-2.6.1/jasmine_favicon.png\">\n  <link  rel=\"stylesheet\"  href=\"lib/jasmine-2.6.1/jasmine.css\">\n\n  <script  src=\"lib/jasmine-2.6.1/jasmine.js\"></script>\n  <script  src=\"lib/jasmine-2.6.1/jasmine-html.js\"></script>\n  <script  src=\"lib/jasmine-2.6.1/boot.js\"></script>\n\n  <script  src=\"src/once.js\"></script>\n  <script  src=\"tests/once.test.1.js\"></script> </head> <body> </body> </html>\n```", "```js\ndescribe(\"once\", () => {\n beforeEach(() => {\n window.myFn = () => {};\n spyOn(window, \"myFn\");\n });\n\n it(\"without 'once', a function always runs\", () => {\n myFn();\n myFn();\n myFn();\n expect(myFn).toHaveBeenCalledTimes(3);\n });\n\n it(\"with 'once', a function runs one time\", () => {\n window.onceFn = once(window.myFn);\n spyOn(window, \"onceFn\").and.callThrough();\n onceFn();\n onceFn();\n onceFn();\n expect(onceFn).toHaveBeenCalledTimes(3);\n expect(myFn).toHaveBeenCalledTimes(1);\n });\n});\n```", "```js\nconst onceAndAfter = (f, g) => {\n let done = false;\n return (...args) => {\n if (!done) {\n done = true;\n f(...args);\n        } else {\n g(...args);\n }\n };\n};\n```", "```js\nconst squeak = (x) => console.log(x, \"squeak!!\");\nconst creak = (x) => console.log(x, \"creak!!\");\nconst makeSound = onceAndAfter(squeak, creak);\nmakeSound(\"door\"); // \"door squeak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\nmakeSound(\"door\"); // \"door creak!!\"\n```", "```js\ndescribe(\"onceAndAfter\", () => {\n it(\"should call the first function once, and the other after\", () => {\n func1 = () => {};\n spyOn(window, \"func1\");\n func2 = () => {};\n spyOn(window, \"func2\");\n onceFn = onceAndAfter(func1, func2);\n\n onceFn();\n expect(func1).toHaveBeenCalledTimes(1);\n expect(func2).toHaveBeenCalledTimes(0);\n\n onceFn();\n expect(func1).toHaveBeenCalledTimes(1);\n expect(func2).toHaveBeenCalledTimes(1);\n\n onceFn();\n expect(func1).toHaveBeenCalledTimes(1);\n expect(func2).toHaveBeenCalledTimes(2);\n\n onceFn();\n expect(func1).toHaveBeenCalledTimes(1);\n expect(func2).toHaveBeenCalledTimes(3);\n });\n});\n```", "```js\n let sayA = () => console.log(\"A\");\n let sayB = () => console.log(\"B\");\n\n let alt = alternator(sayA, sayB);\n alt(); // *A*\n alt(); // *B*\n alt(); // *A*\n alt(); // *B*\n alt(); // *A*\n alt(); // *B*\n```"]