["```js\n{\n \"first_name\": \"Sonyl\",\n \"last_name\": \"Nagale\",\n \"role\": \"author\",\n \"mood\": \"accomplished\"\n}\n```", "```js\n{\n \"first_name\": \"Sonyl\",\n \"last_name\": \"Nagale\",\n \"role\": \"author\",\n \"mood\": \"accomplished\",\n \"tasks\": {\n  \"write\": {\n   \"status\": \"incomplete\"\n  },\n  \"cook\": {\n   \"meal\": \"carne asada\"\n  },\n  \"read\": {\n   \"book\": \"Le Petit Prince\"\n  },\n  \"sleep\": {\n   \"time\": \"8\"\n  }\n },\n \"favorite_foods\": {\n  \"mexican\": [\"enchiladas\", \"burritos\", \"quesadillas\"],\n  \"indian\": [\"saag paneer\", \"murgh makhani\", \"kulfi\"]\n }\n}\n```", "```js\nCREATE TABLE `admins` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `admin_role_id` int(11) DEFAULT NULL,\n `first_name` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,\n `last_name` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,\n `username` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,\n `email` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,\n `phone` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,\n `password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\n `avatar` varchar(100) COLLATE utf8_unicode_ci DEFAULT NULL,\n `admin_role` enum('admin','sub_admin') COLLATE utf8_unicode_ci DEFAULT\n  NULL,\n `status` enum('active','inactive','deleted') COLLATE utf8_unicode_ci \n  DEFAULT NULL,\n `last_login` datetime DEFAULT NULL,\n `secret_key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\n `last_login_ip` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,\n `sidebar_status` enum('open','close') COLLATE utf8_unicode_ci DEFAULT\n  'open',\n `created` datetime DEFAULT NULL,\n `modified` datetime DEFAULT NULL,\n PRIMARY KEY (`id`),\n KEY `email` (`email`),\n KEY `password` (`password`),\n KEY `admin_role` (`admin_role`),\n KEY `status` (`status`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```", "```js\n{\n  \"first_name\": \"Sonyl\",\n  \"last_name\": \"Nagale\",\n  \"admin_role\": \"admin\",\n  \"status\": \"active\"\n},\n{\n  \"first_name\": \"Jean-Luc\",\n  \"last_name\": \"Picard\",\n  \"admin_role\": \"admin\",\n  \"status\": \"inactive\"\n}\n```", "```js\nINSERT INTO\n    admins(first_name, last_name, admin_role, status)\n  VALUES\n    ('Sonyl', 'Nagale', 'admin', 'active'),\n    ('Jean-Luc', 'Picard', 'admin', 'inactive')\n```", "```js\ndb.admins.insertMany([\n{\n  \"first_name\": \"Sonyl\",\n  \"last_name\": \"Nagale\",\n  \"admin_role\": \"admin\",\n  \"status\": \"active\"\n},\n{\n  \"first_name\": \"Jean-Luc\",\n  \"last_name\": \"Picard\",\n  \"admin_role\": \"admin\",\n  \"status\": \"inactive\"\n}]\n)\n```", "```js\nSELECT\n  first_name, last_name \nFROM \n  admins \nWHERE \n  admin_role = \"admin\" \nAND \n  status = \"active\"\n```", "```js\ndb.admins.find({ status: 'active', admin_role: 'admin'}, { first_name: 1, last_name: 1})\n```", "```js\nnpm install\nmkdir -p data/MongoDB\nmongod --dbpath data/MongoDB\n```", "```js\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 bin\n\u2502   \u2514\u2500\u2500 www\n\u251c\u2500\u2500 controllers\n\u2502   \u2514\u2500\u2500 ships.js\n\u251c\u2500\u2500 jest-MongoDBdb-config.js\n\u251c\u2500\u2500 jest.config.js\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 MongoDB.js\n\u2502   \u251c\u2500\u2500 setup.js\n\u2502   \u2514\u2500\u2500 ships.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2502   \u2514\u2500\u2500 bg.jpg\n\u2502   \u251c\u2500\u2500 javascripts\n\u2502   \u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2502   \u2514\u2500\u2500 play.js\n\u2502   \u2514\u2500\u2500 stylesheets\n\u2502       \u251c\u2500\u2500 micromodal.css\n\u2502       \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 routes\n\u2502   \u251c\u2500\u2500 enemy.js\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 play.js\n\u2502   \u251c\u2500\u2500 ships.js\n\u2502   \u2514\u2500\u2500 users.js\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 setup.model.test.js\n\u2502   \u251c\u2500\u2500 ships.controller.test.js\n\u2502   \u2514\u2500\u2500 ships.model.test.js\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 enemy.hbs\n    \u251c\u2500\u2500 error.hbs\n    \u251c\u2500\u2500 index.hbs\n    \u251c\u2500\u2500 layout.hbs\n    \u2514\u2500\u2500 play.hbs\n```", "```js\ndescribe('test', () => {\n it('should return true', () => {\n   expect(1).toEqual(1)\n });\n});\n```", "```js\n$ node_modules/.bin/jest test.test.js\n PASS  tests/test.test.js\n  test\n    \u2713 should return true (2ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.711s, estimated 1s\nRan all test suites matching /test.test.js/i.\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\nconst client = new MongoClient(\"mongodb://127.0.0.1:27017\", { useNewUrlParser: true, useUnifiedTopology: true });\n\nlet db;\n```", "```js\nconst connectDB = async (test = '') => {\n if (db) {\n   return db;\n }\n\n try {\n   await client.connect();\n   db = client.db(`starships${test}`);\n } catch (err) {\n   console.error(err);\n }\n\n return db;\n}\n```", "```js\nconst getDB = () => db\n\nconst disconnectDB = () => client.close()\n\nmodule.exports = { connectDB, getDB, disconnectDB }\n```", "```js\nconst MongoDB = require('../models/mongo')\n```", "```js\nlet db\n\nbeforeAll(async () => {\n   db = await MongoDB.connectDB('test')\n})\n\nafterAll(async (done) => {\n   await db.collection('names').deleteMany({})\n   await MongoDB.disconnectDB()\n   done()\n})\n```", "```js\nit('should find names and return true', async () => {\n   const names = await db.collection(\"names\").find().toArray()\n   expect(names.length).toBeGreaterThan(0)\n})\n```", "```js\n$ node_modules/.bin/jest test.test.js\n FAIL  tests/test.test.js\n  test\n    \u2713 should return true (2ms)\n    \u2715 should find names and return true (9ms)\n\n  \u25cf test > should find names and return true\n\n    expect(received).toBeGreaterThan(expected)\n\n    Expected: > 0\n    Received:   0\n\n      20 |   it('should find names and return true', async () => {\n      21 |     const names = await db.collection(\"names\"\n                ).find().toArray()\n    > 22 |     expect(names.length).toBeGreaterThan(0)\n         |                          ^\n      23 |   })\n      24 | });\n\n      at Object.<anonymous> (tests/test.test.js:22:26)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 passed, 2 total\nSnapshots:   0 total\nTime:        1.622s, estimated 2s\nRan all test suites matching /test.test.js/i.\n```", "```js\nconst MongoDB = require('../models/mongo')\nconst insertRandomNames = require('../models/setup')\n\ndescribe('insert', () => {\n let db\n\n beforeAll(async () => {\n   db = await MongoDB.connectDB('test')\n })\n\n afterAll(async (done) => {\n   await db.collection('names').deleteMany({})\n   await MongoDB.disconnectDB()\n   done()\n })\n\n it('should insert the random names', async () => {\n   await insertRandomNames()\n\n   const names = await db.collection(\"names\").find().toArray()\n   expect(names.length).toBeGreaterThan(0)\n })\n\n})\n```", "```js\nconst fs = require('fs')\nconst MongoDB = require('./mongo')\n\nlet db\n\nconst setup = async () => {\n db = await MongoDB.connectDB()\n}\n\nconst insertRandomNames = async () => {\n await setup()\n\n const names = JSON.parse(fs.readFileSync(`${__dirname}/../\n  data/starship-names.json`)).names\n\n const result = await db.collection(\"names\").updateOne({ key: \n  \"names\" }, { $set: { names: names } }, { upsert: true })\n\n return result\n}\n\nmodule.exports = insertRandomNames\n```", "```js\ndb.collection(\"names\").updateOne({ key: \"names\" }, { $set: { names: names } }, { upsert: true })\n```", "```js\n<h1>Starship Fleet</h1>\n\n<hr />\n\n<h2>Fleet Status</h2>\n{{#if ships.length}}\n <table class=\"table\">\n   <tr>\n     <th>Name</th>\n     <th>Registry</th>\n     <th>Top Speed</th>\n     <th>Shield Strength</th>\n     <th>Phaser Power</th>\n     <th>Hull Damage</th>\n     <th>Torpedo Complement</th>\n     <th></th>\n   </tr>\n {{#each ships}}\n   <tr data-ship=\"{{this.registry}}\">\n     <td>{{this.name}}</td>\n     <td>{{this.registry}}</td>\n     <td>{{this.speed}}</td>\n     <td>{{this.shields}}</td>\n     <td>{{this.phasers}}</td>\n     <td>{{this.hull}}</td>\n     <td>{{this.torpedoes}}</td>\n     <td><a class=\"btn btn-primary scuttle\">Scuttle Ship</a></td>\n   </tr>\n {{/each}}\n </table>\n{{else}}\n <p>The fleet is empty. Create some ships below.</p>\n{{/if}}\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nconst ShipsController = require('../controllers/ships');\n\n/* GET home page. */\nrouter.get('/', async (req, res, next) => {\n res.render('index', { ships: await ShipsController.getFleet() });\n});\n\nmodule.exports = router;\n```", "```js\nexports.getFleet = async (enemy = false) => {\n return await ShipsModel.getFleet(enemy)\n}\n```", "```js\nexports.getFleet = async (enemy) => {\n await setup()\n\n const fleet = await db.collection((!enemy) ? \"fleet\" :\n \"enemy\").find().toArray();\n return fleet.sort((a, b) => (a.name > b.name) ? 1 : -1)\n}\n```", "```js\ndocument.querySelectorAll('.fire').forEach((el) => {\n el.addEventListener('click', (e) => {\n   const weapon = (e.target.classList.value.indexOf('fire-torpedo') \n   > 0) ? \"torpedo\" : \"phasers\"\n   const target = e.target.parentNode.getElementsByTagName\n   ('select')[0].value\n```", "```js\nfetch(\n`/play/fire?  attacker=${e.target.closest('td').dataset.attacker}&target=${target}&weapon=${weapon}`)\n.then(response => response.json())\n.then(data => {\n```", "```js\nconst { registry, name, shields, torpedoes, hull, scuttled } = data.target\n```", "```js\nif (scuttled) {\n       document.querySelector(`[data-ship=${registry}]`).remove()\n       document.querySelectorAll(`option[value=${registry}]`).\n        forEach(el => el.remove())\n\n       const titleNode = document.querySelector(\"#modal-1-title\")\n\n       if (data.fleet.length === 0) {\n         titleNode.innerHTML = \"Your fleet has been destroyed!\"\n       } else if (data.enemyFleet.length === 0) {\n         titleNode.innerHTML = \"You've destroyed the Borg!\"\n       } else {\n         titleNode.innerHTML = `${name} destroyed!`\n       }\n\n       MicroModal.show('modal-1')\n       return\n     }\n```", "```js\n     const targetShip = document.querySelector(`[data-\n      ship=${registry}]`)\n\n     targetShip.querySelector('.shields').innerHTML = shields\n     targetShip.querySelector('.torpedoes').innerHTML = torpedoes\n     targetShip.querySelector('.hull').innerHTML = hull\n\n   })\n })\n})\n```", "```js\nconst express = require('express');\nconst router = express.Router();\nconst ShipsController = require('../controllers/ships');\n\nrouter.get('/', async (req, res, next) => {\n res.render('play', { fleet: await ShipsController.getFleet(), enemyFleet:\n  await ShipsController.getFleet(true) });\n});\n\nrouter.get('/fire', async (req, res, next) => {\n res.json(await ShipsController.fire(req.query.attacker, req.query.target, \n  req.query.weapon));\n});\n\nmodule.exports = router;\n```", "```js\nexports.fire = async (ship1, ship2, weapon) => {\n let target = await ShipsModel.getShip(ship2)\n const source = await ShipsModel.getShip(ship1)\n let damage = calculateDamage(source, target, weapon)\n  target = await ShipsModel.registerDamage(target, damage)\n\n return { target: target, fleet: await this.getFleet(false), enemyFleet: \n  await this.getFleet(true) }\n}\n```", "```js\nexports.registerDamage = async (ship, damage) => {\n const enemy = (!ship.registry.indexOf('NCC')) ? \"fleet\" : \"enemy\"\n  const target = await db.collection(enemy).findOne({ registry:\n   ship.registry })\n\n if (target.shields > damage) {\n   target.shields -= damage\n } else {\n   target.shields -= damage\n   target.hull += Math.abs(target.shields)\n   target.shields = 0\n }\n\n await db.collection(enemy).updateOne({ registry: ship.registry }, { $set: { shields: target.shields, hull: target.hull } })\n  if (target.hull >= 100) {\n   await this.scuttle(target.registry)\n   target.scuttled = true\n }\n\n return target\n}\n```", "```js\nawait db.collection(enemy).updateOne({ registry: ship.registry }, { $set: { shields: target.shields, hull: target.hull } })\n```", "```js\nconst randomSeed = Math.ceil(Math.random() * names.length);\n\nconst shipData = {\n  name: (!enemy) ? names[randomSeed] : \"Borg Cube\",\n```", "```js\nwhile (unavailableRegistries.includes(shipData.registry)) {\n  shipData.registry = `NCC-${Math.round(Math.random() * 10000)}`;\n}\n```"]