- en: Getting Started with .NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用.NET Core
- en: When Microsoft released the first version of .NET Framework, a platform for
    creating, running, and deploying services and applications, it was a game changer
    and a revolution in the Microsoft development community. Several cutting-edge
    applications were developed with the initial version of the framework and then
    several versions were released afterwards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当微软发布第一个版本的.NET Framework时，这是一个创建、运行和部署服务和应用程序的平台，它改变了游戏规则，是微软开发社区的一场革命。使用初始版本的框架开发了几个尖端应用程序，然后发布了几个版本。
- en: .NET Framework has thrived and matured over the years with support for multiple
    programming languages and the inclusion of several features to make programming
    on the platform easy and worthwhile. But as robust and appealing the framework
    is, there is the limitation of restricting the development and deployment of applications
    to Microsoft-only operating system variants.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，.NET Framework得到了蓬勃发展和成熟，支持多种编程语言，并包含了多个功能，使得在该平台上编程变得简单而有价值。但是，尽管框架非常强大和吸引人，但限制了开发和部署应用程序只能在微软操作系统变体上进行。
- en: In order to create a cloud-optimized, cross-platform implementation of .NET
    Framework for developers to solve the limitations of .NET Framework, Microsoft
    started the development of a .NET Core platform using the .NET Framework. With
    the introduction of Version 1.0 of .NET Core in 2016, application development
    on the .NET platform took on a new dimension, as .NET developers could now build
    applications that worked on Windows, Linux, macOS, and cloud, embedded, and IoT
    devices with ease. .NET Core is compatible with .NET Framework, Xamarin, and Mono
    through the .NET Standard.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为开发人员解决.NET Framework的限制，创建一个面向云的、跨平台的.NET Framework实现，微软开始使用.NET Framework开发.NET
    Core平台。随着2016年版本1.0的推出，.NET平台的应用程序开发进入了一个新的维度，因为.NET开发人员现在可以轻松地构建在Windows、Linux、macOS和云、嵌入式和物联网设备上运行的应用程序。.NET
    Core与.NET Framework、Xamarin和Mono兼容，通过.NET标准。
- en: 'This chapter will introduce the super cool new cross-platform capabilities
    of .NET Core and C# 7\. We will be learning as we create an ASP.NET MVC application
    on Ubuntu Linux with TDD. In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍.NET Core和C# 7的超酷新跨平台功能。我们将在Ubuntu Linux上使用TDD创建一个ASP.NET MVC应用程序来学习。在本章中，我们将涵盖以下主题：
- en: .NET Core framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core框架
- en: The structure of a .NET Core application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core应用程序的结构
- en: A tour of Microsoft's Visual Studio Code Editor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软的Visual Studio Code编辑器之旅
- en: A look at the new features of C# 7
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 7的新功能一览
- en: Creating an ASP.NET MVC Core application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建ASP.NET MVC Core应用程序
- en: .NET Core framework
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core框架
- en: '**.NET Core** is a cross-platform open source development framework that runs
    on Windows, Linux, and macOS and cross architecture with support for x86, x64,
    and ARM. .NET Core was forked from .NET Framework, which technically makes it
    a subset of the latter, though streamlined line, and modular. .NET Core is a development
    platform that gives you great flexibility in developing and deploying applications.
    The new platform frees you from hassles usually experienced during application
    deployment. Thus, you don''t have to worry about managing versions of application
    runtime on deployment servers.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET Core**是一个跨平台的开源开发框架，可以在Windows、Linux和macOS上运行，并支持x86、x64和ARM架构。.NET
    Core是从.NET Framework分叉出来的，从技术上讲，它是后者的一个子集，尽管是简化的、模块化的。.NET Core是一个开发平台，可以让您在开发和部署应用程序时拥有很大的灵活性。新平台使您摆脱了通常在应用程序部署过程中遇到的麻烦。因此，您不必担心在部署服务器上管理应用程序运行时的版本。'
- en: Currently, in Version 2.0.7, .NET Core includes the .NET runtime with great
    performance and many features. Microsoft claims it's the fastest version of .NET
    platform. It has more APIs and more project templates have been added, such as
    those for developing ReactJS and AngularJS applications that run on .NET Core.
    Also, Version 2.0.7 has a set of command-line tools that enables you to build
    and run command-line applications with ease on the different platforms, as well
    as simplified packaging and support for Visual Studio for Macintosh. A big by-product
    of .NET Core is the cross-platform modular web framework, ASP.NET Core, which
    is a total redesign of ASP.NET and runs on .NET Core.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，版本2.0.7中，.NET Core包括具有出色性能和许多功能的.NET运行时。微软声称这是最快的.NET平台版本。它有更多的API和更多的项目模板，比如用于在.NET
    Core上运行的ReactJS和AngularJS应用程序的模板。此外，版本2.0.7还有一组命令行工具，使您能够在不同平台上轻松构建和运行命令行应用程序，以及简化的打包和对Macintosh上的Visual
    Studio的支持。.NET Core的一个重要副产品是跨平台模块化Web框架ASP.NET Core，它是ASP.NET的全面重新设计，并在.NET Core上运行。
- en: .NET Framework is robust and contains several libraries for use in application
    development. However, some of the framework's components and libraries can couple
    with the Windows operating system. For example the `System.Drawing` library depends
    on Windows GDI, which is why .NET Framework cannot be considered cross-platform
    even though it has different implementations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework非常强大，并包含多个库用于应用程序开发。然而，一些框架的组件和库可能与Windows操作系统耦合。例如，`System.Drawing`库依赖于Windows
    GDI，这就是为什么.NET Framework不能被认为是跨平台的，尽管它有不同的实现。
- en: In order to make .NET Core truly cross-platform, components such as Windows
    Forms and **Windows Presentation Foundation** (**WPF**) that have strong dependence
    on the Windows OS have been removed from the platform. ASP.NET Web Forms and **Windows
    Communication Foundation** (**WCF**) have also been removed and replaced with
    ASP.NET Core MVC and ASP.NET Core Web API. Additionally, **Entity Framework **(**EF**)
    has been streamlined to make it cross-platform and named Entity Framework Core.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使.NET Core真正跨平台，像Windows Forms和**Windows Presentation Foundation**（**WPF**）这样对Windows操作系统有很强依赖的组件已经从平台中移除。ASP.NET
    Web Forms和**Windows Communication Foundation**（**WCF**）也已被移除，并用ASP.NET Core MVC和ASP.NET
    Core Web API替代。此外，**Entity Framework**（**EF**）已经被简化，使其跨平台，并命名为Entity Framework
    Core。
- en: Also, because of the dependency that .NET Framework has on the Windows OS, Microsoft
    could not open the code base. However, .NET Core is fully open source, hosted
    on GitHub, and has a thriving developer community, constantly working on new features
    and extending the scope of the platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于.NET Framework对Windows操作系统的依赖，微软无法开放源代码。然而，.NET Core是完全开源的，托管在GitHub上，并拥有一个不断努力开发新功能和扩展平台范围的蓬勃发展的开发者社区。
- en: .NET Standard
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET标准
- en: '**.NET Standard** is a Microsoft-maintained set of specifications and standards
    that all .NET platforms must adhere to and implement. It formally specifies the
    APIs that are meant to be implemented by all variants of the .NET platform. There
    are currently three development platforms on the .NET platform—.NET Core, .NET
    Framework, and Xamarin. The .NET platform is needed to provide uniformity, and
    consistency, and makes it easier to share codes and reuse libraries on the three
    variants of .NET platform.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET标准**是微软维护的一组规范和标准，所有.NET平台都必须遵循和实现。它正式规定了所有.NET平台变体都应该实现的API。目前.NET平台上有三个开发平台—.NET
    Core、.NET Framework和Xamarin。.NET平台需要提供统一性和一致性，使得在这三个.NET平台变体上更容易共享代码和重用库。'
- en: .NET platform provides the definition of a set of uniform Base Class Libraries
    APIs to be implemented by all .NET platforms, to allow developers to easily develop
    applications and reusable libraries across the .NET platforms. Currently in Version
    2.0.7, .NET Standard provides new APIs that were not implemented in Version 1.0
    of .NET Core but are now implemented in Version 2.0\. More than 20,000 APIs have
    been added to the runtime components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: .NET平台提供了一组统一的基类库API的定义，所有.NET平台都必须实现，以便开发人员可以轻松地在.NET平台上开发应用程序和可重用库。目前的版本是2.0.7，.NET标准提供了新的API，这些API在.NET
    Core 1.0中没有实现，但现在在2.0版本中已经实现。超过20,000个API已经添加到运行时组件中。
- en: 'Additionally, .NET Standard is a target framework, which means that you can
    develop your application to target a specific version of .NET Standard, allowing
    the application to run on any .NET platform that implements the standard, and
    you can easily share codes, libraries, and binaries among the different .NET platforms.
    When building your application to target .NET Standard, you should know that higher
    versions of .NET Standard have more APIs available for use but are not implemented
    by many platforms. It is always recommended that you target a lower version of
    the standard, which will guarantee that it''s implemented by many platforms:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，.NET标准是一个目标框架，这意味着你可以开发你的应用程序以针对特定版本的.NET标准，使得应用程序可以在实现该标准的任何.NET平台上运行，并且你可以轻松地在不同的.NET平台之间共享代码、库和二进制文件。当构建应用程序以针对.NET标准时，你应该知道较高版本的.NET标准有更多可用的API，但并不是许多平台都实现了。建议你始终针对较低版本的标准，这将保证它被许多平台实现：
- en: '![](img/79979ff9-3e9a-489c-ab1d-65ae71a535f1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79979ff9-3e9a-489c-ab1d-65ae71a535f1.png)'
- en: .NET Core components
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET核心组件
- en: '.NET Core, being a general-purpose application-development platform, is made
    up of **CoreCLR**, **CoreFX**, **SDK and CLI tools**, **application host**, and
    **dotnet application launcher**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core作为通用应用程序开发平台，由**CoreCLR**、**CoreFX**、**SDK和CLI工具**、**应用程序主机**和**dotnet应用程序启动器**组成：
- en: '![](img/fa1eaeb2-5f73-4cc8-8f01-bfb2c3b84a79.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa1eaeb2-5f73-4cc8-8f01-bfb2c3b84a79.png)'
- en: 'The CoreCLR, also known as .NET Core Runtime, is at the heart of the .NET Core
    and is a cross-platform implementation of the CLR; the original .NET Framework
    CLR has been refactored to produce the CoreCLR. The CoreCLR, which is the Common
    Language Runtime, manages usage and references to objects, communication and interactions
    of objects written in different programming languages supported in, and performs
    garbage collection by releasing objects from memory when they are no longer in
    use. The CoreCLR comprises of the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CoreCLR，也称为.NET Core运行时，是.NET Core的核心，是CLR的跨平台实现；原始的.NET Framework CLR已经重构为CoreCLR。CoreCLR，即公共语言运行时，管理对象的使用和引用，不同编程语言中的对象的通信和交互，并通过在对象不再使用时释放内存来执行垃圾收集。CoreCLR包括以下内容：
- en: Garbage collector
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾收集器
- en: '**Just in Time** (**JIT**) compiler'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**即时**（**JIT**）编译器'
- en: Native interop
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地互操作
- en: Base .NET types
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET基本类型
- en: CoreFX is a set of framework or foundational libraries of the .NET Core and
    it provides primitive datatypes, filesystems, application composition types, consoles,
    and basic utilities. The CoreFX contains a streamlined library of classes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CoreFX是.NET Core的一组框架或基础库，它提供原始数据类型、文件系统、应用程序组合类型、控制台和基本实用工具。CoreFX包含了一系列精简的类库。
- en: .NET Core SDK contains a set of tools including **command-line interface** (**CLI**)
    tools and compilers for the different languages supported, used for building applications
    and libraries to run on .NET Core. The SDK tools and language compilers provide
    functionalities to make coding easier and faster by giving developers easy access
    to language components supported by CoreFX libraries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core SDK包含一组工具，包括**命令行界面**（**CLI**）工具和编译器，用于构建应用程序和库在.NET Core上运行。SDK工具和语言编译器提供功能，通过CoreFX库支持的语言组件，使编码更加简单和快速。
- en: In order to launch a .NET Core application, the dotnet application host is the
    component responsible for the selection and hosting of the required runtime for
    the application. .NET Core has a console application as the main application model
    and other application models, such as ASP.NET Core, Windows 10 Universal Windows
    Platform, and Xamarin Forms.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动一个.NET Core应用程序，dotnet应用程序主机是负责选择和托管应用程序所需运行时的组件。.NET Core有控制台应用程序作为主要应用程序模型，以及其他应用程序模型，如ASP.NET
    Core、Windows 10通用Windows平台和Xamarin Forms。
- en: Supported languages
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持的语言
- en: .NET Core 1.0 supported only **C#** and **F#**, but with the release of .NET
    Core 2.0, **VB.NET** is now supported by the platform. The compilers for the supported
    languages run on .NET Core and provide access to the underlying features of the
    platform. This is possible because .NET Core implements .NET Standard specifications
    and exposes APIs that are available in the .NET Framework. The supported languages
    and .NET SDK tools can be integrated into different editors and IDEs, giving you
    different editor options for use in developing applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 1.0仅支持**C#**和**F#**，但随着.NET Core 2.0的发布，**VB.NET**现在也受到了平台的支持。支持的语言的编译器在.NET
    Core上运行，并提供对平台基础功能的访问。这是可能的，因为.NET Core实现了.NET标准规范，并公开了.NET Framework中可用的API。支持的语言和.NET
    SDK工具可以集成到不同的编辑器和IDE中，为您提供不同的编辑器选项，用于开发应用程序。
- en: When to choose .NET Core over .NET Framework
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时选择.NET Core而不是.NET Framework
- en: Both .NET Core and .NET Framework are well suited for use in *developing robust
    and scalable enterprise applications*; this is because the two platforms are built
    on solid code bases and provide a rich set of libraries and routines that simplify
    most development tasks. The two platforms share many similar components, hence
    code can be shared across the two development platforms. However, the two platforms
    are distinct, the selection of .NET Core has the preferred development platform
    that should be influenced by the development approach as well as the deployment
    needs and requirements.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core和.NET Framework都非常适合用于*开发健壮和可扩展的企业应用程序*；这是因为这两个平台都建立在坚实的代码基础上，并提供了丰富的库和例程，简化了大多数开发任务。这两个平台共享许多相似的组件，因此可以在两个开发平台之间共享代码。然而，这两个平台是不同的，选择.NET
    Core作为首选的开发平台应受开发方法以及部署需求和要求的影响。
- en: Cross-platform requirements
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台要求
- en: Clearly, when the application you are developing is to be run on multiple platforms,
    .NET Core should be used. .NET Core being cross-platform makes it suitable for
    developing services and web applications that can run on **Windows**, **Linux**,
    and **macOS**. Also, with the introduction of **Visual Studio Code** by Microsoft—an
    editor with full support for .NET Core that provides intellisense and debugging
    functionalities, as well as other IDE features that were traditionally available
    only in **Visual Studio IDE**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，当您开发的应用程序要在多个平台上运行时，应该使用.NET Core。由于.NET Core是跨平台的，因此适用于开发可以在**Windows**、**Linux**和**macOS**上运行的服务和Web应用程序。此外，微软推出了**Visual
    Studio Code**，这是一个具有对.NET Core的全面支持的编辑器，提供智能感知和调试功能，以及传统上仅在**Visual Studio IDE**中可用的其他IDE功能。
- en: Ease of deployment
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署的便利性
- en: With .NET Core, you can install different versions side-by-side, a feature that
    is not available when using .NET Framework. With the side by side installation
    of .NET Core, several applications can be installed on a single server, enabling
    each application to run on its own version of .NET Core. Lately, there has been
    a lot of attention focused on containers and application containerization. Containers
    are used for creating standalone packages of software applications, including
    the runtimes needed to make the applications run in isolation, away from other
    applications on a shared operating system. Containerizing .NET applications is
    much better when .NET Core is used as the development platform. This is because
    of its cross-platform support, thereby allowing deployment of applications to
    containers of different operating systems. Also, the container images created
    with .NET Core are smaller and more lightweight.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET Core，您可以并排安装不同的版本，这是在使用.NET Framework时不可用的功能。通过.NET Core的并排安装，可以在单个服务器上安装多个应用程序，使每个应用程序都可以在其自己的.NET
    Core版本上运行。最近，人们对容器和应用程序容器化引起了很多关注。容器用于创建软件应用程序的独立包，包括使应用程序在共享操作系统上与其他应用程序隔离运行所需的运行时。当使用.NET
    Core作为开发平台时，将.NET应用程序容器化要好得多。这是因为它具有跨平台支持，从而允许将应用程序部署到不同操作系统的容器中。此外，使用.NET Core创建的容器映像更小、更轻量。
- en: Scalability and performance
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性和性能
- en: Using .NET Core, developing applications that use microservices architecture
    is relatively easier. With microservice architecture, you can develop applications
    that use a mix of different technologies, such as services developed with PHP,
    Java, or Rails. You can use .NET Core to develop microservices to be deployed
    on cloud platforms or containers. With .NET Core, you can develop applications
    that are scalable and can run on high-performance computers or high-end servers,
    allowing your application to easily serve hundreds of thousands of users.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET Core，开发使用微服务架构的应用程序相对较容易。使用微服务架构，您可以开发使用不同技术混合的应用程序，例如使用PHP、Java或Rails开发的服务。您可以使用.NET
    Core开发微服务，以部署到云平台或容器中。使用.NET Core，您可以开发可扩展的应用程序，可以在高性能计算机或高端服务器上运行，从而使您的应用程序可以轻松为数十万用户提供服务。
- en: Limitations of .NET Core
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core的限制
- en: While .NET Core is robust, easy to use, and provides several benefits when used
    in application development, it is currently not suitable for all development problems
    and scenarios. Microsoft dropped several technologies that are available on .NET
    Framework from .NET Core to make it streamlined and cross-platform. Because of
    this, those technologies are not available for use in .NET Core.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然.NET Core是强大的、易于使用的，并在应用程序开发中提供了几个好处，但它目前并不适用于所有的开发问题和场景。微软从.NET Framework中删除了几项技术，以使.NET
    Core变得简化和跨平台。因此，这些技术在.NET Core中不可用。
- en: When your application will use a technology not available in .NET Core, for
    example using WPF or Windows Forms for the presentation layer, WCF Server implementation,
    or even third-party libraries that do not currently have the .NET Core version,
    it is preferable and recommended that you develop the application using .NET Framework.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用程序将使用.NET Core中不可用的技术时，例如在表示层使用WPF或Windows Forms，WCF服务器实现，甚至目前没有.NET Core版本的第三方库，建议您使用.NET
    Framework开发应用程序。
- en: Structure of a .NET Core application
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core应用程序的结构
- en: 'With the release of .NET Core 2.0, new templates were added, providing more
    options for the different application types that can be run on the platform. In
    addition to the existing project templates, the following **single-page application**
    (**SPA**) templates were added:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着.NET Core 2.0的发布，添加了新的模板，为可以在平台上运行的不同应用程序类型提供了更多选项。除了现有的项目模板之外，还添加了以下**单页应用程序**（**SPA**）模板：
- en: Angular
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角度
- en: ReactJS
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS
- en: ReactJS and Redux
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReactJS和Redux
- en: The console application in .NET Core has a similar structure to that of .NET
    Framework, whereas ASP.NET Core has several new components, including folders
    and files, that were not in the previous versions of ASP.NET.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core中的控制台应用程序与.NET Framework具有类似的结构，而ASP.NET Core具有一些新组件，包括以前版本的ASP.NET中没有的文件夹和文件。
- en: ASP.NET Core MVC project structure
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC项目结构
- en: ASP.NET web framework has fully matured over the years, transitioning from web
    forms to MVC and Web API. ASP.NET core is a new web framework for developing web
    applications and Web APIs that can run on .NET Core. It is a leaner and more streamlined
    version of ASP.NET that is easy to deploy with in-built dependency injection.
    ASP.NET Core can be integrated with frameworks such as AngularJS, Bootstrap, and
    ReactJS.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，ASP.NET Web框架已经完全成熟，从Web表单过渡到MVC和Web API。ASP.NET Core是一个新的Web框架，用于开发可以在.NET
    Core上运行的Web应用程序和Web API。它是ASP.NET的精简和更简化版本，易于部署，并具有内置的依赖注入。ASP.NET Core可以与AngularJS、Bootstrap和ReactJS等框架集成。
- en: ASP.NET Core MVC, similar to ASP.NET MVC, is the framework for building web
    applications and APIs, using the *Model View Controller pattern*. Like ASP.NET
    MVC, it supports model binding and validation, tag helpers, and uses *Razor syntax*
    for the Razor pages and MVC views.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC，类似于ASP.NET MVC，是构建Web应用程序和API的框架，使用*模型视图控制器模式*。与ASP.NET MVC一样，它支持模型绑定和验证，标签助手，并使用*Razor语法*用于Razor页面和MVC视图。
- en: The structure of the ASP.NET Core MVC application differs from that of ASP.NET
    MVC, with the addition of new folders and files. When you create a new ASP.NET
    Core project from Visual Studio 2017, Visual Studio for Mac, or through the CLI
    tools from the solution explorer, you can see the new components added to the
    project structure.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC应用程序的结构与ASP.NET MVC不同，添加了新的文件夹和文件。当您从Visual Studio 2017，Visual
    Studio for Mac或通过解决方案资源管理器中的CLI工具创建新的ASP.NET Core项目时，您可以看到添加到项目结构的新组件。
- en: wwwroot folder
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wwwroot文件夹
- en: In ASP.NET Core, the newly-added `wwwroot` folder is used to hold libraries
    and static content, such as images, JavaScript files and libraries, and CSS and
    HTML for easy access and to serve directly to web clients. The `wwwroot` folder
    contains `.css`, images, `.js`, and `.lib` folders for organizing the static contents
    of a site.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，新添加的`wwwroot`文件夹用于保存库和静态内容，例如图像，JavaScript文件和库，以及CSS和HTML，以便轻松访问并直接提供给Web客户端。`wwwroot`文件夹包含`.css`，图像，`.js`和`.lib`文件夹，用于组织站点的静态内容。
- en: Models, Views, and Controllers folders
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型，视图和控制器文件夹
- en: Similar to the ASP.NET MVC project, an ASP.NET MVC core application's root folder
    also contains **Models**, **Views**, and **Controllers**, following the convention
    of the MVC pattern, for proper separation of web application files, codes, and
    presentation logic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与ASP.NET MVC项目类似，ASP.NET MVC核心应用程序的根文件夹也包含**模型**，**视图**和**控制器**，遵循MVC模式的约定，以正确分离Web应用程序文件，代码和表示逻辑。
- en: JSON files – bower.json, appsettings.json, bundleconfig.json
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON文件 - bower.json，appsettings.json，bundleconfig.json
- en: Some other files introduced are `appsettings.json`, which contains all the application
    settings, `bower.json`, which contains entries for managing client-side packages
    including CSS and JavaScript frameworks used in the project, and `bundleconfig.json`,
    which contains entries for configuring bundling and minification for the project.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 引入的一些其他文件包括`appsettings.json`，其中包含所有应用程序设置，`bower.json`，其中包含用于管理项目中使用的客户端包括CSS和JavaScript框架的条目，以及`bundleconfig.json`，其中包含用于配置项目的捆绑和最小化的条目。
- en: Program.cs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Program.cs
- en: 'Like C# console applications, ASP.NET Core has the `Program` class, which is
    an important class that contains the entry point to the application. The file
    has the `Main()` method used to run the application and it is used to create an
    instance of `WebHostBuilder` for creating a host for the application. The `Startup`
    class to be used by the application is specified in the `Main` method:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与C#控制台应用程序类似，ASP.NET Core具有`Program`类，这是一个重要的类，包含应用程序的入口点。该文件具有用于运行应用程序的`Main()`方法，并用于创建`WebHostBuilder`的实例，用于创建应用程序的主机。在`Main`方法中指定要由应用程序使用的`Startup`类：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Startup.cs
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Startup.cs
- en: The `Startup` class is needed by ASP.NET Core applications to manage the application's
    request pipeline, configure services, and for dependency injection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core应用程序需要`Startup`类来管理应用程序的请求管道，配置服务和进行依赖注入。
- en: Different `Startup` classes can be created for different environments; for example,
    you can create two `Startup` classes in your application, one for the development
    environment and the other for production. You can also specify that a `Startup`
    class be used for all environments.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的`Startup`类可以为不同的环境创建；例如，您可以在应用程序中创建两个`Startup`类，一个用于开发环境，另一个用于生产环境。您还可以指定一个`Startup`类用于所有环境。
- en: 'The `Startup` class has two methods—`Configure()`, which is compulsory and
    is used to determine how the application should respond to HTTP requests, and
    `ConfigureServices()`, which is optional and is used to configure services before
    the `Configure` method is called. Both methods are called when the application
    starts:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup`类有两个方法——`Configure()`，这是必须的，用于确定应用程序如何响应HTTP请求，以及`ConfigureServices()`，这是可选的，用于在调用`Configure`方法之前配置服务。这两种方法在应用程序启动时都会被调用：'
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tour of Microsoft's Visual Studio Code editor
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软的Visual Studio Code编辑器之旅
- en: Developing .NET Core applications has been made much easier, not only because
    of the sleekness and robustness of the platform but also through the introduction
    of **Visual Studio Code**, a cross-platform editor that runs on Windows, Linux,
    and macOS. You don't need to have Visual Studio IDE installed on your system before
    you can create applications on .NET Core.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 开发.NET Core应用程序变得更加容易，不仅因为平台的流畅性和健壮性，还因为引入了**Visual Studio Code**，这是一个跨平台编辑器，可以在Windows、Linux和macOS上运行。在创建.NET
    Core应用程序之前，您不需要在系统上安装Visual Studio IDE。
- en: Visual Studio Code, though not as powerful and features-packed as the Visual
    Studio IDE, does have in-built productivity tools and features that make creating
    .NET Core applications with it seamless. You can also install extensions for several
    programming languages from Visual Studio Marketplace into Visual Studio Code,
    giving you the flexibility to edit code written in other programming languages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code虽然没有Visual Studio IDE那么强大和功能丰富，但确实具有内置的生产力工具和功能，使得使用它轻松创建.NET
    Core应用程序。您还可以在Visual Studio Code中安装用于多种编程语言的扩展，从Visual Studio Marketplace中获取，从而可以灵活地编辑其他编程语言编写的代码。
- en: Installing .NET Core on Linux
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装.NET Core
- en: 'To show the cross-platform feature of .NET Core, let''s set up a .NET Core
    development environment on Ubuntu 17.04 desktop version. Before installing Visual
    Studio Code, let''s install .NET Core on the **Ubuntu OS**. First, you need to
    do a one-time registration of the **Microsoft Product** feed, which is done by
    registering the Microsoft signature key before adding the Microsoft Product feed
    to the system:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示.NET Core的跨平台功能，让我们在Ubuntu 17.04桌面版上设置.NET Core开发环境。在安装Visual Studio Code之前，让我们在**Ubuntu
    OS**上安装.NET Core。首先，您需要通过在添加Microsoft产品feed之前注册Microsoft签名密钥来进行一次性注册：
- en: 'Launch the system terminal and run the following commands to register the Microsoft
    signature key:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动系统终端并运行以下命令注册微软签名密钥：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Register the Microsoft Product feed with this command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此命令注册Microsoft产品feed：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To install .NET Core SDK and the other components required to develop .NET
    Core applications on the Linux operating system, run the following commands:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Linux操作系统上安装.NET Core SDK和其他开发.NET Core应用程序所需的组件，请运行以下命令：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The commands will update the system and you should see the Microsoft repository
    from earlier added among the list of repositories where Ubuntu will attempt to
    get updates from. After the update, the .NET Core tool will be downloaded and
    installed on the system. The information displayed on your terminal screen should
    be similar to what is in the following screenshot:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些命令将更新系统，您应该会看到之前添加的Microsoft存储库在Ubuntu尝试从中获取更新的存储库列表中。更新后，.NET Core工具将被下载并安装到系统上。您终端屏幕上显示的信息应该与以下截图中的信息类似：
- en: '![](img/3a3748ac-cf5e-4ae0-8041-eadcea29414c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a3748ac-cf5e-4ae0-8041-eadcea29414c.png)'
- en: 'When the installation completes, create a new folder inside the `Documents`
    folder and name it `testapp`. Change the directory to the newly created folder
    and create a new console application to test the installation. See the following
    commands, and the screenshot for the outcome of the commands:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，在`Documents`文件夹内创建一个新文件夹，并将其命名为`testapp`。将目录更改为新创建的文件夹，并创建一个新的控制台应用程序来测试安装。请参阅以下命令和命令的结果截图：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This gives the following output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/b8149bd8-8130-4331-910b-e87bb25ef0c0.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8149bd8-8130-4331-910b-e87bb25ef0c0.png)'
- en: You would see on the terminal as .NET Core is creating the project and the required
    files. After the project has been successfully created, `Restore succeeded` will
    be displayed on the terminal. Inside the `testapp` folder, an `obj` folder, `Program.cs`,
    and `testapp.csproj` files would have been added by the framework.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会在终端上看到.NET Core正在创建项目和所需的文件。项目成功创建后，终端上将显示`Restore succeeded`。在`testapp`文件夹中，框架将添加一个`obj`文件夹，`Program.cs`和`testapp.csproj`文件。
- en: You can proceed to run the console application using the `dotnet run` command.
    This command will compile and run the project before displaying `Hello World!`
    on the terminal.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以继续使用`dotnet run`命令运行控制台应用程序。该命令将在终端上显示`Hello World!`之前编译和运行项目。
- en: Installing and setting up Visual Studio Code on Linux
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux上安装和设置Visual Studio Code
- en: 'Visual Studio Code, being a cross-platform editor, can be installed on many
    variants of Linux OS, with packages for other Linux distributions being added
    gradually. To install Visual Studio Code on **Ubuntu**, perform the following
    steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Visual Studio Code是一个跨平台编辑器，可以安装在许多Linux OS的变体上，逐渐添加其他Linux发行版的软件包。要在**Ubuntu**上安装Visual
    Studio Code，请执行以下步骤：
- en: Download the `.deb` package meant for Ubuntu and Debian variants of Linux from
    [https://code.visualstudio.com/download](https://code.visualstudio.com/).
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://code.visualstudio.com/download](https://code.visualstudio.com/)下载适用于Ubuntu和Debian
    Linux变体的`.deb`软件包。
- en: 'Install the downloaded file from the terminal, which will install the editor,
    the `apt` repository, and signing key, to ensure the editor can be automatically
    updated when the system update command is run:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端安装下载的文件，这将安装编辑器、`apt`存储库和签名密钥，以确保在运行系统更新命令时可以自动更新编辑器：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After a successful installation, you should be able to launch the newly installed
    Visual Studio Code editor. The editor has a slightly similar look and feel to
    that of Visual Studio IDE.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功后，您应该能够启动新安装的Visual Studio Code编辑器。该编辑器的外观和感觉与Visual Studio IDE略有相似。
- en: Exploring Visual Studio Code
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Visual Studio Code
- en: 'With the successful installation of Visual Studio Code on your Ubuntu instance,
    you need to perform initial environment setup before you can begin writing code
    using the editor:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装Visual Studio Code在您的Ubuntu实例上后，您需要在开始使用编辑器编写代码之前进行初始环境设置：
- en: Launch Visual Studio Code from the Start menu and install the C# extension to
    the editor from Visual Studio Marketplace. You can launch the extension by pressing
    *Ctrl* + *Shift* + *X*, through the View menu and clicking Extension, and by clicking
    directly on the Extension tab; this will load a list of available extensions,
    so click and install the C# extension.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“开始”菜单启动Visual Studio Code，并从Visual Studio Marketplace安装C#扩展到编辑器。您可以通过按下*Ctrl*
    + *Shift* + *X*来启动扩展，通过“查看”菜单并单击“扩展”，或直接单击“扩展”选项卡；这将加载一个可用扩展的列表，因此单击并安装C#扩展。
- en: 'When the extension has been installed, click on the Reload button to activate
    the C# extension in the editor:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展后，单击“重新加载”按钮以在编辑器中激活C#扩展：
- en: '![](img/4756b0c5-1806-4efb-a83a-79512ae250c5.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4756b0c5-1806-4efb-a83a-79512ae250c5.png)'
- en: 'Open the folder of the console application you earlier created; to do that,
    click on the File menu and select Open Folder or press *Ctrl* + *K*, *Ctrl* +
    *O.* This will open the file manager; browse to the path of the folder and click
    open. This will load the content of the project in Visual Studio Code. In the
    background, Visual Studio Code will attempt to download the required dependencies
    for the Linux platform, Omnisharp for Linux and .NET Core Debugger:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您之前创建的控制台应用程序的文件夹；要做到这一点，单击“文件”菜单并选择“打开文件夹”，或按下*Ctrl* + *K*，*Ctrl* + *O.*
    这将打开文件管理器；浏览到文件夹的路径并单击打开。这将在Visual Studio Code中加载项目的内容。在后台，Visual Studio Code将尝试下载Linux平台所需的依赖项，包括Linux的Omnisharp和.NET
    Core调试器：
- en: '![](img/fc691b0d-0075-472a-aa73-f1d3c45d5634.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc691b0d-0075-472a-aa73-f1d3c45d5634.png)'
- en: 'To create a new project, you can use the Integrated Terminal of the editor
    without having to go through the system terminal. Click on the View menu and select
    Integrated Terminal. This will open the Terminal tab in the editor, where you
    can type the commands to create a new project:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新项目，您可以使用编辑器的集成终端，而无需通过系统终端。单击“查看”菜单，然后选择“集成终端”。这将在编辑器中打开终端选项卡，您可以在其中输入命令来创建新项目：
- en: '![](img/fe857388-8cc6-41cf-ba2b-a016c8f76981.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe857388-8cc6-41cf-ba2b-a016c8f76981.png)'
- en: 'In the opened project, you will see a notification that requires assets to
    build and debug the applications that are missing. If you click Yes, in the Explorer
    tab, you can see a `.vscode` tree with `launch.json` and `tasks.json` files added.
    Click the `Program.cs` file to load the file into the editor. From the Debug menu
    select Start Debugging or press *F5* to run the application; you should see `Hello
    World!` displayed on the editor''s Debug Console:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的项目中，您将看到一个通知，需要构建和调试应用程序所需的资源缺失。如果单击“是”，在资源管理器选项卡中，您可以看到一个`.vscode`树，其中添加了`launch.json`和`tasks.json`文件。单击`Program.cs`文件以将文件加载到编辑器中。从“调试”菜单中选择“开始调试”，或按下*F5*运行应用程序；您应该在编辑器的调试控制台上看到“Hello
    World!”的显示：
- en: '![](img/0e38a634-11cd-4c49-b6e4-d3241bbb1b12.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e38a634-11cd-4c49-b6e4-d3241bbb1b12.png)'
- en: 'When you launch Visual Studio Code, it loads with the state it was in when
    it was closed, opening the files and folders that you last accessed. The editor''s
    layout is easy to navigate and work with, and comes with areas such as:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动Visual Studio Code时，它会加载上次关闭时的状态，打开您上次访问的文件和文件夹。编辑器的布局易于导航和使用，并带有诸如：
- en: Status bar showing you information about the files you currently have opened.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态栏显示您当前打开文件的信息。
- en: Activity bar provides access to the Explorer view for viewing your project folders
    and files, and Source Control view for managing a project's source versioning.
    Debug view for watching variables, breakpoints and debugging-related activities,
    Search view allows you to search folders and files. Extension view allows you
    to see available extensions that can be installed into the editor.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动栏提供了访问资源管理器视图以查看项目文件夹和文件，以及源代码控制视图以管理项目的源代码版本控制。调试视图用于查看变量、断点和与调试相关的活动，搜索视图允许您搜索文件夹和文件。扩展视图允许您查看可以安装到编辑器中的可用扩展。
- en: Editor area for editing the project files, allowing you to open up to three
    files for editing simultaneously.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑区用于编辑项目文件，允许您同时打开最多三个文件进行编辑。
- en: 'Panel regions show different panels for Output, Debug Console, Terminal, and
    Problems:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板区域显示不同的面板，用于输出、调试控制台、终端和问题：
- en: '![](img/2d24345d-99b6-4fbd-9ae5-864b36bc6da1.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d24345d-99b6-4fbd-9ae5-864b36bc6da1.png)'
- en: A look at the new features of C# 7
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看C# 7的新功能
- en: The C# programming language has matured over the years; more language features
    and constructs are being added with the release of each version. A language that
    originally was only being developed in house by Microsoft and run only on Windows
    operating systems is now open source and cross-platform. This is made possible
    through .NET Core and Version 7 (7.0 and 7.1) of the language, which added flavors
    and improved the available features of the language. The roadmap of the language,
    especially Version 7.2 and 8.0, promises to add more features to the language.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，C#编程语言已经成熟；随着每个版本的发布，越来越多的语言特性和构造被添加进来。这门语言最初只是由微软内部开发，并且只能在Windows操作系统上运行，现在已经成为开源和跨平台。这是通过.NET
    Core和语言的7版（7.0和7.1）实现的，它增加了语言的特色并改进了可用的功能。特别是语言的7.2版和8.0版的路线图承诺为语言增加更多功能。
- en: Tuples enhancement
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组增强
- en: '**Tuples** were introduced into C# language in Version 4 and are used in the
    simplified form to provide structure with two or more data elements, allowing
    you to create methods that can return two or more data elements. Before C# 7,
    referencing the elements of a tuple was done by using *Item1, Item2, ...ItemN*,
    where *N* is the number of elements in the tuple structure. Starting from C# 7,
    tuples now support semantic naming of the contained fields with the introduction
    of cleaner and more efficient ways of creating and using tuples.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**元组**在C#语言中的第4版中引入，并以简化形式使用，以提供具有两个或更多数据元素的结构，允许您创建可以返回两个或更多数据元素的方法。在C# 7之前，引用元组的元素是通过使用*Item1，Item2，...ItemN*来完成的，其中*N*是元组结构中元素的数量。从C#
    7开始，元组现在支持包含字段的语义命名，引入了更清晰和更有效的创建和使用元组的方法。'
- en: 'You can now create tuples by directly assigning each member to a value. This
    assignment creates a tuple containing elements *Item1*, *Item2*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过直接为每个成员分配一个值来创建元组。此赋值将创建一个包含元素*Item1*，*Item2*的元组：
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also create tuples that have semantic names for the elements contained
    in the tuple:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建具有元组中包含的元素的语义名称的元组：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The names tuple, instead of having fields as *Item1*, *Item2*, will have fields
    that can be referenced as `firstName` and `lastName` at compile time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 元组的名称，而不是具有*Item1*，*Item2*等字段，将在编译时具有可以作为`firstName`和`lastName`引用的字段。
- en: 'You can create your method to return a tuple with two or more data elements
    when using POCO might be overkill:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用POCO可能过于繁琐时，您可以创建自己的方法来返回具有两个或更多数据元素的元组：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Out keyword
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Out关键字
- en: 'In C#, arguments or parameters can be passed by reference or value. When you
    pass an argument by reference to a method, property, or constructor, the value
    of the parameter will be changed and the changes made will be retained when the
    method or constructor goes out of scope. With the use of the `out` keyword, you
    can pass a method''s argument as a reference in C#. Prior to C# 7, to use the
    `out` keyword, you had to declare a variable before passing it as an `out` argument
    to a method:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，参数可以按引用或值传递。当您通过引用将参数传递给方法、属性或构造函数时，参数的值将被更改，并且在方法或构造函数超出范围时所做的更改将被保留。使用`out`关键字，您可以在C#中将方法的参数作为引用传递。在C#
    7之前，要使用`out`关键字，您必须在将其作为`out`参数传递给方法之前声明一个变量：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In C# 7, you can now pass out variables to a method without having to declare
    the variables first, with the preceding code snippet now looking like the following,
    which prevents you from mistakenly using the variables before they are assigned
    or initialized and gives the code clarity:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 7中，您现在可以将out变量传递给方法，而无需先声明变量，前面的代码片段现在看起来像以下内容，这样可以防止您在分配或初始化变量之前错误地使用变量，并使代码更加清晰：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Support for the implicit type out variable has been added to the language,
    allowing the compiler to infer the types of variables:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 语言中已添加了对隐式类型输出变量的支持，允许编译器推断变量的类型：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ref locals and returns
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ref局部变量和返回
- en: C# language has always had the `ref` keyword, which allows you to use and return
    reference to variables defined elsewhere. C# 7 adds another feature, `ref` locals
    and `returns`, which improves performance and allows you to declare helper methods
    that were not possible with the earlier versions of the language. The `ref` locals
    and `returns` keyword have some restrictions—you cannot use them with the `async`
    methods and you cannot return a reference to a variable with the same execution
    scope.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: C#语言一直有`ref`关键字，允许您使用并返回对其他地方定义的变量的引用。C# 7添加了另一个功能，`ref`局部变量和`returns`，它提高了性能，并允许您声明在较早版本的语言中不可能的辅助方法。`ref`局部变量和`returns`关键字有一些限制——您不能在`async`方法中使用它们，也不能返回具有相同执行范围的变量的引用。
- en: Ref locals
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ref局部变量
- en: 'The `ref` local keyword allows you to store references in a local variable
    by declaring local variables with the `ref` keyword and add the `ref` keyword
    before a method call or assignment. For example, in the following code, the `day`
    string variable references `dayOfWeek`; changing the value of `day` also changes
    the value of `dayOfWeek` and vice versa:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`ref`局部关键字允许您通过使用`ref`关键字声明局部变量来存储引用，并在方法调用或赋值之前添加`ref`关键字。例如，在以下代码中，`day`字符串变量引用`dayOfWeek`；更改`day`的值也会更改`dayOfWeek`的值，反之亦然：'
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Ref returns
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ref返回
- en: 'You can also use the `ref` keyword as a return type of methods. To achieve
    this, add the `ref` keyword to the method signature and inside the method body,
    add `ref` after the `return` keyword. In the following code snippet, an array
    of string is declared and initialized. The fifth element of the string array is
    then returned by the method as a reference:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将`ref`关键字用作方法的返回类型。要实现这一点，将`ref`关键字添加到方法签名中，并在方法体内，在`return`关键字之后添加`ref`。在以下代码片段中，声明并初始化了一个字符串数组。然后，该方法将字符串数组的第五个元素作为引用返回：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Local function
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 局部函数
- en: 'The **local **or **nested function**, allows you to define a function inside
    another function. This feature has been available in some programming languages
    for years, but was just introduced in C# 7\. It is desirable to use when you need
    a function that is small and will not be reusable outside the context of the `container`
    method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**局部**或**嵌套函数**允许您在另一个函数内定义一个函数。这个特性在一些编程语言中已经有很多年了，但是在C# 7中才刚刚引入。当您需要一个小型且在`container`方法的上下文之外不可重用的函数时，这是一个理想的选择：'
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Patterns matching
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式匹配
- en: C# 7 includes patterns, a language element feature that allows you to perform
    a method dispatch on properties besides object types. It extends the language
    constructs already implemented in override and virtual methods for implementing
    dispatch for types and data elements. The `is` and `switch` expressions have been
    updated in Version 7.0 of the language to support **pattern matching**, so you
    can now use the expressions to determine whether an object of interest has a specific
    pattern.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: C# 7包括模式，这是一种语言元素特性，允许您在除了对象类型之外的属性上执行方法分派。它扩展了已经在覆盖和虚拟方法中实现的语言构造，用于实现类型和数据元素的分派。在语言的7.0版本中，`is`和`switch`表达式已经更新以支持**模式匹配**，因此您现在可以使用这些表达式来确定感兴趣的对象是否具有特定模式。
- en: Using the `is` pattern expression, you can now write code that contains routines
    with algorithms that manipulate elements with unrelated types. The `is` expressions
    can now be used with a pattern in addition to being able to test for a type.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`is`模式表达式，您现在可以编写包含处理不相关类型元素的算法例程的代码。`is`表达式现在可以与模式一起使用，除了能够测试类型之外。
- en: 'The introduced patterns matching can take three forms:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 引入的模式匹配可以采用三种形式：
- en: '**Type patterns**: This entails checking whether an object is of a type before
    extracting the value of the object into a new variable defined within the expression:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型模式**：这涉及检查对象是否是某种类型，然后将对象的值提取到表达式中定义的新变量中：'
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Var patterns**: Creates a new variable with the same type as the object and
    assigns the value:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Var模式**：创建一个与对象相同类型的新变量并赋值：'
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Constant patterns**: Checks whether the supplied object is equivalent to
    a constant expression:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量模式：检查提供的对象是否等同于一个常量表达式：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the updated switch expression, you can now use patterns as well as conditions
    in case causes and switch on any types besides the base or primitive types while
    allowing you to use the when keyword to additionally specify rules to the pattern:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新的switch表达式，您现在可以在case语句中使用模式和条件，并且可以在除了基本或原始类型之外的任何类型上进行switch，同时允许您使用when关键字来额外指定模式的规则：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Digit separator and binary literal
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字分隔符和二进制字面量
- en: 'A new syntatic sugar has been added to C# 7, which is the **digit separator**.
    This construct greatly improves code readability, especially when handling large
    numbers of different numeric types supported in C#. Prior to C# 7, manipulating
    large numeric values to have separators was a bit messy and unreadable. With the
    introduction of the digit separator, you can now use an underscore (`_`) as a
    separator for digits:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 7中添加了一种新的语法糖，即**数字分隔符**。这种构造极大地提高了代码的可读性，特别是在处理C#支持的不同数值类型的大量数字时。在C# 7之前，操作大数值以添加分隔符有点混乱和难以阅读。引入数字分隔符后，您现在可以使用下划线（`_`）作为数字的分隔符：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Also newly introduced in this version is **binary literals**. You can now create
    binary literals by simply including `0b` as a prefix to binary values:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中还新增了**二进制字面量**。现在可以通过简单地在二进制值前加上`0b`来创建二进制字面量：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Creating an ASP.NET MVC Core application
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET MVC Core应用程序
- en: ASP.NET Core provides an elegant way of building web applications and APIs that
    run on Windows, Linux, and macOS, owing to the .NET Core platform's tool and SDK
    that simplify developing cutting-edge applications and support side-by-side with
    application versioning. With ASP.NET Core, your applications have a smaller surface
    area which improves performance as you only have to include the NuGet packages
    required to run your applications. ASP.NET Core can also be integrated with client-side
    libraries and frameworks, allowing you to develop web applications using the CSS
    and JS libraries you are already familiar with.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core提供了一种优雅的方式来构建在Windows、Linux和macOS上运行的Web应用程序和API，这要归功于.NET Core平台的工具和SDK，这些工具和SDK简化了开发尖端应用程序并支持应用程序版本的并行。使用ASP.NET
    Core，您的应用程序的表面积更小，这可以提高性能，因为您只需要包含运行应用程序所需的NuGet包。ASP.NET Core还可以与客户端库和框架集成，允许您使用您已经熟悉的CSS和JS库来开发Web应用程序。
- en: ASP.NET Core runs with Kestrel, a web server included in the ASP.NET Core project
    templates. Kestrel is an in-process cross-platform HTTP server implementation
    based on **libuv**, a cross-platform asynchronous I/O library that makes building
    and debugging ASP.NET Core applications much easier. It listens to HTTP requests
    and then packages the request details and features into an `HttpContext` object.
    Kestrel can be used as a standalone web server or with IIS or Apache web servers
    where the requests received by the other web servers are forwarded to Kestrel,
    a concept known as reverse proxy.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core使用Kestrel运行，Kestrel是包含在ASP.NET Core项目模板中的Web服务器。Kestrel是一个基于**libuv**的进程内跨平台HTTP服务器实现，libuv是一个跨平台的异步I/O库，使构建和调试ASP.NET
    Core应用程序变得更加容易。它监听HTTP请求，然后将请求的详细信息和特性打包到一个`HttpContext`对象中。Kestrel可以作为独立的Web服务器使用，也可以与IIS或Apache
    Web服务器一起使用，其他Web服务器接收到的请求将被转发到Kestrel，这个概念被称为反向代理。
- en: '**ASP.NET MVC Core** provides you with a testable framework for modern web
    application development using the *Model View Controller* pattern, which allows
    you to fully practice test-driven development. Newly added to ASP.NET 2.0 is the
    support for Razor pages, which is now the recommended approach to develop user
    interfaces for ASP.NET Core web applications.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**ASP.NET MVC Core**为您提供了一个可测试的框架，用于使用*Model View Controller*模式进行现代Web应用程序开发，这使您可以充分实践测试驱动开发。在ASP.NET
    2.0中新增的是对Razor页面的支持，这现在是开发ASP.NET Core Web应用程序用户界面的推荐方法。'
- en: 'To create a new ASP.NET MVC Core project:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的ASP.NET MVC Core项目：
- en: 'Open Visual Studio Code and access the integrated terminal panel by selecting
    Integrated Terminal from the View menu. On the terminal, run the following commands:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio Code，并通过选择“视图”菜单中的“集成终端”来访问集成终端面板。在终端上，运行以下命令：
- en: '[PRE22]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'After the application has been created, open the project''s folder using Visual
    Studio Code and select the `Startup.cs` file. You should notice a notification
    on the top bar of the screen, Required assets to build and debug are missing from
    ''LoanApp''. Add them?; select Yes:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建应用程序后，使用Visual Studio Code打开项目文件夹，并选择`Startup.cs`文件。您应该注意到屏幕顶部的通知，提示“从'LoanApp'缺少构建和调试所需的资产。是否添加？”，选择是：
- en: '![](img/b461a4e5-e5e9-4e40-8d1f-91b0d0b99697.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b461a4e5-e5e9-4e40-8d1f-91b0d0b99697.png)'
- en: 'Press *F5* to build and run the MVC application. This tells the Kestrel web
    server to run the application and launches the default browser on the computer
    with the `http://localhost:5000` address:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*F5*键来构建和运行MVC应用程序。这告诉Kestrel web服务器运行该应用程序，并在计算机上启动默认浏览器，地址为`http://localhost:5000`。
- en: '![](img/5859d47a-a4f2-4833-96ea-d321ad99d212.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5859d47a-a4f2-4833-96ea-d321ad99d212.png)'
- en: Summary
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The .NET Core platform, though new, is rapidly maturing, with Version 2.0.7
    introducing many features and enhancements that simplify building different types
    of cross-platform applications. In this chapter, we have taken a tour of the platform,
    introduced the new features of C# 7, and set up a development environment on Ubuntu
    Linux, while creating our first ASP.NET MVC Core application.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core平台虽然新，但正在迅速成熟，2.0.7版本引入了许多功能和增强功能，简化了构建不同类型的跨平台应用程序。在本章中，我们已经对平台进行了介绍，介绍了C#
    7的新功能，并在Ubuntu Linux上设置了开发环境，同时创建了我们的第一个ASP.NET MVC Core应用程序。
- en: In the next chapter, we will explain what to look out for in order to avoid
    writing codes that are untestable and we will later walk you through SOLID principles
    that can help you write testable and quality code.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解释要注意避免编写不可测试代码，并且我们将带领您了解可以帮助您编写可测试和高质量代码的SOLID原则。
