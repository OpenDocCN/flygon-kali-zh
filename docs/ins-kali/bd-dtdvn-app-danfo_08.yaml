- en: '*Chapter 6*: Data Visualization with Danfo.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：使用Danfo.js进行数据可视化'
- en: 'In the preceding chapter, you learned how to use Plotly.js to create rich and
    interactive plots that can be embedded in any web application. We also mentioned
    how Danfo.js uses Plotly internally to make plots directly on a DataFrame or Series.
    In this chapter, we''ll show you how to easily create these charts using the Danfo.js
    plotting API. Specifically, in this chapter, we''ll cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您学会了如何使用Plotly.js创建丰富和交互式的图表，可以嵌入到任何Web应用程序中。我们还提到了Danfo.js如何在内部使用Plotly来直接在DataFrame或Series上制作图表。在本章中，我们将向您展示如何使用Danfo.js绘图API轻松创建这些图表。具体来说，在本章中，我们将涵盖以下内容：
- en: Setting up Danfo.js for plotting
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Danfo.js进行绘图
- en: Creating line charts with Danfo.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建折线图
- en: Creating scatter plots with Danfo.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建散点图
- en: Creating box and violin plots with Danfo.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建箱线图和小提琴图
- en: Creating histograms with Danfo.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建直方图
- en: Creating bar charts with Danfo.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建条形图
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to follow along with this chapter, you should have the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章的内容，您应该具备以下条件：
- en: A modern browser such as Chrome, Safari, Opera, or Firefox
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代浏览器，如Chrome、Safari、Opera或Firefox
- en: Node.js, Danfo.js, and optionally Dnotebook installed on your system
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js、Danfo.js，以及可选的Dnotebook已安装在您的系统上。
- en: A stable internet connection for downloading the datasets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定的互联网连接以下载数据集
- en: Installation instructions for Danfo.js can be found in [*Chapter 3*](B17076_03_ePub_RK.xhtml#_idTextAnchor066),
    *Getting Started with Danfo.js*, while installation steps for Dnotebook can be
    found in [*Chapter 2*](B17076_02_ePub_RK.xhtml#_idTextAnchor045), *Dnotebook –
    An Interactive Computing Environment for JavaScript*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Danfo.js的安装说明可以在[*第3章*](B17076_03_ePub_RK.xhtml#_idTextAnchor066)中找到，*使用Danfo.js入门*，而有关Dnotebook的安装步骤可以在[*第2章*](B17076_02_ePub_RK.xhtml#_idTextAnchor045)中找到，*Dnotebook-用于JavaScript的交互式计算环境*。
- en: Setting up Danfo.js for plotting
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Danfo.js进行绘图
- en: By default, Danfo.js provides some basic chart types. These charts can be called
    on any DataFrame or Series object and, if the correct arguments are passed, it
    will display the corresponding chart.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Danfo.js提供了一些基本的图表类型。这些图表可以在任何DataFrame或Series对象上调用，如果传递了正确的参数，它将显示相应的图表。
- en: 'At the time of writing, Danfo.js comes with the following charts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Danfo.js附带以下图表：
- en: Line charts
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 折线图
- en: Box and violin plots
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱线图和小提琴图
- en: Tables
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格
- en: Pie charts
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼图
- en: Scatter plots
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 散点图
- en: Bar charts
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条形图
- en: Histograms
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直方图
- en: These charts are exposed via the `plot` function. That is, if you have a DataFrame
    or Series object, calling the `plot` function on them exposes these charts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表通过`plot`函数公开。也就是说，如果您有一个DataFrame或Series对象，在它们上调用`plot`函数将公开这些图表。
- en: 'The `plot` method requires a `div` ID where the plot is to be shown. For example,
    assuming `df` is a DataFrame, we can call the `plot` function as shown in the
    following code snippet:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot`方法需要一个`div` ID，用于显示图表。例如，假设`df`是一个DataFrame，我们可以按照下面的代码片段调用`plot`函数：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The chart type can be `line`, `bar`, `scatter`, `hist`, `pie`, `box`, `violin`,
    or `table`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图表类型可以是`line`、`bar`、`scatter`、`hist`、`pie`、`box`、`violin`或`table`。
- en: Each plot type will accept plot-specific arguments, but they all share a common
    argument called `config`. The `config` object is used to customize the plot as
    well as the layout. Think of the `config` argument as a combination of the layout
    and configuration properties we used in [*Chapter 5*](B17076_05_ePub_RK.xhtml#_idTextAnchor099),
    *Data Visualization with Plotly.js*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每种图表类型都将接受特定于图表的参数，但它们都共享一个名为`config`的公共参数。`config`对象用于自定义图表以及布局。将`config`参数视为我们在[*第5章*](B17076_05_ePub_RK.xhtml#_idTextAnchor099)中使用的布局和配置属性的组合。
- en: 'The `config` argument is an object with the following format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`参数是一个具有以下格式的对象：'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the following section, we will show some examples of using the different
    chart types, as well as showing you how to configure them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将展示使用不同图表类型的一些示例，以及如何配置它们。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We'll be downloading and using two real-world datasets in the following sections.
    This means you'll need an internet connection to download the datasets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将下载并使用两个真实世界的数据集。这意味着您需要互联网连接来下载数据集。
- en: Adding Danfo.js to your code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Danfo.js添加到您的代码中
- en: 'To use Danfo.js for plotting, you need to add it to your project. If you''re
    working in Dnotebook, which we''ll be using for our examples, then use the `load_package`
    function to load Danfo.js and Plotly.js as shown in the following code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Danfo.js进行绘图，您需要将其添加到您的项目中。如果您正在使用我们的示例中将要使用的Dnotebook，则可以使用`load_package`函数加载Danfo.js和Plotly.js，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code will install Danfo.js and Plotly.js in Dnotebook. Danfo.js
    uses the installed Plotly.js to make plots. Plots won't work unless Plotly is
    explicitly loaded.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在Dnotebook中安装Danfo.js和Plotly.js。Danfo.js使用安装的Plotly.js来制作图表。除非显式加载Plotly，否则图表将无法工作。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Older versions of Danfo.js (pre-0.2.3) ship with Plotly.js. It has been removed
    in newer versions as stated in the release notes shown here: [https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4](https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧版本的Danfo.js（0.2.3之前）附带了Plotly.js。在新版本中已经删除，如此处显示的发布说明中所述：[https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4](https://danfo.jsdata.org/release-notes#latest-release-node-v-0-2-5-browser-0-2-4)。
- en: 'If you''re making plots in an HTML file, ensure to add the `script` tags to
    your header as demonstrated in the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在HTML文件中制作图表，请确保在头部添加`script`标签，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finally, in UI libraries such as React or Vue, ensure to install Danfo.js and
    Plotly.js via package managers such as npm or yarn.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在诸如React或Vue之类的UI库中，确保通过npm或yarn等包管理器安装Danfo.js和Plotly.js。
- en: Downloading a dataset for plotting
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载数据集以绘制
- en: 'In this section, we''ll be downloading a real-world financial dataset, and
    this dataset will be used for all our examples. In Dnotebook, you can download
    the dataset once in a top cell and have it available to other cells as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将下载一个真实的金融数据集，这个数据集将用于我们所有的示例。在Dnotebook中，您可以在顶部单元格中下载数据集，并在其他单元格中使用如下：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ensure to declare `financial_df` with `var`. This makes `financial_df` available
    to every cell in your Dnotebook. If working in React or plain HTML, then it is
    recommended to use `let` or `const`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用`var`声明`financial_df`。这样可以使`financial_df`在Dnotebook的每个单元格中都可用。如果在React或纯HTML中工作，则建议使用`let`或`const`。
- en: 'We can show the top five rows of `financial_df` using the `head` function and
    `table` as shown in the following code snippet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`head`函数和`table`来显示`financial_df`的前五行，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running the preceding code gives the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会产生以下输出：
- en: '![Figure 6.1 – Table showing the top five rows of the financial dataset'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 表格显示金融数据集的前五行'
- en: '](img/B17076_6_1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_1.jpg)'
- en: Figure 6.1 – Table showing the top five rows of the financial dataset
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 表格显示金融数据集的前五行
- en: Now that we have our datasets, we can start making some interesting plots. First,
    we'll start with a simple line chart.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据集，我们可以开始制作一些有趣的图表。首先，我们将从一个简单的折线图开始。
- en: Creating line charts with Danfo.js
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建折线图
- en: 'Line charts are simple chart types mostly used on Series data or single columns.
    They can show trends in data points. To make a line chart on a single column –
    say, `AAPL.Open` in `financial_df` – we can do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 折线图是简单的图表类型，主要用于Series数据或单列。它们可以显示数据点的趋势。要在单列上制作折线图 - 比如，在`financial_df`中的`AAPL.Open`，我们可以这样做：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running the preceding code gives the following output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会产生以下输出：
- en: '![Figure 6.2 - Top five rows of the financial dataset'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 金融数据集的前五行'
- en: '](img/B17076_6_2.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_2.jpg)'
- en: Figure 6.2 - Top five rows of the financial dataset
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 金融数据集的前五行
- en: Notice that we are using DataFrame subsetting (`financial_df["column name"]`)
    to get a single column – `AAPl.Open` – as a Series. Then, we call the `.line`
    chart type and pass in a `config` object. The `config` object accepts the `layout`
    property as well as other arguments used by Danfo.js and Plotly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用DataFrame子集（`financial_df["column name"]`）来获取单个列 - `AAPl.Open` - 作为一个Series。然后，我们调用`.line`图表类型并传入一个`config`对象。`config`对象接受`layout`属性以及Danfo.js和Plotly使用的其他参数。
- en: 'If you want to plot specific columns, you can pass an array of column names
    to the `config` parameter, as demonstrated in the following code snippet:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要绘制特定列，可以将列名数组传递给`config`参数，如下面的代码片段所示：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running the preceding code gives the following output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码会产生以下输出：
- en: '![Figure 6.3 – Plotting two columns as a line chart'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 - 将两列绘制为折线图'
- en: '](img/B17076_6_3.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_3.jpg)'
- en: Figure 6.3 – Plotting two columns as a line chart
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 - 将两列绘制为折线图
- en: 'By default, the *x* axis of the chart is the index of the DataFrame or Series.
    In the case of the `financial_df` DataFrame, the index was auto-generated when
    we downloaded the dataset with the `read_csv` function. If you want to change
    the index, you can use the `set_index` function as shown in the following code
    snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，图表的*x*轴是DataFrame或Series的索引。对于`financial_df` DataFrame，当我们使用`read_csv`函数下载数据集时，索引是自动生成的。如果要更改索引，可以使用`set_index`函数，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 6.4 – Table showing the top five rows with the index set to date'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 - 表格显示前五行，索引设置为日期'
- en: '](img/B17076_6_4.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_4.jpg)'
- en: Figure 6.4 – Table showing the top five rows with the index set to date
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 - 表格显示前五行，索引设置为日期
- en: 'If we make the same plot as earlier, we see that the *x* axis is automatically
    formatted to dates:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们制作与之前相同的图表，我们会发现*x*轴会自动格式化为日期：
- en: '![Figure 6.5 – Chart of two columns (AAPL.open, AAPL.close) against the date
    index'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 - 两列（AAPL.open，AAPL.close）针对日期索引的图表'
- en: '](img/B17076_6_5.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_5.jpg)'
- en: Figure 6.5 – Chart of two columns (AAPL.open, AAPL.close) against the date index
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 - 两列（AAPL.open，AAPL.close）针对日期索引的图表
- en: 'You can specify other Plotly configuration options such as the width, fonts,
    and so on, by passing them to either the `layout` property or in the body of the
    `config` object. For example, to configure properties such as fonts, text size,
    layout width, and as far as even adding custom buttons to your plots, you can
    do the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将它们传递到`layout`属性或`config`对象的主体中来指定其他Plotly配置选项，例如宽度、字体等。例如，要配置字体、文本大小、布局宽度，甚至添加自定义按钮到您的图表，您可以这样做：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.6 – A line plot with various configurations as well as layout properties
    specified'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 - 具有各种配置以及指定布局属性的折线图'
- en: '](img/B17076_6_6.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_6.jpg)'
- en: Figure 6.6 – A line plot with various configurations as well as layout properties
    specified
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 - 具有各种配置以及指定布局属性的折线图
- en: With the preceding information, you can get started making nice line charts
    from your dataset. In the next section, we'll cover another type of plot – a scatter
    plot – available in Danfo.js.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述信息，您就可以开始从数据集中制作漂亮的折线图了。在下一节中，我们将介绍Danfo.js中可用的另一种类型的图表 - 散点图。
- en: Creating scatter plots with Danfo.js
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建散点图
- en: 'We can easily make scatter plots by specifying the plot type to be `scatter`.
    For example, using the code from the preceding section, *Creating line charts
    with Danfo.js*, we can just change the plot type from `line` to `scatter`, and
    we get a scatter plot of the selected columns, as demonstrated in the following
    code block:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将绘图类型指定为`scatter`来轻松制作散点图。例如，使用前一节中的代码，*使用Danfo.js创建折线图*，我们只需将绘图类型从`line`更改为`scatter`，就可以得到所选列的散点图，如下面的代码块所示：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.7 – A scatter plot on two columns'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 - 两列的散点图'
- en: '](img/B17076_6_7.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_7.jpg)'
- en: Figure 6.7 – A scatter plot on two columns
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 - 两列的散点图
- en: 'If you need to make a scatter plot between two specific columns in the DataFrame,
    you can specify `x` and `y` values in the `config` object, as shown in the following
    code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在DataFrame中指定两个特定列之间的散点图，可以在`config`对象中指定`x`和`y`值，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.8 – A scatter plot on explicitly specified x and y columns'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 - 明确指定x和y列的散点图'
- en: '](img/B17076_6_8.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_8.jpg)'
- en: Figure 6.8 – A scatter plot on explicitly specified x and y columns
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 - 明确指定x和y列的散点图
- en: To customize the layout or set `config`, you can pass the corresponding options
    to the `config` object just like we did in the *Creating line charts with Danfo.js*
    section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义布局或设置`config`，您可以将相应的选项传递给`config`对象，就像我们在*使用Danfo.js创建折线图*部分中所做的那样。
- en: In the next section, we'll briefly look at two similar types of plots – box
    and violin plots.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将简要介绍两种类似的图表类型 - 箱线图和小提琴图。
- en: Creating box and violin plots with Danfo.js
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建箱线图和小提琴图
- en: The box and violin plots are similar and will generally use the same parameters.
    So, we will cover them both in this section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 箱线图和小提琴图非常相似，通常会使用相同的参数。因此，我们将在本节中同时介绍它们。
- en: In the following examples, we will first make a box plot and then change it
    to a violin plot by changing only the plot type option.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将首先制作一个箱线图，然后仅通过更改绘图类型选项将其更改为小提琴图。
- en: Making box and violin plots for a Series
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为系列创建箱线图和小提琴图
- en: 'To make a box plot for a Series or a single column in a DataFrame, first, we
    subset to get the Series, and then we''ll call the plot type on it, as demonstrated
    in the following code snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要为系列或DataFrame中的单个列创建箱线图，首先，我们要对其进行子集化以获取系列，然后我们将在其上调用绘图类型，如下面的代码片段所示：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.9 – A box plot on a Series'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 - 系列的箱线图'
- en: '](img/B17076_6_9.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_9.jpg)'
- en: Figure 6.9 – A box plot on a Series
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 - 系列的箱线图
- en: 'Now, in order to change the preceding plot to a violin plot, you can just change
    the plot type to `violin`, as shown in the following snippet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将前述图更改为小提琴图，您只需将绘图类型更改为`violin`，如下面的代码片段所示：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.10 – A violin plot on a Series'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10 - 系列的小提琴图'
- en: '](img/B17076_6_10.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_10.jpg)'
- en: Figure 6.10 – A violin plot on a Series
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 - 系列的小提琴图
- en: What about when we need to make a box plot for more than one column at a time?
    Well, in the next section, we'll show you how.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要一次为多个列制作箱线图时会发生什么？好吧，在下一节中，我们将向您展示。
- en: Box and violin plots for multiple columns
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多列的箱线图和小提琴图
- en: 'In order to make box/violin plots for more than one column in a DataFrame,
    you can pass an array of column names to the plot, as we demonstrate in the following
    code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在DataFrame中为多个列创建箱线图/小提琴图，您可以将列名数组传递给绘图，就像我们在下面的代码片段中演示的那样：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.11 – Box plots of multiple columns at a time'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11 - 一次绘制多列的箱线图'
- en: '](img/B17076_6_11.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_11.jpg)'
- en: Figure 6.11 – Box plots of multiple columns at a time
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 - 一次绘制多列的箱线图
- en: 'Reusing the previous code, we can easily change the box plot to a violin plot
    by changing the plot type, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重用先前的代码，我们可以通过更改绘图类型轻松将箱线图更改为小提琴图，如下所示：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We get the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '![Figure 6.12 – Violin plots of multiple columns at a time'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.12 - 一次绘制多列的小提琴图'
- en: '](img/B17076_6_12.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_12.jpg)'
- en: Figure 6.12 – Violin plots of multiple columns at a time
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 - 一次绘制多列的小提琴图
- en: Finally, what if we want to specify the `x` and `y` values? We will show this
    in the following section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我们想要指定`x`和`y`值会发生什么？我们将在下一节中展示这一点。
- en: Box and violin plots with specific x and y values
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具体的x和y值的箱线图和小提琴图
- en: We can make box and violin plots with specific `x` and `y` values. The `x` and
    `y` values are column names that must be present in the DataFrame.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用特定的`x`和`y`值制作箱线图和小提琴图。`x`和`y`值是必须在DataFrame中存在的列名。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is recommended that the `x` value of a box plot is categorical, that is,
    has a fixed number of classes. This ensures interpretability.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 建议箱线图的`x`值是分类的，即具有固定数量的类别。这样可以确保可解释性。
- en: 'In the following example, we show you how to explicitly specify `x` and `y`
    values to a plot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将向您展示如何明确指定`x`和`y`值到一个图中：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.13 – Box plots from specific x and y values'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13 - 从特定x和y值绘制箱线图'
- en: '](img/B17076_6_13.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_13.jpg)'
- en: Figure 6.13 – Box plots from specific x and y values
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 - 从特定x和y值绘制箱线图
- en: Notice that the `x` value is a categorical variable called `direction`. This
    column has two fixed classes – `Increasing` and `Decreasing`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`x`值是一个名为`direction`的分类变量。该列有两个固定的类别 - `Increasing`和`Decreasing`。
- en: 'As usual, we can get the corresponding violin plot by changing the type:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们可以通过更改类型获得相应的小提琴图：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.14 – Violin plot from specific x and y values'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14 - 从特定x和y值绘制小提琴图'
- en: '](img/B17076_6_14.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_14.jpg)'
- en: Figure 6.14 – Violin plot from specific x and y values
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 - 从特定x和y值绘制小提琴图
- en: 'Now, what would happen if we specified both continuous values for `x` and `y`?
    Well, let''s find out in the following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们为`x`和`y`同时指定了连续值会发生什么？好吧，在以下示例中让我们找出来：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会产生以下输出：
- en: '![Figure 6.15 – Box plot on two continuous variables'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15 - 两个连续变量的箱线图'
- en: '](img/B17076_6_15.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_15.jpg)'
- en: Figure 6.15 – Box plot on two continuous variables
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 - 两个连续变量的箱线图
- en: From the preceding output, you can see that the chart becomes almost uninterpretable
    and the goal of using a box/violin plot is not achieved. So, therefore, it is
    recommended to use box/violin plots for categorical `x` values.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述输出可以看出，图表变得几乎无法解释，并且无法实现使用箱线图/小提琴图的目标。因此，建议对于分类`x`值使用箱线图/小提琴图。
- en: In the next section, we'll introduce the `hist` plot type for making histograms.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍用于制作直方图的`hist`绘图类型。
- en: Creating histograms with Danfo.js
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建直方图
- en: A histogram, as we explained earlier, is a representation of the spread of data.
    The `hist` function exposed by the plot namespace can be used to make histograms
    from DataFrames or Series, as we'll demonstrate in the following section.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前解释的，直方图是数据分布的表示。绘图命名空间提供的`hist`函数可以用于从DataFrame或Series制作直方图，我们将在下一节中进行演示。
- en: Creating a histogram from a Series
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Series创建直方图
- en: 'In order to create a histogram from a Series, you can call the `hist` function
    on the Series, or if plotting on a DataFrame, you can subset the DataFrame with
    the column name, as shown in the following example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Series创建直方图，可以在Series上调用`hist`函数，或者如果在DataFrame上绘图，可以使用列名对DataFrame进行子集化，如下面的示例所示：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.16 – Histogram on Series data'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.16 - Series数据的直方图'
- en: '](img/B17076_6_16.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_16.jpg)'
- en: Figure 6.16 – Histogram on Series data
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 - Series数据的直方图
- en: Next, we'll make a histogram for more than one column in a DataFrame at a time.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将一次为DataFrame中的多个列制作直方图。
- en: Creating a histogram from multiple columns
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多列创建直方图
- en: 'If you want to make a histogram for more than one column in a DataFrame, you
    can pass the names of the columns as an array of column names, as we show in the
    following code snippet:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要为DataFrame中的多个列制作直方图，可以将列名作为列名数组传递，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.17 – Histogram on two columns'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.17 - 两列的直方图'
- en: '](img/B17076_6_17.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_17.jpg)'
- en: Figure 6.17 – Histogram on two columns
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 - 两列的直方图
- en: If you need to specify the single value `x` or `y` from which to generate the
    histogram, you can pass the `x` or `y` value to the `config` object.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要指定单个值`x`或`y`来生成直方图，可以将`x`或`y`值传递给`config`对象。
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can only specify one of `x` or `y` at a time. This is because a histogram
    is a univariate chart. So, if you specify `x` values, the histogram will be a
    vertical one, and if `y` is specified, it will be a horizontal histogram.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一次只能指定`x`或`y`中的一个。这是因为直方图是一种单变量图表。因此，如果指定了`x`值，直方图将是垂直的，如果指定了`y`，它将是水平的。
- en: 'In the following example, we make a horizontal histogram by specifying `y`
    values:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，通过指定`y`值制作了水平直方图：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.18 – A horizontal histogram'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.18 - 水平直方图'
- en: '](img/B17076_6_18.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_18.jpg)'
- en: Figure 6.18 – A horizontal histogram
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 - 水平直方图
- en: By default, histograms are vertical and that is equivalent to setting the `x`
    parameter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，直方图是垂直的，相当于设置了`x`参数。
- en: In the next section, we'll introduce bar charts.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍条形图。
- en: Creating bar charts with Danfo.js
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Danfo.js创建条形图
- en: A bar chart presents categorical data with rectangular bars where the lengths
    are proportional to the values that they represent.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图以矩形条形呈现分类数据，其长度与它们代表的值成比例。
- en: The `bar` function can also be called on the `plot` namespace and various configuration
    options can also be applied. In the following sections, we'll demonstrate how
    to create bar charts from a Series as well as a DataFrame with multiple columns.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`bar`函数也可以在`plot`命名空间上调用，并且还可以应用各种配置选项。在接下来的几节中，我们将演示如何从Series以及具有多个列的DataFrame创建条形图。'
- en: Creating a bar chart from a Series
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Series创建条形图
- en: 'To make a simple bar chart from a Series, you can do the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Series制作简单的条形图，可以执行以下操作：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.19 – A bar chart on a Series'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.19 - Series上的条形图'
- en: '](img/B17076_6_19.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_19.jpg)'
- en: Figure 6.19 – A bar chart on a Series
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 - Series上的条形图
- en: Looking at the preceding figure, you'll notice that we have a large number of
    bars. This is because the `AAPL.Volume` column is a continuous variable and a
    bar is created for each point.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图可以看出，我们有大量的条形。这是因为`AAPL.Volume`列是一个连续变量，每个点都创建了一个条形。
- en: 'To avoid such uninterpretable charts, it is recommended to use bar charts for
    variables with a fixed number of numeric classes. We can demonstrate this by creating
    a simple Series, as shown in the following code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种无法解释的图表，建议对具有固定数量的数值类别的变量使用条形图。我们可以通过创建一个简单的Series来演示这一点，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.20 – A bar chart on a Series with fixed values'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.20 - 具有固定值的Series上的条形图'
- en: '](img/B17076_6_20.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_20.jpg)'
- en: Figure 6.20 – A bar chart on a Series with fixed values
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 - 具有固定值的Series上的条形图
- en: In the next section, we'll show you how to make grouped bar charts from a list
    of specified column names.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向您展示如何从指定的列名列表中制作分组条形图。
- en: Creating a bar chart from multiple columns
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从多列创建条形图
- en: 'To create grouped bar charts from a list of column names, you can pass the
    names of the columns to the `config` object, as we demonstrate in the following
    example:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列名列表创建分组条形图，可以将列名传递给`config`对象，如下面的示例所示：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Running the preceding code cell gives the following output:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码单元格会得到以下输出：
- en: '![Figure 6.21 – A bar chart on two columns'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.21 - 两列的条形图'
- en: '](img/B17076_6_21.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_6_21.jpg)'
- en: Figure 6.21 – A bar chart on two columns
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21 - 两列的条形图
- en: Notice that in the preceding example, we created a new DataFrame. This is because
    the financial dataset does not contain the required data types for bar charts
    as we said earlier.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的示例中，我们创建了一个新的DataFrame。这是因为金融数据集不包含条形图所需的数据类型，正如我们之前所说的。
- en: That brings us to the end of this chapter. Congratulations on making it this
    far! We are sure you have learned a lot and can use the knowledge gained here
    in your personal projects.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的结束。恭喜您走到了这一步！我们相信您已经学到了很多，并且可以在个人项目中应用在这里获得的知识。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered plotting and visualization with Danfo.js. First,
    we showed you how to set up Danfo.js and Plotly in a new project, and then moved
    on to downloading a dataset, which we loaded into a DataFrame. Next, we showed
    you how to create basic charts such as line, bar, and scatter plots, and then
    statistical charts such as histograms and box and violin plots. Finally, we showed
    you how to configure plots created with Danfo.js.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用Danfo.js进行绘图和可视化。首先，我们向您展示了如何在新项目中设置Danfo.js和Plotly，然后继续下载数据集，将其加载到DataFrame中。接下来，我们向您展示了如何创建基本图表，如折线图、条形图和散点图，然后是统计图表，如直方图以及箱线图和小提琴图。最后，我们向您展示了如何配置使用Danfo.js创建的图表。
- en: The knowledge you have gained in this and [*Chapter 5*](B17076_05_ePub_RK.xhtml#_idTextAnchor099),
    *Data Visualization with Plotly.js*, will be of practical use when creating data-driven
    apps as well as custom dashboards.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和第5章《使用Plotly.js进行数据可视化》中所获得的知识将在创建数据驱动的应用程序以及自定义仪表板时发挥实际作用。
- en: In the next chapter, you'll learn about data aggregation and group-by operations,
    thereby understanding how to perform data transformations such as merging, joining,
    and concatenation.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关数据聚合和分组操作，从而了解如何执行数据转换，如合并、连接和串联。
