["```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    int minNo = 1; \n    long maxThroughput = 99999; \n  } \n} \n```", "```cs\nstatic void Main(string[] args) \n{ \n  Task t = new Task(execute); \n  t.Start(); \n  t.Wait(); \n} \n\nprivate static void Execute() { \n  for (int i = 0; i < 100; i++) \n  { \n    Console.WriteLine(i); \n  } \n}\n```", "```cs\nInstall-Package BenchmarkDotNet \n```", "```cs\npublic class TestBenchmark \n{ \n  int len= 10; \n  [Benchmark] \n  public  void Fibonacci() \n  { \n    int a = 0, b = 1, c = 0; \n    Console.Write(\"{0} {1}\", a, b); \n\n    for (int i = 2; i < len; i++) \n    { \n      c = a + b; \n      Console.Write(\" {0}\", c); \n      a = b; \n      b = c; \n    } \n  } \n} \n```", "```cs\n\n[Benchmark] \npublic  void FibonacciRecursive() \n{ \n  int len= 10; \n  Fibonacci_Recursive(0, 1, 1, len); \n} \n\nprivate void Fibonacci_Recursive(int a, int b, int counter, int len) \n{ \n  if (counter <= len) \n  { \n    Console.Write(\"{0} \", a); \n    Fibonacci_Recursive(b, a + b, counter + 1, len); \n  } \n}  \n```", "```cs\nstatic void Main(string[] args)\n{\n  BenchmarkRunner.Run<TestBenchmark>();\n  Console.Read();\n}\n```", "```cs\nTestBenchmark class:\n```", "```cs\npublic class TestBenchmark \n{ \n\n  [Params(10,20,30)] \n  public int Len { get; set; } \n\n  [Benchmark] \n  public  void Fibonacci() \n  { \n    int a = 0, b = 1, c = 0; \n    Console.Write(\"{0} {1}\", a, b); \n\n    for (int i = 2; i < Len; i++) \n    { \n      c = a + b; \n      Console.Write(\" {0}\", c); \n      a = b; \n      b = c; \n    } \n  } \n\n  [Benchmark] \n  public  void FibonacciRecursive() \n  { \n    Fibonacci_Recursive(0, 1, 1, Len); \n  } \n\n  private void Fibonacci_Recursive(int a, int b, int counter, int len) \n  { \n    if (counter <= len) \n    { \n      Console.Write(\"{0} \", a); \n      Fibonacci_Recursive(b, a + b, counter + 1, len); \n    } \n  } \n}\n```", "```cs\n[MemoryDiagnoser] \npublic class TestBenchmark {} \n```", "```cs\n[Config(typeof(Config))] \npublic class TestBenchmark \n{ \n  private class Config : ManualConfig \n  { \n    // We will benchmark ONLY method with names with names (which \n    // contains \"A\" OR \"1\") AND (have length < 3) \n    public Config() \n    { \n      Add(new DisjunctionFilter( \n        new NameFilter(name => name.Contains(\"Recursive\")) \n      ));  \n\n    } \n  } \n\n  [Params(10,20,30)] \n  public int Len { get; set; } \n\n  [Benchmark] \n  public  void Fibonacci() \n  { \n    int a = 0, b = 1, c = 0; \n    Console.Write(\"{0} {1}\", a, b); \n\n    for (int i = 2; i < Len; i++) \n    { \n      c = a + b; \n      Console.Write(\" {0}\", c); \n      a = b; \n      b = c; \n    } \n  } \n\n  [Benchmark] \n  public  void FibonacciRecursive() \n  { \n    Fibonacci_Recursive(0, 1, 1, Len); \n  } \n\n  private void Fibonacci_Recursive(int a, int b, int counter, int len) \n  { \n    if (counter <= len) \n    { \n      Console.Write(\"{0} \", a); \n      Fibonacci_Recursive(b, a + b, counter + 1, len); \n    } \n  } \n} \n```", "```cs\nstatic void Main(string[] args) \n{ \n  var config = ManualConfig.Create(DefaultConfig.Instance); \n  config.Add(new DisjunctionFilter(new NameFilter(\n    name => name.Contains(\"Recursive\")))); \n  BenchmarkRunner.Run<TestBenchmark>(config); \n}\n```"]