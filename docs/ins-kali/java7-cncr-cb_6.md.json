["```java\n    public class AddTask implements Runnable {\n    ```", "```java\n      private ConcurrentLinkedDeque<String> list;\n    ```", "```java\n      public AddTask(ConcurrentLinkedDeque<String> list) {\n        this.list=list;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        String name=Thread.currentThread().getName();\n        for (int i=0; i<10000; i++){\n          list.add(name+\": Element \"+i);\n        }\n      }\n    ```", "```java\n    public class PollTask implements Runnable {\n    ```", "```java\n      private ConcurrentLinkedDeque<String> list;\n    ```", "```java\n      public PollTask(ConcurrentLinkedDeque<String> list) {\n        this.list=list;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        for (int i=0; i<5000; i++) {\n          list.pollFirst();\n          list.pollLast();\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        ConcurrentLinkedDeque<String> list=new ConcurrentLinkedDeque<>();\n    ```", "```java\n        Thread threads[]=new Thread[100];\n    ```", "```java\n        for (int i=0; i<threads.length ; i++){\n          AddTask task=new AddTask(list);\n          threads[i]=new Thread(task);\n          threads[i].start();\n        }\n        System.out.printf(\"Main: %d AddTask threads have been launched\\n\",threads.length);\n    ```", "```java\n        for (int i=0; i<threads.length; i++) {\n          try {\n            threads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Main: Size of the List: %d\\n\",list.size());\n    ```", "```java\n        for (int i=0; i< threads.length; i++){\n          PollTask task=new PollTask(list);\n          threads[i]=new Thread(task);\n          threads[i].start();\n        }\n        System.out.printf(\"Main: %d PollTask threads have been launched\\n\",threads.length);\n    ```", "```java\n        for (int i=0; i<threads.length; i++) {\n          try {\n            threads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Main: Size of the List: %d\\n\",list.size());\n    ```", "```java\n    public class Client implements Runnable{\n    ```", "```java\n      private LinkedBlockingDeque<String> requestList;\n    ```", "```java\n      public Client (LinkedBlockingDeque<String> requestList) {\n        this.requestList=requestList;\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        for (int i=0; i<3; i++) {\n          for (int j=0; j<5; j++) {\n            StringBuilder request=new StringBuilder();\n            request.append(i);\n            request.append(\":\");\n            request.append(j);\n            try {\n              requestList.put(request.toString());\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            System.out.printf(\"Client: %s at %s.\\n\",request,new Date());\n          }\n          try {\n            TimeUnit.SECONDS.sleep(2);\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n        System.out.printf(\"Client: End.\\n\");\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        LinkedBlockingDeque<String> list=new LinkedBlockingDeque<>(3);\n    ```", "```java\n        Client client=new Client(list);\n        Thread thread=new Thread(client);\n        thread.start();\n    ```", "```java\n        for (int i=0; i<5 ; i++) {\n          for (int j=0; j<3; j++) {\n            String request=list.take();\n            System.out.printf(\"Main: Request: %s at %s. Size: %d\\n\",request,new Date(),list.size());\n          }\n          TimeUnit.MILLISECONDS.sleep(300);\n        }\n    ```", "```java\n        System.out.printf(\"Main: End of the program.\\n\");\n    ```", "```java\n    public class Event implements Comparable<Event> {\n    ```", "```java\n      private int thread;\n    ```", "```java\n      private int priority;\n    ```", "```java\n      public Event(int thread, int priority){\n        this.thread=thread;\n        this.priority=priority;\n      }\n    ```", "```java\n      public int getThread() {\n        return thread;\n      }\n    ```", "```java\n      public int getPriority() {\n        return priority;\n      }\n    ```", "```java\n    @Override\n      public int compareTo(Event e) {\n        if (this.priority>e.getPriority()) {\n          return -1;\n        } else if (this.priority<e.getPriority()) {\n          return 1; \n        } else {\n          return 0;\n        }\n      }\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      private int id;\n    ```", "```java\n      private PriorityBlockingQueue<Event> queue;\n    ```", "```java\n      public Task(int id, PriorityBlockingQueue<Event> queue) {\n        this.id=id;\n        this.queue=queue;\n      }\n    ```", "```java\n       @Override\n      public void run() {\n        for (int i=0; i<1000; i++){\n          Event event=new Event(id,i);\n          queue.add(event);\n        }\n      }\n    ```", "```java\n    public class Main{\n      public static void main(String[] args) {\n    ```", "```java\n        PriorityBlockingQueue<Event> queue=new PriorityBlockingQueue<>();\n    ```", "```java\n        Thread taskThreads[]=new Thread[5];\n    ```", "```java\n        for (int i=0; i<taskThreads.length; i++){\n          Task task=new Task(i,queue);\n          taskThreads[i]=new Thread(task);\n        }\n    ```", "```java\n        for (int i=0; i<taskThreads.length ; i++) {\n          taskThreads[i].start();\n        }\n    ```", "```java\n        for (int i=0; i<taskThreads.length ; i++) {\n          try {\n            taskThreads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Main: Queue Size: %d\\n\",queue.size());\n        for (int i=0; i<taskThreads.length*1000; i++){\n          Event event=queue.poll();\n          System.out.printf(\"Thread %s: Priority %d\\n\",event.getThread(),event.getPriority());\n        }\n    ```", "```java\n        System.out.printf(\"Main: Queue Size: %d\\n\",queue.size());\n        System.out.printf(\"Main: End of the program\\n\");\n    ```", "```java\n    public class Event implements Delayed {\n    ```", "```java\n      private Date startDate;\n    ```", "```java\n      public Event (Date startDate) {\n        this.startDate=startDate;\n      }\n    ```", "```java\n    @Override\n      public int compareTo(Delayed o) {\n        long result=this.getDelay(TimeUnit.NANOSECONDS)-o.getDelay(TimeUnit.NANOSECONDS);\n        if (result<0) {\n          return -1;\n        } else if (result>0) {\n          return 1;\n        }\n        return 0;\n      }\n    ```", "```java\n      public long getDelay(TimeUnit unit) {  \n        Date now=new Date();\n        long diff=startDate.getTime()-now.getTime();\n        return unit.convert(diff,TimeUnit.MILLISECONDS);\n      }\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      private int id;\n    ```", "```java\n      private DelayQueue<Event> queue;\n    ```", "```java\n      public Task(int id, DelayQueue<Event> queue) {\n        this.id=id;\n        this.queue=queue;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        Date now=new Date();\n        Date delay=new Date();\n        delay.setTime(now.getTime()+(id*1000));\n        System.out.printf(\"Thread %s: %s\\n\",id,delay);\n    ```", "```java\n        for (int i=0; i<100; i++) {\n          Event event=new Event(delay);\n          queue.add(event);\n        }  \n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) throws Exception {\n    ```", "```java\n        DelayQueue<Event> queue=new DelayQueue<>();\n    ```", "```java\n        Thread threads[]=new Thread[5];\n    ```", "```java\n        for (int i=0; i<threads.length; i++){\n          Task task=new Task(i+1, queue);\n          threads[i]=new Thread(task);\n        }\n    ```", "```java\n        for (int i=0; i<threads.length; i++) {\n          threads[i].start();\n        }\n    ```", "```java\n        for (int i=0; i<threads.length; i++) {\n          threads[i].join();\n        }\n    ```", "```java\n        do {\n          int counter=0;\n          Event event;\n          do {\n            event=queue.poll();\n            if (event!=null) counter++;\n          } while (event!=null);\n          System.out.printf(\"At %s you have read %d events\\n\",new Date(),counter);\n          TimeUnit.MILLISECONDS.sleep(500);\n        } while (queue.size()>0);\n      }\n\n    }\n    ```", "```java\n    public class Contact {\n    ```", "```java\n      private String name;\n      private String phone;\n    ```", "```java\n      public Contact(String name, String phone) {\n        this.name=name;\n        this.phone=phone;\n      }\n    ```", "```java\n      public String getName() {\n        return name;\n      }\n\n      public String getPhone() {\n        return phone;\n      }\n    ```", "```java\n    public class Task implements Runnable {\n    ```", "```java\n      private ConcurrentSkipListMap<String, Contact> map;\n    ```", "```java\n      private String id;\n    ```", "```java\n      public Task (ConcurrentSkipListMap<String, Contact> map, String id) {\n        this.id=id;\n        this.map=map;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        for (int i=0; i<1000; i++) {\n          Contact contact=new Contact(id, String.valueOf(i+1000));\n          map.put(id+contact.getPhone(), contact);\n        }    \n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        ConcurrentSkipListMap<String, Contact> map;\n        map=new ConcurrentSkipListMap<>();\n    ```", "```java\n        Thread threads[]=new Thread[25];\n        int counter=0;\n    ```", "```java\n        for (char i='A'; i<'Z'; i++) {\n          Task task=new Task(map, String.valueOf(i));\n          threads[counter]=new Thread(task);\n          threads[counter].start();\n          counter++;\n        }\n    ```", "```java\n        for (int i=0; i<25; i++) {\n          try {\n            threads[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        System.out.printf(\"Main: Size of the map: %d\\n\",map.size());\n\n        Map.Entry<String, Contact> element;\n        Contact contact;\n\n        element=map.firstEntry();\n        contact=element.getValue();\n        System.out.printf(\"Main: First Entry: %s: %s\\n\",contact.getName(),contact.getPhone());\n\n    ```", "```java\n        element=map.lastEntry();\n        contact=element.getValue();\n        System.out.printf(\"Main: Last Entry: %s: %s\\n\",contact.getName(),contact.getPhone());\n    ```", "```java\n        System.out.printf(\"Main: Submap from A1996 to B1002: \\n\");\n        ConcurrentNavigableMap<String, Contact> submap=map.subMap(\"A1996\", \"B1002\");\n        do {\n          element=submap.pollFirstEntry();\n          if (element!=null) {\n            contact=element.getValue();\n            System.out.printf(\"%s: %s\\n\",contact.getName(),contact.getPhone());\n          }\n        } while (element!=null);\n      }\n    ```", "```java\n    public class TaskLocalRandom implements Runnable {\n    ```", "```java\n      public TaskLocalRandom() {\n        ThreadLocalRandom.current();\n      }\n    ```", "```java\n      @Override\n      public void run() {\n        String name=Thread.currentThread().getName();\n        for (int i=0; i<10; i++){\n          System.out.printf(\"%s: %d\\n\",name,ThreadLocalRandom.current().nextInt(10));\n        }\n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        Thread threads[]=new Thread[3];\n    ```", "```java\n        for (int i=0; i<3; i++) {\n          TaskLocalRandom task=new TaskLocalRandom();\n          threads[i]=new Thread(task);\n          threads[i].start();\n        }\n    ```", "```java\n    public class Account {\n    ```", "```java\n      private AtomicLong balance;\n    ```", "```java\n      public Account(){\n        balance=new AtomicLong();\n      }\n    ```", "```java\n      public long getBalance() {\n        return balance.get();\n      }\n    ```", "```java\n      public void setBalance(long balance) {\n        this.balance.set(balance);\n      }\n    ```", "```java\n      public void addAmount(long amount) {\n        this.balance.getAndAdd(amount);\n      }\n    ```", "```java\n      public void subtractAmount(long amount) {\n        this.balance.getAndAdd(-amount);\n      }\n    ```", "```java\n    public class Company implements Runnable {\n    ```", "```java\n      private Account account;\n    ```", "```java\n      public Company(Account account) {\n        this.account=account;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        for (int i=0; i<10; i++){\n          account.addAmount(1000);\n        }\n      }\n    ```", "```java\n    public class Bank implements Runnable {\n    ```", "```java\n      private Account account;\n    ```", "```java\n      public Bank(Account account) {\n        this.account=account;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        for (int i=0; i<10; i++){\n          account.subtractAmount(1000);\n        }\n      }\n    ```", "```java\n    public class Main {\n\n      public static void main(String[] args) {\n    ```", "```java\n        Account  account=new Account();\n        account.setBalance(1000);\n    ```", "```java\n        Company  company=new Company(account);\n        Thread companyThread=new Thread(company);\n    Create a new Bank task and a thread to execute it.\n        Bank bank=new Bank(account);\n        Thread bankThread=new Thread(bank);\n    ```", "```java\n        System.out.printf(\"Account : Initial Balance: %d\\n\",account.getBalance());\n    ```", "```java\n        companyThread.start();\n        bankThread.start();\n    ```", "```java\n        try {\n          companyThread.join();\n          bankThread.join();\n          System.out.printf(\"Account : Final Balance: %d\\n\",account.getBalance());\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n    ```", "```java\n    public class Incrementer implements Runnable {\n    ```", "```java\n      private AtomicIntegerArray vector;\n    ```", "```java\n      public Incrementer(AtomicIntegerArray vector) {\n        this.vector=vector;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        for (int i=0; i<vector.length(); i++){\n          vector.getAndIncrement(i);\n        }\n      }\n    ```", "```java\n    public class Decrementer implements Runnable {\n    ```", "```java\n      private AtomicIntegerArray vector;\n    ```", "```java\n      public Decrementer(AtomicIntegerArray vector) {\n        this.vector=vector;\n      }\n    ```", "```java\n    @Override\n      public void run() {\n        for (int i=0; i<vector.length(); i++) {\n          vector.getAndDecrement(i);\n        }  \n      }\n    ```", "```java\n    public class Main {\n      public static void main(String[] args) {\n    ```", "```java\n        final int THREADS=100;\n        AtomicIntegerArray vector=new AtomicIntegerArray(1000);\n    ```", "```java\n        Incrementer incrementer=new Incrementer(vector);\n    ```", "```java\n        Decrementer decrementer=new Decrementer(vector);\n    ```", "```java\n        Thread threadIncrementer[]=new Thread[THREADS];\n        Thread threadDecrementer[]=new Thread[THREADS];\n    ```", "```java\n        for (int i=0; i<THREADS; i++) {\n          threadIncrementer[i]=new Thread(incrementer);\n          threadDecrementer[i]=new Thread(decrementer);\n\n          threadIncrementer[i].start();\n          threadDecrementer[i].start();\n        }\n    ```", "```java\n        for (int i=0; i<100; i++) {\n          try {\n            threadIncrementer[i].join();\n            threadDecrementer[i].join();\n          } catch (InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n    ```", "```java\n        for (int i=0; i<vector.length(); i++) {\n          if (vector.get(i)!=0) {\n            System.out.println(\"Vector[\"+i+\"] : \"+vector.get(i));\n          }\n        }\n    ```", "```java\n        System.out.println(\"Main: End of the example\");\n    ```"]