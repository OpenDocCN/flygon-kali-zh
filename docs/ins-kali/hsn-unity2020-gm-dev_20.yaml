- en: '*Chapter 20*: Building the Project'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第20章*：构建项目'
- en: So, we have reached a point where the game is mature enough to test it with
    real people. The problem is that we can't pretend people will install Unity, open
    a project, and hit Play. They want to receive a nice executable file to double-click
    and play right away. In this chapter, we are going to discuss how we can convert
    our project into an easy-to-share executable format.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经达到了一个可以用真实人员测试游戏的阶段。问题在于，我们不能假装人们会安装Unity，打开一个项目，然后点击播放。他们希望收到一个漂亮的可执行文件，双击即可立即播放。在本章中，我们将讨论如何将我们的项目转换为易于共享的可执行格式。
- en: 'In this chapter, we will examine the following build concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下构建概念：
- en: Building a project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建项目
- en: Debugging the build
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试构建
- en: Building a project
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建项目
- en: In software development (including video games), the result of taking the source
    files of our project and converting them into an executable format is called Build.
    The generated executable files are optimized to get the maximum performance possible.
    We can't get performance while editing the game due to the changing nature of
    a project. It would be time-consuming to prepare the assets in their final form
    while editing the game. Also, the generated files have a difficult-to-read format.
    They won't have the textures, audios, and source code files just there for the
    user to look at. They will be formatted in custom file structures, so in a way,
    it's protected from users stealing them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中（包括视频游戏），将我们项目的源文件转换为可执行格式的结果称为构建。生成的可执行文件经过优化，以获得最大可能的性能。由于项目的不断变化性质，我们无法在编辑游戏时获得性能。在编辑游戏时，准备资产到最终形式将是耗时的。此外，生成的文件具有难以阅读的格式。它们不会将纹理、音频和源代码文件放在那里供用户查看。它们将以自定义文件结构格式化，因此在某种程度上，它们受到用户窃取的保护。
- en: Important note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Actually, there are several tools to extract source files from video games,
    especially from a widely used engine such as Unity. You can extract assets such
    as textures and 3D models, and there are even programs that extract those assets
    directly from the VRAM, so we cannot guarantee that the assets won't be used outside
    the game. In the end, users have the data of those assets in their disks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有几种工具可以从视频游戏中提取源文件，尤其是从Unity这样广泛使用的引擎中。您可以提取资产，如纹理和3D模型，甚至有一些程序可以直接从VRAM中提取这些资产，因此我们无法保证这些资产不会在游戏之外使用。最终，用户在他们的磁盘上拥有这些资产的数据。
- en: 'The build process is pretty simple when you target desktop platforms such as
    PC, Mac, or Linux, but there are a few settings we need to keep in mind before
    building. The first configuration we are going to see is the scenes list. We have
    already discussed this, but it''s a good moment to remember that it is important
    to set the first element of this list to the Scene that will be loaded first.
    Remember, you can do this by going to **File | Build Settings** and dragging your
    desired starter scene to the top of the list. In our case, we defined the Game
    scene as the first scene, but in a real game, it would be ideal to create a Main
    Menu scene using UI and some graphics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将目标定为PC、Mac或Linux等桌面平台时，构建过程非常简单，但在构建之前，我们需要牢记一些设置。我们将要看到的第一个配置是场景列表。我们已经讨论过这一点，但现在是一个很好的时机来记住，将此列表的第一个元素设置为将首先加载的场景非常重要。记住，您可以通过转到**File
    | Build Settings**并将所需的起始场景拖到列表顶部来实现这一点。在我们的情况下，我们将游戏场景定义为第一个场景，但在一个真正的游戏中，最好创建一个使用UI和一些图形的主菜单场景：
- en: '![Figure 20.1 The Scenes list order'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.1 场景列表顺序'
- en: '](img/Figure_20.01_B14199.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.01_B14199.jpg)'
- en: Figure 20.1 – The Scenes list order
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.1 - 场景列表顺序
- en: 'Another setting you can change here is the target platform – the target operating
    system that the build will be created for. Usually, this is set for the same operating
    system you are developing on, but if you are, as an example, developing on a Mac,
    and you want to build for Windows, just set the `exe` instead of `app`. You may
    see Android and iOS as other target platforms, but making mobile games requires
    other considerations that we are not going to discuss in this book:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里更改的另一个设置是目标平台 - 将为其创建构建的目标操作系统。通常，这是设置为您正在开发的相同操作系统，但是，如果您例如在Mac上开发，并且希望为Windows构建，只需设置`exe`而不是`app`。您可能会看到Android和iOS作为其他目标平台，但制作移动游戏需要其他考虑，我们不会在本书中讨论：
- en: '![Figure 20.2 – Target Platform'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.2 - 目标平台'
- en: '](img/Figure_20.02_B14199.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.02_B14199.jpg)'
- en: Figure 20.2 – Target Platform
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.2 - 目标平台
- en: 'In the same window, you can click the **Player Settings** button at the bottom
    left, or just open the **Edit** | **Project Settings** window and click on the
    **Player** category to access the rest of the Build Settings. Unity calls the
    generated executable files the game Player. Here we have a set of configurations
    that will affect how the build or Player behaves, and here is a list of the basic
    ones:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个窗口中，您可以单击左下角的**Player Settings**按钮，或者只需打开**Edit** | **Project Settings**窗口，然后单击**Player**类别，即可访问其余的构建设置。Unity将生成的可执行文件称为游戏玩家。在这里，我们有一组配置，将影响构建或玩家的行为，以下是基本配置列表：
- en: '**Product Name**: This is the name of the game in the window title bar and
    executable file.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**：这是窗口标题栏和可执行文件中游戏的名称。'
- en: '**Company Name**: This is the name of the company that developed the game,
    which is used by Unity to create certain file paths and will be included in the
    executable information.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公司名称**：这是开发游戏的公司名称，Unity用它来创建某些文件路径，并将其包含在可执行信息中。'
- en: '**Default Icon**: Here, you can select a texture to act as the executable icon.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认图标**：在这里，您可以选择一个纹理作为可执行文件的图标。'
- en: '`Cursor Hotspot` property to the pixel of the image you want the cursor to
    do the clicks.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`光标热点`属性指的是您希望光标执行点击操作的图像像素。'
- en: '**Resolution and Presentation:** Settings about how our game''s resolution
    is going to be handled.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率和呈现**：关于我们的游戏分辨率将如何处理的设置。'
- en: '**Resolution and Presentation | Default is Native Resolution**: With this checked
    and when the game is running in full-screen mode, the resolution currently used
    in the system will be the one used by Unity. You can uncheck this and set your
    desired resolution.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率和演示|默认为本机分辨率**：勾选此项并且游戏在全屏模式下运行时，Unity将使用系统当前使用的分辨率。您可以取消选中此项并设置所需的分辨率。'
- en: '**Splash Image:** Settings about the splash image the game will show after
    loading for the first time.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动图像：**关于游戏在首次加载后显示的启动图像的设置。'
- en: '**Splash Image | Show Splash Screen**: This will enable a Unity splash screen
    that will display logos as an introduction to the game. If you have the Unity
    Pro license, you can uncheck this to create your custom splash screen, if you
    want to.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动图像|显示启动画面**：这将启用Unity启动画面，作为游戏的介绍显示标志。如果您有Unity Pro许可证，您可以取消选中此项，以创建自定义的启动画面。'
- en: '**Splash Image | Logos List**: Here, you can add a set of images that Unity
    will display when launching the game. If you are using Unity for free, you are
    forced to have the Unity logo displayed in this list.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动图像|标志列表**：在这里，您可以添加一组图像，Unity将在启动游戏时显示。如果您免费使用Unity，则强制在此列表中显示Unity标志。'
- en: '`All Sequential` to show each logo, one after the other, or to Unity logo Below
    to show your custom introductory logos with the Unity logo always present below
    yours:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`全部顺序`以显示每个标志，一个接一个地显示，或者选择`Unity标志下方`，以显示您的自定义介绍标志，并始终显示Unity标志下方：'
- en: '![Figure 20.3 Player settings'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.3 玩家设置'
- en: '](img/Figure_20.03_B14199.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.03_B14199.jpg)'
- en: Figure 20.3 – Player settings
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.3 – 玩家设置
- en: 'After configuring these settings as you wish, the next step is to do the actual
    build, which can be accomplished by hitting the **Build** button in the **File
    | Build Settings** window. This will ask you to set where you want the build files
    to be created. I recommend you create an empty folder on your desktop to have
    easy access to the result. Be patient—this process can take a while according
    to the size of the project:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置这些设置后，下一步是进行实际构建，可以通过在“文件|构建设置”窗口中点击“构建”按钮来完成。这将要求您设置构建文件的创建位置。我建议您在桌面上创建一个空文件夹，以便轻松访问结果。请耐心等待
    - 根据项目的大小，这个过程可能需要一些时间：
- en: '![Figure 20.4 – Building the game'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.4 – 构建游戏'
- en: '](img/Figure_20.04_B14199.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.04_B14199.jpg)'
- en: Figure 20.4 – Building the game
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.4 – 构建游戏
- en: 'Something that can fail here is having non-build compatible scripts—scripts
    that are intended to be executed only in the editor, mostly editor extensions.
    We haven''t created any of those, so if you have an error message in the console
    after building, similar to the following screenshot, that can happen because of
    some script in some Asset Store package. In that case, just delete the files that
    are shown in the console before the Build Error message. If, by any chance, there
    is one of your scripts there, be sure you don''t have any `using UnityEditor;`
    lines in any of your scripts. That would try to use the Editor namespace, the
    one that is not included in the build compilation to save space in the disk:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能出现的问题是具有非构建兼容脚本 - 仅在编辑器中执行的脚本，主要是编辑器扩展。我们没有创建任何这样的脚本，所以如果构建后在控制台中出现错误消息，类似于以下截图，那可能是因为某个Asset
    Store包中的某个脚本。在这种情况下，只需删除在构建错误消息之前在控制台中显示的文件。如果碰巧有一个您的脚本在其中，请确保您的脚本中没有任何`using
    UnityEditor;`行。这将尝试使用编辑器命名空间，该命名空间不包含在构建编译中以节省磁盘空间：
- en: '![Figure 20.5 – Build errors'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.5 – 构建错误'
- en: '](img/Figure_20.05_B14199.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.05_B14199.jpg)'
- en: Figure 20.5 – Build errors
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.5 – 构建错误
- en: 'And that''s pretty much everything you need to know. You have generated your
    game! Something to take into account is that every file that was created in the
    folder that you specified when building must be shared, not only the executable
    file. The `Data` folder contains all assets and is important to include when sharing
    the game in the case of Windows builds. For Linux and Mac builds, there is just
    one file generated (`x86/x86_64` and `app packages` respectively):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是您需要知道的一切。您已经生成了您的游戏！需要注意的是，在构建时指定的文件夹中创建的每个文件都必须共享，不仅仅是可执行文件。`Data`文件夹包含所有资产，并且在共享Windows构建游戏时包含这些文件是很重要的。对于Linux和Mac构建，只生成一个文件（分别是`x86/x86_64`和`app
    packages`）：
- en: '![Figure 20.6 – A Windows-generated folder'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.6 – 一个由Windows生成的文件夹'
- en: '](img/Figure_20.06_B14199.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.06_B14199.jpg)'
- en: Figure 20.6 – A Windows-generated folder
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.6 – 一个由Windows生成的文件夹
- en: One last piece of advice—pay attention to the **Script Build Only** checkbox
    in the **Build** window. If you changed only code and want to test that change,
    check it and do the build. This will make the process go faster than a regular
    build. Just remember to uncheck this if you changed anything else in the editor
    because those changes won't be included if you have it checked.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个建议 - 注意**构建**窗口中的**仅构建脚本**复选框。如果只更改了代码并希望测试该更改，请勾选它并进行构建。这将使过程比常规构建更快。只需记住，如果您在编辑器中更改了其他内容，请取消选中此项，因为如果您勾选了它，这些更改将不会包含在内。
- en: Now that we have the build, you can test it by double-clicking the executable
    file. Now that you have tried your build, we can discuss how we use the same Debug
    and Profiling tools we used in the editor to test our build.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了，您可以通过双击可执行文件来测试它。现在您已经尝试了您的构建，我们可以讨论如何使用与我们在编辑器中使用的相同的调试和性能分析工具来测试我们的构建。
- en: Debugging the build
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试构建
- en: In an ideal world, the editor and the build will behave the same, but sadly
    that isn't true. The editor is prepared to work in a fast-iteration mode. Code
    and assets have minimum processing prior to being used to make changes often and
    fast, so we can test our game easily. When the game is built, a series of optimizations
    and differences from the editor project will be applied to ensure the best performance
    we can get, but those differences can cause certain parts of the game to behave
    differently, making the profiling data of the player differ from the editor. That's
    why we are going to explore how we can debug and profile our game in the build.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，编辑器和构建将表现相同，但遗憾的是这并不是真的。编辑器准备在快速迭代模式下工作。代码和资源在使用之前经过最少的处理，以便经常快速地进行更改，这样我们就可以轻松测试我们的游戏。当游戏构建完成时，将应用一系列优化和与编辑器项目的差异，以确保我们能够获得最佳性能，但这些差异可能导致游戏的某些部分表现不同，使得玩家的分析数据与编辑器不同。这就是为什么我们要探索如何在构建中调试和分析我们的游戏。
- en: 'In this section, we will examine the following Build Debugging concepts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究以下构建调试概念：
- en: Debugging Code
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试代码
- en: Profiling Performance
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析
- en: Let's start discussing how to debug the code of a build.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始讨论如何调试构建的代码。
- en: Debugging code
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试代码
- en: As player code is compiled differently, we can get errors in the build that
    didn't happen in the editor, and we need to debug it somehow. We have two main
    ways to debug—by printing messages and through breakpoints. So, let's start with
    the first one, messages. If you ran your executable file, you may have noticed
    that there's no console available. It's just the Game view in fullscreen, which
    makes sense; we don't want to distract the user with annoying testing messages.
    Luckily, the messages are still being printed, but in a file, so we can just go
    to that file and look for them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于玩家代码编译方式不同，我们可能会在构建中遇到在编辑器中没有发生的错误，并且我们需要以某种方式进行调试。我们有两种主要的调试方式——通过打印消息和断点。所以，让我们从第一种消息开始。如果你运行了可执行文件，你可能已经注意到没有控制台可用。全屏只有游戏视图，这是有道理的；我们不想用烦人的测试消息来分散用户的注意力。幸运的是，消息仍然被打印出来，但是在一个文件中，所以我们可以去那个文件中查找它们。
- en: 'The location varies according to the operating system. In this list, you can
    find the possible locations:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 位置根据操作系统而变化。在这个列表中，你可以找到可能的位置：
- en: '`~/.config/unity3d/CompanyName/ProductName/Player.log`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.config/unity3d/CompanyName/ProductName/Player.log`'
- en: '`~/Library/Logs/Company Name/Product Name/Player.log`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/Library/Logs/Company Name/Product Name/Player.log`'
- en: '`C:\Users\username\AppData\LocalLow\CompanyName\ProductName\Player.log`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\Users\username\AppData\LocalLow\CompanyName\ProductName\Player.log`'
- en: 'In these paths, you must change `CompanyName` and `ProductName` with the values
    of the properties in the `Player` settings we set before, which are called the
    same, `username` with the name of the Windows account you are executing the game
    in. Consider that the folders might be hidden, so enable the option to show hidden
    files in your operating system:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些路径中，你必须用我们之前设置的`Player`设置属性的值来更改`CompanyName`和`ProductName`，这两个属性的值是相同的，`username`用你在Windows中执行游戏的账户名。请注意，文件夹可能是隐藏的，所以在你的操作系统中启用显示隐藏文件的选项：
- en: '![Figure 20.7 – Showing hidden files'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.7 - 显示隐藏文件'
- en: '](img/Figure_20.07_B14199.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.07_B14199.jpg)'
- en: Figure 20.7 – Showing hidden files
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.7 - 显示隐藏文件
- en: 'Inside that folder, you will find a file called `Player`; you can open it with
    any text editor and look at the messages. In this case, I have used Windows, so
    the directory path looks like the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个文件夹里，你会找到一个名为`Player`的文件；你可以用任何文本编辑器打开它并查看消息。在这种情况下，我使用了Windows，所以目录路径看起来像下面的截图：
- en: '![Figure 20.8 Debugging directory'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.8 调试目录'
- en: '](img/Figure_20.08_B14199.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.08_B14199.jpg)'
- en: Figure 20.8 – Debugging directory
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.8 - 调试目录
- en: 'Aside from downloading any custom package from the Asset Store, there is a
    way to see the messages of the console directly in the game, at least the error
    messages—by creating a development build. This is a special build that allows
    extended debugging and profiling capabilities in exchange for not fully optimizing
    the code as the final build does, but it will be enough for general debugging.
    You can create this kind of build by just checking the **Development Build** checkbox
    in the **File | Build Settings** window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从资产商店下载任何自定义包之外，还有一种方法可以直接在游戏中查看控制台的消息，至少是错误消息——通过创建一个开发构建。这是一个特殊的构建，允许扩展的调试和分析能力，以换取不像最终构建那样完全优化代码，但对于一般调试来说足够了。你可以通过在**文件
    | 构建设置**窗口中勾选**开发构建**复选框来创建这种构建：
- en: '![Figure 20.9 The Development Build checkbox'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.9 开发构建复选框'
- en: '](img/Figure_20.09_B14199.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.09_B14199.jpg)'
- en: Figure 20.9 – The Development Build checkbox
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.9 - 开发构建复选框
- en: Remember that just the error messages will be displayed here, so a little trick
    you can do is to replace the `print` and `Debug.Log` function calls with `Debug.LogError`,
    which will also print the message in the console but with a red icon. Consider
    that this is not a good practice, so limit the usage of this kind of message for
    temporal debugging. For permanent logging, use the log file or find a custom debugging
    console for runtime in the Asset Store.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里只会显示错误消息，所以你可以做一个小技巧，用`Debug.LogError`替换`print`和`Debug.Log`函数调用，这样也会在控制台中打印消息，但会有一个红色图标。请注意，这不是一个好的做法，所以限制使用这种消息进行临时调试。对于永久记录，使用日志文件或在资产商店中找到一个自定义的运行时调试控制台。
- en: 'Remember that for **Development Build** to work you need to build the game
    again; luckily, the first build is the one that takes the most time, and the next
    will be faster. This time, you can just click the **Build and Run** button to
    do the build in the folder in which you did the previous build:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，要使**开发构建**起作用，你需要重新构建游戏；幸运的是，第一次构建需要最长的时间，接下来会更快。这次，你只需点击**构建并运行**按钮，就可以在之前构建的文件夹中进行构建：
- en: '![Figure 20.10 Debugging error messages'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.10 调试错误消息'
- en: '](img/Figure_20.10_B14199.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.10_B14199.jpg)'
- en: Figure 20.10 – Debugging error messages
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.10 - 调试错误消息
- en: 'In the next screenshot, you can see the error being displayed in the runtime:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，您可以看到运行时显示的错误。
- en: '![](img/Figure_20.11_B14199.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_20.11_B14199.jpg)'
- en: Figure 20.11 – Error messages in a development build
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.11 – 开发构建中的错误消息
- en: 'Also, you can use regular breakpoints the same way as we explained in [*Chapter
    13*](B14199_13_Final_SK_ePub.xhtml#_idTextAnchor172)*, Introduction to Unity Scripting
    with C#*. Attaching the IDE to the player, it will show up in the list of targets.
    But for that to work, you must not only check **Development Build** in the Build
    window but also **Script Debugging**. Here, you have an additional option shown
    when that is checked that allows you to pause the entire game until a debugger
    is attached, the one called **Wait for Managed Debugger**. This is useful if you
    want to test something that happens immediately at the beginning and doesn''t
    allow you enough time to attach the debugger:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您也可以像我们在[*第13章*](B14199_13_Final_SK_ePub.xhtml#_idTextAnchor172)*中解释的那样使用常规断点。将IDE附加到玩家上后，它将显示在目标列表中。但是为了使其工作，您不仅需要在构建窗口中勾选**开发构建**，还需要勾选**脚本调试**。在这里，当勾选了**脚本调试**后，会显示一个额外的选项，允许您暂停整个游戏直到调试器附加上，这个选项叫做**等待托管调试器**。如果您想要测试一些立即发生并且不允许您足够时间附加调试器的事情，这将非常有用：
- en: '![Figure 20.12 – Enabling script debugging'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.12 – 启用脚本调试'
- en: '](img/Figure_20.12_B14199.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.12_B14199.jpg)'
- en: Figure 20.12 – Enabling script debugging
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.12 – 启用脚本调试
- en: We have another way to see the messages, but that will require the Profiler
    to work, so let's use this as an excuse to also discuss how to profile the editor.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有另一种方式来查看消息，但这需要性能分析器的工作，所以让我们借此机会讨论如何对编辑器进行性能分析。
- en: Profiling performance
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能分析
- en: We are going to use the same tools as we saw in the previous chapter, but to
    profile the player this time. Luckily, the difference is minimal. As we did in
    the previous section, you need to build the player in **Development** mode, checking
    the **Development Build** checkbox in the Build window, and then the profilers
    should automatically detect it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们将使用与上一章相同的工具来对玩家进行性能分析。幸运的是，差异很小。与上一节一样，您需要在**开发**模式下构建玩家，在构建窗口中勾选**开发构建**复选框，然后性能分析器应该会自动检测到它。
- en: 'Let''s start using the Profiler on the build by doing the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用性能分析器来进行构建，具体操作如下：
- en: Play the game through the build.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过构建来玩游戏。
- en: Switch to Unity using *Alt* + *Tab* (*command* + *tab* on Mac).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Alt* + *Tab*（Mac上为*command* + *tab*）切换到Unity。
- en: Open the Profiler.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开性能分析器。
- en: 'Click the menu that says **Playmode** and select the item that contains **Player**
    in it. Because I have used Windows, it says **WindowsPlayer**:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击菜单中的**播放模式**，选择包含**Player**的项目。因为我使用的是Windows，所以它显示为**WindowsPlayer**：
- en: '![Figure 20.13 Profiling the Player'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.13 对玩家进行性能分析'
- en: '](img/Figure_20.13_B14199.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.13_B14199.jpg)'
- en: Figure 20.13 – Profiling the player
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.13 – 对玩家进行性能分析
- en: Notice that when you click a frame, the game won't stop like in the editor.
    If you want to focus your attention on the frames at a specific moment, you can
    click the record button (the red circle) to make the Profiler stop capturing data,
    so you can analyze the frames captured so far.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您点击一个帧时，游戏不会像在编辑器中那样停止。如果您想要在特定时刻专注于帧，您可以点击记录按钮（红色圆圈）使性能分析器停止捕获数据，这样您就可以分析到目前为止捕获的帧。
- en: 'Also, you can see that when the Profiler is attached to the player, the console
    will also be attached, so you can see the logs directly in Unity. Consider that
    this version requires Unity to be opened, and we cannot expect our friends who
    are testing our game to have it. You might need to click on the **Player** button
    that appears on the **Console** and check **Player Logging** for this to work:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以看到当性能分析器附加到玩家时，控制台也会附加，因此您可以直接在Unity中看到日志。请注意，此版本需要Unity打开，并且我们不能期望测试我们游戏的朋友们也有它。您可能需要点击**控制台**上的**Player**按钮，并勾选**玩家日志记录**才能使其工作：
- en: '![Figure 20.14 Enabling Player Logging after attaching the Profiler'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.14 在附加性能分析器后启用玩家日志记录'
- en: '](img/Figure_20.14_B14199.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.14_B14199.jpg)'
- en: Figure 20.14 – Enabling Player Logging after attaching the Profiler
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.14 – 在附加性能分析器后启用玩家日志记录
- en: 'The Frame Debugger is also enabled to work with the player. You need to click
    the **Editor** button in the Frame Debugger and again, you will see the player
    in the list of possible debugging targets; after selecting it, hit **Enable**
    as usual. Consider that the preview of the Draw Calls won''t be seen in the Game
    view but in the build itself. If you are running the game in full screen mode,
    you might need to switch back and forth between Unity and the build:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 帧调试器也已启用以与玩家一起工作。您需要在帧调试器中点击**编辑器**按钮，然后再次，您将在可能的调试目标列表中看到玩家；选择它后，像往常一样点击**启用**。请注意，绘制调用的预览不会出现在游戏视图中，而是出现在构建本身中。如果您在全屏模式下运行游戏，可能需要在Unity和构建之间来回切换：
- en: '![Figure 20.15 – Debugging the frames of our game''s player'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.15 – 调试游戏玩家的帧'
- en: '](img/Figure_20.15_B14199.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.15_B14199.jpg)'
- en: Figure 20.15 – Debugging the frames of our game's player
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.15 – 调试游戏玩家的帧
- en: 'You may also run the game in **Windowed** mode, setting the **Fullscreen Mode**
    property in the Player settings to **Windowed**, and establishing a default resolution
    that is smaller than your desktop resolution, to have both Unity and the player
    visible:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在**窗口**模式下运行游戏，将**全屏模式**属性设置为**窗口**，并设置一个小于您的桌面分辨率的默认分辨率，以便同时在Unity和玩家中看到：
- en: '![Figure 20.16 – Enabling Windowed mode'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.16 – 启用窗口模式'
- en: '](img/Figure_20.16_B14199.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.16_B14199.jpg)'
- en: Figure 20.16 – Enabling Windowed mode
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.16 – 启用窗口模式
- en: 'Finally, **Memory Profiler** also supports profiling the Player, and as you
    might guess, you can just select the player in the list that is displayed when
    you click the first button of the top bar of the window and then click **Capture
    Player**:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**内存分析器**还支持对玩家进行分析，你可以在窗口顶部的第一个按钮点击时显示的列表中选择玩家，然后点击**捕获玩家**：
- en: '![Figure 20.17 – Taking memory snapshots of the player'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图20.17 – 对玩家进行内存快照'
- en: '](img/Figure_20.17_B14199.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_20.17_B14199.jpg)'
- en: Figure 20.17 – Taking memory snapshots of the player
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图20.17 – 对玩家进行内存快照
- en: And that is it. As you can see, Unity Profilers are designed to be easily integrated
    with the player. If you start to take data from them, you will see the difference
    compared to editor profiling, especially in **Memory Profiler**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。正如你所看到的，Unity Profilers被设计为可以轻松集成到玩家中。如果你开始从中获取数据，你会发现与编辑器分析相比，特别是在**内存分析器**中，会有很大的不同。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to create an executable version of the game and
    properly configure it so you can share it with not only your friends but potentially
    the world! We also discussed how to profile our build; remember that doing that
    will give us more accurate data than profiling the editor, so we can better improve
    the performance of our game.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何创建游戏的可执行版本，并正确配置它，以便你不仅可以与朋友分享，还可以与世界分享！我们还讨论了如何对我们的构建进行分析；记住，这样做将为我们提供比分析编辑器更准确的数据，这样我们就可以更好地提高游戏的性能。
- en: But before doing that, let's discuss some final details. These are not Unity-related
    details, but game-related ones; things you need to consider before and after showing
    your game to people other than yourself or any person that saw your game while
    it was being developed. We will do this in the next chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，让我们讨论一些最后的细节。这些不是Unity相关的细节，而是游戏相关的细节；在向除自己和在游戏开发过程中看到游戏的任何人之外的人展示游戏之前和之后，你需要考虑的事情。我们将在下一章中进行讨论。
