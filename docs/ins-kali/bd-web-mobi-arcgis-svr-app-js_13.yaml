- en: Appendix A. Application Design with ArcGIS Templates and Dojo
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 使用ArcGIS模板和Dojo设计应用程序
- en: One of the most difficult tasks for many web developers when building GIS applications
    is designing and creating the user interface. The ArcGIS API for JavaScript and
    Dojo greatly simplifies this task. Dojo's layout dijits provide a simple, efficient
    way to create application layouts, and Esri provides a number of sample application
    layouts and templates that you can use to get up and running quickly. In this
    appendix, the reader will learn techniques to quickly design the layout of an
    application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多Web开发人员来说，构建GIS应用程序时最困难的任务之一是设计和创建用户界面。ArcGIS JavaScript API和Dojo极大地简化了这项任务。Dojo的布局dijits提供了一种简单高效的方式来创建应用程序布局，并且Esri提供了许多示例应用程序布局和模板，您可以使用这些示例快速启动。在本附录中，读者将学习快速设计应用程序布局的技巧。
- en: The Dojo BorderContainer dijit
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dojo BorderContainer dijit
- en: 'Since the AGIS API for JavaScript is built directly on top of the Dojo JavaScript
    framework, you automatically have access to the user interface Dojo libraries,
    including layout dijits such as `BorderContainer`. The layout dijits are a set
    of user interface elements you can add to an application that give you control
    over the layout of the application. The `BorderContainer` dijit serves primarily
    as a container for other child containers and can be one of these two design types:
    headline or sidebar. You define the design type using the `design` attribute.
    The design type can be either `headline` or `sidebar` and both can be split into
    as many as 5 different regions: `top`, `bottom`, `right`, `left`, and `center`.
    Each region is normally filled by a Dojo layout element. It is also possible to
    nest regions for greater control over the layout of an application. For example,
    you might include a second `BorderContainer` within the `center` region of a master
    `BorderContainer`. Using this second `BorderContainer,` you could then further
    divide the `center` region.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于AGIS JavaScript API直接构建在Dojo JavaScript框架之上，因此您自动可以访问用户界面Dojo库，包括布局dijits，如`BorderContainer`。布局dijits是一组用户界面元素，您可以将其添加到应用程序中，以便对应用程序的布局进行控制。`BorderContainer`
    dijit主要用作其他子容器的容器，并且可以是这两种设计类型之一：标题或侧边栏。您可以使用`design`属性定义设计类型。设计类型可以是`headline`或`sidebar`，并且都可以分为多达5个不同的区域：`top`、`bottom`、`right`、`left`和`center`。每个区域通常由Dojo布局元素填充。还可以嵌套区域，以更好地控制应用程序的布局。例如，您可以在主`BorderContainer`的`center`区域内包含第二个`BorderContainer`。使用这个第二个`BorderContainer`，您可以进一步划分`center`区域。
- en: '![The Dojo BorderContainer dijit](graphics/7965_A1_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Dojo BorderContainer dijit](graphics/7965_A1_1.jpg)'
- en: 'In the following code example, we are defining `design` to be of type `headline`.
    This results in the general configuration that you see in the code, with the `top`
    and `bottom` regions stretching across the entire width of the screen space. In
    this case, you only need to set the `height` property for the `top` and `bottom`
    regions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将`design`定义为`headline`类型。这将导致您在代码中看到的一般配置，`top`和`bottom`区域横跨整个屏幕空间的宽度。在这种情况下，您只需要为`top`和`bottom`区域设置`height`属性：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the following code example, we define `design` as `sidebar`. With the `sidebar`
    design, the `left` and `right` regions expand to take up `100%` of the height
    of the window, sacrificing the area available to the `top` and `bottom` regions.
    In this case, you need to define only the `width` style property as the height
    will always be `100%`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将`design`定义为`sidebar`。使用`sidebar`设计，`left`和`right`区域会扩展以占据窗口高度的`100%`，从而牺牲了`top`和`bottom`区域的可用区域。在这种情况下，您只需要定义`width`样式属性，因为高度将始终为`100%`。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In either case, the center region will conform to fit the amount of space available,
    based on the sizing of the other regions. The following screenshots that you will
    see depict both of the design types available for `BorderContainer`. The first
    shows a `headline` style while the second shows a `sidebar` style.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在任一情况下，中心区域将根据其他区域的大小调整以适应可用的空间。您将看到的以下截图展示了`BorderContainer`可用的两种设计类型。第一种显示了`headline`样式，而第二种显示了`sidebar`样式。
- en: '![The Dojo BorderContainer dijit](graphics/7965_A1_2.jpg)![The Dojo BorderContainer
    dijit](graphics/7965_A1_3.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Dojo BorderContainer dijit](graphics/7965_A1_2.jpg)![Dojo BorderContainer
    dijit](graphics/7965_A1_3.jpg)'
- en: Additional Dojo layout elements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他Dojo布局元素
- en: Each region of `BorderContainer` (top, bottom, left, right, and center) can
    be filled by a Dojo layout element. These elements are `AccordionContainer`, `SplitContainer`,
    `StackContainer`, and `TabContainer`. You can also create a nested set of `BorderContainer`
    objects to further divide the available layout space.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`BorderContainer`的每个区域（顶部、底部、左侧、右侧和中心）都可以由Dojo布局元素填充。这些元素包括`AccordionContainer`、`SplitContainer`、`StackContainer`和`TabContainer`。您还可以创建一组嵌套的`BorderContainer`对象，以进一步划分可用的布局空间。'
- en: Child elements are placed inside a region through the use of the `region` attribute,
    as seen in the following code example. Notice that in the highlighted section,
    the `region` attribute is set to `left`. This will create `ContentPane` in the
    `left` region. `ContentPane` is a very basic layout element and is used as a container
    for other widgets. In this case, it is going to hold `TabContainer` (highlighted),
    which contains additional `ContentPane` objects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`region`属性将子元素放置在区域内，如以下代码示例所示。请注意，在突出显示的部分中，`region`属性设置为`left`。这将在`left`区域创建`ContentPane`。`ContentPane`是一个非常基本的布局元素，用作其他小部件的容器。在这种情况下，它将容纳`TabContainer`（突出显示），其中包含其他`ContentPane`对象。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot illustrates the location and content that was generated
    using `ContentPane` and `TabContainer`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了使用`ContentPane`和`TabContainer`生成的位置和内容：
- en: '![Additional Dojo layout elements](graphics/7965_A1_4.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![其他Dojo布局元素](graphics/7965_A1_4.jpg)'
- en: '`AccordionContainer` holds a set of panes whose titles are visible, but only
    one pane''s content is visible at a time. As the user clicks on a title, the pane
    contents become visible. These are excellent user interface containers that can
    hold a lot of information in a small area.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccordionContainer`包含一组窗格，其标题可见，但一次只有一个窗格的内容可见。当用户点击标题时，窗格内容变得可见。这些是可以在小区域内容纳大量信息的优秀用户界面容器。'
- en: Esri has provided a number of sample layouts that you can use to get started
    with the layout of your application. The help page for the ArcGIS API for JavaScript
    includes a **Samples** tab containing dozens of sample scripts you can use in
    your application including various layout samples. In the next section, you'll
    learn how to integrate one of these sample layouts into your application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Esri提供了许多示例布局，您可以使用这些布局来开始设计应用程序的布局。ArcGIS API for JavaScript的帮助页面包含一个**Samples**选项卡，其中包含数十个示例脚本，您可以在应用程序中使用，包括各种布局示例。在下一节中，您将学习如何将这些示例布局之一集成到您的应用程序中。
- en: Time to practice with sample layouts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习使用示例布局
- en: In this exercise, you will download a sample layout provided by Esri. You'll
    then examine the layout to get a feel of the basic layout elements provided by
    Dojo. Finally, you'll make some changes to the layout.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，您将下载Esri提供的示例布局。然后，您将检查布局，以了解Dojo提供的基本布局元素。最后，您将对布局进行一些更改。
- en: Before starting this exercise, you'll want to make sure that you have access
    to a web server. If you don't have access to a web server or if a web server isn't
    already installed on your computer, you can download and install the open source
    web server Apache ([http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi)).
    Microsoft IIS is another commonly used web server and there are many others that
    you can use as well. For the purpose of this exercise, I will assume that you
    are using the Apache web server.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始此练习之前，您需要确保可以访问Web服务器。如果您无法访问Web服务器，或者计算机上尚未安装Web服务器，您可以下载并安装开源Web服务器Apache（[http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi)）。Microsoft
    IIS是另一个常用的Web服务器，还有许多其他可供选择。在本练习中，我将假设您正在使用Apache Web服务器。
- en: A web server installed on your local computer will be referred to through URL
    as `http://localhost`. This points to the `htdocs` folder under `C:\Program Files\Apache
    Software Foundation\Apache2.2\` if you've installed Apache on a Windows platform.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地计算机上安装的Web服务器将通过URL称为`http://localhost`。如果您在Windows平台上安装了Apache，则指向`C:\Program
    Files\Apache Software Foundation\Apache2.2\`下的`htdocs`文件夹。
- en: On the **Samples** tab of the ArcGIS API for JavaScript site ([https://developers.arcgis.com/en/javascript/jssamples/](https://developers.arcgis.com/en/javascript/jssamples/)),
    search for `Layouts` in the search box to generate a list of available layout
    samples.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ArcGIS API for JavaScript网站的**Samples**选项卡（[https://developers.arcgis.com/en/javascript/jssamples/](https://developers.arcgis.com/en/javascript/jssamples/)）中，在搜索框中搜索`Layouts`以生成可用布局示例的列表。
- en: Scroll down the list of search results until you see the **Layout with left
    pane** sample seen in the following screenshot. Click on this item:![Time to practice
    with sample layouts](graphics/7965_A1_6.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索结果列表中向下滚动，直到看到以下截图中显示的**带有左侧窗格的布局**示例。点击这个项目：![Time to practice with sample
    layouts](graphics/7965_A1_6.jpg)
- en: Click on the **Download as a zip file** link to download the sample.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Download as a zip file**链接下载示例。
- en: Create a new folder in your `htdocs` folder under `C:\Program Files\Apache Software
    Foundation\Apache2.2\` and name it `layout`. Unzip the file that you downloaded
    into this folder. This will create a file called `index.html`, along with the
    `css` and `images` folders.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`C:\Program Files\Apache Software Foundation\Apache2.2\`文件夹下的`htdocs`文件夹中创建一个名为`layout`的新文件夹。将下载的文件解压缩到这个文件夹中。这将创建一个名为`index.html`的文件，以及`css`和`images`文件夹。
- en: Open a web browser and go to the URL `http://localhost/layout/index.html` so
    you can see the current layout. You should see something similar to the following
    screenshot:![Time to practice with sample layouts](graphics/7965_A1_9.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Web浏览器，转到URL`http://localhost/layout/index.html`，以便查看当前布局。您应该看到类似以下截图的内容：![Time
    to practice with sample layouts](graphics/7965_A1_9.jpg)
- en: Open `index.html` in your favorite text or web editor.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜爱的文本或Web编辑器中打开`index.html`。
- en: Scroll to the bottom of the file until you see the `<body>` tag.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到文件底部，直到看到`<body>`标签。
- en: 'The highest level layout container is `BorderContainer`. A `<div>` tag will
    contain `BorderContainer` and all other child layout elements need to be located
    inside this `<div>` tag. Examine the following code. The highlighted section is
    the code used to define our top level `BorderContainer`. Notice that the design
    has been set to `headline`, which means that the top and bottom regions will be
    scrolled across the entire width of the screen:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最高级别的布局容器是`BorderContainer`。一个`<div>`标签将包含`BorderContainer`，所有其他子布局元素都需要位于这个`<div>`标签内。检查以下代码。突出显示的部分是用于定义我们顶级`BorderContainer`的代码。请注意，设计已设置为`headline`，这意味着顶部和底部区域将在整个屏幕宽度上滚动：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Inside `BorderContainer`, you will find several child layout elements defined
    with the `ContentPane` dijit. `ContentPane` is a very generic layout element that
    simply holds either text or additional layout elements, such as `TabContainer`
    or `AccordionContainer`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BorderContainer`内，您将找到使用`ContentPane` dijit定义的几个子布局元素。`ContentPane`是一个非常通用的布局元素，只是包含文本或其他布局元素，例如`TabContainer`或`AccordionContainer`。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Notice that in the previous code example, each `ContentPane` layout element
    has a region that has been designed for each layout element. In this case, we
    have defined all of the available regions, with the exception of the `right` region.
    This is illustrated in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上一个代码示例中，每个`ContentPane`布局元素都有一个为每个布局元素设计的区域。在这种情况下，我们已定义了所有可用区域，除了`right`区域。这在以下截图中有所说明：
- en: '![Time to practice with sample layouts](graphics/7965_A1_7.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Time to practice with sample layouts](graphics/7965_A1_7.jpg)'
- en: Next, examine the following highlighted code. The highlighted code defines the
    content for the `left` region. A simple `ContentPane` layout element is defined,
    which as I mentioned previously is a very simple container for other layout elements
    or text. Inside this `ContentPane`, we have created a `TabContainer` layout element
    and assigned two tabs. Each tab is created as `ContentPane`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查下面突出显示的代码。这段代码定义了`left`区域的内容。定义了一个简单的`ContentPane`布局元素，正如我之前提到的，它是其他布局元素或文本的一个非常简单的容器。在这个`ContentPane`中，我们创建了一个`TabContainer`布局元素并分配了两个选项卡。每个选项卡都被创建为`ContentPane`。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A common scenario would be to create a tab container that holds a legend for
    the map, as seen in the following screenshot:![Time to practice with sample layouts](graphics/7965_A1_8.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个常见的情景是创建一个包含地图图例的选项卡容器，如下面的屏幕截图所示：
- en: 'Now that you understand the basic concepts of creating layout elements, you
    can add content for the `right` region. Add the following highlighted code:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经理解了创建布局元素的基本概念，你可以为`right`区域添加内容。添加以下突出显示的代码：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the `css` folder that you extracted earlier in the exercise, there is a file
    called `layout.css`. This contains the styling information for our application.
    Open this file in your text editor.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的练习中提取的`css`文件夹中，有一个名为`layout.css`的文件。这个文件包含了我们应用程序的样式信息。在文本编辑器中打开这个文件。
- en: 'Find the text `#rightPane` as seen in the following code example. Properties
    are defined for the background color, foreground color, border styling, and width
    of the region:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的代码示例中找到文本`#rightPane`。为区域的背景颜色、前景颜色、边框样式和宽度定义了属性：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Recall that in the previous code block that you added, we gave `id` of `rightPane`
    to the `right` region. The CSS section will style our pane by giving it a background
    color (white), foreground color, width, and border.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回想一下，在你添加的上一个代码块中，我们给`right`区域的`id`设置为`rightPane`。CSS部分将通过给它设置背景颜色（白色）、前景颜色、宽度和边框来设置我们的窗格。
- en: Save the file.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: If necessary, open your web browser and reload `http://localhost/layout/index.html`,
    or simply refresh the page if you already have it opened. Now you should see new
    content for the `right` region of the application. Currently, it only holds some
    text as the content, but you could easily add additional content, including user
    interface widgets (dijits). We'll do that in the next step when we add `AccordionContainer`.![Time
    to practice with sample layouts](graphics/7965_A1_10.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，打开你的网络浏览器并重新加载`http://localhost/layout/index.html`，或者如果你已经打开了该页面，只需刷新页面。现在你应该看到应用程序`right`区域的新内容。目前，它只包含一些文本作为内容，但你可以很容易地添加额外的内容，包括用户界面小部件（dijits）。在下一步中，当我们添加`AccordionContainer`时，我们将这样做。
- en: Next, we'll add `AccordionContainer` to the `right` region.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将`AccordionContainer`添加到`right`区域。
- en: 'First, add a reference to the `AccordionContainer` resource, as seen in the
    following highlighted code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，添加对`AccordionContainer`资源的引用，如下面突出显示的代码所示：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add `AccordionContainer` inside `ContentPane` for the `right` region as
    well as the content for each of the panes. The highlighted code below should be
    added to the `ContentPane` you created in step 14:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`right`区域的`ContentPane`中添加`AccordionContainer`以及每个窗格的内容。下面的突出显示的代码应该添加到你在第14步中创建的`ContentPane`中：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save the file.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Refresh your browser to see the new `AccordionContainer` layout element as seen
    in the following screenshot. In this exercise, you learned how to quickly create
    an application layout using Esri sample layouts.![Time to practice with sample
    layouts](graphics/7965_A1_11.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新你的浏览器，看到新的`AccordionContainer`布局元素，如下面的屏幕截图所示。在这个练习中，你学会了如何使用Esri示例布局快速创建应用程序布局。
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Designing and implementing the appearance of a GIS web mapping application is
    often a difficult task for developers. Design and development are two very different
    skill sets. Most people aren't good at both. However, Dojo's layout widgets and
    Esri sample templates make it much easier to build complex designs with very little
    coding. In this appendix, you learned how to use an Esri sample to quickly define
    and build the layout of an application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和实现GIS网络地图应用程序的外观通常是开发人员的一项困难任务。设计和开发是两种非常不同的技能。大多数人在这两方面都不擅长。然而，Dojo的布局小部件和Esri示例模板使得用很少的编码就能更容易地构建复杂的设计。在这个附录中，你学会了如何使用Esri示例快速定义和构建应用程序的布局。
