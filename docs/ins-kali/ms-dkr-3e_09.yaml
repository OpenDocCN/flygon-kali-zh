- en: Docker and Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker和Kubernetes
- en: In this chapter, we will be taking a look at Kubernetes. Like Docker Swarm,
    you can use Kubernetes to create and manage clusters that run your container-based
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下Kubernetes。与Docker Swarm一样，您可以使用Kubernetes来创建和管理运行基于容器的应用程序的集群。
- en: 'The following topics will be covered in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to Kubernetes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes简介
- en: Enabling Kubernetes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用Kubernetes
- en: Using Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kubernetes
- en: Kubernetes and other Docker tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes和其他Docker工具
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Kubernetes within Docker is only supported by Docker for Mac and Docker for
    Windows desktop clients. Like previous chapters, I will be using my preferred
    operating system, which is macOS. As before, some of the supporting commands,
    which will be few and far between, may only apply to macOS.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的Kubernetes仅受Docker for Mac和Docker for Windows桌面客户端支持。与之前的章节一样，我将使用我偏好的操作系统，即macOS。与之前一样，一些支持命令可能只适用于macOS。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：
- en: '[http://bit.ly/2q6xpwl](http://bit.ly/2q6xpwl)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2q6xpwl](http://bit.ly/2q6xpwl)'
- en: An introduction to Kubernetes
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes简介
- en: If you have been thinking about looking at containers, then you would have come
    across Kubernetes at some point on your travels, so before we enable it within
    our Docker desktop installation, let's take a moment to look at where Kubernetes
    came from.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在考虑查看容器，那么您在旅行中某个时候一定会遇到Kubernetes，因此在我们在Docker桌面安装中启用它之前，让我们花点时间看看Kubernetes的来源。
- en: '**Kubernetes** (which is pronounced **koo-ber-net-eez**) originates from the
    Greek name given to a helmsman or captain of a ship. **Kubernetes** (which is
    also known as **K8s**), an open source project, that originated at Google, allows
    you to automate the deployment, management and scaling of your containerized applications.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes**（发音为**koo-ber-net-eez**）源自希腊语，意为船长或船长。**Kubernetes**（也被称为**K8s**）是一个源自谷歌的开源项目，允许您自动化部署、管理和扩展容器化的应用程序。'
- en: A brief history of containers at Google
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌容器的简要历史
- en: Google has been working on Linux container-based solutions for quite a long
    time. It took its first steps in 2006 by working on the Linux kernel feature called
    **Control Groups** (**cgroups**). This feature was merged into the Linux kernel
    in 2008 within release 2.6.24\. The feature allows you to isolate resources, such
    as CPU, RAM, networking, and disc I/O, or one or more processes. Control Groups
    remains a core requirement for Linux containers and is not only used by Docker
    but also other container tools.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌已经在基于Linux容器的解决方案上工作了很长时间。它在2006年首次采取了行动，通过开发名为**控制组**（**cgroups**）的Linux内核功能。这个功能在2008年被合并到了Linux内核的2.6.24版本中。该功能允许您隔离资源，如CPU、RAM、网络和磁盘I/O，或一个或多个进程。控制组仍然是Linux容器的核心要求，不仅被Docker使用，还被其他容器工具使用。
- en: Google next dipped their toe into container waters with a container stack called
    **lmctfy,** which stands for **Let Me Contain That For You**. This was an alternative
    to the **LXC** collection of tools and libraries. It was an open sourced version
    of their own internal tools, which they used to manage containers in their own
    applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌接下来尝试了一个名为**lmctfy**的容器堆栈，代表**Let Me Contain That For You**。这是**LXC**工具和库的替代品。这是他们自己内部工具的开源版本，用于管理他们自己应用程序中的容器。
- en: The next time Google hit the news about their container usage was following
    a talk given by Joe Beda at Gluecon in May 2014\. During the talk, Beda revealed
    that pretty much everything within Google was container based and that they were
    launching around 2 billion containers a week. It was stated that this number did
    not include any long-running containers, meaning that the containers were only
    active for a short amount of time. However, after some quick math, this meant
    that on average Google was launching around 3,000 containers per second!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌下一次因其容器使用而成为新闻焦点是在2014年5月的Gluecon大会上Joe Beda发表讲话之后。在讲话中，Beda透露谷歌几乎所有的东西都是基于容器的，并且他们每周要启动大约20亿个容器。据说这个数字不包括任何长期运行的容器，这意味着这些容器只是短暂活跃。然而，经过一些快速计算，这意味着谷歌平均每秒启动大约3000个容器！
- en: Later in the talk, Beda mentioned that Google was using a scheduler so they
    didn't have to manually manage 2 billion containers a week or even worry about
    where they were launched and, to a lesser extent, each container's availability.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲话的后来，Beda提到谷歌使用调度程序，这样他们就不必手动管理每周20亿个容器，甚至不必担心它们被启动的位置，以及在较小程度上，每个容器的可用性。
- en: Google also published a paper called *Large-scale cluster management at Google
    with Borg*. This paper not only let people outside of Google know the name of
    the scheduler they were using, **Borg**, but it also went into great detail about
    the design decisions they made when designing the scheduler.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌还发表了一篇名为《谷歌的大规模集群管理与博格》的论文。这篇论文不仅让谷歌以外的人知道他们正在使用的调度程序**博格**的名称，还详细介绍了他们在设计调度程序时所做的设计决策。
- en: The paper mentioned that as well as their internal tools, Google was running
    its customer-facing applications, such as Google Docs, Google Mail, and Google
    Search in containers running clusters, which are managed by Borg.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 论文提到，除了他们的内部工具，谷歌还在运行其面向客户的应用程序，如Google文档、Gmail和Google搜索，这些应用程序在由博格管理的容器运行的集群中。
- en: '**Borg** was named after the alien race, the Borg, from the *Star Trek: The
    Next Generation* TV show. In the TV show, the Borg are a race of cybernetic beings
    who''s civilization is based on a hive mind known as the collective. This gives
    them not only the ability to share the same thoughts but also, through a sub-space
    network, ensure that each member of the collective is given guidance and supervision
    from the collective consciousness. I am sure you will agree, the characteristics
    of the Borg race matches that closely of how you would want your cluster of containers
    to run.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**博格**是以《星际迷航：下一代》电视剧中的外星种族博格而命名的。在电视剧中，博格是一种基于集体意识的网络的赛博人类，使他们不仅能够共享相同的思想，还能通过次空间网络确保集体意识对每个成员进行指导和监督。我相信你会同意，博格种族的特征与你希望你的容器集群运行的方式非常相似。'
- en: Borg was running within Google for several years and it was eventually replaced
    by a more modern scheduler called **Omega.** It was around this time that Google
    announced it that it would be taking some of the core functionality of Borg and
    reproducing it as a new open source project. This project, known internally as
    **Seven**, was worked on by several of the core contributors to Borg. Its aim
    was to create a friendlier version of Borg which wasn't closely tied into Google's
    own internal procedures and ways of working.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 博格在谷歌内部运行了数年，最终被一种更现代的调度程序**Omega**所取代。大约在这个时候，谷歌宣布他们将采取博格的一些核心功能，并将其复制为一个新的开源项目。这个项目在内部被称为**Seven**，由博格的几位核心贡献者共同开发。它的目标是创建一个更友好的博格版本，不再紧密地与谷歌自己的内部程序和工作方式联系在一起。
- en: '**Seven**, which was named after the *Star Trek: Voyager* character, Seven
    of Nine, who was a Borg that broke away from the collective, would eventually
    be named **Kubernetes** by the time of its first public commit.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Seven**，以*星际迷航：航海家号*中的角色Seven of Nine命名，她是一个从集体中脱离出来的博格，最终在首次公开提交时被命名为**Kubernetes**。'
- en: An overview of Kubernetes
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes概述
- en: So, now we now know how Kubernetes came to be, we can dig a little deeper into
    what Kubernetes is. The bulk of the project, 88.5% to be precise, is written in
    **Go**, which should come as no surprise as Go is a programming language that
    was developed internally at Google before it was open sourced in 2011\. The rest
    of the project files are made up of Python and Shell helper scripts and HTML documentation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Kubernetes的由来，我们可以深入了解一下Kubernetes是什么。项目的大部分，精确地说是88.5%，是用**Go**语言编写的，这一点应该不足为奇，因为Go是一种在2011年开源之前在Google内部开发的编程语言。项目文件的其余部分由Python和Shell辅助脚本以及HTML文档组成。
- en: A typical Kubernetes cluster is made up of servers that take on either a master
    or node role. You can also run a standalone installation that takes on both roles.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的Kubernetes集群由承担主节点或节点角色的服务器组成。您也可以运行一个承担两种角色的独立安装。
- en: The master role is where the magic happens and it is the brains of the cluster.
    It is responsible for making decisions on where pods are launched and for monitoring
    the health of both the cluster itself and also the pods running within the cluster.
    We will discuss pods once we have finished looking at the two roles.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 主节点是魔术发生的地方，也是集群的大脑。它负责决定Pod的启动位置，并监视集群本身和集群内运行的Pod的健康状况。我们在讨论完这两个角色后会讨论Pod。
- en: 'Typically, the core components that are deployed to a host that has been given
    the role of a master are:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，部署到被赋予主节点角色的主机上的核心组件有：
- en: '`kube-apiserver`: This component exposes the main Kubernetes API. It is designed
    to horizontally scale, which means that you can keep adding more instances of
    it to make your cluster highly available.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-apiserver：这个组件暴露了主要的Kubernetes API。它被设计为水平扩展，这意味着您可以不断添加更多的实例来使您的集群高度可用。
- en: '`etcd`: This is a highly available consistent key-value store. It is used to
    store the state of the cluster.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd：这是一个高可用的一致性键值存储。它用于存储集群的状态。
- en: '`kube-scheduler`: This component is responsible for making the decisions on
    where pods are launched.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-scheduler：这个组件负责决定Pod的启动位置。
- en: '`kube-controller-manager`**:** This component runs controllers. These controllers
    have several functions within Kubernetes, such as monitoring the nodes, keeping
    an eye on the replication, managing the endpoints, and generating service accounts
    and tokens.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-controller-manager：这个组件运行控制器。这些控制器在Kubernetes中有多个功能，比如监视节点、关注复制、管理端点，以及生成服务账户和令牌。
- en: '`cloud-controller-manager`: This component takes on the management of the various
    controllers, which interact with third-party clouds to launch and configure supporting
    services.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cloud-controller-manager：这个组件负责管理各种控制器，这些控制器与第三方云进行交互，启动和配置支持服务。
- en: 'Now that we have our management components covered, we need to discuss what
    they are managing. A node is made up of the following components:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了管理组件，我们需要讨论它们在管理什么。一个节点由以下组件组成：
- en: '`kubelet`: This agent runs on each node within the cluster and it is the means
    by which the managers interact with the nodes. It is also responsible for managing
    the pods.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubelet：这个代理程序在集群中的每个节点上运行，是管理者与节点交互的手段。它还负责管理Pod。
- en: '`kube-proxy`: This component manages all of the routing of requests and traffic
    for both the node and also the pods.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：这个组件管理节点和pod的所有请求和流量的路由。'
- en: '`container runtime`: This could be Docker RKT or any other OCI-compliant runtime.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`容器运行时`：这可以是Docker RKT或任何其他符合OCI标准的运行时。'
- en: You may have noticed that I have not mentioned containers much so far. This
    is because Kubernetes doesn't actually directly interact with your containers;
    instead, it communicates with a pod. Think of a pod as a complete application;
    a little like when we looked at launching an application made up of multiple containers
    using Docker Compose.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可能已经注意到我并没有提到容器。这是因为Kubernetes实际上并不直接与您的容器交互；相反，它与一个pod进行通信。将pod视为一个完整的应用程序；有点像我们使用Docker
    Compose启动由多个容器组成的应用程序时的情况。
- en: Kubernetes and Docker
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes和Docker
- en: Kubernetes was originally seen as a competitive technology to Docker Swarm,
    Docker's own clustering technology. However, over the last few years, Kubernetes
    has emerged as pretty much the de facto standard for container orchestration.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Kubernetes被视为Docker Swarm的竞争技术，Docker自己的集群技术。然而，在过去几年中，Kubernetes已经几乎成为容器编排的事实标准。
- en: 'All of the major cloud providers provide Kubernetes-as-a-Service. We have the
    following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所有主要的云提供商都提供Kubernetes即服务。我们有以下内容：
- en: 'Google Cloud: **Google Kubernetes Engine** (**GKE**)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌云：谷歌Kubernetes引擎（GKE）
- en: 'Microsoft Azure: **Azure Kubernetes Service** (**AKS**)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Azure：Azure Kubernetes服务（AKS）
- en: 'Amazon Web Services: Amazon **Elastic Container Service for Kubernetes** (**EKS**)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务：亚马逊弹性Kubernetes容器服务（EKS）
- en: 'IBM: IBM Cloud Kubernetes Service'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM：IBM云Kubernetes服务
- en: 'Oracle Cloud: Oracle Container Engine for Kubernetes'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲骨文云：甲骨文Kubernetes容器引擎
- en: 'DigitalOcean: Kubernetes on DigitalOcean'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DigitalOcean：DigitalOcean上的Kubernetes
- en: On the face of it, all of the major players supporting Kubernetes may not seem
    like that big a deal. However, consider that we now know a consistent way of deploying
    our containerized applications across multiple platforms. Traditionally, these
    platforms have been walled gardens and have very different ways of interacting
    with them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，所有主要支持Kubernetes的参与者可能看起来并不像是一件大事。然而，请考虑我们现在知道了一种在多个平台上部署我们的容器化应用程序的一致方式。传统上，这些平台一直是封闭的花园，并且与它们互动的方式非常不同。
- en: While Docker's announcement in October 2017 at DockerCon Europe initially came
    as a surprise, once the dust settled the announcement made perfect sense. Providing
    developers with an environment where they could work on their applications locally
    using Docker for Mac and Docker for Windows, and then using Docker Enterprise
    Edition to deploy and manage their own Kubernetes clusters, or even use one of
    the cloud services mentioned previously, fits in with the trying to solve the
    "works on my machine" problem we discussed in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)*, Docker
    Overview*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Docker在2017年10月的DockerCon Europe上的宣布最初令人惊讶，但一旦尘埃落定，这一宣布就变得非常合理。为开发人员提供一个环境，在这个环境中他们可以在本地使用Docker
    for Mac和Docker for Windows工作，然后使用Docker企业版来部署和管理他们自己的Kubernetes集群，或者甚至使用之前提到的云服务之一，这符合我们在[第1章]中讨论的解决“在我的机器上可以运行”的问题，Docker概述。
- en: Let's now take a look at how you can enable support in the Docker software and
    get stuck in with using it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何在Docker软件中启用支持并开始使用它。
- en: Enabling Kubernetes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Kubernetes
- en: 'Docker has made the installation process extremely simple. All you need to
    do to enable Kubernetes support is open Preferences and click on the Kubernetes
    tab:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已经使安装过程变得非常简单。要启用Kubernetes支持，您只需打开首选项，然后点击Kubernetes选项卡：
- en: '![](Images/f8afeef8-84b7-4a46-9736-c66e4c55fad1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f8afeef8-84b7-4a46-9736-c66e4c55fad1.png)'
- en: 'As you can see, there are two main options. Tick the **Enable Kubernetes**
    box and then select **Kubernetes** as the default orchestrator. Leave **Show systems
    containers** unticked for now; we look at this in a little more detail once we
    have enabled the service. Clicking **Apply** will pop up the following message:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有两个主要选项。选中**启用Kubernetes**框，然后选择**Kubernetes**作为默认编排器。暂时不要选中**显示系统容器**；我们在启用服务后会更详细地看一下这个。点击**应用**将弹出以下消息：
- en: '![](Images/05f430c4-01bf-4762-b57b-73baa62a256c.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/05f430c4-01bf-4762-b57b-73baa62a256c.png)'
- en: 'Hitting the **Install** button will download the required containers needed
    to enable Kubernetes support on your Docker installation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**安装**按钮将下载所需的容器，以启用Docker安装上的Kubernetes支持：
- en: '![](Images/da563414-8ffb-4c6c-80a8-b6ddd796ef84.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/da563414-8ffb-4c6c-80a8-b6ddd796ef84.png)'
- en: 'As mentioned in the first dialogue box, it will take a short while for Docker
    to download, configure, and launch the cluster. Once complete, you should see
    a green dot next to Kubernetes is running:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如在第一个对话框中提到的，Docker将需要一段时间来下载、配置和启动集群。完成后，你应该看到**Kubernetes正在运行**旁边有一个绿点：
- en: '![](Images/50d81853-7da1-42ac-bbb2-bff9d816bda9.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/50d81853-7da1-42ac-bbb2-bff9d816bda9.png)'
- en: 'Open a Terminal and run the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should show you that there is nothing out of the ordinary running. Run
    the following command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示没有异常运行。运行以下命令：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This should show you a list of Kubernetes-related images:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示一个与Kubernetes相关的图像列表：
- en: '`docker/kube-compose-controller`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker/kube-compose-controller`'
- en: '`docker/kube-compose-api-server`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker/kube-compose-api-server`'
- en: '`k8s.gcr.io/kube-proxy-amd64`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/kube-proxy-amd64`'
- en: '`k8s.gcr.io/kube-scheduler-amd64`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/kube-scheduler-amd64`'
- en: '`k8s.gcr.io/kube-apiserver-amd64`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/kube-apiserver-amd64`'
- en: '`k8s.gcr.io/kube-controller-manager-amd64`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/kube-controller-manager-amd64`'
- en: '`k8s.gcr.io/etcd-amd64`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/etcd-amd64`'
- en: '`k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64`'
- en: '`k8s.gcr.io/k8s-dns-sidecar-amd64`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/k8s-dns-sidecar-amd64`'
- en: '`k8s.gcr.io/k8s-dns-kube-dns-amd64`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/k8s-dns-kube-dns-amd64`'
- en: '`k8s.gcr.io/pause-amd64`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k8s.gcr.io/pause-amd64`'
- en: The images are sourced from both Docker and also the official Kubernetes images
    that are available from the Google Container Registry (`k8s.gcr.io`).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像来自Docker和Google容器注册表（`k8s.gcr.io`）上可用的官方Kubernetes图像。
- en: 'As you may have already guessed, ticking the **Show system containers (advanced)** box
    and then running the following command will show you a list of all of the containers
    running that enable the Kubernetes service on your local Docker installation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，选中**显示系统容器（高级）**框，然后运行以下命令将显示在本地Docker安装上启用Kubernetes服务的所有正在运行的容器的列表：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As there is a lot of output when running the preceding command, the following
    screenshot shows just the names of the containers. To do this, I ran the following
    :'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运行上述命令时会产生大量输出，下面的屏幕截图只显示了容器的名称。为了做到这一点，我运行了以下命令：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the command gave me the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令给我以下结果：
- en: '![](Images/1e714f65-62af-41da-8cca-59d3b6cea891.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1e714f65-62af-41da-8cca-59d3b6cea891.png)'
- en: There are 18 running containers, which is why you have the option of hiding
    them. As you can see, nearly all of the components we discussed in the previous
    section are covered as well as a few additional components, which provide the
    integration with Docker. I would recommend unticking the **Show system containers
    box**, as we do not need to see a list of 18 containers running each time we look
    at the running containers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有18个正在运行的容器，这就是为什么你可以选择隐藏它们。正如你所看到的，几乎我们在上一节讨论的所有组件都包括在内，还有一些额外的组件，提供了与Docker的集成。我建议取消选中**显示系统容器**框，因为我们不需要每次查看正在运行的容器时都看到18个容器的列表。
- en: 'The other thing to note at this point is that the Kubernetes menu item now
    has content in it. This menu can be used for switching between Kubernetes clusters.
    As we only have one cluster active at the moment, there is only one listed:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此时需要注意的另一件事是，Kubernetes菜单项现在已经有内容了。这个菜单可以用于在Kubernetes集群之间进行切换。由于我们目前只有一个活动的集群，所以只有一个被列出来：
- en: '![](Images/ebc6ad44-b922-4b56-9512-072df178d34c.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ebc6ad44-b922-4b56-9512-072df178d34c.png)'
- en: Now that we have our local Kubernetes cluster up and running, we can start to
    use it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的本地Kubernetes集群已经运行起来了，我们可以开始使用它了。
- en: Using Kubernetes
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes
- en: Now that we have our Kubernetes cluster up and running on our Docker desktop
    installation, we can start to interact with it. To start with, we are going to
    look at the command line that was installed alongside the Docker desktop component, `kubectl`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Kubernetes集群已经在我们的Docker桌面安装上运行起来了，我们可以开始与之交互了。首先，我们将看一下与Docker桌面组件一起安装的命令行`kubectl`。
- en: 'As mentioned, `kubectl` was installed alongside. The following command will
    show some information about the client and also the cluster it is connected to:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`kubectl`是与之一起安装的。以下命令将显示有关客户端以及连接到的集群的一些信息：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](Images/5005937f-00f6-4be5-a2a8-06ddbfdb23d1.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5005937f-00f6-4be5-a2a8-06ddbfdb23d1.png)'
- en: 'Next, we can run the following to see if `kubectl` can see our node:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以运行以下命令来查看`kubectl`是否能够看到我们的节点：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](Images/05607ef3-a64a-4c33-96bf-8ead71987a7b.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/05607ef3-a64a-4c33-96bf-8ead71987a7b.png)'
- en: 'Now that we have our client interacting with our node, we can view the `namespaces`
    that are configured by default within Kubernetes by running the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的客户端正在与我们的节点进行交互，我们可以通过运行以下命令查看Kubernetes默认配置的`namespaces`：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then we can view the `pods` within a namespace with the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用以下命令查看命名空间内的`pods`：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](Images/f5f27507-e03d-458a-aca5-341fdda41a14.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f5f27507-e03d-458a-aca5-341fdda41a14.png)'
- en: Namespaces within Kubernetes are a great way of isolating resources within your
    cluster. As you can see from the Terminal output, there are four namespaces within
    our cluster. There is the `default` namespace, which is typically empty. There
    are two namespaces for the main Kubernetes services: `docker` and `kube-system`.
    These contain the pods that make up our cluster and the final namespace, `kube-public`,
    like the default namespace, is empty.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的命名空间是在集群内隔离资源的好方法。从终端输出中可以看到，我们的集群内有四个命名空间。有一个`default`命名空间，通常是空的。有两个主要Kubernetes服务的命名空间：`docker`和`kube-system`。这些包含了构成我们集群的pod，最后一个命名空间`kube-public`，与默认命名空间一样，是空的。
- en: 'Before we launch our own pod, let''s take a quick look at how we can interact
    with the pods we have running, starting with how we can find more information
    about our pod:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动我们自己的pod之前，让我们快速看一下我们如何与正在运行的pod进行交互，首先是如何找到有关我们的pod的更多信息：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command will print out details of the `kube-scheduler-docker-for-desktop`
    pod. You might notice that we had to pass the namespace using the `--namespace`
    flag. If we didn't, then `kubectl` would default to the default namespace where
    there isn't a pod called `kube-scheduler-docker-for-desktop` running.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将打印出`kube-scheduler-docker-for-desktop` pod的详细信息。您可能注意到我们必须使用`--namespace`标志传递命名空间。如果我们不这样做，那么`kubectl`将默认到默认命名空间，那里没有名为`kube-scheduler-docker-for-desktop`的pod在运行。
- en: 'The full output of the command is shown here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的完整输出如下：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, there is a lot of information about the pod, including a list
    of containers; we only have one called `kube-scheduler`. We can see the container
    ID, the image used, the flags the container was launched with, and also the data
    used by the Kubernetes scheduler to launch and maintain the pod.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，关于pod有很多信息，包括容器列表；我们只有一个叫做`kube-scheduler`。我们可以看到容器ID，使用的镜像，容器启动时使用的标志，以及Kubernetes调度器用于启动和维护pod的数据。
- en: 'Now that we know a container name, we can start to interact with it. For example,
    running the following command will print the logs for our one container:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了容器名称，我们可以开始与其交互。例如，运行以下命令将打印我们一个容器的日志：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](Images/f153d87e-fd6b-40e0-a0c2-bd142037ee33.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f153d87e-fd6b-40e0-a0c2-bd142037ee33.png)'
- en: 'Running the following command would fetch the `logs` for each container in
    the pod:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将获取pod中每个容器的`logs`：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Like Docker, you can also execute commands on your pods and containers. For
    example, the following commands will run the `uname -a` command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与Docker一样，您还可以在您的pod和容器上执行命令。例如，以下命令将运行`uname -a`命令：
- en: Please ensure you add the space after the `--` in the following two commands.
    Failing to do so will result in errors.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在以下两个命令后添加`--`后面的空格。如果未这样做，将导致错误。
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Again, we have the option of running the command on a named container or across
    all containers within the pod:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以选择在命名容器上运行命令，或者跨pod内的所有容器运行命令：
- en: '![](Images/8ea74f60-7de1-418a-8bcb-7499fa8c9d1b.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8ea74f60-7de1-418a-8bcb-7499fa8c9d1b.png)'
- en: 'Let''s find out a little more about our Kubernetes cluster by installing and
    logging into the web-based dashboard. While this does not ship with Docker by
    default, installing it using the definition file provided by the Kubernetes project
    is simple. We just need to run the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装并登录到基于Web的仪表板，让我们对Kubernetes集群有更多了解。虽然这不是Docker的默认功能，但使用Kubernetes项目提供的定义文件进行安装非常简单。我们只需要运行以下命令：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](Images/20527938-448d-441a-bee4-90a1f5db0896.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20527938-448d-441a-bee4-90a1f5db0896.png)'
- en: 'Once the services and deployments have been created, it will take a few minutes
    to launch. You can check on the status by running the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务和部署已经创建，启动需要几分钟。您可以通过运行以下命令来检查状态：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once your output looks like the following, your dashboard should be installed
    and ready:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的输出看起来像以下内容，您的仪表板应该已经安装并准备就绪：
- en: '![](Images/1f52f317-e1e9-4018-ac30-f73aa6933cfa.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1f52f317-e1e9-4018-ac30-f73aa6933cfa.png)'
- en: 'Now that we have our dashboard running, we will find a way to access it. We
    can do this using the inbuilt proxy service in `kubectl`. Just run the following
    command to start it up:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的仪表板正在运行，我们将找到一种访问它的方法。我们可以使用`kubectl`中的内置代理服务来实现。只需运行以下命令即可启动：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](Images/315bb32e-3b82-4a00-b8af-91af2501ccd3.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/315bb32e-3b82-4a00-b8af-91af2501ccd3.png)'
- en: 'This will start the proxy and opening your browser and going to `http://127.0.0.1:8001/version/`
    will show you some information on your cluster:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动代理，并打开您的浏览器并转到`http://127.0.0.1:8001/version/`将显示有关您的集群的一些信息：
- en: '![](Images/6750c373-4a9e-4a2f-a7e0-b391af94acba.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6750c373-4a9e-4a2f-a7e0-b391af94acba.png)'
- en: However, it's the dashboard we want to see. This can be accessed at `http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们想要看到的是仪表板。可以通过以下网址访问：`http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/`。
- en: 'You will be greeted with a login screen when you first open the URL in your
    browser. As we are accessing the dashboard through the proxy, we can just press
    the **SKIP** button:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次在浏览器中打开URL时，将会看到登录屏幕。由于我们是通过代理访问仪表板，因此我们只需按下**SKIP**按钮：
- en: '**![](Images/ddd8e4aa-30aa-4377-a812-693beee5b196.png)**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](Images/ddd8e4aa-30aa-4377-a812-693beee5b196.png)**'
- en: 'Once logged in, you will be able to see quite a bit of information on your
    cluster:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您将能够看到有关您的集群的大量信息：
- en: '![](Images/5f146b4a-3f88-4d8f-9c2b-eec242281cbe.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5f146b4a-3f88-4d8f-9c2b-eec242281cbe.png)'
- en: Now that we have our cluster up and running, we can now look at launching a
    few sample applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的集群已经启动运行，我们现在可以看一下启动一些示例应用程序。
- en: Kubernetes and other Docker tools
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes和其他Docker工具
- en: 'When we enabled Kubernetes, we selected Kubernetes as the default orchestrator
    for Docker stack commands. In the previous chapter, the Docker `stack` command
    would launch our Docker Compose files in Docker Swarm. The Docker Compose we used
    looked like the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启用Kubernetes时，我们选择了Kubernetes作为Docker堆栈命令的默认编排器。在上一章中，Docker `stack`命令将在Docker
    Swarm中启动我们的Docker Compose文件。我们使用的Docker Compose看起来像下面这样：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Before we launch the application on Kubernetes, we need to make a slight adjustment
    and remove the placement, which leaves our file looking like the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes上启动应用程序之前，我们需要进行一些微调并删除放置，这样我们的文件看起来像下面这样：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the file has been edited, running the following command will launch the
    `stack`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文件后，运行以下命令将启动`stack`：
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](Images/1a9cfbdc-f787-4737-b52f-c5197eec5a00.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1a9cfbdc-f787-4737-b52f-c5197eec5a00.png)'
- en: 'As you can see, Docker waits until the stack is available before returning
    you to your prompt. We can also run the same commands we used to view some information
    about our stack as we did when we launched our stack on Docker Swarm:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Docker会等到堆栈可用后才将您返回到提示符。我们还可以运行与我们在Docker Swarm上启动堆栈时使用的相同命令来查看有关我们的堆栈的一些信息：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](Images/db628bed-b212-4e3a-9ab8-a28cd4264f59.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/db628bed-b212-4e3a-9ab8-a28cd4264f59.png)'
- en: 'We can also see details using `kubectl`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`kubectl`查看详细信息：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](Images/73e1ed2f-01d7-4cb2-82d3-ce93d24c7126.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/73e1ed2f-01d7-4cb2-82d3-ce93d24c7126.png)'
- en: You may have noticed that this time we did not need to provide a namespace.
    This is because our stack was launched in the default namespace. Also, when the
    services were listed, a ClusterIP and LoadBalancer are listed for the cluster
    stack. Looking at the LoadBalancer, you can see that the external IP is `localhost`
    and that the port is `80`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，这一次我们不需要提供命名空间。这是因为我们的堆栈是在默认命名空间中启动的。此外，在列出服务时，为集群堆栈列出了ClusterIP和LoadBalancer。查看LoadBalancer，您会看到外部IP是`localhost`，端口是`80`。
- en: 'Opening [http://localhost/](http://localhost/) in our browser shows the application:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的浏览器中打开[http://localhost/](http://localhost/)显示应用程序：
- en: '![](Images/875e57d6-b43c-453c-b980-bdaed5ad4397.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/875e57d6-b43c-453c-b980-bdaed5ad4397.png)'
- en: 'If you still have the dashboard open, you can explore your stack and even open
    a Terminal to one of the containers:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然打开着仪表板，您可以探索您的堆栈，甚至打开一个容器的终端：
- en: '![](Images/8536ae3e-d84c-4df9-b481-2823300abb52.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8536ae3e-d84c-4df9-b481-2823300abb52.png)'
- en: 'You can remove the `stack` by running the following command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来删除`stack`：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: One last thing—you may be thinking to yourself, great, I can run my Docker Compose
    files anywhere on a Kubernetes cluster. Well, that is not strictly true. As mentioned,
    when we first enabled Kubernetes, there are some Docker only components launched.
    These are there to make sure that Docker is integrated as tightly as possible.
    However, as these components won't exist in non-Docker managed clusters, then
    you won't be back to use the `docker stack` commands.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件事 - 您可能会想，太好了，我可以在Kubernetes集群的任何地方运行我的Docker Compose文件。嗯，这并不完全正确。如前所述，当我们首次启用Kubernetes时，会启动一些仅适用于Docker的组件。这些组件旨在尽可能紧密地集成Docker。但是，由于这些组件在非Docker管理的集群中不存在，因此您将无法再使用`docker
    stack`命令。
- en: All is not lost though. There is a tool called **Kompose** provided as part
    of the Kubernetes project, which can take a Docker Compose file and convert it
    on the fly to Kubernetes definition files.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，还有一个工具叫做**Kompose**，它是Kubernetes项目的一部分，可以接受Docker Compose文件并将其即时转换为Kubernetes定义文件。
- en: 'To install Kompose on macOS, run the following commands:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上安装Kompose，请运行以下命令：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Windows 10 users can use Chocolatey to install the binary:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10用户可以使用Chocolatey来安装二进制文件：
- en: '**Chocolatey** is a command-line based package manager that can be used to
    install various software packages on your Windows-based machine, similar to how
    you can use `yum` or `apt-get` on Linux machines or `brew` on macOS.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chocolatey**是一个基于命令行的软件包管理器，可用于在基于Windows的机器上安装各种软件包，类似于在Linux机器上使用`yum`或`apt-get`，或在macOS上使用`brew`。'
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, Linux users can run the following commands:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Linux用户可以运行以下命令：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once installed, you can launch your Docker Compose file by running the following
    command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过运行以下命令启动您的Docker Compose文件：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will get something like the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到类似以下输出：
- en: '![](Images/90c65ca1-44e3-419b-9896-98dc7f5d225f.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/90c65ca1-44e3-419b-9896-98dc7f5d225f.png)'
- en: 'As suggested by the output, running the following command will give you details
    on the service and pod we just launched:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所建议的，运行以下命令将为您提供刚刚启动的服务和pod的详细信息：
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](Images/7dc83cb6-26c1-4e87-a584-802608ede4c7.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7dc83cb6-26c1-4e87-a584-802608ede4c7.png)'
- en: 'You can remove the services and pods by running the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来删除服务和pod：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](Images/d3076f4e-b5ad-4eda-8243-150499252542.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d3076f4e-b5ad-4eda-8243-150499252542.png)'
- en: 'While you can use `kompose up` and `kompose down`, I would recommend generating
    the Kubernetes definition files and tweaking them as needed. To do this simply
    run the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用`kompose up`和`kompose down`，但我建议生成Kubernetes定义文件并根据需要进行调整。要做到这一点，只需运行以下命令：
- en: '[PRE28]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will generate the pod and service files:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成pod和service文件：
- en: '![](Images/1a7d963d-ee6f-40e4-935b-f52c9a15467f.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/1a7d963d-ee6f-40e4-935b-f52c9a15467f.png)'
- en: 'You will be able to see quite a difference between the Docker Compose file
    and the two files generated. The `cluster-pod.yaml` file looks like the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到Docker Compose文件和生成的两个文件之间有很大的区别。`cluster-pod.yaml`文件如下所示：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `cluster-service.yaml` file looks like the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`cluster-service.yaml`文件如下所示：'
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can then launch these files by running the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过运行以下命令来启动这些文件：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](Images/4909293e-096a-4729-9f2c-2af7c39e8d52.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4909293e-096a-4729-9f2c-2af7c39e8d52.png)'
- en: 'To remove the cluster pod and service, we just need to run the following command:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 删除集群pod和服务，我们只需要运行以下命令：
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: While Kubernetes will be popping up in upcoming chapters, you may want to disable
    the Kubernetes integration within your Docker desktop installation as it does
    add a slight overhead when it is idle. To do this, just untick **Enable Kubernetes**.
    When you click **Apply**, Docker will stop all the containers it needed for running
    Kubernetes; it won't, however, remove the images so that when you re-enable it,
    it doesn't take as long.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Kubernetes将在接下来的章节中出现，您可能希望在Docker桌面安装中禁用Kubernetes集成，因为它在空闲时会增加一些开销。要做到这一点，只需取消选中**启用Kubernetes**。单击**应用**后，Docker将停止运行Kubernetes所需的所有容器；但它不会删除镜像，因此当您重新启用它时，不会花费太长时间。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at Kubernetes from the point of view of Docker desktop
    software. There is a lot more to Kubernetes than we have covered in this chapter,
    so please don't think this is all there is. After discussing the origins of Kubernetes,
    we looked at how you can enable it on your local machine using Docker for Mac
    or Docker for Windows.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从Docker桌面软件的角度看了Kubernetes。Kubernetes比我们在本章中介绍的要复杂得多，所以请不要认为这就是全部。在讨论了Kubernetes的起源之后，我们看了如何使用Docker
    for Mac或Docker for Windows在本地机器上启用它。
- en: We then discussed some basic usage of `kubectl` before looking at running how
    we can use `docker stack` commands to launch our applications as we did for Docker
    Swarm.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们讨论了一些`kubectl`的基本用法，然后看了如何使用`docker stack`命令来启动我们的应用程序，就像我们为Docker Swarm做的那样。
- en: At the end of the chapter, we discussed Kompose, which is a tool under the Kubernetes
    project. It helps you convert your Docker Compose files for use with Kubernetes,
    allowing you to get a head start on moving your applications to pure Kubernetes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章末尾，我们讨论了Kompose，这是Kubernetes项目下的一个工具。它可以帮助您将Docker Compose文件转换为Kubernetes可用，从而让您提前开始将应用程序迁移到纯Kubernetes。
- en: In the next chapter, we are going to take a look at Docker on public clouds,
    such as Amazon Web Services, along with briefly revisiting Kubernetes.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看在公共云上使用Docker，比如亚马逊网络服务，以及简要回顾Kubernetes。
- en: Questions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: When **Show system containers (advanced)** is unticked, you
    cannot see the images used to launch Kubernetes.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真或假：当未选中**显示系统容器（高级）**时，您无法看到用于启动Kubernetes的镜像。
- en: Which of the four namespaces hosts the containers used to run Kubernetes and
    enable support within Docker?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个命名空间中的哪一个托管了用于在Docker中运行Kubernetes并支持的容器？
- en: Which command would you run to find out details about a container running in
    a pod?
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将运行哪个命令来查找运行在pod中的容器的详细信息？
- en: Which command would you use to launch a Kubernetes definition YAML file?
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将使用哪个命令来启动Kubernetes定义的YAML文件？
- en: Typically, which port does the command `kubectl` proxy open on your local machine?
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，命令`kubectl`代理在本地机器上打开哪个端口？
- en: What was the original name of Google container orchestration platform?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google容器编排平台的原始名称是什么？
- en: Further reading
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Some of the Google tools, presentations, and white papers mentioned at the
    start of the chapter can be found at:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头提到的一些Google工具、演示文稿和白皮书可以在以下位置找到：
- en: cgroups: [http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'cgroups: [http://man7.org/linux/man-pages/man7/cgroups.7.html](http://man7.org/linux/man-pages/man7/cgroups.7.html)'
- en: lmctfy:[ https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lmctfy:[ https://github.com/google/lmctfy/](https://github.com/google/lmctfy/)
- en: Containers at Scale, Joe Beda's slides from GluCon: [https://pdfs.semanticscholar.org/presentation/4df0/b2bcd39b7757867b1ead3009a628e07d8b57.pdf](https://pdfs.semanticscholar.org/presentation/4df0/b2bcd39b7757867b1ead3009a628e07d8b57.pdf)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Borg中的大规模集群管理：[https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
- en: Large-scale cluster management at Google with Borg: [https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Borg中的大规模集群管理：[https://ai.google/research/pubs/pub43438](https://ai.google/research/pubs/pub43438)
- en: LXC - [https://linuxcontainers.org/](https://linuxcontainers.org/)
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LXC - [https://linuxcontainers.org/](https://linuxcontainers.org/)
- en: 'You can find details on the cloud services mentioned in the chapter at:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章中提到的云服务的详细信息。
- en: Google Kubernetes Engine (GKE): [https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Kubernetes Engine (GKE): [https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)'
- en: Azure Kubernetes Service (AKS): [https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Kubernetes 服务 (AKS): [https://azure.microsoft.com/en-gb/services/kubernetes-service/](https://azure.microsoft.com/en-gb/services/kubernetes-service/)'
- en: Amazon Elastic Container Service for Kubernetes (Amazon EKS): [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '亚马逊弹性容器服务 for Kubernetes (Amazon EKS): [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)'
- en: IBM Cloud Kubernetes Service: [https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IBM 云 Kubernetes 服务: [https://www.ibm.com/cloud/container-service](https://www.ibm.com/cloud/container-service)'
- en: Oracle Container Engine for Kubernetes: [https://cloud.oracle.com/containers/kubernetes-engine](https://cloud.oracle.com/containers/kubernetes-engine)
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Oracle 容器引擎 for Kubernetes: [https://cloud.oracle.com/containers/kubernetes-engine](https://cloud.oracle.com/containers/kubernetes-engine)'
- en: Kubernetes on DigitalOcean: [https://www.digitalocean.com/products/kubernetes/](https://www.digitalocean.com/products/kubernetes/)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DigitalOcean 上的 Kubernetes: [https://www.digitalocean.com/products/kubernetes/](https://www.digitalocean.com/products/kubernetes/)'
- en: 'You can find Docker''s announcements about Kubernetes support at:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下找到 Docker 关于 Kubernetes 支持的公告：
- en: Kubernetes for Docker Enterprise announcement: [https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/](https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/)
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Enterprise 宣布支持 Kubernetes：[https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/](https://blog.docker.com/2017/10/docker-enterprise-edition-kubernetes/)
- en: Kubernetes makes the stable release:[ https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/](https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 发布稳定版本：[ https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/](https://blog.docker.com/2018/07/kubernetes-is-now-available-in-docker-desktop-stable-channel/)
- en: 'Finally, the home page for Kompose can be found at:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Kompose 的主页可以在以下找到：
- en: Kompose - [http://kompose.io/](http://kompose.io/)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kompose - [http://kompose.io/](http://kompose.io/)
