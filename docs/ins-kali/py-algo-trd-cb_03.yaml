- en: Fetching Financial Data
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 获取金融数据
- en: Having financial data handy is essential for carrying out algorithmic trading.
    Financial data can be both static and dynamic in nature. Static financial data
    is data that doesn't change during trading hours. Static data consists of lists
    of financial instruments, the attributes of financial instruments, the circuit
    limits of financial instruments, and the recorded close price of the last trading
    day. Dynamic financial data is data that may change continuously during trading
    hours. Dynamic data consists of market depth, the last traded prices, the time
    and quantity of financial instruments, and the recorded high and low prices of
    the day. This chapter includes recipes on fetching various types of financial
    data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有金融数据对进行算法交易至关重要。金融数据可以是静态的，也可以是动态的。静态金融数据是在交易时间内不会改变的数据。静态数据包括金融工具列表、金融工具属性、金融工具的熔断限制以及上一个交易日的收盘价。动态金融数据是在交易时间内可能不断变化的数据。动态数据包括市场深度、最后交易价格、金融工具的时间和数量，以及当天记录的最高和最低价格。本章包括获取各种类型金融数据的方法。
- en: 'The following is a list of the recipes in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章的方法列表：
- en: Fetching the list of financial instruments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取金融工具列表
- en: Attributes of a financial instrument
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的属性
- en: Expiry of financial instruments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的到期日
- en: Circuit limits of a financial instrument
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的熔断限制
- en: The market depth of a financial instrument
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的市场深度
- en: The total pending buy quantity of a financial instrument
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的总待买数量
- en: The total pending sell quantity of a financial instrument
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的总待卖数量
- en: The total volume traded for the day of a financial instrument
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具当天的总成交量
- en: The last traded price of a financial instrument
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的最后交易价格
- en: The last traded time of a financial instrument
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的最后交易时间
- en: The last traded quantity of a financial instrument
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具的最后交易数量
- en: The recorded open price of the day of a financial instrument
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具当天记录的开盘价
- en: The recorded highest price of the day of a financial instrument
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具当天记录的最高价格
- en: The recorded lowest price of the day of a financial instrument
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具当天记录的最低价格
- en: The recorded close price of the last traded day of a financial instrument
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融工具上一个交易日的收盘价
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need the following to successfully execute the recipes in this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下内容才能成功执行本章的方法：
- en: Python 3.7+
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.7+
- en: The `pyalgotrading` Python package (`$ pip install pyalgotrading`)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyalgotrading` Python包 (`$ pip install pyalgotrading`)'
- en: The latest Jupyter notebook for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最新Jupyter笔记本可以在GitHub上找到：[https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook](https://github.com/PacktPublishing/Python-Algorithmic-Trading-Cookbook)。
- en: The following code will help you set up the broker connection with Zerodha,
    which will be used in all the recipes in this chapter. Please make sure you have
    followed these steps before trying out any recipes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将帮助你与Zerodha建立经纪人连接，这将在本章的所有方法中使用。在尝试任何方法之前，请确保你已经按照这些步骤进行了操作。
- en: The first thing needed for setting up connectivity with the broker is getting
    the API keys. The broker would provide unique keys to each customer, typically
    as an `api-key` and `api-secret` key pair. These API keys are chargeable, usually
    on a monthly subscription basis. You need to get your copy of `api-key` and `api-secret`
    from the broker website before starting this. You can refer to *Appendix I* for
    more details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与经纪人建立连接的第一件事是获取API密钥。经纪人通常会为每个客户提供唯一的密钥，通常是作为`api-key`和`api-secret`密钥对。这些API密钥通常是收费的，通常是按月订阅的方式。在开始之前，你需要从经纪人网站上获取你的`api-key`和`api-secret`的副本。你可以参考*附录I*获取更多细节。
- en: 'Execute the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Import the necessary modules:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的模块：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Get the `api_key` and `api_secret` keys from the broker. These are unique to
    you and will be used by the broker to identify your Demat account:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从经纪人那里获取`api_key`和`api_secret`密钥。这些对你来说是独一无二的，并将被经纪人用来识别你的证券账户：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will get the following output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you are running this for the first time and `kiteconnect` is not installed,
    `pyalgotrading` will automatically install it for you. The final output of *step
    2* will be a link. Click on the link and log in with your Zerodha credentials.
    If the authentication is successful, you will see a link in your browser''s address
    bar similar to this: `https://127.0.0.1/?request_token=<alphanumeric-token>&action=login&status=success`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次运行，并且`kiteconnect`没有安装，`pyalgotrading`将自动为你安装。*步骤2*的最终输出将是一个链接。点击链接并使用你的Zerodha凭据登录。如果认证成功，你将在浏览器的地址栏中看到一个类似于这样的链接：`https://127.0.0.1/?request_token=<alphanumeric-token>&action=login&status=success`。
- en: 'The following is an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个例子：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Copy the alphanumeric-token and paste it in `request_token`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制字母数字令牌并粘贴到`request_token`中：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `broker_connection` instance is now ready to perform API calls.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`broker_connection`实例现在已准备好执行API调用。'
- en: The `pyalgotrading` package supports multiple brokers and provides a connection
    object class per broker, with the same methods. It abstracts broker APIs behind
    a unified interface, so you need not worry about the underlying broker API calls
    and you can use all the recipes in this chapter as is. Only the procedure to set
    up the broker connection will vary from broker to broker. You can refer to the pyalgotrading
    documentation for setting up the broker connection if you are not using Zerodha
    as your broker. For Zerodha users, the previous steps will suffice.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyalgotrading`包支持多个经纪人，并为每个经纪人提供一个连接对象类，具有相同的方法。它将经纪人API抽象在统一接口后面，因此你不需要担心底层经纪人API调用，你可以直接使用本章的所有方法。只有设置经纪人连接的过程会因经纪人而异。如果你不是使用Zerodha作为你的经纪人，你可以参考`pyalgotrading`文档来设置经纪人连接。对于Zerodha用户，前面的步骤就足够了。'
- en: Fetching the list of financial instruments
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取金融工具列表
- en: '**Financial instruments**, also known as **securities**, are assets that can
    be traded in an exchange. In an exchange, there can be tens of thousands of financial
    instruments. The list of financial instruments is static in nature, as it doesn''t
    change during the live trading hours. Financial instruments may change from time
    to time, but never within the same day. Having this data handy is the first step
    for algorithmic trading. This recipe shows how to fetch the list of financial
    instruments.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**金融工具**，也称为**证券**，是可以在交易所交易的资产。在交易所中可能有成千上万种金融工具。金融工具列表的性质是静态的，因为在实时交易时间内不会改变。金融工具可能会不时变化，但不会在同一天内发生变化。掌握这些数据是算法交易的第一步。该教程展示了如何获取金融工具列表。'
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` object is available in your Python namespace.
    Refer to the *Technical requirements* section of this chapter to set it up.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分进行设置。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and display all the available financial instruments using `broker_connection`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`broker_connection`获取并显示所有可用的金融工具：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the following output (your output may differ):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '![](img/626ca6dc-58ed-45d4-9899-e550ea867adc.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/626ca6dc-58ed-45d4-9899-e550ea867adc.png)'
- en: How it works…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: This recipe fetches all the available financial instruments using the `get_all_instruments()`
    method of `broker_connection`, which returns a `pandas.DataFrame` object. This
    object is assigned to a new attribute, `instruments`, which is displayed in the
    output. This output may differ for you as new financial instruments are frequently
    added and existing ones expire regularly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 该教程使用`broker_connection`的`get_all_instruments()`方法获取所有可用的金融工具，返回一个`pandas.DataFrame`对象。将此对象分配给一个新属性`instruments`，并显示在输出中。由于经常添加新的金融工具并定期到期，因此您的输出可能会有所不同。
- en: Attributes of a financial instrument
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的属性
- en: Financial instruments have various attributes that give more insight into the
    instrument, such as the trading symbol, exchange, segment, tick size, and so on.
    Some of these attributes are also needed while placing orders. This recipe lists
    and explains all the attributes supported by the broker. All the attributes are
    static, meaning they don't change during the live trading hours.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具具有各种属性，可以更深入地了解该工具，例如交易符号、交易所、分段、最小变动价位等。在下订单时，也需要其中一些属性。本教程列出并解释了经纪人支持的所有属性。所有属性都是静态的，意味着在实时交易时间内不会改变。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `instruments` object is available in your Python namespace. Refer
    to the *Fetching the list of financial instruments* recipe of this chapter to
    set it up.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`instruments`对象在您的Python命名空间中可用。请参考本章*获取金融工具列表*教程进行设置。
- en: How to do it…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'List all the attributes of a financial instrument provided by the broker:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列出经纪人提供的金融工具的所有属性：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We get the following output:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The *Fetching a list of financial instruments* recipe fetches all the instruments
    as a `pandas.DataFrame` object. Calling its `columns` attribute returns all the
    columns available. Each column is an attribute for every financial instrument.
    You can find more details at [https://kite.trade/docs/connect/v3/market-quotes/#csv-response-columns](https://kite.trade/docs/connect/v3/market-quotes/#csv-response-columns).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*获取金融工具列表*教程将所有工具作为`pandas.DataFrame`对象获取。调用其`columns`属性返回所有可用的列。每一列都是每个金融工具的属性。您可以在[https://kite.trade/docs/connect/v3/market-quotes/#csv-response-columns](https://kite.trade/docs/connect/v3/market-quotes/#csv-response-columns)找到更多详细信息。'
- en: Expiry of financial instruments
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的到期
- en: Financial instruments may or may not have a fixed expiry date. If they do, they
    are last available for trading on their expiry date. Typically, instruments from
    a cash segment do not expire, whereas derivative instruments (those from the futures
    and options segment) have a short validity period, and expire on the given date.
    This recipe shows both types of instruments and how their expiry date can be fetched.
    An expiry date is static data, meaning it doesn't change during the live market
    hours.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具可能有固定的到期日期，也可能没有。如果有，它们将在到期日最后可供交易。通常，现金分段的工具不会到期，而衍生品工具（来自期货和期权分段的工具）具有短暂的有效期，并在指定日期到期。该教程展示了两种类型的工具以及如何获取它们的到期日期。到期日期是静态数据，意味着在实时市场时间内不会改变。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instruments` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the first recipe of this chapter to set
    up `instruments`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instruments`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的第一个教程设置`instruments`。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We execute the following steps for this recipe:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤进行此教程：
- en: 'Get an instrument object using `broker_connection`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`broker_connection`获取一个工具对象：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Check and print whether `instrument1` will expire:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查并打印`instrument1`是否会到期：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Get another instrument object using `broker_connection`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`broker_connection`获取另一个工具对象：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You shouldn't get any output here. This implies you have successfully fetched
    the instrument.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里您不应该得到任何输出。这意味着您已成功获取了该工具。
- en: 'Please note that if you get the following output for this step, even after
    typing it correctly, please try this step with the latest available NFO-FUT segment
    script by referring to the table from the output in the *Fetching the list of
    financial instruments* recipe of this chapter:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果在此步骤中即使输入正确也得到以下输出，请尝试使用本章*获取金融工具列表*教程中的输出表格参考最新可用的NFO-FUT分段脚本进行此步骤：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This can happen because the instrument, with `tradingsymbol TATASTEEL20AUGFUT`,
    was available at the time of writing this book, but has since expired and so isn't
    available anymore.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是因为具有`tradingsymbol TATASTEEL20AUGFUT`的工具在编写本书时是可用的，但自那时起已经到期，因此不再可用。
- en: 'Check and print whether `instrument2` will expire:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查并打印`instrument2`是否将到期：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We get the following output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Print the expiry date of `instrument2`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`instrument2`的到期日期：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We get the following output (your output may differ):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: '*Step 1* uses the `get_instrument()` method of the `BrokerConnectionZerodha`
    class to fetch an instrument and assign it to a new attribute, `instrument1`.
    This object is an instance of the `Instrument` class. The two parameters needed
    to call `get_instrument` are the exchange (`NSE`) and the trading symbol (`TATASTEEL`).
    In *step 2*, we check whether the instrument will expire using the `will_expire()`
    method. The output of this step is `False`. We repeat the same procedure in *steps
    3* and *4*, this time for a different instrument, assigned to a new attribute,
    `instrument2`, which gives an output of `True` for the `will_expire()` method.
    This is shown in the output of *step 4*. Finally, in *step 5*, we fetch the expiry
    date of `instrument2` using the `expiry` attribute.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*使用`BrokerConnectionZerodha`类的`get_instrument()`方法获取一个工具并将其分配给一个新属性`instrument1`。该对象是`Instrument`类的一个实例。调用`get_instrument`所需的两个参数是交易所（`NSE`）和交易符号（`TATASTEEL`）。在*步骤2*中，我们使用`will_expire()`方法检查工具是否将到期。这一步的输出是`False`。我们在*步骤3*和*步骤4*中重复相同的过程，这次是针对另一个工具，分配给一个新属性`instrument2`，对`will_expire()`方法的输出是`True`。这在*步骤4*的输出中显示。最后，在*步骤5*中，我们使用`expiry`属性获取`instrument2`的到期日期。'
- en: Circuit limits of a financial instrument
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的限制
- en: Each financial instrument has a well-defined price band. The instrument price
    is expected to be within this price band for the day. During the market hours,
    if the instrument price breaches the band on the upper or lower side, trading
    may be halted for the instrument by the exchange for a certain time or the entire
    day. This is done to prevent the sudden rise or fall in an instrument's price
    within a single day. The upper edge of the price band is known as the **upper
    circuit limit** and the lower edge of the price band is known as the **lower circuit
    limit**. This data is static, meaning it doesn't change during the day. However,
    it can significantly change from one day to another. This recipe helps find the
    circuit limits for a financial instrument.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个金融工具都有一个明确定义的价格区间。预计该工具的价格在当天内处于这个价格区间内。在交易时间内，如果工具价格突破了价格区间的上限或下限，交易所可能会暂停该工具的交易一段时间或整天。这是为了防止工具价格在一天内突然上涨或下跌。价格区间的上边缘称为**上限限制**，下边缘称为**下限限制**。这些数据是静态的，意味着在一天内不会改变。但是，它们可能会在一天到另一天发生显著变化。本食谱帮助找出金融工具的限制。
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*食谱设置`instrument1`。
- en: How to do it…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the lower and upper circuit limits of `instrument1`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的下限和上限限制：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We get the following output (your output may differ):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能会有所不同）：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_circuit_limits()` method of the `BrokerConnectionZerodha` class fetches
    the lower and upper circuit limits as a tuple for the given financial instrument.
    This method takes an object of the `Instrument` type as a parameter. We use `instrument1`
    as the parameter here.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_circuit_limits()`方法获取给定金融工具的下限和上限限制，并以元组的形式返回。该方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。'
- en: The market depth of a financial instrument
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的市场深度
- en: The market depth of a financial instrument is a chronological list of data on
    buyers and sellers in the market. The buyers list is a list of prices and their
    respective quantities at which the buyers are willing to buy the instrument for.
    Similarly, the sellers list is a list of prices and their respective quantities
    at which the sellers are willing to sell the instrument for. If you are new to
    the concept of **market depth**, the explanation in the *How it works…* section
    of this recipe will give you more clarity.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的市场深度是市场上买家和卖家数据的按时间顺序排列。买家列表是买家愿意购买该工具的价格及其相应数量的列表。同样，卖家列表是卖家愿意出售该工具的价格及其相应数量的列表。如果您对**市场深度**的概念还不熟悉，本食谱的*工作原理…*部分的解释将为您提供更清晰的理解。
- en: Market depth helps in predicting where the price of an instrument is heading.
    It also helps to understand whether an order with a large quantity can change
    the price significantly or not. Market depth is dynamic in nature, meaning it
    changes constantly during the live trading hours. This recipe helps find out the
    market depth of a financial instrument in real time.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 市场深度有助于预测一个工具的价格走向。它还有助于了解大量订单是否会显著改变价格。市场深度是动态的，意味着在交易时间内不断变化。本食谱帮助实时找出金融工具的市场深度。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*食谱设置`instrument1`。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the buy market depth and sell market depth of `instrument1`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的买入市场深度和卖出市场深度：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We get the following output (your output may differ):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_market_depth()` method of the `BrokerConnectionZerodha` class fetches
    the market depth for the given financial instrument. This method takes an object
    of the `Instrument` type as a parameter. We use `instrument1` as the parameter
    here. The market depths are shown in separate tables for the **buy side** and
    the **sell side**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_market_depth()`方法获取给定金融工具的市场深度。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。市场深度以**买方**和**卖方**分别显示在不同的表中。'
- en: The **buy market depth** is a table of five entries or bids, in descending order
    of price. Each entry indicates an available buyer in the market at that point
    in time, with the price being offered and the quantity available at that price.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**买入市场深度**是一个包含五个条目或出价的表，按价格降序排列。每个条目表示市场上某一时刻的可用买家，提供的价格以及该价格可用的数量。'
- en: The **sell market depth** is a table of five entries or bids, in ascending order
    of price. Each entry indicates an existing seller in the market at that point
    in time, with the price being offered and the quantity available at that price.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**卖出市场深度**是一个包含五个条目或出价的表，按价格升序排列。每个条目表示市场上某一时刻的现有卖家，提供的价格以及该价格可用的数量。'
- en: When a buyer and seller match, the order is executed at the exchange and the
    entries are removed from the buy- and sell-side tables.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当买家和卖家匹配时，订单在交易所执行，并且从买方和卖方表中删除条目。
- en: The total pending buy quantity of a financial instrument
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的总待售数量
- en: The total pending buy quantity for a financial instrument is the sum total of
    the quantity of all the pending buy orders available at an instant. This data
    is dynamic in nature and may change at any moment during the live trading hours.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的总待售数量是在任何时刻所有待售订单的数量之和。这些数据是动态的，可能在交易时间内的任何时刻发生变化。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*部分设置`instrument1`。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the total pending buy quantity of `instrument1`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的总待售数量：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We get the following output (your output may differ):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_total_pending_buy_quantity()` method of the `BrokerConnectionZerodha`
    class fetches the total buy quantity for the given financial instrument at any
    given moment. This method takes an object of the `Instrument` type as a parameter.
    We use `instrument1` as the parameter here.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_total_pending_buy_quantity()`方法在任何时刻获取给定金融工具的总买入数量。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。'
- en: The total pending sell quantity of a financial instrument
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的总待售数量
- en: The total pending sell quantity for a financial instrument is the sum total
    of the quantity of all pending sell orders available at an instant. This data
    is dynamic in nature and may change at any moment during the live trading hours.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的总待售数量是在任何时刻所有待售订单的数量之和。这些数据是动态的，可能在交易时间内的任何时刻发生变化。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*部分设置`instrument1`。
- en: How to do it…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the total pending sell quantity of `instrument1`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的总待售数量：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We get the following output (your output may differ):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_total_pending_sell_quantity()` method of the `BrokerConnectionZerodha`
    class fetches the total sell quantity of the given financial instrument at any
    given moment. This method takes an object of the `Instrument` type as a parameter.
    We use `instrument1` as the parameter here.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_total_pending_sell_quantity()`方法在任何时刻获取给定金融工具的总卖出数量。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。'
- en: The total volume traded for the day of a financial instrument
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具当天的总成交量
- en: The total volume traded for a financial instrument is the sum total of all quantities
    that were traded (bought and sold, but counted once) in the day. For example,
    if *trader A* buys 10 quantities of stock *X* from *trader B*, while *trader C*
    sells 20 quantities of the same stock *X* to *trader D*, the total volume traded
    for *X* would be 10 + 20 = 30\. It won't be 10 + 10 + 20 + 20 = 60 because the
    contribution of the trade to the total volume is considered only once. This data
    is dynamic in nature and may increase at any moment during the live trading hours.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的总成交量是当天所有成交数量（买入和卖出，但只计算一次）的总和。例如，如果*交易员A*从*交易员B*购买股票*X*的10个数量，而*交易员C*将相同股票*X*的20个数量卖给*交易员D*，那么*X*的总成交量将是10
    + 20 = 30。它不会是10 + 10 + 20 + 20 = 60，因为交易对总成交量的贡献只计算一次。这些数据是动态的，可能在交易时间内的任何时刻增加。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instruments*
    recipe of this chapter to set up `instrument1`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*教程设置`instrument1`。
- en: How to do it…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the total traded volume for the day of an instrument:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印一种工具的当天总交易量：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We get the following output (your output may differ):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_total_volume_day()` method of the `BrokerConnectionZerodha` class fetches
    the total traded volume of the given financial instrument at any given moment
    since the beginning of the day. This method takes an object of the `Instrument` type
    as a parameter. We use `instrument1` as the parameter here.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_total_volume_day()`方法在任何给定时刻获取给定金融工具自当天开始以来的总交易量。此方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。'
- en: The last traded price of a financial instrument
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的最后交易价格
- en: The **last traded price** (**LTP**) of a financial instrument is the latest
    price at which an order was executed for that instrument. It is essentially an
    indicator of the current price at which the instrument can be bought or sold (assuming
    the liquidity is good). As the description suggests, this data is dynamic in nature
    and it may change continuously during the live trading hours. This recipe shows
    how to fetch the LTP of a financial instrument.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后交易价格**（**LTP**）是该工具执行订单的最新价格。它本质上是当前可以买入或卖出该工具的价格指标（假设流动性良好）。正如描述所示，这些数据是动态的，在交易时间内可能会不断变化。这个教程展示了如何获取金融工具的LTP。'
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*教程设置`instrument1`。
- en: How to do it…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the LTP of `instrument1`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的LTP：
- en: '[PRE27]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We get the following output (your output may differ):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_ltp()` method of the `BrokerConnectionZerodha` class fetches the LTP
    of the given financial instrument at any given moment. This method takes an object
    of the `Instrument` type as a parameter. We use `instrument1` as the parameter
    here. The fetched data is of the `float` type.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_ltp()`方法在任何给定时刻获取给定金融工具的LTP。此方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。获取的数据是`float`类型。'
- en: The last traded time of a financial instrument
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的最后交易时间
- en: The **last traded time** (**LTT**) of a financial instrument is the latest time
    at which an order was executed for that instrument. This data is dynamic in nature
    as it may change continuously during the live trading hours. This recipe helps
    fetch the LTT of a financial instrument.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的**最后交易时间**（**LTT**）是该工具执行订单的最新时间。这些数据是动态的，因为在交易时间内可能会不断变化。这个教程帮助获取金融工具的LTT。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*教程设置`instrument1`。
- en: How to do it…
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the LTT of `instrument1`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的LTT：
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We get the following output (your output may differ):'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_ltt()` method of the `BrokerConnectionZerodha` class fetches the LTT
    of the given financial instrument at any given moment. This method takes an object
    of the `Instrument` type as a parameter. We use `instrument1` as the parameter
    here. The fetched data is an instance of the `datetime.datetime` class.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_ltt()`方法在任何给定时刻获取给定金融工具的LTT。此方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。获取的数据是`datetime.datetime`类的实例。'
- en: The last traded quantity of a financial instrument
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具的最后交易数量
- en: The **last traded quantity** (**LTQ**) of a financial instrument is the quantity
    that was traded the last time an order was executed for that instrument. This
    data is dynamic in nature as it may change continuously during the live trading
    hours. This recipe demonstrates how to fetch the LTQ of a financial instrument.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的**最后交易数量**（**LTQ**）是上次执行该工具订单时交易的数量。这些数据是动态的，因为在交易时间内可能会不断变化。这个教程演示了如何获取金融工具的LTQ。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*教程设置`instrument1`。
- en: How to do it…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Fetch and print the LTQ of `instrument1`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的LTQ：
- en: '[PRE31]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We get the following output (your output may differ):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_ltq()` method of the `BrokerConnectionZerodha` class fetches the LTQ
    of the given financial instrument at any given moment. This method takes an object
    of the `Instrument` type as a parameter. We use `instrument1` as the parameter
    here. The fetched data is of the `int` type.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_ltq()`方法在任何时刻获取给定金融工具的LTQ。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。获取的数据是`int`类型。'
- en: The recorded open price of the day of a financial instrument
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具当天的开盘价
- en: Often, trading strategies use the current day opening price of a financial instrument
    as one of the first qualifying conditions before making decisions to place new
    trades. Comparing the current day's opening price with the previous day's close
    price may give a hint as to whether the market price is bound to rise or fall
    for the current day for an instrument. If the open price is significantly higher
    than the previous day's close price, the price may continue to rise for the day.
    Similarly, if the open price is significantly lower than the previous day's close
    price, the price may continue to fall for the day. The recorded open price data
    is static in nature, meaning it does not change during the live trading hours.
    This recipe shows how to fetch the current day's opening price of a financial
    instrument.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，交易策略在做出决定是否进行新交易之前，会使用金融工具当天的开盘价作为首要资格条件之一。将当天的开盘价与前一天的收盘价进行比较，可能会暗示市场价格在当天是否会上涨或下跌。如果开盘价显著高于前一天的收盘价，价格可能会继续上涨。同样，如果开盘价显著低于前一天的收盘价，价格可能会继续下跌。记录的开盘价数据是静态的，意味着在交易时间内不会改变。本文介绍了如何获取金融工具当天的开盘价。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在你的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*食谱设置`instrument1`。
- en: How to do it…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Fetch and print the open price of the day of `instrument1`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`当天的开盘价：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We get the following output (your output may differ):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理…
- en: The `get_open_price_day()` method of the `BrokerConnectionZerodha` class fetches
    the open price of the day for the given financial instrument. This method takes
    an object of the `Instrument` type as a parameter. We use `instrument1` as the
    parameter here. The fetched data is of the `float` type.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_open_price_day()`方法获取给定金融工具当天的开盘价。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。获取的数据是`float`类型。'
- en: The recorded highest price of the day of a financial instrument
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具当天的最高记录价格
- en: Often, trading strategies use the current day's highest price of a financial
    instrument as one of the qualifying conditions before making decisions to place
    new trades. This data is dynamic in nature as it may change continuously during
    the live trading hours. This recipe shows how to fetch the current day's highest
    recorded price of a financial instrument.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，交易策略在做出决定是否进行新交易之前，会使用金融工具当天的最高价格作为其中一个资格条件。这些数据是动态的，因为在交易时间内可能会不断变化。本文介绍了如何获取金融工具当天的最高记录价格。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在你的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*食谱设置`instrument1`。
- en: How to do it…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Fetch and print the recorded highest price of the day of `instrument1`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`当天的最高记录价格：
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We get the following output. Your output may differ:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出。你的输出可能不同：
- en: '[PRE36]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理…
- en: The `get_high_price_day()` method of the `BrokerConnectionZerodha` class fetches
    the highest recorded price of the day for the given financial instrument. This
    method takes an object of the `Instrument` type as a parameter. We use `instrument1`
    as the parameter here. The fetched data is of the `float` type.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_high_price_day()`方法获取给定金融工具当天的最高记录价格。该方法以`Instrument`类型的对象作为参数。这里我们使用`instrument1`作为参数。获取的数据是`float`类型。'
- en: The recorded lowest price of the day of a financial instrument
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具当天的最低记录价格
- en: Often, trading strategies use the current day's lowest price of a financial
    instrument as one of the qualifying conditions before making decisions to place
    new trades. This data is dynamic in nature as it may change continuously during
    the live trading hours. This recipe demonstrates how to fetch the current day's
    lowest recorded price of a financial instrument.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，交易策略在做出决定是否进行新交易之前，会使用金融工具当天的最低价格作为其中一个资格条件。这些数据是动态的，因为在交易时间内可能会不断变化。本文演示了如何获取金融工具当天的最低记录价格。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在你的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*食谱设置`instrument1`。
- en: How to do it…
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Fetch and print the recorded lowest price of the day of `instrument1`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`当天的最低记录价格：
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We get the following output (your output may differ):'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（你的输出可能不同）：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作原理…
- en: The `get_low_price_day()` method of the `BrokerConnectionZerodha` class fetches
    the lowest recorded price of the day for the given financial instrument. This
    method takes an object of the `Instrument` type as a parameter. We use `instrument1`
    as the parameter here. The fetched data is of the `float` type.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_low_price_day()`方法获取给定金融工具当天的最低记录价格。该方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。获取的数据是`float`类型。'
- en: The recorded close price of the last traded day of a financial instrument
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融工具上一个交易日的收盘价
- en: Often, trading strategies use the previous day's closing price of a financial
    instrument as one of the first qualifying conditions before making decisions to
    place trades. Comparing the current day's opening price with the previous day’s
    close price may give a hint as to whether the market price is bound to rise or
    fall for the current day for an instrument. If the open price is significantly
    higher than the previous day's close price, the price may continue to rise for
    the day. Similarly, if the open price is significantly lower than the previous
    day's close price, the price may continue to fall for the day. The recorded close
    price data is static in nature, meaning it does not change during the live trading
    hours. This recipe shows how to fetch the previous day's close price of a financial
    instrument.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，交易策略在做出交易决策之前会使用金融工具前一天的收盘价作为首要条件之一。将当天的开盘价与前一天的收盘价进行比较，可能会暗示市场价格今天是否会上涨或下跌。如果开盘价显著高于前一天的收盘价，则价格可能会继续上涨。同样，如果开盘价显著低于前一天的收盘价，则价格可能会继续下跌。记录的收盘价数据是静态的，意味着在实时交易时间内不会发生变化。本教程展示了如何获取金融工具的前一天收盘价。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure the `broker_connection` and `instrument1` objects are available in
    your Python namespace. Refer to the *Technical requirements* section of this chapter
    to set up `broker_connection`. Refer to the *Attributes of a financial instrument*
    recipe of this chapter to set up `instrument1`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`broker_connection`和`instrument1`对象在您的Python命名空间中可用。请参考本章的*技术要求*部分设置`broker_connection`。请参考本章的*金融工具属性*部分设置`instrument1`。
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Fetch and print the recorded close price of the last trading day of `instrument1`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 获取并打印`instrument1`的上一个交易日的收盘价：
- en: '[PRE39]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We get the following output (your output may differ):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出（您的输出可能不同）：
- en: '[PRE40]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works…
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The `get_close_price_day()` method of the `BrokerConnectionZerodha` class fetches
    the close price of the previous trading day for the given financial instrument.
    This method takes an object of the `Instrument` type as a parameter. We use `instrument1`
    as the parameter here. The fetched data is of the `float` type.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`BrokerConnectionZerodha`类的`get_close_price_day()`方法获取给定金融工具的前一个交易日的收盘价。该方法以`Instrument`类型的对象作为参数。我们在这里使用`instrument1`作为参数。获取的数据是`float`类型。'
