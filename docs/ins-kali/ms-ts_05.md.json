["```ts\n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <title>TypeScript HTML App</title>\n    <link rel=\"stylesheet\" href=\"app.css\" type=\"text/css\" />\n    <script src=\"img/jquery-2.1.1.min.js\"></script>\n    <script src=\"img/app.js\"></script>\n</head>\n<body>\n    <h1>TypeScript HTML App</h1>\n\n    <div id=\"content\"></div>\n</body>\n</html>\n```", "```ts\n$(document).ready(() => {\n    $(\"#content\").html(\"<h1>Hello World !</h1>\");\n});\n```", "```ts\nInstall-Package jquery.TypeScript.DefinitelyTyped\n\n```", "```ts\nGet-Package \u2013ListAvailable \u2013Filter definitelytyped\n\n```", "```ts\nInstall-Package jQuery \u2013Version 1.11.1\n\n```", "```ts\nnpm install tsd@next \u2013g\n\n```", "```ts\ntsd query jquery\n\n```", "```ts\nJquery / jquery\n\n```", "```ts\ntsd query jquery.*\n\n```", "```ts\ntsd install jquery\n\n```", "```ts\n\\typings\\jquery\\jquery.d.ts\n\n```", "```ts\nvar Note = Backbone.Model.extend(\n    {\n        initialize: function() {\n            alert(\"Note Model JavaScript initialize\");\n        },\n        author: function () { },\n        coordinates: function () { },\n        allowedToEdit: function(account) {\n            return true;\n        }\n    }\n);\n```", "```ts\nBuild: 'Backbone.Model.extend' is inaccessible.\n\n```", "```ts\nclass Model extends ModelBase {\n\n    /**\n    * Do not use, prefer TypeScript's extend functionality.\n    **/\n    private static extend(\n        properties: any, classProperties?: any): any;\n```", "```ts\nclass Note extends Backbone.Model {\n    initialize() {\n        alert(\"Note model Typescript initialize\");\n    }\n    author() { }\n    coordinates() { }\n    allowedToEdit(account) {\n        return true;\n    }\n}\n```", "```ts\n<script type=\"text/javascript\">\n    $(document).ready( function () {\n        var note = new Note();\n    });\n</script>\n```", "```ts\ninterface INoteInterface {\n    initialize();\n    author();\n    coordinates();\n    allowedToEdit(account: string);\n}\n```", "```ts\nclass Note extends Backbone.Model implements INoteInterface {\n    // existing code\n}\n```", "```ts\nclass NoteCollection extends Backbone.Collection<Note> {\n    model = Note;\n    //model: Note; // generates compile error\n    //model: { new (): Note }; // ok\n}\n```", "```ts\ninterface ISimpleModel {\n    Name: string;\n    Id: number;\n}\nclass SimpleModel extends Backbone.Model implements ISimpleModel {\n    get Name() {\n        return this.get('Name');\n    }\n    set Name(value: string) {\n        this.set('Name', value);\n    }\n    get Id() {\n        return this.get('Id');\n    }\n    set Id(value: number) {\n        this.set('Id', value);\n    }\n}\n```", "```ts\nvar phonecatApp = angular.module('phonecatApp', []);\nphonecatApp.controller('PhoneListCtrl', function ($scope) \n{\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM\u2122 with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM\u2122',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n```", "```ts\ndescribe('PhoneListCtrl', function(){\n    it('should create \"phones\" model with 3 phones', function() {\n      var scope = {},\n          ctrl = new PhoneListCtrl(scope);\n\n      expect(scope.phones.length).toBe(3);\n  });\n\n});\n```", "```ts\nvar phonecatApp = angular.module('phonecatApp', []);\n\nclass PhoneListCtrl  {\n    constructor($scope) {\n        $scope.phones = [\n            { 'name': 'Nexus S',\n              'snippet': 'Fast just got faster' },\n            { 'name': 'Motorola',\n              'snippet': 'Next generation tablet' },\n            { 'name': 'Motorola Xoom',\n              'snippet': 'Next, next generation tablet' }\n        ];\n    }\n};\n```", "```ts\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n    // this function is replaced by the constructor\n}\n```", "```ts\nclass PhoneListCtrl  {\n    myScope: IScope;\n    constructor($scope, $http: ng.IHttpService, Phone) {\n        this.myScope = $scope;\n        this.myScope.phones = Phone.query();\n        $scope.orderProp = 'age';\n         _.bindAll(this, 'GetPhonesSuccess');\n    }\n    GetPhonesSuccess(data: any) {\n        this.myScope.phones = data;\n    }\n};\n```", "```ts\ninterface IScope {\n    phones: IPhone[];\n}\ninterface IPhone {\n    age: number;\n    id: string;\n    imageUrl: string;\n    name: string;\n    snippet: string;\n};\n```", "```ts\nvar phonecatServices = angular.module('phonecatServices', ['ngResource']);\n\nphonecatServices.factory('Phone',\n    [\n        '$resource', ($resource) => {\n            return $resource('phones/:phoneId.json', {}, {\n                query: {\n                    method: 'GET',\n                    params: {\n                        phoneId: 'phones'\n                    },\n                    isArray: true\n                }\n            });\n        }\n    ]\n);\n```", "```ts\nExt.application(\n    {\n        name: 'SampleApp',\n        appFolder: '/code/sample',\n        controllers: ['SampleController'],\n        launch: () => {\n\n            Ext.create('Ext.container.Viewport', {\n                layout: 'fit',\n                items: [{\n                    xtype: 'panel',\n                    title: 'Sample App',\n                    html: 'This is a Sample Viewport'\n                }]\n            });\n\n        }\n\n    }\n);\n```", "```ts\nExt.application(\n    {\n        // properties of an Ext.application\n        // are set within this JavaScript\n        // object block\n    }\n);\n```", "```ts\nExt.application(\n   <Ext.app.IApplication> {\n       // this JavaScript block is strongly\n       // type to be of Ext.app.IApplication\n    }\n);\n```"]