- en: '*Chapter 7*: Understanding Element Interaction in Cypress'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：理解Cypress中的元素交互'
- en: Before we get started with how Cypress interacts with elements when running
    tests, it would be good to have a solid idea of the principles that make up Cypress,
    how it works, different Cypress commands, and even practical examples of the usage
    of Cypress. To fully understand this chapter, you will need to have followed the
    previous chapters, which will have set you up for success in your learning journey.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始运行测试时，了解Cypress与元素交互的方式之前，最好先对构成Cypress的原则，它的工作原理，不同的Cypress命令，甚至Cypress的使用实际示例有一个坚实的理解。要完全理解本章，您需要已经学习了前几章，这将使您在学习过程中取得成功。
- en: In this chapter, we will cover how Cypress interacts with elements and how it
    responds to different states of an element during interaction. We will also cover
    the fundamentals of how Cypress determines whether an element is ready for interaction
    or not through built-in mechanisms in Cypress commands.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Cypress如何与元素交互以及它如何响应交互过程中元素的不同状态。我们还将介绍Cypress如何通过Cypress命令中的内置机制确定元素是否准备好进行交互。
- en: 'We will cover the following key topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下关键主题：
- en: Understanding actionability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可操作性
- en: Forcing actionability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制可操作性
- en: Once you've worked through each of these topics, you will have the knowledge
    required to understand how Cypress interprets tests as they are executed and how
    it interprets errors that have occurred while executing tests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了这些主题中的每一个，您将具有理解Cypress如何解释测试的知识，以及它在执行测试时如何解释发生的错误所需的知识。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we recommend that you clone the repository that contains the
    source code and all the tests that we will write in this chapter from GitHub.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请克隆包含源代码和我们将在本章中编写的所有测试的存储库从GitHub。
- en: 'The GitHub repository for this chapter can be found at the following site:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在以下网站找到：
- en: '[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)'
- en: The source code for this chapter can be found in the `chapter-07` directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-07`目录中找到。
- en: Understanding actionability
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解可操作性
- en: Now that we know what Cypress commands are, and where and when to use them,
    we need to understand the thought and operation process of Cypress when executing
    tests. In this section, we will cover how Cypress interacts with commands, how
    it ensures that elements are visible and actionable, and even how animation in
    elements is handled. We will also cover how Cypress determines **actionability**
    before any command is completed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Cypress命令是什么，以及何时何地使用它们，我们需要了解Cypress在执行测试时的思考和操作过程。在本节中，我们将介绍Cypress如何与命令交互，如何确保元素可见和可操作，甚至如何处理元素中的动画。我们还将介绍Cypress在完成任何命令之前如何确定**可操作性**。
- en: Actionability is the ability of Cypress to perform an action on a specific element
    in the **Document Object Model** (**DOM**). Cypress has commands whose sole intention
    is to interact with DOM elements. The commands act "as a user" and simulate interaction
    with the user interface of an application. Cypress events are responsible for
    the behavior of the commands as it sends the events to the browser, making it
    seem like user interaction on the application's user interface.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可操作性是Cypress在**文档对象模型**（**DOM**）中执行操作的能力。Cypress具有命令，其唯一目的是与DOM元素交互。这些命令像“用户”一样行事，并模拟与应用程序用户界面的交互。Cypress事件负责命令的行为，因为它将事件发送到浏览器，使其看起来像是在应用程序的用户界面上与用户进行交互。
- en: 'The following are some commands in Cypress that directly interact with the
    DOM; for the actions to be completed, the DOM elements have to be actionable.
    These commands come with built-in Cypress mechanisms for checking the actionability
    of the elements that they interact with. The commands include the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Cypress中直接与DOM交互的一些命令；要完成操作，DOM元素必须是可操作的。这些命令带有内置的Cypress机制，用于检查它们交互的元素的可操作性。这些命令包括以下内容：
- en: '`cy.type()`: Types into a DOM element'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.type()`: 在DOM元素中输入'
- en: '`cy.clear()`: Clears the value of a text area or an input box'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.clear()`: 清除文本区域或输入框的值'
- en: '`cy.click()`: Performs a click action on a DOM element'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.click()`: 在DOM元素上执行单击操作'
- en: '`cy.dbclick()`: Performs a double-click action on a DOM element'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.dbclick()`: 在DOM元素上执行双击操作'
- en: '`cy.rightclick()`: Performs a right-click action on a DOM element'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.rightclick()`: 在DOM元素上执行右键单击操作'
- en: '`cy.select()`: Selects an `<option>` choice from a `<select>` dropdown'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.select()`: 从`<select>`下拉菜单中选择一个`<option>`选项'
- en: '`cy.trigger()`: Performs a trigger event on an element on the DOM'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.trigger()`: 在DOM元素上执行触发事件'
- en: '`cy.check()`: Checks radios and checkboxes on the DOM'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.check()`: 检查DOM上的单选按钮和复选框'
- en: '`cy.uncheck()`: Unchecks radios and checkboxes on the DOM'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.uncheck()`: 取消DOM上的单选按钮和复选框'
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The `cy.rightclick()` command will not open the browser menus, but instead will
    check the behavior of your elements in relation to the browser's **context menu**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`cy.rightclick()`命令不会打开浏览器菜单，而是会检查您的元素与浏览器的**上下文菜单**的行为。'
- en: Before any of the preceding commands can be run, Cypress takes actions to ensure
    that the DOM is ready to receive the action. For any of the commands to take place,
    Cypress performs its own checks to verify that the conditions are right for the
    commands to be performed on the DOM elements.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行任何上述命令之前，Cypress会采取行动来确保DOM准备好接收操作。为了执行任何命令，Cypress会执行自己的检查，以验证条件是否适合在DOM元素上执行命令。
- en: 'All the checks take place within a specified time that can be configured through
    the **defaultCommandTimeout** configuration option, which can be modified in the
    `cypress.json` file. The following are the actions taken by Cypress to check for
    DOM element readiness:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些检查都在指定的时间内进行，可以通过**defaultCommandTimeout**配置选项进行配置，该选项可以在`cypress.json`文件中进行修改。以下是Cypress执行的检查DOM元素准备就绪的操作：
- en: '**Visibility**: Scrolls the element to view'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可见性**：滚动元素以查看'
- en: '**Disability**: Ensures that the element is not hidden'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**残疾**：确保元素未隐藏'
- en: '**Detached**: Checks that element has not been removed from the DOM'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离**：检查元素是否已从DOM中移除'
- en: '**Readonly**: Checks that an element is not in a read-only state'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**只读**：检查元素是否处于只读状态'
- en: '**Animations**: Checks that animations have completed'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：检查动画是否已完成'
- en: '**Covering**: Checks that an element is not being covered by a parent element'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**覆盖**：检查元素是否未被父元素覆盖'
- en: '**Scrolling**: Checks for the scrolling of elements covered by elements with
    fixed positions'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动**：检查被固定位置元素覆盖的元素的滚动'
- en: '**Coordinates**: Checks that the event is fired at the desired coordinates'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**坐标**：检查事件是否在所需坐标处触发'
- en: To better understand how Cypress interprets responses from the DOM and how it
    determines actionability, we will go through these listed actions and describe
    how Cypress checks the state through every single action when an actionable command
    is executed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Cypress如何解释DOM的响应以及如何确定可操作性，我们将逐个讨论这些列出的操作，并描述Cypress在执行可操作命令时如何通过每个动作检查状态。
- en: Visibility
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可见性
- en: Cypress uses different factors to determine whether an element is visible or
    not. The default way that Cypress determines the visibility of an element is by
    checking the **Cascading Style Sheets** (**CSS**) properties of that element.
    The CSS properties of any element define how the element behaves and if, by default,
    the CSS properties are defined in a way that means the element is hidden, Cypress
    will automatically know that the element is not visible due to its properties.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress使用不同的因素来确定元素是否可见。Cypress确定元素的可见性的默认方式是通过检查该元素的**层叠样式表**（**CSS**）属性。任何元素的CSS属性定义了元素的行为，如果默认情况下CSS属性以一种意味着元素被隐藏的方式定义，Cypress将自动知道该元素由于其属性而不可见。
- en: 'Cypress considers an element to be hidden if any of the following conditions
    are met:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足以下任一条件，Cypress认为元素是隐藏的：
- en: The CSS `width` and `height` of an element are `0`.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素的CSS`width`和`height`为`0`。
- en: 'The element or its ancestors have a `visibility: hidden` CSS property.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '元素或其祖先具有`visibility: hidden`的CSS属性。'
- en: 'The element or its ancestors have a `display: none` CSS property.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '元素或其祖先具有`display: none`的CSS属性。'
- en: 'The element has a `position: fixed` CSS property and it is covered up or not
    present on the screen.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '元素具有`position: fixed`的CSS属性，并且被遮盖或在屏幕上不存在。'
- en: 'Additionally, Cypress uses the `hidden overflow` CSS property to determine
    whether an element is hidden or not during the execution of tests. The following
    additional instances are some that Cypress uses to determine whether an element
    is hidden or not:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Cypress使用`hidden overflow` CSS属性来确定在测试执行期间元素是否隐藏。以下是Cypress用于确定元素是否隐藏的一些其他实例：
- en: 'Ancestors have hidden overflow and `width` or `height` values of `0`, and there
    is an element between the ancestor and the element that has a CSS property of
    `position: absolute`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '祖先元素具有隐藏的溢出和`width`或`height`值为`0`，并且在祖先元素和具有`position: absolute`的元素之间有一个元素。'
- en: 'Ancestors have hidden overflow and the element has a CSS property of `position:
    relative` and is positioned outside the ancestor''s bounds.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '祖先元素具有隐藏的溢出，并且该元素具有`position: relative`的CSS属性，并且位于祖先元素的边界之外。'
- en: Important note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Hidden overflow means that the CSS property can be any of the following overflows:
    `hidden`, `overflow: auto`, `overflow: scroll`, `overflow-x: hidden`, or `overflow-y:
    hidden`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '隐藏的溢出意味着CSS属性可以是以下任何一种溢出：`hidden`，`overflow: auto`，`overflow: scroll`，`overflow-x:
    hidden`或`overflow-y: hidden`。'
- en: All of the following calculations of transformations and translations are handled
    by Cypress, and if by any chance Cypress does not find that the element is visible,
    the test will fail with an error saying that visibility is hidden for the element
    that Cypress is trying to interact with.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些转换和平移的计算都由Cypress处理，如果Cypress偶然发现元素不可见，则测试将失败，并显示错误，指出Cypress试图与之交互的元素的可见性被隐藏。
- en: Disability
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 残疾
- en: 'When checking for actionability, Cypress also checks whether an element is
    disabled or not. When an element has the `disabled: true` CSS property, Cypress
    cannot interact with it as no action can be performed on an element when it is
    disabled on the DOM. When Cypress encounters a disabled element and needs to perform
    an action on the element, it will return an error describing the state of the
    disabled element and why it is not able to interact with the element through Cypress
    actionable commands.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '在检查可操作性时，Cypress还会检查元素是否已禁用。当元素具有`disabled: true`的CSS属性时，Cypress无法与其交互，因为在DOM上禁用元素时无法对元素执行任何操作。当Cypress遇到禁用的元素并需要对其执行操作时，它将返回一个错误，描述禁用元素的状态以及为什么无法通过Cypress可操作命令与元素交互。'
- en: Detached
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离
- en: Detached elements are elements that have been removed from the DOM but are still
    present in the memory because of the JavaScript. Most applications work by removing
    elements from the DOM and inserting other elements in the DOM, hence constantly
    detaching and attaching elements in the DOM. When evaluating an element for actionability,
    Cypress checks that an element is not detached before any actionable command is
    run on an element. In the event that Cypress encounters a detached element, it
    throws an error before the actionable command is executed by Cypress on the tests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 分离的元素是已从DOM中移除但由于JavaScript的原因仍然存在于内存中的元素。大多数应用程序通过从DOM中移除元素并在DOM中插入其他元素来工作，因此不断地分离和附加元素在DOM中。在评估元素是否可操作时，Cypress会在对元素运行任何可操作的命令之前检查元素是否未分离。如果Cypress遇到分离的元素，它会在测试中执行可操作的命令之前抛出错误。
- en: It is important to note that Cypress will only search for an element in the
    DOM and will not check whether a detached element exists in the memory or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，Cypress只会在DOM中搜索元素，不会检查分离的元素是否存在于内存中。
- en: Readonly
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只读
- en: Readonly elements are disabled for viewing only and cannot accept new content
    or editing. Cypress checks for the `readonly` CSS property in the `.type()` command;
    if the `readonly` CSS property is encountered, the test will fail with an error.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 只读元素是仅用于查看的，不能接受新内容或编辑的。Cypress在`.type()`命令中检查`readonly` CSS属性；如果遇到`readonly`
    CSS属性，测试将以错误失败。
- en: Animations
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: Cypress has built-in mechanisms that determine whether animations are present
    in an element. When evaluating whether an element is actionable, Cypress waits
    for the animation to complete before interaction with the element begins.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress具有内置机制，用于确定元素中是否存在动画。在评估元素是否可操作时，Cypress会等待动画完成，然后才开始与元素交互。
- en: For Cypress to determine whether an element in a test is animating, it has to
    use a sample of the last coordinates of the element and then apply its algorithms
    to calculate the slope.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定测试中的元素是否正在进行动画，Cypress必须使用元素的最后坐标的样本，然后应用其算法来计算斜率。
- en: Important note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The slope is calculated by picking two different points and recording their
    coordinates. Differences between the y-coordinates and the x-coordinates are then
    recorded. Division of the difference in the y-coordinates and the x-coordinates
    is then carried out to determine the slope of the element.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 斜率是通过选择两个不同的点并记录它们的坐标来计算的。然后记录y坐标和x坐标之间的差异。然后进行y坐标和x坐标之间的差异的除法，以确定元素的斜率。
- en: 'The animation of an element and the slope is determined by checking the current
    and previous positions of that element. Cypress comes with an in-built animation
    threshold that checks for the distance in pixels that an element must exceed to
    be considered to be animating. You can configure this in the `cypress.json` file
    and change the default values as shown in the following code block:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查元素的当前和上一个位置来确定元素的动画和斜率。Cypress带有内置的动画阈值，用于检查元素必须超过的像素距离以被认为是正在进行动画。您可以在`cypress.json`文件中配置此项，并按以下代码块中所示更改默认值：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When this value is changed, either by increasing it or decreasing it, Cypress
    will change its sensitivity and behavior of determining whether an element is
    animating or not. A higher animation threshold means that Cypress will reduce
    its sensitivity when it comes to detecting the changed distance of the pixels
    while a lower animation threshold will mean more sensitivity of Cypress when detecting
    elements that are animating.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个值被改变时，无论是增加还是减少，Cypress都会改变其灵敏度和确定元素是否正在进行动画的行为。较高的动画阈值意味着Cypress在检测像素变化的距离时会降低其灵敏度，而较低的动画阈值意味着Cypress在检测正在进行动画的元素时会更加敏感。
- en: 'It is also possible to turn off animations when running tests. To do this,
    we need to configure our `cypress.json` configuration file to ignore animations
    and continue with the execution of our commands. The following can be achieved
    with the configuration in this code block:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试时也可以关闭动画。为了做到这一点，我们需要配置`cypress.json`配置文件来忽略动画并继续执行我们的命令。以下配置可以通过以下代码块实现：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we have specified that our tests should not wait for animations, as shown
    here, our tests will ignore animations and will execute as if the animations are
    not present. This configuration can, however, be changed back to the `true` value
    to continue executing our tests while waiting for animations to execute in the
    elements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指定我们的测试不应等待动画时，如此处所示，我们的测试将忽略动画，并且将执行，就好像动画不存在一样。但是，可以将此配置更改回`true`值，以继续执行我们的测试，同时等待元素中的动画执行。
- en: Covering
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖
- en: Cypress checks that an element is not covered by a parent element as part of
    verifying actionability before a command is issued. There are many instances where
    an element could be visible in the DOM but just covered by a parent element such
    as a modal, a popup, or a dialog box. Cypress will not allow the execution of
    a command if there is a parent that is covering the element.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在发出命令之前，会检查元素是否被父元素覆盖，作为验证可操作性的一部分。有许多情况下，元素可能在DOM中可见，但只是被父元素覆盖，比如模态框、弹出窗口或对话框。如果有一个父元素覆盖了元素，Cypress将不允许执行命令。
- en: In instances where a parent element covers an element that Cypress is supposed
    to carry out an action on, Cypress will throw an error, as even in real life it
    would be impossible for a user to interact with a covered-up element.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在父元素覆盖Cypress应该执行操作的元素的情况下，Cypress会抛出错误，因为即使在现实生活中，用户也无法与被覆盖的元素进行交互。
- en: Important note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the event that a child element is covering the element, Cypress will continue
    to issue the event to the child and execution continues without any problem.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果子元素覆盖了元素，Cypress将继续向子元素发出事件，并且执行会在没有任何问题的情况下继续进行。
- en: 'In the following code block, we have a `button` element that is partially or
    fully covered up by a `span` element, which will be clicked instead of the `button`
    element itself:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，我们有一个`button`元素，它部分或完全被`span`元素覆盖，而不是直接点击`button`元素本身：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this code block, although the `span` element covers the `button` element,
    Cypress will issue the command to the child `span` element, which will trigger
    a click event to our `button` element without encountering errors.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，尽管`span`元素覆盖了`button`元素，Cypress将向子`span`元素发出命令，这将触发对我们的`button`元素的点击事件，而不会遇到错误。
- en: Scrolling
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动
- en: Cypress performs scrolling on the elements and has this behavior enabled by
    default in the actionable commands specified at the beginning of this section.
    By default, before interaction with an element, Cypress scrolls to the position
    of that element and ensures that it is in view.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在元素上执行滚动，并且在本节开头指定的可操作命令中默认启用了此行为。默认情况下，在与元素交互之前，Cypress会滚动到该元素的位置，并确保它在视图中。
- en: Tip
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Commands such as `cy.get()` or `cy.find()` do not have the Cypress scroll-into-view
    mechanism built into them as actionable commands in Cypress do.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如`cy.get()`或`cy.find()`之类的命令在其中没有内置Cypress滚动到视图的机制，就像Cypress中的可操作命令一样。
- en: Scrolling in Cypress is enabled by an algorithm that first tries to determine
    whether an element is visible on the DOM. It then uses coordinates to navigate
    to the actual element by calculating coordinates from the present element to the
    desired location of the element being acted upon by Cypress.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress中的滚动是通过算法启用的，该算法首先尝试确定元素是否在DOM上可见。然后，它使用坐标从当前元素到Cypress操作的元素的期望位置计算坐标，以导航到实际元素。
- en: The Cypress scroll algorithm continually scrolls until an element becomes visible
    or until an element is no longer being covered up by other elements. The algorithm
    does a good job of ensuring that most elements on the DOM can be scrolled to and
    interacted with when they are in view.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress滚动算法会不断滚动，直到元素变得可见，或者直到元素不再被其他元素遮挡。该算法非常好地确保了DOM上的大多数元素在视图中可以滚动并进行交互。
- en: Coordinates
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标
- en: After Cypress has completed the verification process of checking whether the
    elements are actionable or not, by default it fires events to the center of the
    element. Cypress provides a mechanism to override the default position of firing
    the events and the behavior can be customized for most commands.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cypress完成了检查元素是否可操作的验证过程之后，默认情况下，它会向元素的中心触发事件。Cypress提供了一种机制来覆盖触发事件的默认位置，并且大多数命令的行为都可以自定义。
- en: 'The following code block shows changing the firing behavior of a click event
    on a button:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了更改按钮上点击事件的触发行为：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this code block, we navigate to our Todo application and add two todo items,
    then mark one of the todo items as completed. When marking our first todo item
    as complete, we changed the position of the click and instructed Cypress to click
    on the `topLeft` position instead of the default `center` position. The following
    screenshot shows the **event hitbox** of the `click` command on the top-left part
    of the clicked todo item action:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，我们导航到我们的Todo应用程序并添加了两个待办事项，然后标记其中一个待办事项为已完成。当标记我们的第一个待办事项为完成时，我们改变了点击的位置，并指示Cypress点击`topLeft`位置，而不是默认的`center`位置。以下截图显示了`click`命令在被点击的待办事项动作的**事件点击框**的顶部左侧部分：
- en: '![Figure 7.1 – Changing the coordinates of a Cypress click position'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – 更改Cypress点击位置的坐标'
- en: '](image/Figure_7.1_B15616.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.1_B15616.jpg)'
- en: Figure 7.1 – Changing the coordinates of a Cypress click position
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 更改Cypress点击位置的坐标
- en: Important note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: An event hitbox is a highlight that pops up on the pinned Cypress snapshots
    to show that the test interacted with the element. An event hitbox can be triggered
    by Cypress events such as the `.click()` method.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 事件点击框是在固定的Cypress快照上弹出的高亮显示，以显示测试与元素的交互。事件点击框可以由Cypress事件触发，例如`.click()`方法。
- en: 'As *Figure 7.1* illustrates, Cypress has the ability to calculate the coordinates
    of an element and determine the exact coordinates of where to click an element.
    In addition, when the coordinates of the firing behavior have changed, Cypress
    records them on the command log of the Cypress test runner. We can further check
    the console for the coordinates that Cypress prints after executing the top-left
    click on the element. The following figure shows printed coordinates of the `click`
    event of the first completed todo item:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如*图7.1*所示，Cypress有能力计算元素的坐标，并确定在哪里点击元素。此外，当触发行为的坐标发生变化时，Cypress会将它们记录在Cypress测试运行器的命令日志中。我们可以进一步检查控制台，查看Cypress在执行元素的顶部左侧点击后打印的坐标。以下图显示了第一个已完成待办事项的`click`事件的打印坐标：
- en: '![Figure 7.2 – New click position coordinates'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2 – 新的点击位置坐标'
- en: '](image/Figure_7.2_B15616.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.2_B15616.jpg)'
- en: Figure 7.2 – New click position coordinates
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 新的点击位置坐标
- en: The coordinates shown in the screenshot are the new `.click()` command coordinates
    that we have instructed Cypress to use instead of the default commands that come
    with the actionable commands.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 截图中显示的坐标是我们指示Cypress使用的新的`.click()`命令坐标，而不是带有可操作命令的默认命令。
- en: Recap – understanding actionability
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-理解可操作性
- en: In this section, we learned about how Cypress determines the actionability of
    elements and how it evaluates different elements for conditions such as visibility,
    disability, detached modes, animations, scroll properties, coordinates, and even
    `readonly` properties. We also learned how Cypress calculates animations in elements
    and how we can increase the animation threshold to reduce the sensitivity of Cypress
    detecting animations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Cypress如何确定元素的可操作性以及如何评估不同元素的条件，例如可见性、禁用、分离模式、动画、滚动属性、坐标，甚至`readonly`属性。我们还学习了Cypress如何计算元素中的动画以及如何增加动画阈值以减少Cypress检测动画的敏感度。
- en: In the next section, we will learn how we can force Cypress to continue performing
    actions even when the actionability checks fail for an element and when it is
    safe to perform the forced actions on elements.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何强制Cypress在元素的可操作性检查失败时继续执行操作，并在可以安全执行强制操作的元素上执行强制操作。
- en: Forcing actionability
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 强制可操作性
- en: Having understood what actionability is, and the checks that are required by
    Cypress to determine whether an element is actionable or not, it is also important
    to know how we can override mechanisms set in place by Cypress to check for actionability.
    In this section, we will focus on performing actions and commands even when the
    elements do not pass the actionability checks that Cypress enforces for the actionable
    commands. We will also learn how to safely implement override mechanisms for some
    elements and tests.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了可操作性是什么，以及Cypress需要进行的检查来确定元素是否可操作，也很重要了解我们如何覆盖Cypress设置的机制来检查可操作性。在本节中，我们将专注于执行操作和命令，即使元素未通过Cypress为可操作命令执行的可操作性检查。我们还将学习如何安全地实现一些元素和测试的覆盖机制。
- en: Overriding Cypress actionability checks
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖Cypress可操作性检查
- en: 'Actionability is very useful in Cypress tests as it helps us to find situations
    where users may not be able to interact with our application elements. At times,
    though, the actionability checks can get in the way of proper testing, which leads
    us to our next mission: overriding the safety checks.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cypress测试中，可操作性非常有用，因为它帮助我们找到用户可能无法与应用程序元素交互的情况。但有时，可操作性检查可能会妨碍正确的测试，这就引出了我们的下一个任务：覆盖安全检查。
- en: In some tests, "acting like a user" may not be worth it as, at the end of the
    day, the goal is to write meaningful tests that can prevent bugs and defects in
    an automated manner. Instances such as nested navigation structures and interfaces
    may lead to complicated tests that can just be made possible by eliminating the
    nested navigation structures and instead directly interacting with the elements
    that we want.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些测试中，“像用户一样操作”可能并不值得，因为归根结底，目标是编写可以以自动化方式防止错误和缺陷的有意义的测试。诸如嵌套导航结构和界面之类的情况可能导致复杂的测试，可以通过消除嵌套导航结构，而是直接与我们想要的元素进行交互来实现。
- en: 'To override the Cypress actionability checks, we can pass the `{force: true}`
    parameter option to the Cypress actionable commands. The option will instruct
    Cypress to override all the checks that check for actionability and instead proceed
    with the default actions. The following code block is a test to mark all the todo
    items as completed using a `toggle-all` button in our Todo application:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '为了覆盖Cypress的可操作性检查，我们可以向Cypress可操作命令传递`{force: true}`参数选项。该选项将指示Cypress覆盖所有检查，以检查可操作性，并继续执行默认操作。以下代码块是一个测试，使用我们的Todo应用程序中的`toggle-all`按钮将所有待办事项标记为已完成：'
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When this test runs, it will fail, as trying to toggle the first element and
    mark it as complete will lead to a test failure and an error as it is already
    marked as complete. The following screenshot shows Cypress actionability in play,
    where the test failed as a todo it could not be marked as complete due to it being
    covered by another element:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当此测试运行时，它将失败，因为尝试切换第一个元素并标记为完成将导致测试失败和错误，因为它已经标记为完成。以下截图显示了Cypress可操作性的运行情况，测试失败，因为待办事项由于被另一个元素覆盖而无法标记为完成：
- en: '![Figure 7.3 – Failed tests with Cypress actionability checks'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3 - 未通过Cypress可操作性检查的测试'
- en: '](image/Figure_7.3_B15616.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.3_B15616.jpg)'
- en: Figure 7.3 – Failed tests with Cypress actionability checks
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 - 未通过Cypress可操作性检查的测试
- en: 'On further investigation, from *Figure 7.3*, we can verify that the first item
    could not be toggled as complete as it was already complete, which led to the
    failure. We can override this test behavior by telling Cypress to ignore the actionability
    checks before toggling all the todo items to complete, as shown in the following
    code block:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步调查*图7.3*，我们可以验证第一个项目无法标记为已完成，因为它已经完成，这导致了失败。我们可以通过告诉Cypress在切换所有待办事项完成之前忽略可操作性检查来覆盖此测试行为，如下面的代码块所示：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On running the test shown in the code block, it passes as we have prevented
    Cypress from checking whether the element that we need to click is covered by
    another element or not. The following screenshot shows the code running and the
    successful test of marking both todo items as completed by clicking the toggle-all
    drop-down button:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行代码块中显示的测试时，它会通过，因为我们已经阻止了Cypress检查我们需要点击的元素是否被另一个元素覆盖。以下截图显示了代码运行情况，并成功测试了通过点击toggle-all下拉按钮标记两个待办事项为已完成：
- en: '![Figure 7.4 – Passed test with the override of the Cypress actionability checks'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 - 覆盖Cypress可操作性检查的通过测试'
- en: '](image/Figure_7.4_B15616.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.4_B15616.jpg)'
- en: Figure 7.4 – Passed test with the override of the Cypress actionability checks
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 - 覆盖Cypress可操作性检查的通过测试
- en: 'In *Figure 7.4*, Cypress ignored the checks associated with the actionability
    of the items and instead proceeded with the default action, which in our case
    was to toggle both todo items and mark them as complete. We achieved the override
    by passing the `{force: true}` option to the `click` command of the toggle button.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '在*图7.4*中，Cypress忽略了与项目可操作性相关的检查，而是继续执行默认操作，我们的情况下是切换两个待办事项并标记为已完成。我们通过向toggle按钮的`click`命令传递`{force:
    true}`选项来实现覆盖。'
- en: 'When a Cypress event is forced to happen with a forced option, Cypress does
    the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用强制选项强制发生Cypress事件时，Cypress会执行以下操作：
- en: Continues to perform all the default actions
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续执行所有默认操作
- en: Forcibly fires the event at the element
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制在元素上触发事件
- en: 'However, Cypress will not do the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Cypress不会执行以下操作：
- en: Ensure that the element is visible
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素可见
- en: Scroll the element to view
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动元素以查看
- en: Ensure that the element is not disabled
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素未被禁用
- en: Ensure that the element is not detached
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素未被分离
- en: Ensure that the element is not animating
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素未处于动画状态
- en: Ensure that the element is not covered
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素没有被覆盖
- en: Ensure that the element is not readonly
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保元素不是只读的
- en: Fire the event at the descendant element
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在后代元素上触发事件
- en: Important note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Forcing actionability is useful especially when you do not need to go through
    the pain of automating steps that are not worth the time it will take to automate
    them; however, at times, it is not the best solution to the problem at hand. Most
    of the issues that we face when we are forcing actionability can be addressed
    by writing better application code and ensuring the proper alignment of items
    such that no element is blocking another. We can also utilize Cypress to overcome
    situations such as animations as we can wait for the animations to stop running
    and then execute our tests once we are sure that the page animations have been
    completed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 强制可操作性在某些情况下非常有用，特别是当你不需要花费时间自动化不值得自动化的步骤时；然而，有时强制可操作性并不是解决问题的最佳方案。当我们强制可操作性时，大多数问题都可以通过编写更好的应用程序代码和确保项目的正确对齐来解决，以确保没有元素阻挡其他元素。我们还可以利用Cypress来克服诸如动画之类的情况，等待动画停止运行，然后在确保页面动画已完成后执行我们的测试。
- en: When actionability is forced on a command, Cypress forgoes its role of ensuring
    that the right conditions are met before any action can be performed on an element
    and instead just performs the issued condition on the test.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当在命令上强制可操作性时，Cypress放弃了确保在对元素执行任何操作之前满足正确条件的角色，而是直接在测试中执行发出的条件。
- en: Recap – forcing actionability
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 强制可操作性
- en: 'In this section, we have learned that it is possible to force actionability
    on an element, and this is achieved by passing in a `{force: true}` parameter
    to the actionable command being issued on an element. We have also seen that there
    is a significant difference when we force a command to be executed in Cypress
    as exemplified by the test of toggling our todo items as complete. In this section,
    we also understood when it is important to override Cypress actionability and
    how it can potentially reduce test complexity.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，我们学习了可以在元素上强制可操作性，并且可以通过在发出的可操作命令上传递`{force: true}`参数来实现。我们还看到了当我们强制执行Cypress命令时的显著差异，例如在测试中切换我们的待办事项为完成状态。在本节中，我们还了解了何时重写Cypress的可操作性是重要的，以及它如何潜在地减少测试的复杂性。'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how Cypress enforces actionability for elements
    by ensuring that they are in the correct state before commands are performed on
    the elements. We learned that Cypress checks for visibility, disability, DOM detachment,
    `readonly` modes, animations, covering, scrolling, and element coordinates before
    it performs any action on an element. We also went through how Cypress calculates
    the animation of elements and even how it changes the coordinates when actions
    are being performed on elements. We also learned that it is possible to override
    the default checks that Cypress puts in place by forcing actionability in our
    tests.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Cypress如何通过确保元素处于正确状态来强制元素的可操作性，然后才对元素执行命令。我们了解到Cypress在执行任何元素操作之前会检查可见性、禁用状态、DOM分离、`readonly`模式、动画、覆盖、滚动和元素坐标。我们还了解了Cypress如何计算元素的动画，甚至在对元素执行操作时如何改变坐标。我们还学习到可以通过在测试中强制可操作性来覆盖Cypress设置的默认检查。
- en: Having completed this chapter, I believe you have the skills needed to understand
    how Cypress determines actionability for elements and also how we can override
    actionability in our tests to reduce complexity. In the next chapter, we will
    look at using variables and aliases, and we will dive into reusing variables and
    aliases that we define in our tests more than once.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了本章后，我相信你已经掌握了理解Cypress如何确定元素的可操作性以及如何在测试中覆盖可操作性的技能，以减少复杂性。在下一章中，我们将学习使用变量和别名，并深入研究如何多次重用我们在测试中定义的变量和别名。
