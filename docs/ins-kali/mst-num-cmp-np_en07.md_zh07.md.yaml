- en: Chapter 7. Advanced Numpy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：高级 NumPy
- en: Many libraries have nice and easy to use APIs. All you need to do is to invoke
    the provided API function and library will handle the rest of it for you. What's
    happening under the hood is not your concern and you are only interested in output.
    This is fine for most cases, however it's important to understand at least the
    basic internal of a library you are using. Understanding internals will help you
    to grasp what's going on with your code and what are the red flags that you should
    avoid while developing your applications.
  prefs: []
  type: TYPE_NORMAL
  zh: 许多库都具有易于使用的 API。 您需要做的就是调用提供的 API 函数，库将为您处理其余的函数。 幕后发生的事情与您无关，您只对输出感兴趣。 在大多数情况下，这很好，但是，至少要了解所使用库的基本内部结构很重要。
    了解内部结构将帮助您掌握代码的最新动态以及开发应用时应避免的危险信号。
- en: In this chapter, NumPy internals will be reviewed such as NumPy's type hierarchy
    and memory usage. At the end of this chapter, you will learn about the code profiling
    to inspect your programs line by line.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将回顾 NumPy 的内部结构，例如 NumPy 的类型层次结构和内存使用情况。 在本章的最后，您将了解用于逐行检查程序的代码配置文件。
- en: NumPy internals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 内部
- en: As you have seen in previous chapters, NumPy arrays make numerical computations
    efficient and its API is intuitive and easy to use. NumPy array are also core
    to other scientific libraries as many of them are built on top of NumPy arrays.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前几章中所见，NumPy 数组使数值计算变得高效，其 API 直观且易于使用。 NumPy 数组也是其他科学图书馆的核心，因为其中许多库都是基于
    NumPy 数组构建的。
- en: In order to write better and more efficient code, you need to understand the
    internals of data handling. A NumPy array and its metadata live in a data buffer,
    which is a dedicated block of memory with certain data items.
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写更好，更高效的代码，您需要了解数据处理的内部。 NumPy 数组及其元数据位于数据缓冲区中，该缓冲区是带有某些数据项的专用内存块。
- en: How does NumPy manage memory?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 如何管理内存？
- en: Once you initialize a NumPy array, its metadata and data are stored at allocated
    memory locations in **Random Access Memory** (**RAM**).
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化 NumPy 数组后，其元数据和数据将存储在**随机存取存储器**（**RAM**）中分配的存储位置上。
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, Python is a dynamically typed languages; there is no need for the explicit
    declaration of variables types such as `int` or `double`. Variable types are inferred
    and you''d expect that in this case the data type of `array_x` is `np.float64`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Python 是一种动态类型化的语言； 不需要显式声明变量类型，例如`int`或`double`。 可以推断变量类型，在这种情况下，您希望`array_x`的数据类型为`np.float64`：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The advantage of using the `numpy` library rather than Python is that `numpy`
    supports many different numerical data types such as `bool_`, `int_`, `intc`,
    `intp`, `int8`, `int16`, `int32`, `int64`, `uint8`, `uint16`, `uint32`, `uint64`,
    `float_`, `float16`, `float32`, `float64`, `complex_`, `complex64`, and `complex128`.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`numpy`库而不是 Python 的优势在于`numpy`支持许多不同的数值数据类型，例如`bool_`，`int_`，`intc`，`intp`，`int8`，`int16`，`int32`，`int64`，`uint8`，`uint16`，`uint32`，`uint64`，`float_`，`float16`，`float32`，`float64`，`complex_`，`complex64`和`complex128`。
- en: 'You can see these types by checking `sctypes`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查`sctypes`查看这些类型：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Following diagram shows the data type tree:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了数据类型树：
- en: '![](img/490b0e1b-692d-4f2a-855d-f3482dd0da00.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/490b0e1b-692d-4f2a-855d-f3482dd0da00.png)'
- en: 'You can check the parent classes of data types such as `np.float64` by calling
    the `mro` method:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用`mro`方法来检查诸如`np.float64`之类的数据类型的父类：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And parent classes for `np.int64`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 和`np.int64`的父类：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`mro` method stands for Method Resolution Order. In order to understand it
    better, the concept of inheritance should be understood first. In programming
    languages where you can use the object oriented paradigm, you can base the properties
    and methods of an object upon another object that you have created before and
    that''s what''s called **inheritance**. In the previous example, `np.int64` retains
    the properties and behaviors of `np.signedinteger` and the ones that comes after
    that.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`mro`方法代表“方法解析顺序”。 为了更好地理解继承，应该首先了解继承的概念。 在可以使用面向对象范例的编程语言中，可以将对象的属性和方法基于之前创建的另一个对象，这就是**继承**。
    在前面的示例中，`np.int64`保留了`np.signedinteger`及其之后的属性和行为。'
- en: 'Let''s see a simple example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, there are 3 classes, while `First` and `Second` class are independent,
    `Third` class inherits from `First` and `Second`. You can create an instance of
    `Third` class and check it''s contents with `dir` method:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，有 3 个类别，而`First`和`Second`类别是独立的，`Third`类别是从`First`和`Second`继承的。 您可以创建`Third`类的实例，并使用`dir`方法检查其内容：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`dir` shows there are `firstmethod`, `secondmethod` and `thirdmethod` are among
    the methods of `myclass`.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`dir`表示`myclass`的方法中有`firstmethod`，`secondmethod`和`thirdmethod`。'
- en: 'You can call these methods as see their output as following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调用这些方法，如下所示：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s add a `firstmethod` to `Second` class and see what happens:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向`Second`类添加`firstmethod`，看看会发生什么：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Checking the method outputs as before:'
  prefs: []
  type: TYPE_NORMAL
  zh: 像以前一样检查方法输出：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the method you have added to `Second` class has no effect, since
    an instance of `Third` class takes that from `First` class.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，已添加到`Second`类的方法无效，因为`Third`类的实例从`First`类继承了该实例。
- en: 'You can check the `mro` of classes as following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按以下方式检查类的`mro`：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Which will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供以下输出：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is how properties and methods are resolved when you use the inheritance
    mechanism and by now, you should know more or less how `mro` works. Now you can
    once again look at the `mro` examples for numpy data types we had before.
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用继承机制时解析属性和方法的方式，并且现在您应该或多或少地了解`mro`的工作方式。 现在，您可以再次查看我们之前拥有的 NumPy 数据类型的`mro`示例。
- en: You can use nbytes to see the required memory to store data types.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`nbytes`来查看存储数据类型所需的内存。
- en: 'First let''s see the size of a single `float64`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看单个`float64`的大小：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`array_x` has 3 `float64` and its size will be the number of elements multiplied
    by the item size, which is `24` as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`array_x`具有 3 个`float64`，其大小将是元素数乘以商品大小，即`24`，如以下代码段所示：'
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you need less precision in your calculation you can for example use `np.float32`,
    which will take half of the memory that `float64` takes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您需要较低的计算精度，则可以使用`np.float32`，它将占用`float64`占用的一半内存：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Simply, 8 bytes of memory will hold 1 `float64` or 2 `float32`.
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，8 个字节的内存将保存 1 `float64`或 2 `float32`。
- en: The dynamic nature of Python introduces a new way of handling data types as
    Python should contain more information about the data that it stores. While typical
    C variables will have the information about the memory the location, Python variables
    should have information stored as a C structure which contains reference count,
    the type of the object, object size, and the variable itself.
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的动态性质引入了一种处理数据类型的新方法，因为 Python 应该包含有关其存储的数据的更多信息。 虽然典型的 C 变量将具有有关内存位置的信息，但
    Python 变量应具有存储为 C 结构的信息，该结构包含引用计数，对象的类型，对象的大小以及变量本身。
- en: This is necessary to provide a flexible environment for working with different
    data types. If data structures such as list can hold different types of object
    this is due to the storage of this information for each element in the list.
  prefs: []
  type: TYPE_NORMAL
  zh: 这是提供灵活的环境来处理不同数据类型所必需的。 如果诸如列表之类的数据结构可以容纳不同类型的对象，这是由于该信息对于列表中的每个元素的存储。
- en: However, since the data type in NumPy arrays is fixed, memory usage could be
    much more efficient due to using contiguous blocks of memory.
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于 NumPy 数组中的数据类型是固定的，由于使用了连续的内存块，因此内存使用效率可能更高。
- en: You can see the address and other related information by checking the `__array_interface__` property
    of NumPy arrays.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检查 NumPy 数组的`__array_interface__`属性来查看地址和其他相关信息。
- en: 'This interface is written to allow developers to share the array memory and
    information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 编写此接口是为了允许开发人员共享数组内存和信息：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`__array_interface__` is a python dictionary which has 6 keys:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`__array_interface__`是具有 6 个键的 Python 字典：'
- en: '`shape` works like the usual `shape` attribute of NumPy array or `pandas` dataframe.
    It shows the size for each dimension. Since `array_x` has `1` dimension and `3`
    elements, it''s tuple with size `3`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shape`的工作方式类似于 NumPy 数组或`pandas`数据帧的常规`shape`属性。 它显示每个大小的大小。 由于`array_x`具有`1`大小和`3`元素，因此它是具有`3`大小的元组。'
- en: '`typestr` has `3` values, first showing the byte-order, the second showing
    the character-code and remaining characters showing the number of bytes. In this
    example, it has value `''<f8''` which means that byte-order is little-endian,
    character code is floating point and 8 is bytes used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typestr`具有`3`值，第一个显示字节顺序，第二个显示字符代码，其余字符显示字节数。 在此示例中，其值为`''<f8''`，这表示字节顺序为低位字节序，字符代码为浮点，并且使用的字节数为
    8。'
- en: '`descr` may provide more detailed information about the memory layout. It''s
    default value is `[('''', typestr)]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`descr`可能会提供有关内存布局的更多详细信息。 默认值为`[('''', typestr)]`。'
- en: '`data` shows you where your data is stored. It''s a tuple where first element
    shows the memory block address of NumPy array and second element is a flag which
    indicated whether it''s read-only or not. In this example, memory block address
    is `140378873611440` and it''s not read-only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`显示数据的存储位置。 这是一个元组，其中第一个元素显示 NumPy 数组的存储块地址，第二个元素是指示其是否为只读的标志。 在此示例中，内存块地址为`140378873611440`，它不是只读的。'
- en: '`strides` indicates whether given array is C-style contiguous memory buffer.
    In this example None indicates that this is a C-style contiguous array. Otherwise,
    it will include tuple of strides to understand where to jump to retrieve next
    array element in a given dimension. Strides are important property as it guides
    array views when you use different slicing such as `X[::4]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strides`指示给定的数组是否为 C 样式的连续内存缓冲区。 在此示例中，`None`表示这是 C 样式的连续数组。 否则，它将包含跨步元组，以了解跳转到给定维度中的下一个数组元素所要跳转的位置。
    步幅是重要的属性，因为当您使用不同的切片（例如`X[::4]`）时，步幅将引导数组视图。'
- en: '`version` indicates version number which is 3 in this example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`表示在此示例中版本号为 3。'
- en: 'Following snippet shows a quick example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段显示了一个简单的示例：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is important to know because when you create new `ndarrays` by using slicing
    based on existing `ndarrays`, it may degrade the performance. Let''s see a simple
    example; the following snippet creates a 3D `ndarray`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，因为当您使用基于现有`ndarrays`的切片创建新的`ndarrays`时，可能会降低性能。 让我们看一个简单的例子； 以下代码段创建了
    3D `ndarray`：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can slice it and create another array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对其进行切片并创建另一个数组：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Which will select:'
  prefs: []
  type: TYPE_NORMAL
  zh: 将会选择：
- en: First, all items from the first dimension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，第一维的所有项目
- en: Then, every second item from the second dimension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，第二维的每两个项目
- en: Then, every second item from the third dimension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，第三维的每两个项目
- en: 'It will have the following array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 它将具有以下数组：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can see that the memory address of `nd_1` and `nd_2` is the same:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`nd_1`和`nd_2`的内存地址相同：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`nd_2` has strides information to see how to move along a different dimension
    of the `nd_1` array.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`nd_2`大步前进，了解如何沿`nd_1`数组的不同维度移动。'
- en: 'To emphasize the effect of these strides in numerical computations, the following
    example will use a larger size for array dimensions and slices:'
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强调这些跨步在数值计算中的作用，下面的示例将为数组维和切片使用更大的大小：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`nd_1` and `nd_2` have the same dimensions:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`nd_1`和`nd_2`具有相同的大小：'
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can measure the time spent calculating the cumulative product of array
    elements for both `nd_1` and `nd_2`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以测量用于计算`nd_1`和`nd_2`的数组元素的累积乘积的时间：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There''s a significant time difference between two operations; why is that?
    As you might expect, strides in `nd_2` cause this problem:'
  prefs: []
  type: TYPE_NORMAL
  zh: 两次操作之间存在明显的时间差； 这是为什么？ 如您所料，`nd_2`中的步幅过大会导致此问题：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The presence of strides in `nd_2` causes jumps to different memory locations
    when reading data from memory to CPU. If array elements are stored sequentially
    as a contiguous block of memory, then this operation is faster as seen from time
    measurements. Smaller strides are better to utilize CPU cache better for performance.
  prefs: []
  type: TYPE_NORMAL
  zh: 从存储器向 CPU 读取数据时，`nd_2`中存在跨步会导致跳转到不同的存储器位置。 如果将数组元素顺序存储为连续的内存块，那么从时间测量来看，此操作会更快。
    步伐越小越好，可以更好地利用 CPU 缓存来提高性能。
- en: There are some workarounds to mitigate CPU cache related issues. One of the
    libraries that you can use is `numexpr` library ([https://github.com/pydata/numexpr](https://github.com/pydata/numexpr)),
    which is a fast numerical expression evaluator for NumPy. Library makes memory
    usage more efficient and can also benefit multi-threaded programming to fully
    utilize available cores. You can also use it with Intel's VML for further improvements.
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些变通办法可以缓解与 CPU 缓存相关的问题。 您可以使用的一种库是[`numexpr`库](https://github.com/pydata/numexpr)，它是
    NumPy 的快速数值表达式求值器。 库使内存使用效率更高，并且还可以使多线程编程受益，以充分利用可用的内核。 您也可以将其与 Intel 的 VML 结合使用以进行进一步的改进。
- en: 'Let''s see if it will help with `nd_2` in following example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，让我们看看它是否对`nd_2`有帮助：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You should try it with different examples to see the performance gains.
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用其他示例进行尝试，以查看性能提升。
- en: 'If you start indexing your array from the beginning up to some element, you
    will see that it has same memory address:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从头开始索引数组到某个元素，您将看到它具有相同的内存地址：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'However, if you start indexing at a point other than `0`, it will give you
    a different memory address:'
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您在`0`以外的位置开始索引，则将为您提供不同的内存地址：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There is another property of `ndarray` called flags which provides information
    about the memory layout of a given NumPy array:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`的另一个属性称为标志，它提供有关给定 NumPy 数组的内存布局的信息：'
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can get individual flags either with dictionary-like notations or lower-case
    attribute names:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用类似于字典的符号或小写的属性名称来获得单个标志：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s have a look at each attribute:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下每个属性：
- en: '`C_CONTIGUOUS`: Single block of contiguous memory, C-style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C_CONTIGUOUS`：C 样式的连续内存的单个块'
- en: '`F_CONTIGUOUS`: Single block of contiguous memory, Fortran-style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`F_CONTIGUOUS`：连续内存的单个块，Fortran 风格'
- en: 'Your data can be stored using different layouts in memory. There are 2 different
    memory layouts to consider here: row major order which corresponds to `C_CONTIGUOUS`,
    and column major order, which corresponds to `F_CONTIGUOUS`.'
  prefs: []
  type: TYPE_NORMAL
  zh: 您的数据可以使用不同的布局存储在内存中。 这里有 2 种不同的内存布局要考虑：对应于`C_CONTIGUOUS`的行主要顺序和对应于`F_CONTIGUOUS`的列主要顺序。
- en: In this example, `array_f` is 2-dimensional and the row items of `array_f` are
    stored in adjacent memory locations. Similarly, in `F_CONTIGUOUS` case, the values
    of each column are stored in adjacent memory locations.
  prefs: []
  type: TYPE_NORMAL
  zh: 在该示例中，`array_f`是二维的，`array_f`的行项目存储在相邻的存储位置中。 类似地，在`F_CONTIGUOUS`情况下，每列的值存储在相邻的存储位置中。
- en: 'Some `numpy` functions will take an argument `order` to indicate this order
    as `''C''` or `''F''`. Following example shows reshape function with different
    orders:'
  prefs: []
  type: TYPE_NORMAL
  zh: 某些`numpy`函数将使用参数`order`将此顺序指示为`'C'`或`'F'`。 以下示例显示了具有不同顺序的`reshape`函数：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And the rest:'
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的：
- en: '`OWNDATA`: Whether the array shares its block of memory with another object
    or it has the ownership'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OWNDATA`：数组是否与另一个对象共享其内存块或拥有所有权'
- en: '`WRITEABLE`: False means that it''s read-only; otherwise this area could be
    written to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITEABLE`：`False`表示它是只读的； 否则可以将该区域写入。'
- en: '`ALIGNED`: Whether data''s aligned for hardware'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALIGNED`：数据是否针对硬件对齐'
- en: '`WRITEBACKIFCOPY`: Whether the array is a copy from another array or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WRITEBACKIFCOPY`：该数组是否是另一个数组的副本'
- en: '`UPDATEIFCOPY`: (Deprecated, use `WRITEBACKIFCOPY`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPDATEIFCOPY`：（不建议使用`WRITEBACKIFCOPY`）'
- en: Understanding memory management matters since it affects the performance. Computation
    speed will be different depending on how you perform the calculations. You might
    not realize that some computations involve implicit copies of existing arrays,
    which would slow down computations.
  prefs: []
  type: TYPE_NORMAL
  zh: 了解内存管理很重要，因为它会影响性能。 根据您执行计算的方式，计算速度会有所不同。 您可能没有意识到某些计算涉及现有数组的隐式副本，这会减慢计算速度。
- en: 'Following code block shows 2 examples where the first doesn''t require a copy
    whereas 2^(nd) has an implicit copy operation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了两个示例，其中第一个不需要复制，而第二个具有隐式复制操作：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: First run is 5 times slower than the 2^(nd). You need to be aware of implicit
    copy operations and get familiar with in which situations it happens. Reshaping
    arrays does not require implicit copy unless it's a matrix transpose.
  prefs: []
  type: TYPE_NORMAL
  zh: 首次运行比第二次慢 5 倍。 您需要了解隐式复制操作，并熟悉它在哪种情况下发生。 重塑数组不需要隐式复制，除非它是矩阵转置。
- en: 'Many array operations return a new array for results. This behavior is expected
    but damages performance in iterative tasks where you could have millions or billions
    of iterations. Some `numpy` functions has out argument which creates output array
    and use it to write results of iterations. By this way, your program manage the
    memory better and requires less time:'
  prefs: []
  type: TYPE_NORMAL
  zh: 许多数组操作会返回一个新数组以获取结果。 此行为是预期的，但会破坏迭代任务的性能，在迭代任务中，您可能会有数百万或数十亿次迭代。 某些`numpy`函数具有`out`参数，该参数创建输出数组，并使用其写入迭代结果。
    通过这种方式，您的程序可以更好地管理内存，并且需要更少的时间：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`output_array` should have the same type and dimensions as the expected output
    of the operations:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`output_array`的类型和大小应与操作的预期输出相同：'
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Profiling NumPy code to understand the performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 NumPy 代码进行性能分析以了解性能
- en: There are couple of helpful libraries to monitor performance metrics of a given
    python script. You have already seen the usage of `cProfile` library. This section
    will introduce `vprof` which is visual profiler library.
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个有用的库可以监视给定 Python 脚本的性能指标。 您已经看到`cProfile`库的用法。 本节将介绍`vprof`，它是可视分析器库。
- en: It will provide you runtime statistics and memory utilization of a given python
    program.
  prefs: []
  type: TYPE_NORMAL
  zh: 它将为您提供给定 Python 程序的运行时统计信息和内存利用率。
- en: '1D clustering function from [Chapter 5](7101df76-57ad-4f43-9e54-8dd25e2e1f6f.xhtml),
    *Clustering Clients of Wholesale Distributor Using NumPy*, will be used here and
    following code snippet should be saved to a file named `to_be_profiled.py`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 第 5 章“使用 NumPy 聚类批发分销商的客户”的一维特征将在此处使用，以下代码段应保存到名为`to_be_profiled.py`的文件中：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Once you save this file, you can start profiling it by using command line.
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件后，您可以使用命令行开始对其进行性能分析。
- en: '`vprof` can be configured in 4 different ways to get:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 4 种不同的方式配置`vprof`来获取：
- en: CPU flame graph (`vprof -c c to_be_profiled.py`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 火焰图（`vprof -c c to_be_profiled.py`）
- en: Built-in profiler statistics (`vprof -c p to_be_profiled.py`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的探查器统计信息（`vprof -c p to_be_profiled.py`）
- en: Memory graph for Cpython Garbage Collector tracked objects and process memory
    after lines in your programs are run (`vprof -c m to_be_profiled.py`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行程序中的行后，Cpython 垃圾收集器跟踪的对象和进程内存的内存图（`vprof -c m to_be_profiled.py`）
- en: Code `heatmap` with `runtime` and count for each executed line (`vprof -c h
    to_be_profiled.py`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`runtime`编码`heatmap`并为每条执行的行计数（`vprof -c h to_be_profiled.py`）
- en: 'These 4 configuration can be used either for single source file or a package.
    Let''s see output for configurations `p`, `m` and `h`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这 4 种配置可用于单个源文件或包。 让我们看一下`p`，`m`和`h`配置的输出：
- en: 'The configuration for the profiler:'
  prefs: []
  type: TYPE_NORMAL
  zh: 探查器的配置：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'A new tab will be opened in your browser with the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的选项卡将在您的浏览器中打开，并显示以下输出：
- en: '![](img/30c1b63e-e750-467f-89f8-690435d78992.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30c1b63e-e750-467f-89f8-690435d78992.png)'
- en: 'Time spent for each call'
  prefs: []
  type: TYPE_NORMAL
  zh: 每个调用的时间花费
- en: You can see the filename, function name, line number and time spent for each
    call.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到文件名，函数名，行号和每次调用所花费的时间。
- en: 'Configuration for memory usage statistics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 内存使用情况统计信息的配置：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'New tab will be opened in your browser with following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 新标签页将在您的浏览器中打开，并显示以下输出：
- en: '![](img/c47f02ee-21bf-484c-abd0-727be115ea3f.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c47f02ee-21bf-484c-abd0-727be115ea3f.png)'
- en: 'Memory usage'
  prefs: []
  type: TYPE_NORMAL
  zh: 内存使用情况
- en: 'On the left, you can see the objects in memory and the chart shows you the
    memory usage in megabytes as the number of executed lines increases. If you hover
    your mouse over the chart, every point will have the following information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，您可以看到内存中的对象，并且图表显示了随着执行的行数增加，内存使用量（以兆字节为单位）。 如果将鼠标悬停在图表上，则每个点将具有以下信息：
- en: Executed line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的行
- en: Line number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行号
- en: Function name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数名称
- en: Filename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名称
- en: Memory usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用情况
- en: 'For example line 27 in `to_be_profiled.py` file is following line which calculates
    `deltas`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`to_be_profiled.py`文件中的第 27 行是计算`deltas`的下一行：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It's executed many time since it's a list comprehension if you inspect the chart.
  prefs: []
  type: TYPE_NORMAL
  zh: 它执行了很多次，因为如果您检查图表，这是列表理解。
- en: 'Configuration for code `heatmap`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 代码`heatmap`的配置：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'New tab will be opened in your browser with the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: “新”标签将在您的浏览器中打开，并显示以下输出：
- en: '![](img/0f7b1b59-ce7f-4ec5-930d-af4f4923ff5f.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f7b1b59-ce7f-4ec5-930d-af4f4923ff5f.png)'
- en: 'Heatmap for the lines executed'
  prefs: []
  type: TYPE_NORMAL
  zh: 所执行的行的热力图
- en: On the left, there is a list of inspected module and there is only one file
    to be inspected in this case.
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，有一个已检查模块的列表，在这种情况下，只有一个文件要检查。
- en: 'On the right, there''s a heatmap of every line included in your program. If
    you hover your mouse over lines, it will give you the following information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 右边是程序中每行的热图。 如果将鼠标悬停在行上，它将为您提供以下信息：
- en: '**Time spent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**花费的时间**'
- en: '**Total running time**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总运行时间**'
- en: '**Percentage**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**百分比**'
- en: '**Run count**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行计数**'
- en: 'If you hover your mouse over line `27`, it will give you the following statistics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将鼠标悬停在`27`行上，它将为您提供以下统计信息：
- en: '![](img/2a01ed56-5ab9-429c-923f-b9880202e834.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a01ed56-5ab9-429c-923f-b9880202e834.png)'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '总结'
- en: Knowing NumPy's internals is crucially important when you are working with scientific
    operations. Efficiency is key since many scientific computations are compute and
    memory intensive. Hence, if your code is not written efficiently, computations
    will take much longer than they need and this will hurt your research and development
    timeline.
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行科学操作时，了解 NumPy 的内部结构至关重要。 效率是关键，因为许多科学计算都是计算和内存密集型的。 因此，如果您的代码编写效率不高，则计算所需的时间将远远超过所需的时间，这将损害您的研发时间。
- en: In this chapter, you have seen some of the internals and performance aspects
    of the NumPy library and also learned about the `vprof` library, which helps you
    inspect the performance of your python programs.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了 NumPy 库的一些内部和性能方面，还了解了`vprof`库，该库可帮助您检查 Python 程序的性能。
- en: Code profiling will help you a lot to inspect your programs line by line and
    there are different ways of looking at the same data, as you have seen previously.
    Once you have identified the most demanding parts of your programs, then you can
    start searching for more efficient ways or implementations to improve performance
    and save more time.
  prefs: []
  type: TYPE_NORMAL
  zh: 代码概要分析将极大地帮助您逐行检查程序，并且如您先前所见，查看相同数据的方式也有所不同。 确定了程序中最苛刻的部分后，便可以开始搜索更有效的方法或实现以提高性能并节省更多时间。
- en: In the next chapter, we'll take an overview of high-performance, low-level numerical
    computing libraries. NumPy can use these implementations for considerable performance
    gains.
  prefs: []
  type: TYPE_NORMAL
  zh: '在下一章中，我们将概述高性能，低级的数值计算库。 NumPy 可以使用这些实现来获得可观的性能提升。'
