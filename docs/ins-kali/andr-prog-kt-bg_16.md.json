["```kt\nclass SomeRegularClass{\n    var someRegularProperty = 1    \n\n    fun someRegularFunction(){\n    }\n}\n```", "```kt\nclass SomeRegularClass{\n    var someRegularProperty = 1\n\n    fun someRegularFunction(){\n    }\n\n    inner class MyInnerClass {\n val myInnerProperty = 1\n\n fun myInnerFunction() {\n }\n }\n\n}\n```", "```kt\nclass SomeRegularClass{\n    var someRegularProperty = 1\n\n    val myInnerInstance = MyInnerClass()\n\n    fun someRegularFunction(){\n        val someVariable = myInnerInstance.myInnerProperty\n myInnerInstance.myInnerFunction()\n    }\n\n    inner class MyInnerClass {\n        val myInnerProperty = 1\n\n        fun myInnerFunction() {\n        }\n\n    }\n}\n```", "```kt\nfun myInnerFunction() {\n someRegularProperty ++\n}\n```", "```kt\n    // Temporary code\n    val button = findViewById<View>(R.id.button) as Button\n    button.setOnClickListener {\n      // Create a new DialogShowNote called dialog\n      val dialog = DialogShowNote()\n\n      // Send the note via the sendNoteSelected function\n      dialog.sendNoteSelected(tempNote)\n\n      // Create the dialog\n      dialog.show(supportFragmentManager, \"123\")\n    }\n    ```", "```kt\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\n\nclass NoteAdapter(\n   private val mainActivity: MainActivity, \n   private val noteList: List<Note>) \n   : RecyclerView.Adapter<NoteAdapter.ListItemHolder>() {\n\n}\n```", "```kt\nclass ListItemHolder {\n\n}\n```", "```kt\n    inner class ListItemHolder(view: View) : \n         RecyclerView.ViewHolder(view), \n         View.OnClickListener {\n```", "```kt\ninit {\n}\n\noverride fun onClick(view: View) {\n}\n```", "```kt\noverride fun onBindViewHolder(\n   holder: ListItemHolder, position: Int) {\n```", "```kt\n    override fun onCreateViewHolder(\n       parent: ViewGroup, viewType: Int): ListItemHolder {\n```", "```kt\nclass NoteAdapter(\n  private val mainActivity: MainActivity,\n  private val noteList: List<Note>)\n  : RecyclerView.Adapter<NoteAdapter.ListItemHolder>() {\n\n    override fun onCreateViewHolder(\n         parent: ViewGroup, viewType: Int):\n         ListItemHolder {\n\n    }\n\n    override fun getItemCount(): Int {\n\n    }\n\n    override fun onBindViewHolder(\n         holder: ListItemHolder, \n         position: Int) {\n\n    }\n\n    inner class ListItemHolder(view: View) : \n          RecyclerView.ViewHolder(view),\n          View.OnClickListener {\n\n        init {\n\n        }\n\n        override fun onClick(view: View) {\n        }\n    }\n}\n```", "```kt\noverride fun onCreateViewHolder(\n   parent: ViewGroup, viewType: Int): \n   ListItemHolder {\n\n val itemView = LayoutInflater.from(parent.context)\n .inflate(R.layout.listitem, parent, false)\n\n return ListItemHolder(itemView)\n}\n```", "```kt\noverride fun onBindViewHolder(\n         holder: ListItemHolder, position: Int) {\n\n   val note = noteList[position]\n holder.title.text = note.title\n\n // Show the first 15 characters of the actual note\n holder.description.text = \n note.description!!.substring(0, 15)\n\n // What is the status of the note?\n when {\n note.idea -> holder.status.text = \n mainActivity.resources.getString(R.string.idea_text)\n\n note.important -> holder.status.text = \n mainActivity.resources.getString(R.string.important_text)\n\n note.todo -> holder.status.text = \n mainActivity.resources.getString(R.string.todo_text)\n }\n\n}\n```", "```kt\noverride fun getItemCount(): Int {\n   if (noteList != null) {\n return noteList.size\n }\n // error\n return -1\n}\n```", "```kt\ninner class ListItemHolder(view: View) :\n         RecyclerView.ViewHolder(view),\n         View.OnClickListener {\n\n internal var title =\n view.findViewById<View>(\n R.id.textViewTitle) as TextView\n\n internal var description =\n view.findViewById<View>(\n R.id.textViewDescription) as TextView\n\n internal var status =\n view.findViewById<View>(\n R.id.textViewStatus) as TextView\n\n  init {\n\n        view.isClickable = true\n view.setOnClickListener(this)\n  }\n\n  override fun onClick(view: View) {\n        mainActivity.showNote(adapterPosition)\n  }\n}\n```", "```kt\n// Temporary code\n//private var tempNote = Note()\n\nprivate val noteList = ArrayList<Note>()\nprivate val recyclerView: RecyclerView? = null\nprivate val adapter: NoteAdapter? = null\n```", "```kt\nfab.setOnClickListener { view ->\n   val dialog = DialogNewNote()\n   dialog.show(supportFragmentManager, \"\")\n}\n\nrecyclerView = \n findViewById<View>(R.id.recyclerView) \n as RecyclerView\n\nadapter = NoteAdapter(this, noteList)\nval layoutManager = \n LinearLayoutManager(applicationContext)\n\nrecyclerView!!.layoutManager = layoutManager\nrecyclerView!!.itemAnimator = DefaultItemAnimator()\n\n// Add a neat dividing line between items in the list\nrecyclerView!!.addItemDecoration(\n DividerItemDecoration(this, \n LinearLayoutManager.VERTICAL))\n\n// set the adapter\nrecyclerView!!.adapter = adapter\n\n```", "```kt\nfun createNewNote(n: Note) {\n  // Temporary code\n  // tempNote = n\n  noteList.add(n)\n adapter!!.notifyDataSetChanged()\n\n}\n```", "```kt\nfun showNote(noteToShow: Int) {\n   val dialog = DialogShowNote()\n   dialog.sendNoteSelected(noteList[noteToShow])\n   dialog.show(supportFragmentManager, \"\")\n}\n```"]