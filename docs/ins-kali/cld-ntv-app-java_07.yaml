- en: Testing Cloud-Native Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试云原生应用程序
- en: In this chapter, we take a deep dive into testing cloud-native applications.
    Testing has matured a lot from manual testing to automated testing, using various
    testing tools, strategies, and patterns. The benefit of this approach is that
    the testing can be done frequently in a failsafe fashion that is important for
    cloud development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨测试云原生应用程序。测试从手动测试发展到使用各种测试工具、策略和模式进行自动化测试。这种方法的好处是可以频繁地进行测试，以确保云开发的重要性。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Testing concepts, such as **behavior-driven development (BDD)** and **test-driven
    development (TDD)**
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试概念，如**行为驱动开发（BDD）**和**测试驱动开发（TDD）**
- en: Testing patterns, such as A/B testing and test doubles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试模式，如A/B测试和测试替身
- en: Testing tools, such as JUnit, Cucumber, JaCoCo, and Spring Test
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工具，如JUnit，Cucumber，JaCoCo和Spring Test
- en: Types of testing, such as unit, integration, performance, and stress testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试类型，如单元测试、集成测试、性能测试和压力测试
- en: Applying the concepts of BDD and integration testing to the Product service
    that we developed in [Chapter 2](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml), *Writing
    Your First Cloud-Native Application*, and enhanced in [Chapter 4](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml),
    *Extending Your Cloud-Native Application*
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将BDD和集成测试的概念应用到我们在[第2章](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml)中开发的产品服务，并在[第4章](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml)中进行了增强，*扩展您的云原生应用程序*
- en: Writing test cases before development
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发之前编写测试用例
- en: In this book, we started developing a simple service in [Chapter 2](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml), *Writing
    Your First Cloud-Native Application*, in Spring Boot to get you excited about
    cloud development. However, real development follows a different style of best
    practice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们在[第2章](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml)中开始使用Spring Boot开发一个简单的服务，*编写您的第一个云原生应用程序*，以激发您对云开发的兴趣。然而，真正的开发遵循不同的最佳实践风格。
- en: TDD
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD
- en: A project starts with understanding the requirements and writing test cases
    that validate the requirements. Since the code does not exist at this point, the
    test case will fail. Then, the code is written that passes the test case. This
    process iterates till the test cases and the required code are complete to realize
    the business functionality. Kent Beck has an excellent book on this subject, *Test
    Driven Development by Example*. In the next section, we will redo the product
    service from [Chapter 4](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml), *Extending
    Your Cloud-Native Application*, using the principles in this chapter. But before
    that, let's look at another important concept, BDD.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 项目始于理解需求并编写验证需求的测试用例。由于此时代码不存在，测试用例将失败。然后编写通过测试用例的代码。这个过程迭代直到测试用例和所需的代码完成以实现业务功能。Kent
    Beck在这个主题上有一本优秀的书，*通过示例进行测试驱动开发*。在下一节中，我们将使用本章的原则重新进行[第4章](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml)中的产品服务。但在此之前，让我们看看另一个重要概念，BDD。
- en: BDD
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BDD
- en: Taking a leaf out of Agile development principles and user stories, BDD encourages
    us to think of development as a set of scenarios in which, given certain conditions,
    the system behaves in a certain, predictable way to the set stimuli. If these
    scenarios, conditions and actions can be captured in an easy-to-understand common
    language between the business and IT team, which brings a lot of clarity to development
    and reduces the chances of committing mistakes. It is a way to write specifications
    that are easily testable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 借鉴敏捷开发原则和用户故事，BDD鼓励我们将开发看作一系列场景，在这些场景中，给定某些条件，系统对设置的刺激以一种特定、可预测的方式做出反应。如果这些场景、条件和行为可以用业务和IT团队之间易于理解的共同语言来表达，这将为开发带来很多清晰度，并减少犯错的机会。这是一种编写易于测试的规范的方法。
- en: Moving ahead in this chapter, we will take our product service and apply BDD
    to it using the Cucumber tool.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将采用Cucumber工具对我们的产品服务应用BDD。
- en: Testing patterns
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试模式
- en: Testing large internet applications for the cloud requires a disciplined approach
    where a few patterns come in handy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为云端测试大型互联网应用程序需要一个有纪律的方法，其中一些模式非常有用。
- en: A/B testing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A/B测试
- en: The original intent of A/B testing, also called **split testing**, was for experimentation
    to find out the user response of a few selected users to two different web pages
    with the same functionality. If the users responded favorably to a certain pattern
    as compared to the other set, it was selected.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: A/B测试的最初目的，也称为**分割测试**，是为了通过实验找出少数选定用户对具有相同功能的两个不同网页的用户响应。如果用户对某种模式的响应比其他模式更好，那么就选择该模式。
- en: 'This concept can be expanded to the introduction of new features in a phased
    manner. The feature, campaign, layout, or new service is introduced to a controlled
    set of users and the response is measured:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念可以扩展到分阶段引入新功能。功能、活动、布局或新服务被引入到一组受控的用户中，并且对其响应进行测量：
- en: '![](img/8e04a14e-0ee4-454f-ab59-77b7b52500fa.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e04a14e-0ee4-454f-ab59-77b7b52500fa.jpg)'
- en: After the test window is over, the results are aggregated to plan the effectiveness
    of the updated functionality.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 测试窗口结束后，结果被汇总以规划更新功能的有效性。
- en: The strategy in such testing is that for the selected set of users, an HTTP
    `302` (temporary redirect) is used to switch the users from the regular website
    to a newly designed website. This will require running a variation of the website
    or functional services for the test period. Once the test is successful, the feature
    is slowly expanded to more users and is merged into the main website/code base.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试的策略是对于选定的用户组，使用HTTP `302`（临时重定向）将用户从常规网站切换到新设计的网站。这将需要在测试期间运行网站或功能服务的变体。一旦测试成功，该功能将逐渐扩展到更多用户，并合并到主网站/代码库中。
- en: Test doubles
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试替身
- en: 'Often, the functionality under test depends on components and APIs which are
    independently being developed by other teams, which has the following disadvantages:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，受测试的功能依赖于由其他团队独立开发的组件和API，这具有以下缺点：
- en: They may not be available for testing at the time of development of your functionality
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能在开发功能时无法进行测试
- en: They may not be always available and be set up with the data required for testing
    various cases
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可能并不总是可用，并且需要设置所需的数据来测试各种情况
- en: Using the actual components each time may be slower
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次使用实际组件可能会更慢
- en: Hence, the concept of a test double became popular. A test double (like a stunt
    double in a movie) is a component/API that replaces the actual component and mimics
    its behavior. The test double component is typically a lightweight and easy-to-change
    component that is under the control of the team building the functionality, unlike
    the real components that could be dependencies or external processes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，测试替身的概念变得流行。测试替身（就像电影中的替身演员）是一个替换实际组件并模仿其行为的组件/ API。测试替身组件通常是一个轻量级且易于更改的组件，由构建功能的团队控制，而不像可能是依赖项或外部进程的真实组件。
- en: There are many types of test doubles, such as Dummy, Fakes, Test Stubs, and
    Mocks.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多类型的测试替身，例如虚拟、伪装、测试桩和模拟。
- en: Test Stubs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试桩
- en: 'Test Stubs are useful when a downstream component returns a response that alters
    the behavior of the system under test; for example, if our product service was
    to call a reference data service whose output decides the behavior of the product
    service. A Test Stub for a reference data service can mimic the various response
    types that cause change in the behavior of the product service:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当下游组件返回改变系统行为的响应时，测试桩非常有用；例如，如果我们的产品服务要调用一个决定产品服务行为的参考数据服务。参考数据服务的测试桩可以模仿导致产品服务行为改变的各种响应类型：
- en: '![](img/adc5e088-75aa-4700-a19e-18a933b4725f.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adc5e088-75aa-4700-a19e-18a933b4725f.jpg)'
- en: Mock objects
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟对象
- en: The next type of test double is a Mock object, which records how the system
    behaves with it and then presents the recording for verification. For example,
    a Mock database component could check whether it was not being called for a product
    that was supposed to be answered from a cache layer instead of a database.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个测试替身类型是模拟对象，它记录系统如何与其行为，并将记录呈现以进行验证。例如，模拟数据库组件可以检查是否应该从缓存层而不是数据库中调用产品。
- en: 'Here is a basic diagram representation of the ecosystem around Mocks:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于模拟的生态系统的基本图表表示：
- en: '![](img/4475e788-f329-4f3f-b7ae-dad19dbd83a7.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4475e788-f329-4f3f-b7ae-dad19dbd83a7.jpg)'
- en: Mock APIs
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟API
- en: In cloud development, you will be building a service that depends on other services
    or mainly the APIs through which the services are accessed. Often, the other services
    will not be available for testing immediately. But you cannot stop your development.
    This is where mocking or adding a dummy service is a useful pattern to test your
    service.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在云开发中，您将构建一个依赖于其他服务或主要通过这些服务访问的API的服务。通常，其他服务将无法立即进行测试。但您不能停止开发。这就是模拟或添加虚拟服务的有用模式来测试您的服务的地方。
- en: A service Mock emulates all the contracts and behavior of the real service.
    A few examples such as [WireMock.org](http://wiremock.org/) or [Mockable.io](https://www.mockable.io/)
    help us to emulate the API and test the main cases, edge cases, and failure conditions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 服务模拟模拟了真实服务的所有合同和行为。一些示例，如[WireMock.org](http://wiremock.org/)或[Mockable.io](https://www.mockable.io/)，帮助我们模拟API并测试主要情况、边缘情况和故障情况。
- en: Ensuring code review and coverage
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保代码审查和覆盖率
- en: The manual review of code is augmented by automatic code review tools. This
    helps to identify any possible errors in the code and ensure the coverage is complete
    and all paths are tested.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动代码审查工具来增强对代码的手动审查。这有助于识别代码中可能的错误，并确保覆盖完整并测试所有路径。
- en: We will look at the code coverage tool JaCoCo later.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将看一下代码覆盖工具JaCoCo。
- en: Types of testing
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型
- en: The various types of testing we discuss later in the chapter were already known
    even before cloud computing became popular. The principles of Agile development
    using **continuous integration** (**CI**) and **continuous development** (**CD**)
    make it important to automate these types of testing so that they are executed
    each time a code check-in and build happens.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后在本章中讨论的各种测试类型在云计算变得流行之前就已经被了解。使用**持续集成**（**CI**）和**持续开发**（**CD**）的敏捷开发原则使得自动化这些测试类型变得重要，以便它们在每次代码检入和构建发生时执行。
- en: Unit testing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: The aim of unit testing is to test each class or code component and ensure it
    is performing as expected. JUnit is the popular Java framework for unit testing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的目的是测试每个类或代码组件，并确保其按预期执行。JUnit是流行的Java单元测试框架。
- en: Using the Mock object pattern and Test Stubs, it is possible to isolate the
    dependent components of the services being tested so that the testing focuses
    on the system under test, which is the service.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟对象模式和测试桩，可以隔离正在测试的服务的依赖组件，以便测试集中在系统正在测试的系统上。
- en: JUnit is the most popular tool to perform unit testing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是执行单元测试的最流行的工具。
- en: Integration testing
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: The aim of component testing is to check whether the components, such as the
    Product service, perform as expected.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 组件测试的目的是检查组件（如产品服务）是否按预期执行。
- en: Components such as `spring-boot-test` help run the test suites and run the test
    on whole components. We are going to see this in action in this chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如`spring-boot-test`之类的组件有助于运行测试套件并对整个组件进行测试。我们将在本章中看到这一点。
- en: Load testing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载测试
- en: Load testing involves pushing a large volume of concurrent requests to the system
    under test for a period and observing the effect, such as response time and error
    rates on the system. A system is said to be horizontally scalable if adding more
    instances of the service enables it to handle additional loads.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 负载测试涉及向系统发送大量并发请求一段时间，并观察其影响，如系统的响应时间和错误率。如果添加更多服务实例使系统能够处理额外的负载，则称系统具有水平可扩展性。
- en: JMeter and Gatling are the popular tools to cover this dimension.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JMeter和Gatling是流行的工具，用于覆盖这个维度。
- en: Regression testing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归测试
- en: In introducing new functionality, the existing functionality should not break.
    Regression testing covers this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入新功能时，现有功能不应该中断。回归测试可以覆盖这一点。
- en: Selenium is a web browser-based, open source tool popular in this space to perform
    regression testing.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个基于Web浏览器的开源工具，在这个领域很受欢迎，用于执行回归测试。
- en: Testing the Product service
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试产品服务
- en: Let's apply the testing principles we learned to the Product service that we
    have been building so far. We start from a user point of view and hence with acceptance
    testing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们学到的测试原则应用于迄今为止构建的产品服务。我们从用户的角度开始，因此从验收测试开始。
- en: BDD through Cucumber
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Cucumber进行BDD
- en: The first step is to recall the specification of our product service. In [Chapter
    4](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml), *Extending Your Cloud-Native Application*,
    we built a few features on our product service that allowed us to fetch, add,
    modify, and delete products, and get a list of product IDs given a product category.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是回顾我们产品服务的规范。在[第4章](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml)中，*扩展您的云原生应用*，我们构建了一些关于产品服务的功能，允许我们获取、添加、修改和删除产品，并在给定产品类别的情况下获取产品ID列表。
- en: Let's represent this as features in Cucumber.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Cucumber中表示这些特性。
- en: Why Cucumber?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Cucumber？
- en: Cucumber allows the expression of behavior in a plain-English-like language
    called **Gherkin**. This enables a ubiquitous language from the domain-driven
    design parlance, so that the communication between the business, development,
    and testing is seamless and well-understood.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber允许用一种类似于普通英语的语言**Gherkin**表达行为。这使得领域驱动设计术语中的通用语言成为可能，从而使业务、开发和测试之间的沟通变得无缝和易于理解。
- en: How does Cucumber work?
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cucumber是如何工作的？
- en: 'Let''s understand how Cucumber works:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一下Cucumber是如何工作的：
- en: 'The first step in Cucumber is to express the user story as features with scenarios,
    and `Given`-`When`-`Then` conditions:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cucumber的第一步是将用户故事表达为具有场景和`Given`-`When`-`Then`条件的特性：
- en: '`Given`: Sets the preconditions for the behavior'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定：为行为设置前提条件
- en: '`When`: Trigger that changes the state of the system, for example, making a
    request to the service'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当：触发改变系统状态的操作，例如向服务发出请求
- en: '`Then`: How the service should respond'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后：服务应该如何响应
- en: These are translated to automated test cases using the `cucumber-spring` translation
    layer so that they can be executed.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些被翻译为自动化测试用例，使用`cucumber-spring`翻译层，以便可以执行。
- en: Let's start with a simple `getProduct` acceptance test case. We will write a
    simple feature in Gherkin that gets the product if the product ID exists, or returns
    an error if the product ID is not found.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的`getProduct`验收测试用例开始。我们将用Gherkin编写一个简单的特性，如果产品ID存在，则获取产品，如果找不到产品ID，则返回错误。
- en: Let's realize the following feature in a true BDD style. The `get` API on the
    Product service returns product details such as description and category ID given
    a product ID. It can also return an error, for example, 404 if the product is
    not found. Let's represent these two behaviors as two separate scenarios on our
    Gherkin feature file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以真正的BDD风格实现以下功能。产品服务上的“获取”API返回产品细节，例如描述和类别ID，给定产品ID。如果找不到产品，它也可以返回错误，例如404。让我们将这两种行为表示为我们的Gherkin特性文件上的两个独立场景。
- en: '**Feature**: `getProduct`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**特性**：“获取产品”'
- en: Get the product details given a product ID.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 获取产品ID的产品细节。
- en: '**Scenario 1**: The product ID is valid and exists. The product name and category
    it belongs to will be returned:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景1**：产品ID有效且存在。将返回产品名称和所属类别：'
- en: '`Given` the product service is running'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定产品服务正在运行
- en: '`When` the get product service is called with existing product ID `1`'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用现有产品ID 1调用获取产品服务时
- en: '`Then` we should get a response with HTTP status code `200`'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么我们应该得到一个带有HTTP状态码200的响应
- en: '`And` return product details with, name `Apples` and category `1`'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并返回产品细节，名称为“苹果”，类别为“1”
- en: '**Scenario 2**: The product ID is invalid or does not exist. An error should
    be returned:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景2**：产品ID无效或不存在。应返回错误：'
- en: '`Given` product service is running'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定产品服务正在运行
- en: '`When` the get product service is called with a non-existing product ID `456`'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用不存在的产品ID 456调用获取产品服务时
- en: '`Then` return a 404 not found status'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后返回404未找到状态
- en: '`And` return the error message `No product for ID 456`'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并返回错误消息“ID 456没有产品”
- en: Scenario 1 is a successful scenario where a product ID existing in the database
    is returned and validated against.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 场景1是一个成功的场景，其中返回并验证了数据库中存在的产品ID。
- en: Scenario 2 checks for a failure condition of an ID that does not exist in the
    database.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 场景2检查数据库中不存在的ID的失败情况。
- en: 'Each scenario is divided into multiple parts. For the happy-path scenario:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个场景分为多个部分。对于正常路径场景：
- en: '`Given` sets a precondition. In our case, it is simple enough: that the product
    service should be running.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定设置了一个前提条件。在我们的情况下，这很简单：产品服务应该正在运行。
- en: '`When` changes the state of the system and, in our case, it is making the request
    to the service by giving a product ID.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当改变系统的状态时，在我们的情况下，是通过提供产品ID向服务发出请求。
- en: '`Then` and `And` are the results that are expected on the system. In this case,
    we expect the service to return a `200` success code and the valid description
    and category codes for the given product.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后和并是系统预期的结果。在这种情况下，我们期望服务返回200成功代码，并为给定产品返回有效的描述和类别代码。
- en: As you may have noticed, this is the documentation of our service that can be
    understood by the business and the testing team as well as the developers. It
    is technology-agnostic; that is, it does not change if the implementation is done
    through Spring Boot, Ruby, or a .NET microservice.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，这是我们的服务的文档，可以被业务和测试团队以及开发人员理解。它是技术无关的；也就是说，如果通过Spring Boot、Ruby或.NET微服务进行实现，它不会改变。
- en: In the next section, we will map the service to the Spring Boot application
    that we developed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将映射到我们开发的Spring Boot应用程序的服务。
- en: Code coverage using JaCoCo
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JaCoCo进行代码覆盖
- en: JaCoCo is a code coverage library developed by the EclEmma team. JaCoCo embeds
    an agent in JVM which scans the code paths traversed and creates a report.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JaCoCo是由EclEmma团队开发的代码覆盖库。JaCoCo在JVM中嵌入代理，扫描遍历的代码路径并创建报告。
- en: This report can be imported into a wider DevOps code quality tool such as SonarQube.
    SonarQube is a platform that helps to manage code quality with numerous plugins
    and integrates nicely with DevOps processes (as we shall see in later chapters).
    It is open source but also has a commercial edition. It is a platform as it has
    multiple components, such as server (Compute Engine Server, Web Server, and Elasticsearch),
    database, and scanners that are language-specific.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此报告可以导入更广泛的DevOps代码质量工具，如SonarQube。SonarQube是一个平台，帮助管理代码质量，具有众多插件，并与DevOps流程很好地集成（我们将在后面的章节中看到）。它是开源的，但也有商业版本。它是一个平台，因为它有多个组件，如服务器（计算引擎服务器、Web服务器和Elasticsearch）、数据库和特定于语言的扫描器。
- en: Spring Boot Test
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot测试
- en: 'Spring Boot Test extends and simplifies the Spring-test module provided by
    the Spring Framework. Let''s look at the essential elements to write our acceptance
    tests and then we can revisit the details later in the chapter:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot测试扩展并简化了Spring框架提供的Spring-test模块。让我们看一下编写我们的验收测试的基本要素，然后我们可以在本章后面重新讨论细节：
- en: Copy the project that we created in [Chapter 4](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml), *Extending
    Your Cloud-Native Application* with HSQLDB and Hazelcast, as a new project for
    this chapter.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们在[第4章](678ed895-5878-4b5d-854a-f437840cdaa9.xhtml)中创建的项目，*使用HSQLDB和Hazelcast扩展您的云原生应用*，复制为本章的新项目。
- en: 'Include the dependency on Spring in the Maven POM file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Maven POM文件中包含Spring的依赖项：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you may have noticed, the `scope` is changed to `test`. This means that the
    dependency we are defining is not required for normal runtime, only for compilation
    and test execution.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，`scope`已更改为`test`。这意味着我们定义的依赖项不是正常运行时所需的，只是用于编译和测试执行。
- en: 'Add two more dependencies to Maven. We are downloading the libraries for Cucumber
    and its Java translation, along with `spring-boot-starter-test`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Maven添加另外两个依赖项。我们正在下载Cucumber及其Java翻译的库，以及`spring-boot-starter-test`：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `CucumberTest` class is the main class that starts the Cucumber tests:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`CucumberTest`类是启动Cucumber测试的主类：'
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`RunWith` tells the JUnit to use Spring''s testing support, which then uses
    Cucumber. We give the path to our `.feature` file, which contains the test cases
    in Gherkin discussed earlier.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`RunWith`告诉JUnit使用Spring的测试支持，然后使用Cucumber。我们给出我们的`.feature`文件的路径，其中包含了前面讨论的Gherkin中的测试用例。'
- en: The `Productservice.feature` file is the text file containing the scenarios
    in Gherkin language, as discussed earlier. We will have two test cases featured
    here. This file is present in the `src/test/resources` folder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Productservice.feature`文件是以Gherkin语言编写的包含场景的文本文件，如前所述。我们将在这里展示两个测试用例。该文件位于`src/test/resources`文件夹中。'
- en: 'The `CucumberTestSteps` class contains the translation of the steps in Gherkin
    to the equivalent Java code. Each step corresponds to a method and the methods
    get called based on the scenario construction in the Gherkin file. Let''s discuss
    all steps related to one use case:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`CucumberTestSteps`类包含了从Gherkin步骤到等效Java代码的翻译。每个步骤对应一个方法，方法根据Gherkin文件中的场景构造而被调用。让我们讨论与一个用例相关的所有步骤：'
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `@SpringBootTest` annotation tells the Spring Boot Framework that it is
    a test class. The `RANDOM_PORT` indicates the test service to start Tomcat on
    a random port for testing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SpringBootTest`注解告诉Spring Boot框架这是一个测试类。`RANDOM_PORT`表示测试服务在随机端口上启动Tomcat进行测试。'
- en: We inject an autowired `restTemplate` which will help access the HTTP/REST service
    and receive the response which will be tested.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注入一个自动装配的`restTemplate`，它将帮助访问HTTP/REST服务并接收将被测试的响应。
- en: 'Now, note the methods with the annotations `@Given`, `@When`, and `@Then`.
    Each method uses a regular expression to extract the variable (from the feature
    file) and uses it for assertions in the method. We have systematically tested
    this by doing the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请注意带有注释`@Given`、`@When`和`@Then`的方法。每个方法使用正则表达式从特性文件中提取变量，并在方法中用于断言。我们已经通过以下方式系统地测试了这一点：
- en: Checking whether the service is running first by accessing the `/health` (as
    we did for Spring Boot Actuator in [Chapter 2](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml),
    *Writing Your First Cloud-Native Application*).
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先通过访问`/health`（就像我们在[第2章](8a0a7cae-4aaa-460d-a760-59d0ffde9b48.xhtml)中为Spring
    Boot执行器所做的那样）检查服务是否正在运行。
- en: Calling the service with the product ID.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用产品ID调用服务。
- en: Checking whether the return code is `200` and the description and category of
    the response match the expected result.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查返回代码是否为`200`，并且响应的描述和类别是否与预期结果匹配。
- en: Running the tests.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试。
- en: 'Right-clicking the `CucumberTest.java` file and selecting Run As | JUnit Test:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`CucumberTest.java`文件，选择Run As | JUnit Test：
- en: '![](img/aeb8a942-20e4-4ae4-b5c2-f4ab4aca8499.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aeb8a942-20e4-4ae4-b5c2-f4ab4aca8499.png)'
- en: 'You will see the console fire up with the start-up messages. Finally, the JUnit
    will reflect the test results as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到控制台启动并显示启动消息。最后，JUnit将反映测试结果如下：
- en: '![](img/99043fcd-d743-4357-bab9-11aa1fdb232b.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99043fcd-d743-4357-bab9-11aa1fdb232b.png)'
- en: As an exercise, try adding the test cases to the inserting, updating, and deleting
    a product methods in the `ProductService` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，尝试向`ProductService`类中的插入、更新和删除产品方法添加测试用例。
- en: Integrating JaCoCo
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成JaCoCo
- en: 'Let''s integrate JaCoCo into our existing project:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将JaCoCo集成到我们现有的项目中：
- en: 'First, include the plugin that includes JaCoCo in the POM file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在POM文件中包含包含JaCoCo的插件：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The second and third step is to include pre-executions and post-executions into
    the preceding plugin.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步和第三步是将前置执行和后置执行包含到前面的插件中。
- en: The pre-execution prepares the agent to be configured and added to the command
    line.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预执行准备代理配置并添加到命令行。
- en: 'The post-execution ensures that the reports get created in the output folders:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后置执行确保报告在输出文件夹中创建：
- en: '[PRE5]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, the created command-line change has to be inserted into the `maven-surefire-plugin`
    as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建的命令行更改必须插入到`maven-surefire-plugin`中，如下所示：
- en: '[PRE6]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we are all set to run the coverage report. Right-click on the project
    and select Run As | Maven test to test the program, as shown in the following
    screenshot:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好运行覆盖报告了。右键单击项目，选择Run As | Maven test来测试程序，如下面的截图所示：
- en: '![](img/74d4a555-4b66-497f-8f7e-6ff1f20354f2.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74d4a555-4b66-497f-8f7e-6ff1f20354f2.png)'
- en: 'As the console gets filled with the Spring Boot initiation, you will find the
    following lines:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着控制台填满Spring Boot的启动，您会发现以下行：
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This tells us that two scenarios were executed with `8 Steps` (as before).
    But in addition, `coverage-reports` got generated and placed in the `target` directory:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这告诉我们有两种情况执行了`8步`（与之前一样）。但另外，`coverage-reports`也生成并放置在`target`目录中：
- en: '![](img/2927cb7b-c5d5-4c0a-bca2-d78fe6dd75bf.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2927cb7b-c5d5-4c0a-bca2-d78fe6dd75bf.png)'
- en: 'In the `site` folder, click on `index.html`; you will see the coverage report
    as follows:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`site`文件夹中，点击`index.html`；您将看到覆盖报告如下：
- en: '![](img/c10de181-60d7-476e-aa69-57ce441e6297.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c10de181-60d7-476e-aa69-57ce441e6297.png)'
- en: 'On investigation of the `product` package, you can see that the `ProductService`
    is only `24%` covered, as shown in the following screenshot:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在调查`product`包时，您可以看到`ProductService`只覆盖了`24%`，如下面的截图所示：
- en: '![](img/a3cb7b70-a1fb-4bc9-88cd-612d0f4af2bf.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3cb7b70-a1fb-4bc9-88cd-612d0f4af2bf.png)'
- en: 'The reason for this is that we have covered only the `getProduct` API in the
    service. The `insertProduct` and `updateProduct` have not been covered. This is
    showcased in the drill-down report in the following screenshot:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原因是我们只覆盖了服务中的`getProduct` API。`insertProduct`和`updateProduct`没有被覆盖。这在下面的钻取报告中展示：
- en: '![](img/5d010c06-257b-4370-b8ea-fa9de6bc6d7c.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d010c06-257b-4370-b8ea-fa9de6bc6d7c.png)'
- en: 'On the `getProduct` method, the coverage is complete. This is because, in two
    scenarios, we have covered the happy path as well as the error condition:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getProduct`方法上，覆盖率是完整的。这是因为在两种情况下，我们已经覆盖了正常路径以及错误条件：
- en: '![](img/bb6b3bad-be68-4019-b44f-c45e330552ea.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb6b3bad-be68-4019-b44f-c45e330552ea.png)'
- en: 'On the other hand, you will find that we have missed covering the branches
    in the `ExceptionHandler` class as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，您会发现我们错过了`ExceptionHandler`类中的分支覆盖，如下所示：
- en: '![](img/508a5194-6c30-4d13-8780-6d7da4326ab2.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/508a5194-6c30-4d13-8780-6d7da4326ab2.png)'
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the upcoming chapters, we will integrate the coverage report with the DevOps
    pipeline and see it working during CI and CD. However, first, let's look at the
    deployment mechanisms.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将把覆盖报告与DevOps管道集成，并在CI和CD期间看到它的工作。但首先，让我们看一下部署机制。
