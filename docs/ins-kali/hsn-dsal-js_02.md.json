["```js\nclass Queue {\n    constructor() {\n\n    }\n}\n```", "```js\n const qKey = {};\n const items = new WeakMap();\n\n class Queue {\n constructor() {\n\n        }\n    }\n```", "```js\nvar Queue = (() => {\n const qKey = {};\n const items = new WeakMap();\n\n class Queue {\n\n constructor() {\n items.set(qKey, []);\n        }\n\n add(element) {\n let queue = items.get(qKey);\n queue.push(element);\n        }\n\n remove() {\n let queue = items.get(qKey);\n return queue.shift();\n        }\n\n peek() {\n let queue = items.get(qKey);\n return queue[queue.length - 1];\n        }\n\n front() {\n let queue = items.get(qKey);\n return queue[0];\n        }\n\n clear() {\n items.set(qKey, []);\n        }\n\n size() {\n return items.get(qKey).length;\n        }\n    }\n\n return Queue;\n})();\n```", "```js\nvar simpleQueue = new Queue();\nsimpleQueue.add(10);\nsimpleQueue.add(20);\n\nconsole.log(simpleQueue.items); // prints undefined   console.log(simpleQueue.size()); // prints 2   console.log(simpleQueue.remove()); // prints 10   console.log(simpleQueue.size()); // prints 1   simpleQueue.clear();\n\nconsole.log(simpleQueue.size()); // prints 0\n```", "```js\nadd(newEl) {\n let queue = items.get(pqkey);\n let newElPosition = queue.length;\n\n if(!queue.length) {\n queue.push(newEl);\n return;\n    }\n\n for (let [i,v] of queue.entries()) {\n if(newEl.priority > v.priority) {\n newElPosition = i;\n break;\n        }\n    }\n\n queue.splice(newElPosition, 0, newEl);\n}\n```", "```js\nvar priorityQueue = new PriorityQueue();\n\npriorityQueue.add({ el : 1, priority: 1});\n\n// state of Queue\n// [1]\n//  ^\n\npriorityQueue.add({ el : 2, priority: 2});\n\n// state of Queue\n// [2, 1]\n//  ^\n\npriorityQueue.add({ el : 3, priority: 3});\n\n// state of Queue\n// [3, 2, 1]\n//  ^\n\npriorityQueue.add({ el : 4, priority: 3});\n\n// state of Queue\n// [3, 4, 2, 1]\n//     ^\n\npriorityQueue.add({ el : 5, priority: 2});\n\n// state of Queue\n// [3, 4, 2, 5, 1]\n//           ^\n```", "```js\npriorityQueue.add({ el : 6, priority: 1});\n\n// state of Queue\n// [3, 4, 2, 5, 1, 6]\n//                 ^  \n```", "```js\nconsole.log(priorityQueue.remove());\n\n// prints { el: 3, priority: 3}\n\n// state of Queue\n// [4, 2, 5, 1, 6]\n\nconsole.log(priorityQueue.remove());\n\n// prints { el: 4, priority: 3 }\n\n// state of Queue\n// [2, 5, 1, 6]\n\nconsole.log(priorityQueue.remove());\n\n// prints { el: 2, priority: 2 }\n\n// state of Queue\n// [5, 1, 6]\n\npriorityQueue.print();\n\n// prints { el: 5, priority: 2 } { el: 1, priority: 1 } { el: 6, priority: 1 }\n```", "```js\nnode -v\n```", "```js\nnpm init\n```", "```js\nnpm install body-parser express --save\n```", "```js\nvar express = require('express');\nvar app = express();\n\napp.listen(3000, function () {\n console.log('Chat Application listening on port 3000!')\n});\n```", "```js\napp.get('/', function (req, res) {\n    res.status(200).send('OK!')\n});\n```", "```js\nvar express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.get('/', function (req, res) {\n    res.status(200).send('OK!')\n});\n\napp.listen(3000, function () {\n console.log('Chat Application listening on port 3000!')\n});\n```", "```js\nvar express = require('express');\nvar router = express.Router();\n\nrouter.route('/')\n   .post(function(req, res) {\n\n         res.send(`Message received from: ${req.body.from} to ${req.body.to} with message ${req.body.message}`);\n\n});\n\nmodule.exports = router;\n```", "```js\nvar message = require('./routes/messages');\n\n...\n...\n...\n\napp.use('/message', message);\n```", "```js\nvar PriorityQueue = require('./priority-queue');\n\nvar Utils = (()=> {\n class Utils {\n\n constructor() {\n\n        }\n\n getUniqueFailureQueue(from, to) {\n // use from and to here to determine \n            // if a failure queue already \n            // exists or create a new one return new PriorityQueue();\n        }\n\n sendMessage(message) {\n return new Promise(function(resolve, reject) {\n // randomize successes and failure of message being\n                   sent  if(Math.random() < 0.1) {\n\n                    resolve(message)\n\n                } else {\n\n                    reject(message);\n\n                }\n\n            });\n        }\n\n    }\n\n return Utils;\n})();\n\nmodule.exports = Utils;\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar Utils = require('../utils/messaging-utils');\nconst msgUtils = new Utils();\n\nrouter.route('/')\n    .post(function(req, res) {\n const message = req.body.message;\n let failedMessageQueue;\n\n // try to send the message msgUtils.sendMessage(req.body)\n            .then(function() {\n\n                res.send(`Message received from: ${req.body.from} to ${req.body.to} with message ${req.body.message}`);\n\n            }, function() {\n\n failedMessageQueue = \n msgUtils.getUniqueFailureQueue(req.body.from,\n                   req.body.to);\n\n failedMessageQueue.add(message);\n\n // trigger failure protocol triggerFailureProtocol();\n\n         });\n```", "```js\nfunction triggerFailureProtocol() {\n\n var msg = failedMessageQueue.front();\n\n msgUtils.sendMessage(msg)\n        .then(function() {\n\n failedMessageQueue.remove();\n\n             res.send('OK!');\n\n         }, function(msg) {\n\n //retry failure protocol triggerFailureProtocol();\n\n         });\n}\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar Utils = require('../utils/messaging-utils');\nconst msgUtils = new Utils();\n\nrouter.route('/')\n    .post(function(req, res) {\n const message = req.body.message;\n let failedMessageQueue;\n\n // try to send the message msgUtils.sendMessage(req.body)\n            .then(function() {\n\n console.log(\"Sent Successfully : \" + message);\n\n res.send(`Message received from: ${req.body.from} to ${req.body.to} with message ${req.body.message}`);\n\n            }, function(msg) {\n\n console.log('Failed to send: ' + message);\n\n failedMessageQueue = \n msgUtils.getUniqueFailureQueue(req.body.from,\n                     req.body.to);\n\n failedMessageQueue.add(message);\n\n // trigger failure protocol triggerFailureProtocol();\n            });\n\n function triggerFailureProtocol() {\n\n var msg = failedMessageQueue.front();\n\n msgUtils.sendMessage(msg)\n                .then(function() {\n\n failedMessageQueue.remove();\n\n res.send('OK!');\n\n                 }, function(msg) {\n\n //retry failure protocol triggerFailureProtocol();\n\n                 });\n        }\n});\n\nmodule.exports = router;\n```", "```js\nfunction triggerFailureProtocol() {\n\n console.log('trigger failure protocol');\n\n // get front message from queue var frontMsgNode = failedMessageQueue.front();\n\n // low priority and hasnt hit retry threshold if (frontMsgNode.priority === 0 \n        && failureTriggerCount <= failureTriggerCountThreshold) {\n\n // try to send message msgUtils.sendMessage(frontMsgNode.message)\n            .then(function() {\n\n console.log('resend success');\n // success, so remove from queue failedMessageQueue.remove();\n\n // inform user                res.send('OK!');\n\n             }, function() {\n\n console.log('resend failure');\n\n // increment counter failureTriggerCount++;\n\n //retry failure protocol triggerFailureProtocol();\n\n             });\n\n    } else {\n\n console.log('resend failed too many times');\n\n // replace top message with higher priority message let prevMsgNode = failedMessageQueue.remove();\n\n prevMsgNode.priority = 1;\n\n // gets added to front failedMessageQueue.add(prevMsgNode);\n\n        res.status(500).send('Critical Server Error! Failed to send\n        message');\n\n    }\n}\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar Utils = require('../utils/messaging-utils');\nconst msgUtils = new Utils();\n\nrouter.route('/')\n    .post(function(req, res) {\n const message = req.body.message;\n let failedMessageQueue;\n let failureTriggerCount = 0;\n let failureTriggerCountThreshold = 3;\n let newMsgNode = {\n message: message,\n priority: 0\n        };\n\n // try to send the message msgUtils.sendMessage(req.body)\n            .then(function() {\n\n console.log('send success');\n\n // success                res.send(`Message received from: ${req.body.from} to ${req.body.to} with message ${req.body.message}`);\n\n         }, function() {\n\n console.log('send failed');\n\n // get unique queue failedMessageQueue = \n msgUtils.getUniqueFailureQueue(req.body.from,\n                    req.body.to);\n\n // get front message in queue var frontMsgNode = failedMessageQueue.front();\n // already has a critical failure if (frontMsgNode && frontMsgNode.priority === 1) {\n\n // notify support   // notify user                   res.status(500)\n                      .send('Critical Server Error! Failed to send\n                      message');\n\n               } else {\n\n // add more failedMessageQueue.add(newMsgNode);\n\n // increment count failureTriggerCount++;\n\n // trigger failure protocol triggerFailureProtocol();\n\n               }\n        });\n\n function triggerFailureProtocol() {\n\n console.log('trigger failure protocol');\n\n // get front message from queue var frontMsgNode = failedMessageQueue.front();\n\n // low priority and hasnt hit retry threshold if (frontMsgNode.priority === 0 \n               && failureTriggerCount <= failureTriggerCountThreshold) {\n\n // try to send message msgUtils.sendMessage(frontMsgNode.message)\n                   .then(function() {\n\n console.log('resend success');\n // success, so remove from queue failedMessageQueue.remove();\n\n // inform user                       res.send('OK!');\n\n                    }, function() {\n\n console.log('resend failure');\n\n // increment counter failureTriggerCount++;\n\n //retry failure protocol triggerFailureProtocol();\n\n                     });\n\n            } else {\n\n console.log('resend failed too many times');\n\n // replace top message with higher priority message let prevMsgNode = failedMessageQueue.remove();\n\n prevMsgNode.priority = 1;\n\n // gets added to front failedMessageQueue.add(prevMsgNode);\n\n                res.status(500)\n                   .send('Critical Server Error! Failed to send \n                   message');\n\n           }\n        }\n});\n\nmodule.exports = router;\n```", "```js\nconst a = [undefined, undefined, 10];\n```", "```js\n[undefined, undefined, 10];\n```", "```js\nconst b = [];\nb[3] = 10; // hole as we missed out index 0,1,2\n```", "```js\n[undefined x 3, 10];\n```", "```js\n// The JSArray describes JavaScript Arrays // Such an array can be in one of two modes: //           - fast, backing storage is a FixedArray and length <= elements.length(); //           Please note: push and pop can be used to grow and shrink the array. //         - slow, backing storage is a HashTable with numbers as keys. class JSArray: public JSObject {\n```", "```js\nvar CircularDequeue = (()=> {\n class CircularDequeue {\n constructor() {\n // pseudo realistic 2^x value this._size = 1024;\n this._length = 0;\n this._front = 0;\n this._data = [];\n        }\n\n push (item) {\n // get the length of the array var length = this._length;\n\n // calculate the end var i = (this._front + length) & (this._size - 1);\n\n // assign value to the current end of the data this._data[i] = item;\n\n // increment length for quick look up this._length = length + 1;\n\n // return new length return this._length;\n        }\n\n pop () {\n // get the length of the array var length = this._length;\n\n // calculate the end var i = (this._front + length - 1) & (this._size - 1);\n\n // copy the value to return var ret = this._data[i];\n\n // remove the value from data this._data[i] = undefined;\n\n // reduce length for look up  this._length = length - 1;\n\n // return value  return ret;\n       }\n\n shift () {\n // get the current front of queue var front = this._front;\n\n // capture return value var ret = this._data[front];\n\n // reset value in the data this._data[front] = undefined;\n\n // calculate the new front of the queue this._front = (front + 1) & (this._size - 1);\n\n // reduce the size this._length = this._length - 1;\n\n // return the value return ret;\n\n        }\n\n unshift (item) {\n // get the size var size = this._size;\n\n // calculate the new front var i = (((( this._front - 1 ) & ( size - 1) ) ^ size ) -\n            size );\n\n // add the item this._data[i] = item;\n\n // increment the length this._length = this._length + 1;\n\n // update the new front this._front = i;\n\n // return the acknowledgement of the addition of the new\n            item return this._length;\n        }\n    }\n\n return CircularDequeue;\n})();\n\nmodule.exports = CircularDequeue;\n```", "```js\nnpm install benchmark --save-dev\n```", "```js\nvar Benchmark = require(\"benchmark\");\nvar suite = new Benchmark.Suite();\nvar CircularDequeue = require(\"../utils/circular-dequeue.js\");\n\nvar cdQueue = new CircularDequeue();\nvar array = [];\n\nfor(var i=0; i < 10; i++) {\n cdQueue.push(i);\n array.push(i);\n}\n```", "```js\nsuite\n   .add(\"circular-queue push\", function(){\n cdQueue.push(cdQueue.shift());\n   })\n   .add(\"regular array push\", function(){\n array.push(array.shift());\n   })\n   .add(\"circular-queue pop\", function(){\n cdQueue.pop();\n   })\n   .add(\"regular array pop\", function(){\n array.pop();\n   })\n   .add(\"circular-queue unshift\", function(){\n cdQueue.unshift(cdQueue.shift());\n   })\n   .add(\"regular array unshift\", function(){\n array.unshift( array.shift());\n   })\n   .add(\"circular-queue shift\", function(){\n cdQueue.shift();\n   })\n   .add(\"regular array shift\", function(){\n array.shift();\n   })\n   .on(\"cycle\", function(e) {\n console.log(\"\" + e.target);\n   })\n   .run();\n```", "```js\n.add(\"regular array push\", function(){\n array.push(array.shift());\n});\n```", "```js\n\"scripts\": {\n \"start\": \"node index.js\",\n \"test\": \"node tests/benchmark.js\" },\n```", "```js\nnpm run test\n```", "```js\nvar i = 1000;\n\nwhile(i--){\n cdQueue.push(i);\n array.push(i);\n}\n```", "```js\nsuite\n  .add(\"regular array push\", function(){\n array.push(array.shift());\n   })\n   .on(\"cycle\", function(e) {\n console.log(\"\" + e.target);\n console.log(process.memoryUsage());\n   })\n   .run();\n```", "```js\nsuite\n  .add(\"simple queue push\", function(){\n simpleQueue.add(simpleQueue.remove());\n   })\n   .on(\"cycle\", function(e) {\n console.log(\"\" + e.target);\n console.log(process.memoryUsage());\n   })\n   .run();\n```"]