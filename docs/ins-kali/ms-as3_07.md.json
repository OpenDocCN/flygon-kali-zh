["```kt\nbuildscript { \n    ext.kotlin_version = '1.1.3-2' \n\n    repositories { \n        google() \n        jcenter() \n    } \n    dependencies { \n        classpath 'com.android.tools.build:gradle:3.0.0-alpha9' \n        classpath \"org.jetbrains.kotlin:kotlin-gradle-\n                      plugin:$kotlin_version\" \n    } \n} \n\nallprojects { \n    repositories { \n        google() \n        jcenter() \n    } \n} \n\ntask clean(type: Delete) { \n    delete rootProject.buildDir \n} \n```", "```kt\nclass ItemDetailFragment : Fragment() { \n\n    private var mItem: DummyContent.DummyItem? = null \n\n    public override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n\n        if (getArguments().containsKey(ARG_ITEM_ID)) { \n            mItem = DummyContent.ITEM_MAP.\n                     get(getArguments().getString(ARG_ITEM_ID)) \n\n            val activity = this.getActivity() \n            val appBarLayout = activity.findViewById<View>\n                   (R.id.toolbar_layout) as CollapsingToolbarLayout \n            if (appBarLayout != null) { \n                appBarLayout!!.setTitle(mItem!!.content) \n            } \n        } \n    } \n\n    public override fun onCreateView(inflater: LayoutInflater?, \n         container: ViewGroup?, savedInstanceState: Bundle?): View? { \n        val rootView = inflater!!.inflate(R.layout.item_detail, \n                               container, false) \n\n        if (mItem != null) { \n            (rootView.findViewById(R.id.item_detail) as \n                         TextView).setText(mItem!!.details) \n        } \n\n        return rootView \n    } \n\n    companion object { \n        val ARG_ITEM_ID = \"item_id\" \n    } \n} \n```", "```kt\n@Override \nprotected void onCreate(Bundle savedInstanceState) { \n    super.onCreate(savedInstanceState); \n    setContentView(R.layout.activity_main); \n    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n    setSupportActionBar(toolbar); \n\n    FloatingActionButton fab = (FloatingActionButton) \n                 findViewById(R.id.fab); \n    fab.setOnClickListener(new View.OnClickListener() { \n        @Override \n        public void onClick(View view) { \n            Snackbar.make(view, \"Replace with your own action\", \n                   Snackbar.LENGTH_LONG) \n                    .setAction(\"Action\", null).show(); \n        } \n    }); \n\n    DrawerLayout drawer = (DrawerLayout) \n              findViewById(R.id.drawer_layout); \n    ActionBarDrawerToggle toggle = new ActionBarDrawerToggle( \n            this, drawer, toolbar, R.string.navigation_drawer_open, \n                  R.string.navigation_drawer_close); \n                  drawer.addDrawerListener(toggle); \n                  toggle.syncState(); \n\n    NavigationView navigationView = (NavigationView) \n              findViewById(R.id.nav_view); \n    navigationView.setNavigationItemSelectedListener(this); \n} \n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) { \n    super.onCreate(savedInstanceState) \n    setContentView(R.layout.activity_main) \n    setSupportActionBar(toolbar) \n\n    fab.setOnClickListener { view -> \n        Snackbar.make(view, \"Replace with your own action\", \n                  Snackbar.LENGTH_LONG) \n                .setAction(\"Action\", null).show() \n    } \n\n    val toggle = ActionBarDrawerToggle( \n            this, drawer_layout, toolbar, \n            R.string.navigation_drawer_open, \n            R.string.navigation_drawer_close) \n    drawer_layout.addDrawerListener(toggle) \n    toggle.syncState() \n\n    nav_view.setNavigationItemSelectedListener(this) \n} \n```", "```kt\napply plugin: 'com.android.application' \n\napply plugin: 'kotlin-android' \n\napply plugin: 'kotlin-android-extensions' \n```", "```kt\n <TextView \n        android:id=\"@+id/text_view\" \n       . . . /> \n```", "```kt\ntext_view.setText(\"Some text\") \n```", "```kt\nimport kotlinx.android.synthetic.main.some_layout.* \n```", "```kt\nimport kotlinx.android.synthetic.main.some_activity.*\nimport kotlinx.android.synthetic.main.some_content.*\n```", "```kt\nDefaultConfig { . . . externalNativeBuild { cmake { cppFlags \"-frtti -fexceptions\" } } }\n```", "```kt\ndependencies {\n ...\n provided 'com.google.android.things:androidthings:0.5-devpreview'\n}\n```", "```kt\n<application ...>\n <uses-library android:name=\"com.google.android.things\"/>\n ...\n</application>\n```", "```kt\ndependencies { provided 'com.google.android.things:androidthings:0.4-devpreview' \n  compile 'com.google.firebase:firebase-core:9.4.0'\n  compile 'com.google.firebase:firebase-database:9.4.0'\n  compile 'com.google.android.things.contrib:driver-button:0.3'\n  compile 'com.google.apis: google-api-services-vision:v1-rev22-1.22.0'\n  compile 'com.google.api-client: google-api-client-android:1.22.0' exclude module: 'httpclient'\n  compile 'com.google.http-client: google-http-client-gson:1.22.0' exclude module: 'httpclient' }\n```", "```kt\n<manifest  package=\"com.example.androidthings.doorbell\">\n\n  <uses-permission android:name=\"android.permission.CAMERA\" /> \n  <uses-permission android:name=\"android.permission.INTERNET\" />\n  <uses-permission android:name=\"com.google.android.things.permission .MANAGE_INPUT_DRIVERS\" />\n\n  <application android:allowBackup=\"true\" android:icon=\"@android:drawable/sym_def_app_icon\" android:label=\"@string/app_name\">\n    <uses-library android:name=\"com.google.android.things\" />\n    <activity android:name=\".DoorbellActivity\">\n\n    <intent-filter>\n      <action android: name=\"android.intent.action.MAIN\" />\n      <category android: name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n\n    <intent-filter> \n <action android: name=\"android.intent.action.MAIN\" />\n <category android: name=\"android.intent.category.IOT_LAUNCHER\" />\n <category android: name=\"android.intent.category.DEFAULT\" />\n </intent-filter>\n\n    </activity>\n  </application>\n</manifest>\n```"]