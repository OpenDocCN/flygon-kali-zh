- en: 3\. Developing the UI with Fragments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 使用片段开发UI
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter covers fragments and the fragment lifecycle. It demonstrates how
    to use them to build efficient and dynamic layouts that respond to different screen
    sizes and configurations, and allow you to divide your UI into different sections.
    By the end of this chapter, you will be able to create static and dynamic fragments,
    pass data to and from fragments and activities, and use the Jetpack Navigation
    component to detail how fragments fit together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了片段和片段的生命周期。它演示了如何使用它们来构建高效和动态的布局，以响应不同的屏幕尺寸和配置，并允许您将UI划分为不同的部分。在本章结束时，您将能够创建静态和动态片段，将数据传递到片段和活动，并使用Jetpack导航组件详细说明片段如何组合在一起。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we explored the Android **Activity Lifecycle** and
    looked into how it is used in apps to navigate between screens. We also analyzed
    various types of launch modes that defined how transitioning between screens happened.
    In this chapter, you'll explore **fragments**. A fragment is a section, portion,
    or, as the name implies, fragment of an Android activity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了Android**活动生命周期**，并研究了它在应用程序中用于在屏幕之间导航的方式。我们还分析了定义了屏幕之间过渡方式的各种启动模式。在本章中，您将探索**片段**。片段是Android活动的一部分、部分或片段，正如其名称所暗示的那样。
- en: Throughout the chapter, you'll learn how to use fragments, see how they can
    exist in more than one activity, and discover how multiple fragments can be used
    in one activity. You'll start by adding simple fragments to an activity and then
    progress to learning about the difference between static and dynamic fragments.
    Fragments can be used to simplify creating layouts for Android tablets that have
    larger form factors using dual-pane layouts. For example, if you have an average-sized
    phone screen and you want to include a list of news stories, you might only have
    enough space to display the list. If you viewed the same list of stories on a
    tablet, you'd have more space available so you could display the same list and
    also a story itself to the right of the list. Each of these different areas of
    the screen can use a fragment. You can then use the same fragment on both the
    phone and the tablet. You benefit from reusing and simplifying the layouts and
    don't have to repeat creating similar functionality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个章节中，您将学习如何使用片段，看到它们可以存在于多个活动中，并发现多个片段可以在一个活动中使用。您将首先向活动添加简单的片段，然后进一步了解静态和动态片段之间的区别。片段可用于简化使用双面板布局的Android平板电脑的更大形态因素创建布局。例如，如果您有一个中等大小的手机屏幕，并且想要包含一个新闻故事列表，您可能只有足够的空间来显示列表。如果您在平板电脑上查看相同的故事列表，您将有更多的可用空间，因此您可以显示相同的列表，还可以在列表右侧显示故事本身。屏幕的每个不同区域都可以使用一个片段。然后您可以在手机和平板电脑上使用相同的片段。您可以从重用和简化布局中受益，并且不必重复创建类似的功能。
- en: Once you've explored how fragments are created and used, you'll then learn how
    to organize your user journeys with fragments. You'll apply some established practices
    for using fragments in this way. Finally, you'll learn how to simplify fragment
    use by creating a navigation graph with the Android Jetpack Navigation component,
    which allows you to specify linking fragments together with destinations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您探索了如何创建和使用片段，您将学习如何使用片段组织用户旅程。您将应用一些已建立的实践方法来使用片段。最后，您将学习如何通过使用Android Jetpack导航组件创建导航图来简化片段使用，该组件允许您指定将片段与目的地链接在一起。
- en: Let's get started with the fragment lifecycle.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始学习片段的生命周期。
- en: The Fragment Lifecycle
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 片段生命周期
- en: A fragment is a component with its own lifecycle. Understanding the **fragment
    lifecycle** is critical as it provides callbacks at certain stages of fragment
    creation, running state, and destruction where you can configure the initialization,
    display, and cleanup. Fragments run in an activity, and the fragment's lifecycle
    is bound to the activity's lifecycle.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 片段是具有自己生命周期的组件。了解**片段生命周期**至关重要，因为它在片段创建、运行状态和销毁的某些阶段提供回调，您可以在其中配置初始化、显示和清理。片段在活动中运行，片段的生命周期与活动的生命周期绑定。
- en: 'In many ways, the fragment lifecycle is very similar to the activity lifecycle,
    and at first glance, it appears that the former replicates the latter. There are
    as many callbacks that are the same or similar in the fragment lifecycle as there
    are in the activity lifecycle, such as `onCreate(savedInstanceState: Bundle?)`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '在许多方面，片段的生命周期与活动的生命周期非常相似，乍一看，似乎前者复制了后者。在片段生命周期中有与活动生命周期相同或相似的回调，例如`onCreate(savedInstanceState:
    Bundle?)`。'
- en: The fragment lifecycle is tied to the activity lifecycle, so wherever fragments
    are used, the fragment callbacks are interleaved with the activity callbacks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 片段的生命周期与活动的生命周期紧密相连，因此无论在何处使用片段，片段回调都与活动回调交错。
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The full sequence of the interaction between fragments and activities is illustrated
    in the official docs: [https://developer.android.com/guide/fragments/lifecycle](https://developer.android.com/guide/fragments/lifecycle)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 片段和活动之间的互动完整顺序在官方文档中有所说明：[https://developer.android.com/guide/fragments/lifecycle](https://developer.android.com/guide/fragments/lifecycle)
- en: The same steps are gone through to initialize the fragment and prepare for it
    to be displayed to the user before being available for the user to interact with.
    The same teardown steps that an activity goes through happen to the fragment as
    well when the app is backgrounded, hidden, and exited. Fragments, like activities,
    have to extend/derive from a parent `Fragment` class, and you can choose which
    callbacks to override depending on your use case. Let's now explore these callbacks,
    the order they appear in, and what they do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化片段并准备将其显示给用户之前，需要经历相同的步骤，然后才能供用户进行交互。当应用程序转入后台、隐藏和退出时，片段也会经历与活动相同的拆卸步骤。与活动一样，片段必须从父`Fragment`类扩展/派生，并且您可以根据您的用例选择要覆盖的回调。现在让我们探索这些回调，它们出现的顺序以及它们的作用。
- en: onAttach
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: onAttach
- en: '`override fun onAttach(context: Context)`: This is the point where your fragment
    becomes linked to the activity it is used in. It allows you to reference the activity,
    although at this stage neither the fragment nor the activity has been fully created.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onAttach(context: Context)`: 这是您的片段与其所用活动关联的时刻。它允许您引用活动，尽管在此阶段片段和活动都尚未完全创建。'
- en: onCreate
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建
- en: '`override fun onCreate(savedInstanceState: Bundle?)`: This is where you do
    any initialization of your fragment. This is not where you set the layout of your
    fragment, as at this stage, there is no UI available to display and no `setContentView`
    available as there is in an activity. As is the same in the activity''s `onCreate()`
    function, you can use the `savedInstanceState` parameter to restore the state
    of the fragment when it is being re-created.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onCreate(savedInstanceState: Bundle?)`: 在此处进行片段的任何初始化。这不是设置片段布局的地方，因为在此阶段，没有可用于显示的UI，也没有像活动中的`setContentView`那样可用。与活动的`onCreate()`函数一样，您可以使用`savedInstanceState`参数在片段被重新创建时恢复片段的状态。'
- en: onCreateView
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: '`override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
    savedInstanceState: Bundle?): View?`: Now, this is where you get to create the
    layout of your fragment. The most important thing to remember here is that instead
    of setting the layout (as is the case with an activity), the fragment will actually
    return the layout `View?` from this function. The views you have in your layout
    are available to refer to here, but there are a few caveats. You need to create
    the layout before you can reference the views contained within it, which is why
    it''s preferred to do view manipulation in `onViewCreated`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
    savedInstanceState: Bundle?): View?`: 现在，您可以创建片段的布局。在这里最重要的是要记住，与活动设置布局不同，片段实际上会从此函数返回布局`View?`。您的布局中的视图可以在此引用，但有一些注意事项。您需要在引用其中包含的视图之前创建布局，这就是为什么最好在`onViewCreated`中进行视图操作。'
- en: onViewCreated
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图创建
- en: '`override fun onViewCreated(view View, savedInstanceState: Bundle?)`: This
    callback is the one in between your fragment being fully created and being visible
    to the user. It''s where you''ll typically set up your views and add any functionality
    and interactivity to these views. This might be adding a `click listener` to a
    button and then calling a function when it''s clicked.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onViewCreated(view View, savedInstanceState: Bundle?)`: 此回调位于片段完全创建和对用户可见之间。在这里，您通常会设置视图并向这些视图添加任何功能和交互性。这可能是向按钮添加`click
    listener`，然后在单击时调用函数。'
- en: onActivityCreated
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动已创建
- en: '`override fun onActivityCreated(context: Context)`: Called immediately after
    the activity''s `onCreate` has been run. Most of the initialization of the view
    state of the fragment will have been done, and this is the place to do the final
    setup if required.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onActivityCreated(context: Context)`: 在活动的`onCreate`运行后立即调用。大部分片段的视图状态初始化将已完成，如果需要，这是进行最终设置的地方。'
- en: onStart
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始
- en: '`override fun onStart()`: This is called when the fragment is about to become
    visible to the user but is not yet available for the user to interact with.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onStart()`: 当片段即将对用户可见但尚不可供用户交互时调用此方法。'
- en: onResume
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恢复
- en: '`override fun onResume()`: At the end of this call, your fragment is available
    for the user to interact with. Normally, there is minimal setup or functionality
    defined in this callback as when the app goes into the background and then comes
    back into the foreground, this callback will always be called. Therefore, you
    don''t want to have to needlessly repeat the setup of the fragment when this could
    be done with a callback that isn''t run when the fragment becomes visible.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onResume()`: 在此调用结束时，您的片段将可供用户交互。通常，在此回调中定义的设置或功能很少，因为当应用程序进入后台然后再次进入前台时，此回调将始终被调用。因此，当片段变为可见时，您不希望不必要地重复片段的设置。'
- en: onPause
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停
- en: '`override fun onPause()`: Like its counterpart, `onPause()` in an activity
    signals that your app is going into the background or has been partially covered
    by something else on the screen. Use this to save any changes to the fragment
    state.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onPause()`: 与其对应的活动中的`onPause()`一样，表示您的应用程序进入后台或在屏幕上被其他内容部分覆盖。使用此方法保存对片段状态的任何更改。'
- en: onStop
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止
- en: '`override fun onStop()`: The fragment is no longer visible at the end of this
    call and goes into the background.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onStop()`: 在此调用结束时，片段不再可见并进入后台。'
- en: onDestroyView
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁视图
- en: '`override fun onDestroyView()`: This is usually called for doing final clean-up
    before the fragment is destroyed. You should use this callback if it is necessary
    to clean-up any resources. If the fragment is pushed to the back stack and retained
    then it can also be called without destroying the fragment. On completion of this
    callback, the fragment''s layout view is removed.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onDestroyView()`: 这通常用于在片段被销毁之前进行最终清理。如果需要清理任何资源，应该使用此回调。如果片段被推送到后退栈并保留，则也可以在不销毁片段的情况下调用它。在完成此回调后，片段的布局视图将被移除。'
- en: onDestroy
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁
- en: '`override fun onDestroy()`: The fragment is being destroyed. This can occur
    because the app is being killed or because this fragment is being replaced by
    another fragment.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onDestroy()`: 片段正在被销毁。这可能是因为应用程序被终止，也可能是因为此片段被另一个片段替换。'
- en: onDetach
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离
- en: '`override fun onDetach()`: This is called when the fragment has been detached
    from its activity.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`override fun onDetach()`: 当片段已从其活动中分离时调用此方法。'
- en: 'There are more fragment callbacks, but these are the ones you will use for
    the majority of cases. Typically, you''ll only use a subset of these callbacks:
    `onAttach()` to associate an activity with the fragment, `onCreate` to initialize
    the fragment, `onCreateView` to set the layout, and then `onViewCreated`/`onActivityCreated`
    to do further initialization, and perhaps `onPause()` to do some cleanup.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的片段回调，但这些是您在大多数情况下会使用的。通常，您只会使用这些回调的一个子集：`onAttach()`将活动与片段关联，`onCreate`初始化片段，`onCreateView`设置布局，然后`onViewCreated`/`onActivityCreated`进行进一步初始化，也许`onPause()`进行一些清理。
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Further details of these callbacks can be found in the official documentation
    at [https://developer.android.com/guide/fragments](https://developer.android.com/guide/fragments).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些回调的更多细节可以在官方文档中找到：[https://developer.android.com/guide/fragments](https://developer.android.com/guide/fragments)。
- en: Now that we've gone through some of the theory of the fragment lifecycle and
    how it is affected by the host activity's lifecycle, let's see those callbacks
    being run in action.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了片段生命周期的一些理论以及它如何受到宿主活动生命周期的影响，让我们看看这些回调是如何运行的。
- en: 'Exercise 3.01: Adding a Basic Fragment and the Fragment Lifecycle'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.01：添加基本片段和片段生命周期
- en: 'In this exercise, we will create and add a basic fragment to an app. The aim
    of this exercise is to gain familiarity with how fragments are added to an activity
    and the layout they display. To do this, you will create a new blank fragment
    with a layout in Android Studio. You will then add the fragment to the activity
    and verify the fragment has been added by the display of the fragment layout.
    Perform the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建并添加一个基本片段到一个应用程序。这个练习的目的是熟悉如何将片段添加到活动中以及它们显示的布局。为此，您将在Android Studio中创建一个新的空白片段和布局。然后将片段添加到活动，并通过片段布局的显示来验证片段是否已添加。执行以下步骤：
- en: Create an application in Android Studio with an empty activity called `Fragment
    Lifecycle` with package name '`com.example.fragmentlifecyle`'.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`Fragment Lifecycle`的空活动应用程序，包名为`com.example.fragmentlifecyle`。
- en: 'Next, create a new fragment by going to `File` | `New` | `Fragment (Blank)`.
    You just want to create a plain vanilla fragment at this stage, so you use the
    `Fragment (Blank)` option. When you''ve selected this option, you will be presented
    with the screen shown in *Figure 3.1*:![Figure 3.1: Creating a new fragment'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过转到`文件`|`新建`|`片段（空白）`来创建一个新的片段。在这个阶段，您只想创建一个普通的片段，所以您使用`片段（空白）`选项。当您选择了这个选项后，您将看到*图3.1*中显示的屏幕：![图3.1：创建一个新的片段
- en: '](img/B15216_03_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_01.jpg)'
- en: 'Figure 3.1: Creating a new fragment'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：创建一个新的片段
- en: Rename the fragment to `MainFragment` and the layout to `fragment_main`. Then,
    press `Finish` and the Fragment class will be created and opened. There is one
    function which has been added `onCreateView` (displayed below) which inflates
    the layout file used for the fragment.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将片段重命名为`MainFragment`，布局重命名为`fragment_main`。然后，按`Finish`，片段类将被创建并打开。已添加了一个函数`onCreateView`（如下所示），它会填充片段使用的布局文件。
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you open up `fragment_main.xml` layout file, you''ll see the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您打开`fragment_main.xml`布局文件时，您会看到以下代码：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A simple layout has been added with a `TextView` and some example text using
    `@string/hello_blank_fragment`. This string resource has the text `hello blank
    fragment`. As the `layout_width` and `layout_height` are specified as `match_parent`,
    the `TextView` will occupy the whole of the screen. The text itself, however,
    will be added at the top left of the view with the default position.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的布局已经添加了一个`TextView`和一些示例文本，使用了`@string/hello_blank_fragment`。这个字符串资源包含文本`hello
    blank fragment`。由于`layout_width`和`layout_height`被指定为`match_parent`，`TextView`将占据整个屏幕。然而，文本本身将被添加到视图的左上角，使用默认位置。
- en: 'Add the `android:gravity="center"` attribute and value to the `TextView` so
    that the text appears in the center of the screen:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`android:gravity="center"`属性和值到`TextView`，以便文本出现在屏幕中央：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you run up the UI now, you''ll see the "Hello World!" display in *Figure
    3.2*:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行UI，您将看到“Hello World!”显示在*图3.2*中：
- en: '![Figure 3.2: Initial app layout display without a fragment added'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2：没有添加片段的初始应用布局显示'
- en: '](img/B15216_03_02.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_02.jpg)'
- en: 'Figure 3.2: Initial app layout display without a fragment added'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：没有添加片段的初始应用布局显示
- en: Well, you can see some `Hello World!` text, but not the `hello blank fragment`
    text you might have been expecting. The fragment and its layout do not automatically
    get added to an activity when you create it. This is a manual process.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，您可以看到一些`Hello World!`文本，但可能没有您期望的`hello blank fragment`文本。当您创建活动时，片段及其布局不会自动添加到活动中。这是一个手动的过程。
- en: 'Open the `activity_main.xml` file and replace the contents with the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，并用以下内容替换其中的内容：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Just as there are view declarations you can add to layouts in XML, there is
    also a `fragment` element. You've added the fragment to the `ConstraintLayout`
    with constraints of `match_parent` for the `layout_width` and `layout_height`
    so it will occupy the whole of the screen. The most important `xml` attribute
    to examine here is `android:name`. It's here where you specify the fully qualified
    name of the package and `Fragment` class that you are going to add to the layout
    with `com.example.fragmentlifecycle.MainFragment`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您可以在XML布局中添加视图声明一样，还有一个`fragment`元素。您已经使用`match_parent`的约束将片段添加到`ConstraintLayout`中，因此它将占据整个屏幕。这里要检查的最重要的`xml`属性是`android:name`。在这里，您指定要添加到布局中的包和`Fragment`类的完全限定名称，使用`com.example.fragmentlifecycle.MainFragment`。
- en: 'Now run the app, and you will see the output shown in *Figure 3.3*:![Figure
    3.3: App layout display with a fragment added'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序，您将看到*图3.3*中显示的输出：![图3.3：添加了片段的应用布局显示
- en: '](img/B15216_03_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_03.jpg)'
- en: 'Figure 3.3: App layout display with a fragment added'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：添加了片段的应用布局显示
- en: This proves that your fragment with the text `Hello blank fragment` has been
    added to the activity and the layout you defined is being displayed. Next, you'll
    examine the callback methods between the activity and the fragment and how this
    happened.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了您的片段文本`Hello blank fragment`已添加到活动中，并且您定义的布局正在显示。接下来，您将检查活动和片段之间的回调方法以及发生这种情况的原因。
- en: 'Open up the `MainFragment` class and add a `TAG` constant to the companion
    object with the value `"MainFragment"` to identify the class. Then add/update
    the functions with appropriate log statements. You will need to add the imports
    for the ''Log'' statement and the ''context'' to the imports at the top of the
    class. The code snippet below is truncated. Follow the link shown to see the full
    code block you need to use:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainFragment`类，并在伴生对象中添加一个`TAG`常量，值为`"MainFragment"`，以标识该类。然后添加/更新适当的日志语句的函数。您需要在类顶部的导入中添加'Log'语句和'context'的导入。下面的代码片段已经被截断。点击链接查看您需要使用的完整代码块：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, open the `MainActivity` class and add the common callback methods `onStart`
    and `onResume`. Then add a companion object with a `TAG` constant with the value
    `"MainActivity"` as shown below and also add the Log import to the top of the
    class:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`MainActivity`类，并添加常见的回调方法`onStart`和`onResume`。然后添加一个伴生对象，其中包含一个值为`"MainActivity"`的`TAG`常量，如下所示，并在类顶部添加Log导入：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open up the `Logcat` window. (Just to remind you, it can be accessed by clicking
    the `Logcat` tab at the bottom of the screen and also from the toolbar with `View`
    | `Tool Windows` | `Logcat`). As both `MainActivity` and `MainFragment` start
    with the text `Main`, you can type `Main` in the search box to filter the logs
    to only show statements with this text. Run the app, and you should see the following:![Figure
    3.4: Logcat statements shown when starting the app'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Logcat`窗口。（提醒一下，可以通过单击屏幕底部的`Logcat`选项卡或者通过工具栏的`View` | `Tool Windows` | `Logcat`来访问它）。由于`MainActivity`和`MainFragment`都以文本`Main`开头，您可以在搜索框中输入`Main`以过滤日志，只显示带有此文本的语句。运行应用程序，您应该看到以下内容：![图3.4：启动应用程序时显示的Logcat语句
- en: '](img/B15216_03_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_04.jpg)'
- en: 'Figure 3.4: Logcat statements shown when starting the app'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：启动应用程序时显示的Logcat语句
- en: What's interesting here is that the first few callbacks are from the fragment.
    It is linked to the activity it has been placed in with the `onAttach` callback.
    The fragment is initialized and its view is displayed in `onCreate` and `onCreateView`,
    before another callback, `onViewCreated`, is called, confirming that the fragment
    UI is ready to be displayed. This is before the activity's `onCreate` method is
    called. This makes sense as the activity creates its UI based on what it contains.
    As this is a fragment that defines its own layout, the activity needs to know
    how to measure, lay out, and draw the fragment as it does in the `onCreate` method.
    Then, the fragment receives confirmation that this has been done with the `onActivityCreated`
    callback before both the fragment and activity start to display the UI in `onStart`
    before preparing the user to interact with it after their respective `onResume`
    callbacks have finished.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，前几个回调来自片段。它通过`onAttach`回调与其放置的活动相连。片段在`onCreate`和`onCreateView`中初始化并显示其视图，然后调用另一个回调`onViewCreated`，确认片段UI已准备好显示。这是在活动的`onCreate`方法被调用之前。这是有道理的，因为活动根据其包含的内容创建其UI。由于这是一个定义了自己布局的片段，活动需要知道如何测量、布局和绘制片段，就像在`onCreate`方法中一样。然后，在`onActivityCreated`回调中，片段收到确认已完成这一点，然后在它们各自的`onResume`回调完成后，片段和活动开始显示UI。
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The interaction between the activity and fragment lifecycles detailed previously
    is for the case when static fragments, which are those defined in the layout of
    an activity, are created. For dynamic fragments, which can be added when the activity
    is already running, the interaction can differ.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 先前详细介绍的活动和片段生命周期之间的交互是针对静态片段的情况，即在活动的布局中定义的片段。对于动态片段，可以在活动已经运行时添加，交互可能会有所不同。
- en: So, now that the fragment and the containing activity are shown, what happens
    when the app is backgrounded or closed? The callbacks are still interleaved when
    the fragment and activity are paused, stopped, and finished.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在片段和包含的活动都显示出来了，当应用程序转入后台或关闭时会发生什么呢？当片段和活动暂停、停止和完成时，回调仍然交错进行。
- en: 'Add the following callbacks to the `MainFragment` class:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下回调添加到`MainFragment`类中：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then add these callbacks to `MainActivity`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将这些回调添加到`MainActivity`中：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Build the app up, and once it is running, you''ll see the callbacks from before
    starting both the fragment and activity. You can use the dustbin icon at the top
    left of the `Logcat` window to clear the statements. Then close the app and review
    the output log statements:![Figure 3.5: Logcat statements shown when closing the
    app'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建应用程序，一旦它运行起来，你会看到之前的回调同时启动片段和活动。您可以使用`Logcat`窗口左上角的垃圾桶图标来清除语句。然后关闭应用程序并查看输出日志语句：![图3.5：关闭应用程序时显示的Logcat语句
- en: '](img/B15216_03_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_05.jpg)'
- en: 'Figure 3.5: Logcat statements shown when closing the app'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：关闭应用程序时显示的Logcat语句
- en: The `onPause` and `onStop` statements are as you might expect in that the fragment
    gets notified of these callbacks first as it is contained within the activity.
    You can think of this as being inwards to outwards in that the child elements
    are notified before the containing parent, so the parent knows how to respond.
    The fragment is then torn down, removed from the activity, and then destroyed
    with the `onDestroyView`, `onDestroy`, and `onDetach` functions before the activity
    itself is destroyed after any final clean-up is done in `onDestroy`. It doesn't
    make sense for the activity to finish until all the component parts that make
    up the activity are themselves removed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`onPause`和`onStop`语句与您预期的一样，因为片段首先收到这些回调，因为它包含在活动中。您可以将其视为从内向外的通知，即在通知包含父项之前，子元素会收到通知，因此父项知道如何响应。然后片段被拆除，从活动中移除，然后在`onDestroyView`，`onDestroy`和`onDetach`函数中被销毁，之后在`onDestroy`中完成任何最终清理后，活动本身被销毁。在活动的组成部分被移除之前，活动完成是没有意义的。'
- en: The full fragment lifecycle callbacks and how they relate to the activity callbacks
    is a complicated area of Android because which callbacks are applied in which
    situation can differ quite substantially. To view a more detailed overview, see
    the official documentation at [https://developer.android.com/guide/fragments](https://developer.android.com/guide/fragments).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的片段生命周期回调及其与活动回调的关系是Android的一个复杂领域，因为在不同情况下应用哪些回调可能会有相当大的不同。要查看更详细的概述，请参阅官方文档[https://developer.android.com/guide/fragments](https://developer.android.com/guide/fragments)。
- en: For the majority of situations, you will only use the preceding fragment callbacks.
    This example demonstrates both how self-contained fragments are in their creation,
    display, and destruction, and also their interdependence on the containing Activity.
    Through the `onAttach` and `onActivityCreated` callbacks, they can access both
    the containing activity and its state, which will be demonstrated in the following example.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，您只会使用前面的片段回调。此示例演示了片段在创建、显示和销毁时的自包含性，以及它们对包含活动的相互依赖性。通过`onAttach`和`onActivityCreated`回调，它们可以访问包含活动及其状态，这将在下面的示例中演示。
- en: Now that we've gone through a basic example of adding a fragment to an activity
    and examining the interaction between the fragment and the activity, let's see
    a more detailed example of how you add two fragments to an activity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过一个向活动添加片段的基本示例，并检查了片段与活动之间的交互，让我们看一个更详细的示例，演示如何向活动添加两个片段。
- en: 'Exercise 3.02: Adding Fragments Statically to an Activity'
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.02：静态向活动添加片段
- en: 'This exercise will demonstrate how to add two fragments to an activity with
    their own UI and separate functionality. You''ll create a simple counter class
    that increments and decrements a number and a styling class that changes the style
    applied programmatically to some `Hello World` text. Perform the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将演示如何向活动添加两个具有自己UI和独立功能的片段。您将创建一个简单的计数器类，用于增加和减少数字，以及一个样式类，用于以编程方式更改应用于一些`Hello
    World`文本的样式。执行以下步骤：
- en: 'Create an application in Android Studio with an empty activity called `Fragment
    Intro`. Then replace the content with the following strings required for the exercise
    in the `res` | `values` | `strings.xml` file:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个名为`Fragment Intro`的空活动应用。然后在`res` | `values` | `strings.xml`文件中替换内容为以下练习所需的字符串：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These strings are used in both the counter fragment as well as the style fragment,
    which you will create next.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字符串既用于计数器片段，也用于样式片段，接下来您将创建样式片段。
- en: Add a new blank fragment by going to `File` | `New` | `Fragment (Blank)` called
    `CounterFragment` with layout name `fragment_counter`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`File` | `New` | `Fragment (Blank)`，添加一个名为`CounterFragment`的新空片段，布局名称为`fragment_counter`
- en: 'Now make changes to the `fragment_counter.xml` file. To add the fields, you''ll
    need to create the `counter` in the `Fragment` class. The code below is truncated
    for space. Follow the link shown for the full code you need to use:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在对`fragment_counter.xml`文件进行更改。要添加字段，您需要在`Fragment`类中创建`counter`。以下代码由于空间原因而被截断。点击链接查看您需要使用的完整代码：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are using a simple `ConstraintLayout` file that has `TextViews` set up for
    the header `@+id/counter_text` and the value of the `android:id="@+id/counter"`
    (with a default of `@string/zero`), which will be changed by the `android:id="@+id/plus"`
    and `android:id="@+id/minus"` buttons.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个简单的`ConstraintLayout`文件，其中为标题`@+id/counter_text`和值`android:id="@+id/counter"`（默认为`@string/zero`）设置了`TextViews`，这些值将由`android:id="@+id/plus"`和`android:id="@+id/minus"`按钮更改。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a simple example like this, you are not going to set individual styles on
    the views with `style="@some_style"` notation, which would be best practice to
    avoid repeating these values on each view.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的简单示例，您不会使用`style="@some_style"`符号在视图上设置单独的样式，最佳做法是避免在每个视图上重复这些值。
- en: 'Now open the `CounterFragment` and override the `onViewCreated` function. You
    will also need to add the following imports:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`CounterFragment`并重写`onViewCreated`函数。您还需要添加以下导入：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Firstly, with this line, you are retrieving the current value of the counter
    as an integer:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用此行，您将检索计数器的当前值作为整数：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then with the following line, you are incrementing the value by `1` with the
    `++` notation:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下行，您可以使用`++`符号将值增加`1`：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As this is done by adding the `++` before the `counterValue`, it increments
    the integer value before it is cast to a string. If you didn't do it this way,
    but instead did a post increment with `counter++`, the value would only be available
    the next time you used this value in a statement, which would reset the counter
    to the same value.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是通过在`counterValue`之前添加`++`来完成的，它会在将整数值转换为字符串之前递增整数值。如果您没有这样做，而是使用`counter++`进行后递增，那么该值只会在您在语句中下一次使用该值时可用，这会重置计数器为相同的值。
- en: 'The line within the minus button `click listener` does a similar thing to the
    add `click listener` but decrements the value by `1`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减号按钮`click listener`中的行执行与加号`click listener`类似的操作，但将值减`1`：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You only do the operation if the value is greater than `0` so that no negative
    numbers are set.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当值大于`0`时才执行操作，以便不设置负数。
- en: 'You have not added the fragment to the `MainActivity` layout. To do this, go
    into the `activity_main.xml` and add the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还没有将片段添加到`MainActivity`布局中。要做到这一点，进入`activity_main.xml`并添加以下代码：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You are going to change the layout from a `FrameLayout` to a `LinearLayout`
    as you will need this to put one fragment above the other when you add the next
    fragment. You specify the fragment to be used within the `fragment` XML element
    by the `name` attribute with the fully qualified package name used for the class:
    `android:name="com.example.fragmentintro.CounterFragment`. If you used a different
    package name when you created the app, then this must refer to the `CounterFragment`
    you created. The important thing to grasp here is that you have added a fragment
    to your main activity layout and the fragment also has a layout. This shows some
    of the power of using fragments as you can encapsulate the functionality of one
    feature of your app, complete with a layout file and fragment class, and add it
    to multiple activities.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您将把布局从`FrameLayout`更改为`LinearLayout`，因为当您添加下一个片段时，您需要将一个片段放在另一个片段上方。您通过`name`属性在`fragment`
    XML元素中指定要在其中使用的片段，使用类的完全限定包名称：`android:name="com.example.fragmentintro.CounterFragment`。如果您在创建应用程序时使用了不同的包名称，则这必须指向您创建的`CounterFragment`。这里需要理解的重要一点是，您已经将一个片段添加到了主活动布局中，并且该片段还有一个布局。这显示了使用片段的一些功能，因为您可以封装应用程序的一个功能，包括布局文件和片段类，并将其添加到多个活动中。
- en: 'Once you''ve done this, run the fragment in the virtual device as in *Figure
    3.6*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，像*图3.6*中一样在虚拟设备中运行片段：
- en: '![Figure 3.6: App displaying the counter fragment'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6：应用程序显示计数器片段'
- en: '](img/B15216_03_06.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_06.jpg)'
- en: 'Figure 3.6: App displaying the counter fragment'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：应用程序显示计数器片段
- en: You have created a simple counter. The basic functionality works as expected,
    incrementing and decrementing a counter value.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了一个简单的计数器。基本功能按预期工作，递增和递减计数器值。
- en: In the next step, you are going to add another fragment to the bottom half of
    the screen. This demonstrates the versatility of fragments. You can have encapsulated
    pieces of UI with functionality and features in different areas of the screen.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步中，您将在屏幕的下半部分添加另一个片段。这展示了片段的多功能性。您可以在屏幕的不同区域拥有具有功能和特性的封装UI片段。
- en: Now create a new fragment using the earlier steps for creating the `CounterFragment`
    called `StyleFragment` with layout name `fragment_style`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用创建`CounterFragment`的早期步骤创建一个名为`StyleFragment`的新片段，布局名称为`fragment_style`。
- en: 'Next, open up the `fragment_style.xml` file that has been created and replace
    the contents with the code at the link below. The snippet shown below is truncated
    – see the link for the full code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开已创建的`fragment_style.xml`文件，并用下面链接中的代码替换内容。下面显示的片段已被截断-请参阅完整代码的链接：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The layout adds a `TextView` with three buttons. The `TextView` text and the
    text for all the buttons are set as string resources `(@string`).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 布局添加了一个带有三个按钮的`TextView`。`TextView`文本和所有按钮的文本都设置为字符串资源`(@string`)。
- en: 'Next, go into the `activity_main.xml` file and add the `StyleFragment` below
    the `CounterFragment` inside the `LinearLayout`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，进入`activity_main.xml`文件，并在`LinearLayout`内的`CounterFragment`下方添加`StyleFragment`：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you run the app, you will see that the `StyleFragment` is not visible,
    as in *Figure 3.7*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，您会发现`StyleFragment`不可见，如*图3.7*所示：
- en: '![Figure 3.7: App shown without the StyleFragment displayed'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7：应用程序显示没有显示StyleFragment'
- en: '](img/B15216_03_07.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_07.jpg)'
- en: 'Figure 3.7: App shown without the StyleFragment displayed'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：应用程序显示没有显示StyleFragment
- en: You've included the `StyleFragment` in the layout, but because the `CounterFragment`
    has its width and height set to match its parent (`android:layout_width="match_parent
    android:layout_height="match_parent"`) and it is the first view in the layout,
    it takes up all the space.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在布局中包含了`StyleFragment`，但是因为`CounterFragment`的宽度和高度设置为与其父级匹配（`android:layout_width="match_parent
    android:layout_height="match_parent"`），并且它是布局中的第一个视图，它占据了所有的空间。
- en: What you need is some way to specify the proportion of the height that each
    fragment should occupy. The `LinearLayout` orientation is set to vertical so the
    fragments will appear one on top of the other when the `layout_height` is not
    set to `match_parent`. In order to define the proportion of this height, you need
    to add another attribute `layout_weight` to each fragment in the `activity_main.xml`
    layout file. When you use `layout_weight` to determine this proportional height,
    the fragments should occupy you set the `layout_height` of the fragments to `0dp`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的是指定每个片段应占用的高度比例的方法。`LinearLayout`的方向设置为垂直，因此当`layout_height`未设置为`match_parent`时，片段将一个在另一个上方显示。为了定义这个高度的比例，您需要在`activity_main.xml`布局文件中的每个片段中添加另一个属性`layout_weight`。当您使用`layout_weight`来确定这个比例高度时，片段应该占用您设置的`layout_height`为`0dp`的高度。
- en: 'Update the `activity_main.xml` layout with the following changes setting the
    `layout_height` of both fragments to `0dp` and adding the `layout_weight` attributes
    with the values below:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下更改更新`activity_main.xml`布局，将两个片段的`layout_height`设置为`0dp`，并添加以下值的`layout_weight`属性：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'These changes make the `CounterFragment` occupy twice the height of the `StyleFragment`,
    as shown in *Figure 3.8*:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改使`CounterFragment`占据了`StyleFragment`两倍的高度，如*图3.8*所示：
- en: '![Figure 3.8: CounterFragment with twice the amount of vertical space allocated'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8：CounterFragment分配了两倍的垂直空间'
- en: '](img/B15216_03_08.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_08.jpg)'
- en: 'Figure 3.8: CounterFragment with twice the amount of vertical space allocated'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：CounterFragment分配了两倍的垂直空间
- en: You can experiment by changing the weight values to see the differences you
    can make to the display of the layout.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更改权重值来尝试不同的布局显示效果。
- en: 'At this point, pressing the styling buttons `Bold` and `Italic` will have no
    effect on the text `Hello World`. The button actions have not been specified.
    The next step involves adding interactivity to the buttons to make changes to
    the style of the `Hello World` text. Add the following `onViewCreated` function,
    which overrides its parent to add behavior to the fragment after the layout view
    has been set up. You will also need to add the following widgets and the typeface
    import to change the style for the text:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，按下样式按钮“粗体”和“斜体”将不会对文本“Hello World”产生影响。按钮操作尚未指定。下一步涉及向按钮添加交互性，以更改“Hello World”文本的样式。添加以下“onViewCreated”函数，覆盖其父类以在布局视图设置完成后向片段添加行为。您还需要添加以下小部件和字体导入以更改文本的样式：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, the `reset_button` clears the `Typeface` and sets it back to normal.
    Run the app up and click the `ITALIC` and `BOLD` buttons. You should see a display
    as in *Figure 3.9*:![Figure 3.9: StyleFragment setting text to bold and italic'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`reset_button`清除`Typeface`并将其设置回正常。运行应用程序并单击`ITALIC`和`BOLD`按钮。您应该看到如*图3.9*所示的显示：![图3.9：StyleFragment将文本设置为粗体和斜体
- en: '](img/B15216_03_09.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_09.jpg)'
- en: 'Figure 3.9: StyleFragment setting text to bold and italic'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：StyleFragment将文本设置为粗体和斜体
- en: This exercise, although simple, has demonstrated some fundamental concepts of
    using fragments. The features of your app that the user can interact with can
    be developed independently and not rely on bundling two or more features into
    one layout and activity. This makes fragments reusable and means you can focus
    your attention when developing your app on adding well-defined UI, logic, and
    features into a single fragment.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习虽然简单，但展示了使用片段的一些基本概念。用户可以与应用程序的功能进行交互，可以独立开发，并不依赖于将两个或更多功能捆绑到一个布局和活动中。这使得片段可重用，并意味着在开发应用程序时，您可以专注于将定义良好的UI、逻辑和功能添加到单个片段中。
- en: Static Fragments and Dual-Pane Layouts
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态片段和双窗格布局
- en: The previous exercise introduced you to static fragments, those that can be
    defined in the activity XML layout file. One of the advantages of the Android
    development environment is the ability to create different layouts and resources
    for different screen sizes. This is used for deciding which resources to display
    depending on whether the device is a phone or a tablet. The space for laying out
    UI elements can increase substantially with the larger size of a tablet. Android
    allows specifying different resources depending on many different form factors.
    The qualifier frequently used to define a tablet in the `res` (resources) folder
    is `sw600dp`. This states that if the **shortest width** (**sw**) of the device
    is over 600 dp, then use these resources. This qualifier is used for 7" tablets
    and larger. Tablets facilitate what is known as dual-pane layouts. A pane represents
    a self-contained part of the user interface. If the screen is large enough, then
    two panes (dual-pane) layouts can be supported. This also provides the opportunity
    for one pane to interact with another to update content.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个练习介绍了静态片段，可以在活动XML布局文件中定义。Android开发环境的一个优点是可以为不同的屏幕尺寸创建不同的布局和资源。这用于决定根据设备是手机还是平板电脑来显示哪些资源。随着平板电脑尺寸的增大，布局UI元素的空间也会大幅增加。Android允许根据许多不同的形状因素指定不同的资源。用于在“res”（资源）文件夹中定义平板电脑的限定符经常是“sw600dp”。这表示如果设备的**最短宽度**（**sw**）超过600
    dp，则使用这些资源。此限定符用于7英寸平板电脑及更大的设备。平板电脑支持所谓的双窗格布局。窗格代表用户界面的一个独立部分。如果屏幕足够大，那么可以支持两个窗格（双窗格）布局。这也提供了一个窗格与另一个窗格互动以更新内容的机会。
- en: 'Exercise 3.03: Dual-Pane Layouts with Static Fragments'
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.03：静态片段的双窗格布局
- en: 'In this exercise, you are going to create a simple app that displays a list
    of star signs and specific information about each star sign. It will use different
    displays for phones and tablets. The phone will display a list and then open the
    selected list item''s content in another screen whilst the tablet will display
    the same list in one pane and open the list item''s content in another pane on
    the same screen in a dual-pane layout. In order to do this, you have to create
    another layout that will only be used for 7" tablets and above. Perform the following
    steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将创建一个简单的应用程序，显示星座列表和每个星座的特定信息。它将在手机和平板电脑上使用不同的显示方式。手机将显示一个列表，然后在另一个屏幕上打开所选列表项的内容，而平板电脑将在同一屏幕上的另一个窗格中显示相同的列表，并在另一个窗格中打开列表项的内容，以双窗格布局。为了实现这一点，您必须创建另一个布局，仅用于7英寸平板电脑及以上。执行以下步骤：
- en: Firstly, create a new Android Studio project with an `Empty Activity` with the
    name `Dual Pane Layouts`. Once created, go to the layout file that has been created,
    `res` | `layout` | `activity_main.xml`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用“空活动”创建一个名为“双窗格布局”的新Android Studio项目。创建完成后，转到已创建的布局文件“res”|“layout”|“activity_main.xml”。
- en: Once you've selected this in the top toolbar of the design view, select the
    orientation layout button.![diagram 2](img/B15216_03_09a.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择设计视图顶部工具栏中的此选项后，选择方向布局按钮。![图2](img/B15216_03_09a.jpg)
- en: 'In this dropdown, you can select `Create Tablet Variation` for the app. This
    creates a new folder in the `main` | `res` folder named `''layout-sw600dp''` with
    the layout file `activity_main.xml` added:![Figure 3.10: Design View orientation
    button dropdown'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此下拉菜单中，您可以选择“创建平板电脑变体”来创建应用程序的新文件夹。这将在“main”|“res”文件夹中创建一个名为“layout-sw600dp”的新文件夹，并添加布局文件“activity_main.xml”：![图3.10：设计视图方向按钮下拉菜单
- en: '](img/B15216_03_10_.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_10_.jpg)'
- en: 'Figure 3.10: Design View orientation button dropdown'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：设计视图方向按钮下拉菜单
- en: At the moment, it is a duplicate of the `activity_main.xml` file added when
    you created the app, but you will change it to customize the screen display for tablets.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，它是在创建应用程序时添加的“activity_main.xml”文件的副本，但您将更改它以自定义平板电脑的屏幕显示。
- en: In order to demonstrate the use of dual-pane layouts, you are going to create
    a list of star signs that, when a list item is selected, will display some basic
    information about the star sign.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示双窗格布局的使用，您将创建一个星座列表，当选择列表项时，将显示有关星座的一些基本信息。
- en: Go to the top toolbar and select `File` | `New` | `Fragment` | `Fragment (Blank)`.
    Call it `ListFragment`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到顶部工具栏，选择`文件` | `新建` | `片段` | `片段（空白）`。将其命名为`ListFragment`。
- en: 'For this exercise, you need to update the `strings.xml` and `themes.xml` files
    adding the entries below:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，您需要更新`strings.xml`和`themes.xml`文件，添加以下条目：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the `main` | `res` | `layout` | `fragment_list.xml` file and replace the
    default contents with the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`main` | `res` | `layout` | `fragment_list.xml`文件，并用以下内容替换默认内容：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You will see that the first `xml` element is a `ScrollView`. A `ScrollView`
    is a `ViewGroup` that allows the contents to scroll, and as you will be adding
    12 star signs into the `LinearLayout` it contains, this is likely to occupy more
    vertical space than is available on the screen.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到，第一个`xml`元素是一个`ScrollView`。`ScrollView`是一个`ViewGroup`，允许内容滚动，由于您将向其中添加12个星座到包含的`LinearLayout`中，这可能会占用比屏幕上可用的更多的垂直空间。
- en: Adding the `ScrollView` prevents the contents from cutting off vertically when
    there is no more room to display them and scrolls the layout. A `ScrollView` can
    only contain one child view. Here, it's a `LinearLayout` and as the contents will
    be displayed vertically, the orientation is set to vertical (`android:orientation="vertical"`).
    Below the first title `TextView` you have added a divider `View` and a `TextView`
    for the first star sign Aquarius.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`ScrollView`可以防止内容在垂直方向上被截断，当没有足够的空间来显示它们时，可以滚动布局。`ScrollView`只能包含一个子视图。在这里，它是一个`LinearLayout`，由于内容将垂直显示，方向设置为垂直(`android:orientation="vertical"`)。在第一个标题`TextView`下，您已添加了一个分隔符`View`和一个第一个星座水瓶座的`TextView`。
- en: Add the other 11 star signs with the same format, adding first the divider and
    then the `TextView`. The name of the string resource and the `id` should be the
    same for each `TextView`. The names of the star signs you will create a view from
    are specified in the `strings.xml` file.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照相同的格式添加其他11个星座，首先添加分隔符，然后添加`TextView`。每个`TextView`的字符串资源名称和`id`应该相同。要创建视图的星座名称在`strings.xml`文件中指定。
- en: Note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The technique used to lay out a list is fine for an example, but in a real-world
    app, you would create a `RecyclerView` dedicated to displaying lists that can
    scroll, with the data bound to the list by an adapter. You will cover this in
    a later chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 用于布置列表的技术对于示例来说是可以的，但在真实的应用程序中，您将创建一个专用于显示可以滚动的列表的`RecyclerView`，并通过适配器将数据绑定到列表上。您将在后面的章节中介绍这个。
- en: 'Next create the StarSignListener and make the MainActivity implement it by
    adding the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建`StarSignListener`，并通过添加以下内容使`MainActivity`实现它：
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is how the fragments will communicate back to the activity when a user
    selects a star sign from the `ListFragment` and logic will be added depending
    on whether a dual pane is available or not.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '这就是当用户从`ListFragment`中选择一个星座时，片段将如何与活动进行通信，并根据是否可用双窗格添加逻辑。 '
- en: 'Once you''ve created the layout file, go into the `ListFragment` class and
    update it with the contents below, keeping `onCreateView()` in place. You can
    see in the fragment in the `onAttach()` callback you are stating that the activity
    implements the `StarSignListener` interface so it can be notified when the user
    clicks an item in the list: Add the import for the `Context` required for `onAttach`
    with the other imports at the top of the file:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建布局文件后，进入`ListFragment`类，并使用下面的内容更新它，保持`onCreateView()`不变。您可以在`onAttach()`回调中看到，您声明活动实现了`StarSignListener`接口，因此当用户点击列表中的项目时可以通知它：在文件顶部与其他导入一起添加`onAttach`所需的`Context`的导入：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, the `onClick` statement communicates back to the activity through
    the `StarSignListener` when one of the star signs in the list has been clicked:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，`onClick`语句通过`StarSignListener`与活动通信，当列表中的星座之一被点击时：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You check whether the View specified as `v` is null with the `?` and then only
    operate upon it with the `let` scope function if it isn't, before passing the
    `id` of the star sign to the `Activity`/`StarSignListener`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`?`检查指定为`v`的视图是否为空，然后只有在它不为空时才使用`let`作用域函数进行操作，然后将星座的`id`传递给`Activity`/`StarSignListener`。
- en: Note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Listeners are a common way to react to changes. By specifying a `Listener` interface,
    you are specifying a contract to be fulfilled. The implementing class is then
    notified of the results of the listener operation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器是对变化做出反应的常见方式。通过指定`Listener`接口，您正在指定一个要履行的合同。然后通知实现类监听器操作的结果。
- en: 'Next create the `DetailFragment`, which will display the star sign details.
    Create a fragment as you have done before and call it `DetailFragment`. Replace
    the `fragment_detail` layout file contents with the following XML file:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建`DetailFragment`，它将显示星座的详细信息。创建一个与之前相同的片段，并将其命名为`DetailFragment`。用以下XML文件替换`fragment_detail`布局文件的内容：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, you create a simple `LinearLayout`, which will display the star sign name,
    the symbol of the star sign, and the date range. You'll set these values in the
    `DetailFragment`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您创建一个简单的`LinearLayout`，它将显示星座名称、星座符号和日期范围。您将在`DetailFragment`中设置这些值。
- en: 'Open the `DetailFragment` and update the contents with the following text and
    also add widget imports to the imports list:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`DetailFragment`，并使用以下文本更新内容，并将小部件导入到导入列表中：
- en: '[PRE25]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Firstly, you need to change the layout of `activity_main.xml` in both the `layout`
    folder and the `layout-sw600dp`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要在`layout`文件夹和`layout-sw600dp`中更改`activity_main.xml`的布局。
- en: 'Open up `res` | `layout` | `activity_main.xml` if in the Project View. In the
    default Android View open up `res` | `layout` | `activity_main.xml` and select
    the top `activity_main.xml` file without (sw600dp). Replace the contents with
    the following:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中打开`res` | `layout` | `activity_main.xml`。在默认的Android视图中打开`res` | `layout`
    | `activity_main.xml`，并选择不带（sw600dp）的顶部`activity_main.xml`文件。用以下内容替换内容：
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then open up `res` | `layout-sw600dp` | `activity_main.xml` if in the Project
    View. In the default Android View open up `res` | `layout` | `activity_main.xml
    (sw600dp)`. Replace the contents with the following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后打开`res` | `layout-sw600dp` | `activity_main.xml`（如果在项目视图中）。在默认的Android视图中打开`res`
    | `layout` | `activity_main.xml（sw600dp）`。用以下内容替换内容：
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You are adding a `LinearLayout`, which will by default lay out its content horizontally.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在添加一个`LinearLayout`，默认情况下会水平布局其内容。
- en: You add the `ListFragment`, a divider, and then the `DetailFragment` and assign
    the fragments appropriate IDs. Notice also that you are using the concept of weights
    to assign the space available for each fragment. When you do this, you specify
    `android:layout_width="0dp"`. The `layout_weight` then sets the proportion of
    the width available by the weight measurements as the `LinearLayout` is set to
    layout the fragments horizontally. The `ListFragment` is specified as `android:layout_weight="1"`
    and the `DetailFragment` is specified as `android:layout_weight="2"`, which tells
    the system to assign the `DetailFragment` twice the width of the `ListFragment`.
    In this case, where there are three views including the divider, which is a fixed
    dp width, this will result roughly in the `ListFragment` occupying one-third of
    the width and the `DetailFragment` occupying two-thirds.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您添加了`ListFragment`，一个分隔线，然后是`DetailFragment`并分配了适当的ID。还要注意，您正在使用权重的概念来分配每个片段可用空间。当您这样做时，您指定了`android:layout_width="0dp"`。然后，`layout_weight`根据权重测量设置了宽度的比例，因为`LinearLayout`被设置为水平布局片段。`ListFragment`指定为`android:layout_weight="1"`，`DetailFragment`指定为`android:layout_weight="2"`，这告诉系统将`DetailFragment`分配为`ListFragment`的两倍宽度。在这种情况下，包括固定dp宽度的分隔线在内，这将导致`ListFragment`大约占据宽度的三分之一，而`DetailFragment`占据宽度的三分之二。
- en: To see the app, create a new virtual device as shown in *Chapter 1*, *Create
    Your First App*, and select `Category` | `Tablet` | `Nexus 7`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看应用程序，请按照*第1章*，*创建您的第一个应用程序*中显示的方式创建一个新的虚拟设备，并选择`Category` | `Tablet` | `Nexus
    7`。
- en: 'This will create a 7" tablet. Then launch the virtual device and run the app.
    This is the initial view you will see when you launch the tablet in portrait mode:![Figure
    3.11: Initial star sign app UI display'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个7英寸的平板。然后启动虚拟设备并运行应用程序。当您在纵向模式下启动平板时，您将看到初始视图：![图3.11：初始星座应用UI显示
- en: '](img/B15216_03_11.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_11.jpg)'
- en: 'Figure 3.11: Initial star sign app UI display'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：初始星座应用UI显示
- en: You can see that the list takes up about a third of the screen and the blank
    space two-thirds of the screen.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到列表占据了屏幕的大约三分之一，空白空间占据了屏幕的三分之二。
- en: Click the ![2](img/B15216_03_11a.png) bottom rotate button on the virtual device
    to turn the virtual device through 90 degrees clockwise.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击虚拟设备上的![2](img/B15216_03_11a.png)底部旋转按钮，将虚拟设备顺时针旋转90度。
- en: Once you've done that, the virtual device will go into landscape mode. It will
    not, however, change the screen orientation to landscape.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，虚拟设备将进入横向模式。但是，它不会改变屏幕方向为横向。
- en: 'In order to do this, click on the ![3](img/B15216_03_11b.png) rotate button
    in the bottom-left corner of the virtual device. You can also select the status
    bar at the top of the virtual device, hold and drag down to display the quick
    settings bar where you can turn on auto-rotation by selecting the rotate button.![Figure
    3.12: Quick settings bar with auto rotate selected'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，请单击虚拟设备左下角的![3](img/B15216_03_11b.png)旋转按钮。您还可以选择虚拟设备顶部的状态栏，向下拖动以显示快速设置栏，然后通过选择旋转按钮来打开自动旋转。![图3.12：已选择自动旋转的快速设置栏
- en: '](img/B15216_03_12_.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_12_.jpg)'
- en: 'Figure 3.12: Quick settings bar with auto rotate selected'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：自动旋转已选择的快捷设置栏
- en: 'This will then change the tablet layout to landscape:![Figure 3.13: Initial
    star sign app UI display in landscape on a tablet'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，这将改变平板的布局为横向：![图3.13：平板上横向显示的初始星座应用UI显示
- en: '](img/B15216_03_13_.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_13_.jpg)'
- en: 'Figure 3.13: Initial star sign app UI display in landscape on a tablet'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：平板上横向显示的初始星座应用UI显示
- en: 'The next thing to do is enable selecting a list item to load contents into
    the `Detail` pane of the screen. For that, we need to make changes in the `MainActivity`.
    Update the following code to retrieve fragments by their ID in the pattern of
    retrieving views by their IDs:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是启用选择列表项以将内容加载到屏幕的`Detail`窗格中。为此，我们需要在`MainActivity`中进行更改。更新以下代码以按照检索视图的ID模式检索片段：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This example and those that follow use `supportFragmentManager.findFragmentById`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例及其后续示例使用`supportFragmentManager.findFragmentById`。
- en: You can also, however, retrieve fragments by `Tag` if you add a tag to the fragment
    XML by using `android:tag="MyFragmentTag"`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您在片段XML中添加标签，也可以通过`Tag`检索片段，方法是使用`android:tag="MyFragmentTag"`。
- en: You can then retrieve the fragment by using `supportFragmentManager.findFragmentByTag("MyFragmentTag")`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以使用`supportFragmentManager.findFragmentByTag("MyFragmentTag")`检索片段。
- en: In order to retrieve data from the fragment, the activity needs to implement
    the `StarSignListener`. This completes the contract set in the fragment to pass
    back details to the implementing class. The `onCreate` function sets the layout
    and then checks whether `DetailFragment` is in the activity's inflated layout
    by checking whether id `R.id.star_sign_detail` exists. From the Project View the
    `res` | `layout` | `activity_main.xml` file only contains the `ListFragment`,
    but you've added the code in the `res` | `layout-sw600dp` | `activity_main.xml`
    file to contain the `DetailFragment` with `android:id="@+id/star_sign_detail"`.
    This will be used for the layout of the Nexus 7 tablet. In the default Android
    View open up `res` | `layout` | `activity_main.xml` and select the top `activity_main.xml`
    file without (sw600dp) and then select `activity_main.xml (sw600dp)` to see these differences.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从片段中检索数据，活动需要实现`StarSignListener`。这完成了在片段中设置的合同，以将详细信息传递回实现类。`onCreate`函数设置布局，然后通过检查`DetailFragment`是否在活动的膨胀布局中，通过检查id
    `R.id.star_sign_detail`是否存在来检查。从项目视图中，`res` | `layout` | `activity_main.xml`文件只包含`ListFragment`，但您已在`res`
    | `layout-sw600dp` | `activity_main.xml`文件中添加了代码，以包含带有`android:id="@+id/star_sign_detail"`的`DetailFragment`。这将用于Nexus
    7平板的布局。在默认的Android视图中打开`res` | `layout` | `activity_main.xml`，然后选择顶部的不带（sw600dp）的`activity_main.xml`文件，然后选择`activity_main.xml
    (sw600dp)`以查看这些差异。
- en: 'So now we can retrieve the star sign ID passed from the `ListFragment` back
    to the `MainActivity` by the `StarSignListener` and pass it into the `DetailFragment`.
    This is achieved by checking the `isDualPane` Boolean, and if that evaluates to
    `true`, you know you can pass the star sign ID to the `DetailFragment` with this
    code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过`StarSignListener`从`ListFragment`传递星座ID回到`MainActivity`，并将其传递到`DetailFragment`。通过检查`isDualPane`布尔值来实现这一点，如果评估为`true`，则可以使用以下代码将星座ID传递给`DetailFragment`：
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You cast the fragment from the `id` to the `DetailFragment` and call the following:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将片段从`id`转换为`DetailFragment`并调用以下内容：
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you''ve implemented this function in the fragment and are checking by the
    `id` which contents to display, the UI is updated:![Figure 3.14: Star sign app
    dual-pane display in landscape on a tablet'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于您已在片段中实现了此功能，并通过`id`进行内容显示的检查，因此UI已更新：![图3.14：平板上星座应用双窗口显示
- en: '](img/B15216_03_14_.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_14_.jpg)'
- en: 'Figure 3.14: Star sign app dual-pane display in landscape on a tablet'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：平板上星座应用双窗口显示
- en: Now clicking on a list item works as intended, showing the dual-pane layout
    with the contents set correctly.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击列表项按预期工作，显示双窗格布局，并正确设置内容。
- en: 'If the device is not a tablet, however, even when a list item is clicked, nothing
    will happen as there is not an `else` branch condition to do anything if the device
    is not a tablet, which is defined by `isDualPane` Boolean. The display will be
    as in *Figure 3.15* and won''t change when items are selected:![Figure 3.15: Initial
    star sign app UI display on a phone'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果设备不是平板，即使点击了列表项，也不会发生任何事情，因为没有`else`分支条件来处理设备不是平板的情况，这由`isDualPane`布尔值定义。显示将如*图3.15*所示，并且在选择项目时不会发生变化：![图3.15：手机上初始星座应用UI显示
- en: '](img/B15216_03_15_.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_15_.jpg)'
- en: 'Figure 3.15: Initial star sign app UI display on a phone'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15：手机上初始星座应用UI显示
- en: 'You are going to display the star sign detail in another activity. Create a
    new `DetailActivity` by going to `File` | `New` | `Activity` | `Empty Activity`.
    Once created, update the `activity_detail.xml` with this layout:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在另一个活动中显示星座详情。通过转到`文件` | `新建` | `活动` | `空活动`来创建一个新的`DetailActivity`。创建后，使用此布局更新`activity_detail.xml`：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This adds the `DetailFragment` as the only fragment in the layout. Now update
    the `DetailActivity` with the following contents:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将`DetailFragment`添加为布局中唯一的片段。现在使用以下内容更新`DetailActivity`：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The star sign `id` is expected to be passed from another activity to this one
    through setting a key in the intent''s extras (also called a `id` to set the star
    sign ID in the `DetailFragment`. Next, you need to implement the `else` branch
    of the `isDualPane` check to launch the `DetailActivity` passing through the star
    sign ID in the intent. Update the `MainActivity` to do this below. You will also
    need to add the `Intent` import to the list of imports:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预计星座`id`将通过在意图的额外设置键（也称为`id`）从另一个活动传递到此活动，以在`DetailFragment`中设置星座ID。接下来，您需要实现`isDualPane`检查的`else`分支，以通过意图传递星座ID启动`DetailActivity`。更新`MainActivity`以执行以下操作。您还需要将`Intent`导入添加到导入列表中：
- en: '[PRE33]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Once you click on one of the star sign names on a phone display, it shows the
    contents in the `DetailActivity` occupying the whole of the screen without the
    list:![Figure 3.16: Single-pane star sign detail screen on a phone'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在手机显示上点击星座名称中的一个，它会在`DetailActivity`中显示内容，占据整个屏幕而不显示列表：![图3.16：手机上单窗格星座详情屏幕
- en: '](img/B15216_03_16_.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_16_.jpg)'
- en: 'Figure 3.16: Single-pane star sign detail screen on a phone'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16：手机上单窗格星座详情屏幕
- en: This exercise has demonstrated the flexibility of fragments. They can encapsulate
    the logic and display of different features of your app that can be integrated
    in different ways depending on the form factor of the device. They can be arranged
    onscreen in a variety of ways, which are constrained by the layout they are included
    in, therefore they can feature as a part of dual-pane layouts or all or part of
    a single-pane layout. This exercise showed fragments being laid out side by side
    on a tablet, but they can also be laid out on top of each other and in a variety
    of other ways. The next topic illustrates how the configuration of fragments used
    in your app doesn't have to be specified statically in XML, but can also be done
    dynamically.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习展示了片段的灵活性。它们可以封装应用程序不同功能的逻辑和显示，可以根据设备的形态因素以不同的方式集成。它们可以以各种方式在屏幕上排列，这受到它们所包含的布局的限制，因此它们可以作为双窗格布局的一部分或全部，也可以作为单窗格布局的一部分。这个练习展示了在平板上并排布置片段，但它们也可以以其他方式叠放在一起以及以各种其他方式排列。下一个主题将说明应用程序中使用的片段配置不必在XML中静态指定，而也可以动态完成。
- en: Dynamic Fragments
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态片段
- en: So far, you've only seen fragments added in XML at compile time. Although this
    can satisfy many use cases, you might want to add fragments dynamically at runtime
    to respond to the user's actions. This can be achieved by adding a `ViewGroup`
    as a container for fragments and then adding, replacing, and removing fragments
    from the `ViewGroup`. This technique is more flexible as the fragments can be
    active until they are no longer needed and then removed instead of always being
    inflated in XML layouts as you have seen with static fragments. If 3 or 4 more
    fragments are required to fulfill separate user journeys in one activity, then
    the preferred option is to react to the user's interaction in the UI by adding/replacing
    fragments dynamically. Using static fragments works better when the user's interaction
    with the UI is fixed at compile time and you know in advance how many fragments
    you need. For example, this would be the case for selecting items from a list
    to display the contents.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您只看到了在编译时以XML形式添加的片段。虽然这可以满足许多用例，但您可能希望在运行时动态添加片段以响应用户的操作。这可以通过将`ViewGroup`添加为片段的容器，然后向`ViewGroup`添加、替换和移除片段来实现。这种技术更灵活，因为片段可以一直处于活动状态，直到不再需要，然后被移除，而不是像您在静态片段中看到的那样总是在XML布局中被膨胀。如果需要3或4个以上的片段来满足一个活动中的不同用户旅程，那么首选选项是通过动态添加/替换片段来响应用户在UI中的交互。当用户与UI的交互在编译时是固定的，并且您预先知道需要多少片段时，使用静态片段效果更好。例如，从列表中选择项目以显示内容就是这种情况。
- en: 'Exercise 3.04: Adding Fragments Dynamically to an Activity'
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.04：动态向活动添加片段
- en: 'In this exercise, we will build the same star sign app as before but will demonstrate
    how the list and detail fragments can be added to screen layouts dynamically and
    not directly within an XML layout. You can also pass arguments into a fragment.
    For simplicity, you are going to create the same configuration for both phones
    and tablets. Perform the following steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建与之前相同的星座应用程序，但将演示如何动态地将列表和详细片段添加到屏幕布局中，而不是直接在XML布局中添加。您还可以向片段传递参数。为简单起见，您将为手机和平板创建相同的配置。执行以下步骤：
- en: Create a new project with an `Empty Activity` with the name `Dynamic Fragments`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Dynamic Fragments`的`Empty Activity`的新项目。
- en: 'Once you have done that, add the following dependency you need to use the `FragmentContainerView`,
    an optimized ViewGroup to handle Fragment Transactions to `app/build.gradle` within
    the `dependences{ }` block:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，添加以下依赖项，您需要使用`FragmentContainerView`，这是一个优化的ViewGroup，用于处理Fragment Transactions到`app/build.gradle`中的`dependences{
    }`块中：
- en: '[PRE34]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Copy the contents of the following XML resource files from *Exercise 3.03*,
    *Dual-Pane Layouts with Static Fragments*, and add them to the corresponding files
    in this exercise: `strings.xml` (changing the `app_name` string from `Static Fragments`
    to `Dynamic Fragments`), `fragment_detail.xml`, and `fragment_list.xml`. All of
    these files exist in the project created in the previous exercise and you are
    simply adding the contents to this new project. Then copy `DetailFragment` and
    `ListFragment` to the new project. You will have to change the package name from
    `package com.example.staticfragments` to `package com.example.dynamicfragments`
    in these two files. Finally add the styles defined below the base application
    style in themes.xml from the last exercise to the themes.xml in this project.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从*练习3.03*，*使用静态片段创建双窗格布局*中复制以下XML资源文件的内容，并将其添加到此练习中的相应文件中：`strings.xml`（将`app_name`字符串从`Static
    Fragments`更改为`Dynamic Fragments`），`fragment_detail.xml`和`fragment_list.xml`。所有这些文件都存在于上一个练习中创建的项目中，您只是将内容添加到这个新项目中。然后将`DetailFragment`和`ListFragment`复制到新项目中。您需要将这两个文件中的包名称从`package
    com.example.staticfragments`更改为`package com.example.dynamicfragments`。最后，将上一个练习中在themes.xml中基本应用程序样式下定义的样式添加到此项目中的themes.xml中。
- en: 'You now have the same fragments set up as in the previous exercise. Now open
    the `activity_main.xml` layout and replace the contents with this:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已经设置了与上一个练习中相同的片段。现在打开`activity_main.xml`布局，并用以下内容替换其内容：
- en: '[PRE35]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is the `FragmentContainerView` you will add the fragments to. You'll notice
    that there are no fragments added in the layout XML as these will be added dynamically.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将要向其中添加片段的`FragmentContainerView`。您会注意到在布局XML中没有添加片段，因为这些将会动态添加。
- en: 'Go into the `MainActivity` and replace the content with the following:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`MainActivity`并用以下内容替换其内容：
- en: '[PRE36]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You are getting a reference to the `FrameLayout` specified in `activity_main.xml`,
    creating a new `ListFragment` and then adding this fragment to the `ViewGroup`
    `FrameLayout` with the ID of the `fragment_container`. The fragment transaction
    specified is `add` as you are adding a fragment to the `FrameLayout` for the first
    time. You call `commit()` to execute the transaction immediately. There is a null
    check with `savedInstanceState` to only add this `ListFragment` if there is no
    state to restore, which there would be if a fragment had been previously added.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在获取`activity_main.xml`中指定的`FrameLayout`的引用，创建一个新的`ListFragment`，然后将此片段添加到ID为`fragment_container`的`ViewGroup`
    `FrameLayout`中。指定的片段事务是`add`，因为您首次向`FrameLayout`添加片段。您调用`commit()`立即执行事务。使用`savedInstanceState`进行空值检查，只有在没有状态需要恢复时才添加此`ListFragment`，如果先前已添加了片段，则会有状态需要恢复。
- en: 'Next make the `MainActivity` implement the `StarSignListener` by adding the
    following and also add a constant to pass the star sign from the ListFragment
    to the DetailFragment:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使`MainActivity`实现`StarSignListener`，并添加一个常量以将星座从`ListFragment`传递到`DetailFragment`：
- en: '[PRE37]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now if you run the app, you will see the Star sign list being displayed on mobile
    and tablet.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果运行应用程序，您将看到星座列表显示在手机和平板电脑上。
- en: The problem you now come to is how to pass the star sign ID to the `DetailFragment`
    now that it's not in an XML layout.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你遇到的问题是如何将星座ID传递给`DetailFragment`，因为它现在不在XML布局中了。
- en: One option would be to use the same technique as in the last example by creating
    a new activity and passing the star sign ID in an intent, but you shouldn't have
    to create a new activity to add a new fragment, otherwise you might as well dispense
    with fragments and just use activities. You are going to replace the `ListFragment`
    in the `FrameLayout` with the `DetailFragment`, but first, you need to find a
    way to pass the star sign ID into the `DetailFragment`. You do this by passing
    this `id` as an argument when you create the fragment. The standard way to do
    this is by using a `Factory` method in a fragment.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一种选择是使用与上一个示例相同的技术，创建一个新活动并通过意图传递星座ID，但是您不应该创建新活动来添加新片段，否则您可能会放弃片段而只使用活动。您将用`DetailFragment`替换`FrameLayout`中的`ListFragment`，但首先，您需要找到一种方法将星座ID传递到`DetailFragment`中。您可以通过在创建片段时将此`id`作为参数传递来实现这一点。这样做的标准方法是在片段中使用`Factory`方法。
- en: 'Add the following code to the bottom of the `DetailFragment`: (A sample factory
    method will have been added when you created the fragment using the template/wizard
    which you can update here)'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`DetailFragment`的底部：（当您使用模板/向导创建片段时，将添加一个示例工厂方法，您可以在此处更新）
- en: '[PRE38]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A `companion` object allows you to add Java's equivalent of static members into
    your class. Here, you are instantiating a new `DetailFragment` and setting arguments
    passed into the fragment. The arguments of the fragment are stored in a `Bundle()`,
    so in the same way as an activity's intent extras (which is also a bundle), you
    add the values as key pairs. In this case, you are adding the key `STAR_SIGN_ID`
    with the value `starSignId`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随对象允许您将Java的静态成员等效添加到类中。在这里，您正在实例化一个新的`DetailFragment`并设置传递到片段中的参数。片段的参数存储在`Bundle()`中，因此与活动的意图额外项（也是一个bundle）一样，您将值添加为键对。在这种情况下，您正在添加键`STAR_SIGN_ID`和值`starSignId`。
- en: 'The next thing to do is override one of the `DetailFragment` lifecycle functions
    to use the passed-in argument:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是重写`DetailFragment`生命周期函数之一，以使用传入的参数：
- en: '[PRE39]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You do this in `onViewCreated` as at this stage the layout of the fragment
    has been done and you can access the view hierarchy (whereas if you accessed the
    arguments in `onCreate`, the fragment layout would not be available as this is
    done in `onCreateView`):'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在`onViewCreated`中执行此操作，因为在此阶段已完成片段的布局，并且可以访问视图层次结构（而如果您在`onCreate`中访问参数，则片段布局将不可用，因为这是在`onCreateView`中完成的）：
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This line gets the star sign ID from the passed in fragment arguments, setting
    a default of `0` if the `STAR_SIGN_ID` key cannot be found. Then you call `setStarSignData(starSignId)`
    to display the star sign contents.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此行从传入的片段参数中获取星座ID，如果找不到`STAR_SIGN_ID`键，则设置默认值为`0`。然后调用`setStarSignData(starSignId)`来显示星座内容。
- en: 'Now you just need to implement the `StarSignListener` interface in the `MainActivity`
    to retrieve the star sign ID from the `ListFragment`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您只需要在`MainActivity`中实现`StarSignListener`接口，以从`ListFragment`中检索星座ID：
- en: '[PRE41]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: At this stage, the `ListFragment` is still the fragment that has been added
    to the activity `FrameLayout`. You need to replace it with the `DetailFragment`,
    which requires another transaction. This time, however, you use the `replace`
    function to replace the `ListFragment` with the `DetailFragment`. Before you commit
    the transaction, you call `.addToBackStack(null)` so the app does not exit when
    the back button is pressed but instead goes back to the `ListFragment` by popping
    the `DetailFragment` off the fragment stack.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`ListFragment`仍然是添加到活动`FrameLayout`的片段。您需要用`DetailFragment`替换它，这需要另一个事务。但这次，您使用`replace`函数将`ListFragment`替换为`DetailFragment`。在提交事务之前，您调用`.addToBackStack(null)`，这样当按下返回按钮时应用程序不会退出，而是通过弹出`DetailFragment`来返回`ListFragment`。
- en: This exercise has introduced adding fragments dynamically to your activity.
    The next topic introduces a more well-defined structure of creating fragments,
    called a navigation graph.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习介绍了动态向活动添加片段。下一个主题介绍了创建片段的更明确定义的结构，称为导航图。
- en: Jetpack Navigation
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jetpack Navigation
- en: Using dynamic and static fragments, although very flexible, introduces a lot
    of boilerplate code into your app and can become quite complicated when user journeys
    require adding, removing, and replacing multiple fragments while managing the
    back stack. Google introduced the Jetpack components, as you learned in *Chapter
    1*, *Creating Your First App*, to use established best practices in your code.
    The `Navigation` component within the suite of Jetpack components enables you
    to reduce boilerplate code and simplify navigation within your app. We are going
    to use it now to update the *Star Sign* app to use this component.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用动态和静态片段，虽然非常灵活，但会在您的应用中引入大量样板代码，并且在用户旅程需要添加、删除和替换多个片段并管理返回堆栈时可能会变得非常复杂。正如您在*第1章*，*创建您的第一个应用*中学到的，谷歌引入了Jetpack组件，以在您的代码中使用已建立的最佳实践。Jetpack组件套件中的`Navigation`组件使您能够减少样板代码并简化应用程序内的导航。我们现在将使用它来更新*星座*应用程序以使用这个组件。
- en: 'Exercise 3.05: Adding a Jetpack Navigation Graph'
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3.05：添加Jetpack导航图
- en: 'In this exercise, we are going to reuse most of the classes and resources from
    the last exercise. We will first create an empty project and copy the resources.
    Next, we will add the dependencies and create a navigation graph. Using a step-by-step
    approach, we will configure the navigation graph and add destinations to navigate
    between fragments. Perform the following steps:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将重用上一个练习中的大部分类和资源。我们将首先创建一个空项目并复制资源。接下来，我们将添加依赖项并创建一个导航图。使用逐步方法，我们将配置导航图并添加目的地以在片段之间导航。执行以下步骤：
- en: Create a new project with an `Empty Activity` called `Jetpack Fragments`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Jetpack Fragments`的`Empty Activity`的新项目。
- en: Copy `strings.xml`, `fragment_detail.xml`, `fragment_list.xml`, `DetailFragment`,
    and `ListFragment` from the previous exercise, remembering to change the `app_name`
    string in `strings.xml` and the package name for the fragment classes. Finally
    add the styles defined below the base application style in themes.xml from the
    last exercise to the themes.xml in this project. You will also need to add the
    constant property `const val STAR_SIGN_ID = "STAR_SIGN_ID"` above the class header
    in the `MainActivity`.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个练习中复制`strings.xml`、`fragment_detail.xml`、`fragment_list.xml`、`DetailFragment`和`ListFragment`，记得在`strings.xml`中更改`app_name`字符串和片段类的包名称。最后，将上一个练习中在themes.xml中定义的样式添加到此项目的themes.xml中的基本应用程序样式下面。您还需要在`MainActivity`的类头上方添加常量属性`const
    val STAR_SIGN_ID = "STAR_SIGN_ID"`。
- en: 'Once you have done that, add the following dependencies you need to use the
    `Navigation` component into `app/build.gradle` within the `dependences{ }` block:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将以下依赖项添加到`app/build.gradle`中的`dependences{ }`块中，以便使用`Navigation`组件：
- en: '[PRE42]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It will prompt you to `sync now` in the top-right hand corner of the screen
    to update the dependencies. Click the button, and after they''ve updated, make
    sure the ''app'' module is selected and go to `File` | `New` | `Android Resource`
    file:![Figure 3.17: Menu option to create Android Resource File'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会提示您在屏幕右上角点击`立即同步`以更新依赖项。点击按钮，更新后，请确保选择了'app'模块，然后转到`文件` | `新建` | `Android资源`文件：![图3.17：创建Android资源文件的菜单选项
- en: '](img/B15216_03_17_.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_17_.jpg)'
- en: 'Figure 3.17: Menu option to create Android Resource File'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17：创建Android资源文件的菜单选项
- en: 'Once this dialog appears, change the `Resource type` to `Navigation` and then
    name the file `nav_graph`:![Figure 3.18: New Resource File dialog'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦出现此对话框，将`资源类型`更改为`导航`，然后将文件命名为`nav_graph`：![图3.18：新资源文件对话框
- en: '](img/B15216_03_18_.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_18_.jpg)'
- en: 'Figure 3.18: New Resource File dialog'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18：新资源文件对话框
- en: Click OK to proceed. This creates a new folder in the `res` folder called `Navigation`
    with `nav_graph.xml` inside it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“确定”继续。这将在`res`文件夹中创建一个名为`Navigation`的新文件夹，其中包含`nav_graph.xml`。
- en: 'Opening the file, you see the following code:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件，您会看到以下代码：
- en: '[PRE43]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As it''s not being used anywhere, you might see a warning with the `<navigation>`
    element underlined in red:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它没有被任何地方使用，您可能会看到`<navigation>`元素被红色下划线标记的警告：
- en: '![Figure 3.19: Navigation not used warning underline'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19：导航未使用警告下划线'
- en: '](img/B15216_03_19_.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_19_.jpg)'
- en: 'Figure 3.19: Navigation not used warning underline'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19：导航未使用警告下划线
- en: Ignore this for now.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在先忽略这个。
- en: 'Update the `nav_graph.xml` navigation file with the following code:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`nav_graph.xml`导航文件：
- en: '[PRE44]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The preceding file is a working `Navigation` graph. Although the syntax is
    unfamiliar, it is quite straightforward to understand:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 上述文件是一个可工作的`Navigation`图。虽然语法不熟悉，但它非常容易理解：
- en: a. The `ListFragment` and `DetailFragment` are present as they would be if you
    were adding static fragments.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: a. `ListFragment`和`DetailFragment`存在，就像您添加静态片段时一样。
- en: b. There is an `id` to identify the graph at the root `<navigation>` element
    and IDs on the fragments themselves. Navigation graphs introduce the concept of
    destinations, so at the root `navigation` level, there is the `app:startDestination`,
    which has the ID of `starSignList`, which is the `ListFragment`, then within the
    `<fragment>` tag, there is the `<action>` element.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: b. 在根`<navigation>`元素上有一个`id`来标识图形，以及在片段本身上有ID。导航图引入了目的地的概念，因此在根`navigation`级别上，有`app:startDestination`，它具有`starSignList`的ID，这是`ListFragment`，然后在`<fragment>`标签内，有`<action>`元素。
- en: c. Actions are what link the destinations within the navigation graph together.
    The destination action here has an ID so you can refer to it in code and has a
    destination, which, when used, it will direct to.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: c. 操作是将导航图中的目的地链接在一起的内容。此处的目的地操作具有ID，因此您可以在代码中引用它，并且具有一个目的地，当使用时，它将指向。
- en: Now that you've added the navigation graph, you need to use it to link the activity
    and fragments together.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经添加了导航图，您需要使用它来将活动和片段链接在一起。
- en: 'Open up `activity_main.xml` and replace the `TextView` inside the `ConstraintLayout`
    with the following `FragmentContainerView`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，并将`ConstraintLayout`内的`TextView`替换为以下`FragmentContainerView`：
- en: '[PRE45]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: A `FragmentContainerView` has been added with name `android:name="androidx.navigation.fragment.NavHostFragment"`.
    It will host the fragments from the `app:navGraph="@navigation/nav_graph"` that
    you have just created. The `app:defaultNavHost` states that it is the app's default
    navigation graph. It also controls the back navigation when one fragment replaces
    another. You can have more than one `NavHostFragment` in a layout for controlling
    two or more areas of the screen that manage their own fragments, which you might
    use for dual-pane layouts in tablets, but there can only be one default.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加了一个名为`android:name="androidx.navigation.fragment.NavHostFragment"`的`FragmentContainerView`。它将托管刚刚创建的`app:navGraph="@navigation/nav_graph"`中的片段。`app:defaultNavHost`表示它是应用程序的默认导航图。它还在一个片段替换另一个片段时控制后退导航。你可以在布局中有多个`NavHostFragment`来控制屏幕的两个或更多区域，这些区域管理它们自己的片段，你可能会在平板电脑上使用双窗格布局，但只能有一个默认值。
- en: There are a few changes you need to make to make the app work as expected in
    the `ListFragment`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做一些改变，以使应用程序在`ListFragment`中按预期工作。
- en: 'Firstly, remove the class file header and references to the `StarSignListener`.
    So, the following will be replaced:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，删除类文件头和对`StarSignListener`的引用。因此，以下内容将被替换：
- en: '[PRE46]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And it will be replaced with the following line of code:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 并用下面的一行代码替换它：
- en: '[PRE47]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, at the bottom of the class, remove the `onClick` overridden method as
    you are not implementing the `View.OnClicklistener`:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在类的底部，删除`onClick`重写方法，因为你没有实现`View.OnClicklistener`：
- en: '[PRE48]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the `onViewCreated` method, replace the `forEach` statement that loops over
    the star sign views:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onViewCreated`方法中，替换循环遍历星座视图的`forEach`语句：
- en: '[PRE49]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Replace it with the following code below and add the Navigation import to the
    imports list:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 用下面的代码替换它，并将导航导入到导入列表中：
- en: '[PRE50]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Run up the app, and you'll see that the app behaves as it did before.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，你会发现应用程序的行为与之前一样。
- en: Now you've been able to remove a significant amount of boilerplate code and
    documented the navigation within the app in the navigation graph. In addition,
    you have offloaded more of the management of the `androidx` component and enables
    you to map your whole app and the relationships between fragments, activities,
    and so on. You can also use it selectively to manage different areas of your app
    that have a defined user flow, such as the startup of your app and guiding the
    user through a series of welcome screens, or some wizard layout user journey,
    for example.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经能够删除大量样板代码，并在导航图中记录了应用程序内的导航。此外，你已经卸载了更多的`androidx`组件管理，并使你能够映射整个应用程序以及片段、活动等之间的关系。你还可以有选择性地使用它来管理应用程序的不同区域，这些区域具有定义的用户流程，比如启动应用程序并引导用户浏览一系列欢迎屏幕，或者一些向导布局用户旅程，例如。
- en: With this knowledge, let's try completing an activity using the techniques learned
    from all these exercises.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，让我们尝试使用从这些练习中学到的技术完成一个活动。
- en: 'Activity 3.01: Creating a Quiz on the Planets'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动3.01：创建一个关于行星的小测验
- en: For this activity, you will create a quiz where users have to answer one of
    three questions on the planets of the Solar System. The number of fragments you
    choose to use is up to you. However, considering this chapter's content, which
    is separating UI and logic into separate fragment components, it is likely you
    will use two fragments or more to achieve this. The screenshots that follow show
    one way this could be done, but there are multiple ways to create this app. You
    can use one of the approaches detailed in this chapter, such as static fragments,
    dynamic fragments, the Jetpack Navigation component, or something custom that
    uses a combination of these and other approaches.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个活动，你将创建一个小测验，用户必须回答关于太阳系行星的三个问题中的一个。你选择使用的片段数量取决于你。然而，考虑到本章内容，即将UI和逻辑分离为单独的片段组件，你可能会使用两个或更多的片段来实现这一点。接下来的截图展示了一种可能的实现方式，但创建这个应用程序有多种方法。你可以使用本章详细介绍的方法之一，比如静态片段、动态片段、Jetpack导航组件，或者使用这些和其他方法的组合来创建自定义的方法。
- en: 'The content of the quiz is as follows. In the UI, you need to ask the user
    these three questions:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 小测验的内容如下。在UI中，你需要问用户以下三个问题：
- en: What is the largest planet?
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个是最大的行星？
- en: Which planet has the most moons?
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个行星有最多的卫星？
- en: Which planet spins on its side?
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个行星的自转是侧倒的？
- en: 'Then you need to provide a list of planets where the user can choose a planet
    that they believe is the answer to the question:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要提供一个行星列表，用户可以选择他们认为是问题的答案的行星：
- en: '`MERCURY`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`水星`'
- en: '`VENUS`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`金星`'
- en: '`EARTH`'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`地球`'
- en: '`MARS`'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`火星`'
- en: '`JUPITER`'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`木星`'
- en: '`SATURN`'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`土星`'
- en: '`URANUS`'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`天王星`'
- en: '`NEPTUNE`'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`海王星`'
- en: Once they have given their answer, you need to show them whether they are correct
    or wrong. The correct answer should be accompanied by some text that gives more
    detail about the question's answer.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他们给出了答案，你需要告诉他们他们的答案是正确还是错误。正确答案应该伴随着一些详细解释问题答案的文字。
- en: '[PRE51]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Following are some screenshots of how the UI might look to achieve the requirements
    of the app you need to build:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些屏幕截图，展示了如何实现应用程序的要求的UI：
- en: '**Questions Screen**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题屏幕**'
- en: '![Figure 3.20: Planet Quiz questions screen'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.20：行星小测验问题屏幕'
- en: '](img/B15216_03_20_.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_20_.jpg)'
- en: 'Figure 3.20: Planet Quiz questions screen'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：行星小测验问题屏幕
- en: '**Answers Options Screen**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案选项屏幕**'
- en: '![Figure 3.21: Planet Quiz multiple choice answers screen'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.21：行星小测验多项选择答案屏幕'
- en: '](img/B15216_03_21_.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_21_.jpg)'
- en: 'Figure 3.21: Planet Quiz multiple choice answers screen'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：行星小测验多项选择答案屏幕
- en: '**Answer Screen**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案屏幕**'
- en: '![Figure 3.22: Planet Quiz Answer screen with detailed answer'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.22：带有详细答案的行星小测验答案屏幕'
- en: '](img/B15216_03_22_.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_03_22_.jpg)'
- en: 'Figure 3.22: Planet Quiz Answer screen with detailed answer'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：带有详细答案的行星小测验答案屏幕
- en: 'The following steps will help to complete the activity:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助完成这个活动：
- en: Create an Android project with an `Empty Activity`
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有“空活动”的Android项目
- en: Update the `strings.xml` file with entries you need for the project.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用项目所需的条目更新“strings.xml”文件。
- en: Amend the `themes.xml` file with styles for the project.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用项目的样式修改“themes.xml”文件。
- en: Create a `QuestionsFragment`, update the layout with the questions, and add
    interaction with buttons and click listeners.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个“QuestionsFragment”，更新布局以显示问题，并添加与按钮和点击侦听器的交互。
- en: Optionally, create a multiple choice fragment and add answer options and button
    click handling (this can also be done by adding the possible answer options to
    the `QuestionsFragment`).
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，创建一个多选片段，并添加答案选项和按钮点击处理（这也可以通过将可能的答案选项添加到“QuestionsFragment”中来完成）。
- en: Create an `AnswersFragment` that displays the relevant question's answer and
    also displays more details about the answer itself.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个“AnswersFragment”，显示相关问题的答案，并显示有关答案本身的更多细节。
- en: Note
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：http://packt.live/3sKj1cp
- en: The sources for all the exercises and the activity in this chapter are located
    at [http://packt.live/3qw0nms](http://packt.live/3qw0nms).
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有练习和活动的资源位于[http://packt.live/3qw0nms](http://packt.live/3qw0nms)。
- en: Summary
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered fragments in depth, starting with learning the `ViewGroup`
    and dynamically adding and replacing fragments were then covered. We then finished
    with how this can be simplified by using the Jetpack Navigation component.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入介绍了片段，从学习“ViewGroup”和动态添加和替换片段开始。然后我们介绍了如何通过使用Jetpack Navigation组件来简化这一过程。
- en: Fragments are one of the fundamental building blocks of Android development.
    The concepts you have learned here will allow you to build upon and progress to
    creating increasingly more advanced apps. Fragments are at the core of building
    effective navigation into your app in order to bind features and functionality
    that is simple and easy to use. The next chapter will explore this area in detail
    by using established UI patterns to build clear and consistent navigation and
    illustrate how fragments are used to enable this.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 片段是Android开发的基本构建块之一。您在这里学到的概念将使您能够不断构建并进步，创建越来越先进的应用程序。片段是构建有效导航到您的应用程序核心的一部分，以绑定简单易用的功能和功能。下一章将通过使用已建立的UI模式来详细探讨这一领域，以构建清晰一致的导航，并说明片段如何用于实现这一目的。
