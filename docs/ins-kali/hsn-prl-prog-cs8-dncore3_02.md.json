["```cs\nstatic class Program\n{\n    /// <summary>\n    /// The main entry point for the application.\n    /// </summary>\n    [STAThread]\n    static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new Form1());\n    }\n}\n```", "```cs\n/// <summary>\n    /// App\n    /// </summary>\n    public partial class App : System.Windows.Application {\n\n        /// <summary>\n        /// InitializeComponent\n        /// </summary>\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(\n         \"PresentationBuildTasks\", \"4.0.0.0\")]\n        public void InitializeComponent() {\n\n            #line 5 \"..\\..\\App.xaml\"\n            this.StartupUri = new System.Uri(\"MainWindow.xaml\", \n             System.UriKind.Relative);\n\n            #line default\n            #line hidden\n        }\n\n        /// <summary>\n        /// Application Entry Point.\n        /// </summary>\n        [System.STAThreadAttribute()]\n        [System.Diagnostics.DebuggerNonUserCodeAttribute()]\n        [System.CodeDom.Compiler.GeneratedCodeAttribute(\n         \"PresentationBuildTasks\", \"4.0.0.0\")]\n        public static void Main() {\n            WpfApp1.App app = new WpfApp1.App();\n            app.InitializeComponent();\n            app.Run();\n        }\n    }\n```", "```cs\nusing System;\nnamespace Ch01\n{\n    class _1Synchronous\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Start Execution!!!\");\n\n            PrintNumber10Times();\n            Console.WriteLine(\"Finish Execution\");\n            Console.ReadLine();\n        }\n        private static void PrintNumber10Times()\n        {\n            for (int i = 0; i < 10; i++)\n            {\n                Console.Write(1);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n```", "```cs\nusing System;\nnamespace Ch01\n{\n    class _2ThreadStart\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Start Execution!!!\");\n\n            //Using Thread without parameter\n            CreateThreadUsingThreadClassWithoutParameter();\n            Console.WriteLine(\"Finish Execution\");\n            Console.ReadLine();\n        }\n        private static void CreateThreadUsingThreadClassWithoutParameter()\n        {\n            System.Threading.Thread thread;\n            thread = new System.Threading.Thread(new \n             System.Threading.ThreadStart(PrintNumber10Times));\n            thread.Start();\n        }\n        private static void PrintNumber10Times()\n        {\n            for (int i = 0; i < 10; i++)\n            {\n                Console.Write(1);\n            }\n            Console.WriteLine();\n        }\n    }\n}            \n```", "```cs\nusing System;\nnamespace Ch01\n{\n    class _3ParameterizedThreadStart\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Start Execution!!!\");\n            //Using Thread with parameter\n            CreateThreadUsingThreadClassWithParameter();\n            Console.WriteLine(\"Finish Execution\");\n            Console.ReadLine();\n        }\n        private static void CreateThreadUsingThreadClassWithParameter()\n        {\n            System.Threading.Thread thread;\n            thread = new System.Threading.Thread(new        \n             System.Threading.ParameterizedThreadStart(PrintNumberNTimes));\n            thread.Start(10);\n        }\n        private static void PrintNumberNTimes(object times)\n        {\n            int n = Convert.ToInt32(times);\n            for (int i = 0; i < n; i++)\n            {\n                Console.Write(1);\n            }\n            Console.WriteLine();\n        }\n    }\n}\n```", "```cs\nprivate static void PrintNumber10Times(object state)\n{\n    for (int i = 0; i < 10; i++)\n    {\n        Console.Write(1);\n    }\n    Console.WriteLine();\n}\n```", "```cs\nprivate static void CreateThreadUsingThreadPool()\n{\n    ThreadPool.QueueUserWorkItem(new WaitCallback(PrintNumber10Times));\n}\n```", "```cs\nusing System;\nusing System.Threading;\n\nnamespace Ch01\n{\n    class _4ThreadPool\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Start Execution!!!\");\n            CreateThreadUsingThreadPool();\n            Console.WriteLine(\"Finish Execution\");\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.ComponentModel;\nusing System.Text;\nusing System.Threading;\n\nnamespace Ch01\n{\n    class _5BackgroundWorker\n    {\n        static void Main(string[] args)\n        {\n            var backgroundWorker = new BackgroundWorker();\n            backgroundWorker.WorkerReportsProgress = true;\n            backgroundWorker.WorkerSupportsCancellation = true;\n            backgroundWorker.DoWork += SimulateServiceCall;\n            backgroundWorker.ProgressChanged += ProgressChanged;\n            backgroundWorker.RunWorkerCompleted += \n              RunWorkerCompleted;\n            backgroundWorker.RunWorkerAsync();\n            Console.WriteLine(\"To Cancel Worker Thread Press C.\");\n            while (backgroundWorker.IsBusy)\n            {\n                if (Console.ReadKey(true).KeyChar == 'C')\n                {\n                    backgroundWorker.CancelAsync();\n                }\n            }\n        }\n        // This method executes when the background worker finishes \n        // execution\n        private static void RunWorkerCompleted(object sender, \n          RunWorkerCompletedEventArgs e)\n        {\n            if (e.Error != null)\n            {\n                Console.WriteLine(e.Error.Message);\n            }\n            else\n                Console.WriteLine($\"Result from service call \n                 is {e.Result}\");\n        }\n\n        // This method is called when background worker want to \n        // report progress to caller\n        private static void ProgressChanged(object sender, \n          ProgressChangedEventArgs e)\n        {\n            Console.WriteLine($\"{e.ProgressPercentage}% completed\");\n        }\n\n        // Service call we are trying to simulate\n        private static void SimulateServiceCall(object sender, \n          DoWorkEventArgs e)\n        {\n            var worker = sender as BackgroundWorker;\n            StringBuilder data = new StringBuilder();\n            //Simulate a streaming service call which gets data and \n            //store it to return back to caller\n            for (int i = 1; i <= 100; i++)\n            {\n                //worker.CancellationPending will be true if user \n                //press C\n                if (!worker.CancellationPending)\n                {\n                    data.Append(i);\n                    worker.ReportProgress(i);\n                    Thread.Sleep(100);\n                    //Try to uncomment and throw error\n                    //throw new Exception(\"Some Error has occurred\");\n                }\n               else\n                {\n                    //Cancels the execution of worker\n                    worker.CancelAsync();\n                }\n            }\n            e.Result = data;\n        }\n    }\n}\n```", "```cs\nbackgroundWorker.WorkerReportsProgress = true;\nbackgroundWorker.WorkerSupportsCancellation = true;\n```", "```cs\nbackgroundWorker.DoWork += SimulateServiceCall;\nbackgroundWorker.ProgressChanged += ProgressChanged;\nbackgroundWorker.RunWorkerCompleted += RunWorkerCompleted;\n```", "```cs\nbackgroundWorker.RunWorkerAsync();\n```", "```cs\ne.Result = data;\n```"]