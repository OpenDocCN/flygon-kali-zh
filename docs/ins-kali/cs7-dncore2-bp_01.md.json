["```cs\nnamespace eBookManager.Engine \n{ \n    public class Document \n    { \n        public string Title { get; set; } \n        public string FileName { get; set; } \n        public string Extension { get; set; } \n        public DateTime LastAccessed { get; set; } \n        public DateTime Created { get; set; } \n        public string FilePath { get; set; } \n        public string FileSize { get; set; } \n        public string ISBN { get; set; } \n        public string Price { get; set; } \n        public string Publisher { get; set; } \n        public string Author { get; set; } \n        public DateTime PublishDate { get; set; } \n        public DeweyDecimal Classification { get; set; } \n        public string Category { get; set; } \n    } \n} \n```", "```cs\nnamespace eBookManager.Engine \n{ \n    public class DeweyDecimal \n    { \n        public string ComputerScience { get; set; } = \"000\"; \n        public string DataProcessing { get; set; } = \"004\"; \n        public string ComputerProgramming { get; set; } = \"005\"; \n    } \n}\n```", "```cs\nusing System; \nusing System.Collections.Generic; \n\nnamespace eBookManager.Engine \n{ \n    [Serializable] \n    public class StorageSpace \n    { \n        public int ID { get; set; } \n        public string Name { get; set; } \n        public string Description { get; set; } \n        public List<Document> BookList { get; set; } \n    } \n} \n```", "```cs\npublic static class ExtensionMethods \n{ \n\n} \n```", "```cs\npublic static int ToInt(this string value, int defaultInteger = 0) \n{ \n    try \n    { \n        if (int.TryParse(value, out int validInteger)) \n          // Out variables \n         return validInteger; \n        else \n         return defaultInteger; \n    } \n    catch  \n    { \n        return defaultInteger; \n    } \n} \n```", "```cs\nint validInteger; \nif (int.TryParse(value, out validInteger)) \n{ \n\n} \n```", "```cs\nif (int.TryParse(value, out int validInteger)) \n```", "```cs\npublic static double ToMegabytes(this long bytes) \n{ \n    return (bytes > 0) ? (bytes / 1024f) / 1024f : bytes; \n} \n```", "```cs\npublic static bool StorageSpaceExists(this List<StorageSpace> space, string nameValueToCheck, out int storageSpaceId) \n{ \n    bool exists = false; \n    storageSpaceId = 0; \n\n    if (space.Count() != 0) \n    { \n       int count = (from r in space \n                 where r.Name.Equals(nameValueToCheck) \n                 select r).Count(); \n\n        if (count > 0) \n            exists = true; \n\n        storageSpaceId = (from r in space \n                          select r.ID).Max() + 1;                                 \n    } \n    return exists; \n} \n```", "```cs\npublic static void WriteToDataStore(this List<StorageSpace> value, string storagePath, bool appendToExistingFile = false) \n{ \n    JsonSerializer json = new JsonSerializer(); \n    json.Formatting = Formatting.Indented; \n    using (StreamWriter sw = new StreamWriter(storagePath,  \n     appendToExistingFile)) \n    { \n        using (JsonWriter writer = new JsonTextWriter(sw)) \n        { \n            json.Serialize(writer, value); \n        } \n    } \n} \n```", "```cs\npublic static List<StorageSpace> ReadFromDataStore(this List<StorageSpace> value, string storagePath) \n{ \n    JsonSerializer json = new JsonSerializer(); \n    if (!File.Exists(storagePath)) \n    { \n        var newFile = File.Create(storagePath); \n        newFile.Close(); \n    } \n    using (StreamReader sr = new StreamReader(storagePath)) \n    { \n        using (JsonReader reader = new JsonTextReader(sr)) \n        { \n            var retVal = \n             json.Deserialize<List<StorageSpace>>(reader); \n            if (retVal is null) \n                retVal = new List<StorageSpace>(); \n\n            return retVal; \n        } \n    } \n} \n```", "```cs\npublic (DateTime dateCreated, DateTime dateLastAccessed, string fileName, string fileExtension, long fileLength, bool error) GetFileProperties(string filePath) \n{ \n    var returnTuple = (created: DateTime.MinValue,\n    lastDateAccessed: DateTime.MinValue, name: \"\", ext: \"\",\n    fileSize: 0L, error: false); \n\n    try \n    { \n        FileInfo fi = new FileInfo(filePath); \n        fi.Refresh(); \n        returnTuple = (fi.CreationTime, fi.LastAccessTime, fi.Name, \n        fi.Extension, fi.Length, false); \n    } \n    catch \n    { \n        returnTuple.error = true; \n    } \n    return returnTuple; \n} \n```", "```cs\nvar returnTuple = (created: DateTime.MinValue, lastDateAccessed: DateTime.MinValue, name: \"\", ext: \"\", fileSize: 0L, error: false); \n```", "```cs\nreturnTuple = (fi.CreationTime, fi.LastAccessTime, fi.Name, fi.Extension, fi.Length, false); \n```", "```cs\nusing eBookManager.Engine; \nusing System; \nusing System.Collections.Generic; \nusing System.IO; \nusing System.Linq; \nusing System.Windows.Forms; \nusing static eBookManager.Helper.ExtensionMethods; \nusing static System.Math; \n```", "```cs\nprivate string _jsonPath; \nprivate List<StorageSpace> spaces; \nprivate enum StorageSpaceSelection { New = -9999, NoSelection = -1 } \n```", "```cs\npublic ImportBooks() \n{ \n    InitializeComponent(); \n    _jsonPath = Path.Combine(Application.StartupPath, \n    \"bookData.txt\"); \n    spaces = spaces.ReadFromDataStore(_jsonPath); \n} \n```", "```cs\nprivate HashSet<string> AllowedExtensions => new HashSet<string>(StringComparer.InvariantCultureIgnoreCase) { \".doc\",\".docx\",\".pdf\", \".epub\" }; \nprivate enum Extention { doc = 0, docx = 1, pdf = 2, epub = 3 } \n```", "```cs\nprivate DateTime _defaultDate; \n\npublic Document() \n{ \n    _defaultDate = DateTime.Now; \n} \n```", "```cs\nprivate DateTime _defaultDate; \npublic Document() => _defaultDate = DateTime.Now; \n```", "```cs\npublic string PDFExtension \n{ \n    get \n    { \n        return nameof(Extention.pdf); \n    } \n} \n```", "```cs\npublic string PDFExtension => nameof(Extention.pdf); \n```", "```cs\npublic string DefaultSavePath \n{ \n    get \n    { \n        return _jsonPath; \n    } \n    set \n    { \n        _jsonPath = value; \n    } \n} \n```", "```cs\npublic string DefaultSavePath \n{ \n    get => _jsonPath; \n    set => _jsonPath = value; \n} \n```", "```cs\nprivate HashSet<string> AllowedExtensions \n{ \n    get \n    { \n        return new HashSet<string> \n        (StringComparer.InvariantCultureIgnoreCase) { \".doc\", \n        \".docx\", \".pdf\", \".epub\" }; \n    } \n} \n```", "```cs\npublic void PopulateBookList(string paramDir, TreeNode paramNode) \n{ \n    DirectoryInfo dir = new DirectoryInfo(paramDir); \n    foreach (DirectoryInfo dirInfo in dir.GetDirectories()) \n    { \n        TreeNode node = new TreeNode(dirInfo.Name); \n        node.ImageIndex = 4; \n        node.SelectedImageIndex = 5; \n\n        if (paramNode != null) \n            paramNode.Nodes.Add(node); \n        else \n            tvFoundBooks.Nodes.Add(node); \n        PopulateBookList(dirInfo.FullName, node); \n    } \n    foreach (FileInfo fleInfo in dir.GetFiles().Where\n    (x => AllowedExtensions.Contains(x.Extension)).ToList()) \n    { \n        TreeNode node = new TreeNode(fleInfo.Name); \n        node.Tag = fleInfo.FullName; \n        int iconIndex = Enum.Parse(typeof(Extention), \n         fleInfo.Extension.TrimStart('.'), true).GetHashCode(); \n\n        node.ImageIndex = iconIndex; \n        node.SelectedImageIndex = iconIndex; \n        if (paramNode != null) \n            paramNode.Nodes.Add(node); \n        else \n            tvFoundBooks.Nodes.Add(node); \n    } \n} \n```", "```cs\nprivate void btnSelectSourceFolder_Click(object sender, EventArgs e) \n{ \n    try \n    { \n        FolderBrowserDialog fbd = new FolderBrowserDialog(); \n        fbd.Description = \"Select the location of your eBooks and \n        documents\"; \n\n        DialogResult dlgResult = fbd.ShowDialog(); \n        if (dlgResult == DialogResult.OK) \n        { \n            tvFoundBooks.Nodes.Clear(); \n            tvFoundBooks.ImageList = tvImages; \n\n            string path = fbd.SelectedPath; \n            DirectoryInfo di = new DirectoryInfo(path); \n            TreeNode root = new TreeNode(di.Name); \n            root.ImageIndex = 4; \n            root.SelectedImageIndex = 5; \n            tvFoundBooks.Nodes.Add(root); \n            PopulateBookList(di.FullName, root); \n            tvFoundBooks.Sort(); \n\n            root.Expand(); \n        } \n    } \n    catch (Exception ex) \n    { \n        MessageBox.Show(ex.Message); \n    } \n} \n```", "```cs\nprivate void tvFoundBooks_AfterSelect(object sender, TreeViewEventArgs e) \n{ \n    DocumentEngine engine = new DocumentEngine(); \n    string path = e.Node.Tag?.ToString() ?? \"\"; \n\n    if (File.Exists(path)) \n    { \n        var (dateCreated, dateLastAccessed, fileName, \n        fileExtention, fileLength, hasError) = \n        engine.GetFileProperties(e.Node.Tag.ToString()); \n\n        if (!hasError) \n        { \n            txtFileName.Text = fileName; \n            txtExtension.Text = fileExtention; \n            dtCreated.Value = dateCreated; \n            dtLastAccessed.Value = dateLastAccessed; \n            txtFilePath.Text = e.Node.Tag.ToString(); \n            txtFileSize.Text = $\"{Round(fileLength.ToMegabytes(),\n            2).ToString()} MB\"; \n        } \n    } \n} \n```", "```cs\nprivate void PopulateStorageSpacesList() \n{ \n    List<KeyValuePair<int, string>> lstSpaces = \n    new List<KeyValuePair<int, string>>(); \n    BindStorageSpaceList((int)StorageSpaceSelection.NoSelection, \n    \"Select Storage Space\"); \n\n    void BindStorageSpaceList(int key, string value)\n    // Local function \n    { \n        lstSpaces.Add(new KeyValuePair<int, string>(key, value)); \n    } \n\n    if (spaces is null || spaces.Count() == 0) // Pattern matching \n    { \n        BindStorageSpaceList((int)StorageSpaceSelection.New, \"\n        <create new>\"); \n    } \n    else \n    { \n        foreach (var space in spaces) \n        { \n            BindStorageSpaceList(space.ID, space.Name); \n        } \n    } \n\n    dlVirtualStorageSpaces.DataSource = new \n    BindingSource(lstSpaces, null); \n    dlVirtualStorageSpaces.DisplayMember = \"Value\"; \n    dlVirtualStorageSpaces.ValueMember = \"Key\"; \n} \n```", "```cs\nprivate void SomeMethod() \n{ \n    int currentYear = GetCurrentYear(); \n\n    int GetCurrentYear(int iAddYears = 0) \n    { \n        return DateTime.Now.Year + iAddYears; \n    } \n\n    int nextYear = GetCurrentYear(1); \n} \n```", "```cs\nswitch (objObject) \n{ \n    case null: \n        WriteLine(\"null\"); // Constant pattern \n        break; \n\n    case Document doc when doc.Author.Equals(\"Stephen King\"): \n        WriteLine(\"Stephen King is the author\"); \n        break; \n\n    case Document doc when doc.Author.StartsWith(\"Stephen\"): \n        WriteLine(\"Stephen is the author\"); \n        break; \n\n    default: \n        break; \n} \n```", "```cs\nprivate void ImportBooks_Load(object sender, EventArgs e) \n{ \n    PopulateStorageSpacesList(); \n\n    if (dlVirtualStorageSpaces.Items.Count == 0) \n    { \n        dlVirtualStorageSpaces.Items.Add(\"<create new storage \n        space>\"); \n    } \n\n    lblEbookCount.Text = \"\"; \n} \n```", "```cs\nprivate void dlVirtualStorageSpaces_SelectedIndexChanged(object sender, EventArgs e) \n{ \n    int selectedValue = \n    dlVirtualStorageSpaces.SelectedValue.ToString().ToInt(); \n\n    if (selectedValue == (int)StorageSpaceSelection.New) // -9999 \n    { \n        txtNewStorageSpaceName.Visible = true; \n        lblStorageSpaceDescription.Visible = true; \n        txtStorageSpaceDescription.ReadOnly = false; \n        btnSaveNewStorageSpace.Visible = true; \n        btnCancelNewStorageSpaceSave.Visible = true; \n        dlVirtualStorageSpaces.Enabled = false; \n        btnAddNewStorageSpace.Enabled = false; \n        lblEbookCount.Text = \"\"; \n    } \n    else if (selectedValue != \n    (int)StorageSpaceSelection.NoSelection) \n    { \n        // Find the contents of the selected storage space \n        int contentCount = (from c in spaces \n                            where c.ID == selectedValue \n                            select c).Count(); \n        if (contentCount > 0) \n        { \n            StorageSpace selectedSpace = (from c in spaces \n                                          where c.ID == \n                                          selectedValue \n                                          select c).First(); \n\n            txtStorageSpaceDescription.Text = \n            selectedSpace.Description; \n\n            List<Document> eBooks = (selectedSpace.BookList == \n            null) \n             ? new List<Document> { } : selectedSpace.BookList; \n            lblEbookCount.Text = $\"Storage Space contains \n             {eBooks.Count()} {(eBooks.Count() == 1 ? \"eBook\" :\n             \"eBooks\")}\"; \n        } \n    } \n    else \n    { \n        lblEbookCount.Text = \"\"; \n    } \n} \n```", "```cs\nprivate void btnSaveNewStorageSpace_Click(object sender,\n  EventArgs e) \n  { \n    try \n    { \n        if (txtNewStorageSpaceName.Text.Length != 0) \n        { \n            string newName = txtNewStorageSpaceName.Text; \n\n            // throw expressions: bool spaceExists = \n           (space exists = false) ? return false : throw exception                     \n            // Out variables \n            bool spaceExists = (!spaces.StorageSpaceExists\n            (newName, out int nextID)) ? false : throw new \n            Exception(\"The storage space you are \n             trying to add already exists.\"); \n\n            if (!spaceExists) \n            { \n                StorageSpace newSpace = new StorageSpace(); \n                newSpace.Name = newName; \n                newSpace.ID = nextID; \n                newSpace.Description = \n                txtStorageSpaceDescription.Text; \n                spaces.Add(newSpace); \n                PopulateStorageSpacesList(); \n                // Save new Storage Space Name \n                txtNewStorageSpaceName.Clear(); \n                txtNewStorageSpaceName.Visible = false; \n                lblStorageSpaceDescription.Visible = false; \n                txtStorageSpaceDescription.ReadOnly = true; \n                txtStorageSpaceDescription.Clear(); \n                btnSaveNewStorageSpace.Visible = false; \n                btnCancelNewStorageSpaceSave.Visible = false; \n                dlVirtualStorageSpaces.Enabled = true; \n                btnAddNewStorageSpace.Enabled = true; \n            } \n        } \n    } \n    catch (Exception ex) \n    { \n        txtNewStorageSpaceName.SelectAll(); \n        MessageBox.Show(ex.Message); \n    } \n} \n```", "```cs\nbool spaceExists = (!spaces.StorageSpaceExists(newName, out int nextID)) ? false : throw new Exception(\"The storage space you are trying to add already exists.\"); \n```", "```cs\nprivate void btnAddeBookToStorageSpace_Click(object sender, EventArgs e) \n{ \n    try \n    { \n        int selectedStorageSpaceID = \n         dlVirtualStorageSpaces.SelectedValue.ToString().ToInt(); \n        if ((selectedStorageSpaceID !=   \n         (int)StorageSpaceSelection.NoSelection) \n        && (selectedStorageSpaceID !=\n          (int)StorageSpaceSelection.New)) \n        { \n            UpdateStorageSpaceBooks(selectedStorageSpaceID); \n        } \n        else throw new Exception(\"Please select a Storage \n       Space to add your eBook to\"); // throw expressions \n    } \n    catch (Exception ex) \n    { \n        MessageBox.Show(ex.Message); \n    } \n} \n```", "```cs\nprivate void UpdateStorageSpaceBooks(int storageSpaceId) \n{ \n    try \n    { \n        int iCount = (from s in spaces \n                      where s.ID == storageSpaceId \n                      select s).Count(); \n        if (iCount > 0) // The space will always exist \n        { \n            // Update \n            StorageSpace existingSpace = (from s in spaces \n              where s.ID == storageSpaceId select s).First(); \n\n            List<Document> ebooks = existingSpace.BookList; \n\n            int iBooksExist = (ebooks != null) ? (from b in ebooks \n              where $\"{b.FileName}\".Equals($\"\n               {txtFileName.Text.Trim()}\") \n                 select b).Count() : 0; \n\n            if (iBooksExist > 0) \n            { \n                // Update existing book \n                DialogResult dlgResult = MessageBox.Show($\"A book \n                with the same name has been found in Storage Space \n                {existingSpace.Name}. \n                Do you want to replace the existing book\n                entry with this one?\", \n                \"Duplicate Title\", MessageBoxButtons.YesNo,\n                 MessageBoxIcon.Warning,\n                 MessageBoxDefaultButton.Button2); \n                if (dlgResult == DialogResult.Yes) \n                { \n                    Document existingBook = (from b in ebooks \n                      where $\"\n                      {b.FileName}\".Equals($\"\n                      {txtFileName.Text.Trim()}\") \n                       select b).First(); \n\n                    existingBook.FileName = txtFileName.Text; \n                    existingBook.Extension = txtExtension.Text; \n                    existingBook.LastAccessed = \n                    dtLastAccessed.Value; \n                    existingBook.Created = dtCreated.Value; \n                    existingBook.FilePath = txtFilePath.Text; \n                    existingBook.FileSize = txtFileSize.Text; \n                    existingBook.Title = txtTitle.Text; \n                    existingBook.Author = txtAuthor.Text; \n                    existingBook.Publisher = txtPublisher.Text; \n                    existingBook.Price = txtPrice.Text; \n                    existingBook.ISBN = txtISBN.Text; \n                    existingBook.PublishDate = \n                    dtDatePublished.Value; \n                    existingBook.Category = txtCategory.Text; \n               } \n            } \n            else \n            { \n                // Insert new book \n                Document newBook = new Document(); \n                newBook.FileName = txtFileName.Text; \n                newBook.Extension = txtExtension.Text; \n                newBook.LastAccessed = dtLastAccessed.Value; \n                newBook.Created = dtCreated.Value; \n                newBook.FilePath = txtFilePath.Text; \n                newBook.FileSize = txtFileSize.Text; \n                newBook.Title = txtTitle.Text; \n                newBook.Author = txtAuthor.Text; \n                newBook.Publisher = txtPublisher.Text; \n                newBook.Price = txtPrice.Text; \n                newBook.ISBN = txtISBN.Text; \n                newBook.PublishDate = dtDatePublished.Value; \n                newBook.Category = txtCategory.Text; \n\n                if (ebooks == null) \n                    ebooks = new List<Document>(); \n                ebooks.Add(newBook); \n                existingSpace.BookList = ebooks; \n            } \n        } \n        spaces.WriteToDataStore(_jsonPath); \n        PopulateStorageSpacesList(); \n        MessageBox.Show(\"Book added\"); \n    } \n    catch (Exception ex) \n    { \n        MessageBox.Show(ex.Message); \n    } \n} \n```", "```cs\nprivate void btnCancelNewStorageSpaceSave_Click(object sender, EventArgs e) \n{ \n    txtNewStorageSpaceName.Clear(); \n    txtNewStorageSpaceName.Visible = false; \n    lblStorageSpaceDescription.Visible = false; \n    txtStorageSpaceDescription.ReadOnly = true; \n    txtStorageSpaceDescription.Clear(); \n    btnSaveNewStorageSpace.Visible = false; \n    btnCancelNewStorageSpaceSave.Visible = false; \n    dlVirtualStorageSpaces.Enabled = true; \n    btnAddNewStorageSpace.Enabled = true; \n} \n\nprivate void btnAddNewStorageSpace_Click(object sender, EventArgs e) \n{ \n    txtNewStorageSpaceName.Visible = true; \n    lblStorageSpaceDescription.Visible = true; \n    txtStorageSpaceDescription.ReadOnly = false; \n    btnSaveNewStorageSpace.Visible = true; \n    btnCancelNewStorageSpaceSave.Visible = true; \n    dlVirtualStorageSpaces.Enabled = false; \n    btnAddNewStorageSpace.Enabled = false; \n} \n```", "```cs\nusing eBookManager.Engine; \nusing eBookManager.Helper; \nusing System; \nusing System.Collections.Generic; \nusing System.IO; \nusing System.Windows.Forms; \nusing System.Linq; \nusing System.Diagnostics; \n```", "```cs\nprivate string _jsonPath; \nprivate List<StorageSpace> spaces; \n\npublic eBookManager() \n{ \n    InitializeComponent(); \n    _jsonPath = Path.Combine(Application.StartupPath, \n    \"bookData.txt\"); \n    spaces = spaces.ReadFromDataStore(_jsonPath); \n} \n\nprivate void Form1_Load(object sender, EventArgs e) \n{             \n    PopulateStorageSpaceList(); \n} \n\nprivate void PopulateStorageSpaceList() \n{ \n    lstStorageSpaces.Clear(); \n    if (!(spaces == null)) \n    { \n        foreach (StorageSpace space in spaces) \n        { \n            ListViewItem lvItem = new ListViewItem(space.Name, 0); \n            lvItem.Tag = space.BookList; \n            lvItem.Name = space.ID.ToString(); \n            lstStorageSpaces.Items.Add(lvItem); \n        } \n    } \n} \n```", "```cs\nprivate void lstStorageSpaces_MouseClick(object sender, MouseEventArgs e) \n{ \n    ListViewItem selectedStorageSpace = \n    lstStorageSpaces.SelectedItems[0]; \n    int spaceID = selectedStorageSpace.Name.ToInt(); \n\n    txtStorageSpaceDescription.Text = (from d in spaces \n                                       where d.ID == spaceID \n                                       select \n                                       d.Description).First(); \n\n    List<Document> ebookList = \n     (List<Document>)selectedStorageSpace.Tag; \n     PopulateContainedEbooks(ebookList); \n}\n```", "```cs\nprivate void PopulateContainedEbooks(List<Document> ebookList) \n{ \n    lstBooks.Clear(); \n    ClearSelectedBook(); \n\n    if (ebookList != null) \n    { \n        foreach (Document eBook in ebookList) \n        { \n            ListViewItem book = new ListViewItem(eBook.Title, 1); \n            book.Tag = eBook; \n            lstBooks.Items.Add(book); \n        } \n    } \n    else \n    { \n        ListViewItem book = new ListViewItem(\"This storage space \n        contains no eBooks\", 2); \n        book.Tag = \"\"; \n        lstBooks.Items.Add(book); \n    } \n} \n```", "```cs\nprivate void ClearSelectedBook() \n{ \n    foreach (Control ctrl in gbBookDetails.Controls) \n    { \n        if (ctrl is TextBox) \n            ctrl.Text = \"\"; \n    } \n\n    foreach (Control ctrl in gbFileDetails.Controls) \n    { \n        if (ctrl is TextBox) \n            ctrl.Text = \"\"; \n    } \n\n    dtLastAccessed.Value = DateTime.Now; \n    dtCreated.Value = DateTime.Now; \n    dtDatePublished.Value = DateTime.Now; \n} \n```", "```cs\nprivate void mnuImportEbooks_Click(object sender, EventArgs e) \n{ \n    ImportBooks import = new ImportBooks(); \n    import.ShowDialog(); \n    spaces = spaces.ReadFromDataStore(_jsonPath); \n    PopulateStorageSpaceList(); \n} \n```", "```cs\nprivate void lstBooks_MouseClick(object sender, MouseEventArgs e) \n{ \n    ListViewItem selectedBook = lstBooks.SelectedItems[0]; \n    if (!String.IsNullOrEmpty(selectedBook.Tag.ToString())) \n    { \n        Document ebook = (Document)selectedBook.Tag; \n        txtFileName.Text = ebook.FileName; \n        txtExtension.Text = ebook.Extension; \n        dtLastAccessed.Value = ebook.LastAccessed; \n        dtCreated.Value = ebook.Created; \n        txtFilePath.Text = ebook.FilePath; \n        txtFileSize.Text = ebook.FileSize; \n        txtTitle.Text = ebook.Title; \n        txtAuthor.Text = ebook.Author; \n        txtPublisher.Text = ebook.Publisher; \n        txtPrice.Text = ebook.Price; \n        txtISBN.Text = ebook.ISBN; \n        dtDatePublished.Value = ebook.PublishDate; \n        txtCategory.Text = ebook.Category; \n    } \n} \n```", "```cs\nprivate void btnReadEbook_Click(object sender, EventArgs e) \n{ \n    string filePath = txtFilePath.Text; \n    FileInfo fi = new FileInfo(filePath); \n    if (fi.Exists) \n    { \n        Process.Start(Path.GetDirectoryName(filePath)); \n    } \n} \n```"]