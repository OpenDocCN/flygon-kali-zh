["```cs\n     using\n\n     static\n\n     System.Console;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Person\n\n     : object\n\n    {\n      // fields\n\n      public\n\n     string\n\n    ? Name;    // ? allows null\n\n      public\n\n     DateTime DateOfBirth;\n      public\n\n     List<Person> Children = new\n\n    (); // C# 9 or later\n\n      // methods\n\n      public\n\n    void\n\n    WriteToConsole\n\n    ()\n\n      {\n        WriteLine($\"\n\n    {Name}\n\n     was born on a \n\n    {DateOfBirth:dddd}\n\n    .\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n\n     **<ItemGroup>**\n\n     **<ProjectReference**\n\n     **Include=**\n\n    **\"..\\PacktLibrary\\PacktLibrary.csproj\"**\n\n     **/>**\n\n     **</ItemGroup>**\n\n    </Project> \n\n    ```", "```cs\n     // static method to \"multiply\"\n\n    public\n\n    static\n\n     Person \n\n    Procreate\n\n    (\n\n    Person p1, Person p2\n\n    )\n\n    {\n      Person baby = new\n\n    ()\n      {\n        Name = $\"Baby of \n\n    {p1.Name}\n\n     and \n\n    {p2.Name}\n\n    \"\n\n      };\n      p1.Children.Add(baby);\n      p2.Children.Add(baby);\n      return\n\n     baby;\n    }\n    // instance method to \"multiply\"\n\n    public\n\n     Person \n\n    ProcreateWith\n\n    (\n\n    Person partner\n\n    )\n\n    {\n      return\n\n     Procreate(this\n\n    , partner);\n    } \n\n    ```", "```cs\n     using\n\n     Packt.Shared;\n    using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n    Person harry = new\n\n    () { Name = \"Harry\"\n\n     }; \n    Person mary = new\n\n    () { Name = \"Mary\"\n\n     }; \n    Person jill = new\n\n    () { Name = \"Jill\"\n\n     };\n    // call instance method\n\n    Person baby1 = mary.ProcreateWith(harry); \n    baby1.Name = \"Gary\"\n\n    ;\n    // call static method\n\n    Person baby2 = Person.Procreate(harry, jill);\n    WriteLine($\"\n\n    {harry.Name}\n\n     has \n\n    {harry.Children.Count}\n\n     children.\"\n\n    ); \n    WriteLine($\"\n\n    {mary.Name}\n\n     has \n\n    {mary.Children.Count}\n\n     children.\"\n\n    ); \n    WriteLine($\"\n\n    {jill.Name}\n\n     has \n\n    {jill.Children.Count}\n\n     children.\"\n\n    ); \n    WriteLine(\n      format: \"{0}'s first child is named \\\"{1}\\\".\"\n\n    ,\n      arg0: harry.Name,\n      arg1: harry.Children[0\n\n    ].Name); \n\n    ```", "```cs\n    Harry has 2 children. \n    Mary has 1 children. \n    Jill has 1 children.\n    Harry's first child is named \"Gary\". \n\n    ```", "```cs\n string\n\n s1 = \"Hello \"\n\n; \nstring\n\n s2 = \"World!\"\n\n;\nstring\n\n s3 = string\n\n.Concat(s1, s2); \nWriteLine(s3); // Hello World! \n\n```", "```cs\n string\n\n s3 = s1 + s2; \n\n```", "```cs\n     // operator to \"multiply\"\n\n    public\n\n     static\n\n     Person operator\n\n     *(Person p1, Person p2)\n    {\n      return\n\n     Person.Procreate(p1, p2);\n    } \n\n    ```", "```cs\n     // call static method\n\n    Person baby2 = Person.Procreate(harry, jill);\n\n    **// call an operator**\n\n    **Person baby3 = harry * mary;** \n\n    ```", "```cs\n    Harry has 3 children. \n    Mary has 2 children. \n    Jill has 1 children.\n    Harry's first child is named \"Gary\". \n\n    ```", "```cs\n     // method with a local function\n\n    public\n\n    static\n\n    int\n\n    Factorial\n\n    (\n\n    int\n\n     number\n\n    )\n\n    {\n      if\n\n     (number < 0\n\n    )\n      {\n        throw\n\n     new\n\n     ArgumentException(\n          $\"\n\n    {\n\n    nameof\n\n    (number)}\n\n     cannot be less than zero.\"\n\n    );\n      }\n      return\n\n     localFactorial(number);\n      int\n\n    localFactorial\n\n    (\n\n    int\n\n     localNumber\n\n    ) \n\n    // local function\n\n      {\n        if\n\n     (localNumber < 1\n\n    ) return\n\n     1\n\n    ;\n        return\n\n     localNumber * localFactorial(localNumber - 1\n\n    );\n      }\n    } \n\n    ```", "```cs\n    WriteLine($\"5! is \n\n    {Person.Factorial(\n\n    5\n\n    )}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    5! is 120 \n\n    ```", "```cs\n public\n\nint\n\nMethodIWantToCall\n\n(\n\nstring\n\n input\n\n)\n\n{\n  return\n\n input.Length; // it doesn't matter what the method does\n\n} \n\n```", "```cs\n int\n\n answer = p1.MethodIWantToCall(\"Frog\"\n\n); \n\n```", "```cs\n delegate\n\nint\n\nDelegateWithMatchingSignature\n\n(\n\nstring\n\n s\n\n)\n\n; \n\n```", "```cs\n // create a delegate instance that points to the method\n\nDelegateWithMatchingSignature d = new\n\n(p1.MethodIWantToCall);\n// call the delegate, which calls the method\n\nint\n\n answer2 = d(\"Frog\"\n\n); \n\n```", "```cs\n public\n\ndelegate\n\nvoid\n\nEventHandler\n\n(\n\nobject\n\n? sender, EventArgs e\n\n)\n\n;\npublic\n\ndelegate\n\nvoid\n\nEventHandler\n\n<\n\nTEventArgs\n\n>(\n\nobject\n\n? sender, TEventArgs e\n\n)\n\n; \n\n```", "```cs\n     // delegate field\n\n    public\n\n     EventHandler? Shout;\n    // data field\n\n    public\n\n     int\n\n     AngerLevel;\n    // method\n\n    public\n\n    void\n\n    Poke\n\n    ()\n\n    {\n      AngerLevel++;\n      if\n\n     (AngerLevel >= 3\n\n    )\n      {\n        // if something is listening...\n\n        if\n\n     (Shout != null\n\n    )\n        {\n          // ...then call the delegate\n\n          Shout(this\n\n    , EventArgs.Empty);\n        }\n      }\n    } \n\n    ```", "```cs\n    Shout?.Invoke(this\n\n    , EventArgs.Empty); \n\n    ```", "```cs\n     static\n\n    void\n\n    Harry_Shout\n\n    (\n\n    object\n\n    ? sender, EventArgs e\n\n    )\n\n    {\n      if\n\n     (sender is\n\n     null\n\n    ) return\n\n    ;\n      Person p = (Person)sender;\n      WriteLine($\"\n\n    {p.Name}\n\n     is this angry: \n\n    {p.AngerLevel}\n\n    .\"\n\n    );\n    } \n\n    ```", "```cs\n    harry.Shout = Harry_Shout; \n\n    ```", "```cs\n    harry.Shout = Harry_Shout;\n\n    **harry.Poke();**\n\n    **harry.Poke();**\n\n    **harry.Poke();**\n\n    **harry.Poke();** \n\n    ```", "```cs\n    Harry is this angry: 3\\. \n    Harry is this angry: 4. \n\n    ```", "```cs\n     public\n\n    **event**\n\n     EventHandler? Shout; \n\n    ```", "```cs\n    Program.cs(41,13): error CS0079: The event 'Person.Shout' can only appear on the left hand side of += or -= \n\n    ```", "```cs\n    harry.Shout += Harry_Shout; \n\n    ```", "```cs\n     // non-generic lookup collection\n\n    System.Collections.Hashtable lookupObject = new\n\n    ();\n    lookupObject.Add(key: 1\n\n    , value\n\n    : \"Alpha\"\n\n    );\n    lookupObject.Add(key: 2\n\n    , value\n\n    : \"Beta\"\n\n    );\n    lookupObject.Add(key: 3\n\n    , value\n\n    : \"Gamma\"\n\n    );\n    lookupObject.Add(key: harry, value\n\n    : \"Delta\"\n\n    ); \n\n    ```", "```cs\n     int\n\n     key = 2\n\n    ; // lookup the value that has 2 as its key\n\n    WriteLine(format: \"Key {0} has value: {1}\"\n\n    ,\n      arg0: key,\n      arg1: lookupObject[key]); \n\n    ```", "```cs\n     // lookup the value that has harry as its key\n\n    WriteLine(format: \"Key {0} has value: {1}\"\n\n    ,\n      arg0: harry,\n      arg1: lookupObject[harry]); \n\n    ```", "```cs\n    Key 2 has value: Beta\n    Key Packt.Shared.Person has value: Delta \n\n    ```", "```cs\n     // generic lookup collection\n\n    Dictionary<int\n\n    , string\n\n    > lookupIntString = new\n\n    ();\n    lookupIntString.Add(key: 1\n\n    , value\n\n    : \"Alpha\"\n\n    );\n    lookupIntString.Add(key: 2\n\n    , value\n\n    : \"Beta\"\n\n    );\n    lookupIntString.Add(key: 3\n\n    , value\n\n    : \"Gamma\"\n\n    );\n    lookupIntString.Add(key: harry, value\n\n    : \"Delta\"\n\n    ); \n\n    ```", "```cs\n    /Users/markjprice/Code/Chapter06/PeopleApp/Program.cs(98,32): error CS1503: Argument 1: cannot convert from 'Packt.Shared.Person' to 'int' [/Users/markjprice/Code/Chapter06/PeopleApp/PeopleApp.csproj] \n\n    ```", "```cs\n    key = 3\n\n    ;\n    WriteLine(format: \"Key {0} has value: {1}\"\n\n    ,\n      arg0: key,\n      arg1: lookupIntString[key]); \n\n    ```", "```cs\n    Key 3 has value: Gamma \n\n    ```", "```cs\n namespace\n\n System\n\n{\n  public\n\n interface\n\n IComparable\n\n  {\n    int\n\nCompareTo\n\n(\n\nobject\n\n? obj\n\n)\n\n;\n  }\n  public\n\n interface\n\n IComparable\n\n<in\n\n T\n\n>\n  {\n    int\n\nCompareTo\n\n(\n\nT? other\n\n)\n\n;\n  }\n} \n\n```", "```cs\n    Person[] people =\n    {\n      new\n\n    () { Name = \"Simon\"\n\n     },\n      new\n\n    () { Name = \"Jenny\"\n\n     },\n      new\n\n    () { Name = \"Adam\"\n\n     },\n      new\n\n    () { Name = \"Richard\"\n\n     }\n    };\n    WriteLine(\"Initial list of people:\"\n\n    ); \n    foreach\n\n     (Person p in\n\n     people)\n    {\n      WriteLine($\"  \n\n    {p.Name}\n\n    \"\n\n    );\n    }\n    WriteLine(\"Use Person's IComparable implementation to sort:\"\n\n    );\n    Array.Sort(people);\n    foreach\n\n     (Person p in\n\n     people)\n    {\n      WriteLine($\"  \n\n    {p.Name}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Unhandled Exception: System.InvalidOperationException: Failed to compare two elements in the array. ---> System.ArgumentException: At least one object must implement IComparable. \n\n    ```", "```cs\n     public\n\n     class\n\n     Person\n\n     : object\n\n    , IComparable\n\n    <Person\n\n    > \n\n    ```", "```cs\n     public\n\n    int\n\n    CompareTo\n\n    (\n\n    Person? other\n\n    )\n\n    {\n\n    **throw**\n\n    **new**\n\n     **NotImplementedException();**\n\n    } \n\n    ```", "```cs\n     public\n\n    int\n\n    CompareTo\n\n    (\n\n    Person? other\n\n    )\n\n    {\n      if\n\n     (Name is\n\n     null\n\n    ) return\n\n     0\n\n    ;\n\n    **return**\n\n     **Name.CompareTo(other?.Name);** \n\n    } \n\n    ```", "```cs\n    Initial list of people:\n      Simon\n      Jenny\n      Adam\n      Richard\n    Use Person's IComparable implementation to sort:\n      Adam\n      Jenny\n      Richard\n      Simon \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     PersonComparer\n\n     : IComparer\n\n    <Person\n\n    >\n    {\n      public\n\n    int\n\n    Compare\n\n    (\n\n    Person? x, Person? y\n\n    )\n\n      {\n        if\n\n     (x is\n\n     null\n\n     || y is\n\n     null\n\n    )\n        {\n          return\n\n     0\n\n    ;\n        }\n        // Compare the Name lengths...\n\n        int\n\n     result = x.Name.Length.CompareTo(y.Name.Length);\n        // ...if they are equal...\n\n        if\n\n     (result == 0\n\n    )\n        {\n          // ...then compare by the Names...\n\n          return\n\n     x.Name.CompareTo(y.Name);\n        }\n        else\n\n     // result will be -1 or 1\n\n        {\n          // ...otherwise compare by the lengths.\n\n          return\n\n     result; \n        }\n      }\n    } \n\n    ```", "```cs\n    WriteLine(\"Use PersonComparer's IComparer implementation to sort:\"\n\n    ); \n    Array.Sort(people, new\n\n     PersonComparer());\n    foreach\n\n     (Person p in\n\n     people)\n    {\n      WriteLine($\"  \n\n    {p.Name}\n\n    \"\n\n    );\n    } \n\n    ```", "```cs\n    Use PersonComparer's IComparer implementation to sort:\n      Adam\n      Jenny\n      Simon\n      Richard \n\n    ```", "```cs\n public\n\n interface\n\n IGamePlayer\n\n{\n  void\n\nLose\n\n()\n\n;\n}\npublic\n\n interface\n\n IKeyHolder\n\n{\n  void\n\nLose\n\n()\n\n;\n}\npublic\n\n class\n\n Person\n\n : IGamePlayer\n\n, IKeyHolder\n\n{\n  public\n\nvoid\n\nLose\n\n() \n\n// implicit implementation\n\n  {\n    // implement losing a key\n\n  }\n  void\n\n IGamePlayer.Lose() // explicit implementation\n\n  {\n    // implement losing a game\n\n  }\n}\n// calling implicit and explicit implementations of Lose\n\nPerson p = new\n\n();\np.Lose(); // calls implicit implementation of losing a key\n\n((IGamePlayer)p).Lose(); // calls explicit implementation of losing a game\n\nIGamePlayer player = p as\n\n IGamePlayer;\nplayer.Lose(); // calls explicit implementation of losing a game \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     interface\n\n     IPlayable\n\n    {\n      void\n\n    Play\n\n    ()\n\n    ;\n      void\n\n    Pause\n\n    ()\n\n    ;\n    } \n\n    ```", "```cs\n     using\n\n     static\n\n     System.Console;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     DvdPlayer\n\n     : IPlayable\n\n    {\n      public\n\n    void\n\n    Pause\n\n    ()\n\n      {\n        WriteLine(\"DVD player is pausing.\"\n\n    );\n      }\n      public\n\n    void\n\n    Play\n\n    ()\n\n      {\n        WriteLine(\"DVD player is playing.\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     **using**\n\n    **static**\n\n     **System.Console;**\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     interface\n\n     IPlayable\n\n    {\n      void\n\n    Play\n\n    ()\n\n    ;\n      void\n\n    Pause\n\n    ()\n\n    ;\n\n    **void**\n\n    **Stop**\n\n    **()** \n\n    **// default interface implementation**\n\n     **{**\n\n     **WriteLine(**\n\n    **\"Default implementation of Stop.\"**\n\n    **);**\n\n     **}**\n\n    } \n\n    ```", "```cs\n int\n\n number1 = 49\n\n;\nlong\n\n number2 = 12\n\n;\nSystem.Drawing.Point location = new\n\n(x: 4\n\n, y: 5\n\n);\nPerson kevin = new\n\n() { Name = \"Kevin\"\n\n, \n  DateOfBirth = new\n\n(year: 1988\n\n, month: 9\n\n, day: 23\n\n) };\nPerson sally; \n\n```", "```cs\n int\n\n a = 3\n\n;\nint\n\n b = 3\n\n;\nWriteLine($\"a == b: \n\n{(a == b)}\n\n\"\n\n); // true \n\n```", "```cs\nPerson a = new\n\n() { Name = \"Kevin\"\n\n };\nPerson b = new\n\n() { Name = \"Kevin\"\n\n };\nWriteLine($\"a == b: \n\n{(a == b)}\n\n\"\n\n); // false \n\n```", "```cs\nPerson a = new\n\n() { Name = \"Kevin\"\n\n };\nPerson b = a;\nWriteLine($\"a == b: \n\n{(a == b)}\n\n\"\n\n); // true \n\n```", "```cs\n string\n\n a = \"Kevin\"\n\n;\nstring\n\n b = \"Kevin\"\n\n;\nWriteLine($\"a == b: \n\n{(a == b)}\n\n\"\n\n); // true \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     struct\n\n     DisplacementVector\n    {\n      public\n\n     int\n\n     X;\n      public\n\n     int\n\n     Y;\n      public\n\n    DisplacementVector\n\n    (\n\n    int\n\n     initialX, \n\n    int\n\n     initialY\n\n    )\n\n      {\n        X = initialX;\n        Y = initialY;\n      }\n      public\n\n     static\n\n     DisplacementVector operator\n\n     +(\n        DisplacementVector vector1,\n        DisplacementVector vector2)\n      {\n        return\n\n     new\n\n    (\n          vector1.X + vector2.X,\n          vector1.Y + vector2.Y);\n      }\n    } \n\n    ```", "```cs\n    DisplacementVector dv1 = new\n\n    (3\n\n    , 5\n\n    ); \n    DisplacementVector dv2 = new\n\n    (-2\n\n    , 7\n\n    ); \n    DisplacementVector dv3 = dv1 + dv2;\n    WriteLine($\"(\n\n    {dv1.X}\n\n    , \n\n    {dv1.Y}\n\n    ) + (\n\n    {dv2.X}\n\n    , \n\n    {dv2.Y}\n\n    ) = (\n\n    {dv3.X}\n\n    , \n\n    {dv3.Y}\n\n    )\"\n\n    ); \n\n    ```", "```cs\n    (3, 5) + (-2, 7) = (1, 12) \n\n    ```", "```cs\n public\n\nrecord\n\nstruct\n\nDisplacementVector\n\n(\n\nint\n\n X, \n\nint\n\n Y\n\n)\n\n; \n\n```", "```cs\n public\n\nrecord\n\nclass\n\nImmutableAnimal\n\n(\n\nstring\n\n Name\n\n)\n\n; \n\n```", "```cs\n public\n\n class\n\n Animal\n\n{\n  public\n\nAnimal\n\n() \n\n// constructor\n\n  {\n    // allocate any unmanaged resources\n\n  }\n  ~Animal() // Finalizer aka destructor\n\n  {\n    // deallocate any unmanaged resources\n\n  }\n} \n\n```", "```cs\n public\n\n class\n\n Animal\n\n : IDisposable\n\n{\n  public\n\nAnimal\n\n()\n\n  {\n    // allocate unmanaged resource\n\n  }\n  ~Animal() // Finalizer\n\n  {\n    Dispose(false\n\n);\n  }\n  bool\n\n disposed = false\n\n; // have resources been released?\n\n  public\n\nvoid\n\nDispose\n\n()\n\n  {\n    Dispose(true\n\n);\n    // tell garbage collector it does not need to call the finalizer\n\n    GC.SuppressFinalize(this\n\n); \n  }\n  protected\n\nvirtual\n\nvoid\n\nDispose\n\n(\n\nbool\n\n disposing\n\n)\n\n  {\n    if\n\n (disposed) return\n\n;\n    // deallocate the *unmanaged* resource\n\n    // ...\n\n    if\n\n (disposing)\n    {\n      // deallocate any other *managed* resources\n\n      // ...\n\n    }\n    disposed = true\n\n;\n  }\n} \n\n```", "```cs\n using\n\n (Animal a = new\n\n())\n{\n  // code that uses the Animal instance\n\n} \n\n```", "```cs\nAnimal a = new\n\n(); \ntry\n\n{\n  // code that uses the Animal instance\n\n}\nfinally\n\n{\n  if\n\n (a != null\n\n) a.Dispose();\n} \n\n```", "```cs\n     int\n\n     thisCannotBeNull  = 4\n\n    ; \n    thisCannotBeNull = null\n\n    ; // compile error!\n\n    int\n\n    ? thisCouldBeNull = null\n\n    ; \n    WriteLine(thisCouldBeNull); \n    WriteLine(thisCouldBeNull.GetValueOrDefault());\n    thisCouldBeNull = 7\n\n    ; \n    WriteLine(thisCouldBeNull); \n    WriteLine(thisCouldBeNull.GetValueOrDefault()); \n\n    ```", "```cs\n    0\n    7\n    7 \n\n    ```", "```cs\n<PropertyGroup>\n  ...\n  <Nullable>enable</Nullable>\n</PropertyGroup> \n\n```", "```cs\n #nullable disable \n\n```", "```cs\n #nullable enable \n\n```", "```cs\n     class\n\n     Address\n\n    {\n      public\n\n     string\n\n    ? Building; \n      public\n\n     string\n\n     Street; \n      public\n\n     string\n\n     City; \n      public\n\n     string\n\n     Region;\n    } \n\n    ```", "```cs\n     public\n\n     string\n\n     Street = string\n\n    .Empty; \n    public\n\n     string\n\n     City = string\n\n    .Empty; \n    public\n\n     string\n\n     Region = string\n\n    .Empty; \n\n    ```", "```cs\n    Address address = new\n\n    (); \n    address.Building = null\n\n    ; \n    address.Street = null\n\n    ; \n    address.City = \"London\"\n\n    ; \n    address.Region = null\n\n    ; \n\n    ```", "```cs\n // check that the variable is not null before using it\n\nif\n\n (thisCouldBeNull != null\n\n)\n{\n  // access a member of thisCouldBeNull\n\n  int\n\n length = thisCouldBeNull.Length; // could throw exception\n\n  ...\n} \n\n```", "```cs\n if\n\n (!(thisCouldBeNull is\n\n null\n\n))\n{ \n\n```", "```cs\n if\n\n (thisCouldBeNull is\n\n not\n\n null\n\n)\n{ \n\n```", "```cs\n string\n\n authorName = null\n\n;\n// the following throws a NullReferenceException\n\nint\n\n x = authorName.Length;\n// instead of throwing an exception, null is assigned to y\n\nint\n\n? y = authorName?.Length; \n\n```", "```cs\n // result will be 3 if authorName?.Length is null \n\nint\n\n result = authorName?.Length ?? 3\n\n; \nConsole.WriteLine(result); \n\n```", "```cs\n public\n\nvoid\n\nHire\n\n(\n\nPerson manager, Person employee\n\n)\n\n{\n  if\n\n (manager == null\n\n)\n  {\n    throw\n\n new\n\n ArgumentNullException(nameof\n\n(manager));\n  }\n  if\n\n (employee == null\n\n)\n  {\n    throw\n\n new\n\n ArgumentNullException(nameof\n\n(employee));\n  }\n  ...\n} \n\n```", "```cs\n public\n\nvoid\n\nHire\n\n(\n\nPerson manager!!, Person employee!!\n\n)\n\n{\n  ...\n} \n\n```", "```cs\n     using\n\n     System;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Employee\n\n     : Person\n\n    {\n    } \n\n    ```", "```cs\n    Employee john = new\n\n    ()\n    {\n      Name = \"John Jones\"\n\n    ,\n      DateOfBirth = new\n\n    (year: 1990\n\n    , month: 7\n\n    , day: 28\n\n    )\n    };\n    john.WriteToConsole(); \n\n    ```", "```cs\n    John Jones was born on a Saturday. \n\n    ```", "```cs\n     public\n\n     string\n\n    ? EmployeeCode { get\n\n    ; set\n\n    ; } \n    public\n\n     DateTime HireDate { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    john.EmployeeCode = \"JJ001\"\n\n    ;\n    john.HireDate = new\n\n    (year: 2014\n\n    , month: 11\n\n    , day: 23\n\n    ); \n    WriteLine($\"\n\n    {john.Name}\n\n     was hired on \n\n    {john.HireDate:dd/MM/yy}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    John Jones was hired on 23/11/14 \n\n    ```", "```cs\n     **using**\n\n    **static**\n\n     **System.Console;** \n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Employee\n\n     : Person\n\n    {\n      public\n\n     string\n\n    ? EmployeeCode { get\n\n    ; set\n\n    ; }\n      public\n\n     DateTime HireDate { get\n\n    ; set\n\n    ; }\n\n    **public**\n\n    **void**\n\n    **WriteToConsole**\n\n    **()**\n\n     **{**\n\n     **WriteLine(format:**\n\n    **\"{0} was born on {1:dd/MM/yy} and hired on {2:dd/MM/yy}\"**\n\n    **,**\n\n     **arg0: Name,**\n\n     **arg1: DateOfBirth,**\n\n     **arg2: HireDate);**\n\n     **}**\n\n    } \n\n    ```", "```cs\n    John Jones was born on 28/07/90 and hired on 01/01/01 \n    John Jones was hired on 23/11/14 \n\n    ```", "```cs\n public\n\n**new**\n\nvoid\n\nWriteToConsole\n\n() \n\n```", "```cs\n    WriteLine(john.ToString()); \n\n    ```", "```cs\n    Packt.Shared.Employee \n\n    ```", "```cs\n     // overridden methods\n\n    public\n\n    override\n\n    string\n\n    ToString\n\n    ()\n\n    {\n      return\n\n     $\"\n\n    {Name}\n\n     is a \n\n    {\n\n    base\n\n    .ToString()}\n\n    \"\n\n    ;\n    } \n\n    ```", "```cs\n     John Jones is a Packt.Shared.Employee \n\n    ```", "```cs\n public\n\n interface\n\n INoImplementation\n\n // C# 1.0 and later\n\n{\n  void\n\nAlpha\n\n()\n\n; // must be implemented by derived type\n\n}\npublic\n\n interface\n\n ISomeImplementation\n\n // C# 8.0 and later\n\n{\n  void\n\nAlpha\n\n()\n\n; // must be implemented by derived type\n\n  void\n\nBeta\n\n()\n\n  {\n    // default implementation; can be overridden\n\n  }\n}\npublic\n\n abstract\n\n class\n\n PartiallyImplemented\n\n // C# 1.0 and later\n\n{\n  public\n\nabstract\n\nvoid\n\nGamma\n\n()\n\n; // must be implemented by derived type\n\n  public\n\nvirtual\n\nvoid\n\nDelta\n\n() \n\n// can be overridden\n\n  {\n    // implementation\n\n  }\n}\npublic\n\n class\n\n FullyImplemented\n\n : PartiallyImplemented\n\n, ISomeImplementation\n\n{\n  public\n\nvoid\n\nAlpha\n\n()\n\n  {\n    // implementation\n\n  }\n  public\n\noverride\n\nvoid\n\nGamma\n\n()\n\n  {\n    // implementation\n\n  }\n}\n// you can only instantiate the fully implemented class\n\nFullyImplemented a = new\n\n();\n// all the other types give compile errors\n\nPartiallyImplemented b = new\n\n(); // compile error!\n\nISomeImplementation c = new\n\n(); // compile error!\n\nINoImplementation d = new\n\n(); // compile error! \n\n```", "```cs\n public\n\n sealed\n\n class\n\n ScroogeMcDuck\n\n{\n} \n\n```", "```cs\n using\n\n static\n\n System.Console;\nnamespace\n\n Packt.Shared\n\n;\npublic\n\n class\n\n Singer\n\n{\n  // virtual allows this method to be overridden\n\n  public\n\nvirtual\n\nvoid\n\nSing\n\n()\n\n  {\n    WriteLine(\"Singing...\"\n\n);\n  }\n}\npublic\n\n class\n\n LadyGaga\n\n : Singer\n\n{\n  // sealed prevents overriding the method in subclasses\n\n  public\n\nsealed\n\noverride\n\nvoid\n\nSing\n\n()\n\n  {\n    WriteLine(\"Singing with style...\"\n\n);\n  }\n} \n\n```", "```cs\n     public\n\n    override\n\n    string\n\n    ToString\n\n    ()\n\n    {\n      return\n\n     $\"\n\n    {Name}\n\n    's code is \n\n    {EmployeeCode}\n\n    \"\n\n    ;\n    } \n\n    ```", "```cs\n    Employee aliceInEmployee = new\n\n    ()\n      { Name = \"Alice\"\n\n    , EmployeeCode = \"AA123\"\n\n     };\n    Person aliceInPerson = aliceInEmployee; \n    aliceInEmployee.WriteToConsole(); \n    aliceInPerson.WriteToConsole(); \n    WriteLine(aliceInEmployee.ToString()); \n    WriteLine(aliceInPerson.ToString()); \n\n    ```", "```cs\n    Alice was born on 01/01/01 and hired on 01/01/01 \n    Alice was born on a Monday\n    Alice's code is AA123 \n    Alice's code is AA123 \n\n    ```", "```cs\n    Employee explicitAlice = aliceInPerson; \n\n    ```", "```cs\n    Employee explicitAlice = (Employee)aliceInPerson; \n\n    ```", "```cs\n     **if**\n\n     **(aliceInPerson** \n\n    **is**\n\n     **Employee)**\n\n    **{**\n\n     **WriteLine(**\n\n    **$\"**\n\n    **{**\n\n    **nameof**\n\n    **(aliceInPerson)}**\n\n     **IS an Employee\"**\n\n    **);** \n\n      Employee explicitAlice = (Employee)aliceInPerson;\n\n    **// safely do something with explicitAlice**\n\n    **}** \n\n    ```", "```cs\n    aliceInPerson IS an Employee \n\n    ```", "```cs\n     if\n\n     (aliceInPerson is\n\n     Employee explicitAlice)  \n    {\n      WriteLine($\"\n\n    {\n\n    nameof\n\n    (aliceInPerson)}\n\n     IS an Employee\"\n\n    ); \n      // safely do something with explicitAlice\n\n    } \n\n    ```", "```cs\n    Employee? aliceAsEmployee = aliceInPerson as\n\n     Employee; // could be null\n\n    if\n\n     (aliceAsEmployee != null\n\n    )\n    {\n      WriteLine($\"\n\n    {\n\n    nameof\n\n    (aliceInPerson)}\n\n     AS an Employee\"\n\n    );\n      // safely do something with aliceAsEmployee\n\n    } \n\n    ```", "```cs\n    aliceInPerson AS an Employee \n\n    ```", "```cs\n if\n\n (!(aliceInPerson is\n\n Employee)) \n\n```", "```cs\n if\n\n (aliceInPerson is\n\n not\n\n Employee) \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     PersonException\n\n     : Exception\n\n    {\n      public\n\n    PersonException\n\n    () : \n\n    base\n\n    ()\n\n     { }\n      public\n\n    PersonException\n\n    (\n\n    string\n\n     message\n\n    ) : \n\n    base\n\n    (\n\n    message\n\n    )\n\n     { }\n      public\n\n    PersonException\n\n    (\n\n    string\n\n     message, Exception innerException\n\n    )\n\n        : \n\n    base\n\n    (\n\n    message, innerException\n\n    )\n\n     { }\n    } \n\n    ```", "```cs\n     public\n\n    void\n\n    TimeTravel\n\n    (\n\n    DateTime \n\n    when\n\n    )\n\n    {\n      if\n\n     (when\n\n     <= DateOfBirth)\n      {\n        throw\n\n     new\n\n     PersonException(\"If you travel back in time to a date earlier than your own birth, then the universe will explode!\"\n\n    );\n      }\n      else\n\n      {\n        WriteLine($\"Welcome to \n\n    {\n\n    when\n\n    :yyyy}\n\n    !\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     try\n\n    {\n      john.TimeTravel(when\n\n    : new\n\n    (1999\n\n    , 12\n\n    , 31\n\n    ));\n      john.TimeTravel(when\n\n    : new\n\n    (1950\n\n    , 12\n\n    , 25\n\n    ));\n    }\n    catch (PersonException ex)\n    {\n      WriteLine(ex.Message);\n    } \n\n    ```", "```cs\n    Welcome to 1999!\n    If you travel back in time to a date earlier than your own birth, then the universe will explode! \n\n    ```", "```cs\n     using\n\n     System.Text.RegularExpressions;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     StringExtensions\n\n    {\n      public\n\n    static\n\n    bool\n\n    IsValidEmail\n\n    (\n\n    string\n\n     input\n\n    )\n\n      {\n        // use simple regular expression to check\n\n        // that the input string is a valid email\n\n        return\n\n     Regex.IsMatch(input,\n          @\"[a-zA-Z0-9\\.-_]+@[a-zA-Z0-9\\.-_]+\"\n\n    );\n      }\n    } \n\n    ```", "```cs\n     string\n\n     email1 = \"pamela@test.com\"\n\n    ; \n    string\n\n     email2 = \"ian&test.com\"\n\n    ;\n    WriteLine(\"{0} is a valid e-mail address: {1}\"\n\n    , \n      arg0: email1,\n      arg1: StringExtensions.IsValidEmail(email1));\n    WriteLine(\"{0} is a valid e-mail address: {1}\"\n\n    ,\n      arg0: email2,\n      arg1: StringExtensions.IsValidEmail(email2)); \n\n    ```", "```cs\n    pamela@test.com is a valid e-mail address: True \n    ian&test.com is a valid e-mail address: False \n\n    ```", "```cs\n     public\n\n    **static**\n\n     class\n\n     StringExtensions\n\n    {\n      public\n\n    static\n\n    bool\n\n    IsValidEmail\n\n    (\n\n    **this**\n\n    string\n\n     input\n\n    )\n\n      { \n\n    ```", "```cs\n    WriteLine(\"{0} is a valid e-mail address: {1}\"\n\n    ,\n      arg0: email1,\n      arg1: email1.IsValidEmail());\n    WriteLine(\"{0} is a valid e-mail address: {1}\"\n\n    , \n      arg0: email2,\n      arg1: email2.IsValidEmail()); \n\n    ```", "```cs\n    {\n      \"$schema\"\n\n    : \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\"\n\n    ,\n      \"settings\"\n\n    : {\n      }\n    } \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n      </PropertyGroup>\n\n     **<ItemGroup>**\n\n     **<None Remove=**\n\n    **\"stylecop.json\"**\n\n     **/>**\n\n     **</ItemGroup>**\n\n     **<ItemGroup>**\n\n     **<AdditionalFiles Include=**\n\n    **\"stylecop.json\"**\n\n     **/>**\n\n     **</ItemGroup>**\n\n      <ItemGroup>\n        <PackageReference Include=\"StyleCop.Analyzers\"\n\n     Version=\"1.2.0-*\"\n\n    >\n          <PrivateAssets>all</PrivateAssets>\n          <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\n        </PackageReference>\n      </ItemGroup>\n    </Project> \n\n    ```", "```cs\n    C:\\Code\\Chapter06\\CodeAnalyzing\\Program.cs(1,1): warning SA1200: Using directive should appear within a namespace declaration [C:\\Code\\Chapter06\\CodeAnalyzing\\CodeAnalyzing.csproj] \n\n    ```", "```cs\n[assembly:SuppressMessage(\n\n\"StyleCop.CSharp.OrderingRules\"\n\n, \n\n\"SA1200:UsingDirectivesMustBePlacedWithinNamespace\"\n\n, Justification = \n\n\"Reviewed.\"\n\n)\n\n] \n\n```", "```cs\n #\n\npragma\n\nwarning\n\n disable SA1200 // UsingDirectivesMustBePlacedWithinNamespace\n\nusing\n\n System;\n#\n\npragma\n\nwarning\n\n restore SA1200 // UsingDirectivesMustBePlacedWithinNamespace \n\n```", "```cs\n    {\n      \"$schema\"\n\n    : \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\"\n\n    ,\n      \"settings\"\n\n    : {\n        \"orderingRules\"\n\n    : {\n          \"usingDirectivesPlacement\"\n\n    : \"outsideNamespace\"\n\n        }\n      }\n    } \n\n    ```", "```cs\n     \"orderingRules\"\n\n    : {\n      \"usingDirectivesPlacement\"\n\n    : \"preserve\"\n\n    } \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n\n     **<GenerateDocumentationFile>**\n\n    **true**\n\n    **</GenerateDocumentationFile>**\n\n      </PropertyGroup> \n\n    ```", "```cs\n    {\n      \"$schema\"\n\n    : \"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json\"\n\n    ,\n      \"settings\"\n\n    : {\n        \"orderingRules\"\n\n    : {\n          \"usingDirectivesPlacement\"\n\n    : \"preserve\"\n\n        },\n\n    **\"documentationRules\"**\n\n    **: {**\n\n    **\"companyName\"**\n\n    **:** \n\n    **\"Packt\"**\n\n    **,**\n\n    **\"copyrightText\"**\n\n    **:** \n\n    **\"Copyright (c) Packt. All rights reserved.\"**\n\n     **}**\n\n      }\n    } \n\n    ```", "```cs\n     // <copyright file=\"Program.cs\" company=\"Packt\">\n\n    // Copyright (c) Packt. All rights reserved.\n\n    // </copyright>\n\n    namespace\n\n     CodeAnalyzing\n\n    {\n      using\n\n     System;\n      ///\n\n    <summary>\n\n      ///\n\n     The main class for this console app.\n\n      ///\n\n    </summary>\n\n      public\n\n     class\n\n     Program\n\n      {\n        ///\n\n    <summary>\n\n        ///\n\n     The main entry point for this console app.\n\n        ///\n\n    </summary>\n\n        ///\n\n    <param name=\"args\">\n\n    A string array of arguments passed to the console app.\n\n    </param>\n\n        public\n\n    static\n\n    void\n\n    Main\n\n    (\n\n    string\n\n    [] args\n\n    )\n\n        {\n          Console.WriteLine(\"Hello World!\"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n     <?xml version=\"1.0\"?>\n\n    <\n\n    doc\n\n    >\n\n        <\n\n    assembly\n\n    >\n\n            <\n\n    name\n\n    >\n\n    CodeAnalyzing</\n\n    name\n\n    >\n\n        </\n\n    assembly\n\n    >\n\n        <\n\n    members\n\n    >\n\n            <\n\n    member\n\n    name\n\n    =\n\n    \"T:CodeAnalyzing.Program\"\n\n    >\n\n                <\n\n    summary\n\n    >\n\n                The main class for this console app.\n                </\n\n    summary\n\n    >\n\n            </\n\n    member\n\n    >\n\n            <\n\n    member\n\n    name\n\n    =\n\n    \"M:CodeAnalyzing.Program.Main(System.String[])\"\n\n    >\n\n                <\n\n    summary\n\n    >\n\n                The main entry point for this console app.\n                </\n\n    summary\n\n    >\n\n                <\n\n    param\n\n    name\n\n    =\n\n    \"args\"\n\n    >\n\n    A string array of arguments passed to the console app.</\n\n    param\n\n    >\n\n            </\n\n    member\n\n    >\n\n        </\n\n    members\n\n    >\n\n    </\n\n    doc\n\n    > \n\n    ```", "```cs\n    Rectangle r = new\n\n    (height: 3\n\n    , width: 4.5\n\n    );\n    WriteLine($\"Rectangle H: \n\n    {r.Height}\n\n    , W: \n\n    {r.Width}\n\n    , Area: \n\n    {r.Area}\n\n    \"\n\n    ); \n    Square s = new\n\n    (5\n\n    );\n    WriteLine($\"Square H: \n\n    {s.Height}\n\n    , W: \n\n    {s.Width}\n\n    , Area: \n\n    {s.Area}\n\n    \"\n\n    ); \n    Circle c = new\n\n    (radius: 2.5\n\n    );\n    WriteLine($\"Circle H: \n\n    {c.Height}\n\n    , W: \n\n    {c.Width}\n\n    , Area: \n\n    {c.Area}\n\n    \"\n\n    ); \n\n    ```", "```cs\n    Rectangle H: 3, W: 4.5, Area: 13.5\n    Square H: 5, W: 5, Area: 25\n    Circle H: 5, W: 5, Area: 19.6349540849362 \n\n    ```"]