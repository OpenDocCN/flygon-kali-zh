["```kt\n    apply plugin: \"com.android.application\" \n    apply plugin: \"kotlin-android\" \n    apply plugin: \"kotlin-android-extensions\" \n\n    repositories { \n      maven { url \"https://maven.google.com\" } \n    } \n\n    android { \n      ... \n      sourceSets { \n        main.java.srcDirs += [ \n                'src/main/kotlin', \n                'src/common/kotlin', \n                'src/debug/kotlin', \n                'src/release/kotlin', \n                'src/staging/kotlin', \n                'src/preproduction/kotlin', \n                'src/debug/java', \n                'src/release/java', \n                'src/staging/java', \n                'src/preproduction/java', \n                'src/testDebug/java', \n                'src/testDebug/kotlin', \n                'src/androidTestDebug/java', \n                'src/androidTestDebug/kotlin' \n        ] \n      } \n      ... \n      testOptions { \n        unitTests.returnDefaultValues = true \n      } \n    } \n    ... \n    dependencies { \n      ... \n      compile \"junit:junit:4.12\" \n      testCompile \"junit:junit:4.12\" \n\n      testCompile \"org.jetbrains.kotlin:kotlin-reflect:1.1.51\" \n      testCompile \"org.jetbrains.kotlin:kotlin-stdlib:1.1.51\" \n\n      compile \"org.jetbrains.kotlin:kotlin-test:1.1.51\" \n      testCompile \"org.jetbrains.kotlin:kotlin-test:1.1.51\" \n\n      compile \"org.jetbrains.kotlin:kotlin-test-junit:1.1.51\" \n      testCompile \"org.jetbrains.kotlin:kotlin-test-junit:1.1.51\" \n\n      compile 'com.android.support:support-annotations:26.0.1' \n      androidTestCompile 'com.android.support:support\n     -annotations:26.0.1' \n\n      compile 'com.android.support.test:runner:0.5' \n      androidTestCompile 'com.android.support.test:runner:0.5' \n\n      compile 'com.android.support.test:rules:0.5' \n      androidTestCompile 'com.android.support.test:rules:0.5' \n     } \n\n    It is important to highlight use of: \n    testOptions { \n        unitTests.returnDefaultValues = true \n    } \n```", "```kt\n    package com.journaler \n\n    import android.location.Location \n    import com.journaler.database.Content \n    import com.journaler.model.Note \n    import org.junit.Test \n\n    class NoteTest { \n\n      @Test \n      fun noteTest() { \n        val note = Note( \n                \"stub ${System.currentTimeMillis()}\", \n                \"stub ${System.currentTimeMillis()}\", \n                Location(\"Stub\") \n        ) \n\n        val id = Content.NOTE.insert(note) \n        note.id = id \n\n        assert(note.id > 0) \n     } \n    } \n```", "```kt\n    package com.journaler \n\n    import android.content.ComponentName \n    import android.content.Context \n    import android.content.Intent \n    import android.content.ServiceConnection \n    import android.os.IBinder \n    import android.support.test.InstrumentationRegistry \n    import android.util.Log \n    import com.journaler.service.MainService \n    import org.junit.After \n    import org.junit.Before \n    import org.junit.Test \n    import kotlin.test.assertNotNull \n\n    class MainServiceTest { \n\n      private var ctx: Context? = null \n      private val tag = \"Main service test\" \n\n      private val serviceConnection = object : ServiceConnection { \n        override fun onServiceConnected(p0: ComponentName?, binder:\n        IBinder?) { \n          Log.v(tag, \"Service connected\") \n        } \n\n        override fun onServiceDisconnected(p0: ComponentName?) { \n          Log.v(tag, \"Service disconnected\") \n        } \n     } \n\n     @Before \n     fun beforeMainServiceTest() { \n        Log.v(tag, \"Starting\") \n        ctx = InstrumentationRegistry.getInstrumentation().context \n     } \n\n     @Test \n     fun testMainService() { \n        Log.v(tag, \"Running\") \n        assertNotNull(ctx) \n        val serviceIntent = Intent(ctx, MainService::class.java) \n        ctx?.startService(serviceIntent) \n        val result = ctx?.bindService( \n           serviceIntent, \n           serviceConnection, \n           android.content.Context.BIND_AUTO_CREATE \n        ) \n        assert(result != null && result) \n     } \n\n     @After \n     fun afterMainServiceTest() { \n       Log.v(tag, \"Finishing\") \n       ctx?.unbindService(serviceConnection) \n       val serviceIntent = Intent(ctx, MainService::class.java) \n       ctx?.stopService(serviceIntent) \n    } \n\n   } \n```", "```kt\n    package com.journaler \n\n    import org.junit.runner.RunWith \n    import org.junit.runners.Suite \n\n    @RunWith(Suite::class) \n    @Suite.SuiteClasses( \n        DummyTest::class, \n        MainServiceTest::class \n    ) \n    class MainSuite  \n```", "```kt\n    ... \n    compile 'com.android.support.test.espresso:espresso-core:2.2.2' \n    androidTestCompile 'com.android.support.test.espresso:espresso-\n    core:2.2.2' \n    ... \n```", "```kt\n    @RunWith(AndroidJUnit4::class) \n    class MainScreenTest { \n       @Rule \n       val mainActivityRule =   \n       ActivityTestRule(MainActivity::class.java) \n\n       @Test \n       fun testMainActivity(){ \n        onView((withId(R.id.toolbar))).perform(click()) \n        onView(withText(\"My dialog\")).check(matches(isDisplayed())) \n      } \n\n   } \n```", "```kt\n$ ./gtradlew test\n```", "```kt\n$ ./gradlew testCompleteDebug \n```", "```kt\n$ ./gradlew connectedAndroidTest \n```", "```kt\n$ ./gradlew connectedCompleteDebugAndroidTest \n```"]