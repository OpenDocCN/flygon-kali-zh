["```cs\npublic void DoSomething()\n{\nfor (var i = 0; i < 1000; i++)\n{\nvar productCode = $\"PRC000{i}\";\n//...implementation\n}\n}\n```", "```cs\npublic int _value; // This is used for storing integer values.\n```", "```cs\n...\nint value = GetDataValue(); // This sometimes causes a divide by zero error. Don't know why!\n...\n```", "```cs\n/* No longer used as has been replaced by DoSomethinElse().\npublic void DoSomething()\n{\n    // ...implementation...\n}\n*/\n```", "```cs\nnamespace MyProject.TextFileMonitor\n{\n    + public class Program { ... }\n    + public class DateTime { ... }\n    + public class FileMonitorService { ... }\n    + public class Cryptography { ... }\n}\n```", "```cs\npublic class DbAndFileManager\n{\n #region Database Operations\n\n public void OpenDatabaseConnection() { throw new \n  NotImplementedException(); }\n public void CloseDatabaseConnection() { throw new \n  NotImplementedException(); }\n public int ExecuteSql(string sql) { throw new \n  NotImplementedException(); }\n public SqlDataReader SelectSql(string sql) { throw new \n  NotImplementedException(); }\n public int UpdateSql(string sql) { throw new \n  NotImplementedException(); }\n public int DeleteSql(string sql) { throw new \n  NotImplementedException(); }\n public int InsertSql(string sql) { throw new \n  NotImplementedException(); }\n\n #endregion\n\n #region File Operations\n\n public string ReadText(string filename) { throw new \n  NotImplementedException(); }\n public void WriteText(string filename, string text) { throw new \n  NotImplementedException(); }\n public byte[] ReadFile(string filename) { throw new \n  NotImplementedException(); }\n public void WriteFile(string filename, byte[] binaryData) { throw new \n  NotImplementedException(); }\n\n #endregion\n}\n```", "```cs\nusing System;\nusing System.Data.SqlClient;\n\nnamespace CH01_CodingStandardsAndPrinciples.GoodCode.Data\n{\n    public class DatabaseManager\n    {\n        #region Database Operations\n\n        public void OpenDatabaseConnection() { throw new \n         NotImplementedException(); }\n        public void CloseDatabaseConnection() { throw new \n         NotImplementedException(); }\n        public int ExecuteSql(string sql) { throw new \n         NotImplementedException(); }\n        public SqlDataReader SelectSql(string sql) { throw new \n         NotImplementedException(); }\n        public int UpdateSql(string sql) { throw new \n         NotImplementedException(); }\n        public int DeleteSql(string sql) { throw new \n         NotImplementedException(); }\n        public int InsertSql(string sql) { throw new \n         NotImplementedException(); }\n\n        #endregion\n    }\n}\n```", "```cs\nusing System;\n\nnamespace CH01_CodingStandardsAndPrinciples.GoodCode.FileSystem\n{\n    public class FileManager\n    {\n         #region File Operations\n\n         public string ReadText(string filename) { throw new \n          NotImplementedException(); }\n         public void WriteText(string filename, string text) { throw new \n          NotImplementedException(); }\n         public byte[] ReadFile(string filename) { throw new \n          NotImplementedException(); }\n         public void WriteFile(string filename, byte[] binaryData) { throw \n          new NotImplementedException(); }\n\n         #endregion\n    }\n}\n```", "```cs\npublic string security(string plainText)\n{\n    try\n    {\n        byte[] encrypted;\n        using (AesManaged aes = new AesManaged())\n        {\n            ICryptoTransform encryptor = aes.CreateEncryptor(Key, IV);\n            using (MemoryStream ms = new MemoryStream())\n                using (CryptoStream cs = new CryptoStream(ms, encryptor, \n                 CryptoStreamMode.Write))\n                {\n                    using (StreamWriter sw = new StreamWriter(cs))\n                        sw.Write(plainText);\n                    encrypted = ms.ToArray();\n                }\n        }\n        Console.WriteLine($\"Encrypted data: \n         {System.Text.Encoding.UTF8.GetString(encrypted)}\");\n        using (AesManaged aesm = new AesManaged())\n        {\n            ICryptoTransform decryptor = aesm.CreateDecryptor(Key, IV);\n            using (MemoryStream ms = new MemoryStream(encrypted))\n            {\n                using (CryptoStream cs = new CryptoStream(ms, decryptor, \n                 CryptoStreamMode.Read))\n                {\n                    using (StreamReader reader = new StreamReader(cs))\n                        plainText = reader.ReadToEnd();\n                }\n            }\n        }\n        Console.WriteLine($\"Decrypted data: {plainText}\");\n    }\n    catch (Exception exp)\n    {\n        Console.WriteLine(exp.Message);\n    }\n    Console.ReadKey();\n    return plainText;\n}\n```", "```cs\npublic void BreFlowControlExample(BusinessRuleException bre)\n{\n    switch (bre.Message)\n    {\n        case \"OutOfAcceptableRange\":\n            DoOutOfAcceptableRangeWork();\n            break;\n        default:\n            DoInAcceptableRangeWork();\n            break;\n    }\n}\n```", "```cs\npublic void BetterFlowControlExample(bool isInAcceptableRange)\n{\n    if (isInAcceptableRange)\n        DoInAcceptableRangeWork();\n    else\n        DoOutOfAcceptableRangeWork();\n}\n```", "```cs\npublic class Database\n{\n    private SqlServerConnection _databaseConnection;\n\n    public Database(SqlServerConnection databaseConnection)\n    {\n        _databaseConnection = databaseConnection;\n    }\n}\n```", "```cs\npublic class MyClass \n{\n    public void MyMethod()\n    {\n        // ...implementation...\n    }\n\n    public DateTime AddDates(DateTime date1, DateTime date2)\n    {\n        //...implementation...\n    }\n\n    public Product GetData(int id)\n    {\n        //...implementation...\n    }\n}\n```", "```cs\npublic class Product\n{\n    public int Id;\n    public int Name;\n    public int Description;\n    public string ProductCode;\n    public decimal Price;\n    public long UnitsInStock\n}\n```", "```cs\npublic void DoSomething()\n{\n    for (var i = 0; i < 1000; i++)\n    {\n        var productCode = $\"PRC000{i}\";\n        //...implementation\n    }\n}\n```", "```cs\n/// <summary>\n/// Create a new <see cref=\"KustoCode\"/> instance from the text and globals. Does not perform \n/// semantic analysis.\n/// </summary>\n/// <param name=\"text\">The code text</param>\n/// <param name=\"globals\">\n///   The globals to use for parsing and semantic analysis. Defaults to <see cref=\"GlobalState.Default\"/>\n/// </param>.\n public static KustoCode Parse(string text, GlobalState globals = null) { ... }\n```", "```cs\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace CompanyName.ProductName.RegEx\n{\n  /// <summary>\n  /// An extension class for providing regular expression extensions \n  /// methods.\n  /// </summary>\n  public static class RegularExpressions\n  {\n    private static string _preprocessed;\n\n    public static string RegularExpression { get; set; }\n\n    public static bool IsValidEmail(this string email)\n    {\n      // Email address: RFC 2822 Format. \n      // Matches a normal email address. Does not check the \n      // top-level domain.\n      // Requires the \"case insensitive\" option to be ON.\n      var exp = @\"\\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.\n       [a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]\n*       [a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\\Z\";\n      bool isEmail = Regex.IsMatch(email, exp, RegexOptions.IgnoreCase);\n      return isEmail;\n    }\n\n    // ... rest of the implementation ...\n\n  }\n}\n\n```", "```cs\npublic class Database\n{\n    private IDatabaseConnection _databaseConnection;\n\n    public Database(IDatabaseConnection databaseConnection)\n    {\n        _databaseConnection = datbaseConnection;\n    }\n}\n```", "```cs\nusing (var unitOfWork = new UnitOfWork())\n{\n // Perform unit of work here.\n}\n// At this point the unit of work object has been disposed of.\n```"]