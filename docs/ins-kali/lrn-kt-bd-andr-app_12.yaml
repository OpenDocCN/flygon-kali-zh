- en: Setting Reminders for Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为任务设置提醒
- en: With many real-world apps, there is the need to remind the user at some point
    to, say, take some action or give out some information. For example, a fitness
    app may alert the user to begin some workout sessions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多现实世界的应用程序中，有必要在某个时候提醒用户，比如说，采取一些行动或提供一些信息。例如，健身应用程序可能会提醒用户开始一些锻炼课程。
- en: Here, you will build on the ToDoList app from the previous chapter by setting
    a reminder for a task, then pop up a notification when the reminder is due. You
    will learn a lot as we implement these features, using classes such as `IntentService`,
    `BroadcastReceiver`, and  `Notification`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将通过为任务设置提醒，然后在提醒到期时弹出通知，来构建上一章中的ToDoList应用程序。在实现这些功能时，您将学到很多，使用诸如`IntentService`、`BroadcastReceiver`和`Notification`等类。
- en: In this chapter, you are going to create a feature that allows the user to set
    reminders for tasks.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建一个允许用户为任务设置提醒的功能。
- en: 'By the end of this chapter, you will have learned the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学到以下内容：
- en: To create and display notifications for the reminders set
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为设置的提醒创建和显示通知
- en: An introduction to push notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送通知简介
- en: How to use cloud services, such as Firebase and Amazon SNS, to send push notifications,
    and
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用云服务（如Firebase和Amazon SNS）发送推送通知，以及
- en: How to set up your app to receive and display push notifications to the user
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置您的应用程序以接收和显示推送通知给用户
- en: 'All in all, the topics covered in this chapter include:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本章涵盖的主题包括：
- en: Services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务
- en: Broadcast receivers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播接收器
- en: In-app notifications
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用内通知
- en: Push notifications
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送通知
- en: AlarmManager
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AlarmManager
- en: 'Reminders in android can best be implemented by using the `AlarmManager`. Why?
    See what the official documentation has to say about it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的提醒最好通过使用`AlarmManager`来实现。为什么？看看官方文档对此的解释：
- en: '*These allow you to schedule your application to be run at some point in the
    future.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些允许您安排应用程序在将来的某个时间运行。*'
- en: 'Additionally:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另外：
- en: '*The Alarm Manager is intended for cases where you want to have your application
    code run at a specific time, even if your application is not currently running.
    For normal timing operations (ticks, timeouts, and so on) it is easier and much
    more efficient to use Handler.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*闹钟管理器适用于您希望在特定时间运行应用程序代码的情况，即使您的应用程序当前未运行。对于正常的定时操作（滴答声、超时等），使用Handler更容易、更有效率。*'
- en: This means you have come to the right place if you want to implement such a
    feature as a reminder. The alternative class to handle such a task, `Handler`,
    is best suited for tasks that are expected to be completed while the app is still
    in use. Your app will definitely have reminders spanning days, and probably weeks
    or months, so it is best to use the `AlarmManager` class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果您想要实现提醒这样的功能，您来对地方了。用于处理这种任务的替代类`Handler`最适合在应用程序仍在使用时完成的任务。您的应用程序肯定会有跨天的提醒，可能会持续几周甚至几个月，因此最好使用`AlarmManager`类。
- en: This is how it will work, your app will start a background service to kick off
    the timer for the reminder, then send a broadcast to the app when it's due. Move
    on to see how to implement this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是这样的，您的应用程序将启动一个后台服务来启动提醒的计时器，然后在到期时向应用程序发送广播。继续看如何实现这一点。
- en: Creating the alarm
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建闹钟
- en: 'Basically, there are four types of alarms:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，有四种类型的闹钟：
- en: '**Elapsed Realtime:** This fires the pending intent based on the amount of
    time since the device was booted, but doesn''t wake up the device. The elapsed
    time includes any time during which the device was asleep.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经过的实时：**这会根据设备启动以来经过的时间触发挂起的意图，但不会唤醒设备。经过的时间包括设备休眠期间的任何时间。'
- en: '**Elapsed Realtime Wakeup:** This wakes up the device and fires the pending
    intent after the specified length of time has elapsed since device boot.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**经过的实时唤醒：**这会唤醒设备，并在自设备启动以来经过的指定时间后触发挂起的意图。'
- en: '**RTC:** This fires the pending intent at the specified time, but does not
    wake up the device.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RTC：**这在指定时间触发挂起的意图，但不会唤醒设备。'
- en: '**RTC Wakeup:** This wakes up the device to fire the pending intent at the
    specified time.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RTC唤醒：**这会唤醒设备，以便在指定时间触发挂起的意图。'
- en: You are going to use RTC Wakeup alarm type to wake up the device to fire the
    alarm at the precise time the user sets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用RTC唤醒闹钟类型来唤醒设备，在用户设置的精确时间触发闹钟。
- en: 'First, create a dialog for the user to select the time the alarm should go
    off. Create a new class called `TimePickerFragment`. Then, update it with the
    code shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为用户选择闹钟应该响起的时间创建一个对话框。创建一个名为`TimePickerFragment`的新类。然后，使用此处显示的代码进行更新：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the `onCreateDialog` method, you created an instance of the  `TimePickerDialog` and
    set the default time to the current time. So, when the time picker starts, it
    will display the current time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreateDialog`方法中，您创建了一个`TimePickerDialog`的实例，并将默认时间设置为当前时间。因此，当时间选择器启动时，它将显示当前时间。
- en: Then, you overrode the `onTimeSet` method to handle the user's set time. You
    first logged the time, then displayed a toast saying that the time had been set
    successfully and is recorded.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您重写了`onTimeSet`方法来处理用户设置的时间。您首先记录了时间，然后显示了一个提示，说明时间已成功设置并记录。
- en: Then, you created an intent to execute the `AlarmReceiver` (you will create
    it very soon). Next was a `PendingIntent`, to be triggered when the alarm goes
    off. Then you (finally) created the alarm passing in the user's time. This alarm
    will be triggered at the exact time the user set. And, it will run only once.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您创建了一个意图来执行`AlarmReceiver`（您很快将创建它）。接下来是一个`PendingIntent`，在闹钟响起时触发。然后，您（终于）创建了传入用户时间的闹钟。这个闹钟将在用户设置的确切时间触发。而且，它只会运行一次。
- en: Starting the reminder dialog
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动提醒对话框
- en: Open up the `MainActivity` file, to make some quick updates that will enable
    you to show the dialog.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity`文件，进行一些快速更新，以便您可以显示对话框。
- en: 'In the `onCreateOptionsMenu`, make the following changes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreateOptionsMenu`中，进行以下更改：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You have just added a reminder menu item to be displayed when the user clicks
    on a task. Now, go to `onOptionsItemSelected` to start the time picker when this
    menu item is selected. Use the following code to achieve that:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚添加了一个提醒菜单项，当用户点击任务时会显示。现在，转到`onOptionsItemSelected`，以便在选择此菜单项时启动时间选择器。使用以下代码来实现：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, update the menu items in the `to_do_list_menu.xml` with the following
    code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下代码更新`to_do_list_menu.xml`中的菜单项：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add the `"reminder"` string resource in your `strings.xml` file using
    the code shown here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下代码在你的`strings.xml`文件中添加“reminder”字符串资源：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Okay, that was great. Now, remember the `AlarmReceiver` class above? What does
    it do? Move on to find out.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，做得很好。现在，记得上面的`AlarmReceiver`类吗？它是做什么的？继续了解一下。
- en: BroadcastReceiver
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BroadcastReceiver
- en: This is where you get to learn about the `BroadcastReceiver` class. According
    to the official documentation, it is the base class for code that receives and
    handles broadcast intents sent by `sendBroadcast(Intent)`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你学习`BroadcastReceiver`类的地方。根据官方文档，它是接收和处理由`sendBroadcast(Intent)`发送的广播意图的代码的基类。
- en: 'Basically, it is responsible for receiving broadcast events in your app. There
    are two ways of registering this receiver:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，它负责在你的应用中接收广播事件。有两种注册这个接收器的方法：
- en: Dynamically, using an instance of this class with `Context.registerReceiver()`,
    or
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态地，使用`Context.registerReceiver()`的这个类的实例，或者
- en: Statically, using the `<receiver>` tag in your AndroidManifest.xml
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态地，使用AndroidManifest.xml中的`<receiver>`标签
- en: 'An important note from the documentation:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中的一个重要说明：
- en: '*Beginning with Android 8.0 (API level 26), the system imposes additional restrictions
    on manifest-declared receivers. If your app targets API level 26 or higher, you
    cannot use the manifest to declare a receiver for most implicit broadcasts (broadcasts
    that do not target your app specifically).*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*从Android 8.0（API级别26）开始，系统对在清单中声明的接收器施加了额外的限制。如果你的应用目标是API级别26或更高，你不能使用清单来声明大多数隐式广播的接收器（不特定地针对你的应用）。*'
- en: Sending broadcasts
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送广播
- en: 'You will use the `LocalBroadcastManager` to send the notification to the user
    when the alarm sets off.  This tip from the documentation is why it is better
    to use this method of broadcasting:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用`LocalBroadcastManager`在闹钟响起时向用户发送通知。这是文档中的一个提示，说明为什么最好使用这种广播方法：
- en: '*"If you don''t need to send broadcasts across apps, use local broadcasts.
    The implementation is much more efficient (no interprocess communication needed)
    and you don''t need to worry about any security issues related to other apps being
    able to receive or send your broadcasts."*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*“如果你不需要跨应用发送广播，请使用本地广播。实现方式更加高效（不需要进程间通信），而且你不需要担心其他应用能够接收或发送你的广播所涉及的任何安全问题。”*'
- en: 'And, this tells us why it is efficient:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，这告诉我们为什么它是高效的：
- en: '*Local Broadcasts can be used as a general purpose pub/sub event bus in your
    app without any overheads of system wide broadcasts.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*本地广播可以作为应用中的通用发布/订阅事件总线使用，而不需要系统范围广播的任何开销。*'
- en: Creating a broadcast receiver
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建广播接收器
- en: 'Create a new file and name it `AlarmReceiver`, and have it extend `BroadcastReceiver`.
    Then, update it with the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新文件并命名为`AlarmReceiver`，让它扩展`BroadcastReceiver`。然后，使用以下代码更新它：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All you did was to override the `onReceive` method to start an `IntentService`
    called `AlarmService` (this class will be responsible for showing the notification).
    Well, the log statement is only there to help with debugging.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你所做的只是重写`onReceive`方法来启动名为`AlarmService`的`IntentService`（这个类将负责显示通知）。嗯，日志语句只是为了帮助调试。
- en: 'Before moving on, register the service in your `AndroidManifest.xml` just as
    the `MainActivity` component is. Here, you only need the `name` property, though:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，在你的`AndroidManifest.xml`中注册服务，就像`MainActivity`组件一样。在这里，你只需要`name`属性：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, proceed to create the `AlarmService` started by the `AlarmReceiver`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续创建由`AlarmReceiver`启动的`AlarmService`。
- en: Creating the AlarmService
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AlarmService
- en: '**IntentService**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**IntentService**'
- en: 'Let''s first hear what the official documentation has to say:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先听听官方文档的说法：
- en: <q>"`IntentService` is a base class for `Services` that handles asynchronous
    requests (expressed as Intents) on demand. Clients send requests through `startService(Intent)` calls;
    the service is started as needed, handles each Intent in turn using a worker thread,
    and stops itself when it runs out of work."</q>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “`IntentService`是处理异步请求（表示为Intents）的`Services`的基类。客户端通过`startService(Intent)`调用发送请求；服务根据需要启动，使用工作线程依次处理每个Intent，并在工作完成时停止自身。”
- en: '`IntentService` is a `Service` component that handles requests via `Intents`.
    After receiving the `Intent`, it starts a worker thread to run the task, and stops
    when the work is done, or whenever it is appropriate as per the given work.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`IntentService`是一个通过`Intents`处理请求的`Service`组件。接收到`Intent`后，它会启动一个工作线程来运行任务，并在工作完成时停止，或者在适当的时候停止。'
- en: The key thing here is the ability it gives your app to do some work without
    any interference. This is unlike the `Activity` component, for instance, which
    has to be in the foreground to run a task. `AsyncTasks` help with that but it's
    still not as flexible and is just not suitable for such a long-running task like
    this. Move on to see it in action.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关键之处在于它赋予你的应用在没有任何干扰的情况下执行一些工作的能力。这与`Activity`组件不同，例如，后者必须在前台才能运行任务。`AsyncTasks`可以帮助解决这个问题，但仍然不够灵活，对于这样一个长时间运行的任务来说并不合适。继续看它的实际应用。
- en: '**Note:**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: '`IntentService` has it''s own single worker thread for handling the requests'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntentService`有自己的单个工作线程来处理请求'
- en: Only one request will be processed at a time
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次只处理一个请求
- en: Creating an IntentService
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个IntentService
- en: 'Create a subclass of the `IntentService` called `ReminderService`. You will
    have to override the `onHandleIntent()` method to well, handle the `Intent`. Then,
    you would build a `Notification` instance to notify the user that the reminder
    is due:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`IntentService`的子类称为`ReminderService`。您将需要重写`onHandleIntent()`方法来处理`Intent`。然后，您将构建一个`Notification`实例来通知用户提醒已到期：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Stepping through the code, this is what you just did:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代码步骤，这就是您刚刚做的事情：
- en: In the `onCreate()`, you saved an instance of the `applicationContext` for later
    use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate()`中，您保存了`applicationContext`的一个实例以供以后使用。
- en: In `onHandleIntent()`, you used the Kotlin safety check feature to ensure you
    call the `showNotification()` method on a non-null instance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onHandleIntent()`中，您使用了Kotlin安全检查功能来确保在非空实例上调用`showNotification()`方法。
- en: In `showNotification()`, you used the `NotificationCompat` builder to create
    a Notification instance. You set the title and content for the notification as
    well. Then, using a `NotificationManager`, you triggered the notification. The
    ID parameter in the `notify()` method is an identification for this notification
    unique to your application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`showNotification()`中，您使用`NotificationCompat`构建器创建了一个通知实例。您还设置了通知的标题和内容。然后，使用`NotificationManager`，您触发了通知。`notify()`方法中的ID参数是唯一标识您的应用程序的此通知的标识。
- en: 'You need to register the service too. Here is how:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您也需要注册服务。以下是如何操作：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should be familiar with this, except for `android:exported`. That just means
    we are disallowing any external application from interacting with this service.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉这一点，除了`android:exported`。这只是意味着我们不允许任何外部应用程序与此服务进行交互。
- en: Here are a few important limitations to note about the `IntentService` class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于`IntentService`类的一些重要限制。
- en: It can't interact directly with your user interface. To put its results in the
    UI, you have to send them to an Activity.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它无法直接与您的用户界面交互。要将其结果放入UI，您必须将它们发送到Activity。
- en: Work requests run sequentially. If an operation is running in an `IntentService`,
    and you send it another request, the request waits until the first operation is
    finished.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作请求按顺序运行。如果`IntentService`中正在运行操作，并且您发送另一个请求，则该请求将等待，直到第一个操作完成。
- en: An operation running on an `IntentService` can't be interrupted.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`IntentService`上运行的操作无法被中断。
- en: It is now time to run your app. The alarm should fire and you should see a notification
    indicating that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是运行您的应用程序的时候了。闹钟应该会响起，您应该会看到通知指示。
- en: There are other ways to send notifications to your app. Keep reading to learn
    about push notifications.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他发送通知到您的应用程序的方法。继续阅读以了解有关推送通知的信息。
- en: Firebase Cloud Messaging
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase Cloud Messaging
- en: '"Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that
    lets you reliably deliver messages at no cost." That, I believe, is the best brief
    description of this service. It is actually part of a suite of many other services
    on the Firebase platform created and run by Google.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '"Firebase Cloud Messaging（FCM）是一个跨平台的消息传递解决方案，可以让您免费可靠地传递消息。"我相信这是对这项服务的最好简要描述。实际上，它实际上是谷歌创建和运行的Firebase平台上许多其他服务套件的一部分。'
- en: You have integrated In-app notifications, and now you shall see how to implement
    push notifications using FCM.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经集成了应用内通知，现在您将看到如何使用FCM实现推送通知。
- en: In-app notifications basically means that the notification is triggered by and
    from within the app. Push notifications, on the other hand, are sent from an external
    source.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 应用内通知基本上意味着通知是由应用程序内部触发和发送的。另一方面，推送通知是由外部来源发送的。
- en: Integrating FCM
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成FCM
- en: Set up FCM SDK
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置FCM SDK
- en: You first have to add the **SDK** (**Software Development Kit**) to your app.
    You should make sure you are targeting at least Android 4.0 (Ice Cream Sandwich).
    It should have the Google Play Store app installed, or an emulator running Android
    4.0 and Google APIs. Your Android Studio version should be at least 2.2\. You
    will use the Firebase Assistant window within Android Studio to do the integration.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先必须将**SDK**（软件开发工具包）添加到您的应用程序中。您应该确保您的目标至少是Android 4.0（冰淇淋三明治）。它应该安装有Google
    Play商店应用程序，或者运行Android 4.0和Google API的模拟器。您的Android Studio版本应至少为2.2。您将在Android
    Studio中使用Firebase助手窗口进行集成。
- en: 'Also, make sure you have installed Google Repository version 26 or higher,
    using the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保您已安装了Google存储库版本26或更高版本，方法如下：
- en: Click **Tools** | **Android** | **SDK Manager**
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**工具**|**Android**|**SDK管理器**
- en: Click the **SDK Tools** tab
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**SDK工具**选项卡
- en: Check the **Google Repository** checkbox, and click **OK**
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**Google存储库**复选框，然后单击**确定**
- en: Click **OK** to install
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**进行安装
- en: Click **Background** to complete the installation in the background, or wait
    for the installation to complete and click **Finish**
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**后台**以在后台完成安装，或者等待安装完成后单击**完成**
- en: 'You can now open and use the **Assistant** window in Android Studio by following
    these steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照以下步骤在Android Studio中打开并使用**助手**窗口：
- en: 'Click **Tools **| **Firebase** to open the **Assistant** window:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**工具**|**Firebase**打开**助手**窗口：
- en: '![](img/6a103bf5-54c6-4953-bb1e-7fb70d374d00.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a103bf5-54c6-4953-bb1e-7fb70d374d00.png)'
- en: 'Click to expand and select Cloud Messaging, then click the **Set up Firebase
    Cloud Messaging** tutorial to connect to Firebase and add the necessary code to
    your app:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击展开并选择Cloud Messaging，然后单击**设置Firebase Cloud Messaging**教程以连接到Firebase并向您的应用程序添加必要的代码：
- en: '![](img/c7568e23-bace-4d3a-9697-159c82d508d0.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7568e23-bace-4d3a-9697-159c82d508d0.png)'
- en: 'This is how the assistant looks:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 助手的外观如下：
- en: '![](img/25b92672-0964-4447-8cdb-5d4286a39680.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25b92672-0964-4447-8cdb-5d4286a39680.png)'
- en: 'If you complete the walk-through with the Firebase assistant successfully,
    you will have the following things done:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您成功完成了Firebase助手的操作指南，您将完成以下操作：
- en: Registered your app on Firebase
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Firebase上注册您的应用程序
- en: Added the SDK to your app by making the following updates to your root-level `build.gradle`
    file
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对根级`build.gradle`文件进行以下更新，将SDK添加到您的应用程序
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, in your module''s `build.gradle` file, it will add the `apply plugin` line
    at the bottom of the file, like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您模块的`build.gradle`文件中，它将在文件底部添加`apply plugin`行，如下所示：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update your manifest with the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容更新您的清单：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is required if you want to manually handle the message received from the
    FCM while the app is running. You, however, will not need this now as there is
    one a way of showing the notification without your intervention.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在应用程序运行时手动处理从FCM接收到的消息，则需要这样做。但是，由于现在有一种方法可以在没有您干预的情况下显示通知，因此您现在不需要这样做。
- en: 'For that functionality, you will instead need the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于该功能，您需要以下内容：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You will now create the `MyFirebaseInstanceIDService` class to extend `FirebaseInstanceIdService`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将创建`MyFirebaseInstanceIDService`类以扩展`FirebaseInstanceIdService`。
- en: If, for some reason, any of these are not done, you can manually log in to Firebase
    website and follow the steps following to create the project on Firebase and update
    your app's build files.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，这些步骤中的任何一个未完成，您可以手动登录到Firebase网站，并按照以下步骤创建Firebase上的项目并更新应用程序的构建文件。
- en: 'Using the Firebase website, the first thing to do after login is to add your
    project:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firebase网站，在登录后的第一件事是添加您的项目：
- en: '![](img/914faa3a-4529-45b6-b103-f400d3bb3acd.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/914faa3a-4529-45b6-b103-f400d3bb3acd.png)'
- en: 'You will then be asked to enter the name of the project. Enter **ToDoList**
    for the **Project name**. It will automatically generate a globally unique **Project
    ID** for you. Then, choose your country of residence, and hit the **CREATE PROJECT**
    button:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被要求输入项目的名称。为**项目名称**输入**ToDoList**。它将自动生成一个全局唯一的**项目ID**。然后，选择您的居住国家，并点击**创建项目**按钮：
- en: '![](img/e4b145b2-7a66-4355-8d4f-0460f2d1b889.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4b145b2-7a66-4355-8d4f-0460f2d1b889.png)'
- en: 'After this, choose the desired platform. Note that Firebase is not only used
    for Android but iOS and web as well. Therefore, choose the **Add Firebase to your
    Android app** option:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，选择所需的平台。请注意，Firebase不仅用于Android，还用于iOS和Web。因此，请选择**将Firebase添加到您的Android应用**选项：
- en: '![](img/a2c42a0d-1f87-4584-917b-dc01c619c669.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2c42a0d-1f87-4584-917b-dc01c619c669.png)'
- en: 'Now you will be taken through a three-step process:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将通过一个三步过程：
- en: 'The first step is to register your app by supplying your package name:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是通过提供您的包名称注册您的应用程序：
- en: '![](img/2d277a5f-f983-442e-950f-14ab98434a00.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d277a5f-f983-442e-950f-14ab98434a00.png)'
- en: 'In this step, you will only download the **google-services.json** file:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，您只需下载**google-services.json**文件：
- en: '![](img/e58c83cd-c1b9-46de-bf7c-d5110e6a68d2.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e58c83cd-c1b9-46de-bf7c-d5110e6a68d2.png)'
- en: 'Then, in the final step, you add the SDK to your app. Note that this is not
    necessary if you have already done so:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在最后一步中，您将向应用程序添加SDK。请注意，如果您已经这样做，则无需此操作：
- en: '![](img/16d7f695-9998-4fb9-a6dc-6f5a6b7c7927.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16d7f695-9998-4fb9-a6dc-6f5a6b7c7927.png)'
- en: 'That''s it. You have added your app on Firebase. You will now be shown the
    page for your newly created project. Here, you will see all the services available
    to your app. Select the **Notifications** service and click **GET STARTED**:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。您已经在Firebase上添加了您的应用程序。现在，您将看到新创建项目的页面。在这里，您将看到所有可用于您的应用程序的服务。选择**通知**服务，然后单击**开始**：
- en: '![](img/b4675cee-3c50-4ef6-b5be-65aed39271ba.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4675cee-3c50-4ef6-b5be-65aed39271ba.png)'
- en: 'You will now be shown the following page. Click on the **SEND YOUR FIRST MESSAGE**
    button:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到以下页面。单击**发送您的第一条消息**按钮：
- en: '![](img/93d004bb-9bd4-446d-bfdc-8aaa227f0d75.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93d004bb-9bd4-446d-bfdc-8aaa227f0d75.png)'
- en: 'Then, choose **Compose message**. Here, enter the message to be sent in the **Message
    text** box. Select **Single device** as the target. After entering the **FCM registration
    token**, you will hit the **SEND MESSAGE** button to send the notification. Read
    on to find out how to get the registration token:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择**撰写消息**。在这里，输入要在**消息文本**框中发送的消息。选择**单个设备**作为目标。在输入**FCM注册令牌**后，您将点击**发送消息**按钮以发送通知。继续阅读以了解如何获取注册令牌：
- en: '![](img/6bae15c3-2af4-4d1d-8c3f-c1e22308904d.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bae15c3-2af4-4d1d-8c3f-c1e22308904d.png)'
- en: Registration Token
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注册令牌
- en: 'When you run your app for the first time after setting up the FCM, the FCM
    SDK will generate a token for your app. This token will change under the following
    circumstances, and a new one will be generated accordingly:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置FCM后首次运行应用程序时，FCM SDK将为您的应用程序生成一个令牌。在以下情况下，此令牌将更改，并相应地生成一个新的令牌：
- en: The app deletes the instance ID
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序删除实例ID
- en: The app is restored on a new device
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序在新设备上恢复
- en: The user uninstalls/reinstalls the app
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户卸载/重新安装应用程序
- en: The user clears app data
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户清除应用程序数据
- en: 'This token must be kept private. To access this token, you will log it to your
    `Logcat` console. First, open `MyFirebaseInstanceIDservice` and update it with
    the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此令牌必须保持私密。要访问此令牌，您将其记录到您的`Logcat`控制台中。首先，打开`MyFirebaseInstanceIDservice`并使用以下代码进行更新：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that you have the key, paste it into the **Compose message** box above and
    hit the **SEND MESSAGE** button. You should see the notification on your phone
    shortly after that.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了密钥，请将其粘贴到上面的**撰写消息**框中，然后点击**发送消息**按钮。之后不久，您应该会在手机上看到通知。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to create background services, send broadcast
    messages, show in-app notifications and push notifications using Firebase. There
    are a few things you can do on your own to deepen your understanding of these
    topics:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，您学习了如何使用Firebase创建后台服务，发送广播消息，显示应用内通知和推送通知。有一些事情您可以自己做来加深对这些主题的理解： '
- en: Instead of notifying the user using some static message, use the description
    of the task for which the reminder was set
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而不是使用某些静态消息通知用户，请使用设置提醒的任务的描述
- en: Using Firebase, you can also try sending the push notification to a group of
    people instead of a single device
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firebase，您还可以尝试向一组人发送推送通知，而不是单个设备
