- en: Templates and Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板和插件
- en: As a development environment, Android Studio provides facilities to design and
    develop all aspects of any Android app we can imagine. In the previous chapters
    we saw how it acts as a visual design tool, along with a dynamic layout editor,
    emulators, and XML structures. From now onward, we will delve under the bonnet
    and take a look at how the IDE facilitates, simplifies, and speeds up the process
    of coding, testing, and fine-tuning our work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发环境，Android Studio提供了设计和开发任何我们可以想象的Android应用程序的设施。在前几章中，我们看到它如何作为一个可视化设计工具，以及一个动态布局编辑器、模拟器和XML结构。从现在开始，我们将深入了解IDE如何促进、简化和加快编码、测试和微调我们的工作的过程。
- en: Most readers will already be expert coders and require no help with this. Consequently,
    it is the way Android Studio improves this experience that we will globally explore
    in the coming chapters. In this chapter, we will look at various examples of ready-made
    code that comes with the IDE in the form of activity templates and API samples.
    These are useful as ways to explore and learn how various components are coded
    and to speed up the process of coding by providing an already existing starting
    point. Moreover as we shall see, if the bundled selection of templates is not
    enough, Android Studio allows us to create our own.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数读者已经是专业的编码人员，不需要帮助。因此，我们将在接下来的章节中全面探讨Android Studio改进这一体验的方式。在本章中，我们将看到IDE自带的各种活动模板和API示例的代码示例。这些对于探索和学习各种组件的编码方式以及通过提供已经存在的起点来加快编码过程都是有用的。此外，正如我们将看到的，如果捆绑的模板选择不够，Android
    Studio允许我们创建自己的模板。
- en: 'In this chapter, you will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Understanding built-in project templates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解内置项目模板
- en: Accessing the Structure Tool window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问结构工具窗口
- en: Installing and using UML plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用UML插件
- en: Applying simple refactoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用简单的重构
- en: Applying code templates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用代码模板
- en: Creating a custom template
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义模板
- en: Using project samples
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用项目示例
- en: Project templates
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目模板
- en: Most readers will have already encountered project templates whenever they start
    a new Android Studio project from the IDE's Welcome screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数读者在从IDE的欢迎屏幕开始新的Android Studio项目时已经遇到了项目模板。
- en: '![](img/c6ee59d1-aacf-4553-a917-e96a0769eb2e.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6ee59d1-aacf-4553-a917-e96a0769eb2e.png)'
- en: Project templates
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 项目模板
- en: Even the Empty Activity template provides files and a little code that are essential
    for almost all applications and, as you saw in the preceding screenshot, there
    is a growing collection of project templates designed to suit many common application
    structures and purposes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是空活动模板也提供了几乎所有应用程序都必不可少的文件和一些代码，正如您在前面的屏幕截图中所看到的，有越来越多的项目模板集合，旨在适应许多常见的应用程序结构和目的。
- en: The Navigation Drawer template
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航抽屉模板
- en: 'It will not be necessary to examine all of these templates here, but there
    are one or two that can be very instructive and provide further insight into the
    workings of Android Studio. The first, and perhaps the most useful, is the Navigation
    Drawer Activity template, which when run as-is produces the following output:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里不需要检查所有这些模板，但有一两个可能非常有教育意义，并且可以进一步了解Android Studio的工作原理。第一个，也许是最有用的，是导航抽屉活动模板，当按原样运行时产生以下输出：
- en: '![](img/c6aebf36-d507-4d0d-a5e9-df0809060837.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6aebf36-d507-4d0d-a5e9-df0809060837.png)'
- en: The Navigation Drawer template
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 导航抽屉模板
- en: As can be seen in the preceding screenshot, this template provides many common,
    and recommended, UI components, including icon drawables, menus, and action buttons.
    The most interesting aspect of these templates is the code that they create and
    the file structures they use, both of which are nice examples of best practices.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，此模板提供了许多常见且推荐的UI组件，包括图标可绘制、菜单和操作按钮。这些模板最有趣的方面是它们创建的代码和使用的文件结构，这两者都是最佳实践的很好示例。
- en: 'If we start a new project with this template and start to look around, one
    of the first things we will observe is that the `activity_main.xml` file is different
    from those we have seen earlier, in that it uses `android.support.v4.widget.DrawerLayout`
    as its root. Inside this, we find `CoordinatorLayout` and `NavigationView` from
    the design library. As in the previous example, the coordinator layout contains
    a toolbar and an FAB; here, though these components are created in a separate
    file and included with the `include` tag, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用此模板开始一个新项目并开始四处看看，我们将观察到`activity_main.xml`文件与我们之前看到的不同，因为它使用`android.support.v4.widget.DrawerLayout`作为其根。在其中，我们发现来自设计库的`CoordinatorLayout`和`NavigationView`。与前面的示例一样，协调器布局包含一个工具栏和一个FAB；然而，这些组件是在一个单独的文件中创建的，并与`include`标签一起包含，如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This structure can help keep our code easier to keep track of and make future
    modifications easier. As can be seen, this approach is also used to define the
    navigation bar header and main content.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构可以帮助我们更容易地跟踪代码并使未来的修改更容易。正如可以看到的，这种方法也用于定义导航栏标题和主要内容。
- en: 'Most of the template-generated XML will be familiar to the reader, but there
    are one or two snippets that might require explanation. For example, the `content_main.xml`
    file contains the following line:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模板生成的XML对读者来说都很熟悉，但也有一两个片段可能需要解释。例如，`content_main.xml`文件包含以下行：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The referenced string will not be found in the `strings.xml` file, as it is
    system-provided and points to the `AppBarLayout.ScrollingViewBehavior` class,
    ensuring that our toolbar is an instance of it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 引用的字符串不会在`strings.xml`文件中找到，因为它是系统提供的，并指向`AppBarLayout.ScrollingViewBehavior`类，确保我们的工具栏是它的一个实例。
- en: The line `tools:showIn="@layout/app_bar_main"` may also be puzzling. This is
    one of many useful features found in the `tools` namespace and is used here so
    that the navigation drawer is visible in the preview editor, saving the developer
    from having to rebuild a project every time they want to view a graphical change.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`tools:showIn="@layout/app_bar_main"` 这一行可能也令人困惑。这是 `tools` 命名空间中的许多有用功能之一，用于在预览编辑器中显示导航抽屉，使开发人员无需每次想查看图形变化时都重新构建项目。'
- en: The XML resources generated by this and other templates only tell half the story,
    as many of them produce a sizable amount of Java code as well, and this is just
    as interesting, if not more so, than the XML. Just a quick look through the `MainActivity.Java`
    code will demonstrate how the template has set up methods to handle basic navigation,
    menus, and button clicks. None of the code is complex to understand, but it is
    very handy as all of these methods would have had to be coded by us at some point
    or another, and the comments and placeholders make it very simple to substitute
    our own resources and add our own code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板和其他模板生成的 XML 资源只讲述了故事的一半，因为其中许多模板还生成了相当数量的 Java 代码，这同样有趣，甚至比 XML 更有趣。只需快速浏览一下
    `MainActivity.Java` 代码，就可以看到模板如何设置处理基本导航、菜单和按钮点击的方法。这些代码都不难理解，但非常方便，因为所有这些方法都必须在某个时候由我们编写，而注释和占位符使得替换我们自己的资源和添加我们自己的代码变得非常简单。
- en: The Structure Explorer
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构资源管理器
- en: It is nice when we have time to browse through code this way, but few developers
    have this luxury and naturally want a way to look quickly at a class's structure
    and contents. Android Studio provides a neat, schematic window onto a Java class's
    inner workings in the form of the **Structure Tool window**, which can be selected
    from the project explorer bar or by pressing *Alt* + *7:*
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式浏览代码是很好的，但很少有开发人员有这种奢侈，自然希望以一种快速查看类的结构和内容的方式。Android Studio 通过**结构工具窗口**提供了一个整洁的、图解的窗口，可以从项目资源管理器栏中选择，或者通过按
    *Alt* + *7* 来选择：
- en: '![](img/2ff9f52f-f555-409c-b47c-4477deee965f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ff9f52f-f555-409c-b47c-4477deee965f.png)'
- en: The Structure (*Alt *+ *7*) Tool window
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结构（*Alt *+ *7*）工具窗口
- en: When dealing with projects having many classes, the structure tool is a very
    useful way to maintain an overview, and when dealing with lengthy classes, selecting
    any item will highlight the corresponding text in the code editor.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 处理具有许多类的项目时，结构工具是一种非常有用的方式来保持概览，并且在处理冗长的类时，选择任何项目将在代码编辑器中突出显示相应的文本。
- en: Pressing *F4* when an item in the structure explorer is selected will cause
    the code editor to jump to that location in the text.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构资源管理器中选择项目后按 *F4* 将导致代码编辑器跳转到文本中的该位置。
- en: The toolbar at the top of the Structure pane allows for some very handy filters
    so that our methods can be displayed according to their defining type (as shown
    in the preceding figure) and as other levels of detail, such as whether to display
    properties and fields.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结构窗格顶部的工具栏允许使用一些非常方便的过滤器，以便根据它们的定义类型显示我们的方法（如前图所示），以及其他级别的细节，例如是否显示属性和字段。
- en: Despite the usefulness of being able to view any class from such a perspective,
    there are often times when we would like to view class structures from even more
    points of view, and there are of course plugins that allow deeper inspection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管能够从这样的角度查看任何类的视角非常有用，但通常情况下，我们希望从更多的角度查看类结构，当然也有允许更深入检查的插件。
- en: Class inspection plugins
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类检查插件
- en: There are many ways to visualize classes and groups of classes, making them
    easier to follow or to highlight certain features or properties. A tried and tested
    visual programming tool is the **Universal Modeling Language** (**UML**). These
    are of particular use if the developer is working with design patterns.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以可视化类和类组，使它们更容易遵循或突出显示某些特性或属性。一种经过验证的可视化编程工具是**通用建模语言**（**UML**）。如果开发人员使用设计模式，这些对于特定用途非常有用。
- en: 'There are several UML class diagram plugins available to us, ranging from basic
    to sophisticated. If you just want a simple UML tool, then the JetBrains plugin,
    simpleUMLCE, can be downloaded from the following link:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个 UML 类图插件可供我们使用，从基本到复杂不等。如果你只想要一个简单的 UML 工具，那么 JetBrains 插件 simpleUMLCE 可以从以下链接下载：
- en: '[plugins.jetbrains.com/plugin/4946-simpleumlce](http://plugins.jetbrains.com/plugin/4946-simpleumlce)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[plugins.jetbrains.com/plugin/4946-simpleumlce](http://plugins.jetbrains.com/plugin/4946-simpleumlce)'
- en: 'If you are new to plugins, follow the quick steps to install and use the simple
    UML plugin:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是插件新手，请按照快速步骤安装和使用 simple UML 插件：
- en: Download the plugin from the previous link.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上面的链接下载插件。
- en: Open the Plugins dialog from Android Studio's File | Settings menu.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Android Studio 的“文件 | 设置”菜单中打开插件对话框。
- en: Use the Install plugin from disk... button to locate and install the plugin.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“从磁盘安装插件...”按钮来定位并安装插件。
- en: '![](img/13e8021a-801e-49a2-a069-1bb0ca76afb5.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13e8021a-801e-49a2-a069-1bb0ca76afb5.png)'
- en: The Plugins dialog
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 插件对话框
- en: 'You will need to restart the IDE before you can access the plugin. Once you
    have done so, right-click on a package or class from the project explorer and
    select Add to simpleUML Diagram | New Diagram... from the menu. The plugin will
    add a tab to the left gutter, which will open the tool area and display the following
    screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要重新启动 IDE 才能访问插件。一旦您这样做了，右键单击项目资源管理器中的包或类，然后从菜单中选择“添加到 simpleUML 图表 | 新图表...”。插件将在左侧边栏添加一个选项卡，打开工具区域并显示以下截图：
- en: '![](img/4e2f10ad-3cd3-49a2-b9e9-8a8b2afbda7c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e2f10ad-3cd3-49a2-b9e9-8a8b2afbda7c.png)'
- en: The simpleUML Diagram tool
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: simpleUML 图表工具
- en: The activity class used in the navigation drawer example that we used in this
    chapter is a little too simple to really show off the advantages of taking a diagrammatic
    view of our code, but if the reader applies this tool to a more complex class,
    with several fields and dependencies, its value will soon become apparent.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中使用的导航抽屉示例中使用的活动类有点太简单，无法真正展示出以图表方式查看代码的优势，但如果读者将此工具应用于更复杂的类，具有多个字段和依赖关系，其价值很快就会显现出来。
- en: Diagrams can be saved as images and a variety of perspectives are available
    from the window's own toolbar.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图表可以保存为图像，并且可以从窗口的工具栏中选择多种视角。
- en: Most Studio plugins will add a tab to the guttering. This is normally placed
    at the top of the left-hand gutter. This can often interfere with our own workspace
    preferences. Fortunately, these tabs can be rearranged by simply dragging and
    dropping them into a preferred position.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Studio插件都会在排水沟中添加一个选项卡。这通常放置在左侧排水沟的顶部。这通常会干扰我们自己的工作区首选项。幸运的是，这些选项卡可以通过简单地将它们拖放到首选位置来重新排列。
- en: For most developers, a simple UML tool like this is enough, but if you prefer
    a more sophisticated tool, then **Code Iris** may be the plugin for you.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数开发人员来说，像这样的简单UML工具已经足够了，但如果您喜欢更复杂的工具，那么**Code Iris**可能是适合您的插件。
- en: Code Iris does not need to be downloaded, as it can be found by browsing the
    plugins repository. Although, you will still need to restart the IDE. The repository
    can be accessed from the same Plugins window of the Settings dialog as the previous
    plugin but by clicking the Browse repositories... button.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Code Iris不需要下载，因为可以通过浏览插件存储库找到。尽管如此，您仍然需要重新启动IDE。可以通过单击“浏览存储库...”按钮来访问存储库，该按钮位于设置对话框的插件窗口中，与之前的插件相同。
- en: '![](img/18e2cf25-40cc-4197-bbe6-d9ed94b7fe96.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18e2cf25-40cc-4197-bbe6-d9ed94b7fe96.png)'
- en: The Browse Repositories dialog
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览存储库对话框
- en: A quick look at the description of the project web page , which can be found
    at [plugins.jetbrains.com/plugin/7324-code-iris](https://plugins.jetbrains.com/plugin/7324-code-iris),
    will show that Code Iris can do a great deal more than create class diagrams and
    should be thought of more as a more general visualization tool. The toolis described
    as a UML-based Google Maps for your source code, making it not only a useful development
    tool for individuals but also a great communication tool between teams, and it
    is better suited to graphing whole projects than equivalent tools.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看项目网页的描述，可以在[plugins.jetbrains.com/plugin/7324-code-iris](https://plugins.jetbrains.com/plugin/7324-code-iris)找到，将显示Code
    Iris可以做的远不止创建类图，并且应该被视为更通用的可视化工具。该工具被描述为基于UML的谷歌地图，适用于您的源代码，这使其不仅是个人有用的开发工具，也是团队之间的良好沟通工具，并且更适合绘制整个项目而不是等效工具。
- en: Any third-party plugin repository can be made available in the repository browser,
    by clicking on the Manage repositories... button and pasting the relevant URL
    into the resultant dialog.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 任何第三方插件存储库都可以通过单击“管理存储库...”按钮并将相关URL粘贴到生成的对话框中，使其在存储库浏览器中可用。
- en: Code visualizations can be generated by either by opening the tool window and
    selecting the Create / Update Diagram button or from the project explorer from
    an individual module, package, or class's entry.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过打开工具窗口并选择“创建/更新图表”按钮，或者从项目资源管理器中的单个模块、包或类的条目中生成代码可视化。
- en: Code Iris' strength lies in its ability to visualize a project on any scale
    and quickly switch between these using the view slider. Used in conjunction with
    filters and an automatic arrangement algorithm called **organic layouting**, we
    can quickly generate appropriate and easily understood visualizations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Code Iris的强项在于其能够在任何规模上可视化项目，并且可以使用视图滑块快速在这些项目之间切换。与过滤器和称为**有机布局**的自动排列算法一起使用，我们可以快速生成适当且易于理解的可视化。
- en: '![](img/d4db0b6c-dfac-4106-93b6-5c569c634ac4.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4db0b6c-dfac-4106-93b6-5c569c634ac4.png)'
- en: Code Iris visualization
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Code Iris可视化
- en: Despite its pretensions toward biology and the poor use of English, the organic
    layouting tool is actually remarkably clever, useful, and good-looking. When switched
    on (using the play button), diagrams will arrange themselves dynamically, according
    to our focus, which can be directed simply by clicking on the class of interest.
    If you have ever found yourself in the unenviable position of having to work with
    poorly documented code, this tool can save you many hours of head scratching.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其对生物学的自命不凡和英语使用不佳，有机布局工具实际上非常聪明，有用且外观良好。打开后（使用播放按钮），图表将根据我们的焦点动态排列，这可以通过简单点击感兴趣的类来指定。如果您曾经发现自己不得不处理文档不全的代码，这个工具可以节省您很多时间。
- en: The two plugins covered here are by no means the only inspection and visualization
    tools available to us, and a quick search on the internet will uncover many more.
    The two we selected here were chosen as they are indicative of the types of tool
    around.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍的两个插件绝不是我们可用的唯一的检查和可视化工具，只需在互联网上快速搜索，就会发现更多。我们选择的这两个工具之所以被选择，是因为它们代表了周围的工具类型。
- en: The navigation drawer template we have explored here is remarkably useful as
    it contains several, almost ubiquitous UI components. It is also quite straightforward
    to understand. Another very handy project template is the Master/Detail Flow template.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里探讨的导航抽屉模板非常有用，因为它包含了几乎无处不在的UI组件。它也非常容易理解。另一个非常方便的项目模板是主/细节流模板。
- en: The Master/Detail Flow template
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主/细节流模板
- en: 'Master/Detail UIs are found frequently on mobile devices, as they maximize
    the use of space very nicely by displaying a list and each of its items separately
    or side by side depending on the current width of the screen. This results in
    phone in a portrait orientation displaying two single panes; however, but in landscape
    mode or on a larger device, such as a tablet, two panes will be displayed side
    by side:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上经常会发现主/细节UI，因为它们通过在屏幕的当前宽度上分别或并排显示列表及其各个项目，非常好地最大化了空间的使用。这导致手机在纵向方向上显示两个单窗格；但是，在横向模式或较大的设备上，如平板电脑上，将会并排显示两个窗格：
- en: '![](img/f5f71a36-1996-4a65-b982-59500d6f59d5.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5f71a36-1996-4a65-b982-59500d6f59d5.png)'
- en: A two-pane view
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 双窗格视图
- en: The preceding screenshot is taken from the unmodified Master/Detail Flow project
    template viewed on a device in landscape mode so that both panes are displayed.
    We said previously that the two-pane view was visible on phones in landscape mode.
    If you have tried this on many phones, you will have found that this is not necessarily
    true. By default  the template only displays two panes on screens whose longest
    side is 900dp or more. This can be deduced from the presence of the `res/layout-w900dp`
    directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图是从未经修改的主/细节流项目模板在横向模式下查看的，以便显示两个窗格。我们之前说过，两窗格视图在手机上的横向模式下是可见的。如果您在许多手机上尝试过这一点，您会发现这并不一定正确。默认情况下，模板仅在最长边为900dp或更长的屏幕上显示两个窗格。这可以从`res/layout-w900dp`目录的存在中推断出来。
- en: To enable a two-pane view on smaller devices, we need only change the name of
    this folder. This, of course, can be done directly from our file explorers, but
    Android Studio has a powerful refactoring system with a sophisticated preview
    window. Although it is not needed in this case, it is perhaps most useful as it
    searches for references to it and renames them too.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要在较小的设备上启用双窗格视图，我们只需要更改此文件夹的名称。当然，这可以直接从我们的文件浏览器中完成，但是Android Studio具有强大的重构系统和复杂的预览窗口。虽然在这种情况下并不需要，但它可能最有用的地方是它会搜索对它的引用并将它们重命名。
- en: The Rename dialog can be opened directly by pressing *Shift* + *F6*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Shift* + *F6*可以直接打开重命名对话框。
- en: Of course, if you try to access the `layout-w900dp` folder from the navigation
    bar or project explorer, you will not be able to do so. To do this, switch from
    the Android tab to the Project tab in the explorer, as this presents the project
    exactly as it is on disk.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果您尝试从导航栏或项目资源管理器访问`layout-w900dp`文件夹，您将无法这样做。要做到这一点，切换从Android选项卡到资源管理器中的项目选项卡，因为这样可以将项目完全呈现为磁盘上的状态。
- en: A quick examination of the code will reveal a Java class called DummyContent.
    As you will see, there is a TODO notice, pointing out that this class needs to
    be removed before publication, although, of course, it is quite possible simply
    to refactor it. The purpose of this file is to demonstrate how content can be
    defined. All that is required from us is to replace the placeholder array applied
    in the template with our own. This can, of course, take any form we choose, such
    as video or a web view.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 快速检查代码将会发现一个名为DummyContent的Java类。正如您将看到的，有一个TODO通知，指出这个类需要在发布之前被移除，尽管当然也可以简单地对其进行重构。这个文件的目的是演示如何定义内容。我们所需要做的就是用我们自己的内容替换模板中的占位符数组。当然，这可以采用我们选择的任何形式，比如视频或Web视图。
- en: Being able to start a project with ready-made code is very useful and can save
    us a great deal of time. However, there are many times when we might want to begin
    a project with a structure of our own that suits our purpose, and this may well
    not be one of those available via the IDE. Such a situation does not, however,
    prevent us from doing this, as code templates are available to us at any point
    and, as we shall see, it is even possible to create our own.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用现成的代码开始项目非常有用，可以节省大量时间。但是，有许多时候我们可能希望以适合我们目的的自己的结构开始项目，而这可能并不是通过IDE可用的。然而，这种情况并不妨碍我们这样做，因为代码模板可以在任何时候使用，而且，正如我们将看到的，甚至可以创建我们自己的模板。
- en: Custom templates
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义模板
- en: Imagine that you are developing a project that uses one of the templates we
    have already examined, but you would also like a login activity. Fortunately,
    this is easily managed using an already started project from within the IDE.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在开发一个项目，该项目使用我们已经检查过的模板之一，但你也想要一个登录活动。幸运的是，通过IDE内部已经启动的项目可以轻松管理。
- en: It is not obviously apparent that the project templates screen that we are presented
    with when starting a new project is available to us at any point. Simply select
    New | Activity | Gallery... from the project explorer's context-sensitive menu,
    and then choose the activity of your choice. You will then be presented with a
    customization screen, similar to those you have seen before, but with options
    to declare the parent and package, enabling us to use as many templates as we
    wish.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动新项目时，呈现给我们的项目模板屏幕可以在任何时候使用。只需从项目资源管理器的上下文敏感菜单中选择New | Activity | Gallery...，然后选择所需的活动。然后会呈现一个自定义屏幕，与之前看到的类似，但具有声明父级和包的选项，使我们能够使用尽可能多的模板。
- en: If you have visited the activity gallery, you will also have noted that these
    activities can also be selected directly and without having to open the gallery.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问了活动库，您还会注意到这些活动也可以直接选择，而无需打开库。
- en: 'This is not the whole story, as the same menu allows us to create and save
    our own templates. Opening the context-sensitive menu of a source code folder
    and selecting New | Edit File Templates... will open the following dialog:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的菜单还允许我们创建和保存自己的模板。打开源代码文件夹的上下文敏感菜单，选择New | Edit File Templates...将打开以下对话框：
- en: '![](img/163e42a5-fc7b-4016-b9e5-88c90fbe49a1.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/163e42a5-fc7b-4016-b9e5-88c90fbe49a1.png)'
- en: The template editing wizard
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 模板编辑向导
- en: As you can see from the preceding screenshot, there are a good number of file
    templates available, as well as three other tabs. The Includes tab provides file
    headers and the Code tab contains smaller code units, many of which are useful
    during testing. The Other tab is of particular use and provides templates for
    larger application components, such as activities, fragments, manifests, layouts,
    and resources.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，有许多文件模板可用，以及其他三个选项卡。包含选项卡提供文件头，代码选项卡包含较小的代码单元，其中许多在测试期间非常有用。其他选项卡特别有用，提供了更大的应用程序组件的模板，例如活动、片段、清单、布局和资源。
- en: The + icon in the top left-hand corner allows us to create our own templates
    (but only from the first two tabs). At its simplest, one can simply paste code
    directly into the window provided. Once named and saved, this will then appear
    in the File | New menu or from project explorer directories directly.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 左上角的+图标允许我们创建自己的模板（但只能从前两个选项卡）。最简单的方法是直接将代码粘贴到提供的窗口中。命名并保存后，它将出现在“文件”|“新建”菜单或项目资源管理器目录中。
- en: Taking just a quick look at some of the built-in templates will immediately
    reveal the use of a placeholder variable in the form of `${VARIABLE}`. It is these
    placeholders that make customized template such a useful and flexible tool.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅快速查看一些内置模板就会立即发现`${VARIABLE}`形式的占位符变量的使用。正是这些占位符使得定制模板成为一个有用和灵活的工具。
- en: 'The easiest way to see how these variables work is to use one of the existing
    templates to take a look at how these placeholders are implemented; this is outlined
    in the following exercise:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些变量如何工作的最简单方法是使用现有模板之一，看看这些占位符是如何实现的；这在以下练习中有详细说明：
- en: Open the Edit File Templates wizard, as described previously.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件模板向导，如前面所述。
- en: From the Other tab, copy the code from the `Activity.java` entry.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从其他选项卡中，复制“Activity.java”条目中的代码。
- en: Create a new template with the + button, name it, and paste the code into the
    space provided.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用+按钮创建新模板，命名它，并将代码粘贴到提供的空间中。
- en: 'Edit the code according to what you want, ensuring to include a custom variable,
    such as in the following code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您的需求编辑代码，确保包含自定义变量，就像以下代码中所示：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click on OK to save the template, which will now appear in New menus.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”保存模板，它将出现在“新建”菜单中。
- en: 'Now, whenever you create an instance of this template, Android Studio will
    prompt you to enter any variables defined in the template placeholders:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，每当您创建此模板的实例时，Android Studio将提示您输入模板占位符中定义的任何变量：
- en: '![](img/a91a2bcf-ab6d-4401-b8d0-85ef9fbdb030.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a91a2bcf-ab6d-4401-b8d0-85ef9fbdb030.png)'
- en: Generating a class from a template
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从模板生成类
- en: All developers rely on code that they can use again and again, and although
    other IDEs provide code templates, the number of built-in structures and the ease
    of creation makes this Android Studio's biggest time-saving feature.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有开发者都依赖可以反复使用的代码，尽管其他集成开发环境提供了代码模板，但内置结构的数量和创建的便利性使得这是Android Studio最大的节省时间的功能。
- en: Third-party templates
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方模板
- en: 'Before moving on, we need to take a quick look at another way to access ready-made
    templates: third-party templates. There are many of these across the web, as a
    quick search will reveal. Many of the best of these are unfortunately not free,
    although many do offer free trials.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要快速看一下另一种访问现成模板的方式：第三方模板。网上有很多这样的模板，快速搜索就会发现。很多最好的模板不幸的是并不免费，尽管很多提供免费试用。
- en: Sites such as Softstribe and Envato offer highly developed templates for a large
    number of app types, such as radio streaming, restaurant booking, and city guides.
    These templates are mostly fully developed apps and require little more than configuring
    and customizing. Such an approach may not suit the seasoned developer, but if
    speed is your top priority and you have a budget for such things, these services
    offer powerful shortcuts to project completion.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如Softstribe和Envato之类的网站为大量应用程序类型提供高度开发的模板，例如广播流、餐厅预订和城市指南。这些模板大多是完全开发的应用程序，几乎只需要配置和定制。这种方法可能不适合经验丰富的开发者，但如果速度是您的首要任务，并且您有预算支持，这些服务提供了项目完成的强大快捷方式。
- en: Templates are not the only time-saving feature of Android Studio when it comes
    to providing ready-made code, and you will no doubt have noticed the many sample
    projects available through the IDE.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 模板不是Android Studio提供现成代码时的唯一节省时间的功能，您无疑已经注意到IDE中提供的许多示例项目。
- en: Project samples
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目示例
- en: Although samples can be accessed from within the IDE from the sample browser,
    it is more usual to open one of these samples at the beginning of a project. This
    can be done from the welcome screen under Import an Android code sample. There
    are hundreds of these samples (and many more can be found online), and these are
    nicely grouped into categories in the sample browser.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以从示例浏览器中访问示例，但更常见的是在项目开始时打开其中一个示例。这可以从欢迎屏幕下的“导入Android代码示例”中完成。有数百个这样的示例（还可以在网上找到更多），这些示例在示例浏览器中被很好地分组到类别中。
- en: 'Like templates, samples can be used as a starting point for a bigger project,
    but they are also an education in, and of, themselves, as they are written by
    extremely knowledgeable developers and are wonderful examples of best practices:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与模板一样，示例可以作为更大项目的起点，但它们本身也是教育的一部分，因为它们是由非常有经验的开发者编写的，并且是最佳实践的绝佳示例：
- en: '![](img/a1208777-3180-4179-ab0b-dd9f535b4f20.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1208777-3180-4179-ab0b-dd9f535b4f20.png)'
- en: The sample browser
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 示例浏览器
- en: As can be seen from the preceding sample browser, samples can not only be downloaded
    from the browser but can also be viewed in GitHub. As the reader will know, GitHub
    is a fantastic code repository of immense use to developers of all kinds, and
    it houses all the samples found in the samples browser; there are thousands of
    other Android projects, code libraries, and plugins. From a samples point of view,
    this resource is a great time saver, as it is much quicker to take a look at the
    code before deciding whether to download and build.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例浏览器中可以看到，示例不仅可以从浏览器下载，还可以在GitHub中查看。读者会知道，GitHub是一个非常有用的代码存储库，对各种开发人员都非常有用，它包含了示例浏览器中找到的所有示例；还有成千上万的其他Android项目、代码库和插件。从示例的角度来看，这个资源是一个很好的时间节省器，因为在决定是否下载和构建之前，查看代码要快得多。
- en: 'There are so many samples, and they are all equally useful and instructive,
    making it difficult to select any one to examine here, although the Camera2 samples
    can be helpful to explore as this is one API that many developers may not have
    examined before. This is down to the following two factors:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有这么多示例，它们都同样有用和有教育意义，这使得很难选择任何一个来在这里进行检查，尽管Camera2示例可能有助于探索，因为这是许多开发人员可能以前没有检查过的API。这归结为以下两个因素：
- en: Very often, a camera functionality can be accessed simply by calling the native
    app (or one the user has installed) from within our own app.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很多时候，相机功能可以通过简单地从我们自己的应用程序中调用原生应用程序（或用户已安装的应用程序）来访问。
- en: The Camera2 API is incompatible with devices running on API level 20 and lower.
    Unlike many APIs, there is no handy support library to make Camera2 backward-compatible
    beyond this.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Camera2 API与运行在API级别20及以下的设备不兼容。与许多API不同，没有方便的支持库可以使Camera2向后兼容。
- en: Despite these drawbacks, if you are planning an app that focuses on capturing
    images and video, then you will need to build in all the functionalities yourself.
    This is where these samples can come in remarkably handy. The Camera2Basic sample
    is probably the best one to look at first.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些缺点，如果您计划开发一个专注于捕获图像和视频的应用程序，那么您将需要自己构建所有的功能。这就是这些示例可能非常有用的地方。Camera2Basic示例可能是首选查看的最佳示例。
- en: 'The sample contains just three classes and a simple layout structure catering
    to both landscape and portrait orientations. The classes include a basic startup
    activity, an extended TextureView that resizes the area to be captured depending
    on the device it is running on, and a Fragment that does most of the work. All
    these classes are nicely commented and are pretty much self-explanatory, and a
    quick examination of the code is all that is required to understand its workings.
    Like other samples, Camera2Basic can be built and run without any further modifications:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 示例只包含三个类和一个简单的布局结构，适用于横向和纵向方向。这些类包括一个基本的启动活动，一个扩展的TextureView，根据运行设备的不同调整要捕获的区域的大小，以及一个大部分工作的Fragment。所有这些类都有很好的注释，基本上是自解释的，只需要快速查看代码就可以理解它的工作原理。像其他示例一样，Camera2Basic可以在没有任何进一步修改的情况下构建和运行：
- en: '![](img/8b74924c-123e-4ddb-909e-a32a14c83c9f.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b74924c-123e-4ddb-909e-a32a14c83c9f.png)'
- en: The Camera2Basic sample
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Camera2Basic示例
- en: All of the samples in the repository are equally useful, depending on your choice
    of project, and all of them are equally well written and instructive.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中的所有示例都同样有用，取决于您选择的项目，它们都同样写得很好并且具有教育意义。
- en: One of GitHub's most useful properties is the large number of third-party libraries
    available there, and when we take a closer look at the Gradle build process, we
    will see how these libraries can be included as dependencies from within Android
    Studio.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub最有用的特性之一是那里有大量的第三方库可用，当我们更仔细地查看Gradle构建过程时，我们将看到这些库如何可以作为依赖项从Android Studio中包含。
- en: These are not the only useful tools available on GitHub, and GitHub is by no
    means the only source of such tools. As we have moved from UI development to coding,
    now is as good a time as any to take another look at some of the third-party plugins
    available for Android Studio.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不是GitHub上唯一有用的工具，GitHub也绝不是这些工具的唯一来源。随着我们从UI开发转向编码，现在是时候再次看一些可用于Android Studio的第三方插件了。
- en: Third-party plugins
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方插件
- en: There is a large and growing number of third-party plugins available, making
    it difficult to select a fair sample. The following sections covers a small collection
    of plugins selected primarily for their general-purpose usefulness.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量不断增长的第三方插件可用，这使得选择一个公平的样本变得困难。以下部分涵盖了一小部分插件，主要是因为它们的通用用途。
- en: ADB Wi-Fi
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ADB Wi-Fi
- en: 'This is a JetBrains plugin and so can be found using the Browse Repositories...
    button of the Plugins screen of the Settings dialog:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个JetBrains插件，因此可以在设置对话框的插件屏幕上使用“浏览存储库...”按钮找到：
- en: '![](img/3a3fa2a5-bdf0-4f6a-8e83-d1574feeb5e3.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a3fa2a5-bdf0-4f6a-8e83-d1574feeb5e3.png)'
- en: The plugins dialog
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 插件对话框
- en: This plugin simply allows us to debug our apps using a shared Wi-Fi connection.
    Despite its simplicity, this app is more than a cable-saving convenience, as it
    allows live debugging of many of the device's sensors that would be greatly restricted
    by being tethered to the host machine. Fitness and augmented reality apps can
    be tested with far more ease this way.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件简单地允许我们使用共享的Wi-Fi连接来调试我们的应用程序。尽管它很简单，但这个应用程序不仅仅是一个节省电缆的便利，因为它允许对许多设备的传感器进行实时调试，这些传感器如果被绑定到主机机器上将受到很大限制。健身和增强现实应用程序可以通过这种方式更轻松地进行测试。
- en: ADB Wi-Fi is very simple to set up and use, especially if your host and device
    already share a Wi-Fi connection and the device has been used for debugging before.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ADB Wi-Fi非常简单设置和使用，特别是如果您的主机和设备已经共享了Wi-Fi连接，并且设备之前已经用于调试。
- en: Most plugins are far more complex than this one, and many employ some very sophisticated
    technology, such as AI.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数插件比这个更复杂，许多使用了一些非常复杂的技术，比如人工智能。
- en: Codota
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Codota
- en: A great deal is being made recently of advances in Artificial Intelligence,
    and while many such claims are overblown and pretentious, nevertheless there are
    some striking examples of a truly helpful AI available, and Codota is one such
    project.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最近人们对人工智能的进步大做文章，虽然许多这样的说法夸大和自负，但仍然有一些引人注目的例子，表明真正有用的人工智能是可用的，Codota就是其中之一。
- en: Many developers will already be familiar with Codota as an online search tool
    or browser extension. As smart and useful that these tools are, Codota really
    comes into its own as an IDE plugin. It uses a smart and evolving AI system named
    **CodeBrain**. This code is based on a form of emergent programming known as **Example-Centric
    Programming**.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员可能已经熟悉Codota作为在线搜索工具或浏览器扩展程序。尽管这些工具很聪明和有用，但Codota真正发挥作用的地方是作为IDE插件。它使用一个名为CodeBrain的智能和不断发展的AI系统。这种代码是基于一种称为Example-Centric
    Programming的新兴编程形式。
- en: '![](img/07c59adf-13fc-40b6-a181-75d32eaacac1.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07c59adf-13fc-40b6-a181-75d32eaacac1.png)'
- en: Codota's CodeBrain
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Codota的CodeBrain
- en: Technically, the Codota plugin is not really a plugin, as it has to be installed
    separately and runs in a window  not connected from the IDE. This is because it
    works with the Java IDE, not individual environments. This has several advantages,
    and one of them is the fact that the plugin is a Java plugin and not Android-specific,
    meaning that it will run on any version of Studio and (unlike some plugins) doesn't
    require waiting for updates.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，Codota插件并不是真正的插件，因为它必须单独安装并在与IDE不连接的窗口中运行。这是因为它与Java IDE一起工作，而不是与个别环境连接。这有几个优势，其中之一是插件是一个Java插件，而不是特定于Android，这意味着它将在任何版本的Studio上运行，并且（不像一些插件）不需要等待更新。
- en: The Android Studio Codota plugin runs as a separate application, which is something
    of an advantage. When turned on, it is seriously clever (and according to its
    algorithmic philosophy, getting cleverer by the second). The software claims to
    provide an intelligent coding assistant, and very often it does just that, and
    I would challenge anyone to not be impressed by its acumen. It has some flaws
    but more often than not, finds examples from a wide variety of online sources,
    including stackoverflow and GitHub, that are almost always useful.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio Codota插件作为一个独立的应用程序运行，这在某种程度上是一个优势。一旦打开，它就非常聪明（根据其算法哲学，变得越来越聪明）。该软件声称提供智能编码助手，很多时候确实如此，我挑战任何人不被其才智所折服。它有一些缺陷，但往往能够从各种在线来源（包括stackoverflow和GitHub）中找到几乎总是有用的示例。
- en: Once downloaded and opened, simply open the IDE click on some code of interest,
    and Codota will, most likely, provide some quite lovely answers to any questions
    you might have. Imagine having an assistant that, although not very bright, is
    very knowledgeable and can scan all pertinent online code within seconds. This
    is Codota, and whether you use it as a browser extension, a search tool, or an
    IDE plugin, it is one of the better coding assistants available.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载并打开，只需打开IDE并点击感兴趣的代码，Codota很可能会提供一些非常好的答案来回答您可能有的任何问题。想象一下有一个助手，虽然不是很聪明，但非常有知识，并且可以在几秒钟内扫描所有相关的在线代码。这就是Codota，无论您将其用作浏览器扩展程序、搜索工具还是IDE插件，它都是最好的编码助手之一。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have looked at two approaches to assisting the process
    of code development: ready-made code, and assistant plugins and add-ons. Templates
    are often a great way to get a project off the ground quickly, and class inspection
    plugins allow us to easily understand larger templates, without having to pore
    over reams of code.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经研究了两种辅助代码开发过程的方法：现成的代码和助手插件和附加组件。模板通常是快速启动项目的好方法，类检查插件使我们能够轻松理解更大的模板，而无需仔细研究大量代码。
- en: The other plugins we looked at in this chapter offered some different ways to
    make the task of app development easier and more fun. There are, of course, very
    many fantastic tools out there, and coding is continually becoming less monotonous
    and more creative.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们看到的其他插件提供了一些不同的方法，使应用程序开发任务更加轻松和有趣。当然，市面上有很多很棒的工具，编码也在不断变得不那么单调，更有创造力。
- en: This chapter has focused on programming in Java, but as any developer knows
    this is by no means the only language available. Android Studio provides support
    for both C++ and Kotlin (the latter can even be included alongside Java code).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了Java编程，但正如任何开发人员所知道的那样，这绝不是唯一可用的语言。Android Studio支持C++和Kotlin（后者甚至可以与Java代码一起使用）。
- en: In the next chapter we will explore how to support other languages as well as
    taking a look at Android Things, which, although not another language, does require
    skill sets that many traditional developer may be unfamiliar with. Fortunately
    Android Studio provides tools that make developing for single-board computers
    very similar to developing other Android applications.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何支持其他语言，以及看看Android Things，尽管不是另一种语言，但确实需要许多传统开发人员可能不熟悉的技能。幸运的是，Android
    Studio提供了使为单板计算机开发与开发其他Android应用程序非常相似的工具。
