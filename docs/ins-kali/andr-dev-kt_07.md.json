["```kt\n    Toast.makeText(context, text, Toast.LENGTH_SHORT).show(); \n```", "```kt\npublic class AndroidUtils { \n    public static void toast(Context context, String text) { \n        Toast.makeText(context, text, Toast.LENGTH_SHORT).show(); \n    } \n} \n\n// Usage \nAndroidUtils.toast(context, \"Some toast\"); \n```", "```kt\n    fun Context.toast(text: String) { // 1 \n        Toast.makeText(this, text, LENGTH_LONG).show() //2 \n    } \n\n    // Usage \n    context.toast(\"Some toast\")  \n```", "```kt\n    context.toast(\"Some toast\") \n\n    Alternatively: \n    class MainActivity :Activity() { \n\n        override fun onCreate(savedInstanceState: Bundle?){ \n            super.onCreate(savedInstanceState) \n            toast(\"Some text\") \n        } \n    } \n```", "```kt\n    fun Collection<Int>.dropPercent(percent: Double) \n        = this.drop(floor(this.size * percent) \n```", "```kt\n    fun Collection<Int>.dropPercent(percent: Double) \n        = drop(floor(size * percent)) \n```", "```kt\nfun Any?.logError(error: Throwable, message: String = \"error\") { \n    Log.e(this?.javaClass?.simpleName ?: \"null\", message, error) \n} \n```", "```kt\n    user.logError(e, \"NameError\") // Logs: User: NameError ... \n    \"String\".logError(e) // String: error ... \n    logError(e) // 1, MainActivity: error ... \n```", "```kt\n    // ContextExt.kt \n\n    fun Context.toast(text: String) { \n        Toast.makeText(this, text, LENGTH_LONG).show() \n    } \n\n```", "```kt\n//Java \npublic class ContextExtKt { \n    public static void toast(Context receiver, String text) { \n        Toast.makeText(receiver, text, Toast.LENGTH_SHORT).show(); \n    } \n}\n```", "```kt\n    // Java \n    ContextExtKt.toast(context, \"Some toast\") \n```", "```kt\ninline fun Context.isPermissionGranted (permission: String): Boolean = ContextCompat.checkSelfPermission (this, permission) ==  PackageManager.PERMISSION_GRANTED \n```", "```kt\n    class A { \n        fun foo() { \n            println(\"foo from A\") \n        } \n    } \n\n    fun A.foo() { \n        println(\"foo from Extension\") \n    } \n\n    A().foo() // Prints: foo from A \n```", "```kt\n    open class A { \n        fun foo() { \n            println(\"foo from A\") \n        } \n    } \n\n    class B: A() \n\n    fun B.foo() { \n        println(\"foo from Extension\") \n    } \n\n    A().foo() // foo from A \n```", "```kt\n    abstract class A \n    class B: A() \n\n    fun A.foo() { println(\"foo(A)\") } \n    fun B.foo() { println(\"foo(B)\") } \n\n    val b = B() \n    b.foo() // prints: foo(B) \n    (b as A).foo() // 1, prints: foo(A) \n    val a: A = b \n    a.foo() // 1, prints: foo(A) \n```", "```kt\n    class A { \n        companion object {} \n    } \n    fun A.Companion.foo() { print(2) } \n```", "```kt\n    A.foo() \n```", "```kt\n    val subscriptions = CompositeDisposable() \n\n    subscriptions.add(repository \n       .getAllCharacters(qualifiedSearchQuery) \n       .subscribeOn(Schedulers.io()) \n       .observeOn(AndroidSchedulers.mainThread()) \n       .subscribe(this::charactersLoaded, view::showError)) \n```", "```kt\n    val list = mutableListOf(1,2,3) \n    list.add(1) \n    list += 1 \n```", "```kt\noperator fun CompositeDisposable.plusAssign(disposable: Disposable) \n\n{ \n    add(disposable)  \n} \n```", "```kt\n    subscriptions += repository \n       .getAllCharacters(qualifiedSearchQuery) \n       .subscribeOn(Schedulers.io()) \n       .observeOn(AndroidSchedulers.mainThread()) \n       .subscribe(this::charactersLoaded, view::showError)\n```", "```kt\n    fun View.show() { visibility = View.VISIBLE } \n    fun View.hide() { visibility = View.GONE } \n```", "```kt\n    toast(\"Some text\") \n```", "```kt\n    Toast.makeText(this, \"Some text\",Toast.LENGTH_LONG).show() \n```", "```kt\n    class User(val name: String, val surname: String) { \n        val fullName: String \n        get() = \"$name $surname\" \n    } \n```", "```kt\n    val TextView.trimmedText: String \n    get() = text.toString().trim() \n\n    // Usage \n    textView.trimmedText \n```", "```kt\n    public class AndroidUtilsKt { \n        String getTrimmedText(TextView receiver) { \n            return receiver.getText().toString().trim(); \n        } \n    } \n```", "```kt\n    PreferenceManager.getDefaultSharedPreferences(this) \n    getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater \n    getSystemService(Context.ALARM_SERVICE) as AlarmManager \n```", "```kt\n    val Context.preferences: SharedPreferences \n        get() = PreferenceManager \n            .getDefaultSharedPreferences(this) \n\n    val Context.inflater: LayoutInflater \n        get() = getSystemService(Context.LAYOUT_INFLATER_SERVICE) \n            as LayoutInflater \n\n    val Context.alarmManager: AlarmManager \n        get() = getSystemService(Context.ALARM_SERVICE) \n            as AlarmManager \n```", "```kt\ncontext.preferences.contains(\"Some Key\") \ncontext.inflater.inflate(R.layout.activity_main, root) \ncontext.alarmManager.setRepeating(ELAPSED_REALTIME, triggerAt, \n\n   interval, pendingIntent) \n```", "```kt\n    var View.visible: Boolean \n    get() = visibility == View.VISIBLE \n    set(value) { \n        visibility = if (value) View.VISIBLE else View.GONE \n    } \n```", "```kt\n    button.visible = true // the same as show() \n    button.visible = false // the same as hide() \n\n    Also, we can check view element visibility: \n\n    if(button.visible) { /* ... */ } \n```", "```kt\n    view.visible = true \n```", "```kt\n    println(view.visible) // Prints: true \n```", "```kt\n    fun List<String>.dropOneEvery(i: Int) = \n        filterIndexed { index, _ -> index % i == (i - 1) } \n```", "```kt\n    class UsersItemAdapter : ItemAdapter() { \n        lateinit var usersNames: List<String> \n\n        fun processList() { \n        usersNames = getUsersList() \n            .map { it.name } \n            .dropOneEvery(3) \n        } \n\n        fun List<String>.dropOneEvery(i: Int) = \n            filterIndexed { index, _ -> index % i == (i - 1) } \n\n        // ... \n    } \n```", "```kt\n    fun UsersItemAdapter.updateUserList(newUsers: List<User>) { \n        usersNames = newUsers \n           .map { it.name } \n           .dropOneEvery(3) \n    } \n```", "```kt\n    class UsersItemAdapter( \n        private val category: Category \n    ) : ItemAdapter() { \n\n       lateinit var usersNames: List<String> \n\n       fun processList() { \n            usersNames = getUsersList() \n                .fromSameCategory() \n                .map { it.name } \n       } \n\n       fun List<User>.fromSameCategory() = \n           filter { u -> u.category.id == category.id } \n\n       private fun getUsersList() = emptyList<User>() \n    } \n```", "```kt\n    // fromSameCategory defined as standard method \n    usersNames = fromSameCategory(newUsers) \n         .dropLast(3) \n\n    // fromSameCategory defined as member extension function \n    usersNames = newUsers\n\n         .fromSameCategory() \n         .dropLast(3) \n```", "```kt\n    private fun setUpRecyclerView(recyclerView: RecyclerView) { \n        recyclerView.layoutManager  \n            = LinearLayoutManager(recyclerView.context) \n        recyclerView.adapter \n            = MessagesAdapter(mutableListOf()) \n    } \n\n    // Usage \n    setUpRecyclerView(recyclerView) \n```", "```kt\n    private fun RecyclerView.setUp() { \n        layoutManager = LinearLayoutManager(context) \n        adapter = MessagesAdapter(mutableListOf()) \n    } \n\n    // Usage \n    recyclerView.setUp() \n```", "```kt\n    class MainActivity: Activity() { \n\n       override fun onCreate(savedInstanceState: Bundle?) { \n           super.onCreate(savedInstanceState) \n           setContentView(R.layout.main_activity) \n           val buttonView = findViewById(R.id.button_view) as Button \n           buttonView.setUp() \n       } \n\n       private fun Button.setUp() { \n           setText(\"Click me!\") // 1, 2 \n           setOnClickListener { showText(\"Hello\") } // 2 \n       } \n\n       private fun showText(text: String) { \n           toast(text) \n       } \n    } \n```", "```kt\n    class MainActivity: Activity() { \n\n        override fun onCreate(savedInstanceState: Bundle?) { \n            super.onCreate(savedInstanceState) \n            setContentView(R.layout.main_activity) \n            val buttonView = findViewById(R.id.button_view) as Button \n            buttonView.setUp() \n        } \n\n        private fun Button.setUp() { \n            setText(\"Click me!\") \n            setOnClickListener { setText(\"Hello\") } // 1 \n        } \n\n        private fun setText(text: String) { \n            textView.setText(text) \n        } \n    } \n```", "```kt\n    private fun Button.setUp() { \n        setText(\"Click me!\") \n        setOnClickListener {  \n            this@MainActivity.setText(\"Hello\")  \n        } \n    } \n```", "```kt\n    class A { \n        fun boo() {} \n\n        fun Int.foo() { \n            boo() \n         } \n    } \n```", "```kt\n    public final class A { \n        public final void boo() { \n            ...\n\n        } \n\n        public final void foo(int $receiver) { \n            this.boo(); \n        } \n    } \n```", "```kt\n    val <T> List<T>.lastIndex: Int \n        get() = size - 1 \n```", "```kt\n    startActivity(Intent (this, SettingsActivity::class.java)) \n```", "```kt\n    inline fun <reified T : Any> Context.getIntent() \n       = Intent(this, T::class.java) \n\n    inline fun <reified T : Any> Context.startActivity() \n       = startActivity(getIntent<T>()) \n```", "```kt\n    startActivity<SettingsActivity>() \n```", "```kt\n    val intent = getIntent<SettingsActivity>() \n```", "```kt\n    startActivity<SettingsActivity>(userKey to user) \n```", "```kt\n    class StudentDataActivity : BaseActivity() {\n\n        lateinit @Arg var student: Student\n\n        @Arg(optional = true) var lesson: Lesson = Lesson.default()\n\n    }\n```", "```kt\n  class StudentDataActivity : BaseActivity() {\n\n      @get:Arg val student: Student by argExtra()\n\n      @get:Arg(optional = true) \n\n      var lesson: Lesson by argExtra(Lesson.default())\n\n  }\n```", "```kt\n    StudentDataActivityStarter.start(context, student, lesson)\n\n    StudentDataActivityStarter.start(context, student) \n```", "```kt\n    val user = User(\"Marcin\", \"Moskala\") \n    val json: String = globalGson.toJson(user) \n    val userFromJson = globalGson.fromJson(json, User::class.java) \n```", "```kt\n    inline fun Any.toJson() = globalGson.toJson(this)!! \n\n    inline fun <reified T : Any> String.fromJson() \n      = globalGson.fromJson(this, T::class.java) \n\n    // Usage \n    val user = User(\"Marcin\", \"Moskala\") \n    val json: String = user.toJson() \n    val userFromJson: User = json.fromJson<User>() \n```", "```kt\n    for (user in users) { \n        println(user) \n    } \n```", "```kt\n    for (user in users) { \n        if ( user.passing ) {   \n            println(user) \n        } \n    } \n```", "```kt\n    data class Student( \n        val name: String,  \n        val grade: Double,  \n        val passing: Boolean \n    ) \n\n    val students = listOf( \n        Student(\"John\", 4.2, true), \n        Student(\"Bill\", 3.5, true), \n        Student(\"John\", 3.2, false), \n        Student(\"Aron\", 4.3, true), \n        Student(\"Jimmy\", 3.1, true) \n    ) \n```", "```kt\n    val filteredList = ArrayList<Student>() \n    for (student in students) { \n        if(student.passing) filteredList += student \n    } \n\n    Collections.sort(filteredList) { p1, p2 -> \n        if(p1.grade > p2.grade) -1 else 1 \n    } \n\n    for (i in 0..2) { \n        val student = filteredList[i] \n        println(student) \n    } \n\n    // Prints: \n    // Student(name=Aron, grade=4.3, passing=true) \n    // Student(name=John, grade=4.2, passing=true) \n    // Student(name=Bill, grade=3.5, passing=true) \n```", "```kt\n    students.filter { it.passing } // 1 \n       .sortedByDescending { it.grade } // 2 \n       .take(3) // 3 \n       .forEach(::println) // 4 \n```", "```kt\n    for (i in iterable) { /* ... */ } \n```", "```kt\n    for (char in \"Text\") { print(\"($char)\") } // Prints: (T)(e)(x)(t) \n```", "```kt\n    val list = listOf('a', 'b', 'c') \n    println(list[0]) // Prints: a \n    println(list.size) // Prints: 3 \n    list.add('d') // Error \n    list.removeAt(0) // Error \n```", "```kt\n    val list = mutableListOf('a', 'b', 'c') \n    println(list[0]) // Prints: a \n    println(list.size) // Prints: 3 \n    list.add('d') \n    println(list) // Prints: [a, b, c, d] \n    list.removeAt(0) \n    println(list) // Prints: [b, c, d] \n```", "```kt\n    (1..5).map { it * 2 }.forEach(::print) // Prints: 246810\n```", "```kt\n    val list = listOf(1,2,3).map { it * 2 }\n\n    println(list) // Prints: [2, 4, 6]\n```", "```kt\n    val list = listOf(1,2,3,4,5).map { it > 2 } \n\n    println(list) // Prints: [3, 4, 5] \n```", "```kt\n    val list = listOf(10, 20).flatMap { listOf(it, it+1, it + 2) } \n    println(list) // Prints: [10, 11, 12, 20, 21, 22] \n```", "```kt\n    shops.flatMap { it.products } \n    schools.flatMap { it.students } \n```", "```kt\ninline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> { //1 \n    val destination = ArrayList<R>() \n    for (item in this) destination.add(transform(item)) // 2 \n    return destination \n} \n\ninline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> { // 1 \n    val destination = ArrayList<T>() \n    for (item in this) if(predicate(item)) destination.add(item) // 2 \n    return destination \n} \n\ninline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Collection<R>): List<R> { \n\n// 1 \n    val destination = ArrayList<R>() \n    for (item in this) destination.addAll(transform(item)) // 2 \n    return destination \n} \n```", "```kt\n    students.filter { it.passing } \n       .map { \"${it.name} ${it.surname}\" } \n```", "```kt\n    Collection destination1 = new ArrayList(); \n    Iterator it = students.iterator(); \n    while(it.hasNext()) { \n        Student student = (Student) it.next(); \n        if(student.getPassing()) { \n            destination1.add(student); \n        } \n    }  \n    Collection destination2 = new ArrayList(destination1.size()); \n    it = destination2.iterator(); \n    while(it.hasNext()) { \n        Student student = (Student) it.next(); \n        String var = student.getName() + \" \" + student.getSurname(); \n        destination2.add(var); \n    } \n```", "```kt\n    listOf(\"A\", \"B\", \"C\").forEach { print(it) } // prints: ABC \n```", "```kt\n\n    (1..10).filter { it % 3 == 0 } \n       .onEach(::print) // Prints: 369 \n       .map { it / 3 } \n       .forEach(::print) // Prints: 123 \n```", "```kt\n    listOf(9,8,7,6).withIndex() // 1 \n       .filter { (i, _) -> i % 2 == 0 } // 2 \n       .forEach { (i, v) -> print(\"$v at $i,\") }  \n    // Prints: 9 at 0, 7 at 2, \n```", "```kt\n    val list1 = listOf(2, 2, 3, 3) \n        .filterIndexed { index, _ -> index % 2 == 0 } \n    println(list1) // Prints: [2, 3] \n\n    val list2 = listOf(10, 10, 10) \n        .mapIndexed { index, i -> index * i } \n    println(list2) // Prints: [0, 10, 20] \n\n    val list3 = listOf(1, 4, 9) \n        .forEachIndexed { index, i -> print(\"$index: $i,\") } \n    println(list3) // Prints: 0: 1, 1: 4, 2: 9 \n```", "```kt\n    val sum = listOf(1,2,3,4).sum() \n    println(sum) // Prints: 10 \n```", "```kt\n    class User(val points: Int) \n    val users = listOf(User(10), User(1_000), User(10_000)) \n\n    val points = users.map { it.points }. sum() \n    println(points) // Prints: 11010 \n```", "```kt\n    val points = users.sumBy { it.points } \n    println(points) // Prints: 11010\n```", "```kt\n    class User(val points: Double) \n    val users = listOf(User(10.0), User(1_000.0), User(10_000.0)) \n\n    val points = users.sumByDouble { it.points } \n    println(points) // Prints: 11010.0 \n```", "```kt\n    val evens = (1..5).count { it % 2 == 1 } \n    val odds = (1..5).count { it % 2 == 0 } \n    println(evens) // Prints: 3 \n    println(odds) // Prints: 2 \n```", "```kt\n    val nums = (1..4).count() \n    println(nums) // Prints: 4   \n```", "```kt\n    val list = listOf(4, 2, 5, 1) \n    println(list.min()) // Prints: 1 \n    println(list.max()) // Prints: 5 \n    println(listOf(\"kok\", \"ada\", \"bal\", \"mal\").min()) // Prints: ada \n```", "```kt\n    val strs = listOf(\"kok\", \"ada\", \"bal\", \"mal\").sorted() \n    println(strs) // Prints: [ada, bal, kok, mal] \n```", "```kt\n    students.filter { it.passing } \n       .sortedByDescending { it.grade } \n       .take(3) \n       .forEach(::println) \n```", "```kt\n    val list = listOf(14, 31, 2) \n    print(list.sortedBy { \"$it\" }) // Prints: [14, 2, 31] \n```", "```kt\n    val minByLen = listOf(\"ppp\", \"z\", \"as\") \n        .minBy { it.length } \n    println(minByLen) // Prints: \"z\" \n\n    val maxByLen = listOf(\"ppp\", \"z\", \"as\") \n        .maxBy { it.length } \n    println(maxByLen) // Prints: \"ppp\" \n```", "```kt\n    val comparator = Comparator<String> { e1, e2 ->  \n        e2.length - e1.length  \n    } \n    val minByLen = listOf(\"ppp\", \"z\", \"as\") \n       .sortedWith(comparator) \n    println(minByLen) // Prints: [ppp, as, z]\n```", "```kt\n    data class User(val name: String, val surname: String) { \n        override fun toString() = \"$name $surname\" \n    } \n\n    val users = listOf( \n       User(\"A\", \"A\"), \n       User(\"B\", \"A\"), \n       User(\"B\", \"B\"), \n       User(\"A\", \"B\") \n    ) \n    val sortedUsers = users \n       .sortedWith(compareBy({ it.surname }, { it.name })) \n\n    print(sortedUsers) // [A A, B A, A B, B B] \n```", "```kt\n    val sortedUsers = users \n       .sortedWith(compareBy(User::surname, User::name)) \n    print(sortedUsers) // [A A, B A, A B, B B]  \n```", "```kt\n    val grouped = listOf(\"ala\", \"alan\", \"mulan\", \"malan\") \n        .groupBy { it.first() } \n    println(grouped) // Prints: {'a': [\"ala\", \"alan\"], \"m\": [\"mulan\", \"malan\"]} \n```", "```kt\n    class Student(val name: String, val classCode: String, val meanGrade: Float) \n\n    val students = listOf( \n       Student(\"Homer\", \"1\", 1.1F), \n       Student(\"Carl\", \"2\", 1.5F), \n       Student(\"Donald\", \"2\", 3.5F), \n       Student(\"Alex\", \"3\", 4.5F), \n       Student(\"Marcin\", \"3\", 5.0F), \n       Student(\"Max\", \"1\", 3.2F) \n    ) \n\n    val bestInClass = students \n       .groupBy { it.classCode } \n       .map { (_, students) -> students.maxBy { it.meanGrade }!! } \n       .map { it.name } \n\n    print(bestInClass) // Prints: [Max, Donald, Marcin]\n```", "```kt\n    val list = mutableListOf(3,2,4,1) \n    val list2 = list.sorted() \n    println(list) // [3,2,4,1] \n    println(list2) // [1,2,3,4] \n    list.sort() \n    println(list) // [1,2,3,4] \n```", "```kt\n    data class Student( \n       val name: String, \n       val grade: Double, \n       val passing: Boolean \n    ) \n\n    val students = listOf( \n       Student(\"John\", 4.2, true), \n       Student(\"Bill\", 3.5, true), \n       Student(\"John\", 3.2, false), \n       Student(\"Aron\", 4.3, true), \n       Student(\"Jimmy\", 3.1, true) \n    ) \n\n    val bestStudents = students.filter { it.passing } // 1 \n       .withIndex() // 2 \n       .sortedBy { it.value.grade } // 3 \n       .take(3) // 4 \n       .sortedBy { it.index } // 5 \n       .map { it.value } // 6 \n\n    // Print list of names \n    println(bestStudents.map { it.name }) // [John, Bill, Jimmy] \n```", "```kt\n    class Result( \n       val player: Player, \n       val category: Category, \n       val result: Double \n    ) \n    class Player(val name: String) \n    enum class Category { SWIMMING, RUNNING, CYCLING } \n```", "```kt\n    val results = listOf( \n       Result(\"Alex\", Category.SWIMMING, 23.4), \n       Result(\"Alex\", Category.RUNNING, 43.2), \n       Result(\"Alex\", Category.CYCLING, 15.3), \n       Result(\"Max\", Category.SWIMMING, 17.3), \n       Result(\"Max\", Category.RUNNING, 33.3), \n       Result(\"Bob\", Category.SWIMMING, 29.9), \n       Result(\"Bob\", Category.CYCLING, 18.0) \n    ) \n```", "```kt\n    val bestInCategory = results.groupBy { it.category } // 1 \n       .mapValues { it.value.maxBy { it.result }?.player } // 2 \n    print(bestInCategory)  \n    // Prints: {SWIMMING=Bob, RUNNING=Alex, CYCLING=Bob} \n```", "```kt\n    val = generateSequence(1) { it + 1 } // 1\\. Instance of GeneratorSequence \n       .map { it * 2 } // 2\\. Instance of TransformingSequence \n       .take(10) // 3\\. Instance of  TakeSequence \n       .toList() // 4\\. Instance of List \n\n    println(numbers) // Prints: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n```", "```kt\n    val seq = generateSequence(1) { println(\"Generated ${it+1}\"); it + 1 } \n       .filter { println(\"Processing of filter: $it\"); it % 2 == 1 } \n       .map { println(\"Processing map: $it\"); it * 2 } \n       .take(2) \n```", "```kt\n    seq.toList() \n```", "```kt\nProcessing of filter: 1 \nProcessing map: 1 \nGenerated 2 \nProcessing of filter: 2 \nGenerated 3 \nProcessing of filter: 3 \nProcessing map: 3 \n```", "```kt\n    (1..4).onEach { println(\"Generated $it\") } \n       .filter { println(\"Processing filter: $it\"); it % 2 == 1 } \n       .map { println(\"Processing map: $it\"); it * 2 } \n```", "```kt\nGenerated 1 \nGenerated 2 \nGenerated 3 \nGenerated 4 \nProcessing filter: 1 \nProcessing filter: 2 \nProcessing filter: 3 \nProcessing filter: 4 \nProcessing map: 1 \nProcessing map: 3 \n```", "```kt\n    var power: Int.(Int) -> Int\n```", "```kt\n    power = { n -> (1..n).fold(1) { acc, _ -> this * acc } } \n```", "```kt\n    power = fun Int.(n: Int) = (1..n).fold(1) { acc, _ -> this * acc } \n```", "```kt\n    val result = 10.power(3) \n    println(result) // Prints: 1000 \n```", "```kt\n    fun ViewGroup.addTextView(configure: TextView.()->Unit) { \n        val view = TextView(context) \n        view.configure() \n\n        addView(view) \n\n    }\n\n    // Usage \n    val linearLayout = findViewById(R.id.contentPanel) as LinearLayout \n\n    linearLayout.addTextView { // 1 \n        text = \"Marcin\" // 2 \n        textSize = 12F // 2 \n    }\n```", "```kt\n    savedInstanceState?.let{ state ->  \n        println(state.getBoolean(\"isLocked\"))\n    } \n```", "```kt\n    inline fun <T, R> T.let(block: (T) -> R): R = block(this) \n```", "```kt\ninline fun <T> T.apply(block: T.() -> Unit): T { \n\n    block(); \n\n    return this \n\n} \ninline fun <T> T.also(block: (T) -> Unit): T { \n\n    block(this); \n\n    return this \n\n} \ninline fun <T, R> T.run(block: T.() -> R): R = block() \ninline fun <T, R> with(receiver: T, block: T.() -> R): R = receiver.block() \n```", "```kt\n    val mutableList = mutableListOf(1) \n\n    val mutableList = mutableListOf(1)\n\n    val letResult = mutableList.let {\n\n        it.add(2)\n\n        listOf(\"A\", \"B\", \"C\")\n\n    }\n\n    println(letResult) // Prints: [A, B, C]\n\n    val applyResult = mutableList.apply {\n\n        add(3)\n\n        listOf(\"A\", \"B\", \"C\")\n\n    }\n\n    println(applyResult) // Prints: [1, 2, 3]\n\n    val alsoResult = mutableList.also {\n\n       it.add(4)\n\n       listOf(\"A\", \"B\", \"C\")\n\n    }\n\n    println(alsoResult) // Prints: [1, 2, 3, 4]\n\n    val runResult = mutableList.run {\n\n       add(5)\n\n       listOf(\"A\", \"B\", \"C\")\n\n    }\n\n    println(runResult) // Prints: [A, B, C]\n\n    val withResult = with(mutableList) {\n\n       add(6)\n\n       listOf(\"A\", \"B\", \"C\")\n\n    }\n\n    println(withResult) // Prints: [A, B, C]\n\n    println(mutableList) // Prints: [1, 2, 3, 4, 5, 6]\n```", "```kt\n    val newNumber = number.plus(2.0) \n       .let { pow(it, 2.0) } \n       .times(2) \n```", "```kt\n    val newNumber = number?.plus(2.0) \n       ?.let { pow(it, 2.0) } \n```", "```kt\n    var name: String? = null \n\n    fun Context.toastName() { \n        val name = name\n        if(name != null) { \n            toast(name) \n        } \n    }   \n```", "```kt\n    name?.let { setNewName(it) } \n```", "```kt\n    name?.let { setNewName(it) } ?: throw Error(\"No name setten\") \n```", "```kt\n    val comment = if(field == null) getComment(field) else \"No comment \n```", "```kt\n    val comment = field?.let { getComment(it) } ?: \"No comment\" \n```", "```kt\n    val text = \"hello {name}\" \n\n    fun correctStyle(text: String) = text \n       .replace(\"hello\", \"hello,\") \n\n    fun greet(name: String) { \n        text.replace(\"{name}\", name) \n           .let { correctStyle(it) } \n           .capitalize() \n           .let { print(it) } \n    } \n\n    // Usage \n    greet(\"reader\") // Prints: Hello, reader \n```", "```kt\n    text.replace(\"{name}\", name) \n       .let(::correctStyle) \n       .capitalize() \n       .let(::print)\n```", "```kt\n    val button = Button(context) \n    button.text = \"Click me\"   \n    button.isVisible = true \n    button.setOnClickListener { /* ... */ } \n    this.button = button \n```", "```kt\n    button = Button(context).apply { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n```", "```kt\n    abstract class Provider<T> { \n\n       var original: T? = null \n       var override: T? = null \n\n       abstract fun create(): T \n\n       fun get(): T = override ?: original ?: create().also { original = it } \n    } \n```", "```kt\n    fun makeHttpClient(vararg interceptors: Interceptor) =  \n        OkHttpClient.Builder() \n            .connectTimeout(60, TimeUnit.SECONDS) \n            .readTimeout(60, TimeUnit.SECONDS) \n            .also { it.interceptors().addAll(interceptors) } \n            .build() \n```", "```kt\n    class Snail { \n        var name: String = \"\" \n        var type: String = \"\" \n\n        fun greet() { \n            println(\"Hello, I am $name\") \n        } \n    } \n\n    class Forest { \n        var members = listOf<Sneil>() \n\n       fun Sneil.reproduce(): Sneil = Sneil().also { \n           it.name = name \n           it.type = type \n           members += it \n       } \n    } \n```", "```kt\n    val button = findViewById(R.id.button) as Button \n\n    button.apply { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n\n    button.run { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n\n    with(button) { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n```", "```kt\n    val button = findViewById(R.id.button) as? Button \n\n    button?.run { \n        text = \"Click me\" \n        isVisible = true \n       setOnClickListener { /* ... */ } \n    } \n\n```", "```kt\n\n    val button = findViewById(R.id.button) as Button \n\n    with(button) { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n```", "```kt\n    itemAdapter.holder.button.run { \n        text = \"Click me\" \n        isVisible = true \n        setOnClickListener { /* ... */ } \n    } \n```", "```kt\n    infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that) \n```", "```kt\n    println( 1 to 2 == Pair(1, 2) ) // Prints: true \n```", "```kt\n    infix fun <T> List<T>.intersection(other: List<T>) \n        = filter { it in other } \n\n    listOf(1, 2, 3) intersection listOf(2, 3, 4) // [2,3] \n```", "```kt\nsearchView.addTextChangedListener(object : TextWatcher { \n  override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {} \n\n  override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) { \n    presenter.onSearchChanged(s.toString()) \n  } \n\n  override fun afterTextChanged(s: Editable) {} \n}) \n```", "```kt\nclass TextWatcherConfig : TextWatcher { \n\n  private var beforeTextChangedCallback: (BeforeTextChangedFunction)? = null // 1 \n  private var onTextChangedCallback: (OnTextChangedFunction)? = null // 1 \n  private var afterTextChangedCallback: (AfterTextChangedFunction)? = null // 1 \n\n  fun beforeTextChanged(callback: BeforeTextChangedFunction){  // 2 \n    beforeTextChangedCallback = callback \n  } \n\n  fun onTextChanged(callback: OnTextChangedFunction) { // 2 \n    onTextChangedCallback = callback \n  } \n\n  fun afterTextChanged(callback: AfterTextChangedFunction) { // 2 \n    afterTextChangedCallback = callback \n  } \n\n  override fun beforeTextChanged (s: CharSequence?, start: Int, count: Int, \n\n  after: Int) { // 3 \n\n    beforeTextChangedCallback?.invoke(s?.toString(), start, count, after) // 4 \n  } \n\n  override fun onTextChanged(s: CharSequence?, start: Int, before: \n\n  Int, count: Int) { // 3 \n    onTextChangedCallback?.invoke(s?.toString(), start, before, count) // 4 \n\n  } \n\n  override fun afterTextChanged(s: Editable?) { // 3 \n    afterTextChangedCallback?.invoke(s) \n  } \n} \n\nprivate typealias BeforeTextChangedFunction = \n\n(text: String?, start: Int, count: Int, after: Int)->Unit \n\nprivate typealias OnTextChangedFunction = \n\n(text: String?, start: Int, before: Int, count: Int)->Unit \n\nprivate typealias AfterTextChangedFunction = \n\n(s: Editable?)->Unit \n\n```", "```kt\nfun TextView.addOnTextChangedListener(config: TextWatcherConfig.()->Unit) { \n    val textWatcher = TextWatcherConfig() \n    textWatcher.config() \n    addTextChangedListener(textWatcher) \n} \n```", "```kt\n    searchView.addOnTextChangedListener { \n       onTextChanged { text, start, before, count ->  \n           presenter.onSearchChanged(text)  \n       } \n    } \n```", "```kt\n    searchView.addOnTextChangedListener { \n        onTextChanged { text, _, _, _ -> \n            presenter.onSearchChanged(text) \n        } \n    } \n```", "```kt\n    searchView.addOnTextChangedListener { \n        beforeTextChanged { _, _, _, _ -> \n            Log.i(TAG, \"beforeTextChanged invoked\") \n        } \n        onTextChanged { text, _, _, _ -> \n            presenter.onSearchChanged(text) \n        } \n        afterTextChanged { \n            Log.i(TAG, \"beforeTextChanged invoked\") \n        } \n    } \n```", "```kt\n    fun Context.linearLayout(init: LinearLayout.() -> Unit): LinearLayout { \n        val layout = LinearLayout(this) \n        layout.layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT) \n        layout.init() \n        return layout \n    } \n\n    fun ViewGroup.linearLayout(init: LinearLayout.() -> Unit): LinearLayout { \n        val layout = LinearLayout(context) \n        layout.layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT) \n        layout.init() \n        addView(layout) \n        return layout  \n    } \n\n    fun ViewGroup.textView(init: TextView.() -> Unit): TextView { \n        val layout = TextView(context) \n        layout.layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT) \n        layout.init() \n        addView(layout) \n        return layout \n    } \n\n    // Usage \n    class MainActivity : AppCompatActivity() { \n\n       override fun onCreate(savedInstanceState: Bundle?) { \n           super.onCreate(savedInstanceState) \n           val view = linearLayout { \n               orientation = LinearLayout.VERTICAL \n               linearLayout { \n                   orientation = LinearLayout.HORIZONTAL \n                   textView { text = \"A\" } \n                   textView { text = \"B\" } \n               } \n               linearLayout { \n                   orientation = LinearLayout.HORIZONTAL \n                   textView { text = \"C\" } \n                   textView { text = \"D\" } \n               } \n           } \n           setContentView(view) \n       } \n    } \n```", "```kt\n   category(\"Kotlin\") {\n\n       post {\n\n           name = \"Awesome delegates\"\n\n           url = \"SomeUrl.com\"\n\n       }\n\n       post {\n\n           name = \"Awesome extensions\"\n\n           url = \"SomeUrl.com\"\n\n       }\n\n   }\n\n   category(\"Android\") {\n\n       post {\n\n           name = \"Awesome app\"\n\n           url = \"SomeUrl.com\"\n\n           tags = listOf(\"Kotlin\", \"Google Login\")\n\n       }\n\n    }\n```", "```kt\n    class Post { \n        var name: String = \"\" \n        var url: String = \"\" \n        var tags: List<String> = listOf() \n    } \n```", "```kt\n    class PostCategory(val name: String) { \n        var posts: List<Post> = listOf() \n\n        fun post(init: Post.()->Unit) { \n            val post = Post() \n            post.init() \n            posts += post \n        } \n    } \n```", "```kt\n    class PostList { \n\n        var categories: List<PostCategory> = listOf() \n\n        fun category(name: String, init: PostCategory.()->Unit) { \n            val category = PostCategory(name) \n            category.init() \n            categories += category \n        } \n    } \n```", "```kt\n    fun definePosts(init: PostList.()->Unit): PostList { \n        val postList = PostList() \n        postList.init() \n        return postList \n    } \n```", "```kt\nval postList = definePosts { \n   category(\"Kotlin\") { \n       post { \n           name = \"Awesome delegates\" \n           url = \"SomeUrl.com\" \n       } \n       post { \n           name = \"Awesome extensions\" \n           url = \"SomeUrl.com\" \n       } \n   } \n   category(\"Android\") { \n       post { \n           name = \"Awesome app\" \n           url = \"SomeUrl.com\" \n           tags = listOf(\"Kotlin\", \"Google Login\") \n       } \n   } \n} \n```", "```kt\n    verticalLayout { \n        val name = editText() \n        button(\"Say Hello\") { \n            onClick { toast(\"Hello, ${name.text}!\") } \n        } \n    } \n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n\n       verticalLayout { \n           padding = dip(30) \n           editText { \n               hint = \"Name\" \n               textSize = 24f \n           } \n           editText { \n                hint = \"Password\" \n                textSize = 24f \n           } \n           button(\"Login\") { \n              textSize = 26f \n           } \n       }  \n    } \n```"]