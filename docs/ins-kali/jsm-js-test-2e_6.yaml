- en: Chapter 6. Light Speed Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。光速单元测试
- en: In [Chapter 4](ch04.html "Chapter 4. Asynchronous Testing – AJAX"), *Asynchronous
    Testing – AJAX*, we saw how including AJAX testing in the application can increase
    the complexity of the tests. In the example in that chapter, we created a server
    where the results were predictable. It was basically a complex test fixture. Even
    though we could have used a real server implementation, it would increase the
    complexity of the test even more; try changing the state of a server with a database
    or third-party services from the browser—it is not an easy or scalable solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。异步测试 - AJAX")中，*异步测试 - AJAX*，我们看到了如何在应用程序中包含AJAX测试会增加测试的复杂性。在该章节的示例中，我们创建了一个结果可预测的服务器。基本上是一个复杂的测试装置。即使我们可以使用真实的服务器实现，它也会增加测试的复杂性；尝试从浏览器更改具有数据库或第三方服务的服务器的状态并不是一种容易或可扩展的解决方案。
- en: There is also the impact on productivity; these requests take time to process
    and transmit, which hurts the quick feedback loop that unit testing usually provides.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 还有对生产力的影响；这些请求需要时间来处理和传输，这会影响通常提供的快速反馈循环。
- en: You can also say that these specs test both the client and the server code and,
    therefore, could not be considered unit tests; rather, they could be considered
    integration tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以说这些规范测试了客户端和服务器代码，因此不能被视为单元测试；相反，它们可以被视为集成测试。
- en: A solution to all these problems is to use either **stubs** or **fakes** in
    place of the real dependencies of the code. So, instead of making a request to
    the server, we use a test double of the server inside the browser.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解决所有这些问题的一个方法是使用**存根**或**虚假**来代替代码的真实依赖关系。因此，我们不是向服务器发出请求，而是在浏览器内部使用服务器的测试替身。
- en: We are going to use the same example from [Chapter 4](ch04.html "Chapter 4. Asynchronous
    Testing – AJAX"), *Asynchronous Testing – AJAX*, and rewrite it using different
    techniques.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[第4章](ch04.html "第4章。异步测试 - AJAX")中的相同示例，*异步测试 - AJAX*，并使用不同的技术进行重写。
- en: Jasmine stubs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasmine存根
- en: We have already seen some use cases for Jasmine spies. Remember that a spy is
    a special function that records how it was called. You can think of a stub as
    a spy with behavior.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了Jasmine间谍的一些用例。记住，间谍是一个特殊的函数，记录了它的调用方式。你可以把存根看作是带有行为的间谍。
- en: We use stubs whenever we want to force a specific path in our specs or replace
    a real implementation for a simpler one.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在想要在规范中强制执行特定路径或替换真实实现为更简单实现时使用存根。
- en: Let's revisit the example of the acceptance criteria, "Stock when fetched, should
    update its share price", by rewriting it using Jasmine stubs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用Jasmine存根来重新审视接受标准的示例，“获取股票时，应更新其股价”。
- en: 'We know that the stock''s `fetch` function is implemented using the `$.getJSON`
    function, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道股票的`fetch`函数是使用`$.getJSON`函数实现的，如下所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We could use the `spyOn` function to set up a spy on the `getJSON` function
    with the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`spyOn`函数来设置对`getJSON`函数的间谍，代码如下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this time, we will use the `and.callFake` function to set a behavior to
    our spy (by default, a spy does nothing and returns undefined). We make the spy
    invoke its `callback` parameter with an object response (`{ sharePrice: 20.18
    }`).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '但这一次，我们将使用`and.callFake`函数为我们的间谍设置行为（默认情况下，间谍什么也不做，返回undefined）。我们让间谍使用其`callback`参数调用一个对象响应（`{
    sharePrice: 20.18 }`）。'
- en: Later, at the expectation, we use the `toEqual` assertion to verify that the
    stock's `sharePrice` has changed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，在期望中，我们使用`toEqual`断言来验证股票的`sharePrice`是否已更改。
- en: To run this spec, you no longer need a server to make the requests to, which
    is a good thing, but there is one issue with this approach. If the fetch function
    gets refactored to use `$.ajax` instead of `$.getJSON`, then the test will fail.
    A better solution, provided by a Jasmine plugin called **jasmine-ajax**, is to
    stub the browser's AJAX infrastructure instead, so the implementation of the AJAX
    request is free to be done in different manners.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此规范，您不再需要服务器来进行请求，这是一件好事，但这种方法存在一个问题。如果`fetch`函数被重构为使用`$.ajax`而不是`$.getJSON`，那么测试将失败。一个更好的解决方案，由Jasmine插件**jasmine-ajax**提供，是代替浏览器的AJAX基础设施，因此AJAX请求的实现可以以不同的方式进行。
- en: Jasmine Ajax
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasmine Ajax
- en: Jasmine Ajax is an official plugin developed to help out the testing of AJAX
    requests. It changes the browser's AJAX request infrastructure to a fake implementation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine Ajax是一个官方插件，旨在帮助测试AJAX请求。它将浏览器的AJAX请求基础设施更改为虚假实现。
- en: This fake (or mocked) implementation, although simpler, still behaves like the
    real implementation to any code using its API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个虚假（或模拟）实现，虽然更简单，但对于使用其API的任何代码来说，仍然表现得像真实的实现一样。
- en: Installing the plugin
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装插件
- en: Before we dig into the spec implementation, first we need to add the plugin
    to the project. Go to [https://github.com/jasmine/jasmine-ajax/](https://github.com/jasmine/jasmine-ajax/)
    and download the current release (which should be compatible with the Jasmine
    2.x release). Place it inside the `lib` folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入规范实现之前，首先需要将插件添加到项目中。转到[https://github.com/jasmine/jasmine-ajax/](https://github.com/jasmine/jasmine-ajax/)并下载当前版本（应与Jasmine
    2.x版本兼容）。将其放在`lib`文件夹中。
- en: 'It is also needed to be added to the `SpecRunner.html` file, so go ahead and
    add another script:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它还需要添加到`SpecRunner.html`文件中，所以继续添加另一个脚本：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A fake XMLHttpRequest
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个虚假的XMLHttpRequest
- en: Whenever you are using jQuery to make AJAX requests, under the hood it is actually
    using the `XMLHttpRequest` object to perform the request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你使用jQuery进行AJAX请求时，在幕后实际上是使用`XMLHttpRequest`对象来执行请求。
- en: '`XMLHttpRequest` is the standard JavaScript HTTP API. Even though its name
    suggests that it uses XML, it supports other types of content such as JSON; the
    name has remained the same for compatibility reasons.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest`是标准的JavaScript HTTP API。尽管它的名称暗示它使用XML，但它支持其他类型的内容，比如JSON；出于兼容性原因，名称保持不变。'
- en: So, instead of stubbing jQuery, we could change the `XMLHttpRequest` object
    with a fake implementation. That is exactly what this plugin does.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以改变`XMLHttpRequest`对象的假实现，而不是存根jQuery。这正是这个插件所做的。
- en: 'Let''s rewrite the previous spec to use this fake implementation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写先前的规范以使用这个虚假实现：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Drilling the implementation down:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 深入实施：
- en: First, we tell the plugin to replace the original implementation of the `XMLHttpRequest`
    object by a fake implementation using the `jasmine.Ajax.install` function.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们告诉插件使用`jasmine.Ajax.install`函数将`XMLHttpRequest`对象的原始实现替换为假实现。
- en: We then invoke the `stock.fetch` function, which will invoke `$.getJSON`, creating
    `XMLHttpRequest` anew under the hood.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后调用`stock.fetch`函数，该函数将调用`$.getJSON`，在幕后创建新的`XMLHttpRequest`。
- en: And finally, we use the `jasmine.Ajax.requests.mostRecent().respondWith` function
    to get the most recently made request and respond to it with a fake response.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用`jasmine.Ajax.requests.mostRecent().respondWith`函数来获取最近发出的请求，并用假响应对其进行响应。
- en: 'We use the `respondWith` function, which accepts an object with three properties:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`respondWith`函数，该函数接受一个具有三个属性的对象：
- en: The `status` property to define the HTTP status code.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status`属性用于定义HTTP状态码。'
- en: The `contentType` (JSON in the example) property.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`contentType`（在示例中为JSON）属性。'
- en: The `responseText` property, which is a text string containing the response
    body for the request.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`responseText`属性，其中包含请求的响应主体的文本字符串。'
- en: 'Then, it''s all a matter of running the expectations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，一切都是运行期望的问题：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since the plugin changes the global `XMLHttpRequest` object, you must remember
    to tell Jasmine to restore it to its original implementation after the test runs;
    otherwise, you could interfere with the code from other specs (such as the Jasmine
    jQuery fixtures module). Here''s how you can accomplish this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于插件更改了全局的`XMLHttpRequest`对象，您必须记住告诉Jasmine在测试运行后将其恢复到原始实现；否则，您可能会干扰其他规范（例如Jasmine
    jQuery fixtures模块）中的代码。以下是您可以实现这一点的方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is also a slightly different approach to write this spec; here, the request
    is first stubbed (with the response details) and the code to be exercised is executed
    later.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种略有不同的方法来编写这个规范；在这里，首先对请求进行存根（带有响应细节），然后执行要执行的代码。
- en: 'The previous example is changed to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的示例更改为以下内容：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is possible to use the `jasmine.Ajax.stubRequest` function to stub any request
    to a specific request. In the example, it is defined by the URL `http://localhost:8000/stocks/AOUE`,
    and the response definition is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`jasmine.Ajax.stubRequest`函数来存根对特定请求的任何请求。在示例中，它由URL `http://localhost:8000/stocks/AOUE`定义，并且响应定义如下：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The response definition follows the same properties as the previously used `respondWith`
    function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 响应定义遵循与先前使用的`respondWith`函数相同的属性。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how asynchronous tests can hurt the quick feedback
    loop you can get with unit testing. I showed how you can use either stubs or fakes
    to make your specs run quicker and with fewer dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了异步测试如何影响您可以通过单元测试获得的快速反馈循环。我展示了如何使用存根或假实现使您的规范更快地运行并减少依赖关系。
- en: We have seen two different ways in which you could test AJAX requests with a
    simple Jasmine stub and with the more advanced, fake implementation of the `XMLHttpRequest`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了两种不同的方式，您可以使用简单的Jasmine存根或更高级的`XMLHttpRequest`的假实现来测试AJAX请求。
- en: You also got more familiar with spies and stubs and should be more comfortable
    using them in different scenarios.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您还更加熟悉间谍和存根，并应该更加舒适地在不同场景中使用它们。
- en: In the next chapter, we are going to go further into the complexity of our application,
    and we will do an overall refactoring to transform it into a fully featured single-page
    application using the `React.js` library.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步探讨我们应用程序的复杂性，并进行全面重构，将其转换为一个完全功能的单页面应用程序，使用`React.js`库。
