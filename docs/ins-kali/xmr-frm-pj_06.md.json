["```cs\n {\n    \"IsEncrypted\": false,\n    \"Values\": {\n    \"AzureWebJobsStorage\": \"\",\n    \"AzureWebJobsDashboard\": \"\"\n    \"AzureSignalRConnectionString\": \"{EnterTheConnectingStringHere}\"\n   }\n } \n```", "```cs\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Azure.WebJobs.Extensions.SignalRService;\n\n    [FunctionName(\"GetSignalRInfo\")]\n    public static SignalRConnectionInfo GetSignalRInfo(\n    [HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequest req,\n    [SignalRConnectionInfo(HubName = \"chat\")] SignalRConnectionInfo   \n    connectionInfo)\n{\n    return connectionInfo;\n}\n```", "```cs\npublic class Message\n{\n    public Type TypeInfo { get; set; }\n    public string Id {get;set;}\n    public string Username { get; set; }\n    public DateTime Timestamp { get; set; }\n\n    public Message(){}\n    public Message(string username)\n    {\n        Id = Guid.NewGuid().ToString();\n        TypeInfo = GetType();\n        Username = username;\n        Timestamp = DateTime.Now;\n    }\n}\n```", "```cs\npublic class UserConnectedMessage : Message\n{\n    public UserConnectedMessage() { }\n    public UserConnectedMessage(string username) : base(username) { }\n} \n```", "```cs\npublic class SimpleTextMessage : Message\n{\n    public SimpleTextMessage(){}\n    public SimpleTextMessage(string username) : base(username){} \n    public string Text { get; set; }\n} \n```", "```cs\npublic class PhotoMessage : Message\n{\n    public PhotoMessage() { }\n    public PhotoMessage(string username) : base(username) { }\n\n    public string Base64Photo { get; set; }\n    public string FileEnding { get; set; }\n} \n```", "```cs\npublic class PhotoUrlMessage : Message\n{\n    public PhotoUrlMessage() {}\n    public PhotoUrlMessage(string username) : base(username){}\n\n    public string Url { get; set; }\n} \n```", "```cs\n {\n     \"IsEncrypted\": false,\n     \"Values\": {\n     \"AzureWebJobsStorage\": \"\",\n     \"AzureWebJobsDashboard\": \"\",\n     \"AzureSignalRConnectionString\": \"{EnterTheConnectingStringHere}\"\n     \"StorageConnection\": \"{EnterTheConnectingStringHere}\"\n   }\n } \n```", "```cs\nusing Microsoft.WindowsAzure.Storage;\nusing Microsoft.WindowsAzure.Storage.Blob;\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\n\npublic static class StorageHelper\n{\n\n    private static CloudBlobContainer GetContainer()\n    {    \n        string storageConnectionString =  \n        Environment.GetEnvironmentVariable(\"StorageConnection\");\n        var storageAccount =   \n        CloudStorageAccount.Parse(storageConnectionString);\n        var blobClient = storageAccount.CreateCloudBlobClient();\n\n        var container = \n        blobClient.GetContainerReference(\"chatimages\");\n\n        return container;\n    } \n}\n```", "```cs\npublic static async Task<string> Upload(byte[] bytes, string fileEnding)\n{\n  var container = GetContainer();\n  var blob = container.GetBlockBlobReference($\"  \n  {Guid.NewGuid().ToString()}.{fileEnding}\");\n\n  var stream = new MemoryStream(bytes);\n  await blob.UploadFromStreamAsync(stream);\n\n  return blob.Uri.AbsoluteUri;\n} \n```", "```cs\npublic static async Task Clear()\n{\n    var container = GetContainer();\n    var blobList = await \n    container.ListBlobsSegmentedAsync(string.Empty, false, \n    BlobListingDetails.None, int.MaxValue, null, null, null);\n\n    foreach(var blob in blobList.Results.OfType<CloudBlob>())\n    {\n        if(blob.Properties.Created.Value.AddHours(1) < DateTime.Now)\n        {\n            await blob.DeleteAsync();\n        }\n    }\n} \n```", "```cs\n[FunctionName(\"Messages\")]\n  public async static Task SendMessages(\n    [HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] object \n     message,\n    [SignalR(HubName = \"chat\")] IAsyncCollector<SignalRMessage>    \n     signalRMessages)\n  { \n```", "```cs\nvar jsonObject = (JObject)message;\nvar msg = jsonObject.ToObject<Message>();\n```", "```cs\nif (msg.TypeInfo.Name == nameof(PhotoMessage))\n{\n    //ToDo: Upload the photo to blob storage.\n}\n\nawait signalRMessages.AddAsync(new SignalRMessage\n  {\n    Target = \"newMessage\",\n    Arguments = new[] { message }\n }); \n```", "```cs\nif (msg.TypeInfo.Name == nameof(PhotoMessage))\n{\n    var photoMessage = jsonObject.ToObject<PhotoMessage>(); \n    var bytes = Convert.FromBase64String(photoMessage.Base64Photo);\n    var url = await StorageHelper.Upload(bytes, \n    photoMessage.FileEnding);\n msg = new PhotoUrlMessage(photoMessage.Username)\n {\n        Id = photoMessage.Id,\n Timestamp = photoMessage.Timestamp,\n Url = url\n }; await signalRMessages.AddAsync(new SignalRMessage\n                                   {\n                                    Target = \"newMessage\",\n                                    Arguments = new[] { message }\n                                    }); \n    return;\n}\n```", "```cs\nvar stream = new MemoryStream(bytes); \n  var subscriptionKey =   \n  Environment.GetEnvironmentVariable(\"ComputerVisionKey\");\n  var computerVision = new ComputerVisionClient(new   \n  ApiKeyServiceClientCredentials(subscriptionKey), new \n  DelegatingHandler[] { });\n\n  computerVision.Endpoint =   \n  Environment.GetEnvironmentVariable(\"ComputerVisionEndpoint\");\n\n  var features = new List<VisualFeatureTypes>() { \n  VisualFeatureTypes.Adult };\n\n  var result = await   \n  computerVision.AnalyzeImageInStreamAsync(stream, features);\n\nif (result.Adult.IsAdultContent)\n{\n    return;\n} \n```", "```cs\n[FunctionName(\"ClearPhotos\")]\n  public static async Task Run(\n    [TimerTrigger(\"0 */60 * * * *\")]TimerInfo myTimer, ILogger log)\n{\n    await StorageHelper.Clear();\n} \n```"]