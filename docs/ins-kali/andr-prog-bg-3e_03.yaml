- en: '*Chapter 3*: Exploring Android Studio and the Project Structure'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：探索Android Studio和项目结构'
- en: In this chapter, we will create and run two more Android projects. The purpose
    of these exercises is to explore more deeply Android Studio and the structure
    of Android projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建并运行另外两个Android项目。这些练习的目的是更深入地探索Android Studio和Android项目的结构。
- en: When we build our apps ready for deployment, the code and the resource files
    need to be packed away in an **Android Package** (**APK**) file—just right. Therefore,
    all the layout files (and other resources that we will soon discover) need to
    be in their correct structures.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建我们的应用程序准备部署时，代码和资源文件需要打包到一个**Android Package**（**APK**）文件中。因此，所有布局文件（以及我们很快会发现的其他资源）都需要在它们正确的结构中。
- en: Fortunately, Android Studio handles this for us when we create a project from
    a template. However, we still need to know how to find and amend these files,
    how to add our own (and sometimes remove) files created by Android Studio, and
    how the resource files are interlinked, sometimes with each other and sometimes
    with the Java code (autogenerated and our own).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，当我们从模板创建项目时，Android Studio会为我们处理这个问题。但是，我们仍然需要知道如何找到和修改这些文件，如何添加我们自己的（有时删除）由Android
    Studio创建的文件，以及资源文件如何相互链接，有时与彼此相互链接，有时与Java代码（自动生成和我们自己的）相互链接。
- en: Along with understanding the composition of our projects, it will also be beneficial
    to make sure we get the most from the emulator.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除了了解我们项目的组成，确保我们充分利用模拟器也是有益的。
- en: Note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Emulators are particularly useful when you want to make sure that your app will
    work on hardware that you don't own. Also, learning about some of the latest features
    (as we will in this book) often requires the latest handset, and an emulator is
    a cost-effective way of following along with all the mini-apps without buying
    the latest phone.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器在您想要确保您的应用程序在您不拥有的硬件上运行时特别有用。此外，了解一些最新功能（正如我们将在本书中了解的那样）通常需要最新的手机，模拟器是一种经济有效的方式，可以跟随所有小应用程序而不必购买最新的手机。
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下主题：
- en: Exploring the file and folder structure of the **Empty Activity** project template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**空活动**项目模板的文件和文件夹结构
- en: Exploring the file and folder structure of the **Basic Activity** project template
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索**基本活动**项目模板的文件和文件夹结构
- en: Seeing the difference between the **Empty Activity** and **Basic Activity**
    templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看**空活动**和**基本活动**模板之间的差异
- en: Exploring the Android emulator
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Android模拟器
- en: This chapter will leave us in a good position to build and deploy multiple different
    **user interface** (**UI**) designs in the next chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使我们能够在下一章中构建和部署多个不同的**用户界面**（**UI**）设计。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2003](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2003).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码，网址为[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2003](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2003)。
- en: Project Explorer and project anatomy
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目资源管理器和项目解剖
- en: When we create a new Android project, we most often do so using a project template,
    just as we did in [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*,* *Beginning
    Android and Java*. The template we use determines the exact selection and contents
    of files that Android Studio will generate. While there are big similarities across
    all projects that are worth noting, seeing the differences can also help. Let's
    build two template projects and examine the files, their contents, and how they
    are all linked together through the code (**Extensible Markup Language** (**XML**)
    and Java). We begin by creating an **Empty Activity** project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新的Android项目时，我们通常使用项目模板，就像我们在[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*，开始Android和Java*中所做的那样。我们使用的模板决定了Android
    Studio将生成的文件的精确选择和内容。虽然所有项目之间存在很大的相似之处值得注意，但看到差异也有帮助。让我们构建两个模板项目，并检查文件、它们的内容以及它们是如何通过代码（**可扩展标记语言**（**XML**）和Java）链接在一起的。我们首先创建一个**空活动**项目。
- en: Exploring the file and folder structure of the Empty Activity project template
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索**空活动**项目模板的文件和文件夹结构
- en: The simplest project type with an autogenerated UI is the **Empty Activity**
    project template. The UI is almost empty, but it is there ready to be added to.
    When we create a project even with an empty UI, Android Studio also autogenerates
    the Java code to display the UI. Therefore, when we add it to the empty UI, it
    is ready to be displayed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 具有自动生成UI的最简单项目类型是**空活动**项目模板。UI几乎是空的，但已准备好添加。当我们创建一个项目，即使是空的UI，Android Studio也会自动生成显示UI的Java代码。因此，当我们将其添加到空的UI时，它已准备好显示。
- en: Let's create an **Empty Activity** project. This is almost the same process
    as in [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014), *Beginning Android
    and Java*, with one slight difference that I will point out.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个**空活动**项目。这几乎与[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*，开始Android和Java*中的过程相同，只有一个细微的差异，我会指出。
- en: 'If you have the project from [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer,* open, select **File** | **New**
    | **New Project…**. Alternatively, if you are on the Android Studio welcome screen,
    select **Start a new Android Studio project**. Then, proceed as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从[*第2章*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*，首次接触：Java，XML和UI设计师*中打开了项目，请选择**文件**
    | **新建** | **新项目…**。或者，如果您在Android Studio欢迎屏幕上，请选择**开始一个新的Android Studio项目**。然后，按照以下步骤进行：
- en: On the **Select a Project Template** window, select **Empty Activity**. This
    is the bit that is different from what we did in [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*,*
    *Beginning Android and Java*.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择项目模板**窗口上，选择**空活动**。这是与我们在[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*，开始Android和Java*中所做的不同之处。
- en: In the `Empty Activity App`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`空活动应用`中。
- en: The rest of the settings can be left at their defaults, so just click **Finish**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其余的设置可以保持默认，所以只需单击**完成**。
- en: Android Studio will generate all the code and the other project resources. Now,
    we can see what has been generated and relate it to what we already know about
    what to expect in the **Project Explorer** window.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio将生成所有的代码和其他项目资源。现在，我们可以看到已经生成了什么，并将其与我们已经知道的**项目资源管理器**窗口中的预期相联系。
- en: If the emulator is not already running, launch it by selecting **Tools** | **AVD
    Manager**, and then start your emulator in the **Your Virtual Devices** window.
    Run the app on the emulator by clicking the play button in the quick launch bar,
    as we have done a few times already for our previous project.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模拟器还没有运行，请通过选择**工具** | **AVD管理器**来启动它，然后在**您的虚拟设备**窗口中启动您的模拟器。通过单击快速启动栏中的播放按钮在模拟器上运行应用程序，就像我们之前为我们的上一个项目做了几次一样。
- en: 'Look at the app and notice how it is a little bit different from that of the
    first project. It is—well—empty: no menu at the top; no floating button at the
    bottom. It does, however, still have some text that says **Hello World!**, as
    can be seen in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看看应用程序，注意它与第一个项目有些不同。它是-嗯-空的：顶部没有菜单；底部没有浮动按钮。但是，它仍然有一些文字，说**Hello World!**，如下面的屏幕截图所示：
- en: '![Figure 3.1 – Hello world!'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 - 你好，世界！'
- en: '](img/Figure_3.01_B16773.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.01_B16773.jpg)'
- en: Figure 3.1 – Hello world!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 - 你好，世界！
- en: Now that we have a brand-new **Empty Activity** project, let's explore the files
    and folders that Android Studio has generated for us.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个全新的**空活动**项目，让我们来探索一下Android Studio为我们生成的文件和文件夹。
- en: Exploring an Empty Activity project
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索一个空活动项目
- en: Now, it is time to go on a deep dive into the files and folders of our app.
    This will save us lots of time and head-scratching later in the book. Please note,
    however, that there is no need to memorize where all these files go, and there
    is even less need to understand the code within the files. In fact, parts of the
    XML will remain a mystery even at the end of the book, but this will not stop
    you designing, coding, and releasing amazing apps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候深入了解我们应用程序的文件和文件夹了。这将节省我们很多时间和困惑，以后在书中。然而，请注意，没有必要记住所有这些文件的位置，甚至更不需要理解文件中的代码。事实上，即使在书的最后，XML的部分内容仍然是一个谜，但这不会阻止您设计、编码和发布令人惊叹的应用程序。
- en: 'In the following screenshot, look at the Project Explorer window as it is just
    after the project is created:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，看看项目资源管理器窗口，就在项目创建后：
- en: '![Figure 3.2 – Project Explorer window'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 - 项目资源管理器窗口'
- en: '](img/Figure_3.02_B16773.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.02_B16773.jpg)'
- en: Figure 3.2 – Project Explorer window
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 - 项目资源管理器窗口
- en: Notice the two arrows indicated in the previous screenshot? These, as you can
    probably guess, allow us to expand the `app` and `Gradle Scripts` folders. It
    is possible that your folders are already expanded. Why not try out the arrows,
    and expand and collapse them a few times?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前一个屏幕截图中指示的两个箭头？你可能已经猜到，这些箭头允许我们展开`app`和`Gradle Scripts`文件夹。可能你的文件夹已经展开了。为什么不尝试一下箭头，多次展开和折叠它们呢？
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We do not need to explore the `Gradle Scripts` folder in the context of this
    book. Gradle is a significant part of Android Studio, but its role is to hide
    from the user the quite complicated processes that Android Studio performs—things
    such as adding resource files, and compiling and building projects. Therefore,
    we don't need to dig into this any further. If, however, you decide to take Android
    to the next level, then getting a good understanding of Gradle and its relationship
    with Android Studio is time well invested.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的背景下，我们不需要探索`Gradle Scripts`文件夹。Gradle是Android Studio的重要组成部分，但其作用是向用户隐藏Android
    Studio执行的相当复杂的过程，例如添加资源文件，编译和构建项目等。因此，我们不需要进一步深入研究这一点。然而，如果您决定将Android提升到下一个水平，那么深入了解Gradle及其与Android
    Studio的关系是值得投资的时间。
- en: 'We will explore in detail the `app` folder. Click the arrow next to the `app`
    folder to expand its contents, and we will begin exploring. The first level of
    contents is shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细探讨`app`文件夹。单击`app`文件夹旁边的箭头以展开其内容，然后我们将开始探索。第一层内容如下屏幕截图所示：
- en: '![Figure 3.3 – Exploring the app folder'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 - 探索app文件夹'
- en: '](img/Figure_3.03_B16773.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.03_B16773.jpg)'
- en: Figure 3.3 – Exploring the app folder
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 - 探索app文件夹
- en: 'We have revealed four more folders: `manifests`, `java`, `java(generated)`,
    and `res`. Let''s look at all four, starting at the top.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经展示了另外四个文件夹：`manifests`、`java`、`java(generated)`和`res`。让我们从顶部开始查看所有四个文件夹。
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The style guidelines that Packt uses for its books suggest `this font` for filenames
    and folder names. As the files and folders that we are discussing are both files
    and folders, as well as appearing on the screen, I have opted for using just the
    latter font for consistency and because it is more compact, and I will use this
    option whenever the choice is ambiguous throughout the book.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Packt为其图书使用的样式指南建议使用`此字体`来表示文件名和文件夹名。由于我们讨论的文件和文件夹既是文件又是文件夹，并且出现在屏幕上，为了保持一致性并且更加紧凑，我选择只使用后者的字体，并且在整本书中在选择不明确的情况下都会使用这个选项。
- en: The manifests folder
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清单文件夹
- en: 'The `manifests` folder has just one file inside it. Expand the `manifests`
    folder and double-click the `AndroidManifest.xml` file. Notice that the file has
    been opened in the editor window, and a tab has been added so that we can easily
    switch back between this and other files. The next screenshot shows the new tab
    that has been added, as well as the XML code contained in the `AndroidManifest.xml`
    file within the `manifests` folder:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`manifests`文件夹里只有一个文件。展开`manifests`文件夹并双击`AndroidManifest.xml`文件。注意文件已在编辑窗口中打开，并且已添加了一个标签，这样我们就可以轻松地在这个文件和其他文件之间切换。下一个屏幕截图显示了已添加的新标签，以及`manifests`文件夹中`AndroidManifest.xml`文件中包含的XML代码：'
- en: '![Figure 3.4 – New tab added'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 - 添加新标签'
- en: '](img/Figure_3.04_B16773.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.04_B16773.jpg)'
- en: Figure 3.4 – New tab added
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - 添加新标签
- en: We don't need to understand everything in this file, but it is worth pointing
    out that we will make occasional amendments here—for example, when we need to
    ask the user for permission to access features of their device. We will also edit
    this file when we want to make a fullscreen app for immersivity, such as the drawing
    app that starts in [*Chapter 21*](B16773_21_ePub_RK.xhtml#_idTextAnchor366)*,*
    *Threads and Starting the Live Drawing App*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要理解文件中的一切，但值得指出的是，我们将偶尔在这里进行修改 - 例如，当我们需要请求用户访问其设备功能的权限时。当我们想要为沉浸式体验制作全屏应用程序时，我们还将编辑此文件，比如在[*第21章*](B16773_21_ePub_RK.xhtml#_idTextAnchor366)*,*
    *线程和启动实时绘图应用程序*中开始的绘图应用程序。
- en: Notice that the structure of the file is similar to the structure of the layout
    file we saw in the previous chapter—for instance, there are clearly denoted sections
    that start with `<section name` and end with `</section name>`. Real examples
    of this are `<application` and `</application>`, as well as `<activity` and `</activity>`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件的结构类似于我们在上一章中看到的布局文件的结构 - 例如，有明确定义的以`<section name`开头并以`</section name>`结束的部分。这样的真实例子有`<application`和`</application>`，以及`<activity`和`</activity>`。
- en: Indeed, the entire file contents, apart from the first line, are wrapped in
    `<manifest` and `</manifest>`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，除了第一行之外，整个文件内容都包含在`<manifest`和`</manifest>`中。
- en: Just as if we were entering the brackets of a calculation into a calculator,
    these opening and closing parts must match or the file will cause an error in
    our project. Android Studio indents (places tabs) in front of the lines to make
    the sections and their depth in this structure clearer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们输入计算的括号一样，这些开头和结尾部分必须匹配，否则文件将在我们的项目中引起错误。Android Studio在这些结构的前面缩进（放置制表符）以使这些部分及其深度更加清晰。
- en: A couple of specific parts of this code are worth noting, so I will point out
    some of the lines.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的一些特定部分值得注意，所以我会指出其中的一些行。
- en: 'The line shown next tells Android that the icon we want to show the user in
    their app drawer/home screen to launch the app is contained in the `mipmap` folder
    and is called `ic_launcher`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行告诉Android，我们想要在`mipmap`文件夹中显示给用户的图标来启动应用程序，它被称为`ic_launcher`：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will verify this for ourselves as we continue our exploration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续探索，我们将自己验证这一点。
- en: 'The next line has two aspects worth discussing. First, it denotes the name
    that we gave our app; and second, that name is contained as a `app_name`, as illustrated
    here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行有两个值得讨论的方面。首先，它表示我们给我们的应用程序的名称；其次，该名称作为`app_name`包含在这里：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In programming, including with Java and XML, a String is any alphanumeric value.
    We will learn loads more about Strings throughout the book, starting in [*Chapter
    7*](B16773_07_ePub_RK.xhtml#_idTextAnchor134), *Java Variables, Operators, and
    Expressions*. We can therefore guess that the alphanumeric value of the label
    of `app_name` is `Empty Activity App` because that is what we called the app when
    we created it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，包括Java和XML，在计算中，字符串是任何字母数字值。我们将在整本书中学到更多关于字符串的知识，从[*第7章*](B16773_07_ePub_RK.xhtml#_idTextAnchor134)开始，*Java变量、运算符和表达式*。因此，我们可以猜测`app_name`标签的字母数字值是`Empty
    Activity App`，因为这是我们创建应用程序时称呼它的名称。
- en: This might sound slightly odd, but we will see this file soon (and its label),
    and in later projects, we will add more labels and values to it. We will also
    come to understand the reasons why we add text to our apps in what might at this
    stage seem quite a convoluted manner.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有点奇怪，但我们很快就会看到这个文件（及其标签），在以后的项目中，我们将向其中添加更多的标签和值。我们还将了解为什么以这种在这个阶段似乎相当复杂的方式向我们的应用程序添加文本的原因。
- en: 'We could discuss every line in the `AndroidManifest.xml` file but we don''t
    need to. Let''s look at just two more, as they are related to each other. The
    line shown next indicates the name of our Activity, which Android Studio chose
    when we created the project. I have highlighted the Activity name here, just to
    make it stand out:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以讨论`AndroidManifest.xml`文件中的每一行，但我们不需要这样做。让我们再看两行，因为它们彼此相关。下一行显示了我们的Activity的名称，这是在我们创建项目时Android
    Studio选择的。我在这里突出显示了Activity的名称，只是为了让它更加突出：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And this next line, which appears within the `<activity` and `</activity>`
    tags, denotes that it is an attribute of `activity` and shows that this Activity
    is the one that should run when the app is started. It is `LAUNCHER`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的这一行，出现在`<activity`和`</activity>`标签内，表示它是`activity`的一个属性，并显示这个Activity是在启动应用程序时应该运行的那个。它是`LAUNCHER`：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This implies that our apps can have more than one Activity. Very often, if you
    have an app with multiple screens—such as a home screen, a settings screen, and
    so on—they are built from multiple `Activity` class **instances**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的应用程序可以有多个Activity。很多时候，如果您的应用程序有多个屏幕，比如主屏幕、设置屏幕等，它们是由多个`Activity`类的实例构建的。
- en: A note about `Activity` and `activity`. In XML, as with the `AndroidManifest`
    file, `activity` is in lowercase, but in Java the `Activity` class has an uppercase
    `A`. This is just convention and is nothing to be concerned about. As we have
    just seen, `activity` in XML has a `name` attribute with a value that refers to
    an instance of a Java `Activity`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Activity`和`activity`的说明。在XML中，就像`AndroidManifest`文件一样，`activity`是小写的，但在Java中，`Activity`类有一个大写的`A`。这只是一种约定，不值得担心。正如我们刚才看到的，XML中的`activity`具有一个`name`属性，其值指的是Java
    `Activity`的一个实例。
- en: Let's dig into the `java` folder. I wonder what we will find in there.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入`java`文件夹。我想知道我们会在那里找到什么。
- en: The java folder
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: java文件夹
- en: 'I apologize for the slightly sarcastic comment. We will, of course, find all
    the Java code. To begin with, this consists of just one file, but as our projects
    grow we will add more. Expand the `java` folder and you will find three more folders,
    as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于稍微讽刺的评论，我表示歉意。当然，我们会找到所有的Java代码。首先，这只包括一个文件，但随着我们的项目的增长，我们将添加更多。展开`java`文件夹，您会发现另外三个文件夹，如下面的截图所示：
- en: '![Figure 3.5 – Expand the java folder'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 - 展开java文件夹'
- en: '](img/Figure_3.05_B16773.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.05_B16773.jpg)'
- en: Figure 3.5 – Expand the java folder
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 展开java文件夹
- en: Throughout this book, we will only need one of these three folders—the top one.
    The names of these folders are composed of the package name (chosen when we created
    the app) and the app name, in all lowercase and with no spaces (also chosen when
    we created the app).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只需要这三个文件夹中的一个——顶部的那个。这些文件夹的名称由包名称（在创建应用程序时选择）和应用程序名称组成，全部小写且没有空格（也是在创建应用程序时选择的）。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The reason there is more than one folder with the same name is for advanced
    reasons to do with automated testing, which is beyond the scope of this book.
    Therefore, you can safely ignore folders that end with `(androidTest)` and `(test)`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个同名文件夹的原因是与自动化测试有关的高级原因，这超出了本书的范围。因此，你可以安全地忽略以`(androidTest)`和`(test)`结尾的文件夹。
- en: The only folder we are interested in during the course of this book is the top
    one, which for this app (on my screen) is `com.gamecodeschool.emptyactivityapp`.
    Depending upon your chosen package name and the name of the app we are currently
    working on, the folder name will change, but it will always be the top one that
    we need to access and add—or edit—the contents of.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们感兴趣的唯一文件夹是顶部的那个，在我的屏幕上是`com.gamecodeschool.emptyactivityapp`。根据你选择的包名称和我们当前正在工作的应用程序的名称，文件夹名称会发生变化，但我们始终需要访问和添加或编辑其内容的是顶部的那个。
- en: 'Expand the `com.gamecodeschool.emptyactivityapp` (or whatever yours is called)
    folder now to view its contents. In the next screenshot, you can see that the
    folder has just one file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在展开`com.gamecodeschool.emptyactivityapp`（或者你的文件夹名称）文件夹，查看其内容。在下一个截图中，你可以看到该文件夹只有一个文件：
- en: '![Figure 3.6 – com.gamecodeschool.emptyactivityapp folder'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6 – com.gamecodeschool.emptyactivityapp文件夹'
- en: '](img/Figure_3.06_B16773.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.06_B16773.jpg)'
- en: Figure 3.6 – com.gamecodeschool.emptyactivityapp folder
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – com.gamecodeschool.emptyactivityapp文件夹
- en: This file is `MainActivity.java`, although the file extension isn't shown in
    the project window even though it is in the tabs above the editor window. In fact,
    all the files in the `java/packagename.appname` folder will have a `.java` extension.
    If you double-click the `MainActivity.java` file, it will open in the editor window,
    although we could have just clicked the `MainActivity.java` tab above the editor
    window. As we add more Java files, knowing where they are kept will be useful.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是`MainActivity.java`，尽管项目窗口中没有显示文件扩展名，但它在编辑器窗口上方的标签中显示。事实上，`java/packagename.appname`文件夹中的所有文件都将有一个`.java`扩展名。如果双击`MainActivity.java`文件，它将在编辑器窗口中打开，尽管我们也可以只点击编辑器窗口上方的`MainActivity.java`标签。随着我们添加更多的Java文件，知道它们的位置将会很有用。
- en: Examine the `MainActivity.java` file, and you will see it is a simplified version
    of the Java file we worked with in the first project. It is the same except that
    there are fewer methods and less autogenerated code in the `onCreate` method.
    The methods are missing because the UI is simpler and therefore they are not needed,
    and Android Studio didn't generate them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`MainActivity.java`文件，你会发现它是我们在第一个项目中使用的Java文件的简化版本。它与原来的文件相同，只是方法更少，在`onCreate`方法中没有自动生成的代码。方法缺失是因为UI更简单，因此它们是不需要的，而且Android
    Studio没有生成它们。
- en: 'For reference, look at the contents of the `MainActivity.java` file in this
    next screenshot. I have outlined one line from the code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，看一下下一个截图中`MainActivity.java`文件的内容。我已经在代码中勾画了一行：
- en: '![Figure 3.7 – MainActivity.java file'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 – MainActivity.java文件'
- en: '](img/Figure_3.07_B16773.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.07_B16773.jpg)'
- en: Figure 3.7 – MainActivity.java file
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – MainActivity.java文件
- en: 'It still has the `onCreate` method that executes when the app is run by the
    user, but there is much less code in it and `onCreate` is the only method. Look
    at the last line of code in the `onCreate` method—we will discuss this before
    moving on to explore the `res` folder. Here is the line of code under discussion:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然具有在用户运行应用程序时执行的`onCreate`方法，但其中的代码要少得多，`onCreate`是唯一的方法。看一下`onCreate`方法中的最后一行代码——在继续探索`res`文件夹之前，我们将讨论这个。以下是讨论中的代码行：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code is calling a method named `setContentView` and it is passing some data
    into the `setContentView` method, for the code in the `setContentView` method
    to make use of. The data being passed to `setContentView` is `R.layout.activity_main`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 代码正在调用一个名为`setContentView`的方法，并且正在向`setContentView`方法传递一些数据，以便`setContentView`方法中的代码可以使用。传递给`setContentView`的数据是`R.layout.activity_main`。
- en: For now, I will just mention that the `setContentView` method is provided by
    the Android `R.layout.activity_main`?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我只想提一下`setContentView`方法是由Android提供的，`R.layout.activity_main`是什么？
- en: We will find out by exploring the `res` folder, but a quick mention of the `Java
    (generated)` folder so that we don't trouble ourselves with it as we progress.
    The first thing to note is that the folder is autogenerated the first time the
    app is run on the emulator or a real device, so if you haven't run the app, you
    won't see it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过探索`res`文件夹来了解，但是快速提一下`Java（生成的）`文件夹，这样我们在进展中不会为此烦恼。首先要注意的是，该文件夹是在模拟器或真实设备上首次运行应用程序时自动生成的，因此如果你还没有运行应用程序，你就看不到它。
- en: The Java (generated) folder
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java（生成的）文件夹
- en: This folder contains code generated by Android Studio and we do not need to
    concern ourselves with what goes in it. Even advanced users who might need it
    generally only use it for reference.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹包含了由Android Studio生成的代码，我们不需要关心其中的内容。即使是需要它的高级用户通常也只是用它作为参考。
- en: Let's get on to the `res` folder and that `R.layout.activity_main` code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论`res`文件夹和`R.layout.activity_main`代码。
- en: The res folder
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: res文件夹
- en: 'The `res` folder is where all the resources go. Left-click to expand the `res`
    folder, and we will examine what''s inside. Here is a screenshot of the top level
    of folders inside this folder:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`res`文件夹是所有资源的存放地。左键单击展开`res`文件夹，我们将检查里面的内容。这是该文件夹内顶层文件夹的截图：'
- en: '![Figure 3.8 – res folder'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.8 – res文件夹'
- en: '](img/Figure_3.08_B16773.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.08_B16773.jpg)'
- en: Figure 3.8 – res folder
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – res文件夹
- en: Let's begin at the top of the list, with the `drawable` folder.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从列表的顶部开始，看`drawable`文件夹。
- en: The res/drawable folder
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`res/drawable`文件夹'
- en: The name gives things away a little bit, but the `drawable` folder holds much
    more than just graphics. As we progress through the book, we will indeed add graphics
    to this folder. However, now, it holds just two files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称有点透露了一些东西，但`drawable`文件夹中包含的不仅仅是图形。随着我们在书中的进展，我们确实会向这个文件夹中添加图形。但是现在，它只包含两个文件。
- en: These files are `ic_launcher_foreground` and `ic_launcher_background`. We will
    not examine either file because we will never need to alter them, but I will just
    mention what they are.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是`ic_launcher_foreground`和`ic_launcher_background`。我们不会检查任何文件，因为我们永远不需要修改它们，但我会简单提一下它们是什么。
- en: If you open the files, you will see they are quite long and technical. They
    include what appear to be lists of coordinates, colors, and more besides. They
    are what is known as a **graphical mask**, used by Android to adapt/mask other
    graphics—specifically, in this case, the launcher icon of the app. The files give
    instructions to Android on how to adapt the app launcher icon.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开这些文件，你会发现它们非常长而且技术性很强。它们包括看起来是坐标、颜色等的列表。它们被称为**图形蒙版**，用于Android适应/遮罩其他图形—具体来说，在这种情况下，是应用程序的启动图标。这些文件向Android提供了关于如何调整应用程序启动图标的指令。
- en: This system is made available so that different device manufacturers can create
    their own masks to suit their own Android devices. The masks, which are in the
    `drawable` folder by default (`ic_launcher_foreground` and `ic_launcher_background`),
    are default adaptive masks that add visually pleasing shadows and depth to the
    launcher icon.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统是为了让不同的设备制造商可以创建适合自己Android设备的蒙版。这些蒙版默认位于`drawable`文件夹中（`ic_launcher_foreground`和`ic_launcher_background`），它们是默认的自适应蒙版，为启动图标添加了视觉上令人愉悦的阴影和深度。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the concept of adaptive icons is interesting to you, then you can see a full
    and very visual explanation at this link to the *Android Developers* website,
    at [https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive).
    You do not need to see this page to continue.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自适应图标的概念对你有吸引力，那么你可以在这个链接上看到*Android开发者*网站上的完整而非常直观的解释，网址为[https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive)。你不需要查看这个页面就可以继续。
- en: We know enough about the `drawable` folder for now, so let's move on to the
    `layout` folder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对`drawable`文件夹有足够的了解，让我们继续看`layout`文件夹。
- en: The res/layout folder
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`res/layout`文件夹'
- en: The `res` folder is where all the resources for your app go, such as icons,
    layouts (XML files), sounds, and strings. Let's take a closer look.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`res`文件夹是应用程序所有资源的存放处，如图标、布局（XML文件）、声音和字符串。让我们仔细看一下。'
- en: Expand the `layout` folder and you will see a layout file named `activity_main.xml`,
    and if you open it to view its contents, you will see it is much like the one
    we edited in the previous chapter. There is less in it this time because we generated
    an `ConstraintLayout` element, wrapping a `TextView` widget that says `Hello World!`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 展开`layout`文件夹，你会看到一个名为`activity_main.xml`的布局文件，如果你打开它查看内容，你会发现它与我们在上一章中编辑的文件非常相似。这次内容更少，因为我们生成了一个`ConstraintLayout`元素，包裹着一个写着`Hello
    World!`的`TextView`小部件。
- en: 'Be sure to look at the contents, but this is not the most interesting thing
    here. Look closely at the name of the file (without the XML file extension): `activity_main`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要查看内容，但这里最有趣的不是这个。仔细看文件的名称（不包括XML文件扩展名）：`activity_main`。
- en: 'Now, think back to the Java code in the `MainActivity.java` file. Here is the
    line of code that we said sets up the UI. I have highlighted a portion of the
    code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回想一下`MainActivity.java`文件中的Java代码。这是我们说过设置UI的代码行。我已经突出显示了一部分代码：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `R.layout.activity_main` code is indeed a reference to the `activity_main`
    file within the `res/layout` file. This is the connection between our Java code
    and our XML layout/design.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`R.layout.activity_main`代码确实是对`res/layout`文件夹中的`activity_main`文件的引用。这是我们的Java代码和XML布局/设计之间的连接。'
- en: Note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is a difference from the first project other than the contents of `activity_main.xml`—in
    the `layout` folder of the first project, there were multiple additional files.
    Later in this chapter, we will build another project using the same template we
    used in the first chapter (**Basic Activity**) to understand why.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`activity_main.xml`的内容之外，与第一个项目有所不同——在第一个项目的`layout`文件夹中，有多个额外的文件。在本章的后面，我们将使用第一章中使用的相同模板（**基本活动**）构建另一个项目，以了解原因。
- en: 'Before that, let''s explore the final two folders and all their sub-folders,
    starting with the next in the list: `mipmap`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，让我们探索最后两个文件夹及其所有子文件夹，从列表中的下一个开始：`mipmap`。
- en: The res/mipmap folder
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`res/mipmap`文件夹'
- en: 'The `mipmap` folder is straightforward—well, fairly. Expand the folder to see
    its contents, as illustrated in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`mipmap`文件夹很简单—嗯，相对简单。展开文件夹查看其内容，如下面的截图所示：'
- en: '![Figure 3.9 – mipmap folder'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.9 – mipmap文件夹'
- en: '](img/Figure_3.09_B16773.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.09_B16773.jpg)'
- en: Figure 3.9 – mipmap folder
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – mipmap文件夹
- en: 'Here, we can see two sub-folders: `ic_launcher` and `ic_launcher_round`. The
    contents of `ic_launcher` are graphics for the regular launcher icon we see in
    the app drawer/home screen of the device, and `ic_launcher_round` contains graphics
    for devices that use round icons. Double-click on one of the `.png` files from
    each folder to have a look. I have Photoshopped one of each side by side in this
    next screenshot to aid our discussion:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到两个子文件夹：`ic_launcher`和`ic_launcher_round`。`ic_launcher`的内容是我们在设备的应用程序抽屉/主屏幕中看到的常规启动图标的图形，而`ic_launcher_round`包含使用圆形图标的设备的图形。双击每个文件夹中的`.png`文件来查看。我在下一个截图中将它们并排放置，以帮助我们讨论：
- en: '![Figure 3.10 – Launcher icons'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.10 – 启动图标'
- en: '](img/Figure_3.10_B16773.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B16773.jpg)'
- en: Figure 3.10 – Launcher icons
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 启动图标
- en: You are probably also wondering why there are five `ic_launcher….png` files
    in each folder. The reason for this is it is good practice to provide icons suitably
    scaled for different screen sizes and resolutions. By providing an image with
    the `hdpi`, `mdpi`, `xhdpi`, `xxhdpi`, and `xxxhdpi` qualifications, this allows
    different Android devices to choose an icon that will look best for the user.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也想知道为什么每个文件夹中有五个`ic_launcher….png`文件。这是因为为不同的屏幕尺寸和分辨率提供合适缩放的图标是一个良好的做法。通过提供带有`hdpi`、`mdpi`、`xhdpi`、`xxhdpi`和`xxxhdpi`资格的图像，这允许不同的Android设备选择最适合用户的图标。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The letters `dpi` stand for `h`, `m`, `xh`, `xxh`, and `xxxh` prefixes stand
    for high, medium, extra high, extra extra high, and so on. These are known as
    **qualifiers**, and we will see as we progress that Android has lots of qualifiers
    that help us build our apps to suit the wide range of different Android devices.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 字母`dpi`代表高、中、超高、超超高等前缀。这些被称为**限定符**，随着我们的进展，我们会看到Android有很多限定符，帮助我们构建适合不同Android设备的应用程序。
- en: The final conundrum of the `mipmap` folder is that there is also an XML file
    in each of the two sub-folders. Open one of them up and you will see that they
    refer to the `ic_launcher_foreground` and `ic_launcher_background` files that
    we looked at in the `drawable` folder. This tells the Android device where to
    get details of the adaptive icons. These files are not required but they make
    the icons look better, as well as adding flexibility to their appearance.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`mipmap`文件夹的最后一个谜团是，每个子文件夹中也有一个XML文件。打开其中一个，你会看到它们引用了我们在`drawable`文件夹中看到的`ic_launcher_foreground`和`ic_launcher_background`文件。这告诉Android设备从哪里获取自适应图标的详细信息。这些文件不是必需的，但它们使图标看起来更好，同时增加了它们的灵活性。'
- en: We have one more folder and all its files, and then we will understand the structure
    of an Android app well.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个文件夹和它的所有文件，然后我们将充分理解Android应用程序的结构。
- en: The res/values folder
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: res/values文件夹
- en: Open the `res/values` folder to reveal three files that we will talk about briefly
    in turn. All these files interlink/refer to each other and/or other files that
    we have seen already.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`res/values`文件夹，可以看到我们将依次简要讨论的三个文件。所有这些文件相互关联/引用，或者与我们已经看过的其他文件相互关联。
- en: 'For the sake of completeness, here is a screenshot of the three files in the
    `res/values` folder:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，这里是`res/values`文件夹中三个文件的截图：
- en: '![Figure 3.11 – res/values folder'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.11 - res/values文件夹'
- en: '](img/Figure_3.11_B16773.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B16773.jpg)'
- en: Figure 3.11 – res/values folder
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 - res/values文件夹
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is also a `themes` folder inside the `values` folder, but we do not need
    to explore this in the context of this book.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`values`文件夹内还有一个`themes`文件夹，但在本书的上下文中我们不需要探索这个。
- en: The key to understanding is not in memorizing the connections, and certainly
    not trying to memorize or even understand the code in the files, but rather to
    get an appreciation of the interlinked nature of all the files and code we have
    seen so far.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 理解的关键不在于记忆连接，当然也不是试图记忆或理解文件中的代码，而是要欣赏到迄今为止我们所见过的所有文件和代码之间相互关联的本质。
- en: Let's glance inside the files one at a time.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次查看文件的内容。
- en: '**The colors.xml file**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色.xml文件
- en: 'We''ll look next at the contents of the `colors.xml` file, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将查看`colors.xml`文件的内容，如下所示：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the starting and closing tags take the usual pattern we have come
    to expect from XML files. There is an opening `<resources>` tag and a closing
    `</resources>` tag. As children of resources, there are three pairs of `<color>
    … </color>` tags.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，起始和结束标签采用了我们从XML文件中所期望的通常模式。有一个开放的`<resources>`标签和一个闭合的`</resources>`标签。作为资源的子元素，有三对`<color>
    … </color>`标签。
- en: Within each `color` tag is a `name` attribute and curious-looking code, consisting
    of numbers and letters. The `name` attribute is the name of a color. We will see
    in another of the files that follow that various names are referred to.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个`color`标签中都有一个`name`属性和看起来很奇怪的代码，由数字和字母组成。`name`属性是颜色的名称。我们将在接下来的文件中看到各种名称的引用。
- en: The code is what defines an actual color itself. Therefore, when the name is
    referred to, the color defined by the related code is what is produced on the
    screen. We will see where these names are referred to in a moment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 代码是定义实际颜色本身的东西。因此，当引用名称时，相关代码定义的颜色将显示在屏幕上。我们将在一会儿看到这些名称在哪里被引用。
- en: Note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code is called `0` through `9` and `a` through `f` can be used, giving
    16 possible values. If you want to find out more and play around with hex colors,
    visit [http://www.color-hex.com/color-wheel/](http://www.color-hex.com/color-wheel/).
    If you are intrigued about number bases such as hexadecimal (base 16), binary
    (base 2), and others, then look at the following article that explains them and
    talks about why humans typically use base 10: [https://betterexplained.com/articles/numbers-and-bases/](https://betterexplained.com/articles/numbers-and-bases/).
    You do not need to explore these articles to proceed with the book.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码称为`0`到`9`和`a`到`f`，共有16个可能的值。如果你想了解更多并尝试使用十六进制颜色，请访问[http://www.color-hex.com/color-wheel/](http://www.color-hex.com/color-wheel/)。如果你对十六进制（基数16）、二进制（基数2）等数字基感到好奇，那么请看下面的文章，它解释了它们，并谈到了为什么人类通常使用十进制：[https://betterexplained.com/articles/numbers-and-bases/](https://betterexplained.com/articles/numbers-and-bases/)。你不需要阅读这些文章来继续阅读本书。
- en: '**The strings.xml file**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串.xml文件
- en: Most modern apps are made for as wide an audience as possible. Furthermore,
    if an app is of a significant size or complexity, then roles in a software company
    are often divided up into many different teams—for example, the person writing
    the Java code for an Android app very possibly had little to do with designing
    the layout of the UI.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代应用程序都是为尽可能广泛的受众而制作的。此外，如果一个应用程序的规模或复杂性很大，那么软件公司中的角色通常被分成许多不同的团队 - 例如，为Android应用程序编写Java代码的人很可能与设计UI布局的人几乎没有关系。
- en: By separating the content of the app from the programming of the app it is easier
    to make changes at any time, and it is also possible to create content for multiple
    different spoken languages without altering the Java code for each.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将应用程序的内容与应用程序的编程分开，可以更容易地随时进行更改，还可以在不更改每个Java代码的情况下为多种不同的口头语言创建内容。
- en: 'Look at the content of the `strings.xml` file, reproduced next:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来看一下`strings.xml`文件的内容：
- en: '[PRE7]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can see that within the now-familiar `<resources>…</resources>` tags, we
    have a `<string>…</string>` tag. Within the `string` tag, there is an attribute
    called `name` with an `app_name` value, and then a further value of `Empty Activity
    App`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在现在熟悉的`<resources>…</resources>`标签中，有一个`<string>…</string>`标签。在`string`标签中，有一个名为`name`的属性，具有`app_name`值，然后是`Empty
    Activity App`的进一步值。
- en: 'Let''s look at one more line from the `AndroidManifest.xml` file we explored
    earlier in the *The manifests folder* section. The line in question follows next,
    but refer to the file itself in Android Studio if you want to see the line in
    its full context:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下我们之前在*清单文件夹*部分中探索过的`AndroidManifest.xml`文件中的一行。接下来是相关的代码行，但如果您想要查看完整的上下文中的代码行，请参考Android
    Studio中的文件本身：
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `android:label` attribute is being assigned a value of `@string/app_name`.
    In Android, `@string` refers to all the strings in the `strings.xml` file. In
    this specific app, the `string` attribute with the `app_name` label has an `Empty
    Activity App` value.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:label`属性被赋予了`@string/app_name`的值。在Android中，`@string`指的是`strings.xml`文件中的所有字符串。在这个特定的应用程序中，具有`app_name`标签的`string`属性具有`Empty
    Activity App`的值。'
- en: 'Therefore, the line of code in the `AndroidManifest.xml` file shown previously
    has the following effect on the screen when the app is running:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在应用程序运行时，`AndroidManifest.xml`文件中先前显示的代码行对屏幕产生以下影响：
- en: '![Figure 3.12 – AndroidManifest.xml file effect'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.12 – AndroidManifest.xml文件效果'
- en: '](img/Figure_3.12_B16773.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B16773.jpg)'
- en: Figure 3.12 – AndroidManifest.xml file effect
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – AndroidManifest.xml文件效果
- en: Although at first this system might seem convoluted, in practice it separates
    design and content from the coding, which is very efficient to do. If the designers
    of an app want to change its name, they simply edit the `strings.xml` file, with
    no need to interact with the Java programmers; and if all text in an app is provided
    as a string resource, then all of it can be easily altered and adapted as the
    project proceeds.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个系统乍看起来可能有些复杂，但在实践中，它将设计和内容与编码分开，这是非常高效的。如果应用程序的设计者想要更改其名称，他们只需编辑`strings.xml`文件，而无需与Java程序员进行交互；如果应用程序中的所有文本都是作为字符串资源提供的，那么在项目进行过程中所有这些文本都可以很容易地进行更改和调整。
- en: Android takes this flexibility further by allowing developers to use different
    files for string resources for each language/locale. This means that a developer
    can cater to a planet full of happy users with exactly the same Java code. A Java
    programmer just needs to refer to the `name` attribute of a string resource instead
    of **hardcoding** the text itself into the Java, and then other departments can
    design the text content and handle tasks such as language translation. We will
    make an app multilingual in [*Chapter 18*](B16773_18_ePub_RK.xhtml#_idTextAnchor320),
    *Localization*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Android通过允许开发人员为每种语言/区域设置不同的字符串资源文件来进一步提高了这种灵活性。这意味着开发人员可以为全球范围内的用户提供完全相同的Java代码。Java程序员只需引用字符串资源的`name`属性，而不是将文本本身硬编码到Java中，然后其他部门可以设计文本内容并处理诸如语言翻译之类的任务。我们将在[*第18章*](B16773_18_ePub_RK.xhtml#_idTextAnchor320)中使应用程序多语言化，*本地化*。
- en: Note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to hardcode the actual text directly into the Java code instead
    of using string resources, and from time to time we will do so for the sake of
    easily showing some Java without getting bogged down with editing or adding to
    the `strings.xml` file. We did this in the previous chapter when we made toast
    messages and output text to the console.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java代码中直接硬编码实际文本而不是使用字符串资源是可能的，我们会不时这样做，为了方便展示一些Java而不必陷入编辑或添加到`strings.xml`文件中。在上一章中，当我们制作吐司消息并将文本输出到控制台时，我们就这样做了。
- en: The Android system allows designers to choose a selection of colors, text, images,
    sound, and other resources as well, and easily produce a variation of their app
    for different regions of the world.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Android系统允许设计者选择一系列颜色、文本、图像、声音和其他资源，轻松地为世界各地的不同地区制作其应用程序的变体。
- en: For example, in Western culture, green can represent themes such as nature and
    correctness; and in many Middle Eastern countries, green represents fertility
    and is the color associated with Islam. While you might just about get away with
    distributing green in both these regions, your app will be perceived very differently.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在西方文化中，绿色可以代表自然和正确性的主题；在许多中东国家，绿色代表生育力，是与伊斯兰教相关的颜色。虽然您可能在这些地区分发绿色，但您的应用程序将被认为是非常不同的。
- en: If you then roll your app out into Indonesia, green is culturally despised among
    many (although not all) Indonesians. Next, you launch in China, and green has
    potential negative connotations to do with unfaithful spouses. It is a minefield
    that a typical Java programmer will never learn to navigate—and fortunately, because
    of the way we can divide up responsibilities in Android Studio, they don't need
    to learn about this.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将应用程序推出到印度尼西亚，绿色在许多（尽管不是所有）印度尼西亚人中是受到文化蔑视的。接下来，您在中国推出，绿色可能会带有与不忠有关的负面含义。这是一个典型的Java程序员永远不会学会应对的困难局面——幸运的是，由于我们可以在Android
    Studio中分担责任的方式，他们不需要了解这一点。
- en: Colors—and, therefore, styles and themes—is a very specialized topic. While
    we won't be exploring any more deeply than that quick foray into green, hopefully
    you see the benefit of a system that separates responsibility for programming,
    layout, color, and textual content.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色——因此，样式和主题——是一个非常专业的话题。虽然我们不会探索比绿色更深入的内容，但希望您能看到将编程、布局、颜色和文本内容的责任分开的好处。
- en: It is also worth mentioning that it is entirely possible to produce a fantastic
    app that is enjoyed by thousands—or even millions—of users without catering individually
    to every region. However, even if we are not going to employ teams of designers,
    translators, and cultural experts, we still must work within this system that
    was designed to enable them, and that is why we are going into such depth.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，即使我们不会雇佣设计师、翻译员和文化专家团队，也完全有可能制作出一款受到成千上万甚至数百万用户喜爱的精彩应用。然而，即使我们不打算雇佣设计师、翻译员和文化专家团队，我们仍然必须在设计的基础上进行工作，这就是为什么我们要深入研究。
- en: At this stage, we have a good grasp of what goes into an Android project and
    how the different aspects link together. Let's build one more app, not to go into
    it in the same detail but to see the differences that different app templates
    make to the underlying files that Android Studio generates.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经很好地掌握了Android项目的组成部分以及不同方面之间的联系。让我们再构建一个应用程序，不需要以相同的细节深入研究，而是看看不同的应用程序模板对Android
    Studio生成的基础文件造成的影响。
- en: Exploring the file and folder structure of the Basic Activity project template
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索基本活动项目模板的文件和文件夹结构
- en: The next-simplest project type with an autogenerated UI is a **Basic Activity**
    project. This is the same type of project that we created in [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*,
    Beginning Android and Java*. Feel free to open that project up now, but it is
    just as quick to generate a new one, and we can then also examine it without any
    of our alterations and additions clouding the discussions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动生成UI的下一个最简单的项目类型是**基本活动**项目。这是我们在[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)*《开始Android和Java》*中创建的相同类型的项目。现在可以打开该项目，但是生成一个新项目同样快速，而且我们也可以在没有任何修改和添加的情况下进行检查讨论。
- en: 'Proceed as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 继续如下操作：
- en: Run Android Studio and left-click the **Start a new Android Studio project**
    option.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Android Studio并左键单击**开始新的Android Studio项目**选项。
- en: The window that follows is the **Select a Project Template** window. Select
    **Basic Activity** and click **Next**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是**选择项目模板**窗口。选择**基本活动**，然后点击**下一步**。
- en: In the **Configure Your Project** window, set up the project as follows:![](img/B16773_03_Table_01.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置您的项目**窗口中，设置项目如下：
- en: Click the **Finish** button, and we will run the app to see what we have achieved.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮，我们将运行应用程序，看看我们取得了什么成就。
- en: Now, we can dig into the files. We won't look at everything in the same detail
    that we did for the **Empty Activity** project; instead, we will just look at
    the interconnectedness of the files and make a few comparisons.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以深入研究文件。我们不会像我们为**空活动**项目那样详细查看所有内容；相反，我们只会看看文件之间的相互联系，并进行一些比较。
- en: Exploring a Basic Activity project
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索基本活动项目
- en: Let's look at the Java code first in the `MainActivity.java` tab in the code
    editor. As already stated, a **Basic Activity** project has more to it than an
    **Empty Activity** project.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看代码编辑器中`MainActivity.java`选项卡中的Java代码。正如前面所述，**基本活动**项目比**空活动**项目更复杂。
- en: Note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can open as many instances of Android Studio as you like. If you want to
    compare projects side by side, select **File** | **Open** then choose the project,
    and when prompted select **New Window** to open the project, without closing any
    projects that are already open.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以打开尽可能多的Android Studio实例。如果要并排比较项目，请选择**文件** | **打开**，然后选择项目，当提示时选择**新建窗口**以打开项目，而不关闭已经打开的任何项目。
- en: The first thing to note is that there is some extra code in the `onCreate` method.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是`onCreate`方法中有一些额外的代码。
- en: The MainActivity.java file
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MainActivity.java文件
- en: 'I mentioned very briefly back in [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer,* these interconnections in the
    Java code and the XML code. Let''s look through the resource files and point out
    the XML files that this Java code points to.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[*第2章*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*《第一次接触：Java、XML和UI设计师》*中非常简要地提到了Java代码和XML代码中的这些相互联系。让我们浏览一下资源文件，并指出这些Java代码指向的XML文件。
- en: 'Here is the Java code shown next. I have slightly reformatted it to make it
    more readable in a book:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是下一个显示的Java代码。我稍微重新格式化了一下，以便在书中更易读：
- en: '[PRE9]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To understand this code fully will take quite a few more chapters, but to point
    out where this code uses files in the resources will only take a moment and will
    then leave us even more aware of the components that make up our projects.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解这段代码将需要更多的章节，但是指出这段代码使用资源文件的地方只需要一会儿，然后我们会更加了解构成我们项目的组件。
- en: The code refers to two resources. The first is a `Toolbar` resource and is referred
    to via `R.id.toolbar`. The second is a `FloatingActionBar` resource and refers
    to the XML files we will see soon via `R.id.fab`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 代码涉及两个资源。第一个是`Toolbar`资源，通过`R.id.toolbar`引用。第二个是`FloatingActionBar`资源，通过`R.id.fab`引用XML文件，我们很快就会看到。
- en: 'If we open the `res/layout` folder and the `java` folder in the project window,
    we can see that things look different from how they did in the **Empty Activity**
    project, as illustrated in the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在项目窗口中打开`res/layout`文件夹和`java`文件夹，我们会发现与**空活动**项目中的情况不同，如下图所示：
- en: '![Figure 3.13 – res/layout folder and java folder'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.13 – res/layout文件夹和java文件夹'
- en: '](img/Figure_3.13_B16773.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B16773.jpg)'
- en: Figure 3.13 – res/layout folder and java folder
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13 – res/layout文件夹和java文件夹
- en: There are now three Java files that were autogenerated, and four XML layout
    files that were autogenerated.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有三个自动生成的Java文件和四个自动生成的XML布局文件。
- en: Remember that this app has two screens—a first screen with a **Hello first fragment**
    message and a **Next** button; and a second screen, which simply had a **Previous**
    button.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个应用有两个屏幕——第一个屏幕上有一个**Hello first fragment**消息和一个**Next**按钮；第二个屏幕上只有一个**Previous**按钮。
- en: What is happening is that Android Studio is not only providing separate layout
    files for the appearance of each screen, but it is also providing separate Java
    files for the code that controls each screen. If you take what I just said at
    face value, you would, therefore, expect two layout files and two Java files,
    but we have more.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，Android Studio不仅为每个屏幕的外观提供单独的布局文件，而且还为控制每个屏幕的代码提供单独的Java文件。如果你只是表面上接受了我刚才说的话，因此你会期望有两个布局文件和两个Java文件，但我们有更多。
- en: As we already know, when the app is run by the user, the `onCreate` method of
    the `MainActivity.java` file is executed. This sets up the app, including the
    layout. The layout is in `activity_main.xml` but this file no longer controls
    the layout of the two main screens. It has elements that are consistent between
    both screens and delegates the layout to `content_main.xml`. The `content_main.xml`
    file then defines an area of the screen that it occupies and delegates the details
    that will appear in this area to yet another file, the `nav_graph.xml` file in
    the `res/navigation` folder. This `nav_graph.xml` file then determines which layout
    to use (`fragment_first.xml` or `fragment_second.xml`) and which corresponding
    Java file will control the layout (`FirstFragment.java` or `SecondFragment.java`).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经知道的，当用户运行应用程序时，`MainActivity.java`文件的`onCreate`方法被执行。这设置了应用程序，包括布局。布局在`activity_main.xml`中，但这个文件不再控制两个主要屏幕的布局。它具有两个屏幕之间一致的元素，并将布局委托给`content_main.xml`。然后，`content_main.xml`文件定义了它所占据的屏幕区域，并将将出现在此区域的细节委托给另一个文件，即`res/navigation`文件夹中的`nav_graph.xml`文件。然后，`nav_graph.xml`文件确定使用哪个布局（`fragment_first.xml`或`fragment_second.xml`）以及哪个相应的Java文件将控制布局（`FirstFragment.java`或`SecondFragment.java`）。
- en: 'At this stage, the apparent convolution might be overwhelming. It is my guess
    that this is one of the things could make learning Android development without
    any previous development experience so challenging. But the good news is this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，显而易见的复杂性可能会让人不知所措。我猜这可能是使得学习Android开发没有任何先前开发经验如此具有挑战性的原因之一。但好消息是：
- en: We don't need to remember and understand the details of all this interconnectedness.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要记住和理解所有这些相互关联的细节。
- en: We can build loads of apps without using any of it.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以构建大量的应用程序而不使用其中任何部分。
- en: As we progress through the book and work with the different pieces of this puzzle,
    we will become familiar with them a piece at a time.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着我们在书中的进展，并且与这个谜题的不同部分一起工作，我们将逐渐熟悉它们。
- en: 'Take a look at this next figure, which shows how the **Basic Activity** template
    app works:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下一个图，展示了**基本活动**模板应用程序的工作原理：
- en: '![Figure 3.14 – Basic Activity template'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.14 – 基本活动模板'
- en: '](img/Figure_3.14_B16773.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B16773.jpg)'
- en: Figure 3.14 – Basic Activity template
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 – 基本活动模板
- en: If the apparent complexity seems frustrating, then understanding why it is done
    like this might help. We have already talked about separating layouts from programming
    and further separating out text and graphics, to allow different teams to work
    on different aspects of an app. Well, now, we can further separate out not just
    navigation between different screens of our app—say, the main menu screen, the
    settings screen, and some other screen—but as the layouts and programming associated
    with each of these screens are separate, they too can be worked on simultaneously
    by separate teams. More on this as we progress through the chapters.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显而易见的复杂性看起来令人沮丧，那么了解为什么要这样做可能会有所帮助。我们已经讨论过将布局与编程分开，并进一步分离文本和图形，以允许不同的团队处理应用程序的不同方面。现在，我们可以进一步分离不仅是应用程序不同屏幕之间的导航，比如主菜单屏幕、设置屏幕和其他一些屏幕，而且与每个屏幕相关的布局和编程也是分开的，因此它们也可以由不同的团队同时进行。随着我们在章节中的进展，我们会更多地讨论这个问题。
- en: We will look into coding separate fragment layouts and separate Java code that
    controls each of them, as well as learning more about why we want to do it like
    this, from [*Chapter 24*](B16773_24_ePub_RK.xhtml#_idTextAnchor411), *Design Patterns,
    Multiple Layouts, and Fragments,* onward, and we will be digging deeper into interconnected
    layout files such as `activity_main.xml` and `content_main.xml` in the next chapter.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究编写单独的片段布局和控制每个片段的单独Java代码，以及从[*第24章*](B16773_24_ePub_RK.xhtml#_idTextAnchor411)开始，我们将更深入地了解为什么我们希望这样做，并且我们将在下一章更深入地研究`activity_main.xml`和`content_main.xml`等相互关联的布局文件。
- en: For now, let's look a little deeper at how the `MainActivity.java` file code
    links up with the `activity_main.xml` layout. We will see that although the `activity_main.xml`
    file is responsible for placing the toolbar and the floating action button, the
    `MainActivity.java` file is responsible for controlling what happens when the
    user interacts with them.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，让我们更深入地看一下`MainActivity.java`文件代码如何与`activity_main.xml`布局相连接。我们会发现，虽然`activity_main.xml`文件负责放置工具栏和浮动操作按钮，但`MainActivity.java`文件负责控制用户与它们交互时发生的事情。
- en: The activity_main.xml file
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: activity_main.xml文件
- en: For now, open up the `activity_main.xml` file, and you will see that there are
    some elements to represent both `toolbar` and `fab`. The Java code referring to
    these elements is setting up the toolbar and the floating action bar ready for
    use. The XML code, as we have come to expect, describes what they look like.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，打开`activity_main.xml`文件，你会看到有一些元素来代表`toolbar`和`fab`。引用这些元素的Java代码正在设置工具栏和浮动操作栏以供使用。XML代码，正如我们所期望的那样，描述了它们的外观。
- en: 'Here is the XML code for the toolbar:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工具栏的XML代码：
- en: '[PRE10]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that it refers to a toolbar, a color, and a style, as well as some other
    aspects.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它提到了工具栏、颜色和样式，以及其他一些方面。
- en: 'For clarity, this is the toolbar in the actual working app:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，这是实际工作应用程序中的工具栏：
- en: '![Figure 3.15 – Toolbar of the app'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.15 – 应用程序的工具栏'
- en: '](img/Figure_3.15_B16773.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B16773.jpg)'
- en: Figure 3.15 – Toolbar of the app
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 – 应用程序的工具栏
- en: 'Here is the XML code for the floating action button. I have slightly reformatted
    the first line of the code onto two lines so that it displays better in the printed
    version of this book:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是悬浮操作按钮的XML代码。我稍微重新格式化了代码的第一行，以便在本书的打印版本中更好地显示：
- en: '[PRE11]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice it has an `id` value of `fab`. It is through this `id` value that we
    gain access to the floating action button in our Java code—specifically, this
    line in `MainActivity.java`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它具有`fab`的`id`值。通过这个`id`值，我们可以在我们的Java代码中访问悬浮操作按钮，具体来说，是`MainActivity.java`中的这一行：
- en: '[PRE12]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After this line of code executes, the `fab` object in our Java code can now
    directly control the floating action button and all its attributes. In [*Chapter
    13*](B16773_13_ePub_RK.xhtml#_idTextAnchor228), *Anonymous Classes – Bringing
    Android Widgets to Life*, we will learn how to do this in detail.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行代码执行之后，我们的Java代码中的`fab`对象现在可以直接控制悬浮操作按钮及其所有属性。在[*第13章*](B16773_13_ePub_RK.xhtml#_idTextAnchor228)，*匿名类
    – 让Android小部件栩栩如生*中，我们将学习如何详细做到这一点。
- en: 'Here is the floating action button in the actual app:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实际应用程序中的悬浮操作按钮：
- en: '![Figure 3.16 – Floating action button'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.16 – 悬浮操作按钮'
- en: '](img/Figure_3.16_B16773.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.16_B16773.jpg)'
- en: Figure 3.16 – Floating action button
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 – 悬浮操作按钮
- en: 'I haven''t explained the code in detail, as there is no point at this stage.
    Just start to make a mental note of the interconnections, outlined here:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有详细解释代码，因为在这个阶段没有意义。只需开始在这里梳理相互关系：
- en: XML files can refer to other XML files.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML文件可以引用其他XML文件。
- en: Java can refer to XML files (and, as we will see soon, other Java files).
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java可以引用XML文件（以及，正如我们很快将看到的，其他Java文件）。
- en: And now, we have seen that in Java we can grab control of a specific part of
    the UI in an XML file via its `id` attribute.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们已经看到在Java中，我们可以通过其`id`属性抓取XML文件中特定部分的UI控制。
- en: We have seen enough from this file, so let's move on and dip into the remaining
    files.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从这个文件中看到足够的内容，所以让我们继续并深入了解剩下的文件。
- en: The extra methods in MainActivity.java
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MainActivity.java中的额外方法
- en: 'So, what do the methods do and when are they called, and by whom? The next
    difference is this extra method (again, slightly reformatted for presentation):'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些方法是做什么的，它们何时被调用，由谁调用？下一个区别是这个额外的方法（再次略微重新格式化以供展示）：
- en: '[PRE13]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code prepares (inflates) the menu that is defined in the `menu_main.xml`
    file, and just as with the `onCreate` method, the `onCreateOptionsMenu` method
    is an overridden method and is called by the operating system directly.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码准备（膨胀）了在`menu_main.xml`文件中定义的菜单，就像`onCreate`方法一样，`onCreateOptionsMenu`方法是一个重写的方法，由操作系统直接调用。
- en: 'Then, there is yet another method, shown next:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，接下来是另一个方法：
- en: '[PRE14]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This method is overridden as well, and it too is called directly by the operating
    system. It handles what happens when an item (option) from the menu is selected
    by a user. At the moment, it handles just one option—the settings option—and currently,
    it takes no action, as can be seen here:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法也被重写了，并且它也是由操作系统直接调用的。它处理用户选择菜单中的项目（选项）时发生的情况。目前，它只处理一个选项——设置选项——并且目前不执行任何操作，如下所示：
- en: '[PRE15]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This determines whether any options from the `return true` code executes, and
    control is returned to whatever part of the app was executing before it was interrupted
    by a user clicking the **Settings** menu option.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这确定了`return true`代码是否执行任何选项，并且控制是否返回到被用户点击**设置**菜单选项中断的应用程序的任何部分执行之前。
- en: We know nearly enough for now. Don't worry about memorizing all these connections.
    We will be coming back to each connection, investigating more deeply, and cementing
    our understanding of each.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经知道了几乎足够的知识。不要担心记住所有这些连接。我们将回到每个连接，进行更深入的调查，并巩固我们对每个连接的理解。
- en: Now, we can take a closer look at the Android emulator.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更仔细地看一下Android模拟器。
- en: Exploring the Android emulator
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Android模拟器
- en: As we progress, it helps to be familiar with exactly how to use the Android
    emulator. If you haven't used the latest version of Android, some of the ways
    even simple tasks are executed (such as viewing all the apps) can be different
    from how your current device works. In addition, we want to know how to use the
    extra controls that come with all emulators.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的进展，熟悉如何使用Android模拟器会有所帮助。如果您还没有使用最新版本的Android，甚至执行一些简单任务的方式（例如查看所有应用程序）可能与您当前的设备工作方式不同。此外，我们想知道如何使用所有模拟器附带的额外控件。
- en: Emulator control panel
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟器控制面板
- en: 'You probably noticed the mini control panel that appears beside the emulator
    when you run it. Let''s go through some of the most useful controls. Look at this
    screenshot of the emulator control panel. I have annotated it to aid discussion
    of it:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到当您运行模拟器时，旁边会出现一个迷你控制面板。让我们来看一些最有用的控件。看一下模拟器控制面板的截图。我已经在上面加了注释，以帮助讨论它：
- en: '![Figure 3.17 – Emulator control panel'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.17 – 模拟器控制面板'
- en: '](img/Figure_3.17_B16773.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.17_B16773.jpg)'
- en: Figure 3.17 – Emulator control panel
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 – 模拟器控制面板
- en: 'I will just mention the more obvious controls as follows, and go into a bit
    more depth when necessary:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我将简要提及更明显的控件，并在必要时进行更深入的讨论：
- en: These are the window controls. Minimize or close the emulator window.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些是窗口控件。最小化或关闭模拟器窗口。
- en: From top to bottom, power off the emulator, simulating powering off the actual
    device. The next two icons raise and lower the volume.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上到下，关闭模拟器，模拟关闭实际设备的电源。接下来的两个图标分别提高和降低音量。
- en: These two buttons allow you to rotate the emulator left and right. This means
    you can test what your app looks like in all orientations, as well as how it handles
    orientation changes while the app is running. The icons immediately below these
    take a screenshot and zoom in, respectively.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个按钮允许您将模拟器向左和向右旋转。这意味着您可以测试您的应用程序在所有方向下的外观，以及在应用程序运行时如何处理方向更改。这两个图标立即下方的图标分别是截图和放大。
- en: These icons simulate the back button and home button, and viewing running apps.
    Have a play with these buttons as we will need to use them from time to time,
    including in [*Chapter 6*](B16773_06_ePub_RK.xhtml#_idTextAnchor119), *The Android
    Lifecycle*.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些图标模拟了返回按钮和主页按钮，以及查看正在运行的应用程序。请尝试一下这些按钮，因为我们将不时需要使用它们，包括在[*第6章*](B16773_06_ePub_RK.xhtml#_idTextAnchor119)中，*Android生命周期*。
- en: Press this button to launch the **Advanced Settings** menu, where you can interact
    with things such as sensors, the **Global Positioning System** (**GPS**), the
    battery, the fingerprint reader, and more. Have a play around with some of these
    settings if you are curious.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下此按钮以启动**高级设置**菜单，在那里您可以与传感器、**全球定位系统**（**GPS**）、电池、指纹识别器等进行交互。如果您感兴趣，可以尝试一些这些设置。
- en: Let's have a play with the emulator itself.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来玩一下模拟器本身。
- en: Using the emulator as a real device
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将模拟器用作真实设备
- en: The emulator can emulate every feature of a real phone, so it would be possible
    to write a whole book on using it. If you want to write apps that your users love,
    then understanding a whole range of Android devices is well worth taking the time
    to do. I just want to point out a few of the most basic features here, because
    without these basic interactions it will be hard to follow along with the book.
    Furthermore, if you have an older Android device, then some essential basics (such
    as accessing the app drawer) have changed and you might be left a little baffled.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器可以模拟真实手机的每个功能，因此可以写一本关于使用它的整本书。如果您想要编写用户喜爱的应用程序，那么了解各种Android设备是值得花时间去做的。我只想在这里指出一些最基本的功能，因为没有这些基本的交互，将很难跟上本书的内容。此外，如果您有一部较旧的Android设备，那么一些基本的功能（如访问应用程序抽屉）已经发生了变化，您可能会感到有些困惑。
- en: Accessing the app drawer
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问应用程序抽屉
- en: 'Hold the mouse cursor on the bottom of the home screen and drag upward to access
    the app drawer (all the apps). The following screenshot shows this action halfway
    through:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标光标放在主屏幕底部并向上拖动以访问应用程序抽屉（所有应用程序）。下面的截图显示了这个动作进行到一半的情况：
- en: '![Figure 3.18 – Drag upwards to access app drawer'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.18 - 向上拖动以访问应用程序抽屉'
- en: '](img/Figure_3.18_B16773.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.18_B16773.jpg)'
- en: Figure 3.18 – Drag upwards to access app drawer
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 - 向上拖动以访问应用程序抽屉
- en: Now, you can run any app installed on the emulator. Note that when you run one
    of your apps through Android Studio, it remains installed on the emulator and
    is therefore runnable from the app drawer. However, every change you make to the
    app in Android Studio will require you to run/install the app again by clicking
    the play button on the Android Studio quick launch bar—as we have been doing.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以运行模拟器上安装的任何应用程序。请注意，当您通过Android Studio运行您的应用程序之一时，它将保留在模拟器上安装，并且因此可以从应用程序抽屉中运行。但是，您在Android
    Studio中对应用程序所做的每一次更改都需要您再次点击Android Studio快速启动栏上的播放按钮来运行/安装应用程序 - 就像我们一直在做的那样。
- en: Viewing active apps and switching between apps
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看活动应用程序并在应用程序之间切换
- en: 'To view active apps, you can use the emulator control panel, the square labeled
    as number **4** on the screenshot of the emulator control panel (*Figure 3.17*).
    To access the same option using the phone screen (as you would have to do on a
    real device), swipe up, just as when accessing the app drawer, but do so only
    for about one quarter the length of the screen. This process is illustrated in
    the following screenshot:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看活动应用程序，您可以使用模拟器控制面板，即模拟器控制面板截图上标有数字**4**的方块（*图3.17*）。要使用手机屏幕访问相同的选项（就像在真实设备上一样），向上滑动，就像访问应用程序抽屉时一样，但只需滑动大约屏幕长度的四分之一。这个过程在下面的截图中有所说明：
- en: '![Figure 3.19 – Swipe up'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19 - 向上滑动'
- en: '](img/Figure_3.19_B16773.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.19_B16773.jpg)'
- en: Figure 3.19 – Swipe up
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 - 向上滑动
- en: You can now swipe left and right through recent apps, swipe an app up to close
    it, or tap the back button to return to what you were doing before you viewed
    this option. Do try this out as we will use these basic features quite often.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过最近的应用程序向左和向右滑动，向上滑动应用程序以关闭它，或者点击返回按钮返回到您在查看此选项之前所做的事情。请尝试一下，因为我们经常会使用这些基本功能。
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Remember that the goal of this chapter was familiarization with the system/structure
    of Android/an Android project? Android projects are a sometimes-complex interweaving
    of Java and a multitude of resource files. Resource files can contain XML to describe
    our layouts, textual content, styles, and colors, as well as images. Resources
    can be produced to target different languages and regions of the world. Other
    resource types that we will see and use throughout the book include themes and
    sound effects.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，本章的目标是熟悉Android/Android项目的系统/结构。Android项目是Java和多种资源文件的交织。资源文件可以包含XML来描述我们的布局、文本内容、样式和颜色，以及图像。资源可以针对世界各地的不同语言和地区进行生产。我们将在本书中看到和使用的其他资源类型包括主题和音效。
- en: It is not important to remember all the different ways in which different resource
    files and Java files are interconnected. It is only important to realize that
    they are, and be able to examine files of various types and realize when they
    are dependent on code in another file. Whenever we create connections from our
    Java code to the XML code, I will always point out details of the connection again.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要记住不同资源文件和Java文件之间的各种连接方式。重要的是要意识到它们之间的联系，并能够检查各种类型的文件，并意识到它们何时依赖于另一个文件中的代码。每当我们从Java代码创建与XML代码的连接时，我都会再次指出连接的细节。
- en: We do not need to learn XML as well as Java, but we will become a little bit
    familiar with it. Java will be the focus of this book but our Java will frequently
    refer to the XML code, so understanding and having seen some examples of the interconnections
    will stand you in good stead to make faster progress.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要学习XML和Java，但我们会对它有一点点了解。Java将是本书的重点，但我们的Java经常会涉及XML代码，因此理解并看到一些互连的示例将有助于您更快地取得进展。
- en: We have also explored the emulator to get the most out of it when testing our
    apps.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探索了模拟器，以便在测试我们的应用程序时充分利用它。
- en: In the next chapter, we will build two custom layouts using two different Android
    layout schemes. We will also write some Java code so that we can switch between
    them with the tap of a button.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用两种不同的Android布局方案构建两个自定义布局。我们还将编写一些Java代码，以便我们可以通过点击按钮来在它们之间切换。
