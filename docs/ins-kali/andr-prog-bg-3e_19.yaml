- en: '*Chapter 19*: Animations and Interpolations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第19章*：动画和插值'
- en: Here, we will see how we can use the `Animation` class to make our UI a little
    less static and a bit more interesting. As we have come to expect, the Android
    API will allow us to do some quite advanced things with relatively straightforward
    code, and the `Animation` class is no different.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何使用`Animation`类使我们的UI变得不那么静态，更有趣一些。正如我们所期望的那样，Android API将允许我们用相对简单的代码做一些相当先进的事情，`Animation`类也不例外。
- en: 'This chapter can be approximately divided into these parts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章大致可以分为以下几个部分：
- en: An introduction to how animations in Android work and are implemented
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了Android中动画的工作原理和实现方式
- en: An introduction to a UI widget we haven't explored yet, `SeekBar`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了一个我们尚未探索的UI小部件，`SeekBar`
- en: Creating a working animation app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个工作动画应用程序
- en: First, let's explore how animations in Android work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们探索一下Android中的动画是如何工作的。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章中的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2019)。
- en: Animations in Android
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android中的动画
- en: The normal way to create an animation in Android is through XML. We can write
    XML animations and then load and play them in Java, on a specified UI widget.
    So, for example, we can write an animation that fades in and out five times over
    3 seconds, then play that animation on an `ImageView` or any other widget. We
    can think of these XML animations as a script as they define the type, order,
    and timing.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中创建动画的正常方式是通过XML。我们可以编写XML动画，然后在Java中加载和播放它们，放在指定的UI小部件上。因此，例如，我们可以编写一个动画，在3秒内淡入淡出五次，然后在`ImageView`或任何其他小部件上播放该动画。我们可以将这些XML动画看作脚本，因为它们定义了类型、顺序和时间。
- en: Let's explore some of the different properties we can assign to our animations,
    then how to use them in our Java code, and finally, we can make a neat animations
    app to try it all out.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一下我们可以分配给动画的一些不同属性，然后如何在我们的Java代码中使用它们，最后，我们可以制作一个漂亮的动画应用程序来尝试一切。
- en: Designing cool animations in XML
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在XML中设计酷炫的动画
- en: We have learned that XML can be used to describe animations as well as UI layouts,
    but let's find out exactly how. We can state the properties of an animation that
    describe the starting and ending appearance of a widget. The XML can then be loaded
    by our Java code by referencing the name of the XML file that contains it and
    turning it into a usable Java object, again not unlike a UI layout.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了XML不仅可以用来描述UI布局，还可以用来描述动画，但让我们来看看具体是如何做到的。我们可以陈述动画的属性，描述小部件的起始和结束外观。然后我们的Java代码可以通过引用包含它的XML文件的名称并将其转换为可用的Java对象来加载XML，这与UI布局非常相似。
- en: Here is a quick look at some of the animation property pairs we can state to
    create an animation. Straight after we have looked at some XML, we will see how
    to use it in our Java.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们快速浏览一下一些动画属性对，我们可以陈述以创建动画。在我们查看了一些XML之后，我们将看到如何在Java中使用它。
- en: Fading in and out
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 淡入淡出
- en: 'Alpha is the measure of transparency. So, by stating the starting `fromAlpha`
    and ending `toAlpha` values, we can fade items in and out. A value of `0.0` is
    invisible and `1.0` is an object''s normal appearance. Steadily moving between
    the two makes a fading-in effect:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha是透明度的度量。因此，通过陈述起始的`fromAlpha`和结束的`toAlpha`值，我们可以淡入淡出物品。值为`0.0`是不可见的，而`1.0`是对象的正常外观。在两者之间稳定移动会产生淡入效果：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Moving
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动
- en: We can move an object within our UI by using a similar technique. `fromXDelta`
    and `toXDelta` can have their values set as a percentage of the size of the object
    being animated.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过类似的技术在我们的UI中移动一个对象。`fromXDelta`和`toXDelta`的值可以设置为被动画化对象大小的百分比。
- en: 'The following code moves an object from left to right at a distance equal to
    the width of the object itself:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使一个对象从左到右移动，距离等于对象本身的宽度：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition, there are the `fromYDelta` and `toYDelta` properties for animating
    up and down.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有用于上下动画的`fromYDelta`和`toYDelta`属性。
- en: Scaling or stretching
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩放或拉伸
- en: '`fromXScale` and `toXScale` will increase or decrease the scale of an object.
    As an example, the following code will change the object, running the animation
    from normal size to invisible:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`fromXScale`和`toXScale`将增加或减少对象的比例。例如，以下代码将改变对象，使动画从正常大小到不可见：'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As another example, we could shrink the object to a tenth of its usual size
    using `android:fromYScale="0.1"` or make it 10 times bigger using `android:fromYScale="10.0"`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我们可以使用`android:fromYScale="0.1"`将对象缩小到其通常大小的十分之一，或者使用`android:fromYScale="10.0"`将其放大十倍。
- en: Controlling the duration
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制持续时间
- en: Of course, none of these animations would be especially interesting if they
    just instantly arrived at their conclusion. To make our animations more interesting,
    we can, therefore, set their duration in milliseconds. A millisecond is one-thousandth
    of a second. We can also make the timing easier, especially in relation to other
    animations, by setting `startOffset`, also in milliseconds.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果这些动画只是瞬间到达它们的结论，那么它们中的任何一个都不会特别有趣。因此，为了使我们的动画更有趣，我们可以设置它们的持续时间（以毫秒为单位）。毫秒是一秒的千分之一。我们还可以通过设置`startOffset`（也以毫秒为单位）来使时间更容易，特别是与其他动画相关联。
- en: 'The next code would begin an animation one-third of a second after we started
    it and it would take two-thirds of a second to complete:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将在我们开始动画的1/3秒后开始动画，并且需要2/3秒才能完成：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Rotating animations
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转动画
- en: 'If you want to spin something around, just use `fromDegrees` and `toDegrees`.
    This next code, probably predictably, will spin a widget around in a complete
    circle because, of course, there are 360 degrees in a circle:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使某物旋转，只需使用`fromDegrees`和`toDegrees`。下面的代码可能会让小部件在一个完整的圆圈中旋转，因为当然，一个圆圈有360度：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Repeating animations
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重复动画
- en: Repetition might be important in some animations, perhaps a wobble or shake
    effect, so we can add a `repeatCount` property. In addition, we can specify how
    the animation is repeated by setting `repeatMode`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些动画中，重复可能很重要，也许是一种摇摆或抖动效果，所以我们可以添加一个 `repeatCount` 属性。此外，我们可以通过设置 `repeatMode`
    来指定动画的重复方式。
- en: 'The following code would repeat an animation 10 times, each time reversing
    the direction of the animation. The `repeatMode` property is relative to the current
    state of the animation. What this means is that if you, for example, rotated a
    button from 0 to 360 degrees, the second part of the animation (the first repeat)
    would rotate the other way from 360 back to 0\. The third part of the animation
    (the second repeat) would again reverse and rotate from 0 to 360:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将重复一个动画 10 次，每次都会改变动画的方向。`repeatMode` 属性是相对于动画的当前状态的。这意味着，如果你，例如，将一个按钮从
    0 度旋转到 360 度，动画的第二部分（第一次重复）将从 360 度反向旋转回到 0。动画的第三部分（第二次重复）将再次反向旋转，从 0 度到 360 度：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using the 360-degree spin example, the preceding code would spin a widget through
    360 degrees to the right, then back 360 degrees to the left, five times. This
    is 10 repeats, reversing after each.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 360 度旋转的例子，前面的代码将使一个小部件向右旋转 360 度，然后再向左旋转 360 度，重复五次。这是 10 次重复，每次都会反向旋转。
- en: Combining an animation's properties with set
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将动画的属性与 set 结合
- en: 'To combine groups of these effects, we need to use `set`. This code shows how
    we can combine all the previous code snippets we have just seen into an actual
    XML animation that will compile:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要结合这些效果的组，我们需要使用 `set`。这段代码展示了我们如何将刚刚看到的所有先前代码片段组合成一个实际的 XML 动画，它将编译：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We still haven't seen any Java with which to bring these animations to life.
    Let's fix that now.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们还没有看到任何 Java 代码来使这些动画生动起来。让我们现在来解决这个问题。
- en: Instantiating animations and controlling them with Java code
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化动画并用 Java 代码控制它们
- en: 'This next snippet of Java code shows how we would declare an object of the
    `Animation` type, initialize it with an animation contained in an XML file named
    `fade_in.xml`, and start the animation on an `ImageView` widget. Soon we will
    do this in a project and see where to put the XML animations as well:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 Java 代码片段展示了我们如何声明一个 `Animation` 类型的对象，用一个名为 `fade_in.xml` 的 XML 文件中的动画对其进行初始化，并在一个
    `ImageView` 小部件上启动动画。很快我们将在一个项目中这样做，并看看在哪里放置 XML 动画：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We already have quite a powerful arsenal of animations and control features
    for things such as timing. But the Android API gives us a little bit more than
    this as well.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了相当强大的动画和控制功能，比如时间控制。但是 Android API 还给了我们更多。
- en: More animation features
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多动画特性
- en: We can listen for the status of animations much as we can listen for clicks
    on a button. We can also use **interpolators** to make our animations more life-like
    and pleasing. Let's look at listeners first.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以监听动画的状态，就像我们可以监听按钮的点击一样。我们还可以使用 **插值器** 来使我们的动画更加生动和愉悦。让我们先看看监听器。
- en: Listeners
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监听器
- en: If we implement the `AnimationListener` interface, we can indeed listen to the
    status of animations by overriding the three methods that tell us when something
    has occurred. We could then act based on these events.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们实现 `AnimationListener` 接口，我们确实可以通过覆盖告诉我们发生了什么的三种方法来监听动画的状态。然后我们可以根据这些事件来采取行动。
- en: '`OnAnimationEnd` announces the end of an animation, `onAnimationRepeat` is
    called each and every time an animation begins a repeat, and perhaps predictably,
    `onAnimationStart` is called when an animation has started animating. This might
    not be the same time as when `startAnimation` is called if `startOffset` is set
    in the animation''s XML:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnAnimationEnd` 宣布动画结束，`onAnimationRepeat` 每次动画开始重复时调用，也许可以预料到，`onAnimationStart`
    在动画开始动画时调用。如果在动画的 XML 中设置了 `startOffset`，这可能不是 `startAnimation` 被调用的时间：'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will see how `AnimationListener` works in the animation demo app, as well
    as putting another widget, `SeekBar`, into action.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在动画演示应用中看到 `AnimationListener` 是如何工作的，以及如何将另一个小部件 `SeekBar` 付诸实践。
- en: Animation interpolators
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画插值器
- en: If you can think back to high school, you might remember exciting lessons about
    calculating acceleration. If we animate something at a constant speed, then at
    first glance, things might seem OK. If we then compare the animation to another
    that uses gradual acceleration, then the latter will almost certainly be more
    pleasing to watch.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能回想起高中时的一些激动人心的关于计算加速度的课程，你可能会记得。如果我们以恒定的速度对某物进行动画，乍一看，事情可能看起来还不错。如果我们将动画与另一个使用渐进加速的动画进行比较，那么后者几乎肯定会更令人愉悦。
- en: It is possible that if we were not told that the only difference between the
    two animations was that one used acceleration and the other didn't, we wouldn't
    be able to say why we preferred it. Our brains are more receptive to things that
    conform to the norms of the world around us. This is why adding a bit of real-world
    physics such as acceleration and deceleration improves our animations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能，如果我们没有被告知两个动画之间唯一的区别是一个使用了加速度，另一个没有，我们可能无法说出为什么我们更喜欢它。我们的大脑更容易接受符合我们周围世界规范的事物。这就是为什么添加一点真实世界的物理学，比如加速度和减速度，会改善我们的动画。
- en: The last thing we want to do, however, is start doing a bunch of mathematical
    calculations just to slide a button onto the screen or spin some text in a circle.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们最不想做的事情就是开始做一堆数学计算，只是为了将一个按钮滑动到屏幕上或者让一些文本在圆圈中旋转。
- en: This is where **interpolators** come in. They are animation modifiers that we
    can set in a single line of code within our XML.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 **插值器** 的用武之地。它们是我们可以在 XML 中的一行代码中设置的动画修改器。
- en: 'Some examples of interpolators are `accelerate_interpolator` and `cycle_interpolator`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插值器的例子是 `accelerate_interpolator` 和 `cycle_interpolator`：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will put some interpolators, along with some XML animations and the related
    Java code, into action next.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将把一些插值器，以及一些 XML 动画和相关的 Java 代码，付诸实践。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can learn more about interpolators and the Android `Animation` class on
    the developer website here: [http://developer.android.com/guide/topics/resources/animation-resource.html](http://developer.android.com/guide/topics/resources/animation-resource.html).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在开发者网站上了解更多关于插值器和Android `Animation`类的信息：[http://developer.android.com/guide/topics/resources/animation-resource.html](http://developer.android.com/guide/topics/resources/animation-resource.html)。
- en: Animation demo app – introducing SeekBar
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画演示应用程序 - 介绍SeekBar
- en: That's enough theory, especially with something that should be visual. Let's
    build an animation demo app that explores everything we have just discussed and
    a bit more.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就够了理论，尤其是对于应该是视觉的东西。让我们构建一个动画演示应用程序，探索我们刚刚讨论过的一切以及更多内容。
- en: This app involves small amounts of code in lots of different files. Therefore,
    I have tried to make it plain which code is in which file, so you can keep track
    of what is going on. This will make the Java we write for this app more understandable
    as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序涉及大量不同文件中的少量代码。因此，我已经尽量明确哪些代码在哪个文件中，这样你就可以跟踪发生了什么。这也将使我们为这个应用程序编写的Java更容易理解。
- en: The app will demonstrate rotations, fades, translations, animation events, interpolations,
    and controlling duration with a `SeekBar` widget. The best way to explain what
    the `SeekBar` widget does is to build it and then watch it in action.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将演示旋转、淡入淡出、平移、动画事件、插值器和使用`SeekBar`小部件控制持续时间。解释`SeekBar`小部件的最佳方法是构建它，然后观察它的运行。
- en: Laying out the animation demo
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局动画演示
- en: Create a new project called `Animation Demo` using the **Empty Activity** template,
    leaving all the other settings at their defaults. As usual, should you wish to
    speed things up by copy and pasting the layout, the Java code, or the animation
    XML, it can all be found in the [*Chapter 19*](B16773_19_ePub_RK.xhtml#_idTextAnchor331)
    folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**空活动**模板创建一个名为`Animation Demo`的新项目，将所有其他设置保持默认。如果您希望通过复制和粘贴布局、Java代码或动画XML来加快速度，可以在[*第19章*](B16773_19_ePub_RK.xhtml#_idTextAnchor331)文件夹中找到所有内容。
- en: 'Use the following reference screenshot of the finished layout to help guide
    you through the next steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用完成布局的下一个参考截图来帮助你完成接下来的步骤：
- en: '![Figure 19.1 – Finished layout'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.1 - 完成的布局'
- en: '](img/Figure_19.1_B16773.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.1_B16773.jpg)'
- en: Figure 19.1 – Finished layout
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.1 - 完成的布局
- en: 'Here is how to lay out the UI for this app:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为此应用程序布局UI的方法：
- en: Open `activity_main.xml` in the design view of the editor window.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器窗口的设计视图中打开`activity_main.xml`。
- en: Delete the default `TextView`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除默认的`TextView`。
- en: Add an `ImageView` widget to the top-center of the layout. Use the previous
    reference screenshot to guide you. Use `@mipmap/ic_launcher` to show the Android
    robot in the `ImageView` widget when prompted to do so by selecting **Project**
    | **ic_launcher** in the pop-up **Resources** window.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在布局的顶部中心添加一个`ImageView`小部件。使用之前的参考截图来指导你。在弹出的**资源**窗口中选择**项目** | **ic_launcher**，使用`@mipmap/ic_launcher`在提示时在`ImageView`小部件中显示Android机器人。
- en: Set the `id` property of the `ImageView` widget to `imageView`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ImageView`小部件的`id`属性设置为`imageView`。
- en: Directly below the `ImageView` widget, add a `TextView` widget. Set the `id`
    attribute to `textStatus`. I made my `TextView` widget a little bigger by dragging
    its edges and changed its `textSize` attribute to `40sp`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ImageView`小部件的正下方，添加一个`TextView`小部件。将`id`属性设置为`textStatus`。我通过拖动其边缘使我的`TextView`小部件变大，并将其`textSize`属性更改为`40sp`。
- en: Now we will add a large selection of `id` property values we add to them later
    in the tutorial will be. Follow this next screenshot to lay out 12 buttons. Alter
    the `text` attribute on each so that your buttons have the same text as those
    in the next screenshot. The `text` attributes are detailed specifically in the
    next step in case the screenshot isn't clear enough:![Figure 19.2 – text attributes
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加大量`id`属性值，稍后在教程中将它们添加到它们。按照下一个截图来布局12个按钮。修改每个按钮的`text`属性，使其与下一个截图中的文本相同。如果截图不够清晰，下一步中具体详细说明了`text`属性：![图19.2
    - 文本属性
- en: '](img/Figure_19.2_B16773.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.2_B16773.jpg)'
- en: Figure 19.2 – text attributes
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.2 - 文本属性
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To make the process of laying out the buttons quicker, lay them out just approximately
    at first, then add the `text` attributes from the next step, and then fine-tune
    the button positions to get a neat layout.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快按钮布局的过程，首先只是大致布局它们，然后从下一步中添加`text`属性，然后微调按钮位置以获得整洁的布局。
- en: 'Add the text values as they are in the screenshot. Here are all the values
    from left to right and top to bottom: `FADE IN`, `FADE OUT`, `FADE IN OUT`, `ZOOM
    IN`, `ZOOM OUT`, `LEFT RIGHT`, `RIGHT LEFT`, `TOP BOT`, `BOUNCE`, `FLASH`, `ROTATE
    LEFT`, and `ROTATE RIGHT`.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照截图中的文本值添加文本。以下是从左到右，从上到下的所有值：`淡入`，`淡出`，`淡入淡出`，`放大`，`缩小`，`左右`，`右左`，`上下`，`弹跳`，`闪烁`，`向左旋转`和`向右旋转`。
- en: Add a `SeekBar` widget from the `id` property to `seekBarSpeed` and the `max`
    property to `5000`. This means that the seek bar will hold a value between `0`
    and `5000` as it is dragged by the user from left to right. We will see how we
    can read and use this data soon.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`id`属性到`seekBarSpeed`添加一个`SeekBar`小部件，并将`max`属性设置为`5000`。这意味着当用户从左向右拖动时，滑块将保存一个在`0`和`5000`之间的值。我们将看到如何读取和使用这些数据。
- en: We want to make the `SeekBar` widget much wider. To achieve this, you use the
    exact same technique as with any widget; just drag the edges of the widget. However,
    as the seek bar is quite small, it is hard to increase its size without accidentally
    selecting the constraint handles. To overcome this problem, zoom in to the design
    by holding the *Ctrl* key and rolling the middle mouse wheel forward. You can
    then grab the edges of the seek bar without touching the constraint handles. I
    have shown this in action in the next screenshot:![Figure 19.3 – Grab the edges
    of the seek bar
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要使`SeekBar`小部件更宽。为了实现这一点，您可以使用与任何小部件相同的技术；只需拖动小部件的边缘。然而，由于滑块很小，很难增加其大小而不小心选择约束手柄。为了解决这个问题，您可以通过按住*Ctrl*键并向前滚动鼠标中键来放大设计。然后，您可以抓住滑块的边缘，而不触摸约束手柄。我在下一个截图中展示了这一操作：![图19.3
    - 抓住滑块的边缘
- en: '](img/Figure_19.3_B16773.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.3_B16773.jpg)'
- en: Figure 19.3 – Grab the edges of the seek bar
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.3 - 抓住滑块的边缘
- en: Now add a `TextView` widget just to the right of the `SeekBar` widget and set
    its `id` property to `textSeekerSpeed`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`SeekBar`小部件的右侧添加一个`TextView`小部件，并将其`id`属性设置为`textSeekerSpeed`。
- en: Tweak the positions to look like the reference image at the start of these steps,
    and then click the **Infer Constraints** button to lock the positions. Of course,
    you can do this manually if you want the practice.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整位置，使其看起来像这些步骤开始时的参考图像，然后单击**推断约束**按钮以锁定位置。当然，如果您想要练习，也可以手动完成这一步骤。
- en: Next add the following `id` properties to the buttons, as identified by the
    text property that you have already set. If you are asked whether you want to
    **Update usages…** as you enter these values, select **Yes**:![](img/Table_19.1.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下`id`属性添加到按钮中，这些按钮由您已经设置的文本属性标识。如果在输入这些值时被问及是否要**更新用法…**，请选择**是**：![](img/Table_19.1.jpg)
- en: We will see how to use this newcomer to our UI (`SeekBar`) when we get to coding
    the `MainActivity` class in a few sections time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在几节时间内编写`MainActivity`类时，我们将看到如何使用这个新加入的UI（`SeekBar`）。
- en: Coding the XML animations
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写XML动画
- en: Right-click on the `anim` in the **Directory name** field and left-click **OK**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**目录名称**字段中的`anim`，然后左键单击**确定**。
- en: 'Now, right-click on the new `fade_in`, and then left-click **OK**. Delete the
    entire contents and add this code to create the animation:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击新的`fade_in`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Right-click on the `fade_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`fade_out`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Right-click on the `fade_in_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`fade_in_out`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Right-click on the `zoom_in`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`zoom_in`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Right-click on the `zoom_out`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`zoom_out`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Right-click on the `left_right`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`left_right`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Right-click on the `right_left`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`right_left`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Right-click on the `top_bot`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`top_bot`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Right-click on the `flash`, and then left-click **OK**. Delete the entire contents
    and add this code to create the animation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`flash`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Right-click on the `bounce`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`bounce`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Right-click on the `rotate_left`, and then left-click `pivotX="50%"` and `pivotY="50%"`.
    This makes the rotate animation central on the widget that will be animated. We
    can think of this as setting the pivot point of the animation:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`rotate_left`，然后左键单击`pivotX="50%"`和`pivotY="50%"`。这使得旋转动画在将要被动画化的小部件上居中。我们可以将其视为设置动画的中心点：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Right-click on the `rotate_right`, and then left-click **OK**. Delete the entire
    contents and add this code to create the animation:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`rotate_right`，然后左键单击**确定**。删除整个内容并添加以下代码以创建动画：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now we can write the Java code to add our animations to our UI.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以编写Java代码，将动画添加到我们的UI中。
- en: Wiring up the animation demo app with Java
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将动画演示应用程序与Java连接起来
- en: 'Open the `MainActivity.java` file. Now, below the class declaration, we can
    declare the following member variables for the animations:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`文件。现在，在类声明下面，我们可以声明以下用于动画的成员变量：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now add these member variables below for the UI widgets after the previous
    code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在上述代码之后为UI小部件添加这些成员变量：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will need to add the following `import` statements at this point:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您需要添加以下`import`语句：
- en: '`import android.view.animation.Animation;`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.view.animation.Animation;`'
- en: '`import android.widget.Button;`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.widget.Button;`'
- en: '`import android.widget.ImageView;`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.widget.ImageView;`'
- en: '`import android.widget.SeekBar;`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.widget.SeekBar;`'
- en: '`import android.widget.TextView;`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.widget.TextView;`'
- en: 'Next, we add an `int` member variable that will be used to track the current
    value/position of the seek bar:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个`int`成员变量，用于跟踪滑块的当前值/位置：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now let''s call two new methods from the `onCreate` method after the call to
    the `setContentView` method:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`setContentView`方法调用之后，让我们从`onCreate`方法中调用两个新方法：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: At this point, the two new lines of code will have errors until we implement
    the two new methods.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，两行新代码将有错误，直到我们实现这两个新方法。
- en: Now we will implement the `loadAnimations` method. Although the code in this
    method is quite extensive, it is also very straightforward. All we are doing is
    using the static `loadAnimation` method of the `AnimationUtils` class to initialize
    each of our `Animation` references with one of our XML animations. Notice also
    that for the `animFadeIn` `Animation` reference, we also call `setAnimationListener`
    on it. We will write the methods to listen for events shortly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将实现 `loadAnimations` 方法。虽然这个方法中的代码相当庞大，但也非常简单。我们所做的就是使用 `AnimationUtils`
    类的静态 `loadAnimation` 方法来初始化我们每个 `Animation` 引用中的一个 XML 动画。还要注意，对于 `animFadeIn`
    的 `Animation` 引用，我们还在其上调用了 `setAnimationListener`。我们将很快编写监听事件的方法。
- en: 'Add the `loadAnimations` method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `loadAnimations` 方法：
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will need to import one new class at this point:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您需要导入一个新的类：
- en: '`import android.view.animation.AnimationUtils;`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.view.animation.AnimationUtils;`'
- en: 'Implement the `loadUI` method in three sections. First, let''s get a reference
    to the parts of our XML layout in the usual way:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在三个部分中实现 `loadUI` 方法。首先，让我们以通常的方式引用 XML 布局的部分：
- en: '[PRE27]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we will add a click listener for each button. Add this code immediately
    after the last block within the `loadUI` method:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为每个按钮添加一个点击监听器。在 `loadUI` 方法的最后一个块之后立即添加以下代码：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The code we just added creates errors in all the lines of code. We can ignore
    them for now as we will fix them shortly and discuss what happened.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码在所有代码行中都创建了错误。我们现在可以忽略它们，因为我们很快就会修复它们并讨论发生了什么。
- en: The third and last section of the `loadUI` method sets up an anonymous class
    to handle the `SeekBar` widget. We could have added this as an interface to the
    `MainActivity` class as we did with listening for button clicks and animation
    events, but with a single `SeekBar` widget like this, it makes sense to handle
    it directly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadUI` 方法的第三部分和最后一部分设置了一个匿名类来处理 `SeekBar` 小部件。我们本可以像监听按钮点击和动画事件一样将其添加为 `MainActivity`
    类的一个接口，但是对于像这样的单个 `SeekBar` 小部件，直接处理它是有意义的。'
- en: 'We will override three methods as is required by the interface when implementing
    `OnSeekBarChangeListener`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重写三个方法，这是实现 `OnSeekBarChangeListener` 接口时所需的：
- en: A method that detects a change in the position of the seek bar called `onProgressChanged`
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测 seek bar 位置变化的方法叫做 `onProgressChanged`
- en: A method that detects the user starting to change the position called `onStartTrackingTouch`
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测用户开始改变位置的方法叫做 `onStartTrackingTouch`
- en: A method that detects when the user has finished using the seek bar called `onStopTrackingTouch`
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个检测用户完成使用 seek bar 的方法叫做 `onStopTrackingTouch`
- en: To achieve our goals, we only need to add code to the `onProgressChanged` method
    but we must still override them all.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，我们只需要向 `onProgressChanged` 方法添加代码，但是我们仍然必须重写它们全部。
- en: All we do in the `onProgressChanged` method is assign the current value of the
    seek bar to the `seekSpeedProgress` member variable so it can be accessed from
    elsewhere. Then we use this value along with the maximum possible value of the
    `SeekBar` widget, obtained by calling `seekBarSpeed.getMax()`, and output a message
    to the `textSeekerSpeed` `TextView` widget.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onProgressChanged` 方法中，我们所做的就是将 seek bar 的当前值分配给 `seekSpeedProgress` 成员变量，以便可以从其他地方访问它。然后我们使用这个值以及通过调用
    `seekBarSpeed.getMax()` 获得的 `SeekBar` 小部件的最大可能值，并将消息输出到 `textSeekerSpeed` `TextView`
    小部件。
- en: 'Add the code we have just discussed into the `loadUI` method:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们刚刚讨论过的代码添加到 `loadUI` 方法中：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now we need to alter the `MainActivity` class declaration to implement two interfaces.
    In this app, we will be listening for clicks and animation events, so the two
    interfaces we will be using are `View.OnClickListener` and `Animation.AnimationListener`.
    Notice that to implement more than one interface, we simply separate the interfaces
    with a comma.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改 `MainActivity` 类的声明以实现两个接口。在这个应用程序中，我们将监听点击和动画事件，所以我们将使用的两个接口是 `View.OnClickListener`
    和 `Animation.AnimationListener`。请注意，要实现多个接口，我们只需用逗号分隔接口。
- en: 'Alter the `MainActivity` class declaration by adding the following highlighted
    code we have just discussed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加我们刚刚讨论过的以下突出显示的代码来修改 `MainActivity` 类的声明：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'At this stage, we can add and implement the required methods for those interfaces
    – first, the following methods of `AnimationListener`: `onAnimationEnd`, `onAnimationRepeat`,
    and `onaAnimationStart`. We only need to add a little code to two of these methods.
    In `onAnimationEnd`, we set the `text` property of `textStatus` to `STOPPED`,
    and in the `onAnimationStart` method, we set the `text` property of `textStatus`
    to `RUNNING`. This will demonstrate our animation listeners are indeed listening
    and working:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们可以添加并实现这些接口所需的方法 - 首先是 `AnimationListener` 的以下方法：`onAnimationEnd`，`onAnimationRepeat`
    和 `onaAnimationStart`。我们只需要向这两个方法中添加一点代码。在 `onAnimationEnd` 中，我们将 `textStatus`
    的 `text` 属性设置为 `STOPPED`，在 `onAnimationStart` 方法中，我们将 `textStatus` 的 `text` 属性设置为
    `RUNNING`。这将演示我们的动画监听器确实在监听和工作：
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `onClick` method is quite long but not anything complicated. Each `case`
    that handles each button from the UI simply sets the duration of the animation
    based on the current position of the seek bar, sets up the animation so it can
    be listened to for events, and then starts the animation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`onClick` 方法非常长，但并不复杂。UI 中处理每个按钮的每个 `case` 简单地根据 seek bar 的当前位置设置动画的持续时间，设置动画以便监听事件，然后启动动画。'
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You will need to use your preferred technique to import the `View` class:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用您喜欢的技术导入 `View` 类：
- en: '`import android.view.View;`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`import android.view.View;`'
- en: 'Add the `onClick` method we have just discussed, and we have then completed
    this mini-app:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我们刚刚讨论过的 `onClick` 方法，然后我们就完成了这个小应用程序：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now run the app. Move the seek bar to roughly the center so the animations
    run for a reasonable amount of time, as shown in the next screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序。将 seek bar 移动到大致中心，以便动画运行一段合理的时间，如下一张截图所示：
- en: '![Figure 19.4 – Move the seek bar to roughly the center'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.4 – 将寻找栏移动到大致中心'
- en: '](img/Figure_19.4_B16773.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.4_B16773.jpg)'
- en: Figure 19.4 – Move the seek bar to roughly the center
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.4 – 将寻找栏移动到大致中心
- en: 'Click the **ZOOM IN** button to see the effect, as shown in this next screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**放大**按钮以查看效果，如下一个截图所示：
- en: '![Figure 19.5 – ZOOM IN effect'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.5 – 放大效果'
- en: '](img/Figure_19.5_B16773.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.5_B16773.jpg)'
- en: Figure 19.5 – ZOOM IN effect
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.5 – 放大效果
- en: 'Notice how the text on the Android robot changes from **RUNNING** to **STOPPED**
    at the appropriate time. Now click one of the **ROTATE** buttons to see this effect
    shown next:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意Android机器人上的文本如何在适当的时间从**RUNNING**更改为**STOPPED**。现在点击其中一个**旋转**按钮，以查看下一个显示的效果：
- en: '![Figure 19.6 – Rotate button'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图19.6 – 旋转按钮'
- en: '](img/Figure_19.6_B16773.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_19.6_B16773.jpg)'
- en: Figure 19.6 – Rotate button
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图19.6 – 旋转按钮
- en: Most of the other animations don't do themselves justice in a screenshot, so
    be sure to try them all out for yourself.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数其他动画在截图中无法展现出自己的价值，所以一定要自己尝试它们。
- en: Frequently asked questions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: I know how to animate widgets now but what about shapes or images that I create
    myself?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我现在知道如何对小部件进行动画处理，但是我自己创建的形状或图像呢？
- en: An `ImageView` can hold any image you like. Just add the image to the `drawable`
    folder and then set the appropriate `src` attribute on the `ImageView` widget.
    You can then animate whatever image is being shown in the `ImageView`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageView`可以容纳任何您喜欢的图像。只需将图像添加到`drawable`文件夹，然后在`ImageView`小部件上设置适当的`src`属性。然后可以对`ImageView`中显示的任何图像进行动画处理。'
- en: But what if I want more flexibility than this, such as for a drawing app or
    even a game?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但如果我想要比这更灵活的功能，比如绘图应用程序甚至游戏呢？
- en: To implement this kind of functionality, we will need to learn about another
    general computing concept (`Paint`, `Canvas`, and `SurfaceView`). We will learn
    how to draw anything from a single pixel to shapes and then move them around the
    screen starting in the next chapter, [*Chapter 20*](B16773_20_ePub_RK.xhtml#_idTextAnchor345),
    *Drawing Graphics*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这种功能，我们需要了解另一个通用的计算概念（`Paint`，`Canvas`和`SurfaceView`）。我们将学习如何从单个像素到形状绘制任何东西，然后在屏幕上移动它们，从下一章开始，[*第20章*](B16773_20_ePub_RK.xhtml#_idTextAnchor345)，*绘图图形*。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now we have another app-enhancing trick up our sleeves and we know that animations
    in Android are quite straightforward. We can design an animation in XML and add
    the file to the `anim` folder. After that, we can get a reference to the animation
    in XML with an `Animation` object in our Java code.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们掌握了另一个增强应用程序的技巧，并且知道Android中的动画非常简单。我们可以在XML中设计动画并将文件添加到`anim`文件夹中。之后，我们可以在Java代码中使用`Animation`对象获取对XML中动画的引用。
- en: We can then use a reference to a widget in our UI and set an animation to it
    using `setAnimation` and passing in the `Animation` object. We commence the animation
    by calling `startAnimation` on the reference to the widget.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用UI中小部件的引用，并使用`setAnimation`为其设置动画，并传入`Animation`对象。通过在小部件的引用上调用`startAnimation`来开始动画。
- en: We also saw that we can control the timing of animations, as well as listening
    for animation events.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到可以控制动画的时序，以及监听动画事件。
- en: In the next chapter, we will learn about drawing graphics in Android. This will
    be the start of several chapters on graphics, where we will build a kids'-style
    drawing app.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Android中绘制图形。这将是关于图形的几章中的开始，我们将构建一个儿童风格的绘图应用程序。
- en: '| **Existing text property** | **Value of id property to set** |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| **现有文本属性** | **要设置的id属性值** |'
- en: '| Fade In | `btnFadeIn` |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: 淡入 | `btnFadeIn` |
- en: '| Fade Out | `btnFadeOut` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 淡出 | `btnFadeOut` |'
- en: '| Fade In Out | `btnFadeInOut` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 淡入淡出 | `btnFadeInOut` |'
- en: '| Zoom In | `btnZoomIn` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 放大 | `btnZoomIn` |'
- en: '| Zoom Out | `btnZoomOut` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 缩小 | `btnZoomOut` |'
- en: '| Left Right | `btnLeftRight` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 左右 | `btnLeftRight` |'
- en: '| Right Left | `btnRightLeft` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 右左 | `btnRightLeft` |'
- en: '| Top Bot | `btnTopBottom` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 上下 | `btnTopBottom` |'
- en: '| Bounce | `btnBounce` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 弹跳 | `btnBounce` |'
- en: '| Flash | `btnFlash` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 闪烁 | `btnFlash` |'
- en: '| Rotate Left | `btnRotateLeft` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 向左旋转 | `btnRotateLeft` |'
- en: '| Rotate Right | `btnRotateRight` |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 向右旋转 | `btnRotateRight` |'
