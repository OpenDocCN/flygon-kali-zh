- en: Isolating Network Access
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隔离网络访问
- en: A fundamental component of application security is the ability to control network
    access, both inbound to and outbound from your applications. AWS provides EC2
    security groups that provide such a capability, which you can apply on a per-network-interface
    basis to your EC2 instances. This mechanism works well for traditional applications
    that are deployed to EC2 instances, but historically has not been as effective
    for container applications, which often operate on shared EC2 instances that communicate
    via a shared host interface on the EC2 instance. For ECS, the approach until recently
    has been that you have two applied security groups that accommodate the network
    security requirements of all the containers you need to support running on a given
    ECS container instance, which reduces the effectiveness of your security rules,
    and for applications with high security requirements is not acceptable. The only
    alternative to this approach up until recently was to build dedicated ECS clusters
    per application, ensuring application security requirements could be met but at
    the price of additional infrastructure and operational overhead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用安全的基本组件是控制网络访问的能力，无论是应用内部还是应用外部。AWS提供了EC2安全组，可以在每个网络接口上应用到您的EC2实例。这种机制对于部署到EC2实例的传统应用程序非常有效，但对于容器应用程序来说效果不佳，因为它们通常在共享的EC2实例上运行，并通过EC2实例上的共享主机接口进行通信。对于ECS来说，直到最近的方法是为您需要支持在给定ECS容器实例上运行的所有容器的网络安全需求应用两个安全组，这降低了安全规则的有效性，对于具有高安全要求的应用程序来说是不可接受的。直到最近，这种方法的唯一替代方案是为每个应用程序构建专用的ECS集群，以确保满足应用程序的安全要求，但这会增加额外的基础设施和运营开销。
- en: AWS announced a feature referred to as ECS task networking in late 2017, which
    introduces the ability to dynamically allocate an elastic network interface (ENI)
    to your ECS container instances, which is reserved for use for a given ECS task.
    This allows you to create security groups that are specific to each of your container
    applications, and run these applications concurrently on the same ECS container
    instance without compromising security.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AWS在2017年底宣布了一项名为ECS任务网络的功能，引入了动态分配弹性网络接口（ENI）给您的ECS容器实例的能力，这个ENI专门用于给定的ECS任务。这使您能够为每个容器应用程序创建特定的安全组，并在同一ECS容器实例上同时运行这些应用程序，而不会影响安全性。
- en: In this chapter, you will learn how to configure ECS task networking, which
    requires you to understand how ECS task networking works, configure ECS task definitions
    for task networking, and create and deploy ECS services that are linked to your
    task-networking-enabled ECS task definitions. When combined with the ECS task
    roles feature you configured in the previous chapter, this will enable you to
    build highly secure container application environments that enforce isolation
    and separation at both an IAM-permissions and network-security level.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何配置ECS任务网络，这需要您了解ECS任务网络的工作原理，为任务网络配置ECS任务定义，并创建部署与您的任务网络启用的ECS任务定义相关联的ECS服务。与您在上一章中配置的ECS任务角色功能相结合，这将使您能够构建高度安全的容器应用程序环境，以在IAM权限和网络安全级别上执行隔离和分离。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Understanding ECS task networking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ECS任务网络
- en: Configuring a NAT Gateway
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置NAT网关
- en: Configuring ECS task networking
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置ECS任务网络
- en: Deploying and testing ECS task networking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和测试ECS任务网络
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following lists the technical requirements to complete this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了完成本章所需的技术要求：
- en: Administrator access to an AWS account
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对AWS账户的管理员访问
- en: Local AWS profile configured as per instructions in Chapter 3
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第3章的说明配置本地AWS配置文件
- en: AWS CLI 1.15.71 or higher
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI 1.15.71或更高版本
- en: Completed Chapter 9 and successfully deployed sample application to AWS
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成第9章，并成功将示例应用程序部署到AWS
- en: The following GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch10](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch10).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch10](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch10)。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2MUBJfs](http://bit.ly/2MUBJfs)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2MUBJfs](http://bit.ly/2MUBJfs)'
- en: Understanding ECS task networking
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ECS任务网络
- en: Under the hood, ECS task networking is actually quite a complex feature that
    relies on a number of Docker networking features and requires a detailed understanding
    of Docker networking. As someone who designs, builds, and deploys container environments
    in AWS using ECS, the good news is that you don't have to understand this level
    of detail, and really you just need a high-level understanding of how ECS task
    networking works. I will therefore provide a high-level overview of how ECS task
    networking works in this section, however, if you are interested in how ECS task
    networking works in greater detail, this blog post from AWS ([https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/))
    provides further information.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，ECS任务网络实际上是一个相当复杂的功能，它依赖于许多Docker网络功能，并需要对Docker网络有详细的了解。作为在AWS中使用ECS设计、构建和部署容器环境的人，好消息是你不必理解这个细节层次，你只需要对ECS任务网络如何工作有一个高层次的理解。因此，在本节中，我将提供ECS任务网络如何工作的高层次概述，但是，如果你对ECS任务网络如何工作感兴趣，这篇来自AWS的博客文章提供了更多信息([https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/))。
- en: Docker bridge networking
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker桥接网络
- en: 'To understand ECS task networking, it helps to have a picture of how Docker
    networking and the standard configuration of an ECS container works by default.
    By default, ECS task definitions are configured with the Docker bridge networking
    mode, which is illustrated in the following diagram:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解ECS任务网络，有助于了解Docker网络和ECS容器的标准配置是如何默认工作的。默认情况下，ECS任务定义配置为Docker桥接网络模式，如下图所示：
- en: '![](assets/64cd1234-38fd-40fb-9d7b-c30700f382ea.png)Docker bridge networking'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/64cd1234-38fd-40fb-9d7b-c30700f382ea.png)Docker桥接网络'
- en: In the preceding diagram, you can see that each ECS task has its own dedicated
    network interface, which is dynamically created by the Docker Engine when the
    ECS task container(s) are created. The Docker bridge interface is a Layer 2 networking
    component similar to an Ethernet switch that connects each of the Docker container
    network interfaces together within a network internal to the Docker Engine host.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到每个ECS任务都有自己的专用网络接口，这是由Docker引擎在创建ECS任务容器时动态创建的。Docker桥接接口是一个类似于以太网交换机的第2层网络组件，它在Docker引擎主机内部连接每个Docker容器网络接口。
- en: Notice that each container has an IP address within the `172.16.0.x` subnet,
    whereas the external AWS public network and elastic network interface of the ECS
    container instance have IP addresses within the `172.31.0.x` subnet, and you can
    see that all container traffic routes through a single host network interface,
    which, in the case of an AWS EC2 instance, is the default elastic network interface
    allocated to the instance. An elastic network interface (ENI) is an EC2 resource
    that provides network connectivity to your VPC subnets, and is what you would
    consider the standard network interface that each of your EC2 instances uses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个容器都有一个IP地址，位于`172.16.0.x`子网内，而ECS容器实例的外部AWS公共网络和弹性网络接口的IP地址位于`172.31.0.x`子网内，您可以看到所有容器流量都通过单个主机网络接口路由，在AWS
    EC2实例的情况下，这是分配给实例的默认弹性网络接口。弹性网络接口（ENI）是一种EC2资源，为您的VPC子网提供网络连接，并且是您认为每个EC2实例使用的标准网络接口。
- en: The ECS agent, which also runs as a Docker container, is different from the
    other containers in that it operates in host-networking mode, meaning it uses
    the host operating system network interface (that is, the ENI) for its networking.
    Because the containers sit on a different IP network that is internal to the Docker
    Engine host, in order to provide network connectivity with the outside world,
    Docker configures iptables rules on the ENI, which translate all outbound network
    traffic to the elastic network interface IP address, and set up dynamic port-mapping
    rules for inbound network traffic. For example, a dynamic port-mapping rule for
    one of the containers in the preceding diagram would translate incoming traffic
    for `172.31.0.99:32768` to `172.16.0.101:8000`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ECS代理也作为一个Docker容器运行，与其他容器不同的是它以主机网络模式运行，这意味着它使用主机操作系统的网络接口（即ENI）进行网络通信。因为容器位于内部对Docker引擎主机的不同IP网络上，为了与外部世界建立网络连接，Docker在ENI上配置了iptables规则，将所有出站网络流量转换为弹性网络接口的IP地址，并为入站网络流量设置动态端口映射规则。例如，前面图表中一个容器的动态端口映射规则会将`172.31.0.99:32768`的传入流量转换为`172.16.0.101:8000`。
- en: iptables are a standard Linux kernel capability that provides network access
    control and network address translation features to your Linux hosts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: iptables是标准的Linux内核功能，为您的Linux主机提供网络访问控制和网络地址转换功能。
- en: Although many applications work just fine with network address translation (NAT),
    some applications do not work well or at all with NAT, and using NAT can have
    a performance impact for applications with high volumes of network traffic. Notice
    also that the security group applied to the ENI is shared across all containers,
    the ECS agent, and by the operating system itself, meaning the security group
    must permit the combined network connectivity requirements of all of these components,
    which may compromise the security of your containers and ECS container instances.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多应用程序使用网络地址转换（NAT）运行良好，但有些应用程序对NAT的支持不佳，甚至根本无法支持，并且对于网络流量较大的应用程序，使用NAT可能会影响性能。还要注意，应用于ENI的安全组是所有容器、ECS代理和操作系统本身共享的，这意味着安全组必须允许所有这些组件的组合网络连接要求，这可能会危及您的容器和ECS容器实例的安全。
- en: It is possible to configure your ECS task definitions to operate in host-networking
    mode, meaning their network configuration would be similar to the ECS agent configuration,
    where no network address translation (NAT) is required. Host-networking mode has
    its own security implications and is generally not recommended for applications
    that want to avoid NAT or require network isolation—instead you should use ECS
    task networking for such requirements. Host networking should be used with care
    and only for ECS tasks that perform a system function, such as logging or monitoring
    a sidecar container.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以配置ECS任务定义以在主机网络模式下运行，这意味着它们的网络配置类似于ECS代理配置，不需要网络地址转换（NAT）。主机网络模式具有自己的安全性影响，通常不建议用于希望避免NAT或需要网络隔离的应用程序，而应该使用ECS任务网络来满足这些要求。主机网络应谨慎使用，仅用于执行系统功能的ECS任务，例如日志记录或监视辅助容器。
- en: ECS task networking
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS任务网络
- en: 'Now that you have a basic understanding of the default networking configuration
    for an ECS container instance and its associated containers, let''s review how
    this picture changes when you configure ECS task networking. The following diagram
    illustrates how ECS task networking works at a high level:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对ECS容器实例及其关联容器的默认网络配置有了基本了解，让我们来看看当您配置ECS任务网络时，这个情况会如何改变。以下图表概述了ECS任务网络的工作原理：
- en: '![](assets/bf9feb71-45dc-4c68-9b73-e707910cb295.png)ECS task networking'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bf9feb71-45dc-4c68-9b73-e707910cb295.png)ECS任务网络'
- en: In the preceding diagram, each ECS task is allocated and configured to use its
    own dedicated elastic network interface. This is quite different from the first
    diagram, where containers use an internal network interface that is dynamically
    created by Docker—instead, ECS is responsible for the dynamic creation of each
    ECS task elastic network interface. This is more complex for ECS, however comes
    with the advantage that your containers can be directly attached to your VPC subnets
    and can have their own independent security groups. This means your container
    network ports no longer require complicated features, such as dynamic port-mapping,
    that compromise both security and performance, with your container ports being
    exposed directly to the AWS networking environment and becoming directly accessible
    by your load balancers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，每个ECS任务都被分配和配置为使用自己专用的弹性网络接口。这与第一个图表有很大不同，其中容器使用由Docker动态创建的内部网络接口，而ECS负责动态创建每个ECS任务的弹性网络接口。这对ECS来说更加复杂，但优势在于您的容器可以直接附加到VPC子网，并且可以拥有自己独立的安全组。这意味着您的容器网络端口不再需要复杂的功能，如动态端口映射，这会影响安全性和性能，您的容器端口直接暴露给AWS网络环境，并可以直接被负载均衡器访问。
- en: One point to note in the preceding diagram is the external networking configuration,
    which introduces the notion of a private subnet and public subnet. I have represented
    network connectivity in this manner because, at the time of writing, ECS task
    networking does not support allocation of public IP addresses to each dynamically
    created ENI, hence you do need an additional VPC network setup if your containers
    require internet connectivity. This setup involves creating either a NAT gateway
    or HTTP proxy on a public network, which your ECS tasks can then route internet
    traffic to. In the scenario of the current todobackend application, the entrypoint
    script introduced in Chapter 9 communicates with the AWS Secrets Manager API that
    is located on the internet, hence requires a network setup similar to that shown
    in the first diagram.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中需要注意的一点是外部网络配置，引入了私有子网和公共子网的概念。我以这种方式表示网络连接，因为在撰写本文时，ECS任务网络不支持为每个动态创建的ENI分配公共IP地址，因此如果您的容器需要互联网连接，则确实需要额外的VPC网络设置。此设置涉及在公共网络上创建NAT网关或HTTP代理，然后您的ECS任务可以将互联网流量路由到该网关。在当前todobackend应用程序的情况下，第9章介绍的入口脚本与位于互联网上的AWS
    Secrets Manager API通信，因此需要类似于第一个图表中显示的网络设置。
- en: The ECS agent does not have the limitation of being unable to assign a public
    IP address, given it uses the default EC2 instance ENI that is allocated to the
    instance on creation. So you could, for example in the preceding diagram, connect
    the default ENI used by the ECS agent to the public network or another network
    with internet connectivity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ECS代理没有无法分配公共IP地址的限制，因为它使用在创建时分配给实例的默认EC2实例ENI。例如，在前面的图表中，您可以将ECS代理使用的默认ENI连接到公共网络或具有互联网连接的其他网络。
- en: As you can see by comparing both the previous diagrams, ECS task networking
    simplifies the internal networking configuration of your ECS container instances,
    making it look much like the traditional virtual machine networking model, if
    you imagine the ECS container instance is a bare-metal server and your containers
    are virtual machines. This comes with the benefit of greater performance and security,
    but at the expense of a more complicated network setup externally, where a NAT
    gateway or HTTP proxy configuration is required for outbound internet connectivity
    and ECS is responsible for dynamically attaching ENIs to your instances, which
    comes with its own limitations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较前面的两个图表，您可以看到ECS任务网络简化了ECS容器实例的内部网络配置，使其看起来更像是传统的虚拟机网络模型，如果您想象ECS容器实例是一台裸金属服务器，您的容器是虚拟机。这带来了更高的性能和安全性，但需要更复杂的外部网络设置，需要为出站互联网连接配置NAT网关或HTTP代理，并且ECS负责动态附加ENI到您的实例，这也带来了自己的限制。
- en: For example, the maximum number of ENIs that can be attached to a given EC2
    instance varies depending on the EC2 instance type, and if you take a look at
    [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI),
    you can see that the free tier t2.micro instance type only supports a maximum
    of two ENIs, limiting the maximum number of ECS tasks you can run in the ECS task-networking
    mode to just one per instance (given one ENI will always be reserved for the host).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以附加到给定EC2实例的ENI的最大数量取决于EC2实例类型，如果您查看[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)，您会发现免费套餐t2.micro实例类型仅支持最多两个ENI，这限制了您可以在ECS任务网络模式下运行的ECS任务的最大数量为每个实例只能运行一个（因为一个ENI始终保留给主机）。
- en: Configuring a NAT gateway
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置NAT网关
- en: As you learned in the previous section, at the time of writing, ECS task networking
    does not support the assignment of public IP addresses, which means you must configure
    additional infrastructure to support any internet connectivity your application
    might require. Although the application can be accessed without outbound internet
    access via the application load balancers in your stack, the application container
    entrypoint script does need to communicate with the AWS Secrets Manager service
    on startup, which requires internet connectivity to communicate with the Secrets
    Manager API.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前一节中了解到的，在撰写本文时，ECS任务网络不支持分配公共IP地址，这意味着您必须配置额外的基础设施来支持应用程序可能需要的任何互联网连接。尽管应用程序可以通过堆栈中的应用程序负载均衡器进行无出站互联网访问，但应用程序容器入口脚本确实需要在启动时与AWS
    Secrets Manager服务通信，这需要与Secrets Manager API通信的互联网连接。
- en: 'To provide this connectivity, there are two typical approaches you can adopt:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供这种连接性，您可以采用两种典型的方法：
- en: '**Configure a NAT Gateway**: This is an AWS-managed service that provides network
    address translation for outbound communications, enabling hosts and containers
    located on private subnets to access the internet.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置NAT网关**：这是AWS管理的服务，为出站通信提供网络地址转换，使位于私有子网上的主机和容器能够访问互联网。'
- en: '**Configure an HTTP Proxy**: This provides a forward proxy where applications
    configured with proxy support and forward HTTP, HTTPS, and FTP requests to your
    proxy.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置HTTP代理**：这提供了一个前向代理，其中配置了代理支持的应用程序并将HTTP、HTTPS和FTP请求转发到您的代理。'
- en: I typically recommend the latter approach, because it provides you with the
    ability to restrict access to websites based upon DNS naming for both HTTP and
    HTTPS traffic (the latter depending on the capability of the HTTP proxy in use),
    whereas the NAT gateway only has the ability to restrict access based upon IP
    addresses. Setting up a proxy does however require more effort and incurs the
    operational overhead of managing an additional service, so in the interest of
    focusing on ECS task networking and keeping things simple, we will implement the
    NAT gateway approach in this chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常推荐后一种方法，因为它可以根据DNS命名限制对HTTP和HTTPS流量的访问（后者取决于所使用的HTTP代理的能力），而NAT网关只能根据IP地址限制访问。然而，设置代理确实需要更多的努力，并且需要管理额外的服务的运营开销，因此为了专注于ECS任务网络并保持简单，我们将在本章中实施NAT网关方法。
- en: Configuring private subnets and route tables
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置私有子网和路由表
- en: 'In order to support NAT gateway with a typical routing configuration you would
    see in the real world, we need to first add a private subnet along with a private
    route table, which we will add as CloudFormation resources in your todobackend
    stack. The following example demonstrates performing this configuration in the
    `stack.yml` file located at the root of the todobackend-aws repository:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持具有典型路由配置的NAT网关，我们需要首先添加一个私有子网以及一个私有路由表，这些将作为CloudFormation资源添加到您的todobackend堆栈中。以下示例演示了在todobackend-aws存储库的根目录中的`stack.yml`文件中执行此配置：
- en: In the interests of keeping this example simple, we are creating network resources
    in the todobackend application stack, however you typically would create network
    subnets and associated resources such as NAT gateways in a separate network-focused
    CloudFormation stack.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持本示例简单，我们正在创建todobackend应用程序堆栈中的网络资源，但通常您会在单独的网络重点CloudFormation堆栈中创建网络子网和相关资源，如NAT网关。
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a private subnet and route table
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建私有子网和路由表
- en: In the preceding example, you create private subnet and route table resources,
    and then associate them via the `PrivateSubnetRouteTableAssociation` resource.
    This configuration means that all network traffic sent from the private subnet
    will be routed according to routes published in the private route table. Notice
    that you only specify a single subnet in availability zone A of your local AWS
    region—in a real-world scenario, you would typically configure at least two subnets
    in two availability zones for high availability. One other point to note is that
    you must ensure the `CidrBlock` configured for your subnets falls within the IP
    range configured for your VPC and is not allocated to any other subnets.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您创建了私有子网和路由表资源，然后通过`PrivateSubnetRouteTableAssociation`资源将它们关联起来。这个配置意味着从私有子网发送的所有网络流量将根据私有路由表中发布的路由进行路由。请注意，您只在本地AWS区域的可用区A中指定了一个子网—在实际情况下，您通常会为高可用性配置至少两个可用区中的两个子网。还有一点需要注意的是，您必须确保为您的子网配置的`CidrBlock`落在为您的VPC配置的IP范围内，并且没有分配给任何其他子网。
- en: 'The following example demonstrates using the AWS CLI to determine the VPC IP
    range and to view existing subnet CIDR blocks:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用AWS CLI来确定VPC IP范围并查看现有子网CIDR块：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Querying VPC and subnet CIDR blocks
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 查询VPC和子网CIDR块
- en: In the preceding example, you can see that the default VPC has been configured
    with a CIDR block of `172.31.0.0/16`, and you can also see the existing CIDR blocks
    that have been allocated to the default subnets created in the default VPC. If
    you refer back to the first example, you can see that we have chosen the next
    `/20` subnet in this block (`172.31.96.0/20`) for the newly defined private subnet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您可以看到默认的VPC已经配置了一个CIDR块`172.31.0.0/16`，您还可以看到已经分配给默认VPC中创建的默认子网的现有CIDR块。如果您回到第一个例子，您会看到我们选择了这个块中的下一个`/20`子网（`172.31.96.0/20`）用于新定义的私有子网。
- en: Configuring NAT gateways
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置NAT网关
- en: With a private routing configuration in place, you can now configure a NAT gateway
    and other supporting resources.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在私有路由配置就绪后，您现在可以配置NAT网关和其他支持资源。
- en: A NAT gateway requires an elastic IP address, which is the fixed public IP address
    that outbound traffic traversing the NAT gateway will appear to be sourced from,
    and must be installed on a public subnet that has internet connectivity.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: NAT网关需要一个弹性IP地址，这是出站流量经过NAT网关时将显示为源自的固定公共IP地址，并且必须安装在具有互联网连接的公共子网上。
- en: 'The following example demonstrates configuring a NAT gateway along with an
    associated elastic IP address:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了配置NAT网关以及关联的弹性IP地址：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring a NAT gateway
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 配置NAT网关
- en: In the preceding example, you create an elastic IP address that is allocated
    for use with VPCs, and then link the allocated IP address to the NAT gateway via
    the `AllocationId` property.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您创建了一个为VPC分配的弹性IP地址，然后通过`AllocationId`属性将分配的IP地址链接到NAT网关。
- en: Elastic IP addresses are somewhat interesting from a billing perspective, in
    that AWS does not charge you for them as long as you are actively using them.
    If you create Elastic IP addresses but don't associate them with an EC2 instance
    or a NAT gateway, then AWS will charge you for them. See [https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/](https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/)
    for more details on how billing works for Elastic IP addresses.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性IP地址在计费方面有些有趣，因为AWS只要您在积极使用它们，就不会向您收费。如果您创建弹性IP地址但没有将它们与EC2实例或NAT网关关联，那么AWS将向您收费。有关弹性IP地址计费方式的更多详细信息，请参见[https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/](https://aws.amazon.com/premiumsupport/knowledge-center/elastic-ip-charges/)。
- en: 'Note the use of the `Fn::Select` intrinsic function when specifying `SubnetId`,
    and it is important to understand that the subnet must be in the same availability
    zone as the subnet and route table resources that will be linked to the NAT gateway.
    In our use cases, this is availability zone A and the `ApplicationSubnets` input
    includes two subnet IDs that reside in availability zones A and B, respectively,
    hence you select the first zero-indexed subnet ID. Note you can verify the availability
    zone of your subnets by using the `aws ec2 describe-subnets` command demonstrated
    in the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在指定`SubnetId`时使用了`Fn::Select`内在函数，重要的是要理解子网必须与将链接到NAT网关的子网和路由表资源位于相同的可用区。在我们的用例中，这是可用区A，`ApplicationSubnets`输入包括两个子网ID，分别位于可用区A和B，因此您选择第一个从零开始的子网ID。请注意，您可以使用以下示例中演示的`aws
    ec2 describe-subnets`命令来验证子网的可用区：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Querying subnet IDs by availability zone
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按可用区查询子网ID
- en: In the preceding example, you can see that the first item in the `ApplicationSubnets`
    input within the `dev.cfg` file is the subnet ID for `us-east-1a`, ensuring that
    the NAT gateway will be installed into the correct availability zone.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您可以看到`dev.cfg`文件中`ApplicationSubnets`输入中的第一项是`us-east-1a`的子网ID，确保NAT网关将安装到正确的可用区。
- en: Configuring routing for your private subnets
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的私有子网配置路由
- en: The final step in configuring your NAT gateway is to configure a default route
    for your private subnets that points to your NAT gateway resource. This configuration
    will ensure all outbound internet traffic will be routed to your NAT gateway,
    which will then perform address translation, enabling your private hosts and containers
    to communicate with the internet.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 配置NAT网关的最后一步是为您的私有子网配置默认路由，指向您的NAT网关资源。此配置将确保所有出站互联网流量将被路由到您的NAT网关，然后执行地址转换，使您的私有主机和容器能够与互联网通信。
- en: 'The following example demonstrates adding a default route for the private route
    table you created earlier:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了为您之前创建的私有路由表添加默认路由：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring a default route
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 配置默认路由
- en: In the preceding example, you can see that you configure the `RouteTableId`
    and `NatGatewayId` properties to ensure the default route for the private route
    table you created in the very first example is set to the NAT gateway you created
    in the later example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您可以看到您配置了`RouteTableId`和`NatGatewayId`属性，以确保您在第一个示例中创建的私有路由表的默认路由设置为您在后面示例中创建的NAT网关。
- en: 'You are now ready to deploy your changes, but before you do this, let''s create
    a separate branch in the todobackend-aws repository called **ecs-task-networking**,
    so that you can easily revert your changes at the end of this chapter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好部署您的更改，但在这之前，让我们在todobackend-aws存储库中创建一个名为**ecs-task-networking**的单独分支，这样您就可以在本章末尾轻松恢复您的更改：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating an ECS task networking branch
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建ECS任务网络分支
- en: 'Now you can deploy your changes using the familiar `aws cloudformation deploy` command
    you have been using through out this book for stack  deployments:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用您一直在本书中用于堆栈部署的熟悉的`aws cloudformation deploy`命令部署您的更改：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Deploying changes to the todobackend application
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 部署更改到todobackend应用程序
- en: 'In the preceding example, after successful deployment of the CloudFormation
    changes, you use the `aws ec2 describe-subnets` command to query the subnet ID
    of the new subnet you created, as you will need this value later on in this chapter.
    You also run the `aws ec2 describe-nat-gateways` command to verify the NAT gateway
    was created successfully and to view the elastic IP address of the gateway, which
    is represented by the highlighted `PublicIP` property. Note you should also check
    the default routes were created correctly, as demonstrated in the following example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，成功部署CloudFormation更改后，您使用`aws ec2 describe-subnets`命令查询您创建的新子网的子网ID，因为您稍后在本章中将需要这个值。您还运行`aws
    ec2 describe-nat-gateways`命令来验证NAT网关是否成功创建，并查看网关的弹性IP地址，该地址由突出显示的`PublicIP`属性表示。请注意，您还应检查默认路由是否正确创建，如以下示例所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Checking default routes
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 检查默认路由
- en: In the preceding example, you can see that two default routes exist, with one
    default route associated with a NAT gateway and the other with an internet gateway,
    confirming one of the route tables in your account is routing internet traffic
    to your newly created NAT gateway.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您可以看到存在两个默认路由，一个默认路由与NAT网关关联，另一个与互联网网关关联，证实您帐户中的一个路由表正在将互联网流量路由到您新创建的NAT网关。
- en: Configuring ECS task networking
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS任务网络
- en: 'Now that you have established networking infrastructure that will support the
    private IP addressing requirement of ECS task networking, you can proceed to configure
    ECS task networking on your ECS resources. This requires the following configurations
    and considerations:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经建立了支持ECS任务网络私有IP寻址要求的网络基础设施，您可以继续在ECS资源上配置ECS任务网络。这需要以下配置和考虑：
- en: You must configure your ECS task definitions and ECS services to support ECS
    task networking.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须配置ECS任务定义和ECS服务以支持ECS任务网络。
- en: The network mode of your task definition must be set to `awsvpc`.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务定义的网络模式必须设置为`awsvpc`。
- en: An elastic network interface used for ECS task networking can only have one
    ECS task associated with it. Depending on your ECS instance type, this will limit
    the maximum number of ECS tasks you can run in any given ECS container instance.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于ECS任务网络的弹性网络接口只能与一个ECS任务关联。根据您的ECS实例类型，这将限制您在任何给定的ECS容器实例中可以运行的ECS任务的最大数量。
- en: Deployment of ECS tasks with ECS task-networking-configured takes longer than
    traditional ECS deployments, as an elastic network interface needs to be created
    and bound to your ECS container instance.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用配置了ECS任务网络的ECS任务部署比传统的ECS部署时间更长，因为需要创建一个弹性网络接口并将其绑定到您的ECS容器实例。
- en: Because your container applications have a dedicated network interface, dynamic
    port mapping is no longer available and your container ports are exposed directly
    on the network interface.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于您的容器应用程序有一个专用的网络接口，动态端口映射不再可用，您的容器端口直接暴露在网络接口上。
- en: When an ECS service that uses the `awsvpc` network mode is used in conjunction
    with an application load balancer target group, the target type must be set to `ip` (the
    default is `instance`).
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用`awsvpc`网络模式的ECS服务与应用程序负载均衡器目标组一起使用时，目标类型必须设置为`ip`（默认值为`instance`）。
- en: The implication of the removal of dynamic port mapping means that, for example,
    the todobackend application (which runs on port 8000) will be accessed on port
    `8000` externally with task networking enabled, rather than via a dynamically
    mapped port. This results in better performance for applications that generate
    large amounts of network traffic, and also means your security rules can target
    the specific port(s) your application runs on, rather than permitting access to
    the ephemeral range of network ports that are used with dynamic port mapping.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 动态端口映射的移除意味着，例如，todobackend应用程序（运行在端口8000上）将在启用任务网络的情况下在外部使用端口`8000`访问，而不是通过动态映射的端口。这将提高生成大量网络流量的应用程序的性能，并且意味着您的安全规则可以针对应用程序运行的特定端口，而不是允许访问动态端口映射使用的临时网络端口范围。
- en: Configuring ECS task definitions for task networking
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为任务网络配置ECS任务定义
- en: 'The first step in configuring ECS task networking is to configure your ECS
    task definitions. The following example demonstrates modifying the `ApplicationTaskDefinition`
    resource to support ECS task networking:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 配置ECS任务定义以使用任务网络的第一步是配置您的ECS任务定义。以下示例演示了修改`ApplicationTaskDefinition`资源以支持ECS任务网络：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring ECS task definitions to use task networking
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 配置ECS任务定义以使用任务网络
- en: 'In the preceding example, the `NetworkMode` property has been added and configured
    with a value of `awsvpc`. By default, this property is set to `bridge`, which
    implements the default Docker behavior, as illustrated in the very first diagram,
    of including a Docker bridge interface with the network address translation configured
    to enable dynamic port mapping. By setting the network mode to `awsvpc`, ECS will
    ensure any ECS tasks that are deployed from this task definition are allocated
    a dedicated elastic network interface (ENI), and configure containers in the task
    definition to use the network stack of the ENI. The other configuration change
    in this example is that the `HostPort: 0` configuration has been removed from
    the `PortMappings` section, given ECS task networking does not use or support
    dynamic port mapping.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的示例中，`NetworkMode`属性已添加并配置为`awsvpc`的值。默认情况下，此属性设置为`bridge`，实现了默认的Docker行为，如第一个图中所示，包括一个Docker桥接口，并配置了网络地址转换以启用动态端口映射。通过将网络模式设置为`awsvpc`，ECS将确保从此任务定义部署的任何ECS任务都分配了专用的弹性网络接口（ENI），并配置任务定义中的容器以使用ENI的网络堆栈。此示例中的另一个配置更改是从`PortMappings`部分中删除了`HostPort:
    0`配置，因为ECS任务网络不使用或支持动态端口映射。'
- en: Configuring ECS services for task networking
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为任务网络配置ECS服务
- en: 'With your ECS task definitions configured to use the correct network mode for
    task networking, you next need to configure your ECS services. Your ECS service
    configuration defines the target subnets where ECS should create an ENI, and also
    defines the security groups that should be applied to the ENI. The following example
    demonstrates updating the `ApplicationService` resource in your todobackend stack:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将ECS任务定义配置为使用正确的任务网络模式后，接下来需要配置ECS服务。您的ECS服务配置定义了ECS应该创建ENI的目标子网，并且还定义了应该应用于ENI的安全组。以下示例演示了在todobackend堆栈中更新`ApplicationService`资源：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Configuring ECS services to use task networking
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 配置ECS服务以使用任务网络
- en: In the preceding example, a new property called `NetworkConfiguration` is added
    to the ECS service definition. This property is required whenever you enable task
    networking, and you can see that you need to configure the subnets and security
    groups associated with the ENI that will be created by ECS. Notice that you reference
    the `PrivateSubnet` resource you created earlier in this chapter, which ensures
    your container network interface will not be reachable directly from the Internet. 
    One change that is not immediately obvious is that the `Role` property has been
    removed - whenever you use have an ECS service that uses ECS task networking,
    AWS automatically configures the ECS role, and will raise an error if you attempt
    to set this role.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，向ECS服务定义添加了一个名为`NetworkConfiguration`的新属性。每当您启用任务网络时，都需要此属性，并且您可以看到需要配置与ECS将创建的ENI相关联的子网和安全组。请注意，您引用了本章前面创建的`PrivateSubnet`资源，这确保您的容器网络接口不会直接从互联网访问。一个不太明显的变化是`Role`属性已被移除
    - 每当您使用使用ECS任务网络的ECS服务时，AWS会自动配置ECS角色，并且如果您尝试设置此角色，将会引发错误。
- en: Configuring supporting resources for task networking
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为任务网络配置支持资源
- en: 'If you take a look back at the previous example, you will notice that you reference
    a new security group called `ApplicationSecurityGroup`, which needs to be added
    to your template, as demonstrated in the following example:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回顾一下前面的例子，您会注意到您引用了一个名为`ApplicationSecurityGroup`的新安全组，需要将其添加到您的模板中，如下例所示：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configuring security groups for task networking
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为任务网络配置安全组
- en: In the preceding example, you first create a security group that includes an
    egress rule set that permits outbound DNS and HTTPS traffic, which is required
    to allow the entrypoint script in your containers to communicate with the AWS
    Secrets Manager API. Notice that you need to modify the existing `AWS::EC2::SecurityGroupIngress`
    and `AWS::EC2::SecurityGroupEgress` resources, which previously permitted access
    between the application load balancer/application database and the application
    autoscaling group instances. You can see that for the `ApplicationLoadBalancerToApplicationEgress`
    and `ApplicationLoadBalancerToApplicationEgress` resources, the port range has
    been reduced from the ephemeral port range of `32768` to `60999` to just port
    `8000`, which results in a much more secure configuration. Also, the ECS container
    instance control plane (which is associated with the `ApplicationAutoscalingSecurityGroup`
    resource) can now no longer access your application database (only your application
    can do this now), which again is more secure.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您首先创建了一个安全组，其中包括一个出站规则集，允许出站DNS和HTTPS流量，这是必需的，以允许您容器中的入口脚本与AWS Secrets
    Manager API进行通信。请注意，您需要修改现有的`AWS::EC2::SecurityGroupIngress`和`AWS::EC2::SecurityGroupEgress`资源，这些资源之前允许应用负载均衡器/应用数据库与应用自动扩展组实例之间的访问。您可以看到，对于`ApplicationLoadBalancerToApplicationEgress`和`ApplicationLoadBalancerToApplicationEgress`资源，端口范围已从`32768`的临时端口范围减少到`60999`，仅为端口`8000`，这导致了更安全的配置。此外，ECS容器实例控制平面（与`ApplicationAutoscalingSecurityGroup`资源相关联）现在无法访问您的应用数据库（现在只有您的应用可以这样做），这再次更安全。
- en: There's one problem with the current modifications to the todobackend stack,
    which is that you have not updated your `MigrateTaskDefinition` to use task networking.
    The main reason I am not doing this is because it would require your ECS container
    instances to support more elastic network interfaces than what the free tier t2.micros
    supports, and also would require the ECS Task Runner custom resource to be updated
    to support running ad-hoc ECS tasks. Of course if you want to use ECS task networking
    in a production environment, you would need to address such concerns, however
    for the purposes of providing a basic understanding of ECS task networking, I
    have chosen not to do this. This does mean if you make any change that requires
    the migrate task to be run, it will fail with the configuration changes of the
    previous example, however, once this chapter is complete, you will revert your
    todobackend stack configuration to not use ECS task networking to ensure you can
    complete the remaining chapters.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当前对 todobackend 堆栈的修改存在一个问题，即您尚未更新`MigrateTaskDefinition`以使用任务网络。我之所以不这样做的主要原因是因为这将需要您的
    ECS 容器实例支持比免费套餐 t2.micros 支持的更多弹性网络接口，并且还需要更新 ECS 任务运行器自定义资源以支持运行临时 ECS 任务。当然，如果您想在生产环境中使用
    ECS 任务网络，您需要解决这些问题，但是出于提供对 ECS 任务网络的基本理解的目的，我选择不这样做。这意味着如果您进行任何需要运行迁移任务的更改，它将失败，并且一旦本章完成，您将恢复
    todobackend 堆栈配置，以确保不使用 ECS 任务网络来完成剩余的章节。
- en: 'Finally, there is one last change you need to make to your template, which
    is to modify the application-load-balancer target group associated with your ECS
    service. When your ECS services run tasks that operate in the `awsvpc` networking
    mode, you must change the target group type from the default of `instance` to
    a value of `ip`, as demonstrated in the following example, given your ECS tasks
    now have their own unique IP addresses:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要对模板进行最后一次更改，即修改与 ECS 服务关联的应用程序负载均衡器目标组。当您的 ECS 服务运行在`awsvpc`网络模式下的任务时，您必须将目标组类型从默认值`instance`更改为`ip`的值，如下例所示，因为您的
    ECS 任务现在具有自己独特的 IP 地址：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Updated application-load-balancer target group target type
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 更新应用程序负载均衡器目标组目标类型
- en: Deploying and testing ECS task networking
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和测试 ECS 任务网络
- en: 'You are now ready to deploy your changes and verify that ECS task networking
    is working correctly. If you run the `aws cloudformation deploy` command, the
    following should happen:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以部署更改并验证 ECS 任务网络是否正常工作。如果运行`aws cloudformation deploy`命令，应该会发生以下情况：
- en: A new revision of the application task definition will be created, which is
    configured for ECS task networking.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将创建应用程序任务定义的新修订版本，该版本配置为 ECS 任务网络。
- en: The ECS service configuration will detect the changes and attempt to deploy
    the new revision, along with the ECS service configuration changes. ECS will dynamically
    attach a new ENI to the private subnet and allocate this ENI to a new ECS task
    for the `ApplicationService` resource.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS 服务配置将检测更改并尝试部署新的修订版本，以及 ECS 服务配置更改。ECS 将动态地将新的 ENI 附加到私有子网，并将此 ENI 分配给“ApplicationService”资源的新
    ECS 任务。
- en: Once deployment is complete, you should verify your application is still working
    and once you have done this, you can browse to the ECS console, click on your
    ECS service, and select the current task running for the service.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，您应该验证应用程序仍在正常工作，一旦完成此操作，您可以浏览到 ECS 控制台，单击您的 ECS 服务，并选择服务的当前运行任务。
- en: 'The following screenshot shows the ECS task screen:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了 ECS 任务屏幕：
- en: '![](assets/08553c56-6741-4783-b651-bb2a69b13d8b.png)ECS task in task networking
    mode'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/08553c56-6741-4783-b651-bb2a69b13d8b.png)ECS 任务处于任务网络模式'
- en: As you can see, the network mode of the task is now `awsvpc`, and an ENI has
    been dynamically allocated from the private subnet you created earlier in this
    chapter. If you click on the ENI ID link, you will be able to verify the security
    group(s) attached to the ENI, and also check that the ENI has been attached to
    one of your ECS container instances.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，任务的网络模式现在是`awsvpc`，并且已经从本章前面创建的私有子网中动态分配了一个ENI。如果您点击ENI ID链接，您将能够验证附加到ENI的安全组，并且还可以检查ENI是否已附加到您的某个ECS容器实例中。
- en: 'At this point, you should commit the final set of changes you made in this
    chapter to the ECS task networking branch, check out the master branch, and redeploy
    your CloudFormation stack. This will revert all of the changes made in this chapter,
    restoring your stack to the same state as it was at the end of the preceding chapter.
    This is required, given we don''t want to have to upgrade to a larger instance
    type to accommodate the `MigrateTaskDefinition` resource and future auto scaling
    scenarios we will be testing in later chapters:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该将在本章中进行的最终一组更改提交到ECS任务网络分支，检出主分支，并重新部署您的CloudFormation堆栈。这将撤消本章中所做的所有更改，将您的堆栈恢复到上一章末尾时的相同状态。这是必需的，因为我们不希望不得不升级到更大的实例类型来适应“MigrateTaskDefinition”资源和我们将在后续章节中测试的未来自动扩展方案：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Reverting the todobackend-aws repository
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 还原todobackend-aws存储库
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to increase the network isolation and security
    of your Docker applications using ECS task networking. ECS task networking changes
    the default out-of-the-box Docker bridge and NAT network configuration to a model
    where each ECS task receives its own dedicated elastic network interface or ENI.
    This means that your Docker applications are assigned their own dedicated security
    groups and can be accessed directly via their published ports, which avoids the
    need to implement features, such as dynamic port mapping, that can affect performance
    and require more permissive security rules to work. ECS task networking, however,
    does come with its own set of challenges and limitations, which include a more
    complex network topology to accommodate the current private IP address-only restrictions,
    and the ability to only run a single ECS task per ENI.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何使用ECS任务网络增加Docker应用程序的网络隔离和安全性。ECS任务网络将默认的Docker桥接和NAT网络配置更改为每个ECS任务接收自己的专用弹性网络接口或ENI的模型。这意味着您的Docker应用程序被分配了自己的专用安全组，并且可以通过其发布的端口直接访问，这避免了实现动态端口映射等功能的需要，这些功能可能会影响性能并需要更宽松的安全规则才能工作。然而，ECS任务网络也带来了一系列挑战和限制，包括更复杂的网络拓扑来适应当前仅支持私有IP地址的限制，以及每个ENI只能运行单个ECS任务的能力。
- en: ECS task networking currently does not support public IP addresses, which means
    you must provide a NAT gateway or HTTP proxy if your tasks required outbound internet
    connectivity. NAT gateways are a managed service provided by AWS and you learned
    how to configure a private subnet used for your ECS tasks, and how to configure
    a private route table to route internet traffic to a NAT gateway you created in
    one of your pre-existing public subnets.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ECS任务网络目前不支持公共IP地址，这意味着如果您的任务需要出站互联网连接，您必须提供NAT网关或HTTP代理。NAT网关是AWS提供的托管服务，您学会了如何配置用于ECS任务的私有子网，以及如何配置私有路由表将互联网流量路由到您在现有公共子网中创建的NAT网关。
- en: You learned that configuring ECS task networking requires you to specify the
    awsvpc network mode in your ECS task definitions, and that you need to add a network
    configuration to your ECS services that specifies the subnet(s) your ECS tasks
    will be connected to and the security group(s) that will be applied. If your application
    is serviced by an application load balancer, you also need to ensure the target
    type of the target group linked to your ECS service is configured as `ip`, rather
    than the default `instance` target type. If you are applying these changes to
    an existing environment, you may also need to update security groups attached
    to resources, such as load balancers and databases, given your ECS tasks are no
    longer associated with the security groups applied at an ECS container instance
    level and have their own dedicated security groups.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到，配置ECS任务网络需要在ECS任务定义中指定awsvpc网络模式，并且需要向ECS服务添加网络配置，指定ECS任务将连接到的子网和将应用的安全组。如果您的应用由应用负载均衡器提供服务，您还需要确保与ECS服务关联的目标组的目标类型配置为“ip”，而不是默认的“instance”目标类型。如果您要将这些更改应用到现有环境中，您可能还需要更新附加到资源的安全组，例如负载均衡器和数据库，因为您的ECS任务不再与应用于ECS容器实例级别的安全组相关联，并且具有自己的专用安全组。
- en: In the next two chapters, you will learn how to deal with some of the more challenging
    operational aspects of ECS, including managing the life cycle of your ECS container
    instances and autoscaling your ECS clusters.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两章中，您将学习如何处理ECS的一些更具挑战性的运营方面，包括管理ECS容器实例的生命周期和对ECS集群进行自动扩展。
- en: Questions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True/false: The default Docker network configuration uses iptables to perform
    network address translation.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：默认的Docker网络配置使用iptables执行网络地址转换。
- en: You have an application that forms application-level clusters and uses EC2 metadata
    to discover the IP addresses of other hosts running your application. When you
    run your application using ECS, you notice that your applications are using a
    `172.16.x.x/16` address but your EC2 instances are configured with an `172.31.x.x/16`
    address. Which Docker network modes could help resolve this problem?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您有一个应用程序，形成应用程序级别的集群，并使用EC2元数据来发现运行您的应用程序的其他主机的IP地址。当您使用ECS运行应用程序时，您会注意到您的应用程序正在使用`172.16.x.x/16`地址，但您的EC2实例配置为`172.31.x.x/16`地址。哪些Docker网络模式可以帮助解决这个问题？
- en: 'True/false: The `host` value for `NetworkMode` in your ECS task definitions
    enables ECS task networking.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：在ECS任务定义的`NetworkMode`中，`host`值启用了ECS任务网络。
- en: You enable ECS task networking for an ECS task definition, however your application
    load balancers can no longer reach your application. You check the rules on the
    security group attached to your ECS container instance and confirm that your load
    balancers are permitted access to your application. How can you resolve this issue?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您为ECS任务定义启用了ECS任务网络，但是您的应用负载均衡器无法再访问您的应用程序。您检查了附加到ECS容器实例的安全组的规则，并确认您的负载均衡器被允许访问您的应用程序。您如何解决这个问题？
- en: You enable ECS task networking for an ECS task definition, however your containers
    fail on startup with an error unable to reach a location that is located on the
    internet. How can you resolve this issue?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您为ECS任务定义启用了ECS任务网络，但是您的容器在启动时失败，并显示无法访问位于互联网上的位置的错误。您如何解决这个问题？
- en: What is the maximum number of ENIs you can run on a t2.micro instance?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在t2.micro实例上最大可以运行多少个ENI？
- en: What is the maximum number of ECS tasks that you can run in task-networking
    mode on a t2.micro instance?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在t2.micro实例上以任务网络模式运行的ECS任务的最大数量是多少？
- en: What is the maximum number of containers that you can run in task-networking
    mode on a t2.micro instance?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在t2.micro实例上以任务网络模式运行的最大容器数量是多少？
- en: After enabling the ECS task-networking mode, you receive a deployment error
    indicating a target group has a target type instance, which is incompatible with
    the awsvpc network mode. How can you resolve this?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用ECS任务网络模式后，您收到一个部署错误，指示目标组具有目标类型实例，与awsvpc网络模式不兼容。您如何解决这个问题？
- en: After enabling the ECS task-networking mode, you receive a deployment error
    stating you cannot specify an IAM role for services that require a service-linked
    role. How can you resolve this?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用ECS任务网络模式后，您收到一个部署错误，指出您不能为需要服务关联角色的服务指定IAM角色。您如何解决这个问题？
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接，了解本章涵盖的主题的更多信息：
- en: Docker networking overview: [https://docs.docker.com/network/](https://docs.docker.com/network/)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker网络概述：[https://docs.docker.com/network/](https://docs.docker.com/network/)
- en: Task Networking with the awsvpc Network Mode: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用awsvpc网络模式的任务网络：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
- en: 'Under the Hood: Task Networking for Amazon ECS: [https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底层原理：Amazon ECS的任务网络：[https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/](https://aws.amazon.com/blogs/compute/under-the-hood-task-networking-for-amazon-ecs/)
- en: Maximum Network Interfaces for EC2 Instance Types: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2实例类型的最大网络接口：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
- en: NAT Gateways: [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NAT网关：[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html)
- en: CloudFormation NAT Gateway Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html)
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation NAT网关资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html)
- en: CloudFormation EC2 Elastic IP Address Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation EC2弹性IP地址资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html)
- en: CloudFormation EC2 Subnet Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html)
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation EC2子网资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html)
- en: CloudFormation EC2 Subnet Route Table Association Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation EC2 子网路由表关联资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html)'
- en: CloudFormation EC2 Route Table Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation EC2 路由表资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html)'
- en: CloudFormation EC2 Route Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation EC2 路由资源参考: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html)'
- en: Using Service-Linked Roles for Amazon ECS: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '为 Amazon ECS 使用服务关联角色: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)'
