["```cs\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Sort And Show\"/><br />\n```", "```cs\npublic class Quad : IComparable<Quad>\n```", "```cs\nprivate string name;\npublic Quad(string na)\n```", "```cs\nname = na;\n```", "```cs\nif(this.name.CompareTo(other.name) <0)\n```", "```cs\n{\n    return -1;\n}\nelse\n{\n    return 1;\n} \n```", "```cs\npublic virtual string Perimeter()\n```", "```cs\nreturn $\"The perimeter of {name} is \";\n```", "```cs\npublic class Square : Quad\n```", "```cs\nprivate double sideLength;\npublic Square(string n, double s) : base(n) {sideLength = s;}\n```", "```cs\nprivate double sideLength;\npublic Square(string n, double s) : base(n)\n{\n    sideLength = s;\n}\n```", "```cs\npublic override string Perimeter()\n```", "```cs\nreturn base.Perimeter() + 4 * sideLength;\n```", "```cs\npublic class Rectangle : Quad\n{\n    private double sideOne, sideTwo;\n    public Rectangle(string n, double s1, double s2) : base(n)\n    {\n        sideOne = s1; sideTwo = s2;\n    }\n    public override string Perimeter()\n    {\n        return base.Perimeter() + (2 * sideOne + 2 * sideTwo);\n    } \n}\n```", "```cs\nusing System;\npublic class Quad:IComparable<Quad>//implement IComparable\n{\n    private string name;//instance field\n    public Quad(string na)\n    {\n        name = na;//set value of instance field\n    }\n    //implement CompareTo to make list sortable\n    //in this case, the items are sorted by name\n    public int CompareTo(Quad other)\n    {\n        if(this.name.CompareTo(other.name) < 0)\n        {\n            return -1;\n        }\n        else\n        {\n            return 1;\n        }\n    }//put default code inside Perimeter\n    public virtual string Perimeter()\n    {\n        return $\"The perimeter of {name} is \";\n    }\n}\npublic class Square: Quad\n{\n    private double sideLength;\n    public Square(string n, double s):base(n)\n    {\n        sideLength = s;\n    }\n    //override Perimeter, calling the base portion\n    //and then adding refinement with 4*sideLength\n    public override string Perimeter()\n    {\n        return base.Perimeter() + 4 * sideLength;\n    }\n}\npublic class Rectangle: Quad\n{\n    private double sideOne, sideTwo;\n    public Rectangle(string n, double s1, double s2) : base(n)\n    {\n        sideOne = s1; sideTwo = s2;\n    }\n    //override Perimeter, calling the base portion\n    //and then adding refinement with 2sideOne+2sideTwo\n    public override string Perimeter()\n    {\n        return base.Perimeter() + (2 * sideOne + 2 * sideTwo);\n    } \n }\n```", "```cs\nQuad sqr = new Square(\"Square\", 4);\n```", "```cs\nQuad rect = new Rectangle(\"Rectangle\", 2, 5);\n```", "```cs\nusing System.Collections.Generic;\n```", "```cs\nList<Quad> lst = new List<Quad>(new Quad[] { sqr, rect, rect2, sqr1 });\n```", "```cs\nlst.Sort();\n```", "```cs\nif(lst[0] is Square)\n```", "```cs\nsampLabel.Text += ((Square)lst[0]).Perimeter();\n```", "```cs\nelse if(lst[0] is Rectangle)\n```", "```cs\nsampLabel.Text += ((Rectangle)lst[0]).Perimeter();\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Collections.Generic;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        sampLabel.Text = \"\";//clear label every time\n        Quad sqr = new Square(\"John\",4);//make a square\n        Quad rect = new Rectangle(\"Bob\", 2, 5);//make a rectangle\n        Quad rect2 = new Rectangle(\"Jerry\", 4, 5);//make another rectangle\n        //stick all these shapes into a list of quads\n        List<Quad> lst = new List<Quad>(new Quad[] { sqr, rect,rect2});\n        lst.Sort();//sort the list\n        if(lst[0] </span>is Square) //if it's asquare\n        {\n               //down cast to a square, and call Perimeter on it\n                sampLabel.Text += ((Square)lst[0]).Perimeter();\n        }\n        else if(lst[0] is Rectangle)\n        {\n            //if it's a rectangle, down cost to a rectangle, \n            //and call Perimeter\n            sampLabel.Text += ((Rectangle)lst[0]).Perimeter();\n        }\n    }\n} \n```"]