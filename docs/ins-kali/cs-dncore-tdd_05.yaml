- en: Data-Driven Unit Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据驱动单元测试
- en: In the last chapter, we discussed the attributes of good unit tests, as well
    as the two types of test supported by xUnit.net, **Fact** and **Theory**. Also,
    we walked through the creation of unit tests using the rich set of test assertions
    that are available in the xUnit.net unit testing framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了良好单元测试的属性，以及xUnit.net支持的两种测试类型**Fact**和**Theory**。此外，我们还通过xUnit.net单元测试框架中可用的丰富测试断言集合创建了单元测试。
- en: Unit tests written for a software project should be run repeatedly right from
    the development stage, during deployment, during maintenance, and, effectively,
    throughout the life cycle of the project. Often, these tests should be run on
    different data inputs following the same execution steps, while the tests, and
    essentially, the code being tested are expected to have consistent behavior, irrespective
    of the data input.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为软件项目编写的单元测试应该从开发阶段开始反复运行，在部署期间，维护期间，以及在项目的整个生命周期中都应该有效地运行。通常情况下，这些测试应该在不同的数据输入上运行相同的执行步骤，而测试和被测试的代码都应该在不同的数据输入下表现出一致的行为。
- en: Running tests on different sets of data can be achieved by creating or replicating
    existing tests with similar steps operating on the different desired data inputs.
    The issue with this approach is maintenance, since changes to the test's logic
    will have to be affected in the various replicated tests. xUnit.net solves this
    challenge through its data-driven unit tests feature, known as **theories**, which
    allows tests to be run on different sets of test data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用不同的数据集运行测试可以通过创建或复制具有相似步骤的现有测试来实现。这种方法的问题在于维护，因为必须在各种复制的测试中影响测试逻辑的更改。xUnit.net通过其数据驱动单元测试功能解决了这一挑战，称为**theories**，它允许在不同的测试数据集上运行测试。
- en: Data-driven unit tests, which can also be referred to as data-driven testing
    automation in xUnit.net, are tests decorated with the `Theory` attribute and have
    data passed in as parameters to these tests. Data passed to data-driven unit tests
    can come from a variety of sources, which can be inline through the use of the `InlineData`
    attribute. Data can also come from specific data sources, such as obtaining data
    from a flat file, web service, or from a database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动单元测试，也可以称为xUnit.net中的数据驱动测试自动化，是用`Theory`属性装饰的测试，并将数据作为参数传递给这些测试。传递给数据驱动单元测试的数据可以来自各种来源，可以通过使用`InlineData`属性进行内联。数据也可以来自特定的数据源，例如从平面文件、Web服务或数据库中获取数据。
- en: The sample data-driven unit tests explained in [Chapter 4](e51bcf25-f258-4c2d-9180-9a3291a2a406.xhtml), *.NET
    Core Unit Testing*, use an inline approach. There are other attributes that can
    be used for providing data to the tests—`MemberData` and `ClassData`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](e51bcf25-f258-4c2d-9180-9a3291a2a406.xhtml)中解释的示例数据驱动单元测试使用了内联方法。还有其他属性可以用于向测试提供数据，如`MemberData`和`ClassData`。
- en: 'In this chapter, we will walk through the creation of data-driven unit tests
    using the xUnit.net framework and cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过使用xUnit.net框架创建数据驱动单元测试，并涵盖以下主题：
- en: The benefits of data-driven unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据驱动单元测试的好处
- en: The xUnit.net `Theory` attribute for creating data-driven tests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建数据驱动测试的xUnit.net `Theory`属性
- en: Inline data-driven unit tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联数据驱动单元测试
- en: Property data-driven unit tests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性数据驱动单元测试
- en: Integrating data from other sources
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合来自其他来源的数据
- en: The benefits of data-driven unit testing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据驱动单元测试的好处
- en: '**Data-driven unit testing** is a concept known to provide great insight into
    code behavior, due to it being able to execute tests with different sets of data.
    The insight gained through data-driven unit testing can assist in making informed
    decisions about application development approaches and can identify potential
    areas that need improvement. Strategies can be formulated from reports and code
    coverage available from data unit tests, which can later be used to refactor code
    with potential performance issues and bugs in the application logic.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据驱动单元测试**是一个概念，因为它能够使用不同的数据集执行测试，所以它能够对代码行为提供深入的见解。通过数据驱动单元测试获得的见解可以帮助我们对应用程序开发方法做出明智的决策，并且可以识别出需要改进的潜在领域。可以从数据单元测试的报告和代码覆盖率中制定策略，这些策略可以后来用于重构具有潜在性能问题和应用程序逻辑中的错误的代码。'
- en: Some of the benefits of data-driven unit testing are explained in the following
    sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动单元测试的一些好处在以下部分进行了解释。
- en: Tests brevity
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试简洁性
- en: Through data-driven tests, it is easier to reduce redundancy while still maintaining
    comprehensive test coverage. This is because test code duplication can be avoided.
    Tests that would have been traditionally duplicated to test different datasets
    can now be reused for different datasets. When there are tests that have similar
    structures but with dissimilar data, this is an indication that the tests can
    be refactored as data-driven tests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过数据驱动测试，可以更容易地减少冗余，同时保持全面的测试覆盖。这是因为可以避免测试代码的重复。传统上需要为不同数据集重复测试的测试现在可以用于不同的数据集。当存在具有相似结构但具有不同数据的测试时，这表明可以将这些测试重构为数据驱动测试。
- en: Let's review the `CarLoanCalculator` class and the corresponding `LoanCalculatorTest`
    test class in the following snippets. This will provide a valuable insight into
    why data-driven testing can simplify testing while providing brevity of code when
    compared with the traditional approach to writing tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下片段中回顾`CarLoanCalculator`类和相应的`LoanCalculatorTest`测试类。与传统的编写测试方法相比，这将为我们提供宝贵的见解，说明为什么数据驱动测试可以简化测试，同时在编写代码时提供简洁性。
- en: '`CarLoanCalculator` extends the `LoanCalculator` class to override the `CalculateLoan`
    method to perform calculations related to a car loan and returns a `Loan` object
    that will be validated using xUnit.net assertions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`CarLoanCalculator`扩展了`LoanCalculator`类，覆盖了`CalculateLoan`方法，执行与汽车贷款相关的计算，并返回一个`Loan`对象，该对象将使用xUnit.net断言进行验证：'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To verify the consistent behavior of the `CarLoanCalculator` class, the `Loan`
    object returned by the `CalculateLoan` method will be validated using the following
    test scenarios when the method argument `LoanDTO` has different `LoanType`, `LocationType`,
    and `JobType` combinations. The `Test_CalculateLoan_ShouldReturnLoan` test method
    in the `CarLoanCalculatorTest` class validates each of the scenarios described:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证`CarLoanCalculator`类的一致行为，将使用以下测试场景验证`CalculateLoan`方法返回的`Loan`对象，当方法参数`LoanDTO`具有不同的`LoanType`、`LocationType`和`JobType`组合时。`CarLoanCalculatorTest`类中的`Test_CalculateLoan_ShouldReturnLoan`测试方法验证了描述的每个场景：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Test_CalculateLoan_ShouldReturnLoan` method in the preceding snippet contains
    lines of code with data to test the `CalculateLoan` method twice. This test clearly
    contains duplicate code with the test tightly coupled to the test data. Also,
    the test code is not clean because when more test scenarios are added, the test
    method will have to be modified by adding more lines of code, thereby making the
    test large and clumsy. With data-driven testing, this scenario can be avoided
    and having repeated code in tests can be eliminated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述片段中的`Test_CalculateLoan_ShouldReturnLoan`方法包含了用于测试`CalculateLoan`方法两次的代码行。这个测试明显包含了重复的代码，测试与测试数据紧密耦合。此外，测试代码不够清晰，因为当添加更多的测试场景时，测试方法将不得不通过添加更多的代码行来进行修改，从而使测试变得庞大而笨拙。通过数据驱动测试，可以避免这种情况，并且可以消除测试中的重复代码。
- en: Inclusive testing
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包容性测试
- en: Software application quality can be improved when business people and quality
    assurance testers are carried along in the automated testing process. They can
    populate the data source with the data required to execute the tests, with little
    technical knowledge required, especially when using data files as a data source.
    The tests can be run multiple times using different datasets to test the code thoroughly in
    order to ensure robustness.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当业务人员和质量保证测试人员参与自动化测试过程时，可以改善软件应用程序的质量。他们可以使用数据文件作为数据源，无需太多的技术知识，就可以向数据源中填充执行测试所需的数据。可以使用不同的数据集多次运行测试，以彻底测试代码，以确保其健壮性。
- en: Using data-driven testing, you have a clear separation of your tests and data.
    Tests that would have otherwise been muddled up with the data will now be separated
    using the appropriate logic. This ensures that the data source can be modified
    without making changes to the tests using them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据驱动测试，您可以清晰地分离测试和数据。原本可能会与数据混在一起的测试现在将使用适当的逻辑进行分离。这确保了数据源可以在不更改使用它们的测试的情况下进行修改。
- en: The overall quality of the application is improved through data-driven unit
    tests as you can have good coverage with the various datasets and have metrics
    to use to fine-tune and optimize the application being developed for improved
    performance in place.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过数据驱动单元测试，应用程序的整体质量得到改善，因为您可以使用各种数据集获得良好的覆盖率，并具有用于微调和优化正在开发的应用程序以获得改进性能的指标。
- en: xUnit.net theory attribute for creating data-driven tests
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: xUnit.net理论属性用于创建数据驱动测试
- en: 'In xUnit.net, data-driven tests are known as theories. They are tests decorated
    with the `Theory` attribute. When a test method is decorated with the `Theory`
    attribute, it must additionally be decorated with a data attribute, which will
    be used by the test runner to determine the source of the data to be used in executing
    the test:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在xUnit.net中，数据驱动测试被称为理论。它们是使用`Theory`属性装饰的测试。当测试方法使用`Theory`属性装饰时，必须另外使用数据属性装饰，测试运行器将使用该属性确定要在执行测试时使用的数据源：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When a test is marked as data theory, the data fed into it from the data source
    is directly mapped to the parameters of the test method. Unlike the regular test
    decorated with the `Fact` attribute, which is executed only once, the number of
    times a data theory is executed is based on the available data rows fetched from
    the data source.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试标记为数据理论时，从数据源中提供的数据直接映射到测试方法的参数。与使用`Fact`属性装饰的常规测试不同，数据理论的执行次数基于从数据源获取的可用数据行数。
- en: At least one data attribute is required to be passed as the test method argument
    for xUnit.net to treat the test as data-driven and execute it successfully. The
    data attribute to be passed to the test can be any of `InlineData`, `MemberData`,
    and `ClassData`. These data attributes are derived from `Xunit.sdk.DataAttribute`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要传递一个数据属性作为测试方法参数，以便xUnit.net将测试视为数据驱动并成功执行。要传递给测试的数据属性可以是`InlineData`、`MemberData`和`ClassData`中的任何一个。这些数据属性源自`Xunit.sdk.DataAttribute`。
- en: Inline data-driven unit tests
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联数据驱动单元测试
- en: '**Inline data-driven testing** is the most basic or simplest way of writing
    data-driven tests using the *xUnit.net framework*. Inline data-driven tests are
    written using the `InlineData` attribute, which is used to decorate the test method
    in addition to the `Theory` attribute:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**内联数据驱动测试**是使用*xUnit.net框架*编写数据驱动测试的最基本或最简单的方式。内联数据驱动测试使用`InlineData`属性编写，该属性用于装饰测试方法，除了`Theory`属性之外：'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Inline data-driven tests can be used when the test method requires parameters
    that are simple and does not accept class instantiation as an `InlineData` parameter.
    The major drawback of using the inline data-driven test is the lack of flexibility.
    Inline data used with a test cannot be reused with another test.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试方法需要简单的参数并且不接受类实例化作为`InlineData`参数时，可以使用内联数据驱动测试。使用内联数据驱动测试的主要缺点是缺乏灵活性。不能将内联数据与另一个测试重复使用。
- en: 'When you are using the `InlineData` attribute in a data theory, the data rows
    are hard-coded and passed inline into the test method. The desired data to be
    used for the test can be of any data type and is passed as a parameter into the
    `InlineData` attribute:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当在数据理论中使用`InlineData`属性时，数据行是硬编码的，并内联传递到测试方法中。要用于测试的所需数据可以是任何数据类型，并作为参数传递到`InlineData`属性中：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An inline data-driven test can have more than one `InlineData` attribute with
    the parameters to the test method specified. The syntax of multi `InlineData`
    data theory is specified in the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 内联数据驱动测试可以有多个`InlineData`属性，指定测试方法的参数。多个`InlineData`数据理论的语法在以下代码中指定：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `TestCheckWordLength_ShouldReturnBoolean` method can be changed to have
    three inline data rows, and more data rows can be added to the test as desired.
    To have clean tests, it is recommended to not have more than the necessary or
    required inline data per test:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCheckWordLength_ShouldReturnBoolean`方法可以更改为具有三个内联数据行，并且可以根据需要添加更多数据行到测试中。为了保持测试的清晰，建议每个测试不要超过必要或所需的内联数据：'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When writing inline data-driven unit tests, you must ensure that the number
    of parameters in the test method match the parameters in the data rows passed
    to the `InlineData` attribute; otherwise, the xUnit test runner will throw a `System.InvalidOperationException`.
    The `InlineData` attribute in the `TestCheckWordLength_ShouldReturnBoolean` method
    in the following snippet has been modified to take two parameters:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写内联数据驱动单元测试时，必须确保测试方法中的参数数量与传递给`InlineData`属性的数据行中的参数数量匹配；否则，xUnit测试运行器将抛出`System.InvalidOperationException`。以下代码片段中`TestCheckWordLength_ShouldReturnBoolean`方法中的`InlineData`属性已被修改为接受两个参数：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you run the data theory test in the preceding snippet, the xUnit test
    runner test fails with `InvalidOperationException`, as shown in the following
    screenshot, because two parameters `"word"` and `"name"` were passed to the `InlineData`
    attribute instead of the expected one parameter:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在前面的代码片段中运行数据理论测试时，xUnit测试运行器会因为传递了两个参数“word”和“name”给InlineData属性，而不是预期的一个参数，导致测试失败并显示`InvalidOperationException`，如下面的屏幕截图所示：
- en: '![](img/23ebb8d6-1117-4d33-ab01-019ba6d8ba69.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23ebb8d6-1117-4d33-ab01-019ba6d8ba69.png)'
- en: 'When you run an inline data-driven test, xUnit.net will create the number of
    tests, based on the number of `InlineData` attributes or data rows added to the
    test method. In the following snippet, xUnit.net will create two tests, one for
    the `InlineData` attribute with the argument `"name"` and the second for the argument
    `"city"`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行内联数据驱动测试时，xUnit.net将根据添加到测试方法的`InlineData`属性或数据行的数量创建测试的数量。在以下代码片段中，xUnit.net将创建两个测试，一个用于`InlineData`属性的参数“name”，另一个用于参数“city”：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you run the `TestCheckWordLength_ShouldReturnBoolean` test method in Visual
    Studio using the test runner, the test should successfully run and pass. The two
    tests created based on the attributes can be differentiated by the parameters
    passed into them from the `InlineData` attribute:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Visual Studio中使用测试运行器运行`TestCheckWordLength_ShouldReturnBoolean`测试方法，测试应该成功运行并通过。基于属性创建的两个测试可以通过从`InlineData`属性传递给它们的参数来区分：
- en: '![](img/134d525d-7134-4729-85a3-735ad3552326.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/134d525d-7134-4729-85a3-735ad3552326.png)'
- en: 'Now, let''s modify the `Test_CalculateLoan_ShouldReturnCorrectRate` test method
    in the section, *The benefits of data-driven unit testing*, to use `InlineData`
    to load the test data instead of hard-coding the test data directly in the code
    of the test method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改*数据驱动单元测试的好处*部分中的`Test_CalculateLoan_ShouldReturnCorrectRate`测试方法，使用`InlineData`来加载测试数据，而不是直接在测试方法的代码中硬编码测试数据：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Visual Studio, the preceding code snippet will give a syntax error, with
    the IntelliSense context menu showing the error—An attribute argument must be
    a constant expression, type of expression or array creation expression of an attribute
    parameter type:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，上述代码片段将导致语法错误，IntelliSense上下文菜单显示错误——属性参数必须是常量表达式、表达式类型或属性参数类型的数组创建表达式：
- en: '![](img/cbdb20bd-06a9-498b-be91-9f33f13b6bbc.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbdb20bd-06a9-498b-be91-9f33f13b6bbc.png)'
- en: Using properties or custom types as parameter types in the `InlineData` attribute
    is not allowed, which indicates that the new instance of the `LoanDTO` class cannot
    be used as an argument to the `InlineData` attribute. This is the limitation of
    the `InlineData` attribute as it cannot be used to load data from properties,
    classes, methods, or custom types.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InlineData`属性中使用属性或自定义类型作为参数类型是不允许的，这表明`LoanDTO`类的新实例不能作为`InlineData`属性的参数。这是`InlineData`属性的限制，因为它不能用于从属性、类、方法或自定义类型加载数据。
- en: Property data-driven unit tests
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性数据驱动单元测试
- en: The lack of flexibility encountered when writing inline data-driven tests can
    be overcome through the use of property data-driven tests. Property data-driven
    unit tests are written in xUnit.net through the use of the `MemberData` and `ClassData`
    attributes. Using the two attributes, data theories can be created with data loaded
    from disparate data sources, such as files or databases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写内联数据驱动测试时遇到的灵活性不足可以通过使用属性数据驱动测试来克服。属性数据驱动单元测试是通过使用`MemberData`和`ClassData`属性在xUnit.net中编写的。使用这两个属性，可以创建从不同数据源（如文件或数据库）加载数据的数据理论。
- en: MemberData attribute
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MemberData属性
- en: 'The `MemberData` attribute is used when data theories are to be created and
    loaded with data rows coming from following data sources:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当要创建并加载来自以下数据源的数据行的数据理论时，使用`MemberData`属性：
- en: Static property
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态属性
- en: Static field
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态字段
- en: Static method
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态方法
- en: When using `MemberData`, the data source must return independent object sets
    that are compatible with `IEnumerable<object[]>`. This is because the `return`
    property is enumerated by the `.ToList()` method before the test method is executed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`MemberData`时，数据源必须返回与`IEnumerable<object[]>`兼容的独立对象集。这是因为在执行测试方法之前，`return`属性会被`.ToList()`方法枚举。
- en: '`The Test_CalculateLoan_ShouldReturnCorrectRate` test method in the,*The benefits
    of data-driven unit testing* section, can be refactored to use the `MemberData`
    attribute to load the data for the test. A static `IEnumerable` method, `GetLoanDTOs`,
    is created to return a `LoanDTO` object using the `yield` statement to return
    the object to the test method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test_CalculateLoan_ShouldReturnCorrectRate`测试方法在*数据驱动单元测试的好处*部分中，可以重构以使用`MemberData`属性来加载测试的数据。创建一个静态的`IEnumerable`方法`GetLoanDTOs`，使用`yield`语句返回一个`LoanDTO`对象给测试方法：'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`The MemberData` attribute requires that the name of the data source is passed
    to it as a parameter for subsequent invocation to load the data rows for the test
    execution. The name of the static method, property, or field can be passed as
    a string into the `MemberData` attribute in this form—`MemberData("methodName")`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`MemberData`属性要求将数据源的名称作为参数传递给它，以便在后续调用中加载测试执行所需的数据行。静态方法、属性或字段的名称可以作为字符串传递到`MemberData`属性中，形式为`MemberData("methodName")`：'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, the data source name can be passed to the `MemeberData` attribute
    through the use of the `nameof` expression, which is a C# keyword that is used
    to get the string name of a variable, type, or member. The syntax is `MemberData(nameof(methodName))`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，数据源名称可以通过`nameof`表达式传递给`MemeberData`属性，`nameof`是C#关键字，用于获取变量、类型或成员的字符串名称。语法是`MemberData(nameof(methodName))`：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Similar to using static method with the `MemberData` attribute, static fields
    and properties can be used to provide datasets to data theories.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与`MemberData`属性一起使用静态方法类似，静态字段和属性可以用于提供数据理论的数据集。
- en: '`Test_CalculateLoan_ShouldReturnCorrectRate` can be refactored to use a static
    property in place of the method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test_CalculateLoan_ShouldReturnCorrectRate`可以重构以使用静态属性代替方法：'
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A static property, `LoanDTOs`, is created to return `IEnumerable<object[]>`,
    which is required to make it qualify for use as a parameter to the `MemberData`
    attribute. `LoanDTOs` is subsequently used as a parameter to the attribute:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个静态属性`LoanDTOs`，返回`IEnumerable<object[]>`，这是作为`MemberData`属性参数的资格要求。`LoanDTOs`随后用作属性的参数：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Whenever `Test_CalculateLoan_ShouldReturnCorrectRate` is run, two tests are
    created that correspond to the two datasets returned by either the static method
    or property used as the data source.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每当运行`Test_CalculateLoan_ShouldReturnCorrectRate`时，将创建两个测试，对应于作为数据源返回的两个数据集。
- en: 'Following the preceding approach requires that the static method, field, or
    property used to load the tests data is located in the same class as the data
    theory. In order to have tests well-organized, it is sometimes required that the
    tests method is separated in different classes from the static methods or properties
    used for loading the data:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循上述方法要求静态方法、字段或属性用于加载测试数据的位置与数据理论相同。为了使测试组织良好，有时需要将测试方法与用于加载数据的静态方法或属性分开放在不同的类中：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the test method is written in a separate class different from the static
    method, you have to specify the class containing the method in the `MemberData`
    attribute, using `MemberType`, and assign the containing class, using the class
    name, as shown in the following snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试方法写在与静态方法不同的单独类中时，必须在`MemberData`属性中指定包含方法的类，使用`MemberType`，并分配包含类，使用类名，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When using the static method, the method can also have a parameter, which you
    might want to use when processing the data. For example, you can pass an integer
    value to the method to specify the number of records to return. This parameter
    can be passed directly from the `MemberData` attribute to the static method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用静态方法时，该方法也可以有一个参数，当处理数据时可能需要使用该参数。例如，可以将整数值传递给方法，以指定要返回的记录数。该参数可以直接从`MemberData`属性传递给静态方法：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `GetLoanDTOs` method in `DataClass` can be refactored to take an integer
    parameter to be used to limit the number of records to be returned for populating
    the data rows required for the execution of `Test_CalculateLoan_ShouldReturnCorrectRate`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataClass`中的`GetLoanDTOs`方法可以重构为接受一个整数参数，用于限制要返回的记录数，以填充执行`Test_CalculateLoan_ShouldReturnCorrectRate`所需的数据行：'
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ClassData attribute
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ClassData属性
- en: '`ClassData` is another attribute that can be used to create data-driven tests
    by using data coming from a class. The `ClassData` attribute takes a class that
    can be instantiated to fetched data that will be used to execute the data theories.
    The class with the data must implement `IEnumerable<object[]>` with each data
    item returned as an `object` array. The `GetEnumerator` method must also be implemented.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClassData`是另一个属性，可以使用它来通过来自类的数据创建数据驱动测试。`ClassData`属性接受一个可以实例化以获取将用于执行数据理论的数据的类。具有数据的类必须实现`IEnumerable<object[]>`，每个数据项都作为`object`数组返回。还必须实现`GetEnumerator`方法。'
- en: 'Let''s create a `LoanDTOData` class to be used to provide data to test the
    `Test_CalculateLoan_ShouldReturnCorrectRate` method. `LoanDTOData` will return
    `IEnumerable` objects of `LoanDTO`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`LoanDTOData`类，用于提供数据以测试`Test_CalculateLoan_ShouldReturnCorrectRate`方法。`LoanDTOData`将返回`LoanDTO`的`IEnumerable`对象：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After the `LoanDTOData` class has been implemented, `Test_CalculateLoan_ShouldReturnCorrectRate`
    can be decorated with the `ClassData` attribute with `LoanDTOData` passed as the
    attribute parameter to specify that `LoanDTOData` will be instantiated to return
    data required for the execution of the test method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了`LoanDTOData`类之后，可以使用`ClassData`属性装饰`Test_CalculateLoan_ShouldReturnCorrectRate`，并将`LoanDTOData`作为属性参数传递，以指定`LoanDTOData`将被实例化以返回测试方法执行所需的数据：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Implementing the enumerator can be flexibly done using any suitable approach,
    either by using a class property or a method. Before the test is run, the xUnit.net
    framework will call `.ToList()` on the class. While using the `ClassData` attribute
    for passing data to your tests, you always have to create a dedicated class to
    contain your data.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何合适的方法，都可以灵活地实现枚举器，无论是使用类属性还是方法。在运行测试之前，xUnit.net框架将在类上调用`.ToList()`。在使用`ClassData`属性将数据传递给您的测试时，您总是需要创建一个专用类来包含您的数据。
- en: Integrating data from other sources
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合来自其他来源的数据
- en: While you can write basic data-driven tests with the xUnit.net theory attributes
    discussed earlier, there are times where you want to do more, such as connecting
    to an SQL Server database table to fetch data to be used in executing your tests.
    Earlier versions of xUnit.net had other attributes from `xUnit.net.extensions`
    that allow you to easily get data from different sources to be used in your tests.
    The `xUnit.net.extensions` package is no longer available in **xUnit.net v2**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用前面讨论过的xUnit.net理论属性编写基本的数据驱动测试，但有时您可能希望做更多的事情，比如连接到SQL Server数据库表，以获取用于执行测试的数据。xUnit.net的早期版本具有来自`xUnit.net.extensions`的其他属性，允许您轻松地从不同来源获取数据，以用于您的测试。`xUnit.net.extensions`包在**xUnit.net
    v2**中不再可用。
- en: However, the classes in `xUnit.net.extensions` are available in sample projects
    at: [https://github.com/xUnit.net/samples.xUnit.net.](https://github.com/xUnit.net/samples.xUnit.net) The
    code from the sample projects can be copied to your project if you wish to use
    this attribute.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，`xUnit.net.extensions`中的类在示例项目中可用：[https://github.com/xUnit.net/samples.xUnit.net.](https://github.com/xUnit.net/samples.xUnit.net)如果您希望使用此属性，可以将示例项目中的代码复制到您的项目中。
- en: SqlServerData attribute
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SqlServerData属性
- en: Inside the `SqlDataExample` folder of the projects, there are files that can
    be copied to your project to give you the functionality of getting data by connecting
    directly to an SQL Server database or any data source that can be accessed using
    *OLEDB*. The four classes located in the folder are `DataAdapterDataAttribute`,
    `DataAdapterDataAttributeDiscoverer`, `OleDbDataAttribute`, and `SqlServerDataAttribute`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的`SqlDataExample`文件夹中，有一些文件可以复制到您的项目中，以便为您提供直接连接到SQL Server数据库或可以使用*OLEDB*访问的任何数据源的功能。该文件夹中的四个类是`DataAdapterDataAttribute`，`DataAdapterDataAttributeDiscoverer`，`OleDbDataAttribute`和`SqlServerDataAttribute`。
- en: It is important to note that since .NET Core does not support OLEDB, the preceding
    extension cannot be used in a .NET Core project. This is because OLEDB technology
    was based on COM, which is dependent on components that are available only on
    Windows. But you can use this extension in a regular .NET project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，由于.NET Core不支持OLEDB，因此无法在.NET Core项目中使用前面的扩展。这是因为OLEDB技术是基于COM的，依赖于仅在Windows上可用的组件。但是您可以在常规.NET项目中使用此扩展。
- en: The code listing provided in the xUnit.net repository on GitHub has the `SqlServerData`
    attribute that can be used to decorate data theories to fetch data for test execution
    directly from Microsoft SQL Server database tables.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的xUnit.net存储库中提供了`SqlServerData`属性的代码清单，该属性可用于装饰数据理论，以直接从Microsoft SQL
    Server数据库表中获取测试执行所需的数据。
- en: 'To test the `SqlServerData` attribute, you should create a database in your
    instance of SQL Server and name it `TheoryDb`. Create a table with the name `Palindrome`;
    it should have a column named `varchar`. Populate the table with sample data to
    be used for the test:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试`SqlServerData`属性，您应该在您的SQL Server实例中创建一个名为`TheoryDb`的数据库。创建一个名为`Palindrome`的表；它应该有一个名为`varchar`的列。用样本数据填充表，以便用于测试：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `PalindronmeChecker` class runs with an `IsWordPalindrome` method to verify
    a word is a palindrome, as shown in the following snippet. A palindrome is a word
    that can be read in both directions—for example, `dad` or `civic`. A quick way
    to check this without an algorithm implementation is to reverse the word and use
    the string `SequenceEqual` method to check if the two words are equal:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`PalindronmeChecker`类运行一个`IsWordPalindrome`方法来验证一个单词是否是回文，如下面的代码片段所示。回文是一个可以在两个方向上阅读的单词，例如`dad`或`civic`。在不使用算法实现的情况下，快速检查这一点的方法是反转单词并使用字符串`SequenceEqual`方法来检查这两个单词是否相等：'
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To test the `IsWordPalindrome` method, a test method, `Test_IsWordPalindrome_ShouldReturnTrue`,
    will be implemented which will be decorated with the `SqlServerData` attribute.
    This attribute requires three parameters—the database server address, the database
    name, and the select statement for retrieving the data from the table or view
    containing the data to be loaded for the test:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试`IsWordPalindrome`方法，将实现一个测试方法`Test_IsWordPalindrome_ShouldReturnTrue`，并用`SqlServerData`属性进行装饰。此属性需要三个参数——数据库服务器地址、数据库名称和用于从包含要加载到测试中的数据的表或视图中检索数据的选择语句：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When `Test_IsWordPalindrome_ShouldReturnTrue` is run, the `SqlServerData` attribute
    is executed to fetch the records from the database table to be used for executing
    the test method. The number of tests to be created depends on the available records
    in the table. In this case, three tests will be created and executed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`Test_IsWordPalindrome_ShouldReturnTrue`时，将执行`SqlServerData`属性，以从数据库表中获取记录，用于执行测试方法。要创建的测试数量取决于表中可用的记录。在这种情况下，将创建并执行三个测试：
- en: '![](img/f7472981-0328-44c8-8843-367ee078defd.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7472981-0328-44c8-8843-367ee078defd.png)'
- en: Custom attribute
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义属性
- en: Similar to the `SqlServerData` attribute available in the xUnit.net GitHub repository,
    you can create a custom attribute to load data from any source. A custom attribute
    class must implement `DataAttribute`, which is an abstract class that represents
    a data source to be used by a theory. The custom attribute class must override
    and implement the `GetData` method. This method returns `IEnumerable<object[]>`,
    which is used to wrap the content of the dataset to be returned.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与xUnit.net GitHub存储库中可用的`SqlServerData`属性类似，您可以创建一个自定义属性来从任何源加载数据。自定义属性类必须实现`DataAttribute`，这是一个表示理论要使用的数据源的抽象类。自定义属性类必须重写并实现`GetData`方法。该方法返回`IEnumerable<object[]>`，用于包装要返回的数据集的内容。
- en: Let's create a `CsvData` custom attribute that can be used to load data from
    a `.csv` file for use in data-driven unit tests. The class will have a constructor
    that takes two parameters. The first is a string argument containing the full
    path to the `.csv` file. The second argument is a Boolean value, which when `true`,
    specifies if the first row of data contained in the `.csv` file should be used
    as the column header and when `false`, specifies ignoring column headers in the
    file, meaning the CSV data starts from the first row.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`CsvData`自定义属性，可以用于从`.csv`文件中加载数据，用于数据驱动的单元测试。该类将具有一个构造函数，它接受两个参数。第一个是包含`.csv`文件的完整路径的字符串参数。第二个参数是一个布尔值，当为`true`时，指定是否应使用包含在`.csv`文件中的数据的第一行作为列标题，当为`false`时，指定忽略文件中的列标题，这意味着CSV数据从第一行开始。
- en: 'The custom attribute class is `CsvDataAttribute`, which implements the `DataAttribute`
    class. The class is decorated with the `AttributeUsage` attribute, which has the
    following parameters—`AttributeTargets` to specify the valid application elements
    to apply the attribute, `AllowMultiple` to specify if the multiple instances of
    the attribute can be specified on a single application element, and `Inherited`
    to specify if the attribute can be inherited by derived classes or overriding
    members:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义属性类是`CsvDataAttribute`，它实现了`DataAttribute`类。该类用`AttributeUsage`属性修饰，该属性具有以下参数—`AttributeTargets`用于指定应用属性的有效应用元素，`AllowMultiple`用于指定是否可以在单个应用元素上指定属性的多个实例，`Inherited`用于指定属性是否可以被派生类或覆盖成员继承：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The next step is to implement the `GetData` method, which will override the
    implementation available in the `DataAttribute` class. This method uses the `StreamReader`
    class in the `System.IO` namespace to read the contents of the `.csv` file a line
    at a time. A second utility method, `ConverCsv`, is implemented to convert the
    CSV data to an integer for integer values:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是实现`GetData`方法，该方法将覆盖`DataAttribute`类中可用的实现。此方法使用`System.IO`命名空间中的`StreamReader`类逐行读取`.csv`文件的内容。实现了第二个实用方法`ConverCsv`，用于将CSV数据转换为整数值：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The created custom attribute can now be used with the xUnit.net `Theory` attribute
    to provide data to theories from `.csv` files.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的自定义属性现在可以与xUnit.net的`Theory`属性一起使用，以从`.csv`文件中提供数据给理论。
- en: 'The `Test_IsWordPalindrome_ShouldReturnTrue` test method will be modified to
    use the newly created `CsvData` attribute to get the data for the test execution
    from a `.csv` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test_IsWordPalindrome_ShouldReturnTrue`测试方法将被修改以使用新创建的`CsvData`属性，以从`.csv`文件中获取测试执行的数据：'
- en: '[PRE26]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When you run the `Test_IsWordPalindrome_ShouldReturnTrue` test method in the
    preceding snippet in Visual Studio, there will be three tests created by the test
    runner. This should correspond to the number of records or data lines retrieved
    from the `.csv` file. The test information can be viewed from the Test Explorer:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Visual Studio中运行前面片段中的`Test_IsWordPalindrome_ShouldReturnTrue`测试方法时，测试运行器将创建三个测试。这应该对应于从`.csv`文件中检索到的记录或数据行数。测试信息可以从测试资源管理器中查看：
- en: '![](img/7bae2c94-06b8-4b72-9505-3493b7cfb2c8.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bae2c94-06b8-4b72-9505-3493b7cfb2c8.png)'
- en: The `CsvData` custom attribute can retrieve data from any `.csv` file, irrespective
    of the numbers of columns present on a single line. The records will be fetched
    and passed to the `Theory` attribute in the test method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`CsvData`自定义属性可以从任何`.csv`文件中检索数据，无论单行上存在多少列。记录将被提取并传递给测试方法中的`Theory`属性。'
- en: 'Let''s create a method with two integer parameters, `firstNumber` and `secondNumber`.
    The method will calculate the greatest common divisor of integer values, `firstNumber`
    and `secondNumber`. The greatest common divisor of the two integers is the largest
    value that divides the two integers:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个具有两个整数参数`firstNumber`和`secondNumber`的方法。该方法将计算整数值`firstNumber`和`secondNumber`的最大公约数。这两个整数的最大公约数是能够整除这两个整数的最大值：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s write a test method to verify the `GetGcd` method. `Test_GetGcd_ShouldRetunTrue`
    will be a data theory and have three integer parameters—`firstNumber`, `secondNumber`,
    and `gcdValue`. The method will check if `gdcValue` supplied in the parameter
    matches what the `GetGcd` method returns when called. The data for the tests will
    be loaded from a `.csv` file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个测试方法来验证`GetGcd`方法。`Test_GetGcd_ShouldRetunTrue`将是一个数据理论，并具有三个整数参数—`firstNumber`、`secondNumber`和`gcdValue`。该方法将检查在调用时`gdcValue`参数中提供的值是否与调用时`GetGcd`方法返回的值匹配。测试的数据将从`.csv`文件中加载：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Based on the value provided in the `.csv` file, the tests will be created.
    The following screenshot shows the outcome of `Test_GetGcdShouldReturnTrue` when
    run. Three tests were created; one passed and two failed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`.csv`文件中提供的值，将创建测试。以下屏幕截图显示了运行时`Test_GetGcdShouldReturnTrue`的结果。创建了三个测试；一个通过，两个失败：
- en: '![](img/53b2079c-961e-4f2b-983f-04c88278c973.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53b2079c-961e-4f2b-983f-04c88278c973.png)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Data-driven unit testing is an important concept of TDD that brings many benefits,
    by allowing you to test your code base extensively with real-life data from multiple
    data sources, giving you the insight needed to tweak and refactor code for better
    performance and robustness.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动的单元测试是TDD的重要概念，它带来了许多好处，可以让您使用来自多个数据源的真实数据广泛测试代码库，为您提供调整和重构代码以获得更好性能和健壮性所需的洞察力。
- en: In this chapter, we covered the benefits of data-driven testing and how to write
    effective data-driven tests using the inline and properties attributes of xUnit.net.
    Furthermore, we explored data-driven unit testing using the `Theory` attribute
    available in xUnit.net. This allows you to unit test your code for appropriate
    validation and verification over a wide range of inputs coming from different
    data sources.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了数据驱动测试的好处，以及如何使用xUnit.net的内联和属性属性编写有效的数据驱动测试。此外，我们还探讨了在xUnit.net中使用的`Theory`属性进行数据驱动的单元测试。这使您能够针对来自不同数据源的广泛输入对代码进行适当的验证和验证。
- en: While the default data source attributes provided by xUnit.net are very useful,
    you can further extend the `DataAttribute` class and create a custom attribute
    to load data from another source. We walked through the implementation of the `CsvData`
    custom attribute to load test data from a `.csv` file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然xUnit.net提供的默认数据源属性非常有用，但您可以进一步扩展`DataAttribute`类，并创建一个自定义属性来从另一个源加载数据。我们演示了`CsvData`自定义属性的实现，以从`.csv`文件加载测试数据。
- en: In the next chapter, we will delve into another important and useful TDD concept,
    dependencies mocking. Mocking allows you to effectively unit test your methods
    and classes in isolation without having to construct or execute the code of the
    dependencies directly.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨另一个重要且有用的TDD概念，即依赖项模拟。模拟允许您在不必直接构造或执行依赖项代码的情况下，有效地对方法和类进行单元测试。
