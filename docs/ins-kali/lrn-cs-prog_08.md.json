["```cs\npublic enum Status { Started, Stopped }\npublic delegate void StatusChange(Status status);\n```", "```cs\npublic class Engine\n{\n\u00a0\u00a0\u00a0\u00a0private StatusChange statusChangeHandler;\n\u00a0\u00a0\u00a0\u00a0public void RegisterStatusChangeHandler(StatusChange handler)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler = handler;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// start the engine\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (statusChangeHandler != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler(Status.Started);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// stop the engine\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (statusChangeHandler != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler(Status.Stopped);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Engine engine = new Engine();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.RegisterStatusChangeHandler\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(OnEngineStatusChanged); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Stop();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private static void OnEngineStatusChanged(Status status)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Engine is now {status}\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nEngine is now Started\nEngine is now Stopped\n```", "```cs\npublic class Engine\n{\n\u00a0\u00a0\u00a0\u00a0private StatusChange statusChangeHandler;\n\u00a0\u00a0\u00a0\u00a0public void RegisterStatusChangeHandler(StatusChange handler)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler += handler;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void UnregisterStatusChangeHandler(StatusChange handler)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler -= handler;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler?.Invoke(Status.Started);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0statusChangeHandler?.Invoke(Status.Stopped);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Engine engine = new Engine();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.RegisterStatusChangeHandler\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(OnEngineStatusChanged); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.RegisterStatusChangeHandler\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(OnEngineStatusChanged2); \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Stop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.UnregisterStatusChangeHandler\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(OnEngineStatusChanged2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private static void OnEngineStatusChanged(Status status)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Engine is now {status}\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private static void OnEngineStatusChanged2(Status status)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File.AppendAllText(@\"c:\\temp\\engine.log\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Engine is now {status}\\n\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nEngine is now Started\nEngine is now Stopped\nEngine is now Started\n```", "```cs\npublic class Engine\n{\n\u00a0\u00a0\u00a0\u00a0public event StatusChange StatusChanged;\n\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StatusChanged?.Invoke(Status.Started);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StatusChanged?.Invoke(Status.Stopped);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nclass Program\n{\n\u00a0\u00a0\u00a0\u00a0static void Main(string[] args)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Engine engine = new Engine();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.StatusChanged += OnEngineStatusChanged;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.StatusChanged += \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0status => Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Engine is now {status}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Stop();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.StatusChanged -= OnEngineStatusChanged;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine.Start();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private static void OnEngineStatusChanged(Status status)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File.AppendAllText(@\"c:\\temp\\engine.log\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"Engine is now {status}\\n\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic class EngineEventArgs : EventArgs\n{\n\u00a0\u00a0\u00a0\u00a0public Status Status { get; private set; }\n\u00a0\u00a0\u00a0\u00a0public EngineEventArgs(Status s)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Status = s;\n\u00a0\u00a0\u00a0\u00a0}\n}\npublic delegate void StatusChange(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0object sender, EngineEventArgs args);\npublic class Engine\n{\n\u00a0\u00a0\u00a0\u00a0public event StatusChange StatusChanged;\n\u00a0\u00a0\u00a0\u00a0public void Start()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StatusChanged?.Invoke(this, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new EngineEventArgs(Status. Started));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Stop()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StatusChanged?.Invoke(this, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new EngineEventArgs(Status.Stopped));\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar o = new { Name = \"M270 Turbo\", Capacity = 1600, \nPower = 75.0 };\nConsole.WriteLine($\"{o.Name} {o.Capacity / 1000.0}l \n{o.Power}kW\");\n```", "```cs\nclass Engine\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\n\u00a0\u00a0\u00a0\u00a0public Engine(string name, int capacity, double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar e = new Engine(\"M270 Turbo\", 1600, 75.0);\nvar o = new { e.Name, e.Power };\nConsole.WriteLine($\"{o.Name} {o.Power}kW\");\n```", "```cs\nvar engine = new Tuple<string, int, double>(\"M270 Turbo\", 1600, 75);\nvar engine = Tuple.Create(\"M270 Turbo\", 1600, 75);\n```", "```cs\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{engine.Item1} {engine.Item2/1000.0}l {engine.Item3}kW\");\n```", "```cs\nvar engine = Tuple.Create(\n\u00a0\u00a0\u00a0\u00a0\"M270 DE16 LA R\", 1595, 83, 73.7, 180, \"gasoline\", 2015, \n\u00a0\u00a0\u00a0\u00a0Tuple.Create(75, 90, 115));\nConsole.WriteLine($\"{engine.Item1} powers: {engine.Rest.Item1}\");\n```", "```cs\nM270 DE16 LA R powers: (75, 90, 115)\n```", "```cs\nvar engine = new Tuple<string, int, int, double, int, string, int, Tuple<int, int, int>>\n\u00a0\u00a0\u00a0\u00a0(\"M270 DE16 LA R\", 1595, 83, 73.7, 180, \"gasoline\", 2015,\n\u00a0\u00a0\u00a0\u00a0new Tuple<int, int, int>(75, 90, 115));\nConsole.WriteLine($\"{engine.Item1} powers: {engine.Rest}\");\n```", "```cs\nValueTuple<string, int, double> engine = (\"M270 Turbo\", 1600, 75.0);\n(string, int, double) engine = (\"M270 Turbo\", 1600, 75.0);\nvar engine = (\"M270 Turbo\", 1600, 75.0);\n```", "```cs\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{engine.Item1} {engine.Item2/1000.0}l {engine.Item3}kW\");\n```", "```cs\nvar engine = (Name: \"M270 Turbo\", Capacity: 1600, Power: 75.0);\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{engine.name} {engine.capacity / 1000.0}l {engine.power}kW\");\n```", "```cs\n(string Name, int Capacity, double Power) engine = \n\u00a0\u00a0\u00a0\u00a0(\"M270 Turbo\", 1600, 75.0);\n(string Name, int Capacity, double Power) engine = \n\u00a0\u00a0\u00a0\u00a0(name: \"M270 Turbo\", cap: 1600, pow: 75.0);\n```", "```cs\nvar name = \"M270 Turbo\";\nvar capacity = 1600;\nvar engine = (name, capacity, 75);\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{engine.name} {engine.capacity / 1000.0}l {engine.Item3}kW\");\n```", "```cs\n(string, int, double) GetEngine()\n{\n\u00a0\u00a0\u00a0\u00a0return (\"M270 Turbo\", 1600, 75.0);\n}\n```", "```cs\n(string Name, int Capacity, double Power) GetEngine2()\n{\n\u00a0\u00a0\u00a0\u00a0return (\"M270 Turbo\", 1600, 75.0);\n}\n```", "```cs\nvar e1 = (\"M270 Turbo\", 1600, 75.0);\nvar e2 = (Name: \"M270 Turbo\", Capacity: 1600, Power: 75.0);\nConsole.WriteLine(e1 == e2);\n```", "```cs\n(int, long) t1 = (1, 2);\n(long, int) t2 = (1, 2);\nConsole.WriteLine(t1 == t2);\n```", "```cs\n(string name, int capacity, double power) = GetEngine();\n(var name, var capacity, var power) = GetEngine();\nvar (name, capacity, power) = GetEngine();\n(var name, var capacity, double power) = GetEngine();\n```", "```cs\n(var name, _, _) = GetEngine();\n```", "```cs\nclass Engine\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\u00a0\u00a0\u00a0\u00a0public Engine(string name, int capacity, double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void Deconstruct(out string name, out int capacity, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = Name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capacity = Capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0power = Power;\n\u00a0\u00a0\u00a0\u00a0}\n}\nvar engine = new Engine(\"M270 Turbo\", 1600, 75.0);\nvar (Name, Capacity, Power) = engine;\n```", "```cs\nclass Engine\n{\n\u00a0\u00a0\u00a0\u00a0public string Name { get; }\n\u00a0\u00a0\u00a0\u00a0public int Capacity { get; }\n\u00a0\u00a0\u00a0\u00a0public double Power { get; }\n\u00a0\u00a0\u00a0\u00a0public Engine(string name, int capacity, double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Capacity = capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Power = power;\n\u00a0\u00a0\u00a0\u00a0} \n}\nstatic class EngineExtension\n{\n\u00a0\u00a0\u00a0\u00a0public static void Deconstruct(this Engine engine, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out string name, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out int capacity, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0out double power)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name = engine.Name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capacity = engine.Capacity;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0power = engine.Power;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar engine = new Engine(\"M270 Turbo\", 1600, 75.0);\nConsole.WriteLine(engine == (\"M270 Turbo\", 1600, 75.0));\n```", "```cs\nclass Airplane\n{\n\u00a0\u00a0\u00a0\u00a0public void Fly() { }\n}\nclass Bike\n{\n\u00a0\u00a0\u00a0\u00a0public void Ride() { }\n}\nclass Car\n{\n\u00a0\u00a0\u00a0\u00a0public bool HasAutoDrive { get; }\n\u00a0\u00a0\u00a0\u00a0public void Drive() { }\n\u00a0\u00a0\u00a0\u00a0public void AutoDrive() { }\n}\n```", "```cs\nvoid SetInMotion(object vehicle)\n{\n\u00a0\u00a0\u00a0\u00a0if (vehicle is null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Vehicle must not be null\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle));\n\u00a0\u00a0\u00a0\u00a0else if (vehicle is Airplane a)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a.Fly();\n\u00a0\u00a0\u00a0\u00a0else if (vehicle is Bike b)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b.Ride();\n\u00a0\u00a0\u00a0\u00a0else if (vehicle is Car c)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (c.HasAutoDrive) c.AutoDrive();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else c.Drive();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Unexpected vehicle type\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle)); \n}\n```", "```cs\nbool IsTrue(object value)\n{\n\u00a0\u00a0\u00a0\u00a0if (value is null) return false;\n\u00a0\u00a0\u00a0\u00a0else if (value is 1) return true;\n\u00a0\u00a0\u00a0\u00a0else if (value is true) return true;\n\u00a0\u00a0\u00a0\u00a0else if (value is \"true\") return true;\n\u00a0\u00a0\u00a0\u00a0else if (value is \"1\") return true;\n\u00a0\u00a0\u00a0\u00a0return false;\n}\nConsole.WriteLine(IsTrue(null));\u00a0\u00a0\u00a0// False\nConsole.WriteLine(IsTrue(0));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// False\nConsole.WriteLine(IsTrue(1));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// True\nConsole.WriteLine(IsTrue(true));\u00a0\u00a0\u00a0// True\nConsole.WriteLine(IsTrue(\"true\")); // True\nConsole.WriteLine(IsTrue(\"1\"));\u00a0\u00a0\u00a0\u00a0// True\nConsole.WriteLine(IsTrue(\"demo\")); // False\n```", "```cs\nvoid SetInMotion(object vehicle)\n{\n\u00a0\u00a0\u00a0\u00a0switch (vehicle)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Airplane a:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a.Fly();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Bike b:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b.Ride();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Car c:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (c.HasAutoDrive) c.AutoDrive();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else c.Drive();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case null:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Vehicle must not be null\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Unexpected vehicle type\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle));\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvoid SetInMotion(object vehicle)\n{\n\u00a0\u00a0\u00a0\u00a0switch (vehicle)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Airplane a:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a.Fly();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Bike b:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b.Ride();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Car c when c.HasAutoDrive:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.AutoDrive();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case Car c:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0c.Drive();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case null:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentNullException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Vehicle must not be null\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new ArgumentException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: \"Unexpected vehicle type\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0paramName: nameof(vehicle)); \n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvoid ExecuteCommand(string command)\n{\n\u00a0\u00a0\u00a0\u00a0switch(command)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case \"add\":\u00a0\u00a0/* add */\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case \"del\":\u00a0\u00a0/* delete */ break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case \"exit\": /* exit */\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case var o when (o?.Trim().Length ?? 0) == 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* do nothing */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* invalid command */\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar pattern = @\"(\\d{4})-(1[0-2]|0[1-9]|[1-9]{1})-(3[01]|[12][0-9]|0[1-9]|[1-9]{1})\";\nvar success = Regex.IsMatch(\"2019-12-25\", pattern);\n// or\nvar regex = new Regex(pattern);\nvar success = regex.IsMatch(\"2019-12-25\");\n```", "```cs\nvar success = Regex.IsMatch(\"2019-12-25\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pattern,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RegexOptions.ECMAScript,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TimeSpan.FromMilliseconds(1));\n```", "```cs\nvar pattern =\n\u00a0\u00a0\u00a0\u00a0@\"(\\d{4})-(1[0-2]|0[1-9]|[1-9]{1})-(3[01]|[12][0-9]|0[1-9]|[1-9]{1})\";\nvar match = Regex.Match(\"2019-12-25\", pattern);\nConsole.WriteLine(match.Value);\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{match.Groups[1]}.{match.Groups[2]}.{match.Groups[3]}\");\n```", "```cs\nvar pattern =\n\u00a0\u00a0\u00a0\u00a0@\"(?<year>\\d{4})-(?<month>1[0-2]|0[1-9]|[1-9]{1})-(?<day>3[01]|[12][0-9]|0[1-9]|[1-9]{1})\";\nvar match = Regex.Match(\"2019-12-25\", pattern);\nConsole.WriteLine(\n\u00a0\u00a0\u00a0\u00a0$\"{match.Groups[\"year\"]}-{match.Groups[\"month\"]}-{match.Groups[\"day\"]}\");\n```", "```cs\nvar text = \"2019-05-01\\n2019-5-9\\n2019-12-25\\n2019-13-21\\n2019-1-32\";\nvar pattern =\n\u00a0\u00a0\u00a0\u00a0@\"^(\\d{4})-(1[0-2]|0[1-9]|[1-9]{1})-(3[01]|[12][0-9]|0[1-9]|[1-9]{1})$\";\nvar matches = Regex.Matches(\n\u00a0\u00a0text, pattern, RegexOptions. Multiline); \nforeach(Match match in matches)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"[{match.Index}..{match.Length}]={match. Value}\");\n}\n```", "```cs\n[0..10]=2019-05-01\n[11..8]=2019-5-9\n[20..10]=2019-12-25\n```", "```cs\nvar text = \"2019-12-25\";\nvar pattern = @\"(\\d{4})-(1[0-2]|0[1-9]|[1-9]{1})-(3[01]|[12]\n\u00a0\u00a0\u00a0\u00a0[0-9]|0[1-9]|[1-9]{1})\";\nvar result = Regex.Replace(\n\u00a0\u00a0\u00a0\u00a0text, pattern,\n\u00a0\u00a0\u00a0\u00a0m => $\"{m.Groups[2]}/{m.Groups[3]}/{m.Groups[1]}\");\n```", "```cs\nstatic class StringExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static string Reverse(string s)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var charArray = s.ToCharArray();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Array.Reverse(charArray);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new string(charArray);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar text = \"demo\";\nvar rev = StringExtensions.Reverse(text);\n```", "```cs\nstatic class StringExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static string Reverse(this string s)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var charArray = s.ToCharArray();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Array.Reverse(charArray);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new string(charArray);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar text = \"demo\";\nvar rev = text.Reverse();\n```", "```cs\nstatic class ExceptionExtensions\n{\n\u00a0\u00a0\u00a0\u00a0public static string AllMessages(this Exception exception, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bool reverse = false)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var messages = new List<string>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var ex = exception;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(ex != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages.Add(ex.Message);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ex = ex.InnerException;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (reverse) messages.Reverse();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return string.Join(Environment.NewLine, messages);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar exception = \n\u00a0\u00a0\u00a0\u00a0new InvalidOperationException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"An invalid operation occurred\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new NotSupportedException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"The operation is not supported\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new InvalidCastException(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cannot apply cast!\")));\nConsole.WriteLine(exception.AllMessages());\nConsole.WriteLine(exception.AllMessages(true));\n```"]