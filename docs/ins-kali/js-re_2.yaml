- en: Chapter 2. The Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。基础知识
- en: 'In the previous chapter, we have already seen that in order to match a substring,
    you simply need to write the string inside a regular expression. For example,
    to match `hello`, you would create this variable:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们已经看到为了匹配一个子字符串，你只需要在正则表达式中写入这个字符串。例如，要匹配`hello`，你可以创建这个变量：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We also learned that if we want to match all occurrences of the string or character
    of the regular expression, we can use the `g` flag within Regex. However, situations
    where you have as clear a pattern like these are rare, and even when they come
    up, it's arguable whether **Regex** is even required. You really see the true
    power of regular expressions when you have less concrete information.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学到，如果我们想要匹配正则表达式的字符串或字符的所有出现，我们可以在正则表达式中使用`g`标志。然而，像这样具有明确模式的情况是罕见的，即使当它们出现时，是否需要**正则表达式**还是值得商榷的。当你有更少具体信息时，你才能真正看到正则表达式的真正力量。
- en: 'There are two main features the Regex engine implements that allow you to correctly
    represent 80 percent of your patterns. We will cover these two main features in
    this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式引擎实现了两个主要功能，可以正确表示你模式的80%。我们将在本章介绍这两个主要功能：
- en: Vague matchers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊匹配器
- en: Multipliers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘数
- en: Defining vague matchers in Regex
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在正则表达式中定义模糊匹配器
- en: In this topic, we will cover **character classes** that tell the Regex to match
    a single vague character. Among the **vague matches**, there can be a character,
    digit, or an alphanumeric character.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将介绍**字符类**，告诉正则表达式匹配一个模糊字符。在**模糊匹配**中，可以是一个字符、数字或字母数字字符。
- en: Matching a wild card character
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配通配符字符
- en: Let's say we wanted to find a sequence where we have `1`, and then any other
    character followed by `3`, so that it would include `123`, `1b3`, `1 3`, `133`,
    and so on. For these types of situations, we need to use a *vague matcher* in
    our patterns.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找到一个序列，其中我们有`1`，然后是任何其他字符，然后是`3`，这样它将包括`123`，`1b3`，`1 3`，`133`等等。对于这种情况，我们需要在我们的模式中使用一个*模糊匹配器*。
- en: In the preceding example, we want to be able to use the broadest matcher possible;
    we can choose to put no constraints on it if we wish to and it can include any
    character. For these kind of situations, we have the `.` matcher.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们希望能够使用尽可能宽泛的匹配器；如果我们希望的话，我们可以选择不对其进行任何约束，它可以包括任何字符。对于这种情况，我们有`.`匹配器。
- en: 'A period in Regex will match any character except a new line, so it can include
    letters, numbers, symbols, and so on. To test this out, let''s implement the aforementioned
    example in our HTML utility. In the text field, let''s enter a few combinations
    to test the pattern against `123 1b3 1 3 133 321`, and then for the pattern, we
    can specify `/1.3/g`. Running it should give you something similar to this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，句号将匹配除了换行符以外的任何字符，因此它可以包括字母、数字、符号等等。为了测试这一点，让我们在我们的HTML实用程序中实现上述例子。在文本字段中，让我们输入一些组合来测试模式对`123
    1b3 1 3 133 321`的匹配，然后对于模式，我们可以指定`/1.3/g`。运行它应该会给你类似于这样的结果：
- en: '![Matching a wild card character](img/2258OS_02_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![匹配通配符字符](img/2258OS_02_01.jpg)'
- en: Matching digits
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配数字
- en: The **wildcard character** is not the only character to match vague patterns,
    nor is it always the right choice. For example, continuing from the previous example,
    let's say that the character in between `1` and `3` is a number. In this case,
    we might not care which digit ends up there, all we have to make sure of is that
    it's a number.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**通配符字符**不是匹配模糊模式的唯一字符，也不总是正确的选择。例如，继续上一个例子，假设`1`和`3`之间的字符是一个数字。在这种情况下，我们可能不在乎哪个数字最终出现在那里，我们只需要确保它是一个数字。'
- en: 'To accomplish this, we can use a `\d`. vague matcher The `d` backslash or digit
    special character will match any character between 0 to 9\. Replacing the period
    with the backslash d character will give us the following results:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们可以使用`\d`。模糊匹配器`d`反斜杠或数字特殊字符将匹配0到9之间的任何字符。用反斜杠d字符替换句号将给我们以下结果：
- en: '![Matching digits](img/2258OS_02_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![匹配数字](img/2258OS_02_02.jpg)'
- en: Matching alphanumeric chars
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配字母数字字符
- en: 'Only two out of the four matches mentioned earlier comply with the new constraint.
    The last main vague matcher is `\w`, which is a **word character**. It will match
    the underscore character, numbers, or any of the 26 letters of the alphabet (in
    both lowercase as well as uppercase letters). Running this in our app will give
    us the following results:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的四个匹配中，只有两个符合新的约束。最后一个主要的模糊匹配器是`\w`，它是一个**单词字符**。它将匹配下划线字符、数字，或者字母表的26个字母（无论是小写还是大写字母）。在我们的应用程序中运行这个将给我们以下结果：
- en: '![Matching alphanumeric chars](img/2258OS_02_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![匹配字母数字字符](img/2258OS_02_03.jpg)'
- en: Negating alphanumeric chars and digits
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 否定字母数字字符和数字
- en: Also, if you want the negated versions of the last two matchers, you can just
    use their uppercase counterparts. What I mean by this is that `\d` will match
    any number, but `\D` will match anything except a number, since they are compliments
    and the same goes for `\w` and `\W`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你想要最后两个匹配器的否定版本，你可以使用它们的大写对应版本。我的意思是`\d`将匹配任何数字，但`\D`将匹配除数字之外的任何东西，因为它们是互补的，对于`\w`和`\W`也是一样。
- en: Defining ranges in Regex
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在正则表达式中定义范围
- en: '**Ranges** in Regex allow you to create your own custom constraints, much like
    the ones we just went through. In a range, you can specify exactly the characters
    that can be used or if it''s faster, you can specify the inverse, that is, the
    characters that do not match.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中的**范围**允许你创建自己的自定义约束，就像我们刚刚讨论的那样。在一个范围内，你可以精确指定可以使用的字符，或者如果更快的话，你可以指定反向，也就是不匹配的字符。
- en: 'For the sake of illustration, let''s say we wanted to match only `abc`. In
    this case, we could create a range similar to `[abc]` and it will match a single
    character, which is either `a`, `b`, or `c`. Let''s test it out with the `bicycle`
    text and the `/[abc]/g` pattern:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，假设我们只想匹配`abc`。在这种情况下，我们可以创建类似于`[abc]`的范围，它将匹配一个单个字符，要么是`a`，`b`，要么是`c`。让我们用`bicycle`文本和`/[abc]/g`模式来测试一下：
- en: '![Defining ranges in Regex](img/2258OS_02_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在正则表达式中定义范围](img/2258OS_02_04.jpg)'
- en: Defining a range
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义范围
- en: 'Now, this will work, however, if you have a lot of characters you need to match,
    your range will become long quickly. Luckily, Regex allows you to use the (`-`)
    dash character to specify a set of characters without needing to list them out.
    For example, let''s say we want to check whether a three lettered name is formatted
    correctly, and we want the first letter to be a capital letter, followed by two
    lower case letters. Instead of specifying all 26 letters in each range, we can
    abbreviate it to `[a-z]` or `[A-Z]` for the uppercase letters. So, to implement
    a three letter name verifier, we could create a pattern similar to`/[A-Z][a-z][a-z]/g`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这将起作用，但是，如果您需要匹配很多字符，您的范围将很快变得很长。幸运的是，正则表达式允许您使用（`-`）破折号字符指定一组字符，而无需将它们列出。例如，假设我们要检查三个字母的名称是否格式正确，并且我们希望第一个字母是大写字母，后面跟着两个小写字母。我们可以将每个范围中的所有26个字母都指定为`[a-z]`或`[A-Z]`。因此，要实现三个字母名称验证器，我们可以创建类似于`/[A-Z][a-z][a-z]/g`的模式：
- en: '![Defining a range](img/2258OS_02_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![定义范围](img/2258OS_02_05.jpg)'
- en: Matching the dash character
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配破折号字符
- en: If you are trying to match the dash character itself, and you don't want JavaScript
    to interpret it as specifying a set, you can either start/end the range with the
    dash character or escape it with a backslash. For example to match both `"hello
    world"` and `"hello-world`,`"` we could write a pattern similar to `/hello[- ]world/
    or /hello[\- ]world/`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要匹配破折号字符本身，并且不希望JavaScript将其解释为指定集合，则可以使用破折号字符开始/结束范围，或者用反斜杠对其进行转义。例如，要匹配`"hello
    world"`和`"hello-world"`，我们可以编写类似于`/hello[- ]world/`或`/hello[\- ]world/`的模式。
- en: We can also use a wild character as a simple dot inside a rage. For example,
    this may occur when we want to match a number character and we don't mind having
    a period (forgetting for a second that a number can only have one period). So,
    to match `123` as well as `2.4` and `.45`, we could specify the `/[\d.][\d.]\d/`
    pattern, and then both the first and second digits can be periods. Notice, JavaScript
    doesn't think that we are referring to the wildcard period inside the range, as
    this would defeat the purpose of a range, so JavaScript treats it as a standard
    period.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在范围内使用一个通配符，即简单的点。例如，当我们想匹配数字字符并且不介意有一个句点时（暂时忘记数字只能有一个句点时），就会出现这种情况。因此，要匹配`123`以及`2.4`和`.45`，我们可以指定`/[\d.][\d.]\d/`模式，然后第一个和第二个数字都可以是句点。请注意，JavaScript不认为我们是在范围内引用通配符句点，因为这将破坏范围的目的，因此JavaScript将其视为标准句点。
- en: Defining negated ranges
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义否定范围
- en: The last thing to be covered in ranges is the **negated range**. A negated range
    is exactly what it sounds like. Instead of specifying what to match, we are specifying
    what not to match. It's very similar to adding a not (`!`) character to a **Boolean
    value** in JavaScript, in that it simply flips the return value of what you would
    have got earlier.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 范围中最后要涵盖的是**否定范围**。否定范围正是其听起来的样子。与其指定要匹配的内容，我们指定不要匹配的内容。这与在JavaScript中为**布尔值**添加否定（`!`）字符非常相似，因为它只是翻转了您之前得到的返回值。
- en: To create a negated range, you can start the range with a (`^`) caret character
    to match any character; however, for the first five letters of the alphabet, you
    would use something similar to `/[^a-e]/`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建否定范围，可以使用（`^`）插入符号字符开始范围以匹配任何字符；但是，对于字母表的前五个字母，您可以使用类似于`/[^a-e]/`的内容。
- en: This may not seem that useful by itself, but you might, for example, want to
    strip out all not alphabetical characters for a filename. In this case, you can
    type `/[^a-z]/gi` and combined with JavaScript's `replace` function, you can remove
    all of them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身可能看起来并不那么有用，但是您可能，例如，希望为文件名删除所有非字母字符。在这种情况下，您可以键入`/[^a-z]/gi`，并与JavaScript的`replace`函数结合使用，可以删除所有这些字符。
- en: Defining multipliers in Regex
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在正则表达式中定义乘数
- en: Matchers are great but they only "scale" your pattern in one direction. I like
    to think of matchers as things that scale your pattern vertically, allowing you
    to match many more strings that fit into the same pattern, but they are still
    constrained in length, or scale the pattern horizontally. **Multipliers** allow
    you to match arbitrarily sized strings that you may receive as input, giving you
    a much greater range of freedom.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配器很棒，但它们只能在一个方向上“扩展”您的模式。我喜欢将匹配器看作是垂直扩展模式的东西，允许您匹配更多适合相同模式的字符串，但它们仍然受长度限制，或者扩展模式的水平。**乘数**允许您匹配可能作为输入接收的任意大小的字符串，从而为您提供更大范围的自由度。
- en: 'There are three basic multipliers in Regex:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中有三种基本的乘数：
- en: '`+`: This matches one or more occurrences'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`：这匹配一个或多个出现'
- en: '`?`: This matches zero or one occurrence'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?`：这匹配零次或一次出现'
- en: '`*`: This matches zero or more occurrences'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*`：这匹配零个或多个出现'
- en: We will cover these three multipliers in this section, and also show you how
    to create a custom multiplier.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中介绍这三种乘数，并向您展示如何创建自定义乘数。
- en: Matching one or more occurrences
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配一个或多个出现
- en: 'The most basic multiplier would have to be the (`+`) plus operator. It tells
    JavaScript that the pattern used in the regular expression must appear one or
    more times. For example, we can build upon the formatted name pattern we used
    before, and instead of just matching a three letter name, we could match any length
    of name using `/[A-Z][a-z]+/g`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的乘数必须是（`+`）加号运算符。它告诉JavaScript正则表达式中使用的模式必须出现一次或多次。例如，我们可以在之前使用的格式化名称模式上构建，并且不仅匹配三个字母的名称，还可以使用`/[A-Z][a-z]+/g`匹配任何长度的名称：
- en: '![Matching one or more occurrences](img/2258OS_02_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![匹配一个或多个出现](img/2258OS_02_07.jpg)'
- en: This pattern represents anything that starts with a capital letter and has at
    least one lowercase letter after it. The plus sign will continue to repeat the
    pattern until it no longer matches (which in our case occurs when it reaches a
    space character).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此模式表示任何以大写字母开头并至少有一个小写字母的内容。加号将继续重复该模式，直到不再匹配（在我们的情况下，当它达到空格字符时）。
- en: Matching zero or one occurrence
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配零次或一次出现
- en: 'The next multiplier, which I guess can be called more of a quantifier, is the
    (`?`) question mark. Fittingly, this multiplier allows the preceding character
    to either show up or not, almost as if we are saying that its presence is questionable.
    I think the best way to explain this is by looking at an example. Let''s say we
    want to receive `Apple` in either its singular or plural form, for this, we could
    use this pattern:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个乘数，我猜可以称为更多的量词，是（`?`）问号。恰当地，这个乘数允许前面的字符要么出现要么不出现，几乎就像我们在说它的存在是可疑的。我认为最好的解释方法是通过一个例子来说明。假设我们想要接收`Apple`的单数形式或复数形式，为此，我们可以使用这个模式：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Matching zero or one occurrence](img/2258OS_02_08.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![匹配零次或一次出现](img/2258OS_02_08.jpg)'
- en: Now this may seem like the question mark is more of a conditional operator than
    a multiplier, but what it is really doing is saying that the preceding character
    can appear either once or zero times.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这可能看起来像问号更像是一个条件运算符而不是一个乘数，但它真正做的是说前面的字符可以出现一次或零次。
- en: Matching zero or more occurrences
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配零次或多次出现
- en: The next multiplier in our tool chain is the (`*`) asterisk. This asterisk is
    a combination of the previous two multipliers, allowing the previous character
    to appear anywhere between zero and infinity times. So, if you have an input that
    contains a word or a character many times, the pattern will match. If you have
    an input that does not contain a word or a character, the pattern will still match.
    For example, this can come in handy if you are parsing some kind of log for `update`.
    In situations like this, you might get `update` or may `update!!!` and, depending
    on the time of day, you may even get `update!!!!!!!!!!!!!!!!`. To match all these
    strings, you can simply create the pattern `/update!*/g` pattern.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工具链中的下一个乘数是（`*`）星号。这个星号是前两个乘数的组合，允许前面的字符出现零次到无限次。因此，如果您的输入包含一个单词或字符多次，模式将匹配。如果您的输入不包含单词或字符，模式仍然匹配。例如，如果您正在解析某种`update`的日志，这可能会很有用。在这种情况下，您可能会得到`update`或者`update!!!`，根据一天的时间，甚至可能得到`update!!!!!!!!!!!!!!!!`。为了匹配所有这些字符串，您可以简单地创建模式`/update!*/g`。
- en: '![Matching zero or more occurrences](img/2258OS_02_09.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![匹配零次或多次出现](img/2258OS_02_09.jpg)'
- en: These are the three standard multipliers, similar to the ones that had built-in
    sets of characters for the (`\d`) ranges. Similarly, Regex allows you to specify
    and create your own multipliers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是三种标准的乘数，类似于内置字符集（`\d`）范围的乘数。同样，正则表达式允许您指定和创建自己的乘数。
- en: Defining custom quantifiers
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义自定义量词
- en: There is only one syntax to specify your own multipliers but because of the
    different parameter options available, you get three different functional options.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一种语法来指定自己的乘数，但由于可用的不同参数选项，您可以获得三种不同的功能选项。
- en: If you want to match a given character a concrete number of times, you can simply
    specify the number of allowed repetitions inside curly braces. This doesn't make
    your patterns more flexible, but it will make them shorter to read. For example,
    if we were implementing a phone number we could type `/\d\d\d-\d\d\d\d/`. This
    is, however, a bit long and instead, we can just use custom multipliers and type
    `/\d{3}-\d{4}/`, which really shorten it up making it more readable.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想匹配给定字符的具体次数，你可以在花括号内指定允许的重复次数。这不会使您的模式更灵活，但会使它们更易于阅读。例如，如果我们要实现一个电话号码，我们可以输入`/\d\d\d-\d\d\d\d/`。然而，这有点长，相反，我们可以使用自定义乘数，输入`/\d{3}-\d{4}/`，这样可以使它更简洁，更易读。
- en: Matching n or more occurrences
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配n次或更多出现
- en: 'Next, if you just want to set a minimum number of times that the pattern can
    appear, but don''t really care about the actual length, you can just add a comma
    after the number. For example, let''s say we want to create a pattern to make
    sure a user''s password is at least six characters long; in such a situation,
    you may not want to enforce a maximum character limit, and can, therefore, type
    something similar to `/.{6,}/`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你只想设置模式可以出现的最小次数，但实际长度并不重要，你可以在数字后面加上逗号。例如，假设我们想创建一个模式，以确保用户的密码至少有六个字符长；在这种情况下，您可能不想强制最大字符限制，因此可以输入类似`/.{6,}/`的内容：
- en: '![Matching n or more occurrences](img/2258OS_02_10.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![匹配n次或更多出现](img/2258OS_02_10.jpg)'
- en: Matching n to m occurrences
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匹配n到m次出现
- en: The third variation on our custom multipliers is when you want to set a complete
    set of options, matching both, the minimum and maximum number of occurrences.
    You can do this by simply adding another number after the comma. For example,
    if we had some sort of comment system and we wanted to constrain the comments
    to be anywhere between 15 to 140 characters, we could create a Regex string to
    match this setup, for example, `/.{15,140}/`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自定义乘数的第三种变化是当您想要设置一组完整的选项，匹配最小和最大出现次数时。您可以在逗号后面简单地添加另一个数字。例如，如果我们有某种评论系统，并且我们希望限制评论在15到140个字符之间，我们可以创建一个正则表达式字符串来匹配这个设置，例如`/.{15,140}/`。
- en: Now, I am not saying that the two previously mentioned examples are the best
    uses for this kind of Regex, because obviously, there is a much easier way to
    check text lengths. However, in the context of a larger pattern, this can be pretty
    useful.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我并不是说前面提到的两个例子是这种正则表达式的最佳用法，因为显然，检查文本长度有更简单的方法。然而，在更大模式的上下文中，这可能非常有用。
- en: Matching alternated options
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匹配交替选项
- en: At this stage, we know how to match any set of characters using vague matchers,
    and we have the ability to repeat the patterns for any kind of sequence using
    multipliers, which gives you a pretty good base for matching just about anything.
    However, even with all this in place, there is one situation that has a tendency
    to come up and can be an issue. It occurs when dealing with two different and
    completely separate acceptable forms of input.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们知道如何使用模糊匹配器匹配任何一组字符，并且我们有能力使用乘法器重复模式以匹配任何类型的序列，这为你匹配几乎任何东西提供了一个相当不错的基础。然而，即使有了这一切，还是有一种情况经常出现并且可能会成为问题。当处理两种不同且完全独立的可接受输入形式时就会出现这种情况。
- en: 'Let''s say we are parsing some kind of form data, and for each question, we
    want to extract either a yes or no to be stored somewhere. With our current level
    of expertise, we can create a pattern similar to `/[yn][eo]s?/g`, which would
    match both `yes` and `no`. The real problem with this is that it will also match
    all the other six configurations of these letters, which our app probably won''t
    know how to handle:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在解析某种表单数据，对于每个问题，我们想要提取一个存储在某处的yes或no。凭借我们目前的专业知识，我们可以创建一个类似于`/[yn][eo]s?/g`的模式，它将匹配`yes`和`no`。真正的问题在于它也会匹配这些字母的其他六种组合，而我们的应用程序可能不知道如何处理：
- en: '![Matching alternated options](img/2258OS_02_11.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![匹配交替选项](img/2258OS_02_11.jpg)'
- en: 'Luckily, Regex has a completely different system in place to hand situations
    like this and it is in the form of the (`|`) pipe character. It is similar to
    the *OR* operator you would use in an `if` statement, except instead of two, you
    just use one here. How it works is, you separate the different patterns you want
    to match by a pipe, and then any of the patterns can return a match. Changing
    our previous Regex pattern with `/yes|no/g` will then show the correct results:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，正则表达式有一个完全不同的系统来处理这种情况，它就是(`|`)管道字符。它类似于你在`if`语句中使用的*OR*运算符，只不过这里只使用一个。它的工作原理是，你用管道分隔你想要匹配的不同模式，然后任何一个模式都可以返回匹配。将我们之前的正则表达式模式改为`/yes|no/g`将会显示正确的结果：
- en: '![Matching alternated options](img/2258OS_02_12.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![匹配交替选项](img/2258OS_02_12.jpg)'
- en: Well, at least it almost will, though it will still match `no` in `nos`. However,
    this is because we have been using open patterns and not really enforcing complete
    words (this is a topic in the next chapter).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，至少几乎可以，尽管它仍然会匹配`nos`中的`no`。然而，这是因为我们一直在使用开放模式，而没有真正强制完整的单词（这是下一章的主题）。
- en: The pipe character, though, is not limited to just two options, we can easily
    match a large array of values by splitting each of them by the pipe character.
    Also, we are not constrained to just using plain text, and each segment in our
    Regex split can be its own pattern using ranges and multipliers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 管道字符不仅限于两个选项，我们可以通过用管道字符分隔它们来轻松匹配大量的值。此外，我们不仅限于使用纯文本，我们的正则表达式分割中的每个部分都可以使用范围和乘法器来定义自己的模式。
- en: Creating a Regex for a telephone number
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为电话号码创建一个正则表达式
- en: 'To tie up this chapter, let''s put together a few of these features we just
    learned about and construct the phone number pattern we used in the previous chapter.
    To sum it up, we want to be able to match all the following number patterns:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结这一章，让我们将刚刚学到的一些特性结合起来，构建我们在上一章中使用的电话号码模式。总之，我们希望能够匹配以下所有的数字模式：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'So, first off, we can see that there are optional brackets around the first
    three numbers (the area code), and we also have optional dashes between the numbers.
    This is a situation where the question mark character comes in handy. For the
    numbers themselves, we can use a built-in matcher to specify that they have to
    be numbers and a strong multiplier to specify exactly how many we need. The only
    special thing we need to know here is that the parenthesis contains special characters,
    so we will need to escape them (add a backslash):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以看到前三个数字（区号）周围有可选的括号，数字之间也有可选的破折号。这是一个问号字符派上用场的情况。对于数字本身，我们可以使用内置的匹配器来指定它们必须是数字，并使用强大的乘法器来指定我们需要多少个。我们需要知道的唯一特殊之处是括号包含特殊字符，所以我们需要对它们进行转义（添加反斜杠）：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Parentheses are used to define groups in regular expressions, this is why they
    are special characters. We will learn about defining groups in [Chapter 3](ch03.html
    "Chapter 3. Special Characters"), *Special Characters*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 括号在正则表达式中用于定义组，这就是它们为什么是特殊字符的原因。我们将在[第3章](ch03.html "第3章.特殊字符")中学习如何定义组，*特殊字符*。
- en: 'Testing this regular expression with the test application that we developed
    in [Chapter 1](ch01.html "Chapter 1. Getting Started with Regex"), *Getting Started
    with Regex*, and with the examples mentioned at the beginning of this topic will
    show that the regular expression matches all of the examples:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在[第1章](ch01.html "第1章.正则表达式入门")中开发的测试应用程序以及本主题开头提到的示例来测试这个正则表达式，将会显示出这个正则表达式匹配所有的示例：
- en: '![Creating a Regex for a telephone number](img/2258OS_02_13.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![为电话号码创建一个正则表达式](img/2258OS_02_13.jpg)'
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use character classes to define a wild character
    match, a digit match, and an alphanumeric match. We also learned how to define
    quantifiers, which specify how many times a character or group can be present
    in an input.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用字符类来定义通配符匹配、数字匹配和字母数字匹配。我们还学习了如何定义量词，它们指定了字符或组在输入中可以出现的次数。
- en: In the next chapter, we will learn about boundaries (positions that can be used
    to match the Regex) and defining groups.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习边界（可用于匹配正则表达式的位置）和定义组。
