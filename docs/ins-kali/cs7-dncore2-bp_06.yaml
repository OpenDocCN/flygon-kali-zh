- en: Web Research Tool with Entity Framework Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Entity Framework Core的Web研究工具
- en: '"The biggest lie I tell myself is that I don''t need to write it down, I''ll
    remember it."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “我对自己说的最大谎言是我不需要把它写下来，我会记住的。”
- en: – Unknown
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 未知'
- en: So, you've got a few minutes to catch up on your feeds. As you scroll through,
    you come across a link to an article that someone shared about new ways to remember
    your guitar chords. You really want to read it, but you don't have enough time
    now. "*I'll read it later",* you tell yourself, and later becomes never. Mainly
    because you did not write it down.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你有几分钟时间来赶上你的动态。当你浏览时，你看到有人分享了一篇关于记住吉他和弦的新方法的文章。你真的想读它，但现在没有足够的时间。"*我以后再读"，*你告诉自己，以后变成了永远。主要是因为你没有把它写下来。
- en: Now there are various applications out there that cater for your need to save
    links for later use. But we're developers. Let's just have some fun writing our
    own.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有各种应用程序可以满足您保存链接以供以后使用的需求。但我们是开发人员。让我们写一些有趣的东西。
- en: 'In this chapter, we will look at the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下内容：
- en: '**Entity Framework** (**EF**) Core history'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework**（**EF**）Core历史'
- en: Code-First versus Model-First versus Database-First approach
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码优先与模型优先与数据库优先方法
- en: Developing a database design
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发数据库设计
- en: Setting up the project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目
- en: Installing EF Core
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装EF Core
- en: Creating the models
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Configuring the services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置服务
- en: Creating the database
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库
- en: Seeding the database with test data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试数据填充数据库
- en: Creating the controller
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Running the application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: Deploying the application
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: That is quite a mouthful, but don't fret, we'll take it one step at a time.
    Let's take a walk.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相当多的内容，但不要担心，我们会一步一步来。让我们散步一下。
- en: Entity Framework (EF) Core history
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Entity Framework（EF）Core历史
- en: One of the most frustrating parts of developing an application that needs to
    read data from and write data to some sort of database, is trying to get the communication
    layer between your code and the database established.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 开发应用程序时最令人沮丧的部分之一是尝试建立代码和数据库之间的通信层。
- en: At least, it used to be.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 至少曾经是这样。
- en: Enter Entity Framework
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入Entity Framework
- en: Entity Framework is an **object-relational mapper** (**ORM**). It maps your
    .NET code objects to relational database entities. As simple as that. Now, you
    don't have to concern yourself with scaffolding the required data-access code
    just to handle plain CRUD operations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework是一个**对象关系映射器**（**ORM**）。它将您的.NET代码对象映射到关系数据库实体。就是这么简单。现在，您不必担心为了处理普通的CRUD操作而搭建所需的数据访问代码。
- en: When the first version of Entity Framework was released with .NET 3.5 SP1 in
    August 2008, the initial response wasn't that great, so much so that a group of
    developers signed a *vote of no confidence* with regards to the framework. Thankfully,
    most of the raised concerns were addressed and the release of Entity Framework
    4.0, together with .NET 4.0, put to bed a lot of the criticisms around the stability
    of the framework.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当Entity Framework的第一个版本于2008年8月发布时，随着.NET 3.5 SP1的发布，最初的反应并不是很好，以至于一群开发人员签署了一份关于该框架的*不信任投票*。幸运的是，大部分提出的问题得到了解决，随着Entity
    Framework 4.0的发布，以及.NET 4.0，许多关于框架稳定性的批评得到了解决。
- en: Microsoft then decided to take .NET cross-platform with .NET Core, which meant
    that Entity Framework Core was a complete rewrite. This obviously has its pros
    and cons as a comparison between EF Core and EF6 reveals that, while EF Core introduces
    new features and improvements, it remains a new code base and thus does not yet
    have all the features available in EF6.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 微软随后决定使用.NET Core使.NET跨平台，这意味着Entity Framework Core进行了完全重写。显然，这有其利弊，因为EF Core和EF6之间的比较表明，虽然EF
    Core引入了新功能和改进，但它仍然是一个新的代码库，因此还没有EF6中的所有功能。
- en: Code-First versus Model-First versus Database-First approach
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码优先与模型优先与数据库优先方法
- en: With Entity Framework, you can choose between three approaches of implementation,
    and it's always nice to have a choice. Let's have a quick look at the differences
    between them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Entity Framework，您可以选择三种实现方法，总是很好能够有选择。让我们快速看看它们之间的区别。
- en: Code-First approach
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码优先方法
- en: 'The weapon of choice for hardcore programmers, this approach gives you full
    control over the database, from code. The database is seen a simple storage location
    and will most likely not contain any logic or business rules. Everything is driven
    from the code and thus any changes required need to be done in code as well:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于硬核程序员来说，这是首选的方法，这种方法让您完全控制数据库，从代码开始。数据库被视为简单的存储位置，很可能不包含任何逻辑或业务规则。一切都由代码驱动，因此任何所需的更改也需要在代码中完成：
- en: '![](img/623d8338-835f-4e91-b0f1-a4e1daf8d007.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/623d8338-835f-4e91-b0f1-a4e1daf8d007.png)'
- en: Model-First approach
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型优先方法
- en: 'If you prefer painting over poetry, then you might prefer the Model-First approach.
    In this approach, you create or draw your model, and the workflow will generate
    a database script. You could also extend your model with partial classes, if there
    is a need to add specific logic or business rules, but it could become hairy and
    it might be better to consider the Code-First approach if there are too many specifics:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢绘画而不是诗歌，那么您可能更喜欢模型优先方法。在这种方法中，您创建或绘制您的模型，工作流将生成一个数据库脚本。如果有必要添加特定逻辑或业务规则，您还可以使用部分类扩展模型，但这可能会变得复杂，如果有太多具体内容，最好考虑代码优先方法：
- en: '![](img/35e7c4b9-3092-4064-9af2-d675ff1959b0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35e7c4b9-3092-4064-9af2-d675ff1959b0.png)'
- en: Database-First approach
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库优先方法
- en: 'The Database-First approach works well for large projects where you have a
    dedicated DBA designing and maintaining your database. Entity Framework will create
    your entities for you from the database design and you can run model updates whenever
    database changes are done:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库优先方法适用于需要从事设计和维护数据库的专职DBA的大型项目。Entity Framework将根据数据库设计为您创建实体，并且您可以在数据库更改时运行模型更新：
- en: '![](img/181149a6-fa39-48bd-a2be-6f0649df9b43.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/181149a6-fa39-48bd-a2be-6f0649df9b43.png)'
- en: Developing a database design
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发数据库设计
- en: We can't know what we're doing until we know what we're doing. Before we jump
    in and create a Solution with our database, models, and controllers, we need to
    first figure out how we want to design the database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建具有数据库、模型和控制器的解决方案之前，我们需要首先弄清楚我们想要如何设计数据库。
- en: 'According to Microsoft''s TechNet, there are five basic steps one could follow
    to plan a database:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 根据微软的TechNet，有五个基本步骤可以遵循来规划数据库：
- en: Gather information
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集信息
- en: Identify the objects
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别对象
- en: Model the objects
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对对象建模
- en: Identify the types of information for each object
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定每个对象的信息类型
- en: Identify the relationship between objects
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定对象之间的关系
- en: Our requirement is pretty simple. We only need to save a web link to navigate
    to later, so we won't have multiple objects with relationships between them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的要求非常简单。我们只需要保存一个网站链接以便以后导航，因此我们不会有多个对象之间的关系。
- en: We do, however, need to clarify the types of information we'd like to save for
    our object (web link). Obviously, we need the URL, but what else do we need? Make
    sure you understand what information is required for your Solution and how it
    will be used.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要澄清我们想要为对象（网站链接）保存的信息类型。显然，我们需要URL，但我们还需要什么？确保您了解解决方案所需的信息以及如何使用它。
- en: Think about it in everyday terms—if you write an address for a friend's house,
    you might want something more that just a street, possibly your friend's name
    or a note of some kind.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以日常术语来考虑——如果您为朋友的房子写地址，您可能希望除了街道之外还有一些东西，可能是您朋友的名字或某种备注。
- en: 'In our Solution, we want to know what the URL is, but we also want to know
    when we saved it and have a place to capture a note so we can add more personal
    detail to an entry. Our model will thus contain the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的解决方案中，我们想知道URL是什么，但我们还想知道我们何时保存它，并且有一个地方可以记录笔记，以便我们可以为条目添加更多个人细节。因此，我们的模型将包含以下内容：
- en: '`URL`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URL`'
- en: '`DateSaved`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateSaved`'
- en: '`Notes`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Notes`'
- en: We'll go into more detail when we start creating our models, but let's not jump
    the gun. We still need to create our project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在开始创建模型时详细介绍，但让我们不要急于行动。我们仍然需要创建我们的项目。
- en: Setting up the project
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'Using Visual Studio 2017, create an ASP.NET Core Web Application. Please note
    that we are taking a Code-First approach to this project:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2017，创建一个ASP.NET Core Web应用程序。请注意，我们将采用代码优先方法来进行此项目。
- en: 'Let''s call the application `WebResearch`. This is shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将应用程序称为`WebResearch`。如下截图所示：
- en: '![](img/f1925976-6f5b-4cb8-977f-8c40b65a57c2.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1925976-6f5b-4cb8-977f-8c40b65a57c2.png)'
- en: 'On the next screen, choose Web Application (Model-View-Controller) as a project
    template. To keep things simple, keep the authentication as No Authentication.
    Refer to the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择Web应用程序（模型-视图-控制器）作为项目模板。为了保持简单，将身份验证保持为无身份验证。参考以下截图：
- en: '![](img/7de7611b-2a21-4bb5-8f52-e02ffb0dd723.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7de7611b-2a21-4bb5-8f52-e02ffb0dd723.png)'
- en: 'The created project will look as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的项目将如下所示：
- en: '![](img/6a272af2-966b-4321-8147-869e9ea6930c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a272af2-966b-4321-8147-869e9ea6930c.png)'
- en: Installing the required packages
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的包
- en: We need to install three NuGet packages to our Solution that will assist us
    in our quest. This is done through the Package Manager Console.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将三个NuGet包安装到我们的解决方案中，这将帮助我们完成我们的任务。这是通过包管理器控制台完成的。
- en: 'Go to Tools | NuGet Package Manager | Package Manager Console:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 转到工具 | NuGet包管理器 | 包管理器控制台：
- en: '![](img/647dd034-8efb-4e28-bca1-7ff2ae009837.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/647dd034-8efb-4e28-bca1-7ff2ae009837.png)'
- en: Entity Framework Core SQL Server
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体框架核心SQL Server
- en: There are various database providers catered for by EF Core, including Microsoft
    SQL Server, PostgreSQL, SQLite, and MySQL. We will use SQL Server as a database
    provider.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core提供了各种数据库提供程序，包括Microsoft SQL Server、PostgreSQL、SQLite和MySQL。我们将使用SQL
    Server作为数据库提供程序。
- en: For a full list of database providers, have a look at the official Microsoft
    documentation at: [https://docs.microsoft.com/en-us/ef/core/providers/index](https://docs.microsoft.com/en-us/ef/core/providers/index).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数据库提供程序的完整列表，请参阅官方微软文档：[https://docs.microsoft.com/en-us/ef/core/providers/index](https://docs.microsoft.com/en-us/ef/core/providers/index)。
- en: 'In the console window, type the following command and hit *Enter*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台窗口中，输入以下命令并按*Enter*：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should see a few response lines showing the items that were successfully
    installed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到几行响应显示成功安装的项目。
- en: Entity Framework Core tools
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体框架核心工具
- en: Next up, we'll install some Entity Framework Core tools that will assist us
    with creating our database from our models.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装一些实体框架核心工具，这些工具将帮助我们根据我们的模型创建数据库。
- en: 'In the console window, type the following command and hit *Enter*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台窗口中，输入以下命令并按*Enter*：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once again, you should see a few response lines showing the items that were
    successfully installed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您应该看到几行响应显示成功安装的项目。
- en: Code generation design
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成设计
- en: Instead of writing all the code ourselves, we can use some ASP.Net Core code
    generation tools to aid us with our scaffolding.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一些ASP.Net Core代码生成工具来帮助我们进行脚手架搭建，而不是自己编写所有代码。
- en: 'Next up in the console window, type the following command and hit *Enter*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在控制台窗口中，输入以下命令并按*Enter*：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As usual, check to see that you get the `Successfully Installed` items.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，检查一下是否获得了“成功安装”的项目。
- en: If you have problems installing any NuGet packages, it might point to an access
    control issue. As a general rule, I set up my Visual Studio to run as administrator,
    which sorts out most of those problems.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装任何NuGet包时出现问题，可能是访问控制问题。一般来说，我会将我的Visual Studio设置为以管理员身份运行，这样就可以解决大部分问题。
- en: 'After installation, our Solution will reflect the added NuGet packages under
    the Dependencies section, shown as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们的解决方案将在“依赖项”部分反映出添加的NuGet包，如下所示：
- en: '![](img/63a62d37-ed0f-4822-b3bf-c7d3bfefeeda.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63a62d37-ed0f-4822-b3bf-c7d3bfefeeda.png)'
- en: Creating the models
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Right-click on the Models folder in your project and add a class called `ResearchModel.cs`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击项目中的Models文件夹，添加一个名为`ResearchModel.cs`的类：
- en: '![](img/0131dbbd-9c06-4737-8048-19aeb0fd9fdc.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0131dbbd-9c06-4737-8048-19aeb0fd9fdc.png)'
- en: We actually need two classes—a `Research` class that is a representation of
    our `entity` object, and another, `ResearchContext`, which is a subclass of `DbContext`.
    To keep things simple, we can put both classes in our `ResearchModel` file.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们需要两个类——一个是`Research`类，它是我们`entity`对象的表示，另一个是`ResearchContext`，它是`DbContext`的子类。为了简化，我们可以将这两个类都放在我们的`ResearchModel`文件中。
- en: 'Here''s the code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s break it down as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解如下：
- en: Firstly, we have our `Research` class, which is our `entity` object representation.
    As covered in our *Developing a database design* section, as discussed earlier,
    for each link we will save the URL, the date, and a note. The ID field is standard
    practice for a database table that holds information.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有我们的`Research`类，这是我们的`entity`对象表示。如前面的*开发数据库设计*部分所述，对于每个链接，我们将保存URL、日期和备注。ID字段是保存信息的数据库表的标准做法。
- en: Our second class, `ResearchContext`, is a subclass of `DbContext`. This class
    will have an empty constructor taking `DbContextOptions` as a parameter and a
    `DbSet<TEntity>` property for our data collection.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个类`ResearchContext`是`DbContext`的子类。这个类将有一个以`DbContextOptions`为参数的空构造函数和一个用于我们数据集合的`DbSet<TEntity>`属性。
- en: 'I could give you a brief overview here about `DbSet<Entity>`, but I''d rather
    let Visual Studio help us out. If you hover over `DbSet`, you''ll get an informational
    pop-up with everything you need to know:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以在这里给您一个关于`DbSet<Entity>`的简要概述，但我宁愿让Visual Studio来帮助我们。如果您将鼠标悬停在`DbSet`上，您将得到一个信息弹出窗口，其中包含您需要了解的一切：
- en: '![](img/2fe5e304-43bc-4f12-86cc-5a208cd543f6.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fe5e304-43bc-4f12-86cc-5a208cd543f6.png)'
- en: Configuring the services
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务
- en: 'In the `Startup.cs` class, in the `ConfigureServices` method, add the `DbContext`
    service with the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Startup.cs`类中，在`ConfigureServices`方法中，添加以下代码的`DbContext`服务：
- en: '[PRE4]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we set a connection string variable from the configuration,
    and then pass that in as an options parameter for `SqlServer` for our `DbContext`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们从配置中设置了一个连接字符串变量，然后将其作为`DbContext`的`SqlServer`选项参数传递。
- en: But hold on. Where does `LocalDBConnection` come from? We haven't set anything
    in our configuration. Not yet, anyway. Let's get that done now.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但是等等。`LocalDBConnection`是从哪里来的？我们还没有在配置中设置任何东西。现在还没有。让我们现在就搞定。
- en: 'Open the `appsettings.json` file in the root of the project:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目根目录中的`appsettings.json`文件：
- en: '![](img/b8d8d7aa-4cb9-43b9-bf9c-264d4552e09f.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8d8d7aa-4cb9-43b9-bf9c-264d4552e09f.png)'
- en: By default, you should see a logging entry. Add your `ConnectionStrings` section
    after the `Logging` section with a `LocalDBConnection` property.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您应该看到一个日志记录条目。在`Logging`部分之后添加您的`ConnectionStrings`部分，其中包含`LocalDBConnection`属性。
- en: 'The full file should look something like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 完整文件应该看起来像这样：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Later on, we will look at how to connect to an existing database, but for now
    we are just connecting to a local `db` file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将看看如何连接到现有数据库，但现在我们只是连接到本地的`db`文件。
- en: Creating the database
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库
- en: During the development phase of any application, there is a fairly high probability
    that your data model can change. When that happens, your EF Core model differs
    from the database schema and you have to delete the outdated database and create
    a new one based on the updated model.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序的开发阶段，您的数据模型很有可能会发生变化。当这种情况发生时，您的EF Core模型与数据库架构不同，您必须删除过时的数据库，并根据更新后的模型创建一个新的数据库。
- en: This is all fun and games until you've done your first live implementation and
    your application runs in a production environment. You cannot then go and drop
    a database just to change a few columns. You have to make sure the live data persists
    when you make any changes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是一件有趣的事情，直到您完成了第一个实时实现，并且您的应用程序在生产环境中运行。那时，您不能去删除数据库来更改一些列。您必须确保在进行任何更改时，实时数据保持不变。
- en: Entity Framework Core Migrations is a nifty feature that enables us to make
    changes to the database schema instead of recreating the database and losing production
    data. There is a lot of functionality and flexibility possible with `Migrations`,
    and it is a topic well worth spending time on, but we'll just cover some of the
    basics for now.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core Migrations是一个很棒的功能，它使我们能够对数据库架构进行更改，而不是重新创建数据库并丢失生产数据。`Migrations`具有很多功能和灵活性，这是一个值得花时间的话题，但现在我们只涵盖一些基础知识。
- en: We can use EF Core Migration commands in the `Package Manager Console` to set
    up, create, and if needed, update our database.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`Package Manager Console`中使用EF Core Migration命令来设置、创建，并在需要时更新我们的数据库。
- en: 'In the `Package Manager Console`, we will execute the following two commands:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Package Manager Console`中，我们将执行以下两个命令：
- en: '`Add-Migration InitialCreate`'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Add-Migration InitialCreate`'
- en: '`Update-Database`'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Update-Database`'
- en: The first command will generate the code in the `Migrations` folder of the project,
    which is used to create the database. The naming convention for these files is
    `<timestamp>_InitialCreate.cs`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条命令将在项目的`Migrations`文件夹中生成用于创建数据库的代码。这些文件的命名约定是`<timestamp>_InitialCreate.cs`。
- en: 'The second command will create the database and run the `Migrations`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条命令将创建数据库并运行`Migrations`：
- en: '![](img/006032db-d6e0-4bf9-b8fd-9df901d2bb48.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/006032db-d6e0-4bf9-b8fd-9df901d2bb48.png)'
- en: There are two methods of `Note` in the `InitialCreate` class, `Up` and `Down`.
    Simply put, the `Up` method code executes when you Up-grade the application and
    the `Down` method code is run when you Down-grade the application.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`InitialCreate`类中有`Note`的两种方法，`Up`和`Down`。简单地说，`Up`方法代码在升级应用程序时执行，`Down`方法代码在降级应用程序时运行。
- en: Let's say we want to add a Boolean property to our `Research` model called `Read`.
    To persist the value, we would obviously need to add that column to our table
    as well, but we don't want to drop the table just to add a field. With `Migrations`
    we can update the table rather than recreate it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要向我们的“Research”模型添加一个名为“Read”的布尔属性。为了持久化该值，我们显然需要将该列添加到我们的表中，但我们不希望删除表来添加字段。使用“Migrations”，我们可以更新表而不是重新创建它。
- en: 'We''ll start by altering our model. In the `Research` class, add the `Read`
    property. Our class will look as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从修改我们的模型开始。在“Research”类中，添加“Read”属性。我们的类将如下所示：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we''ll add a `Migration`. We''ll use the `Migration` name as an indication
    of what we''re doing. Execute the following command in your `Package Manager Console`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个“Migration”。我们将使用“Migration”名称来指示我们正在做什么。在“Package Manager Console”中执行以下命令：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will notice we have a new class in our `Migrations` folder:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们的“Migrations”文件夹中有一个新的类：
- en: '![](img/6a2d1a48-a841-4613-9de2-20cc2394b020.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2d1a48-a841-4613-9de2-20cc2394b020.png)'
- en: 'Let''s have a look under the hood. You will see that our `Up` and `Down` methods
    aren''t as empty as in the `InitialCreate` class:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看底层。您会看到我们的“Up”和“Down”方法并不像“InitialCreate”类中那样为空：
- en: '![](img/7d2ffb13-fdcf-4b15-bb87-c5c4cb691038.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d2ffb13-fdcf-4b15-bb87-c5c4cb691038.png)'
- en: As mentioned earlier, the `Up` method executes during an Up-grade and the `Down`
    method during a Down-grade. This concept is a lot clearer now that we can see
    the code. In the `Up` method, we are adding the `Read` column and in the `Down`
    method we are dropping the column.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，“Up”方法在升级期间执行，“Down”方法在降级期间执行。现在我们可以看到代码，这个概念更清晰了。在“Up”方法中，我们正在添加“Read”列，在“Down”方法中，我们正在删除该列。
- en: 'We can make changes to this code if needed. We can, for example, change the
    `nullable` attribute of the `Read` column, but updating the code to look as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以对这段代码进行更改。例如，我们可以更改“Read”列的“nullable”属性，但更新代码如下所示：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also add a custom SQL query that will update all existing entries to
    `Read`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以添加一个自定义的SQL查询，将所有现有条目更新为“Read”：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I know this is not a great example, as you wouldn't want all your `Research`
    entries to be marked as `Read` every time you update the database, but hopefully
    you understand the concept.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这不是一个很好的例子，因为你不希望每次更新数据库时都将所有的“Research”条目标记为“Read”，但希望你能理解这个概念。
- en: This code has not yet been executed, though. So, at the current moment, our
    model and database schema are still out of sync.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这段代码尚未执行。因此，当前时刻，我们的模型和数据库架构仍然不同步。
- en: 'Execute the following command again and we''re all up to date:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行以下命令，我们就更新完毕了：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Seeding the database with test data
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用测试数据填充数据库
- en: 'Now that we have an empty database, let''s fill it with some test data. To
    do this, we''ll need to create a method that we will call after our database creation:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个空数据库，让我们用一些测试数据填充它。为此，我们需要创建一个在数据库创建后调用的方法：
- en: 'Create a folder in your project called `Data`. In the folder, add a class called
    `DbInitializer.cs`:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中创建一个名为“Data”的文件夹。在文件夹中，添加一个名为“DbInitializer.cs”的类：
- en: '![](img/2b63b0ba-d7ba-45ac-ae61-4608c3ede9b3.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b63b0ba-d7ba-45ac-ae61-4608c3ede9b3.png)'
- en: 'The class has an `Initialize` method that takes our `ResearchContext` as a
    parameter:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 该类有一个“Initialize”方法，该方法以我们的“ResearchContext”作为参数：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `Initialize` method, we first call the `Database.EnsureCreated` method
    to make sure the database exists and creates it if not:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Initialize”方法中，我们首先调用“Database.EnsureCreated”方法，确保数据库存在并在不存在时创建它：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next up, we do a quick `Linq` query to check if the `ResearchLinks` table has
    any records. The argument is that if the table is empty, we want to add some testing
    data:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们进行一个快速的“Linq”查询，检查“ResearchLinks”表是否有任何记录。论点是，如果表为空，我们希望添加一些测试数据：
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we create an array of the `Research` model and add some test entries.
    The URLs can be anything you like. I just went with a few of the most common sites
    out there:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个“Research”模型的数组，并添加一些测试条目。URL可以是任何你喜欢的东西。我只是选择了一些最常见的网站：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With our array populated, we loop through it and add the entries to our context,
    and finally call the `SaveChanges` method to persist the data to the database:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充了我们的数组后，我们循环遍历它，并将条目添加到我们的上下文中，最后调用“SaveChanges”方法将数据持久化到数据库中：
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Throwing it all together looks as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容放在一起如下所示：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating the controller
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Controllers are a fundamental building block of how ASP.NET Core MVC applications
    are built. The methods inside a controller are referred to as actions. Therefore,
    we can say that a controller defines a set of actions. The actions handle requests
    and these requests are mapped to the specific actions through routing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器是ASP.NET Core MVC应用程序构建的基本构件。控制器内的方法称为操作。因此，我们可以说控制器定义了一组操作。这些操作处理请求，这些请求通过路由映射到特定的操作。
- en: 'To read more on the topic of controllers and actions see the Microsoft document
    at—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions).
    To read more on routing, see the Microsoft document at—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing).
    Follow these steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关控制器和操作的更多信息，请参阅Microsoft文档：[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions)。要了解有关路由的更多信息，请参阅Microsoft文档：[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing)。按照以下步骤：
- en: Right-click on the Controllers folder and choose Add | Controller.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击Controllers文件夹，然后选择添加|控制器。
- en: 'On the scaffolding screen, choose MVC Controller with views, using Entity Framework
    and click Add:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚手架屏幕上，选择使用Entity Framework和单击添加的MVC控制器视图：
- en: '![](img/fbe44f31-f1e7-4d04-b83e-38d436526add.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbe44f31-f1e7-4d04-b83e-38d436526add.png)'
- en: 'On the next screen, select our Research model for the Model class, and ResearchContext
    for the Data context class. You can leave the rest as is, unless you''d like to
    change the Controller name:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择我们的Research模型作为`Model`类，ResearchContext作为`Data`上下文类。你可以将其余部分保持不变，除非你想要更改控制器名称：
- en: '![](img/550c21a5-5226-43fa-bab6-9d734e177543.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/550c21a5-5226-43fa-bab6-9d734e177543.png)'
- en: A brief look at the created controller shows us that we now have our basic **create,
    read, update, and delete** (**CRUD**) tasks in place. Now, it's time for the main
    event.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 简要查看创建的控制器，我们现在已经有了基本的**创建、读取、更新和删除**（**CRUD**）任务。现在，是主要事件的时候了。
- en: Running the application
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Before we jump in and run the application, let''s make sure our new page is
    easily accessible. The simplest way to do that is to just set it as the default
    home page:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始运行应用程序之前，让我们确保我们的新页面很容易访问。最简单的方法就是将它设置为默认主页：
- en: Have a look at the `Configure` method in `Startup.cs`. You'll notice that the
    default route is specified as the `Home` controller.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看一下`Startup.cs`中的`Configure`方法。你会注意到默认路由被指定为`Home`控制器。
- en: 'Simply change the controller to your `Research` controller as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单地将控制器更改为你的`Research`控制器如下：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Lastly, make sure that your `Main` method looks as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，确保你的`Main`方法如下所示：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, hit *Ctrl* + *F5* to run the application and see the fruits of your labor:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按下*Ctrl* + *F5*来运行应用程序，看看你的劳动成果：
- en: '![](img/8a2e80a8-dbe2-46fa-84df-b0131fc6b20e.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a2e80a8-dbe2-46fa-84df-b0131fc6b20e.png)'
- en: 'As you can see, our test entries are available for us to play with. Let''s
    have a quick look at the available functionality:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，我们的测试条目可以供我们使用。让我们快速看一下可用的功能：
- en: 'Click on Create New to see the entry form for our links:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“创建新”以查看我们链接的条目表单：
- en: '![](img/6710c483-2ce0-44e6-ae0d-e21ea64ab2c8.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6710c483-2ce0-44e6-ae0d-e21ea64ab2c8.png)'
- en: 'Enter some interesting data and hit the Create button. You''ll be redirected
    back to the list view and see our new entry added to the bottom of the list:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一些有趣的数据，然后点击“创建”按钮。你将被重定向回列表视图，并看到我们的新条目被添加到列表底部：
- en: '![](img/365b3bf5-25e0-4309-a067-292f5d89442b.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/365b3bf5-25e0-4309-a067-292f5d89442b.png)'
- en: Next to each item, you have the option to Edit, Details, or Delete. Go ahead
    and play around with the functionality. There is quite a bit one could do to improve
    the user experience, such as filling in the date field automatically. I'll leave
    it to your own creativity to improve the user experience as you see fit.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个项目旁边，你可以选择编辑、详情或删除。随便玩玩这些功能。有很多可以做来改善用户体验，比如自动填写日期字段。我将把改善用户体验的创意留给你自己来完成。
- en: Deploying the application
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: 'Once your application is ready for deployment, there are a few options available
    that you can use:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的应用程序准备部署，你可以使用一些可用的选项：
- en: Microsoft Azure App Service
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Microsoft Azure应用服务
- en: Custom targets (IIS, FTP)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义目标（IIS、FTP）
- en: File System
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件系统
- en: Import Profile
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入配置文件
- en: 'Under the Build menu item in Visual Studio, click on Publish WebResearch (or
    whatever you decided to name your project):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio的“构建”菜单项下，点击“发布WebResearch”（或者你决定给你的项目起的名字）：
- en: '![](img/a754b01a-0589-4940-9be3-51b77c082c24.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a754b01a-0589-4940-9be3-51b77c082c24.png)'
- en: You should be presented with a screen showing you the available publishing options.
    Let's take a closer look.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个屏幕显示可用的发布选项。让我们仔细看一下。
- en: Microsoft Azure App Service
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure应用服务
- en: Microsoft Azure takes care of all the infrastructure requirements needed to
    create and maintain a web application. This means that we developers don't need
    to worry about things such as server management, load balancing, or security.
    With the platform being improved and extended almost daily, we can also be fairly
    confident that we'll have the latest and greatest functionality available for
    us.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure负责创建和维护Web应用程序所需的所有基础设施。这意味着我们开发人员不需要担心诸如服务器管理、负载平衡或安全性等问题。随着平台几乎每天都在改进和扩展，我们也可以相当有信心地认为我们将拥有最新和最好的功能。
- en: 'We''re not going to go into too much detail about Azure App Services as it
    can turn into a whole book by itself, but we can surely have a look at the required
    steps to publish our web app to this cloud platform:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细介绍Azure应用服务，因为它本身可以成为一本书，但我们当然可以看一下将我们的Web应用程序发布到这个云平台所需的步骤：
- en: 'Select Microsoft Azure App Service as your publishing target. If you have an
    existing site that you want to publish to, you can choose Select Existing. For
    now, I''ll assume you need to Create New:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Microsoft Azure应用服务作为你的发布目标。如果你有一个现有的站点需要发布，你可以选择“选择现有”。现在，我假设你需要“创建新”：
- en: '![](img/6679cfcf-e321-4982-9717-8260071d4cd7.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6679cfcf-e321-4982-9717-8260071d4cd7.png)'
- en: After hitting the OK button, Visual Studio will contact Azure with your logged
    in Microsoft account, which in turn will check if you have an Azure account and
    will return the available service details.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”按钮后，Visual Studio将使用你登录的Microsoft账户联系Azure，然后Azure将检查你是否有Azure账户，并返回可用的服务详情。
- en: I created a trial account for this blueprint with no specific details set up
    beforehand, and as you can see from the following screenshot, Azure will recommend
    an available App Name and App Service Plan for you.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这个蓝图创建了一个试用账户，没有事先设置具体细节，正如你从下面的截图中看到的，Azure会为你推荐一个可用的应用名称和应用服务计划。
- en: 'The Resource Group is optional and will get a unique group name if you do not
    specify anything:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源组是可选的，如果你没有指定任何内容，它将获得一个唯一的组名：
- en: '![](img/97ddd007-6866-4051-acee-7513d341a6b4.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97ddd007-6866-4051-acee-7513d341a6b4.png)'
- en: 'You can change the type of application you want to publish under the Change
    Type option. In our case, we''ll obviously go with Web App:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在“更改类型”选项下更改要发布的应用程序类型。在我们的情况下，我们显然会选择Web应用程序：
- en: '![](img/3bd00331-f7b3-4184-9254-904fa2e15c6b.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bd00331-f7b3-4184-9254-904fa2e15c6b.png)'
- en: Click on Services on the left-hand side to see the services that will be set
    up with your publication.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的“服务”以查看将与你的发布一起设置的服务。
- en: 'The first box shows any Recommended resource types your application might benefit
    from. In our case, an SQL Database is recommended, and we do need it, so we''ll
    simply add it by hitting the Add (+) button:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个框显示了您的应用程序可能受益的任何推荐资源类型。在我们的情况下，推荐了一个SQL数据库，我们确实需要它，因此我们将通过单击添加（+）按钮来简单地添加它：
- en: '![](img/f2dd708e-0062-4717-98c4-78b6fd209fbd.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2dd708e-0062-4717-98c4-78b6fd209fbd.png)'
- en: Azure will take care of the SQL installation, but we need to give it the required
    information, such as which server to use if you already have one on your profile,
    or to create a new one if you haven't.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Azure将负责SQL安装，但我们需要提供所需的信息，例如如果您已经在您的配置文件中有一个服务器，则使用哪个服务器，或者如果您还没有，则创建一个新的服务器。
- en: We will configure a new SQL Server in this case. Click the New button next to
    the SQL Server drop-down to open the Configure SQL Server form. Azure will provide
    a recommended name for the server. Although you can provide your own, the chances
    are that the Server Name will most likely not be available, so I recommend that
    you just use what they recommend.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将配置一个新的SQL服务器。单击SQL服务器下拉菜单旁边的新按钮以打开配置SQL服务器表单。Azure将为服务器提供一个推荐的名称。虽然您可以提供自己的名称，但服务器名称很可能不可用，因此我建议您只使用他们推荐的名称。
- en: 'Provide an Administrator Username and Administrator Password for the server
    and hit OK:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为服务器提供管理员用户名和管理员密码，然后点击确定：
- en: '![](img/17a77621-ba4d-4b85-8d29-f3df9a849bb0.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17a77621-ba4d-4b85-8d29-f3df9a849bb0.png)'
- en: 'Doing this will bring you back to the Configure SQL Database form, where you
    need to specify the Database Name as well as the Connection String Name:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做将带您回到配置SQL数据库表单，在那里您需要指定数据库名称以及连接字符串名称：
- en: '![](img/af3e06cd-b9b6-41bb-bb13-a3d2f49639e3.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af3e06cd-b9b6-41bb-bb13-a3d2f49639e3.png)'
- en: 'Take a look again at the Create App Service form. You will notice that the
    SQL Database has been added to the Resources you''ve selected and configured section:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次查看创建应用服务表单。您会注意到SQL数据库已添加到您选择和配置的资源部分：
- en: '![](img/270f697b-ced5-4bb0-9851-396cf1df6ba8.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/270f697b-ced5-4bb0-9851-396cf1df6ba8.png)'
- en: We can now go back to the Hosting tab, which will show you an overview of what
    will happen when you hit the Create button.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以返回到托管选项卡，它将向您显示单击创建按钮时会发生什么的概述。
- en: 'As shown in the following screenshot, the following three Azure resources will
    be created:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，将创建以下三个Azure资源：
- en: App Service
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用服务
- en: App Service Plan
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用服务计划
- en: SQL Server
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL服务器
- en: '![](img/221417e4-4eaa-4d99-a967-e96bb1b27c0d.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/221417e4-4eaa-4d99-a967-e96bb1b27c0d.png)'
- en: After creation, we can publish to our new Azure profile by hitting the Publish
    button.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建后，我们可以通过单击发布按钮将其发布到我们的新Azure配置文件。
- en: 'You will see some Build messages in your output window and should end up with
    the following:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在输出窗口中看到一些构建消息，并最终会得到以下结果：
- en: '[PRE19]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can have a look at your Dashboard on the Azure Portal ([portal.azure.com](http://portal.azure.com)),
    which will show you the resources enabled on your account due to our Service creation:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以查看Azure门户上的仪表板（[portal.azure.com](http://portal.azure.com)），该仪表板将显示由于我们的服务创建而启用在您的帐户上的资源：
- en: '![](img/fc0ef22f-1575-43a1-a14c-c7b200546a93.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc0ef22f-1575-43a1-a14c-c7b200546a93.png)'
- en: 'The published app will open up in your browser and you''ll most likely see
    an error message. By default, you won''t see much detail around the error, but
    at least Azure gives you some pointers to get the error details by setting your
    `ASPNETCORE_ENVIRONMENT` environment variable to `Development` and restarting
    the application:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布的应用程序将在浏览器中打开，您很可能会看到错误消息。默认情况下，您不会看到有关错误的详细信息，但至少Azure会通过将您的`ASPNETCORE_ENVIRONMENT`环境变量设置为`Development`并重新启动应用程序来提供一些指针以获取错误详细信息：
- en: '![](img/9e080081-484d-49ce-a907-f62bd608ec35.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e080081-484d-49ce-a907-f62bd608ec35.png)'
- en: 'When you log in to your Azure portal, you can navigate to your App Service
    and then in the Application settings, add the ASPNETCORE_ENVIRONMENT setting with
    the value of `Development` and restart your app:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您登录到Azure门户时，可以导航到您的应用服务，然后在应用程序设置中，添加值为`Development`的ASPNETCORE_ENVIRONMENT设置，并重新启动您的应用：
- en: '![](img/d4f6b70f-748c-4076-8c3a-6843c677f5a4.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4f6b70f-748c-4076-8c3a-6843c677f5a4.png)'
- en: 'Now, we can refresh the site, and we should see a bit more detail about the
    underlying error:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以刷新网站，我们应该看到关于底层错误的更多细节：
- en: '>![](img/d7ca2155-3f60-4f21-b193-c03bc5ac7b92.png)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](img/d7ca2155-3f60-4f21-b193-c03bc5ac7b92.png)'
- en: Ah, yes! We are still pointing to our local db, and we don't have access to
    that from the publish environment. Let's update our `appsettings.json` to point
    to our Azure db.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 啊，是的！我们仍然指向我们的本地数据库，并且我们无法从发布环境访问它。让我们更新我们的`appsettings.json`指向我们的Azure数据库。
- en: 'Navigate to the SQL Server from your Azure dashboard and then to Properties.
    On the right-hand pane, you should see an option to Show database connection strings:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Azure仪表板上的SQL服务器，然后到属性。在右侧窗格上，您应该会看到一个显示数据库连接字符串的选项：
- en: '![](img/97d0b1e4-52a7-48a3-be6f-52f04569964d.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97d0b1e4-52a7-48a3-be6f-52f04569964d.png)'
- en: Copy the ADO.NET connectionstring, head back to your code, and update the CONNECTION
    STRINGS entry in the `appsettings.json` file.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制ADO.NET连接字符串，返回到您的代码，并在`appsettings.json`文件中更新CONNECTION STRINGS条目。
- en: Republish the app and you should be good to go.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新发布应用程序，然后您应该可以开始了。
- en: Custom targets
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义目标
- en: The next publishing option is generally referred to as custom targets.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个发布选项通常称为自定义目标。
- en: 'This option basically includes anything that is not Azure or a local filesystem.
    After hitting the OK button, you get to choose the publish method:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项基本上包括任何不是Azure或本地文件系统的内容。单击确定按钮后，您可以选择发布方法：
- en: '![](img/0347a6c8-3b70-48ff-b933-6f8656fc5ee8.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0347a6c8-3b70-48ff-b933-6f8656fc5ee8.png)'
- en: 'There are four publish methods, or custom targets, available with each having
    its own requirements:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种发布方法或自定义目标，每种方法都有自己的要求：
- en: FTP
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: FTP
- en: Web Deploy
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web部署
- en: Web Deploy Package
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web部署包
- en: File System
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'We also have a Settings tab, which is applicable to all four methods. Let''s
    have a quick look at what our options are there:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个设置选项卡，适用于所有四种方法。让我们快速看看那里的选项：
- en: '![](img/08e44580-1306-4231-aeb8-52481aa5781c.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08e44580-1306-4231-aeb8-52481aa5781c.png)'
- en: The Configuration option can be set to either Debug or Release.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 配置选项可以设置为Debug或Release。
- en: With Debug, your generated files are debug-able, meaning that it is possible
    to hit specified break points. But it also means that there is a performance decrease.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Debug，您生成的文件是可调试的，这意味着可以命中指定的断点。但这也意味着性能会下降。
- en: With Release, you won't be able to debug on the fly, but will have an increase
    in performance as your application is fully optimized.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Release，您将无法实时调试，但由于应用程序已完全优化，性能将有所提高。
- en: In our case, the only available target framework is **netcoreapp2.0**, but in
    standard .NET applications, this is where you could set the target to .NET 3.5
    or .NET 4.5, or whichever is available.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，唯一可用的目标框架是**netcoreapp2.0**，但在标准.NET应用程序中，这是您可以将目标设置为.NET 3.5或.NET 4.5，或者其他可用的地方。
- en: You can then also specify the **Target Runtime**, choose to have Visual Studio
    clean up the destination folder, and specify a connection string specifically
    for runtime.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您还可以指定**目标运行时**，选择让Visual Studio清理目标文件夹，并为运行时指定连接字符串。
- en: As mentioned previously, these settings are applicable to all four publishing
    methods, which we will have a look at now.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这些设置适用于所有四种发布方法，我们现在将看一下。
- en: FTP
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FTP
- en: 'The FTP publish method enables you to publish to a hosted FTP location. For
    this option, you need to provide the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: FTP发布方法使您能够发布到托管的FTP位置。对于此选项，您需要提供以下内容：
- en: Server URL
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器URL
- en: Site path
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点路径
- en: User name
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名
- en: Password
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Destination URL
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标URL
- en: 'It also allows you to validate the connection from the entered details:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 它还允许您验证从输入的详细信息的连接：
- en: '![](img/fe6fae52-9c71-4413-98d0-20d74f83bf7b.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe6fae52-9c71-4413-98d0-20d74f83bf7b.png)'
- en: Web Deploy
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Deploy
- en: 'Looking at the forms of both Web Deploy as well as FTP, you could be excused
    to believe they''re the same thing. Well, both result in basically the same thing
    in that you publish directly to a hosted site, but with Web Deploy you get quite
    a few extra benefits, including the following:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 看看Web Deploy和FTP的形式，您可能会原谅自己认为它们是同一回事。嗯，两者都基本上会导致同样的结果，即直接发布到托管站点，但是使用Web Deploy，您将获得一些额外的好处，包括以下内容：
- en: Web Deploy compares the source with the destination and only syncs required
    changes, resulting in a significant decrease in publish time compared to FTP
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web Deploy会将源与目标进行比较，并仅同步所需的更改，从而大大减少了与FTP相比的发布时间
- en: Even though FTP also has its secure cousins SFTP and FTPS, Web Deploy always
    supports secure transfers
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使FTP也有其安全的表亲SFTP和FTPS，Web Deploy始终支持安全传输
- en: Proper database support, which enables you to apply SQL scripts during the sync
    process
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适当的数据库支持，使您能够在同步过程中应用SQL脚本
- en: 'The Publish screen looks as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 发布屏幕如下所示：
- en: '![](img/2e807d75-8688-447d-b711-fe265de0ff5d.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e807d75-8688-447d-b711-fe265de0ff5d.png)'
- en: Web Deploy Package
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web Deploy Package
- en: 'The Web Deploy Package option is used to create a deployment package that you
    can use to install your application wherever you choose afterwards. Refer to the
    following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Web Deploy Package选项用于创建部署包，您可以在之后选择的任何位置安装您的应用程序。请参考以下屏幕截图：
- en: '![](img/44899422-b9ad-4999-a323-d0cea6f988d1.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44899422-b9ad-4999-a323-d0cea6f988d1.png)'
- en: File System
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统
- en: 'Used by old school developers the world over, mainly due to the fact that we
    still don''t really trust some of the available tools enough, this option allows
    you to publish to a folder location of your choice, and then go and copy it over
    to the publish environment manually:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 被全球老派开发人员使用，主要是因为我们仍然不太信任一些可用工具，此选项允许您发布到您选择的文件夹位置，然后手动将其复制到发布环境：
- en: '![](img/ddc5b330-fa64-46b4-852b-07584b6f2fb3.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddc5b330-fa64-46b4-852b-07584b6f2fb3.png)'
- en: Folder
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹
- en: Just to show you how popular it is for developers to still have that control
    over the published code, we have two paths that end up with publishing to a folder
    location.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了向您展示开发人员仍然控制发布代码的流行程度，我们有两条路径最终都会发布到文件夹位置。
- en: 'Once again, just specify the folder location, and hit OK:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，只需指定文件夹位置，然后点击“确定”：
- en: '![](img/54b6e731-3e2d-47b7-a692-2e5baf0f5c38.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54b6e731-3e2d-47b7-a692-2e5baf0f5c38.png)'
- en: Import Profile
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入配置文件
- en: 'The Import Profile method is not an actual publishing method, but rather a
    simple option to import a previously saved profile, either from a backup or possibly
    used to share a publishing profile between a team of developers:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 导入配置文件方法不是实际的发布方法，而是一个简单的选项，用于导入先前保存的配置文件，可以是从备份中导入，也可以用于在开发团队之间共享发布配置文件：
- en: '![](img/c102484f-1420-449e-a608-483b228adf10.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c102484f-1420-449e-a608-483b228adf10.png)'
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've taken a bit of a guided tour around the Entity Framework
    Core neighborhood. We started off at the museum to look at the history of Entity
    Framework, before visiting the schools district to discuss some of the differences
    between the Code-First, Model-First, and Database-First implementation approaches.
    There was even a quick visit from TechNet, who offered some ideas around designing
    a database.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在Entity Framework Core领域进行了一次引导式的导览。我们从博物馆开始，了解了Entity Framework的历史，然后访问学区，讨论了Code-First、Model-First和Database-First实现方法之间的一些区别。甚至还有TechNet的快速访问，提供了一些关于设计数据库的想法。
- en: Afterwards, we spent some time building our own EF Core solution and looked
    at the various ways of deploying our application. We also had a look at populating
    our new building with some test data to see how it will hold up once opened up
    to the public.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们花了一些时间构建自己的EF Core解决方案，并研究了部署应用程序的各种方式。我们还研究了如何用一些测试数据填充我们的新建筑，以查看一旦向公众开放，它将如何保持稳定。
- en: The tour concluded with a visit to the distribution district to get an overview
    of the available deployment options.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 导览结束时，我们参观了分发区，以了解可用的部署选项。
- en: The visit was far too brief to cover all that is available and possible in the
    world of Entity Framework Core as it is a framework with a large community constantly
    working on improving and extending its already extensive functionality.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这次访问时间太短，无法涵盖Entity Framework Core世界中所有可用和可能的内容，因为它是一个拥有庞大社区不断努力改进和扩展其功能的框架。
- en: It is great to know that the development community does not settle for any mediocrity
    and constantly works towards improving and extending functionality, such as Entity
    Framework, which might seem quite mature and extensive already.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 了解开发社区不满足于任何平庸，不断努力改进和扩展功能，比如Entity Framework，尽管它似乎已经非常成熟和广泛。
