- en: Chapter 4. Publishing Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。发布图像
- en: In the previous chapter, we learned how to build Docker images. The next logical
    step is to publish these images in a public repository for public discovery and
    consumption. So, this chapter focuses on publishing images on the Docker Hub,
    and how to get the most out of the Docker Hub. We can create a new Docker image,
    using a `commit` command and a `Dockerfile`, build on it, and push it to the Docker
    Hub. The concept of a trusted repository will be discussed. This trusted repository
    is created from GitHub or Bitbucket. This can then be integrated with the Docker
    Hub to automatically build images, as a result of updates in the repository. This
    repository on GitHub is used to store the `Dockerfile`, which was previously created.
    Also, we will illustrate how worldwide organizations can enable their teams of
    developers to craft and contribute a variety of Docker images to be deposited
    in the Docker Hub. The Docker Hub REST APIs can be used for user management and
    manipulation of repository programmatically.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何构建Docker镜像。下一个逻辑步骤是将这些镜像发布到公共存储库以供公众发现和使用。因此，本章重点介绍了在Docker Hub上发布图像以及如何充分利用Docker
    Hub。我们可以使用`commit`命令和`Dockerfile`创建一个新的Docker镜像，对其进行构建，并将其推送到Docker Hub。将讨论受信任存储库的概念。这个受信任的存储库是从GitHub或Bitbucket创建的。然后可以将其与Docker
    Hub集成，以便根据存储库中的更新自动构建图像。GitHub上的这个存储库用于存储之前创建的`Dockerfile`。此外，我们将说明全球组织如何使他们的开发团队能够创建和贡献各种Docker镜像，并将其存储在Docker
    Hub中。Docker Hub REST API可用于用户管理和以编程方式操作存储库。
- en: 'The following topics are covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Understanding the Docker Hub
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Docker Hub
- en: How to push images to the Docker Hub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将图像推送到Docker Hub
- en: Automatic building of images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像的自动构建
- en: Private repositories on the Docker Hub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub上的私有存储库
- en: Creating organizations on the Docker Hub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker Hub上创建组织
- en: The Docker Hub REST API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub REST API
- en: Understanding the Docker Hub
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Docker Hub
- en: The Docker Hub is a central place used for keeping the Docker images either
    in a public or private repository. The Docker Hub provides features, such as a
    repository for Docker images, user authentications, automated image builds, integration
    with GitHub or Bitbucket, and managing organizations and groups. The Docker Registry
    component of the Docker Hub manages the repository.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub是一个用于在公共或私有存储库中保存Docker镜像的中心位置。Docker Hub提供了存储Docker镜像的存储库、用户认证、自动化图像构建、与GitHub或Bitbucket的集成以及管理组织和团队的功能。Docker
    Hub的Docker Registry组件管理存储库。
- en: 'Docker Registry is a storage system used to store the images. Automated build
    is a feature of the Docker Hub, which is not open source yet, at the time of writing
    this book. The following diagram shows the typical features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry是用于存储图像的存储系统。自动构建是Docker Hub的一个功能，在撰写本书时尚未开源。以下图表显示了典型的功能：
- en: '![Understanding the Docker Hub](graphics/7937OT_04_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![理解Docker Hub](graphics/7937OT_04_01.jpg)'
- en: 'In order to work with the Docker Hub, you have to register with the Docker
    Hub, and create an account using the link at [https://hub.docker.com/account/signup](https://hub.docker.com/account/signup).
    You can update the **Username**, **Password**, and **Email Address**, as shown
    in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Docker Hub，您必须在Docker Hub上注册，并使用以下链接创建帐户：[https://hub.docker.com/account/signup](https://hub.docker.com/account/signup)。您可以更新**用户名**、**密码**和**电子邮件地址**，如下面的屏幕截图所示：
- en: '![Understanding the Docker Hub](graphics/7937OT_04_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![理解Docker Hub](graphics/7937OT_04_02.jpg)'
- en: 'After completing the **Sign Up** process, you need to complete the verification
    received in an e-mail. After the e-mail verification is completed, you will see
    something similar to the following screenshot, when you login to the Docker Hub:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成**注册**过程后，您需要完成通过电子邮件收到的验证。完成电子邮件验证后，当您登录到Docker Hub时，您将看到类似以下截图的内容：
- en: '![Understanding the Docker Hub](graphics/7937OT_04_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![理解Docker Hub](graphics/7937OT_04_03.jpg)'
- en: 'The creation of an account in the Docker Hub is completed successfully, and
    now you can log in to your Docker Hub account using [https://hub.docker.com/account/login/?next=/account/welcome/](https://hub.docker.com/account/login/?next=/account/welcome/),
    as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub中的帐户创建已成功完成，现在您可以使用[https://hub.docker.com/account/login/?next=/account/welcome/](https://hub.docker.com/account/login/?next=/account/welcome/)登录到您的Docker
    Hub帐户，如下截图所示：
- en: '![Understanding the Docker Hub](graphics/7937OT_04_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![理解Docker Hub](graphics/7937OT_04_04.jpg)'
- en: 'The Docker Hub also supports command-line access to the Docker Hub using a
    Ubuntu terminal:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub还支持使用Ubuntu终端对Docker Hub进行命令行访问：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After a successful login, the output is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，输出如下：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can browse the available images in the Docker Hub, which are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以浏览Docker Hub中的可用图像，如下所示：
- en: '![Understanding the Docker Hub](graphics/7937OT_04_05.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![理解Docker Hub](graphics/7937OT_04_05.jpg)'
- en: 'Also, you can see your settings, update your profile, and get the details of
    the supported communities, such as Twitter, stackoverflow, #IRC, Google Groups,
    and GitHub.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以查看您的设置，更新您的个人资料，并获取支持的社区的详细信息，如Twitter、stackoverflow、#IRC、Google Groups和GitHub。
- en: Pushing images to the Docker Hub
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像推送到Docker Hub
- en: 'Here, we will create a Docker image on the local machine, and push this image
    to the Docker Hub. You need to perform the following steps in this section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将在本地机器上创建一个Docker图像，并将此图像推送到Docker Hub。您需要在本节中执行以下步骤：
- en: 'Create a Docker image on the local machine by doing one of the following:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式在本地机器上创建Docker图像之一：
- en: Using the `docker commit` sub command
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker commit`子命令
- en: Using the `docker commit` sub command with `Dockerfile`
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Dockerfile`的`docker commit`子命令
- en: Push this created image to the Docker Hub.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此创建的图像推送到Docker Hub。
- en: Delete the image from the Docker Hub.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Docker Hub中删除图像。
- en: We will use the Ubuntu base image, run the container, add a new directory and
    a new file, and then create a new image. In [Chapter 3](ch03.html "Chapter 3. Building
    Images"), *Building Images*, we have seen the creation of the Docker image using
    `Dockerfile`. You may refer to this to check for details of the `Dockerfile` syntax.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Ubuntu基础图像，运行容器，添加一个新目录和一个新文件，然后创建一个新图像。在[第3章](ch03.html“第3章。构建图像”)，*构建图像*中，我们已经看到了使用`Dockerfile`创建Docker图像。您可以参考这个来检查`Dockerfile`语法的细节。
- en: 'We will run the container with the name `containerforhub` from the base `ubuntu`
    image, as shown in the following terminal code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从基本的`ubuntu`图像中使用名称为`containerforhub`的容器运行容器，如下终端代码所示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we''ll create a new directory and file in the `containerforhub` container.
    We will also update the new file with some sample text to test later:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`containerforhub`容器中创建一个新目录和文件。我们还将更新新文件，以便稍后进行测试：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s build the new image with the `docker commit` command from the container,
    which has just been created. Note that the `commit` command would be executed
    from the host machine, from where the container is running, and not from inside
    this container:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用刚刚创建的容器的`docker commit`命令构建新图像。请注意，`commit`命令将从主机机器上执行，从容器正在运行的位置执行，而不是从容器内部执行：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we have a new Docker image available on the local machine with the `vinoddandy/imageforhub`
    name. At this point in time, a new image with `mynewdir` and `mynewfile` is created
    locally.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在本地机器上有一个名为`vinoddandy/imageforhub`的新Docker图像。此时，本地创建了一个带有`mynewdir`和`mynewfile`的新图像。
- en: We will log in to the Docker Hub using the `sudo docker login` command, as discussed
    earlier in this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`sudo docker login`命令登录到Docker Hub，就像本章前面讨论的那样。
- en: 'Let''s push this image to the Docker Hub from the host machine:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从主机机器将此图像推送到Docker Hub：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we'll `login` to the Docker Hub and verify the image in **Repositories**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将`登录`到Docker Hub并在**存储库**中验证图像。
- en: 'To test the image from the Docker Hub, let''s remove this image from the local
    machine. To remove the image, first we need to stop the container and then delete
    the container:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试来自Docker Hub的图像，让我们从本地机器中删除此图像。要删除图像，首先需要停止容器，然后删除容器：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will also delete the `vinoddandy/imageforhub` image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将删除`vinoddandy/imageforhub`图像：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will pull the newly created image from the Docker Hub, and run the new container
    on the local machine:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Docker Hub中拉取新创建的图像，并在本地机器上运行新容器：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, we have pulled the latest image from the Docker Hub and created the container
    with the new image `vinoddandy/imageforhub`. Make a note that the `Unable to find
    image 'vinoddandy/imageforhub' locally` message confirms that the image is downloaded
    from the remote repository of the Docker Hub.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经从Docker Hub中拉取了最新的图像，并使用新图像`vinoddandy/imageforhub`创建了容器。请注意，`无法在本地找到图像'vinoddandy/imageforhub'`的消息证实了该图像是从Docker
    Hub的远程存储库中下载的。
- en: The text in `mynewfile` verifies that it is the same image, which was created
    earlier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`mynewfile`中的文字证实了它是之前创建的相同图像。'
- en: 'Finally, we will delete the image from the Docker Hub using [https://registry.hub.docker.com/u/vinoddandy/imageforhub/](https://registry.hub.docker.com/u/vinoddandy/imageforhub/)
    and then click on **Delete Repository**, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将从Docker Hub中删除图像，使用[https://registry.hub.docker.com/u/vinoddandy/imageforhub/](https://registry.hub.docker.com/u/vinoddandy/imageforhub/)，然后点击**删除存储库**，如下面的截图所示：
- en: '![Pushing images to the Docker Hub](graphics/7937OT_04_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![将图像推送到Docker Hub](graphics/7937OT_04_06.jpg)'
- en: We'll again create this image but using the `Dockerfile` process. So, let's
    create the Docker image using the `Dockerfile` concept explained in [Chapter 3](ch03.html
    "Chapter 3. Building Images"), *Building Images*, and push this image to the Docker
    Hub.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次创建此图像，但使用`Dockerfile`过程。因此，让我们使用[第3章](ch03.html "第3章。构建图像")中解释的`Dockerfile`概念创建Docker图像，并将此图像推送到Docker
    Hub。
- en: 'The `Dockerfile` on the local machine is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本地机器上的`Dockerfile`如下所示：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we build the image locally using the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们使用以下命令在本地构建图像：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We''ll run the container using this image, as shown here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此图像运行容器，如下所示：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This text in `mynewdir` confirms that the new image is built properly with a
    new directory and a new file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`mynewdir`中的这段文字证实了新图像是通过新目录和新文件正确构建的。'
- en: 'Repeat the `login` process, in the Docker Hub, and push this newly created
    image:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重复`登录`过程，在Docker Hub中，然后推送这个新创建的镜像：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we can verify the availability of the image on the Docker Hub:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以验证Docker Hub上图像的可用性：
- en: '![Pushing images to the Docker Hub](graphics/7937OT_04_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![将图像推送到Docker Hub](graphics/7937OT_04_07.jpg)'
- en: Automating the building process for images
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化图像构建过程
- en: We learnt how to build images locally and push those images to the Docker Hub.
    The Docker Hub also has the capability to automatically build the image from `Dockerfile`
    kept in the repository of GitHub or Bitbucket. Automated builds are supported
    on both private and public repositories of GitHub and Bitbucket. The Docker Hub
    Registry keeps all the automated build images. The Docker Hub Registry is based
    on open source and can be accessed from [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何在本地构建图像并将这些图像推送到Docker Hub。Docker Hub还具有从存储在GitHub或Bitbucket仓库中的`Dockerfile`自动构建图像的功能。自动构建支持GitHub和Bitbucket的私有和公共仓库。Docker
    Hub Registry保存所有自动构建图像。Docker Hub Registry基于开源，并且可以从[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)访问。
- en: 'We will discuss the steps needed to implement the automated build process:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论实施自动构建过程所需的步骤：
- en: We first connect the Docker Hub to my GitHub account.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将Docker Hub连接到我的GitHub帐户。
- en: 'Login to the Docker Hub, and click on **View Profile** and then navigate to
    **Add Repository** | **Automated Build**, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到Docker Hub，并点击**查看个人资料**，然后转到**添加仓库** | **自动构建**，如下面的截图所示：
- en: '![Automating the building process for images](graphics/7937OT_04_08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![自动化构建图像的过程](graphics/7937OT_04_08.jpg)'
- en: We now select **GitHub**:![Automating the building process for images](graphics/7937OT_04_09.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们选择**GitHub**：![自动化构建图像的过程](graphics/7937OT_04_09.jpg)
- en: Once **GitHub** is selected, it will ask for authorization. Here, we will select
    **Public and Private**, as shown here:![Automating the building process for images](graphics/7937OT_04_10.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**GitHub**后，它将要求授权。在这里，我们将选择**公共和私有**，如下所示：![自动化构建图像的过程](graphics/7937OT_04_10.jpg)
- en: After clicking on **Select**, it will now show your GitHub repository:![Automating
    the building process for images](graphics/7937OT_04_11.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择**后，它现在会显示您的GitHub仓库：![自动化构建图像的过程](graphics/7937OT_04_11.jpg)
- en: 'Click on the **Select** button of your repository **vinodsinghh/dockerautomationbuild**,
    shown in the preceding screenshot:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您的仓库**vinodsinghh/dockerautomationbuild**的**选择**按钮，如前面的截图所示：
- en: We choose the default branch and update the tag with `Githubimage`. Also, we
    will keep the location as its default value, which is the root of our Docker Hub,
    as shown in the following screenshot:![Automating the building process for images](graphics/7937OT_04_12.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们选择默认分支，并使用`Githubimage`更新标签。此外，我们将保持位置为其默认值，即我们的Docker Hub的根目录，如下面的截图所示：![自动化构建图像的过程](graphics/7937OT_04_12.jpg)
- en: Finally, we will click on **Create Repository**, as shown in the preceding screenshot:![Automating
    the building process for images](graphics/7937OT_04_13.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将点击**创建仓库**，如前面的截图所示：![自动化构建图像的过程](graphics/7937OT_04_13.jpg)
- en: Click on **build details** to track your build status, as shown in the preceding
    screenshot. It will lead you to the following screenshot:![Automating the building
    process for images](graphics/7937OT_04_14.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建详情**以跟踪构建状态，如前面的截图所示。它将引导您到下面的截图：![自动化构建图像的过程](graphics/7937OT_04_14.jpg)
- en: So, whenever the `Dockerfile` is updated in GitHub, the automated build gets
    triggered, and a new image will be stored in the Docker Hub Registry. We can always
    check the build history. We can change the `Dockerfile` on the local machine and
    push to GitHub. Then, we can see the automated build link of the Docker Hub at
    [https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/](https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每当GitHub中的`Dockerfile`更新时，自动构建就会被触发，并且新的镜像将存储在Docker Hub注册表中。我们可以随时检查构建历史记录。我们可以在本地机器上更改`Dockerfile`并推送到GitHub。然后，我们可以在Docker
    Hub上看到自动构建链接[https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/](https://registry.hub.docker.com/u/vinoddandy/dockerautomatedbuild/builds_history/82194/)。
- en: Private repositories on the Docker Hub
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub上的私有仓库
- en: The Docker Hub provides both a public and private repository. The public repository
    is free to users and private is a paid service. The plans with private repositories
    are available in different sizes, such as a micro, small, medium, or large subscription.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub提供公共和私有仓库。公共仓库对用户免费，私有仓库是付费服务。私有仓库的计划有不同的大小，如微型、小型、中型或大型订阅。
- en: Docker has published their public repository code to open source at [https://github.com/docker/docker-registry](https://github.com/docker/docker-registry).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已经将他们的公共仓库代码发布为开源，网址是[https://github.com/docker/docker-registry](https://github.com/docker/docker-registry)。
- en: Normally, enterprises will not like to keep their Docker images either in a
    Docker public or private repository. They prefer to keep, maintain, and support
    their own repository. Hence, Docker also provides the option for enterprises to
    create and install their own repository.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，企业不喜欢将他们的Docker镜像存储在Docker的公共或私有仓库中。他们更喜欢保留、维护和支持自己的仓库。因此，Docker也为企业提供了创建和安装自己的仓库的选项。
- en: 'Let''s create a repository in the local machine using the registry image provided
    by Docker. We will run the registry container on the local machine, using the
    registry image from Docker:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Docker提供的注册表镜像在本地机器上创建一个仓库。我们将在本地机器上运行注册表容器，使用来自Docker的注册表镜像：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the automated build section, we built the `vinoddandy/dockerfileforhub`
    image. Let''s tag the image ID `224affbf9a65` to our locally created `registry`
    image. This tagging of the image is needed for unique identification inside the
    local repository. This image `registry` may have multiple variants in the repository,
    so this `tag` will help you identify the particular image:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动构建部分，我们构建了`vinoddandy/dockerfileforhub`镜像。让我们将镜像ID `224affbf9a65`标记到我们本地创建的`registry`镜像上。这个镜像的标记是为了在本地仓库中进行唯一标识。这个`registry`镜像可能在仓库中有多个变体，所以这个`tag`将帮助您识别特定的镜像：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the tagging is done, push this image to a new registry using the `docker
    push` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 标记完成后，使用`docker push`命令将此镜像推送到新的注册表：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, the new image is available in the local repository. You can now retrieve
    this image from the local registry and run the container. This task is left for
    you to complete.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，新的镜像已经在本地仓库中可用。您现在可以从本地注册表中检索此镜像并运行容器。这个任务留给你来完成。
- en: Organizations and teams on the Docker Hub
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub上的组织和团队
- en: One of the useful aspects of private repositories is that you can share them
    only with members of your organization or team. The Docker Hub lets you create
    organizations, where you can collaborate with your colleagues and manage private
    repositories. You can learn how to create and manage an organization.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 私有仓库的一个有用方面是，您可以只与组织或团队成员共享它们。Docker Hub允许您创建组织，在那里您可以与同事合作并管理私有仓库。您可以学习如何创建和管理组织。
- en: 'The first step is to create an organization on the Docker Hub, as shown in
    the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在Docker Hub上创建一个组织，如下截图所示：
- en: '![Organizations and teams on the Docker Hub](graphics/7937OT_04_15.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub上的组织和团队](graphics/7937OT_04_15.jpg)'
- en: 'Inside your organization, you can add more organizations, and then add members
    to it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的组织中，您可以添加更多的组织，然后向其中添加成员：
- en: '![Organizations and teams on the Docker Hub](graphics/7937OT_04_16.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub上的组织和团队](graphics/7937OT_04_16.jpg)'
- en: The members of your organization and group can collaborate with the organization
    and teams. This feature would be more useful in case of a private repository.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织和团队成员可以与组织和团队合作。在私人存储库的情况下，此功能将更加有用。
- en: The REST APIs for the Docker Hub
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub的REST API
- en: The Docker Hub provides a REST API to integrate the Hub capabilities through
    programs. The REST API is supported for both user as well as repository management.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub提供了REST API，通过程序集成Hub功能。 REST API支持用户和存储库管理。
- en: 'User management supports the following features:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 用户管理支持以下功能：
- en: '**User Login**: This is used for user login to the Docker Hub:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登录：用于用户登录到Docker Hub：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**User Register**: This is used for registration of a new user:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户注册：用于注册新用户：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Update user**: This is used to update the user''s password and e-mail:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户：用于更新用户的密码和电子邮件：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Repository management supports the following features:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库管理支持以下功能：
- en: '**Create a user repository**: This creates a user repository:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户存储库：这将创建一个用户存储库：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After you create repositories, your repositories will be listed here, as shown
    in this screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建存储库后，您的存储库将在此处列出，如此屏幕截图所示：
- en: '![The REST APIs for the Docker Hub](graphics/7937OT_04_17.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Hub的REST API](graphics/7937OT_04_17.jpg)'
- en: '**Delete a user repository**: This deletes a user repository:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户存储库：这将删除用户存储库：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Create a library repository**: This creates the library repository, and it
    is available only to Docker administrators:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建库存储库：这将创建库存储库，仅供Docker管理员使用：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Delete a library repository**: This deletes the library repository, and it
    is available only to Docker administrators:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除库存储库：这将删除库存储库，仅供Docker管理员使用：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Update user repository images**: This updates the images of a user''s repository:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新用户存储库图像：这将更新用户存储库的图像：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**List user repository images**: This lists the images of a user''s repository:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出用户存储库图像：这将列出用户存储库的图像：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Update library repository images**: This updates the images of a library
    repository:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新库存储库图像：这将更新库存储库的图像：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**List library repository images**: This lists the images of a library repository:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出库存储库图像：这将列出库存储库的图像：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Authorize a token for a library repository**: This authorizes a token for
    a library repository:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为库存储库授权令牌：为库存储库授权令牌：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Authorize a token for a user repository**: This authorizes a token for a
    user''s repository:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户存储库授权令牌：为用户存储库授权令牌：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Docker images are the most prominent building blocks used for deriving real-world
    Docker containers that can be exposed as a service over any network. Developers
    can find and check images for their unique capabilities, and use them accordingly
    for their own purposes in bringing up highly usable, publicly discoverable, network-accessible,
    and cognitively composable containers. All the crafted images need to be put in
    a public registry repository. In this chapter, we clearly explained how to publish
    images in a repository. We also talked about the trusted repositories and their
    distinct characteristics. Finally, we demonstrated how the REST API for the repository
    can be leveraged to push in and play around with Docker images and user management
    programmatically.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像是用于衍生真实世界Docker容器的最突出的构建模块，可以在任何网络上作为服务公开。开发人员可以查找和检查镜像的独特功能，并根据自己的目的使用它们，以创建高度可用、公开可发现、可访问网络和认知可组合的容器。所有精心制作的镜像都需要放在公共注册库中。在本章中，我们清楚地解释了如何在存储库中发布镜像。我们还谈到了受信任的存储库及其独特的特点。最后，我们演示了如何利用存储库的REST
    API来推送和操作Docker镜像以及用户管理。
- en: The Docker images need to be stored in a public, controlled, and network-accessible
    location to be readily found and leveraged by worldwide software engineers and
    system administrators. The Docker Hub is being touted as the best-in-class method
    for centrally aggregating, curating, and managing Docker images, originating from
    Docker enthusiasts (internal as well as external). However, enterprises cannot
    afford to keep their Docker images in a public domain, and hence, the next chapter
    is dedicated to expose the steps needed for image deployment and management in
    private IT infrastructures.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像需要存储在公共、受控和可访问网络的位置，以便全球软件工程师和系统管理员可以轻松找到并利用。Docker Hub被誉为集中聚合、筛选和管理Docker镜像的最佳方法，源自Docker爱好者（内部和外部）。然而，企业无法将其Docker镜像存储在公共域中，因此，下一章将专门介绍在私人IT基础设施中暴露镜像部署和管理所需的步骤。
