["```cs\nservices.AddHttpClient(); \n```", "```cs\npublic class HttpClientFixture\n{\n    public HttpClientFixture()\n    {\n        var serviceCollection = new ServiceCollection();\n        serviceCollection\n            .AddHttpClient();\n         ServiceProvider = serviceCollection.BuildServiceProvider();\n    }\n    public ServiceProvider ServiceProvider { get; private set; }\n} \n```", "```cs\npublic class UnitTest1:IClassFixture<HttpClientFixture>\n{\n    private readonly ServiceProvider _serviceProvider;\n    public UnitTest1(HttpClientFixture fixture)\n    {\n        _serviceProvider = fixture.ServiceProvider;\n    }\n    [Fact]\n    public void Test1()\n    {\n        var factory = \n            _serviceProvider.GetService<IHttpClientFactory>())\n\n            HttpClient client = factory.CreateClient();\n            //use client to interact with application here\n\n    }\n} \n```", "```cs\npublic class UnitTest1 \n    : IClassFixture<WebApplicationFactory<MyProject.Startup>>\n{\n    private readonly \n        WebApplicationFactory< MyProject.Startup> _factory;\n    public UnitTest1 (WebApplicationFactory<MyProject.Startup> factory)\n    {\n        _factory = factory;\n    }\n    [Theory]\n    [InlineData(\"/\")]\n    [InlineData(\"/Index\")]\n    [InlineData(\"/About\")]\n    ....\n    public async Task MustReturnOK(string url)\n    {\n        var client = _factory.CreateClient();\n        // here both client and server are ready\n        var response = await client.GetAsync(url);\n        //get the response\n        response.EnsureSuccessStatusCode(); \n        // verify we got a success return code.\n    }\n    ...\n    ---\n} \n```", "```cs\nservices.AddDbContext<MyDBContext>(options =>  options.UseInMemoryDatabase(databaseName: \"MyDatabase\")); \n```", "```cs\npublic class DBWebFixture: WebApplicationFactory<Startup>\n{\n    public DBWebFixture() : base()\n    {\n        var context = Services\n            .GetService(typeof(MainDBContext))\n                as MainDBContext;\n        using (var tx = context.Database.BeginTransaction())\n        {\n            context.Database\n                .ExecuteSqlRaw\n                    (\"DELETE FROM dbo.PackgeEvents\");\n            context.Database\n                .ExecuteSqlRaw\n                    (\"DELETE FROM dbo.Packges\");\n            context.Database\n                 .ExecuteSqlRaw\n                    (\"DELETE FROM dbo.Destinations\");\n            tx.Commit();\n        }\n    }\n} \n```", "```cs\nusing PackagesManagement;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Xunit;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing AngleSharp;\nusing AngleSharp.Html.Parser;\nusing System.IO; \n```", "```cs\npublic class UIExampleTestcs:\n         IClassFixture<WebApplicationFactory<Startup>>\n{\n    private readonly\n       WebApplicationFactory<Startup> _factory;\n    public UIExampleTestcs(WebApplicationFactory<Startup> factory)\n    {\n       _factory = factory;\n    }\n} \n```", "```cs\n[Fact]\npublic async Task TestMenu()\n{\n    var client = _factory.CreateClient();\n    ...\n    ...         \n} \n```", "```cs\n//Create an angleSharp default configuration\nvar config = Configuration.Default;\n//Create a new context for evaluating webpages \n//with the given config\nvar context = BrowsingContext.New(config); \n```", "```cs\nvar response = await client.GetAsync(\"/\"); \n```", "```cs\nresponse.EnsureSuccessStatusCode(); \n```", "```cs\nstring source = await response.Content.ReadAsStringAsync(); \n```", "```cs\nvar document = await context.OpenAsync(req => req.Content(source)); \n```", "```cs\nvar node = document.QuerySelector(\"a[href=\\\"/ManagePackages\\\"]\"); \n```", "```cs\nAssert.NotNull(node); \n```", "```cs\nvar client = _factory.CreateClient(\n    new WebApplicationFactoryClientOptions\n    {\n        AllowAutoRedirect=true,\n        HandleCookies=true\n    }); \n```"]