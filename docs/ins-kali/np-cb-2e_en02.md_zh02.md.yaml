- en: Chapter 2. Advanced Indexing and Array Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：高级索引和数组概念
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: Installing SciPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 SciPy
- en: Installing PIL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 PIL
- en: Resizing images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整图像大小
- en: Comparing views and copies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较视图和副本
- en: Flipping Lena
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻转 Lena
- en: Fancy indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花式索引
- en: Indexing with a list of locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置列表索引
- en: Indexing with Booleans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值索引
- en: Stride tricks for Sudoku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数独的步幅技巧
- en: Broadcasting arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广播数组
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: NumPy is famous for its efficient arrays. This fame is partly due to the ease
    of indexing. We will demonstrate advanced indexing tricks using images. Before
    diving into indexing, we will install the necessary software—SciPy and PIL. If
    you feel it is required, review the *Installing matplotlib* recipe in [Chapter
    1](ch01.xhtml "Chapter 1. Winding Along with IPython"), *Winding Along with IPython*.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 以其高效的数组而闻名。 之所以成名，部分原因是索引容易。 我们将演示使用图像的高级索引技巧。 在深入研究索引之前，我们将安装必要的软件——
    SciPy 和 PIL。 如果您认为有此需要，请参阅第一章“使用 IPython”的“安装 Matplotlib”秘籍。
- en: 'In this chapter and in other chapters, we will use the following imports:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和其他章中，我们将使用以下导入：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will also use the newest syntax for the `print()` Python function as much
    as possible.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将尽可能为`print()` Python 函数使用最新的语法。
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Python 2 is a still popular major Python version, but it is not compatible with
    Python 3\. Python 2 is officially supported until 2020\. One of the main differences
    is the syntax for the `print()` function. This book uses code that is as compatible
    with Python 2 and Python 3 as possible.
  prefs: []
  type: TYPE_NORMAL
  zh: Python2 是仍然很流行的主要 Python 版本，但与 Python3 不兼容。Python2 直到 2020 年才正式失去支持。主要区别之一是`print()`函数的语法。
    本书使用的代码尽可能与 Python2 和 Python3 兼容。
- en: Some of the examples in this chapter involve manipulating images. In order to
    do that, we will require the **Python Image Library** (**PIL**), but don't worry;
    instructions and pointers to help you install PIL and other necessary Python software
    are given throughout the chapter when necessary.
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的一些示例涉及图像处理。 为此，我们将需要 **Python 图像库**（**PIL**），但不要担心； 必要时会在本章中提供帮助您安装 PIL
    和其他必要 Python 软件的说明和指示。
- en: Installing SciPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 SciPy
- en: SciPy is the scientific Python library and is closely related to NumPy. In fact,
    SciPy and NumPy used to be the same project many years ago. SciPy, just like NumPy,
    is an open source project available under the BSD license. In this recipe, we
    will install SciPy. SciPy provides advanced functionality, including statistics,
    signal processing, linear algebra, optimization, FFT, ODE solvers, interpolation,
    special functions, and integration. There is some overlap with NumPy, but NumPy
    primarily provides array functionality.
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 是科学的  Python 库，与 NumPy 密切相关。 实际上，SciPy 和 NumPy 在很多年前曾经是同一项目。 就像 NumPy
    一样，SciPy 是一个开放源代码项目，已获得 BSD 许可。 在此秘籍中，我们将安装 SciPy。 SciPy 提供高级功能，包括统计，信号处理，线性代数，优化，FFT，ODE
    求解器，插值，特殊功能和积分。 NumPy 有一些重叠，但是 NumPy 主要提供数组功能。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: In [Chapter 1](ch01.xhtml "Chapter 1. Winding Along with IPython"), *Winding
    Along with IPython*, we discussed how to install `setuptools` and `pip`. Reread
    the recipe if necessary.
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章，“使用 IPython”中，我们讨论了如何安装`setuptools`和`pip`。 如有必要，请重新阅读秘籍。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'In this recipe, we will go through the steps for installing SciPy:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们将完成安装 SciPy 的步骤：
- en: '**Installing from source**: If you have Git installed, you can clone the SciPy
    repository using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从源安装**：如果已安装 Git，则可以使用以下命令克隆 SciPy 仓库：'
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This installs SciPy to your home directory. It requires Python 2.6 or later
    versions.
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将 SciPy 安装到您的主目录。 它需要 Python 2.6 或更高版本。
- en: 'Before building, you will also need to install the following packages that
    SciPy depends on:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建之前，您还需要安装 SciPy 依赖的以下包：
- en: The `BLAS` and `LAPACK` libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BLAS`和`LAPACK`库'
- en: The C and Fortran compilers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C 和 Fortran 编译器
- en: There is a chance that you have already installed this software as part of the
    NumPy installation.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经在 NumPy 安装过程中安装了此软件。
- en: '**Installing SciPy on Linux**: Most Linux distributions have SciPy packages.
    We will go through the necessary steps for some of the popular Linux distributions
    (you may need to log in as root or have sudo privileges):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Linux 上安装 SciPy**：大多数 Linux 发行版都包含 SciPy 包。 我们将遵循一些流行的 Linux 发行版中的必要步骤（您可能需要以
    root 用户身份登录或具有`sudo`权限）：'
- en: 'In order to install SciPy on Red Hat, Fedora, and CentOS, run the following
    instructions from the command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在 RedHat，Fedora 和 CentOS 上安装 SciPy，请从命令行运行以下指令：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to install SciPy on Mandriva, run this command-line instruction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在 Mandriva 上安装 SciPy，请运行以下命令行指令：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to install SciPy on Gentoo, run the following command line instruction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了在 Gentoo 上安装 SciPy，请运行以下命令行指令：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On Debian or Ubuntu, we need to type this instruction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Debian 或 Ubuntu 上，我们需要输入以下指令：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Installing SciPy on Mac OS X**: Apple Developer Tools (XCode) is required
    because it contains the `BLAS` and `LAPACK` libraries. It can be found either
    in the App Store or in the installation DVD that came with your Mac; or you can
    get the latest version from the Apple Developer''s connection website at [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
    Make sure that everything, including all the optional packages, is installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 MacOSX 上安装 SciPy**：需要苹果开发者工具（XCode），因为它包含`BLAS`和`LAPACK`库。
    可以在应用商店或 Mac 随附的安装 DVD 中找到它。 或者您可以从苹果开发者的连接网站获取最新版本，位于[`developer.apple.com/xcode`](https://developer.apple.com/xcode/)。
    确保已安装所有内容，包括所有可选包。'
- en: You probably have a Fortran compiler installed for NumPy. The binaries for `gfortran`
    can be found at [http://r.research.att.com/tools/](http://r.research.att.com/tools/).
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经为 NumPy 安装了 Fortran 编译器。 `gfortran`的二进制文件可以在[`r.research.att.com/tools`](http://r.research.att.com/tools/)中找到。
- en: '**Installing** **SciPy using** `easy_install` **or** `pip`: You can install
    SciPy with either of these two commands (the need for `sudo` depends on privileges):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用`easy_install`或`pip`安装 SciPy**：您可以使用以下两个命令中的任何一个来安装 SciPy（`sudo`的需要取决于权限）：'
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Installing on Windows**: If you already have Python installed, the preferred
    method is to download and use the binary distribution. Alternatively, you can
    install the Anaconda or Enthought Python distribution, which comes with other
    scientific Python software packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Windows 上安装**：如果已经安装 Python，则首选方法是下载并使用二进制发行版。 或者，您可以安装 Anaconda 或 Enthought
    Python 发行版，该发行版与其他科学 Python 包一起提供。'
- en: '**Check your installation**: Check the SciPy installation with the following
    code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查安装**：使用以下代码检查 SciPy 安装：'
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This should print the correct SciPy version.
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该打印正确的 SciPy 版本。
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: Most package managers take care of dependencies (if there are any) for you.
    However, in some cases, you need to install them manually. This is beyond the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数包管理器都会为您解决依赖项（如果有）。 但是，在某些情况下，您需要手动安装它们。 这超出了本书的范围。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'If you run into problems, you can ask for help at:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到问题，可以在以下位置寻求帮助：
- en: The `#scipy` IRC channel of `freenode`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freenode`的`#scipy` IRC 频道'
- en: The SciPy mailing lists at [http://www.scipy.org/scipylib/mailing-lists.html](http://www.scipy.org/scipylib/mailing-lists.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SciPy 邮件列表位于[`www.scipy.org/scipylib/mailing-lists.html`](http://www.scipy.org/scipylib/mailing-lists.html)'
- en: Installing PIL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 PIL
- en: PIL, the Python imaging library, is a prerequisite for the image processing
    recipes in this chapter. If you prefer, you can install Pillow, which is a fork
    of PIL. Some people prefer the Pillow API; however, we are not going to cover
    its installation in this book.
  prefs: []
  type: TYPE_NORMAL
  zh: PIL（Python 图像库）是本章中进行图像处理的先决条件。 如果愿意，可以安装 Pillow，它是 PIL 的分支。 有些人喜欢 Pillow API；
    但是，我们不会在本书中介绍其安装。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s see how to install PIL:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何安装 PIL：
- en: '**Installing** **PIL on Windows**: Install PIL using the Windows executable
    from the PIL website at [http://www.pythonware.com/products/pil/](http://www.pythonware.com/products/pil/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Windows 上安装 PIL**：使用来自 PIL 网站的 Windows 可执行文件安装 PIL，位于[`www.pythonware.com/products/pil`](http://www.pythonware.com/products/pil/)。'
- en: '**Installing on Debian or Ubuntu**: On Debian or Ubuntu, install PIL using
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Debian 或 Ubuntu 上安装**：在  Debian 或 Ubuntu 上，使用以下命令安装 PIL：'
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Installing with** `easy_install` **or** `pip`: At the time of writing this
    book, it appears that the package managers of Red Hat, Fedora, and CentOS do not
    have direct support for PIL. Therefore, follow this step if you are using one
    of these Linux distributions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`easy_install`或`pip`安装：在编写本书时，似乎 RedHat，Fedora 和 CentOS 的包管理器没有对 PIL 的直接支持。
    因此，如果您使用的是这些 Linux 发行版之一，请执行此步骤。
- en: 'Install with either of the following commands:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下任一命令安装  ：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Instructions for Pillow (a fork of PIL) can be found at [http://pillow.readthedocs.org/en/latest/installation.html](http://pillow.readthedocs.org/en/latest/installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在[`pillow.readthedocs.org/en/latest/installation.html`](http://pillow.readthedocs.org/en/latest/installation.html) 找到有关 PILLOW（PIL
    的分支）的说明。
- en: Resizing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整图像大小
- en: In this recipe, we will load a sample image of Lena, which is available in the
    SciPy distribution, into an array. This chapter is not about image manipulation,
    by the way; we will just use the image data as an input.
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们将把 Lena 的样例图像（在 SciPy 发行版中可用）加载到数组中。 顺便说一下，本章不是关于图像操作的。 我们将只使用图像数据作为输入。
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Lena Soderberg appeared in a 1972 Playboy magazine. For historical reasons,
    one of those images is often used in the field of image processing. Don't worry;
    the image in question is completely safe for work.
  prefs: []
  type: TYPE_NORMAL
  zh: Lena Soderberg 出现在 1972 年的《花花公子》杂志中。 由于历史原因，这些图像之一经常用于图像处理领域。 不用担心，该图像完全可以安全工作。
- en: We will resize the image using the `repeat()` function. This function repeats
    an array, which means resizing the image by a certain factor in our use case.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`repeat()`函数调整图像大小。 此函数重复一个数组，这意味着在我们的用例中按一定的大小调整图像大小。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: A prerequisite for this recipe is to have SciPy, matplotlib, and PIL installed.
    Take a look at the corresponding recipes in this chapter and [Chapter 1](ch01.xhtml
    "Chapter 1. Winding Along with IPython"), *Winding Along with IPython*.
  prefs: []
  type: TYPE_NORMAL
  zh: 此秘籍的前提条件是必须安装 SciPy，Matplotlib 和 PIL。 看看本章和第一章，“使用 IPython”的相应秘籍。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Resize the image with the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤调整图像大小：
- en: 'First, import `SciPy`. SciPy has a `lena()` function. It is used to load the
    image into a NumPy array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入`SciPy`。 SciPy 具有`lena()`函数。 它用于将图像加载到 NumPy 数组中：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Some refactoring has occurred since version 0.10, so if you are using an older
    version, the correct code is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 从 0.10 版本开始发生了一些重构，因此，如果您使用的是旧版本，则正确的代码如下：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check the shape of the Lena array using the `assert_equal()` function from
    the `numpy.testing` package—this is an optional sanity check test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`numpy.testing`包中的`assert_equal()`函数检查 Lena 数组的形状——这是可选的完整性检查测试：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Resize the Lena array with the `repeat()` function. We give this function a
    resize factor in the `x` and `y` directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`repeat()`函数调整 Lena 数组的大小。 我们在`x`和`y`方向上给此函数一个调整大小的因子：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will plot the Lena image and the resized image in two subplots that are
    parts of the same grid. Plot the Lena array in a subplot using this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在同一网格的两个子图中绘制 Lena 图像和调整大小后的图像。 使用以下代码在子图中绘制 Lena 数组：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The matplotlib `subplot()` function creates a subplot. This function accepts
    a three-digit integer as the parameter, where the first digit is the number of
    rows, the second digit is the number of columns, and the last digit is the index
    of the subplot, starting with 1\. The `imshow()` function shows images. Finally,
    the `show()` function displays the end result.
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib `subplot()`函数创建一个子图。 此函数接受一个三位整数作为参数，其中第一位是行数，第二位是列数，最后一位是子图的索引，从
    1 开始。`imshow()`函数显示图像。 最后，`show()`函数显示最终结果。
- en: 'Plot the resized array in another subplot and display it. The index is now
    2:'
  prefs: []
  type: TYPE_NORMAL
  zh: 将调整大小后的数组绘制在另一个子图中并显示它。 索引现在为 2：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows the result, with the original image (first)
    and the resized image (second):'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了结果，以及原始图像（第一幅）和调整大小后的图像（第二幅）：
- en: '![How to do it...](img/0945_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_01.jpg)'
- en: 'The following is the complete code for this recipe from the `resize_lena.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书代码包中`resize_lena.py`文件中该秘籍的完整代码：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: The `repeat()` function repeats arrays, which in this case resulted in changing
    the size of the original image. The `subplot()` matplotlib function creates a
    subplot. The `imshow()` function shows the images. Finally, the `show()` function
    displays the end result.
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat()`函数重复数组，在这种情况下，这会导致原始图像的大小改变。 `subplot()` Matplotlib 函数创建一个子图。 `imshow()`函数显示图像。
    最后，`show()`函数显示最终结果。'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing matplotlib* in [Chapter 1](ch01.xhtml "Chapter 1. Winding Along
    with IPython"), *Winding Along with IPython*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章“使用 IPython”中的“安装 Matplotlib”
- en: '*Installing SciPy* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“安装 SciPy”
- en: '*Installing PIL* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“安装 PIL”
- en: The `repeat()` function is described at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html)中介绍了`repeat()`函数。'
- en: Creating views and copies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图和副本
- en: It is important to know when we are dealing with a shared array view, and when
    we have a copy of the array data. A slice, for instance, will create a view. This
    means that if you assign the slice to a variable and then change the underlying
    array, the value of this variable will change. We will create an array from the
    famous Lena image, copy the array, create a view, and at the end, modify the view.
  prefs: []
  type: TYPE_NORMAL
  zh: 了解何时处理共享数组视图以及何时具有数组数据的副本，这一点很重要。 例如，切片将创建一个视图。 这意味着，如果您将切片分配给变量，然后更改基础数组，则此变量的值将更改。
    我们将根据著名的 Lena 图像创建一个数组，复制该数组，创建一个视图，最后修改视图。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: The prerequisites are the same as those for the previous recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 前提条件与先前的秘籍相同。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s create a copy and views of the Lena array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 Lena 数组的副本和视图：
- en: 'Create a copy of the Lena array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Lena 数组的副本：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a view of the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数组的视图：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set all the values of the view to `0` with a `flat` iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flat`迭代器将视图的所有值设置为`0`：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The end result is that only one of the images (the image that is related to
    the copy) shows the Playboy model. The other images disappear completely:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是只有一个图像（与副本相关的图像）显示了花花公子模型。 其他图像完全消失：
- en: '![How to do it...](img/0945_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_02.jpg)'
- en: 'The following is the code of this tutorial, showing the behavior of array views
    and copies from the `copy_view.py` file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本教程的代码，显示了本书代码包中`copy_view.py`文件中数组视图和副本的行为：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: As you can see, by changing the view at the end of the program, we changed the
    original Lena array. This resulted in three blue (or blank if you are looking
    at a black-and-white image) images—the copied array was unaffected. It is important
    to remember that views are not read-only.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过在程序结尾处更改视图，我们更改了原始 Lena 数组。 这样就产生了三张蓝色（如果您正在查看黑白图像，则为空白）图像——复制的数组不受影响。
    重要的是要记住，视图不是只读的。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation of the NumPy `view()` function is at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NumPy `view()`函数的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.view.html)
- en: Flipping Lena
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 翻转 Lena
- en: We will be flipping the SciPy Lena image—all in the name of science, of course,
    or at least as a demo. In addition to flipping the image, we will slice it and
    apply a mask to it.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将翻转  SciPy Lena 图像——当然，所有这些都是以科学的名义，或者至少是作为演示。 除了翻转图像，我们还将对其进行切片并对其应用遮罩。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: 'Flip the Lena array around the vertical axis using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码围绕垂直轴翻转 Lena 数组：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Take a slice out of the image and plot it. In this step, we will take a look
    at the shape of the Lena array. The shape is a tuple representing the dimensions
    of the array. The following code effectively selects the top-left quadrant of
    the Playboy picture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从图像中切出一部分并将其绘制出来。 在这一步中，我们将看一下 Lena 数组的形状。 该形状是表示数组大小的元组。 以下代码有效地选择了花花公子图片的左上象限：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Apply a mask to the image by finding all the values in the Lena array that
    are even (this is just arbitrary for demo purposes). Copy the array and change
    the even values to `0`. This has the effect of putting lots of blue dots on the
    image (dark spots if you are looking at a black-and-white image):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 Lena 数组中找到所有偶数的值，对图像应用遮罩（这对于演示目的来说是任意的）。 复制数组并将偶数值更改为 0。 这样会在图像上放置很多蓝点（如果您正在查看黑白图像，则会出现暗点）：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'All of these efforts result in a 2 x 2 image grid, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工作都会产生`2 x 2`的图像网格，如以下屏幕截图所示：
- en: '![How to do it...](img/0945_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_03.jpg)'
- en: 'Here is the complete code for this recipe from the `flip_lena.py` file in this
    book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`flip_lena.py`文件中此秘籍的完整代码：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing matplotlib* in [Chapter 1](ch01.xhtml "Chapter 1. Winding Along
    with IPython"), *Winding Along with IPython*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章“使用 IPython”中的“安装 Matplotlib”
- en: '*Installing SciPy* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“安装 SciPy”
- en: '*Installing PIL* in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“安装 PIL”
- en: Fancy indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 花式索引
- en: In this tutorial, we will apply fancy indexing to set the diagonal values of
    the Lena image to 0\. This will draw black lines along the diagonals, crossing
    it, not because there is something wrong with the image but just as an exercise.
    Fancy indexing is indexing that does not involve integers or slices; it is normal
    indexing.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将应用花式索引将 Lena 图像的对角线值设置为 0。这将沿着对角线绘制黑线并交叉，这不是因为图像有问题，而仅仅作为练习。 花式索引是不涉及整数或切片的索引；
    这是正常的索引编制。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will start with the first diagonal:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第一个对角线开始：
- en: Set the values of the first diagonal to `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个对角线的值设置为`0`。
- en: 'To set the diagonal values to `0`, we need to define two different ranges for
    the `x` and `y` values:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要将对角线值设置为`0`，我们需要为`x`和`y`值定义两个不同的范围：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Set the values of the other diagonal to `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将另一个对角线的值设置为`0`。
- en: 'To set the values of the other diagonal, we require a different set of ranges,
    but the principles stay the same:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置另一个对角线的值，我们需要一组不同的范围，但是原理保持不变：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'At the end, we get this image with the diagonals marked, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到带有对角线标记的图像，如以下屏幕截图所示：
- en: '![How to do it...](img/0945_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_04.jpg)'
- en: 'The following is the complete code for this recipe from the `fancy.py` file
    in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书代码集中`fancy.py`文件中该秘籍的完整代码：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We defined separate ranges for the `x` values and `y` values. These ranges
    were used to index the Lena array. Fancy indexing is performed based on an internal
    NumPy iterator object. The following steps are performed:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`x`值和`y`值定义了单独的范围。 这些范围用于索引 Lena 数组。 花式索引是基于内部 NumPy 迭代器对象执行的。 执行以下步骤：
- en: The iterator object is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建迭代器对象。
- en: The iterator object gets bound to the array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代器对象绑定到数组。
- en: Array elements are accessed via the iterator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数组元素通过迭代器访问。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The fancy indexing implementation is documented at [http://docs.scipy.org/doc/numpy-dev/reference/internals.code-explanations.html#fancy-indexing-check](http://docs.scipy.org/doc/numpy-dev/reference/internals.code-explanations.html#fancy-indexing-check)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '花式索引的实现文档位于[`docs.scipy.org/doc/numpy-dev/reference/internals.code-explanations.html#fancy-indexing-check`](http://docs.scipy.org/doc/numpy-dev/reference/internals.code-explanations.html#fancy-indexing-check)'
- en: Indexing with a list of locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置列表索引
- en: Let's use the `ix_()` function to shuffle the Lena image. This function creates
    a mesh from multiple sequences.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`ix_()`函数来随机播放 Lena 图像。 此函数根据多个序列创建网格。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will start by randomly shuffling the array indices:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从随机改组数组索引开始：
- en: 'Create a random indices array with the `shuffle()` function of the `numpy.random`
    module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`numpy.random`模块的`shuffle()`函数创建随机索引数组：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Plot the shuffled indices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制乱序的索引：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'What we get is a completely scrambled Lena image, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的是一张完全打乱的 Lena 图像，如以下屏幕截图所示：
- en: '![How to do it...](img/0945_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_05.jpg)'
- en: 'Here is the complete code for the recipe from the `ix.py` file in this book''s
    code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`ix.py`文件中秘籍的完整代码：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The `ix_()` function's documentation page at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ix_()`函数的文档页面](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ix_.html)'
- en: Indexing with Booleans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值索引
- en: Boolean indexing is indexing based on a boolean array and falls under the category
    of fancy indexing.
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔索引是基于布尔数组的索引  ，属于奇特索引的类别。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will apply this indexing technique to an image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这种索引技术应用于图像：
- en: Image with dots on the diagonal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对角线上带有点的图像。
- en: 'This is in some way similar to the *Fancy indexing* recipe in this chapter.
    This time, we select modulo `4` points on the diagonal of the image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这在某种程度上类似于本章中的“花式索引”秘籍。 这次，我们在图像的对角线上选择模`4`：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then we just apply this selection and plot the points:'
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需应用此选择并绘制点：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Select the array values between quarter and three quarters of the maximum value,
    and set them to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最大值的四分之一到四分之三之间选择数组值，并将它们设置为`0`：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The plot with the two new images will look like what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 带有两个新图像的图看起来类似于以下屏幕截图所示：
- en: '![How to do it...](img/0945_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_06.jpg)'
- en: 'Here is the complete code for this recipe from the `boolean_indexing.py` file
    in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`boolean_indexing.py`文件中该秘籍的完整代码：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: Since indexing with Booleans is a form of fancy indexing, the way it works is
    basically the same. This means that indexing happens with the help of a special
    iterator object.
  prefs: []
  type: TYPE_NORMAL
  zh: 由于布尔值索引是一种花式索引，因此它的工作方式基本相同。 这意味着索引是在特殊的迭代器对象的帮助下发生的。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Fancy Indexing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “花式索引”
- en: Stride tricks for Sudoku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数独的步幅技巧
- en: The `ndarray` class has a `strides` field, which is a tuple indicating the number
    of bytes to step in each dimension when going through an array. Let's apply some
    stride tricks to the problem of splitting a Sudoku puzzle into the 3 x 3 squares
    it is composed of.
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray` 类具有`strides`字段，它是一个元组，指示通过数组时要在每个维中步进的字节数。 让我们对将数独谜题拆分为`3 x 3`正方形的问题应用一些大步技巧。'
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Explaining the rules of Sudoku is outside the scope of this book. In a nutshell,
    a Sudoku puzzle consists of 3 x 3 squares. Each of these squares contains nine
    numbers. For more information see [http://en.wikipedia.org/wiki/Sudoku](http://en.wikipedia.org/wiki/Sudoku).
  prefs: []
  type: TYPE_NORMAL
  zh: 对数独的规则进行解释超出了本书的范围。 简而言之，数独谜题由`3 x 3`的正方形组成。 这些正方形均包含九个数字。 有关更多信息，请参见[`en.wikipedia.org/wiki/Sudoku`](http://en.wikipedia.org/wiki/Sudoku)。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Apply the stride tricks as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 应用如下的跨步技巧：
- en: 'Let''s define the `sudoku` array. This array is filled with the contents of
    an actual, solved Sudoku puzzle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义`sudoku`数组。 此数组充满了一个实际的已解决的数独难题的内容：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `itemsize` field of `ndarray` gives us the number of bytes in an array.
    Given the `itemsize` calculate the strides:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ndarray`的`itemsize`字段为我们提供了数组中的字节数。 给定`itemsize`，请计算步幅：'
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we can split the puzzle into squares with the `as_strided()` function of
    the `np.lib.stride_tricks` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用`np.lib.stride_tricks`模块的`as_strided()`函数将拼图分解成正方形：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The code prints separate Sudoku squares, as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码打印单独的数独正方形，如下所示：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following is the complete source code for this recipe from the `strides.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书代码包中`strides.py`文件中此秘籍的完整源代码：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We applied stride tricks to split a Sudoku puzzle into its constituent 3 x 3
    squares. The strides tell us the number of bytes we need to skip at each step
    when going through the Sudoku array.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用了跨步技巧，将数独谜题拆分为`3 x 3`的正方形。 步幅告诉我们通过数独数组时每一步需要跳过的字节数。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The `strides` property is documented at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.strides.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.strides.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strides`属性的文档在[`docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.strides.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.strides.html)'
- en: Broadcasting arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广播数组
- en: Without knowing it, you might have broadcasted arrays. In a nutshell, NumPy
    tries to perform an operation even though the operands do not have the same shape.
    In this recipe, we will multiply an array and a scalar. The scalar is extended
    to the shape of the array operand and then the multiplication is performed. We
    will download an audio file and make a new version of it that is quieter.
  prefs: []
  type: TYPE_NORMAL
  zh: 在不知道的情况下，您可能已经广播了数组。 简而言之，即使操作数的形状不同，NumPy 也会尝试执行操作。 在此秘籍中，我们将一个数组和一个标量相乘。 标量被扩展为数组操作数的形状，然后执行乘法。
    我们将下载一个音频文件并制作一个更安静的新版本。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s start by reading a WAV file:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从读取 WAV 文件开始：
- en: 'We will use standard Python code to download an audio file of Austin Powers.
    SciPy has a WAV file module that allows you to load sound data or generate WAV
    files. If SciPy is installed, then we should already have this module. The `read()`
    function returns a `data` array and sample rate. In this example, we care only
    about the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用标准的 Python 代码下载 Austin Powers 的音频文件。 SciPy 具有 WAV 文件模块，可让您加载声音数据或生成 WAV
    文件。 如果已安装 SciPy，则我们应该已经有此模块。 `read()`函数返回`data`数组和采样率。 在此示例中，我们仅关心数据：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Plot the original WAV data with matplotlib. Name the subplot `Original`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制原始 WAV 数据。 将子图命名为`Original`：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now we will use NumPy to make a quieter audio sample. It''s just a matter of
    creating a new array with smaller values by multiplying with a constant. This
    is where the magic of broadcasting occurs. In the end, we need to make sure that
    we have the same data type as that in the original array, because of the WAV format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用 NumPy 制作更安静的音频样本。 这只是通过与常量相乘来创建具有较小值的新数组的问题。 这就是广播魔术发生的地方。 最后，由于 WAV
    格式，我们需要确保与原始数组具有相同的数据类型：
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This new array can be written to a new WAV file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以将新数组写入新的 WAV 文件，如下所示：
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Plot the new data array with matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制新数据数组：
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The result is a plot of the original WAV file data and a new array with smaller
    values, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是原始 WAV 文件数据和具有较小值的新数组的图，如以下屏幕快照所示：
- en: '![How to do it...](img/0945_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_02_07.jpg)'
- en: 'Here is the complete code for this recipe from the `broadcasting.py` file in
    this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`broadcasting.py`文件中该秘籍的完整代码：
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The following links give more background information:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了更多背景信息：
- en: The `scipy.io.read()` function page at [http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html](http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io.read()`函数](http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.read.html)'
- en: The `scipy.io.write()` function page at [http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.write.html](http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.write.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`scipy.io.write()`函数](http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.wavfile.write.html)'
- en: The broadcasting concept is explained at [http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`docs.scipy.org/doc/numpy/user/basics.broadcasting.html`](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)中解释了广播概念。
