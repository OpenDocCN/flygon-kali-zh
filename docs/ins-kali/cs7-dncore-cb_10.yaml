- en: Exploring .NET Core 1.1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索.NET Core 1.1
- en: 'This chapter will explore .NET Core 1.1\. We will see what .NET Core is and
    what you can do with it. We will be looking at:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨.NET Core 1.1。我们将看看.NET Core是什么，以及您可以用它做什么。我们将重点关注：
- en: Creating a simple .NET Core application and running it on a Mac
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上创建一个简单的.NET Core应用程序并运行它
- en: Creating your first ASP.NET Core application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个ASP.NET Core应用程序
- en: Publishing your ASP.NET Core application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布您的ASP.NET Core应用程序
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: There is a lot of buzz these days regarding .NET Core. There are really a lot
    of articles explaining what .NET Core is and what it does. Simply put, .NET Core
    allows you to create cross-platform applications that run on Windows, Linux, and
    macOS. It does this by leveraging a .NET Standard Library that targets all these
    platforms with the exact same code. You can, therefore, use the language and tools
    you are comfortable with to create applications. It supports C#, VB, and F#, and
    even allows the use of constructs such as generics, async support, and LINQ. For
    more information and documentation on .NET Core, go to [https://www.microsoft.com/net/core](https://www.microsoft.com/net/core).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最近.NET Core引起了很多关注。有很多文章解释了.NET Core是什么以及它的作用。简而言之，.NET Core允许您创建在Windows、Linux和macOS上运行的跨平台应用程序。它通过利用一个.NET标准库来实现，该库以完全相同的代码针对所有这些平台。因此，您可以使用您熟悉的语言和工具来创建应用程序。它支持C#、VB和F#，甚至允许使用泛型、异步支持和LINQ等构造。有关.NET
    Core的更多信息和文档，请访问[https://www.microsoft.com/net/core](https://www.microsoft.com/net/core)。
- en: Creating a simple .NET Core application and running it on a Mac
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac上创建一个简单的.NET Core应用程序并运行它
- en: We will take a look at how to create an application on Windows using Visual
    Studio 2017 and then running that application on a Mac. This kind of application
    development was previously impossible as you could not run code compiled for Windows
    on a Mac. .NET Core changes all this.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何在Windows上使用Visual Studio 2017创建一个应用程序，然后在Mac上运行该应用程序。以前这种应用程序开发是不可能的，因为您无法在Mac上运行为Windows编译的代码。.NET
    Core改变了这一切。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to a Mac in order to run the application you created. I'm
    using a Mac mini (late 2012) with a 2.5 GHz Intel Core i5 CPU running macOS Sierra
    with 4GB of memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Mac才能运行您创建的应用程序。我使用的是Mac mini（2012年底）配备2.5 GHz Intel Core i5 CPU，运行macOS
    Sierra，内存为4GB。
- en: 'In order to use your .NET Core apps on a Mac, there are a few things you need
    to do:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Mac上使用您的.NET Core应用程序，您需要做一些准备工作：
- en: 'We need to install Homebrew, which is used to get the latest version of OpenSSL.
    Open the Terminal on your Mac by typing `Terminal` into your Spotlight search:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装Homebrew，用于获取最新版本的OpenSSL。通过在Spotlight搜索中键入`Terminal`来打开Mac上的终端：
- en: '![](img/B06434_11_01-2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_01-2.png)'
- en: The following steps can also be completed by going to [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos) 
    and performing these on your Mac.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过转到[https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    在Mac上执行以下步骤。
- en: 'Paste the following at the Terminal prompt and press *Enter*:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容粘贴到终端提示符处，然后按*Enter*：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the Terminal asks you for your password, enter your password and press *Enter*.
    You will not see anything as you type. This is normal. Just type your password
    and press *Enter* to continue.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果终端要求您输入密码，请输入密码并按*Enter*。您在输入时将看不到任何内容。这是正常的。只需输入密码并按*Enter*继续。
- en: The requirements for installing Homebrew are an Intel CPU, OS X 10.10 or higher,
    **Command Line Tools** (**CLT**) for Xcode, and a Bourne-compatible shell for
    installation, such as bash or zsh. Terminal is thus well suited.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Homebrew的要求是Intel CPU、OS X 10.10或更高版本、Xcode的**命令行工具**（**CLT**）以及用于安装的Bourne兼容shell，如bash或zsh。因此终端非常适合。
- en: 'Depending on the speed of your Internet connection and whether you have CLT for
    Xcode installed, the process of installing Homebrew can take some time to complete.
    When completed, the Terminal should look as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的互联网连接速度以及是否已安装Xcode的CLT，安装Homebrew的过程可能需要一些时间才能完成。完成后，终端应如下所示：
- en: '![](img/B06434_11_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_02.png)'
- en: 'Typing in `brew help` will show you some useful commands you can use:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`brew help`将显示一些有用的命令：
- en: '![](img/B06434_11_03.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_03.png)'
- en: 'Run the following commands one after the other in the Terminal:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中依次运行以下命令：
- en: '`brew update`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brew update`'
- en: '`brew install openssl`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`brew install openssl`'
- en: '`mkdir -p /usr/local/lib`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mkdir -p /usr/local/lib`'
- en: '`ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/`'
- en: '`ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/`'
- en: 'We then need to install the .NET Code SDK. From the URL [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos) 
    click on the Download .NET Core SDK button. After the download has completed,
    click on the `.pkg` file downloaded. Click on the Continue button to install the
    .NET Core 1.1.0 SDK:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要安装.NET Code SDK。从URL [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)
    点击下载.NET Core SDK按钮。下载完成后，点击下载的`.pkg`文件。点击继续按钮安装.NET Core 1.1.0 SDK：
- en: '![](img/B06434_11_04.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_04.png)'
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will create a .NET Core console application in Visual Studio 2017\. Under
    Visual C# templates, select .NET Core and a Console App (.NET Core) project:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在Visual Studio 2017中创建一个.NET Core控制台应用程序。在Visual C#模板下，选择.NET Core和一个Console
    App (.NET Core)项目：
- en: '![](img/B06434_11_05.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_05.png)'
- en: 'When you created your console application, the code will look as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建控制台应用程序时，代码如下：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Modify your code to look as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改代码如下：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The method `GetSystemInfo()` just returns the current operating system the
    console application currently runs on. The `csproj` file for my application looks
    as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法`GetSystemInfo()`只是返回当前操作系统，控制台应用程序当前运行的操作系统。我的应用程序的`csproj`文件如下：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `<version>` is defined as `1.1.0`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`<version>`被定义为`1.1.0`。'
- en: If you are still running Visual Studio 2017 RC, it would be a good idea to check
    your installed NuGet packages to see whether there is an update available for
    your .NET Core version from .NET Core 1.0 to .NET Core 1.1.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍在运行Visual Studio 2017 RC，最好检查你安装的NuGet包，看看是否有.NET Core版本从.NET Core 1.0到.NET
    Core 1.1的更新。
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Press *F5* to run your console application. You will see that the OS is displayed
    in the output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*F5*来运行你的控制台应用程序。你会看到操作系统显示在输出中：
- en: '![](img/B06434_11_06.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_06.png)'
- en: Go to the `bin` folder of your console application and copy the files to a folder
    on the desktop of your Mac. Call that folder `consoleApp`. In Terminal, navigate
    to the folder with the copied files. You can do this by typing the command `cd
    ./Desktop` and then type `ls` to list the contents of your desktop. Check if the
    folder you created is listed, and if so, in Terminal type `cd ./consoleApp`. List
    the contents of the `consoleApp` folder again by typing `ls`. In my case, the
    DLL was called `NetCoreConsole.dll`. To run the code you wrote earlier, type `dotnet
    NetCoreConsole.dll` and press *Enter:*
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 转到你的控制台应用程序的`bin`文件夹，并将文件复制到Mac桌面上的一个文件夹中。将该文件夹命名为`consoleApp`。在终端中，导航到复制文件的文件夹。你可以通过输入命令`cd
    ./Desktop`来做到这一点，然后输入`ls`来列出你的桌面的内容。检查你创建的文件夹是否被列出，如果是的话，在终端中输入`cd ./consoleApp`。再次通过输入`ls`来列出`consoleApp`文件夹的内容。在我的情况下，DLL被称为`NetCoreConsole.dll`。要运行你之前编写的代码，输入`dotnet
    NetCoreConsole.dll`并按*Enter*：
- en: '![](img/B06434_11_07.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_07.png)'
- en: You can see that the code is run and the text output in Terminal.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到代码正在运行，并在终端中输出文本。
- en: 'If, by any chance, you find that trying to run the `dotnet` command (after
    installing the .NET Core SDK) results in an error saying `command not found`,
    try the following. In Terminal type the following and press Enter: `ln -s /usr/local/share/dotnet/dotnet
    /usr/local/bin/`, which adds a symbolic link. Running the `dotnet` command should
    work after this.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在安装了.NET Core SDK后尝试运行`dotnet`命令时出现“command not found”的错误，请尝试以下操作。在终端中输入以下内容并按Enter键：`ln
    -s /usr/local/share/dotnet/dotnet /usr/local/bin/`，这将添加一个符号链接。这之后运行`dotnet`命令应该可以正常工作。
- en: Creating your first ASP.NET Core application
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个ASP.NET Core应用程序
- en: Let's take a look at building your first ASP.NET Core app. In this recipe, we
    will just create a very basic ASP.NET Core application and briefly discuss the
    `Startup` class. Further reading on the subject will be required and is not included
    in this brief introduction to ASP.NET Core.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何构建你的第一个ASP.NET Core应用程序。在这个教程中，我们将只创建一个非常基本的ASP.NET Core应用程序，并简要讨论`Startup`类。关于这个主题的进一步阅读是必要的，不包括在这个对ASP.NET
    Core的简要介绍中。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Start off by creating a new project in Visual Studio 2017\. Under Visual C#,
    select the .NET Core node and click on the ASP.NET Core Web Application.... Click
    on OK:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在Visual Studio 2017中创建一个新项目。在Visual C#下，选择.NET Core节点，然后点击ASP.NET Core Web
    Application.... 点击OK：
- en: '![](img/B06434_11_08.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_08.png)'
- en: 'You will then be presented with the project template selection. You can choose
    to create an empty application, a Web API (allows you to create an HTTP-based
    API), or a full Web Application. Select the Empty template, make sure that Host
    in the cloud is unchecked, and and click on OK:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将看到项目模板选择。你可以选择创建一个空应用程序，一个Web API（允许你创建基于HTTP的API），或者一个完整的Web应用程序。选择空模板，确保在云中主机未被选中，然后点击OK：
- en: '![](img/B06434_11_09.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_09.png)'
- en: Note how the templates window allows you to enable Docker support. Docker allows
    you to develop applications inside containers that contain a complete file system
    and everything else required to run your application. This means that your software
    will always function exactly the same, regardless of the environment it is in.
    For more on Docker, visit [www.docker.com](https://www.docker.com/).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意模板窗口允许你启用Docker支持。Docker允许你在包含完整文件系统和运行应用程序所需的其他所有内容的容器中开发应用程序。这意味着你的软件无论在什么环境中都会始终以相同的方式运行。有关Docker的更多信息，请访问[www.docker.com](https://www.docker.com/)。
- en: 'When your ASP.NET Core application is created, your Solution Explorer will
    look as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建了ASP.NET Core应用程序后，你的解决方案资源管理器将如下所示：
- en: '![](img/B06434_11_10-1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_10-1.png)'
- en: If you are running Visual Studio 2017 RC, what you need to do is click on Tools,
    NuGet Package Manager, Manage NuGet Packages for Solution... and see if there
    are any updates to .NET Core. If you are on .NET Core 1.01, there should be an
    update to .NET Core 1.1 available via NuGet. Let NuGet update your project dependencies
    for you. After doing this, you must browse to [https://www.microsoft.com/net/download/core#/current](https://www.microsoft.com/net/download/core#/current) 
    and make sure that you have selected the Current option under All downloads. Download
    the current .NET Core SDK installer for Windows and install it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行Visual Studio 2017 RC，你需要点击工具，NuGet包管理器，管理解决方案的NuGet包...，看看是否有.NET Core的更新。如果你使用的是.NET
    Core 1.01，那么应该可以通过NuGet获得.NET Core 1.1的更新。让NuGet为你更新项目的依赖关系。在这样做之后，你必须浏览[https://www.microsoft.com/net/download/core#/current](https://www.microsoft.com/net/download/core#/current)，确保你已经在所有下载选项下选择了当前选项。下载当前的.NET
    Core SDK安装程序并安装它。
- en: 'At this point, you can press *Ctrl* + *F5* to Start without Debugging and launch
    your ASP.NET Core application. This will start IIS Express, which is the default
    host for ASP.NET Core applications. The only thing it does now is to display the
    text Hello World!. You have successfully created and run an ASP.NET Core application.
    Don''t close your browser yet. Keep it open:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以按下*Ctrl* + *F5*来启动而不是调试，并启动你的ASP.NET Core应用程序。这将启动IIS Express，这是ASP.NET
    Core应用程序的默认主机。它现在所做的唯一的事情就是显示文本Hello World!。你已经成功创建并运行了一个ASP.NET Core应用程序。不要关闭你的浏览器。保持它打开：
- en: '![](img/B06434_11_11.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_11.png)'
- en: Note that the port number 25608 in the URL of the browser is a randomly selected
    port. The port number you will see will most likely be different than in the book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意浏览器URL中的端口号25608是一个随机选择的端口。你看到的端口号很可能与书中的不同。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Right-click on the solution in yourSolution Explorer and click on Open Folder
    in File Explorer. You will notice that you have a folder called `src`. Click into
    this folder and click on the `AspNetCore` sub-folder inside it:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的解决方案资源管理器中右键单击解决方案，然后单击在文件资源管理器中打开文件夹。您会注意到有一个名为`src`的文件夹。点击进入这个文件夹，然后点击其中的`AspNetCore`子文件夹：
- en: '![](img/B06434_11_12.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_12.png)'
- en: 'Comparing the contents of the `AspNetCore` folder and the Solution Explorer
    in Visual Studio will show you that they are virtually the same. This is because
    in ASP.NET Core, the Windows file system determines the solution in Visual Studio:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较Visual Studio中`AspNetCore`文件夹和解决方案资源管理器中的内容将向您展示它们几乎相同。这是因为在ASP.NET Core中，Windows文件系统确定了Visual
    Studio中的解决方案：
- en: '![](img/B06434_11_13-2.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_13-2.png)'
- en: 'In the Windows file explorer, right-click on the `Startup.cs` file and edit
    it in Notepad. You will see the following code in Notepad:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows文件资源管理器中，右键单击`Startup.cs`文件并在记事本中编辑。您将在记事本中看到以下代码：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Still in Notepad, edit the line that reads `await context.Response.WriteAsync("Hello
    World!");` and change it to read `await context.Response.WriteAsync($"The date
    is {DateTime.Now.ToString("dd MMM yyyy")}");`. Save the file in Notepad and go
    to the browser and refresh it. You will see that the changes are displayed in
    the browser without me having to edit it in Visual Studio at all. This is because
    (as mentioned earlier) Visual Studio uses the file system to determine the project
    structure and ASP.NET Core detected the changes to the `Startup.cs` file and automatically
    recompiled it on the fly:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在记事本中，编辑读取`await context.Response.WriteAsync("Hello World!");`的行，并将其更改为`await
    context.Response.WriteAsync($"The date is {DateTime.Now.ToString("dd MMM yyyy")}");`。在记事本中保存文件，然后转到浏览器并刷新。您会看到更改已在浏览器中显示，而无需我在Visual
    Studio中进行任何编辑。这是因为（如前所述）Visual Studio使用文件系统来确定项目结构，ASP.NET Core检测到对`Startup.cs`文件的更改，并自动在运行时重新编译它：
- en: '![](img/B06434_11_14.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_14.png)'
- en: 'Looking at the Solution Explorer a little more in detail, I want to highlight
    some of the files in the project. The `wwwroot` folder will represent the root
    of the website when hosted. It is here that you will place static files such as
    images, JavaScript, and CSS style sheet files. Another file of interest is the
    `Startup.cs` file, which essentially replaces the `Global.asax` file. It is here
    in the `Startup.cs` file that you can write code to execute when your ASP.NET
    Core application starts up:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更详细地查看解决方案资源管理器，我想要强调项目中的一些文件。`wwwroot`文件夹将代表托管时网站的根目录。您将在这里放置静态文件，如图像、JavaScript和CSS样式表文件。另一个感兴趣的文件是`Startup.cs`文件，它基本上取代了`Global.asax`文件。在`Startup.cs`文件中，您可以编写在ASP.NET
    Core应用程序启动时执行的代码：
- en: '![](img/B06434_11_15-1.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_15-1.png)'
- en: How it works
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'The `Startup.cs` file contains the `Startup` class. ASP.NET Core requires a
    `Startup` class and will look for this class by default. By convention the `Startup`
    class is called `Startup`, but you can call it something else if you want. If
    you need to rename it, then you also need to ensure that the `Program.cs` file
    is modified so that the `WebHostBuilder()` specifies the correct class name for
    `.UseStartup`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup.cs`文件包含`Startup`类。ASP.NET Core需要一个`Startup`类，并且默认情况下将查找此类。按照惯例，`Startup`类称为`Startup`，但如果您愿意，也可以将其命名为其他名称。如果需要重命名它，则还需要确保修改`Program.cs`文件，以便`WebHostBuilder()`指定正确的类名用于`.UseStartup`。'
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Going back to our `Startup` class in the `Startup.cs` file, when you look inside
    this class you will see two methods. The methods are `Configure()` and `ConfigureServices()`.
    As you can see from the comment on the `Configure()` method, it is used *to configure
    the HTTP request pipeline*. Basically, incoming requests are handled by the application
    here and all it currently does in our application is to display the current date
    for every incoming request. The `ConfigureServices()` method is called before
    `Configure()` and is optional. Its explicit purpose is to add any services required
    by the application. ASP.NET Core supports dependency Injection natively. This
    means that if I can leverage services by injecting them into methods in the `Startup`
    class. For more information on DI, be sure to read [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`Startup.cs`文件中的`Startup`类，当您查看此类时，您将看到两种方法。这些方法是`Configure()`和`ConfigureServices()`。从`Configure()`方法的注释中可以看出，它用于*配置HTTP请求管道*。基本上，应用程序在此处处理传入的请求，而我们的应用程序目前所做的就是为每个传入的请求显示当前日期。`ConfigureServices()`方法在`Configure()`之前调用，是可选的。它的显式目的是添加应用程序所需的任何服务。ASP.NET
    Core原生支持依赖注入。这意味着我可以通过将服务注入到`Startup`类中的方法中来利用服务。有关DI的更多信息，请确保阅读[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection)。
- en: Publishing your ASP.NET Core application
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的ASP.NET Core应用程序
- en: Publishing an ASP.NET Core application is quite straightforward. We will take
    a look at publishing the application via Command Prompt (run as administrator)
    and then publishing the ASP.NET Core application to IIS on a Windows server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 发布ASP.NET Core应用程序非常简单。我们将通过命令提示符（以管理员身份运行）发布应用程序，然后将ASP.NET Core应用程序发布到Windows服务器上的IIS。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: 'You will need to have IIS set up in order to do this. Start Programs and Features
    and click on Turn Windows features on or off in the left-hand side of the Programs
    and Features form. Ensure that Internet Information Services is selected. When
    you select IIS, click OK to turn the feature on:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要设置IIS才能执行此操作。启动“程序和功能”，然后单击“程序和功能”表单左侧的“打开或关闭Windows功能”。确保选择了Internet信息服务。选择IIS后，单击“确定”以打开该功能：
- en: '![](img/B06434_11_31.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_31.png)'
- en: You also need to ensure that you have installed the .NET Core Windows Server
    Hosting bundle, which will create a reverse-proxy between IIS and the Kestrel
    server.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要确保已安装了.NET Core Windows服务器托管包，它将在IIS和Kestrel服务器之间创建反向代理。
- en: 'At the time of this writing, the .NET Core Windows Server Hosting bundle is
    available at the following link:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，.NET Core Windows Server Hosting包可在以下链接找到：
- en: '[https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle](https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle](https://docs.microsoft.com/en-us/aspnet/core/publishing/iis#install-the-net-core-windows-server-hosting-bundle)'
- en: '![](img/B06434_11_25.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_25.png)'
- en: 'After installing the .NET Core Windows Server Hosting bundle, you need to restart
    IIS:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装.NET Core Windows Server Hosting包后，您需要重新启动IIS：
- en: '![](img/B06434_11_26.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_26.png)'
- en: 'Open Command Prompt as administrator, type `iisreset` and press *Enter.* This
    will stop and then start IIS:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员身份打开命令提示符，输入`iisreset`，然后按*Enter*。这将停止然后启动IIS：
- en: '![](img/B06434_11_27.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_27.png)'
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open up Command Prompt by running it as administrator. In Command Prompt, go
    to the `src\AspNetCore` directory of your project. Ensure that you have a folder
    called `publish` in your `temp` folder on the `C:\` drive of your computer, then
    type in the following command, and press *Enter.* This will build and publish
    your project:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以管理员身份运行命令提示符来打开命令提示符。在命令提示符中，转到项目的`src\AspNetCore`目录。确保您的计算机`C:\`驱动器的`temp`文件夹中有一个名为`publish`的文件夹，然后输入以下命令，按*Enter*。这将构建和发布您的项目：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/B06434_11_16.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_16.png)'
- en: Depending on what you called your ASP.NET Core application, the folder name
    under your `src` folder will be different to what mine is.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的ASP.NET Core应用程序的名称，您的`src`文件夹下的文件夹名称将与我的不同。
- en: 'After the app has been published you will see the published files along with
    all their dependencies in the output folder:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序发布后，您将在输出文件夹中看到发布文件以及它们的所有依赖项：
- en: '![](img/B06434_11_17.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_17.png)'
- en: Going back to Command Prompt, run the application by typing in `dotnet AspNetCore.dll`.
    Take note that if your ASP.NET Core application is called something else, the
    DLL you will run will be different from the example in the book.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到命令提示符，输入`dotnet AspNetCore.dll`来运行应用程序。请注意，如果您的ASP.NET Core应用程序名称不同，您将运行的DLL将与书中的示例不同。
- en: '![](img/B06434_11_18.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_18.png)'
- en: 'You can now go to your browser and type in `http://localhost:5000`. This will
    display your ASP.NET Core application for you:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以打开浏览器，输入`http://localhost:5000`。这将为您显示ASP.NET Core应用程序：
- en: '![](img/B06434_11_32.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_32.png)'
- en: 'You can do exactly the same on macOS by copying the published files to a folder
    and typing `dotnet AspNetCore.dll` in Terminal:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过将发布文件复制到文件夹并在终端中输入`dotnet AspNetCore.dll`来在macOS上执行相同的操作：
- en: '![](img/B06434_11_19.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_19.png)'
- en: 'Then in Safari on your Mac, type in `http://localhost:5000` and press *Enter.*
    This will load the site in Safari:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在Mac上的Safari中，输入`http://localhost:5000`，然后按*Enter*。这将在Safari中加载站点：
- en: '![](img/B06434_11_33.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_33.png)'
- en: While I have just shown Safari running on macOS as an alternative, the ASP.NET
    Core application will run happily on Linux too.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我刚刚展示了在macOS上运行Safari作为替代方案，但ASP.NET Core应用程序也可以在Linux上运行。
- en: 'Publishing the application to IIS is also easily done. In Visual Studio, right-click
    on the project in the Solution Explorer and click on Publish... from the context
    menu:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序发布到IIS也很容易。在Visual Studio中，右键单击解决方案资源管理器中的项目，然后从上下文菜单中单击“发布...”：
- en: '![](img/B06434_11_20.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_20.png)'
- en: 'You then need to select a publish target. There are a few options available
    to you, but for this example, you need to select the File System option and click
    on OK:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要选择一个发布目标。有几个选项可供选择，但在本示例中，您需要选择“文件系统”选项，然后单击“确定”：
- en: '![](img/B06434_11_21.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_21.png)'
- en: Back in the publish screen you can modify additional settings by clicking on
    Settings... next to the Target Location path. Here you need to select the publishing
    to be done in Release mode. Finally, click on the Publish button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布屏幕中，您可以通过单击“目标位置”路径旁边的“设置...”来修改其他设置。在这里，您需要选择以发布模式进行发布。最后，单击“发布”按钮。
- en: '![](img/B06434_11_22.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_22.png)'
- en: 'When the app has been published, Visual Studio will display the results in
    the Output window along with the publish location you selected:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序发布后，Visual Studio将在输出窗口中显示结果以及您选择的发布位置：
- en: '![](img/B06434_11_23.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_23.png)'
- en: 'In your browser, if you enter `http://localhost` you will see the default page
    for IIS. This means that IIS is set up:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，如果输入`http://localhost`，您将看到IIS的默认页面。这意味着IIS已经设置好了：
- en: '![](img/B06434_11_24.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_24.png)'
- en: 'In Windows Explorer, browse to `C:\inetpub\wwwroot` and create a new folder
    called `netcore`. Copy the published files from your ASP.NET Core application
    into this new folder you created. In IIS, add a new website by right-clicking
    on the `Sites` folder and selecting Add Website. Give the site a name and select
    the path you copied the published files to in the Physical path setting. Lastly,
    change the Port to `86` as port `80` is used by the default website and click
    on OK:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows资源管理器中，浏览到`C:\inetpub\wwwroot`，并创建一个名为`netcore`的新文件夹。将ASP.NET Core应用程序的发布文件复制到您创建的新文件夹中。在IIS中，通过右键单击`Sites`文件夹并选择添加网站来添加一个新网站。为网站命名，并选择在物理路径设置中复制发布文件的路径。最后，将端口更改为`86`，因为端口`80`被默认网站使用，然后单击“确定”：
- en: '![](img/B06434_11_28.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_28.png)'
- en: 'You will see your website added to the Sites folder in IIS. Under the Browse
    Website heading in the right-hand panel of IIS Manager, click on Browse *.86 (http):'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在IIS的Sites文件夹中看到已添加您的网站。在IIS管理器右侧面板的“浏览网站”标题下，单击“浏览*.86 (http)”：
- en: '![](img/B06434_11_29.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_29.png)'
- en: 'This will launch your ASP.NET Core application inside your default browser:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在您的默认浏览器中启动ASP.NET Core应用程序：
- en: '![](img/B06434_11_30.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_11_30.png)'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作原理...
- en: Creating an ASP.NET Core application on Windows allows us to run the application
    on Windows, as well as macOS and Linux. Running it standalone is done easily via
    the `dotnet` command in Windows Command Prompt or in Terminal on macOS. This is
    what makes .NET Core so powerful for the future of application development. You
    can use the IDE you are used to in order to develop applications that are platform
    independent. There is a lot more to know surrounding .NET Core and you would really
    need to dig in to understand the concept and learn what it is capable of.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上创建一个ASP.NET Core应用程序可以让我们在Windows、macOS和Linux上运行该应用程序。在Windows命令提示符或macOS终端中，可以轻松地通过`dotnet`命令独立运行它。这就是.NET
    Core对应用程序开发未来如此强大的原因。您可以使用您习惯的IDE来开发跨平台的应用程序。关于.NET Core还有很多需要了解的内容，您真的需要深入了解概念并了解它的能力。
