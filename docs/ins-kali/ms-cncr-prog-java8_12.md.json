["```java\n    System.out.println(\"**********************\");\n    System.out.println(\"Id: \" + thread.getId());\n    System.out.println(\"Name: \" + thread.getName());\n    System.out.println(\"Priority: \" + thread.getPriority());\n    System.out.println(\"Status: \" + thread.getState());\n    System.out.println(\"Stack Trace\");\n    for(StackTraceElement ste : thread.getStackTrace()) {\n      System.out.println(ste);\n    }\n\n    System.out.println(\"**********************\\n\");\n```", "```java\npublic class MyLock extends ReentrantLock {\n\n    private static final long serialVersionUID = 8025713657321635686L;\n\n    public String getOwnerName() {\n        if (this.getOwner() == null) {\n            return \"None\";\n        }\n        return this.getOwner().getName();\n    }\n\n    public Collection<Thread> getThreads() {\n        return this.getQueuedThreads();\n    }\n}\n```", "```java\n    System.out.println(\"************************\\n\");\n    System.out.println(\"Owner : \" + lock.getOwnerName());\n    System.out.println(\"Queued Threads: \" + lock.hasQueuedThreads());\n    if (lock.hasQueuedThreads()) {\n        System.out.println(\"Queue Length: \" + lock.getQueueLength());\n        System.out.println(\"Queued Threads: \");\n        Collection<Thread> lockedThreads = lock.getThreads();\n        for (Thread lockedThread : lockedThreads) {\n            System.out.println(lockedThread.getName());\n        }\n    }\n    System.out.println(\"Fairness: \" + lock.isFair());\n    System.out.println(\"Locked: \" + lock.isLocked());\n    System.out.println(\"Holds: \"+lock.getHoldCount());\n    System.out.println(\"************************\\n\");\n```", "```java\n    System.out.println (\"*******************************************\");\n    System.out.println(\"Active Count: \"+executor.getActiveCount());\n    System.out.println(\"Completed Task Count: \"+executor.getCompletedTaskCount());\n    System.out.println(\"Core Pool Size: \"+executor.getCorePoolSize());\n    System.out.println(\"Largest Pool Size: \"+executor.getLargestPoolSize());\n    System.out.println(\"Maximum Pool Size: \"+executor.getMaximumPoolSize());\n    System.out.println(\"Pool Size: \"+executor.getPoolSize());\n    System.out.println(\"Task Count: \"+executor.getTaskCount());\n    System.out.println(\"Terminated: \"+executor.isTerminated());\n    System.out.println(\"Is Terminating: \"+executor.isTerminating());\n    System.out.println (\"*******************************************\");\n```", "```java\n    System.out.println(\"**********************\");\n    System.out.println(\"Parallelism: \"+pool.getParallelism());\n    System.out.println(\"Pool Size: \"+pool.getPoolSize());\n    System.out.println(\"Active Thread Count: \"+pool.getActiveThreadCount());\n    System.out.println(\"Running Thread Count: \"+pool.getRunningThreadCount());\n    System.out.println(\"Queued Submission: \"+pool.getQueuedSubmissionCount());\n    System.out.println(\"Queued Tasks: \"+pool.getQueuedTaskCount());\n    System.out.println(\"Queued Submissions: \"+pool.hasQueuedSubmissions());\n    System.out.println(\"Steal Count: \"+pool.getStealCount());\n    System.out.println(\"Terminated : \"+pool.isTerminated());\n    System.out.println(\"**********************\");\n```", "```java\n    System.out.println (\"*******************************************\");\n    System.out.println(\"Arrived Parties: \"+phaser.getArrivedParties());\n    System.out.println(\"Unarrived Parties: \"+phaser.getUnarrivedParties());\n    System.out.println(\"Phase: \"+phaser.getPhase());\n    System.out.println(\"Registered Parties: \"+phaser.getRegisteredParties());\n    System.out.println(\"Terminated: \"+phaser.isTerminated());\n    System.out.println (\"*******************************************\");\n```", "```java\ndouble result=IntStream.range(0,1000)\n    .parallel()\n    .peek(n -> System.out.println (Thread.currentThread().getName()+\": Number \"+n))\n    .map(n -> n*n)\n    .peek(n -> System.out.println (Thread.currentThread().getName()+\": Transformer \"+n))\n    .average()\n    .getAsDouble();\n```", "```java\npublic class TestClassOk extends MultithreadedTestCase {\n\n    private Data data;\n    private int amount;\n    private int initialData;\n\n    public TestClassOk (Data data, int amount) {\n        this.amount=amount;\n        this.data=data;\n        this.initialData=data.getData();\n    }\n```", "```java\n    public void threadAdd() {\n        System.out.println(\"Add: Getting the data\");\n        int value=data.getData();\n        System.out.println(\"Add: Increment the data\");\n        value+=amount;\n        System.out.println(\"Add: Set the data\");\n        data.setData(value);\n    }\n```", "```java\n    public void threadSub() {\n        waitForTick(1);\n        System.out.println(\"Sub: Getting the data\");\n        int value=data.getData();\n        System.out.println(\"Sub: Decrement the data\");\n        value-=amount;\n        System.out.println(\"Sub: Set the data\");\n        data.setData(value);\n    }\n}\n```", "```java\npublic class MainOk {\n\n    public static void main(String[] args) {\n\n        Data data=new Data();\n        data.setData(10);\n        TestClassOk ok=new TestClassOk(data,10);\n\n        try {\n            TestFramework.runOnce(ok);\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n```", "```java\n    public void threadAdd() {\n        System.out.println(\"Add: Getting the data\");\n        int value=data.getData();\n        waitForTick(2);\n        System.out.println(\"Add: Increment the data\");\n        value+=amount;\n        System.out.println(\"Add: Set the data\");\n        data.setData(value);\n    }\n\n    public void threadSub() {\n        waitForTick(1);\n        System.out.println(\"Sub: Getting the data\");\n        int value=data.getData();\n        waitForTick(3);\n        System.out.println(\"Sub: Decrement the data\");\n        value-=amount;\n        System.out.println(\"Sub: Set the data\");\n        data.setData(value);\n    }\n```", "```java\njpf-core = D:/dev/book/projectos/jpf-core\n```", "```java\npublic class NumberTask implements Runnable {\n\n    private Data data;\n\n    public NumberTask (Data data) {\n        this.data=data;\n    }\n\n    @Override\n    public void run() {\n\n        for (int i=0; i<10; i++) {\n            data.increment(10);\n        }\n    }\n\n}\n```", "```java\npublic class MainNumber {\n\n    public static void main(String[] args) {\n        int numTasks=2;\n        Data data=new Data();\n\n        Thread threads[]=new Thread[numTasks];\n        for (int i=0; i<numTasks; i++) {\n            threads[i]=new Thread(new NumberTask(data));\n            threads[i].start();\n        }\n\n        for (int i=0; i<numTasks; i++) {\n            try {\n                threads[i].join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(data.getValue());\n    }\n\n}\n```", "```java\n+classpath=${config_path}/bin\ntarget=com.javferna.packtpub.mastering.testing.main.MainNumber\n```", "```java\n+classpath=${config_path}/bin\ntarget=com.javferna.packtpub.mastering.testing.main.MainNumber\nlistener=gov.nasa.jpf.listener.PreciseRaceDetector,gov.nasa.jpf.li stener.CoverageAnalyzer\n```"]