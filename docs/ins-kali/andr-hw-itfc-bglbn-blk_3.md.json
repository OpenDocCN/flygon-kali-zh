["```kt\n/* All GPIO pins are PULLUP, MODE7 */\nbb_gpio_pins: pinmux_bb_gpio_pins {\n    pinctrl-single,pins = <\n        0x070 0x17  /* P9.11, gpio0_30, OUTPUT */\n        0x074 0x37  /* P9.13, gpio0_31, INPUT */\n    >;\n};\n```", "```kt\n# Export GPIOs 30 and 31 (P9.11 and P9.13)\nwrite /sys/class/gpio/export 30\nwrite /sys/class/gpio/export 31\n\n# Make GPIO 30 an output\nwrite /sys/class/gpio/gpio30/direction out\n# Make GPIOs 30 and 31 writeable from the FS\nchmod 777 /sys/class/gpio/gpio30/value\nchmod 777 /sys/class/gpio/gpio31/value\n```", "```kt\n    root@beagleboneblack:/ # cd /sys/class/gpio/gpio30\n\n    ```", "```kt\n    root@beagleboneblack:/ # echo 1 > value\n\n    ```", "```kt\n    root@beagleboneblack:/ # echo 0 > value\n\n    ```", "```kt\n    root@beagleboneblack:/ # cd /sys/class/gpio/gpio31\n\n    ```", "```kt\n    root@beagleboneBlack:/ # cat value\n    1\n\n    ```", "```kt\n    root@beagleboneblack:/ # cat value\n    0\n\n    ```", "```kt\nmyapp\n  |\n  +----.settings/\n  +----assets/\n  +----bin/\n  +----gen/\n  +----libs/\n  +----res/\n  +----src/\n  +----...\n```", "```kt\n    c:\\> cd $PROJECT\\jni\n\n    ```", "```kt\n    c:\\$PROJECT\\jni> c:\\android-ndk\\ndk-build\n    [armeabi] Compile thumb  : packtHAL <= jni_wrapper.c\n    [armeabi] Compile thumb  : packtHAL <= gpio.c\n    [armeabi] Compile thumb  : packtHAL <= fram.c\n    [armeabi] Compile thumb  : packtHAL <= bmp183.c\n    [armeabi] SharedLibrary  : libpacktHAL.so\n    [armeabi] Install        : libpacktHAL.so => libs/armeabi/libpacktHAL.so\n\n    ```", "```kt\n$ cd $PROJECT\n$ cp \u2013rf $HOME/PacktHAL/jni .\n\n```", "```kt\n    $ cd $PROJECT/jni\n\n    ```", "```kt\n    $ ./$HOME/android-ndk/ndk-build\n    [armeabi] Compile thumb  : packtHAL <= jni_wrapper.c\n    [armeabi] Compile thumb  : packtHAL <= gpio.c\n    [armeabi] Compile thumb  : packtHAL <= fram.c\n    [armeabi] Compile thumb  : packtHAL <= bmp183.c\n    [armeabi] SharedLibrary  : libpacktHAL.so\n    [armeabi] Install        : libpacktHAL.so => libs/armeabi/libpacktHAL.so\n\n    ```", "```kt\n    c:\\> cd $WORKSPACE\\gpio\\bin\n\n    ```", "```kt\n    c:\\$WORKSPACE\\gpio\\bin> adb devices\n    List of devices attached\n    BBBAndroid      device\n\n    ```", "```kt\n    c:\\$WORKSPACE\\gpio\\bin> adb install -d gpio.apk\n\n    ```", "```kt\n    c:\\$WORKSPACE\\gpio\\bin> adb install -d -r gpio.apk\n\n    ```", "```kt\n$ cd $HOME\n$ tar \u2013xvf chapter3.tgz\n\n```", "```kt\n    $ cd $WORKSPACE/gpio/bin\n\n    ```", "```kt\n    $ adb devices\n    List of devices attached\n    BBBAndroid      device\n\n    ```", "```kt\n    $ adb install -d gpio.apk\n\n    ```", "```kt\n    $ adb install -d -r gpio.apk\n\n    ```", "```kt\n<TextView\n  \u2026\n  android:text=\"@string/button_state\"\n  android:id=\"@+id/button_state\" />\n```", "```kt\n<Button\n  \u2026\n  android:text=\"@string/button_poll\"\n  android:onClick=\"onClickButtonPollStatus\" />\n<Button\n  \u2026\n  android:text=\"@string/button_lighton\"\n  android:onClick=\"onClickButtonLightOn\" />\n<Button\n  \u2026\n  android:text=\"@string/button_lightoff\"\n  android:onClick=\"onClickButtonLightOff\" />\n```", "```kt\nextern int openGPIO(const int useMmap);\nextern int readGPIO(const unsigned int header, const unsigned int pin);\nextern int writeGPIO(const unsigned int header,\n    const unsigned int pin, const unsigned int value);\nextern void closeGPIO(void);\n```", "```kt\npublic class MainActivity extends Activity {\n  private native boolean openGPIO();\nprivate native void closeGPIO();\nprivate native boolean readGPIO(int header, int pin);\nprivate native void writeGPIO(int header, int pin, int val);\n\nstatic {\nSystem.loadLibrary(\"packtHAL\");\n}\n  \u2026\n}\n```", "```kt\njboolean Java_com_packt_gpio_MainActivity_openGPIO(JNIEnv *env,\n   jobject this)\n{\n  jboolean ret = JNI_TRUE;\n  if ( openGPIO(0) == 0 ) {\n    __android_log_print(ANDROID_LOG_DEBUG, PACKT_NATIVE_TAG,\n          \"GPIO Opened.\");\n  } else {\n    __android_log_print(ANDROID_LOG_ERROR, PACKT_NATIVE_TAG,\n          \"openGPIO() failed!\");\n    ret = JNI_FALSE;\n  }\n  return ret;\n}\n```", "```kt\nprotected void onCreate(Bundle savedInstanceState) {\n  ... //Existing statements    \n  TextView tv = (TextView) findViewById(R.id.button_state);\ntv.setText(\"Button State: UNKNOWN\");\n\n   if(openGPIO() == false) {\n      Log.e(\"com.packt\", \"Unable to open GPIO.\");\n        finish();\n   }\n}\n```", "```kt\nprotected void onDestroy() {\n   closeGPIO();\n}\n```", "```kt\npublic void onClickPollStatus(View view) {\n   String status = readGPIO(9, 13) == true ? \"ON\" : \"OFF\";\nTextView tv = (TextView) findViewById(R.id.button_state);\ntv.setText(\"Button State: \" + status);\n}\n```", "```kt\npublic void onClickButtonLightOn(View view) {\n   writeGPIO(9, 11, 1);\n}\n\npublic void onClickButtonLightOff(View view) {\n   writeGPIO(9, 11, 0);\n}\n```"]