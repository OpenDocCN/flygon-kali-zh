- en: Chapter 1. Object-Oriented JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。面向对象的JavaScript
- en: Ever since the early days of the web, there has been a need for more dynamic
    and responsive interfaces. While it's OK to read static HTML pages of text, and
    even better when they are beautifully presented with the help of CSS, it's much
    more fun to engage with applications in our browsers, such as e-mail, calendars,
    banking, shopping, drawing, playing games, and text editing. All that is possible
    thanks to JavaScript, the programming language of the web. JavaScript started
    with simple one-liners embedded in HTML, but is now used in much more sophisticated
    ways. Developers leverage the object-oriented nature of the language to build
    scalable code architectures made up of reusable pieces.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自Web早期以来，人们就需要更动态和响应迅速的界面。阅读静态HTML文本页面是可以的，而且当它们通过CSS精美呈现时更好，但在浏览器中与应用程序进行互动，如电子邮件、日历、银行业务、购物、绘图、游戏和文本编辑，会更有趣。所有这些都得益于JavaScript，这是Web的编程语言。JavaScript始于嵌入HTML中的简单一行代码，但现在以更复杂的方式使用。开发人员利用语言的面向对象特性构建可重用部分组成的可扩展代码架构。
- en: If you look at the past and present buzzwords in web development, DHTML, Ajax,
    Web 2.0, HTML5, they all essentially mean HTML, CSS, and JavaScript-HTML for **content**,
    CSS for **presentation**, and JavaScript for **behavior**. In other words, JavaScript
    is the glue that makes everything work together so that we can build rich web
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看一下Web开发中过去和现在的热词，DHTML、Ajax、Web 2.0、HTML5，它们本质上都意味着HTML、CSS和JavaScript——HTML用于**内容**，CSS用于**呈现**，JavaScript用于**行为**。换句话说，JavaScript是使一切协同工作的粘合剂，这样我们就可以构建丰富的Web应用程序。
- en: However, that's not all; JavaScript can be used for more than just the web.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这还不是全部；JavaScript不仅仅可以用于Web。
- en: JavaScript programs run inside a host environment. The web browser is the most
    common environment, but it's not the only one. Using JavaScript, you can create
    all kinds of widgets, application extensions, and other pieces of software, as
    you'll see in a bit. Taking the time to learn JavaScript is a smart investment;
    you learn one language and can then write all kinds of different applications
    running on multiple platforms, including mobile and server-side applications.
    These days, it's safe to say that JavaScript is everywhere.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript程序在主机环境中运行。Web浏览器是最常见的环境，但不是唯一的环境。使用JavaScript，您可以创建各种小部件、应用程序扩展和其他软件，稍后您将看到。学习JavaScript是一个明智的投资；您学习一种语言，然后可以编写在多个平台上运行的各种不同的应用程序，包括移动和服务器端应用程序。如今，可以说JavaScript无处不在。
- en: This book starts from zero, and does not assume any prior programming knowledge
    other than some basic understanding of HTML. Although there is one chapter dedicated
    to the web browser environment, the rest of the book is about JavaScript in general,
    so it's applicable to all environments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书从零开始，不假设除了对HTML的一些基本理解之外，读者具有任何先前的编程知识。虽然有一章专门讲解Web浏览器环境，但本书的其余部分都是关于JavaScript的一般知识，因此适用于所有环境。
- en: 'Let''s start with the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下内容开始：
- en: A brief introduction to the story behind JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript背后故事的简要介绍
- en: The basic concepts you'll encounter in discussions on object-oriented programming
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在面向对象编程讨论中会遇到的基本概念
- en: A bit of history
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: Initially, the web was not much more than just a number of scientific publications
    in the form of static HTML documents connected together with hyperlinks. Believe
    it or not, there was a time when there was no way to put an image in a page. However,
    that soon changed. As the web grew in popularity and size, the webmasters who
    were creating HTML pages felt they needed something more. They wanted to create
    richer user interactions, mainly driven by the desire to save server round trips
    for simple tasks such as form validation. Two options came up-Java applets and
    LiveScript, a language conceived by Brendan Eich at *Netscape* in 1995 and later
    included in the Netscape 2.0 browser under the name of JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Web不过是一系列以静态HTML文档形式连接在一起的科学出版物。信不信由你，曾经有一段时间页面上无法放置图像。然而，这很快就改变了。随着Web的普及和规模的扩大，创建HTML页面的网站管理员感到他们需要更多的东西。他们想要创建更丰富的用户交互，主要是出于希望为简单任务（如表单验证）节省服务器往返时间的愿望。出现了两个选择——Java小程序和LiveScript，这是Brendan
    Eich于1995年在*Netscape*构思的一种语言，后来被包含在Netscape 2.0浏览器中，名为JavaScript。
- en: The applets didn't quite catch on, but JavaScript did. The ability to use short
    code snippets embedded in HTML documents and alter otherwise static elements of
    a web page was embraced by the webmaster community. Soon, the competing browser
    vendor, Microsoft, shipped **Internet Explorer** (**IE**) 3.0 with JScript, which
    was a reverse engineered version of JavaScript plus some IE-specific features.
    Eventually, there was an effort to standardize the various implementations of
    the language, and this is how ECMAScript was born. **European Computer Manufacturers
    Association** (**ECMA**) created the standard called ECMA-262, which describes
    the core parts of the JavaScript programming language without browser and web
    page-specific features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 小程序并没有完全流行起来，但JavaScript却流行起来了。网站管理员社区欣然接受了在HTML文档中嵌入的简短代码片段，并改变了本来静态的Web页面元素。很快，竞争对手浏览器供应商微软发布了带有JScript的**Internet
    Explorer**（**IE**）3.0，这是JavaScript的一个反向工程版本，还加入了一些IE特定的功能。最终，有人努力标准化语言的各种实现，这就是ECMAScript诞生的原因。**欧洲计算机制造商协会**（**ECMA**）创建了名为ECMA-262的标准，描述了JavaScript编程语言的核心部分，而没有浏览器和网页特定的功能。
- en: 'You can think of JavaScript as a term that encompasses the following three
    pieces:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将JavaScript视为涵盖以下三个部分的术语：
- en: '**ECMAScript**: The core language-variables, functions, loops, and so on. This
    part is independent of the browser and this language can be used in many other
    environments.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ECMAScript**：核心语言——变量、函数、循环等。这部分与浏览器无关，这种语言可以在许多其他环境中使用。'
- en: '**Document Object Model** (**DOM**): This provides ways to work with HTML and
    XML documents. Initially, JavaScript provided limited access to what''s scriptable
    on the page, mainly forms, links, and images. Later, it was expanded to make all
    elements scriptable. This led to the creation of the DOM standard by the **World
    Wide Web Consortium** (**W3C**) as a language-independent (no longer tied to JavaScript)
    way to manipulate structured documents.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档对象模型**（**DOM**）：它提供了处理HTML和XML文档的方法。最初，JavaScript只能对页面上可脚本化的内容进行有限的访问，主要是表单、链接和图像。后来，它被扩展为使所有元素都可以进行脚本化。这导致了W3C制定DOM标准，作为一种独立于语言的（不再与JavaScript绑定）操纵结构化文档的方式。'
- en: '**Browser Object Model** (**BOM**): This is a set of objects related to the
    browser environment and was never part of any standard until HTML5 started standardizing
    some of the common objects that exist across browsers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器对象模型**（**BOM**）：这是一组与浏览器环境相关的对象，直到HTML5开始标准化一些跨浏览器存在的常见对象之前，它从未成为任何标准的一部分。'
- en: While there is one chapter in this book dedicated to the browser, the DOM, and
    the BOM, most of this book describes the core language and teaches you skills
    you can use in any environment where JavaScript programs run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书有一章专门讲述浏览器、DOM和BOM，但本书的大部分内容描述了核心语言，并教授了你可以在任何JavaScript程序运行的环境中使用的技能。
- en: Browser wars and renaissance
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器战争和复兴
- en: For better or for worse, JavaScript's instant popularity happened during the
    period of the browser wars I (approximately 1996 to 2001). Those were the times
    during the initial Internet boom when the two major browser vendors, Netscape
    and Microsoft, were competing for market share. Both were constantly adding more
    bells and whistles to their browsers and their versions of JavaScript, DOM, and
    BOM, which naturally led to many inconsistencies. While adding more features,
    the browser vendors were falling behind on providing proper development and debugging
    tools and adequate documentation. Often, development was a pain; you would write
    a script while testing in one browser, and once you're done with development,
    you test in the other browser, only to find that your script simply fails for
    no apparent reason, and the best you can get is a cryptic error message, such
    as operation aborted.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不管好坏，JavaScript的即时流行发生在浏览器战争I时期（大约1996年至2001年）。那是在最初的互联网繁荣时期，两大浏览器供应商网景和微软正在争夺市场份额。他们不断为他们的浏览器和JavaScript、DOM和BOM的版本添加更多的花哨功能，这自然导致了许多不一致性。在添加更多功能的同时，浏览器供应商在提供适当的开发和调试工具以及充分的文档方面落后了。开发经常是一种痛苦；你在一个浏览器中测试脚本，一旦开发完成，你在另一个浏览器中测试，结果发现你的脚本无缘无故地失败，你能得到的最好结果就是一个晦涩的错误消息，比如操作中止。
- en: Inconsistent implementations, missing documentation, and no appropriate tools
    painted JavaScript in such a light that many programmers simply refused to bother
    with it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不一致的实现、缺失的文档和不合适的工具让JavaScript显得如此不堪，以至于许多程序员根本不愿意费心去处理它。
- en: On the other hand, developers who did try to experiment with JavaScript got
    a little carried away, adding too many special effects to their pages without
    much regard of how usable the end results were. Developers were eager to make
    use of every new possibility the browsers provided, and ended up enhancing their
    web pages with things such as animations in the status bar, flashing colors, blinking
    texts, objects stalking your mouse cursor, and many other innovations that actually
    hurt the user experience. These various ways to abuse JavaScript are now mostly
    gone, but they were one of the reasons why the language had something of a bad
    reputation. Many serious programmers dismissed JavaScript as nothing but a toy
    for designers to play around with, and dismissed it as a language unsuitable for
    serious applications. The JavaScript backlash caused some web projects to completely
    ban any client-side programming and trust only their predictable and tightly controlled
    server. And really, why would you double the time to deliver a finished product
    and then spend additional time debugging problems with the different browsers?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，试图尝试使用JavaScript进行实验的开发人员有些过分，他们在页面上添加了太多的特效，而并不太关心最终结果的可用性。开发人员渴望利用浏览器提供的每一种新可能性，结果最终在他们的网页上添加了诸如状态栏中的动画、闪烁的颜色、闪烁的文本、跟踪鼠标光标的对象等许多创新，实际上却损害了用户体验。这些滥用JavaScript的方式现在大多已经消失，但它们是语言声誉不佳的原因之一。许多严肃的程序员认为JavaScript只是设计师玩耍的玩具，并认为它不适合严肃的应用程序。JavaScript的反弹导致一些网络项目完全禁止任何客户端编程，只信任可预测和严格控制的服务器。而且，为什么要将交付成品的时间加倍，然后花费额外的时间来调试不同浏览器的问题呢？
- en: 'Everything changed in the years following the end of the browser wars I. A
    number of events reshaped the web development landscape in a positive way. Some
    of them are given as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一切在浏览器战争结束后的几年里发生了改变。一些事件以积极的方式重塑了网络开发的格局。其中一些如下：
- en: Microsoft won the war with the introduction of IE6, the best browser at the
    time, and for many years they stopped developing Internet Explorer. This allowed
    time for other browsers to catch up and even surpass IE's capabilities.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软在IE6推出后赢得了这场战争，当时是最好的浏览器，多年来他们停止了Internet Explorer的开发。这给其他浏览器赶上甚至超越IE的能力提供了时间。
- en: The movement for web standards was embraced by developers and browser vendors
    alike. Naturally, developers didn't like having to code everything two (or more)
    times to account for browsers' differences; therefore, they liked the idea of
    having agreed-upon standards that everyone would follow.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络标准的运动被开发人员和浏览器供应商所接受。自然地，开发人员不喜欢为了应对浏览器的差异而编写两次（或更多次）代码；因此，他们喜欢有一套大家都会遵循的约定标准的想法。
- en: Developers and technologies matured and more people started caring about things
    such as usability, progressive enhancement techniques, and accessibility. Tools
    such as Firebug made developers much more productive and the development less
    of a pain.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员和技术不断成熟，越来越多的人开始关注可用性、渐进增强技术和可访问性等问题。诸如Firebug之类的工具使开发人员更加高效，开发变得不那么痛苦。
- en: In this healthier environment, developers started finding out new and better
    ways to use the instruments that were already available. After the public release
    of applications such as Gmail and Google Maps, which were rich on client-side
    programming, it became clear that JavaScript is a mature, unique in certain ways,
    and powerful prototypal object-oriented language. The best example of its rediscovery
    was the wide adoption of the functionality provided by the `XMLHttpRequest` object,
    which was once an IE-only innovation, but was then implemented by most other browsers.
    `XMLHttpRequest` object allows JavaScript to make HTTP requests and get fresh
    content from the server in order to update some parts of a page without a full
    page reload. Due to the wide use of the `XMLHttpRequest` object, a new breed of
    desktop-like web applications, dubbed Ajax applications, was born.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种更健康的环境中，开发人员开始发现使用已经可用的工具的新方法和更好的方法。在Gmail和Google Maps等富有客户端编程的应用程序公开发布后，人们开始意识到JavaScript是一种成熟的、在某些方面独特的、强大的原型对象导向语言。其重新发现的最好例子是`XMLHttpRequest`对象提供的功能的广泛采用，这个对象曾经是IE独有的创新，但后来被大多数其他浏览器实现。`XMLHttpRequest`对象允许JavaScript发出HTTP请求，并从服务器获取新内容，以便更新页面的某些部分而无需完全重新加载页面。由于广泛使用`XMLHttpRequest`对象，一种新型的类似桌面的Web应用程序，称为Ajax应用程序，诞生了。
- en: The present
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在
- en: 'An interesting thing about JavaScript is that it always runs inside a host
    environment. The web browser is just one of the available hosts. JavaScript can
    also run on the server, on the desktop, and on mobile devices. Today, you can
    use JavaScript to do all of the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript的一个有趣之处是它总是在主机环境中运行。Web浏览器只是其中一个可用的主机。JavaScript也可以在服务器、桌面和移动设备上运行。今天，您可以使用JavaScript执行以下所有操作：
- en: Create rich and powerful web applications (the kind of applications that run
    inside the web browser). Additions to HTML5, such as application cache, client-side
    storage, and databases, make browser programming more and more powerful for both
    online and offline applications. Powerful additions to Chrome WebKit also include
    support for service workers and browser push notifications.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建丰富而强大的Web应用程序（在Web浏览器内运行的应用程序）。HTML5的增加，如应用程序缓存、客户端存储和数据库，使浏览器编程对在线和离线应用程序都变得越来越强大。Chrome
    WebKit的强大增加还包括对服务工作者和浏览器推送通知的支持。
- en: Write server-side code using `Node.js`, as well as code that can run using Rhino
    (a JavaScript engine written in Java).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Node.js`编写服务器端代码，以及可以在Rhino（用Java编写的JavaScript引擎）上运行的代码。
- en: Make mobile applications; you can create apps for iPhone, Android, and other
    phones and tablets entirely in JavaScript using **PhoneGap** or **Titanium**.
    Additionally, apps for Firefox OS for mobile phones are entirely in JavaScript,
    HTML, and CSS. React Native from Facebook is an exciting new way to develop native
    iOS, Android, and Windows (experimental) applications using JavaScript.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作移动应用程序；您可以使用**PhoneGap**或**Titanium**完全使用JavaScript为iPhone、Android和其他手机和平板电脑创建应用程序。此外，为移动电话的Firefox
    OS应用程序完全由JavaScript、HTML和CSS创建。来自Facebook的React Native是一种令人兴奋的新方法，可以使用JavaScript开发本机iOS、Android和Windows（实验性）应用程序。
- en: Create rich media applications, such as Flash or Flex, using ActionScript, which
    is based on ECMAScript.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于ECMAScript的ActionScript创建丰富的媒体应用程序，如Flash或Flex。
- en: Write command-line tools and scripts that automate administrative tasks on your
    desktop using **Windows Scripting Host** (**WSH**) or WebKit's **JavaScriptCore**,
    which is available on all Macs.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Windows Scripting Host**（**WSH**）或WebKit的**JavaScriptCore**在桌面上编写命令行工具和脚本，以自动化管理任务。这些工具在所有Mac上都可用。
- en: Write extensions and plugins for a plethora of desktop applications, such as
    Dreamweaver, Photoshop, and most other browsers.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为大量桌面应用程序编写扩展和插件，如Dreamweaver、Photoshop和大多数其他浏览器。
- en: Create cross-operating system desktop applications using Mozilla's **XULRunner**
    and **Electron**. Electron is used to build some of the most popular apps on the
    desktop, such as Slack, Atom, and Visual Studio Code.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mozilla的**XULRunner**和**Electron**创建跨操作系统的桌面应用程序。Electron用于构建一些最受欢迎的桌面应用程序，如Slack、Atom和Visual
    Studio Code。
- en: '**Emscripten**, on the other hand, allows code written in C/C++ to be compiled
    into an `asm.js` format, which can then be run inside a browser.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，**Emscripten**允许用C/C++编写的代码编译成`asm.js`格式，然后在浏览器内运行。
- en: Testing frameworks like **PhantomJS** are programmed using JavaScript.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像**PhantomJS**这样的测试框架是使用JavaScript编程的。
- en: This is by no means an exhaustive list. JavaScript started inside web pages,
    but today it's safe to say it is practically everywhere. In addition, browser
    vendors now use speed as a competitive advantage and are racing to create the
    fastest JavaScript engines, which is great for both users and developers, and
    opens doors for even more powerful uses of JavaScript in new areas such as image,
    audio and video processing, and games development.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这绝不是一个详尽的列表。JavaScript最初在网页内部开始，但今天可以说它几乎无处不在。此外，浏览器供应商现在将速度作为竞争优势，并竞相创建最快的JavaScript引擎，这对用户和开发人员都是好事，并为JavaScript在图像、音频和视频处理以及游戏开发等新领域的更强大用途打开了大门。
- en: The future
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: We can only speculate what the future will be, but it's quite certain that it
    will include JavaScript. For quite some time, JavaScript may have been underestimated
    and underused (or maybe overused in the wrong ways), but every day, we witness
    new applications of the language in much more interesting and creative ways. It
    all started with simple one-liners, often embedded in HTML tag attributes, such
    as `onclick`. Nowadays, developers ship sophisticated, well-designed and architected,
    and extensible applications and libraries, often supporting multiple platforms
    with a single codebase. JavaScript is indeed taken seriously, and developers are
    starting to rediscover and enjoy its unique features more and more.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能推测未来会是什么样子，但可以肯定的是它将包括JavaScript。有一段时间，JavaScript可能被低估和低使用（或者可能在错误的方式上被过度使用），但每天我们都见证语言在更有趣和创造性的方式中得到新的应用。一切都始于简单的一行代码，通常嵌入在HTML标签属性中，比如`onclick`。如今，开发人员发布复杂、设计良好、可扩展的应用程序和库，通常支持单个代码库的多个平台。JavaScript确实被认真对待，开发人员开始重新发现并越来越多地享受其独特的特性。
- en: Once listed in the nice-to-have sections of job postings, today, knowledge of
    JavaScript is often a deciding factor when it comes to hiring web developers.
    Common job interview questions you can hear today include-Is JavaScript an object-oriented
    language? Good. Now, how do you implement inheritance in JavaScript? After reading
    this book, you'll be prepared to ace your JavaScript job interview and even impress
    your interviewers with some bits that, maybe, they didn't know.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经在招聘职位的nice-to-have部分列出，如今，对JavaScript的了解往往是招聘Web开发人员时的决定性因素。今天你可能会听到的常见面试问题包括-
    JavaScript是一种面向对象的语言吗？好的。那么，在JavaScript中如何实现继承？阅读完本书后，你将准备好在JavaScript面试中脱颖而出，甚至用一些他们可能不知道的知识来给面试官留下深刻印象。
- en: ECMAScript 5
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 5
- en: The last most important milestone in ECMAScript revisions was **ECMAScript 5**
    (**ES5**), officially accepted in December 2009\. ECMAScript 5 standard is implemented
    and supported on all major browsers and server-side technologies.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript修订中最重要的里程碑是**ECMAScript 5**（**ES5**），于2009年12月正式被接受。ECMAScript 5标准在所有主要浏览器和服务器端技术上都得到了实施和支持。
- en: ES5 was a major revision because apart from several important syntactic changes
    and additions to the standard libraries, ES5 also introduced several new constructs
    in the language.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ES5是一个重大的修订，因为除了一些重要的语法变化和标准库的添加之外，ES5还在语言中引入了几个新的构造。
- en: 'For instance, ES5 introduced some new objects and properties, and also the
    so-called **strict** mode. Strict mode is a subset of the language that excludes
    deprecated features. The strict mode is opt-in and not required, meaning that
    if you want your code to run in the strict mode, you will declare your intention
    using (once per function, or once for the whole program) the following string:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ES5引入了一些新的对象和属性，以及所谓的**严格**模式。严格模式是语言的一个子集，排除了已弃用的特性。严格模式是选择加入的，不是必须的，这意味着如果你希望你的代码在严格模式下运行，你将使用以下字符串声明你的意图（每个函数一次，或整个程序一次）：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is just a JavaScript string, and it's ok to have strings floating around
    unassigned to any variable. As a result, older browsers that don't speak ES5 will
    simply ignore it, so this strict mode is backwards compatible and won't break
    older browsers.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个JavaScript字符串，将字符串漂浮在任何变量之外是可以的。因此，不支持ES5的旧版浏览器将简单地忽略它，因此这种严格模式是向后兼容的，不会破坏旧版浏览器。
- en: For backwards compatibility, all the examples in this book work in ES3, but
    at the same time, all the code in the book is written so that it will run without
    warnings in ES5's strict mode. Additionally, any ES5-specific parts will be clearly
    marked. [Appendix C](apc.html "Appendix C. Built-in Objects"), *Built-in Objects*,
    lists the new additions to ES5 in detail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，本书中的所有示例都适用于ES3，但与此同时，本书中的所有代码都是这样编写的，以便在ES5的严格模式下不会出现警告。此外，任何ES5特定的部分都将被清楚地标记出来。[附录C](apc.html
    "附录 C. 内置对象")，*内置对象*，详细列出了ES5的新添加。
- en: Strict mode in ES6
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES6中的严格模式
- en: While strict mode is optional in ES5, all ES6 modules and classes are strict
    by default. As you will see soon, most of the code we write in ES6 resides in
    a module; hence, strict mode is enforced by default. However, it is important
    to understand that all other constructs do not have implicit strict mode enforced.
    There were efforts to make newer constructs, such as arrow and generator functions,
    to also enforce strict mode, but it was later decided that doing so would result
    in very fragmented language rules and code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然ES5中的严格模式是可选的，但所有ES6模块和类默认都是严格模式。正如你很快会看到的，我们在ES6中编写的大部分代码都驻留在一个模块中；因此，默认情况下强制执行严格模式。然而，重要的是要理解，所有其他构造都没有隐式的严格模式强制执行。曾经有努力使新的构造，比如箭头和生成器函数，也强制执行严格模式，但后来决定这样做会导致非常分散的语言规则和代码。
- en: ECMAScript 6
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 6
- en: ECMAScript 6 revision took a long time to finish and was finally accepted on
    June 17, 2015\. ES6 features are slowly becoming part of major browsers and server
    technologies. It is possible to use transpilers to compile ES6 to ES5 and use
    the code on environments that do not yet support ES6 completely (we will discuss
    transpilers in detail later).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6修订花了很长时间才完成，最终于2015年6月17日被接受。ES6的特性正在逐渐成为主要浏览器和服务器技术的一部分。可以使用转译器将ES6编译为ES5，并在尚未完全支持ES6的环境中使用该代码（我们稍后将详细讨论转译器）。
- en: 'ES6 substantially upgrades JavaScript as a language and brings in very exciting
    syntactical changes and language constructs. Broadly, there are two kinds of fundamental
    changes in this revision of ECMAScript, which are as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ES6大大升级了JavaScript作为一种语言，并带来了非常令人兴奋的语法变化和语言构造。总的来说，这个ECMAScript修订中有两种基本的变化，如下所示：
- en: Improved syntax for existing features and editions to the standard library;
    for example, classes and promises
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了现有功能的语法和标准库的版本；例如，类和承诺
- en: New language features; for example, generators
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的语言特性；例如，生成器
- en: ES6 allows you to think differently about your code. New syntax changes can
    let you write code that is cleaner, easier to maintain, and does not require special
    tricks. The language itself now supports several constructs that required third-party
    modules earlier. Language changes introduced in ES6 need a serious rethink in
    the way we have been coding in JavaScript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: ES6允许您以不同的方式思考您的代码。新的语法变化可以让您编写更清洁、更易于维护的代码，而且不需要特殊的技巧。语言本身现在支持了以前需要第三方模块的几种构造。ES6引入的语言变化需要认真重新考虑我们一直以来在JavaScript中编码的方式。
- en: A note on the nomenclature-ECMAScript 6, ES6, and ECMAScript 2015 are the same,
    but used interchangeably.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于命名法-ECMAScript 6、ES6和ECMAScript 2015是相同的，但可以互换使用。
- en: Browser support for ES6
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES6的浏览器支持
- en: The majority of the browsers and server frameworks are on their way towards
    implementing ES6 features. You can check out the what is supported and what is
    not by clicking [http://kangax.github.io/compat-table/es6/](http://kangax.github.io/compat-table/es6/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数浏览器和服务器框架都在逐步实现ES6功能。您可以通过点击[http://kangax.github.io/compat-table/es6/](http://kangax.github.io/compat-table/es6/)来查看支持和不支持的内容。
- en: Though ES6 is not fully supported on all browsers and server frameworks, we
    can start using almost all features of ES6 with the help of **transpilers**. Transpilers
    are source-to-source compilers. ES6 transpilers allow you to write code in ES6
    syntax and compile/transform them into equivalent ES5 syntax, which can then be
    run on browsers that do not support the entire range of ES6 features.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管并非所有浏览器和服务器框架都完全支持ES6，但我们可以借助转译器几乎使用ES6的所有功能。转译器是源到源编译器。ES6转译器允许您以ES6语法编写代码，并将其编译/转换为等效的ES5语法，然后可以在不支持整个ES6功能范围的浏览器上运行。
- en: The defacto ES6 transpiler at the moment is Babel. In this book, we will use
    Babel and write and test our examples.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前事实上的ES6转译器是Babel。在本书中，我们将使用Babel来编写和测试我们的示例。
- en: Babel
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Babel
- en: Babel supports almost all ES6 features out of the box or with custom plugins.
    Babel can be used from a wide range of build systems, frameworks, and languages
    to template engines, and has a good command line and **read-eval-print loop**
    (**REPL**) built in.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Babel几乎支持所有ES6功能，可以直接使用或使用自定义插件。Babel可以从各种构建系统、框架和语言到模板引擎中使用，并且具有良好的命令行和REPL内置。
- en: To get a good idea about how Babel transpiles ES6 code to its ES5 equivalent
    form, head over to Babel REPL ([http://babeljs.io/repl/](http://babeljs.io/repl/)).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Babel如何将ES6代码转译为其ES5等效形式，请转到Babel REPL（[http://babeljs.io/repl/](http://babeljs.io/repl/)）。
- en: 'Babel REPL allows you to quickly test small snippets of ES6\. When you open
    Babel REPL in the browser, you will see some ES6 code defaulted there. On the
    left pane, remove the code and type in the following text:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Babel REPL允许您快速测试ES6的小片段。当您在浏览器中打开Babel REPL时，您会看到一些ES6代码默认在那里。在左窗格中，删除代码并输入以下文本：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you type this and tab out of the left pane, you will see REPL transpiling
    this ES6 code into something like the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入此内容并从左窗格切换时，您将看到REPL将此ES6代码转换为以下代码：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is the ES5 equivalent of the code we wrote earlier in the left pane. You
    can see that the resulting code in the right pane is a familiar ES5\. As we said,
    Babel REPL is a good place to try and experiment with various ES6 constructs.
    However, we need babel to automatically transpile your ES6 code into ES5, and
    for that, you can include Babel into your existing build systems or frameworks.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在左窗格中早些时候编写的代码的ES5等效代码。您可以看到右窗格中的结果代码是熟悉的ES5。正如我们所说，Babel REPL是一个尝试和实验各种ES6构造的好地方。然而，我们需要babel自动将您的ES6代码转译成ES5，为此，您可以将Babel包含到您现有的构建系统或框架中。
- en: 'Let''s begin by installing Babel as a command-line tool. For this, we will
    assume that you are familiar with node and **Node Package Manager** (**npm**).
    Installing Babel using `npm` is easy. Let''s first create a directory where we
    will have Babel installed as a module and rest of the source code. On my Mac,
    the following commands will create a directory called `babel_test`, initialize
    the project using `npm init`, and install Babel command line using `npm`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装Babel作为一个命令行工具。为此，我们将假设您熟悉node和Node Package Manager（npm）。使用`npm`安装Babel很容易。让我们首先创建一个目录，我们将在其中安装Babel作为一个模块和其余的源代码。在我的Mac上，以下命令将创建一个名为`babel_test`的目录，使用`npm
    init`初始化项目，并使用`npm`安装Babel命令行：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are familiar with `npm`, you may get tempted to install Babel globally.
    However, installing Babel as a global module is not generally a good idea. Once
    you have installed Babel in your project, your `package.json` file will look something
    like the following block of code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉`npm`，您可能会想要全局安装Babel。但是，通常不建议将Babel安装为全局模块。一旦您在项目中安装了Babel，您的`package.json`文件将看起来像以下代码块：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can see a development dependency created for Babel for version > 6.10.1\.
    You can use Babel to transpile your code by either invoking it from the command
    line or as part of the build step. For any non-trivial work, you will need the
    later approach. To invoke Babel as part of the project build step, you can add
    a `build` step invoking Babel inside your script tag to your `package.json` file,
    for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到为Babel创建了一个版本大于6.10.1的开发依赖项。您可以通过从命令行调用它或作为构建步骤的一部分来使用Babel来转译您的代码。对于任何非平凡的工作，您将需要后一种方法。要在项目构建步骤的一部分调用Babel，您可以将一个`build`步骤添加到您的`package.json`文件的`script`标签中，例如：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you do npm build, Babel will be invoked on your `src` directory and the
    transpiled code will be placed inside `lib` directory. Alternatively, you can
    run Babel manually also by writing the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当您执行npm build时，Babel将在您的`src`目录上调用，并将转译后的代码放在`lib`目录中。或者，您也可以通过编写以下命令手动运行Babel：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will talk about various Babel options and plugins later in the book. This
    section will equip you to start exploring ES6.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面讨论各种Babel选项和插件。本节将使您能够开始探索ES6。
- en: Object-oriented programming
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程
- en: 'Before diving into JavaScript, let''s take a moment to review what people mean
    when they say object-oriented, and what the main features of this programming
    style are. Here''s a list of concepts that are most often used when talking about
    **object-oriented programming** (**OOP**):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究JavaScript之前，让我们花点时间回顾一下人们在说到面向对象时指的是什么，以及这种编程风格的主要特点是什么。以下是在谈论**面向对象编程**（**OOP**）时最常用的概念列表：
- en: Object, method, and property
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象，方法和属性
- en: Class
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Encapsulation
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装
- en: Aggregation
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合
- en: Reusability/inheritance
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重用性/继承
- en: Polymorphism
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态性
- en: Let's take a closer look into each one of these concepts. If you're new to the
    object-oriented programming lingo, these concepts might sound too theoretical,
    and you might have trouble grasping or remembering them from one reading. Don't
    worry, it does take a few tries, and the subject can be a little dry at a conceptual
    level. However, we'll look at plenty of code examples further on in the book,
    and you'll see that things are much simpler in practice.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些概念中的每一个。如果您对面向对象编程术语感到陌生，这些概念可能听起来太理论化，您可能会在一次阅读中难以理解或记住它们。不要担心，这需要几次尝试，而且从概念层面上来说，这个主题可能有点枯燥。但是，我们将在本书的后面看到大量的代码示例，您会发现实际上事情要简单得多。
- en: Objects
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象
- en: As the name object-oriented suggests, objects are important. An object is a
    representation of a thing (someone or something), and this representation is expressed
    with the help of a programming language. The thing can be anything, a real-life
    object, or a more convoluted concept. Taking a common object, a cat, for example,
    you can see that it has certain characteristics-color, name, weight, and so on
    and can perform some actions-meow, sleep, hide, escape, and so on. The characteristics
    of the object are called properties in OOP-speak, and the actions are called methods.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名字所暗示的那样，对象很重要。对象是事物（某人或某物）的表示，这种表示是通过编程语言来表达的。事物可以是任何东西，现实生活中的对象，或者更复杂的概念。以常见的对象猫为例，您可以看到它具有某些特征-颜色，名称，重量等，并且可以执行一些动作-喵喵叫，睡觉，躲藏，逃跑等。对象的特征在面向对象编程中称为属性，动作称为方法。
- en: 'The analogy with the spoken language are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与口语的类比如下：
- en: Objects are most often named using nouns, such as book, person, and so on
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象通常使用名词命名，例如书，人等
- en: Methods are verbs, for example, read, run, and so on
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法是动词，例如读，运行等
- en: Values of the properties are adjectives
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性的值是形容词
- en: Take the sentence "The black cat sleeps on the mat" as an example. "The cat"
    (a noun) is the object, "black" (adjective) is the value of the color property,
    and "sleep" (a verb) is an action or a method in OOP. For the sake of the analogy,
    we can go a step further and say that "on the mat" specifies something about the
    action "sleep", so it's acting as a parameter passed to the `sleep` method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以句子“黑猫睡在垫子上”为例。 “猫”（名词）是对象，“黑色”（形容词）是颜色属性的值，“睡觉”（动词）是面向对象编程中的动作或方法。为了类比，我们可以再进一步说“在垫子上”指定了关于动作“睡觉”的一些内容，因此它充当了传递给`sleep`方法的参数。
- en: Classes
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: In real life, similar objects can be grouped based on some criteria. A hummingbird
    and an eagle are both birds, so they can be classified as belonging to some made-up
    `Birds` class. In OOP, a class is a blueprint or a recipe for an object. Another
    name for object is instance, so we can say that the eagle is one concrete instance
    of the general `Birds` class. You can create different objects using the same
    class because a class is just a template, while the objects are concrete instances
    based on the template.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，可以根据某些标准对类似的对象进行分组。蜂鸟和老鹰都是鸟类，因此它们可以被归类为某个虚构的`Birds`类。在面向对象编程中，类是对象的蓝图或配方。对象的另一个名称是实例，因此我们可以说老鹰是`Birds`类的一个具体实例。您可以使用相同的类创建不同的对象，因为类只是一个模板，而对象是基于模板的具体实例。
- en: There's a difference between JavaScript and the classic OO languages such as
    C++ and Java. You should be aware right from the start that in JavaScript, there
    are no classes; everything is based on objects. JavaScript has the notion of prototypes,
    which are also objects (we'll discuss them later in detail). In a classic OO language,
    you'd say something like-create a new object for me called `Bob`, which is of
    class `Person`. In a prototypal OO language, you'd say-I'm going to take this
    object called Bob's dad that I have lying around (on the couch in front of the
    TV?) and reuse it as a prototype for a new object that I'll call `Bob`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript和经典的面向对象语言（如C++和Java）之间存在差异。您应该从一开始就意识到，在JavaScript中，没有类；一切都基于对象。
    JavaScript具有原型的概念，它们也是对象（我们稍后将详细讨论它们）。在经典的面向对象语言中，您会说类似于-为我创建一个名为`Bob`的新对象，它属于`Person`类。在原型面向对象语言中，您会说-我将采用我已经准备好的Bob爸爸对象（在电视前的沙发上？）并将其重用作我将称之为`Bob`的新对象的原型。
- en: Encapsulation
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装
- en: 'Encapsulation is another OOP related concept, which illustrates the fact that
    an object contains (encapsulates) the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 封装是另一个与面向对象编程相关的概念，它说明了一个对象包含（封装）以下内容：
- en: Data (stored in properties)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据（存储在属性中）
- en: The means to do something with the data (using methods)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方法对数据进行操作
- en: One other term that goes together with encapsulation is information hiding.
    This is a rather broad term and can mean different things, but let's see what
    people usually mean when they use it in the context of OOP.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 封装是与封装相配的另一个术语。这是一个相当广泛的术语，可能意味着不同的事情，但让我们看看人们在面向对象编程的上下文中使用它时通常指的是什么。
- en: Imagine an object, say, an MP3 player. You, as the user of the object, are given
    some interface to work with, such as buttons, display, and so on. You use the
    interface in order to get the object to do something useful for you, like play
    a song. How exactly the device is working on the inside, you don't know, and,
    most often, don't care. In other words, the implementation of the interface is
    hidden from you. The same thing happens in OOP when your code uses an object by
    calling its methods. It doesn't matter if you coded the object yourself or it
    came from some third-party library; your code doesn't need to know how the methods
    work internally. In compiled languages, you can't actually read the code that
    makes an object work. In JavaScript, because it's an interpreted language, you
    can see the source code, but the concept is still the same-you work with the object's
    interface without worrying about its implementation.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个对象，比如MP3播放器。作为对象的用户，您被赋予一些接口来使用，例如按钮，显示屏等。您使用接口来使对象对您有用，比如播放一首歌。设备内部的工作方式，您不知道，而且通常也不关心。换句话说，接口的实现对您是隐藏的。当您的代码通过调用其方法使用对象时，面向对象编程中也会发生同样的事情。您的代码不需要知道方法内部是如何工作的，无论您自己编写了对象还是它来自某个第三方库；您的代码都不需要知道方法的内部工作方式。在编译语言中，您实际上无法阅读使对象工作的代码。在JavaScript中，因为它是一种解释性语言，您可以看到源代码，但概念仍然是一样的-您使用对象的接口而不用担心其实现。
- en: Another aspect of information hiding is the visibility of methods and properties.
    In some languages, objects can have `public`, `private`, and `protected` methods
    and properties. This categorization defines the level of access the users of the
    object have. For example, only the methods of the same object have access to the
    `private` methods, while anyone has access to the `public` ones. In JavaScript,
    all methods and properties are `public`, but we'll see that there are ways to
    protect the data inside an object and achieve privacy.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 信息隐藏的另一个方面是方法和属性的可见性。在某些语言中，对象可以具有“public”、“private”和“protected”方法和属性。这种分类定义了对象用户的访问级别。例如，只有相同对象的方法才能访问“private”方法，而任何人都可以访问“public”方法。在JavaScript中，所有方法和属性都是“public”，但我们将看到有方法来保护对象内部的数据并实现隐私。
- en: Aggregation
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合
- en: Combining several objects into a new one is known as aggregation or composition.
    It's a powerful way to separate a problem into smaller and more manageable parts
    (divide and conquer). When a problem scope is so complex that it's impossible
    to think about it at a detailed level in its entirety, you can separate the problem
    into several smaller areas, and possibly then separate each of these into even
    smaller chunks. This allows you to think about the problem on several levels of
    abstraction.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将几个对象组合成一个新对象称为聚合或组合。这是将问题分解为更小且更易管理的部分的强大方式（分而治之）。当问题范围如此复杂以至于不可能在整体上以详细级别考虑它时，您可以将问题分解为几个较小的领域，可能然后将每个领域分解为更小的部分。这使您可以在几个抽象级别上考虑问题。
- en: Take, for example, a personal computer. It's a complex object. You cannot think
    about all the things that need to happen when you start your computer. But, you
    can abstract the problem saying that you need to initialize all the separate objects
    that your `Computer` object consists of the `Monitor` object, the `Mouse` object,
    the `Keyboard` object, and so on. Then, you can dive deeper into each of the subobjects.
    This way, you're composing complex objects by assembling reusable parts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，个人计算机。这是一个复杂的对象。您无法考虑启动计算机时需要发生的所有事情。但是，您可以抽象地说，您需要初始化“Computer”对象包含的所有单独对象，“Monitor”对象，“Mouse”对象，“Keyboard”对象等。然后，您可以深入研究每个子对象。通过组装可重用部分，您可以组合复杂对象。
- en: To use another analogy, a `Book` object can contain (aggregate) one or more
    `Author` objects, a `Publisher` object, several `Chapter` objects, a `TOC` (table
    of contents), and so on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个类比，一个“Book”对象可以包含（聚合）一个或多个“Author”对象，一个“Publisher”对象，几个“Chapter”对象，一个“TOC”（目录）等。
- en: Inheritance
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance is an elegant way to reuse existing code. For example, you can have
    a generic object, `Person`, which has properties such as `name` and `date_of_birth`,
    and which also implements the `walk`, `talk`, `sleep`, and `eat` functionality.
    Then, you figure out that you need another object called `Programmer`. You can
    reimplement all the methods and properties that a `Person` object has, but it
    will be smarter to just say that the `Programmer` object inherits a `Person` object,
    and save yourself some work. The `Programmer` object only needs to implement more
    specific functionality, such as the `writeCode` method, while reusing all of the
    `Person` object's functionality.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是重用现有代码的一种优雅方式。例如，您可以拥有一个通用对象“Person”，它具有诸如“name”和“date_of_birth”之类的属性，并且还实现了“walk”、“talk”、“sleep”和“eat”功能。然后，您发现自己需要另一个名为“Programmer”的对象。您可以重新实现“Person”对象具有的所有方法和属性，但更明智的做法是只说“Programmer”对象继承了“Person”对象，并节省一些工作。
    “Programmer”对象只需要实现更具体的功能，例如“writeCode”方法，同时重用“Person”对象的所有功能。
- en: In classical OOP, classes inherit from other classes, but in JavaScript, as
    there are no classes, objects inherit from other objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典面向对象编程中，类继承自其他类，但在JavaScript中，由于没有类，对象继承自其他对象。
- en: When an object inherits from another object, it usually adds new methods to
    the inherited ones, thus extending the old object. Often, the following phrases
    can be used interchangeably-B inherits from A and B extends A. Also, the object
    that inherits can pick one or more methods and redefine them, customizing them
    for its own needs. This way, the interface stays the same and the method name
    is the same, but when called on the new object, the method behaves differently.
    This way of redefining how an inherited method works is known as **overriding**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象从另一个对象继承时，通常会向继承的方法中添加新方法，从而扩展旧对象。通常，以下短语可以互换使用-B从A继承和B扩展A。此外，继承的对象可以选择一个或多个方法并重新定义它们，根据自己的需要进行定制。这样，接口保持不变，方法名相同，但在新对象上调用时，方法的行为会有所不同。重新定义继承方法的工作方式的这种方式被称为**重写**。
- en: Polymorphism
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: In the preceding example, a `Programmer` object inherited all of the methods
    of the parent `Person` object. This means that both objects provide a `talk` method,
    among others. Now imagine that somewhere in your code, there's a variable called
    `Bob`, and it just so happens that you don't know if `Bob` is a `Person` object
    or a `Programmer` object. You can still call the `talk` method on the `Bob` object
    and the code will work. This ability to call the same method on different objects,
    and have each of them respond in their own way, is called polymorphism.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，一个`Programmer`对象继承了父对象`Person`的所有方法。这意味着两个对象都提供了`talk`方法，以及其他方法。现在想象一下，在你的代码中的某个地方，有一个名为`Bob`的变量，碰巧你不知道`Bob`是一个`Person`对象还是一个`Programmer`对象。你仍然可以在`Bob`对象上调用`talk`方法，代码将正常工作。在不同对象上调用相同的方法，并让它们以自己的方式做出响应的能力，称为多态性。
- en: OOP summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OOP总结
- en: 'Here''s a quick table summarizing the concepts discussed so far:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个快速总结迄今为止讨论的概念的表格：
- en: '| **Feature** | **Illustrates concept** |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| **特征** | **说明概念** |'
- en: '| Bob is a man (an object). | Objects |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| Bob是一个男人（一个对象）。 | 对象 |'
- en: '| Bob''s date of birth is June 1, 1980, gender - male, and hair - black. |
    Properties |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| Bob的出生日期是1980年6月1日，性别-男性，头发-黑色。 | 属性 |'
- en: '| Bob can eat, sleep, drink, dream, talk, and calculate his own age. | Methods
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| Bob可以吃饭，睡觉，喝水，做梦，交谈，计算自己的年龄。 | 方法 |'
- en: '| Bob is an instance of the `Programmer` class. | Class (in classical OOP)
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| Bob是`Programmer`类的一个实例。 | 类（在经典OOP中） |'
- en: '| Bob is based on another object called `Programmer`. | Prototype(in prototypal
    OOP) |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Bob基于另一个名为`Programmer`的对象。 | 原型（在原型OOP中） |'
- en: '| Bob holds data, such as `birth_date`, and methods that work with the data,
    such as `calculateAge()`. | Encapsulation |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| Bob保存数据，比如`birth_date`，以及处理这些数据的方法，比如`calculateAge()`。 | 封装 |'
- en: '| You don''t need to know how the calculation method works internally. The
    object might have some private data, such as the number of days in February in
    a leap year. You don''t know, nor do you want to know. | Information hiding |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 你不需要知道计算方法是如何内部工作的。对象可能有一些私有数据，比如闰年二月的天数。你不知道，也不想知道。 | 信息隐藏 |'
- en: '| Bob is part of a `WebDevTeam` object together with Jill, a `Designer` object,
    and Jack, a `ProjectManager` object. | Aggregation and composition |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Bob是`WebDevTeam`对象的一部分，与Jill一起，她是`Designer`对象，以及Jack，他是`ProjectManager`对象。
    | 聚合和组合 |'
- en: '| `Designer`, `ProjectManager`, and `Programmer` are all based on and extend
    a `Person` object. | Inheritance |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `Designer`，`ProjectManager`和`Programmer`都基于并扩展了`Person`对象。 | 继承 |'
- en: '| You can call the methods `Bob.talk()`, `Jill.talk()`, and `Jack.talk()`,
    and they''ll all work fine, albeit producing different results. Bob will probably
    talk more about performance, Jill about beauty, and Jack about deadlines. Each
    object inherited the method talk from Person and customized it. | Polymorphism
    and method overriding |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 你可以调用`Bob.talk()`，`Jill.talk()`和`Jack.talk()`方法，它们都能正常工作，尽管产生不同的结果。Bob可能会更多地谈论性能，Jill谈论美丽，Jack谈论截止日期。每个对象都从Person继承了talk方法并对其进行了定制。
    | 多态性和方法重写 |'
- en: Setting up your training environment
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的培训环境
- en: This book takes a do-it-yourself approach when it comes to writing code, because
    I firmly believe that the best way to really learn a programming language is by
    writing code. There are no cut-and-paste-ready code downloads that you simply
    put in your pages. On the contrary, you're expected to type in code, see how it
    works, and then tweak it and play around with it. When trying out the code examples,
    you're encouraged to enter the code into a JavaScript console. Let's see how you
    go about doing this.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书在编写代码时采取了自助式的方法，因为我坚信真正学习编程语言的最佳方式是通过编写代码。没有现成的代码下载供你直接放入你的页面。相反，你应该输入代码，看看它是如何工作的，然后调整它并进行调试。在尝试代码示例时，鼓励你将代码输入JavaScript控制台。让我们看看你如何做到这一点。
- en: As a developer, you most likely already have a number of web browsers installed
    on your system, such as Firefox, Safari, Chrome, or Internet Explorer. All modern
    browsers have a JavaScript console feature that you'll use throughout the book
    to help you learn and experiment with the language. More specifically, this book
    uses WebKit's console, which is available in Safari and Chrome, but the examples
    should work in any other console.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，你很可能已经在你的系统上安装了许多网络浏览器，比如Firefox，Safari，Chrome或Internet Explorer。所有现代浏览器都有一个JavaScript控制台功能，你将在整本书中使用它来帮助你学习和实验语言。更具体地说，这本书使用的是WebKit的控制台，它在Safari和Chrome中可用，但示例应该在任何其他控制台中工作。
- en: WebKit's web inspector
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebKit的Web检查器
- en: 'This example shows how you can use the console to type in some code that swaps
    the logo on the google.com home page with an image of your choice. As you can
    see, you can test your JavaScript code live on any page:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了你如何使用控制台输入一些代码，将google.com主页上的标志替换为你选择的图像。正如你所看到的，你可以在任何页面上实时测试你的JavaScript代码：
- en: '![WebKit''s web inspector](graphics/image_01_001.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![WebKit的Web检查器](graphics/image_01_001.jpg)'
- en: In order to bring up the console in Chrome or Safari, right click anywhere on
    a page and select **Inspect Element**. The additional window that shows up is
    the Web Inspector feature. Select the **Console** tab, and you're ready to go.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Chrome或Safari中打开控制台，请在页面的任何位置右键单击，然后选择**检查元素**。弹出的附加窗口是Web检查器功能。选择**控制台**选项卡，然后您就可以开始了。
- en: You type code directly into the console, and when you press *Enter*, your code
    is executed. The return value of the code is printed in the console. The code
    is executed in the context of the currently loaded page, so, for example, if you
    type `location.href`, it will return the URL of the current page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接在控制台中输入代码，当您按下*Enter*时，您的代码将被执行。代码的返回值将打印在控制台中。代码是在当前加载的页面的上下文中执行的，因此，例如，如果您键入`location.href`，它将返回当前页面的URL。
- en: The console also has an autocomplete feature. It works in a similar way to the
    normal command-line prompt in your operating system or autocomplete feature of
    the full-fledged IDEs. If, for example, you type `docu` and hit the *Tab* or right
    arrow key, `docu` will be autocompleted to document. Then, if you type `.` (the
    dot operator), you can iterate through all the available properties and methods
    you can call on the `document` object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台还具有自动完成功能。它的工作方式类似于操作系统的普通命令行提示或完整的IDE的自动完成功能。例如，如果您键入`docu`并按*Tab*或右箭头键，`docu`将自动完成为document。然后，如果您键入`.`（点运算符），您可以遍历可以在`document`对象上调用的所有可用属性和方法。
- en: By using the up and down arrow keys, you can go through the list of already
    executed commands and bring them back in the console.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用上下箭头键，您可以浏览已执行命令的列表，并将它们带回控制台。
- en: The console gives you only one line to type in, but you can execute several
    JavaScript statements by separating them with semicolons. If you need more lines,
    you can press *Shift* + *Enter* to go to a new line without executing the result
    just yet.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台只允许您输入一行，但您可以使用分号将多个JavaScript语句分开执行。如果您需要更多行，可以按*Shift* + *Enter*换行，而不立即执行结果。
- en: JavaScriptCore on a Mac
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac上的JavaScriptCore
- en: On a Mac, you don't actually need a browser; you can explore JavaScript directly
    from your command line **Terminal** application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，您实际上不需要浏览器；您可以直接从命令行**终端**应用程序中探索JavaScript。
- en: 'If you''ve never used **Terminal**, you can simply search for it in **Spotlight
    search**. Once you''ve launched it, type the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未使用过**终端**，您可以在**Spotlight搜索**中简单搜索它。启动后，输入以下命令：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command makes an alias to the little `jsc` application that stands for
    JavaScriptCore and is part of the WebKit engine. JavaScriptCore is shipped together
    with Mac operating systems.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令创建了一个别名，指的是JavaScriptCore的小应用程序，它是WebKit引擎的一部分。JavaScriptCore与Mac操作系统一起发布。
- en: You can add the `alias` line shown previously to your `~/.profile` file so that
    `jsc` is always there when you need it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将先前显示的`alias`行添加到您的`~/.profile`文件中，这样当您需要时`jsc`就会一直在那里。
- en: 'Now, in order to start the interactive shell, you will simply type `jsc` from
    any directory. Then, you can type JavaScript expressions, and when you hit **Enter**,
    you''ll see the result of the expression. Take a look at the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了启动交互式shell，您只需从任何目录键入`jsc`。然后，您可以输入JavaScript表达式，当您按下**Enter**时，您将看到表达式的结果。看一下以下的屏幕截图：
- en: '![JavaScriptCore on a Mac](graphics/image_01_002.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![Mac上的JavaScriptCore](graphics/image_01_002.jpg)'
- en: More consoles
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多控制台
- en: All modern browsers have consoles built in. You have seen the Chrome/Safari
    console previously. In any Firefox version, you can install the Firebug extension,
    which comes with a console. Additionally, in newer Firefox releases, there's a
    console built in and accessible via the **Tools** | **Web Developer** | **Web
    Console** menu.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代浏览器都内置了控制台。您之前已经看到了Chrome/Safari控制台。在任何Firefox版本中，您都可以安装Firebug扩展，其中包含一个控制台。此外，在较新的Firefox版本中，有一个内置的控制台，可以通过**工具**
    | **Web开发人员** | **Web控制台**菜单访问。
- en: '![More consoles](graphics/image_01_003-e1482735592253.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![更多控制台](graphics/image_01_003-e1482735592253.jpg)'
- en: Internet Explorer, since version 8, has an F12 Developer Tools feature, which
    has a console in its **Script** tab.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 自Internet Explorer 8以来，它具有F12开发人员工具功能，其中包含**脚本**选项卡中的控制台。
- en: 'It''s also a good idea to familiarize yourself with `Node.js`, and you can
    start by trying out its console. Install `Node.js` from [http://nodejs.org](http://nodejs.org)
    and try the console in your command prompt (terminal):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉`Node.js`也是一个好主意，您可以通过尝试它的控制台来开始。从[http://nodejs.org](http://nodejs.org)安装`Node.js`，并在命令提示符（终端）中尝试控制台：
- en: '![More consoles](graphics/image_01_004.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![更多控制台](graphics/image_01_004.jpg)'
- en: As you can see, you can use the `Node.js` console to try out quick examples.
    But, you can also write longer shell scripts (`test.js` in the screenshot) and
    run them with the `scriptname.js` node.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您可以使用`Node.js`控制台尝试快速示例。但是，您也可以编写更长的shell脚本（屏幕截图中的`test.js`）并使用`scriptname.js`节点运行它们。
- en: 'Node REPL is a powerful development tool. When you type ''node'' on the command
    line, the REPL invokes. You can try out JavaScript on this REPL:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Node REPL是一个强大的开发工具。当您在命令行上键入'node'时，REPL会被调用。您可以在这个REPL上尝试JavaScript：
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about how JavaScript was born, and where it is
    today. You were also introduced to object-oriented programming concepts and have
    seen how JavaScript is not a class-based OO language, but a prototype-based one.
    Finally, you learned how to use your training environment-the JavaScript console.
    Now, you're ready to dive into JavaScript and learn how to use its powerful OO
    features. However, let's start from the beginning.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了JavaScript的诞生以及它的现状。您还了解了面向对象编程的概念，并看到JavaScript不是基于类的面向对象语言，而是基于原型的语言。最后，您学会了如何使用您的训练环境-
    JavaScript控制台。现在，您已经准备好深入学习JavaScript，并学习如何使用它强大的面向对象特性。不过，让我们从头开始。
- en: The next chapter will guide you through the data types in JavaScript (there
    are just a few), conditions, loops, and arrays. If you think you know these topics,
    feel free to skip the next chapter, but not before you make sure you can complete
    the few short exercises at the end of the chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将指导您了解JavaScript中的数据类型（只有几种）、条件、循环和数组。如果您认为自己已经了解这些主题，可以随意跳过下一章，但在此之前，请确保您能够完成本章末尾的几个简短练习。
