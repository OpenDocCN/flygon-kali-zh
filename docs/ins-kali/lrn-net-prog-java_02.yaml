- en: Chapter 2. Network Addressing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。网络寻址
- en: For a program to communicate with another program, it must have an address.
    In this chapter, the use of addresses, including Internet addresses, will be examined.
    We will introduce many of the basic concepts in the first part of this chapter.
    This includes the architecture of networks and the protocols that are used to
    communicate between the nodes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要使程序与另一个程序通信，它必须有一个地址。在本章中，将研究地址的使用，包括Internet地址。我们将在本章的第一部分介绍许多基本概念。这包括网络的架构和用于节点间通信的协议。
- en: 'We will address several topics, including:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论几个主题，包括：
- en: '**Network basics**: This is where essential concepts and terms are introduced'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络基础知识**：这是介绍基本概念和术语的地方'
- en: '**Using the NetworkInterface class**: This provides access to system devices'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用NetworkInterface类**：这提供了对系统设备的访问'
- en: '**URL/UII/URN**: We will discuss how these terms relate to each other'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL/UII/URN**：我们将讨论这些术语之间的关系'
- en: '**The Inet4Address and Inet6Address classes**: We will discuss how these are
    used'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inet4Address和Inet6Address类**：我们将讨论它们的使用'
- en: '**Network properties**: We will consider the properties that are configurable
    in Java'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络属性**：我们将考虑在Java中可配置的属性'
- en: This will provide you with the foundation to pursue networking in more depth.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供更深入地学习网络的基础。
- en: Networking basics
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络基础知识
- en: Networking is a broad and complex topic. In particular, a subtopic, such as
    addressing, is quite involved. We will introduce the terms and concepts that are
    commonly encountered and useful from a Java perspective.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是一个广泛而复杂的主题。特别是像寻址这样的子主题是非常复杂的。我们将介绍从Java角度常见和有用的术语和概念。
- en: Most of this discussion will focus on Java support for the Internet. A **Uniform
    Resource Locator** (**URL**) is recognized by most Internet users. However, the
    terms **Uniform Resource Identifier** (**URI**) and **Uniform Resource Name**
    (**URN**) are not recognized or understood as well as URL. We will differentiate
    between these terms and examine the Java supporting classes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分讨论将集中在Java对互联网的支持上。**统一资源定位符**（**URL**）被大多数互联网用户所认可。然而，**统一资源标识符**（**URI**）和**统一资源名称**（**URN**）这些术语并不像URL那样被认可或理解。我们将区分这些术语并研究Java支持的类。
- en: A browser user would normally enter a URL for the site that they would like
    to visit. This URL needs to be mapped to an IP address. The IP address is a unique
    number identifying the site. The URL is mapped to an IP address using a **Domain
    Name System** (**DNS**) server. This avoids a user having to remember a number
    for each site. Java uses the `InetAddress` class to access IP addresses and resources.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器用户通常会输入他们想访问的网站的URL。这个URL需要映射到一个IP地址。IP地址是标识该网站的唯一数字。使用**域名系统**（**DNS**）服务器将URL映射到IP地址。这样用户就不必记住每个网站的数字。Java使用`InetAddress`类来访问IP地址和资源。
- en: UDP and TCP are used by many applications. IP supports both of these protocols.
    The IP protocol transfers packets of information between nodes on a network. Java
    supports both the IPv4 and IPv6 protocol versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: UDP和TCP被许多应用程序使用。IP支持这两种协议。IP协议在网络节点之间传输信息包。Java支持IPv4和IPv6协议版本。
- en: 'Both UDP and TCP are layered on top of IP. Several other protocols are layered
    on top of TCP, such as HTTP. These relationships are shown in this following figure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: UDP和TCP都是在IP之上的分层。还有一些其他协议是在TCP之上的，比如HTTP。这些关系在下图中显示：
- en: '![Networking basics](img/B04915_02_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![网络基础知识](img/B04915_02_01.jpg)'
- en: When communications occur between different networks using different machines
    and operating systems, problems can occur due to differences at the hardware or
    software level. One of these issues is the characters used in URLs. The `URLEncoder`
    and `URLDecoder` classes can help address this problem, and they are discussed
    in [Chapter 9](ch09.html "Chapter 9. Network Interoperability"), *Network Interoperability*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当不同网络上的不同计算机和操作系统之间进行通信时，可能会出现硬件或软件层面的差异导致的问题。其中一个问题是URL中使用的字符。`URLEncoder`和`URLDecoder`类可以帮助解决这个问题，并且它们在[第9章](ch09.html
    "第9章。网络互操作性") *网络互操作性*中进行了讨论。
- en: The IP address assigned to a device may be either **static** or **dynamic**.
    If it is static, it will not change each time the device is rebooted. With dynamic
    addresses, the address may change each time the device is rebooted or when a network
    connection is reset.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给设备的IP地址可以是**静态**或**动态**的。如果是静态的，每次设备重启时它都不会改变。对于动态地址，每次设备重启或网络连接重置时，地址可能会改变。
- en: Static addresses are normally manually assigned by an administrator. Dynamic
    addresses are frequently assigned using the **Dynamic Host Configuration Protocol**
    (**DHCP**) running from a DHCP server. With IPv6, DHCP is not as useful due to
    the large IPv6 address space. However, DHCP is useful for tasks, such as supporting
    the generation of random addresses, which introduce more privacy within a network
    when viewed from outside of the network.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 静态地址通常由管理员手动分配。动态地址通常使用运行在DHCP服务器上的**动态主机配置协议**（**DHCP**）进行分配。对于IPv6，由于IPv6地址空间较大，DHCP并不那么有用。但是，DHCP对于支持生成随机地址等任务是有用的，这在从网络外部查看时可以增加网络内部的隐私。
- en: The **Internet Assigned Numbers** **Authority** (**IANA**) is responsible for
    the allocation of IP address space allocations. Five **Regional Internet Registries**
    (**RIRs**) allocate IP address blocks to local Internet entities that are commonly
    referred to as **Internet Service Providers** (**ISP**).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网编号分配机构**（**IANA**）负责分配IP地址空间。五个**区域互联网注册机构**（**RIRs**）向本地互联网实体分配IP地址块，这些实体通常被称为**互联网服务提供商**（**ISP**）。'
- en: 'There are several publications that detail the IP protocol:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有几本出版物详细介绍了IP协议：
- en: '**RFC 790—assigned numbers**: This specification addresses the format of network
    numbers. For example, the IPv4 A, B, and C classes are defined in this specification
    ([https://tools.ietf.org/html/rfc790](https://tools.ietf.org/html/rfc790)).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 790—分配的数字：这个规范涉及网络数字的格式。例如，IPv4的A、B和C类在这个规范中被定义（[https://tools.ietf.org/html/rfc790](https://tools.ietf.org/html/rfc790)）。
- en: '**RFC 1918—address allocation for private internets**: This specification is
    concerned with how private addresses are assigned. This allows multiple private
    addresses to be associated with a single public address ([https://tools.ietf.org/html/rfc1918](https://tools.ietf.org/html/rfc1918)).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 1918—私人互联网地址分配：这个规范涉及私人地址的分配方式。这允许将多个私人地址关联到一个公共地址上（[https://tools.ietf.org/html/rfc1918](https://tools.ietf.org/html/rfc1918)）。
- en: '**RFC 2365—administratively scoped IP multicast**: This specification defines
    the multicast address space and how it can be implemented. The mapping between
    IPv4 and IPv6 multicast address spaces is defined ([https://tools.ietf.org/html/rfc2365](https://tools.ietf.org/html/rfc2365)).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2365—管理范围的IP多播：这个规范定义了多播地址空间以及它的实现方式。它定义了IPv4和IPv6多播地址空间之间的映射关系（[https://tools.ietf.org/html/rfc2365](https://tools.ietf.org/html/rfc2365)）。
- en: '**RFC 2373—IPv6 addressing architecture**: This specification examines the
    IPv6 protocol, its format, and the various address types that are supported by
    IPv6 ([http://www.ietf.org/rfc/rfc2373.txt](http://www.ietf.org/rfc/rfc2373.txt)).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC 2373—IPv6寻址架构：这个规范研究了IPv6协议、它的格式以及IPv6支持的各种地址类型（[http://www.ietf.org/rfc/rfc2373.txt](http://www.ietf.org/rfc/rfc2373.txt)）。
- en: Many of the concepts introduced here will be illustrated with Java code whenever
    possible. So let's start with understanding networks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们将用Java代码来说明这里介绍的许多概念。所以让我们从理解网络开始。
- en: Understanding network basics
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解网络基础知识
- en: A network consists of nodes and links that are combined to create network architecture.
    A device connected to the Internet is called a **node**. A computer node is called
    a **host**. Communication between nodes is conducted along these links using protocols,
    such as HTTP, or UDP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 网络由节点和链接组成，它们组合在一起创建网络架构。连接到互联网的设备称为节点。计算机节点称为主机。节点之间的通信是通过这些链接使用协议进行的，比如HTTP或UDP。
- en: Links can either be wired, such as coaxial cable, twisted pairs, and fiber optics,
    or wireless, such as microwave, cellular, Wi-Fi, or satellite communications.
    These various links support different bandwidth and throughput to address particular
    communication needs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 链接可以是有线的，比如同轴电缆、双绞线和光纤，也可以是无线的，比如微波、蜂窝、Wi-Fi或卫星通信。这些不同的链接支持不同的带宽和吞吐量，以满足特定的通信需求。
- en: Nodes include devices, such as **Network Interface Controllers** (**NIC**),
    bridges, switches, hubs, and routers. They are all involved with transmitting
    various forms of data between computers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 节点包括设备，如网络接口控制器（NIC）、桥接器、交换机、集线器和路由器。它们都涉及在计算机之间传输各种形式的数据。
- en: The NIC has an IP address and is part of a computer. Bridges connect two network
    segments allowing a larger network to be broken down into smaller ones. Repeaters
    and hubs are used primarily to retransmit a signal boosting its strength.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: NIC有一个IP地址，并且是计算机的一部分。桥接器连接两个网络段，允许将一个较大的网络分解成较小的网络。中继器和集线器主要用于重新传输信号并增强其强度。
- en: Hubs, switches, and routers are similar to each other but differ in their complexity.
    A hub handles multiple ports and simply forwards the data to all connected ports.
    A switch will learn where to send data based on its traffic. A router can be programmed
    to manipulate and route messages. Routers are more useful in many networks, and
    most home networks use a router.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 集线器、交换机和路由器在某种程度上相似，但在复杂性上有所不同。集线器处理多个端口，并简单地将数据转发到所有连接的端口。交换机将根据流量学习数据的发送位置。路由器可以被编程来操作和路由消息。在许多网络中，路由器更有用，大多数家庭网络使用路由器。
- en: When a message is sent across the Internet from a home computer, there are several
    things going on. The computer's address is not globally unique. This requires
    that any messages sent to and from the computer be handled by a **Network Address
    Translation** (**NAT**) device that changes the address to one that can be used
    on the Internet. It allows a single IP address to be used for multiple devices
    on a network, such as a home LAN.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当一条消息从家用计算机发送到互联网时，会发生几件事。计算机的地址不是全局唯一的。这要求任何发送到计算机的消息都必须由一个**网络地址转换**（NAT）设备处理，将地址更改为可以在互联网上使用的地址。它允许一个IP地址用于网络上的多个设备，比如家庭局域网。
- en: The computer may also use a proxy server, which acts as a gateway to other networks.
    Java provides support for proxies using the `Proxy` and `ProxySelector` classes.
    We will examine their use in [Chapter 9](ch09.html "Chapter 9. Network Interoperability"),
    *Network Interoperability*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机还可以使用代理服务器，它充当其他网络的网关。Java提供了对代理的支持，使用`Proxy`和`ProxySelector`类。我们将在[第9章](ch09.html
    "第9章 网络互操作性")中研究它们的使用，*网络互操作性*。
- en: Messages are often routed through a firewall. The firewall protects the computer
    from malicious intent.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 消息通常会通过防火墙路由。防火墙保护计算机免受恶意意图。
- en: Network architectures and protocols
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络架构和协议
- en: Common network architectures include bus, star, and tree-type networks. These
    physical networks are often used to support an overlay network, which is a virtual
    network. Such a network abstracts the underlying network to create a network architecture
    supporting applications, such as peer-to-peer applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的网络架构包括总线、星型和树型网络。这些物理网络通常用于支持覆盖网络，即虚拟网络。这样的网络将底层网络抽象出来，以创建支持应用程序的网络架构，比如点对点应用程序。
- en: When two computers communicate, they use a protocol. There are many different
    protocols used at various layers of a network. We will mainly focus on HTTP, TCP,
    UDP, and IP.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当两台计算机进行通信时，它们使用协议。网络的各个层面上使用了许多不同的协议，我们将主要关注HTTP、TCP、UDP和IP。
- en: 'There are several models depicting how networks can be layered to support different
    tasks and protocols. One common model is the **Open Systems Interconnection**
    (**OSI**) model, which defines seven layers. Each layer of a network model can
    support one or more protocols. The relationships of various protocols are depicted
    in the following table:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种模型描述了如何分层支持不同的任务和协议。一个常见的模型是**开放系统互连**（**OSI**）模型，它定义了七层。网络模型的每一层都可以支持一个或多个协议。各种协议的关系在下表中描述：
- en: '| Layer | Example protocols | Purpose |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 层 | 示例协议 | 目的 |'
- en: '| --- | --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Application | HTTP, FTP, SNMP | High-level protocols supporting specialized
    operations |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 应用 | HTTP，FTP，SNMP | 支持专门操作的高级协议 |'
- en: '| Presentation | Transport layer security | Support delivery and processing
    of data for the application layer |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 表示 | 传输层安全 | 支持应用层数据的传递和处理 |'
- en: '| Session | Network file system | Managing sessions |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 会话 | 网络文件系统 | 管理会话 |'
- en: '| Transport | TCP, UDP | Manages packets of data |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 传输 | TCP，UDP | 管理数据包 |'
- en: '| Network | IP | Transfer packets |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 网络 | IP | 传输数据包 |'
- en: '| Data link | Ethernet, frame relay | Transfers data between network segments
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 数据链路 | 以太网，帧中继 | 在网络段之间传输数据 |'
- en: '| Physical | DSL, Bluetooth | Handles raw data |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 物理 | DSL，蓝牙 | 处理原始数据 |'
- en: A more complete list of protocols for the OSI layers can be found at [https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)](https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)).
    We are not able address all of these protocols and will focus on the more important
    ones that are supported by the Java SDK.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: OSI层的更完整的协议列表可以在[https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model)](https://en.wikipedia.org/wiki/List_of_network_protocols_(OSI_model))找到。我们无法涵盖所有这些协议，将重点放在Java
    SDK支持的更重要的协议上。
- en: Consider the transfer of a web page from a server to a client. As it is sent
    to a client, the data will be encapsulated in an HTTP message, which is further
    encapsulated in TCP, IP, and link-level protocol messages, each frequently containing
    a header and footer. This encapsulated set of headers is sent across the Internet
    to the destination client, where the data is extracted for each encapsulating
    header until the original HTML file is displayed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑从服务器向客户端传输网页。当数据发送到客户端时，数据将被封装在HTTP消息中，进一步封装在TCP，IP和链路级协议消息中，每个消息通常包含标题和页脚。这些封装的标题集被发送到互联网上的目标客户端，其中数据被提取以解析每个封装的标题，直到原始HTML文件被显示。
- en: Fortunately, we do not need to be familiar with the details of this process.
    Many of the classes hide how this occurs, allowing us to focus on the data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不需要熟悉这个过程的细节。许多类隐藏了这是如何发生的，使我们能够专注于数据。
- en: The protocols of the transport layer that we are interested in are TCP and UDP.
    TCP provides a more reliable communication protocol than UDP. However, UDP is
    better suited for short messages when delivery does not need to be robust. Streaming
    data often uses UDP.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感兴趣的传输层协议是TCP和UDP。TCP提供比UDP更可靠的通信协议。但是，UDP更适合在传递不需要稳健性的短消息时使用。流数据通常使用UDP。
- en: 'The differences between UDP and TCP are outlined in the following table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: UDP和TCP之间的区别在下表中概述：
- en: '| Characteristic | TCP | UDP |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 特征 | TCP | UDP |'
- en: '| --- | --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Connection | Connection-oriented | Connectionless |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 连接 | 面向连接 | 无连接 |'
- en: '| Reliability | Higher | Lower |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 可靠性 | 更高 | 更低 |'
- en: '| Order of packets | Order restored | Order potentially lost |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 数据包的顺序 | 恢复顺序 | 可能丢失顺序 |'
- en: '| Data boundaries | Packets are merged | Packets are distinct |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 数据边界 | 数据包被合并 | 数据包是独立的 |'
- en: '| Transmission time | Slower than UDP | Faster than TCP |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 传输时间 | 比UDP慢 | 比TCP快 |'
- en: '| Error checking | Yes | Yes, but no recovery options |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 错误检查 | 是 | 是，但没有恢复选项 |'
- en: '| Acknowledgement | Yes | No |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 确认 | 是 | 否 |'
- en: '| Weight | Heavy weight requiring more support | Light weight requiring less
    support |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 权重 | 需要更多支持的重量级 | 需要更少支持的轻量级 |'
- en: TCP is used for a number of protocols, such as HTTP, **Simple Mail Transfer**
    **Protocol** (**SMTP**), and **File Transfer Protocol** (**FTP**). UDP is used
    by DNS to stream media, such as movies, and for **Voice Over** **IP** (**VOIP**).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: TCP用于许多协议，如HTTP，**简单邮件传输** **协议**（**SMTP**）和**文件传输协议**（**FTP**）。UDP被DNS用于流媒体，如电影，以及**语音传输**
    **IP**（**VOIP**）。
- en: Using the NetworkInterface class
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`NetworkInterface`类
- en: The `NetworkInterface` class provides a means of accessing the devices that
    act as nodes on a network. This class also provides a means to get low-level device
    addresses. Many systems are connected to multiple networks at the same time. These
    may be wired, such as a network card, or wireless, such as for a wireless LAN
    or Bluetooth connection.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkInterface`类提供了访问充当网络节点的设备的方法。该类还提供了获取低级设备地址的方法。许多系统同时连接到多个网络。这些可能是有线的，比如网络卡，也可能是无线的，比如用于无线局域网或蓝牙连接。'
- en: The `NetworkInterface` class represents an IP address and provides information
    about this IP address. A **network interface** is the point of connection between
    a computer and a network. This frequently uses an NIC of some type. It does not
    have to have a physical manifestation, but it can be performed in software as
    done with the loopback connection (`127.0.0.1` for IPv4 and `::1` for IPv6).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkInterface`类表示一个IP地址，并提供有关此IP地址的信息。**网络接口**是计算机与网络之间的连接点。这通常使用某种类型的NIC。它不一定要有物理表现，但可以在软件中执行，就像使用环回连接（IPv4的`127.0.0.1`和IPv6的`::1`）一样。'
- en: 'The `NetworkInterface` class does not have any public constructors. Three static
    methods are provided to return an instance of the `NetworkInterface` class:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkInterface`类没有任何公共构造函数。提供了三个静态方法来返回`NetworkInterface`类的实例：'
- en: '`getByInetAddress`: This is used if the IP address is known'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getByInetAddress`：如果知道IP地址，则使用此选项'
- en: '`getByName`: This is used if the interface name is known'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getByName`：如果知道接口名称，则使用此选项'
- en: '`getNetworkInterfaces`: This provides an enumeration of available interfaces'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getNetworkInterfaces`：这提供了可用接口的枚举'
- en: 'The following code illustrates how to use the `getNetworkInterfaces` method
    to obtain and display an enumeration of the network interfaces for the current
    computer:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了如何使用`getNetworkInterfaces`方法来获取并显示当前计算机的网络接口的枚举：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'One possible output is as follows, but it has been truncated to save space:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的输出如下，但已经被截断以节省空间：
- en: '**Name Display name**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称显示名称**'
- en: '**lo Software Loopback Interface 1**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**lo软件环回接口1**'
- en: '**eth0 Microsoft Kernel Debug Network Adapter**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth0 Microsoft内核调试网络适配器**'
- en: '**eth1 Realtek PCIe FE Family Controller**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth1 Realtek PCIe FE Family Controller**'
- en: '**wlan0 Realtek RTL8188EE 802.11 b/g/n Wi-Fi Adapter**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan0 Realtek RTL8188EE 802.11 b/g/n无线适配器**'
- en: '**wlan1 Microsoft Wi-Fi Direct Virtual Adapter**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan1 Microsoft Wi-Fi直接虚拟适配器**'
- en: '**net0 Microsoft 6to4 Adapter**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**net0 Microsoft 6to4适配器**'
- en: '**net1 Teredo Tunneling Pseudo-Interface**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**net1 Teredo隧道伪接口**'
- en: '**...**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**...**'
- en: 'A `getSubInterfaces` method will return an enumeration of subinterfaces if
    any exist, as shown next. A subinterface occurs when a single physical network
    interface is divided into logical interfaces for routing purposes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在子接口，`getSubInterfaces`方法将返回一个子接口的枚举，如下所示。当单个物理网络接口被划分为逻辑接口以进行路由目的时，就会出现子接口：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Each network interface will have one or more IP addresses associated with it.
    The `getInetAddresses` method will return an `Enumeration` of these addresses.
    As shown next, the initial list of network interfaces has been augmented to display
    the IP addresses associated with them:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络接口将具有一个或多个与其关联的IP地址。`getInetAddresses`方法将返回这些地址的`Enumeration`。如下所示，初始的网络接口列表已经被扩充以显示与它们关联的IP地址：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'One possible output is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的输出如下：
- en: '**Name Display name**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称显示名称**'
- en: '**lo Software Loopback Interface 1**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**lo软件环回接口1**'
- en: '**InetAddress: /127.0.0.1**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /127.0.0.1**'
- en: '**InetAddress: /0:0:0:0:0:0:0:1**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /0:0:0:0:0:0:0:1**'
- en: '**eth0 Microsoft Kernel Debug Network Adapter**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth0 Microsoft内核调试网络适配器**'
- en: '**eth1 Realtek PCIe FE Family Controller**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth1 Realtek PCIe FE Family Controller**'
- en: '**InetAddress: /fe80:0:0:0:91d0:8e19:31f1:cb2d%eth1**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /fe80:0:0:0:91d0:8e19:31f1:cb2d%eth1**'
- en: '**wlan0 Realtek RTL8188EE 802.11 b/g/n Wi-Fi Adapter**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan0 Realtek RTL8188EE 802.11 b/g/n无线适配器**'
- en: '**InetAddress: /192.168.1.5**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /192.168.1.5**'
- en: '**InetAddress: /2002:6028:2252:0:0:0:0:1000**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /2002:6028:2252:0:0:0:0:1000**'
- en: '**InetAddress: /fe80:0:0:0:9cdb:371f:d3e9:4e2e%wlan0**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /fe80:0:0:0:9cdb:371f:d3e9:4e2e%wlan0**'
- en: '**wlan1 Microsoft Wi-Fi Direct Virtual Adapter**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan1 Microsoft Wi-Fi直接虚拟适配器**'
- en: '**InetAddress: /fe80:0:0:0:f8f6:9c75:d86d:8a22%wlan1**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /fe80:0:0:0:f8f6:9c75:d86d:8a22%wlan1**'
- en: '**net0 Microsoft 6to4 Adapter**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**net0 Microsoft 6to4适配器**'
- en: '**net1 Teredo Tunneling Pseudo-Interface**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**net1 Teredo隧道伪接口**'
- en: '**InetAddress: /2001:0:9d38:6abd:6a:37:3f57:fefa**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**InetAddress: /2001:0:9d38:6abd:6a:37:3f57:fefa**'
- en: '**...**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**...**'
- en: 'We can also use the following Java 8 technique. A stream and a lambda expression
    are used to display the IP addresses to generate the same output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下Java 8技术。使用流和lambda表达式来显示IP地址以生成相同的输出：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are numerous `InetworkAddress` methods, which reveal more details about
    the network connection. They will be discussed as we encounter them.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多`InetworkAddress`方法，可以显示有关网络连接的更多细节。我们在遇到它们时将进行讨论。
- en: Getting a MAC address
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取MAC地址
- en: A **Media Access Control** (**MAC**) address is used to identify an NIC. MAC
    addresses are usually assigned by the manufacturer of an NIC and are a part of
    its hardware. Each NIC on a node must have a unique MAC address. Theoretically,
    all NICs, regardless of their location, will have a unique MAC address. A MAC
    address consists of 48 bits that are usually written in groups of six pairs of
    hexadecimal digits. These groups are separated by either a dash or a colon.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**媒体访问控制**（**MAC**）地址用于标识NIC。MAC地址通常由NIC的制造商分配，并且是其硬件的一部分。节点上的每个NIC必须具有唯一的MAC地址。理论上，无论其位置如何，所有NIC都将具有唯一的MAC地址。MAC地址由48位组成，通常以六对十六进制数字的形式编写。这些组之间用破折号或冒号分隔。'
- en: Getting a specific MAC address
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取特定的MAC地址
- en: 'Normally, MAC addresses are not needed by the average Java programmer. However,
    they can be retrieved whenever needed. The following method returns a string containing
    the IP address and its MAC address for a `NetworkInterface` instance. The `getHardwareAddress`
    method returns an array of bytes holding the number. This array is then displayed
    as a MAC address. Most of this code-segment logic is devoted to formatting the
    output, where the tertiary operator determines whether a dash should be displayed:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，普通的Java程序员不需要MAC地址。但是，它们可以在需要时检索。以下方法返回一个包含`NetworkInterface`实例的IP地址及其MAC地址的字符串。`getHardwareAddress`方法返回一个包含数字的字节数组。然后将此数组显示为MAC地址。大部分代码段逻辑用于格式化输出，其中三元运算符确定是否应显示破折号：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The method is demonstrated in the following example where we use the localhost:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在以下示例中进行了演示，我们使用本地主机：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will vary depending on the computer used. One possible output is
    as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将根据所使用的计算机而有所不同。一个可能的输出如下：
- en: '**IP address: 192.168.1.5**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**IP地址：192.168.1.5**'
- en: '**MAC address: EC-0E-C4-37-BB-72**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**MAC地址：EC-0E-C4-37-BB-72**'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `getHardwareAddress` method will only allow you to access a localhost MAC
    address. You cannot use it to access a remote MAC address.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`getHardwareAddress`方法只允许您访问本地主机的MAC地址。您不能使用它来访问远程MAC地址。'
- en: Getting multiple MAC addresses
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取多个MAC地址
- en: 'Not all network interfaces will have MAC addresses. This is demonstrated here,
    where an enumeration is created using the `getNetworkInterfaces` method, and then
    each network interface is displayed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有网络接口都将具有MAC地址。这在这里得到了证明，使用`getNetworkInterfaces`方法创建一个枚举，然后显示每个网络接口：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One possible output is as follows. The output is truncated to save space:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的输出如下。输出已经被截断以节省空间：
- en: '**Name MAC Address**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**名称MAC地址**'
- en: '**lo ---**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**lo ---**'
- en: '**eth0 ---**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth0 ---**'
- en: '**eth1 8C-DC-D4-86-B1-05**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**eth1 8C-DC-D4-86-B1-05**'
- en: '**wlan0 EC-0E-C4-37-BB-72**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan0 EC-0E-C4-37-BB-72**'
- en: '**wlan1 EC-0E-C4-37-BB-72**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**wlan1 EC-0E-C4-37-BB-72**'
- en: '**net0 ---**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**net0 ---**'
- en: '**net1 00-00-00-00-00-00-00-E0**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**net1 00-00-00-00-00-00-00-E0**'
- en: '**net2 00-00-00-00-00-00-00-E0**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**net2 00-00-00-00-00-00-00-E0**'
- en: '**...**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**...**'
- en: 'Alternatively, we can use the following Java implementation. It converts the
    enumeration into a stream and then processes each element in the stream:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下的Java实现。它将枚举转换为流，然后处理流中的每个元素：
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The power of streams comes when we need to perform additional processing, such
    as filtering out certain interfaces, or converting the interface into a different
    data type.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 流的强大之处在于当我们需要执行额外的处理时，比如过滤掉某些接口，或者将接口转换为不同的数据类型时。
- en: Network addressing concepts
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络寻址概念
- en: There are different types of network addresses. An address serves to identify
    a node in a network. For example, the **Internetwork Packet Exchange** (**IPX**)
    protocol was an earlier protocol that was used to access nodes on a network. The
    X.25 is a protocol suite for **Wide Area Network** (**WAN**) packet switching.
    A MAC address provides a unique identifier for network interfaces at the physical
    network level. However, our primary interests are IP addresses.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的网络地址。地址用于标识网络中的节点。例如，**Internetwork Packet Exchange**（**IPX**）协议是早期用于访问网络节点的协议。X.25是用于**广域网**（**WAN**）分组交换的协议套件。MAC地址为物理网络级别的网络接口提供了唯一标识符。然而，我们的主要兴趣是IP地址。
- en: URL/URI/URN
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL/URI/URN
- en: These terms are used to refer to the name and location of an Internet resource.
    A URI identifies the name of a resource, such as a website, or a file on the Internet.
    It may contain the name of a resource and its location.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些术语用于引用互联网资源的名称和位置。URI标识资源的名称，如网站或互联网上的文件。它可能包含资源的名称和位置。
- en: 'A URL specifies where a resource is located, and how to retrieve it. A protocol
    forms the first part of the URL, and specifies how data is retrieved. URLs always
    contain protocol, such as HTTP, or FTP. For example, the following two URLs use
    different protocols. The first one uses the HTTPS protocol, and the second one
    uses the FTP protocol:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: URL指定资源的位置以及如何检索它。协议构成URL的第一部分，并指定如何检索数据。URL始终包含协议，如HTTP或FTP。例如，以下两个URL使用不同的协议。第一个使用HTTPS协议，第二个使用FTP协议：
- en: '**https://www.packtpub.com/**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**https://www.packtpub.com/**'
- en: '**ftp://speedtest.tele2.net/**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**ftp://speedtest.tele2.net/**'
- en: Java provides classes to support URIs and URLs. The discussion of these classes
    begins in the next section. Here, we will discuss URNs in more depth.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Java提供了支持URI和URL的类。这些类的讨论将在下一节开始。在这里，我们将更深入地讨论URN。
- en: A URN identifies the resource but not its location. A URN is like a city's name,
    while a URL is similar to a city's latitude and longitude. When a resource, such
    as web page, or file, is moved, the URL for the resource is no longer correct.
    The URL will need to be updated wherever it is used. A URN specifies the name
    of a resource but not its location. Some other entity, when supplied with a URN,
    will return its location. URNs are not used that extensively.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: URN标识资源但不标识其位置。URN类似于城市的名称，而URL类似于城市的纬度和经度。当资源（如网页或文件）被移动时，资源的URL不再正确。URL需要在使用的任何地方进行更新。URN指定了资源的名称，但没有指定其位置。提供URN的其他实体将返回其位置。URN的使用并不那么广泛。
- en: 'The syntax of a URN is shown next. The `<NID>` element is a namespace identifier
    and `<NSS>` is a namespace-specific string:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: URN的语法如下所示。`<NID>`元素是命名空间标识符，`<NSS>`是命名空间特定字符串：
- en: '**<URN> ::= "urn:" <NID> ":" <NSS>**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**<URN> ::= "urn:" <NID> ":" <NSS>**'
- en: 'For example, the following is a URN specifying as part of a SOAP message to
    qualify its namespace:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一个URN，作为SOAP消息的一部分来指定其命名空间：
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is used in other places, such as to identify books using their ISBN. Entering
    the following URL in a browser will bring up a reference to an EJB book:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 它也用于其他地方，比如使用它们的ISBN来识别书籍。在浏览器中输入以下URL将会引用一本EJB书籍：
- en: '**https://books.google.com/books?isbn=9781849682381**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**https://books.google.com/books?isbn=9781849682381**'
- en: '![URL/URI/URN](img/B04915_02_02.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![URL/URI/URN](img/B04915_02_02.jpg)'
- en: The syntax of a URN depends on the namespace. The IANA is responsible for the
    allocation of many Internet resources, including URN namespaces. URNs are still
    an active area of research. URLs and URNs are both URIs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: URN的语法取决于命名空间。IANA负责分配许多互联网资源，包括URN命名空间。URN仍然是一个活跃的研究领域。URL和URN都是URI。
- en: Using the URI class
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用URI类
- en: 'The general syntax of a URI consists of a scheme and a scheme-specific-part:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: URI的一般语法由方案和特定于方案的部分组成：
- en: '**[scheme:] scheme-specific-part**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**[scheme:] scheme-specific-part**'
- en: 'There are many schemes that are used with a URI, including:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多与URI一起使用的方案，包括：
- en: '**file**: This is used for files systems'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：用于文件系统'
- en: '**FTP**: This is File Transfer Protocol'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FTP**：这是文件传输协议'
- en: '**HTTP**: This is commonly used for websites'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP**：这通常用于网站'
- en: '**mailto**: This is used as part of a mail service'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mailto**：这是作为邮件服务的一部分使用的'
- en: '**urn**: This is used to identify a resource by name'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**urn**：用于通过名称标识资源'
- en: The scheme-specific-part varies by the scheme that is used. URIs can be categorized
    as absolute or relative, or as opaque or hierarchical. These distinctions are
    not of immediate interest to us here, though Java provides methods to determine
    whether a URI falls into one of these categories.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: scheme-specific-part因使用的方案而异。URI可以被分类为绝对或相对，或者是不透明或分层的。这些区别对我们来说并不是立即感兴趣，尽管Java提供了方法来确定URI是否属于这些类别之一。
- en: Creating URI instances
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建URI实例
- en: 'A URI can be created for different schemes using several constructor variations.
    The simplest way of creating a URI is to use a string argument specifying the
    URI, as shown here:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用几种构造函数变体为不同的方案创建URI。创建URI的最简单方法是使用指定URI的字符串参数，如下所示：
- en: '[PRE9]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next URI uses a fragment to access a subsection of the Wikipedia article
    dealing with the normalization of a URL:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个URI使用一个片段来访问维基百科文章的一个子部分，该文章涉及URL的规范化：
- en: '[PRE10]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can also use the following version of the constructor to specify the scheme,
    host, path, and fragment of the URI:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用构造函数的以下版本来指定URI的方案、主机、路径和片段：
- en: '[PRE11]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These latter two URIs are identical.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个后者的URI是相同的。
- en: Splitting apart a URI
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分URI
- en: 'Java uses the `URI` class to represent a URI, and it possesses several methods
    to extract parts of a URI. The more useful methods are listed in the following
    table:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用`URI`类来表示URI，并且具有几种方法来提取URI的部分。更有用的方法列在下表中：
- en: '| Method | Purpose |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getAuthority` | This is the entity responsible for resolving the URI |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `getAuthority` | 这是负责解析URI的实体 |'
- en: '| `getScheme` | The scheme used |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `getScheme` | 使用的方案 |'
- en: '| `getSchemeSpecificPart` | The scheme specific part of the URI |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `getSchemeSpecificPart` | URI的方案特定部分 |'
- en: '| `getHost` | The host |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `getHost` | 主机 |'
- en: '| `getPath` | The URI path |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `getPath` | URI路径 |'
- en: '| `getQuery` | The query, if any |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `getQuery` | 查询，如果有的话 |'
- en: '| `getFragment` | The sub-element being accessed, if used |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `getFragment` | 如果使用，这是正在访问的子元素 |'
- en: '| `getUserInfo` | User information, if available |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `getUserInfo` | 用户信息，如果可用 |'
- en: '| `normalize` | Removes unnecessary "." and ".." from the path |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` | 从路径中删除不必要的“.”和“..” |'
- en: There are also several "raw" methods, such as `getRawPath`, or `getRawFragment`,
    which return versions of a path or fragment, respectively. This includes special
    characters, such as the question mark, or character sequences beginning with an
    asterisk. There are several character categories defining these characters and
    their use, as documented at [http://docs.oracle.com/javase/8/docs/api/java/net/URI.html](http://docs.oracle.com/javase/8/docs/api/java/net/URI.html).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些“原始”方法，如`getRawPath`或`getRawFragment`，分别返回路径或片段的版本。这包括特殊字符，如问号，或以星号开头的字符序列。有几个字符类别定义了这些字符及其用法，如[http://docs.oracle.com/javase/8/docs/api/java/net/URI.html](http://docs.oracle.com/javase/8/docs/api/java/net/URI.html)中所述。
- en: 'We have developed the following helper method that is used to display URI characteristics:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开发了以下辅助方法，用于显示URI特征：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next code sequence creates a `URI` instance for the Packtpub website and
    then calls the `displayURI` method:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码序列为Packtpub网站创建了一个`URI`实例，然后调用了`displayURI`方法：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of this sequence is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个序列的输出如下：
- en: '**getAuthority: www.packtpub.com**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**getAuthority: www.packtpub.com**'
- en: '**getScheme: https**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**getScheme: https**'
- en: '**getSchemeSpecificPart: //www.packtpub.com/books/content/support**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**getSchemeSpecificPart: //www.packtpub.com/books/content/support**'
- en: '**getHost: www.packtpub.com**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**getHost: www.packtpub.com**'
- en: '**getPath: /books/content/support**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**getPath: /books/content/support**'
- en: '**getQuery: null**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**getQuery: null**'
- en: '**getFragment: null**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**getFragment: null**'
- en: '**getUserInfo: null**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**getUserInfo: null**'
- en: '**normalize: https://www.packtpub.com/books/content/support**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**normalize: https://www.packtpub.com/books/content/support**'
- en: '**http://www.packtpub.com**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**http://www.packtpub.com**'
- en: More often, these methods are used to extract relevant information for additional
    processing.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是，这些方法用于提取相关信息以进行额外处理。
- en: Using the URL class
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用URL类
- en: One of the easiest ways to connect to a site and retrieve data is through the
    `URL` class. All that you need to provide is the URL for the site and the details
    of the protocol. An instance of the `InetAddress` class will hold an IP address
    and possibly the hostname for the address.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到站点并检索数据的最简单方法之一是通过`URL`类。您只需要提供站点的URL和协议的详细信息。`InetAddress`类的实例将保存IP地址和可能的地址的主机名。
- en: The `URLConnection` class was introduced in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Network Programming"), *Getting Started with Network Programming*.
    It can also be used to provide access to an Internet resource represented by a
    URL. We will discuss this class and its use in [Chapter 4](ch04.html "Chapter 4. Client/Server
    Development"), *Client/Server Development*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`URLConnection`类是在[第1章](ch01.html "第1章. 网络编程入门")中引入的，*网络编程入门*。它也可以用于提供对URL表示的互联网资源的访问。我们将在[第4章](ch04.html
    "第4章. 客户端/服务器开发")中讨论这个类及其用法，*客户端/服务器开发*。'
- en: Creating URL instances
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建URL实例
- en: 'There are several ways of creating a URL instance. The easiest is to simply
    provide the URL of the site as the argument of the class'' constructor. This is
    illustrated here where a `URL` instance for the Packtpub website is created:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种创建URL实例的方法。最简单的方法是简单地将站点的URL作为类构造函数的参数提供。这在这里得到了说明，创建了Packtpub网站的`URL`实例：
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A URL requires a protocol to be specified. For example, the following attempt
    to create a URL will result in a **java.net.MalformedURLException: no protocol:
    www.packtpub.com** error message:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'URL需要指定一个协议。例如，尝试创建URL将导致**java.net.MalformedURLException: no protocol: www.packtpub.com**错误消息：'
- en: '[PRE15]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are several constructor variations. The following two variations will
    create the same URL. The second one uses parameters for the protocol, host, port
    number, and file:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种构造函数变体。以下两种变体将创建相同的URL。第二种使用协议、主机、端口号和文件的参数：
- en: '[PRE16]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Splitting apart a URL
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分URL
- en: 'It can be useful to know more about a URL. We may not even know what URL we
    are using if the user entered one that we need to process. There are several methods
    that support splitting a URL into its components, as summarized in the following
    table:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 了解URL的更多信息可能很有用。如果用户输入了我们需要处理的URL，我们甚至可能不知道正在使用的URL是什么。有几种方法支持将URL拆分为其组件，如下表所总结的：
- en: '| Method | Purpose |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| --- | --- |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getProtocol` | This is the name of the protocol. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `getProtocol` | 这是协议的名称。 |'
- en: '| `getHost` | This is the host name. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `getHost` | 这是主机名。 |'
- en: '| `getPort` | This is the port number. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `getPort` | 这是端口号。 |'
- en: '| `getDefaultPort` | This is the default port number for the protocol. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `getDefaultPort` | 这是协议的默认端口号。 |'
- en: '| `getFile` | This returns the result of `getPath` concatenated with the results
    of `getQuery`. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `getFile` | 这返回`getPath`连接到`getQuery`的结果。 |'
- en: '| `getPath` | This retrieves the path, if any, for the URL. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `getPath` | 如果有的话，这将检索URL的路径。 |'
- en: '| `getRef` | This is the return name of the URL''s reference. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `getRef` | 这是URL引用的返回名称。 |'
- en: '| `getQuery` | This returns the query part of the URL if present. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `getQuery` | 如果存在，这将返回URL的查询部分。 |'
- en: '| `getUserInfo` | This returns any user information associated with the URL.
    |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `getUserInfo` | 这将返回与URL关联的任何用户信息。 |'
- en: '| `getAuthority` | The authority usually consists of the server host name or
    IP address. It may include the port number. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `getAuthority` | 权威通常由服务器主机名或IP地址组成。它可能包括端口号。 |'
- en: 'We will use the following method to illustrate the methods in the preceding
    table:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下方法来说明上表中的方法：
- en: '[PRE17]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The following output demonstrates the output when several URL are used as arguments
    to this method.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出演示了将多个URL用作此方法的参数时的输出。
- en: '[PRE18]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The URL class also supports opening connections and IO streams. We demonstrated
    the `openConnection` method in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Network Programming"), *Getting Started with Network Programming*. The `getContent`
    method returns the data referenced by the URL. For example, the following applies
    the method against the Packtpub URL:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: URL类还支持打开连接和IO流。我们在[第1章](ch01.html "第1章。网络编程入门")中演示了`openConnection`方法，*网络编程入门*。`getContent`方法返回URL引用的数据。例如，以下是针对Packtpub
    URL应用该方法的示例：
- en: '[PRE19]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '**sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@5c647e05**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@5c647e05**'
- en: This suggests that we need to use an input stream to process the resource. The
    type of data depends on the URL. This topic is explored with the `URLConnection`
    class that is discussed in [Chapter 4](ch04.html "Chapter 4. Client/Server Development"),
    *Client/Server Development*.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们需要使用输入流来处理资源。数据类型取决于URL。这个主题是通过`URLConnection`类来探讨的，该类在[第4章](ch04.html
    "第4章。客户端/服务器开发")中讨论，*客户端/服务器开发*。
- en: IP addresses and the InetAddress class
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP地址和InetAddress类
- en: An IP address is a numerical value that is used to identify a node, such as
    a computer, printer, scanner, or a similar device. It is used for network interface
    addressing, and location addressing. The address, unique in its context, identifies
    the device. At the same time it constitutes a location in the network. A name
    designates an entity, such as [www.packtpub.com](http://www.packtpub.com). Its
    address, `83.166.169.231`, tells us where it is located. If we want to send or
    receive a message from a site, the message is unusually routed though one or more
    nodes.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址是用于标识节点（如计算机、打印机、扫描仪或类似设备）的数值。它用于网络接口寻址和位置寻址。在其上下文中是唯一的地址，用于标识设备。同时它构成了网络中的位置。名称指定一个实体，比如[www.packtpub.com](http://www.packtpub.com)。它的地址`83.166.169.231`告诉我们它的位置。如果我们想要从一个站点发送或接收消息，消息通常会通过一个或多个节点路由。
- en: Obtaining information about an address
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取有关地址的信息
- en: The `InetAddress` class represents an IP address. The IP protocol is a low-level
    protocol used by the UDP and TCP protocols. An IP address is either a 32-bit or
    a 128-bit unsigned number that is assigned to a device.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`InetAddress`类表示IP地址。IP协议是UDP和TCP协议使用的低级协议。IP地址是分配给设备的32位或128位无符号数。'
- en: 'IP addresses have a long history and use two major versions: IPv4 and IPv6\.
    The number 5 was assigned to the **Internet Stream Protocol**. This was an experimental
    protocol, but it was never actually referred to as version IPv5 and was not intended
    for general use.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址有着悠久的历史，并使用两个主要版本：IPv4和IPv6。数字5被分配给**Internet Stream Protocol**。这是一个实验性协议，但实际上从未被称为IPv5版本，也不打算用于一般用途。
- en: 'The `InetAddress` class'' `getAllByName` method will return the IP address
    for a given URL. In the following example, the addresses associated with [www.google.com](http://www.google.com)
    are displayed:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`InetAddress`类的`getAllByName`方法将返回给定URL的IP地址。在以下示例中，显示了与[www.google.com](http://www.google.com)相关联的地址：'
- en: '[PRE20]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'One possible output is as follows. The output will vary depending on the location
    and time because many web sites have multiple IP addresses assigned to them. In
    this case, it uses both IPv4 and IPv6 addresses:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的输出如下。输出将根据位置和时间而变化，因为许多网站分配给它们多个IP地址。在这种情况下，它同时使用IPv4和IPv6地址：
- en: '**www.google.com/74.125.21.105**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.105**'
- en: '**www.google.com/74.125.21.103**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.103**'
- en: '**www.google.com/74.125.21.147**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.147**'
- en: '**www.google.com/74.125.21.104**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.104**'
- en: '**www.google.com/74.125.21.99**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.99**'
- en: '**www.google.com/74.125.21.106**'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/74.125.21.106**'
- en: '**www.google.com/2607:f8b0:4002:c06:0:0:0:69**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/2607:f8b0:4002:c06:0:0:0:69**'
- en: 'The `InetAddress` class possesses several methods to provide access to an IP
    address. We will introduce them as they become relevant. We start with methods
    to return its canonical hostname, hostname, and host address. They are used in
    the following helper method:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`InetAddress`类拥有多个方法来提供对IP地址的访问。我们将在相关时候介绍它们。我们从返回其规范主机名、主机名和主机地址的方法开始。它们在以下辅助方法中使用：'
- en: '[PRE21]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The canonical hostname is a **Fully Qualified Domain Name** (**FQDN**). As the
    term implies, it is the full name of the host, including the top-level domain.
    The values returned by these methods depend on several factors, including the
    DNS server. The system provides information regarding entities on the network.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 规范主机名是**完全限定域名**（**FQDN**）。正如该术语所暗示的那样，它是主机的完整名称，包括顶级域。这些方法返回的值取决于多种因素，包括DNS服务器。系统提供有关网络上实体的信息。
- en: 'The following sequence uses the display method for the Packtpub website:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下序列使用Packtpub网站的显示方法：
- en: '[PRE22]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will get an output that is similar to the following one:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得类似以下内容的输出：
- en: '**www.packtpub.com/83.166.169.231**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.packtpub.com/83.166.169.231**'
- en: '**CanonicalHostName: 83.166.169.231**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**CanonicalHostName: 83.166.169.231**'
- en: '**HostAddress: 83.166.169.231**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**HostAddress: 83.166.169.231**'
- en: '**HostName: www.packtpub.com**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**HostName: www.packtpub.com**'
- en: The `InetAddress` class' `toString` method returned the hostname, followed by
    the forward slash and then the host address. The `getCanonicalHostName` method,
    in this case, returned the host address, which is not the FQDN. The method will
    do its best to return the name but may not be able to depending on the machine's
    configuration.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`InetAddress`类的`toString`方法返回主机名，后跟斜杠，然后是主机地址。在这种情况下，`getCanonicalHostName`方法返回主机地址，这不是FQDN。该方法将尽力返回名称，但根据机器的配置可能无法做到。'
- en: Address scoping issues
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 地址范围问题
- en: 'The scope of an IP address refers to the uniqueness of an IP address. Within
    a local network, such as those used in many homes and offices, the address may
    be local to that network. There are three types of scopes:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址的范围指的是IP地址的唯一性。在本地网络中，比如许多家庭和办公室使用的网络中，该地址可能是本地的。有三种范围类型：
- en: '**Link-local**: This is used within a single local subnet that is not connected
    to the Internet. No routers are present. Allocation of link-local addresses is
    done automatically when the computer does not have a static IP-address and cannot
    find a DHCP server.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链路本地**：这在单个本地子网中使用，不连接到互联网。没有路由器存在。当计算机没有静态IP地址并且找不到DHCP服务器时，链路本地地址的分配是自动完成的。'
- en: '**Site-local**: This is used when the address does not require a global prefix
    and is unique within a site. It cannot be reached directly from the Internet and
    requires a mapping service such as NAT.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点本地**：当地址不需要全局前缀并且在站点内是唯一的时使用。它无法直接从互联网访问，并且需要诸如NAT之类的映射服务。'
- en: '**Global**: As its name implies, the address is unique throughout the Internet.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**：顾名思义，该地址在整个互联网中是唯一的。'
- en: 'There are also private addresses that are discussed in the *Private addresses
    in IPv4* and *Private addresses in IPv6* sections. The `InetAddress` class supports
    several methods to identify the type of address being used. Most of these methods
    are self-explanatory, as found in the following table where MC is an abbreviation
    for multicast:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些私有地址，这些在*IPv4中的私有地址*和*IPv6中的私有地址*部分有讨论。`InetAddress`类支持几种方法来识别正在使用的地址类型。大多数这些方法都是不言自明的，如下表所示，其中MC是多播的缩写：
- en: '| Method | Scope | Description |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 范围 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `isAnyLocalAddress` | Any | This is an address that matches any local address.
    It is a wildcard address. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `isAnyLocalAddress` | 任意 | 这是与任何本地地址匹配的地址。它是一个通配地址。 |'
- en: '| `isLoopbackAddress` | Loopback | This is a loopback address. For IPv4, it
    is `127.0.0.1`, and for IPv6, it is `0:0:0:0:0:0:0:1`. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `isLoopbackAddress` | 回环 | 这是一个回环地址。对于IPv4，它是`127.0.0.1`，对于IPv6，它是`0:0:0:0:0:0:0:1`。
    |'
- en: '| `isLinkLocalAddress` | Link-local | This is a link-local address. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `isLinkLocalAddress` | 链路本地 | 这是一个链路本地地址。 |'
- en: '| `isSiteLocalAddress` | Site-local | This is local to a site. They can be
    reached by other nodes on different networks but within the same site. |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `isSiteLocalAddress` | 站点本地 | 这是站点本地的。它们可以被不同网络上的其他节点访问，但在同一站点内。 |'
- en: '| `isMulticastAddress` | MC | This is a multicast address. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `isMulticastAddress` | MC | 这是一个多播地址。 |'
- en: '| `isMCLinkLocal` | MC link-local | This is a link-local multicast address.
    |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `isMCLinkLocal` | MC链路本地 | 这是一个链路本地的多播地址。 |'
- en: '| `isMCNodeLocal` | MC node local | This is a node-local multicast address.
    |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| `isMCNodeLocal` | MC节点本地 | 这是一个节点本地的多播地址。 |'
- en: '| `isMCSiteLocal` | MC site-local | This is a site-local multicast address.
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `isMCSiteLocal` | MC站点本地 | 这是一个站点本地的多播地址。 |'
- en: '| `isMCOrgLocal` | MC org local | This is an organization-local multicast address.
    |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `isMCOrgLocal` | MC组织本地 | 这是一个组织本地的多播地址。 |'
- en: '| `isMCGlobal` | MC global | This is a global multicast address. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `isMCGlobal` | MC全局 | 这是一个全局多播地址。 |'
- en: 'The addresses types and ranges used are summarized in the following table for
    IPv4 and IPv6:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 所使用的地址类型和范围在以下表格中总结了IPv4和IPv6：
- en: '| Address type | IPv4 | IPv6 |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 地址类型 | IPv4 | IPv6 |'
- en: '| --- | --- | --- |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Multicast | `224.0.0.0` to `239.255.255.25` | Begins with byte `FF` |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 多播 | `224.0.0.0` 到 `239.255.255.25` | 以字节`FF`开头 |'
- en: '| MC global | `224.0.1.0` to `238.255.255.255` | `FF0E` or `FF1E` |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| MC全局 | `224.0.1.0` 到 `238.255.255.255` | `FF0E` 或 `FF1E` |'
- en: '| Org MC | `239.192.0.0/14` | `FF08` or `FF18` |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| Org MC | `239.192.0.0/14` | `FF08` 或 `FF18` |'
- en: '| MC site-local | N/A | `FF05` or `FF15` |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| MC站点本地 | N/A | `FF05` 或 `FF15` |'
- en: '| MC link-local | `224.0.0.0` | `FF02` or `FF12` |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| MC链路本地 | `224.0.0.0` | `FF02` 或 `FF12` |'
- en: '| MC node local | `127.0.0.0` | `FF01` or `FF11` |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| MC节点本地 | `127.0.0.0` | `FF01` 或 `FF11` |'
- en: '| Private | `10.0.0.0` to `10.255.255.255``172.16.0.0` to `172.31.255.255``192.168.0.0`
    to `192.168.255.255` | `fd00::/8` |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | `10.0.0.0` 到 `10.255.255.255``172.16.0.0` 到 `172.31.255.255``192.168.0.0`
    到 `192.168.255.255` | `fd00::/8` |'
- en: Testing reachability
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试可达性
- en: 'The `InetAddress` class'' `isReachable` method will attempt to determine whether
    an address can be found. If it can, the method returns `true`. The following example
    demonstrates this method. The `getAllByName` method returns an array of an `InetAddress`
    instance available for the URL. The `isReachable` method uses an integer argument
    to specify how long to wait in milliseconds at a maximum before deciding that
    the address is not reachable:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`InetAddress`类的`isReachable`方法将尝试确定是否可以找到地址。如果可以，该方法将返回`true`。以下示例演示了这种方法。`getAllByName`方法返回一个可用于URL的`InetAddress`实例数组。`isReachable`方法使用整数参数指定在决定地址不可访问之前最长等待时间（以毫秒为单位）：'
- en: '[PRE23]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The URL [www.packtpub.com](http://www.packtpub.com) was reachable, as shown
    here:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: URL [www.packtpub.com](http://www.packtpub.com) 是可访问的，如下所示：
- en: '**www.packtpub.com/83.166.169.231 is reachable**'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.packtpub.com/83.166.169.231 可访问**'
- en: 'However, [www.google.com](http://www.google.com) was not:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[www.google.com](http://www.google.com)不是：
- en: '**www.google.com/173.194.121.52 is not reachable**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.121.52 无法访问**'
- en: '**www.google.com/173.194.121.51 is not reachable**'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.121.51 无法访问**'
- en: '**www.google.com/2607:f8b0:4004:809:0:0:0:1014 is not reachable**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/2607:f8b0:4004:809:0:0:0:1014 无法访问**'
- en: 'Your results may vary. The `isReachable` method will do its best to determine
    whether an address is reachable or not. However, its success depends on more than
    simply whether the address exists. Reasons for failure can include: the server
    may be down, network response time was too long, or a firewall may be blocking
    a site. The operating system and JVM settings can also impact how well the method
    works.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 您的结果可能会有所不同。`isReachable`方法将尽最大努力确定地址是否可达。但是，它的成功取决于更多的因素，而不仅仅是地址是否存在。失败的原因可能包括：服务器可能已关闭，网络响应时间过长，或者防火墙可能正在阻止某个站点。操作系统和JVM设置也会影响该方法的运行效果。
- en: An alternative to this method is to use the `RunTime` class' `exec` method to
    execute a `ping` command against the URL. However, this is not portable and may
    still suffer from some of the same factors that impact the success of the `isReachable`
    method.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的替代方法是使用`RunTime`类的`exec`方法来执行针对URL的`ping`命令。然而，这并不是可移植的，可能仍然受到影响`isReachable`方法的一些因素的影响。
- en: Introducing the Inet4Address
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Inet4Address
- en: This address consists of 32 bits, permitting up to 4,294,967,296 (232) addresses.
    The human readable form of the address consists of four decimal numbers (8 bits),
    each ranging from 0 to 255\. Some of the addresses have been reserved for private
    networks and multicast addresses.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4地址由32位组成，允许最多4,294,967,296（232）个地址。地址的人类可读形式由四个十进制数（8位）组成，每个数的范围是0到255。一些地址已被保留用于私人网络和多播地址。
- en: 'Early on in the use of IPv4, the first **octet** (8 bit unit) represented a
    network number (also called the network prefix or network block), and the remaining
    bits represented a **rest** field (host identifier). Later, three classes were
    used to partition the addresses: A, B, and C. These system have largely fallen
    into disuse and have been replaced by the **Classless Inter-Domain Routing** (**CIDR**).
    This routing approach allocates addresses on bit boundaries, providing more flexibility.
    This scheme is called classless in contrast to the earlier class-full systems.
    In IPv6, 64-bit network identifiers are used.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPv4的早期使用中，第一个**八位组**代表网络号（也称为网络前缀或网络块），其余的位代表**剩余**字段（主机标识符）。后来，使用三个类来分配地址：A、B和C。这些系统已经大部分不再使用，并已被**无类域间路由**（**CIDR**）所取代。这种路由方法在位边界上分配地址，提供更大的灵活性。这种方案被称为无类，与早期的有类系统相对。在IPv6中，使用64位网络标识符。
- en: Private addresses in IPv4
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPv4中的私有地址
- en: Private networks do not necessarily need global access to the Internet. This
    results in a series of addresses being allocated for these private networks.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 私人网络不一定需要全局访问互联网。这导致一系列地址被分配给这些私人网络。
- en: '| Range | Number of bits | Number of addresses |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | 位数 | 地址数量 |'
- en: '| --- | --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `10.0.0.0` to `10.255.255.255` | 24-bit | 16,777,216 |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `10.0.0.0`到`10.255.255.255` | 24位 | 16,777,216 |'
- en: '| `172.16.0.0` to `172.31.255.255` | 20-bit | 1,048,576 |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `172.16.0.0`到`172.31.255.255` | 20位 | 1,048,576 |'
- en: '| `192.168.0.0` to `192.168.255.255` | 16-bit | 65,536 |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `192.168.0.0`到`192.168.255.255` | 16位 | 65,536 |'
- en: You may recognize that the last set of addresses is used by the home network.
    A private network often interfaces with the Internet using NAT. This technique
    maps a local IP address to one accessible on the Internet. It was originally introduced
    to ease the IPv4 address shortage.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，最后一组地址是由家庭网络使用的。私人网络通常使用NAT与互联网进行接口。这种技术将本地IP地址映射到互联网上可访问的IP地址。最初是为了缓解IPv4地址短缺而引入的。
- en: IPv4 address types
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPv4地址类型
- en: 'There are three address types that are supported in IPv4:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4中支持的三种地址类型：
- en: '**Unicast**: This address is used to identify a single node in a network'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单播**：这个地址用于标识网络中的单个节点。'
- en: '**Multicast**: This address corresponds to a group of network interfaces. Members
    will join a group and a message is sent to all members of the group'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多播**：这个地址对应于一组网络接口。成员将加入一个组，消息将发送给组的所有成员。'
- en: '**Broadcast**: This will send a message to all network interfaces on a subnet'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广播**：这将向子网上的所有网络接口发送消息。'
- en: The `Inet4Address` class supports the IPv4 protocol. We will examine this class
    in more depth next.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`Inet4Address`类支持IPv4协议。我们将在接下来更深入地研究这个类。'
- en: The Inet4Address class
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Inet4Address类
- en: 'The `Inet4Address` class is derived from the `InetAddress` class. As a derived
    class, it does not override many of the `InetAddress` class'' methods. For example,
    to obtain an `InetAddress` instance, we can use the `getByName` method of either
    class, as shown here:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`Inet4Address`类是从`InetAddress`类派生出来的。作为一个派生类，它并没有覆盖`InetAddress`类的许多方法。例如，要获取一个`InetAddress`实例，我们可以使用任一类的`getByName`方法，如下所示：'
- en: '[PRE24]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In either case, the address needs to be cast because the base class method is
    used in either case. The `Inet4Address` class does not add any new methods above
    and beyond that of the `InetAddress` class.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在任一情况下，地址都需要转换，因为基类方法在任一情况下都被使用。`Inet4Address`类没有添加任何超出`InetAddress`类的新方法。
- en: Special IPv4 addresses
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊的IPv4地址
- en: 'There are several special IPv4 addresses, including these two:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个特殊的IPv4地址，包括以下两个：
- en: '**0.0.0.0**: This is called an unspecified IPv4 address (wildcard address)
    and is normally used when a network interface does not have a IP address and is
    attempting to obtain one using DHCP.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0.0.0.0**：这被称为未指定的IPv4地址（通配符地址），通常在网络接口没有IP地址并且正在尝试使用DHCP获取IP地址时使用。'
- en: '**127.0.0.1**: This is known as the loopback address. It provides a convenient
    way to send oneself a message, often for testing purposes.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**127.0.0.1**：这被称为环回地址。它提供了一种方便的方式来给自己发送消息，通常用于测试目的。'
- en: 'The `isAnyLocalAddress` method will return `true` if the address is a wildcard
    address. This method is demonstrated here, where it returns `true`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果地址是通配符地址，`isAnyLocalAddress`方法将返回`true`。该方法在这里进行了演示，它返回`true`：
- en: '[PRE25]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `isLoopbackAddress` method is shown next and will return `true`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来显示`isLoopbackAddress`方法，并将返回`true`：
- en: '[PRE26]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We will use this frequently to test servers in subsequent chapters.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将经常使用这个来测试后续章节中的服务器。
- en: In addition to these, other special addresses include those used for protocol
    assignments, IPv6 to IPv4 relay, and testing purposes. More details about these
    and other special addresses can be found at [https://en.wikipedia.org/wiki/IPv4#Special-use_addresses](https://en.wikipedia.org/wiki/IPv4#Special-use_addresses).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，其他特殊地址还包括用于协议分配、IPv6到IPv4中继和测试目的的地址。有关这些和其他特殊地址的更多详细信息，请参阅[https://en.wikipedia.org/wiki/IPv4#Special-use_addresses](https://en.wikipedia.org/wiki/IPv4#Special-use_addresses)。
- en: Introducing the Inet6Address class
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Inet6Address类
- en: 'IPv6 addresses use 128 bits (16 octets). This permits up to 2128 addresses.
    An IPv6 address is written as a series of eight groups, with 4 hexadecimal numbers
    each, separated by colons. The digits are case insensitive. For example, the IPv6
    address for [www.google.com](http://www.google.com) is as follows:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址使用128位（16个八位字节）。这允许最多2128个地址。IPv6地址写为一系列由冒号分隔的八个组，每个组有4个十六进制数字。数字大小写不敏感。例如，[www.google.com](http://www.google.com)的IPv6地址如下：
- en: '**2607:f8b0:4002:0c08:0000:0000:0000:0067**'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**2607:f8b0:4002:0c08:0000:0000:0000:0067**'
- en: 'An IPv6 address can be simplified in several ways. Leading zeroes in a group
    can be removed. The previous example can be rewritten as:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6地址可以通过几种方式简化。组中的前导零可以被移除。前面的例子可以重写为：
- en: '**2607:f8b0:4002:c08:0:0:0:67**'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**2607:f8b0:4002:c08:0:0:0:67**'
- en: 'Consecutive groups of zeroes can be replaced with `::`, as shown here:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 连续的零组可以用`::`替换，如下所示：
- en: '**2607:f8b0:4002:c08::67**'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '**2607:f8b0:4002:c08::67**'
- en: 'IPv6 supports three addressing types:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6支持三种寻址类型：
- en: '**Unicast**: This specifies a single network interface.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单播**：这指定一个单一的网络接口。'
- en: '**Anycast**: This type of address is assigned to a group of interfaces. When
    a packet is sent to this group, only one member of the group receives the packet,
    often the one that is closest.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Anycast**：这种类型的地址分配给一组接口。当数据包发送到该组时，只有组中的一个成员接收数据包，通常是最近的成员。'
- en: '**Multicast**: This sends a packet to all members of a group.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Multicast**：这将数据包发送到组中的所有成员。'
- en: This protocol does not support broadcast addressing. There is much more to IPv6
    than an increase in network size. It includes several improvements, such as easier
    administration, more efficient routing capabilities, simple header formats, and
    the elimination of the need for NAT.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 该协议不支持广播寻址。IPv6比网络规模的增加要复杂得多。它包括几个改进，如更容易的管理、更有效的路由能力、简单的报头格式以及消除了对NAT的需求。
- en: Private addresses in IPv6
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPv6中的私有地址
- en: Private address space is available in IPv6\. Originally, it used site-local
    addresses using a block with a prefix of fec0::/10\. However, this has been dropped
    due to problems with its definition, and it was replaced with **Unique Local**
    (**UL**) addresses using the address block `fc00::/7`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6中有私有地址空间。最初，它使用具有fec0::/10前缀的站点本地地址。然而，由于其定义存在问题，这已被取消，并用具有地址块`fc00::/7`的**唯一本地**（**UL**）地址替换。
- en: These addresses can be generated by anyone and do not need to be coordinated.
    However, they are not necessarily globally unique. Other private networks can
    use the same addresses. They cannot be assigned using a global DNS server and
    are only routable in the local address space.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这些地址可以由任何人生成，无需协调。但它们不一定是全局唯一的。其他私人网络可以使用相同的地址。它们不能使用全局DNS服务器分配，并且只能在本地地址空间中进行路由。
- en: The Inet6Address class
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Inet6Address类
- en: 'In general, using the `Inet6Address` class is not necessary unless you are
    developing an IPv6-only application. Most networking operations are handled transparently.
    The `Inet6Address` class is derived from the `InetAddress` class. The `Inet6Address`
    class''s `getByName` method uses its base class, the `InetAddrress` class''s `getAllByName`
    method, to return the first address that it finds, as shown next. This might not
    be an IPv6 address:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，除非您正在开发一个仅支持IPv6的应用程序，否则不需要使用`Inet6Address`类。大多数网络操作都是透明处理的。`Inet6Address`类是从`InetAddress`类派生的。`Inet6Address`类的`getByName`方法使用其基类`InetAddrress`类的`getAllByName`方法，返回它找到的第一个地址，如下所示。这可能不是一个IPv6地址：
- en: '[PRE27]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For some of these examples to work correctly, your router may need to be configured
    to support an IPv6 Internet connection.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些示例中的一些正常工作，您的路由器可能需要配置为支持IPv6互联网连接。
- en: The `Inet6Address` class added only one method above and beyond that of the
    `InetAddress` class. This is the `isIPv4CompatibleAddress` method that is discussed
    in the *Using IPv4-compatible IPv6 addresses* section.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`Inet6Address`类仅添加了一个方法，超出了`InetAddress`类的方法。这就是`isIPv4CompatibleAddress`方法，它在*使用IPv4兼容IPv6地址*部分中讨论。'
- en: Special IPv6 addresses
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊的IPv6地址
- en: 'There is a block of addresses consisting of 64 network prefixes: `2001:0000::/29`
    through `2001:01f8::/29`. These are used for special needs. Three have been assigned
    by IANA:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个由64个网络前缀组成的地址块：`2001:0000::/29`到`2001:01f8::/29`。这些用于特殊需求。其中三个已被IANA分配：
- en: '`2001::/32`: This is the teredo tunneling, which is a transition technology
    from IPv4'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2001::/32`：这是teredo隧道技术，是从IPv4过渡的一种技术'
- en: '`2001:2::/48`: This is used for benchmarking purposes'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2001:2::/48`：这用于基准测试'
- en: '`2001:20::/28`: This is used for cryptographic hash identifiers'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2001:20::/28`：这用于加密哈希标识符'
- en: Most developers will not need to work with these addresses.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员不需要处理这些地址。
- en: Testing for the IP address type
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试IP地址类型
- en: 'Normally, we are not concerned with whether the IP address is IPv4 or IPv6\.
    The differences between the two are hidden beneath the various protocol levels.
    When you do need to know the difference, then you can use either of the two approaches.
    The `getAddress` method returns a byte array. You check the size of the byte array
    to determine if it is IPv4 or IPv6\. Or you can use the `instanceOf` method. These
    two approaches are shown here:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们不关心IP地址是IPv4还是IPv6。这两者之间的差异隐藏在各种协议级别之下。当您确实需要知道区别时，您可以使用这两种方法之一。`getAddress`方法返回一个字节数组。您可以检查字节数组的大小来确定它是IPv4还是IPv6。或者您可以使用`instanceOf`方法。这两种方法如下所示：
- en: '[PRE28]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using IPv4-compatible IPv6 addresses
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用IPv4兼容IPv6地址
- en: 'The dotted quad notation is a way of expressing an IPv4 address using IPv6\.
    The `::ffff:` prefix is placed in front of either the IPv4 address or its equivalent
    in hexadecimal. For example, the hexadecimal equivalent of the IPv4 address `74.125.21.105`
    is `4a7d1569`. Both represent a 32 bit quantity. Thus, any of the following three
    addresses represent the same website:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 点分十进制表示法是一种使用IPv6表示IPv4地址的方法。`::ffff:`前缀放在IPv4地址或其十六进制等价物的前面。例如，IPv4地址`74.125.21.105`的十六进制等价物是`4a7d1569`。两者都代表32位数量。因此，以下三个地址中的任何一个都代表相同的网站：
- en: '[PRE29]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we used these addresses with the `displayInetAddressInformation` method,
    the output will be identical, as shown here:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`displayInetAddressInformation`方法来处理这些地址，输出将是相同的，如下所示：
- en: '**/74.125.21.105**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**/74.125.21.105**'
- en: '**CanonicalHostName: yv-in-f105.1e100.net**'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**规范主机名：yv-in-f105.1e100.net**'
- en: '**HostName: yv-in-f105.1e100.net**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名：yv-in-f105.1e100.net
- en: '**HostAddress: 74.125.21.105**'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**主机地址：74.125.21.105**'
- en: '**CanonicalHostName: 83.166.169.231**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**规范主机名：83.166.169.231**'
- en: These are referred to as IPv4-compatible IPv6 addresses.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这些被称为IPv4兼容IPv6地址。
- en: The `Inet6Address` class possesses an `isIPv4CompatibleAddress` method. The
    method returns `true` if the address is merely an IPv4 address that is placed
    inside of an IPv6 address. When this happens, all but the last four bytes are
    zero.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`Inet6Address`类具有`isIPv4CompatibleAddress`方法。如果地址仅仅是放置在IPv6地址内的IPv4地址，则该方法返回`true`。当这种情况发生时，除了最后四个字节外，其他都是零。'
- en: 'The following example illustrates how this method can be used. Each address
    associated with [www.google.com](http://www.google.com) is tested to determine
    whether it is an IPv4 or IPv6 address. If it is an IPv6 address, then the method
    is applied to it:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用此方法。测试与[www.google.com](http://www.google.com)相关的每个地址，以确定它是IPv4地址还是IPv6地址。如果它是IPv6地址，则对其应用该方法：
- en: '[PRE30]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output depends on the servers available. The following is one possible
    output:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 输出取决于可用的服务器。以下是一个可能的输出：
- en: '**www.google.com/173.194.46.48 is not a IPv4 Compatible Address**'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.46.48不是IPv4兼容地址**'
- en: '**www.google.com/173.194.46.51 is not a IPv4 Compatible Address**'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.46.51不是IPv4兼容地址**'
- en: '**www.google.com/173.194.46.49 is not a IPv4 Compatible Address**'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.46.49不是IPv4兼容地址**'
- en: '**www.google.com/173.194.46.52 is not a IPv4 Compatible Address**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.46.52不是IPv4兼容地址**'
- en: '**www.google.com/173.194.46.50 is not a IPv4 Compatible Address**'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/173.194.46.50不是IPv4兼容地址**'
- en: '**www.google.com/2607:f8b0:4009:80b:0:0:0:2004 is not a IPv4 Compatible Address**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '**www.google.com/2607:f8b0:4009:80b:0:0:0:2004不是IPv4兼容地址**'
- en: 'An alternative Java 8 solution is as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个Java 8解决方案如下：
- en: '[PRE31]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Controlling network properties
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制网络属性
- en: 'On many operating systems, the default behavior is to use IPv4 instead of IPv6\.
    The following JVM options can be used when executing a Java application to control
    this behavior. The first setting is as follows:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多操作系统上，默认行为是使用IPv4而不是IPv6。在执行Java应用程序时，可以使用以下JVM选项来控制此行为。第一个设置如下：
- en: '[PRE32]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is the default setting. If IPv6 is available, then the application can
    use either IPv4 or IPv6 hosts. If set to `true`, it will use IPv4 hosts. IPv6
    hosts will not be used.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认设置。如果IPv6可用，则应用程序可以使用IPv4或IPv6主机。如果设置为`true`，它将使用IPv4主机。将不使用IPv6主机。
- en: 'The second setting deals with the type of addresses used:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个设置涉及使用的地址类型：
- en: '[PRE33]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is the default setting. If IPv6 is available, it will prefer IPv4 addresses
    over IPv6 addresses. This is preferred because it allows backward compatibility
    for IPv4 services. If set to `true`, it will use IPv6 addresses whenever possible.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认设置。如果IPv6可用，它将优先使用IPv4地址而不是IPv6地址。这是首选的，因为它允许IPv4服务的向后兼容性。如果设置为`true`，它将在可能的情况下使用IPv6地址。
- en: Summary
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided an overview of the basic network terms and concepts. Networking
    is a large and complicated subject. In this chapter, we focused on those concepts
    that are relevant to networking in Java.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了基本网络术语和概念。网络是一个庞大而复杂的主题。在本章中，我们重点关注了与Java中的网络相关的概念。
- en: The `NetworkInterface` class was introduced. This class provides low-level access
    to the devices connected to a computer that support networking. We also learned
    how to obtain the MAC address for a device.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 引入了`NetworkInterface`类。该类提供对连接到支持网络的计算机的设备的低级访问。我们还学习了如何获取设备的MAC地址。
- en: We focused on the support that Java provides to access the Internet. The foundation
    IP protocol was detailed. This protocol is supported by the `InetAddress` class.
    Java uses the `Inet4Address` and `Inet6Address` classes to support IPv4 and IPv6
    addresses, respectively.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关注Java提供的访问互联网的支持。详细介绍了基础IP协议。该协议由`InetAddress`类支持。Java使用`Inet4Address`和`Inet6Address`类分别支持IPv4和IPv6地址。
- en: We also illustrated the use of the `URI` and `URL` classes. These classes possess
    several methods that allow us to obtain more information about specific instances.
    We can use these methods to split the URI or URL into parts for further processing.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还说明了`URI`和`URL`类的用法。这些类具有几种方法，允许我们获取有关特定实例的更多信息。我们可以使用这些方法将URI或URL分割成部分以进行进一步处理。
- en: We also discussed how to control some network connection properties. We will
    cover this topic in more detail in later chapters.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了如何控制一些网络连接属性。我们将在后面的章节中更详细地介绍这个主题。
- en: With this foundation in place, we can now move forward and address the use of
    the NIO packages to support networking. NIO is buffer oriented and supports nonblocking
    IO. In addition, it provides better performance for many IO operations.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个基础，我们现在可以继续讨论使用NIO包来支持网络。NIO是面向缓冲区的，支持非阻塞IO。此外，它提供了更好的性能，适用于许多IO操作。
