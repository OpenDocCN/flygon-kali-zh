- en: Chapter 7. ECMAScript 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。ECMAScript 6
- en: So far, we have taken a detailed tour of the JavaScript programming language.
    I am sure that you must have gained significant insight into the core of the language.
    What we saw so far was as per the **ECMAScript** **5** (**ES5**) standards. **ECMAScript
    6** (**ES6**) or **ECMAScript 2015** (**ES2015**) is the latest version of the
    ECMAScript standard. This standard is evolving and the last round of modifications
    was done in June, 2015\. ES2015 is significant in its scope and the recommendations
    of ES2015 are being implemented in most JavaScript engines. This is great news.
    ES6 introduces a huge number of features that add syntactic forms and helpers
    that enrich the language significantly. The pace at which ECMAScript standards
    keep evolving makes it a bit difficult for browsers and JavaScript engines to
    support new features. It is also a practical reality that most programmers have
    to write code that can be supported by older browsers. The notorious Internet
    Explorer 6 was once the most widely used browser in the world. To make sure that
    your code is compatible with the most number of browsers is a daunting task. So,
    while you want to jump to the next set of awesome ES6 features, you will have
    to consider the fact that several ES6 features may not be supported by the most
    popular of browsers or JavaScript frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对 JavaScript 编程语言进行了详细的介绍。我相信你一定对这门语言的核心有了重要的见解。到目前为止，我们所看到的都是根据 **ECMAScript**
    **5** (**ES5**) 标准。**ECMAScript 6** (**ES6**) 或 **ECMAScript 2015** (**ES2015**)
    是 ECMAScript 标准的最新版本。这个标准正在不断发展，最后一轮修改是在 2015 年 6 月进行的。ES2015 在其范围和推荐方面是非常重要的，ES2015
    的推荐正在被大多数 JavaScript 引擎实现。这是个好消息。ES6 引入了大量的功能，这些功能增加了语言的语法形式和辅助功能。ECMAScript 标准不断发展的速度使得浏览器和
    JavaScript 引擎难以支持新功能。大多数程序员不得不编写能够被旧版浏览器支持的代码，这也是一个实际的现实。臭名昭著的 Internet Explorer
    6 曾经是世界上使用最广泛的浏览器。确保你的代码与最多的浏览器兼容是一项艰巨的任务。因此，虽然你想要使用下一组令人惊叹的 ES6 功能，你必须考虑到一些 ES6
    功能可能不被最流行的浏览器或 JavaScript 框架支持。
- en: This may look like a dire scenario, but things are not that dark. **Node.js**
    uses the latest version of the V8 engine that supports majority of ES6 features.
    Facebook's **React** also supports them. Mozilla Firefox and Google Chrome are
    two of the most used browsers today and they support a majority of ES6 features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是一个可怕的情景，但事情并不那么黑暗。**Node.js** 使用支持大多数 ES6 功能的最新版本的 V8 引擎。Facebook 的
    **React** 也支持它们。Mozilla Firefox 和 Google Chrome 是今天使用最广泛的两种浏览器，它们支持大多数 ES6 功能。
- en: To avoid such pitfalls and unpredictability, certain solutions have been proposed.
    The most useful among these are polyfills/shims and transpilers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种陷阱和不可预测性，已经提出了一些解决方案。其中最有用的是 polyfills/shims 和 transpilers。
- en: Shims or polyfills
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shims 或 polyfills
- en: Polyfills (also known as shims) are patterns to define behavior from a new version
    in a compatible form supported by an older version of the environment. There's
    a great collection of ES6 shims called **ES6 shim** ([https://github.com/paulmillr/es6-shim/](https://github.com/paulmillr/es6-shim/));
    I would highly recommend a study of these shims. From the ES6 shim collection,
    consider the following example of a shim.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Polyfills（也称为 shims）是一种模式，用于以兼容旧版本环境支持的形式定义新版本的行为。有一个名为 **ES6 shim** 的伟大的 ES6
    shims 集合（[https://github.com/paulmillr/es6-shim/](https://github.com/paulmillr/es6-shim/)）；我强烈推荐学习这些
    shims。从 ES6 shim 集合中，考虑以下 shim 的示例。
- en: 'The `Number.isFinite()` method of the ECMAScript 2015 (ES6) standard determines
    whether the passed value is a finite number. The equivalent shim for it would
    look something as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 2015 (ES6) 标准的 `Number.isFinite()` 方法确定传递的值是否为有限数。它的等效 shim 如下所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The shim first checks if the `Number.isFinite()` method is available; if not,
    it *fills* it up with an implementation. This is a pretty nifty technique to fill
    in gaps in specifications. Shims are constantly upgraded with newer features and,
    hence, it is a sound strategy to keep the most updated shims in your project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Shim 首先检查 `Number.isFinite()` 方法是否可用；如果不可用，它会用一个实现来填充它。这是一种非常巧妙的技术，可以填补规范中的空白。Shims
    不断升级，加入新功能，因此在项目中保持最新的 shims 是一个明智的策略。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `endsWith()` polyfill is described in detail at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith).
    `String.endsWith()` is part of ES6 but can be polyfilled easily for pre-ES6 environments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`endsWith()` polyfill 的详细描述在 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)。`String.endsWith()`
    是 ES6 的一部分，但可以在 ES6 之前的环境中轻松进行 polyfill。'
- en: Shims, however, cannot polyfill syntactical changes. For this, we can consider
    transpilers as an option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，shims 无法填充语法变化。为此，我们可以考虑将 transpilers 作为一个选项。
- en: Transpilers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Transpilers
- en: Transpiling is a technique that combines both compilation and transformation.
    The idea is to write ES6-compatible code and use a tool that transpiles this code
    into a valid and equivalent ES5 code. We will be looking at the most complete
    and popular transpiler for ES6 called **Babel** ([https://babeljs.io/](https://babeljs.io/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Transpiling 是一种结合了编译和转换的技术。其思想是编写兼容 ES6 的代码，并使用一个工具将这些代码转换为有效且等效的 ES5 代码。我们将看一下
    ES6 最完整和最流行的 transpiler，名为 **Babel**（[https://babeljs.io/](https://babeljs.io/)）。
- en: Babel can be used in various ways. You can install it as a node module and invoke
    it from the command line or import it as a script in your web page. Babel's setup
    is exhaustive and well-documented at [https://babeljs.io/docs/setup/](https://babeljs.io/docs/setup/).
    Babel also has a great **Read-Eval-Print-Loop** (**REPL**). We will Babel REPL
    for most of the examples in this chapter. An in-depth understanding of various
    ways in which Babel can be used is out of the scope of this module. However, I
    would urge you to start using Babel as part of your development workflow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Babel可以以各种方式使用。您可以将其安装为一个节点模块，并从命令行调用它，或者将其作为脚本导入到您的网页中。Babel的设置是详尽的，并且在[https://babeljs.io/docs/setup/](https://babeljs.io/docs/setup/)上有很好的文档。Babel还有一个很棒的**读取-求值-打印-循环**（**REPL**）。我们将在本章的大多数示例中使用Babel
    REPL。深入了解Babel的各种用法超出了本模块的范围。但是，我建议您开始将Babel作为开发工作流的一部分使用。
- en: We will cover the most important part of ES6 specifications in this chapter.
    You should explore all the features of ES6 if possible and make them part of your
    development workflow.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖ES6规范的最重要部分。如果可能的话，您应该探索ES6的所有功能，并将它们作为开发工作流的一部分。
- en: ES6 syntax changes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6语法更改
- en: ES6 brings in significant syntactic changes to JavaScript. These changes need
    careful study and some getting used to. In this section, we will study some of
    the most important syntax changes and see how you can use Babel to start using
    these newer constructs in your code right away.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ES6为JavaScript带来了重大的语法变化。这些变化需要仔细研究和适应。在本节中，我们将学习一些最重要的语法变化，并看看如何使用Babel立即在您的代码中开始使用这些新构造。
- en: Block scoping
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块作用域
- en: 'We discussed earlier that the variables in JavaScript are function-scoped.
    Variables created in a nested scope are available to the entire function. Several
    programming languages provide you with a default block scope where any variable
    declared within a block of code (usually delimited by `{}`) is scoped (available)
    only within this block. To achieve a similar block scope in JavaScript, a prevalent
    method is to use **immediately-invoked function expressions** (**IIFE**). Consider
    the following example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过，JavaScript中的变量是函数作用域的。在嵌套作用域中创建的变量对整个函数可用。几种编程语言提供了默认的块作用域，其中在代码块（通常由`{}`分隔）内声明的任何变量仅在此块内作用域（可用）。为了在JavaScript中实现类似的块作用域，一种常见的方法是使用**立即调用的函数表达式**（**IIFE**）。考虑以下示例：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the IIFE, we are creating a block scope for the `a` variable. When a
    variable is declared in the IIFE, its scope is restricted within the function.
    This is the traditional way of simulating the block scope. ES6 supports block
    scoping without using IIFEs. In ES6, you can enclose any statement(s) in a block
    defined by `{}`. Instead of using `var`, you can declare a variable using `let`
    to define the block scope. The preceding example can be rewritten using ES6 block
    scopes as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IIFE，我们为`a`变量创建了一个块作用域。当在IIFE中声明变量时，其作用域受限于函数内部。这是模拟块作用域的传统方式。ES6支持使用IIFE而无需使用块作用域。在ES6中，您可以将任何语句包含在由`{}`定义的块中。您可以使用`let`而不是`var`声明变量来定义块作用域。前面的示例可以使用ES6块作用域重写如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using standalone brackets `{}` may seem unusual in JavaScript, but this convention
    is fairly common to create a block scope in many languages. The block scope kicks
    in other constructs such as `if { }` or `for (){ }` as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中使用独立的大括号`{}`可能看起来不寻常，但这种约定在许多语言中创建块作用域是相当常见的。块作用域适用于其他构造，如`if {
    }`或`for (){ }`等。
- en: 'When you use a block scope in this way, it is generally preferred to put the
    variable declaration on top of the block. One difference between variables declared
    using `var` and `let` is that variables declared with `var` are attached to the
    entire function scope, while variables declared using `let` are attached to the
    block scope and they are not initialized until they appear in the block. Hence,
    you cannot access a variable declared with `let` earlier than its declaration,
    whereas with variables declared using `var`, the ordering doesn''t matter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当以这种方式使用块作用域时，通常最好将变量声明放在块的顶部。使用`var`和`let`声明的变量之间的一个区别是，使用`var`声明的变量附加到整个函数作用域，而使用`let`声明的变量附加到块作用域，并且在出现在块中之前不会初始化。因此，您不能在其声明之前访问使用`let`声明的变量，而使用`var`声明的变量则不受顺序影响：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One specific use of `let` is in for loops. When we use a variable declared
    using `var` in a for loop, it is created in the global or parent scope. We can
    create a block-scoped variable in the for loop scope by declaring a variable using
    `let`. Consider the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`的一个特定用途是在for循环中。当我们在for循环中使用`var`声明的变量时，它在全局或父作用域中创建。通过使用`let`声明变量，可以在for循环作用域中创建块作用域变量。考虑以下示例：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As `i` is created using `let`, it is scoped in the `for` loop. You can see that
    the variable is not available outside the scope.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`i`是使用`let`创建的，它在`for`循环中作用域。您可以看到该变量在作用域外不可用。
- en: 'One more use of block scopes in ES6 is the ability to create constants. Using
    the `const` keyword, you can create constants in the block scope. Once the value
    is set, you cannot change the value of such a constant:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ES6中块作用域的另一个用途是创建常量。使用`const`关键字，您可以在块作用域中创建常量。一旦值设置，就无法更改这样一个常量的值：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A constant has to be initialized while being declared. The same block scope
    rules apply to functions also. When a function is declared inside a block, it
    is available only within that scope.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明时必须初始化常量。函数也适用相同的块作用域规则。当函数在块内声明时，它只在该作用域内可用。
- en: Default parameters
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: 'Defaulting is very common. You always set some default value to parameters
    passed to a function or variables that you initialize. You may have seen code
    similar to the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值非常常见。您总是为传递给函数或初始化的变量设置一些默认值。您可能已经看到类似以下的代码：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we are using `||` (the OR operator) to default variables `a` and `b`
    to `0` if no value was supplied when this function was invoked. With ES6, you
    have a standard way of defaulting function arguments. The preceding example can
    be rewritten as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`||`（OR运算符）将变量`a`和`b`默认为`0`，如果在调用此函数时没有提供值。使用ES6，你可以有一个标准的方法来默认函数参数。前面的例子可以重写如下：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can pass any valid expression or function call as part of the default parameter
    list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何有效的表达式或函数调用作为默认参数列表的一部分。
- en: Spread and rest
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开和剩余
- en: 'ES6 has a new operator, `…`. Based on how it is used, it is called either `spread`
    or `rest`. Let''s look at a trivial example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ES6有一个新的运算符，`…`。根据它的使用方式，它被称为`spread`或`rest`。让我们看一个微不足道的例子：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What''s happening here is that when you add `…` before an array (or an iterable)
    it *spreads* the element of the array in individual variables in the function
    parameters. The `a` and `b` function parameters were assigned two values from
    the array when it was spread out. Extra parameters are ignored while spreading
    an array:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是，当你在数组（或可迭代对象）之前添加`…`时，它会将数组的元素*展开*到函数参数中的单独变量中。当展开数组时，额外的参数将被忽略：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This would still print `1` and `2` because there are only two functional parameters
    available. Spreads can be used in other places also, such as array assignments:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然会打印`1`和`2`，因为只有两个函数参数可用。展开也可以用在其他地方，比如数组分配：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is another use of the `…` operator that is the very opposite of the one
    that we just saw. Instead of spreading the values, the same operator can gather
    them into one:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`…`运算符还有另一种用法，与我们刚刚看到的完全相反。这个运算符不是展开值，而是将它们收集到一个值中：'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the variable `b` takes the *rest* of the values. The `a` variable
    took the first value as `1` and `b` took the rest of the values as an array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，变量`b`获取了值的*剩余部分*。变量`a`获取了第一个值`1`，`b`获取了其余的值作为一个数组。
- en: Destructuring
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解构
- en: 'If you have worked on a functional language such as **Erlang**, you will relate
    to the concept of pattern matching. Destructuring in JavaScript is something very
    similar. Destructuring allows you to bind values to variables using pattern matching.
    Consider the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经在**Erlang**等函数式语言上工作过，你会理解模式匹配的概念。JavaScript中的解构与此非常相似。解构允许你使用模式匹配将值绑定到变量。考虑以下例子：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are assigning two variables with the help of array destructuring:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数组解构来分配两个变量：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As shown in the preceding example, we want the pattern to match when the first
    value is assigned to the first variable (`start`) and the second value is assigned
    to the second variable (`end`). Consider the following snippet to see how the
    destructuring of array elements works:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，我们希望模式在第一个值被分配给第一个变量（`start`）时匹配，并且第二个值被分配给第二个变量（`end`）。考虑以下代码片段，看看数组元素的解构是如何工作的：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s discuss how objects'' destructuring works. Let''s say that you have
    a function `f` that returns an object as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下对象的解构是如何工作的。假设你有一个函数`f`，它返回一个对象如下：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we destructure the object being returned by this function, we can use
    the similar syntax as we saw earlier; the difference is that we use `{}` instead
    of `[]`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们解构这个函数返回的对象时，我们可以使用与之前看到的类似的语法；不同之处在于我们使用`{}`而不是`[]`：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Similar to arrays, we use pattern matching to assign variables to their corresponding
    values returned by the function. There is an even shorter way of writing this
    if you are using the same variable as the one being matched. The following example
    would do just fine:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组类似，我们使用模式匹配将变量分配给函数返回的相应值。如果你使用与被匹配的变量相同的变量，还有一种更短的写法。以下例子也可以：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'However, you would mostly be using a different variable name from the one being
    returned by the function. It is important to remember that the syntax is *source:
    destination* and not the usual *destination: source*. Carefully observe the following
    example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你大多数情况下会使用与函数返回的变量名不同的变量名。重要的是要记住语法是*源：目标*，而不是通常的*目标：源*。仔细观察以下例子：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is the opposite of the *target = source* way of assigning values and hence
    will take some time in getting used to.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*目标=源*分配值的相反方式，因此需要一些时间来适应。
- en: Object literals
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象字面量
- en: 'Object literals are everywhere in JavaScript. You would think that there is
    no scope of improvement there. However, ES6 wants to improve this too. ES6 introduces
    several shortcuts to create a concise syntax around object literals:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中到处都是对象字面量。你可能会认为在这方面没有改进的余地。然而，ES6也想要改进这一点。ES6引入了几种快捷方式，以创建一个简洁的语法来处理对象字面量：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you intend to use the same property name as the variable that you are assigning,
    you can use the concise property notation of ES6:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用与你分配的变量相同的属性名，你可以使用ES6的简洁属性表示法：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Similarly, you are assigning functions to properties as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以按照以下方式将函数分配给属性：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Instead of the preceding lines, you can say the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的行不同，你可以说以下内容：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Template literals
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板文字
- en: 'I am sure you have done things such as the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你已经做过以下的事情：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is a very common way of replacing variable values to form a string literal.
    ES6 provides you with a new type of string literal using the backtick ([PRE24]
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种常见的替换变量值以形成字符串文字的方式。ES6使用反引号（[PRE24]）为你提供了一种新类型的字符串文字。
- en: function SuperLogger(level, clazz, msg){
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: function SuperLogger(level, clazz, msg){
- en: 'console.log(`${level} : Exception happened in class: ${clazz} - Exception :
    {$msg}`);'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'console.log(`${level} : Exception happened in class: ${clazz} - Exception :
    {$msg}`);'
- en: '}'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE25]` around a string literal. Within this literal, any expression of the
    `${..}` form is parsed immediately. This parsing is called interpolation. While
    parsing, the variable''s value replaces the placeholder within `${}`. The resulting
    string is just a normal string with the placeholders replaced with actual variable
    values.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25]`包围一个字符串字面量。在此字面量中，任何`${..}`形式的表达式都会立即解析。这种解析称为插值。在解析时，变量的值将替换`${}`中的占位符。生成的字符串只是一个普通字符串，其中占位符被实际变量值替换。'
- en: 'With string interpolation, you can split a string into multiple lines also,
    as shown in the following code (very similar to Python):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串插值，您还可以将字符串拆分为多行，如下面的代码所示（与Python非常相似）：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can use function calls or valid JavaScript expressions as part of the string
    interpolation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在字符串插值中使用函数调用或有效的JavaScript表达式作为一部分：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The final variation of the template strings is called **tagged template string**.
    The idea is to modify the template string using a function. Consider the following
    example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串的最终变体称为**标记模板字符串**。其思想是使用函数修改模板字符串。请考虑以下示例：
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The strangest part is when we call the `emmy` function with the template literal.
    It's not a traditional function call syntax. We are not writing `emmy()`; we are
    just *tagging* the literal with the function. When this function is called, the
    first argument is an array of all the plain strings (the string between interpolated
    expressions). The second argument is the array where all the interpolated expressions
    are evaluated and stored.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最奇怪的部分是当我们使用模板字面量调用`emmy`函数时。这不是传统的函数调用语法。我们不是写`emmy()`；我们只是用函数*标记*字面量。当调用此函数时，第一个参数是所有纯字符串的数组（插入表达式之间的字符串）。第二个参数是计算和存储所有插入表达式的数组。
- en: 'Now what this means is that the tag function can actually change the resulting
    template tag:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着标记函数实际上可以更改生成的模板标记：
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, we modified the value of the discount in the tag function and
    returned the modified values.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们修改了标记函数中折扣的值并返回了修改后的值。
- en: Maps and Sets
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maps和Sets
- en: 'ES6 introduces four new data structures: **Map**, **WeakMap**, **Set**, and
    **WeakSet**. We discussed earlier that objects are the usual way of creating key-value
    pairs in JavaScript. The disadvantage of objects is that you cannot use non-string
    values as keys. The following snippets demonstrate how Maps are created in ES6:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了四种新的数据结构：**Map**、**WeakMap**、**Set**和**WeakSet**。我们之前讨论过，在JavaScript中，对象是创建键值对的常用方式。对象的缺点是您无法使用非字符串值作为键。以下代码片段演示了如何在ES6中创建Map：
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can initialize the map while declaring it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在声明时初始化Map：
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you want to iterate over the entries in the Map, you can use the `entries()`
    function that will return you an iterator. You can iterate through all the keys
    using the `keys()` function and you can iterate through the values of the Map
    using the `values()` function:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要遍历Map中的条目，可以使用`entries()`函数，它将返回一个迭代器。您可以使用`keys()`函数遍历所有键，并可以使用`values()`函数遍历Map的值：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A variation of JavaScript Maps is a WeakMap—a WeakMap does not prevent its keys
    from being garbage-collected. Keys for a WeakMap must be objects and the values
    can be arbitrary values. While a WeakMap behaves in the same way as a normal Map,
    you cannot iterate through it and you can't clear it. There are reasons behind
    these restrictions. As the state of the Map is not guaranteed to remain static
    (keys may get garbage-collected), you cannot ensure correct iteration.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript Maps的一种变体是WeakMap——WeakMap不会阻止其键被垃圾回收。WeakMap的键必须是对象，值可以是任意值。虽然WeakMap的行为方式与普通Map相同，但您无法对其进行迭代，也无法清除它。这些限制背后有原因。由于Map的状态不能保证保持静态（键可能被垃圾回收），因此无法确保正确的迭代。
- en: There are not many cases where you may want to use WeakMap. Most uses of a Map
    can be written using normal Maps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 没有太多情况下您可能想要使用WeakMap。大多数Map的用途都可以使用普通的Map来实现。
- en: 'While Maps allow you to store arbitrary values, Sets are a collection of unique
    values. Sets have similar methods as Maps; however, `set()` is replaced with `add()`,
    and the `get()` method does not exist. The reason that the `get()` method is not
    there is because a Set has unique values, so you are interested in only checking
    whether the Set contains a value or not. Consider the following example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Map允许您存储任意值，但Set是一组唯一值的集合。Set具有与Map类似的方法；但是，`set()`被替换为`add()`，而`get()`方法不存在。`get()`方法不存在的原因是Set具有唯一值，因此您只关心Set是否包含某个值。请考虑以下示例：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `keys()` and `values()` iterators both return a list of the unique values
    in the Set. The `entries()` iterator yields a list of entry arrays, where both
    items of the array are the unique Set values. The default iterator for a Set is
    its `values()` iterator.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys()`和`values()`迭代器都返回Set中唯一的值列表。`entries()`迭代器生成一个条目数组的列表，数组的两个项目都是唯一的Set值。Set的默认迭代器是其`values()`迭代器。'
- en: Symbols
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Symbols
- en: 'ES6 introduces a new data type called Symbol. A Symbol is guaranteed to be
    unique and immutable. Symbols are usually used as an identifier for object properties.
    They can be considered as uniquely generated IDs. You can create Symbols with
    the `Symbol()` factory method—remember that this is not a constructor and hence
    you should not use a `new` operator:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了一种称为Symbol的新数据类型。Symbol保证是唯一且不可变的。Symbol通常用作对象属性的标识符。它们可以被视为唯一生成的ID。您可以使用`Symbol()`工厂方法创建Symbol——请记住这不是构造函数，因此不应使用`new`运算符：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Unlike strings, Symbols are guaranteed to be unique and hence help in preventing
    name clashes. With Symbols, we have an extensibility mechanism that works for
    everyone. ES6 comes with a number of predefined built-in Symbols that expose various
    meta behaviors on JavaScript object values.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与字符串不同，Symbol保证是唯一的，因此有助于防止名称冲突。使用Symbol，我们有一个适用于所有人的可扩展机制。ES6带有许多预定义的内置Symbol，它们在JavaScript对象值上公开各种元行为。
- en: Iterators
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代器
- en: 'Iterators have been around in other programming languages for quite some time.
    They give convenience methods to work with collections of data. ES6 introduces
    iterators for the same use case. ES6 iterators are objects with a specific interface.
    Iterators have a `next()` method that returns an object. The returning object
    has two properties—`value` (the next value) and `done` (indicates whether the
    last result has been reached). ES6 also defines an `Iterable` interface, which
    describes objects that must be able to produce iterators. Let''s look at an array,
    which is an iterable, and the iterator that it can produce to consume its values:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器在其他编程语言中已经存在了相当长的时间。它们提供了方便的方法来处理数据集合。ES6为相同的用例引入了迭代器。ES6迭代器是具有特定接口的对象。迭代器有一个`next()`方法，返回一个对象。返回的对象有两个属性——`value`（下一个值）和`done`（指示是否已达到最后一个结果）。ES6还定义了一个`Iterable`接口，描述了必须能够生成迭代器的对象。让我们看一个数组，它是一个可迭代对象，并且它可以生成用于消耗其值的迭代器：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, we are accessing the array''s iterator via `Symbol.iterator()`
    and calling the `next()` method on it to get each successive element. Both `value`
    and `done` are returned by the `next()` method call. When you call `next()` past
    the last element in the array, you get an undefined value and `done: true`, indicating
    that you have iterated over the entire array.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '如您所见，我们通过`Symbol.iterator()`访问数组的迭代器，并在其上调用`next()`方法以获取每个连续的元素。`value`和`done`都是由`next()`方法调用返回的。当您在数组中的最后一个元素之后调用`next()`时，您会得到一个未定义的值和`done:
    true`，表示您已经遍历了整个数组。'
- en: For..of loops
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: For..of循环
- en: ES6 adds a new iteration mechanism in form of the `for..of` loop, which loops
    over the set of values produced by an iterator.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ES6通过`for..of`循环添加了一种新的迭代机制，它循环遍历由迭代器产生的一组值。
- en: The value that we iterate over with `for..of` is an iterable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`for..of`迭代的值是可迭代的。
- en: 'Let''s compare `for..of` to `for..in`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`for..of`与`for..in`进行比较：
- en: '[PRE36]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, using the `for..in` loop, you can iterate over indexes of the
    `list` array, while the `for..of` loop lets you iterate over the values stored
    in the `list` array.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用`for..in`循环，您可以迭代`list`数组的索引，而`for..of`循环让您迭代存储在`list`数组中的值。
- en: Arrow functions
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'One of the most interesting new parts of ECMAScript 6 is arrow functions. Arrow
    functions are, as the name suggests, functions defined with a new syntax that
    uses an *arrow* (`=>`) as part of the syntax. Let''s first see how arrow functions
    look:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6最有趣的新部分之一是箭头函数。箭头函数是使用新语法定义的函数，该语法使用*箭头*（`=>`）作为语法的一部分。让我们首先看看箭头函数的样子：
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The arrow function definition consists of a parameter list (of zero or more
    parameters and surrounding `( .. )` if there's not exactly one parameter), followed
    by the `=>` marker, which is followed by a function body.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数定义由参数列表（零个或多个参数和周围的`( .. )`，如果没有恰好一个参数），后跟`=>`标记，后跟函数体。
- en: 'The body of the function can be enclosed by `{ .. }` if there''s more than
    one expression in the body. If there''s only one expression, and you omit the
    surrounding `{ .. }`, there''s an implied return in front of the expression. There
    are several variations of how you can write arrow functions. The following are
    the most commonly used:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数体中有多个表达式，则函数体可以用`{ .. }`括起来。如果只有一个表达式，并且省略了周围的`{ .. }`，则在表达式前面有一个隐含的返回。有几种不同的箭头函数写法。以下是最常用的：
- en: '[PRE38]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It is important to remember that all the characteristics of a normal function
    parameter are available to arrow functions, including default values, destructuring,
    and rest parameters.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，所有普通函数参数的特性都适用于箭头函数，包括默认值、解构和剩余参数。
- en: 'Arrow functions offer a convenient and short syntax, which gives your code
    a very *functional programming* flavor. Arrow functions are popular because they
    offer an attractive promise of writing concise functions by dropping function,
    return, and { .. } from the code. However, arrow functions are designed to fundamentally
    solve a particular and common pain point with this-aware coding. In normal ES5
    functions, every new function defined its own value of `this` (a new object in
    case of a constructor, `undefined` in strict mode function calls, context object
    if the function is called as an *object method*, and so on). JavaScript functions
    always have their own `this` and this prevents you from accessing the `this` of,
    for example, a surrounding method from inside a callback. To understand this problem,
    consider the following example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数提供了一种方便且简短的语法，为您的代码提供了非常*函数式编程*的风味。箭头函数很受欢迎，因为它们承诺通过从代码中删除函数、返回和{ .. }来编写简洁的函数。然而，箭头函数的设计基本上是为了解决与this相关的编码的特定和常见痛点。在普通的ES5函数中，每个新函数都定义了自己的`this`值（在构造函数的情况下是一个新对象，在严格模式函数调用中是`undefined`，如果函数作为*对象方法*调用，则是上下文对象等）。JavaScript函数总是有自己的`this`，这会阻止您从内部回调中访问例如周围方法的`this`。要理解这个问题，请考虑以下示例：
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'On the line marked with `3`, we are trying to get `this.str`, but the anonymous
    function also has its own `this`, which shadows `this` from the method from line
    `1`. To fix this in ES5, we can assign `this` to a variable and use the variable
    instead:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在标有`3`的行上，我们试图获取`this.str`，但匿名函数也有自己的`this`，它遮蔽了来自第`1`行方法的`this`。要在ES5中修复这个问题，我们可以将`this`分配给一个变量并使用该变量：
- en: '[PRE40]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: On the line marked with `1`, we are assigning `this` to a variable, `that`,
    and in the anonymous function we are using the `that` variable, which will have
    a reference to `this` from the correct context.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在标有`1`的行上，我们将`this`分配给一个变量`that`，在匿名函数中我们使用`that`变量，它将引用正确上下文中的`this`。
- en: 'ES6 arrow functions have lexical `this`, meaning that the arrow functions capture
    the `this` value of the enclosing context. We can convert the preceding function
    to an equivalent arrow function as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ES6箭头函数具有词法`this`，这意味着箭头函数捕获了封闭上下文的`this`值。我们可以将前面的函数转换为等效的箭头函数如下：
- en: '[PRE41]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed a few important features being added to the language
    in ES6\. It's an exciting collection of new language features and paradigms and,
    using polyfills and transpilers, you can start with them right away. JavaScript
    is an ever growing language and it is important to understand what the future
    holds. ES6 features make JavaScript an even more interesting and mature language.
    In the next chapter, we will dive deep into manipulating the browser's **Document
    Object Model** (**DOM**) and events using JavaScript with jQuery.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些在ES6中添加到语言中的重要特性。这是一个令人兴奋的新语言特性和范例的集合，使用polyfills和transpilers，你可以立即开始使用它们。JavaScript是一种不断发展的语言，了解未来的发展方向非常重要。ES6的特性使JavaScript成为一个更加有趣和成熟的语言。在下一章中，我们将深入探讨如何使用JavaScript和jQuery来操作浏览器的**文档对象模型**（**DOM**）和事件。
