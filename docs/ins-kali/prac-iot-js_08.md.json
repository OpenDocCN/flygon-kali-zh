["```js\n    sudo raspi-config\n```", "```js\nraspistill -o test.jpg\n```", "```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar Raspistill = require('node-raspistill').Raspistill; \nvar raspistill = new Raspistill({ \n    noFileSave: true, \n    encoding: 'jpg', \n    width: 640, \n    height: 480 \n}); \n\nvar crypto = require(\"crypto\"); \nvar fs = require('fs'); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        client.publish('api-engine', mac); \n        startStreaming(); \n    }); \n\n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nfunction startStreaming() { \n    raspistill \n        .timelapse(100, 0, function(image) { // every 100ms ~~FOREVER~~ \n            var data2Send = { \n                data: { \n                    image: image, \n                    id: crypto.randomBytes(8).toString(\"hex\") \n                }, \n                macAddress: macAddress \n            }; \n\n            client.publish('image', JSON.stringify(data2Send)); \n            console.log('[image]', 'published'); \n        }) \n        .then(function() { \n            console.log('Timelapse Ended') \n        }) \n        .catch(function(err) { \n            console.log('Error', err); \n        }); \n} \n```", "```js\nnpm install && npm install node-raspistill --save  \n```", "```js\nvar Data = require('../api/data/data.model'); \nvar mqtt = require('mqtt'); \nvar config = require('../config/environment'); \nvar fs = require('fs'); \nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    console.log('Connected to Mosca at ' + config.mqtt.host + ' on port ' + config.mqtt.port); \n    client.subscribe('api-engine'); \n    client.subscribe('image'); \n}); \n\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \n    if (topic === 'api-engine') { \n        var macAddress = message.toString(); \n        console.log('Mac Address >> ', macAddress); \n        client.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'image') { \n        message = JSON.parse(message.toString()); \n        // convert string to buffer \n        var image = Buffer.from(message.data.image, 'utf8'); \n        var fname = 'stream_' + ((message.macAddress).replace(/:/g, '_')) + '.jpg'; \n        fs.writeFile(__dirname + '/stream/' + fname, image, { encoding: 'binary' }, function(err) { \n            if (err) { \n                console.log('[image]', 'save failed', err); \n            } else { \n                console.log('[image]', 'saved'); \n            } \n        }); \n\n        // as of now we are not going to \n        // store the image buffer in DB.  \n        // Gridfs would be a good way \n        // instead of storing a stringified text \n        delete message.data.image; \n        message.data.fname = fname; \n\n        // create a new data record for the device \n        Data.create(message, function(err, data) { \n            if (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \n            // console.log('Data Saved :', data); \n        }); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n```", "```js\napp.get('/stream/:fname', function(req, res, next) { \n        var fname = req.params.fname; \n        var streamDir = __dirname + '/mqtt/stream/'; \n        var img = streamDir + fname; \n        console.log(img); \n        fs.exists(img, function(exists) { \n         if (exists) { \n                return res.sendFile(img); \n            } else { \n                // http://www.iconarchive.com/show/small-n-flat-icons-by-paomedia/sign-ban-icon.html \n                return res.sendFile(streamDir + '/no-image.png'); \n            } \n        }); \n    });  \n```", "```js\n<div class=\"container\"> \n    <br> \n    <div *ngIf=\"!device\"> \n        <h3 class=\"text-center\">Loading!</h3> \n    </div> \n    <div class=\"row\" *ngIf=\"!lastRecord\"> \n        <h3 class=\"text-center\">No Data!</h3> \n    </div> \n    <div class=\"row\" *ngIf=\"lastRecord\"> \n        <div class=\"col-md-12\"> \n            <div class=\"panel panel-info\"> \n                <div class=\"panel-heading\"> \n                    <h3 class=\"panel-title\"> \n                        {{device.name}} \n                    </h3> \n                    <span class=\"pull-right btn-click\"> \n                        <i class=\"fa fa-chevron-circle-up\"></i> \n                    </span> \n                </div> \n                <div class=\"clearfix\"></div> \n                <div class=\"table-responsive\" *ngIf=\"lastRecord\"> \n                    <table class=\"table table-striped\"> \n                        <tr> \n                            <td colspan=\"2\" class=\"text-center\"><img  [src]=\"lastRecord.data.fname\"></td> \n                        </tr> \n                        <tr class=\"text-center\" > \n                            <td>Received At</td> \n                            <td>{{lastRecord.createdAt | date: 'medium'}}</td> \n                        </tr> \n                    </table> \n                </div> \n            </div> \n        </div> \n    </div> \n</div> \n```", "```js\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \nimport { DevicesService } from '../services/devices.service'; \nimport { Params, ActivatedRoute } from '@angular/router'; \nimport { SocketService } from '../services/socket.service'; \nimport { DataService } from '../services/data.service'; \nimport { NotificationsService } from 'angular2-notifications'; \nimport { Globals } from '../app.global'; \n\n@Component({ \n   selector: 'app-device', \n   templateUrl: './device.component.html', \n   styleUrls: ['./device.component.css'] \n}) \nexport class DeviceComponent implements OnInit, OnDestroy { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subDevice: any; \n   private subData: any; \n   lastRecord: any; \n\n   // line chart config \n\n   constructor(private deviceService: DevicesService, \n         private socketService: SocketService, \n         private dataService: DataService, \n         private route: ActivatedRoute, \n         private notificationsService: NotificationsService) { } \n\n   ngOnInit() { \n         this.subDevice = this.route.params.subscribe((params) => { \n               this.deviceService.getOne(params['id']).subscribe((response) => { \n                     this.device = response.json(); \n                     this.getData(); \n               }); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               let d = this.data[0]; \n               d.data.fname = Globals.BASE_API_URL + 'stream/' + d.data.fname; \n               this.lastRecord = d; // descending order data \n               this.socketInit(); \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data: any) => { \n               if (this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               data.data.fname = Globals.BASE_API_URL + 'stream/' + data.data.fname + '?t=' + (Math.random() * 100000); // cache busting \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n         }); \n   }\n```", "```js\n   ngOnDestroy() { \n         this.subDevice.unsubscribe(); \n         this.subData ? this.subData.unsubscribe() : ''; \n   } \n} \n```", "```js\nnpm start  \n```", "```js\nng build --env=prod  \n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start \n```", "```js\n<ion-header> \n    <ion-navbar> \n        <ion-title>Mobile App</ion-title> \n    </ion-navbar> \n</ion-header> \n<ion-content padding> \n    <div *ngIf=\"!lastRecord\"> \n        <h3 class=\"text-center\">Loading!</h3> \n    </div> \n    <div *ngIf=\"lastRecord\"> \n        <ion-list> \n            <ion-item> \n                <img [src]=\"lastRecord.data.fname\"> \n            </ion-item> \n            <ion-item> \n                <ion-label>Received At</ion-label> \n                <ion-label>{{lastRecord.createdAt | date: 'medium'}}</ion-label> \n            </ion-item> \n        </ion-list> \n    </div> \n</ion-content> \n```", "```js\nimport { Component } from '@angular/core'; \nimport { IonicPage, NavController, NavParams } from 'ionic-angular'; \nimport { Globals } from '../../app/app.globals'; \nimport { DevicesService } from '../../services/device.service'; \nimport { DataService } from '../../services/data.service'; \nimport { ToastService } from '../../services/toast.service'; \nimport { SocketService } from '../../services/socket.service'; \n\n@IonicPage() \n@Component({ \n   selector: 'page-view-device', \n   templateUrl: 'view-device.html', \n}) \nexport class ViewDevicePage { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subData: any; \n   lastRecord: any; \n\n   constructor(private navCtrl: NavController, \n         private navParams: NavParams, \n         private socketService: SocketService, \n         private deviceService: DevicesService, \n         private dataService: DataService, \n         private toastService: ToastService) { \n         this.device = navParams.get(\"device\"); \n         console.log(this.device); \n   } \n\n   ionViewDidLoad() { \n         this.deviceService.getOne(this.device._id).subscribe((response) => { \n               this.device = response.json(); \n               this.getData(); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               let d = this.data[0]; \n               d.data.fname = Globals.BASE_API_URL + 'stream/' + d.data.fname; \n               this.lastRecord = d; // descending order data \n               this.socketInit(); \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data: any) => { \n               if(this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               data.data.fname = Globals.BASE_API_URL + 'stream/' + data.data.fname + '?t=' + (Math.random() * 100000); \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n         }); \n   } \n\n   ionViewDidUnload() { \n         this.subData && this.subData.unsubscribe && this.subData.unsubscribe(); //unsubscribe if subData is defined \n   } \n} \n```", "```js\nionic serve  \n```", "```js\nionic cordova run android  \n```", "```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar Raspistill = require('node-raspistill').Raspistill; \nvar crypto = require(\"crypto\"); \nvar fs = require('fs'); \nvar Gpio = require('onoff').Gpio; \nvar exec = require('child_process').exec; \n\nvar pir = new Gpio(17, 'in', 'both'); \nvar raspistill = new Raspistill({ \n    noFileSave: true, \n    encoding: 'jpg', \n    width: 640, \n    height: 480 \n}); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        client.publish('api-engine', mac); \n        // startStreaming(); \n    }); \n\n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nfunction startStreaming() { \n    raspistill \n        .timelapse(100, 0, function(image) { // every 100ms ~~FOREVER~~ \n            var data2Send = { \n                data: { \n                    image: image, \n                    id: crypto.randomBytes(8).toString(\"hex\") \n                }, \n                macAddress: macAddress \n            }; \n\n            client.publish('image', JSON.stringify(data2Send)); \n            console.log('[image]', 'published'); \n        }) \n        .then(function() { \n            console.log('Timelapse Ended') \n        }) \n        .catch(function(err) { \n            console.log('Error', err); \n        }); \n} \n\nvar isRec = false; \n\n// keep watching for motion \npir.watch(function(err, value) { \n    if (err) exit(); \n    if (value == 1 && !isRec) { \n        console.log('Intruder detected'); \n        console.log('capturing video.. '); \n        isRec = true; \n        var videoPath = __dirname + '/video.h264'; \n        var file = fs.createWriteStream(videoPath); \n        var video_path = './video/video' + Date.now() + '.h264'; \n        var cmd = 'raspivid -o ' + video_path + ' -t 5000'; \n\n        exec(cmd, function(error, stdout, stderr) { \n            // output is in stdout \n            console.log('Video Saved @ : ', video_path); \n            require('./mailer').sendEmail(video_path, true, function(err, info) { \n                setTimeout(function() { \n                    // isRec = false; \n                }, 3000); // don't allow recording for 3 sec after \n            }); \n        }); \n    } \n}); \n\nfunction exit() { \n    pir.unexport(); \n    process.exit(); \n} \n```", "```js\nvar fs = require('fs'); \nvar nodemailer = require('nodemailer'); \n\nvar transporter = nodemailer.createTransport({ \n    service: 'Gmail', \n    auth: { \n        user: 'arvind.ravulavaru@gmail.com', \n        pass: '**********' \n    } \n}); \n\nvar timerId; \n\nmodule.exports.sendEmail = function(file, deleteAfterUpload, cb) { \n    if (timerId) return; \n\n    timerId = setTimeout(function() { \n        clearTimeout(timerId); \n        timerId = null; \n    }, 10000); \n\n    console.log('Sendig an Email..'); \n\n    var mailOptions = { \n        from: 'Pi Bot <pi.intruder.alert@gmail.com>', \n        to: 'user@email.com', \n        subject: '[Pi Bot] Intruder Detected', \n        html: 'Intruder Detected. Please check the video attached. <br/><br/> Intruder Detected At : ' + Date(), \n        attachments: [{ \n            path: file \n        }] \n    }; \n\n    transporter.sendMail(mailOptions, function(err, info) { \n        if (err) { \n            console.log(err); \n        } else { \n            console.log('Message sent: ' + info.response); \n            if (deleteAfterUpload) { \n                fs.unlink(path); \n            } \n        } \n\n        if (cb) { \n            cb(err, info); \n        } \n    }); \n} \n```", "```js\nnpm install onoff -save  \n```", "```js\nnpm start\n```"]