["```js\nfunction merge2dArrayIntoOne(arrays) {\n  var count = arrays.length;\n  var merged = new Array(count); \n  var c = 0;\n  for (var i = 0; i < count; ++i) {\n    for (var j = 0, jlen = arrays[i].length; j < jlen; ++j) {\n      merged[c++] = arrays[i][j];\n    }\n  }\n  return merged\n}\n```", "```js\nvarmerge2dArrayIntoOne2 = function(arrays) {\n  return arrays.reduce( function(p,n){\n    return p.concat(n);\n  });\n};\n```", "```js\nvar fibonacci = function(n) {\n  if (n < 2) {\n    return 1;\n  }\n  else {\n    return fibonacci(n - 2) + fibonacci(n - 1);\n  }\n}\nconsole.log( fibonacci(8) );\n// Output: 34\n```", "```js\nvar fibonacci2 = Lazy.generate(function() {\n  var x = 1,\n  y = 1;\n  return function() {\n    var prev = x;\n    x = y;\n    y += prev;\n    return prev;\n  };\n}());\n\nconsole.log(fibonacci2.length());// Output: undefined\n\nconsole.log(fibonacci2.take(12).toArray());// Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] \n\nvar fibonacci3 = Lazy.generate(function() {\n  var x = 1,\n  y = 1;\n  return function() {\n    var prev = x;\n    x = y;\n    y += prev;\n    return prev;\n  };\n}());\n\nconsole.log(fibonacci3.take(9).reverse().first(1).toArray());// Output: [34]\n```", "```js\nvar words = [], count = 0;\ntext = myString.split(' ');\nfor (i=0; count<4, i<text.length; i++) {\n  if (!text[i].match(/[0-9]/)) {\n    words = words.concat(text[i]);\n    count++;\n  }\n}\nconsole.log(words);\n```", "```js\nvar words = [];\nvar words = myString.split(' ').filter(function(x){\n  return (! x.match(/[1-9]+/));\n}).slice(0,4);\nconsole.log(words);\n```", "```js\nvar words = toSequence(myString).match(/[a-zA-Z]+/).first(4);\n```", "```js\nvar\n  obj1 = {value: 1},\n  obj2 = {value: 2},\n  obj3 = {value: 3};\n\nvar values = [];\nfunction accumulate(obj) {\n  values.push(obj.value);\n}\naccumulate(obj1);\naccumulate(obj2);\nconsole.log(values); // Output: [obj1.value, obj2.value]\n```", "```js\nfunction accumulate2(obj) {\n  var values = [];\n  values.push(obj.value);\n  return values;\n}\nconsole.log(accumulate2(obj1)); // Returns: [obj1.value]\nconsole.log(accumulate2(obj2)); // Returns: [obj2.value]\nconsole.log(accumulate2(obj3)); // Returns: [obj3.value]\n```", "```js\nvar ValueAccumulator = function(obj) {\n  var values = []\n  var accumulate = function() {\n    values.push(obj.value);   \n  };\n  accumulate();\n  return values;\n};\n```", "```js\nvar ValueAccumulator = function() {\n  var values = [];\n  var accumulate = function(obj) {\n    if (obj) {\n      values.push(obj.value);\n      return values;\n    }\n    else {\n      return values;\n    }\n  };\n  return accumulate;\n};\n\n//This allows us to do this:\nvar accumulator = ValueAccumulator();\naccumulator(obj1); \naccumulator(obj2); \nconsole.log(accumulator()); \n// Output: [obj1.value, obj2.value]\n```", "```js\n// using forEach() to iterate through an array and call a \n// callback function, accumulator, for each item\nvar accumulator2 = ValueAccumulator();\nvar objects = [obj1, obj2, obj3]; // could be huge array of objects\nobjects.forEach(accumulator2);\nconsole.log(accumulator2());\n```", "```js\n// function that prints a message to the center of the screen\nvar printCenter = function(str) {\n  var elem = document.createElement(\"div\");\n  elem.textContent = str;\n  elem.style.position = 'absolute';\n  elem.style.top = window.innerHeight/2+\"px\";\n  elem.style.left = window.innerWidth/2+\"px\";\n  document.body.appendChild(elem);\n};\nprintCenter('hello world');\n// pure function that accomplishes the same thing\nvar printSomewhere = function(str, height, width) {\n  var elem = document.createElement(\"div\");\n  elem.textContent = str;\n  elem.style.position = 'absolute';\n  elem.style.top = height;\n  elem.style.left = width;\n  return elem;\n};\ndocument.body.appendChild(printSomewhere('hello world', window.innerHeight/2)+10+\"px\",window.innerWidth/2)+10+\"px\")\n);\n```", "```js\nvar messages = ['Hi', 'Hello', 'Sup', 'Hey', 'Hola'];\nmessages.map(function(s,i){\n  return printSomewhere(s, 100*i*10, 100*i*10);\n}).forEach(function(element) {\n  document.body.appendChild(element);\n});\n```", "```js\n// The standard way to write anonymous functions\nfunction(){return \"hello world\"};\n\n// Anonymous function assigned to variable\nvar anon = function(x,y){return x+y};\n\n// Anonymous function used in place of a named callback function, \n// this is one of the more common uses of anonymous functions.\nsetInterval(function(){console.log(new Date().getTime())}, 1000);\n// Output:  1413249010672, 1413249010673, 1413249010674, ...\n\n// Without wrapping it in an anonymous function, it immediately // execute once and then return undefined as the callback:\nsetInterval(console.log(new Date().getTime()), 1000)\n// Output:  1413249010671\n```", "```js\nfunction powersOf(x) {\n  return function(y) {\n    // this is an anonymous function!\n    return Math.pow(x,y);\n  };\n}\npowerOfTwo = powersOf(2);\nconsole.log(powerOfTwo(1)); // 2\nconsole.log(powerOfTwo(2)); // 4\nconsole.log(powerOfTwo(3)); // 8\n\npowerOfThree = powersOf(3);\nconsole.log(powerOfThree(3));  // 9\nconsole.log(powerOfThree(10)); // 59049\n```", "```js\nvar\n  obj1 = {value: 1},\n  obj2 = {value: 2},\n  obj3 = {value: 3};\n\nvar values = (function() {\n  // anonymous function\n  var values = [];\n  return function(obj) {\n    // another anonymous function!\n    if (obj) {\n      values.push(obj.value);\n      return values;\n    }\n    else {\n      return values;\n    }\n  }\n})(); // make it self-executing\nconsole.log(values(obj1)); // Returns: [obj.value]\nconsole.log(values(obj2)); // Returns: [obj.value, obj2.value]\n```", "```js\n// Instead of applying the functions one per line...\narr = [1,2,3,4];\narr1 = arr.reverse();\narr2 = arr1.concat([5,6]);\narr3 = arr2.map(Math.sqrt);\n// ...they can be chained together into a one-liner\nconsole.log([1,2,3,4].reverse().concat([5,6]).map(Math.sqrt));\n// parentheses may be used to illustrate\nconsole.log(((([1,2,3,4]).reverse()).concat([5,6])).map(Math.sqrt) );\n```", "```js\nArray.prototype.zip = function(arr2) {\n  // ...\n}\n```", "```js\narr.zip([11,12,13,14).map(function(n){return n*2});\n// Output: 2, 22, 4, 24, 6, 26, 8, 28\n```", "```js\nvar foo = function(n) {\n  if (n < 0) {\n    // base case\n    return 'hello';\n  }\n  else {\n    // recursive case\n    foo(n-1);\n  }\n}\nconsole.log(foo(5));\n```", "```js\nvar getLeafs = function(node) {\n  if (node.childNodes.length == 0) {\n    // base case\n    return node.innerText;\n  }\n  else {\n    // recursive case: \n    return node.childNodes.map(getLeafs);\n  }\n}\n```", "```js\nfunction gcd(a, b) {\n  if (b == 0) {\n    // base case (conquer)\n    return a;\n  }\n  else {\n    // recursive case (divide)\n    return gcd(b, a % b);\n  }\n}\n\nconsole.log(gcd(12,8));\nconsole.log(gcd(100,20));\n```", "```js\nvar mergeSort = function(arr){\n  if (arr.length < 2) {\n    // base case: 0 or 1 item arrays don't need sorting\n    return items;\n  }\n  else {\n    // recursive case: divide the array, sort, then merge\n    var middle = Math.floor(arr.length / 2);\n    // divide\n    var left = mergeSort(arr.slice(0, middle));\n    var right = mergeSort(arr.slice(middle));\n    // conquer\n    // merge is a helper function that returns a new array\n    // of the two arrays merged together\n    return merge(left, right);\n  }\n}\n```", "```js\n// wishful JavaScript pseudocode:\nvar infinateNums = range(1 to infinity);\nvar tenPrimes = infinateNums.getPrimeNumbers().first(10);\n```", "```js\nmyArray = [1,2,3,4];\nnewArray = myArray.map(function(x) {return x*2});\nconsole.log(myArray);  // Output: [1,2,3,4]\nconsole.log(newArray); // Output: [2,4,6,8]\n```", "```js\nvar myArray = [1,2,3];\nfunction myCallback(x){return x+1};\nconsole.log(myArray.map(myCallback));\n```", "```js\nconsole.log(myArray.map(function(x){return x+1}));\n```", "```js\nfunction myCallback(xhr){\n  console.log(xhr.status); \n  return true;\n}\n$.ajax(myURI).done(myCallback);\n```", "```js\n$.ajax(myURI).fail(**myCallback(xhr)**);\n// or\n$.ajax(myURI).fail(**myCallback()**);\n```", "```js\nfunction myCallback(status){\n  console.log(status); \n  return true;\n}\n$.ajax(myURI).done(function(xhr){myCallback(xhr.status)});\n```", "```js\nvar\n  integers = [1,-0,9,-8,3],\n  numbers = [1,2,3,4],\n  str = 'hello world how ya doing?';\n// map integers to their absolute values\nconsole.log(integers.map(Math.abs));\n\n// multiply an array of numbers by their position in the array\nconsole.log(numbers.map(function(x, i){return x*i}) );\n\n// Capitalize every other word in a string.\nconsole.log(str.split(' ').map(function(s, i){\n  if (i%2 == 0) {\n    return s.toUpperCase();\n  }\n  else {\n    return s;\n  }\n}) );\n```", "```js\nMyObject.prototype.map = function(f) {\n  return new MyObject(f(this.value));\n};\n```", "```js\nvar myarray = [1,2,3,4]\nwords = 'hello 123 world how 345 ya doing'.split(' ');\nre = '[a-zA-Z]';\n// remove all negative numbers\nconsole.log([-2,-1,0,1,2].filter(function(x){return x>0}));\n// remove null values after a map operation\nconsole.log(words.filter(function(s){\n  return s.match(re);\n}) );\n// remove random objects from an array\nconsole.log(myarray.filter(function(){\n  return Math.floor(Math.random()*2)})\n);\n```", "```js\nvar numbers = [1,2,3,4];\n// sum up all the values of an array\nconsole.log([1,2,3,4,5].reduce(function(x,y){return x+y}, 0));\n// sum up all the values of an array\nconsole.log([1,2,3,4,5].reduce(function(x,y){return x+y}, 0));\n\n// find the largest number\nconsole.log(numbers.reduce(function(a,b){\n  return Math.max(a,b)}) // max takes two arguments\n);\n```", "```js\nvar arr = [1,2,3];\nvar nodes = arr.map(function(x) {\n  var elem = document.createElement(\"div\");\n  elem.textContent = x;\n  return elem;\n});\n\n// log the value of each item\narr.forEach(function(x){console.log(x)});\n\n// append nodes to the DOM\nnodes.forEach(function(x){document.body.appendChild(x)});\n```", "```js\nconsole.log([1, 2, 3].concat(['a','b','c']) // concatenate two arrays);\n// Output: [1, 2, 3, 'a','b','c']\n```", "```js\nvar arr1 = [1,2,3];\nvar arr2 = [4,5,6];\nvar arr3 = [7,8,9];\nvar x = arr1.concat(arr2, arr3);\nvar y = arr1.concat(arr2).concat(arr3));\nvar z = arr1.concat(arr2.concat(arr3)));\nconsole.log(x);\nconsole.log(y);\nconsole.log(z);\n```", "```js\nvar invert = function(arr) {\n  return arr.map(function(x, i, a) {\n    return a[a.length - (i+1)];\n  });\n};\nvar q = invert([1,2,3,4]);\nconsole.log( q );\n```", "```js\narr = [200, 12, 56, 7, 344];\nconsole.log(arr.sort(function(a,b){return a\u2013b}) );\n// arr is now: [7, 12, 56, 200, 344];\n```", "```js\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nconsole.log([1, 2, 3, 4].every(isNumber)); // Return: true\nconsole.log([1, 2, 'a'].every(isNumber)); // Return: false\nconsole.log([1, 2, 'a'].some(isNumber)); // Return: true\n```"]