["```java\nList<String> list = Arrays.asList(\n  \"blue\", \"red\", \"green\", \"yellow\", \"orange\", \"cyan\", \"purple\"\n);\nObservable<String> listObservable = Observable.from(list);\nlistObservable.subscribe(System.out::println);\n```", "```java\nlistObservable.subscribe(\n  color -> System.out.print(color + \"|\"),\n  System.out::println,\n  System.out::println\n);\nlistObservable.subscribe(color -> System.out.print(color + \"/\"));\n```", "```java\nPath resources = Paths.get(\"src\", \"main\", \"resources\");\ntry (DirectoryStream<Path> dStream =Files.newDirectoryStream(resources)) {\n  Observable<Path> dirObservable = Observable.from(dStream);\n  dirObservable.subscribe(System.out::println);\n}\ncatch (IOException e) {\n  e.printStackTrace();\n}\n```", "```java\nObservable<Integer> arrayObservable = Observable.from(new Integer[] {3, 5, 8});\n  arrayObservable.subscribe(System.out::println);\n```", "```java\nObservable.just('S').subscribe(System.out::println);\n```", "```java\nObservable\n  .just('R', 'x', 'J', 'a', 'v', 'a')\n  .subscribe(\n    System.out::print,\n    System.err::println,\n    System.out::println\n  );\n```", "```java\npublic static class User {\n  private final String forename;\n  private final String lastname;\n  public User(String forename, String lastname) {\n    this.forename = forename;\n    this.lastname = lastname;\n  }\n  public String getForename() {\n    return this.forename;\n  }\n  public String getLastname() {\n    return this.lastname;\n  }\n}\n```", "```java\nObservable\n  .just(new User(\"Dali\", \"Bali\"))\n  .map(u -> u.getForename() + \" \" + u.getLastname())\n  .subscribe(System.out::println);\n```", "```java\nvoid subscribePrint(Observable<T> observable, String name) {\n  observable.subscribe(\n    (v) -> System.out.println(name + \" : \" + v),\n    (e) -> {\n      System.err.println(\"Error from \" + name + \":\");\n      System.err.println(e.getMessage());\n    },\n    () -> System.out.println(name + \" ended!\")\n  );\n}\n```", "```java\nsubscribePrint(\n  Observable.interval(500L, TimeUnit.MILLISECONDS),\n  \"Interval Observable\"\n);\nsubscribePrint(\n  Observable.timer(0L, 1L, TimeUnit.SECONDS),\n  \"Timed Interval Observable\"\n);\nsubscribePrint(\n  Observable.timer(1L, TimeUnit.SECONDS),\n  \"Timer Observable\"\n);\n\nsubscribePrint(\n  Observable.error(new Exception(\"Test Error!\")),\n  \"Error Observable\"\n);\nsubscribePrint(Observable.empty(), \"Empty Observable\");\nsubscribePrint(Observable.never(), \"Never Observable\");\nsubscribePrint(Observable.range(1, 3), \"Range Observable\");\nThread.sleep(2000L);\n```", "```java\nTimed Interval Observable : 0\nError from Error Observable:\nTest Error!\nRange Observable : 1\nRange Observable : 2\nRange Observable : 3\nRange Observable ended!\nEmpty Observable ended!\nInterval Observable : 0\nInterval Observable : 1\nTimed Interval Observable : 1\nTimer Observable : 0\nTimer Observable ended!\nInterval Observable : 2\nInterval Observable : 3\nTimed Interval Observable : 2\n\n```", "```java\npublic final static <T> Observable<T> create(OnSubscribe<T>)\n```", "```java\n<T> Observable<T> fromIterable(final Iterable<T> iterable) {\n  return Observable.create(new OnSubscribe<T>() {\n    @Override\n    public void call(Subscriber<? super T> subscriber) {\n      try {\n        Iterator<T> iterator = iterable.iterator(); // (1)\n        while (iterator.hasNext()) { // (2)\n          subscriber.onNext(iterator.next());\n        }\n        subscriber.onCompleted(); // (3)\n      }\n      catch (Exception e) {\n        subscriber.onError(e); // (4)\n      }\n    }\n  });\n}\n```", "```java\n<T> Observable<T> fromIterable(final Iterable<T> iterable) {\n  return Observable.create(new OnSubscribe<T>() {\n    @Override\n    public void call(Subscriber<? super T> subscriber) {\n      try {\n        Iterator<T> iterator = iterable.iterator();\n        while (iterator.hasNext()) {\n          if (subscriber.isUnsubscribed()) {\n return;\n }\n          subscriber.onNext(iterator.next());\n        }\n        if (!subscriber.isUnsubscribed()) {\n subscriber.onCompleted();\n }\n }\n catch (Exception e) {\n if (!subscriber.isUnsubscribed()) {\n subscriber.onError(e);\n }\n }\n    }\n  });\n}\n```", "```java\nPath path = Paths.get(\"src\", \"main\", \"resources\", \"lorem_big.txt\"); // (1)\nList<String> data = Files.readAllLines(path);\nObservable<String> observable = fromIterable(data).subscribeOn(Schedulers.computation()); // (2)\nSubscription subscription = subscribePrint(observable, \"File\");// (3)\nSystem.out.println(\"Before unsubscribe!\");\nSystem.out.println(\"-------------------\");\nsubscription.unsubscribe(); // (4)\nSystem.out.println(\"-------------------\");\nSystem.out.println(\"After unsubscribe!\");\n```", "```java\nFile : Donec facilisis sollicitudin est non molestie.\nFile : Integer nec magna ac ex rhoncus imperdiet.\nBefore unsubscribe!\n-------------------\nFile : Nullam pharetra iaculis sem.\n-------------------\nAfter unsubscribe!\n\n```", "```java\nObservable<Long> interval = Observable.interval(100L, TimeUnit.MILLISECONDS);\nConnectableObservable<Long> published = interval.publish();\nSubscription sub1 = subscribePrint(published, \"First\");\nSubscription sub2 = subscribePrint(published, \"Second\");\npublished.connect();\nSubscription sub3 = null;\ntry {\n  Thread.sleep(500L);\n  sub3 = subscribePrint(published, \"Third\");\n  Thread.sleep(500L);\n}\ncatch (InterruptedException e) {}\nsub1.unsubscribe();\nsub2.unsubscribe();\nsub3.unsubscribe();\n```", "```java\nObservable<Long> refCount = interval.publish().refCount();\nSubscription sub1 = subscribePrint(refCount, \"First\");\nSubscription sub2 = subscribePrint(refCount, \"Second\");\ntry {\n  Thread.sleep(300L);\n}\ncatch (InterruptedException e) {}\nsub1.unsubscribe();\nsub2.unsubscribe();\nSubscription sub3 = subscribePrint(refCount, \"Third\");\ntry {\n  Thread.sleep(300L);\n}\ncatch (InterruptedException e) { }\nsub3.unsubscribe();\n```", "```java\nObservable<Long> interval = Observable.interval(100L, TimeUnit.MILLISECONDS); // (1)\nSubject<Long, Long> publishSubject = PublishSubject.create(); // (2)\ninterval.subscribe(publishSubject);\n// (3)\nSubscription sub1 = subscribePrint(publishSubject, \"First\");\nSubscription sub2 = subscribePrint(publishSubject, \"Second\");\nSubscription sub3 = null;\ntry {\n  Thread.sleep(300L);\n  publishSubject.onNext(555L); // (4)\n  sub3 = subscribePrint(publishSubject, \"Third\"); // (5)\n  Thread.sleep(500L);\n}\ncatch (InterruptedException e) {}\nsub1.unsubscribe(); // (6)\nsub2.unsubscribe();\nsub3.unsubscribe();\n```", "```java\npublic class ReactiveSum { // (1)\n  private BehaviorSubject<Double> a = BehaviorSubject.create(0.0);\n private BehaviorSubject<Double> b = BehaviorSubject.create(0.0);\n private BehaviorSubject<Double> c = BehaviorSubject.create(0.0);\n  public ReactiveSum() { // (2)\n    Observable.combineLatest(a, b, (x, y) -> x + y).subscribe(c);\n  }\n  public double getA() { // (3)\n    return a.getValue();\n  }\n  public void setA(double a) {\n    this.a.onNext(a);\n  }\n  public double getB() {\n    return b.getValue();\n  }\n  public void setB(double b) {\n    this.b.onNext(b);\n  }\n  public double getC() { // (4)\n    return c.getValue();\n  }\n  public Observable<Double> obsC() {\n    return c.asObservable();\n  }\n}\n```", "```java\nReactiveSum sum = new ReactiveSum();\nsubscribePrint(sum.obsC(), \"Sum\");\nsum.setA(5);\nsum.setB(4);\n```", "```java\nSum : 0.0\nSum : 5.0\nSum : 9.0\n\n```"]