["```java\nprotected void navigate(Event event, URL fxmlDocName) throws IOException {\n  //Loading new fxml UI document\n  Parent pageParent = FXMLLoader.load(fxmlDocName);\n  //Creating new scene\n  Scene scene = new Scene(pageParent);\n  //get current stage\n  Stage appStage = (Stage)((Node) event.getSource()).getScene().getWindow();\n  //Hide old stage\n  appStage.hide(); // Optional\n  //Set stage with new Scene\n  appStage.setScene(scene);\n  //Show up the stage\n  appStage.show();\n}\n```", "```java\n<Button alignment=\"TOP_CENTER\"\n        contentDisplay=\"TEXT_ONLY\"\n        mnemonicParsing=\"false\"\n        onAction=\"#newNote\" \n        text=\"New Note\" \n        textAlignment=\"CENTER\" \n        wrapText=\"true\" \n/>\n```", "```java\n@FXML\n private void newNote(ActionEvent event) throws IOException {\n        editNote = null;\n        navigate(event, ADD.getPage());\n }\n```", "```java\n<Button alignment=\"TOP_CENTER\"    \n        contentDisplay=\"TEXT_ONLY\"\n        mnemonicParsing=\"false\"\n        onAction=\"#back\" \n        text=\"Notes List\" \n        textAlignment=\"CENTER\"\n        wrapText=\"true\"\n/>\n```", "```java\n@FXML\nprivate void back(ActionEvent event) throws IOException {\n        navigate(event, FXMLPage.LIST.getPage());\n}\n```", "```java\npublic class Note {\n    private final SimpleStringProperty title;\n    private final SimpleStringProperty description;\n    public Note(String title, String description) {\n        this.title = new SimpleStringProperty(title);\n        this.description = new SimpleStringProperty(description);\n    }\n    public String getTitle() {\n        return title.get();\n    }\n    public void setTitle(String title) {\n        this.title.set(title);\n    }\n    public String getDescription() {\n        return description.get();\n    }\n    public void setDescription(String description) {\n        this.description.set(description);\n    }\n}\n```", "```java\nprotected static ObservableList<Note> data = FXCollections.<Note>observableArrayList(\n  new Note(\"Note 1\", \"Description of note 41\"),\n    new Note(\"Note 2\", \"Description of note 32\"),\n    new Note(\"Note 3\", \"Description of note 23\"),\n    new Note(\"Note 4\", \"Description of note 14\"));\n```", "```java\nFilteredList<Note> filteredData = new FilteredList<>(data, n -> true);\n```", "```java\nnotesListTable.setItems(filteredData);\n```", "```java\ntitleTc.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\ndescriptionTc.setCellValueFactory(new PropertyValueFactory<>(\"description\"));\n```", "```java\nsearchNotes.setOnKeyReleased(e ->\n{\n  filteredData.setPredicate(n ->\n  {              \nif (searchNotes.getText() == null || searchNotes.getText().isEmpty())\nreturn true;\n\nreturn n.getTitle().contains(searchNotes.getText())\n|| n.getDescription().contains(searchNotes.getText());\n  });\n});\n```", "```java\nvar latlng = new google.maps.LatLng(30.0594885, 31.2584644);\nvar Options = {\n    zoom: 13,\n    center: latlng,\n    mapTypeId: google.maps.MapTypeId.ROADMAP\n};\nvar map = new google.maps.Map(document.getElementById(\"canvas\"), Options);\n```", "```java\nWebView webView = new WebView();\nWebEngine webEngine = webView.getEngine();\nfinal TextField latitude = new TextField(\"\" + 29.8770037);\nfinal TextField longitude = new TextField(\"\" + 31.3154412);\nButton update = new Button(\"Update\");\n```", "```java\nupdate.setOnAction(evt -> {\n   double lat = Double.parseDouble(latitude.getText());\n   double lon = Double.parseDouble(longitude.getText());\n\n   webEngine.executeScript(\"\" +\n             \"window.lat = \" + lat + \";\" +\n             \"window.lon = \" + lon + \";\" +\n             \"document.goToLocation(window.lat, window.lon);\");\n});\n```"]