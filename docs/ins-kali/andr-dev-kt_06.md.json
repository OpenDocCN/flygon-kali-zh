["```kt\n    // Java\n\n    ArrayList list = new ArrayList();\n\n    list.add(1);\n\n    list.add(2);\n\n    int first = (int) list.get(0);\n\n    int second = (int) list.get(1);\n```", "```kt\n    class SimpleList<T> // T is type parameter\n```", "```kt\n     // Usage\n\n    var intList: SimpleList<Int>\n\n    var studentList: SimpleList<Student>\n\n    var carList:SimpleList<Car>\n```", "```kt\n    class SimpleList<T> { \n\n       fun add(item:T) { // 1 \n           // code \n       }  \n       fun get(intex: Int): T { // 2 \n           // code \n       } \n    } \n```", "```kt\n    class Student(val name: String)\n\n    val studentList = SimpleList<Student>()\n\n    studentList.add(Student(\"Ted\"))\n\n    println(studentList.getItemAt(0).name)\n```", "```kt\n    var studentList: SimpleList<Student>\n\n    studentList.add(Student(\"Ted\"))\n\n    studentList.add(true) // error\n```", "```kt\n    val fruits = listOf(\"Babana\", \"Orange\", \"Apple\", \"Blueberry\") \n    val bFruits = fruits.filter { it.startsWith(\"B\") } //1 \n    println(bFruits) // Prints: [Babana, Blueberry] \n```", "```kt\n    class SimpleList<T>\n\n    class SimpleList<T: Any?>\n```", "```kt\n    class SimpleList<T>\n\n    class Student\n\n    //usage\n\n    var intList = SimpleList<Int>()\n\n    var studentList = SimpleList<Student>()\n\n    var carList = SimpleList<Boolean>()\n```", "```kt\n    class SimpleList<T: Number>\n\n    //usage\n\n    var numberList = SimpleList<Number>()\n\n    var intList = SimpleList<Int>()\n\n    var doubleList = SimpleList<Double>()\n\n    var stringList = SimpleList<String>() //error\n```", "```kt\n    class Action (val name:String)\n\n    class ActionGroup<T : Action> \n\n    // non-nullable type parameter upper bound\n\n    var actionGroupA: ActionGroup<Action>\n\n    var actionGroupB: ActionGroup<Action?> // Error\n```", "```kt\n    class ActionGroup<T : Action>(private val list: List<T>) {\n\n        fun last(): T = list.last()\n\n    }\n```", "```kt\n    val actionGroup = ActionGroup<Action>(listOf())\n\n    //...\n\n    val action = actionGroup.last \n\n    //error: NoSuchElementException: List is empty\n\n    println(action.name)\n```", "```kt\n    class ActionGroup<T : Action>(private val list: List<T>) {\n\n        fun lastOrNull(): T = list.lastOrNull() //error\n\n    }\n```", "```kt\n    class ActionGroup<T : Action>(private val list: List<T>) { // 1\n\n        fun lastOrNull(): T? = list.lastOrNull() // 2\n\n    }\n```", "```kt\n    val actionGroup= ActionGroup<Action>(listOf())\n\n    val actionGroup = actionGroup.lastOrNull() \n\n    // Inferred type is Action?\n\n    println(actionGroup?.name) // Prints: null\n```", "```kt\n    open class Action\n\n    class ActionGroup<T : Action?>(private val list: List<T>) {\n\n        fun lastOrNull(): T? = list.lastOrNull()\n\n    }\n\n    // Usage\n\n    val actionGroup = ActionGroup(listOf(Action(), null))\n\n    println(actionGroup.lastOrNull()) // Prints: null\n```", "```kt\n    open class Animal(val name: String)\n\n    class Dog(name: String): Animal(name)\n```", "```kt\n    fun present(animal: Animal) {\n\n        println( \"This is ${ animal. name } \" )\n\n    }\n\n    present(Dog( \"Pluto\" )) // Prints: This is Pluto\n```", "```kt\n    class Box<T>\n\n    open class Animal\n\n    class Dog : Animal()\n\n    var animalBox = Box<Animal>()\n\n    var dogBox = Box<Dog>()\n\n    //one of the lines below line must be commented out,\n\n    //otherwise Android Studio will show only one error\n\n    animalBox = dogBox // 2, error\n\n    dogBox = animalBox // 1, error\n```", "```kt\n    public class Box<T> { }\n\n    fun sum(list: Box<Number>) { /* ... */ }\n\n    // Usage\n\n    sum(Box<Any>()) // Error\n\n    sum(Box<Number>()) // Ok\n\n    sum(Box<Int>()) // Error\n```", "```kt\n    //Java\n\n    public void sum(Box<? extends Number> list) { /* ... */ }\n\n    // Usage\n\n    sum(new Box<Any>()) // Error\n\n    sum(new Box<Number>()) // Ok\n\n    sum(new Box<Int>()) // Ok\n```", "```kt\n    class Box<T>\n\n    fun sum(list: Box<out Number>) { /* ... */ }\n\n    //usage\n\n    sum(Box<Any>()) // Error\n\n    sum(Box<Number>()) // Ok\n\n    sum(Box<Int>()) // Ok\n```", "```kt\n    //Java\n\n    public void sum(Box<? super Number> list) { /* ... */ }\n\n    //usage\n\n    sum(new Box<Any>()) // Ok\n\n    sum(new Box<Number>()) // Ok\n\n    sum(new Box<Int>()) // Error\n```", "```kt\n    class Box<T>\n\n    fun sum(list: Box<in Number>) { /* ... */ }\n\n    //usage\n\n    sum(Box<Any>()) // Ok\n\n    sum(Box<Number>()) // Ok\n\n    sum(Box<Int>()) // Error\n```", "```kt\n    interface BaseView\n\n    interface ProductView : BaseView\n\n    class Presenter<T>\n\n    // Usage\n\n    var preseter = Presenter<BaseView>()\n\n    var productPresenter = Presenter<ProductView>()\n\n    preseter = productPresenter\n\n    // Error: Type mismatch\n\n    // Required: Presenter<BaseView>\n\n    // Found: Presenter<ProductView>\n```", "```kt\n    var preseter: Presenter<out BaseView> = Presenter<BaseView>() //1\n\n    var productPresenter = Presenter<ProductView>()\n\n    preseter = productPresenter\n```", "```kt\n    //Variable declared inside class A and class B\n\n    var preseter = Presenter<BaseView>()\n\n    var preseter: Presenter<out BaseView> = Presenter<ProductView>()\n\n    preseter = productPresenter  \n```", "```kt\ninterface BaseView\n\ninterface ProductView: BaseView\n\nclass Presenter<out T> // 1   \n\n//usage\n\n//Variable declared inside class A and B\n\nvar preseter = Presenter<BaseView>()\n\nvar productPresenter = Presenter<ProductView>()\n\npreseter = productPresenter\n```", "```kt\n    public class Computer {\n\n        public Computer() {\n\n            String[] stringArray = new String[]{\"a\", \"b\", \"c\"};\n\n            printArray(stringArray); //Pass instance of String[]\n\n        }\n\n        void printArray(Object[] array) { \n\n            //Define parameter of type Object[]\n\n            System.out.print(array);\n\n        }\n\n    }\n```", "```kt\n    // Java\n\n    static void print(Object[] array) {\n\n        for (int i = 0; i <= array.length - 1; i++)\n\n        System.out.print(array[i] + \" \");\n\n        System.out.println();\n\n    }\n\n    // Usage\n\n    String[] fruits = new String[] {\"Pineapple\",\"Apple\", \"Orange\", \n\n                                    \"Banana\"};\n\n    print(fruits); // Prints: Pineapple Apple Orange Banana\n\n    Arrays.sort(fruits);\n\n    print(fruits); // Prints: Apple Banana Orange Pineapple\n```", "```kt\n    public class Computer {\n\n        public Computer() {\n\n            Number[] numberArray = new Number[]{1, 2, 3};\n\n            updateArray(numberArray);\n\n        }\n\n        void updateArray(Object[] array) {\n\n            array[0] = \"abc\"; \n\n            // Error, java.lang.ArrayStoreException: java.lang.String\n\n        }\n\n    }\n```", "```kt\n    public class Array<T> { /*...*/ }\n```", "```kt\n    public class Array<T> { /*...*/ }\n\n    class Computer {\n\n        init {\n\n            val numberArray = arrayOf<Number>(1, 2, 3)\n\n            updateArray(numberArray)\n\n        }\n\n        internal fun updateArray(array: Array<Any>) {\n\n            array[0] = \"abc\" \n\n            //error, java.lang.ArrayStoreException: java.lang.String\n\n        }\n\n    }\n```", "```kt\n    interface List<out E> : Collection<E> { /*...*/ }\n\n    public interface MutableList<E> : List<E>, MutableCollection<E> {     \n\n        /*...*/ \n\n    }\n```", "```kt\n    fun addElement(mutableList: MutableList<Any>) {\n\n        mutableList.add(\"Cat\")\n\n    }\n\n    // Usage\n\n    val mutableIntList = mutableListOf(1, 2, 3, 4)\n\n    val mutableAnyList = mutableListOf<Any>(1, 'A')\n\n    addElement(mutableIntList) // Error: Type mismatch\n\n    addElement(mutableAnyList)\n```", "```kt\n    fun printElements(list: List<Any>) {\n\n        for(e in list) print(e)\n\n    }\n\n    // Usage\n\n    val intList = listOf(1, 2, 3, 4)\n\n    val anyList = listOf<Any>(1, 'A')\n\n    printElements(intList) // Prints: 1234\n\n    printElements(anyList) // Prints: 1A\n```", "```kt\n    interface Stack<T> {\n\n        fun push(t:T) // Generic type at in position\n\n        fun pop():T // Generic type at out position\n\n        fun swap(t:T):T // Generic type at in and out positions\n\n        val last: T // Generic type at out position\n\n        var special: T // Generic type at out position\n\n    }\n```", "```kt\n    class ConsumerProducer<in T, out R> {\n\n        fun consumeItemT(t: T): Unit { } // 1\n\n        fun consumeItemR(r: R): Unit { } // 2, error\n\n        fun produceItemT(): T { // 3, error\n\n            // Return instance of type T\n\n        }\n\n        fun produceItemR(): R { // 4\n\n            //Return instance of type R\n\n        }\n\n    }\n```", "```kt\n    class ConsumerProducer<in T, out R> {\n\n        private fun consumeItemT(t: T): Unit { }\n\n        private fun consumeItemR(r: R): Unit { }\n\n        private fun produceItemT(): T {\n\n            // Return instance of type T\n\n        }\n\n        private fun produceItemR(): R {\n\n            //Return instance of type R\n\n        }\n\n    }\n```", "```kt\n    class Producer<out T>(t: T)\n\n    // Usage\n\n    val stringProducer = Producer(\"A\")\n\n    val anyProducer: Producer<Any> = stringProducer\n```", "```kt\n    class Producer<out T>(val t: T) // Ok, safe\n```", "```kt\n    class Producer<out T>(var t: T) // Error, not safe\n```", "```kt\n    class Producer<out T>(private var t:T)\n```", "```kt\n    package test\n\n    class Box<T>\n\n    val intBox = Box<Int>()\n\n    val stringBox = Box<String>()\n\n    println(intBox.javaClass) // prints: test.Box\n\n    println(stringBox.javaClass) // prints: test.Box\n```", "```kt\n    /*\n\n    java.lang.ClassFormatError: Duplicate method name&signature...\n\n    */\n\n    fun sum(ints: List<Int>) {\n\n        println(\"Ints\")\n\n    }\n\n    fun sum(strings: List<String>) {\n\n        println(\"Ints\")\n\n    }\n```", "```kt\n    /*\n\n    java.lang.ClassFormatError: Duplicate method name&signature...\n\n    */\n\n    fun sum(ints: List) {\n\n        println(\"Ints\")\n\n    }\n\n    fun sum(strings: List) {\n\n        println(\"Ints\")\n\n    }\n```", "```kt\n    @JvmName(\"intSum\") fun sum(ints: List<Int>) {\n\n        println(\"Ints\")\n\n    }\n\n    fun sum(strings: List<String>) {\n\n        println(\"Ints\")\n\n    }\n```", "```kt\n    // Java\n\n    TestKt.intSum(listOfInts);\n```", "```kt\n    fun <T> typeCheck(s: Any) {\n\n        if(s is T){ \n\n        // Error: cannot check for instance of erased type: T\n\n            println(\"The same types\")\n\n        } else {\n\n            println(\"Different types\")\n\n        }\n\n    }\n```", "```kt\n    interface View\n\n    class ProfileView: View\n\n    class HomeView: View\n\n    inline fun <reified T> typeCheck(s: Any) { // 1\n\n        if(s is T){\n\n            println(\"The same types\")\n\n        } else {\n\n        println(\"Different types\")\n\n        }\n\n    }\n\n    // Usage\n\n    typeCheck<ProfileView>(ProfileView()) // Prints: The same types\n\n    typeCheck<HomeView>(ProfileView()) // Prints: Different types\n\n    typeCheck<View>(ProfileView()) // Prints: The same types\n```", "```kt\n    inline fun <reified T> isOpen(): Boolean {\n\n        return T::class.isOpen\n\n    }\n```", "```kt\n    //Java\n\n    startActivity(Intent(this, ProductActivity::class.java))\n```", "```kt\n    inline fun <reified T : Activity> startActivity(context: Context) {\n\n        context.startActivity(Intent(context, T::class.java))\n\n    }\n\n    // Usage\n\n    startActivity<UserDetailsActivity>(context)\n```", "```kt\n    startActivity<ProductActivity>(\"id\" to 123, \"extended\" to true)\n```", "```kt\n    compile \"org.jetbrains.anko:anko-appcompat-v7-commons:$anko_version\"\n```", "```kt\n    val list = listOf(1,2,3)\n\n    println(list.javaClass) // Prints: class java.util.Arrays$ArrayList\n```", "```kt\n    /*\n\n    Compile time error: cannot check instance of erased type: \n\n    List<String>\n\n    */\n\n    if(collection is List<Int>) {\n\n        //...\n\n    }\n```", "```kt\n    SimpleList<> // Java: ok\n\n    SimpleList<> // Kotlin: error\n```", "```kt\n    if(collection is List<*>) {\n\n        //...\n\n    }\n```", "```kt\n    class Box<T>\n\n    val anyBox = Box<Any>()\n\n    val intBox = Box<Int>()\n\n    val stringBox = Box<String>()\n\n    var unknownBox: Box<*>\n\n    unknownBox = anyBox // Ok\n\n    unknownBox = intBox // Ok\n\n    unknownBox = stringBox // Ok\n```", "```kt\n    val anyBox: Box<Any> = Box<Int> // Error: Type mismatch\n```", "```kt\n    class Container<T, T2>\n\n    val container: Container<*, *>\n```", "```kt\n    fun printSize(list: MutableList<*>) {\n\n        println(list.size)\n\n    }\n\n    //usage\n\n    val stringList = mutableListOf(\"5\", \"a\", \"2\", \"d\")\n\n    val intList = mutableListOf(3, 7)\n\n    printSize(stringList) // prints: 4\n\n    printSize(intList) // prints: 2\n```", "```kt\n    class Box<T, T2>\n```", "```kt\n    class Box<RequestT>\n```"]