["```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Test;\n\nclass SimpleJUnit5Test {\n\n    @Test\n    void mySimpleTest() {\n          // My test logic here\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass LifecycleJUnit5Test {\n\n      @BeforeAll\n      static void setupAll() {\n            System.*out*.println(\"Setup ALL TESTS in the class\");\n      }\n\n      @BeforeEach\n      void setup() {\n            System.*out*.println(\"Setup EACH TEST in the class\");\n      }\n\n      @Test\n      void testOne() {\n            System.*out*.println(\"TEST 1\");\n      }\n\n      @Test\n      void testTwo() {\n            System.*out*.println(\"TEST 2\");\n      }\n\n      @AfterEach\n      void teardown() {\n            System.*out*.println(\"Teardown EACH TEST in the class\");\n      }\n\n      @AfterAll\n      static void teardownAll() {\n            System.*out*.println(\"Teardown ALL TESTS in the class\");\n      }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\nclass DisabledTest {\n\n    @Disabled\n    @Test\n    void skippedTest() {\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\n@Disabled(\"All test in this class will be skipped\")\nclass AllDisabledTest {\n\n    @Test\n    void skippedTestOne() {\n    }\n\n    @Test\n    void skippedTestTwo() {\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\n@DisplayName(\"A special test case\")\nclass DisplayNameTest {\n\n    @Test\n    @DisplayName(\"Custom test name containing spaces\")\n    void testWithDisplayNameContainingSpaces() {\n    }\n\n    @Test\n    @DisplayName(\"(\u256f\u00b0\u0414\u00b0)\u256f\")\n    void testWithDisplayNameContainingSpecialCharacters() {\n    }\n\n    @Test\n    @DisplayName(\"\")\n    void testWithDisplayNameContainingEmoji() {\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nclass StandardAssertionsTest {\n\n    @Test\n    void standardAssertions() {\n          *assertEquals*(2, 2);\n          *assertTrue*(true,\n          \"The optional assertion message is now the last parameter\");\n          *assertFalse*(false, () -> \"Really \" + \"expensive \" + \"message\" \n            + \".\");\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass GroupedAssertionsTest {\n\n    @Test\n    void groupedAssertions() {\n          Address address = new Address(\"John\", \"Smith\");\n          // In a grouped assertion all assertions are executed, and any\n          // failures will be reported together.\n          *assertAll*(\"address\", () -> *assertEquals*(\"John\", \n          address.getFirstName()),\n              () -> *assertEquals*(\"User\", address.getLastName()));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nclass ExceptionTest {\n\n    @Test\n    void exceptionTesting() {\n          Throwable exception = \n            *assertThrows*(IllegalArgumentException.class,\n            () -> {\n               throw new IllegalArgumentException(\"a message\");});\n          *assertEquals*(\"a message\", exception.getMessage());\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static java.time.Duration.ofMillis;\nimport static java.time.Duration.ofMinutes;\nimport static org.junit.jupiter.api.Assertions.assertTimeout;\n\nimport org.junit.jupiter.api.Test;\n\nclass TimeoutExceededTest {\n\n    @Test\n    void timeoutNotExceeded() {\n          *assertTimeout*(*ofMinutes*(2), () -> {\n              // Perform task that takes less than 2 minutes\n          });\n    }\n\n    @Test\n    void timeoutExceeded() {\n          *assertTimeout*(*ofMillis*(10), () -> {\n              Thread.*sleep*(100);\n          });\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static java.time.Duration.ofMinutes;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTimeout;\n\nimport org.junit.jupiter.api.Test;\n\nclass TimeoutWithResultOrMethodTest {\n\n    @Test\n    void timeoutNotExceededWithResult() {\n          String actualResult = *assertTimeout*(*ofMinutes*(1), () -> {\n              return \"hi there\";\n          });\n          *assertEquals*(\"hi there\", actualResult);\n    }\n\n    @Test\n    void timeoutNotExceededWithMethod() {\n          String actualGreeting = *assertTimeout*(*ofMinutes*(1),\n              TimeoutWithResultOrMethodTest::*greeting*);\n          *assertEquals*(\"hello world!\", actualGreeting);\n    }\n\n    private static String greeting() {\n          return \"hello world!\";\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static java.time.Duration.ofMillis;\nimport static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;\n\nimport org.junit.jupiter.api.Test;\n\nclass TimeoutWithPreemptiveTerminationTest {\n\n      @Test\n      void timeoutExceededWithPreemptiveTermination() {\n            *assertTimeoutPreemptively*(*ofMillis*(10), () -> {\n                 Thread.*sleep*(100);\n            });\n      }\n\n}\n```", "```java\n<dependency>\n      <groupId>org.hamcrest</groupId>\n      <artifactId>hamcrest-core</artifactId>\n      <version>${hamcrest.version}</version>\n      <scope>test</scope>\n</dependency>\n```", "```java\ndependencies {\n      testCompile(\"org.hamcrest:hamcrest-core:${hamcrest}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.hamcrest.CoreMatchers.containsString;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass HamcrestTest {\n\n    @Test\n    void assertWithHamcrestMatcher() {\n          *assertThat*(2 + 1, *equalTo*(3));\n          *assertThat*(\"Foo\", *notNullValue*());\n          *assertThat*(\"Hello world\", *containsString*(\"world\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\n@Tag(\"simple\")\nclass SimpleTaggingTest {\n\n      @Test\n      @Tag(\"taxes\")\n      void testingTaxCalculation() {\n      }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\n@Tag(\"functional\")\nclass FunctionalTest {\n\n    @Test\n    void testOne() {\n        System.*out*.println(\"Functional Test 1\");\n    }\n\n    @Test\n    void testTwo() {\n        System.*out*.println(\"Functional Test 2\");\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\n@Tag(\"non-functional\")\nclass NonFunctionalTest {\n\n    @Test\n    @Tag(\"performance\")\n    @Tag(\"load\")\n    void testOne() {\n        System.*out*.println(\"Non-Functional Test 1 (Performance/Load)\");\n    }\n\n    @Test\n    @Tag(\"performance\")\n    @Tag(\"stress\")\n    void testTwo() {\n        System.*out*.println(\"Non-Functional Test 2 (Performance/Stress)\");\n    }\n\n    @Test\n    @Tag(\"security\")\n    void testThree() {\n        System.*out*.println(\"Non-Functional Test 3 (Security)\");\n    }\n\n    @Test\n    @Tag(\"usability\")\n    void testFour() {\n        System.*out*.println(\"Non-Functional Test 4 (Usability)\");    }\n\n}\n```", "```java\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <properties>\n                        <includeTags>functional</includeTags>\n                        <excludeTags>non-functional</excludeTags>\n                    </properties>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.junit.platform</groupId>\n                        <artifactId>junit-platform-surefire-provider</artifactId>\n                        <version>${junit.platform.version}</version>\n                    </dependency>\n                    <dependency>\n                        <groupId>org.junit.jupiter</groupId>\n                        <artifactId>junit-jupiter-engine</artifactId>\n                        <version>${junit.jupiter.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n```", "```java\n<configuration>\n   <includes>\n      <include>**/Test*.java</include>\n      <include>**/*Test.java</include>\n      <include>**/*TestCase.java</include>\n   </includes>\n</configuration>\n<configuration>\n   <excludes>\n      <exclude>**/TestCircle.java</exclude>\n      <exclude>**/TestSquare.java</exclude>\n   </excludes>\n</configuration>\n```", "```java\njunitPlatform {\n      filters {\n            engines {\n                  include 'junit-jupiter'\n                  exclude 'junit-vintage'\n            }\n            tags {\n                  include 'non-functional'\n                  exclude 'functional'\n            }\n            packages {\n                  include 'io.github.bonigarcia'\n                  exclude 'com.others', 'org.others'\n            }\n            includeClassNamePattern '.*Spec'\n            includeClassNamePatterns '.*Test', '.*Tests'\n      }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.junit.jupiter.api.Tag;\n\n@Target({ ElementType.***TYPE**, ElementType.**METHOD** })* @Retention(RetentionPolicy.***RUNTIME**)* @Tag(\"functional\")\npublic @interface Functional {\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.junit.jupiter.api.Tag;\n\n@Target({ ElementType.***TYPE**, ElementType.**METHOD** })* @Retention(RetentionPolicy.***RUNTIME**)* @Tag(\"non-functional\")\n@Tag(\"security\")\npublic @interface Security {\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.junit.jupiter.api.Tag;\n\n@Target({ ElementType.***TYPE**, ElementType.**METHOD** })* @Retention(RetentionPolicy.***RUNTIME**)* @Tag(\"non-functional\")\n@Tag(\"performance\")\n@Tag(\"load\")\npublic @interface Load {\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.junit.jupiter.api.Tag;\n\n@Target({ ElementType.***TYPE**, ElementType.**METHOD** })* @Retention(RetentionPolicy.***RUNTIME**)* @Tag(\"non-functional\")\n@Tag(\"performance\")\n@Tag(\"stress\")\npublic @interface Stress {\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Test;\n\n@Functional\nclass FunctionalTest {\n\n      @Test\n      void testOne() {\n            System.*out*.println(\"Test 1\");\n      }\n\n      @Test\n      void testTwo() {\n            System.*out*.println(\"Test 2\");\n      }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.Test;\n\nclass NonFunctionalTest {\n\n    @Test\n    @Load\n    void testOne() {\n        System.*out*.println(\"Test 1\");\n    }\n\n    @Test\n    @Stress\n    void testTwo() {\n        System.*out*.println(\"Test 2\");\n    }\n\n    @Test\n    @Security\n    void testThree() {\n        System.*out*.println(\"Test 3\");\n    }\n\n    @Test\n    @Usability\n    void testFour() {\n        System.*out*.println(\"Test 4\");    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\npublic enum Os {\n    ***WINDOWS***, ***MAC***, ***LINUX***, ***OTHER***;\n\n    public static Os determine() {\n        Os out = ***OTHER***;\n        String myOs = System.*getProperty*(\"os.name\").toLowerCase();\n        if (myOs.contains(\"win\")) {\n            out = ***WINDOWS***;\n        } \n        else if (myOs.contains(\"mac\")) {\n            out = ***MAC***;\n        } \n        else if (myOs.contains(\"nux\")) {\n            out = ***LINUX***;\n        }\n        return out;\n    }\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Arrays;\nimport java.util.Optional;\nimport org.junit.jupiter.api.extension.ConditionEvaluationResult;\nimport org.junit.jupiter.api.extension.ExecutionCondition;\nimport org.junit.jupiter.api.extension.ExtensionContext;\nimport org.junit.platform.commons.util.AnnotationUtils;\n\npublic class OsCondition implements ExecutionCondition {\n\n    @Override\n    public ConditionEvaluationResult evaluateExecutionCondition(\n            ExtensionContext context) {\n          Optional<AnnotatedElement> element = context.getElement();\n          ConditionEvaluationResult out = ConditionEvaluationResult\n                .*enabled*(\"@DisabledOnOs is not present\");\n          Optional<DisabledOnOs> disabledOnOs = AnnotationUtils\n                .*findAnnotation*(element, DisabledOnOs.class);\n          if (disabledOnOs.isPresent()) {\n             Os myOs = Os.*determine*();\n             if(Arrays.asList(disabledOnOs.get().value())\n                 .contains(myOs)) {\n             out = ConditionEvaluationResult\n               .*disabled*(\"Test is disabled on \" + myOs);\n             } \n else {\n               out = ConditionEvaluationResult\n                .*enabled*(\"Test is not disabled on \" + myOs);\n             }\n           }\n           System.*out*.println(\"--> \" + out.getReason().get());\n           return out;\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@Target({ ElementType.*TYPE*, ElementType.*METHOD* })\n@Retention(RetentionPolicy.*RUNTIME*)\n@ExtendWith(OsCondition.class)\npublic @interface DisabledOnOs {\n    Os[] value();\n}\n```", "```java\nimport org.junit.jupiter.api.Test;\n\nimport static io.github.bonigarcia.Os.*MAC*;\nimport static io.github.bonigarcia.Os.*LINUX*;\n\nclass DisabledOnOsTest {\n\n    @DisabledOnOs({ *MAC*, *LINUX* })\n    @Test\n    void conditionalTest() {\n        System.*out*.println(\"This test will be disabled on MAC and LINUX\");\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.junit.jupiter.api.Assertions.*fail*;\nimport static org.junit.jupiter.api.Assumptions.*assumeFalse*;\nimport static org.junit.jupiter.api.Assumptions.*assumeTrue*;\nimport static org.junit.jupiter.api.Assumptions.*assumingThat*;\n\nimport org.junit.jupiter.api.Test;\n\nclass AssumptionsTest {\n\n    @Test\n    void assumeTrueTest() {\n        *assumeTrue*(false);\n        *fail*(\"Test 1 failed\");\n    }\n\n    @Test\n    void assumeFalseTest() {\n        *assumeFalse*(this::getTrue);\n        *fail*(\"Test 2 failed\");\n    }\n\n    private boolean getTrue() {\n        return true;\n    }\n\n    @Test\n    void assummingThatTest() {\n        *assumingThat*(false, () -> *fail*(\"Test 3 failed\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nclass NestTest {\n\n    @BeforeEach\n    void setup1() {\n        System.*out*.println(\"Setup 1\");\n    }\n\n    @Test\n    void topTest() {\n       System.*out*.println(\"Test 1\");\n    }\n\n    @Nested\n    class InnerClass1 {\n\n        @BeforeEach\n        void setup2() {\n            System.*out*.println(\"Setup 2\");\n        }\n\n        @Test\n        void innerTest1() {\n            System.*out*.println(\"Test 2\");\n        }\n\n        @Nested\n        class InnerClass2 {\n\n            @Test\n void innerTest2() {\n                System.*out*.println(\"Test 3\");\n            }\n        } \n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\n@DisplayName(\"A stack test\")\n\n class StackTest {\n\n     @Test\n     @DisplayName(\"is instantiated\")\n     void isInstantiated() {\n     }\n\n     @Nested\n     @DisplayName(\"when empty\")\n     class WhenNew {\n\n         @Test\n         @DisplayName(\"is empty\")\n         void isEmpty() {\n         }\n\n         @Test\n         @DisplayName(\"throws Exception when popped\")\n         void throwsExceptionWhenPopped() {\n         }\n\n         @Test\n         @DisplayName(\"throws Exception when peeked\")\n         void throwsExceptionWhenPeeked() {\n         }\n\n         @Nested\n         @DisplayName(\"after pushing an element\")\n         class AfterPushing {\n\n             @Test\n             @DisplayName(\"it is no longer empty\")\n             void isNotEmpty() {\n             }\n\n             @Test\n             @DisplayName(\"returns the element when popped\")\n             void returnElementWhenPopped() {\n             }\n\n             @Test\n             @DisplayName(\"returns the element when peeked\")\n             void returnElementWhenPeeked() {\n             }\n\n         }\n     }\n }\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.RepeatedTest;\n\nclass SimpleRepeatedTest {\n\n    @RepeatedTest(5)\n    void test() {\n        System.*out*.println(\"Repeated test\");\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.RepeatedTest;\nimport org.junit.jupiter.api.TestInfo;\n\nclass TunningDisplayInRepeatedTest {\n\n    @RepeatedTest(value = 2, name = \"{displayName} \n    {currentRepetition}/{totalRepetitions}\")\n    @DisplayName(\"Repeat!\")\n    void customDisplayName(TestInfo testInfo) {\n        System.*out*.println(testInfo.getDisplayName());\n    }\n\n    @RepeatedTest(value = 2, name = RepeatedTest.*LONG_DISPLAY_NAME*)\n    @DisplayName(\"Test using long display name\")\n    void customDisplayNameWithLongPattern(TestInfo testInfo) {\n        System.*out*.println(testInfo.getDisplayName());\n    }\n\n    @RepeatedTest(value = 2, name = RepeatedTest.*SHORT_DISPLAY_NAME*)\n    @DisplayName(\"Test using short display name\")\n    void customDisplayNameWithShortPattern(TestInfo testInfo) {\n        System.*out*.println(testInfo.getDisplayName());\n    }\n\n}\n```", "```java\n<dependency>\n   <groupId>org.junit.jupiter</groupId>\n   <artifactId>junit-jupiter-migrationsupport</artifactId>\n   <version>${junit.jupiter.version}</version>\n   <scope>test</scope>\n</dependency>\n```", "```java\ndependencies {\n      testCompile(\"org.junit.jupiter:junit-jupiter-\n      migrationsupport:${junitJupiterVersion}\")\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport java.io.IOException;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.TemporaryFolder;\n\n@EnableRuleMigrationSupport\nclass TemporaryFolderRuleTest {\n\n    @Rule\n    TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n    @BeforeEach\n    void setup() throws IOException {\n        temporaryFolder.create();\n    }\n\n    @Test\n    void test() {\n        System.*out*.println(\"Temporary folder: \" +         \n            temporaryFolder.getRoot());\n    }\n\n    @AfterEach\n    void teardown() {\n        temporaryFolder.delete();\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\n\nimport org.junit.Rule;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.ErrorCollector;\n\n@EnableRuleMigrationSupport\nclass ErrorCollectorRuleTest {\n\n    @Rule\n    public ErrorCollector collector = new ErrorCollector();\n\n    @Test\n    void test() {\n        collector.checkThat(\"a\", *equalTo*(\"b\"));\n        collector.checkThat(1, *equalTo*(2));\n        collector.checkThat(\"c\", *equalTo*(\"c\"));\n    }\n\n}\n```", "```java\npackage io.github.bonigarcia;\n\nimport org.junit.Rule;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.ExpectedException;\n\n@EnableRuleMigrationSupport\nclass ExpectedExceptionRuleTest {\n\n    @Rule\n    ExpectedException thrown = ExpectedException.*none*();\n\n    @Test\n    void throwsNothing() {\n    }\n\n    @Test\n    void throwsNullPointerException() {\n        thrown.expect(NullPointerException.class);\n        throw new NullPointerException();\n    }\n\n}\n```"]