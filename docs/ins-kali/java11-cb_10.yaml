- en: Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下示例：
- en: Making an HTTP GET request
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出HTTP GET请求
- en: Making an HTTP POST request
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出HTTP POST请求
- en: Making an HTTP request for a protected resource
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为受保护的资源发出HTTP请求
- en: Making an asynchronous HTTP request
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出异步HTTP请求
- en: Making an HTTP request using Apache HttpClient
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Apache HttpClient发出HTTP请求
- en: Making an HTTP request using the Unirest HTTP client library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Unirest HTTP客户端库发出HTTP请求
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Java's support for interacting with HTTP-specific features has been very primitive.
    The `HttpURLConnection` class, available since JDK 1.1, provides APIs for interacting
    with URLs with HTTP-specific features. Since this API has been there even before
    HTTP/1.1, it lacked advanced features and was a pain to use. This is why developers
    mostly resorted to using third-party libraries, such as **Apache HttpClient**,
    Spring framework, and HTTP APIs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java对与HTTP特定功能进行交互的支持非常原始。自JDK 1.1以来可用的`HttpURLConnection`类提供了与具有HTTP特定功能的URL进行交互的API。由于此API甚至在HTTP/1.1之前就存在，它缺乏高级功能，并且使用起来很麻烦。这就是为什么开发人员大多倾向于使用第三方库，如**Apache
    HttpClient**、Spring框架和HTTP API。
- en: In JDK 9, a new HTTP Client API was introduced under JEP 110 ([http://openjdk.java.net/jeps/110](http://openjdk.java.net/jeps/110))
    as an incubator module [(http://openjdk.java.net/jeps/11](http://openjdk.java.net/jeps/11)).
    The same incubator module has been promoted as a standard module by the name of
    `java.net.http` under JEP 321 ([http://openjdk.java.net/jeps/321](http://openjdk.java.net/jeps/321)),
    which is part of the latest JDK 11 release.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在JDK 9中，引入了一个新的HTTP客户端API，作为孵化器模块的一部分，名称为`java.net.http`，在JEP 321 ([http://openjdk.java.net/jeps/321](http://openjdk.java.net/jeps/321))下被提升为标准模块，这是最新的JDK
    11版本的一部分。
- en: 'A note on incubator modules: An incubator module contains non-final APIs, which
    are significantly larger and not mature enough to be included in Java SE. This
    is a form of beta release of the API so that the developers get to use the APIs
    much earlier. But the catch is that there is no backward compatibility support
    for these APIs in the newer versions of JDK. This means that code that is dependent
    on the incubator modules might break with the newer versions of JDK. This might
    be due to the incubator module being promoted to Java SE or being silently dropped
    from the incubator modules.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于孵化器模块的说明：孵化器模块包含非最终API，这些API非常庞大，不够成熟，无法包含在Java SE中。这是API的一种测试版发布，使开发人员能够更早地使用API。但问题是，这些API在较新版本的JDK中没有向后兼容性支持。这意味着依赖于孵化器模块的代码可能会在较新版本的JDK中出现问题。这可能是因为孵化器模块被提升为Java
    SE或在孵化器模块中被悄悄删除。
- en: In this chapter, we will cover a few recipes showing how to use the HTTP client
    APIs in JDK 11, and then a few other APIs, which make use of the Apache HttpClient ([http://hc.apache.org/httpcomponents-client-ga/](http://hc.apache.org/httpcomponents-client-ga/))
    API and the Unirest Java HTTP library ([http://unirest.io/java.html](http://unirest.io/java.html)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何在JDK 11中使用HTTP客户端API，并介绍一些其他API，这些API使用了Apache HttpClient ([http://hc.apache.org/httpcomponents-client-ga/](http://hc.apache.org/httpcomponents-client-ga/))
    API和Unirest Java HTTP库 ([http://unirest.io/java.html](http://unirest.io/java.html))。
- en: Making an HTTP GET request
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出HTTP GET请求
- en: In this recipe, we will look at using the JDK 11 HTTP Client API to make a `GET`
    request to [http://httpbin.org/get](http://httpbin.org/get).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用JDK 11的HTTP客户端API发出对[http://httpbin.org/get](http://httpbin.org/get)的`GET`请求。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create an instance of `java.net.http.HttpClient` using its builder, `java.net.http.HttpClient.Builder`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其构建器`java.net.http.HttpClient.Builder`创建`java.net.http.HttpClient`的实例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an instance of `java.net.http.HttpRequest` using its builder, `java.net.http.HttpRequest.Builder`.
    The requested URL should be provided as an instance of `java.net.URI`:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其构建器`java.net.http.HttpRequest.Builder`创建`java.net.http.HttpRequest`的实例。请求的URL应该作为`java.net.URI`的实例提供：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Send the HTTP request using the `send` API of `java.net.http.HttpClient`. This
    API takes an instance of `java.net.http.HttpRequest` and an implementation of
    `java.net.http.HttpResponse.BodyHandler`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`java.net.http.HttpClient`的`send` API发送HTTP请求。此API需要一个`java.net.http.HttpRequest`实例和一个`java.net.http.HttpResponse.BodyHandler`的实现：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Print the `java.net.http.HttpResponse` status code and the response body:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`java.net.http.HttpResponse`状态码和响应体：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The complete code for this can be found in `Chapter10/1_making_http_get`. You
    can make use of the run scripts, `run.bat` or `run.sh`, to compile and run the
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的完整代码可以在`Chapter10/1_making_http_get`中找到。您可以使用运行脚本`run.bat`或`run.sh`来编译和运行代码：
- en: '![](img/4aa7f3fc-3c65-4b06-bbe7-d5cee9c68f3c.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aa7f3fc-3c65-4b06-bbe7-d5cee9c68f3c.png)'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'There are two main steps in making an HTTP call to a URL:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在向URL发出HTTP调用时有两个主要步骤：
- en: Creating an HTTP client to initiate the call
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTTP客户端以发起调用
- en: Setting up the destination URL, required HTTP headers, and the HTTP method type,
    that is, `GET`, `POST`, or `PUT`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置目标URL、所需的HTTP标头和HTTP方法类型，即`GET`、`POST`或`PUT`
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are more APIs in the builder, such as for setting authentication, proxy,
    and providing SSL context, which we will look at in different recipes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建器中还有更多的API，例如用于设置身份验证、代理和提供SSL上下文，我们将在不同的示例中进行讨论。
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `java.net.http.HttpClient` object provides two APIs to make an HTTP call:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net.http.HttpClient`对象提供了两个API来发出HTTP调用：'
- en: You can send synchronously using the `HttpClient#send()` method
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`HttpClient#send()`方法同步发送
- en: You can send asynchronously using the `HttpClient#sendAsync()` method
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`HttpClient#sendAsync()`方法异步发送
- en: 'The `send()` method takes in two parameters: the HTTP request and the handler
    for the HTTP response. The handler for the response is represented by the implementation
    of the `java.net.http.HttpResponse.BodyHandlers` interface. There are a few implementations
    available, such as `ofString()`, which reads the response body as `String`, and `ofByteArray()`,
    which reads the response body as a byte array. We will use the `ofString()` method,
    which returns the response `Body` as a string:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`send()`方法接受两个参数：HTTP请求和HTTP响应的处理程序。响应的处理程序由`java.net.http.HttpResponse.BodyHandlers`接口的实现表示。有一些可用的实现，例如`ofString()`，它将响应体读取为`String`，以及`ofByteArray()`，它将响应体读取为字节数组。我们将使用`ofString()`方法，它将响应`Body`作为字符串返回：'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The instance of  `java.net.http.HttpResponse` represents the response from
    the HTTP server. It provides APIs for the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net.http.HttpResponse`的实例表示来自HTTP服务器的响应。它提供以下API：'
- en: Getting the response body (`body()`)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取响应体（`body()`）
- en: HTTP headers (`headers()`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP头（`headers()`）
- en: The initial HTTP request (`request()`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始HTTP请求（`request()`）
- en: The response status code (`statusCode()`)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应状态码（`statusCode()`）
- en: The URL used for the request (`uri()`)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于请求的URL（`uri()`）
- en: The `HttpResponse.BodyHandlers` implementation passed to the `send()` method
    helps to convert the HTTP response into a compatible format, such as `String` or
    a `byte` array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`send()`方法的`HttpResponse.BodyHandlers`实现有助于将HTTP响应转换为兼容格式，例如`String`或`byte`数组。
- en: Making an HTTP POST request
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出HTTP POST请求
- en: In this recipe, we will look at posting some data to an HTTP service via the
    request body. We will post the data to the `http://httpbin.org/post` URL.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将查看通过请求体将一些数据发布到HTTP服务。我们将把数据发布到`http://httpbin.org/post`的URL。
- en: We will skip the package prefix for the classes, as it is assumed to be `java.net.http`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将跳过类的包前缀，因为假定为`java.net.http`。
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create an instance of `HttpClient` using its `HttpClient.Builder` builder:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其`HttpClient.Builder`构建器创建`HttpClient`的实例：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the required data to be passed into the request body:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建要传递到请求体中的所需数据：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a `HttpRequest` object with the request method as POST and by providing
    the request body data as `String`. We will  make use of Jackson''s `ObjectMapper`
    to convert the request body, `Map<String, String>`, into a plain JSON `String`
    and then make use of `HttpRequest.BodyPublishers` to process the `String` request
    body:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`HttpRequest`对象，请求方法为POST，并提供请求体数据作为`String`。我们将使用Jackson的`ObjectMapper`将请求体`Map<String,
    String>`转换为纯JSON`String`，然后使用`HttpRequest.BodyPublishers`处理`String`请求体：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The request is sent and the response is obtained using the `send(HttpRequest,
     HttpRequest.BodyHandlers)` method:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`send(HttpRequest, HttpRequest.BodyHandlers)`方法发送请求并获取响应：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We then print the response status code and the response body sent by the server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们打印服务器发送的响应状态码和响应体：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The complete code for this can be found at `Chapter10/2_making_http_post`.
    Make sure that there are the following Jackson JARs in `Chapter10/2_making_http_post/mods`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的完整代码可以在`Chapter10/2_making_http_post`中找到。确保在`Chapter10/2_making_http_post/mods`中有以下Jackson
    JARs：
- en: '`jackson.databind.jar`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.databind.jar`'
- en: '`jackson.core.jar`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.core.jar`'
- en: '`jackson.annotations.jar`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jackson.annotations.jar`'
- en: Also, take note of the module definition, `module-info.java`, available in `Chapter10/2_making_http_post/src/http.client.demo`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`Chapter10/2_making_http_post/src/http.client.demo`中可用的模块定义`module-info.java`。
- en: To understand how Jackson JARs are used in this modular code, please refer to
    the *Bottom-up migration* and *Top-down migration* recipes in [Chapter 3](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml),
    *Modular Programming*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解此模块化代码中如何使用Jackson JAR，请参阅[第3章](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml)中的*自下而上迁移*和*自上而下迁移*示例，*模块化编程*。
- en: 'Run scripts, `run.bat` and `run.sh`, are provided to facilitate the compilation
    and execution of the code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本`run.bat`和`run.sh`，用于简化代码的编译和执行：
- en: '![](img/10de5762-5fd8-4b96-92cd-d05be5312f5d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10de5762-5fd8-4b96-92cd-d05be5312f5d.png)'
- en: Making an HTTP request for a protected resource
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出对受保护资源的HTTP请求
- en: In this recipe, we will look at invoking an HTTP resource that has been protected
    by user credentials. [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd) has
    been protected by HTTP basic authentication. Basic authentication requires a username
    and a password to be provided in plain text, which is then used by the HTTP resources
    to decide whether the user authentication is successful.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将查看调用已由用户凭据保护的HTTP资源。[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)已通过HTTP基本身份验证进行了保护。基本身份验证需要提供明文用户名和密码，然后HTTP资源使用它来决定用户身份验证是否成功。
- en: 'If you open [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd) in
    the browser, it will prompt you for the username and password:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中打开[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)，它将提示您输入用户名和密码：
- en: '![](img/db91ec67-11cd-4d05-8362-cba04a189031.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db91ec67-11cd-4d05-8362-cba04a189031.png)'
- en: 'Enter the username as `user` and password as `passwd`, and you will be authenticated
    to be shown a JSON response:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户名输入为`user`，密码输入为`passwd`，您将被验证并显示JSON响应：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's achieve the same thing using the `HttpClient` API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`HttpClient` API实现相同的功能。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We need to extend `java.net.Authenticator` and override its `getPasswordAuthentication()`
    method. This method should return an instance of `java.net.PasswordAuthentication`.
    Let''s create a class, `UsernamePasswordAuthenticator`, which extends `java.net.Authenticator`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要扩展`java.net.Authenticator`并重写其`getPasswordAuthentication()`方法。此方法应返回`java.net.PasswordAuthentication`的实例。让我们创建一个类`UsernamePasswordAuthenticator`，它扩展`java.net.Authenticator`：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will create two instance variables in the `UsernamePasswordAuthenticator`
    class to store the username and password, and we''ll provide a constructor to
    initialize it:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`UsernamePasswordAuthenticator`类中创建两个实例变量来存储用户名和密码，并提供一个构造函数来初始化它：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will then override the `getPasswordAuthentication()` method to return an
    instance of `java.net.PasswordAuthentication`, initialized with the username and
    password:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将重写`getPasswordAuthentication()`方法，返回一个用用户名和密码初始化的`java.net.PasswordAuthentication`的实例：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will then create an instance of `UsernamePasswordAuthenticator`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将创建一个`UsernamePasswordAuthenticator`的实例：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We provide the instance of `UsernamePasswordAuthenticator` when initializing `HttpClient`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化`HttpClient`时，我们提供`UsernamePasswordAuthenticator`的实例：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A corresponding `HttpRequest` object is created to call the protected HTTP
    resource, [http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个对受保护的HTTP资源[http://httpbin.org/basic-auth/user/passwd](http://httpbin.org/basic-auth/user/passwd)的`HttpRequest`对象：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We obtain the `HttpResponse` by executing the request, and print the status
    code and the request body:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过执行请求来获取`HttpResponse`，并打印状态码和请求体：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The complete code for this is available in `Chapter10/3_making_http_request_protected_res`.
    You can run the code by using the run scripts, `run.bat` or `run.sh`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的完整代码可以在`Chapter10/3_making_http_request_protected_res`中找到。您可以使用`run.bat`或`run.sh`脚本来运行代码：
- en: '![](img/566c7e2b-6d4d-47a5-943c-6a3f60329aaf.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/566c7e2b-6d4d-47a5-943c-6a3f60329aaf.png)'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Authenticator` object is used by the network calls to obtain the authentication
    information. Developers generally extend the `java.net.Authenticator` class and
    override its `getPasswordAuthentication()` method. The username and password are
    read either from the user input or from the configuration and are used by the
    extended class to create an instance of `java.net.PasswordAuthentication`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authenticator`对象被网络调用使用来获取认证信息。开发人员通常扩展`java.net.Authenticator`类，并重写其`getPasswordAuthentication()`方法。用户名和密码要么从用户输入中读取，要么从配置中读取，并由扩展类用来创建`java.net.PasswordAuthentication`的实例。'
- en: 'In the recipe, we created an extension of `java.net.Authenticator`, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了`java.net.Authenticator`的扩展，如下所示：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The instance of `UsernamePasswordAuthenticator` is then provided to the `HttpClient.Builder`
    API. The `HttpClient `instance makes use of this authenticator to get the username
    and password while invoking the protected HTTP request.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`UsernamePasswordAuthenticator`的实例提供给`HttpClient.Builder`API。`HttpClient`实例利用这个验证器来获取用户名和密码，同时调用受保护的HTTP请求。
- en: Making an asynchronous HTTP request
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行异步HTTP请求
- en: In this recipe, we will look at how to make an asynchronous `GET` request. In
    an asynchronous request, we don't wait for the response; instead, we handle the
    response whenever it is received by the client. In jQuery, we will make an asynchronous
    request and provide a callback that takes care of processing the response, while
    in the case of Java, we get an instance of `java.util.concurrent.CompletableFuture`,
    and then we invoke the `thenApply` method to process the response. Let's see this
    in action.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看如何进行异步的`GET`请求。在异步请求中，我们不等待响应；相反，我们在客户端接收到响应时处理响应。在jQuery中，我们将进行异步请求，并提供一个回调来处理响应，而在Java的情况下，我们会得到一个`java.util.concurrent.CompletableFuture`的实例，然后我们调用`thenApply`方法来处理响应。让我们看看它是如何工作的。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create an instance of `HttpClient` using its builder, `HttpClient.Builder`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其构建器`HttpClient.Builder`创建`HttpClient`的实例：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create an instance of `HttpRequest` using its `HttpRequest.Builder` builder,
    representing the URL and the corresponding HTTP method to be used:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`HttpRequest.Builder`的构建器创建`HttpRequest`的实例，表示要使用的URL和相应的HTTP方法：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the `sendAsync` method to make an asynchronous HTTP request and keep a
    reference to the `CompletableFuture<HttpResponse<String>>` object we obtained.
    We will use this to process the response:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sendAsync`方法进行异步HTTP请求，并保留我们获取的`CompletableFuture<HttpResponse<String>>`对象的引用。我们将使用这个对象来处理响应：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We provide `CompletionStage` to process the response once the previous stage
    completes. For this, we make use of the `thenAccept` method, which takes a lambda
    expression:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们提供`CompletionStage`来处理响应，一旦前一个阶段完成。为此，我们使用`thenAccept`方法，它接受一个lambda表达式：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Wait for the future to complete:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待未来完成：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The complete code for this recipe can be found in `Chapter10/4_async_http_request`.
    We have provided the `run.bat` and `run.sh` scripts to compile and run the recipe:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的完整代码可以在`Chapter10/4_async_http_request`中找到。我们提供了`run.bat`和`run.sh`脚本来编译和运行这个配方：
- en: '![](img/7235ca68-1f33-4067-b28b-26e6ee66d538.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7235ca68-1f33-4067-b28b-26e6ee66d538.png)'
- en: Making an HTTP request using Apache HttpClient
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache HttpClient进行HTTP请求
- en: In this recipe, we will make use of the Apache HttpClient ([https://hc.apache.org/httpcomponents-client-4.5.x/index.html](https://hc.apache.org/httpcomponents-client-4.5.x/index.html))
    library to make a simple HTTP `GET` request. As we are using Java 9, we want to
    make use of the module path and not the classpath. Hence, we need to modularize
    the Apache HttpClient library. One way to achieve this is to use the concept of
    automatic modules. Let's see how to set up the dependencies for the recipe.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用Apache HttpClient ([https://hc.apache.org/httpcomponents-client-4.5.x/index.html](https://hc.apache.org/httpcomponents-client-4.5.x/index.html))库来进行简单的HTTP
    `GET`请求。由于我们使用的是Java 9，我们希望使用模块路径而不是类路径。因此，我们需要将Apache HttpClient库模块化。实现这一目标的一种方法是使用自动模块的概念。让我们看看如何为这个配方设置依赖关系。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'All the required JARs are already present in `Chapter10/5_apache_http_demo/mods`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所有必需的JAR文件已经存在于`Chapter10/5_apache_http_demo/mods`中：
- en: '![](img/b3865825-465b-4302-9f43-8af7bb556344.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3865825-465b-4302-9f43-8af7bb556344.png)'
- en: 'Once these JARs are on the module path, we can declare a dependency on these
    JARs in `module-info.java`, which is present in `Chapter10/5_apache_http_demo/src/http.client.demo`, as
    shown in the following code snippet:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些JAR文件在模块路径上，我们可以在`module-info.java`中声明对这些JAR文件的依赖关系，该文件位于`Chapter10/5_apache_http_demo/src/http.client.demo`中，如下面的代码片段所示：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a default instance of `org.http.client.HttpClient` using its `org.apache.http.impl.client.HttpClients` factory:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其`org.apache.http.impl.client.HttpClients`工厂创建`org.http.client.HttpClient`的默认实例：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create an instance of `org.apache.http.client.methods.HttpGet` along with the
    required URL. This represents both the HTTP method type and the requested URL:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`org.apache.http.client.methods.HttpGet`的实例以及所需的URL。这代表了HTTP方法类型和请求的URL：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Execute the HTTP request using the `HttpClient` instance to obtain an instance
    of `CloseableHttpResponse`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`HttpClient`实例执行HTTP请求以获取`CloseableHttpResponse`的实例：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `CloseableHttpResponse` instance returned after executing the HTTP request
    can be used to obtain details such as the response status code and other contents
    of the response embedded within the instance of an implementation of `HttpEntity`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 执行HTTP请求后返回的`CloseableHttpResponse`实例可用于获取响应状态码和嵌入在`HttpEntity`实现实例中的响应内容等详细信息。
- en: 'We make use of `EntityUtils.toString()` to obtain the response body embedded
    within the instance of an implementation of `HttpEntity`, and print both the status
    code and response body:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`EntityUtils.toString()`来获取嵌入在`HttpEntity`实现实例中的响应体，并打印状态码和响应体：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The complete code for this recipe can be found in `Chapter10/5_apache_http_demo`.
    We have provided `run.bat` and `run.sh` to compile and execute the recipe code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的完整代码可以在`Chapter10/5_apache_http_demo`中找到。我们提供了`run.bat`和`run.sh`来编译和执行示例代码：
- en: '![](img/09441745-683b-444a-8a77-e3e4ad1be9c8.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09441745-683b-444a-8a77-e3e4ad1be9c8.png)'
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We can provide a custom response handler while invoking the `HttpClient.execute`
    method, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`HttpClient.execute`方法时，我们可以提供自定义的响应处理程序，如下所示：
- en: '[PRE34]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this case, the response is processed by the response handler and returns the
    response body string. The complete code for this can be found in `Chapter10/5_1_apache_http_demo_response_handler`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，响应由响应处理程序处理并返回响应体字符串。完整的代码可以在`Chapter10/5_1_apache_http_demo_response_handler`中找到。
- en: Making an HTTP request using the Unirest HTTP client library
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unirest HTTP客户端库进行HTTP请求
- en: In this recipe, we will make use of the Unirest HTTP ([http://unirest.io/java.html](http://unirest.io/java.html)) Java
    library to access HTTP services. Unirest Java is a library based on Apache's HTTP client
    library and provides a fluent API for making HTTP requests.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用Unirest HTTP ([http://unirest.io/java.html](http://unirest.io/java.html))
    Java库来访问HTTP服务。Unirest Java是一个基于Apache的HTTP客户端库的库，并提供了一个流畅的API来进行HTTP请求。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As the Java library is not modular, we will make use of the concept of automatic
    modules, as explained in [Chapter 3](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml),
    *Modular Programming*. The JARs belonging to the library are placed on the module
    path of the application, and the application then declares a dependency on the
    JARs by using the name of the JAR as its module name. This way, a JAR file automatically
    becomes a module and is hence called an automatic module.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java库不是模块化的，我们将利用自动模块的概念，如[第3章](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml)
    *模块化编程*中所解释的。该库的JAR文件被放置在应用程序的模块路径上，然后应用程序通过使用JAR的名称作为其模块名称来声明对JAR的依赖关系。这样，JAR文件就会自动成为一个模块，因此被称为自动模块。
- en: 'The Maven dependency for the Java library is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Java库的Maven依赖如下：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As we are not using Maven in our samples, we have downloaded the JARs into the `Chapter10/6_unirest_http_demo/mods` folder.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的示例中没有使用Maven，我们已经将JAR文件下载到了`Chapter10/6_unirest_http_demo/mods`文件夹中。
- en: 'The module definition is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 模块定义如下：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下...
- en: 'Unirest provides a very fluid API for making HTTP requests. We can make a `GET`
    request as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Unirest提供了一个非常流畅的API来进行HTTP请求。我们可以按如下方式进行`GET`请求：
- en: '[PRE37]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The response status and response body can be obtained from the `jsonResponse`
    object, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从`jsonResponse`对象中获取响应状态和响应体：
- en: '[PRE38]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can make a `POST` request and pass some data, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行`POST`请求并传递一些数据，如下所示：
- en: '[PRE39]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can make a call to a protected HTTP resource, as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按如下方式调用受保护的HTTP资源：
- en: '[PRE40]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The code for this can be found in `Chapter10/6_unirest_http_demo`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码可以在`Chapter10/6_unirest_http_demo`中找到。
- en: We have provided the `run.bat` and `run.sh` scripts to execute the code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了`run.bat`和`run.sh`脚本来执行代码。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Unirest Java library provides much more advanced functionality, such as
    making async requests, file uploads, and using proxies. It's advisable that you
    try out these different features of the library.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Unirest Java库提供了更多高级功能，例如进行异步请求、文件上传和使用代理。建议您尝试该库的不同功能。
