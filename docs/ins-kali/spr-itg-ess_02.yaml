- en: Chapter 2. Message Ingestion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。消息摄入
- en: 'As mentioned in the *Preface*, Spring Integration is an implementation of *Enterprise
    Integration Patterns: Designing, Building, and Deploying Messaging Solutions (Addison
    Wesley Signature Series)*, *Gregor Hohpe* and *Bobby Woolf*, *Addison-Wesley Professional*.
    **EIP** (short for **Enterprise Integration Patterns**) defines patterns for many
    integration challenges, and one of them is the exchange of messages between heterogeneous
    systems. In this chapter, we will explore patterns and concepts around message
    exchange.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如*前言*中所提到的，Spring Integration是*企业集成模式：设计、构建和部署消息解决方案（Addison Wesley Signature
    Series）*的实现，作者是*Gregor Hohpe*和*Bobby Woolf*，*Addison-Wesley Professional*。**EIP**（**企业集成模式**的缩写）定义了许多集成挑战的模式，其中之一是异构系统之间的消息交换。在本章中，我们将探讨消息交换的模式和概念。
- en: 'Heterogeneous endpoints use messaging to communicate. There are primarily three
    aspects of messaging: messages being exchanged, the endpoints that participate
    in the communication, and the medium through which messages are delivered. In
    an EIP paradigm, we define them as messages, message endpoints, and message channels.
    Let''s discuss each one at a time and then we will discuss the pattern.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 异构端点使用消息进行通信。消息传递主要有三个方面：交换的消息、参与通信的端点，以及传递消息的媒介。在EIP范式中，我们将它们定义为消息、消息端点和消息通道。让我们依次讨论每一个，然后再讨论模式。
- en: 'What is a message? In simplest terms, messages can be understood as a piece
    of information that can be used as an enabler for intercommunication and collaboration
    between heterogeneous components. It is composed of primarily two parts: header
    and payload. Headers contain metadata and commonly require values such as ID,
    timestamp, and so on, but a header''s use can be extended for passing other values
    as well, for example, a channel name for a router, file components for a filename,
    and so on. Payload can be of any type: standard Java object, XML, or any custom
    or user-defined value. It can be a simple information-sharing payload too (for
    example, a registration module can notify an audit module when a new user is registered),
    or it can be a command (for example, an administration module can instruct the
    mail service to notify all the users who''ve registered for the course), or it
    can be an event (for example, a mail service that, after sending all the mails,
    dispatches an event back to the admin module specifying that all the mails have
    been sent and it''s good to go with the next step).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是消息？简单来说，消息可以被理解为一种信息片段，可以用作异构组件之间的互联和协作的启用器。它主要由两部分组成：头部和有效载荷。头部包含元数据，通常需要值，如ID、时间戳等，但头部的用途也可以扩展到传递其他值，例如路由器的通道名称、文件组件的文件名等。有效载荷可以是任何类型：标准Java对象、XML，或任何自定义或用户定义的值。它也可以是一个简单的信息共享有效载荷（例如，注册模块可以在新用户注册时通知审计模块），或者它可以是一个命令（例如，管理模块可以指示邮件服务通知所有注册课程的用户），或者它可以是一个事件（例如，邮件服务在发送所有邮件后，向管理员模块发送一个事件，指定所有邮件已发送，可以进行下一步）。
- en: 'We noticed a pattern here; there is a communication between two components
    via these messages—in formal terms, we call these components message endpoints.
    Similarly, we can observe that message endpoints are of two types: producer endpoint
    and consumer endpoint. As their names suggest, a producer, such as `registration
    module`, generates a message in the given example, while a consumer consumes it—for
    example the `audit module` in the given example. An endpoint can be a producer
    as well as a consumer, for example, a mail service. Endpoints are typically smart
    components that can validate messages before passing them on to the next subsystem
    or can route, filter, aggregate, transform, or do a lot more so that the message
    can be in a format expected by the next in the chain.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们注意到了一个模式；两个组件之间通过这些消息进行通信——在正式术语中，我们称这些组件为消息端点。同样，我们可以观察到消息端点有两种类型：生产者端点和消费者端点。正如它们的名称所示，生产者，比如`注册模块`，在给定的示例中生成消息，而消费者消费它——例如给定示例中的`审计模块`。端点既可以是生产者也可以是消费者，例如邮件服务。端点通常是智能组件，可以在将消息传递给下一个子系统之前验证消息，或者可以路由、过滤、聚合、转换，或者做更多的事情，以便消息可以符合链中下一个期望的格式。
- en: Working with message channels
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用消息通道
- en: 'We defined messages and we discussed how message endpoints act on the messages,
    so where does a message channel fit in? A message channel is an implementation
    of the EAI design pattern that decouples the endpoint. Endpoints do not need to
    be aware of each other''s type; they register with channels and it''s the responsibility
    of the channel to deliver the messages safely between endpoints. Each channel
    has a logical identity—it may be a unique name or ID through which it can be referred
    and registered to. Depending on how channels handle the messages, they can be
    classified in two broad categories:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了消息，并讨论了消息端点如何对消息进行操作，那么消息通道在哪里？消息通道是EAI设计模式的一种实现，它解耦了端点。端点不需要知道彼此的类型；它们向通道注册，通道负责安全地在端点之间传递消息。每个通道都有一个逻辑标识——它可以是一个唯一的名称或ID，通过它可以被引用和注册。根据通道如何处理消息，它们可以分为两个广泛的类别：
- en: Point-to-point channel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点对点通道
- en: Publish-subscribe channel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布-订阅通道
- en: Channel types
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道类型
- en: 'Before starting with their implementation, let''s first look at the following
    types of channels:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实现之前，让我们先看一下以下类型的通道：
- en: '**Point-to-point channel**: A one-to-one relationship is maintained between
    producer and consumer. These channels deliver message to one and only one recipient.
    Even if more than one recipient is registered, messages will only be delivered
    to one of them. This channel type can be used in a parallel processing scenario,
    allowing multiple consumers to listen to the availability of messages in parallel,
    but the delivery of messages will be done to a single consumer only!'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点对点通道**：生产者和消费者之间保持一对一的关系。这些通道将消息传递给一个且仅一个接收者。即使注册了多个接收者，消息也只会传递给其中一个。这种通道类型可以在并行处理场景中使用，允许多个消费者并行监听消息的可用性，但消息的传递只会传递给单个消费者！'
- en: '**Publish-subscribe channel**: These channels deliver messages to all of the
    subscribers who have registered on the channel, thus implementing a one-to-many
    relationship between producer and consumer. An analogy can be drawn as each subscriber
    has its own private channel, on which a copy of the message is delivered. As soon
    as it''s consumed, it is discarded.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布-订阅通道**：这些通道将消息传递给在通道上注册的所有订阅者，从而实现生产者和消费者之间的一对多关系。可以类比为每个订阅者都有自己的私有通道，消息的副本会被传递到该通道上。一旦被消费，就会被丢弃。'
- en: Let's get out of idioms and have a sneak peek at how Spring Integration provides
    support for all of these components—after all, this is a book on Spring Integration,
    isn't it!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们摆脱成语，偷偷看一下Spring集成如何支持所有这些组件——毕竟，这是一本关于Spring集成的书，不是吗！
- en: Spring implementation of channels
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring集成通道的实现
- en: 'Spring Integration defines a top-level interface for the message channel that
    should be implemented by any of the concrete channel implementations, as shown
    here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Spring集成为应该由任何具体通道实现的消息通道定义了一个顶层接口，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `MessageChannel` interface defines two versions of the `send` method—one
    which accepts only `Message` as an argument while the other one accepts an additional
    parameter (`timeout`). The `send` method returns true if the message is sent out
    successfully; otherwise, if it times out or the sending fails for some reason,
    it returns false.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageChannel`接口定义了`send`方法的两个版本——一个只接受`Message`作为参数，另一个接受额外的参数（`timeout`）。如果消息成功发送，则`send`方法返回true；否则，如果超时或由于某种原因发送失败，则返回false。'
- en: 'Further, Spring Integration provides a sub type of the `MessageChannel` interface
    to support two types of channels: `PollableChannel` and `SubscribableChannel`.
    This is explained in more detail in the following points:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Spring集成提供了`MessageChannel`接口的子类型，以支持两种类型的通道：`PollableChannel`和`SubscribableChannel`。这将在以下几点中更详细地解释：
- en: '**Pollable channel**: This channel provides the interface that has two versions
    of receive, one which does not take any argument and the other which provides
    an option to specify the `timeout` parameter. The following code snippet is the
    interface declaration:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可轮询通道**：该通道提供了具有两个版本的接收方法的接口，一个不带任何参数，另一个提供了指定`timeout`参数的选项。以下代码片段是接口声明：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Subscribeable channel**: This interface exposes methods to subscribe and
    unsubscribe from the channel. The following code snippet is the interface declaration
    for a subscribe-able channel:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可订阅通道**：该接口公开了订阅和取消订阅通道的方法。以下代码片段是可订阅通道的接口声明：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An instance of the `MessageHandler` interface is passed as an argument to the
    `subscribe` and `unsubscribe` methods. The `MessageHandler` interface exposes
    only one method, `handleMessage`, to handle the message:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageHandler`接口的一个实例作为参数传递给`subscribe`和`unsubscribe`方法。`MessageHandler`接口只公开了一个`handleMessage`方法来处理消息：'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Whenever a message arrives on a channel, an implementation of the message handler
    is looked upon by the framework, and the message is passed to the implementer's
    `handleMessage` method.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当消息到达通道时，框架会查找消息处理程序的实现，并将消息传递给实现者的`handleMessage`方法。
- en: Although Spring Integration defines message channel interfaces and allows users
    to provide their implementation, it's hardly ever needed. Spring Integration has
    provided many implementations of channels that can be used *off the shelf*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Spring集成定义了消息通道接口并允许用户提供它们的实现，但几乎不需要。Spring集成提供了许多通道的实现，可以直接使用。
- en: Selecting a channel
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择通道
- en: Let's discuss what default implementations have been provided by Spring Integration
    and how they can be leveraged.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下Spring集成提供了哪些默认实现以及如何利用它们。
- en: Publish-subscribe channel
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布-订阅通道
- en: 'This is the only implementation of the publish-subscribe model of channel.
    The primary purpose of this channel is to send messages to registered endpoints;
    this cannot be polled. It can be declared as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通道的发布-订阅模型的唯一实现。该通道的主要目的是向注册的端点发送消息；它不能被轮询。可以声明如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s discuss each of the elements in this line; this will be used throughout
    the examples of this chapter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论这行中的每个元素；这将在本章的示例中使用：
- en: '`int`: This is a namespace that declares all Spring Integration components.
    As discussed in [Chapter 1](part0018_split_000.html#page "Chapter 1. Getting Started"),
    *Getting Started*, the STS visual editor can be used to add different namespaces
    from Spring Integration.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`：这是声明所有Spring集成组件的命名空间。如[第1章](part0018_split_000.html#page "第1章. 入门")中所讨论的，*入门*，可以使用STS可视化编辑器从Spring集成中添加不同的命名空间。'
- en: '`publish-subscribe-channel`: This is the type exposed by Spring.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publish-subscribe-channel`：这是Spring公开的类型。'
- en: '`Id`: This is the unique name through which the channel can be referred.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Id`：这是通道可以被引用的唯一名称。'
- en: 'To refer to these elements from the code, we can use:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要从代码中引用这些元素，我们可以使用：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Queue channel
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 队列通道
- en: 'Remember queue concepts from good old data structures? `QueueChannel` employs
    the same concept—it enforces **First in First out** (**FIFO**) ordering and a
    message can be consumed by one and only one endpoint. It''s a strictly one-to-one
    relationship, even if the channel has multiple consumers; one message will be
    delivered to only one of them. In Spring Integration, it can be defined as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得数据结构中的队列概念吗？`QueueChannel`采用了相同的概念——它强制执行**先进先出**（**FIFO**）排序，一条消息只能被一个终点消费。这是一个严格的一对一关系，即使通道有多个消费者；一条消息只会被传递给其中的一个。在Spring
    Integration中，可以定义如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As soon as a message is available on the channel, it will try to send the message
    to the subscribed consumer. The element `capacity` indicates the maximum number
    of undelivered messages to be held in the queue. If the queue is full, which is
    determined by the `capacity` parameter, the sender will be blocked until messages
    are consumed and further room is available in the queue. Alternatively, if a timeout
    parameter has been specified for the sender, the sender will wait for the specified
    timeout interval—if space is created in the queue within the timeout interval,
    the sender will put the message there, else it will discard that message and start
    with an other one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通道上有消息可用，它将尝试将消息发送给订阅的消费者。元素`capacity`指示队列中保留的最大未传递消息数。如果队列已满，由`capacity`参数确定，发送者将被阻塞，直到消息被消费并且队列中有进一步的空间可用。或者，如果为发送者指定了超时参数，发送者将等待指定的超时间隔——如果在超时间隔内在队列中创建了空间，发送者将把消息放在那里，否则它将丢弃该消息并开始处理另一个消息。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although capacity parameter is optional, it should never be left out; otherwise,
    the queue will become unbounded and may result in OutOfMemoryErrors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然容量参数是可选的，但绝不能省略；否则，队列将变得无限，并可能导致OutOfMemoryErrors。
- en: Priority channel
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先通道
- en: 'Queue enforces FIFO, but what if a message needs urgent attention and needs
    to be processed out of the queue? For example, a server health monitoring service
    might send health audits to an *audit service*, but if it sends a server down
    event, it needs urgent processing. This is where `PriorityChannel` is handy; it
    can pick messages based on their priority rather than arrival order. Messages
    can be prioritized as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 队列强制执行FIFO，但如果一条消息需要紧急处理并且需要在队列之外进行处理怎么办？例如，服务器健康监控服务可能会将健康审计发送给*审计服务*，但如果它发送了服务器宕机事件，就需要紧急处理。这就是`PriorityChannel`派上用场的地方；它可以根据优先级而不是到达顺序选择消息。消息可以按如下方式设置优先级：
- en: By adding a `priority` header within each message
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在每条消息中添加`priority`头
- en: By providing a comparator of type `Comparator<Message<?>>` to the priority channel's
    constructor
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向优先通道的构造函数提供`Comparator<Message<?>>`类型的比较器
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Default is the `priority` header in the message.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 消息中的`priority`头是默认的。
- en: 'Let''s take the following example of a priority channel and inject a comparator
    there, which will be used to decide the priority of the message:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以优先通道为例，并在那里注入一个比较器，用于决定消息的优先级：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A comparator can be injected as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以注入一个比较器如下：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Rendezvous channel
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rendezvous通道
- en: 'Often, it is desirable to have an acknowledgement that the message has indeed
    reached the endpoint. The `rendezvousChannel` interface, which is a subclass of
    the queue channel, serves this purpose. Producer and consumer work in a blocking
    mode. As soon as the producer sends a message on the channel, it is blocked until
    that message has been consumed. Similarly, a consumer is blocked until a message
    arrives in the queue. It can be configured as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，希望得到一个确认，消息确实已经到达了终点。`rendezvousChannel`接口是队列通道的子类，用于实现这一目的。生产者和消费者以阻塞模式工作。一旦生产者在通道上发送消息，它就会被阻塞，直到该消息被消费。同样，消费者也会被阻塞，直到队列中有消息到达。它可以配置如下：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `RendezvousChannel` interface implements a zero capacity queue, which means
    that at any given point, there can exist only one message on the queue. No wonder
    there is no capacity element.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`RendezvousChannel`接口实现了一个零容量队列，这意味着在任何给定的时刻，队列上只能存在一条消息。难怪没有容量元素。'
- en: Direct channel
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接通道
- en: Direct channel is the default channel type used by Spring Integration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 直接通道是Spring Integration使用的默认通道类型。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When using the `<channel/>` element without any subelements, it will create
    a `DirectChannel` instance (a `SubscribableChannel`) handler.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用没有任何子元素的`<channel/>`元素时，它将创建一个`DirectChannel`实例（一个`SubscribableChannel`）处理程序。
- en: 'Multiple endpoints can subscribe message handlers with the direct channel;
    whenever a producer puts a message on the channel, it is delivered to one and
    only one of the message handlers of subscribed endpoints. The introduction of
    multiple subscribers with a restriction to deliver a message to one and only one
    of the handlers introduces new challenges—how and which handler will be selected
    and what will happen if the handler is not able to process the message? This is
    where a load balancer and failover come into the picture. A load balancer can
    be defined on this channel with a round-robin delivery strategy:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 多个终点可以订阅直接通道的消息处理程序；每当生产者将消息放入通道时，它将被传递给订阅终点的消息处理程序之一。引入多个订阅者并限制将消息传递给订阅者之一的处理程序引入了新的挑战——如何选择和哪个处理程序将被选中，如果处理程序无法处理消息会发生什么？这就是负载均衡器和故障转移介入的地方。可以在这个通道上定义一个循环交付策略的负载均衡器：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will deliver messages to subscribers on a round-robin basis. This is the
    only strategy defined out-of-the-box by Spring, but a custom strategy can be defined
    using `interface`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按循环交付策略将消息传递给订阅者。这是Spring中唯一预定义的策略，但可以使用`interface`定义自定义策略：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is an example of introducing a custom load balancer:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是引入自定义负载均衡器的示例：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. The code can also be
    pulled from [https://github.com/cpandey05/siessentials](https://github.com/cpandey05/siessentials).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的电子邮件。代码也可以从[https://github.com/cpandey05/siessentials](https://github.com/cpandey05/siessentials)获取。
- en: Failover, on other hand, is a Boolean value. If this is set to true, then if
    the first handler fails to process the message, then all subsequent handlers will
    be tried. Even if one of the handlers successfully processes the message, Spring
    Integration will not report an error. Only if all of the handlers fail, will it
    throw an exception.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，故障转移是一个布尔值。如果设置为true，那么如果第一个处理程序无法处理消息，那么将尝试所有后续处理程序。即使其中一个处理程序成功处理了消息，Spring集成也不会报告错误。只有当所有处理程序都失败时，它才会抛出异常。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Failover capability can be very handy while implementing a transaction propagation
    or for a fallback mechanism. For example, if a DB server fails, try another backend
    server in the next handler.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 故障转移功能在实现事务传播或回退机制时非常方便。例如，如果DB服务器失败，则可以在下一个处理程序中尝试另一个后端服务器。
- en: Executor channel
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行程序通道
- en: 'The `ExecutorChannel` interface is a point-to-point message channel. This is
    very similar to the direct channel, except that custom executors can be used to
    dispatch the messages. Let''s have a look at the configuration:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExecutorChannel`接口是点对点消息通道。这与直接通道非常相似，只是可以使用自定义执行程序来分发消息。让我们来看一下配置：'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `com.example.ResultExecutor` interface is an implementation of `java.uti.concurrent.Executor`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.example.ResultExecutor`接口是`java.uti.concurrent.Executor`的实现。'
- en: A transaction link cannot be established between producer and consumer because
    a producer thread hands off the message to an executor instance and backs off—the
    consumption of the message is processed in the executor thread.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者和消费者之间无法建立事务链接，因为生产者线程将消息交给执行程序实例并退出，消息的消费在执行程序线程中进行处理。
- en: 'As in direct channels, a load-balancing strategy and failover can be set. The
    default values are a round-robin strategy with failover enabled:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与直接通道一样，可以设置负载均衡策略和故障转移。默认值是循环策略，启用故障转移：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Scoped channel
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围通道
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A custom scope can also be defined, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以定义自定义范围，如下所示：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is an example of a thread scoped channel. If we observe the entries, a
    key-value pair has been defined for the scope. For the thread, the key-value pair
    is `org.springframework.context.support.SimpleThreadScope`. It can be any Spring-defined
    or a user-defined scope.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个线程范围通道的示例。如果观察条目，将为范围定义一个键值对。对于线程，键值对是`org.springframework.context.support.SimpleThreadScope`。它可以是任何Spring定义的或用户定义的范围。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some of the other Spring implemented scopes are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他Spring实现的范围如下：
- en: '`org.springframework.web.context.request.SessionScope`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.request.SessionScope`'
- en: '`org.springframework.web.context.support.ServletContextScope`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.support.ServletContextScope`'
- en: '`org.springframework.web.context.request.RequestScope`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.context.request.RequestScope`'
- en: '`org.springframework.web.portlet.context.PortletContextScope`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.springframework.web.portlet.context.PortletContextScope`'
- en: Datatype channel
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据类型通道
- en: 'A channel can be restricted to accept messages having only a certain type of
    payload, for example, numbers, string, or any other custom type. The code is as
    follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通道可以限制接受只有某种类型的有效负载的消息，例如数字、字符串或任何其他自定义类型。代码如下：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Multiple types can also be provided, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以提供多种类型，如下所示：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What will happen if a message arrives in a format other than the one given
    in the preceding code? By default, an exception will be thrown. However, if the
    use case warrants, we can define converters, which will try to convert incoming
    messages into an acceptable format. A typical use case is the conversion of a
    string to an integer. For this to happen, a bean named `integrationConversionService`
    that is an instance of Spring''s Conversion Service must be defined as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果消息以前述代码中给定的格式之外的格式到达会发生什么？默认情况下，将抛出异常。但是，如果使用情况需要，我们可以定义转换器，它将尝试将传入的消息转换为可接受的格式。典型用例是将字符串转换为整数。为此，必须定义一个名为`integrationConversionService`的bean，它是Spring的Conversion
    Service的实例，如下所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When the `converter` element is parsed, it will create the `integrationConversionService`
    bean on-demand, if one is not already defined. With that converter in place, if
    a string message arrives on a channel defined as an integer, an attempt would
    be made to convert it to an integer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当解析`converter`元素时，如果尚未定义，则会按需创建`integrationConversionService` bean。有了这个转换器，如果将字符串消息传递到定义为整数的通道上，将尝试将其转换为整数。
- en: Error handling on channels
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道上的错误处理
- en: 'Spring Integration supports synchronous as well as asynchronous message processing.
    In the case of synchronous processing, it is comparatively easy to handle error
    scenarios based on return values or by catching thrown exceptions; for asynchronous
    processing, things are more complicated. There are components provided by Spring,
    such as filters and routers, that can be used to validate message sanity and take
    action based on that. If it''s invalid, the message can be routed to an invalid
    channel or a retry channel as the case may be. Apart from this, Spring provides
    a global error channel and capability to define custom error channels. The following
    points cover an appropriate error channel:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration支持同步和异步消息处理。对于同步处理，根据返回值或捕获抛出的异常来处理错误情况相对容易；对于异步处理，情况就更加复杂。Spring提供了诸如过滤器和路由器之类的组件，可用于验证消息的完整性并根据此采取行动。如果无效，则可以将消息路由到无效通道或重试通道。除此之外，Spring还提供了全局错误通道和定义自定义错误通道的功能。以下几点涵盖了适当的错误通道：
- en: 'An error channel needs to be defined. This can be done as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要定义一个错误通道。可以按以下方式完成：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A header named `errorChannel` needs to be added to the message. This is the
    name of the channel where `ErrorMessage` should be routed when processing fails.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息需要添加一个名为`errorChannel`的标头。这是`ErrorMessage`在处理失败时应路由到的通道的名称。
- en: If message processing fails, `ErrorMessage` will be sent to the channel specified
    by the header `errorChannel`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果消息处理失败，`ErrorMessage`将被发送到由标头`errorChannel`指定的通道。
- en: 'If the message does not contain a `errorChanel` header, `ErrorMessage` will
    be routed to a global error channel defined by Spring Integration, which is `errorChannel`.
    This channel is a publish-subscribe channel:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果消息不包含`errorChanel`标头，`ErrorMessage`将被路由到Spring Integration定义的全局错误通道`errorChannel`。该通道是一个发布-订阅通道：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Persisting and recovering channels
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化和恢复通道
- en: 'We talked about all kind of channels, but if you have noticed, these are all
    in memory. What if the system crashes? No one wants to lose data. This is where
    persistent `QueueChannel` comes into the picture—messages will be backed up in
    the database defined by the data source. If the system crashes, then on recovery,
    it will pull all the messages in the database and queue them for processing. This
    is achieved in Spring using `MessageGroupStore`. Let''s have a quick look at the
    configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈到了各种类型的通道，但如果您注意到，这些都是内存中的。如果系统崩溃会怎么样？没有人想丢失数据。这就是持久化`QueueChannel`出现的地方——消息将在由数据源定义的数据库中备份。如果系统崩溃，然后在恢复时，它将从数据库中提取所有消息并排队进行处理。这是使用`MessageGroupStore`在Spring中实现的。让我们快速看一下配置：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, the message store is mapped to the database defined by `someDataSource`.
    When a message arrives, it will now be added to `MessageStore` first. On successful
    processing, it will be removed from there.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，消息存储映射到由`someDataSource`定义的数据库。当消息到达时，它现在将首先添加到`MessageStore`中。在成功处理后，它将从那里删除。
- en: The moment we talk of databases, transaction comes into the picture. So what
    if the poller has a transaction configured? In that case, if message processing
    fails, the transaction will be rolled backed and the message will not be deleted
    from the queue.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一谈到数据库，事务就会出现。那么如果轮询器配置了事务，如果消息处理失败，事务将被回滚，并且消息将不会从队列中删除。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If transactional behavior is supported, messages will not be removed from the
    queue until they have been successfully processed. If some messages fail repeatedly,
    this may build up stale messages in the queue over time. A clean-up strategy for
    such messages must be thought through.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果支持事务行为，消息将在成功处理之前不会从队列中删除。如果某些消息反复失败，随着时间的推移，队列中可能会积累过期消息。必须考虑这些消息的清理策略。
- en: Channel interceptors
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通道拦截器
- en: 'Interceptor patterns can be used to apply business rules and validations on
    messages that are either sent from the channel or received on it. The following
    four interceptors are available:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器模式可用于对从通道发送或接收的消息应用业务规则和验证。以下四个拦截器可用：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here are the methods exposed by the `ChannelInterceptor` interface:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ChannelInterceptor`接口公开的方法：
- en: '`preSend`: This is invoked before a message is sent. A null value should be
    returned if the message is blocked from sending.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preSend`：在发送消息之前调用。如果消息被阻止发送，则应返回空值。'
- en: '`postSend`: This is invoked after an attempt to send a message. It indicates
    whether the message was sent successfully or not. This can be used for audit purposes.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postSend`：在尝试发送消息后调用。它指示消息是否成功发送。这可用于审计目的。'
- en: '`preReceive`: This applies only if the channel is pollable and is invoked when
    a component calls `receive()` on the channel, but before a message is actually
    read from that channel. It allows implementers to decide whether the channel can
    return a message to the caller.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preReceive`：仅当通道可轮询时才适用，并且在组件在通道上调用`receive()`时调用，但在实际从该通道读取消息之前。它允许实现者决定通道是否可以向调用者返回消息。'
- en: '`postReceive`: This is similar to `preReceive` and it applies only to pollable
    channels. It''s invoked after a message is read from a channel but before it''s
    returned to the component that called `receive()`. If it returns a null value,
    then no message is received. This allows the implementer to control what, if anything,
    is actually received by the poller.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postReceive`：这类似于`preReceive`，仅适用于可轮询通道。在从通道读取消息后但在返回给调用`receive()`的组件之前调用。如果返回空值，则不会收到任何消息。这允许实现者控制轮询器实际接收了什么，如果有的话。'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This is a comparatively long chapter in which we discussed message channel patterns,
    different types of channels, and the default implementations of channels provided
    by Spring. We also covered load balancing, failover, error handling on message
    channels, persisting messages, and adding interceptors. All these concepts are
    at the core of building a reliable and scalable solution, and we will see its
    hands-on implementation in the upcoming chapters where we will discuss Spring
    Integration components such as service activators, gateway, delayers, and so on
    that are used to process messages.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对较长的章节，我们在其中讨论了消息通道模式、不同类型的通道，以及Spring提供的通道的默认实现。我们还涵盖了消息通道上的负载平衡、故障转移、错误处理、持久化消息和添加拦截器。所有这些概念都是构建可靠和可扩展解决方案的核心，我们将在接下来的章节中看到它们的实际实现，我们将讨论Spring集成组件，如服务激活器、网关、延迟器等，这些组件用于处理消息。
