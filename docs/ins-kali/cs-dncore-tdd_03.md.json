["```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n\n    public LoanProcessor()\n    {\n       eligibilityChecker= new EligibilityChecker();\n    }        \n\n    public void ProcessCustomerLoan(Loan loan)\n    {\n       throw new NotImplementedException();\n    }    \n}\n```", "```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n\n    public LoanProcessor(EligibilityChecker eligibilityChecker)\n    {\n       this.eligibilityChecker= eligibilityChecker;\n    }        \n\n    public void ProcessCustomerLoan(Loan loan)\n    {\n       bool isEligible=eligibilityChecker.CheckLoan(loan);\n       throw new NotImplementedException();\n    }    \n}\n```", "```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n\n    public EligibilityChecker EligibilityCheckerObject \n    {\n        set { eligibilityChecker = value; }\n    }     \n\n    public void ProcessCustomerLoan(Loan loan)\n    {\n       bool isEligible=eligibilityChecker.CheckLoan(eligibilityChecker);\n       throw new NotImplementedException();\n    }    \n}\n```", "```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n    private CurrencyConverter currencyConverter;\n\n    public LoanProcessor()\n    {\n       eligibilityChecker= new EligibilityChecker();\n       currencyConverter = new CurrencyConverter();\n       currencyConverter.DownloadCurrentRates();\n       eligibilityChecker.CurrentRates= currencyConverter.Rates;\n    }\n}\n```", "```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n    private CurrencyConverter currencyConverter;\n\n    public LoanProcessor()\n    {\n       eligibilityChecker= new EligibilityChecker();\n       currencyConverter = new CurrencyConverter();\n       currencyConverter.DownloadCurrentRates();\n       eligibilityChecker.CurrentRates= currencyConverter.Rates;\n    } \n\n    // constructor for testing\n    public LoanProcessor(EligibilityChecker eligibilityChecker,CurrencyConverter currencyConverter)\n    {\n       this.eligibilityChecker= eligibilityChecker;\n       this.currencyConverter = currencyConverter;\n    }\n}\n```", "```cs\npublic class LoanProcessor\n{\n    private EligibilityChecker eligibilityChecker;\n    private DbContext dbContext;\n\n    public LoanProcessor(EligibilityChecker eligibilityChecker, DbContext dbContext)\n    {\n       this.eligibilityChecker= eligibilityChecker;\n       this.dbContext= dbContext;\n    }\n\n    public double CalculateCarLoanRate(Loan loan)\n    {\n        double rate=12.5F;\n        bool isEligible=eligibilityChecker.IsApplicantEligible(loan);\n        if(isEligible)\n          rate=rate-loan.DiscountFactor; \n        return rate;\n    }\n\n    public List<CarLoan> GetCarLoans()\n    {\n        return dbContext.CarLoan;\n    }          \n}\n```", "```cs\npublic static class LoanProcessor\n{\n    private static EligibilityChecker eligibilityChecker= new EligibilityChecker();\n\n    public static double CalculateCarLoanRate(Loan loan)\n    {\n        double rate=12.5F;\n        bool isEligible=eligibilityChecker.IsApplicantEligible(loan);\n        if(isEligible)\n          rate=rate-loan.DiscountFactor; \n        return rate;\n    }     \n}\n```", "```cs\npublic class LoanProcessor\n{\n    private CurrencyConverter currencyConverter;\n\n    public LoanProcessor(LoanCalculator loanCalculator)\n    {\n       currencyConverter = loanCalculator.GetCurrencyConverter();\n    }\n}\n```", "```cs\npublic class LoanProcessor\n{\n    private CurrencyConverter currencyConverter;\n\n    public LoanProcessor(CurrencyConverter currencyConverter)\n    {\n       this.currencyConverter = currencyConverter;\n    }     \n}\n```", "```cs\nloanCalculator.\n    CalculateHouseLoan(loanDTO).\n        GetPaymentRate().\n            GetMaximumYearsToPay();\n```", "```cs\nvar houseLoan=loanCalculator.CalculateHouseLoan(loanDTO);\nvar paymentRate=houseLoan.GetPaymentRate();\nvar maximumYears=paymentRate.GetMaximumYearsToPay();\n```", "```cs\npublic class LoanCalculator\n{\n    public CarLoan CalculateCarLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();\n    }\n\n    public HouseLoan CalculateHouseLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();\n    }\n\n    public List<Rate> ParseRatesFromXmlString(string xmlString)\n    {\n        throw new NotImplementedException();\n    }\n\n    public List<Rate> ParseRatesFromXmlFile(string xmlFile)\n    {\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic class RateParser : IRateParser\n{    \n    public List<Rate> ParseRatesFromXml(string xmlString)\n    {\n        throw new NotImplementedException();\n    }\n    public List<Rate> ParseRatesFromXmlFile(string xmlFile)\n    {\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic class LoanCalculator\n{\n    private IRateParser rateParser;\n\n    public LoanCalculator(IRateParser rateParser)\n    {\n        this.rateParser=rateParser;\n    }\n\n    public CarLoan CalculateCarLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();\n    }\n\n    public HouseLoan CalculateCarLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();\n    }  \n}\n```", "```cs\npublic class LoanRepository\n{\n    private DbContext dbContext;\n    private IEligibilityChecker eligibilityChecker;\n\n    public LoanRepository(DbContext dbContext,IEligibilityChecker eligibilityChecker)\n    {\n        this.dbContext=dbContext;\n        this.eligibilityChecker= eligibilityChecker;\n    }\n\n    public List<CarLoan> GetCarLoans()\n    {\n        return dbContext.CarLoan;\n    }\n\n    public List<HouseLoan> GetHouseLoans()\n    {\n        return dbContext.HouseLoan;\n    }\n\n    public double CalculateCarLoanRate(CarLoan carLoan)\n    {\n        double rate=12.5F;\n        bool isEligible=eligibilityChecker.IsApplicantEligible(carLoan);\n        if(isEligible)\n          rate=rate-carLoan.DiscountFactor; \n        return rate;\n    }\n}\n```", "```cs\npublic class LoanService\n{\n    private IEligibilityChecker eligibilityChecker;\n\n    public LoanService(IEligibilityChecker eligibilityChecker)\n    {\n        this.eligibilityChecker= eligibilityChecker;\n    }    \n\n    public double CalculateCarLoanRate(CarLoan carLoan)\n    {\n        double rate=12.5F;\n        bool isEligible=eligibilityChecker.IsApplicantEligible(carLoan);\n        if(isEligible)\n          rate=rate-carLoan.DiscountFactor; \n        return rate;\n    }\n}\n```", "```cs\npublic class LoanRepository\n{\n    private DbContext dbContext;\n\n    public LoanRepository(DbContext dbContext)\n    {\n        this.dbContext=dbContext;\n    }\n\n    public List<CarLoan> GetCarLoans()\n    {\n        return dbContext.CarLoan;\n    }\n\n    public List<HouseLoan> GetHouseLoans()\n    {\n        return dbContext.HouseLoan;\n    }    \n}\n```", "```cs\npublic class LoanCalculator\n{\n    private IRateParser rateParser;\n\n    public LoanCalculator(IRateParser rateParser)\n    {\n        this.rateParser=rateParser;\n    }\n\n    public Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        if(loanDTO.LoanType==LoanType.CarLoan)\n        {\n            loan.LoanType=LoanType.CarLoan;\n            loan.InterestRate=rateParser.GetRateByLoanType(LoanType.CarLoan);\n            // do other processing\n        }\n        else if(loanDTO.LoanType==LoanType.HouseLoan)\n        {\n            loan.LoanType=LoanType.HouseLoan;\n            loan.InterestRate=rateParser.GetRateByLoanType(LoanType.HouseLoan);\n            // do other processing\n        }        \n        return loan;\n    }   \n}\n```", "```cs\npublic class LoanCalculator\n{\n    protected IRateParser rateParser;\n\n    public LoanCalculator(IRateParser rateParser)\n    {\n        this.rateParser=rateParser;\n    }\n\n    public Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan(); \n        // do some base processing\n        return loan;\n    }   \n}\n```", "```cs\npublic class CarLoanCalculator : LoanCalculator\n{    \n    public CarLoanCalculator(IRateParser rateParser) :base(rateParser)\n    {\n        base.rateParser=rateParser;\n    }\n\n    public override Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        loan.LoanType=loanDTO.LoanType;\n        loan.InterestRate=rateParser.GetRateByLoanType(loanDTO.LoanType);\n        // do other processing\n        return loan\n    }   \n}\n```", "```cs\npublic class HouseLoanCalculator : LoanCalculator\n{    \n    public HouseLoanCalculator(IRateParser rateParser) :base(rateParser)\n    {\n        base.rateParser=rateParser;\n    }\n\n    public override Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        loan.LoanType=LoanType.HouseLoan;\n        loan.InterestRate=rateParser.GetRateByLoanType(LoanType.HouseLoan);\n        // do other processing\n        return loan;\n    }    \n}\n```", "```cs\npublic interface ILoanCalculator\n{\n    Loan CalculateLoan(LoanDTO loanDTO);\n}\n```", "```cs\npublic class CarLoanCalculator : ILoanCalculator\n{    \n    private IRateParser rateParser;\n\n    public CarLoanCalculator(IRateParser rateParser)\n    {\n        this.rateParser=rateParser;\n    }\n\n    public Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        loan.LoanType=loanDTO.LoanType;\n        loan.InterestRate=rateParser.GetRateByLoanType(loanDTO.LoanType);\n        // do other processing\n        return loan\n    }   \n}\n```", "```cs\npublic class HouseLoanCalculator  : ILoanCalculator\n{    \n    private IRateParser rateParser;\n\n    public HouseLoanCalculator (IRateParser rateParser)\n    {\n        this.rateParser=rateParser;\n    }\n\n    public Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        Loan loan = new Loan();\n        loan.LoanType=loanDTO.LoanType;\n        loan.InterestRate=rateParser.GetRateByLoanType(loanDTO.LoanType);\n        // do other processing\n        return loan\n    }   \n}\n```", "```cs\npublic class LoanCalculator\n{\n    public Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();\n    }   \n}\n\npublic class HouseLoanCalculator  : LoanCalculator\n{     \n    public override Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();   \n    }   \n}\n\npublic class CarLoanCalculator  : LoanCalculator\n{     \n    public override Loan CalculateLoan(LoanDTO loanDTO)\n    {\n        throw new NotImplementedException();   \n    }   \n}\n```", "```cs\npublic static void Main(string [] args)\n{\n    //substituting CarLoanCalulator for LoanCalculator\n    RateParser rateParser = new RateParser();\n    LoanCalculator loanCalculator= new CarLoanCalculator(rateParser);\n    Loan carLoan= loanCalulator.CalculateLoan();\n\n    //substituting HouseLoanCalculator for LoanCalculator\n    loanCalculator= new HouseLoanCalculator(rateParser);\n    Loan houseLoan= loanCalulator.CalculateLoan();\n\n    Console.WriteLine($\"Car Loan Interest Rate - {carLoan.InterestRate}\");\n    Console.WriteLine($\"House Loan Interest Rate - {houseLoan.InterestRate}\");\n}\n\n```", "```cs\npublic interface IRateCalculator\n{\n    Rate GetYearlyCarLoanRate();\n    Rate GetYearlyHouseLoanRate();\n    Lender FindLender(LoanType loanType);\n}\n```", "```cs\npublic class RateCalculator :IRateCalculator\n{\n    public Rate GetYearlyCarLoanRate()\n    {\n        throw new NotImplementedException();\n    }\n\n    public Rate GetYearlyHouseLoanRate()\n    {\n        throw new NotImplementedException();\n    }\n\n    public Lender FindLender(LoanType loanType)\n    {\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic interface IRateCalculator\n{\n    Rate GetYearlyCarLoanRate();\n    Rate GetYearlyHouseLonaRate();\n}\n\npublic interface ILenderManager\n{\n    Lender FindLender(LoanType loanType);\n}\n```", "```cs\npublic class RateCalculator :IRateCalculator\n{\n    public Rate GetYearlyCarLoanRate()\n    {\n        throw new NotImplementedException();\n    }\n\n    public Rate GetYearlyHouseLonaRate()\n    {\n        throw new NotImplementedException();\n    }    \n}\n```", "```cs\npublic class AuthenticationManager\n{\n    private DbContext dbContext;\n\n    public AuthenticationManager(DbContext dbContext)\n    {\n        this.dbContext=dbContext;\n    }\n}\n```", "```cs\npublic interface IDbContext\n{\n    int SaveChanges();\n    void Dispose();\n}\n\npublic class DbContext : IDbContext\n{\n    public int SaveChanges()\n    {\n        throw new NotImplementedException();\n    }\n\n    public void Dispose()\n    {\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic class AuthenticationManager\n{\n    private IDbContext dbContext;\n\n    public AuthenticationManager(IDbContext dbContext)\n    {\n        this.dbContext=dbContext;\n    }\n}\n```", "```cs\npublic class AuthenticationManager\n{\n    private IDbContext dbContext;\n\n    private IDbContext DbContext\n    {\n        set\n        {\n            dbContext=value;\n        }\n    }\n}\n```", "```cs\npublic interface IRateParser\n{\n    Rate ParseRate();\n}\n\npublic interface IRepository\n{\n    void InjectRateParser(IRateParser rateParser);\n}\n```", "```cs\npublic class LoanRepository : IRepository\n{\n    IRateParser rateParser;\n\n    public void InjectRateParser(IRateParser rateParser)\n    {\n        this.rateParser = rateParser;\n    }\n\n     public float GetCheapestRate(LoanType loanType)\n     {\n         return rateParser.GetRateByLoanType(loanType);\n     }\n}\n```", "```cs\npublic class XmlRateParser : IRateParser\n{\n    public Rate ParseRate()\n    {\n        // Parse rate available from xml file\n        throw new NotImplementedException();\n    }\n}\n\npublic class RestServiceRateParser : IRateParser\n{\n    public Rate ParseRate()\n    {\n        // Parse rate available from REST service\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\nIRateParser rateParser = new XmlRateParser();           \nLoanRepository loanRepository = new LoanRepository();\n((IRepository)loanRepository).InjectRateParser(rateParser);\nvar rate= loanRepository.GetCheapestRate();\n\nrateParser = new RestServiceRateParser();       \n((IRepository)loanRepository).InjectRateParser(rateParser);\nrate= loanRepository.GetCheapestRate();\n\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Add framework services.\n    services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n    services.AddIdentity<ApplicationUser, IdentityRole>().AddEntityFrameworkStores<ApplicationDbContext>().AddDefaultTokenProviders();\n\n    services.AddMvc();\n\n    // Configured DI\n    services.AddTransient<ILenderManager, LenderManager >();\n    services.AddTransient<IRateCalculator, RateCalculator>();\n}\n```", "```cs\nservices.AddScoped<ILenderManager, LenderManager >();\n```", "```cs\n// instantiating singleton \nservices.AddSingleton<ILenderManager>(new LenderManager()); \n\n// alternative way of configuring singleton service\nservices.AddSingleton<IRateCalculator, RateCalculator>();\n```"]