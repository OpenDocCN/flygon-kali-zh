["```js\nconst int ledPin =  12;         // the number of the LED pin \nconst int thresholdvalue = 400; //The threshold to turn the led on \n\nvoid setup() { \n pinMode(ledPin, OUTPUT); \n Serial.begin(9600); \n} \n\nvoid loop() { \n  int sensorValue = analogRead(A0);   //use A0 to read the electrical signal \n  Serial.print(\"Noise detected=\"); \n  Serial.println(sensorValue); \n  delay(100); \n  if(sensorValue > thresholdvalue) \n  digitalWrite(ledPin,HIGH);//if the value read from A0 is larger than 400,then light the LED \n  delay(200); \n  digitalWrite(ledPin,LOW); \n} \n\n```", "```js\nint load = 10;  \nint intensity = 128; \n\nvoid setup() \n{ \npinMode(loaf, OUTPUT); \nattachInterrupt(0, cross_zero_int, RISING); \n} \n\nvoid loop() \n{ \nintensity = map(analogRead(0),0,1023,10,128); \n} \n\nvoid cross_zero_int() \n{ \nint dimtime = (65 * intensity);  \ndelayMicroseconds(dimtime);  \ndigitalWrite(load, HIGH);  \ndelayMicroseconds(8);  \ndigitalWrite(load, LOW); \n} \n\n```", "```js\n#include <MFRC522.h> \n#include <SPI.h> \n#define SAD 10 \n#define RST 5 \n\nMFRC522 nfc(SAD, RST); \n\n#define ledPinOpen  2 \n#define ledPinClose 3 \n\nvoid setup() { \n  pinMode(ledPinOpen,OUTPUT);    \n  pinMode(ledPinClose,OUTPUT); \n\n  SPI.begin(); \n  Serial.begin(115200); \n  Serial.println(\"Looking for RC522\"); \n  nfc.begin(); \n  byte version = nfc.getFirmwareVersion(); \n\n  if (! version) { \n    Serial.print(\"We don't find RC522\"); \n    while(1); \n  } \n  Serial.print(\"Found RC522\"); \n  Serial.print(\"Firmware version 0x\"); \n  Serial.print(version, HEX); \n  Serial.println(\".\"); \n} \n\n#define AUTHORIZED_COUNT 2 //number of cards Authorized \nbyte Authorized[AUTHORIZED_COUNT][6] = {{0xC6, 0x95, 0x39, 0x31, 0x5B},{0x2E, 0x7, 0x9A, 0xE5, 0x56}}; \n\nvoid printSerial(byte *serial); \nboolean isSame(byte *key, byte *serial); \nboolean isAuthorized(byte *serial); \n\nvoid loop() { \n  byte status; \n  byte data[MAX_LEN]; \n  byte serial[5]; \n  boolean Open = false; \n  digitalWrite(ledPinOpen, Open); \n  digitalWrite(ledPinClose, !Open); \n  status = nfc.requestTag(MF1_REQIDL, data); \n\n  if (status == MI_OK) { \n    status = nfc.antiCollision(data); \n    memcpy(serial, data, 5); \n\n    if(isAuthorized(serial)) \n    {  \n      Serial.println(\"Access Granted\"); \n      Open = true; \n    } \n    else \n    {  \n      printSerial(serial); \n      Serial.println(\"NO Access\"); \n      Open = false; \n    } \n\n    nfc.haltTag(); \n    digitalWrite(ledPinOpen, Open); \n    digitalWrite(ledPinClose, !Open); \n    delay(2000); \n\n  } \n  delay(500); \n} \n\nboolean isSame(byte *key, byte *serial) \n{ \n    for (int i = 0; i < 4; i++) { \n      if (key[i] != serial[i]) \n      {  \n        return false;  \n      } \n    } \n    return true; \n} \n\nboolean isAuthorized(byte *serial) \n{ \n    for(int i = 0; i<AUTHORIZED_COUNT; i++) \n    { \n      if(isSame(serial, Authorized[i])) \n        return true; \n    } \n   return false; \n} \nvoid printSerial(byte *serial) \n{ \n    Serial.print(\"Serial:\"); \n    for (int i = 0; i < 5; i++) { \n    Serial.print(serial[i], HEX); \n    Serial.print(\" \"); \n    } \n} \n\n```", "```js\n**#define AUTHORIZED_COUNT 2**\n**byte Authorized[AUTHORIZED_COUNT][6] = {{0xC6, 0x95, 0x39, 0x31, 0x5B},\n      {0x2E, 0x7, 0x9A, 0xE5, 0x56}};**\n\n```", "```js\nconst int sensorPin= 0; \nconst int buzzerPin= 12; \nint smoke_level; \n\nvoid setup() { \nSerial.begin(115200);  \npinMode(sensorPin, INPUT); \npinMode(buzzerPin, OUTPUT); \n} \n\nvoid loop() { \nsmoke_level= analogRead(sensorPin); \nSerial.println(smoke_level); \n\nif(smoke_level > 200){  \ndigitalWrite(buzzerPin, HIGH); \n} \n\nelse{ \ndigitalWrite(buzzerPin, LOW); \n} \n} \n\n```", "```js\n// Modules \nvar express = require('express'); \n\n// Express app \nvar app = express(); \n\n// aREST \nvar piREST = require('pi-arest')(app); \npiREST.set_id('34f5eQ'); \npiREST.set_name('motion_sensor'); \npiREST.set_mode('bcm'); \n\n// Start server \napp.listen(3000, function () { \n  console.log('Raspberry Pi Zero motion sensor started!'); \n}); \n\n```", "```js\n// Modules \nvar express = require('express'); \n\n// Express app \nvar app = express(); \n\n// aREST \nvar piREST = require('pi-arest')(app); \npiREST.set_id('35f5fc'); \npiREST.set_name('alarm'); \npiREST.set_mode('bcm'); \n\n// Start server \napp.listen(3000, function () { \n  console.log('Raspberry Pi Zero alarm started!'); \n}); \n\n```", "```js\n// Modules \nvar express = require('express'); \nvar app = express(); \nvar request = require('request'); \n\n// Use public directory \napp.use(express.static('public')); \n\n// Pi addresses \nvar motionSensorPi = \"192.168.1.104:3000\"; \nvar alarmPi = \"192.168.1.103:3000\" \n\n// Pins \nvar buzzerPin = 15; \nvar ledPin = 14; \nvar motionSensorPin = 17; \n\n// Routes \napp.get('/', function (req, res) { \nres.sendfile(__dirname + '/public/interface.html'); \n}); \n\napp.get('/alarm', function (req, res) { \n  res.json({alarm: alarm}); \n}); \n\napp.get('/off', function (req, res) { \n\n  // Set alarm off \n  alarm = false; \n\n  // Set LED & buzzer off \n  request(\"http://\" + alarmPi + \"/digital/\" + ledPin + '/0'); \n  request(\"http://\" + alarmPi + \"/digital/\" + buzzerPin + '/0'); \n\n  // Answer \n  res.json({message: \"Alarm off\"}); \n\n}); \n\n// Start server \nvar server = app.listen(3000, function() { \n    console.log('Listening on port %d', server.address().port); \n}); \n\n// Motion sensor measurement loop \nsetInterval(function() { \n\n  // Get data from motion sensor \n  request(\"http://\" + motionSensorPi + \"/digital/\" + motionSensorPin, \n    function (error, response, body) { \n\n      if (!error && body.return_value == 1) { \n\n        // Activate alarm \n        alarm = true; \n\n        // Set LED on \n        request(\"http://\" + alarmPi + \"/digital/\" + ledPin + '/1'); \n\n        // Set buzzer on \n        request(\"http://\" + alarmPi + \"/digital/\" + buzzerPin + '/1'); \n\n      } \n  }); \n\n}, 2000);\n```", "```js\n<!DOCTYPE html> \n<html> \n\n<head> \n  <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script> \n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\"> \n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js\"></script> \n  <script src=\"js/script.js\"></script> \n  <link rel=\"stylesheet\" href=\"css/style.css\"> \n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> \n</head> \n\n<script type=\"text/javascript\"> \n\n/* Copyright (C) 2007 Richard Atterer, richard\u00c2\u00a9atterer.net \n   This program is free software; you can redistribute it and/or modify it \n   under the terms of the GNU General Public License, version 2\\. See the file \n   COPYING for details. */ \n\nvar imageNr = 0; // Serial number of current image \nvar finished = new Array(); // References to img objects which have finished downloading \nvar paused = false; \n\n</script> \n<div id=\"container\"> \n\n  <h3>Security System</h3> \n  <div class='row voffset50'> \n  <div class='col-md-4'></div> \n  <div class='col-md-4 text-center'> \n      Alarm is OFF \n    </div> \n    <div class='col-md-4'></div> \n\n  </div> \n\n  <div class='row'> \n\n    <div class='col-md-4'></div> \n    <div class='col-md-4'> \n      <button id='off' class='btn btn-block btn-danger'>Deactivate Alarm</button> \n    </div> \n    <div class='col-md-4'></div> \n\n  </div> \n\n  </div> \n\n</body> \n</html> \n\n```", "```js\nvar sensorLib = require('node-dht-sensor'); \nvar sensor = { \n    initialize: function () { \n        return sensorLib.initialize(11, 4); \n    }, \n    read: function () { \n        var readout = sensorLib.read(); \n        console.log('Temperature: ' + readout.temperature.toFixed(2) + 'C, ' + \n            'humidity: ' + readout.humidity.toFixed(2) + '%'); \n        setTimeout(function () { \n            sensor.read(); \n        }, 2000); \n    } \n}; \n\nif (sensor.initialize()) { \n    sensor.read(); \n} else { \n    console.warn('Failed to initialize sensor'); \n} \n\n```"]