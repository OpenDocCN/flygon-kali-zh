["```cs\npublic class Player\n{\n    public string PlayerName { get; }\n    public long HighScore { get; }\n\n    public Player(string playerName, long highScore)\n    {\n        PlayerName = playerName;\n        HighScore = highScore;\n    }\n\n    Public Player UpdateHighScore(long highScore)\n    {\n        return new Player(PlayerName, highScore);\n    }\n\n}\n```", "```cs\npublic struct Product\n{\n    public string Vendor { get; }\n    public string ProductName { get; }\n    public Product(string vendor, string productName)\n    {\n        Vendor = vendor;\n        ProductName = productName;\n    }\n}\n```", "```cs\npublic static List<Product> GetProducts()\n{\n    return new List<Products>\n    {\n        new Product(\"Microsoft\", \"Microsoft Office\"),\n        new Product(\"Oracle\", \"Oracle Database\"),\n        new Product(\"IBM\", \"IBM DB2 Express\"),\n        new Product(\"IBM\", \"IBM DB2 Express\"),\n        new Product(\"Microsoft\", \"SQL Server 2017 Express\"),\n        new Product(\"Microsoft\", \"Visual Studio 2019 Community Edition\"),\n        new Product(\"Oracle\", \"Oracle JDeveloper\"),\n        new Product(\"Microsoft\", \"Azure\"),\n        new Product(\"Microsoft\", \"Azure\"),\n        new Product(\"Microsoft\", \"Azure Stack\"),\n        new Product(\"Google\", \"Google Cloud Platform\"),\n        new Product(\"Amazon\", \"Amazon Web Services\")\n    };\n}\n```", "```cs\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var vendors = (from p in GetProducts()\n                        select p.Vendor)\n                        .Distinct()\n                        .OrderBy(x => x);\n        foreach(var vendor in vendors)\n            Console.WriteLine(vendor);\n        Console.ReadKey();\n    }\n}\n```", "```cs\n        public UpdateView(MyEntities context, DataItem dataItem)\n        {\n            InitializeComponent();\n            try\n            {\n                DataContext = this;\n                _dataItem = dataItem;\n                _context = context;\n                nameTextBox.Text = _dataItem.Name;\n                DescriptionTextBox.Text = _dataItem.Description;\n            }\n            catch (Exception ex)\n            {\n                Debug.WriteLine(ex);\n                throw;\n            }\n        }\n```", "```cs\nusing System;\nnamespace CH04.Validators\n{\n    internal static class ArgumentValidator\n    {\n        public static void NotNull(\n            string name, \n            [ValidatedNotNull] object value\n        )\n        {\n            if (value == null)\n                throw new ArgumentNullException(name);\n        }\n    }\n\n    [AttributeUsage(\n        AttributeTargets.All, \n        Inherited = false, \n        AllowMultiple = true)\n    ]\n    internal sealed class ValidatedNotNullAttribute : Attribute\n    {\n    }\n}\n```", "```cs\npublic ItemsUpdateView(\n    Entities context, \n    ItemsView itemView\n)\n{\n    InitializeComponent();\n    ArgumentValidator.NotNull(\"ItemsUpdateView\", itemView);\n    // ### implementation omitted ###\n}\n```", "```cs\npublic Student Find(List<Student> list, int id) \n{          \nStudent r = null;foreach (var i in list)          \n{             \nif (i.Id == id)                   \n    r = i;          }          return r;     \n}\n```", "```cs\npublic Student Find(List<Student> list, int id) \n{          \n    Student r = null;\n    foreach (var i in list)          \n    {             \n        if (i.Id == id)                  \n        {\n            r = i; \n            break;         \n        }      \n    }\n    return r;         \n}\n```", "```cs\nvar amount = ViewModel\n    .ExpenseLines\n    .Where(e => e.Name.Equals(\"Life Insurance\"))\n    .FirstOrDefault()\n    .Amount;\n```", "```cs\npublic decimal GetValueByName(string name)\n{\n    return ViewModel\n        .ExpenseLines\n        .Where(e => e.Name.Equals(name))\n        .FirstOrDefault()\n        .Amount;\n}\n```", "```cs\nvar amount = GetValueByName(\"Life Insurance\");\n```", "```cs\npublic void UpdateUserInfo(int id, string username, string firstName, string lastName, string addressLine1, string addressLine2, string addressLine3, string addressLine3, string addressLine4, string city, string postcode, string region, string country, string homePhone, string workPhone, string mobilePhone, string personalEmail, string workEmail, string notes) \n{\n    // ### implementation omitted ###\n}\n```", "```cs\npublic class UserInfo\n{\n    public int Id { get;set; }\n    public string Username { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string AddressLine1 { get; set; }\n    public string AddressLine2 { get; set; }\n    public string AddressLine3 { get; set; }\n    public string AddressLine4 { get; set; }\n    public string City { get; set; }\n    public string Region { get; set; }\n    public string Country { get; set; }\n    public string HomePhone { get; set; }\n    public string WorkPhone { get; set; }\n    public string MobilePhone { get; set; }\n    public string PersonalEmail { get; set; }\n    public string WorkEmail { get; set; }\n    public string Notes { get; set; }\n}\n```", "```cs\npublic void UpdateUserInfo(UserInfo userInfo)\n{\n    // ### implementation omitted ###\n}\n```", "```cs\npublic void SrpBrokenMethod(string folder, string filename, string text, emailFrom, password, emailTo, subject, message, mediaType)\n{\n    var file = $\"{folder}{filename}\";\n    File.WriteAllText(file, text);\n    MailMessage message = new MailMessage();  \n    SmtpClient smtp = new SmtpClient();  \n    message.From = new MailAddress(emailFrom);  \n    message.To.Add(new MailAddress(emailTo));  \n    message.Subject = subject;  \n    message.IsBodyHtml = true;  \n    message.Body = message;  \n    Attachment emailAttachment = new Attachment(file); \n    emailAttachment.ContentDisposition.Inline = false; \n    emailAttachment.ContentDisposition.DispositionType =        \n        DispositionTypeNames.Attachment; \n    emailAttachment.ContentType.MediaType = mediaType;  \n    emailAttachment.ContentType.Name = Path.GetFileName(filename); \n    message.Attachments.Add(emailAttachment);\n    smtp.Port = 587;  \n    smtp.Host = \"smtp.gmail.com\";\n    smtp.EnableSsl = true;  \n    smtp.UseDefaultCredentials = false;  \n    smtp.Credentials = new NetworkCredential(emailFrom, password);  \n    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;  \n    smtp.Send(message);\n}\n```", "```cs\n    public struct TextFileData\n    {\n        public string FileName { get; private set; }\n        public string Text { get; private set; }\n        public MimeType MimeType { get; }        \n\n        public TextFileData(string filename, string text)\n        {\n            Text = text;\n            MimeType = MimeType.TextPlain;\n            FileName = $\"{filename}-{GetFileTimestamp()}\";\n        }\n\n        public void SaveTextFile()\n        {\n            File.WriteAllText(FileName, Text);\n        }\n\n        private static string GetFileTimestamp()\n        {\n            var year = DateTime.Now.Year;\n            var month = DateTime.Now.Month;\n            var day = DateTime.Now.Day;\n            var hour = DateTime.Now.Hour;\n            var minutes = DateTime.Now.Minute;\n            var seconds = DateTime.Now.Second;\n            var milliseconds = DateTime.Now.Millisecond;\n            return $\"{year}{month}{day}@{hour}{minutes}{seconds}{milliseconds}\";\n        }\n    }\n```", "```cs\n[Flags]\npublic enum MimeType\n{\n    [Description(\"text/plain\")]\n    TextPlain\n}\n```", "```cs\nMimeType = MimeType.TextPlain;\n```", "```cs\n    public class Smtp\n    {\n        private readonly SmtpClient _smtp;\n\n        public Smtp(Credential credential)\n        {\n            _smtp = new SmtpClient\n            {\n                Port = 587,\n                Host = \"smtp.gmail.com\",\n                EnableSsl = true,\n                UseDefaultCredentials = false,\n                Credentials = new NetworkCredential(\n                 credential.EmailAddress, credential.Password),\n                DeliveryMethod = SmtpDeliveryMethod.Network\n            };\n        }\n\n        public void SendMessage(MailMessage mailMessage)\n        {\n            _smtp.Send(mailMessage);\n        }\n    }\n```", "```cs\n    public class DemoWorker\n    {\n        TextFileData _textFileData;\n\n        public void DoWork()        \n        {\n            SaveTextFile();\n            SendEmail();\n        }\n\n        public void SendEmail()\n        {\n            Smtp smtp = new Smtp(new Credential(\"fakegmail@gmail.com\", \n             \"fakeP@55w0rd\"));\n            smtp.SendMessage(GetMailMessage());\n        }\n\n        private MailMessage GetMailMessage()\n        {\n            var msg = new MailMessage();\n            msg.From = new MailAddress(\"fakegmail@gmail.com\");\n            msg.To.Add(new MailAddress(\"fakehotmail@hotmail.com\"));\n            msg.Subject = \"Some subject\";\n            msg.IsBodyHtml = true;\n            msg.Body = \"Hello World!\";\n            msg.Attachments.Add(GetAttachment());\n            return msg;\n        }\n\n        private Attachment GetAttachment()\n        {\n            var attachment = new Attachment(_textFileData.FileName);\n            attachment.ContentDisposition.Inline = false;\n            attachment.ContentDisposition.DispositionType = \n             DispositionTypeNames.Attachment;\n            attachment.ContentType.MediaType = \n             MimeType.TextPlain.Description();\n            attachment.ContentType.Name = \n             Path.GetFileName(_textFileData.FileName);\n            return attachment;\n        }\n\n        private void SaveTextFile()\n        {\n            _textFileData = new TextFileData(\n                $\"{Environment.SpecialFolder.MyDocuments}attachment\", \n                \"Here is some demo text!\"\n            );\n            _textFileData.SaveTextFile();\n        }\n    }\n```"]