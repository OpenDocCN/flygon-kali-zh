- en: Chapter 1. NumPy Quick Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：NumPy 快速入门
- en: '*Let''s get started. We will install NumPy and related software on different
    operating systems and have a look at some simple code that uses NumPy. This chapter
    briefly introduces the IPython interactive shell. SciPy is closely related to
    NumPy, so you will see the SciPy name appearing here and there. At the end of
    this chapter, you will find pointers on how to find additional information online
    if you get stuck or are uncertain about the best way to solve problems.*'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。 我们将在不同的操作系统上安装 NumPy 和相关软件，并看一些使用 NumPy 的简单代码。 本章简要介绍了 IPython 交互式 shell。
    SciPy 与 NumPy 密切相关，因此您将看到 SciPy 名称出现在此处和那里。 在本章的最后，您将找到有关如何在线获取更多信息的指南，如果您陷入困境或不确定解决问题的最佳方法。
- en: 'In this chapter, you will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将涵盖以下主题：
- en: Install Python, SciPy, matplotlib, IPython, and NumPy on Windows, Linux, and
    Macintosh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows，Linux 和 Macintosh 上安装 Python，SciPy，Matplotlib，IPython 和 NumPy
- en: Do a short refresher of Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾一下 Python
- en: Write simple NumPy code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写简单的 NumPy 代码
- en: Get to know IPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 IPython
- en: Browse online documentation and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览在线文档和资源
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: '**NumPy** is based on Python, so you need to have Python installed. On some
    operating systems, Python is already installed. However, you need to check whether
    the Python version corresponds with the NumPy version you want to install. There
    are many implementations of Python, including commercial implementations and distributions.
    In this book, we focus on the standard **CPython** implementation, which is guaranteed
    to be compatible with NumPy.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**NumPy** 基于 Python，因此您需要安装 Python。 在某些操作系统上，已经安装了 Python 。 但是，您需要检查 Python
    版本是否与要安装的 NumPy 版本对应的  。 Python 有许多实现，包括商业实现和发行版。 在本书中，我们将集中在标准 **CPython** 实现上，该实现可确保与
    NumPy 兼容。'
- en: Time for action – installing Python on different operating systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：在不同的操作系统上安装 Python
- en: 'NumPy has binary installers for Windows, various Linux distributions, and Mac
    OS X at [http://sourceforge.net/projects/numpy/files/](http://sourceforge.net/projects/numpy/files/).
    There is also a source distribution, if you prefer that. You need to have Python
    2.4.x or above installed on your system. We will go through the various steps
    required to install Python on the following operating systems:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 具有用于 Windows，各种 Linux 发行版和 MacOSX 的二进制安装程序，位于[`sourceforge.net/projects/numpy/files/`](http://sourceforge.net/projects/numpy/files/)。
    如果您愿意的话，还有源代码的发行版。 您需要在系统上安装 Python 2.4.x 或更高版本。 我们将完成在以下操作系统上安装 Python 所需的各个步骤：
- en: '**Debian** and **Ubuntu**: Python might already be installed on Debian and
    Ubuntu, but the development headers are usually not. On Debian and Ubuntu, install
    the `python` and `python-dev` packages with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Debian** 和 **Ubuntu**：Python 可能已经安装在 Debian 和 Ubuntu 上，但是开发版通常不是。 在 Debian
    和 Ubuntu 上，使用以下命令安装`python`和`python-dev`包：'
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Windows**: The Windows Python installer is available at [https://www.python.org/downloads/](https://www.python.org/downloads/).
    On this website, we can also find installers for Mac OS X and source archives
    for Linux, UNIX, and Mac OS X.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：Windows Python 安装程序，可从[`www.python.org/downloads`](https://www.python.org/downloads/)获取。
    在此网站上，我们还可以查找 MacOSX 的安装程序以及 Linux，UNIX 和 MacOSX 的源归档。'
- en: '**Mac**: Python comes preinstalled on Mac OS X. We can also get Python through
    MacPorts, Fink, Homebrew, or similar projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**：Python 已预装在 MacOSX 上。 我们还可以通过 MacPorts，Fink，Homebrew 或类似项目来获取 Python。'
- en: 'Install, for instance, the Python 2.7 port by running the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过运行以下命令来安装 Python 2.7 端口：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Linear** **Algebra** **PACKage** (**LAPACK**) does not need to be present
    but, if it is, NumPy will detect it and use it during the installation phase.
    It is recommended that you install LAPACK for serious numerical analysis as it
    has useful numerical linear algebra functionality.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性代数包**（**LAPACK**）不需要存在，但如果存在，NumPy 会检测到它，并在安装阶段使用它。 建议您安装 LAPACK 进行认真的数值分析，因为它具有有用的数值线性代数函数。'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We installed Python on Debian, Ubuntu, Windows, and the Mac OS X.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Debian，Ubuntu，Windows 和 MacOSX 上安装了 Python。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ''
- en: You can download the example code files for all the Packt books you have purchased
    from your account at [https://www.packtpub.com/](https://www.packtpub.com/). If
    you purchased this book elsewhere, you can visit [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
  zh: ''
- en: The Python help system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 帮助系统
- en: Before we start the NumPy introduction, let's take a brief tour of the Python
    help system, in case you have forgotten how it works or are not very familiar
    with it. The Python help system allows you to look up documentation from the interactive
    **Python** **shell**. A shell is an interactive program, which accepts commands
    and executes them for you.
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始介绍  NumPy 之前，让我们简要介绍一下 Python 帮助系统，以防万一您忘记了它的工作方式或不太熟悉它。 Python 帮助系统允许您从交互式
    **Python shell** 中查找文档。 外壳程序是交互式程序，它接受命令并为您执行命令。
- en: Time for action – using the Python help system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用 Python 帮助系统
- en: Depending on your operating system, you can access the Python shell with special
    applications, usually a terminal of some sort.
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的操作系统，您可以使用特殊应用（通常是某种终端）访问 Python shell。
- en: 'In such a terminal, type the following command to start a Python shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这样的终端中，键入以下命令以启动 Python Shell：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will get a short message with the Python version and other information
    and the following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将收到一条简短的消息，其中包含 Python 版本和其他信息以及以下提示：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Type the following in the prompt:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示符下键入以下内容：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Another message appears and the prompt changes as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 出现另一条消息，提示更改如下：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you type, for instance, `keywords` as the message says, you get a list of
    keywords. The `topics` command gives a list of topics. If you type any of the
    topic names (such as LISTS) in the prompt, you get additional information about
    the topic. Typing `q` quits the information screen. Pressing *Ctrl* + *D* together
    returns you to the normal Python prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，如果按消息提示输入`keywords`，则会得到一个关键字列表。 `topics`命令给出了主题列表。 如果您在提示符下键入任何主题名称（例如`LISTS`），则会获得有关该主题的其他信息。
    键入`q`退出信息屏幕。 同时按`Ctrl + D`返回正常的 Python 提示符：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Pressing *Ctrl* + *D* together again ends the Python shell session.
  prefs: []
  type: TYPE_NORMAL
  zh: 再次同时按下`Ctrl + D`将结束 Python Shell 会话。
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned about the Python interactive shell and the Python help system.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了 Python 交互式外壳和 Python 帮助系统。
- en: Basic arithmetic and variable assignment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本算术和变量赋值
- en: In the *Time for action – using the Python help system* section, we used the
    Python shell to look up documentation. We can also use Python as a calculator.
    By the way, this is just a refresher, so if you are completely new to Python,
    I recommend taking some time to learn the basics. If you put your mind to it,
    learning basic Python should not take you more than a couple of weeks.
  prefs: []
  type: TYPE_NORMAL
  zh: 在“实战时间：使用 Python 帮助系统”部分，我们使用 Python Shell 查找文档。 我们也可以使用 Python 作为计算器。 这种方式只是一个复习，因此，如果您是
    Python 的新手，我建议您花一些时间来学习基础知识。 如果您全神贯注，那么学习基本的 Python 应该花不了几个星期的时间。
- en: Time for action – using Python as a calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用 Python 作为计算器
- en: 'We can use Python as a calculator as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Python 作为计算器，如下所示：
- en: 'In a Python shell, add 2 and 2 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python Shell 中，如下添加 2 和 2：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Multiply 2 and 2 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 2 和 2 相乘：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Divide 2 and 2 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 2 和 2 相除如下：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you have programmed before, you probably know that dividing is a bit tricky
    since there are different types of dividing. For a calculator, the result is usually
    adequate, but the following division may not be what you were expecting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前进行过编程，则可能知道除法有些技巧，因为除法的类型不同。 对于计算器，结果通常是足够的，但是以下除法可能与您期望的不符：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will discuss what this result is about in several later chapters of this
    book. Take the cube of 2 as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面几章中讨论此结果的含义。 取 2 的立方，如下所示：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used the Python shell as a calculator and performed addition, multiplication,
    division, and exponentiation.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 Python 外壳用作计算器，并执行了加法，乘法，除法和乘幂运算。
- en: Time for action – assigning values to variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：为变量赋值
- en: Assigning values to variables in Python works in a similar way to most programming
    languages.
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中为变量赋值的方式与大多数编程语言相似。
- en: 'For instance, assign the value of `2` to a variable named `var` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，将`2`的值赋给名为`var`的变量，如下所示：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We defined the variable and assigned it a value. In this Python code, the type
    of the variable is not fixed. We can make the variable in to a list, which is
    a built-in Python type corresponding to an ordered sequence of values. Assign
    a list to `var` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了变量并为其赋值。 在此 Python 代码中，变量的类型不固定。 我们可以将变量放入一个列表中，该列表是对应于值的有序序列的内置 Python
    类型。 将`var`赋为一个列表，如下所示：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can assign a new value to a list item using its index number (counting starts
    from 0). Assign a new value to the first list element:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用其索引号将列表项赋为新值（从 0 开始计数）。 将第一个列表元素赋为新值：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also swap values easily. Define two variables and swap their values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以轻松交换值。 定义两个变量并交换它们的值：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We assigned values to variables and Python list items. This section is by no
    means exhaustive; therefore, if you are struggling, please read [Appendix B](apb.html
    "Appendix B. Additional Online Resources"), *Additional Online Resources,* to
    find recommended Python tutorials.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为变量和 Python 列表项赋值。 本节绝不详尽； 因此，如果您在挣扎，请阅读附录 B，“其他在线资源”，以找到推荐的 Python 教程。
- en: The print() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`print()`函数'
- en: If you haven't programmed in Python for a while or are a Python novice, you
    may be confused about the Python 2 versus Python 3 discussions. In a nutshell,
    the latest version Python 3 is not backward compatible with the older Python 2
    because the Python development team felt that some issues were fundamental and
    therefore warranted a radical change. The Python team has committed to maintain
    Python 2 until 2020\. This may be problematic for the people who still depend
    on Python 2 in some way. The consequence for the `print()` function is that we
    have two types of syntax.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一段时间没有使用 Python 编程或者是 Python 新手，可能会对  Python2 与 Python3 的讨论感到困惑。 简而言之，最新版本的
    Python3 与旧版本的 Python2 不向后兼容，因为 Python 开发团队认为某些问题是根本问题，因此需要进行重大更改。 Python 团队已承诺将
    Python2 维护到 2020 年。这对于仍然以某种方式依赖 Python2 的人们来说可能是个问题。 `print()`函数的结果是我们有两种语法。
- en: Time for action – printing with the print() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用`print()`函数进行打印
- en: 'We can print using the `print()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`print()`函数打印  ，如下所示：
- en: 'The old syntax is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旧语法如下：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The new Python 3 syntax is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的 Python3 语法如下：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The parentheses are now mandatory in Python 3\. In this book, I try to use
    the new syntax as much as possible; however, I use Python 2 to be on the safe
    side. To enforce the syntax, each Python 2 script with `print()` calls in this
    book starts with:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，括号在 Python3 中是必需的。在本书中，我尝试尽可能多地使用新语法。 但是，出于安全考虑，我使用 Python2。 为了强制执行语法，本书中每个带有`print()`调用的
    Python2 脚本均以：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Try to use the old syntax to get the following error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用旧的语法以获取以下错误消息：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To print a newline, use the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打印换行符，请使用以下语法：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To print multiple items, separate them with commas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打印多个项目，请用逗号分隔它们：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By default, Python separates the printed values with spaces and prints output
    to the screen. You can customize these settings. Read more about this function
    by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Python 用空格分隔打印的值，然后将输出打印到屏幕上。 您可以自定义这些设置。 通过键入以下命令来了解有关此函数的更多信息：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can exit again by typing `q`.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入`q`再次退出。
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned about the `print()` function and its relation to Python 2 and Python
    3.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了`print()`函数及其与 Python2 和 Python3 的关系。
- en: Code comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码注释
- en: Commenting code is a best practice with the goal of making code clearer for
    yourself and other coders (see [https://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments](https://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments)).
    Usually, companies and other organizations have policies regarding code comment
    such as comment templates. In this book, I did not comment the code in such a
    fashion for brevity and because the text in the book should clarify the code.
  prefs: []
  type: TYPE_NORMAL
  zh: 代码注释是最佳做法，其目的是使您自己和其他编码者更加清楚代码（请参阅[`google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments`](https://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments)）。
    通常，公司和其他组织对代码注释有政策，例如注释模板。 在本书中，为了简洁起见，我没有以这种方式注释代码，因为书中的文字应使代码清晰。
- en: Time for action – commenting code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：注释代码
- en: 'The most basic comment starts with a hash sign and continues until the end
    of the line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的注释以井号开始，一直持续到该行的末尾：
- en: 'Comment code with this type of comment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有此类注释的注释代码如下：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, if the hash sign is between single or double quotes, then we have
    a string, which is an ordered sequence of characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，如果哈希符号在单引号或双引号之间，则我们有一个字符串，它是字符的有序序列：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can also comment multiple lines as a block. This is useful if you want to
    write a more detailed description of the code. Comment multiple lines as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也可以将多行注释为一个块。 如果您想编写更详细的代码说明，这将很有用。 注释多行，如下所示：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We refer to this type of comment as triple-quoted for obvious reasons. It also
    is used to test code. You can read about testing in [Chapter 8](ch08.html "Chapter 8. Assuring
    Quality with Testing"), *Assuring Quality with Testing*.
  prefs: []
  type: TYPE_NORMAL
  zh: 由于明显的原因，我们将这种类型的注释称为三引号。 它还用于测试代码。 您可以在第八章，“确保测试的质量”中了解有关测试的信息。
- en: The if statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: The `if` statement in Python has a bit different syntax to other languages,
    such as C++ and Java. The most important difference is that indentation matters,
    which I hope you are aware of.
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的`if`语句与其他语言（例如 C++ 和 Java）的语法有些不同。 最重要的区别是缩进很重要，我希望您知道这一点。
- en: Time for action – deciding with the if statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用`if`语句来决策
- en: 'We can use the `if` statement in the following ways:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用`if`语句：
- en: 'Check whether a number is negative as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查数字是否为负，如下所示：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example, Python decided that `42` is not negative. The `else`
    clause is optional. The comparison operators are equivalent to the ones in C++,
    Java, and similar languages.
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，Python 判定`42`不为负。 `else`子句是可选的。 比较运算符等效于 C++ ，Java 和类似语言中的运算符。
- en: 'Python also has a chained branching logic compound statement for multiple tests
    similar to the switch statement in C++, Java, and other programming languages.
    Decide whether a number is negative, 0, or positive as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 还具有用于多个测试的链式分支逻辑复合语句，类似于 C++，Java 和其他编程语言中的`switch`语句。 确定数字是负数，0 还是正数，如下所示：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This time, Python decided that `42` is negative.
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，Python 判定`42`为负。
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned how to do branching logic in Python.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在 Python 中执行分支逻辑。
- en: The for loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: Python has a `for` statement with the same purpose as the equivalent construct
    in C++, Pascal, Java, and other languages. However, the mechanism of looping is
    a bit different.
  prefs: []
  type: TYPE_NORMAL
  zh: Python 具有`for`语句，其目的与 C++ ，Pascal，Java 和其他语言中的等效构造相同。 但是，循环的机制有些不同。
- en: Time for action – repeating instructions with loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用循环来重复指令
- en: 'We can use the `for` loop in the following ways:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式使用`for`循环：
- en: 'Loop over an ordered sequence, such as a list, and print each item as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环显示有序序列（例如列表），并按以下方式打印每个项目：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And remember that, as always, indentation matters in Python. We loop over a
    range of values with the built-in `range()` or `xrange()` functions. The latter
    function is slightly more efficient in certain cases. Loop over the numbers `1-9`
    with a step of 2 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，与往常一样，缩进在 Python 中很重要。 我们使用内置的`range()`或`xrange()`函数遍历一系列值。 在某些情况下，后者的功能会稍微更有效。
    按以下步骤 2 循环编号`1-9`：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The start and step parameter of the `range()` function are optional with default
    values of `1`. We can also prematurely end a loop. Loop over the numbers `0-9`
    and break out of the loop when you reach `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`range()`函数的`start`和`step`参数是可选的，默认值为`1`。 我们还可以提早结束循环。 遍历数字`0-9`并在到达`3`时跳出循环：'
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The loop stopped at `3` and we did not print the higher numbers. Instead of
    leaving the loop, we can also get out of the current iteration. Print the numbers
    `0-4`, skipping `3` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环在`3`处停止，我们没有打印更高的数字。 除了退出循环，我们也可以退出当前迭代。 打印数字`0-4`，跳过`3`，如下所示：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The last line in the loop was not executed when we reached `3` because of the
    `continue` statement. In Python, the `for` loop can have an `else` statement attached
    to it. Add an `else` clause as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于出现`continue`语句，当我们到达`3`时未执行循环的最后一行。 在 Python 中，`for`循环可以附加一个`else`语句。 添加`else`子句，如下所示：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Python executes the code in the `else` clause last. Python also has a `while`
    loop. I do not use it that much because the `for` loop is more useful in my opinion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 最后执行`else`子句中的代码。 Python 也有一个`while`循环。 我没有使用它太多，因为我认为`for`循环更有用。
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned how to repeat instructions in Python with loops. This section included
    the `break` and `continue` statements, which exit and continue looping.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何在带循环的 Python 中重复指令。 本节包含`break`和`continue`语句，它们退出并继续循环。
- en: Python functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 函数
- en: Functions are callable blocks of code. We call functions by the name we give
    them.
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是可调用的代码块。 我们用给它们的名称来调用函数。
- en: Time for action – defining functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：定义函数
- en: 'Let''s define the following simple function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义以下简单函数：
- en: 'Print `Hello` and a given name in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下方式打印`Hello`和给定名称：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Call the function as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数如下：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Some functions do not have arguments, or the arguments have default values.
    Give the function a default argument value as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 某些函数没有参数，或者参数具有默认值。 为函数提供默认的参数值，如下所示：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Usually, we want to return a value. Define a function, which doubles input
    values as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，我们要返回一个值。 定义一个将输入值加倍的函数，如下所示：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned how to define functions. Functions can have default argument values
    and return values.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何定义函数。 函数可以具有默认参数值和返回值。
- en: Python modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 模块
- en: A file containing Python code is called a **module**. A module can import other
    modules, functions in other modules, and other parts of modules. The filenames
    of Python modules end with `.py`. The name of the module is the same as the filename
    minus the `.py` suffix.
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 Python 代码的文件被称为**模块**。 一个模块可以导入其他模块，其他模块中的函数以及模块的其他部分。 Python 模块的文件名以`.py`结尾。
    模块的名称与文件名减去`.py`后缀相同。
- en: Time for action – importing modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：导入模块
- en: 'Importing modules can be done in the following manner:'
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块可以通过以下方式完成：
- en: 'If the filename is, for instance, `mymodule.py`, import it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，如果文件名是`mymodule.py`，则按以下方式导入它：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The standard Python distribution has a `math` module. After importing it, list
    the functions and attributes in the module as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准的 Python 发行版具有`math`模块。 导入后，按如下所示在模块中列出函数和属性：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Call the `pow()` function in the `math` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`math`模块中调用`pow()`函数：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Notice the dot in the syntax. We can also import a function directly and call
    it by its short name. Import and call the `pow()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 注意语法中的点。 我们还可以直接导入一个函数，并以其短名称调用它。 导入并调用`pow()`函数，如下所示：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Python lets us define aliases for imported modules and functions. This is a
    good time to introduce the import conventions we are going to use for NumPy and
    a plotting library we will use a lot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 使我们可以为导入的模块和函数定义别名。 现在是介绍我们将用于 NumPy 的导入约定以及将大量使用的绘图库的好时机：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We learned about modules, importing modules, importing functions, calling functions
    in modules, and the import conventions of this book. This concludes the Python
    refresher.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了有关模块，导入模块，导入函数，模块中的调用函数以及本书的导入约定的知识。 Python 复习到此结束。
- en: NumPy on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 上的  NumPy
- en: Installing NumPy on Windows is straightforward. You only need to download an
    installer, and a wizard will guide you through the installation steps.
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 NumPy 非常简单。 您只需要下载安装程序，向导就会指导您完成安装步骤。
- en: Time for action – installing NumPy, matplotlib, SciPy, and IPython on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：在 Windows 上安装 NumPy，Matplotlib，SciPy 和 IPython
- en: 'Installing NumPy on Windows is necessary but this is, fortunately, a straightforward
    task that we will cover in detail. It is recommended that you install matplotlib,
    SciPy, and IPython. However, this is not required to enjoy this book. The actions
    we will take are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 NumPy 是必要的，但是幸运的是，这是我们将详细介绍的简单任务。 建议您安装 Matplotlib，SciPy 和 IPython。
    但是，对于这本书来说不需要使用它们。 我们将采取的动作如下：
- en: Download a NumPy installer for Windows from the **SourceForge** website [http://sourceforge.net/projects/numpy/files/](http://sourceforge.net/projects/numpy/files/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 SourceForge 网站[`sourceforge.net/projects/numpy/files`](http://sourceforge.net/projects/numpy/files/) 下载适用于 Windows
    的 NumPy 安装程序。
- en: '![Time
    for action – installing NumPy, matplotlib, SciPy, and IPython on Windows](img/4154_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：在 Windows 上安装 NumPy，Matplotlib，SciPy 和 IPython](img/4154_01_01.jpg)'
- en: Choose the appropriate NumPy version according to your Python version. In the
    preceding screen shot, we chose `numpy-1.9.2-win32-superpack-python2.7.exe`.
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的 Python 版本选择适当的 NumPy 版本。 在上一个屏幕截图中，我们选择了`numpy-1.9.2-win32-superpack-python2.7.exe`。
- en: Open the EXE installer by double-clicking on it as shown in the following screen
    shot:![Time for action – installing NumPy, matplotlib, SciPy, and IPython on Windows](img/4154_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击打开 EXE 安装程序，如以下屏幕快照所示：![实战时间：在 Windows 上安装 NumPy，Matplotlib，SciPy 和 IPython](img/4154_01_02.jpg)
- en: Now, we can see a description of NumPy and its features. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以看到对 NumPy 及其功能的描述。 单击**下一步**。
- en: If you have Python installed, it should automatically be detected. If it is
    not detected, your path settings might be wrong. At the end of this chapter, we
    have listed resources in case you have problems with installing NumPy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您安装了 Python ，则应自动检测到它。 如果未检测到，则您的路径设置可能不正确。 在本章的结尾，我们列出了资源，以防您安装 NumPy 时遇到问题。
- en: In this example, Python 2.7 was found. Click on **Next** if Python is found;
    otherwise, click on **Cancel** and install Python (NumPy cannot be installed without
    Python). Click on **Next**. This is the point of no return. Well, kind of, but
    it is best to make sure that you are installing to the proper directory and so
    on and so forth. Now the real installation starts. This may take a while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此示例中，找到了 Python 2.7。 如果找到 Python，请单击“下一步”。 否则，请单击“取消”并安装 Python（如果没有 Python，则无法安装
    NumPy）。 点击**下一步**。 这是无可挽回的地方。 很好，但是最好确保要安装到正确的目录，依此类推。 现在开始真正的安装。 可能还要等一下。
- en: Install SciPy and matplotlib with the **Enthought Canopy** distribution ([https://www.enthought.com/products/canopy/](https://www.enthought.com/products/canopy/)).
    It might be necessary to put the `msvcp71.dll` file in your `C:\Windows\system32`
    directory. You can get it from [http://www.dll-files.com/dllindex/dll-files.shtml?msvcp71](http://www.dll-files.com/dllindex/dll-files.shtml?msvcp71)
    A Windows IPython installer is available on the IPython website (see [http://ipython.org/](http://ipython.org/)).
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Enthought Canopy** 发行版（[`www.enthought.com/products/canopy`](https://www.enthought.com/products/canopy/)）安装
    SciPy 和  matplotlib。 可能需要将`msvcp71.dll`文件放在您的`C:\Windows\system32`目录中， 您可以从[`www.dll-files.com/dllindex/dll-files.shtml?msvcp71`](http://www.dll-files.com/dllindex/dll-files.shtml?msvcp71)获得。在
    IPython 网站（见[`ipython.org`](http://ipython.org/)）上提供 Windows IPython 安装程序。
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We installed NumPy, SciPy, matplotlib, and IPython on Windows.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Windows 上安装了 NumPy，SciPy，Matplotlib 和 IPython。
- en: NumPy on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 上的 NumPy
- en: Installing NumPy and its related recommended software on Linux depends on the
    distribution you have. We will discuss how you will install NumPy from the command
    line, although you can probably use graphical installers; it depends on your **distribution**
    (**distro**). The commands to install matplotlib, SciPy, and IPython are the same—only
    the package names are different. Installing matplotlib, SciPy, and IPython is
    recommended, but optional.
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 NumPy 及其相关的推荐软件取决于您所拥有的发行版。 我们将讨论如何从命令行安装 NumPy，尽管您可能可以使用图形安装程序。
    取决于您的**发行版**。 安装 Matplotlib，SciPy 和 IPython 的命令是相同的-仅包名称不同。 建议安装 Matplotlib，SciPy
    和 IPython，但这是可选的。
- en: Time for action – installing NumPy, matplotlib, SciPy, and IPython on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：在 Linux 上安装 NumPy，Matplotlib，SciPy 和 IPython
- en: 'Most Linux distributions have NumPy packages. We will go through the necessary
    commands for some of the most popular Linux distros:'
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版具有  NumPy 包。 对于某些最流行的 Linux 发行版，我们将介绍必要命令  ：
- en: '**Installing** **NumPy** **on** **Red** **Hat**: Run the following instructions
    from the command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 RedHat 上安装 NumPy**：按照命令行中的说明运行：'
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Installing** **NumPy** **on** **Mandriva**: To install NumPy on Mandriva,
    run the following command line instruction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Mandriva 上安装 NumPy**：要在 Mandriva 上安装 NumPy，请运行以下命令行指令：'
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Installing** **NumPy** **on** **Gentoo**: To install NumPy on Gentoo, run
    the following command line instruction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Gentoo 上安装 NumPy**：要在 Gentoo 上安装  NumPy，请运行以下命令行指令：'
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Installing** **NumPy** **on** **Debian** **and** **Ubuntu**: On Debian or
    Ubuntu, type the following on the command line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Debian 和 Ubuntu 上安装 NumPy**：在 Debian 或 Ubuntu 上，在命令行上输入以下内容：'
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following table gives an overview of the Linux distributions and the corresponding
    package names for NumPy, SciPy, matplotlib, and IPython:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下表概述了 Linux 发行版以及 NumPy，SciPy，Matplotlib 和 IPython 的相应包名称：
- en: '| Linux distribution | NumPy | SciPy | matplotlib | IPython |'
  prefs: []
  type: TYPE_TB
  zh: '| Linux 发行版 | NumPy | SciPy | matplotlib | IPython |'
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Arch Linux | `python-numpy` | `python-scipy` | `python-matplotlib` | `ipython`
    |'
  prefs: []
  type: TYPE_TB
  zh: '| Arch Linux | `python-numpy` | `python-scipy` | `python-matplotlib` | `ipython`
    |'
- en: '| Debian | `python-numpy` | `python-scipy` | `python-matplotlib` | `ipython`
    |'
  prefs: []
  type: TYPE_TB
  zh: '| Debian | `python-numpy` | `python-scipy` | `python-matplotlib` | `ipython`
    |'
- en: '| Fedora | `numpy` | `python-scipy` | `python-matplotlib` | `ipython` |'
  prefs: []
  type: TYPE_TB
  zh: '| Fedora | `numpy` | `python-scipy` | `python-matplotlib` | `ipython` |'
- en: '| Gentoo | `dev-python/numpy` | `scipy` | `matplotlib` | `ipython` |'
  prefs: []
  type: TYPE_TB
  zh: '| Gentoo | `dev-python/numpy` | `scipy` | `matplotlib` | `ipython` |'
- en: '| OpenSUSE | `python-numpy, python-numpy-devel` | `python-scipy` | `python-matplotlib`
    | `ipython` |'
  prefs: []
  type: TYPE_TB
  zh: '| OpenSUSE | `python-numpy, python-numpy-devel` | `python-scipy` | `python-matplotlib`
    | `ipython` |'
- en: '| Slackware | `numpy` | `scipy` | `matplotlib` | `ipython` |'
  prefs: []
  type: TYPE_TB
  zh: '| Slackware | `numpy` | `scipy` | `matplotlib` | `ipython` |'
- en: NumPy on Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MacOSX 上的 NumPy
- en: You can install NumPy, matplotlib, and SciPy on the Mac OS X with a GUI installer
    (not possible for all versions) or from the command line with a port manager such
    as **MacPorts**, **Homebrew**, or **Fink**, depending on your preference. You
    can also install using a script from [https://github.com/fonnesbeck/ScipySuperpack](https://github.com/fonnesbeck/ScipySuperpack).
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以使用 GUI 安装程序（并非所有版本都可以）在 MacOSX 上安装 NumPy，Matplotlib 和 SciPy，也可以使用端口管理器（例如
    **MacPorts**）通过命令行安装，**HomeBrew** 或 **Fink**，具体取决于您的偏好。 您还可以使用来自[`github.com/fonnesbeck/ScipySuperpack`](https://github.com/fonnesbeck/ScipySuperpack)的脚本来安装。'
- en: Time for action – installing NumPy, SciPy, matplotlib, and IPython with MacPorts
    or Fink'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用 MacPorts 或 Fink 安装 NumPy，SciPy，Matplotlib 和 IPython
- en: 'Alternatively, we can install NumPy, SciPy, matplotlib, and IPython through
    the MacPorts route or with Fink. The following installation steps show how to
    install all these packages:'
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以通过 MacPorts 路由或通过 Fink 安装  NumPy，SciPy，Matplotlib 和 IPython。 以下安装步骤显示了如何安装所有这些包：
- en: '**Installing** **with** **MacPorts**: Type the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 MacPorts 安装**：输入以下命令：'
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Installing** **with** **Fink**: Fink also has packages for NumPy—`scipy-core-py24`,
    `scipy-core-py25`, and `scipy-core-py26`. The SciPy packages are `scipy-py24`,
    `scipy-py25` and `scipy-py26`. We can install NumPy and the additional recommended
    packages, referring to this book on Python 2.7, using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Fink 安装**：Fink 也提供用于 NumPy 的包-`scipy-core-py24` ，`scipy-core-py25`和`scipy-core-py26`。
    SciPy 包为`scipy-py24`，`scipy-py25`和`scipy-py26`。 我们可以使用以下命令，将 NumPy 和其他推荐的包安装到
    Python 2.7 上：'
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We installed NumPy and the additional recommended software on Mac OS X with
    MacPorts and Fink.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在带有 MacPorts 和 Fink 的 MacOSX 上安装了 NumPy 和其他推荐的软件。
- en: Building from source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: 'We can retrieve the source code for NumPy with `git` as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`git`检索  NumPy 的源代码，如下所示：
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Alternatively, download the source from [http://sourceforge.net/projects/numpy/files/](http://sourceforge.net/projects/numpy/files/).
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，从[`sourceforge.net/projects/numpy/files`](http://sourceforge.net/projects/numpy/files/)下载源。
- en: 'Install in `/usr/local` with the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在`/usr/local`中安装：
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: To build, we need a C compiler such as GCC and the Python header files in the
    `python-dev` or `python-devel` packages.
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建，我们需要一个 C 编译器，例如 GCC 和`python-dev`或`python-devel`包中的 Python 头文件。
- en: Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组
- en: After going through the installation of NumPy, it's time to have a look at NumPy
    arrays. NumPy arrays are more efficient than Python lists when it comes to numerical
    operations. NumPy code requires less explicit loops than the equivalent Python
    code.
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成 NumPy 的安装之后，是时候看看 NumPy 数组了。 在进行数值运算时，NumPy 数组比 Python 列表更有效  。 与等效的 Python
    代码相比，NumPy 代码需要更少的显式循环。
- en: Time for action – adding vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：相加向量
- en: Imagine that we want to add two vectors called `a` and `b` (see [https://www.khanacademy.org/science/physics/one-dimensional-motion/displacement-velocity-time/v/introduction-to-vectors-and-scalars](https://www.khanacademy.org/science/physics/one-dimensional-motion/displacement-velocity-time/v/introduction-to-vectors-and-scalars)).
    **Vector** is used here in the mathematical sense meaning a one-dimensional array.
    We will learn in [Chapter 5](ch05.html "Chapter 5. Working with Matrices and ufuncs"),
    *Working with Matrices and ufuncs*, about specialized NumPy arrays, which represent
    matrices. Vector `a` holds the squares of integers `0` to *n*, for instance, if
    `n` is equal to `3`, then a is equal to `(0,1, 4)`. Vector `b` holds the cubes
    of integers `0` to *n*, so if `n` is equal to `3`, then `b` is equal to `(0,1,
    8)`. How will you do that using plain Python? After we come up with a solution,
    we will compare it to the NumPy equivalent.
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要添加两个分别称为`a`和`b`的向量（见[`www.khanacademy.org/science/physics/one-dimensional-motion/displacement-velocity-time/v/introduction-to-vectors-and-scalars`](https://www.khanacademy.org/science/physics/one-dimensional-motion/displacement-velocity-time/v/introduction-to-vectors-and-scalars)）。**向量**在数学上是指一维数组。
    我们将在第五章学习有关矩阵和`ufunc`的内容，它们涉及代表矩阵的专用 NumPy 数组。 向量`a`保留整数`0`至`n`的平方，例如，如果`n`等于`3`，则
    a 等于`(0,1, 4)`。 向量`b`包含整数`0`至`n`的立方，因此，如果`n`等于`3`，则`b`等于`(0,1, 8)`。 您将如何使用普通 Python
    做到这一点？ 在提出解决方案后，我们将其与 NumPy 等效项进行比较。
- en: '**Adding** **vectors** **using** **pure** **Python**: The following function
    solves the vector addition problem using pure Python without NumPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用纯 Python 相加向量**：以下函数使用不带 NumPy 的纯 Python 解决了向量相加问题：'
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ''
- en: '**Downloading the example code files**'
  prefs: []
  type: TYPE_NORMAL
  zh: ''
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
  zh: ''
- en: '**Adding** **vectors** **using** **NumPy**: Following is a function that achieves
    the same result with NumPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 NumPy 相加向量**：以下是与 NumPy 达到相同结果的函数：'
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Notice that `numpysum()` does not need a `for` loop. Also, we used the `arange()`
    function from NumPy that creates a NumPy array for us with integers `0` to *n*.
    The `arange()` function was imported; that is why it is prefixed with `numpy`
    (actually, it is customary to abbreviate it via an alias to `np`).
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`numpysum()`不需要`for`循环。 此外，我们使用了 NumPy 的`arange()`函数，该函数为我们创建了一个整数`0`至`n`的
    NumPy 数组。 `arange()`函数已导入； 这就是为什么它以`numpy`为前缀的原因（实际上，习惯上是通过`np`的别名来缩写它）。
- en: 'Now comes the fun part. The preface mentions that NumPy is faster when it comes
    to array operations. How much faster is NumPy, though? The following program will
    show us by measuring the elapsed time, in microseconds, for the `numpysum()` and
    `pythonsum()` functions. It also prints the last two elements of the vector sum.
    Let''s check that we get the same answers by using Python and NumPy:'
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的来了。 序言提到，在数组操作方面，NumPy 更快。 NumPy 快多少？ 以下程序将通过为`numpysum()`和`pythonsum()`函数测量经过的时间（以微秒为单位）向我们展示。
    它还打印向量和的最后两个元素。 让我们检查是否通过使用 Python 和 NumPy 得到了相同的答案：
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The output of the program for `1000`, `2000`, and `3000` vector elements is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`1000`，`2000`和`3000`向量元素的程序的输出如下：'
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Clearly, NumPy is much faster than the equivalent normal Python code. One thing
    is certain, we get the same results whether we use NumPy or not. However, the
    result printed differs in representation. Notice that the result from the `numpysum()`
    function does not have any commas. How come? Obviously, we are not dealing with
    a Python list but with a NumPy array. It was mentioned in the *Preface* that NumPy
    arrays are specialized data structures for numerical data. We will learn more
    about NumPy arrays in the next chapter.
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，NumPy 比等效的普通 Python 代码快得多。 可以肯定的是，无论是否使用 NumPy，我们都会得到相同的结果。 但是，打印结果在表示形式上有所不同。
    请注意，`numpysum()`函数的结果没有任何逗号。 怎么会？ 显然，我们不是在处理 Python 列表，而是在处理 NumPy 数组。 在“前言”中提到，NumPy
    数组是用于数值数据的专用数据结构。 在下一章中，我们将了解有关 NumPy 数组的更多信息。
- en: Pop quiz – Functioning of the arange() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小测验：`arange()`函数的功能
- en: Q1\. What does `arange(5)` do?
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. `arange(5)`做什么？
- en: Creates a Python list of 5 elements with the values 1-5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个由 5 个元素组成的 Python 列表，其值是 1-5。
- en: Creates a Python list of 5 elements with the values 0-4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Python 列表，其中包含 5 个元素的值 0-4。
- en: Creates a NumPy array with the values 1-5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个值为 1-5 的 NumPy 数组。
- en: Creates a NumPy array with the values 0-4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个值为 0-4 的 NumPy 数组。
- en: None of the above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是。
- en: Have a go hero – continue the analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勇往直前：继续分析
- en: The program we used to compare the speed of NumPy and regular Python is not
    very scientific. We should at least repeat each measurement a couple of times.
    It will be nice to be able to calculate some statistics such as average times.
    Also, you might want to show plots of the measurements to friends and colleagues.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来比较 NumPy 和常规 Python 速度的程序不是很科学。 我们至少应该重复两次测量。 能够计算一些统计量（例如平均时间）将非常不错。 另外，您可能想向朋友和同事显示测量图。
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: Hints to help can be found in the online documentation and the resources listed
    at the end of this chapter. NumPy has statistical functions that can calculate
    averages for you. I recommend using matplotlib to produce plots. [Chapter 9](ch09.html
    "Chapter 9. Plotting with matplotlib"), *Plotting with matplotlib,* gives a quick
    overview of matplotlib.
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在联机文档和本章末尾列出的资源中找到帮助提示。 NumPy 具有统计函数，可以为您计算平均值。 我建议使用 Matplotlib 生成图。 第 9
    章“Matplotlib 绘图”，简要介绍了 Matplotlib。
- en: IPython – an interactive shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPython – 交互式 Shell
- en: Scientists and engineers are used to experiment. Scientists created **IPython**
    with experimentation in mind. Many view the interactive environment that IPython
    provides as a direct answer to **MATLAB**, **Mathematica**, and **Maple**. You
    can find more information, including installation instructions, at [http://ipython.org/](http://ipython.org/).
  prefs: []
  type: TYPE_NORMAL
  zh: '科学家和工程师习惯于进行实验。 科学家出于实验目的创建了 **IPython**。 许多人认为 IPython 提供的交互式环境是 **MATLAB**，
    **Mathematica** 和 **Maple**。 您可以浏览[`ipython.org`](http://ipython.org/)来获取更多信息，包括安装的说明。'
- en: 'IPython is free, open source, and available for Linux, UNIX, Mac OS X, and
    Windows. The IPython authors only request that you cite IPython in any scientific
    work that uses IPython. The following is a list of the basic IPython features:'
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 是免费开源的，可用于 Linux，UNIX，MacOSX 和 Windows。 IPython 作者仅要求您在使用 IPython 的任何科学著作中引用
    IPython。 以下是 IPython 的基本功能列表：
- en: Tab completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制表符补全
- en: History mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史机制
- en: Inline editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联编辑
- en: Ability to call external Python scripts with %run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够使用`%run`调用外部 Python 脚本
- en: Access to system commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问系统命令
- en: Pylab switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pylab`开关'
- en: Access to Python debugger and profiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Python 调试器和分析器
- en: The Pylab switch imports all the SciPy, NumPy, and matplotlib packages. Without
    this switch, we will have to import every package we need ourselves.
  prefs: []
  type: TYPE_NORMAL
  zh: '`pylab`开关导入所有 SciPy，NumPy 和 Matplotlib 包。 没有此开关，我们将必须导入我们需要的每个包。'
- en: 'All we need to do is enter the following instruction on the command line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是在命令行中输入以下指令：
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `quit()`command or *Ctrl* **+** *D* quits the IPython shell. We may want
    to be able to go back to our experiments. In IPython, it is easy to save a session
    for later:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`quit()`命令或`Ctrl + D`退出 IPython Shell。 我们可能希望能够返回到我们的实验。 在 IPython 中，很容易保存会话供以后使用：'
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Let''s say we have the vector addition program that we made in the current
    directory. Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有在当前目录中制作的向量加法程序。 运行脚本，如下所示：
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As you probably remember, `1000` specifies the number of elements in a vector.
    The `-d` switch of `%run` starts an `ipdb` debugger with `c` the script is started.
    `n` steps through the code. Typing `quit` at the `ipdb` prompt exits the debugger:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，`1000`指定向量中的元素数。 `%run`的`-d`开关使用`c`启动脚本的`ipdb`调试器。 `n`逐步执行代码。 在`ipdb`提示符下键入`quit`退出调试器：
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: Enter *c* at the `ipdb>` prompt to start your script.
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ipdb>`提示符下输入`c`启动脚本。
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We can also profile our script by passing the `-p` option to `%run:`
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将`-p`选项传递给`%run:`来分析脚本
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'This gives us a bit more insight in to the workings of our program. In addition,
    we can now identify performance bottlenecks. The `%hist` command shows the commands
    history:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们对程序的运作有了更多的了解。 此外，我们现在可以确定性能瓶颈。 `%hist`命令显示命令历史记录：
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: I hope you agree that IPython is a really useful tool!
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您同意 IPython 是一个非常有用的工具！
- en: Online resources and help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线资源和帮助
- en: 'When we are in IPython''s `pylab` mode, we can open manual pages for NumPy
    functions with the `help` command. It is not necessary to know the name of a function.
    We can type a few characters and then let tab completion do its work. Let''s,
    for instance, browse the available information for the `arange()` function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处于 IPython 的`pylab`模式时，可以使用`help`命令打开 NumPy 函数的手册页。 不必知道函数名称。 我们可以输入几个字符，然后让制表符完成工作。
    例如，让我们浏览`arange()`函数的可用信息：
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![Online resources and help](img/4154_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![在线资源和帮助](img/4154_01_03.jpg)'
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Another option is to put a question mark behind the function name:'
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是在函数名称后添加问号：
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The main documentation website for NumPy and SciPy is at [http://docs.scipy.org/doc/](http://docs.scipy.org/doc/).
    Through this web page, we can browse the NumPy reference at [http://docs.scipy.org/doc/numpy/reference/](http://docs.scipy.org/doc/numpy/reference/),
    the user guide, and several tutorials.
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 NumPy 和 SciPy 的主要文档网站在[`docs.scipy.org/doc`](http://docs.scipy.org/doc/)上。 通过此网页，我们可以在 NumPy
    参考中浏览用户指南和一些教程，位于[`docs.scipy.org/doc/numpy/reference`](http://docs.scipy.org/doc/numpy/reference/)。
- en: The popular Stack Overflow software development forum has hundreds of questions
    tagged `numpy`. To view them, go to [http://stackoverflow.com/questions/tagged/numpy](http://stackoverflow.com/questions/tagged/numpy).
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的 Stack Overflow 软件开发论坛有数百个标记为`numpy`的问题。 要查看它们，请转到[`stackoverflow.com/questions/tagged/numpy`](http://stackoverflow.com/questions/tagged/numpy)。
- en: If you are really stuck with a problem or you want to be kept informed of NumPy
    development, you can subscribe to the NumPy discussion mailing list. The e-mail
    address is `<[numpy-discussion@scipy.org](mailto:numpy-discussion@scipy.org)>`.
    The number of e-mails per day is not too high with almost no spam to speak of.
    Most importantly, the developers actively involved with NumPy also answer questions
    asked on the discussion group. The complete list can be found at [http://www.scipy.org/scipylib/mailing-lists.html](http://www.scipy.org/scipylib/mailing-lists.html).
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实感到困惑，或者想随时了解 NumPy 开发的信息，则可以订阅 NumPy 讨论邮件列表。 电子邮件地址为`<numpy-discussion@scipy.org>`。
    每天的电子邮件数量不是很高，几乎没有垃圾邮件可言。 最重要的是，积极参与 NumPy 的开发人员还回答了讨论组提出的问题。 完整列表可以在[`www.scipy.org/scipylib/mailing-lists.html`](http://www.scipy.org/scipylib/mailing-lists.html)中找到。
- en: For IRC users, there is an IRC channel on [irc://irc.freenode.net](http://irc://irc.freenode.net).
    The channel is called `#scipy`, but you can also ask NumPy questions since SciPy
    users also have knowledge of NumPy, as SciPy is based on NumPy. There are at least
    50 members on the SciPy channel at all times.
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IRC 用户，在[`irc://irc.freenode.net`](http://irc://irc.freenode.net) 上有一个  IRC
    频道。 该通道称为`#scipy`，但是您也可以询问 NumPy，因为 SciPy 用户也了解 NumPy，因为 SciPy 基于 NumPy。 任何时候，SciPy
    频道上至少有 50 名成员。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed NumPy and other recommended software that we will
    be using in some sections of this book. We got a vector addition program working
    and convinced ourselves that NumPy has superior performance. You were introduced
    to the IPython interactive shell. In addition, you explored the available NumPy
    documentation and online resources.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了 NumPy 和其他推荐的软件，这些软件将在本书的某些部分中使用。 我们启动了向量加法程序，并确信 NumPy 具有出色的性能。 向您介绍了
    IPython 交互式 Shell。 此外，您还浏览了可用的 NumPy 文档和在线资源。
- en: In the next chapter, you will take a look under the hood and explore some fundamental
    concepts including arrays and data types.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将深入了解并探索一些基本概念，包括数组和数据类型。
