["```java\npublic static void exit(int status) {\n  Runtime.getRuntime().exit(status);\n}\n```", "```java\npublic class AThread extends Thread {\n  int i1, i2;\n  public AThread(int i1, int i2) {\n    this.i1 = i1;\n    this.i2 = i2;\n  }\n  public void run() {\n    for (int i = i1; i <= i2; i++) {\n      System.out.println(\"child thread \" + (isDaemon() ? \"daemon\" : \"user\") + \" \" + i);\n      try {\n        TimeUnit.SECONDS.sleep(1);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\npublic void run() {\n  if (target != null) {\n    target.run();\n  }\n}\n```", "```java\npublic Thread(Runnable target) {\n  init(null, target, \"Thread-\" + nextThreadNum(), 0);\n}\n```", "```java\nThread thr1 = new AThread(1, 4);\nthr1.start();\n\nThread thr2 = new AThread(11, 14);\nthr2.setDaemon(true);\nthr2.start();\n\ntry {\n  TimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\n  e.printStackTrace();\n}\nSystem.out.println(\"Main thread exists\");\n\n```", "```java\nThread thr1 = new AThread(1, 2);\nthr1.start();\n\n```", "```java\npublic class ARunnable implements Runnable {\n  int i1, i2;\n\n  public ARunnable(int i1, int i2) {\n    this.i1 = i1;\n    this.i2 = i2;\n  }\n\n  public void run() {\n    for (int i = i1; i <= i2; i++) {\n      System.out.println(\"child thread \"  + i);\n      try {\n        TimeUnit.SECONDS.sleep(1);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\nThread thr1 = new Thread(new ARunnable(1, 4));\nthr1.start();\n\nThread thr2 = new Thread(new ARunnable(11, 14));\nthr2.setDaemon(true);\nthr2.start();\n\ntry {\n  TimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\n  e.printStackTrace();\n}\n\nSystem.out.println(\"Main thread exists\");\n```", "```java\npublic class BRunnable extends SomeClass implements Runnable {\n  int i; \n  BRunnable(int i, String s) {\n    super(s);\n    this.i = i;\n  }\n  public int calculateSomething(double x) {\n    //calculate result\n    return result;\n  }\n  public void run() {\n    //any code you need goes here\n  }\n}\n```", "```java\nBRunnable obj = new BRunnable(2, \"whatever\");\nint i = obj.calculateSomething(42d);\nobj.run(); \nThread thr = new Thread (obj);\nthr.start(); \n```", "```java\njava -Xlog:gc -Dmyprop1=whatever com.packt.javapath.ch04demo.MyApplication 2\n```", "```java\nString myprop = System.getenv(\"myprop1\");     //returns: \"whatever\"\n```", "```java\npublic static void main(String[] args) {\n  String p1 = args[0];          //returns: \"2\"\n}\n```", "```java\npackage com.packt.javapath.ch04demo;\nimport com.packt.javapath.ch04demo.math.SimpleMath;\npublic class MyApplication {\n  public static void main(String[] args) {\n    int i = Integer.parseInt(args[0]);\n    SimpleMath simpleMath = new SimpleMath();\n    int result = simpleMath.multiplyByTwo(i);\n    System.out.println(i + \" * 2 = \" + result);\n  }\n}\n```", "```java\njava -cp target/classes com.packt.javapath.ch04demo.MyApplication 2\n```", "```java\ncd target/classes\njar -cf myapp.jar com/packt/javapath/ch04demo/**\n```", "```java\njava -cp myapp.jar com.packt.javapath.ch04demo.MyApplication 2\n```", "```java\njava -jar  myapp.jar  2\n```", "```java\npublic class GarbageCollectionDemo {\n  public static void main(String... args) {\n    int max = 99888999;\n    List<Integer> list = new ArrayList<>();\n    for(int i = 1; i < max; i++){\n      list.add(Integer.valueOf(i));\n    }\n  }\n}\n```"]