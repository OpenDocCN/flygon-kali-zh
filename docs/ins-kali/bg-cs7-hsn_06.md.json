["```cs\n<asp:Button ID=\"Button1\" runat=\"server\" Text=\"Show Results\" /><br />\n```", "```cs\npublic delegate bool Compare(double x, double y);\n```", "```cs\npublic delegate double Multiply(double x, double y);\n```", "```cs\ndouble x = 10, y = 25;\n```", "```cs\nCompare comp = (a, b) => (a == b);\n```", "```cs\nsampLabel.Text = $\"{x} and {y} are equal is {comp(x, y).ToString().ToLower()}\";\n```", "```cs\nMultiply mult = (a, b) => (a * b);\n```", "```cs\nsampLabel.Text += $\"<br>{x}*{y} is {mult(x, y).toString()}\";\n```", "```cs\ndouble[] dubsArray = new double[] { 1, 2, 3, 4, 5 };\n```", "```cs\nAction<double> showDouble = (a) => sampLabel.Text += \"<br>\" + (a * a);\n```", "```cs\nforeach(var d in dubsArray)\n```", "```cs\nshowDouble(d);\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic delegate bool Compare(double x, double y);\npublic delegate double Multiply(double x, double y);\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        double x = 10, y = 25; //declare two variables\n        //the two variables are accessible inside the lambda expressions\n        Compare comp = (a, b) => (a == b);//define comparison lambda\n        //invoke the lambda in the line below\n        sampLabel.Text =\n         $\"{x} and {y} are equal is {comp(x, y).ToString().ToLower()}\";\n        //line define a lambda for multiplication\n        Multiply mult = (a, b) => (a * b);\n        //invoke the multiplication lambda\n        sampLabel.Text += $\"<br>{x}*{y} is {mult(x, y)}\";\n        //make array of doubles\n        double[] dubsArray = new double[] { 1, 2, 3, 4, 5 };\n        //actions encapsulate functions that do not return a value\n        //but actions can accept arguments to operate on\n        Action<double> showDouble = \n        (a) => sampLabel.Text += \"&lt;br>\" + (a * a);\n        //it's now possible to perform the action on each d repeatedly\n        foreach (var d in dubsArray)\n        {\n            showDouble(d);\n        }\n    }\n}\n```"]