- en: Using Configurations and Options
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置和选项
- en: This chapter will include practical usage of configurations and options, and
    how these interrelate and play their part in any given build. It will also elaborate
    on output management—that is to say, the output of the bundling process and asset
    management in terms of the assets made part of the dependency graph. This will
    cover subtopics such as file placement and file structure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将包括配置和选项的实际用法，以及它们在任何给定构建中的相互关系和作用。它还将详细说明输出管理，也就是捆绑过程的输出和资产管理，以及作为依赖图的一部分的资产。这将涵盖文件放置和文件结构等子主题。
- en: Modules are used to combat the nature of JavaScript to have global functions.
    Webpack works alongside these modules and isolates the implied global nature of
    variables and functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模块用于解决JavaScript具有全局函数的特性。Webpack与这些模块一起工作，并隔离了变量和函数的暗示全局性质。
- en: Configurations and options are necessary to get the best out of Webpack. Each
    project is bespoke, therefore each project will require specific tailoring of
    its parameters. This chapter will explore in detail the exact nature of both topics,
    the limitations of each, and when to utilize them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 配置和选项是必要的，以便充分利用Webpack。每个项目都是定制的，因此每个项目都需要对其参数进行特定的定制。本章将详细探讨这两个主题的确切性质，每个主题的限制以及何时使用它们。
- en: 'The following topics are discussed in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论以下主题：
- en: Understanding configurations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解配置
- en: Understanding asset management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解资产管理
- en: Understanding output management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解输出管理
- en: Exploring Webpack 5 options
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Webpack 5的选项
- en: Understanding configurations
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解配置
- en: The configuration is done in Webpack through the use of a configuration file,
    usually `webpack.config.js`, except in special circumstances where there can be
    more than one—or another—file assigned to this task. In the case of `webpack.config.js`,
    it is a JavaScript file that should be amended to alter the configuration settings
    of any particular project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用配置文件，在Webpack中进行配置通常是`webpack.config.js`，除非在特殊情况下可以有一个以上的文件分配给这个任务。在`webpack.config.js`的情况下，它是一个JavaScript文件，应该被修改以改变任何特定项目的配置设置。
- en: On startup, Webpack and Webpack 5 do not require a configuration file, but the
    software does recognize `src/index` as the default project input. It will also output
    the results of the build to a location named `dist/main.js`. This output will
    be "minified" and optimized for production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，Webpack和Webpack 5不需要配置文件，但软件会将`src/index`识别为默认项目输入。它还将结果输出到名为`dist/main.js`的位置。这个输出将被"缩小"并优化为生产环境。
- en: '*Minified,* or *minification,* simply refers to one of Webpack''s main functions:
    to reduce the amount of code used to a minimal amount. This is done by eliminating
    duplicate, erroneous, or surplus code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*缩小*，或*最小化*，简单地指的是Webpack的主要功能之一：将使用的代码量减少到最小。这是通过消除重复、错误或多余的代码来实现的。'
- en: Typically, however, a Webpack project will need to have its default configuration
    changed. The default configuration is how Webpack works without any loaders or
    special parameters assigned to it, such as described in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction
    to Webpack 5*, in the *How Webpack works* subsection. This is done through the
    use of the configuration file. The developer should create a file named `webpack.config.js`
    and place this in the root folder of the project. This file will be automatically
    detected and read by Webpack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个Webpack项目通常需要改变其默认配置。默认配置是Webpack在没有任何加载器或特殊参数的情况下运行的方式，比如在[第1章](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml)中描述的*Webpack
    5简介*的*Webpack工作原理*子部分。这是通过使用配置文件来完成的。开发人员应该创建一个名为`webpack.config.js`的文件，并将其放在项目的根文件夹中。这个文件将被Webpack自动检测和读取。
- en: Let's begin our discussion by exploring the use of multiple configuration files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过探索使用多个配置文件来开始我们的讨论。
- en: Using different configuration files
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的配置文件
- en: 'Webpack 5 gives the option of using different configuration files, depending
    on the situation. Not only that, but the files being used can be altered using
    a command-line utility. A typical situation in which you might do that is when
    working with multiple bundles inside one project—more on that topic later on in
    the guide. The following code snippet shows how the developer can alter the configuration
    file in use. In this example, a file is directed to a named `package.json` file,
    which is a common file that Webpack uses regularly. This technique is referred
    to as a *config flag*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5提供了使用不同配置文件的选项，具体取决于情况。不仅如此，还可以使用命令行实用程序来更改正在使用的文件。在一个项目中使用多个捆绑包时，可能会遇到这种情况，这个主题将在本指南的后面详细介绍。以下代码片段显示了开发人员如何更改正在使用的配置文件。在这个例子中，一个文件被指向一个名为`package.json`的文件，这是Webpack经常使用的一个常见文件。这种技术被称为*config
    flag*：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note that Webpack 5 also allows for custom configuration, and, as explained
    in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction to Webpack
    5*, this is a salient advantage of using Webpack 5\. This is done via the use
    of custom configuration files. This differs from options, as these variables are
    not set using the **command-line interface** (**CLI**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Webpack 5还允许自定义配置，正如在[第1章](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml)中所解释的*Webpack
    5简介*，这是使用Webpack 5的一个显著优势。这是通过使用自定义配置文件来完成的。这与选项不同，因为这些变量不是使用**命令行界面**（**CLI**）设置的。
- en: Working with options
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用选项
- en: The term *options* in Webpack refers to settings made from the command line
    rather than the configuration, which is done through the altering of configuration
    script.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack中，*选项*指的是通过命令行而不是配置文件进行的设置，这是通过修改配置脚本来完成的。
- en: In the following example, we will begin by altering the configuration file,
    simply to lay the groundwork for our options tutorial.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们将首先修改配置文件，简单地为我们的选项教程奠定基础。
- en: Throughout the following configuration, Node's **path module** is used and prefixed
    with the `_dirname` global variable. Node's path module is simply the utility
    that Node uses for working with file or directory paths. There may be file path
    problems when working between operating systems, and this prevents those problems
    from occurring and also ensures that relative paths work correctly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的配置中，Node的**路径模块**被使用，并且前缀是`_dirname`全局变量。Node的路径模块只是Node用于处理文件或目录路径的实用程序。在操作系统之间工作时可能会出现文件路径问题，这可以防止这些问题发生，并确保相对路径正常工作。
- en: 'The file concerned in the example is called `webpack.config.js`. We will use
    it to set the mode of the project, and we need to do this before we get to the options:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中涉及的文件名为`webpack.config.js`。我们将用它来设置项目的模式，并且我们需要在到达选项之前这样做：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code block, the chosen **mod****e** instructs Webpack to make
    use of its built-in optimizations accordingly. The **entry** path will default
    to `./src`. This is where the execution of the application begins and bundling
    will start.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，所选择的**模式**指示Webpack相应地使用其内置的优化。**entry**路径默认为`./src`。这是应用程序执行开始和捆绑开始的地方。
- en: 'The following code block will show the rest of the same file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块将显示相同文件的其余部分：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This section of the code snippets shows options related to how Webpack emits
    results.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段的这一部分显示了与Webpack发出结果相关的选项。
- en: The target directory for all output files must be an absolute path (use the
    **Node.js** path module).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有输出文件的目标目录必须是绝对路径（使用**Node.js**路径模块）。
- en: '`filename `indicates the filename template for entry chunks, and `publicPath`
    refers to the **Uniform Resource Locator** (**URL**) to the output directory,
    resolved relative to the relevant HTML page. Put simply, this means the file path
    from the HTML page you may be using to the bundled project files. The remainder
    of the code refers to the name of the exported library and the nature of the exported
    library.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`filename`指示入口块的文件名模板，`publicPath`是**统一资源定位符**（**URL**），指的是相对于相关HTML页面解析到输出目录的路径。简而言之，这意味着从您可能使用的HTML页面到捆绑项目文件的文件路径。代码的其余部分涉及导出库的名称和导出库的性质。'
- en: 'The following topic concerns configuration regarding modules. After working
    on output options, this will be the next logical step in project development:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的主题涉及与模块相关的配置。在处理输出选项之后，这将是项目开发中的下一个逻辑步骤：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code block includes rules for modules, such as parser options
    and the configuration of loaders. These are matching conditions, and each accepts
    a string or a regular expression. The term `test` has the same behavior as `include`.
    They both must be matched, but this is not the case for `exclude`. `exclude` takes
    preference over the `test` and `include` options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块包括了对模块的规则，比如解析器选项和加载器的配置。这些都是匹配条件，每个都接受一个字符串或正则表达式。术语`test`的行为与`include`相同。它们都必须匹配，但对于`exclude`来说并非如此。`exclude`优先于`test`和`include`选项。
- en: 'For best practice, `RegExp` should only be used in `test` when filenames match.
    When using arrays of paths, absolute paths should be used in preference to the `include`
    and `exclude` options. The `include` option should be preferred over the `exclude`
    method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最佳实践，`RegExp`应该只在文件名匹配时用于`test`。在使用路径数组时，应优先使用绝对路径而不是`include`和`exclude`选项。`include`选项应优先于`exclude`方法：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code block includes conditions for the issuer, and the origin
    of the imported elements. The code also includes options to flag the application
    of these rules, even if they are overridden. This is an advanced option, however.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块包括了对发行者和导入元素的来源的条件。代码还包括了标记这些规则的应用的选项，即使它们被覆盖了。然而，这是一个高级选项。
- en: The reference to `loader` indicates which loader should be applied. This resolves
    relative to the contextual location. A loader suffix is no longer optional since
    Webpack 2, for the sake of clarity. There is also space for applying multiple
    further options and loaders.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对`loader`的引用指示应用哪个加载器。这是相对于上下文位置解析的。自Webpack 2以来，加载器后缀不再是可选的，为了清晰起见。还有空间应用多个其他选项和加载器。
- en: 'In the same configuration, we will explore rules and conditions that can be
    applied within the same procedure, illustrated in the following code block:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的配置中，我们将探讨可以在同一过程中应用的规则和条件，如下面的代码块所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code block includes nested rules, all of which combine with conditions
    to be useful. By way of explanation, note each of the following commands and what
    they denote:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块包括了嵌套规则，所有这些规则都与条件结合在一起是有用的。解释一下，注意以下每个命令及其表示的含义：
- en: '`and`option matches are only made if all conditions are also matched.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`and`选项只有在所有条件也匹配时才会进行匹配。'
- en: '`or` matches apply when a condition is matched—this is the default for arrays.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`or`匹配在条件匹配时应用——这是数组的默认值。'
- en: '`not` indicates if the condition is not matched.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not`指示条件是否不匹配。'
- en: 'There is also an option for resolving module requests; this does not apply
    to the resolving of loaders. The following example shows the use of this `resolve`
    module request:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个选项用于解析模块请求；这不适用于解析加载器。以下示例显示了使用此`resolve`模块请求：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code block shows the same configuration file we have been following
    up to now in this section. However, let's take a look at some key elements. Where
    it states `path.resolve`, this refers to directories in which to look for modules.
    Directly below this, where it states `], extensions:`, this refers to file extensions
    that are used.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块显示了我们在本节中一直在遵循的相同配置文件。然而，让我们看一下一些关键元素。在`path.resolve`处，这指的是要查找模块的目录。直接下面的`],
    extensions:`指的是使用的文件扩展名。
- en: 'After this part is code that, in descending order, refers to a list of module
    name aliases. Modules'' aliases are imported relative to the current location
    context, as illustrated in the following code block:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部分之后是代码，按降序列出模块名称的别名列表。模块的别名是相对于当前位置上下文导入的，如下面的代码块所示：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `devtool` configuration enhances debugging by adding metadata for the browser. Note
    that the `source-map` option can be more detailed, but this is at the expense
    of build speed, and the `web` option indicates the home directory for Webpack.
    The entry and `module.rules.loader` option is resolved relative to this directory
    and refers to the environment in which the bundle should run. The `serve` configuration
    lets you provide options for `webpack-serve` and lets you precisely control which
    bundle information gets displayed, such as the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`devtool`配置通过为浏览器添加元数据来增强调试。请注意，`source-map`选项可能更详细，但这是以构建速度为代价的，`web`选项指示Webpack的主目录。入口和`module.rules.loader`选项相对于此目录解析，并指的是捆绑包应该运行的环境。`serve`配置允许您为`webpack-serve`提供选项，并精确控制显示哪些捆绑信息，例如以下内容：'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s explain the preceding code block. Where it states `compress: true`,
    this enables **gzip** compression of contents. The `historyApiFallback: true`
    part is true for when encountering any 404 page-loading errors. The `hot: true` text
    refers to having hot module replacement permissible or not; this is subject to `HotModuleReplacementPlugin`
    being installed first. `https` should be set to `true` for self-signed objects
    or certificate-authorized objects. If the `noInfo` key is set to `true`, you will
    only get errors and warnings on hot reloads.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们解释前面的代码块。当它声明`compress: true`时，这启用了内容的**gzip**压缩。`historyApiFallback: true`部分是当遇到任何404页面加载错误时为真。`hot:
    true`文本指的是是否允许热模块替换；这取决于是否首先安装了`HotModuleReplacementPlugin`。`https`应设置为`true`以用于自签名对象或证书授权对象。如果`noInfo`键设置为`true`，则只会在热重新加载时获得错误和警告。'
- en: 'The configuration is done, and we can now run a build. To do this, use the
    following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完成，现在可以运行构建。要做到这一点，使用以下命令：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the preceding code is run in the command-line environment, the user might
    be prompted to install `@webpack-cli/init`, if it is not yet installed in the
    project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在命令行环境中运行了前面的代码，用户可能会被提示安装`@webpack-cli/init`，如果它尚未安装在项目中。
- en: 'After running `npx webpack-cli init`, more packages may be installed in the
    project, depending on the choices made during the configuration generation. The
    following code block shows the printout from running NPX Webpack''s CLI initialization:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npx webpack-cli init`后，根据配置生成期间所做的选择，可能会在项目中安装更多的包。以下代码块显示了运行NPX Webpack的CLI初始化时的输出：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If your output in the CLI looks like the preceding code block, then your configuration
    has been successful. It's essentially an automated readout from the command line
    and should signify that all the options set in the previous code block have been
    recorded.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在CLI中的输出看起来像前面的代码块，那么你的配置就成功了。这基本上是从命令行自动读取的，应该表示在前面的代码块中设置的所有选项都已记录。
- en: We have gone through configurations and options, and you should now know the
    difference and the extent to which each can be used. It's now a natural process
    to move on to asset management.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过配置和选项，你现在应该知道每个选项的区别和使用范围。现在自然而然地转向资产管理。
- en: Understanding asset management
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解资产管理
- en: Assets are primarily managed via the dependency graph, which we covered in [Chapter
    1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction to Webpack 5.*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 资产主要通过依赖图进行管理，我们在[第1章](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml)中已经介绍过，*Webpack
    5简介*。
- en: Before the great advent of Webpack, developers would use tools such as **grunt**
    and **gulp** to process these assets and move them from the source folder into
    the production directory or the development directory (usually named `/build`
    and `/dist`, respectively).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack伟大的出现之前，开发人员会使用诸如**grunt**和**gulp**之类的工具来处理这些资产，并将它们从源文件夹移动到生产目录或开发目录（通常分别命名为`/build`和`/dist`）。
- en: The same principle was used for JavaScript modules, but Webpack 5 dynamically
    bundles all dependencies. As every module explicitly states its dependencies, unused
    modules won't be bundled.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript模块也使用了相同的原则，但Webpack 5会动态捆绑所有依赖项。由于每个模块都明确声明了它的依赖项，未使用的模块将不会被捆绑。
- en: In Webpack 5, any other type of file can now be included, besides JavaScript—for
    which a loader is used. This method means that all the features possible when
    using JavaScript can also be utilized.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack 5中，除了JavaScript之外，现在还可以包含任何其他类型的文件，使用加载器。这意味着使用JavaScript时可能的所有功能也可以被利用。
- en: 'In the following subsection, we will explore practical asset management. The
    following topics will be covered:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将探讨实际的资产管理。将涵盖以下主题：
- en: Setting up the project for asset management configurations
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为资产管理配置设置项目
- en: Loading **Cascading Style Sheets** (**CSS**) files
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载**层叠样式表**（**CSS**）文件
- en: Loading images
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载图像
- en: Loading fonts
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载字体
- en: Loading data
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载数据
- en: Adding global assets
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加全局资产
- en: Then, there will be a subsection on wrapping up.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将有一个小节来总结。
- en: Each subsection will have steps and instructional content to follow. This can
    become quite a large topic, so hold on tight! We will begin by preparing the configuration
    of your project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个小节都将有步骤和指导内容要遵循。这可能是一个相当大的主题，所以紧紧抓住！我们将从准备项目的配置开始。
- en: Setting up the project for asset management configurations
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为资产管理配置设置项目
- en: 'To set things up for asset management configurations in your project, we need
    to prepare our project index and a configuration file by performing the following
    steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在项目中设置资产管理配置，我们需要通过以下步骤准备我们的项目索引和配置文件：
- en: 'Begin by making a minor change to the example project using the `dist/index.html` file,
    as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过使用`dist/index.html`文件对示例项目进行微小的更改，如下所示：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, using `webpack.config.js`, write the following content:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`webpack.config.js`编写以下内容：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding two code blocks simply show a placeholder index file that we will
    use to experiment with asset management. The latter code block shows a standard
    configuration file, with the index file set as the first entry point and names
    for the output bundle set. This will prepare our project for bundling once we
    are done with our asset management experiment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的两个代码块只是显示了一个占位符索引文件，我们将用它来进行资产管理的实验。后一个代码块显示了一个标准配置文件，将索引文件设置为第一个入口点，并设置输出捆绑包的名称。这将在我们完成资产管理实验后为我们的项目准备捆绑。
- en: Your project will now be set up for asset management configurations. This guide
    will now show you how to load CSS files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您的项目现在已经设置好了资产管理配置。本指南现在将向您展示如何加载CSS文件。
- en: Loading CSS files
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载CSS文件
- en: The example project will now show the inclusion of CSS. This is a very easy
    thing to get to grips with, as most frontend developers beginning with Webpack
    5 should know it well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 示例项目现在将显示CSS的包含。这是一个非常容易掌握的事情，因为大多数从Webpack 5开始的前端开发人员应该对它很熟悉。
- en: 'To load CSS and run a build, perform the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载CSS并运行构建，请执行以下步骤：
- en: 'Firstly, install and add `style-loader` and `css-loader` to the project''s
    module configuration, using the following command-line instruction:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令行指令将`style-loader`和`css-loader`安装并添加到项目的模块配置中：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, make the following additions to the `webpack.config.js` file:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向`webpack.config.js`文件添加以下内容：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see from the previous code block, the following additions refer to
    the use of `style-loader` and `css-loader` toward the end of the block. So that
    you don't get any errors, you should ensure that your code mirrors the example.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码块中可以看出，以下添加是指向代码块末尾的`style-loader`和`css-loader`的使用。为了避免出现错误，您应该确保您的代码与示例相符。
- en: The difference between `style-loader` and `css-loader` is that the former determines how
    styles will be injected into a document—such as with style tags, whereas the latter
    will interpret `@import` and `require` statements, and then resolve them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`style-loader`和`css-loader`之间的区别在于前者确定样式将如何被注入到文档中，比如使用样式标签，而后者将解释`@import`和`require`语句，然后解析它们。'
- en: It is recommended that both loaders are used together, as almost all **CSS**
    operations involve a combination of these methods at some point in the project's
    development.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 建议同时使用这两个加载程序，因为几乎所有**CSS**操作在项目开发的某个阶段都涉及这些方法的组合。
- en: In Webpack, regular expressions are used to determine which files should be
    looked for and be served to a specific loader. This permits the import of a style
    sheet into the file that depends on it for styling. When that module is run, a `<style>` tag
    with the stringified CSS will be inserted into `<head>` of the HTML file.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack中，正则表达式用于确定应该查找哪些文件并将其提供给特定的加载程序。这允许将样式表导入到依赖它进行样式设置的文件中。当运行该模块时，一个带有字符串化CSS的`<style>`标签将被插入到HTML文件的`<head>`中。
- en: 'Now, navigate to the directory structure, which we can see in the following
    example:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到目录结构，我们可以在以下示例中看到：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We see from this structure that there is a style sheet named `style.css`. We
    are going to use this to demonstrate the use of `style-loader`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个结构中我们可以看到有一个名为`style.css`的样式表。我们将使用这个来演示`style-loader`的使用。
- en: 'Enter the following code in `src/style.css`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/style.css`中输入以下代码：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This preceding code simply creates a color class style that we will use to attach
    a style to our frontend and show how the CSS load works.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码只是创建了一个颜色类样式，我们将使用它来附加样式到我们的前端，并展示CSS加载的工作原理。
- en: 'Likewise, make the following append to `src/index.js`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，将以下内容追加到`src/index.js`中：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code all takes place inside the `index.js` file. It essentially
    creates a JavaScript function that appends a `<div>` element inside whichever
    files call it from the browser. In this example, it will be the `index.html` file,
    aforementioned in the directory structure illustration. The preceding code will
    then "join" an **HTML** element to the web page with text stating, '`Hello, Webpack`'.
    We will use this to test whether `style-loader` and `css-loader` have been used
    correctly. As the commented part of the script states, this element appendment
    will automatically import `lodash` for use with Webpack.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码都发生在`index.js`文件中。它基本上创建了一个JavaScript函数，该函数在从浏览器调用它的任何文件中插入一个`<div>`元素。在这个示例中，它将是`index.html`文件，在目录结构示例中提到的。前面的代码将在网页上“连接”一个**HTML**元素，其中包含文本“`Hello,
    Webpack`”。我们将使用这个来测试`style-loader`和`css-loader`是否被正确使用。正如脚本的注释部分所述，这个元素附加将自动导入`lodash`以便与Webpack一起使用。
- en: 'Finally, run the `build` command, as follows:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行`build`命令，如下所示：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the `index.html` file is opened in a browser window, you should see that '`Hello
    Webpack`' is now styled in blue.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器窗口中打开`index.html`文件时，您应该看到“`Hello Webpack`”现在以蓝色样式显示。
- en: To see what happened, inspect the page (not the page source, as it won't show
    the result) and look at the page's head tags. This is best done using Google's
    Chrome browser. It should contain the style block that we imported in `index.js`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看发生了什么，请检查页面（不是页面源代码，因为它不会显示结果），并查看页面的头标签。最好使用谷歌的Chrome浏览器进行。它应该包含我们在`index.js`中导入的样式块。
- en: You can—and in most cases, should—minimize CSS for better load times in production.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以并且在大多数情况下应该最小化CSS以获得更好的生产加载时间。
- en: The next natural step is to work on adding images. Images can be added to your
    project the same way as for any website application. Place these images in whatever
    desired format in an image folder. This must be in the `/src` folder, but they
    can be located anywhere in there. The next procedure is the loading of images
    with Webpack, and we will go through this now.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个自然的步骤是开始添加图片。图片可以以与任何网站应用程序相同的方式添加到项目中。将这些图片放在图像文件夹中以任何所需的格式。这必须在`/src`文件夹中，但它们可以放在其中的任何位置。下一个步骤是使用Webpack加载图片，我们现在将进行这一步。
- en: Loading images
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载图片
- en: Now, let's try loading images and icons using the file loader, which can be
    easily incorporated into our system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用文件加载程序加载图像和图标，这可以很容易地整合到我们的系统中。
- en: 'To do this, perform the following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: 'Using the command line, install `file-loader`, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令行，安装“file-loader”，如下所示：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, using the usual  `webpack.config.js` Webpack configuration file, make
    the following amendments to it:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用通常的“webpack.config.js”Webpack配置文件，对其进行以下修改：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, because of the code in the previous block, when you import an image, that
    image will be processed to the output directory, and the variable associated with
    that image will contain the final **URL** of that image after processing. When
    using the `css-loader`, a similar process will occur for the **URL** of the image
    file within your **CSS** file. The loader will recognize that this is a local
    file and replace the local path with the final path to the image in your output directory.
    The** `html-loader`** handles `<img src="img/my-image.png" />` in the same manner.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于前面的代码块中的代码，当您导入图像时，该图像将被处理到输出目录，并且与该图像相关联的变量将在处理后包含该图像的最终**URL**。当使用“css-loader”时，类似的过程将发生在**CSS**文件中图像文件的**URL**上。加载程序将识别这是一个本地文件，并将本地路径替换为输出目录中图像的最终路径。**`html-loader`**以相同的方式处理`<img
    src="img/my-image.png" />`。
- en: 'Next, to start adding an image, you need to navigate to the project file structure,
    which looks like this:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，要开始添加图像，您需要导航到项目文件结构，看起来像这样：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This structure seems very similar to the immediately previous project directly
    used for the *Loading CSS* *files* tutorial for the most part, except for the
    addition of the `icon.png` image file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构看起来与之前的项目非常相似，直接用于大部分“加载CSS文件”教程，只是增加了“icon.png”图像文件。
- en: 'Then, navigate to the JavaScript frontend file, `src/index.js`. The following
    code block shows the content:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，导航到JavaScript前端文件“src/index.js”。以下代码块显示了内容：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It can be seen from this preceding block that the import of **lodash** will
    allow the **HTML** of your page to be appended with the `Hello Webpack` text.
    Beyond that, this code simply sets up our web page with our image, using some
    crafty JavaScript. It first creates a variable called `Icon` and gives it the
    value of the image file's **URL**. Later in the code, it then assigns this to
    the source of an element called `myIcon`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码块可以看出，导入**lodash**将允许您的页面的**HTML**附加“Hello Webpack”文本。除此之外，这段代码只是用一些巧妙的JavaScript设置了我们的网页和图像。它首先创建一个名为“Icon”的变量，并为其赋予图像文件的**URL**的值。在代码的后面，它将这个值分配给一个名为“myIcon”的元素的源。
- en: 'From here, we want to set some very basic styles to handle our image with the
    style sheet. In the `src/style.css` file, append the following code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里开始，我们想要设置一些非常基本的样式来处理我们的图像。在“src/style.css”文件中，追加以下代码：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It will, of course, show your image icon as the background for `div` we assigned
    code to in the **HTML**, with the text turned **red** wherever the `.hello` class
    is applied.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，它将显示您的图像图标作为我们在**HTML**中分配代码的`div`的背景，其中应用了`.hello`类的地方文本变为**红色**。
- en: 'Run a new build and open up the `index.html` file, as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行新的构建并打开“index.html”文件，如下所示：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will create the effect of the icon repeating as a background image. There
    will also be an `img` element beside the `Hello Webpack` text.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建图标重复作为背景图像的效果。在“Hello Webpack”文本旁边还会有一个“img”元素。
- en: Often, this command can go wrong, even for experienced developers. For example,
    the image might not load at all, be too large, or will not be bundled correctly.
    This can be caused by a combination of factors, including the use of the loader
    in an unusual way. Webpack may also experience code skipping when using long filenames.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，即使对于经验丰富的开发人员，这个命令也可能出错。例如，图像可能根本不加载，太大，或者无法正确捆绑。这可能是由多种因素造成的，包括以不寻常的方式使用加载程序。在使用长文件名时，Webpack也可能会出现代码跳过的情况。
- en: 'If this is the case, simply repeat the steps, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，只需重复以下步骤：
- en: Install `file-loader` using the command line.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用命令行安装“file-loader”。
- en: Alter the `webpack.config.js` file, as described in the preceding example.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前面的示例修改“webpack.config.js”文件。
- en: Check that the project file structure and index file are formatted correctly
    to load the image file.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查项目文件结构和索引文件是否正确格式化以加载图像文件。
- en: Check that the **CSS** is also formatted the way you want it to be.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**CSS**是否也按您的要求格式化。
- en: Then, run the build using `npm` and the command line.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用“npm”和命令行运行构建。
- en: Check that the index file is loading the image correctly.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查索引文件是否正确加载图像。
- en: If the element is inspected, the actual filename can be seen to have changed
    to something similar to `da4574bb234ddc4bb47cbe1ca4b20303.png`. This means that
    Webpack found our file in the source folder and processed it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检查该元素，可以看到实际的文件名已更改为类似于“da4574bb234ddc4bb47cbe1ca4b20303.png”的内容。这意味着Webpack在源文件夹中找到了我们的文件并对其进行了处理。
- en: That gives you a solid framework for managing images. In the next subsection,
    we will discuss the management of fonts as Webpack assets.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这为您提供了一个管理图像的坚实框架。在下一小节中，我们将讨论Webpack资产的字体管理。
- en: Loading fonts
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载字体
- en: Now, we will examine fonts in the context of assets. The file and URL loaders
    will take any file you load through them and output it to your build directory.
    This means we can use them for any kind of file, including fonts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在资产的上下文中检查字体。文件和URL加载程序将接受通过它们加载的任何文件，并将其输出到您的构建目录。这意味着我们可以将它们用于任何类型的文件，包括字体。
- en: 'We will begin by updating the Webpack configuration JavaScript file, which
    is needed to handle fonts, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先更新Webpack配置JavaScript文件，需要处理字体，如下所示：
- en: 'Ensure the update of the configuration file is made. We are updating our usual `webpack.config.js` configuration
    file here, but you will notice toward the end that some font types, such as `.woff`,
    `.woff2`, `.eot`, `.ttf`, and `.otf`, have been added, as illustrated in the following
    code block:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保更新配置文件。我们在这里更新了通常的`webpack.config.js`配置文件，但您会注意到在末尾添加了一些字体类型，例如`.woff`、`.woff2`、`.eot`、`.ttf`和`.otf`，如下面的代码块所示：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This configuration allows Webpack's `file-loader` to incorporate the font type,
    but we still have to add some font files to our project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置允许Webpack的`file-loader`合并字体类型，但我们仍然需要向项目添加一些字体文件。
- en: 'We can now perform the essential task of adding the font to the source directory.
    The following code block illustrates a file structure, indicating where the new
    font files can be added:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以执行将字体添加到源目录的基本任务。下面的代码块说明了文件结构，指示新字体文件可以添加的位置：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note the `src` directory and the `sample-font.woff` and `sample-font.woff2`
    files. These two files should be replaced with any font files you choose. The **Web
    Open Font** (**WOFF**) format is generally recommended for use with Webpack projects.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`src`目录和`sample-font.woff`和`sample-font.woff2`文件。这两个文件应该被您选择的任何字体文件替换。**Web
    Open Font**（**WOFF**）格式通常建议与Webpack项目一起使用。
- en: Fonts can be incorporated in the styling of your project by using the `@font-face`
    declaration. The local URL directive will be found by Webpack the same way it
    handles images.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`@font-face`声明，可以将字体合并到项目的样式中。Webpack将以与处理图像相同的方式找到本地URL指令。
- en: 'Update the style sheet using the `src/style.css` file to include the sample
    font on our home page. This is done with the use of a font declaration at the
    top of the code block and a class definition below that, as shown in the following
    code block:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`src/style.css`文件更新样式表，以在我们的主页上包含示例字体。这是通过在代码块顶部使用字体声明和在下面使用类定义来完成的，如下面的代码块所示：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that you must change the `'SampleFont'` text to one corresponding to your
    chosen font file. The previous code shows the loading of the font via CSS and
    the setting of custom values such as `font-weight` and `font-style`. The **CSS**
    code then uses the `.hello` class to assign that font to any prospective **HTML**
    element. Note that we have already prepared our `index.html` file for this in
    the two previous tutorials, *Loading CSS* *files* and *Loading images*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须将`'SampleFont'`文本更改为与您选择的字体文件相对应的文本。前面的代码显示了通过CSS加载字体以及设置自定义值，如`font-weight`和`font-style`。**CSS**代码然后使用`.hello`类将该字体分配给任何潜在的**HTML**元素。请注意，我们在前两个教程中已经为此准备好了我们的`index.html`文件，*加载CSS*
    *文件*和*加载图像*。
- en: 'Now, run a `npm` build in development mode using the command-line utility as
    per usual, like this:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像往常一样使用命令行实用程序以开发模式运行`npm`构建，如下所示：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open up `index.html` again and see whether the `Hello Webpack` sample text we
    are using has changed to the new font. If all is well, you should see the changes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开`index.html`，看看我们使用的`Hello Webpack`示例文本是否已更改为新字体。如果一切正常，您应该能看到变化。
- en: That should serve as a simple tutorial to understand font management. The next
    section will cover data management of files such as **Extensible Markup Language**
    (**XML**) and **JavaScript Object Notation** (**JSON**) files.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该作为一个简单的教程来理解字体管理。下一节将涵盖文件的数据管理，如**可扩展标记语言**（**XML**）和**JavaScript对象表示**（**JSON**）文件。
- en: Loading data
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: Another useful asset that can be loaded is data. Data is an incredibly important
    asset to be loaded. This will include files such as **JSON**, **Comma-Separated
    Values** (**CSV**), **Tab-Separated Values** (**TSV**), and **XML** files. Using
    a command such as `import Data from './data.json'` will work by default, meaning
    **JSON** support is built into Webpack 5.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的资源是数据。数据是一个非常重要的要加载的资源。这将包括**JSON**、**逗号分隔值**（**CSV**）、**制表符分隔值**（**TSV**）和**XML**文件等文件。使用诸如`import
    Data from './data.json'`这样的命令默认情况下可以工作，这意味着**JSON**支持内置到Webpack 5中。
- en: 'To import the other formats, a **loader** must be used. The following subsection
    demonstrates a method for handling all three. The following steps should be taken:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入其他格式，必须使用**加载器**。以下子节演示了处理所有三种格式的方法。应采取以下步骤：
- en: 'To begin, you must install the `csv-loader` and `xml-loader` loaders using
    the command line, as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您必须使用以下命令行安装`csv-loader`和`xml-loader`加载器。
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The preceding code block simply shows the command line to install two data loaders.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块只是显示了安装两个数据加载器的命令行。
- en: 'Open and append the `webpack.config.js` configuration file, and ensure that
    it looks like the following example:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并追加`webpack.config.js`配置文件，并确保其看起来像以下示例：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code block, the lower portion shows the use of `csv-loader`
    and `xml-loader`. It is this amendment that will be needed this time to load the
    data into our project.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，下部显示了`csv-loader`和`xml-loader`的使用。这次需要进行的修改是将数据加载到我们的项目中。
- en: 'Next, we must add a data file to the source directory. We will be adding an
    **XML** data file to our project, shown in bold text in the following code block:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须向源目录添加一个数据文件。我们将在我们的项目中添加一个**XML**数据文件，如下面代码块中的粗体文本所示：
- en: '[PRE31]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Take a look at the preceding `data.xml` file in the `src` directory of your **proj****ect** folders. Let''s
    take a closer look inside this file to see what the data is, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 查看您**项目**文件夹的`src`目录中的前述`data.xml`文件。让我们更仔细地查看一下这个文件里的数据，如下所示：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see from the previous block of code, the contents are a very basic
    **XML** dataset. We are going to use this to import the **XML** data into our
    project's `index.html` page, and we will need this to be formatted correctly to
    ensure that it works.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码块中可以看出，内容是一个非常基本的**XML**数据集。我们将使用它来导入**XML**数据到我们项目的`index.html`页面中，并且需要正确格式化以确保其正常工作。
- en: Any one of those four types of data (**JSON**, **CSV**, **TSV,** and **XML**)
    can be imported, and the data variable you import it to will contain parsed JSON.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这四种类型的数据（**JSON**、**CSV**、**TSV**和**XML**）中的任何一种都可以被导入，并且您导入的`data`变量将包含解析后的JSON。
- en: 'Be sure to amend the `src/index.js` file to expose the data file. Note the
    import of `./data.xml`, as illustrated in the following code block:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保修改`src/index.js`文件以公开数据文件。注意`./data.xml`的导入，如下面的代码块所示：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The addition of the `import` function, and little else, is all we need this
    time to demonstrate the usage. Anyone familiar enough with JavaScript will also
    know how to make use of this to run their particular project very easily.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们只需要添加`import`函数，几乎没有别的东西，来演示使用方法。熟悉JavaScript的人也会知道如何轻松地运行他们的特定项目。
- en: 'Run a build and check that the data loads correctly, as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行构建并检查数据是否正确加载，方法如下：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once a `npm` build is run, the `index.html` file can be opened. Examining the
    console (such as under **developer tools** when using Chrome) will show the data
    being logged after import.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm`构建后，可以打开`index.html`文件。检查控制台（例如在Chrome中使用**开发者工具**）将显示导入后记录的数据。
- en: Something related, but more to do with project architecture, is the arrangement
    of global assets for project consumption. Let's explore that in the following
    subsection.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与项目架构相关的是为项目消耗安排全局资产的方式。让我们在下一小节中探讨这一点。
- en: Adding global assets
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加全局资产
- en: Loading assets in the aforementioned ways allows modules to be grouped together
    in a more intuitive, practical, and usable way.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以前述方式加载资产允许模块以更直观、实用和可用的方式进行分组。
- en: 'Instead of using a global assets directory containing every asset, assets can
    be grouped with the code that utilizes them. The following filing structure or
    tree demonstrates a very practical and usable example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与包含每个资产的全局资产目录不同，资产可以与使用它们的代码分组。以下文件结构或树演示了一个非常实用和可用的示例：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding example makes your code a lot more portable. If you want to place
    one component in another directory, simply copy or move it there. Alternatively,
    a base directory could be used if your development works along old-fashioned lines.
    Also, aliasing is an option.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子使您的代码更具可移植性。如果您想将一个组件放在另一个目录中，只需将其复制或移动到那里。或者，如果您的开发工作遵循老式的方式，也可以使用基本目录。此外，别名也是一个选择。
- en: Wrapping up the tutorial with best practice
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用最佳实践结束教程
- en: It's been a long tutorial and some of your code might have gone astray. It's
    good practice to clean up this code and check for anything erroneous.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个漫长的教程，你的一些代码可能已经出错了。清理这些代码并检查是否有任何错误是一个好习惯。
- en: Cleaning up is a good habit to get into. We won't be using a lot of assets in
    the next section, *Understanding output management*, so let's start there.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 清理是一个好习惯。在接下来的部分中，*理解输出管理*，我们不会使用很多资产，所以让我们从那里开始。
- en: 'We begin wrapping up with the project directories, **project tree**. Let''s
    check them to see whether they are right. It should something like the following:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们开始用项目目录**项目树**结束。让我们检查它们是否正确。它应该看起来像下面这样：
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As we are wrapping up, you should remove the files that correspond to the emboldened
    text in the preceding code block.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束时，您应该删除与前面代码块中加粗文本相对应的文件。
- en: This should give you a good idea of what your project files and folders look
    like. Ensure that all the files we have been using are there and in the appropriate
    folder.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该让你对项目文件和文件夹的外观有一个很好的了解。确保我们一直在使用的所有文件都在那里，并且在适当的文件夹中。
- en: Let's check the formatting of our configuration.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查我们配置的格式。
- en: 'A lot of work has been done on `webpack.config.js`, and we must take care that
    the contents are formatted correctly. Please refer to the following code block
    and check it against your own to ensure this is correct. It is often useful to
    count the number of `{` and beautify your code with a conventional structure to
    make this process easier:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`webpack.config.js`上已经做了很多工作，我们必须确保内容格式正确。请参考以下代码块，并将其与您自己的代码进行对比，以确保正确。通常有用的是计算`{`的数量，并使用传统结构美化您的代码，以使这个过程更容易：
- en: '[PRE37]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Notice the extensive reference to CSS, images files, fonts such as `.woff`,
    and data files in separate handlers such as `.csv` and `.xml`. All of this is
    important, and you should take the time to make sure the scripting is accurate
    as this has been an extensive topic and practical exercise, so a lot of things
    could have been overlooked.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到对CSS、图像文件、诸如`.woff`的字体以及独立处理程序中的数据文件（如`.csv`和`.xml`）的广泛引用。所有这些都很重要，您应该花时间确保脚本准确，因为这是一个广泛的主题和实际练习，所以很多东西可能被忽视。
- en: 'Next, we need to check the scripting of the `src/index.js` file, as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要检查`src/index.js`文件的脚本，方法如下：
- en: '[PRE38]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Once again, we are wrapping up here so that the code is reusable after having
    followed multiple tutorials using it, so be sure to remove the emboldened text
    in your version.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们在这里结束，以便在使用多个教程后代码是可重用的，所以请确保在您的版本中删除加粗的文本。
- en: We've gone through an extensive list of asset management operations and have
    concluded with the project tidying process. All of your code should look like
    the previous code blocks in the wrapping-up section for it to operate correctly.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经经历了一系列的资产管理操作，并以项目整理过程结束。为了使其正常运行，您的所有代码应该看起来像包装部分中的以前的代码块。
- en: You should now have a sound understanding of how Webpack manages these assets,
    and how to manage them when working with Webpack. With the file structure and
    code cleaned through and tidied, we are now best placed to begin output management.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该对Webpack如何管理这些资产以及在使用Webpack时如何管理它们有了清晰的理解。通过整理文件结构和代码，我们现在可以开始输出管理。
- en: Understanding output management
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解输出管理
- en: The output refers to the bundles created from the source files. The source files
    are referred to as the input in Webpack. Output management refers to the management
    of these newly bundled files. Depending on the mode Webpack was running in when
    the build began, these bundles will either be development or production bundles.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是指从源文件创建的包。源文件在Webpack中被称为输入。输出管理指的是对这些新打包文件的管理。根据Webpack在构建开始时运行的模式，这些包将是开发包还是生产包。
- en: The process by which Webpack produces the output or bundle from the source files
    is called compiling. Compiling is the process by which Webpack 5 assembles the
    information, including assets, files, and folders. The topic of configuration
    relates to the various options and configurations possible in Webpack, which will
    alter the style and method of compilation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack从源文件生成输出或包的过程称为编译。编译是Webpack 5组装信息（包括资产、文件和文件夹）的过程。配置的主题涉及Webpack中可能的各种选项和配置，这些选项和配置将改变编译的样式和方法。
- en: Development bundles permit some customization (such as local testing), but production
    bundles are the finished and fully compressed versions, ready for publication.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 开发包允许一些定制（例如本地测试），但生产包是成品和完全压缩的版本，准备发布。
- en: During this chapter, assets have been manually added to the index **HTML** file.
    As the project grows, manual handling will be difficult, especially when using
    multiple bundles. That being said, a few plugins exist that make this process
    much easier.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，资产已经手动添加到了**HTML**文件中。随着项目的发展，手动处理将变得困难，特别是在使用多个包时。也就是说，存在一些插件可以使这个过程变得更容易。
- en: We will now discuss those options, but begin with preparing your now very busy
    project structure, which will become an increasingly important practice as the
    project develops.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论这些选项，但首先要准备您现在非常繁忙的项目结构，这将成为项目发展中越来越重要的实践。
- en: Output management tutorial preparation
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出管理教程准备
- en: 'First, let''s adjust our project file structure tree a little and make things
    easier. This process follows these next steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们稍微调整一下项目文件结构树，使事情变得更容易。这个过程遵循以下步骤：
- en: 'Begin by locating the `print.js` file in the project folder, as follows:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，找到项目文件夹中的`print.js`文件，如下所示：
- en: '[PRE39]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note the addition to our project structure—the `print.js` file, specifically.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们项目结构的添加——特别是`print.js`文件。
- en: 'Append the code by adding some logic to the `src/print.js` file, as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向`src/print.js`文件添加一些逻辑来追加代码，如下所示：
- en: '[PRE40]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You should use the `printIt()` JavaScript function, as seen in the preceding
    code block, in the `src/index.js` file.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在`src/index.js`文件中使用`printIt()`JavaScript函数，就像前面的代码块中所示。
- en: 'Prepare the `src/index.js` file to import the required external files and write
    a simple function in it to allow interaction, as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备`src/index.js`文件，以导入所需的外部文件，并在其中编写一个简单的函数以允许交互，如下所示：
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We've updated our `index.js` file with an import of the `print.js` file at the
    top and a new `printIt();` function button at the bottom.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了我们的`index.js`文件，在顶部导入了`print.js`文件，并在底部添加了一个新的`printIt();`函数按钮。
- en: 'We must update the `dist/index.html` file. This update is done in preparation
    for the entries to be split out, and is illustrated in the following code block:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须更新`dist/index.html`文件。这次更新是为了准备拆分条目，并在下面的代码块中进行了说明：
- en: '[PRE42]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This preceding **HTML** script will load in the `print.bundle.js` file and,
    below that, the `bundle.js` and `app.bundle.js` files.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的**HTML**脚本将加载`print.bundle.js`文件，以及下面的`bundle.js`和`app.bundle.js`文件。
- en: 'Next, ensure that the configuration of the project is in line with dynamic
    entry points. The `src/print.js` file will be added as a new entry point. The
    outputs will also be changed so that bundles'' names will be dynamically generated
    based on entry point names. In `webpack.config.js`, there is no need to change
    the directory names due to this automatic process. The following code block shows
    the content of `webpack.config.js`:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保项目的配置符合动态入口点。`src/print.js`文件将被添加为新的入口点。输出也将被更改，以便根据入口点名称动态生成包的名称。在`webpack.config.js`中，由于这个自动过程，不需要更改目录名称。下面的代码块显示了`webpack.config.js`的内容：
- en: '[PRE43]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The configuration simply set up new entry points for the new files we have been
    working on, `index.js` and `print.js`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 配置简单地为我们正在工作的新文件`index.js`和`print.js`设置了新的入口点。
- en: 'Make sure you perform a build. Once you run a `npm` build, you will see the
    following:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您执行了构建。一旦您运行了`npm`构建，您将会看到以下内容：
- en: '[PRE44]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: After opening the `index.html` file in your browser, you will see that Webpack
    generated the `print.bundle.js` and `app.bundle.js` files. We should now check
    that it worked! If the entry point names are changed or new ones added, the **index
    HTML** would still reference the older names. This can be corrected with `HtmlWebpackPlugin`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`index.html`文件后，您会看到Webpack生成了`print.bundle.js`和`app.bundle.js`文件。我们现在应该检查它是否工作了！如果更改了入口点名称或添加了新的入口点，**index
    HTML**仍然会引用旧的名称。这可以通过`HtmlWebpackPlugin`来纠正。
- en: Setting up the HtmlWebpackPlugin
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置HtmlWebpackPlugin
- en: 'The `HtmlWebpackPlugin` will allow Webpack to process HTML files that contain
    JavaScript, for instance. To start working with it, we need to install it using
    the command line, and then set the configuration correctly, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`HtmlWebpackPlugin`将允许Webpack处理包含JavaScript的HTML文件。要开始使用它，我们需要使用命令行安装它，然后正确设置配置，如下所示：'
- en: 'First, install the plugin using the command-line utility, and then adjust the `webpack.config.js` file,
    as follows:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用命令行实用程序安装插件，然后调整`webpack.config.js`文件，如下所示：
- en: '[PRE45]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The preceding code block shows the installation of the `HtmlWebpackPlugin` for
    use in our project.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块显示了在我们的项目中使用`HtmlWebpackPlugin`的安装。
- en: 'Next, we have to incorporate the plugin into our configuration. Let''s take
    a look at the `webpack.config.js` file when associated with this plugin, as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将插件合并到我们的配置中。让我们看一下与该插件相关联的`webpack.config.js`文件，如下所示：
- en: '[PRE46]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note the use of the `require` expression and the `plugins:` option key, both
    of which serve to permit the use of the plugin.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`require`表达式和`plugins:`选项键的使用，这两者都允许使用插件。
- en: Before a build is run, note that the `HtmlWebpackPlugin` will generate its `index.html`
    file by default, even though there already is one in the `dist/` folder. As a
    result, the existing file will be overwritten.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行构建之前，请注意`HtmlWebpackPlugin`将默认生成它的`index.html`文件，即使`dist/`文件夹中已经有一个。因此，现有文件将被覆盖。
- en: For best practice, make a copy of the existing index file and name it something
    like `index2.html`.Place this new file next to the original, and then run the
    build.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最佳实践，复制现有的索引文件并将其命名为`index2.html`。将这个新文件放在原文件旁边，然后运行构建。
- en: 'Now, run the build using your command-line utility. Once this is done, you
    will see the following result in the command-line utility window, indicating a
    successful bundling:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用命令行实用程序运行构建。一旦完成，你将在命令行实用程序窗口中看到以下结果，表明成功捆绑：
- en: '[PRE47]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Opening the `index.html` file in your code editor or **Notepad** will reveal
    that the plugin has created a new file, and all the bundles are automatically
    added.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 打开代码编辑器或**记事本**中的`index.html`文件将会显示插件已经创建了一个新文件，并且所有的捆绑包都被自动添加了。
- en: Also, why not look at `html-webpack-template`, which provides a few extra features
    on top of the default template?
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，为什么不看一下`html-webpack-template`，它在默认模板的基础上提供了一些额外的功能呢？
- en: That concludes our tutorial of Webpack's `HtmlWebpackPlugin`. In the following
    subsection, we will again embark on some tidying up in your project directory.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对Webpack的`HtmlWebpackPlugin`的教程。在接下来的小节中，我们将再次开始整理你的项目目录。
- en: Cleaning up the distribution directory
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理分发目录
- en: 'During this project development, the `/dist` folder will become quite cluttered.
    Good practice involves good organization, and this involves cleaning the `/dist`
    folder before each build. There is a `clean-webpack-plugin` plugin that can be
    used to do this for you, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目开发过程中，`/dist`文件夹会变得相当混乱。良好的做法涉及良好的组织，这包括在每次构建之前清理`/dist`文件夹。有一个`clean-webpack-plugin`插件可以帮助你做到这一点，如下所示：
- en: 'Start by installing the `clean-webpack-plugin`. The following example shows
    you how to do this:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先安装`clean-webpack-plugin`。以下示例向你展示如何做到这一点：
- en: '[PRE48]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Once the plugin is installed, we can delve back into the configuration file.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装完成后，我们可以重新进入配置文件。
- en: 'Using **`webpack.config.js`**, make the following entry in the file:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**`webpack.config.js`**，在文件中进行以下条目：
- en: '[PRE49]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note the use of `CleanWebpackPlugin`, proceeding with the `const` qualifier.
    This will be the addition of the `module.export` plugin option, which creates
    a new function associated with the plugin and will make the plugin usable by Webpack
    during compilation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`CleanWebpackPlugin`，继续使用`const`限定符。这将是`module.export`插件选项的添加，它将创建一个与插件相关联的新函数，并使插件在Webpack编译期间可用。
- en: You should now run an `npm` build, which will output a bundle to the`/dist` distribution
    folder.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该运行一个`npm`构建，这将会将一个捆绑包输出到`/dist`分发文件夹中。
- en: After you run a `npm` build, the `/dist` folder can be inspected. You should
    only see newly generated files and no more old ones, assuming the process behaved
    correctly.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`npm`构建后，可以检查`/dist`文件夹。假设过程正常，你应该只看到新生成的文件，不再有旧文件。
- en: We've been generating a lot of files, and to help us keep track, there is something
    called the manifest, which we will cover next.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经生成了很多文件，为了帮助我们跟踪，有一个叫做清单的东西，我们接下来会介绍。
- en: Utilizing the manifest
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用清单
- en: Webpack can know which files are being generated thanks to the manifest. This
    allows the software to track all output bundles and to map the modules. To manage
    outputs in other ways, it would be a good idea to utilize the manifest.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack可以通过清单知道哪些文件正在生成。这使得软件能够跟踪所有输出捆绑包并映射模块。为了以其他方式管理输出，利用清单是个好主意。
- en: 'Webpack essentially categorizes code by three types: source code written by
    the developer; vendor code written by a third party; and Webpack''s runtime manifest,
    which conducts the interactions of all the modules.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack基本上将代码分为三种类型：开发人员编写的源代码；第三方编写的供应商代码；以及Webpack的运行时清单，它负责所有模块的交互。
- en: The runtime and manifest data are what Webpack needs to connect your modular
    application while it runs in the browser.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时和清单数据是Webpack在浏览器中运行时连接你的模块化应用程序所需的。
- en: If you decide to improve performance by using browser caching, this process
    will become an important thing to get to grips with.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定通过使用浏览器缓存来提高性能，这个过程将成为一个重要的事情。
- en: By using content hashes within your bundle filenames, you can indicate to the
    browser when a file's contents have changed, and are thereby invalidating the
    cache. This is caused by the injection of the runtime and manifest, which changes
    with every build.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在捆绑文件名中使用内容哈希，你可以告诉浏览器文件内容已经改变，从而使缓存失效。这是由运行时和清单的注入引起的，它们会随着每次构建而改变。
- en: Webpack has `WebpackManifestPlugin` that can extract manifest data into a **JSON**
    file.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack有`WebpackManifestPlugin`，可以将清单数据提取到一个**JSON**文件中。
- en: Now that you've learned about dynamically adding bundles to your HTML, let's
    dive into the development guide. Or, if you want to dig into more advanced topics,
    we would recommend rereading the *C**ode splitting* section of this guide in the
    previous chapter, [Chapter 2](3307482e-bfac-4ad6-8d58-767063722dda.xhtml), *Working
    with Modules and Code Splitting*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了动态向你的HTML中添加捆绑包，让我们深入开发指南。或者，如果你想深入更高级的主题，我们建议重新阅读上一章节[第2章](3307482e-bfac-4ad6-8d58-767063722dda.xhtml)中的*代码拆分*部分。
- en: Exploring Webpack 5 options
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Webpack 5的选项
- en: 'Options are a set of variables that can be altered using the CLI. Configuration,
    on the other hand, is done by altering the file contents. Options'' settings can
    be adjusted using the configuration file, however. The following is a list of
    the options supported by Webpack 5 currently:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 选项是可以使用CLI进行更改的一组变量。另一方面，通过更改文件内容来进行配置。但是可以使用配置文件来调整选项的设置。以下是当前由Webpack 5支持的选项列表：
- en: '**Asynchronous Module Definition** (**AMD**)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步模块定义**（**AMD**）'
- en: Bail
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bail
- en: Cache
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cache
- en: Loader
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Loader
- en: Parallelism
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Parallelism
- en: Profile
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Profile
- en: Records Path
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Records Path
- en: Records Input Path
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Records Input Path
- en: Records Output Path
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录输出路径
- en: Name
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Name
- en: 'The following sections describe and illustrate each option is a bit more detail.
    We will begin with something that, after a cursory examination of Webpack''s configuration,
    might find you scratching your head: the AMD option.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节将更详细地描述和说明每个选项。我们将从一些东西开始，经过对Webpack配置的粗略检查后，可能会让你感到困惑：AMD选项。
- en: AMD
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AMD
- en: '**AMD** is an `object bool: false` option. It is also an acronym for Asynchronous
    Module Definition. Essentially, it is a format to provide a solution for modular JavaScript that
    developers. The format itself is a proposal for defining modules in which both
    the module and dependencies can be asynchronously loaded.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**AMD**是一个`object bool: false`选项。它也是**异步模块定义**的缩写。本质上，它是为开发人员提供模块化JavaScript解决方案的格式。该格式本身是一个用于定义模块的提案，其中模块和依赖项都可以异步加载。'
- en: This allows you to set the value of `require.amd` or `define.amd`. Setting `amd` to `false` will
    disable **AMD** support.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您设置`require.amd`或`define.amd`的值。将`amd`设置为`false`将禁用**AMD**支持。
- en: 'Look inside the `webpack.config.js`file, as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`webpack.config.js`文件，如下所示：
- en: '[PRE50]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Popular modules for **AMD**, such as jQuery versions 1.7.0 to 1.9.1, will only
    register as an **AMD** module if the loader indicates that special allowances are
    permitted for multiple versions being used on one page. Another similar option,
    in terms of being a Boolean variable, is **Bail**. Let's take a closer look.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '**AMD**的流行模块，例如jQuery版本1.7.0至1.9.1，只有在加载程序指示允许在同一页上使用多个版本时才会注册为**AMD**模块。另一个类似的选项，就布尔变量而言，是**Bail**。让我们仔细看一下。'
- en: Bail
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bail
- en: '**Bail** is a `bool` value. This will force Webpack to exit its bundling process. It
    will cause Webpack to fail out on the first error instead of tolerating it. By
    default, Webpack will log these errors in red text in the Terminal (the browser
    console also, when using **HMR**) but will continue bundling.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bail**是一个`bool`值。这将强制Webpack退出其捆绑过程。这将导致Webpack在第一个错误上失败，而不是容忍它。默认情况下，Webpack将在终端（使用**HMR**时也在浏览器控制台）中以红色文本记录这些错误，但将继续捆绑。'
- en: 'To enable this option, open `webpack.config.js`, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用此选项，请打开`webpack.config.js`，如下所示：
- en: '[PRE51]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: This will be very helpful if you want Webpack to exit a bundling process in
    certain circumstances. Perhaps you only want part of a project bundled. It's really
    up to you. Next up is caching.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望Webpack在某些情况下退出捆绑过程，这将非常有帮助。也许您只想要项目的一部分捆绑。这完全取决于您。接下来是缓存。
- en: Cache
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cache
- en: A cache is a term that refers to a `bool` object. It will cache the generated
    Webpack modules and chunks; this improves the speed of the build. It does this
    by keeping a reference to this object between compiler calls that can be shared. Caching
    is enabled by default while in **watch mode** and development mode.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是一个指代`bool`对象的术语。它将缓存生成的Webpack模块和块；这提高了构建的速度。它通过在编译器调用之间保持对此对象的引用来实现。在**观察模式**和开发模式下，默认情况下启用缓存。
- en: 'In watch mode, after the initial build, Webpack will continue to watch for
    changes in any of the processed files. Essentially, the **Webpack configuration
    JavaScript** file should include the `watch: true` operand inside the `module.export`
    operator.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '在观察模式下，在初始构建之后，Webpack将继续监视任何已处理文件的更改。基本上，**Webpack配置JavaScript**文件应该在`module.export`运算符内包含`watch:
    true`操作数。'
- en: 'To enable caching, manually set it to `true` using webpack.config.js, as in
    the following example:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用缓存，可以在webpack.config.js中手动将其设置为`true`，如下例所示：
- en: '[PRE52]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `webpack.config.js` file shows the configuration needed to allow shared
    caching, as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack.config.js`文件显示了允许共享缓存所需的配置，如下所示：'
- en: '[PRE53]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The two previous examples show the caching configuration set to `false` and
    `sharedCache`. These are the two Boolean values that can be set in Webpack.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个示例显示了缓存配置设置为`false`和`sharedCache`。这是Webpack中可以设置的两个布尔值。
- en: 'Warning: The cache should NOT be shared between calls with different options.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：缓存不应在不同选项的调用之间共享。
- en: 'There are a few more options that can be set in Webpack: Loader, Parallelism,
    Profile, Records Path, Records Input Path, Records Output Path, and Name. Let''s
    go through each one, one at a time, right now.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack中还有一些可以设置的选项：Loader、Parallelism、Profile、Records Path、Records Input Path、Records
    Output Path和Name。让我们逐个进行解释，现在就开始吧。
- en: Loader
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Loader
- en: 'This is expressed as `loader` and exposes custom values in the loader context,
    as illustrated in the following code block:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这被表示为`loader`，并在以下代码块中展示了在loader上下文中公开自定义值：
- en: '[PRE54]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You can see from the preceding code example how this option can be used in the
    configuration file. This example should look familiar to anyone following this
    guide and configuring loaders. This example uses `worker-loader` by way of example
    only. Some of these options are a Boolean or a binary, such as the `profile` option,
    described next.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从前面的代码示例中看到如何在配置文件中使用此选项。这个示例对于遵循本指南并配置加载程序的任何人来说应该很熟悉。此示例仅使用`worker-loader`作为示例。其中一些选项是布尔值或二进制值，例如接下来要描述的`profile`选项。
- en: Profile
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Profile
- en: 'The `profile` option will capture a profile of the application, which can then
    be dissected using the **Analyze** tool, as illustrated in the following code
    snippet:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile`选项将捕获应用程序的配置文件，然后可以使用**Analyze**工具进行分析，如下面的代码片段所示：'
- en: '[PRE55]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note that this is a Boolean value. You can use the `StatsPlugin` for more control
    over the profile. This can also be combined with the `parallelism` option for
    better results.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个布尔值。您可以使用`StatsPlugin`来更好地控制配置文件。这也可以与`parallelism`选项结合使用以获得更好的结果。
- en: Parallelism
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行性
- en: 'Parallelism will limit the number of parallel processed modules. This can be
    used to fine-tune performance or for more reliable profiling. The following example
    gives the limit number as `1`, but you can alter this as you wish:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 并行性将限制并行处理模块的数量。这可以用于微调性能或更可靠的分析。以下示例将限制数字为`1`，但您可以根据需要更改：
- en: '[PRE56]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Webpack 5 permits the use of modules being processed in parallel as well as
    bundling in parallel. This can eat up memory, so this option should be noted on
    larger projects.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack 5允许并行处理模块以及并行捆绑。这可能会占用内存，因此应该在较大的项目上注意此选项。
- en: As your project gets more complex, you may want to record the compilation process,
    which can help with—among other things—tracing bugs and errors. **Records Path**
    will help you do this, and we will take a closer look at that now.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目变得更加复杂，您可能希望记录编译过程，这可以帮助跟踪错误和错误。**Records Path**将帮助您做到这一点，我们现在将更仔细地看一下。
- en: Records Path
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Records Path
- en: 'The Records Path option is expressed as a string. This option should be used
    to generate a **JSON** file containing records. These are pieces of data used
    to store module identifiers across numerous builds. This can be used to track
    how modules alter between builds. To generate one, simply specify a location,
    as in the following example, using the `webpack.config.js` file:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: Records Path选项表示为字符串。应该使用此选项来生成包含记录的**JSON**文件。这些是用于在多个构建之间存储模块标识符的数据片段。这可以用于跟踪模块在构建之间的变化。要生成一个，只需指定一个位置，如下面的示例中使用`webpack.config.js`文件：
- en: '[PRE57]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Records are useful if you have a complex project that uses code splitting. This
    recorded data can be utilized to ensure that caching is behaving correctly when
    working with split bundles.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个使用代码拆分的复杂项目，记录非常有用。这些记录的数据可用于确保在处理拆分包时缓存的行为是否正确。
- en: Even though the compiler generates this file, the source control should be used
    to track it and keep a history of its usage over time.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编译器生成此文件，但应使用源代码控制来跟踪它，并随时间保留其使用历史记录。
- en: Setting `recordsPath` will also set `recordsInputPath` and `recordsOutputPath` to
    the same location.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`recordsPath`也会将`recordsInputPath`和`recordsOutputPath`设置为相同的位置。
- en: Records Input Path
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录输入路径
- en: 'This option is expressed as a string,`recordsInputPath`, as illustrated in
    the following code block:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项表示为字符串`recordsInputPath`，如下面的代码块所示：
- en: '[PRE58]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: It will specify the file from which the last set of records is read, and can
    be used to rename a records file. Related is the Records Output Path option, and
    we will go over that now.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它将指定从中读取最后一组记录的文件，并可用于重命名记录文件。相关的是Records Output Path选项，我们现在将对其进行讨论。
- en: Records Output Path
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录输出路径
- en: 'Records Output Path is a **string** that specifies where the records should
    be written. The following code example shows how you might use this option in
    combination with `recordsInputPath` when renaming a records file. We will use `webpack.config.js`
    to do this:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: Records Output Path是一个**字符串**，用于指定记录应写入的位置。以下代码示例显示了如何在重命名记录文件时结合使用此选项与`recordsInputPath`。我们将使用`webpack.config.js`来完成这个操作：
- en: '[PRE59]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The preceding code will set the location where records are written. If it's
    an input record, it would be written to `__dirname/records.json`. If it's an output
    record, it will be written to `__dirname/newRecords.json`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将设置记录写入的位置。如果是输入记录，它将被写入`__dirname/records.json`。如果是输出记录，它将被写入`__dirname/newRecords.json`。
- en: The next option we need to discuss is the Name option.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要讨论的下一个选项是Name选项。
- en: Name
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 名称
- en: 'The **Name** option is expressed as a **string** and denotes the name of the
    configuration. It should be used when loading multiple configurations. The following
    example shows code that should form part of the `webpack.config.js` file:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '**Name**选项表示为**字符串**，表示配置的名称。在加载多个配置时应使用它。以下示例显示了应该成为`webpack.config.js`文件的一部分的代码：'
- en: '[PRE60]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The preceding code is useful when using multiple configuration files. The code
    will name this configuration file as `admin-app`. This gives you a long rundown
    of options and how to use them. Let's now take a look at what we have covered
    throughout this chapter.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用多个配置文件时，上述代码非常有用。该代码将将此配置文件命名为`admin-app`。这为您提供了一份选项的详细清单以及如何使用它们。现在让我们回顾一下本章中涵盖的内容。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has followed the practices of configuration files, asset management,
    and options. This chapter began by taking you, the reader, through the various
    capabilities of Webpack and configuration, and exploring how to manage those assets
    and control content accordingly. You were guided through both input and output
    management, and the loading of external content such as fonts and images. From
    there, this chapter took us through options and the difference between the two,
    explaining to the reader what can be achieved using options that can be set up
    simply through configuration.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 本章遵循了配置文件、资产管理和选项的实践。本章开始时带领读者了解了Webpack和配置的各种功能，并探讨了如何管理这些资产并相应地控制内容。您被引导了解了输入和输出管理，以及加载外部内容，如字体和图像。从那里，本章带领我们了解了选项和两者之间的区别，并向读者解释了可以通过简单配置实现的选项可以实现的内容。
- en: You were then guided through common option methods and how to use them. You
    are now fully versed in options and configurations. You should now know the difference
    between the two and the best methods to adopt, given any number of possibilities
    that would require either technique.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将通过常见的选项方法以及如何使用它们进行了指导。您现在已经完全了解了选项和配置。您现在应该知道两者之间的区别以及采用的最佳方法，无论可能需要哪种技术。
- en: In the next chapter, we will pry into the world of APIs' loaders and plugins.
    These features of Webpack expound the capabilities of the platform, springboarding
    from configurations, and options.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究API的加载器和插件世界。Webpack的这些功能阐述了平台的能力，从配置和选项中跳跃出来。
- en: You will learn the difference between loaders and plugins, and the essential
    nature of loaders to use languages and scripts that are not supported by default.
    Much of these loaders are supplied by third-party developers, so plugins fill
    gaps in capability where a loader cannot be used—and vice versa.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解加载器和插件之间的区别，以及加载器使用默认不支持的语言和脚本的基本性质。许多这些加载器是由第三方开发人员提供的，因此插件填补了加载器无法使用的功能差距，反之亦然。
- en: The similar topic of APIs will then be expanded upon. APIs are essentially used
    to connect an application to remote applications on a network. This gives them
    a similar characteristic to loaders, and they are often used where a native script
    is not available.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将扩展API的类似主题。API基本上用于将应用程序连接到网络上的远程应用程序。这使它们具有与加载器类似的特征，并且它们经常用于本机脚本不可用的地方。
- en: Questions
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'To assist in your learning, here are a set of questions on the topics covered
    in this chapter (you will find the answers in the back matter of this guide):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你学习，这里有一组关于本章涵盖的主题的问题（你会在本指南的后面找到答案）：
- en: What is the difference in Webpack 5 between configurations and options?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack 5中配置和选项的区别是什么？
- en: What is a config flag?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置标志是什么？
- en: Which loader is required for loading images into Webpack projects?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载图像到Webpack项目需要哪个加载器？
- en: What type of data file does Webpack allow the import of without the use of a
    loader?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack允许导入哪种类型的数据文件而不使用加载器？
- en: What does Webpack's manifest record indicate?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Webpack的清单记录表示什么？
- en: What does the Bail option do?
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bail选项是做什么的？
- en: What does the Parallelism option do?
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行选项是做什么的？
- en: What does the Records Input Path option do?
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Records Input Path选项是做什么的？
- en: What will setting AMD to `false` do?
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将AMD设置为`false`会做什么？
- en: What is compiling?
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是编译？
