["```kt\n    interface Player { // 1 \n        fun playGame() \n    } \n\n    class RpgGamePlayer(val enemy: String) : Player { \n        override fun playGame() { \n            println(\"Killing $enemy\") \n        } \n    } \n\n    class WitcherPlayer(enemy: String) : Player { \n        val player = RpgGamePlayer(enemy) // 2 \n\n        override fun playGame() { \n            player.playGame() // 3 \n        } \n    } \n\n    // Usage \n    RpgGamePlayer(\"monsters\").playGame() // Prints: Killing monsters \n    WitcherPlayer(\"monsters\").playGame() // Prints: Killing monsters \n```", "```kt\n    class WitcherPlayer() : RpgGamePlayer() \n```", "```kt\n     class WitcherPlayer(enemy: String) : Player { \n         val player = RpgGamePlayer(enemy)    \n         override fun playGame() { \n             player.playGame() \n         } \n     } \n\n     class WitcherPlayer() : RpgGamePlayer() \n```", "```kt\n    class WitcherPlayer(enemy: String) : Player by RpgGamePlayer(enemy) {} \n```", "```kt\n    class WitcherPlayer(player: Player) : Player by player \n```", "```kt\n    class WitcherPlayer(val player: Player) : Player by player \n```", "```kt\n    val d = RpgGamePlayer(10) \n    class WitcherPlayer(a: Player) : Player by d \n```", "```kt\n    interface Player { \n        fun playGame() \n    } \n\n    interface GameMaker { // 1 \n        fun developGame() \n    } \n\n    class WitcherPlayer(val enemy: String) : Player { \n        override fun playGame() { \n            print(\"Killin $enemy! \") \n        } \n    } \n\n    class WitcherCreator(val gameName: String) : GameMaker{ \n        override fun developGame() { \n            println(\"Makin $gameName! \") \n        } \n    } \n\n    class WitcherPassionate : \n        Player by WitcherPlayer(\"monsters\"), \n        GameMaker by WitcherCreator(\"Witcher 3\") { \n\n        fun fulfillYourDestiny() { \n            playGame() \n            developGame() \n        } \n    } \n\n    // Usage \n    WitcherPassionate().fulfillYourDestiny() // Killin monsters! Makin Witcher 3! \n```", "```kt\n    // Java \n    FileInputStream fis = new FileInputStream(\"/someFile.gz\"); // 1 \n    BufferedInputStream bis = new BufferedInputStream(fis); // 2 \n    GzipInputStream gis = new GzipInputStream(bis); // 3 \n    ObjectInputStream ois = new ObjectInputStream(gis); // 4 \n    SomeObject someObject = (SomeObject) ois.readObject(); // 5 \n```", "```kt\nclass ZeroElementListDecorator(val arrayAdapter: ListAdapter) : \n    ListAdapter by arrayAdapter { \n  override fun getCount(): Int = arrayAdapter.count + 1 \n  override fun getItem(position: Int): Any? = when { \n      position == 0 -> null \n      else -> arrayAdapter.getItem(position - 1) \n  } \n\n  override fun getView(position: Int, convertView: View?,parent: \n\nViewGroup): View = when { \n    position == 0 -> parent.context.inflator\n\n        .inflate(R.layout.null_element_layout, parent, false) \n    else -> arrayAdapter.getView(position - 1, convertView, parent) \n  } \n} \n\noverride fun getItemId(position: Int): Long = when { \n  position == 0 -> 0 \n  else -> arrayAdapter.getItemId(position - 1) \n} \n```", "```kt\n    val Context.inflater: LayoutInflater \n        get() = LayoutInflater.from(this) \n```", "```kt\n    val arrayList = findViewById(R.id.list) as ListView \n    val list = listOf(\"A\", \"B\", \"C\") \n    val arrayAdapter = ArrayAdapter(this, \n\n          android.R.layout.simple_list_item_1, list) \n    arrayList.adapter = ZeroElementListDecorator(arrayAdapter) \n```", "```kt\n    class User(val name: String, val surname: String) \n\n    var user: User by UserDelegate() // 1 \n\n    println(user.name) \n    user = User(\"Marcin\",\"Moskala\")\n```", "```kt\n    var p$delegate = UserDelegate() \n    var user: User \n    get() = p$delegate.getValue(this, ::user) \n    set(value) { \n        p$delegate.setValue(this, ::user, value) \n    } \n```", "```kt\nclass UserDelegate { \n    operator fun getValue(thisRef: Any?, property: KProperty<*>): \n\n          User = readUserFromFile() \n\n    operator fun setValue(thisRef: Any?, property: KProperty<*>, \n\n          user:User) { \n        saveUserToFile(user) \n    } \n    //... \n} \n```", "```kt\nclass UserDelegate { \n\n    operator fun getValue(thisRef: Any?, property: KProperty<*>):\n\n        User = readUserFromFile() \n} \n```", "```kt\nclass UserDelegate { \n\n    operator fun getValue(thisRef: Activity, property: KProperty<*>): \n\n          User = thisRef.intent\n\n          .getParcelableExtra(\"com.example.UserKey\") \n} \n```", "```kt\n    var a by SomeDelegate() // 1 \n\n    fun someTopLevelFun() { \n        var b by SomeDelegate() // 2 \n    } \n\n    class SomeClass() { \n        var c by SomeDelegate() // 3 \n\n        fun someMethod() { \n            val d by SomeDelegate() // 4 \n        } \n    } \n```", "```kt\n    private var _someProperty: SomeType? = null \n    private val somePropertyLock = Any() \n    val someProperty: SomeType \n    get() { \n        synchronized(somePropertyLock) { \n            if (_someProperty == null) { \n                _someProperty = SomeType() \n            } \n            return _someProperty!! \n        } \n    } \n```", "```kt\n    val someProperty by lazy { SomeType() } \n```", "```kt\n    public fun <T> lazy(initializer: () -> T): \n\n          Lazy<T> =  SynchronizedLazyImpl(initializer) \n```", "```kt\n//Java \npublic class MainActivity extends Activity { \n\n    TextView questionLabelView \n    EditText answerLabelView \n    Button confirmButtonView \n\n    @Override \n    public void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_main); \n\n        questionLabelView = findViewById<TextView>\n\n              (R.id.main_question_label);    \n        answerLabelView   = findViewById<EditText>\n\n              (R.id.main_answer_label);    \n        confirmButtonView = findViewById<Button>\n\n              (R.id.main_button_confirm);      \n    } \n} \n```", "```kt\nclass MainActivity : Activity() { \n\n    var questionLabelView: TextView? = null \n    var answerLabelView: TextView? = null \n    var confirmButtonView: Button? = null \n\n    override fun onCreate(savedInstanceState: Bundle) { \n        super.onCreate(savedInstanceState) \n        setContentView(R.layout.main_activity) \n\n        questionLabelView = findViewById<TextView>\n\n              (R.id.main_question_label)   \n\n        answerLabelView = findViewById<TextView>\n\n              (R.id.main_answer_label)\n\n        confirmButtonView = findViewById<Button>\n\n              (R.id.main_button_confirm)\n\n    } \n\n}\n```", "```kt\nclass MainActivity : Activity() { \n\n   val questionLabelView: TextView by lazy \n\n{ findViewById(R.id.main_question_label) as TextView } \n   val answerLabelView: TextView by lazy \n\n{ findViewById(R.id.main_answer_label) as TextView } \n   val confirmButtonView: Button by lazy \n\n{ findViewById(R.id.main_button_confirm) as Button } \n\n   override fun onCreate(savedInstanceState: Bundle) { \n     super.onCreate(savedInstanceState) \n     setContentView(R.layout.main_activity) \n   } \n} \n```", "```kt\nfun <T: View> Activity.bindView(viewId: Int) = lazy { findViewById(viewId) as T } \n```", "```kt\nclass MainActivity : Activity() { \n\n  var questionLabelView: TextView by bindView(R.id.main_question_label)  // 1 \n  var answerLabelView: TextView by bindView(R.id.main_answer_label)   // 1 \n  var confirmButtonView: Button by bindView(R.id.main_button_confirm) // 1 \n\n  override fun onCreate(savedInstanceState: Bundle) { \n    super.onCreate(savedInstanceState) \n    setContentView(R.layout.main_activity) \n  } \n} \n```", "```kt\n//Java \nclass SettingsActivity extends Activity { \n\n  final Doctor DOCTOR_KEY = \"doctorKey\" \n  final String TITLE_KEY = \"titleKey\" \n\n  Doctor doctor \n  Address address \n  String title \n\n  public static void start ( Context context, Doctor doctor, \n\n  String title ) { \n    Intent intent = new Intent(context, SettingsActivity.class ) \n    intent.putExtra(DOCTOR_KEY, doctor) \n    intent.putExtra(TITLE_KEY, title) \n    context.startActivity(intent) \n  } \n\n  @Override \n  public void onCreate(Bundle savedInstanceState) { \n    super.onCreate(savedInstanceState); \n    setContentView(R.layout.activity_main); \n\n    doctor = getExtras().getParcelable(DOCTOR_KEY)   \n    title = getExtras().getString(TITLE_KEY)   \n\n    ToastHelper.toast(this, doctor.id) \n    ToastHelper.toast(this, title) \n  } \n} \n```", "```kt\nfun <T : Parcelable> Activity.extra(key: String) = lazy \n\n    { intent.extras.getParcelable<T>(key) } \n\nfun Activity.extraString(key: String) = lazy \n\n    { intent.extras.getString(key) } \n```", "```kt\nclass SettingsActivity : Activity() { \n\n    private val doctor by extra<Doctor>(DOCTOR_KEY) // 1 \n    private val title by extraString(TITLE_KEY) // 1 \n\n    override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        setContentView(R.layout.settings_activity) \n        toast(doctor.id) // 2 \n        toast(title) // 2 \n    } \n\n    companion object { // 3 \n        const val DOCTOR_KEY = \"doctorKey\" \n        const val TITLE_KEY = \"titleKey\" \n\n    fun start(context: Context, doctor: Doctor, title: String) { // 3 \n        ontext.startActivity(getIntent<SettingsActivity>().apply { // 4 \n            putExtra(DOCTOR_KEY, doctor) // 5 \n            putExtra(TITLE_KEY, title) // 5 \n        }) \n    } \n  } \n\n} \n```", "```kt\nfun <T> Activity.bindString(@IdRes id: Int): Lazy<T> = \n\n    lazy { getString(id) } \nfun <T> Activity.bindColour(@IdRes id: Int): Lazy<T> = \n\n    lazy { getColour(id) } \n```", "```kt\n    val presenter by lazy { MainPresenter(this, doctor) } \n```", "```kt\n    var someProperty: SomeType by notNull()\n```", "```kt\n    lateinit var someProperty: SomeType \n```", "```kt\n    public fun <T: Any> notNull(): ReadWriteProperty<Any?, T> =  \n\n        NotNullVar() \n```", "```kt\nprivate class NotNullVar<T: Any>() : ReadWriteProperty<Any?, T> { // 1 \n  private var value: T? = null \n\n  public override fun getValue(thisRef: Any?, \n\n  property: KProperty<*>): T { \n     return value ?: throw IllegalStateException(\"Property \n\n            ${property.name} should be initialized before get.\") // 2 \n  } \n\n  public override fun setValue(thisRef: Any?, \n\n  property: KProperty<*>, value: T) { \n     this.value = value \n  } \n} \n```", "```kt\n    var name: String by Delegates.notNull() \n    println(name) \n\n    // Error: Property name should be initialized before get. \n```", "```kt\n    var name: String by Delegates.observable(\"Empty\"){ \n        property, oldValue, newValue -> // 1 \n        println(\"$oldValue -> $newValue\") // 2 \n    } \n\n    // Usage \n    name = \"Martin\" // 3, \n\n    Prints: Empty -> Martin \n    name = \"Igor\" // 3, \n\n    Prints: Martin -> Igor \n    name = \"Igor\" // 3, 4 \n\n    Prints: Igor -> Igor\n```", "```kt\n    var list: MutableList<Int> by observable(mutableListOf()) \n\n    { _, old, new ->  \n        println(\"List changed from $old to $new\") \n    } \n\n    // Usage \n    list.add(1)  // 1 \n    list =  mutableListOf(2, 3) \n\n    // 2, prints: List changed from [1] to [2, 3] \n```", "```kt\n    class SomeActivity : Activity() { \n\n        var list: List<String> by Delegates.observable(emptyList()) { \n            prop, old, new -> if(old != new) updateListView(new) \n        }   \n        //  ... \n    } \n```", "```kt\nvar list: List<LocalDate> by observable(list) { _, old, new ->  // 1 \n  if(new != old) notifyDataSetChanged() \n} \n```", "```kt\nvar list: List<String> by Delegates.vetoable(emptyList()) \n\n{ _, old, new ->  \n   new.size > old.size \n} \n```", "```kt\nvar list: List<String> by Delegates.vetoable(emptyList()) \n\n{ prop, old, new ->  \n    if(new.size < 3) return@vetoable false // 1 \n    updateListView(new) \n    true // 2 \n} \n```", "```kt\n    listVetoable = listOf(\"A\", \"B\", \"C\") // Update A, B, C \n    println(listVetoable) // Prints: [A, B, C] \n    listVetoable = listOf(\"A\") // Nothing happens \n    println(listVetoable) // Prints: [A, B, C] \n    listVetoable = listOf(\"A\", \"B\", \"C\", \"D\", \"E\")  \n\n    // Prints: [A, B, C, D, E] \n```", "```kt\n    var name: String by Delegates.vetoable(\"\") \n\n    { prop, old, new ->  \n    if (isValid(new)) { \n        showNewData(new) \n        true \n    } else { \n        showNameError() \n        false \n    }\n```", "```kt\n    class User(map: Map<String, Any>) { // 1 \n        val name: String by map \n        val kotlinProgrammer: Boolean by map \n    } \n\n    // Usage \n    val map: Map<String, Any> = mapOf( // 2 \n        \"name\" to \"Marcin\", \n        \"kotlinProgrammer\" to true \n    ) \n    val user = User(map) // 3 \n    println(user.name)  // Prints: Marcin \n    println(user.kotlinProgrammer)  // Prints: true \n```", "```kt\noperator fun <V, V1: V> Map<String, V>.getValue( // 1 \n      thisRef: Any?, // 2 \n      property: KProperty<*>): V1 { // 3 \n          val key = property.name // 4 \n          val value = get(key) \n          if (value == null && !containsKey(key)) { \n              throw NoSuchElementException(\"Key ${property.name} \n\n              is missing in the map.\") \n          } else { \n              return value as V1 // 3 \n          } \n      } \n```", "```kt\nval someProperty by object { // 1 \n    operator fun  getValue(thisRef: Any?, \n\n    property: KProperty<*>) = \"Something\" \n} \nprintln(someProperty) // prints: Something \n```", "```kt\nclass User(val map: MutableMap<String, Any>) { \n    var name: String by map \n    var kotlinProgrammer: Boolean by map \n\n    override fun toString(): String = \"Name: $name, \n\n    Kotlin programmer: $kotlinProgrammer\" \n} \n\n// Usage \nval map = mutableMapOf( // 1 \n    \"name\" to \"Marcin\", \n    \"kotlinProgrammer\" to true \n) \nval user = User(map) \nprintln(user) // prints: Name: Marcin, Kotlin programmer: true \nuser.map.put(\"name\", \"Igor\") // 1  \nprintln(user) // prints: Name: Igor, Kotlin programmer: true \nuser.name = \"Michal\" // 2 \nprintln(user) // prints: Name: Michal, Kotlin programmer: true \n```", "```kt\n    operator fun <V> MutableMap<String, V>.setValue( \n        thisRef: Any?,  \n        property: KProperty<*>,  \n        value: V \n    ) { \n        put(property.name, value) \n    } \n```", "```kt\n    public interface ReadOnlyProperty<in R, out T> { \n        public operator fun getValue(thisRef: R, \n\n            property: KProperty<*>): T \n    } \n\n    public interface ReadWriteProperty<in R, T> { \n       public operator fun getValue(thisRef: R, \n\n           property: KProperty<*>): T \n       public operator fun setValue(thisRef: R, \n\n           property: KProperty<*>, value: T) \n    } \n```", "```kt\nfun <T> mutableLazy(initializer: () -> T): ReadWriteProperty<Any?, T> = MutableLazy<T>(initializer) \n\nprivate class MutableLazy<T>(val initializer: () -> T) : ReadWriteProperty<Any?, T> { \n\n   private var value: T? = null \n   private var initialized = false \n\n   override fun getValue(thisRef: Any?, property: KProperty<*>): T { \n       synchronized(this) { \n           if (!initialized) { \n               value = initializer() \n           } \n           return value as T \n       } \n   } \n\n   override fun setValue(thisRef: Any?, \n\n       property: KProperty<*>, value: T) { \n       synchronized(this) { \n           this.value = value \n           initialized = true \n       } \n   } \n} \n```", "```kt\n    var gameMode : GameMode by MutableLazy { \n        getDefaultGameMode()  \n    } \n\n    var mapConfiguration : MapConfiguration by MutableLazy { \n        getSavedMapConfiguration() \n    } \n\n    var screenResolution : ScreenResolution by MutableLazy { \n        getOptimalScreenResolutionForDevice() \n    } \n```", "```kt\n    val a: Int get() = 1 \n    val b: String get() = \"KOKO\" \n    val c: Int get() = 1 + 100 \n```", "```kt\n    inline operator fun <R> (() -> R).getValue( \n        thisRef: Any?, \n        property: KProperty<*> \n    ): R = invoke() \n```", "```kt\n    val a by { 1 } \n    val b by { \"KOKO\" } \n    val c by { 1 + 100 } \n```", "```kt\n    private val `a$delegate` = { 1 } \n    val a: Int get() = `a$delegate`() \n    private val `b$delegate` = {  \"KOKO\" } \n    val b: String get() = `b$delegate`() \n    private val `c$delegate` = { 1 + 100 } \n    val c: Int get() = `c$delegate`() \n```", "```kt\n    override fun getName(): String { \n        return nameView.text.toString() \n    } \n\n    override fun setName(name: String) { \n        nameView.text = name \n    } \n```", "```kt\n    interface MainView { \n        fun getName(): String \n        fun setName(name: String) \n    } \n```", "```kt\n    override var name: String by bindToTex(R.id.textView) \n```", "```kt\n    interface MainView { \n        var name: String \n    } \n```", "```kt\nfun Activity.bindToText( \n    @IdRes viewId: Int ) = object : \n\n    ReadWriteProperty<Any?, String> { \n\n  val textView by lazy { findViewById<TextView>(viewId) } \n\n  override fun getValue(thisRef: Any?, \n\n      property: KProperty<*>): String { \n      return textView.text.toString() \n  } \n\n  override fun setValue(thisRef: Any?, \n\n      property: KProperty<*>, value: String) { \n      textView.text = value \n  } \n} \n```", "```kt\nfun Activity.bindToVisibility( \n   @IdRes viewId: Int ) = object : \n\n   ReadWriteProperty<Any?, Boolean> { \n\n   val view by lazy { findViewById(viewId) } \n\n  override fun getValue(thisRef: Any?, \n\n      property: KProperty<*>): Boolean { \n      return view.visibility == View.VISIBLE \n  } \n\n  override fun setValue(thisRef: Any?, \n\n      property: KProperty<*>, value: Boolean) { \n      view.visibility = if(value) View.VISIBLE else View.GONE \n  } \n} \n```", "```kt\n    preferences.canEatPie = true \n    if(preferences.canEatPie) { \n        // Code \n    } \n```", "```kt\n    var SharedPreferences.canEatPie: \n\n    Boolean by bindToPreferenceField(true) // 1\n\n    var SharedPreferences.allPieInTheWorld: \n\n    Long by bindToPreferenceField(0,\"AllPieKey\") //2\n```", "```kt\ninline fun <reified T : Any> bindToPreferenceField( \n      default: T?, \n      key: String? = null \n): ReadWriteProperty<SharedPreferences, T> // 1 \n    = bindToPreferenceField(T::class, default, key) \n\nfun <T : Any> bindToPreferenceField( // 2 \n    clazz: KClass<T>, \n    default: T?, \n    key: String? = null \n): ReadWriteProperty<SharedPreferences, T> \n      = PreferenceFieldBinder(clazz, default, key) // 1 \n```", "```kt\ninternal open class PreferenceFieldDelegate<T : Any>( \n      private val clazz: KClass<T>, \n      private val default: T?, \n      private val key: String? \n) : ReadWriteProperty<SharedPreferences, T> { \n\n  override operator fun getValue(thisRef: SharedPreferences, \n\n  property: KProperty<*>): T\n\n    = thisRef.getLong(getValue<T>(clazz, default, getKey(property))\n\n  override fun setValue(thisRef: SharedPreferences, \n\n  property: KProperty<*>, value: T) { \n     thisRef.edit().apply \n\n     { putValue(clazz, value, getKey(property)) }.apply() \n  } \n\n  private fun getKey(property: KProperty<*>) = \n\n  key ?: \"${property.name}Key\" \n} \n```", "```kt\ninternal fun SharedPreferences.Editor.putValue(clazz: KClass<*>, value: Any, key: String) {\n\n   when (clazz.simpleName) {\n\n       \"Long\" -> putLong(key, value as Long)\n\n       \"Int\" -> putInt(key, value as Int)\n\n       \"String\" -> putString(key, value as String?)\n\n       \"Boolean\" -> putBoolean(key, value as Boolean)\n\n       \"Float\" -> putFloat(key, value as Float)\n\n       else -> putString(key, value.toJson())\n\n   }\n\n}\n\ninternal fun <T: Any> SharedPreferences.getValue(clazz: KClass<*>, default: T?, key: String): T = when (clazz.simpleName) {\n\n   \"Long\" -> getLong(key, default as Long)\n\n   \"Int\" -> getInt(key, default as Int)\n\n   \"String\" -> getString(key, default as? String)\n\n   \"Boolean\" -> getBoolean(key, default as Boolean)\n\n   \"Float\" -> getFloat(key, default as Float)\n\n   else -> getString(key, default?.toJson()).fromJson(clazz)\n\n} as T\n```", "```kt\nvar preferencesGson: Gson = GsonBuilder().create()\n\ninternal fun Any.toJson() = preferencesGson.toJson(this)!!\n\ninternal fun <T : Any> String.fromJson(clazz: KClass<T>) = preferencesGson.fromJson(this, clazz.java)\n```", "```kt\nvar SharedPreferences.canEatPie: Boolean by bindToPreferenceField(true) \n```", "```kt\nval 'canEatPie$delegate' = bindToPreferenceField(Boolean::class, true) \n\nfun SharedPreferences.getCanEatPie(): Boolean { \n  return 'canEatPie$delegate'.getValue(this, \n\n  SharedPreferences::canEatPie) \n} \n\nfun SharedPreferences.setCanEatPie(value: Boolean) { \n  'canEatPie$delegate'.setValue(this, SharedPreferences::canEatPie, \n\n   value) \n} \n```", "```kt\nval 'canEatPie$delegate' = bindToPreferenceField(Boolean::class, true) \n\nfun getCanEatPie(receiver: SharedPreferences): Boolean {\n\n   return 'canEatPie$delegate'.getValue(receiver, \n\n   SharedPreferences::canEatPie)\n\n}\n\nfun setCanEatPie(receiver: SharedPreferences, value: Boolean) {\n\n   'canEatPie$delegate'.setValue(receiver, \n\n    SharedPreferences::canEatPie, value)\n\n}\n```", "```kt\n    class A(val i: Int) { \n\n        operator fun provideDelegate( \n            thisRef: Any?, \n            prop: KProperty<*> \n        ) = object: ReadOnlyProperty<Any?, Int> { \n\n            override fun getValue( \n                thisRef: Any?, \n                property: KProperty<*> \n            ) = i \n        } \n    } \n\n    val a by A(1) \n```", "```kt\n    private val a$delegate = A().provideDelegate(this, this::prop) \n    val a: Int \n    get() = a1$delegate.getValue(this, this::prop) \n```", "```kt\n    @get:Arg(optional = true) val name: String by argExtra(defaultName)\n\n    @get:Arg(optional = true) val id: Int by argExtra(defaultId)\n\n    @get:Arg val grade: Char  by argExtra()\n\n    @get:Arg val passing: Boolean  by argExtra() \n```", "```kt\nfun <T> Activity.argExtra(default: T? = null) = ArgValueDelegateProvider(default)\n\nfun <T> Fragment.argExtra(default: T? = null) = ArgValueDelegateProvider(default)\n\nfun <T> android.support.v4.app.Fragment.argExtra(default: T? = null) = \n\n        ValueDelegateProvider(default)\n\nclass ArgValueDelegateProvider<T>(val default: T? = null) {\n\n    operator fun provideDelegate(\n\n        thisRef: Any?,\n\n        prop: KProperty<*>\n\n    ): ReadWriteProperty<Any, T> {\n\n        val annotation = prop.getter.findAnnotation<Arg>()\n\n        when {\n\n            annotation == null -> \n\n            throw Error(ErrorMessages.noAnnotation)\n\n            annotation.optional && !prop.returnType.isMarkedNullable && \n\n            default == null -> \n\n            throw Error(ErrorMessages.optionalValueNeeded)\n\n        }\n\n        return ArgValueDelegate(default)\n\n    }\n\n}\n\ninternal object ErrorMessages {\n\n    const val noAnnotation = \n\n     \"Element getter must be annotated with Arg\"\n\n    const val optionalValueNeeded = \n\n    \"Arguments that are optional and have not-\n\n        nullable type must have defaut value specified\"\n\n}\n```", "```kt\nval a: A? by ArgValueDelegateProvider() \n\n// Throws error during initialization: Element getter must be annotated with Arg\n```"]