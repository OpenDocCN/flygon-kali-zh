["```java\nIn order to manage the book store collection efficiently \nAs a store administrator \nI want to be able to add, update, and remove books \n```", "```java\nGiven user is on the books screen \n```", "```java\nWhen user selects a book \nWhen user clicks the deleteBook button \n```", "```java\nThen book is removed \n```", "```java\nNarrative: \nIn order to manage the book store collection efficiently \nAs a store administrator \nI want to be able to add, update, and remove books \n```", "```java\nScenario: Book details form should have all fields \nScenario: User should be able to create a new book \nScenario: User should be able to display book details \nScenario: User should be able to update book details \nScenario: User should be able to delete a book \n```", "```java\nScenario: Book details form should have all fields \n\nGiven user is on the books screen \nThen field bookId exists \nThen field bookTitle exists \nThen field bookAuthor exists \nThen field bookDescription exists \n```", "```java\nScenario: User should be able to create a new book \n\nGiven user is on the books screen \nWhen user clicks the button newBook \nWhen user sets values to the book form \nWhen user clicks the button saveBook \nThen book is stored \n```", "```java\nScenario: User should be able to display book details \n\nGiven user is on the books screen \nWhen user selects a book \nThen book form contains all data \n\nScenario: User should be able to update book details \n\nGiven user is on the books screen \nWhen user selects a book \nWhen user sets values to the book form \nThen book is stored \n\nScenario: User should be able to delete a book \n\nGiven user is on the books screen \nWhen user selects a book \nWhen user clicks the deleteBook button \nThen book is removed \n```", "```java\npublic class Runner extends JUnitStories { \n\n  @Override \n  public Configuration configuration() { \n    return new MostUsefulConfiguration() \n                  .useStoryReporterBuilder(getReporter()) \n                  .useStoryLoader(new LoadFromURL()); \n  } \n\n  @Override \n  protected List<String> storyPaths() { \n    String path = \"stories/**/*.story\"; \n    return new StoryFinder().findPaths(\n                CodeLocations.codeLocationFromPath(\"\").getFile(),\n                Collections.singletonList(path), \n                new ArrayList<String>(),\n                \"file:\"); \n  }\n\n  @Override \n  public InjectableStepsFactory stepsFactory() {\n    return new InstanceStepsFactory(configuration(), new Steps());\n  } \n\n  private StoryReporterBuilder getReporter() { \n    return new StoryReporterBuilder() \n       .withPathResolver(new FilePrintStreamFactory.ResolveToSimpleName())\n       .withDefaultFormats()\n       .withFormats(Format.CONSOLE, Format.HTML);\n  }\n}\n```", "```java\n$ gradle clean test\n```", "```java\nselenium.click(\"myLink\") \n```", "```java\ndependencies { \n    testCompile 'junit:junit:4.+' \n    testCompile 'org.jbehave:jbehave-core:3.+' \n    testCompile 'com.codeborne:selenide:2.+' \n    testCompile 'com.codeborne:phantomjsdriver:1.+' \n} \n```", "```java\npublic class Steps { \n\n  private WebDriver webDriver; \n\n  @BeforeStory \n  public void beforeStory() { \n    if (webDriver == null) { \n      webDriver = new PhantomJSDriver(); \n      webDriverRunner.setWebDriver(webDriver); \n      webDriver.manage().window().setSize(new Dimension(1024, 768));\n    }\n  }\n} \n```", "```java\n@Given(\"user is on the books screen\") \npublic void givenUserIsOnTheBooksScreen() { \n// PENDING \n} \n```", "```java\nprivate String url = \"http://localhost:9001\"; \n\n@Given(\"user is on the books screen\") \npublic void givenUserIsOnTheBooksScreen() { \n  open(url); \n  $(\"#books\").click(); \n} \n```", "```java\n@Then(\"field bookId exists\") \npublic void thenFieldBookIdExists() { \n  $(\"#books\").shouldBe(visible); \n} \n```", "```java\n@Then(\"field $elementId exists\") \npublic void thenFieldExists(String elementId) { \n  $(\"#\" + elementId).shouldBe(visible); \n} \n```", "```java\n@When(\"user sets values to the book form\")\npublic void whenUserSetsValuesToTheBookForm() {\n  $(\"#bookId\").setValue(\"123\");\n  $(\"#bookTitle\").setValue(\"BDD Assistant\");\n  $(\"#bookAuthor\").setValue(\"Viktor Farcic\");\n  $(\"#bookDescription\")\n     .setValue(\"Open source BDD stories editor and runner\");\n}\n\n@Then(\"book is stored\")\npublic void thenBookIsStored() {\n  $(\"#book123\").shouldBe(present);\n}\n```", "```java\n@When(\"user selects a book\") \npublic void whenUserSelectsABook() { \n  $(\"#book1\").click(); \n} \n\n@Then(\"book form contains all data\") \npublic void thenBookFormContainsAllData() { \n  $(\"#bookId\").shouldHave(value(\"1\")); \n  $(\"#bookTitle\").shouldHave(value(\"TDD for Java Developers\"));\n  $(\"#bookAuthor\").shouldHave(value(\"Viktor Farcic\")); \n  $(\"#bookDescription\").shouldHave(value(\"Cool book!\")); \n} \n```", "```java\n@When(\"user sets new values to the book form\")\npublic void whenUserSetsNewValuesToTheBookForm() {\n  $(\"#bookTitle\").setValue(\"TDD for Java Developers revised\");\n  $(\"#bookAuthor\").setValue(\"Viktor Farcic and Alex Garcia\");\n  $(\"#bookDescription\").setValue(\"Even better book!\"); \n  $(\"#saveBook\").click(); \n} \n\n@Then(\"book is updated\") \npublic void thenBookIsUpdated() { \n  $(\"#book1\").shouldHave(text(\"TDD for Java Developers revised\"));\n  $(\"#book1\").click();\n  $(\"#bookTitle\").shouldHave(value(\"TDD for Java Developers revised\"));\n  $(\"#bookAuthor\").shouldHave(value(\"Viktor Farcic and Alex Garcia\")); \n  $(\"#bookDescription\").shouldHave(value(\"Even better book!\")); \n} \n```", "```java\n@Then(\"book is removed\") \npublic void thenBookIsRemoved() { \n  $(\"#book1\").shouldNotBe(visible); \n} \n```", "```java\n$ vagrant up\n\n```", "```java\n==> default: Importing base box 'ubuntu/trusty64'...\n==> default: Matching MAC address for NAT networking...\n==> default: Checking if box 'ubuntu/trusty64' is up to date...\n...\n==> default: Running provisioner: docker...\n    default: Installing Docker (latest) onto machine...\n    default: Configuring Docker to autostart containers...\n==> default: Starting Docker containers...\n==> default: -- Container: books-fe\n```", "```java\n$ gradle clean test\n```"]