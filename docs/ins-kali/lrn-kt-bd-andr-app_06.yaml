- en: Functions and Lambdas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数和Lambda
- en: In this chapter, we will be bringing work on the TicTacToe game to a close whilst
    learning about functions in Kotlin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将完成TicTacToe游戏的工作，并了解Kotlin中的函数。
- en: 'In the process, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将：
- en: Learn about functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解函数
- en: Learn about higher-order functions and how to use them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解高阶函数及其使用方法
- en: Learn about lambdas and how to use them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解lambda及其使用方法
- en: Functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'In Kotlin, functions are declared in the following format:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，函数的声明格式如下：
- en: '![](img/7a43c5b1-8044-4d90-a432-6aadd65fc9b7.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a43c5b1-8044-4d90-a432-6aadd65fc9b7.png)'
- en: The **return** type and **parameters** are optional. A function with no `return`
    type by default returns a `Unit`. `Unit` is equivalent to `void` in Java.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**return**类型和**parameters**是可选的。没有`return`类型的函数默认返回`Unit`。`Unit`相当于Java中的`void`。'
- en: 'A function with a single expression as its body can eliminate the curly braces
    as well:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其主体的单个表达式的函数也可以省略大括号：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `return` type can also be left out if the type can be inferred by the compiler:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类型可以被编译器推断出来，则`return`类型也可以省略：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数
- en: 'In Kotlin, function parameters are defined using the pascal notation (**parameter_name:Type**).
    Each parameter''s type has to be explicitly declared. Parameters can be assigned
    a default value in the function declaration. This is done using the format: **parameter_name:Type
    = defaultValue**. For example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，使用帕斯卡符号（**parameter_name:Type**）定义函数参数。每个参数的类型都必须明确声明。函数声明中的参数可以被赋予默认值。格式为：**parameter_name:Type
    = defaultValue**。例如：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: When calling the `addStudent()` function, you can leave out the `classRoomNo` parameter.
    For example, `joseph` will have a default `classRoomNo` value of `1`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用`addStudent()`函数时，可以省略`classRoomNo`参数。例如，`joseph`将具有默认的`classRoomNo`值为`1`。
- en: In cases where you do not pass all the parameters to a function, the parameters
    passed have to be preceded by their parameter names.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些情况下，如果没有将所有参数传递给函数，则传递的参数必须在其参数名称之前。
- en: Higher–order functions and lambdas
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶函数和lambda
- en: 'The term higher-order function refers to a function that either takes another
    function as a parameter or returns a function or both. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**高阶函数**指的是一个函数，它要么接受另一个函数作为参数，要么返回一个函数，或者两者兼而有之。例如：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, the `logStudent()` function takes three parameters: `name`, `age`, and
    `createStudent`. `createStudent` is a function that takes a `String` and an `Int`
    as its parameters and returns a `Student` object.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`logStudent()`函数接受三个参数：`name`，`age`和`createStudent`。`createStudent`是一个函数，它接受一个`String`和一个`Int`作为参数，并返回一个`Student`对象。
- en: The `createStudent` function is not declared but passed as an expression to
    the `logStudent()` function. This is called a **lambda expression**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`createStudent`函数未声明，而是作为表达式传递给`logStudent()`函数。这称为**lambda表达式**。'
- en: Lambda expressions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda表达式
- en: A lambda expression is an anonymous function that is not declared but passed
    immediately as an expression.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda表达式是一个匿名函数，它不是声明的，而是立即作为表达式传递的。
- en: 'Let''s go ahead and make use of lambda expressions in our TicTacToe app. Open
    `MainActivity.kt`. In the `startNewGame()` function, replace the following lines
    of code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在TicTacToe应用程序中使用lambda表达式。打开`MainActivity.kt`。在`startNewGame()`函数中，替换以下代码行：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Replace them with this line of code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换它们：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous lines of code, we have an anonymous object that is implementing
    a Java interface that has a single abstract method (`onClick()`). All of this
    can be replaced with a simple lambda expression.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们有一个匿名对象，它实现了一个具有单个抽象方法（`onClick()`）的Java接口。所有这些都可以用一个简单的lambda表达式来替代。
- en: A **Single Abstract Method** (**SAM**), as it is often called, refers to the
    functional method in an interface. The interface typically contains only one abstract
    method that is known as SAM or a functional method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**单个抽象方法**（**SAM**），通常指的是接口中的功能方法。该接口通常只包含一个称为SAM或功能方法的抽象方法。'
- en: 'Now, build and run to see the state of the app:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建并运行以查看应用程序的状态：
- en: '![](img/529b1022-a3fd-4096-896b-e620e549a24c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/529b1022-a3fd-4096-896b-e620e549a24c.png)'
- en: Let's go ahead and make use of all we've learned so far to in order complete
    work on the game.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续利用我们迄今为止学到的所有知识，以便完成游戏的工作。
- en: Android Studio provides a default tool chain that supports most of the JAVA
    8 features, including lambda expressions. It is highly recommended that you use
    the default tool chain and disable all other options such as jackoptions, and
    retrolambda.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一个默认的工具链，支持大多数JAVA 8功能，包括lambda表达式。强烈建议您使用默认的工具链，并禁用所有其他选项，如jackoptions和retrolambda。
- en: Implementing a game status check
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现游戏状态检查
- en: In this section, we will work on functions that will help us figure out the
    winner of our game.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将处理一些函数，以帮助我们找出游戏的赢家。
- en: 'Start by adding the following function to the `MainActivity` class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将以下函数添加到`MainActivity`类中：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This function is used to check whether the game board is full. Here, we go through
    all the cells on the board and return `false` if any of them are empty. If none
    of the cells are empty, we return `true`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于检查游戏板是否已满。在这里，我们遍历棋盘上的所有单元格，如果有任何一个单元格为空，则返回`false`。如果没有一个单元格为空，则返回`true`。
- en: 'Next, add the `isWinner()` method:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加`isWinner()`方法：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, you check whether the character passed is the winner. The character is
    the winner if it appears three times in either a horizontal, vertical or diagonal
    row.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以检查传递的字符是否是赢家。如果字符在水平、垂直或对角线行中出现三次，则该字符是赢家。
- en: 'Now add the `checkGameStatus()` function:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加`checkGameStatus()`函数：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding function makes use of the `isBoardFull()` and `isWinner()` functions
    to determine who the winner of the game is. If neither X nor O has won and the
    board is full, then it's a draw. Show an alert displaying either the winner of
    the game or a message telling the user that the game was a draw.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数利用`isBoardFull()`和`isWinner()`函数来确定游戏的赢家是谁。如果X和O都没有赢，而且棋盘已满，则是平局。显示一个警报，显示游戏的赢家或告诉用户游戏是平局的消息。
- en: Next, add a call to `checkGameStatus()` at the end of the `cellClickListener()` function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`cellClickListener()`函数的末尾添加一个调用`checkGameStatus()`。
- en: 'Build and run:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行：
- en: '![](img/60fca23e-aee9-4834-9797-a9bc33c7a48b.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60fca23e-aee9-4834-9797-a9bc33c7a48b.png)'
- en: 'Lastly, implement the functionality for the **FloatingActionButton**. In the
    `onCreate()` function, replace the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，实现**FloatingActionButton**的功能。在`onCreate()`函数中，将以下内容替换为：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Replace it with:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将其替换为：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Again, build and run. Now, when you click the **FloatingActionButton**, the
    board will be cleared for you to restart the game:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行。现在，当您点击**FloatingActionButton**时，棋盘将被清空，以便您重新开始游戏：
- en: '![](img/4c213cc7-02c2-4256-aac7-5693c4995769.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c213cc7-02c2-4256-aac7-5693c4995769.png)'
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to work with functions and lambdas in Kotlin
    and completed work on our TicTacToe game.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Kotlin中使用函数和lambda，并完成了对我们的TicTacToe游戏的工作。
- en: In the next few chapters, we will work on creating a location-based alarm whilst
    learning to use Google location services and how to perform network calls on Android.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将学习如何在Android上使用Google位置服务以及执行网络调用，同时致力于创建基于位置的闹钟。
