- en: Chapter 8. Overview of High-Performance Numerical Computing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章：高性能数值计算库概述
- en: There are many numerical operations that can be performed in scientific computing
    applications, and non-optimized code or library implementations cause serious
    performance bottlenecks.
  prefs: []
  type: TYPE_NORMAL
  zh: 在科学计算应用中可以执行许多数值运算，并且未经优化的代码或库实现会导致严重的性能瓶颈。
- en: The NumPy library helps to increase the performance of Python programs by using
    its memory layout more efficiently.
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 库通过更有效地使用其内存布局来帮助提高 Python 程序的性能。
- en: One of the most commonly used branches of mathematics in real-world applications
    is linear algebra. Linear algebra is used for computer graphics, cryptography,
    econometrics, machine learning, deep learning, and natural language processing,
    to name but a few of its uses. Having performant matrix and vector operations
    is crucial.
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，最常用的数学分支之一是线性代数。 线性代数用于计算机图形学，密码学，计量经济学，机器学习，深度学习和自然语言处理，仅举几个例子。 具有高效的矩阵和向量运算至关重要。
- en: High-performance, low-level frameworks, such as BLAS, LAPACK, and ATLAS—which
    are part of Netlib's libraries, and are used for dense linear algebra operations—and
    other frameworks, such as Intel MKL, are there for you to use in your programs.
    These libraries are highly performant and accurate in their calculations. You
    can use these libraries by calling them with other high-level programming languages,
    such as Python or C++.
  prefs: []
  type: TYPE_NORMAL
  zh: 高性能，低级框架（例如 BLAS，LAPACK 和 ATLAS）是 Netlib 库的一部分，用于密集的线性代数运算；其他框架（例如英特尔 MKL）也可以在其中使用您的程序。
    这些库在计算中具有很高的性能和准确性。 您可以通过其他高级编程语言（例如 Python 或 C++）调用它们来使用这些库。
- en: When NumPy is linked against different BLAS libraries, you can observe performance
    differences without changing your code and it’s important to understand which
    linkage will better improve the performance.
  prefs: []
  type: TYPE_NORMAL
  zh: 当 NumPy 与不同的 BLAS 库链接时，您可以观察到性能差异而无需更改代码，因此了解哪种链接可以更好地提高性能非常重要。
- en: Let’s have a look at these low-level libraries.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下这些低级库。
- en: BLAS and LAPACK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BLAS 和 LAPACK
- en: '**BLAS** stands for **Basic Linear Algebra Subprograms**, and is a standard
    for dealing with low-level routines for linear algebra operations. Low-level routines
    include operations such as vector and matrix addition/multiplication, linear combinations,
    and so on. BLAS provides three different levels for linear algebra operations:'
  prefs: []
  type: TYPE_NORMAL
  zh: '**BLAS** 代表**基本线性代数子程序**，并且是处理线性代数运算的低级例程的标准。 低级例程包括向量和矩阵加/乘，线性组合等操作。 BLAS
    为线性代数运算提供了三种不同的级别：'
- en: '**BLAS1**: Scalar–vector and vector–vector operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLAS1**：标量向量和向量向量运算'
- en: '**BLAS2**: Matrix–vector operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLAS2**：矩阵向量运算'
- en: '**BLAS3**: Matrix–matrix operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BLAS3**：矩阵矩阵运算'
- en: '**LAPACK** stands for **Linear Algebra Package**, and contains higher-level
    operations. LAPACK provides routines for matrix factorizations—such as LU, Cholesky,
    and QR—and for solving eigenvalue problems. LAPACK mostly depends on BLAS routines.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**LAPACK** 代表**线性代数软件包**，并包含更高级的操作。 LAPACK 提供了用于矩阵分解（例如 LU，Cholesky 和 QR）以及解决特征值问题的例程。
    LAPACK 主要取决于 BLAS 例程。'
- en: ATLAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ATLAS
- en: There are many optimized BLAS implementations. **ATLAS** stands for **Automatically
    Tuned Linear Algebra Software**, and is a platform-independent project that generates
    an optimized BLAS implementation.
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多优化的 BLAS 实现。 **ATLAS** 代表**自动调谐线性代数软件**，并且是与平台无关的项目，可以生成优化的 BLAS 实现。
- en: Intel Math Kernel Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英特尔 MKL
- en: Intel MKL optimizes BLAS for Intel processors. There are improved routines and
    functions such as Level 1, 2 and 3 BLAS, LAPACK routines, solvers, FFT functions,
    other math and statistical functions. These improved routines and functions benefit
    from improvements like shared memory multiprocessing and they are used to accelerate
    scientific python libraries such as NumPy and SciPy in distributions such as Anaconda
    Distribution. If you look at its release notes ([https://software.intel.com/en-us/articles/intel-math-kernel-library-release-notes-and-new-features](https://software.intel.com/en-us/articles/intel-math-kernel-library-release-notes-and-new-features)),
    you can see several important improvements were made with every release, such
    as the improved performance of LAPACK functions.
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔 MKL 为英特尔处理器优化了 BLAS。 改进了例程和函数，例如 1 级，2 级和 3 级 BLAS，LAPACK 例程，求解器，FFT 函数，其他数学和统计函数。
    这些改进的例程和函数得益于共享内存多处理等改进，它们可用于在发行版（如 Anaconda 发行版）中加速科学 Python 库（例如 NumPy 和 SciPy）。
    如果您查看其发行说明（[`software.intel.com/en-us/articles/intel-math-kernel-library-release-notes-and-new-features`](https://software.intel.com/en-us/articles/intel-math-kernel-library-release-notes-and-new-features)），
    可以看到每个发行版都进行了一些重要的改进，例如 LAPACK 函数的性能得到了提高。
- en: OpenBLAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenBLAS
- en: '**OpenBLAS** is another optimized BLAS library, and it provides BLAS3-level
    optimizations for different configurations. Authors reported performance enhancements and
    improvements over BLAS that were comparable with Intel MKL''s quality of performance.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenBLAS** 是另一个优化的 BLAS 库，它为不同的配置提供了 BLAS3 级的优化。 作者报告说，与 BLAS 相比，性能增强和改进可与英特尔
    MKL 的性能相媲美。'
- en: Configuring NumPy with low-level libraries using AWS EC2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AWS EC2 和底层库配置 NumPy
- en: 'Log in to AWS. If you don''t have an account, create one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 AWS。 如果您没有帐户，请创建一个：
- en: '![](img/fa6d4e79-b597-418d-8ecc-c8c3e8dbec9d.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa6d4e79-b597-418d-8ecc-c8c3e8dbec9d.png)'
- en: Select EC2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 EC2 。
- en: 'Click Launch Instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击启动实例：
- en: '![](img/dfeff87d-2771-46bd-bd75-c53c73d0ce97.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfeff87d-2771-46bd-bd75-c53c73d0ce97.png)'
- en: 'Select **Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-db710fa3**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-db710fa3`：
- en: '**![](img/b4cda929-039a-4c1c-973e-666143148257.png)**'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4cda929-039a-4c1c-973e-666143148257.png)'
- en: 'Select the **t2.micro** instance type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`t2.micro`实例类型：
- en: '![](img/33e941fa-99d4-43e7-b93b-373f7cb00455.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33e941fa-99d4-43e7-b93b-373f7cb00455.png)'
- en: 'Click **Review and Launch**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**启动**：
- en: '![](img/151e7c10-aef3-40da-923a-b7f7171dbbf5.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/151e7c10-aef3-40da-923a-b7f7171dbbf5.png)'
- en: Click **Launch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**启动**。
- en: 'Select **Create a new key pair**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建一个新的密钥对**：
- en: '![](img/dc5df025-8ebf-4109-a0d9-5fc104043bc6.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc5df025-8ebf-4109-a0d9-5fc104043bc6.png)'
- en: 'Give it a name and click **Launch Instances**.It will take a while for it to
    run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它命名，然后单击**启动实例**。 它需要一些时间才能运行：
- en: '![](img/41e72212-d346-45d0-bf0d-6d42645393da.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41e72212-d346-45d0-bf0d-6d42645393da.png)'
- en: 'Once its status is `running`, click the Instance ID, which in this case is
    `i-00ccaeca61a24e042`. Then select the instance and click `Connect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦其状态为`running`，点击实例 ID ，在这种情况下为`i-00ccaeca61a24e042`。 然后选择实例并单击`Connect`：
- en: '![](img/d207b825-c27d-4e72-817c-e7256a846d7e.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d207b825-c27d-4e72-817c-e7256a846d7e.png)'
- en: 'It will then show you the following window with some useful information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它将向您显示以下窗口，其中包含一些有用的信息：
- en: '![](img/70613b58-c8f1-4488-a96e-a852ccf32900.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70613b58-c8f1-4488-a96e-a852ccf32900.png)'
- en: 'Open your terminal and navigate to the folder where you saved your generated
    key. The key name in this example is `aws_oregon`. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，然后导航到保存所生成密钥的文件夹。 在此示例中，键名称为`aws_oregon`。 运行以下命令：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, copy the line in the example section of the previous window and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在上一个窗口的示例部分中复制该行并运行它：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Type `yes` in answer to the first question to add it to the known hosts, and
    it will connect to your instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个问题的答案中输入`yes`将其添加到已知主机中，它将连接到您的实例：
- en: '![](img/2f4724ca-92f2-4ea2-badd-edbd3a32513a.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f4724ca-92f2-4ea2-badd-edbd3a32513a.png)'
- en: 'The first thing that you need to do is update and upgrade the preinstalled
    packages by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是通过运行以下命令来更新和升级预安装的软件包：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `sudo` phrase gives you the necessary rights to update and upgrade, since
    changes in software packages may negatively affect the system, and not everybody
    should be able to authorize them. You can think of `apt-get` as the package manager
    for Ubuntu.
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`短语为您提供了更新和升级的必要权利，因为软件包的更改可能会对系统产生负面影响，并非所有人都可以对其进行授权。 您可以将`apt-get`视为
    Ubuntu 的软件包管理器。'
- en: You can create many virtual environments with links to different low-level libraries,
    however here you will start with a new provisioned instance every time you are
    configuring NumPy with new low-level library. This will give you an idea about
    the configuration process which will later allow you to set-up your virtual environments
    with ease.
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建许多虚拟环境，并链接到不同的低级库，但是，每次使用新的低级库配置 NumPy 时，您都将从一个新的预配实例开始。 这将为您提供有关配置过程的想法，以后使您可以轻松地设置虚拟环境。
- en: Installing BLAS and LAPACK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 BLAS 和 LAPACK
- en: In order to set up your development environment, you need to install the required
    packages, such as the compilers, libraries, and other necessary pieces after running
    following commands,
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置您的开发环境，您需要在运行以下命令后安装所需的软件包，例如编译器，库和其他必要的部分，
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For this configuration, you are lucky as you can run the following command
    to install Python''s SciPy package, and it will install all the required packages,
    including NumPy, Basic Linear Algebra Subprograms (`libblas3`), and Linear Algebra
    Package (`liblapack3`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此配置，很幸运，因为您可以运行以下命令来安装 Python 的 SciPy 软件包，它将安装所有必需的软件包，包括 NumPy，基本线性代数子程序（`libblas3`）和线性代数软件包（`liblapack3`）：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Console output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出：
- en: '![](img/0105fda2-1f28-41df-9f3b-3ae8857ce411.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0105fda2-1f28-41df-9f3b-3ae8857ce411.png)'
- en: 'Type `Y` and press *Enter* to continue. Once the installation is complete,
    run the following command to open the `python3` interpreter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Y`并按`Enter`继续。 安装完成后，运行以下命令以打开`python3`解释器：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Starting Python console:'
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Python 控制台：
- en: '![](img/782fd1c3-0c4d-40da-9c2f-456bf1011bb2.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/782fd1c3-0c4d-40da-9c2f-456bf1011bb2.png)'
- en: 'Import `numpy` and use the `show_config` method to see NumPy''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`numpy`并使用`show_config`方法查看 NumPy 的配置：
- en: 'Console output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出：
- en: '![](img/961410ae-8b32-4f4c-894c-736a7e2a020b.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/961410ae-8b32-4f4c-894c-736a7e2a020b.png)'
- en: 'As the BLAS and LAPACK libraries were available when NumPy was installing,
    it used them to build the library. You can see them in `lapack_info` and `blas_info`;
    otherwise, you won''t see them in the output, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于在安装 NumPy 时可以使用 BLAS 和 LAPACK 库，因此它使用它们来构建库。 您可以在`lapack_info`和`blas_info`中看到它们；
    否则，您将不会在输出中看到它们，如以下屏幕截图所示：
- en: '![](img/f5e7565b-79d8-4432-b04a-7d19c130a123.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5e7565b-79d8-4432-b04a-7d19c130a123.png)'
- en: 'If you are working in macOS, you will be able to utilize the Accelerate/vecLib
    framework. The following command will output the accelerator options of the macOS
    system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是 MacOS，则可以使用 Accelerate/vecLib 框架。 以下命令将输出 MacOS 系统的加速器选项：
- en: '![](img/f5f87ec3-4393-48fb-8491-3953cbb2a9ef.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5f87ec3-4393-48fb-8491-3953cbb2a9ef.png)'
- en: Installing OpenBLAS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '安装 OpenBLAS'
- en: 'OpenBLAS has a slightly different steps as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'OpenBLAS 的步骤略有不同，如下所示：'
- en: 'Run the commands as follows in previous configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在先前的配置中运行以下命令：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You need to install the build-essential which includes make command and other
    necessary libraries by running following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要通过运行以下命令来安装`build-essential`，其中包括`make`命令和其他必要的库：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a file called `openblas_setup.sh` and paste the following content ([https://github.com/shivaram/matrix-bench/blob/master/build-openblas-ec2-usr-lib.sh](https://github.com/shivaram/matrix-bench/blob/master/build-openblas-ec2-usr-lib.sh)).
    You can find different setup scripts if you search GitHub and you can try the
    one which suits to your needs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`openblas_setup.sh`的文件，然后粘贴以下内容（[`github.com/shivaram/matrix-bench/blob/master/build-openblas-ec2-usr-lib.sh`](https://github.com/shivaram/matrix-bench/blob/master/build-openblas-ec2-usr-lib.sh)）。
    如果您搜索 GitHub，则可以找到不同的设置脚本，并且可以尝试一种满足您需要的脚本：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Save this file and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存此文件并运行以下命令：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installation is done, you can install numpy and scipy as following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以按以下方式安装 NumPy 和 SciPy：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you can check the NumPy config as you did previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以像以前一样检查 NumPy 配置：
- en: '![](img/efaae3d9-8ade-4949-b31b-895030db9223.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efaae3d9-8ade-4949-b31b-895030db9223.png)'
- en: Installing Intel MKL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '安装英特尔 MKL'
- en: In order to build NumPy and SciPy against Intel MKL, please follow these instructions
  prefs: []
  type: TYPE_NORMAL
  zh: '为了针对英特尔 MKL 构建 NumPy 和 SciPy，请按照以下说明进行操作'
- en: 'Run the commands as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You need to install Anaconda distribution since Anaconda installation comes
    with Intel MKL. First download the Anaconda with following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要安装 Anaconda 发行版，因为 Anaconda 的安装随英特尔 MKL 一起提供。 首先使用以下命令下载 Anaconda：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When installation is done, `cd` into `anaconda3/bin` and run `python`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，将`cd`插入`anaconda3/bin`并运行`python`：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can check the `numpy` config as previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以像以前一样检查`numpy`配置：
- en: '![](img/c8d03c39-881f-422a-b592-34a20dd532ea.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8d03c39-881f-422a-b592-34a20dd532ea.png)'
- en: 'Installing ATLAS'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 ATLAS
- en: In order to build NumPy against ATLAS, please follow these instructions
  prefs: []
  type: TYPE_NORMAL
  zh: 为了针对 ATLAS 构建 NumPy，请按照以下说明进行操作
- en: 'Run the commands as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You need to install the `build-essential` which includes make command and other
    necessary libraries by running following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要通过运行以下命令来安装`build-essential`，其中包括`make`命令和其他必要的库：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You then need to install `atlas`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要安装`atlas`：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can now install `pip` and `numpy` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以按以下方式安装`pip`和`numpy`：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inside `site.cfg`, you should comment out atlas lines and set it to your atlas
    installation as following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在`site.cfg`内，您应注释掉地图集行，并将其设置为地图集安装，如下所示：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then run:'
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once installation is complete, install `scipy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，安装`scipy`：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then return to you home directory, start `python` interpreter and check `numpy`
    config, which will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 然后返回到您的主目录，启动`python`解释器并检查`numpy`配置，这将为您提供以下输出：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You have covered the configuration for all the low-level libraries mentioned.
    Time to understand the compute-intensive tasks for the benchmark.
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经介绍了上述所有低级库的配置。 是时候了解基准测试的计算密集型任务了。
- en: Compute-intensive tasks for benchmarking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于基准测试的计算密集型任务
- en: Now, you'll be able to benchmark NumPy performance using different configurations,
    such as with or without BLAS/LAPACK, OpenBLAS, ATLAS, and Intel MKL. Let's review
    what you are going to compute for benchmarks.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将能够使用不同的配置（例如是否使用 BLAS/LAPACK，OpenBLAS，ATLAS 和英特尔 MKL）对 NumPy 性能进行基准测试。
    让我们回顾一下要为基准计算的内容。
- en: Matrix decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵分解
- en: '**Matrix decomposition**, or **factorization methods**, involves calculating
    the constituents of a matrix so that they can be used to simplify more demanding
    matrix operations. In practice, this means breaking the matrix you have into more
    than one matrix so that, when you calculate the product of these smaller matrices,
    you get your original matrix back. Some examples of matrix decomposition methods
    are **singular-value decomposition** (**SVD**), eigenvalue decomposition, Cholesky
    decomposition, **lower–upper** (**LU**), and QR decomposition.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**矩阵分解**或**分解方法**涉及计算矩阵的组成部分，以便可以使用它们简化要求更高的矩阵操作。 在实践中，这意味着将您拥有的矩阵分解为多个矩阵，这样，当您计算这些较小矩阵的乘积时，您将获得原始矩阵。
    矩阵分解方法的一些示例是**奇异值分解**（**SVD**），特征值分解，乔莱斯基分解，**下上**（**LU**）和 QR 分解。'
- en: Singular-value decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奇异值分解
- en: '**SVD** is one of the most useful tools in linear algebra. Beltrami and Jordan
    published several papers on its use. SVD is used in a wide variety of applications,
    such as computer vision and signal processing.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVD** 是线性代数中最有用的工具之一。 贝尔特拉（Beltrami）和乔丹（Jordan）发表了有关其使用的几篇论文。 SVD 用于各种应用，例如计算机视觉和信号处理。'
- en: If you have a square or rectangular matrix (*M*), you can decompose it into
    matrix (*U*), matrix (*V*) (using the transpose of the matrix in the calculation),
    and the singular value (*d*).
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您具有正方形或矩形矩阵（`M`），则可以将其分解为矩阵（`U`），矩阵（`V`）（计算中使用矩阵转置）和奇异值（`d`）。
- en: 'Your ultimate formula will look like the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您的最终公式将如下所示：
- en: '![](img/5d580481-4701-4532-a958-660363f75c69.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d580481-4701-4532-a958-660363f75c69.png)'
- en: 'The following is an illustration of singular-value decomposition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是奇异值分解的说明：
- en: '![](img/7afa6d97-21e5-40bf-8138-43a5c61c5f69.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7afa6d97-21e5-40bf-8138-43a5c61c5f69.png)'
- en: A simple data-reduction method would be to exclude parts of this formula where
    *d* is small enough to make that part negligible.
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的数据精简方法是排除该公式中`d`小到可以忽略不计的部分。
- en: 'Let''s see how this is implemented using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`numpy`来实现：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Cholesky decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 乔莱斯基（Cholesky）分解
- en: 'If you have a square matrix, you can also apply Cholesky decomposition, where
    you decompose a matrix (*M*) into two triangular matrices (*U* and *U^T*). Cholesky
    decomposition helps you to simplify computational complexity. It can be summed
    up in the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个正方形矩阵，也可以应用乔莱斯基分解，将一个矩阵（`M`）分解为两个三角形矩阵（`U`和`U^T`）。乔莱斯基分解可帮助您简化计算复杂性。
    可以将其总结为以下公式：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following is an illustration of Cholesky decomposition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是乔莱斯基分解的说明：
- en: '![](img/6344c2d0-3b1f-442b-bdd4-302236b86deb.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6344c2d0-3b1f-442b-bdd4-302236b86deb.png)'
- en: 'Let''s see how it''s implemented using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`numpy`实现它：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lower-upper decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LU 分解
- en: 'Similar to Cholesky decomposition, LU decomposition decomposes a matrix (*M*)
    into **lower** (***L***) and **upper** (***U***) triangular matrices. This also
    helps us to simplify computationally intensive algebra. It can be summed up in
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 与乔莱斯基分解类似，LU 分解将矩阵（`M`）分解为**下**（`L`）和**上**（`U`）三角矩阵。 这也有助于我们简化计算密集型代数。
    可以将其总结为以下公式：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following is an illustration of LU decomposition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 LU 分解的说明：
- en: '![](img/9a2c2918-c0a7-4f19-abce-bbe8a14b3fa1.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a2c2918-c0a7-4f19-abce-bbe8a14b3fa1.png)'
- en: 'Let''s see how it''s implemented using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`numpy`实现它：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Eigenvalue decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征值分解
- en: '**Eigenvalue decomposition** is also a decomposition technique that applies
    to square matrices. When you decompose a square matrix (*M*) using eigenvalue
    decomposition, you will get three matrices. One of these matrices (*Q*) contains
    eigenvectors in columns, another matrix (*L*) contains eigenvalues in its diagonal,
    and the last matrix is a transpose of the matrix of eigenvectors (*Q^(-1)*).'
  prefs: []
  type: TYPE_NORMAL
  zh: '**特征值分解**也是一种适用于平方矩阵的分解技术。 使用特征值分解分解方阵（`M`）时，将得到三个矩阵。 这些矩阵之一（`Q`）在列中包含特征向量，另一个矩阵（`L`）在对角线中包含特征值，最后一个矩阵是特征向量矩阵（`Q^(-1)`）。'
- en: 'This can be summed up in the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将其总结为以下公式：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Eigenvalue decomposition will give you the matrices' eigenvalues and eigenvectors.
  prefs: []
  type: TYPE_NORMAL
  zh: 特征值分解将为您提供矩阵的特征值和特征向量。
- en: 'The following is an illustration of eigenvalue decomposition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是特征值分解的说明：
- en: '![](img/cb9a2709-fbfc-4fc0-be93-10fcbf54b757.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb9a2709-fbfc-4fc0-be93-10fcbf54b757.png)'
- en: 'Let''s see how it''s implemented using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`numpy`实现它：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: QR decomposition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QR 分解
- en: 'You can decompose a square or rectangular matrix (*M*) into an orthogonal matrix
    (*Q*) and an upper-triangular matrix (*R*) by applying QR decomposition. This
    can be expressed in the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过应用 QR 分解将正方形或矩形矩阵（`M`）分解为正交矩阵（`Q`）和上三角矩阵（`R`）。 可以用以下公式表示：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is an illustration of QR decomposition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 QR 分解的说明：
- en: '![](img/ac3190aa-d5a4-449c-8b17-43ab32e841da.png)'
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac3190aa-d5a4-449c-8b17-43ab32e841da.png)'
- en: 'Let''s see how it''s implemented using `numpy`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用`numpy`实现它：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Working with sparse linear systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理稀疏线性系统
- en: 'You won''t always work with dense matrices, and when you need to work with
    sparse matrices, there are libraries that will help you to optimize sparse matrix
    operations. Even though these might not have Python APIs, you may need to utilize
    them by using other programming languages, such as C and C++:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不会总是使用密集矩阵，并且当您需要使用稀疏矩阵时，有些库将帮助您优化稀疏矩阵运算。 即使这些可能没有 Python API，您仍可能需要通过使用其他编程语言来使用它们，例如
    C 和 C++：
- en: '**Hypre**: Contains preconditioners and solvers to deal with sparse linear
    systems of equations utilizing parallel implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hypre**：包含预处理器和求解器，以利用并行实现来处理稀疏线性方程组。'
- en: '**SuperLU**: Deals with large, sparse, nonsymmetric systems of linear equations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SuperLU**：处理大型，稀疏，不对称的线性方程组。'
- en: '**UMFPACK**: Solves sparse linear systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UMFPACK**：解决稀疏线性方程组。'
- en: '**CUSP**: Open source library for sparse linear algebra and graph computations
    with parallel implementations. By using CUSP, you can access computational resources
    provided by NVIDIA GPUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CUSP**：带有并行实现的稀疏线性代数和图形计算的开源库。 通过使用 CUSP，您可以访问 NVIDIA GPU 提供的计算资源。'
- en: '**cuSPARSE**: Contains linear algebra subroutines that are used to handle sparse
    matrices. As with CUSP, you can access computational resources provided by Nvidia
    GPUs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cuSPARSE**：包含用于处理稀疏矩阵的线性代数子例程。 与 CUSP 一样，您可以访问 Nvidia GPU 提供的计算资源。'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have explored various low-level libraries that can be paired
    with NumPy, as well as their configuration. We have deliberately run through the
    EC2 provision so that you can get familiar with basic Linux command line operations.
    You have also investigated various compute-intensive, numerical, linear algebra
    operations that you will use to benchmark different configurations in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探索了可以与 NumPy 配对的各种低级库及其配置。 我们特意运行了 EC2 条款，以便您熟悉基本的 Linux 命令行操作。 您还研究了各种计算密集型，数值，线性代数运算，这些运算将在下一章中用作基准测试不同的配置。
- en: In the next chapter, we will create a benchmark python script to be run on each
    configuration. You will be able to see the performance metrics for different linear
    algebra operations and different sizes of matrices
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个基准 Python 脚本，以在每种配置上运行。 您将能够查看不同线性代数运算和不同矩阵大小的性能指标
