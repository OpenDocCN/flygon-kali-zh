["```\npackage pl.finsys.jaxrs_example \n@ApplicationPath(\"/myApp\") \npublic class MyApplication extends Application { \n   @Override \n   public Set<Class<?>> getClasses() { \n      final Set<Class<?>> classes = new HashSet<>(); \n      classes.add(MyBeansExposure.class); \n      return classes; \n   } \n} \n```", "```\npackage pl.finsys.jaxrs_example \nimport javax.annotation.PostConstruct; \nimport javax.enterprise.context.ApplicationScoped; \nimport javax.ws.rs.DELETE; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.POST; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.PathParam; \nimport javax.ws.rs.container.ResourceContext; \nimport javax.ws.rs.core.Context; \nimport javax.ws.rs.core.Response; \n\n@ApplicationScoped \n@Path(\"beans\") \npublic class MyBeansExposure { \n    @Context ResourceContext rc; \n    private Map<String, Bean> myBeans; \n\n    @GET \n    @Produces(\"application/json\") \n    public Collection<Bean> allBeans() { \n        return Response.status(200).entity(myBeans.values()).build(); \n    } \n\n    @GET \n    @Produces(\"application/json\") \n    @Path(\"{id}\") \n    public Bean singleBean(@PathParam(\"id\") String id) { \n        return Response.status(200).entity(myBeans.get(id)).build(); \n    } \n\n    @POST \n    @Consumes(\"application/json\") \n    public Response add(Bean bean) { \n        if (bean != null) { \n            myBeans.put(bean.getName(), bean); \n        } \n        final URI id = URI.create(bean.getName()); \n        return Response.created(id).build(); \n    } \n\n    @DELETE \n    @Path(\"{id}\") \n    public void remove(@PathParam(\"id\") String id) { \n        myBeans.remove(id); \n    } \n\n} \n```", "```\npackage pl.finsys.jaxrs_example \nimport javax.ws.rs.GET; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.PathParam; \nimport javax.ws.rs.core.Response; \n\n@Stateless \n@Path(\"/books\") \npublic class BookResource { \n\n   @GET \n   @Path(\"{title : [a-zA-Z][a-zA-Z_0-9]}\") \n    public Response getBookByTitle(@PathParam(\"title\") String title) { \n      return Response.status(200).entity(\"getBookByTitle is called, title : \" + title).build(); \n   } \n\n   @GET \n   @Path(\"{isbn : \\\\d+}\") \n   public Response getBookByISBN(@PathParam(\"isbn\") String isbn) { \n      return Response.status(200).entity(\"getBookByISBN is called, isbn : \" + isbn).build(); \n   } \n} \n```", "```\npackage pl.finsys.jaxrs_example \nimport java.util.List; \nimport javax.ws.rs.GET; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.core.Context; \nimport javax.ws.rs.core.Response; \nimport javax.ws.rs.core.UriInfo; \n\n@Stateless \n@Path(\"/users\") \npublic class UserResource { \n   @EJB private UserService userService; \n   @GET \n   @Path(\"/query\") \n   @Produces(\"application/json\") \n   public Response getUsers( \n      @QueryParam(\"from\") int from, \n      @QueryParam(\"to\") int to, \n      @QueryParam(\"orderBy\") List<String> orderBy)) { \n      List<User> users = userService.getUsers(from, to, orderBy); \n      return Response.status(200).entity(users).build(); \n   } \n} \n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<project  \n\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n    <modelVersion>4.0.0</modelVersion> \n\n    <groupId>pl.finsys</groupId> \n    <artifactId>jee7-rest</artifactId> \n    <packaging>war</packaging> \n    <version>1.0-SNAPSHOT</version> \n\n    <dependencies> \n        <dependency> \n            <groupId>javax</groupId> \n            <artifactId>javaee-api</artifactId> \n            <version>7.0</version> \n            <scope>provided</scope> \n        </dependency> \n    </dependencies> \n    <build> \n        <finalName>jee7-rest</finalName> \n    </build> \n\n    <properties> \n        <maven.compiler.source>1.8</maven.compiler.source> \n        <maven.compiler.target>1.8</maven.compiler.target> \n        <failOnMissingWebXml>false</failOnMissingWebXml> \n    </properties> \n</project> \n\n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<project   \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> \n    <modelVersion>4.0.0</modelVersion> \n\n    <groupId>pl.finsys</groupId> \n    <artifactId>rest-example</artifactId> \n    <version>0.1.0</version> \n\n    <parent> \n        <groupId>org.springframework.boot</groupId> \n        <artifactId>spring-boot-starter-\n\n parent</artifactId> \n        <version>1.5.2.RELEASE</version> \n    </parent> \n\n    <dependencies> \n        <dependency> \n            <groupId>org.springframework.boot</groupId> \n            <artifactId>spring-boot-starter-\n\n web</artifactId> \n        </dependency> \n        <dependency> \n            <groupId>org.springframework.boot</groupId> \n            <artifactId>spring-boot-starter-data-\n\n jpa</artifactId> \n        </dependency> \n        <dependency> \n            <groupId>org.hibernate</groupId> \n            <artifactId>hibernate-validator</artifactId> \n        </dependency> \n        <dependency> \n            <groupId>org.hsqldb</groupId> \n            <artifactId>hsqldb</artifactId> \n            <scope>runtime</scope> \n        </dependency> \n\n        <!--test dependencies--> \n        <dependency> \n            <groupId>org.springframework.boot</groupId> \n            <artifactId>spring-boot-starter-test</artifactId> \n            <scope>test</scope> \n        </dependency> \n        <dependency> \n            <groupId>com.jayway.jsonpath</groupId> \n            <artifactId>json-path</artifactId> \n            <scope>test</scope> \n        </dependency> \n    </dependencies> \n\n    <properties> \n        <java.version>1.8</java.version> \n    </properties> \n\n    <build> \n        <plugins> \n            <plugin> \n                <groupId>org.springframework.boot</groupId> \n                <artifactId>spring-boot-maven-plugin</artifactId> \n            </plugin> \n        </plugins> \n    </build> \n\n    <repositories> \n        <repository> \n            <id>spring-releases</id> \n            <url>https://repo.spring.io/libs-release</url> \n        </repository> \n    </repositories> \n    <pluginRepositories> \n        <pluginRepository> \n            <id>spring-releases</id> \n            <url>https://repo.spring.io/libs-release</url> \n        </pluginRepository> \n    </pluginRepositories> \n</project> \n\n```", "```\npackage pl.finsys.example; \n\nimport org.springframework.boot.SpringApplication; \nimport org.springframework.boot.autoconfigure.SpringBootApplication; \n\n@SpringBootApplication \npublic class BookstoreApplication { \n\n    public static void main(final String[] args) { \n        SpringApplication.run(BookstoreApplication.class, args); \n    } \n} \n```", "```\npackage pl.finsys.example.domain; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.validation.constraints.NotNull; \nimport javax.validation.constraints.Size; \n\n@Entity \npublic class Book { \n\n    @Id \n    @NotNull \n    @Column(name = \"id\", nullable = false, updatable = false) \n    private Long id; \n\n    @NotNull \n    @Size(max = 64) \n    @Column(name = \"author\", nullable = false) \n    private String author; \n\n    @NotNull \n    @Size(max = 64) \n    @Column(name = \"title\", nullable = false) \n    private String title; \n\n    public Book() { \n    } \n\n    public Book(final Long id, final String author, final String title) { \n        this.id = id; \n        this.title = title; \n        this.author = author; \n    } \n\n    public Long getId() { \n        return id; \n    } \n\n    public String getAuthor() { \n        return author; \n    } \n\n    public String getTitle() { \n        return title; \n    } \n\n    public void setTitle(String title) { \n        this.title = title; \n    } \n\n    @Override \n    public String toString() { \n        return \"Book{\" + \n                \"id=\" + id + \n                \", author='\" + author + '\\'' + \n                \", title='\" + title + '\\'' + \n                '}'; \n    } \n} \n```", "```\npackage pl.finsys.example.repository; \n\nimport pl.finsys.example.domain.Book; \nimport org.springframework.data.jpa.repository.JpaRepository; \n\npublic interface BookRepository extends JpaRepository<Book, Long> { \n} \n```", "```\npackage pl.finsys.example.service; \n\nimport pl.finsys.example.domain.Book; \nimport javax.validation.Valid; \nimport javax.validation.constraints.NotNull; \nimport java.util.List; \n\npublic interface BookService { \n    Book saveBook(@NotNull @Valid final Book book); \n    List<Book> getList(); \n    Book getBook(Long bookId); \n    void deleteBook(final Long bookId); \n} \n```", "```\npackage pl.finsys.example.service; \n\nimport org.springframework.beans.factory.annotation.Autowired; \nimport pl.finsys.example.domain.Book; \nimport pl.finsys.example.repository.BookRepository; \nimport pl.finsys.example.service.exception.BookAlreadyExistsException; \nimport org.slf4j.Logger; \nimport org.slf4j.LoggerFactory; \nimport org.springframework.stereotype.Service; \nimport org.springframework.transaction.annotation.Transactional; \nimport org.springframework.validation.annotation.Validated; \n\nimport javax.validation.Valid; \nimport javax.validation.constraints.NotNull; \nimport java.util.List; \n\n@Service \n@Validated \npublic class BookServiceImpl implements BookService { \n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BookServiceImpl.class); \n    private final BookRepository repository; \n\n    @Autowired \n    public BookServiceImpl(final BookRepository repository) { \n        this.repository = repository; \n    } \n\n    @Override \n    @Transactional \n    public Book saveBook(@NotNull @Valid final Book book) { \n        LOGGER.debug(\"Creating {}\", book); \n        Book existing = repository.findOne(book.getId()); \n        if (existing != null) { \n            throw new BookAlreadyExistsException( \n                    String.format(\"There already exists a book with id=%s\", book.getId())); \n        } \n        return repository.save(book); \n    } \n\n    @Override \n    @Transactional(readOnly = true) \n    public List<Book> getList() { \n        LOGGER.debug(\"Retrieving the list of all users\"); \n        return repository.findAll(); \n    } \n\n    @Override \n    public Book getBook(Long bookId) { \n        return repository.findOne(bookId); \n    } \n\n    @Override \n    @Transactional \n    public void deleteBook(final Long bookId) { \n        LOGGER.debug(\"deleting {}\", bookId); \n        repository.delete(bookId); \n    } \n\n} \n```", "```\npackage pl.finsys.example.controller; \n\nimport org.springframework.beans.factory.annotation.Autowired; \nimport pl.finsys.example.domain.Book; \nimport pl.finsys.example.service.BookService; \nimport pl.finsys.example.service.exception.BookAlreadyExistsException; \nimport org.slf4j.Logger; \nimport org.slf4j.LoggerFactory; \nimport org.springframework.http.HttpStatus; \nimport org.springframework.web.bind.annotation.*; \n\nimport javax.validation.Valid; \nimport java.util.List; \n\n@RestController \npublic class BookController { \n\n   private static final Logger LOGGER =     LoggerFactory.getLogger(BookController.class); \nprivate final BookService bookService; \n\n    @Autowired \n    public BookController(final BookService bookService) { \n        this.bookService = bookService; \n    } \n\n@RequestMapping(value = \"/books\", method = RequestMethod.POST, consumes={\"application/json\"}) \n    public Book saveBook(@RequestBody @Valid final Book book) { \n        LOGGER.debug(\"Received request to create the {}\", book); \n        return bookService.saveBook(book); \n    } \n\n@RequestMapping(value = \"/books\", method = RequestMethod.GET, produces={\"application/json\"}) \n    public List<Book> listBooks() {             \n        LOGGER.debug(\"Received request to list all books\"); \n        return bookService.getList(); \n    } \n\n@RequestMapping(value = \"/books/{id}\", method = RequestMethod.GET, produces={\"application/json\"}) \n    public Book singleBook(@PathVariable Long id) { \n        LOGGER.debug(\"Received request to list a specific book\"); \n        return bookService.getBook(id); \n    } \n\n@RequestMapping(value = \"/books/{id}\", method = RequestMethod.DELETE) \n    public void deleteBook(@PathVariable Long id) { \n        LOGGER.debug(\"Received request to delete a specific book\"); \n        bookService.deleteBook(id); \n    } \n    @ExceptionHandler \n    @ResponseStatus(HttpStatus.CONFLICT) \n   public String handleUserAlreadyExistsException(BookAlreadyExistsException e) { \n        return e.getMessage(); \n    } \n} \n```", "```\n<dependency> \n   <groupId>io.springfox</groupId> \n   <artifactId>springfox-swagger2</artifactId> \n   <version>2.6.1</version> \n</dependency> \n\n<dependency> \n   <groupId>io.springfox</groupId> \n   <artifactId>springfox-swagger-ui</artifactId> \n   <version>2.5.0</version> \n</dependency> \n\n```", "```\npackage pl.finsys.example.configuration; \n\nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.Configuration; \nimport springfox.documentation.builders.PathSelectors; \nimport springfox.documentation.builders.RequestHandlerSelectors; \nimport springfox.documentation.spi.DocumentationType; \nimport springfox.documentation.spring.web.plugins.Docket; \nimport springfox.documentation.swagger2.annotations.EnableSwagger2; \n\n@Configuration \n@EnableSwagger2 \npublic class SwaggerConfig { \n    @Bean \n    public Docket api() { \n        return new Docket(DocumentationType.SWAGGER_2) \n                .select() \n                .apis(RequestHandlerSelectors.any()) \n                .paths(PathSelectors.any()).build(); \n    } \n} \n```", "```\n@ApiOperation(value = \"Retrieve a list of books.\",\n\nresponseContainer = \"List\")\n\n@RequestMapping(value = \"/books\", method = RequestMethod.GET, produces = {\"application/json\"})\n\npublic List<Book> listBooks() {\n\nLOGGER.debug(\"Received request to list all books\");\n\nreturn bookService.getList();\n\n}\n```", "```\n$ mvn spring-boot:run\n\n```", "```\npackage pl.finsys.example.client; \n\nimport org.springframework.http.ResponseEntity; \nimport org.springframework.web.client.RestTemplate; \nimport pl.finsys.example.domain.Book; \n\npublic class ExampleClient { \n    public static void main(String[] args) { \n        try { \n            RestTemplate restTemplate = new RestTemplate(); \n            ResponseEntity<Book> response = restTemplate.getForEntity(\"http://localhost:8080/books/1\", Book.class); \n            System.out.println(response.getBody()); \n        } catch (Exception e) { \n            e.printStackTrace(); \n        } \n    } \n} \n```"]