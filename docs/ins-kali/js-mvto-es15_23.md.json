["```js\ndocument.getElementById(\"button1\").addEventListener(\"click\", doSomething);\n```", "```js\nvar IsHiredSalary = { __name: \"isHiredSalary\",\n  __alsoCall: [\"isHired\"],\n  employeeId: 77,\n  \u2026\n}\n```", "```js\nclass CrowMailBus {\n  constructor(requestor) {\n    this.requestor = requestor;\n    this.responder = new CrowMailResponder(this);\n  }\n  Send(message) {\n    if (message.__from == \"requestor\") {\n      this.responder.processMessage(message);\n    }\n    else {\n      this.requestor.processMessage(message);\n    }\n  }\n}\n```", "```js\nclass CrowMailRequestor {\n  Request() {\n    var message = { __messageDate: new Date(),\n    __from: \"requestor\",\n    __corrolationId: Math.random(),\n    body: \"Hello there. What is the square root of 9?\" };\n    var bus = new CrowMailBus(this);\n    bus.Send(message);\n    console.log(\"message sent!\");\n  }\n  processMessage(message) {\n    console.dir(message);\n  }\n}\n```", "```js\nclass CrowMailResponder {\n  constructor(bus) {\n    this.bus = bus;\n  }\n  processMessage(message) {\n    var response = { __messageDate: new Date(),\n    __from: \"responder\",\n    __corrolationId: message.__corrolationId,\n    body: \"Okay invaded.\" };\n    this.bus.Send(response);\n    console.log(\"Reply sent\");\n  }\n}\n```", "```js\nclass CrowMailBus {\n  constructor(requestor) {\n    this.requestor = requestor;\n    this.responder = new CrowMailResponder(this);\n  }\n  Send(message) {\n    if (message.__from == \"requestor\") {\n      process.nextTick(() => this.responder.processMessage(message));\n    }\n    else {\n      process.nextTick(() => this.requestor.processMessage(message));\n    }\n  }\n}\n```", "```js\nRequest sent!\nReply sent\n{ __messageDate: Mon Aug 11 2014 22:43:07 GMT-0600 (MDT),\n  __from: 'responder',\n  __corrolationId: 0.5604551520664245,\n  body: 'Okay, invaded.' }\n```", "```js\nCrowMailBus.prototype.Subscribe = function (messageName, subscriber) {\n  this.responders.push({ messageName: messageName, subscriber: subscriber });\n};\n```", "```js\nPublish(message) {\n  for (let i = 0; i < this.responders.length; i++) {\n    if (this.responders[i].messageName == message.__messageName) {\n      (function (b) {\n        process.nextTick(() => b.subscriber.processMessage(message));\n      })(this.responders[i]);\n    }\n  }\n}\n```", "```js\nprocessMessage(message) {\n  var response = { __messageDate: new Date(),\n  __from: \"responder\",\n  __corrolationId: message.__corrolationId,\n  __messageName: \"SquareRootFound\",\n  body: \"Pretty sure it is 3.\" };\n  this.bus.Publish(response);\n  console.log(\"Reply published\");\n}\n```", "```js\nvar bus = new CrowMailBus();\nbus.Subscribe(\"KingdomInvaded\", new TestResponder1());\nbus.Subscribe(\"KingdomInvaded\", new TestResponder2());\nvar requestor = new CrowMailRequestor(bus);\nrequestor.Request();\n```", "```js\nvar TestResponder1 = (function () {\n  function TestResponder1() {}\n  TestResponder1.prototype.processMessage = function (message) {\n    console.log(\"Test responder 1: got a message\");\n  };\n  return TestResponder1;\n})();\n```", "```js\nMessage sent!\nReply published\nTest responder 1: got a message\nTest responder 2: got a message\nCrow mail responder: got a message\n```", "```js\nradio(\"KingdomInvalid\").subscribe(new TestResponder1().processMessage);\nradio(\"KingdomInvalid\").subscribe(new TestResponder2().processMessage);\n```", "```js\nradio(\"KingdomInvalid\").broadcast(message);\n```", "```js\nclass Combiner {\n  constructor() {\n    this.waitingForChunks = 0;\n  }\n  combine(ingredients) {\n    console.log(\"Starting combination\");\n    if (ingredients.length > 10) {\n      for (let i = 0; i < Math.ceil(ingredients.length / 2); i++) {\n        this.waitingForChunks++;\n        console.log(\"Dispatched chunks count at: \" + this.waitingForChunks);\n        var worker = new Worker(\"FanOutInWebWorker.js\");\n        worker.addEventListener('message', (message) => this.complete(message));\n        worker.postMessage({ ingredients: ingredients.slice(i, i * 2) });\n      }\n    }\n  }\n  complete(message) {\n    this.waitingForChunks--;\n    console.log(\"Outstanding chunks count at: \" + this.waitingForChunks);\n    if (this.waitingForChunks == 0)\n      console.log(\"All chunks received\");\n  }\n};\n```", "```js\nself.addEventListener('message', function (e) {\n  var data = e.data;\n  var ingredients = data.ingredients;\n  combinedIngredient = new Westeros.Potion.CombinedIngredient();\n  for (let i = 0; i < ingredients.length; i++) {\n    combinedIngredient.Add(ingredients[i]);\n  }\n  console.log(\"calculating combination\");\n  setTimeout(combinationComplete, 2000);\n}, false);\n\nfunction combinationComplete() {\n  console.log(\"combination complete\");\n  (self).postMessage({ event: 'combinationComplete', result: combinedIngredient });\n}\n```", "```js\nclass CreateUserv1Message implements IMessage{\n  __messageName: string\n  UserName: string;\n  FirstName: string;\n  LastName: string;\n  EMail: string;\n}\n```", "```js\nclass CreateUserv2Message extends CreateUserv1Message implements IMessage{\n  UserTitle: string;\n}\n```", "```js\nvar CreateUserv2tov1Downgrader = (function () {\n  function CreateUserv2tov1Downgrader (bus) {\n    this.bus = bus;\n  }\n  CreateUserv2tov1Downgrader.prototype.processMessage = function (message) {\n    message.__messageName = \"CreateUserv1Message\";\n    delete message.UserTitle;\n    this.bus.publish(message);\n  };\n  return CreateUserv2tov1Downgrader;\n})();\n```"]