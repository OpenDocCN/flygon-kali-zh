- en: Chapter 1. Docker Networking Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Docker 网络入门
- en: '**Docker** is a lightweight container technology that has gathered enormous
    interest in recent years. It neatly bundles various Linux kernel features and
    services, such as namespaces, cgroups, SELinux, and AppArmor profiles, over union
    filesystems such as AUFS and BTRFS in order to make modular images. These images
    provide a highly configurable virtualized environment for applications and follow
    a **write once, run anywhere** workflow. An application can be composed of a single
    process running in a Dcker container or it could be made up of multiple processes
    running in their own containers and being replicated as the load increases. Therefore,
    there is a need for powerful networking elements that can support various complex
    use cases.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一种轻量级的容器技术，近年来引起了巨大的兴趣。它巧妙地捆绑了各种 Linux 内核特性和服务，如命名空间、cgroups、SELinux
    和 AppArmor 配置文件，以及 AUFS 和 BTRFS 等联合文件系统，以创建模块化的镜像。这些镜像为应用程序提供了高度可配置的虚拟化环境，并遵循“一次编写，随处运行”的工作流程。一个应用可以由在
    Docker 容器中运行的单个进程组成，也可以由在它们自己的容器中运行的多个进程组成，并随着负载的增加而复制。因此，有必要拥有强大的网络元素来支持各种复杂的用例。
- en: In this chapter, you will learn about the essential components of Docker networking
    and how to build and run simple container examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解 Docker 网络的基本组件以及如何构建和运行简单的容器示例。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Networking and Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络和 Docker
- en: The `docker0` bridge networking
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker0` 桥接网络'
- en: Docker OVS networking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker OVS 网络
- en: Unix domain networks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unix 域网络
- en: Linking Docker containers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接 Docker 容器
- en: What's new in Docker networking
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 网络的新特性
- en: 'Docker is getting a lot of traction in the industry because of its performance-savvy
    and universal replicability architecture, while providing the following four cornerstones
    of modern application development:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在行业中备受关注，因为其性能敏锐和通用可复制的架构，同时提供现代应用开发的以下四个基石：
- en: Autonomy
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自治
- en: Decentralization
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去中心化
- en: Parallelism
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行性
- en: Isolation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离
- en: Furthermore, wide-scale adoption of Thoughtworks's microservices architecture,
    or **LOSA** (**Lots of Small Applications**), is further bringing potential to
    Docker technology. As a result, big companies such as Google, VMware, and Microsoft
    have already ported Docker to their infrastructure, and the momentum is continued
    by the launch of myriad Docker start-ups, namely Tutum, Flocker, Giantswarm, and
    so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Thoughtworks 的微服务架构或 LOSA（许多小应用程序）的广泛采用进一步为 Docker 技术带来潜力。因此，谷歌、VMware 和微软等大公司已经将
    Docker 移植到他们的基础设施上，而无数的 Docker 初创公司的推出，如 Tutum、Flocker、Giantswarm 等，也在推动这股势头。
- en: 'Since Docker containers replicate their behavior anywhere, be it your development
    machine, a bare metal server, virtual machine, or data center, application designers
    can focus their attention on development, while operational semantics are left
    with DevOps. This makes team workflow modular, efficient, and productive. Docker
    is not to be confused with a **virtual machine** (**VM**), even though they are
    both virtualization technologies. While Docker shares an OS with providing a sufficient
    level of isolation and security to applications running in containers, it later
    completely abstracts away the OS and gives strong isolation and security guarantees.
    However, Docker''s resource footprint is minuscule in comparison to a VM and hence
    preferred for economy and performance. However, it still cannot completely replace
    VMs and is therefore complementary to VM technology. The following diagram shows
    the architecture of VMs and Docker:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker容器可以在开发机器、裸金属服务器、虚拟机或数据中心中复制其行为，因此应用程序设计人员可以专注于开发，而操作语义留给了DevOps。这使团队工作流程模块化、高效和高产。
    Docker不应与虚拟机（VM）混淆，尽管它们都是虚拟化技术。虽然Docker与提供足够隔离和安全性的应用程序共享操作系统，但它后来完全抽象了操作系统并提供了强大的隔离和安全性保证。但是，与VM相比，Docker的资源占用量微不足道，因此更受经济和性能的青睐。但是，它仍然无法完全取代VM，因此是VM技术的补充。以下图表显示了VM和Docker的架构：
- en: '![Docker Networking Primer](../images/00002.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Networking Primer](../images/00002.jpeg)'
- en: Networking and Docker
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络和Docker
- en: Each Docker container has its own network stack, and this is due to the Linux
    kernel NET namespace, where a new NET namespace for each container is instantiated
    and cannot be seen from outside the container or from other containers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Docker容器都有自己的网络堆栈，这是由于Linux内核NET命名空间，每个容器都有一个新的NET命名空间，并且无法从容器外部或其他容器中看到。
- en: Docker networking is powered by the following network components and services.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker网络由以下网络组件和服务提供支持。
- en: Linux bridges
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux桥
- en: These are L2/MAC learning switches built into the kernel and are to be used
    for forwarding.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是内核中内置的L2/MAC学习交换机，用于转发。
- en: Open vSwitch
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Open vSwitch
- en: This is an advanced bridge that is programmable and supports tunneling.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可编程的高级桥梁，支持隧道。
- en: NAT
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NAT
- en: Network address translators are immediate entities that translate IP addresses
    and ports (SNAT, DNAT, and so on).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 网络地址转换器是立即实体，用于转换IP地址和端口（SNAT、DNAT等）。
- en: IPtables
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPtables
- en: This is a policy engine in the kernel used for managing packet forwarding, firewall,
    and NAT features.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是内核中用于管理数据包转发、防火墙和NAT功能的策略引擎。
- en: AppArmor/SELinux
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AppArmor/SELinux
- en: Firewall policies for each application can be defined with these.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都可以使用这些定义防火墙策略。
- en: 'Various networking components can be used to work with Docker, providing new
    ways to access and use Docker-based services. As a result, we see a lot of libraries
    that follow a different approach to networking. Some of the prominent ones are
    Docker Compose, Weave, Kubernetes, Pipework, libnetwork, and so on. The following
    figure depicts the root ideas of Docker networking:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用各种网络组件来与Docker一起工作，提供了访问和使用基于Docker的服务的新方法。因此，我们看到了许多遵循不同网络方法的库。其中一些著名的是Docker
    Compose、Weave、Kubernetes、Pipework、libnetwork等。以下图表描述了Docker网络的根本思想：
- en: '![AppArmor/SELinux](../images/00003.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![AppArmor/SELinux](../images/00003.jpeg)'
- en: The docker0 bridge
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: docker0桥
- en: The `docker0` bridge is the heart of default networking. When the Docker service
    is started, a Linux bridge is created on the host machine. The interfaces on the
    containers talk to the bridge, and the bridge proxies to the external world. Multiple
    containers on the same host can talk to each other through the Linux bridge.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker0`桥是默认网络的核心。当Docker服务启动时，在主机上创建一个Linux桥。容器上的接口与桥进行通信，桥代理到外部世界。同一主机上的多个容器可以通过Linux桥相互通信。'
- en: '`docker0` can be configured via the `--net` flag and has, in general, four
    modes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker0`可以通过`--net`标志进行配置，并且通常有四种模式：'
- en: '`--net default`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--net default`'
- en: '`--net=none`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--net=none`'
- en: '`--net=container:$container2`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--net=container:$container2`'
- en: '`--net=host`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--net=host`'
- en: The --net default mode
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: --net default模式
- en: In this mode, the default bridge is used as the bridge for containers to connect
    to each other.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模式下，默认桥被用作容器相互连接的桥。
- en: The --net=none mode
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: --net=none模式
- en: With this mode, the container created is truly isolated and cannot connect to
    the network.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模式，创建的容器是真正隔离的，无法连接到网络。
- en: The --net=container:$container2 mode
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: --net=container:$container2模式
- en: With this flag, the container created shares its network namespace with the
    container called `$container2`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此标志，创建的容器与名为`$container2`的容器共享其网络命名空间。
- en: The --net=host mode
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: --net=host模式
- en: With this mode, the container created shares its network namespace with the
    host.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模式，创建的容器与主机共享其网络命名空间。
- en: Port mapping in Docker container
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker容器中的端口映射
- en: In this section, we look at how container ports are mapped to host ports. This
    mapping can either be done implicitly by Docker Engine or can be specified.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看容器端口是如何映射到主机端口的。这种映射可以由Docker引擎隐式完成，也可以被指定。
- en: 'If we create two containers called **Container1** and **Container2**, both
    of them are assigned an IP address from a private IP address space and also connected
    to the **docker0** bridge, as shown in the following figure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建两个名为**Container1**和**Container2**的容器，它们都被分配了来自私有IP地址空间的IP地址，并连接到**docker0**桥上，如下图所示：
- en: '![Port mapping in Docker container](../images/00004.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Docker容器中的端口映射](../images/00004.jpeg)'
- en: Both the preceding containers will be able to ping each other as well as reach
    the external world.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前述的两个容器都能够相互ping通，也能够访问外部世界。
- en: For external access, their port will be mapped to a host port.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了外部访问，它们的端口将被映射到主机端口。
- en: 'As mentioned in the previous section, containers use network namespaces. When
    the first container is created, a new network namespace is created for the container.
    A vEthernet link is created between the container and the Linux bridge. Traffic
    sent from `eth0` of the container reaches the bridge through the vEthernet interface
    and gets switched thereafter. The following code can be used to show a list of
    Linux bridges:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，容器使用网络命名空间。当创建第一个容器时，为容器创建了一个新的网络命名空间。在容器和Linux桥之间创建了一个vEthernet链接。从容器的`eth0`发送的流量通过vEthernet接口到达桥，然后进行切换。以下代码可用于显示Linux桥的列表：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will be similar to the one shown as follows, with a bridge name
    and the `veth` interfaces on the containers it is mapped to:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于以下所示，具有桥名称和其映射到的容器上的`veth`接口：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'How does the container connect to the external world? The `iptables nat` table
    on the host is used to masquerade all external connections, as shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 容器如何连接到外部世界？主机上的`iptables nat`表用于伪装所有外部连接，如下所示：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to reach containers from the outside world? The port mapping is again done
    using the `iptables nat` option on the host machine.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如何从外部世界访问容器？端口映射再次使用主机上的`iptables nat`选项完成。
- en: '![Port mapping in Docker container](../images/00005.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Docker容器中的端口映射](../images/00005.jpeg)'
- en: Docker OVS
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker OVS
- en: 'Open vSwitch is a powerful network abstraction. The following figure shows
    how OVS interacts with the **VM**s, **Hypervisor**, and the **Physical Switch**.
    Every **VM** has a **vNIC** associated with it. Every **vNIC** is connected through
    a **VIF** (also called a **virtual interface**) with the **Virtual Switch**:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Open vSwitch是一个强大的网络抽象。下图显示了OVS如何与**VM**、**Hypervisor**和**Physical Switch**交互。每个**VM**都有一个与之关联的**vNIC**。每个**vNIC**通过**VIF**（也称为**虚拟接口**）与**虚拟交换机**连接：
- en: '![Docker OVS](../images/00006.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Docker OVS](../images/00006.jpeg)'
- en: 'OVS uses tunnelling mechanisms such as GRE, VXLAN, or STT to create virtual
    overlays instead of using physical networking topologies and Ethernet components.
    The following figure shows how OVS can be configured for the containers to communicate
    between multiple hosts using GRE tunnels:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: OVS使用隧道机制，如GRE、VXLAN或STT来创建虚拟覆盖，而不是使用物理网络拓扑和以太网组件。下图显示了OVS如何配置为使用GRE隧道在多个主机之间进行容器通信：
- en: '![Docker OVS](../images/00007.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Docker OVS](../images/00007.jpeg)'
- en: Unix domain socket
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unix域套接字
- en: 'Within a single host, UNIX IPC mechanisms, especially UNIX domain sockets or
    pipes, can also be used to communicate between containers:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个主机内，UNIX IPC机制，特别是UNIX域套接字或管道，也可以用于容器之间的通信：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Apps on `c1` and `c2` can communicate over the following Unix socket address:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`c1`和`c2`上的应用程序可以通过以下Unix套接字地址进行通信：'
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| C1: Server.c | C2: Client.c |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| C1: Server.c | C2: Client.c |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Linking Docker containers
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接Docker容器
- en: In this section, we introduce the concept of linking two containers. Docker
    creates a tunnel between the containers, which doesn't need to expose any ports
    externally on the container. It uses environment variables as one of the mechanisms
    for passing information from the parent container to the child container.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了链接两个容器的概念。Docker在容器之间创建了一个隧道，不需要在容器上外部公开任何端口。它使用环境变量作为从父容器传递信息到子容器的机制之一。
- en: 'In addition to the environment variable `env`, Docker also adds a host entry
    for the source container to the `/etc/hosts` file. The following is an example
    of the host file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了环境变量`env`之外，Docker还将源容器的主机条目添加到`/etc/hosts`文件中。以下是主机文件的示例：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are two entries:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个条目：
- en: The first is an entry for the container `c2` that uses the Docker container
    ID as a host name
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是用Docker容器ID作为主机名的`c2`容器的条目
- en: The second entry, `172.17.0.2 c1alaias 6e5cdeb2d300 c1`, uses the `link` alias
    to reference the IP address of the `c1` container
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个条目，`172.17.0.2 c1alaias 6e5cdeb2d300 c1`，使用`link`别名来引用`c1`容器的IP地址
- en: 'The following figure shows two containers **Container 1** and **Container 2**
    connected using veth pairs to the `docker0` bridge with `--icc=true`. This means
    these two containers can access each other through the bridge:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了两个容器**容器1**和**容器2**使用veth对连接到`docker0`桥接器，带有`--icc=true`。这意味着这两个容器可以通过桥接器相互访问：
- en: '![Linking Docker containers](../images/00008.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Linking Docker containers](../images/00008.jpeg)'
- en: Links
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: 'Links provide service discovery for Docker. They allow containers to discover
    and securely communicate with each other by using the flag `-link name:alias`.
    Inter-container communication can be disabled with the daemon flag `-icc=false`.
    With this flag set to `false`, **Container 1** cannot access **Container 2** unless
    explicitly allowed via a link. This is a huge advantage for securing your containers.
    When two containers are linked together, Docker creates a parent-child relationship
    between them, as shown in the following figure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 链接为Docker提供了服务发现。它们允许容器通过使用标志`-link name:alias`来发现并安全地相互通信。通过使用守护程序标志`-icc=false`可以禁用容器之间的相互通信。设置为`false`后，**容器1**除非通过链接明确允许，否则无法访问**容器2**。这对于保护容器来说是一个巨大的优势。当两个容器被链接在一起时，Docker会在它们之间创建父子关系，如下图所示：
- en: '![Links](../images/00009.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![链接](../images/00009.jpeg)'
- en: 'From the outside, it looks like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从外部看，它看起来像这样：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On the inside, it looks like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，它看起来像这样：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What's new in Docker networking?
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker网络的新特性是什么？
- en: Docker networking is at a very nascent stage, and there are many interesting
    contributions from the developer community, such as Pipework, Weave, Clocker,
    and Kubernetes. Each of them reflects a different aspect of Docker networking.
    We will learn about them in later chapters. Docker, Inc. has also established
    a new project where networking will be standardized. It is called **libnetwork**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Docker网络处于非常初期阶段，开发者社区有许多有趣的贡献，如Pipework、Weave、Clocker和Kubernetes。每个都反映了Docker网络的不同方面。我们将在后面的章节中了解它们。Docker,
    Inc.还建立了一个新项目，网络将被标准化。它被称为**libnetwork**。
- en: libnetwork implements the **container network model** (**CNM**), which formalizes
    the steps required to provide networking for containers while providing an abstraction
    that can be used to support multiple network drivers. The CNM is built on three
    main components—sandbox, endpoint, and network.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: libnetwork实现了**容器网络模型**（**CNM**），它规范了为容器提供网络所需的步骤，同时提供了一个抽象，可以支持多个网络驱动程序。CNM建立在三个主要组件上——沙盒、端点和网络。
- en: Sandbox
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 沙盒
- en: A sandbox contains the configuration of a container's network stack. This includes
    management of the container's interfaces, routing table, and DNS settings. An
    implementation of a sandbox could be a Linux network namespace, a FreeBSD jail,
    or other similar concept. A sandbox may contain many endpoints from multiple networks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 沙盒包含容器网络栈的配置。这包括容器的接口管理、路由表和DNS设置。沙盒的实现可以是Linux网络命名空间、FreeBSD监狱或类似的概念。一个沙盒可以包含来自多个网络的许多端点。
- en: Endpoint
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端点
- en: An endpoint connects a sandbox to a network. An implementation of an endpoint
    could be a veth pair, an Open vSwitch internal port, or something similar. An
    endpoint can belong to only one network but may only belong to one sandbox.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 端点将沙盒连接到网络。端点的实现可以是veth对、Open vSwitch内部端口或类似的东西。一个端点只能属于一个网络，但只能属于一个沙盒。
- en: Network
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络
- en: 'A network is a group of endpoints that are able to communicate with each other
    directly. An implementation of a network could be a Linux bridge, a VLAN, and
    so on. Networks consist of many endpoints, as shown in the following diagram:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 网络是一组能够直接相互通信的端点。网络的实现可以是Linux桥接、VLAN等。网络由许多端点组成，如下图所示：
- en: '![Network](../images/00010.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![网络](../images/00010.jpeg)'
- en: The Docker CNM model
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker CNM模型
- en: 'The CNM provides the following contract between networks and containers:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: CNM提供了网络和容器之间的以下约定：
- en: All containers on the same network can communicate freely with each other
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一网络上的所有容器可以自由通信
- en: Multiple networks are the way to segment traffic between containers and should
    be supported by all drivers
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个网络是在容器之间分段流量的方式，并且所有驱动程序都应该支持它
- en: Multiple endpoints per container are the way to join a container to multiple
    networks
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个容器可以有多个端点，这是将容器连接到多个网络的方法。
- en: An endpoint is added to a network sandbox to provide it with network connectivity
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端点被添加到网络沙箱中，以提供网络连接。
- en: 'We will discuss the details of how CNM is implemented in [Chapter 6](part0043_split_000.html#190861-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 6. Next Generation Networking Stack for Docker: libnetwork"), *Next Generation
    Networking Stack for Docker: libnetwork*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将在[第6章](part0043_split_000.html#190861-2d417e3c905d4b6c9e03acfd1355cc86 "Chapter 6. Next
    Generation Networking Stack for Docker: libnetwork")中讨论CNM的实现细节，*Docker的下一代网络堆栈：libnetwork*。'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the essential components of Docker networking,
    which have evolved from coupling simple Docker abstractions and powerful network
    components such as Linux bridges and Open vSwitch.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Docker网络的基本组件，这些组件是从简单的Docker抽象和强大的网络组件（如Linux桥和Open vSwitch）的耦合中发展而来的。
- en: We learned how Docker containers can be created with various modes. In the default
    mode, port mapping helps through the use of iptables NAT rules, allowing traffic
    arriving at the host to reach containers. Later in the chapter, we covered the
    basic linking of containers. We also talked about the next generation of Docker
    networking, which is called libnetwork.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了Docker容器可以以各种模式创建。在默认模式下，通过端口映射可以帮助使用iptables NAT规则，使得到达主机的流量可以到达容器。在本章后面，我们介绍了容器的基本链接。我们还讨论了下一代Docker网络，称为libnetwork。
