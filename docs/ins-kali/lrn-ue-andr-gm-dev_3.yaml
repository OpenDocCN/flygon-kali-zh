- en: Chapter 3. Building the Game – First Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建游戏-第一步
- en: By now, you hopefully have everything set up. You now know enough for us to
    finally get started with what you are really here for, to make games using UE4\.
    A great feature about UE4 is that it is easy to get into, yet hard to master,
    since there is so much you can do with this powerful engine. We will start by
    making the core elements of the game, namely the level, lighting, and materials.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，希望你已经把一切都设置好了。你现在已经知道足够的知识，让我们最终开始你真正来这里的目的，使用UE4制作游戏。UE4的一个很棒的特性是它很容易上手，但很难精通，因为你可以用这个强大的引擎做很多事情。我们将从制作游戏的核心元素开始，即关卡、灯光和材质。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What a project is, different types of projects offered by UE4, loading, and
    creating new projects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目是什么，UE4提供的不同类型的项目，加载和创建新项目
- en: Our game's concept, objective, genre, and features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们游戏的概念、目标、类型和特点
- en: Geometry and BSP brushes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何和BSP刷子
- en: Importing assets into the Content Browser, and onto the level
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将资产导入到内容浏览器和关卡中
- en: How to create materials
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建材质
- en: Lighting, its types, implementation, and building lights
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光、类型、实现和构建灯光
- en: Projects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目
- en: A project is an entity that holds all of the assets, maps, and code that make
    up your game. Once created, you can create multiple levels, or scenes, within
    that project. You can create, and purchase your own project files and use them.
    Mostly, projects that you can purchase come as a theme with assets and levels
    made according to that theme. For instance, you can download the **Sci-Fi Hallway**
    project for free from the Marketplace. This project file contains various objects,
    materials, and an example level setup of a futuristic hallway.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 项目是一个实体，它包含构成您的游戏的所有资产、地图和代码。创建后，您可以在该项目内创建多个关卡或场景。您可以创建并购买自己的项目文件并使用它们。大多数情况下，您可以购买的项目都是以资产和关卡根据该主题制作的主题。例如，您可以从市场免费下载**Sci-Fi
    Hallway**项目。该项目文件包含各种对象、材质和未来走廊的示例关卡设置。
- en: Creating a new project
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新项目
- en: 'When creating a new project, UE4 offers a number of templates that you can
    choose from, depending upon what type of game you wish to make. Let''s look at
    **Unreal Project Browser** again to better understand what this means:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目时，UE4提供了许多模板供您选择，具体取决于您希望制作的游戏类型。让我们再次看看**虚幻项目浏览器**，以更好地理解这意味着什么：
- en: '![Creating a new project](img/image00229.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/image00229.jpeg)'
- en: In the preceding screenshot, we see there are various types of templates available.
    These templates are project files that you can create, which contain the framework
    for the type of game you need to make. For example, if you want to make a third-person
    shooter or adventure game, you can choose **Third Person**, which contains things
    like the camera, characters, and the basic mechanics scripted. It also contains
    a sample map, where you can test the controls and the mechanics. To create a new
    project, simply highlight the type of game you wish to create, and click on **Create
    Project**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们看到有各种类型的可用模板。这些模板是您可以创建的项目文件，其中包含您需要制作的游戏类型的框架。例如，如果您想制作第三人称射击游戏或冒险游戏，您可以选择**第三人称**，其中包含摄像机、角色和基本的脚本机制。它还包含一个示例地图，您可以在其中测试控件和机制。要创建新项目，只需突出显示您希望创建的游戏类型，然后单击**创建项目**。
- en: Opening an existing project
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开现有项目
- en: There are several ways to open a project. One way is through **My Projects**,
    in the **Engine Launcher Library** section. The second way is in **Unreal Project
    Browser**, under the **Projects** panel. The third way to load a project is in
    the Editor itself. To do so, simply click on the **File** in the menu bar to open
    the **File** menu, select **Open Project** and simply select which project you
    wish to open. Doing so will close the current project and reopen the Editor.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目有几种方法。一种方法是通过**我的项目**，在**引擎启动库**部分。第二种方法是在**虚幻项目浏览器**中，在**项目**面板下。加载项目的第三种方法是在编辑器本身。要这样做，只需单击菜单栏中的**文件**以打开**文件**菜单，选择**打开项目**，然后简单地选择要打开的项目。这样做将关闭当前项目并重新打开编辑器。
- en: Project directory structure
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目目录结构
- en: 'By default, any projects you create are stored in `C:\Users\*account name*\Documents\Unreal
    Projects`. On opening this folder, you will see something similar to the following
    screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您创建的任何项目都存储在`C:\Users\*account name*\Documents\Unreal Projects`中。打开此文件夹，您将看到类似以下截图的内容：
- en: '![Project directory structure](img/image00230.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![项目目录结构](img/image00230.jpeg)'
- en: In the preceding screenshot, each project has its own separate folder. Each
    folder contains files and folders related to that project, such as the assets,
    maps, the project file or `.uproject` files, and so on. Have a look around, see
    which folder contains what and the role each of them plays. To delete any project,
    simply delete the folder of the project you wish to remove.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，每个项目都有自己单独的文件夹。每个文件夹包含与该项目相关的文件和文件夹，如资产、地图、项目文件或`.uproject`文件等。四处看看，看看哪个文件夹包含什么，以及它们各自的作用。要删除任何项目，只需删除要删除的项目的文件夹。
- en: Bloques
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bloques
- en: We have our project setup. We can start making our game. Let's first talk about
    what the game is.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了项目。我们可以开始制作我们的游戏。让我们先谈谈游戏是什么。
- en: Concept
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念
- en: The game we are going to make in the guide is Bloques, which is a first person
    puzzle game designed for Android. The main objective of the game is to solve a
    series of puzzles in each room to progress to the next. The game we are going
    to make is going to have four rooms; with each progressive level, the puzzle gets
    more complex.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本指南中要制作的游戏是Bloques，这是一款为安卓设计的第一人称解谜游戏。游戏的主要目标是解决每个房间中的一系列谜题，以进入下一个房间。我们要制作的游戏将有四个房间；随着每个级别的提升，谜题会变得更加复杂。
- en: Controls
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制
- en: The player controls the character using two virtual joysticks, one for moving
    and the other for looking. All of the game's interaction, such as picking up objects,
    opening doors, and so on, will be done via touch.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家使用两个虚拟摇杆来控制角色，一个用于移动，另一个用于观察。所有游戏的交互，如拾取物品、打开门等，都将通过触摸来完成。
- en: Creating the project for the game
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为游戏创建项目
- en: 'The first thing we need to do is set up a project. In the Engine Launcher,
    launch the Editor through the **Launch** button. The version used to make this
    game is 4.7.6\. After the Unreal Project Browser has opened, open the **New Project**
    panel and follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是设置一个项目。在引擎启动器中，通过**启动**按钮启动编辑器。用于制作这个游戏的版本是4.7.6。在虚幻项目浏览器打开后，打开**新项目**面板，按照以下步骤操作：
- en: Select **First Person** from the templates section, and select the template
    in the **Blueprint** tab.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板部分选择**第一人称**，并在**蓝图**选项卡中选择模板。
- en: In the **Target Hardware** options, pick **Mobile/Tablet**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标硬件**选项中，选择**移动/平板**。
- en: In the **Quality Settings**, you have two options, **Maximum Quality** and **Scalable
    2D or 3D**. As mentioned before, you should only pick **Maximum Quality** if you
    are making a game for PC or Console and **Scalable 2D or 3D** for mobile or tab.
    Keeping that in mind, select **Scalable 2D or 3D**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**质量设置**中，你有两个选项，**最高质量**和**可扩展的2D或3D**。如前所述，如果你正在制作PC或游戏机游戏，你应该选择**最高质量**，如果是移动或平板，选择**可扩展的2D或3D**。记住这一点，选择**可扩展的2D或3D**。
- en: In the menu which asks you whether you want to start with or without starter
    content, select **No Starter Content**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问你是否要使用起始内容的菜单中，选择**无起始内容**。
- en: Finally, set the name of the project as `Bloques`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将项目命名为`Bloques`。
- en: 'After all of these settings, it should look something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些设置之后，它应该看起来像这样：
- en: '![Creating the project for the game](img/image00231.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![为游戏创建项目](img/image00231.jpeg)'
- en: Next, simply click on **Create Project**. We have now set up our project. After
    the Editor has opened, you will see a test level already set up. The test level
    is just to showcase the basic functionalities and mechanics that the template
    you have chosen, provides. In the **First Person** template, the player will be
    able to move, jump, and shoot. Another great feature is that, when you select
    **Mobile/Tablet** as your target hardware, UE4 automatically provides two virtual
    game-pads, one for moving and the other for looking. This takes a lot of work
    out of having to script in the controls.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需点击**创建项目**。我们现在已经设置好了我们的项目。编辑器打开后，你会看到一个已经设置好的测试关卡。测试关卡只是为了展示你选择的模板提供的基本功能和机制。在**第一人称**模板中，玩家可以移动、跳跃和射击。另一个很棒的功能是，当你将**移动/平板**作为目标硬件时，UE4会自动提供两个虚拟游戏手柄，一个用于移动，另一个用于观察。这省去了不少需要编写控制脚本的工作。
- en: However, we do not want to work on this example map. We would want to work on
    a new map. To do so, simply click on **File** to open the menu, and click on **New
    Level**. Clicking on it will open up the **New Level** window, which offers two
    types of levels, **Default** and **Empty**. A **Default Level** has the very basic
    components, such as a skybox and a player start actor already set up.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不想在这个示例地图上工作。我们想要在一个新地图上工作。要做到这一点，只需点击**文件**打开菜单，然后点击**新建关卡**。点击它将打开**新建关卡**窗口，其中提供了两种类型的关卡，**默认**和**空白**。**默认关卡**具有非常基本的组件，如天空盒和玩家起始角色已经设置好。
- en: '**Empty Level**, however, as the name suggests, contains absolutely nothing
    set up. If you wish to make your game from scratch, you should pick **Empty Level**.
    Since our game is going to take place indoors, we do not really need a skybox.
    Therefore, choose **Empty Level**. We have now set up our level where we are going
    to make our game. Let''s save this level as `Bloques_Game`. Your **Viewport**
    will now look like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**空白关卡**，然而，正如其名字所示，里面绝对什么都没有设置。如果你想从零开始制作游戏，你应该选择**空白关卡**。由于我们的游戏将在室内进行，我们并不真的需要天空盒。因此，选择**空白关卡**。我们现在已经设置好了我们将制作游戏的关卡。让我们将这个关卡保存为`Bloques_Game`。你的**视口**现在会是这样的：'
- en: '![Creating the project for the game](img/image00232.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![为游戏创建项目](img/image00232.jpeg)'
- en: BSP brushes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BSP刷
- en: The first thing we need to do is build our level. We will do this with the help
    of BSP brushes. We talked briefly about BSP brushes in the second chapter, but
    now we will talk about them in a bit more detail. BSP brushes create volumes and
    surfaces for your level. It provides a quick and easy way to block out your level
    and to make quick prototypes. You can even create the entire level itself using
    BSP brushes. If you do not have access to 3D modelling software, such as Maya
    or 3DS Max, to create assets for your level (such as walls, ceilings, and so on),
    then you can use BSP brushes instead to create your level. The BSP brushes can
    be selected in the **Modes** panel, in the **Place Mode**.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是建立我们的关卡。我们将借助BSP刷来完成这一点。我们在第二章简要谈到了BSP刷，但现在我们将稍微详细地谈论一下它们。BSP刷为你的关卡创建了体积和表面。它提供了一个快速简便的方法来阻挡你的关卡并快速制作原型。你甚至可以使用BSP刷来创建整个关卡。如果你没有访问3D建模软件，如Maya或3DS
    Max，来为你的关卡创建资产（如墙壁、天花板等），那么你可以使用BSP刷来创建你的关卡。BSP刷可以在**模式**面板的**放置模式**中选择。
- en: Default BSP brush shapes
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认BSP刷形状
- en: 'As mentioned in the previous chapter, there are a total of seven default brushes
    offered by UE4\. The following is a screenshot of the geometry created by brushes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，UE4提供了共计七个默认刷子。以下是刷子创建的几何体的截图：
- en: '![Default BSP brush shapes](img/image00233.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![默认BSP刷形状](img/image00233.jpeg)'
- en: 'From left to right, you have:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右，你有：
- en: '**Box Brush**: This creates a cube-shaped brush. You can set the length, width,
    and height of the box. You can also set whether you want the cube to be hollow
    or not. If so, you have the option to set the thickness of the walls.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盒子刷**：这会创建一个立方体形状的刷子。你可以设置盒子的长度、宽度和高度。你还可以设置立方体是否为空心。如果是的话，你可以选择设置墙壁的厚度。'
- en: '**Sphere Brush**: This creates a spherical brush. You can set the number of
    tessellations. Increasing the number of tessellations will make it smoother and
    more like a proper sphere. However, keep in mind that increasing the tessellations
    will increase the number of surfaces and therefore will require more memory to
    render. Keeping that and the technical limitations of mobile devices in mind,
    it is better to have a low-polygon geometry with a good texture, than a high-polygon
    geometry with a bad texture.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**球体刷子**：这将创建一个球形刷子。你可以设置细分的数量。增加细分的数量将使其更加光滑，更像一个真正的球体。然而，请记住增加细分的数量将增加表面的数量，因此需要更多的内存来渲染。考虑到这一点以及移动设备的技术限制，拥有一个低多边形几何和良好纹理的效果要比高多边形几何和糟糕纹理的效果更好。'
- en: '**Cylinder Brush**: This creates a cylindrical brush. You can set its radius
    and height. You can also increase or decrease the number of sides. As with the
    Sphere Brush, increasing the number of sides will increase the number of surfaces
    along the length, making it smoother, but will require more memory to render.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆柱刷子**：这将创建一个圆柱形刷子。你可以设置其半径和高度。你还可以增加或减少边的数量。与球体刷子一样，增加边的数量将增加长度上的表面数量，使其更加光滑，但将需要更多的内存来渲染。'
- en: '**Cone Brush**: This creates a conical brush. You can set properties such as
    the height, and the radius of the base. You can also set the number of surfaces
    in the brush.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆锥刷子**：这将创建一个圆锥形刷子。你可以设置诸如高度、底部半径等属性。你还可以设置刷子中的表面数量。'
- en: '**Linear Stair Brush**: This allows you to create linear or straight stairs.
    Instead of having to model, unwrap, and import stairs into your level, you can
    create it in the engine itself. You can set properties such as the length, width,
    and height of each step, the number of steps, and the distance below the first
    step.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直线楼梯刷子**：这允许你创建直线楼梯。你不需要对楼梯进行建模、展开和导入到你的关卡中，你可以在引擎中创建它。你可以设置每个台阶的长度、宽度和高度、台阶数量以及第一个台阶下方的距离等属性。'
- en: '**Curved Stair Brush**: You can also create curved stairs using the Curved
    Stair Brush. You can set properties such as the inner radius of the curve, the
    angle of the curve (the angle of curve means how much the stair will curve. You
    can set it to any value between 0 to 360 degrees), the number of steps, and the
    distance below the first step. Finally, you can also set whether you want the
    stairs to curve clockwise or counter-clockwise.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**曲线楼梯刷子**：你还可以使用曲线楼梯刷子创建曲线楼梯。你可以设置诸如曲线的内半径、曲线的角度（曲线的角度意味着楼梯会弯曲多少。你可以将其设置为0到360度之间的任何值）、台阶数量以及第一个台阶下方的距离等属性。最后，你还可以设置是否希望楼梯顺时针或逆时针弯曲。'
- en: '**Spiral Stair Brush**: Finally, we have the Spiral Stair Brush. The difference
    between Spiral and Curved Stairs is that Spiral Stairs can repeatedly wrap over
    itself, while Curved Stairs cannot. You can set things like the inner radius,
    the width, height, and thickness of each step, number of steps, and number of
    steps in one whole spiral. Finally, you can also set options such as whether you
    want the underside and/or the surface of the stairs to be sloped or stepped and
    whether you want the spiral to be clockwise or counter-clockwise.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**螺旋楼梯刷子**：最后，我们有螺旋楼梯刷子。螺旋楼梯和曲线楼梯的区别在于螺旋楼梯可以重复包裹自身，而曲线楼梯不能。你可以设置诸如内半径、宽度、高度、每个台阶的厚度、台阶数量以及整个螺旋中的台阶数量等属性。最后，你还可以设置选项，比如是否希望楼梯的底部和/或表面是倾斜的还是阶梯状的，以及是否希望螺旋是顺时针还是逆时针的。'
- en: The preceding brush types can be used to create geometry through the use of
    additive or subtractive brush types through the **Modes** panel under **Place**/**BSP**.
    When a brush is added to your level and used to create geometry, an additive brush
    type will add geometry wherever placed. Subtractive brush types will remove any
    geometry that is overlapping additive geometry.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述刷子类型可以通过**放置**/**BSP**下的**模式**面板使用添加或减去刷子类型来创建几何图形。当一个刷子被添加到你的关卡并用于创建几何图形时，添加刷子类型将在放置的任何地方添加几何图形。减去刷子类型将移除任何与添加几何图形重叠的几何图形。
- en: Apart from these settings, you can also set the properties of each surface of
    the geometry, such as panning, rotating, flipping, and scaling the *U* and/or
    *V* coordinates. You can see their effects when you apply materials to them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些设置，你还可以设置几何图形每个表面的属性，比如平移、旋转、翻转和缩放*U*和/或*V*坐标。当你将材质应用到它们时，你可以看到它们的效果。
- en: Finally, you also have the option to use brushes to create volumes, such as
    trigger volumes, blocking volumes, pain-causing volumes, and so on.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你还可以使用刷子创建体积，比如触发体积、阻挡体积、造成疼痛的体积等等。
- en: Editing BSP brushes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑BSP刷子
- en: Say, you want to create geometry using BSP brushes, but the shape that you require
    is not one of the seven default shapes. In that case, you can create your own
    brush using the **Geometry Edit** mode. It is located on the far right of the
    **Modes** panel. Click on it to switch to the **Geometry Edit** mode.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想使用BSP刷子创建几何图形，但你需要的形状不是七种默认形状之一。在这种情况下，你可以使用**几何编辑**模式创建自己的刷子。它位于**模式**面板的最右侧。单击它以切换到**几何编辑**模式。
- en: '![Editing BSP brushes](img/image00234.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![编辑BSP刷子](img/image00234.jpeg)'
- en: In the preceding screenshot, you can see that when you switch to the Geometry
    Edit mode, all of the vertices, faces, and edges in the geometry. You also may
    have noticed that the size of the vertices have increased. In this mode, you can
    select either the whole brush, a face, a vertex, or an edge of the geometry.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，你可以看到当你切换到几何编辑模式时，几何图形中的所有顶点、面和边。你可能也注意到顶点的大小已经增加。在这种模式下，你可以选择整个刷子、一个面、一个顶点或几何图形的一个边。
- en: In the modes panel, you can see several operations, such as **Create**, **Delete**,
    **Flip**, and so on. Some of them you can perform, while the others you cannot.
    What operation you can and cannot perform depends upon what you have selected
    (such as a vertex, edge, or face).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在模式面板中，您可以看到几种操作，如**创建**，**删除**，**翻转**等。有些您可以执行，而其他则不行。您可以执行哪些操作取决于您选择了什么（例如顶点、边缘或面）。
- en: Blocking out the rooms with BSP brushes
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BSP刷子堵住房间
- en: We will now design the environment for our game. Make four rooms and keep them
    blocked out so the player has to solve the puzzle in one room to get to the next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为游戏设计环境。制作四个房间并将它们堵住，以便玩家必须在一个房间解决谜题才能进入下一个房间。
- en: The first room
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一个房间
- en: The first room is going to be relatively straightforward. The room is going
    to be cuboid. Since this is where the player starts, he/she will be introduced
    to the mechanics in this room, such as moving, looking, picking up and placing
    objects. The player simply has to pick up the key cube and place it on the pedestal
    to open the door. The player will also know, through this simple task, the main
    objective in each room.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个房间将相对简单。房间将是长方体的。由于这是玩家的起点，他/她将在这个房间里介绍机制，如移动、观察、拾取和放置物体。玩家只需拿起钥匙方块并将其放在基座上即可打开门。通过这个简单的任务，玩家还将了解每个房间的主要目标。
- en: So let's begin by making the floor. We are going to use a **Box Brush**. To
    add a **Box Brush**, simply click on **Box** in the **Modes** panel under **BSP**
    and drag it on to the **Viewport**. In the **Details** panel, set the dimensions
    of the brush as `2048 x 2048 x 64`. We want this room to be relatively small,
    since the puzzle is simple and also, to avoid unnecessary walking, as the player
    might get bored.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们从制作地板开始。我们将使用**Box Brush**。要添加**Box Brush**，只需在**BSP**下的**模式**面板中单击**Box**，然后将其拖放到**视口**上。在**详细信息**面板中，将刷子的尺寸设置为`2048
    x 2048 x 64`。我们希望这个房间相对较小，因为谜题很简单，而且为了避免不必要的行走，因为玩家可能会感到无聊。
- en: '![The first room](img/image00235.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![第一个房间](img/image00235.jpeg)'
- en: After that, let's now make the walls. Again, we will use a Box BSP brush to
    make them. Set the dimensions as `2048 x 64 x 1024`. After you have made one wall,
    simply click and hold the *Alt* key and move the wall to create a duplicate, which
    can be placed on the other side of the room.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们现在制作墙壁。同样，我们将使用一个Box BSP刷子来制作它们。将尺寸设置为`2048 x 64 x 1024`。制作完一面墙后，只需单击并按住*Alt*键并移动墙壁以创建一个副本，然后将其放在房间的另一侧。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When using BSP brushes, switch the View mode to **Unlit**. Otherwise, you will
    not be able to see the surfaces and would have to build the lighting every time
    you introduce a surface.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BSP刷子时，将视图模式切换为**未照明**。否则，您将无法看到表面，并且每次引入表面时都必须构建照明。
- en: For the walls along the adjacent side, let's set the dimensions as `64 x 2048
    x 1024`. Again, as with the other wall, simply duplicate the BSP brush and move
    it to the far side of the room.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相邻侧的墙壁，让我们将尺寸设置为`64 x 2048 x 1024`。与其他墙壁一样，只需复制BSP刷子并将其移动到房间的另一侧。
- en: '![The first room](img/image00236.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![第一个房间](img/image00236.jpeg)'
- en: Finally, for the ceiling, simply duplicate the floor and drag it on top of the
    walls.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于天花板，只需复制地板并将其拖放到墙壁上方。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To prevent light bleeding and other complications regarding lighting and rendering,
    make sure that there is no gap between any of the brushes. Switch to **Top**,
    **Side**, or **Front** view to make sure all of the walls and ceilings are perfectly
    lined up.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止光线渗透和其他与照明和渲染有关的问题，请确保任何刷子之间没有间隙。切换到**顶部**、**侧面**或**正面**视图，确保所有墙壁和天花板都完美对齐。
- en: What this room now needs is a hole for the door. Otherwise, the player would
    be stuck in the first room and would not be able to advance to the next. We are
    going to do so with the help of a subtractive BSP brush.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个房间现在需要的是一个门的洞。否则，玩家将被困在第一个房间，无法前进到下一个房间。我们将借助减法BSP刷子来做到这一点。
- en: To create a subtractive brush, drag the **Box Brush** onto the level, and in
    the **Details** panel, set the **Brush Type** to **Subtractive**. Set the dimensions
    of this as `64 x 256 x 256`. Place this subtractive brush on any of the walls
    along the shorter side of the room.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个减法刷子，将**Box Brush**拖放到级别上，并在**详细信息**面板中将**刷子类型**设置为**减法**。将其尺寸设置为`64 x
    256 x 256`。将这个减法刷子放在房间较短一侧的任何墙上。
- en: '![The first room](img/image00237.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![第一个房间](img/image00237.jpeg)'
- en: Finally, let's add a pedestal near the door, where the player has to place the
    key cube in order to open the door.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在门附近添加一个基座，玩家必须将钥匙方块放在上面才能打开门。
- en: '![The first room](img/image00238.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![第一个房间](img/image00238.jpeg)'
- en: With that, we have now blocked out the first room. Let's move on to the next.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经堵住了第一个房间。让我们继续下一个。
- en: The second room
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二个房间
- en: In the second room, we will add a bit of challenge for the player. Upon entering
    the second room, there will be a large door in the middle. The player can open
    the door by touching it on the screen. However, as soon as he/she lifts his/her
    finger or moves away from it, the door closes. To the player's right will be the
    key cube; however, it is trapped. In order for the player to unlock the key cube,
    he/she will have to go past the door, retrieve another cube, place it on a platform
    near the door, to unlock the key cube, place it on the pedestal, and advance to
    the next room.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个房间，我们将为玩家增加一些挑战。进入第二个房间后，中间将有一扇大门。玩家可以通过触摸屏幕打开门。然而，一旦他/她抬起手指或离开门，门就会关闭。玩家右侧将有钥匙方块；然而，它被困住了。为了解锁钥匙方块，玩家必须走过门，取回另一个方块，将其放在门附近的平台上，解锁钥匙方块，将其放在基座上，然后前进到下一个房间。
- en: In the first room, we had created each surface (walls, floor, and ceiling) individually.
    There is an alternate method we can use to create our second room. For that, we
    will make use of the **Hollow** property in the brush's Details panel.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个房间中，我们分别创建了每个表面（墙壁、地板和天花板）。我们可以使用另一种方法来创建我们的第二个房间。为此，我们将利用刷的**中空**属性在详细面板中。
- en: 'With that said, select the **Box Brush**, and drag it on to the scene. Next,
    set its dimensions as `2048 x 1544 x 1024`, and position it right next to the
    first room (remember to position it next to the wall with the door). Position
    it as in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，选择**盒子刷**，并将其拖到场景中。接下来，将其尺寸设置为`2048 x 1544 x 1024`，并将其位置放在第一个房间旁边（记得将其放在有门的墙旁边）。将其位置设置如下截图所示：
- en: '![The second room](img/image00239.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![第二个房间](img/image00239.jpeg)'
- en: Once positioned, with the brush selected, go to the **Details** panel and tick
    **Hollow**. As soon as you tick it, a new setting becomes available, **Wall Thickness**.
    Set its value to **128** (make sure that the subtractive brush we used in the
    previous room for the door is overlapping both walls; otherwise, you will not
    be able to see the door).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定位好，选择刷，转到**详细**面板并勾选**中空**。一旦勾选，将会出现一个新的设置，**墙壁厚度**。将其值设置为**128**（确保我们在前一个房间中用于门的减法刷重叠在两面墙上；否则，你将看不到门）。
- en: '![The second room](img/image00240.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![第二个房间](img/image00240.jpeg)'
- en: And that is it! We have our second room blocked out without having to spend
    loads of time placing each part of the room and making sure that they are aligned
    properly. The only things left to place are the pedestals and the hole for the
    door that leads to the third room. For the door, simply do what we did for the
    first room, create a subtractive brush of dimensions `64 x 256 x 256`, and position
    it on the other side of the room. Alternatively, duplicate the subtractive brush
    for the first room and then move its copy to the far side of the room.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经完成了第二个房间的布局，而不必花费大量时间放置房间的每个部分，并确保它们正确对齐。剩下要放置的只有基座和通往第三个房间的门的洞。对于门，只需像我们为第一个房间所做的那样，创建一个尺寸为`64
    x 256 x 256`的减法刷，然后将其放置在房间的另一侧。或者，复制第一个房间的减法刷，然后将其副本移动到房间的另一侧。
- en: Finally, to finish things off, we will add two pedestals in this room. One pedestal
    will be near the middle of the room, where the big door will be. The player will
    have to place the first key cube on this pedestal to unlock the second key cube.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了完成一切，我们将在这个房间中添加两个基座。一个基座将放在房间中间附近，那里将会有一个大门。玩家必须将第一个钥匙立方体放在这个基座上才能解锁第二个钥匙立方体。
- en: '![The second room](img/image00241.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![第二个房间](img/image00241.jpeg)'
- en: The second pedestal goes on the other side of the room, where the player has
    to place the key cube to open the door to advance on to the third room.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个基座放在房间的另一侧，玩家必须将钥匙立方体放置在那里，才能打开通往第三个房间的门。
- en: '![The second room](img/image00242.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![第二个房间](img/image00242.jpeg)'
- en: With this, we have finished blocking out the second room. Let's now move on
    to the third, where things start to get interesting.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了第二个房间的布局。现在让我们继续到第三个房间，那里的事情开始变得有趣起来。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to keep saving, so that you do not lose your work should the Engine
    suddenly crash or any other technical issue arise. To save, just click on *Ctrl*
    + *S*, or click on the **Save** button on the **Viewport** toolbar.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 记得要经常保存，这样在引擎突然崩溃或出现其他技术问题时，就不会丢失你的工作。要保存，只需点击*Ctrl* + *S*，或者点击**视口**工具栏上的**保存**按钮。
- en: The third room
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三个房间
- en: By now, the player would have understood the basic mechanics and controls in
    the game. Let's now give him/her a bigger challenge in the third room. Upon entering
    the third room, there will be a pit between the player and the door to the final
    room. For the player to be able to cross the pit, he/she will require a bridge.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，玩家应该已经了解了游戏中的基本机制和控制。现在让我们在第三个房间给他/她一个更大的挑战。进入第三个房间后，玩家和通往最终房间的门之间会有一个坑。为了能够穿过坑，玩家将需要一座桥。
- en: To draw the bridge, the player will have to direct an AI controlled object on
    to a switch. The object will move along a path. However, parts of the bits are
    missing. The player can fill in the gaps with the help of switches placed in the
    level. Here, the challenge lies in determining which switch to press and when
    to press it. It also relies on proper timing. After the object has reached its
    destination, the bridge will be drawn, through which the player can cross, grab
    the key cube, open the door, and advance to the next level.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了画出桥梁，玩家必须引导一个由AI控制的物体到一个开关上。这个物体将沿着一条路径移动。然而，一些部分缺失。玩家可以通过放置在关卡中的开关来填补这些空隙。挑战在于确定要按下哪个开关以及何时按下它。这也依赖于正确的时机。当物体到达目的地后，桥梁将被画出，玩家可以穿过，拿到钥匙立方体，打开门，然后进入下一个关卡。
- en: There are two ways of constructing the pit; the first way is to make the room
    in two parts. The first part would be on one side of the pit, and the second on
    the other side. After making the two parts, construct the pit, and finally place
    them. However, this is a bad and time-consuming way of constructing the room and
    the pit. We would also have extra surfaces, meaning more memory usage when rendering
    the level. Also, you would have to painstakingly line all of the parts up properly
    to ensure there are no gaps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种构建坑的方法；第一种方法是将房间分成两部分。第一部分在坑的一侧，第二部分在另一侧。在制作好两部分后，构建坑，最后放置它们。然而，这是一种不好且耗时的构建房间和坑的方法。当渲染关卡时，我们还会有额外的表面，意味着更多的内存使用。此外，你还必须费力地将所有部分正确对齐，以确保没有空隙。
- en: The second way, which we will use instead, is that we will create the whole
    room and with the help of a subtractive brush, carve out the pit. This way, we
    would not have to worry about extra faces aligning parts of the room, and we can
    also easily set the dimensions of the pit by moving and/or editing the subtractive
    brush.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的第二种方法是创建整个房间，并借助减法刷挖出坑。这样，我们就不必担心额外的面对齐房间的部分，而且我们还可以通过移动和/或编辑减法刷轻松设置坑的尺寸。
- en: As always, let's begin by making the floor. Now, since we are going to carve
    out the pit, the floor will have more height than the other rooms. Select the
    **Box Brush**, and set its dimensions as `4096 x 2048 x 512`. This will be the
    main area, where the puzzle is going to be.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，让我们从地板开始。现在，由于我们要挖出坑，地板的高度将比其他房间更高。选择**Box Brush**，将其尺寸设置为`4096 x 2048
    x 512`。这将是主要区域，谜题将在这里进行。
- en: '![The third room](img/image00243.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00243.jpeg)'
- en: Since this room is higher than the previous rooms, we are going to need some
    stairs so that the player can reach the third room. First, add a small **Box Brush**,
    set its dimensions as `512 x 1544 x 64` and place it near the door of the previous
    room.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个房间比前几个房间更高，我们需要一些楼梯，以便玩家可以到达第三个房间。首先，添加一个小的**Box Brush**，将其尺寸设置为`512 x 1544
    x 64`，并将其放在前一个房间的门附近。
- en: '![The third room](img/image00244.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00244.jpeg)'
- en: To add the stairs, drag the **Linear Stair Brush** from the **Modes** panel
    onto the level. Set the width of the stairs as `1544`, and the number of steps
    to `23`. Place the stairs at the edge of the **Box** **Brush** we placed earlier;
    finally, take the floor of the third room and put it adjacent to the stairs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加楼梯，从**Modes**面板中将**Linear Stair Brush**拖到级别上。将楼梯的宽度设置为`1544`，步数设置为`23`。将楼梯放在我们之前放置的**Box
    Brush**的边缘；最后，将第三个房间的地板放在楼梯旁边。
- en: '![The third room](img/image00245.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00245.jpeg)'
- en: To add the pit, we are going to need a Box subtractive brush. Another way of
    selecting a subtractive brush is by first selecting the shape of the brush, which
    in this case is the **Box Brush** and then, in the **Modes** panel, at the bottom,
    you can set the brush type to be additive or subtractive. Simply select subtractive
    and drag the brush onto the level.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加坑，我们需要一个减法刷。选择减法刷的另一种方法是首先选择刷子的形状，这种情况下是**Box Brush**，然后在**Modes**面板中，在底部，您可以设置刷子类型为添加或减去。只需选择减去并将刷子拖到级别上。
- en: We have to make sure that the pit is wide enough so that the player cannot jump
    across it and deep enough that the player cannot jump out of should he/she fall
    into it. Keeping that in mind, set the dimensions of the brush as `640 x 2304
    x 512`. Place the pit near the other end of the room.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须确保坑足够宽，以便玩家无法跳过去，而且足够深，以便玩家一旦掉进去就无法跳出来。牢记这一点，将刷子的尺寸设置为`640 x 2304 x 512`。将坑放在房间的另一端。
- en: '![The third room](img/image00246.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00246.jpeg)'
- en: We now have to place the walls. We will add walls to this room in a few steps.
    First up, select a Box brush, set its dimensions as `4096 x 64 x 512`, and place
    it along the longer side of the room. Duplicate and place the second wall on the
    other side.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要放置墙壁。我们将分几步向这个房间添加墙壁。首先，选择一个Box刷，将其尺寸设置为`4096 x 64 x 512`，并将其放在房间的较长一侧。复制并将第二面墙放在另一侧。
- en: '![The third room](img/image00247.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00247.jpeg)'
- en: Next, we need to place some walls along the stairs and corridors that lead to
    the third room. For that, set the dimensions as `1202 x 64 x 1024` and place them
    on either side of the stairs, ensuring all of them line up properly and there
    is no gap anywhere between the brushes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要沿着通向第三个房间的楼梯和走廊放置一些墙壁。为此，将尺寸设置为`1202 x 64 x 1024`，并将其放在楼梯的两侧，确保它们都正确对齐，并且在刷子之间没有任何间隙。
- en: '![The third room](img/image00248.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00248.jpeg)'
- en: In the preceding screenshot, you may have noticed that there is a gap between
    the walls of the corridor and the walls along the longer side of the room. Let's
    fill that in with a Box brush of dimensions `64 x 188 x 512`. Place two of them,
    one on either side, to fill in the gaps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可能已经注意到走廊的墙壁和房间较长一侧的墙壁之间有一些间隙。让我们用尺寸为`64 x 188 x 512`的Box刷填充。在两侧各放一个，以填补间隙。
- en: '![The third room](img/image00249.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00249.jpeg)'
- en: Finally, the wall that we are going to place is on the far side of the room,
    along the shorter side. Set the dimensions of the **Box Brush** as `64 x 2048
    x 512`, and place the final wall with a subtractive brush for the door.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们要放置的墙在房间的远端，沿着较短的一侧。将**Box Brush**的尺寸设置为`64 x 2048 x 512`，并使用减法刷放置最终的墙壁。
- en: '![The third room](img/image00250.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00250.jpeg)'
- en: The ceiling for the corridor will be of the dimensions `1202 x 1544 x 64`, and
    that of the room will be `4096 x 2056 x 64`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 走廊的天花板尺寸为`1202 x 1544 x 64`，房间的天花板尺寸为`4096 x 2056 x 64`。
- en: '![The third room](img/image00251.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00251.jpeg)'
- en: Now that we have blocked out the room, we need to add a few more things before
    we move on to the fourth and final room. First, we are going to place some panels
    on which there are switches, which the player can press to direct the object across
    the pit. Just duplicate the pedestals from the previous rooms and place them in
    this one to create the panels. Place them near any of the longer walls, and place
    them in such a way that the player can see the other wall.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经阻挡了房间，我们需要在继续第四个和最后一个房间之前添加一些东西。首先，我们要放置一些面板，上面有开关，玩家可以按下以引导物体穿过坑。只需从前几个房间复制基座并将其放在这个房间中以创建面板。将它们放在任何较长的墙壁附近，并以玩家可以看到另一面墙的方式放置。
- en: '![The third room](img/image00252.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![第三个房间](img/image00252.jpeg)'
- en: Finally, place a pedestal near the door. With this, we have finished off blocking
    out the third room. Now, let's block out the fourth and final room.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在门附近放置一个基座。有了这个，我们已经完成了第三个房间的阻挡。现在，让我们阻挡第四个和最后一个房间。
- en: The fourth room
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第四个房间
- en: We only have one more room to block out. In the previous three rooms, we had
    different puzzles and objectives. In the fourth room, we are going to combine
    all of the puzzles from the previous room. In this room, the objective of the
    player is similar to that in the previous room, direct an AI controlled object
    through obstacles such as doors and pits towards the other side of the room. The
    object will travel in a predefined path and keep on moving until it reaches its
    target. If it hits a door or falls down a pit, it resets from its starting position.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只剩下一个房间要挡住了。在前三个房间中，我们有不同的谜题和目标。在第四个房间，我们将结合前一个房间的所有谜题。在这个房间里，玩家的目标与前一个房间相似，引导一个由AI控制的对象穿过门和坑等障碍物，朝着房间的另一侧前进。对象将沿着预定义的路径移动，并持续移动直到到达目标。如果撞到门或掉进坑，它将从起始位置重置。
- en: Since we are going to have pits, the height of the room will be similar to the
    previous ones. Also, this is going to be the biggest room. Keeping that in mind,
    we will make the floor by selecting a **Box Brush** with the dimensions `5120
    x 2048 x 512`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将有坑，房间的高度将与以前的房间相似。而且，这将是最大的房间。记住这一点，我们将通过选择尺寸为`5120 x 2048 x 512`的**盒子刷**来制作地板。
- en: '![The fourth room](img/image00253.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![第四个房间](img/image00253.jpeg)'
- en: Now that we have the floor, we are going to make some pits. Again, with the
    subtractive mode selected, create a **Box brush** of dimensions `728 x 1928 x
    512`, and place it near the door. In this room, we are going to have three pits,
    so duplicate the subtractive brush by holding down the *Alt* key, and create two
    copies and place them along the map.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了地板，我们要做一些坑。再次选择减法模式，创建一个尺寸为`728 x 1928 x 512`的**盒子刷**，并将其放在门附近。在这个房间里，我们将有三个坑，所以通过按住*Alt*键复制减法刷，创建两个副本并将它们放在地图上。
- en: '![The fourth room](img/image00254.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![第四个房间](img/image00254.jpeg)'
- en: Next, comes the wall. For the longer side, simply duplicate the walls from the
    third room. In the **Details** panel, set the value of *X* as `5120`, and simply
    place the wall. Duplicate and place the other wall. For the shorter side, you
    can do the same—replicate and place the shorter side wall (the one with the door)
    at the other end of the room.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是墙。对于较长的一侧，只需复制第三个房间的墙。在**详细信息**面板中，将*X*的值设置为`5120`，然后放置墙壁。复制并放置另一面墙。对于较短的一侧，您可以做同样的事情——复制并放置较短的一侧墙壁（带门的那一面）在房间的另一端。
- en: '![The fourth room](img/image00255.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![第四个房间](img/image00255.jpeg)'
- en: Next, duplicate, set the *Z* value of the brush to `64`, and drag it upwards
    to form the roof.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，复制，将刷子的*Z*值设置为`64`，并向上拖动以形成屋顶。
- en: '![The fourth room](img/image00256.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![第四个房间](img/image00256.jpeg)'
- en: Finally, we are going to place a few pedestals where the switches are going
    to be.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将放置一些基座，开关将放置在那里。
- en: '![The fourth room](img/image00257.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![第四个房间](img/image00257.jpeg)'
- en: With that, we have now completed blocking out our last room!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们现在已经完成了挡住我们最后一个房间！
- en: Now that we have blocked out our rooms, let's place some assets, create materials,
    and apply them onto our level.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经挡住了我们的房间，让我们放置一些资产，创建材质，并将它们应用到我们的水平上。
- en: Content Browser
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容浏览器
- en: We briefly talked about **Content Browser** when we were discussing the Editor's
    user interface in the previous chapter. Let's talk about it a bit more. The **Content
    Browser** is where all of your assets of a project are stored and displayed. These
    assets include **Meshes**, **Textures**, **Materials**, **Skeletal Meshes**, **Blueprints**,
    **Map Files**, **Audio files**, and so on.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章讨论编辑器用户界面时，我们简要谈到了**内容浏览器**。让我们再多谈一些。**内容浏览器**是项目中存储和显示所有资产的地方。这些资产包括**网格**、**纹理**、**材质**、**骨骼网格**、**蓝图**、**地图文件**、**音频文件**等等。
- en: '![Content Browser](img/image00258.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![内容浏览器](img/image00258.jpeg)'
- en: In the preceding screenshot, you can see different folders, all named, based
    on what is contained within each of them. It is considered a good practice, and
    also prevents confusion later on if your project has a lot of assets, that you
    organize your assets based on their type.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，您可以看到不同的文件夹，每个文件夹都根据其中包含的内容命名。根据资产类型组织您的资产是一个良好的做法，也可以防止在项目有大量资产时后期混淆。
- en: Migrating and importing assets
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移和导入资产
- en: 'When creating a game, the main thing you need are assets, as without them your
    game would just be a blank map. You would want to import the assets you created
    for the game in your Project. For that, you need to import them first to your
    project file before you can use them. Currently, UE4 accepts the following assets:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建游戏时，您最需要的是资产，因为没有它们，您的游戏将只是一个空白地图。您会希望将为游戏创建的资产导入到项目中。为此，您需要先将它们导入到项目文件中，然后才能使用它们。目前，UE4接受以下资产：
- en: '**Texture files**: These are 2D images, which can be imported as `.jpg`, `.png`,
    `.bmp`, and `.tga` files.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纹理文件：这些是2D图像，可以导入为“.jpg”、“。png”、“。bmp”和“.tga”文件。
- en: '**Static Meshes/Skeletal Meshes**: Static Meshes are 3D objects created using
    a 3D software, such as Maya, Max, Blender, and so on. A Skeletal Mesh is a mesh
    that can be animated. You can import them as `.obj` files, as well as `.fbx` files.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态网格/骨骼网格：静态网格是使用3D软件（如Maya、Max、Blender等）创建的3D对象。骨骼网格是可以进行动画的网格。您可以将它们导入为“.obj”文件，以及“.fbx”文件。
- en: '**Audio files**: You can import audio files, such as music, sound effects,
    dialogues, and so on (mono), as a `.wav` file. You can also import audio files
    with more than one channel (stereo).'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频文件：您可以导入音频文件，如音乐、音效、对话等（单声道），作为“.wav”文件。您还可以导入具有多个通道（立体声）的音频文件。
- en: '**Script files**: You can also import script files into UE4 as `.lua` files.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本文件：您还可以将脚本文件作为“.lua”文件导入到UE4中。
- en: '**IES Light Profiles**: IES Light Profiles files define the intensity of light
    in an arc. This is usually used to make the light appear more realistic. These
    too can be imported into UE4 as `.ies` files.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IES灯光配置文件：IES灯光配置文件定义了弧线中的光强度。这通常用于使光线看起来更真实。这些文件也可以作为“.ies”文件导入到UE4中。
- en: '**Cubemap Texture**: Cubemap Texture is imported as an `.hdr` file. These files
    are used to map out the environment, especially if your game has outdoor scenes.
    These files contain information regarding color and brightness across a range.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**立方体贴图**：立方体贴图以`.hdr`文件的形式导入。这些文件用于绘制环境，特别是如果您的游戏有室外场景。这些文件包含有关范围内颜色和亮度的信息。'
- en: '**True Type Fonts**: You can also import various types of fonts for your game.
    Fonts are used either in huds, UI, and such, and can be imported as a `.ttf` file.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**True Type字体**：您还可以导入各种类型的字体用于您的游戏。字体通常用于huds、UI等，并且可以导入为`.ttf`文件。'
- en: Importing assets
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入资产
- en: There are two ways of importing assets that you have created for your game in
    your project file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将为您的游戏创建的资产导入到项目文件中。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To demonstrate how to import assets, a simple sphere was created in Maya and
    exported as an FBX file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何导入资产，Maya中创建了一个简单的球体，并导出为FBX文件。
- en: 'The first way is through the **Content Browser**:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是通过**Content Browser**：
- en: Click on the **Import** button located at the top of the **Content Browser**.![Importing
    assets](img/image00259.jpeg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Content Browser**顶部的**Import**按钮。![导入资产](img/image00259.jpeg)
- en: Once clicked, a window will open asking you which asset to import. Simply search
    where your asset is located, highlight it, and click on **Open**.![Importing assets](img/image00260.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击后，将打开一个窗口，询问您要导入哪个资产。只需搜索您的资产所在位置，突出显示它，然后单击**打开**。![导入资产](img/image00260.jpeg)
- en: When you click on **Open**, the **Import Options** window will open up, which
    has different import options, depending upon the type of asset you have imported.
    Once satisfied with the import settings, click on **Import** and the asset will
    be imported to your project file.![Importing assets](img/image00261.jpeg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**打开**后，将打开**导入选项**窗口，具体取决于您导入的资产类型。满意导入设置后，单击**导入**，资产将导入到您的项目文件中。![导入资产](img/image00261.jpeg)
- en: The second method to import assets to your project is by simply dragging the
    asset you want to import and dropping it in your **Content Browser**. To do so,
    simply click and drag the asset from wherever it is stored and release the left-mouse
    button over **Content Browser**. When you release the left-mouse button, the **Import
    Options** window will open, similar to the one mentioned in the first method.
    Again, once satisfied with the settings, click on **Import** and the asset will
    get imported.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将资产导入到项目的第二种方法是简单地拖动要导入的资产并将其放入**Content Browser**中。要这样做，只需从存储位置单击并拖动资产，然后释放左鼠标按钮到**Content
    Browser**上。释放左鼠标按钮时，将打开**导入选项**窗口，与第一种方法中提到的窗口类似。再次，满意设置后，单击**导入**，资产将被导入。
- en: Migrating assets
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移资产
- en: Sometimes, you may need certain assets from a different project file. In such
    cases, the methods mentioned previously regarding importing assets will not work,
    since the contents of a project are saved on your system as either a `.uasset`
    file or `.umap` file. Therefore, UE4 will not be able to import them. You, therefore,
    will have to perform the **Migrate Asset** action.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要来自不同项目文件的某些资产。在这种情况下，之前提到的导入资产的方法将不起作用，因为项目的内容保存在您的系统上，格式为`.uasset`文件或`.umap`文件。因此，UE4将无法导入它们。因此，您必须执行**迁移资产**操作。
- en: When we create our project, we select **No Starter Content** since we do not
    require all of them. It would eat up unnecessary space. We do, however, require
    a few assets, particularly wall and floor materials. To demonstrate this, a new
    project with all of the starter content has been set up.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时，我们选择**无起始内容**，因为我们不需要所有内容。这将占用不必要的空间。但是，我们确实需要一些资产，特别是墙和地板材料。为了演示这一点，已经设置了一个带有所有起始内容的新项目。
- en: '![Migrating assets](img/image00262.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![迁移资产](img/image00262.jpeg)'
- en: 'Here is a project with all of the starter content. What we need are two materials,
    namely **M_Basic_Floor** and **M_Basic_Wall**. Migrate these two materials and
    follow these steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个带有所有起始内容的项目。我们需要的是两种材料，即**M_Basic_Floor**和**M_Basic_Wall**。迁移这两种材料并按照以下步骤操作：
- en: Highlight both **M_Basic_Floor** and **M_Basic_Wall** and right-click to open
    a menu. In the menu, hover the cursor over **Asset Actions**, and click on **Migrate**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 突出显示**M_Basic_Floor**和**M_Basic_Wall**，右键单击以打开菜单。在菜单中，将光标悬停在**资产操作**上，并单击**迁移**。
- en: After you have clicked on it, a window will open up telling you that the following
    asset(s) will be migrated to another project.![Migrating assets](img/image00263.jpeg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击后，将打开一个窗口，告诉您以下资产将迁移到另一个项目。![迁移资产](img/image00263.jpeg)
- en: Once you click on **OK**, another window will open up asking you where you want
    to move the asset. You would want to store them in your project's `Content` folder.
    When this opens up, find your project folder (which, if you recall, is in `My
    Documents`), and store it in the **Content** subfolder.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**确定**后，将打开另一个窗口，询问您要将资产移动到何处。您希望将它们存储在项目的`Content`文件夹中。打开时，找到您的项目文件夹（如果您记得的话，它在`我的文档`中），并将其存储在**Content**子文件夹中。
- en: After clicking on it, you will get a prompt saying that **the asset has been
    successfully migrated**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击后，您将收到提示说**资产已成功迁移**。
- en: If you now go back to the Blockmania project, you will see **M_Basic_Floor**
    and **M_Basic_Wall** displayed in **Content Browser** in the **Materials** subfolder.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在返回到Blockmania项目，您将看到**Content Browser**中的**Materials**子文件夹中显示了**M_Basic_Floor**和**M_Basic_Wall**。
- en: '![Migrating assets](img/image00264.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![迁移资产](img/image00264.jpeg)'
- en: Placing actors
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放置演员
- en: Once you have all of your assets in your **Content Browser**, the next step
    is to place them in your game. We are going to use the cube mesh in the **Content
    Browser** to create objects in our game, such as the key cube, the AI-controlled
    object, the doors, and so on.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在**Content Browser**中拥有所有资产，下一步是将它们放置在游戏中。我们将使用**Content Browser**中的立方体网格来创建游戏中的对象，例如关键立方体，AI控制的对象，门等。
- en: First, let's make the door that opens when you place the key cube on the pedestal.
    Simply drag the **TemplateCube_Rounded** static mesh from **Content Browser**
    and place it in the hole where the door is supposed to go. Set its dimensions
    using the scale tool, so that it perfectly fits.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们制作门，在您将钥匙方块放在基座上时打开。只需从**内容浏览器**中拖动**TemplateCube_Rounded**静态网格，并将其放置在门应该放置的位置。使用缩放工具设置其尺寸，使其完美适合。
- en: '![Placing actors](img/image00265.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![放置角色](img/image00265.jpeg)'
- en: To make things easier and convenient, you can change the name of the cube to
    `Door01` in the **Details** panel. For the rest of the door, since the dimensions
    of the hole were the same, you can simply duplicate this actor and place the copies.
    Finally, since these will be moving and will not be stationary in the game, set
    its mobility type to **Movable**.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更加简单和方便，您可以在**详细信息**面板中将方块的名称更改为`Door01`。对于其他的门，由于洞口的尺寸相同，您可以简单地复制这个角色并放置副本。最后，由于这些将会移动并且不会在游戏中保持静止，将其移动性类型设置为**可移动**。
- en: Tip
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Use different perspectives to set the dimensions and to align the door with
    the hole.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同的视角来设置尺寸，并将门与洞口对齐。
- en: Next, let's place the big doors that the player will encounter in the middle
    of the rooms. Again, take the **TemplateCube_Rounded** actor from the **Content
    Browser** and place it in the second room. Set its dimensions so that it blocks
    the character from moving to the other side of the room. Name this `Room_Door01`.
    Similarly, duplicate and place it in the fourth room, where the ledges are. However,
    you will have to modify the dimensions of the doors that go in the fourth room,
    since the dimensions of the fourth room are a little different from the second
    room.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将玩家在房间中间遇到的大门放置在房间中间。再次从**内容浏览器**中取出**TemplateCube_Rounded**角色，并将其放置在第二个房间。设置其尺寸，以阻止角色移动到房间的另一侧。将其命名为`Room_Door01`。同样，在第四个房间中复制并放置它，但是你需要修改第四个房间的门的尺寸，因为第四个房间的尺寸与第二个房间有些不同。
- en: '![Placing actors](img/image00266.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![放置角色](img/image00266.jpeg)'
- en: 'Next, we have to place the key cubes, which the player has to collect and place
    in order to progress to the next room, or to unlock other key cubes. We will,
    again, use **TemplateCube_Rounded**. Set its scale to `0.15` along all three coordinates
    and place them in our level. Here is a quick rundown of where the key cubes will
    be placed in the four rooms:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须放置玩家必须收集并放置以进入下一个房间或解锁其他钥匙方块的钥匙方块。我们将再次使用**TemplateCube_Rounded**。将其比例设置为`0.15`，并将其放置在我们的关卡中。以下是四个房间中钥匙方块的放置快速概述：
- en: '**First room**: In the first room, we will only require one key cube. You can
    place it anywhere near the middle of the room.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第一个房间**：在第一个房间，我们只需要一个钥匙方块。您可以将它放在房间中间的任何地方。'
- en: '**Second room**: In the second room, we will require two key cubes. Place the
    first cube on one side of the big door and place the second cube on the other
    side. The first cube will be the locked one and the second cube is what the player
    will have to place on the pedestal to unlock it.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第二个房间**：在第二个房间，我们需要两个钥匙方块。将第一个方块放在大门的一侧，将第二个方块放在另一侧。第一个方块将被锁住，玩家必须将第二个方块放在基座上才能解锁它。'
- en: '**Third room**: In the third room, we will require only one key cube, which
    the AI object will unlock upon hitting the target. So, place it on the other side
    of the pit near the door that leads to the fourth room.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三个房间**：在第三个房间，我们只需要一个钥匙方块，AI对象击中目标后将解锁它。因此，将它放在靠近通往第四个房间的门边坑的另一侧。'
- en: '**Fourth room**: In the fourth room, place the key cube on the other side of
    the room. This will also be unlocked once the AI object hits the target.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第四个房间**：在第四个房间，将钥匙方块放在房间的另一侧。当AI对象击中目标时，它也将被解锁。'
- en: We have placed all of the essential assets in our game. Let's add some decorative
    cubes in our level. Since decorative assets are going to remain stationary, and
    not move in the game, you should set their mobility to **Static**. Just place
    cubes around the map, in different patterns and arrange them as you see fit.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在游戏中放置了所有必要的资产。让我们在我们的关卡中添加一些装饰性的方块。由于装饰性资产将保持静止，不会在游戏中移动，您应该将它们的移动性设置为**静态**。只需在地图周围放置方块，以不同的图案排列它们。
- en: '![Placing actors](img/image00267.jpeg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![放置角色](img/image00267.jpeg)'
- en: Materials
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材质
- en: In UE4, before you can apply textures to an object, you first have to create
    materials. A material is how an object will be rendered in a game, it is a collection
    of shaders containing many properties that can be applied to objects and rendered
    in the game. In more technical terms, when light from a light sources fall on
    a surface or object, the material is what determines how the light will interact
    with said surface or object (the color, texture, how rough or smooth the surface
    is, how metallic it is, and so on).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在UE4中，在将纹理应用到对象之前，您首先必须创建材质。材质是游戏中对象的渲染方式，它是包含许多属性的着色器集合，可以应用于对象并在游戏中渲染。更加技术性地说，当光源的光线照射到表面或对象上时，材质决定了光线如何与表面或对象相互作用（颜色、纹理、表面的粗糙或光滑程度、金属质感等）。
- en: UE4 uses *Physically-based Shading*. In earlier versions of Unreal Engine, the
    material had some arbitrary properties, such as DiffusePower, Custom Lighting
    Diffuse, and so on. In UE4, the materials have more relatable properties, such
    as base color, metallic, roughness, and so on, making the process easier to understand.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: UE4使用*基于物理的着色*。在虚幻引擎的早期版本中，材质具有一些任意的属性，比如漫反射强度、自定义光照漫反射等等。在UE4中，材质具有更多相关的属性，比如基础颜色、金属质感、粗糙度等等，使得这个过程更容易理解。
- en: A material is created in what is known as a Material Editor. So, before we start
    creating our own materials, let's first talk about it and its user interface.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 材质是在所谓的材质编辑器中创建的。因此，在我们开始创建自己的材质之前，让我们先谈谈它及其用户界面。
- en: The Material Editor
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材质编辑器
- en: 'The Material Editor is a simple, yet extremely powerful tool that you can use
    to create materials for your objects. For example, you can apply a texture file
    to the diffuse channel of your material and then use it on your assets. For our
    game, we are going to create our own materials from scratch. To access the Material
    Editor, you first need to create a new material, or double-click on an existing
    material. To create a new material, click on the **Add New** button located at
    the top-left corner of **Content Browser** and select **Material**, which will
    be under the **Create Basic Asset** section. Once done, you will see a new material
    created. Double-click on it to open the Material Editor. Once opened, you should
    see this window:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 材质编辑器是一个简单但非常强大的工具，您可以用它来为您的对象创建材质。例如，您可以将纹理文件应用于材质的漫反射通道，然后在您的资产上使用它。对于我们的游戏，我们将从头开始创建自己的材质。要访问材质编辑器，您首先需要创建一个新材质，或者双击现有材质。要创建新材质，请单击**内容浏览器**左上角的**添加新**按钮，然后选择**材质**，它将位于**创建基本资产**部分下方。完成后，您将看到创建了一个新材质。双击它以打开材质编辑器。打开后，您应该看到这个窗口：
- en: '![The Material Editor](img/image00268.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![材质编辑器](img/image00268.jpeg)'
- en: Let's first look at the editor itself and its user interface. As with the Editor,
    we will divide the Material Editor user interface into sections and go through
    them individually.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下编辑器本身及其用户界面。与编辑器一样，我们将材质编辑器用户界面分成几个部分，并逐个进行介绍。
- en: '![The Material Editor](img/image00269.jpeg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![材质编辑器](img/image00269.jpeg)'
- en: The tab and menu bar
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标签和菜单栏
- en: At the top, we have the tab and menu bar. The tab bar is similar to that of
    the Editor.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部，我们有标签和菜单栏。标签栏类似于编辑器的标签栏。
- en: '![The tab and menu bar](img/image00270.jpeg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![标签和菜单栏](img/image00270.jpeg)'
- en: 'Below the tab bar, we have the menu bar. As with the menu bar in the Editor,
    it offers all of the general commands and actions. They are described as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在标签栏下面，我们有菜单栏。与编辑器中的菜单栏一样，它提供了所有的常规命令和操作。它们的描述如下：
- en: '**File**: Clicking on this will open up the **File** menu. From here, you can
    perform actions such as saving the material you have created, open an asset from
    the **Content Browser**, and so on.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件**：单击此将打开**文件**菜单。从这里，您可以执行诸如保存您创建的材质、从**内容浏览器**打开资产等操作。'
- en: '**Edit**: This will open up the **Edit** menu. Here, you can undo or redo any
    actions you might have performed. You can also access the Editor and project settings
    from here.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**：这将打开**编辑**菜单。在这里，您可以撤消或重做您可能执行的任何操作。您还可以从这里访问编辑器和项目设置。'
- en: '**Asset**: From the **Asset** menu, you can find the material you are creating
    in the **Content Browser** and open the current material''s reference viewer window.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产**：从**资产**菜单中，您可以在**内容浏览器**中找到您正在创建的材质，并打开当前材质的引用查看器窗口。'
- en: '**Window**: In this menu, you can choose what panel you want in your Material
    Editor window, search for a particular node in the **Graph** panel, access the
    plugins window, and more.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**窗口**：在此菜单中，您可以选择在材质编辑器窗口中要显示的面板，搜索**图形**面板中的特定节点，访问插件窗口等。'
- en: '**Help**: Finally, if you want to learn more about the Material Editor or need
    to find a solution to a problem, you can access the wiki page and the official
    Epic documentation from here.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**：最后，如果您想了解更多关于材质编辑器或需要找到问题的解决方案，您可以从这里访问维基页面和官方 Epic 文档。'
- en: The toolbar
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具栏
- en: Once again making the comparison with the toolbar in the Editor, the toolbar
    here displays all of the most commonly used actions that you may perform while
    making your material.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 再次与编辑器中的工具栏进行比较，这里的工具栏显示了您在制作材质时可能执行的所有最常用的操作。
- en: '![The toolbar](img/image00271.jpeg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![工具栏](img/image00271.jpeg)'
- en: '**Save**: Starting from the left, represented by a floppy disk, is the **Save**
    button. This is to save any modifications you have made to the material.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存**：从左边开始，由软盘表示的是**保存**按钮。这是保存您对材质所做的任何修改。'
- en: '**Find in CB**: **Find in CB** (or Content Browser), depicted by a magnifying
    glass, locates and highlights the current material you have opened in the Material
    Editor in the **Content Browser**.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 CB 中查找**：**在 CB 中查找**（或内容浏览器），由放大镜表示，可以在**内容浏览器**中定位并突出显示您在材质编辑器中打开的当前材质。'
- en: '**Apply**: Next, we have the **Apply** button. If you have already applied
    the current material to an object in the game, once you have made any modification
    to it, clicking on **Apply** will update the material in the current scene.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用**：接下来是**应用**按钮。如果您已经将当前材质应用于游戏中的对象，一旦对其进行任何修改，单击**应用**将更新当前场景中的材质。'
- en: '**Search**: Need to find a node or connection? You can do so by clicking on
    **Search** and typing in whatever you wish to find. When you click on it, the
    **Search** panel opens up at the bottom of the material editor. Simply type in
    whatever it is you want to find, and it will give you the results in the panel.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**：需要找到节点或连接吗？您可以通过单击**搜索**并输入您想要查找的内容来进行。当您单击它时，**搜索**面板将在材质编辑器底部打开。只需输入您想要查找的内容，它将在面板中给出结果。'
- en: '**Home**: The **Home** button refocuses the Graph panel to the material input
    description (the node that you first see in the Material Editor, with all those
    inputs). This comes in handy when you are creating a very complex material, since
    you will have a lot of nodes connected to each other and might lose sight of the
    material description.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页**：**主页**按钮将图形面板重新聚焦到材质输入描述（在材质编辑器中首先看到的节点，带有所有这些输入）。当您创建非常复杂的材质时，这将非常方便，因为您将有许多节点彼此连接，并可能会忽略材质描述。'
- en: '**Clean Up**: The **Clean Up** button deletes any nodes that are not connected
    to the material inputs. This is very handy since even unconnected nodes will make
    the material unnecessarily heavy in terms of memory usage.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清理**：**清理**按钮会删除未连接到材质输入的任何节点。这非常方便，因为即使未连接的节点也会使材质在内存使用方面变得不必要地沉重。'
- en: '**Connectors**: This is, by default, turned on. When turned off, any unused
    input or output pins (pins that are not connected to anything), are hidden. This
    is a good way of keeping your workspace clean and organized as it removes clutter
    from view.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接器**：默认情况下，此选项已打开。关闭时，任何未使用的输入或输出引脚（未连接到任何东西的引脚）将被隐藏。这是保持工作区清洁和有组织的好方法，因为它会清除视图中的混乱。'
- en: '**Live Preview**: This, too, is by default turned on. When turned on, any modifications
    you make to the material are updated in real time in the **Viewport** panel.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时预览**：这也是默认打开的。打开时，您对材质所做的任何修改都将在**视口**面板中实时更新。'
- en: '**Live Nodes**: When enabled, it updates the material in each node in real
    time.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时节点**：启用时，它会实时更新每个节点中的材质。'
- en: '**Live Update**: When you toggle this on, it compiles the shaders and all of
    the nodes and expressions in real time, and it does so every time you change,
    add, remove a node or change a value of a parameter.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**：当您打开此选项时，它会实时编译着色器和所有节点和表达式，每次您更改、添加、删除节点或更改参数值时都会这样做。'
- en: '**Stats**: When turned on, you can see the stats of the material you have created
    at the bottom of the Material Editor. This can give you an idea of just how heavy
    your material is.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统计**：打开时，您可以在材质编辑器底部看到您创建的材质的统计信息。这可以让您了解您的材质有多重。'
- en: '**Mobile Stats**: This is similar to **Stats**, but gives you the material
    stats and any errors for mobile devices.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动设备统计**：这类似于**统计**，但会为移动设备提供材质统计和任何错误信息。'
- en: The Palette panel
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调色板面板
- en: The Palette panel contains all of the nodes that can be used in the Material
    Editor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板面板包含可以在材质编辑器中使用的所有节点。
- en: '![The Palette panel](img/image00272.jpeg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![调色板面板](img/image00272.jpeg)'
- en: All of the functions, expressions, and so on are categorically listed here.
    You have the category on the top and you can filter what type of nodes you want
    displayed using it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的函数、表达式等都按类别列在这里。您可以在顶部选择类别，并使用它来过滤您想要显示的节点类型。
- en: If you wish to find a specific node, you can search for it in the **Search**
    bar, located below the **Category** bar.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要找到特定的节点，您可以在下方的**类别**栏下搜索它。
- en: The Stats panel
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统计面板
- en: As mentioned previously, the **Stats** panel displays all of the stats regarding
    the material you have created.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**统计**面板显示了您创建的材质的所有统计信息。
- en: '![The Stats panel](img/image00273.jpeg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![统计面板](img/image00273.jpeg)'
- en: If you have turned on the **Mobile Stats** in the toolbar, you will also see
    the stats for mobile devices displayed here. This basically shows you how many
    instructions and shaders are in your material. This will give you an idea as to
    how big and heavy your material is.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在工具栏中打开了**移动设备统计**，您还将在此处看到移动设备的统计信息。这基本上向您显示了您的材质中有多少指令和着色器。这将让您了解您的材质有多大和多重。
- en: The Details panel
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 详细面板
- en: The **Details** panels displays the general properties of the material, such
    as **Material Domain**, which means what type of material you want to create.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**详细**面板显示了材质的一般属性，例如**材质域**，这意味着您想要创建什么类型的材质。'
- en: '![The Details panel](img/image00274.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![详细面板](img/image00274.jpeg)'
- en: Normal materials, such as the ones you apply to actors, are **Surface** materials.
    If you want your material to be a **Decal** (which we will discuss in the next
    chapter), you can switch to **Decal**, and so on.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 普通材质，例如应用于角色的材质，是**表面**材质。如果您希望您的材质是**贴花**（我们将在下一章中讨论），您可以切换到**贴花**等。
- en: You can also set properties of any node that you have selected, in this panel.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在此面板中设置所选节点的属性。
- en: The Viewport panel
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视口面板
- en: The **Viewport** panel is where you can preview the material you are creating.
    If the **Live Preview** option is enabled, any modifications you make will be
    updated in real time and previewed here.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**视口**面板是您可以预览正在创建的材质的地方。如果启用了**实时预览**选项，您所做的任何修改都将实时更新并在此处预览。'
- en: '![The Viewport panel](img/image00275.jpeg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![视口面板](img/image00275.jpeg)'
- en: By default, the shape primitive is a sphere. You can switch to either a cylinder,
    a plane, a cube, or a specific mesh from the Material Editor using the buttons
    at the top of the Viewport Panel. You can also toggle the grid on/off, and also
    toggle the Live Preview on/off from here.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，形状原语是一个球体。您可以使用视口面板顶部的按钮切换到圆柱体、平面、立方体或材质编辑器中的特定网格。您还可以在这里切换网格的显示/隐藏，以及切换实时预览的显示/隐藏。
- en: The Graph panel
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形面板
- en: The last element of the Material Editor's user interface is the Graph panel.
    This is where you create your material.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 材质编辑器用户界面的最后一个元素是图形面板。这是您创建材质的地方。
- en: '![The Graph panel](img/image00276.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图形面板](img/image00276.jpeg)'
- en: Before we continue, there are a few terms and expressions you should be aware
    of since we will be using them quite a lot in this book. Firstly, we have something
    called a node. A node is anything that you connect to either make your material
    or script in blueprint. It could be a variable, an expression, and so on. In the
    preceding screenshot, the node here would be the long panel you see.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，有一些术语和表达式您应该知道，因为我们在本书中会经常使用它们。首先，我们有一个叫做节点的东西。节点是您连接到材质或蓝图脚本的任何东西。它可以是变量、表达式等。在上面的截图中，这里的节点将是您看到的长面板。
- en: Now, every node has either an input, an output, or both. Input is any value
    or expression a node takes, and is located on the left side of the node as white
    pins. Coming back to the screenshot above, the node accepts quite a number of
    inputs, each input corresponding to a different property of the material.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个节点都有输入、输出或两者。输入是节点接受的任何值或表达式，位于节点的左侧作为白色引脚。回到上面的截图，该节点接受相当多的输入，每个输入对应材质的不同属性。
- en: The output pin is what the node returns (a value, expression, and so on), and
    it is also represented by white circular pins. They are located on the right side
    of the node. When connected to two or more nodes, you connect the output pin of
    the first node to the input pin of the second node, and so on, to create a chain
    of nodes.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 输出引脚是节点返回的内容（值、表达式等），也用白色圆形引脚表示。它们位于节点的右侧。当连接到两个或更多节点时，你将第一个节点的输出引脚连接到第二个节点的输入引脚，依此类推，以创建一系列节点。
- en: In the preceding screenshot, you can see a long node with a lot of inputs. This
    is the material input. Each input has a different effect on the material. You
    might also have noticed that some of the inputs are white, while the rest are
    darkened. The darkened nodes are the ones that are currently disabled and cannot
    be used. Which input is enabled and which is disabled depends upon the material's
    **Blend Mode**, which can be found and changed in the **Details** panel. For example,
    look at the screenshot, the **Opacity** node is currently disabled. This is because
    the **Blend Mode** set for the material is **Opaque**, so naturally, you cannot
    set the opacity of the material. To enable it, you will have to change the **Blend
    Mode** to **Translucent**.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到一个带有许多输入的长节点。这是材料输入。每个输入对材料有不同的影响。你可能也注意到一些输入是白色的，而其他的是变暗的。变暗的节点是当前禁用的，不能使用。哪个输入被启用，哪个被禁用取决于材料的**混合模式**，可以在**详细信息**面板中找到并更改。例如，看一下截图，**不透明度**节点当前被禁用。这是因为材料的**混合模式**设置为**不透明**，所以自然地，你不能设置材料的不透明度。要启用它，你必须将**混合模式**更改为**半透明**。
- en: 'Let''s go over the most commonly used material inputs:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下最常用的材料输入：
- en: '**Base Color**: This has to do with the color of the material. What the underlying
    color will be.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础颜色**：这与材料的颜色有关。底色将是什么颜色。'
- en: '**Metallic**: This deals with how much metallic luster you want in your material.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属度**：这涉及到你希望你的材料中有多少金属光泽。'
- en: '**Specular**: Should you want to make your material smooth and shiny, this
    is the node for you. This deals with how much light is reflected off the material.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高光**：如果你想让你的材料光滑而有光泽，这就是你需要的节点。这涉及到材料反射多少光。'
- en: '**Roughness**: The opposite of **Specular**, if you want your material to be
    unsmooth or rugged, this input is what you need.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粗糙度**：与**高光**相反，如果你希望材料不光滑或崎岖，这个输入就是你需要的。'
- en: '**Emissive Color**: If you want your asset to glow, you can set it here, in
    the Emissive Color input.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自发光颜色**：如果你希望你的资产发光，你可以在这里设置它，输入自发光颜色。'
- en: '**Opacity**: This deals with how translucent you want your object to be.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不透明度**：这涉及到你希望你的物体有多少半透明。'
- en: There are other inputs as well, but these are the main inputs that you should
    know for now.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他输入，但这些是你现在应该知道的主要输入。
- en: Applying materials
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用材料
- en: 'There are two ways of applying materials to objects. The first way to apply
    materials is simple and straightforward. Let''s use the first method to apply
    the floor material. We will apply **M_Basic_Floor**. To apply the material:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将材料应用到物体上。第一种方法是简单直接的。让我们使用第一种方法来应用地板材料。我们将应用**M_Basic_Floor**。要应用材料：
- en: Select `M_Basic_Floor` from the Content Browser.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从内容浏览器中选择`M_Basic_Floor`。
- en: Drag it on to the floor surface.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖放到地板表面上。
- en: Release the left-mouse button, and the material will be applied to the floor.![Applying
    materials](img/image00277.jpeg)
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放鼠标左键，材料将被应用到地板上。![应用材料](img/image00277.jpeg)
- en: 'We will use the second method of applying materials for the walls. We will
    apply `M_Basic_Wall` to our walls. To do so, follow these steps:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第二种方法来为墙壁涂抹材料。我们将把`M_Basic_Wall`应用到我们的墙壁上。要做到这一点，请按照以下步骤进行：
- en: Select any of the wall surfaces.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择任何一个墙面。
- en: In the **Details** panel, under the **Surface Materials** section, you will
    see something called **Element 0**. Next to it, there will be a menu button with
    **None** written on it.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**详细信息**面板中，在**表面材料**部分，你会看到一个名为**Element 0**的东西。它旁边会有一个菜单按钮，上面写着**None**。
- en: Open the menu. You will see all of the materials in the Content Browser listed
    out. Simply select **M_Basic_Wall** from the list, and the material will be applied
    to the wall.![Applying materials](img/image00278.jpeg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开菜单。你会看到内容浏览器中列出的所有材料。只需从列表中选择**M_Basic_Wall**，材料就会应用到墙上。![应用材料](img/image00278.jpeg)
- en: Using any of the two methods, apply the materials to all of the walls and floors
    in the game.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何两种方法，将材料应用到游戏中的所有墙壁和地板上。
- en: Creating the materials
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建材料
- en: Now that we have covered the Material Editor's user interface and seen how to
    apply them onto objects, let's go on and create the materials for our level.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了材料编辑器的用户界面，并看到了如何将它们应用到物体上，让我们继续创建我们关卡的材料。
- en: Pedestals
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基座
- en: First, we are going to create a material for the pedestals where the player
    has to place the cubes. We are going to create a fairly simple material. The pedestal
    we will create will be yellow in color and will be a bit shiny. First, create
    a new material in **Content Browser** and name it `Pedestal_Material1`. Then double-click
    on it to open the Material Editor.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为玩家必须放置方块的基座创建一个材料。我们将创建一个相当简单的材料。我们将创建的基座将是黄色的，并且会有点闪亮。首先，在**内容浏览器**中创建一个新的材料，命名为`Pedestal_Material1`。然后双击打开材料编辑器。
- en: The first thing we are going to do is add something to the **Base Color** input.
    What we need to create is something called a **Constant3Vector** node. To create
    it, simply drag the node from the **Palette** panel and place it in the Graph
    panel. Another much quicker way of creating a **Constant3Vector** node is by holding
    down *3* and left-clicking anywhere in the Graph panel. The node will be formed
    wherever you click. Once formed, connect it to the **Base Color** input. You can
    set the color to yellow. To do this, simply select the **Constant3Vector** node
    and in the **Details** panel, you will see a property called **Constant**, with
    a black bar next to it. Click on the black bar, which will open the **ColorPicker**
    window. Set the color to yellow and click on **OK**. Now connect it to the Base
    Color input. You will see the Viewport panel updated with the change you have
    made.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一件事是向**Base Color**输入添加一些内容。我们需要创建的是一个称为**Constant3Vector**节点的东西。要创建它，只需从**Palette**面板拖动节点并放置在**Graph**面板中。创建**Constant3Vector**节点的另一种更快的方法是按住*3*并在**Graph**面板的任何位置单击左键。节点将在您单击的位置形成。形成后，将其连接到**Base
    Color**输入。您可以将颜色设置为黄色。要做到这一点，只需选择**Constant3Vector**节点，在**Details**面板中，您将看到一个名为**Constant**的属性，旁边有一个黑色条。单击黑色条，将打开**ColorPicker**窗口。将颜色设置为黄色，然后单击**确定**。现在将其连接到**Base
    Color**输入。您将看到**Viewport**面板已更新为您所做的更改。
- en: 'Now that we have the base color, we are going to add the shine. For this, we
    are going to create a **Constant** node. Again, you can either drag it from the
    palette panel or hold *1* and click anywhere on the Graph panel. In the Details
    panel, set its value to `0.5`, then connect it to the **Specular** input. Your
    Graph editor will look something like this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基本颜色，我们要添加光泽。为此，我们将创建一个**Constant**节点。同样，您可以从调色板面板拖动它，或者按住*1*并单击图形面板的任何位置。在详细面板中，将其值设置为`0.5`，然后将其连接到**Specular**输入。您的图形编辑器将看起来像这样：
- en: '![Pedestals](img/image00279.jpeg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![基座](img/image00279.jpeg)'
- en: Now that you have created the material, click on **Save**, then apply it to
    the pedestals.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了材质，请单击**保存**，然后将其应用到基座上。
- en: For the pedestals where the buttons will be, create a copy of **Pedestal_Material1**
    by right-clicking on it and selecting **Duplicate**, rename it to **Pedestal_Material2**,
    and in the material editor, simply change the base color to blue, save it, and
    apply it.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 对于按钮所在的基座，通过右键单击**Pedestal_Material1**创建一个副本，选择**Duplicate**，将其重命名为**Pedestal_Material2**，在材质编辑器中，只需将基本颜色更改为蓝色，保存并应用。
- en: '![Pedestals](img/image00280.jpeg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![基座](img/image00280.jpeg)'
- en: Doors
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 门
- en: For the doors, we are going to do pretty much the same thing we did when we
    created the materials for the pedestals. The only difference here is that we will
    make the doors a bit see-through, and make the material glassy. With that said,
    create a material for the door, and name it **Door_Material**.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于门，我们要做的基本上与我们为基座创建材质时所做的事情差不多。这里唯一的区别是我们会让门稍微透明一些，并使材质更玻璃化。说到这里，为门创建一个材质，并将其命名为**Door_Material**。
- en: In the Material Editor, the first thing you need to do is set the material's
    blend mode to **Translucent**. After that, create a **Constant3Vector**, pick
    a light blue color, and connect it to the **Base Color** input.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在材质编辑器中，您需要做的第一件事是将材质的混合模式设置为**半透明**。之后，创建一个**Constant3Vector**，选择浅蓝色，并将其连接到**Base
    Color**输入。
- en: Now, create three **Constant** nodes. Set the value of the first node as `1`,
    and connect it to the **Specular** input. Set the value of the **Second** node
    as `0.5`, and connect it to the **Opacity** input. Our glass material is now translucent.
    However, there is still something left, a very fundamental property of glass—refraction!
    The refraction input is located at the bottom of the input panel. Set the value
    of the third **Constant** node to `0.35`, and connect it to the **Refraction**
    input.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建三个**Constant**节点。将第一个节点的值设置为`1`，并将其连接到**Specular**输入。将**第二**节点的值设置为`0.5`，并将其连接到**Opacity**输入。我们的玻璃材质现在是半透明的。然而，还有一些东西，玻璃的一个非常基本的属性——折射！折射输入位于输入面板的底部。将第三个**Constant**节点的值设置为`0.35`，并将其连接到**Refraction**输入。
- en: '![Doors](img/image00281.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![门](img/image00281.jpeg)'
- en: We have created a basic glass material for our door. Save this and apply it
    to the doors.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为门创建了一个基本的玻璃材质。保存并将其应用到门上。
- en: '![Doors](img/image00282.jpeg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![门](img/image00282.jpeg)'
- en: Key Cubes
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键立方体
- en: Let's make the set of materials a bit interesting. We are going to make it red.
    Also, we are going to make it flash so as to grab the player's attention. Create
    a material and name it **KeyCube_Material**.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让一组材质变得有趣一些。我们将把它变成红色。此外，我们将使其闪烁以吸引玩家的注意。创建一个材质，并命名为**KeyCube_Material**。
- en: First, create a **Constant3Vector** node, set the color to red, and connect
    it to the **Base Color** input. This will be our base color. For the glowing effect,
    we are going to use a **Linear Interpolate** function. A **Linear Interpolate**
    takes in three inputs. It blends the first two inputs (**A** and **B**) and the
    third input is used as a mask (Alpha). For input **A**, create a copy of the **Constant3Vector**
    node you created for the base color and connect it. For input **B**, create another
    **Constant3Vector** node, set the color to a lighter shade of red and connect
    it.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个**Constant3Vector**节点，将颜色设置为红色，并将其连接到**Base Color**输入。这将是我们的基本颜色。对于发光效果，我们将使用**线性插值**函数。**线性插值**接受三个输入。它混合前两个输入（**A**和**B**），第三个输入用作掩码（Alpha）。对于输入**A**，创建您为基本颜色创建的**Constant3Vector**节点的副本并连接。对于输入**B**，创建另一个**Constant3Vector**节点，将颜色设置为较浅的红色并连接。
- en: We have our inputs. We now need to create something for the **Alpha** input.
    Since the key cube will be flashing in regular intervals, we can use the **Sine**
    or **Cosine** function. You can find any of the two in the palette panel. Place
    it in the Graph panel, and connect it to the **Alpha** input. Now, for the **Sine**
    or **Cosine** function to actually work, it needs some input data. We are going
    to create a **Time input data** node. Simply type in `Time` in the Palette panel,
    place the node in the Graph panel, and connect it to the **Sine** or **Cosine**
    node. Finally, after doing all that, connect the **Linear Interpolate** to the
    **Emissive** input.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了输入。现在我们需要为**Alpha**输入创建一些东西。由于关键方块将会定期闪烁，我们可以使用**Sine**或**Cosine**函数。您可以在调色板面板中找到其中任何一个。将它放在图形面板中，并连接到**Alpha**输入。现在，为了让**Sine**或**Cosine**函数真正起作用，它需要一些输入数据。我们将创建一个**时间输入数据**节点。只需在调色板面板中输入`Time`，将节点放在图形面板中，并将其连接到**Sine**或**Cosine**节点。最后，在完成所有这些之后，将**线性插值**连接到**发光**输入。
- en: '![Key Cubes](img/image00283.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![关键方块](img/image00283.jpeg)'
- en: And there you have it. We now have a flashing material for our main key cube.
    Apply it to all the key cubes.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的主要关键方块有了一个闪烁的材质。将它应用到所有的关键方块上。
- en: '![Key Cubes](img/image00284.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![关键方块](img/image00284.jpeg)'
- en: Decorative assets
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装饰性资产
- en: For our decorative assets, we are going to create a material that changes colors
    periodically. First up, create a material and name it **DecorativeAsset_Material**.
    For the changing effect, we are going to use a **Rotator** node. If you have a
    proper texture, and wish to have it rotate, you can do so using this. It takes
    the *UV* coordinates of the **Textures** and a **Time** function and uses that
    to rotate the texture. We are going to use it to have our material change color.
    As always, create a **Constant3Vector**, and set its color to a pale blue.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的装饰性资产，我们将创建一个可以周期性改变颜色的材质。首先，创建一个材质并命名为**DecorativeAsset_Material**。对于变化效果，我们将使用**Rotator**节点。如果您有合适的纹理，并希望它旋转，可以使用这个节点。它获取**纹理**的*UV*坐标和**时间**函数，并用它来旋转纹理。我们将用它来改变我们的材质颜色。像往常一样，创建一个**Constant3Vector**，并将其颜色设置为浅蓝色。
- en: Now, instead of connecting it directly to the base color input, we are going
    to connect it to the **Rotator** node. Find the **Rotator** node in the palette
    panel, and place it in the graph panel. The **Rotator** node takes in two inputs,
    **Coordinate** and **Time**. Connect the **Constant3Vector** to the **Coordinate**
    input. Create a **Sine** function, connect a time input data to it, and connect
    it to the **Time** input. Finally, connect the **Rotator** node to the **Base
    Color** input. That is all we need to do. You will now notice the material changing
    color periodically. You can set the speed at which it changes color by changing
    the **Speed** setting in the **Rotator** node's Details panel.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不是直接将它连接到基本颜色输入，而是将它连接到**Rotator**节点。在调色板面板中找到**Rotator**节点，并将其放在图形面板中。**Rotator**节点有两个输入，**坐标**和**时间**。将**Constant3Vector**连接到**坐标**输入。创建一个**Sine**函数，将时间输入数据连接到它，并将其连接到**时间**输入。最后，将**Rotator**节点连接到**基本颜色**输入。这就是我们需要做的全部。您现在会注意到材质会周期性地改变颜色。您可以通过在**Rotator**节点的“详细信息”面板中更改**速度**设置来设置它改变颜色的速度。
- en: '![Decorative assets](img/image00285.jpeg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![装饰性资产](img/image00285.jpeg)'
- en: Apply this material to all of the decorative assets in the game. And with that,
    we have textured our environment.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个材质应用到游戏中的所有装饰性资产上。有了这个，我们已经为我们的环境贴上了纹理。
- en: '![Decorative assets](img/image00286.jpeg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![装饰性资产](img/image00286.jpeg)'
- en: If you test out your level, you would notice that you cannot see anything. This
    is because our level does not have any lights, therefore nothing is rendered and
    all you see is a black screen. Let's now move on to lighting.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您测试您的关卡，您会注意到您什么都看不见。这是因为我们的关卡没有任何灯光，因此没有任何东西被渲染，您所看到的只是一个黑屏。现在让我们继续进行照明。
- en: Lighting
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照明
- en: 'Lighting is a very important element of any game, as without it you cannot
    see the world around you. UE4 offers four types of lighting, namely: Directional
    light, Point light, Spot light, and Sky light. Let''s go over each of them individually
    and discuss some of their properties that you can set in the Details panel:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 照明是任何游戏中非常重要的元素，因为没有它，您无法看到周围的世界。UE4提供了四种类型的照明，即：定向光、点光、聚光灯和天空光。让我们逐个讨论它们，并讨论一些您可以在“详细信息”面板中设置的属性。
- en: '**Directional light**: Directional light is the ideal type of light when you
    have an outdoor scene and want to simulate light coming from the sun, since directional
    light simulates light coming from a source infinitely far away. The shadows formed
    by directional lights are parallel.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定向光**：当您有一个室外场景并希望模拟来自太阳的光时，定向光是理想的光源类型，因为定向光模拟来自无限远处的光。定向光形成的阴影是平行的。'
- en: You can set things such as the intensity, color, whether it affects the world,
    the intensity of the indirect lights, and more in the Details panel.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在“详细信息”面板中设置诸如强度、颜色、是否影响世界、间接光照的强度等内容。
- en: '![Lighting](img/image00287.jpeg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![照明](img/image00287.jpeg)'
- en: The preceding screenshot shows directional light and how it works in the level.
    Its icon is depicted by a sun with two parallel arrows coming out of it. The other
    single arrow shows the direction from where the light is coming. You can set the
    direction by using the rotation tool.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了定向光以及它在关卡中的工作原理。它的图标由一个太阳和两个平行箭头组成。另一个单独的箭头显示了光线的方向。您可以使用旋转工具来设置方向。
- en: '**Point light**: A point simulates light coming from a single source of light,
    emitting light uniformly in all directions, much like a bulb. It is the light
    source we will be using most in the game. In an indoor scene, this will be your
    primary actor for lighting.![Lighting](img/image00288.jpeg)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点光源**：点光源模拟来自单一光源的光，均匀地在所有方向上发光，就像一个灯泡。这是我们在游戏中将要使用的主要光源。在室内场景中，这将是您的主要照明角色。![照明](img/image00288.jpeg)'
- en: As you can see, the point light actor is represented by a light bulb. The sphere
    you see around it is the *Attenuation Radius*. It is represented by a sphere wireframe,
    and shows the volume where the light source has direct influence. You can set
    things such as the intensity, the color, the attenuation radius, whether the light
    source affects the world or not, the intensity of the indirect lighting, and so
    on. If you feel like you do not want a single point light source, you can set
    a radius or length of the light source, depending on your requirement.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，点光源角色由一个灯泡表示。你看到的球体周围是*衰减半径*。它由一个球形线框表示，并显示了光源直接影响的范围。你可以设置强度、颜色、衰减半径、光源是否影响世界、间接光照强度等。如果你不想要单一点光源，你可以根据需要设置光源的半径或长度。
- en: '**Spot light**: Spot lights are similar as point light, in that, they both
    originate from a single source. The difference between the two, however, is that
    while a point light emits lights uniformly in all directions, spot light emits
    lights in one direction, in a cone.![Lighting](img/image00289.jpeg)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚光灯**：聚光灯与点光源类似，它们都源自单一光源。然而，两者之间的区别在于，点光源在所有方向均匀发光，而聚光灯在一个方向上，以锥形发光。![照明](img/image00289.jpeg)'
- en: There are two cones that you may have noticed. The inner cone is where the light
    is the brightest. As you move radially outwards, towards the outer cone, the light
    becomes less bright and fall-off takes place. You can set the radius of these
    two cones, along with the intensity, color, length, and radius of the source,
    and so on.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了两个锥体。内部锥体是光线最亮的地方。当你向外径移动时，朝向外部锥体，光线变得不那么明亮，发生衰减。你可以设置这两个锥体的半径，以及光源的强度、颜色、长度和半径等。
- en: '**Sky light**: Lastly, we have the sky light. Sky light simulates light being
    reflected off the atmosphere and distant objects.![Lighting](img/image00290.jpeg)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**天空光**：最后，我们有天空光。天空光模拟了大气和远处物体反射的光线。![照明](img/image00290.jpeg)'
- en: Sky light is quite subtle in terms of effects. With that in mind, in the preceding
    screenshot, the left is a scene with sky light and to the right, without Sky light.
    You can see the effect of Sky light when the two are juxtaposed.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 天空光在效果上相当微妙。考虑到这一点，在前面的截图中，左边是有天空光的场景，右边是没有天空光的场景。当这两者并列时，你可以看到天空光的效果。
- en: Sky light settings are a bit different than the rest of the types of lights.
    For one, you can set something called the **Sky Distance Threshold**. This is
    the distance from the Sky light actor at which any actor will be treated as part
    of the sky. You also have the **Lower Hemisphere is Black** option, which, when
    toggled, will ignore the light coming from the lower hemisphere of the scene.
    You can also use your own custom cube map to get your own type of Sky lights.
    Apart from that, you can set the color of the light, the intensity, and so on.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 天空光的设置与其他类型的灯光有些不同。首先，你可以设置所谓的**天空距离阈值**。这是天空光角色距离任何角色被视为天空的距离。你还可以使用**下半球为黑色**选项，当切换时，将忽略场景下半球的光线。你还可以使用自定义立方体贴图来获得自己的天空光类型。除此之外，你还可以设置光的颜色、强度等。
- en: Mobility
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动性
- en: All the types of lights have three types of mobility. There are certain settings
    of light characters that you can modify while the game is running, should you
    require to. The mobility section allows you to do just that.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类型的灯光都有三种移动性。在游戏运行时，你可以修改某些光源的设置。移动性部分允许你做到这一点。
- en: The mobility options are located in the **Transform** section of the light actor's
    Details panel.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 移动性选项位于光源角色的详细面板的**变换**部分。
- en: '![Mobility](img/image00291.jpeg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![移动性](img/image00291.jpeg)'
- en: 'There are a total of three types to choose from:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有三种类型可供选择：
- en: '**Static**: When you set the light as **Static**, the properties set while
    making the game remain constant and cannot be modified with triggers or during
    gameplay. Once the lighting has been built, the light information and the shadows
    baked by that light remain static and cannot be changed. For lights that do no
    move or toggle on/off during the game, this is the most apt mobility type, since
    it requires the least amount of memory to render.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态**：当你将光设置为**静态**时，制作游戏时设置的属性保持不变，无法通过触发器或游戏过程中进行修改。一旦光照建立完成，由该光照烘焙的光信息和阴影保持静态，无法更改。对于在游戏过程中不移动或切换开/关的灯光来说，这是最合适的移动类型，因为它需要最少的内存来渲染。'
- en: '**Stationary**: When a light actor''s mobility is set to **Stationary**, the
    only properties that can be altered with triggers or during gameplay are things
    like intensity, color, and so on. The light, however, cannot move or translate
    under this setting. This requires more memory than static lights, and can be used
    for things like flickering lights.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定**：当光源角色的移动性设置为**固定**时，只有强度、颜色等属性可以在触发器或游戏过程中进行修改。然而，光源在这种设置下无法移动或平移。这需要比静态光更多的内存，可以用于闪烁灯等场景。'
- en: '**Movable**: Under this setting, the light actor is totally dynamic and along
    with altering things like intensity and color, it can also move, rotate, and scale
    during gameplay. Keep in mind, however, that this type of light takes the most
    memory to render, since every time its property is altered within the game, it
    has to recalculate the shadows and lighting information in real time. Therefore,
    unless it is really required in your game, avoid using movable lights when developing
    games on mobile devices. It is better if you use static lights, for best performance.
    When you switch the mobility to **Movable**, the light actor''s icon in the game
    changes. You will see four arrows underneath the light actor.![Mobility](img/image00292.jpeg)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移动**：在此设置下，光照actor完全是动态的，除了改变强度和颜色之外，在游戏过程中它还可以移动、旋转和缩放。然而，请记住，这种类型的光需要最多的内存来渲染，因为每次在游戏中改变其属性时，它都必须实时重新计算阴影和照明信息。因此，除非在您的游戏中真正需要，否则在开发移动设备游戏时避免使用可移动光。最好使用静态光以获得最佳性能。当您将移动性切换为**可移动**时，游戏中的光照actor的图标会改变。您会看到光照actor下面有四个箭头。![移动性](img/image00292.jpeg)'
- en: On the left, is a light actor with the mobility set to **Movable**, and to the
    right is a light actor with the mobility set to either **Static** or **Stationary**.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 左边是移动性设置为**可移动**的光照actor，右边是移动性设置为**静态**或**固定**的光照actor。
- en: Lighting up the environment
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 照亮环境
- en: Now that you are familiar with light actors, their types, and mobility types,
    let's place some lights onto our level.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经熟悉了光照actor，它们的类型和移动类型，让我们在我们的关卡上放置一些灯光。
- en: For now, we are just going to place Static point lights in our level. We will
    cover stationary and movable lights later on. With that said, place a point light
    in the level. Set `intensity` to `20000`, and `attenuationradius` to `5000`. Also,
    set the mobility to `Static`. Create multiple copies of the point light and place
    them, keeping in mind that there should be sufficient lighting for the player.
    You should also switch to *Lit view mode*, so that you can figure out if there
    is enough lighting in the rooms. Finally, build the level. You can set the quality
    of the lighting build. But remember, the higher the quality of light you want,
    the longer it will take to build, but the lighting will be closer to reflecting
    production quality at these higher settings.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只会在我们的关卡中放置静态点光源。我们稍后会介绍固定和可移动的灯光。说到这里，在关卡中放置一个点光源。将“强度”设置为“20000”，“衰减半径”设置为“5000”。还要将移动性设置为“静态”。创建多个点光源的副本并放置它们，记住应该为玩家提供足够的照明。您还应该切换到*照明视图模式*，以便您可以确定房间中是否有足够的照明。最后，构建关卡。您可以设置照明构建的质量。但请记住，您想要的光照质量越高，构建所需的时间就越长，但是在这些更高的设置下，照明将更接近反映生产质量。
- en: '![Lighting up the environment](img/image00293.jpeg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![照亮环境](img/image00293.jpeg)'
- en: You can now see all of the materials and textures properly rendered.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到所有的材质和纹理都被正确渲染了。
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about projects, what they are, what types of projects
    UE4 offers, and how to create and load projects. Following that, we covered what
    BSP brushes are, the default types of BSP brushes and how we can edit them to
    create our own geometry. We returned and took another look at Content Browser,
    how to import and migrate assets, and how to place actors from Content Browser
    onto the level. We covered the concept of materials, the material editor, its
    user interface, and how to create materials. Finally, we ended the chapter by
    talking about lighting, the different types of lights, and some of the important
    settings.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了项目，它们是什么，UE4提供了哪些类型的项目，以及如何创建和加载项目。接下来，我们介绍了BSP刷子是什么，BSP刷子的默认类型以及我们如何编辑它们以创建自己的几何图形。我们回顾了内容浏览器，如何导入和迁移资产，以及如何从内容浏览器将actor放置到关卡中。我们介绍了材质的概念，材质编辑器，其用户界面以及如何创建材质。最后，我们通过讨论照明，不同类型的灯光以及一些重要设置来结束了本章。
- en: Using this knowledge, we created our environment, hence taking our first steps
    towards building our game. In the next chapter, we will discuss the concept of
    volumes, what they are, the different types of volumes, and how we can apply them
    in our game. So, without further ado, let us move on to the next chapter.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些知识，我们创建了我们的环境，从而迈出了构建游戏的第一步。在下一章中，我们将讨论体积的概念，它们是什么，不同类型的体积以及我们如何在游戏中应用它们。因此，让我们毫不犹豫地继续下一章。
