["```js\nvar item = document.getElementById(\"item1\");\nitem. addEventListener(\"click\", function(event){ /*do something */ });\n```", "```js\n[1, 4, 6, 9, 34, 56, 77, 1, 2, 3, 6, 10]\n```", "```js\n[1, 4, 6, 9, 34, 56, 77, 1, 2, 3, 6, 10].filter((x)=>x%2==0) =>\n[4, 6, 34, 56, 2, 6, 10]\n```", "```js\n<body>\n  <button id=\"button\"> Click Me!</button>\n  <span id=\"output\"></span>\n</body>\n```", "```js\n<script>\n  var counter = 0;\n  var button = document.getElementById('button');\n  var source = Rx.Observable.fromEvent(button, 'click');\n  var subscription = source.subscribe(function (e) {\n    counter++;\n    output.innerHTML = \"Clicked \" + counter + \" time\" + (counter > 1 ? \"s\" : \"\");\n  });\n</script>\n```", "```js\nvar incrementSubscription = source.subscribe(() => counter++);\nvar subscription = source.filter(x=>counter%2==0).subscribe(function (e) {\n  output.innerHTML = \"Clicked \" + counter + \" time\" +(counter > 1 ? \"s\" : \"\");\n});\n```", "```js\nsource.buffer(() => source.debounce(250))\n.map((list) => list.length)\n.filter((x) => x >= 2)\n.subscribe((x)=> {\n  counter++;\n  output.innerHTML = \"Clicked \" + counter + \" time\" + (counter > 1 ? \"s\" : \"\");\n});\n```", "```js\nRx.Observable.FromEvent(button, \"click\")\n.debounce(1000).subscribe((x)=>doSomething());\n```", "```js\nvar deaths = [\n  {\n    Name:\"Stannis\",\n    Cause: \"Cold\"\n  },\n  {\n    Name: \"Tyrion\",\n    Cause: \"Stabbing\"\n  },\n\u2026\n}\n```", "```js\nfunction generateDeathsStream(deaths) {\n  return Rx.Observable.from(deaths).zip(Rx.Observable.interval(500), (death,_)=>death);\n}\n```", "```js\ngenerateDeathsStream(deaths).sample(1500).subscribe((item) => { /*do something */ });\n```", "```js\nVar counter = 0;\ngenerateDeathsStream(deaths).subscribe((item) => { counter++ });\n```", "```js\nvar button1 = document.getElementById(\"button1\");\nvar button2 = document.getElementById(\"button2\");\nvar button3 = document.getElementById(\"button3\");\nvar button1Stream = Rx.Observable.fromEvent(button1, 'click');\nvar button2Stream = Rx.Observable.fromEvent(button2, 'click');\nvar button3Stream = Rx.Observable.fromEvent(button3, 'click');\nvar messageStream = Rx.Observable.merge(button1Stream, button2Stream, button3Stream);\nmessageStream.subscribe(function (x) { return console.log(x.type + \" on \" + x.srcElement.id); });\n```", "```js\nvar worker = Rx.DOM.fromWorker(\"worker.js\");\nbutton4Stream.subscribe(function (_) {\n  worker.onNext({ cmd: \"start\", number: 35 });\n});\n```", "```js\nvar messageStream = Rx.Observable.merge(button1Stream, button2Stream, button3Stream, worker);\nmessageStream.subscribe(function (x) {\n  appendToOutput(x.type + (x.srcElement.id === undefined ? \" with \" + x.data : \" on \" + x.srcElement.id));\n},\nfunction (err) { return appendToOutput(err, true); }\n);\n```", "```js\nvar messageStream = Rx.Observable.merge(button1Stream, button2Stream, button3Stream, worker);\nvar intervalStream = Rx.Observable.interval(5000);\nmessageStream.zip(intervalStream, function (x, _) {\n  return x;})\n.subscribe(function (x) {\n  toastr.info(x.type + (x.srcElement.id === undefined ? \" with \" + x.data : \" on \" + x.srcElement.id));\n},\nfunction (err) { return toastr.error(err); }\n);\n```", "```js\nvar processors = Rx.Observable.amb(processorStream1, processorStream2);\n```"]