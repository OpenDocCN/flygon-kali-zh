["```java\n<T> Action1<Notification<? super T>> debug(\n  String description, String offset\n) {\n  AtomicReference<String> nextOffset = new AtomicReference<String>(\">\");\n  return (Notification<? super T> notification) -> {\n    switch (notification.getKind()) {\n    case OnNext:\n      System.out.println(\n        Thread.currentThread().getName() +\n        \"|\" + description + \": \" + offset +\n        nextOffset.get() + notification.getValue()\n      );\n      break;\n    case OnError:\n      System.err.println(\n        Thread.currentThread().getName() +\n        \"|\" + description + \": \" + offset +\n        nextOffset.get() + \" X \" + notification.getThrowable()\n      );\n      break;\n    case OnCompleted:\n      System.out.println(\n        Thread.currentThread().getName() +\n        \"|\" + description + \": \" + offset +\n        nextOffset.get() + \"|\"\n      );\n    default:\n      break;\n    }\n    nextOffset.getAndUpdate(p -> \"-\" + p);\n  };\n}\n```", "```java\nObservable\n  .range(5, 5)\n  .doOnEach(debug(\"Test\", \"\"))\n  .subscribe();\n```", "```java\nmain|Test: >5\nmain|Test: ->6\nmain|Test: -->7\nmain|Test: --->8\nmain|Test: ---->9\nmain|Test: ----->|\n\n```", "```java\n<T> Action1<Notification<? super T>> debug(String description) {\n  return debug(description, \"\");\n}\n```", "```java\nObservable\n  .take(5)\n  .interval(500L, TimeUnit.MILLISECONDS)\n  .doOnEach(debug(\"Default interval\"))\n  .subscribe();\n```", "```java\nRxComputationThreadPool-1|Default interval: >0\nRxComputationThreadPool-1|Default interval: ->1\nRxComputationThreadPool-1|Default interval: -->2\nRxComputationThreadPool-1|Default interval: --->3\nRxComputationThreadPool-1|Default interval: ---->4\n\n```", "```java\nObservable<Long> interval(long, TimeUnit, Scheduler)\n```", "```java\nObservable\n  .take(5)\n  .interval(500L, TimeUnit.MILLISECONDS, Schedulers.immediate())\n  .doOnEach(debug(\"Imediate interval\"))\n  .subscribe();\n```", "```java\nmain|Imediate interval: >0\nmain|Imediate interval: ->1\nmain|Imediate interval: -->2\nmain|Imediate interval: --->3\nmain|Imediate interval: ---->4\n\n```", "```java\nscheduler.createWorker().schedule(Action0);\n```", "```java\nvoid schedule(Scheduler scheduler, int numberOfSubTasks, boolean onTheSameWorker) {\n  List<Integer> list = new ArrayList<>(0);\n  AtomicInteger current = new AtomicInteger(0);\n  Random random = new Random();\n  Worker worker = scheduler.createWorker();\n  Action0 addWork = () -> {\n    synchronized (current) {\n      System.out.println(\"  Add : \" + Thread.currentThread().getName() + \" \" + current.get());\n      list.add(random.nextInt(current.get()));\n      System.out.println(\"  End add : \" + Thread.currentThread().getName() + \" \" + current.get());\n    }\n  };\n  Action0 removeWork = () -> {\n    synchronized (current) {\n      if (!list.isEmpty()) {\n        System.out.println(\"  Remove : \" + Thread.currentThread().getName());\n        list.remove(0);\n        System.out.println(\"  End remove : \" + Thread.currentThread().getName());\n      }\n    }\n  };\n  Action0 work = () -> {\n    System.out.println(Thread.currentThread().getName());\n    for (int i = 1; i <= numberOfSubTasks; i++) {\n      current.set(i);\n      System.out.println(\"Begin add!\");\n      if (onTheSameWorker) {\n        worker.schedule(addWork);\n      }\n      else {\n scheduler.createWorker().schedule(addWork);\n      }\n      System.out.println(\"End add!\");\n    }\n    while (!list.isEmpty()) {\n      System.out.println(\"Begin remove!\");\n    if (onTheSameWorker) {\n worker.schedule(removeWork);\n    }\n    else {\n scheduler.createWorker().schedule(removeWork);\n    }\n    System.out.println(\"End remove!\");\n  };\n  worker.schedule(work);\n}\n```", "```java\nschedule(Schedulers.immediate(), 2, false);\nschedule(Schedulers.immediate(), 2, true);\n```", "```java\nmain\nBegin add!\n Add : main 1\n End add : main 1\nEnd add!\nBegin add!\n Add : main 2\n End add : main 2\nEnd add!\nBegin remove!\n Remove : main\n End remove : main\nEnd remove!\nBegin remove!\n Remove : main\n End remove : main\nEnd remove!\n\n```", "```java\nschedule(Schedulers.trampoline(), 2, false);\nschedule(Schedulers.trampoline(), 2, true);\n```", "```java\nmain\nBegin add!\nEnd add!\nBegin add!\nEnd add!\n Add : main 2\n End add : main 2\n Add : main 2\n End add : main 2\n\n```", "```java\nschedule(Schedulers.newThread(), 2, true);\n```", "```java\nRxNewThreadScheduler-1\nBegin add!\nEnd add!\nBegin add!\nEnd add!\n  Add : RxNewThreadScheduler-1 2\n  End add : RxNewThreadScheduler-1 2\n  Add : RxNewThreadScheduler-1 2\n  End add : RxNewThreadScheduler-1 2\n```", "```java\nschedule(Schedulers.newThread(), 2, false);\n```", "```java\nRxNewThreadScheduler-1\nBegin add!\nEnd add!\nBegin add!\n  Add : RxNewThreadScheduler-2 1\n  End add : RxNewThreadScheduler-2 2\nEnd add!\nBegin remove!\n  Add : RxNewThreadScheduler-3 2\n  End add : RxNewThreadScheduler-3 2\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\n  Remove : RxNewThreadScheduler-5\n  End remove : RxNewThreadScheduler-5\n  Remove : RxNewThreadScheduler-4\n  End remove : RxNewThreadScheduler-4\nEnd remove!\n```", "```java\nschedule(Schedulers.computation(), 5, false);\n```", "```java\nRxComputationThreadPool-1\nBegin add!\n  Add : RxComputationThreadPool-2 1\n  End add : RxComputationThreadPool-2 1\nEnd add!\nBegin add!\nEnd add!\nBegin add!\n  Add : RxComputationThreadPool-3 3\n  End add : RxComputationThreadPool-3 3\nEnd add!\nBegin add!\n  Add : RxComputationThreadPool-4 4\nEnd add!\nBegin add!\n  End add : RxComputationThreadPool-4 4\nEnd add!\nBegin remove!\nEnd remove!\nBegin remove!\n  Add : RxComputationThreadPool-2 5\n  End add : RxComputationThreadPool-2 5\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\n  Remove : RxComputationThreadPool-3\nEnd remove!\nBegin remove!\n  End remove : RxComputationThreadPool-3\n  Remove : RxComputationThreadPool-2\nEnd remove!\nBegin remove!\n  End remove : RxComputationThreadPool-2\nEnd remove!\nBegin remove!\n  Remove : RxComputationThreadPool-2\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\n  End remove : RxComputationThreadPool-2\nEnd remove!\n  Remove : RxComputationThreadPool-2\nBegin remove!\n  End remove : RxComputationThreadPool-2\nEnd remove!\n  Add : RxComputationThreadPool-1 5\n  End add : RxComputationThreadPool-1 5\n  Remove : RxComputationThreadPool-1\n  End remove : RxComputationThreadPool-1\n```", "```java\nschedule(Schedulers.io(), 2, false);\n```", "```java\nRxCachedThreadScheduler-1\nBegin add!\nEnd add!\nBegin add!\n Add : RxCachedThreadScheduler-2 2\n End add : RxCachedThreadScheduler-2 2\nEnd add!\nBegin remove!\n Add : RxCachedThreadScheduler-3 2\n End add : RxCachedThreadScheduler-3 2\nEnd remove!\nBegin remove!\n Remove : RxCachedThreadScheduler-4\n End remove : RxCachedThreadScheduler-4\nEnd remove!\nBegin remove!\nEnd remove!\nBegin remove!\n Remove : RxCachedThreadScheduler-6\n End remove : RxCachedThreadScheduler-6\nEnd remove!\n\n```", "```java\nObservable<Integer> range = Observable\n  .range(20, 4)\n  .doOnEach(debug(\"Source\"));\nrange.subscribe();\n\nSystem.out.println(\"Hey!\");\n```", "```java\nmain|Source: >20\nmain|Source: ->21\nmain|Source: -->22\nmain|Source: --->23\nmain|Source: -------->|\nHey!\n\n```", "```java\nCountDownLatch latch = new CountDownLatch(1);\nObservable<Integer> range = Observable\n  .range(20, 4)\n  .doOnEach(debug(\"Source\"))\n  .subscribeOn(Schedulers.computation())\n  .finallyDo(() -> latch.countDown());\nrange.subscribe();\nSystem.out.println(\"Hey!\");\nlatch.await();\n```", "```java\nHey!\nRxComputationThreadPool-1|Source: >20\nRxComputationThreadPool-1|Source: ->21\nRxComputationThreadPool-1|Source: -->22\nRxComputationThreadPool-1|Source: --->23\nRxComputationThreadPool-1|Source:--------->|\n\n```", "```java\nCountDownLatch latch = new CountDownLatch(1);\nObservable<Integer> range = Observable\n  .range(20, 3)\n  .doOnEach(debug(\"Source\"))\n  .subscribeOn(Schedulers.computation());\nObservable<Character> chars = range\n  .map(n -> n + 48)\n  .map(n -> Character.toChars(n))\n  .subscribeOn(Schedulers.io())\n  .map(c -> c[0])\n  .subscribeOn(Schedulers.newThread())\n  .doOnEach(debug(\"Chars \", \"    \"))\n  .finallyDo(() -> latch.countDown());\nchars.subscribe();\nlatch.await();\n```", "```java\nRxComputationThreadPool-1|Source: >20\nRxComputationThreadPool-1|Chars :     >D\nRxComputationThreadPool-1|Source: ->21\nRxComputationThreadPool-1|Chars :     ->E\nRxComputationThreadPool-1|Source: -->22\nRxComputationThreadPool-1|Chars :     -->F\nRxComputationThreadPool-1|Source: --->|\nRxComputationThreadPool-1|Chars :     --->|\n\n```", "```java\nCountDownLatch latch = new CountDownLatch(1);\nObservable<Integer> range = Observable\n  .range(20, 3)\n  .doOnEach(debug(\"Source\"));\nObservable<Character> chars = range\n  .map(n -> n + 48)\n  .doOnEach(debug(\"+48 \", \"    \"))\n  .map(n -> Character.toChars(n))\n  .map(c -> c[0])\n  .observeOn(Schedulers.computation())\n  .doOnEach(debug(\"Chars \", \"    \"))\n  .finallyDo(() -> latch.countDown());\nchars.subscribe();\nSystem.out.println(\"Hey!\");\nlatch.await();\n```", "```java\nmain|Source: >20\nmain|+48 :     >68\nmain|Source: ->21\nmain|+48 :     ->69\nmain|Source: -->22\nmain|+48 :     -->70\nRxComputationThreadPool-3|Chars :     >D\nRxComputationThreadPool-3|Chars :     ->E\nRxComputationThreadPool-3|Chars :     -->F\nmain|Source: --->|\nmain|+48 :    --->|\nHey!\nRxComputationThreadPool-3|Chars :    --->|\n\n```", "```java\nCountDownLatch latch = new CountDownLatch(1);\nObservable<Integer> range = Observable\n  .range(20, 3)\n  .subscribeOn(Schedulers.newThread())\n  .doOnEach(debug(\"Source\"));\nObservable<Character> chars = range\n  .observeOn(Schedulers.io())\n  .map(n -> n + 48)\n  .doOnEach(debug(\"+48 \", \"    \"))\n  .observeOn(Schedulers.computation())\n  .map(n -> Character.toChars(n))\n  .map(c -> c[0])\n  .doOnEach(debug(\"Chars \", \"    \"))\n  .finallyDo(() -> latch.countDown());\nchars.subscribe();\nlatch.await();\n```", "```java\nRxNewThreadScheduler-1|Source: >20\nRxNewThreadScheduler-1|Source: ->21\nRxNewThreadScheduler-1|Source: -->22\nRxNewThreadScheduler-1|Source: --->|\nRxCachedThreadScheduler-1|+48 :     >68\nRxCachedThreadScheduler-1|+48 :     ->69\nRxCachedThreadScheduler-1|+48 :     -->70\nRxComputationThreadPool-3|Chars :     >D\nRxCachedThreadScheduler-1|+48 :     --->|\nRxComputationThreadPool-3|Chars :     ->E\nRxComputationThreadPool-3|Chars :     -->F\nRxComputationThreadPool-3|Chars :     --->|\n\n```", "```java\nObservable<Integer> range = Observable\n  .range(20, 5)\n  .flatMap(n -> Observable\n    .range(n, 3)\n    .subscribeOn(Schedulers.computation())\n    .doOnEach(debug(\"Source\"))\n  );\nrange.subscribe();\n```", "```java\nRxComputationThreadPool-3|Source: >23\nRxComputationThreadPool-4|Source: >20\nRxComputationThreadPool-2|Source: >22\nRxComputationThreadPool-3|Source: ->24\nRxComputationThreadPool-1|Source: >21\nRxComputationThreadPool-2|Source: ->23\nRxComputationThreadPool-3|Source: -->25\nRxComputationThreadPool-3|Source: --->|\nRxComputationThreadPool-4|Source: ->21\nRxComputationThreadPool-4|Source: -->22\nRxComputationThreadPool-4|Source: --->|\nRxComputationThreadPool-2|Source: -->24\nRxComputationThreadPool-2|Source: --->|\nRxComputationThreadPool-1|Source: ->22\nRxComputationThreadPool-1|Source: -->23\nRxComputationThreadPool-1|Source: --->|\nRxComputationThreadPool-4|Source: >24\nRxComputationThreadPool-4|Source: ->25\nRxComputationThreadPool-4|Source: -->26\nRxComputationThreadPool-4|Source: --->|\n\n```", "```java\nObservable<Map> response = CreateObservable.requestJson(\n  client,\n  \"https://api.github.com/users/meddle0x53/followers\"\n); // (1)\nresponse\n  .map(followerJson -> followerJson.get(\"url\")) // (2)\n  .cast(String.class)\n  .flatMap(profileUrl -> CreateObservable\n    .requestJson(client, profileUrl)\n    .subscribeOn(Schedulers.io()) // (3)\n    .filter(res -> res.containsKey(\"followers\"))\n    .map(json ->  // (4)\n      json.get(\"login\") +  \" : \" +\n      json.get(\"followers\"))\n  )\n  .doOnNext(follower -> System.out.println(follower)) // (5)\n  .count() // (6)\n  .subscribe(sum -> System.out.println(\"meddle0x53 : \" + sum));\n```", "```java\nPath path = Paths.get(\"src\", \"main\", \"resources\");\nObservable<String> data = CreateObservable\n  .listFolder(path, \"*\")\n  .flatMap(file -> {\n    if (!Files.isDirectory(file)) {\n      return CreateObservable\n    .from(file)\n    .subscribeOn(Schedulers.io());\n  }\n  return Observable.empty();\n});\nsubscribePrint(data, \"Too many lines\");\n```", "```java\nToo many lines : Morbi nec nulla ipsum.\nToo many lines : Proin eu tellus tortor.\nToo many lines : Lorem ipsum dolor sit am\nError from Too many lines:\nrx.exceptions.MissingBackpressureException\nToo many lines : Vivamus non vulputate tellus, at faucibus nunc.\nToo many lines : Ut tristique, orci eu\nToo many lines : Aliquam egestas malesuada mi vitae semper.\nToo many lines : Nam vitae consectetur risus, vitae congue risus.\nToo many lines : Donec facilisis sollicitudin est non molestie.\n rx.internal.util.RxRingBuffer.onNext(RxRingBuffer.java:349)\n rx.internal.operators.OperatorMerge$InnerSubscriber.enqueue(OperatorMerge.java:721)\n rx.internal.operators.OperatorMerge$InnerSubscriber.emit(OperatorMerge.java:698)\n rx.internal.operators.OperatorMerge$InnerSubscriber.onNext(OperatorMerge.java:586)\n rx.internal.operators.OperatorSubscribeOn$1$1$1.onNext(OperatorSubscribeOn.java:76)\n\n```", "```java\ndata = data\n  .sample(\n Observable\n .interval(100L, TimeUnit.MILLISECONDS)\n .take(10)\n .concatWith(\n Observable\n .interval(200L, TimeUnit.MILLISECONDS)\n )\n );\nsubscribePrint(data, \"Too many lines\");\n```", "```java\ndata = data.sample(\n 100L,\n TimeUnit.MILLISECONDS\n);\n```", "```java\nObservable<Object> sampler = Observable.create(subscriber -> {\n  try {\n    subscriber.onNext(0);\n    Thread.sleep(100L);\n    subscriber.onNext(10);\n    Thread.sleep(200L);\n    subscriber.onNext(20);\n    Thread.sleep(150L);\n    subscriber.onCompleted();\n  }\n  catch (Exception e) {\n    subscriber.onError(e);\n  }\n}).repeat()\n  .subscribeOn(Schedulers.computation());\ndata = data\n  .sample(sampler)\n  .debounce(150L, TimeUnit.MILLISECONDS);\n```", "```java\ndata = data.buffer(2, 3000);\nHelpers.subscribePrint(data, \"Too many lines\");\n```", "```java\nToo many lines : [\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"Donec facilisis sollicitudin est non molestie.\"]\nToo many lines : [\"Integer nec magna ac ex rhoncus imperdiet.\", \"Nullam pharetra iaculis sem.\"]\nToo many lines : [\"Integer nec magna ac ex rhoncus imperdiet.\", \"Nullam pharetra iaculis sem.\"]\nToo many lines : [\"Nam vitae consectetur risus, vitae congue risus.\", \"Donec facilisis sollicitudin est non molestie.\"]\nToo many lines : [\"Sed mollis facilisis rutrum.\", \"Proin enim risus, congue id eros at, pharetra consectetur ex.\"]\nToo many lines ended!\n\n```", "```java\ndata = data\n  .window(3L, 200L, TimeUnit.MILLISECONDS)\n  .flatMap(o -> o);\nsubscribePrint(data, \"Too many lines\");\n```", "```java\nHelpers.subscribePrint(\n  data.onBackpressureBuffer(10000),\n  \"onBackpressureBuffer(int)\"\n);\n```"]