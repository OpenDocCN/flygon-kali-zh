- en: Chapter 2. Securing Docker Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。保护Docker组件
- en: 'In this chapter, we will be taking a look at securing some Docker components
    using things such as image signing tools. There are tools that will help secure
    the environments where we are storing our images, whether they are signed or not.
    We will also look at using tools that come with commercial level support. Some
    of the tools (image signing and commercial level support tools) we will be looking
    at are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何使用诸如图像签名工具之类的工具来保护一些Docker组件。有一些工具可以帮助保护我们存储图像的环境，无论它们是否被签名。我们还将研究使用商业级支持的工具。我们将要研究的一些工具（图像签名和商业级支持工具）包括：
- en: '**Docker Content Trust**: Software that can be used to sign your images. We
    will look at all the components and go through an example of signing an image.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker内容信任**：可用于签署您的图像的软件。我们将研究所有组件，并通过一个签署图像的示例进行讲解。'
- en: '**Docker Subscription**: Subscription is an all inclusive package that includes
    a location to store your images, and Docker Engine to run your containers, all
    while providing commercial level support for all those pieces, plus for the applications
    and their life cycle that you plan to use.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker订阅**：订阅是一个全包套餐，包括一个存储图像的位置，以及Docker引擎来运行您的容器，同时为所有这些部分提供商业级支持，还包括您计划使用的应用程序及其生命周期的商业级支持。'
- en: '**Docker Trusted Registry** (**DTR**): Trusted Registry gives you a secure
    location to store and manage your images either on premises or in the cloud. It
    also has a lot of integration into your current infrastructure as well. We will
    take a look at all the pieces available.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker受信任的注册表**（**DTR**）：受信任的注册表为您提供了一个安全的位置，用于存储和管理您的图像，无论是在本地还是在云中。它还与您当前的基础设施有很多集成。我们将研究所有可用的部分。'
- en: Docker Content Trust
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker内容信任
- en: Docker Content Trust is a means by which you can securely sign your Docker images
    that you have created to ensure that they are from who they say they are from,
    that being you! In this section, we will take a look at the components of **Notary**
    as well as an example of signing images. Lastly, we will take a peek at the latest
    means of using Notary with regards to hardware signing capabilities that are now
    available. It is a very exciting topic, so let's dive in head first!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Docker内容信任是一种方法，您可以安全地签署您创建的Docker图像，以确保它们来自于它们所说的那个人，也就是您！在本节中，我们将研究**Notary**的组件以及签署图像的示例。最后，我们将一睹使用Notary的最新方法，以及现在可用的硬件签名能力。这是一个非常令人兴奋的话题，所以让我们毫不犹豫地深入研究吧！
- en: Docker Content Trust components
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker内容信任组件
- en: To understand how Docker Content Trust works it is beneficial to be familiar
    with all the components that make up its ecosystem.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Docker内容信任的工作原理，熟悉构成其生态系统的所有组件是有益的。
- en: 'The first part of that ecosystem is **The Update Framework** (**TUF**) piece.
    TUF, as we will refer to it from now on, is the framework that Notary is built
    upon. TUF solves the problem with software update systems in that they can often
    be hard to manage. It enables users to ensure that all applications are secure
    and can survive any key compromises. However, if an application is insecure by
    default, it won''t help to secure that application until it has been brought up
    to a secure compliance. It also enables trusted updates over untrusted sources
    and much more. To learn more about TUF, please visit the website:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该生态系统的第一部分是**更新框架**（**TUF**）部分。从现在开始，我们将称之为TUF，它是Notary构建的框架。TUF解决了软件更新系统的问题，因为它们通常很难管理。它使用户能够确保所有应用程序都是安全的，并且可以经受任何密钥妥协。但是，如果一个应用程序默认不安全，直到它达到安全合规性之前，它将无法帮助保护该应用程序。它还可以在不受信任的来源上进行可信任的更新等等。要了解更多关于TUF的信息，请访问网站：
- en: '[http://theupdateframework.com/](http://theupdateframework.com/)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://theupdateframework.com/](http://theupdateframework.com/)'
- en: 'The next piece of the Content Trust ecosystem is that of Notary. Notary is
    the key underlying piece that does the actual signing using your keys. Notary
    is open source software, and can be found here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 内容信任生态系统的下一个部分是公证。公证是实际使用您的密钥进行签名的关键基础部分。公证是开源软件，可以在这里找到：
- en: '[https://github.com/docker/notary](https://github.com/docker/notary)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/docker/notary](https://github.com/docker/notary)'
- en: This has been produced by those at Docker for the use of publishing and verifying
    content. Notary consists of a server piece as well as a client piece. The client
    piece resides on your local machine and handles the storing of the keys locally
    as well as the communication back with the Notary server to match up timestamps
    as well.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由Docker的人员制作的，用于发布和验证内容。公证包括服务器部分和客户端部分。客户端部分驻留在您的本地计算机上，并处理本地密钥的存储以及与公证服务器的时间戳匹配的通信。
- en: Basically, there are three steps to the Notary server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，公证服务器有三个步骤。
- en: Compile the server
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译服务器
- en: Configure the server
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置服务器
- en: Run the server
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行服务器
- en: 'Since the steps may change in the future, the best location for that information
    would be on the GitHub page for Docker Notary. For more information about compiling
    and setting up the server side of Notary, please visit:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于步骤可能会在将来更改，最佳位置获取信息的地方将在Docker Notary的GitHub页面上。有关编译和设置公证服务器端的更多信息，请访问：
- en: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
- en: Docker Content Trust utilizes two distinct keys. The first is that of a tagging
    key. The tagging key is generated for every new repository that you publish. These
    are keys that can be shared with others and exported to those who need the ability
    to sign content on behalf of the registry. The other key, the offline key, is
    the important key. This is the key that you want to lock away in a vault and never
    share with anyone*…ever*! Like the name implies, this key should be kept offline
    and not stored on your machine or anything on a network or cloud storage. The
    only times you need the offline key are if you are rotating it out for a new one
    or if you are creating a new repository.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker内容信任利用两个不同的密钥。第一个是标记密钥。标记密钥为您发布的每个新存储库生成。这些密钥可以与其他人共享，并导出给那些需要代表注册表签署内容的人。另一个密钥，脱机密钥，是重要的密钥。这是您想要锁在保险库中并且永远不与任何人分享的密钥*...永远*！正如名称所暗示的，这个密钥应该保持脱机状态，不要存储在您的计算机上或任何网络或云存储上。您需要脱机密钥的唯一时候是如果您要将其更换为新密钥或者创建新存储库。
- en: So, what does all this mean and how does it truly benefit you? This helps in
    protecting against three key, no pun intended, scenarios.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，所有这些意味着什么，它真正对您有什么好处？这有助于保护针对三个关键场景，没有双关语。
- en: Protects against image forgery, for instance if someone decides to pretend one
    of your images is from you. Without that person being able to sign that image
    with the repository specific key, remember the one you are to keep *offline*!,
    they won't be able to pass it off as actually coming from you.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止图像伪造，例如，如果有人决定假装您的图像来自您。如果没有那个人能够用存储库特定密钥签署该图像，记住您要将其保持*脱机*！，他们将无法将其冒充为实际来自您的。
- en: Protects against replay attacks; replay attacks are ones in which a malicious
    user tries to pass off an older version of an application, which has been compromised,
    as the latest legitimate version. Due to the way timestamps are utilized with
    Docker Content Trust, this will ultimately fail and keep you and your users safe.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止重放攻击；重放攻击是指恶意用户试图将一个旧版本的应用程序（已被破坏）冒充为最新的合法版本。由于Docker内容信任使用时间戳的方式，这将最终失败，并保护您和您的用户的安全。
- en: Protects against key compromise. If a key is compromised, you can utilize that
    offline key to do a key rotation. That key rotation can only be done by the one
    with the offline key. In this scenario, you will need to create a new key and
    sign it with your offline key.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止密钥被泄露。如果密钥被泄露，您可以利用离线密钥进行密钥轮换。只有拥有离线密钥的人才能进行密钥轮换。在这种情况下，您需要创建一个新密钥，并使用您的离线密钥对其进行签名。
- en: The major take away from all of this is that the offline key is meant to be
    kept offline. Never store it on your cloud storage, on GitHub, or even a system
    that is always connected to the Internet such as that of your local machine. It
    would be best practice to store it on a thumb drive that is encrypted and keep
    that thumb drive stored in a a secure location.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些的主要要点是，离线密钥是用来离线保存的。永远不要将其存储在云存储、GitHub上，甚至是始终连接到互联网的系统上，比如您的本地计算机。最佳做法是将其存储在加密的U盘上，并将该U盘存储在安全的位置。
- en: 'To learn more about Docker Content Trust, please visit the following blog post:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Docker内容信任的更多信息，请访问以下博客文章：
- en: '[http://blog.docker.com/2015/08/content-trust-docker-1-8/](http://blog.docker.com/2015/08/content-trust-docker-1-8/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://blog.docker.com/2015/08/content-trust-docker-1-8/](http://blog.docker.com/2015/08/content-trust-docker-1-8/)'
- en: Signing images
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签名图像
- en: 'Now that we have covered all the components of Docker Content Trust, let''s
    take a look at how we can sign an image and what all steps are involved. These
    instructions are just for development purposes. If you are going to want to run
    a Notary server in production, you will want to use your own database and compile
    Notary yourself using the instructions at their website:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Docker内容信任的所有组件，让我们看看如何对图像进行签名以及涉及的所有步骤。这些说明仅供开发目的。如果您要在生产环境中运行Notary服务器，您将需要使用自己的数据库，并按照其网站上的说明自己编译Notary：
- en: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/docker/notary#compiling-notary-server](https://github.com/docker/notary#compiling-notary-server)'
- en: This will allow you to use your own keys for your situation to your own backend
    registry. If you are using the Docker Hub, it is very simple to use Docker Content
    Trust.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您在您自己的后端注册表中使用自己的密钥。如果您正在使用Docker Hub，使用Docker内容信任非常简单。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The most important piece is that you need to put a tag on all images you push,
    which we see in the next command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一点是，您需要给您推送的所有图像打上标签，这是在下一个命令中看到的：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The most important line from the code above is:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以上代码中最重要的一行是：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This gives you the SHA hash that is used to verify the image is what it says
    it is and not created by someone else, as well as its size. This will be used
    later when someone goes to run that `image/container`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供用于验证图像的SHA哈希值，以及其大小。当有人要运行该`image/container`时，将在以后使用这些信息。
- en: If you were to do a `docker pull` from a machine that doesn't have this image,
    you can see it has been signed with that hash.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从没有这个图像的机器上执行`docker pull`，您可以看到它已经用该哈希签名。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, we see the SHA value being presented when we do the `pull` command.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，当我们执行`pull`命令时，我们看到了SHA值的呈现。
- en: So, what this means is when you go to run this container, it won't run locally
    without first comparing the local hash to that on the registry server to ensure
    it hasn't changed. If they match, it will run, if they don't match, it won't run
    and will give you an error message about the hashes not matching.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这意味着当您要运行此容器时，它不会在本地运行，而是首先将本地哈希与注册表服务器上的哈希进行比较，以确保它没有更改。如果它们匹配，它将运行，如果它们不匹配，它将不运行，并且会给您一个关于哈希不匹配的错误消息。
- en: With the Docker Hub you aren't essentially signing images with your own key,
    unless you manipulate the keys that are in your `~/.docker/trust/trusted-certificates/`
    directory. Remember that, by default, when you install Docker you are given a
    set of certificates that you can use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Hub，您基本上不会使用自己的密钥签署镜像，除非您操作位于`~/.docker/trust/trusted-certificates/`目录中的密钥。请记住，默认情况下，安装Docker时会提供一组可用的证书。
- en: Hardware signing
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件签名
- en: Now that we have looked at being able to sign images, which other security measure
    have been put in place to help make that process even more secure? Enter YubiKeys!
    YubiKeys is a form of two factor authentication that you can utilize. The way
    YubiKey works is that it has the root key on it, built into the hardware. You
    enable Docker Content Trust, then push your image. Upon using your image, Docker
    notes that you have enabled Content Trust and asks you to touch the YubiKey, yes,
    physically touch it. This is to ensure that you are a person and not a robot or
    just a script. You then need to provide a passphase to use and then, once again,
    touch the YubiKey. Once you have done this, you won't need the YubiKey anymore,
    but you will need that passphrase that you assigned earlier.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了如何签署镜像，还有哪些其他安全措施可以帮助使该过程更加安全？YubiKeys登场！YubiKeys是一种可以利用的双因素身份验证。YubiKey的工作方式是，它在硬件中内置了根密钥。您启用Docker内容信任，然后推送您的镜像。在使用您的镜像时，Docker会注意到您已启用内容信任，并要求您触摸YubiKey，是的，物理触摸它。这是为了确保您是一个人，而不是一个机器人或只是一个脚本。然后，您需要提供一个密码来使用，然后再次触摸YubiKey。一旦您这样做了，您就不再需要YubiKey，但您需要之前分配的密码。
- en: My description of this really doesn't do it justice. At DockerCon Europe 2015
    ([http://europe-2015.dockercon.com](http://europe-2015.dockercon.com)), there
    was a great play-by-play of this in operation between two Docker employees, Aanand
    Prasad and Diogo Mónica.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我对此的描述实在是不够好。在DockerCon Europe 2015（[http://europe-2015.dockercon.com](http://europe-2015.dockercon.com)）上，两名Docker员工Aanand
    Prasad和Diogo Mónica之间的操作非常精彩。
- en: 'To view the video, please visit the following URL:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要观看视频，请访问以下网址：
- en: '[https://youtu.be/fLfFFtOHRZQ?t=1h21m33s](https://youtu.be/fLfFFtOHRZQ?t=1h21m33s)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/fLfFFtOHRZQ?t=1h21m33s](https://youtu.be/fLfFFtOHRZQ?t=1h21m33s)'
- en: Docker Subscription
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker订阅
- en: 'Docker Subscription is a service for your distributed applications that will
    help you support those applications as well as deploy them. The Docker Subscription
    package includes two critical software pieces and a support piece:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Docker订阅是一个为您的分布式应用程序提供支持和部署的服务。Docker订阅包括两个关键的软件部分和一个支持部分：
- en: '**Docker Registry** — where you store and manage your images (locally hosted
    or hosted in the cloud)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker注册表-在其中存储和管理您的镜像（本地托管或托管在云中）
- en: '**The Docker** **Engine** — to run those images'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎-运行这些镜像
- en: '**Docker** **Universal Control Plane** (**UCP**)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker通用控制平面（UCP）
- en: '**Commercial** **support** — pick up the phone or shoot off an email for some
    assistance'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业支持-打电话或发送电子邮件寻求帮助
- en: If you are a developer, sometimes the operations side of things are either a
    little difficult to get set up and manage or they require some training to get
    going. With Docker Subscription you can off load some of those worries by utilizing
    the expertise that is out there with commercial level support. With this support
    you will get responsive turn around on your issues. You will receive any hot fixes
    that are available or have been made available to patch your solution. Assistance
    with future upgrades is also part of the added benefit of choosing the Docker
    Subscription plan. You will get assistance with upgrading your environments to
    the latest and most secure Docker environments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是开发人员，有时操作方面的事情可能有点难以设置和管理，或者需要一些培训才能开始。通过Docker订阅，您可以利用商业级支持的专业知识来减轻一些担忧。有了这种支持，您将得到对您问题的快速响应。您将收到任何可用的热修复程序，或者已经提供的修补程序来修复您的解决方案。协助未来升级也是选择Docker订阅计划的附加好处之一。您将获得升级您的环境到最新和最安全的Docker环境的帮助。
- en: Pricing is broken down based on where you want to run your environment whether
    it is on a server of your choosing or if it's in a cloud environment. It is also
    based upon how many Docker Trusted Registries and/or how many commercially supported
    Docker Engines you wish to have as well. All of these solutions provide you with
    integration into your existing **LDAP** or **Active Directory** environments.
    With this added benefit, you can use items such as group policies to manage access
    to such resources. The last thing that you will have to decide is how quick a
    response time you want from the support end. All of those will result in the price
    you pay for the subscription service. No matter what you do pay though the money
    spent will be well worth it, not only in respect of the peace of mind you will
    get but the knowledge you will gain is priceless.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 定价是根据您想要运行环境的位置来分解的，无论是在您选择的服务器上还是在云环境中。它还取决于您希望拥有多少Docker可信注册表和/或多少商业支持的Docker引擎。所有这些解决方案都为您提供了与现有的**LDAP**或**Active
    Directory**环境集成的功能。有了这个附加好处，您可以使用诸如组策略之类的项目来管理对这些资源的访问。您还需要决定您希望从支持端获得多快的响应时间。所有这些都将影响您为订阅服务支付的价格。无论您支付多少，花费的钱都是值得的，不仅仅是因为您将获得的安心，还因为您将获得的知识是无价的。
- en: You can also change your plans on a monthly or annual basis as well as upgrade,
    in increments of ten, your Docker Engine instances. You can also upgrade in packs
    of ten the number of **Docker** **Hub Enterprise** instances. Switching between
    an on premises server to the cloud, or vice-versa, is also possible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以根据月度或年度基础更改计划，以及以十个为增量升级您的Docker引擎实例。您还可以以十个为单位升级**Docker** **Hub企业版**实例的数量。在本地服务器和云之间进行切换也是可能的。
- en: To break some things down so as to not be confused, the Docker Engine is the
    core of the Docker ecosystem. It is the command line tools that you use to run,
    build, and manage your containers or images. The Docker Hub Enterprise is the
    location where you store and manage your images. These images can be public or
    made private. We will learn more about DTR in the next section of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不让人困惑，我们来分解一些东西。Docker引擎是Docker生态系统的核心。它是您用来运行、构建和管理容器或镜像的命令行工具。Docker Hub企业版是您存储和管理镜像的位置。这些镜像可以是公开的，也可以是私有的。我们将在本章的下一节中了解更多关于DTR的信息。
- en: 'For more information about Docker Subscription, please visit the link below.
    You can sign up for a free 30 day trial, view subscription plans, and contact
    sales for additional assistance or questions. The subscription plans are flexible
    enough to conform to your operating environment whether it is something you want
    support for 24/7 or maybe just half of that:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker Subscription的更多信息，请访问下面的链接。您可以注册免费的30天试用，查看订阅计划，并联系销售以获取额外的帮助或提问。订阅计划足够灵活，可以符合您的操作环境，无论是您想要全天候支持还是只需要一半时间的支持：
- en: '[https://www.docker.com/docker-subscription](https://www.docker.com/docker-subscription)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/docker-subscription](https://www.docker.com/docker-subscription)'
- en: 'You can also view the breakdown for commercial support here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在这里查看商业支持的详细信息：
- en: '[https://www.docker.com/support](https://www.docker.com/support)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/support](https://www.docker.com/support)'
- en: Bringing this all back to the main topic of the book, Securing Docker, this
    is by far the most secure you can get with your Docker environment that you will
    be using to manage your images and containers, as well as managing the location
    they are all stored and run from. A little extra help never hurts and with this
    option, a little help will defiantly go a long way.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些都带回到本书的主题，即保护Docker，这绝对是您可以获得的最安全的Docker环境，您将使用它来管理图像和容器，以及管理它们存储和运行的位置。多一点帮助从来都不会有坏处，有了这个选项，一点帮助肯定会走得更远。
- en: 'The latest part to be added is the Docker Universal Control Plane. The Docker
    UCP provides a solution for management of applications and infrastructure that
    is Dockerized regardless of where they might be running. This could be running
    on premises or in the cloud. You can find out more information about Docker UCP
    at the following link:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最新添加的部分是Docker Universal Control Plane。Docker UCP提供了一个解决方案，用于管理Docker化的应用程序和基础设施，无论它们在何处运行。这可以在本地或云中运行。您可以在以下链接找到有关Docker
    UCP的更多信息：
- en: '[https://www.docker.com/products/docker-universal-control-plane](https://www.docker.com/products/docker-universal-control-plane)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/products/docker-universal-control-plane](https://www.docker.com/products/docker-universal-control-plane)'
- en: You can also get a demo of the product using the above URL. Docker UCP is scalable,
    easy to set up, and you can manage users and access control through integrations
    into your existing LDAP or Active Directory environments.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用上述网址获得产品演示。Docker UCP是可扩展的，易于设置，并且可以通过集成到现有的LDAP或Active Directory环境中管理用户和访问控制。
- en: Docker Trusted Registry
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Trusted Registry
- en: The DTR is a solution that provides a secure location where you can store and
    manage your Docker images either on premises or in the cloud. It also provides
    some monitoring to let you get insight into usage so you can tell what kind of
    load is being passed to it. DTR, unlike Docker Registry, is not free and does
    come with a pricing model. As we saw earlier with Docker Subscription, the pricing
    plan for DTR is the same. Don't fret as we will go over Docker Registry in the
    next section of the book so you can understand it as well and have all the options
    available to you for image storage.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DTR是一个解决方案，提供了一个安全的位置，您可以在本地或云中存储和管理Docker镜像。它还提供了一些监控功能，让您了解使用情况，以便了解传递给它的负载类型。DTR与Docker
    Registry不同，不是免费的，并且有定价模型。就像我们之前在Docker Subscription中看到的那样，DTR的定价计划是相同的。不要担心，因为我们将在本书的下一部分介绍Docker
    Registry，这样您就可以了解它，并为图像存储提供所有可用的选项。
- en: The reason we separate it out into its own section is that there are a lot of
    moving pieces involved and it's critical to understand how they all function not
    only as a whole to the Docker Subscription piece, but as it stands by itself,
    the DTR piece where all your images are being maintained and stored.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其分成自己的部分的原因是，涉及许多移动部件，了解它们如何作为整体对Docker订阅部分至关重要，但作为独立的DTR部分，其中维护和存储所有图像的地方也很重要。
- en: Installation
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: There are two ways you can install DTR, or rather there are two locations where
    you can install DTR. The first is that you can deploy it in house on a server
    you manage. The other is deploying it to a cloud provider environment like that
    of **Digital Ocean**, **Amazon Web Services** (**AWS**), or **Microsoft Azure**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装DTR有两种方式，或者说有两个位置可以安装DTR。第一种是在您管理的服务器上部署它。另一种是将其部署到像**Digital Ocean**，**Amazon
    Web Services**（**AWS**）或**Microsoft Azure**这样的云提供商环境中。
- en: The first part you will need is a license for the DTR. Currently, they do offer
    a trial license that you can use, which I highly recommend you do. This will allow
    you to evaluate the software on your selected environment without having to fully
    commit to that environment. If there is something that you find doesn't work in
    a particular environment or you feel another location may suit you better, you
    can then switch without having to be tied to a particular location or having to
    move your existing environment around to a different provider or location. If
    you do choose to use AWS, they do have a pre-baked **Amazon Machine Image** (**AMI**)
    that you can utilize to get your Trusted Registry set up much quicker. This avoids
    having to do it all manually by hand.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要的是DTR的许可证。目前，他们提供了一个试用许可证，您可以使用，我强烈建议您这样做。这将允许您在所选环境中评估软件，而无需完全承诺该环境。如果您发现在特定环境中有些功能不起作用，或者您觉得另一个位置可能更适合您，那么您可以在不必被绑定到特定位置或不必将现有环境移动到不同的提供商或位置的情况下进行切换。如果您选择使用AWS，他们有一个预先制作的**Amazon
    Machine Image**（**AMI**），您可以利用它更快地设置您的受信任的注册表。这样可以避免手动完成所有操作。
- en: Before you can install the Trusted Registry, you first need to have Docker Engine
    installed. If you don't already have it installed, please see the documentation
    located with the link below for more information on doing so.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装受信任的注册表之前，您首先需要安装Docker Engine。如果您尚未安装，请参阅下面链接中的文档以获取更多信息。
- en: '[https://docs.docker.com/docker-trusted-registry/install/install-csengine/](https://docs.docker.com/docker-trusted-registry/install/install-csengine/)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/docker-trusted-registry/install/install-csengine/](https://docs.docker.com/docker-trusted-registry/install/install-csengine/)'
- en: You will notice there is a difference in installing the normal Docker Engine
    from the **Docker CS Engine**. The Docker CS Engine stands for commercially supported
    Docker Engine. Be sure to check the documentation as the list of recommended or
    supported Linux versions are shorter than the regular list for Docker Engine.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在安装普通的Docker Engine和**Docker CS Engine**之间存在差异。Docker CS Engine代表商业支持的Docker
    Engine。请务必查看文档，因为推荐或支持的Linux版本列表比Docker Engine的常规列表要短。
- en: 'If you are installing using the AMI, then please follow the instructions here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用AMI进行安装，请按照此处的说明进行：
- en: '[https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/](https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/](https://docs.docker.com/docker-trusted-registry/install/dtr-ami-byol-launch/)'
- en: 'If you are installing on Microsoft Azure, then please follow the instructions
    here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要在Microsoft Azure上安装，请按照此处的说明进行：
- en: '[https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/](https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/](https://docs.docker.com/docker-trusted-registry/install/dtr-vhd-azure/)'
- en: 'Once you do have Docker Engine installed, it''s time to install the DTR piece.
    If you are reading to this point we will be assuming that you aren''t installing
    to AWS or Microsoft Azure. If you are using either of those two methods, please
    see the links from above. The installation is very straightforward:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了Docker Engine，就该安装DTR组件了。如果您读到这一点，我们将假设您不是在AWS或Microsoft Azure上安装。如果您使用这两种方法之一，请参阅上面的链接。安装非常简单：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: You may have to remove the `sudo` options from the above command when
    running on Mac OS.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在Mac OS上运行时，您可能需要从上述命令中删除`sudo`选项。
- en: Once this has been run, you can navigate in your browser to the IP address of
    your Docker host. You will then be setting the domain name for your Trusted Registry
    as well applying the license. The web portal will guide you through the rest of
    the setup process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完这个命令后，您可以在浏览器中导航到Docker主机的IP地址。然后，您将设置受信任的注册表的域名，并应用许可证。Web门户将引导您完成其余的设置过程。
- en: In accessing the portal you can set up authentication through your existing
    LDAP or Active Directory environments as well, but this can be done at anytime.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问门户时，您还可以通过现有的LDAP或Active Directory环境设置身份验证，但这可以随时完成。
- en: Once that is done, it is time for *Securing Docker Trusted Registry*, which
    we will cover in the next section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，是时候进行*保护Docker受信任的注册表*，我们将在下一节中介绍。
- en: Securing Docker Trusted Registry
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护Docker受信任的注册表
- en: 'Now that we have our Trusted Registry set up, we need to make it secure. Before
    making it secure you will need to create an administrator account to be able to
    perform actions. Once you have your Trusted Registry up and running, and are logged
    into it, you will be able to see six areas under **Settings**. These are:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了受信任的注册表，我们需要使其安全。在使其安全之前，您需要创建一个管理员帐户以执行操作。一旦您的受信任的注册表已经运行，并且已登录，您将能够在**设置**下看到六个区域。这些是：
- en: '**General** settings'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规**设置'
- en: '**Security** settings'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**设置'
- en: '**Storage** settings'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**设置'
- en: '**License**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可证**'
- en: '**Auth** settings'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证**设置'
- en: '**Updates**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**'
- en: The **General** settings are mainly focused around settings such as **HTTP port**
    or **HTTPS port**, the **Domain name** to be used for your Trusted Registry, and
    proxy settings, if applicable.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**常规**设置主要集中在诸如**HTTP端口**或**HTTPS端口**、用于您的受信任注册表的**域名**和代理设置等设置上。'
- en: '![Securing Docker Trusted Registry](../images/00004.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![保护Docker受信任的注册表](../images/00004.jpeg)'
- en: 'The next section, **Security** settings, is probably one of the most important
    ones. Within this **Dashboard** pane you are able to utilize your **SSL Certificate**
    and **SSL Private Key**. These are what make the communication between your Docker
    clients and the Trusted Registry secure. Now, there are a few options for those
    certificates. You can use the self signed ones that are created when installing
    the Trusted Registry. You can also do self signed ones of your own, using a command
    line tool such as **OpenSSL**. If you are in an enterprise organization, they
    more than likely have a location where you can request certificates such as the
    one that can be used with the registry. You will need to make sure that the certificates
    on your Trusted Registry are the same ones being used on your clients to ensure
    secure communications when doing `docker pull` or `docker push` commands:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分，**安全**设置，可能是最重要的部分之一。在这个**仪表板**窗格中，您可以利用您的**SSL证书**和**SSL私钥**。这些是使您的Docker客户端和受信任的注册表之间的通信安全的要素。现在，这些证书有一些选项。您可以使用在安装受信任的注册表时创建的自签名证书。您也可以使用自己的自签名证书，使用诸如**OpenSSL**之类的命令行工具。如果您在企业组织中，他们很可能有一个地方，您可以请求像注册表一样使用的证书。您需要确保您受信任的注册表上的证书与您的客户端上使用的证书相同，以确保在执行`docker
    pull`或`docker push`命令时进行安全通信。
- en: '![Securing Docker Trusted Registry](../images/00005.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![保护Docker Trusted Registry](../images/00005.jpeg)'
- en: 'The next section deals with image storage settings. Within this **Dashboard**
    pane, you can set where your images are stored on the backend storage. Options
    for this might include an NFS share you are using, local disk storage of the Trusted
    Registry server, an S3 bucket from AWS, or another cloud storage solution. Once
    you have selected your **Storage Backend** option, you can then set the path from
    within that **Storage** to store your images:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分涉及图像存储设置。在这个**仪表板**窗格中，您可以设置图像在后端存储上的存储位置。这可能包括您正在使用的NFS共享、受信任的注册表服务器的本地磁盘存储、来自AWS的S3存储桶或其他云存储解决方案。一旦您选择了**存储后端**选项，您就可以设置从该**存储**中存储图像的路径：
- en: '![Securing Docker Trusted Registry](../images/00006.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![保护Docker Trusted Registry](../images/00006.jpeg)'
- en: 'The **License** section is very straightforward as this is where you update
    your license when it''s time to renew a new one or when you upgrade a license
    that might include more options:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**许可证**部分非常简单，这是您更新许可证的地方，当需要更新新的许可证或升级可能包括更多选项的许可证时：'
- en: '![Securing Docker Trusted Registry](../images/00007.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![保护Docker Trusted Registry](../images/00007.jpeg)'
- en: 'Authentication settings allow you to tie the login to the Trusted Registry
    into your existing authentication environment. Your options here are: **None**
    or a **Managed** option. **None** is not recommended except for testing purposes.
    The **Managed** option is where you would set up usernames and passwords and manage
    them from there. The other option would be to use an **LDAP** service, one that
    you might already be running as well, so that users have the same login credentials
    for their other work appliances such as email or web logins.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证设置允许您将登录到受信任的注册表与现有的身份验证环境联系起来。您的选项是：**无**或**托管**选项。**无**除了测试目的外不建议使用。**托管**选项是您可以设置用户名和密码并从那里管理它们的地方。另一个选项是使用**LDAP**服务，您可能已经在运行，这样用户就可以在其他工作设备上使用相同的登录凭据，比如电子邮件或网页登录。
- en: '![Securing Docker Trusted Registry](../images/00008.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![保护Docker Trusted Registry](../images/00008.jpeg)'
- en: The last section, **Updates**, deals with how you manage updates for the DTR.
    These settings would be totally up to you how you handle updates, but be sure
    if you are doing an automated form of updates that you are also utilizing backups
    for restoring purposes in the event that something goes wrong during the update
    process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个部分，**更新**，涉及您如何管理DTR的更新。这些设置完全取决于您如何处理更新，但是请确保如果您正在进行自动化形式的更新，您也在事件发生更新过程中出现问题时利用备份进行恢复。
- en: '![Securing Docker Trusted Registry](../images/00009.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Securing Docker Trusted Registry](../images/00009.jpeg)'
- en: Administering
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理
- en: 'Now that we have covered the items that help you secure your Trusted Registry,
    we might as well take a few minutes to cover the other items that are within the
    console to help you administer it. Beyond the **Settings** tab within the registry,
    there are four other tabs that you can navigate and gather information about your
    registry. Those are:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了帮助您保护您的受信任注册表的项目，我们不妨花几分钟来介绍控制台中的其他项目，以帮助您管理它。除了注册表中的**设置**选项卡之外，还有其他四个选项卡，您可以浏览并收集有关您的注册表的信息。它们是：
- en: '**Dashboard**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表板**'
- en: '**Repositories**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库**'
- en: '**Organizations**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**'
- en: '**Logs**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**'
- en: The **Dashboard** is the main landing page you are taken to when you log in
    via your browser to the console. This will display information about your registry
    in one central location. The information you will be seeing is more hardware related
    information about the registry server itself as well as the Docker host that the
    registry server is running on. The **Repositories** section will allow you to
    control which repositories, either **Public** or **Private**, your users are able
    to pull images from. The **Organizations** section allows you to control access,
    that is, who on the system can push, pull, or do other Docker related commands
    against the repositories that you have elected to configure. The last section,
    the **Logs** section, will allow you to view logs based upon your containers that
    are being used from your registry. The logs are rotated every two weeks with a
    maximum size of *64 mb*. You are able to filter through the logs as well based
    on a container as well as being able to search for a date and/or time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**仪表板**是您通过浏览器登录到控制台时带您到的主要页面。这将在一个中央位置显示有关您的注册表的信息。您将看到的信息更多地与注册表服务器本身以及注册表服务器正在运行的Docker主机相关的硬件信息。**存储库**部分将允许您控制用户能够从中拉取镜像的存储库，无论是**公共**还是**私有**。**组织**部分允许您控制访问权限，也就是说，系统上谁可以对您选择配置的存储库执行推送、拉取或其他Docker相关命令。最后一个部分，**日志**部分，将允许您查看基于您的注册表使用的容器的日志。日志每两周轮换一次，最大大小为*64
    mb*。您还可以根据容器过滤日志，以及根据日期和/或时间搜索。'
- en: Workflow
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流
- en: In this section, let's pull an image, manipulate it, and then place it on our
    DTR for access by others within our organization.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，让我们拉取一张图片，对其进行操作，然后将其放在我们的DTR上，以便组织内的其他人可以访问。
- en: First, we need to pull an image from the **Docker Hub**. Now, you could start
    from scratch with a **Dockerfile** and then do a Docker build and then push, but
    let's, for this demonstration, say we have the `mysql` image and we want to customize
    it in some way.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从**Docker Hub**拉取一个镜像。现在，你可以从头开始使用**Dockerfile**，然后进行Docker构建，然后推送，但是，为了演示，我们假设我们有`mysql`镜像，并且我们想以某种方式对其进行定制。
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let's assume we made a customization to the image. Let's say that we set
    up the container to ship its logs off to a log stash server that we are using
    to collect our logs from all our containers that we are running. We now need to
    save those changes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们对图像进行了定制。假设我们设置了容器，将其日志发送到一个日志聚合服务器，我们正在使用该服务器从我们运行的所有容器中收集日志。现在我们需要保存这些更改。
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we go to do the commit, we need a few tidbits of information. The first
    is the container ID, which we can get from running a `docker ps` command. We also
    need the DNS name of our registry server that we set up earlier, and lastly a
    unique image name to give it. In our case, we will keep it as `mysql`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行提交时，我们需要一些信息。首先是容器ID，我们可以通过运行`docker ps`命令来获取。我们还需要我们之前设置的注册表服务器的DNS名称，最后是一个唯一的镜像名称。在我们的情况下，我们将其保留为`mysql`。
- en: We are now ready to push the updated image to our registry server. The only
    information we need is the image name that we want to push, which will be the
    `<dns.name>/mysql`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备将更新后的镜像推送到我们的注册表服务器。我们唯一需要的信息是我们要推送的镜像名称，即`<dns.name>/mysql`。
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The image is now ready to be used by the other users in our organization. Since
    the image is in our Trusted Registry, we can control access to that image from
    our clients. This could mean that our clients would need our certificate and keys
    to be able to push and pull this image, as well as permissions set up within the
    organization settings we previously went over in the last section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，该镜像已准备好供我们组织中的其他用户使用。由于镜像位于我们的受信任的注册表中，我们可以控制客户对该镜像的访问。这可能意味着我们的客户需要我们的证书和密钥才能推送和拉取该镜像，以及在我们之前在上一节中介绍的组织设置中设置的权限。
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can then make run the image, make changes if needed, and push the newly created
    image back to the Trusted Registry server as necessary.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以运行镜像，如果需要的话进行更改，并将新创建的镜像推送回受信任的注册服务器。
- en: Docker Registry
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Registry
- en: The Docker Registry is an open source option if you want to totally go at it
    on your own. If you totally want hands off, you can always use the Docker Hub
    and rely on public and private repositories, which will run you a fee on the Docker
    Hub though. This can be hosted locally on a server of your choosing or on a cloud
    service.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry是一个开源选项，如果您想完全自己操作的话。如果您完全不想操心，您可以随时使用Docker Hub，并依赖公共和私有存储库，在Docker
    Hub上会收取费用。这可以在您选择的服务器上或云服务上进行托管。
- en: Installation
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'The installation of the Docker Registry is extremely simply as it runs in a
    Docker container. This allows you to run it virtually anywhere, on a virtual machine
    in your own server environment or in a cloud environment. The typical port that
    is used is port `5000`, but you can change it to suit your needs:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry的安装非常简单，因为它运行在一个Docker容器中。这使您可以在几乎任何地方运行它，在您自己的服务器环境中的虚拟机中或在云环境中。通常使用的端口是端口`5000`，但您可以根据需要进行更改：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One of the other items you will notice from above is that we are specifying
    a version to use instead of leaving it blank and pulling the latest version. That
    is because as of writing this book, the latest version for that registry tag is
    still at version 0.9.1\. Now, while this might be suitable for some, version 2
    is stable enough to be considered and to run your production environment on. We
    are also introducing the `--restart=always` flag for that as in the event of something
    happening to the container, it will restart and be available to serve out or accept
    images.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到我们上面的另一个项目是，我们正在指定要使用的版本，而不是留空并拉取最新版本。这是因为在撰写本书时，该注册表标签的最新版本仍为0.9.1。现在，虽然这对一些人来说可能合适，但版本2已经足够稳定，可以考虑在生产环境中运行。我们还引入了`--restart=always`标志，以便在容器发生故障时，它将重新启动并可用于提供或接受镜像。
- en: Once you have run the command above, you will have a running container registry
    on the IP address of the Docker host you ran the command on along with the port
    selection that you used in your `docker run` command above.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您运行了上述命令，您将在Docker主机的IP地址上拥有一个运行的容器注册表，以及您在上面的`docker run`命令中使用的端口选择。
- en: Now it is time to put some images up on your new registry. The first thing we
    need is an image to push to the registry and we can do that in two ways. We can
    build images based on Docker files that we have created or we can pull down an
    image from another registry, in our case we will be using the Docker Hub, and
    then push that image to our new registry server. First, we need an image to choose
    and again, we will default back to the `mysql` image since it's a more popular
    image that most people might be using in their environments at some point along
    the way.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在您的新注册表上放一些图像了。我们首先需要一个要推送到注册表的图像，我们可以通过两种方式来实现。我们可以基于我们创建的Docker文件构建图像，或者我们可以从另一个注册表中拉取图像，在我们的情况下，我们将使用Docker
    Hub，然后将该图像推送到我们的新注册表服务器。首先，我们需要选择一个图像，再次，我们将默认回到`mysql`图像，因为它是一个更受欢迎的图像，大多数人在某个时候可能会在其环境中使用。
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, you need to tag the image so it will now be pointing to your new registry
    so you can do push it to the new location:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要标记图像，以便它现在指向您的新注册表，这样您就可以将其推送到新位置：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s break down that command above. What we are doing is applying the tag
    of `<IP_address>:5000/mysql` to the `mysql` image that we pulled from the Docker
    Hub. Now that `<IP_address>` piece will be replaced by the IP address from the
    Docker host that is running the registry container. This could also be a DNS name
    as well, as long as the DNS points to the correct IP that is running on the Docker
    host. We also need to specify the port number for our registry server, and in
    our case we left it with port `5000`, so we include: `5000` in the tag. Then,
    we are going to give it the same same of `mysql` at the end of the command. We
    are now ready to push this image to our new registry.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解上面的命令。我们正在做的是将`mysql`图像从Docker Hub中拉取，并将标签`<IP_address>:5000/mysql`应用于该图像。现在，`<IP_address>`部分将被Docker主机的IP地址替换，该主机正在运行注册表容器。这也可以是一个DNS名称，只要DNS指向正确的IP地址即可。我们还需要指定我们的注册表服务器的端口号，在我们的情况下，我们将其保留为端口`5000`，因此我们在标签中包括：`5000`。然后，我们将在命令的末尾给它相同的名称`mysql`。现在，我们准备将此图像推送到我们的新注册表。
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After it has been pushed, you can now pull it down from another machine that
    is configured with Docker and has access to the registry server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 推送完成后，您现在可以从另一台配置有Docker并且可以访问注册表服务器的机器上将其拉取下来。
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What we have looked at here are the defaults and while it could work if you
    want to use firewalls and such to secure the environment or even internal IP address,
    you still might want to take security to the next level and that is what we will
    look at in the next section. How can we make this even more secure?
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的是默认设置，虽然如果您想使用防火墙等来保护环境，甚至是内部IP地址，它可能会起作用，但您可能仍然希望将安全性提升到下一个级别，这就是我们将在下一节中讨论的内容。我们如何使这更加安全？
- en: Configuration and security
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和安全性
- en: It's time to tighten up our running registry with some additional features.
    The first method would be to run your registry using TLS. Using TLS allows you
    to apply certificates to the system so that people who are pulling from it know
    that it is who you say it is by knowing that someone hasn't comprised the server
    or is doing a man in the middle attack by supplying you with compromised images.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候用一些额外的功能来加强我们的运行注册表了。第一种方法是使用TLS运行您的注册表。使用TLS允许您向系统应用证书，以便从中提取的人知道它是您所说的那样，因为他们知道没有人侵犯了服务器，也没有人通过提供受损的图像进行中间人攻击。
- en: To do that, we will need to rework the Docker `run` command we were running
    in the last section. This is going to assume you have gone through some of the
    process of obtaining a certificate and key from your enterprise environment or
    you have self signed one using another piece of software.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要重新调整上一节中运行的Docker `run`命令。这将假定您已经完成了从企业环境获取证书和密钥的过程，或者您已经使用其他软件自签了一个。
- en: 'Our new command will look like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新命令将如下所示：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will need to be in the directory where the certificates are or specify
    the full path to them in the above command. Again, we are keeping the standard
    port of `5000`, along with the name of registry. You could alter that too to something
    that might suit you better. For the sake of this book we will keep it close to
    that in the official documentation in the event that you look there for more reference.
    Next, we add two additional lines to the `run` command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在证书所在的目录中，或在上述命令中指定完整路径。同样，我们保持标准端口`5000`，以及注册表的名称。您也可以将其更改为更适合您的内容。出于本书的目的，我们将保持接近官方文档中的内容，以便您在那里查找更多参考资料。接下来，我们在`run`命令中添加了两行额外的内容：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will allow you to specify the certificate and key file that you will be
    using. These two files will need to be in the same directory that you are running
    the run command from as the environmental variables will be looking for them upon
    run. Now you could also add a volume switch to the run command to make it a little
    cleaner if you like and put the certificate and key in that folder and run the
    registry server that way.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您指定要使用的证书和密钥文件。这两个文件需要在您运行`run`命令的同一目录中，因为环境变量将在运行时寻找它们。现在，如果您喜欢，您还可以在运行命令中添加一个卷开关，使其更加清晰，并将证书和密钥放在那个文件夹中以这种方式运行注册表服务器。
- en: The other way you can help with security is by putting a username and password
    on the registry server. This will help when users want to push or pull an item
    as they will need the username and password information. The catch with this is
    that you have to be using TLS in conjunction with this method. This method of
    username and password is not a standalone option.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在注册表服务器上设置用户名和密码来帮助提高安全性。当用户想要推送或拉取一个项目时，他们将需要用户名和密码信息。但这种方法的问题是，您必须与TLS一起使用。用户名和密码的这种方法不是一个独立的选项。
- en: 'First, you need to create a password file that you will be using in your `run`
    command:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个密码文件，该文件将在您的`run`命令中使用：
- en: '[PRE16]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, it can be a little confusing to understand what is happening here, so let's
    clear that up before we jump to the `run` command. First, we are issuing a `run`
    command. This command is going to run the `registry:2.2.0` container and its entry
    point specified means to run the `htpasswd` command along with the `-bn` switches,
    which will inject the `username` and `password` in an encrypted fashion into a
    file called `htpasswd` that you will be using for authentication purposes on the
    registry server. The `-b` means to run in batch mode while the `-n` means to display
    the results, and the `>` means to put those items into a file instead of to the
    actual output screen.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要理解这里发生了什么可能有点困惑，所以在我们跳转到`run`命令之前，让我们澄清一下。首先，我们发出了一个`run`命令。这个命令将运行`registry:2.2.0`容器，并且指定的入口点意味着运行`htpasswd`命令以及`-bn`开关，这将以加密方式将`username`和`password`注入到一个名为`htpasswd`的文件中，您将在注册表服务器上用于身份验证目的。`-b`表示批处理模式运行，而`-n`表示显示结果，`>`表示将这些项目放入文件而不是实际输出屏幕。
- en: 'Now, onto our newly enhanced and totally secure Docker `run` command for our
    registry:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看我们新增强的、完全安全的Docker `run`命令：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Again, it''s a lot to digest but let''s walk through it. We have seen some
    of these lines before in:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这是很多内容需要消化，但让我们一起来看一下。我们之前在一些地方已经看到了这些内容：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The new ones are:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 新的内容包括：…（未完待续）
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The first one tells the registry server to use `htpasswd` as its authentication
    method to verify clients. The second gives your registry a name and can be changed
    at your own discretion. The last one tells the registry server the location of
    the file that is to be used for the `htpasswd` authentication. Again, you will
    need to use volumes and put the `htpasswd` file in its own volume inside the container
    so it allows for easier updating down the road. You also need to remember the
    `htpasswd` file needs to be placed in the same directory as the certificate and
    key file when you execute the Docker `run` command.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个告诉注册服务器使用`htpasswd`作为其验证客户端的身份验证方法。第二个为您的注册表提供一个名称，并且可以根据您自己的意愿进行更改。最后一个告诉注册服务器要使用的文件的位置，该文件将用于`htpasswd`身份验证。同样，您需要使用卷，并将`htpasswd`文件放在容器内的自己的卷中，以便日后更容易更新。您还需要记住，在执行Docker
    `run`命令时，`htpasswd`文件需要放在与证书和密钥文件相同的目录中。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have looked at being able to sign your images using the
    components of Docker Content Trust as well as hardware signing using Docker Content
    Trust along with the third party utilities in the form of YubiKeys. We also took
    a look at Docker Subscription that you can utilize to your advantage to help set
    up not only secure Docker environments but also ones that are supported by those
    at Docker itself. We then looked at DTR as a solution that you can use to store
    your Docker images. Lastly, we looked at the Docker Registry, which is a self
    hosted registry that you can use to store and manage your images. This chapter
    should help give you enough configuration items to chew on to help you make the
    right decision as to where to store your images.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了如何使用Docker内容信任的组件以及使用Docker内容信任进行硬件签名，以及第三方实用程序，如YubiKeys。我们还了解了Docker订阅，您可以利用它来帮助建立不仅安全的Docker环境，而且还得到Docker官方支持的环境。然后，我们看了DTR作为您可以用来存储Docker镜像的解决方案。最后，我们看了Docker注册表，这是一个自托管的注册表，您可以用来存储和管理您的镜像。本章应该为您提供了足够的配置项，以帮助您做出正确的决定，确定在哪里存储您的镜像。
- en: In the next chapter we will be looking at securing/hardening Linux kernels.
    As the kernel is what is used to run all your containers, it is important that
    it is secured in the proper way to help alleviate any security related issues.
    We will be covering some hardening guides that you can use to accomplish this
    goal.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究如何保护/加固Linux内核。由于内核是用于运行所有容器的，因此很重要对其进行适当的保护，以帮助减轻任何安全相关的问题。我们将介绍一些加固指南，您可以使用这些指南来实现这一目标。
