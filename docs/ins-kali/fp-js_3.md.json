["```js\nvar x = _.map([1,2,3], Math.sqrt); // Underscore's map function\nconsole.log(x.toString());\n```", "```js\nvar x = [1,2,3].map(Math.sqrt);\n```", "```js\nvar greetings = [{origin: 'spanish', value: 'hola'}, \n{origin: 'english', value: 'hello'}];\nconsole.log(_.pluck(greetings, 'value')  );\n// Grabs an object's property.\n// Returns: ['hola', 'hello']\nconsole.log(_.find(greetings, function(s) {return s.origin == \n'spanish';}));\n// Looks for the first obj that passes the truth test\n// Returns: {origin: 'spanish', value: 'hola'}\ngreetings = greetings.concat(_.object(['origin','value'],\n['french','bonjour']));\nconsole.log(greetings);\n// _.object creates an object literal from two merged arrays\n// Returns: [{origin: 'spanish', value: 'hola'},\n//{origin: 'english', value: 'hello'},\n//{origin: 'french', value: 'bonjour'}]\n```", "```js\nvar g = _.chain(greetings)\n  .sortBy(function(x) {return x.value.length})\n  .pluck('origin')\n  .map(function(x){return x.charAt(0).toUpperCase()+x.slice(1)})\n  .reduce(function(x, y){return x + ' ' + y}, '')\n  .value();\n// Applies the functions \n// Returns: 'Spanish English French'\nconsole.log(g);\n```", "```js\n_.prototype.map = function(obj, iterate, [context]) {\n  if (Array.prototype.map && obj.map === Array.prototype.map) return obj.map(iterate, context);\n  // ...\n};\n```", "```js\nfunction getSelectedOptions(id, value) {\n  options = document.querySelectorAll('#' + id + ' option');\n  var newOptions = _.map(options, function(opt){\n    if (opt.text == value) {\n      opt.selected = true;\n      opt.text += ' (this is the default)';\n    }\n    else {\n      opt.selected = false;\n    }\n    return opt;\n  });\n  return newOptions;\n}\nvar optionsHelp = getSelectedOptions('timezones', 'Chicago');\n```", "```js\n// environments in bilby are immutable structure for multimethods\nvar shapes1 = bilby.environment()\n  // can define methods\n  .method(\n    'area', // methods take a name\n    function(a){return typeof(a) == 'rect'}, // a predicate\n    function(a){return a.x * a.y} // and an implementation\n  )\n  // and properties, like methods with predicates that always\n  // return true\n  .property(\n     'name',   // takes a name\n     'shape'); // and a function\n// now we can overload it\nvar shapes2 = shapes1\n  .method(\n    'area', function(a){return typeof(a) == 'circle'},\n    function(a){return a.r * a.r * Math.PI} );\nvar shapes3 = shapes2\n  .method(\n    'area', function(a){return typeof(a) == 'triangle'},\n    function(a){return a.height * a.base / 2} );\n\n// and now we can do something like this\nvar objs = [{type:'circle', r:5}, {type:'rect', x:2, y:3}];\nvar areas = objs.map(shapes3.area);\n\n// and this\nvar totalArea = objs.map(shapes3.area).reduce(add);\n```", "```js\n// Get the first eight lines of a song's lyrics\nvar lyrics = \"Lorem ipsum dolor sit amet, consectetur adipiscing eli\n// Without Lazy, the entire string is first split into lines\nconsole.log(lyrics.split('\\n').slice(0,3)); \n\n// With Lazy, the text is only split into the first 8 lines\n// The lyrics can even be infinitely long!\nconsole.log(Lazy(lyrics).split('\\n').take(3));\n\n//First 10 squares that are evenly divisible by 3\nvar oneTo1000 = Lazy.range(1, 1000).toArray(); \nvar sequence = Lazy(oneTo1000)\n  .map(function(x) { return x * x; })\n  .filter(function(x) { return x % 3 === 0; })\n  .take(10)\n  .each(function(x) { console.log(x); });\n\n// asynchronous iteration over an infinite sequence\nvar asyncSequence = Lazy.generate(function(x){return x++})\n  .async(100) // 0.100s intervals between elements\n  .take(20) // only compute the first 20  \n  .each(function(e) { // begin iterating over the sequence\n    console.log(new Date().getMilliseconds() + \": \" + e);\n  });\n```", "```js\nBacon.fromEventTarget(document.body, \"click\")\n  .onValue(function() { alert(\"Bacon!\") });\n```", "```js\n        $('#mydiv').fadeIn().css('left': 50).alert('hi!');\n        ```", "```js\n    $('li').css('left': function(index){return index*50});\n    ```"]