["```cs\n3 x 9 \n\n```", "```cs\nsquare a = a * a \nmax a b  = a, if a >= b \n         = b, if b > a \n\n```", "```cs\nsquare (1 + 2) \n\n```", "```cs\nmax 1 2 \n\n```", "```cs\nsquare (max 2 5) \n\n```", "```cs\nquad q = square q * square q \nquad 10 \n\n```", "```cs\nradius = 20 \n\n```", "```cs\narea = (22 / 7) * square (radius) \n\n```", "```cs\nsquare (1 + 2) -> square 3 (addition) \n               -> 3 x 3    (square) \n               -> 9        (multiply) \n\n```", "```cs\nsquare (1 + 2) -> (1 + 2) x (1 + 2) (square) \n               -> 3 x (1 + 2)       (addition)  \n               -> 3 x 3             (addition) \n               -> 9                 (multiply) \n\n```", "```cs\nf :: A -> B \n\n```", "```cs\nf(x) = x + 2 \n\n```", "```cs\ntriple y = y + y + y \ntriple' y = 3 * y \n\n```", "```cs\nmax a b  = a, if a >= b \n         = b, if b > a \n\n```", "```cs\nmax a b  = a, if a >= b \n         = b, otherwise \n\n```", "```cs\nf x y = (z + 2) * (z + 3) \n        where z = x + y \n\n```", "```cs\nf x y = x + z, if x > 100 \n      = x - z, otherwise \n        where z = triple(y + 3) \n\n```", "```cs\nmax a b  = a, if a >= b \n         = b, if b > a \n\n```", "```cs\nmax' (a,b)  = a, if a >= b \n            = b, if b > a \n\n```", "```cs\nmax' :: (num, num) -> num \n\n```", "```cs\nmax :: num -> (num -> num) \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    Func<int, int> f = (x) => x + 2; \n    int i = f(1); \n    Console.WriteLine(i); \n\n    f = (x) => 2 * x + 1; \n    i = f(1); \n    Console.WriteLine(i); \n  } \n} \n\n```", "```cs\nFunc<T1, T2, T3, T4, ..., T16, TResult> \n\n```", "```cs\nFunc<int, int> f = (x) => x + 2;  \n\n```", "```cs\n          class Program \n          { \n            delegate int DoubleAction(int inp); \n\n            static void Main(string[] args) \n            { \n              DoubleAction da = Double; \n              int doubledValue = da(2); \n            } \n\n            static int Double(int input) \n            { \n              return input * 2; \n            } \n          } \n\n    ```", "```cs\n          class Program \n          { \n            static void Main(string[] args) \n            { \n              Func<int, int> da =  \n                   input => input * 2; \n\n              int doubledValue = da(2); \n            } \n          } \n\n    ```", "```cs\nint i = f(1); \n\n```", "```cs\nf = (x) => 2 * x + 1; \ni = f(1); \n\n```", "```cs\nclass Program \n{ \n  private static string strValue = \"First\"; \n\n  public static void AddSpace(string str) \n  { \n    strValue += ' ' + str; \n  } \n\n  static void Main(string[] args) \n  { \n    AddSpace(\"Second\"); \n    AddSpace(\"Third\"); \n    Console.WriteLine(strValue); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  public static void AddSpace(StringBuilder sb, string str) \n  { \n    sb.Append(' ' + str); \n  } \n\n  static void Main(string[] args) \n  { \n    StringBuilder sb1 = new StringBuilder(\"First\"); \n    AddSpace(sb1, \"Second\"); \n    AddSpace(sb1, \"Third\"); \n    Console.WriteLine(sb1); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  public static string AddSpace(string strSource, string str) \n  { \n    return (strSource + ' ' + str); \n  } \n\n  static void Main(string[] args) \n  { \n    string str1 = \"First\"; \n    string str2 = AddSpace(str1, \"Second\"); \n    string str3 = AddSpace(str2, \"Third\"); \n    Console.WriteLine(str3); \n  } \n} \n\n```", "```cs\n7! = 7 x 6 x 5 x 4 x 3 x 2 x 1 \n   = 5040 \n\n```", "```cs\npublic partial class Program \n{ \n  private static int GetFactorial(int intNumber) \n  { \n    if (intNumber == 0) \n    { \n      return 1; \n    } \n\n    return intNumber * GetFactorial(intNumber - 1); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      \"Enter an integer number (Imperative approach)\"); \n    int inputNumber = Convert.ToInt32(Console.ReadLine()); \n    int factorialNumber = GetFactorial(inputNumber); \n    Console.WriteLine( \n      \"{0}! is {1}\", \n      inputNumber, \n      factorialNumber); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      \"Enter an integer number (Functional approach)\"); \n    int inputNumber = Convert.ToInt32(Console.ReadLine()); \n    IEnumerable<int> ints = Enumerable.Range(1, inputNumber); \n    int factorialNumber = ints.Aggregate((f, s) => f * s); \n    Console.WriteLine( \n      \"{0}! is {1}\", \n      inputNumber, \n      factorialNumber); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static int f(int x) \n  { \n    return (4 * x * x - 14 * x - 8); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    int i = f(5); \n    Console.WriteLine(i); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static int i = 0; \n\n  static void increment() \n  { \n    i++; \n  } \n\n  static void set(int inpSet) \n  { \n    i = inpSet; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    increment(); \n    Console.WriteLine(\"First increment(), i = {0}\", i); \n\n    set(6); \n    increment(); \n    Console.WriteLine(\"Second increment(), i = {0}\", i); \n\n    set(2); \n    increment(); \n    Console.WriteLine(\"Last increment(), i = {0}\", i); \n\n    return; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static string GetSign(int val) \n  { \n    string posOrNeg; \n\n    if (val > 0) \n      posOrNeg = \"positive\"; \n    else \n      posOrNeg = \"negative\"; \n\n    return posOrNeg; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      \"Sign of -15 is {0}\", \n      GetSign(-15)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static string GetSign(int val) \n  { \n    return val > 0 ? \"positive\" : \"negative\"; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static List<int> NthImperative(List<int> list, int n) \n  { \n    var newList = new List<int>(); \n\n    for (int i = 0; i < list.Count; i++) \n    { \n      if (i % n == 0) newList.Add(list[i]); \n    } \n\n    return newList; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static List<int> NthFunctional(List<int> list, int n) \n  { \n    return list.Where((x, i) => i % n == 0).ToList(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    List<int> listing = \n      new List<int>() { \n      0, 1, 2, 3, 4, 5, \n      6, 7, 8, 9, 10, 11, \n      12, 13, 14, 15, 16 }; \n\n    var list3rd_imper = NthImperative(listing, 3); \n    PrintIntList(\"Nth Imperative\", list3rd_imper); \n\n    var list3rd_funct = NthFunctional(listing, 3); \n    PrintIntList(\"Nth Functional\", list3rd_funct); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void PrintIntList( \n    string titleHeader, \n    List<int> list) \n  { \n    Console.WriteLine( \n      String.Format(\"{0}\", \n      titleHeader)); \n\n    foreach (int i in list) \n    { \n      Console.Write(String.Format(\"{0}\\t\", i)); \n    } \n\n    Console.WriteLine(\"\\n\"); \n  } \n} \n\n```", "```cs\npublic class Tuple <T1>\npublic class Tuple <T1, T2>\npublic class Tuple <T1, T2, T3>\npublic class Tuple <T1, T2, T3, T4>\npublic class Tuple <T1, T2, T3, T4, T5>\npublic class Tuple <T1, T2, T3, T4, T5, T6>\npublic class Tuple <T1, T2, T3, T4, T5, T6, T7>\npublic class Tuple <T1, T2, T3, T4, T5, T6, T7, T8>\n```", "```cs\npublic partial class Program\n{\n  Tuple<string, int, int> geometry1 =\n     new Tuple<string, int, int>(\n         \"Rectangle\",\n          2,\n          3);\n  Tuple<string, int, int> geometry2 =\n  Tuple.Create(\n         \"Square\",\n          2,\n          2);\n}\n```", "```cs\npublic partial class Program\n{\n  private static void ConsumeTuple()\n  {\n    Console.WriteLine(\n      \"{0} has size {1} x {2}\",\n       geometry1.Item1,\n       geometry1.Item2,\n       geometry1.Item3);\n    Console.WriteLine(\n      \"{0} has size {1} x {2}\",\n       geometry2.Item1,\n       geometry2.Item2,\n       geometry2.Item3);\n  }\n}\n```", "```cs\npublic partial class Program\n{\n  private static Tuple<int, int> (\n     string shape)\n  { GetSize\n    if (shape == \"Rectangle\")\n    {\n      return Tuple.Create(2, 3);\n    }\n    else if (shape == \"Square\")\n    {\n      return Tuple.Create(2, 2);\n    }\n    else\n    {\n      return Tuple.Create(0, 0);\n    }\n  }\n}\n```", "```cs\npublic partial class Program\n{\n\u00a0 private static void ReturnTuple()\n\u00a0 {\n\u00a0 \u00a0 var rect = GetSize(\"Rectangle\");\n\u00a0 \u00a0 Console.WriteLine(\n\u00a0 \u00a0 \u00a0 \u00a0 \"Rectangle has size {0} x {1}\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rect.Item1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 rect.Item2);\n\u00a0 \u00a0 var square = GetSize(\"Square\");\n\u00a0 \u00a0 Console.WriteLine(\n\u00a0 \u00a0 \u00a0 \u00a0\"Square has size {0} x {1}\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0square.Item1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0square.Item2);\n\u00a0 }\n}\n```", "```cs\npublic partial class Program\n{\n\u00a0 (int, int) GetSizeInCS7(\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string shape)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 if (shape == \"Rectangle\")\n\u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 return (2, 3);\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 else if (shape == \"Square\")\n\u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 return (2, 2);\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 else\n\u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 return (0, 0);\n\u00a0 \u00a0 \u00a0 }\n\u00a0 }\n}\n```", "```cs\npublic partial class Program\n{\n\u00a0 private static (int x, int y) GetSizeNamedItem(\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 string shape)\n\u00a0 {\n\u00a0 \u00a0 if (shape == \"Rectangle\")\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 return (2, 3);\n\u00a0 \u00a0 }\n\u00a0 \u00a0 else if (shape == \"Square\")\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 return (2, 2);\n\u00a0 \u00a0 }\n\u00a0 \u00a0 else\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 return (0, 0);\n\u00a0 \u00a0 }\n\u00a0 }\n}\n```", "```cs\npublic partial class Program\n{\n  private static void ConsumeTupleByItemName()\n  {\n    var rect = GetSizeNamedItem(\"Rectangle\");\n    Console.WriteLine(\n       \"Rectangle has size {0} x {1}\",\n        rect.x,\n        rect.y);\n    var square = GetSizeNamedItem(\"Square\");\n    Console.WriteLine(\n       \"Square has size {0} x {1}\",\n        square.x,\n        square.y);\n  }\n}\n```", "```cs\npublic partial class Program \n{ \n  public static int NonCurriedAdd(int a, int b) => a + b; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    int add = NonCurriedAdd(2, 3); \n    Console.WriteLine(add); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static Func<int, int> CurriedAdd(int a) => b => a + b; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void CurriedStyle1() \n  { \n    int add = CurriedAdd(2)(3); \n    Console.WriteLine(add); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public static void CurriedStyle2() \n  { \n    var addition = CurriedAdd(2); \n\n    int x = addition(3); \n    Console.WriteLine(x); \n  } \n} \n\n```", "```cs\nvar addition = CurriedAdd(2); \n\n```", "```cs\nint x = addition(3); \n\n```", "```cs\n\nC:\\>dir | more\n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      Encoding.UTF8.GetString( \n        new byte[] { 0x70, 0x69, 0x70, 0x65, 0x6C, \n        0x69, 0x6E, 0x69, 0x6E, 0x67 } \n      ) \n    ); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    var bytes = new byte[] { \n      0x70, 0x69, 0x70, 0x65, 0x6C, \n      0x69, 0x6E, 0x69, 0x6E, 0x67 }; \n    var stringFromBytes = Encoding.UTF8.GetString(bytes); \n    Console.WriteLine(stringFromBytes); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    var sb = new StringBuilder(\"0123\", 10); \n    sb.Append(new char[] { '4', '5', '6' }); \n    sb.AppendFormat(\"{0}{1}{2}\", 7, 8, 9); \n    sb.Insert(0, \"number: \"); \n    sb.Replace('n', 'N'); \n    var str = sb.ToString(); \n    Console.WriteLine(str); \n  } \n} \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    var str = \n      new StringBuilder(\"0123\", 10) \n          .Append(new char[] { '4', '5', '6' }) \n          .AppendFormat(\"{0}{1}{2}\", 7, 8, 9) \n          .Insert(0, \"number: \") \n          .Replace('n', 'N') \n          .ToString(); \n    Console.WriteLine(str); \n  } \n} \n\n```", "```cs\n<ol id=\"thePlanets\"> \n  <li>The Sun/li> \n  <li value=\"0\">Mercury</li> \n  <li value=\"1\">Venus</li> \n  <li value=\"2\">Earth</li> \n  <li value=\"3\">Mars</li> \n  <li value=\"4\">Jupiter</li> \n  <li value=\"5\">Saturn</li> \n  <li value=\"6\">Uranus</li> \n  <li value=\"7\">Neptune</li> \n</ol> \n\n```", "```cs\nclass Program \n{ \n  static void Main(string[] args) \n  { \n    byte[] buffer; \n    using (var stream = Utility.GeneratePlanetsStream()) \n    { \n      buffer = new byte[stream.Length]; \n      stream.Read(buffer, 0, (int)stream.Length); \n    } \n    var options = Encoding.UTF8 \n      .GetString(buffer) \n      .Split(new[] { Environment.NewLine, }, \n             StringSplitOptions.RemoveEmptyEntries) \n      .Select((s, ix) => Tuple.Create(ix, s)) \n      .ToDictionary(k => k.Item1, v => v.Item2); \n    var orderedList = Utility.GenerateOrderedList( \n        options, \"thePlanets\", true); \n\n    Console.WriteLine(orderedList); \n  } \n} \n\n```", "```cs\nbyte[] buffer; \nusing (var stream = Utility.GeneratePlanetsStream()) \n{ \n  buffer = new byte[stream.Length]; \n  stream.Read(buffer, 0, (int)stream.Length); \n} \n\n```", "```cs\npublic static partial class Utility \n{ \n  public static Stream GeneratePlanetsStream() \n  { \n    var planets = \n    String.Join( \n      Environment.NewLine, \n      new[] { \n        \"Mercury\", \"Venus\", \"Earth\", \n        \"Mars\", \"Jupiter\", \"Saturn\", \n        \"Uranus\", \"Neptune\" \n    }); \n\n    var buffer = Encoding.UTF8.GetBytes(planets); \n    var stream = new MemoryStream(); \n    stream.Write(buffer, 0, buffer.Length); \n    stream.Position = 0L; \n\n    return stream; \n  } \n} \n\n```", "```cs\nvar options = Encoding.UTF8 \n  .GetString(buffer) \n  .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2); \n\n```", "```cs\nvar orderedList = Utility.GenerateOrderedList( \n    options, \"thePlanets\", true);  \n\n```", "```cs\npublic static partial class Utility \n{ \n  public static string GenerateOrderedList( \n    IDictionary<int, string> options, \n    string id, \n    bool includeSun) \n  { \n    var html = new StringBuilder(); \n    html.AppendFormat(\"<ol id=\"{0}\">\", id); \n    html.AppendLine(); \n\n    if (includeSun) \n    { \n      html.AppendLine(\"\\t<li>The Sun/li>\"); \n    } \n\n    foreach (var opt in options) \n    { \n      html.AppendFormat(\"\\t<li value=\"{0}\">{1}</li>\",\n      opt.Key,\n      opt.Value); \n      html.AppendLine(); \n    } \n\n    html.AppendLine(\"</ol>\"); \n\n    return html.ToString(); \n  } \n} \n\n```", "```cs\nvar html = new StringBuilder(); \n    html.AppendFormat(\"<ol id=\"{0}\">\", id); \n    html.AppendLine(); \n\n```", "```cs\nforeach (var opt in options) \n{ \n  html.AppendFormat(\"\\t<li value=\"{0}\">{1}</li>\", \n    opt.Key, \n    opt.Value); \n  html.AppendLine(); \n} \n\n```", "```cs\nhtml.AppendLine(\"</ol>\"); \n\n```", "```cs\nvar html = new StringBuilder(); \n  html.AppendFormat(\"<ol id=\"{0}\">\", id); \n  html.AppendLine(); \n\n```", "```cs\nvar html = \n  new StringBuilder() \n    .AppendFormat(\"<ol id=\"{0}\">\", id) \n    .AppendLine(); \n\n```", "```cs\npublic static partial class StringBuilderExtension \n{ \n  public static StringBuilder AppendFormattedLine( \n    this StringBuilder @this,\n    string format, \n    params object[] args) => \n       @this.AppendFormat(format, args).AppendLine(); \n} \n\n```", "```cs\nvar html = \n  new StringBuilder() \n      .AppendFormattedLine(\"<ol id=\"{0}\">\", id); \n\n```", "```cs\nforeach (var opt in options) \n{ \n  html.AppendFormat(\"\\t<li value=\"{0}\">{1}</li>\", \n    opt.Key, \n    opt.Value); \n  html.AppendLine(); \n} \n\n```", "```cs\nforeach (var opt in options) \n{ \n  html.AppendFormattedLine( \n    \"\\t<li value=\"{0}\">{1}</li>\", \n    opt.Key, \n    opt.Value); \n} \n\n```", "```cs\npublic static partial class StringBuilderExtension \n{ \n  public static StringBuilder AppendLineWhen( \n    this StringBuilder @this, \n    Func<bool> predicate, \n    string value) => \n        predicate() \n         ? @this.AppendLine(value) \n          : @this;  \n} \n\n```", "```cs\nvar html = \n  new StringBuilder() \n    .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n    .AppendLineWhen(() => includeSun, \"\\t<li>The Sun/li>\"); \n\n```", "```cs\nif (includeSun) \n{ \n  html.AppendLine(\"\\t<li>The Sun/li>\"); \n} \n\n```", "```cs\npublic static partial class StringBuilderExtension \n{ \n  public static StringBuilder AppendWhen( \n    this StringBuilder @this, \n    Func<bool> predicate, \n    Func<StringBuilder, StringBuilder> fn) => \n    predicate() \n    ? fn(@this) \n    : @this; \n} \n\n```", "```cs\nvar html = \n  new StringBuilder() \n  .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n  .AppendWhen( \n    () => includeSun, \n    sb => sb.AppendLine(\"\\t<li>The Sun/li>\")); \n\n```", "```cs\npublic static partial class StringBuilderExtension \n{ \n  public static StringBuilder AppendSequence<T>( \n    this StringBuilder @this, \n    IEnumerable<T> sequence, \n    Func<StringBuilder, T, StringBuilder> fn) => \n      sequence.Aggregate(@this, fn); \n} \n\n```", "```cs\nvar html = \n  new StringBuilder() \n  .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n  .AppendWhen( \n    () => includeSun, \n    sb => sb.AppendLine(\"\\t<li>The Sun/li>\")) \n  .AppendSequence( \n    options, \n    (sb, opt) => \n      sb.AppendFormattedLine( \n      \"\\t<li value=\"{0}\">{1}</li>\", \n      opt.Key, \n      opt.Value)); \n\n```", "```cs\nforeach (var opt in options) \n{ \n  html.AppendFormattedLine( \n    \"\\t<li value=\"{0}\">{1}</li>\", \n    opt.Key, \n    opt.Value); \n} \n\n```", "```cs\nvar html = \n  new StringBuilder() \n  .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n  .AppendWhen( \n    () => includeSun, \n    sb => sb.AppendLine(\"\\t<li>The Sun/li>\")) \n  .AppendSequence( \n    options, \n    (sb, opt) => \n      sb.AppendFormattedLine( \n        \"\\t<li value=\"{0}\">{1}</li>\", \n        opt.Key, \n        opt.Value)) \n  .AppendLine(\"</ol>\"); \n\n```", "```cs\nreturn html.ToString(); \n\n```", "```cs\nvar html = \n  new StringBuilder() \n  .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n  .AppendWhen( \n    () => includeSun, \n    sb => sb.AppendLine(\"\\t<li>The Sun/li>\")) \n  .AppendSequence( \n    options, \n    (sb, opt) => \n      sb.AppendFormattedLine( \n      \"\\t<li value=\"{0}\">{1}</li>\", \n      opt.Key, \n      opt.Value)) \n  .AppendLine(\"</ol>\") \n  .ToString(); \n\n```", "```cs\n'Utility.GenerateOrderedList(IDictionary<int, string>, string, bool)': not all code paths return a value \n\n```", "```cs\npublic static partial class Utility \n{ \n  public static string GenerateOrderedList( \n    IDictionary<int, string> options, \n    string id, \n    bool includeSun) => \n      new StringBuilder() \n      .AppendFormattedLine(\"<ol id=\"{0}\">\", id) \n      .AppendWhen( \n        () => includeSun, \n        sb => sb.AppendLine(\"\\t<li>The Sun/li>\")) \n      .AppendSequence( \n        options, \n        (sb, opt) => \n          sb.AppendFormattedLine( \n          \"\\t<li value=\"{0}\">{1}</li>\", \n          opt.Key, \n          opt.Value)) \n       .AppendLine(\"</ol>\") \n       .ToString(); \n} \n\n```", "```cs\nbyte[] buffer; \nusing (var stream = Utility.GeneratePlanetsStream()) \n{ \n    buffer = new byte[stream.Length]; \n    stream.Read(buffer, 0, (int)stream.Length); \n} \n\n```", "```cs\npublic static class Disposable \n{ \n  public static TResult Using<TDisposable, TResult> \n  ( \n    Func<TDisposable> factory, \n    Func<TDisposable, TResult> fn) \n    where TDisposable : IDisposable \n    { \n      using (var disposable = factory()) \n      { \n        return fn(disposable); \n      } \n    } \n}\n\n```", "```cs\nvar buffer = \n  Disposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => \n    { \n      var buff = new byte[stream.Length]; \n      stream.Read(buff, 0, (int)stream.Length); \n      return buff; \n    }); \n\n```", "```cs\npublic static partial class FunctionalExtensions \n{ \n  public static TResult Map<TSource, TResult>( \n    this TSource @this, \n    Func<TSource, TResult> fn) => \n    fn(@this); \n} \n\n```", "```cs\nvar buffer = \n  Disposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => \n    { \n      var buff = new byte[stream.Length]; \n      stream.Read(buff, 0, (int)stream.Length); \n      return buff; \n    }) \n    .Map(Encoding.UTF8.GetString) \n    .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2); \n\n```", "```cs\nvar options = \n  Encoding \n  .UTF8 \n  .GetString(buffer) \n  .Split(new[] { Environment.NewLine, },  \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2); \n\n```", "```cs\nvar orderedList = Utility.GenerateOrderedList( \n  options, \"thePlanets\", true); \n\n```", "```cs\nvar buffer = \n  Disposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => \n    { \n      var buff = new byte[stream.Length]; \n      stream.Read(buff, 0, (int)stream.Length); \n      return buff; \n    }) \n  .Map(Encoding.UTF8.GetString) \n  .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2) \n  .Map(options => Utility.GenerateOrderedList( \n    options, \"thePlanets\", true)); \n\n```", "```cs\nvar orderedList = \n  Disposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => \n    { \n      var buff = new byte[stream.Length]; \n      stream.Read(buff, 0, (int)stream.Length); \n      return buff; \n    }) \n  .Map(Encoding.UTF8.GetString) \n  .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2) \n  .Map(options => Utility.GenerateOrderedList( \n    options, \"thePlanets\", true));  \n\n```", "```cs\npublic static partial class FunctionalExtensions \n{ \n  public static T Tee<T>( \n    this T @this,  \n    Action<T> action) \n  { \n    action(@this); \n    return @this; \n  } \n} \n\n```", "```cs\nDisposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => \n    { \n      var buff = new byte[stream.Length]; \n      stream.Read(buff, 0, (int)stream.Length); \n      return buff; \n    }) \n  .Map(Encoding.UTF8.GetString) \n  .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2) \n  .Map(options => Utility.GenerateOrderedList( \n    options, \"thePlanets\", true)) \n  .Tee(Console.WriteLine); \n\n```", "```cs\nstream => \n{ \n  var buff = new byte[stream.Length]; \n  stream.Read(buff, 0, (int)stream.Length); \n  return buff; \n} \n\n```", "```cs\nDisposable \n  .Using( \n    Utility.GeneratePlanetsStream, \n    stream => new byte[stream.Length] \n  .Tee(b => stream.Read( \n    b, 0, (int)stream.Length))) \n  .Map(Encoding.UTF8.GetString) \n  .Split(new[] { Environment.NewLine, }, \n    StringSplitOptions.RemoveEmptyEntries) \n  .Select((s, ix) => Tuple.Create(ix, s)) \n  .ToDictionary(k => k.Item1, v => v.Item2) \n  .Map(options => Utility.GenerateOrderedList( \n    options, \"thePlanets\", true)) \n  .Tee(Console.WriteLine);  \n\n```"]