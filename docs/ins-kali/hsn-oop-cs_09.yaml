- en: Visual Studio and Associated Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio和相关工具
- en: Visual Studio is an **integrated development environment** (**IDE**) from Microsoft.
    It's computer software, and a tool that can be used to write, debug, and execute
    code. Visual Studio is one of the most popular IDEs available in the industry,
    and is mainly used for .NET applications. As it is from Microsoft, it makes .NET
    development very easy and smooth. You can use Visual Studio for other programming
    languages, but I can't guarantee that it will be the most useful option; however,
    for C# developers like me, this is the best IDE available. As a developer, I spend
    most of my time in Visual Studio.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是微软的**集成开发环境**（**IDE**）。它是一种计算机软件，可以用来编写、调试和执行代码。Visual Studio是行业中最受欢迎的IDE之一，主要用于.NET应用程序。由于它来自微软，因此使.NET开发变得非常简单和顺畅。您可以使用Visual
    Studio进行其他编程语言，但我不能保证它会是最有用的选择；然而，对于像我这样的C#开发人员来说，这是最好的IDE。作为开发人员，我大部分时间都在Visual
    Studio中度过。
- en: 'At the time of writing this book, the latest version of Visual Studio is Visual
    Studio 2017\. Microsoft has introduced different editions of Visual Studio. One
    of these, the Community edition, is free. There are also two other editions: Visual
    Studio Professional and Visual Studio Enterprise. The Professional and Enterprise
    editions are not free, and are more suitable for big projects. In this book, we
    will explore the features of the Community edition, as that is free and has sufficient
    functionalities for the purposes of this book.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Visual Studio的最新版本是Visual Studio 2017。微软推出了不同版本的Visual Studio。其中之一是社区版，是免费的。还有另外两个版本：Visual
    Studio专业版和Visual Studio企业版。专业版和企业版是收费的，更适合大型项目。在本书中，我们将探讨社区版的功能，因为它是免费的，并且具有足够的功能来满足本书的目的。
- en: 'In this chapter, we will learn about the features of Visual Studio. We will
    cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Visual Studio的特性。我们将涵盖以下主题：
- en: Visual Studio project types and templates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio项目类型和模板
- en: Visual Studio Editor and the different windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio编辑器和不同的窗口
- en: Debugging windows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试窗口
- en: Breakpoints, Call Stack Trace, and Watch
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点、调用堆栈跟踪和监视
- en: Git in Visual Studio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio中的Git
- en: Refactoring and code-optimization techniques
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构和代码优化技术
- en: Visual Studio project types and templates
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio项目类型和模板
- en: Visual Studio is the best IDE for Microsoft-related technology stacks. You can
    use Visual Studio whether you are planning to develop a desktop application for
    Windows or a web application for Windows Server. The best part of using Visual
    Studio is that the IDE will help you with lots of common tasks that you would
    have to perform manually if you were not using it. For example, if you were planning
    to create a web application using ASP.NET **Model-View-Controller** (**MVC**),
    Visual Studio can provide you a template for an MVC application. You can start
    with the template and modify it according to your requirements. Without this,
    you would have to download the packages, create the folders, and set the web configuration
    for the application. To get the full benefit of Visual Studio, you have to know
    the different projects and templates that come with it so that you can speed up
    your development process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是与微软相关技术堆栈的最佳IDE。无论您是计划为Windows开发桌面应用程序还是为Windows Server开发Web应用程序，都可以使用Visual
    Studio。使用Visual Studio的最佳部分是，如果您没有使用它，IDE将帮助您完成许多常见任务，否则您将不得不手动执行这些任务。例如，如果您计划使用ASP.NET
    **Model-View-Controller**（**MVC**）创建Web应用程序，Visual Studio可以为您提供MVC应用程序的模板。您可以从模板开始，并根据您的要求进行修改。如果没有这个，您将不得不下载包，创建文件夹，并为应用程序设置Web配置。要充分利用Visual
    Studio，您必须了解它提供的不同项目和模板，以便加快开发过程。
- en: 'Let''s take a look at the different project types that Visual Studio provides.
    After opening Visual Studio, if you click New Project, the following window will
    pop up:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Visual Studio提供的不同项目类型。打开Visual Studio后，如果单击“新建项目”，将弹出以下窗口：
- en: '![](img/6483b062-3e94-4810-82fd-024b9d769227.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6483b062-3e94-4810-82fd-024b9d769227.png)'
- en: Here, on the left-hand side, we can see the major categories of the projects: Recent,
    Installed, and Online. In the Recent tab, you can see the project types that have
    been used recently, so you don't have to search for commonly used project types
    every time. In the Installed tab, you will find the project types that are already
    installed on your computer. When you install Visual Studio, you can choose which
    workloads you want to install.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们可以看到项目的主要类别：最近、已安装和在线。在“最近”选项卡中，您可以看到最近使用过的项目类型，因此您不必每次都搜索常用的项目类型。在“已安装”选项卡中，您将找到已经安装在计算机上的项目类型。安装Visual
    Studio时，您可以选择要安装哪些工作负载。
- en: 'The Workloads window that will appear while installing Visual Studio looks
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Visual Studio时会出现的工作负载窗口如下所示：
- en: '![](img/fc58e654-17d5-4442-acd0-74c2eac96931.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc58e654-17d5-4442-acd0-74c2eac96931.png)'
- en: The Workloads options you choose have a direct relation to the installed project
    types. Under the Online tab, you will find the projects that were not installed
    when Visual Studio was installed. There are many project templates available for
    Visual Studio, which is why they are not all installed at once.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的工作负载选项与安装的项目类型直接相关。在“在线”选项卡下，您将找到在安装Visual Studio时未安装的项目。Visual Studio提供了许多项目模板，这就是为什么它们不会一次全部安装的原因。
- en: 'Now, if we expand the Installed tab, we will see that the different programming
    languages are shown as child tabs: Visual C#, Visual Basic, Visual C++, and so
    on. As this book relates to C#, we will only focus on the Visual C# area, as shown
    in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们展开“已安装”选项卡，我们将看到不同的编程语言显示为子选项卡：Visual C#、Visual Basic、Visual C++等。由于本书涉及C#，我们将只关注Visual
    C#区域，如下面的屏幕截图所示：
- en: '![](img/2c7b657b-5369-4009-b4e3-6991495163e5.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c7b657b-5369-4009-b4e3-6991495163e5.png)'
- en: 'If we expand the Visual C# tab, we will see more tabs that relate to more specific
    types of projects, such as Windows Desktop, Web, .NET Core, Test, and so on. But
    if we focus on the middle part of the window, we will see the different project
    templates, such as Windows Forms App (.NET Framework), Console App (.NET Core),
    Console App (.NET Framework), Class Library (.NET Standard), Class Library (.NET
    Framework), ASP .NET Core Web Application, ASP.NET Web Application (.NET Framework),
    and so on. On the right-hand side of the window, we can see a short description
    of the project template that you have selected in the middle pane, as shown in
    the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们展开Visual C#选项卡，我们将看到与更具体类型的项目相关的更多选项卡，例如Windows桌面、Web、.NET Core、测试等。但是，如果我们专注于窗口的中间部分，我们将看到不同的项目模板，例如Windows窗体应用程序（.NET
    Framework）、控制台应用程序（.NET Core）、控制台应用程序（.NET Framework）、类库（.NET标准）、类库（.NET Framework）、ASP
    .NET Core Web应用程序、ASP.NET Web应用程序（.NET Framework）等。在窗口的右侧，我们可以看到您在中间窗格中选择的项目模板的简短描述，如下图所示：
- en: '![](img/446af09c-d6c1-472b-9b81-d871430bcbd5.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/446af09c-d6c1-472b-9b81-d871430bcbd5.png)'
- en: 'Let''s take a look at some of the most common project templates available in
    Visual Studio 2017:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下Visual Studio 2017中提供的一些最常见的项目模板：
- en: '**Console App: **A project to create a command-line application. There are
    two different types of this kind of project: one for .NET Core and another for
    .NET Framework.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台应用程序：** 用于创建命令行应用程序的项目。这种类型的项目有两种不同的类型：一个用于.NET Core，另一个用于.NET Framework。'
- en: '**Class Library:** You can use this template if you are developing a class
    library project that can be used as an extension code of another project. In Visual
    Studio 2017, you again get two options: one for .NET Standard and another for
    .NET Framework.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类库：** 如果您正在开发可以用作另一个项目的扩展代码的类库项目，则可以使用此模板。在Visual Studio 2017中，您再次获得两个选项：一个用于.NET标准，另一个用于.NET
    Framework。'
- en: '**ASP.NET Core Web Application: **This project is for web applications that
    use .NET Core, which is platform-independent. You can create MVC, web API, and
    SPA applications with this type of project.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core Web应用程序：** 用于使用.NET Core的Web应用程序。您可以使用此类型的项目创建MVC、Web API和SPA应用程序。'
- en: '**ASP.NET Web Application (.NET Framework): **This project template is used
    to develop web applications using .NET Framework. Similar to the ASP.NET Core
    Web Application template, with this project template, you can choose from MVC,
    web API, or SPA projects.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web应用程序（.NET Framework）：** 此项目模板用于使用.NET Framework开发Web应用程序。与ASP.NET
    Core Web应用程序模板类似，使用此项目模板，您可以选择MVC、Web API或SPA项目。'
- en: '**WCF Server Application:** You can use this project type to create a **Windows
    Communication Foundation** (**WCF**) service.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WCF服务器应用程序：** 您可以使用此项目类型来创建**Windows通信基础**（**WCF**）服务。'
- en: '**WPF App (.NET Framework):** You can choose this template if you are creating
    a **Windows Presentation Foundation** (**WPF**) project.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPF应用程序（.NET Framework）：** 如果您正在创建**Windows演示基础**（**WPF**）项目，可以选择此模板。'
- en: '**Unit Test Project (.NET Framework):** This is a project for unit testing.
    If you create this project, you will get a premade test class, and you can use
    it to write your unit tests.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试项目（.NET Framework）：** 这是一个用于单元测试的项目。如果您创建此项目，您将获得一个预制的测试类，并且您可以使用它来编写您的单元测试。'
- en: There are many other project templates available that are used by .NET developers.
    It is always better to start with a project template rather than a blank template
    if you are sure about your application's purpose.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他可供.NET开发人员使用的项目模板。如果您确定应用程序的目的，最好从项目模板开始，而不是从空白模板开始。
- en: Visual Studio Editor and different windows
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio编辑器和不同的窗口
- en: 'Visual Studio is not like a simple text editor. It has many tools and features,
    so it can be a little overwhelming. However, to get started, you don''t need to
    understand every tool and feature: you just need the basics. As you learn more
    about it, you can take full advantage of its capabilities, making your life easier
    and making you more productive. Later in this chapter, we will also learn some
    very useful keyboard shortcuts. We will first take a look at the basics.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio不像简单的文本编辑器。它有许多工具和功能，因此可能有点压倒性。但是，要开始，您不需要了解每个工具和功能：您只需要基础知识。随着您对其了解的增加，您可以充分利用其功能，使您的生活更轻松，提高您的生产力。在本章的后面，我们还将学习一些非常有用的键盘快捷键。我们首先来看一下基础知识。
- en: Editor window
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器窗口
- en: 'After you create or open a project in Visual Studio, you will see a screen
    that looks like the one shown in the following screenshot, unless you have a different
    environment setup. On the left-hand side, the window that shows the code is called
    the **Editor window**. This is the window where you will write your code. This
    Editor window is very smart; it appears when the file is open in the editor in
    the upper-left corner. If multiple files are open, the active file will have a
    blue background and the inactive files will be black, as shown in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建或打开项目后，您将看到一个屏幕，看起来像下面的截图所示，除非您有不同的环境设置。在左侧，显示代码的窗口称为**编辑器窗口**。这是您将编写代码的窗口。这个编辑器窗口非常智能；当文件在编辑器中打开时，它会出现在左上角。如果有多个文件打开，活动文件将具有蓝色背景，而非活动文件将是黑色，如下图所示：
- en: '![](img/2d7482e4-5b5b-4a40-a144-0fffee700eed.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7482e4-5b5b-4a40-a144-0fffee700eed.png)'
- en: The line numbers are shown on the left-hand side of each code line, and the
    code is represented in different colors. The words in blue are reserved keywords
    in C#, the text in white is your active modifiable code, the green text represents
    a class name, and the orange text refers to string text. There are some other
    colors, underline marks, and symbols available in Visual Studio to help you understand
    the code better. If you are reading a black-and-white copy of this book, I would
    suggest that you open Visual Studio and write the code to check the color representation.
    For example, take a look at the `using` statements in the following screenshot.
    Apart from the `System` namespace, all other namespaces are in a duller color,
    which means that those namespaces are not yet in use in this file. The `System`
    namespace is bright white because we have used the `Console.WriteLine()` method
    in our code, which belongs to the `System` namespace. You can also see that there
    are boxes with the - sign inside it, on the left of the code with a horizontal line
    below it. This shows the code-folding options.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 行号显示在每行代码的左侧，代码以不同的颜色表示。蓝色的单词是C#中的保留关键字，白色的文本是您的活动可修改的代码，绿色的文本表示类名，橙色的文本表示字符串文本。Visual
    Studio中还有一些其他颜色、下划线标记和符号可帮助您更好地理解代码。如果您正在阅读本书的黑白副本，我建议您打开Visual Studio并编写代码以检查颜色表示。例如，看看以下屏幕截图中的`using`语句。除了`System`命名空间外，所有其他命名空间都是较暗的颜色，这意味着这些命名空间在此文件中尚未使用。`System`命名空间是明亮的白色，因为我们在代码中使用了`Console.WriteLine()`方法，该方法属于`System`命名空间。您还可以看到代码左侧带有-符号的方框，下面有一条水平线。这显示了代码折叠选项。
- en: 'You can easily fold a code in order to see a particular code more clearly:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松折叠代码以更清晰地查看特定代码：
- en: '![](img/e7c57821-4827-41bd-93bb-21403ba9dba0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7c57821-4827-41bd-93bb-21403ba9dba0.png)'
- en: 'The dashed line from an opening curly brace to a closed curly brace shows you
    which area the braces cover. So even if you have not placed your opening and closing
    braces in the same vertical line, you will be able to see which lines those braces
    cover, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从左花括号到右花括号的虚线显示了括号覆盖的区域。因此，即使您没有将左右花括号放在同一垂直线上，您也能够看到这些花括号覆盖的行，如下面的屏幕截图所示：
- en: '![](img/c0d23a18-60a4-4b3e-8af1-970a6873e9d4.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0d23a18-60a4-4b3e-8af1-970a6873e9d4.png)'
- en: 'The Editor window has some other useful features, such as **IntelliSense **and
    **refactoring**. IntelliSense suggests other options or more details of a component
    when you write code, including code completion, information about the code, the
    usage of the code, and the code requirements. For example, if you are writing
    `Console`, it will suggest different options that you might want to write and
    will also tell you what that particular code does and how to use it, as shown
    in the following screenshot. This is very helpful when learning about different
    methods and how they are used:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口还有一些其他有用的功能，如**智能感知**和**重构**。智能感知在编写代码时建议其他选项或组件的更多细节，包括代码完成、有关代码的信息、代码的使用和代码要求。例如，如果您正在编写`Console`，它将建议您可能想要编写的不同选项，并告诉您该特定代码的作用以及如何使用它，如下面的屏幕截图所示。在学习不同方法及其用法时，这非常有帮助：
- en: '![](img/8c158fc2-814e-419c-8260-a649408ab38e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c158fc2-814e-419c-8260-a649408ab38e.png)'
- en: Different console methods
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的控制台方法
- en: Refactoring means improving the code without changing its functionality. Later
    in this chapter, we will talk about refactoring in detail.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重构意味着改进代码而不改变其功能。本章后面，我们将详细讨论重构。
- en: Another very interesting feature available in the Editor window is Quick Action,
    which is the light bulb on the left-hand side of the selected line of code. This
    recommends things that Visual Studio thinks you should change about that particular
    line of code. You can also use this for refactoring your code. For example, if we
    stop in the middle of writing `Console` and look at the bulb, it will show you
    a red cross at the bottom of the bulb, which means that this line of code is not
    valid and Visual Studio has some recommendations. Let's see what it recommends
    and whether we can use it to fix our code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口中另一个非常有趣的功能是快速操作，它是所选代码行左侧的灯泡。它建议Visual Studio认为您应该更改有关该特定代码行的内容。您还可以使用此功能重构代码。例如，如果我们在编写`Console`的过程中停下来看看灯泡，它将在灯泡底部显示一个红色叉，这意味着这行代码无效，Visual
    Studio有一些建议。让我们看看它推荐了什么，以及我们是否可以使用它来修复我们的代码。
- en: 'If we click on the bulb, it will show the options that you can see in the following
    screenshot. From there, Change ''Conso'' to ''Console'' is the option that we
    want to execute. If we click it, Visual Studio will fix the code for you:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击气泡，它将显示您在以下屏幕截图中可以看到的选项。从那里，将“Conso”更改为“Console”是我们要执行的选项。如果我们点击它，Visual
    Studio将为您修复代码：
- en: '![](img/d62855e5-8bc6-4d96-a1ba-a61fe8156509.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d62855e5-8bc6-4d96-a1ba-a61fe8156509.png)'
- en: 'Let''s see how we can refactor our code with Quick Action. If we try to create
    an object of a class that doesn''t exist in the code base, it will show you a
    bulb with a red cross. If you take a look at the options, you will see that Visual
    Studio is asking whether it should create a class for you, as shown in the following
    screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用快速操作重构我们的代码。如果我们尝试创建一个在代码库中不存在的类的对象，它会显示一个带有红色叉的气泡。如果您查看选项，您会看到Visual
    Studio正在询问是否应该为您创建一个类，如下面的屏幕截图所示：
- en: '![](img/283980d1-e39b-41ed-9e7a-5e432825cc8a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/283980d1-e39b-41ed-9e7a-5e432825cc8a.png)'
- en: There are many other features available in the Editor windows to make your life
    more productive as a developer. I would suggest that you try more of these and
    read further documentation to learn more.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口中还有许多其他功能可使您作为开发人员的生活更加高效。我建议您尝试更多这些功能，并阅读更多文档以了解更多。
- en: Solution Explorer
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案资源管理器
- en: If you take a look at the right-hand side of Visual Studio, you will see a window
    named Solution Explorer. This is a very important window in Visual Studio; it
    displays the files and folders in the solution you are working on. In Visual Studio,
    we have solutions that are like wrappers of different projects. This term could
    be a little confusing, as we would normally use the word *project* to identify
    a particular piece of work. In Visual Studio, solutions are created as wrappers
    and projects are created inside solutions. A solution can have multiple projects
    in it. This breakdown helps to make modular applications. In this Solution Explorer window,
    you can see which projects are in the solution and which files are in the projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看一下Visual Studio右侧，您将看到一个名为Solution Explorer的窗口。这是Visual Studio中非常重要的窗口；它显示了您正在工作的解决方案中的文件和文件夹。在Visual
    Studio中，解决方案就像是不同项目的包装器。这个术语可能有点令人困惑，因为我们通常会使用“项目”这个词来标识特定的工作。在Visual Studio中，解决方案被创建为包装器，项目被创建在解决方案中。一个解决方案中可以有多个项目。这种分解有助于创建模块化应用程序。在这个Solution
    Explorer窗口中，您可以看到解决方案中有哪些项目，项目中有哪些文件。
- en: 'You can expand or minimize the projects and folders to get a better view, as
    shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以展开或最小化项目和文件夹以获得更好的视图，如下面的屏幕截图所示：
- en: '![](img/24dcd239-c11b-4fd1-8d12-77ee6818bf64.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24dcd239-c11b-4fd1-8d12-77ee6818bf64.png)'
- en: In the preceding screenshot, you can see that we have a solution called ExploreVS,
    and inside that, we have a project called ExploreVS. The project and the solution
    names are the same here because, when we created the solution, we chose to use
    the same name. If you want, you can have different names for the solution and
    the project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，您可以看到我们有一个名为ExploreVS的解决方案，里面有一个名为ExploreVS的项目。这里项目和解决方案的名称相同，因为在创建解决方案时，我们选择使用相同的名称。如果需要，您可以为解决方案和项目使用不同的名称。
- en: In the Solution Explorer window, you can right-click on the solution and add
    another project easily. If you want to add a file or folder to the project, you
    can right-click on it and add it. In the following screenshot, you can see that
    we have added another project called TestApp to the solution, as well as a class
    called Person in the ExploreVS project. You can also see the number of projects
    that the solutions contain next to the solution name. There is also a search option
    in the Solution Explorer to search files easily in big solutions, in addition
    to some other features hiding behind the icons at the top. The circular arrow
    refreshes the Solution Explorer. Next to that, the stacked boxes collapse the
    projects to get a high-level view of the solution. After that, the icon with the
    three documents shows all the documents in the Solution Explorer. This is necessary
    because not every file is always available for viewing, as Visual Studio gives
    us the option to exclude files from the solution. This doesn't delete the file
    from the filesystem, but just ignores it in the solution. Then, next to that icon,
    we have a view code icon, which will open the code in the code editor. We also
    have the Properties icon, which will show the properties of a file or project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solution Explorer窗口中，您可以右键单击解决方案并轻松添加另一个项目。如果要将文件或文件夹添加到项目中，可以右键单击并添加。在下面的屏幕截图中，您可以看到我们已经将另一个名为TestApp的项目添加到解决方案中，以及在ExploreVS项目中添加了一个名为Person的类。您还可以看到解决方案名称旁边包含的项目数量。Solution
    Explorer中还有一个搜索选项，可以在大型解决方案中轻松搜索文件，以及一些其他功能隐藏在顶部的图标后面。圆形箭头刷新Solution Explorer。其旁边的堆叠框折叠项目以获得解决方案的高级视图。之后，具有三个文档的图标显示Solution
    Explorer中的所有文档。这是必要的，因为并非每个文件都始终可供查看，Visual Studio给我们提供了将文件从解决方案中排除的选项。这不会从文件系统中删除文件，而只是在解决方案中忽略它。然后，在该图标旁边，我们有一个查看代码的图标，它将在代码编辑器中打开代码。我们还有一个属性图标，它将显示文件或项目的属性。
- en: 'On the left, we have the Home icon, which will bring you to the home panel.
    Next to that, we have the Solutions and Folders switcher. If you click that, instead
    of seeing the solution, you will see the folder of the filesystem, as shown in
    the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有主页图标，它将带您到主页面板。旁边是解决方案和文件夹切换器。如果单击它，您将看到文件系统的文件夹，而不是解决方案，如下面的屏幕截图所示：
- en: '![](img/78586a30-1204-4649-ac5d-e8b55aecf29f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78586a30-1204-4649-ac5d-e8b55aecf29f.png)'
- en: Output window
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出窗口
- en: 'The Output window is a very important window for a developer, as all the logs
    and outputs of your build and debugging can be viewed here. If you build your
    application and it fails, you can use the Output window to figure out what went
    wrong and fix the issue. If your build runs successfully, you will get a message
    that the build was successful in the Output window, as shown in the following
    screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出窗口对于开发人员来说是非常重要的窗口，因为所有构建和调试的日志和输出都可以在这里查看。如果构建应用程序失败，您可以使用输出窗口找出问题所在并解决问题。如果构建成功运行，您将在输出窗口中收到构建成功的消息，如下面的屏幕截图所示：
- en: '![](img/253dec8c-d80e-4788-a7a2-3ba946d64784.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/253dec8c-d80e-4788-a7a2-3ba946d64784.png)'
- en: You can view the different types of logs, such as your version control logs, in
    this window. To change the options, go to the drop-down menu next to the Show
    output from text and view the log of a particular output. You can clear the logs
    by clicking on the icon that has horizontal lines and a red cross and toggle the
    word-wrapping function using the next icon.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以在此窗口中查看不同类型的日志，例如版本控制日志。要更改选项，请转到“显示输出来源”旁边的下拉菜单，并查看特定输出的日志。您可以通过单击具有水平线和红色叉的图标来清除日志，并使用下一个图标切换换行功能。 '
- en: Debugging windows
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试窗口
- en: 'Debugging is a very important part of software development. When you write
    some code, there is a very high chance that your code won''t build the first time.
    Even if it does build, you may not get the expected results. This is where debugging
    comes in handy. If you are using a text editor, it can be quite hard to debug
    some code, because normal text editors don''t give you any debugging facilities,
    and so you might have to use a console. Visual Studio, however, provides some
    excellent tools and features for debugging, which can make you much more productive.
    To find these, go to the Debug menu from the Visual Studio menu bar and click
    on Windows, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是软件开发的非常重要的部分。当您编写一些代码时，很有可能您的代码不会第一次构建。即使它构建了，您可能也得不到预期的结果。这就是调试派上用场的地方。如果您使用文本编辑器，调试一些代码可能会很困难，因为普通的文本编辑器不提供任何调试工具，因此您可能需要使用控制台。然而，Visual
    Studio为调试提供了一些出色的工具和功能，这可以让您的工作效率大大提高。要找到这些工具，请从Visual Studio菜单栏中转到“调试”菜单，然后单击“窗口”，如下面的屏幕截图所示：
- en: '![](img/dc13ed4e-43a9-4e82-adf6-685b9b6f9a09.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc13ed4e-43a9-4e82-adf6-685b9b6f9a09.png)'
- en: 'From this list, we can see that the different windows are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从此列表中，我们可以看到不同的窗口如下：
- en: Breakpoints
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断点
- en: Exception Settings
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常设置
- en: Output
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出
- en: Show Diagnostic Tools
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示诊断工具
- en: Immediate
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即
- en: Python Debug Interactive
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python调试交互
- en: Breakpoints window
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断点窗口
- en: 'The Breakpoints window lists the breakpoints that you have placed in your code
    base. It shows you information about the labels, conditions, filters, filenames,
    function names, and a few other properties in your code base, as shown in the
    following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 断点窗口列出了您在代码库中放置的断点。它显示有关标签、条件、过滤器、文件名、函数名和代码库中的其他属性的信息，如下面的屏幕截图所示：
- en: '![](img/4c7c2741-8b3e-40a3-85b6-9ef2f79fc0b2.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c7c2741-8b3e-40a3-85b6-9ef2f79fc0b2.png)'
- en: 'If you are not aware of the labels, conditions, and actions of a breakpoint,
    let''s briefly look at them in the following list:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不了解断点的标签、条件和操作，让我们简要地看一下它们的列表：
- en: 'Labels: You can name a breakpoint or give a label to a breakpoint to easily identify its
    purpose. You can right-click on a breakpoint and choose Edit Labels to add a label
    or choose from a previous label, as shown in the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签：您可以为断点命名或给断点添加标签，以便轻松识别其目的。您可以右键单击断点，然后选择“编辑标签”以添加标签或从以前的标签中选择，如下面的屏幕截图所示：
- en: '![](img/22cb45ce-fabd-410f-8339-18ac61100562.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22cb45ce-fabd-410f-8339-18ac61100562.png)'
- en: 'Conditions: You can set the conditions on a breakpoint. This means that the
    breakpoint will only stop if those conditions are true. To add a condition to
    a breakpoint, right-click on the breakpoint and then click Conditions, as shown
    in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件：您可以在断点上设置条件。这意味着只有在这些条件为真时，断点才会停止。要向断点添加条件，请右键单击断点，然后单击“条件”，如下面的屏幕截图所示：
- en: '![](img/dbd6d9f3-8c03-4975-9f4d-5e5f667630cd.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbd6d9f3-8c03-4975-9f4d-5e5f667630cd.png)'
- en: Actions: Like conditions, you can add actions to a breakpoint. An example of
    an action could be to write in a logging system or console.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作：与条件一样，您可以向断点添加操作。操作的一个示例可能是在日志系统或控制台中写入。
- en: There are some other functionalities that the Breakpoints window has. You can
    delete all the breakpoints of the solution, disable or enable breakpoints, import
    or export breakpoints, go to the code location of a breakpoint, or search for
    a breakpoint.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 断点窗口还具有一些其他功能。您可以删除解决方案的所有断点，禁用或启用断点，导入或导出断点，转到断点的代码位置，或搜索断点。
- en: Exception Settings
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常设置
- en: 'The Exception Settings window displays the different exceptions that are available.
    If you open the window, you will see a list of exceptions and a checkbox next
    to each item. You can check a checkbox if you want the debugger to break that
    exception in Visual Studio, as shown in the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 异常设置窗口显示可用的不同异常。如果打开窗口，您将看到异常列表和每个项目旁边的复选框。如果要在Visual Studio中使调试器中断该异常，请选中复选框，如下面的代码所示：
- en: '![](img/8277ec5e-fada-45cb-b03c-ab91ed53d129.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8277ec5e-fada-45cb-b03c-ab91ed53d129.png)'
- en: Output
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: 'We have already discussed the Output window in the previous section. You can
    output different values in the Output window to check whether they are correct.
    You can read information about the exceptions in the Output window to find out
    more about the exceptions, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前一节讨论了输出窗口。您可以在输出窗口中输出不同的值，以检查它们是否正确。您可以在输出窗口中读取有关异常的信息，以了解更多关于异常的信息，如下面的屏幕截图所示：
- en: '![](img/e565d9c7-d4e6-4a52-b145-b40b22f5d4bb.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e565d9c7-d4e6-4a52-b145-b40b22f5d4bb.png)'
- en: Diagnostic Tools
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 诊断工具
- en: 'The Diagnostic Tools window will show you the performance of your application.
    You can check how much memory and CPU it is using, along with some other performance-related
    figures, as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 诊断工具窗口将显示应用程序的性能。您可以检查它使用了多少内存和CPU，以及其他一些与性能相关的数字，如下面的屏幕截图所示：
- en: '![](img/5efa7440-f6e9-4d0b-89c2-00f578681136.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5efa7440-f6e9-4d0b-89c2-00f578681136.png)'
- en: Immediate window
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 立即窗口
- en: 'The Immediate window helps you to debug the values of a variable, methods,
    and other code phrases while running the application. You can manually check the
    values of different variables at a certain point of a running program. You can
    check what a method is returning by executing it in this window. In the following
    screenshot, you can see that we have set a value `1` to an `int` variable called `x`.
    Then, we execute a method called `Add(x,5)`, which returns the sum of the two
    numbers. Here, we pass `x` and `5` as parameters and get `6` in return:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 立即窗口可帮助您在运行应用程序时调试变量、方法和其他代码短语的值。您可以手动检查运行程序的某一点上不同变量的值。您可以通过在此窗口中执行方法来检查方法的返回值。在下面的屏幕截图中，您可以看到我们将值`1`设置为名为`x`的`int`变量。然后，我们执行一个名为`Add(x,5)`的方法，该方法返回两个数字的和。在这里，我们将`x`和`5`作为参数传递，并得到`6`作为返回值：
- en: '![](img/effbdc86-7652-41ed-8747-d3337657d0bf.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/effbdc86-7652-41ed-8747-d3337657d0bf.png)'
- en: Python debugger window
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python调试器窗口
- en: Using the Python debugger window, you can run Python scripts on the application
    you are working on in Visual Studio. As this book has nothing to do with the Python
    programming language, we won't discuss this window in any more detail.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Python调试器窗口，您可以在Visual Studio中运行您正在工作的应用程序上的Python脚本。由于本书与Python编程语言无关，我们不会详细讨论此窗口。
- en: Breakpoints, Call Stack Trace, and Watch
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断点、调用堆栈跟踪和监视
- en: In the previous section, we looked at the windows that are used for debugging
    in Visual Studio. We'll now look at some cool features—breakpoints, Call Stack
    Trace, and Watch—in detail.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看了在Visual Studio中用于调试的窗口。现在我们将详细看一些很酷的功能——断点、调用堆栈跟踪和监视。
- en: Breakpoint
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断点
- en: A **breakpoint** is not a feature of the C# programming language—it's a feature
    of the debugger that comes with Visual Studio. A breakpoint is a spot or place
    in your code where you want to pause the debugger to examine the code. In Visual
    Studio, breakpoints can be found in the left-hand pane of the code editor window.
    To add a breakpoint, click on the appropriate line of code and a red ball will
    appear, which represents the breakpoint. You can also use the *F9* key (or function
    9 key) as a keyboard shortcut to toggle breakpoints.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**断点**不是C#编程语言的功能，而是Visual Studio自带的调试器的功能。断点是您想要暂停调试器以检查代码的代码中的一个位置。在Visual
    Studio中，断点可以在代码编辑器窗口的左侧窗格中找到。要添加断点，请单击适当的代码行，将出现一个代表断点的红色球。您还可以使用*F9*键（或功能9键）作为切换断点的键盘快捷键。'
- en: 'The following screenshot shows what a breakpoint looks like in Visual Studio:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了Visual Studio中断点的外观：
- en: '![](img/393a9fca-e239-448b-98c2-e3b53d05b0df.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/393a9fca-e239-448b-98c2-e3b53d05b0df.png)'
- en: 'After you place a breakpoint, the debugger will pause at that position and
    give you options to look around the data. When the debugger is paused at the breakpoint,
    you can choose to Step Into, Step Over, or Step Out to navigate the code, as indicated
    by the arrows in the top bar. In the circle, you will see an arrow indicating
    where the debugger is now pointing, as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在您设置断点之后，调试器将在该位置暂停，并为您提供查看数据的选项。当调试器在断点处暂停时，您可以选择Step Into、Step Over或Step Out来浏览代码，如顶部栏中的箭头所示。在圆圈中，您将看到一个箭头指示调试器当前指向的位置，如下面的屏幕截图所示：
- en: '![](img/bd343ee9-3ac2-4a96-b837-312cb2cb99a7.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd343ee9-3ac2-4a96-b837-312cb2cb99a7.png)'
- en: The main purpose of breakpoints is to check the data and see how a particular
    piece of code reacts when it is run. Visual Studio provides a very easy way to
    debug code using breakpoints.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 断点的主要目的是检查数据，并查看特定代码在运行时的反应。Visual Studio提供了一种非常简单的方法来使用断点调试代码。
- en: Call Stack Trace
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用堆栈跟踪
- en: Call Stack is a window that is very useful when debugging your application.
    It shows you the flow of your application and tells you which methods have been
    called to reach a certain point. For example, if you have a method that can be
    called by two different sources, then, by looking at the call stack, you can easily
    identify which source called the method and get a better idea of the program flow.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 调用堆栈是调试应用程序时非常有用的窗口。它显示应用程序的流程，并告诉您已调用哪些方法以达到某一点。例如，如果您有一个可以由两个不同来源调用的方法，那么通过查看调用堆栈，您可以轻松地确定哪个来源调用了该方法，并更好地了解程序流程。
- en: Watch window
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视窗口
- en: The Watch window is another very useful feature for debugging in Visual Studio.
    In your code base, you might face a situation where you need to check the value
    of a particular variable. Hovering over to check the value every time is time-consuming.
    Instead, you can add those variables to your watch list and keep the Watch window
    open in Visual Studio to see the values of those variables at that moment.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 监视窗口是Visual Studio中调试的另一个非常有用的功能。在您的代码库中，您可能会遇到需要检查特定变量值的情况。每次悬停查看值都很耗时。相反，您可以将这些变量添加到监视列表中，并在Visual
    Studio中保持监视窗口打开，以查看这些变量在那一刻的值。
- en: 'In the following screenshot, you can see how the Watch window is used to watch
    the variable values:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以看到监视窗口是如何用来监视变量值的：
- en: '![](img/b599bad8-7b1f-4baa-af0f-388bb74d1cfe.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b599bad8-7b1f-4baa-af0f-388bb74d1cfe.png)'
- en: Git in Visual Studio
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio中的Git
- en: Version control is now an essential part of software development. It doesn't
    matter how big or small a project is, version control is a must for every software
    application. There are many version control systems available, but Git is the
    most popular. For the remote repository, you can use Microsoft Team Foundation
    Server, Microsoft Azure, GitHub, or any other remote repository. As GitHub is
    also the most popular remote repository, we will take a look at how to integrate
    it with Visual Studio in this section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制现在是软件开发的必要部分。无论项目大小如何，版本控制对每个软件应用程序都是必不可少的。有许多版本控制系统可用，但Git是最流行的。对于远程存储库，您可以使用Microsoft
    Team Foundation Server、Microsoft Azure、GitHub或任何其他远程存储库。由于GitHub也是最受欢迎的远程存储库，我们将在本节中看一下如何将其与Visual
    Studio集成。
- en: 'Currently, by default, Visual Studio doesn''t have the functionality to connect
    with GitHub, and so you have to use an extension. To get the extension, go to
    Tools | Extensions and Updates. Then, in the Online category, search for GitHub.
    You will see an extension called Github Extension for Visual Studio, as shown
    in the following screenshot. Install the extension and restart Visual Studio:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，默认情况下，Visual Studio没有与GitHub连接的功能，因此您必须使用扩展。要获取扩展，转到工具|扩展和更新。然后，在在线类别中搜索GitHub。您将看到一个名为Github
    Extension for Visual Studio的扩展，如下面的屏幕截图所示。安装扩展并重新启动Visual Studio：
- en: '![](img/73ced821-35da-402d-9b90-8449e7be13c3.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73ced821-35da-402d-9b90-8449e7be13c3.png)'
- en: 'Now, if you open the Team Explorer window, you can see a section for GitHub.
    Enter your GitHub credentials and connect, as shown in the following screenshot.
    After the connection is confirmed, you will be all set to communicate with GitHub
    through Visual Studio:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你打开Team Explorer窗口，你可以看到GitHub的一个部分。输入你的GitHub凭据并连接，如下截图所示。连接确认后，你就可以通过Visual
    Studio与GitHub进行通信了：
- en: '![](img/e3fa6855-10aa-4fb3-9921-be0c44b3b242.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3fa6855-10aa-4fb3-9921-be0c44b3b242.png)'
- en: You can create or clone repositories from Visual Studio and keep committing
    your code and pushing it to the remote repository in GitHub. You can also carry
    out all major Git tasks in Visual Studio. You can create branches, push and pull
    code, and send pull requests.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从Visual Studio创建或克隆存储库，并继续提交代码并将其推送到GitHub的远程存储库。你还可以在Visual Studio中执行所有主要的Git任务。你可以创建分支，推送和拉取代码，并发送拉取请求。
- en: 'The following screenshot shows the Git panel in the Visual Studio Team Explorer
    window:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了Visual Studio Team Explorer窗口中的Git面板：
- en: '![](img/9c55d594-504c-41d6-847a-682e0c3ed057.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c55d594-504c-41d6-847a-682e0c3ed057.png)'
- en: It's really useful to be able to use your IDE to handle version control without
    having to use any external software. You don't need to use the CLI for your version
    control either.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用IDE处理版本控制而无需使用任何外部软件非常有用。你也不需要使用CLI进行版本控制。
- en: Refactoring and code-optimization techniques
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构和代码优化技术
- en: If you're not aware of the concept of refactoring, I recommend that you carry
    out some further research; it is a very interesting topic, and crucial for quality
    software development. Basically, refactoring refers to the process of modifying
    existing code for the sake of code improvement without changing its functionality.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不了解重构的概念，我建议你进行进一步的研究；这是一个非常有趣的话题，对于软件开发的质量至关重要。基本上，重构是指修改现有代码以改进代码而不改变其功能的过程。
- en: Visual Studio provides some excellent features and tools for refactoring. We'll
    take a look at a few of these in the following sections.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio提供了一些出色的重构功能和工具。我们将在接下来的部分中看一些这些功能。
- en: Rename
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名
- en: 'You can change the name of a method, field, property, class, or anything else
    by using the Rename feature of Visual Studio, as shown in the following screenshot.
    To do this, highlight the entity and press *Ctrl + R* twice. Alternatively, go
    to Edit | Refactor | Rename. When you change the name this way, it will be updated
    wherever it is used. This simple refactoring step allows you to change the name
    of something anytime you like:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Visual Studio的重命名功能来更改方法、字段、属性、类或其他任何内容的名称，如下截图所示。要做到这一点，选中实体，然后按两次*Ctrl
    + R*。或者，转到编辑|重构|重命名。通过这种方式更改名称后，它将在使用的任何地方更新。这个简单的重构步骤允许你随时更改名称：
- en: '![](img/07a47997-91f1-4024-8902-fd67981215cd.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07a47997-91f1-4024-8902-fd67981215cd.png)'
- en: Changing the method signature
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改方法签名
- en: Imagine that you have a method that is used in many places in your solution.
    Now, if you change the parameters of that method, your code will break until you
    fix the method everywhere it is used. Doing this manually is time-consuming, and
    is likely to generate errors. Visual Studio provides a refactoring feature that
    can be used to refactor a method signature wherever it is used in the code, as
    shown in the following screenshot.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个在解决方案中多处使用的方法。现在，如果你更改该方法的参数，你的代码将在你修复每处使用该方法之前都会出错。手动操作这样做很耗时，而且很可能会产生错误。Visual
    Studio提供了一个重构功能，可以用来在代码中使用的地方重构方法签名，如下截图所示。
- en: 'If you want to change the parameter sequence in a method, you can use *Ctrl
    + R* and *Ctrl + O* or click Edit | Refactor | Reorder Parameter from the menu.
    To remove a parameter from the method, you can use *Ctrl + R* and *Ctrl + V* or
    click Edit | Refactor | Remove Parameters:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改方法中的参数顺序，你可以使用*Ctrl + R*和*Ctrl + O*，或者点击编辑|重构|重新排序参数。要从方法中删除参数，你可以使用*Ctrl
    + R*和*Ctrl + V*，或者点击编辑|重构|删除参数：
- en: '![](img/ff97c12e-9cea-4bae-8abe-4ea81c4492aa.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff97c12e-9cea-4bae-8abe-4ea81c4492aa.png)'
- en: It is always recommend that you use Visual Studio refactoring tools rather than
    refactoring manually.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 建议始终使用Visual Studio重构工具，而不是手动重构。
- en: Encapsulate Field
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 封装字段
- en: You can use the Visual Studio refactoring tool to convert a field to a property,
    instead of doing it manually. Highlight the field and press *Ctrl + R* and *Ctrl
    + E*, or go to Edit | Refactor | Encapsulate Field.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Visual Studio重构工具将字段转换为属性，而不是手动操作。选中字段，然后按*Ctrl + R*和*Ctrl + E*，或者转到编辑|重构|封装字段。
- en: 'This will change all the places in the code in which the variable has been
    used, as shown in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更改代码中使用变量的所有位置，如下截图所示：
- en: '![](img/0bd343d1-a5f0-4f0f-bd02-9264bf9eb64e.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0bd343d1-a5f0-4f0f-bd02-9264bf9eb64e.png)'
- en: Extract Method
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取方法
- en: 'If you see a piece of code and you think it should be in a method, you can
    use Extract Method refactoring to extract the selected code and create a new method
    for it, as shown in the following screenshot. The refactoring tool is so smart
    that it can also identify whether the method should return a particular value
    or not. To do this, select the code you want to extract to a method, then press
    *Ctrl + R* and *Ctrl + M*, or go to Edit | Refactor | Extract Method:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一段代码，认为它应该在一个方法中，你可以使用提取方法重构来提取选定的代码，并为其创建一个新的方法，如下截图所示。重构工具非常智能，它还可以确定方法是否应该返回特定的值。要做到这一点，选择要提取到方法中的代码，然后按下*Ctrl
    + R*和*Ctrl + M*，或者转到编辑|重构|提取方法：
- en: '![](img/41d2dce3-771a-41d1-82cf-e39cf35c7071.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41d2dce3-771a-41d1-82cf-e39cf35c7071.png)'
- en: There are many other refactoring features available in Visual Studio. It isn't
    possible to cover them all here; I recommend that you look at the Visual Studio
    documentation for more information.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中还有许多其他重构功能。这里不可能覆盖所有内容；我建议你查看Visual Studio文档以获取更多信息。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Visual Studio is an essential tool for a C# developer; understanding it properly
    will increase your productivity. In this chapter, we discussed various concepts
    related to Visual Studio, including its project and templates, its different editors
    and windows, and its debugging facilities. We also looked at breakpoints, Call
    Stack Trace, and the Watch window, and how to use these to optimize your debugging
    process. After that, we explored Git and GitHub integration with Visual Studio.
    Finally, we talked about the different refactoring features that are available
    in Visual Studio. It's very hard to cover all of the concepts that are related
    to such an extraordinary IDE in one chapter of a book; I would recommend that
    you play with it and explore it further in order to learn how to use it in the
    best way possible. In the next chapter, we will talk about databases and ADO.NET.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是C#开发人员的必备工具；正确理解它将提高您的生产力。在本章中，我们讨论了与Visual Studio相关的各种概念，包括其项目和模板，不同的编辑器和窗口，以及其调试功能。我们还研究了断点、调用堆栈跟踪和监视窗口，以及如何利用这些来优化调试过程。之后，我们探讨了Git和GitHub与Visual
    Studio的集成。最后，我们谈到了Visual Studio中可用的不同重构功能。在一本书的一章中很难涵盖与这样一个非凡的集成开发环境相关的所有概念；我建议您尝试使用它并进一步探索，以便学会如何以最佳方式使用它。在下一章中，我们将讨论数据库和ADO.NET。
