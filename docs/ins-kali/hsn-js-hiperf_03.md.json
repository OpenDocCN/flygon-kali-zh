["```js\nvar fun = function() {\n    for(var i = 0; i < 10; i++) {\n        state['this'] += 'what';\n    }\n    console.log('i', i);\n}\nfun();\n```", "```js\nvar x = 'a';\nswitch(x) {\n    case 'a':\n        y = 'z';\n        break;\n    case 'b':\n        y = 'y';\n        break;\n    default:\n        y = 'b';\n}\nconsole.log(y);\n```", "```js\nlet x = 10;\nlet fun2 = function() {\n    {\n        let x = 20;\n        console.log('inner scope', x);\n    }\n    console.log('outer scope', x);\n    x += 10;\n}\nfun2();\nconsole.log('this should be 20', x);\n```", "```js\nconst create = function() {\n    this.x = 10;\n    console.log('this', this);\n    const innerFun = function() {\n        console.log('inner this', this);\n    }\n    const innerArrowFun = () => {\n        console.log('inner arrow this', this);\n    }\n    innerFun();\n    innerArrowFun();\n}\nconst item = new create();\n```", "```js\nconst set = function(...items) {\n   this._arr = [...items];\n   this.add = function(item) {\n       if( this._arr.includes(item) ) return false;\n       this._arr.push(item);\n       return true;\n   }\n   this.has = function(item) {\n       return this._arr.includes(item);\n   }\n   this.values = function() {\n       return this._arr;\n   }\n   this.clear = function() {\n       this._arr = [];\n   }\n}\n```", "```js\nconst data = new Array(10000000);\nfor(let i = 0; i < data.length; i++) {\n    data[i] = i;\n}\nconst setData = new Set();\nfor(let i = 0; i < data.length; i++) {\n    setData.add(i);\n}\ndata.includes(5000000);\nsetData.has(5000000);\n```", "```js\nconst map = new Map();\nfor(let i = 0; i < 10000; i++) {\n    map.set(`${i}item`, i);\n}\nmap.forEach((val, key) => console.log(val));\nmap.size();\nmap.has('0item');\nmap.clear();\n```", "```js\nconst items = new WeakMap();\nconst container = document.getElementById('content');\nfor(let i = 0; i < 50000; i++) {\n    const el = document.createElement('li');\n    el.textContent = `we are element ${i}`;\n    el.onclick = function(ev) {\n        console.log(items.get(el));\n    }\n    items.set(el, i);\n    container.appendChild(el);\n}\nconst removeHalf = function() {\n    const amount = Math.floor(container.children.length / 2);\n    for(let i = 0; i < amount; i++) {\n        container.removeChild(container.firstChild); \n    }\n}\n```", "```js\nconst a = {item1 : b};\nconst b = {item1 : a};\n```", "```js\nconst state = {};\n(function(scope) {\n    const _state = {},\n          _held = new WeakSet(),\n          checkPrimitives = function(item) {\n              return item === null || typeof item === 'string' || typeof \n               item === 'number' || typeof item === 'boolean' ||\n               typeof item === 'undefined';\n          },\n          cloneFunction = function(fun, scope=null) {\n              return fun.bind(scope);\n          },\n          cloneObject = function(obj) {\n              const newObj = {},\n              const keys = Object.keys(obj);\n              for(let i = 0; i < keys.length; i++) {\n                  const key = keys[i];\n                  const item = obj[key];\n                  newObj[key] = runUpdate(item);\n              }\n              return newObj;\n          },\n          cloneArray = function(arr) {\n              const newArr = new Array(arr.length);\n              for(let i = 0; i < arr.length; i++) {\n                  newArr[i] = runUpdate(arr[i]);\n              }\n              return newArr;\n          },\n          runUpdate = function(item) {\n              if( checkPrimitives(item) ) {\n                  return item;\n              }\n              if( typeof item === 'function' ) {\n                  return cloneFunction(item);\n              }\n              if(!_held.has(item) ) {\n                  _held.add(item);\n                  if( item instanceof Array ) {\n                      return cloneArray(item);\n                  } else {\n                      return cloneObject(item);\n                  }\n              }\n          };\n    scope.update = function(obj) {\n        const x = Object.keys(obj);\n        for(let i = 0; i < x.length; i++) {\n            _state[x[i]] = runUpdate(obj[x[i]]);\n        }\n        _held = new WeakSet();\n    }\n})(state);\nObject.freeze(state);\n```", "```js\nconst item = new Proxy({}, {\n    get: function(obj, prop) {\n        console.log('getting the following property', prop);\n        return Reflect.has(obj, prop) ? obj[prop] : null;\n    },\n    set: function(obj, prop, value) {\n        console.log('trying to set the following prop with the following \n         value', prop, value);\n        if( typeof value === 'string' ) {\n            obj[prop] = value;\n        } else {\n            throw new Error('Value type is not a string!');\n        }\n    }\n});\nitem.one = 'what';\nitem.two = 'is';\nconsole.log(item.one);\nconsole.log(item.three);\nitem.three = 12;\n```", "```js\nconst isPrimitive = function(item) {\n    return typeof item === 'string' || typeof item === 'number' || typeof \n     item === 'boolean';\n}\nconst item2 = Proxy.revocable({}, {\n    get: function(obj, prop) {\n        return Reflect.has(obj, prop) ? obj[prop] : null\n    },\n    set: function(obj, prop, value) {\n        if( isPrimitive(value) ) {\n            obj[prop] = value;\n        } else {\n            throw new Error('Value type is not a primitive!');\n        }\n    }\n});\nconst item2Proxy = item2.proxy;\nitem2Proxy.one = 'this';\nitem2Proxy.two = 12;\nitem2Proxy.three = true;\nitem2.revoke();\n(function(obj) {\n    console.log(obj.one);\n})(item2Proxy);\n```", "```js\nMath.max.apply(null, [1, 2, 3]);\nReflect.apply(Math.max, null, [1, 2, 3]);\nitem3 = {};\nif( Reflect.set(item3, 'yep', 12) {\n    console.log('value was set correctly!');\n} else {\n    console.log('value was not set!');\n}\nReflect.defineProperty(item3, 'readonly', {value : 42});\nif( Reflect.set(item3, 'readonly', 'nope') ) {\n    console.log('we set the value');\n} else {\n    console.log('value should not be set!');\n}\n```", "```js\n// working with a variable amount of arguments\nconst oldVarArgs = function() {\n    console.log('old variable amount of arguments', arguments);\n}\nconst varArgs = function(...args) {\n    console.log('variable amount of arguments', args);\n}\n// transform HTML list into a basic array so we have access to array\n// operations\nconst domArr = [...document.getElementsByTagName('li')];\n// clone array\nconst oldArr = [1, 2, 3, 4, 5];\nconst clonedArr = [...oldArr];\n// clone object\nconst oldObj = {item1 : 'that', item2 : 'this'};\nconst cloneObj = {...oldObj};\n```", "```js\n//object\nconst desObj = {item1 : 'what', item2 : 'is', item3 : 'this'};\nconst {item1, item2} = desObj;\nconsole.log(item1, item2);\n\n//array\nconst arr = [1, 2, 3, 4, 5];\nconst [a, ,b, ...c] = arr;\nconsole.log(a, b, c);\n```", "```js\nconst defParams = function(arg1, arg2=null, arg3=10) {\n    if(!arg2 ) {\n        console.log('nothing was passed in or we passed in a falsy value');\n    }\n    const pow = arg3;\n    if( typeof arg1 === 'number' ) {\n        return arg1 ** pow;\n    } else {\n        throw new TypeError('argument 1 was not a number!');\n    }\n}\n```", "```js\nconst literal = `This is a string literal. It can hold multiple lines and\nvariables by denoting them with curly braces and prepended with the dollar \nsign like so \\$\\{\\}.\nhere is a value from before ${a}. We can also pass an arbitrary expression \nthat evaluates ${a === 1 ? b : c}.\n`\nconsole.log(literal);\n```", "```js\nconst arrBuf = new ArrayBuffer(16);\nconst uint8 = new Uint8Array(arrBuf);\nuint8[0] = 255;\n```", "```js\nconst bigInt = 100n;\nconsole.log('adding two big ints', 100n + 250n);\nconsole.log('add a big int and a regular number', 100n + BigInt(250));\n```", "```js\nconst amount = 1478.99;\nconsole.log(new Intl.NumberFormat('en-UK', {style : 'currency', currency : 'EUR'}).format(amount));\nconsole.log(new Intl.NumberFormat('de-DE', {style : 'currency', currency : 'EUR'}).format(amount));\nconst date = new Date(0);\nconsole.log(new Intl.DateTimeFormat('en-UK').format(date));\nconsole.log(new Intl.DateTimeFormat('de-DE').format(date));\n```", "```js\nconst Item = funciton() {\n    this.a = 1;\n    this.b = 'this';\n    this.c = function() {\n        console.log('this is going to be a new function each time');\n    }\n}\nItem.prototype.d = function() {\n    console.log('this is on the prototype so it will only be here \n     once');\n}\nconst item1 = new Item();\nconst item2 = new Item();\n\nitem1.c === item2.c; //false\nitem1.d === item2.d; //true\n\nconst item3 = new (Object.getPrototypeOf(item1)).constructor();\nitem3.d === item2.d ;//true\nObject.getPrototypeOf(item1).constructor === Item; //true\n```", "```js\nclass newItem {\n    constructor() {\n        this.c = function() {\n            console.log('this is going to be a new function each time!);\n        }\n    }\n    a = '1';\n    b = 'this';\n    d() {\n        console.log('this is on the prototype so it will only be here \n         once');\n    }\n}\nconst newItem1 = new newItem();\nconst newItem2 = new newItem();\n\nnewItem1.c === newItem2.c //false\nnewItem1.d === newItem2.d //true\n\nnewItem === Object.getPrototypeOf(newItem1).constructor; //true\n```", "```js\nclass newItem {\n    static e() {\n        console.log(this);\n    }\n    static f = 10;\n}\n\nnewItem1.e() //TypeError\nnewItem.e() //give us the class\nnewItem.f //10\n```", "```js\nItem.e = function() {\n    console.log(this);\n}\nItem.f = 10;\n```", "```js\nget g() {\n    return this._g;\n}\nset g(val) {\n    if( typeof val !== 'string' ) {\n        return;\n    }\n    this._g = val;\n}\n```", "```js\nconst Public = (function() {\n    let priv = 0;\n    const Private = function() {}\n    Private.prototype.add1 = function() {\n        priv += 1;\n    }\n    Private.prototype.getVal = function() {\n        return priv;\n    }\n    return Private;\n})();\n```", "```js\nclass Public {\n    #h = 10;\n    get h() {\n        return this.#h;\n    }\n}\n```", "```js\nclass extendedNewItem extends newItem {\n    constructor() {\n        super();\n        console.log(this.c());\n    }\n    get super_h() {\n        return super.h;\n    }\n    static e() {\n        super.e();\n        console.log('this came from our extended class');\n    }\n}\nconst extended = new extendedNewItem();\n```", "```js\nexport default function() {\n    console.log('this is going to be our simple lib');\n}\n```", "```js\n<script type=\"module'>\n    import lib from './lib.js';\n</script>\n```", "```js\nconst exports = {\n    this : 'that',\n    that : 'this'\n}\n\nexport { exports as Item };\n```", "```js\nimport { Item } from './lib.js';\n```", "```js\nimport { Item as _item } from './lib.js';\n```", "```js\ndocument.querySelector('#loader').addEventListener('click', (ev) => {\n    if(!('./lib2.js' in imported)) {\n        import('./lib2.js')\n        .then((module) => {\n            imported['./lib2.js'] = module;\n            module.default();\n        });\n    } else {\n        imported['./lib2.js'].default();\n    }\n});\n```", "```js\n<p>This is a paragraph element</p>\n<ul id=\"main\">\n    <li class=\"hidden\">1</li>\n    <li class=\"hidden\">2</li>\n    <li>3</li>\n    <li class=\"hidden\">4</li>\n    <li>5</li>\n</ul>\n<script type=\"module\">\n    const main = document.getElementById('main');\n    const hidden = document.getElementsByClassName('hidden');\n</script>\n```", "```js\nconst main = document.querySelector('#main');\nconst hidden = document.querySelectorAll('.hidden');\n```", "```js\nconst allTextInput = Array.from(document.getElementsByTagName('input'))\n    .filter(item => item.getAttribute('type') === \"text\");\n```", "```js\nconst alsoTextInput = doucment.querySelectorAll('input[type=\"text\"]');\n```", "```js\nconst hidden = document.querySelector('#main').querySelectorAll('.hidden');\n```", "```js\nconst num = 10000;\nconst container = document.querySelector('#add');\nfor(let i = 0; i < num; i++) {\n    const temp = document.createElement('li');\n    temp.textContent = `item ${i}`;\n    container.appendChild(temp);\n}\nwhile(container.firstChild) {\n    container.removeChild(container.firstChild);\n}\nconst fragment = document.createDocumentFragment();\nfor(let i = 0; i < num; i++) {\n    const temp = document.createElement('li');\n    temp.textContent = `item ${i}`;\n    fragment.appendChild(temp);\n}\ncontainer.appendChild(fragment);\n```", "```js\nconst shadow = document.querySelector('#shadowHolder').attachShadow({mode : 'open'});\nconst style = document.createElement('style');\nstyle.textContent = `<left out to shorten code snippet>`;\nconst frag = document.createDocumentFragment();\nconst header = document.createElement('h1');\nconst par = document.createElement('p');\nheader.textContent = 'this is a header';\npar.textContent = 'Here is some text inside of a paragraph element. It is going to get the styles we outlined above';\n\nfrag.appendChild(header);\nfrag.appendChild(par);\nshadow.appendChild(style);\nshadow.appendChild(frag);\n```", "```js\nclass Tooltip extends HTMLElement {\n    constructor() {\n        super();\n        this.text = this.getAttribute('text');\n        this.type = this.getAttribute('type');\n        this.typeMap = new Map(Object.entries({\n            'success' : \"&#x2714\",\n            'error' : \"&#x2716\",\n            'info' : \"&#x2755\",\n            'default' : \"&#x2709\"\n        }));\n\n        this.shadow = this.attachShadow({mode : 'open'});\n        const container = document.createElement('span');\n        container.classList.add('wrapper');\n        container.classList.add('hidden');\n        const type = document.createElement('span');\n        type.id = 'icon';\n        const el = document.createElement('span');\n        el.id = 'main';\n        const style = document.createElement('style');\n        el.textContent = this.text;\n        type.innerHTML = this.getType(this.type);\n\n        style.innerText = `<left out>`\n        this.shadow.append(style);\n        this.shadow.append(container);\n        container.append(type);\n        contianer.append(el);\n    }\n    update() {\n        const x = this.getAttribute('x');\n        const y = this.getAttribute('y');\n        const type = this.getAttribute('type');\n        const text = this.getAttribute('text');\n        const show = this.getAttribute('show');\n        const wrapper = this.shadow.querySelector('.wrapper');\n        if( show === \"true\" ) {\n            wrapper.classList.remove('hidden');\n        } else {\n            wrapper.classList.add('hidden');\n        }\n        this.shadow.querySelector('#icon').innerHTML = this.getType(type);\n        this.shadow.querySelector('#main').innerText = text;\n        wrapper.style.left = `${x}px`;\n        wrapper.style.top = `${y}px`;\n    }\n    getType(type) {\n        return type ?\n            this.typeMap.has(type) ?\n                this.typeMap.get(type) :\n                this.typeMap.get('default') :\n            this.typeMap.get('default');\n    }\n    connectCallback() {\n        this.update(this);\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.update(this);\n    }\n    static get observedAttributes() {\n        return ['x', 'y', 'type', 'text', 'show'];\n    }\n}\n\ncustomElements.define('our-tooltip', Tooltip);\n```", "```js\n<our-tooltip show=\"true\" x=\"100\" y=\"100\" icon=\"success\" text=\"here is our tooltip\"></our-tooltip>\n```", "```js\n<template id=\"tooltip\">\n    <style>\n        /* left out */\n    </style>\n    <span class=\"wrapper hidden\" x=\"0\" y=\"0\" type=\"default\" show=\"false\">\n        <span id=\"icon\">&#2709</span>\n        <span id=\"main\">This is some default text</span>\n    </span>\n</template>\n```", "```js\nconstructor() {\n    super();\n    this.type = this.getAttribute('type');\n    this.typeMap = // same as before\n    const template = document.querySelector('#tooltip').content;\n    this.shadow = this.attachShadow({mode : 'open'});\n    this.shadow.appendChild(template.cloneNode(true));\n}\n```", "```js\n<span class=\"wrapper hidden\" x=\"0\" y=\"0\" type=\"default\" show=\"false\">\n    <span id=\"icon\">&#2709</span>\n    <span id=\"main\"><slot name=\"main_text\">This is default text</slot></span>\n</span>\n```", "```js\n<our-tooltip show=\"true\" x=\"100\" y=\"100\" type=\"success\">\n    <span slot=\"main_text\">That was a successful operation!</span>\n</our-tooltip>\n```", "```js\nconst oldReq = new XMLHttpRequest();\noldReq.addEventListener('load', function(ev) {\n    document.querySelector('#content').innerHTML = \n     JSON.stringify(ev.target.response);\n});\noldReq.open('GET', 'http://localhost:8081/sample');\noldReq.setRequestHeader('Accept', 'application/json');\noldReq.responseType = 'json';\noldReq.send();\n```", "```js\nfetch('http://localhost:8081/sample')\n.then((res) => res.json())\n.then((res) => {\n    document.querySelector('#content').innerHTML = JSON.stringify(res);\n});\n```", "```js\nconst makeRequest = function(loc, success, failure) {\n    const oldReq = new XMLHttpRequest();\n    oldReq.addEventListener('load', function(ev) {\n        if( ev.target.status === 200 ) {\n            success(ev.target.response);\n        } else {\n            failure(ev.target.response);\n        }\n    }, { once : true });\n    oldReq.open('GET', loc);\n    oldReq.setRequestHeader('Accept', 'application/json');\n    oldReq.responseType = 'json';\n    oldReq.send();\n}\n```", "```js\nconst fakeFetchRequest(url, (res) => {\n    res.json((final) => {\n        document.querySelector('#content').innerHTML = \n         JSON.stringify(final);\n    });\n});\n```", "```js\n(async function() {\n    const res = await fetch('http://localhost:8081/sample');\n    const final = await res.json();\n    document.querySelector('#content').innerHTML = JSON.stringify(final);\n})();\n```", "```js\nclass Rot13Transform {\n    constructor() {\n    }\n    async transform(chunk, controller) {\n        const _chunk = await chunk;\n        const _newChunk = _chunk.map((item) => ((item - 65 + 13) % 26) + \n         65);\n        controller.enqueue(_newChunk);\n        return;\n    }\n}\n\nfetch('http://localhost:8081/rot')\n.then(response => response.body)\n.then(res => res.pipeThrough(new TransformStream(new Rot13Transform())))\n.then(res => new Response(res))\n.then(response => response.text())\n.then(final => document.querySelector('#content').innerHTML = final)\n.catch(err => console.error(err));\n```", "```js\n(async function() {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    document.querySelector('#stop').addEventListener('click', (ev) => {\n        controller.abort();\n    });\n    try {\n        const res = await fetch('http://localhost:8081/longload', \n         {signal});\n        const final = await res.text();\n        document.querySelector('#content').innerHTML = final;\n    } catch(e) {\n        console.error('failed to download', e);\n    }\n})();\n```"]