["```cs\n        public class DotNet \n        { \n          public string  AvailableDatatype { get; set; } \n        }\n\n```", "```cs\n        class Program \n        { \n          // Static action event \n          static event Action<string> types; \n\n          static void Main(string[] args) \n          { \n\n          } \n        }\n\n```", "```cs\n        List<DotNet> lstTypes = new List<DotNet>(); \n        DotNet blnTypes = new DotNet(); \n        blnTypes.AvailableDatatype = \"bool\"; \n        lstTypes.Add(blnTypes); \n\n        DotNet strTypes = new DotNet(); \n        strTypes.AvailableDatatype = \"string\"; \n        lstTypes.Add(strTypes); \n\n        DotNet intTypes = new DotNet(); \n        intTypes.AvailableDatatype = \"int\"; \n        lstTypes.Add(intTypes); \n\n        DotNet decTypes = new DotNet(); \n        decTypes.AvailableDatatype = \"decimal\"; \n        lstTypes.Add(decTypes);\n\n```", "```cs\n        types += x => \n        { \n          Console.WriteLine(x); \n        }; \n\n        for (int i = 0; i <= lstTypes.Count - 1; i++) \n        { \n          types(lstTypes[i].AvailableDatatype); \n        } \n\n        Console.ReadLine();\n\n```", "```cs\n        class Program \n        { \n          // Static action event \n          static event Action<string> types; \n\n          static void Main(string[] args) \n          { \n            List<DotNet> lstTypes = new List<DotNet>(); \n            DotNet blnTypes = new DotNet(); \n            blnTypes.AvailableDatatype = \"bool\"; \n            lstTypes.Add(blnTypes); \n\n            DotNet strTypes = new DotNet(); \n            strTypes.AvailableDatatype = \"string\"; \n            lstTypes.Add(strTypes); \n\n            DotNet intTypes = new DotNet(); \n            intTypes.AvailableDatatype = \"int\"; \n            lstTypes.Add(intTypes); \n\n          DotNet decTypes = new DotNet(); \n            decTypes.AvailableDatatype = \"decimal\"; \n            lstTypes.Add(decTypes); \n\n            types += x => \n            { \n              Console.WriteLine(x); \n            }; \n\n            for (int i = 0; i <= lstTypes.Count - 1; i++) \n            { \n              types(lstTypes[i].AvailableDatatype); \n            } \n\n            Console.ReadLine(); \n          } \n        }\n\n```", "```cs\n        class Program \n        { \n\n            static Subject<string> obsTypes = new Subject<string>(); \n\n         static void Main(string[] args) \n          { \n\n          } \n        }\n\n```", "```cs\n        // IObservable \n        obsTypes.Subscribe(x => \n        { \n          Console.WriteLine(x); \n        }); \n\n        // IObserver \n        for (int i = 0; i <= lstTypes.Count - 1; i++) \n        { \n          obsTypes.OnNext(lstTypes[i].AvailableDatatype); \n        } \n\n        Console.ReadLine();\n\n```", "```cs\n        class Program \n        {      \n          static Subject<string> obsTypes = new Subject<string>(); \n\n          static void Main(string[] args) \n          { \n            List<DotNet> lstTypes = new List<DotNet>(); \n            DotNet blnTypes = new DotNet(); \n            blnTypes.AvailableDatatype = \"bool\"; \n            lstTypes.Add(blnTypes); \n\n            DotNet strTypes = new DotNet(); \n            strTypes.AvailableDatatype = \"string\"; \n            lstTypes.Add(strTypes); \n\n            DotNet intTypes = new DotNet(); \n            intTypes.AvailableDatatype = \"int\"; \n            lstTypes.Add(intTypes); \n\n            DotNet decTypes = new DotNet(); \n            decTypes.AvailableDatatype = \"decimal\"; \n            lstTypes.Add(decTypes); \n\n            // IObservable \n            obsTypes.Subscribe(x => \n            { \n              Console.WriteLine(x); \n            }); \n\n            // IObserver \n            for (int i = 0; i <= lstTypes.Count - 1; i++) \n            { \n              obsTypes.OnNext(lstTypes[i].AvailableDatatype); \n            } \n\n            Console.ReadLine(); \n          } \n        }\n\n```", "```cs\n        private void Form1_Load(object sender, EventArgs e) \n        { \n          var searchTerm = Observable.FromEventPattern<EventArgs>(\n            textBox1, \"TextChanged\").Select(x => ((TextBox)x.Sender).Text); \n\n          searchTerm.Subscribe(trm => label1.Text = trm); \n        }\n\n```", "```cs\n        private void Form1_Load(object sender, EventArgs e) \n        { \n          var searchTerm = Observable.FromEventPattern<EventArgs>(\n            textBox1, \"TextChanged\").Select(x => ((TextBox)x.Sender)\n            .Text).Where(text => text.EndsWith(\".\")); \n\n          searchTerm.Subscribe(trm => label1.Text = trm); \n        }\n\n```", "```cs\n        private void Form1_Load(object sender, EventArgs e) \n        { \n          var searchTerm = Observable.FromEventPattern<EventArgs>(\n            textBox1, \"TextChanged\").Select(x => ((TextBox)x.Sender)\n            .Text).Throttle(TimeSpan.FromMilliseconds(5000)); \n\n          searchTerm.Subscribe(trm => label1.Text = trm); \n        }\n\n```", "```cs\n      PM> Install-Package System.Reactive.Windows.Forms\n\n```", "```cs\n        searchTerm.ObserveOn(new ControlScheduler(this)).Subscribe(trm => label1.Text = trm);\n\n```", "```cs\n        public class LambdaExample\n        {\n          public string FavThings { get; set; }\n        }\n\n```", "```cs\n        List<LambdaExample> MyFavoriteThings = new List<LambdaExample>();\n        LambdaExample thing1 = new LambdaExample();\n        thing1.FavThings = \"Ice-cream\";\n        MyFavoriteThings.Add(thing1);\n\n        LambdaExample thing2 = new LambdaExample();\n        thing2.FavThings = \"Summer Rain\";\n        MyFavoriteThings.Add(thing2);\n\n        LambdaExample thing3 = new LambdaExample();\n        thing3.FavThings = \"Sunday morning snooze\";\n        MyFavoriteThings.Add(thing3);\n\n```", "```cs\n        var filteredStuff = MyFavoriteThings.Where(feature =>         feature.FavThings.StartsWith(\"Sum\"));\n\n```"]