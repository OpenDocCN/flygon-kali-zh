- en: Leverage TDD by Implementing Continuous Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过实施持续交付来利用TDD
- en: '"Nothing speaks like results. If you want to build the kind of credibility
    that connects with people, then deliver results before you deliver a message.
    Get out and do what you advise others to do. Communicate from experience."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “没有什么比结果更有说服力。如果你想建立与人们联系的可信度，那么在传达信息之前先交付结果。走出去做你建议别人做的事情。从经验中交流。”
- en: – John C. Maxwell
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 约翰·C·麦克斯韦'
- en: Throughout this book, concepts and good practices have been presented with isolated
    examples. The goal of this chapter is to put into practice some of these concepts
    by applying them to a more realistic scenario.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，概念和良好的实践已经通过孤立的例子进行了介绍。本章的目标是将这些概念中的一些付诸实践，通过将它们应用于更现实的场景。
- en: To accomplish that, we are introducing a fictitious company called Awesome Gambling
    Corp. This company is struggling with a few problems in its software development
    life cycle that could be easily solved by applying some of the things we have
    learned in this book. As a disclaimer, any similarity with a real company is pure
    coincidence. Furthermore, for the sake of brevity, the codebase is not very extensive
    and some of the problems have been exaggerated in order to better represent the
    issue that needs to be addressed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们引入了一个名为“牛逼赌博公司”的虚构公司。这家公司在软件开发生命周期中遇到了一些问题，这些问题可以通过应用我们在本书中学到的一些方法来轻松解决。免责声明，与真实公司的任何相似之处纯属巧合。此外，为了简洁起见，代码库并不是很庞大，一些问题已经夸大，以更好地代表需要解决的问题。
- en: 'The topics covered not necessarily in order, are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及的主题不一定按顺序包括：
- en: Continuous integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Benefits of test-driven development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发的好处
- en: Identifying quick wins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别快速成功
- en: Case study – Awesome Gambling Corp
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究-牛逼赌博公司
- en: You are Alice, a software developer, and you just joined the software development
    team of Awesome Gambling Corp. Your teammates are trying to bring you up to speed
    in the shortest time possible. It's your first day and your teammate, John, who
    has been designated as your mentor, is going to be guiding you during the first
    few hours in the company.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你是爱丽丝，一名软件开发人员，刚刚加入了“牛逼赌博公司”的软件开发团队。你的队友们正在尽可能短的时间内让你跟上进度。这是你的第一天，你的队友约翰被指定为你的导师，在公司的最初几个小时里将指导你。
- en: After a pleasant cup of coffee, he rapidly sets the topic of your conversation
    to all the tasks and procedures that will comprise your day-to-day work. Your
    team is developing and maintaining a very simple `thimblerig-service`. As soon
    as you hear the word *thimblerig*, you ashamedly admit this is the first time
    you have heard that word. John laughs and says he didn't know it either when he
    joined the company two years ago.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在愉快的一杯咖啡之后，他迅速将你的谈话话题转向了组成你日常工作的所有任务和程序。你的团队正在开发和维护一个非常简单的“thimblerig-service”。一听到“thimblerig”这个词，你羞愧地承认这是你第一次听到这个词。约翰笑着说，两年前加入公司时他也不知道这个词。
- en: The Thimblerig game, also known as **three shells and a pea**, is an ancient
    gambling game. The rules are pretty simple, there are three shells, and the pea
    is covered by one of the three. The three shells are shuffled at really high speed
    and, when finished, the player has to guess which shell hides the pea.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Thimblerig游戏，也被称为“三个壳和一个豌豆”，是一种古老的赌博游戏。规则非常简单，有三个壳，豌豆被其中一个盖住。这三个壳以非常高的速度洗牌，完成后，玩家必须猜出哪个壳藏着豌豆。
- en: After the explanation, he kindly offers to help you downloading the code project
    from the repository and briefly explains to you the overall concepts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 解释完毕后，他友好地提议帮助你从存储库下载代码项目，并简要向你解释了整体概念。
- en: Once he is done with the explanation, he asks you to read the code on your own.
    He also tells you he is the person for you to go to in case you have any questions
    or concerns. You express your gratitude for his time and start browsing the project.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他解释完毕，他要求你自己阅读代码。他还告诉你，如果你有任何问题或疑虑，他就是你要去找的人。你对他的时间表示感谢，开始浏览项目。
- en: Exploring the codebase
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索代码库
- en: As you start browsing the project, you realise that the application is not very
    complex. In fact, the project contains roughly a dozen Java classes and, as you
    start opening and looking at the files, you notice that none of them is longer
    than one hundred lines. That is pretty good, the codebase is small so you will
    be able to develop new features in no time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始浏览项目时，你意识到这个应用并不是很复杂。事实上，项目包含大约十几个Java类，当你开始打开并查看文件时，你会注意到没有一个文件超过一百行。这很不错，代码库很小，所以你将能够在很短的时间内开发新功能。
- en: 'Provided that this is a Gradle project, you quickly open the `build.gradle`
    file to acknowledge the frameworks and libraries being used within the project:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这是一个Gradle项目，你迅速打开“build.gradle”文件，以了解项目中使用的框架和库：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Gradle build field looks good. The project you are going to work on is a
    Spring-based web service. It uses `spring-boot-starter-web`, so it's very likely
    you will be able to run it locally without hassle. Moreover, there are some test
    dependencies which means there should be some tests in the test folder as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle构建字段看起来不错。你要工作的项目是基于Spring的Web服务。它使用“spring-boot-starter-web”，所以很可能你可以在本地轻松运行它。此外，还有一些测试依赖项，这意味着测试文件夹中应该也有一些测试。
- en: 'A couple of minutes later you already have a mental map of the application.
    There is a class called `ThimblerigService` which handles the logic of the game.
    It has a dependency on a `RandomNumberGenerator` and it only has one public method,
    which is `placeBet`. Methods and classes have an understandable name, so it isn''t
    hard to figure out what they do:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你已经在脑海中有了应用的地图。有一个名为“ThimblerigService”的类，它处理游戏的逻辑。它依赖于“RandomNumberGenerator”，并且只有一个公共方法，即“placeBet”。方法和类都有一个可理解的名称，所以很容易弄清楚它们的作用：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Besides that class, there is only one controller class that implements an API:
    it is `ThimblerigAPI`. It exposes only one method, which is `placeBet`. Other
    company services invoke that `POST` method in order to play one game in this service.
    The service resolves the bet and includes in the response details such as whether
    there''s a prize won, the amount, and so forth:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了那个类，只有一个控制器类实现了一个API：它是`ThimblerigAPI`。它只公开了一个方法，即`placeBet`。其他公司服务调用该`POST`方法以在该服务中玩一场游戏。该服务解决赌注并在响应中包括诸如是否赢得奖品、金额等详细信息：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is a fairly easy setup and everything is crystal-clear, so you decide to
    move on and start looking at the tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的设置，一切都很清晰，所以你决定继续并开始查看测试。
- en: 'As you open the `test` folder and start looking for tests, you are very surprised
    when you discover there is only one test class: `ThimblerigServiceTest`. One single
    good test is worth more than hundred bad ones but still, you think this application
    is poorly unit-tested:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开`test`文件夹并开始寻找测试时，当你发现只有一个测试类`ThimblerigServiceTest`时，你感到非常惊讶。一个好的测试胜过一百个坏的，但你仍然认为这个应用程序的单元测试做得很差：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After opening the class and going over all the tests it contains, your impression
    changes slightly for the good. The tests cover the core service completely and
    they seem meaningful and exhaustive. But despite that, you can't avoid turning
    your head to John and asking him why there's only one test. He tells you they
    didn't have much time to create tests because they were in a hurry, so only the
    critical parts have tests. Whether a piece of code is critical or not is very
    subjective, but you understand the situation; in fact, you have been in that situations
    many times.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开类并检查其中包含的所有测试后，你的印象略微好转。这些测试完全覆盖了核心服务，并且它们似乎是有意义且详尽的。但尽管如此，你还是忍不住转过头去问约翰为什么只有一个测试。他告诉你，他们没有太多时间来创建测试，因为他们很匆忙，所以只有关键部分有测试。一个代码片段是否关键是非常主观的，但你理解这种情况；事实上，你也曾多次处于这种情况。
- en: 'Only one second later, before you have time to go back to your task, John adds
    another interesting point to his answer: the **quality assurance** (**QA**) department.
    The aim of this department is to test all release candidates before they reach
    a production environment. Their mission is to find errors and bugs that might
    affect the application and report them. In some cases, if any of the errors found
    are very critical, the release is stopped and it will never be deployed to production.
    This procedure usually takes from three to five days. You think that could be
    a bottleneck in some scenarios, so you ask him to give you further details of
    the release process.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅一秒后，在你还来不及回到自己的任务之前，约翰又在他的回答中加入了另一个有趣的观点：**质量保证**（**QA**）部门。该部门的目标是在发布候选版本到达生产环境之前对其进行测试。他们的任务是查找可能影响应用程序的错误和缺陷并报告它们。在某些情况下，如果发现的任何错误非常关键，发布将被停止，永远不会部署到生产环境。这个流程通常需要三到五天的时间。你认为在某些情况下这可能是一个瓶颈，所以你要求他进一步详细说明发布流程。
- en: Release procedure
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布流程
- en: Provided that the project is a simple **REpresentational State Transfer** (**REST**)
    service, the creation of a release is not complex at all. According to the current
    procedure, a developer compiles the code and sends the artifact to the team that
    manages all deployments. That team coordinates the testing and deployment to production
    with the customer and QA departments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只要项目是一个简单的**表现状态转移**（**REST**）服务，发布的创建就一点也不复杂。根据当前的流程，开发人员编译代码并将构件发送给负责所有部署的团队。该团队与客户和质量保证部门协调测试和部署到生产环境。
- en: You decide to ask John if he is happy with the process. Before you even get
    the answer, you know John is not happy at all with it. You can see on his face
    that he is making an effort to hide his feelings about it. John gulps back his
    emotions and starts describing the current situation of the team.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你决定问约翰是否满意这个流程。甚至在得到答案之前，你就知道约翰对此一点也不满意。你可以从他的脸上看出，他正在努力掩饰自己的感受。约翰咽下自己的情绪，开始描述团队的当前情况。
- en: It turns out that not everything is joy and candy in the development team. All
    developers,  when they start coding, create their own branch from the master branch
    in the repository. This is not bad at all, but it has happened that some branches
    have been merged back to the master many weeks later. The issue is that the master
    branch has changed a lot since then and the code base diverges a lot, meaning
    the merge is very difficult, unpleasant, and error prone.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，开发团队并非一切都是愉快和甜蜜的。所有开发人员在开始编码时都会从代码库的主分支创建自己的分支。这并不是坏事，但有时会出现一些分支在很多周后才合并回主分支。问题在于自那时以来主分支发生了很大变化，代码库分叉很多，这意味着合并非常困难、令人不愉快且容易出错。
- en: Besides the occasional merging problems, it has happened that one developer
    compiled his local branch by mistake and it was deployed to production, generating
    chaos, carnage, and uncertainty for a short period.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了偶尔出现的合并问题，有时会发生某个开发人员错误地编译了他的本地分支，并将其部署到生产环境，导致一段时间内的混乱、破坏和不确定性。
- en: On top of that, the customer is not very happy with the time new features take
    to be implemented. They are complaining about this from time to time, saying that
    every single tiny change takes at least a week to be applied.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，客户对于实现新功能所需的时间并不满意。他们不时地抱怨，说每一个微小的变化至少需要一周的时间才能应用。
- en: You are puzzled how this can happen to a very tiny REST service, but of course
    John was referring to other bigger projects in the company. You know this kind
    of problem can be solved, or at least mitigated, by implementing **continuous
    integration** (**CI**) and continuous delivery. In fact, automating processes
    as much as possible enables you to focus on other problems by getting rid of those
    that are trivial.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你对这种情况如何发生在一个非常微小的REST服务上感到困惑，但约翰当然是在指公司中的其他更大的项目。你知道通过实施持续集成（CI）和持续交付，这种问题可以得到解决或至少得到缓解。事实上，尽可能自动化流程可以让你摆脱那些琐碎的问题，从而专注于其他问题。
- en: After this small reflection, you now know you need more information about the
    deployment procedure and you also know that John is willing to give you the details.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这样的思考，你现在知道你需要更多关于部署程序的信息，你也知道约翰愿意给你详细信息。
- en: Deployments to production
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到生产环境
- en: 'With the release process covered, John starts explaining to you how the service
    is deployed to production. It is very manual work: one member of the **infrastructure
    team** (**IT**) department copies the artifact to the server and executes a few
    commands to get it running.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论发布流程后，约翰开始向你解释服务是如何部署到生产环境的。这是非常手动的工作：IT部门的基础设施团队的一名成员将构件复制到服务器并执行一些命令来使其运行。
- en: John also takes the opportunity to add some stories of errors that they suffered
    in the past, like the time when, instead of deploying the latest version, the
    infrastructure operator mistakenly redeployed an old version. A bunch of old bugs
    reappeared and stayed in production until somebody found out what had happened.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰还借此机会补充了一些他们过去遭受的错误故事，比如有一次，基础设施操作员错误地重新部署了旧版本，而不是部署最新版本。一堆旧的错误重新出现并一直停留在生产环境中，直到有人发现发生了什么。
- en: While listening to those stories, you can't help but start thinking about what
    you have learned from previous projects and companies. You know that putting code
    into a production environment could be a very easy and straightforward task, a
    never-ending nightmare, or something in the middle. It depends on many factors
    and sometimes it is not up to us to change it. In some scenarios, deploying an
    application to production needs to be acknowledged by people who have the power
    to decide when and what is deployed. In others, there is strict regulation that
    turns what should be an easy procedure into a tedious and verbose task.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在听这些故事的同时，你不禁开始思考你从以往项目和公司中学到的东西。你知道将代码部署到生产环境可能是一个非常简单直接的任务，一个永无止境的噩梦，或者介于两者之间。这取决于许多因素，有时我们无法改变它。在某些情况下，将应用程序部署到生产环境需要得到有权决定何时以及部署什么的人的承认。在其他情况下，严格的规定将本应简单的程序变成了一个冗长而啰嗦的任务。
- en: Furthermore, automating deployments is a way to reduce the risk factor that
    human interaction can add. Creating a repeatable process can be as easy as writing
    all the necessary steps in a script and scheduling its execution. It is well known
    that any single script can't replace a human completely, but, needless to say,
    the goal is not to replace humans with scripts. The main purpose of this is to
    provide a tool that can be executed autonomously and humans can supervise it,
    with manual intervention just in case it is necessary. For this, implementing
    continuous delivery is very suitable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，自动化部署是减少人为干预可能带来的风险的一种方式。创建可重复的流程可以像编写脚本并安排其执行一样简单。众所周知，任何单个脚本都无法完全取代人类，但毋庸置疑，目标并不是用脚本取代人类。这样做的主要目的是提供一个可以自主执行的工具，人类可以监督它，只有在必要时才进行手动干预。因此，实施持续交付非常合适。
- en: After John's brief but intense introduction, you feel that you are ready to
    start working on your own. You have many possible improvements in your head and
    you are definitely eager to implement them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在约翰简短但激烈的介绍之后，你觉得自己已经准备好开始工作了。你脑海中有许多可能的改进，你肯定渴望实施它们。
- en: Increasing test coverage
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增加测试覆盖率
- en: Among the metrics for measuring code quality, there is one that is especially
    difficult to understand, and that is test coverage. Test coverage is a dangerous
    metric because a really high coverage does not imply the code is well tested.
    As the name says, it only contemplates whether a piece of code has been triggered
    and hence executed by a test. For that reason, the goal of testing is basically
    a combination of good tests and good coverage. To summarize, it is the quality
    of tests that matters, the code coverage is secondary.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在衡量代码质量的指标中，有一个特别难以理解的指标，那就是测试覆盖率。测试覆盖率是一个危险的指标，因为非常高的覆盖率并不意味着代码经过了充分的测试。正如其名称所示，它只是考虑了一段代码是否被触发并因此被测试执行。因此，测试的目标基本上是良好的测试和良好的覆盖率的结合。总之，重要的是测试的质量，代码覆盖率是次要的。
- en: There are some scenarios though where code coverage is indeed a good indicator.
    These are when the code coverage is really low. In those, the number means a greater
    part of the codebase is not being tested and therefore tests are not ensuring
    we are not introducing errors.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下代码覆盖率确实是一个很好的指标。这些情况是当测试覆盖率非常低时。在这些情况下，这个数字意味着代码库的很大一部分没有被测试，因此测试并没有确保我们没有引入错误。
- en: Additionally, creating good automated tests can reduce the amount of time spent
    by the QA team on performing regression tests. This very likely reduces the time
    they spend testing the same code over and over again, increasing the team's delivery
    velocity.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，创建良好的自动化测试可以减少QA团队在执行回归测试上所花费的时间。这很可能会减少他们反复测试相同代码的时间，从而提高团队的交付速度。
- en: Conclusions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Even though the situation in this company has been exaggerated for didactic
    purposes, there are still companies struggling with these problems. Indeed, Alice
    knew that the way software developers at Awesome Gambling Corp work is not ideal.
    There are many techniques, some of them covered in this book, that could help
    the company stop focusing on unconscious mistakes and start focusing on other
    things that can add more value to their final product.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管为了教学目的而夸大了这家公司的情况，但仍然有一些公司在努力解决这些问题。事实上，爱丽丝知道令人敬畏的赌博公司的软件开发人员的工作方式并不理想。有许多技术，其中一些在本书中有所涵盖，可以帮助公司停止专注于无意识的错误，并开始专注于其他可以为最终产品增加更多价值的事情。
- en: In the next section, we are going to address some of the problems described
    by proposing one possible solution. This is not a unique solution; actually, the solution proposed
    includes some tools, and there are many options for each of the tools used. Moreover,
    every company has its own culture and restrictions, and because of that, the proposed
    solution might not be fully suitable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将通过提出一种可能的解决方案来解决爱丽丝故事中描述的一些问题。这不是唯一的解决方案；实际上，所提出的解决方案包括一些工具，每个工具都有许多选项。此外，每家公司都有自己的文化和限制，因此提出的解决方案可能并不完全适用。
- en: Possible improvements
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可能的改进
- en: In this section and the following subsections, we are going to tackle some of
    the problems described in Alice's story. Because the code we inherited from the
    example is already implemented, we can't apply TDD here. Instead, we are going
    to set the basis and prepare the ground for future developments where applying
    TDD will become very useful.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节和接下来的子节中，我们将解决爱丽丝故事中描述的一些问题。由于我们从示例中继承的代码已经实施，因此我们无法在这里应用TDD。相反，我们将奠定基础并为将来的开发做好准备，在那里应用TDD将非常有用。
- en: Although there are always many things that can be improved, the pain points
    being addressed are code merging issues, lots of manual testing, manual releases,
    and the length of time taken to develop changes or new features.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管总是有许多可以改进的地方，但正在解决的痛点是代码合并问题、大量手动测试、手动发布以及开发更改或新功能所花费的时间。
- en: For the first two, we are going to increase the test coverage of the application
    and implement CI. A Jenkins server is going to be configured to address the third
    issue, manual releases. And finally, the last issue, which is the long **time
    to market** (**TTM**), is going to be mitigated by implementing the rest of the
    solutions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前两个问题，我们将增加应用程序的测试覆盖率并实施CI。将配置Jenkins服务器来解决第三个问题，即手动发布。最后，通过实施其余的解决方案来缓解长时间的**上市时间**（**TTM**）。
- en: Implementing continuous integration
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施持续集成
- en: In large companies with multiple teams working in parallel, it is very common
    to end up having tons of integration conflicts. This occurs more frequently when
    the codebase is under heavy development.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型公司中，有多个团队并行工作，很常见出现大量集成冲突。当代码库在大规模开发时，这种情况更频繁发生。
- en: In order to mitigate this, it is highly recommended to use CI. The main idea
    is that development branches should not diverge much from the master branch. One
    way to do it is splitting the changes or new features into really small chunks
    so they can be finished and merged back pretty fast. Another way is to merge regularly;
    this is more suitable when features are difficult to break down into small ones.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这一问题，强烈建议使用CI。主要思想是开发分支不应该与主分支相差太大。一种方法是将更改或新功能分成非常小的块，这样它们可以很快完成并合并回来。另一种方法是定期合并；当功能难以分解成小功能时，这更合适。
- en: When facing indivisible features, such as architectural changes, Feature Toggles
    are very helpful. With Feature Toggles, unfinished features can be merged and
    will not be accessible until the flag is turned on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 面对不可分割的功能，如架构更改，功能切换非常有帮助。使用功能切换，未完成的功能可以合并，并且在打开标志之前将无法访问。
- en: Towards continuous delivery
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 走向持续交付
- en: One of the problems developers were facing in the story is the manual creation
    of releases. There are many tools that help automate such tasks, such as Jenkins,
    Travis, or Bamboo, just to name a few. As part of the proposed solution, we are
    going to configure an instance of Jenkins to run all of these tasks automatically.
    On every execution of the Jenkins job, a new release of the `thimblerig-service`
    will be created.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 故事中开发人员面临的问题之一是手动创建发布。有许多工具可以帮助自动化这些任务，例如Jenkins、Travis或Bamboo，仅举几例。作为提出的解决方案的一部分，我们将配置一个Jenkins实例，以自动运行所有这些任务。在每次执行Jenkins作业时，将创建`thimblerig-service`的新版本。
- en: Moreover, since we already moved to CI, the status of the master branch should
    be always ready for production. And, in case some unfinished features have been
    merged, they are hidden thanks to Feature Toggles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于我们已经转移到CI，主分支的状态应始终准备好投入生产。而且，如果一些未完成的功能已经合并，由于功能切换，它们将被隐藏。
- en: At this point, to solve the problem of the releases, we could have implemented
    either continuous delivery or **continuous deployment** (**CD**), but for the
    sake of simplicity we are going to implement continuous delivery. Let's get into
    it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，为了解决发布的问题，我们可以实施持续交付或**持续部署**（**CD**），但为了简单起见，我们将实施持续交付。让我们开始吧。
- en: Jenkins installation
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins安装
- en: 'Jenkins is a very powerful tool and easy to learn. In this section, we are
    going to prepare the environment, which consists of a virtual machine running
    a Docker image of Jenkins. This setup is for demonstration purposes; for real
    scenarios, it will be better to install it in a dedicated server with more resources,
    or get it as a service from a company like CloudBees. In this particular case,
    all the configuration is located in the `Vagrantfile`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个非常强大且易于学习的工具。在这一部分，我们将准备环境，其中包括运行Jenkins Docker镜像的虚拟机。这个设置是为了演示目的；对于真实场景，最好安装在具有更多资源的专用服务器上，或者从CloudBees等公司获得服务。在这种情况下，所有配置都位于`Vagrantfile`中：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'So, to get it up and running, we just need to execute the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要使其运行起来，我们只需要执行以下命令：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If, after a restart or whatever the reason might be, Jenkins appears offline
    or you can''t reach it, try running the same command with provision flag:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在重新启动或其他原因后，Jenkins显示为离线或无法访问它，尝试使用provision标志运行相同的命令：
- en: '**`$> vagrant up --provision`**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**`$> vagrant up --provision`**'
- en: 'Once finished, we can open `http://localhost:9090` in our favorite browser
    to continue the setup:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以在我们喜欢的浏览器中打开`http://localhost:9090`来继续设置：
- en: '![](img/a8247d8e-7789-417c-809b-4756225fd22b.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8247d8e-7789-417c-809b-4756225fd22b.png)'
- en: 'Since we are not installing it in the server but running it in a Docker image,
    this password is a bit tricky to get. Probably the easiest way is to access the
    Docker machine and get the password from the file, and that could be done like
    this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有在服务器上安装它，而是在Docker镜像中运行它，这个密码有点难以获取。可能最简单的方法是访问Docker机器并从文件中获取密码，可以这样做：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Copy the password, paste in the password field, and we move to the next step,
    which is configuring plugins. For now, we are going to install the recommended
    ones only. Other plugins can be installed later on in the administration panel:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 复制密码，粘贴到密码字段中，然后我们进入下一步，配置插件。现在，我们只安装推荐的插件。其他插件可以稍后在管理面板中安装：
- en: '![](img/4625e47e-6b32-47c3-9248-f4ebcb2f8c72.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4625e47e-6b32-47c3-9248-f4ebcb2f8c72.png)'
- en: 'Then, when the setup has finished installing plugins, another screen is shown.
    This is the last step of the configuration, creating an admin user. It''s recommended
    to create a user with a password that is easy to remember:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当设置完成安装插件后，会显示另一个屏幕。这是配置的最后一步，创建一个管理员用户。建议创建一个密码容易记住的用户：
- en: '![](img/4813c0e2-3788-4b9c-b3c0-c0afd69eede4.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4813c0e2-3788-4b9c-b3c0-c0afd69eede4.png)'
- en: This step can be skipped, but then the admin password will remain the same as
    the initial password, which is really difficult to remember. Now we are ready
    to use our brand new Jenkins installation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步可以跳过，但是管理员密码将保持与初始密码相同，这样很难记住。现在我们已经准备好使用我们全新的Jenkins安装了。
- en: Automating builds
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化构建
- en: Once we have Jenkins up and running, it is time to start using it. We are going
    to create a task on Jenkins that will download the `thimblerig-service` master
    branch, execute the tests, build it, and archive the resultant artifact.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启动并运行了Jenkins，就是开始使用它的时候了。我们将在Jenkins上创建一个任务，下载`thimblerig-service`主分支，执行测试，构建它，并存档生成的构件。
- en: 'Let''s start by creating a Freestyle project:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个自由风格项目开始：
- en: '![](img/a96c0105-a5d6-4d7c-8bc3-2c7fcb48dda6.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a96c0105-a5d6-4d7c-8bc3-2c7fcb48dda6.png)'
- en: 'We have to tell Jenkins where the repository is located. In this example, we
    don''t need authentication, but is very likely we would need it in a real-world
    scenario:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须告诉Jenkins存储库的位置。在这个例子中，我们不需要认证，但在实际情况下，我们很可能需要认证：
- en: '![](img/e9381291-d946-4358-b59a-16a0c8819c62.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9381291-d946-4358-b59a-16a0c8819c62.png)'
- en: 'The `thimblerig-service` project is a Gradle project. We are going to use the
    Jenkins Gradle plugin for compiling, testing, and building our service:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`thimblerig-service`项目是一个Gradle项目。我们将使用Jenkins Gradle插件来编译、测试和构建我们的服务：'
- en: '![](img/7ed034a8-733d-4a2b-aa08-3f9910537fac.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ed034a8-733d-4a2b-aa08-3f9910537fac.png)'
- en: 'Finally, we have to specify the location of the test reports and the artifact
    built:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须指定测试报告和构建的构件位置：
- en: '![](img/38a7c9cf-6c7f-4a91-b3e3-929fcadf5194.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38a7c9cf-6c7f-4a91-b3e3-929fcadf5194.png)'
- en: And we are done. This is not very different when compared to what we usually
    do in our local environment. It downloads the code from the master branch and
    uses Gradle for building the service, as developers were doing, according to John
    in the story.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了。与我们在本地环境中通常做的事情并没有太大的不同。它从主分支下载代码，并使用Gradle构建服务，就像John在故事中所说的那样。
- en: First execution
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首次执行
- en: 'With our project created in Jenkins, now it is time to test it. We never configured
    a triggered execution, so Jenkins is not monitoring the changes in the repository.
    For this example, launching the builds manually is more than enough, but in a
    real scenario we would like it to be triggered automatically on every change in
    the master branch:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins中创建了我们的项目，现在是测试的时候了。我们从未配置过触发执行，所以Jenkins并没有监视存储库中的更改。在这个例子中，手动启动构建已经足够了，但在实际情况下，我们希望它在主分支中的每次更改时自动触发：
- en: '![](img/ca7d372b-66b3-47fb-a703-48ba7393aefc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca7d372b-66b3-47fb-a703-48ba7393aefc.png)'
- en: 'The build has finished successfully; we can see in the summary that tests were
    executed but none has failed. We are ready to download the artifact and try to
    execute it locally:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建已经成功完成；我们可以在摘要中看到测试已经执行，但没有一个失败。我们准备下载这个构件并尝试在本地执行它：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At some point, the logs will display a message like `Tomcat started on port(s):
    8080 (http)`. This means our that service is ready and we can start using it.
    To make sure, we can always check the health of the service by running:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '在某个时候，日志将显示类似`Tomcat started on port(s): 8080 (http)`的消息。这意味着我们的服务已经准备就绪，我们可以开始使用它。为了确保，我们可以随时通过运行来检查服务的健康状况：'
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This concludes the example of continuous delivery. Although this example is
    fully functional, Jenkins is not the best place to store releases of the service.
    For a real-world use case, there are much more powerful alternatives, such as
    Artifactory, or simply Dockerize the service and push new versions to a private
    Docker registry.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了持续交付的示例。虽然这个示例是完全可用的，但Jenkins并不是存储服务版本的最佳位置。对于实际应用场景，有更强大的替代方案，比如Artifactory，或者简单地将服务Docker化并推送新版本到私有Docker注册表。
- en: What is next?
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: The example here is purely academic, and parts of the solution are a bit hacky.
    In a real company, Jenkins would be installed in a dedicated server and would
    have many more tasks to build and release. To orchestrate all of this, proper
    management of generated artifacts is needed. As mentioned earlier, some of the
    solutions that companies are adopting are tools such as Artifactory or private
    instances of Docker Registry to store Docker images of the services. Whatever
    the storage of choice, the procedure will remain the same—compile, test, build,
    archive. It's just a matter of configuration.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的例子纯粹是学术性的，解决方案的部分有点巧妙。在一个真实的公司中，Jenkins将安装在专用服务器上，并且将有更多的任务来构建和发布。为了协调所有这些，需要对生成的构件进行适当的管理。正如前面提到的，一些公司采用的解决方案是像Artifactory或Docker
    Registry的私有实例来存储服务的Docker镜像。无论选择哪种存储方式，程序都将保持不变——编译，测试，构建，存档。这只是一个配置问题。
- en: 'For the sake of brevity, some parts that required new code have been omitted
    and are left for the reader to complete as an exercise. Here are some ideas of
    how to continue:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，一些需要新代码的部分已被省略，留给读者作为练习完成。以下是一些继续的想法：
- en: Create some tests for the REST controller.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为REST控制器创建一些测试。
- en: There is an issue in the random number generator—it is not random at all. Fork
    the `thimblerig-service` project, create a test to reproduce the issue, fix it,
    and release a new version of the service by using the recently-created build project
    on Jenkins.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机数生成器存在问题——根本不是随机的。分叉`thimblerig-service`项目，创建一个测试来重现问题，修复它，并通过最近创建的Jenkins构建项目发布服务的新版本。
- en: Use Docker.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker。
- en: 'All the code snippets and the rest of the project files required can be found
    online in the following repository: [https://bitbucket.org/alexgarcia/tdd-java-thimblerig-service](https://bitbucket.org/alexgarcia/tdd-java-thimblerig-service)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码片段和其他所需的项目文件都可以在以下存储库中在线找到：[https://bitbucket.org/alexgarcia/tdd-java-thimblerig-service](https://bitbucket.org/alexgarcia/tdd-java-thimblerig-service)
- en: This is just the beginning
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这只是个开始
- en: You might have expected that by the time you reached the end of this book, you'd
    know everything about test-driven development (TDD). If that was the case, we're
    sorry that we'll have to disappoint you. It takes a lot of time and practice to
    master any craft, and TDD is no exception. Go on, apply what you have learned
    to your projects. Share knowledge with your colleagues. Most importantly, practice,
    practice, and practice. As with karate, only through continuous practice and repetition
    can one fully master TDD. We have been using it for a long time, and we still
    often face new challenges and learn new ways to improve our craftsmanship.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你期望在读完本书时，你会对测试驱动开发（TDD）了如指掌。如果是这样，我们很抱歉要让你失望。要掌握任何技艺都需要大量的时间和实践，TDD也不例外。继续将你所学应用到项目中。与同事分享知识。最重要的是，练习，练习，再练习。就像空手道一样，只有通过持续的练习和重复，才能完全掌握TDD。我们已经使用它很长时间了，但我们仍然经常面临新的挑战，并学到改进我们技艺的新方法。
- en: This does not have to be the end
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这并不一定是结束
- en: Writing this book was a long journey filled with many adventures. We hope you
    enjoyed reading it as much as we enjoyed writing it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 写这本书是一个充满许多冒险的漫长旅程。我们希望你喜欢阅读它，就像我们喜欢写它一样。
- en: We share our experience on a wide variety of subjects at our blog, at [http://technologyconversations.com](http://technologyconversations.com).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在博客[http://technologyconversations.com](http://technologyconversations.com)上分享了我们在各种主题上的经验。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout Alice's fictitious story, some of the common problems which companies
    are facing nowadays were presented. One of them is the lack of time. In this particular
    case, and in the majority of cases, people lack time because they are trapped
    doing repetitive tasks that don't add value, thus there is this constant feeling
    that it's impossible to achieve more ambitious goals. One of the main excuses
    that developers give when asked why they are not practicing TDD is the lack of
    time for writing tests.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Alice的虚构故事中，介绍了一些当今公司面临的常见问题。其中之一是缺乏时间。在这种特殊情况下，以及在大多数情况下，人们缺乏时间是因为他们被困在不增加价值的重复任务中，因此会产生这种不断的感觉，即不可能实现更雄心勃勃的目标。开发人员在被问及为什么不练习TDD时，最主要的借口之一是没有时间写测试。
- en: This chapter tackles a possible solution for this, which is using Jenkins. A virtual
    machine with an instance of Jenkins was configured to automate some of the repetitive
    tasks that were draining time from the team.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一个可能的解决方案，即使用Jenkins。配置了一个带有Jenkins实例的虚拟机，以自动化一些重复的任务，这些任务正在耗费团队的时间。
- en: Once the problems have been addressed, TDD becomes really handy. Every new feature
    developed in the TDD way will be more than covered by tests, then future changes
    on that feature will be run against the test suite, and this will fail if one
    of the tests is not satisfied.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦问题得到解决，TDD就会变得非常方便。以TDD方式开发的每个新功能都将被测试覆盖，然后对该功能的未来更改将针对测试套件运行，如果其中一个测试未满足，则会失败。
