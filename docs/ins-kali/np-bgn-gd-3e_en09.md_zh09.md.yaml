- en: Chapter 9. Plotting with matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：Matplotlib 绘图
- en: '*`matplotlib` is a very useful Python plotting library. It integrates nicely
    with NumPy but is a separate open source project. You can find a gallery of beautiful
    examples at [http://matplotlib.org/gallery.html](http://matplotlib.org/gallery.html).*'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`是一个非常有用的 Python 绘图库。 它与 NumPy 很好地集成在一起，但是是一个单独的开源项目。 您可以在[`matplotlib.org/gallery.html`](http://matplotlib.org/gallery.html)上找到漂亮的示例。'
- en: '*`matplotlib` also has utility functions to download and manipulate data from
    Yahoo Finance. We will see several examples of stock charts.*'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`也具有工具函数，可以从雅虎金融下载和操纵数据。 我们将看到几个股票图表示例。'
- en: 'This chapter features extended coverage of the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Simple plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单图
- en: Subplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子图
- en: Histograms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直方图
- en: Plot customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图自定义
- en: Three-dimensional plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三维图
- en: Contour plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等高线图
- en: Animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画
- en: Logplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数图
- en: Simple plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单绘图
- en: The `matplotlib.pyplot` package contains functionality for simple plots. It
    is important to remember that each subsequent function call changes the state
    of the current plot. Eventually, we will want to either save the plot in a file
    or display it with the `show()` function. However, if we are in IPython running
    on a Qt or Wx backend, the figure updates interactively without waiting for the
    `show()` function. This is comparable to the way text output is printed on the
    fly.
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib.pyplot`包包含用于简单绘图的函数。 重要的是要记住，每个后续函数调用都会更改当前图的状态。 最终，我们想要将图保存在文件中，或使用  `show()`函数显示。
    但是，如果我们在 Qt 或 Wx 后端上运行的 IPython 中，则该图将交互更新，而无需等待`show()`函数。 这与即时输出文本输出的方式相当。'
- en: Time for action – plotting a polynomial function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制多项式函数
- en: To illustrate how plotting works, let's display some polynomial graphs. We will
    use the NumPy polynomial function `poly1d()` to create a polynomial.
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明绘图的工作原理，让我们显示一些多项式图。 我们将使用 NumPy 多项式函数`poly1d()`创建一个多项式。
- en: 'Take the standard input values as polynomial coefficients. Use the NumPy `poly1d()`
    function to create a polynomial:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标准输入值作为多项式系数。 使用 NumPy `poly1d()`函数创建多项式：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the `x` values with the NumPy the `linspace()` function. Use the range
    `-10` to `10` and create `30` even spaced values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 NumPy 和`linspace()`函数创建`x`值。 使用`-10`到`10`范围，并创建`30`等距值：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Calculate the polynomial values using the polynomial we created in the first
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在第一步中创建的多项式来计算多项式值：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Call the `plot()` function; this does not immediately display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`plot()`函数； 这样不会立即显示图形：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a label to the `x` axis with the `xlabel()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用  `xlabel()`函数在`x`轴上添加标签：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a label to the `y` axis with the `ylabel()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ylabel()`函数在`y`轴上添加标签：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Call the `show()` function to display the graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`show()`函数显示图形：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a plot with polynomial coefficients 1, 2, 3, and 4:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是具有多项式系数 1、2、3 和 4 的图：
- en: '![Time for action – plotting a polynomial function](img/4154_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制多项式函数](img/4154_09_01.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We displayed a polynomial graph on our screen. We added labels to the `x` and
    `y` axes (see `polyplot.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在屏幕上显示了多项式的图。 我们在`x`和`y`轴上添加了标签（请参见`polyplot.py`）：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Pop quiz – the plot() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小测验： `plot()`函数
- en: Q1\. What does the `plot()` function do?
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. `plot()`函数有什么作用？
- en: It displays two-dimensional plots on screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在屏幕上显示二维图。
- en: It saves an image of a two-dimensional plot in a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将二维图的图像保存在文件中。
- en: It does both a and b.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它同时执行（1）和（2）。
- en: It does neither a, b, or c.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它不执行（1），（2）或（3）。
- en: Plot format string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘图的格式字符串
- en: The `plot()` function accepts an unlimited number of arguments. In the previous
    section, we gave it two arrays as arguments. We could also specify the line color
    and style with an optional format string. By default, it is a solid blue line
    denoted as `b-`, but you can specify a different color and style, such as red
    dashes.
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot()`函数接受无限数量的参数。 在上一节中，我们给了它两个数组作为参数。 我们也可以通过可选的格式字符串指定线条颜色和样式。 默认情况下，它是蓝色实线，表示为`b-`，但是您可以指定其他颜色和样式，例如红色破折号。'
- en: Time for action – plotting a polynomial and its derivatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制多项式及其导数
- en: Let's plot a polynomial and its first-order derivative using the `deriv()` function
    with `m` as `1`. We already did the first part in the previous *Time for action*
    section. We want two different line styles to discern what is what.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`deriv()`函数和`m`作为`1`绘制多项式及其一阶导数。 我们已经在前面的“实战时间”部分中做了第一部分。 我们希望使用两种不同的线型来识别什么是什么。
- en: 'Create and differentiate the polynomial:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并微分多项式：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Plot the polynomial and its derivative in two styles: red circles and green
    dashes. You cannot see the colors in a print copy of this book, so you will have
    to try the code out for yourself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用两种样式绘制多项式及其导数：红色圆圈和绿色虚线。 您无法在本书的印刷版本中看到颜色，因此您将不得不亲自尝试以下代码：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The graph with polynomial coefficients `1`, `2`, `3`, and `4` is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多项式系数`1`，`2`，`3`和`4`的图如下：
- en: '![Time for action – plotting a polynomial and its derivatives](img/4154_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制多项式及其导数](img/4154_09_02.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We plotted a polynomial and its derivative using two different line styles
    and one call of the `plot()` function (see `polyplot2.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用两种不同的线型和一次调用`plot()`函数（请参见`polyplot2.py`）来绘制多项式及其导数：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Subplots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子图
- en: At a certain point, you will have too many lines in one plot. However, you would
    still like everything grouped together. We can do this with the `subplot()` function.
    This function creates multiple plots in a grid.
  prefs: []
  type: TYPE_NORMAL
  zh: 在某一时刻，一个绘图中将有太多的线。 但是，您仍然希望将所有内容组合在一起。 我们可以通过  `subplot()`函数执行此操作。 此函数在网格中创建多个图。
- en: Time for action – plotting a polynomial and its derivatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制多项式及其导数
- en: 'Let''s plot a polynomial and its first and second derivative. We will make
    three subplots for the sake of clarity:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制一个多项式及其一阶和二阶导数。 为了清楚起见，我们将进行三个子图绘制：
- en: 'Create a polynomial and its derivatives using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建多项式及其导数：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create the first subplot of the polynomial with the `subplot()` function. The
    first parameter of this function is the number of rows, the second parameter is
    the number of columns, and the third parameter is an index number starting with
    1\. Alternatively, combine the three parameters into a single number, such as
    `311`. The subplots will be organized in three rows and one column. Give the subplot
    the title **Polynomial**. Make a solid red line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`subplot()`函数创建多项式的第一个子图。 此函数的第一个参数是行数，第二个参数是列数，第三个参数是以 1 开头的索引号。或者，将这三个参数合并为一个数字，例如`311`。
    子图将组织成三行一列。 为子图命名为`Polynomial`。 画一条红色实线：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the third subplot of the first derivative with the `subplot()` function.
    Give the subplot the title **First** **Derivative**. Use a line of blue triangles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`subplot()`函数创建一阶导数的第三子图。 为子图命名为`First Derivativ`。 使用一行蓝色三角形：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the second subplot of the second derivative with the `subplot()` function.
    Give the subplot the title **Second** **Derivative**. Use a line of green circles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`subplot()`函数创建第二个导数的第二个子图。 给子图标题为`"Second Derivative"`。 使用一行绿色圆圈：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The three subplots with polynomial coefficients 1, 2, 3, and 4 are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 多项式系数为 1、2、3 和 4 的三个子图如下：
- en: '![Time for action – plotting a polynomial and its derivatives](img/4154_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制多项式及其导数](img/4154_09_03.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We plotted a polynomial and its first and second derivatives using three different
    line styles and three subplots in three rows and one column (see `polyplot3.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在三行一列中使用三种不同的线型和三个子图绘制了多项式及其一阶和二阶导数（请参见`polyplot3.py`）：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 财务
- en: '`matplotlib` can help monitor our stock investments. The `matplotlib.finance`
    package has utilities with which we can download stock quotes from Yahoo Finance
    at [http://finance.yahoo.com/](http://finance.yahoo.com/). We can then plot the
    data as candlesticks.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`可以帮助监视我们的股票投资。 `matplotlib.finance`包具有工具，我们可以使用这些工具从雅虎金融网站[`finance.yahoo.com`](http://finance.yahoo.com/)下载股票报价。 然后，我们可以将数据绘制为烛台。'
- en: Time for action – plotting a year's worth of stock quotes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制一年的股票报价
- en: We can plot a year's worth of stock quotes data with the `matplotlib.finance`
    package. This requires a connection to Yahoo Finance, which is the data source.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`matplotlib.finance`包绘制一年的股票报价数据。 这需要连接到 Yahoo Finance，这是数据源。
- en: 'Determine the start date by subtracting one year from today:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从今天减去一年来确定开始日期：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We need to create the so-called **locators**. These objects from the `matplotlib.dates`
    package locate months and days on the `x` axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建所谓的**定位器**。 来自`matplotlib.dates`包的这些对象在`x`轴上定位了几个月和几天：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a date formatter to format the dates on the `x` axis. This formatter
    creates a string containing the short name of a month and the year:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个日期格式化程序以格式化`x`轴上的日期。 此格式化程序创建一个字符串，其中包含月份和年份的简称：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Download the stock quote data from Yahoo finance with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码从雅虎金融下载股票报价数据：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a `matplotlib` `Figure` object—this is a top-level container for plot
    components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`matplotlib Figure`对象-这是绘图组件的顶级容器：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a subplot to the figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该图中添加子图：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Set the major locator on the `x` axis to the months locator. This locator is
    responsible for the big ticks on the `x` axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`x`轴上的主定位器设置为月份定位器。 此定位器负责`x`轴上的大刻度：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Set the minor locator on the `x` axis to the days locator. This locator is
    responsible for the small ticks on the `x` axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`x`轴上的次要定位器设置为天定位器。 此定位器负责`x`轴上的小滴答声：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Set the major formatter on the `x` axis to the months formatter. This formatter
    is responsible for the labels of the big ticks on the `x` axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`x`轴上的主要格式器设置为月份格式器。 此格式化程序负责`x`轴上大刻度的标签：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A function in the `matplotlib.finance` package allows us to display candlesticks.
    Create the candlesticks using the quotes data. It is possible to specify the width
    of the candlesticks. For now, use the default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`matplotlib.finance`包中的函数使我们可以显示烛台。 使用报价数据创建烛台。 可以指定烛台的宽度。 现在，使用默认值：'
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Format the labels on the `x` axis as dates. This rotates the labels on the
    `x` axis so that they fit better:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`x`轴上的标签格式化为日期。 这将旋转标签在`x`轴上，以使其更适合：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The candlestick chart for **DISH** (**Dish** **Network** **Corp**) appears
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`DISH`（**磁盘网络**）的烛台图显示如下：'
- en: '![Time for action – plotting a year''s worth of stock quotes](img/4154_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制一年的股票报价](img/4154_09_04.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We downloaded a year''s worth of data from Yahoo Finance. We charted this data
    using candlesticks (see `candlesticks.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从雅虎金融下载了年的数据。 我们使用烛台绘制了这些数据的图表（请参见`candlesticks.py`）：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直方图
- en: Histograms visualize the distribution of numerical data. `matplotlib` has the
    handy `hist()` function that graphs histograms. The `hist()` function has two
    main arguments—the array containing the data and the number of bars.
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图可视化数值数据的分布。 `matplotlib`具有方便的`hist()`函数  ，可绘制直方图。 `hist()`函数有两个主要参数-包含数据和条数的数组。
- en: Time for action – charting stock price distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制股价分布图
- en: Let's chart the stock price distribution of quotes from Yahoo Finance.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制雅虎金融的股票价格的分布图。
- en: 'Download the data going back one year:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载一年前的数据：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The quotes data in the previous step is stored in a Python list. Convert this
    to a NumPy array and extract the close prices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一步中的报价数据存储在 Python 列表中。 将其转换为 NumPy 数组并提取收盘价：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Draw the histogram with a reasonable number of bars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用合理数量的条形图绘制直方图：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The histogram for DISH appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: DISH 的直方图如下所示：
- en: '![Time for action – charting stock price distributions](img/4154_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制股价分布图](img/4154_09_05.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We charted the stock price distribution of DISH as a histogram (see `stockhistogram.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 DISH 的股价分布绘制为直方图  （请参见`stockhistogram.py`）：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Have a go hero – drawing a bell curve
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勇往直前 - 画钟形曲线
- en: Overlay a bell curve (related to the **Gaussian** or normal distribution) using
    the average price and standard deviation. This is, of course, only an exercise.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用平均价格和标准差覆盖钟形曲线（与**高斯**或正态分布有关）。 当然只是练习。
- en: Logarithmic plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数图
- en: Logarithmic plots are useful when the data has a wide range of values. `matplotlib`
    has the functions `semilogx()` (logarithmic `x` axis), `semilogy()` (logarithmic
    `y` axis), and `loglog()` (`x` and `y` axes logarithmic).
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据具有较宽范围的值时，对数图很有用。 `matplotlib`具有函数`semilogx()`（对数`x`轴），`semilogy()`（对数`y`轴）和`loglog()`（`x`和`y`轴为对数）。
- en: Time for action – plotting stock volume
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制股票交易量
- en: Stock volume varies a lot, so let's plot it on a logarithmic scale. First, we
    need to download historical data from Yahoo Finance, extract the dates and volume,
    create locators and a date formatter, and create the figure and add it to a subplot.
    We already went through these steps in the previous *Time for action* section,
    so we will skip them here.
  prefs: []
  type: TYPE_NORMAL
  zh: 股票交易量变化很大，因此让我们以对数标度进行绘制。 首先，我们需要从雅虎金融下载历史数据，提取日期和交易量，创建定位符和日期格式化程序，然后创建图形并将其添加到子图中。
    我们已经在上一个“实战时间”部分中完成了这些步骤，因此我们将在此处跳过  。
- en: 'Plot the volume using a logarithmic scale:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对数刻度绘制体积：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, set the locators and format the `x` axis as dates. Instructions for these
    steps can be found in the previous *Time for action* section as well.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置定位器并将`x`轴格式化为日期。 这些步骤的说明也可以在前面的“实战时间”部分中找到。
- en: 'The stock volume using a logarithmic scale for DISH appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 使用对数刻度的 DISH 的股票交易量显示如下：
- en: '![Time for action – plotting stock volume](img/4154_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制股票交易量](img/4154_09_06.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We plotted stock volume using a logarithmic scale (see `logy.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用对数比例（参见`logy.py`）绘制了股票交易量  ：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Scatter plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 散点图
- en: A scatter plot displays values for two numerical variables in the same dataset.
    The matplotlib `scatter()` function creates a scatter plot. Optionally, we can
    specify the color and size of the data points, as well as alpha transparency,
    in the plot.
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图在同一数据集中显示两个数值变量的值。 Matplotlib `scatter()`函数创建散点图。 （可选）我们可以在图中指定数据点的颜色和大小以及
    alpha 透明度。
- en: Time for action – plotting price and volume returns with a scatter plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：用散点图绘制价格和数量回报
- en: We can easily make a scatter plot of the stock price and volume returns. Again,
    let's download the necessary data from Yahoo Finance.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地绘制股票价格和交易量回报的散点图。 同样，从雅虎金融下载必要的数据。
- en: 'The quotes data in the previous step is stored in a Python list. Convert this
    to a NumPy array and extract the close and volume values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一步中的报价数据存储在 Python 列表中。 将此转换为 NumPy 数组并提取关闭和体积值：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Calculate the close price and volume returns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算收盘价和批量收益：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a matplotlib figure object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Matplotlib 图形对象：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add a subplot to the figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该图中添加子图：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the scatter plot with the color of the data points linked to the close
    return, and the size linked to the volume change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建散点图，将数据点的颜色链接到收盘价，将大小链接到体积变化：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Set the title of the plot and put a grid on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置图的标题并在其上放置网格：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The scatter plot for DISH appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: DISH 的散点图如下所示：
- en: '![Time for action – plotting price and volume returns with a scatter plot](img/4154_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：用散点图绘制价格和数量回报](img/4154_09_07.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We made a scatter plot of the close price and volume returns for DISH (see
    `scatterprice.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘制了 DISH 收盘价和成交量回报的散点图  （请参见`scatterprice.py`）：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Fill between
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充区域
- en: The `fill_between()` function fills a plot region with a specified color. We
    can choose an optional alpha channel value. The function also has a where parameter
    so that we can shade a region based on a condition.
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill_between()`函数用指定的颜色填充绘图区域。 我们可以选择一个可选的 Alpha 通道值。 该函数还具有`where`参数，以便我们可以根据条件对区域进行着色。'
- en: Time for action – shading plot regions based on a condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：根据条件遮蔽绘图区域
- en: Imagine that you want to shade a region of a stock chart, where the closing
    price is below average, with a different color than when it is above the mean.
    The `fill_between()` function is the best choice for the job. We will, again,
    omit the steps of downloading historical data going back one year, extracting
    dates and close prices, and creating locators and date formatter.
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您要在股票图表的某个区域遮蔽，该区域的收盘价低于平均水平，而其颜色高于高于均值的颜色。 `fill_between()`函数是工作的最佳选择。 我们将再次省略以下步骤：下载一年前的历史数据，提取日期和收盘价以及创建定位器和日期格式化程序。
- en: 'Create a matplotlib `Figure` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Matplotlib `Figure`对象：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add a subplot to the figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该图中添加子图：
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Plot the closing price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绘制收盘价：
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Shade the regions of the plot below the closing price using different colors
    depending on whether the values are below or above the average price:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据值是低于平均价格还是高于平均价格，使用不同的颜色对低于收盘价的地块区域进行阴影处理：
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now we can finish the plot as shown by setting locators and formatting the
    `x` axis values as dates. The stock price using conditional shading for DISH is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过设置定位器并将`x`轴值格式化为日期来完成绘制，如图所示。 使用 DISH 的条件阴影的股票价格如下：
- en: '![Time for action – shading plot regions based on a condition](img/4154_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：根据条件遮蔽绘图区域](img/4154_09_08.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We shaded the region of a stock chart, where the closing price is below average,
    with a different color than when it is above the mean (see `fillbetween.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用与高于均值（请参见`fillbetween.py`）不同的颜色，来着色股票图表中收盘价低于平均水平的区域：
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Legend and annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图例和标注
- en: Legends and annotations are essential for good plots. We can create transparent
    legends with the `legend()` function and let `matplotlib` figure out where to
    place them. Also, with the `annotate()` function, we can accurately annotate on
    a plot. There are a large number of annotation and arrow styles.
  prefs: []
  type: TYPE_NORMAL
  zh: 图例和标注对于良好的绘图至关重要。 我们可以使用`legend()`函数创建透明的图例，然后让`matplotlib`找出放置它们的位置。 同样，通过`annotate()`函数，我们可以准确地在图形上进行标注。
    有大量的标注和箭头样式。
- en: Time for action – using a legend and annotations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：使用图例和标注
- en: In [Chapter 3](ch03.html "Chapter 3. Getting Familiar with Commonly Used Functions"),
    *Getting Familiar with Commonly Used Functions*, we learned how to calculate the
    EMA of stock prices. We will plot the close price of a stock and three of its
    EMA. To clarify the plot, we will add a legend. We will also indicate crossovers
    of two of the averages with annotations. Some steps are again omitted to avoid
    repetition.
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三章，“熟悉常用函数”中，我们学习了如何计算股票价格的 EMA。 我们将绘制股票的收盘价及其三只  EMA 的收盘价。 为了阐明绘图，我们将添加一个图例。
    我们还将用标注指示两个平均值的交叉。 为了避免重复，再次省略了某些步骤。
- en: 'Go back to [Chapter 3](ch03.html "Chapter 3. Getting Familiar with Commonly
    Used Functions"), *Getting Familiar with Commonly Used Functions*, if needed,
    and review the EMA algorithm. Calculate and plot the EMAs of `9`, `12`, and `15`
    periods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回第三章“熟悉常用函数”，如果需要，并查看 EMA 算法。 计算并绘制 9，12 和 15 周期的 EMA：
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Notice that the `plot()` function call needs a label for the legend. We stored
    the moving averages in record arrays for the next step.
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`plot()`函数调用需要图例标签。 我们将移动平均值存储在记录数组中，以进行下一步。
- en: 'Let''s find the crossover points of the first two moving averages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们找到前两个移动均线的交叉点：
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now that we have the crossover points, annotate them with arrows. Make sure
    that the annotation text is slightly away from the crossover points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了交叉点，用箭头标注它们。 确保标注文本稍微偏离交叉点：
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add a legend and let `matplotlib` decide where to put it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加图例，然后让`matplotlib`决定将其放置在何处：
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Make the legend transparent by setting the alpha channel value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置 Alpha 通道值使图例透明：
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The stock price and moving averages with a legend and annotations appears as
    follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 带有图例和标注的股票价格和移动均线如下所示：
- en: '![Time for action – using a legend and annotations](img/4154_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：使用图例和标注](img/4154_09_09.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We plotted the close price of a stock and three of its EMAs. We added a legend
    to the plot. We annotated the crossover points of the first two averages with
    annotations (see `emalegend.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绘制了股票的收盘价及其三个 EMA。 我们在剧情中添加了图例。 我们用标注标注了前两个平均值的交叉点（请参见`emalegend.py`）：
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Three-dimensional plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三维绘图
- en: Three-dimensional plots are pretty spectacular, so we have to cover them here
    too. For three-dimensional plots, we need an `Axes3D` object associated with a
    `3D` projection.
  prefs: []
  type: TYPE_NORMAL
  zh: 三维图非常壮观，因此我们也必须在此处进行介绍。 对于三维图，我们需要一个与`3D`投影关联的`Axes3D`对象。
- en: Time for action – plotting in three dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：三维绘图
- en: 'We will plot a simple three-dimensional function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制一个简单的三维函数：
- en: '![Time for action – plotting in three dimensions](img/4154_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：三维绘图](img/4154_09_10.jpg)'
- en: 'Use the 3D keyword to specify a three-dimensional projection for the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 3D 关键字为绘图指定三维投影：
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To create a square two-dimensional grid, use the `meshgrid()` function to initialize
    the `x` and `y` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建方形二维网格，请使用`meshgrid()`函数初始化`x`和`y`值：
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We will specify the row strides, column strides, and the color map for the
    surface plot. The strides determine the size of the tiles in the surface. The
    choice for color map is a matter of taste:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为表面图指定行跨度，列跨度和颜色图。 步幅决定了表面砖的尺寸。 颜色图的选择取决于风格：
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The result is the following three-dimensional plot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是以下三维图：
- en: '![Time for action – plotting in three dimensions](img/4154_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：三维绘图](img/4154_09_11.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created a plot of a three-dimensional function (see `three_d.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个三维函数的绘图（请参见`three_d.py`）：
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Contour plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等高线图
- en: '`matplotlib` contour three-dimensional plots come in two flavors—filled and
    unfilled. Contour plots use the so-called **contour lines**. You may be familiar
    with contour lines from geographic maps. In such maps, contour lines connect points
    of the same elevation above sea level. We can create normal contour plots with
    the `contour()` function. For filled contour plots, we use the `contourf()` function.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`等高线三维图有两种样式-填充的和未填充的。 等高线图使用所谓的**等高线**。 您可能熟悉地理地图上的等高线。 在此类地图中，等高线连接了海拔相同高度的点。
    我们可以使用`contour()`函数创建法线等高线图。 对于填充的等高线图，我们使用`contourf()`函数。'
- en: Time for action – drawing a filled contour plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：绘制填充的等高线图
- en: 'We will draw a filled contour plot of the three-dimensional mathematical function
    in the previous *Time for action* section. The code is also pretty similar. One
    key difference is that we don''t need the `3D` projection parameter any more.
    To draw the filled contour plot, use the following line of code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前面的“实战时间”部分中绘制三维数学函数的填充等高线图  。 代码也非常相似。 一个主要区别是我们不再需要`3D`投影参数。 要绘制填充的等高线图，请使用以下代码行：
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This gives us the following filled contour plot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了以下填充等高线图：
- en: '![Time for action – drawing a filled contour plot](img/4154_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：绘制填充的等高线图](img/4154_09_12.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created a filled contour plot of a three-dimensional mathematical function
    (see `contour.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了三维数学函数的填充等高线图（请参见`contour.py`）：
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画
- en: '`matplotlib` offers fancy animation capabilities via a special animation module.
    We need to define a callback function that is used to regularly update the screen.
    We also need a function to generate data to be plotted.'
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`通过特殊的动画模块提供精美的动画函数。 我们需要定义一个用于定期更新屏幕的回调函数。 我们还需要一个函数来生成要绘制的数据。'
- en: Time for action – animating plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：让绘图动起来
- en: We will plot three random datasets and display them as circles, dots, and triangles.
    However, we will only update two of those datasets with random values.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制三个随机数据集  ，并将它们显示为圆形，点和三角形。 但是，我们将仅使用随机值更新其中两个数据集。
- en: 'Plot three random datasets as circles, dots, and triangles in different colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以不同的颜色绘制三个随机数据集，如圆形，点和三角形：
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'This function gets called to update the screen regularly. Update two of the
    plots with new y values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用此函数可以定期更新屏幕。 使用新的`y`值更新两个图：
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Generate random data with NumPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 NumPy 生成随机数据：
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The following is a snapshot of the animation in action:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行中的动画的快照：
- en: '![Time for action – animating plots](img/4154_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：让绘图动起来](img/4154_09_13.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created an animation of random data points (see `animation.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个随机数据点的动画  （请参见`animation.py`）：
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was about `matplotlib`—a Python plotting library. We covered simple
    plots, histograms, plot customization, subplots, three-dimensional plots, contour
    plots, and logarithmic plots. You also saw a few examples of displaying stock
    charts. Obviously, we only scratched the surface and just saw the tip of the iceberg.
    `matplotlib` is very feature rich, so we didn't have space to cover Latex support,
    polar coordinates support, and other functionality.
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于`matplotlib`的-Python 绘图库。 我们涵盖了简单图，直方图，图自定义，子图，三维图，等高线图和对数图。 您还看到了一些显示股票走势图的示例。
    显然，我们只是刮擦了表面，只是看到了冰山的一角。 `matplotlib`的功能非常丰富，因此我们没有足够的空间来覆盖 Latex 支持，极坐标支持和其他功能。
- en: The author of `matplotlib`, **John** **Hunter**, passed away in August 2012\.
    One of the technical reviewers of this book suggested mentioning the **John**
    **Hunter** **Memorial** **Fund** ([http://numfocus.org/news/2012/08/28/johnhunter/](http://numfocus.org/news/2012/08/28/johnhunter/)).
    The memorial fund set up by the **NumFocus** **Foundation** is an opportunity
    for us, fans of John Hunter's work, to "give back". Again, for more details, check
    out the preceding link to the NumFocus website.
  prefs: []
  type: TYPE_NORMAL
  zh: '`matplotlib`的作者**约翰·亨特**（John Hunter）于 2012 年 8 月去世。该书的一位技术评论家建议提及**约翰·亨特纪念基金**（见[`numfocus.org/news/2012/08/28/johnhunter`](http://numfocus.org/news/2012/08/28/johnhunter/)）。 **NumFocus 基金会**设立的纪念基金为我们（约翰·亨特的工作迷）提供了一个“回馈”的机会。
    同样，有关更多详细信息，请查看前面的 NumFocus 网站链接。'
- en: The next chapter is about SciPy—a scientific Python framework that is built
    on top of NumPy.
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍 SciPy，这是一个基于 NumPy 构建的科学 Python 框架。
