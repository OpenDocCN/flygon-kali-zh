- en: Chapter 1. Getting Started with Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Java入门
- en: This chapter familiarizes you with basic elements of Java and how to write a
    simple Java program. A comprehensive understanding of the Java development environment
    is achieved through simple explanations of the application development process.
    A Java console program is provided that serves as a starting point and a reference
    point for this discussion.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Java的基本元素以及如何编写简单的Java程序。通过简单的解释应用程序开发过程，可以全面了解Java开发环境。提供了一个作为起点和讨论参考的Java控制台程序。
- en: 'In this chapter we will examine:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究：
- en: What Java is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java是什么
- en: The object-oriented development process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象的开发过程
- en: Types of Java applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java应用程序的类型
- en: The creation of a simple program
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的程序
- en: The definition of classes and interfaces
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和接口的定义
- en: Java Application Development
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java应用程序开发
- en: Java environment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java环境
- en: Java documentation techniques
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java文档技术
- en: The use of annotations in Java
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java中的注释使用
- en: The core Java packages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心Java包
- en: Understanding Java as a technology
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Java作为一种技术
- en: Sun Microsystems developed the original specifications for the language in the
    mid 1990s. Patrick Naughton, Mike Sheridan, and James Gosling were the original
    inventors of Java and the language was called **Oak** at the beginning.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Sun Microsystems在1990年代中期开发了该语言的原始规范。Patrick Naughton、Mike Sheridan和James Gosling是Java的原始发明者，该语言最初被称为Oak。
- en: Java is a full-fledged object-oriented programming language. It is platform
    independent and is normally interpreted rather than compiled like C/C++. It is
    syntactically and structurally modeled after C/C++ and performs various compile-time
    and run-time checking operations. Java performs automatic memory management that
    helps to greatly reduce the problem of memory leaks found in other languages and
    libraries that dynamically allocate memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种完整的面向对象的编程语言。它是平台无关的，通常是解释性的，而不是像C/C++那样编译性的。它在语法和结构上模仿了C/C++，并执行各种编译时和运行时的检查操作。Java执行自动内存管理，有助于大大减少其他语言和动态分配内存的库中发现的内存泄漏问题。
- en: Java supports many features that, at its time of conception, were not found
    directly in other languages. These features include threading, networking, security,
    and **Graphical** **User** **Interface** (**GUI**) development. Other languages
    could be used to support these capabilities, but they were not integrated in the
    language to the extent that it was done with Java.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Java支持许多功能，在其概念产生时，其他语言中并没有直接找到。这些功能包括线程、网络、安全和图形用户界面（GUI）开发。其他语言可以用来支持这些功能，但它们没有像Java那样集成在语言中。
- en: 'Java uses an independent bytecode that is architecture neutral. That is, it
    is designed to be machine independent. The byte codes are interpreted and executed
    by a **Java** **Virtual** **Machine** (**JVM**). All of its primitive data types
    are fully specified, as we will see in [Chapter 3](ch03.html "Chapter 3. Decision
    Constructs"), *Decision Constructs*. The various releases of the **Java** **Development**
    **Kit** (**JDK**) and other significant moments are depicted in the following
    timeline diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用独立的字节码，这是与体系结构无关的。也就是说，它被设计为与机器无关。字节码由Java虚拟机（JVM）解释和执行。正如我们将在[第3章](ch03.html
    "第3章. 决策结构") *决策结构*中看到的那样，它的所有原始数据类型都是完全指定的。Java开发工具包（JDK）的各个版本和其他重要时刻如下时间线图所示：
- en: '![Understanding Java as a technology](img/7324_01_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![理解Java作为一种技术](img/7324_01_01.jpg)'
- en: Object-oriented software development
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向对象的软件开发
- en: Let's digress for a moment and consider why we are using Java at all. One of
    the most significant aspects of Java is that it is an **object-oriented** (**OO**)
    language. OO technologies are a popular paradigm for developing applications.
    This approach models an application around a series of real world objects, such
    as an employee or a ship. In order to solve a problem, it is useful to think of
    the real world objects that make up the problem domain.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时离题一下，考虑为什么我们要使用Java。Java最重要的一个方面是它是一种面向对象（OO）语言。OO技术是一种流行的开发应用程序的范式。这种方法围绕一系列真实世界的对象建模应用程序，比如员工或船只。为了解决问题，有必要考虑构成问题域的真实世界对象。
- en: 'The OO approach is based on three distinct activities:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OO方法基于三个不同的活动：
- en: '**Object** **Oriented** **Analysis** (**OOA**): This is concerned with determining
    the functionality of the system, that is, what should the application do'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象分析（OOA）：这涉及确定系统的功能，即应用程序应该做什么
- en: '**Object** **Oriented** **Design** (**OOD**): This is concerned with how the
    architecture supports the functionality of the application'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象设计（OOD）：这涉及架构如何支持应用程序的功能
- en: '**Object** **Oriented** **Programming** (**OOP**): This is concerned with the
    actual implementation of the application'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）：这涉及应用程序的实际实现
- en: 'The products of the analysis and design steps are often referred to as analysis
    and design artifacts. While there may be several different types produced, the
    one of most interest to the OOP step is called the **class** **diagram** . The
    following diagram shows a partial class UML diagram depicting two classes: `Customer`
    and `CustomerDriver`. In the *A simple Java application* section, we will examine
    the code for these classes. The **Unified** **Modeling** **Language** (**UML**)
    is a widely used OO technique used to design and document an application. A class
    diagram is one of the end products of the technique and is used by programmers
    to create the application:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 分析和设计步骤的产物通常被称为分析和设计工件。虽然可能会产生几种不同类型的工件，但对OOP步骤最感兴趣的是称为类图的工件。下图显示了一个部分类UML图，描述了两个类：`Customer`和`CustomerDriver`。在*一个简单的Java应用程序*部分，我们将研究这些类的代码。统一建模语言（UML）是一种广泛使用的OO技术，用于设计和记录应用程序。类图是该技术的最终产品之一，程序员用它来创建应用程序：
- en: '![Object-oriented software development](img/7324_01_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![面向对象软件开发](img/7324_01_02.jpg)'
- en: 'Each box represents a class and is divided into three sections:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方框代表一个类，分为三个部分：
- en: The first section at the top of the box is the name of the class
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方框顶部的第一部分是类的名称
- en: The second section lists the variables that make up the class
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分列出了构成类的变量
- en: The last section lists the class methods
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一部分列出了类的方法
- en: 'The symbols preceding the variable and method names specify the visibility
    of these class members. The following are the class diagram symbols used:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量和方法名称之前的符号指定了这些类成员的可见性。以下是类图中使用的符号：
- en: '`-`: Private'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-`: 私有'
- en: '`+`: Public'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+`: 公共'
- en: '`#`: Protected (used with inheritance)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#`: 受保护的（与继承一起使用）'
- en: Normally, a class diagram consists of many classes and is interconnected with
    annotated lines showing the relationship between the classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，类图由许多类组成，并通过带注释的线条相互连接，显示类之间的关系。
- en: The class diagram is intended to clearly show what objects make up the system
    and how they interact. Once a class diagram is complete it can be implemented
    using an OOP language such as Java.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 类图旨在清楚地显示系统中包含哪些对象以及它们如何相互作用。一旦类图完成，就可以使用Java等面向对象编程语言来实现它。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The object-oriented approach is typically used for medium-scale to large-scale
    projects, where many developers must communicate, and work together, to create
    an application. For smaller projects involving only a few programmers, such as
    the one dealt with in most programming classes, the object-oriented approach is
    not normally used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象的方法通常用于中等规模到大规模的项目，其中许多开发人员必须进行沟通和合作，以创建一个应用程序。对于只涉及少数程序员的较小项目，例如大多数编程课程中处理的项目，通常不使用面向对象的方法。
- en: OOP principles
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向对象编程原则
- en: 'While there is some disagreement in what actually makes a programming language
    an OOP programming language, there are generally three underlying principles that
    must be supported by an OOP language:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然关于什么才真正使编程语言成为面向对象的编程语言存在一些分歧，但通常面向对象编程语言必须支持三个基本原则：
- en: Data encapsulation
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据封装
- en: Inheritance
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承
- en: Polymorphism
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态性
- en: '**Data** **encapsulation** is concerned with hiding irrelevant information
    from the users of a class and exposing the relevant. The primary purpose of data
    encapsulation is to reduce the level of software development complexity. By hiding
    the details of what is needed to perform an operation, the use of that operation
    is simpler. How to achieve data encapsulation in Java is explained in the *Access
    modifiers* section, later in this chapter.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据封装**关注于从类的用户那里隐藏不相关的信息，并暴露相关的信息。数据封装的主要目的是降低软件开发的复杂性。通过隐藏执行操作所需的细节，使用该操作变得更简单。如何在Java中实现数据封装将在本章后面的*访问修饰符*部分中解释。'
- en: Data encapsulation is also used to protect the internal state of an object.
    By hiding the variables that represent the state of an object, modifications to
    the object are controlled through the methods. Any changes to the state are verified
    by the code in the methods. Also, by hiding variables, sharing of information
    between classes is eliminated. This reduces the amount of coupling possible in
    an application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数据封装也用于保护对象的内部状态。通过隐藏表示对象状态的变量，可以通过方法来控制对对象的修改。方法中的代码验证状态的任何更改。此外，通过隐藏变量，消除了类之间信息的共享。这减少了应用程序中可能出现的耦合量。
- en: Inheritance describes the relationship between two classes such that one class
    re-uses the capabilities of another class. This enables the re-use of software
    resulting in a more productive developer. Inheritance is covered in detail in
    [Chapter 7](ch07.html "Chapter 7. Inheritance and Polymorphism"), *Inheritance
    and Polymorphism*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 继承描述了两个类之间的关系，使一个类重用另一个类的功能。这样可以实现软件的重用，从而提高开发人员的生产力。继承在[第7章](ch07.html "第7章.
    继承和多态性")中有详细介绍，*继承和多态性*。
- en: The third principle is polymorphism and its primary concern is to make the application
    more maintainable and extendable polymorphism behavior is where the behavior of
    one or identical methods is dependent upon the object it is executing against.
    For example, a `person` object and a `square` object can both have a `draw` method.
    What it draws depends on the object the method is executed against. Polymorphism
    is discussed in [Chapter 7](ch07.html "Chapter 7. Inheritance and Polymorphism"),
    *Inheritance and Polymorphism*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个原则是多态性，其主要关注点是使应用程序更易于维护和扩展。多态行为是指一个或多个相同方法的行为取决于执行该方法的对象。例如，`person`对象和`square`对象都可以有一个`draw`方法。它所绘制的内容取决于执行该方法的对象。多态性在[第7章](ch07.html
    "第7章. 继承和多态性")中讨论，*继承和多态性*。
- en: 'These principles are summarized in the following table:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则总结在以下表中：
- en: '| Principle | What it is | Why we use it | How to do it |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 原则 | 是什么 | 为什么使用它 | 如何做到 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Data encapsulation | Technique that hides information from the users of that
    class | To reduce the level of software development complexity | Use access modifiers
    such as `public`, `private`, and `protected` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 数据封装 | 从类的用户隐藏信息的技术 | 降低软件开发复杂性的级别 | 使用`public`、`private`和`protected`等访问修饰符
    |'
- en: '| Inheritance | Technique to allow a derived or child class to use parts of
    a base or parent class | To promote the re-use of the software | Use the `extends`
    keyword |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 继承 | 允许派生或子类使用基类或父类的部分的技术 | 促进软件的重用 | 使用`extends`关键字 |'
- en: '| Polymorphism | Technique which supports different behavior of methods that
    is dependent on the object the method is executing against | To make an application
    more maintainable | Inherent to the Java language |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 多态性 | 支持方法的不同行为，取决于执行该方法的对象 | 使应用程序更易于维护 | Java语言的固有特性 |'
- en: The `implements` keyword is used in support of polymorphic behavior as is explained
    in [Chapter 7](ch07.html "Chapter 7. Inheritance and Polymorphism"), *Inheritance
    and Polymorphism*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`implements`关键字用于支持多态行为，如[第7章](ch07.html "第7章。继承和多态")*继承和多态*中所解释的。'
- en: Examining the types of Java applications
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查Java应用程序的类型
- en: 'There are several types of Java applications. These types have allowed Java
    to flourish in a number of different areas and contributed to Java becoming a
    very popular programming language. Java is used to develop the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种类型的Java应用程序。这些类型使Java得以在许多不同领域蓬勃发展，并促使Java成为一种非常流行的编程语言。Java用于开发以下内容：
- en: Console and window applications
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台和窗口应用程序
- en: Server-based web applications supported by Servlets, JSPs, JSF, and other JEE
    standards
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Servlet、JSP、JSF和其他JEE标准支持的基于服务器的Web应用程序
- en: Applets that execute within a browser
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中执行的小程序
- en: Embedded applications
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式应用程序
- en: Componentized building blocks using JavaBeans
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaBeans的组件化构建块
- en: While a basic understanding of the types of Java applications is useful in putting
    Java into context, it also helps to be able to recognize the basic code for these
    applications. You may not completely understand all of the ins and outs of these
    application types, but it is useful to see simple code examples.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对Java应用程序类型的基本理解有助于将Java置于上下文中，但也有助于能够识别这些应用程序的基本代码。您可能不完全理解这些应用程序类型的所有细节，但看到简单的代码示例是有用的。
- en: Reading the code goes a long way towards understanding a language and a specific
    program. Throughout the book we will use numerous examples to illustrate and explain
    various aspects of Java. The basic types of Java applications are shown below
    by presenting short code snippets that are central to that application type.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读代码对于理解一种语言和特定程序有很大帮助。在整本书中，我们将使用许多示例来说明和解释Java的各个方面。以下通过呈现对应用程序类型至关重要的简短代码片段来展示Java应用程序的基本类型。
- en: 'A simple console application consists of a single class with a `main` method,
    as shown in the following code snippet:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的控制台应用程序由一个带有`main`方法的单个类组成，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will examine this type of application in more depth.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更深入地研究这种类型的应用程序。
- en: '**Applets** are normally embedded within an HTML page and offer a means of
    achieving client-side execution of a code. It does not have a `main` method but
    uses a series of callback methods used by the browser to manage the application.
    The following code provides an idea of the general appearance of an applet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 小程序通常嵌入在HTML页面中，并提供了一种实现客户端执行代码的方法。它没有`main`方法，而是使用浏览器用来管理应用程序的一系列回调方法。以下代码提供了小程序的一般外观：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `@Override` annotation is used to ensure that the method that follows is
    actually overridden. This is discussed in more detail in the *Annotations* section
    of this chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Override`注解用于确保接下来的方法实际上是被覆盖的。这在本章的*注解*部分中有更详细的讨论。'
- en: 'A **servlet** is a server-side application which renders an HTML page sent
    to a client. A `doGet` or `doPut` method responds to client-side request. The
    `out` variable in the following example represents the HTML page. The `println`
    methods are used to write the HTML code, as shown in the following code snippet:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Servlet是一个在服务器端运行的应用程序，它呈现给客户端一个HTML页面。`doGet`或`doPut`方法响应客户端请求。以下示例中的`out`变量代表HTML页面。`println`方法用于编写HTML代码，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A **JavaServer** **Page** (**JSP**) is actually a disguised Servlet. It provides
    a more convenient way of developing web pages. The following example uses a JavaBean
    to display "Hello World" on the web page. The JavaBean is detailed in the following
    example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: JavaServer Page（JSP）实际上是一个伪装的Servlet。它提供了一种更方便的开发网页的方式。以下示例使用一个JavaBean在网页上显示“Hello
    World”。JavaBean在以下示例中有详细说明：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'JavaBeans are building blocks for shared application functionality. They are
    frequently designed to be used in multiple applications and follow a standard
    naming convention. The following is a simple JavaBean designed to hold a name
    (it was used in the previous JSP page):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaBean是共享应用程序功能的构建块。它们经常被设计用于多个应用程序，并遵循标准的命名约定。以下是一个简单的JavaBean，用于保存一个名称（它在前面的JSP页面中使用）：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Enterprise** **Java** **Beans** (**EJB**) are components designed to be used
    in a client/server configuration from a web server. This is a fairly specialized
    topic that is not relevant to the associate level of certification.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 企业JavaBean（EJB）是设计用于在Web服务器上的客户端/服务器配置中使用的组件。这是一个相当专业化的主题，与认证的副级别无关。
- en: There are several other types of Java technologies such as JSF and Facelets
    that are a part of JEE. These are improvements over the older Servlet and JSP
    technologies used to develop web pages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几种Java技术，如JSF和Facelets，它们是JEE的一部分。这些是对用于开发网页的旧Servlet和JSP技术的改进。
- en: In this book we will only use simple Java console applications. This type of
    application is more than sufficient to explain the essence of Java.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只会使用简单的Java控制台应用程序。这种类型的应用程序已经足够解释Java的本质。
- en: Exploring the structure of a Java console program
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Java控制台程序的结构
- en: Let's start with a simple Java program and then use it to explore many of the
    basic facets of Java. First, a Java application consists of one or more files
    located somewhere within a filesystem. The name of the files and their locations
    are both important, as we will see shortly.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的Java程序开始，然后使用它来探索Java的许多基本方面。首先，Java应用程序由一个或多个文件组成，这些文件位于文件系统的某个位置。文件的名称和位置都很重要，我们很快就会看到。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)的帐户中购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: A simple Java application
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的Java应用程序
- en: 'Our simple program defines a `Customer` class and then uses it in the `CustomerDriver`
    class as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的简单程序定义了一个`Customer`类，然后在`CustomerDriver`类中使用它，如下所示：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The details of how to compile and execute this application are provided in
    the *Developing Java applications without an IDE* section. When this application
    is executed you will get the following output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如何编译和执行此应用程序的详细信息在*在没有IDE的情况下开发Java应用程序*部分提供。执行此应用程序时，您将获得以下输出：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Understanding the application in detail The following sections detail the significant
    aspects of the example program. These will be elaborated upon later in more detail
    in the chapters that follow. Notice, that there are two classes in this application.
    The `CustomerDriver` class contains the `main` method and is executed first. An
    instance of the `Customer` class is created and used within the main method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解应用程序 以下部分详细介绍了示例程序的重要方面。这些将在接下来的章节中更详细地阐述。请注意，此应用程序中有两个类。`CustomerDriver`类包含`main`方法，并首先执行。在`main`方法中创建并使用了`Customer`类的一个实例。
- en: Package
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包
- en: The package statement specifies the class' `com.company.customer` package. Packages
    provide a means of grouping similar classes, interfaces, enumerations, and exceptions
    together. They are discussed in more depth in the *Packages* section in [Chapter
    9](ch09.html "Chapter 9. The Java Application"), *The Java Application*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 包语句指定了类的`com.company.customer`包。包提供了一种将相似的类、接口、枚举和异常分组的方法。它们在[第9章](ch09.html
    "第9章。Java应用程序")的*包*部分中更深入地讨论了*Java应用程序*。
- en: Import
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入
- en: 'The `import` statement indicates which packages and classes are used by the
    class. This allows the compiler to determine whether the package''s members are
    used correctly. Packages need to be imported for all classes, with the exception
    of the following classes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句指示类使用了哪些包和类。这允许编译器确定包的成员是否被正确使用。所有类都需要导入包，但以下类除外：'
- en: Found in the `java.lang` package
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`java.lang`包中找到
- en: Located in the current package (`com.company.customer`, in this case)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于当前包（在本例中为`com.company.customer`）
- en: Explicitly marked such as `java.text.NumberFormat` as used in the `Customer`
    class' `toString` method
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显式标记，如在`Customer`类的`toString`方法中使用的`java.text.NumberFormat`
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `import` statement informs the compiler of which packages and classes are
    used by an application and how they can be used.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句通知编译器应用程序使用了哪些包和类以及如何使用它们。'
- en: The Customer class
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Customer类
- en: The first word of the class definition was the keyword, `public`, which is a
    part of the support Java provides for object-oriented software development. In
    this context, it specifies that the class is visible outside the package. While
    not required, it is frequently used for most classes and brings us to the second
    keyword, `class`, which identifies a Java class.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类定义的第一个单词是关键字`public`，这是Java为面向对象软件开发提供的支持的一部分。在这种情况下，它指定类在包外可见。虽然不是必需的，但大多数类经常使用它，并引出了第二个关键字`class`，它标识了一个Java类。
- en: Instance variables
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实例变量
- en: Four private instance variables were declared next. The use of the `private`
    keyword hides them from users of the class. The `Locale` class supports applications
    that can work transparently internationally. `BigDecimal` is the best way of representing
    currency in Java.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来声明了四个私有实例变量。使用`private`关键字将它们隐藏在类的用户之外。`Locale`类支持可以在国际上透明工作的应用程序。`BigDecimal`是在Java中表示货币的最佳方式。
- en: Methods
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法
- en: By making these instance variables private, the designer restricts access to
    the variables. They are then only accessible through public methods. The combination
    of private variables and public methods is an example of data encapsulation. If
    the instance variables are made public instead, other users can directly access
    the variables. This would improve the efficiency of the program, but may hinder
    future maintenance efforts. It would be more difficult to change these variables
    and enforce any sort of validation checks on the changes to the variables.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些实例变量设为私有，设计者限制了对变量的访问。然后只能通过公共方法访问它们。私有变量和公共方法的组合是数据封装的一个例子。如果将实例变量改为公共的，其他用户可以直接访问变量。这将提高程序的效率，但可能会阻碍未来的维护工作。更改这些变量并对其进行任何验证检查将更加困难。
- en: A series of getter and setter methods were present to return and set the values
    associated with the private instance variables. This exposes them in a controlled
    manner. The use of getter and setter methods is a standard approach to achieve
    encapsulation. For example, trying to assign a null value to a name would throw
    a `IllegalArmumentException` exception. These types of methods are discussed in
    the *Method declaration* section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的getter和setter方法用于返回和设置与私有实例变量相关的值。这以受控的方式暴露它们。使用getter和setter方法是实现封装的标准方法。例如，尝试将空值分配给名称将引发`IllegalArmumentException`异常。这些类型的方法在*方法声明*部分中讨论。
- en: The `toString` method returns a string representing an instance of a customer.
    In this case the name, account number, and a localized version of the balance
    is returned. The use of the `StringBuilder` class is discussed in [Chapter 2](ch02.html
    "Chapter 2. Java Data Types and Their Usage"), *Java Data Types and Their Usage*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`toString`方法返回表示客户实例的字符串。在这种情况下，返回名称、帐号和余额的本地化版本。`StringBuilder`类的使用在[第2章](ch02.html
    "第2章。Java数据类型及其使用")中讨论，*Java数据类型及其使用*。'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Methods are found within classes and classes are found within packages.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 方法在类中找到，类在包中找到。
- en: The CustomerDriver class' main method
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CustomerDriver类的main方法
- en: The `CustomerDriver` class is referred to as the driver or controller class.
    Its purpose is to have a `main` method that will create and use other classes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`CustomerDriver`类被称为驱动程序或控制器类。它的目的是拥有一个将创建和使用其他类的`main`方法。'
- en: In a Java application the `main` method is the first method to be executed.
    If the application consists of multiple classes, normally only one class has a
    `main` method. A Java application typically needs only one `main` method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java应用程序中，`main`方法是要执行的第一个方法。如果应用程序由多个类组成，通常只有一个类有`main`方法。Java应用程序通常只需要一个`main`方法。
- en: In the `main` method, a new customer is created, a balance is set and then the
    customer is displayed. A C++ style comment was added to statements to document
    the declaration and creation of a customer. This was the line beginning with the
    double forward slashes (`//`). Comments are explained in detail in the *Comments*
    section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建一个新的客户，设置余额，然后显示客户。在语句中添加了C++风格的注释，以记录客户的声明和创建。这是以双斜杠（`//`）开头的行。注释在*注释*部分详细解释。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The first method that executes in a Java console application is the `main` method.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java控制台应用程序中执行的第一种方法是`main`方法。
- en: Exploring the structure of a class
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索类的结构
- en: 'Programming can be thought of as code manipulating data. In Java, code is organized
    around the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 编程可以被认为是代码操作数据。在Java中，代码围绕以下内容组织：
- en: Packages
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包
- en: Classes
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Methods
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法
- en: Packages are collections of classes with similar functionality. Classes are
    composed of methods that support the functionality of the class. This organization
    provides structure to applications. Classes will always be in a package and methods
    will always be in a class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 包是具有类似功能的类的集合。类由支持类功能的方法组成。这种组织为应用程序提供了结构。类将始终在一个包中，方法将始终在一个类中。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the package statement is not included in a class definition, the class becomes
    part of a default package which consists of all of the classes in the same directory
    that doesn't have a package statement.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类定义中没有包语句，则该类将成为默认包的一部分，该默认包包括同一目录中没有包语句的所有类。
- en: Classes, interfaces, and objects
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类、接口和对象
- en: 'A class is the fundamental building block of object-oriented programs. It generally
    represents a real-world object. A class definition in Java consists of member
    variable declarations and method declarations. It begins with the `class` keyword.
    The body of the class is enclosed with brackets and contains all instance variables
    and methods:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类是面向对象程序的基本构建块。它通常代表现实世界的对象。Java中的类定义包括成员变量声明和方法声明。它以`class`关键字开始。类的主体用大括号括起来，包含所有实例变量和方法：
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A pair of open and close curly braces constitutes a block statement. This is
    used in many other parts of Java.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一对开放和关闭大括号构成一个块语句。这在Java的许多其他部分中使用。
- en: Classes and objects
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类和对象
- en: A class is a pattern or template for creating multiple objects with similar
    features. It defines the variables and methods of the class. It declares the capabilities
    of the class. However, before these capabilities can be used, an object must be
    created. An object is an instantiation of a class. That is, an object is composed
    of the memory allocated for the member variables of the class. Each object has
    its own set of member variables.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 类是用于创建具有相似特征的多个对象的模式或模板。它定义了类的变量和方法。它声明了类的功能。但是，在使用这些功能之前，必须创建一个对象。对象是类的实例化。也就是说，对象由为类的成员变量分配的内存组成。每个对象都有自己的一组成员变量。
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The following occurs when a new object is created:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新对象时发生以下情况：
- en: The new keyword is used to create an instance of a class
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用new关键字创建类的实例
- en: Memory is physically allocated for the new instance of the class
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为类的新实例物理分配内存
- en: Any static initializers are executed (as detailed in the *Java initialization
    sequence* section in [Chapter 6](ch06.html "Chapter 6. Classes, Constructors,
    and Methods"), *Classes, Constructors, and Methods*)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行任何静态初始化程序（如[第6章](ch06.html "第6章。类、构造函数和方法")中*Java初始化顺序*部分所述），*类、构造函数和方法*）
- en: A constructor is called to do initialization
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用构造函数进行初始化
- en: A reference to the object is returned
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回对对象的引用
- en: The state of an object is typically hidden from the users of the object and
    is reflected in the value of its instance variables. The behavior of an object
    is determined by the methods it possesses. This is an example of data encapsulation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的状态通常对对象的用户隐藏，并反映在其实例变量的值中。对象的行为由它拥有的方法决定。这是数据封装的一个例子。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An object is the instantiation of a class. Each instance of a class has its
    own unique set of instance variables.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是类的实例化。每个类的实例都有自己独特的一组实例变量。
- en: Objects in Java are always allocated on the heap. The heap is an area of memory
    that is used for dynamically allocated memory, such as objects. In Java, objects
    are allocated in a program and then released by the JVM. This release of memory
    is called garbage collection and performed automatically by the JVM. An application
    has little control over this process. The primary benefit of this technique is
    the minimization of memory leaks.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的对象总是分配在堆上。堆是用于动态分配内存（如对象）的内存区域。在Java中，对象在程序中分配，然后由JVM释放。这种内存释放称为垃圾回收，由JVM自动执行。应用程序对此过程的控制很少。这种技术的主要好处是最大限度地减少内存泄漏。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A memory leak occurs when memory is dynamically allocated but is never released.
    This has been a common problem with languages such as C and C++, where it is the
    responsibility of the programmer to manage the heap.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当动态分配内存但从未释放时，就会发生内存泄漏。这在诸如C和C++等语言中是一个常见问题，程序员有责任管理堆。
- en: A memory leak can still occur in Java if an object is allocated but the reference
    to the object is never released when the object is no longer needed.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，如果分配了一个对象但在不再需要该对象时没有释放对该对象的引用，就可能发生内存泄漏。
- en: Constructors
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数
- en: Constructors are used to initialize an object. Whenever an object is created,
    a constructor executes. A default constructor is the one that has no arguments
    and is provided automatically for all classes. This constructor will initialize
    all instance variables to default values.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数用于初始化对象。每当创建一个对象时，都会执行构造函数。默认构造函数是没有参数的构造函数，对所有类都会自动提供。这个构造函数将把所有实例变量初始化为默认值。
- en: However, if the developer provides a constructor, the compiler's default constructor
    is no longer added. The developer will need to explicitly add a default constructor.
    It is a good practice to always have a default, no-argument constructor.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果开发人员提供了构造函数，编译器就不会再添加默认构造函数。开发人员需要显式添加一个默认构造函数。始终具有一个默认的无参数构造函数是一个良好的实践。
- en: Interfaces
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接口
- en: 'An interface is similar to an abstract class. It is declared using the `interface`
    keyword and consists of only abstract methods and final variables. An abstract
    class normally has one or more abstract methods. An abstract method is the one
    that does not have an implementation. It is intended to support polymorphic behavior,
    as discussed in [Chapter 7](ch07.html "Chapter 7. Inheritance and Polymorphism"),
    *Inheritance and Polymorphism*. The following code defines an interface used to
    designate a class as capable of being drawn:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接口类似于抽象类。它使用`interface`关键字声明，只包含抽象方法和最终变量。抽象类通常有一个或多个抽象方法。抽象方法是没有实现的方法。它旨在支持多态行为，如[第7章](ch07.html
    "第7章。继承和多态")中讨论的，*继承和多态*。以下代码定义了一个用于指定类能够被绘制的接口：
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Methods
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: All executable code executes either within an initializer list or a method.
    Here, we will examine the definition and use of methods. The initializer list
    is discussed in [Chapter 6](ch06.html "Chapter 6. Classes, Constructors, and Methods"),
    *Classes, Constructors, and Methods*. Methods will always be contained within
    a class. The visibility of a method is controlled by its access modifiers as detailed
    in the *Access modifiers* section. Methods may be either static or instance. Here,
    we will consider instance methods. As we will see in [Chapter 6](ch06.html "Chapter 6. Classes,
    Constructors, and Methods"), *Classes, Constructors, and Methods*, static methods
    typically access static variables that are shared between objects of a class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可执行代码都在初始化程序列表或方法中执行。在这里，我们将研究方法的定义和用法。初始化程序列表在[第6章](ch06.html "第6章。类，构造函数和方法")中讨论，*类，构造函数和方法*。方法将始终包含在类中。方法的可见性由其访问修饰符控制，详细信息请参阅*访问修饰符*部分。方法可以是静态的或实例的。在这里，我们将考虑实例方法。正如我们将在[第6章](ch06.html
    "第6章。类，构造函数和方法")中看到的，*类，构造函数和方法*，静态方法通常访问类的对象之间共享的静态变量。
- en: Regardless of the type of method, there is only a single copy of a method. That
    is, while a class may have zero, one, or more methods, each instance of the class
    (an object) uses the same definition of the method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 无论方法的类型如何，方法只有一个副本。也就是说，虽然一个类可能有零个、一个或多个方法，但类的每个实例（对象）都使用方法的相同定义。
- en: Method declaration
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法声明
- en: 'A typical method consists of:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的方法包括：
- en: An option modifier
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的修饰符
- en: A return type
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回类型
- en: The method name
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名称
- en: A parameter list enclosed in parentheses
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 括在括号中的参数列表
- en: An optional throws clause
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的throws子句
- en: A block statement containing the method's statements
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含方法语句的块语句
- en: 'The following `setName` method illustrates these parts of a method:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`setName`方法说明了方法的这些部分：
- en: '[PRE9]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: While the else clause in this example is technically not required, it is a good
    practice to always use else clauses as it represents a possible execution sequence.
    In this example, if the if statement's logical expression evaluates to true, then
    the exception will be thrown and the rest of the method is skipped. Exception
    handling is covered in detail in [Chapter 8](ch08.html "Chapter 8. Handling Exceptions
    in an Application"), *Handling Exceptions in an Application*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在这个例子中else子句在技术上不是必需的，但始终使用else子句是一个良好的实践，因为它代表了可能的执行顺序。在这个例子中，如果if语句的逻辑表达式求值为true，那么异常将被抛出，方法的其余部分将被跳过。异常处理在[第8章](ch08.html
    "第8章。应用程序中的异常处理")中有详细介绍，*应用程序中的异常处理*。
- en: Methods frequently manipulate instance variables to define the new state of
    an object. In a well designed class, the instance variables can typically only
    be changed by the class' methods. They are private to the class. Thus, data encapsulation
    is achieved.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 方法经常操作实例变量以定义对象的新状态。在设计良好的类中，实例变量通常只能由类的方法更改。它们对类是私有的。因此，实现了数据封装。
- en: 'Methods are normally visible and allow the user of the object to manipulate
    that object. There are two ways to classify methods:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 方法通常是可见的，并允许对象的用户操作该对象。有两种方法对方法进行分类：
- en: '**Getter methods**: These methods return the state of an object (also called
    **accessor methods**)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Getter方法**：这些方法返回对象的状态（也称为**访问器方法**）'
- en: '**Setter methods**: These are methods that can change the state of an object
    (also called **mutator methods**)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Setter方法**：这些方法可以改变对象的状态（也称为**变异方法**）'
- en: In the `Customer` class, setter and getter methods were provided for all of
    the instance variables, except for the locale variable. We could have easily included
    a get and set method for this variable but did not, to conserve space.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Customer`类中，为所有实例变量提供了setter和getter方法，除了locale变量。我们本可以很容易地为这个变量包括一个get和set方法，但为了节省空间，我们没有这样做。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A variable that has a get method but not an otherwise visible set method is
    referred to as a **read-only member variable** . The designer of the class decided
    to restrict direct access to the variable.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 具有获取方法但没有其他可见的设置方法的变量被称为**只读成员变量**。类的设计者决定限制对变量的直接访问。
- en: A variable that has a set method but not an otherwise visible get method is
    referred to as a **write-only member variable** . While you may encounter such
    a variable, they are rare.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 具有设置方法但没有其他可见的获取方法的变量被称为**只写成员变量**。虽然您可能会遇到这样的变量，但它们很少见。
- en: Method signature
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法签名
- en: 'The signature of a method consists of:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的签名由以下组成：
- en: The name of the method
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的名称
- en: The number of arguments
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的数量
- en: The types of the arguments
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的类型
- en: The order of the arguments
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的顺序
- en: The signature is an important concept to remember and is used in overloading/overriding
    methods and constructors as discussed in [Chapter 7](ch07.html "Chapter 7. Inheritance
    and Polymorphism"), *Inheritance and Polymorphism*. A constructor will also have
    a signature. Notice that the definition of a signature does not include the return
    type.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 签名是一个重要的概念，用于方法和构造函数的重载/覆盖，如[第7章](ch07.html "第7章. 继承和多态")中所讨论的，*继承和多态*。构造函数也将有一个签名。请注意，签名的定义不包括返回类型。
- en: The main method
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主方法
- en: The examples used in the book will be console program applications. These programs
    typically read from the keyboard and display the output on the console. When a
    console application is executed by the operating system, the `main` method is
    executed first. It may then execute other methods.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 书中使用的示例将是控制台程序应用。这些程序通常从键盘读取并在控制台上显示输出。当操作系统执行控制台应用程序时，首先执行`main`方法。然后可能执行其他方法。
- en: The `main` method can be used to pass information from the command line. This
    information is passed to the arguments of the `main` method. It consists of an
    array of strings representing the program's parameters. We will see this in action
    in [Chapter 4](ch04.html "Chapter 4. Using Arrays and Collections"), *Using Arrays
    and Collections*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法可以用于从命令行传递信息。这些信息传递给`main`方法的参数。它由代表程序参数的字符串数组组成。我们将在[第4章](ch04.html
    "第4章. 使用数组和集合")中看到这一点，*使用数组和集合*。'
- en: 'There is only one form of the `main` method in Java, shown as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中只有一种`main`方法的形式，如下所示：
- en: '[PRE10]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following table shows elements of the main method:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了`main`方法的元素：
- en: '| Elements | Meaning |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 意义 |'
- en: '| --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `public` | The method is visible outside the class. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `public` | 方法在类外可见。 |'
- en: '| `static` | The method can be invoked without creating an object of the class
    type. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `static` | 该方法可以在不创建类类型对象的情况下调用。 |'
- en: '| `void` | The method does not return anything. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `void` | 该方法不返回任何内容。 |'
- en: '| `args` | An array of strings representing the arguments passed. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `args` | 代表传递的参数的字符串数组。 |'
- en: Returning a value from an application
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从应用程序返回一个值
- en: 'The `main` method returns `void`, meaning that it is not possible to return
    a value back to the operating system as part of the normal method invocation sequence.
    However, it is sometimes useful to return a value to indicate whether the program
    terminated successfully or not. This is useful when the program is used in a batch
    type operation where multiple programs are being executed. If one program fails
    in this execution sequence, then the sequence may be altered. Information can
    be returned from an application using the `System.exit` method. The following
    use of the methods will terminate the application and return a zero to the operating
    system:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`方法返回`void`，这意味着在正常的方法调用序列中无法将值返回给操作系统。但是，有时将返回一个值以指示程序是否成功终止是有用的。当程序用于批处理类型操作时，返回这些信息是有用的。如果在执行序列中一个程序失败，那么序列可能会被改变。可以使用`System.exit`方法从应用程序返回信息。以下方法的使用将终止应用程序并返回零给操作系统：'
- en: '[PRE11]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `exit` method:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit`方法：'
- en: Forces the termination of all of the application's threads
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制终止应用程序的所有线程
- en: Is extreme and should be avoided
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是极端的，应该避免
- en: Does not provide an opportunity to gracefully terminate the program
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不提供优雅终止程序的机会
- en: Access modifiers
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问修饰符
- en: 'Variables and methods can be declared as one of four types, shown in the following
    table:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 变量和方法可以声明为以下四种类型之一，如下表所示：
- en: '| Access type | Keyword | Meaning |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 访问类型 | 关键字 | 意义 |'
- en: '| --- | --- | --- |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Public | `public` | Access is provided to users outside the class. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 公共的 | `public` | 提供给类外用户的访问。 |'
- en: '| Private | `private` | Restricts access to members of the class. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 私有的 | `private` | 限制对类成员的访问。 |'
- en: '| Protected | `protected` | Access is provided to classes that inherit the
    class or are members of the same package. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 受保护的 | `protected` | 提供给继承类或同一包中成员的访问。 |'
- en: '| Package scoped | none | Access is provided to members of the same package.
    |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 包范围 | 无 | 提供对同一包中成员的访问。 |'
- en: Most of the time, a member variable is declared as private and a method is declared
    as public. However, the existence of the other access types implies other potential
    ways of controlling the visibility of a member. These usages will be examined
    in [Chapter 7](ch07.html "Chapter 7. Inheritance and Polymorphism"), *Inheritance
    and Polymorphism*.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，成员变量声明为私有，方法声明为公共。但是，其他访问类型的存在意味着控制成员可见性的其他潜在方法。这些用法将在[第7章](ch07.html
    "第7章。继承和多态")*继承和多态*中进行检查。
- en: 'In the `Customer` class, all of the class variables were declared as private
    and all of the methods were made public. In the `CustomerDriver` class, we saw
    the use of the `setBalance` and `toString` methods:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Customer`类中，所有类变量都声明为私有，所有方法都声明为公共。在`CustomerDriver`类中，我们看到了`setBalance`和`toString`方法的使用：
- en: '[PRE12]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As these methods were declared as public, they can be used with the `Customer`
    object. It is not possible to directly access the balance instance variable. The
    following statement attempts this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些方法被声明为public，它们可以与`Customer`对象一起使用。不可能直接访问balance实例变量。以下语句尝试这样做：
- en: '[PRE13]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The compiler will issue a compile-time error similar to the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将发出类似以下的编译时错误：
- en: '**balance has private access in com.company.customer.Customer**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**balance在com.company.customer.Customer中具有私有访问权限**'
- en: Note
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Access modifiers are used to control the visibility of application elements.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 访问修饰符用于控制应用程序元素的可见性。
- en: Documentation
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: The documentation of a program is an important part of the software development
    process. It explains the code to other developers and provides reminders to the
    developers of what and why they did what they did.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的文档是软件开发过程中的重要部分。它向其他开发人员解释代码，并提醒开发人员他们为什么这样做。
- en: 'Documentation is achieved through several techniques. Here, we will address
    three common techniques:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是通过几种技术实现的。在这里，我们将讨论三种常见的技术：
- en: '**Comment**: This is the documentation embedded in the application'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释**：这是嵌入在应用程序中的文档'
- en: '**Naming conventions**: Following the standard Java naming conventions makes
    an application more readable'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名约定**：遵循标准的Java命名约定可以使应用程序更易读'
- en: '**Javadoc**: This is a tool used to generate documentation about an application
    in the form of HTML files'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Javadoc**：这是一种用于生成HTML文件形式的应用程序文档的工具'
- en: Comments
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'Comments are used to document a program. They are not executable and are ignored
    by a compiler. Good comments can go a long way to make a program more readable
    and maintainable. Comments can be grouped into three types—C style, C++ style,
    and Java style, as summarized in the following table:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注释用于记录程序。它们不可执行，编译器会忽略它们。良好的注释可以大大提高程序的可读性和可维护性。注释可以分为三种类型——C样式、C++样式和Java样式，如下表所总结：
- en: '| Type of Comment | Description |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 注释类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Example |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 例子 |'
- en: '| --- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| C style | The C style comment uses a two character sequence at the beginning
    and the end of a comment. This type of comment can extend across multiple lines.
    The beginning character sequence is a `/*` while the ending sequence consists
    of `*/`. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| C样式 | C样式注释在注释的开头和结尾使用两个字符序列。这种类型的注释可以跨越多行。开始字符序列是`/*`，而结束序列由`*/`组成。 |'
- en: '|'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| C++ style | The C++ style comment begins with two forward slashes and the
    comment continues until the end of the line. Essentially everything from the `//`
    to the end of the line is treated as a comment. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| C++样式 | C++样式注释以两个斜杠开头，注释一直持续到行尾。实质上，从`//`到行尾的所有内容都被视为注释。'
- en: '|'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Java Style | The Java style is identical in syntax to the C style comment,
    except that it starts with `/**` instead of `/*`. In addition, special tags can
    be added within a Java-style comment for documentation purposes. A program called
    `javadoc` will read in the source file, which uses these types of comments, and
    generate a series of HTML files documenting the program. See the *Using Javadocs*
    section for more detail. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| Java样式 | Java样式与C样式注释的语法相同，只是它以`/**`开头，而不是`/*`。此外，可以在Java样式注释中添加特殊标签以进行文档目的。一个名为`javadoc`的程序将读取使用这些类型注释的源文件，并生成一系列HTML文件来记录程序。有关更多详细信息，请参阅*使用Javadocs*部分。'
- en: '|'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Java naming conventions
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java命名约定
- en: 'Java uses a series of naming conventions to make the programs more readable.
    It is recommended that you always follow this naming convention. By doing so:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用一系列命名约定来使程序更易读。建议您始终遵循这些命名约定。通过这样做：
- en: You make your code more readable
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的代码更易读
- en: It supports the use of JavaBeans
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持JavaBeans的使用
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More detail on naming conventions can be found at [http://www.oracle.com/technetwork/java/codeconvtoc-136057.html](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 有关命名约定的更多细节，请访问[http://www.oracle.com/technetwork/java/codeconvtoc-136057.html](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html)。
- en: 'The Java naming conventions'' rules and examples are shown in the following
    table:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Java命名约定的规则和示例显示在以下表中：
- en: '| Element | Convention | Example |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 元素 | 约定 | 例子 |'
- en: '| --- | --- | --- |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Package | All letters in lowercase. | `com.company.customer` |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 所有字母都小写。 | `com.company.customer` |'
- en: '| Class | First letter of each word is capitalized. | `CustomerDriver` |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 每个单词的第一个字母大写。 | `CustomerDriver` |'
- en: '| Interface | First letter of each word is capitalized. | `Drawable` |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 接口 | 每个单词的第一个字母大写。 | `Drawable` |'
- en: '| Variable | First word is not capitalized but the subsequent words are capitalized
    | `grandTotal` |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 第一个单词不大写，但后续单词大写 | `grandTotal` |'
- en: '| Method | First word is not capitalized but subsequent words are capitalized.
    Methods should be verbs. | `computePay` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 第一个单词不大写，但后续单词大写。方法应该是动词。 | `computePay` |'
- en: '| Constant | Every letter is uppercase. | `LIMIT` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 常量 | 每个字母都大写。 | `LIMIT` |'
- en: Note
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Following the Java naming conventions is important in maintaining program readability
    and to support JavaBeans.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循Java命名约定对于保持程序可读性和支持JavaBeans很重要。
- en: Using Javadocs
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Javadocs
- en: 'The Javadoc tool produces a series of HTML files based on the source code and
    Javadoc tags embedded in the source code. This tool is also distributed with the
    JDK. While the following example is not an attempt to provide a complete treatment
    of Javadocs, it should give you a good idea of what Javadocs can do for you:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc工具基于源代码和源代码中嵌入的Javadoc标签生成一系列HTML文件。该工具也随JDK一起分发。虽然以下示例并不试图提供Javadocs的完整处理，但它应该能给你一个关于Javadocs能为你做什么的好主意：
- en: '[PRE17]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `javadoc` command, when used with this class, results in the generation
    of several HTML files. A part of the `index.html` file is shown in the following
    screenshot:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`javadoc`命令与此类一起使用时，会生成多个HTML文件。`index.html`文件的一部分如下截图所示：'
- en: '![Using Javadocs](img/7324_01_03.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![使用Javadocs](img/7324_01_03.jpg)'
- en: Note
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More information on the use and creation of Javadoc files can be found at [http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Javadoc文件的使用和创建的更多信息可以在[http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html)找到。
- en: Investigating the Java application development process
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查Java应用程序开发过程
- en: Java source code is compiled to intermediate bytecode. The bytecode is then
    interpreted at runtime on any platform that has a **Java Virtual Machine** (**JVM**).
    However, this statement is somewhat misleading as Java technology will often compile
    bytecode directly to machine code. There have been numerous Just-In-Time compiler
    improvements that speed up the execution of Java applications that often will
    run nearly as fast as, or sometimes even faster than, natively-compiled C or C++
    applications.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码被编译为中间字节码。然后在任何安装有**Java虚拟机**（**JVM**）的平台上运行时解释这些字节码。然而，这个说法有些误导，因为Java技术通常会直接将字节码编译为机器码。已经有了许多即时编译器的改进，加快了Java应用程序的执行速度，通常会运行得几乎和本地编译的C或C++应用程序一样快，有时甚至更快。
- en: Java source code is found in files that end with a `.java` extension. The Java
    compiler will compile the source code to a bytecode representation and store these
    bytecodes in a file with a `.class` extension.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码位于以`.java`扩展名结尾的文件中。Java编译器将源代码编译为字节码表示，并将这些字节码存储在以`.class`扩展名结尾的文件中。
- en: There are several **Integrated Development Environments** (**IDE**) used to
    support the development of Java applications. A Java application can also be developed
    from the command line using basic tools from the **Java Development Kit** (**JDK**).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种**集成开发环境**（**IDE**）用于支持Java应用程序的开发。也可以使用**Java开发工具包**（**JDK**）中的基本工具从命令行开发Java应用程序。
- en: A production Java application is normally developed on one platform and then
    deployed to another. The target platform needs to have a **Java Runtime Environment**
    (**JRE**) installed on it in order for the Java application to execute. There
    are several tools that assist in this deployment process. Typically, a Java application
    is compressed in a **Java Archive** (**JAR**) file and then deployed. A JAR file
    is simply a ZIP file with a manifest document embedded within the JAR file. The
    manifest document often details the content and the type of JAR file being created.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 生产Java应用程序通常在一个平台上开发，然后部署到另一个平台。目标平台需要安装**Java运行环境**（**JRE**）才能执行Java应用程序。有几种工具可以协助这个部署过程。通常，Java应用程序会被压缩成一个**Java存档**（**JAR**）文件，然后部署。JAR文件只是一个嵌入有清单文档的ZIP文件。清单文档通常详细说明了正在创建的JAR文件的内容和类型。
- en: Compiling a Java application
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译Java应用程序
- en: 'The general steps used to develop a Java application include:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 用于开发Java应用程序的一般步骤包括：
- en: Create the application using an editor
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用编辑器创建应用程序
- en: Compile it using the Java compiler (`javac`)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java编译器（`javac`）编译它
- en: Execute it using the Java interpreter (`java`)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java解释器（`java`）执行它
- en: Optionally debug the application as required using a Java debugger
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要使用Java调试器可选择地调试应用程序
- en: 'This process is summarized in the following diagram:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程总结在下图中：
- en: '![Compiling a Java application](img/7324_01_04.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![编译Java应用程序](img/7324_01_04.jpg)'
- en: Java source code files are compiled to bytecode files. These bytecode files
    have a **.class** extension. When a Java package is distributed, the source code
    files are not normally stored in the same location as the `.class` files.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Java源代码文件被编译为字节码文件。这些字节码文件具有**.class**扩展名。当Java包被分发时，源代码文件通常不会存储在与`.class`文件相同的位置。
- en: SDK file structure
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SDK文件结构
- en: The **Java Software Development Kit** (**SDK**) can be downloaded and used to
    create and execute many types of Java applications. The **Java Enterprise Edition**
    (**JEE**) is a different SDK and is used to develop enterprise applications typified
    by web-based applications. The SDK also known as the **Java 2 Enterprise Edition**
    (**J2EE**) and you may see it referenced as J2EE. Here, we will only deal with
    the Java SDK.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java软件开发工具包**（**SDK**）可下载并用于创建和执行许多类型的Java应用程序。**Java企业版**（**JEE**）是一个不同的SDK，用于开发以Web应用程序为特征的企业应用程序。该SDK也被称为**Java
    2企业版**（**J2EE**），你可能会看到它被引用为J2EE。在这里，我们只处理Java SDK。'
- en: 'While the actual structure of the SDK distribution will vary by release, the
    typical SDK consists of a series of directories, listed as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SDK分发的实际结构会因版本而异，但典型的SDK由一系列目录组成，如下所列：
- en: '`bin`: This contains the tools used for developing a Java application including
    the compiler and JVM'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这包含用于开发Java应用程序的工具，包括编译器和JVM'
- en: '`db`: This is the Apache Derby relational database'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`：这是Apache Derby关系数据库'
- en: '`demo`: This contains a series of demonstration applications'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demo`：这包含一系列演示应用程序'
- en: '`include`: This contains header files used to interact with C applications'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`：这包含用于与C应用程序交互的头文件'
- en: '`jre`: This is a JRE used by the JDK'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jre`：这是JDK使用的JRE'
- en: '`sample`: This contains sample code for various features of Java'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample`：这个目录包含Java各种特性的示例代码'
- en: The SDK may include the actual source code for the core classes. This is usually
    found in the `src.zip` file located under the `JAVA_HOME` root directory.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: SDK可能包括核心类的实际源代码。这通常可以在位于`JAVA_HOME`根目录下的`src.zip`文件中找到。
- en: IDE file structure
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE文件结构
- en: Each IDE has a preferred way of organizing the files that make up an application.
    These organization schemes are not always hard and fast but those presented here
    are the common ways of arranging the files.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 每个IDE都有一种首选的组织应用程序文件的方式。这些组织方案并不总是固定的，但这里介绍的是常见的文件排列方式。
- en: 'For example, a simple application in the Eclipse IDE consists of two project
    files and three sub-directories. These files and directories are listed as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Eclipse IDE中，一个简单的应用程序由两个项目文件和三个子目录组成。这些文件和目录列举如下：
- en: '`.classpath`: This is an XML file containing the classpath-related information'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.classpath`：这是包含与类路径相关信息的XML文件'
- en: '`.project`: This is an XML document describing the project'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.project`：这是描述项目的XML文档'
- en: '`.settings`: This is a directory containing the `org.eclipse.jdt.core.prefs`
    file which specifies compiler preferences'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.settings`：这是一个包含`org.eclipse.jdt.core.prefs`文件的目录，该文件指定了编译器的偏好设置。'
- en: '`bin`: This is used to contain the package file structure and the application''s
    class files'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：这个目录用于包含包文件结构和应用程序的类文件'
- en: '`src`: This is used to contain the package file structure and the application''s
    source files'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：这个目录用于包含包文件结构和应用程序的源文件'
- en: This organization scheme is used by the development tools. The tools often include
    editors, compilers, linkers, debuggers, and others. These languages frequently
    use a Make tool to determine which files need to be compiled or otherwise manipulated.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组织方案是由开发工具使用的。这些工具通常包括编辑器、编译器、链接器、调试器等。这些语言经常使用Make工具来确定需要编译或以其他方式处理的文件。
- en: Developing Java applications without an IDE
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在没有IDE的情况下开发Java应用程序
- en: In this section we will demonstrate how to compile and execute a Java application
    on a Windows platform using Java 7\. The approach is very similar to that used
    for other operating systems.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何在Windows平台上使用Java 7编译和执行Java应用程序。这种方法与其他操作系统的方法非常相似。
- en: 'Before we can compile and execute the sample program we need to:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编译和执行示例程序之前，我们需要：
- en: Install the JDK
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装JDK
- en: Create the appropriate file structure for the application
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序创建适当的文件结构
- en: Create the files to hold our classes
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于保存我们的类的文件
- en: The latest version of the JDK can be found at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    Download and install the version that meets your needs. Note the location of the
    installation, as we will use this information shortly.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: JDK的最新版本可以在[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)找到。下载并安装符合您需求的版本。注意安装位置，因为我们很快将会用到这些信息。
- en: As explained earlier, the Java classes must be located in a specific file structure
    as mirrored in its package name. Create a file structure somewhere in your filesystem
    that has a top-level directory called `com` under which is a directory called
    `company` and then under the `company` directory, a directory called `customer`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Java类必须位于特定的文件结构中，与其包名称相对应。在文件系统的某个地方创建一个文件结构，其中有一个名为`com`的顶级目录，该目录下有一个名为`company`的目录，然后在`company`目录下有一个名为`customer`的目录。
- en: In the `customer` directory create two files called `Customer.java` and `CustomerDriver.java`.
    Use the corresponding classes as found earlier in the *A simple Java application*
    section.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在`customer`目录中创建两个文件，分别命名为`Customer.java`和`CustomerDriver.java`。使用在*一个简单的Java应用程序*部分中找到的相应类。
- en: 'The JDK tools are found in the JDK directory. When the JDK is installed, the
    environmental variables are normally set up to allow the successful execution
    of the JDK tools. However, it is necessary to specify the location of these tools.
    This is accomplished using the `set` command. In the following command, we set
    the path environmental variable to reference `C:\Program Files\Java\jdk1.7.0_02\bin
    directory`, which was the most recent release at the time this chapter was written:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: JDK工具位于JDK目录中。当安装JDK时，通常会设置环境变量以允许成功执行JDK工具。然而，需要指定这些工具的位置。这可以通过`set`命令来实现。在下面的命令中，我们将`path`环境变量设置为引用`C:\Program
    Files\Java\jdk1.7.0_02\bin`目录，这是本章撰写时的最新版本：
- en: '[PRE18]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This command prefixes the path to the `bin` directory in front of any previously
    assigned paths. The `path` environmental variable is used by the operating system
    to look for the command that is executed at the command prompt. Without this information,
    the operating system is not aware of the location of the JDK commands.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令在之前分配的路径前面加上了`bin`目录的路径。`path`环境变量被操作系统用来查找在命令提示符下执行的命令。没有这些信息，操作系统将不知道JDK命令的位置。
- en: 'To compile the program using the JDK, navigate to the directory above the `com`
    directory. As the classes used as part of this application are part of the `com.company.customer`
    package we need to:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '要使用JDK编译程序，导航到`com`目录的上一级目录。由于作为该应用程序一部分的类属于`com.company.customer`包，我们需要： '
- en: Specify the path in the `javac` command
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`javac`命令中指定路径
- en: Execute the command from the directory above the `com` directory
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`com`目录的上一级目录执行该命令
- en: 'As there are two files that make up this application we need to compile both
    of them. This can be done using two separate commands as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用程序由两个文件组成，我们需要编译它们两个。可以使用以下两个单独的命令来完成：
- en: '[PRE19]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Or, it can be done using a single command and the asterisk wild card character
    as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用单个命令和星号通配符来完成：
- en: '[PRE20]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the compiler is a bytecode file with the name `CustomerDriver.class`.
    To execute the program, invoke the Java interpreter with your class file, as shown
    in the following command. The class extension is not included and its inclusion
    as part of the filename will result in an error:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器的输出是一个名为`CustomerDriver.class`的字节码文件。要执行程序，使用Java解释器和你的类文件，如下命令所示。类扩展名不包括在内，如果包含在文件名中会导致错误：
- en: '[PRE21]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of your program should be as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序的输出应该如下：
- en: '[PRE22]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Java environment
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java环境
- en: 'The Java environment is the operating system and file structure used to develop
    and execute Java applications. Earlier, we examined the structure of the JDK which
    are part of the Java environment. Associated with this environment are a series
    of environmental variables that are used from time-to-time to facilitate various
    operations. Here, we will examine a few of them in more detail:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Java环境是用于开发和执行Java应用程序的操作系统和文件结构。之前，我们已经检查了JDK的结构，这些都是Java环境的一部分。与这个环境相关的是一系列的环境变量，它们被用来在不同时间进行各种操作。在这里，我们将更详细地检查其中的一些：
- en: '`CLASSPATH`'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLASSPATH`'
- en: '`PATH`'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATH`'
- en: '`JAVA_VERSION`'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JAVA_VERSION`'
- en: '`JAVA_HOME`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JAVA_HOME`'
- en: '`OS_NAME`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OS_NAME`'
- en: '`OS_VERSION`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OS_VERSION`'
- en: '`OS_ARCH`'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OS_ARCH`'
- en: 'These variables are summarized in the following table:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量在下表中总结：
- en: '| Name | Purpose | Example |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 目的 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `CLASSPATH` | Specifies the root directory for classes. | `.;C:\Program Files
    (x86)\Java\jre7\lib\ext\QTJava.zip` |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `CLASSPATH` | 指定类的根目录。 | `.;C:\Program Files (x86)\Java\jre7\lib\ext\QTJava.zip`
    |'
- en: '| `PATH` | The location of the commands. |   |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `PATH` | 命令的位置。 |   |'
- en: '| `JAVA_VERSION` | The version of Java to use. | `<param name="java_version"
    value="1.5.0_11">` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `JAVA_VERSION` | 要使用的Java版本。 | `<param name="java_version" value="1.5.0_11">`
    |'
- en: '| `JAVA_HOME` | The location of the Java directory. | `C:\Program Files (x86)\Java\jre6\bin`
    |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `JAVA_HOME` | Java目录的位置。 | `C:\Program Files (x86)\Java\jre6\bin` |'
- en: '| `OS_NAME` | The name of the operating system. | Windows 7 |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| `OS_NAME` | 操作系统的名称。 | Windows 7 |'
- en: '| `OS_VERSION` | The version of the operating system | 6.1 |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| `OS_VERSION` | 操作系统的版本 | 6.1 |'
- en: '| `OS_ARCH` | The operating system architecture | AMD64 |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `OS_ARCH` | 操作系统架构 | AMD64 |'
- en: 'The `CLASSPATH` environmental variable is used to identify the root directory
    of the packages. It is set as follows:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLASSPATH`环境变量用于标识包的根目录。设置如下：'
- en: '[PRE23]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `CLASSPATH` variable only needs to be set for non-standard packages. The
    Java compiler will always implicitly append the system's class directories to
    `CLASSPATH`. The default `CLASSPATH` is the current directory and the system's
    class directories.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLASSPATH`变量只需要设置非标准包。Java编译器将始终隐式地将系统的类目录附加到`CLASSPATH`。默认的`CLASSPATH`是当前目录和系统的类目录。'
- en: 'There are many other environmental variables associated with an application.
    The following code sequence can be used to display a list of these variables:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用程序相关的还有许多其他环境变量。以下代码序列可用于显示这些变量的列表：
- en: '[PRE24]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A partial display of the output of this code sequence is as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码序列的部分输出如下：
- en: '[PRE25]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Annotations
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注解
- en: Annotations provide information about a program. This information does not reside
    in the program and does not affect its execution. Annotations are used to support
    tools such as the compiler and during the execution of the program. For example,
    the `@Override` annotation informs the compiler that a method is overriding a
    base class method. If the method does not actually override the base class method
    because it is misspelled, the compiler will generate an error.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 注解提供关于程序的信息。这些信息不驻留在程序中，也不会影响其执行。注解用于支持诸如编译器和程序执行期间的工具。例如，`@Override`注解通知编译器一个方法正在覆盖基类的方法。如果该方法实际上没有覆盖基类的方法，因为拼写错误，编译器将生成一个错误。
- en: Annotations are applied to elements of the application such as a class, method,
    or field. It begins with the at sign, `@`, is followed by the name of the annotation,
    and optionally a list of values enclosed in a set of parentheses.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 注解应用于应用程序的元素，如类、方法或字段。它以at符号`@`开头，后面跟着注解的名称，可选地跟着一组括号括起来的值的列表。
- en: 'Common compiler annotations are detailed in the following table:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的编译器注解在下表中详细说明：
- en: '| Annotation | Usage |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 用法 |'
- en: '| --- | --- |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `@Deprecated` | Used by the compiler to indicate that the element should
    not be used |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `@Deprecated` | 编译器用来指示不应该使用该元素 |'
- en: '| `@Override` | The method overrides the base class method |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| `@Override` | 该方法覆盖了基类的方法 |'
- en: '| `@SuppressWarnings` | Used to suppress specific compiler warnings |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `@SuppressWarnings` | 用于抑制特定的编译器警告 |'
- en: Annotations can be added to an application and used by the third-party tools
    for specific purposes. It is also possible to write your own annotations when
    needed.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 注解可以添加到应用程序中，并由第三方工具用于特定目的。在需要时也可以编写自己的注解。
- en: Note
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Annotations are useful in conveying information about an application to tools
    and the run-time environment
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 注解对于向工具和运行时环境传达关于应用程序的信息非常有用
- en: Java class libraries
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java类库
- en: 'Java includes a number of libraries of classes that support the development
    of applications. These include the following, among others:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: Java包括许多支持应用程序开发的类库。其中包括以下内容：
- en: '`java.lang`'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang`'
- en: '`java.io`'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.io`'
- en: '`java.net`'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.net`'
- en: '`java.util`'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util`'
- en: '`java.awt`'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.awt`'
- en: These libraries are organized in packages. Each package holds a set of classes.
    The structure of a package is reflected in its underlying file system. The `CLASSPATH`
    environmental variable holds the location of packages.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这些库是按包组织的。每个包包含一组类。包的结构反映在其底层文件系统中。`CLASSPATH`环境变量保存了包的位置。
- en: There are a core set of packages that are part of the JDK. These packages provide
    a crucial element in the success of Java by providing easy access to a standard
    set of capabilities that were otherwise not readily available with other languages.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组核心的包是JDK的一部分。这些包通过提供对一组标准功能的简单访问，为Java的成功提供了至关重要的元素，这些功能在其他语言中并不容易获得。
- en: 'The following table shows a list of some of the more commonly used packages:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了一些常用包的列表：
- en: '| Package | Usage |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 包 | 用法 |'
- en: '| --- | --- |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `java.lang` | This is the collection of the basic language types. It includes
    the root classes, `Object` and `Class`, and other items such as threads, exceptions,
    wrapper, and other fundamental classes. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `java.lang` | 这是基本语言类型的集合。它包括根类`Object`和`Class`，以及线程，异常，包装器和其他基本类等其他项目。 |'
- en: '| `java.io` | Includes streams and random access files. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `java.io` | 包括流和随机访问文件。 |'
- en: '| `java.net` | Supports sockets, telnet interfaces, and URLs. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `java.net` | 支持套接字，telnet接口和URL。 |'
- en: '| `java.util` | Supports container and utility classes such as `Dictionary`,
    `HashTable`, and `Stack`. Encoder and decoder techniques such as `Date` and `Time`
    can also be found in this library. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `java.util` | 支持容器和实用类，如`Dictionary`，`HashTable`和`Stack`。编码器和解码器技术，如`Date`和`Time`，也可以在此库中找到。
    |'
- en: '| `java.awt` | Contains the **Abstract Windowing Toolkit** (**AWT**) that contains
    classes and methods that support a **Graphical User Interface** (**GUI**). It
    includes classes for events, colors, fonts, and controls. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `java.awt` | 包含**抽象窗口工具包**（**AWT**），其中包含支持**图形用户界面**（**GUI**）的类和方法。它包括用于事件，颜色，字体和控件的类。
    |'
- en: Summary
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we examined the essential aspects of Java and a simple Java
    console application. From a certification standpoint we looked at the structure
    of a class and a Java application that uses the `main` method.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了Java的基本方面和一个简单的Java控制台应用程序。从认证的角度来看，我们研究了一个使用`main`方法的类和Java应用程序的结构。
- en: We also introduced a number of additional topics that will be covered in more
    detail in later chapters. This includes the creation of objects and their manipulation,
    the use of strings and the `StringBuilder` class, instance and static members
    of a class, and the use of signatures in the overloading and overriding of a method.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一些将在后续章节中更详细讨论的其他主题。这包括对象的创建和操作，字符串和`StringBuilder`类的使用，类的实例和静态成员，以及在方法的重载和重写中使用签名。
- en: With this foundation we are ready to move on to [Chapter 2](ch02.html "Chapter 2. Java
    Data Types and Their Usage"), *Java Data Types and Their Usage*, where we will
    examine the nature of variables and how they can be used.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个基础，我们准备继续[第2章](ch02.html "第2章。Java数据类型及其用法")，*Java数据类型及其用法*，在那里我们将研究变量的性质以及它们的用法。
- en: Certification objectives covered
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证目标涵盖
- en: 'In this chapter we introduced a number of certification topics that will be
    discussed in more detail in subsequent chapters. Here we covered the following
    topics in depth:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些将在后续章节中更详细讨论的认证主题。在这里，我们深入讨论了以下主题：
- en: Define the structure of a Java class (in the *Exploring the structure of a class*
    section)
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义Java类的结构（在*探索类的结构*部分）
- en: Create an executable Java application with a main method (in the *Exploring
    the structure of a Java console program* section)
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有主方法的可执行的Java应用程序（在*探索Java控制台程序结构*部分）
- en: Test your knowledge
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: What will be printed out if the following code is run with the `java SomeClass
    hello world` command?
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果以下代码使用`java SomeClass hello world`命令运行，会打印出什么？
- en: '[PRE26]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: a. `world`
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: a. `world`
- en: b. `hello`
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: b. `hello`
- en: c. `hello` `world`
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: c. `hello` `world`
- en: d. `ArrayIndexOutOfBoundsException` is thrown
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: d. 抛出`ArrayIndexOutOfBoundsException`
- en: 'Consider the following code sequence:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑以下代码序列：
- en: '[PRE27]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Which of the following statements will compile without syntax or runtime errors
    if they replace the comment line?
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们替换注释行，以下哪个语句将在不会出现语法或运行时错误的情况下编译？
- en: a. `sc.i = 5;`
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: a. `sc.i = 5;`
- en: b. `int j = sc.i;`
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: b. `int j = sc.i;`
- en: c. `sc.i = 5.0;`
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: c. `sc.i = 5.0;`
- en: d. `System.out.println(sc.i);`
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: d. `System.out.println(sc.i);`
