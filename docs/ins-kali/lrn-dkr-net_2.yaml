- en: Chapter 2. Docker Networking Internals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。Docker网络内部
- en: This chapter discusses the semantics and syntax of Docker networking in detail,
    exposing strengths and weaknesses of the current Docker network paradigm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细讨论了Docker网络的语义和语法，揭示了当前Docker网络范式的优势和劣势。
- en: 'It covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 它涵盖以下主题：
- en: Configuring the IP stack for Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Docker配置IP堆栈
- en: IPv4 support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv4支持
- en: Issues with IPv4 address management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv4地址管理问题
- en: IPv6 support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPv6支持
- en: Configuring DNS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置DNS
- en: DNS basics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS基础知识
- en: Multicast DNS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多播DNS
- en: Configuring the Docker bridge
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Docker桥
- en: Overlay networks and underlay networks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖网络和底层网络
- en: What are they?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是什么？
- en: How does Docker use them?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker如何使用它们？
- en: What are some of their advantages?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们有哪些优势？
- en: Configuring the IP stack for Docker
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Docker配置IP堆栈
- en: Docker uses the IP stack to interact with the outside world using TCP or UDP.
    It supports the IPv4 and IPv6 addressing infrastructures, which are explained
    in the following subsections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使用IP堆栈通过TCP或UDP与外部世界进行交互。它支持IPv4和IPv6寻址基础设施，这些将在以下小节中解释。
- en: IPv4 support
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv4支持
- en: 'By default, Docker provides IPv4 addresses to each container, which are attached
    to the default `docker0` bridge. The IP address range can be specified while starting
    the Docker daemon using the `--fixed-cidr` flag, as shown in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker为每个容器提供IPv4地址，这些地址附加到默认的`docker0`桥上。可以在启动Docker守护程序时使用`--fixed-cidr`标志指定IP地址范围，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We will discuss more about this in the *Configuring the Docker bridge* section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*配置Docker桥*部分中更多讨论这个问题。
- en: 'The Docker daemon can be listed on an IPv4 TCP endpoint in addition to a Unix
    socket:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker守护程序可以在IPv4 TCP端点上列出，还可以在Unix套接字上列出：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: IPv6 support
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPv6支持
- en: IPv4 and IPv6 can run together; this is called a **dual stack**. This dual stack
    support is enabled by running the Docker daemon with the `--ipv6` flag. Docker
    will set up the `docker0` bridge with the IPv6 link-local address `fe80::1`. All
    packets shared between containers flow through this bridge.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4和IPv6可以一起运行；这被称为**双栈**。通过使用`--ipv6`标志运行Docker守护程序来启用此双栈支持。Docker将使用IPv6链路本地地址`fe80::1`设置`docker0`桥。所有容器之间共享的数据包都通过此桥流动。
- en: To assign globally routable IPv6 addresses to your containers, you have to specify
    an IPv6 subnet to pick the addresses from.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的容器分配全局可路由的IPv6地址，必须指定一个IPv6子网以选择地址。
- en: 'The following commands set the IPv6 subnet via the `--fixed-cidr-v6` parameter
    while starting Docker and also add a new route to the routing table:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令通过`--fixed-cidr-v6`参数在启动Docker时设置IPv6子网，并向路由表添加新路由：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following figure shows a Docker bridge configured with an IPv6 address
    range:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了配置了IPv6地址范围的Docker桥：
- en: '![IPv6 support](../images/00011.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![IPv6支持](../images/00011.jpeg)'
- en: 'If you check the IP address range using `ifconfig` inside a container, you
    will notice that the appropriate subnet has been assigned to the `eth0` interface,
    as shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在容器内部使用`ifconfig`检查IP地址范围，您会注意到适当的子网已分配给`eth0`接口，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All the traffic to the `1553:ba3:2::/64` subnet will be routed via the `docker0`
    interface.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有流向`1553:ba3:2::/64`子网的流量将通过`docker0`接口路由。
- en: The preceding container is assigned using `fe80::42:acff:fe11:1/64` as the link-local
    address and `1553:ba3:2::242:ac11:1/64` as the global routable IPv6 address.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的容器使用`fe80::42:acff:fe11:1/64`作为链路本地地址和`1553:ba3:2::242:ac11:1/64`作为全局可路由的IPv6地址。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Link-local and loopback addresses have link-local scope, which means they are
    to be used in a directly attached network (link). All other addresses have global
    (or universal) scope, which means they are globally routable and can be used to
    connect to addresses with global scope anywhere.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 链路本地和环回地址具有链路本地范围，这意味着它们应该在直接连接的网络（链路）中使用。所有其他地址具有全局（或通用）范围，这意味着它们在全球范围内可路由，并且可以用于连接到任何具有全局范围的地址。
- en: Configuring a DNS server
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置DNS服务器
- en: Docker provides hostname and DNS configurations for each container without us
    having to build a custom image. It overlays the `/etc` folder inside the container
    with virtual files, in which it can write new information.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Docker为每个容器提供主机名和DNS配置，而无需我们构建自定义镜像。它在容器内部覆盖`/etc`文件夹，其中可以写入新信息。
- en: This can be seen by running the `mount` command inside the container. Containers
    receive the same `resolv.conf` file as that of the host machine when they are
    created initially. If a host's `resolv.conf` file is modified, this will be reflected
    in the container's `/resolv.conf` file only when the container is restarted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在容器内运行`mount`命令可以看到这一点。容器在初始创建时会接收与主机机器相同的`resolv.conf`文件。如果主机的`resolv.conf`文件被修改，只有当容器重新启动时，这将反映在容器的`/resolv.conf`文件中。
- en: 'In Docker, you can set DNS options in two ways:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker中，您可以通过两种方式设置DNS选项：
- en: Using `docker run --dns=<ip-address>`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker run --dns=<ip-address>`
- en: Adding `DOCKER_OPTS="--dns ip-address"` to the Docker daemon file
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`DOCKER_OPTS="--dns ip-address"`添加到Docker守护程序文件中
- en: You can also specify the search domain using `--dns-search=<DOMAIN>`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`--dns-search=<DOMAIN>`指定搜索域。
- en: 'The following figure shows a **nameserver** being configured in a container
    using the `DOCKER_OPTS` setting in the Docker daemon file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在Docker守护程序文件中使用`DOCKER_OPTS`设置在容器中配置**nameserver**：
- en: '![Configuring a DNS server](../images/00012.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![配置DNS服务器](../images/00012.jpeg)'
- en: 'The main DNS files are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 主DNS文件如下：
- en: '`/etc/hostname`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/hostname`'
- en: '`/etc/resolv.conf`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/resolv.conf`'
- en: '`/etc/hosts`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/hosts`'
- en: 'The following is the command to add a DNS server:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是添加DNS服务器的命令：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add hostnames using the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令添加主机名：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Communication between containers and external networks
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器与外部网络之间的通信
- en: Packets can only pass between containers if the `ip_forward` parameter is set
    to `1`. Usually, you will simply leave the Docker server at its default setting,
    `--ip-forward=true`, and Docker will set `ip_forward` to `1` for you when the
    server starts up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当`ip_forward`参数设置为`1`时，数据包才能在容器之间传递。通常，您将简单地将Docker服务器保留在其默认设置`--ip-forward=true`，并且当服务器启动时，Docker会为您将`ip_forward`设置为`1`。
- en: 'To check the settings or to turn IP forwarding on manually, use these commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查设置或手动打开IP转发，请使用以下命令：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By enabling `ip_forward`, users can make communication possible between containers
    and the external world; it will also be required for inter-container communication
    if you are in a multiple-bridge setup. The following figure shows how `ip_forward
    = false` forwards all the packets to/from the container from/to the external network:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用`ip_forward`，用户可以使容器与外部世界之间的通信成为可能；如果您处于多桥设置中，这也将需要用于容器间通信。下图显示了`ip_forward
    = false`如何将所有数据包转发到/从容器到/从外部网络：
- en: '![Communication between containers and external networks](../images/00013.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![容器与外部网络之间的通信](../images/00013.jpeg)'
- en: Docker will not delete or modify any pre-existing rules from the Docker filter
    chain. This allows users to create rules to restrict access to containers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Docker不会删除或修改Docker过滤链中的任何现有规则。这允许用户创建规则以限制对容器的访问。
- en: Docker uses the `docker0` bridge for packet flow between all the containers
    on a single host. It adds a rule to forward the chain using IPTables in order
    for the packets to flow between two containers. Setting `--icc=false` will drop
    all the packets.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使用`docker0`桥来在单个主机上的所有容器之间进行数据包流动。它添加了一个规则，使用IPTables转发链，以便数据包在两个容器之间流动。设置`--icc=false`将丢弃所有数据包。
- en: 'When the Docker daemon is configured with both `--icc=false` and `--iptables=true`
    and `docker run` is invoked with the `--link` option, the Docker server will insert
    a pair of IPTables accept rules for new containers to connect to the ports exposed
    by the other containers, which will be the ports that have been mentioned in the
    exposed lines of its Dockerfile. The following figure shows how `ip_forward =
    false` drops all the packets to/from the container from/to the external network:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当Docker守护程序配置为`--icc=false`和`--iptables=true`，并且使用`--link`选项调用`docker run`时，Docker服务器将为新容器插入一对IPTables接受规则，以便连接到其他容器暴露的端口，这些端口是在其Dockerfile的暴露行中提到的端口。以下图显示了`ip_forward
    = false`如何丢弃所有来自/到达外部网络的容器的数据包：
- en: '![Communication between containers and external networks](../images/00014.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![容器与外部网络之间的通信](../images/00014.jpeg)'
- en: By default, Docker's `forward` rule permits all external IPs. To allow only
    a specific IP or network to access the containers, insert a negated rule at the
    top of the Docker filter chain.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker的`forward`规则允许所有外部IP。要允许只有特定IP或网络访问这些容器，插入一个否定规则到Docker过滤链的顶部。
- en: 'For example, using the following command, you can restrict external access
    such that only the source IP `10.10.10.10` can access the containers:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用以下命令，您可以限制外部访问，只有源IP`10.10.10.10`可以访问这些容器：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Restricting SSH access from one container to another
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制一个容器到另一个容器的SSH访问
- en: 'Following these steps to restrict SSH access from one container to another:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤限制一个容器到另一个容器的SSH访问：
- en: Create two containers, `c1` and `c2.`
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个容器，`c1`和`c2`。
- en: 'For `c1`, use the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`c1`，使用以下命令：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output generated is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的输出如下：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For `c2`, use the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`c2`，使用以下命令：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the output generated:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的输出如下：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can test connectivity between the containers using the IP address we''ve
    just discovered. Let''s see this now using the `ping` tool:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用刚刚发现的IP地址测试容器之间的连接。现在让我们使用`ping`工具来看一下：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Install `openssh-server` on both the containers:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个容器上安装`openssh-server`：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Enable iptables on the host machine:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主机机器上启用iptables：
- en: Initially, you will be able to SSH from one container to another.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，您可以从一个容器SSH到另一个容器。
- en: Stop the Docker service and add `DOCKER_OPTS="--icc=false --iptables=true"`
    to the default Dockerfile of the host machine. This option will enable the iptables
    firewall and drop all ports between the containers.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止Docker服务，并在主机机器的默认Dockerfile中添加`DOCKER_OPTS="--icc=false --iptables=true"`。此选项将启用iptables防火墙，并且丢弃容器之间的所有端口。
- en: 'By default, `iptables` is not enabled on the host. Use the following command
    to enable it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，主机上未启用`iptables`。使用以下命令启用它：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Docker Upstart and SysVinit configuration file. Customize the location of the
    Docker binary (especially for development testing):'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Upstart和SysVinit配置文件。自定义Docker二进制文件的位置（特别是用于开发测试）：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use `DOCKER_OPTS` to modify the daemon''s startup options:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DOCKER_OPTS`修改守护程序的启动选项：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Restart the Docker service:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Docker服务：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inspect `iptables`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`iptables`：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `DROP` rule has been added to iptables on the host machine, which drops
    a connection between containers. Now you will be unable to SSH between the containers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在主机上添加了一个`DROP`规则到iptables，它会丢弃容器之间的连接。现在您将无法在容器之间进行SSH。
- en: 'We can communicate with or connect containers using the `--link` parameter,
    with the help of following steps:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`--link`参数进行容器之间的通信或连接，以下是使用的步骤：
- en: 'Create the first container, which will act as the server, `sshserver`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第一个充当服务器的容器`sshserver`：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Execute the `iptables` command, and you will find a Docker chain rule added:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`iptables`命令，您会发现添加了一个Docker链规则：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the second container, which acts like a client, `sshclient`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个充当客户端的容器`sshclient`：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can see that there are more rules added to the Docker chain rule:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到Docker链规则中添加了更多规则：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following image explains communication between the containers using the
    `--link` flag:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片解释了使用`--link`标志之间容器之间的通信：
- en: '![Restricting SSH access from one container to another](../images/00015.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![限制一个容器到另一个容器的SSH访问](../images/00015.jpeg)'
- en: 'You can inspect your linked container with the `docker inspect` command:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`docker inspect`命令检查已连接的容器：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now you can successfully ssh into sshserver with its IP.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以使用其IP成功ssh到sshserver。
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using the `--link` parameter, Docker creates a secure channel between the containers
    that doesn't need to expose any ports externally on the containers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--link`参数，Docker在容器之间创建一个安全通道，不需要在容器上外部公开任何端口。
- en: Configuring the Docker bridge
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Docker桥
- en: 'The Docker server creates a bridge called `docker0` by default inside the Linux
    kernel, and it can pass packets back and forth between other physical or virtual
    network interfaces so that they behave as a single Ethernet network . Run the
    following command to find out the list of interfaces in a VM and the IP addresses
    they are connected to:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Docker服务器默认在Linux内核中创建一个名为`docker0`的桥，并且可以在其他物理或虚拟网络接口之间来回传递数据包，使它们表现为单个以太网网络。运行以下命令以查找VM中接口的列表以及它们连接到的IP地址：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Once you have one or more containers up and running, you can confirm that Docker
    has properly connected them to the `docker0` bridge by running the `brctl` command
    on the host machine and looking at the `interfaces` column of the output.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有一个或多个容器正在运行，您可以通过在主机上运行`brctl`命令并查看输出的`interfaces`列来确认Docker已将它们正确连接到`docker0`桥。
- en: 'Before configuring the `docker0` bridge, install the bridge utilities:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置`docker0`桥之前，安装桥接实用程序：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here is a host with two different containers connected:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个连接了两个不同容器的主机：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Docker uses the `docker0` bridge settings whenever a container is created.
    It assigns a new IP address from the range available on the bridge whenever a
    new container is created, as can be seen here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在创建容器时使用`docker0`桥接设置。每当创建新容器时，它会从桥上可用的范围中分配一个新的IP地址，如下所示：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By default, Docker provides a virtual network called `docker0`, which has the
    IP address `172.17.42.1`. Docker containers have IP addresses in the range of
    `172.17.0.0/16`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker提供名为`docker0`的虚拟网络，其IP地址为`172.17.42.1`。Docker容器的IP地址在`172.17.0.0/16`范围内。
- en: To change the default settings in Docker, modify the file `/etc/default/docker`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改Docker中的默认设置，请修改文件`/etc/default/docker`。
- en: 'Changing the default bridge from `docker0` to `br0` can be done like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认桥从`docker0`更改为`br0`可以这样做：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following command displays the new bridge name and the IP address range
    of the Docker service:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了Docker服务的新桥名称和IP地址范围：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Overlay networks and underlay networks
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖网络和底层网络
- en: An overlay is a virtual network that is built on top of underlying network infrastructure
    (the underlay). The purpose is to implement a network service that is not available
    in the physical network.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖是建立在底层网络基础设施（底层）之上的虚拟网络。其目的是实现在物理网络中不可用的网络服务。
- en: Network overlay dramatically increases the number of virtual subnets that can
    be created on top of the physical network, which in turn supports multi-tenancy
    and virtualization.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 网络覆盖大大增加了可以在物理网络之上创建的虚拟子网的数量，从而支持多租户和虚拟化。
- en: Every container in Docker is assigned an IP address, which is used for communication
    with other containers. If a container has to communicate with the external network,
    you set up networking in the host system and expose or map the port from the container
    to the host machine. With this, applications running inside containers will not
    be able to advertise their external IP and ports, as the information will not
    be available to them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Docker中的每个容器都被分配一个IP地址，用于与其他容器通信。如果容器需要与外部网络通信，您可以在主机系统中设置网络，并将容器的端口暴露或映射到主机上。通过这种方式，容器内运行的应用程序将无法广告其外部IP和端口，因为这些信息对它们不可用。
- en: The solution is to somehow assign unique IPs to each Docker container across
    all hosts and have some networking product that routes traffic between hosts.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是在所有主机上为每个Docker容器分配唯一的IP，并且有一些网络产品来路由主机之间的流量。
- en: 'There are different projects to deal with Docker networking, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的项目来处理Docker网络，如下所示：
- en: Flannel
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flannel
- en: Weave
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weave
- en: Open vSwitch
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Open vSwitch
- en: 'Flannel provides a solution by giving each container an IP that can be used
    for container-to-container communication. Using packet encapsulation, it creates
    a virtual overlay network over the host network. By default, Flannel provides
    a `/24` subnet to hosts, from which the Docker daemon allocates IPs to containers.
    The following figure shows the communication between containers using Flannel:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel通过为每个容器分配一个IP来提供解决方案，用于容器之间的通信。它使用数据包封装，在主机网络上创建一个虚拟覆盖网络。默认情况下，Flannel为主机提供一个`/24`子网，Docker守护程序从中为容器分配IP。以下图显示了使用Flannel进行容器之间通信：
- en: '![Overlay networks and underlay networks](../images/00016.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖网络和底层网络](../images/00016.jpeg)'
- en: Flannel runs an agent, **flanneld**, on each host and is responsible for allocating
    a subnet lease out of a preconfigured address space. Flannel uses etcd to store
    the network configuration, allocated subnets, and auxiliary data (such as the
    host's IP).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel在每个主机上运行一个代理**flanneld**，负责从预配置的地址空间中分配子网租约。Flannel使用etcd存储网络配置、分配的子网和辅助数据（如主机的IP）。
- en: Flannel uses the universal TUN/TAP device and creates an overlay network using
    UDP to encapsulate IP packets. Subnet allocation is done with the help of etcd,
    which maintains the overlay subnet-to-host mappings.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Flannel使用通用的TUN/TAP设备，并使用UDP创建覆盖网络来封装IP数据包。子网分配是通过etcd的帮助完成的，它维护覆盖子网到主机的映射。
- en: 'Weave creates a virtual network that connects Docker containers deployed across
    hosts/VMs and enables their automatic discovery. The following figure shows a
    Weave network:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Weave创建了一个虚拟网络，连接了部署在主机/虚拟机上的Docker容器，并实现它们的自动发现。以下图显示了Weave网络：
- en: '![Overlay networks and underlay networks](../images/00017.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖网络和底层网络](../images/00017.jpeg)'
- en: Weave can traverse firewalls and operate in partially connected networks. Traffic
    can be optionally encrypted, allowing hosts/VMs to be connected across an untrusted
    network.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Weave可以穿越防火墙，在部分连接的网络中运行。流量可以选择加密，允许主机/虚拟机在不受信任的网络中连接。
- en: Weave augments Docker's existing (single host) networking capabilities, such
    as the `docker0` bridge, so these can continue to be used by containers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Weave增强了Docker现有（单个主机）的网络功能，比如`docker0`桥，因此这些功能可以继续被容器使用。
- en: Open vSwitch is an open source OpenFlow-capable virtual switch that is typically
    used with hypervisors to interconnect virtual machines within a host and between
    different hosts across networks. Overlay networks need to create a virtual datapath
    using supported tunneling encapsulations, such as VXLAN and GRE.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Open vSwitch是一个开源的支持OpenFlow的虚拟交换机，通常与虚拟化程序一起使用，在主机内部和跨网络的不同主机之间连接虚拟机。覆盖网络需要使用支持的隧道封装来创建虚拟数据路径，例如VXLAN和GRE。
- en: The overlay datapath is provisioned between tunnel endpoints residing in the
    Docker host, which gives the appearance of all hosts within a given provider segment
    being directly connected to one another.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖数据路径是在Docker主机中的隧道端点之间进行配置的，这使得在给定提供者段内的所有主机看起来直接连接在一起。
- en: 'As a new container comes online, the prefix is updated in the routing protocol,
    announcing its location via a tunnel endpoint. As the other Docker hosts receive
    the updates, the forwarding rule is installed into the OVS for the tunnel endpoint
    that the host resides on. When the host is de-provisioned, a similar process occurs
    and tunnel endpoint Docker hosts remove the forwarding entry for the de-provisioned
    container. The following figure shows the communication between containers running
    on multiple hosts through OVS-based VXLAN tunnels:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当新容器上线时，前缀会在路由协议中更新，通过隧道端点宣布其位置。当其他Docker主机接收到更新时，转发规则会被安装到OVS中，用于主机所在的隧道端点。当主机取消配置时，类似的过程会发生，隧道端点Docker主机会移除取消配置容器的转发条目。下图显示了通过基于OVS的VXLAN隧道在多个主机上运行的容器之间的通信：
- en: '![Overlay networks and underlay networks](../images/00018.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![覆盖网络和底层网络](../images/00018.jpeg)'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed Docker's internal networking architecture. We
    learned about IPv4, IPv6, and DNS configuration in Docker. Later in the chapter,
    we covered the Docker bridge and communication between containers within a single
    host and in multiple hosts.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Docker的内部网络架构。我们了解了Docker中的IPv4、IPv6和DNS配置。在本章的后面，我们涵盖了Docker桥接和单个主机内以及多个主机之间容器之间的通信。
- en: We also discussed overlay tunneling and different methods that are implemented
    in Docker networking, such as OVS, Flannel, and Weave.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了在Docker网络中实施的覆盖隧道和不同的方法，例如OVS、Flannel和Weave。
- en: In the next chapter, we will learn hands-on Docker networking, clubbed with
    various frameworks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Docker网络的实际操作，结合各种框架。
