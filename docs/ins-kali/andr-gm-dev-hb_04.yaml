- en: Chapter 4. Android Development Style and Standards in the Industry
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。行业中的Android开发风格和标准
- en: There is no written rule or direction to write code in Android, other than the
    syntactical grammar. However, most developers across the globe follow a few fundamental
    styles and standards for writing Android code. Android is based on Java, so most
    of the stylization follows Java standards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中没有书面规则或指导来编写代码，除了语法语法。然而，全球大多数开发人员都遵循一些基本的编写Android代码的风格和标准。Android基于Java，因此大多数样式遵循Java标准。
- en: When it comes to Android game development, there are a few design styles that
    should be followed. They do not cover game design, rather more technical design.
    These kinds of styles and standards indicate a proper project structure, class
    structure, and folder/file management.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android游戏开发方面，应遵循一些设计风格。它们不涵盖游戏设计，而更多是技术设计。这些样式和标准指示了适当的项目结构，类结构和文件夹/文件管理。
- en: Typical game design also involves following some rules while working on the
    Android platform. A few styles are being followed in the industry in terms of
    game design.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的游戏设计还涉及在Android平台上工作时遵循一些规则。在行业中，游戏设计方面遵循了一些风格。
- en: 'In this chapter, we will have a look at these styles and standards through
    the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题查看这些风格和标准：
- en: The Android programming structure
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android编程结构
- en: Game programming specifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏编程规范
- en: Technical design standards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术设计标准
- en: Game design standards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏设计标准
- en: Other style and standards
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他风格和标准
- en: Different styles for different development engines
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的开发引擎有不同的风格
- en: Industry best practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行业最佳实践
- en: The Android programming structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android编程结构
- en: Android style or recommendation is not a definite programming rule. However,
    a good programming practice always includes a set of rules. To code in Android,
    the code structure follows the Android base structure and hierarchy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Android风格或建议并不是明确的编程规则。然而，良好的编程实践总是包括一套规则。在Android中编码，代码结构遵循Android基本结构和层次结构。
- en: Android typically follows the standards and style of Java. So, the Android programming
    structure is basically Java structure, which follows the OOP style.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Android通常遵循Java的标准和风格。因此，Android编程结构基本上是Java结构，遵循面向对象的风格。
- en: Class formation
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类形成
- en: 'Java class formats should be consistent and follow the Javadoc rule; a standard
    structure should follow this sequence:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Java类格式应保持一致，并遵循Javadoc规则；标准结构应遵循以下顺序：
- en: Copyright information
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 版权信息
- en: License information
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许可信息
- en: Package declaration
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包声明
- en: Library imports
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 库导入
- en: Class description and purpose
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类描述和目的
- en: Class definition
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类定义
- en: Global variables
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全局变量
- en: Constructor
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造函数
- en: Methods
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法
- en: 'This is the copyright and license information format:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是版权和许可信息格式：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the class and method description format:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类和方法描述格式：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Call hierarchy
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用层次结构
- en: 'Like the coding style, there is no defined call hierarchy. However, in Android
    gaming, most developers follow a basic approach. In this approach, there are mainly
    three kinds of classes in the project structure:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与编码风格一样，没有定义的调用层次结构。然而，在Android游戏中，大多数开发人员遵循基本方法。在这种方法中，项目结构主要有三种类：
- en: Managers and controllers
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理器和控制器
- en: Associates
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关联
- en: Utility classes
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用类
- en: A game requires the managers and controllers to implicate game rules and regulations.
    It is also used to control the behavior of game elements and states. Most games
    consist of multiple sections or screens, for example, menu, level selection, game
    play, and so on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏需要管理器和控制器来实施游戏规则和法规。它还用于控制游戏元素和状态的行为。大多数游戏包括多个部分或屏幕，例如菜单，级别选择，游戏玩法等。
- en: 'These sections can be termed as states, and the elements used inside these
    are called associates. Associates may be separate classes by themselves. Utility
    classes basically support development by providing predefined functionality, such
    as in-game sound implementation, record store management, common utilities, network
    connectivity, and so on:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分可以称为状态，其中使用的元素称为关联。关联可能是独立的类。实用类基本上通过提供预定义功能来支持开发，例如游戏声音实现，记录存储管理，常用工具，网络连接等：
- en: '![Call hierarchy](img/B05069_04_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: ！[调用层次结构]（img/B05069_04_01.jpg）
- en: Call hierarchy
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调用层次结构
- en: Inside the game loop, the main Android game thread loops hand over control to
    the main game manager. The main game manager is responsible for passing on the
    thread and rendering control to the required state manager. The main game manager
    is also responsible for the initialization and destruction of state managers,
    depending on the current thread. Moreover, the main game manager is active throughout
    the game cycle and manages the main game activity as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏循环中，主Android游戏线程循环将控制权交给主游戏管理器。主游戏管理器负责将线程和渲染控制传递给所需的状态管理器。主游戏管理器还负责根据当前线程的初始化和销毁状态管理器。此外，主游戏管理器在整个游戏周期内都是活动的，并管理主游戏活动。
- en: State managers are responsible for managing a state (main menu, level selection,
    in-gameplay, and so on) and all the required associate classes. State managers
    pass the call to the respective associates to carry out a specific task.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 状态管理器负责管理状态（主菜单，级别选择，游戏中等）和所有所需的关联类。状态管理器将调用传递给相应的关联类以执行特定任务。
- en: Utility classes are accessible from any layer in the hierarchy, depending on
    the requirements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实用类可以从层次结构中的任何层访问，具体取决于要求。
- en: This is a generic architecture that is not mandatory. Many developers design
    the call hierarchy differently. Everything is good, and the game flow is also
    running properly without sacrificing the class/data security.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通用的架构，不是强制性的。许多开发人员以不同的方式设计调用层次结构。一切都很好，游戏流程也在不牺牲类/数据安全的情况下正常运行。
- en: Game programming specifications
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏编程规范
- en: Game programmers are not very different from any other software programmer.
    However, game programming requires stronger logical skill than software programming.
    The sense of game design is also different.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏程序员与其他软件程序员并没有太大的不同。然而，游戏编程需要比软件编程更强的逻辑能力。游戏设计感也是不同的。
- en: A game is an interactive entertainment system. A software or an application
    is meant to reduce a human calculative real-time task. So, it is clear that a
    game serves a very different purpose than a software or an application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏是一个互动娱乐系统。软件或应用程序旨在减少人类的实时计算任务。因此，很明显游戏的目的与软件或应用程序非常不同。
- en: This is why game programming has to follow a few specifications and protocols.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么游戏编程必须遵循一些规范和协议。
- en: 'Game programming can be divided into these following categories:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏编程可以分为以下几个类别：
- en: Gameplay programming
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏性编程
- en: Graphics programming
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形编程
- en: Technical programming
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术编程
- en: Gameplay programming
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏性编程
- en: This is the most relevant programming for the gaming division. Gameplay programming
    requires a strong logical, mathematical, and analytical skill. A sense of game
    design is also required. Gameplay programming includes AI, user control, physics,
    display control, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是游戏部门最相关的编程。游戏性编程需要强大的逻辑、数学和分析能力。还需要一定的游戏设计感。游戏性编程包括人工智能、用户控制、物理、显示控制等等。
- en: Gameplay programmers are the ones who deal with the most responsible designers
    for prototyping the game.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏程序员是与最负责任的设计师打交道的人，用于原型游戏。
- en: Graphics programming
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形编程
- en: All the visual effects and impacts are made by graphic programmers. They are
    responsible for the visual quality of the game. There is a vast scope to manipulate
    graphic assets while the game is running.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的视觉效果和影响都是由图形程序员制作的。他们负责游戏的视觉质量。在游戏运行时，有很大的空间来操纵图形资产。
- en: Graphics programming is all about getting the maximum from the GPU. Nowadays,
    most games are graphics heavy. The latest devices have separate, powerful GPUs
    to support heavy graphics.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图形编程就是要充分利用GPU。如今，大多数游戏都是图形密集型的。最新的设备有独立、强大的GPU来支持高负荷的图形。
- en: Modern-age games represent an excellent quality of graphical display. All new
    3D real-time lighting, particle system effect, visual motion effect, and so on
    entirely depend on the graphical programmer. The challenge is to increase the
    visual quality without affecting the game performance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现代游戏展现出优质的图形显示。所有新的3D实时光照、粒子系统效果、视觉动态效果等完全依赖于图形程序员。挑战在于提高视觉质量而不影响游戏性能。
- en: Most of the time, game performance drops significantly due to heavy art asset
    processing, which is never a desired situation. Shaders or graphics programmers
    have to balance quality and performance.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分时间，游戏性能会因为大量艺术资产处理而显著下降，这绝不是期望的情况。着色器或图形程序员必须在质量和性能之间取得平衡。
- en: This is mostly effective when games are ported across different platforms. As
    we have discussed earlier, a range of hardware platforms with a wide range of
    hardware specifications run on Android. Separate shaders and assets are required
    for this kind of porting. A shader program instructs the graphic processor to
    render each pixel in a particular way.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏在不同平台上移植时，这通常是有效的。正如我们之前讨论过的，Android上运行着一系列硬件平台，具有广泛的硬件规格。这种移植需要单独的着色器和资产。着色器程序指示图形处理器以特定方式渲染每个像素。
- en: Technical programming
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术编程
- en: 'This part of programming has not much to do with games; however, it ensures
    the game performance. Besides the performance, network management, plugin development,
    optimization, and so on are also part of technical programming. Here is a list
    of the possible areas for technical programming:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分编程与游戏没有太多关系；然而，它确保了游戏的性能。除了性能外，网络管理、插件开发、优化等也是技术编程的一部分。以下是技术编程可能涉及的领域的列表：
- en: Sound programming
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音编程
- en: Network programming
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络编程
- en: Game tool programming
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏工具编程
- en: Research and development programming
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究和开发编程
- en: Sound programming
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声音编程
- en: Nowadays, sound is a mandatory part of games. Some games are even made around
    music. Sound programming has therefore become a part of game programming. A sound
    programmer mainly has knowledge of digital signal processing. Sound programmers
    have to work with sound designers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，声音是游戏的必要部分。一些游戏甚至是围绕音乐制作的。因此，声音编程已成为游戏编程的一部分。声音程序员主要具有数字信号处理的知识。声音程序员必须与声音设计师合作。
- en: Modern-age games use 3D sound systems. Sound programming plays a critical role
    in delivering quality sound without affecting the performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现代游戏使用3D音响系统。声音编程在不影响性能的情况下发挥着传递高质量声音的关键作用。
- en: Network programming
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络编程
- en: Old-age games were mostly made to run on a single instance. Most of the time,
    the game did not communicate with other instances, so there was not much need
    for network programming at that point in time. The modern age is the age of networking;
    just one instance is not enough. Multiplayer games are very common today; even
    standalone games communicate with other game instances just for socialization
    and monetization.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 老式游戏大多是为了在单个实例上运行。大部分时间，游戏不会与其他实例通信，因此在那个时候并不需要太多的网络编程。现代是网络时代；仅有一个实例是不够的。多人游戏如今非常普遍；即使是独立游戏也会与其他游戏实例通信，只是为了社交和货币化。
- en: Network programming takes care of network latency, packet optimization, connection
    handling, and maintaining communication. The network programmer is also responsible
    for managing client-server communication and creating the architecture.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 网络编程负责网络延迟、数据包优化、连接处理和维护通信。网络程序员还负责管理客户端-服务器通信和创建架构。
- en: Some games run on the server. The client acts as a display device for the game
    instance running on the server. The transaction follows real-time syncing. Few
    games even follow asynchronous communication. Network programming assures the
    smooth and proper transition in this architecture.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一些游戏在服务器上运行。客户端充当服务器上运行的游戏实例的显示设备。交易遵循实时同步。少数游戏甚至采用异步通信。网络编程确保了这种架构中的平稳和适当的过渡。
- en: Game tool programming
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游戏工具编程
- en: Game development cannot be completed without the support of certain tools. Tool
    programmers can make other developers' lives a living hell or heaven. Proper game
    tool programming can ease the development process a lot. A lot of time and effort
    can be saved with the help of development tools.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发离不开某些工具的支持。工具程序员可以让其他开发人员的生活变得天堂或地狱。适当的游戏工具编程可以极大地简化开发过程。开发工具的帮助可以节省大量时间和精力。
- en: We have already discussed a few development tools. However, it is not necessary
    for all of the tools to be game independent. There may be few tools that can be
    game specific. For example, a tool can be made to generate a required database
    to be used in a game.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些开发工具。然而，并不是所有的工具都必须与游戏无关。可能有一些工具是特定于游戏的。例如，可以制作一个工具来生成游戏中需要使用的数据库。
- en: Research and development programming
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 研究和开发编程
- en: This kind of programming is not primarily for making a game. Instead, this programming
    helps make gaming better and finds new techniques to be used for upcoming games.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编程不是主要用于制作游戏。相反，这种编程有助于使游戏变得更好，并找到用于即将推出的游戏的新技术。
- en: This type of programming requires strong skills in technical understanding,
    hardware platforms, and native development. Programmers should have knowledge
    of native language and assembly or hardware-level language as well.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的编程需要对技术理解、硬件平台和本地开发具有强大的技能。程序员应该具有本地语言和汇编或硬件级语言的知识。
- en: In the case of Android game development, research programmers are assigned to
    explore new Android devices along with a new feature and specification. These
    programmers then try to discover how to use the feature in the best possible way
    in games.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android游戏开发的情况下，研究程序员被指派探索新的Android设备以及新的功能和规格。然后，这些程序员尝试发现如何在游戏中以最佳方式使用这些功能。
- en: This programming is solely responsible for games having features like the use
    of various sensors such as gravity, light, accelerometer, and so on. The recent
    development of virtual reality with Android devices is a practical example of
    such experiments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编程完全负责具有各种传感器（如重力、光线、加速计等）使用等功能的游戏。最近在Android设备上开发虚拟现实就是这种实验的一个实际例子。
- en: Technical design standards
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术设计标准
- en: Mostly, game development revolves around game design; however, the development
    process is controlled by technical design. Technical design considers each and
    every possible aspect of the real-time feasibility of the actual game design and
    requirements.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，游戏开发围绕游戏设计展开；然而，开发过程受技术设计控制。技术设计考虑了实际游戏设计和需求的实时可行性的每一个可能方面。
- en: 'A technical design contains the following sections:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计包含以下部分：
- en: Game analysis
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏分析
- en: Design pattern and flow diagram
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式和流程图
- en: Technical specification
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术规范
- en: Tools and other requirements
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具和其他要求
- en: Resource analysis
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源分析
- en: Testing requirements
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试要求
- en: Scope analysis
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围分析
- en: Risk analysis
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险分析
- en: Change log
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更日志
- en: Game analysis
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏分析
- en: This section of technical design analyzes the game design thoroughly and figures
    out the sections where technology plays a major role. Game play logic development
    is not a part of this section. However, when game logic requires hardware dependency,
    then this section is also considered in technical design.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计的这一部分彻底分析了游戏设计，并找出了技术在其中发挥重要作用的部分。游戏逻辑开发不是本节的一部分。然而，当游戏逻辑需要硬件依赖时，技术设计也会被考虑在内。
- en: Many developers and organizations have a habit of making a technical design
    document after creating the game design and before starting the actual development
    process. This helps define the timeline and predict upcoming challenges, with
    possible solutions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员和组织在制定游戏设计后，开始实际开发过程之前制定技术设计文档的习惯。这有助于定义时间表并预测即将出现的挑战，以及可能的解决方案。
- en: Design pattern and flow diagram
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计模式和流程图
- en: This section designs the class diagram and hierarchy for the game. The game
    flowchart and server-client architecture (if required) are also defined here.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分设计了游戏的类图和层次结构。游戏的流程图和服务器-客户端架构（如果需要）也在这里定义。
- en: This section of game technical design gives a clear picture of upcoming development
    for a developer. Each and every part of game modules, program structure, call
    hierarchy, third-party tool integration, database connectivity, and server-call
    management should be clearly declared in this part of the technical design document.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏技术设计的这一部分为开发人员提供了即将到来的开发的清晰图景。技术设计文档的这一部分应清楚地声明游戏模块的每一部分、程序结构、调用层次结构、第三方工具集成、数据库连接和服务器调用管理。
- en: The visual display of such a diagram, showing the flowcharts, is always a headstart
    for any development process.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的图表视觉展示，展示流程图，总是任何开发过程的一个良好开端。
- en: Technical specification
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术规范
- en: The technical specification specifies the development platform, target device
    set, and target operating system. It may also mention what hardware system and
    software is required to develop the project.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 技术规范指定了开发平台、目标设备集和目标操作系统。它还可能提到开发项目所需的硬件系统和软件。
- en: This identification is essential before starting the actual development. For
    any software to run, it requires a hardware platform that is well capable of supporting
    the software. Developers must know the target devices and must be provided with
    these devices to carry out unit testing. Any additional requirement is also identified
    in this section of technical design.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际开发之前，这种识别是必不可少的。任何软件要运行，都需要一个能够支持软件的硬件平台。开发人员必须了解目标设备，并必须提供这些设备进行单元测试。任何额外的需求也在技术设计的这一部分中得到确认。
- en: So, basically, there are two different sections in this specification. First
    is to specify the target system on which the game is designated to run. Second
    is to identify the system required to create the game according to the design.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，这个规范有两个不同的部分。第一个是指定游戏指定运行的目标系统。第二个是根据设计确定创建游戏所需的系统。
- en: Tools and other requirements
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具和其他需求
- en: This section in technical design refers to the additional tools and system requirements.
    In many cases, this section is included in the technical specification. However,
    this part serves a different purpose.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计中的这一部分涉及额外的工具和系统需求。在许多情况下，这一部分包含在技术规范中。然而，这部分有不同的目的。
- en: This may create the requirement to develop a new tool for the actual game development.
    Therefore, tool programmers are referred to this section. Android game development
    is not out of scope for this section. Although most of the tools are readily available
    for Android development, a few scenarios may demand a game-specific tool as well.
    In this case, the tool design and separate technical design, and the use of the
    tool is mentioned in this section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要开发一个新的工具来进行实际的游戏开发。因此，工具程序员被引用到这一部分。Android游戏开发并不在这一部分的范围之外。尽管大多数工具已经为Android开发准备就绪，但一些情况可能也需要一个特定于游戏的工具。在这种情况下，工具设计和单独的技术设计以及工具的使用在本节中提到。
- en: Resource analysis
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源分析
- en: Resource analysis is a report on staff dependency, staff skill level, technical
    dependency, and other resource dependencies. This helps estimate project cost
    and decide the development timeline.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 资源分析是关于人员依赖、人员技能水平、技术依赖和其他资源依赖的报告。这有助于估计项目成本并决定开发时间表。
- en: Testing requirements
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试需求
- en: This is another important part of technical design. Testing is an integral part
    of a game development process. Technical design should define the testing procedure
    along with the defined test cases.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是技术设计的另一个重要部分。测试是游戏开发过程中不可或缺的一部分。技术设计应该定义测试程序以及定义的测试用例。
- en: The development head of the game identifies the stages of testing and its requirements.
    Testing tools may be declared in this section. We have already mentioned testing
    tools in the previous chapter. In some cases, a customized tool may be required.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发负责人确定了测试的阶段及其需求。测试工具可能在本节中声明。我们已经在前一章中提到了测试工具。在某些情况下，可能需要定制工具。
- en: 'Testing requirements have four main sections:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 测试需求有四个主要部分：
- en: Testing resource requirements
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试资源需求
- en: Testing tool requirements
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试工具需求
- en: Test cases
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例
- en: Testing timeline
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试时间线
- en: Scope analysis
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 范围分析
- en: Every game has a predefined limited scope. Especially in Android devices, where
    the variety is maximum, a scope definition is required. Running a game with the
    same design on all Android platforms is next to impossible.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏都有一个预定义的有限范围。特别是在Android设备上，种类最多，需要定义范围。在所有Android平台上以相同设计运行游戏几乎是不可能的。
- en: This section of technical design indicates the probable scope of the game. This
    may identify the minimum required configuration, recommended configuration, and
    target configuration to run the game at its maximum performance.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计的这一部分指示了游戏的可能范围。这可能确定运行游戏所需的最低配置、推荐配置和目标配置，以使游戏在最大性能下运行。
- en: The game scope defines the minimum and maximum range of the hardware platform.
    Most developers like to minimize the game design scope to target maximum hardware
    devices. A technical design document is a good reference for developers to get
    an idea of the performance of the game within the scope.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏范围定义了硬件平台的最小和最大范围。大多数开发人员喜欢将游戏设计范围最小化，以针对最大的硬件设备。技术设计文件是开发人员获取游戏性能范围的良好参考。
- en: Risk analysis
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风险分析
- en: A technical design document is made before the production is started, so there
    are many fields that have to be assumed beforehand. This obviously increases the
    risk of the project. However, having a clear idea of the risk always helps developers
    get the solution when the actual problem occurs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产开始之前制作技术设计文件，因此有许多领域必须事先假定。这显然增加了项目的风险。然而，清楚地了解风险总是有助于开发人员在实际问题发生时找到解决方案。
- en: This is the reason risk analysis is mandatory for any technical design standard.
    The risk may be analyzed in different fields.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么风险分析对于任何技术设计标准都是强制性的原因。风险可以在不同领域进行分析。
- en: While developing a game, the technical requirements or game design may change.
    So, risk should be calculated to accommodate these changes without affecting the
    main project pipeline.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发游戏时，技术需求或游戏设计可能会发生变化。因此，应该计算风险以适应这些变化，而不影响主要项目流程。
- en: Technology is evolving quickly. So, in the risk analysis section, change of
    technology should also be addressed. In a common scenario in game development,
    technology may change during development to increase the game quality.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 技术发展迅速。因此，在风险分析部分，技术变化也应该得到解决。在游戏开发的常见情况下，技术可能在开发过程中发生变化，以提高游戏质量。
- en: Change log
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更日志
- en: A change log is the list containing all the changes in technical document from
    the first draft and according to the date and version number. This helps in keeping
    track of the evolution of the game.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 变更日志是包含技术文件从第一稿开始的所有变更的列表，根据日期和版本号进行排序。这有助于跟踪游戏的演变。
- en: Game design standards
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏设计标准
- en: Game design is documented in almost every organization in the gaming industry.
    This is one of the standards used most often by almost all developers. Technical
    design is sometimes skipped to save some time, and some designers include the
    most required segments from a technical document in game design. However, this
    approach is not recommended.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计几乎在游戏行业的每个组织中都有记录。这是几乎所有开发人员经常使用的标准之一。有时会跳过技术设计，以节省时间，一些设计师会在游戏设计中包含来自技术文件中最需要的部分。然而，这种方法是不推荐的。
- en: 'A basic approach to maintain a standard game design contains the following
    sections:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 维护标准游戏设计的基本方法包括以下部分：
- en: Game overview
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏概述
- en: Gameplay details
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏玩法细节
- en: Game progression
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏进展
- en: Storyboard and game elements
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故事板和游戏元素
- en: Level design
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关卡设计
- en: Artificial intelligence
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人工智能
- en: Art style
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艺术风格
- en: Technical reference
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术参考
- en: Change log
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更日志
- en: Game overview
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏概述
- en: This section defines the nature of the game along with its target audience.
    This section contains a brief about the game concept, gameplay, and the look and
    feel. The working title is mentioned beforehand.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分定义了游戏的性质以及目标受众。这一部分包含了关于游戏概念，玩法和外观的简要介绍。工作标题在之前提到。
- en: Game overview is basically the brief on almost all aspects of the game to be
    made. This section may project a market study to support the game concept and
    genre chosen for the game.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏概述基本上是对即将制作的游戏的几乎所有方面的简要介绍。这一部分可能展示了市场研究，以支持所选择的游戏概念和类型。
- en: Gameplay details
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏玩法细节
- en: Gameplay controls and the preferred user interface to control the gameplay is
    defined in this section. This is one of the most important parts of the game.
    Gameplay should be optimized for each hardware platform it is targeting. The game
    might be deployed for a mobile, tablet, and a console as well. So, different control
    schemes are defined for obvious reasons.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏玩法控制和控制游戏玩法的首选用户界面在这一部分中被定义。这是游戏中最重要的部分之一。游戏玩法应该针对其所针对的每个硬件平台进行优化。游戏可能部署到手机，平板电脑和游戏机上。因此，出于明显的原因，为不同的控制方案定义了不同的控制方案。
- en: Game progression
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏进展
- en: Game progression defines the game life cycle and its evolution through time.
    A game is a dynamic entertainment system. So, users cannot be bored at any point
    in time, and this section is responsible for user retention.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏进展定义了游戏的生命周期及其随时间的演变。游戏是一个动态的娱乐系统。因此，用户在任何时候都不能感到无聊，这一部分负责用户留存。
- en: Storyboard and game elements
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故事板和游戏元素
- en: This part of game design defines the background of the game concept. This does
    not mean having an actual story-based game background. However, every game must
    have some elements or objects around which the gameplay works.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计的这一部分定义了游戏概念的背景。这并不意味着有一个真实基于故事的游戏背景。然而，每个游戏都必须有一些元素或对象，围绕这些元素或对象进行游戏。
- en: For example, a side scrolling runner game will have a character, a few obstacles,
    environmental objects, and so on. They are termed as game elements. The reason
    for running is the background story.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个横向滚动的奔跑游戏将有一个角色，一些障碍，环境物体等。它们被称为游戏元素。奔跑的原因是背景故事。
- en: In another example, let's assume a game of Tic-Tac-Toe. A background story is
    not necessary; however, crosses, circles, and the grid are the elements of the
    game, which need to be designed and stylized.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们假设一个井字棋游戏。背景故事并不是必要的；然而，叉，圈，和网格是游戏的元素，需要被设计和风格化。
- en: Level design
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关卡设计
- en: Levels are the consequence of game progression. Each level has a synopsis, introduction,
    materials or elements, and an objective. More information can be given depending
    on the game.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 关卡是游戏进展的结果。每个关卡都有一个概要，介绍，材料或元素，以及一个目标。根据游戏的不同，可以提供更多信息。
- en: Artificial intelligence
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人工智能
- en: Artificial intelligence helps the gameplay to be experienced in a real-time
    scenario. It may be the opponent, enemy, obstacle, friendly support, situation
    detection, collision detection, pathfinding, or anything that determines a state
    of the game automatically.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能帮助游戏在实时场景中体验。它可以是对手，敌人，障碍，友好支持，情况检测，碰撞检测，路径规划，或者任何自动确定游戏状态的东西。
- en: Artificial intelligence is mandatory for each and every game. It should imply
    a mathematical or physical algorithm to carry out a certain task within a domain.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能对每个游戏都是强制性的。它应该意味着在一个领域内执行某项任务的数学或物理算法。
- en: Art style
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 艺术风格
- en: A game design document also includes the style and direction of the look and
    feel. The designer may include few references as well. This gives the artist a
    headstart in thinking about the art direction. Art is the most powerful part of
    the game to attract users initially.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计文件还包括外观和风格的风格和方向。设计师也可以包括一些参考。这给了艺术家在思考艺术方向时一个头脑风暴。艺术是吸引用户最有力的部分。
- en: This section does not include the technical specification for the art. Developers
    may include a few technical directions here to optimize the asset to be used inside
    the game.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分不包括艺术的技术规范。开发人员可以在这里包括一些技术指导，以优化游戏内使用的资产。
- en: Technical reference
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术参考
- en: In this section of a design document, all the technical references are included.
    For Android game development, this section may include a range of devices with
    minimum specification, targeting platforms, base graphics engine, development
    engine, and so on. This is a miniature version of the actual technical design
    document. When a developer or an organization chooses not to make any separate
    technical document, they mention all the tech specs in this scope.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计文件的这一部分，包括了所有的技术参考。对于Android游戏开发，这一部分可能包括一系列具有最低规格的设备，目标平台，基础图形引擎，开发引擎等。这是实际技术设计文件的缩小版本。当开发人员或组织选择不制作任何单独的技术文件时，他们在这个范围内提到所有的技术规格。
- en: Change log
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变更日志
- en: The change log holds a history of changes in the document with versions and
    dates. This serves the same purpose as any change log documentation.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 变更日志记录了文件的更改历史，包括版本和日期。这与任何变更日志文档具有相同的目的。
- en: Other styles and standards
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他风格和标准
- en: The standard mentioned in the previous sections defines the general process
    of making a game. We will discuss a few of these processes that are used widely
    in the game development industry.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中提到的标准定义了制作游戏的一般流程。我们将讨论一些在游戏开发行业广泛使用的这些流程。
- en: Most large-scale organizations follow a certain project management and tracking
    system. This may make the development process slower, but effective enough to
    minimize risk and improve game quality. A few small organizations or individual
    developers do not follow such processes in order to finalize the product as early
    as possible.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数大型组织都遵循一定的项目管理和跟踪系统。这可能会使开发过程变慢，但足够有效地减少风险并提高游戏质量。一些小型组织或个人开发者为了尽快完成产品而不遵循这样的流程。
- en: These styles are opposite to each other, and have different consequences. However,
    it is recommended that you follow a procedure that helps in the long run. A quick
    fix cannot be a permanent solution.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这些风格是相互对立的，有不同的后果。然而，建议您遵循一种有利于长远发展的程序。快速修复不能成为永久解决方案。
- en: One more commonly used practice is patching code to resolve bugs. This is also
    extremely vulnerable to threats such as project crash, deadline failure, and creation
    of a major bug. In game development, the most common problem is a device crashing,
    which is least expected on any hardware platform. In most of the cases, it happens
    because of handling exceptions badly.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常用的做法是修补代码以解决错误。这也极易受到诸如项目崩溃、截止日期失败和产生重大错误等威胁。在游戏开发中，最常见的问题是设备崩溃，这在任何硬件平台上都是最不期望发生的。在大多数情况下，这是因为糟糕地处理异常而发生的。
- en: It is very necessary to play and understand games to make games. Most game development
    organizations encourage developers to play and study games. For Android developers
    also, it is very good practice to play a lot of games from different platforms.
    It is already established that Android is the best mobile or small-scale hardware
    operating system. It has its foot in large-scale platforms as well. Being an Android
    developer, it is always a good practice to keep an eye on other platforms' features
    and development and try to implement them in Android. It is the job of the Android
    game research and development team.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 玩游戏并理解游戏对于制作游戏是非常必要的。大多数游戏开发组织鼓励开发者玩游戏并研究游戏。对于Android开发者来说，多玩不同平台的游戏是非常好的练习。已经确定Android是最好的移动或小型硬件操作系统。它也在大型平台上有所发展。作为Android开发者，时刻关注其他平台的特性和发展，并尝试在Android中实现它们是一种良好的实践。这是Android游戏研发团队的工作。
- en: Different styles for different development engines
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的开发引擎的不同风格
- en: We have already discussed a few development tools and engines. The current gaming
    industry does not encourage the development of a game only for a specific hardware
    or operating platform. We can find a lot of games that are platform exclusive,
    but this implies a business decision.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些开发工具和引擎。当前的游戏行业不鼓励仅针对特定硬件或操作平台开发游戏。我们可以找到很多平台独占的游戏，但这意味着一个商业决定。
- en: 'It is quite obvious that the same development is not applicable on every development
    engine. For example, the development style in native Android will differ from
    the development style in the Unity3D game engine. The basic reasons are:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，相同的开发方法不适用于每个开发引擎。例如，在本地Android中的开发风格将不同于Unity3D游戏引擎中的开发风格。基本原因是：
- en: Different programming languages
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的编程语言
- en: Different work principles
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的工作原则
- en: Different target platforms
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的目标平台
- en: Different programming languages
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的编程语言
- en: Each and every programming language has its own style and structure of programming.
    Developing games with Android NDK through C++ is not the same as making games
    in Android SDK using Java. Developing games using third-party cross-platform engines
    is also different.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有自己的编程风格和结构。通过C++在Android NDK上开发游戏与使用Java在Android SDK上制作游戏是不同的。使用第三方跨平台引擎开发游戏也是不同的。
- en: We are not talking about the syntactical difference here. It is about the coding
    style. Using C++ for Android NDK is different from using C++ for Unreal Engine
    4 or Cocos2d-x. Although the C++ core library remains the same, each tool guides
    the developer to a different direction of styles to get the best result.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里不是在谈论语法上的差异。这是关于编码风格。在Android NDK中使用C++与在Unreal Engine 4或Cocos2d-x中使用C++是不同的。尽管C++核心库是相同的，但每个工具都引导开发者朝着不同的风格方向以获得最佳结果。
- en: Not only C++ and Java, but also C#, Python, JavaScript, Lua, Boo, and so on
    are being used in the gaming industry. Many of the engines support multiple programming
    languages to attract maximum developers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是C++和Java，游戏行业还在使用C＃、Python、JavaScript、Lua、Boo等。许多引擎支持多种编程语言，以吸引更多的开发者。
- en: Different work principles
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的工作原则
- en: Different game engines or game making tools follow different working principles.
    A developer should be flexible enough to become accustomed to these different
    systems. There are always different code structures, folder structures, and program
    hierarchies for different engines.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的游戏引擎或游戏制作工具遵循不同的工作原则。开发者应该足够灵活，适应这些不同的系统。不同引擎总是有不同的代码结构、文件夹结构和程序层次。
- en: For native development, it is the developer who sets the standard. Engines come
    with an integral set of standards, and it is expected that all the developers
    working on that particular engine will follow the same principle.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地开发，是开发者设定标准。引擎带有一套标准，预期所有在该引擎上工作的开发者都会遵循相同的原则。
- en: For example, the work principle of Unity3D is far different to Unreal Engine
    or Cocos2d-x. Cocos2d-x does not support visual programming, whereas Unreal Engine
    Blueprint has full visual programming support. So, the development approach must
    be different despite having the same deployment target.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Unity3D的工作原理与Unreal Engine或Cocos2d-x大不相同。Cocos2d-x不支持可视化编程，而Unreal Engine
    Blueprint则完全支持可视化编程。因此，尽管部署目标相同，开发方法必须不同。
- en: Different target platforms
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不同的目标平台
- en: Modern age cross-platform game development tools have already minimized the
    difference in style and standard. However, for a very few tools, the style and
    standard is still different.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现代跨平台游戏开发工具已经最小化了风格和标准的差异。然而，对于很少数的工具来说，风格和标准仍然不同。
- en: Now, if we talk only about Android here, then consider the different hardware
    platforms on it. Development style does not always mean programming. It is about
    maintaining the complete project, starting from design to deployment. Android
    console development is different from Android mobiles.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们只谈论安卓，那么考虑一下上面的不同硬件平台。开发风格并不总是指编程。它涉及到从设计到部署的完整项目维护。安卓控制台开发与安卓手机开发不同。
- en: From the gameplay point of view, the general style of design varies with play
    session time, control, and look. An average session on a console may last up to
    2 hours, whereas mobile session length is almost 5 percent of that. A touch interface
    is far different from a key interface, which also differs from a game controller
    interface. So, even if the developer plans to deploy the same game made with the
    same engine, the style of designing the interface changes for very obvious reasons.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 从游戏玩法角度来看，设计风格通常随着游戏时间、控制和外观而变化。在控制台上的平均游戏时间可能长达2小时，而移动设备的游戏时间几乎是这个时间的5%。触摸界面与按键界面大不相同，而游戏控制器界面也不同。因此，即使开发者计划使用相同的引擎部署相同的游戏，由于非常明显的原因，界面设计风格也会发生变化。
- en: Industry best practices
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行业最佳实践
- en: 'Although there are plenty of styles and standards out there, most developers
    like to maintain some common standards to create stability in the game development
    procedure. Let''s discuss some of these area of standards commonly practiced by
    the industry:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在大量的风格和标准，大多数开发者喜欢遵循一些共同的标准，以在游戏开发过程中创建稳定性。让我们讨论一些行业常见的标准领域：
- en: Design standards
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计标准
- en: Programming standards
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程标准
- en: Testing standards
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试标准
- en: Design standards
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计标准
- en: Design and concepts vary for every game. The best design standard practice is
    to make it properly documented along with scope for improvement. The document
    must be clear enough for the users to understand. No matter what the concept is,
    developers cannot implement it without a proper understanding of the standard.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 每款游戏的设计和概念都各不相同。最佳的设计标准做法是将其适当地记录下来，并留有改进的余地。文件必须足够清晰，以便用户理解。无论概念是什么，开发者都不能在没有对标准有适当理解的情况下实施它。
- en: The design scope must not be so widely open that it can change the entire game;
    this causes serious delay in production time. However, it should always have a
    limited scope to improve the production time over time with ideas.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 设计范围不能太开放，以至于可以改变整个游戏；这会导致生产时间严重延误。然而，它应该始终有限的范围，以随着想法的增长改善生产时间。
- en: Design must specify the target genre and audience along with a valid reason.
    This should also include probable target hardware platforms.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 设计必须指定目标类型和受众，以及有效的原因。这也应包括可能的目标硬件平台。
- en: For Android development, mobile gaming is the largest industry in the present
    day. So, most Android developers mainly have their focus on mobile games. However,
    designers should always leave scope for the game to be deployed on other platforms,
    such as wearables, consoles, and so on.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于安卓开发，移动游戏是当今最大的行业。因此，大多数安卓开发者主要关注移动游戏。然而，设计师应该始终留有余地，使游戏能够部署到其他平台，如可穿戴设备、控制台等。
- en: Programming standards
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程标准
- en: 'Programming is the execution of the design. It is the most significant part
    of the production of any game. A standard piece of code should be readable, modular,
    and properly documented. Previously, there were two programming approaches: procedural
    and object-oriented. In the case of the modern day gaming industry, developers
    follow an object-oriented approach. For this reason, programming standards have
    changed a lot. Previously, it was common practice to use `m_` and `l_` as prefixes
    to variables to indicate their status in the object-oriented structure. There
    were a few other notations such as `i`, `f`, and `b` and so on to indicate variable
    types.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是设计的执行。这是任何游戏制作中最重要的部分。标准的代码应该是可读的、模块化的，并且有适当的文档记录。以前有两种编程方法：过程化和面向对象。在现代游戏行业中，开发者遵循面向对象的方法。因此，编程标准发生了很大变化。以前，使用`m_`和`l_`作为变量前缀来指示它们在面向对象结构中的状态是常见做法。还有一些其他符号，如`i`、`f`和`b`等，用来表示变量类型。
- en: Modern day standards follow mainly the Camel and Pascal casing system for their
    naming convention. Common practice is to use Pascal casing for all classes, interfaces,
    enums, events, structures, namespaces, and method names, and other elements should
    use the Camel casing system.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现代标准主要遵循驼峰和帕斯卡命名法作为它们的命名约定。常见做法是对所有类、接口、枚举、事件、结构、命名空间和方法名使用帕斯卡命名法，其他元素应使用驼峰命名法。
- en: Camel casing in programming language means that the first letter of a name should
    be in lowercase, which is specifically **Lower CamelCase**. The Pascal casing
    system states that the first letter should be capitalized, which is termed **Upper
    CamelCase**.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言中的驼峰命名法意味着名称的第一个字母应为小写，这被称为**小驼峰命名法**。帕斯卡命名法规定名称的第一个字母应大写，这被称为**大驼峰命名法**。
- en: There is no limitation technically to the number of arguments in a method or
    the number of words per line while programming in any language. However, common
    industry practice says that the number of arguments should be within eight, and
    the number of letters per line of coding should not exceed 20.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何语言的编程中，方法中的参数数量或每行的字数都没有技术上的限制。然而，常见的行业做法是方法的参数数量应在八个以内，编码每行的字数不应超过20个。
- en: The reason for this manual limitation is to have less complexity and better
    readability of the code. For the same reason, a method body should be limited
    to 200 lines, and a split class structure is always preferred.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 手动限制的原因是为了减少复杂性，提高代码的可读性。出于同样的原因，方法体应限制在200行以内，并且分割类结构始终是首选。
- en: Testing standards
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试标准
- en: Testing is the validation process for the implementation of the design. Testing
    also checks the development standard, and it also ensures the quality of the game.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是对设计实施的验证过程。测试还检查开发标准，并确保游戏的质量。
- en: In most cases, there are mainly two parts of testing procedure involved, automated
    testing and manual testing. The programmer must write the automated testing code
    for checking the core development. This part is called the test code, which must
    not be included in the main development project. It requires dedicated testers
    to carry out manual testing. Their job is to ensure the quality of the game from
    the user point of view.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，测试程序主要包括自动化测试和手动测试两个部分。程序员必须编写用于检查核心开发的自动化测试代码。这部分被称为测试代码，不得包含在主要开发项目中。需要专门的测试人员进行手动测试。他们的工作是从用户的角度确保游戏的质量。
- en: Most game development companies follow a checklist for the testing procedure.
    This checklist often contains defined test cases. Test cases are mainly defined
    by the developer and designer, and testers need to execute these cases. We will
    discuss testing in detail in a later chapter.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数游戏开发公司都遵循测试程序的检查表。这个检查表通常包含定义的测试用例。测试用例主要由开发人员和设计师定义，测试人员需要执行这些用例。我们将在后面的章节中详细讨论测试。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Any software development must follow a certain protocol and standard. Game development
    is not an exception. Following a standard helps the product sustain for a longer
    period of time. The modern age Android game life cycle includes many updates after
    launch, and in many cases the game sustains for years. For an organization, the
    same developer might not be working on the same game for a long period time, which
    is a very common scenario in the game industry.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 任何软件开发都必须遵循一定的协议和标准。游戏开发也不例外。遵循标准有助于产品在较长时间内持续存在。现代Android游戏的生命周期包括推出后的许多更新，在许多情况下游戏会持续多年。对于一个组织来说，同一个开发人员可能不会长时间地在同一个游戏上工作，这在游戏行业中是非常普遍的情况。
- en: The development project must be readable enough to be adopted by new developers
    and be flexible enough to accommodate new changes for updates to the game.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 开发项目必须足够易读，以便新开发人员采用，并且足够灵活，以适应游戏更新的新变化。
- en: Finally, let's summarize the mandatory tasks, which are common in the Android
    game development industry. Game developers should follow the game development
    principles. First, they must create a proper game design document to make it easy
    for programmers and artists to understand clearly. Then, they should create a
    proper technical design document to supply all the possible technical information
    to programmers and game engineers. A specific development process in an organization
    defines and maintains development standards. Programmers must write code in modules
    to avoid future changes and to increase the reusability of codes. A proper naming
    convention always helps in understanding the code better, and prepares it for
    easy editing and reuse.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们总结一下在Android游戏开发行业中常见的强制性任务。游戏开发人员应该遵循游戏开发原则。首先，他们必须创建适当的游戏设计文件，以便程序员和艺术家能够清楚地理解。然后，他们应该创建适当的技术设计文件，为程序员和游戏工程师提供所有可能的技术信息。组织中的特定开发流程定义和维护开发标准。程序员必须以模块化的方式编写代码，以避免未来的更改，并增加代码的可重用性。适当的命名约定总是有助于更好地理解代码，并为轻松编辑和重用做好准备。
- en: Another practice that a game developer should follow to make games is to play
    and enjoy a lot of games.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发人员应该遵循的另一种做法是玩很多游戏并享受游戏。
