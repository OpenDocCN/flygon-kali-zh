["```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar async = require('async'); \nvar rpiDhtSensor = require('rpi-dht-sensor'); \nvar McpAdc = require('mcp-adc'); \nvar adc = new McpAdc.Mcp3208(); \nvar rpio = require('rpio'); \n\n// Set pin 12 as output pin and to low \nrpio.open(12, rpio.OUTPUT, rpio.LOW); \n\nvar dht11 = new rpiDhtSensor.DHT11(2); \nvar temp = 0, \n    prevTemp = 0; \nvar humd = 0, \n    prevHumd = 0; \nvar macAddress; \nvar state = 0; \n\nvar mositureVal = 0, \n    prevMositureVal = 0; \nvar rainVal = 0, \n    prevRainVal = 0; \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    client.subscribe('socket'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        client.publish('api-engine', mac); \n    }); \n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else if (topic === 'socket') { \n        state = parseInt(message) \n        console.log('Turning Relay', !state ? 'On' : 'Off'); \n        // Relays are almost always active low \n        //console.log(!state ? rpio.HIGH : rpio.LOW); \n        // If we get a 1 we turn on the relay, else off \n        rpio.write(12, !state ? rpio.HIGH : rpio.LOW); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\n// infinite loop, with 3 seconds delay \nsetInterval(function() { \n    readSensorValues(function(results) { \n        console.log('Temperature: ' + temp + 'C, ' + 'humidity: ' + humd + '%, ' + ' Rain level (%):' + rainVal + ', ' + 'mositureVal (%): ' + mositureVal); \n        // if the temperature and humidity values change \n        // then only publish the values \n        if (temp !== prevTemp || humd !== prevHumd || mositureVal !== prevMositureVal || rainVal != prevRainVal) { \n            var data2Send = { \n                data: { \n                    t: temp, \n                    h: humd, \n                    r: rainVal, \n                    m: mositureVal, \n                    s: state \n                }, \n                macAddress: macAddress \n            }; \n            // console.log('Data Published'); \n            client.publish('weather-status', JSON.stringify(data2Send)); \n            // reset prev values to current \n            // for next loop \n            prevTemp = temp; \n            prevHumd = humd; \n            prevMositureVal = mositureVal; \n            prevRainVal = rainVal; \n        } \n    }); \n}, 3000); // every three second \n\nfunction readSensorValues(CB) { \n    async.parallel({ \n        dht11Values: function(callback) { \n            var readout = dht11.read(); \n            // update global variable \n            temp = readout.temperature.toFixed(2); \n            humd = readout.humidity.toFixed(2); \n            callback(null, { temp: temp, humidity: humd }); \n        }, \n        rainLevel: function(callback) { \n            // we are going to connect rain sensor \n            // on channel 0, hence 0 is the first arg below \n            adc.readRawValue(0, function(value) { \n                // update global variable \n                rainVal = value; \n                rainVal = (100 - parseFloat((rainVal / 4096) * 100)).toFixed(2); \n                callback(null, { rain: rainVal }); \n            }); \n        }, \n        moistureLevel: function(callback) { \n            // we are going to connect mositure sensor \n            // on channel 1, hence 1 is the first arg below \n            adc.readRawValue(1, function(value) { \n                // update global variable \n                mositureVal = value; \n                mositureVal = (100 - parseFloat((mositureVal / 4096) * 100)).toFixed(2); \n                callback(null, { moisture: mositureVal }); \n            }); \n        } \n    }, function done(err, results) { \n        if (err) { \n            throw err; \n        } \n        // console.log(results); \n        if (CB) CB(results); \n    }); \n} \n```", "```js\nnpm install rpio -save  \n```", "```js\nmosca -c index.js -v | pino  \n```", "```js\nsudo node index.js \n```", "```js\nvar Data = require('../api/data/data.model'); \nvar mqtt = require('mqtt'); \nvar config = require('../config/environment'); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    console.log('Connected to Mosca at ' + config.mqtt.host + ' on port ' + config.mqtt.port); \n    client.subscribe('api-engine'); \n    client.subscribe('weather-status'); \n}); \n\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \n    if (topic === 'api-engine') { \n        var macAddress = message.toString(); \n        console.log('Mac Address >> ', macAddress); \n        client.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'weather-status') { \n        var data = JSON.parse(message.toString()); \n        // create a new data record for the device \n        Data.create(data, function(err, data) { \n            if (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \n            console.log('Data Saved :', data.data); \n        }); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nexports.sendSocketData = function(data) { \n    console.log('Sending Data', data); \n    client.publish('socket', JSON.stringify(data)); \n} \n```", "```js\nexports.create = function(req, res, next) { \n    var data = req.body; \n    data.createdBy = req.user._id; \n    Data.create(data, function(err, _data) { \n        if (err) return res.status(500).send(err); \n        if (data.topic === 'socket') { \n            require('../../mqtt/index.js').sendSocketData(_data.data.s); // send relay value \n        } \n        return res.json(_data); \n    }); \n}; \n```", "```js\nnpm start  \n```", "```js\n<div class=\"container\">\n    <br>\n    <div *ngIf=\"!device\">\n        <h3 class=\"text-center\">Loading!</h3>\n    </div>\n    <div class=\"row\" *ngIf=\"lastRecord\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-info\">\n                <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">\n                        {{device.name}}\n                    </h3>\n                    <span class=\"pull-right btn-click\">\n                        <i class=\"fa fa-chevron-circle-up\"></i>\n                    </span>\n                </div>\n                <div class=\"clearfix\"></div>\n                <div class=\"table-responsive\">\n                    <table class=\"table table-striped\">\n                        <tr>\n                            <td>Toggle Socket</td>\n                            <td>\n                                <ui-switch [(ngModel)]=\"toggleState\" (change)=\"toggleChange($event)\"></ui-switch>\n                            </td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Temperature</td>\n                            <td>{{lastRecord.data.t}}</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Humidity</td>\n                            <td>{{lastRecord.data.h}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Rain Level</td>\n                            <td>{{lastRecord.data.r}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Mositure Level</td>\n                            <td>{{lastRecord.data.m}} %</td>\n                        </tr>\n                        <tr *ngIf=\"lastRecord\">\n                            <td>Received At</td>\n                            <td>{{lastRecord.createdAt | date: 'medium'}}</td>\n                        </tr>\n                    </table>\n                    <div class=\"col-md-6\" *ngIf=\"tempHumdData.length > 0\">\n                        <canvas baseChart [datasets]=\"tempHumdData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas>\n                    </div>\n                    <div class=\"col-md-6\" *ngIf=\"rainMoisData.length > 0\">\n                        <canvas baseChart [datasets]=\"rainMoisData\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```", "```js\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \nimport { DevicesService } from '../services/devices.service'; \nimport { Params, ActivatedRoute } from '@angular/router'; \nimport { SocketService } from '../services/socket.service'; \nimport { DataService } from '../services/data.service'; \nimport { NotificationsService } from 'angular2-notifications'; \n\n@Component({ \n   selector: 'app-device', \n   templateUrl: './device.component.html', \n   styleUrls: ['./device.component.css'] \n}) \nexport class DeviceComponent implements OnInit, OnDestroy { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subDevice: any; \n   private subData: any; \n   lastRecord: any; \n\n   // line chart config \n   public lineChartOptions: any = { \n         responsive: true, \n         legend: { \n               position: 'bottom', \n         }, hover: { \n               mode: 'label' \n         }, scales: { \n               xAxes: [{ \n                     display: true, \n                     scaleLabel: { \n                           display: true, \n                           labelString: 'Time' \n                     } \n               }], \n               yAxes: [{ \n                     display: true, \n                     ticks: { \n                           beginAtZero: true, \n                           // steps: 10, \n                           // stepValue: 5, \n                           // max: 70 \n                     } \n               }] \n         }, \n         title: { \n               display: true, \n               text: 'Sensor Data vs. Time' \n         } \n   }; \n   public lineChartLegend: boolean = true; \n   public lineChartType: string = 'line'; \n   public tempHumdData: Array<any> = []; \n   public rainMoisData: Array<any> = []; \n   public lineChartLabels: Array<any> = []; \n\n   constructor(private deviceService: DevicesService, \n         private socketService: SocketService, \n         private dataService: DataService, \n         private route: ActivatedRoute, \n         private notificationsService: NotificationsService) { } \n\n   ngOnInit() { \n         this.subDevice = this.route.params.subscribe((params) => { \n               this.deviceService.getOne(params['id']).subscribe((response) => { \n                     this.device = response.json(); \n                     this.getData(); \n                     this.socketInit(); \n               }); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.lastRecord = this.data[0]; // descending order data \n               this.toggleState = this.lastRecord.data.s; \n               this.genChart(); \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if (this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n               this.toggleState = this.lastRecord.data.s; \n               this.genChart(); \n         }); \n   } \n\n   toggleChange(state) { \n         let data = { \n               macAddress: this.device.macAddress, \n               data: { \n                     t: this.lastRecord.data.t, \n                     h: this.lastRecord.data.h, \n                     m: this.lastRecord.data.m, \n                     r: this.lastRecord.data.r, \n                     s: state ? 1 : 0 \n               }, \n               topic: 'socket' \n         } \n\n         this.dataService.create(data).subscribe((resp) => { \n               if (resp.json()._id) { \n                     this.notificationsService.success('Device Notified!'); \n               } \n         }, (err) => { \n               console.log(err); \n               this.notificationsService.error('Device Notification Failed. Check console for the error!'); \n         }) \n   } \n\n   ngOnDestroy() { \n         this.subDevice.unsubscribe(); \n         this.subData ? this.subData.unsubscribe() : ''; \n   } \n\n   genChart() { \n         let data = this.data; \n         let _thArr: Array<any> = []; \n         let _rmArr: Array<any> = []; \n         let _lblArr: Array<any> = []; \n\n         let tmpArr: Array<any> = []; \n         let humArr: Array<any> = []; \n         let raiArr: Array<any> = []; \n         let moiArr: Array<any> = []; \n\n         for (var i = 0; i < data.length; i++) { \n               let _d = data[i]; \n               tmpArr.push(_d.data.t); \n               humArr.push(_d.data.h); \n               raiArr.push(_d.data.r); \n               moiArr.push(_d.data.m); \n               _lblArr.push(this.formatDate(_d.createdAt)); \n         } \n\n         // reverse data to show the latest on the right side \n         tmpArr.reverse(); \n         humArr.reverse(); \n         raiArr.reverse(); \n         moiArr.reverse(); \n         _lblArr.reverse(); \n\n         _thArr = [ \n               { \n                     data: tmpArr, \n                     label: 'Temperature' \n               }, \n               { \n                     data: humArr, \n                     label: 'Humidity %' \n               } \n         ] \n\n         _rmArr = [ \n               { \n                     data: raiArr, \n                     label: 'Rain Levels' \n               }, \n               { \n                     data: moiArr, \n                     label: 'Moisture Levels' \n               } \n         ] \n\n         this.tempHumdData = _thArr; \n         this.rainMoisData = _rmArr; \n\n         this.lineChartLabels = _lblArr; \n   } \n\n   private formatDate(originalTime) { \n         var d = new Date(originalTime); \n         var datestring = d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear() + \" \" + \n               d.getHours() + \":\" + d.getMinutes(); \n         return datestring; \n   } \n\n} \n```", "```js\nng serve\n```", "```js\nng build --env=prod  \n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start  \n```", "```js\n<ion-header>\n    <ion-navbar>\n        <ion-title>Mobile App</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content padding>\n    <div *ngIf=\"!lastRecord\">\n        <h3 class=\"text-center\">Loading!</h3>\n    </div>\n    <div *ngIf=\"lastRecord\">\n        <ion-list>\n            <ion-item>\n                <ion-label>Name</ion-label>\n                <ion-label>{{device.name}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Toggle LED</ion-label>\n                <ion-toggle [(ngModel)]=\"toggleState\" (click)=\"toggleChange($event)\"></ion-toggle>\n            </ion-item>\n            <ion-item>\n                <ion-label>Temperature</ion-label>\n                <ion-label>{{lastRecord.data.t}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Humidity</ion-label>\n                <ion-label>{{lastRecord.data.h}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Rain Level</ion-label>\n                <ion-label>{{lastRecord.data.r}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Moisture Level</ion-label>\n                <ion-label>{{lastRecord.data.m}} %</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Received At</ion-label>\n                <ion-label>{{lastRecord.createdAt | date: 'medium'}}</ion-label>\n            </ion-item>\n        </ion-list>\n    </div>\n</ion-content>\n```", "```js\nimport { Component } from '@angular/core'; \nimport { IonicPage, NavController, NavParams } from 'ionic-angular'; \n\nimport { DevicesService } from '../../services/device.service'; \nimport { DataService } from '../../services/data.service'; \nimport { ToastService } from '../../services/toast.service'; \nimport { SocketService } from '../../services/socket.service'; \n\n@IonicPage() \n@Component({ \n   selector: 'page-view-device', \n   templateUrl: 'view-device.html', \n}) \nexport class ViewDevicePage { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subData: any; \n   lastRecord: any; \n\n   constructor(private navCtrl: NavController, \n         private navParams: NavParams, \n         private socketService: SocketService, \n         private deviceService: DevicesService, \n         private dataService: DataService, \n         private toastService: ToastService) { \n         this.device = navParams.get(\"device\"); \n         console.log(this.device); \n   } \n\n   ionViewDidLoad() { \n         this.deviceService.getOne(this.device._id).subscribe((response) => { \n               this.device = response.json(); \n               this.getData(); \n               this.socketInit(); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.lastRecord = this.data[0]; // descending order data \n               if (this.lastRecord) { \n                     this.toggleState = this.lastRecord.data.s; \n               } \n         }); \n   } \n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if (this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n         }); \n   } \n\n   toggleChange(state) { \n         let data = { \n               macAddress: this.device.macAddress, \n               data: { \n                     t: this.lastRecord.data.t, \n                     h: this.lastRecord.data.h, \n                     m: this.lastRecord.data.m, \n                     r: this.lastRecord.data.r, \n                     s: !state \n               }, \n               topic: 'socket' \n         } \n\n         console.log(data); \n\n         this.dataService.create(data).subscribe((resp) => { \n               if (resp.json()._id) { \n                     this.toastService.toggleToast('Device Notified!'); \n               } \n         }, (err) => { \n               console.log(err); \n               this.toastService.toggleToast('Device Notification Failed. Check console for the error!'); \n         }) \n   } \n\n   ionViewDidUnload() { \n         this.subData && this.subData.unsubscribe && this.subData.unsubscribe(); //unsubscribe if subData is defined \n   } \n} \n```", "```js\nionic serve \n```", "```js\nionic run android  \n```", "```js\nionic run ios  \n```", "```js\nmosca -c index.js -v | pino  \n```", "```js\nnpm start  \n```", "```js\n./ngrok http 9000  \n```", "```js\nexport const Globals = Object.freeze({ \n   // BASE_API_URL: 'http://localhost:9000/', \n   BASE_API_URL: 'https://add7231d.ngrok.io/', \n   API_AUTH_TOKEN: 'AUTH_TOKEN', \n   AUTH_USER: 'AUTH_USER' \n}); \n```", "```js\n'use strict'; \n\n// Route the incoming request based on type (LaunchRequest, IntentRequest, \n// etc.) The JSON body of the request is provided in the event parameter. \nexports.handler = function(event, context) { \n    try { \n        console.log(\"event.session.application.applicationId=\" + event.session.application.applicationId); \n\n        if (event.session.new) { \n            onSessionStarted({ requestId: event.request.requestId }, event.session); \n        } \n\n        if (event.request.type === \"LaunchRequest\") { \n            onLaunch(event.request, \n                event.session, \n                function callback(sessionAttributes, speechletResponse) { \n                    context.succeed(buildResponse(sessionAttributes, speechletResponse)); \n                }); \n        } else if (event.request.type === \"IntentRequest\") { \n            onIntent(event.request, \n                event.session, \n                function callback(sessionAttributes, speechletResponse) { \n                    context.succeed(buildResponse(sessionAttributes, speechletResponse)); \n                }); \n        } else if (event.request.type === \"SessionEndedRequest\") { \n            onSessionEnded(event.request, event.session); \n            context.succeed(); \n        } \n    } catch (e) { \n        context.fail(\"Exception: \" + e); \n    } \n}; \n\n/** \n * Called when the session starts. \n */ \nfunction onSessionStarted(sessionStartedRequest, session) { \n    console.log(\"onSessionStarted requestId=\" + sessionStartedRequest.requestId + \", sessionId=\" + session.sessionId); \n\n    // add any session init logic here \n} \n\n/** \n * Called when the user invokes the skill without specifying what they want. \n */ \nfunction onLaunch(launchRequest, session, callback) { \n    console.log(\"onLaunch requestId=\" + launchRequest.requestId + \", sessionId=\" + session.sessionId); \n\n    var cardTitle = \"Smarty App\" \n    var speechOutput = \"Hello, What would you like to know about your farm today?\" \n    callback(session.attributes, \n        buildSpeechletResponse(cardTitle, speechOutput, \"\", true)); \n} \n\n/** \n * Called when the user specifies an intent for this skill. \n */ \nfunction onIntent(intentRequest, session, callback) { \n    console.log(\"onIntent requestId=\" + intentRequest.requestId + \", sessionId=\" + session.sessionId); \n\n    var intent = intentRequest.intent, \n        intentName = intentRequest.intent.name; \n\n    // dispatch custom intents to handlers here \n    if (intentName == 'WeatherStatusIntent') { \n        handleWSIRequest(intent, session, callback); \n    } else if (intentName == 'ControlMotorIntent') { \n        handleCMIRequest(intent, session, callback); \n    } else { \n        throw \"Invalid intent\"; \n    } \n} \n\n/** \n * Called when the user ends the session. \n * Is not called when the skill returns shouldEndSession=true. \n */ \nfunction onSessionEnded(sessionEndedRequest, session) { \n    console.log(\"onSessionEnded requestId=\" + sessionEndedRequest.requestId + \", sessionId=\" + session.sessionId); \n\n    // Add any cleanup logic here \n} \n\nfunction handleWSIRequest(intent, session, callback) { \n    getData(function(speechOutput) { \n        callback(session.attributes, \n            buildSpeechletResponseWithoutCard(speechOutput, \"\", \"true\")); \n    }); \n} \n\nfunction handleCMIRequest(intent, session, callback) { \n    var speechOutput = 'Got '; \n    var status; \n    var motorAction = intent.slots.motorAction.value; \n    speechOutput += motorAction; \n    if (motorAction === 'turn on') { \n        status = 1; \n    } \n\n    if (motorAction === 'turn off') { \n        status = 0; \n    } \n    setData(status, function(speechOutput) { \n        callback(session.attributes, \n            buildSpeechletResponseWithoutCard(speechOutput, \"\", \"true\")); \n    }); \n\n} \n\nfunction getData(cb) { \n    var http = require('http'); \n    var chunk = ''; \n    var options = { \n        host: '31d664cf.ngrok.io', \n        port: 80, \n        path: '/api/v1/data/b8:27:eb:39:92:0d/30', \n        agent: false, \n        timeout: 10000, \n        method: 'GET', \n        headers: { \n            'AlexSkillRequest': true, \n            'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTFmZGI5ZGNlYjBiODM2YjIzMmI3MjMiLCJpYXQiOjE0OTcxNjE4MTUsImV4cCI6MTQ5NzI0ODIxNX0.ua-SXAqLb-XUEtbgY55TX_pKdD2Xj5OSM7b9Iox_Rd8' \n        } \n    }; \n\n    var req = http.request(options, function(res) { \n        res.on('data', function(_chunk) { \n            chunk += _chunk; \n        }); \n\n        res.on('end', function() { \n            var resp = chunk; \n            if (typeof chunk === 'string') { \n                resp = JSON.parse(chunk); \n            } \n\n            if (resp.length === 0) { \n                cb('Looks like we have not gathered any data yet! Please try again later!'); \n            } \n\n            var d = resp[0].data; \n\n            if (!d) { \n                cb('Looks like there is something wrong with the data we got! Please try again later!'); \n            } \n\n            var temp = d.t || 'invalid'; \n            var humd = d.h || 'invalid'; \n            var mois = d.m || 'invalid'; \n            var rain = d.r || 'invalid'; \n\n            cb('The temperature is ' + temp + ' degrees celsius, the humidity is ' + humd + ' percent, The moisture level is ' + mois + ' percent and the rain level is ' + rain + ' percent!'); \n\n        }); \n\n        res.on('error', function() { \n            console.log(arguments); \n            cb('Looks like something went wrong.'); \n        }); \n    }); \n    req.end(); \n} \n\nfunction setData(status, cb) { \n    var http = require('http'); \n    var chunk = ''; \n    var data = { \n        'status': status, \n        'macAddress': 'b8:27:eb:39:92:0d' \n    }; \n\n    data = JSON.stringify(data); \n\n    var options = { \n        host: '31d664cf.ngrok.io', \n        port: 80, \n        path: '/api/v1/data', \n        agent: false, \n        timeout: 10000, \n        method: 'POST', \n        headers: { \n            'AlexSkillRequest': true, \n            'Content-Type': 'application/json', \n            'Content-Length': Buffer.byteLength(data), \n            'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTFmZGI5ZGNlYjBiODM2YjIzMmI3MjMiLCJpYXQiOjE0OTcxNjE4MTUsImV4cCI6MTQ5NzI0ODIxNX0.ua-SXAqLb-XUEtbgY55TX_pKdD2Xj5OSM7b9Iox_Rd8' \n        } \n    }; \n\n    var req = http.request(options, function(res) { \n        res.on('data', function(_chunk) { \n            chunk += _chunk; \n        }); \n\n        res.on('end', function() { \n            var resp = chunk; \n            if (typeof chunk === 'string') { \n                resp = JSON.parse(chunk); \n            } \n\n            cb('Motor has been successfully ' + (status ? 'turned on' : 'turned off')); \n\n        }); \n\n        res.on('error', function() { \n            console.log(arguments); \n            cb('Looks like something went wrong.'); \n        }); \n    }); \n\n    // post the data \n    req.write(data); \n    req.end(); \n} \n\n// ------- Helper functions to build responses ------- \n\nfunction buildSpeechletResponse(title, output, repromptText, shouldEndSession) { \n    return { \n        outputSpeech: { \n            type: \"PlainText\", \n            text: output \n        }, \n        card: { \n            type: \"Simple\", \n            title: title, \n            content: output \n        }, \n        reprompt: { \n            outputSpeech: { \n                type: \"PlainText\", \n                text: repromptText \n            } \n        }, \n        shouldEndSession: shouldEndSession \n    }; \n} \n\nfunction buildSpeechletResponseWithoutCard(output, repromptText, shouldEndSession) { \n    return { \n        outputSpeech: { \n            type: \"PlainText\", \n            text: output \n        }, \n        reprompt: { \n            outputSpeech: { \n                type: \"PlainText\", \n                text: repromptText \n            } \n        }, \n        shouldEndSession: shouldEndSession \n    }; \n} \n\nfunction buildResponse(sessionAttributes, speechletResponse) { \n    return { \n        version: \"1.0\", \n        sessionAttributes: sessionAttributes, \n        response: speechletResponse \n    }; \n} \n```"]