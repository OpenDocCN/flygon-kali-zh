["```\n# Docker network managment command\ndocker network \n```", "```\n# Docker network management subcommands\ndocker network connect # Connect a container to a network\ndocker network create            # Create a network\ndocker network disconnect        # Disconnect a container from a network\ndocker network inspect # Display network details\ndocker network ls # List networks\ndocker network rm # Remove one or more networks\ndocker network prune # Remove all unused networks\n```", "```\n# Install the weave network driver plug-in\nsudo curl -L git.io/weave -o /usr/local/bin/weave\nsudo chmod a+x /usr/local/bin/weave\n# Disable checking for new versions\nexport CHECKPOINT_DISABLE=1\n# Start up the weave network\nweave launch [for 2nd, 3rd, etc. optional hostname or IP of 1st Docker host running weave]\n# Set up the environment to use weave\neval $(weave env)\n```", "```\n# Start up weave on the 2nd node\nweave launch node01\n```", "```\n# Peer host node02 with the weave network by connecting from node01\nweave connect node02\n```", "```\n# Install and setup the weave driver\nsudo curl -L git.io/weave -o /usr/local/bin/weave\nsudo chmod a+x /usr/local/bin/weave\nexport CHECKPOINT_DISABLE=1\nweave launch\neval $(weave env)\n```", "```\n# Install and setup the weave driver\nsudo curl -L git.io/weave -o /usr/local/bin/weave\nsudo chmod a+x /usr/local/bin/weave\nexport CHECKPOINT_DISABLE=1\nweave launch\neval $(weave env)\n```", "```\n# Bring node02 in as a peer on node01's weave network\nweave connect ubuntu-node02\n```", "```\n# Run a container detached on node01\ndocker container run -d --name app01 alpine tail -f /dev/null\n```", "```\n# Run a container detached on node02\ndocker container run -d --name app02 alpine tail -f /dev/null\n```", "```\n# From inside the app02 container running on node02,\n# let's ping the app01 container running on node01\ndocker container exec -it app02 ping -c 4 app01\n```", "```\n# Similarly, from inside the app01 container running on node01,\n# let's ping the app02 container running on node02\ndocker container exec -it app01 ping -c 4 app02\n```", "```\n# Docker network create command syntax\n# Usage: docker network create [OPTIONS] NETWORK\n```", "```\n# Create a new overlay network, with all default options\ndocker network create -d overlay defaults-over\n```", "```\n# Create a new overlay network with specific IP settings\ndocker network create -d overlay \\\n--subnet=172.30.0.0/24 \\\n--ip-range=172.30.0.0/28 \\\n--gateway=172.30.0.254 \\\nspecifics-over\n# Initial validation\ndocker network inspect specifics-over --format '{{json .IPAM.Config}}' | jq\n```", "```\n# Create service tester1\ndocker service create --detach --replicas 3 --name tester1 \\\n --network specifics-over alpine tail -f /dev/null\n# Create service tester2\ndocker service create --detach --replicas 3 --name tester2 \\\n --network specifics-over alpine tail -f /dev/null\n# From a container in the tester1 service ping the tester2 service by name\ndocker container exec -it tester1.3.5hj309poppj8jo272ks9n4k6a ping -c 3 tester2\n```"]