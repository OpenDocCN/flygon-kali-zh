- en: Docker Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker概述
- en: Welcome to *Mastering Docker**, Third Edition*! This first chapter will cover
    the Docker basics that you should already have a pretty good handle on. But if
    you don't already have the required knowledge at this point, this chapter will
    help you with the basics, so that subsequent chapters don't feel as heavy. By
    the end of the book, you should be a Docker master, and will be able to implement
    Docker in your environments, building and supporting applications on top of them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到《Docker大师》，第三版！本章将介绍您应该已经掌握的Docker基础知识。但是，如果您在这一点上还没有所需的知识，本章将帮助您掌握基础知识，以便后续章节不会感到沉重。在本书结束时，您应该是一个Docker大师，并且能够在您的环境中实施Docker，构建和支持应用程序。
- en: 'In this chapter, we''re going to review the following high-level topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾以下高级主题：
- en: Understanding Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Docker
- en: The differences between dedicated hosts, virtual machines, and Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用主机、虚拟机和Docker之间的区别
- en: Docker installers/installation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker安装程序/安装
- en: The Docker command
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker命令
- en: The Docker and container ecosystem
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker和容器生态系统
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we are going to discuss how to install Docker locally. To
    do this, you will need a host running one of the three following operating systems:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何在本地安装Docker。为此，您需要运行以下三种操作系统之一的主机：
- en: macOS High Sierra and above
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS High Sierra及以上
- en: Windows 10 Professional
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: Ubuntu 18.04
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 18.04
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际操作：
- en: '[http://bit.ly/2NXf3rd](http://bit.ly/2NXf3rd)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2NXf3rd](http://bit.ly/2NXf3rd)'
- en: Understanding Docker
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Docker
- en: Before we look at installing Docker, let's begin by getting an understanding
    of the problems that the Docker technology aims to solve.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装Docker之前，让我们先了解Docker技术旨在解决的问题。
- en: Developers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员
- en: The company behind Docker has always described the program as fixing the "*it
    works on my machine"* problem. This problem is best summed up by an image, based
    on the Disaster Girl meme, which simply had the tagline *Worked fine in dev, ops
    problem now*, that started popping up in presentations, forums, and Slack channels
    a few years ago. While it is funny, it is unfortunately an all-too-real problem
    and one I have personally been on the receiving end of - let's take a look at
    an example of what is meant by this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker背后的公司一直将该程序描述为解决“*它在我的机器上运行良好*”的问题。这个问题最好由一个基于Disaster Girl模因的图像概括，简单地带有标语*在开发中运行良好，现在是运维问题*，几年前开始出现在演示文稿、论坛和Slack频道中。虽然很有趣，但不幸的是，这是一个非常真实的问题，我个人也曾经遇到过——让我们看一个例子，了解这是什么意思。
- en: The problem
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Even in a world where DevOps best practices are followed, it is still all too
    easy for a developer's working environment to not match the final production environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在遵循DevOps最佳实践的世界中，开发人员的工作环境仍然很容易与最终生产环境不匹配。
- en: For example, a developer using the macOS version of, say, PHP will probably
    not be running the same version as the Linux server that hosts the production
    code. Even if the versions match, you then have to deal with differences in the
    configuration and overall environment on which the version of PHP is running,
    such as differences in the way file permissions are handled between different
    operating system versions, to name just one potential problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用macOS版本的PHP的开发人员可能不会运行与托管生产代码的Linux服务器相同的版本。即使版本匹配，您还必须处理PHP版本运行的配置和整体环境之间的差异，例如不同操作系统版本之间处理文件权限的方式的差异，仅举一个潜在问题的例子。
- en: All of this comes to a head when it is time for a developer to deploy their
    code to the host and it doesn't work. So, should the production environment be
    configured to match the developer's machine, or should developers only do their
    work in environments that match those used in production?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员部署他们的代码到主机上时，如果出现问题，所有这些问题都会变得棘手。因此，生产环境应该配置成与开发人员的机器相匹配，还是开发人员只能在与生产环境匹配的环境中工作？
- en: In an ideal world, everything should be consistent, from the developer's laptop
    all the way through to your production servers; however, this utopia has traditionally been
    difficult to achieve. Everyone has their way of working and their own personal
    preferences—enforcing consistency across multiple platforms is difficult enough
    when there is a single engineer working on the systems, let alone a team of engineers
    working with a team of potentially hundreds of developers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，从开发人员的笔记本电脑到生产服务器，一切都应该保持一致；然而，这种乌托邦传统上很难实现。每个人都有自己的工作方式和个人偏好——即使只有一个工程师在系统上工作，要在多个平台上强制实现一致性已经很困难了，更不用说一个团队的工程师与数百名开发人员合作了。
- en: The Docker solution
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker解决方案
- en: Using Docker for Mac or Docker for Windows, a developer can easily wrap their
    code in a container that they have either defined themselves, or created as a
    Dockerfile while working alongside a sys-admin or operations team. We will be
    covering this in [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building
    Container Images*, as well as Docker Compose files, which we will go into more
    detail about in [Chapter 5](c95f93e2-7a70-421a-9d89-287229339234.xhtml),* Docker
    Compose*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker for Mac或Docker for Windows，开发人员可以轻松地将他们的代码封装在一个容器中，他们可以自己定义，或者在与系统管理员或运营团队一起工作时创建为Dockerfile。我们将在第2章《构建容器镜像》中涵盖这一点，以及Docker
    Compose文件，在第5章《Docker Compose》中我们将更详细地介绍。
- en: They can continue to use their chosen IDE and maintain their workflows when
    working with the code. As we will see in the upcoming sections of this chapter,
    installing and using Docker is not difficult; in fact, considering how much of
    a chore it was to maintain consistent environments in the past, even with automation,
    Docker feels a little too easy—almost like cheating.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可以继续使用他们选择的集成开发环境，并在处理代码时保持他们的工作流程。正如我们将在本章的后续部分中看到的，安装和使用Docker并不困难；事实上，考虑到过去维护一致的环境有多么繁琐，即使有自动化，Docker似乎有点太容易了——几乎像作弊一样。
- en: Operators
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运营商
- en: I have been working in operations for more years than I would like to admit,
    and the following problem has cropped regularly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我在运营方面工作的时间比我愿意承认的时间长，以下问题经常出现。
- en: The problem
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Let''s say you are looking after five servers: three load-balanced web servers,
    and two database servers that are in a master or slave configuration dedicated
    to running Application 1\. You are using a tool, such as Puppet or Chef, to automatically
    manage the software stack and configuration across your five servers.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在管理五台服务器：三台负载均衡的Web服务器，以及两台专门运行应用程序1的主从配置的数据库服务器。你正在使用工具，比如Puppet或者Chef，来自动管理这五台服务器上的软件堆栈和配置。
- en: Everything is going great, until you are told, *We need to deploy Application
    2 on the same servers that are running Application 1*. On the face of it, this
    is no problem—you can tweak your Puppet or Chef configuration to add new users,
    vhosts, pull the new code down, and so on. However, you notice that Application
    2 requires a higher version of the software that you are running for Application
    1.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都进行得很顺利，直到有人告诉你，“我们需要在运行应用程序1的服务器上部署应用程序2”。表面上看，这没有问题——你可以调整你的Puppet或Chef配置来添加新用户、虚拟主机，下载新代码等。然而，你注意到应用程序2需要比你为应用程序1运行的软件更高的版本。
- en: To make matters worse, you already know that Application 1 flat out refuses
    to work with the new software stack, and that Application 2 is not backwards compatible.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，你已经知道应用程序1坚决不愿意与新软件堆栈一起工作，而应用程序2也不向后兼容。
- en: 'Traditionally, this leaves you with a few choices, all of which just add to
    the problem in one way or another:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，这给你留下了几个选择，无论哪种选择都会在某种程度上加剧问题：
- en: Ask for more servers? While this traditionally is probably the safest technical
    solution, it does not automatically mean that there will be the budget for additional
    resources.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要求更多的服务器？虽然从技术上来说，这可能是最安全的解决方案，但这并不意味着会有额外资源的预算。
- en: 'Re-architect the solution? Taking one of the web and database servers out of
    the load balancer or replication, and redeploying them with the software stack
    for Application 2, may seem like the next easiest option from a technical point
    of view. However, you are introducing single points of failure for Application
    2, and also reducing the redundancy for Application 1: there was probably a reason
    why you were running three web and two database servers in the first place.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新设计解决方案？从技术角度来看，从负载均衡器或复制中取出一台Web和数据库服务器，然后重新部署它们与应用程序2的软件堆栈似乎是下一个最容易的选择。然而，你正在为应用程序2引入单点故障，并且也减少了应用程序1的冗余：你之前可能有理由在第一次运行三台Web和两台数据库服务器。
- en: Attempt to install the new software stack side-by-side on your servers? Well,
    this certainly is possible and may seem like a good short-term plan to get the
    project out of the door, but it could leave you with a house of cards that could
    come tumbling down when the first critical security patch is needed for either
    software stack.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在服务器上并行安装新软件堆栈？嗯，这当然是可能的，而且似乎是一个不错的短期计划，可以让项目顺利进行，但当第一个关键的安全补丁需要应用于任一软件堆栈时，可能会导致整个系统崩溃。
- en: The Docker solution
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker解决方案
- en: This is where Docker starts to come into its own. If you have Application 1
    running across your three web servers in containers, you may actually be running
    more than three containers; in fact, you could already be running six, doubling
    up on the containers, allowing you to run rolling deployments of your application
    without reducing the availability of Application 1.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Docker开始发挥作用的地方。如果你在容器中跨三台Web服务器上运行应用程序1，实际上你可能正在运行的容器不止三个；事实上，你可能已经运行了六个，容器的数量翻倍，使你能够在不降低应用程序1的可用性的情况下进行应用程序的滚动部署。
- en: Deploying Application 2 in this environment is as easy as simply launching more
    containers across your three hosts and then routing to the newly deployed application
    using your load balancer. As you are just deploying containers, you do not need
    to worry about the logistics of deploying, configuring, and managing two versions
    of the same software stack on the same server.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种环境中部署应用程序2就像简单地在三台主机上启动更多的容器，然后通过负载均衡器路由到新部署的应用程序一样简单。因为你只是部署容器，所以你不需要担心在同一台服务器上部署、配置和管理两个版本的相同软件堆栈的后勤问题。
- en: We will work through an example of this exact scenario in [Chapter 5](c95f93e2-7a70-421a-9d89-287229339234.xhtml),
    *Docker Compose*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在《第5章》中详细介绍这种确切的情景，*Docker Compose*。
- en: Enterprise
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业
- en: Enterprises suffer from the same problems described previously, as they have
    both developers and operators; however, they have both of these entities on a
    much larger scale, and there is also a lot more risk involved.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 企业遭受着之前描述的相同问题，因为他们既有开发人员又有运维人员；然而，他们在更大的规模上拥有这两个实体，并且还存在更多的风险。
- en: The problem
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Because of the aforementioned risk, along with the fact that any downtime could
    cost sales or impact reputation, enterprises need to test every deployment before
    it is released. This means that new features and fixes are stuck in a holding
    pattern while the following takes place:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前述的风险，再加上任何停机时间可能带来的销售损失或声誉影响，企业需要在发布之前测试每次部署。这意味着新功能和修复被困在保持状态中，直到以下步骤完成：
- en: Test environments are spun up and configured
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境被启动和配置
- en: Applications are deployed across the newly launched environments
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序部署在新启动的环境中
- en: Test plans are executed and the application and configuration are tweaked until
    the tests pass
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试计划被执行，应用程序和配置被调整，直到测试通过。
- en: Requests for change are written, submitted, and discussed to get the updated
    application deployed to production
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更请求被编写、提交和讨论，以便将更新的应用程序部署到生产环境中
- en: This process can take anywhere from a few days to a few weeks, or even months,
    depending on the complexity of the application and the risk the change introduces.
    While the process is required to ensure continuity and availability for the enterprise
    at a technological level, it does potentially introduce risk at the business level.
    What if you have a new feature stuck in this holding pattern and a competitor
    releases a similar—or worse still—the same feature, ahead of you?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要几天、几周，甚至几个月，具体取决于应用程序的复杂性和变更引入的风险。虽然这个过程是为了确保企业在技术层面上的连续性和可用性而必需的，但它确实可能在业务层面引入风险。如果你的新功能被困在这种保持状态中，而竞争对手发布了类似的，甚至更糟的功能，超过了你，那该怎么办呢？
- en: This scenario could be just as damaging to sales and reputation as the downtime
    that the process was put in place to protect you against in the first place.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况对销售和声誉可能造成的损害与该过程最初为了保护你免受停机时间的影响一样严重。
- en: The Docker solution
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker解决方案
- en: Let me start by saying that Docker does not remove the need for a process, such
    as the one just described, to exist or be followed. However, as we have already
    touched upon, it does make things a lot easier as you are already working consistently.
    It means that your developers have been working with the same container configuration
    that is running in production. This means that it is not much of a step for the
    methodology to be applied to your testing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我说一下，Docker并不能消除这样一个过程的需求，就像刚才描述的那样，存在或者被遵循。然而，正如我们已经提到的，它确实使事情变得更容易，因为你已经在一贯地工作。这意味着你的开发人员一直在使用与生产环境中运行的相同的容器配置。这意味着这种方法论被应用到你的测试中并不是什么大问题。
- en: For example, when a developer checks their code that they know works on their
    local development environment (as that is where they have been doing all of their
    work), your testing tool can launch the same containers to run your automated
    tests against. Once the containers have been used, they can be removed to free
    up resources for the next lot of tests. This means that, all of a sudden, your
    testing process and procedures are a lot more flexible, and you can continue to
    reuse the same environment, rather than redeploying or reimaging servers for the
    next set of testing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当开发人员检查他们在本地开发环境上知道可以正常工作的代码时（因为他们一直在那里工作），您的测试工具可以启动相同的容器来运行自动化测试。一旦容器被使用，它们可以被移除以释放资源供下一批测试使用。这意味着，突然之间，您的测试流程和程序变得更加灵活，您可以继续重用相同的环境，而不是为下一组测试重新部署或重新映像服务器。
- en: This streamlining of the process can be taken as far as having your new application
    containers push all the way through to production.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流程的简化可以一直进行到您的新应用程序容器推送到生产环境。
- en: The quicker this process can be completed, the quicker you can confidently launch
    new features or fixes and keep ahead of the curve.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程完成得越快，您就可以更快地自信地推出新功能或修复问题，并保持领先地位。
- en: The differences between dedicated hosts, virtual machines, and Docker
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专用主机、虚拟机和Docker之间的区别
- en: So, we know what problems Docker was developed to solve. We now need to discuss
    what exactly Docker is and what it does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们知道Docker是为了解决什么问题而开发的。现在我们需要讨论Docker究竟是什么以及它的作用。
- en: Docker is a container management system that helps us easily manage **Linux
    Containers (LXC)** in an easier and universal fashion. This lets you create images
    in virtual environments on your laptop and run commands against them. The actions
    you perform to the containers, running in these environments locally on your machine,
    will be the same commands or operations that you run against them when they are
    running in your production environment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个容器管理系统，可以帮助我们更轻松地以更简单和通用的方式管理Linux容器（LXC）。这使您可以在笔记本电脑上的虚拟环境中创建镜像并对其运行命令。您在本地机器上运行的这些环境中的容器执行的操作将是您在生产环境中运行它们时执行的相同命令或操作。
- en: This helps us in that you don't have to do things differently when you go from
    a development environment, such as the one on your local machine, to a production
    environment on your server. Now, let's take a look at the differences between
    Docker containers and typical virtual machine environments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们，因为当您从开发环境（例如本地机器上的环境）转移到服务器上的生产环境时，您不必做出不同的事情。现在，让我们来看看Docker容器和典型虚拟机环境之间的区别。
- en: 'The following diagram demonstrates the difference between a dedicated, bare-metal
    server and a server running virtual machines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，演示了专用裸金属服务器和运行虚拟机的服务器之间的区别：
- en: '![](Images/fc274237-51d9-4aa0-a6f0-25c3f3c46f70.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fc274237-51d9-4aa0-a6f0-25c3f3c46f70.png)'
- en: 'As you can see, for a dedicated machine we have three applications, all sharing
    the same orange software stack. Running virtual machines allow us to run three
    applications, running two completely different software stacks. The following
    diagram shows the same orange and green applications running in containers using
    Docker:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，对于专用机器，我们有三个应用程序，都共享相同的橙色软件堆栈。运行虚拟机允许我们运行三个应用程序，运行两个完全不同的软件堆栈。下图显示了在使用Docker容器运行的相同橙色和绿色应用程序：
- en: '![](Images/358c4fdb-3334-4301-8fd9-da6571f08edd.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/358c4fdb-3334-4301-8fd9-da6571f08edd.png)'
- en: This diagram gives us a lot of insight into the biggest key benefit of Docker,
    that is, there is no need for a complete operating system every time we need to
    bring up a new container, which cuts down on the overall size of containers. Since
    almost all the versions of Linux use the standard kernel models, Docker relies
    on using the host operating system's Linux kernel for the operating system it
    was built upon, such as Red Hat, CentOS, and Ubuntu.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图表让我们对Docker的最大关键优势有了很多了解，也就是说，每次我们需要启动一个新的容器时都不需要完整的操作系统，这减少了容器的总体大小。由于几乎所有的Linux版本都使用标准的内核模型，Docker依赖于使用主机操作系统的Linux内核，例如Red
    Hat、CentOS和Ubuntu。
- en: For this reason, you can have almost any Linux operating system as your host
    operating system and be able to layer other Linux-based operating systems on top
    of the host. Well, that is, your applications are led to believe that a full operating
    system is actually installed—but in reality, we only install the binaries, such
    as a package manager and, for example, Apache/PHP and the libraries required to
    get just enough of an operating system for your applications to run.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您几乎可以将任何Linux操作系统作为您的主机操作系统，并能够在主机上叠加其他基于Linux的操作系统。嗯，也就是说，您的应用程序被认为实际上安装了一个完整的操作系统，但实际上，我们只安装了二进制文件，比如包管理器，例如Apache/PHP以及运行应用程序所需的库。
- en: 'For example, in the earlier diagram, we could have Red Hat running for the
    orange application, and Debian running for the green application, but there would
    never be a need to actually install Red Hat or Debian on the host. Thus, another
    benefit of Docker is the size of images when they are created. They are built
    without the largest piece: the kernel or the operating system. This makes them
    incredibly small, compact, and easy to ship.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在之前的图表中，我们可以让Red Hat运行橙色应用程序，让Debian运行绿色应用程序，但实际上不需要在主机上安装Red Hat或Debian。因此，Docker的另一个好处是创建镜像时的大小。它们构建时没有最大的部分：内核或操作系统。这使它们非常小，紧凑且易于传输。
- en: Docker installation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker安装
- en: 'Installers are one of the first pieces you need to get up and running with
    Docker on both your local machine and your server environments. Let''s first take
    a look at which environments you can install Docker in:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序是您在本地计算机和服务器环境上运行Docker时需要的第一件东西。让我们首先看一下您可以在哪些环境中安装Docker：
- en: Linux (various Linux flavors)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux（各种Linux版本）
- en: macOS
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Windows 10 Professional
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: In addition, you can run them on public clouds, such as Amazon Web Services,
    Microsoft Azure, and DigitalOcean, to name a few. With each of the various types
    of installers listed previously, Docker actually operates in different ways on
    the operating system. For example, Docker runs natively on Linux, so if you are
    using Linux, then how Docker runs on your system is pretty straightforward. However,
    if you are using macOS or Windows 10, then it operates a little differently, since
    it relies on using Linux.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以在公共云上运行它们，例如亚马逊网络服务、微软Azure和DigitalOcean等。在之前列出的各种类型的安装程序中，Docker实际上在操作系统上以不同的方式运行。例如，Docker在Linux上本地运行，因此如果您使用Linux，那么Docker在您的系统上运行的方式就非常简单。但是，如果您使用macOS或Windows
    10，那么它的运行方式会有所不同，因为它依赖于使用Linux。
- en: Let's look at quickly installing Docker on a Linux desktop running Ubuntu 18.04,
    and then on macOS and Windows 10.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下在运行Ubuntu 18.04的Linux桌面上安装Docker，然后在macOS和Windows 10上安装。
- en: Installing Docker on Linux (Ubuntu 18.04)
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux（Ubuntu 18.04）上安装Docker
- en: 'As already mentioned, this is the most straightforward installation out of
    the three systems we will be looking at. To install Docker, simply run the following
    command from a Terminal session:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，这是我们将要看到的三个系统中最直接的安装。要安装Docker，只需在终端会话中运行以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will also be asked to add your current user to the Docker group. To do
    this, run the following command, making sure you replace the username with your
    own:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将被要求将当前用户添加到Docker组中。要执行此操作，请运行以下命令，并确保您用自己的用户名替换用户名：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These commands will download, install, and configure the latest version of Docker
    from Docker themselves. At the time of writing, the Linux operating system version
    installed by the official install script is 18.06.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将从Docker自己那里下载、安装和配置最新版本的Docker。在撰写本文时，官方安装脚本安装的Linux操作系统版本为18.06。
- en: 'Running the following command should confirm that Docker is installed and running:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令应该确认Docker已安装并正在运行：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see something similar to the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下输出：
- en: '![](Images/3955bf99-117a-4c4f-98a6-caa832558ac9.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3955bf99-117a-4c4f-98a6-caa832558ac9.png)'
- en: There are two supporting tools that we are going to use in future chapters,
    which are installed as part of the Docker for macOS or Windows 10 installers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个支持工具，我们将在未来的章节中使用，这些工具作为Docker for macOS或Windows 10安装程序的一部分安装。
- en: 'To ensure that we are ready to use these tools in later chapters, we should
    install them now. The first tool is **Docker Machine**. To install this, we first
    need to get the latest version number. You can find this by visiting the releases
    section of the project''s GitHub page at [https://github.com/docker/machine/releases/](https://github.com/docker/machine/releases/). At
    the time of writing, the version was 0.15.0—update the version number in the commands
    in the following code block with whatever the latest version is when you install
    it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们在以后的章节中准备好使用这些工具，我们现在应该安装它们。第一个工具是**Docker Machine**。要安装这个工具，我们首先需要获取最新的版本号。您可以通过访问项目的GitHub页面的发布部分[https://github.com/docker/machine/releases/](https://github.com/docker/machine/releases/)找到这个版本。撰写本文时，版本为0.15.0——在安装时，请使用以下代码块中的命令更新版本号为最新版本。
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To download and install the next and final tool, **Docker Compose**, run the
    following commands, again checking that you are running the latest version by
    visiting the releases page at [https://github.com/docker/compose/releases/](https://github.com/docker/compose/releases/):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载并安装下一个和最终的工具**Docker Compose**，请运行以下命令，再次检查您是否通过访问[https://github.com/docker/compose/releases/](https://github.com/docker/compose/releases/)页面运行最新版本：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once it''s installed, you should be able to run the following two commands
    confirm the versions of the software is correctly:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该能够运行以下两个命令来确认软件的版本是否正确：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing Docker on macOS
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Docker
- en: Unlike the command-line Linux installation, Docker for Mac has a graphical installer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与命令行Linux安装不同，Docker for Mac有一个图形安装程序。
- en: Before downloading, you should make sure that you are running Apple macOS Yosemite
    10.10.3 or above. If you are running an older version, all is not lost; you can
    still run Docker. Refer to the other older operating systems section of this chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载之前，您应该确保您正在运行Apple macOS Yosemite 10.10.3或更高版本。如果您正在运行旧版本，一切都不会丢失；您仍然可以运行Docker。请参考本章的其他旧操作系统部分。
- en: 'You can download the installer from the Docker store, at [https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac).
    Just click on the Get Docker link. Once it''s downloaded, you should have a DMG
    file. Double-clicking on it will mount the image, and opening the image mounted
    on your desktop should present you with something like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Docker商店下载安装程序，网址为[https://store.docker.com/editions/community/docker-ce-desktop-mac](https://store.docker.com/editions/community/docker-ce-desktop-mac)。只需点击获取Docker链接。下载完成后，您应该会得到一个DMG文件。双击它将挂载映像，打开桌面上挂载的映像应该会显示类似以下内容：
- en: '![](Images/6e6f1020-b05a-4eb0-9277-fd283764567d.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6e6f1020-b05a-4eb0-9277-fd283764567d.png)'
- en: 'Once you have dragged the Docker icon to your Applications folder, double-click
    on it and you will be asked whether you want to open the application you have
    downloaded. Clicking Yes will open the Docker installer, showing the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将Docker图标拖到应用程序文件夹后，双击它，系统会询问您是否要打开已下载的应用程序。点击“是”将打开Docker安装程序，显示如下内容：
- en: '![](Images/30550aa6-fdba-4bc9-b994-f91eb5494441.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/30550aa6-fdba-4bc9-b994-f91eb5494441.png)'
- en: 'Click on Next and follow the onscreen instructions. Once it is installed and
    started, you should see a Docker icon in the top-left icon bar on your screen.
    Clicking on the icon and selecting About Docker should show you something similar
    to the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”并按照屏幕上的说明操作。安装并启动后，您应该会在屏幕的左上角图标栏中看到一个Docker图标。点击该图标并选择“关于Docker”应该会显示类似以下内容：
- en: '![](Images/27e05fdf-ed47-467d-be8a-bcdc9a539759.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/27e05fdf-ed47-467d-be8a-bcdc9a539759.png)'
- en: 'You can also open a Terminal window. Run the following command, just as we
    did in the Linux installation:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以打开终端窗口。运行以下命令，就像我们在Linux安装中所做的那样：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see something similar to the following Terminal output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下终端输出的内容：
- en: '![](Images/e40b2f8a-148e-4b5a-b453-80bb899b59c9.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e40b2f8a-148e-4b5a-b453-80bb899b59c9.png)'
- en: 'You can also run the following commands to check the versions of Docker Compose
    and Docker Machine that were installed alongside Docker Engine:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以运行以下命令来检查与Docker Engine一起安装的Docker Compose和Docker Machine的版本：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Installing Docker on Windows 10 Professional
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows 10专业版上安装Docker
- en: Like Docker for Mac, Docker for Windows uses a graphical installer.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与Docker for Mac一样，Docker for Windows使用图形安装程序。
- en: Before downloading, you should make sure that you are running Microsoft Windows
    10 Professional or Enterprise 64-bit. If you are running an older version or an
    unsupported edition of Windows 10, you can still run Docker; refer to the other
    older operating systems section of this chapter for more information.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载之前，您应该确保您正在运行Microsoft Windows 10专业版或企业版64位。如果您正在运行旧版本或不受支持的Windows 10版本，您仍然可以运行Docker；有关更多信息，请参阅本章其他旧操作系统部分。
- en: Docker for Windows has this requirement due to its reliance on Hyper-V. Hyper-V
    is Windows' native hypervisor and allows you to run x86-64 guests on your Windows
    machine, be it Windows 10 Professional or Windows Server. It even forms part of
    the Xbox One operating system.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Windows有此要求是因为它依赖于Hyper-V。Hyper-V是Windows的本机虚拟化程序，允许您在Windows 10专业版或Windows
    Server上运行x86-64客户机。它甚至是Xbox One操作系统的一部分。
- en: 'You can download the Docker for Windows installer from the Docker store at
    [https://store.docker.com/editions/community/docker-ce-desktop-windows/](https://store.docker.com/editions/community/docker-ce-desktop-windows/).
    Just click on the Get Docker button to download the installer. Once it''s downloaded,
    run the MSI package and you will be greeted with the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从Docker商店下载Docker for Windows安装程序，网址为[https://store.docker.com/editions/community/docker-ce-desktop-windows/](https://store.docker.com/editions/community/docker-ce-desktop-windows/)。只需点击“获取Docker”按钮下载安装程序。下载完成后，运行MSI包，您将看到以下内容：
- en: '![](Images/30b99fc6-5abc-491e-b000-05b422ab97a9.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/30b99fc6-5abc-491e-b000-05b422ab97a9.png)'
- en: Click on Yes, and then follow the onscreen prompts, which will go through not
    only installing Docker, but also enabling Hyper-V, if you do not already have
    it enabled.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“是”，然后按照屏幕提示进行操作，这将不仅安装Docker，还将启用Hyper-V（如果您尚未启用）。
- en: 'Once it''s installed, you should see a Docker icon in the icon tray in the
    bottom right of your screen. Clicking on it and selecting About Docker from the
    menu will show the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该在屏幕右下角的图标托盘中看到一个Docker图标。单击它，然后从菜单中选择关于Docker，将显示以下内容：
- en: '![](Images/69ea533f-f50a-4991-b357-6cfab5522f8d.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/69ea533f-f50a-4991-b357-6cfab5522f8d.png)'
- en: 'Open a PowerShell window and type the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口并输入以下命令：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should also show you similar output to the Mac and Linux versions:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这也应该显示与Mac和Linux版本类似的输出：
- en: '![](Images/3812b057-12d3-4f6d-975f-041408c61d89.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3812b057-12d3-4f6d-975f-041408c61d89.png)'
- en: 'Again, you can also run the following commands to check the versions of Docker
    Compose and Docker Machine that were installed alongside Docker Engine:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您也可以运行以下命令来检查与Docker Engine一起安装的Docker Compose和Docker Machine的版本：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Again, you should see a similar output to the macOS and Linux versions. As you
    may have started to gather, once the packages are installed, their usage is going
    to be pretty similar. This will be covered in greater detail later in this chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您应该看到与macOS和Linux版本类似的输出。正如您可能已经开始了解的那样，一旦安装了这些软件包，它们的使用方式将会非常相似。这将在本章后面更详细地介绍。
- en: Older operating systems
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧操作系统
- en: 'If you are not running a sufficiently new operating system on Mac or Windows,
    then you will need to use Docker Toolbox. Consider the output printed from running
    the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Mac或Windows上运行的操作系统版本不够新，那么您将需要使用Docker Toolbox。考虑运行以下命令后打印的输出：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On all three of the installations we have performed so far, it shows two different
    versions, a client and server. Predictably, the Linux version shows that the architecture
    for the client and server are both Linux; however, you may notice that the Mac
    version shows the client is running on Darwin, which is Apple's Unix-like kernel,
    and the Windows version shows Windows. Yet both of the servers show the architecture
    as being Linux, so what gives?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经执行的三个安装都显示了两个不同的版本，一个客户端和一个服务器。可以预料的是，Linux版本显示客户端和服务器的架构都是Linux；然而，您可能会注意到Mac版本显示客户端正在运行Darwin，这是苹果的类Unix内核，而Windows版本显示Windows。但两个服务器都显示架构为Linux，这是怎么回事呢？
- en: That is because both the Mac and Windows versions of Docker download and run
    a virtual machine in the background, and this virtual machine runs running a small,
    lightweight operating system based on Alpine Linux. The virtual machine runs using
    Docker's own libraries, which connect to the built-in hypervisor for your chosen
    environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Docker的Mac和Windows版本都会下载并在后台运行一个虚拟机，这个虚拟机运行着基于Alpine Linux的小型轻量级操作系统。虚拟机是使用Docker自己的库运行的，这些库连接到您选择的环境的内置hypervisor。
- en: For macOS, this is the built-in Hypervisor.framework, and for Windows, Hyper-V.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS来说，这是内置的Hypervisor.framework，而对于Windows来说，是Hyper-V。
- en: To ensure that no one misses out on the Docker experience, a version of Docker
    that does not use these built-in hypervisors is available for older versions of
    macOS and unsupported Windows versions. These versions utilize VirtualBox as the
    hypervisor to run the Linux server for your local client to connect to.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保每个人都能体验Docker，针对较旧版本的macOS和不受支持的Windows版本提供了一个不使用这些内置hypervisor的Docker版本。这些版本利用VirtualBox作为hypervisor来运行本地客户端连接的Linux服务器。
- en: '**VirtualBox** is an open source x86 and AMD64/Intel64 virtualization product
    developed by Oracle. It runs on Windows, Linux, Macintosh, and Solaris hosts,
    with support for many Linux, Unix, and Windows guest operating systems. For more
    information on VirtualBox, see [https://www.virtualbox.org/](https://www.virtualbox.org/).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**VirtualBox**是由Oracle开发的开源x86和AMD64/Intel64虚拟化产品。它可以在Windows、Linux、Macintosh和Solaris主机上运行，并支持许多Linux、Unix和Windows客户操作系统。有关VirtualBox的更多信息，请参阅[https://www.virtualbox.org/](https://www.virtualbox.org/)。'
- en: For more information on **Docker Toolbox**, see the project's website at [https://www.docker.com/products/docker-toolbox/](https://www.docker.%20com/products/docker-toolbox/),
    where you can also download the macOS and Windows installers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有关**Docker Toolbox**的更多信息，请参阅项目网站[https://www.docker.com/products/docker-toolbox/](https://www.docker.%20com/products/docker-toolbox/)，您也可以在该网站上下载macOS和Windows的安装程序。
- en: This book assumes that you have installed the latest Docker version on Linux,
    or have used Docker for Mac or Docker for Windows. While Docker installations
    using Docker Toolbox should be able to support the commands in this book, you
    may run into issues around file permissions and ownership when mounting data from
    your local machine to your containers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您已经在Linux上安装了最新的Docker版本，或者已经使用了Docker for Mac或Docker for Windows。虽然使用Docker
    Toolbox安装Docker应该支持本书中的命令，但在将数据从本地机器挂载到容器时，您可能会遇到文件权限和所有权方面的问题。
- en: The Docker command-line client
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker命令行客户端
- en: Now that we have Docker installed, let's look at some Docker commands that you
    should be familiar with already. We will start with some common commands and then
    take a peek at the commands that are used for the Docker images. We will then
    take a dive into the commands that are used for the containers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装了Docker，让我们来看一些你应该已经熟悉的Docker命令。我们将从一些常用命令开始，然后看一下用于Docker镜像的命令。然后我们将深入了解用于容器的命令。
- en: Docker has restructured their command-line client into more logical groupings
    of commands, as the number of features provided by the client grows quickly and
    commands start to cross over each other. Throughout this book, we will be using
    the new structure.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Docker已经将他们的命令行客户端重构为更合乎逻辑的命令组合，因为客户端提供的功能数量增长迅速，命令开始互相交叉。在本书中，我们将使用新的结构。
- en: 'The first command we will be taking a look at is one of the most useful commands,
    not only in Docker, but in any command-line utility you use—the `help` command.
    It is run simply like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先看一下一个最有用的命令，不仅在Docker中，而且在您使用的任何命令行实用程序中都是如此——`help`命令。它的运行方式很简单，就像这样：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This command will give you a full list of all of the Docker commands at your
    disposal, along with a brief description of what each command does. For further
    help with a particular command, you can run the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将给你一个完整的Docker命令列表，以及每个命令的简要描述。要获取特定命令的更多帮助，可以运行以下命令：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, let''s run the `hello-world` container. To do this, simply run the following
    command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们运行`hello-world`容器。要做到这一点，只需运行以下命令：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It doesn't matter what host you are running Docker on, the same thing will happen
    on Linux, macOS, and Windows. Docker will download the `hello-world` container
    image and then execute it, and once it's executed, the container will be stopped.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在哪个主机上运行Docker，Linux、macOS和Windows都会发生同样的事情。Docker将下载`hello-world`容器镜像，然后执行它，一旦执行完毕，容器将被停止。
- en: 'Your Terminal session should look like the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您的终端会话应该如下所示：
- en: '![](Images/8835f878-d366-4d53-b18d-dd6987b23916.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8835f878-d366-4d53-b18d-dd6987b23916.png)'
- en: 'Let''s try something a little more adventurous—let''s download and run a nginx
    container by running the following two commands:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些更有冒险精神的事情——通过运行以下两个命令来下载并运行一个nginx容器：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first of the two commands downloads the nginx container image, and the second
    command launches a container in the background, called `nginx-test`, using the
    `nginx` image we pulled. It also maps port `8080` on our host machine to port
    `80` on the container, making it accessible to our local browser at `http://localhost:8080/`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个命令中的第一个下载了nginx容器镜像，第二个命令在后台启动了一个名为`nginx-test`的容器，使用我们拉取的`nginx`镜像。它还将主机机器上的端口`8080`映射到容器上的端口`80`，使其可以通过我们本地浏览器访问`http://localhost:8080/`。
- en: 'As you can see from the following screenshots, the command and results are
    exactly the same on all three OS types. Here we have Linux:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从以下截图中看到的，所有三种操作系统类型上的命令和结果都是完全相同的。这里是Linux：
- en: '![](Images/a4840240-de2f-457d-b638-ab11bb857ad6.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a4840240-de2f-457d-b638-ab11bb857ad6.png)'
- en: 'This is the result on macOS:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: macOS上的结果如下：
- en: '![](Images/017655c0-a14c-48b0-8487-3d8072dca595.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/017655c0-a14c-48b0-8487-3d8072dca595.png)'
- en: 'And this is how it looks on Windows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 而在Windows上的效果如下：
- en: '![](Images/beb936ac-71fc-4f9b-ad05-00ab198855ca.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/beb936ac-71fc-4f9b-ad05-00ab198855ca.png)'
- en: 'In the following three chapters, we will look at using the Docker command-line
    client in more detail. For now, let''s stop and remove our `nginx-test` container
    by running the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三章中，我们将更详细地查看使用Docker命令行客户端。现在，让我们停止并删除我们的`nginx-test`容器，运行以下命令：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, the experience of running a simple nginx container on all three
    of the hosts on which we have installed Docker is exactly the same. As am I sure
    you can imagine, trying to achieve this without something like Docker across all
    three platforms is a challenge, and also a very different experience on each platform.
    Traditionally, this has been one of the reasons for the difference in local development
    environments.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在我们安装了Docker的三个主机上运行一个简单的nginx容器的体验是完全相同的。我相信你可以想象，在没有像Docker这样的东西的情况下，在这三个平台上实现这一点是一种挑战，并且在每个平台上的体验也是非常不同的。传统上，这一直是本地开发环境差异的原因之一。
- en: Docker and the container ecosystem
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker和容器生态系统
- en: If you have been following the rise of Docker and containers, you will have
    noticed that, over the period of the last few years, the messaging on the Docker
    website has been slowly changing, from headlines about what containers are to
    more of a focus on the services provided by Docker as a company.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在关注Docker和容器的崛起，你会注意到，在过去几年里，Docker网站的宣传语已经慢慢地从关于容器是什么转变为更加关注Docker作为公司提供的服务。
- en: One of the core drivers for this is that everything has traditionally been lumped
    into being known just as "Docker," which can get confusing. Now that people do
    not need educating as much on what a container is or the problems they can solve
    with Docker, the company needed to try and start to differentiate themselves from
    other companies that sprung up to support all sorts of container technologies.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个核心驱动因素是，一切传统上都被归类为“Docker”，这可能会让人感到困惑。现在人们不需要太多关于容器是什么以及他们可以用Docker解决什么问题的教育，公司需要尝试开始与其他为各种容器技术提供支持的公司区分开来。
- en: 'So, let''s try and unpick everything that is Docker, which involves the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试梳理一下Docker的一切，其中包括以下内容：
- en: '**Open source projects**: There are several open source projects started by
    Docker, which are now maintained by a large community of developers.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源项目**：Docker启动了几个开源项目，现在由大量开发人员社区维护。'
- en: '**Docker CE and Docker EE**: This is the core collection of free-to-use and
    commercially supported Docker tools built on top of the open source components.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker CE和Docker EE**：这是建立在开源组件之上的免费使用和商业支持的Docker工具的核心集合。'
- en: '**Docker, Inc.**: This is the company founded to support and develop the core
    Docker tools.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker, Inc.**：这是一家成立的公司，旨在支持和开发核心Docker工具。'
- en: We will also be looking at some third-party services in later chapters. In the
    meantime, let's go into more detail on each of these, starting with the open source
    projects.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在后面的章节中研究一些第三方服务。与此同时，让我们更详细地了解每一个，从开源项目开始。
- en: Open source projects
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源项目
- en: 'Docker, Inc. has spent the last two years open sourcing and donating a lot
    of its core projects to various open source foundations and communities. These
    projects include the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Docker, Inc.在过去两年里一直在开源并向各种开源基金会和社区捐赠其核心项目。这些项目包括以下内容：
- en: '**Moby Project** is the upstream project upon which the Docker Engine is based.
    It provides all of the components needed to assemble a fully functional container
    system.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Moby Project**是Docker引擎基于的上游项目。它提供了组装完全功能的容器系统所需的所有组件。'
- en: '**Runc** is a command-line interface for creating and configuring containers,
    and has been built to the OCI specification.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Runc**是用于创建和配置容器的命令行界面，并且已经构建到OCI规范中。'
- en: '**Containerd** is an easily embeddable container runtime. It is also a core
    component of the Moby Project.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Containerd**是一个易于嵌入的容器运行时。它也是Moby Project的核心组件之一。'
- en: '**LibNetwork** is a Go library that provides networking for containers.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LibNetwork**是一个提供容器网络的Go库。'
- en: '**Notary** is a client and server that aims to provide a trust system for signed
    container images.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Notary**是一个旨在为签名的容器镜像提供信任系统的客户端和服务器。'
- en: '**HyperKit** is a toolkit that allows you to embed hypervisor capabilities
    into your own applications, presently it only supports the macOS and the Hypervisor.framework.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HyperKit**是一个工具包，允许您将虚拟化功能嵌入到自己的应用程序中，目前仅支持macOS和Hypervisor.framework。'
- en: '**VPNKit** provides VPN functionality to HyperKit.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VPNKit**为HyperKit提供VPN功能。'
- en: '**DataKit** allows you to orchestrate application data using a Git-like workflow.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataKit**允许您使用类似Git的工作流来编排应用程序数据。'
- en: '**SwarmKit** is a toolkit that allows you to build distributed systems using
    the same raft consensus algorithm as Docker Swarm.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SwarmKit**是一个工具包，允许您使用与Docker Swarm相同的raft一致性算法构建分布式系统。'
- en: '**LinuxKit** is a framework that allows you to build and compile a small portable
    Linux operating system for running containers.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LinuxKit**是一个框架，允许您构建和编译一个小型便携的Linux操作系统，用于运行容器。'
- en: '**InfraKit** is a collection of tools that you can use to define infrastructure to
    run your LinuxKit generated distributions on.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**InfraKit**是一套工具集，您可以使用它来定义基础架构，以运行您在LinuxKit上生成的发行版。'
- en: On their own, you will probably never use the individual components; however,
    each of the projects mentioned is a component of the tools which are maintained
    by Docker, Inc. We will go a little more into these projects in our final chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用这些组件的可能性很小；然而，我们提到的每个项目都是由Docker, Inc.维护的工具的组成部分。我们将在最后一章中更详细地介绍这些项目。
- en: Docker CE and Docker EE
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker CE和Docker EE
- en: There are a lot of tools supplied and supported by Docker, Inc. Some we have
    already mentioned, and others we will cover in later chapters. Before we finish
    this, our first chapter, we should get an idea of the tools we are going to be
    using. The most of important of them is the core Docker Engine.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Docker, Inc.提供并支持了许多工具。有些我们已经提到过，其他的我们将在后面的章节中介绍。在完成我们的第一章之前，我们应该了解一下我们将要使用的工具。其中最重要的是核心Docker引擎。
- en: This is the core of Docker, and all of the other tools that we will be covering
    use it. We have already been using it as we installed it in the Docker installation
    and Docker commands sections of this chapter. There are currently two versions
    of Docker Engine; there is the Docker **Enterprise Edition** (**EE**) and the
    Docker **Community Edition** (**CE**). We will be using Docker CE throughout this
    book.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Docker的核心，我们将要介绍的所有其他工具都会使用它。在本章的Docker安装和Docker命令部分，我们已经在使用它。目前有两个版本的Docker
    Engine；有Docker **企业版**（**EE**）和Docker **社区版**（**CE**）。在本书中，我们将使用Docker CE。
- en: 'From September 2018, the release cycle for the stable version of Docker CE
    will be biannual, which means that it will have a seven-month maintenance cycle.
    This means that you have plenty of time to review and plan any upgrades. At the
    time of writing, the current timetable for Docker CE releases is:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从2018年9月开始，稳定版本的Docker CE的发布周期将是半年一次，这意味着它将有七个月的维护周期。这意味着您有足够的时间来审查和计划任何升级。目前，Docker
    CE发布的当前时间表如下：
- en: '**Docker 18.06 CE**: This is the last of the quarterly Docker CE releases,
    released July 18th 2018.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 18.06 CE：这是季度Docker CE发布的最后一个版本，发布于2018年7月18日。
- en: '**Docker 18.09 CE**: This release, due late September/early October 2018, is
    the first release of the biannual release cycle of Docker CE.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 18.09 CE：这个版本预计将于2018年9月底/10月初发布，是Docker CE半年发布周期的第一个版本。
- en: '**Docker 19.03 C**E: The first supported Docker CE of 2019 is scheduled to
    be released March/April 2019.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 19.03 CE：2019年的第一个受支持的Docker CE计划于2019年3月/4月发布。
- en: '**Docker 19.09 CE**: The second supported release of 2019 is scheduled to be
    released September/October 2019.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 19.09 CE：2019年的第二个受支持的版本计划于2019年9月/10月发布。
- en: As well as the stable version of Docker CE, Docker will be providing nightly
    builds of the Docker Engine via a nightly repository (formally Docker CE Edge),
    and also monthly builds of Docker for Mac and Docker for Windows via the Edge
    channel.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了稳定版本的Docker CE，Docker还将通过夜间存储库（正式的Docker CE Edge）提供Docker Engine的夜间构建，以及通过Edge渠道每月构建的Docker
    for Mac和Docker for Windows。
- en: 'Docker also provides the following tools and services:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还提供以下工具和服务：
- en: '**Docker Compose**: A tool that allows you to define and share multi-container
    definitions; it is detailed in [Chapter 5](c95f93e2-7a70-421a-9d89-287229339234.xhtml),
    *Docker Compose*.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose：这是一个允许您定义和共享多容器定义的工具；详细内容请参阅[第5章](c95f93e2-7a70-421a-9d89-287229339234.xhtml)
    *Docker Compose*。
- en: '**Docker Machine**: A tool to launch Docker hosts on multiple platforms; we
    will cover this in [Chapter 7](a3e97e6a-b5ec-4446-9f1b-e7738b8c7b8f.xhtml), *Docker
    Machine*.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine：一个在多个平台上启动Docker主机的工具；我们将在[第7章](a3e97e6a-b5ec-4446-9f1b-e7738b8c7b8f.xhtml)
    *Docker Machine*中介绍这个工具。
- en: '**Docker Hub**: A repository for your Docker images, covered in the next three
    chapters.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub：您的Docker镜像的存储库，将在接下来的三章中介绍。
- en: '**Docker Store**: A storefront for official Docker images and plugins as well
    as licensed products. Again, we will cover this in the next three chapters.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Store：官方Docker镜像和插件的商店，以及许可产品的存储库。同样，我们将在接下来的三章中介绍这个。
- en: '**Docker Swarm**: A multi-host-aware orchestration tool, covered in detail
    in [Chapter 8](1c5ca271-e40d-48c9-9fb2-c50e9535953b.xhtml), *Docker Swarm*.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm：一个多主机感知编排工具，详细介绍请参阅[第8章](1c5ca271-e40d-48c9-9fb2-c50e9535953b.xhtml)
    *Docker Swarm*。
- en: '**Docker for Mac**: We have covered Docker for Mac in this chapter.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker for Mac：我们在本章中已经介绍了Docker for Mac。
- en: '**Docker for Windows**: We have covered Docker for Windows in this chapter.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker for Windows：我们在本章中已经介绍了Docker for Windows。
- en: '**Docker for Amazon Web Services**: A best-practice Docker Swarm installation
    that targets AWS, covered in [Chapter 10](bf4a8290-adec-4c24-ace3-83c27948f594.xhtml),
    Running *Docker in Public Clouds*.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker for Amazon Web Services**：针对AWS的最佳实践Docker Swarm安装，详见[第10章](bf4a8290-adec-4c24-ace3-83c27948f594.xhtml)，在*公共云中运行Docker*中有介绍。'
- en: '**Docker for Azure**: A best-practice Docker Swarm installation that targets
    Azure, covered in [Chapter 10](bf4a8290-adec-4c24-ace3-83c27948f594.xhtml), Running *Docker
    in Public Clouds.*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker for Azure**：针对Azure的最佳实践Docker Swarm安装，详见[第10章](bf4a8290-adec-4c24-ace3-83c27948f594.xhtml)，在*公共云中运行Docker*中有介绍。'
- en: Docker, Inc.
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker, Inc.
- en: Docker, Inc. is the company formed to develop Docker CE and Docker EE. It also
    provides SLA-based support services for Docker EE. Finally, they are offer consultative
    services to companies who wish take their existing applications and containerize
    them as part of Docker's **Modernize Traditional Apps** (**MTA**) program.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Docker, Inc.是成立的公司，负责开发Docker CE和Docker EE。它还为Docker EE提供基于SLA的支持服务。最后，他们为希望将现有应用程序容器化的公司提供咨询服务，作为Docker的**现代化传统应用**（**MTA**）计划的一部分。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some basic information that you should already know
    (or now know) for the chapters ahead. We went over the basics of what Docker is,
    and how it fares compared to other host types. We went over the installers, how
    they operate on different operating systems, and how to control them through the
    command line. Be sure to remember to look at the requirements for the installers
    to ensure you use the correct one for your operating system.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了一些基本信息，这些信息您应该已经知道（或现在知道）用于接下来的章节。我们讨论了Docker的基本知识，以及与其他主机类型相比的优势。我们讨论了安装程序，它们在不同操作系统上的操作方式，以及如何通过命令行控制它们。请务必记住查看安装程序的要求，以确保您使用适合您操作系统的正确安装程序。
- en: Then, we took a small dive into using Docker and issued a few basic commands
    to get you started. We will be looking at all of the management commands in future
    chapters, to get a more in-depth understanding of what they are, as well as how
    and when to use them. Finally, we discussed the Docker ecosystem and the responsibilities
    of each of the different tools.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们深入了解了如何使用Docker，并发出了一些基本命令来帮助您入门。在未来的章节中，我们将研究所有管理命令，以更深入地了解它们是什么，以及如何何时使用它们。最后，我们讨论了Docker生态系统以及不同工具的责任。
- en: In the next chapters, we will be taking a look at how to build base containers,
    and we will also look in depth at Dockerfiles and places to store your images,
    as well as using environmental variables and Docker volumes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看看如何构建基本容器，我们还将深入研究Dockerfile和存储图像的位置，以及使用环境变量和Docker卷。
- en: Questions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Where can you download Docker for Mac and Docker for Windows from?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从哪里下载Mac版Docker和Windows版Docker？
- en: What command did we use to download the NGINX image?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个命令来下载NGINX镜像？
- en: Which open source project is upstream for the core Docker Engine?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个开源项目是核心Docker Engine的上游项目？
- en: How many months are in the support lifecycle for a stable Docker CE release?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 稳定的Docker CE版本的支持生命周期有多少个月？
- en: Which command would you run to find out more information on the Docker container
    subset of commands?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会运行哪个命令来查找有关Docker容器子集命令的更多信息？
- en: Further reading
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In this chapter we have mentioned the following hypervisors:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提到了以下虚拟化程序：
- en: macOS Hypervisor framework: [https://developer.apple.com/reference/hypervisor/](https://developer.apple.com/reference/hypervisor/)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS Hypervisor框架：[https://developer.apple.com/reference/hypervisor/](https://developer.apple.com/reference/hypervisor/)
- en: Hyper-V: [https://www.microsoft.com/en-gb/cloud-platform/server-virtualization](https://www.microsoft.com/en-gb/cloud-platform/server-virtualization)
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hyper-V: [https://www.microsoft.com/en-gb/cloud-platform/server-virtualization](https://www.microsoft.com/en-gb/cloud-platform/server-virtualization)'
- en: 'We referenced the following blog posts from Docker:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'We referenced the following blog posts from Docker:'
- en: Docker CLI restructure blog post: [https://blog.docker.com/2017/01/whats-new-in-docker-1-13/](https://blog.docker.com/2017/01/whats-new-in-docker-1-13/)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker CLI restructure blog post: [https://blog.docker.com/2017/01/whats-new-in-docker-1-13/](https://blog.docker.com/2017/01/whats-new-in-docker-1-13/)'
- en: Docker Extended Support Announcement: [https://blog.docker.com/2018/07/extending-support-cycle-docker-community-edition/](https://blog.docker.com/2018/07/extending-support-cycle-docker-community-edition/)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker Extended Support Announcement: [https://blog.docker.com/2018/07/extending-support-cycle-docker-community-edition/](https://blog.docker.com/2018/07/extending-support-cycle-docker-community-edition/)'
- en: 'Next up, we discussed the following open source projects:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'Next up, we discussed the following open source projects:'
- en: Moby Project: [https://mobyproject.org/](https://mobyproject.org/)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Moby Project: [https://mobyproject.org/](https://mobyproject.org/)'
- en: Runc: [https://github.com/opencontainers/runc](https://github.com/opencontainers/runc)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Runc: [https://github.com/opencontainers/runc](https://github.com/opencontainers/runc)'
- en: Containerd: [https://containerd.io/](https://containerd.io/)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Containerd: [https://containerd.io/](https://containerd.io/)'
- en: LibNetwork; [https://github.com/docker/libnetwork](https://github.com/docker/libnetwork)
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LibNetwork; [https://github.com/docker/libnetwork](https://github.com/docker/libnetwork)
- en: Notary: [https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Notary: [https://github.com/theupdateframework/notary](https://github.com/theupdateframework/notary)'
- en: HyperKit: [https://github.com/moby/hyperkit](https://github.com/moby/hyperkit)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'HyperKit: [https://github.com/moby/hyperkit](https://github.com/moby/hyperkit)'
- en: VPNKit: [https://github.com/moby/vpnkit](https://github.com/moby/vpnkit)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VPNKit: [https://github.com/moby/vpnkit](https://github.com/moby/vpnkit)'
- en: DataKit: [https://github.com/moby/datakit](https://github.com/moby/datakit)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DataKit: [https://github.com/moby/datakit](https://github.com/moby/datakit)'
- en: SwarmKit: [https://github.com/docker/swarmkit](https://github.com/docker/swarmkit)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SwarmKit: [https://github.com/docker/swarmkit](https://github.com/docker/swarmkit)'
- en: LinuxKit: [https://github.com/linuxkit/linuxkit](https://github.com/linuxkit/linuxkit)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LinuxKit: [https://github.com/linuxkit/linuxkit](https://github.com/linuxkit/linuxkit)'
- en: InfraKit: [https://github.com/docker/infrakit](https://github.com/docker/infrakit)
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'InfraKit: [https://github.com/docker/infrakit](https://github.com/docker/infrakit)'
- en: The OCI specification: [https://github.com/opencontainers/runtime-spec/](https://github.com/opencontainers/runtime-spec/)
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'The OCI specification: [https://github.com/opencontainers/runtime-spec/](https://github.com/opencontainers/runtime-spec/)'
- en: 'Finally, the meme mentioned at the start of the chapter can be found here:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'Finally, the meme mentioned at the start of the chapter can be found here:'
- en: '*Worked fine in Dev, Ops problem now* - [http://www.developermemes.com/2013/12/13/worked-fine-dev-ops-problem-now/](http://www.developermemes.com/2013/12/13/worked-fine-dev-ops-problem-now/)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Worked fine in Dev, Ops problem now* - [http://www.developermemes.com/2013/12/13/worked-fine-dev-ops-problem-now/](http://www.developermemes.com/2013/12/13/worked-fine-dev-ops-problem-now/)'
