["```cs\ndouble Div(double a, double b) { ... }\n```", "```cs\nint Div(double a, double b, out double result) { ... }\n```", "```cs\nvar api = new SomeApi();\nif (api.Begin() == 0)\n{\n\u00a0\u00a0\u00a0\u00a0if (api.DoWork() == 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0api.End();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nif (!File.Exists(filename)) return null;\nvar content = File.ReadAllText(filename);\n```", "```cs\ntry\n{\n\u00a0\u00a0\u00a0\u00a0var content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0return content.Length;\n}\ncatch (Exception) { /* ... */ }\nreturn 0;\n```", "```cs\ntry\n{\n\u00a0\u00a0\u00a0\u00a0if (validateExistence && !File.Exists(filename)) return 0;\n\u00a0\u00a0\u00a0\u00a0var content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0return content.Length;\n}\ncatch (ArgumentNullException) { /* ... */ }\ncatch (IOException) { /* ... */ }\ncatch (UnauthorizedAccessException) { /* ... */ }\ncatch (Exception) { /* ... */ }\n```", "```cs\nerror CS0160: A previous catch clause already catches all exceptions of this or of a super type ('Exception')\n```", "```cs\npublic string ReadTextFile(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return content;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (ArgumentNullException) { /* ... */ }\n\u00a0\u00a0\u00a0\u00a0return null;\n}\npublic void WriteTextFile(string filename, string content)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File.WriteAllText(filename, content);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (ArgumentNullException) { /* ... */ }\n}\n```", "```cs\npublic void CopyReversedTextFile(string source, string target)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var content = ReadTextFile(source);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content = content.Replace(\"\\r\\n\", \"\\r\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WriteTextFile(target, content);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (IOException) { /*...*/ }\n}\n```", "```cs\nint[] GetFileLengths(params string[] filenames)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var sizes = new int[filenames.Length];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int i = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach(var filename in filenames)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sizes[i++] = content.Length;\u00a0\u00a0// may differ from file size\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sizes;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (FileNotFoundException err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Debug.WriteLine($\"Cannot find {err.FileName}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return null;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nprivate void CopyFrom(string source)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var target = CreateFilename(source);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File.Copy(source, target);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (ArgumentException err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Debug.WriteLine($\"The parameter {err.ParamName} is invalid\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nprivate void CopyFrom(string source)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var target = CreateFilename(source);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0File.Copy(source, target);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (ArgumentException err) when (err.ParamName == \"destFileName\")\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Debug.WriteLine($\"The parameter {err.ParamName} is invalid\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nprivate string ReadLog(string logName)\n{\n\u00a0\u00a0\u00a0\u00a0return File.ReadAllText(logName);\n}\n```", "```cs\nprivate string ReadLog(string logName)\n{\n\u00a0\u00a0\u00a0\u00a0var filename = \"App-\" + (logName.EndsWith(\".log\") ? logName : logName + \".log\");\n\u00a0\u00a0\u00a0\u00a0return File.ReadAllText(filename);\n}\n```", "```cs\nprivate string ReadLog(string logName)\n{\n\u00a0\u00a0\u00a0\u00a0if(logName == null) throw new ArgumentNullException(nameof(logName));\n\u00a0\u00a0\u00a0\u00a0var filename = \"App-\" + (logName.EndsWith(\".log\") ? logName : logName + \".log\");\n\u00a0\u00a0\u00a0\u00a0return File.ReadAllText(filename);\n}\n```", "```cs\npublic int Loop { get; } = 1000;\n[Benchmark]\npublic void LoopNop()\n{\n\u00a0\u00a0\u00a0\u00a0for (var i = 0; i < Loop; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try { Nop(i); }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (Exception) { }\n\u00a0\u00a0\u00a0\u00a0}\n}\n[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]\nprivate void Nop(int i) { }\n```", "```cs\n[Benchmark]\npublic void LoopEx()\n{\n\u00a0\u00a0\u00a0\u00a0for (var i = 0; i < Loop; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try { Crash(i); }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch (Exception) { }\n\u00a0\u00a0\u00a0\u00a0}\n}\n[MethodImpl(MethodImplOptions.NoOptimization | MethodImplOptions.NoInlining)]\nprivate void Crash(int i) => \n\u00a0\u00a0\u00a0\u00a0throw new InvalidOperationException();\n```", "```cs\n|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Method |\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mean |\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Error | Allocated |\n|-------------- |--------------:|------------:|----------:|\n|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LoopNop |\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.284 us |\u00a0\u00a0\u00a00.0444 us |\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- |\n|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LoopEx | 25,365.467 us | 486.2660 us |\u00a0\u00a0320000 B |\n```", "```cs\npublic class DataLayerException : Exception\n{\n\u00a0\u00a0\u00a0\u00a0public DataLayerException(string queryKeyword = null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.QueryKeyword = queryKeyword;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public DataLayerException(string message, string queryKeyword = null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(message)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.QueryKeyword = queryKeyword;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public DataLayerException(string message, Exception innerException, string queryKeyword = null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: base(message, innerException)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.QueryKeyword = queryKeyword;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public string QueryKeyword { get; private set; }\n}\n```", "```cs\npublic IList<string> GetCustomerNames(string queryKeyword)\n{\n\u00a0\u00a0\u00a0\u00a0var repository = new Repository();\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return repository.GetCustomerNames(queryKeyword);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new DataLayerException($\"Error on repository {repository.RepositoryName}\", err, queryKeyword);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic string ReadAllText(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log(err.ToString());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n\u00a0\u00a0\u00a0\u00a0catch (Exception err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log(err.ToString());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw err;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic void Foo()\n{\n\u00a0\u00a0\u00a0\u00a0ExceptionDispatchInfo exceptionDispatchInfo = null;\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ExecuteFunctionThatThrows();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(Exception ex)\n\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exceptionDispatchInfo = ExceptionDispatchInfo.Capture(ex);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0// do something you cannot do in the catch block\n\n\u00a0\u00a0\u00a0\u00a0// rethrow\n\u00a0\u00a0\u00a0\u00a0if (exceptionDispatchInfo != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exceptionDispatchInfo.Throw();\n}\n```", "```cs\nprivate void M1()\n{\n\u00a0\u00a0\u00a0\u00a0try { M2(); }\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { Debug.WriteLine(\"catch in M1\"); }\n\u00a0\u00a0\u00a0\u00a0finally { Debug.WriteLine(\"finally in M1\"); }\n}\nprivate void M2()\n{\n\u00a0\u00a0\u00a0\u00a0try { M3(); }\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { Debug.WriteLine(\"catch in M2\"); }\n\u00a0\u00a0\u00a0\u00a0finally { Debug.WriteLine(\"finally in M2\"); }\n}\nprivate void M3()\n{\n\u00a0\u00a0\u00a0\u00a0try { Crash(); }\n\u00a0\u00a0\u00a0\u00a0finally { Debug.WriteLine(\"finally in M3\"); }\n}\nprivate void Crash() => throw new Exception(\"Boom\");\n```", "```cs\nfinally in M3\ncatch in M2\nfinally in M2\nfinally in M1\n```", "```cs\nvoid FinallyBlock()\n{\n\u00a0\u00a0\u00a0\u00a0Resource res = new Resource();\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0finally\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res?.Dispose();\n\u00a0\u00a0\u00a0\u00a0}\n}\nvoid UsingStatement()\n{\n\u00a0\u00a0\u00a0\u00a0using(var res = new Resource())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic void TestMethod1() => Crash1();\nprivate void Crash1() => throw new Exception(\"This will make the app crash\");\n```", "```cs\nException thrown: 'System.Exception' in ExceptionDiagnostics.dll\nAn unhandled exception of type 'System.Exception' occurred in ExceptionDiagnostics.dll\nThis will make the app crash\n```", "```cs\npublic void TestMethod2() => Crash2(null);\nprivate void Crash2(string str) => Console.WriteLine(str.Length);\n```", "```cs\n**str** was null.\n```", "```cs\npublic void TestMethod3()\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Crash1();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { }\n}\n```", "```cs\nAppDomain.CurrentDomain.FirstChanceException += CurrentDomain_FirstChanceException;\nAppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n// ...\nprivate static void CurrentDomain_FirstChanceException(object sender,\u00a0\u00a0\u00a0\u00a0\u00a0System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs e)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"First-Chance. {e.Exception.Message}\");\n}\nprivate static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n{\n\u00a0\u00a0\u00a0\u00a0var ex = (Exception)e.ExceptionObject;\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Unhandled Exception. IsTerminating: {e.IsTerminating} - {ex.Message}\");\n}\n```", "```cs\nprivate static void Dump(Exception err)\n{\n\u00a0\u00a0\u00a0\u00a0var current = err;\n\u00a0\u00a0\u00a0\u00a0while (current != null)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(current.InnerException?.Message);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current = current.InnerException;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```"]