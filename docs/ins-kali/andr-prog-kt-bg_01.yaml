- en: Chapter 1. Getting Started with Android and Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。开始使用安卓和Kotlin
- en: Welcome to *the exciting world of Android and Kotlin*! In this first chapter,
    we won't waste any time before getting started developing Android apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*令人兴奋的安卓和Kotlin世界*！在这第一章中，我们将立即开始开发安卓应用程序，不会浪费任何时间。
- en: We will look at what is so great about Android, what Android and Kotlin are,
    how they work and complement each other, and what that means to us as future developers.
    Moving on, we will set up the required software, so that we can build and deploy
    a simple first app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看安卓有什么好处，安卓和Kotlin是什么，它们如何协同工作和互补，以及对我们作为未来开发者意味着什么。接下来，我们将设置所需的软件，以便我们可以构建和部署一个简单的第一个应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning how Kotlin and Android work together
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Kotlin和安卓如何协同工作
- en: Setting up our development environment, Android Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的开发环境，安卓Studio
- en: Learning what makes an android app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习什么是安卓应用程序
- en: Learning about Kotlin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Kotlin
- en: Building our very first Android app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建我们的第一个安卓应用程序
- en: Deploying an Android emulator
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署安卓模拟器
- en: Running our app on an Android emulator and a real device
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在安卓模拟器和真实设备上运行我们的应用程序
- en: This is a lot to get through, so let's get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很多内容要学习的，所以让我们开始吧。
- en: Why use Kotlin and Android?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Kotlin和安卓？
- en: When Android first arrived in 2008, it was a bit drab compared to the much more
    stylish iOS on the Apple iPhone/iPad. But, quite quickly, through a variety of
    handset offers that struck a chord with practical, price-conscious consumers,
    as well as those who are fashion-conscious and tech-savvy, Android user numbers
    exploded.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当安卓于2008年首次出现时，与苹果iPhone/iPad上更时尚的iOS相比，它显得有些沉闷。但是，通过一系列与实用、价格敏感的消费者以及时尚意识和技术精通的消费者产生共鸣的手机产品，安卓用户数量迅速增加。
- en: For many, myself included, developing for Android is the most rewarding pastime
    and business, bar none.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多人来说，包括我自己在内，为安卓开发是最有回报的业余爱好和商业。
- en: Quickly putting together a prototype of an idea, refining it, and then deciding
    to run with it and wire it up into a fully-fledged app, is such an exciting and
    rewarding process. Any programming can be fun – I have been programming all my
    life – but creating for Android is somehow extraordinarily rewarding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 快速地将一个想法的原型组合起来，完善它，然后决定运行并将其连接成一个完整的应用程序，这是一个令人兴奋和有回报的过程。任何编程都可以很有趣 - 我一生都在编程
    - 但为安卓创造东西却是非常有回报的。
- en: Defining exactly why this is the case is quite difficult. Perhaps it is the
    fact that the platform is free and open. You can distribute your apps without
    needing the permission of a big controlling corporation – nobody can stop you.
    And, at the same time, you have well-established, corporate-controlled mass markets,
    such as Amazon Appstore and Google Play.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确切地定义为什么会这样很难。也许是因为这个平台是免费和开放的。你可以在不需要大型控制公司的许可下分发你的应用程序 - 没有人能阻止你。同时，你也可以在亚马逊应用商店和谷歌Play等成熟的、由公司控制的大众市场上分发应用。
- en: It is more likely, however, that the reason that developing for Android gives
    such a good feeling is the nature of the devices themselves. They are deeply personal.
    You can develop apps that interact with people's lives, which educate, entertain,
    tell a story, and so on, and it is there in their pocket ready to go – in the
    home, in the workplace, or on holiday.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更有可能的是，为什么为安卓开发会给人如此好的感觉是因为设备本身的性质。它们是非常个人化的。你可以开发与人们生活互动的应用程序，教育、娱乐、讲故事等等，它就在他们的口袋里准备好了
    - 在家里、工作场所或度假中。
- en: You can certainly build something bigger for the desktop but knowing that thousands
    (or millions) of people are carrying your work in their pockets and sharing it
    with friends is more than just a buzz.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你当然可以为桌面构建更大的东西，但知道成千上万（甚至数百万）的人将你的作品装在口袋里并与朋友分享，这不仅仅是一种兴奋。
- en: No longer is developing apps considered geeky, nerdy, or reclusive. In fact,
    developing for Android is considered highly skillful, and the most successful
    developers are hugely admired, even revered.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 开发应用程序不再被认为是怪异、书呆子或隐居。事实上，为安卓开发被认为是非常有技巧的，最成功的开发者受到极大的钦佩，甚至崇敬。
- en: If all this fluffy, spiritual stuff doesn't mean anything to you, then that's
    fine too; developing for Android can make you a living, or even make you wealthy.
    With the continued growth of device ownership, the ongoing increase in CPU and
    GPU power, and the non-stop evolution of the Android operating system itself,
    the need for professional app developers is only going to grow.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些空洞的、精神上的东西对你毫无意义，那也没关系；为安卓开发可以让你谋生，甚至让你致富。随着设备拥有量的持续增长，CPU和GPU性能的不断提升，以及安卓操作系统本身的不断演进，对专业应用程序开发者的需求只会增长。
- en: In short, the best Android developers – and, more importantly, the Android developers
    with the best ideas and the most determination – are in greater demand than ever.
    Nobody knows who these future Android app developers are, and they might not even
    have written their first line of code yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，最优秀的安卓开发者 - 更重要的是，拥有最佳创意和最大决心的安卓开发者 - 比以往任何时候都更受欢迎。没有人知道这些未来的安卓应用程序开发者是谁，他们甚至可能还没有写下他们的第一行代码。
- en: So, why isn't everybody an Android developer? Obviously, not everybody will
    share my enthusiasm for the thrill of creating software that can help make people's
    lives better, but I am guessing that, because you are reading this, you might.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么不是每个人都是安卓开发者呢？显然，并不是每个人都会像我一样对创造能够帮助改善人们生活的软件充满热情，但我猜测，因为你正在阅读这篇文章，你可能会。
- en: The beginner's first stumbling block
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初学者的第一个绊脚石
- en: Unfortunately, for those who do share my enthusiasm, there is a kind of glass
    wall on the path of progress that frustrates many aspiring Android developers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对于那些和我一样对此充满热情的人来说，进步的道路上存在一种玻璃墙，这让许多有抱负的安卓开发者感到沮丧。
- en: Android asks aspiring developers to choose from three programming languages
    to make apps. Every Android book, even those aimed at so-called beginners, assumes
    that readers have at least an intermediate level of Kotlin, C++, or Java, and
    most need an advanced level. So, good-to-excellent programming knowledge is considered
    a prerequisite for learning Android.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Android要求有志成为开发者的人选择三种编程语言来制作应用程序。每一本Android书籍，即使是针对所谓的初学者，也都假设读者至少具有中级水平的Kotlin、C++或Java，大多数需要高级水平。因此，良好到优秀的编程知识被视为学习Android的先决条件。
- en: Unfortunately, learning these languages in a completely different context to
    Android can sometimes be a little dull, and much of what you learn is not directly
    transferable into the world of Android either. You can see why beginners to Android
    are often put off.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在完全不同的环境中学习这些语言有时可能会有点乏味，而你学到的大部分知识也不能直接转移到Android的世界中。你可以理解为什么初学者对Android往往感到厌倦。
- en: It doesn't need to be like this. In this book, I have carefully placed all the
    Kotlin topics that you would learn in a thick and weighty Kotlin-only beginner's
    tome, and reworked them into three multi-chapter apps and more than a dozen quick
    mini-apps, starting from a simple memo app, progressing to a cool drawing app
    and a database app.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不需要这样。在这本书中，我精心安排了你在厚重的Kotlin初学者专著中学到的所有Kotlin主题，并将它们重新制作成了三个多章节的应用程序和十多个快速的迷你应用程序，从一个简单的备忘录应用程序开始，逐渐发展到一个酷炫的绘图应用程序和一个数据库应用程序。
- en: If you want to become a professional Android developer, or just want to have
    more fun when learning Kotlin and Android, this book will help.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想成为一名专业的Android开发者，或者只是想在学习Kotlin和Android时更有乐趣，这本书会帮助你。
- en: How Kotlin and Android work together
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin和Android是如何协同工作的
- en: The **Android Software Development Kit** (**SDK**) is largely written in Java,
    because Kotlin is the new kid on the block; but when we tell Android Studio to
    turn our Kotlin code into a working app, it is merged together with the Java from
    the SDK in an intermediate form before being converted into a format called DEX
    code, which the Android device uses to convert into a running app. This is seamless
    to us as developers, but it is worth knowing (and, perhaps, is quite interesting)
    to know what is going on behind the scenes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android软件开发工具包**（**SDK**）主要是用Java编写的，因为Kotlin是新生力量；但是当我们告诉Android Studio将我们的Kotlin代码转换成可工作的应用程序时，它会与SDK中的Java合并在一起，形成一种中间形式，然后转换成一种称为DEX代码的格式，这是Android设备用来转换成运行应用程序的。对于我们开发者来说，这是无缝的，但了解这一点（也许是相当有趣的）是值得的。'
- en: Whether you have programmed your app in Kotlin or Java, the resulting DEX code
    is the same. However, there are some significant advantages to working with Kotlin.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是用Kotlin还是Java编写应用程序，最终的DEX代码都是一样的。然而，使用Kotlin有一些显著的优势。
- en: Kotlin is named after an island near St Petersburg, Russia. Kotlin is very similar
    to Apple's Swift language, so learning Kotlin now will stand you in very good
    stead for learning iPhone/iPad development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是以俄罗斯圣彼得堡附近的一个岛屿命名的。Kotlin与苹果的Swift语言非常相似，因此现在学习Kotlin将为学习iPhone/iPad开发奠定良好的基础。
- en: Kotlin is the most succinct language, and therefore is the least error-prone,
    which is great for beginners. Kotlin is also the most fun language, mainly because
    the succinctness means you can get results faster and with less code. Google considers
    Kotlin an official (first-class) Android language. There are some other advantages
    to Kotlin that make it less error-prone and less likely to make mistakes that
    cause crashes. We will discover the details of these advantages as we proceed.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是最简洁的语言，因此最不容易出错，这对初学者来说非常好。Kotlin也是最有趣的语言，主要是因为简洁性意味着你可以更快地得到结果，而且代码更少。谷歌认为Kotlin是官方（一流）的Android语言。Kotlin还有一些其他优点，使其更不容易出错，也不太可能出现导致崩溃的错误。随着我们的学习，我们将发现这些优点的细节。
- en: Loads of the most advanced, innovative, and popular apps were coded using Kotlin.
    Just a few examples include Kindle, Evernote, Twitter, Expedia, Pinterest, and
    Netflix.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多最先进、创新和流行的应用程序都是使用Kotlin编写的。其中一些例子包括Kindle、Evernote、Twitter、Expedia、Pinterest和Netflix。
- en: Before we start our Android quest, we need to understand how Android and Kotlin
    work together. After we write a program for Android, either in Java or Kotlin,
    we click a button and our code is transformed into another form, a form that is
    understood by Android. This other form is called **Dalvik Executable,** or **DEX**
    code, and the transformation process is called **compiling**. When the app is
    installed on a device, the DEX code is transformed again by the operating system
    into an optimized executable state.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始Android之旅之前，我们需要了解Android和Kotlin是如何协同工作的。在我们用Java或Kotlin为Android编写程序之后，我们点击一个按钮，我们的代码就会被转换成另一种形式，这种形式是Android可以理解的。这种形式被称为**达尔维克可执行代码**，或**DEX**代码，转换过程被称为**编译**。当应用程序安装在设备上时，DEX代码会被操作系统再次转换成优化的可执行状态。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will see this process in action right after we set up our development environment
    later on in the chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面设置开发环境后立即看到这个过程。
- en: Android is a complex system, but you do not need to understand it in depth to
    be able to start making amazing apps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个复杂的系统，但你不需要深入了解它就能开始制作令人惊叹的应用程序。
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A full understanding will come after using and interacting with it over time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在长时间的使用和互动之后才能完全理解。
- en: To get started, we only need to understand the basics. Android runs on a specially
    adapted version of the Linux operating system. So, what the user sees of Android
    is just an app running on yet another operating system.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们只需要了解基础知识。Android运行在一个经过特殊适配的Linux操作系统上。因此，用户在Android上看到的只是在另一个操作系统上运行的应用程序。
- en: Android is a system within a system. The typical Android user doesn't see the
    Linux operating system, and most probably doesn't even know it is there.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个系统中的系统。典型的Android用户看不到Linux操作系统，很可能甚至不知道它的存在。
- en: 'One purpose of this is to hide the complexity and diversity of the hardware
    and software that Android runs on, but, at the same time, exposing all its useful
    features. The exposure of these features works in two ways:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个目的是隐藏Android运行的硬件和软件的复杂性和多样性，但同时暴露出所有有用的功能。这些功能的暴露以两种方式进行：
- en: First, the operating system itself must have full access to the hardware, which
    it does.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，操作系统本身必须完全访问硬件，它已经做到了。
- en: Second, this access must be programmer-friendly and easy to use, and it is because
    of the Android **application programming interface** (**API)**.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，这种访问必须对程序员友好且易于使用，这是因为Android **应用程序编程接口**（**API**）。
- en: Let's continue by looking further into the Android API.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续深入了解Android API。
- en: The Android API
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android API
- en: The Android API is code that makes it easy to do exceptional things. A simple
    analogy could be drawn with a machine, perhaps a car. When you press on the accelerator,
    a whole bunch of things happen under the hood. We don't need to understand combustion
    or fuel pumps, because some smart engineer has made an **interface** for us; in
    this case, a mechanical interface – the accelerator pedal.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Android API是使得做出非凡事情变得容易的代码。一个简单的类比可以用一台机器来画出，也许是一辆汽车。当你踩油门时，引擎盖下会发生一大堆事情。我们不需要理解燃烧或燃油泵，因为一些聪明的工程师为我们做了一个**接口**；在这种情况下，是一个机械接口——油门踏板。
- en: 'For example, the following line of code probably looks a little intimidating
    at this stage in the book, but it serves as a good example of how the Android
    API helps us:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面这行代码在书的这个阶段可能看起来有点吓人，但它是一个很好的例子，说明了Android API如何帮助我们：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you learn that this single line of code searches for available satellites
    in space, communicates with them in their orbits around the Earth, and then retrieves
    your precise latitude and longitude on the surface of the planet, it becomes easy
    to glimpse the power and depth of the Android API.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你学会了这一行代码搜索太空中可用的卫星，与它们在地球轨道上通信，然后获取你在地球表面的精确纬度和经度，你就能轻松地窥见Android API的强大和深度。
- en: That code does look a little challenging, even mind-boggling at this stage of
    the book, but imagine trying to talk to a satellite some other way!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在书的这个阶段看起来有点具有挑战性，甚至令人费解，但试想以其他方式与卫星交流！
- en: The Android API has a whole bunch of code that has already been written for
    us to use as we like.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Android API已经编写了大量代码供我们随意使用。
- en: 'The question we must ask, and the one this book tries to answer, is as follows:
    how do we use all this code to do cool stuff? Or, to frame the question to fit
    the earlier analogy: how do we find and manipulate the pedals, steering wheel,
    and, most importantly, the sunroof of the Android API?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须问的问题，也是这本书试图回答的问题是：我们如何使用所有这些代码来做酷炫的事情？或者，为了符合之前的类比，我们如何找到和操作Android API的踏板、方向盘，以及最重要的是天窗？
- en: The answer to this question is the Kotlin programming language, and the fact
    that Kotlin was designed to help programmers handle complexity, avoid mistakes,
    and make fast progress. Let's look deeper into Kotlin and **object-oriented programming**
    (**OOP**).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案就是Kotlin编程语言，以及Kotlin被设计来帮助程序员处理复杂性，避免错误，并快速取得进展。让我们深入了解Kotlin和**面向对象编程**（**OOP**）。
- en: Kotlin is object-oriented
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kotlin是面向对象的
- en: Kotlin is an **object-oriented** language. This means that it uses the concept
    of reusable programming objects. If this sounds like technical jargon, another
    analogy will help. Kotlin enables us and others (like the Android API development
    team) to write code that can be structured based on real-world things, and here
    is the important part – it can be **reused**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是一种**面向对象**的语言。这意味着它使用可重用的编程对象的概念。如果这听起来像技术术语，另一个类比将有所帮助。Kotlin使我们和其他人（比如Android
    API开发团队）能够编写可以基于现实世界事物构建的代码，这是重要的部分——它可以**重复使用**。
- en: 'So, using the car analogy, we could ask the following question: if a manufacturer
    makes more than one car in a day, do they redesign every part for every car that
    comes off the production line?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用汽车的类比，我们可以问以下问题：如果一个制造商一天制造多辆汽车，他们是否为每辆汽车重新设计每个零件？
- en: The answer, of course, is no. They get highly skilled engineers to develop exactly
    the right components, honed, refined, and improved over years. Then, those same
    components are reused again and again, as well as being occasionally improved.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，答案是否定的。他们会找到高技能的工程师来开发完全正确的组件，经过多年的磨练、改进和提高。然后，这些相同的组件会一次又一次地被重复使用，偶尔也会被改进。
- en: If you are going to be fussy about my analogy, then you can point out that each
    of the car's components must still be built from the raw materials using real-life
    engineers or robots. This is true.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对我的类比挑剔的话，你可以指出每个汽车的组件仍然必须使用真实的工程师或机器人从原材料中构建。这是真的。
- en: What software engineers do when they write their code is build a blueprint for
    an object. We then create an object from their blueprint using code and once we
    have that object, we can configure it, use it, combine it with other objects,
    and more besides.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师编写代码时所做的是为一个对象建立一个蓝图。然后我们使用代码从他们的蓝图中创建一个对象，一旦我们有了那个对象，我们可以配置它，使用它，将它与其他对象组合，以及其他更多的操作。
- en: Furthermore, we can design blueprints ourselves and make objects from them.
    The compiler then transforms (manufactures) our bespoke creation into DEX code.
    Hey presto! We have an Android app.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以自己设计蓝图并从中制作对象。然后编译器将我们定制的创作转化为DEX代码。嘿，变魔术！我们有了一个Android应用。
- en: In Kotlin, a blueprint is called a **class.** When a class is transformed into
    a real working "thing," we call it an **object** or an **instance** of the class.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，蓝图被称为**类**。当一个类被转化为一个真正工作的“东西”时，我们称它为该类的**对象**或**实例**。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Objects in short.**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**简而言之，对象。**'
- en: We could go on making analogies all day long. As far as we care at this point,
    Kotlin (and most modern programming languages) is a language that allows us to
    write code once that can then be used repeatedly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行类比。就我们目前而言，Kotlin（以及大多数现代编程语言）是一种允许我们编写一次代码，然后可以重复使用的语言。
- en: This is very useful because it saves us time, and allows us to use other people's
    code to perform tasks we might otherwise not have the time or knowledge to write
    for ourselves. Most of the time, we do not even need to see this code, or even
    know how it does its work!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为它节省了我们的时间，并且允许我们使用其他人的代码来执行我们可能没有时间或知识来编写的任务。大多数情况下，我们甚至不需要看到这段代码，甚至不需要知道它是如何工作的！
- en: One last analogy. We just need to know how to use that code, just as we need
    to learn how to drive a car.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个类比。我们只需要知道如何使用那段代码，就像我们需要学会开车一样。
- en: So, some smart software engineers up at Android HQ write a desperately complex
    program that can talk to satellites, and as a result of this, in a single line
    of code, we can get our location on the surface of the planet. Nice.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Android总部的一些聪明的软件工程师编写了一个非常复杂的程序，可以与卫星通信，因此，通过一行代码，我们就可以在地球表面获得我们的位置。不错。
- en: Most of the Android API is written in another language (Java), but this doesn't
    matter to us as we have full access to the functionality (coded in Java) while
    using the more succinct Kotlin. Android Studio and the Kotlin compiler handle
    the complexities behind the scenes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分Android API是用另一种语言（Java）编写的，但这对我们来说并不重要，因为我们在使用更简洁的Kotlin时可以完全访问到这些功能（用Java编码）。Android
    Studio和Kotlin编译器会在幕后处理复杂性。
- en: The software engineers have considered how they can make this code useful to
    all Android programmers who want to make amazing apps that use users' locations
    to do cool things. One of the things they will do is make features, such as getting
    the device's location in the world into a simple one-line task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师已经考虑了如何使这段代码对所有想要开发使用用户位置进行酷炫操作的Android程序员有用。他们将做的一件事是使功能变得简单，比如将设备的位置获取到世界上变成一个简单的一行任务。
- en: So, the single line of code we saw previously sets in action many more lines
    of code that we don't see, and don't need to see. This is an example of using
    somebody else's code to make our code infinitely simpler.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们之前看到的一行代码会启动许多我们看不到、也不需要看到的代码。这是一个使用别人的代码来使我们的代码变得无限简单的例子。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the fact that you don't have to see all the code is a disappointment to you,
    then I understand how you feel. Some of us, when we learn about something, want
    to learn every intricate detail. If this is you, then be reassured that the best
    place to start learning how the Android API works internally is to use it as the
    API programmers intended. And, throughout the book, I will regularly point out
    further learning opportunities where you can find out the inner workings of the
    Android API. Also, we will be writing classes that are themselves reusable, kind
    of like our own API, except that our classes will focus on what we want our app
    to do.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不必看到所有的代码让你感到失望，那么我理解你的感受。当我们学习某些东西时，有些人希望了解每一个细节。如果你是这样的人，那么请放心，学习Android
    API内部工作的最佳起点是按照API程序员的意图使用它。此外，在整本书中，我将定期指出更多的学习机会，让你了解Android API的内部工作。此外，我们将编写自己可重用的类，有点像我们自己的API，只是我们的类将专注于我们希望我们的应用程序执行的任务。
- en: Welcome to the world of **OOP**. I will constantly refer to OOP in every chapter,
    and there will be a big reveal in [Chapter 10](ch10.html "Chapter 10. Object-Oriented
    Programming"), *Object-Oriented Programming*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到**OOP**的世界。我将在每一章中不断提到OOP，并且在[第10章](ch10.html "第10章。面向对象编程")中会有一个重大揭示，*面向对象编程*。
- en: Run that by me again – what, exactly, is Android?
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再跟我说一遍，Android到底是什么？
- en: To get things done on Android, we write code of our own, which also uses the
    code of the Android API. This is then compiled into DEX code, and the rest is
    handled by the Android device, which, in turn, runs on an underlying operating
    system called Linux, which handles the complex and extremely diverse range of
    hardware that is the different Android devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上完成任务，我们编写了自己的代码，这也使用了Android API的代码。然后，这些代码被编译成DEX代码，其余的由Android设备处理，而Android设备又运行在一个称为Linux的底层操作系统上，该操作系统处理着不同的Android设备的复杂和极其多样的硬件。
- en: The manufacturers of Android devices and of the individual hardware components
    obviously know this too, and they write advanced software called **drivers** that
    ensure that their hardware (for example, CPU, GPU, GPS receivers, memory chips,
    and hardware interfaces) can run on the underlying Linux operating system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备的制造商和各个硬件组件的制造商显然也知道这一点，并且他们编写了称为**驱动程序**的高级软件，以确保他们的硬件（例如CPU、GPU、GPS接收器、存储芯片和硬件接口）可以在底层的Linux操作系统上运行。
- en: The DEX code (along with some other resources) are placed in a bundle of files
    called an **Android application package** (**APK**), and this is what the device
    needs to run our app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: DEX代码（以及其他一些资源）被放在一个称为**Android应用程序包**（**APK**）的文件包中，这就是设备运行我们的应用所需的内容。
- en: Tip
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is not necessary to remember the details of the steps that our code goes
    through when it interacts with the hardware. It is enough just to understand that
    our code goes through some automated processes to become the app that we will
    publish to the Google Play store.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要记住我们的代码与硬件交互时经历的步骤的细节。只需要理解我们的代码经历了一些自动化过程，成为了我们将发布到Google Play商店的应用程序。
- en: 'The next question is: where exactly does all this coding and compiling into
    DEX code, along with APK packaging, take place? Let''s look at the development
    environment that we will be using.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的问题是：所有这些编码和编译成DEX代码，以及APK打包，究竟是在哪里进行的？让我们看看我们将要使用的开发环境。
- en: Android Studio
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android Studio
- en: A **development environment** is a term that refers to having everything you
    need to develop, set up and ready to go in one place.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发环境**是一个术语，指的是在一个地方拥有你开发所需的一切，并且已经准备就绪。'
- en: There is an entire range of tools needed to develop for Android, and we also
    need the Android API, of course. This whole suite of requirements is collectively
    known as the SDK. Fortunately, downloading and installing a single application
    will give us these things all bundled together. The application is called Android
    Studio.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Android需要一整套工具，当然还需要Android API。这整套要求统称为SDK。幸运的是，下载和安装一个单一应用程序将把这些东西捆绑在一起。这个应用程序就是Android
    Studio。
- en: Android Studio is an **integrated development environment** (**IDE**) that will
    take care of all the complexities of compiling our code and linking with the Android
    API. Once we have installed Android Studio, we can do everything we need inside
    this single application, and put to the back of our minds many of the complexities
    we have been discussing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio是一个**集成开发环境**（**IDE**），将处理编译代码和与Android API链接的所有复杂性。安装完Android
    Studio后，我们可以在这个单一应用程序内完成所有需要做的事情，并将我们讨论过的许多复杂性放到脑后。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Over time, these complexities will become second nature. It is not necessary
    to master them immediately to make further progress.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，这些复杂性将变得很自然。不需要立即掌握它们以继续进展。
- en: So, we had better get our hands on Android Studio.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，最好还是用上Android Studio。
- en: Setting up Android Studio
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android Studio
- en: 'Setting up Android Studio is quite straightforward, if a little time-consuming.
    Grab some refreshments and get started with the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Android Studio相当简单，尽管有点费时。拿些点心，按照以下步骤开始：
- en: Visit [developer.android.com/studio/index.html](http://developer.android.com/studio/index.html).
    Click the big **DOWNLOAD ANDROID STUDIO** button to proceed:![Setting up Android
    Studio](img/Insert_image_B12806_01_setup1.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[developer.android.com/studio/index.html](http://developer.android.com/studio/index.html)。点击大的**下载Android
    Studio**按钮继续：![设置Android Studio](img/Insert_image_B12806_01_setup1.jpg)
- en: Accept the terms and conditions by checking the checkbox, and then click the
    **DOWNLOAD ANDROID STUDIO FOR WINDOWS** button:![Setting up Android Studio](img/Insert_image_B12806_01_setup2.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选复选框接受条款和条件，然后点击**下载Android Studio for Windows**按钮：![设置Android Studio](img/Insert_image_B12806_01_setup2.jpg)
- en: When the download is complete, run the file you just downloaded. It has a name
    that starts `android-studio-ide…`,while the end of the name of the file will vary
    based on the current version at the time of reading.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行刚刚下载的文件。文件名以`android-studio-ide…`开头，文件名的结尾会根据当前阅读时的版本而有所不同。
- en: Click the **Next >** button to proceed:![Setting up Android Studio](img/Insert_image_B12806_01_setup3.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步 >**按钮继续：![设置Android Studio](img/Insert_image_B12806_01_setup3.jpg)
- en: Leave the default options selected, as shown in the following screenshot, and
    click the **Next >** button:![Setting up Android Studio](img/Insert_image_B12806_01_setup4.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认选项，如下截图所示，然后点击**下一步 >**按钮：![设置Android Studio](img/Insert_image_B12806_01_setup4.jpg)
- en: Next, we need to choose where to install Android Studio, as shown in the following
    screenshot:![Setting up Android Studio](img/B12806_01_setup5.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要选择安装Android Studio的位置，如下截图所示：![设置Android Studio](img/B12806_01_setup5.jpg)
- en: The install wizard recommends **500 MB** **of free space**, but you probably
    noticed from the previous screen that 2.1 GB was suggested. However, there are
    even more requirements later in the installation process. Furthermore, it is much
    easier if you have all your Android Studio parts, as well as your project files,
    on the same hard drive.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 安装向导建议**500MB的可用空间**，但你可能已经注意到前一个屏幕建议了2.1GB。然而，在安装过程的后期还有更多的要求。此外，如果你的Android
    Studio部分和项目文件都在同一硬盘上，那会更容易一些。
- en: For these reasons, I recommend having at least 4 GB of free space. If you need
    to switch drives to accommodate this, then use the **Browse..** button to browse
    to a suitable place on your hard drive.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，我建议至少有4GB的可用空间。如果需要切换驱动器以适应这一点，那么使用**浏览..**按钮浏览到硬盘上合适的位置。
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note down the location that you choose.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 记下你选择的位置。
- en: When you are ready, click the **Next >** button.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你准备好了，点击**下一步 >**按钮。
- en: In this next window, choose the folder in your start menu where **Android Studio**
    will appear. You can leave it as the default, as follows:![Setting up Android
    Studio](img/B12806_01_setup6.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的窗口中，选择**Android Studio**将出现在开始菜单中的文件夹。你可以保持默认设置，如下：![设置Android Studio](img/B12806_01_setup6.jpg)
- en: Click **Install**. This step might take some time, especially on older machines
    or if you have a slow internet connection. When this stage is done, you will see
    the following screen:![Setting up Android Studio](img/B12806_01_setup7.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**。这一步可能需要一些时间，特别是在旧机器上或者如果你的网络连接较慢。当这个阶段完成时，你会看到以下屏幕：![设置Android Studio](img/B12806_01_setup7.jpg)
- en: Click **Next >**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步 >**。
- en: Android Studio is now installed – kind of. Check the **Start Android Studio**
    checkbox and click the **Finish** button:![Setting up Android Studio](img/B12806_01_setup8.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android Studio现在已安装 - 有点。勾选**启动Android Studio**复选框，然后点击**完成**按钮：![设置Android
    Studio](img/B12806_01_setup8.jpg)
- en: You will be greeted with the **Welcome** screen, as shown in the following screenshot:![Setting
    up Android Studio](img/B12806_01_setup_part2_01.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到**欢迎**屏幕，如下截图所示：![设置Android Studio](img/B12806_01_setup_part2_01.jpg)
- en: Click the **Next** button.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮。
- en: Choose the **Standard** install type, as shown in the following screenshot:![Setting
    up Android Studio](img/B12806_01_setup_part2_02.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**标准**安装类型，如下截图所示：![设置Android Studio](img/B12806_01_setup_part2_02.jpg)
- en: Click the **Next** button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮。
- en: Choose whichever color scheme looks nice to you. I chose **IntelliJ**, as shown
    in the following screenshot:![Setting up Android Studio](img/B12806_01_setup_part2_03.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你喜欢的配色方案。我选择了**IntelliJ**，如下截图所示：![设置Android Studio](img/B12806_01_setup_part2_03.jpg)
- en: Click **Next**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Now you will see the **Verify Settings** screen:![Setting up Android Studio](img/B12806_01_setup_part2_04.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你会看到**验证设置**屏幕：![设置Android Studio](img/B12806_01_setup_part2_04.jpg)
- en: Click the **Finish** button. Android Studio will now commence some more downloads,
    which could take some time.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮。Android Studio现在将开始一些更多的下载，可能需要一些时间。
- en: When Android Studio is ready, you will have the option to run it. At this point,
    click the **Finish** button. Android Studio is most likely ready. You can leave
    it open if you are carrying straight on with the next section, or you can close
    it and then reopen it when instructed to in the next section.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Android Studio准备好时，您将有运行它的选项。在这一点上，点击**完成**按钮。Android Studio很可能已经准备好了。如果您要直接进行下一节，可以将其保持打开，或者在下一节的指示下关闭它，然后重新打开它。
- en: Final step – for now
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一步 - 目前为止
- en: Using your preferred file manager software, perhaps Windows Explorer, create
    a folder called `AndroidProjects`. Make it at the root of the same drive where
    you installed Android Studio. So, if you installed Android Studio at `C:/Program
    Files/Android`, then create your new folder at `C:/AndroidProjects`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文件管理软件，也许是Windows资源管理器，创建一个名为`AndroidProjects`的文件夹。将其放在您安装Android Studio的相同驱动器的根目录下。因此，如果您在`C:/Program
    Files/Android`安装了Android Studio，那么请在`C:/AndroidProjects`创建您的新文件夹。
- en: Or, if you installed Android Studio at `D:/Program Files/Android`, then create
    your new folder at `D:/AndroidProjects`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您在`D:/Program Files/Android`安装了Android Studio，那么请在`D:/AndroidProjects`创建您的新文件夹。
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that the screenshots in the next section show the `AndroidProjects` folder
    on the `D:` drive. This is because my `C:` drive is a bit full up. Either is fine.
    I did the install tutorial screen captures on a borrowed PC with plenty of space
    on the C: drive, because that is the default for Android Studio. Keeping it on
    the same drive as the Android installation is neater and could avoid future problems,
    so do so if you can.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，下一节的截图显示了`D:`驱动器上的`AndroidProjects`文件夹。这是因为我的`C:`驱动器有点满了。两者都可以。我在一个有足够空间的C:驱动器上的借来的PC上进行了安装教程的屏幕截图，因为那是Android
    Studio的默认位置。将其保持在与Android安装相同的驱动器上更整洁，可能会避免未来的问题，所以如果可以的话，请这样做。
- en: Notice that there is no space between the words `Android` and `Projects,` and
    that the first letter of both words is capitalized. The capitalization is for
    clarity, and the omission of a space is required by Android Studio.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`Android`和`Projects`之间没有空格，并且两个单词的第一个字母都是大写的。大写是为了清晰起见，而省略空格是Android Studio所要求的。
- en: Android Studio and the supporting tools that we need are installed and ready
    to go. We are now really close to building our first app.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio和我们需要的支持工具已经安装并准备就绪。我们现在离构建我们的第一个应用程序非常接近了。
- en: Now, let's look a little bit at the composition of an Android app.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们稍微了解一下Android应用程序的组成。
- en: What makes an Android app?
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么构成了Android应用程序？
- en: We already know that we will write Kotlin code that will use other people's
    code, and that will be compiled into DEX code that is used on our users' Android
    devices. In addition to this, we will also be adding and editing other files that
    get included in the final APK. These files are known as **Android resources**.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道，我们将编写Kotlin代码，该代码将使用其他人的代码，并编译为DEX代码，该代码将在我们的用户Android设备上使用。除此之外，我们还将添加和编辑其他文件，这些文件将包含在最终的APK中。这些文件被称为**Android资源**。
- en: Android resources
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android资源
- en: As mentioned earlier in this chapter, our app will include resources, such as
    images, sound, and user interface layouts, that are kept in separate files from
    the Kotlin code. We will slowly introduce ourselves to them over the course of
    the book.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，我们的应用程序将包括资源，例如图像、声音和用户界面布局，这些资源将保存在与Kotlin代码分开的文件中。我们将在本书的过程中慢慢介绍它们。
- en: They will also include files that have the textual content of our app. It is
    convention to refer to the text in our app through separate files because it makes
    them easy to change, and easy to create apps that work for multiple different
    languages and geographical regions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还将包括我们应用程序的文本内容的文件。约定俗成的是通过单独的文件引用应用程序中的文本，因为这样可以很容易地进行更改，并且可以创建适用于多种不同语言和地理区域的应用程序。
- en: Furthermore, the actual **User Interface** (**UI**) layout of our apps, despite
    the option to implement them with a visual designer, are read from text-based
    files by Android.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管我们可以选择使用可视化设计师来实现应用程序的**用户界面**（**UI**）布局，但Android实际上是从基于文本的文件中读取它们的。
- en: Android (or any computer) cannot read and recognize text in the same way that
    a human can. Therefore, we must present our resources in a highly organized and
    predefined manner. To do so, we will use **E**x**tensible Markup Language** (**XML**).
    XML is a huge topic; fortunately, its whole purpose is to be both human- and machine-
    readable. We do not need to learn this language; we just need to note (and then
    conform to) a few rules. Furthermore, most of the time, when we interact with
    XML, we will do so through a neat visual editor provided by Android Studio. We
    can tell when we are dealing with an XML resource because the filename will end
    with the`.xml` extension.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Android（或任何计算机）无法像人类那样阅读和识别文本。因此，我们必须以高度组织和预定义的方式呈现我们的资源。为此，我们将使用**可扩展标记语言**（**XML**）。XML是一个庞大的主题；幸运的是，它的整个目的是既适合人类阅读又适合机器阅读。我们不需要学习这种语言；我们只需要注意（然后遵守）一些规则。此外，大多数时候，当我们与XML交互时，我们将通过Android
    Studio提供的一个整洁的可视化编辑器来进行。我们可以通过文件扩展名为`.xml`来判断我们是否在处理XML资源。
- en: You do not need to memorize this, as we will constantly be returning to this
    concept in the book.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要记住这一点，因为我们将不断地在本书中回到这个概念。
- en: The structure of Android's code
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android代码的结构
- en: In addition to these resources, it is worth noting that Android has a structure
    to its code. There are many millions of lines of code that we can take advantage
    of. This code will obviously need to be organized in a way that makes it easy
    to find and refer to. It is organized into **packages** that are specific to Android.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些资源之外，值得注意的是Android的代码结构。我们可以利用数百万行代码。显然，这些代码需要以便于查找和引用的方式进行组织。它们被组织成特定于Android的**包**。
- en: Packages
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包
- en: Whenever we create a new Android app, we will choose a unique name, known as
    a **package**. We will see how we do this very soon, in the section titled *Our
    first Android app*. Packages are often separated into **sub-packages** so that
    they can be grouped together with other similar packages. We can simply think
    of these as folders and sub-folders, which is almost exactly what they are.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们创建一个新的Android应用程序时，我们都会选择一个唯一的名称，称为**包**。我们很快就会看到我们是如何做到这一点的，在标题为*我们的第一个Android应用*的部分中。包通常被分成**子包**，以便它们可以与其他类似的包一起分组。我们可以简单地将它们想象成文件夹和子文件夹，这几乎就是它们的实际情况。
- en: 'We can think of all the packages that the Android API makes available to us
    as code from a code library. Some common Android packages that we will use include
    the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Android API提供给我们的所有包想象成来自代码库的代码。我们将使用的一些常见的Android包包括以下内容：
- en: '`android.graphics`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.graphics`'
- en: '`android.database`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.database`'
- en: '`android.view.animation`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.view.animation`'
- en: As you can see, they are arranged and named to make what is in them as obvious
    as possible.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它们被安排和命名，以使其中的内容尽可能明显。
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to get an idea of the sheer depth and breadth of the Android API,
    then look at the Android package index at [https://developer.android.com/reference/packages](https://developer.android.com/reference/packages)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解Android API的深度和广度，可以查看[https://developer.android.com/reference/packages](https://developer.android.com/reference/packages)上的Android包索引。
- en: Classes
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: Earlier, we learned that the reusable code blueprints that we can transform
    into objects are called **classes**. Classes are contained in these packages.
    We will see in our very first app how we can easily **import** other people's
    packages, along with specific classes from those packages for use in our projects.
    A class will usually be contained in its own file with the same name as the class.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们了解到我们可以将可重用的代码蓝图转换为对象，这些蓝图被称为**类**。类包含在这些包中。在我们的第一个应用程序中，我们将看到如何轻松地**导入**其他人的包，以及从这些包中导入特定的类供我们的项目使用。一个类通常包含在与类同名的文件中。
- en: Functions
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数
- en: In Kotlin, we further break up our classes into sections that perform the different
    actions of our class. We call these action-oriented sections **functions**. It
    is the functions of the class that we will use to access the functionality provided
    within all the millions of lines of Android code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kotlin中，我们进一步将我们的类分成执行不同操作的部分，我们称这些面向操作的部分为**函数**。正是类的函数将用于访问Android代码中数百万行提供的功能。
- en: We do not need to read the code. We just need to know which class has what we
    need, which package it is in, and which function from within the class gives us
    precisely the result we are after.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要阅读代码。我们只需要知道哪个类有我们需要的东西，它在哪个包中，以及类内的哪个函数能给我们准确的结果。
- en: We can think of the structure of the code we will write ourselves in the same
    way, although we will usually have just one package per app.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以相同的方式来思考我们将自己编写的代码的结构，尽管通常每个应用程序只有一个包。
- en: Of course, because of the object-oriented nature of Kotlin, we will only be
    using selected parts from this API. Note also that each class has its own distinct
    **data**. Typically, if you want access to the data in a class, you need to have
    an object of that class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于Kotlin的面向对象的特性，我们只会使用API中的部分内容。还要注意，每个类都有自己独特的**数据**。通常，如果你想要访问类中的数据，你需要拥有该类的对象。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You do not need to memorize this, as we will constantly be returning to this
    concept in the book.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要记住这些，因为我们将在本书中不断回到这个概念。
- en: By the end of this chapter, we will have imported multiple packages, as well
    as some classes from them. By the end of [Chapter 2](ch02.html "Chapter 2. Kotlin,
    XML, and the UI Designer"), *Kotlin, XML, and the UI Designer*, we will have even
    written our very own functions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，我们将导入多个包，以及其中的一些类。到[第2章](ch02.html "第2章. Kotlin, XML和UI设计师")结束时，我们甚至将编写我们自己的函数。
- en: Our first Android app
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个Android应用
- en: Now we can get started on our first app. In programming, it is tradition for
    the first app of a new student to use whatever language/OS they are using to say
    hello to the world. We will quickly build an app that does just that, and, in
    [Chapter 2](ch02.html "Chapter 2. Kotlin, XML, and the UI Designer"), *Kotlin,
    XML, and the UI Designer*, we will go beyond that and add some buttons that respond
    to the user when they are clicked.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始我们的第一个应用程序了。在编程中，传统上新学生的第一个应用程序会使用他们正在使用的语言/操作系统向世界问好。我们将快速构建一个可以做到这一点的应用程序，并且在[第2章](ch02.html
    "第2章. Kotlin, XML和UI设计师")中，*Kotlin, XML和UI设计师*，我们将超越这一点，并添加一些在用户点击时响应的按钮。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code as it stands at the end of this chapter is in the download
    bundle in the `Chapter01` folder for your reference. You can't simply copy and
    paste this code, however. You still need to go through the project creation phase
    explained in this chapter (and at the beginning of all projects) as Android Studio
    does lots of work behind the scenes. Once you become familiar with these steps
    and understand which code is typed by you, the programmer, and which code/files
    are generated by Android Studio, you will then be able to save time and typing
    by copying and pasting from the files I supply in the download bundle.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时的完整代码在`Chapter01`文件夹的下载包中供您参考。但是，您不能简单地复制和粘贴这些代码。您仍然需要按照本章（以及所有项目的开始）中解释的项目创建阶段进行操作，因为Android
    Studio在幕后做了大量工作。一旦您熟悉了这些步骤，并理解了哪些代码是由您，程序员，输入的，哪些代码/文件是由Android Studio生成的，那么您就可以通过从我在下载包中提供的文件中复制和粘贴来节省时间和输入。
- en: 'Follow these steps to start the project:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤启动项目：
- en: Run Android Studio in the same way you run any other app. On Windows 10, for
    example, the launch icon appears in the start menu.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与运行其他应用程序相同的方式运行Android Studio。例如，在Windows 10上，启动图标会出现在开始菜单中。
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are prompted to **Import Studio settings from…**:, choose **Do not import
    settings**.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示**从…导入Studio设置**：选择**不导入设置**。
- en: You will be greeted with the Android Studio welcome screen, as shown in the
    following screenshot. Locate the **Start a new Android Studio project** option
    and left-click it:![Our first Android app](img/Insert_image_B12806_01_X2.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到Android Studio的欢迎屏幕，如下截图所示。找到**开始新的Android Studio项目**选项，然后单击它:![我们的第一个Android应用](img/Insert_image_B12806_01_X2.jpg)
- en: After this, Android Studio will bring up the **Choose your project** window,
    as follows:![Our first Android app](img/Insert_image_B12806_01_NEW_ChooseYourProject.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，Android Studio将弹出**选择您的项目**窗口，如下所示:![我们的第一个Android应用](img/Insert_image_B12806_01_NEW_ChooseYourProject.jpg)
- en: We will use the **Basic Activity** option, as selected in the previous screenshot.
    Android Studio will autogenerate some code and a selection of resources to get
    our project started. We will discuss the code and the resources in detail in the
    next chapter. Select **Basic Activity** and click **Next**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用**基本活动**选项，就像在上一张截图中选择的那样。Android Studio将自动生成一些代码和一些资源来启动我们的项目。我们将在下一章详细讨论代码和资源。选择**基本活动**，然后点击**下一步**。
- en: 'This next screen is the **Configure your project** screen, where we will perform
    the following steps and a few more things as well:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来的屏幕是**配置您的项目**屏幕，在这里我们将执行以下步骤以及一些其他操作:'
- en: Name the new project
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名新项目
- en: Provide a company domain as a package name to distinguish our project from any
    others, in case we should ever decide to publish it on the Play Store
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供公司域作为包名，以区分我们的项目和其他任何项目，以防我们决定将其发布到Play商店
- en: Choose where on our computer the project files should go
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择计算机上项目文件的位置
- en: Select our preferred programming language
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们首选的编程语言
- en: The name of our project is going to be `Hello World,` and the location for the
    files will be your `AndroidProjects` folder that we created in the *Setting up
    Android Studio* section.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们的项目名称将是`Hello World`，文件的位置将是我们在*设置Android Studio*部分中创建的`AndroidProjects`文件夹。 '
- en: The package name can be almost anything you like. If you have a website, you
    could use the `com.yourdomain.helloworld` format. If not, feel free to use `com.gamecodeschool.helloworld,`
    or something that you just make up. It is only important when you come to publish
    it.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包名可以是几乎任何您喜欢的东西。如果您有网站，可以使用`com.yourdomain.helloworld`的格式。如果没有，可以使用`com.gamecodeschool.helloworld`，或者您随意编造的东西。这只有在您决定发布时才重要。
- en: 'To be clear, in case you can''t see the details in the following screenshot
    clearly, here are the values I used. Remember that yours might vary depending
    upon your choice of company domain and project save location:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '为了清楚起见，如果您无法清楚地看到以下截图中的细节，这里是我使用的值。请记住，您的值可能会根据您选择的公司域和项目保存位置而有所不同:'
- en: '| Option | Value entered |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 输入的值 |'
- en: '| --- | --- |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Name: | `Hello World` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 名称: | `Hello World` |'
- en: '| Package Name: | `com.gamecodeschool.helloworld` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 包名: | `com.gamecodeschool.helloworld` |'
- en: '| Language: | Kotlin |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 语言: | Kotlin |'
- en: '| Save location: | `D:\AndroidProjects\HelloWorld` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 保存位置: | `D:\AndroidProjects\HelloWorld` |'
- en: '| Minimum API Level: | Leave at whatever the default is |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 最低API级别: | 保持默认值 |'
- en: '| This project will support instant apps: | Leave at whatever the default is
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 此项目将支持即时应用程序: | 保持默认值 |'
- en: '| Use AndroidX artifacts: | Select this option |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 使用AndroidX构件: | 选择此选项 |'
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the application name has a space between "Hello" and "World," but
    the project location does not, and will not work if it does.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用程序名称中的"Hello"和"World"之间有一个空格，但项目位置没有，如果有空格则无法工作。
- en: Regarding the **Minimum API level** setting, we already know that the Android
    SDK is the collection of packages of code that we will be using to develop our
    apps. Like any good SDK, the Android SDK is regularly updated, and each time it
    gets a significant update, the version number is increased. Simply put, the higher
    the version number, the newer the features you get to use; the lower the version
    number, the more devices our app will work on. For now, the default **API 15,
    Android 4.0.3 (IceCreamSandwich)** version will give us lots of great features
    and near 100% compatibility with the Android devices currently in use. If, at
    the time of reading, Android Studio is suggesting a newer API, then go with that.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**最低API级别**设置，我们已经知道Android SDK是我们将用于开发应用程序的代码包集合。像任何好的SDK一样，Android SDK定期更新，每次进行重大更新时，版本号都会增加。简单来说，版本号越高，您可以使用的功能就越新；版本号越低，我们的应用程序就能在更多设备上运行。目前，默认的**API
    15, Android 4.0.3 (IceCreamSandwich)**版本将为我们提供许多出色的功能，并且几乎与当前使用的Android设备兼容。如果在阅读时，Android
    Studio建议使用更新的API，则请使用该API。
- en: If you are reading this some years in the future, then the **Minimum API** option
    will probably default to something different, but the code in this book will still
    work.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在未来的某个时候阅读本书，那么**最低API**选项可能会默认为不同的内容，但本书中的代码仍将有效。
- en: 'The following screenshot shows the **Configure your project** screen once you
    have entered all the information:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '在您输入所有信息后，下面的截图显示了**配置您的项目**屏幕:'
- en: '![Our first Android app](img/Insert_image_B12806_01_NEW_ConfigureYourProject.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![我们的第一个Android应用](img/Insert_image_B12806_01_NEW_ConfigureYourProject.jpg)'
- en: Note
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can write Android apps in a few different languages, including C++ and Java.
    There are various advantages and disadvantages to each compared to using Kotlin.
    Learning Kotlin will be a great introduction to other languages, and Kotlin is
    also the newest (and arguably best) official language of Android.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用几种不同的语言编写Android应用程序，包括C++和Java。与使用Kotlin相比，每种语言都有各种优缺点。学习Kotlin将是对其他语言的很好介绍，而且Kotlin也是Android的最新（也可以说是最好的）官方语言。
- en: Click the **Finish** button and Android Studio will prepare our new project
    for us. This might take a few seconds or a few minutes, depending upon how powerful
    your PC is.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**完成**按钮，Android Studio将为我们准备新项目。这可能需要几秒钟或几分钟，具体取决于您的计算机性能。
- en: At this stage, you might be ready to proceed but, depending on the install process,
    you might need to click a couple of extra buttons.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您可能已经准备好继续了，但是，根据安装过程的不同，您可能需要点击一些额外的按钮。
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is why I mentioned that we are only *probably* finished installing and
    setting up.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我提到我们只是*可能*完成了安装和设置。
- en: 'Look in the bottom window of Android Studio and see if you have the following
    message:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio的底部窗口中查看是否有以下消息：
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you do not see a horizontal window at the bottom of Android Studio
    like the one shown in the following screenshot, you can skip these two extra steps.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您在Android Studio底部没有看到类似以下截图中显示的水平窗口，您可以跳过这两个额外的步骤。
- en: Possible extra step 1
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能的额外步骤1
- en: '![Possible extra step 1](img/B12806_01_setup_part3_01.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![可能的额外步骤1](img/B12806_01_setup_part3_01.jpg)'
- en: If you do, click **Install missing platform(s) and sync project**, accept the
    license agreement, and then click **Next**, followed by **Finish**.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，点击**安装缺少的平台并同步项目**，接受许可协议，然后点击**下一步**，接着点击**完成**。
- en: Possible extra step 2
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能的额外步骤2
- en: 'You may get another message like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到另一条类似的消息：
- en: '![Possible extra step 2](img/B12806_01_setup_part3_02.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![可能的额外步骤2](img/B12806_01_setup_part3_02.jpg)'
- en: If the preceding message appears, click **Install Build tools…**. and then click
    **Finish**.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现上述消息，请点击**安装构建工具...**，然后点击**完成**。
- en: Tip
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can tidy up the screen a bit and close this bottom horizontal window by
    clicking the **Messages** tab at the very bottom of Android Studio, but this isn't
    compulsory.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击Android Studio底部的**消息**选项卡来整理屏幕，并关闭底部的水平窗口，但这并不是强制性的。
- en: Deploying the app so far
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到目前为止，部署应用程序
- en: 'Before we explore any of the code and learn our first bit of Kotlin, you might
    be surprised to learn that we can already run our project. It will be a fairly
    featureless screen, but as we will be running the app as often as possible to
    check our progress, let''s see how to do that now. You have three options:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索任何代码并学习我们的第一部分Kotlin之前，您可能会惊讶地发现我们已经可以运行我们的项目。这将是一个相当简陋的屏幕，但由于我们将尽可能频繁地运行应用程序来检查我们的进度，让我们现在看看如何做到这一点。您有三个选项：
- en: Run the app on the emulator on your PC (part of Android Studio) in debug mode
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PC上的模拟器上运行应用程序（Android Studio的一部分）处于调试模式
- en: Run the app on a real Android device in USB debugging mode
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在USB调试模式下在真实的Android设备上运行应用程序
- en: Export the app as a full Android project that can be uploaded to the Play Store
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序导出为可以上传到Play商店的完整Android项目
- en: The first option (debug mode) is the easiest to set up, because we did it as
    part of setting up Android Studio. If you have a powerful PC, you will hardly
    see the difference between the emulator and a real device. However, screen touches
    are emulated by mouse clicks, and proper testing of the user experience is not
    possible in some of the later apps, such as the drawing app. Furthermore, you
    might just prefer to test out your creations on a real device – I know I do.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项（调试模式）是最容易设置的，因为我们在设置Android Studio的过程中已经完成了。如果您有一台功能强大的PC，您几乎看不到模拟器和真实设备之间的区别。然而，屏幕触摸是由鼠标点击模拟的，并且在一些后期的应用程序中无法进行用户体验的有效测试，比如绘图应用程序。此外，您可能更喜欢在真实设备上测试您的创作
    - 我知道我是这样的。
- en: The second option, using a real device, has a couple of additional steps, but,
    once set up, is as good as option one, and the screen touches are for real.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项，使用真实设备，有一些额外的步骤，但一旦设置好，就和第一个选项一样好，屏幕触摸是真实的。
- en: The final option takes about five minutes (at least) to prepare, and then you
    need to manually put the created package onto a real device and install it (every
    time you make a change to the code).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项大约需要五分钟（至少）来准备，然后您需要手动将创建的包放到真实设备上并安装它（每次更改代码时）。
- en: The best way is probably to use the emulator to quickly test and debug minor
    increments in your code, and then use the USB debugging mode on a real device
    fairly regularly to make sure things are still as expected. Only occasionally
    will you want to export an actual deployable package.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法可能是使用模拟器快速测试和调试代码的小增量，然后定期在真实设备上使用USB调试模式，以确保一切仍然如预期。只有偶尔你会想要导出一个实际可部署的包。
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you have an especially slow PC or a particularly aging Android device, you
    will be fine just running the projects in this book using just one option or the
    other. Note that a slow Android phone will probably be OK and cope, but a very
    slow PC will probably not handle the emulator running some of the later apps,
    and you will benefit from running them on your phone/tablet.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的PC特别慢或Android设备特别老旧，您可以只使用一个选项或另一个选项来运行本书中的项目。请注意，慢的Android手机可能会正常运行，但非常慢的PC可能无法处理后期应用程序的模拟器运行，并且您将受益于在手机/平板电脑上运行它们。
- en: For these reasons, I will now go through how to run the app using the emulator
    and USB debugging on a real device.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这些原因，我现在将介绍如何使用模拟器和USB调试在真实设备上运行应用程序。
- en: Running and debugging the app on an Android emulator
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android模拟器上运行和调试应用程序
- en: 'Follow these simple steps to run the app on the default Android emulator:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤在默认的Android模拟器上运行应用程序：
- en: On the Android Studio main menu bar, select **Tools** | **AVD Manager**. AVD
    stands for Android Virtual Device (an emulator). You will see the following window:![Running
    and debugging the app on an Android emulator](img/Insert_image_B12806_01_X12.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio的主菜单栏中，选择**工具** | **AVD管理器**。AVD代表Android虚拟设备（模拟器）。您将看到以下窗口：![在Android模拟器上运行和调试应用程序](img/Insert_image_B12806_01_X12.jpg)
- en: Notice that there is an emulator in the list. In my case, it is **Pixel 2 XL
    API 28**. If you are following this sometime in the future, it will be a different
    emulator that was installed by default. It won't matter. Click the green play
    icon (to the right) shown in the following screenshot, and wait while the emulator
    boots up:![Running and debugging the app on an Android emulator](img/Insert_image_B12806_01_X13.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意列表中是否有一个模拟器。在我的情况下，它是**Pixel 2 XL API 28**。如果您在将来的某个时候阅读本书，它将是默认安装的不同模拟器。这并不重要。单击以下截图中显示的绿色播放图标（右侧），然后等待模拟器启动：![在Android模拟器上运行和调试应用程序](img/Insert_image_B12806_01_X13.jpg)
- en: Now you can click the play icon on the Android Studio quick-launch bar as shown
    in the following screenshot and, when prompted, choose **Pixel 2 XL API 28** (or
    whatever your emulator is called) and the app will launch on the emulator:![Running
    and debugging the app on an Android emulator](img/Insert_image_B12806_01_X14.jpg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击Android Studio快速启动栏上的播放图标，如下截图所示，然后在提示时选择**Pixel 2 XL API 28**（或者你的模拟器叫什么）应用程序将在模拟器上启动：![在Android模拟器上运行和调试应用程序](img/Insert_image_B12806_01_X14.jpg)
- en: 'You''re done. Here is what the app looks like so far in the emulator. Remember
    that you might (probably do) have a different emulator, which is fine:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你完成了。这是目前在模拟器中的应用程序外观。请记住，你可能（很可能）有一个不同的模拟器，这没关系：
- en: '![Running and debugging the app on an Android emulator](img/Insert_image_B12806_01_X16.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![在Android模拟器上运行和调试应用程序](img/Insert_image_B12806_01_X16.jpg)'
- en: Clearly, we have more work to do before we move to Silicon Valley and look for
    financial backing, but it is a good start.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在我们搬到硅谷寻找财务支持之前，我们还有很多工作要做，但这是一个良好的开始。
- en: We need to test and debug our apps often throughout development to check for
    any errors, crashes, or anything else unintended.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要经常测试和调试我们的应用程序，以便在开发过程中检查任何错误、崩溃或其他意外情况。
- en: Note
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will see how we get errors and other feedback for debugging from our apps
    in the next chapter.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中看到如何从我们的应用程序中获取错误和其他调试反馈。
- en: It is also important to make sure it looks good and runs correctly on every
    device type/size that you want to target. Obviously, we do not own one of each
    of the many thousands of Android devices. This is where emulators come in.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它在你想要定位的每种设备类型/尺寸上看起来好看并且运行正确是很重要的。显然，我们并不拥有成千上万种Android设备中的每一种。这就是模拟器的用武之地。
- en: Emulators, however, are sometimes a bit slow and cumbersome, although they have
    improved a lot recently. If we want to get a genuine feel for the experience our
    user will get, then you can't beat deploying to a real device. So, we will want
    to use both real devices and emulators while developing our apps.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模拟器有时会有点慢和繁琐，尽管最近已经有了很大的改进。如果我们想要真正感受到用户体验，那么我们无法击败部署到真实设备。因此，在开发我们的应用程序时，我们既想使用真实设备，又想使用模拟器。
- en: Tip
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are planning on using the emulator again soon, leave it running to avoid
    having to wait for it to start again.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划不久后再次使用模拟器，请保持其运行，以避免等待它再次启动。
- en: If you want to try out your app on a tablet, you're going to need a different
    emulator.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在平板电脑上尝试你的应用程序，你需要一个不同的模拟器。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Creating a new emulator**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建新的模拟器**'
- en: It is simple to create an emulator for a different Android device. From the
    main menu, select **Tools** | **AVD Manager**. In the **AVD Manager** window,
    left-click **Create New Virtual Device**. Now left-click on the type of device
    you want to create – **TV**, **Phone**, **Wear OS,** or **Tablet**. Now simply
    left-click **Next** and follow the instructions to create your new AVD. Next time
    you run your app, the new AVD will appear as an option to run the app on.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 为不同的Android设备创建模拟器很简单。从主菜单中选择**工具** | **AVD管理器**。在**AVD管理器**窗口中，左键单击**创建新的虚拟设备**。现在左键单击你想要创建的设备类型
    - **电视**，**手机**，**Wear OS**或**平板电脑**。现在只需左键单击**下一步**，按照说明创建你的新AVD。下次运行你的应用程序时，新的AVD将出现为运行应用程序的选项。
- en: Now we can look at how we can get our app onto a real device.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看看如何将我们的应用程序放到真实设备上。
- en: Running the app on a real device
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在真实设备上运行应用程序
- en: The first thing to do is to visit your device manufacturer's website and obtain
    and install any drivers that are needed for your device and operating system.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是访问你的设备制造商的网站，获取并安装你的设备和操作系统所需的任何驱动程序。
- en: Tip
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Most newer devices won't need a driver, so you may want to just try the following
    steps first.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数新设备不需要驱动程序，所以你可能首先想尝试以下步骤。
- en: 'The next few steps will set up the Android device for debugging. Note that
    different manufacturers structure the menu options slightly differently to others.
    But the following sequence is probably very close, if not exact, for enabling
    debugging on most devices:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个步骤将为Android设备设置调试。请注意，不同的制造商对菜单选项的结构略有不同。但是对于大多数设备来说，启用调试的以下顺序可能非常接近，如果不是完全相同：
- en: Tap the **Settings** menu option or the **Settings** app on your phone/tablet.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你手机/平板上的**设置**菜单选项或**设置**应用程序。
- en: This next step will vary slightly for different versions of Android. The **Developer
    options** menu is hidden away so as not to trouble regular users. You must perform
    a slightly odd task to unlock the menu option. Tap the **About device** or **About
    Phone** option. Find the **Build Number** option and repeatedly tap it until you
    get a message informing you that **You are now a developer!**
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一步对不同版本的Android略有不同。**开发者选项**菜单被隐藏起来，以免给普通用户带来麻烦。你必须执行一个稍微奇怪的任务来解锁菜单选项。点击**关于设备**或**关于手机**选项。找到**构建号**选项，重复点击它，直到你收到一条消息，告诉你**你现在是开发者了！**
- en: Tip
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Some manufacturers have different, obscure methods for achieving this step.
    If this step doesn't work, do a web search for your device and "unlocking developer
    options."
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 一些制造商有不同的、晦涩的方法来完成这一步。如果这一步不起作用，请搜索你的设备和“解锁开发者选项”。
- en: Go back to the **Settings** menu.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回**设置**菜单。
- en: Tap **Developer options.**
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开发者选项**。
- en: Tap the checkbox for **USB Debugging.**
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**USB调试**的复选框。
- en: Connect your Android device to the USB port of your computer.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的Android设备连接到计算机的USB端口。
- en: Click the play icon from the Android Studio toolbar, as shown in the following
    screenshot:![Running the app on a real device](img/Insert_image_B12806_01_X15.jpg)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Android Studio工具栏中点击播放图标，如下截图所示：![在真实设备上运行应用程序](img/Insert_image_B12806_01_X15.jpg)
- en: When prompted, click OK to run the app on your chosen device.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时，点击确定在你选择的设备上运行应用程序。
- en: We are now ready to learn some Kotlin and add our own Kotlin code to the Hello
    World project.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好学习一些Kotlin，并将我们自己的Kotlin代码添加到Hello World项目中。
- en: Frequently asked question
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q) So, Android isn't really an operating system; it is just a virtual machine
    and all Android phones and tablets are really Linux machines?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 问：那么，Android实际上并不是一个操作系统；它只是一个虚拟机，所有Android手机和平板电脑实际上都是Linux机器吗？
- en: A) No, all the different subsystems of an Android device, which include Linux,
    the libraries, and the drivers, are what make up the Android operating system.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 答：不，Android设备的所有不同子系统，包括Linux、库和驱动程序，构成了Android操作系统。
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So far, we have set up an Android development environment, and created and deployed
    an app on both an emulator and a real device. If you still have unanswered questions
    (and you probably have more than at the start of the chapter), don't worry, because
    as we dig deeper into the world of Android and Kotlin, things will become clearer.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经建立了一个Android开发环境，并在模拟器和真实设备上创建和部署了一个应用程序。如果您仍然有未解答的问题（您可能比本章开始时还有更多问题），不要担心，因为随着我们深入了解Android和Kotlin的世界，事情会变得更清晰。
- en: As the chapters progress, you will build a very rounded understanding of how
    everything fits together, and then success will just be a matter of practice and
    digging even deeper into the Android API.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 随着章节的进展，您将建立起对所有内容如何相互关联的全面理解，然后成功只是一个练习和更深入了解Android API的问题。
- en: In the next chapter, we will edit the UI using the visual designer and raw XML
    code, as well as writing our first Kotlin functions, and we will get to use some
    of the functions provided for us by the Android API.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用可视化设计师和原始XML代码来编辑UI，同时编写我们的第一个Kotlin函数，并且我们将使用Android API为我们提供的一些函数。
