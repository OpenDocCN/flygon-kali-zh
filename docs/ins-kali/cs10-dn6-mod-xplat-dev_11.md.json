["```cs\n     // a string array is a sequence that implements IEnumerable<string>\n\n    string\n\n    [] names = new\n\n    [] { \"Michael\"\n\n    , \"Pam\"\n\n    , \"Jim\"\n\n    , \"Dwight\"\n\n    , \n      \"Angela\"\n\n    , \"Kevin\"\n\n    , \"Toby\"\n\n    , \"Creed\"\n\n     };\n    WriteLine(\"Deferred execution\"\n\n    );\n    // Question: Which names end with an M?\n\n    // (written using a LINQ extension method)\n\n    var\n\n     query1 = names.Where(name => name.EndsWith(\"m\"\n\n    ));\n    // Question: Which names end with an M?\n\n    // (written using LINQ query comprehension syntax)\n\n    var\n\n     query2 = from\n\n     name in\n\n     names where\n\n     name.EndsWith(\"m\"\n\n    ) select\n\n     name; \n\n    ```", "```cs\n     // Answer returned as an array of strings containing Pam and Jim\n\n    string\n\n    [] result1 = query1.ToArray();\n    // Answer returned as a list of strings containing Pam and Jim\n\n    List<string\n\n    > result2 = query2.ToList();\n    // Answer returned as we enumerate over the results\n\n    foreach\n\n     (string\n\n     name in\n\n     query1)\n    {\n      WriteLine(name); // outputs Pam\n\n      names[2\n\n    ] = \"Jimmy\"\n\n    ; // change Jim to Jimmy\n\n      // on the second iteration Jimmy does not end with an M\n\n    } \n\n    ```", "```cs\n    Deferred execution\n    Pam \n\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\"\n\n    >\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net6.0\n\n    </TargetFramework>\n        <Nullable>enable</Nullable>\n\n     **<!--<ImplicitUsings>enable</ImplicitUsings>-->**\n\n      </PropertyGroup>\n    </Project> \n\n    ```", "```cs\n    WriteLine(\"Writing queries\"\n\n    ); \n    var\n\n     query = names.W \n\n    ```", "```cs\n     var\n\n     query = names.Where(new\n\n     Func<string\n\n    , bool\n\n    >( )) \n\n    ```", "```cs\n     static\n\n    bool\n\n    NameLongerThanFour\n\n    (\n\n    string\n\n     name\n\n    )\n\n    {\n      return\n\n     name.Length > 4\n\n    ;\n    } \n\n    ```", "```cs\n     var\n\n     query = names.Where(\n      new\n\n     Func<string\n\n    , bool\n\n    >(\n    **NameLongerThanFour**\n\n    ));\n\n    **foreach**\n\n     **(**\n\n    **string**\n\n     **item** \n\n    **in**\n\n     **query)**\n\n    **{**\n\n     **WriteLine(item);**\n\n    **}** \n\n    ```", "```cs\n    Writing queries\n    Michael \n    Dwight \n    Angela \n    Kevin \n    Creed \n\n    ```", "```cs\n     // var query = names.Where(\n\n    //   new Func<string, bool>(NameLongerThanFour)); \n\n    ```", "```cs\n     var\n\n     query = names.Where(NameLongerThanFour); \n\n    ```", "```cs\n     var\n\n     query = names.Where(name => name.Length > 4\n\n    ); \n\n    ```", "```cs\n     var\n\n     query = names\n      .Where(name => name.Length > 4\n\n    )\n      .OrderBy(name => name.Length); \n\n    ```", "```cs\n    Kevin \n    Creed \n    Dwight \n    Angela \n    Michael \n\n    ```", "```cs\n     var\n\n     query = names\n      .Where(name => name.Length > 4\n\n    )\n      .OrderBy(name => name.Length)\n\n     **.ThenBy(name => name);** \n\n    ```", "```cs\n    Creed \n    Kevin \n    Angela \n    Dwight \n    Michael \n\n    ```", "```cs\n     **IOrderedEnumerable<**\n\n    **string**\n\n    **>**\n\n     query = names\n      .Where(name => name.Length > 4\n\n    )\n      .OrderBy(name => name.Length)\n      .ThenBy(name => name); \n\n    ```", "```cs\n    WriteLine(\"Filtering by type\"\n\n    );\n    List<Exception> exceptions = new\n\n    ()\n    {\n      new\n\n     ArgumentException(), \n      new\n\n     SystemException(),\n      new\n\n     IndexOutOfRangeException(),\n      new\n\n     InvalidOperationException(),\n      new\n\n     NullReferenceException(),\n      new\n\n     InvalidCastException(),\n      new\n\n     OverflowException(),\n      new\n\n     DivideByZeroException(),\n      new\n\n     ApplicationException()\n    }; \n\n    ```", "```cs\n    IEnumerable<ArithmeticException> arithmeticExceptionsQuery = \n      exceptions.OfType<ArithmeticException>();\n    foreach\n\n     (ArithmeticException exception in\n\n     arithmeticExceptionsQuery)\n    {\n      WriteLine(exception);\n    } \n\n    ```", "```cs\n    System.OverflowException: Arithmetic operation resulted in an overflow.\n    System.DivideByZeroException: Attempted to divide by zero. \n\n    ```", "```cs\n     using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n     static\n\n    void\n\n    Output\n\n    (\n\n    IEnumerable<\n\n    string\n\n    > cohort, \n\n    string\n\n     description = \n\n    \"\"\n\n    )\n\n    {\n      if\n\n     (!string\n\n    .IsNullOrEmpty(description))\n      {\n        WriteLine(description);\n      }\n      Write(\" \"\n\n    );\n      WriteLine(string\n\n    .Join(\", \"\n\n    , cohort.ToArray()));\n      WriteLine();\n    } \n\n    ```", "```cs\n     string\n\n    [] cohort1 = new\n\n    []\n      { \"Rachel\"\n\n    , \"Gareth\"\n\n    , \"Jonathan\"\n\n    , \"George\"\n\n     }; \n    string\n\n    [] cohort2 = new\n\n    []\n      { \"Jack\"\n\n    , \"Stephen\"\n\n    , \"Daniel\"\n\n    , \"Jack\"\n\n    , \"Jared\"\n\n     }; \n    string\n\n    [] cohort3 = new\n\n    []\n      { \"Declan\"\n\n    , \"Jack\"\n\n    , \"Jack\"\n\n    , \"Jasmine\"\n\n    , \"Conor\"\n\n     }; \n    Output(cohort1, \"Cohort 1\"\n\n    );\n    Output(cohort2, \"Cohort 2\"\n\n    );\n    Output(cohort3, \"Cohort 3\"\n\n    ); \n    Output(cohort2.Distinct(), \"cohort2.Distinct()\"\n\n    ); \n    Output(cohort2.DistinctBy(name => name.Substring(0\n\n    , 2\n\n    )), \n      \"cohort2.DistinctBy(name => name.Substring(0, 2)):\"\n\n    );\n    Output(cohort2.Union(cohort3), \"cohort2.Union(cohort3)\"\n\n    ); \n    Output(cohort2.Concat(cohort3), \"cohort2.Concat(cohort3)\"\n\n    ); \n    Output(cohort2.Intersect(cohort3), \"cohort2.Intersect(cohort3)\"\n\n    ); \n    Output(cohort2.Except(cohort3), \"cohort2.Except(cohort3)\"\n\n    ); \n    Output(cohort1.Zip(cohort2,(c1, c2) => $\"\n\n    {c1}\n\n     matched with \n\n    {c2}\n\n    \"\n\n    ), \n      \"cohort1.Zip(cohort2)\"\n\n    ); \n\n    ```", "```cs\n    Cohort 1\n      Rachel, Gareth, Jonathan, George \n    Cohort 2\n      Jack, Stephen, Daniel, Jack, Jared \n    Cohort 3\n      Declan, Jack, Jack, Jasmine, Conor \n    cohort2.Distinct()\n      Jack, Stephen, Daniel, Jared \n    cohort2.DistinctBy(name => name.Substring(0, 2)):\n      Jack, Stephen, Daniel \n    cohort2.Union(cohort3)\n      Jack, Stephen, Daniel, Jared, Declan, Jasmine, Conor \n    cohort2.Concat(cohort3)\n      Jack, Stephen, Daniel, Jack, Jared, Declan, Jack, Jack, Jasmine, Conor \n    cohort2.Intersect(cohort3)\n      Jack \n    cohort2.Except(cohort3)\n      Stephen, Daniel, Jared \n    cohort1.Zip(cohort2)\n      Rachel matched with Jack, Gareth matched with Stephen, Jonathan matched with Daniel, George matched with Jack \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\"\n\n        Version=\"6.0.0\"\n\n     />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\"\n\n        Version=\"6.0.0\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n    sqlite3 Northwind.db -init Northwind4Sqlite.sql \n\n    ```", "```cs\n     -- Loading resources from Northwind.sql \n    SQLite version 3.36.0 2021-08-02 15:20:15\n    Enter \".help\" for usage hints.\n    sqlite> \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // DbContext, DbSet<T>\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    // this manages the connection to the database\n\n    public\n\n     class\n\n     Northwind\n\n     : DbContext\n\n    {\n      // these properties map to tables in the database\n\n      public\n\n     DbSet<Category>? Categories { get\n\n    ; set\n\n    ; }\n      public\n\n     DbSet<Product>? Products { get\n\n    ; set\n\n    ; }\n      protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n        DbContextOptionsBuilder optionsBuilder\n\n    )\n\n      {\n        string\n\n     path = Path.Combine(\n          Environment.CurrentDirectory, \"Northwind.db\"\n\n    );\n        optionsBuilder.UseSqlite($\"Filename=\n\n    {path}\n\n    \"\n\n    );\n        /*\n\n        string connection = \"Data Source=.;\" +\n\n            \"Initial Catalog=Northwind;\" +\n\n            \"Integrated Security=true;\" +\n\n            \"MultipleActiveResultSets=true;\";\n\n        optionsBuilder.UseSqlServer(connection);\n\n        */\n\n      }\n      protected\n\n    override\n\n    void\n\n    OnModelCreating\n\n    (\n\n        ModelBuilder modelBuilder\n\n    )\n\n      {\n        modelBuilder.Entity<Product>()\n          .Property(product => product.UnitPrice)\n          .HasConversion<double\n\n    >();\n      }\n    } \n\n    ```", "```cs\n     using\n\n     System.ComponentModel.DataAnnotations;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Category\n\n    {\n      public\n\n     int\n\n     CategoryId { get\n\n    ; set\n\n    ; }\n      [Required\n\n    ]\n      [StringLength(15)\n\n    ]\n      public\n\n     string\n\n     CategoryName { get\n\n    ; set\n\n    ; } = null\n\n    !;\n      public\n\n     string\n\n    ? Description { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     using\n\n     System.ComponentModel.DataAnnotations; \n    using\n\n     System.ComponentModel.DataAnnotations.Schema;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Product\n\n    {\n      public\n\n     int\n\n     ProductId { get\n\n    ; set\n\n    ; }\n      [Required\n\n    ]\n      [StringLength(40)\n\n    ]\n      public\n\n     string\n\n     ProductName { get\n\n    ; set\n\n    ; } = null\n\n    !;\n      public\n\n     int\n\n    ? SupplierId { get\n\n    ; set\n\n    ; }\n      public\n\n     int\n\n    ? CategoryId { get\n\n    ; set\n\n    ; }\n      [StringLength(20)\n\n    ]\n      public\n\n     string\n\n    ? QuantityPerUnit { get\n\n    ; set\n\n    ; }\n      [Column(TypeName = \n\n    \"money\"\n\n    )\n\n    ] // required for SQL Server provider\n\n      public\n\n     decimal\n\n    ? UnitPrice { get\n\n    ; set\n\n    ; }\n      public\n\n     short\n\n    ? UnitsInStock { get\n\n    ; set\n\n    ; }\n      public\n\n     short\n\n    ? UnitsOnOrder { get\n\n    ; set\n\n    ; }\n      public\n\n     short\n\n    ? ReorderLevel { get\n\n    ; set\n\n    ; }\n      public\n\n     bool\n\n     Discontinued { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     using\n\n     Packt.Shared; // Northwind, Category, Product\n\n    using\n\n     Microsoft.EntityFrameworkCore; // DbSet<T>\n\n    using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n     static\n\n    void\n\n    FilterAndSort\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        DbSet<Product> allProducts = db.Products;\n        IQueryable<Product> filteredProducts = \n          allProducts.Where(product => product.UnitPrice < 10\n\n    M);\n        IOrderedQueryable<Product> sortedAndFilteredProducts = \n          filteredProducts.OrderByDescending(product => product.UnitPrice);\n        WriteLine(\"Products that cost less than $10:\"\n\n    );\n        foreach\n\n     (Product p in\n\n     sortedAndFilteredProducts)\n        {\n          WriteLine(\"{0}: {1} costs {2:$#,##0.00}\"\n\n    ,\n            p.ProductId, p.ProductName, p.UnitPrice);\n        }\n        WriteLine();\n      }\n    } \n\n    ```", "```cs\n    Products that cost less than $10:\n    41: Jack's New England Clam Chowder costs $9.65 \n    45: Rogede sild costs $9.50\n    47: Zaanse koeken costs $9.50\n    19: Teatime Chocolate Biscuits costs $9.20 \n    23: Tunnbr\u00f6d costs $9.00\n    75: Rh\u00f6nbr\u00e4u Klosterbier costs $7.75 \n    54: Tourti\u00e8re costs $7.45\n    52: Filo Mix costs $7.00 \n    13: Konbu costs $6.00\n    24: Guaran\u00e1 Fant\u00e1stica costs $4.50 \n    33: Geitost costs $2.50 \n\n    ```", "```cs\nSELECT * FROM Products; \n\n```", "```cs\n public class\n\n Person\n\n{\n  public\n\n string\n\n Name { get\n\n; set\n\n; }\n  public\n\n DateTime DateOfBirth { get\n\n; set\n\n; }\n}\nPerson knownTypeObject = new\n\n()\n{\n  Name = \"Boris Johnson\"\n\n,\n  DateOfBirth = new\n\n(year: 1964\n\n, month: 6\n\n, day: 19\n\n)\n}; \n\n```", "```cs\n var\n\n anonymouslyTypedObject = new\n\n{\n  Name = \"Boris Johnson\"\n\n,\n  DateOfBirth = new\n\n DateTime(year: 1964\n\n, month: 6\n\n, day: 19\n\n)\n}; \n\n```", "```cs\n    IOrderedQueryable<Product> sortedAndFilteredProducts = \n      filteredProducts.OrderByDescending(product => product.UnitPrice);\n\n    **var**\n\n     **projectedProducts = sortedAndFilteredProducts**\n\n     **.Select(product =>** \n\n    **new**\n\n    **// anonymous type**\n\n     **{**\n\n     **product.ProductId,**\n\n     **product.ProductName,** \n\n     **product.UnitPrice**\n\n     **});**\n\n    WriteLine(\"Products that cost less than $10:\"\n\n    );\n    foreach\n\n     (\n    **var**\n\n     **p** \n\n    **in**\n\n     **projectedProducts**\n\n    )\n    { \n\n    ```", "```cs\n     static\n\n    void\n\n    JoinCategoriesAndProducts\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        // join every product to its category to return 77 matches\n\n        var\n\n     queryJoin = db.Categories.Join(\n          inner: db.Products,\n          outerKeySelector: category => category.CategoryId,\n          innerKeySelector: product => product.CategoryId,\n          resultSelector: (c, p) =>\n            new\n\n     { c.CategoryName, p.ProductName, p.ProductId });\n        foreach\n\n     (var\n\n     item in\n\n     queryJoin)\n        {\n          WriteLine(\"{0}: {1} is in {2}.\"\n\n    ,\n            arg0: item.ProductId,\n            arg1: item.ProductName,\n            arg2: item.CategoryName);\n        }\n      }\n    } \n\n    ```", "```cs\n    1: Chai is in Beverages. \n    2: Chang is in Beverages.\n    3: Aniseed Syrup is in Condiments.\n    4: Chef Anton's Cajun Seasoning is in Condiments. \n    5: Chef Anton's Gumbo Mix is in Condiments.\n    6: Grandma's Boysenberry Spread is in Condiments. \n    7: Uncle Bob's Organic Dried Pears is in Produce. \n    8: Northwoods Cranberry Sauce is in Condiments.\n    9: Mishi Kobe Niku is in Meat/Poultry. \n    10: Ikura is in Seafood.\n    ... \n\n    ```", "```cs\n    .OrderBy(cp => cp.CategoryName); \n\n    ```", "```cs\n    1: Chai is in Beverages. \n    2: Chang is in Beverages.\n    24: Guaran\u00e1 Fant\u00e1stica is in Beverages. \n    34: Sasquatch Ale is in Beverages.\n    35: Steeleye Stout is in Beverages. \n    38: C\u00f4te de Blaye is in Beverages. \n    39: Chartreuse verte is in Beverages. \n    43: Ipoh Coffee is in Beverages.\n    67: Laughing Lumberjack Lager is in Beverages. \n    70: Outback Lager is in Beverages.\n    75: Rh\u00f6nbr\u00e4u Klosterbier is in Beverages. \n    76: Lakkalik\u00f6\u00f6ri is in Beverages.\n    3: Aniseed Syrup is in Condiments.\n    4: Chef Anton's Cajun Seasoning is in Condiments.\n    ... \n\n    ```", "```cs\n     static\n\n    void\n\n    GroupJoinCategoriesAndProducts\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        // group all products by their category to return 8 matches\n\n        var\n\n     queryGroup = db.Categories.AsEnumerable().GroupJoin(\n          inner: db.Products,\n          outerKeySelector: category => category.CategoryId,\n          innerKeySelector: product => product.CategoryId,\n          resultSelector: (c, matchingProducts) => new\n\n          {\n            c.CategoryName,\n            Products = matchingProducts.OrderBy(p => p.ProductName)\n          });\n        foreach\n\n     (var\n\n     category in\n\n     queryGroup)\n        {\n          WriteLine(\"{0} has {1} products.\"\n\n    ,\n            arg0: category.CategoryName,\n            arg1: category.Products.Count());\n          foreach\n\n     (var\n\n     product in\n\n     category.Products)\n          {\n            WriteLine($\" \n\n    {product.ProductName}\n\n    \"\n\n    );\n          }\n        }\n      }\n    } \n\n    ```", "```cs\n    Unhandled exception. System.ArgumentException:  Argument type 'System.Linq.IOrderedQueryable`1[Packt.Shared.Product]' does not match the corresponding member type 'System.Linq.IOrderedEnumerable`1[Packt.Shared.Product]' (Parameter 'arguments[1]') \n\n    ```", "```cs\n    Beverages has 12 products.\n      Chai\n      Chang\n      Chartreuse verte\n      C\u00f4te de Blaye\n      Guaran\u00e1 Fant\u00e1stica\n      Ipoh Coffee\n      Lakkalik\u00f6\u00f6ri\n      Laughing Lumberjack Lager\n      Outback Lager\n      Rh\u00f6nbr\u00e4u Klosterbier\n      Sasquatch Ale\n      Steeleye Stout\n    Condiments has 12 products.\n      Aniseed Syrup\n      Chef Anton's Cajun Seasoning\n      Chef Anton's Gumbo Mix\n    ... \n\n    ```", "```cs\n     static\n\n    void\n\n    AggregateProducts\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        WriteLine(\"{0,-25} {1,10}\"\n\n    ,\n          arg0: \"Product count:\"\n\n    ,\n          arg1: db.Products.Count());\n        WriteLine(\"{0,-25} {1,10:$#,##0.00}\"\n\n    ,\n          arg0: \"Highest product price:\"\n\n    ,\n          arg1: db.Products.Max(p => p.UnitPrice));\n        WriteLine(\"{0,-25} {1,10:N0}\"\n\n    ,\n          arg0: \"Sum of units in stock:\"\n\n    ,\n          arg1: db.Products.Sum(p => p.UnitsInStock));\n        WriteLine(\"{0,-25} {1,10:N0}\"\n\n    ,\n          arg0: \"Sum of units on order:\"\n\n    ,\n          arg1: db.Products.Sum(p => p.UnitsOnOrder));\n        WriteLine(\"{0,-25} {1,10:$#,##0.00}\"\n\n    ,\n          arg0: \"Average unit price:\"\n\n    ,\n          arg1: db.Products.Average(p => p.UnitPrice));\n        WriteLine(\"{0,-25} {1,10:$#,##0.00}\"\n\n    ,\n          arg0: \"Value of units in stock:\"\n\n    ,\n          arg1: db.Products\n            .Sum(p => p.UnitPrice * p.UnitsInStock));\n      }\n    } \n\n    ```", "```cs\n    Product count:                    77\n    Highest product price:       $263.50\n    Sum of units in stock:         3,119\n    Sum of units on order:           780\n    Average unit price:           $28.87\n    Value of units in stock:  $74,050.85 \n\n    ```", "```cs\n string\n\n[] names = new\n\n[] { \"Michael\"\n\n, \"Pam\"\n\n, \"Jim\"\n\n, \"Dwight\"\n\n, \n  \"Angela\"\n\n, \"Kevin\"\n\n, \"Toby\"\n\n, \"Creed\"\n\n }; \n\n```", "```cs\n var\n\n query = names\n  .Where(name => name.Length > 4\n\n)\n  .OrderBy(name => name.Length)\n  .ThenBy(name => name); \n\n```", "```cs\n var\n\n query = from\n\n name in\n\n names\n  where\n\n name.Length > 4\n\n  orderby\n\n name.Length, name \n  select\n\n name; \n\n```", "```cs\n var\n\n query = names\n  .Where(name => name.Length > 4\n\n)\n  .Skip(80\n\n)\n  .Take(10\n\n); \n\n```", "```cs\n var\n\n query = (from\n\n name in\n\n names\n  where\n\n name.Length > 4\n\n  select\n\n name)\n  .Skip(80\n\n)\n  .Take(10\n\n); \n\n```", "```cs\n    Stopwatch watch = new\n\n    (); \n    Write(\"Press ENTER to start. \"\n\n    ); \n    ReadLine();\n    watch.Start();\n    int\n\n     max = 45\n\n    ;\n    IEnumerable<int\n\n    > numbers = Enumerable.Range(start: 1\n\n    , count: max);\n    WriteLine($\"Calculating Fibonacci sequence up to \n\n    {max}\n\n    . Please wait...\"\n\n    );\n    int\n\n    [] fibonacciNumbers = numbers\n      .Select(number => Fibonacci(number)).ToArray(); \n    watch.Stop();\n    WriteLine(\"{0:#,##0} elapsed milliseconds.\"\n\n    ,\n      arg0: watch.ElapsedMilliseconds);\n    Write(\"Results:\"\n\n    );\n    foreach\n\n     (int\n\n     number in\n\n     fibonacciNumbers)\n    {\n      Write($\" \n\n    {number}\n\n    \"\n\n    );\n    }\n    static\n\n    int\n\n    Fibonacci\n\n    (\n\n    int\n\n     term\n\n    )\n\n     =>\n      term switch\n\n      {\n        1\n\n     => 0\n\n    ,\n        2\n\n     => 1\n\n    ,\n        _ => Fibonacci(term - 1\n\n    ) + Fibonacci(term - 2\n\n    )\n      }; \n\n    ```", "```cs\n    Press ENTER to start. \n    Calculating Fibonacci sequence up to 45\\. Please wait...\n    17,624 elapsed milliseconds.\n    Results: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 \n\n    ```", "```cs\n     int\n\n    [] fibonacciNumbers = numbers.\n    **AsParallel()**\n\n      .Select(number => Fibonacci(number))\n\n     **.OrderBy(number => number)**\n\n      .ToArray(); \n\n    ```", "```cs\n    Press ENTER to start. \n    Calculating Fibonacci sequence up to 45\\. Please wait...\n    9,028 elapsed milliseconds.\n    Results: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986 102334155 165580141 267914296 433494437 701408733 \n\n    ```", "```cs\n     namespace\n\n     System.Linq\n\n    ; // extend Microsoft's namespace\n\n    public\n\n     static\n\n     class\n\n     MyLinqExtensions\n\n    {\n      // this is a chainable LINQ extension method\n\n      public\n\n    static\n\n    IEnumerable\n\n    <\n\n    T\n\n    > \n\n    ProcessSequence\n\n    <\n\n    T\n\n    >(\n\n    this\n\n     IEnumerable<T> sequence\n\n    )\n\n      {\n        // you could do some processing here\n\n        return\n\n     sequence;\n      }\n      public\n\n    static\n\n    IQueryable\n\n    <\n\n    T\n\n    > \n\n    ProcessSequence\n\n    <\n\n    T\n\n    >(\n\n    this\n\n     IQueryable<T> sequence\n\n    )\n\n      {\n        // you could do some processing here\n\n        return\n\n     sequence;\n      }\n      // these are scalar LINQ extension methods\n\n      public\n\n     static\n\n     int\n\n    ? Median(\n        this\n\n     IEnumerable<int\n\n    ?> sequence)\n      {\n        var\n\n     ordered = sequence.OrderBy(item => item);\n        int\n\n     middlePosition = ordered.Count() / 2\n\n    ;\n        return\n\n     ordered.ElementAt(middlePosition);\n      }\n      public\n\n     static\n\n     int\n\n    ? Median<T>(\n        this\n\n     IEnumerable<T> sequence, Func<T, int\n\n    ?> selector)\n      {\n        return\n\n     sequence.Select(selector).Median();\n      }\n      public\n\n     static\n\n     decimal\n\n    ? Median(\n        this\n\n     IEnumerable<decimal\n\n    ?> sequence)\n      {\n        var\n\n     ordered = sequence.OrderBy(item => item);\n        int\n\n     middlePosition = ordered.Count() / 2\n\n    ;\n        return\n\n     ordered.ElementAt(middlePosition);\n      }\n      public\n\n     static\n\n     decimal\n\n    ? Median<T>(\n        this\n\n     IEnumerable<T> sequence, Func<T, decimal\n\n    ?> selector)\n      {\n        return\n\n     sequence.Select(selector).Median();\n      }\n      public\n\n     static\n\n     int\n\n    ? Mode(\n        this\n\n     IEnumerable<int\n\n    ?> sequence)\n      {\n        var\n\n     grouped = sequence.GroupBy(item => item);\n        var\n\n     orderedGroups = grouped.OrderByDescending(\n          group\n\n     => group\n\n    .Count());\n        return\n\n     orderedGroups.FirstOrDefault()?.Key;\n      }\n      public\n\n     static\n\n     int\n\n    ? Mode<T>(\n        this\n\n     IEnumerable<T> sequence, Func<T, int\n\n    ?> selector)\n      {\n        return\n\n     sequence.Select(selector)?.Mode();\n      }\n      public\n\n     static\n\n     decimal\n\n    ? Mode(\n        this\n\n     IEnumerable<decimal\n\n    ?> sequence)\n      {\n        var\n\n     grouped = sequence.GroupBy(item => item);\n        var\n\n     orderedGroups = grouped.OrderByDescending(\n          group\n\n     => group\n\n    .Count());\n        return\n\n     orderedGroups.FirstOrDefault()?.Key;\n      }\n      public\n\n     static\n\n     decimal\n\n    ? Mode<T>(\n        this\n\n     IEnumerable<T> sequence, Func<T, decimal\n\n    ?> selector)\n      {\n        return\n\n     sequence.Select(selector).Mode();\n      }\n    } \n\n    ```", "```cs\n    DbSet<Product>? allProducts = db.Products;\n    if\n\n     (allProducts is\n\n     null\n\n    )\n    {\n      WriteLine(\"No products found.\"\n\n    );\n      return\n\n    ;\n    }\n\n    **IQueryable<Product> processedProducts = allProducts.ProcessSequence();**\n\n    IQueryable<Product> filteredProducts = \n    **processedProducts**\n\n      .Where(product => product.UnitPrice < 10\n\n    M); \n\n    ```", "```cs\n     static\n\n    void\n\n    CustomExtensionMethods\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        WriteLine(\"Mean units in stock: {0:N0}\"\n\n    ,\n          db.Products.Average(p => p.UnitsInStock));\n        WriteLine(\"Mean unit price: {0:$#,##0.00}\"\n\n    ,\n          db.Products.Average(p => p.UnitPrice));\n        WriteLine(\"Median units in stock: {0:N0}\"\n\n    ,\n          db.Products.Median(p => p.UnitsInStock));\n        WriteLine(\"Median unit price: {0:$#,##0.00}\"\n\n    ,\n          db.Products.Median(p => p.UnitPrice));\n        WriteLine(\"Mode units in stock: {0:N0}\"\n\n    ,\n          db.Products.Mode(p => p.UnitsInStock));\n        WriteLine(\"Mode unit price: {0:$#,##0.00}\"\n\n    ,\n          db.Products.Mode(p => p.UnitPrice));\n      }\n    } \n\n    ```", "```cs\n    Mean units in stock: 41 \n    Mean unit price: $28.87 \n    Median units in stock: 26 \n    Median unit price: $19.50 \n    Mode units in stock: 0 \n    Mode unit price: $18.00 \n\n    ```", "```cs\n     static\n\n    void\n\n    OutputProductsAsXml\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        Product[] productsArray = db.Products.ToArray();\n        XElement xml = new\n\n    (\"products\"\n\n    ,\n          from\n\n     p \n\n    in\n\n     productsArray\n\n    select\n\n    new\n\n    XElement\n\n    (\n\n    \"product\"\n\n    ,\n\n    new\n\n     XAttribute(\n\n    \"id\"\n\n    ,  p.ProductId\n\n    ),\n\n    new\n\n    XAttribute\n\n    (\n\n    \"price\"\n\n    , p.UnitPrice\n\n    ),\n\n    new\n\n    XElement\n\n    (\n\n    \"name\"\n\n    , p.ProductName\n\n    )))\n\n    ;\n        WriteLine(xml.ToString());\n      }\n    } \n\n    ```", "```cs\n    <products>\n      <product id=\"1\" price=\"18\">\n        <name>Chai</name>\n      </product>\n      <product id=\"2\" price=\"19\">\n        <name>Chang</name>\n      </product>\n    ... \n\n    ```", "```cs\n     <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\n    <\n\n    appSettings\n\n    >\n\n      <\n\n    add\n\n    key\n\n    =\n\n    \"color\"\n\n    value\n\n    =\n\n    \"red\"\n\n     />\n\n      <\n\n    add\n\n    key\n\n    =\n\n    \"size\"\n\n    value\n\n    =\n\n    \"large\"\n\n     />\n\n      <\n\n    add\n\n    key\n\n    =\n\n    \"price\"\n\n    value\n\n    =\n\n    \"23.99\"\n\n     />\n\n    </\n\n    appSettings\n\n    > \n\n    ```", "```cs\n     static\n\n    void\n\n    ProcessSettings\n\n    ()\n\n    {\n      XDocument doc = XDocument.Load(\"settings.xml\"\n\n    );\n      var\n\n     appSettings = doc.Descendants(\"appSettings\"\n\n    )\n        .Descendants(\"add\"\n\n    )\n        .Select(node => new\n\n        {\n          Key = node.Attribute(\"key\"\n\n    )?.Value,\n          Value = node.Attribute(\"value\"\n\n    )?.Value\n        }).ToArray();\n      foreach\n\n     (var\n\n     item in\n\n     appSettings)\n      {\n        WriteLine($\"\n\n    {item.Key}\n\n    : \n\n    {item.Value}\n\n    \"\n\n    );\n      }\n    } \n\n    ```", "```cs\n    color: red \n    size: large \n    price: 23.99 \n\n    ```", "```cs\nEnter the name of a city: London \nThere are 6 customers in London: \nAround the Horn\nB's Beverages \nConsolidated Holdings \nEastern Connection \nNorth/South\nSeven Seas Imports \n\n```", "```cs\nAachen, Albuquerque, Anchorage, \u00c5rhus, Barcelona, Barquisimeto, Bergamo, Berlin, Bern, Boise, Br\u00e4cke, Brandenburg, Bruxelles, Buenos Aires, Butte, Campinas, Caracas, Charleroi, Cork, Cowes, Cunewalde, Elgin, Eugene, Frankfurt a.M., Gen\u00e8ve, Graz, Helsinki, I. de Margarita, Kirkland, Kobenhavn, K\u00f6ln, Lander, Leipzig, Lille, Lisboa, London, Lule\u00e5, Lyon, Madrid, Mannheim, Marseille, M\u00e9xico D.F., Montr\u00e9al, M\u00fcnchen, M\u00fcnster, Nantes, Oulu, Paris, Portland, Reggio Emilia, Reims, Resende, Rio de Janeiro, Salzburg, San Crist\u00f3bal, San Francisco, Sao Paulo, Seattle, Sevilla, Stavern, Strasbourg, Stuttgart, Torino, Toulouse, Tsawassen, Vancouver, Versailles, Walla Walla, Warszawa \n\n```"]