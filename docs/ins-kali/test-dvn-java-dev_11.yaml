- en: Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: '"If you always do what you always did, then you will always get what you always
    got."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “如果你总是做你一直做的事情，那么你将永远得到你一直得到的东西。”
- en: – Albert Einstein
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- 阿尔伯特·爱因斯坦'
- en: We have gone through a lot of theory followed by even more practice. The entire
    journey was like a speeding train and we have hardly had an opportunity to repeat
    what we learned. There was no time for rest.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经历了大量的理论，然后进行了更多的实践。整个过程就像一辆飞驰的火车，我们几乎没有机会重复所学的知识。没有休息的时间。
- en: The good news is that the time for the reflection is now. We'll summarize everything
    we learned and go through TDD best practices. Some of those have already been
    mentioned, while others will be new.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，现在是反思的时候了。我们将总结我们学到的一切，并学习TDD的最佳实践。其中一些已经提到，而其他一些将是新的。
- en: 'Topics covered in this chapter include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: TDD in a nutshell
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TDD简而言之
- en: Common conventions and good practices, such as in naming tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名测试的常见约定和良好实践
- en: Tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: Next steps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步
- en: TDD in a nutshell
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD简而言之
- en: '**Red-Green-Refactor** is the pillar of TDD that wraps it into a short and
    repeatable cycle. By short, we mean very short. The time dedicated to each phase
    is often counted in minutes, if not seconds. Write a test, see it fail, write
    just enough implementation code to make the last test pass, run all tests, and
    pass into the green phase. Once the minimum code is written so that we have safety
    in the form of passing tests, it is time to refactor the code until it is as good
    as we''re hoping it to be. While in this phase, tests should always pass. Neither
    new functionalities nor new tests can be introduced while refactoring is in progress.
    Doing all this in such a short period of time is often scary, or might sound impossible.
    We hope that, through the exercises we did together, your skills have improved,
    as well as your confidence and speed.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**红-绿-重构**是TDD的支柱，将其包装成一个简短且可重复的循环。简短意味着非常短。每个阶段的时间通常以分钟甚至秒计算。编写测试，看到它失败，编写足够的实现代码使最后一个测试通过，运行所有测试，并进入绿色阶段。一旦编写了最少的代码，以便我们通过测试获得安全性，就是重构代码的时候了，直到它变得像我们希望的那样好。在这个阶段，测试应该始终通过。在重构过程中不能引入新功能或新测试。在如此短的时间内完成所有这些往往是可怕的，或者听起来可能是不可能的。我们希望通过我们一起做的练习，你的技能已经得到了提高，你的信心和速度也得到了提高。'
- en: While there is the word **test** in **TDD**, it is not the main benefit nor
    objective. TDD is, first and foremost, a concept of a better way to design our
    code. On top of that, we end up with tests that should be used to continuously
    check that the application continues working as expected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD中有“测试”一词，但这并不是主要的好处或目标。TDD首先是一个更好的设计代码的概念。除此之外，我们最终得到的测试应该用于不断检查应用程序是否按预期继续工作。
- en: The importance of speed was mentioned often previously. While part of this is
    accomplished by us being ever more proficient in TDD, another contributor is **test
    doubles** (mocking, stubbing, spying, and so on). With these, we can remove the
    need for external dependencies such as databases, file systems, third-party services,
    and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 之前经常提到速度的重要性。虽然我们在TDD方面变得更加熟练是其中的一部分，另一个贡献者是测试替身（模拟、存根、间谍等）。有了这些，我们可以消除对数据库、文件系统、第三方服务等外部依赖的需求。
- en: What are the other benefits of TDD? Documentation is one of them. Since code
    itself is the only accurate and always up-to-date representation of the applications
    we're working on, specifications written using TDD (being code as well) is the
    first place we should turn to when we need to better understand what a piece of
    code does.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的其他好处是什么？文档是其中之一。由于代码本身是我们正在处理的应用程序的唯一准确且始终是最新的表示，使用TDD编写的规范（同样也是代码）是我们需要更好地理解代码作用时应该首先去查看的地方。
- en: How about design? You noticed how TDD produces code that is designed better.
    Rather than defining design in advance, with TDD it tends to emerge as we progress
    from one specification to another. At the same time, code that is easy to test
    is well-designed code. Tests force us to apply some coding best practices.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 设计呢？你注意到TDD产生了更好设计的代码。与事先定义设计不同，使用TDD设计往往是在我们从一个规范进展到另一个规范时逐渐出现的。同时，易于测试的代码就是设计良好的代码。测试迫使我们应用一些编码最佳实践。
- en: We also learned that TDD does not need to be practiced only on small units (methods).
    It can also be used at a much higher-level, where the focus is on a feature or
    a behavior that can span multiple methods, classes, or even applications and systems.
    One of the forms of TDD practiced at such a high-level is **behavior-driven development**
    (**BDD**). Unlike TDD, which is based on the unit tests that are done by developers
    for developers, BDD can be used by almost everyone in your organization. Since
    it tackles behaviors and it's written in natural (ubiquitous) language, testers,
    managers, business representatives, and others can participate in its creation
    and use it as a reference later on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解到TDD不仅需要在小单元（方法）上进行。它也可以在更高层次上使用，重点是一个可以跨越多个方法、类，甚至应用程序和系统的特性或行为。在这样一个高层次上实践TDD的形式之一是**行为驱动开发**（**BDD**）。与TDD不同，它是基于开发人员为开发人员进行的单元测试，BDD可以被组织中的几乎所有人使用。由于它涉及行为，并且是用自然（无处不在的）语言编写的，测试人员、经理、业务代表等都可以参与其创建，并在以后将其用作参考。
- en: We defined legacy code as code without tests. We faced some of the challenges
    legacy code puts in front of us and learned some of the techniques that can be
    used to make it testable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遗留代码定义为没有测试的代码。我们面对了遗留代码给我们带来的一些挑战，并学习了一些可以用来使其可测试的技术。
- en: With all this in mind, let's go through TDD best practices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一切，让我们一起学习TDD的最佳实践。
- en: Best practices
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Coding best practices are a set of informal rules that the software development
    community has developed over time, which can help to improve the quality of software.
    While each application needs a level of creativity and originality (after all,
    we're trying to build something new or better), coding practices help us avoid
    some of the problems others faced before us. If you're just starting with TDD,
    it is a good idea to apply some (if not all) of the best practices generated by
    others.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编码最佳实践是软件开发社区随着时间发展出的一套非正式规则，可以帮助提高软件的质量。虽然每个应用都需要一定程度的创造力和原创性（毕竟，我们试图构建一些新的或更好的东西），编码实践可以帮助我们避免一些其他人在我们之前遇到的问题。如果你刚开始使用TDD，应用一些（如果不是全部）由他人生成的最佳实践是一个好主意。
- en: 'For easier classification of TDD best practices, we divided them into four
    categories:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易分类TDD最佳实践，我们将它们分为四类：
- en: Naming conventions
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名约定
- en: Processes
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程
- en: Development practices
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发实践
- en: Tools
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: As you'll see, not all of them are exclusive to TDD. Since a big part of TDD
    consists of writing tests, many of the best practices presented in the following
    sections apply to testing in general, while others are related to general coding
    best practices. No matter the origin, all of them are useful when practicing TDD.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将看到的，它们并不都是TDD专用的。由于TDD 的很大一部分包括编写测试，因此以下部分介绍的许多最佳实践适用于一般测试，而其他一些则与一般编码最佳实践相关。无论起源如何，当练习TDD
    时，所有这些都是有用的。
- en: Take the advice with a certain dose of skepticism. Being a great programmer
    is not only about knowing how to code, but also about being able to decide which
    practice, framework, or style best suits the project and the team. Being agile
    is not about following someone else's rules, but about knowing how to adapt to
    circumstances and choose the best tools and practices that suit the team and the
    project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以一定的怀疑态度接受建议。成为一名优秀的程序员不仅仅是知道如何编码，还包括能够决定哪种实践、框架或风格最适合项目和团队。灵活并不是指遵循别人的规则，而是知道如何适应环境并选择最适合团队和项目的最佳工具和实践。
- en: Naming conventions
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名约定
- en: Naming conventions help to organize tests better, so that it is easier for developers
    to find what they're looking for. Another benefit is that many tools expect that
    those conventions are followed. There are many naming conventions in use, and
    those presented here are just a drop in the ocean. The logic is that any naming
    convention is better than none. Most important is that everyone on the team knows
    what conventions are being used and are comfortable with them. Choosing more popular
    conventions has the advantage that newcomers to the team can get up to speed fast,
    since they can leverage existing knowledge to find their way around.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定有助于更好地组织测试，使开发人员更容易找到他们正在寻找的内容。另一个好处是许多工具期望遵循这些约定。目前有许多使用中的命名约定，这里介绍的只是冰山一角。逻辑是任何命名约定都比没有好。最重要的是团队中的每个人都知道正在使用哪些约定并且对其感到舒适。选择更流行的约定的优势在于，团队的新成员可以快速上手，因为他们可以利用现有知识找到自己的方向。
- en: Separate the implementation from the test code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将实现与测试代码分开。
- en: 'Benefits: It avoids accidentally packaging tests together with production binaries;
    many build tools expect tests to be in a certain source directory.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它避免了意外地将测试与生产二进制文件一起打包；许多构建工具期望测试位于特定的源目录中。
- en: Common practice is to have at least two source directories. Implementation code
    should be located in `src/main/java` and test code in `src/test/java`. In bigger
    projects, the number of source directories can increase, but the separation between
    implementation and tests should remain as is.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 常见做法是至少有两个源目录。实现代码应该位于`src/main/java`，测试代码应该位于`src/test/java`。在更大的项目中，源目录的数量可能会增加，但是实现和测试之间的分离应该保持不变。
- en: Build tools such as Gradle and Maven expect source directory separation as well
    as naming conventions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Gradle 和 Maven 这样的构建工具期望源目录分离以及命名约定。
- en: You might have noticed that the `build.gradle` files that we used throughout
    this book did not explicitly specify what to test, nor what classes to use to
    create a `.jar` file. Gradle assumes that tests are in `src/test/java` and that
    the implementation code that should be packaged into a JAR file is in `src/main/java`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们在整本书中使用的`build.gradle`文件并没有明确指定要测试什么，也没有指定要使用哪些类来创建`.jar`文件。Gradle
    假定测试位于`src/test/java`，应该打包到 JAR 文件中的实现代码位于`src/main/java`。
- en: Place test classes in the same package as implementation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试类放在与实现相同的包中。
- en: 'Benefits: Knowing that tests are in the same package as the code helps you
    to find code faster.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：知道测试与代码在同一个包中有助于更快地找到代码。
- en: As stated in the previous practice, even though packages are the same, classes
    are in separate source directories.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的做法所述，尽管包是相同的，但类位于不同的源目录中。
- en: All exercises throughout this book followed this convention.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有练习都遵循了这一惯例。
- en: Name test classes in a similar fashion to the classes they test.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以与它们测试的类类似的方式命名测试类。
- en: 'Benefits: Knowing that tests have a similar name to the classes they are testing
    helps you find the classes faster.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：知道测试与它们所测试的类有相似的名称有助于更快地找到类。
- en: One commonly used practice is to name tests the same as the implementation classes,
    with the suffix `Test`. If, for example, the implementation class is `TickTackToe`,
    the test class should be `TickTackToeTest`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常用的做法是将测试命名为与实现类相同的名称，后缀为“Test”。例如，如果实现类是`TickTackToe`，测试类应该是`TickTackToeTest`。
- en: However, in all cases, with the exception of those we used throughout the refactoring
    exercises, we prefer the suffix `Spec`. It helps to make a clear distinction that
    test methods are primarily created as a way to specify what will be developed.
    Testing is a great sub-product of those specifications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在所有情况下，除了我们在重构练习中使用的情况外，我们更喜欢后缀`Spec`。它有助于清晰地区分测试方法主要是作为规定将要开发的内容。测试是这些规范的一个很好的附产品。
- en: Use descriptive names for test methods.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试方法使用描述性名称。
- en: 'Benefits: It helps in understanding the objective of tests.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它有助于理解测试的目标。
- en: Using method names that describe tests is beneficial when trying to figure out
    why some tests failed or when the coverage should be increased with more tests.
    It should be clear what conditions are set before the test, what actions are performed,
    and what the expected outcome is.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试弄清楚为什么某些测试失败或者测试覆盖率应该增加更多测试时，使用描述测试的方法名称是有益的。在测试之前应该清楚地了解设置了什么条件，执行了什么操作，以及预期的结果是什么。
- en: There are many different ways to name test methods, and our preferred method
    is to name them using the `Given`/`When`/`Then` syntax used in the BDD scenarios.
    `Given` describes (pre)conditions, `When` describes actions, and `Then` describes
    the expected outcome. If a test does not have preconditions (usually set using
    `@Before` and `@BeforeClass` annotations), `Given` can be skipped.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方法来命名测试方法，我们首选的方法是使用BDD场景中使用的`Given`/`When`/`Then`语法来命名它们。`Given`描述（前）条件，`When`描述操作，`Then`描述预期结果。如果测试没有前提条件（通常使用`@Before`和`@BeforeClass`注释设置），则可以跳过`Given`。
- en: 'Let''s take a look at one of the specifications we created for our Tic-Tac-Toe
    application:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们为井字游戏应用程序创建的规范之一：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Just by reading the name of the method, we can understand what it is about.
    When we play and the whole horizontal or vertical and diagonal line is populated,
    then we have a winner.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过读取方法的名称，我们就可以理解它是关于什么的。当我们玩游戏并且整个水平或垂直和对角线都被填满时，我们就有了一个赢家。
- en: Do not rely only on comments to provide information about the test objective.
    Comments do not appear when tests are executed from your favorite IDE, nor do
    they appear in reports generated by CI or build tools.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要仅依赖注释来提供有关测试目标的信息。当从您喜爱的IDE执行测试时，注释不会出现，也不会出现在CI或构建工具生成的报告中。
- en: Processes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流程
- en: TDD processes are the core set of practices. Successful implementation of TDD
    depends on practices described in this section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: TDD流程是一组核心实践。TDD的成功实施取决于本节中描述的实践。
- en: Write a test before writing the implementation code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写实现代码之前编写测试。
- en: 'Benefits: It ensures that testable code is written; it ensures that every line
    of code gets tests written for it.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它确保编写了可测试的代码；它确保为每一行代码编写了测试。
- en: By writing or modifying the test first, the developer is focused on requirements
    before starting to work on the implementation code. This is the main difference
    compared to writing tests after the implementation is done. The additional benefit
    is that with the tests written first, we are avoiding the danger that the tests
    work as **quality checking** (**QC**) instead of **quality assurance** (**QA**).
    We're trying to ensure that quality is built in, as opposed to checking later
    whether we met quality objectives.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过首先编写或修改测试，开发人员在开始编写实现代码之前专注于需求。这与在实现完成后编写测试的方式相比是主要的区别。额外的好处是，通过先编写测试，我们避免了测试作为质量检查（QC）而不是质量保证（QA）的危险。我们试图确保质量内置，而不是稍后检查是否达到了质量目标。
- en: Only write new code when the test is failing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在测试失败时才编写新代码。
- en: 'Benefits: It confirms that the test does not work without the implementation.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它确认了测试在没有实现的情况下不起作用。
- en: If tests are passing without the need to write or modify the implementation
    code, then either the functionality is already implemented or the test is defective.
    If new functionality is indeed missing, then the test always passes and is therefore
    useless. Tests should fail for the expected reason. Even though there are no guarantees
    that the test is verifying the right thing, with fail first and for the expected
    reason, confidence that verification is correct should be high.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试通过而无需编写或修改实现代码，那么要么功能已经实现，要么测试有问题。如果确实缺少新功能，那么测试总是通过，因此是无用的。测试应该因为预期的原因而失败。尽管无法保证测试是否验证了正确的事情，但通过首先失败并因为预期的原因，对验证正确性的信心应该很高。
- en: Rerun all tests every time the implementation code changes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每次实现代码发生变化时重新运行所有测试。
- en: 'Benefits: It ensures that there are no unexpected side effects caused by code
    changes.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它确保代码更改没有引起意外的副作用。
- en: 'Every time any part of the implementation code changes, all tests should be
    run. Ideally, tests are fast to execute and can be run by the developer locally.
    Once code is submitted to version control, all tests should be run again to ensure
    that there was no problem due to code merges. This is especially important when
    more than one developer is working on the code. **Continuous integration** (**CI**)
    tools should be used to pull the code from the repository, compile it, and run
    tests, such as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每当实现代码的任何部分发生变化时，都应该运行所有测试。理想情况下，测试执行速度快，可以由开发人员在本地运行。一旦代码提交到版本控制，应该再次运行所有测试，以确保由于代码合并而没有问题。当有多个开发人员在代码上工作时，这一点尤为重要。应该使用持续集成（CI）工具从存储库中拉取代码，编译它，并运行测试，例如：
- en: Jenkins ([https://jenkins.io/](https://jenkins.io/))
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins（https://jenkins.io/）
- en: Hudson ([http://hudson-ci.org/](http://hudson-ci.org/))
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hudson（http://hudson-ci.org/）
- en: Travis ([https://travis-ci.org/](https://travis-ci.org/))
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis（https://travis-ci.org/）
- en: Bamboo ([https://www.atlassian.com/software/bamboo](https://www.atlassian.com/software/bamboo))
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo（https://www.atlassian.com/software/bamboo）
- en: All tests should pass before a new test is written.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写新测试之前，所有测试都应该通过。
- en: 'Benefits: The focus is maintained on a small unit of work; implementation code
    is (almost) always in working condition.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它保持专注在一个小单位的工作上；实现代码（几乎）总是处于工作状态。
- en: It is sometimes tempting to write multiple tests before the actual implementation.
    In other cases, developers ignore problems detected by existing tests and move
    towards new features. This should be avoided whenever possible. In most cases,
    breaking this rule will only introduce technical debt that will need to be paid
    with interest. One of the goals of TDD is that the implementation code is (almost)
    always working as expected. Some projects, due to pressures to reach the delivery
    date or maintain the budget, break this rule and dedicate time to new features,
    leaving the task of fixing the code associated with failed tests for later. These
    projects usually end up postponing the inevitable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候在实际实现之前编写多个测试是很诱人的。在其他情况下，开发人员会忽略现有测试检测到的问题，转向新功能。尽量避免这种情况。在大多数情况下，违反这个规则只会引入技术债务，需要付出更多的利息。TDD的一个目标是，实现代码（几乎）总是按预期工作的。一些项目由于压力要达到交付日期或保持预算，违反这个规则并且将时间用于新功能，留下修复与失败测试相关的代码的任务。这些项目通常最终会推迟不可避免的事情。
- en: Refactor only after all tests are passing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在所有测试都通过之后才进行重构。
- en: 'Benefits: This type of refactoring is safe.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：这种重构是安全的。
- en: If all implementation code that can be affected has tests and they are all passing,
    it is relatively safe to refactor. In most cases, there is no need for new tests.
    Small modifications to existing tests should be enough. The expected outcome of
    refactoring is to have all tests passing both before and after the code is modified.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有可能受到影响的实现代码都有测试，并且它们都通过了，那么重构是相对安全的。在大多数情况下，不需要新的测试。对现有测试进行小的修改应该就足够了。重构的预期结果是在修改代码之前和之后都通过所有测试。
- en: Development practices
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发实践
- en: Practices listed in this section are focused on the best way to write tests.
    Write the simplest code to pass the test as it ensures cleaner and clearer design
    and avoids unnecessary features.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本节列出的实践着重于编写测试的最佳方式。编写最简单的代码来通过测试，因为这样可以确保更清晰和更干净的设计，并避免不必要的功能。
- en: The idea is that the simpler the implementation, the better and easier it is
    to maintain the product. The idea adheres to the **keep it simple**, **stupid**
    (**KISS**) principle. This states that most systems work best if they are kept
    simple rather than made complex; therefore, simplicity should be a key goal in
    design, and unnecessary complexity should be avoided. Write assertions first,
    act later as it clarifies the purpose of the requirements and tests early.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，实现越简单，产品就越好、维护也更容易。这个想法遵循“保持简单，愚蠢”（KISS）原则。这个原则指出，大多数系统如果保持简单而不是复杂，就能发挥最佳作用；因此，简单性应该是设计的一个关键目标，不必要的复杂性应该被避免。先写断言，后行动，因为它能够在早期澄清需求和测试的目的。
- en: Once the assertion is written, the purpose of the test is clear and the developer
    can concentrate on the code that will accomplish that assertion and, later on,
    on the actual implementation. Minimize assertions in each test as it avoids assertion
    roulette; it allows the execution of more asserts.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦断言被写出来，测试的目的就清楚了，开发人员可以集中精力在实现这个断言的代码上，然后是实际的实现。在每个测试中最小化断言，避免断言轮盘赌；它允许执行更多的断言。
- en: If multiple assertions are used within one test method, it might be hard to
    tell which of them caused a test failure. This is especially common when tests
    are executed as part of the CI process. If the problem cannot be reproduced on
    a developer's machine (as may be the case if the problem is caused by environmental
    issues), fixing the problem may be difficult and time consuming.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在一个测试方法中使用了多个断言，可能很难确定哪个导致了测试失败。当测试作为CI过程的一部分执行时，这种情况尤其常见。如果问题无法在开发人员的机器上重现（如果问题是由环境问题引起的情况可能是这样），修复问题可能会很困难和耗时。
- en: When one assert fails, execution of that test method stops. If there are other
    asserts in that method, they will not be run and information that can be used
    in debugging is lost.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个断言失败时，该测试方法的执行就会停止。如果该方法中有其他断言，它们将不会被运行，导致丢失了可以用于调试的信息。
- en: Last but not least, having multiple asserts creates confusion about the objective
    of the test.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，多个断言会让测试的目标变得模糊。
- en: This practice does not mean that there should always be only one `assert` per
    test method. If there are other asserts that test the same logical condition or
    unit of functionality, they can be used within the same method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法并不意味着每个测试方法中应该总是只有一个`assert`。如果有其他断言来测试相同的逻辑条件或功能单元，它们可以在同一个方法中使用。
- en: 'Let''s go through a few examples:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子来看：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code contains two specifications that clearly define what the
    objective of the tests is. By reading the method names and looking at the `assert`,
    there should be clarity on what is being tested. Consider the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码包含了两个明确定义了测试目标的规范。通过阅读方法名称和查看`assert`，应该清楚地知道正在测试什么。考虑以下例子：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This specification has more than one `assert`, but they are testing the same
    logical unit of functionality. The first `assert` is confirming that the exception
    exists, and the second that its message is correct. When multiple asserts are
    used in one test method, they should all contain messages that explain the failure.
    This way, debugging the failed `assert` is easier. In the case of one `assert`
    per test method, messages are welcome but not necessary, since it should be clear
    from the method name what the objective of the test is:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规范有多个`assert`，但它们都在测试相同的逻辑功能单元。第一个`assert`确认异常存在，第二个确认它的消息是正确的。当在一个测试方法中使用多个断言时，它们都应该包含解释失败的消息。这样，调试失败的`assert`就更容易了。在每个测试方法中只有一个`assert`的情况下，消息是可以的，但不是必需的，因为从方法名称中应该清楚地知道测试的目标是什么：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This test has many asserts. It is unclear what the functionality is, and if
    one of them fails, it is not known whether the rest would work or not. It might
    be hard to understand the failure when this test is executed through some CI tools.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试有很多断言。不清楚功能是什么，如果其中一个失败，不知道其余的是否会工作。当通过一些CI工具执行此测试时，可能很难理解失败。
- en: Do not introduce dependencies between tests.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在测试之间引入依赖关系。
- en: 'Benefits: The tests work in any order independently, whether all or only a
    subset is run.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：测试以任何顺序独立运行，无论是运行所有还是只运行一个子集。
- en: Each test should be independent of the others. Developers should be able to
    execute any individual test, a set of tests, or all of them. Often, due to the
    test runner's design, there is no guarantee that tests will be executed in any
    particular order. If there are dependencies between tests, they might easily be
    broken with the introduction of new ones.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个测试都应该独立于其他测试。开发人员应该能够执行任何单独的测试，一组测试或所有测试。通常，由于测试运行器的设计，不能保证测试将按任何特定顺序执行。如果测试之间存在依赖关系，它们可能很容易在引入新的依赖关系时被破坏。
- en: Tests should run fast.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该运行得快。
- en: 'Benefits: These tests are used often.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：这些测试经常被使用。
- en: If it takes a lot of time to run tests, developers will stop using them or run
    only a small subset related to the changes they are making. The benefit of fast
    tests, besides fostering their usage, is quick feedback. The sooner the problem
    is detected, the easier it is to fix it. Knowledge about the code that produced
    the problem is still fresh. If the developer already started working on the next
    feature while waiting for the completion of the execution of the tests, they might
    decide to postpone fixing the problem until that new feature is developed. On
    the other hand, if they drops their current work to fix the bug, time is lost
    in context switching.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行测试需要很长时间，开发人员将停止使用它们，或者只运行与他们正在进行的更改相关的一小部分测试。快速测试的好处，除了促进它们的使用，还包括快速反馈。问题被检测到得越早，修复起来就越容易。对产生问题的代码的了解仍然很新鲜。如果开发人员在等待测试执行完成时已经开始处理下一个功能，他们可能会决定推迟修复问题，直到开发了新功能。另一方面，如果他们放弃当前的工作来修复错误，那么在上下文切换中会浪费时间。
- en: Tests should be so quick that developers can run all of them after each change
    without getting bored or frustrated.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应该如此迅速，以至于开发人员可以在每次更改后运行所有测试而不感到无聊或沮丧。
- en: Use test doubles.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用测试替身。
- en: 'Benefits: This reduces code dependency and test execution will be faster.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：这减少了代码依赖性，测试执行将更快。
- en: Mocks are prerequisites for the fast execution of tests and the ability to concentrate
    on a single unit of functionality. By mocking dependencies external to the method
    that is being tested, the developer is able to focus on the task at hand without
    spending time in setting them up. In the case of bigger teams, those dependencies
    might not even be developed. Also, the execution of tests without mocks tends
    to be slow. Good candidates for mocks are databases, other products, services,
    and so on.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟是测试快速执行和专注于单个功能单元的先决条件。通过模拟被测试方法外部的依赖关系，开发人员能够专注于手头的任务，而不必花时间设置它们。在更大的团队中，这些依赖关系甚至可能尚未开发。此外，没有模拟的测试执行往往很慢。模拟的良好候选对象包括数据库、其他产品、服务等。
- en: Use setup and teardown methods.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用设置和拆卸方法。
- en: 'Benefits: This allows setup and teardown code to be executed before and after
    the class or each method.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：这允许在类或每个方法之前和之后执行设置和拆卸代码。
- en: In many cases, some code needs to be executed before the test class or before
    each method in a class. For this purpose, JUnit has `@BeforeClass` and `@Before`
    annotations that should be used as the setup phase. `@BeforeClass` executes the
    associated method before the class is loaded (before the first test method is
    run).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，一些代码需要在测试类之前或在类中的每个方法之前执行。为此，JUnit有`@BeforeClass`和`@Before`注解，应该被用作设置阶段。`@BeforeClass`在类加载之前（在第一个测试方法运行之前）执行关联的方法。
- en: '`@Before` executes the associated method before each test is run. Both should
    be used when there are certain preconditions required by tests. The most common
    example is setting up test data in the (hopefully in-memory) database.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Before`在每个测试运行之前执行关联的方法。当测试需要特定的前提条件时，应该使用这两个注解。最常见的例子是在（希望是内存中的）数据库中设置测试数据。'
- en: At the opposite end are `@After` and `@AfterClass` annotations, which should
    be used as the teardown phase. Their main purpose is to destroy data or a state
    created during the setup phase or by the tests themselves. As stated in one of
    the previous practices, each test should be independent from the others. Moreover,
    no test should be affected by the others. The teardown phase helps to maintain
    the system as if no test was previously executed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在相对的另一端是`@After`和`@AfterClass`注解，它们应该被用作拆卸阶段。它们的主要目的是销毁在设置阶段或测试本身创建的数据或状态。正如在先前的一个实践中所述，每个测试都应该独立于其他测试。此外，没有测试应该受到其他测试的影响。拆卸阶段有助于保持系统，就好像之前没有执行任何测试一样。
- en: Do not use base classes in tests.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在测试中使用基类。
- en: 'Benefits: It provides test clarity.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它提供了测试的清晰度。
- en: Developers often approach test code in the same way as implementation. One of
    the common mistakes is to create base classes that are extended by tests. This
    practice avoids code duplication at the expense of test clarity. When possible,
    base classes used for testing should be avoided or limited. Having to navigate
    from the test class to its parent, to the parent of the parent, and so on in order
    to understand the logic behind tests often introduces unnecessary confusion. Clarity
    in tests should be more important than avoiding code duplication.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员通常以与实现相同的方式处理测试代码。常见的错误之一是创建被测试类扩展的基类。这种做法避免了代码重复，但牺牲了测试的清晰度。在可能的情况下，应该避免或限制用于测试的基类。必须从测试类导航到其父类，再到父类的父类等，以便理解测试背后的逻辑，这经常会引入不必要的混乱。测试的清晰度应该比避免代码重复更重要。
- en: Tools
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: TDD, coding, and testing in general, are heavily dependent on other tools and
    processes. Some of the most important ones are as follows. Each of them is too
    big a topic to be explored in this book, so they will be described only briefly.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: TDD、编码和测试一般都严重依赖于其他工具和流程。其中一些最重要的工具如下。它们每一个都是一个太大的主题，无法在本书中进行探讨，所以它们只会被简要描述。
- en: Code coverage and CI.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率和CI。
- en: 'Benefits: It gives assurance that everything is tested.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：它确保了一切都经过了测试。
- en: 'Code coverage practices and tools are very valuable in determining that all
    code, branches, and complexity is tested. Some of these tools are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率实践和工具在确定所有代码、分支和复杂性都经过测试方面非常有价值。其中一些工具如下：
- en: JaCoCo ([http://www.eclemma.org/jacoco/](http://www.eclemma.org/jacoco/))
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JaCoCo ([http://www.eclemma.org/jacoco/](http://www.eclemma.org/jacoco/))
- en: Clover ([https://www.atlassian.com/software/clover](https://www.atlassian.com/software/clover))
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clover ([https://www.atlassian.com/software/clover](https://www.atlassian.com/software/clover))
- en: Cobertura ([http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/))
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cobertura ([http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/))
- en: 'CI tools are a must for all except the most trivial projects. Some of the most
    used tools are:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CI工具对于除了最琐碎的项目之外的所有项目都是必不可少的。一些最常用的工具包括：
- en: Jenkins ([https://jenkins.io/](https://jenkins.io/))
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins ([https://jenkins.io/](https://jenkins.io/))
- en: Hudson ([http://hudson-ci.org/](http://hudson-ci.org/))
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hudson ([http://hudson-ci.org/](http://hudson-ci.org/))
- en: Travis ([https://travis-ci.org/](https://travis-ci.org/))
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis ([https://travis-ci.org/](https://travis-ci.org/))
- en: Bamboo ([https://www.atlassian.com/software/bamboo](https://www.atlassian.com/software/bamboo)).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bamboo ([https://www.atlassian.com/software/bamboo](https://www.atlassian.com/software/bamboo)).
- en: Use TDD together with BDD.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD和BDD。
- en: 'Benefits: Both developer unit tests and functional customer facing tests are
    covered.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好处：开发人员单元测试和功能客户端测试都得到了覆盖。
- en: While TDD with unit tests is a great practice, in many cases it does not provide
    all the testing that projects need. TDD is fast to develop, helps the design process,
    and gives confidence through fast feedback. On the other hand, BDD is more suitable
    for integration and functional testing, provides a better process for requirement
    gathering through narratives, and is a better way of communicating with clients
    through scenarios. Both should be used, and together they provide a full process
    that involves all stakeholders and team members. TDD (based on unit tests) and
    BDD should be driving the development process. Our recommendation is to use TDD
    for high code coverage and fast feedback, and BDD as automated acceptance tests.
    While TDD is mostly oriented towards white-box, BDD often aims at black-box testing.
    Both TDD and BDD are trying to focus on QA instead of QC.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然TDD与单元测试是一种很好的实践，但在许多情况下，它并不能提供项目所需的所有测试。TDD开发速度快，有助于设计过程，并通过快速反馈提供信心。另一方面，BDD更适合集成和功能测试，通过叙述提供了更好的需求收集过程，并且通过场景与客户沟通的方式更好。两者都应该被使用，它们共同提供了一个涉及所有利益相关者和团队成员的完整流程。TDD（基于单元测试）和BDD应该推动开发过程。我们建议使用TDD来实现高代码覆盖率和快速反馈，以及BDD作为自动化验收测试。虽然TDD大多是面向白盒测试，BDD通常旨在进行黑盒测试。TDD和BDD都试图专注于质量保证而不是质量控制。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first went through a brief overview of TDD. We learned about
    the four best practices that can help to improve the quality of software.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先简要概述了TDD。我们了解了四种可以帮助提高软件质量的最佳实践。
- en: Moving on to the final chapter, we will be introduced to the concepts of CI and
    continuous delivery, and the importance of TDD all through the pipeline process
    will be highlighted with an example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入最后一章之前，我们将介绍CI和持续交付的概念，并通过一个例子强调TDD在整个流程中的重要性。
