["```\nFROM ubuntu\n# install dependencies\nRUN apt-get install -y software-properties-common python\nRUN add-apt-repository ppa:chris-lea/node.js\nRUN echo \"deb http://us.archive.ubuntu.com/ubuntu/ precise universe\" >> /etc/apt/sources.list\nRUN apt-get update\nRUN apt-get install -y nodejs\n# make directory\nRUN mkdir /var/www\n# copy app.js\nADD app.js /var/www/app.js\n# set the default command to run\nCMD [\"/usr/bin/node\", \"/var/www/app.js\"]\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: ubuntu-1\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: util\nspec:\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: ubuntu\n\u00a0\u00a0\u00a0\u00a0image: ubuntu\n\u00a0\u00a0\u00a0\u00a0imagePullPolicy: Always\n\u00a0\u00a0hostPID: true\n\u00a0\u00a0hostNetwork: true\n\u00a0\u00a0hostIPC: true\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: nginx-pod\n\u00a0\u00a0labels:\n\u00a0\u00a0\u00a0\u00a0app: web\nspec:\n\u00a0\u00a0hostNetwork: false\n\u00a0\u00a0hostIPC: false\n\u00a0\u00a0hostPID: false\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: nginx\n\u00a0\u00a0\u00a0\u00a0image: kaizheh/nginx \n\u00a0\u00a0\u00a0\u00a0securityContext:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0privileged: false\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capabilities:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0add:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- NETWORK_ADMIN\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnlyRootFilesystem: true \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0runAsUser: 100\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0runAsGroup: 1000\n```", "```\n#include <tunables/global>\nprofile k8s-apparmor-example-deny-write flags=(attach_disconnected) {\n\u00a0\u00a0#include <abstractions/base>\n\u00a0\u00a0file,\n\u00a0\u00a0# Deny all file writes.\n\u00a0\u00a0deny /** w,\n}\n```", "```\ncat /etc/apparmor.d/profile.name | sudo apparmor_parser -a\n```", "```\nsudo aa-enforce /etc/apparmor.d/profile.name\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n\u00a0\u00a0name: hello-apparmor\n\u00a0\u00a0annotations:\n\u00a0\u00a0\u00a0\u00a0# Tell Kubernetes to apply the AppArmor profile \n\u00a0\u00a0\u00a0\u00a0# \"k8s-apparmor-example-deny-write\".\n\u00a0\u00a0\u00a0\u00a0container.apparmor.security.beta.kubernetes.io/hello: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localhost/k8s-apparmor-example-deny-write\nspec:\n\u00a0\u00a0containers:\n\u00a0\u00a0- name: hello\n\u00a0\u00a0\u00a0\u00a0image: busybox\n\u00a0\u00a0\u00a0\u00a0command: [ \"sh\", \"-c\", \"echo 'Hello AppArmor!' && sleep 1h\" ]\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0\u00a0\u00a0name: example\nspec:\n\u00a0\u00a0allowedCapabilities:\n\u00a0\u00a0- NET_ADMIN\n\u00a0\u00a0- IPC_LOCK\n\u00a0\u00a0allowedHostPaths:\n\u00a0\u00a0- pathPrefix: /dev\n\u00a0\u00a0- pathPrefix: /run\n\u00a0\u00a0- pathPrefix: /\n\u00a0\u00a0fsGroup:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0hostNetwork: true\n\u00a0\u00a0privileged: true\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0seLinux:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0supplementalGroups:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0volumes:\n\u00a0\u00a0- hostPath\n\u00a0\u00a0- secret\n```", "```\n$ kubectl apply -f example-psp.yaml\n```", "```\n$ kubectl get psp\n```", "```\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PRIV\u00a0\u00a0\u00a0\u00a0 CAPS\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SELINUX\u00a0\u00a0\u00a0\u00a0RUNASUSER\u00a0\u00a0 FSGROUP\u00a0\u00a0\u00a0\u00a0SUPGROUP\u00a0\u00a0 READONLYROOTFS\u00a0\u00a0 VOLUMES\nexample\u00a0\u00a0 true\u00a0\u00a0\u00a0\u00a0 NET_ADMIN, IPC_LOCK\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0RunAsAny\u00a0\u00a0 RunAsAny\u00a0\u00a0\u00a0\u00a0RunAsAny\u00a0\u00a0 RunAsAny\u00a0\u00a0 false\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hostPath,secret\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n\u00a0\u00a0name: use-example-psp\nrules:\n- apiGroups: ['policy']\n\u00a0\u00a0resources: ['podsecuritypolicies']\n\u00a0\u00a0verbs:\u00a0\u00a0\u00a0\u00a0\u00a0['use']\n\u00a0\u00a0resourceNames:\n\u00a0\u00a0- example\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n\u00a0\u00a0name: use-example-psp-binding\nroleRef:\n\u00a0\u00a0kind: ClusterRole\n\u00a0\u00a0name: use-example-psp\n\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\nsubjects:\n# Authorize specific service accounts:\n- kind: ServiceAccount\n\u00a0\u00a0name: test-sa\n\u00a0\u00a0namespace: psp-test\n```", "```\n$ kubectl krew install advise-psp\n```", "```\n$ kubectl advise-psp\nA way to generate K8s PodSecurityPolicy objects from a live K8s environment or individual K8s objects containing pod specifications\nUsage:\n\u00a0\u00a0kube-psp-advisor [command]\nAvailable Commands:\n\u00a0\u00a0convert\u00a0\u00a0\u00a0\u00a0 Generate a PodSecurityPolicy from a single K8s Yaml file\n\u00a0\u00a0help\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Help about any command\n\u00a0\u00a0inspect\u00a0\u00a0\u00a0\u00a0 Inspect a live K8s Environment to generate a PodSecurityPolicy\nFlags:\n\u00a0\u00a0-h, --help\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 help for kube-psp-advisor\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--level string\u00a0\u00a0 Log level (default \"info\")\n```", "```\n$ kubectl advise-psp inspect --grant --namespace psp-test\n```", "```\n# Pod security policies will be created for service account 'sa-1' in namespace 'psp-test' with following workloads:\n#\tKind: ReplicaSet, Name: busy-rs, Image: busybox\n#\tKind: Pod, Name: busy-pod, Image: busybox\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0creationTimestamp: null\n\u00a0\u00a0name: psp-for-psp-test-sa-1\nspec:\n\u00a0\u00a0allowedCapabilities:\n\u00a0\u00a0- SYS_ADMIN\n\u00a0\u00a0allowedHostPaths:\n\u00a0\u00a0- pathPrefix: /usr/bin\n\u00a0\u00a0\u00a0\u00a0readOnly: true\n\u00a0\u00a0fsGroup:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0hostIPC: true\n\u00a0\u00a0hostNetwork: true\n\u00a0\u00a0hostPID: true\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0seLinux:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0supplementalGroups:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0volumes:\n\u00a0\u00a0- configMap\n\u00a0\u00a0- secret\n\u00a0\u00a0- hostPath\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n\u00a0\u00a0creationTimestamp: null\n\u00a0\u00a0name: use-psp-by-psp-test:sa-1\n\u00a0\u00a0namespace: psp-test\nrules:\n- apiGroups:\n\u00a0\u00a0- policy\n\u00a0\u00a0resourceNames:\n\u00a0\u00a0- psp-for-psp-test-sa-1\n\u00a0\u00a0resources:\n\u00a0\u00a0- podsecuritypolicies\n\u00a0\u00a0verbs:\n\u00a0\u00a0- use\n---\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n\u00a0\u00a0creationTimestamp: null\n\u00a0\u00a0name: use-psp-by-psp-test:sa-1-binding\n\u00a0\u00a0namespace: psp-test\nroleRef:\n\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n\u00a0\u00a0kind: Role\n\u00a0\u00a0name: use-psp-by-psp-test:sa-1\nsubjects:\n- kind: ServiceAccount\n\u00a0\u00a0name: sa-1\n\u00a0\u00a0namespace: psp-test\n---\n```", "```\n---\n# Pod security policies will NOT be created for service account 'default' in namespace 'psp-test' with following workdloads:\n#\tKind: ReplicationController, Name: busy-rc, Image: busybox\n---\n```"]