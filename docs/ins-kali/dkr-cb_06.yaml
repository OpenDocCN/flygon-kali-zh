- en: Chapter 6. Docker APIs and Language Bindings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 Docker API和语言绑定
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Configuring the Docker daemon remote API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Docker守护程序远程API
- en: Performing image operations using remote APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用远程API执行图像操作
- en: Performing container operations using remote APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用远程API执行容器操作
- en: Exploring Docker remote API client libraries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Docker远程API客户端库
- en: Securing the Docker daemon remote API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护Docker守护程序远程API
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapters, we learned different commands to manage images, containers,
    and so on. Though we run all the commands through the command line, the communication
    between the Docker client (CLI) and the Docker daemon happens through APIs, which
    are called Docker daemon remote APIs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学习了不同的命令来管理图像、容器等。尽管我们通过命令行运行所有命令，但Docker客户端（CLI）与Docker守护程序之间的通信是通过API进行的，这被称为Docker守护程序远程API。
- en: Docker also provides APIs to communicate with Docker Hub and Docker registry,
    which the Docker client uses as well. In addition to these APIs, we have Docker
    bindings for different programming languages. So, if you want to build a nice
    GUI for Docker images, container management, and so on, understanding the APIs
    mentioned earlier would be a good starting point.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Docker还提供了用于与Docker Hub和Docker注册表通信的API，Docker客户端也使用这些API。除了这些API之外，我们还有不同编程语言的Docker绑定。因此，如果您想为Docker图像、容器管理等构建一个漂亮的GUI，了解前面提到的API将是一个很好的起点。
- en: 'In this chapter, we look into the Docker daemon remote API and use the `curl`
    command ([http://curl.haxx.se/docs/manpage.html](http://curl.haxx.se/docs/manpage.html))
    to communicate with the endpoints of different APIs, which will look something
    like the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究Docker守护程序远程API，并使用`curl`命令（[http://curl.haxx.se/docs/manpage.html](http://curl.haxx.se/docs/manpage.html)）与不同API的端点进行通信，这将类似于以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding request will return with a return code and an output corresponding
    to the endpoint and request we chose. `GET`, `PUT`, and `DELETE` are the different
    kinds of requests, and GET is the default request if nothing is specified. Each
    API endpoint has its own interpretation for the return code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的请求将返回一个返回代码和与我们选择的端点和请求相对应的输出。`GET`、`PUT`和`DELETE`是不同类型的请求，如果没有指定，默认请求是GET。每个API端点对于返回代码都有自己的解释。
- en: Configuring the Docker daemon remote API
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Docker守护程序远程API
- en: As we know, Docker has a client-server architecture. When we install Docker,
    a user space program and a daemon get started from the same binary. The daemon
    binds to `unix://var/run/docker.sock` by default on the same host. This will not
    allow us to access the daemon remotely. To allow remote access, we need to start
    Docker such that it allows remote access, which can done by changing the `-H`
    flag appropriately.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，Docker具有客户端-服务器架构。当我们安装Docker时，用户空间程序和守护程序从同一个二进制文件启动。守护程序默认绑定到同一主机上的`unix://var/run/docker.sock`。这将不允许我们远程访问守护程序。为了允许远程访问，我们需要以允许远程访问的方式启动Docker，这可以通过适当地更改`-H`标志来实现。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Depending on the Linux distribution you are running, figure out the Docker daemon
    configuration file you need to change. For Fedora, /Red Hat distributions, it
    would be /`etc/sysconfig/docker` and for Ubuntu/Debian distributions , it would
    most likely be `/etc/default/docker`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您正在运行的Linux发行版，找出需要更改的Docker守护程序配置文件。对于Fedora、Red Hat发行版，它可能是`/etc/sysconfig/docker`，对于Ubuntu/Debian发行版，它可能是`/etc/default/docker`。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'On Fedora 20 systems, add the `-H tcp://0.0.0.0:2375` option in the configuration
    file (`/etc/sysconfig/docker`), as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Fedora 20系统上，在配置文件（/etc/sysconfig/docker）中添加`-H tcp://0.0.0.0:2375`选项，如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Restart the Docker service. On Fedora, run the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Docker服务。在Fedora上，运行以下命令：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Connect to the Docker host from the remote client:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从远程客户端连接到Docker主机：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How to do it…](../Images/image00367.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](../Images/image00367.jpeg)'
- en: Make sure the firewall allows access to port `2375` on the system where the
    Docker daemon is installed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确保防火墙允许在安装了Docker守护程序的系统上访问端口`2375`。
- en: How it works…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: With the preceding command, we allowed the Docker daemon to listen on all network
    interfaces through port `2375`, using TCP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过前述命令，我们允许Docker守护程序通过TCP在所有网络接口上监听端口`2375`。
- en: There's more…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: With the communication that we mentioned earlier between the client and Docker,
    the host is insecure. Later in this chapter, we'll see how to enable TLS between
    them.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面提到的客户端和Docker之间的通信中，主机是不安全的。在本章的后面，我们将看到如何在它们之间启用TLS。
- en: 'The Docker CLI looks for environment variables; if it is being set then the
    CLI uses that endpoint to connect, for example, if we connect set as follows:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker CLI查找环境变量；如果被设置了，那么CLI将使用该端点进行连接，例如，如果我们设置如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, the future docker commands in that session connect to remote Docker Host
    by default and run this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在该会话中，未来的docker命令默认连接到远程Docker主机并运行此命令：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The documentation on the Docker website [https://docs.docker.com/reference/api/docker_remote_api/](https://docs.docker.com/reference/api/docker_remote_api/)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker网站上的文档[https://docs.docker.com/reference/api/docker_remote_api/](https://docs.docker.com/reference/api/docker_remote_api/)
- en: Performing image operations using remote APIs
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用远程API执行图像操作
- en: After enabling the Docker daemon remote API, we can do all image-related operations
    through a client. To get a better understanding of the APIs, let's use `curl`
    to connect to the remote daemon and do some image-related operations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用了Docker守护程序远程API之后，我们可以通过客户端进行所有与图像相关的操作。为了更好地理解API，让我们使用`curl`连接到远程守护程序并进行一些与图像相关的操作。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Configure the Docker daemon and allow remote access, as explained in the previous
    recipe.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Docker守护程序并允许远程访问，如前面的配方中所解释的。
- en: How to do it…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we''ll look at a few image operations as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看一下一些图像操作，如下所示：
- en: 'To list images, use the following API:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出图像，请使用以下API：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is an example of the preceding syntax:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述语法的一个例子：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it…](../Images/image00368.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](../Images/image00368.jpeg)'
- en: 'To create an image, use the following API:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建图像，请使用以下API：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here are a few examples:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: 'Get the Fedora image from Docker Hub:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Docker Hub获取Fedora图像：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Get the WordPress image with the `latest` tag:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取带有`latest`标签的WordPress图像：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create an image from the `tar` file, which is hosted on the accessible web
    server:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从可访问的Web服务器上的`tar`文件创建图像：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To build an image, use the following API:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建图像，请使用以下API：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here are a few examples:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: Build an image from the container (`container id = 704a7c71f77d`)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从容器（`container id = 704a7c71f77d`）构建图像
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Build an image from the Docker file:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Docker文件构建图像：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As the API expects the content as a `tar` file, we need to put the Docker file
    inside a tar and call the API.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于API期望内容为`tar`文件，我们需要将Docker文件放入tar中并调用API。
- en: 'To delete an image, use the following API:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要删除图像，请使用以下API：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is an example of the preceding syntax:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述语法的一个例子：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In all the cases mentioned earlier, the APIs will connect to the Docker daemon
    and perform the requested operations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面提到的所有情况下，API将连接到Docker守护程序并执行请求的操作。
- en: There's more…
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We have not covered all the options of the APIs discussed earlier and Docker
    provides APIs for other image-related operations. Visit the API documentation
    for more details.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有涵盖之前讨论的API的所有选项，Docker为其他与镜像相关的操作提供了API。访问API文档以获取更多详细信息。
- en: See also
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Each API endpoint can have different inputs to control the operations. For more
    details, visit the documentation on the Docker website [https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个API端点可以有不同的输入来控制操作。更多详细信息，请访问Docker网站上的文档[https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images)。
- en: Performing container operations using remote APIs
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用远程API执行容器操作
- en: In a similar way to how we performed image operations using APIs, we can also
    do all container-related operations using APIs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们使用API执行镜像操作类似，我们也可以使用API执行所有与容器相关的操作。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Configure the Docker daemon and allow remote access, as explained in the earlier
    recipe.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Docker守护程序并允许远程访问，如前面的示例所述。
- en: How to do it…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In this recipe, we''ll look at a few container operations:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看一些容器操作：
- en: 'To list containers, use the following API:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要列出容器，请使用以下API：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here are a few examples:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: 'Get all the running containers:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有正在运行的容器：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Get all the running containers, including the stopped ones
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有正在运行的容器，包括已停止的容器
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To create a new container, use the following API:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的容器，请使用以下API：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here are a few examples
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例
- en: 'Create a container from the `fedora` image:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`fedora`镜像创建一个容器：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a container from the `fedora` image and name it `f21`:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`fedora`镜像创建一个名为`f21`的容器：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To start a container, use the following API:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动一个容器，请使用以下API：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For example, start a container with the `591ab8ac2650` ID:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，启动ID为`591ab8ac2650`的容器：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that while starting the stopped container, we also passed the DNS option,
    which will change the DNS configuration of the container.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当启动已停止的容器时，我们还传递了DNS选项，这将改变容器的DNS配置。
- en: 'To inspect a container, use the following API:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查一个容器，请使用以下API：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For example, inspect a container with the `591ab8ac2650` ID:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，检查ID为`591ab8ac2650`的容器：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To get a list of processes running inside a container, use the following API:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取正在容器内运行的进程列表，请使用以下API：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For example, get the processes running in the container with the `591ab8ac2650`
    ID:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，获取ID为`591ab8ac2650`的容器中正在运行的进程：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To stop a container, use the following API:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停止一个容器，请使用以下API：
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For example, stop a container with the `591ab8ac2650` ID:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，停止ID为`591ab8ac2650`的容器：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We have not covered all the options of the APIs discussed earlier and Docker
    provides APIs for other container-related operations. Visit the API documentation
    for more details.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有涵盖之前讨论的API的所有选项，Docker为其他与容器相关的操作提供了API。访问API文档以获取更多详细信息。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The documentation on the Docker website at [https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker网站上的文档[https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers)
- en: Exploring Docker remote API client libraries
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Docker远程API客户端库
- en: In the last few recipes, we explored the APIs provided by Docker to connect
    and perform operations to the remote Docker daemon. The Docker community has added
    bindings for different programming languages to access those APIs. Some of them
    are listed at [https://docs.docker.com/reference/api/remote_api_client_libraries/](https://docs.docker.com/reference/api/remote_api_client_libraries/).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的几个示例中，我们探索了Docker提供的API，以连接并对远程Docker守护程序执行操作。Docker社区已经为不同的编程语言添加了绑定，以访问这些API。其中一些列在[https://docs.docker.com/reference/api/remote_api_client_libraries/](https://docs.docker.com/reference/api/remote_api_client_libraries/)上。
- en: Note that Docker Maintainers do not maintain these libraries. Let's explore
    Python bindings with a few examples and see how it uses the Docker remote API.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Docker维护人员不维护这些库。让我们通过一些示例来探索Python绑定，并看看它如何使用Docker远程API。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Install `docker-py` on Fedora:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Fedora上安装`docker-py`：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Alternatively, use `pip` to install the package:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用`pip`来安装该软件包：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Import the module:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入模块：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How to do it…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create the client, using the following steps:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建客户端，使用以下步骤：
- en: 'Connect through the Unix Socket:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过Unix套接字连接：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Connect over HTTP:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过HTTP连接：
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, `base_url` is the endpoint to connect, `version` is the API version the
    client will use, and `timeout` is the timeout value in seconds.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`base_url`是要连接的端点，`version`是客户端将使用的API版本，`timeout`是以秒为单位的超时值。
- en: 'Search for an image using the following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码搜索图像：
- en: '[PRE36]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Pull an image using the following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码拉取图像：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Start a container using the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码启动容器：
- en: '[PRE38]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In all the preceding cases, the Docker Python module will send RESTful requests
    to the endpoint using the API provided by Docker. Look at the methods such as
    `search`, `pull`, and `start` in the following code of `docker-py` available at
    [https://github.com/docker/docker-py/blob/master/docker/client.py](https://github.com/docker/docker-py/blob/master/docker/client.py).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的情况下，Docker Python模块将使用Docker提供的API向端点发送RESTful请求。查看`docker-py`中提供的`search`、`pull`和`start`等方法的以下代码，该代码位于[https://github.com/docker/docker-py/blob/master/docker/client.py](https://github.com/docker/docker-py/blob/master/docker/client.py)。
- en: There's more…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'You can explore different user interfaces written for Docker. Some of them
    are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以探索为Docker编写的不同用户界面。其中一些如下所示：
- en: Shipyard ([http://shipyard-project.com/](http://shipyard-project.com/))—written
    in Python
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shipyard（[http://shipyard-project.com/](http://shipyard-project.com/)）—使用Python编写
- en: DockerUI ([https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui))—written
    in JavaScript using AngularJS
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DockerUI（[https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui)）—使用AngularJS编写的JavaScript
- en: Securing the Docker daemon remote API
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Docker守护程序远程API
- en: Earlier in this chapter, we saw how to configure the Docker daemon to accept
    remote connections. However, with the approach we followed, anyone can connect
    to our Docker daemon. We can secure our connection with Transport Layer Security
    ([http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们看到了如何配置Docker守护程序以接受远程连接。但是，使用我们遵循的方法，任何人都可以连接到我们的Docker守护程序。我们可以使用传输层安全性（[http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security)）来保护我们的连接。
- en: We can configure TLS either by using the existing **Certificate Authority**
    (**CA**) or by creating our own. For simplicity, we will create our own, which
    is not recommended for production. For this example, we assume that the host running
    the Docker daemon is `dockerhost.example.com`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用现有的**证书颁发机构**（**CA**）或创建我们自己来配置TLS。为简单起见，我们将创建自己的证书颁发机构，这在生产中不推荐。在本例中，我们假设运行Docker守护程序的主机是`dockerhost.example.com`。
- en: Getting ready
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure you have the `openssl` library installed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装`openssl`库。
- en: How to do it...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a directory on your host to put our CA and other related files:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主机上创建一个目录，放置我们的CA和其他相关文件：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create the CA private and public keys:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建CA私钥和公钥：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![How to do it...](../Images/image00369.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00369.jpeg)'
- en: Now, let's create the server key and certificate signing request. Make sure
    that `Common Name` matches the Docker daemon system's hostname. In our case, it
    is `dockerhost.example.com`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建服务器密钥和证书签名请求。确保`通用名称`与Docker守护程序系统的主机名匹配。在我们的情况下，它是`dockerhost.example.com`。
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![How to do it...](../Images/image00370.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00370.jpeg)'
- en: 'To allow connections from 127.0.0.1 and a specific host, for example, 10.70.1.67,
    create an extensions configuration file and sign the public key with our CA:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了允许来自127.0.0.1和特定主机（例如10.70.1.67）的连接，创建一个扩展配置文件并使用我们的CA签署公钥：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![How to do it...](../Images/image00371.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00371.jpeg)'
- en: 'For client authentication, create a client key and certificate signing request:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于客户端认证，创建一个客户端密钥和证书签名请求：
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![How to do it...](../Images/image00372.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00372.jpeg)'
- en: 'To make the key suitable for client authentication, create an extensions configuration
    file and sign the public key:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使密钥适用于客户端认证，创建一个扩展配置文件并签署公钥：
- en: '[PRE44]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![How to do it...](../Images/image00373.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00373.jpeg)'
- en: 'After generating `cert.pem` and `server-cert.pem`, we can safely remove both
    the certificate signing requests:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成`cert.pem`和`server-cert.pem`后，我们可以安全地删除证书签名请求：
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To set tight security and protect keys from accidental damage, let''s change
    the permissions:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了加强安全性并保护密钥免受意外损坏，让我们更改权限：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Stop the daemon if it is running on `dockerhost.example.com`. Then, start the
    Docker daemon manually from `/etc/docker`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果守护程序正在`dockerhost.example.com`上运行，请停止它。然后，从`/etc/docker`手动启动Docker守护程序：
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'From another terminal, go to `/etc/docker`. Run the following command to connect
    to the Docker daemon:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从另一个终端，转到`/etc/docker`。运行以下命令连接到Docker守护程序：
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You will see that a TLS connection is established and you can run the commands
    over it. You can also put the CA public key and the client's TLS certificate and
    key in the `.docker` folder in the home directory of the user and use the `DOCKER_HOST`
    and `DOCKER_TLS_VERIFY` environment variables to make a secure connection by default.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到建立了TLS连接，并且可以在其上运行命令。您还可以将CA公钥和客户端的TLS证书和密钥放在用户的主目录中的`.docker`文件夹中，并使用`DOCKER_HOST`和`DOCKER_TLS_VERIFY`环境变量来默认进行安全连接。
- en: '![How to do it...](../Images/image00374.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](../Images/image00374.jpeg)'
- en: To connect from the remote host we mentioned while signing the server key with
    our CA, we will need to copy the CA public key and the client's TLS certificate
    and key to the remote machine and then connect to the Docker host as shown in
    the preceding screenshot.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从我们在签署服务器密钥时提到的远程主机连接，我们需要将CA公钥和客户端的TLS证书和密钥复制到远程机器，然后按照前面的截图连接到Docker主机。
- en: How it works…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We setup the TLS connection between the Docker daemon and the client for a secure
    communication.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Docker守护程序和客户端建立了TLS连接，以进行安全通信。
- en: There's more…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'To set up the Docker daemon to start with the TLS configuration by default,
    we will need to update the Docker configuration file. For example, on Fedora,
    you update the `OPTIONS` parameter as follows in `/etc/sysconfig/docker`:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要设置Docker守护程序默认启动TLS配置，我们需要更新Docker配置文件。例如，在Fedora上，您可以在`/etc/sysconfig/docker`中更新`OPTIONS`参数如下：
- en: '[PRE49]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If you recall, in [Chapter 1](part0015.xhtml#aid-E9OE2 "Chapter 1. Introduction
    and Installation"), *Introduction and Installation*, we saw how we can set up
    the Docker host using the Docker Machine ([http://docs.docker.com/machine/](http://docs.docker.com/machine/))
    and as part of this setup, the TLS setup happens between the client and the host
    running the Docker daemon. After configuring the Docker host with the Docker Machine,
    check `.docker/machine` for the user on the client system.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你还记得，在[第1章](part0015.xhtml#aid-E9OE2 "第1章. 介绍和安装")中，*介绍和安装*，我们看到了如何使用Docker
    Machine（[http://docs.docker.com/machine/](http://docs.docker.com/machine/)）来设置Docker主机，并且在这个设置过程中，TLS设置发生在运行Docker守护程序的主机和客户端之间。在使用Docker
    Machine配置Docker主机后，检查客户端系统上的`.docker/machine`用户。
