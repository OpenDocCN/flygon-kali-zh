- en: Writing Clean Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写清晰的测试
- en: In the last chapter, we covered the theory and principles underlying software
    testing. We delved into the benefits and challenges inherent in unit, integration,
    and E2E testing. In this chapter, we will take this knowledge and apply it to
    some real-world examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了软件测试的理论和原则。我们深入探讨了单元测试、集成测试和端到端测试中固有的好处和挑战。在本章中，我们将把这些知识应用到一些现实世界的例子中。
- en: It's not sufficient to simply understand what testing is and see its merits
    from a business perspective. The tests we write form a significant part of our
    code bases, and should hence be crafted in the same careful manner as all other
    code we write. We want to craft tests that not only give us confidence that our
    code works as intended, but are themselves reliable, efficient, maintainable,
    and usable. We must also be wary of writing overly complex tests. Doing so can
    trap us in a situation where our tests increase the burden of understanding and
    lead to more overall complexity and flakiness in the code base, reducing overall
    productivity and satisfaction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅理解测试是什么，并从商业角度看到它的优点是不够的。我们编写的测试构成了我们代码库的重要部分，因此应该以与我们编写的所有其他代码一样小心的方式来制作。我们希望编写的测试不仅能让我们对代码的预期工作方式有信心，而且它们本身也是可靠的、高效的、可维护的和可用的。我们还必须警惕编写过于复杂的测试。这样做会让我们陷入一种情况，使我们的测试增加了理解的负担，并导致代码库的整体复杂性和脆弱性增加，降低了整体生产力和满意度。
- en: If wielded with care and caution, tests can give code bases a clarity and cleanliness
    that enables users and colleagues to carry out their work with greater speed and
    quality. In the following sections, we'll explore the best practices to stand
    by and potential pitfalls to avoid when writing tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果小心谨慎地使用，测试可以使代码库变得清晰和干净，从而使用户和同事能够以更快的速度和更高的质量进行工作。在接下来的章节中，我们将探讨编写测试时应遵循的最佳实践以及要避免的潜在陷阱。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Testing the right thing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试正确的事情
- en: Writing intuitive assertions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写直观的断言
- en: Creating clear hierarchies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建清晰的层次结构
- en: Providing final clarity
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供最终的清晰度
- en: Creating clean directory structures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建清晰的目录结构
- en: Testing the right thing
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试正确的事情
- en: One of the most important considerations when writing any test, whether a granular
    **unit test** or a far-reaching **E2E test**, is the question of *what* to test.
    It's entirely possible to test the wrong thing; doing so can give us false confidence
    in our code. We may write a huge test suite and walk away grinning, thinking that
    our code now fulfills all expectations and is utterly fault-tolerant. But our
    test suite may not test the things we think it does. Perhaps it only tests a few
    narrow use cases, leaving us exposed to many possibilities of breakage. Or perhaps
    it conducts tests in a way that is never emulated in reality, leading to a situation
    where our tests don't protect us from failures in production. To protect us against
    these possibilities, we must understand what we truly wish to test.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何测试时，无论是细粒度的**单元测试**还是广泛的**端到端测试**，最重要的考虑之一是要测试*什么*。完全有可能测试错误的东西；这样做会让我们对我们的代码产生错误的信心。我们可能编写了一个庞大的测试套件，然后面带微笑离开，认为我们的代码现在满足了所有期望，并且完全容错。但我们的测试套件可能并没有测试我们认为它测试的东西。也许它只测试了一些狭窄的用例，让我们暴露在许多破坏的可能性中。或者它可能以一种在现实中从未模拟的方式进行测试，导致我们的测试无法保护我们免受生产中的故障。为了防范这些可能性，我们必须了解我们真正希望测试什么。
- en: 'Consider a function that we''ve written to extract phone numbers of a specified
    format from arbitrary strings. The phone numbers can be in a variety of forms,
    but will always have between 9 and 12 digits:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个我们编写的函数，从任意字符串中提取指定格式的电话号码。电话号码可以是各种形式，但始终有9到12位数字：
- en: '`0800-144-144`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0800-144-144`'
- en: '`07792316877`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07792316877`'
- en: '`01263 109388`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`01263 109388`'
- en: '`111-222-333`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`111-222-333`'
- en: '`0822 888 111`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0822 888 111`'
- en: 'Here is our current implementation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们当前的实现：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We decide to write a test to assert the correctness of our code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定编写一个测试来断言我们代码的正确性：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The assertions we use are vital. It''s important that we are testing the right
    thing. With our example, this should include exemplar strings that contain a complete
    variety of input: strings that contain phone numbers, strings that contain no
    numbers, and strings that contain a mixture of phone numbers and non phone numbers.
    It''s far too easy only to test the positive cases, but it is in fact equally
    important to check for the negative cases. In our scenario, the negative cases
    include situations where there are no phone numbers to be extracted and hence
    may consist of strings such as the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的断言至关重要。测试正确的事情很重要。在我们的例子中，这应该包括包含完整输入的示例字符串：包含电话号码的字符串，不包含数字的字符串，以及包含电话号码和非电话号码的字符串。仅测试正例太容易了，但实际上检查负例同样重要。在我们的场景中，负例包括没有电话号码可提取的情况，因此可能包含以下字符串：
- en: '`"this string is just text..."`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"this string is just text..."`'
- en: '`"this string has some numbers (012), but no phone numbers!"`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"this string has some numbers (012), but no phone numbers!"`'
- en: '`"1 2 3 4 5 6 7 8 9"`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"1 2 3 4 5 6 7 8 9"`'
- en: '`"01-239-34-32-1"`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"01-239-34-32-1"`'
- en: '`"0800 144 323 492 348"`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"0800 144 323 492 348"`'
- en: '`"123"`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"123"`'
- en: 'Very quickly, when composing such exemplar cases, we see this true scope of
    complexity that our implementation will have to cater to. Incidentally, this highlights
    the tremendous advantage of employing **Test-Driven Development** *(***TDD**)
    to define expectations firmly. Now that we have a few cases of strings containing
    numbers that we *do not* wish to be extracted, we can express these as assertions,
    like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写这样的示例案例时，我们很快就会看到我们的实现将不得不迎合的复杂性范围。顺便说一句，这突显了采用**测试驱动开发**（***TDD**）来明确定义期望的巨大优势。现在我们有了一些包含我们*不希望*提取的数字的字符串的案例，我们可以将这些表达为断言，就像这样：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This currently fails. The `extractPhoneNumbers(''123'')` call incorrectly returns
    `["123"]`. This is because our regular expression does not yet make any prescriptions
    about length. We can easily make this fix:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这个测试失败了。`extractPhoneNumbers('123')`调用错误地返回`["123"]`。这是因为我们的正则表达式尚未对长度做出任何规定。我们可以很容易地进行修复：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The added `{9,12}` part will ensure that the preceding group (`([0-9][- ]?)`)
    will only match between `9` and `12` times, meaning that our test of `extractPhoneNumbers('123')`
    will now correctly return `[]` (an empty array). If we repeat this testing-and-iteration
    process with each of our exemplar strings, we will eventually arrive at a correct
    implementation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`{9,12}`部分将确保前面的组（`([0-9][- ]?)`）只匹配9到12次，这意味着我们对`extractPhoneNumbers('123')`的测试现在将正确返回`[]`（一个空数组）。如果我们对每个示例字符串重复进行这个测试和迭代过程，最终我们将得到一个正确的实现。
- en: 'The key takeaway from this scenario is that we should seek to test the complete
    gamut of inputs that we may expect. Depending on what we''re testing, we can usually
    say there''s always a limited set of possible scenarios that any piece of code
    we write will cater to. We want to ensure that we have a set of tests that analyze
    this range of scenarios. This range of scenarios is often called the **input space **or
    **input domain** of a given function or module. We can consider something well-tested
    if we expose it to a representative variety of inputs from its *input space*,
    which, in this case, includes both strings *with* valid phone numbers and those
    *without* valid phone numbers:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从这种情况中得出的关键是，我们应该寻求测试我们可能期望的所有输入。根据我们正在测试的内容，通常可以说我们编写的任何代码都将适用于有限的一组可能场景。我们希望确保我们有一组测试来分析这一系列场景。这一系列场景通常被称为给定函数或模块的**输入空间**或**输入域**。如果我们将其暴露给其*输入空间*中的代表性各种输入，我们可以认为它经过了充分测试，这种情况下，包括具有有效电话号码和不具有有效电话号码的字符串：
- en: '![](assets/9c2c1545-fd35-4b16-b761-856e0abf89e1.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c2c1545-fd35-4b16-b761-856e0abf89e1.png)'
- en: It's not necessary to test every possibility. What's more important is to test
    a representative sample of them. To do this, it's essential first to identify
    our *input space* and then partition it into singular representative inputs that
    we can then individually test. For example, we need to test that the phone number
    `"012 345 678"` is correctly identified and extracted, but it would be pointless
    for us to exhaustively test the variations of that same format (`"111 222 333"`,
    `"098 876 543"`, and so on). Doing so would be unlikely to reveal any additional
    errors or bugs in our code. But we should definitely test other formats with different
    punctuation or whitespace (such as `"111-222-333"` or `"111222333"`). It's additionally
    important to establish inputs that may be outside of your expected *input space*,
    such as invalid types and unsupported values.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要测试每种可能性。更重要的是测试它们的代表性样本。为此，首先要确定我们的*输入空间*，然后将其分成单个代表性输入，然后逐个进行测试。例如，我们需要测试电话号码`"012
    345 678"`是否被正确识别和提取，但对同一格式的变化进行详尽测试（如`"111 222 333"`，`"098 876 543"`等）是没有意义的。这样做不太可能揭示代码中的任何其他错误或漏洞。但我们确实应该测试具有不同标点符号或空格的其他格式（如`"111-222-333"`或`"111222333"`）。另外，建立可能超出预期*输入空间*的输入也很重要，例如无效类型和不受支持的值。
- en: A full understanding of your software's requirements will enable you to produce
    a correct implementation that is well tested. So, before we even begin writing
    code, we should always ensure that we know exactly what it is we're tasked with
    creating. If we find ourselves unsure what the full *input space* might be, that's
    a strong indicator that we should take a step back, talk to stakeholders and users,
    and establish an exhaustive set of requirements. Once again, this is a strong
    benefit of test-led implementation (TDD), where these deficits in requirements
    are spotted early and can hence be resolved before costs are sunk into a pointless
    implementation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对软件需求的充分理解将使您能够产生一个经过正确实现并经过充分测试的实现。因此，在我们开始编写代码之前，我们应该始终确保我们清楚地知道我们的任务是什么。如果我们发现自己不确定完整的*输入空间*可能是什么，那就是一个强烈的指示，表明我们应该退一步，与利益相关者和用户交谈，并建立一套详尽的需求。再次强调，这是测试驱动的实施（TDD）的一个强大优势，因为这些需求的不足会在成本投入到无意义的实施之前被及早发现和解决。
- en: When we have our requirements in mind and have a good understanding of the entire
    *input space*, it is then time to write our tests. The most atomic part of a test
    is its assertions, so we want to ensure we can effectively craft intuitive assertions
    that communicate our expectations well. This is what we'll be covering next.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们心中有了需求，并对整个*输入空间*有了很好的理解后，就可以开始编写我们的测试了。测试的最基本部分是其断言，因此我们要确保能够有效地制定直观的断言，以清晰地传达我们的期望。这将是接下来要讨论的内容。
- en: Writing intuitive assertions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写直观的断言
- en: The core of any test is its assertions. An assertion prescribes exactly what
    we expect to occur, and so it is vital not only that we craft it accurately but
    that we craft it in a way that our expectation is made utterly clear.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何测试的核心都是其断言。断言准确地规定了我们期望发生的事情，因此不仅要准确地制定它，而且要以一种清晰地表达我们期望的方式来制定它。
- en: 'A single test will usually involve several assertions. And a test will typically
    follow the form of: *given an input of X, do I receive an output of Y*? Sometimes,
    establishing *Y* is complex and may not be constrained to a singular assertion.
    We may want to introspect *Y* to confirm that it is truly the desired output.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，单个测试会涉及多个断言。测试通常遵循以下形式：*给定输入X，我是否收到输出Y*？有时，建立*Y*是复杂的，可能不限于单个断言。我们可能希望内省*Y*，以确认它确实是期望的输出。
- en: 'Consider a function named `getActiveUsers(users)`, which will return only the
    active users from a set of all users. We may wish to make several assertions about
    its output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个名为`getActiveUsers(users)`的函数，它将从所有用户中仅返回活跃用户。我们可能希望对其输出进行多个断言：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we have clearly expressed our expectations for the output of `getActiveUsers(...)` as
    a series of assertions. Given a more fully-featured assertion library or more
    complex code, we could easily constrain this to a singular assertion, but it's
    arguably clearer to separate them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们清楚地表达了对 `getActiveUsers(...)` 输出的期望，作为一系列断言。鉴于更全面的断言库或更复杂的代码，我们可以轻松地将其限制为一个单一的断言，但将它们分开可能更清晰。
- en: 'Many testing libraries and utilities provide abstractions to aid us in making
    assertions. The popular testing libraries, Jasmine and Jest, for example, both
    provide a function called `expect`, which supplies an interface with many *matchers*,
    each individually allowing us to declare what characteristics a value should have,
    as in the following examples:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多测试库和实用程序提供了抽象来帮助我们进行断言。例如，流行的测试库 Jasmine 和 Jest 都提供了一个名为 `expect` 的函数，它提供了许多
    *匹配器* 的接口，每个匹配器都允许我们声明值应该具有的特征，如以下示例所示：
- en: '`expect(x).toBe(y)` asserts that `x` is the same as `y`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect(x).toBe(y)` 断言 `x` 与 `y` 相同'
- en: '`expect(x).toEqual(y)` asserts that `x` is equal to `y` (similar to abstract
    equality)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect(x).toEqual(y)` 断言 `x` 等于 `y`（类似于抽象相等）'
- en: '`expect(x).toBeTruthy()` asserts that `x` is truthy (or `Boolean(x) === true`)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect(x).toBeTruthy()` 断言 `x` 为真（或 `Boolean(x) === true`）'
- en: '`expect(x).toThrow()` asserts that `x`, when invoked as a function, will throw
    an error'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect(x).toThrow()` 断言当作为函数调用 `x` 时，会抛出错误'
- en: 'The exact implementation of these matchers may vary from library to library,
    and the abstraction and naming provided may also vary. Chai.js, for example, provides
    both the `expect` abstraction and a simplified `assert` abstraction, allowing
    you to assert things in the following fashion:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些匹配器的确切实现可能因库而异，提供的抽象和命名也可能不同。例如，Chai.js 提供了 `expect` 抽象和简化的 `assert` 抽象，允许您以以下方式进行断言：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The most important thing when crafting an assertion is to be utterly clear.
    Just as with other code, it is unfortunately quite easy to write an assertion
    that is incomprehensible or hard to parse. Consider the following assertion:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 制作断言时最重要的是要非常清晰。就像其他代码一样，很不幸，写一个难以理解或难以解析的断言是相当容易的。考虑以下断言：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This statement, due to the abstractions provided by Chai.js, has the appearance
    of a human-readable and easily understandable assertion. But it is actually quite
    difficult to understand exactly what''s going on. Let''s consider which of the
    following this statement might be checking:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Chai.js 提供的抽象，这个语句看起来像是一个可读性强、易于理解的断言。但实际上，确切地理解正在发生什么是相当困难的。让我们考虑这个语句可能正在检查以下哪一个：
- en: '*The item is not an array?*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*该项不是数组？*'
- en: '*The item is not an empty array?*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*该项不是空数组？*'
- en: '*The item has a length greater than zero and is not an array?*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*该项的长度大于零且不是数组？*'
- en: It is, in fact, checking that the item is both not an array and that it is non-empty—meaning
    that, if the item is an object, it'll check that it has at least one property
    of its own, and if it's a string, it'll check that its length is greater than
    zero. These true underlying mechanics of the assertion are obscured and so, when
    exposed to such things, programmers may be left in a state of either blissful
    ignorance (*thinking the assertion works as they wish it to*) or painful confusion
    (*wondering how on earth it works*).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它正在检查该项既不是数组，又不为空——这意味着，如果该项是对象，它将检查它至少有一个自己的属性，如果是字符串，它将检查它的长度是否大于零。这些断言的真正基本机制被掩盖了，因此当程序员接触到这些东西时，可能会陷入一种幸福的无知状态（*认为断言按照他们希望的方式工作*）或痛苦的困惑状态（*想知道它到底是如何工作的*）。
- en: 'It may be the case that what we wished to assert all along was simply whether
    `someValue` was both not an array but was *array-like*, and as such, had a length
    greater than zero. As such, we can lend clarity using Chai.js''s `lengthOf` method
    in a new assertion:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们一直想要断言的是 `someValue` 不仅不是数组，而且是“类似数组”，因此具有大于零的长度。因此，我们可以使用 Chai.js 的 `lengthOf`
    方法来创建一个新的断言，以增加清晰度：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To avoid any doubt and confusion, we could, alternatively, assert more directly
    without relying on Chai.js''s sentence-like abstractions:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何疑惑和混淆，我们可以更直接地进行断言，而不依赖于 Chai.js 的类似句子的抽象：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is arguably far clearer as it explains to the programmer the exact check
    that is taking place, eliminating the doubt that could arise with a more abstract
    assertion style.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能更清晰，因为它向程序员解释了正在进行的确切检查，消除了更抽象的断言风格可能引起的疑虑。
- en: The crux of a good assertion is its clarity. Many libraries provide fancy and
    abstract mechanics of assertion (via the `expect()` interface, for example). These
    can create more clarity, but if over used, they can end up being less clear. Sometimes,
    we just need to **Keep it Simple, Stupid** (**KISS**). Testing code is the worst
    possible place in which to get fancy with egotistic or mis-abstracted code. Simple
    and straightforward code wins every time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的断言的关键在于它的清晰度。许多库提供了复杂和抽象的断言机制（例如通过 `expect()` 接口）。这些可以增加清晰度，但如果过度使用，可能会变得不太清晰。有时，我们只需要“保持简单，愚蠢”（KISS）。测试代码是最不适合使用自负或过度抽象的代码的地方。简单直接的代码每次都胜出。
- en: Now that we've explored the challenge of crafting intuitive assertions, we can
    slightly *zoom out* and have a look at how we should craft and structure the tests
    that contain them. The next section reveals *hierarchies* as a helpful mechanism
    to communicate meaning through our test suites.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了制作直观断言的挑战，我们可以稍微“放大”一下，看看我们应该如何制作和组织包含它们的测试。下一节将介绍 *层次结构* 作为一个有助于通过我们的测试套件传达含义的机制。
- en: Creating clear hierarchies
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建清晰的层次结构
- en: 'To test any code base, we would likely need to write a large number of assertions.
    Theoretically, we could have a long list of assertions and nothing else. However,
    doing this may make it quite difficult to read, write, and analyze the reports
    of tests. To prevent such confusion, it is common for testing libraries to provide
    some scaffolding abstractions around assertions. For example, BDD-flavoured libraries
    such as Jasmine and Jest supply two pieces of scaffolding: the `it` block and
    the `describe` block. These are just functions to which we pass a description
    and callback, but together, they enable a hierarchical tree of tests that makes
    it far easier to comprehend what''s going on. Testing a `sum` function using this
    pattern might be done like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试任何代码库，我们可能需要编写大量的断言。从理论上讲，我们可以有一个很长的断言列表，除此之外什么也没有。然而，这样做可能会使阅读、编写和分析测试报告变得非常困难。为了避免这种混乱，测试库通常会在断言周围提供一些支撑抽象。例如，Jasmine和Jest等BDD风格的库提供了两个支撑部分：`it`块和`describe`块。这些只是我们传递描述和回调的函数，但它们一起可以创建一个测试的分层树，使我们更容易理解发生了什么。使用这种模式来测试`sum`函数可能会这样做：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Behaviour-Driven Development** (**BDD**) is a style and methodology of testing
    that, similar to TDD, enforces a regime where we write tests first and implementation
    second. More than this, however, it focuses on the importance of *behaviors* over
    *implementation*, since behaviors are easier to communicate and are more important
    from the perspective of the user (or stakeholder). BDD-style tests will hence
    usually use language such as *Describe X » It does Y when* Z *occurs...*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**行为驱动开发**（**BDD**）是一种测试风格和方法，类似于TDD，它强制我们先编写测试，然后再实现。然而，它更注重*行为*而不是*实现*的重要性，因为行为更容易沟通，从用户（或利益相关者）的角度来看更重要。BDD风格的测试通常会使用诸如*描述X»当Z发生时，它会执行Y...*的语言。'
- en: 'Non-BDD libraries tend to surround groups of assertions with simpler infinitely-nestable
    `test` blocks, like so:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 非BDD库往往用更简单的无限嵌套的`test`块来包围断言组，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see, the naming of the BDD-flavored `it` and `describe` terms can
    help us to craft descriptions for our test suites that read like full English
    sentences (for example *Describe an apple » It is round and sweet*). This isn''t
    enforced but gives us a useful nudge toward better descriptions. We can also infinitely
    nest `describe` blocks so that our descriptions can reflect the hierarchical nature
    of the thing we''re testing. So, for example, if we were testing a math utility
    called `myMathLib`, we may imagine the following test suite with its various sub-suites
    and specifications:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，BDD风格的`it`和`describe`术语的命名可以帮助我们为测试套件编写描述，这些描述读起来像完整的英语句子（例如*描述一个苹果»它又圆又甜*）。这并不是强制的，但可以帮助我们更好地描述。我们还可以无限嵌套`describe`块，以便我们的描述可以反映我们正在测试的事物的分层结构。因此，例如，如果我们正在测试一个名为`myMathLib`的数学工具，我们可以想象以下测试套件及其各种子套件和规范：
- en: 'Describe `myMathLib`:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述`myMathLib`：
- en: 'Describe `add()`:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述`add()`：
- en: It can add two integers
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以添加两个整数
- en: It can add two fractions
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以添加两个分数
- en: It returns `NaN` for non-numeric inputs
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非数字输入，它返回`NaN`
- en: 'Describe `subtract()l`:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述`subtract()`：
- en: It can subtract two integers
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以减去两个整数
- en: It can subtract two fractions
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以减去两个分数
- en: It returns `NaN` for non-numeric inputs
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非数字输入，它返回`NaN`
- en: 'Describe `PI`:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述`PI`：
- en: It is equal to `PI` at fifteen decimal places
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在十五位小数处等于`PI`
- en: 'This hierarchy naturally reflects the conceptual hierarchy of the abstraction
    we''re testing. The reporting provided by the testing library will usefully reflect
    this hierarchy. Here''s an example output from the **Mocha** testing library in
    which every test of `myMathLib` passes successfully:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种层次结构自然地反映了我们正在测试的抽象的概念层次结构。测试库提供的报告将有用地反映这种层次结构。以下是**Mocha**测试库的一个示例输出，其中`myMathLib`的每个测试都成功通过：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Individual assertions come together to form tests. Individual tests come together
    to form test suites. Every test suite provides us with clarity and confidence
    regarding specific units, integrations, or flows (within E2E tests). The composition
    of these test suites is vital to ensuring that our tests are simple and comprehensible.
    We must take the time to think about how we will express the conceptual hierarchy
    of whatever we're testing. The test suites we create also need to be intuitively
    placed within the directory structure of our code base. This is what we'll explore
    next.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 单个断言汇聚在一起形成测试。单个测试汇聚在一起形成测试套件。每个测试套件都为我们提供了关于特定单元、集成或流程（在E2E测试中）的清晰和信心。这些测试套件的组成对于确保我们的测试简单和可理解至关重要。我们必须花时间考虑如何表达我们正在测试的概念层次结构。我们创建的测试套件还需要直观地放置在代码库的目录结构中。这是我们接下来要探讨的内容。
- en: Providing final clarity
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供最终的清晰度
- en: It can be said that the goal of testing is simply to describe what you have
    done. By describing, you are forced to assert your assumed truths about how something
    operates. When these assertions are executed, we can then discern whether our
    descriptions, our *assumed truths*, correctly reflect reality.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，测试的目标只是描述你所做的事情。通过描述，你被迫断言关于某事操作方式的*假设*真相。当这些断言被执行时，我们可以辨别出我们的描述，我们的*假设的真相*是否正确地反映了现实。
- en: In the act of description, we must choose our words carefully so that they express
    our meaning clearly and comprehensibly. Tests are one of our last *defenses* against
    obscurity and complexity. Some code is unavoidably complicated, and we should
    ideally craft it in a way that reduces its obscure nature, but if we can't fully
    do this, then it is the role of tests to clear up any remaining confusion and
    provide the *final* point of clarity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述的过程中，我们必须谨慎选择措辞，以便清晰和易于理解地表达我们的意思。测试是我们对模糊和复杂性的最后一道*防线*。有些代码是不可避免地复杂的，我们理想情况下应该以减少其模糊性的方式来构建它，但如果我们无法完全做到这一点，那么测试的作用就是消除任何剩余的困惑，并提供*最终*的清晰度。
- en: 'The key to clarity while testing is to focus purely on the perspective of the
    person who must read through the tests (or their logged outputs). Here are some
    specific points of clarity to remain aware of:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试时保持清晰的关键是纯粹专注于必须阅读测试（或其记录输出）的人的视角。以下是一些特定的清晰度要点需要注意：
- en: '**Use names** of tests to accurately describe what the test does, being overly
    descriptive if necessary. For example, instead of *test that the* `Navigation`
    *component renders*, consider saying *test that the* `Navigation` *component renders
    all navigations items correctly*. Our names can also communicate the conceptual
    hierarchies of our problem domains as well. Recall what we said about it in the
    *Consistency and hierarchy *section in [Chapter 5](cf2c2cfc-6b5e-48a3-a7ef-99169bd9067d.xhtml), *Naming
    Things is Hard*.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用测试的名称**准确描述测试的内容，必要时过度描述。例如，不要说*测试* `Navigation` *组件是否渲染*，而是说*测试* `Navigation`
    *组件是否正确渲染所有导航项*。我们的名称也可以传达我们问题域的概念层次结构。回想一下我们在[第5章](cf2c2cfc-6b5e-48a3-a7ef-99169bd9067d.xhtml)的*一致性和层次结构*部分中所说的内容，*命名是困难的*。'
- en: '**Use variables** as vessels of meaning. When writing tests, it is a good idea
    to be overly explicit with variable names or even to use variables where they
    may not be necessary, to fully communicate your intent. For example, consider
    how `expect(value).toEqual(eulersNumber)` is more understandable than `expect(value).toEqual(2.7182818)`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用变量**作为意义的载体。在编写测试时，使用变量名过于明确或者甚至在可能不需要的地方使用变量，以充分传达你的意图是一个好主意。例如，考虑`expect(value).toEqual(eulersNumber)`比`expect(value).toEqual(2.7182818)`更容易理解。'
- en: '**Use comments** to explain odd behaviors. If the code you''re testing does
    something in an unexpected or unintuitive manner, then your tests may themselves
    appear unintuitive. As a last resort, it is important to provide additional context
    and explanation with comments. Be wary, however, of stale comments that don''t
    get updated alongside the code.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用注释**来解释奇怪的行为。如果你正在测试的代码以一种意外或不直观的方式执行某些操作，那么你的测试本身可能会显得不直观。作为最后的手段，提供额外的上下文和解释是很重要的。但是要注意，不要让注释变得陈旧，而不随着代码的更新而更新。'
- en: 'Consider the following test for `AnalogClockComponent`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑`AnalogClockComponent`的以下测试：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, this test makes several assertions about the `transform` CSS
    property of specific elements. It''s possible to make an informed guess as to
    what these are, but the clarity could definitely be improved. To make this cleaner,
    we can use better names to reflect what we''re testing, separate the tests to
    represent the different concepts being tested, use variable names to provide clarity
    about what values we''re making assertions about, and use comments to explain
    any possibly unintuitive things:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个测试对特定元素的`transform` CSS属性做出了几个断言。我们可能可以对这些做出一个知情的猜测，但是清晰度肯定可以得到改善。为了使其更清晰，我们可以使用更好的名称来反映我们正在测试的内容，将测试分开以代表不同的被测试概念，使用变量名来清楚地说明我们正在做断言的值，使用注释来解释任何可能不直观的事情：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You'll likely observe that the *cleaner* way is far longer, but when it comes
    to testing, it is truly best to bias yourselves toward such lengthy descriptiveness.
    Being over-descriptive is better than being under-descriptive because, in the
    latter case, your colleagues are left with a deficit of information, scratching
    their heads and making a possibly incorrect guess about functionality. When we
    provide a generous amount of clarity and explanation, we are helping a wider diversity
    of colleagues and users. If we are obscure and terse, however, we are specifically
    limiting the set of people who can understand our code, and hence limiting its
    maintainability and usability.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会观察到*更清晰*的方式要长得多，但是在测试时，最好偏向于这种冗长的描述。过度描述要比不足描述好，因为在后一种情况下，你的同事们会缺乏信息，他们会摸不着头脑，可能会对功能性做出错误的猜测。当我们提供大量的清晰度和解释时，我们正在帮助更广泛的同事和用户。然而，如果我们模糊和简洁，我们特别是限制了能理解我们代码的人群，从而限制了其可维护性和可用性。
- en: Now that we have explored the craft of exposing *final clarity* via a well-structured
    test suite, we can *zoom out* once more and discuss how we might communicate the
    purpose and types of tests we're writing via our directory structures and file
    naming conventions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了通过良好结构的测试套件来展示*最终的清晰度*，我们可以再次*放大*，讨论我们如何通过目录结构和文件命名约定来传达我们正在编写的测试的目的和类型。
- en: Creating clean directory structures
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建清晰的目录结构
- en: Our test suites should usually be constrained to individual files, to delineate
    areas of concern for our programmer-colleagues. Organizing these test files to
    form a coherent part of a larger code base can be a challenge, though.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试套件通常应该限制在单个文件中，以划分出我们的程序员同事关注的领域。尽管将这些测试文件组织成更大代码库的一部分可能是一个挑战。
- en: 'Imagine a small JavaScript code base with the following directory structure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个具有以下目录结构的小型JavaScript代码库：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It''s quite typical to place tests relating to particular code in sub-directories
    close to where that code resides. In our example code base, we may create the
    following `tests` sub-directories to contain unit tests for our `components` and
    `utilities`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将与特定代码相关的测试放置在靠近该代码所在位置的子目录中是相当典型的。在我们的示例代码库中，我们可以创建以下`tests`子目录来包含我们`components`和`utilities`的单元测试：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here are some additional notes regarding conventions, which, as we should know
    by now, are vital in increasing the familiarity and intuitiveness of a code base
    and hence its overall cleanliness:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于约定的额外说明，正如我们现在应该知道的那样，这些约定对于增加代码库的熟悉度和直观性至关重要，因此也对整体清晰度至关重要：
- en: Tests are sometimes called specs (*specifications*). A spec is typically no
    different to a test, although, as a name, it is slightly more favored in the BDD
    paradigm. Use whichever you're comfortable with.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时测试被称为规范（*specifications*）。规范通常与测试没有什么不同，尽管作为名称，在BDD范式中稍微更受青睐。使用你感到舒适的那个。
- en: It's common to see test files suffixed with `.test.js` or `.spec.js`. This is
    so your test-runner can easily identify which files to execute, and it is a helpful
    reminder to our colleagues as well.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常会看到测试文件的后缀是`.test.js`或`.spec.js`。这样你的测试运行器可以轻松识别要执行的文件，对我们的同事也是一个有用的提醒。
- en: It's not rare to see test directories with naming patterns involving underscores
    or other atypical characters, for example, `__tests__`. These naming patterns
    are usually used to ensure that such tests are not compiled or bundled as part
    of your main source code and are easily discernible by our colleagues.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看到测试目录的命名模式涉及下划线或其他非典型字符并不罕见，例如`__tests__`。这些命名模式通常用于确保这些测试不会作为主要源代码的一部分被编译或捆绑，并且可以很容易地被我们的同事辨别。
- en: E2E or integration tests are more commonly placed at a higher level, which alludes
    to their dependency on multiple parts. It's quite common to see a high-level `e2e` directory
    (or some adaptation). Sometimes, integration tests are named individually and
    stored at a high level; other times, they are interspersed with unit tests throughout
    a code base.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端或集成测试更常放置在更高的层次，这暗示了它们对多个部分的依赖。很常见看到一个高级别的`e2e`目录（或一些改编）。有时，集成测试被单独命名并存储在高层；其他时候，它们与单元测试交错存放在代码库中。
- en: Once again, hierarchy is key here. We must ensure that the hierarchy of our
    directories helpfully mirrors the conceptual hierarchy of our code and its problem
    domain. As an equal and important part of a code base, a test should be placed
    carefully and appropriately within a code base, not as an afterthought.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次，层次结构在这里是关键。我们必须确保我们目录的层次结构有助于反映我们代码和问题域的概念层次结构。作为代码库中平等且重要的一部分，测试应该被小心地和适当地放置在代码库中，而不是作为事后的想法。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have applied our theoretical knowledge of testing to the
    practical craft of constructing real, working, and clean test suites. We looked
    at some of the pitfalls that exist in doing so, and we highlighted the important
    qualities to strive for, such as clarity, intuitive naming, and following conventions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将我们对测试的理论知识应用到了构建真实、有效和清晰的测试套件的实际技艺中。我们看了一些在这样做时存在的陷阱，并且我们强调了要努力追求的重要品质，比如清晰、直观的命名和遵循惯例。
- en: In the next chapter, we will be looking into a variety of tools we can use to
    help us to write cleaner code, from linters to compilers, and beyond!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨各种工具，从代码检查器到编译器，以及更多，来帮助我们编写更干净的代码！
