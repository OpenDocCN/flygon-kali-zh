["```cs\n{\n    \"indexingMode\": \"consistent\",\n    \"automatic\": true,\n    ... \n```", "```cs\n{\n    ...\n    \"includedPaths\": [\n        {\n            \"path\": \"/*\",\n            \"indexes\": [\n                {\n                    \"kind\": \"Range\",\n                    \"dataType\": \"Number\",\n                    \"precision\": -1\n                },\n                {\n                    \"kind\": \"Range\",\n                    \"dataType\": \"String\",\n                    \"precision\": -1\n                },\n                {\n                    \"kind\": \"Spatial\",\n                    \"dataType\": \"Point\"\n                }\n            ]\n        }\n    ]\n},\n... \n```", "```cs\n ...\n    \"excludedPaths\": [\n   {\n            \"path\": \"/\\\"_etag\\\"/?\"\n        }\n    ] \n```", "```cs\n public static async Task CreateCosmosDB()\n{\n    using var cosmosClient = new CosmosClient(endpoint, key);\n    Database database = await \n        cosmosClient.CreateDatabaseIfNotExistsAsync(databaseId);\n    ContainerProperties cp = new ContainerProperties(containerId,\n        \"/DestinationName\");\n    Container container = await database.CreateContainerIfNotExistsAsync(cp);\n    await AddItemsToContainerAsync(container);\n} \n```", "```cs\npublic class Destination\n{\n    [JsonProperty(PropertyName = \"id\")]\n    public string Id { get; set; }\n    public string DestinationName { get; set; }\n    public string Country { get; set; }\n    public string Description { get; set; }\n    public Package[] Packages { get; set; }\n} \n```", "```cs\n    context.Database.EnsureCreated(); \n    ```", "```cs\n    builder.Entity<MyEntity>()\n         .ToContainer(\"collection-name\"); \n    ```", "```cs\n    builder.Entity<Destination>()\n        .OwnsMany(m =>m.Packages); \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore;\n    using Microsoft.EntityFrameworkCore.Design;\n    namespace WWTravelClubDB\n    {\n        public class LibraryDesignTimeDbContextFactory\n            : IDesignTimeDbContextFactory<MainDBContext>\n        {\n            private const string endpoint = \"<your account endpoint>\";\n            private const string key = \"<your account key>\";\n            private const string databaseName = \"packagesdb\";\n            public \"MainDBContext CreateDbContext\"(params string[] args)\n            {\n                var builder = new DbContextOptionsBuilder<Main\n    DBContext>();\n    builder.UseCosmos(endpoint, key, databaseName);\n                return new MainDBContext(builder.Options);\n            }\n        }\n    } \n    ```", "```cs\n    var context = new LibraryDesignTimeDbContextFactory()\n        .CreateDbContext();\n    context.Database.EnsureCreated();\n    var firstDestination = new Destination\n    {\n        Id = Guid.NewGuid().ToString(),\n        Name = \"Florence\",\n        Country = \"Italy\",\n        Packages = new List<Package>()\n        {\n        new Package\n        {\n            Id=Guid.NewGuid().ToString(),\n            Name = \"Summer in Florence\",\n            StartValidityDate = new DateTime(2019, 6, 1),\n            EndValidityDate = new DateTime(2019, 10, 1),\n            DuratioInDays=7,\n            Price=1000\n        },\n        new Package\n        {\n            Id=Guid.NewGuid().ToString(),\n            Name = \"Winter in Florence\",\n            StartValidityDate = new DateTime(2019, 12, 1),\n            EndValidityDate = new DateTime(2020, 2, 1),\n            DuratioInDays=7,\n            Price=500\n        }\n        }\n    }; \n    ```", "```cs\n    var list = context.Destinations\n        .AsEnumerable() // move computation on the client side\n        .SelectMany(m =>m.Packages)\n        .Where(m => period >= m.StartValidityDate....)\n        ... \n    ```"]