- en: '*Chapter 5*: Beautiful Layouts with CardView and ScrollView'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：使用CardView和ScrollView创建美丽的布局'
- en: 'This is the last chapter on layouts before we spend some time focusing more
    on Java and object-oriented programming. We will formalize our learning of some
    of the different attributes we have already met, and we will also introduce two
    more cool layouts: `ScrollView` and `CardView`. To finish the chapter off, we
    will run the `CardView` project on a tablet emulator.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在花一些时间更专注于Java和面向对象编程之前的最后一个布局章节。我们将正式学习一些我们已经遇到的不同属性，并且我们还将介绍两个更酷的布局：`ScrollView`和`CardView`。最后，我们将在平板模拟器上运行`CardView`项目。
- en: 'In this chapter, we will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: A quick summary of UI attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI属性的快速总结
- en: Build our neatest layout so far using `ScrollView` and `CardView`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ScrollView`和`CardView`构建我们迄今为止最整洁的布局
- en: Create and use a tablet emulator
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用平板模拟器
- en: Let's start by recapping some attributes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先回顾一些属性。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005)。
- en: Attributes quick summary
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性快速总结
- en: In the last few chapters, we used and discussed quite a few different attributes.
    I thought it would be worth a quick summary and further investigation of a few
    of the more common attributes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们使用和讨论了相当多不同的属性。我认为快速总结和进一步调查一些更常见的属性是值得的。
- en: Sizing using dp
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用dp进行调整
- en: As we know, there are thousands of different Android devices. To try and have
    a system of measurement that works across different devices, Android uses **density-independent**
    **pixels**, or **dp**, as a unit of measurement. The way this works is by first
    calculating the density of the pixels on the device an app is running on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，有成千上万种不同的安卓设备。为了尝试在不同设备上使用一种通用的测量系统，安卓使用**密度无关**的**像素**，或者**dp**，作为测量单位。其工作原理是首先计算应用程序运行设备上的像素密度。
- en: Important Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We can calculate density by dividing the horizontal resolution by the horizontal
    size in inches of the screen. This is all done on the fly, on the device on which
    our app is running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将屏幕的水平分辨率除以屏幕的水平尺寸（以英寸为单位）来计算密度。这一切都是在我们的应用程序运行的设备上实时完成的。
- en: All we must do is use `dp` in conjunction with a number when setting the size
    of the various attributes of our widgets. Using density-independent measurements,
    we can design layouts that scale to create a uniform appearance on as many different
    screens as possible.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在设置小部件的各种属性的大小时，使用`dp`和一个数字。使用密度无关的测量单位，我们可以设计布局，使其在尽可能多的不同屏幕上呈现统一的外观。
- en: So, does that mean problem solved then? We just use `dp` everywhere and our
    layouts will work everywhere? Unfortunately, density independence is only part
    of the solution. We will see more of how we can make our apps look great on a
    range of different screens throughout the rest of the book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是否意味着问题解决了？我们只需在所有地方使用`dp`，我们的布局就能在任何地方工作？不幸的是，密度无关只是解决方案的一部分。在本书的其余部分中，我们将看到如何使我们的应用程序在各种不同的屏幕上呈现出色。
- en: 'As an example, we can affect the height and width of a widget by adding the
    following code to its attributes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过向其属性添加以下代码来影响小部件的高度和宽度：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Alternatively, we can use the attributes window and add them through the comfort
    of the appropriate edit boxes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用属性窗口，并通过适当的编辑框的舒适性添加它们。
- en: We can also use the same `dp` units to set other attributes, such as margin
    and padding. We will look more closely at margin and padding in a minute.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用相同的`dp`单位来设置其他属性，例如边距和填充。我们将在一分钟内更仔细地研究边距和填充。
- en: Sizing fonts using sp
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用sp调整字体大小
- en: Another device-dependent unit of measurement used for sizing Android fonts is
    `sp` unit of measurement is used for fonts and is pixel density-dependent in the
    exact same way that `dp` is.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种用于调整安卓字体大小的设备相关测量单位是`sp`，该测量单位用于字体，并且与`dp`的像素密度相关方式完全相同。
- en: The extra calculation that an Android device will use when deciding how big
    your font will be, based on the value of `sp` you use, is the user's own font
    size settings. So, if you test your app on devices and emulators with normal-sized
    fonts, then a user who has a sight impairment (or just likes big fonts) and has
    the font setting on large will see something different from what you saw during
    testing.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓设备在决定您的字体大小时将使用额外的计算，这取决于您使用的`sp`值，即用户自己的字体大小设置。因此，如果您在具有正常字体大小的设备和模拟器上测试应用程序，那么视力受损的用户（或者只是喜欢大字体的用户）并且将字体设置为大号的用户将看到与您在测试期间看到的内容不同。
- en: 'If you want to try playing around with your Android device''s font size settings,
    you can do so on the emulator or a real device by selecting **Settings** | **Display**
    | **Advanced** | **Font size** and try adjusting the slider highlighted in the
    following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试调整安卓设备的字体大小设置，可以在模拟器或真实设备上选择**设置** | **显示** | **高级** | **字体大小**，然后尝试调整下面截图中突出显示的滑块：
- en: '![Figure 5.1 – Sizing fonts using sp'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – 使用sp调整字体大小'
- en: '](img/Figure_5.01_B16773.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.01_B16773.jpg)'
- en: Figure 5.1 – Sizing fonts using sp
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 使用sp调整字体大小
- en: 'We can set the size of fonts using `sp` in any widget that has text. This includes
    `Button`, `TextView`, and all the UI elements under the `textSize` property like
    so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在任何具有文本的小部件中使用`sp`来设置字体大小。这包括`Button`、`TextView`和所有`textSize`属性下的UI元素，如下所示：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As usual, we can also use the attributes window to achieve the same thing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们也可以使用属性窗口来实现相同的效果。
- en: Determining size with wrap or match
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用wrap或match确定大小
- en: We can also decide how the size of UI elements, and many other UI elements,
    behave in relation to the containing/parent element. We can do so by setting the
    `layoutWidth` and `layoutHeight` attributes to either `wrap_content` or `match_parent`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以决定UI元素的大小，以及许多其他UI元素，相对于包含/父元素的行为。我们可以通过将`layoutWidth`和`layoutHeight`属性设置为`wrap_content`或`match_parent`来实现。
- en: 'For example, say we set the attributes of a lone button on a layout to the
    following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们将布局上孤立的按钮的属性设置为以下内容：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, the button will expand in both height and width to **match** the **parent**.
    We can see that the button in the next screenshot fills the entire screen:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按钮将在高度和宽度上都扩展以**匹配****父级**。我们可以看到下一个截图中的按钮填满了整个屏幕：
- en: Important Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: I added the button on a new layout to the project from the previous chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在项目中的上一章中添加了一个新布局上的按钮。
- en: '![Figure 5.2 – The button expanded in both height and width to match the parent'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 - 按钮在高度和宽度上扩展以匹配父级'
- en: '](img/Figure_5.02_B16773.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.02_B16773.jpg)'
- en: Figure 5.2 – The button expanded in both height and width to match the parent
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 - 按钮在高度和宽度上扩展以匹配父级
- en: 'More common for a button is `wrap_content`, as shown next:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更常见的是按钮的`wrap_content`，如下所示：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This causes the button to be as big as it needs to `dp` and text in `sp`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致按钮的大小与它需要的一样大（以`dp`为单位，文本以`sp`为单位）。
- en: Using padding and margin
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用填充和边距
- en: 'If you have ever done any web design, then you will be very familiar with the
    next two attributes. **Padding** is the space from the edge of the widget to the
    start of the content in the widget. **Margin** is the space outside of the widget
    that is left between other widgets – including the margins of other widgets, should
    they have any. Here is a visual representation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经做过任何网页设计，那么你一定对接下来的两个属性非常熟悉。**填充**是从小部件的边缘到小部件内容的开始的空间。**边距**是留在小部件外部的空间，留在其他小部件之间
    - 包括其他小部件的边距，如果它们有的话。这里有一个可视化表示：
- en: '![Figure 5.3 – Padding and margin used'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 - 使用填充和边距'
- en: '](img/Figure_5.03_B16773.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.03_B16773.jpg)'
- en: Figure 5.3 – Padding and margin used
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 - 使用填充和边距
- en: 'We can set the padding and margin in a straightforward way, equally for all
    sides, like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地为所有边设置填充和边距，就像这样：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Look at the slight difference in naming convention for the margin and padding.
    The padding is just called `padding` but the margin is referred to as `layout_margin`.
    This reflects the fact that the padding only affects the UI element itself, but
    the margin can affect other widgets in the layout.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下边距和填充的命名约定略有不同。填充只是称为`padding`，但边距被称为`layout_margin`。这反映了填充只影响UI元素本身，但边距可以影响布局中的其他小部件。
- en: 'Alternatively, we can specify different top, bottom, left, and right margins
    and paddings, like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以指定不同的顶部、底部、左侧和右侧边距和填充，就像这样：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Specifying margin and padding values for a widget is optional and a value of
    0 will be assumed if nothing is specified. We can also choose to specify some
    of the different sides' margins and paddings but not others, as in the earlier
    example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为小部件指定边距和填充值是可选的，如果没有指定任何值，将假定为0。我们还可以选择指定一些不同边的边距和填充，但不指定其他边，就像前面的例子一样。
- en: It is probably becoming obvious that the way we design our layouts is extremely
    flexible, but also that it is going to take some practice to achieve precise results
    with this many options. We can even specify negative margin values to create overlapping
    widgets.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们设计布局的方式非常灵活，但要精确地实现这么多选项，需要一些练习。我们甚至可以指定负边距值来创建重叠的小部件。
- en: Let's look at a few more attributes, and then we will go ahead and play around
    with a stylish layout – `CardView`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些其他属性，然后我们将继续玩一个时尚布局 - `CardView`。
- en: Using the layout_weight property
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`layout_weight`属性
- en: Weight refers to a relative amount compared to other UI elements. So, for `layout_weight`
    to be useful, we need to assign a value to the `layout_weight` property on two
    or more elements.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重量是相对于其他UI元素的相对量。因此，为了使`layout_weight`有用，我们需要在两个或更多元素上为`layout_weight`属性分配一个值。
- en: We can then assign portions that add up to 100% in total. This is especially
    useful for dividing up screen space between parts of the UI where we want the
    relative space they occupy to remain the same regardless of screen size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以分配总共加起来为100%的部分。这对于在UI的各个部分之间划分屏幕空间特别有用，我们希望它们占用的相对空间在屏幕大小不同的情况下保持不变。
- en: 'Using `layout_weight` in conjunction with `sp` and `dp` units can make for
    a simple and flexible layout. For example, look at this code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`layout_weight`与`sp`和`dp`单位结合使用可以创建一个简单而灵活的布局。例如，看看这段代码：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is what this code will do:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将做什么：
- en: '![Figure 5.4 – The UI with the layout_weight property in use'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4 - 使用layout_weight属性的UI'
- en: '](img/Figure_5.04_B16773.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.04_B16773.jpg)'
- en: Figure 5.4 – The UI with the layout_weight property in use
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 - 使用layout_weight属性的UI
- en: Notice that all the `layout_height` attributes are set to `0dp`. Effectively,
    `layout_weight` is replacing the `layout_height` property. The context in which
    we use `layout_weight` is important or it won't work. Also note that we don't
    have to use fractions of 1; we can use whole numbers, percentages, or any other
    number; as long as they are relative to each other, they will probably achieve
    the effect you are after. Note that `layout_weight` only works in certain contexts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有的`layout_height`属性都设置为`0dp`。实际上，`layout_weight`正在替换`layout_height`属性。我们使用`layout_weight`的上下文很重要，否则它不起作用。还要注意，我们不必使用1的分数；我们可以使用整数、百分比或任何其他数字；只要它们相对于彼此，它们可能会实现你想要的效果。请注意，`layout_weight`只在某些上下文中起作用。
- en: Using gravity
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用重力
- en: '**Gravity** can be our friend and can be used in so many ways in our layouts.
    Just like gravity in the solar system, it affects the position of items by moving
    them in a given direction, as if they were being acted upon by gravity. The best
    way to see what gravity can do is to look at some example code and pictures.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**重力**可以成为我们的朋友，并且可以在布局中以许多方式使用。就像太阳系中的重力一样，它通过将物品朝着给定方向移动来影响物品的位置，就好像它们受到重力的影响一样。了解重力的最佳方法是查看一些示例代码和图片，看看重力能做什么。'
- en: 'Say we set the `gravity` property on a button (or another widget) to `left|center_vertical`
    like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们将按钮（或另一个小部件）的`gravity`属性设置为`left|center_vertical`，就像这样：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will have an effect that looks like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下效果：
- en: '![Figure 5.5 – Setting the gravity property on a widget'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5 - 在小部件上设置重力属性'
- en: '](img/Figure_5.05_B16773.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.05_B16773.jpg)'
- en: Figure 5.5 – Setting the gravity property on a widget
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - 在小部件上设置重力属性
- en: Notice that the contents of the widget (in this case the button's text) are
    indeed aligned left and centrally vertical.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，小部件的内容（在本例中为按钮的文本）确实左对齐并垂直居中。
- en: 'In addition, a widget can influence its own position within a layout element
    with the `layout_gravity` element, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，小部件可以使用`layout_gravity`元素影响其在布局元素中的位置，就像这样：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This would set the widget within its layout, as expected, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将如预期地设置小部件在其布局中，就像这样：
- en: '![Figure 5.6 – Setting the gravity layout to left'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6 - 将重力布局设置为左'
- en: '](img/Figure_5.06_B16773.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.06_B16773.jpg)'
- en: Figure 5.6 – Setting the gravity layout to left
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 - 将重力布局设置为左
- en: The previous code allows different widgets within the same layout to be affected
    as if the layout has multiple different gravities.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码允许同一布局中的不同小部件受到影响，就好像布局具有多个不同的重力。
- en: 'The contents of all the widgets in a layout can be affected by the `gravity`
    property of their parent layout by using the same code as a widget:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用与小部件相同的代码，可以通过其父布局的`gravity`属性影响布局中所有小部件的内容：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are in fact many more attributes than those we have discussed. Many we
    won't need in this book and some are quite obscure, and you might never need them
    in your entire Android career. But others are quite commonly used, such as `background`,
    `textColor`, `alignment`, `typeface`, `visibility`, and `shadowColor`. Let's explore
    some more attributes and layouts now.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有许多属性超出了我们讨论的范围。我们在本书中不需要的很多属性，有些相当晦涩，你可能在整个Android职业生涯中都用不到它们。但其他一些是相当常用的，例如`background`、`textColor`、`alignment`、`typeface`、`visibility`和`shadowColor`。让我们现在探索一些更多的属性和布局。
- en: Building a UI with CardView and ScrollView
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CardView和ScrollView构建UI
- en: Create a new project in the usual way and choose the `CardView Layout`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式创建一个新项目，并选择`CardView Layout`。
- en: We will design our `CardView` masterpiece inside a `ScrollView` layout, which,
    as the name suggests, allows the user to scroll through the contents of the layout.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`ScrollView`布局中设计我们的`CardView`杰作，正如其名称所示，它允许用户滚动布局的内容。
- en: Expand the folders in the project explorer window so you can see the `res` folder.
    Expand the `res` folder to see the `layout` folder.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 展开项目资源管理器窗口中的文件夹，以便您可以看到`res`文件夹。展开`res`文件夹以查看`layout`文件夹。
- en: Right-click the **layout** folder and select **New**. Notice there is an option
    for **Layout** **resource file**. Select **Layout resource file** and you will
    see the **New Resource File** dialog window.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击**layout**文件夹，然后选择**New**。请注意，有一个**Layout resource file**选项。选择**Layout resource
    file**，然后您将看到**New Resource File**对话框窗口。
- en: In the `main_layout`. The name is arbitrary, but this layout is going to be
    our main layout, so the name makes that plain.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main_layout`中。名称是任意的，但这个布局将是我们的主要布局，所以名称表明了这一点。
- en: Notice it is set to `ScrollView`. This layout type appears to work just like
    `LinearLayout`; the difference is that when there is too much content to display
    onscreen, it will allow the user to scroll through the content by swiping with
    their finger.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意它被设置为`ScrollView`。这种布局类型似乎与`LinearLayout`的工作方式完全相同；不同之处在于，当屏幕上有太多内容要显示时，它将允许用户通过用手指滑动来滚动内容。
- en: Click the `ScrollView` in an XML file called `main_layout` and place it in the
    `layout` folder ready for us to build our `CardView`-based UI.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`main_layout`的XML文件中单击`ScrollView`，并将其放置在`layout`文件夹中，以便我们构建基于`CardView`的UI。
- en: Android Studio will open the UI designer ready for action.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio将打开UI设计器，准备就绪。
- en: Setting the view with Java code
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Java代码设置视图
- en: As we have done before, we will now load the `main_layout.xml` file as the layout
    for our app by calling the `setContentView` method in the `MainActivity.java`
    file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们现在将通过在`MainActivity.java`文件中调用`setContentView`方法来加载`main_layout.xml`文件作为我们应用的布局。
- en: Select the `app/java/your_package_name`, where `your_package_name` is equal
    to the package name that was auto-generated when you created the project.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`app/java/your_package_name`，其中`your_package_name`等于创建项目时自动生成的包名称。
- en: 'Amend the code in the `onCreate` method to look exactly like this next code.
    I have highlighted the line that you need to add:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`onCreate`方法中的代码，使其与下一个代码完全相同。我已经突出显示了您需要添加的行：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You could now run the app but there is nothing to see except an empty `ScrollView`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行应用程序，但除了一个空的`ScrollView`之外，什么也看不到。
- en: Adding image resources
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图像资源
- en: We are going to need some images for this project. This is so that we can demonstrate
    how to add them into the project (this section) and neatly display and format
    them in a `CardView` widget (next section).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一些图片来完成这个项目。这样我们就可以演示如何将它们添加到项目中（本节）并在`CardView`小部件中整齐地显示和格式化它们（下一节）。
- en: It doesn't really matter where you get your images from; it is the practical,
    hands-on experience that is the purpose of this exercise. To avoid copyright and
    royalty problems, I am going to use some book images from the Packt Publishing
    website. This also makes it easy for me to provide you with all the resources
    you need to complete the project and should relieve the bother of you acquiring
    your own images. Feel free to swap the images in the [*Chapter 5*](B16773_05_ePub_RK.xhtml#_idTextAnchor101)`/res/drawable`
    folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你从哪里获取图片并不重要；这个练习的目的是实际的动手经验。为了避免版权和版税问题，我将使用一些来自Packt Publishing网站的书籍图片。这也使我能够为您提供完成项目所需的所有资源，并且应该减轻您获取自己的图片的麻烦。请随意在[*第5章*](B16773_05_ePub_RK.xhtml#_idTextAnchor101)`/res/drawable`文件夹中更换图片。
- en: 'There are three images: `image_1.png`, `image_2.png`, and `image_3.png`. To
    add them to the project, follow these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有三张图片：`image_1.png`，`image_2.png`和`image_3.png`。要将它们添加到项目中，请按照以下步骤进行：
- en: Find the picture files using your operating system's file browser.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您操作系统的文件浏览器找到图片文件。
- en: Highlight them all and press *Ctrl* + *C* to copy them.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们全部高亮显示，然后按*Ctrl* + *C*进行复制。
- en: In the Android Studio project explorer, select the **res/drawable** folder by
    left-clicking it.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio项目资源管理器中，通过左键单击选择**res/drawable**文件夹。
- en: Right-click the **drawable** folder and select **Paste**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**drawable**文件夹，然后选择**粘贴**。
- en: In the pop-up window that asks `drawable` folder.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中询问`drawable`文件夹。
- en: Click **OK** again to **Copy Specified Files**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次单击**确定**以**复制指定文件**。
- en: 'You should now be able to see your images in the `drawable` folder along with
    a couple of other files that Android Studio placed there when the project was
    created, as shown in this next screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够在`drawable`文件夹中看到你的图片，以及Android Studio在项目创建时放置在那里的一些其他文件，如下一个截图所示：
- en: '![Figure 5.7 – Expanding the drawable folder'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 - 扩展drawable文件夹'
- en: '](img/Figure_5.07_B16773.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.07_B16773.jpg)'
- en: Figure 5.7 – Expanding the drawable folder
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - 扩展drawable文件夹
- en: Before we move on to the `CardView` widget itself, let's design what we will
    put inside our cards.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续讨论`CardView`小部件本身之前，让我们设计一下我们将放在卡片中的内容。
- en: Creating the contents for the cards
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建卡片的内容
- en: The next thing we need to do is create the contents for our cards. It makes
    sense to separate the content from the layout. What we will do is create three
    separate layouts, called `card_contents_1`, `card_contents_2`, and `card_contents_3`.
    They will each contain a `LinearLayout`, which itself will contain an image and
    some text.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的下一件事是创建卡片的内容。将内容与布局分开是有意义的。我们将创建三个单独的布局，称为`card_contents_1`，`card_contents_2`和`card_contents_3`。它们将分别包含一个`LinearLayout`，其中将包含一张图片和一些文本。
- en: 'Let''s create three more layouts with a `LinearLayout` layout at their root:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另外三个带有`LinearLayout`布局的布局：
- en: Right-click the **layout** folder and select **New layout resource file**.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**layout**文件夹，然后选择**新建布局资源文件**。
- en: Name the file `card_contents_1` and change **…ConstraintLayout** to **LinearLayout**
    for the root element.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`card_contents_1`，并将**…ConstraintLayout**更改为**LinearLayout**作为根元素。
- en: Click `layout` folder.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`layout`文件夹。
- en: Repeat *steps 1* through *3* two more times, changing the filename each time
    to `card_contents_2` and then `card_contents_3`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤1*到*3*两次，每次将文件名更改为`card_contents_2`，然后是`card_contents_3`。
- en: 'Now, select the `sp`, `dp`, and `gravity` attributes to make them look nice:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择`sp`、`dp`和`gravity`属性使它们看起来漂亮：
- en: Drag a `TextView` onto the top of the layout.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个`TextView`拖到布局的顶部。
- en: Drag an `ImageView` onto the layout below the `TextView`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TextView`下方的布局中拖动一个`ImageView`。
- en: In the **Resources** pop-up window, select **Project** | **image_1**, then click
    **OK**.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资源**弹出窗口中，选择**项目** | **image_1**，然后单击**确定**。
- en: Drag another two `TextView` below the image.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图片下面拖动另外两个`TextView`。
- en: 'This is what your layout should look like now:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的布局应该是这样的：
- en: '![Figure 5.8 – Making the layout look nicer by adding sp, dp, and gravity attributes'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 - 通过添加sp、dp和gravity属性使布局看起来更漂亮'
- en: '](img/Figure_5.08_B16773.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.08_B16773.jpg)'
- en: Figure 5.8 – Making the layout look nicer by adding sp, dp, and gravity attributes
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 - 通过添加sp、dp和gravity属性使布局看起来更漂亮
- en: 'Now let''s use some Material Design guidelines to make the layout look more
    appealing:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用一些Material Design指南使布局看起来更吸引人：
- en: Important Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is possible that as you proceed through these modifications the UI elements
    on the bottom of the layout might disappear off the bottom of the design view.
    If this happens to you, remember you can always select any UI element from the
    **Component Tree** window underneath the palette.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当您进行这些修改时，底部布局中的UI元素可能会消失在设计视图的底部。如果这种情况发生在您身上，请记住您可以随时从**组件树**窗口下面的调色板中选择任何UI元素。
- en: Set the `textSize` attribute for the `TextView` widget at the top to `24sp`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为顶部的`TextView`小部件设置`textSize`属性为`24sp`。
- en: Still working on the `TextView` widget at the top, set the `16dp`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部的`TextView`小部件上继续工作，将`16dp`。
- en: Set the `text` attribute to `Learning Java by Building Android Games` (or whatever
    title suits your image).
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`text`属性设置为`Learning Java by Building Android Games`（或者适合你的图片的标题）。
- en: On the `ImageView` widget, set the `layout_width` and `layout_height` attributes
    to `wrap_content`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`小部件上，将`layout_width`和`layout_height`属性设置为`wrap_content`。
- en: Still working on the `ImageView` widget, set the `layout_gravity` attribute
    to `center_horizontal`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续使用`ImageView`小部件时，将`layout_gravity`属性设置为`center_horizontal`。
- en: On the `TextView` widget below `ImageView`, set `textSize` to `16sp`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ImageView`小部件下方的`TextView`上，将`textSize`设置为`16sp`。
- en: On the same `TextView` widget, set `16dp`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`小部件上，设置`16dp`。
- en: On the same `TextView` widget, set the `text` attribute to `Learn Java` `and
    Android from scratch by building 6 playable games` (or something that describes
    your image).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`小部件上，将`text`属性设置为`Learn Java` `and Android from scratch by building
    6 playable games`（或者描述你的图片的内容）。
- en: On the bottom `TextView` widget, change the `text` attribute to `BUY NOW`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部的`TextView`小部件上，将`text`属性更改为`BUY NOW`。
- en: On the same `TextView` widget, set `16dp`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`小部件上，将`16dp`设置为。
- en: On the same `TextView` widget, set the `textSize` attribute to `24sp`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`小部件上，将`textSize`属性设置为`24sp`。
- en: On the same `TextView` widget, set the `textColor` attribute to `@color/` `teal_200`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的`TextView`小部件上，将`textColor`属性设置为`@color/` `teal_200`。
- en: On the `LinearLayout` layout holding all the other elements, set `15dp`. Note
    that it is easiest to select `LinearLayout` from the **Component Tree** window.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含所有其他元素的`LinearLayout`布局上，设置为`15dp`。请注意，从**组件树**窗口中选择`LinearLayout`最容易。
- en: 'At this point, your layout will look very similar to as in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的布局将看起来与以下截图非常相似：
- en: '![Figure 5.9 – Enhancing the appeal of the layout using some Material Design
    guidelines'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9-使用一些Material Design指南增强布局的吸引力'
- en: '](img/Figure_5.09_B16773.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.09_B16773.jpg)'
- en: Figure 5.9 – Enhancing the appeal of the layout using some Material Design guidelines
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9-使用一些Material Design指南增强布局的吸引力
- en: Now lay out the other two files (`card_contents_2` and `card_contents_3`) with
    the exact same dimensions and colors. When you get the `image_2` and `image_3`,
    respectively. Also, change all the `text` attributes on the first two `TextView`
    elements so that the titles and descriptions are unique. The titles and descriptions
    don't really matter; it is the layout and appearance we are learning about.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用完全相同的尺寸和颜色布局其他两个文件（`card_contents_2`和`card_contents_3`）。当您获得`image_2`和`image_3`时，也要相应地更改前两个`TextView`元素上的所有`text`属性，以使标题和描述是唯一的。标题和描述并不重要；我们要学习的是布局和外观。
- en: Note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that all the sizes and colors were derived from the Material Design website
    here: [https://material.io/design/introduction](https://material.io/design/introduction)
    and the Android-specific UI guidelines here: [https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel).
    These are well worth studying alongside or soon after you complete this book.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有尺寸和颜色都来自Material Design网站：[https://material.io/design/introduction](https://material.io/design/introduction)和Android特定的UI指南：[https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel)。在完成本书后，这些都值得学习。
- en: Now we can move on to the `CardView` widgets.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续进行`CardView`小部件。
- en: Defining dimensions for CardView
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为CardView定义尺寸
- en: Right-click the `dimens` (short for dimensions) and click `dimens.xml`. We will
    use this file to create some common values that our `CardView` will use by referring
    to them.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`dimens`（缩写为尺寸）并单击`dimens.xml`。我们将使用这个文件通过引用它们来创建一些`CardView`将使用的常见值。
- en: 'To achieve this, we will edit the XML directly in the `dimens.xml` file to
    be the same as the following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将直接在`dimens.xml`文件中编辑XML，使其与以下代码相同：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Be sure to make it exactly the same because a small omission could cause an
    error and prevent the project from working.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要确保它与原来完全相同，因为一个小的遗漏可能会导致错误并阻止项目工作。
- en: We have defined two resources, the first called `card_corner_radius` with a
    value of `16dp` and the second called `card_margin` with a value of `10dp`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两个资源，第一个称为`card_corner_radius`，值为`16dp`，第二个称为`card_margin`，值为`10dp`。
- en: We will refer to these resources from the `main_layout` file and use them to
    consistently configure our three `CardView` elements.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`main_layout`文件中引用这些资源，并使用它们来一致地配置我们的三个`CardView`元素。
- en: Adding CardView to our layout
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将CardView添加到我们的布局
- en: Switch to the `ScrollView` that will scroll the contents of our app, rather
    like how a web browser scrolls the contents of a web page that doesn't fit on
    one screen.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到将滚动我们应用程序内容的`ScrollView`，有点像Web浏览器滚动不适合一个屏幕的网页内容。
- en: '`ScrollView` has a limitation – it can only have one direct child layout. We
    want it to contain three `CardView` widgets.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScrollView`有一个限制-它只能有一个直接子布局。我们希望它包含三个`CardView`小部件。'
- en: 'To overcome this problem, drag a `LinearLayout` layout from the `Layouts` category
    of the palette. Be sure to pick **LinearLayout (vertical)**, as represented by
    this icon in the palette:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，从调色板的`布局`类别中拖动一个`LinearLayout`布局。一定要选择**LinearLayout (vertical)**，如调色板中的图标所示：
- en: '![Figure 5.10 – The LinearLayout (vertical) icon'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10-LinearLayout (vertical)图标'
- en: '](img/Figure_5.10_B16773.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.10_B16773.jpg)'
- en: Figure 5.10 – The LinearLayout (vertical) icon
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10-LinearLayout (vertical)图标
- en: We will add our three `CardView` inside the `LinearLayout`, and then the whole
    thing will scroll nice and smoothly without any errors.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把三个`CardView`放在`LinearLayout`中，然后整个内容将平稳滚动，没有任何错误。
- en: The `CardView` widget can be found in the `CardView`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardView`小部件可以在`CardView`中找到。'
- en: 'Drag a `CardView` onto the `LinearLayout` on the design and you might or might
    not get a pop-up message in Android Studio. This is the message:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 将`CardView`拖放到设计中的`LinearLayout`上，您可能会收到Android Studio中的弹出消息，也可能不会。这是消息：
- en: '![Figure 5.11 – The popup asking for permission to add CardView'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11-要求添加CardView的弹出窗口'
- en: '](img/Figure_5.11_B16773.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.11_B16773.jpg)'
- en: Figure 5.11 – The popup asking for permission to add CardView
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11-要求添加CardView的弹出窗口
- en: If you do get this message, click the `CardView` features to older versions
    of Android that wouldn't otherwise have them.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您收到此消息，请单击`CardView`功能以将其添加到否则不会具有这些功能的较旧版本的Android。
- en: You should now have a `CardView` on the design. Until there are some contents
    in it, the `CardView` is only easily visible in the **Component Tree** window.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的设计中应该有一个`CardView`。在其中有内容之前，`CardView`只能在**组件树**窗口中轻松可见。
- en: 'Select the `CardView` via **Component Tree** and configure the following attributes:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**组件树**选择`CardView`并配置以下属性：
- en: Set `layout_width` to `wrap_content`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`layout_width`设置为`wrap_content`。
- en: Set `layout_gravity` to `center`.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`layout_gravity`设置为`center`。
- en: Set `@dimen/card_margin` to use the value for a margin that we defined in the
    `dimens.xml` file.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`@dimen/card_margin`以使用我们在`dimens.xml`文件中定义的边距值。
- en: Set the `cardCornerRadius` attribute to `@dimen/card_corner_radius` to use the
    value for a radius that we defined in the `dimens.xml` file.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cardCornerRadius`属性设置为`@dimen/card_corner_radius`，以使用我们在`dimens.xml`文件中定义的半径值。
- en: Set `cardElevation` to `2dp`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`cardElevation`设置为`2dp`。
- en: 'Now switch to the **Code** tab and you will find you have something like this
    next code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到**代码**选项卡，您会发现您有以下代码：
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous code listing only shows the code for `CardView`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码列表仅显示了`CardView`的代码。
- en: The problem at the moment is that our `CardView` is empty. Let's fix that by
    adding the contents of `card_contents_1.xml`. Here is how to do it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的问题是我们的`CardView`是空的。让我们通过添加`card_contents_1.xml`的内容来解决这个问题。以下是如何做到这一点。
- en: Including layout files inside another layout
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在另一个布局文件中包含布局文件
- en: 'We need to edit the code very slightly and here is why. We need to add an `include`
    element to the code. The `include` element is the code that will insert the contents
    from the `card_contents_1.xml` layout. The problem is that to add this code, we
    need to slightly alter the format of the `CardView` XML. The current format starts
    and concludes `CardView` with one single tag, like this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微编辑代码，原因如下。我们需要向代码添加一个`include`元素。`include`元素是将从`card_contents_1.xml`布局中插入内容的代码。问题在于，要添加这段代码，我们需要稍微改变`CardView`
    XML的格式。当前的格式以一个单一标签开始和结束`CardView`，如下所示：
- en: '[PRE13]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need to change the format to a separate opening and closing tag like this
    (don''t change anything just yet):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将格式更改为像这样的单独的开放和关闭标签（暂时不要更改任何内容）：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This change in format will enable us to add the `include…` code and our first
    `CardView` widget will be complete. With this in mind, edit the code of the `CardView`
    to be exactly the same as the following code. I have highlighted the two new lines
    of code but note that the forward slash that was after the `cardElevation` attribute
    has also been removed:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式的改变将使我们能够添加`include…`代码，我们的第一个`CardView`小部件将完成。考虑到这一点，编辑`CardView`的代码，确保与以下代码完全相同。我已经突出显示了两行新代码，但请注意，`cardElevation`属性后面的斜杠也已经被移除：
- en: '[PRE15]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can now view the `main_layout` file in the visual designer and see the
    layout inside the `CardView` element. The visual designer does not reveal the
    real aesthetics of `CardView`, however. We will see all the `CardView` widgets
    together scrolling nicely in the completed app shortly. Here is a screenshot of
    the screen in the emulator showing where we are up to so far:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在可视化设计器中查看`main_layout`文件，并查看`CardView`元素内部的布局。然而，可视化设计器并不能展示`CardView`的真正美感。不过很快我们将会在完成的应用程序中看到所有`CardView`小部件一起滚动得很好。以下是模拟器中屏幕的截图，显示了我们目前的进展：
- en: '![Figure 5.12 – The layout inside the CardView element'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12 - CardView元素内部的布局'
- en: '](img/Figure_5.12_B16773.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.12_B16773.jpg)'
- en: Figure 5.12 – The layout inside the CardView element
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 - CardView元素内部的布局
- en: Add two more `CardView` widgets to the layout and configure them the same as
    the first with one exception. On the second `CardView`, set `cardElevation` to
    `22dp` and on the third `CardView`, set `cardElevation` to `42dp`. Change the
    `include` code to reference `card_contents_2` and `card_contents_3`, respectively.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局中添加另外两个`CardView`小部件，并将它们配置与第一个相同，只有一个例外。在第二个`CardView`上，将`cardElevation`设置为`22dp`，在第三个`CardView`上，将`cardElevation`设置为`42dp`。将`include`代码更改为分别引用`card_contents_2`和`card_contents_3`。
- en: Tip
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You could do this very quickly by copy and pasting the `CardView` XML and simply
    amending the elevation and the `include` code as mentioned in the previous paragraph.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过复制和粘贴`CardView` XML并简单地修改高程和`include`代码来快速完成这一步，就像前面段落中提到的那样。
- en: 'This is what the `CardView`-related code inside the `LinearLayout` code will
    look like when you are done:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成后，`LinearLayout`代码中的`CardView`相关代码如下所示：
- en: '[PRE16]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now we can run the app and see our three beautiful, elevated `CardView` widgets
    in action. In this next screenshot, I have captured it so that you can see the
    effect the elevation setting has on creating a very pleasing depth with shadow
    effect:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行应用程序，看到我们三个美丽的、凸起的`CardView`小部件在其中的效果。在下一个截图中，我已经捕捉到了它，这样您就可以看到提升设置对创建令人愉悦的深度和阴影效果的影响：
- en: '![Figure 5.13 – A pleasing depth with shadow effect'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13 - 令人愉悦的阴影效果'
- en: '](img/Figure_5.13_B16773.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.13_B16773.jpg)'
- en: Figure 5.13 – A pleasing depth with shadow effect
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 - 令人愉悦的深度和阴影效果
- en: Important Note
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The screenshot will likely be slightly unclear in the black and white printed
    version of this book. Be sure to build and run the app for yourself to see this
    cool effect.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 黑白打印版本的截图可能会稍微不清晰。请务必自行构建和运行应用程序，以查看这个酷炫的效果。
- en: Let's explore our latest app on a tablet emulator.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在平板电脑模拟器上探索我们的最新应用程序。
- en: Creating a tablet emulator
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建平板电脑模拟器
- en: We will often want to test our apps on multiple different devices. Fortunately,
    Android Studio makes it easy to create as many different emulators as we like.
    Follow these next steps to make a tablet emulator.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常希望在多个不同的设备上测试我们的应用程序。幸运的是，Android Studio可以轻松地创建任意数量的不同模拟器。按照以下步骤创建平板电脑模拟器。
- en: 'Select **Tools** | **AVD Manager** and then click the **Create Virtual Device…**
    button on the **Your Virtual Devices** window. You will see the **Select Hardware**
    window pictured next:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**工具** | **AVD管理器**，然后单击**创建虚拟设备...**按钮。您将看到下图所示的**选择硬件**窗口：
- en: '![Figure 5.14 – The Select Hardware window'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14 - 选择硬件窗口'
- en: '](img/Figure_5.14_B16773.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.14_B16773.jpg)'
- en: Figure 5.14 – The Select Hardware window
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 - 选择硬件窗口
- en: Select the **Tablet** option from the **Category** list, and then highlight
    the **Pixel C** tablet from the choice of available tablets.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 从**类别**列表中选择**平板电脑**选项，然后从可用平板电脑中选择**Pixel C**平板电脑。
- en: Tip
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you are reading this sometime in the future, the Pixel C option might have
    been updated. The choice of tablet is less important than practicing this process
    of creating a tablet emulator and then testing our apps.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是在将来的某个时候阅读本文，Pixel C选项可能已经更新。选择平板电脑的重要性不如练习创建平板电脑模拟器并测试我们的应用程序重要。
- en: Click the **Next** button. On the **System Image** window that follows, just
    click **Next** because this will select the default system image. It is possible
    that choosing your own image will cause the emulator not to work properly.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮。在随后的**系统镜像**窗口上，只需点击**下一步**，因为这将选择默认系统镜像。选择自己的镜像可能会导致模拟器无法正常工作。
- en: Finally, on the **Android Virtual Device** screen, you can leave all the default
    options. Feel free to change the **AVD Name** option for your emulator or the
    **Startup Orientation** (portrait or landscape) option if you want to. Click the
    **Finish** button when you are ready.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在**Android虚拟设备**屏幕上，您可以保留所有默认选项。如果需要，可以更改您的模拟器的**AVD名称**选项或**启动方向**（纵向或横向）选项。当您准备好时，点击**完成**按钮。
- en: 'Shut down the phone emulator if you have it running. Now, whenever you run
    one of your apps from Android Studio, you will be given the option to choose Pixel
    C (or whatever tablet you created). Here is a screenshot of my Pixel C emulator
    running the `CardView` app:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行手机模拟器，请将其关闭。现在，每当您从Android Studio运行您的应用程序时，您将有选择Pixel C（或您创建的任何平板电脑）的选项。这是我Pixel
    C模拟器运行`CardView`应用程序的屏幕截图：
- en: '![Figure 5.15 – Pixel C emulator running the CardView app'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15 - Pixel C模拟器运行CardView应用程序'
- en: '](img/Figure_5.15_B16773.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.15_B16773.jpg)'
- en: Figure 5.15 – Pixel C emulator running the CardView app
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 - Pixel C模拟器运行CardView应用程序
- en: Not too bad, but there is quite a large amount of wasted space and it looks
    a bit odd. Let's try it in landscape mode. If you try running the app with the
    tablet in landscape mode, the results are worse. What we can learn from this is
    that we are going to have to design our layouts for different-sized screens and
    different orientations. Sometimes they will be clever designs that scale to suit
    different sizes or orientations, but often they will be completely different designs
    in separate layout files.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 不算太糟，但浪费了相当多的空间，看起来有点奇怪。让我们尝试在横向模式下。如果您尝试在平板电脑横向模式下运行应用程序，结果会更糟。我们可以从中学到的是，我们将不得不为不同尺寸的屏幕和不同方向设计我们的布局。有时它们将是智能设计，可以根据不同的尺寸或方向进行调整，但通常它们将是完全不同的设计，存在于不同的布局文件中。
- en: Frequently asked question
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Do I need to master all this stuff about Material Design?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我需要精通关于Material Design的所有这些东西吗？
- en: No, not unless you want to be a professional designer. If you just want to make
    your own apps and sell them or give them away on the Play Store, then knowing
    just the basics is good enough.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 不，除非您想成为专业设计师。如果您只是想制作自己的应用程序并在Play商店上出售或赠送它们，那么只知道基础知识就足够了。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built aesthetically pleasing `CardView` layouts and put
    them in a `ScrollView` so the user can swipe through the contents of the layout
    a bit like browsing a web page. To finish the chapter off, we launched a tablet
    emulator and saw that we are going to need to get smart with how we design our
    layouts if we want to cater to different device sizes and orientations. In [*Chapter
    24*](B16773_24_ePub_RK.xhtml#_idTextAnchor411)*, Design Patterns, Multiple Layouts,
    and Fragments*, we will begin to take our layouts to the next level and learn
    how to cope with such a diverse array of devices using fragments.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了外观美观的`CardView`布局，并将它们放在`ScrollView`中，这样用户就可以通过滑动浏览布局的内容，有点像浏览网页。为了完成本章，我们启动了一个平板模拟器，并看到如果我们想要适应不同的设备尺寸和方向，我们需要在设计布局方面变得聪明起来。在[*第24章*](B16773_24_ePub_RK.xhtml#_idTextAnchor411)*，设计模式、多个布局和片段*中，我们将开始将我们的布局提升到下一个水平，并学习如何使用片段来处理如此多样的设备。
- en: Before we do, however, it will serve us well to learn more Java and how we can
    use it to control our UI and interact with the user. That will be the focus of
    the next seven chapters.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始之前，学习更多关于Java以及如何使用它来控制我们的UI和与用户交互将对我们有所帮助。这将是接下来七章的重点。
- en: Of course, the elephant in the room at this point is that despite learning a
    lot about layouts, project structure, the connection between Java and XML, and
    much more besides, our UIs, no matter how pretty, don't actually do anything!
    We need to seriously upgrade our Java skills while also learning more about how
    to apply them in an Android context. In the next chapter, we will do exactly that.
    We will see how to add Java code that executes at exactly the moment we need it
    to by working with the **Android Activity life cycle**.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，目前的悬而未决的问题是，尽管我们学到了很多关于布局、项目结构、Java和XML之间的连接以及其他许多知识，但是我们的UI，无论多么漂亮，实际上并没有做任何事情！我们需要认真提升我们的Java技能，同时学习如何在Android环境中应用它们。在下一章中，我们将做到这一点。我们将看到如何添加Java代码，以便在我们需要的时候精确执行，通过与**Android
    Activity生命周期**一起工作。
