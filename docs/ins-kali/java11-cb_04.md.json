["```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, int weightPounds, int horsePower);\n  enum DrivingCondition {\n    ROAD_CONDITION,\n    TIRE_CONDITION\n  }\n  enum RoadCondition {\n    //...\n  }\n  enum TireCondition {\n    //...\n  }\n}\n```", "```java\npublic interface Vehicle {\n  void setSpeedModel(SpeedModel speedModel);\n  default double getSpeedMph(double timeSec){ return -1; };\n  default int getWeightPounds(){ return -1; }\n  default int getWeightKg(){ \n    return convertPoundsToKg(getWeightPounds());\n  }\n  private int convertPoundsToKg(int pounds){\n    return (int) Math.round(0.454 * pounds);\n  }\n  static int convertKgToPounds(int kilograms){\n    return (int) Math.round(2.205 * kilograms);\n  }\n}\n```", "```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, int weightPounds, int horsePower);\n  boolean equals(Object obj);\n  String toString();\n}\n```", "```java\npublic interface Car extends Vehicle {\n   int getPassengersCount();\n}\n```", "```java\n@FunctionalInterface \npublic interface Car extends Vehicle {\n   int getPassengersCount();\n}\n```", "```java\n@FunctionalInterface\ninterface Runnable { void run(); }\n\n@FunctionalInterface\ninterface Callable<V> { V call() throws Exception; }\n```", "```java\n        @FunctionalInterface\n        public interface Function<T,R>\n```", "```java\n      Function<Integer, Double> ourFunc = \n          new Function<Integer, Double>() {\n              public Double apply(Integer i){\n                  return i * 10.0;\n              }\n          };\n```", "```java\n        System.out.println(ourFunc.apply(1));  //prints: 10\n```", "```java\n        Consumer<String> ourConsumer = new Consumer<String>() {\n          public void accept(String s) {\n            System.out.println(\"The \" + s + \" is consumed.\");\n          }\n        };\n```", "```java\n          ourConsumer.accept(\"Hello!\");  \n                        //prints: The Hello! is consumed.\n```", "```java\n        Supplier<String> ourSupplier = new Supplier<String>() {\n          public String get() {\n            String res = \"Success\";\n            //Do something and return result\u2014Success or Error.\n            return res;\n          }\n        };\n```", "```java\n        System.out.println(ourSupplier.get());   //prints: Success\n```", "```java\n        Predicate<Double> ourPredicate = new Predicate<Double>() {\n          public boolean test(Double num) {\n            System.out.println(\"Test if \" + num + \n                               \" is smaller than 20\");\n            return num < 20;\n          }\n        };\n```", "```java\n        System.out.println(ourPredicate.test(10.0) ? \n                           \"10 is smaller\" : \"10 is bigger\");\n```", "```java\n        IntFunction<String> iFunc = new IntFunction<String>() {\n          public String apply(int i) {\n            return String.valueOf(i * 10);\n          }\n        };\n        System.out.println(iFunc.apply(1));    //prints: 10\n```", "```java\n        BiFunction<String, Integer, Double> biFunc = \n                         new BiFunction<String, Integer, Double >() {\n           public Double apply(String s, Integer i) {\n             return (s.length() * 10d) / i;\n           }\n        };\n        System.out.println(biFunc.apply(\"abc\", 2)); //prints: 15.0\n\n```", "```java\n       BinaryOperator<Integer> function = new BinaryOperator<Integer>(){\n           public Integer apply(Integer i, Integer j) {\n             return i >= j ? i : j;\n           }\n       };\n        System.out.println(binfunc.apply(1, 2));     //prints: 2\n\n```", "```java\n        IntBinaryOperator intBiFunc = new IntBinaryOperator(){\n            public int applyAsInt(int i, int j) {\n                return i >= j ? i : j;\n            }\n        };\n        System.out.println(intBiFunc.applyAsInt(1, 2)); //prints: 2\n```", "```java\nvoid calculate(Supplier<Integer> source, \n  Function<Integer, Double> process, Predicate<Double> condition,\n              Consumer<Double> success, Consumer<Double> failure){\n    int i = source.get();\n    double res = process.apply(i);\n    if(condition.test(res)){\n        success.accept(res);\n    } else {\n        failure.accept(res);\n    }\n}\n```", "```java\nSupplier<Integer> source = new Supplier<Integer>() {\n    public Integer get() {\n        Integer res = 42;\n        //Do something and return result value\n        return res;\n    }\n};\n\n```", "```java\nFunction<Integer, Double> process = new Function<Integer, Double>(){\n    public Double apply(Integer i){\n        return i * 10.0;\n    }\n};\nPredicate<Double> condition = new Predicate<Double>() {\n    public boolean test(Double num) {\n        System.out.println(\"Test if \" + num + \n                                    \" is smaller than \" + 20);\n        return num < 20;\n    }\n}; \n```", "```java\nConsumer<Double> success = new Consumer<Double>() {\n    public void accept(Double d) {\n        System.out.println(\"Success: \" + d);\n    }\n};\nConsumer<Double> failure = new Consumer<Double>() {\n    public void accept(Double d) {\n        System.out.println(\"Failure: \" + d);\n    }\n};\n\n```", "```java\ncalculate(source, process, condition, success, failure);\n\n```", "```java\nTest if 420.0 is smaller than 20.0\nFailure: 420.0\n```", "```java\nvoid testSourceAndCondition(int src, double condition) {\n    Supplier<Integer> source = new Supplier<Integer>() {\n        public Integer get() {\n            Integer res = src;\n            //Do something and return result value\n            return res;\n        }\n    };\n    Function<Integer, Double> process = \n      new Function<Integer, Double>() {\n         public Double apply(Integer i){\n            return i * 10.0;\n         }\n      };\n    Predicate<Double> condition = new Predicate<Double>() {\n        public boolean test(Double num) {\n            System.out.println(\"Test if \" + num + \n                                \" is smaller than \" + limit);\n            return num < limit;\n        }\n    };\n    Consumer<Double> success = new Consumer<Double>() {\n        public void accept(Double d) {\n            System.out.println(\"Success: \" + d);\n        }\n    };\n    Consumer<Double> failure = new Consumer<Double>() {\n        public void accept(Double d) {\n            System.out.println(\"Failure: \" + d);\n        }\n    };\n    calculate(source, process, cond, success, failure);\n}\n```", "```java\ntestSourceAndCondition(10, 20);\ntestSourceAndCondition(1, 20);\ntestSourceAndCondition(10, 200);\n\n```", "```java\nTest if 100.0 is smaller than 20.0\nFailure: 100.0\nTest if 10.0 is smaller than 20.0\nSuccess: 10.0\nTest if 100.0 is smaller than 200.0\nSuccess: 100.0\n```", "```java\nFunction<Integer, Double> before = new Function<Integer, Double>(){\n    public Double apply(Integer i){\n        return i * 10.0;\n    }\n};\nFunction<Double, Double> after = new Function<Double, Double>(){\n    public Double apply(Double d){\n        return d + 10.0;\n    }\n};\nFunction<Integer, Double> process = before.andThen(after);\n```", "```java\nTest if 430.0 is smaller than 20\nFailure: 430.0\n```", "```java\nFunction<T,R> before = ...\nFunction<R,V> after = ...\nFunction<T,V> result = before.andThen(after);\n```", "```java\nFunction<Integer, Double> process = after.compose(before);\n```", "```java\nFunction<Integer, Integer> id = Function.identity();\nSystem.out.println(id.apply(4));  //prints: 4\n```", "```java\n@FunctionalInterface\ninterface A{\n    void m1();\n}\n\n@FunctionalInterface\ninterface B extends A{\n    default void m2(){};\n}\n\n//@FunctionalInterface\ninterface C extends B{\n    void m3();\n}\n```", "```java\n@FunctionalInterface\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, int weightPounds, int horsePower);\n}\n```", "```java\npublic interface Vehicle {\n    void setSpeedModel(SpeedModel speedModel);\n    double getSpeedMph(double timeSec);\n}\n```", "```java\npublic class VehicleImpl implements Vehicle {\n    private SpeedModel speedModel;\n    private int weightPounds, hoursePower;\n    public VehicleImpl(int weightPounds, int hoursePower){\n        this.weightPounds = weightPounds;\n        this.hoursePower = hoursePower;\n    }\n    public void setSpeedModel(SpeedModel speedModel){\n        this.speedModel = speedModel;\n    }\n    public double getSpeedMph(double timeSec){\n        return this.speedModel.getSpeedMph(timeSec, \n                                 this.weightPounds, this.hoursePower);\n    };\n}\n```", "```java\npublic class SpeedModelImpl implements SpeedModel {\n   public double getSpeedMph(double timeSec, \n                       int weightPounds, int horsePower){\n      double v = 2.0 * horsePower * 746 * \n                       timeSec * 32.17 / weightPounds;\n      return (double) Math.round(Math.sqrt(v) * 0.68);\n   }\n}\n```", "```java\nVehicle vehicle = new VehicleImpl(3000, 200);\nSpeedModel speedModel = new SpeedModelImpl();\nvehicle.setSpeedModel(speedModel);\nSystem.out.println(vehicle.getSpeedMph(10.)); //prints: 122.0\n\n```", "```java\nVehicle vehicle = new VehicleImpl(3000, 200);\nSpeedModel speedModel = new SpeedModel(){\n   public double getSpeedMph(double timeSec, \n                       int weightPounds, int horsePower){\n      double v = 2.0 * horsePower * 746 * \n                       timeSec * 32.17 / weightPounds;\n      return (double) Math.round(Math.sqrt(v) * 0.68);\n   }\n};\nvehicle.setSpeedModel(speedModel);\nSystem.out.println(vehicle.getSpeedMph(10.)); //prints: 122.0\n```", "```java\n//@FunctionalInterface\npublic interface SpeedModel {\n    double getSpeedMph(double timeSec, \n                    int weightPounds, int horsePower);\n    void m1();\n}\nVehicle vehicle = new VehicleImpl(3000, 200);\nSpeedModel speedModel = new SpeedModel(){\n   public double getSpeedMph(double timeSec, \n                     int weightPounds, int horsePower){\n      double v = 2.0 * horsePower * 746 * \n                       timeSec * 32.17 / weightPounds;\n      return (double) Math.round(Math.sqrt(v) * 0.68);\n   }\n   public void m1(){}\n   public void m2(){}\n};\nvehicle.setSpeedModel(speedModel);\nSystem.out.println(vehicle.getSpeedMph(10.)); //prints: 122.0\n```", "```java\nVehicle vehicle = new VehicleImpl(3000, 200);\nSpeedModel speedModel =  (t, wp, hp) -> {\n    double v = 2.0 * hp * 746 * t * 32.17 / wp;\n    return (double) Math.round(Math.sqrt(v) * 0.68);\n};\nvehicle.setSpeedModel(speedModel);\nSystem.out.println(vehicle.getSpeedMph(10.)); //prints: 122.0\n\n```", "```java\n@FunctionalInterface\ninterface Func<T1,T2,T3,R>{ \n   R apply(T1 t1, T2 t2, T3 t3);\n}\n```", "```java\nFunc<Double, Integer, Integer, Double> speedModel = (t, wp, hp) -> {\n    double v = 2.0 * hp * 746 * t * 32.17 / wp;\n    return (double) Math.round(Math.sqrt(v) * 0.68);\n};\n\n```", "```java\ninterface Vehicle {\n   void setSpeedModel(Func<Double, Integer, Integer, \n                                         Double> speedModel);\n   double getSpeedMph(double timeSec);\n}\nclass VehicleImpl  implements Vehicle {\n   private Func<Double, Integer, Integer, Double> speedModel;\n   private int weightPounds, hoursePower;\n   public VehicleImpl(int weightPounds, int hoursePower){\n       this.weightPounds = weightPounds;\n       this.hoursePower = hoursePower;\n   }\n   public void setSpeedModel(Func<Double, Integer, \n                               Integer, Double> speedModel){\n       this.speedModel = speedModel;\n   }\n   public double getSpeedMph(double timeSec){\n       return this.speedModel.apply(timeSec, \n                             weightPounds, hoursePower);\n   };\n}\n```", "```java\n@FunctionalInterface\ninterface FourParamFunction<T1,T2,T3,R>{\n     R caclulate(T1 t1, T2 t2, T3 t3);\n}\n```", "```java\n() -> 33;\n```", "```java\ni -> i++;\n```", "```java\n(a, b) -> a + b;\n```", "```java\n(a, b) -> a == b;\n```", "```java\n(a, b) -> { \n     double c = a +  Math.sqrt(b); \n     System.out.println(\"Result: \" + c);\n}\n```", "```java\n(a, b) -> { \n     double c = a +  Math.sqrt(b); \n     return c > 10.0 ? \"Success\" : \"Failure\";\n}\n```", "```java\nA a = (a, b) -> { \n     double c = a +  Math.sqrt(b); \n     return c > 10.0 ? \"Success\" : \"Failure\";\n}\nm2(a);\n```", "```java\npublic String m1(double x, double y){\n     double c = a +  Math.sqrt(b); \n     return c > 10.0 ? \"Success\" : \"Failure\";\n}\n```", "```java\ndouble v = 10d;\nFunction<Integer, Double> multiplyBy10 = i -> i * v;\n```", "```java\ndouble v = 10d;\nv = 30d; //Causes compiler error\nFunction<Integer, Double> multiplyBy10 = i -> i * v;\n```", "```java\ndouble v = 10d;\nFunction<Integer, Double> multiplyBy10 = i -> {\n  v = 30d; //Causes compiler error\n  return i * v;\n};\n\n```", "```java\nclass Demo{\n    private String prop = \"DemoProperty\";\n    public void method(){\n        Consumer<String> consumer = s -> {\n            System.out.println(\"Lambda accept(\" + s \n                                      + \"): this.prop=\" + this.prop);\n        };\n        consumer.accept(this.prop);\n        consumer = new Consumer<>() {\n            private String prop = \"ConsumerProperty\";\n            public void accept(String s) {\n                System.out.println(\"Anonymous accept(\" + s \n                                      + \"): this.prop=\" + this.prop);\n            }\n        };\n        consumer.accept(this.prop);\n    }\n}\n```", "```java\n  Demo d = new Demo();\n  d.method();\n```", "```java\nFunction<Integer, Double> ourFunc = new Function<Integer, Double>(){\n    public Double apply(Integer i){\n        return i * 10.0;\n    }\n};\nSystem.out.println(ourFunc.apply(1));       //prints: 10.0\nConsumer<String> consumer = new Consumer<String>() {\n    public void accept(String s) {\n        System.out.println(\"The \" + s + \" is consumed.\");\n    }\n};\nconsumer.accept(\"Hello!\"); //prints: The Hello! is consumed.\nSupplier<String> supplier = new Supplier<String>() {\n    public String get() {\n        String res = \"Success\";\n        //Do something and return result\u2014Success or Error.\n        return res;\n    }\n};\nSystem.out.println(supplier.get());      //prints: Success\nPredicate<Double> pred = new Predicate<Double>() {\n    public boolean test(Double num) {\n       System.out.println(\"Test if \" + num + \" is smaller than 20\");\n       return num < 20;\n    }\n};\nSystem.out.println(pred.test(10.0)? \"10 is smaller\":\"10 is bigger\");\n                           //prints: Test if 10.0 is smaller than 20\n                           //        10 is smaller\n\n```", "```java\nFunction<Integer, Double> ourFunc = i -> i * 10.0;\nSystem.out.println(ourFunc.apply(1)); //prints: 10.0\n\nConsumer<String> consumer = \n            s -> System.out.println(\"The \" + s + \" is consumed.\");\nconsumer.accept(\"Hello!\");       //prints: The Hello! is consumed.\n\nSupplier<String> supplier = () - > {\n        String res = \"Success\";\n        //Do something and return result\u2014Success or Error.\n        return res;\n    };\nSystem.out.println(supplier.get());  //prints: Success\n\nPredicate<Double> pred = num -> {\n   System.out.println(\"Test if \" + num + \" is smaller than 20\");\n   return num < 20;\n};\nSystem.out.println(pred.test(10.0)? \"10 is smaller\":\"10 is bigger\");\n                          //prints: Test if 10.0 is smaller than 20\n                          //        10 is smaller\n```", "```java\nIntFunction<String> ifunc = new IntFunction<String>() {\n    public String apply(int i) {\n        return String.valueOf(i * 10);\n    }\n};\nSystem.out.println(ifunc.apply(1));   //prints: 10\nBiFunction<String, Integer, Double> bifunc =\n        new BiFunction<String, Integer, Double >() {\n            public Double apply(String s, Integer i) {\n                return (s.length() * 10d) / i;\n            }\n        };\n\nSystem.out.println(bifunc.apply(\"abc\",2));     //prints: 15.0\nBinaryOperator<Integer> binfunc = new BinaryOperator<Integer>(){\n    public Integer apply(Integer i, Integer j) {\n        return i >= j ? i : j;\n    }\n};\nSystem.out.println(binfunc.apply(1,2));  //prints: 2\nIntBinaryOperator intBiFunc = new IntBinaryOperator(){\n    public int applyAsInt(int i, int j) {\n        return i >= j ? i : j;\n    }\n};\nSystem.out.println(intBiFunc.applyAsInt(1,2)); //prints: 2\n\n```", "```java\nIntFunction<String> ifunc = i -> String.valueOf(i * 10);\nSystem.out.println(ifunc.apply(1));             //prints: 10\n\nBiFunction<String, Integer, Double> bifunc = \n                            (s,i) -> (s.length() * 10d) / i;\nSystem.out.println(bifunc.apply(\"abc\",2));      //prints: 15.0\n\nBinaryOperator<Integer> binfunc = (i,j) -> i >= j ? i : j;\nSystem.out.println(binfunc.apply(1,2));         //prints: 2\n\nIntBinaryOperator intBiFunc = (i,j) -> i >= j ? i : j;\nSystem.out.println(intBiFunc.applyAsInt(1,2));  //prints: 2\n```", "```java\nvoid calculate(){\n    int i = 42;        //get a number from some source\n    double res = 42.0; //process the above number \n    if(res < 42){ //check the result using some criteria\n        //do something\n    } else {\n        //do something else\n    }\n}\n```", "```java\nint getInput(){\n   int result;\n   //getting value for result variable here\n   return result;\n}\ndouble process(int i){\n    double result;\n    //process input i and assign value to result variable\n}\nboolean checkResult(double res){\n    boolean result = false;\n    //use some criteria to validate res value\n    //and assign value to result\n    return result;\n}\nvoid processSuccess(double res){\n     //do something with res value\n}\nvoid processFailure(double res){\n     //do something else with res value\n}\nvoid calculate(){\n    int i = getInput();\n    double res = process(i); \n    if(checkResult(res)){     \n        processSuccess(res);\n    } else {\n        processFailure(res);\n    }\n}\n```", "```java\nvoid calculate(){\n    SomeClass1 sc1 = new SomeClass1();\n    int i = sc1.getInput();\n    SomeClass2 sc2 = new SomeClass2();\n    double res = sc2.process(i); \n    SomeClass3 sc3 = new SomeClass3();\n    SomeClass4 sc4 = new SomeClass4();\n    if(sc3.checkResult(res)){     \n        sc4.processSuccess(res);\n    } else {\n        sc4.processFailure(res);\n    }\n}\n```", "```java\nvoid calculate(Supplier<Integer> souc e, Function<Integer,\n             Double> process, Predicate<Double> condition,\n      Consumer<Double> success, Consumer<Double> failure){\n    int i = source.get();\n    double res = process.apply(i);\n    if(condition.test(res)){\n        success.accept(res);\n    } else {\n        failure.accept(res);\n    }\n} \n```", "```java\nSupplier<Integer> source = () -> 4;\nFunction<Integer, Double> before = i -> i * 10.0;\nFunction<Double, Double> after = d -> d + 10.0;\nFunction<Integer, Double> process = before.andThen(after);\nPredicate<Double> condition = num -> num < 100;\nConsumer<Double> success = \n                  d -> System.out.println(\"Success: \"+ d);\nConsumer<Double> failure = \n                  d -> System.out.println(\"Failure: \"+ d);\ncalculate(source, process, condition, success, failure);\n```", "```java\nSuccess: 50.0\n```", "```java\npublic class Demo {\n  Supplier<Integer> source(){ return () -> 4;}\n  Function<Double, Double> after(){ return d -> d + 10.0; }\n  Function<Integer, Double> before(){return i -> i * 10.0; }\n  Function<Integer, Double> process(){return before().andThen(after());}\n  Predicate<Double> condition(){ return num -> num < 100.; }\n  Consumer<Double> success(){ \n     return d -> System.out.println(\"Failure: \" + d); }\n  Consumer<Double> failure(){ \n     return d-> System.out.println(\"Failure: \" + d); }\n  void calculate(Supplier<Integer> souce, Function<Integer,\n              Double> process, Predicate<Double> condition,\n       Consumer<Double> success, Consumer<Double> failure){\n    int i = source.get();\n    double res = process.apply(i);\n    if(condition.test(res)){\n        success.accept(res);\n    } else {\n        failure.accept(res);\n    }\n}\nvoid someOtherMethod() {\n   calculate(source(), process(), \n                       condition(), success(), failure());\n}\n```", "```java\npublic class DemoTest {\n\n    @Test\n    public void source() {\n        int i = new Demo().source().get();\n        assertEquals(4, i);\n    }\n    @Test\n    public void after() {\n        double d = new Demo().after().apply(1.);\n        assertEquals(11., d, 0.01);\n    }\n    @Test\n    public void before() {\n        double d = new Demo().before().apply(10);\n        assertEquals(100., d, 0.01);\n    }\n    @Test\n    public void process() {\n        double d = new Demo().process().apply(1);\n        assertEquals(20., d, 0.01);\n    }\n    @Test\n    public void condition() {\n        boolean b = new Demo().condition().test(10.);\n        assertTrue(b);\n    }\n}\n```", "```java\nConsumer<Double> success = d -> System.out.println(\"Success: \" + d);\nConsumer<Double> failure = d-> System.out.println(\"Failure: \" + d);\ncalculate(() -> 4, i -> i * 10.0 + 10, n -> n < 100, success, failure);\n```", "```java\nclass Food{\n    public static String getFavorite(){ return \"Donut!\"; }\n    public static String getFavorite(int num){\n        return num > 1 ? String.valueOf(num) + \" donuts!\" : \"Donut!\";\n    }\n}\n```", "```java\nSupplier<String> supplier = () -> Food.getFavorite();\n```", "```java\nSupplier<String> supplier = Food::getFavorite;\n```", "```java\nFunction<Integer, String> func = i -> Food.getFavorite(i); \n```", "```java\nFunction<Integer, String> func = Food::getFavorite; \n```", "```java\nSupplier<String> supplier = Food::getFavorite;\nSystem.out.println(\"supplier.get() => \" + supplier.get());\n\nFunction<Integer, String> func = Food::getFavorite;\nSystem.out.println(\"func.getFavorite(1) => \" + func.apply(1));\nSystem.out.println(\"func.getFavorite(2) => \" + func.apply(2));\n```", "```java\nclass Food{\n     private String name;\n     public Food(){ this.name = \"Donut\"; }\n     public Food(String name){ this.name = name; }\n     public static String getFavorite(){ return \"Donut!\"; }\n     public static String getFavorite(int num){\n         return num > 1 ? String.valueOf(num) + \" donuts!\" : \"Donut!\";\n     }\n     public String sayFavorite(){\n         return this.name + (this.name.toLowerCase()\n                             .contains(\"donut\")?\"? Yes!\" : \"? D'oh!\");\n     }\n     public String sayFavorite(String name){\n         this.name = this.name + \" and \" + name;\n         return sayFavorite();\n     }\n}\n```", "```java\nFood food1 = new Food();\nFood food2 = new Food(\"Carrot\");\nFood food3 = new Food(\"Carrot and Broccoli\");\n```", "```java\nSupplier<String> supplier1 = () -> food1.sayFavorite();\nSupplier<String> supplier2 = () -> food2.sayFavorite();\nSupplier<String> supplier3 = () -> food3.sayFavorite();\n```", "```java\nSupplier<String> supplier1 = food1::sayFavorite;\nSupplier<String> supplier2 = food2::sayFavorite;\nSupplier<String> supplier3 = food3::sayFavorite;\n```", "```java\nSystem.out.println(\"new Food().sayFavorite() => \" + supplier1.get());\nSystem.out.println(\"new Food(Carrot).sayFavorite() => \" \n                                                  + supplier2.get());\nSystem.out.println(\"new Food(Carrot,Broccoli).sayFavorite() => \" \n                                                  + supplier3.get());\n```", "```java\nUnaryOperator<String> op1 = s -> food1.sayFavorite(s);\nUnaryOperator<String> op2 = s -> food2.sayFavorite(s);\nUnaryOperator<String> op3 = s -> food3.sayFavorite(s);\n\n```", "```java\nUnaryOperator<String> op1 = food1::sayFavorite;\nUnaryOperator<String> op2 = food2::sayFavorite;\nUnaryOperator<String> op3 = food3::sayFavorite;\n```", "```java\nSystem.out.println(\"new Food()\n       .sayFavorite(Carrot) => \" + op1.apply(\"Carrot\"));\nSystem.out.println(\"new Food(Carrot)\n   .sayFavorite(Broccoli) => \" + op2.apply(\"Broccoli\"));\nSystem.out.println(\"new Food(Carrot, Broccoli)\n       .sayFavorite(Donuts) => \" + op3.apply(\"Donuts\"));\n```", "```java\nFunction<Food, String> func = f -> f.sayFavorite();\n\n```", "```java\nFunction<Food, String> func = Food::sayFavorite;\n```", "```java\nSystem.out.println(\"new Food()\n              .sayFavorite() => \" + func.apply(food1));\nSystem.out.println(\"new Food(Carrot)\n              .sayFavorite() => \" + func.apply(food2));\nSystem.out.println(\"new Food(Carrot, Broccoli)\n              .sayFavorite() => \" + func.apply(food3));\n```", "```java\nBiFunction<Food, String, String> func = (f,s) -> f.sayFavorite(s);\n```", "```java\nBiFunction<Food, String, String> func = Food::sayFavorite;\n\n```", "```java\nSystem.out.println(\"new Food()\n  .sayFavorite(Carrot) => \" + func.apply(food1, \"Carrot\"));\nSystem.out.println(\"new Food(Carrot)\n  .sayFavorite(Broccoli) => \" \n                         + func2.apply(food2, \"Broccoli\"));\nSystem.out.println(\"new Food(Carrot,Broccoli)\n  .sayFavorite(Donuts) => \" + func2.apply(food3,\"Donuts\"));\n\n```", "```java\nSupplier<Food> foodSupplier = () -> new Food();\n\n```", "```java\nSupplier<Food> foodSupplier = Food::new;\nSystem.out.println(\"new Food()\n  .sayFavorite() => \" + foodSupplier.get().sayFavorite());\n```", "```java\npublic Food(String name){ \n     this.name = name; \n} \n```", "```java\nFunction<String, Food> createFood = Food::new;\nFood food = createFood.apply(\"Donuts\");\nSystem.out.println(\"new Food(Donuts).sayFavorite() => \" \n                                   + food.sayFavorite());\nfood = createFood.apply(\"Carrot\");\nSystem.out.println(\"new Food(Carrot).sayFavorite() => \" \n                                   + food.sayFavorite());\n```", "```java\npublic Food(String name, String anotherName) {\n     this.name = name + \" and \" + anotherName;\n}\n```", "```java\nBiFunction<String, String, Food> createFood = Food::new;\nFood food = createFood.apply(\"Donuts\", \"Carrots\");\nSystem.out.println(\"new Food(Donuts, Carrot)\n        .sayFavorite() => \" + food.sayFavorite());\nfood = constrFood2.apply(\"Carrot\", \"Broccoli\");\nSystem.out.println(\"new Food(Carrot, Broccoli)\n          .sayFavorite() => \" food.sayFavorite());\n```", "```java\n        @FunctionalInterface\n        interface Func<T1,T2,T3,R>{ R apply(T1 t1, T2 t2, T3 t3);}\n```", "```java\nclass AClass{\n    public AClass(int i, double d, String s){ }\n    public String get(int i, double d){ return \"\"; }\n    public String get(int i, double d, String s){ return \"\"; }\n}\n```", "```java\nFunc<Integer, Double, String, AClass> func1 = AClass::new;\nAClass obj = func1.apply(1, 2d, \"abc\");\n\nFunc<Integer, Double, String, String> func2 = obj::get;    //bound\nString res1 = func2.apply(42, 42., \"42\");\n\nFunc<AClass, Integer, Double, String> func3 = AClass::get; //unbound\nString res21 = func3.apply(obj, 42, 42.);\n\nfunc1\u00a0function that allows us to create an object of class\u00a0AClass. The\u00a0func2\u00a0function applies to the resulting object obj the method\u00a0String get(int i, double d)\u00a0using the bound method reference because its call receiver (object obj) comes from a particular context (bound to it). By contrast, the\u00a0func3\u00a0function is implemented as an unbound method reference because it gets its call receiver (class AClass) not from a context.\u00a0\n```", "```java\nFunction<String, Integer> strLength = String::length;\nSystem.out.println(strLength.apply(\"3\"));  //prints: 1\n\nFunction<String, Integer> parseInt = Integer::parseInt;\nSystem.out.println(parseInt.apply(\"3\"));    //prints: 3\n\nConsumer<String> consumer = System.out::println;\nconsumer.accept(\"Hello!\");             //prints: Hello!\n```", "```java\nFunction<Integer, String[]> createArray = String[]::new;\nString[] arr = createArray.apply(3);\nSystem.out.println(\"Array length=\" + arr.length); \n\nint i = 0;\nfor(String s: arr){ arr[i++] = String.valueOf(i); }\nFunction<String[], List<String>> toList = Arrays::<String>asList;\nList<String> l = toList.apply(arr);\nSystem.out.println(\"List size=\" + l.size());\nfor(String s: l){ System.out.println(s); }\n```", "```java\npublic interface TrafficUnit {\n  VehicleType getVehicleType();\n  int getHorsePower();\n  int getWeightPounds();\n  int getPayloadPounds();\n  int getPassengersCount();\n  double getSpeedLimitMph();\n  double getTraction();\n  RoadCondition getRoadCondition();\n  TireCondition getTireCondition();\n  int getTemperature();\n} \n```", "```java\nenum VehicleType { \n  CAR(\"Car\"), TRUCK(\"Truck\"), CAB_CREW(\"CabCrew\");\n  private String type;\n  VehicleType(String type){ this.type = type; }\n  public String getType(){ return this.type;}\n}\nenum RoadCondition {\n  DRY(1.0), \n  WET(0.2) { public double getTraction() { \n    return temperature > 60 ? 0.4 : 0.2; } }, \n  SNOW(0.04);\n  public static int temperature;\n  private double traction;\n  RoadCondition(double traction){ this.traction = traction; }\n  public double getTraction(){return this.traction;}\n}\nenum TireCondition {\n  NEW(1.0), WORN(0.2);\n  private double traction;\n  TireCondition(double traction){ this.traction = traction; }\n  public double getTraction(){ return this.traction;}\n}\n\n```", "```java\nTrafficUnit getOneUnit(Month month, DayOfWeek dayOfWeek, \n                       int hour, String country, String city, \n                       String trafficLight);\nList<TrafficUnit> generateTraffic(int trafficUnitsNumber, \n                  Month month, DayOfWeek dayOfWeek, int hour,\n                  String country, String city, String trafficLight);\n```", "```java\nTrafficUnit trafficUnit = FactoryTraffic.getOneUnit(Month.APRIL, \n               DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\n```", "```java\nList<TrafficUnit> trafficUnits = \n    FactoryTrafficModel.generateTraffic(20, Month.APRIL, \n        DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\n```", "```java\ndouble timeSec = 10.0;\nTrafficUnit trafficUnit = FactoryTraffic.getOneUnit(Month.APRIL, \n              DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\nVehicle vehicle = FactoryVehicle.build(trafficUnit);\nSpeedModel speedModel =  \n               FactorySpeedModel.generateSpeedModel(trafficUnit);\nvehicle.setSpeedModel(speedModel);\nprintResult(trafficUnit, timeSec, vehicle.getSpeedMph(timeSec));\n```", "```java\nvoid printResult(TrafficUnit tu, double timeSec, double speedMph){\n   System.out.println(\"Road \" + tu.getRoadCondition()\n                 + \", tires \" + tu.getTireCondition() + \": \" \n                              + tu.getVehicleType().getType() \n                              + \" speedMph (\" + timeSec + \" sec)=\" \n                                              + speedMph + \" mph\");\n}\n```", "```java\ndouble weightPower = 2.0 * horsePower * 746 * 32.174 / weightPounds;\ndouble speed = (double) Math.round(Math.sqrt(timeSec * weightPower) \n                                                 * 0.68 * traction);\n```", "```java\npublic double getTraction() {\n  double rt = getRoadCondition().getTraction();\n  double tt = getTireCondition().getTraction();\n  return rt * tt;\n}\n```", "```java\npublic interface Traffic {\n   void speedAfterStart(double timeSec, int trafficUnitsNumber);\n}  \n```", "```java\npublic class TrafficImpl implements Traffic {\n   private int hour;\n   private Month month;\n   private DayOfWeek dayOfWeek;\n   private String country, city, trafficLight;\n   public TrafficImpl(Month month, DayOfWeek dayOfWeek, int hour, \n                String country, String city, String trafficLight){\n      this.hour = hour;\n      this.city = city;\n      this.month = month;\n      this.country = country;\n      this.dayOfWeek = dayOfWeek;\n      this.trafficLight = trafficLight;\n   }\n   public void speedAfterStart(double timeSec, \n                                      int trafficUnitsNumber){\n      List<TrafficUnit> trafficUnits = \n        FactoryTraffic.generateTraffic(trafficUnitsNumber, \n          month, dayOfWeek, hour, country, city, trafficLight);\n      for(TrafficUnit tu: trafficUnits){\n         Vehicle vehicle = FactoryVehicle.build(tu);\n         SpeedModel speedModel = \n                      FactorySpeedModel.generateSpeedModel(tu);\n         vehicle.setSpeedModel(speedModel);\n         double speed = vehicle.getSpeedMph(timeSec);\n         printResult(tu, timeSec, speed);\n      }\n   }\n}\n```", "```java\nTraffic traffic = new TrafficImpl(Month.APRIL, \n  DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\ntraffic.speedAfterStart(timeSec, trafficUnitsNumber); \n```", "```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, \n           int weightPounds, int horsePower);\n}\n```", "```java\npublic interface Traffic {\n  void speedAfterStart(double timeSec, \n                       int trafficUnitsNumber);\n  void speedAfterStart(double timeSec, \n    int trafficUnitsNumber, SpeedModel speedModel);\n}\n```", "```java\ndouble getSpeedMph(double timeSec, int weightPounds, \n                                           int horsePower) {\n    double traction = trafficUnit.getTraction();\n    double v = 2.0 * horsePower * 746 * timeSec * \n                                    32.174 / weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68 * traction);\n}\n```", "```java\npublic void speedAfterStart(double timeSec, \n           int trafficUnitsNumber, SpeedModel speedModel) {\n   List<TrafficUnit> trafficUnits = \n     FactoryTraffic.generateTraffic(trafficUnitsNumber, \n       month, dayOfWeek, hour, country, city, trafficLight);\n   for(TrafficUnit tu: trafficUnits){\n       Vehicle vehicle = FactoryVehicle.build(tu);\n       vehicle.setSpeedModel(speedModel);\n       double speed = vehicle.getSpeedMph(timeSec);\n       speed = (double) Math.round(speed * tu.getTraction());\n       printResult(tu, timeSec, speed);\n   }\n}\n```", "```java\nTraffic traffic = new TrafficImpl(Month.APRIL, \n     DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\nSpeedModel speedModel = (t, wp, hp) -> {\n   double weightPower = 2.0 * hp * 746 * 32.174 / wp;\n   return (double) Math\n              .round(Math.sqrt(t * weightPower) * 0.68);\n};\ntraffic.speedAfterStart(timeSec, trafficUnitsNumber, \n                                            speedModel);\n```", "```java\nvoid speedAfterStartCarEngine(double timeSec, \n              int trafficUnitsNumber, int horsePower);\nvoid speedAfterStartCarTruckOnly(double timeSec, \n                              int trafficUnitsNumber);\nvoid speedAfterStartEngine(double timeSec, \n         int trafficUnitsNumber, int carHorsePower, \n                                 int truckHorsePower);\n```", "```java\nvoid speedAfterStart(double timeSec, int trafficUnitsNumber,\n  SpeedModel speedModel, Predicate<TrafficUnit> limitTraffic);\n```", "```java\npublic void speedAfterStart(double timeSec, \n          int trafficUnitsNumber, SpeedModel speedModel, \n                    Predicate<TrafficUnit> limitTraffic) {\n  List<TrafficUnit> trafficUnits = \n    FactoryTraffic.generateTraffic(trafficUnitsNumber, \n    month, dayOfWeek, hour, country, city, trafficLight);\n  for(TrafficUnit tu: trafficUnits){\n      if(limitTraffic.test(tu){\n         Vehicle vehicle = FactoryVehicle.build(tu);\n         vehicle.setSpeedModel(speedModel);\n         double speed = vehicle.getSpeedMph(timeSec);\n         speed = (double) Math.round(speed * \n                                   tu.getTraction());\n         printResult(tu, timeSec, speed);\n      }\n    }\n}\n```", "```java\nPredicate<TrafficUnit> limit = tu ->\n  (tu.getHorsePower() < 250 \n      && tu.getVehicleType() == VehicleType.CAR) || \n  (tu.getHorsePower() < 400 \n      && tu.getVehicleType() == VehicleType.TRUCK);\ntraffic.speedAfterStart(timeSec, \n            trafficUnitsNumber, speedModel, limit);\n```", "```java\nPredicate<TrafficUnit> limitTraffic = \n tu -> tu.getTemperature() > 65 \n && tu.getTireCondition() == TireCondition.NEW \n && tu.getRoadCondition() == RoadCondition.WET;\n```", "```java\ntraffic.speedAfterStart(timeSec, trafficUnitsNumber, \n                              speedModel, tu -> true);\n```", "```java\npublic void speedAfterStart(double timeSec,  \n           int trafficUnitsNumber, SpeedModel speedModel,\n             BiPredicate<TrafficUnit, Double> limitSpeed){\n   List<TrafficUnit> trafficUnits = \n     FactoryTraffic.generateTraffic(trafficUnitsNumber, \n     month, dayOfWeek, hour, country, city, trafficLight);\n   for(TrafficUnit tu: trafficUnits){\n      Vehicle vehicle = FactoryVehicle.build(tu);\n      vehicle.setSpeedModel(speedModel);\n      double speed = vehicle.getSpeedMph(timeSec);\n      speed = (double) Math.round(speed*tu.getTraction());\n      if(limitSpeed.test(tu, speed)){\n           printResult(tu, timeSec, speed);\n      }\n   }\n}\n```", "```java\nBiPredicate<TrafficUnit, Double> limit = (tu, sp) ->\n   (sp > (tu.getSpeedLimitMph() + 8.0) && \n          tu.getRoadCondition() == RoadCondition.DRY) || \n   (sp > (tu.getSpeedLimitMph() + 5.0) && \n          tu.getRoadCondition() == RoadCondition.WET) || \n    (sp > (tu.getSpeedLimitMph() + 0.0) && \n           tu.getRoadCondition() == RoadCondition.SNOW);\ntraffic.speedAfterStart(timeSec, \n                 trafficUnitsNumber, speedModel, limit);\n```", "```java\npublic interface Traffic {\n   void speedAfterStart(double timeSec, int trafficUnitsNumber);\n   void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                                         SpeedModel speedModel);\n   void speedAfterStart(double timeSec, \n            int trafficUnitsNumber, SpeedModel speedModel, \n                           Predicate<TrafficUnit> limitTraffic);\n   void speedAfterStart(double timeSec, \n             int trafficUnitsNumber, SpeedModel speedModel,\n                  BiPredicate<TrafficUnit,Double> limitTraffic);\n}\n```", "```java\nvoid printResult(TrafficUnit tu, double timeSec, double speedMph) {\n  System.out.println(\"Road \" + tu.getRoadCondition() +\n                  \", tires \" + tu.getTireCondition() + \": \" \n                     + tu.getVehicleType().getType() + \" speedMph (\" \n                     + timeSec + \" sec)=\" + speedMph + \" mph\");\n}\n```", "```java\nTraffic traffic = new TrafficImpl(Month.APRIL, DayOfWeek.FRIDAY, 17,\n                                        \"USA\", \"Denver\", \"Main103S\");\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\nBiConsumer<TrafficUnit, Double> output = (tu, sp) ->\n  System.out.println(\"Road \" + tu.getRoadCondition() + \n                  \", tires \" + tu.getTireCondition() + \": \" \n                     + tu.getVehicleType().getType() + \" speedMph (\" \n                     + timeSec + \" sec)=\" + sp + \" mph\");\ntraffic.speedAfterStart(timeSec, trafficUnitsNumber, speedModel, output);\n```", "```java\npublic void speedAfterStart(double timeSec, int trafficUnitsNumber,\n        SpeedModel speedModel, BiConsumer<TrafficUnit, Double> output) {\n  List<TrafficUnit> trafficUnits = \n     FactoryTraffic.generateTraffic(trafficUnitsNumber, month, \n                      dayOfWeek, hour, country, city, trafficLight);\n  for(TrafficUnit tu: trafficUnits){\n     Vehicle vehicle = FactoryVehicle.build(tu);\n     vehicle.setSpeedModel(speedModel);\n     double speed = vehicle.getSpeedMph(timeSec);\n     speed = (double) Math.round(speed * tu.getTraction());\n     output.accept(tu, speed);\n  }\n}\n```"]