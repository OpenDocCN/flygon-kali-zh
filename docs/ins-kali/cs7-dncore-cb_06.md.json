["```cs\n        using System.IO;\n        using System.IO.Compression;\n\n```", "```cs\n        private static void ZipIt(string path)\n        {\n          string sourceDirectory = $\"{path}Documents\";\n\n          if (Directory.Exists(sourceDirectory))\n          {\n            string archiveName = $\"{path}DocumentsArchive.zip\";\n            ZipFile.CreateFromDirectory(sourceDirectory, archiveName, \n                                        CompressionLevel.Optimal, false);\n          } \n        }\n\n```", "```cs\n        private static void UnZipIt(string path)\n        {\n          string destinationDirectory = $\"{path}DocumentsUnzipped\";\n\n          if (Directory.Exists(path))\n          {\n            string archiveName = $\"{path}DocumentsArchive.zip\";\n            ZipFile.ExtractToDirectory(archiveName, destinationDirectory);\n          }\n        }\n\n```", "```cs\nusing System.IO.Compression;\nusing System.Text;\nusing static System.Console;\n\n```", "```cs\n        public static class ExtensionMethods\n        {\n          public static byte[] CompressStream(this byte[] originalSource)\n          {\n\n          }\n\n          public static byte[] DecompressStream(this byte[] originalSource)\n          {\n\n          }\n        }\n\n```", "```cs\n        public static byte[] CompressStream(this byte[] originalSource)\n        {\n          using (var outStream = new MemoryStream())\n          {\n            using (var gzip = new GZipStream(outStream, \n                   CompressionMode.Compress))\n            {\n              gzip.Write(originalSource, 0, originalSource.Length);\n            }\n\n            return outStream.ToArray();\n          } \n        }\n\n```", "```cs\n        public static byte[] DecompressStream(this byte[] originalSource)\n        {\n          using (var sourceStream = new MemoryStream(originalSource))\n          {\n            using (var outStream = new MemoryStream())\n            {\n              using (var gzip = new GZipStream(sourceStream, \n                     CompressionMode.Decompress))\n             {\n               gzip.CopyTo(outStream); \n             }\n             return outStream.ToArray();\n           }\n         }\n       }\n\n```", "```cs\n        private static void InMemCompressDecompress()\n        {\n          string largeFile = @\"C:\\temp\\Documents\\file 3.txt\";\n\n          string inputString = File.ReadAllText(largeFile);\n          var bytes = Encoding.Default.GetBytes(inputString);\n\n          var originalLength = bytes.Length;\n          var compressed = bytes.CompressStream();\n          var compressedLength = compressed.Length;\n\n          var newFromCompressed = compressed.DecompressStream();\n          var newFromCompressedLength = newFromCompressed.Length;\n\n          WriteLine($\"Original string length = {originalLength}\");\n          WriteLine($\"Compressed string length = {compressedLength}\");\n          WriteLine($\"Uncompressed string length = \n                    {newFromCompressedLength}\");\n\n          // To get the original Test back, call this\n          //var newString = Encoding.Default.GetString(newFromCompressed);\n        }\n\n```", "```cs\nusing System.IO;\nusing System.Threading;\n\n```", "```cs\n        CancellationTokenSource cts;\n        int elapsedTime = 0;\n\n```", "```cs\n        public Form1()\n        {\n          InitializeComponent();\n\n          lblTimer.Text = \"Timer Stopped\";\n        }\n\n```", "```cs\n        private async void btnCopyFilesAsync_Click(\n          object sender, EventArgs e)\n        {\n          if (btnCopyFilesAsync.Text.Equals(\"Copy Files Async\"))\n          {\n\n          }\n\n          if (btnCopyFilesAsync.Text.Equals(\"Cancel Async Copy\"))\n          {\n\n          }\n        }\n\n```", "```cs\n        private void asyncTimer_Tick(object sender, EventArgs e)\n        {\n          lblTimer.Text = $\"Duration = {elapsedTime += 1} seconds\";\n        }\n\n```", "```cs\n        if (btnCopyFilesAsync.Text.Equals(\"Cancel Async Copy\"))\n        {\n          btnCopyFilesAsync.Text = \"Copy Files Async\";\n          cts.Cancel();\n\n```", "```cs\n        if (btnCopyFilesAsync.Text.Equals(\"Copy Files Async\"))\n        {\n          string sourceDirectory = @\"C:\\temp\\AsyncSource\\\";\n          string destinationDirectory = @\"C:\\temp\\AsyncDestination\\\";\n          btnCopyFilesAsync.Text = \"Cancel Async Copy\";\n          cts = new CancellationTokenSource();\n          elapsedTime = 0;\n          asyncTimer.Start();\n\n          IEnumerable<string> fileEntries = Directory\n            .EnumerateFiles(sourceDirectory);\n        }\n\n```", "```cs\n        foreach (string sourceFile in fileEntries)\n        {\n          using (FileStream sfs = File.Open(sourceFile, FileMode.Open))\n          {\n            string destinationFilePath = $\"{destinationDirectory}{\n              Path.GetFileName(sourceFile)}\";\n            using (FileStream dfs = File.Create(destinationFilePath))\n            {\n              try\n              {\n                await sfs.CopyToAsync(dfs, 81920, cts.Token);\n              }\n              catch (OperationCanceledException ex)\n              {\n                asyncTimer.Stop();\n                lblTimer.Text = $\"Cancelled after {elapsedTime} seconds\";\n              }\n            }\n          }\n        }\n\n```", "```cs\n        if (!cts.IsCancellationRequested)\n        {\n          asyncTimer.Stop();\n          lblTimer.Text = $\"Completed in {elapsedTime} seconds\";\n        }\n\n```", "```cs\n        private async void btnCopyFilesAsync_Click(object sender, \n          EventArgs e)\n        {\n          if (btnCopyFilesAsync.Text.Equals(\"Copy Files Async\"))\n          {\n            string sourceDirectory = @\"C:\\temp\\AsyncSource\\\";\n            string destinationDirectory = @\"C:\\temp\\AsyncDestination\\\";\n            btnCopyFilesAsync.Text = \"Cancel Async Copy\";\n            cts = new CancellationTokenSource();\n            elapsedTime = 0;\n            asyncTimer.Start();\n\n            IEnumerable<string> fileEntries = Directory\n              .EnumerateFiles(sourceDirectory);\n\n            //foreach (string sourceFile in Directory\n                       .EnumerateFiles(sourceDirectory))\n            foreach (string sourceFile in fileEntries)\n            {\n              using (FileStream sfs = File.Open(sourceFile, FileMode.Open))\n              {\n                string destinationFilePath = $\"{destinationDirectory}\n                {Path.GetFileName(sourceFile)}\";\n                using (FileStream dfs = File.Create(destinationFilePath))\n                {\n                  try\n                  {\n                    await sfs.CopyToAsync(dfs, 81920, cts.Token);\n                  }\n                  catch (OperationCanceledException ex)\n                  {\n                    asyncTimer.Stop();\n                    lblTimer.Text = $\"Cancelled after {elapsedTime}\n                      seconds\";\n                  }\n                }\n              }\n            }\n\n            if (!cts.IsCancellationRequested)\n            {\n              asyncTimer.Stop();\n              lblTimer.Text = $\"Completed in {elapsedTime} seconds\";\n            }\n          }\n          if (btnCopyFilesAsync.Text.Equals(\"Cancel Async Copy\"))\n          {\n            btnCopyFilesAsync.Text = \"Copy Files Async\";\n            cts.Cancel();\n          }\n        }\n\n```", "```cs\n        [Serializable]\n        public abstract class Cat\n        {\n          // fields\n          public int Weight;\n          public int Age; \n        }\n\n```", "```cs\n        [Serializable]\n        public class Tiger : Cat\n        {\n          public string Trainer;\n          public bool IsTamed;\n        }\n\n```", "```cs\n        private static Stream SerializeTiger()\n        {\n          Tiger tiger = new Tiger();\n          tiger.Age = 12;\n          tiger.IsTamed = false;\n          tiger.Trainer = \"Joe Soap\";\n          tiger.Weight = 120;\n\n          MemoryStream stream = new MemoryStream();\n          BinaryFormatter fmt = new BinaryFormatter();\n          fmt.Serialize(stream, tiger);\n          stream.Position = 0;\n          return stream;\n        }\n\n```", "```cs\n        private static void DeserializeTiger(Stream stream)\n        {\n          stream.Position = 0;\n          BinaryFormatter fmt = new BinaryFormatter();\n          Tiger tiger = (Tiger)fmt.Deserialize(stream);\n        }\n\n```", "```cs\n        Stream str = SerializeTiger();\n        WriteLine(new StreamReader(str).ReadToEnd());\n        DeserializeTiger(str);\n\n```", "```cs\n        [Serializable]\n        public class Vehicle : ISerializable\n        {\n\n        }\n\n```", "```cs\n        // Primitive fields\n        public int VehicleType;\n        public int EngineCapacity;\n        public int TopSpeed;\n\n        public Vehicle()\n        {\n\n        }\n\n```", "```cs\n        public void GetObjectData(SerializationInfo info, \n          StreamingContext context)\n        {\n          info.AddValue(\"VehicleType\", VehicleType);\n          info.AddValue(\"EngineCapacity\", EngineCapacity);\n          info.AddValue(\"TopSpeed\", TopSpeed);\n        }\n\n```", "```cs\n        // Deserialization constructor\n        protected Vehicle(SerializationInfo info, StreamingContext context)\n        {\n          VehicleType = info.GetInt32(\"VehicleType\");\n          EngineCapacity = info.GetInt32(\"EngineCapacity\");\n          TopSpeed = info.GetInt32(\"TopSpeed\");\n        }\n\n```", "```cs\n        [Serializable]\n        public class Vehicle : ISerializable\n        {\n          // Primitive fields\n          public int VehicleType;\n          public int EngineCapacity;\n          public int TopSpeed;\n\n          public Vehicle()\n          {\n\n          }\n          public void GetObjectData(SerializationInfo info, \n            StreamingContext context)\n          {\n            info.AddValue(\"VehicleType\", VehicleType);\n            info.AddValue(\"EngineCapacity\", EngineCapacity);\n            info.AddValue(\"TopSpeed\", TopSpeed);\n          }\n\n          // Deserialization constructor\n          protected Vehicle(SerializationInfo info, \n            StreamingContext context)\n          {\n            VehicleType = info.GetInt32(\"VehicleType\");\n            EngineCapacity = info.GetInt32(\"EngineCapacity\");\n            TopSpeed = info.GetInt32(\"TopSpeed\");\n          }\n        }\n\n```", "```cs\n        string serializationPath = @\"C:\\temp\\vehicleInfo.dat\";\n        Vehicle vehicle = new Vehicle();\n        vehicle.VehicleType = (int)VehicleTypes.Car;\n        vehicle.EngineCapacity = 1600;\n        vehicle.TopSpeed = 230;\n\n        if (File.Exists(serializationPath))\n          File.Delete(serializationPath);\n\n```", "```cs\n        public enum VehicleTypes\n        {\n          Car = 1,\n          SUV = 2,\n          Utility = 3\n        }\n\n```", "```cs\n        using (FileStream stream = new FileStream(serializationPath, \n          FileMode.Create))\n        {\n          BinaryFormatter fmter = new BinaryFormatter();\n          fmter.Serialize(stream, vehicle);\n        }\n\n```", "```cs\n        using (FileStream stream = new FileStream(serializationPath, \n          FileMode.Open))\n        {\n          BinaryFormatter fmter = new BinaryFormatter();\n          Vehicle deserializedVehicle = (Vehicle)fmter.Deserialize(stream);\n        }\n\n```", "```cs\n        public class Student\n        {\n          public string StudentName;\n          public double SubjectMark;\n        }\n\n```", "```cs\n        [XmlRoot(ElementName = \"FundamentalsOfProgramming\", \n          Namespace = \"http://serialization\")]\n        public class FundamentalProgramming\n        {\n          [XmlElement(ElementName = \"LecturerFullName\", \n            DataType = \"string\")]\n          public string Lecturer;\n\n          [XmlIgnore]\n          public double ClassAverage;\n\n          [XmlAttribute]\n          public string RoomNumber;\n\n          [XmlArray(ElementName = \"StudentsInClass\", \n            Namespace = \"http://serialization\")]\n          public List<Student> Students; \n        }\n\n```", "```cs\n        string serializationPath = @\"C:tempclassInfo.xml\";\n        Student studentA = new Student()\n        {\n          StudentName = \"John Smith\"\n          , SubjectMark = 86.4\n        };\n        Student studentB = new Student()\n        {\n          StudentName = \"Jane Smith\"\n          , SubjectMark = 67.3\n        };\n        List<Student> students = new List<Student>();\n        students.Add(studentA);\n        students.Add(studentB);\n\n```", "```cs\n        FundamentalProgramming subject = new FundamentalProgramming();\n        subject.Lecturer = \"Prof. Johan van Niekerk\";\n        subject.RoomNumber = \"Lecture Auditorium A121\";\n        subject.Students = students;\n        subject.ClassAverage = (students.Sum(mark => mark.SubjectMark) / \n          students.Count());\n\n```", "```cs\n        using (FileStream stream = new FileStream(serializationPath, \n          FileMode.Create))\n        {\n          XmlSerializer xmlSer = new XmlSerializer(typeof(\n            FundamentalProgramming));\n          xmlSer.Serialize(stream, subject);\n        }\n\n```", "```cs\n        using (FileStream stream = new FileStream(serializationPath, \n          FileMode.Open))\n        {\n          XmlSerializer xmlSer = new XmlSerializer(typeof(\n            FundamentalProgramming));\n          FundamentalProgramming fndProg = (FundamentalProgramming)\n            xmlSer.Deserialize(stream);\n        }\n\n```", "```cs\n        public class FundamentalProgramming\n        {\n          public string Lecturer;\n          public double ClassAverage;\n          public string RoomNumber;\n          public List<Student> Students;\n        }\n\n        public class Student\n        {\n          public string StudentName;\n          public double SubjectMark;\n        }\n\n```", "```cs\n        string serializationPath = @\"C:\\temp\\classInfo.txt\";\n        Student studentA = new Student()\n        {\n          StudentName = \"John Smith\"\n          , SubjectMark = 86.4\n        };\n        Student studentB = new Student()\n        {\n          StudentName = \"Jane Smith\"\n          , SubjectMark = 67.3\n        };\n        List<Student> students = new List<Student>();\n        students.Add(studentA);\n        students.Add(studentB);\n\n```", "```cs\n        FundamentalProgramming subject = new FundamentalProgramming();\n        subject.Lecturer = \"Prof. Johan van Niekerk\";\n        subject.RoomNumber = \"Lecture Auditorium A121\";\n        subject.Students = students;\n        subject.ClassAverage = (students.Sum(mark => mark.SubjectMark) / \n          students.Count());\n        WriteLine($\"Calculated class average = {subject.ClassAverage}\");\n\n```", "```cs\n        JsonSerializer json = new JsonSerializer();\n        json.Formatting = Formatting.Indented;\n        using (StreamWriter sw = new StreamWriter(serializationPath))\n        {\n          using (JsonWriter wr = new JsonTextWriter(sw))\n          {\n            json.Serialize(wr, subject);\n          }\n        }\n        WriteLine(\"Serialized to file using JSON Serializer\");\n\n```", "```cs\n        using (StreamReader sr = new StreamReader(serializationPath))\n        {\n          string jsonString = sr.ReadToEnd();\n          WriteLine(\"JSON String Read from file\");\n          JObject jobj = JObject.Parse(jsonString);\n          IList<double> subjectMarks = jobj[\"Students\"].Select(\n            m => (double)m[\"SubjectMark\"]).ToList();\n          var ave = subjectMarks.Sum() / subjectMarks.Count();\n          WriteLine($\"Calculated class average using JObject = {ave}\");\n        }\n\n```", "```cs\n        using (StreamReader sr = new StreamReader(serializationPath))\n        {\n          using (JsonReader jr = new JsonTextReader(sr))\n          {\n            FundamentalProgramming funProg = json.Deserialize\n              <FundamentalProgramming>(jr);\n          }\n        }\n\n```"]