["```kt\n    allprojects {\n    \u00a0\u00a0\u00a0\u00a0repositories {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0google()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jcenter()\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    dependencies {\n    \u00a0\u00a0\u00a0\u00a0... \n    \u00a0\u00a0\u00a0\u00a0def lifecycle_version = \"2.2.0\"\n    \u00a0\u00a0\u00a0\u00a0implementation \"androidx.lifecycle:lifecycle-      extensions:$lifecycle_version\"\n    \u00a0\u00a0\u00a0\u00a0...\n    }\n    ```", "```kt\n    class SplitFragmentOne : Fragment() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreateView(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inflater: LayoutInflater,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container: ViewGroup?,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0savedInstanceState: Bundle?\n    \u00a0\u00a0\u00a0\u00a0): View? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inflater.inflate(R.layout.fragment_split_one,           container, false)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0view.findViewById<TextView>          (R.id.fragment_split_one_text_view).text =             getString(R.string.total, 0)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=  \"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_height=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:gravity=\"center\"\n    \u00a0\u00a0\u00a0\u00a0android:orientation=\"vertical\">\n    \u00a0\u00a0\u00a0\u00a0<TextView\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/fragment_split_one_text_view\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_width=\"wrap_content\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_height=\"wrap_content\" />\n    \u00a0\u00a0\u00a0\u00a0<Button\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/fragment_split_one_button\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_width=\"wrap_content\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_height=\"wrap_content\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:text=\"@string/press_me\" />\n    </LinearLayout>\n    ```", "```kt\n    class SplitFragmentTwo : Fragment() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreateView(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inflater: LayoutInflater,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container: ViewGroup?,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0savedInstanceState: Bundle?\n    \u00a0\u00a0\u00a0\u00a0): View? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inflater.inflate(R.layout.fragment_split_two,           container, false)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0view.findViewById<TextView>          (R.id.fragment_split_two_text_view).text =             getString(R.string.total, 0)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android   =\"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_height=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:gravity=\"center\"\n    \u00a0\u00a0\u00a0\u00a0android:orientation=\"vertical\">\n    \u00a0\u00a0\u00a0\u00a0<TextView\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/fragment_split_two_text_view\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_width=\"wrap_content\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_height=\"wrap_content\" />\n    </LinearLayout>\n    ```", "```kt\n    class SplitActivity : AppCompatActivity() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreate(savedInstanceState: Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onCreate(savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setContentView(R.layout.activity_split)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android   =\"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0xmlns:tools=\"http://schemas.android.com/tools\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_height=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:orientation=\"vertical\"\n    \u00a0\u00a0\u00a0\u00a0tools:context=\".SplitActivity\">\n    \u00a0\u00a0\u00a0\u00a0<androidx.fragment.app.FragmentContainerView\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/activity_fragment_split_1\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:name=\"com.android           .testable.viewmodellivedata.SplitFragmentOne\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_height=\"0dp\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_weight=\"1\" />\n    \u00a0\u00a0\u00a0\u00a0<androidx.fragment.app.FragmentContainerView\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/activity_fragment_split_2\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:name=\"com.android           .testable.viewmodellivedata.SplitFragmentTwo\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_height=\"0dp\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:layout_weight=\"1\" />\n    </LinearLayout>\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=  \"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0xmlns:tools=\"http://schemas.android.com/tools\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_width=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:layout_height=\"match_parent\"\n    \u00a0\u00a0\u00a0\u00a0android:baselineAligned=\"false\"\n    \u00a0\u00a0\u00a0\u00a0android:orientation=\"horizontal\"\n    \u00a0\u00a0\u00a0\u00a0tools:context=\".SplitActivity\">\n    \u00a0\u00a0\u00a0\u00a0<androidx.fragment.app.FragmentContainerView\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id=\"@+id/activity_fragment_split_1\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0android:id attribute in both activity_split.xml files. This allows the operating system to correctly save and restore the state of the fragment during rotation.NoteMake sure to properly point to your fragments with the right package declaration in the `android:name` attribute in the `FragmentContainerView` tag in both `activity_split.xml` files. Also, the `id` attribute is a must in the ` FragmentContainerView` tag, so make sure it's present; otherwise, the app will crash.\n    ```", "```kt\n    <string name=\"press_me\">Press Me</string>\n    <string name=\"total\">Total %d</string>\n    ```", "```kt\n    <activity android:name=\".SplitActivity\">\n    ```", "```kt\n    class TotalsViewModel : ViewModel() {\n    \u00a0\u00a0\u00a0\u00a0var total = 0\n    \u00a0\u00a0\u00a0\u00a0fun increaseTotal(): Int {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total++\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return total\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    class SplitFragmentOne : Fragment() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreateView(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inflater: LayoutInflater,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container: ViewGroup?,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0savedInstanceState: Bundle?\n    \u00a0\u00a0\u00a0\u00a0): View? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inflater.inflate(R.layout.fragment_split_one,           container, false)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prepareViewModel()\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0private fun prepareViewModel() {\n    }\n    \u00a0\u00a0\u00a0\u00a0private fun updateText(total: Int) {\n     view?.findViewById<TextView>        (R.id.fragment_split_one_text_view)?.text =          getString(R.string.total, total)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun prepareViewModel() {\n    \u00a0\u00a0\u00a0\u00a0val totalsViewModel       = ViewModelProvider(this).get(TotalsViewModel::class.java)\n    }\n    ```", "```kt\n    private fun prepareViewModel() {\n    \u00a0\u00a0\u00a0\u00a0val totalsViewModel       = ViewModelProvider(this).get(TotalsViewModel::class.java)\n    Total 0 every time we rotate, and after every click we will see the previously computed total plus 1.\n    ```", "```kt\n    private fun prepareViewModel() {\n    \u00a0\u00a0\u00a0\u00a0val totalsViewModel       = ViewModelProvider(this).get(TotalsViewModel::class.java)\n    \u00a0\u00a0\u00a0\u00a0updateText(totalsViewModel.total)\n    ViewModel to recompute the total and set the new value.\n    ```", "```kt\n    class SplitFragmentTwo : Fragment() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreateView(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inflater: LayoutInflater,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container: ViewGroup?,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0savedInstanceState: Bundle?\n    \u00a0\u00a0\u00a0\u00a0): View? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return inflater.inflate(R.layout.fragment_split_two,           container, false)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val totalsViewModel = ViewModelProvider(this)          .get(TotalsViewModel::class.java)\n    ViewModel, we actually have two instances of that ViewModel for each of our fragments. We will need to limit the number of instances to one per fragment. We can achieve this by attaching our ViewModel to the SplitActivity life cycle using a method called requireActiviy.\n    ```", "```kt\n    val totalsViewModel =   ViewModelProvider(this).get(TotalsViewModel::class.java)\n    ```", "```kt\n    val totalsViewModel =   ViewModelProvider(requireActivity())    .get(TotalsViewModel::class.java)\n    ```", "```kt\n    class TotalsViewModel : ViewModel() {\n    \u00a0\u00a0\u00a0\u00a0private val total = MutableLiveData<Int>()\n    \u00a0\u00a0\u00a0\u00a0init {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total.postValue(0)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0fun increaseTotal() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total.postValue((total.value ?: 0) + 1)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0fun getTotal(): LiveData<Int> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return total\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val totalsViewModel =           ViewModelProvider(requireActivity())            .get(TotalsViewModel::class.java)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalsViewModel.getTotal().observe(viewLifecycleOwner,           Observer {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0updateText(it)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0view.findViewById<Button>          (R.id.fragment_split_one_button).setOnClickListener {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalsViewModel.increaseTotal()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0private fun updateText(total: Int) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0view?.findViewById<TextView>          (R.id.fragment_split_one_text_view)?.text             = getString(R.string.total, total)\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0override fun onViewCreated(view: View, savedInstanceState:       Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onViewCreated(view, savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val totalsViewModel =           ViewModelProvider(requireActivity())            .get(TotalsViewModel::class.java)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalsViewModel.getTotal().observe(viewLifecycleOwner,           Observer {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0updateText(it)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0private fun updateText(total: Int) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0view?.findViewById<TextView>         (R.id.fragment_split_two_text_view)?.text =            getString(R.string.total, total)\n    \u00a0\u00a0\u00a0\u00a0}\n    totalsViewModel.getTotal().observe(viewLifecycleOwner, Observer {  updateText(it)})\n    ```", "```kt\n    class TotalsViewModelTest {\n    \u00a0\u00a0\u00a0\u00a0private val totalsViewModel = TotalsViewModel()\n    \u00a0\u00a0\u00a0\u00a0@Before\n    \u00a0\u00a0\u00a0\u00a0fun setUp() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(0, totalsViewModel.getTotal().value)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0@Test\n    \u00a0\u00a0\u00a0\u00a0fun increaseTotal() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val total = 5\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (i in 0 until total) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0totalsViewModel.increaseTotal()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(4, totalsViewModel.getTotal().value)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    java.lang.RuntimeException: Method getMainLooper in   android.os.Looper not mocked.\n    ```", "```kt\n    testImplementation 'android.arch.core:core-testing:2.1.0'\n    ```", "```kt\n    class TotalsViewModelTest {\n    \u00a0\u00a0\u00a0\u00a0@get:Rule\n    \u00a0\u00a0\u00a0\u00a0val rule = InstantTaskExecutorRule()\n    \u00a0\u00a0\u00a0\u00a0private val totalsViewModel = TotalsViewModel()\n    ```", "```kt\n    java.lang.RuntimeException: Method getMainLooper\n    ```", "```kt\n    init {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total.postValue(0)\n    }\n    ```", "```kt\n    @get:Rule\n    val rule = InstantTaskExecutorRule()\n    private lateinit var totalsViewModel: TotalsViewModel\n    @Before\n    fun setUp() {\n    \u00a0\u00a0\u00a0\u00a0totalsViewModel = TotalsViewModel()\n    \u00a0\u00a0\u00a0\u00a0assertEquals(0, totalsViewModel.getTotal().value)\n    }\n    ```", "```kt\n    java.lang.AssertionError: \n    Expected :4\n    Actual\u00a0\u00a0\u00a0:5\n    ```", "```kt\n@Entity(tableName = \"messages\")\ndata class Message(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"message_id\")       val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"text\", defaultValue = \"\") val text: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"user\") val userId: Long,\n)\n@Entity(tableName = \"users\")\ndata class User(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey @ColumnInfo(name = \"user_id\") val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"first_name\") val firstName: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"last_name\") val lastName: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"last_online\") val lastOnline: Long\n)\n```", "```kt\n    @Entity(tableName = \"messages\", primaryKeys = [\"id\", \"time\"])\n    ```", "```kt\n@Entity(tableName = \"messages\")\ndata class Message(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"message_id\")       val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"text\", defaultValue = \"\") val text: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"user\") val userId: Long,\n\u00a0\u00a0\u00a0\u00a0@Embedded val location: Location?\n)\ndata class Location(\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"lat\") val lat: Double,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"long\") val log: Double,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"location_name\") val name: String\n)\n```", "```kt\n@Entity(\n\u00a0\u00a0\u00a0\u00a0tableName = \"messages\",\n\u00a0\u00a0\u00a0\u00a0foreignKeys = [ForeignKey(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity = User::class,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parentColumns = [\"user_id\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0childColumns = [\"user\"],\nonDelete = ForeignKey.CASCADE\n\u00a0\u00a0\u00a0\u00a0)]\n)\ndata class Message(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"message_id\")       val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"text\", defaultValue = \"\") val text: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"user\") val userId: Long,\n\u00a0\u00a0\u00a0\u00a0@Embedded val location: Location?\n)\n```", "```kt\n@Dao\ninterface MessageDao {\n\u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n\u00a0\u00a0\u00a0\u00a0fun insertMessages(vararg messages: Message)\n\u00a0\u00a0\u00a0\u00a0@Update\n\u00a0\u00a0\u00a0\u00a0fun updateMessages(vararg messages: Message)\n\u00a0\u00a0\u00a0\u00a0@Delete\n\u00a0\u00a0\u00a0\u00a0fun deleteMessages(vararg messages: Message)\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM messages\")\n\u00a0\u00a0\u00a0\u00a0fun loadAllMessages(): List<Message>\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM messages WHERE user=:userId AND       time>=:time\")\n\u00a0\u00a0\u00a0\u00a0fun loadMessagesFromUserAfterTime(userId: String, time: Long):       List<Message>\n}\n@Dao\ninterface UserDao {\n\u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n\u00a0\u00a0\u00a0\u00a0fun insertUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Update\n\u00a0\u00a0\u00a0\u00a0fun updateUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Delete\n\u00a0\u00a0\u00a0\u00a0fun deleteUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM users\")\n\u00a0\u00a0\u00a0\u00a0fun loadAllUsers(): List<User>\n}\n```", "```kt\n@Query(\"SELECT * FROM messages WHERE user IN (:userIds) AND   time>=:time\")\nfun loadMessagesFromUserAfterTime(userIds: List<String>, time: Long):   List<Message>\n```", "```kt\ndata class TextWithTime(\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"text\") val text: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long\n)\n```", "```kt\n@Query(\"SELECT text,time FROM messages\")\nfun loadTextsAndTimes(): List<TextWithTime>\n```", "```kt\ndata class MessageWithUser(\n\u00a0\u00a0\u00a0\u00a0@Embedded val message: Message,\n\u00a0\u00a0\u00a0\u00a0@Embedded val user: User\n)\n```", "```kt\n@Query(\"SELECT * FROM messages INNER JOIN users on   users.user_id=messages.user\")\nfun loadMessagesAndUsers(): List<MessageWithUser>\n```", "```kt\n@Database(entities = [User::class, Message::class], version = 1)\nabstract class ChatDatabase : RoomDatabase() {\n\u00a0\u00a0\u00a0\u00a0companion object {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private lateinit var chatDatabase: ChatDatabase\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fun getDatabase(applicationContext: Context): ChatDatabase {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!(::chatDatabase.isInitialized)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chatDatabase =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Room.databaseBuilder(applicationContext,                       chatDatabase::class.java, \"chat-db\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return chatDatabase\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0abstract fun userDao(): UserDao\n\u00a0\u00a0\u00a0\u00a0abstract fun messageDao(): MessageDao\n}\n```", "```kt\ndata class Message(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true) @ColumnInfo(name = \"message_id\")       val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"text\", defaultValue = \"\") val text: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"user\") val userId: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"status\") val status: Int,\n\u00a0\u00a0\u00a0\u00a0@Embedded val location: Location?\n)\n```", "```kt\nDatabase(entities = [User::class, Message::class], version = 2)\nabstract class ChatDatabase : RoomDatabase() {\n\u00a0\u00a0\u00a0\u00a0companion object {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private lateinit var chatDatabase: ChatDatabase\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private val MIGRATION_1_2 = object : Migration(1, 2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0override fun migrate(database: SupportSQLiteDatabase) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0database.execSQL(\"ALTER TABLE messages ADD COLUMN                   status INTEGER\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fun getDatabase(applicationContext: Context): ChatDatabase {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!(::chatDatabase.isInitialized)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chatDatabase =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Room.databaseBuilder(applicationContext,                       chatDatabase::class.java, \"chat-db\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.addMigrations(MIGRATION_1_2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return chatDatabase\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0abstract fun userDao(): UserDao\n\u00a0\u00a0\u00a0\u00a0abstract fun messageDao(): MessageDao\n}\n```", "```kt\ndata class User(\n\u00a0\u00a0\u00a0\u00a0@PrimaryKey @ColumnInfo(name = \"user_id\") val id: Long,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"first_name\") val firstName: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"last_name\") val lastName: String,\n\u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"last_online\") val lastOnline: Date\n)\n```", "```kt\nclass DateConverter {\n\u00a0\u00a0\u00a0\u00a0@TypeConverter\n\u00a0\u00a0\u00a0\u00a0fun from(value: Long?): Date? {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return value?.let { Date(it) }\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0@TypeConverter\n\u00a0\u00a0\u00a0\u00a0fun to(date: Date?): Long? {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return date?.time\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n@Database(entities = [User::class, Message::class], version = 2)\n@TypeConverters(DateConverter::class)\nabstract class ChatDatabase : RoomDatabase() {\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM users\")\n\u00a0\u00a0\u00a0\u00a0fun loadAllUsers(): LiveData<List<User>>\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n\u00a0\u00a0\u00a0\u00a0suspend fun insertUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Update\n\u00a0\u00a0\u00a0\u00a0suspend fun updateUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Delete\n\u00a0\u00a0\u00a0\u00a0suspend fun deleteUser(user: User)\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n\u00a0\u00a0\u00a0\u00a0fun insertUser(user: User) : Completable\n\u00a0\u00a0\u00a0\u00a0@Update\n\u00a0\u00a0\u00a0\u00a0fun updateUser(user: User) : Completable\n\u00a0\u00a0\u00a0\u00a0@Delete\n\u00a0\u00a0\u00a0\u00a0fun deleteUser(user: User) : Completable\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM users\")\n\u00a0\u00a0\u00a0\u00a0fun loadAllUsers(): Flowable<List<User>>\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM users\")\n\u00a0\u00a0\u00a0\u00a0fun loadAllUsers(): List<User>\n\u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n\u00a0\u00a0\u00a0\u00a0fun insertUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Update\n\u00a0\u00a0\u00a0\u00a0fun updateUser(user: User)\n\u00a0\u00a0\u00a0\u00a0@Delete\n\u00a0\u00a0\u00a0\u00a0fun deleteUser(user: User)\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0fun getUsers(usersCallback:()->List<User>){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread(Runnable {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 usersCallback.invoke(userDao.loadUsers())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}).start()\n\u00a0\u00a0\u00a0\u00a0 }\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0private val executor:Executor =       Executors.newSingleThreadExecutor()\n\u00a0\u00a0\u00a0\u00a0fun getUsers(usersCallback:(List<User>)->Unit){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0executor.execute {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0usersCallback.invoke(userDao.loadUsers())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n    \u00a0\u00a0\u00a0\u00a0apply plugin: 'kotlin-kapt'\u00a0\n    ```", "```kt\n    def room_version = \"2.2.5\"\n    implementation \"androidx.room:room-runtime:$room_version\"\n    kapt \"androidx.room:room-compiler:$room_version\"\n    ```", "```kt\n    @Entity(tableName = \"article\")\n    data class Article(\n    \u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true)       @ColumnInfo(name = \"id\") val id: Long = 0,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"title\") val title: String,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"content\") val content: String,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"time\") val time: Long\n    )\n    @Entity(tableName = \"journalist\")\n    data class Journalist(\n    \u00a0\u00a0\u00a0\u00a0@PrimaryKey(autoGenerate = true)       @ColumnInfo(name = \"id\") val id: Long = 0,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"first_name\") val firstName: String,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"last_name\") val lastName: String,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"job_title\") val jobTitle: String\n    )\n    ```", "```kt\n    @Entity(\n    \u00a0\u00a0\u00a0\u00a0tableName = \"joined_article_journalist\",\n    \u00a0\u00a0\u00a0\u00a0primaryKeys = [\"article_id\", \"journalist_id\"],\n    \u00a0\u00a0\u00a0\u00a0foreignKeys = [ForeignKey(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity = Article::class,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parentColumns = arrayOf(\"id\"),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0childColumns = arrayOf(\"article_id\"),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onDelete = ForeignKey.CASCADE\n    \u00a0\u00a0\u00a0\u00a0), ForeignKey(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0entity = Journalist::class,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parentColumns = arrayOf(\"id\"),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0childColumns = arrayOf(\"journalist_id\"),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onDelete = ForeignKey.CASCADE\n    \u00a0\u00a0\u00a0\u00a0)]\n    )\n    data class JoinedArticleJournalist(\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"article_id\") val articleId: Long,\n    \u00a0\u00a0\u00a0\u00a0@ColumnInfo(name = \"journalist_id\") val journalistId: Long\n    )\n    ```", "```kt\n    @Dao\n    interface ArticleDao {\n    \u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n    \u00a0\u00a0\u00a0\u00a0fun insertArticle(article: Article)\n    \u00a0\u00a0\u00a0\u00a0@Update\n    \u00a0\u00a0\u00a0\u00a0fun updateArticle(article: Article)\n    \u00a0\u00a0\u00a0\u00a0@Delete\n    \u00a0\u00a0\u00a0\u00a0fun deleteArticle(article: Article)\n    \u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM article\")\n    \u00a0\u00a0\u00a0\u00a0fun loadAllArticles(): List<Article>\n    \u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM article INNER JOIN       joined_article_journalist ON         article.id=joined_article_journalist.article_id WHERE           joined_article_journalist.journalist_id=:journalistId\")\n    \u00a0\u00a0\u00a0\u00a0fun loadArticlesForAuthor(journalistId: Long): List<Article>\n    }\n    ```", "```kt\n    @Dao\n    interface JournalistDao {\n    \u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n    \u00a0\u00a0\u00a0\u00a0fun insertJournalist(journalist: Journalist)\n    \u00a0\u00a0\u00a0\u00a0@Update\n    \u00a0\u00a0\u00a0\u00a0fun updateJournalist(journalist: Journalist)\n    \u00a0\u00a0\u00a0\u00a0@Delete\n    \u00a0\u00a0\u00a0\u00a0fun deleteJournalist(journalist: Journalist)\n    \u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM journalist\")\n    \u00a0\u00a0\u00a0\u00a0fun loadAllJournalists(): List<Journalist>\n    \u00a0\u00a0\u00a0\u00a0@Query(\"SELECT * FROM journalist INNER JOIN       joined_article_journalist ON         journalist.id=joined_article_journalist.journalist_id           WHERE joined_article_journalist.article_id=:articleId\")\n    \u00a0\u00a0\u00a0\u00a0fun getAuthorsForArticle(articleId: Long): List<Journalist>\n    }\n    ```", "```kt\n    @Dao\n    interface JoinedArticleJournalistDao {\n    \u00a0\u00a0\u00a0\u00a0@Insert(onConflict = OnConflictStrategy.REPLACE)\n    \u00a0\u00a0\u00a0\u00a0fun insertArticleJournalist(joinedArticleJournalist:       JoinedArticleJournalist)\n    \u00a0\u00a0\u00a0\u00a0@Delete\n    \u00a0\u00a0\u00a0\u00a0fun deleteArticleJournalist(joinedArticleJournalist:       JoinedArticleJournalist)\n    }\n    ```", "```kt\n    @Database(\n    \u00a0\u00a0\u00a0\u00a0entities = [Article::class, Journalist::class,       JoinedArticleJournalist::class],\n    \u00a0\u00a0\u00a0\u00a0version = 1\n    )\n    abstract class NewsDatabase : RoomDatabase() {\n    \u00a0\u00a0\u00a0\u00a0abstract fun articleDao(): ArticleDao\n    \u00a0\u00a0\u00a0\u00a0abstract fun journalistDao(): JournalistDao\n    \u00a0\u00a0\u00a0\u00a0abstract fun joinedArticleJournalistDao():       JoinedArticleJournalistDao\n    }\n    ```", "```kt\n    NewsDatabaseTest.kt\n    15@RunWith(AndroidJUnit4::class)\n    16class NewsDatabaseTest {\n    17\n    18\u00a0\u00a0\u00a0\u00a0private lateinit var db: NewsDatabase\n    19\u00a0\u00a0\u00a0\u00a0private lateinit var articleDao: ArticleDao\n    20\u00a0\u00a0\u00a0\u00a0private lateinit var journalistDao: JournalistDao\n    21\u00a0\u00a0\u00a0\u00a0private lateinit var joinedArticleJournalistDao:         JoinedArticleJournalistDao\n    22\n    23\u00a0\u00a0\u00a0\u00a0 @Before\n    24\u00a0\u00a0\u00a0\u00a0 fun setUp() {\n    25\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val context =             ApplicationProvider.getApplicationContext<Context>()\n    26\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0db = Room.inMemoryDatabaseBuilder(context,             NewsDatabase::class.java).build()\n    27\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0articleDao = db.articleDao()\n    28\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0journalistDao = db.journalistDao()\n    29\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0joinedArticleJournalistDao =             db.joinedArticleJournalistDao()\n    30\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initData()\n    31\u00a0\u00a0\u00a0\u00a0}\n    The complete code for this step can be found at http://packt.live/3oWok6a.\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0@Test\n    \u00a0\u00a0\u00a0\u00a0fun updateArticle() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val article = articleDao.loadAllArticles()[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0articleDao.updateArticle(article.copy(title =           \"new title\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(\"new title\",           articleDao.loadAllArticles()[0].title)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0@Test\n    \u00a0\u00a0\u00a0\u00a0fun updateJournalist() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val journalist = journalistDao.loadAllJournalists()[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0journalistDao.updateJournalist(journalist.copy(jobTitle           = \"new job title\"))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(\"new job title\",           journalistDao.loadAllJournalists()[0].jobTitle)\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0@Test\n    \u00a0\u00a0\u00a0\u00a0fun deleteArticle() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val article = articleDao.loadAllArticles()[0]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(2,           journalistDao.getAuthorsForArticle(article.id).size)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0articleDao.deleteArticle(article)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(4, articleDao.loadAllArticles().size)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0assertEquals(0,           journalistDao.getAuthorsForArticle(article.id).size)\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```kt\nclass ToastyLifecycleObserver(val onStarted: () -> Unit) :   LifecycleObserver {\n\u00a0\u00a0\u00a0\u00a0@OnLifecycleEvent(Lifecycle.Event.ON_START)\n\u00a0\u00a0\u00a0\u00a0fun onStarted() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onStarted.invoke()\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0lifecycle.addObserver(ToastyLifecycleObserver {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Toast.makeText(this, \"Started\", Toast.LENGTH_LONG).show()\n})\n```", "```kt\n    class SplitActivity : AppCompatActivity() {\n    \u00a0\u00a0\u00a0\u00a0override fun onCreate(savedInstanceState: Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onCreate(savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lifecycle.addObserver(ToastyLifecycleObserver {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Toast.makeText(this, \"Started\",               Toast.LENGTH_LONG).show()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    class LifecycleActivity : Activity(), LifecycleOwner {\n    \u00a0\u00a0\u00a0\u00a0private val lifecycleRegistry: LifecycleRegistry =       LifecycleRegistry(this)\n    \u00a0\u00a0\u00a0\u00a0override fun onCreate(savedInstanceState: Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super.onCreate(savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lifecycleRegistry.currentState = Lifecycle.State.CREATED\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lifecycleRegistry.addObserver(ToastyLifecycleObserver {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Toast.makeText(applicationContext, \"Started\",               Toast.LENGTH_LONG).show()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0override fun getLifecycle(): Lifecycle {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return lifecycleRegistry\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0override fun onStop() {\n    super.onStop()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lifecycleRegistry.currentState = Lifecycle.State.STARTED\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<activity android:name=\".LifecycleActivity\" >\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<intent-filter>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<action android:name=\"android.intent.action.MAIN\"                   />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<category android:name=                  \"android.intent.category.LAUNCHER\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</intent-filter>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</activity>\n    ```"]