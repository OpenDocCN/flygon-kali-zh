["```js\nconst jsArray = [];\n```", "```js\nconst foodList = ['sushi', 'fried chicken', 21];\n```", "```js\nconst sushi = foodList[0];\nfoodList[2] = 'steak';\n```", "```js\n    > let exampleArray1 = [];\n    => undefined\n    > Array.isArray(exampleArray1);\n    => true\n    ```", "```js\n    > let exampleArray2 = new Array();\n    => undefined\n    > Array.isArray(exampleArray2);\n    => true\n    ```", "```js\n    > let exampleArray3 = [];\n    => undefined\n    > typeof exampleArray3\n    => 'object'\n    ```", "```js\n    > let exampleArray4 = new Array(6)\n    => undefined\n    > exampleArray4\n    => [ <6 empty items> ]\n    or\n    > let singers = new Array(6).fill('miku')\n    => undefined\n    > singers\n    => [ 'miku', 'miku', 'miku', 'miku', 'miku', 'miku' ]\n    ```", "```js\n    > singers[0] = 'miku'\n    => 'miku'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > singers[3] = 'luka'\n    => 'luka'\n    > singers[1]\n    => undefined\n    ```", "```js\n    > singers[singers.length - 1] = 'rin'\n    => 'rin'\n    > singers\n    => [ 'miku', 'miku', 'miku', 'miku', 'miku', 'rin' ]\n    ```", "```js\n    > let singers = [];\n    => undefined\n    ```", "```js\n    > singers.push('miku')\n    => 1\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > let food = new Array(3)\n    => undefined\n    > food.push('burger')\n    => 4\n    > food\n    => [ <3 empty items>, 'burger' ]\n    ```", "```js\n    > singers.push('me')\n    => 2\n    > singers\n    => [ 'miku', 'me' ]\n    > singers.pop()\n    => 'me'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > singers.unshift('rin')\n    => 2\n    > singers\n    => [ 'rin', 'miku' ]\n    ```", "```js\n    > singers.shift()\n    => 'rin'\n    > singers\n    => [ 'miku' ]\n    ```", "```js\n    > let foods = []\n    => undefined\n    > foods.push('burger')\n    => 1\n    > foods.push('fries')\n    => 2\n    > foods.push('wings')\n    => 3\n    ```", "```js\n    > foods.indexOf('burger')\n    => 0\n    ```", "```js\n    > foods.length\n    => 3\n    ```", "```js\n    > let position = foods.indexOf('burger')\n    => undefined\n    > foods.splice(position, 1) // splice(startIndex, deleteCount)\n    => [ 'burger' ]\n    > foods\n    => [ 'fries', 'wings' ]\n    ```", "```js\nconst myObj = {};\n```", "```js\nmyObj.item1 = 'item1';\nmyObj.item2 = 12;\n```", "```js\nconst item = myObj.item1;\n```", "```js\n> dancers = []\n=> undefined\n> dancers.push({ name: 'joey', age: 30 })\n=> undefined\n```", "```js\n> let myConsole = { name: 'PS4', color: 'black', price: 499, library: []}\n=> undefined\n```", "```js\n> Object.keys(myConsole)\n=> [ 'name', 'color', 'price', 'library' ]\n```", "```js\n> if (myConsole.ramSize) {\n... console.log('ram size is defined.');\n... }\n> undefined\n```", "```js\n> if (myConsole.price) {\n... console.log('price is defined.');\n... }\n> price is defined.\n```", "```js\n    > singers = []\n    => undefined\n    ```", "```js\n    > singers.push({ name: 'miku', age: 16 })\n    => undefined\n    ```", "```js\n    > singers[0].name = 'Hatsune Miku'\n    => 'Hatsune Miku'\n    > singers\n    => [ { name: 'Hatsune Miku', age: 16 } ]\n    ```", "```js\n    > singers[0].birthday = 'August 31'\n    => 'August 31'\n    > singers\n    => [ { name: 'Hatsune Miku', age: 16, birthday: 'August 31' } ]\n    ```", "```js\n    > singers[0].name\n    => 'Hatsune Miku'\n    or\n    > const propertyName = 'name'\n    => undefined\n    > singers[0][propertyName]\n    => 'Hatsune Miku'\n    ```", "```js\nconst user = {\n\u00a0\u00a0\u00a0name: 'r1cebank',\n\u00a0\u00a0\u00a0favoriteFood: [\n\u00a0\u00a0\u00a0\u00a0\u00a0 'ramen',\n\u00a0\u00a0\u00a0\u00a0\u00a0 'sushi',\n\u00a0\u00a0\u00a0\u00a0\u00a0 'fried chicken'\n\u00a0\u00a0\u00a0]\n};\n```", "```js\nJSON.stringify(user);\n```", "```js\n    function betterStringify(item, propertyMap) {\n    }\n    ```", "```js\n    let output = {};\n    ```", "```js\n    propertyMap.forEach((key) => {\n    });\n    ```", "```js\n    propertyMap.forEach((key) => {\n    if (item[key]) {\n    \u00a0\u00a0\u00a0output[key] = item[key];\n    }\n    });\n    ```", "```js\n    const singer = {\n     name: 'Hatsune Miku',\n     age: 16,\n     birthday: 'August 31',\n     birthplace: 'Sapporo, Japan',\n     songList: [\n    \u00a0\u00a0'World is mine',\n    \u00a0\u00a0'Tell your world',\n    \u00a0\u00a0'Melt'\n     ]\n    }\n    console.log(betterStringify(singer, ['name', 'birthday']))\n    ```", "```js\nconst param = ['My Name', 12, 'Developer'];\n```", "```js\nconst name = param[0];\nconst age = param[1];\nconst job = param[2];\n```", "```js\n[name, age, job] = param;\n```", "```js\n    > const userInfo = ['John', 'chef', 34]\n    => undefined\n    ```", "```js\n    > let name, age, job\n    => undefined\n    ```", "```js\n    > [name, job, age] = userInfo\n    => [ 'John', 'chef', 34 ]\n    ```", "```js\n    > name\n    => 'John'\n    > job\n    => 'chef'\n    > age\n    => 34\n    ```", "```js\n    > [name, ,age] = userInfo\n    => [ 'John', 'chef', 34 ] // we ignored the second element 'chef'\n    ```", "```js\n    > const userInfo = { name: 'John', job: 'chef', age: 34 }\n    => undefined\n    ```", "```js\n    > let name, job\n    => undefined\n    ```", "```js\n    > ({ name, job } = userInfo)\n    => { name: 'John', job: 'chef', age: 34 }\n    ```", "```js\n    > name\n    => 'John'\n    > job\n    => 'chef'\n    ```", "```js\n    > userInfo = ['John', 'chef', 34]\n    => undefined\n    > [ name, , age] = userInfo\n    => undefined\n    > name\n    => 'John'\n    > age\n    => 34\n    ```", "```js\n    > const userInfoObj = { name: 'John', job: 'chef', age: 34 }\n    => undefined\n    > let { job } = userInfoObj\n    => undefined\n    > job\n    => 'chef'\n    ```", "```js\nprintUser(...userInfo)\n```", "```js\n    > const userInfo = ['John', 'chef', 34]\n    => undefined\n    ```", "```js\n    > function printUser(name, job, age) {\n    ... console.log(name + ' is working as ' + job + ' and is ' + age + ' years old');\n    ... }\n    => undefined\n    ```", "```js\n    > printUser(...userInfo)\n    John is working as chef and is 34 years old\n    ```", "```js\n    > const detailedInfo = ['male', ...userInfo, 'July 5']\n    => [ 'male', 'John', 'chef', 34, 'July 5' ]\n    ```", "```js\n    > let detailedInfoCopy = [ ...detailedInfo ];\n    => undefined\n    > detailedInfoCopy\n    => [ 'male', 'John', 'chef', 34, 'July 5' ]\n    ```", "```js\n    > const userRequest = { name: 'username', type: 'update', data: 'newname'}\n    => undefined\n    ```", "```js\n    > const newObj = { ...userRequest }\n    => undefined\n    > newObj\n    => { name: 'username', type: 'update', data: 'newname' }\n    ```", "```js\n    > const detailedRequestObj = { data: new Date(), new: true, ...userRequest}\n    => undefined\n    > detailedRequestObj\n    => { data: 'newname', new: true, name: 'username', type: 'update' }\n    ```", "```js\nfunction sum(...numbers) {\n\u00a0\u00a0\u00a0console.log(numbers);\n}\nsum(1, 2, 3, 4, 5, 6, 7, 8, 9);\n```", "```js\nfunction sum(initial, ...numbers) {\n\u00a0\u00a0\u00a0console.log(initial, numbers);\n}\n```", "```js\nsum(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n```", "```js\nfunction Food(name) {\n\u00a0\u00a0\u00a0this.name = name;\n}\nvar leek = new Food(\"leek\");\nconsole.log(leek.name); // Outputs \"leek\"\n```", "```js\nfunction ClassName(param1, param2) {\n\u00a0\u00a0\u00a0// Constructor Logic\n}\n```", "```js\nclass ClassName {\n\u00a0\u00a0\u00a0constructor(param1, param2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 // Constructor logic\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0method1(param) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 // Method logic\n\u00a0\u00a0\u00a0}\n}\n```", "```js\n    function Food(name, calories, cost) {\n    \u00a0\u00a0\u00a0this.name = name;\n    \u00a0\u00a0\u00a0this.calories = calories;\n    \u00a0\u00a0\u00a0this.cost = cost;\n    }\n    ```", "```js\n    Food.prototype.description = function () {\n    \u00a0\u00a0\u00a0return this.name + ' calories: ' + this.calories;\n    }\n    ```", "```js\n    let burger = new Food('burger', 1000, 9);\n    ```", "```js\n    console.log(burger.description());\n    ```", "```js\n    class Food {\n    }\n    ```", "```js\n    console.log(typeof Food) // should print out 'function'\n    ```", "```js\n    class Food {\n    \u00a0\u00a0\u00a0constructor(name, calories, cost) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.name = name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.calories = calories;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.cost = cost;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    class Food {\n    \u00a0\u00a0\u00a0constructor(name, calories, cost) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.name = name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.calories = calories;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.cost = cost;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0description() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return this.name + ' calories: ' + this.calories;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    Food('burger', 1000, 9);\n    // TypeError: Class constructor Food2 cannot be invoked without 'new'\n    ```", "```js\n    let friedChicken = new Food('fried chicken', 520, 5);\n    ```", "```js\n    console.log(friedChicken.description());\n    ```", "```js\n    class Food {\n    \u00a0\u00a0\u00a0constructor(name, calories, cost) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.name = name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.calories = calories;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.cost = cost;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0static getCalories(food) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return food.calories\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0description() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return this.name + ' calories: ' + this.calories;\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    console.log(Food.getCalories(friedChicken)); /// 520\n    ```", "```js\n    class MySimpleCache {\n    constructor() {\n    \u00a0\u00a0\u00a0// Declare your cache internal properties here\n    \u00a0\u00a0\u00a0this.cacheItems = {};\n    }\n    }\n    ```", "```js\n    addItem(key, value) {\n    // Add an item with the key\n    this.cacheItems[key] = value;\n    \u00a0\u00a0}\n    ```", "```js\n    updateItem(key, value) {\n    // Update a value use the key\n    this.addItem(key, value);\n    }\n    ```", "```js\n    removeItem(key) {\n    this.updateItem(key, undefined);\n    }\n    ```", "```js\n    function testMyCache() {\n    \u00a0\u00a0\u00a0const cache = new MySimpleCache ();\n    \u00a0\u00a0\u00a0cache.addItem('user1', { name: 'user1', dob: 'Jan 1' });\n    \u00a0\u00a0\u00a0cache.addItem('user2', { name: 'user2', dob: 'Jul 21' });\n    \u00a0\u00a0\u00a0cache.updateItem('user1', { name: 'user1', dob: 'Jan 2' });\n    \u00a0\u00a0\u00a0cache.addItem('user3', { name: 'user3', dob: 'Feb 1' });\n    \u00a0\u00a0\u00a0cache.removeItem('user3');\n    \u00a0\u00a0\u00a0assert(cache.getItem('user1').dob === 'Jan 2');\n    \u00a0\u00a0\u00a0assert(cache.getItem('user2').dob === 'Jul 21');\n    \u00a0\u00a0\u00a0assert(cache.getItem('user3') === undefined);\n    \u00a0\u00a0\u00a0console.log ('=====TEST PASSED=====')\n    }\n    testMyCache();\n    ```", "```js\nclass MySubClass extends ParentClass {\n}\n```", "```js\n    class Vehicle {\n    \u00a0\u00a0\u00a0constructor(name, speed, cost) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.name = name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.speed = speed;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.cost = cost;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Starting vehicle, ' + this.name + ' at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0buy() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Buying for ' + this.cost);\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    const vehicle = new Vehicle('bicycle', 15, 100);\n    vehicle.start();\n    vehicle.buy();\n    ```", "```js\n    class Car extends Vehicle {}\n    class Plane extends Vehicle {}\n    class Rocket extends Vehicle {}\n    ```", "```js\n    class Car extends Vehicle {\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Driving car, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0}\n    }\n    class Plane extends Vehicle {\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Flying plane, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0}\n    }\n    class Rocket extends Vehicle {\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Flying rocket to the moon, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    const car = new Car('Toyota Corolla', 120, 5000);\n    const plane = new Plane('Boeing 737', 1000, 26000000);\n    const rocket = new Rocket('Saturn V', 9920, 6000000000);\n    ```", "```js\n    car.start();\n    plane.start();\n    rocket.start();\n    ```", "```js\n    class Car extends Vehicle {\n    \u00a0\u00a0\u00a0constructor(name, speed, cost, tankSize) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 super(name, speed, cost);\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.tankSize = tankSize;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Driving car, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    const car2 = new Car('Toyota Corolla 2', 120, 5000, 2000);\n    console.log(car2.tankSize); // 2000\n    ```", "```js\n    function printStat() {\n    \u00a0\u00a0\u00a0console.log('The car has a tanksize of ', this.tankSize);\n    }\n    ```", "```js\n    class Car extends Vehicle {\n    \u00a0\u00a0\u00a0constructor(name, speed, cost, tankSize) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 super(name, speed, cost);\n    \u00a0\u00a0\u00a0\u00a0\u00a0 this.tankSize = tankSize;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Driving car, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0\u00a0\u00a0 printStat();\n    \u00a0\u00a0\u00a0}\n    }\n    ```", "```js\n    const car = new Car('Toyota Corolla', 120, 5000, 2000);\n    car.start();\n    ```", "```js\n    start() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 console.log('Driving car, at ' + this.speed + 'km/h');\n    \u00a0\u00a0\u00a0\u00a0\u00a0 printStat.bind(this)();\n    \u00a0\u00a0\u00a0}\n    ```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\n```", "```js\nconst names = singers.map((singer) => singer.name);\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nsingers.forEach((singer) => {\n\u00a0\u00a0\u00a0console.log(singer.name);\n})\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nconst miku = singers.find((singer) => singer.name === 'Miku');\n```", "```js\nconst singers = [{ name: 'Miku', age: 16}, { name: 'Kaito', age: 20 }];\nconst youngSingers = singers.filter((singer) => singer.age < 30);\n```", "```js\nconst programmingLanguages = ['C', 'Java', 'Python'];\nconst myMappedArray = programmingLanguages.map((language) => {\n\u00a0\u00a0\u00a0return 'I know ' + language;\n});\n```", "```js\nfoods.forEach(eat_food);\n```", "```js\n    const foods = ['sushi', 'tofu', 'fried chicken'];\n    ```", "```js\n    foods.join(', ');\n    ```", "```js\n    function eat_food(food) {\n    \u00a0\u00a0\u00a0console.log('I am eating ' + food);\n    }\n    ```", "```js\n    const foods = ['sushi', 'tofu', 'fried chicken'];\n    function eat_food(food) {\n    \u00a0\u00a0\u00a0console.log('I am eating ' + food);\n    }\n    for(let i = 0; i < foods.length; i++) {\n    \u00a0\u00a0\u00a0eat_food(foods[i]);\n    }\n    ```", "```js\n    foods.forEach(eat_food);\n    ```", "```js\n    const nutrition = [100, 50, 400]\n    ```", "```js\n    const foodInfo = foods.map((food, index) => {\n    \u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 name: food,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 calories: nutrition[index]\n    \u00a0\u00a0\u00a0};\n    });\n    ```", "```js\n    console.log(foodInfo);\n    ```", "```js\n    let profiles = [\n    \u00a0\u00a0\u00a0'Michael Scott',\n    \u00a0\u00a0\u00a0'Jim Halpert',\n    \u00a0\u00a0\u00a0'Dwight Shrute',\n    \u00a0\u00a0\u00a0'Random User',\n    \u00a0\u00a0\u00a0'Hatsune Miku',\n    \u00a0\u00a0\u00a0'Rin Kagamine'\n    ];\n    ```", "```js\n    let hasJim = profiles.includes('Jim Halpert');\n    console.log(hasJim);\n    ```", "```js\n    const profiles = [\n    \u00a0\u00a0\u00a0{ name: 'Michael Scott', age: 42 },\n    \u00a0\u00a0\u00a0{ name: 'Jim Halpert', age: 27},\n    \u00a0\u00a0\u00a0{ name: 'Dwight Shrute', age: 37 },\n    \u00a0\u00a0\u00a0{ name: 'Random User', age: 10 },\n    \u00a0\u00a0\u00a0{ name: 'Hatsune Miku', age: 16 },\n    \u00a0\u00a0\u00a0{ name: 'Rin Kagamine', age: 14 }\n    ]\n    ```", "```js\n    hasJim = profiles.includes({ name: 'Jim Halpert', age: 27});\n    console.log(hasJim);\n    ```", "```js\n    hasJim = !!profiles.find((profile) => {\n    \u00a0\u00a0\u00a0return profile.name === 'Jim Halpert';\n    }).length;\n    console.log(hasJim);\n    ```", "```js\n    const adults = profiles.filter((profile) => {\n    \u00a0\u00a0\u00a0return profile.age > 18;\n    });\n    console.log(adults);\n    ```", "```js\nfunction compareNumber(a, b) {\n\u00a0\u00a0\u00a0return a - b;\n}\n```", "```js\nfunction compareAge(a, b) {\n\u00a0\u00a0\u00a0return a.age - b.age;\n}\n```", "```js\n    const numbers = [ 20, 1, 3, 55, 100, 2];\n    ```", "```js\n    numbers.sort();\n    console.log(numbers);\n    ```", "```js\n    function compareNumber(a, b) {\n    \u00a0\u00a0\u00a0return a - b;\n    }\n    ```", "```js\n    numbers.sort(compareNumber);\n    console.log(numbers);\n    ```", "```js\n    const profiles = [\n    \u00a0\u00a0\u00a0{ name: 'Michael Scott', age: 42 },\n    \u00a0\u00a0\u00a0{ name: 'Jim Halpert', age: 27},\n    \u00a0\u00a0\u00a0{ name: 'Dwight Shrute', age: 37 },\n    \u00a0\u00a0\u00a0{ name: 'Random User', age: 10 },\n    \u00a0\u00a0\u00a0{ name: 'Hatsune Miku', age: 16 },\n    \u00a0\u00a0\u00a0{ name: 'Rin Kagamine', age: 14 }\n    ]\n    ```", "```js\n    profiles.sort();\n    console.log(profiles);\n    ```", "```js\n    function compareAge(a, b) {\n    \u00a0\u00a0\u00a0return a.age - b.age;\n    }\n    ```", "```js\n    profiles.sort(compareAge);\n    console.log(profiles);\n    ```", "```js\nArray.reduce((previousValue, currentValue) => {\n\u00a0\u00a0\u00a0// reducer\n}, initialValue);\n```", "```js\n    const cart = [];\n    ```", "```js\n    cart.push({ name: 'CD', price: 12.00, amount: 2 });\n    cart.push({ name: 'Book', price: 45.90, amount: 1 });\n    cart.push({ name: 'Headphones', price: 5.99, amount: 3 });\n    cart.push({ name: 'Coffee', price: 12.00, amount: 2 });\n    cart.push({ name: 'Mug', price: 15.45, amount: 1 });\n    cart.push({ name: 'Sugar', price: 5.00, amount: 1 });\n    ```", "```js\n    let total = 0;\n    cart.forEach((item) => {\n    \u00a0\u00a0\u00a0total += item.price * item.amount;\n    });\n    console.log('Total amount: ' + total);\n    ```", "```js\n    function priceReducer (accumulator, currentValue) {\n    \u00a0\u00a0\u00a0return accumulator += currentValue.price * currentValue.amount;\n    }\n    ```", "```js\n    total = cart.reduce(priceReducer, 0);\n    console.log('Total amount: ' + total);\n    ```", "```js\n    const map = new Map()\n    ```", "```js\n    const key1 = 'key1';\n    const key2 = { name: 'John', age: 18 };\n    const key3 = Map;\n    ```", "```js\n    map.set(key1, 'value for key1');\n    map.set(key2, 'value for key2');\n    map.set(key3, 'value for key3');\n    ```", "```js\n    console.log(map.get(key1));\n    console.log(map.get(key2));\n    console.log(map.get(key3));\n    ```", "```js\n    console.log(map.get({ name: 'John', age: 18 }));\n    ```", "```js\n    map.forEach((value, key) => {\n    \u00a0\u00a0\u00a0console.log('the value for key: ' + key + ' is ' + value);\n    });\n    ```", "```js\n    console.log(map.keys());\n    console.log(map.values());\n    ```", "```js\n    console.log(map.has('non exist')); // false\n    ```", "```js\n    const planets = [\n    \u00a0\u00a0\u00a0'Mercury',\n    \u00a0\u00a0\u00a0'Uranus',\n    \u00a0\u00a0\u00a0'Mars',\n    \u00a0\u00a0\u00a0'Venus',\n    \u00a0\u00a0\u00a0'Neptune',\n    \u00a0\u00a0\u00a0'Saturn',\n    \u00a0\u00a0\u00a0'Mars',\n    \u00a0\u00a0\u00a0'Jupiter',\n    \u00a0\u00a0\u00a0'Earth',\n    \u00a0\u00a0\u00a0'Saturn'\n    ]\n    ```", "```js\n    const planetSet = new Set(planets);\n    ```", "```js\n    console.log(planetSet.values());\n    ```", "```js\n    planetSet.add('Venus');\n    planetSet.add('Kepler-440b');\n    ```", "```js\n    console.log(planetSet.size);\n    ```", "```js\n    planetSet.clear();\n    console.log(planetSet);\n    ```", "```js\nconst currentDate = new Date();\n```", "```js\nconst myString = 'this is a string';\n```", "```js\nconst random = Math.random();\n```", "```js\n    let planet = 'Earth';\n    ```", "```js\n    let sentence = `We are on the planet ${planet}`;\n    ```", "```js, while the variable to be inserted in the string is wrapped with `${}`.\n\n3.  Separate our sentence into words:\n\n    ```", "```js\n\n    We can split strings into arrays by using the `split` method and a separator. In the preceding example, JavaScript will split our sentence into an array of words, like so:\n\n    ![Figure 7.44: Splitting a string into an array of words\n    ](Images/C14587_07_44.jpg)\n\n    ###### Figure 7.44: Splitting a string into an array of words\n\n4.  We can also use `replace` to replace any matched substring with another substring, as follows:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.45: Replacing a word in a string\n    ](Images/C14587_07_45.jpg)\n\n    ###### Figure 7.45: Replacing a word in a string\n\n    In the `replace` method, we will provide the first parameter as the substring to match in the string. The second parameter is the string you want it to be replaced with.\n\n5.  Check whether our sentence includes the word `Mars`:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.46: Checking the string for the presence of a character\n    ](Images/C14587_07_46.jpg)\n\n    ###### Figure 7.46: Checking the string for the presence of a character\n\n6.  You can also convert the entire string into uppercase or lowercase:\n\n    ```", "```js\n\n7.  Get a character at index in the string using `charAt`:\n\n    ```", "```js\n\n    Since sentences are not necessarily arrays, you cannot access a specific character at index such as an array. To do that, you need to call the `charAt` method.\n\n8.  Get the length of the string using the `length` property of the string:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n![Figure 7.47: Length of the sentence after our modification\n](Images/C14587_07_47.jpg)\n\n###### Figure 7.47: Length of the sentence after our modification\n\nIn this exercise, we went over ways in which we can construct strings using template strings and string methods, which help us manipulate strings. These are very useful in applications that deal with a lot of user input. In the next exercise, we will go over Math and Date methods.\n\n### Math and Date\n\nIn this section, we will go over Math and Date types. We rarely deal with Math in our applications but when we do, it's very useful to utilize the Math library. Later, we will talk about the Date object and its methods. The Math and Date classes include various useful methods to help us do mathematical calculations and date manipulations.\n\n### Exercise 57: Using Math and Date\n\nIn this exercise, we will learn how to implement Math and Date types in JavaScript. We will use them to generate random numbers and use their built-in constants for mathematical calculations. We are also going to use the Date object to test the different ways we can treat dates in JavaScript. Let's get started:\n\n1.  Create a function called `generateRandomString`:\n\n    ```", "```js\n\n2.  Create a function that generates a random number within a certain range:\n\n    ```", "```js\n\n    In the preceding function, `Math.random` generates a random number between 0 inclusive and 1 exclusive. When we want a number between the two ranges, we can also use `Math.floor` to round the number down to make sure it doesn't include `max` in our output.\n\n3.  Use the random number generator function in `generateRandomString`:\n\n    ```", "```js\n\n    The method we need for our random number generation is very simple \u2013 we have a character set that we want to include in the random string. Later, we will run a loop to get a random character using the function we created, using `charAt` with a random index passed to it.\n\n4.  Test out our function:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.48: Output of our random String function\n    ](Images/C14587_07_48.jpg)\n\n    ###### Figure 7.48: Output of our random String function\n\n    Every time we run this function, it will give us a totally random string with the size we just passed. It is a really simple way to generate random usernames, but not very suitable for generating IDs as it doesn't really guarantee uniqueness.\n\n5.  Use `Math` constants to create a function that calculates circle areas, as follows:\n\n    ```", "```js\n\n    In this function, we used `Math.PI` from the `Math` object. It is assigned to an approximation of the actual `PI` value. We also used the `Math.pow` method to raise the radius from the argument to the power of 2\\. Next, we will explore the `Date` type in JavaScript.\n\n6.  Create a new `Date` object:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.49: Output of the new Date object\n    ](Images/C14587_07_49.jpg)\n\n    ###### Figure 7.49: Output of the new Date object\n\n    When we create the new `Date` object with nothing, it will generate an object that stores the current time.\n\n7.  Create a new `Date` object at a specific date and time:\n\n    ```", "```js\n\n    The `Date` constructor will take a string argument that can be parsed into a date. When we call the constructor using this string, it will create a `Date` object on that date and time.\n\n8.  Get the year, month, and date from our `past` Date object:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.50: Year, month, and date of the past date object \n    ](Images/C14587_07_50.jpg)\n\n    ###### Figure 7.50: Year, month, and date of the past date object\n\n    The returned month doesn't start from 1, where January is 1\\. Instead, it started from 0, so August is 7.\n\n9.  You can also generate a string represented version of the object by calling `toString`:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.51: Date presented in string form\n    ](Images/C14587_07_51.jpg)\n\n    ###### Figure 7.51: Date presented in string form\n\n    By using the `toString` method, we can simply use this to keep a record of a timestamp in our applications.\n\n10.  If you want to get the Unix time, you can use `Date.now:`\n\n    ```", "```js\n\n    The reason we are using `Math.floor` again is that we need to divide the output of `Date.now` by 1,000 because it is returned in milliseconds.\n\nIn this exercise, we went over a couple ways that Math and Date types can be used in our applications. They are incredibly useful when we want to generate stuff such as pseudorandom IDs or random strings. The `Date` object is also used when we need to keep track of timestamps in our applications. In the next section, we will briefly go over Symbols, Iterators, Generators, and Proxies.\n\n## Symbols, Iterators, Generators, and Proxies\n\nIn JavaScript development, these types are rarely used, but for some use cases, they can be very useful. In this section, we will go over what these are and how we can use them in our applications.\n\n### Symbol\n\nSymbols are unique values; they can be used as an identifier because every time you call `Symbol()`, it returns a unique symbol. Even the function returns a Symbol type. However, it cannot be called using the `new` keyword because it is not a constructor. When stored in objects, they are not included when you iterate through the property list, so if you want to store anything as a property inside the object and do not want them to be exposed when you run `JSON.stringify`, you can use Symbols to achieve that.\n\n### Iterator and Generator\n\nIterator and Generator are often used together. Generator functions are functions whose code is not executed immediately when invoked. When a value is to be returned from the generator, it needs to be called using `yield`. It stops executing after that until the next function is called again. This makes generators perfect for using iterators. In iterators, we need to define the function that has the `next` method and each time it is called, a value will be returned. By using these two together, we can build very powerful iterators with a large amount of reusable code.\n\nSymbols are a hard concept in JavaScript, and they are not used frequently. In this exercise, we will go over a couple of ways we can use Symbols and explore their properties.\n\n### Exercise 58: Using Symbols and Exploring Their Properties\n\nIn this exercise we will use Symbols and their properties to identify object properties. Let's get started:\n\n1.  Create two symbols:\n\n    ```", "```js\n\n2.  Test their equivalence:\n\n    ```", "```js\n\n    Both statements will be evaluated to false. This is because symbols are unique in JavaScript and even if they have the same name, they are still not equal.\n\n3.  Create a test object with some properties:\n\n    ```", "```js\n\n4.  Create a property in the object using symbols as keys:\n\n    ```", "```js\n\n5.  Print out the keys in the object:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.52: List of keys printed out using Object.keys\n    ](Images/C14587_07_52.jpg)\n\n    ###### Figure 7.52: List of keys printed out using Object.keys\n\n    It appears that calling `Object.keys` didn't return our `Symbol` property. The reason behind that is that because Symbols are not enumerable, so they will not be returned by either `Object.keys` or `Object.getOwnPropertyNames`.\n\n6.  Let's try to get the value of our `Symbol` property:\n\n    ```", "```js\n\n7.  Use the `Symbol` registry:\n\n    ```", "```js\n\n    In this example, we can run a search on the `Symbol` key and store that reference in our new constant. The `Symbol` registry is a registry for all the symbols in our application. Here, you can store the symbols you created in a global registry so they can be retrieved later.\n\n8.  Retrieve the content of the `Symbol` property using its reference:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n![Figure 7.53: Result when we retrieve values using a symbol reference\n](Images/C14587_07_53.jpg)\n\n###### Figure 7.53: Result when we retrieve values using a symbol reference\n\nWhen we run this, it will print out the result we wanted. When we create a symbol using `Symbol.for`, we will create a one-to-one relationship between the key and the reference so that when we use `Symbol.for` to get another reference, these two symbols will be equal.\n\nIn this exercise, we went over some of the properties of symbols. They are very useful if you need to use them as identifiers for an `object` property. Using the `Symbol` registry can also help us relocate the `Symbol` we created previously. In the next exercise, we will talk about the general usage of iterators and generators.\n\nIn the previous exercise, we went over Symbols. There is another type of `Symbol` in JavaScript known as `Symbol.iterator`, which is a specific symbol that's used to create iterators. In this exercise, we will make an iterrable object using generators.\n\n### Exercise 59: Iterators and Generators\n\nThere is a very useful function called `range()` in Python that generates numbers between a given range; now, let's try to recreate it with iterators:\n\n1.  Create a function called `range` that returns an object with the `iterator` property:\n\n    ```", "```js\n\n2.  Use the `for..in` loop on our `range` function:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.54: Output using a for..in loop\n    ](Images/C14587_07_54.jpg)\n\n    ###### Figure 7.54: Output using a for..in loop\n\n    When we run this, it only yields one value. To modify it to yield multiple results, we will be wrapping it with a loop.\n\n3.  Let's wrap the `yield` statement with a loop:\n\n    ```", "```js\n\n    Normally, this wouldn't work with `returns` as it can only be returned once. This is because the generator function is expected to be consumed multiple times using `.next()`. We can delay its execution until it is called again:\n\n    ![Figure 7.55: Output after wrapping the yield statement with a loop\n    ](Images/C14587_07_55.jpg)\n\n    ###### Figure 7.55: Output after wrapping the yield statement with a loop\n\n    To understand generator functions better, we can also define a simple generator function without implementing it in an iterator.\n\n4.  Create a generator function called `gen`:\n\n    ```", "```js\n\n    This is a very simple definition of a generator function. When it is called, it will return a generator that can only be iterated through once. However, you can generate as many generators as you wish using the preceding function.\n\n5.  Generate a `generator` function:\n\n    ```", "```js\n\n6.  Call the generator's `next` method to get its values:\n\n    ```", "```js\n\n    When we call `.next()` on a generator, it will execute our code until it reaches the `yield` keyword. Then, it will return the value yielded by that statement. It also includes a `done` property to indicate whether this generator has finished iterating through all the possible values. Once the generator has reached the `done` status, there is no way to restart the iteration unless you are modifying the internal states:\n\n![Figure 7.56: Value after yielding the statement\n](Images/C14587_07_56.jpg)\n\n###### Figure 7.56: Value after yielding the statement\n\nAs you can see, the first time we call the next method, we will get the value 1\\. After that, the `done` property will be set to `true`. No matter how many times we call it, it will always return `undefined`, meaning the generator is done iterating.\n\nIn this exercise, we went over iterators and generators. They are very powerful in JavaScript and a lot of early async/await functionality, before it was officially supported, was created using generator functions. Next time you create custom classes or objects that can be iterated through, you can create generators. This makes the code cleaner as there is no need to manage a lot of internal states.\n\n### Proxies\n\nWhen you need extra fine-grained control over your objects where you need to manage every fundamental operation, you can use proxies. You can consider the JavaScript proxy as a middleman between your operations and your objects. Every object manipulation can have proxies through it, meaning you can implement a very complex object. In the next exercise, we will go over creative ways we can use proxies to enable our objects.\n\nProxies act like a middleman between your object and the rest of the program. Any changes that are made to that object will be relayed by the proxy and the proxy will determine what to do with that change.\n\nCreating proxies is very easy \u2013 all you need to do is call the `Proxy` constructor with the object, including our handlers and the object we are proxying. Once the proxy has been created, you can treat the proxy as the original value, and you can start modifying properties on the proxy.\n\nThe following is an example usage of a proxy:\n\n```", "```js\n\nWe've created a `proxiesValue` and given it a set handler. When we try to set the `prop1` property, we will get the following output:\n\n![Figure 7.57: Proxy value created\n](Images/C14587_07_57.jpg)\n\n###### Figure 7.57: Proxy value created\n\n### Exercise 60: Using Proxies to Build Complex Objects\n\nIn this exercise, we will be using proxies to show you how to build an object that is able to hide its values and enforce a data type on the properties. We will be expanding and customizing some fundamental operations here too. Let's get started:\n\n1.  Create a basic JavaScript object:\n\n    ```", "```js\n\n2.  Create a `handlers` object:\n\n    ```", "```js\n\n3.  Create a proxy wrapping for our basic object:\n\n    ```", "```js\n\n4.  Now, add `handlers` to our proxy:\n\n    ```", "```js\n\n    Here, we added a `get` handler for our object, where we ignore the key it is requesting and just return a fixed string. When we do this, no matter what we do, the object will only return the value we have defined.\n\n5.  Let's test our handler in the proxy:\n\n    ```", "```js\n\n    The following is the output of the preceding code:\n\n    ![Figure 7.58: Testing the handler in the proxy\n    ](Images/C14587_07_58.jpg)\n\n    ###### Figure 7.58: Testing the handler in the proxy\n\n    When we run this code, we assigned a value to `key1` in the object, but because of the way we defined our handlers when we tried to read back the values, it always gives us the string we defined earlier. When we try this on a value that doesn't exist, it also returns the same result.\n\n6.  Let's add a `set` handler for validation:\n\n    ```", "```js\n\n    We added a `set` handler; this handler will be called every time we try to perform a set operation on our proxy integer.\n\n7.  Try to set the `id` to a string:\n\n    ```", "```js\n\n![Figure 7.59: Screenshot showing TypeError when trying to set id to string\n](Images/C14587_07_59.jpg)\n\n###### Figure 7.59: Screenshot showing TypeError when trying to set id to string\n\nAnd just as you might have guessed, when we try to set this, it will give us a `TypeError` exception. This is very useful if you are building a library and you don't want the internal properties to be overwritten. You can do this using symbols, but using proxies is also an option. Another use for this is for implementing validation.\n\nIn this exercise, we talked about some of the creative methods we can use to make our objects. By using proxies, we can create very complex objects with built-in validation.\n\n### Refactoring in JavaScript\n\nWhen using JavaScript in large-scale applications, we need to do refactoring from time to time. Refactoring means rewriting parts of the code while maintaining compatibility. Because JavaScript has gone through many phases and upgrades, refactoring also takes advantage of the new features that are offered and allows our application to run faster and be more reliable. An example of refactoring is as follows:\n\n```", "```js\n\nThis code simply appends a prefix to all the elements in the input array. Let's call it like this:\n\n```", "```js\n\nWe will get the following output:\n\n![Figure 7.60: Output after running an array code\n](Images/C14587_07_60.jpg)\n\n###### Figure 7.60: Output after running an array code\n\nDuring refactoring, we can write the preceding function with less code and still retain all the features:\n\n```", "```js\n\nWhat happens when we call it again? Let's take a look:\n\n```"]