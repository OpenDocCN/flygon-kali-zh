["```kt\nrambo.soldierType = \"fluffy bunny\";\n```", "```kt\nweightlifter.legstrength = 100;\nweightlifter.armstrength = 1;\nweightlifter.liftHeavyWeight();\n// one typo and weightlifter rips own arms off\n```", "```kt\npublic class Soldier{\n\u00a0\u00a0\u00a0//Implementation goes here\n}\n```", "```kt\nprivate int myInt;\n```", "```kt\npublic Soldier mySoldier = new Soldier();\n```", "```kt\npublic useMeEverybody(){\n\u00a0\u00a0\u00a0//do something everyone needs to do here\n}\n```", "```kt\nprivate secretInternalTask(){\n\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0do something that helps the class function \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0internally\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Perhaps, if it is part of the same class,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useMeEverybody could use this method...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0On behalf of the classes outside of this class.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Neat!\n\u00a0\u00a0\u00a0*/\n}\n```", "```kt\nfairlySecretTask(){\n\u00a0\u00a0\u00a0// allow just the classes in the package\n\u00a0\u00a0\u00a0// Not for external use\n}\n```", "```kt\nprotected packageTask(){\n\u00a0\u00a0\u00a0// Allow just the classes in the package\n\u00a0\u00a0\u00a0// And you can use me if you extend me too\n}\n```", "```kt\nclass Hospital{\n\u00a0\u00a0\u00a0private void healSoldier(Soldier soldierToHeal){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int health = soldierToHeal.getHealth();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0health = health + 10;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0soldierToHeal.setHealth(health);\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\npublic class Soldier{\n\n\u00a0\u00a0\u00a0private int health;\n\u00a0\u00a0\u00a0public int getHealth(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return health;\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0public void setHealth(int newHealth){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Check for bad values of newHealth\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0health = newHealth;\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\nSoldier mySoldier = new Soldier();\n// mySoldier.health = 100;//Doesn't work, private\n// we can use the public setter setHealth() instead\nmySoldier.setHealth(100); //That's better\nHospital militaryHospital = new Hospital();\n// Oh no mySoldier has been wounded\nmySoldier.setHealth(10);\n/*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0Take him to the hospital.\n\u00a0\u00a0\u00a0But my health variable is private\n\u00a0\u00a0\u00a0And Hospital won't be able to access it\n\u00a0\u00a0\u00a0I'm doomed - tell Laura I love her\n\u00a0\u00a0\u00a0No wait- what about my public getters and setters?\n\u00a0\u00a0\u00a0We can use the public getters and setters \n\u00a0\u00a0\u00a0from another class\n*/\nmilitaryHospital.healSoldier(mySoldier);\n// mySoldiers private variable health has been increased \n// by 10\\. I'm feeling much better thanks!\n```", "```kt\nmySoldier.name\nmysoldier.type\nmySoldier.weapon\nmySoldier.regiment\n...\n```", "```kt\nSoldier mySoldier = new Soldier();\n```", "```kt\n...Soldier();\n```", "```kt\npublic Soldier(){\n\u00a0\u00a0\u00a0// Someone is creating a new Soldier object\n\n\u00a0\u00a0\u00a0health = 200;\n\u00a0\u00a0\u00a0// more setup here\n}\n```", "```kt\npublic class Soldier{\n\u00a0\u00a0\u00a0String name;\n\u00a0\u00a0\u00a0String type;\n\u00a0\u00a0\u00a0int health;\n\u00a0\u00a0\u00a0// This is the constructor\n\u00a0\u00a0\u00a0// It is called when a new instance is created\n\u00a0\u00a0\u00a0public Soldier(String name, String type, int health){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Someone is creating a new Soldier object\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.type = type;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.health = health;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// more setup here\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\nLog myLog\u00a0\u00a0= new Log();\nToast myToast = new Toast();\n```", "```kt\nLog.i(\"info\",\"our message here\");\nToast.makeText(this, \"our message\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nToast.LENGTH_SHORT).show();\n```", "```kt\nLog.i(\"info\",\"our message here\");\n```", "```kt\nToast.makeText(this, \"our message\", \nToast.LENGTH_SHORT).show();\n```", "```kt\npublic static final int LENGTH_SHORT = 1;\n```", "```kt\npublic class AlienShip {\n\n\u00a0\u00a0\u00a0private static int numShips;\n\u00a0\u00a0\u00a0private int shieldStrength;\n\u00a0\u00a0\u00a0public String shipName;\n```", "```kt\npublic AlienShip(){\n\u00a0\u00a0\u00a0numShips++;\n\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Can call private methods from here because I am \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0part of the class.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0If didn't have \"this\" then this call \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0might be less clear\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0But this \"this\" isn't strictly necessary\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Because of \"this\" I am sure I am setting \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the correct shieldStrength\n\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0this.setShieldStrength(100);\n}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0public static int getNumShips(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return numShips;\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\nprivate void setShieldStrength(int shieldStrength){\n\n\u00a0\u00a0\u00a0// \"this\" distinguishes between the \n\u00a0\u00a0\u00a0// member variable shieldStrength\n\u00a0\u00a0\u00a0// And the local variable/parameter of the same name\n\u00a0\u00a0\u00a0this.shieldStrength = shieldStrength;\n\n}\n```", "```kt\npublic int getShieldStrength(){\n\u00a0\u00a0\u00a0\u00a0return this.shieldStrength;\n}\n```", "```kt\npublic void hitDetected(){\n\u00a0\u00a0\u00a0\u00a0shieldStrength -=25;\n\u00a0\u00a0\u00a0\u00a0Log.i(\"Incomiming: \",\"Bam!!\");\n\u00a0\u00a0\u00a0\u00a0if (shieldStrength == 0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0destroyShip();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n\u00a0\u00a0\u00a0private void destroyShip(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numShips--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Explosion: \", \"\"+this.shipName + \" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0destroyed\");\n\u00a0\u00a0\u00a0\u00a0}\n} // End of the class\n```", "```kt\n// every time we do this the constructor runs\nAlienShip girlShip = new AlienShip();\nAlienShip boyShip = new AlienShip();\n```", "```kt\n// Look no objects but using the static method\nLog.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n```", "```kt\n// This works because shipName is public\ngirlShip.shipName = \"Corrine Yu\";\nboyShip.shipName = \"Andre LaMothe\";\n```", "```kt\n// This won't work because shieldStrength is private\n// girlship.shieldStrength = 999;\n// But we have a public getter\nLog.i(\"girl shields: \", \"\" + girlShip.getShieldStrength());\nLog.i(\"boy shields: \", \"\" + boyShip.getShieldStrength());\n// And we can't do this because it's private\n// boyship.setShieldStrength(1000000);\n```", "```kt\n// let's shoot some ships\ngirlShip.hitDetected();\nLog.i(\"girl shields: \", \"\" + girlShip.getShieldStrength());\n\nLog.i(\"boy shields: \", \"\" + boyShip.getShieldStrength());\n\nboyShip.hitDetected();\nboyShip.hitDetected();\nboyShip.hitDetected();\n\nLog.i(\"girl shields: \", \"\" + girlShip.getShieldStrength());\n\nLog.i(\"boy shields: \", \"\" + boyShip.getShieldStrength());\n\nboyShip.hitDetected();//Ahhh!\n\nLog.i(\"girl shields: \", \"\" + girlShip.getShieldStrength());\nLog.i(\"boy shields: \", \"\" + boyShip.getShieldStrength());\n```", "```kt\n\nLog.i(\"numShips: \", \"\" + AlienShip.getNumShips());\n```", "```kt\nnumShips: 2\ngirl shields: 100\nboy shields: 100\nIncomiming: Bam!!\ngirl shields:\ufe55 75\nboy shields:\ufe55 100\nIncomiming: Bam!!\nIncomiming: Bam!!\ngirl shields:\ufe55 75\nboy shields:\ufe55 25\nIncomiming: Bam!!\nExplosion: Andre LaMothe destroyed\ngirl shields: 75\nboy shields: 0\nnumShips: 1\nboy shields: 0\nnumShips: 1\n```", "```kt\npublic class MainActivity extends AppCompatActivity ...\n```", "```kt\nsuper.onCreate(... \n```", "```kt\npublic class Animal{\n\u00a0\u00a0\u00a0// Some member variables\n\u00a0\u00a0\u00a0public int age;\n\u00a0\u00a0\u00a0public int weight;\n\u00a0\u00a0\u00a0public String type;\n\u00a0\u00a0\u00a0public int hungerLevel;\n\u00a0\u00a0\u00a0public void eat(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hungerLevel--;\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0public void walk(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hungerLevel++;\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\npublic class Elephant extends Animal{\n\n\u00a0\u00a0\u00a0public Elephant(int age, int weight){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.age = age;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.weight = weight;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.type = \"Elephant\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int hungerLevel = 0;\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\npublic abstract class AlienShip {\n\u00a0\u00a0\u00a0\u00a0private static int numShips;\n\u00a0\u00a0\u00a0\u00a0private int shieldStrength;\n\u00a0\u00a0\u00a0\u00a0public String shipName;\n\u00a0\u00a0\u00a0\u00a0public AlienShip(int shieldStrength){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Location: \", \"AlienShip constructor\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numShips++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setShieldStrength(shieldStrength);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public abstract void fireWeapon();\n\u00a0\u00a0\u00a0\u00a0// Ahh my body where is it?\n\u00a0\u00a0\u00a0\u00a0public static int getNumShips(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return numShips;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private void setShieldStrength(int shieldStrength){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.shieldStrength = shieldStrength;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public int getShieldStrength(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return this.shieldStrength;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void hitDetected(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shieldStrength -=25;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Incomiming: \", \"Bam!!\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (shieldStrength == 0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0destroyShip();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private void destroyShip(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numShips--;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Explosion: \", \"\" + this.shipName + \" \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0destroyed\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\npublic class Bomber extends AlienShip {\n\u00a0\u00a0\u00a0\u00a0public Bomber(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(100);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Weak shields for a bomber\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Location: \", \"Bomber constructor\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void fireWeapon(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Firing weapon: \", \"bombs away\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\npublic class Fighter extends AlienShip{\n\u00a0\u00a0\u00a0\u00a0public Fighter(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(400);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Strong shields for a fighter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Location: \", \"Fighter constructor\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public void fireWeapon(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.i(\"Firing weapon: \", \"lasers firing\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\nFighter aFighter = new Fighter();\nBomber aBomber = new Bomber();\n// Can't do this AlienShip is abstract -\n// Literally speaking as well as in code\n// AlienShip alienShip = new AlienShip(500);\n// But our objects of the subclasses can still do\n// everything the AlienShip is meant to do\naBomber.shipName = \"Newell Bomber\";\naFighter.shipName = \"Meier Fighter\";\n// And because of the overridden constructor\n// That still calls the super constructor\n// They have unique properties\nLog.i(\"aFighter Shield:\", \"\"+ aFighter.getShieldStrength());\nLog.i(\"aBomber Shield:\", \"\"+ aBomber.getShieldStrength());\n// As well as certain things in certain ways\n// That are unique to the subclass\naBomber.fireWeapon();\naFighter.fireWeapon();\n// Take down those alien ships\n// Focus on the bomber it has a weaker shield\naBomber.hitDetected();\naBomber.hitDetected();\naBomber.hitDetected();\naBomber.hitDetected();\n```", "```kt\nLocation:\ufe55 AlienShip constructor\nLocation:\ufe55 Fighter constructor\nLocation:\ufe55 AlienShip constructor\nLocation:\ufe55 Bomber constructor\naFighter Shield:\ufe55 400\naBomber Shield:\ufe55 100\nFiring weapon:\ufe55 bombs away\nFiring weapon:\ufe55 lasers firing\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nIncomiming:\ufe55 Bam!!\nExplosion:\ufe55 Newell Bomber destroyed\n```", "```kt\nAnimal feed(Animal animalToFeed){\n\u00a0\u00a0\u00a0// Feed any animal here\n\u00a0\u00a0\u00a0return animalToFeed;\n}\n```", "```kt\nsomeElephant = (Elephant) feed(someElephant);\n```", "```kt\nabstract class someClass{\n\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All methods and variables here.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0As usual!\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Just don't try and make \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0an object out of me!\n\u00a0\u00a0\u00a0*/\n}\n```", "```kt\npublic interface someInterface{\n\u00a0\u00a0\u00a0void someAbstractMethod();\n\u00a0\u00a0\u00a0// omg I've got no body\n\n\u00a0\u00a0\u00a0int anotherAbstractMethod();\n\u00a0\u00a0\u00a0// Ahh! Me too\n\u00a0\u00a0\u00a0// Interface methods are always abstract and public \n\u00a0\u00a0\u00a0// implicitly but we could make it explicit if we prefer\n\u00a0\u00a0\u00a0public abstract void \n\u00a0\u00a0\u00a0explicitlyAbstractAndPublicMethod();\n\u00a0\u00a0\u00a0// still no body though\n\n}\n```", "```kt\npublic class someClass implements someInterface{\n\u00a0\u00a0\u00a0// class stuff here\n\u00a0\u00a0\u00a0/* \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Better implement the methods of the interface \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or we will have errors.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0And nothing will work\n\u00a0\u00a0\u00a0*/\n\n\u00a0\u00a0\u00a0public void someAbstractMethod(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// code here if you like \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// but just an empty implementation will do\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0public int anotherAbstractMethod(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// code here if you like \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// but just an empty implementation will do\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Must have a return type though \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// as that is part of the contract\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return 1;\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0Public void explicitlyAbstractAndPublicMethod(){\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n    \u00a0\u00a0\u00a0private class someClass{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// class implementation goes here\n    \u00a0\u00a0\u00a0}\n    ```"]