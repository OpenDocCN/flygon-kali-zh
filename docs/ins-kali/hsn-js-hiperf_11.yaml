- en: Service Workers - Caching and Making Things Faster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务工作者-缓存和加速
- en: So far, we have looked at dedicated and shared workers, which help throw computationally
    expensive tasks into the background. We have even created a shared cache that
    utilizes `SharedWorker`. Now, we will take a look at service workers and learn
    how they can be used to cache both resources (such as HTML, CSS, JavaScript, and
    so on) and data for us so that we don't have to make expensive round trips to
    our server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过了专用和共享工作线程，它们帮助将计算密集型任务放入后台。我们甚至创建了一个使用`SharedWorker`的共享缓存。现在，我们将看一下服务工作者，并学习它们如何用于为我们缓存资源（如HTML、CSS、JavaScript等）和数据，以便我们不必进行昂贵的往返到服务器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the ServiceWorker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解ServiceWorker
- en: Caching pages and templates for offline use
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为离线使用缓存页面和模板
- en: Saving requests for later
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存请求以备后用
- en: By the end of this chapter, we will be able to create offline experiences for
    our web applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将能够为我们的Web应用程序创建离线体验。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要以下内容：
- en: An editor or IDE, preferably VS Code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个编辑器或IDE，最好是VS Code
- en: Chrome
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌浏览器
- en: An environment that can run Node.js
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以运行Node.js的环境
- en: This chapter's code, which can be found at [https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter11).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-High-Performance-Web-Development-with-JavaScript/tree/master/Chapter11)找到。
- en: Understanding the ServiceWorker
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解ServiceWorker
- en: 'A `ServiceWorker` is a proxy that sits between our web applications and the
    server. It catches requests that are made and checks if there is a pattern that
    matches it. If a pattern matches it, then it will run the code that fits that
    pattern. Writing code for a `ServiceWorker` is a bit different than it is for
    `SharedWorker` and `DedicatedWorker`, which we looked at previously. Initially,
    we set it up in some code and it downloads itself. We have various events that
    tell us the stage that the worker is in. These run in the following order:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`ServiceWorker`是一个位于我们的Web应用程序和服务器之间的代理。它捕获所做的请求并检查是否有与之匹配的模式。如果有模式匹配，则它将运行与该模式匹配的代码。为`ServiceWorker`编写代码与我们之前查看的`SharedWorker`和`DedicatedWorker`有些不同。最初，我们在一些代码中设置它并下载自身。我们有各种事件告诉我们工作线程所处的阶段。这些按以下顺序运行：'
- en: '**Download**: The `ServiceWorker` is downloading itself for the domain or subdomain.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载**：`ServiceWorker`正在为其托管的域或子域下载自身。'
- en: '**Install**: The `ServiceWorker` is attaching itself to the domain or subdomain
    where it is hosted.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装**：`ServiceWorker`正在附加到其托管的域或子域。'
- en: '**Activate**: The `ServiceWorker` is fully attached and is loaded up to intercept
    requests.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**激活**：`ServiceWorker`已完全附加并加载以拦截请求。'
- en: The install event is especially important. This is where we can listen for a
    `ServiceWorker` that is updated. Say that we want to push new code out for our
    `ServiceWorker`. If a user is still on a page when we decide to push that code
    out to the server, they will still have the old worker. There are ways to kill
    off this old worker and force them to update (as we will see in a bit), but it
    will still utilize the old cache.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装事件尤其重要。这是我们可以监听更新的`ServiceWorker`的地方。假设我们想要为我们的`ServiceWorker`推送新代码。如果用户仍在我们决定将该代码推送到服务器时的页面上，他们仍将使用旧的工作线程。有办法终止旧的工作线程并强制它们更新（我们稍后会看到），但它仍将使用旧缓存。
- en: On top of this, if we are utilizing a cache to store the resources that are
    being requested, they will be stored in the old cache. If we were to update these
    resources, then we want to make sure that we dump the previous cache and start
    with a new one. We will look at an example of this later, but it is good to know
    this upfront.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们正在使用缓存来存储被请求的资源，它们将存储在旧缓存中。如果我们要更新这些资源，那么我们要确保清除先前的缓存并开始使用新的缓存。稍后我们将看一个例子，但最好提前了解这一点。
- en: Finally, service workers will update themselves every 24 hours, so if we don't
    force the user to update the `ServiceWorker`, they will get this new copy on that
    24-hour mark. These are all ideas to keep in mind as we go through the examples
    in this chapter. We will remind you of these when we write them out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，服务工作者将每隔24小时更新一次自身，因此如果我们不强制用户更新`ServiceWorker`，他们将在24小时时获得这个新副本。这些都是我们在本章示例中要牢记的想法。我们在写出它们时会提醒您。
- en: 'Let''s start off with a very basic example. Follow these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常基本的例子开始。按照以下步骤进行：
- en: 'First, we need a static server so that we can work with service workers. To
    do this, run `npm install serve` and add the following code to the `app.js` file:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个静态服务器，以便我们可以使用服务工作者。为此，请运行`npm install serve`并将以下代码添加到`app.js`文件：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can serve all of our content from the `source` directory. Create a
    basic HTML page and have it load in a `ServiceWorker` called `BaseServiceWorker.js`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以从`source`目录中提供所有内容。创建一个基本的HTML页面，并让它加载一个名为`BaseServiceWorker.js`的`ServiceWorker`：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a basic `ServiceWorker` that will log to our console whenever a request
    is made:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基本的`ServiceWorker`，每当发出请求时都会记录到我们的控制台：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We should see two messages appear in our console. One should be static, stating
    that we have installed everything correctly, while the other will state that we
    have successfully registered a worker! Now, let's add a CSS file to our HTML and
    service it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在控制台中看到两条消息。一条应该是静态的，说明我们已经正确安装了所有内容，而另一条将说明我们已成功注册了一个工作线程！现在，让我们向我们的HTML添加一个CSS文件并对其进行服务。
- en: 'Call our new CSS file `main.css` and add the following CSS to it:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的新CSS文件命名为`main.css`并添加以下CSS：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add this CSS file to the top of our HTML page.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此CSS文件添加到我们的HTML页面的顶部。
- en: With this, reload the page and see what it states in the console. Notice how
    it doesn't state that we have successfully made a request. If we keep hitting
    the reload button, we may see the message appear before the page reloads. If we
    want to see this message, we can head to the following link inside of Chrome and
    inspect the `ServiceWorker` that's there: `chrome://serviceworker-internals`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，重新加载页面并查看控制台中显示的内容。注意它没有说明我们已成功发出请求。如果我们不断点击重新加载按钮，可能会在页面重新加载之前看到消息出现。如果我们想看到这条消息，我们可以在Chrome中转到以下链接并检查那里的`ServiceWorker`：`chrome://serviceworker-internals`。
- en: We may see other service workers being loaded in. Quite a few sites do this
    and it is a technique for caching certain pieces of a web page. We will look at
    this in more detail soon. This is why the first load can be quite a pain for some
    applications and why they seem to load up a lot faster afterward.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会看到其他服务工作者被加载。很多网站都这样做，这是一种缓存网页的技术。我们将很快更详细地研究这个问题。这就是为什么对于一些应用程序来说，第一次加载可能会很痛苦，而之后它们似乎加载得更快的原因。
- en: 'The top of the page should show an option for starting the dev tools when we
    start the `ServiceWorker`. Go ahead and check this option. Then, stop/start the
    worker. Now, a console should open that allows us to debug our `ServiceWorker`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 页面顶部应该显示一个选项，用于在启动`ServiceWorker`时启动开发工具。请检查此选项。然后，停止/启动工作线程。现在，将打开一个控制台，允许我们调试我们的`ServiceWorker`：
- en: '![](assets/dcee480a-892e-4485-aca2-9ca2cf3dddd3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dcee480a-892e-4485-aca2-9ca2cf3dddd3.png)'
- en: 'While this is great for debugging, if we take a look at the page where we initiate
    this behavior, we will see a little window that states something similar to the
    following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对调试很有用，但如果我们看一下启动此行为的页面，我们会看到一个小窗口，其中显示类似以下内容的信息：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is getting the CSS file every single time we reload the page! If we reload
    it a few more times, we should have more of these messages. This is interesting,
    but we can definitely do a bit better than this. Let''s go ahead and cache our
    `main.css` file. Add the following to our `BaseServiceWorker.js` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每次重新加载页面时都会获取CSS文件！如果我们再重新加载几次，应该会有更多这样的消息。这很有趣，但我们肯定可以做得更好。让我们继续缓存我们的`main.css`文件。将以下内容添加到我们的`BaseServiceWorker.js`文件中：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this, we have introduced a cache. This cache will fetch various resources
    for us. Along with this cache, we have introduced the `waitUntil` method of the
    event. This allows us to hold up the initialization of the `ServiceWorker` until
    we are done fetching all of the data we want from the server. Inside of our fetch
    handler, we are now checking to see if we have the resource in our cache. If we
    do, we will serve that file up; otherwise, we will just make the fetch request
    on the page's behalf.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们引入了一个缓存。这个缓存将为我们获取各种资源。除了这个缓存，我们还引入了事件的`waitUntil`方法。这允许我们延迟`ServiceWorker`的初始化，直到我们从服务器获取了所有想要的数据。在我们的fetch处理程序中，我们现在正在检查我们的缓存中是否有资源。如果有，我们将提供该文件；否则，我们将代表页面发出fetch请求。
- en: Now, if we load the page, we will notice that we just have the `we are ready`
    message. Even though we have new code, the page was cached by Chrome, so it hasn't
    let go of our old service worker. To force the new service worker to be added,
    we can go into our developer console and head to the Application tab. Then, we
    can go to the left panel and head over to the `ServiceWorker` section. There should
    be a timeline stating that there is a `ServiceWorker` waiting to be activated.
    If we click the text next to it that says skipWaiting, we can activate the new
    code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们加载页面，我们会注意到我们只有`we are ready`消息。尽管我们有新的代码，但页面被Chrome缓存了，所以它没有放弃我们的旧服务工作者。为了强制添加新的服务工作者，我们可以进入开发者控制台，转到应用程序选项卡。然后，我们可以转到左侧面板，转到`ServiceWorker`部分。应该有一个时间轴，说明有一个`ServiceWorker`正在等待被激活。如果我们点击旁边的文字，说skipWaiting，我们可以激活新代码。
- en: Go ahead and click on this option. It won't look like anything has happened,
    but if we head back to the `chrome://serviceworker-internals` page, we will see
    that there is a single message. If we keep reloading the page, we will see that
    we just have the one message. This means that we have loaded in our new code!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击此选项。看起来好像没有发生任何事情，但是如果我们返回到`chrome://serviceworker-internals`页面，我们会看到有一条消息。如果我们继续重新加载页面，我们会看到我们只有一条消息。这意味着我们已经加载了我们的新代码！
- en: 'Another way to check that we have successfully cached our `main.css` file is
    to throttle the download speed of our application (especially since we are hosting
    it locally). Head back to the developer tools and click the Network tab. There
    should be a dropdown of network speeds near the Disable cache option. Currently,
    it should state that we are online. Go ahead and turn this to offline:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检查我们是否成功缓存了`main.css`文件的方法是限制应用程序的下载速度（特别是因为我们是在本地托管）。返回开发人员工具，点击网络选项卡。在禁用缓存选项附近应该有一个网络速度的下拉菜单。目前，它应该显示我们在线。请将其切换到离线状态：
- en: '![](assets/15280a71-55c0-412f-9146-916062274e3b.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15280a71-55c0-412f-9146-916062274e3b.png)'
- en: 'Well, we just lost our page! Inside of `BaseServiceWorker.js`, we should add
    the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们刚刚丢失了我们的页面！在`BaseServiceWorker.js`中，我们应该添加以下内容：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we can turn our application online again and have this new `ServiceWorker`
    add itself to the page. Once it's been added, go ahead and turn our application
    offline. Now, the page works offline! We will explore this idea in more detail
    later, but this gives us a nice preview of this capability.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以再次将我们的应用程序上线，并让这个新的`ServiceWorker`添加到页面中。添加完成后，将我们的应用程序切换到离线状态。现在，页面可以离线工作！我们将稍后更详细地探讨这个想法，但这给了我们一个很好的预览。
- en: With this simple look at the `ServiceWorker` and caching mechanism, let's turn
    our attention to caching pages and adding some templating capabilities inside
    of our `ServiceWorker`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这简单的`ServiceWorker`和缓存机制的观察，让我们把注意力转向缓存页面并在`ServiceWorker`中添加一些模板功能。
- en: Caching pages and templates for offline use
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为离线使用缓存页面和模板
- en: 'As we stated at the beginning of this chapter, one of the main uses for service
    workers is to cache page resources for future use. We saw this with our first
    simple `ServiceWorker`, but we should set up a more complicated page with more
    resources. Follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头所述，Service Worker的主要用途之一是缓存页面资源以供将来使用。我们在第一个简单的`ServiceWorker`中看到了这一点，但我们应该设置一个更复杂的页面，其中包含更多资源。按照以下步骤进行：
- en: 'Create a brand new `ServiceWorker` called `CacheServiceWorker.js` and add the
    following template code to it. This is what most of the `ServiceWorker` instances
    will use:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`CacheServiceWorker.js`的全新`ServiceWorker`，并将以下模板代码添加到其中。这是大多数`ServiceWorker`实例将使用的代码：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Update our `index.html` file in order to utilize this new `ServiceWorker`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们的`index.html`文件，以利用这个新的`ServiceWorker`：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, let''s add some buttons and tables to our page. We will utilize these
    shortly:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的页面上添加一些按钮和表格。我们很快将利用这些：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a JavaScript file that will handle all of our interaction with the `interactions.js` page:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个JavaScript文件，用于处理我们与`interactions.js`页面的所有交互：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the JavaScript file to our `ServiceWorker` as a preload:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JavaScript文件添加到我们的`ServiceWorker`作为预加载：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the JavaScript file to the bottom of our `index.html` file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JavaScript文件添加到我们的`index.html`文件的底部：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, if we load our page, we should see a simple table sitting there with a
    header row and some buttons. Let''s go ahead and add some basic styling to our
    page to make it a bit easier to see. Add the following to that `main.css` file
    that we added when we were working with `BaseServiceWorker`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们加载我们的页面，我们应该看到一个简单的表格坐在那里，有一个标题行和一些按钮。让我们继续向我们的页面添加一些基本样式，以使它更容易看到。将以下内容添加到我们在处理`BaseServiceWorker`时添加的`main.css`文件中：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This CSS gives us some basic styling to work with. Now, if we hit the Add button,
    we should see the following message:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CSS为我们提供了一些基本的样式。现在，如果我们点击“添加”按钮，我们应该看到以下消息：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since we haven''t added any code to actually handle this, let''s go ahead and
    intercept this message inside of our `ServiceWorker`. Follow these steps to do
    so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有添加任何代码来处理这个问题，让我们继续在我们的`ServiceWorker`中拦截这条消息。按照以下步骤进行：
- en: 'Add the following dummy code to our `fetch` event handler for the `ServiceWorker`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下虚拟代码添加到我们的`ServiceWorker`的`fetch`事件处理程序中：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Click the Add button. We should see a new error stating that it could not parse
    the JSON message. Change the `Blob` data to some JSON:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”按钮。我们应该看到一个新的错误，说明它无法解析JSON消息。将“Blob”数据更改为一些JSON：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Click the Add button again. We should get something that states that what we
    just passed to our handler is not of the `Node` type. Parse the data that we got
    inside of our Add button''s click handler:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击“添加”按钮。我们应该得到一个声明，说明我们刚刚传递给处理程序的内容不是“Node”类型。解析我们在“添加”按钮的点击处理程序中得到的数据：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, if we try to run our code, we will see something interesting: our JavaScript
    file is still the old code. The `ServiceWorker` is utilizing the old cache that
    we had. We could do one of two things here. First, we could just disable the `ServiceWorker`.
    Alternatively, we could remove the old cache and replace it with our new one.
    We will perform the second option. To do this, we will need to add the following
    code to our `ServiceWorker` inside the install listener:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试运行我们的代码，我们会看到一些有趣的东西：我们的JavaScript文件仍然是旧代码。`ServiceWorker`正在使用我们以前的旧缓存。在这里我们可以做两件事。首先，我们可以禁用`ServiceWorker`。或者，我们可以删除旧缓存并用新缓存替换它。我们将执行第二个选项。为此，我们需要在安装监听器中添加以下代码到我们的`ServiceWorker`中：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we could have the template loaded in on the frontend code, but we're going
    to mimic a server-side rendered system here instead. There are a couple of applications
    for this, but the main one that comes to mind is a templating system that we are
    trying out in development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在前端代码中加载模板，但我们将在这里模拟一个服务器端渲染系统。这有一些应用场景，但我想到的主要应用场景是我们在开发中尝试的模板系统。
- en: Most template systems need to be compiled to their final HTML forms before we
    can use them. We could set up a *watch* type system where these templates are
    reloaded every single time we update them, but that can become tiresome, especially
    when we only want to focus on the frontend. Another way to do this is to load
    those templates into our `ServiceWorker` and let it render them. That way, when
    we want to make updates, we just have our cache be deleted through the `caches.delete` method
    and then reload it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模板系统需要在我们使用它们之前编译成最终的HTML形式。我们可以设置一个*watch*类型的系统，在这个系统中，每当我们更新模板时，这些模板都会被重新加载，但这可能会变得繁琐，特别是当我们只想专注于前端时。另一种方法是将这些模板加载到我们的`ServiceWorker`中，并让它渲染它们。这样，当我们想要进行更新时，我们只需通过`caches.delete`方法删除我们的缓存，然后重新加载它。
- en: 'Let''s go ahead and set up a simple example like the preceding one, but instead
    of the template being created in our frontend code, we will have it in our `ServiceWorker`.
    Follow these steps to do so:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一个简单的示例，就像前面的示例一样，但模板不是在我们的前端代码中创建的，而是在我们的`ServiceWorker`中。按照以下步骤进行：
- en: 'Create a template file called `row.template` and fill it in with the following
    code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`row.template`的模板文件，并用以下代码填充它：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Remove the templating code inside of our `interactions.js` and replace it with
    the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除我们的`interactions.js`中的模板代码，并用以下代码替换它：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s set up some basic templating code. We will do nothing close to what
    we did in [Chapter 9](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml), *Practical
    Example – Building a Static Server*. Instead, we will loop through the objects
    we get passed and fill in the parts of our template where our keys line up in
    the object:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置一些基本的模板代码。我们不会做任何接近[第9章](59d1466a-ef4d-42f8-bc88-f3d364c3d23e.xhtml)中所做的实际示例-构建静态服务器。相反，我们将循环遍历我们传递的对象，并填写我们的模板的部分，其中我们的键在对象中对应：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change the response to the `/add` endpoint with the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将响应更改为`/add`端点，使用以下代码：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, we will grab the template we want from the server (in our case, the `row.template`
    file) and fill it with whatever data we have (again, in our case we will use stub
    data). Now, we have templating inside of our `ServiceWorker` and can easily set
    up endpoints to go through this templating system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从服务器中获取我们想要的模板（在我们的情况下是`row.template`文件），并用我们拥有的任何数据填充它（同样，在我们的情况下，我们将使用存根数据）。现在，我们在`ServiceWorker`中有了模板，并且可以轻松地设置端点以通过这个模板系统。
- en: This can also be beneficial when we want to personalize the error pages of our
    site. If we want to have a random image appear and incorporate it in our 404 page,
    we could have this done in the `ServiceWorker` instead of hitting this server.
    We could even do this for an offline state. We would just need to implement the
    same type of templating that we did here.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要个性化网站的错误页面时，这也可能是有益的。如果我们想要在我们的404页面中出现一个随机图像并将其合并到页面中，我们可以在`ServiceWorker`中完成，而不是访问服务器。我们甚至可以在离线状态下这样做。我们只需要实现与此处相同类型的模板化。
- en: With these concepts in mind, it should be easy to see the power we have when
    intercepting requests and how we can make our web applications work offline. One
    final technique that we will learn about is storing our requests when we are offline
    and running them when we go back online. This type of technique can be used for
    saving or loading files from the browser. Let's take a look.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，很容易看到我们在拦截请求时的能力以及我们如何使我们的Web应用程序在离线时工作。我们将学习的最后一个技术是在离线时存储我们的请求，并在重新联机时运行它们。这种类型的技术可以用于从浏览器中保存或加载文件。让我们来看看。
- en: Saving requests for later
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存请求以便以后使用
- en: So far, we've learned how to intercept requests and either return or even enhance
    the response from our local system. Now, we will learn how to save requests when
    we are in offline mode and then send the calls to the server once we appear online.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何拦截请求并从我们的本地系统返回或甚至增强响应。现在，我们将学习如何在离线模式下保存请求，然后在联机时将调用发送到服务器。
- en: 'Let''s go ahead and set up a new folder for just this. Follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为此设置一个新的文件夹。按照以下步骤进行：
- en: 'Create a folder called `offline_storage` and add the following files to it:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`offline_storage`的文件夹，并向其中添加以下文件：
- en: '`index.html`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`main.css`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.css`'
- en: '`interactions.js`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interactions.js`'
- en: '`OfflineServiceWorker.js`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OfflineServiceWorker.js`'
- en: 'Add the following boilerplate code to `index.html`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下样板代码添加到`index.html`中：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following boilerplate code to `OfflineServiceWorker.js`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下样板代码添加到`OfflineServiceWorker.js`中：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, add the following boilerplate code to `interactions.js`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将以下样板代码添加到`interactions.js`中：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With all of this code in place, let''s go ahead and change our Node.js server
    so that it points to this new folder location. We''ll do this by stopping our
    old server and changing the `app.js` file so that it points to our `offline_storage`
    folder:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些代码放在一起后，让我们继续更改我们的Node.js服务器，使其指向这个新的文件夹位置。我们将通过停止旧服务器并更改`app.js`文件，使其指向我们的`offline_storage`文件夹来实现这一点：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With this, we can rerun our server by running `node app.js`. We may experience
    our old page showing up. If this is the case, we can go to the Application tab
    in our developer tools and click the Unregister option under the Service workers
    section. Once we reload the page, we should see the new `index.html` page show
    up. Our handlers aren''t working at the moment, so let''s add some stub code inside
    of our `ServiceWorker` that will handle the two fetch cases that we added in `interactions.js`.
    Follow these steps to do so:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以通过运行`node app.js`重新运行我们的服务器。我们可能会看到我们的旧页面出现。如果是这种情况，我们可以转到开发者工具中的“应用程序”选项卡，并在“服务工作者”部分下点击“注销”选项。重新加载页面后，我们应该看到新的`index.html`页面出现。我们的处理程序目前不起作用，所以让我们在`ServiceWorker`中添加一些存根代码，以处理我们在`interactions.js`中添加的两种fetch情况。按照以下步骤进行：
- en: 'Add the following support inside the fetch event handler for the request:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在fetch事件处理程序中添加以下支持：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s make sure this code handles the response correctly by making sure that
    it adds a row to our table. Reload the page and make sure a new row is added when
    we click the Request button:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过确保它正确处理响应，确保它向我们的表中添加一行。重新加载页面并确保在单击请求按钮时添加了新行：
- en: '![](assets/1636a18d-88bd-4817-8bf2-a68b8cb20cc5.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1636a18d-88bd-4817-8bf2-a68b8cb20cc5.png)'
- en: 'Now that we have made sure that that handler is working, let''s go ahead and
    add the other handler for our delete request. We will mimic a delete for a database
    on the server in our `ServiceWorker`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经确保该处理程序正在工作，让我们继续为我们的删除请求添加另一个处理程序。我们将在我们的`ServiceWorker`中模拟服务器上的数据库删除：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With this, let's go ahead and test it to make sure that our rows are deleting
    when we click the Delete button. If all of this is working, we will have a functioning
    application that can work online or offline.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了这个，让我们继续测试一下，确保我们点击删除按钮时行被删除。如果所有这些都有效，我们将拥有一个可以在线或离线工作的功能应用程序。
- en: 'Now, all we need to do is add support for requests that are going to go out
    but can''t because we are currently offline. To do this, we will store requests
    in an array, and once we detect that we are back online in our `ServiceWorker`,
    we will send all the requests out. We will also add some support to let our frontend
    know that we are waiting on so many requests and that if we want, we can cancel
    them out. Let''s add this now:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们所需要做的就是为即将发出但由于我们目前处于离线状态而无法发出的请求添加支持。为此，我们将在一个数组中存储请求，并一旦在我们的`ServiceWorker`中检测到我们重新联机，我们将发送所有请求。我们还将添加一些支持，让我们的前端知道我们正在等待这么多请求，如果需要，我们可以取消它们。现在让我们添加这个：
- en: In Chrome, switching from offline to online will trigger our **online** handler,
    but switching from online to offline doesn't seem to trigger the event. We can
    test the offline-to-online system functionality, but testing the other way around
    can be a bit more difficult. Just note that this limitation could be in place
    on many development systems and that trying to account for this can be quite difficult.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中，从离线切换到在线会触发我们的**在线**处理程序，但从在线切换到离线似乎不会触发事件。我们可以测试离线到在线系统的功能，但测试另一种情况可能会更加困难。请注意，这种限制可能存在于许多开发系统中，试图解决这个问题可能会非常困难。
- en: 'First, move most of our `caches.match` code to a standalone function, like
    so:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将我们大部分的`caches.match`代码移动到一个独立的函数中，如下所示：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Code the standalone function, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写独立的函数，如下所示：
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We will handle requests by polling them to see if we are back online. Set up
    a poll timer that will work every 30 seconds and change our `caches.match` handler
    like so:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过轮询处理请求，以查看我们是否重新联机。设置一个每30秒工作一次的轮询计时器，并将我们的`caches.match`处理程序更改如下：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What we have just done is set up a return for a promise. If we can't see the
    system online, we will keep polling every 30 seconds to see if we are back online.
    Once we are back online, our promise will clear the interval and actually handle
    the request in the resolve handler. We could set a system of so many attempts
    before we cancel the request. All we would have to do is add a reject handler
    after so many times through the interval.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做的是为一个promise设置了一个返回。如果我们看不到系统在线，我们将每30秒轮询一次，以查看我们是否重新联机。一旦我们重新联机，我们的promise将清除间隔，并在resolve处理程序中实际处理请求。我们可以设置一个在取消请求之前尝试多少次的系统。我们只需要在间隔之后添加一个拒绝处理程序。
- en: 'Finally, we will add a way to stop all currently outstanding requests. To do
    this, we will need a way of keeping track of whether we have requests outstanding
    and a way to abort them in the `ServiceWorker`. This will be quite simple since
    we can easily keep track of what is still pending in the frontend. We can add
    this by doing the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一种方法来停止当前所有未处理的请求。为此，我们需要一种方法来跟踪我们是否有未处理的请求，并且一种在`ServiceWorker`中中止它们的方法。这将非常简单，因为我们可以很容易地在前端跟踪仍在等待的内容。我们可以通过以下方式添加这个功能：
- en: 'First, we will add a display that shows how many outstanding requests we have
    in the frontend. We will put this right after our online status system:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个显示，显示前端有多少未处理的请求。我们将把这个显示放在我们的在线状态系统之后：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add a button that will cancel all outstanding requests to our `index.html` file.
    Also, add the corresponding JavaScript code to our `interactions.js` file:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`index.html`文件中添加一个按钮，用于取消所有未处理的请求。同时，在我们的`interactions.js`文件中添加相应的JavaScript代码：
- en: '[PRE33]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the corresponding handler to our `ServiceWorker` for the stop request:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为停止请求添加相应的处理程序到我们的`ServiceWorker`：
- en: '[PRE34]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, we will utilize something called an `AbortController`. This system allows
    us to send signals to things such as fetch requests so that we can say that we
    want to stop the pending request. While this system is mainly for stopping fetch
    requests, we can actually utilize the signal in order to stop any asynchronous
    requests. We do this by creating an `AbortController` and grabbing the signal
    from it. Then, inside of our promise, we listen for the abort event on the signal
    and reject the promise.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将利用一个叫做`AbortController`的东西。这个系统允许我们向诸如fetch请求之类的东西发送信号，以便我们可以说我们想要停止等待的请求。虽然这个系统主要用于停止fetch请求，但实际上我们可以利用这个信号来停止任何异步请求。我们通过创建一个`AbortController`并从中获取信号来实现这一点。然后，在我们的promise中，我们监听信号上的中止事件并拒绝promise。
- en: 'Add the `AbortController`, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`AbortController`，如下所示：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, if we go into our system and ready up some requests in offline mode and
    then click the Cancel button, we will see that all of our requests get canceled!
    We could have put the `AbortController` on the fetch request in our frontend `interactions.js`
    file, but once we go back online, all of the promises would have still run, so
    we wanted to make sure that nothing was running. This is why we put it in the
    `ServiceWorker`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们进入我们的系统，在离线模式下准备一些请求，然后点击取消按钮，我们会看到所有的请求都被取消了！我们本可以把`AbortController`放在我们前端的`interactions.js`文件中的fetch请求上，但一旦我们恢复在线，所有的promise仍然会运行，所以我们想确保没有任何东西在运行。这就是为什么我们把它放在`ServiceWorker`中的原因。
- en: By doing this, we have seen how we can not only handle requests by caching data
    for them but that we can also store those requests when we have spotty locations.
    On top of this, we have seen how we can utilize the `AbortController` to stop
    pending promises and how to utilize them besides just stopping fetch requests.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们不仅看到了我们可以通过缓存数据来处理请求，还看到了当我们处于不稳定的位置时，我们可以存储这些请求。除此之外，我们还看到了我们可以利用`AbortController`来停止等待的promise以及如何利用它们除了停止fetch请求之外的其他用途。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how service workers can turn our applications from
    always being online to systems where we can create truly *always working* applications.
    By saving the state, handling requests locally, enriching requests locally, and
    even saving requests for offline use, we are able to handle the full state of
    our application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了服务工作者如何将我们的应用程序从始终在线转变为我们可以创建真正*始终工作*的应用程序的系统。通过保存状态、本地处理请求、本地丰富请求，甚至保存离线使用的请求，我们能够处理我们应用程序的完整状态。
- en: Now that we have looked at creating rich web applications from both the client
    side and the server side with JavaScript, we will start to take a look at some
    advanced techniques that we can use to create highly performant applications that
    we only thought were possible through native application code. We can do this
    by utilizing C, C++, or Rust.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从客户端和服务器端使用JavaScript创建了丰富的Web应用程序，我们将开始研究一些高级技术，这些技术可以帮助我们创建高性能的应用程序，这些应用程序以前只能通过本机应用程序代码实现。我们可以通过使用C、C++或Rust来实现这一点。
- en: However, before we get to that, one piece of application development that is
    often overlooked by application developers is the deployment process. In the next
    chapter, we will look at a way of setting up **continuous integration and continuous
    development** (**CI**/**CD**) through a popular system called CircleCI.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们讨论这个之前，一个经常被应用开发者忽视的应用开发的部分是部署过程。在下一章中，我们将介绍一种通过一个流行系统叫做CircleCI 来建立持续集成和持续开发（CI/CD）的方法。
