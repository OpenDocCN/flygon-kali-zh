["```cs\npublic struct Person\n{\n    public int Age;\n    public string Name;\n}\n```", "```cs\npublic class Person\n{\n    public int Age;\n    public string Name;\n}\n```", "```cs\nprivate int _value;\n\npublic int Value\n{\n    get { return _value; }\n    set { _value = value; }\n}\n```", "```cs\npublic delegate void MyClickDelegate(string value);\n```", "```cs\npublic class MyClass\n{\n    public event MyClickDelegate OnClick;\n}\n```", "```cs\npublic void Initialize()\n{\n    MyClass obj = new MyClass();\n    obj.OnClick += new MyClickDelegate(obj_OnClick);\n}\n\nvoid obj_OnClick(string value)\n{\n    // react to the event\n}\n```", "```cs\n// first, collect the paycheck amount\nConsole.WriteLine(\"How much were you paid? \");\nstring input = Console.ReadLine();\nfloat paycheckAmount = float.Parse(input);\n\n// now, collect all of the bills\nConsole.WriteLine(\"What bills do you have to pay? \");\nArrayList bills = new ArrayList();\ninput = Console.ReadLine();\nwhile (input != \"\")\n{\n    float billAmount = float.Parse(input);\n    bills.Add(billAmount);\n    input = Console.ReadLine();\n}\n\n// finally, summ the bills and do the final output\nfloat totalBillAmount = 0;\nfor (int i = 0; i < bills.Count; i++)\n{\n    float billAmount = (float)bills[i];\n    totalBillAmount += billAmount;\n}\n\nif (paycheckAmount > totalBillAmount)\n{\n    Console.WriteLine(\"You will have {0:c} left over after paying bills\", paycheckAmount - totalBillAmount);\n}\nelse if (paycheckAmount < totalBillAmount)\n{\n    Console.WriteLine(\"Not enough money, you need to find an extra {0:c}\", totalBillAmount - paycheckAmount);\n}\nelse\n{\n    Console.WriteLine(\"Just enough to cover bills\");\n}\n```", "```cs\nnamespace System.Collections\n{\n    public interface IEnumerable\n    {\n        IEnumerator GetEnumerator();\n    }\n\n    public interface IEnumerator\n    {\n        object Current { get; }\n        bool MoveNext();\n        void Reset();\n    }\n}\n```", "```cs\nint[] numbers = new int[3];\nnumbers[0] = 1;\nnumbers[1] = 2;\nnumbers[2] = 3;\n\nforeach (int number in numbers)\n{\n    Console.WriteLine(number);\n}\n```", "```cs\nIEnumerator enumerator = numbers.GetEnumerator();\n\nwhile (enumerator.MoveNext())\n{\n    int number = (int)enumerator.Current;\n    Console.WriteLine(number);\n}\n```", "```cs\nprivate int _value;\n\npublic int Value\n{\n    get { return _value; }\n}\n```", "```cs\nprivate void SetValue(int value)\n{\n    if (_value < 5)\n        _value = value;\n}\n```", "```cs\nprivate int _value;\n\npublic int Value\n{\n    get { return _value; }\n    private set\n    {\n        if (_value < 5)\n            _value = value;\n    }\n}\n```", "```cs\nint? number = null;\nif (number.HasValue)\n{\n    int actualValue = number.Value;\n    Console.WriteLine(actualValue);\n}\n```", "```cs\npublic delegate void ProcessNameDelegate(string name);\n```", "```cs\nProcessNameDelegate myDelegate = delegate(string name)\n{\n    Console.WriteLine(\"Processing Name = \" + name);\n};\n\nmyDelegate(\"Joel\");\n```", "```cs\npublic class CustomThreadStarter\n{\n    private int value;\n    public CustomThreadStarter(int val)\n    {\n        this.value = val;\n    }\n\n    public void Execute()\n    {\n        // do something with 'value'\n    }\n}\n```", "```cs\nCustomThreadStarter starter = new CustomThreadStarter(55);\nThreadStart start = new ThreadStart(starter.Execute);\nThread thread = new Thread(start);\nthread.Start();\n```", "```cs\nint value = 55;\nThread thread = new Thread(delegate()\n    {\n        // do something with 'value'\n        Console.WriteLine(value);\n    });\nthread.Start();\n```", "```cs\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:2.0.50727.3053\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n```", "```cs\n// A.generated.cs\npublic partial class A\n{\n    public string Name;\n}\n```", "```cs\n// A.cs\npublic partial class A\n{\n    public int Age;\n}\n```", "```cs\npublic class Message<T>\n{\n    public T Value;\n}\n```", "```cs\nMessage<int> message = new Message<int>();\nmessage.Value = 3;\nint variable = message.Value;\n```", "```cs\npublic struct Vector\n{\n    public float X;\n    public float Y;\n\n    public void Add(Vector other)\n    {\n        this.X += other.X;\n        this.Y += other.Y;\n    }\n}\n```", "```cs\npublic struct Vector<T>\n{\n    public T X;\n    public T Y;\n\n    public void Add(Vector<T> other)\n    {\n        this.X += other.X;\n        this.Y += other.Y;\n    }\n}\n```", "```cs\npublic void WriteIt<T>(T list) where T : IEnumerable\n{\n    foreach (object item in list)\n    {\n        Console.WriteLine(item);\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\n```", "```cs\nList<int> list = new List<int>();\nlist.Add(1);\nlist.Add(2);\nlist.Add(3);\n\nint value = list[1]; // returns 2;\n```", "```cs\nprivate static IEnumerable<string> GetStates()\n{\n    yield return \"Orlando\";\n    yield return \"New York\";\n    yield return \"Atlanta\";\n    yield return \"Los Angeles\";\n}\n```", "```cs\nforeach (string state in GetStates())\n{\n    Console.WriteLine(state);\n}\n// outputs Orlando, New York, Atlanta, and Los Angeles\n```", "```cs\npublic string Name { get; set; }\n```", "```cs\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```", "```cs\nPerson person = new Person();\nperson.Name = \"Layla\";\nperson.Age = 11;\n```", "```cs\nPerson person = new Person { Name = \"Layla\", Age = 11 };\n```", "```cs\nint[] numbers = { 1, 2, 3, 4, 5 };\n```", "```cs\nDictionary<string, int> states = new Dictionary<string,int>\n{\n    { \"NY\", 1 },\n    { \"FL\", 2 },\n    { \"NJ\", 3 }\n};\n```", "```cs\nvar num = 8;\nvar name = \"Ashton\";\nvar map = new Dictionary<string, int>();\n```", "```cs\nvar num = 8;\nnum = \"Tabbitha\";\n```", "```cs\npublic string ConvertToString<T>(T value)\n{\n    return value.ToString();\n}\n```", "```cs\nstring s = ConvertToString(234);\n```", "```cs\nvar me = new { Name = \"Joel\", Age = 31 };\n```", "```cs\nint[] numbers = { 1, 2, 3, 4, 5, 6 };\n\nIEnumerable<int> query = from num in numbers\n                            where num > 3\n                            select num;\n\nforeach (var num in query)\n{\n    Console.WriteLine(num);\n}\n// outputs 4, 5, and 6\n```", "```cs\nvar cities = new[]\n{\n    new { City=\"Orlando\", State=\"FL\" },\n    new { City=\"Miami\", State=\"FL\" },\n    new { City=\"New York\", State=\"NY\" },\n    new { City=\"Allendale\", State=\"NJ\" }\n};\n\nvar query = from city in cities\n            group city by city.State into state\n            select new { Name = state.Key, Cities = state };\n\nforeach (var state in query)\n{\n    Console.WriteLine(\"{0} has {1} cities in this collection\", state.Name, state.Cities.Count());\n}\n```", "```cs\npublic struct Point\n{\n    public float X;\n    public float Y;\n}\n```", "```cs\npublic static class PointExtensions\n{\n    public static void Add(this Point value, Point other)\n    {\n        value.X += other.X;\n        value.Y += other.Y;\n    }\n}\n```", "```cs\nvar point = new Point { X = 28.5381f, Y = 81.3794f };\nvar other = new Point { X = -2.6809f, Y = -1.1011f };\n\npoint.Add(other);\nConsole.WriteLine(\"{0}, {1}\", point.X, point.Y);\n// outputs \"25.8572, 80.2783\"\n```", "```cs\ndynamic o = GetAString() ;\n\nstring s = o.Substring(2, 3);\n```", "```cs\npublic class Bag : DynamicObject\n{\n    private Dictionary<string, object> members = new Dictionary<string, object>();\n\n    public override IEnumerable<string> GetDynamicMemberNames()\n    {\n        return members.Keys;\n    }\n\n    public override bool TryGetMember(GetMemberBinder binder, out object result)\n    {\n        return members.TryGetValue(binder.Name, out result);\n    }\n\n    public override bool TrySetMember(SetMemberBinder binder, object value)\n    {\n        members[binder.Name] = value;\n        return true;\n    }\n}\n```", "```cs\ndynamic bag = new Bag();\n\nbag.Name = \"Joel\";\nbag.Age = 31;\nbag.CalcDoubleAge = new Func<int>(() => bag.Age * 2);\n\nConsole.WriteLine(bag.CalcDoubleAge());\n```"]