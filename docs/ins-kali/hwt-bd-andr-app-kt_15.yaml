- en: 15\. Animations and Transitions with CoordinatorLayout and MotionLayout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. 使用CoordinatorLayout和MotionLayout进行动画和过渡
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will introduce you to animations and how to handle changing between
    layouts. It covers the description of moving objects using `MotionLayout` and
    the Motion Editor in Android, along with a detailed explanation of constraint
    sets. The chapter also covers modifying paths and adding keyframes for a frame's
    motion.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍动画以及如何处理布局之间的变化。它涵盖了使用`MotionLayout`和Android中的Motion Editor描述移动对象的说明，以及对约束集进行详细解释。本章还涵盖了修改路径和为帧的运动添加关键帧。
- en: By the end of this chapter, you will be able to create animations using `CoordinatorLayout`
    and `MotionLayout` and use the Motion Editor in Android Studio to create `MotionLayout`
    animations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将能够使用`CoordinatorLayout`和`MotionLayout`创建动画，并使用Android Studio中的Motion
    Editor创建`MotionLayout`动画。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, you learned about architecture patterns such as MVVM.
    You now know how to improve the architecture of an app. Next, we will learn how
    to use animations to enhance our app's look and feel and make it different and
    better than other apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了MVVM等架构模式。您现在知道如何改进应用程序的架构。接下来，我们将学习如何使用动画来增强我们应用程序的外观和感觉，并使其与其他应用程序不同且更好。
- en: Sometimes, the apps we develop can look a little plain. We can include some
    moving parts and delightful animations in our apps to make them more lively and
    to make the UI and user experience better. For example, we can add visual cues
    so that the user will not be confused about what to do next and can be guided
    through what steps they can take. Animations while loading can entertain the user
    while content is being fetched or processed. Pretty animations when the app encounters
    an error can help prevent users from getting angry about what has happened and
    can inform them of what options they have.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们开发的应用程序可能看起来有点单调。我们可以在应用程序中包含一些移动部分和令人愉悦的动画，使其更加生动，并使UI和用户体验更好。例如，我们可以添加视觉提示，以便用户不会困惑下一步该做什么，并可以引导他们可以采取哪些步骤。在加载时进行动画可以在内容被获取或处理时娱乐用户。当应用程序遇到错误时进行漂亮的动画可以帮助防止用户对发生的事情感到愤怒，并可以告知他们有哪些选项。
- en: In this chapter, we'll start by looking at some of the traditional ways of doing
    animations with Android. We'll end the chapter by looking at the newer `MotionLayout`
    option. Let's get started with activity transitions, which are one of the easiest
    and most used animations.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先看一些在Android中进行动画的传统方法。我们将在本章结束时看一下较新的`MotionLayout`选项。让我们从活动过渡开始，这是最简单和最常用的动画之一。
- en: Activity Transitions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动过渡
- en: When opening and closing an activity, Android will play a default transition.
    We can customize the activity transition to reflect the brand and/or differentiate
    our app. Activity transitions are available starting with Android 5.0 Lollipop
    (API level 21).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开和关闭活动时，Android会播放默认过渡。我们可以自定义活动过渡以反映品牌和/或区分我们的应用程序。活动过渡从Android 5.0 Lollipop（API级别21）开始提供。
- en: 'Activity transitions have two parts: the enter transition and the exit transition.
    The enter transition defines how the activity and its views will be animated when
    the activity is opened. The exit transition, meanwhile, describes how the activity
    and views are animated when the activity is closed or a new activity is opened.
    Android supports the following built-in transitions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 活动过渡有两部分：进入过渡和退出过渡。进入过渡定义了当活动打开时活动及其视图将如何进行动画。而退出过渡则描述了当活动关闭或打开新活动时活动和视图如何进行动画。Android支持以下内置过渡：
- en: '**Explode**: This moves views in or out from the center.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Explode**：这会将视图从中心移入或移出。'
- en: '**Fade**: This view slowly appears or disappears.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fade**：这会使视图缓慢出现或消失。'
- en: '**Slide**: This moves views in or out from the edges.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Slide**：这会将视图从边缘移入或移出。'
- en: 'Now, let''s see how we can add activity transitions in the following section.
    There are two ways to add activity transitions: through XML and through code.
    First, we will learn how to add transitions via XML, and then via code.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在下一节中添加活动过渡。有两种方法可以添加活动过渡：通过XML和通过代码。首先，我们将学习如何通过XML添加过渡，然后通过代码。
- en: Adding Activity Transitions through XML
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过XML添加活动过渡
- en: 'You can add activity transitions through XML. The first step is to enable window
    content transitions. This is done by adding the activity''s theme in `themes.xml`
    the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过XML添加活动过渡。第一步是启用窗口内容过渡。这是通过在`themes.xml`中添加活动的主题来完成的，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After that, you can then add the enter and exit transitions with the `android:windowEnterTransition`
    and `android:windowExitTransition` style attributes. For example, if you have
    want to use the default transitions from `@android:transition/`, the attributes
    you will need to add are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以使用`android:windowEnterTransition`和`android:windowExitTransition`样式属性添加进入和退出过渡。例如，如果您想要使用来自`@android:transition/`的默认过渡，您需要添加的属性如下：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your `themes.xml` file would then look as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您的`themes.xml`文件将如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Activity transitions are enabled with `<item name="android:windowActivityTransitions">true</item>`.
    The `<item name="android:windowEnterTransition">@android:transition/slide_left</item>`
    attribute sets the enter transition, while the `@android:@transition/explode`
    is the exit transition file, as set by the `<item name="android:windowExitTransition">@android:transition/explode</item>`
    attribute.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 活动过渡通过`<item name="android:windowActivityTransitions">true</item>`启用。`<item
    name="android:windowEnterTransition">@android:transition/slide_left</item>`属性设置了进入过渡，而`@android:@transition/explode`是退出过渡文件，由`<item
    name="android:windowExitTransition">@android:transition/explode</item>`属性设置。
- en: In the next section, you will learn how to add activity transitions through
    coding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何通过编码添加活动过渡。
- en: Adding Activity Transitions through Code
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过代码添加活动过渡
- en: 'Activity transitions can also be added programmatically. The first step is
    to enable window content transitions. You can do that by calling the following
    function in your activity before the call to `setContentView()`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 活动转换也可以以编程方式添加。第一步是启用窗口内容转换。您可以在调用`setContentView()`之前在活动中调用以下函数来实现这一点：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can add the enter and exit transactions afterward with `window.enterTransition`
    and `window.exitTransition`, respectively. We can use the built-in `Explode()`,
    `Slide()`, and `Fade()` transitions from the `android.transition` package. For
    example, if we want to use `Explode()` as an enter transition and `Slide()` as
    an exit transition, we can add the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随后使用`window.enterTransition`和`window.exitTransition`添加进入和退出事务。我们可以使用`android.transition`包中内置的`Explode()`，`Slide()`和`Fade()`转换。例如，如果我们想要使用`Explode()`作为进入转换和`Slide()`作为退出转换，我们可以添加以下代码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remember to wrap these calls with a check for `Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP`
    if your app's minimum supported SDK is lower than 21.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序的最低支持的SDK低于21，请记得将这些调用包装在`Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP`的检查中。
- en: Now that you know how to add entry and exit activity transitions through code
    or XML, you need to learn how to activate the transition when opening the activity.
    We will do that in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道如何通过代码或XML添加进入和退出活动转换，您需要学习如何在打开活动时激活转换。我们将在下一节中进行。
- en: Starting an Activity with an Activity Transition
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Activity转换启动Activity
- en: 'Once you have added activity transitions to an activity (either through XML
    or by coding), you can activate the transition when opening the activity. Instead
    of the `startActivity(intent)` call, you should pass in a bundle with the transition
    animation. To do that, start your activity with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您向活动添加了活动转换（通过XML或编码），您可以在打开活动时激活转换。您应该传递一个带有转换动画的bundle，而不是`startActivity(intent)`调用。为此，请使用以下代码启动您的活动：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `ActivityOptions.makeSceneTransitionAnimation(this).toBundle()` argument
    will create a bundle with the enter and exit transition we specified for the activity
    (via XML or with code).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivityOptions.makeSceneTransitionAnimation(this).toBundle()`参数将创建一个带有我们为活动指定的进入和退出转换的bundle（通过XML或代码）。'
- en: Let's try out what we have learned so far by adding activity transitions to
    an app.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向应用程序添加活动转换来尝试我们到目前为止所学到的内容。
- en: 'Exercise 15.01: Creating Activity Transitions in an App'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.01：在应用程序中创建活动转换
- en: In many establishments, it is common to leave a tip (often called a gratuity).
    This is a sum of money given to show appreciation for a service—for example, to
    the waiting staff in a restaurant. The tip is provided in addition to the basic
    charge denoted on the final bill.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多场所，留下小费（通常称为小费）是很常见的。这是为了表示对服务的感激而给出的一笔钱，例如给餐厅的服务员。小费是在最终账单上标明的基本费用之外提供的。
- en: Throughout this chapter, we will be working with an application that calculates
    the amount that should be given as a tip. This value will be based on the amount
    of the bill (the basic charge) and the extra percentage that the user wants to
    give. The user will input both of these values, and the app will calculate the
    tip value.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个应用程序，该应用程序计算应该给出的小费金额。这个值将基于账单金额（基本费用）和用户想要给出的额外百分比。用户将输入这两个值，应用程序将计算小费金额。
- en: 'In this exercise, we will be customizing the activity transition between the
    input and the output screen:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将自定义输入和输出屏幕之间的活动转换：
- en: Create a new project in Android Studio.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新项目。
- en: In the `Choose Your Project` dialog, select `Empty Activity`, then click `Next`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`选择您的项目`对话框中，选择`空活动`，然后单击`下一步`。
- en: 'In the `Configure Your Project` dialog, as shown in *Figure 15.1*, name the
    project `Tip Calculator` and set the package name as `com.example.tipcalculator`:![Figure
    15.1: Configure Your Project dialog'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`配置您的项目`对话框中，如*图15.1*所示，将项目命名为`Tip Calculator`，并将包名称设置为`com.example.tipcalculator`：![图15.1：配置您的项目对话框
- en: '](img/B15216_15_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_01.jpg)'
- en: 'Figure 15.1: Configure Your Project dialog'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：配置您的项目对话框
- en: 'Set the location where you want to save the project. Choose `API 21: Android
    5.0 Lollipop` for `Minimum SDK`, then click the `Finish` button. This will create
    a default `MainActivity` with a layout file, `activity_main.xml`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置要保存项目的位置。选择`API 21：Android 5.0 Lollipop`作为`最低SDK`，然后单击`完成`按钮。这将创建一个默认的`MainActivity`和一个布局文件`activity_main.xml`。
- en: 'Add the `MaterialComponents` dependency to your `app/build.gradle` file:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MaterialComponents`依赖项添加到您的`app/build.gradle`文件中：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will need this to be able to use `TextInputLayout` and `TextInputEditText`
    for the input text fields.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要这样做才能使用`TextInputLayout`和`TextInputEditText`来输入文本字段。
- en: 'Open the `themes.xml` file and make sure that the activity''s theme is using
    a theme from `MaterialComponents`. See the following example:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`themes.xml`文件，并确保活动的主题使用`MaterialComponents`的主题。参见以下示例：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will need to do this as the `TextInputLayout` and `TextInputEditText` we
    will be using later require your activity to use a `MaterialComponents` theme.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要这样做，因为我们稍后将使用的`TextInputLayout`和`TextInputEditText`需要您的活动使用`MaterialComponents`主题。
- en: 'Open `activity_main.xml`. Delete the `Hello World` `TextView` and add the input
    text field for the amount:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`。删除`Hello World` `TextView`并添加金额的输入文本字段：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add another input text field for the tip percentage below the amount text field:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在金额文本字段下方添加另一个小费百分比的输入文本字段：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, add a `Compute` button at the bottom of the tip percent text field:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在小费百分比文本字段底部添加一个`计算`按钮：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create another activity. Go to the `File` menu and click on `New` | `Activity`
    | `Empty Activity`. Name it `OutputActivity`. Make sure that `Generate Layout
    File` is checked so that `activity_output` will be created.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个活动。转到`文件`菜单，单击`新建` | `活动` | `空活动`。将其命名为`OutputActivity`。确保选中`生成布局文件`，以便创建`activity_output`。
- en: 'Open `MainActivity`. At the end of the `onCreate` function, add the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`。在`onCreate`函数的末尾，添加以下代码：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will add a `ClickListener` component to the `Compute` button so that when
    it's tapped, the system will open `OutputActivity` and pass the amount and percentage
    values as intent extras.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为`Compute`按钮添加一个`ClickListener`组件，这样当点击时，系统将打开`OutputActivity`并将金额和百分比值作为意图额外传递。
- en: 'Open `activity_output.xml` and add a `TextView` for displaying the tip:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_output.xml`并添加一个用于显示小费的`TextView`：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open `OutputActivity`. At the end of the `onCreate` function, add the following
    code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`OutputActivity`。在`onCreate`函数的末尾，添加以下代码：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will compute and display the tip based on the input amount and percentage.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据输入金额和百分比计算并显示小费。
- en: Run the application. Tap on the `Compute` button and note what happens when
    opening `OutputActivity` and going back. There is a default animation while `MainActivity`
    is being closed and `OutputActivity` is being opened and closed.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。点击`Compute`按钮，注意打开`OutputActivity`和返回时发生的情况。在关闭`MainActivity`和打开/关闭`OutputActivity`时，会有默认动画。
- en: 'Now, let''s start adding transition animations. Open `themes.xml` and update
    the activity theme with the `windowActivityTransitions`, `windowEnterTransition`,
    and `windowExitTransition` style attributes:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始添加过渡动画。打开`themes.xml`并使用`windowActivityTransitions`，`windowEnterTransition`和`windowExitTransition`样式属性更新活动主题：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will enable the activity transition, add an explode enter transition, and
    add a slide left exit transition to the activity.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启用活动过渡，添加一个爆炸进入过渡，并向活动添加一个向左滑动退出过渡。
- en: 'Go back to the `MainActivity` file and replace `startActivity(intent)` with
    the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`MainActivity`文件，并用以下内容替换`startActivity(intent)`：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will open `OutputActivity` with the transition animation we specified in
    the XML file (which we set in the previous step).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用我们在上一步中设置的XML文件中指定的过渡动画打开`OutputActivity`。
- en: 'Run the application. You will see that the animation when opening and closing
    `MainActivity` and `OutputActivity` has changed. When the Android UI is opening
    `OutputActivity`, you will notice that the text is moving toward the center. While
    closing, the views slide to the left:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。您会看到打开和关闭`MainActivity`和`OutputActivity`时的动画已经改变。当Android UI打开`OutputActivity`时，您会注意到文本向中心移动。在关闭时，视图向左滑动：
- en: '![Figure 15.2: The app screens: input screen (on the left) and output screen
    (on the right)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.2：应用程序屏幕：输入屏幕（左侧）和输出屏幕（右侧）'
- en: '](img/B15216_15_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_02.jpg)'
- en: 'Figure 15.2: The app screens: input screen (on the left) and output screen
    (on the right)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：应用程序屏幕：输入屏幕（左侧）和输出屏幕（右侧）
- en: We have added an activity transition to an app. When we open a new activity,
    the new activity's enter transition will be played. Its exit transition will play
    when the activity is being closed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为应用程序添加了活动过渡。当我们打开一个新的活动时，新活动的进入过渡将播放。当活动被关闭时，将播放其退出过渡。
- en: Sometimes, when we open another activity from one activity, there is a common
    element that is present in both activities. In the next section, we will learn
    about adding this shared element transition.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当我们从一个活动打开另一个活动时，两个活动中存在一个共同的元素。在下一节中，我们将学习如何添加这个共享元素过渡。
- en: Adding a Shared Element Transition
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加共享元素过渡
- en: There are times when an application moves from one activity to another, and
    there is a common element that is present in both activities. We can add an animation
    to this shared element to highlight to the users the link between the two activities.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，一个应用程序从一个活动转移到另一个活动，两个活动中都存在一个共同的元素。我们可以为这个共享元素添加动画，以突出向用户展示两个活动之间的链接。
- en: In a movie application, for example, an activity with a list of movies (with
    a thumbnail image) can open a new activity with details of the selected movie,
    along with a full-sized image at the top. Adding a shared element transition for
    the image will link the thumbnail on the list activity to the image on the details
    activity.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个电影应用程序中，一个包含电影列表（带有缩略图图像）的活动可以打开一个新的活动，显示所选电影的详细信息，并在顶部显示全尺寸图像。为图像添加共享元素过渡将把列表活动上的缩略图与详细信息活动上的图像链接起来。
- en: 'The shared element transition has two parts: the enter transition and the exit
    transition. These transitions can be done through XML or code.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 共享元素过渡有两部分：进入过渡和退出过渡。这些过渡可以通过XML或代码完成。
- en: 'The first step is to enable a window content transition. You can do this by
    adding the activity''s theme to `themes.xml` with the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是启用窗口内容过渡。您可以通过将活动的主题添加到`themes.xml`中来实现：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can also do this programmatically by calling the following function in
    your activity before the call to `setContentView()`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在调用`setContentView()`之前在活动中调用以下函数来以编程方式执行此操作：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `android:windowContentTransitions` attribute with a `true` value and `window.requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)`
    will enable the window content transition.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:windowContentTransitions`属性的值为`true`，`window.requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)`将启用窗口内容过渡。'
- en: 'Afterward, you can add the shared element enter transition and the shared element
    exit transition. If you have `enter_transition.xml` and `exit_transition.xml`
    in your `res/transitions` directory, you can add the shared element enter transition
    by adding the following style attribute:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以添加共享元素进入过渡和共享元素退出过渡。如果您的`res/transitions`目录中有`enter_transition.xml`和`exit_transition.xml`，您可以通过添加以下样式属性来添加共享元素进入过渡：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also do this through code with the following lines:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过以下代码以编程方式完成这一操作：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `windowSharedElementEnterTransition` attribute and `window.sharedElementEnterTransition`
    will set our enter transition to the `enter_transition.xml` file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`windowSharedElementEnterTransition`属性和`window.sharedElementEnterTransition`将把我们的进入过渡设置为`enter_transition.xml`文件。'
- en: 'To add the shared element exit transition, you can add the following style
    attributes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加共享元素退出过渡，可以添加以下样式属性：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This can be done programmatically with the following lines of code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下代码以编程方式完成：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `windowSharedElementExitTransition` attribute and `window.sharedElementExitTransition`
    will set our exit transition to the `exit_transition.xml` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`windowSharedElementExitTransition`属性和`window.sharedElementExitTransition`将把我们的退出过渡设置为`exit_transition.xml`文件。'
- en: You have learned how to add shared element transitions. In the next section,
    we'll learn how to start the activity with the shared element transition.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何添加共享元素过渡。在下一节中，我们将学习如何开始具有共享元素过渡的活动。
- en: Starting an Activity with the Shared Element Transition
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用共享元素过渡开始活动
- en: Once you have added the shared element transition to an activity (either through
    XML or programmatically), you can activate the transition when opening the activity.
    Before you do that, add a `transitionName` attribute. Set its value as the same
    text for the shared element in both activities.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您向活动添加了共享元素过渡（无论是通过XML还是通过编程方式），您可以在打开活动时激活过渡。在这之前，添加一个`transitionName`属性。将其值设置为两个活动中共享元素的相同文本。
- en: 'For example, in `ImageView`, we can add a `transition_name` value for the `transitionName`
    attribute:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`ImageView`中，我们可以为`transitionName`属性添加一个`transition_name`值：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To start the activity with shared elements, we will be passing in a bundle
    with the transition animation. To do that, start your activity with the following
    code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始具有共享元素的活动，我们将传递一个带有过渡动画的bundle。为此，请使用以下代码启动您的活动：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `ActivityOptions.makeSceneTransitionAnimation(this, sharedImage, "transition_name").toBundle()`
    argument will create a bundle with the shared element (`sharedImage`) and the
    transition name (`transition_name`).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivityOptions.makeSceneTransitionAnimation(this, sharedImage, "transition_name").toBundle()`参数将创建一个带有共享元素（`sharedImage`）和过渡名称（`transition_name`）的bundle。'
- en: 'If you have more than one shared element, you can pass variable arguments of
    `Pair<View, String>` of `View` and the transition name `String` instead. For example,
    if we have the view''s button and image as shared elements, we can do the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个共享元素，您可以传递`Pair<View, String>`的可变参数，其中`View`和过渡名称`String`。例如，如果我们将视图的按钮和图像作为共享元素，我们可以这样做：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to import `android.util.Pair` instead of `kotlin.Pair` as `makeSceneTransitionAnimation`
    is expecting the pair from the Android SDK.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住导入`android.util.Pair`而不是`kotlin.Pair`，因为`makeSceneTransitionAnimation`需要来自Android
    SDK的pair。
- en: Let's try out what we have learned so far by adding shared element transitions
    to the *Tip Calculator* app.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下到目前为止学到的内容，通过向*Tip Calculator*应用程序添加共享元素过渡。
- en: 'Exercise 15.02: Creating the Shared Element Transition'
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.02：创建共享元素过渡
- en: 'In the first exercise, we customized the activity transitions for `MainActivity`
    and `OutputActivity`. In this exercise, we will be adding an image to both activities.
    This shared element will be animated when moving from the input screen to the
    output screen. We''ll be using the app launcher icon (`res/mipmap/ic_launcher`)
    for `ImageView`. You can change yours instead of using the default one:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个练习中，我们为`MainActivity`和`OutputActivity`自定义了活动过渡。在这个练习中，我们将向两个活动添加一个图像。当从输入屏幕移动到输出屏幕时，将对此共享元素进行动画处理。我们将使用应用程序启动器图标（`res/mipmap/ic_launcher`）作为`ImageView`。您可以更改您的图标，而不是使用默认的：
- en: Open the `Tip Calculator` project we developed in `Exercise 15.01`, `Creating
    Activity Transitions in an App`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在`Exercise 15.01`中开发的`Tip Calculator`项目，创建活动过渡。
- en: 'Go to the `activity_main.xml` file and add an `ImageView` at the top of the
    amount text field:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`activity_main.xml`文件，并在金额文本字段顶部添加一个`ImageView`：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `transitionName` value of `transition_name` will be used to identify this
    as a shared element.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitionName`值为`transition_name`将用于标识此为共享元素。'
- en: 'Change the top constraint of `amount_text_layout` `TextInputLayout` by changing
    `app:layout_constraintTop_toTopOf="parent"` with the following:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更改`app:layout_constraintTop_toTopOf="parent"`来更改`amount_text_layout` `TextInputLayout`的顶部约束为以下内容：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will move the amount `TextInputLayout` class below the image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使金额`TextInputLayout`类移动到图像下方。
- en: Now, open the `activity_output.xml` file and add an image above the tip `TextView`
    with a height and width of 200dp and a `scaleType` of `fitXY` to fit the image
    to the dimensions of the `ImageView`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`activity_output.xml`文件，并在`tip TextView`上方添加一个图像，高度和宽度为200dp，`scaleType`为`fitXY`以适应图像到`ImageView`的尺寸。
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `transitionName` value of `transition_name` is the same as the value for
    the `ImageView` from `MainActivity`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitionName`值为`transition_name`与`MainActivity`中的`ImageView`的值相同。'
- en: 'Open `MainActivity` and change the `startActivity` code to the following:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`并将`startActivity`代码更改为以下内容：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will start a transition from the `ImageView` in `MainActivity` with the
    ID image to another image in `OutputActivity` whose `transitionName` value is
    also `transition_name`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`MainActivity`中的ID为image的`ImageView`开始一个过渡，到`OutputActivity`中另一个具有`transitionName`值也为`transition_name`的图像。
- en: 'Run the application. Provide an amount and percentage and tap on the `Compute`
    button. You will see that the image in the input activity appears to enlarge and
    position itself in `OutputActivity`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。提供金额和百分比，然后点击`Compute`按钮。您会看到输入活动中的图像似乎放大并定位到`OutputActivity`中：
- en: '![Figure 15.3: The app screens: input screen (on the left) and output screen
    (on the right)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.3：应用程序屏幕：输入屏幕（左侧）和输出屏幕（右侧）'
- en: '](img/B15216_15_03.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_03.jpg)'
- en: 'Figure 15.3: The app screens: input screen (on the left) and output screen
    (on the right)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：应用程序屏幕：输入屏幕（左侧）和输出屏幕（右侧）
- en: We have learned about adding activity transitions and shared element transitions.
    Now, let's look into animating views inside a layout. If we have more than one
    element inside, it might be difficult to animate each element. `CoordinatorLayout`
    can be used to simplify this animation. We will discuss this in the next section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何添加活动过渡和共享元素过渡。现在，让我们来看看如何在布局中对视图进行动画处理。如果内部有多个元素，要对每个元素进行动画处理可能会很困难。`CoordinatorLayout`可用于简化此动画。我们将在下一节中讨论这个问题。
- en: Animations with CoordinatorLayout
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CoordinatorLayout进行动画
- en: '`CoordinatorLayout` is a layout that handles the motions between its child
    views. When you use `CoordinatorLayout` as the parent view group, you can animate
    the views inside it with little effort. You can add `CoordinatorLayout` to your
    project by adding in your `app/build.gradle` file dependencies with the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`CoordinatorLayout`是一个处理其子视图之间动作的布局。当您将`CoordinatorLayout`用作父视图组时，可以轻松地对其中的视图进行动画处理。您可以通过在`app/build.gradle`文件的依赖项中添加以下内容将`CoordinatorLayout`添加到您的项目中：'
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will allow us to use `CoordinatorLayout` in our layout files.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在布局文件中使用`CoordinatorLayout`。
- en: Let's say we have a layout file with a floating action button inside `CoordinatorLayout`.
    When tapping on the floating action button, the UI displays a `Snackbar` message.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个布局文件，其中包含`CoordinatorLayout`内的浮动操作按钮。当点击浮动操作按钮时，UI会显示一个`Snackbar`消息。
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A `Snackbar` is an Android widget that provides a brief message to the user
    at the bottom of the screen.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Snackbar`是一个Android小部件，可以在屏幕底部向用户提供简短的消息。'
- en: 'If you use any layout other than `CoordinatorLayout`, the Snackbar with the
    message will be rendered on top of the floating action button. If we use `CoordinatorLayout`
    as the parent view group, the layout will push the floating action button upwards,
    display the Snackbar below it, and move it back when the Snackbar disappears.
    *Figure 15.4* shows how the layout adjusts to prevent the Snackbar from being
    on top of the floating action button:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是除`CoordinatorLayout`之外的任何布局，则带有消息的Snackbar将呈现在浮动操作按钮的顶部。如果我们将`CoordinatorLayout`用作父视图组，布局将向上推动浮动操作按钮，将Snackbar显示在其下方，并在Snackbar消失时将其移回。*图15.4*显示了布局如何调整以防止Snackbar位于浮动操作按钮的顶部：
- en: '![Figure 15.4: The left screenshot displays the UI before and after the Snackbar
    is shown. The screenshot on the right shows the UI while the Snackbar is visible'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.4：左侧截图显示了Snackbar显示之前和之后的UI。右侧的截图显示了Snackbar可见时的UI'
- en: '](img/B15216_15_04.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_04.jpg)'
- en: 'Figure 15.4: The left screenshot displays the UI before and after the Snackbar
    is shown. The screenshot on the right shows the UI while the Snackbar is visible'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：左侧截图显示了Snackbar显示之前和之后的UI。右侧的截图显示了Snackbar可见时的UI
- en: The floating action button moves and gives space to the Snackbar message because
    it has a default behavior called `FloatingActionButton.Behavior`, a subclass of
    `CoordinatorLayout.Behavior`. `FloatingActionButton.Behavior` moves the floating
    action button while the Snackbar is being displayed so that the Snackbar won't
    cover the floating action button.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动操作按钮移动并为Snackbar消息提供空间，因为它具有名为`FloatingActionButton.Behavior`的默认行为，这是`CoordinatorLayout.Behavior`的子类。`FloatingActionButton.Behavior`在显示Snackbar时移动浮动操作按钮，以便Snackbar不会覆盖浮动操作按钮。
- en: 'Not all views have `CoordinatorLayout` behavior. To implement custom behavior,
    you can start by extending `CoordinatorLayout.Behavior`. You can then attach it
    to the view with the `layout_behavior` attribute. For example, if we have made
    `CustomBehavior` in the `com.example.behavior` package for a button, we can update
    the button in the layout with the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有视图都具有`CoordinatorLayout`行为。要实现自定义行为，可以通过扩展`CoordinatorLayout.Behavior`来开始。然后，您可以使用`layout_behavior`属性将其附加到视图上。例如，如果我们在`com.example.behavior`包中为按钮创建了`CustomBehavior`，我们可以在布局中使用以下内容更新按钮：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have learned how to create animations and transitions with `CoordinatorLayout`.
    In the next section, we will look into another layout, `MotionLayout`, which allows
    developers more control over motion.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何使用`CoordinatorLayout`创建动画和过渡。在下一节中，我们将研究另一个布局`MotionLayout`，它允许开发人员更多地控制动作。
- en: Animations with MotionLayout
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MotionLayout创建动画
- en: Creating animations in Android is sometimes time-consuming. You need to work
    on XML and code files even to create simple animations. More complicated animations
    and transitions take more time to make.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中创建动画有时是耗时的。即使是创建简单的动画，您也需要处理XML和代码文件。更复杂的动画和过渡需要更多的时间来制作。
- en: To help developers easily make animations, Google created `MotionLayout`. `MotionLayout`
    is a new way to create motion and animations through XML. It is available starting
    at API level 14 (Android 4.0).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助开发人员轻松制作动画，Google创建了`MotionLayout`。`MotionLayout`是通过XML创建动作和动画的新方法。它从API级别14（Android
    4.0）开始提供。
- en: With `MotionLayout`, we can animate the position, width/height, visibility,
    alpha, color, rotation, elevation, and other attributes of one or more views.
    Normally, some of these are hard to do with code, but `MotionLayout` allows us
    to easily adjust them using declarative XML so that we can focus more on our application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MotionLayout`，我们可以对一个或多个视图的位置、宽度/高度、可见性、透明度、颜色、旋转、高程和其他属性进行动画处理。通常，其中一些属性很难通过代码实现，但`MotionLayout`允许我们使用声明性XML轻松调整它们，以便我们可以更多地专注于我们的应用程序。
- en: Let's get started by adding `MotionLayout` to our application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始通过将`MotionLayout`添加到我们的应用程序中。
- en: Adding MotionLayout
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加MotionLayout
- en: 'To add `MotionLayout` to your project, you just need to add the dependency
    for ConstraintLayout 2.0\. ConstraintLayout 2.0 is the new version of ConstraintLayout,
    which adds new features, including `MotionLayout`. Add in your app/`build.gradle`
    file dependencies with the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`MotionLayout`添加到您的项目中，您只需要添加ConstraintLayout 2.0的依赖项。ConstraintLayout 2.0是ConstraintLayout的新版本，增加了包括`MotionLayout`在内的新功能。在您的app/`build.gradle`文件的依赖项中添加以下内容：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will add the latest version of ConstraintLayout (2.0.4 as of the time of
    writing) to your app. For this book, we will be using the AndroidX versions. If
    you haven't updated your project yet, consider updating from the Support Library
    to AndroidX.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向您的应用程序添加最新版本的ConstraintLayout（在撰写本文时为2.0.4）。对于本书，我们将使用AndroidX版本。如果您尚未更新项目，请考虑从支持库更新到AndroidX。
- en: After adding the dependency, we can now use `MotionLayout` to create animations.
    We'll be doing that in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 添加依赖项后，我们现在可以使用`MotionLayout`来创建动画。我们将在下一节中进行这样的操作。
- en: Creating Animations with MotionLayout
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MotionLayout创建动画
- en: '`MotionLayout` is a subclass of our good old friend ConstraintLayout. To create
    animations with `MotionLayout`, open the layout file where we will add the animations.
    Replace the root ConstraintLayout container with `androidx.constraintlayout.motion.widget.MotionLayout`.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`MotionLayout`是我们好朋友ConstraintLayout的一个子类。要使用`MotionLayout`创建动画，请打开要添加动画的布局文件。将根ConstraintLayout容器替换为`androidx.constraintlayout.motion.widget.MotionLayout`。'
- en: 'The animation itself won''t be in the layout file but in another XML file,
    called `motion_scene`. `motion_scene` will specify how `MotionLayout` will animate
    the views inside it. `motion_scene` files should be placed in the `res/xml` directory.
    The layout file will link to this `motion_scene` file with the `app:layoutDescription`
    attribute in the root view group. Your layout file should look similar to the
    following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 动画本身不会在布局文件中，而是在另一个名为`motion_scene`的XML文件中。`motion_scene`将指定`MotionLayout`如何对其中的视图进行动画。`motion_scene`文件应放置在`res/xml`目录中。布局文件将使用根视图组中的`app:layoutDescription`属性链接到这个`motion_scene`文件。您的布局文件应该类似于以下内容：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To create animations with `MotionLayout`, we must have the initial state and
    final state of our views. `MotionLayout` will automatically animate the transition
    between the two. You can specify these two states in the same `motion_scene` file.
    If you have a lot of views inside the layout, you can also use two different layouts
    for the beginning and ending states of the animation.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`MotionLayout`创建动画，我们必须有视图的初始状态和最终状态。`MotionLayout`将自动在两者之间进行过渡动画。您可以在同一个`motion_scene`文件中指定这两个状态。如果布局中有很多视图，您还可以使用两个不同的布局来表示动画的开始和结束状态。
- en: 'The root container of the `motion_scene` file is `motion_scene`. This is where
    we add the constraints and the animation for `MotionLayout`. It contains the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`motion_scene`文件的根容器是`motion_scene`。这是我们为`MotionLayout`添加约束和动画的地方。它包含以下内容：'
- en: '**ConstraintSet**: Specifies the beginning and ending position and style for
    the view/layout to animate.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ConstraintSet**：指定要进行动画的视图/布局的开始和结束位置和样式。'
- en: '**Transition**: Specifies the start, end, duration, and other details of the
    animation to be done on the views.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Transition**：指定要在视图上执行的动画的开始、结束、持续时间和其他详细信息。'
- en: Let's try adding animations with `MotionLayout` by adding it to our *Tip Calculator* app.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过将其添加到我们的*Tip Calculator*应用程序中，使用`MotionLayout`添加动画。
- en: 'Exercise 15.03: Adding Animations with MotionLayout'
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.03：使用MotionLayout添加动画
- en: 'In this exercise, we will be updating our *Tip Calculator* app with a `MotionLayout`
    animation. In the output screen, the image above the tip text will move down when
    tapped and will go back to its original position when tapped again:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用`MotionLayout`动画更新我们的*Tip Calculator*应用程序。在输出屏幕上，点击图像将向下移动，并在再次点击时返回到原始位置：
- en: Open the *Tip Calculator* project in Android Studio 4.0 or higher.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio 4.0或更高版本中打开*Tip Calculator*项目。
- en: 'Open the `app/build.gradle` file and replace the dependency for `ConstraintLayout`
    with the following:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/build.gradle`文件，并用以下内容替换`ConstraintLayout`的依赖项：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: With this, we will be able to use `MotionLayout` in our layout files.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们就可以在我们的布局文件中使用`MotionLayout`了。
- en: 'Open the `activity_output.xml` file and change the root `ConstraintLayout`
    tag to `MotionLayout`. Change `androidx.constraintlayout.widget.ConstraintLayout`
    to the following:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_output.xml`文件，并将根`ConstraintLayout`标记更改为`MotionLayout`。将`androidx.constraintlayout.widget.ConstraintLayout`更改为以下内容：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add `app:layoutDescription="@xml/motion_scene"` to the `MotionLayout` tag.
    The IDE will warn you that this file does not yet exist. Ignore that for now,
    as we will be adding it in the next step. Your file should look similar to this:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`app:layoutDescription="@xml/motion_scene"`添加到`MotionLayout`标记中。IDE将警告您该文件尚不存在。暂时忽略，因为我们将在下一步中添加它。您的文件应该类似于这样：
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Create a `motion_scene.xml` file in the `res/xml` directory. This will be our
    `motion_scene` file where the animation configuration will be defined. Use `motion_scene`
    as the root element for the file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/xml`目录中创建一个`motion_scene.xml`文件。这将是我们的`motion_scene`文件，其中将定义动画配置。使用`motion_scene`作为文件的根元素。
- en: 'Add the starting `Constraint` element by adding the following inside the `motion_scene`
    file:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`motion_scene`文件中添加以下内容来添加起始的`Constraint`元素：
- en: '[PRE36]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is how the image is at the current position (constrained to the top of
    the screen).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图像在当前位置的样子（约束在屏幕顶部）。
- en: 'Next, add the ending `Constraint` element by adding the following inside the
    `motion_scene` file:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`motion_scene`文件中添加结束的`Constraint`元素，方法如下：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: At the ending animation, the `ImageView` will be at the bottom of the screen.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束动画时，`ImageView`将位于屏幕底部。
- en: 'Let''s now add in the transition for our `ImageView`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们为`ImageView`添加过渡效果：
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we're specifying the start and end constraints, which will animate for
    2,000 milliseconds (2 seconds). We also added an `OnClick` event to `ImageView`.
    The toggle will animate the view from the start to end, and if the view is already
    on the end state, it will animate back to the start state.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在指定开始和结束的约束条件，将在2,000毫秒（2秒）内进行动画。我们还在`ImageView`上添加了一个`OnClick`事件。切换将使视图从开始到结束进行动画，如果视图已经处于结束状态，它将动画返回到开始状态。
- en: 'Your completed `motion_scene.xml` file should look like this:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您完成的`motion_scene.xml`文件应如下所示：
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the application and tap on the `ImageView`. It will move straight downward
    in around 2 seconds. Tap it again and it will move back up in 2 seconds. *Figure
    15.5* shows the start and end of this animation:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并点击`ImageView`。它将在大约2秒内直线向下移动。再次点击它，它将在2秒内向上移动。*图15.5*显示了此动画的开始和结束：
- en: '![Figure 15.5: The starting animation (left) and ending animation (right)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.5：起始动画（左）和结束动画（右）'
- en: '](img/B15216_15_05.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_05.jpg)'
- en: 'Figure 15.5: The starting animation (left) and ending animation (right)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：起始动画（左）和结束动画（右）
- en: In this exercise, we have animated an `ImageView` in `MotionLayout` by specifying
    the start constraint, end constraint, and the transition with a duration and `OnClick`
    event. `MotionLayout` automatically plays the animation from the start to the
    end position (which to us looks like it's moving up or down in a straight line
    automatically when tapped).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们通过指定开始约束、结束约束和持续时间以及`OnClick`事件，在`MotionLayout`中对`ImageView`进行了动画处理。`MotionLayout`会自动播放动画，从开始位置到结束位置（对我们来说，看起来就像在轻按时自动上下移动）。
- en: We have created animations with `MotionLayout`. In the next section, we will
    be using Android Studio's Motion Editor to create `MotionLayout` animations.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`MotionLayout`创建了动画。在下一节中，我们将使用Android Studio的Motion Editor来创建`MotionLayout`动画。
- en: The Motion Editor
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Motion Editor
- en: Android Studio, starting with version 4.0, includes the Motion Editor. The Motion
    Editor can help developers create animations with `MotionLayout`. This makes it
    easier for developers to create and preview transitions and other motions instead
    of doing it by hand and running it to see the changes. The editor will also generate
    the corresponding files automatically.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从4.0版本开始，Android Studio包括了Motion Editor。Motion Editor可以帮助开发人员使用`MotionLayout`创建动画。这使得开发人员更容易创建和预览过渡和其他动作，而不是手工操作并运行来查看更改。编辑器还会自动生成相应的文件。
- en: You can convert your ConstraintLayout to MotionLayout the Layout Editor by right-clicking
    the preview and clicking on the `Convert to MotionLayout` item. Android Studio
    will do the conversion and also create the motion scene file for you.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过右键单击预览并单击`Convert to MotionLayout`来将ConstraintLayout转换为MotionLayout。Android
    Studio会进行转换，还会为您创建动作场景文件。
- en: 'When viewing a layout file that has `MotionLayout` as the root in `Design`
    view, the Motion Editor UI will be included in the `Design` view, as in *Figure
    15.6*:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Design`视图中查看具有`MotionLayout`作为根的布局文件时，Motion Editor UI将包含在`Design`视图中，如*图15.6*所示：
- en: '![Figure 15.6: The Motion Editor in Android Studio 4.0'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.6：Android Studio 4.0中的Motion Editor'
- en: '](img/B15216_15_06.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_06.jpg)'
- en: 'Figure 15.6: The Motion Editor in Android Studio 4.0'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：Android Studio 4.0中的Motion Editor
- en: 'In the upper-right window (the `Overview` panel), you can see a visualization
    of `MotionLayout` and the start and end constraint. The transition is displayed
    as an arrow from the start. The dot near the start constraint shows the click
    action for the transition. *Figure 15.7* shows the `Overview` panel with `start_constraint`  selected:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上窗口（`Overview`面板）中，您可以看到`MotionLayout`的可视化以及开始和结束约束。过渡显示为从开始的箭头。靠近开始约束的点显示了过渡的点击操作。*图15.7*显示了选择了`start_constraint`的`Overview`面板：
- en: '![Figure 15.7: The Motion Editor''s Overview panel with start_constraint selected'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.7：Motion Editor的概述面板中选择了start_constraint'
- en: '](img/B15216_15_07.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_07.jpg)'
- en: 'Figure 15.7: The Motion Editor''s Overview panel with start_constraint selected'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：选择了start_constraint的Motion Editor的概述面板
- en: 'The bottom-right window is the `Selection` panel, which shows the views in
    the constraint set or `MotionLayout` selected in the `Overview` panel. It can
    also show the transitions when the transition arrow is the one selected. *Figure
    15.8* shows the `Selection` panel when `start_constraint` is selected:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 右下窗口是`Selection`面板，显示了在`Overview`面板中选择的约束集或`MotionLayout`中的视图。当选择过渡箭头时，它还可以显示过渡。*图15.8*显示了选择`start_constraint`时的`Selection`面板：
- en: '![Figure 15.8: The Motion Editor’s Selection panel showing ConstraintSet for
    start_constraint'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.8：Motion Editor的选择面板显示了start_constraint的ConstraintSet'
- en: '](img/B15216_15_08.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_08.jpg)'
- en: 'Figure 15.8: The Motion Editor''s Selection panel showing ConstraintSet for
    start_constraint'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：Motion Editor的选择面板显示了start_constraint的ConstraintSet
- en: 'When you click on `MotionLayout` on the left of the `Overview` panel, the `Selection`
    panel below will display the views and their constraints, as shown in *Figure
    15.9*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在`Overview`面板的左侧点击`MotionLayout`时，下方的`Selection`面板将显示视图及其约束，如*图15.9*所示：
- en: '![Figure 15.9: The Overview and Selection panel when MotionLayout is selected'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.9：选择MotionLayout时的概述和选择面板'
- en: '](img/B15216_15_09.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_09.jpg)'
- en: 'Figure 15.9: The Overview and Selection panel when MotionLayout is selected'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：选择MotionLayout时的概述和选择面板
- en: 'When you click on `start_constraint` or `end_constraint`, the preview window
    on the left will display how the start or end state looks. The `Selection` panel
    will also show the view and its constraints. Take a look at *Figure 15.10* to
    see how it looks when `start_constraint` is selected:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击`start_constraint`或`end_constraint`时，左侧的预览窗口将显示开始或结束状态的外观。`Selection`面板还会显示视图及其约束。看一下*图15.10*，看看选择`start_constraint`时的外观：
- en: '![Figure 15.10: How the Motion Editor looks when start_constraint is selected'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.10：选择了start_constraint时Motion Editor的外观'
- en: '](img/B15216_15_10.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_10.jpg)'
- en: 'Figure 15.10: How the Motion Editor looks when start_constraint is selected'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10：选择了start_constraint时Motion Editor的外观
- en: '*Figure 15.11* shows how the Motion Editor will look if you select `end_constraint`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.11*显示了如果选择`end_constraint`，Motion Editor会是什么样子：'
- en: '![Figure 15.11: How the Motion Editor looks with end_constraint selected'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.11：选择end_constraint时Motion Editor的外观'
- en: '](img/B15216_15_11.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_11.jpg)'
- en: 'Figure 15.11: How the Motion Editor looks with end_constraint selected'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11：选择end_constraint时Motion Editor的外观
- en: 'The arrow connecting `start_constraint` and `end_constraint` represents the
    transition of `MotionLayout`. On the `Selection` panel, there are controls to
    play or go to the first/last state. You can also drag the arrow to a specific
    position. *Figure 15.12* shows how it looks in the middle (50% of the animation):'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 连接`start_constraint`和`end_constraint`的箭头代表了`MotionLayout`的过渡。在`Selection`面板上，有播放或转到第一个/最后一个状态的控件。您还可以将箭头拖动到特定位置。*图15.12*显示了动画中间的外观（50%）：
- en: '![Figure 15.12: The transition in the middle of the animation'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.12：动画中间的过渡'
- en: '](img/B15216_15_12.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_12.jpg)'
- en: 'Figure 15.12: The transition in the middle of the animation'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12：动画中间的过渡
- en: During the development of animations with `MotionLayout`, it would be better
    if we could debug the animations to make sure we're doing it correctly. We'll
    discuss how we can do this in the next section.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发带有`MotionLayout`的动画时，最好能够调试动画以确保我们做得正确。我们将在下一节讨论如何做到这一点。
- en: Debugging MotionLayout
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试MotionLayout
- en: To help you visualize the `MotionLayout` animation before running the app, you
    can show the motion path and the animation's progress in the Motion Editor. The
    motion path is the straight route that the object to animate will take from the
    start to the ending state.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您在运行应用程序之前可视化`MotionLayout`动画，您可以在Motion Editor中显示运动路径和动画的进度。运动路径是要动画的对象从起始状态到结束状态所采取的直线路线。
- en: 'To show the path and/or progress animation, we can add a `motionDebug` attribute
    to the `MotionLayout` container. We can use the following values for `motionDebug`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 显示路径和/或进度动画，我们可以向`MotionLayout`容器添加`motionDebug`属性。我们可以使用以下值来设置`motionDebug`：
- en: '`SHOW_PATH`: This displays the path of the motion only.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_PATH`：仅显示运动路径。'
- en: '`SHOW_PROGRESS`: This displays the animation progress only.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_PROGRESS`：仅显示动画进度。'
- en: '`SHOW_ALL`: This displays both the path and the progress of the animation.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SHOW_ALL`：显示动画的路径和进度。'
- en: '`NO_DEBUG`: This hides all animations.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NO_DEBUG`：隐藏所有动画。'
- en: 'To display the `MotionLayout` path and progress, we can use the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示`MotionLayout`路径和进度，我们可以使用以下内容：
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `SHOW_ALL` value will display the path and the progress of the animation.
    *Figure 15.13* shows how it will look when we use `SHOW_PATH` and `SHOW_PROGRESS`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`SHOW_ALL`值将显示动画的路径和进度。*图15.13*显示了当我们使用`SHOW_PATH`和`SHOW_PROGRESS`时的效果：'
- en: '![ Figure 15.13: Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.13：使用SHOW_PATH（左）显示动画路径，而SHOW_PROGRESS（右）显示动画进度'
- en: '](img/B15216_15_13.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_13.jpg)'
- en: 'Figure 15.13: Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13：使用SHOW_PATH（左）显示动画路径，而SHOW_PROGRESS（右）显示动画进度
- en: While `motionDebug` sounds like something that only appears in debug mode, it
    will also appear in release builds, so it should be removed when you're preparing
    your app for publishing.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`motionDebug`听起来像是只在调试模式下出现的东西，但它也会出现在发布版本中，因此在准备应用程序发布时应将其删除。
- en: During the `MotionLayout` animation, the start constraint will transition to
    the end constraint, even if there's an element or elements that can block the
    objects in motion. We'll discuss how we can avoid this from happening in the next
    section.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MotionLayout`动画期间，起始约束将过渡到结束约束，即使有一个或多个元素可以阻挡运动中的对象。我们将在下一节讨论如何避免这种情况发生。
- en: Modifying the MotionLayout Path
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改MotionLayout路径
- en: In an animation with `MotionLayout`, the UI will play the motion from the start
    constraint to the end constraint, even if there are elements in the middle that
    can block our moving views. For example, if `MotionLayout` involves text that
    moves from the top to the bottom of the screen and vice versa, and we add a button
    to the middle, the button will cover the moving text.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MotionLayout`动画中，UI将从起始约束播放动作到结束约束，即使中间有元素可以阻挡我们移动的视图。例如，如果`MotionLayout`涉及从屏幕顶部到底部移动的文本，然后反之，我们在中间添加一个按钮，按钮将覆盖移动的文本。
- en: '*Figure 15.14* shows how the `OK` button is blocking the moving text in the
    middle of the animation:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.14*显示了`OK`按钮如何挡住了动画中间的移动文本：'
- en: '![Figure 15.14: The OK button is blocking the middle of the text animation'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.14：OK按钮挡住了文本动画的中间部分'
- en: '](img/B15216_15_14.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_14.jpg)'
- en: 'Figure 15.14: The OK button is blocking the middle of the text animation'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14：OK按钮挡住了文本动画的中间部分
- en: '`MotionLayout` plays the animation from the start to the end constraint in
    a straight path and adjusts the views based on the specified attributes. We can
    add keyframes between the start and end constraints to adjust the animation path
    and/or the view attributes. For example, during the animation, other than changing
    the position of the moving text to avoid the button, we can also change the attributes
    of the text or other views.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`MotionLayout`以直线路径播放动画从起始到结束约束，并根据指定的属性调整视图。我们可以在起始和结束约束之间添加关键帧来调整动画路径和/或视图属性。例如，在动画期间，除了改变移动文本的位置以避开按钮之外，我们还可以改变文本或其他视图的属性。'
- en: 'Keyframes can be added in `KeyFrameSet` as a child of the transition attribute
    of `motion_scene`. We can use the following keyframes:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 关键帧可以作为`motion_scene`的过渡属性的子级添加到`KeyFrameSet`中。我们可以使用以下关键帧：
- en: '`KeyPosition`: This specifies the view''s position at a specific point during
    the animation to adjust the path.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyPosition`：指定动画过程中特定点上视图的位置以调整路径。'
- en: '`KeyAttribute`: This specifies the view''s attributes at a specific point during
    the animation.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyAttribute`：指定动画过程中特定点上视图的属性。'
- en: '`KeyCycle`: This adds oscillations during animations.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyCycle`：在动画期间添加振荡。'
- en: '`KeyTimeCycle`: This allows cycles to be driven by time instead of animation progress.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyTimeCycle`：这允许循环由时间驱动而不是动画进度。'
- en: '`KeyTrigger`: This adds an element that can trigger an event based on the animation
    progress.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyTrigger`：添加一个可以根据动画进度触发事件的元素。'
- en: We will focus on `KeyPosition` and `KeyAttribute` as `KeyCycle`, `KeyTimeCycle`,
    and `KeyTrigger` are more advanced keyframes and are still subject to changes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点放在`KeyPosition`和`KeyAttribute`上，因为`KeyCycle`、`KeyTimeCycle`和`KeyTrigger`是更高级的关键帧，并且仍然可能会发生变化。
- en: '`KeyPosition` allows us to change the location of views in the middle of the
    `MotionLayout` animation. It has the following attributes:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyPosition`允许我们在`MotionLayout`动画中更改视图的位置。它具有以下属性：'
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`motionTarget`：指定由关键帧控制的对象。'
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the position will be changed. For example, 25 means it is at one quarter
    of the animation, and 50 is the halfway point.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framePosition`：从1到99编号，指定位置将在动作变化时的百分比。例如，25表示动画的四分之一处，50表示动画的中间点。'
- en: '`percentX`: This specifies how much the `x` value of the path will be modified.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percentX`：指定路径的`x`值将被修改多少。'
- en: '`percentY`: This specifies how much the `y` value of the path will be modified.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`percentY`：指定路径的`y`值将被修改多少。'
- en: '`keyPositionType`: This specifies how `KeyPosition` modifies the path.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyPositionType`：指定`KeyPosition`如何修改路径。'
- en: 'The `keyPositionType` attribute can have the following values:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyPositionType`属性可以具有以下值：'
- en: '`parentRelative`: `percentX` and `percentY` are specified based on the parent
    of the view.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parentRelative`：`percentX`和`percentY`是基于视图的父级指定的。'
- en: '`pathRelative`: `percentX` and `percentY` are specified based on the straight
    path from the start constraint to the end constraint.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathRelative`：`percentX`和`percentY`是基于从开始约束到结束约束的直线路径指定的。'
- en: '`deltaRelative`: `percentX` and `percentY` are specified based on the position
    of the view.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deltaRelative`：`percentX`和`percentY`是基于视图位置指定的。'
- en: 'For example, if we want to modify the path of the `TextView` with the `text_view`
    ID at the exact middle of the animation (50%), by moving it 10% by `x` and 10%
    by `y` relative to the parent container of the `TextView`, we would have the following
    key position in `motion_scene`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要在动画的正中间（50%）修改`text_view` ID的`TextView`的路径，通过将其相对于`TextView`的父容器在`x`和`y`方向上移动10%，我们将在`motion_scene`中有以下关键位置：
- en: '[PRE41]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Meanwhile, `KeyAttribute` allows us to change the attributes of views while
    the `MotionLayout` animation is ongoing. Some of the view attributes we can change
    are `visibility`, `alpha`, `elevation`, `rotation`, `scale`, and `translation`.
    It has the following attributes:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，`KeyAttribute`允许我们在`MotionLayout`动画进行时更改视图的属性。我们可以更改的一些视图属性包括`visibility`、`alpha`、`elevation`、`rotation`、`scale`和`translation`。它具有以下属性：
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`motionTarget`：指定由关键帧控制的对象。'
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the view attributes will be applied. For example, 20 means it is at
    one-fifth of the animation, and 75 is the three-quarters point of the animation.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framePosition`：从1到99编号，指定应用视图属性的动作百分比。例如，20表示动画的五分之一处，75表示动画的四分之三处。'
- en: Let's try adding keyframes to the *Tip Calculator* app. During the animation
    of the `ImageView`, it goes on top of the text displaying the tip. We'll fix that
    with keyframes.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试向*Tip Calculator*应用程序添加关键帧。在`ImageView`的动画过程中，它会覆盖显示小费的文本。我们将使用关键帧来解决这个问题。
- en: 'Exercise 15.04: Modifying the Animation Path with Keyframes'
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.04：使用关键帧修改动画路径
- en: 'In the previous exercise, we animated the image to move straight down when
    tapped (or upward when it''s already at the bottom). When it is in the middle,
    the image is covering the tip `TextView`. We''ll be solving this issue in this
    exercise by adding `KeyFrame` to `motion_scene` using Android Studio''s Motion
    Editor:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们动画化了图像在被点击时向下移动（或者当它已经在底部时向上移动）。当图像处于中间位置时，它会覆盖小费`TextView`。我们将通过在Android
    Studio的Motion Editor中向`motion_scene`添加`KeyFrame`来解决这个问题：
- en: Open the *Tip Calculator* app with Android Studio 4.0 or higher.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Android Studio 4.0或更高版本打开*Tip Calculator*应用程序。
- en: Open the `activity_output.xml` file in the `res/layout` directory.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout`目录中打开`activity_output.xml`文件。
- en: Switch to the `Design` view.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`Design`视图。
- en: 'Add `app:motionDebug="SHOW_ALL"` to the `MotionLayout` container. This will
    allow us to see the path and progress information in Android Studio and on our
    device/emulator. Your `MotionLayout` container will look like the following:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`app:motionDebug="SHOW_ALL"`添加到`MotionLayout`容器中。这将允许我们在Android Studio和设备/模拟器上看到路径和进度信息。您的`MotionLayout`容器将如下所示：
- en: '[PRE42]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Run the app and make a computation. On the output screen, tap on the image.
    Look at the tip text while the animation is in progress. You will notice that
    the text is covered by the image in the middle of the animation, as shown in *Figure 15.15*:![Figure
    15.15: The image hides the TextView displaying the tip'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并进行计算。在输出屏幕上，点击图像。观察动画进行时的小费文本。您会注意到在动画的中间，图像会覆盖文本，如*图15.15*所示：![图15.15：图像遮挡显示小费的TextView
- en: '](img/B15216_15_15.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_15.jpg)'
- en: 'Figure 15.15: The image hides the TextView displaying the tip'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15：图像遮挡显示小费的TextView
- en: Go back to the `activity_output.xml` file in Android Studio. Make sure it's
    opened in `Design` view.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Android Studio中的`activity_output.xml`文件。确保它在`Design`视图中打开。
- en: 'In the `Overview` panel at the top right, click the arrow connecting `start_constraint`
    and `end_constraint`. Drag the down arrow in the `Selection` panel to the middle
    (50%), as shown in *Figure 15.16*:![Figure 15.16: Select the arrow representing
    the transition between'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角的`Overview`面板中，单击连接`start_constraint`和`end_constraint`的箭头。在`Selection`面板中将下箭头拖到中间（50%），如*图15.16*所示：![图15.16：选择表示过渡的箭头
- en: the start and end constraints
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和结束约束
- en: '](img/B15216_15_16.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_16.jpg)'
- en: 'Figure 15.16: Select the arrow representing the transition between the start
    and end constraints'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.16：选择表示开始和结束约束之间过渡的箭头
- en: 'Click the `Create KeyFrames` icon to the right of `Transition` in the `Selection`
    panel (the one with a green `+` symbol). Refer to *Figure 15.17* to see the icon:![Figure
    15.17: The Create KeyFrames icon'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Selection`面板中`Transition`右侧的`Create KeyFrames`图标（带有绿色`+`符号）。参考*图15.17*查看图标：![图15.17：创建关键帧图标
- en: '](img/B15216_15_17.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_17.jpg)'
- en: 'Figure 15.17: The Create KeyFrames icon'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.17：创建关键帧图标
- en: Select `KeyPosition`. We will be using `KeyPosition` to adjust the text position
    and avoid the button.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`KeyPosition`。我们将使用`KeyPosition`来调整文本位置，避免按钮。
- en: 'Select `ID`, choose `image`, and set the input position to `50`. The `Type`
    is `parentRelative`, and `PercentX` is `1.5`, as *Figure 15.18* shows. This will
    add a `KeyPosition` attribute for the image at the middle (50%) of the transition,
    which is at 1.5 times relative to the `x` axis of the parent:![Figure 15.18: Provide
    the input to the key position to be made'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`ID`，选择`image`，并将输入位置设置为`50`。`Type`为`parentRelative`，`PercentX`为`1.5`，如*图15.18*所示。这将在过渡的中间（50%）为图像添加一个`KeyPosition`属性，相对于父视图的`x`轴为1.5倍：![图15.18：提供要进行的关键位置的输入
- en: '](img/B15216_15_18.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_18.jpg)'
- en: 'Figure 15.18: Provide the input to the key position to be made'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18：提供要进行的关键位置的输入
- en: 'Click the `Add` button. You will see in the `Design` preview, as shown in *Figure
    15.19*, that the motion path is no longer a straight line. At position 50 (the
    middle of the animation), the text will no longer be covered by the `ImageView`.
    The `ImageView` will be to the right of the `TextView`:![Figure 15.19: The path
    will now be curved instead of straight. The Transition'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Add`按钮。你会在`Design`预览中看到，如*图15.19*所示，运动路径不再是一条直线。在位置50（动画的中间），文本将不再被`ImageView`覆盖。`ImageView`将位于`TextView`的右侧：![图15.19：路径现在将是曲线而不是直线。过渡
- en: panel will also have a new item for KeyPosition
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 面板还将添加一个新的`KeyPosition`项目
- en: '](img/B15216_15_19.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_19.jpg)'
- en: 'Figure 15.19: The path will now be curved instead of straight. The Transition
    panel will also have a new item for KeyPosition'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.19：路径现在将是曲线而不是直线。过渡面板还将添加一个新的`KeyPosition`项目
- en: 'Click the play icon to see how it will animate. Run the application to verify
    it on a device or emulator. You will see that the animation is now curving to
    the right instead of taking its previous straight path, as in *Figure 15.20*:![Figure
    15.20: The animation now avoids the TextView with the tip'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放图标查看动画效果。在设备或模拟器上运行应用程序进行验证。你会看到动画现在向右弯曲，而不是沿着以前的直线路径，如*图15.20*所示：![图15.20：动画现在避开了带有提示的TextView
- en: '](img/B15216_15_20.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_20.jpg)'
- en: 'Figure 15.20: The animation now avoids the TextView with the tip'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20：动画现在避开了带有提示的TextView
- en: 'The Motion Editor will automatically generate the code for `KeyPosition`. If
    you go to the `motion_scene.xml` file, you will see that the Motion Editor added
    the following code in the transition attribute:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Motion Editor将自动生成`KeyPosition`的代码。如果你转到`motion_scene.xml`文件，你会看到Motion Editor在过渡属性中添加了以下代码：
- en: '[PRE43]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: A `KeyPosition` attribute was added in the keyframes during the transition.
    At 50% of the animation, the image's `x` position will be moved by 1.5x relative
    to its parent view. This allows the image to avoid other elements during the animation process.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在过渡期间的关键帧中添加了`KeyPosition`属性。在动画的50%处，图像的`x`位置将相对于其父视图移动1.5倍。这允许图像在动画过程中避开其他元素。
- en: In this exercise, you have added a key position that will adjust the `MotionLayout`
    animation so that it will not block or be blocked by another view in its path.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你已经添加了一个关键位置，它将调整`MotionLayout`动画，使其不会阻塞或被路径中的其他视图阻塞。
- en: Let's test everything you've learned by doing an activity.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过做一个活动来测试你学到的一切。
- en: 'Activity 15.01: Password Generator'
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动15.01：密码生成器
- en: Using a strong password is important to secure our online accounts. It must
    be unique and must include uppercase and lowercase letters, numbers, and special
    characters. In this activity, you will develop an app that can generate a strong password.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 使用强密码来保护我们的在线账户是很重要的。它必须是独一无二的，必须包括大写和小写字母，数字和特殊字符。在这个活动中，你将开发一个可以生成强密码的应用程序。
- en: 'The app will have two screens: the input screen and the output screen. In the
    input screen, the user can provide the length of the password and specify whether
    it must have uppercase or lowercase letters, numbers, or special characters. The
    output screen will display three possible passwords, and when the user selects
    one, the other passwords will move away and a button will display to copy the
    password to the clipboard. You should customize the transition from the input
    to the output screen.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将有两个屏幕：输入屏幕和输出屏幕。在输入屏幕上，用户可以提供密码的长度，并指定它是否必须包含大写或小写字母，数字或特殊字符。输出屏幕将显示三个可能的密码，当用户选择一个时，其他密码将移开，并显示一个按钮将密码复制到剪贴板。你应该自定义从输入到输出屏幕的转换。
- en: 'The steps to complete are as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的步骤如下：
- en: Create a new project in Android Studio 4.0 or higher and name it `Password Generator`.
    Set its package name and `Minimum SDK`.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio 4.0或更高版本中创建一个名为`Password Generator`的新项目。设置它的包名和`Minimum SDK`。
- en: Add the `MaterialComponents` dependency to your `app/build.gradle` file.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MaterialComponents`依赖项添加到你的`app/build.gradle`文件中。
- en: Update the dependency for `ConstraintLayout`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ConstraintLayout`的依赖关系。
- en: Make sure that the activity's theme is using a theme from `MaterialComponents`
    in the `themes.xml` file.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保活动的主题在`themes.xml`文件中使用了`MaterialComponents`的主题。
- en: In the `activity_main.xml` file, remove the `Hello World` `TextView` and add
    the input text field for the length.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`文件中，删除`Hello World`的`TextView`，并添加密码长度的输入文本字段。
- en: Add the code for checkboxes for uppercase, numbers, and special characters.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为大写字母、数字和特殊字符添加复选框代码。
- en: Add a `Generate` button at the bottom of the checkboxes.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在复选框底部添加一个`Generate`按钮。
- en: Create another activity and name it `OutputActivity`.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为`OutputActivity`的活动。
- en: Customize the activity transition from the input screen (`MainActivity`) to
    `OutputActivity`. Open `themes.xml` and update the activity theme with the `windowActivityTransitions`,
    `windowEnterTransition`, and `windowExitTransition` style attributes.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义从输入屏幕（`MainActivity`）到`OutputActivity`的活动转换。打开`themes.xml`并使用`windowActivityTransitions`，`windowEnterTransition`和`windowExitTransition`样式属性更新活动主题。
- en: Update the end of the `onCreate` function in `MainActivity`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`MainActivity`中`onCreate`函数的结尾。
- en: Update the code for `androidx.constraintlayout.widget.ConstraintLayout` in the
    `activity_output.xml` file.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`activity_output.xml`文件中`androidx.constraintlayout.widget.ConstraintLayout`的代码。
- en: Add `app:layoutDescription="@xml/motion_scene"` and `app:motionDebug="SHOW_ALL"`
    to the `MotionLayout` tag.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MotionLayout`标签中添加`app:layoutDescription="@xml/motion_scene"`和`app:motionDebug="SHOW_ALL"`。
- en: Add three instances of `TextView` to the output activity for the three passwords generated.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在输出活动中为生成的三个密码添加三个`TextView`实例。
- en: Add a `Copy` button at the bottom of the screen.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕底部添加一个“复制”按钮。
- en: Add the `generatePassword` function in `OutputActivity`.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OutputActivity`中添加`generatePassword`函数。
- en: Add the code to generate the three passwords based on user input and add a `ClickListener`
    component to the `Copy` button for the user to copy the selected password to the
    clipboard.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码根据用户输入生成三个密码，并为用户添加一个`ClickListener`组件，以便将所选密码复制到剪贴板。
- en: In `OutputActivity`, create an animation per password `TextView`.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OutputActivity`中，为每个密码`TextView`创建一个动画。
- en: Create `ConstraintSet` for the default view.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为默认视图创建`ConstraintSet`。
- en: Add `ConstraintSet` when the first, second, and third passwords are selected.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择第一个、第二个和第三个密码时，添加`ConstraintSet`。
- en: Next, add `Transition` when each password is selected.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择每个密码时，添加`Transition`。
- en: Run the application by going to the `Run` menu and clicking the `Run app` menu item.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到“运行”菜单并点击“运行应用”菜单项来运行应用程序。
- en: Input a length, select uppercase, numbers, and special characters, and tap on
    the `Generate` button. Three passwords will be displayed.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个长度，选择大写字母、数字和特殊字符，然后点击“生成”按钮。将显示三个密码。
- en: 'Select one and the rest will move out of view. A `Copy` button will also be
    displayed. Click on it and check whether the password you selected is now on the
    clipboard. The initial and final state of the output screen will be similar to
    *Figure 15.21*:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个密码，其他密码将移出视图。还会显示一个“复制”按钮。点击它，检查你选择的密码是否现在在剪贴板上。输出屏幕的初始状态和最终状态将类似于*图15.21*：
- en: '![Figure 15.21: The start and end state of MotionLayout in the Password Generator
    app'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.21：密码生成器应用中MotionLayout的起始和结束状态'
- en: '](img/B15216_15_21.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_15_21.jpg)'
- en: 'Figure 15.21: The start and end state of MotionLayout in the Password Generator
    app'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.21：密码生成器应用中MotionLayout的起始和结束状态
- en: Note
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：http://packt.live/3sKj1cp
- en: Summary
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered creating animations and transitions with `CoordinatorLayout`
    and `MotionLayout`. Animations can improve the usability of our app and make it
    stand out compared to other apps.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用`CoordinatorLayout`和`MotionLayout`创建动画和过渡。动画可以提高应用的可用性，并使其与其他应用脱颖而出。
- en: We started by customizing the transition when opening and closing an activity
    with activity transitions. We also learned about adding shared element transitions
    when an activity and the activity that it opens both contain the same elements
    so that we can highlight this link between the shared elements to the users.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定制了打开和关闭活动时的过渡，使用了活动过渡。我们还了解了当一个活动和它打开的活动都包含相同的元素时，如何添加共享元素过渡，以便我们可以向用户突出显示这些共享元素之间的链接。
- en: We learned how we can use `CoordinatorLayout` to handle the motion of its child
    views. Some views have built-in behaviors that handle how they work inside `CoordinatorLayout`.
    You can add custom behaviors to other views too. Then, we moved on to using `MotionLayout`
    to create animations by specifying the start constraint, end constraint, and the
    transition between them. We also looked into modifying the motion path by adding
    keyframes in the middle of the animation. We learned about keyframes such as `KeyPosition`,
    which can change the view's position, and `KeyAttribute`, which can change the
    view's style. We also looked into using the Motion Editor in Android Studio to
    simplify the creation and previewing of animations and modifying the path.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用`CoordinatorLayout`来处理其子视图的运动。一些视图具有内置的行为，用于处理它们在`CoordinatorLayout`中的工作方式。您也可以为其他视图添加自定义行为。然后，我们开始使用`MotionLayout`来创建动画，通过指定起始约束、结束约束和它们之间的过渡。我们还研究了通过在动画中间添加关键帧来修改运动路径。我们了解了关键帧，比如`KeyPosition`，它可以改变视图的位置，以及`KeyAttribute`，它可以改变视图的样式。我们还研究了在Android
    Studio中使用Motion Editor来简化动画的创建和预览以及修改路径。
- en: In the next chapter, we'll be learning about the Google Play store. We'll discuss
    how you can create an account and prepare your apps for release, as well as how
    you can publish them for users to download and use.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于Google Play商店。我们将讨论如何创建帐户并准备您的应用发布，以及如何发布供用户下载和使用。
