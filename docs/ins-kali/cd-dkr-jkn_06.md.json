["```\n$ sudo apt-get install software-properties-common\n$ sudo apt-add-repository ppa:ansible/ansible\n$ sudo apt-get update\n$ sudo apt-get install ansible\n```", "```\n$ ansible --version\nansible 2.3.2.0\n    config file = /etc/ansible/ansible.cfg\n    configured module search path = Default w/o overrides\n```", "```\n$ docker run williamyeh/ansible:ubuntu14.04\nansible-playbook 2.3.2.0\n config file = /etc/ansible/ansible.cfg\n configured module search path = Default w/o overrides\n```", "```\n[group_name]\n<server1_address>\n<server2_address>\n...\n```", "```\n[webservers]\n192.168.0.241\n192.168.0.242\n```", "```\n[webservers]\nweb1 ansible_host=192.168.0.241 ansible_user=admin\nweb2 ansible_host=192.168.0.242 ansible_user=admin\n```", "```\n$ ansible all -m ping\nweb1 | SUCCESS => {\n \"changed\": false,\n \"ping\": \"pong\"\n}\nweb2 | SUCCESS => {\n \"changed\": false,\n \"ping\": \"pong\"\n}\n```", "```\n$ ansible web1 -a \"/bin/echo hello\"\nweb1 | SUCCESS | rc=0 >>\nhello\n```", "```\nansible <target> -m <module_name> -a <module_arguments>\n```", "```\n---\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: ensure apache is at the latest version\n    apt: name=apache2 state=latest\n  - name: ensure apache is running\n    service: name=apache2 state=started enabled=yes\n```", "```\n$ ansible-playbook playbook.yml\n\nPLAY [web1] ***************************************************************\n\nTASK [setup] **************************************************************\nok: [web1]\n\nTASK [ensure apache is at the latest version] *****************************\nchanged: [web1]\n\nTASK [ensure apache is running] *******************************************\n\nok: [web1]\n\nPLAY RECAP ****************************************************************\nweb1: ok=3 changed=1 unreachable=0 failed=0   \n```", "```\n$ ansible-playbook playbook.yml\n\nPLAY [web1] ***************************************************************\n\nTASK [setup] **************************************************************\nok: [web1]\n\nTASK [ensure apache is at the latest version] *****************************\nok: [web1]\n\nTASK [ensure apache is running] *******************************************\nok: [web1]\n\nPLAY RECAP ****************************************************************\nweb1: ok=3 changed=0 unreachable=0 failed=0\n```", "```\ntasks:\n- name: copy configuration\n  copy:\n    src: foo.conf\n    dest: /etc/foo.conf\n  notify:\n  - restart apache\nhandlers:\n- name: restart apache\n  service:\n    name: apache2\n    state: restarted\n```", "```\n$ touch foo.conf\n$ ansible-playbook playbook.yml\n\n...\nTASK [copy configuration] ************************************************\nchanged: [web1]\n\nRUNNING HANDLER [restart apache] *****************************************\nchanged: [web1]\n\nPLAY RECAP ***************************************************************\nweb1: ok=5 changed=2 unreachable=0 failed=0   \n```", "```\n$ echo \"something\" > foo.conf\n$ ansible-playbook playbook.yml\n\n...\n\nTASK [copy configuration] *************************************************\nchanged: [web1]\n\nRUNNING HANDLER [restart apache] ******************************************\nchanged: [web1]\n\nPLAY RECAP ****************************************************************\nweb1: ok=5 changed=2 unreachable=0 failed=0   \n```", "```\n---\n- hosts: web1\n  vars:\n    http_port: 8080\n```", "```\ntasks:\n- name: print port number\n  debug:\n    msg: \"Port number: {{http_port}}\"\n```", "```\n$ ansible-playbook playbook.yml\n\n...\n\nTASK [print port number] **************************************************\nok: [web1] => {\n \"msg\": \"Port number: 8080\"\n}  \n```", "```\n---\n- hosts: web1\n  tasks:\n  - name: print IP address\n    debug:\n      msg: \"{% for host in groups['all'] %} {{\n              hostvars[host]['ansible_host'] }} {% endfor %}\"\n```", "```\n$ ansible-playbook playbook.yml\n\n...\n\nTASK [print IP address] **************************************************\nok: [web1] => {\n \"msg\": \" 192.168.0.241  192.168.0.242 \"\n}\n```", "```\ntemplates/\ntasks/\nhandlers/\nvars/\ndefaults/\nmeta/\n```", "```\n...\n- name: Ensure MySQL Python libraries are installed.\n  apt: \"name=python-mysqldb state=installed\"\n\n- name: Ensure MySQL packages are installed.\n  apt: \"name={{ item }} state=installed\"\n  with_items: \"{{ mysql_packages }}\"\n  register: deb_mysql_install_packages\n...\n```", "```\n---\n- hosts: all\n  become: yes\n  become_method: sudo\n  roles:\n  - role: geerlingguy.mysql\n    become: yes\n```", "```\n$ ansible-galaxy install username.role_name\n```", "```\n$ ansible-galaxy install geerlingguy.mysql\n```", "```\n---\n- hosts: web1\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: install Redis\n    apt:\n      name: redis-server\n      state: present\n  - name: start Redis\n    service:\n      name: redis-server\n      state: started\n  - name: copy Redis configuration\n    copy:\n      src: redis.conf\n      dest: /etc/redis/redis.conf\n    notify: restart Redis\n  handlers:\n  - name: restart Redis\n    service:\n      name: redis-server\n      state: restarted\n```", "```\ndaemonize yes\npidfile /var/run/redis/redis-server.pid\nport 6379\nbind 0.0.0.0\n```", "```\nbootRepackage {\n    executable = true\n}\n```", "```\n- hosts: web2\n  become: yes\n  become_method: sudo\n  tasks:\n  - name: ensure Java Runtime Environment is installed\n    apt:\n      name: default-jre\n      state: present\n  - name: create directory for Calculator\n    file:\n      path: /var/calculator\n      state: directory\n  - name: configure Calculator as a service\n    file:\n      path: /etc/init.d/calculator\n      state: link\n      force: yes\n      src: /var/calculator/calculator.jar\n  - name: copy Calculator\n    copy:\n      src: build/libs/calculator-0.0.1-SNAPSHOT.jar\n      dest: /var/calculator/calculator.jar\n      mode: a+x\n    notify:\n    - restart Calculator\n  handlers:\n  - name: restart Calculator\n    service:\n      name: calculator\n      enabled: yes\n      state: restarted\n```", "```\n$ ./gradlew build\n$ ansible-playbook playbook.yml\n```", "```\ntasks:\n- name: add docker apt keys\n  apt_key:\n    keyserver: hkp://p80.pool.sks-keyservers.net:80\n    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88\n- name: update apt\n  apt_repository:\n    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial main stable\n    state: present\n- name: install Docker\n  apt:\n    name: docker-ce\n    update_cache: yes\n    state: present\n- name: add admin to docker group\n  user:\n    name: admin\n    groups: docker\n    append: yes\n- name: install python-pip\n  apt:\n    name: python-pip\n    state: present\n- name: install docker-py\n  pip:\n    name: docker-py\n- name: install Docker Compose\n  pip:\n    name: docker-compose\n    version: 1.9.0\n```", "```\n- name: run Redis container\n  docker_container:\n    name: redis\n    image: redis\n    state: started\n    exposed_ports:\n    - 6379\n```", "```\nversion: \"2\"\nservices:\n  calculator:\n    image: leszko/calculator:latest\n    ports:\n    - 8080\n  redis:\n    image: redis:latest\n```", "```\n- name: copy docker-compose.yml\n  copy:\n    src: ./docker-compose.yml\n    dest: ./docker-compose.yml\n- name: run docker-compose\n  docker_service:\n    project_src: .\n    state: present\n```"]