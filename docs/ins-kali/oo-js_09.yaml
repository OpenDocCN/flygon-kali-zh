- en: Chapter 9. Promises and Proxies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。承诺和代理
- en: This chapter introduces the important concept of **asynchronous programming**
    and how JavaScript is an ideal language to utilize it. The other topic that we
    will cover in this chapter is meta programming with proxies. These two concepts
    are introduced in ES6.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了**异步编程**的重要概念，以及JavaScript如何成为利用它的理想语言。本章我们还将介绍代理的元编程这两个概念是在ES6中引入的。
- en: In this chapter, our primary focus is to understand asynchronous programming,
    before we jump into the language - specific constructs, let's spend time in understanding
    the concept first.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的主要重点是理解异步编程，在我们深入语言特定的构造之前，让我们花时间来理解这个概念。
- en: 'The first model-the **synchronous model-**is where it all began. This is the
    simplest model of programming. Each task is executed one at a time, and only after
    the first task completes execution can, the next task start. When you program
    in this model, we expect that all tasks before the current task are complete and
    there is no error. Take a look at the following figure:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个模型-**同步模型**-是一切的开始。这是最简单的编程模型。每个任务都是依次执行的，只有在第一个任务完成执行后，下一个任务才能开始。当你在这个模型中编程时，我们期望当前任务之前的所有任务都已经完成，没有错误。看一下以下图：
- en: '![Promises and Proxies](graphics/image_09_001.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Promises and Proxies](graphics/image_09_001.jpg)'
- en: 'The **single threaded asynchronous model** is a familiar model we all know.
    However, this model can be wasteful and optimized. For any nontrivial programs
    composed of several different tasks, this model can be slow. Consider the following
    hypothetical scenario as an example:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**单线程异步模型**是我们都熟悉的模型。然而，这个模型可能是低效的和需要优化的。对于由几个不同任务组成的任何非平凡程序，这个模型可能会很慢。以以下假设情景为例：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the synchronous model in mind, two tasks are executed one after the other.
    This means that the second statement will only be executed once the first has
    completed execution. Assuming the first statement is a costly one and takes 10
    seconds (it is normal to take even more time to read from a remote database),
    the second statement will be blocked.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到同步模型，两个任务是依次执行的。这意味着第二个语句只有在第一个语句完成执行后才会执行。假设第一个语句是一个昂贵的任务，需要10秒（从远程数据库读取甚至需要更长的时间是正常的），第二个语句将被阻塞。
- en: This is a serious problem when you need to write high - performance and scalable
    systems. There is another problem that manifests when you are writing programs
    where you need to write interfaces for human interactions like we do on websites
    that run on a browser. While you are performing a task that may take some time,
    you cannot block the user. They may be entering something in an input field while
    the costly task is running; it would be a terrible experience if we block user
    input while we are busy doing a costly operation. In such scenarios, the costly
    tasks need to be run in the background while we can happily take input from the
    user.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要编写高性能和可扩展的系统时，这是一个严重的问题。还有另一个问题，当你编写需要为人类交互编写接口的程序时，比如我们在浏览器上运行的网站。当你执行可能需要一些时间的任务时，你不能阻塞用户。他们可能正在输入输入字段中的内容，而昂贵的任务正在运行；如果我们在忙于执行昂贵的操作时阻止用户输入，那将是一种糟糕的体验。在这种情况下，昂贵的任务需要在后台运行，而我们可以愉快地接受用户的输入。
- en: 'To solve this, one solution is to split each task into its own thread of control.
    This is called the **multi-threaded** or **threaded model**. Consider the following
    figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，一个解决方案是将每个任务拆分成自己的控制线程。这被称为**多线程**或**线程模型**。考虑以下图：
- en: '![Promises and Proxies](graphics/image_09_002.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Promises and Proxies](graphics/image_09_002.jpg)'
- en: The difference is how the tasks are split. In the threaded model, each task
    is performed in its own thread of control. Usually, threads are managed by the
    operating system and can be run in parallel on different CPU cores or on a single
    core with appropriate thread scheduling done by the CPU. With modern CPUs, the
    threaded model can be extremely optimal in performance. Several languages support
    this popular model. Although a popular model, the threaded model can be complex
    to implement in practice. The threads need to communicate and coordinate with
    each other. Inter-thread communication can get tricky very quickly. There are
    variations of the threaded model where the state is immutable. In such cases,
    the model becomes simpler as each thread is responsible for immutable state and
    there is no need to manage state between threads.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于任务的拆分方式。在线程模型中，每个任务都在自己的控制线程中执行。通常，线程由操作系统管理，并且可以在不同的CPU核心上并行运行，或者在单个核心上通过CPU进行适当的线程调度。对于现代CPU来说，线程模型在性能上可以非常优化。许多语言支持这种流行的模型。尽管是一种流行的模型，线程模型在实践中可能会很复杂。线程需要相互通信和协调。线程间通信可能会很快变得棘手。还有线程模型的变体，其中状态是不可变的。在这种情况下，模型变得更简单，因为每个线程负责不可变状态，而无需在线程之间管理状态。
- en: Asynchronous programming model
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程模型
- en: 'The third model is what interests us the most. In this model, tasks are interleaved
    in a single thread of control. Consider the following figure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个模型是我们最感兴趣的。在这个模型中，任务在单个控制线程中交错进行。考虑以下图：
- en: '![Asynchronous programming model](graphics/image_09_003.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![异步编程模型](graphics/image_09_003.jpg)'
- en: The **asynchronous model** is simpler because you have only one thread. When
    you are executing one task, you are sure that only that task is being executed.
    This model doesn't require complex mechanism for inter-thread coordination and,
    hence, is more predictable. There is one more difference between the threaded
    and the asynchronous models; in the threaded model, you don't have a way to control
    the thread execution as the thread scheduling is mostly done by the operating
    system. However, in the asynchronous model, there is no such challenge.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步模型**更简单，因为你只有一个线程。当你执行一个任务时，你可以确定只有这个任务在执行。这个模型不需要复杂的线程协调机制，因此更可预测。线程模型和异步模型之间还有一个区别；在线程模型中，你没有办法控制线程的执行，因为线程调度大部分是由操作系统完成的。然而，在异步模型中，没有这样的挑战。'
- en: In which scenarios can the asynchronous model outperform the synchronous model?
    If we are simply splitting tasks into smaller chunks, intuitively, even the smaller
    chunks will take quite an amount of time when you add them up in the end.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪些情况下，异步模型可以胜过同步模型？如果我们只是将任务分成更小的块，直觉上，即使这些更小的块在最后加起来也会花费相当多的时间。
- en: 'There is a significant factor we have not yet considered. When you execute
    a task, you will end up waiting on something-a disk read, a database query, or
    a network call; these are blocking operations. When you enter a blocked mode,
    your task simply waits in the synchronous model. Take a look at the following
    figure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个重要的因素我们还没有考虑。当你执行一个任务时，你最终会等待某些东西-磁盘读取、数据库查询或网络调用；这些都是阻塞操作。当你进入阻塞模式时，你的任务在同步模型中只是等待。看一下下面的图：
- en: '![Asynchronous programming model](graphics/image_09_004.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![异步编程模型](graphics/image_09_004.jpg)'
- en: In the preceding diagram, the black blocks are where a task is waiting on something.
    What are the typical operations that can cause such a block? A task is performed
    in a CPU and RAM. A typical CPU and RAM can handle data transfer orders of magnitude
    faster than a typical disc read or a network call.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，黑色块是任务等待某些东西的地方。什么是可能导致这种阻塞的典型操作？任务在CPU和RAM中执行。典型的CPU和RAM可以处理数据传输命令，比典型的磁盘读取或网络调用快几个数量级。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Please refer to a comparison ([https://gist.github.com/jboner/2841832](https://gist.github.com/jboner/2841832))
    of latencies between CPU, internal memory, and discs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考CPU、内存和磁盘之间延迟的比较（[https://gist.github.com/jboner/2841832](https://gist.github.com/jboner/2841832)）。
- en: When your tasks wait on an **I**/**O** (**Input**/**Output**) from such sources,
    the latency is unpredictable. For a synchronous program that does a lot of I/O,
    this is a recipe for bad performance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的任务等待来自这些来源的**I**/**O**（**输入**/**输出**）时，延迟是不可预测的。对于一个做大量I/O的同步程序来说，这是性能不佳的原因。
- en: 'The most important difference between the synchronous and asynchronous models
    is the way they handle blocking operations. In the asynchronous model, a program,
    when faced with a task that encounters a block, executes another task without
    waiting for the blocking operation to finish. In a program where there are potential
    blocks, an asynchronous program outperforms an equivalent synchronous program
    because less time is spent on waiting. A slightly inaccurate visualization of
    such a model would be as seen in the following figure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同步和异步模型之间最重要的区别是它们处理阻塞操作的方式。在异步模型中，当程序面临一个遇到阻塞的任务时，会在不等待阻塞操作完成的情况下执行另一个任务。在一个可能存在阻塞的程序中，异步程序的性能优于等效的同步程序，因为等待的时间更少。这种模型的一个略微不准确的可视化如下图所示：
- en: '![Asynchronous programming model](graphics/image_09_005.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![异步编程模型](graphics/image_09_005.jpg)'
- en: With this conceptual background of the asynchronous model with us, we can look
    at language - specific constructs to support this model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个异步模型的概念背景，我们可以看看语言特定的构造来支持这个模型。
- en: JavaScript call stack
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript调用堆栈
- en: 'In JavaScript, function calls form a stack of frames. Consider the following
    example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，函数调用形成一个帧的堆栈。考虑以下例子：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we call function `a()`, the first frame in the stack is created with arguments
    to the function and all local variables in the `a()`function. When function `a()`
    calls function `b()`, a second frame is created and pushed to the top of the stack.
    This goes on for all function calls. When the `c()`function returns, the top frame
    from the stack is popped out, leaving functions `b()` and `a()`; this goes on
    until the entire stack is empty. This is necessary to maintain because once the
    function finishes execution, JavaScript will need to know where to return.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用函数`a()`时，堆栈中创建了第一个帧，其中包含函数`a()`中的参数和所有局部变量。当函数`a()`调用函数`b()`时，第二个帧被创建并推到堆栈顶部。所有函数调用都是这样进行的。当`c()`函数返回时，堆栈顶部的帧被弹出，留下函数`b()`和`a()`；这一直持续到整个堆栈为空。这是必要的，因为一旦函数执行完毕，JavaScript需要知道返回的位置。
- en: Message queue
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息队列
- en: The JavaScript runtime contains a message queue. This queue contains the list
    of messages to be processed. These messages are queued in response to events such
    as `click` or an HTTP response received. Each message is associated with a callback
    function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript运行时包含一个消息队列。这个队列包含要处理的消息列表。这些消息是响应事件（如`click`或收到的HTTP响应）而排队的。每个消息都与一个回调函数相关联。
- en: Event loop
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件循环
- en: A browser tab runs in a single thread-an event loop. This loop continuously
    picks messages from the message queue and executes the callbacks associated with
    them. The event loop simply keeps picking tasks from the message queues while
    other processes add tasks to the message queue. Other processes such as timers
    and event handlers run in parallel and keep adding tasks to the queue.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器标签在一个单线程-事件循环中运行。这个循环不断地从消息队列中挑选消息并执行与之相关联的回调。事件循环只是不断地从消息队列中挑选任务，而其他进程则向消息队列添加任务。其他进程，如定时器和事件处理程序，会并行运行并不断向队列中添加任务。
- en: Timers
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定时器
- en: 'The `setTimeout()`method creates a timer and waits until it fires. When the
    timer is executed, a task is added to the message queue. The `setTimeOut()` method
    takes two arguments: a callback, and the duration in milliseconds. After the duration,
    the callback is added to the message queue. Once the callback is added to the
    message queue, the event loop will eventually pick it up and execute it. There
    is, however, no guarantee when the callback will be picked up by the event loop.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout()`方法创建一个计时器，并等待直到触发。当计时器执行时，一个任务被添加到消息队列中。`setTimeOut()`方法接受两个参数：一个回调和持续时间（以毫秒为单位）。在持续时间之后，回调被添加到消息队列中。一旦回调被添加到消息队列中，事件循环最终会捡起它并执行它。然而，并没有保证事件循环何时会捡起回调。'
- en: Run to completion
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完全运行
- en: When the event loop picks up a message from the queue, the associated callback
    is run to completion. This means that a message is processed completely before
    the next message from the queue is processed. This property gives the asynchronous
    model a sense of predictability. As there is no intervention to preempt any of
    the messages in between execution, this model is much simpler than other models,
    where any unit of execution can be halted in between. However, once the message
    is picked up, even if the execution takes too long, any other interaction on the
    browser is blocked.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件循环从队列中取出消息时，相关的回调会完全运行。这意味着在处理下一个消息之前，消息会完全被处理。这个特性给了异步模型一种可预测性。由于在执行之间没有任何干预来中断任何消息，这个模型比其他模型简单得多。然而，一旦消息被取出，即使执行时间太长，浏览器上的任何其他交互也会被阻塞。
- en: Events
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: 'You can register event handlers for an object and receive results of a method
    asynchronously. The following example shows how we can set up event handlers for
    the `XMLHttpRequest` API:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为对象注册事件处理程序，并异步接收方法的结果。以下示例显示了如何为`XMLHttpRequest` API设置事件处理程序：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding snippet, we are creating the object of the `XMLHttpRequest`
    class. Once the request object is created, we will register event handlers for
    it. Event handlers, such as `onload()`, are triggered asynchronously when the
    response is received from the `open()` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，我们创建了`XMLHttpRequest`类的对象。一旦请求对象被创建，我们将为其注册事件处理程序。例如`onload()`等事件处理程序在从`open()`方法接收到响应时会异步触发。
- en: The `send()` method doesn't actually initiate the request, it adds the request
    to the message queue for the event loop to pick it up and execute necessary callbacks
    associated with it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`send()`方法实际上并不会启动请求，它会将请求添加到消息队列中，以便事件循环捡起并执行与之关联的必要回调。'
- en: Callbacks
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回调
- en: The Node.js application popularized this style of receiving asynchronous data.
    A callback is a function passed as the last argument to the asynchronous function
    call.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js应用程序推广了这种接收异步数据的风格。回调是作为异步函数调用的最后一个参数传递的函数。
- en: 'To illustrate the usage, let''s use the following example of reading a file
    in Node.js:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明用法，让我们使用Node.js中读取文件的以下示例：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Don't worry about a few details here. We are using the filesystem module as
    an `fs` alias. This module has a `readFile` method to read a file asynchronously.
    We will pass the file path and filename as the first argument and a callback function
    as the last argument of the function. We are using an anonymous function as the
    callback in the example.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心这里的一些细节。我们使用文件系统模块作为`fs`的别名。这个模块有一个`readFile`方法来异步读取文件。我们将文件路径和文件名作为第一个参数传递，将回调函数作为函数的最后一个参数传递。在示例中，我们使用匿名函数作为回调。
- en: The callback function has two arguments-error and data. When the `readFile()`
    method is successful, the callback function receives `data`, and if it fails,
    the `error` argument will have the error details.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数有两个参数-错误和数据。当`readFile()`方法成功时，回调函数接收`data`，如果失败，`error`参数将包含错误详情。
- en: 'We can also use a slightly functional style to write the same callback. Consider
    the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用稍微函数式的风格来编写相同的回调。考虑以下示例：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This style of passing callbacks is also called **continuous-passing style**
    (**CPS**); the next step of execution or continuation is passed as a parameter.
    The following example further illustrates the CPS style of callbacks:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这种传递回调的风格也被称为**连续传递风格**（**CPS**）；执行的下一步或继续作为参数传递。下面的例子进一步说明了回调的CPS风格：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will provide the continuation (the next callback) to each step. This nested
    callback style also causes a problem sometimes referred to as callback hell.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个步骤提供继续（下一个回调）。这种嵌套的回调风格有时也会引起一个问题，被称为回调地狱。
- en: Callbacks and the CPS introduce a radically different style of programming.
    Although it is easier to understand callbacks compared to other constructs, callbacks
    can create slightly difficult to understand code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回调和CPS引入了一种完全不同的编程风格。虽然与其他构造相比，理解回调更容易，但回调可能会创建稍微难以理解的代码。
- en: Promises
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺
- en: ES6 introduces promises as an alternate to callbacks. Like callbacks, promises
    are used to retrieve the results of an asynchronous function call. Using promises
    is easier than callbacks and produces more readable code. However, to implement
    promises for your asynchronous functions requires more work.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了承诺作为回调的替代。与回调一样，承诺用于检索异步函数调用的结果。使用承诺比回调更容易，并产生更可读的代码。然而，为了为您的异步函数实现承诺需要更多的工作。
- en: A promise object represents a value that may be available now or in the future,
    or possibly never. As the name suggests, a promise may be fulfilled or rejected.
    A promise acts as a placeholder for the eventual result.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺对象代表一个可能现在或将来可用的值，或者可能永远不可用。顾名思义，承诺可能会被实现或被拒绝。承诺充当了最终结果的占位符。
- en: 'A promise has three mutually exclusive states, which are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺有三种互斥的状态，如下所示：
- en: A promise is **pending** before the result is ready; this is the initial state.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果准备好之前，承诺是**待定**的；这是初始状态。
- en: A promise is **fulfilled** when the result is ready.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当结果准备好时，承诺是**实现**的。
- en: On an error, a promise is **rejected**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发生错误时，promise被**拒绝**。
- en: When a pending promise is either fulfilled or rejected, associated callbacks/handlers
    that are queued up by the `then()` method of the promise are executed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个待定的promise被完成或拒绝时，与promise的`then()`方法排队的相关回调/处理程序将被执行。
- en: 'The purpose of promises is to provide a better syntax for the CPS callbacks.
    The typical CPS style asynchronous functions like the following one:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: promise的目的是为CPS回调提供更好的语法。典型的CPS风格的异步函数如下：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code can be written a bit differently with promises, as shown
    in the following lines of code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码可以用promise写得有些不同，如下面的代码行所示：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The asynchronous function now returns a promise, which is the placeholder for
    an eventual result. Callbacks registered with the `then()` method are notified
    when the result is ready.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 异步函数现在返回一个promise，这是一个最终结果的占位符。使用`then()`方法注册的回调在结果准备好时会被通知。
- en: 'You can chain the `then()` method. When the `then()` method sees that the callback
    triggered another asynchronous action that returns a promise, it returns that
    promise. Take a look at the following example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以链接`then()`方法。当`then()`方法看到回调触发了另一个返回promise的异步操作时，它会返回该promise。看一下以下例子：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s see a real example of how we can use promises. We saw a typical example
    of asynchronous file reads in Node.js; now let''s see what that example will look
    like when used with promises. To jog our memories, we wrote something like the
    following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个实际的例子，说明我们如何使用promise。我们在Node.js中看到了一个典型的异步文件读取的例子；现在让我们看看当使用promise时，这个例子会是什么样子。为了唤起我们的记忆，我们写了类似以下的东西：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We see callbacks as continuation here; now let''s see how the same function
    can be written using promises:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将回调视为延续；现在让我们看看如何使用promise来编写相同的函数：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now the callbacks are invoked via the result and methods `then()` and `catch()`.
    The error handling is much cleaner because we are not writing the `if...else`
    and `try...catch` constructs anymore.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回调通过结果和方法`then()`和`catch()`被调用。错误处理更加清晰，因为我们不再写`if...else`和`try...catch`构造了。
- en: Creating promises
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建promise
- en: We saw how we can consume promises. Now, let's look at how we can produce them.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何消费promise。现在，让我们看看如何生成它们。
- en: 'As a producer, you can create a `Promise` object and send a result via the
    `Promise`. The construct looks like the following code snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作为生产者，你可以创建一个`Promise`对象，并通过`Promise`发送结果。这个构造看起来像以下的代码片段：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The parameter to `Promise` is an executor function. The executor handles two
    states of the promise, which are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`的参数是一个执行函数。执行函数处理promise的两种状态，如下：'
- en: '**Resolving**: If the result was generated successfully, the executor sends
    the results back via the `resolve()` method. This method usually fulfills the
    `Promise` object.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决**：如果结果成功生成，执行器通过`resolve()`方法将结果发送回来。这个方法通常会完成`Promise`对象。'
- en: '**Rejecting**: If an error happened, the executor notifies the consumer via
    the `reject()` method. If an exception occurs, it is notified via the `reject()`
    method as well.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝**：如果发生错误，执行器通过`reject()`方法通知消费者。如果发生异常，也会通过`reject()`方法通知。'
- en: 'As a consumer, you are notified of either fulfillment of promise or rejection
    of promise via the `then()` and `catch()` methods. Consider the following piece
    of code as an example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为消费者，你可以通过`then()`和`catch()`方法被通知promise的完成或拒绝。考虑以下代码片段作为例子：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have some background on how to produce promises, let''s rewrite
    our earlier example of the asynchronous file''s `read` method to produce promises.
    We will use Node.js''s filesystem module and the `readFile()` method as we did
    last time. If you don''t understand any Node.js specific construct in the following
    snippet, please don''t worry. Consider the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对如何生成promise有了一些背景知识，让我们重新编写我们之前的异步文件`read`方法的例子，以生成promise。我们将使用Node.js的文件系统模块和`readFile()`方法，就像上次一样。如果你不理解以下代码片段中的任何Node.js特定构造，请不要担心。考虑以下代码：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding snippet, we are creating a new `Promise` object and returning
    it to the consumer. As we saw earlier, the parameter to the `Promise` object is
    the executor function and the executor function takes care of two states of `Promise`-fulfilled
    and rejected. The executor function takes in two arguments, `resolve` and `reject`.
    These are the functions that notify the state of the `Promise` object to the consumer.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个新的`Promise`对象并将其返回给消费者。正如我们之前看到的，`Promise`对象的参数是执行函数，执行函数负责`Promise`的两种状态-完成和拒绝。执行函数接受两个参数，`resolve`和`reject`。这些是通知`Promise`对象状态给消费者的函数。
- en: Inside the executor function, we will call the actual function-the `readFile()`
    method; if this function is successful, we will return the result using the `resolve()`
    method and if there is an error, we will notify the consumer using the `reject()`
    method.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行函数内部，我们将调用实际的函数-`readFile()`方法；如果这个函数成功，我们将使用`resolve()`方法返回结果，如果有错误，我们将使用`reject()`方法通知消费者。
- en: 'If an error happens in one of the `then()` reactions, they are caught in the
    subsequent `catch()` block. Take a look at the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`then()`中发生错误，它们会在后续的`catch()`块中被捕获。看一下以下代码：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this case, the `then()` reaction causes an exception or error, and the subsequent
    `catch()` block can handle this.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`then()`的反应引起了异常或错误，后续的`catch()`块可以处理这个问题。
- en: 'Similarly, an exception thrown inside a `then()` or `catch()` handler is passed
    to the next error handler. Consider the following code snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在`then()`或`catch()`处理程序中抛出的异常会传递给下一个错误处理程序。考虑以下代码片段：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Promise.all()
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Promise.all()
- en: 'One interesting use case is to create an iterable over promises. Let''s assume
    that you have a list of URLs you want to visit and parse the results. You can
    create promises for each of the fetch URL calls and use them individually, or
    you can create an iterator with all the URLs and use the promise in one go. The
    `Promise.all()` method takes the iterable of promises as an argument. When all
    of the promises are fulfilled, an array is filled with their results. Consider
    the following code as an example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '一个有趣的用例是创建一个可迭代的promise。假设您有一个要访问和解析结果的URL列表。您可以为每个fetch URL调用创建promise，并单独使用它们，或者您可以创建一个包含所有URL的迭代器，并一次性使用promise。`Promise.all()`方法将可迭代的promise作为参数。当所有promise都被实现时，数组将填充其结果。考虑以下代码作为示例:'
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Metaprogramming and proxies
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元编程和代理
- en: Metaprogramming refers to a method of programming where the program is aware
    of its structure and can manipulate itself. Many languages have support for metaprogramming
    in the form of macros. Macros are important constructs in functional languages
    such as **LISP** (**Locator/ID Separation Protocol**). In languages such as Java
    and C#, reflection is a form of metaprogramming because a program can examine
    information about itself using reflection.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 元编程是指一种编程方法，其中程序了解其结构并可以操纵自身。许多语言支持元编程，以宏的形式。宏是函数式语言（如**LISP**（**Locator/ID
    Separation Protocol**））中的重要构造。在Java和C#等语言中，反射是一种元编程形式，因为程序可以使用反射来检查有关自身的信息。
- en: 'In JavaScript, you can say that methods of object allow you to examine the
    structure and hence, they offer metaprogramming. There are three types of metaprogramming
    paradigms (*The Art of the Metaobject Protocol,* Kiczales et al, [https://mitpress.mit.edu/books/art-metaobject-protocol](https://mitpress.mit.edu/books/art-metaobject-protocol)):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，您可以说对象的方法允许您检查结构，因此它们提供了元编程。有三种元编程范式(*元对象协议的艺术*，Kiczales等人，[https://mitpress.mit.edu/books/art-metaobject-protocol](https://mitpress.mit.edu/books/art-metaobject-protocol))：
- en: '**Introspection**: This gives a read-only access to the internals of a program'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '内省: 这给予程序内部的只读访问'
- en: '**Self-modification**: This makes structural changes possible to the program'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '自我修改: 这使得对程序进行结构性更改成为可能'
- en: '**Intercession**: This changes language semantics'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '干预: 这改变了语言语义'
- en: 'The `Object.keys()` method is an example of introspection. In the following
    example, the program is examining its own structure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.keys()`方法是内省的一个例子。在下面的例子中，程序正在检查自己的结构:'
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Self-modification is also possible in JavaScript by mutating the properties
    of an object.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，通过改变对象的属性，也可以进行自我修改。
- en: However, intercession, or the ability to change language semantics, is something
    not available in JavaScript till ES6\. Proxies are introduced to open up this
    possibility.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，干预或更改语言语义的能力在ES6之前在JavaScript中是不可用的。代理被引入以开放这种可能性。
- en: Proxy
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理
- en: You can use a proxy to determine the behavior of an object, which is called
    the target, whenever its properties are accessed. A proxy is used to define custom
    behavior for basic operations on an object, such as looking up a property, function
    invocation, and assignment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用代理来确定对象的行为，每当访问其属性时，称为目标。代理用于定义对象的基本操作的自定义行为，例如查找属性、函数调用和赋值。
- en: 'A proxy needs two parameters, which are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '代理需要两个参数，如下所示:'
- en: '**Handler**: For each operation you want to customize, you need a `handler`
    method. This method intercepts the operations and is sometimes called a trap.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '处理程序: 对于要自定义的每个操作，您需要一个`handler`方法。此方法拦截操作，有时称为陷阱。'
- en: '**Target**: When the `handler` does not intercept the operation, the `target`
    is used as a fallback.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '目标: 当`handler`未拦截操作时，`target`作为回退使用。'
- en: 'Let''s take a look at the following example to understand this concept better:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们看下面的例子，以更好地理解这个概念:'
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, we are trapping the operation of getting a property from the
    object. We return `42` as a default property value if the property does not exist.
    We are using the `get` handler to trap this operation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在捕获从对象获取属性的操作。如果属性不存在，我们将返回`42`作为默认属性值。我们使用`get`处理程序来捕获此操作。
- en: 'You can use proxies to validate values before setting them on an object. For
    this, we can trap the `set` handler as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以使用代理在将其设置在对象上之前验证值。为此，我们可以捕获`set`处理程序如下:'
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, we are trapping the `set` handler. When we set a property
    of the object, we are trapping that operation and introducing validation of values.
    If the value is valid, we will set the property.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们正在捕获`set`处理程序。当我们设置对象的属性时，我们正在捕获该操作并引入值的验证。如果值有效，我们将设置属性。
- en: Function traps
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数陷阱
- en: 'There are two operations that can be trapped if the target is a function: `apply`
    and `construct`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标是函数，可以捕获两种操作:`apply`和`construct`。
- en: To intercept function calls, you will need to trap the `get` and `apply` operations.
    First get the function and then apply to call the function. So, you `get` the
    function and return the function.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要拦截函数调用，您需要捕获`get`和`apply`操作。首先获取函数，然后应用调用该函数。因此，您`get`函数并返回函数。
- en: 'Let''s consider the following example to understand how method interception
    works:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们考虑以下示例，以了解方法拦截是如何工作的:'
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding example, we are trapping the `get` operation. If the type of
    the property being `get` is a function, we will use `apply` to invoke that function.
    If you see the output, we are getting two `console.logs`; the first is from the
    proxy where we trapped the `get` operation and the second is from the actual method
    call.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们正在捕获`get`操作。如果要`get`的属性的类型是函数，我们将使用`apply`来调用该函数。如果您看到输出，我们会得到两个`console.logs`；第一个是来自代理的，我们捕获了`get`操作，第二个是来自实际方法调用。
- en: Metaprogramming is an interesting construct to use. However, any kind of introspection
    or reflection comes at the cost of performance. Care should be taken while using
    proxies as they can be slow.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 元编程是一个有趣的构造。然而，任何形式的内省或反射都会影响性能。在使用代理时应该小心，因为它们可能会很慢。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at two important concepts. ES6 proxies are useful
    meta programming constructs used to define custom behavior for fundamental operations
    (for example, property lookup, assignment, enumeration, function invocation, and
    so on). We looked at how to use handlers, traps, and proxy targets to intercept
    and modify the default behavior of operations. This gives us very powerful meta
    programming capabilities earlier lacking in JavaScript.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了两个重要的概念。ES6代理是用于定义基本操作的自定义行为的有用的元编程构造（例如，属性查找、赋值、枚举、函数调用等）。我们看了如何使用处理程序、陷阱和代理目标来拦截和修改操作的默认行为。这为我们提供了在JavaScript中以前缺乏的非常强大的元编程能力。
- en: The other important construct we discussed in this chapter was ES6 promises.
    Promises are important because they make asynchronous programming constructs easier
    to work with. A promise acts as a proxy for a value not necessarily known when
    the promise is created. This lets asynchronous methods return values like synchronous
    methods - instead of the final value, the asynchronous method returns a promise
    for the value at some point in the future.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的另一个重要构造是ES6的Promise。Promise很重要，因为它们使得异步编程构造更容易使用。Promise充当了一个值的代理，当Promise被创建时值不一定已知。这使得异步方法可以返回类似于同步方法的值
    - 异步方法返回的不是最终值，而是将来某个时间点的值的Promise。
- en: These are two very powerful constructs in ES6 that greatly enhance the language's
    core capabilities.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是ES6中非常强大的构造，极大地增强了语言的核心能力。
- en: In the next chapter, we will look at the fascinating possibilities around browsers
    and DOM manipulation using JavaScript.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用JavaScript在浏览器和DOM操作方面的迷人可能性。
