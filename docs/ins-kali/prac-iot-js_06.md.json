["```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar request = require('request'); \nvar ADXL345 = require('adxl345-sensor'); \nrequire('events').EventEmitter.prototype._maxListeners = 100; \n\nvar adxl345 = new ADXL345(); // defaults to i2cBusNo 1, i2cAddress 0x53 \n\nvar Lcd = require('lcd'), \n    lcd = new Lcd({ \n        rs: 12, \n        e: 21, \n        data: [5, 6, 17, 18], \n        cols: 8, \n        rows: 2 \n    }); \n\nvar aclCtr = 0, \n    locCtr = 0; \n\nvar x, prevX, y, prevY, z, prevZ; \nvar locationG; // global location variable \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    client.subscribe('socket'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        displayLocation(); \n        initADXL345(); \n        client.publish('api-engine', mac); \n    }); \n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nfunction initADXL345() { \n    adxl345.init().then(function() { \n            console.log('ADXL345 initialization succeeded'); \n            // init loop after ADXL345 has been setup \n            loop(); \n        }) \n        .catch(function(err) { \n            console.error('ADXL345 initialization failed: ', err); \n        }); \n} \n\nfunction loop() { \n    // infinite loop, with 1 seconds delay \n    setInterval(function() { \n        // wait till we get the location \n        // then start processing \n        if (!locationG) return; \n\n        if (aclCtr === 3) { // every 3 seconds \n            aclCtr = 0; \n            readSensorValues(function(acclVals) { \n                var x = acclVals.x; \n                var y = acclVals.y; \n                var z = acclVals.z; \n\n                var data2Send = { \n                    data: { \n                        acclVals: acclVals, \n                        location: locationG \n                    }, \n                    macAddress: macAddress \n                }; \n\n                // no duplicate data \n                if (x !== prevX || y !== prevY || z !== prevZ) { \n                    console.log('data2Send', data2Send); \n                    client.publish('accelerometer', JSON.stringify(data2Send)); \n                    console.log('Data Published'); \n                    prevX = x; \n                    prevY = y; \n                    prevZ = z; \n                } \n            }); \n        } \n\n        if (locCtr === 300) { // every 300 seconds \n            locCtr = 0; \n            displayLocation(); \n        } \n\n        aclCtr++; \n        locCtr++; \n    }, 1000); // every one second \n} \n\nfunction readSensorValues(CB) { \n    adxl345.getAcceleration(true) // true for g-force units, else false for m/s\u00b2 \n        .then(function(acceleration) { \n            if (CB) CB(acceleration); \n        }) \n        .catch((err) => { \n            console.log('ADXL345 read error: ', err); \n        }); \n} \n\nfunction displayLocation() { \n    request('http://ipinfo.io', function(error, res, body) { \n        var info = JSON.parse(body); \n        // console.log(info); \n        locationG = info; \n        var text2Print = ''; \n        text2Print += 'City: ' + info.city; \n        text2Print += ' Region: ' + info.region; \n        text2Print += ' Country: ' + info.country + ' '; \n        lcd.setCursor(16, 0); // 1st row     \n        lcd.autoscroll(); \n        printScroll(text2Print); \n    }); \n} \n\n// a function to print scroll \nfunction printScroll(str, pos) { \n    pos = pos || 0; \n\n    if (pos === str.length) { \n        pos = 0; \n    } \n\n    lcd.print(str[pos]); \n    //console.log('printing', str[pos]); \n\n    setTimeout(function() { \n        return printScroll(str, pos + 1); \n    }, 300); \n} \n\n// If ctrl+c is hit, free resources and exit. \nprocess.on('SIGINT', function() { \n    lcd.clear(); \n    lcd.close(); \n    process.exit(); \n}); \n```", "```js\nnpm install async getmac adxl345-sensor mqtt request --save\n```", "```js\nmosca -c index.js -v | pino  \n```", "```js\nnpm start  \n```", "```js\nvar Data = require('../api/data/data.model'); \nvar mqtt = require('mqtt'); \nvar config = require('../config/environment'); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    console.log('Connected to Mosca at ' + config.mqtt.host + ' on port ' + config.mqtt.port); \n    client.subscribe('api-engine'); \n    client.subscribe('accelerometer'); \n}); \n\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \n    if (topic === 'api-engine') { \n        var macAddress = message.toString(); \n        console.log('Mac Address >> ', macAddress); \n        client.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'accelerometer') { \n        var data = JSON.parse(message.toString()); \n        // create a new data record for the device   \n        Data.create(data, function(err, data) { \n            if (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \n            console.log('Data Saved :', data.data); \n        }); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n```", "```js\n'use strict'; \n\nvar Data = require('./data.model'); \n\n/** \n * Get Data for a device \n */ \nexports.index = function(req, res) { \n    var macAddress = req.params.deviceId; \n    var limit = parseInt(req.params.limit) || 30; \n\n    Data \n        .find({ \n            macAddress: macAddress \n        }) \n        .sort({ 'createdAt': -1 }) \n        .limit(limit) \n        .exec(function(err, data) { \n            if (err) return res.status(500).send(err); \n            res.status(200).json(data); \n        }); \n}; \n\n/** \n * Create a new data record \n */ \nexports.create = function(req, res, next) { \n    var data = req.body || {}; \n    data.createdBy = req.user._id; \n\n    Data.create(data, function(err, _data) { \n        if (err) return res.status(500).send(err); \n        return res.json(_data); \n    }); \n}; \n```", "```js\nnpm start\n```", "```js\n<div class=\"container\">\n  <br>\n  <div *ngIf=\"!device\">\n    <h3 class=\"text-center\">Loading!</h3>\n  </div>\n  <div class=\"row\" *ngIf=\"lastRecord\">\n    <div class=\"col-md-12\">\n      <div class=\"panel panel-info\">\n        <div class=\"panel-heading\">\n          <h3 class=\"panel-title\">\n                        {{device.name}}\n                    </h3>\n          <span class=\"pull-right btn-click\">\n                        <i class=\"fa fa-chevron-circle-up\"></i>\n                    </span>\n        </div>\n        <div class=\"clearfix\"></div>\n        <div class=\"table-responsive\">\n          <table class=\"table table-striped\">\n            <tr *ngIf=\"lastRecord\">\n              <td>X-Axis</td>\n              <td>{{lastRecord.data.acclVals.x}} {{lastRecord.data.acclVals.units}}</td>\n            </tr>\n            <tr *ngIf=\"lastRecord\">\n              <td>Y-Axis</td>\n              <td>{{lastRecord.data.acclVals.y}} {{lastRecord.data.acclVals.units}}</td>\n            </tr>\n            <tr *ngIf=\"lastRecord\">\n              <td>Z-Axis</td>\n              <td>{{lastRecord.data.acclVals.z}} {{lastRecord.data.acclVals.units}}</td>\n            </tr>\n            <tr *ngIf=\"lastRecord\">\n              <td>Location</td>\n              <td>{{lastRecord.data.location.city}}, {{lastRecord.data.location.region}}, {{lastRecord.data.location.country}}</td>\n            </tr>\n            <tr *ngIf=\"lastRecord\">\n              <td>Received At</td>\n              <td>{{lastRecord.createdAt | date : 'medium'}}</td>\n            </tr>\n          </table>\n          <hr>\n          <div class=\"col-md-12\" *ngIf=\"acclVals.length > 0\">\n            <canvas baseChart [datasets]=\"acclVals\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n```", "```js\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { DevicesService } from '../services/devices.service';\nimport { Params, ActivatedRoute } from '@angular/router';\nimport { SocketService } from '../services/socket.service';\nimport { DataService } from '../services/data.service';\nimport { NotificationsService } from 'angular2-notifications';\n\n@Component({\n  selector: 'app-device',\n  templateUrl: './device.component.html',\n  styleUrls: ['./device.component.css']\n})\nexport class DeviceComponent implements OnInit, OnDestroy {\n  device: any;\n  data: Array<any>;\n  toggleState: boolean = false;\n  private subDevice: any;\n  private subData: any;\n  lastRecord: any;\n\n  // line chart config\n  public lineChartOptions: any = {\n    responsive: true,\n    legend: {\n      position: 'bottom',\n    }, hover: {\n      mode: 'label'\n    }, scales: {\n      xAxes: [{\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Time'\n        }\n      }],\n      yAxes: [{\n        display: true,\n        ticks: {\n          beginAtZero: true,\n          // steps: 10,\n          // stepValue: 5,\n          // max: 70\n        }\n      }],\n      zAxes: [{\n        display: true,\n        ticks: {\n          beginAtZero: true,\n          // steps: 10,\n          // stepValue: 5,\n          // max: 70\n        }\n      }]\n    },\n    title: {\n      display: true,\n      text: 'X,Y,Z vs. Time'\n    }\n  };\n\n  public lineChartLegend: boolean = true;\n  public lineChartType: string = 'line';\n  public acclVals: Array<any> = [];\n  public lineChartLabels: Array<any> = [];\n\n  constructor(private deviceService: DevicesService,\n    private socketService: SocketService,\n    private dataService: DataService,\n    private route: ActivatedRoute,\n    private notificationsService: NotificationsService) { }\n\n  ngOnInit() {\n    this.subDevice = this.route.params.subscribe((params) => {\n      this.deviceService.getOne(params['id']).subscribe((response) => {\n        this.device = response.json();\n        this.getData();\n      });\n    });\n  }\n\n  getData() {\n    this.dataService.get(this.device.macAddress).subscribe((response) => {\n      this.data = response.json();\n      this.lastRecord = this.data[0]; // descending order data\n      this.toggleState = this.lastRecord.data.s;\n      this.genChart();\n      this.socketInit();\n    });\n  }\n\n  socketInit() {\n    this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => {\n      if (this.data.length <= 0) return;\n      this.data.splice(this.data.length - 1, 1); // remove the last record\n      this.data.push(data); // add the new one\n      this.lastRecord = data;\n      this.toggleState = this.lastRecord.data.s;\n      this.genChart();\n    });\n  }\n\n  ngOnDestroy() {\n    this.subDevice.unsubscribe();\n    this.subData ? this.subData.unsubscribe() : '';\n  }\n\n  genChart() {\n    let data = this.data;\n    let _acclVals: Array<any> = [];\n    let _lblArr: Array<any> = [];\n\n    let xArr: Array<any> = [];\n    let yArr: Array<any> = [];\n    let zArr: Array<any> = [];\n\n    for (var i = 0; i < data.length; i++) {\n      let _d = data[i];\n      xArr.push(_d.data.acclVals.x);\n      yArr.push(_d.data.acclVals.y);\n      zArr.push(_d.data.acclVals.z);\n      _lblArr.push(this.formatDate(_d.createdAt));\n    }\n\n    // reverse data to show the latest on the right side\n    xArr.reverse();\n    yArr.reverse();\n    zArr.reverse();\n    _lblArr.reverse();\n\n    _acclVals = [\n      {\n        data: xArr,\n        label: 'X-Axis'\n      },\n      {\n        data: yArr,\n        label: 'Y-Axis'\n      },\n      {\n        data: zArr,\n        label: 'Z-Axis'\n      }\n    ]\n\n    this.acclVals = _acclVals;\n\n    this.lineChartLabels = _lblArr;\n  }\n\n  private formatDate(originalTime) {\n    var d = new Date(originalTime);\n    var datestring = d.getDate() + \"-\" + (d.getMonth() + 1) + \"-\" + d.getFullYear() + \" \" +\n      d.getHours() + \":\" + d.getMinutes();\n    return datestring;\n  }\n\n}\n```", "```js\nnpm start  \n```", "```js\nng build --env=prod\n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start\n```", "```js\n<ion-header>\n    <ion-navbar>\n        <ion-title>Mobile App</ion-title>\n    </ion-navbar>\n</ion-header>\n<ion-content padding>\n    <div *ngIf=\"!lastRecord\">\n        <h3 class=\"text-center\">Loading!</h3>\n    </div>\n    <div *ngIf=\"lastRecord\">\n        <ion-list>\n            <ion-item>\n                <ion-label>Name</ion-label>\n                <ion-label>{{device.name}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>X-Axis</ion-label>\n                <ion-label>{{lastRecord.data.acclVals.x}} {{lastRecord.data.acclVals.units}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Y-Axis</ion-label>\n                <ion-label>{{lastRecord.data.acclVals.y}} {{lastRecord.data.acclVals.units}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Z-Axis</ion-label>\n                <ion-label>{{lastRecord.data.acclVals.z}} {{lastRecord.data.acclVals.units}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Location</ion-label>\n                <ion-label>{{lastRecord.data.location.city}}, {{lastRecord.data.location.region}}, {{lastRecord.data.location.country}}</ion-label>\n            </ion-item>\n            <ion-item>\n                <ion-label>Received At</ion-label>\n                <ion-label>{{lastRecord.createdAt | date: 'medium'}}</ion-label>\n            </ion-item>\n        </ion-list>\n    </div>\n</ion-content>\n```", "```js\nimport { Component } from '@angular/core'; \nimport { IonicPage, NavController, NavParams } from 'ionic-angular'; \n\nimport { DevicesService } from '../../services/device.service'; \nimport { DataService } from '../../services/data.service'; \nimport { ToastService } from '../../services/toast.service'; \nimport { SocketService } from '../../services/socket.service'; \n\n@IonicPage() \n@Component({ \n   selector: 'page-view-device', \n   templateUrl: 'view-device.html', \n}) \nexport class ViewDevicePage { \n   device: any; \n   data: Array<any>; \n   toggleState: boolean = false; \n   private subData: any; \n   lastRecord: any; \n\n   constructor(private navCtrl: NavController, \n         private navParams: NavParams, \n         private socketService: SocketService, \n         private deviceService: DevicesService, \n         private dataService: DataService, \n         private toastService: ToastService) { \n         this.device = navParams.get(\"device\"); \n         console.log(this.device); \n   } \n\n   ionViewDidLoad() { \n         this.deviceService.getOne(this.device._id).subscribe((response) => { \n               this.device = response.json(); \n               this.getData(); \n               this.socketInit(); \n         }); \n   } \n\n   getData() { \n         this.dataService.get(this.device.macAddress).subscribe((response) => { \n               this.data = response.json(); \n               this.lastRecord = this.data[0]; // descending order data \n         }); \n   } \n\n   socketInit() { \n         this.subData = this.socketService.getData(this.device.macAddress).subscribe((data) => { \n               if (this.data.length <= 0) return; \n               this.data.splice(this.data.length - 1, 1); // remove the last record \n               this.data.push(data); // add the new one \n               this.lastRecord = data; \n         }); \n   } \n\n   ionViewDidUnload() { \n         this.subData && this.subData.unsubscribe && this.subData.unsubscribe(); //unsubscribe if subData is defined \n   } \n} \n```"]