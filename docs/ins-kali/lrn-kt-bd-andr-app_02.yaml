- en: Configuring Your Environment for Kotlin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Kotlin配置您的环境
- en: In this chapter, we will go through the process of preparing Android Studio
    and configuring the project we created in the previous chapter for Kotlin development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍准备Android Studio和配置我们在上一章中创建的项目以进行Kotlin开发的过程。
- en: 'In the process, we will learn how to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将学习如何：
- en: Download and install the Kotlin plugin in Android Studio
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android Studio中下载并安装Kotlin插件
- en: Configure Kotlin in an Android project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android项目中配置Kotlin
- en: Reference Java code in a Kotlin class, and vice versa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kotlin类中引用Java代码，反之亦然
- en: Convert a Java class to a Kotlin class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Java类转换为Kotlin类
- en: Installing the Kotlin plugin
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Kotlin插件
- en: 'To use Kotlin in your project, you have to first install the Kotlin plugin
    in Android Studio:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在项目中使用Kotlin，首先必须在Android Studio中安装Kotlin插件：
- en: 'Select Android Studio | Preferences and select Plugins on the Preferences window:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Android Studio | 首选项，并在首选项窗口中选择插件：
- en: '![](img/6eeca930-ba23-4cba-9262-9e4593ecaf45.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/6eeca930-ba23-4cba-9262-9e4593ecaf45.png)
- en: 'On the Plugins window, click the Install JetBrains plugin... button at the
    bottom of the screen:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件窗口上，点击屏幕底部的“安装JetBrains插件...”按钮：
- en: '![](img/fbe19542-89f2-4282-a428-71b6b3ba60ac.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/fbe19542-89f2-4282-a428-71b6b3ba60ac.png)
- en: 'On the Browse Jetbrains Plugins screen, search for `Kotlin` and select Kotlin
    from the list of options. Then, click the **Install** button:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jetbrains插件浏览屏幕上，搜索“Kotlin”并从选项列表中选择Kotlin。然后，点击**安装**按钮：
- en: '![](img/fcff73cc-716a-4821-acc3-22f88a3cfe8d.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/fcff73cc-716a-4821-acc3-22f88a3cfe8d.png)
- en: When the download and installation is complete, click on the Restart Android
    Studio button to restart the IDE.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载和安装完成后，点击“重新启动Android Studio”按钮以重新启动IDE。
- en: The latest version of Android Studio, and the one above version 3.0, offer full
    support for Kotlin out of the box. In the versions below 3.0, Kotlin support can
    be enabled by installing the plugin, as shown previously.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的Android Studio和3.0以上的版本提供了对Kotlin的全面支持。在3.0以下的版本中，可以通过安装插件来启用Kotlin支持，如前所示。
- en: Making our project Kotlin-ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使我们的项目准备好使用Kotlin
- en: To be able to start adding Kotlin code to our project, we first have to configure
    our project to support Kotlin.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够开始向我们的项目添加Kotlin代码，首先必须配置我们的项目以支持Kotlin。
- en: 'First, select Tools | Kotlin | Configure Kotlin in Project:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，选择工具 | Kotlin | 配置项目中的Kotlin：
- en: '![](img/7b44bfcd-6216-469f-b715-425541d334a2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/7b44bfcd-6216-469f-b715-425541d334a2.png)
- en: 'Next, select the Android with Gradle option in the Choose Configurator popup:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在选择配置器弹出窗口中选择带Gradle的Android选项：
- en: '![](img/84bd81bf-8e66-44a3-8405-37b1770dff0f.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/84bd81bf-8e66-44a3-8405-37b1770dff0f.png)
- en: 'On the Configure Kotlin with Android with Gradle popup, select the version
    of Kotlin to use, and click OK:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在带Gradle的Android中配置Kotlin弹出窗口中，选择要使用的Kotlin版本，然后点击确定：
- en: '![](img/e4f8234b-101b-466a-b2c2-6964455982c4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/e4f8234b-101b-466a-b2c2-6964455982c4.png)
- en: It is advisable to leave the version that is selected by default, since this
    is usually the latest version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 建议保留默认选择的版本，因为这通常是最新版本。
- en: 'This will cause a number of changes in the `build.gradle` files in your project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致项目中的`build.gradle`文件发生一些变化：
- en: 'In the project''s `build.gradle(Project:TicTacToe)` file, the following changes
    are applied:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目的`build.gradle(Project:TicTacToe)`文件中，应用了以下更改：
- en: The version of the Kotlin plugin in use in the project is declared
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明项目中使用的Kotlin插件的版本
- en: The Kotlin Gradle plugin is declared as part of the project's classpath dependencies:![](img/74bb5c89-3e61-479d-bba4-f95c7d7eafa5.png)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin Gradle插件被声明为项目的类路径依赖之一：！[](img/74bb5c89-3e61-479d-bba4-f95c7d7eafa5.png)
- en: 'And, in the app module''s `build.gradle(Module:app)` file, the following changes
    are applied:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用模块的`build.gradle(Module:app)`文件中，应用了以下更改：
- en: The `kotlin-android` plugin is applied to the module
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlin-android`插件应用于模块'
- en: The Kotlin `Standard` library is declared as a `compile` time dependency for
    the app module:![](img/43fba6df-86e6-4d68-bc59-435746142b29.png)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin的`Standard`库被声明为应用模块的`compile`时依赖：！[](img/43fba6df-86e6-4d68-bc59-435746142b29.png)
- en: Click on Sync Now to build the project
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**立即同步**以构建项目
- en: Starting from Android Studio 3.0, Android Studio comes with built-in Kotlin
    support. As such, you won't have to install the Kotlin plugin to be able to use
    it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android Studio 3.0开始，Android Studio内置了Kotlin支持。因此，您无需安装Kotlin插件即可使用它。
- en: Now that we have Kotlin completely configured, let's take it for a spin.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完全配置了Kotlin，让我们试试它。
- en: Kotlin alongside Java?
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin和Java并存？
- en: One of the amazing things about Kotlin is its ability to reside and work with
    Java in the same project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin的一个令人惊奇的特点是它能够与Java在同一个项目中共存和工作。
- en: 'Let''s try creating a Kotlin class. The Android Studio Kotlin plugin makes
    this as easy as creating a Java class. Select **File** | **New** | **Kotlin File/Class**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建一个Kotlin类。Android Studio Kotlin插件使这一过程与创建Java类一样简单。选择**文件** | **新建**
    | **Kotlin文件/类**：
- en: '![](img/cb81df55-069c-4ff5-bbd4-86c507398631.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/cb81df55-069c-4ff5-bbd4-86c507398631.png)
- en: 'On the **New Kotlin File/Class** popup, enter the name of your class, select `Class` from
    the **Kind** dropdown, and click OK:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在**新建Kotlin文件/类**弹出窗口中，输入类的名称，从**种类**下拉菜单中选择`Class`，然后点击确定：
- en: '![](img/0587550e-c61c-42d0-a07a-a892ade2b6ef.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/0587550e-c61c-42d0-a07a-a892ade2b6ef.png)
- en: 'The new class looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 新类看起来是这样的：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The default visibility modifier in Kotlin is public, so there's no need to specify
    the public modifier like you would in a Java class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin中的默认可见性修饰符是public，因此无需像在Java类中那样指定public修饰符。
- en: 'Let''s add the following method to our new Kotlin class:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的新Kotlin类中添加以下方法：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous method takes an Android view (`android.view.View`) as a parameter
    and passes it along with a message to the Snackbar `make()` method to display
    the message.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法将一个Android视图（`android.view.View`）作为参数，并将其与消息一起传递给Snackbar的`make()`方法以显示消息。
- en: 'This ability of Kotlin to make use of Java code is called **interoperability.**
    This feature also works the other way round, allowing Kotlin code to be called
    from a Java class. Let''s try that:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin能够使用Java代码的能力称为**互操作性**。这个功能也可以反过来工作，允许从Java类调用Kotlin代码。让我们试试看：
- en: 'Open `MainActivity.java`. In the `onCreate()` method, replace the following
    line of code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`。在`onCreate()`方法中，用以下代码替换以下行：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding line of code creates an instance of the `HelloKotlin` class, and
    calls its `displayMessage()` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的前一行创建了`HelloKotlin`类的一个实例，并调用了它的`displayMessage()`方法。
- en: 'Build and run your app:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序：
- en: '![](img/267e173e-9907-49f9-b95b-556a5f8d1910.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/267e173e-9907-49f9-b95b-556a5f8d1910.png)'
- en: Yes, it's that easy.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这么简单。
- en: Kotlin to Java?
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin转Java？
- en: So far, we've gone through the process of creating a Kotlin class and accessing
    its method in our `MainActivity.java` class. Our project currently consists of
    a Java class and a Kotlin class, but we want our entire project to be in Kotlin.
    So, what do we do? Do we have to rewrite the `MainActivity.java` class in Kotlin?
    No. One of the functionalities the Kotlin plugin adds to Android Studio is the
    ability to convert code from Java to Kotlin.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了创建Kotlin类并在`MainActivity.java`类中访问其方法的过程。我们的项目目前包括一个Java类和一个Kotlin类，但我们希望整个项目都是Kotlin。那么，我们该怎么办？我们需要将`MainActivity.java`类重写为Kotlin吗？不需要。Kotlin插件添加到Android
    Studio的功能之一是能够将Java代码转换为Kotlin的能力。
- en: 'To do this, open the `MainActivity.java` class and go to Code | Convert Java
    File to Kotlin File:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请打开`MainActivity.java`类，然后转到“代码”|“将Java文件转换为Kotlin文件”：
- en: '![](img/6c02e694-1bd4-424b-9880-e4dea0958994.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c02e694-1bd4-424b-9880-e4dea0958994.png)'
- en: 'You will be prompted with a warning message about the accuracy of the conversion.
    For now, we don''t need to worry about that. Just click OK to continue:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到有关转换准确性的警告消息。目前，我们不需要担心这个问题。只需单击“确定”继续：
- en: '![](img/892ad161-1aad-4260-84fd-a0261b1784f4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/892ad161-1aad-4260-84fd-a0261b1784f4.png)'
- en: 'Your`MainActivity.java`class should now look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`MainActivity.java`类现在应该是这样的：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will also notice that the extension of the file has also changed to `.kt`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到文件的扩展名也已更改为`.kt`。
- en: 'Once again, build and run your app:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行您的应用程序：
- en: '![](img/673bf8ad-1f55-43ea-bcd7-846405f8d22d.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/673bf8ad-1f55-43ea-bcd7-846405f8d22d.png)'
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned to configure Android Studio and an Android project
    for Kotlin development. We also learned to create and call a Kotlin class from
    Java. We also learned to use the Kotlin plugin to convert a Java source file to
    Kotlin. These functionalities are particularly helpful if you have legacy code
    written in Java and you want to gradually switch to Kotlin.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为Kotlin开发配置Android Studio和Android项目。我们还学习了如何从Java创建和调用Kotlin类。我们还学习了使用Kotlin插件将Java源文件转换为Kotlin。如果您有用Java编写的旧代码，并且想逐渐转换为Kotlin，这些功能特别有帮助。
- en: In using the `Convert Java to Kotlin` functionality, keep in mind that in some
    cases, you'll have to perform some corrections in the resulting Kotlin file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`Convert Java to Kotlin`功能时，请记住，在某些情况下，您需要对生成的Kotlin文件进行一些更正。
- en: In the next few chapters, we will add more functionality to our project (which,
    as you may have guessed, is a simple **TicTacToe** game). In the process, we will
    delve more deeply into the basics of Kotlin as a language. We will cover topics
    such as data types, classes, functions, coroutines and Null safety.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将为我们的项目添加更多功能（您可能已经猜到，这是一个简单的**井字棋**游戏）。在这个过程中，我们将更深入地了解Kotlin作为一种语言的基础知识。我们将涵盖诸如数据类型、类、函数、协程和空安全等主题。
