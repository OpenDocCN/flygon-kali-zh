["```py\n    img = np.zeros((N, N), np.uint8)\n    NSQUARES = 30\n    centers = np.random.random_integers(0, N, size=(NSQUARES, 2))\n    radii = np.random.randint(0, N/9, size=NSQUARES)\n    colors = np.random.randint(100, 255, size=NSQUARES)\n    ```", "```py\n    In: x = linspace(1, 3, 3)\n\n    In: x\n    Out: array([ 1.,  2.,  3.])\n    In: y = linspace(1, 2, 2)\n\n    In: y\n    Out: array([ 1.,  2.])\n\n    In: meshgrid(x, y)\n    Out:\n    [array([[ 1.,  2.,  3.],\n     [ 1.,  2.,  3.]]),\n     array([[ 1.,  1.,  1.],\n     [ 2.,  2.,  2.]])]\n\n    ```", "```py\n    for i in xrange(NSQUARES):\n       xindices = range(centers[i][0] - radii[i], centers[i][0] + radii[i])\n       xindices = np.clip(xindices, 0, N - 1)\n       yindices = range(centers[i][1] - radii[i], centers[i][1] + radii[i])\n       yindices = np.clip(yindices, 0, N - 1)\n\n       if len(xindices) == 0 or len(yindices) == 0:\n          continue\n       coordinates = np.meshgrid(xindices, yindices)\n       img[coordinates] = colors[i]\n    ```", "```py\n    img.tofile('random_squares.raw')\n    img_memmap = np.memmap('random_squares.raw', shape=img.shape)\n\n    ```", "```py\n    plt.imshow(img_memmap)\n    plt.axis('off')\n    plt.show()\n\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    N = 512\n    NSQUARES = 30\n\n    # Initialize\n    img = np.zeros((N, N), np.uint8)\n    centers = np.random.random_integers(0, N, size=(NSQUARES, 2))\n    radii = np.random.randint(0, N/9, size=NSQUARES)\n    colors = np.random.randint(100, 255, size=NSQUARES)\n\n    # Generate squares\n    for i in xrange(NSQUARES):\n       xindices = range(centers[i][0] - radii[i], centers[i][0] + radii[i])\n       xindices = np.clip(xindices, 0, N - 1)\n       yindices = range(centers[i][1] - radii[i], centers[i][1] + radii[i])\n       yindices = np.clip(yindices, 0, N - 1)\n\n       if len(xindices) == 0 or len(yindices) == 0:\n          continue\n\n       coordinates = np.meshgrid(xindices, yindices)\n       img[coordinates] = colors[i]\n\n    # Load into memory map\n    img.tofile('random_squares.raw')\n    img_memmap = np.memmap('random_squares.raw', shape=img.shape)\n\n    # Display image\n    plt.imshow(img_memmap)\n    plt.axis('off')\n    plt.show()\n    ```", "```py\n    x, y = np.meshgrid(np.linspace(x_min, x_max, SIZE),\n                       np.linspace(y_min, y_max, SIZE))\n    c = x + 1j * y\n    z = c.copy()\n    fractal = np.zeros(z.shape, dtype=np.uint8) + MAX_COLOR\n    ```", "```py\n    for n in range(ITERATIONS):\n        print(n)\n        mask = numpy.abs(z) <= 4 \n        z[mask] = z[mask] ** 2 +  c[mask]\n        fractal[(fractal == MAX_COLOR) & (-mask)] = (MAX_COLOR - 1) * n / ITERATIONS\n    Plot the fractal with matplotlib:\n    plt.subplot(211)\n    plt.imshow(fractal)\n    plt.title('Mandelbrot')\n    plt.axis('off')\n    Use the choose() function to pick a value from the fractal or Lena array:\n    plt.subplot(212)\n    plt.imshow(numpy.choose(fractal < lena, [fractal, lena]))\n    plt.axis('off')\n    plt.title('Mandelbrot + Lena')\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from scipy.misc import lena\n\n    ITERATIONS = 10\n    lena = lena()\n    SIZE = lena.shape[0]\n    MAX_COLOR = 255.\n    x_min, x_max = -2.5, 1\n    y_min, y_max = -1, 1\n\n    # Initialize arrays\n    x, y = np.meshgrid(np.linspace(x_min, x_max, SIZE),\n                       np.linspace(y_min, y_max, SIZE))\n    c = x + 1j * y\n    z = c.copy()\n    fractal = np.zeros(z.shape, dtype=np.uint8) + MAX_COLOR\n    # Generate fractal\n    for n in range(ITERATIONS):\n        mask = np.abs(z) <= 4 \n        z[mask] = z[mask] ** 2 +  c[mask]\n        fractal[(fractal == MAX_COLOR) & (-mask)] = (MAX_COLOR - 1) * n / ITERATIONS\n\n    # Display the fractal\n    plt.subplot(211)\n    plt.imshow(fractal)\n    plt.title('Mandelbrot')\n    plt.axis('off')\n\n    # Combine with lena\n    plt.subplot(212)\n    plt.imshow(np.choose(fractal < lena, [fractal, lena]))\n    plt.axis('off')\n    plt.title('Mandelbrot + Lena')\n\n    plt.show()\n    ```", "```py\n    NFIGURES = 5\n    k = np.random.random_integers(1, 5, NFIGURES)\n    a = np.random.random_integers(1, 5, NFIGURES)\n    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\n\n    ```", "```py\n    plt.subplot(212)\n    blurred = scipy.ndimage.gaussian_filter(lena, sigma=4)\n\n    plt.imshow(blurred)\n    plt.axis('off')\n\n    ```", "```py\n    theta = np.linspace(0, k[0] * np.pi, 200)\n    plt.polar(theta, np.sqrt(theta), choice(colors))\n\n    for i in xrange(1, NFIGURES):\n     theta = np.linspace(0, k[i] * np.pi, 200)\n     plt.polar(theta, a[i] * np.cos(k[i] * theta), choice(colors))\n\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from random import choice\n    import scipy\n    import scipy.ndimage\n    # Initialization\n    NFIGURES = 5\n    k = np.random.random_integers(1, 5, NFIGURES)\n    a = np.random.random_integers(1, 5, NFIGURES)\n\n    colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\n\n    lena = scipy.misc.lena()\n    plt.subplot(211)\n    plt.imshow(lena)\n    plt.axis('off')\n\n    # Blur Lena\n    plt.subplot(212)\n    blurred = scipy.ndimage.gaussian_filter(lena, sigma=4)\n\n    plt.imshow(blurred)\n    plt.axis('off')\n\n    # Plot in polar coordinates\n    theta = np.linspace(0, k[0] * np.pi, 200)\n    plt.polar(theta, np.sqrt(theta), choice(colors))\n\n    for i in xrange(1, NFIGURES):\n       theta = np.linspace(0, k[i] * np.pi, 200)\n       plt.polar(theta, a[i] * np.cos(k[i] * theta), choice(colors))\n\n    plt.axis('off')\n\n    plt.show()\n    ```", "```py\n    In: x = array([1, 2])\n\n    In: x\n    Out: array([1, 2])\n\n    In: repeat(x, 3)\n    Out: array([1, 1, 1, 2, 2, 2])\n\n    In: tile(x, 3)\n    Out: array([1, 2, 1, 2, 1, 2])\n\n    ```", "```py\n    repeated = np.tile(data, 3)\n    ```", "```py\n    plt.title(\"Repeated\")\n    plt.plot(repeated)\n    ```", "```py\n    import scipy.io.wavfile\n    import matplotlib.pyplot as plt\n    import urllib2\n    import numpy as np\n\n    response = urllib2.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\n    print(response.info())\n    WAV_FILE = 'smashingbaby.wav'\n    filehandle = open(WAV_FILE, 'w')\n    filehandle.write(response.read())\n    filehandle.close()\n    sample_rate, data = scipy.io.wavfile.read(WAV_FILE)\n    print(\"Data type\", data.dtype, \"Shape\", data.shape)\n\n    plt.subplot(2, 1, 1)\n    plt.title(\"Original\")\n    plt.plot(data)\n\n    plt.subplot(2, 1, 2)\n\n    # Repeat the audio fragment\n    repeated = np.tile(data, 3)\n\n    # Plot the audio data\n    plt.title(\"Repeated\")\n    plt.plot(repeated)\n    scipy.io.wavfile.write(\"repeated_yababy.wav\",\n        sample_rate, repeated)\n\n    plt.show()\n    ```", "```py\n        NTONES = 89\n        amps = 2000\\. * np.random.random((NTONES,)) + 200.\n        durations = 0.19 * np.random.random((NTONES,)) + 0.01\n        keys = np.random.random_integers(1, 88, NTONES)\n        freqs = 440.0 * 2 ** ((keys - 49.)/12.)\n        phi = 2 * np.pi * np.random.random((NTONES,))\n        ```", "```py\n    def generate(freq, amp, duration, phi):\n     t = np.linspace(0, duration, duration * RATE)\n     data = np.sin(2 * np.pi * freq * t + phi) * amp\n\n     return data.astype(DTYPE)\n    ```", "```py\n    for i in xrange(NTONES):\n       newtone = generate(freqs[i], amp=amps[i], duration=durations[i], phi=phi[i])\n       tone = np.concatenate((tone, newtone))\n    ```", "```py\n    plt.plot(np.linspace(0, len(tone)/RATE, len(tone)), tone)\n    plt.show()\n    ```", "```py\n    import scipy.io.wavfile\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    RATE = 44100\n    DTYPE = np.int16\n\n    # Generate sine wave\n    def generate(freq, amp, duration, phi):\n     t = np.linspace(0, duration, duration * RATE)\n     data = np.sin(2 * np.pi * freq * t + phi) * amp\n\n     return data.astype(DTYPE)\n\n    # Initialization\n    NTONES = 89\n    amps = 2000\\. * np.random.random((NTONES,)) + 200.\n    durations = 0.19 * np.random.random((NTONES,)) + 0.01\n    keys = np.random.random_integers(1, 88, NTONES)\n    freqs = 440.0 * 2 ** ((keys - 49.)/12.)\n    phi = 2 * np.pi * np.random.random((NTONES,))\n\n    tone = np.array([], dtype=DTYPE) \n\n    # Compose \n    for i in xrange(NTONES):\n       newtone = generate(freqs[i], amp=amps[i], duration=durations[i], phi=phi[i])\n       tone = np.concatenate((tone, newtone))\n\n    scipy.io.wavfile.write('generated_tone.wav', RATE, tone)\n\n    # Plot audio data\n    plt.plot(np.linspace(0, len(tone)/RATE, len(tone)), tone)\n    plt.show()\n    ```", "```py\n        b,a = scipy.signal.iirdesign(wp=0.2, ws=0.1, gstop=60, gpass=1, ftype='butter')\n        ```", "```py\n    filtered = scipy.signal.lfilter(b, a, data)\n    ```", "```py\n    scipy.io.wavfile.write('filtered.wav', sample_rate, filtered.astype(data.dtype))\n    ```", "```py\n    import scipy.io.wavfile\n    import matplotlib.pyplot as plt\n    import urllib2\n    import scipy.signal\n\n    response =urllib2.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\n    print response.info()\n    WAV_FILE = 'smashingbaby.wav'\n    filehandle = open(WAV_FILE, 'w')\n    filehandle.write(response.read())\n    filehandle.close()\n    sample_rate, data = scipy.io.wavfile.read(WAV_FILE)\n    print(\"Data type\", data.dtype, \"Shape\", data.shape)\n\n    plt.subplot(2, 1, 1)\n    plt.title(\"Original\")\n    plt.plot(data)\n\n    # Design the filter\n    b,a = scipy.signal.iirdesign(wp=0.2, ws=0.1, gstop=60, gpass=1, ftype='butter')\n\n    # Filter\n    filtered = scipy.signal.lfilter(b, a, data)\n\n    # Plot filtered data\n    plt.subplot(2, 1, 2)\n    plt.title(\"Filtered\")\n    plt.plot(filtered)\n\n    scipy.io.wavfile.write('filtered.wav', sample_rate, filtered.astype(data.dtype))\n\n    plt.show()\n    ```", "```py\n    sobelx = scipy.ndimage.sobel(lena, axis=0, mode='constant')\n    ```", "```py\n    sobely = scipy.ndimage.sobel(lena, axis=1, mode='constant')\n    ```", "```py\n    default = scipy.ndimage.sobel(lena)\n    ```", "```py\n    import scipy\n    import scipy.ndimage\n    import matplotlib.pyplot as plt\n\n    lena = scipy.misc.lena()\n\n    plt.subplot(221)\n    plt.imshow(lena)\n    plt.title('Original')\n    plt.axis('off')\n\n    # Sobel X filter\n    sobelx = scipy.ndimage.sobel(lena, axis=0, mode='constant')\n\n    plt.subplot(222)\n    plt.imshow(sobelx)\n    plt.title('Sobel X')\n    plt.axis('off')\n\n    # Sobel Y filter\n    sobely = scipy.ndimage.sobel(lena, axis=1, mode='constant')\n\n    plt.subplot(223)\n    plt.imshow(sobely)\n    plt.title('Sobel Y')\n    plt.axis('off')\n\n    # Default Sobel filter\n    default = scipy.ndimage.sobel(lena)\n\n    plt.subplot(224)\n    plt.imshow(default)\n    plt.title('Default Filter')\n    plt.axis('off')\n\n    plt.show()\n    ```"]