["```cs\nName: Jhon\nSurname: Smith\nSpouse: \n  Name: Mary\n  Surname: Smith\nAddresses:\n- Type: home\n  Country: England\n  Town: London\n  Street: My home street\n- Type: office\n  Country: England\n  Town: London\n  Street: My home street \n```", "```cs\napiVersion: v1 \n```", "```cs\napiVersion: apps/v1 \n```", "```cs\napiVersion: apps/v1\nkind: Deployment\nmetadata: \n  name: my-deployment-name\n  namespace: my-namespace #this is optional\nspec: \n   replicas: 3\n   selector: \n     matchLabels: \n       my-pod-label-name: my-pod-label-value\n         ...\n   template:\n      ... \n```", "```cs\nmetadata: \n  labels: \n    my-pod-label-name: my-pod-label-value\n      ...\nspec: \n  containers:\n   ...\n  - name: my-container-name\n    image: <Docker imagename>\n    resources: \n      requests: \n        cpu: 100m \n        memory: 128Mi \n      limits: \n        cpu: 250m \n        memory: 256Mi \n    ports: \n    - containerPort: 6379\n    env: \n    - name: env-name\n      value: env-value\n       ... \n```", "```cs\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: my-stateful-set-name\nspec:\n  selector:\n    matchLabels:\n      my-pod-label-name: my-pod-label-value\n...\n  serviceName: \"my-service-name\"\n  replicas: 3 \n  template:\n    ... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\n  namespace: my-namespace\nspec:\n  selector:\n    my-selector-label: my-selector-value\n    ...\n  ports:\n    - name: http\n      protocol: TCP\n      port: 80\n      targetPort: 9376\n    - name: https\n      protocol: TCP\n      port: 443\n      targetPort: 9377 \n```", "```cs\n...\nspec:\n  type: NodePort\n  selector:\n  ... \n```", "```cs\n...\nports:\n    - name: http\n      protocol: TCP\n      port: 80\n      targetPort: 80\n      nodePort: 30007\n    - name: https\n      protocol: TCP\n      port: 443\n      targetPort: 443\n      nodePort: 30020\n... \n```", "```cs\n...\nspec:\n  type: LoadBalancer\n  selector:\n  ... \n```", "```cs\n...\nspec:\n  type: LoadBalancer\n  loadBalancerIP: <your public ip>\n  selector:\n  ... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\n    service.beta.kubernetes.io/azure-load-balancer-resource-group: <IP resource group name>\n  name: my-service name\n... \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\n  annotations:\nservice.beta.kubernetes.io/azure-dns-label-name: <my-service-label>\n  name: my-service-name\n... \n```", "```cs\n...\nspec:\nclusterIP: none\n  selector:\n... \n```", "```cs\n...\nspec:\n...\n  rules:\n  - host: *.mydomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: my-service-name\n            port:\n              number: 80\n  - host: my-subdomain.anotherdomain.com\n... \n```", "```cs\n...\nspec:\n...\n  tls:\n  - hosts:\n      - www.mydomain.com\n      secretName: my-certificate1\n      - my-subdomain.anotherdomain.com\n      secretName: my-certificate2\n... \n```", "```cs\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: my-example-ingress\n  namespace: my-namespace\nspec:\n  tls:\n  ...\n  rules:\n... \n```", "```cs\naz aks get-credentials --resource-group <resource group> --name <cluster name> \n```", "```cs\nkubectl get <object type><object name> \n```", "```cs\nkubectl describe <object name> \n```", "```cs\nkubectl create -f myClusterConfiguration.yaml \n```", "```cs\nkubectl apply -f myClusterConfiguration.yaml \n```", "```cs\nkubectl delete -f myClusterConfiguration.yaml \n```", "```cs\nkubectl delete deployment deployment1 deployment2... \n```", "```cs\napiVersion: apps/v1 \nkind: Deployment\nmetadata:\n  name: redis-master\n  labels:\n    app: redis\nspec:\n  selector:\n    matchLabels:\n      app: redis\n      role: master\n      tier: backend\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: redis\n        role: master\n        tier: backend\n    spec:\n      containers:\n      - name: master\n        image: k8s.gcr.io/redis:e2e\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi\n        ports:\n        - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-master\n  labels:\n    app: redis\n    role: master\n    tier: backend\nspec:\n  ports:\n  - port: 6379\n    targetPort: 6379\n  selector:\n    app: redis\n    role: master\n    tier: backend \n```", "```cs\nkubectl create -f redis-master.yaml \n```", "```cs\nkubectl create -f redis-slave.yaml \n```", "```cs\nkubectl create -f frontend.yaml \n```", "```cs\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend\n  labels:\n    app: guestbook\n    tier: frontend\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n  selector:\n    app: guestbook\n    tier: frontend \n```", "```cs\nkubectl get service \n```", "```cs\nkubectl delete deployment frontend redis-master redis-slave \nkubectl delete service frontend redis-master redis-slave \n```", "```cs\nvolumeClaimTemplates:\n-  metadata:\n   name: my-claim-template-name\nspec:\n  resources:\n    request:\n      storage: 5Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n  storageClassName: my-optional-storage-class \n```", "```cs\nkubectl get storageclass \n```", "```cs\n...\nvolumeMounts\n- name: my-claim-template-name\n  mountPath: /my/requested/storage\n  readOnly: false\n... \n```", "```cs\nkubectl create secret generic my-secret-name \\\n  --from-file=./secret1.bin \\\n  --from-file=./secret2.bin \n```", "```cs\nkubectl create secret generic dev-db-secret \\\n  --from-literal=username=devuser \\\n  --from-literal=password=sdsd_weew1' \n```", "```cs\n...\nvolumes:\n  - name: my-volume-with-secrets\n    secret:\n      secretName: my-secret-name\n... \n```", "```cs\n...\nvolumeMounts:\n    - name: my-volume-with-secrets\n      mountPath: \"/my/secrets\"\n      readOnly: true\n... \n```", "```cs\nenv:\n    - name: SECRET_USERNAME\n      valueFrom:\n        secretKeyRef:\n          name: dev-db-secret\n          key: username\n    - name: SECRET_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: dev-db-secret\n          key: password \n```", "```cs\nkubectl create secret tls test-tls --key=\"tls.key\" --cert=\"tls.crt\" \n```", "```cs\n...\n  livenessProbe:\n    exec:\n      command:\n      - cat\n      - /tmp/healthy\n    initialDelaySeconds: 10\n    periodSeconds: 5\n ... \n```", "```cs\n...\n  livenessProbe:\n    exec:\n      httpGet:\n        path: /healthz\n        port: 8080\n        httpHeaders:\n          - name: Custom-Health-Header\n          value: container-is-ok\n    initialDelaySeconds: 10\n    periodSeconds: 5\n ... \n```", "```cs\n...\n  livenessProbe:\n    exec:\n      tcpSocket:\n        port: 8080\n    initialDelaySeconds: 10\n    periodSeconds: 5\n ... \n```", "```cs\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-autoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: extensions/v1beta1\n    kind: Deployment\n    name: my-deployment-name\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageUtilization: 25 \n```", "```cs\napiVersion: v2\nname: myhelmdemo\ndescription: My Helm chart\ntype: application\nversion: 1.3.0\nappVersion: 1.2.0 \n```", "```cs\nhelm repo add <my-repo-local-name> https://kubernetes-charts.storage.googleapis.com/ \n```", "```cs\nhelm install <instance name><my-repo-local-name>/<package name> -n <namespace> \n```", "```cs\nhelm status <instance name> \n```", "```cs\nhelm ls \n```", "```cs\nhelm delete <instance name> \n```", "```cs\nhelm install <instance name><my-repo-local-name>/<package name> -f  values.yaml \u2013version <version> \n```", "```cs\n...--set <variable1>=<value1>,<variable2>=<value2>... \n```", "```cs\nhelm upgrade <instance name><my-repo-local-name>/<package name>... \n```", "```cs\n    helm repo add gcharts https://kubernetes-charts.storage.googleapis.com/ \n    ```", "```cs\n    helm install ingress gcharts/nginx-ingress \n    ```", "```cs\n    apiVersion: extensions/v1beta1\n    kind: Ingress\n    metadata:\n      name: simple-frontend-ingress\n    spec:\n      rules:\n      - http:\n          paths:\n          - path:/\n            backend:\n              serviceName: frontend\n              servicePort: 80 \n    ```", "```cs\n    kubectl apply -f frontend-ingress.yaml \n    ```", "```cs\nkubectl create secret tls guestbook-tls --key=\"tls.key\" --cert=\"tls.crt\" \n```", "```cs\n...\nspec:\n...\n  tls:\n  - hosts:\n      - <chosen name>.<your Azure region>.cloudeapp.com\nsecretName: guestbook-tls \n```", "```cs\nkubectl apply frontend-ingress.yaml \n```", "```cs\nkubectl delete frontend-ingress.yaml\nkubectl delete frontend.yaml\nkubectl delete redis-slave.yaml\nkubectl delete redis-master.yaml\nhelm delete ingress \n```"]