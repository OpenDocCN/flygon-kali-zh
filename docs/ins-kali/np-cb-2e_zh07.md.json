["```py\n    times = np.array([])\n\n    for size in sizes:\n        integers = np.random.random_integers (1, 10 ** 6, size)\n    ```", "```py\n    def measure():\n        timer = timeit.Timer('dosort()', 'from __main__ import dosort')\n        return timer.timeit(10 ** 2)\n    ```", "```py\n    times = np.append(times, measure())\n    ```", "```py\n    fit = np.polyfit(sizes * powersOf2, times, 1)\n    ```", "```py\n    import numpy as np\n    import timeit\n    import matplotlib.pyplot as plt\n\n    # This program measures the performance of the NumPy sort function\n    # and plots time vs array size.\n    integers = []\n\n    def dosort():\n       integers.sort()\n\n    def measure():\n       timer = timeit.Timer('dosort()', 'from __main__ import dosort')\n\n       return timer.timeit(10 ** 2)\n\n    powersOf2 = np.arange(0, 19)\n    sizes = 2 ** powersOf2\n\n    times = np.array([])\n\n    for size in sizes:\n       integers = np.random.random_integers(1, 10 ** 6, size)\n       times = np.append(times, measure())\n\n    fit = np.polyfit(sizes * powersOf2, times, 1)\n    print(fit)\n    plt.title(\"Sort array sizes vs execution times\")\n    plt.xlabel(\"Size\")\n    plt.ylabel(\"(s)\")\n    plt.semilogx(sizes, times, 'ro')\n    plt.semilogx(sizes, np.polyval(fit, sizes * powersOf2))\n    plt.grid()\n    plt.show()\n    ```", "```py\n    $ ipython --pylab\n    ```", "```py\n    In [1]: a = arange(1000)\n    ```", "```py\n    In [2]: %timeit searchsorted(a, 42)\n    100000 loops, best of 3: 7.58 us per loop\n    ```", "```py\n    import numpy as np\n\n    def invert(n):\n      a = np.matrix(np.random.rand(n, n))\n\n      return a.I\n\n    sizes = 2 ** np.arange(0, 12)\n\n    for n in sizes:\n      invert(n)\n    ```", "```py\n    In [1]: %run -t invert_matrix.py\n\n    IPython CPU timings (estimated):\n     User   :       6.08 s.\n     System :       0.52 s.\n    Wall time:      19.26 s.\n\n    ```", "```py\n    In [2]: %run -p invert_matrix.py\n\n    852 function calls in 6.597 CPU seconds\n\n       Ordered by: internal time\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n           12    3.228    0.269    3.228    0.269 {numpy.linalg.lapack_lite.dgesv}\n           24    2.967    0.124    2.967    0.124 {numpy.core.multiarray._fastCopyAndTranspose}\n           12    0.156    0.013    0.156    0.013 {method 'rand' of 'mtrand.RandomState' objects}\n           12    0.087    0.007    0.087    0.007 {method 'copy' of 'numpy.ndarray' objects}\n           12    0.069    0.006    0.069    0.006 {method 'astype' of 'numpy.ndarray' objects}\n           12    0.025    0.002    6.304    0.525 linalg.py:404(inv)\n           12    0.024    0.002    6.328    0.527 defmatrix.py:808(getI)\n            1    0.017    0.017    6.596    6.596 invert_matrix.py:1(<module>)\n           24    0.014    0.001    0.014    0.001 {numpy.core.multiarray.zeros}\n           12    0.009    0.001    6.580    0.548 invert_matrix.py:3(invert)\n           12    0.000    0.000    6.264    0.522 linalg.py:244(solve)\n           12    0.000    0.000    0.014    0.001 numeric.py:1875(identity)\n            1    0.000    0.000    6.597    6.597 {execfile}\n           36    0.000    0.000    0.000    0.000 defmatrix.py:279(__array_finalize__)\n           12    0.000    0.000    2.967    0.247 linalg.py:139(_fastCopyAndTranspose)\n           24    0.000    0.000    0.087    0.004 defmatrix.py:233(__new__)\n           12    0.000    0.000    0.000    0.000 linalg.py:99(_commonType)\n           24    0.000    0.000    0.000    0.000 {method '__array_prepare__' of 'numpy.ndarray' objects}\n           36    0.000    0.000    0.000    0.000 linalg.py:66(_makearray)\n           36    0.000    0.000    0.000    0.000 {numpy.core.multiarray.array}\n           12    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}\n           12    0.000    0.000    0.000    0.000 linalg.py:127(_to_native_byte_order)\n            1    0.000    0.000    6.597    6.597 interactiveshell.py:2270(safe_execfile)\n    ```", "```py\n    $ easy_install line_profiler\n    $ pip install line_profiler\n\n    ```", "```py\n    $ git clone https://github.com/rkern/line_profiler\n\n    ```", "```py\n    $ python setup.py install\n\n    ```", "```py\n    import numpy as np\n    import time\n\n    @profile\n    def multiply(n):\n      A = np.random.rand(n, n)\n      time.sleep(np.random.randint(0, 2))\n      return np.matrix(A) ** 2\n\n    for n in 2 ** np.arange(0, 10):\n      multiply(n)\n    ```", "```py\n    $ kernprof.py -l -v mat_mult.py\n    Wrote profile results to mat_mult.py.lprof\n    Timer unit: 1e-06 s\n\n    File: mat_mult.py\n    Function: multiply at line 4\n    Total time: 3.19654 s\n\n    Line #      Hits         Time  Per Hit   % Time  Line Contents\n    ==============================================================\n     4                                           @profile\n     5                                           def multiply(n):\n     6        10        13461   1346.1      0.4     A = numpy.random.rand(n, n)\n     7        10      3000689 300068.9     93.9     time.sleep(numpy.random.randint(0, 2))\n     8        10       182386  18238.6      5.7     return numpy.matrix(A) ** 2\n\n    ```", "```py\n    def transpose(n):\n      random_values = np.random.random((n, n))\n      return random_values.T\n    ```", "```py\n    cProfile.run('transpose (1000)')\n    ```", "```py\n    import numpy as np\n    import cProfile\n\n    def transpose(n):\n       random_values = np.random.random((n, n))\n       return random_values.T\n\n    cProfile.run('transpose (1000)')\n    ```", "```py\n    4 function calls in 0.029 CPU seconds\n     Ordered by: standard name\n     ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1    0.001    0.001    0.029    0.029 <string>:1(<module>)\n     1    0.000    0.000    0.028    0.028 cprofile_transpose.py:5(transpose)\n     1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n     1    0.028    0.028    0.028    0.028 {method 'random_sample' of 'mtrand.RandomState' objects}\n\n    ```", "```py\nimport numpy as np\n\na = np.arange(7)\nprint(a[8])\n```", "```py\n    In [1]: %run buggy.py\n    ---------------------------------------------------------------------------\n    IndexError                                Traceback (most recent call last)\n    .../site-packages/IPython/utils/py3compat.pyc in execfile(fname, *where)\n     173             else:\n     174                 filename = fname\n    --> 175             __builtin__.execfile(filename, *where)\n\n    .../buggy.py in <module>()\n     2\n     3 a = numpy.arange(7)\n    ----> 4 print a[8]\n\n    IndexError: index out of bounds\n\n    ```", "```py\n    In [2]: %debug\n    > .../buggy.py(4)<module>()\n     2 \n     3 a = numpy.arange(7)\n    ----> 4 print a[8]\n\n    ```", "```py\n    ipdb> list\n     1 import numpy as np\n     2 \n     3 a = np.arange(7)\n    ----> 4 print(a[8])\n\n    ```", "```py\n    ipdb> len(a)\n    7\n\n    ipdb> print(a)\n    [0 1 2 3 4 5 6]\n\n    ```", "```py\n    ipdb> bt\n     .../py3compat.py(175)execfile()\n     171             if isinstance(fname, unicode):\n     172                 filename = fname.encode(sys.getfilesystemencoding())\n     173             else:\n     174                 filename = fname\n    --> 175             __builtin__.execfile(filename, *where)\n\n    > .../buggy.py(4)<module>()\n     0 print a[8]\n\n    ```", "```py\n    ipdb> u\n    > .../site-packages/IPython/utils/py3compat.py(175)execfile()\n     173             else:\n     174                 filename = fname\n    --> 175             __builtin__.execfile(filename, *where)\n\n    ```", "```py\n    ipdb> d\n    > .../buggy.py(4)<module>()\n     2\n     3 a = np.arange(7)\n    ----> 4 print(a[8])\n\n    ```", "```py\n    $ sudo easy_install pudb\n    $ pip install pudb\n    $ pip freeze|grep pudb\n    pudb==2014.1\n\n    ```", "```py\n    $ python -m pudb buggy.py\n\n    ```"]