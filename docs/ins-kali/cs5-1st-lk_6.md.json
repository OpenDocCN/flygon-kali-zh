["```cs\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Threading.Tasks;\n\nnamespace SiteWatcher\n{\n  internal static class WebHelper\n  {\n    public static async Task<string> Get(string url)\n    {\n      var tcs = new TaskCompletionSource<string>();\n      var request = WebRequest.Create(url);\n\n      request.BeginGetResponse(o =>  \n      {\n        var response = request.EndGetResponse(o);\n        using (var reader = new StreamReader(response.GetResponseStream()))\n        {\n          var result = reader.ReadToEnd();\n          tcs.SetResult(result);\n        }\n      }, null);\n\n      return await tcs.Task;\n    }\n  }\n}\n```", "```cs\nusing System;\nusing System.Dynamic;\nusing MonoMac.Foundation;\n\nnamespace SiteWatcher\n{\n  public class UserSettings : DynamicObject\n  {\n    NSUserDefaults defaults = NSUserDefaults.StandardUserDefaults;\n\n    public override bool TryGetMember(GetMemberBinder binder, out object result)\n    {\n      result = defaults.ValueForKey(new NSString(binder.Name));\n      if (result == null) result = string.Empty;\n      return result != null;\n    }\n\n    public override bool TrySetMember(SetMemberBinder binder, object value)\n    {\n      defaults.SetValueForKey(NSObject.FromObject(value), new NSString(binder.Name));\n      return true;\n    }\n  }\n}\n```", "```cs\nprivate List<string> results = new List<string>();\n\npublic IEnumerable<string> Results\n{\n  get { return this.results; }\n}\n```", "```cs\npublic async Task Retrieve()\n{      \n  dynamic settings = new UserSettings();\n\n  var htmlString = await WebHelper.Get(settings.Url);\n\n  HtmlDocument html = new HtmlDocument();\n  html.LoadHtml(htmlString);\n\n  foreach(var link in html.DocumentNode.SelectNodes(settings.LinkXPath))\n  {\n    string linkUrl = link.Attributes[\"href\"].Value;\n    if (!linkUrl.StartsWith(\"http\")) {\n      linkUrl = settings.Url + linkUrl;\n    }\n\n    // get this URL\n    string post = await WebHelper.Get (linkUrl);\n\n    ProcessPost(settings, link, post);\n  }\n}\n```", "```cs\nprivate void ProcessPost(dynamic settings, HtmlNode link, string postHtml)\n{        \n  // parse the doc to get the content area: settings.ContentXPath\n  HtmlDocument postDoc = new HtmlDocument();\n  postDoc.LoadHtml(postHtml);\n  var contentNode = postDoc.DocumentNode.SelectSingleNode(settings.ContentXPath);\n  if (contentNode == null) return;\n\n  // apply settings.TriggerRegex\n  string contentText = contentNode.InnerText;\n  if (string.IsNullOrWhiteSpace(contentText)) return;\n\n  Regex regex = new Regex(settings.TriggerRegex);\n  var match = regex.Match(contentText);\n\n  // if found, add to results\n  if (match.Success)\n  {\n    results.Add(link.InnerText);\n  }\n}\n```", "```cs\n    @property (assign) IBOutlet NSTextField *urlTextView;\n    @property (assign) IBOutlet NSTextField *linkXPathTextView;\n    @property (assign) IBOutlet NSTextField *contentXPathTextView;\n    @property (assign) IBOutlet NSTextField *regexTextView;\n    @property (assign) IBOutlet NSTableView *resultsTableView;\n\n    - (IBAction)buttonClicked:(NSButton *)sender;\n    ```", "```cs\n    public override void WindowDidLoad ()\n    {\n      base.WindowDidLoad ();\n      dynamic settings = new UserSettings();\n      urlTextView.StringValue = settings.Url;\n      linkXPathTextView.StringValue = settings.LinkXPath;\n      contentXPathTextView.StringValue = settings.ContentXPath;\n      regexTextView.StringValue = settings.TriggerRegex;\n    }\n    ```", "```cs\n    private class TableViewSource : NSTableViewSource\n    {\n      private string[] data;\n\n      public TableViewSource(string[] list) \n      { \n        data = list; \n      }\n\n      public override int GetRowCount (NSTableView tableView)\n      {\n        return data.Length;\n      }\n\n      public override NSObject GetObjectValue (NSTableView tableView, NSTableColumn tableColumn, int row)\n      {\n        return new NSString(data[row]);\n      }\n    }\n    ```", "```cs\n    private async void GetData()\n    {\n      // retrieve data from UI\n      dynamic settings = new UserSettings();\n      settings.Url = urlTextView.StringValue;\n      settings.LinkXPath = linkXPathTextView.StringValue;\n      settings.ContentXPath = contentXPathTextView.StringValue;\n      settings.TriggerRegex = regexTextView.StringValue;\n\n      // initiate data retrieval\n      WebDataSource datasource = new WebDataSource();\n      await datasource.Retrieve();\n\n      // display data\n      TableViewSource source = new TableViewSource(datasource.Results.ToArray());\n      resultsTableView.Source = source;\n    }\n    ```", "```cs\n    partial void buttonClicked (MonoMac.AppKit.NSButton sender)\n    {\n      GetData ();\n    }\n    ```"]