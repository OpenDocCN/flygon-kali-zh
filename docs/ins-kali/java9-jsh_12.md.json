["```java\npublic interface Testable {\n    boolean test(int number);\n}\n```", "```java\npublic class TestDivisibleBy5 implements Testable {\n    @Override\n    public boolean test(int number) {\n        return ((number % 5) == 0);\n    }\n}\n```", "```java\npublic class TestGreaterThan10 implements Testable {\n    @Override\n    public boolean test(int number) {\n        return (number > 10);\n    }\n}\n```", "```java\npublic List<Integer> filterNumbersWithTestable(final List<Integer> numbers,\n    Testable tester) {\n    List<Integer> filteredNumbers = new ArrayList<>();\n    for (Integer number : numbers) {\n        if (tester.test(number)) {\n            filteredNumbers.add(number);\n        }\n    }\n    return filteredNumbers; \n}\n```", "```java\nif (tester.test(number)) {\n```", "```java\nif (tester.test(number.intValue())) {\n```", "```java\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nList<Integer> range1to20 = \n    IntStream.rangeClosed(1, 20).boxed().collect(Collectors.toList());\n```", "```java\nTestDivisibleBy5 testDivisibleBy5 = new TestDivisibleBy5();\nList<Integer> divisibleBy5Numbers = \nfilterNumbersWithTestable(range1to20, testDivisibleBy5);\nSystem.out.println(divisibleBy5Numbers);\n```", "```java\nTestGreaterThan10 testGreaterThan10 = new TestGreaterThan10();\nList<Integer> greaterThan10Numbers = \n    filterNumbersWithTestable(range1to20, testGreaterThan10);\nSystem.out.println(greaterThan10Numbers);\n```", "```java\nimport java.util.function.IntPredicate;\n\npublic List<Integer> filterNumbersWithPredicate(final List<Integer> numbers,\n    IntPredicate predicate) {\n    List<Integer> filteredNumbers = new ArrayList<>();\n    for (Integer number : numbers) {\n        if (predicate.test(number)) {\n            filteredNumbers.add(number);\n        }\n    }\n    return filteredNumbers; \n}\n```", "```java\nIntPredicate divisibleBy5 = n -> n % 5 == 0;\n```", "```java\nIntPredicate divisibleBy5 = (n) ->{ return n % 5 == 0 };\n```", "```java\nList<Integer> divisibleBy5Numbers2 = \n    filterNumbersWithPredicate(range1to20, divisibleBy5);\nSystem.out.println(divisibleBy5Numbers2);\n```", "```java\nList<Integer> greaterThan10Numbers2 = \n    filterNumbersWithPredicate(range1to20, n -> n > 10);\nSystem.out.println(greaterThan10Numbers2);\n```", "```java\nimport java.util.function.Function;\n\npublic List<Integer> filterNumbersWithFunction(final List<Integer> numbers,\n Function<Integer, Boolean> function) {\n    List<Integer> filteredNumbers = new ArrayList<>();\n    for (Integer number : numbers) {\n if (function.apply(number)) {\n            filteredNumbers.add(number);\n        }\n    }\n    return filteredNumbers; \n}\n```", "```java\nList<Integer> divisibleBy3Numbers = \n    filterNumbersWithFunction(range1to20, n -> n % 3 == 0);\n```", "```java\nList<Integer> divisibleBy3Numbers = \n    filterNumbersWithFunction(range1to20, n -> new Boolean(n.intValue() % 3 == 0));\n```", "```java\nList<Integer> divisibleBy3Numbers2 = range1to20.stream().filter(n -> n % 3 == 0).collect(Collectors.toList());\n```", "```java\nrange1to20.stream()\n.filter(n -> n % 3 == 0)\n.collect(Collectors.toList());\n```", "```java\ndivisibleBy3Numbers2.forEach(n -> System.out.println(n));\n```", "```java\n3\n6\n9\n12\n15\n18\n\n```", "```java\ndivisibleBy3Numbers2.forEach(System.out::println);\n```", "```java\nint byNumber = 4;\nList<Integer> divisibleBy4Numbers =\n    range1to20.stream().filter(\n        n -> n % byNumber == 0).collect(\n        Collectors.toList());\ndivisibleBy4Numbers.forEach(System.out::println);\n```", "```java\n4\n8\n12\n16\n20\n\n```", "```java\n// The following code will generate an error\nIntPredicate errorPredicate = n -> 8;\n```", "```java\n|  Error:\n|  incompatible types: bad return type in lambda expression\n|      int cannot be converted to boolean\n|  IntPredicate errorPredicate = n -> 8;\n|                                     ^\n\n```", "```java\npublic interface Identifiable {\n    int getId();\n}\n```", "```java\npublic interface Repository<E extends Identifiable> {\n    List<E> getAll();\n}\n```", "```java\npublic abstract class Entity implements Identifiable {\n    protected final int id;\n\n    public Entity(int id) {\n        this.id = id;\n    }\n\n    @Override\n    public final int getId() {\n        return id;\n    }\n}\n```", "```java\npublic class MobileGame extends Entity {\n    protected final String separator = \"; \";\n    public final String name;\n    public int highestScore;\n    public int lowestScore;\n    public int playersCount;\n\n    public MobileGame(int id, \n        String name, \n        int highestScore, \n        int lowestScore, \n        int playersCount) {\n        super(id);\n        this.name = name;\n        this.highestScore = highestScore;\n        this.lowestScore = lowestScore;\n        this.playersCount = playersCount;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Id: \");\n        sb.append(getId());\n        sb.append(separator);\n        sb.append(\"Name: \");\n        sb.append(name);\n        sb.append(separator);\n        sb.append(\"Highest score: \");\n        sb.append(highestScore);\n        sb.append(separator);\n        sb.append(\"Lowest score: \");\n        sb.append(lowestScore);\n        sb.append(separator);\n        sb.append(\"Players count: \");\n        sb.append(playersCount);\n\n        return sb.toString();\n    }\n}\n```", "```java\nimport java.util.stream.Collectors;\n\npublic class MemoryMobileGameRepository implements Repository<MobileGame> {\n    @Override\n    public List<MobileGame> getAll() {\n        List<MobileGame> mobileGames = new ArrayList<>();\n        mobileGames.add(\n            new MobileGame(1, \"Uncharted 4000\", 5000, 10, 3800));\n        mobileGames.add(\n            new MobileGame(2, \"Supergirl 2017\", 8500, 5, 75000));\n        mobileGames.add(\n            new MobileGame(3, \"Super Luigi Run\", 32000, 300, 90000));\n        mobileGames.add(\n            new MobileGame(4, \"Mario vs Kong III\", 152000, 1500, 750000));\n        mobileGames.add(\n            new MobileGame(5, \"Minecraft Reloaded\", 6708960, 8000, 3500000));\n        mobileGames.add(\n            new MobileGame(6, \"Pikachu vs Beedrill: The revenge\", 780000, 400, 1000000));\n        mobileGames.add(\n            new MobileGame(7, \"Jerry vs Tom vs Spike\", 78000, 670, 20000));\n        mobileGames.add(\n            new MobileGame(8, \"NBA 2017\", 1500607, 20, 7000005));\n        mobileGames.add(\n            new MobileGame(9, \"NFL 2017\", 3205978, 0, 4600700));\n        mobileGames.add(\n            new MobileGame(10, \"Nascar Remix\", 785000, 0, 2600000));\n        mobileGames.add(\n            new MobileGame(11, \"Little BIG Universe\", 95000, 3, 546000));\n        mobileGames.add(\n            new MobileGame(12, \"Plants vs Zombies Garden Warfare 3\", 879059, 0, 789000));\n        mobileGames.add(\n            new MobileGame(13, \"Final Fantasy XVII\", 852325, 0, 375029));\n        mobileGames.add(\n            new MobileGame(14, \"Watch Dogs 3\", 27000, 2, 78004));\n        mobileGames.add(\n            new MobileGame(15, \"Remember Me\", 672345, 5, 252003));\n\n        return mobileGames;\n    }\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nrepository.getAll().forEach(mobileGame -> System.out.println(mobileGame));\n```", "```java\nId: 1; Name: Uncharted 4000; Highest score: 5000; Lowest score: 10; Players count: 3800\nId: 2; Name: Supergirl 2017; Highest score: 8500; Lowest score: 5; Players count: 75000\nId: 3; Name: Super Luigi Run; Highest score: 32000; Lowest score: 300; Players count: 90000\nId: 4; Name: Mario vs Kong III; Highest score: 152000; Lowest score: 1500; Players count: 750000\nId: 5; Name: Minecraft Reloaded; Highest score: 6708960; Lowest score: 8000; Players count: 3500000\nId: 6; Name: Pikachu vs Beedrill: The revenge; Highest score: 780000; Lowest score: 400; Players count: 1000000\nId: 7; Name: Jerry vs Tom vs Spike; Highest score: 78000; Lowest score: 670; Players count: 20000\nId: 8; Name: NBA 2017; Highest score: 1500607; Lowest score: 20; Players count: 7000005\nId: 9; Name: NFL 2017; Highest score: 3205978; Lowest score: 0; Players count: 4600700\nId: 10; Name: Nascar Remix; Highest score: 785000; Lowest score: 0; Players count: 2600000\nId: 11; Name: Little BIG Universe; Highest score: 95000; Lowest score: 3; Players count: 546000\nId: 12; Name: Plants vs Zombies Garden Warfare 3; Highest score: 879059; Lowest score: 0; Players count: 789000\nId: 13; Name: Final Fantasy XVII; Highest score: 852325; Lowest score: 0; Players count: 375029\nId: 14; Name: Watch Dogs 3; Highest score: 27000; Lowest score: 2; Players count: 78004\nId: 15; Name: Remember Me; Highest score: 672345; Lowest score: 5; Players count: 252003\n\n```", "```java\n the same result. The code file for the sample is included in the java_9_oop_chapter_12_01 folder, in the example12_06.java file.\n```", "```java\nrepository.getAll().forEach(System.out::println);\n```", "```java\npublic List<MobileGame> getWithLowestScoreGreaterThan(int minimumLowestScore) {\n    return getAll().stream()\n        .filter(game -> game.lowestScore > minimumLowestScore)\n        .collect(Collectors.toList());\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nrepository.getWithLowestScoreGreaterThan(1000).forEach(System.out::println);\n```", "```java\nId: 4; Name: Mario vs Kong III; Highest score: 152000; Lowest score: 1500; Players count: 750000\nId: 5; Name: Minecraft Reloaded; Highest score: 6708960; Lowest score: 8000; Players count: 3500000\n\n```", "```java\njava_9_oop_chapter_12_01 folder, in the example12_07.java file.\n```", "```java\npublic List<MobileGame> getWithLowestScoreGreaterThanV2(int minimumLowestScore) {\nreturn getAll().stream()\n .filter((MobileGame game) -> game.lowestScore > minimumLowestScore) \n    .collect(Collectors.toList());\n}\n```", "```java\npublic List<MobileGame> getStartingWith(String prefix) {\n    return getAll().stream()\n        .filter(game -> game.name.startsWith(prefix))\n        .collect(Collectors.toList());\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nrepository.getStartingWith(\"Su\").forEach(System.out::println);\n```", "```java\nId: 2; Name: Supergirl 2017; Highest score: 8500; Lowest score: 5; Players count: 75000\nId: 3; Name: Super Luigi Run; Highest score: 32000; Lowest score: 300; Players count: 90000\n\n```", "```java\npublic Optional<MobileGame> getByPlayersCountAndHighestScore(\n    int playersCount, \n    int highestScore) {\n    return getAll().stream()\n        .filter(game -> (game.playersCount == playersCount) && (game.highestScore == highestScore))\n        .findFirst();\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nOptional<MobileGame> optionalMobileGame1 = \n    repository.getByPlayersCountAndHighestScore(750000, 152000);\nif (optionalMobileGame1.isPresent()) {\n    MobileGame mobileGame1 = optionalMobileGame1.get();\n    System.out.println(mobileGame1);\n} else {\n    System.out.println(\"No mobile game matches the specified criteria.\");\n}\nOptional<MobileGame> optionalMobileGame2 = \n    repository.getByPlayersCountAndHighestScore(670000, 829340);\nif (optionalMobileGame2.isPresent()) {\n    MobileGame mobileGame2 = optionalMobileGame2.get();\n    System.out.println(mobileGame2);\n} else {\n    System.out.println(\"No mobile game matches the specified criteria.\");\n}\n```", "```java\nId: 4; Name: Mario vs Kong III; Highest score: 152000; Lowest score: 1500; Players count: 750000\nNo mobile game matches the specified criteria.\n\n```", "```java\npublic List<String> getGameNamesTransformedToUpperCase() {\n    return getAll().stream()\n        .map(game -> game.name.toUpperCase())\n        .collect(Collectors.toList());\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nrepository.getGameNamesTransformedToUpperCase().forEach(System.out::println);\n```", "```java\nUNCHARTED 4000\nSUPERGIRL 2017\nSUPER LUIGI RUN\nMARIO VS KONG III\nMINECRAFT RELOADED\nPIKACHU VS BEEDRILL: THE REVENGE\nJERRY VS TOM VS SPIKE\nNBA 2017\nNFL 2017\nNASCAR REMIX\nLITTLE BIG UNIVERSE\nPLANTS VS ZOMBIES GARDEN WARFARE 3\nFINAL FANTASY XVII\nWATCH DOGS 3\nREMEMBER ME\n\n```", "```java\npublic class NamesForMobileGame {\n    public final String upperCaseName;\n    public final String lowerCaseName;\n\n    public NamesForMobileGame(String name) {\n        this.upperCaseName = name.toUpperCase();\n        this.lowerCaseName = name.toLowerCase();\n    }\n\n    public NamesForMobileGame(MobileGame game) {\n        this(game.name);\n    }\n}\n```", "```java\npublic List<NamesForMobileGame> getNamesForMobileGames() {\n    return getAll().stream()\n        .map(game -> new NamesForMobileGame(game.name))\n        .collect(Collectors.toList());\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository()\nrepository.getNamesForMobileGames().forEach(names -> {\n    StringBuilder sb = new StringBuilder();\n    sb.append(names.upperCaseName);\n    sb.append(\" - \");\n    sb.append(names.lowerCaseName);\n    System.out.println(sb.toString());\n});\n```", "```java\nUNCHARTED 4000 - uncharted 4000\nSUPERGIRL 2017 - supergirl 2017\nSUPER LUIGI RUN - super luigi run\nMARIO VS KONG III - mario vs kong iii\nMINECRAFT RELOADED - minecraft reloaded\nPIKACHU VS BEEDRILL: THE REVENGE - pikachu vs beedrill: the revenge\nJERRY VS TOM VS SPIKE - jerry vs tom vs spike\nNBA 2017 - nba 2017\nNFL 2017 - nfl 2017\nNASCAR REMIX - nascar remix\nLITTLE BIG UNIVERSE - little big universe\nPLANTS VS ZOMBIES GARDEN WARFARE 3 - plants vs zombies garden warfare 3\nFINAL FANTASY XVII - final fantasy xvii\nWATCH DOGS 3 - watch dogs 3\nREMEMBER ME - remember me\n\n```", "```java\npublic List<NamesForMobileGame> getNamesForMobileGamesV2() {\n    return getAll().stream()\n        .map(NamesForMobileGame::new)\n        .collect(Collectors.toList());\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository();\nrepository.getNamesForMobileGamesV2().forEach(names -> {\n    StringBuilder sb = new StringBuilder();\n    sb.append(names.upperCaseName);\n    sb.append(\" - \");\n    sb.append(names.lowerCaseName);\n    System.out.println(sb.toString());\n});\n```", "```java\nint lowestScoreSum = 0;\nfor (MobileGame mobileGame : repository.getAll()) {\n    lowestScoreSum += mobileGame.lowestScore;\n}\nSystem.out.println(lowestScoreSum);\n```", "```java\nint lowestScoreMapReduceSum = repository.getAll().stream().map(game -> game.lowestScore).reduce(0, (sum, lowestScore) -> sum + lowestScore);\nSystem.out.println(lowestScoreMapReduceSum);\n```", "```java\nint lowestScoreMapReduceSum2 = \n    repository.getAll().stream()\n    .map(game -> game.lowestScore)\n    .reduce(0, (sum, lowestScore) -> {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"sum value: \");\n        sb.append(sum);\n        sb.append(\";lowestScore value: \");\n        sb.append(lowestScore);\n        System.out.println(sb.toString());\n\n        return sum + lowestScore;\n    });\nSystem.out.println(lowestScoreMapReduceSum2);\n```", "```java\nsum value: 0; lowestScore value: 10\nsum value: 10; lowestScore value: 5\nsum value: 15; lowestScore value: 300\nsum value: 315; lowestScore value: 1500\nsum value: 1815; lowestScore value: 8000\nsum value: 9815; lowestScore value: 400\nsum value: 10215; lowestScore value: 670\nsum value: 10885; lowestScore value: 20\nsum value: 10905; lowestScore value: 0\nsum value: 10905; lowestScore value: 0\nsum value: 10905; lowestScore value: 3\nsum value: 10908; lowestScore value: 0\nsum value: 10908; lowestScore value: 0\nsum value: 10908; lowestScore value: 2\nsum value: 10910; lowestScore value: 5\nlowestScoreMapReduceSum2 ==> 10915\n10915\n\n```", "```java\nint lowestScoreMapReduceSum3 =\n    repository.getAll().stream()\n    .mapToInt(game -> game.lowestScore).sum();\nSystem.out.println(lowestScoreMapReduceSum3);\n```", "```java\nint lowestScoreMapReduceSum4 = \n    repository.getAll().stream()\n.map(game -> game.lowestScore)\n.collect(Collectors.summingInt(Integer::intValue));\nSystem.out.println(lowestScoreMapReduceSum4);\n```", "```java\nlong lowestScoreMapReduceSum5 =\n    repository.getAll().stream()\n    .mapToLong(game -> game.lowestScore).sum();\nSystem.out.println(lowestScoreMapReduceSum6);\n```", "```java\npublic long getHighestScoreSumForMinPlayersCount(int minPlayersCount) {\n    return getAll().stream()\n        .filter(game -> (game.playersCount >= minPlayersCount))\n        .mapToLong(game -> game.highestScore)\n        .reduce(0, (sum, highestScore) -> sum + highestScore);\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository();\nSystem.out.println(repository.getHighestScoreSumForMinPlayersCount(150000));\n```", "```java\n15631274\n\n```", "```java\npublic long getHighestScoreSumForMinPlayersCountV2(int minPlayersCount) {\n    return getAll().stream()\n        .filter(game -> (game.playersCount >= minPlayersCount))\n        .mapToLong(game -> game.highestScore)\n        .sum();\n}\n```", "```java\nMemoryMobileGameRepository repository = new MemoryMobileGameRepository();\nSystem.out.println(repository.getHighestScoreSumForMinPlayersCountV2(150000));\n```", "```java\nrepository.getAll().stream()\n.map(game -> game.name.toUpperCase())\n.collect(Collectors.joining(\"; \"));\n```", "```java\nUNCHARTED 4000; SUPERGIRL 2017; SUPER LUIGI RUN; MARIO VS KONG III; MINECRAFT RELOADED; PIKACHU VS BEEDRILL: THE REVENGE; JERRY VS TOM VS SPIKE; NBA 2017; NFL 2017; NASCAR REMIX; LITTLE BIG UNIVERSE; PLANTS VS ZOMBIES GARDEN WARFARE 3; FINAL FANTASY XVII; WATCH DOGS 3; REMEMBER ME\n\n```", "```java\njava_9_oop_chapter_12_01 folder, in the example12_22.java file.\n```", "```java\nrepository.getAll().stream().sorted(Comparator.comparing(game -> game.name)).map(game -> game.name.toUpperCase()).collect(Collectors.joining(\"; \"));\n```", "```java\nFINAL FANTASY XVII; JERRY VS TOM VS SPIKE; LITTLE BIG UNIVERSE; MARIO VS KONG III; MINECRAFT RELOADED; NBA 2017; NFL 2017; NASCAR REMIX; PIKACHU VS BEEDRILL: THE REVENGE; PLANTS VS ZOMBIES GARDEN WARFARE 3; REMEMBER ME; SUPER LUIGI RUN; SUPERGIRL 2017; UNCHARTED 4000; WATCH DOGS 3\n\n```", "```java\nMap<Boolean, List<MobileGame>> map1 = \nrepository.getAll().stream()\n.collect(Collectors.partitioningBy(g -> g.playersCount >= 100000));\nmap1.forEach((passed, mobileGames) -> {\n    System.out.println(\n        String.format(\"Mobile games that %s:\",\n            passed ? \"passed\" : \"didn't pass\"));\n    mobileGames.forEach(System.out::println);\n});\n```", "```java\nMobile games that didn't pass:\nId: 1; Name: Uncharted 4000; Highest score: 5000; Lowest score: 10; Players count: 3800\nId: 2; Name: Supergirl 2017; Highest score: 8500; Lowest score: 5; Players count: 75000\nId: 3; Name: Super Luigi Run; Highest score: 32000; Lowest score: 300; Players count: 90000\nId: 7; Name: Jerry vs Tom vs Spike; Highest score: 78000; Lowest score: 670; Players count: 20000\nId: 14; Name: Watch Dogs 3; Highest score: 27000; Lowest score: 2; Players count: 78004\nMobile games that passed:\nId: 4; Name: Mario vs Kong III; Highest score: 152000; Lowest score: 1500; Players count: 750000\nId: 5; Name: Minecraft Reloaded; Highest score: 6708960; Lowest score: 8000; Players count: 3500000\nId: 6; Name: Pikachu vs Beedrill: The revenge; Highest score: 780000; Lowest score: 400; Players count: 1000000\nId: 8; Name: NBA 2017; Highest score: 1500607; Lowest score: 20; Players count: 7000005\nId: 9; Name: NFL 2017; Highest score: 3205978; Lowest score: 0; Players count: 4600700\nId: 10; Name: Nascar Remix; Highest score: 785000; Lowest score: 0; Players count: 2600000\nId: 11; Name: Little BIG Universe; Highest score: 95000; Lowest score: 3; Players count: 546000\nId: 12; Name: Plants vs Zombies Garden Warfare 3; Highest score: 879059; Lowest score: 0; Players count: 789000\nId: 13; Name: Final Fantasy XVII; Highest score: 852325; Lowest score: 0; Players count: 375029\nId: 15; Name: Remember Me; Highest score: 672345; Lowest score: 5; Players count: 252003\n\n```", "```java\njava_9_oop_chapter_12_01 folder, in the example12_24.java file.\n```", "```java\nMap<Boolean, List<MobileGame>> map1 =\nrepository.getAll().stream()\n.sorted(Comparator.comparing(game -> game.name))\n.collect(Collectors.partitioningBy(g -> g.playersCount >= 100000));\nmap1.forEach((passed, mobileGames) -> {\n    System.out.println(\n        String.format(\"Mobile games that %s:\",\n            passed ? \"passed\" : \"didn't pass\"));\n    mobileGames.forEach(System.out::println);\u2029});\n```", "```java\nMobile games that didn't pass:\nId: 7; Name: Jerry vs Tom vs Spike; Highest score: 78000; Lowest score: 670; Players count: 20000\nId: 3; Name: Super Luigi Run; Highest score: 32000; Lowest score: 300; Players count: 90000\nId: 2; Name: Supergirl 2017; Highest score: 8500; Lowest score: 5; Players count: 75000\nId: 1; Name: Uncharted 4000; Highest score: 5000; Lowest score: 10; Players count: 3800\nId: 14; Name: Watch Dogs 3; Highest score: 27000; Lowest score: 2; Players count: 78004\nMobile games that passed:\nId: 13; Name: Final Fantasy XVII; Highest score: 852325; Lowest score: 0; Players count: 375029\nId: 11; Name: Little BIG Universe; Highest score: 95000; Lowest score: 3; Players count: 546000\nId: 4; Name: Mario vs Kong III; Highest score: 152000; Lowest score: 1500; Players count: 750000\nId: 5; Name: Minecraft Reloaded; Highest score: 6708960; Lowest score: 8000; Players count: 3500000\nId: 8; Name: NBA 2017; Highest score: 1500607; Lowest score: 20; Players count: 7000005\nId: 9; Name: NFL 2017; Highest score: 3205978; Lowest score: 0; Players count: 4600700\nId: 10; Name: Nascar Remix; Highest score: 785000; Lowest score: 0; Players count: 2600000\nId: 6; Name: Pikachu vs Beedrill: The revenge; Highest score: 780000; Lowest score: 400; Players count: 1000000\nId: 12; Name: Plants vs Zombies Garden Warfare 3; Highest score: 879059; Lowest score: 0; Players count: 789000\nId: 15; Name: Remember Me; Highest score: 672345; Lowest score: 5; Players count: 252003\n\n```"]