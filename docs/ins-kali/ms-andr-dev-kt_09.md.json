["```kt\n     package com.journaler.execution \n\n     import java.util.concurrent.BlockingQueue \n     import java.util.concurrent.LinkedBlockingQueue \n     import java.util.concurrent.ThreadPoolExecutor \n     import java.util.concurrent.TimeUnit \n\n     class TaskExecutor private constructor( \n        corePoolSize: Int, \n        maximumPoolSize: Int, \n        workQueue: BlockingQueue<Runnable>? \n\n    ) : ThreadPoolExecutor( \n        corePoolSize, \n        maximumPoolSize, \n        0L, \n        TimeUnit.MILLISECONDS, \n        workQueue \n    ) { \n\n    companion object { \n        fun getInstance(capacity: Int): TaskExecutor { \n            return TaskExecutor( \n                    capacity, \n                    capacity * 2, \n                    LinkedBlockingQueue<Runnable>() \n            ) \n        } \n    } }\n```", "```kt\n     class NoteActivity : ItemActivity() { \n       ... \n       private val executor = TaskExecutor.getInstance(1) \n       ... \n       private val locationListener = object : LocationListener { \n         override fun onLocationChanged(p0: Location?) { \n            p0?.let { \n                LocationProvider.unsubscribe(this) \n                location = p0 \n                val title = getNoteTitle() \n                val content = getNoteContent() \n                note = Note(title, content, p0) \n                executor.execute { \n                  val param = note \n                  var result = false \n                  param?.let { \n                      result = Db.insert(param) \n                  } \n                  if (result) { \n                      Log.i(tag, \"Note inserted.\") \n                  } else { \n                      Log.e(tag, \"Note not inserted.\") \n                  } \n               } \n\n            } \n         } \n\n        override fun onStatusChanged(p0: String?, p1: Int, p2: Bundle?)\n        {} \n        override fun onProviderEnabled(p0: String?) {} \n        override fun onProviderDisabled(p0: String?) {} \n      } \n         ... \n      private fun updateNote() { \n       if (note == null) { \n         if (!TextUtils.isEmpty(getNoteTitle()) &&\n         !TextUtils.isEmpty(getNoteContent())) { \n            LocationProvider.subscribe(locationListener) \n          } \n        } else { \n           note?.title = getNoteTitle() \n           note?.message = getNoteContent() \n           executor.execute { \n             val param = note \n             var result = false \n             param?.let { \n                result = Db.update(param) \n             } \n             if (result) { \n                Log.i(tag, \"Note updated.\") \n             } else { \n                Log.e(tag, \"Note not updated.\") \n             } \n           } \n        } \n       } \n  ... }\n```", "```kt\n     <?xml version=\"1.0\" encoding=\"utf-8\"?> \n     <ScrollView xmlns:android=\n      \"http://schemas.android.com/apk/res/android\" \n     android:layout_width=\"match_parent\" \n     android:layout_height=\"match_parent\" \n     android:fillViewport=\"true\"> \n\n     <LinearLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:background=\"@color/black_transparent_40\" \n        android:orientation=\"vertical\"> \n\n        ... \n\n        <RelativeLayout \n            android:layout_width=\"match_parent\" \n            android:layout_height=\"wrap_content\"> \n\n            <View \n                android:id=\"@+id/indicator\" \n                android:layout_width=\"40dp\" \n                android:layout_height=\"40dp\" \n                android:layout_alignParentEnd=\"true\" \n                android:layout_centerVertical=\"true\" \n                android:layout_margin=\"10dp\" \n                android:background=\"@android:color/darker_gray\" /> \n\n            <EditText \n                android:id=\"@+id/note_title\" \n                style=\"@style/edit_text_transparent\" \n                android:layout_width=\"match_parent\" \n                android:layout_height=\"wrap_content\" \n                android:hint=\"@string/title\" \n                android:padding=\"@dimen/form_padding\" /> \n\n        </RelativeLayout>         \n         ...      \n      </LinearLayout> \n\n    </ScrollView> \n```", "```kt\n     class NoteActivity : ItemActivity() { \n      ... \n      private var handler: Handler? = null \n      .... \n      override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        handler = Handler(Looper.getMainLooper()) \n        ... \n      } \n      ... \n      private val locationListener = object : LocationListener { \n        override fun onLocationChanged(p0: Location?) { \n            p0?.let { \n                ... \n                executor.execute { \n                    ... \n                    handler?.post { \n                        var color = R.color.vermilion \n                        if (result) { \n                            color = R.color.green \n                        } \n                        indicator.setBackgroundColor( \n                                ContextCompat.getColor( \n                                        this@NoteActivity, \n                                        color \n                                ) \n                        ) \n                    } \n                } \n            } \n        } \n\n        override fun onStatusChanged(p0: String?, p1: Int, p2: Bundle?)\n        {} \n        override fun onProviderEnabled(p0: String?) {} \n        override fun onProviderDisabled(p0: String?) {} \n      } \n     ... \n     private fun updateNote() { \n        if (note == null) { \n            ... \n        } else { \n            ... \n            executor.execute { \n                ... \n                handler?.post { \n                    var color = R.color.vermilion \n                    if (result) { \n                        color = R.color.green \n                    } \n                    indicator.setBackgroundColor\n                    (ContextCompat.getColor( \n                        this@NoteActivity, \n                        color \n                    )) \n                 } \n               } \n            } \n        } }\n```", "```kt\n     class NoteActivity : ItemActivity() { \n      ... \n      override fun onCreate(savedInstanceState: Bundle?) { \n        super.onCreate(savedInstanceState) \n        handler = object : Handler(Looper.getMainLooper()) { \n            override fun handleMessage(msg: Message?) { \n                msg?.let { \n                    var color = R.color.vermilion \n                    if (msg.arg1 > 0) { \n                        color = R.color.green \n                    } \n                    indicator.setBackgroundColor\n                    (ContextCompat.getColor( \n                       this@NoteActivity, \n                       color \n                    )) \n                  } \n                 super.handleMessage(msg) \n               } \n             } \n            ... \n          } \n        ... \n        private val locationListener = object : LocationListener { \n        override fun onLocationChanged(p0: Location?) { \n            p0?.let { \n                ... \n                executor.execute { \n                    ... \n                    sendMessage(result) \n                } \n            } \n        } \n\n        override fun onStatusChanged(p0: String?, p1: Int, p2: Bundle?)\n        {} \n        override fun onProviderEnabled(p0: String?) {} \n        override fun onProviderDisabled(p0: String?) {} \n      } \n      ... \n      private fun updateNote() { \n        if (note == null) { \n            ... \n        } else { \n            ... \n            executor.execute { \n                ... \n                sendMessage(result) \n            } \n        } \n      } \n     ... \n     private fun sendMessage(result: Boolean) { \n        val msg = handler?.obtainMessage() \n        if (result) { \n            msg?.arg1 = 1 \n        } else { \n            msg?.arg1 = 0 \n        } \n        handler?.sendMessage(msg) \n     } \n     ... \n    } \n```", "```kt\n    class NoteActivity : ItemActivity() { \n      ... \n      private val threadPoolExecutor = ThreadPoolExecutor( \n            3, 3, 1, TimeUnit.SECONDS, LinkedBlockingQueue<Runnable>() \n    ) \n\n    private class TryAsync(val identifier: String) : AsyncTask<Unit,\n    Int, Unit>() { \n        private val tag = \"TryAsync\" \n\n        override fun onPreExecute() { \n            Log.i(tag, \"onPreExecute [ $identifier ]\") \n            super.onPreExecute() \n      } \n\n      override fun doInBackground(vararg p0: Unit?): Unit { \n         Log.i(tag, \"doInBackground [ $identifier ][ START ]\") \n         Thread.sleep(5000) \n         Log.i(tag, \"doInBackground [ $identifier ][ END ]\") \n         return Unit \n       } \n\n       override fun onCancelled(result: Unit?) { \n         Log.i(tag, \"onCancelled [ $identifier ][ END ]\") \n         super.onCancelled(result) \n        } \n\n       override fun onProgressUpdate(vararg values: Int?) { \n         val progress = values.first() \n         progress?.let { \n           Log.i(tag, \"onProgressUpdate [ $identifier ][ $progress ]\") \n         } \n          super.onProgressUpdate(*values) \n        } \n\n        override fun onPostExecute(result: Unit?) { \n          Log.i(tag, \"onPostExecute [ $identifier ]\") \n          super.onPostExecute(result) \n        } \n      } \n      ... \n      private val textWatcher = object : TextWatcher { \n        override fun afterTextChanged(p0: Editable?) { \n            ... \n        } \n\n      override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2:\n      Int, p3: Int) {} \n\n      override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int,\n      p3: Int) { \n            p0?.let {  \n                tryAsync(p0.toString())  \n            } \n        } \n     } \n     ... \n     private fun tryAsync(identifier: String) { \n        val tryAsync = TryAsync(identifier) \n        tryAsync.executeOnExecutor(threadPoolExecutor) \n     } \n    } \n```", "```kt\n08-04 14:56:59.283 21953-21953 ... I/TryAsync: onPreExecute [ A ] \n08-04 14:56:59.284 21953-23233 ... I/TryAsync: doInBackground [ A ][ START ] \n08-04 14:57:00.202 21953-21953 ... I/TryAsync: onPreExecute [ An ] \n08-04 14:57:00.204 21953-23250 ... I/TryAsync: doInBackground [ An ][ START ] \n08-04 14:57:00.783 21953-21953 ... I/TryAsync: onPreExecute [ And ] \n08-04 14:57:00.784 21953-23281 ... I/TryAsync: doInBackground [ And ][ START ] \n08-04 14:57:01.001 21953-21953 ... I/TryAsync: onPreExecute [ Andr ] \n08-04 14:57:01.669 21953-21953 ... I/TryAsync: onPreExecute [ Andro ] \n08-04 14:57:01.934 21953-21953 ... I/TryAsync: onPreExecute [ Androi ] \n08-04 14:57:02.314 21953-2195 ... I/TryAsync: onPreExecute [ Android ] \n08-04 14:57:04.285 21953-23233 ... I/TryAsync: doInBackground [ A ][ END ] \n08-04 14:57:04.286 21953-23233 ... I/TryAsync: doInBackground [ Andr ][ START ] \n08-04 14:57:04.286 21953-21953 ... I/TryAsync: onPostExecute [ A ] \n08-04 14:57:05.204 21953-23250 ... I/TryAsync: doInBackground [ An ][ END ] \n08-04 14:57:05.204 21953-21953 ... I/TryAsync: onPostExecute [ An ] \n08-04 14:57:05.205 21953-23250 ... I/TryAsync: doInBackground [ Andro ][ START ] \n08-04 14:57:05.784 21953-23281 ... I/TryAsync: doInBackground [ And ][ END ] \n08-04 14:57:05.785 21953-23281 ... I/TryAsync: doInBackground [ Androi ][ START ] \n08-04 14:57:05.786 21953-21953 ... I/TryAsync: onPostExecute [ And ] \n08-04 14:57:09.286 21953-23233 ... I/TryAsync: doInBackground [ Andr ][ END ] \n08-04 14:57:09.287 21953-21953 ... I/TryAsync: onPostExecute [ Andr ] \n08-04 14:57:09.287 21953-23233 ... I/TryAsync: doInBackground [ Android ][ START ] \n08-04 14:57:10.205 21953-23250 ... I/TryAsync: doInBackground [ Andro ][ END ] \n08-04 14:57:10.206 21953-21953 ... I/TryAsync: onPostExecute [ Andro ] \n08-04 14:57:10.786 21953-23281 ... I/TryAsync: doInBackground [ Androi ][ END ] \n08-04 14:57:10.787 21953-2195 ... I/TryAsync: onPostExecute [ Androi ] \n08-04 14:57:14.288 21953-23233 ... I/TryAsync: doInBackground [ Android ][ END ] \n08-04 14:57:14.290 21953-2195 ... I/TryAsync: onPostExecute [ Android ] \n```", "```kt\n08-04 14:56:59.283 21953-21953 ... I/TryAsync: onPreExecute [ A ] \n08-04 14:57:00.202 21953-21953 ... I/TryAsync: onPreExecute [ An ] \n08-04 14:57:00.783 21953-21953 ... I/TryAsync: onPreExecute [ And ] \n08-04 14:57:01.001 21953-21953 ... I/TryAsync: onPreExecute [ Andr ] \n08-04 14:57:01.669 21953-21953 ... I/TryAsync: onPreExecute [ Andro ] \n08-04 14:57:01.934 21953-21953 ... I/TryAsync: onPreExecute [ Androi ] \n08-04 14:57:02.314 21953-21953 ... I/TryAsync: onPreExecute [ Android ] \n```", "```kt\n    class LooperHandler : Handler() { \n      override fun handleMessage(message: Message) { \n            ... \n      } \n    } \n\n    class LooperThread : Thread() { \n      var handler: Handler? = null \n\n      override fun run() { \n         Looper.prepare() \n         handler = LooperHandler() \n         Looper.loop() \n      } \n    } \n```", "```kt\n     class ItemsFragment : BaseFragment() { \n      ... \n       override fun onResume() { \n         super.onResume() \n         ... \n         val items = view?.findViewById<ListView>(R.id.items) \n         items?.let { \n            items.postDelayed({ \n              if (!activity.isFinishing) { \n                items.setBackgroundColor(R.color.grey_text_middle) \n              } \n            }, 3000) \n         } \n      } \n       ... \n     } \n```", "```kt\n     class ItemsFragment : BaseFragment() { \n      ... \n      override fun onResume() { \n        super.onResume() \n        ... \n        val items = view?.findViewById<ListView>(R.id.items) \n        items?.let { \n            Handler().postDelayed({ \n                if (!activity.isFinishing) { \n                    items.setBackgroundColor(R.color.grey_text_middle) \n                } \n            }, 3000) \n         } \n        } \n       } \n       ...\n     }\n```"]