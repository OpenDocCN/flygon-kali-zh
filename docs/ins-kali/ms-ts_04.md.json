["```ts\n<body>\n    <script type=\"text/javascript\">\n        var CONTACT_EMAIL_ARRAY = [\n            \"help@site.com\",\n            \"contactus@site.com\",\n            \"webmaster@site.com\"\n        ];\n    </script>\n</body>\n```", "```ts\nclass GlobalLogger {\n    static logGlobalsToConsole() {\n        for (var i = 0; i < CONTACT_EMAIL_ARRAY.length; i++) {\n            console.log(\"found contact : \" + CONTACT_EMAIL_ARRAY[i]);\n        }\n    }\n}\n\nwindow.onload = () => {\n    GlobalLogger.logGlobalsToConsole();\n}\n```", "```ts\nerror TS2095: Build: Could not find symbol 'CONTACT_EMAIL_ARRAY'.\n\n```", "```ts\ndeclare var CONTACT_EMAIL_ARRAY: string [];\n```", "```ts\nfound contact : help@site.com\nfound contact : contactus@site.com\nfound contact : webmaster@site.com\n\n```", "```ts\n<script type=\"text/javascript\">\n    var CONTACT_DATA = [\n        { DisplayText: \"Help\", Email: \"help@site.com\" },\n        { DisplayText: \"Contact Us\", Email: \"contactus@site.com\" },\n        { DisplayText: \"Web Master\", Email: \"webmaster@site.com\" }\n    ];\n</script>\n```", "```ts\ninterface IContactData {\n    DisplayText: string;\n    Email: string;\n}\n\ndeclare var CONTACT_DATA: IContactData[];\n```", "```ts\nclass ContactLogger {\n    static logContactData() {\n        for (var i = 0; i < CONTACT_DATA.length; i++) {\n            var contactDataItem: IContactData = CONTACT_DATA[i];\n            console.log(\"Contact Text : \" + contactDataItem.DisplayText\n                 + \" Email : \" + contactDataItem.Email\n                );\n        }\n    }\n}\n\nwindow.onload = () => {\n    ContactLogger.logContactData();\n}\n```", "```ts\nContact Text : Help Email : help@site.com\nContact Text : Contact Us Email : contactus@site.com\nContact Text : Web Master Email : webmaster@site.com\n\n```", "```ts\nErrorHelper = (function() {\n    return {\n        containsErrors: function (response) {\n            if (!response || !response.responseText)\n                return false;\n\n            var errorValue = response.responseText;\n\n            if (String(errorValue.failure) == \"true\"\n                || Boolean(errorValue.failure)) {\n                return true;\n            }\n            return false;\n        },\n        trace: function (msg) {\n            var traceMessage = msg;\n            if (msg.responseText) {\n                traceMessage = msg.responseText.errorMessage;\n            }\n            console.log(\"[\" + new Date().toLocaleDateString()\n                + \"] \" + traceMessage);\n        }\n    }\n})();\n```", "```ts\n   var failureMessage = {\n        responseText: { \n            \"failure\": true,\n            \"errorMessage\": \"Unhandled Exception\"\n        }\n    };\n   var failureMessageString = {\n        responseText: {\n            \"failure\": \"true\",\n            \"errorMessage\": \"Unhandled Exception\"\n        }\n   };\n   var successMessage = { responseText: { \"failure\": false } };\n\n   if (ErrorHelper.containsErrors(failureMessage))\n        ErrorHelper.trace(failureMessage);\n   if (ErrorHelper.containsErrors(failureMessageString))\n        ErrorHelper.trace(failureMessageString);\n   if (!ErrorHelper.containsErrors(successMessage))\n        ErrorHelper.trace(\"success\");\n```", "```ts\n<!DOCTYPE html>\n<html >\n<head>specify.\n    <title></title>\n    <script src=\"img/ErrorHelper.js\"></script>\n    <script src=\"img/ErrorHelperTypeScript.js\"></script>\n</head>\n<body>\n\n</body>\n</html>\n```", "```ts\nwindow.onload = () => {\n    var failureMessage = {\n        responseText: { \"failure\": true,\n            \"errorMessage\": \"Unhandled Exception\" }\n    };\n\n    if (ErrorHelper.containsErrors(failureMessage))\n        ErrorHelper.trace(failureMessage);\n\n }\n```", "```ts\nerror TS2095: Build: Could not find symbol 'ErrorHelper'.\n\n```", "```ts\ndeclare module ErrorHelper {\n    function containsErrors(response);\n    function trace(message);\n}\n```", "```ts\ninterface IResponse {\n    responseText: IFailureMessage;\n}\n\ninterface IFailureMessage {\n    failure: boolean;\n    errorMessage: string;\n}\n```", "```ts\ndeclare module ErrorHelper {\n    function containsErrors(response: IResponse);\n    function trace(message);\n}\n```", "```ts\nvar anotherFailure : IResponse = { responseText: { success: true } };\n\nif (ErrorHelper.containsErrors(anotherFailure))\n    ErrorHelper.trace(anotherFailure);\n```", "```ts\nvar anotherFailure: IResponse = {\n    responseText: {\n        failure: false, errorMessage: \"\", success: true\n        }\n    };\n```", "```ts\nvar failureMessageString = {\n    responseText: { \"failure\": \"true\",\n        \"errorMessage\": \"Error Message\" }\n};\n\nif (ErrorHelper.containsErrors(failureMessageString))\n    ErrorHelper.trace(failureMessage);\n```", "```ts\ninterface IResponseString {\n    responseText: IFailureMessageString;\n}\n\ninterface IFailureMessageString {\n    failure: string;\n    errorMessage: string;\n}\n```", "```ts\ndeclare module ErrorHelper {\n    function containsErrors(response: IResponse);\n    function containsErrors(response: IResponseString);\n    function trace(message);\n}\n```", "```ts\ndeclare module ErrorHelper {\n    function containsErrors(response: IResponse | IResponseString);\n    function trace(message: string);\n}\n```", "```ts\ndeclare module ErrorHelper {\n    function containsErrors(response: IResponse | IResponseString);\n    function trace(message: string | IResponse | IResponseString);\n}\n```", "```ts\ndeclare module MergedModule {\n    function functionA();\n}\n```", "```ts\ndeclare module MergedModule {\n    function functionB();\n}\n```", "```ts\ndeclare module MergedModule {\n    function functionA();\n    function functionB();\n}\n```", "```ts\nMergedModule.functionA();\nMergedModule.functionB();\n```", "```ts\ntrace(\"trace a string\");\ntrace(true);\ntrace(1);\ntrace({ id: 1, name: \"test\" });\n```", "```ts\ndeclare function trace(arg: string | number | boolean );\ndeclare function trace(arg: { id: number; name: string });\n```", "```ts\nFirstNamespace.SecondNamespace.ThirdNamespace.log(\"test\");\n```", "```ts\ndeclare module FirstNamespace {\n    module SecondNamespace {\n        module ThirdNamespace {\n            function log(msg: string);\n        }\n    }\n}\n```", "```ts\nvar myClass = new MyClass();\n```", "```ts\ndeclare class MyClass {\n}\n```", "```ts\nvar myNestedClass = new OuterName.InnerName.NestedClass();\n```", "```ts\ndeclare module OuterName {\n    module InnerName {\n        class NestedClass {}\n    }\n}\n```", "```ts\nvar myClass = new MyClass();\nvar myClass2 = new MyClass(1, \"test\");\n```", "```ts\ndeclare class MyClass {\n    constructor(id: number, name: string);\n    constructor();\n}\n```", "```ts\nvar classWithProperty = new ClassWithProperty();\nclassWithProperty.id = 1;\n```", "```ts\ndeclare class ClassWithProperty {\n    id: number;\n}\n```", "```ts\nvar classWithFunction = new ClassWithFunction();\nclassWithFunction.functionToRun();\n```", "```ts\ndeclare class ClassWithFunction {\n    functionToRun(): void;\n}\n```", "```ts\nStaticClass.staticId = 1;\nStaticClass.staticFunction();\n```", "```ts\ndeclare class StaticClass {\n    static staticId: number;\n    static staticFunction();\n}\n```", "```ts\nglobalLogError(\"test\");\n```", "```ts\ndeclare function globalLogError(msg: string);\n```", "```ts\ndescribe(\"test\", function () {\n    console.log(\"inside the test function\");\n});\n```", "```ts\ndeclare function describe(name: string, functionDef: () => void);\n```", "```ts\nvar classWithOpt  = new ClassWithOptionals();\nvar classWithOpt1 = new ClassWithOptionals({ id: 1 });\nvar classWithOpt2 = new ClassWithOptionals({ name: \"first\" });\nvar classWithOpt3 = new ClassWithOptionals({ id: 2, name: \"second\" });\n```", "```ts\ninterface IOptionalProperties {\n    id?: number;\n    name?: string;\n}\n\ndeclare class ClassWithOptionals {\n    constructor(options?: IOptionalProperties);\n}\n```", "```ts\nfnWithProperty(1);\nfnWithProperty.name = \"name\";\n```", "```ts\ndeclare function fnWithProperty(id: number);\ndeclare module fnWithProperty {\n    var name: string;\n}\n```"]