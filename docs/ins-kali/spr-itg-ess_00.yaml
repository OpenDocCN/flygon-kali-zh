- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'Software has been an integral part of enterprises and a key contributor to
    their growth. Be it analytics, user experience, social marketing, decision support
    systems, or any other functional domain, software has been used to aid smooth
    and efficient functioning. Enterprises start small and grow over a period of time,
    and so does their software dependency. Enterprise applications are developed over
    a period of time. The following aspects pose certain challenges while dealing
    with enterprise software:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件一直是企业的重要组成部分，也是它们增长的关键因素。无论是分析、用户体验、社交营销、决策支持系统还是其他功能领域，软件都被用来帮助平稳高效地运行。企业从小开始，随着时间的推移不断增长，他们对软件的依赖也是如此。企业应用是经过一段时间开发的。在处理企业软件时，以下方面会带来一定的挑战：
- en: They are distributed across a set of domains, for example, payroll, inventory,
    reporting, and social integration.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们分布在一组领域中，例如工资单、库存、报告和社交整合。
- en: Each of these modules might have been developed independent of each other and
    may be on different platforms, for example, employee self-portal in J2EE stack,
    legacy records management on mainframes, CRM system using Salesforce, with some
    real-time application in their proprietary implementation.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些模块中的每一个可能都是独立开发的，可能在不同的平台上，例如，J2EE堆栈中的员工自助门户，主机上的遗留记录管理，使用Salesforce的CRM系统，以及他们专有实现中的一些实时应用。
- en: These modules need to interact with each other and with external systems as
    well. They may have to consume data from external sources through SOAP services
    or shared files, or they themselves have to share data though one of many data-sharing
    techniques.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些模块需要相互交互，也需要与外部系统进行交互。它们可能需要通过SOAP服务或共享文件从外部来源消费数据，或者它们自己必须通过许多数据共享技术之一共享数据。
- en: As software grows old, we need to introduce new platforms and replace existing
    modules to alleviate the growing maintenance cost. A rip and replace strategy
    would not work; rather, this should be done in a homogenous way without disturbing
    the sanity of existing modules during the transitions.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着软件的老化，我们需要引入新的平台并替换现有的模块，以减轻不断增长的维护成本。采取一种破坏性的替换策略是行不通的；相反，在过渡期间应该以一种同质化的方式进行，而不会破坏现有模块的完整性。
- en: Integration of these modules either inside organizations or with external partners
    is inherently complex, requiring integration of heterogeneous endpoints. This
    is the kind of scenario that Enterprise Application Integration tries to address.
    **Enterprise Integration Patterns** (**EIP**) is a collection of standard enterprise
    challenges and how can they be handled. Spring Integration is one of the implementations
    of the EIP that provides many off-the-shelf components recommended by EIP.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块的整合，无论是在组织内部还是与外部合作伙伴的整合，都是固有复杂的，需要整合异构端点。这就是企业应用集成试图解决的情景。**企业集成模式**（**EIP**）是一套标准企业挑战和如何处理它们的集合。Spring集成是EIP的实现之一，提供了许多EIP推荐的现成组件。
- en: How enterprise integration challenges can be solved
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业集成挑战如何解决
- en: 'Many approaches have been tried to make the integration simple without compromising
    on vital aspects of enterprise, such as security, transaction, availability, reliability,
    and so on. A few of the prominent methodologies used over time are **Java Connector
    Architecture** (**JCA**), RMI, RPC, and CORBA for platform-agnostic integration,
    message brokers with system adapter, and many more. Under the hood, they try to
    solve integration issues through one of the following techniques:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 多种方法已经尝试过，以使集成变得简单，同时又不会牺牲企业的重要方面，如安全性、事务、可用性、可靠性等。多年来使用的一些著名方法包括**Java连接器架构**（**JCA**）、RMI、RPC和CORBA用于平台无关的集成，带有系统适配器的消息代理，以及许多其他方法。在幕后，它们试图通过以下技术之一解决集成问题：
- en: '**Shared File**: This is the simplest approach. Systems can write data in a
    predefined format to a file, which can be read by other endpoints. An adapter
    might be needed to convert a format between two different endpoints. Let''s consider
    an example, a daily report used to be generated in a CSV file. Over time, the
    organization established a web presence and reports need to be pushed online now.
    How can this be achieved? The simplest way is to dump it in files that will be
    read by an adapter and fed into the CMS system. A filesystem is simple but not
    the best solution; it is not transactional. What if a particular file is corrupt,
    or what if at poll interval files are not available due to network failure? This
    necessitates the introduction of a complex system that has a retry mechanism,
    filter capabilities, and many more nonfunctional aspects such as secure access,
    archival, and so on.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享文件**：这是最简单的方法。系统可以以预定义格式将数据写入文件，其他端点可以读取该文件。可能需要一个适配器在两个不同的端点之间转换格式。让我们考虑一个例子，一个每日报告过去是以CSV文件生成的。随着时间的推移，组织建立了网站，并且现在需要将报告推送到网上。如何实现这一点？最简单的方法是将其转储到文件中，由适配器读取并输入到CMS系统中。文件系统是简单但不是最佳解决方案；它不是事务性的。如果特定文件损坏了，或者在轮询间隔内由于网络故障导致文件不可用，怎么办？这就需要引入一个具有重试机制、过滤功能以及许多其他非功能方面（如安全访问、存档等）的复杂系统。'
- en: '**Shared database**: This addresses a few of the challenges that are addressed
    by the filesystem, such as transactional behavior, role-based access, performance
    tuning, distributed support, and so on. The common mechanism is a set of join
    tables—one application writes data in a schema that is understood by others. On
    the flip side, this introduces tight coupling; if there is a change in schema,
    both the systems need to be updated accordingly. Evolving applications will become
    a challenge, as they will have to factor in the external system limitations. The
    integration effort might itself start with lot of hiccups, for example, compatibility
    issues between the SQL provided by database vendors of the application, data format,
    and types in their table. For example, if one system stores only the date while
    the other stores the date with time stamp, depending on need, at least one will
    have to change format.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享数据库**：这解决了一些由文件系统解决的挑战，如事务行为、基于角色的访问、性能调优、分布式支持等。共同的机制是一组连接表——一个应用程序在其他应用程序理解的模式中写入数据。另一方面，这引入了紧密耦合；如果模式发生变化，两个系统都需要相应地进行更新。随着应用程序的发展，它们将面临挑战，因为它们将不得不考虑外部系统的限制。集成工作本身可能会出现很多问题，例如，应用程序的数据库供应商之间的兼容性问题、数据格式和表中的类型。例如，如果一个系统只存储日期，而另一个系统存储带有时间戳的日期，根据需要，至少一个系统将不得不更改格式。'
- en: '**Remote procedure calls**: This mechanism introduces a paradigm where each
    system can offer services by publishing the contract. These paradigms can be a
    method, parameters, result, and error. For example, an EJB service or a SOAP service
    can be exposed for providing raw data for a reporting module that renders it in
    multiple formats. The most limiting aspect is synchronous behavior, where systems
    have to wait for the result. There are other challenges such as serialization
    of data, network latency, performance issues of a module, which can bring down
    the whole application, and so on. From a security aspect, exposing the method
    name and parameter invites hackers to exercise their creativity.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程过程调用**：这种机制引入了一个范式，每个系统都可以通过发布合同来提供服务。这些范式可以是方法、参数、结果和错误。例如，可以公开EJB服务或SOAP服务，为报告模块提供原始数据，以便以多种格式呈现。最限制的方面是同步行为，系统必须等待结果。还有其他挑战，如数据序列化、网络延迟、模块的性能问题，这可能会导致整个应用程序崩溃等。从安全的角度来看，公开方法名称和参数会引诱黑客发挥他们的创造力。'
- en: '**Messaging**: This introduces the asynchronous model in which two heterogeneous
    modules can interact through data over a predefined connection. The greatest advantage
    is decoupling—none of the systems are dependent on the availability of the other
    and they can participate or withdraw from integration without impacting other
    components. JMS is an example of message-based integration. Spring Integration
    is based on this paradigm where multiple endpoints connect on to a channel, produce
    or consume messages, and perform further processing based on information in a
    message. We will deal with channel, endpoints, message payload, and other concepts
    in the upcoming chapters.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息传递**：这引入了异步模型，两个异构模块可以通过预定义的连接进行数据交互。最大的优势是解耦，系统不依赖于其他系统的可用性，它们可以参与或退出集成而不影响其他组件。JMS就是基于消息的集成的一个例子。Spring
    Integration就是基于这种范式，多个端点连接到一个通道，产生或消费消息，并根据消息中的信息进行进一步处理。我们将在接下来的章节中讨论通道、端点、消息负载和其他概念。'
- en: Even if we use one of the preceding techniques, enterprise systems are way outward
    from each other and all of them might not be working all the time. This necessitated
    the use of middleware that can orchestrate reliable communication between these
    disparate endpoints, typically called an **Enterprise Service Bus** (**ESB**).
    In layman's terms, ESB can be defined as the middle man who enables communication
    to and fro between heterogeneous interfaces.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们使用了前述的技术之一，企业系统之间的距离仍然很遥远，并且它们可能并非始终正常工作。这就需要使用中间件来协调这些不同端点之间可靠的通信，通常称为企业服务总线（ESB）。通俗地讲，ESB可以被定义为一个中间人，它使异构接口之间的通信来回进行。
- en: Who are the players?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁是参与者？
- en: As we have been discussing, the problem of enterprise integration is complex
    and many vendors have tried to address it in their own propitiatory ESB framework—earlier
    it used to be dominated by commercial vendors such as Tibco, Vitria, IBM MQSeries,
    Oracle SOA Suite, Microsoft BizTalk, and so on. Over time, the need for open source
    frameworks became evident as smaller organizations grew. Their integration needs
    were limited and were incapable of investing upfront with any of these biggies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，企业集成的问题是复杂的，许多供应商都试图用自己的专有ESB框架来解决这个问题——以前它主要由商业供应商主导，如Tibco、Vitria、IBM
    MQSeries、Oracle SOA Suite、Microsoft BizTalk等。随着时间的推移，开源框架的需求变得明显，因为规模较小的组织增长起来。它们的集成需求有限，无法事先投资于这些大公司之一。
- en: 'Some of the prominent open source integration frameworks, apart from Spring
    Integration, are Camel, Service Mix, Mule ESB, Open ESB, and so on. A comprehensive
    comparison of these frameworks is beyond the scope of this book but a small summary
    of two other major open source frameworks, has been provided here for the sake
    of emphasizing Spring Integration simplicity:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Spring Integration之外，一些著名的开源集成框架还包括Camel、Service Mix、Mule ESB、Open ESB等。这些框架的全面比较超出了本书的范围，但为了强调Spring
    Integration的简单性，这里提供了另外两个主要开源框架的简要总结：
- en: '**Mule ESB**: It is a standard server, solutions are developed and deployed
    inside them. Mule is one of the most prominent and stable solutions on the market.
    The point to be observed here is that, it''s a container that holds the application.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mule ESB**：它是一个标准的服务器，解决方案是在其内部开发和部署的。Mule是市场上最著名和稳定的解决方案之一。需要注意的是，它是一个容器，用于承载应用程序。'
- en: '**Service Mix (SM)**: Apache Service Mix is built over JAVA legacy JBI (Java
    Business Integration). Service Mix tries to solve almost all aspects of enterprise
    integration by unifying the features and functionality of ActiveMQ, Camel, CXF,
    ODE, and Karaf. It provides a complete, enterprise-ready ESB, exclusively powered
    by OSGi. Since it tries to address a lot of modules, it is pretty bulky compared
    to Spring Integration.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Service Mix (SM)**：Apache Service Mix是建立在JAVA遗留JBI（Java Business Integration）之上的。Service
    Mix试图通过统一ActiveMQ、Camel、CXF、ODE和Karaf的功能和特性来解决几乎所有企业集成的方面。它提供了一个完整的、企业就绪的ESB，完全由OSGi驱动。由于它试图解决许多模块，与Spring
    Integration相比，它相当庞大。'
- en: Why Spring Integration?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Spring Integration？
- en: Spring Integration is an open source effort to address integration challenges;
    it is based on the Spring Framework, which is the most widely used Java-based
    framework in organizations. It introduces the simple POJO-based programming model
    to support standard integration patterns.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration是一个解决集成挑战的开源努力；它基于Spring Framework，这是组织中最广泛使用的基于Java的框架。它引入了基于简单POJO的编程模型，以支持标准的集成模式。
- en: It's lightweight; all it needs is couple of jars for which Maven targets are
    readily available. A quick comparison shows that the Service Mix download is around
    55 MB while Spring Integration is just 14 MB in size.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它很轻量级；它只需要几个Maven目标的jar包就可以了。快速比较显示，Service Mix的下载大小约为55MB，而Spring Integration只有14MB。
- en: Spring Integration is just a set of standard Java libraries; the solution gets
    deployed in the application instead of that application getting deployed in some
    containers, as in the case of SM and Mule.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Integration只是一组标准的Java库；解决方案部署在应用程序中，而不是像SM和Mule那样将应用程序部署在某些容器中。
- en: For enterprises that are already using Java and Spring, it eases the integration
    effort as it follows the same idioms and patterns of the Spring Framework.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已经使用Java和Spring的企业来说，它可以简化集成工作，因为它遵循Spring Framework的相同习惯用法和模式。
- en: What this book covers
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](part0018_split_000.html#page "Chapter 1. Getting Started"), *Getting
    Started*, explains how to set up the Eclipse IDE, a "Hello World" program, and
    a brief introduction of how Spring ROO can ease the configuration aspects even
    further. This will help overcome configuration nightmares and warm up developers
    to a hands-on experience.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](part0018_split_000.html#page "第1章。入门")，“入门”，解释了如何设置Eclipse IDE，一个“Hello
    World”程序，以及如何Spring ROO可以进一步简化配置方面的简要介绍。这将有助于克服配置噩梦，并让开发人员获得实践经验。'
- en: '[Chapter 2](part0023_split_000.html#page "Chapter 2. Message Ingestion"), *Message
    Ingestion*, introduces channels through which messages can be read and processed.
    It describes the point-to-point and pub-sub models, which one is best suited for
    a given scenario, how errors can be handled in a decoupled manner on a channel,
    and finally how in-memory channels can be backed up with persistence for failover
    and recovery solutions.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](part0023_split_000.html#page "第2章。消息摄入")，“消息摄入”，介绍了通过通道读取和处理消息。它描述了点对点和发布-订阅模型，哪种模型最适合特定场景，如何在通道上以解耦的方式处理错误，最后介绍了如何使用内存通道备份持久性以实现故障转移和恢复解决方案。'
- en: '[Chapter 3](part0031_split_000.html#page "Chapter 3. Message Processing"),
    *Message Processing*, explains how to define components that can apply business
    logic on messages, introduces decoupled logging that can used for auditing, and
    discusses adding transactional behavior.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](part0031_split_000.html#page "第3章。消息处理")，“消息处理”，解释了如何定义可以在消息上应用业务逻辑的组件，介绍了可用于审计的解耦日志记录，并讨论了添加事务行为。'
- en: '[Chapter 4](part0037_split_000.html#page "Chapter 4. Message Transformers"),
    *Message Transformers*, deals with processing message formats, its conversion
    to a homogenous format, and how annotations can help keep the configurations clean.
    Messages can be introduced in heterogeneous formats such as XML, JSON, and so
    on that need to be converted to a format understood by the system.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](part0037_split_000.html#page "第4章。消息转换器")，“消息转换器”，涉及处理消息格式，将其转换为同质格式，以及如何使用注解帮助保持配置的清晰。消息可以以XML、JSON等异构格式引入，需要转换为系统理解的格式。'
- en: '[Chapter 5](part0044_split_000.html#page "Chapter 5. Message Flow"), *Message
    Flow*, will introduce flow aspects to messages such as filtering messages that
    do not comply to validation rules, routing them to an error branch, splitting
    messages, and redirecting them to components appropriate for their processing—waiting
    for incomplete payloads, aggregating partial messages, and finally the chaining
    of business processing handlers.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](part0044_split_000.html#page "第5章。消息流")，“消息流”，将介绍消息的流动方面，如过滤不符合验证规则的消息，将它们路由到错误分支，拆分消息，并将其重定向到适合其处理的组件——等待不完整负载，聚合部分消息，最后是业务处理处理程序的链接。'
- en: '[Chapter 6](part0052_split_000.html#page "Chapter 6. Integration with External
    Systems"), *Integration with External Systems*, will give a hands-on overview
    of integration points. Integration with external systems is the most interesting
    and powerful aspect of Spring Integration—interaction with external systems is
    a matter of a few lines of configuration. Spring Integration has introduced adapters,
    gateways, and other components that make it a breeze to interact with filesystems,
    SQL, NoSQL persistence store, HTTP services, and other widely used external entities
    such as different servers, social media, and so on.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0052_split_000.html#page "第6章。与外部系统集成")，“与外部系统集成”，将对集成点进行实际概述。与外部系统的集成是Spring
    Integration最有趣和强大的方面——与外部系统的交互只需几行配置。Spring Integration引入了适配器、网关和其他组件，使与文件系统、SQL、NoSQL持久性存储、HTTP服务等广泛使用的外部实体（如不同的服务器、社交媒体等）进行交互变得轻而易举。'
- en: '[Chapter 7](part0061_split_000.html#page "Chapter 7. Integration with Spring
    Batch"), *Integration with Spring Batch*, will introduce how to use Spring Integration
    and batch module for scheduling, triggering, and monitoring batch jobs.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](part0061_split_000.html#page "第7章. 与Spring Batch集成")，“与Spring Batch集成”，将介绍如何使用Spring
    Integration和批处理模块进行批处理作业的调度、触发和监控。'
- en: '[Chapter 8](part0065_split_000.html#page "Chapter 8. Testing Support"), *Testing
    Support*, will explain how to leverage the readily available mocks for different
    components, what to test, and how much to test.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](part0065_split_000.html#page "第8章. 测试支持")，“测试支持”，将解释如何利用不同组件的现成模拟，要测试什么以及要测试多少。'
- en: '[Chapter 9](part0072_split_000.html#page "Chapter 9. Monitoring, Management,
    and Scaling Up"), *Monitoring, Management, and Scaling Up*, will cover using Spring
    Integration configuration to leverage JMX to get performance statistics of different
    configured components in the system. We will also peek into ways to scale up Spring
    Integration components.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](part0072_split_000.html#page "第9章. 监控、管理和扩展")，“监控、管理和扩展”，将介绍如何使用Spring
    Integration配置来利用JMX获取系统中不同配置组件的性能统计。我们还将探讨如何扩展Spring Integration组件。'
- en: '[Chapter 10](part0075_split_000.html#page "Chapter 10. An End-to-End Example"),
    *An End-to-End Example*, has an end-to-end hands-on example that will help you
    to recollect concepts introduced in different chapters and reassert their understanding.
    Code will be pushed to a social repository as GitHub, but this chapter will give
    users enough instructions to use it and run it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](part0075_split_000.html#page "第10章. 一个端到端的示例")，“一个端到端的示例”，将提供一个端到端的实际示例，帮助您回顾不同章节介绍的概念，并重新确认对其的理解。代码将被推送到GitHub等社交代码库，但本章将为用户提供足够的指导以便使用和运行它。'
- en: What you need for this book
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为本书准备的内容
- en: You need a Java-based IDE, and Spring STS is recommended. JDK 1.6 and above
    is required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个基于Java的IDE，推荐使用Spring STS。需要JDK 1.6及以上版本。
- en: Who this book is for
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的受众
- en: This book is for developers who are already familiar with basic Java and Spring
    concepts. Concepts of Enterprise Integration Patterns would be helpful but not
    mandatory. The book has been presented in a hands-on manner; an end-to-end working
    example has been picked, implemented, and explained throughout the chapters. This
    book would serve as a strong companion for new developers trying out their hand
    on integration aspects, and as a hands-on guide on how to use Spring Integration
    components for developers already familiar with these challenges and looking for
    quick samples.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于已经熟悉基本Java和Spring概念的开发人员。了解企业集成模式的概念会有所帮助，但不是强制的。本书以实际操作的方式呈现；一个端到端的工作示例已经被选择、实施和贯穿各章进行了解释。本书将成为新开发人员在集成方面尝试的强有力伴侣，并且对于已经熟悉这些挑战并寻求快速示例的开发人员来说，本书将成为如何使用Spring
    Integration组件的实际指南。
- en: Conventions
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会发现一些文本样式，用于区分不同类型的信息。以下是一些这些样式的示例，以及它们的含义解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Create
    a Spring Integration project by navigating to **File** | **Spring Project**, as
    shown in the following screenshot:".'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名显示如下：“通过导航到**文件** | **Spring项目**，创建一个Spring
    Integration项目，如下截图所示：”。
- en: 'A block of code is set as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关的行或项目将以粗体显示：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "clicking the **Next** button moves you to the next screen".'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。例如，屏幕上看到的单词、菜单或对话框中的单词等会以这样的方式出现在文本中：“单击**下一步**按钮将您移动到下一个屏幕”。'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会以这样的方式出现在一个框中。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提示和技巧会以这样的方式出现。
