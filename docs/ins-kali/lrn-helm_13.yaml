- en: ASSESSMENTS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: 'Chapter 1: Understanding Kubernetes and Helm'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：理解Kubernetes和Helm
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提出的一些问题的答案：
- en: An application is `monolithic` if it contains all necessary logic and features
    in a single application. Monolithic applications can be broken up into multiple
    different applications, referred to as **microservices**.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个应用程序在一个单一应用程序中包含了所有必要的逻辑和功能，那么它就是`单体`的。单体应用程序可以分解成多个不同的应用程序，称为**微服务**。
- en: Kubernetes is a container orchestration tool. To give a few examples, it solves
    problems around workload scheduling, availability, and scalability.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes是一个容器编排工具。举几个例子，它解决了关于工作负载调度、可用性和可伸缩性的问题。
- en: '`create`, `describe`, `edit`, `delete`, and `apply`'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`创建`、`描述`、`编辑`、`删除`和`应用`'
- en: There are many different types of resources a user must understand in order
    to deploy an application. It is also challenging to maintain synchronized local
    and live states, manage application life cycle, and maintain boilerplate YAML
    resource files.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户必须了解许多不同类型的资源才能部署应用程序。同时，保持本地和实时状态同步、管理应用程序生命周期以及维护样板YAML资源文件也是具有挑战性的。
- en: Helm includes four life cycle commands that provide users with the ability to
    easily manage Kubernetes applications. Users apply these commands to interact
    with Helm charts, which is a packaging of the Kubernetes resources required to
    deploy an application. Helm abstracts the complexity of Kubernetes resources and
    provides a history of revisions for a given application, allowing applications
    to be rolled back to a previous snapshot. It also allows YAML resources to be
    dynamically generated and simplifies the synchronization between local and live
    state. Finally, Helm applies Kubernetes resources in a predeterministic order
    and allows automated life cycle hooks, which can be used to perform various automated
    tasks.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm包括四个生命周期命令，可以让用户轻松管理Kubernetes应用程序。用户可以应用这些命令与Helm图表进行交互，Helm图表是部署应用程序所需的Kubernetes资源的打包。Helm抽象了Kubernetes资源的复杂性，并为给定应用程序提供了修订历史，允许将应用程序回滚到先前的快照。它还允许动态生成YAML资源，并简化了本地和实时状态之间的同步。最后，Helm按照预定的顺序应用Kubernetes资源，并允许自动化的生命周期钩子，可用于执行各种自动化任务。
- en: You can use the `helm rollback` command. Helm assigns a revision to each application
    snapshot. A new revision is assigned when one or more areas of an application
    are modified from their previously applied state.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`helm rollback`命令。Helm为每个应用程序快照分配一个修订版本。当应用程序的一个或多个区域从其先前应用的状态进行修改时，将分配一个新的修订版本。
- en: '`Install`, `Upgrade`, `Rollback`, and `Uninstall.`'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`安装`、`升级`、`回滚`和`卸载`。'
- en: 'Chapter 2: Preparing a Kubernetes and Helm Environment'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：准备Kubernetes和Helm环境
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提出的一些问题的答案：
- en: Windows and Mac users can install Helm using the Chocolatey or Homebrew package
    managers, respectively. All users (Windows, Mac, and Linux) can also install Helm
    from its GitHub releases page at [https://github.com/helm/helm/releases](https://github.com/helm/helm/releases).
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows和Mac用户可以使用Chocolatey或Homebrew软件包管理器安装Helm。所有用户（Windows、Mac和Linux）也可以从Helm的GitHub发布页面[https://github.com/helm/helm/releases](https://github.com/helm/helm/releases)安装Helm。
- en: Helm authenticates using the local `kubeconfig` file.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm使用本地的`kubeconfig`文件进行身份验证。
- en: Kubernetes roles provide authorization. An administrator can manage these privileges
    by creating a `RoleBinding`, which binds a role to a user or group.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes角色提供授权。管理员可以通过创建`RoleBinding`来管理这些特权，将角色绑定到用户或组。
- en: The `helm repo add` command is used to locally configure a Helm chart repository.
    It is a requirement to install the charts contained within that repository.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: helm repo add命令用于本地配置Helm图表存储库。这是安装存储库中包含的图表的要求。
- en: The three `XDG` environment variables used by Helm are `XDG_CACHE_HOME`, `XDG_CONFIG_HOME`,
    and `XDG_DATA_HOME`. `XDG_CACHE_HOME` is used to assign the location for cached
    files (which includes downloaded charts from upstream chart repositories). `XDG_CONFIG_HOME`
    is used to set the location for Helm configuration (which includes repository
    information saved by `helm repo add`). `XDG_DATA_HOME` is used to save plugin
    information, added using the `helm plugin install` command.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm使用的三个XDG环境变量是XDG_CACHE_HOME、XDG_CONFIG_HOME和XDG_DATA_HOME。XDG_CACHE_HOME用于指定缓存文件的位置（包括从上游图表存储库下载的图表）。XDG_CONFIG_HOME用于设置Helm配置的位置（包括helm
    repo add保存的存储库信息）。XDG_DATA_HOME用于保存使用helm plugin install命令添加的插件信息。
- en: '`Minikube` allows users to easily create a single-node Kubernetes cluster on
    their local machine. `Minikube` automatically configures the `Kubeconfig` for
    authentication and assigns users with `cluster-admin` to perform any desired action.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minikube允许用户在他们的本地机器上轻松创建单节点Kubernetes集群。Minikube会自动为认证配置Kubeconfig，并分配给用户cluster-admin权限来执行任何所需的操作。
- en: 'Chapter 3: Installing Your First Helm Chart'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：安装您的第一个Helm图表
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章提出的问题的一些答案：
- en: The Helm Hub is a centralized location for upstream chart repositories. Users
    can interact with it by using the `helm search hub` command, or by visiting the
    Helm Hub website at [https://hub.helm.sh/](https://hub.helm.sh/).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm Hub是上游图表存储库的集中位置。用户可以使用helm search hub命令与其交互，或者访问Helm Hub网站[https://hub.helm.sh/](https://hub.helm.sh/)。
- en: The `helm get` commands are used to get details of an installed Helm release
    such as the applied values and generated Kubernetes resources. The `helm show`
    commands are used to show general information of a Helm chart such as the list
    of supported values and the chart `README`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: helm get命令用于获取已安装的Helm发布的详细信息，例如应用的值和生成的Kubernetes资源。helm show命令用于显示Helm图表的一般信息，例如支持的值列表和图表README。
- en: The `--set` flag is used to provide inline values and is useful for providing
    simple values or values that contain secrets that should not be saved to a file.
    The `--values` flag is used to provide values by using a values file and is useful
    for providing large amounts of values at a time and saving applied values to a
    source control repository.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: --set标志用于提供内联值，对于提供简单值或包含不应保存到文件的机密的值很有用。--values标志用于通过使用值文件提供值，对于一次提供大量值并将应用的值保存到源代码控制存储库很有用。
- en: The `helm history` command can be used to list the revisions for a release.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: helm history命令可用于列出发布的修订版本。
- en: If you upgrade a release without providing any values, the `--reuse-values`
    flag is applied by default, which will reuse each of the values applied in the
    previous release. If at least one value is provided, the `--reset-values` flag
    is applied instead, which resets each value to their defaults and then merges
    the provided values.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果升级发布而不提供任何值，则默认应用--reuse-values标志，该标志将重用先前发布中应用的每个值。如果提供了至少一个值，则将应用--reset-values标志，该标志将将每个值重置为其默认值，然后合并提供的值。
- en: The `helm history` command would reveal six releases, with the sixth release
    indicating that the application was rolled back to revision 3.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: helm history命令将显示六个发布版本，第六个发布版本表示应用程序已回滚到第3个修订版本。
- en: The `helm list` command can be used to view all of the releases deployed to
    a namespace.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: helm list命令可用于查看部署到命名空间的所有发布。
- en: The `helm search repo` command can be used to list each of the repository’s
    charts.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm search repo`命令可用于列出存储库的每个图表。'
- en: 'Chapter 4: Understanding Helm Charts'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：理解Helm图表
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提出的一些问题的答案：
- en: YAML is the format most commonly used, though JSON can be used alternatively.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML是最常用的格式，尽管也可以使用JSON。
- en: The three required fields are `apiVersion`, `name`, and `version`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三个必填字段是`apiVersion`，`name`和`version`。
- en: Values from a chart dependency can be referenced or overridden by placing desired
    dependency values in a map whose name is equal to the name of the dependency chart.
    Values can also be imported using the `import-values` setting, which can be used
    to allow dependency values to be referenced using a different name.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过在名称等于依赖图表的名称的映射中放置所需的依赖值来引用或覆盖图表依赖的值。还可以使用`import-values`设置导入值，该设置可用于允许使用不同名称引用依赖值。
- en: You can create an upgrade hook to ensure that a data snapshot is taken before
    running the `helm upgrade` command.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建升级钩子以确保在运行`helm upgrade`命令之前进行数据快照。
- en: You can provide the `README.md` file to provide documentation for your chart.
    You can also create the `templates/NOTES.txt` file, which can dynamically generate
    release notes upon installation. Finally, the `LICENSE` file can be used to provide
    legal information.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以提供`README.md`文件来为您的图表提供文档。您还可以创建`templates/NOTES.txt`文件，该文件可以在安装时动态生成发布说明。最后，`LICENSE`文件可用于提供法律信息。
- en: The `range` action allows chart developers to generate repeating YAML portions.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`range`操作允许图表开发人员生成重复的YAML部分。'
- en: The `Chart.yaml` file is used to define metadata about a Helm chart. This file
    is also called the Chart Definition. The `Chart.lock` file is used to save chart
    dependency state, providing metadata about the exact dependency versions used
    so the `charts/` folder can be recreated.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`文件用于定义有关Helm图表的元数据。此文件也称为图表定义。`Chart.lock`文件用于保存图表依赖状态，提供有关所使用的确切依赖版本的元数据，以便可以重新创建`charts/`文件夹。'
- en: The `helm.sh/hook` annotation is used to define a hook resource.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm.sh/hook`注释用于定义钩子资源。'
- en: Functions and pipelines allow chart developers to perform complex processing
    and formatting of data within a template. Common functions include `date`, `include`,
    `indent`, `quote`, and `toYaml`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数和管道允许图表开发人员在模板中执行复杂的处理和数据格式化。常见函数包括`date`，`include`，`indent`，`quote`和`toYaml`。
- en: 'Chapter 5: Building Your First Helm Chart'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：创建您的第一个Helm图表
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提出的一些问题的答案：
- en: The `helm create` command can be used to scaffold a new Helm chart.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm create`命令可用于创建新的Helm图表。'
- en: Declaring the Redis dependency prevented you from needing to create Redis templates
    in your Helm chart. It allowed you to deploy Redis without needing to know the
    proper Kubernetes resource configuration required.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明Redis依赖性使您无需在Helm图表中创建Redis模板。它允许您部署Redis而无需知道所需的正确Kubernetes资源配置。
- en: The `helm.sh/hook-weight` annotation can be used to set the execution order.
    Hooks are executed in ascending order by weight.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm.sh/hook-weight`注释可用于设置执行顺序。按权重升序执行钩子。'
- en: The `fail` function is used to immediately fail rendering and can be used to
    restrict user input against a set of valid settings. The `required` function is
    used to declare a required value, in which chart templating will fail if that
    value is not provided.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fail`函数用于立即失败渲染，并可用于限制用户输入以符合一组有效设置。`required`函数用于声明必需值，如果未提供该值，则图表模板将失败。'
- en: To publish a Helm chart to a GitHub Pages chart repository, you must first use
    the `helm package` command to package your Helm chart in TGZ format. Next, you
    should generate the repository’s `index.yaml` file with the `helm repo index`
    command. Finally, the repository contents should be pushed to GitHub.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将Helm图表发布到GitHub Pages图表存储库，必须首先使用`helm package`命令将Helm图表打包为TGZ格式。接下来，应使用`helm
    repo index`命令生成存储库的`index.yaml`文件。最后，存储库内容应推送到GitHub。
- en: The `index.yaml` file contains metadata about each of the charts included in
    a chart repository.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.yaml`文件包含有关图表存储库中包含的每个图表的元数据。'
- en: 'Chapter 6: Testing Helm Charts'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：测试Helm图表
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章提出的一些问题的答案：
- en: The `helm template` command is used to generate your Helm templates locally.
    The `helm lint` command is used to lint for errors in your chart’s structure and
    chart definition file. It also attempts to find errors that will result in a failed
    installation.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm template`命令用于在本地生成Helm模板。`helm lint`命令用于检查图表结构和图表定义文件中的错误。它还尝试查找会导致安装失败的错误。'
- en: To validate your chart templates prior to installation, you can run the `helm
    template` command to generate your YAML resources locally to ensure they were
    generated properly. You can also use the `--verify` flag to check with the API
    server that your YAML schemas are correct without installing the resources. The
    `helm install --dry-run` command can also perform this check with the API server
    prior to installation.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装之前验证图表模板，可以运行`helm template`命令在本地生成您的YAML资源，以确保它们被正确生成。您还可以使用`--verify`标志在不安装资源的情况下与API服务器检查您的YAML模式是否正确。`helm
    install --dry-run`命令也可以在安装之前与API服务器执行此检查。
- en: One tool that can be used to lint the style of your YAML resources is the `yamllint`
    tool. It can be used alongside `helm template` to lint your generated resources
    (for example, `helm template my-test test-chart | yamllint -`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可用于检查YAML资源样式的工具之一是`yamllint`工具。它可以与`helm template`一起使用来检查生成的资源（例如，`helm template
    my-test test-chart | yamllint -`）。
- en: 'A chart test is created by creating a chart template with the `helm.sh/hook:
    test` annotation added. Chart tests are typically Pods that execute a script or
    short command. They can be executed by running the `helm test` command.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建图表测试是通过创建一个带有`helm.sh/hook: test`注释的图表模板来实现的。图表测试通常是执行脚本或简短命令的Pod。可以通过运行`helm
    test`命令来执行它们。'
- en: The Chart Testing (**ct**) tool allows Helm chart maintainers to more easily
    test Helm charts in a git monorepo. It performs thorough testing and ensures that
    charts that are modified have had their versions incremented.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chart Testing（**ct**）工具允许Helm图表维护者更轻松地在git monorepo中测试Helm图表。它进行彻底的测试，并确保已修改的图表已增加其版本。
- en: The `ci/` folder is used to test multiple different combinations of Helm values.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ci/`文件夹用于测试多种不同的Helm值组合。'
- en: Adding the `--upgrade` flag will help ensure regressions have not occurred for
    charts that have not had their major version incremented. It will first install
    the older version of the chart and then upgrade to the newer version. Then, it
    will delete the release, install the new version, and attempt an upgrade against
    itself. Testing will take place between each installation/upgrade.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`--upgrade`标志将有助于确保对未增加主要版本的图表未发生回归。它将首先安装图表的旧版本，然后升级到新版本。然后，它将删除发布，安装新版本，并尝试对自身进行升级。测试将在每次安装/升级之间进行。
- en: 'Chapter 7: Automating Helm Processes Using CI/CD and GitOps'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：使用CI/CD和GitOps自动化Helm流程
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章提出的一些问题的答案：
- en: CI is an automated software development process that can be repeated when a
    software change occurs. CD is a set of defined steps written to progress software
    through a release process (commonly referred to as a pipeline).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI是一种自动化的软件开发过程，可以在软件发生变化时重复进行。CD是一组定义的步骤，用于将软件推进到发布过程中（通常称为管道）。
- en: While CI/CD describes the software development and release process, GitOps describes
    the act of storing configuration in Git. An example of this is storing a values
    file in Git, which can be applied to deploy an application to Kubernetes.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然CI/CD描述了软件开发和发布过程，但GitOps描述了在Git中存储配置的行为。一个例子是将值文件存储在Git中，然后应用于将应用程序部署到Kubernetes。
- en: A CI pipeline for creating and releasing Helm charts can lint, install, and
    test the Helm charts. The Chart testing tool can help perform these steps more
    easily, especially when maintaining a chart monorepo. The pipeline should also
    package each Helm chart and deploy the charts to the chart repository. For GitHub
    Pages chart repositories, the `index.yaml` file must be generated, and the contents
    must be pushed to the repository.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于创建和发布Helm图表的CI管道可以对Helm图表进行lint、安装和测试。Chart测试工具可以帮助更轻松地执行这些步骤，特别是在维护图表monorepo时。管道还应该打包每个Helm图表并将图表部署到图表存储库。对于GitHub
    Pages图表存储库，必须生成`index.yaml`文件，并将内容推送到存储库。
- en: CI allows charts to be easily and quickly tested and released. It can also help
    prevent regressions as new features are added.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI允许轻松快速地测试和发布图表。它还可以帮助防止在添加新功能时出现回归。
- en: A CD pipeline would deploy Helm charts to each desired environment, with each
    environment being a different pipeline stage. Smoke testing can be performed by
    using the `helm test` command after each deployment.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CD管道将Helm图表部署到每个所需的环境，每个环境都是不同的管道阶段。每次部署后都可以使用`helm test`命令进行烟雾测试。
- en: A CD pipeline allows users to easily deploy their applications without needing
    to manually invoke the Helm CLI commands. This can help prevent the possibility
    of human error when deploying applications with Helm.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CD管道允许用户轻松部署其应用程序，而无需手动调用Helm CLI命令。这可以帮助防止在使用Helm部署应用程序时出现人为错误的可能性。
- en: To maintain configuration for multiple environments, separate folders can be
    used to separate the values files by environment. To reduce boilerplate, a file
    containing the common values used across each environment can be saved and applied
    to each Helm deployment.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了维护多个环境的配置，可以使用单独的文件夹来按环境分隔值文件。为了减少样板文件，可以保存一个包含每个环境中使用的通用值的文件，并将其应用于每个Helm部署。
- en: 'Chapter 8: Using Helm with the Operator Framework'
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：使用Operator Framework的Helm
- en: 'Here are some answers to the questions presented in this chapter:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章提出的问题的一些答案：
- en: An operator works by leveraging a custom controller and custom resources. When
    a new custom resource is created, the operator will perform the logic implemented
    by the custom controller. Changes to the custom resource also trigger the controller
    logic. Operators are typically implemented to install and manage the life cycle
    of an application.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作员通过利用自定义控制器和自定义资源来工作。当创建新的自定义资源时，操作员将执行自定义控制器实现的逻辑。对自定义资源的更改也会触发控制器逻辑。操作员通常用于安装和管理应用程序的生命周期。
- en: When using the Helm CLI, you must execute the `install`, `upgrade`, `rollback`,
    and `uninstall` commands from the command line. However, when using a Helm-based
    operator, these commands are performed automatically when you `create`, `modify`,
    or `delete` a custom resource. When using a Helm-based operator, you don’t have
    to run any Helm CLI commands locally.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当使用Helm CLI时，您必须从命令行执行`install`、`upgrade`、`rollback`和`uninstall`命令。但是，当使用基于Helm的operator时，当您`create`、`modify`或`delete`自定义资源时，这些命令将自动执行。当使用基于Helm的operator时，您不必在本地运行任何Helm
    CLI命令。
- en: With regard to the application life cycle, the Helm CLI allows users to roll
    back to a previous revision, while the Helm operator does not allow this because
    it does not keep a history of revisions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关于应用程序生命周期，Helm CLI允许用户回滚到先前的修订版本，而Helm operator不允许这样做，因为它不保留修订版本的历史记录。
- en: You could first use the `operator-sdk new` command to scaffold a new Helm operator,
    pointing the command to an existing Helm chart with the `--helm-chart` flag. Next,
    you could build the operator using the `operator-sdk build` command. Finally,
    you could push the operator image to a container registry.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以首先使用`operator-sdk new`命令来创建一个新的Helm operator，将该命令指向现有的Helm图表，并使用`--helm-chart`标志。接下来，您可以使用`operator-sdk
    build`命令构建operator。最后，您可以将operator镜像推送到容器注册表。
- en: Installation is performed by creating a new custom resource. Upgrading is performed
    by modifying the custom resource. Rolling back is performed automatically if an
    upgrade fails, but cannot be explicitly performed. Uninstallation is performed
    by deleting the custom resource.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装是通过创建新的自定义资源来执行的。升级是通过修改自定义资源来执行的。如果升级失败，回滚将自动执行，但不能显式执行。卸载是通过删除自定义资源来执行的。
- en: The `crds/` folder allows **Custom Resource Definitions (CRDs)** to be created
    before the contents in `templates/` are created. It provides an easy way to deploy
    operators that are dependent on CRDs.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`crds/`文件夹允许在创建`templates/`中的内容之前创建**自定义资源定义（CRD）**。它提供了一种轻松的方式来部署依赖于CRD的operator。'
- en: Answers will vary, but an example of these charts has been provided at [https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer](https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer).
    The example creates one chart called **guestbook-operator**, which is used to
    deploy the operator resources (including the CRD), while the other chart is called
    **guestbook-cr** and is used to deploy the custom resource.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 答案会有所不同，但已在[https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer](https://github.com/PacktPublishing/-Learn-Helm/tree/master/ch8-q6-answer)提供了这些图表的示例。该示例创建了一个名为**guestbook-operator**的图表，用于部署operator资源（包括CRD），而另一个图表名为**guestbook-cr**，用于部署自定义资源。
- en: 'Chapter 9: Helm Security Considerations'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：Helm安全考虑
- en: 'Here are some sample answers to the questions presented in this chapter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中提出的一些问题的示例答案：
- en: Data provenance is about determining the origin of data. Data integrity determines
    whether the data you received is the data that you expected.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据溯源是关于确定数据的来源。数据完整性确定您收到的数据是否是您期望的数据。
- en: A user needs to download the accompanying `.asc` file, which contains the digital
    signature.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户需要下载附带的`.asc`文件，其中包含数字签名。
- en: The `helm verify` command can be used to verify locally downloaded charts, while
    the `helm install --verify` command can be used against charts stored in an upstream
    chart repository.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm verify`命令可用于验证本地下载的图表，而`helm install --verify`命令可用于针对存储在上游图表存储库中的图表。'
- en: You can incorporate regular vulnerability scanning. You can also try to avoid
    deploying images that need to be run as root or a subset of root capabilities.
    Finally, you can reference images using a `sha256` value instead of a tag to ensure
    that you are always deploying the expected image.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以整合常规漏洞扫描。您还可以尝试避免部署需要以 root 或 root 权限子集运行的映像。最后，您可以使用 `sha256` 值引用映像，而不是标签，以确保始终部署预期的映像。
- en: Resource limits help prevent an application from being able to exhaust the underlying
    node resources. You can also leverage `LimitRanges` to set the maximum amount
    of resources per Pod or PVC, and you can leverage `ResourceQuotas` to set the
    maximum amount of resources per namespace.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源限制有助于防止应用程序耗尽底层节点资源。您还可以利用 `LimitRanges` 来设置每个 Pod 或 PVC 的最大资源量，并且可以利用 `ResourceQuotas`
    来设置每个命名空间的最大资源量。
- en: Least privilege refers to a user or application being granted only the minimum
    set of permissions that is needed to properly function. To achieve least privilege
    access, you can use Kubernetes `Roles` and `RoleBindings` to create least privilege
    roles and bind those roles to users or groups.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最小权限是指仅授予用户或应用程序所需的最小权限集以正常运行。要实现最小权限访问，您可以使用 Kubernetes 的 `Roles` 和 `RoleBindings`
    来创建最小权限角色，并将这些角色绑定到用户或组。
- en: The `helm repo add` command provides the `--username` and `--password` flags,
    which are used for basic authentication and the `--ca-file`, `--cert-file`, and
    `--key-file` flags, which are used for certificate-based authentication. The `--ca-file`
    flag is also used to verify a chart repository’s certificate authority.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm repo add` 命令提供了 `--username` 和 `--password` 标志，用于基本身份验证，以及 `--ca-file`、`--cert-file`
    和 `--key-file` 标志，用于基于证书的身份验证。`--ca-file` 标志还用于验证图表存储库的证书颁发机构。'
