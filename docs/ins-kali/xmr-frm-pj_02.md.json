["```cs\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        MainPage = new DoToo.MainPage();\n    }\n\n    protected override void OnStart()\n    {\n        // Handle when your app starts\n    }\n\n    // code omitted for brevity\n}\n```", "```cs\nprotected override void OnCreate(Bundle bundle)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n    base.OnCreate(bundle);\n    global::Xamarin.Forms.Forms.Init(this, bundle);\n    LoadApplication(new App());\n}\n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    global::Xamarin.Forms.Forms.Init();\n    LoadApplication(new App());\n    return base.FinishedLaunching(app, options);\n}\n```", "```cs\npublic class TodoItem\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public bool Completed { get; set; }\n    public DateTime Due { get; set; }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing DoToo.Models; \n\nnamespace DoToo.Repositories\n{\n    public interface ITodoItemRepository\n    { \n        event EventHandler<TodoItem> OnItemAdded;\n        event EventHandler<TodoItem> OnItemUpdated;\n\n        Task<List<TodoItem>> GetItems();\n        Task AddItem(TodoItem item);\n        Task UpdateItem(TodoItem item);\n        Task AddOrUpdate(TodoItem item);\n    }\n}\n```", "```cs\nusing DoToo.Models;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\nnamespace DoToo.Repositories\n{\n    public class TodoItemRepository : ITodoItemRepository\n    {\n        public event EventHandler<TodoItem> OnItemAdded;\n        public event EventHandler<TodoItem> OnItemUpdated;\n\n        public async Task<List<TodoItem>> GetItems()\n        {\n        }\n\n        public async Task AddItem(TodoItem item)\n        {\n        }\n\n        public async Task UpdateItem(TodoItem item)\n        {\n        }\n\n        public async Task AddOrUpdate(TodoItem item)\n        {\n            if (item.Id == 0)\n            {\n                await AddItem(item);\n            }\n            else\n            {\n                await UpdateItem(item);\n            }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing SQLite;\n```", "```cs\n[PrimaryKey, AutoIncrement]\npublic int Id { get; set; }\n```", "```cs\nusing DoToo.Models;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing SQLite\n```", "```cs\nprivate SQLiteAsyncConnection connection;\n```", "```cs\nprivate async Task CreateConnection()\n{\n    if (connection != null)\n    {\n        return;\n    }\n\n    var documentPath = Environment.GetFolderPath(\n                       Environment.SpecialFolder.MyDocuments);\n    var databasePath = Path.Combine(documentPath, \"TodoItems.db\"); \n\n    connection = new SQLiteAsyncConnection(databasePath);\n    await connection.CreateTableAsync<TodoItem>();\n\n    if (await connection.Table<TodoItem>().CountAsync() == 0)\n    {\n        await connection.InsertAsync(new TodoItem() { Title = \n        \"Welcome to DoToo\" });\n    }\n} \n```", "```cs\npublic async Task<List<TodoItem>> GetItems()\n{\n    await CreateConnection();\n    return await connection.Table<TodoItem>().ToListAsync();\n}\n\n```", "```cs\npublic async Task AddItem(TodoItem item)\n{\n    await CreateConnection();\n    await connection.InsertAsync(item);\n    OnItemAdded?.Invoke(this, item);\n}\n```", "```cs\npublic async Task UpdateItem(TodoItem item)\n{\n    await CreateConnection();\n    await connection.UpdateAsync(item);\n    OnItemUpdated?.Invoke(this, item);\n}\n```", "```cs\npublic abstract class ViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    public void RaisePropertyChanged(params string[] propertyNames)\n    {\n        foreach (var propertyName in propertyNames)\n        {\n            PropertyChanged?.Invoke(this, new \n            PropertyChangedEventArgs(propertyName));\n        }\n    }\n\n    public INavigation Navigation { get; set; }\n} \n```", "```cs\npublic class MyTestViewModel : ViewModel\n{\n    private string name;\n    public string Name \n    {\n       get { return name; }\n       set { name = value; RaisePropertyChanged(nameof(Name)); }\n    }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Weavers>\n    <PropertyChanged />\n</Weavers>\n```", "```cs\npublic class MyTestViewModel : ViewModel\n{\n    public string Name { get; set; }\n}\n```", "```cs\npublic class MainViewModel : ViewModel\n{\n    private readonly TodoItemRepository repository;\n\n    public MainViewModel(TodoItemRepository repository)\n    {\n        this.repository = repository;\n        Task.Run(async () => await LoadData());\n    }\n\n    private async Task LoadData()\n    {\n    }\n}\n```", "```cs\npublic class TodoItemViewModel : ViewModel\n{\n    public TodoItemViewModel(TodoItem item) => Item = item;\n\n    public event EventHandler ItemStatusChanged;\n    public TodoItem Item { get; private set; }\n    public string StatusText => Item.Completed ? \"Reactivate\" : \n    \"Completed\";\n}\n```", "```cs\nusing DoToo.Models;\nusing DoToo.Repositories;\nusing System;\nusing System.Windows.Input;\nusing Xamarin.Forms;\n\nnamespace DoToo.ViewModels\n{\n    public class ItemViewModel : ViewModel\n    {\n        private TodoItemRepository repository;\n\n        public ItemViewModel(TodoItemRepository repository)\n        {\n            this.repository = repository;\n        } \n    }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n             xmlns:local=\"clr-namespace:DoToo\"\n             x:Class=\"DoToo.Views.MainView\" \n             Title=\"Do Too!\">\n\n <ContentPage.ToolbarItems>\n <ToolbarItem Text=\"Add\" />\n </ContentPage.ToolbarItems>\n\n <Grid>\n <Grid.RowDefinitions>\n <RowDefinition Height=\"auto\" />\n <RowDefinition Height=\"*\" />\n </Grid.RowDefinitions>\n\n <Button Text=\"Toggle filter\" />\n\n <ListView Grid.Row=\"1\">\n </ListView>\n </Grid>\n</ContentPage> \n```", "```cs\npublic MainView(MainViewModel viewModel)\n{ \n    InitializeComponent();\n    viewModel.Navigation = Navigation;\n BindingContext = viewModel;\n}\n```", "```cs\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n              xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" \n              x:Class=\"DoToo.Views.ItemView\"\n              Title=\"New todo item\">\n\n <ContentPage.ToolbarItems>\n <ToolbarItem Text=\"Save\" />\n </ContentPage.ToolbarItems>\n\n <StackLayout Padding=\"14\">\n <Label Text=\"Title\" />\n <Entry />\n <Label Text=\"Due\" />\n <DatePicker />\n <StackLayout Orientation=\"Horizontal\">\n <Switch />\n <Label Text=\"Completed\" />\n </StackLayout>\n </StackLayout>\n </ContentPage> \n```", "```cs\npublic ItemView (ItemViewModel viewmodel)\n{\n    InitializeComponent ();\n viewmodel.Navigation = Navigation;\n BindingContext = viewmodel;\n}\n```", "```cs\nusing Autofac;\n\nnamespace DoToo\n{\n    public static class Resolver\n    {\n        private static IContainer container;\n\n        public static void Initialize(IContainer container)\n        {\n            Resolver.container = container;\n        }\n\n        public static T Resolve<T>()\n        {\n            return container.Resolve<T>();\n        }\n    }\n}\n```", "```cs\nusing Autofac;\nusing System.Linq;\nusing Xamarin.Forms;\nusing DoToo.Views;\nusing DoToo.Repositories;\nusing DoToo.ViewModels;\n\nnamespace DoToo\n{\n    public abstract class Bootstrapper\n    {\n        protected ContainerBuilder ContainerBuilder { get; private \n        set; }\n\n        public Bootstrapper()\n        {\n            Initialize();\n            FinishInitialization();\n        }\n\n        protected virtual void Initialize()\n        {\n            var currentAssembly = Assembly.GetExecutingAssembly();\n            ContainerBuilder = new ContainerBuilder();\n\n            foreach (var type in currentAssembly.DefinedTypes\n                      .Where(e => \n                             e.IsSubclassOf(typeof(Page)) ||\n                             e.IsSubclassOf(typeof(ViewModel)))) \n            {\n                ContainerBuilder.RegisterType(type.AsType());\n            }\n\n            ContainerBuilder.RegisterType<TodoItemRepository>().SingleInstance();\n        }\n\n        private void FinishInitialization()\n        {\n            var container = ContainerBuilder.Build();\n            Resolver.Initialize(container);\n        }\n    }\n}\n```", "```cs\npublic class Bootstrapper : DoToo.Bootstrapper \n{\n    public static void Init()\n    {\n        var instance = new Bootstrapper();\n    }\n} \n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    global::Xamarin.Forms.Forms.Init();\n    Bootstrapper.Init();\n    LoadApplication(new App());\n\n    return base.FinishedLaunching(app, options);\n}\n```", "```cs\npublic class Bootstrapper : DoToo.Bootstrapper\n{\n    public static void Init()\n    {\n        var instance = new Bootstrapper();\n    }\n}\n```", "```cs\nprotected override void OnCreate(Bundle bundle)\n{\n    TabLayoutResource = Resource.Layout.Tabbar;\n    ToolbarResource = Resource.Layout.Toolbar;\n\n    base.OnCreate(bundle);\n\n    global::Xamarin.Forms.Forms.Init(this, bundle);\n    Bootstrapper.Init();\n    LoadApplication(new App());\n}\n```", "```cs\npublic class Bootstrapper : DoToo.Bootstrapper\n{\n    public static void Init()\n    {\n        var instance = new Bootstrapper();\n    }\n}\n```", "```cs\nXamarin.Forms.Forms.Init(e);\nBootstrapper.Init();\n```", "```cs\npublic App ()\n{\n    InitializeComponent();\n    MainPage = new NavigationPage(Resolver.Resolve<MainView>());\n}\n```", "```cs\n<Entry Text=\"{Binding Title} />\n```", "```cs\npublic ICommand AddItem => new Command(async () =>\n{\n    var itemView = Resolver.Resolve<ItemView>();\n    await Navigation.PushAsync(itemView);\n}); \n```", "```cs\n<ContentPage.ToolbarItems>\n    <ToolbarItem Text=\"Add\" Command=\"{Binding AddItem}\" />\n</ContentPage.ToolbarItems>\n```", "```cs\npublic class ItemViewModel : ViewModel\n{\n    private TodoItemRepository repository;\n\n    public TodoItem Item { get; set; }\n\n    public ItemViewModel(TodoItemRepository repository)\n    {\n        this.repository = repository;\n        Item = new TodoItem() { Due = DateTime.Now.AddDays(1) };\n    }\n\n public ICommand Save => new Command(async () => \n {\n await repository.AddOrUpdate(Item);\n await Navigation.PopAsync();\n });\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage  \n\n             x:Class=\"DoToo.Views.ItemView\">\n    <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Save\" Command=\"{Binding Save}\" />\n    </ContentPage.ToolbarItems>\n\n    <StackLayout Padding=\"14\">\n        <Label Text=\"Title\" />\n        <Entry Text=\"{Binding Item.Title}\" />\n        <Label Text=\"Due\" />\n        <DatePicker Date=\"{Binding Item.Due}\" />\n        <StackLayout Orientation=\"Horizontal\">\n            <Switch IsToggled=\"{Binding Item.Completed}\" />\n            <Label Text=\"Completed\" />\n        </StackLayout>\n    </StackLayout>\n\n</ContentPage> \n```", "```cs\npublic ObservableCollection<TodoItemViewModel> Items { get; set; }\n```", "```cs\nprivate async Task LoadData()\n{\n    var items = await repository.GetItems();\n    var itemViewModels = items.Select(i =>  \n    CreateTodoItemViewModel(i));\n    Items = new ObservableCollection<TodoItemViewModel>  \n    (itemViewModels); \n}\n\nprivate TodoItemViewModel CreateTodoItemViewModel(TodoItem item)\n{\n    var itemViewModel = new TodoItemViewModel(item);\n    itemViewModel.ItemStatusChanged += ItemStatusChanged;\n    return itemViewModel;\n}\n\nprivate void ItemStatusChanged(object sender, EventArgs e)\n{\n}\n```", "```cs\npublic MainViewModel(TodoItemRepository repository)\n{\n   repository.OnItemAdded += (sender, item) => \n Items.Add(CreateTodoItemViewModel(item));\n repository.OnItemUpdated += (sender, item) => \n Task.Run(async () => await LoadData());\n\n    this.repository = repository;\n\n    Task.Run(async () => await LoadData());\n}   \n```", "```cs\n<ListView Grid.Row=\"1\"\n RowHeight=\"70\"\n          ItemsSource=\"{Binding Items}\">\n    <ListView.ItemTemplate>    \n        <DataTemplate>\n            <ViewCell>\n                <Grid Padding=\"15,10\">\n                    <Grid.ColumnDefinitions>\n                        <ColumnDefinition Width=\"10\" />\n                        <ColumnDefinition Width=\"*\" />\n                    </Grid.ColumnDefinitions>\n\n                    <BoxView Grid.RowSpan=\"2\" />\n                    <Label Grid.Column=\"1\"\n                           Text=\"{Binding Item.Title}\"\n                           FontSize=\"Large\" />\n                    <Label Grid.Column=\"1\"\n                           Grid.Row=\"1\"\n                           Text=\"{Binding Item.Due}\"\n                           FontSize=\"Micro\" />\n                    <Label Grid.Column=\"1\" \n Grid.Row=\"1\" \n HorizontalTextAlignment=\"End\" \n Text=\"Completed\" \n                           IsVisible=\"{Binding Item.Completed}\"\n                           FontSize=\"Micro\" />\n                </Grid>\n            </ViewCell>\n        </DataTemplate>\n    </ListView.ItemTemplate>\n</ListView>\n```", "```cs\nusing System;\nusing System.Globalization;\nusing Xamarin.Forms;\n\nnamespace DoToo.Converters\n{\n    public class StatusColorConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType,\n                              object parameter, CultureInfo  \n                              culture)\n        {\n          return (bool)value ?   \n          (Color)Application.Current.Resources[\"CompletedColor\"]: \n\n          (Color)Application.Current.Resources[\"ActiveColor\"];\n        }\n\n        public object ConvertBack(object value, Type targetType, \n                                  object parameter, CultureInfo \n                                  culture)\n        {\n            return null;\n        }\n    }\n}\n```", "```cs\n <Application ...>\n     <Application.Resources>\n <ResourceDictionary>\n <Color x:Key=\"CompletedColor\">#1C8859</Color>\n <Color x:Key=\"ActiveColor\">#D3D3D3</Color>\n </ResourceDictionary>\n     </Application.Resources>\n </Application> \n```", "```cs\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:converters=\"clr-namespace:DoToo.Converters\"\n             x:Class=\"DoToo.Views.MainView\"\n             Title=\"Do Too!>\n```", "```cs\n<ContentPage ...>\n    <ContentPage.Resources>\n <ResourceDictionary>\n <converters:StatusColorConverter  \n             x:Key=\"statusColorConverter\" />\n </ResourceDictionary>\n </ContentPage.Resources>    <ContentPage.ToolBarItems>\n        <ToolbarItem Text=\"Add\" Command=\"{Binding AddItem}\" />\n    </ContentPage.ToolbarItems>\n    <Grid ...>\n    </Grid>\n</ContentPage>\n```", "```cs\n<BoxView Grid.RowSpan=\"2\" \n   BackgroundColor=\"{Binding Item.Completed, \n                     Converter={StaticResource  \n                     statusColorConverter}}\" />\n```", "```cs\npublic TodoItemViewModel SelectedItem\n{\n    get { return null; }\n    set \n    {\n        Device.BeginInvokeOnMainThread(async () => await \n        NavigateToItem(value));\n        RaisePropertyChanged(nameof(SelectedItem));\n    }\n}\n\nprivate async Task NavigateToItem(TodoItemViewModel item)\n{\n    if (item == null)\n    {\n        return;\n    }\n\n    var itemView = Resolver.Resolve<ItemView>();\n    var vm = itemView.BindingContext as ItemViewModel;\n    vm.Item = item.Item;\n\n    await Navigation.PushAsync(itemView);\n}\n```", "```cs\n<ListView x:Name=\"ItemsListView\"\n          Grid.Row=\"1\"\n          RowHeight=\"70\"\n          ItemsSource=\"{Binding Items}\"\n          SelectedItem=\"{Binding SelectedItem}\">\n```", "```cs\npublic MainView(MainViewModel viewmodel)\n{\n    InitializeComponent();\n    viewmodel.Navigation = Navigation;\n    BindingContext = viewmodel;\n\n    ItemsListView.ItemSelected += (s, e) => \n    ItemsListView.SelectedItem = null;\n}\n```", "```cs\npublic ICommand ToggleCompleted => new Command((arg) =>\n{\n    Item.Completed = !Item.Completed;\n    ItemStatusChanged?.Invoke(this, new EventArgs());\n});\n```", "```cs\n<ListView.ItemTemplate>\n    <DataTemplate>\n        <ViewCell>\n <ViewCell.ContextActions>\n <MenuItem Text=\"{Binding StatusText}\" \n Command=\"{Binding ToggleCompleted}\" />\n </ViewCell.ContextActions>\n        <Grid Padding=\"15,10\">\n        ...\n        </Grid>\n    </DataTemplate>\n</ListView.ItemTemplate>\n```", "```cs\nprivate void ItemStatusChanged(object sender, EventArgs e)\n{\n if (sender is TodoItemViewModel item)\n {\n if (!ShowAll && item.Item.Completed)\n {\n Items.Remove(item);\n }\n\n Task.Run(async () => await \n        repository.UpdateItem(item.Item));\n }\n} \n\npublic bool ShowAll { get; set; }\n```", "```cs\nprivate async Task LoadData()\n{\n    var items = await repository.GetItems();\n\n    if (!ShowAll)\n    {\n items = items.Where(x => x.Completed == false).ToList();\n    }\n\n    var itemViewModels = items.Select(i => \n    CreateTodoItemViewModel(i));\n    Items = new ObservableCollection<TodoItemViewModel>  \n    (itemViewModels);\n}\n```", "```cs\npublic string FilterText => ShowAll ? \"All\" : \"Active\";\n\npublic ICommand ToggleFilter => new Command(async () =>\n{\n    ShowAll = !ShowAll;\n    await LoadData();\n});\n```", "```cs\n<Button Text=\"{Binding FilterText, StringFormat='Filter: {0}'}\"\n        Command=\"{Binding ToggleFilter}\" />\n```", "```cs\n<ResourceDictionary>\n    <Style TargetType=\"NavigationPage\">\n <Setter Property=\"BarBackgroundColor\" Value=\"#A25EBB\" />\n <Setter Property=\"BarTextColor\" Value=\"#FFFFFF\" />\n </Style>  <Style x:Key=\"FilterButton\" TargetType=\"Button\">\n <Setter Property=\"Margin\" Value=\"15\" />\n <Setter Property=\"BorderWidth\" Value=\"1\" />\n <Setter Property=\"BorderRadius\" Value=\"6\" /> \n <Setter Property=\"BorderColor\" Value=\"Silver\" />\n <Setter Property=\"TextColor\" Value=\"Black\" />\n </Style>\n\n    <Color x:Key=\"CompletedColor\">#1C8859</Color>\n    <Color x:Key=\"ActiveColor\">#D3D3D3</Color>        \n</ResourceDictionary>\n```", "```cs\n<Button Style=\"{StaticResource FilterButton}\"\n        Text=\"{Binding FilterText, StringFormat='Filter: {0}'}\" \n        BackgroundColor=\"{Binding ShowAll, Converter={StaticResource \n        statusColorConverter}}\"\n        TextColor=\"Black\"\n        Command=\"{Binding ToggleFilter}\">\n\n<Button.Triggers>\n <DataTrigger TargetType=\"Button\" Binding=\"{Binding ShowAll}\"  \n      Value=\"True\">\n <Setter Property=\"TextColor\" Value=\"White\" />\n </DataTrigger>\n </Button.Triggers>\n</Button>\n```", "```cs\n<Label Grid.Column=\"1\"\n       Grid.Row=\"1\" \n       Text=\"{Binding Item.Due, StringFormat='{0:MMMM d, yyyy}'}\" \n       FontSize=\"Micro\" />\n\n<Label Grid.Column=\"1\" \n       Grid.Row=\"1\" \n       HorizontalTextAlignment=\"End\" \n       Text=\"Completed\" \n       IsVisible=\"{Binding Item.Completed}\"\n       FontSize=\"Micro\" \n       TextColor=\"{StaticResource CompletedColor}\" /> \n```"]