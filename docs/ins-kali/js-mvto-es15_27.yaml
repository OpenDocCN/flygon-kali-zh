- en: Chapter 14. ECMAScript-2015/2016 Solutions Today
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。ECMAScript-2015/2016解决方案今天
- en: I cannot count the number of times I have mentioned upcoming versions of JavaScript
    in this module, rest assured that it's a large number. It is somewhat frustrating
    that the language is not keeping pace with the requirements of application developers.
    Many of the approaches we've discussed become unnecessary with a newer version
    of JavaScript. There are, however, some ways to get the next version of JavaScript
    working today.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本模块中，我无法计算提到JavaScript即将推出的版本的次数，但可以放心的说，这个数字很大。令人有些沮丧的是，语言没有跟上应用程序开发人员的需求。我们讨论过的许多方法在JavaScript的新版本中变得不再必要。然而，有一些方法可以让下一个版本的JavaScript在今天就能够使用。
- en: 'In this chapter we''ll look at a couple of these, specifically:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专门研究其中的一些：
- en: Typescript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Typescript
- en: BabelJS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BabelJS
- en: TypeScript
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript
- en: There is no shortage of languages that compile to JavaScript. CoffeeScript is
    perhaps the best known example of one of these languages, although the Google
    web toolkit that compiles Java to JavaScript was also once very popular. Never
    ones to be left behind or use somebody else's solution, Microsoft released a language
    called TypeScript in 2012\. It is designed to be a superset of JavaScript in the
    same way that C++ is a superset of C. This means that all syntactically valid
    JavaScript code is also syntactically valid TypeScript code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译成JavaScript的语言不胜枚举。CoffeeScript可能是这些语言中最著名的一个例子，尽管将Java编译成JavaScript的Google
    Web Toolkit也曾经非常流行。微软在2012年发布了一种名为TypeScript的语言，以此来跟上潮流或者使用别人的解决方案。它被设计为JavaScript的超集，就像C++是C的超集一样。这意味着所有在语法上有效的JavaScript代码也是在语法上有效的TypeScript代码。
- en: Microsoft itself is making heavy use of TypeScript in some of its larger web
    properties. Both Office 365 and Visual Studio Online have significant code bases
    written in TypeScript. These projects actually predate TypeScript by a significant
    margin. The transition from JavaScript to TypeScript was reportedly quite easy
    due to the fact that it is a superset of JavaScript.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 微软自身在一些较大的网络属性中大量使用TypeScript。Office 365和Visual Studio Online都有大量用TypeScript编写的代码库。这些项目实际上早于TypeScript很长一段时间。据报道，从JavaScript过渡到TypeScript相当容易，因为它是JavaScript的超集。
- en: One of the design goals for TypeScript was to make it as compatible as possible
    with ECMAScript-2015 and future versions. This means that TypeScript supports
    some, although certainly not all, of the features of ECMAScript-2016, as well
    as a healthy chunk of ECMAScript-2015\. Two significant features from ECMAScript-2016
    which are partially supported by Typescript are decorators and async/await.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的设计目标之一是尽可能与ECMAScript-2015和未来版本兼容。这意味着TypeScript支持ECMAScript-2016的一些特性，尽管当然不是全部，以及ECMAScript-2015的大部分特性。TypeScript部分支持的ECMAScript-2016的两个重要特性是装饰器和async/await。
- en: Decorators
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器
- en: 'In an earlier chapter we explored **aspect oriented programming** (**AOP**).
    With AOP we wrap function with interceptors. Decorators offer an easy way of doing
    this. Let''s say that we have a class which dispatches messages in Westeros. Obviously
    there are no phones or internet there, so messages are dispatched via crows. It
    would be very helpful if we could spy on these messages. Our `CrowMessenger` class
    looks like the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在早些章节中，我们探讨了**面向方面的编程**（**AOP**）。使用AOP，我们用拦截器包装函数。装饰器提供了一种简单的方法来做到这一点。假设我们有一个在维斯特洛传递消息的类。显然那里没有电话或互联网，所以消息是通过乌鸦传递的。如果我们能够监视这些消息，那将非常有帮助。我们的`CrowMessenger`类看起来像下面这样：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You may note the `@spy` annotation on the `SendMessage` method. This is simply
    another function which intercepts and wraps the function. Inside of the spy we
    have access to the function descriptor. As you can see in the following code,
    we take the descriptor and manipulate it to capture the argument sent to the `CrowMessenger`
    class:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到`SendMessage`方法上的`@spy`注解。这只是另一个拦截和包装函数的函数。在spy内部，我们可以访问函数描述符。正如您在下面的代码中所看到的，我们获取描述符并操纵它以捕获发送到`CrowMessenger`类的参数：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Spys would obviously be very useful for testing functions. Not only can we
    spy on the values here but we could replace the input and output to the function.
    Consider the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 间谍显然对于测试函数非常有用。我们不仅可以在这里监视值，还可以替换函数的输入和输出。考虑以下情况：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Decorators can be used for purposes other than AOP. For instance, you could
    annotate the properties on an object as serializable and use the annotations to
    control custom JSON serialization. It is my suspicion that decorators will become
    more useful and powerful as decorators become supported. Already Angular 2.0 is
    making extensive use of decorators.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器可以用于除AOP之外的其他目的。例如，您可以将对象的属性标记为可序列化，并使用这些注解来控制自定义JSON序列化。我怀疑随着装饰器的支持，装饰器将变得更加有用和强大。Angular
    2.0已经广泛使用装饰器。
- en: Async/Await
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步/等待
- en: 'In [Chapter 7](part0134_split_000.html#3VPBC1-015e68c68a464f18a9559f448be84435
    "Chapter 7. Reactive Programming"), *Reactive Programming*, we spoke about how
    the callback nature of JavaScript programming makes code very confusing. Nowhere
    is this more apparent than trying to chain together a series of asynchronous events.
    We rapidly fall into a trap of code, which looks like the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](part0134_split_000.html#3VPBC1-015e68c68a464f18a9559f448be84435 "第7章. 响应式编程")*响应式编程*中，我们谈到了JavaScript编程的回调性质使得代码非常混乱。尤其是在尝试将一系列异步事件链接在一起时，这一点表现得更为明显。我们很快陷入了一个看起来像下面这样的代码陷阱：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Not only is this code difficult to read, it is nearly impossible to understand.
    The async/await syntax, which is borrowed from C#, allows for writing your code
    in a much more succinct fashion. Behind the scenes generators are used (or abused,
    if you like) to create the impression of true async/await. Let''s look at an example.
    In the preceding code we made use of the geolocation API which returns the location
    of a client. It is asynchronous as it performs some IO with the user''s machine
    to get a real world location. Our specification calls for us to get the user''s
    location, post it back to the server, and then get an image:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码不仅难以阅读，而且几乎不可能理解。从 C# 借鉴的 async/await 语法允许以更简洁的方式编写代码。在幕后，使用了生成器（或者说滥用了生成器）来创建真正的
    async/await 的效果。让我们看一个例子。在前面的代码中，我们使用了返回客户端位置的地理位置 API。它是异步的，因为它需要与用户的机器进行一些 IO
    操作以获取真实的位置。我们的规范要求我们获取用户的位置，将其发送回服务器，然后获取一张图片：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we now introduce async/await, this can become the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在引入 async/await，这可以变成以下形式：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code assumes that all `async` responses return promises which are a construct
    that contains a status and a result. As it stands, most `async` operations do
    not return promises but there are libraries and utilities to convert callbacks
    to promises. As you can see, the syntax is much cleaner and easier to follow than
    the callback mess.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码假设所有的 `async` 响应都返回包含状态和结果的 promise 构造。事实上，大多数 `async` 操作并不返回 promises，但有一些库和工具可以将回调转换为
    promises。正如你所看到的，这种语法比回调混乱要清晰得多，也更容易理解。
- en: Typing
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打字
- en: 'As well as the ECMAScript-2016 features we''ve mentioned in the preceding section,
    TypeScript has a rather intriguing typing system incorporated into it. One of
    the nicest parts of JavaScript is that it is a dynamically typed language. We''ve
    seen, repeatedly, how, not being burdened by types has saved us time and code.
    The typing system in TypeScript allows you to use as much or as little typing
    as you deem to be necessary. You can give variables a type by declaring them with
    the following syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们在前一节中提到的 ECMAScript-2016 功能之外，TypeScript 中还内置了一个非常有趣的打字系统。JavaScript 最美好的部分之一就是它是一种动态类型语言。我们一再看到，不受类型的限制如何节省了我们的时间和代码。TypeScript
    中的打字系统允许你根据需要使用多少或多少打字。你可以使用以下语法为变量赋予类型：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once a variable has a type assigned to it, the TypeScript compiler will use
    that not only to check that variable''s usage, but also to infer what other types
    may be derived from that class. For example, consider the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦变量被赋予了类型，TypeScript 编译器将使用它不仅来检查该变量的使用，还会推断出可能从该类派生的其他类型。例如，考虑以下代码：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, the TypeScript compiler will know that `unknown` is a number. If you
    attempt to use it as something else, say as the following string:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，TypeScript 编译器将知道 `unknown` 是一个数字。如果你尝试将它用作其他类型，比如以下字符串：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then the compiler will throw an error. However, you don't need to assign a type
    to any variable. This means that you can tune the degree to which the type checking
    is run. While it sounds odd, it is actually a brilliant solution for introducing
    the rigour of type checking without losing the pliability of JavaScript. The typing
    is only enforced during compilation, once the code is compiled to JavaScript,
    any hint that there was typing information associated with a field disappears.
    As a result, the emitted JavaScript is actually very clean.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 那么编译器将抛出错误。但是，你不需要为任何变量分配类型。这意味着你可以调整类型检查的程度。虽然听起来有点奇怪，但实际上这是一个很好的解决方案，可以在不失去
    JavaScript 的灵活性的情况下引入类型检查的严格性。类型只在编译期间强制执行，一旦代码编译成 JavaScript，与字段相关的类型信息的任何提示都会消失。因此，生成的
    JavaScript 实际上非常干净。
- en: If you're interested in typing systems and know words like contravariant and
    can discuss the various levels of gradual typing, then TypeScript's typing system
    may be well worth your time to investigate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对打字系统感兴趣，知道诸如逆变和逐渐打字的词汇，并且能够讨论各种级别的逐渐打字，那么 TypeScript 的打字系统可能值得你花时间去研究。
- en: All the examples in this module were originally written in TypeScript and then
    compiled to JavaScript. This was done to improve the accuracy of the code and
    generally to save me from messing up quite so frequently. I'm horribly biased
    but I think that TypeScript is really well done and certainly better than writing
    pure JavaScript.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块中的所有示例最初都是用 TypeScript 编写的，然后编译成 JavaScript。这样做是为了提高代码的准确性，通常也能让我少犯错。我非常偏袒，但我认为
    TypeScript 做得非常好，肯定比纯 JavaScript 更好。
- en: There is no support for typing in future versions of JavaScript. Thus, even
    with all the changes coming to future versions of JavaScript, I still believe
    that TypeScript has its place in providing compile time type checking. I never
    cease to be amazed by the number of times that the type checker has saved me from
    making silly mistakes when writing TypeScript.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 未来版本的 JavaScript 不支持打字。因此，即使未来版本的 JavaScript 发生了所有的变化，我仍然相信 TypeScript 在提供编译时类型检查方面有其作用。每当我写
    TypeScript 时，我总是对类型检查器多次拯救我免于犯愚蠢错误感到惊讶。
- en: BabelJS
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BabelJS
- en: An alternative to TypeScript is to use the BabelJS compiler. This is an open
    source project ECMAScript-2015 and beyond to the equivalent ECMAScript 5 JavaScript.
    A lot of the changes put in place for ECMAScript-2015 are syntactic niceties,
    so they can actually be represented in ECMAScript 5 JavaScript, although not as
    succinctly or as pleasantly. We've seen that already using class-like structures
    in ES 5\. BabelJS is written in JavaScript, which means that the compilation from
    ECMAScript-2015 to ES 5 is possible directly on a web page. Of course, as seems
    to be the trend with compilers, the source code for BabelJS makes use of ES 6
    constructs, so BabelJS must be used to compile BabelJS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BabelJS编译器的替代方案是TypeScript。这是一个开源项目，将ECMAScript-2015及更高版本转换为等效的ECMAScript
    5 JavaScript。ECMAScript-2015所做的许多更改都是语法上的美化，因此它们实际上可以在ECMAScript 5 JavaScript中表示，尽管不像那么简洁或令人愉悦。我们已经看到在ES
    5中使用类似类的结构。BabelJS是用JavaScript编写的，这意味着可以直接在网页上从ECMAScript-2015编译到ES 5。当然，与编译器的趋势一样，BabelJS的源代码使用了ES
    6构造，因此必须使用BabelJS来编译BabelJS。
- en: 'At the time of writing, the list of ES6 functions that are supported by BabelJS
    are extensive:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，BabelJS支持的ES6函数列表非常广泛：
- en: Arrow functions
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箭头函数
- en: Classes
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类
- en: Computed property names
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算属性名称
- en: Default parameters
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认参数
- en: Destructuring assignment
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构赋值
- en: Iterators and for of
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代器和for of
- en: Generator comprehension
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器推导
- en: Generators
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器
- en: Modules
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块
- en: Numeric literals
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字文字
- en: Property method assignment
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性方法赋值
- en: Object initializer shorthand
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象初始化程序简写
- en: Rest parameters
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剩余参数
- en: Spread
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展开
- en: Template literals
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板文字
- en: Promises
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺
- en: BabelJS is multi-purpose JavaScript compiler, so compiling ES-2015 code is simply
    one of the many things it can do. There are numerous plugins which provide a wide
    array of interesting functionality. For instance, the "Inline environmental variable"
    plugin inserts compile time variables, allowing for conditional compilation based
    on environments.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: BabelJS是一个多用途的JavaScript编译器，因此编译ES-2015代码只是它可以执行的众多任务之一。有许多插件提供各种有趣的功能。例如，“内联环境变量”插件插入编译时变量，允许根据环境进行条件编译。
- en: There is already a fair bit of documentation available on how each of these
    features work so we won't go over all of them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能的工作方式已经有了相当多的文档可供参考，所以我们不会详细介绍它们。
- en: 'Setting up Babel JS is a fairly simple exercise if you already have node and
    npm installed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了node和npm，那么设置Babel JS就是一个相当简单的练习：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will create a BabelJS binary which can do compilation like so:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个BabelJS二进制文件，可以进行编译，如下所示：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For most use cases you'll want to investigate using build tools such as Gulp
    or Grunt, which can compile many files at once and perform any number of post-compilation
    steps.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用例，您可能希望使用构建工具，如Gulp或Grunt，这些工具可以一次编译多个文件，并执行任意数量的后编译步骤。
- en: Classes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: By now you should be getting sick of reading about different ways to make classes
    in JavaScript. Unfortunately for you I'm the one writing this module so let's
    look at one final example. We'll use the same castle example from earlier.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经厌倦了阅读有关JavaScript中创建类的不同方法。不幸的是，我是写这个模块的人，所以让我们看一个最后的例子。我们将使用之前的堡垒示例。
- en: Modules within files are not supported in BabelJS. Instead, files are treated
    as modules, which allows for dynamic loading of modules in a fashion not unlike
    `require.js`. Thus we'll drop the module definition from our castle and stick
    to just the classes. One other feature that exists in TypeScript and not ES 6
    is prefacing a parameter with `public` to make it a public property on a class.
    Instead we make use of the `export` directive.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: BabelJS不支持文件内的模块。相反，文件被视为模块，这允许以一种类似于`require.js`的方式动态加载模块。因此，我们将从我们的堡垒中删除模块定义，只使用类。TypeScript中存在的另一个特性是在参数前加上`public`，使其成为类的公共属性。相反，我们使用`export`指令。
- en: 'Once we''ve made these changes, the source ES6 file looks like the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们做出这些更改，源ES6文件看起来如下：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The resulting ES 5 JavaScript looks like the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的ES 5 JavaScript看起来如下：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Right away it is apparent that the code produced by BabelJS is not as clean
    as the code from TypeScript. You may also have noticed that there are some helper
    functions employed to handle inheritance scenarios. There are also a number of
    mentions of `"use strict";`. This is an instruction to the JavaScript engine that
    it should run in strict mode.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 立即就会注意到，BabelJS生成的代码不像TypeScript生成的代码那样干净。您可能还注意到有一些辅助函数用于处理继承场景。还有一些关于`"use
    strict";`的提及。这是对JavaScript引擎的指示，它应该以严格模式运行。
- en: 'Strict mode prevents a number of dangerous JavaScript practices. For instance,
    in some JavaScript interpreters it is legal to use a variable without declaring
    it first:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 严格模式阻止了许多危险的JavaScript做法。例如，在一些JavaScript解释器中，可以在不先声明变量的情况下使用它是合法的：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will throw an error if `x` has not previously been declared:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`x`之前未声明，这将会抛出错误：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Duplicating properties in objects is disallowed, as well as double declaring
    a parameter. There are a number of other practises that `"use strict";` will treat
    as errors. I like to think of `"use strict";` as being similar to treating all
    warnings as errors. It isn't, perhaps, as complete as `–Werror` in GCC but it
    is still a good idea to use strict mode on new JavaScript code bases. BabelJS
    simply enforces that for you.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许在对象中重复声明属性，也不允许重复声明参数。`"use strict";`将把一些其他做法视为错误。我认为`"use strict";`类似于将所有警告视为错误。它可能不像GCC中的`-Werror`那样完整，但在新的JavaScript代码库上使用严格模式仍然是一个好主意。BabelJS只是为您强制执行这一点。
- en: Default parameters
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: Not a huge feature but a real nicety in ES 6 is the introduction of default
    parameters. It has always been possible to call a function in JavaScript without
    specifying all the parameters. Parameters are simply populated from left to right
    until there are no more values and all remaining parameters are given undefined.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ES 6中一个不是很重要但确实很好的特性是引入了默认参数。在JavaScript中，一直都可以调用函数而不指定所有参数。参数只是从左到右填充，直到没有更多的值，所有剩余的参数都被赋予undefined。
- en: 'Default parameters allow setting a value other than undefined for parameters
    that aren''t filled out:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 默认参数允许为未填写的参数设置一个值而不是undefined：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will output the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The JavaScript code produced is actually very simple:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的JavaScript代码实际上非常简单：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Template literals
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板文字
- en: 'On the surface, template literals seem to be a solution for the lack of string
    interpolation in JavaScript. In some languages, such as Ruby and Python, you can
    inject substitutions from the surrounding code directly into a string without
    having to pass them into some sort of string formatting function. For instance,
    in Ruby you can do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上，模板文字似乎是解决JavaScript中缺乏字符串插值的一种解决方案。在某些语言中，比如Ruby和Python，你可以直接将周围代码中的替换注入到字符串中，而无需将它们传递到某种字符串格式化函数中。例如，在Ruby中，你可以这样做：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will bind the `${name}` parameter to the name from the surrounding scope.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`${name}`参数绑定到周围作用域中的name。
- en: 'ES6 supports template literals that allow something similar in JavaScript:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ES6支持模板文字，可以在JavaScript中实现类似的功能：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It may be difficult to see but that string is actually surrounded by backticks
    and not quotation marks. Tokens to bind to the scope are denoted by `${}`. Within
    the braces you can put complex expressions such as:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可能很难看到，但是该字符串实际上是用反引号而不是引号括起来的。要绑定到作用域的标记由`${}`表示。在大括号中，你可以放置复杂的表达式，比如：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The BabelJS compiled version of this code simply substitutes appending strings
    for the string interpolation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: BabelJS编译版本的这段代码简单地将字符串连接替换为字符串插值：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Template literals also solve a number of other problems. New line characters
    inside of a template literal are legal, meaning that you can use template literals
    to create multiline strings.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字还解决了许多其他问题。模板文字中的换行字符是合法的，这意味着你可以使用模板文字来创建多行字符串。
- en: 'With the multiline string idea in mind, it seems like template literals might
    be useful for building domain specific languages: a topic we''ve seen a number
    of times already. The DSL can be embedded in a template literal and then values
    from outside plugged in. An example might be using it to hold HTML strings (certainly
    a DSL) and inserting values in from a model. These could, perhaps, take the place
    of some of the template tools in use today.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到多行字符串的概念，模板文字似乎对构建特定领域语言很有用：这是我们已经多次见过的一个主题。DSL可以嵌入到模板文字中，然后从外部插入值。一个例子可能是使用它来保存HTML字符串（当然是DSL），并从模型中插入值。这些可能取代今天使用的一些模板工具。
- en: Block bindings with let
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`let`进行块级绑定
- en: 'The scoping of variables in JavaScript is weird. If you define a variable inside
    a block, say inside an `if` statement, then that variable is still available outside
    of the block. For example, see the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的变量作用域很奇怪。如果你在一个块内定义一个变量，比如在一个`if`语句内部，那么该变量仍然可以在块外部使用。例如，看下面的代码：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code will print `9`, even though the variable outside is clearly out of
    scope. At least it is out of scope if you assume that JavaScript is like other
    C-syntax languages and supports block level scoping. The scoping in JavaScript
    is actually function level. Variables declared in code blocks like those found
    attached to `if` and `for` loop statements are hoisted to the beginning of the
    function. This means that they remain in scope for the entirety of the function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将打印`9`，即使外部变量显然已经超出了作用域。至少如果你假设JavaScript像其他C语法语言一样支持块级作用域的话，它就超出了作用域。JavaScript中的作用域实际上是函数级的。在`if`和`for`循环语句附加的代码块中声明的变量被提升到函数的开头。这意味着它们在整个函数中都处于作用域内。
- en: ES 6 introduces a new keyword, `let`, which scopes variables to the block level.
    This sort of variable is ideal for use in loops or to maintain proper variable
    values inside an `if` statement. Traceur implements support for block scoped variables.
    However, the support is experimental at the moment due to performance implications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: ES 6引入了一个新关键字`let`，它将变量的作用域限制在块级。这种类型的变量非常适合在循环中使用，或者在`if`语句中保持正确的变量值。Traceur实现了对块级作用域变量的支持。然而，由于性能影响，目前该支持是实验性的。
- en: 'Consider the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will compile to the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译为以下内容：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can see that the inner variable is replaced with a renamed one. Once outside
    the block, the variable is no longer replaced. Running this code will report that
    inside is undefined when the `console.log` method occurs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到内部变量被替换为重命名的变量。一旦离开块，变量就不再被替换。运行这段代码将报告在`console.log`方法发生时内部为undefined。
- en: In production
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在生产环境中
- en: BabelJS is a very powerful tool for replicating many of the structures and features
    of the next version of JavaScript today. However, the code generated is never
    going to be quite as efficient as having native support for the constructs. It
    may be worth benchmarking the generated code to ensure that it continues to meet
    the performance requirements of your project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: BabelJS是一个非常强大的工具，可以在今天复制许多下一个JavaScript版本的结构和特性。然而，生成的代码永远不会像原生支持这些结构那样高效。值得对生成的代码进行基准测试，以确保它继续满足项目的性能要求。
- en: Tips and tricks
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和技巧
- en: 'There are two excellent libraries for working with collections functionally
    in JavaScript: Underscore.js and Lo-Dash. Used in combination with TypeScript
    or BabelJS they have a very pleasant syntax and provide immense power.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中有两个优秀的用于函数式处理集合的库：Underscore.js和Lo-Dash。与TypeScript或BabelJS结合使用时，它们具有非常愉悦的语法并提供巨大的能力。
- en: 'For instance, finding all the members of a collection that satisfy a condition
    using Underscore looks like the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用Underscore查找满足条件的集合成员如下所示：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This code will find all the items where the ID is greater than `3`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将找到所有ID大于`3`的项目。
- en: Either of these libraries is one of the first things I add to a new project.
    Underscore is actually bundled with backbone.js, an MVVM framework.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个库中的任何一个都是我在新项目中添加的第一件事。Underscore实际上是与backbone.js捆绑在一起的，这是一个MVVM框架。
- en: Tasks for Grunt and Gulp exist for compiling code written in TypeScript or BabelJS.
    There is, of course, also good support for TypeScript in much of Microsoft's development
    tool chain, although BabelJS is currently not supported directly.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt和Gulp的任务存在于编译使用TypeScript或BabelJS编写的代码。当然，微软的开发工具链中也对TypeScript有很好的支持，尽管目前不直接支持BabelJS。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As the functionality of JavaScript expands, the need for third party frameworks
    and even transpilers starts to drop off. The language itself replaces many of
    these tools. The end game for tools like jQuery is that they are no longer required
    as they have been absorbed into the ecosystem. For many years the velocity of
    web browsers has been unable to keep pace with the rate of change of people's
    desires.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 随着JavaScript功能的扩展，对第三方框架甚至转译器的需求开始减少。语言本身取代了许多这些工具。像jQuery这样的工具的最终目标是它们不再需要，因为它们已经被吸收到生态系统中。多年来，Web浏览器的速度一直无法跟上人们愿望变化的速度。
- en: There is a large effort behind the next version of AngularJS but great efforts
    are being made to align the new components with the upcoming web component standards.
    Web components won't fully replace AngularJS but Angular will end up simply enhancing
    web components.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个版本的AngularJS背后有很大的努力，但也在努力使新组件与即将到来的Web组件标准保持一致。Web组件不会完全取代AngularJS，但Angular最终将简单地增强Web组件。
- en: Of course the idea that there won't be a need for any frameworks or tools is
    ridiculous. There is always going to be a new method of solving a problem and
    new libraries and frameworks will show up. The opinions of people on how to solve
    problems is also going to differ. That's why there is space in the market for
    the wide variety of MVVM frameworks that exist.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，认为不需要任何框架或工具的想法是荒谬的。总会有一种新的解决问题的方法和新的库和框架出现。人们对如何解决问题的看法也会有所不同。这就是为什么市场上存在各种各样的MVVM框架的原因。
- en: Working with JavaScript can be a much more pleasant experience if you make use
    of ES6 constructs. There are a couple of possible approaches to doing so, which
    of these is best suited to your specific problem is a matter for closer investigation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用ES6构造，使用JavaScript可以是一种更愉快的体验。有几种可能的方法来做到这一点，哪种方法最适合您的特定问题是一个需要更仔细调查的问题。
