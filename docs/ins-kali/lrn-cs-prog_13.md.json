["```cs\nvar path = @\"c:\\Windows\\System32\\mmc.exe\";\nConsole.WriteLine(Path.HasExtension(path));\nConsole.WriteLine(Path.IsPathFullyQualified(path));\nConsole.WriteLine(Path.IsPathRooted(path));\nConsole.WriteLine(Path.GetPathRoot(path));\nConsole.WriteLine(Path.GetDirectoryName(path));\nConsole.WriteLine(Path.GetFileName(path));\nConsole.WriteLine(Path.GetFileNameWithoutExtension(path));\nConsole.WriteLine(Path.GetExtension(path));\nConsole.WriteLine(Path.ChangeExtension(path, \".dll\"));\n```", "```cs\nvar path1 = Path.Combine(@\"c:\\temp\", @\"sub\\data.txt\");\nConsole.WriteLine(path1); // c:\\temp\\sub\\data.txt \nvar path2 = Path.Combine(@\"c:\\temp\\sub\", @\"..\\\", \"log.txt\");\nConsole.WriteLine(path2); // c:\\temp\\sub\\..\\log.txt\n```", "```cs\nvar temp = Path.GetTempPath();\nvar name = Path.GetRandomFileName();\nvar path1 = Path.Combine(temp, name);\nConsole.WriteLine(path1);\nvar path2 = Path.GetTempFileName();\nConsole.WriteLine(path2);\nFile.Delete(path2);\n```", "```cs\nvar dir = new DirectoryInfo(@\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\\");\nConsole.WriteLine($\"Full name : {dir.FullName}\");\nConsole.WriteLine($\"Name\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: {dir.Name}\");\nConsole.WriteLine($\"Parent\u00a0\u00a0\u00a0\u00a0: {dir.Parent}\");\nConsole.WriteLine($\"Root\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: {dir.Root}\");\nConsole.WriteLine($\"Created\u00a0\u00a0\u00a0: {dir.CreationTime}\");\nConsole.WriteLine($\"Attribute : {dir.Attributes}\");\nforeach(var subdir in dir.EnumerateDirectories())\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(subdir.Name);\n}\n```", "```cs\nvar dir = new DirectoryInfo(@\"C:\\Temp\\Dir\\Sub\");\nConsole.WriteLine($\"Exists: {dir.Exists}\");\ndir.Create();\nvar sub = dir.CreateSubdirectory(@\"sub1\\sub2\\sub3\");\nConsole.WriteLine(sub.FullName);\nsub.Delete();\n```", "```cs\nvar path = @\"C:\\Temp\\Dir\\Sub\";\nConsole.WriteLine($\"Exists: {Directory.Exists(path)}\");\nDirectory.CreateDirectory(path);\nvar sub = Path.Combine(path, @\"sub1\\sub2\\sub3\");\nDirectory.CreateDirectory(sub);\nDirectory.Delete(sub);\nDirectory.Delete(path, true);\n```", "```cs\nvar dir = new DirectoryInfo(@\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\\");\nforeach(var file in dir.GetFiles(\"t*.exe\"))\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{file.Name} [{file.Length}] \n\u00a0\u00a0\u00a0\u00a0[{file.Attributes}]\");}\n```", "```cs\nvar file = new FileInfo(@\"C:\\Windows\\explorer.exe\");\nConsole.WriteLine($\"Name: {file.Name}\");\nConsole.WriteLine($\"Extension: {file.Extension}\");\nConsole.WriteLine($\"Full name: {file.FullName}\");\nConsole.WriteLine($\"Length: {file.Length}\");\nConsole.WriteLine($\"Attributes: {file.Attributes}\");\nConsole.WriteLine($\"Creation: {file.CreationTime}\");\nConsole.WriteLine($\"Last access:{file.LastAccessTime}\");\nConsole.WriteLine($\"Last write: {file.LastWriteTime}\");\n```", "```cs\nvoid PrintContent(string path, string indent = null)\n{\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach(var file in Directory.EnumerateFiles(path))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var fi = new FileInfo(file);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{indent}{fi.Name}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach(var dir in Directory.EnumerateDirectories(path))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var di = new DirectoryInfo(dir);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{indent}[{di.Name}]\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PrintContent(dir, indent + \" \");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch(Exception ex)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Error.WriteLine(ex.Message);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nusing (var file = new StreamWriter(\n\u00a0\u00a0\u00a0File.Create(@\"C:\\Temp\\Dir\\demo.txt\")))\n{\n\u00a0\u00a0\u00a0\u00a0file.Write(\"This is a demo\");\n}\n```", "```cs\nvar path = @\"C:\\Temp\\Dir\\demo.txt\";\nFile.WriteAllText(path, \"This is a demo\");\nFile.AppendAllText(path, \"1st line\");\nFile.AppendAllLines(path, new string[]{ \n\u00a0\u00a0\u00a0\"2nd line\", \"3rd line\"});\n```", "```cs\nThis is a demo1st line2nd line\n3rd line\n```", "```cs\nvar path = @\"C:\\Temp\\Dir\\demo.txt\";\nstring text = File.ReadAllText(path);\nstring[] lines = File.ReadAllLines(path);\n```", "```cs\nvar path = @\"C:\\Temp\\data.raw\";\nvar data = new byte[] { 0xBA, 0xAD, 0xF0, 0x0D};\nusing(FileStream wr = File.Create(path))\n{\n\u00a0\u00a0\u00a0\u00a0wr.Write(data, 0, data.Length);\n}\nusing(FileStream rd = File.OpenRead(path))\n{\n\u00a0\u00a0\u00a0\u00a0var buffer = new byte[rd.Length];\n\u00a0\u00a0\u00a0\u00a0rd.Read(buffer, 0, buffer.Length);\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string.Join(\" \", buffer.Select(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e => $\"{e:X02}\")));\n}\n```", "```cs\nvar path = @\"C:\\Temp\\data.bin\";\nusing (var wr = new BinaryWriter(File.Create(path)))\n{\n\u00a0\u00a0\u00a0\u00a0wr.Write(true);\n\u00a0\u00a0\u00a0\u00a0wr.Write('x');\n\u00a0\u00a0\u00a0\u00a0wr.Write(42);\n\u00a0\u00a0\u00a0\u00a0wr.Write(19.99);\n\u00a0\u00a0\u00a0\u00a0wr.Write(49.99M);\n\u00a0\u00a0\u00a0\u00a0wr.Write(\"text\");\n}\nusing(var rd = new BinaryReader(File.OpenRead(path)))\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadBoolean()); // True\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadChar());\u00a0\u00a0\u00a0\u00a0// x\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadInt32());\u00a0\u00a0\u00a0// 42\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadDouble());\u00a0\u00a0// 19.99\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadDecimal()); // 49.99\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadString());\u00a0\u00a0// text\n} \n```", "```cs\nvar path = @\"C:\\Temp\\data.txt\";\nusing(StreamWriter wr = File.CreateText(path))\n{\n\u00a0\u00a0\u00a0\u00a0wr.WriteLine(\"1st line\");\n\u00a0\u00a0\u00a0\u00a0wr.WriteLine(\"2nd line\");\n}\nusing(StreamReader rd = File.OpenText(path))\n{\n\u00a0\u00a0\u00a0\u00a0while(!rd.EndOfStream)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadLine());\n}\n```", "```cs\nusing(var rd = new StreamReader(\n\u00a0\u00a0File.Open(path, FileMode.Open,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileAccess.Read, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FileShare.Read)))\n{\n\u00a0\u00a0\u00a0\u00a0while (!rd.EndOfStream)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(rd.ReadLine());\n}\n```", "```cs\npublic static class Serializer<T>\n{\n\u00a0\u00a0\u00a0\u00a0static readonly XmlSerializer _serializer =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new XmlSerializer(typeof(T));\n\u00a0\u00a0\u00a0\u00a0static readonly Encoding _encoding = Encoding.UTF8;\n\u00a0\u00a0\u00a0\u00a0public static string Serialize(T value)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (var ms = new MemoryStream())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_serializer.Serialize(ms, value);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return _encoding.GetString(ms.ToArray());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static T Deserialize(string value)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using (var ms = new MemoryStream(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_encoding.GetBytes(value)))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (T)_serializer.Deserialize(ms);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic class Employee\n{\n\u00a0\u00a0\u00a0\u00a0public int EmployeeId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public override string ToString() => \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"[{EmployeeId}] {LastName}, {FirstName}\";\n}\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar text = Serializer<Employee>.Serialize(employee);\nvar result = Serializer<Employee>.Deserialize(text);\nConsole.WriteLine(employee);\nConsole.WriteLine(text);\nConsole.WriteLine(result);\n```", "```cs\npublic static class Compression\n{\n\u00a0\u00a0\u00a0\u00a0public static byte[] Compress(byte[] data)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data == null) return null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data.Length == 0) return new byte[] { };\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var ms = new MemoryStream();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var gzips =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new GZipStream(ms,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CompressionMode.Compress);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gzips.Write(data, 0, data.Length);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gzips.Close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ms.ToArray();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static byte[] Decompress(byte[] data)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data == null) return null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data.Length == 0) return new byte[] { };\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var source = new MemoryStream(data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var gzips =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new GZipStream(source,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CompressionMode.Decompress);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var target = new MemoryStream(data.Length * 2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gzips.CopyTo(target);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return target.ToArray();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\";\nvar data = Encoding.UTF8.GetBytes(text);\nvar compressed = Compression.Compress(data);\nvar decompressed = Compression.Decompress(compressed);\nvar result = Encoding.UTF8.GetString(decompressed);\nConsole.WriteLine($\"Text size: {text.Length}\");\nConsole.WriteLine($\"Compressed: {compressed.Length}\");\nConsole.WriteLine($\"Decompressed: {decompressed.Length}\");\nConsole.WriteLine(result);\nif (text == result)\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Decompression successful!\");\n```", "```cs\npublic static class Serializer<T>\n{\n\u00a0\u00a0\u00a0\u00a0static readonly XmlSerializer _serializer = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new XmlSerializer(typeof(T));\n\u00a0\u00a0\u00a0\u00a0public static void Serialize(T value, string path)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var ms = File.CreateText(path);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_serializer.Serialize(ms, value);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static T Deserialize(string path)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0using var ms = File.OpenText(path);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (T)_serializer.Deserialize(ms);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar path = Path.Combine(Path.GetTempPath(), \"employee1.xml\");\nSerializer<Employee>.Serialize(employee, path);\nvar result = Serializer<Employee>.Deserialize(path);\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Employee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n\u00a0\u00a0<EmployeeId>42</EmployeeId>\n\u00a0\u00a0<FirstName>John</FirstName>\n\u00a0\u00a0<LastName>Doe</LastName>\n</Employee>\n```", "```cs\n[XmlType(\"employee\")]\npublic class Employee\n{\n\u00a0\u00a0\u00a0\u00a0[XmlAttribute(\"id\")]\n\u00a0\u00a0\u00a0\u00a0public int EmployeeId { get; set; }\n\u00a0\u00a0\u00a0\u00a0[XmlElement(ElementName = \"firstName\")]\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0[XmlElement(ElementName = \"lastName\")]\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public override string ToString() => \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"[{EmployeeId}] {LastName}, {FirstName}\";\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<employee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" id=\"42\">\n\u00a0\u00a0<firstName>John</firstName>\n\u00a0\u00a0<lastName>Doe</lastName>\n</employee>\n```", "```cs\npublic class Department\n{\n\u00a0\u00a0\u00a0\u00a0[XmlAttribute]\n\u00a0\u00a0\u00a0\u00a0public int Id { get; set; }\n\n\u00a0\u00a0\u00a0\u00a0public string Name { get; set; }\n}\n```", "```cs\npublic static class Serializer<T>\n{\n\u00a0\u00a0\u00a0\u00a0static readonly XmlSerializer _serializer = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new XmlSerializer(typeof(T));\n\u00a0\u00a0\u00a0\u00a0public static void Serialize(T value, StreamWriter stream)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_serializer.Serialize(stream, value);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static T Deserialize(StreamReader stream)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (T)_serializer.Deserialize(stream);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar department = new Department\n{\n\u00a0\u00a0\u00a0\u00a0Id = 102, \n\u00a0\u00a0\u00a0\u00a0Name = \"IT\"\n};\nvar path = Path.Combine(Path.GetTempPath(), \"employee.xml\");\nusing (var wr = File.CreateText(path))\n{\n\u00a0\u00a0\u00a0\u00a0Serializer<Employee>.Serialize(employee, wr);\n\u00a0\u00a0\u00a0\u00a0wr.WriteLine();\n\u00a0\u00a0\u00a0\u00a0Serializer<Department>.Serialize(department, wr);\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<employee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" id=\"42\">\n\u00a0\u00a0\u00a0<firstName>John</firstName>\n\u00a0\u00a0\u00a0<lastName>Doe</lastName>\n</employee>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Department xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Id=\"102\">\n\u00a0\u00a0\u00a0<Name>IT</Name>\n</Department>\n```", "```cs\npublic class Data\n{\n\u00a0\u00a0\u00a0\u00a0[XmlAttribute]\n\u00a0\u00a0\u00a0\u00a0public int Version { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Employee Employee { get; set; }\n\u00a0\u00a0\u00a0\u00a0public Department Department { get; set; }\n}\nvar data = new Data()\n{\n\u00a0\u00a0\u00a0\u00a0Version = 1,\n\u00a0\u00a0\u00a0\u00a0Employee = new Employee {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0Department = new Department {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Id = 102,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name = \"IT\"\n\u00a0\u00a0\u00a0\u00a0}\n};\nvar path = Path.Combine(Path.GetTempPath(), \"employee.xml\");\nusing (var wr = File.CreateText(path))\n{\n\u00a0\u00a0\u00a0\u00a0Serializer<Data>.Serialize(data, wr);\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Data xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Version=\"1\">\n\u00a0\u00a0<Employee id=\"42\">\n\u00a0\u00a0\u00a0\u00a0<firstName>John</firstName>\n\u00a0\u00a0\u00a0\u00a0<lastName>Doe</lastName>\n\u00a0\u00a0</Employee>\n\u00a0\u00a0<Department Id=\"102\">\n\u00a0\u00a0\u00a0\u00a0<Name>IT</Name>\n\u00a0\u00a0</Department>\n</Data>\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar department = new Department\n{\n\u00a0\u00a0\u00a0\u00a0Id = 102,\n\u00a0\u00a0\u00a0\u00a0Name = \"IT\"\n};\nvar path = Path.Combine(Path.GetTempPath(), \"employee.xml\");\nvar settings = new XmlWriterSettings \n{ \n\u00a0\u00a0\u00a0\u00a0Encoding = Encoding.UTF8, \n\u00a0\u00a0\u00a0\u00a0Indent = true \n};\nvar namespaces = new XmlSerializerNamespaces();\nnamespaces.Add(string.Empty, string.Empty);\nusing (var wr = XmlWriter.Create(path, settings))\n{\n\u00a0\u00a0\u00a0\u00a0wr.WriteStartDocument();\n\u00a0\u00a0\u00a0\u00a0wr.WriteStartElement(\"Data\");\n\u00a0\u00a0\u00a0\u00a0wr.WriteStartAttribute(\"Version\");\n\u00a0\u00a0\u00a0\u00a0wr.WriteValue(1);\n\u00a0\u00a0\u00a0\u00a0wr.WriteEndAttribute();\n\u00a0\u00a0\u00a0\u00a0var employeeSerializer = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new XmlSerializer(typeof(Employee));\n\u00a0\u00a0\u00a0\u00a0employeeSerializer.Serialize(wr, employee, namespaces);\n\u00a0\u00a0\u00a0\u00a0var depSerializer = new XmlSerializer(typeof(Department));\n\u00a0\u00a0\u00a0\u00a0depSerializer.Serialize(wr, department, namespaces);\n\u00a0\u00a0\u00a0\u00a0wr.WriteEndElement();\n\u00a0\u00a0\u00a0\u00a0wr.WriteEndDocument();\n}\n```", "```cs\nvar rdsettings = new XmlReaderSettings()\n{\n\u00a0\u00a0\u00a0\u00a0IgnoreComments = true,\n\u00a0\u00a0\u00a0\u00a0IgnoreWhitespace = true\n};\nusing (var rd = XmlReader.Create(path, rdsettings))\n{\n\u00a0\u00a0\u00a0\u00a0string indent = string.Empty;\n\u00a0\u00a0\u00a0\u00a0while(rd.Read())\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch(rd.NodeType)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case XmlNodeType.Element:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"{indent}{{ {rd.Name} : \");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0indent = indent + \" \";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (rd.MoveToNextAttribute())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{indent}{{{rd.Name}:{rd.Value}}}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case XmlNodeType.Text:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write(rd.Value);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case XmlNodeType.EndElement:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0indent = indent.Remove(0, 2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{indent}}}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"[{rd.Name} {rd.Value}]\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic enum EmployeeStatus { Active, Inactive }\npublic class Employee\n{\n\u00a0\u00a0\u00a0\u00a0public int EmployeeId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DateTime? HireDate { get; set; }\n\u00a0\u00a0\u00a0\u00a0public List<string> Telephones { get; set; }\n\u00a0\u00a0\u00a0\u00a0public bool IsOnLeave { get; set; }\u00a0\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0[JsonConverter(typeof(StringEnumConverter))]\n\u00a0\u00a0\u00a0\u00a0public EmployeeStatus Status { get; set; }\n\u00a0\u00a0\u00a0\u00a0[JsonIgnore]\n\u00a0\u00a0\u00a0\u00a0public DateTime LastModified { get; set; }\n\u00a0\u00a0\u00a0\u00a0public override string ToString() => \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"[{EmployeeId}] {LastName}, {FirstName}\";\n}\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar text = JsonConvert.SerializeObject(employee);\n```", "```cs\n{\"EmployeeId\":42,\"FirstName\":\"John\",\"LastName\":\"Doe\",\n\"HireDate\":null,\"Telephones\":null,\"IsOnLeave\":false,\n\"Status\":\"Active\"}\n```", "```cs\nvar text = JsonConvert.SerializeObject(\n\u00a0\u00a0\u00a0\u00a0employee, Formatting.Indented);\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\",\n\u00a0\u00a0\"HireDate\": null,\n\u00a0\u00a0\"Telephones\": null,\n\u00a0\u00a0\"IsOnLeave\": false,\n\u00a0\u00a0\"Status\": \"Active\"\n}\n```", "```cs\nvar text = JsonConvert.SerializeObject(\n\u00a0\u00a0\u00a0\u00a0employee,\n\u00a0\u00a0\u00a0\u00a0Formatting.Indented,\n\u00a0\u00a0\u00a0\u00a0new JsonSerializerSettings()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NullValueHandling = NullValueHandling.Ignore,\n\u00a0\u00a0\u00a0\u00a0});\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\",\n\u00a0\u00a0\"IsOnLeave\": false,\n\u00a0\u00a0\"Status\": \"Active\"\n}\n```", "```cs\nvar text = JsonConvert.SerializeObject(\n\u00a0\u00a0\u00a0\u00a0employee,\n\u00a0\u00a0\u00a0\u00a0Formatting.Indented,\n\u00a0\u00a0\u00a0\u00a0new JsonSerializerSettings()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NullValueHandling = NullValueHandling.Ignore,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DefaultValueHandling = DefaultValueHandling.Ignore\n\u00a0\u00a0\u00a0\u00a0});\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\"\n}\n```", "```cs\nvar path = Path.Combine(Path.GetTempPath() + \"employee.json\");\nvar serializer = new JsonSerializer()\n{\n\u00a0\u00a0\u00a0\u00a0Formatting = Formatting.Indented,\n\u00a0\u00a0\u00a0\u00a0NullValueHandling = NullValueHandling.Ignore,\n\u00a0\u00a0\u00a0\u00a0DefaultValueHandling = DefaultValueHandling.Ignore\n};\nusing (var sw = File.CreateText(path))\nusing (var jw = new JsonTextWriter(sw))\n{\n\u00a0\u00a0\u00a0\u00a0serializer.Serialize(jw, employee);\n}\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\"\n}\n```", "```cs\nusing (var sr = File.OpenText(path))\nusing (var jr = new JsonTextReader(sr))\n{\n\u00a0\u00a0\u00a0\u00a0var result = serializer.Deserialize<Employee>(jr);\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(result);\n}\n```", "```cs\nvar json = @\"{\n\u00a0\u00a0\u00a0\u00a0\"\"EmployeeId\"\": 42,\n\u00a0\u00a0\u00a0\u00a0\"\"FirstName\"\": \"\"John\"\",\n\u00a0\u00a0\u00a0\u00a0\"\"LastName\"\": \"\"Doe\"\"\n}\";\nvar result = JsonConvert.DeserializeObject<Employee>(json);\n```", "```cs\nvar employee = new Employee\n{\n\u00a0\u00a0\u00a0\u00a0EmployeeId = 42,\n\u00a0\u00a0\u00a0\u00a0FirstName = \"John\",\n\u00a0\u00a0\u00a0\u00a0LastName = \"Doe\"\n};\nvar text = JsonSerializer.Serialize(employee);\n```", "```cs\n{\"EmployeeId\":42,\"FirstName\":\"John\",\"LastName\":\"Doe\",\n\"HireDate\":null,\"Telephones\":null,\"IsOnLeave\":false,\n\"Status\":\"Active\"}\n```", "```cs\nvar text = JsonSerializer.Serialize(\n\u00a0\u00a0\u00a0\u00a0employee,\n\u00a0\u00a0\u00a0\u00a0new JsonSerializerOptions()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0WriteIndented = true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0IgnoreNullValues = true \n\u00a0\u00a0\u00a0\u00a0});\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\",\n\u00a0\u00a0\"IsOnLeave\": false,\n\u00a0\u00a0\"Status\": \"Active\"\n}\n```", "```cs\npublic class Employee\n{\n\u00a0\u00a0\u00a0\u00a0public int EmployeeId { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string FirstName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public string LastName { get; set; }\n\u00a0\u00a0\u00a0\u00a0public DateTime? HireDate { get; set; }\n\u00a0\u00a0\u00a0\u00a0public List<string> Telephones { get; set; }\n\u00a0\u00a0\u00a0\u00a0public bool IsOnLeave { get; set; }\n\u00a0\u00a0\u00a0\u00a0[JsonConverter(typeof(JsonStringEnumConverter))]\n\u00a0\u00a0\u00a0\u00a0public EmployeeStatus Status { get; set; }\n\u00a0\u00a0\u00a0\u00a0[JsonIgnore]\n\u00a0\u00a0\u00a0\u00a0public DateTime LastModified { get; set; }\n\u00a0\u00a0\u00a0\u00a0public override string ToString() => \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"[{EmployeeId}] {LastName}, {FirstName}\";\n}\n```", "```cs\nvar path = Path.Combine(Path.GetTempPath() + \"employee.json\");\nvar options = new JsonWriterOptions()\n{\n\u00a0\u00a0\u00a0\u00a0Indented = true\n};\nusing (var sw = File.CreateText(path))\nusing (var jw = new Utf8JsonWriter(sw.BaseStream, options))\n{\n\u00a0\u00a0\u00a0\u00a0jw.WriteStartObject();\n\u00a0\u00a0\u00a0\u00a0jw.WriteNumber(\"EmployeeId\", 42);\n\u00a0\u00a0\u00a0\u00a0jw.WriteString(\"FirstName\", \"John\");\n\u00a0\u00a0\u00a0\u00a0jw.WriteString(\"LastName\", \"Doe\");\n\u00a0\u00a0\u00a0\u00a0jw.WriteBoolean(\"IsOnLeave\", false);\n\u00a0\u00a0\u00a0\u00a0jw.WriteString(\"Status\", EmployeeStatus.Active.ToString());\n\u00a0\u00a0\u00a0\u00a0jw.WriteEndObject();\n}\n```", "```cs\n{\n\u00a0\u00a0\"EmployeeId\": 42,\n\u00a0\u00a0\"FirstName\": \"John\",\n\u00a0\u00a0\"LastName\": \"Doe\",\n\u00a0\u00a0\"IsOnLeave\": false,\n\u00a0\u00a0\"Status\": \"Active\"\n}\n```", "```cs\nbyte[] data = Encoding.UTF8.GetBytes(text);\nUtf8JsonReader reader = new Utf8JsonReader(data, true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default);\nwhile (reader.Read())\n{\n\u00a0\u00a0\u00a0\u00a0switch (reader.TokenType)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case JsonTokenType.PropertyName:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write($@\"\"\"{reader.GetString()}\"\" : \");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case JsonTokenType.String:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{reader.GetString()},\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case JsonTokenType.Number:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{reader.GetInt32()},\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case JsonTokenType.False:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case JsonTokenType.True:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{reader.GetBoolean()},\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n\"EmployeeId\" : 42,\n\"FirstName\" : John,\n\"LastName\" : Doe,\n\"IsOnLeave\" : False,\n\"Status\" : Active,\n```"]