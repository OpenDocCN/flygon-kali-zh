["```cs\npublic class OddEven\n{\n   public string PrintOddEven(int startNumber, int\n   lastNumber)\n   {\n     return GetOddEvenWithinRange(startNumber,\n     lastNumber);\n   }\n   public string PrintSingleOddEven(int number) => CheckSingleNumberOddEvenPrimeResult(number);\n   private string CheckSingleNumberOddEvenPrimeResult(int\n   number)\n   {\n      var result = string.Empty;\n      result = CheckSingleNumberOddEvenPrimeResult(result,\n      number);\n      return result;\n   }\n   //Rest code is omitted\n}\n```", "```cs\nclass Program\n{\n   static void Main(string[] args)\n   {\n      int userInput;\n      do\n      {\n         userInput = DisplayMenu();\n         switch (userInput)\n         {\n            case 1:\n            Console.Clear();\n            Console.Write(\"Enter number: \");\n            var number = Console.ReadLine();\n            var objectOddEven = new OddEven();\n            var result =           \n            objectOddEven.PrintSingleOddEven\n            (Convert.ToInt32(number));\n            Console.WriteLine\n            ($\"Number:{number} is {result}\");\n            PressAnyKey();\n            break;\n            //Rest code is omitted\n         } while (userInput != 3);\n       }\n    //Rest code is ommitted\n}\nPrintSingleOddEven to check whether an entered number is odd or even. The following screenshot shows the output of our implementation:\n```", "```cs\nReflection to solve the same problem and achieve the same results:\n```", "```cs\nclass Program\n{\n   private static void Main(string[] args)\n   {\n      int userInput;\n      do\n      {\n         userInput = DisplayMenu();\n         switch (userInput)\n         {\n            //Code omitted\n            case 2:\n            Console.Clear();\n            Console.Write(\"Enter number: \");\n            var num = Console.ReadLine();\n            Object objInstance = \n            Activator.CreateInstance(typeof(OddEven));\n            MethodInfo method = \n            typeof(OddEven).GetMethod\n            (\"PrintSingleOddEven\");\n            object res = method.Invoke\n            (objInstance, new object[] \n            { Convert.ToInt32(num) });\n            Console.WriteLine($\"Number:{num} is {res}\");\n            PressAnyKey();\n            break;\n         }\n      } while (userInput != 3);\n    }\n   //code omitted\n}\nMethodInfo with the use of System.Reflection and thereafter invoking the method by passing the required parameters. The preceding example is the simplest one to showcase the power of Reflection; we can do more things with the use of Reflection.\n```", "```cs\nclass Program\n{\n   private static void Main(string[] args)\n   {\n      int userInput;\n      do\n      {\n         userInput = DisplayMenu();\n         switch (userInput)\n         {\n            // code omitted\n            case 3:\n            Console.Clear();\n            Console.WriteLine\n            (\"Getting information using 'typeof' operator\n            for class 'Day05.Program\");\n            var typeInfo = typeof(Program);\n            Console.WriteLine();\n            Console.WriteLine(\"Analysis result(s):\");\n            Console.WriteLine\n            (\"=========================\");\n            Console.WriteLine($\"Assembly:\n            {typeInfo.AssemblyQualifiedName}\");\n            Console.WriteLine($\"Name:{typeInfo.Name}\");\n            Console.WriteLine($\"Full Name:\n            {typeInfo.FullName}\");\n            Console.WriteLine($\"Namespace:\n            {typeInfo.Namespace}\");\n            Console.WriteLine\n            (\"=========================\");\n            PressAnyKey();\n            break;\n            code omitted\n          }\n       } while (userInput != 5);\n   }\n      //code omitted\n}\ntypeof to gather the information on our class Program. The typeof operator represents a type declaration here; in our case, it is a type declaration of class Program. Here is the result of the preceding code:\n```", "```cs\ninternal class Program\n{\n   private static void Main(string[] args)\n   {\n      int userInput;\n      do\n      {\n         userInput = DisplayMenu();\n         switch (userInput)\n         {\n            //code omitted\n            case 4:\n            Console.Clear();\n            Console.WriteLine(\"Getting information using \n            'GetType()' method for class\n            'Day05.Program'\");\n            var info = Type.GetType(\"Day05.Program\");\n            Console.WriteLine();\n            Console.WriteLine(\"Analysis result(s):\");\n            Console.WriteLine\n            (\"=========================\");\n            Console.WriteLine($\"Assembly:\n            {info.AssemblyQualifiedName}\");\n            Console.WriteLine($\"Name:{info.Name}\");\n            Console.WriteLine($\"Full Name:\n            {info.FullName}\");\n            Console.WriteLine($\"Namespace: \n            {info.Namespace}\");\n            Console.WriteLine\n            (\"=========================\");\n            PressAnyKey();\n            break;\n         }\n      } while (userInput != 5);\n   }\n //code omitted\n}\nclass Program with the use of GetMethod(), and it results in the following:\n```", "```cs\npublic class MathClass\n{\n   private readonly int _num1;\n   private readonly int _num2;\n   public MathClass(int num1, int num2)\n   {\n      _num1 = num1;\n      _num2 = num2;\n   }\n     public int Sum() => _num1 + _num2;\n     public int Substract() => _num1 - _num2;\n     public int Division() => _num1 / _num2;\n     public int Mod() => _num1 % _num2;\n}\n```", "```cs\ninternal class Program\n{\n   private static PrintFizzBuzz _printFizzBuzz;\n   private static void Main(string[] args)\n   {\n      int userInput;\n      do\n      {\n         userInput = DisplayMenu();\n         switch (userInput)\n         {\n            //code omitted\n            case 6:\n            Clear();\n            Write(\"Enter number: \");\n            var inputNum = ReadLine();\n            _printFizzBuzz = FizzBuzz.PrintFizzBuzz;\n            WriteLine($\"Entered number:{inputNum} is\n            {_printFizzBuzz(Convert.ToInt32(inputNum))}\");\n            PressAnyKey();\n            break;\n         }\n      } while (userInput != 7);\n   }\n```", "```cs\npublic delegate string FizzBuzzDelegate(int num);\nThe following code snippet shows event declaration:\npublic event FizzBuzzDelegate FizzBuzzEvent;\nThe following code snippet shows a complete implementation of an event to find FizzBuzz numbers:\npublic delegate string FizzBuzzDelegate(int num);\npublic class FizzBuzzImpl\n{\n   public FizzBuzzImpl()\n   {\n      FizzBuzzEvent += PrintFizzBuzz;\n   }\n      public event FizzBuzzDelegate FizzBuzzEvent;\n      private string PrintFizzBuzz(int num) => FizzBuzz.PrintFizzBuzz(num);\n      public string EventImplementation(int num)\n   {\n      var fizzBuzImpl = new FizzBuzzImpl();\n      return fizzBuzImpl.FizzBuzzEvent(num);\n   }\n}\nFizzBuzzEvent that is attached to a delegate type named FizzBuzzDelegate, which called a method PrintFizzBuzz on instantiation of our class named FizzBuzzImpl. Hence, whenever we call our event FizzBuzzEvent, it automatically calls a method PrintFizzBuzz and returns the expected results:\n```", "```cs\nArrayList:\n```", "```cs\nArrayList arrayList = new ArrayList();\nArrayList arrayList1 = new ArrayList(capacity);\nArrayList arrayList2 = new ArrayList(collection);\narrayList is initialized using the default constructor. arrayList1 is initialized for a specific initial capacity. arrayList2 is initialized using an element of another collection.\n```", "```cs\nArrayList arrayList = new ArrayList {Capacity = 50};\n```", "```cs\nArrayList arrayList = new ArrayList {Capacity = 50};\nvar numRandom = new Random(50);\nfor (var countIndex = 0; countIndex < 50; countIndex++)\narrayList.Add(numRandom.Next(50));\n```", "```cs\nArrayList arrayList = new ArrayList();\nvar arrayListIsFixedSize = arrayList.IsFixedSize;\n```", "```cs\nArrayList arrayList = new ArrayList {Capacity = 50};\nvar numRandom = new Random(50);\nfor (var countIndex = 0; countIndex < 50; countIndex++)\narrayList.Add(numRandom.Next(50));\n```", "```cs\narrayList.Clear();\n```", "```cs\narrayList.Remove(15);\n```", "```cs\nArrayList:\n```", "```cs\npublic void ArrayListExample(int count)\n{\nvar arrayList = new ArrayList();\nvar numRandom = new Random(count);\nWriteLine($\"Creating an ArrayList with capacity: {count}\");\nfor (var countIndex = 0; countIndex < count; countIndex++)\narrayList.Add(numRandom.Next(count));\nWriteLine($\"Capacity: {arrayList.Capacity}\");\nWriteLine($\"Count: {arrayList.Count}\");\nWrite(\"ArrayList original contents: \");\nPrintArrayListContents(arrayList);\nWriteLine();\narrayList.Reverse();\nWrite(\"ArrayList reversed contents: \");\nPrintArrayListContents(arrayList);\nWriteLine();\nWrite(\"ArrayList sorted Content: \");\narrayList.Sort();\nPrintArrayListContents(arrayList);\nWriteLine();\nReadKey();\n}\n```", "```cs\nHashtable hashtable = new Hashtable();\n```", "```cs\nvar hashtable = new Hashtable\n{\n{1, \"Gaurav Aroraa\"},\n{2, \"Vikas Tiwari\"},\n{3, \"Denim Pinto\"},\n{4, \"Diwakar\"},\n{5, \"Merint\"}\n};\nvar count = hashtable.Count;\n```", "```cs\nvar hashtable = new Hashtable\n{\n{1, \"Gaurav Aroraa\"},\n{2, \"Vikas Tiwari\"},\n{3, \"Denim Pinto\"},\n{4, \"Diwakar\"},\n{5, \"Merint\"}\n};\nvar fixedSize = hashtable.IsFixedSize ? \" fixed size.\" : \" not fixed size.\";\nWriteLine($\"HashTable is {fixedSize} .\");\n```", "```cs\nWriteLine($\"HashTable is ReadOnly : {hashtable.IsReadOnly} \");\n```", "```cs\nvar hashtable = new Hashtable\nhashtable.Add(11,\"Rama\");\n```", "```cs\nhashtable.Clear();\n```", "```cs\nhashtable.Remove(15);\n```", "```cs\nHashTable collection, and will try to reiterate its keys:\n```", "```cs\npublic void HashTableExample()\n{\n   WriteLine(\"Creating HashTable\");\n   var hashtable = new Hashtable\n   {\n      {1, \"Gaurav Aroraa\"},\n      {2, \"Vikas Tiwari\"},\n      {3, \"Denim Pinto\"},\n      {4, \"Diwakar\"},\n      {5, \"Merint\"}\n   };\n      WriteLine(\"Reading HashTable Keys\");\n      foreach (var hashtableKey in hashtable.Keys)\n   {\n      WriteLine($\"Key :{hashtableKey} - value :\n      {hashtable[hashtableKey]}\");\n   }\n}\n```", "```cs\nSortedList sortedList = new SortedList();\n```", "```cs\nvar sortedList = new SortedList\n{\n{1, \"Gaurav Aroraa\"},\n{2, \"Vikas Tiwari\"},\n{3, \"Denim Pinto\"},\n{4, \"Diwakar\"},\n{5, \"Merint\"},\n{11, \"Rama\"}\n};\nWriteLine($\"Capacity: {sortedList.Capacity}\");\n```", "```cs\nvar sortedList = new SortedList\n{\n{1, \"Gaurav Aroraa\"},\n{2, \"Vikas Tiwari\"},\n{3, \"Denim Pinto\"},\n{4, \"Diwakar\"},\n{5, \"Merint\"},\n{11, \"Rama\"}\n};\nWriteLine($\"Capacity: {sortedList.Count}\");\n```", "```cs\nvar sortedList = new SortedList\n{\n{1, \"Gaurav Aroraa\"},\n{2, \"Vikas Tiwari\"},\n{3, \"Denim Pinto\"},\n{4, \"Diwakar\"},\n{5, \"Merint\"},\n{11, \"Rama\"}\n};\nar fixedSize = sortedList.IsFixedSize ? \" fixed size.\" : \" not fixed size.\";\nWriteLine($\"SortedList is {fixedSize} .\");\n```", "```cs\nWriteLine($\"SortedList is ReadOnly : {sortedList.IsReadOnly} \");\n```", "```cs\nvar sortedList = new SortedList\nsortedList.Add(11,\"Rama\");\n```", "```cs\nsortedList.Clear();\n```", "```cs\nsortedList.Remove(15);\n```", "```cs\npublic void SortedListExample()\n{\n   WriteLine(\"Creating SortedList\");\n   var sortedList = new SortedList\n   {\n      {1, \"Gaurav Aroraa\"},\n      {2, \"Vikas Tiwari\"},\n      {3, \"Denim Pinto\"},\n      {4, \"Diwakar\"},\n      {5, \"Merint\"},\n      {11, \"Rama\"}\n   };\n   WriteLine(\"Reading SortedList Keys\");\n   WriteLine($\"Capacity: {sortedList.Capacity}\");\n   WriteLine($\"Count: {sortedList.Count}\");\n   var fixedSize = sortedList.IsFixedSize ? \" fixed\n   size.\" :\" not fixed size.\";\n   WriteLine($\"SortedList is {fixedSize} .\");\n   WriteLine($\"SortedList is ReadOnly :\n   {sortedList.IsReadOnly} \");\n   foreach (var key in sortedList.Keys)\n   {\n      WriteLine($\"Key :{key} - value :\n      {sortedList[key]}\");\n   }\n}\n```", "```cs\nStack stackList = new Stack();\n```", "```cs\nvar stackList = new Stack();\nstackList.Push(\"Gaurav Aroraa\");\nstackList.Push(\"Vikas Tiwari\");\nstackList.Push(\"Denim Pinto\");\nstackList.Push(\"Diwakar\");\nstackList.Push(\"Merint\");\nWriteLine($\"Count: {stackList.Count}\");\n```", "```cs\nWriteLine($\"Next value without removing:{stackList.Peek()}\");\n```", "```cs\nWriteLine($\"Remove item: {stackList.Pop()}\");\n```", "```cs\nWriteLine(\"Adding more items.\");\nstackList.Push(\"Rama\");\nstackList.Push(\"Shama\");\n```", "```cs\nvar stackList = new Stack();\nstackList.Push(\"Gaurav Aroraa\");\nstackList.Push(\"Vikas Tiwari\");\nstackList.Push(\"Denim Pinto\");\nstackList.Push(\"Diwakar\");\nstackList.Push(\"Merint\");\nstackList.Clear();\n```", "```cs\npublic void StackExample()\n{\n   WriteLine(\"Creating Stack\");\n   var stackList = new Stack();\n   stackList.Push(\"Gaurav Aroraa\");\n   stackList.Push(\"Vikas Tiwari\");\n   stackList.Push(\"Denim Pinto\");\n   stackList.Push(\"Diwakar\");\n   stackList.Push(\"Merint\");\n   WriteLine(\"Reading stack items\");\n   ReadingStack(stackList);\n   WriteLine();\n   WriteLine($\"Count: {stackList.Count}\");\n   WriteLine(\"Adding more items.\");\n   stackList.Push(\"Rama\");\n   stackList.Push(\"Shama\");\n   WriteLine();\n   WriteLine($\"Count: {stackList.Count}\");\n   WriteLine($\"Next value without removing:\n   {stackList.Peek()}\");\n   WriteLine();\n   WriteLine(\"Reading stack items.\");\n   ReadingStack(stackList);\n   WriteLine();\n   WriteLine(\"Remove value\");\n   stackList.Pop();\n   WriteLine();\n   WriteLine(\"Reading stack items after removing an\n   item.\");\n   ReadingStack(stackList);\n   ReadLine();\n}\n```", "```cs\nQueue queue = new Queue();\n```", "```cs\nQueue queue = new Queue();\nqueue.Enqueue(\"Gaurav Aroraa\");\nqueue.Enqueue(\"Vikas Tiwari\");\nqueue.Enqueue(\"Denim Pinto\");\nqueue.Enqueue(\"Diwakar\");\nqueue.Enqueue(\"Merint\");\nWriteLine($\"Count: {queue.Count}\");\n```", "```cs\nWriteLine($\"Next value without removing:{stackList.Peek()}\");\n```", "```cs\nWriteLine($\"Remove item: {queue.Dequeue()}\");\n```", "```cs\nWriteLine(\"Adding more items.\");\nqueue.Enqueue(\"Rama\");\n```", "```cs\nQueue queue = new Queue();\nqueue.Enqueue(\"Gaurav Aroraa\");\nqueue.Enqueue(\"Vikas Tiwari\");\nqueue.Enqueue(\"Denim Pinto\");\nqueue.Enqueue(\"Diwakar\");\nqueue.Enqueue(\"Merint\");\nqueue.Clear();\n```", "```cs\nEnqueue and Dequeue methods to add and remove the items from the collections stored using queue:\n```", "```cs\npublic void QueueExample()\n{\n   WriteLine(\"Creating Queue\");\n   var queue = new Queue();\n   queue.Enqueue(\"Gaurav Aroraa\");\n   queue.Enqueue(\"Vikas Tiwari\");\n   queue.Enqueue(\"Denim Pinto\");\n   queue.Enqueue(\"Diwakar\");\n   queue.Enqueue(\"Merint\");\n   WriteLine(\"Reading Queue items\");\n   ReadingQueue(queue);\n   WriteLine();\n   WriteLine($\"Count: {queue.Count}\");\n   WriteLine(\"Adding more items.\");\n   queue.Enqueue(\"Rama\");\n   queue.Enqueue(\"Shama\");\n   WriteLine();\n   WriteLine($\"Count: {queue.Count}\");\n   WriteLine($\"Next value without removing:\n   {queue.Peek()}\");\n   WriteLine();\n   WriteLine(\"Reading queue items.\");\n   ReadingQueue(queue);\n   WriteLine();\n   WriteLine($\"Remove item: {queue.Dequeue()}\");\n   WriteLine();\n   WriteLine(\"Reading queue items after removing an\n   item.\");\n   ReadingQueue(queue);\n}\n```"]