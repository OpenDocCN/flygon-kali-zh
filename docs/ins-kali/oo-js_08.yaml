- en: Chapter 8. Classes and Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。类和模块
- en: In this chapter, we will explore some of the most interesting features introduced
    in ES6\. JavaScript is a prototype-based language and supports prototypical inheritance.
    In the previous chapter, we discussed the prototype property of an object and
    how prototypical inheritance works in JavaScript. ES6 brings in classes. If you
    are coming from traditional object-oriented languages such as Java, you will immediately
    relate to the well-known concepts of classes. However, they are not the same in
    JavaScript. Classes in JavaScript are a syntactic sugar over the prototypical
    inheritance we discussed in the last chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨ES6中引入的一些最有趣的特性。JavaScript是一种基于原型的语言，支持原型继承。在上一章中，我们讨论了对象的原型属性以及原型继承在JavaScript中的工作原理。ES6引入了类。如果你来自Java等传统的面向对象语言，你会立即理解类的这些熟悉概念。然而，在JavaScript中它们并不相同。JavaScript中的类是对我们在上一章中讨论的原型继承的一种语法糖。
- en: In this chapter, we will take a detailed look at ES6 classes and modules - these
    are welcome changes to this edition of JavaScript and make **Object Oriented Programming**
    (**OOP**) and inheritance significantly easier.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细了解ES6类和模块-这些是JavaScript这一版本中的受欢迎的变化，使**面向对象编程**（**OOP**）和继承变得更加容易。
- en: If you are coming from a traditional object-oriented language, prototypical
    inheritance may feel a bit out of place for you. ES6 classes offer a more traditional
    syntax for you to get familiarized with prototypical inheritance in JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自传统的面向对象语言，原型继承可能会让你感到有些不适。ES6类为你提供了更传统的语法，让你熟悉JavaScript中的原型继承。
- en: Before we try and delve deeper into classes, let me show you why you should
    use the ES6 classes syntax over the prototypical inheritance syntax of ES5.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试深入了解类之前，让我向你展示为什么你应该使用ES6类语法而不是ES5的原型继承语法。
- en: 'In this snippet, I am creating a class hierarchy of `Person`, `Employee`, and
    `Engineer`, pretty straightforward. First, we will see the ES5 prototypical inheritance,
    which is written as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个片段中，我正在创建一个`Person`、`Employee`和`Engineer`的类层次结构，非常简单。首先，我们将看到ES5原型继承，写法如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let''s look at the equivalent code using the ES6 classes syntax:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下使用ES6类语法的等效代码：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you observe the two preceding code snippets, it will be obvious to you that
    the second example is pretty neat. If you already know Java or C#, you will feel
    right at home. However, one important thing to remember is that classes do not
    introduce any new object-oriented inheritance model to the language, but bring
    in a much nicer way to create objects and handle inheritance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察前面的两个代码片段，你会发现第二个例子非常整洁。如果你已经了解Java或C#，你会感到非常熟悉。然而，要记住的一点是，类并没有引入任何新的面向对象的继承模型到语言中，而是引入了一种更好的创建对象和处理继承的方式。
- en: Defining classes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义类
- en: Under the hood, classes are special functions. Just like you can define functions
    using function expressions and declarations, you can define classes as well. One
    way to define classes is using class declaration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，类是特殊的函数。就像你可以使用函数表达式和声明来定义函数一样，你也可以定义类。定义类的一种方式是使用类声明。
- en: 'You can use the `class` keyword and the name of the class. This syntax is very
    similar to that of Java or C#:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`class`关键字和类的名称。这个语法非常类似于Java或C#：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To establish the fact that classes are a special function, if we get the `typeof`
    the `Car` class, we will get a function.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明类是一个特殊的函数，如果我们使用`typeof`操作符来获取`Car`类，我们会得到一个函数。
- en: 'There is an important distinction between classes and normal functions. While
    normal functions are hoisted, classes are not. A normal function is available
    immediately when you enter a scope in which it is declared; this is called **hoisting**,
    which means that a normal function can be declared anywhere in the scope, and
    it will be available. However, classes are not hoisted; they are available only
    after they are declared. For a normal function, you can say:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类和普通函数之间有一个重要的区别。普通函数会被提升，而类不会。普通函数在进入声明它的作用域时立即可用；这被称为**提升**，这意味着普通函数可以在作用域中的任何地方声明，并且它将可用。然而，类不会被提升；它们只有在声明后才可用。对于普通函数，你可以说：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, you cannot use the class before declaring it, for example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你不能在声明之前使用类，例如：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The other way to define a class is to use a class expression. A class expression,
    like a function expression, may or may not have a name.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义类的另一种方式是使用类表达式。类表达式，就像函数表达式一样，可能有也可能没有名称。
- en: 'The following example shows an anonymous class expression:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个匿名类表达式：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you name the class expression, the name is local to the class''s body and
    not available outside:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你给类表达式命名，这个名称只在类的主体内部可用，而在外部是不可用的。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, here, we will give a name to the `Car` class. This name is available
    within the body of the class, but when we try to access it outside the class,
    we get a reference error.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在这里，我们给`Car`类命名。这个名称在类的主体内是可用的，但当我们尝试在类外部访问它时，会得到一个引用错误。
- en: 'You cannot use commas while separating members of a class. Semicolons are valid
    though. This is funny as ES6 ignores semicolons and there is a raging debate about
    using semicolons in ES6\. Consider the following code snippet as an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在类的成员之间不能使用逗号。但分号是有效的。这很有趣，因为ES6忽略了分号，关于在ES6中使用分号有激烈的争论。考虑以下代码片段作为例子：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once defined, we can use classes via a `new` keyword and not a function call;
    here''s the example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义，我们可以通过`new`关键字而不是函数调用来使用类；以下是例子：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Constructor
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: We have used the `constructor` function in the examples so far. A constructor
    is a special method used to create and initialize an object created with the class.
    You can have only one constructor in a class. Constructors are a bit different
    from the normal constructor functions. Unlike normal constructors, a class constructor
    can call its parent class constructor via `super()`. We will discuss this in detail
    when we look at inheritance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在示例中使用了`constructor`函数。构造函数是用于创建和初始化使用类创建的对象的特殊方法。一个类中只能有一个构造函数。构造函数与普通构造函数有些不同。与普通构造函数不同，类构造函数可以通过`super()`调用其父类构造函数。当我们讨论继承时，我们将详细讨论这一点。
- en: Prototype methods
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型方法
- en: Prototype methods are prototype properties of the class, and they are inherited
    by instances of the class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 原型方法是类的原型属性，并且被类的实例继承。
- en: 'Prototype methods can also have `getter` and `setter` methods. The syntax of
    getters and setters is the same as ES5:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 原型方法也可以有`getter`和`setter`方法。获取器和设置器的语法与ES5相同：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, computed properties are also supported. You can define the name
    of the method using the expression. The expression needs to be put inside square
    brackets. We discussed this shorthand syntax in earlier chapters. The following
    are all equivalent:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，计算属性也是支持的。您可以使用表达式定义方法的名称。表达式需要放在方括号内。我们在之前的章节中讨论了这种简写语法。以下都是等价的：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Static methods
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态方法
- en: 'Static methods are associated with the class and not with an instance of that
    class (object). In other words, you can only reach a static method using the name
    of the class. Static methods are invoked without instantiating the class and they
    cannot be called on an instance of a class. Static methods are popular in creating
    utility or helper methods. Consider the following piece of code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法与类相关联，而不是与该类的实例（对象）相关联。换句话说，您只能使用类的名称来调用静态方法。静态方法在不实例化类的情况下被调用，它们不能在类的实例上调用。静态方法在创建实用程序或辅助方法时很受欢迎。考虑以下代码片段：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Static properties
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态属性
- en: You may ask-well, we have static methods, what about static properties? In the
    hurry of getting ES6 ready, they did not add static properties. They will be added
    in future iterations of the language.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问，我们有静态方法，那静态属性呢？在忙于准备ES6的过程中，他们没有添加静态属性。它们将在语言的未来迭代中添加。
- en: Generator methods
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器方法
- en: 'We discussed hugely useful generator functions a few chapters back. You can
    add generator functions as part of class, and they are called generator methods.
    A generator method is useful because you can define their key as `Symbol.iterator`.
    The following example shows how generator methods can be defined inside a class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中讨论了非常有用的生成器函数。您可以将生成器函数作为类的一部分添加，并将它们称为生成器方法。生成器方法很有用，因为您可以将它们的键定义为`Symbol.iterator`。以下示例显示了如何在类内部定义生成器方法：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Subclassing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子类化
- en: So far, we discussed how to declare classes and the types of members classes
    can support. A major use of a class is to serve as a template to create other
    subclasses. When you create a child class from a class, you derive properties
    of the parent class and extend the parent class by adding more features of its
    own.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了如何声明类以及类可以支持的成员类型。类的一个主要用途是作为创建其他子类的模板。当您从一个类创建子类时，您会继承父类的属性，并通过添加自己的特性来扩展父类。
- en: 'Let''s look at the following de facto example of inheritance:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看继承的以下事实例子：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here, `Animal` is the base class and the `Cat` class is derived from the class
    `Animal`. The extend clause allows you to create a subclass of an existing class.
    This example demonstrates the syntax of subclassing. Let''s enhance this example
    a bit more by writing the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Animal`是基类，`Cat`类是从类`Animal`派生出来的。扩展子句允许您创建现有类的子类。此示例演示了子类化的语法。让我们通过编写以下代码来进一步增强此示例：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we are using the `super` keyword to call functions from the parent class.
    The following are the three ways in which the `super` keyword can be used:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`super`关键字来调用父类的函数。以下是`super`关键字的三种用法：
- en: You can use `super (<params>)` as a function call to invoke the constructor
    of the parent class
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`super (<params>)`作为函数调用来调用父类的构造函数
- en: You can use `super.<parentClassMethod>` to access the parent class methods
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`super.<parentClassMethod>`来访问父类方法
- en: You can use `super.<parentClassProp>` to access the parent class properties
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用`super.<parentClassProp>`来访问父类属性
- en: 'In the derive class constructor, you must call the `super()` method before
    you can use,  `this` keyword; for example, the following piece of code will fail:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在派生类构造函数中，您必须在使用`this`关键字之前调用`super()`方法；例如，以下代码将失败：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can''t implicitly leave a derived constructor with a `super()` method as
    an error:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能将派生构造函数隐式地使用`super()`方法作为错误：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you don''t provide a constructor for the base class, the following constructor
    is used:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有为基类提供构造函数，则将使用以下构造函数：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For the derived classes, the default constructor is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于派生类，默认构造函数如下：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Mixins
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混入
- en: JavaScript supports only single inheritance. At most, a class can have one superclass.
    This is limiting when you want to create class hierarchies but also want to inherit
    tool methods from different sources.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript仅支持单一继承。最多，一个类可以有一个超类。当您想要创建类层次结构，但又想要从不同来源继承工具方法时，这是有限的。
- en: 'Let''s say we have a scenario where we have a `Person` class, and we create
    a subclass, `Employee`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个场景，我们有一个`Person`类，并且我们创建一个子类`Employee`：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also want to inherit functions from two utility classes, `BackgroundCheck`-this
    class does employee background checks-and `Onboard`-this class handles employee
    onboarding processes, such as printing badges and so on:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望从两个实用类`BackgroundCheck`（此类执行员工背景检查）和`Onboard`（此类处理员工入职流程，例如打印工牌等）中继承函数：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Both `BackgroundCheck` and `Onboard` classes are templates, and their functionality
    will be used multiple times. Such templates (abstract subclasses) are called mixins.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`BackgroundCheck`和`Onboard`类都是模板，它们的功能将被多次使用。这种模板（抽象子类）称为mixin。'
- en: 'As multiple inheritance is not possible in JavaScript, we will employ a different
    technique to achieve this. A popular way of implementing mixins in ES6 is to write
    a function with a superclass as an input and a subclass extending that superclass
    as the output, for example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript不支持多重继承，我们将采用不同的技术来实现这一点。在ES6中实现mixin的一种流行方式是编写一个以超类为输入的函数，并将子类扩展为输出，例如：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This essentially means that `Employee` is a subclass of `BackgroundCheck`, which
    in turn is a subclass of `Onboard`, which in turn is a subclass of `Person`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着`Employee`是`BackgroundCheck`的子类，而`BackgroundCheck`又是`Onboard`的子类，而`Onboard`又是`Person`的子类。
- en: Modules
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: JavaScript modules are not new. In fact, there were have been libraries that
    support modules for some time now. ES6, however, offers built-in modules. Traditionally,
    JavaScript's major use was on browsers, where most of the JavaScript code was
    either embedded or small enough to manage without much trouble. Things have changed.
    JavaScript projects are now on a massive scale. Without an efficient system of
    spreading the code into files and directories, managing code becomes a nightmare.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript模块并不新鲜。事实上，有一段时间支持模块的库。然而，ES6提供了内置模块。传统上，JavaScript主要用于浏览器，大部分JavaScript代码要么是嵌入式的，要么足够小，可以轻松管理。事情已经改变。JavaScript项目现在规模庞大。如果没有一个有效的系统将代码分散到文件和目录中，管理代码将变成一场噩梦。
- en: ES6 modules are files. One module per file and one file per module. There is
    no module keyword. Whatever code you write in the module file is local to the
    module unless you export it. You may have a bunch of functions in a module, and
    you want to export only a few of them. You can export module functionality in
    a couple of ways.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ES6模块是文件。一个文件对应一个模块。没有模块关键字。您在模块文件中编写的任何代码都是局部的，除非您导出它。您可能在一个模块中有一堆函数，但您只想导出其中的一些。您可以以几种方式导出模块功能。
- en: The first way is to use the `export` keyword. You can export any top-level `function`,
    `class`, `var`, `let`, or `const`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是使用`export`关键字。您可以导出任何顶级`function`，`class`，`var`，`let`或`const`。
- en: 'The following example shows a module inside `server.js` where we export a `function`,
    a `class`, and a `const`. We don''t export the `processConfig()` function, and
    any file importing this module won''t be able to access the unexported function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了`server.js`中的一个模块，我们在其中导出了一个`function`，一个`class`和一个`const`。我们不导出`processConfig()`函数，任何导入此模块的文件都无法访问未导出的函数：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Any code that has access to `server.js` can import the exported functionality:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以访问`server.js`的代码都可以导入导出的功能：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, another JavaScript file is importing `Config` and `startServer`
    from the `server` module (with the corresponding JavaScript file `server.js`,
    we drop the file extension).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，另一个JavaScript文件正在从`server`模块（对应的JavaScript文件`server.js`）中导入`Config`和`startServer`（我们省略了文件扩展名）。
- en: 'You can also import everything that was exported from the module:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以导入模块中导出的所有内容：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you have only one thing to export, you can use the default export syntax.
    Consider the following piece of code as an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一件事要导出，可以使用默认导出语法。考虑以下代码片段作为示例：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, we will keep the class anonymous as we can use the module name
    itself as the reference outside.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将保持类匿名，因为我们可以在外部使用模块名称本身作为引用。
- en: 'Before ES6 modules, external libraries supported several approaches to modules.
    They established fairly good guidelines/styles for ES6 to follow. The following
    style is followed by ES6:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6模块之前，外部库支持了几种模块方法。它们为ES6制定了相当不错的指南/风格。ES6遵循以下风格：
- en: Modules are singletons. A module is imported only once, even if you try to import
    it several times in your code.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块是单例的。模块只被导入一次，即使您在代码中尝试多次导入它。
- en: Variable, functions, and other type of declarations are local to the module.
    Only declarations marked with `export` are available outside the module for `import`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量、函数和其他类型的声明都是局部的。只有用`export`标记的声明才能在模块外部进行`import`。
- en: 'Modules can import from other modules. The following are the three options
    for referring to other modules:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块可以从其他模块导入。以下是引用其他模块的三种选项：
- en: You can use relative paths `("../lib/server");` these paths are resolved relatively
    to the file importing the module. For example, if you are importing the module
    from `<project_path>/src/app.js`, and the module file is located at `<project_path>/lib/server.js`,
    you will need to provide a path relative to the `app.js` - `../lib/server` in
    this case.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用相对路径`("../lib/server");`这些路径是相对于导入模块的文件解析的。例如，如果您从`<project_path>/src/app.js`导入模块，并且模块文件位于`<project_path>/lib/server.js`，您需要提供相对于`app.js`的路径
    - 在这种情况下是`../lib/server`。
- en: Absolute paths can also point to the module file directly.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对路径也可以直接指向模块文件。
- en: You can drop the file `.js` extension while importing the module.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在导入模块时，可以省略文件的`.js`扩展名。
- en: 'Before we go into more details of the ES6 module system, we need to understand
    how ES5 supported them via external libraries. ES5 has two non-compatible module
    systems, which are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解ES6模块系统的更多细节之前，我们需要了解ES5是如何通过外部库支持它们的。ES5有两种不兼容的模块系统，分别是：
- en: '**CommonJS**: This is the dominant standard as Node.js adopted it'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CommonJS**：这是主导标准，因为Node.js采用了它'
- en: '**AMD** (**Asynchronous Module Definition**): This is slightly more complicated
    than CommonJS and designed for asynchronous module loading, and targeted toward
    browsers'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AMD**（**异步模块定义**）：这比CommonJS稍微复杂一些，设计用于异步模块加载，并针对浏览器'
- en: ES6 modules were aimed to be easy to use for engineers coming from any of these
    systems.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ES6模块的目标是让来自任何这些系统的工程师都能轻松使用。
- en: Export lists
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出列表
- en: 'Instead of tagging each exported function or class from your module with the
    `export` keyword, you can write a single list of all the things you want to export
    from the module, which are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用`export`关键字为模块中的每个导出函数或类打标签不同，您可以编写一个包含要从模块导出的所有内容的单个列表，如下所示：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The first line of the module is the list of exports. You can have multiple `export`
    lists in the module file and the list can appear anywhere in the file. You can
    also have a mix of `export` list and `export` declarations in the same module
    file, but you can `export` one name only once.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的第一行是导出的列表。您可以在模块文件中有多个`export`列表，并且列表可以出现在文件的任何位置。您还可以在同一个模块文件中同时拥有`export`列表和`export`声明的混合，但是您只能`export`一个名称一次。
- en: 'In a large project, there are cases when you encounter name conflicts. Suppose
    you import two modules, and both of them export a function with the same name.
    In such cases, you can rename the imports as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大型项目中，有时会遇到名称冲突的情况。假设您导入了两个模块，并且它们都导出了相同名称的函数。在这种情况下，您可以按如下方式重命名导入：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, both the imported modules exported a name, `trunc`, and hence created
    a conflict of names. We can alias them to resolve this conflict.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，导入的两个模块都导出了一个名为`trunc`的名称，因此创建了名称冲突。我们可以为它们取别名以解决这个冲突。
- en: 'You can do the renaming while exporting as well, which is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在导出时进行重命名，如下所示：
- en: '[PRE28]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you are already using ES5 module systems, ES6 modules may look redundant.
    However, it was very important for the language to have support for such an important
    feature. ES6 module syntax is also standardized and more compact than the other
    alternatives.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在使用ES5模块系统，ES6模块可能看起来多余。然而，对于语言来说，支持这样一个重要的功能非常重要。ES6模块语法也是标准化的，比其他替代方案更紧凑。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on understanding ES6 classes. ES6 classes give formal
    support to the common JavaScript pattern of simulating class-like inheritance
    hierarchies using functions and prototypes. They are syntactic sugaring over prototype-based
    OO, offering a convenient declarative form for class patterns which encourage
    interoperability. ES6 classes offer a much nicer, cleaner, and clearer syntax
    for creating these objects and dealing with inheritance. ES6 classes provide support
    for constructors, instance and static methods, (prototype-based) inheritance,
    and super calls.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于理解ES6类。ES6类正式支持了使用函数和原型模拟类似继承层次结构的常见JavaScript模式。它们是基于原型的OO的语法糖，为鼓励互操作性的类模式提供了方便的声明形式。ES6类提供了一个更好、更清晰的语法，用于创建这些对象并处理继承。ES6类支持构造函数、实例和静态方法、（基于原型的）继承和super调用。
- en: So far, JavaScript lacked one of the most basic features - modules. Before ES6,
    we wrote modules using either CommonJS or AMD. ES6 brings modules into JavaScript
    officially. In this chapter, we took a detailed look at how modules are used in
    ES6.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，JavaScript缺少最基本的功能之一 - 模块。在ES6之前，我们使用CommonJS或AMD编写模块。ES6正式将模块引入JavaScript。在本章中，我们详细了解了ES6中模块的使用。
- en: The next chapter focuses on another interesting addition to ES6 - proxies and
    promises.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将重点介绍ES6的另一个有趣的新增功能 - 代理和承诺。
