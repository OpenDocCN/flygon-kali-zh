- en: '*Chapter 3*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*'
- en: Control Flow
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this lesson, you''ll be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本课程结束时，你将能够：
- en: Control the flow of execution using the `if` and `else` statements in Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java中的`if`和`else`语句控制执行流程
- en: Check through multiple conditions using the switch case statements in Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java中的switch case语句检查多个条件
- en: Utilize the looping constructs in Java to write concise code to perform repetitive
    actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Java中的循环结构编写简洁的代码来执行重复的操作
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: So far, we have looked at programs that consist of a series of statements that
    the Java compiler executes sequentially. However, in certain cases, we might need
    to perform actions based on the current state of the program.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过由Java编译器按顺序执行的一系列语句组成的程序。然而，在某些情况下，我们可能需要根据程序的当前状态执行操作。
- en: Consider the example of the software that's installed in an ATM machine – it
    performs a set of actions, that is, it allows a transaction to occur when the
    PIN that's been entered by the user is correct. However, when the PIN that's been
    entered is incorrect, then the software performs another set of actions, that
    is, it informs the user that the PIN does not match and asks the user to reenter
    the PIN. You'll find that such logical constructs that depend upon values or stages
    are present in almost all real-world programs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下安装在ATM机中的软件的例子-它执行一系列操作，也就是说，当用户输入的PIN正确时，它允许交易发生。然而，当输入的PIN不正确时，软件执行另一组操作，也就是告知用户PIN不匹配，并要求用户重新输入PIN。你会发现，几乎所有现实世界的程序中都存在依赖于值或阶段的这种逻辑结构。
- en: There are also times where a particular task might need to be performed repeatedly,
    that is, for a particular time duration, for a particular set number of times,
    or until a condition is met. Continuing from our example of the ATM machine, if
    the number of times an incorrect password is entered exceeds three, then the card
    is blocked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 也有时候，可能需要重复执行特定任务，也就是说，在特定时间段内，特定次数，或者直到满足条件为止。延续我们关于ATM机的例子，如果输入错误密码的次数超过三次，那么卡就会被锁定。
- en: 'These logical constructs act as building blocks, as we move toward building
    complex programs in Java. This lesson will dive into these basic constructs, which
    can be categorized into two general classes, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些逻辑结构作为构建复杂Java程序的基本构件。本课程将深入探讨这些基本构件，可以分为以下两类：
- en: Conditional statements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件语句
- en: Looping statements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环语句
- en: Conditional Statements
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'Conditional statements are used to control the flow of execution of the Java
    compiler based on certain conditions. This implies that we are making a choice
    based on a certain value or the state of a program. The conditional statements
    that are available in Java are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句用于根据某些条件控制Java编译器的执行流程。这意味着我们根据某个值或程序的状态做出选择。Java中可用的条件语句如下：
- en: The `if` statement
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`语句'
- en: The `if-else` statement
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if-else`语句'
- en: The `else-if` statement
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else-if`语句'
- en: The `switch` statement
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`语句'
- en: The if Statement
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if语句
- en: The if statement tests a condition, and when the condition is true, the code
    contained in the if block is executed. If the condition is not true, then the
    code in the block is skipped and the execution continues from the line after the
    block.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: if语句测试一个条件，当条件为真时，执行if块中包含的代码。如果条件不为真，则跳过块中的代码，执行从块后的行继续执行。
- en: 'The syntax for an `if` statement is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的语法如下：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Consider the following example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since the condition `a<10` is true, the print statement is executed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于条件`a<10`为真，打印语句被执行。
- en: 'We can check for multiple values in the `if` condition as well. Consider the
    following example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`if`条件中检查多个值。考虑以下例子：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code snippet checks whether the value of `age` is above 50, but
    at most 70, excluding 60.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段检查`age`的值是否超过50，但最多为70，不包括60。
- en: 'When the statement in the `if` block is just one line, then we don''t need
    to include the enclosing braces:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当`if`块中的语句只有一行时，我们不需要包括括号：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The else Statement
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else语句
- en: For some scenarios, we need a different block of code to be executed if the
    `if` condition fails. For that, we can use the `else` clause. It is optional.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些情况，如果`if`条件失败，我们需要执行不同的代码块。为此，我们可以使用`else`子句。这是可选的。
- en: 'The syntax for the `if else` statement is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`if else`语句的语法如下：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Exercise 6: Implementing a Simple if-else Statement'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习6：实现简单的if-else语句
- en: 'In this exercise, we are going to create a program that checks whether bus
    tickets can be book based on the number of empty seats. Complete the following
    steps to do so:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个程序，根据空座位的数量来检查是否可以预订公交车票。完成以下步骤来实现：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建** | **类**。
- en: Enter `Booking` as the class name, and then click **OK**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Booking`作为类名，然后点击**OK**。
- en: 'Set up the `main` method:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`main`方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Initialize two variables, one for the number of empty seats and the other for
    the requested ticket numbers:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化两个变量，一个用于空座位数量，另一个用于请求的票数：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use the `if` condition to check whether the requested ticket numbers are lower
    than or equal to the empty seats available, and print the appropriate messages:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`if`条件检查所请求的票数是否小于或等于可用的空座位，并打印适当的消息：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Run the program.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: 'You should get the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The else-if Statement
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: else-if语句
- en: '`else if` statements are used when we wish to compare multiple conditions before
    the `else` clause is evaluated.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望在评估`else`子句之前比较多个条件时，可以使用`else if`语句。
- en: 'The syntax for the `else if` statement is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`else if`语句的语法如下：'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Exercise 7: Implementing the else-if Statements'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习7：实现else-if语句
- en: 'We are building an e-commerce application that calculates the delivery fee
    based on the distance between the seller and the buyer. A buyer purchases an item
    on our website and enters the delivery address. Based on the distance, we calculate
    the delivery fee and display it to the user. In this exercise, we are given the
    following table and need to write a program to output the delivery fee to the
    user:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建一个电子商务应用程序，根据卖家和买家之间的距离计算交付费用。买家在我们的网站上购买物品并输入交付地址。根据距离，我们计算交付费用并显示给用户。在这个练习中，我们得到了以下表格，并需要编写一个程序来向用户输出交付费用：
- en: '![Table 3.1: Table showing the distance and its corresponding fee](img/C09581_Table_03_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![表3.1：显示距离及其对应费用的表](img/C09581_Table_03_01.jpg)'
- en: 'Table 3.1: Table showing the distance and its corresponding fee'
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表3.1：显示距离及其对应费用的表
- en: 'To do this, perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建** | **类**。
- en: Enter `DeliveryFee` as the class name, and then click **OK**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`DeliveryFee`作为类名，然后单击**OK**。
- en: 'Open the created class, and then create the main method:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开创建的类，然后创建主方法：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Within the `main` method, create two integer variables, one called `distance`
    and another called `fee`. The two variables will hold the `distance` and delivery
    fees, respectively. Initialize the di`stance` to 10 and the `fee` to zero:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`方法中，创建两个整数变量，一个称为`distance`，另一个称为`fee`。这两个变量将分别保存`distance`和交付费用。将`distance`初始化为10，`fee`初始化为零：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create an `if` block to check the first condition in the table:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`if`块来检查表中的第一个条件：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This `if` statement checks whether the `distance` is above 0 but below 5 and
    sets the delivery `fee` to 2 dollars.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`if`语句检查`distance`是否大于0但小于5，并将交付`fee`设置为2美元。
- en: 'Add an `else if` statement to check the second condition in the table and set
    the `fee` to 5 dollars:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`else if`语句来检查表中的第二个条件，并将`fee`设置为5美元：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add two more `else if` statements to check for the third and fourth conditions
    in the table, as shown in the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加两个`else if`语句来检查表中的第三和第四个条件，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, add an `else` statement to match the last condition in the table and
    set the appropriate delivery `fee`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个`else`语句来匹配表中的最后一个条件，并设置适当的交付`fee`：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Print out the value of the fee:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出`fee`的值：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the program and observe the output:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序并观察输出：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Nested if Statements
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套的if语句
- en: 'We can have `if` statements inside other `if` statements. This construct is
    called a nested `if` statement. We evaluate the outer condition first and if it
    succeeds, we then evaluate a second inner `if` statement and so on until all the
    `if` statements have finished:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在其他`if`语句内部使用`if`语句。这种结构称为嵌套的`if`语句。我们首先评估外部条件，如果成功，然后评估第二个内部`if`语句，依此类推，直到所有`if`语句都完成：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can nest as many statements as we wish to, and the compiler will evaluate
    them, starting from the top going downward.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以嵌套任意多的语句，并且编译器将从顶部向下评估它们。
- en: switch case Statements
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: switch case语句
- en: 'The `switch case` statements are an easier and more concise way of doing multiple
    `if` `else` statements when the same value is being compared for equality. The
    following is a quick comparison:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch case`语句是在相同的值进行相等比较时，执行多个`if` `else`语句的更简单更简洁的方法。以下是一个快速比较：'
- en: 'A traditional `else if` statement would look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的`else if`语句如下所示：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'However, with the same logic, when implemented using a `switch case` statement,
    it would look as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`switch case`语句实现相同逻辑时，将如下所示：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice how this code is more readable.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这段代码更易读。
- en: To use a `switch` statement, first you need to declare it with the keyword `switch`,
    followed by a condition in parentheses. The `case` statements are used to check
    these conditions. They are checked in a sequential order.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`switch`语句，首先需要使用关键字`switch`声明它，后跟括号中的条件。`case`语句用于检查这些条件。它们按顺序检查。
- en: The compiler will check the value of `age` against all the cases and if it finds
    a match, the code in that `case` will execute and so will all the cases following
    it. For example, if our `age` was equal to 10, the first `case` will be matched
    and then the second `case`, the third `case`, and the `default` `case`. The `default`
    `case` is executed if all the other cases are not matched. For example, if `age`
    is not 10, 20, or 30, then the discount would be set to 50\. It can be interpreted
    as the `else` clause in `if-else` statements. The `default` `case` is optional
    and can be omitted.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器将检查`age`的值与所有`case`进行匹配，如果找到匹配，那么将执行该`case`中的代码以及其后的所有`case`。例如，如果我们的`age`等于10，将匹配第一个`case`，然后第二个`case`，第三个`case`和`default`
    `case`。如果所有其他情况都不匹配，则执行`default` `case`。例如，如果`age`不是10、20或30，则折扣将设置为50。它可以被解释为`if-else`语句中的`else`子句。`default`
    `case`是可选的，可以省略。
- en: If `age` was equal to 30, then the third `case` would be matched and executed.
    Since the `default` `case` is optional, we can leave it out and the execution
    will end after the third `case`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`age`等于30，那么第三个`case`将被匹配并执行。由于`default` `case`是可选的，我们可以将其省略，执行将在第三个`case`之后结束。
- en: 'Most of the time, what we really wish for is the execution to end at the matched
    `case`. We want it to be so that if the first `case` is matched, then the code
    in that `case` is executed and the rest of the cases are ignored. To achieve this,
    we use a `break` statement to tell the compiler to continue to execute outside
    the `switch` statement. Here is the same `switch case` with `break` statements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们真正希望的是执行结束于匹配的`case`。我们希望如果匹配了第一个`case`，那么就执行该`case`中的代码，并忽略其余的情况。为了实现这一点，我们使用`break`语句告诉编译器继续在`switch`语句之外执行。以下是带有`break`语句的相同`switch
    case`：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Because the default is the last `case`, we can safely ignore the `break` statement
    because the execution will end there anyway.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`default`是最后一个`case`，所以我们可以安全地忽略`break`语句，因为执行将在那里结束。
- en: 'Note:'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: It is good design to always add a break statement in case another programmer
    adds extra cases in the future.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，另一个程序员添加额外的情况时，始终添加一个break语句是一个好的设计。
- en: 'Activity 6: Controlling the Flow of Execution Using Conditionals'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动6：使用条件控制执行流程
- en: 'A factory pays its workers $10 per hour. The standard working day is 8 hours,
    but the factory gives extra compensation for additional hours. The policy it follows
    to calculate the salary is like so:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂每小时支付工人10美元。标准工作日是8小时，但工厂为额外的工作时间提供额外的补偿。它遵循的政策是计算工资如下：
- en: If a person works for less than 8 hours – number of hours * $10
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个人工作少于8小时-每小时* $10
- en: If the person works for more than 8 hours but less than 12 – 20% extra for the
    additional hours
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个人工作超过8小时但少于12小时-额外20%的工资
- en: More than 12 hours – additional day's salary is credited
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过12小时-额外的一天工资被记入
- en: Create a program that calculates and displays the salary earned by the worker
    based on the number of hours worked.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个程序，根据工作小时数计算并显示工人赚取的工资。
- en: 'To meet this requirement, perform the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足这个要求，执行以下步骤：
- en: Initialize two variables and the values of the working hours and salary.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化两个变量和工作小时和工资的值。
- en: In the `if` condition, check whether the working hours of the worker is below
    the required hours. If the condition holds `true`, then the salary should be (working
    hours * 10).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`条件中，检查工人的工作小时是否低于所需小时。如果条件成立，则工资应为（工作小时* 10）。
- en: Use the `else if` statement to check if the working hours lies between 8 hours
    and 12 hours. If that is true, then the salary should be calculated at $10 per
    hour for the first eight hours and the remaining hours should be calculated at
    $12 per hour.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`else if`语句检查工作小时是否介于8小时和12小时之间。如果是这样，那么工资应该按照每小时10美元计算前8小时，剩下的小时应该按照每小时12美元计算。
- en: Use the `else` block for the default of $160 (additional day's salary) per day.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`else`块为默认的每天$160（额外的一天工资）。
- en: Execute the program to observe the output.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行程序以观察输出。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 308.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第308页找到。
- en: 'Activity 7: Developing a Temperature System'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动7：开发温度系统
- en: 'Write a program in Java that displays simple messages, based on the temperature.
    The temperature is generalized to the following three sections:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中编写一个程序，根据温度显示简单的消息。温度概括为以下三个部分：
- en: 'High: In this case, suggest the user to use a sunblock'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高：在这种情况下，建议用户使用防晒霜
- en: 'Low: In this case, suggest the user to wear a coat'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低：在这种情况下，建议用户穿外套
- en: 'Humid: In this case, suggest the user to open the windows'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 潮湿：在这种情况下，建议用户打开窗户
- en: 'To do this perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: Declare two strings, `temp` and `weatherWarning`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明两个字符串，`temp`和`weatherWarning`。
- en: Initialize `temp` with either `High`, `Low`, or `Humid`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`High`、`Low`或`Humid`初始化`temp`。
- en: Create a switch statement that checks the different cases of `temp`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个检查`temp`不同情况的switch语句。
- en: Initialize the variable `weatherWarning` to appropriate messages for each case
    of temp (`High`, `Low`, `Humid`).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量`weatherWarning`初始化为每种温度情况的适当消息（`High`、`Low`、`Humid`）。
- en: In the default case, initialize `weatherWarning` to "The weather looks good.
    Take a walk outside".
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认情况下，将`weatherWarning`初始化为“天气看起来不错。出去散步”。
- en: After you complete the switch construct, print the value of `weatherWarning`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成switch结构后，打印`weatherWarning`的值。
- en: 'Run the program to see the output, it should be similar to:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序以查看输出，应该类似于：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 309.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第309页找到。
- en: Looping Constructs
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环结构
- en: 'Looping constructs are used to perform a certain operation a given number of
    times as long as a condition is being met. They are commonly used to perform a
    specific operation on the items of a list. An example is when we want to find
    the summation of all the numbers from 1 to 100\. Java supports the following looping
    constructs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 循环结构用于在满足条件的情况下多次执行特定操作。它们通常用于对列表项执行特定操作。例如，当我们想要找到从1到100所有数字的总和时。Java支持以下循环结构：
- en: '`for` loops'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: '`for each` loops'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for each`循环'
- en: '`while` loops'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`循环'
- en: '`do while` loops'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do while`循环'
- en: for Loops
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for循环
- en: 'The syntax of the `for` loop is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的语法如下：'
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The initialization statements are executed when the `for` loop starts executing.
    It can be more than one expression, all separated by commas. The expressions must
    all be of the same type:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化语句在`for`循环开始执行时执行。可以有多个表达式，用逗号分隔。所有表达式必须是相同类型的：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The condition section of the `for` loop must evaluate to true or false. If there
    is no expression, the condition defaults to true.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的条件部分必须评估为true或false。如果没有表达式，则条件默认为true。'
- en: The expression part is executed after each iteration of the statements, as long
    as the condition is true. You can have more than one expression separated by a
    comma.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句的每次迭代后执行表达式部分，只要条件为真。可以有多个用逗号分隔的表达式。
- en: Note
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The expressions must be valid Java expressions, that is, expressions that can
    be terminated by a semicolon.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式必须是有效的Java表达式，即可以以分号终止的表达式。
- en: 'Here is how a `for` loop works:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`for`循环的工作原理：
- en: First, the initialization is evaluated.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，初始化被评估。
- en: Then, the condition is checked. If the condition is true, the statements contained
    in the `for` block are executed.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，检查条件。如果条件为真，则执行`for`块中包含的语句。
- en: After the statements are executed, the expression is executed, and then the
    condition is checked again.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行语句后，执行表达式，然后再次检查条件。
- en: If it is still not false, the statements are executed again, then the expression
    is executed, and the condition is evaluated again.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果仍然不是false，则再次执行语句，然后执行表达式，再次评估条件。
- en: This is repeated until the condition evaluates to false.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将重复，直到条件评估为false。
- en: When the condition evaluates to false, the `for` loop completes and the code
    sections after the loop are executed.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当条件求值为false时，`for`循环完成，循环后的代码部分被执行。
- en: 'Exercise 8: Implementing a Simple for Loop'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习8：实现一个简单的for循环
- en: 'To print all the single digit numbers in increasing and decreasing order, perform
    the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打印所有递增和递减的个位数，执行以下步骤：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，选择**新建** | **类**。
- en: Enter `Looping` as the class name, and then click **OK**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Looping`作为类名，然后点击**OK**。
- en: 'Set up the `main` method:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`main`方法：
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Implement a `for` loop that initializes a variable `i` at zero, a condition
    so that the value remains below 10, and `i` should be incremented by one in each
    iteration:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`for`循环，初始化一个变量`i`为零，一个条件使得值保持在10以下，并且`i`应该在每次迭代中递增一个：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Implement another `for` loop that initializes a variable `k` at 9, a condition
    so that the value remains above 0, and `k` should be decremented by one in each
    iteration:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现另一个`for`循环，初始化一个变量`k`为9，一个条件使得值保持在0以上，并且`k`应该在每次迭代中减少一个：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Output:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Activity 8: Implementing the for Loop'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动8：实现for循环
- en: John, a peach grower, picks peaches from his trees, puts them into fruit boxes
    and ships them. He can ship a fruit box if it is full with 20 peaches. If he has
    less than 20 peaches, he has to pick more peaches so he can fill a fruit box with
    20 peaches and ship it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰是一个桃农，他从树上摘桃子，把它们放进水果箱里然后运输。如果一个水果箱里装满了20个桃子，他就可以运输。如果他的桃子少于20个，他就必须摘更多的桃子，这样他就可以装满一个水果箱，然后运输。
- en: 'We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. We get the number of peaches from John, and
    we print a message for each group of 20 peaches and say how many peaches have
    been shipped so far. We print "shipped 60 peaches so far" for the third box, for
    example. We would like to do this with a `for` loop. We do not need to worry about
    the peaches leftover. To achieve this, perform the following steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想通过编写一个自动化软件来帮助约翰启动填充和运输箱子。我们从约翰那里得到桃子的数量，然后为每组20个桃子打印一条消息，并说明到目前为止已经运输了多少桃子。例如，对于第三个箱子，我们打印“到目前为止已经运输了60个桃子”。我们想用`for`循环来实现这一点。我们不需要担心剩下的桃子。为了实现这一点，执行以下步骤：
- en: Create a new class and enter `PeachBoxCounter` as the class name
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的类，输入`PeachBoxCounter`作为类名
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: In the `main()` use `System.out.print` to ask the user for the `numberOfPeaches`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中使用`System.out.print`询问用户`numberOfPeaches`。
- en: Write a for loop that counts the peaches that are shipped so far. This starts
    from zero, increases 20 by 20 until the peaches left is less than 20\.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`for`循环，计算到目前为止运输的桃子数量。这从零开始，每次增加20，直到剩下的桃子少于20。
- en: In the `for` loop, print the number of peaches shipped so far.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环中，打印到目前为止运输的桃子数量。
- en: Run the main program.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 310.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在310页找到。
- en: All three sections of the `for` loop are optional. This implies that the line
    `for( ; ;)` will provide any error. It just provides an invite loop.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环的所有三个部分都是可选的。这意味着行`for( ; ;) `将提供任何错误。它只提供一个邀请循环。'
- en: 'This `for` loop doesn''t do anything and won''t terminate. Variables declared
    in the for loop declaration are available in the statements of the `for` loop.
    For example, in our first example, we printed the value of `i` from the statements
    sections because the variable `i` was declared in the `for` loop. This variable
    is, however, not available after the `for` loop and can be freely declared. It
    can''t however be declared inside the `for` loop again:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`for`循环什么也不做，也不会终止。在`for`循环声明的变量在`for`循环的语句中是可用的。例如，在我们的第一个例子中，我们从语句部分打印了`i`的值，因为变量`i`是在`for`循环中声明的。然而，这个变量在`for`循环后不可用，并且可以自由声明。但是不能在`for`循环内再次声明：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For loops can also have braces enclosing the statements if we have more than
    one statement. This is just as we discussed in the `if-else` statements earlier.
    If we have only one statement, then we don''t need to have braces. When the statements
    are more than one, they need to be enclosed within braces. In the following example,
    we are printing out the value of `i` and `j`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环也可以有括号括住的语句，如果我们有多于一个语句。这就像我们之前讨论的`if-else`语句一样。如果只有一个语句，那么我们不需要括号。当语句多于一个时，它们需要被括在大括号内。在下面的例子中，我们打印出`i`和`j`的值：'
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The expressions must be valid Java expressions, that is, expressions that can
    be terminated by a semicolon.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式必须是有效的Java表达式，即可以用分号终止的表达式。
- en: A `break` statement can be used to interrupt the `for` loop and break out of
    the loop. It takes the execution outside the `for` loop.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`语句可以用来中断`for`循环并跳出循环。它将执行超出`for`循环的范围。'
- en: 'For example, we might wish to terminate the `for` loop we created earlier if
    `i` is equal to 5:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`i`等于5，我们可能希望终止我们之前创建的`for`循环：
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Output:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE33]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding `for` loop iterates from 0, 1, 2, and 3 and terminates at 4\.
    This is because after the condition `i`, that is, 5 is met, the break statement
    is executed, which ends the `for` loop and the statements after it are not executed.
    Execution continues outside the loop.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`for`循环从0、1、2和3迭代，终止于4。这是因为在满足条件`i`即5之后，执行了`break`语句，这结束了`for`循环，循环后的语句不会被执行。执行继续在循环外部。
- en: 'The `continue` statement is used to tell the loop to skip all the other statements
    after it and continue execution to the next iteration:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`语句用于告诉循环跳过它后面的所有其他语句，并继续执行下一次迭代：'
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Output:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The number 5 is not printed because once the continue statement is encountered,
    the rest of the statements after it are ignored, and the next iteration is started.
    The `continue` statements can be useful when there are a few exceptions you wish
    to skip when processing multiple items.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 数字5没有被打印出来，因为一旦遇到`continue`语句，它后面的语句都会被忽略，并且开始下一次迭代。当处理多个项目时，`continue`语句可能会很有用，因为它可以跳过一些异常。
- en: Nested for Loops
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 嵌套for循环
- en: 'The block of statements within a loop can be another loop was well. Such constructs
    are known as nested loops:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 循环内的一组语句可以是另一个循环。这样的结构称为嵌套循环：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Output:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For each single loop of `i`, we loop `j` three times. You can think of these
    `for` loops as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个`i`的单个循环，我们循环`j`三次。您可以将这些`for`循环理解为如下：
- en: Repeat `i` three times and for each repetition, repeat `j` three times. That
    way, we have a total of 9 iterations of `j`. For each iteration of `j`, we then
    print out the value of `i` and `j`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 重复`i`三次，对于每次重复，重复`j`三次。这样，我们总共有9次`j`的迭代。对于每次`j`的迭代，我们打印出`i`和`j`的值。
- en: 'Exercise 9: Implementing a Nested for Loop'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习9：实现嵌套for循环
- en: 'Our goal in this exercise is to print a pyramid of * with seven rows, like
    so:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个练习中的目标是打印一个有七行的星号金字塔，如下所示：
- en: '![](img/C09581_Figure_03_01.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_Figure_03_01.jpg)'
- en: 'Figure 3.1: Pyramid of * with seven rows'
  id: totrans-201
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.1：有七行的星号金字塔
- en: 'To achieve this goal, perform the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，请执行以下步骤：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**New** | **Class**。
- en: Enter `NestedPattern` as the class name, and then click **OK**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`NestedPattern`作为类名，然后点击**OK**。
- en: 'In the main method, create a `for` loop that initializes the variable `i` at
    1, introduces the condition so that the value of `i` is at most 15, and increments
    the value of `i` by 2:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主方法中，创建一个`for`循环，初始化变量`i`为1，引入条件，使得`i`的值最多为15，并将`i`的值增加2：
- en: '[PRE38]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Within this loop, create two more `for` loops, one to print the spaces and
    the other to print the *:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个循环内，创建另外两个`for`循环，一个用于打印空格，另一个用于打印*：
- en: '[PRE39]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Within the outer `for` loop, add the following code to add the next line:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在外部`for`循环中，添加以下代码以添加下一行：
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Run the program. You will see the resultant pyramid.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序。您将看到结果金字塔。
- en: for-each Loops
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for-each循环
- en: '`for each` loops are an advanced version of `for` loops that were introduced
    in Java 5\. They are used to perform a given operation on every item in an array
    or list of items.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`for each`循环是Java 5中引入的`for`循环的高级版本。它们用于对数组或项目列表中的每个项目执行给定操作。'
- en: 'Let''s take a look at this `for` loop:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个`for`循环：
- en: '[PRE41]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The first line declares an array of integers. An array is a collection of items
    of the same type. In this case, the variable arr is holding a collection of 10
    integers. We then use a `for` loop from `0` to `10`, printing the elements of
    this array. We are using `i < 10` because the last item is at index `9`, not `10`.
    This is because the elements of an array start with index 0\. The first element
    is at index `0`, the second at index `1`, the third at `2`, and so on. `arr[0]`
    will return the first element, `arr[1]` the second, `arr[2]` the third, and so
    on.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行声明了一个整数数组。数组是相同类型项目的集合。在这种情况下，变量arr持有10个整数的集合。然后我们使用`for`循环从`0`到`10`，打印出这个数组的元素。我们使用`i
    < 10`是因为最后一个项目在索引`9`处，而不是`10`。这是因为数组的元素从索引0开始。第一个元素在索引`0`处，第二个在索引`1`处，第三个在`2`处，依此类推。`arr[0]`将返回第一个元素，`arr[1]`第二个，`arr[2]`第三个，依此类推。
- en: 'This `for` loop can be replaced with a shorter `for each` loop. The syntax
    of a `for each` loop is as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`for`循环可以用更短的`for each`循环来替代。`for each`循环的语法如下：
- en: '[PRE42]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For our preceding example, the `for each` loop would be as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们之前的例子，`for each`循环将如下所示：
- en: '[PRE43]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '`int` `item` is the current element in the array we are at. The `for each`
    loop will iterate for all the elements in the array. Inside the braces, we print
    out the item. Note that we didn''t have to use `arr[i]` like in the `for` loop
    earlier. This is because the `for each` loop automatically extracts the value
    for us. In addition, we didn''t have to use an extra `int` `i` to keep the current
    index and check if we are below `10` `(i < 10)`, like in the `for` loop we used
    earlier. `for each` loops are shorter and automatically check the range for us.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`int` `item`是我们当前所在数组中的元素。`for each`循环将遍历数组中的所有元素。在大括号内，我们打印出这个元素。请注意，我们不必像之前的`for`循环中那样使用`arr[i]`。这是因为`for
    each`循环会自动为我们提取值。此外，我们不必使用额外的`int` `i`来保持当前索引并检查我们是否在`10`以下`(i < 10)`，就像我们之前使用的`for`循环那样。`for
    each`循环更短，会自动为我们检查范围。'
- en: 'For example, we can use the `for each` loop to print the squares of all the
    elements present in the array, `arr`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用`for each`循环来打印数组`arr`中所有元素的平方：
- en: '[PRE44]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Output:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE45]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The while and do while Loops
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while和do while循环
- en: 'Sometimes, we wish to execute certain statements repeatedly, that is, as long
    as a certain Boolean condition is true. Such cases require us to use a `while`
    loop or a `do while` loop. A `while` loop first checks a Boolean statement and
    executes a block of code if the Boolean is true, otherwise it skips the `while`
    block. A `do while` loop first executes a block of code once before it checks
    the Boolean condition. Use a `do while` loop when you want the code to be executed
    at least once and a `while` loop when you want the Boolean condition to be checked
    first before the first execution. The following are the formats of the `while`
    and `do while` loops:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望重复执行某些语句，也就是说，只要某个布尔条件为真。这种情况需要我们使用`while`循环或`do while`循环。`while`循环首先检查一个布尔语句，如果布尔为真，则执行一段代码块，否则跳过`while`块。`do
    while`循环首先在检查布尔条件之前执行一段代码块。当您希望代码至少执行一次时，请使用`do while`循环，当您希望在第一次执行之前首先检查布尔条件时，请使用`while`循环。以下是`while`和`do
    while`循环的格式：
- en: 'The syntax for the `while` loop:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环的语法：'
- en: '[PRE46]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The syntax for the `do while` loop:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`do while`循环的语法：'
- en: '[PRE47]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'For example, to print all of the numbers from 0 to 10 using a `while` loop,
    we would use the following code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用`while`循环打印从0到10的所有数字，我们将使用以下代码：
- en: '[PRE48]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Output:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We could also write the preceding code using a `do while` loop:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`do while`循环编写上述代码：
- en: '[PRE50]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With the `do while` loop, the condition is evaluated last, so we are sure that
    the statements will be executed at least once.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`do while`循环，条件最后被评估，所以我们确信语句至少会被执行一次。
- en: 'Exercise 10: Implementing the while Loop'
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习10：实现while循环
- en: 'To print the first 10 numbers in the Fibonacci series using the `while` loop,
    perform the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`while`循环打印斐波那契数列的前10个数字，执行以下步骤：
- en: Right-click the `src` folder and select **New** | **Class**.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`src`文件夹，然后选择**新建** | **类**。
- en: Enter `FibonacciSeries` as the class name, and then click **OK**.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`FibonacciSeries`作为类名，然后单击**确定**。
- en: 'Declare the variables that are required in the `main` method:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`main`方法中所需的变量：
- en: '[PRE51]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here, `i` is the counter, `x` and `y` store the first two numbers of the Fibonacci
    series, and `sum` is a variable that is used to calculate the sum of the variables
    `x` and `y`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`i`是计数器，`x`和`y`存储斐波那契数列的前两个数字，`sum`是一个用于计算变量`x`和`y`的和的变量。
- en: 'Implement a `while` loop with the condition so that the counter `i` does not
    go beyond 10:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个`while`循环，条件是计数器`i`不超过10：
- en: '[PRE52]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Within the `while` loop, implement the logic to print the value of `x`, and
    then assign the appropriate values to `x`, `y`, and `sum` so that we are always
    printing the `sum` of the last and the penultimate number:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内，实现打印`x`的值的逻辑，然后分配适当的值给`x`、`y`和`sum`，这样我们总是打印最后一个和倒数第二个数字的`sum`：
- en: '[PRE53]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Activity 9: Implementing the while Loop'
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动9：实现while循环
- en: Remember John, who is a peach grower. He picks peaches from his trees, puts
    them into fruit boxes and ships them. He can ship a fruit box if it is full with
    20 peaches. If he has less than 20 peaches, he has to pick more peaches so he
    can fill a fruit box with 20 peaches and ship it.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 记得John，他是一个桃子种植者。他从树上摘桃子，把它们放进水果箱里然后运输。如果一个水果箱装满了20个桃子，他就可以运输一个水果箱。如果他的桃子少于20个，他就必须摘更多的桃子，这样他就可以装满一个装有20个桃子的水果箱并运输它。
- en: 'We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. We get the number of peaches from John, and
    we print a message for each group of 20 peaches and say how many boxes we have
    shipped and how many peaches we have left, e.g., "2 boxes shipped, 54 peaches
    remaining". We would like to do this with a `while` loop. The loop will continue
    as we have a number of peaches that would fit at least one box. In contrast to
    the previous activity with `for`, we will also keep track of the remaining peaches.
    To achieve this, perform the following steps:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想通过编写一个自动化软件来帮助John启动箱子的填充和运输。我们从John那里得到桃子的数量，并为每组20个桃子打印一条消息，说明我们已经运输了多少箱子，还剩下多少桃子，例如，“已运输2箱，剩余54个桃子”。我们想用`while`循环来实现这一点。只要我们有足够的桃子可以装满至少一个箱子，循环就会继续。与之前的`for`活动相反，我们还将跟踪剩余的桃子。为了实现这一点，执行以下步骤：
- en: Create a new class and enter `PeachBoxCounter` as the class name
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新类，输入`PeachBoxCounter`作为类名
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: In the `main()` use `System.out.print` to ask the user for the `numberOfPeaches`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中使用`System.out.print`询问用户`numberOfPeaches`。
- en: Create a `numberOfBoxesShipped` variable.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`numberOfBoxesShipped`变量。
- en: Write a while loop that continues as we have at least 20 peaches.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个while循环，只要我们至少有20个桃子就继续。
- en: In the loop, remove 20 peaches from `numberOfPeaches` and increment `numberOfBoxesShipped`
    by 1\. Print these values.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中，从`numberOfPeaches`中移除20个桃子，并将`numberOfBoxesShipped`增加1。打印这些值。
- en: Run the main program.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于：
- en: '[PRE54]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note
  id: totrans-262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 311.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在第311页找到。
- en: 'Activity 10: Implementing Looping Constructs'
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动10：实现循环结构
- en: Our goal is to create a ticketing system so that when the user puts in a request
    for the tickets, the tickets are approved based on the number of seats remaining
    in the restaurant.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一个订票系统，这样当用户提出票务请求时，票务会根据餐厅剩余座位的数量来批准。
- en: 'To create such a program, perform the following steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这样一个程序，执行以下步骤：
- en: Import the packages that are required to read data from the user.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入从用户读取数据所需的包。
- en: Declare the variables to store the total number of seats available, remaining
    seats, and tickets requested.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明变量以存储总座位数、剩余座位和请求的票数。
- en: Within a `while` loop, implement the `if else` loop that checks whether the
    request is valid, which implies that the number of tickets requested is less than
    the number of seats remaining.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内，实现`if else`循环，检查请求是否有效，这意味着请求的票数少于剩余座位数。
- en: If the logic in the previous step is true, then print a message to denote that
    the ticket is processed, set the remaining seats to the appropriate value, and
    ask for the next set of tickets.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前一步的逻辑为真，则打印一条消息表示票已处理，将剩余座位设置为适当的值，并要求下一组票。
- en: If the logic in step 3 is false, then print an appropriate message and break
    out of the loop.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第3步的逻辑为假，则打印适当的消息并跳出循环。
- en: Note
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 312.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在第312页找到。
- en: 'Activity 11: Continuous Peach Shipment with Nested Loops.'
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动11：嵌套循环连续桃子运输。
- en: Remember John, who is a peach grower. He picks peaches from his trees, puts
    them into fruit boxes and ships them. He can ship a fruit box if it is full with
    20 peaches. If he has less than 20 peaches, he has to pick more peaches so he
    can fill a fruit box with 20 peaches and ship it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 记得John，他是一个桃子种植者。他从树上摘桃子，把它们放进水果箱里然后运输。如果一个水果箱装满了20个桃子，他就可以运输一个水果箱。如果他的桃子少于20个，他就必须摘更多的桃子，这样他就可以装满一个装有20个桃子的水果箱并运输它。
- en: We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. In this new version of our automation software,
    we will let John bring in the peaches in batches of his own choosing and will
    use the remaining peaches from the previous batch together with the new batch.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过编写一个自动化软件来帮助约翰启动装箱和运输。在我们的自动化软件的这个新版本中，我们将允许约翰自行选择批量带来桃子，并将上一批剩下的桃子与新批次一起使用。
- en: 'We get the incoming number of peaches from John and add it to the current number
    of peaches. Then, we print a message for each group of 20 peaches and say how
    many boxes we have shipped and how many peaches we have left, e.g., "2 boxes shipped,
    54 peaches remaining". We would like to do this with a `while` loop. The loop
    will continue as we have a number of peaches that would fit at least one box.
    We will have another `while` loop that gets the next batch and quits if there
    is none. To achieve this, perform the following steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从约翰那里得到了桃子的进货数量，并将其加到当前的桃子数量中。然后，我们为每组20个桃子打印一条消息，说明我们已经运送了多少箱子，还剩下多少桃子，例如，“已运送2箱，剩余54个桃子”。我们希望用`while`循环来实现这一点。只要我们有足够多的桃子可以装至少一箱，循环就会继续。我们将有另一个`while`循环来获取下一批桃子，如果没有，则退出。为了实现这一点，执行以下步骤：
- en: Create a new class and enter `PeachBoxCount` as the class name
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的类，并输入`PeachBoxCount`作为类名
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: Create a `numberOfBoxesShipped` variable and a `numberOfPeaches` variable.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`numberOfBoxesShipped`变量和一个`numberOfPeaches`变量。
- en: In the `main()`, write an infinite `while` loop.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中，编写一个无限的`while`循环。
- en: Use `System.out.print` to ask the user for the `incomingNumberOfPeaches`. If
    this is zero, `break` out of this infinite loop.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`System.out.print`询问用户`incomingNumberOfPeaches`。如果这是零，则跳出这个无限循环。
- en: Add the incoming peaches to the existing peaches.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将进货的桃子加到现有的桃子中。
- en: Write a `while` loop that continues as we have at least 20 peaches.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个`while`循环，只要我们至少有20个桃子就继续。
- en: In the for loop, remove 20 peaches from `numberOfPeaches` and increment `numberOfBoxesShipped`
    by 1\. Print these values.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在for循环中，从`numberOfPeaches`中减去20个桃子，并将`numberOfBoxesShipped`增加1。打印这些值。
- en: Run the main program.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于：
- en: '[PRE55]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-289
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 313.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在第313页找到。
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we've covered some of the fundamental and important concepts
    in Java and programming by looking at some simple examples. Conditional statements
    and looping statements are normally essential to implementing logic.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们通过查看一些简单的例子，涵盖了Java和编程中一些基本和重要的概念。条件语句和循环语句通常是实现逻辑的基本要素。
- en: In the next lesson, we will focus on a couple more fundamental concepts, such
    as functions, arrays, and strings. These concepts will help us in writing concise
    and reusable code.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一课中，我们将专注于另外一些基本概念，如函数、数组和字符串。这些概念将帮助我们编写简洁和可重用的代码。
