["```java\npublic interface FunctionalInterfaceExample {\n    // compiles ok\n}\n```", "```java\n@FunctionalInterface // <- error here\n    public interface FunctionalInterfaceExample {\n      // doesn't compile\n}\n```", "```java\n@FunctionalInterface\npublic interface FunctionalInterfaceExample {\n    void apply();\n    void illegal(); // <- error here\n}\n```", "```java\n@FunctionalInterface\ninterface A {\n    abstract void apply();\n}\n\ninterface B extends A {\n}\n```", "```java\n@FunctionalInterface\ninterface A {\n    abstract void apply();\n}\n\ninterface B extends A {\n    @Override\n    abstract void apply();\n}\n```", "```java\n@FunctionalInterface\npublic interface A {\n    void apply();\n}\n\npublic interface B extends A {\n    @Override\n    void apply();\n}\n\npublic static void main(String... args) {\n   A a = () -> System.out.println(\"A\");\n   B b = () -> System.out.println(\"B\");\n}\n```", "```java\n@FunctionalInterface\npublic interface A {\n    void apply();\n}\n\npublic interface B extends A {\n    void illegal();     // <- can't do this\n}\n\npublic static void main(String... args) {\n    A a = () -> System.out.println(\"A\");\n    B b = () -> System.out.println(\"B\");    // <- error\n}\n```", "```java\nval name = \"Henry\"\n```", "```java\nval name : String = \"Henry\"\n```", "```java\nString name = \"Henry\"; // <- we can't drop the String like Scala\n```", "```java\n(Integer x, Integer y) -> x + y;\n```", "```java\n(x, y) -> x + y;\n```", "```java\n@FunctionalInterface\ninterface Calculation {\n    Integer apply(Integer x, Integer y);\n}\n```", "```java\nstatic Integer calculate(Calculation operation, Integer x, Integer y) { \n    return operation.apply(x, y);\n}\n```", "```java\nCalculation addition = (x, y) -> x + y;\nCalculation subtraction = (x, y) -> x - y;\n```", "```java\ncalculate(addition, 2, 2);\ncalculate(subtraction, 5, calculate(addition, 3, 2));\n```", "```java\npublic static final <T> List<T> emptyList() { ... }\n```", "```java\nList<String> names = Collections.emptyList(); // compiles in Java 7\n```", "```java\nstatic void processNames(List<String> names) {\n    System.out.println(\"hello \" + name);\n}\n```", "```java\nprocessNames(Collections.emptyList()); // doesn't compile in Java 7\n```", "```java\nprocessNames(Collections.<Object>emptyList names);\n```", "```java\nprocessNames(Collections.<String>emptyList names);\n```", "```java\nprocessNames(Collections.<String>emptyList());   // compiles in Java 7\n```", "```java\nprocessNames(Collections.emptyList());           // compiles in Java 8\n```", "```java\nstatic class List<E> {\n\n    static <T> List<T> emptyList() {\n        return new List<T>();\n    }\n\n    List<E> add(E e) {\n        // add element\n        return this;\n    }\n}\n```", "```java\nList<String> list = List.emptyList().add(\":(\");\n```", "```java\nList<String> list = List.<String>emptyList().add(\":(\");\n```", "```java\nClass::method\n```", "```java\nString::valueOf\n```", "```java\npublic static String valueOf(Object obj) { ... }\n```", "```java\nString::valueOf(); // <-- error\n```", "```java\npublic static void main(String... args) {\n    String::valueOf;\n}\n```", "```java\n(x) -> String.valueOf(x)\n```", "```java\n@FunctionalInterface\ninterface Conversion {\n    String convert(Integer number);\n}\n```", "```java\npublic static String convert(Integer number, Conversion function) {\n    return function.convert(number);\n}\n```", "```java\nconvert(100, (number) -> String.valueOf(number));\n```", "```java\nconvert(100, String::valueOf);\n```", "```java\nConversion b = (number) -> String.valueOf(number);\n```", "```java\nConversion a = String::valueOf;\n```", "```java\ninterface Example {\n    String theNameIsUnimportant(Object object);\n}\n```", "```java\nExample a = String::valueOf;\n```", "```java\nString::new\n```", "```java\n() -> new String()\n```", "```java\npublic void usage() {\n    List<Object> list = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n        list.add(new Object());\n  }\n}\n```", "```java\npublic void usage() {\n    List<Object> list = new ArrayList<>();\n    initialise(list, ...);\n}\n\nprivate void initialise(List<Object> list, Factory<Object> factory){\n    for (int i = 0; i < 10; i++) {\n        list.add(factory.create());\n    }\n }\n```", "```java\npublic void usage() {\n    List<Object> list = new ArrayList<>();\n    initialise(list, () -> new Object());\n}\n```", "```java\npublic void usage() {\n    List<Object> list = new ArrayList<>();\n    initialise(list, Object::new);\n}\n```", "```java\npublic void usage() {\n    List<String> list = new ArrayList<>();\n    initialise(list, String::new);\n}\n\nprivate <T> void initialise(List<T> list, Factory<T> factory) {\n    for (int i = 0; i < 10; i++) {\n        list.add(factory.create());\n    }\n}\n```", "```java\nclass Person {\n    public Person(String forename, String surname, LocalDate    \n    birthday, Sex gender, String emailAddress, int age) {\n      // ...\n    }\n}\n```", "```java\ninitialise(people, () -> new Person(forename, surname, birthday,\n                                    gender, email, age));\n```", "```java\n(a, b, c, d, e, f) -> new Person(a, b, c, d, e, f);\n```", "```java\nPerson::new\n```", "```java\n@FunctionalInterface\ninterface PersonFactory {\n    Person create(String forename, String surname, LocalDate \n    birthday, Sex gender, String emailAddress, int age);\n}\n```", "```java\npublic void example() {\n    List<Person> list = new ArrayList<>();\n    PersonFactory factory = Person::new;\n    // ...\n}\n```", "```java\npublic void example() {\n    PersonFactory factory = (a, b, c, d, e, f) -> new Person(a, b,   \n    c, d, e, f);\n}\n```", "```java\npublic void example() {\n    PersonFactory factory = (a, b, c, d, e, f) -> new Person(a, b,  \n    c, d, e, f);\n    Person person = factory.create(forename, surname, birthday,\n                                gender, email, age);\n}\n```", "```java\nprivate void initialise(List<Person> list, PersonFactory factory, \n                       String forename, String surname,                           \n                       LocalDate birthday, Sex gender,\n                       String emailAddress, int age) {\n                         for (int i = 0; i < 10; i++) {\n                           list.add(factory.create(forename,  \n                           surname, birthday, gender,        \n                           emailAddress, age));\n                         }\n                       }\n```", "```java\npublic void example() {\n    List<Person> list = new ArrayList<>();\n    PersonFactory factory = Person::new;\n    initialise(people, factory, a, b, c, d, e, f);\n}\n```", "```java\npublic void example() {\n    List<Person> list = new ArrayList<>();\n    initialise(people, Person::new, a, b, c, d, e, f);\n}\n```", "```java\nString::valueOf\n```", "```java\nx -> String.valueOf(x))\n```", "```java\nCollections.sort(Arrays.asList(5, 12, 4), Comparators::ascending);\n\n// equivalent to\nCollections.sort(Arrays.asList(5, 12, 4), (a, b) -> Comparators.ascending(a, b));\n```", "```java\npublic static class Comparators {\n    public static Integer ascending(Integer first, Integer second)   \n    {\n        return first.compareTo(second);\n     }\n}\n```", "```java\nx::toString\n```", "```java\n() -> x.toString()\n```", "```java\nCallable<String> c = () -> \"Hello\";\n```", "```java\nFactory<String> f = c::call;\n```", "```java\npublic void example() {\n    String x = \"hello\";\n    function(x::toString);\n}\n```", "```java\npublic static String function(Supplier<String> supplier) {\n    return supplier.get();\n}\n```", "```java\n@FunctionalInterface\npublic interface Supplier<T> {\n  T get();\n}\n```", "```java\npublic void example() {\n  String x = \"\";\n  function(() -> x.toString());\n}\n```", "```java\npublic void example() {\n    String x = \"\";\n    function(new Supplier<String>() {\n        @Override\n        public String get() {\n            return x.toString(); // <- closes over 'x'\n        }\n    });\n}\n```", "```java\nObject::toString\n```", "```java\n(x) -> x.toString()\n```", "```java\npublic void lambdaExample() {\n    function(\"value\", String::toString);\n}\n```", "```java\npublic static String function(String value, Function<String, String> function) {\n    return function.apply(value);\n}\n```", "```java\npublic void lambdaExample() {\n    function(\"value\", x -> x.toString());\n}\n```", "```java\npublic void lambdaExample() {\n    function(\"value\", new Function<String, String>() {\n      @Override\n      // takes the argument as a parameter, doesn't need to close \n      over it\n      public String apply(String x) {\n        return x.toString();\n      }\n    });\n}\n```", "```java\npublic static class Example {\n    int i = 5;\n\n    public Integer example() {\n        Supplier<Integer> function = () -> i * 2;\n        return function.get();\n    }\n}\n```", "```java\npublic static class Example {\n    int i = 5;\n    public Integer example() {\n        Supplier<Integer> function = () -> this.i * 2;\n        return function.get();\n    }\n}\n```", "```java\npublic static class Example {\n    int i = 5;\n\n    public Integer anotherExample(int i) {\n        Supplier<Integer> function = () -> i * 2;\n        return function.get();\n    }\n}\n```", "```java\npublic static class Example {\n    int i = 5;\n\n    public Integer yetAnotherExample() {\n        int i = 15;\n        Supplier<Integer> function = () -> i * 2;\n        return function.get();\n    }\n}\n```", "```java\npublic static void main(String... args) {\n    Example scoping = new Example();\n    System.out.println(\"class scope        = \" +    \n    scoping.example());\n    System.out.println(\"method param scope = \" +  \n    scoping.anotherExample(10));\n    System.out.println(\"method scope       = \" +   \n    scoping.yetAnotherExample());\n}\n```", "```java\nclass scope        = 10\nmethod param scope = 20\nmethod scope       = 30\n```", "```java\n// java 7\nprivate List<Person> filter(List<Person> people, Predicate<Person> predicate) {\n    ArrayList<Person> matches = new ArrayList<>();\n    for (Person person : people)\n        if (predicate.test(person))\n            matches.add(person);\n    return matches;\n}\n```", "```java\n public void findRetirees() {\n     int retirementAge = 55;\n     List<Person> retirees = filter(allPeople, new \n     Predicate<Person>   \n     () {\n         @Override\n         public boolean test(Person person) {\n             return person.getAge() >= retirementAge; // <-- \n             compilation error\n         }\n     });\n }\n```", "```java\nfinal int retirementAge = 55;\n```", "```java\nint retirementAge = 55;\n```", "```java\nint retirementAge = 55;\n// ...\nretirementAge = 65;\n```", "```java\nprivate static int sumAllAges(List<Person> people) {\n    int sum = 0;\n    for (Person person : people) {\n        sum += person.getAge();\n    }\n    return sum;\n}\n```", "```java\npublic final static Integer forEach(List<Person> people, Function<Integer, Integer> function) {\n  Integer result = null;\n  for (Person t : people) {\n    result = function.apply(t.getAge());\n  }\n  return result;\n}\n```", "```java\nprivate static void badExample() {\n    Function<Integer, Integer> sum = new Function<Integer, Integer>   \n   () {\n        private Integer sum = 0;\n\n        @Override\n        public Integer apply(Integer amount) {\n            sum += amount;\n            return sum;\n        }\n   };\n}\n```", "```java\nforEach(allPeople, sum);\n```", "```java\ndouble sum = 0;\nforEach(allPeople, x -> {\n    return sum += x;\n});\n```", "```java\nfinal double sum = 0;\nforEach(allPeople, x -> {\n    return sum += x;\n});\n```", "```java\nint[] sum = {0};\nforEach(allPeople, x -> sum[0] += x);\n```", "```java\npublic static void runInSequence(Runnable first, Runnable second) {\n    first.run();\n    second.run();\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> a.debit(amount);\n    Runnable credit = () -> b.credit(amount);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> a.debit(amount);\n    Runnable credit = () -> b.credit(amount);\n    runInSequence(debit, credit);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> a.debit(amount);\n    Runnable credit = () -> b.credit(amount);\n    try {\n        runInSequence(debit, credit);\n    } catch (Exception e) {\n        // check account balances and rollback\n    }\n  }\n```", "```java\npublic static void runInSequence(Runnable first, Runnable second) {\n    new Thread(() -> {\n        first.run();\n        second.run();\n    }).start();\n}\n```", "```java\npublic static void runInSequence(Runnable first, Runnable second) {\n    new Thread(() -> {\n        try {\n            first.run();\n            second.run();\n        } catch (Exception e) {\n            // ...\n        }\n    }).start();\n}\n```", "```java\npublic static void runInSequence(Runnable first, Runnable second,\n        Consumer<Throwable> exceptionHandler) {\n    new Thread(() -> {\n        try {\n            first.run();\n            second.run();\n        } catch (Exception e) {\n            exceptionHandler.accept(e);\n        }\n    }).start();\n}\n```", "```java\npublic void nonBlockingTransfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> a.debit(amount);\n    Runnable credit = () -> b.credit(amount);\n    runInSequence(debit, credit, (exception) -> {\n      /* check account balances and rollback */\n    });\n}\n```", "```java\nclass BankAccount {\n    public void debit(int amount) throws InsufficientFundsException    \n    {\n        // ...\n     }\n\n     public void credit(int amount) throws \n     InsufficientFundsException   \n     {\n         // ...\n      }\n}\n\nclass InsufficientFundsException extends Exception { }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> a.debit(amount);   <- compiler error\n    Runnable credit = () -> b.credit(amount); <- compiler error\n    runInSequence(debit, credit);\n }\n```", "```java\n// still doesn't compile\npublic void transfer(BankAccount a, BankAccount b, Integer amount)\n       throws InsufficientFundsException {\n    Runnable debit = () -> a.debit(amount);\n    Runnable credit = () -> b.credit(amount);\n    runInSequence(debit, credit);\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> {\n        try {\n            a.debit(amount);\n        } catch (InsufficientFundsException e) {\n            throw new RuntimeException(e);\n        }\n   };\n   Runnable credit = () -> {\n       try {\n           b.credit(amount);\n       } catch (InsufficientFundsException e) {\n           throw new RuntimeException(e);\n       }\n   };\n   runInSequence(debit, credit);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount){\n    Runnable debit = () -> { ... };\n    };\n    Runnable credit = () -> { ... };\n    try {\n        runInSequence(debit, credit);\n    } catch (RuntimeException e) {\n        // check balances and rollback\n    }\n}\n\n```", "```java\nclass InsufficientFundsRuntimeException extends RuntimeException {\n    public   \n    InsufficientFundsRuntimeException(InsufficientFundsException   \n    cause) {\n        super(cause);\n    }\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = () -> {\n        try {\n            a.debit(amount);\n        } catch (InsufficientFundsException e) {\n            throw new InsufficientFundsRuntimeException(e);\n        }\n   };\n   Runnable credit = () -> {\n       try {\n           b.credit(amount);\n       } catch (InsufficientFundsException e) {\n           throw new InsufficientFundsRuntimeException(e);\n       }\n   };\n   try {\n       runInSequence(debit, credit);\n   } catch (InsufficientFundsRuntimeException e) {\n       // check balances and rollback\n   }\n }\n```", "```java\n@FunctionalInterface\ninterface Callable<E extends Exception> {\n    void call() throws E;\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    ??? debit = () -> a.debit(amount);\n    ??? credit = () -> b.credit(amount);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Callable<InsufficientFundsException> debit = () ->   \n    a.debit(amount);\n    Callable<InsufficientFundsException> credit = () -> \n    b.credit(amount);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Callable<InsufficientFundsException> debit = () -> \n    a.debit(amount);\n    Callable<InsufficientFundsException> credit = () -> \n    b.credit(amount);\n    runInSequence(debit, credit); <- doesn't compile\n }\n```", "```java\npublic static Runnable unchecked(Callable<InsufficientFundsException> function) {\n    return () -> {\n        try {\n            function.call();\n        } catch (InsufficientFundsException e) {\n            throw new InsufficientFundsRuntimeException(e);\n        }\n    };\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = unchecked(() -> a.debit(amount));\n    Runnable credit = unchecked(() -> b.credit(amount));\n    runInSequence(debit, credit);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    Runnable debit = unchecked(() -> a.debit(amount));\n    Runnable credit = unchecked(() -> b.credit(amount));\n    try {\n         runInSequence(debit, credit);\n    } catch (InsufficientFundsRuntimeException e) {\n        // check balances and rollback\n    }\n }\n```", "```java\n@FunctionalInterface\ninterface FinancialTransfer {\n    void transfer() throws InsufficientFundsException;\n}\n```", "```java\npublic static void runInSequence(FinancialTransfer first,\n        FinancialTransfer second) throws InsufficientFundsException      \n{\n    first.transfer();\n    second.transfer();\n }\n```", "```java\n// example client usage\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    FinancialTransfer debit = () -> a.debit(amount);\n    FinancialTransfer credit = () -> b.credit(amount);\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    FinancialTransfer debit = () -> a.debit(amount);\n    FinancialTransfer credit = () -> b.credit(amount);\n    runInSequence(debit, credit);  <- compiler error\n }\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    FinancialTransfer debit = () -> a.debit(amount);\n    FinancialTransfer credit = () -> b.credit(amount);\n    try {\n        runInSequence(debit, credit);  <- compiler error\n    } catch (InsufficientFundsException e) {\n        // whatever\n    }\n }\n```", "```java\npublic static void runInSequence(Runnable first, Runnable second) {\n    new Thread(() -> {\n        first.transfer();   <- compiler error\n        second.transfer();  <- compiler error\n    }).start();\n}\n\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    FinancialTransfer debit = () -> a.debit(amount);\n    FinancialTransfer credit = () -> b.credit(amount);\n    runInSequence(debit, credit);  <- compiler error\n }\n```", "```java\npublic void runInSequence(FinancialTransfer first,     \n       FinancialTransfer second,\n       Consumer<InsufficientFundsException> exceptionHandler) {\n    new Thread(() -> {\n        try {\n            first.transfer();\n            second.transfer();\n        } catch (InsufficientFundsException e) {\n            exceptionHandler.accept(e);\n        }\n    }).start();\n}\n```", "```java\npublic void transfer(BankAccount a, BankAccount b, Integer amount) {\n    FinancialTransfer debit = () -> a.debit(amount);\n    FinancialTransfer credit = () -> b.credit(amount);\n    Consumer<InsufficientFundsException> handler = (exception) -> {\n        /* check account balances and rollback */\n   };\n   runInSequenceNonBlocking(debit, credit, handler);\n}\n```", "```java\n(server) -> server.isRunning();\n```", "```java\n() -> server.isRunning();\n```", "```java\nclass WaitFor {\n    static <T> void waitFor(T input, Predicate<T> predicate)\n            throws InterruptedException {\n        while (!predicate.test(input))\n            Thread.sleep(250);\n    }\n}\n```", "```java\nvoid lambda() throws InterruptedException {\n    waitFor(new HttpServer(), (server) -> !server.isRunning());\n}\n```", "```java\nstatic void waitFor(Condition condition) throws InterruptedException {\n    while (!condition.isSatisfied())\n        Thread.sleep(250);\n}\n```", "```java\nvoid closure() throws InterruptedException {\n    Server server = new HttpServer();\n    waitFor(() -> !server.isRunning());\n}\n```", "```java\n@since Java 1.1!\nvoid anonymousClassClosure() {\n    Server server = new HttpServer();\n    waitFor(new Condition() {\n        @Override\n        public Boolean isSatisfied() {\n            return !server.isRunning();\n        }\n    });\n}\n```", "```java\nExample$1.\"<init>\":(Lcom/foo/Example;Lcom/foo/Server;)V\n```", "```java\nlong f (int n, String s, int[] array);\n```", "```java\n()J\n```", "```java\n(I)J\n```", "```java\n(ILString;)J\n```", "```java\n(ILString;[I)J\n```", "```java\npublic class Example1 {\n    // anonymous class\n    void example() throws InterruptedException {\n        waitFor(new Condition() {\n            @Override\n            public Boolean isSatisfied() {\n                return true;\n            }\n        });\n    }\n}\n```", "```java\nvoid example() throws java.lang.InterruptedException;\n    descriptor: ()V \n    flags:\n    Code:\n      stack=3, locals=1, args_size=1\n         0: new #2 // class Example1$1\n         3: dup\n         4: aload_0\n         5: invokespecial #3 // Method Example1$1.\"\":(LExample1;)V\n         8: invokestatic #4 // Method WaitFor.waitFor:  \n            (LCondition;)V\n        11: return\n      LineNumberTable:\n        line 10: 0\n        line 16: 11\n      LocalVariableTable:\n\u00a0       Start Length Slot Name Signature\n            0     12    0 this LExample1;\n    Exceptions: \n      throws java.lang.InterruptedException\n```", "```java\npublic class Example2 {\n    // anonymous class (closure)\n    void example() throws InterruptedException {\n        Server server = new HttpServer();\n        waitFor(new Condition() {\n            @Override\n            public Boolean isSatisfied() {\n                return !server.isRunning();\n            }\n        });\n    }\n}\n```", "```java\nvoid example() throws java.lang.InterruptedException;\n    Code:\n       0: new #2 // class Server$HttpServer\n       3: dup\n       4: invokespecial #3 // Method Server$HttpServer.\"\":()V\n       7: astore_1\n       8: new #4 // class Example2$1\n      11: dup\n      12: aload_0\n      13: aload_1\n      14: invokespecial #5 // Method Example2$1.\"\":   \n          (LExample2;LServer;)V\n      17: invokestatic #6 // Method WaitFor.waitFor:(LCondition;)V\n      20: return\n```", "```java\npublic class Example3 {\n    // simple lambda\n    void example() throws InterruptedException {\n        waitFor(() -> true);\n    }\n}\n```", "```java\n\u00a0void example() throws java.lang.InterruptedException;\n     Code:\n        0: invokedynamic #2, 0 // InvokeDynamic #0:isSatisfied:   \n           ()LCondition;\n        5: invokestatic #3 // Method WaitFor.waitFor:(LCondition;)V\n        8: return\n```", "```java\nConstant pool:\n   #1 = Methodref #6.#21 // Object.\"\":()V\n   #2 = InvokeDynamic #0:#26 // #0:isSatisfied:()LCondition;\n   ...\nBootstrapMethods:\n    0: #23 invokestatic LambdaMetafactory.metafactory:              \n            (LMethodHandles$Lookup;LString;\n            LMethodType;LMethodType;\n            LMethodHandle;LMethodType;)LCallSite;\n      Method arguments:\n        #24 ()LBoolean;\n        #25 invokestatic Example3.lambda$example$25:()LBoolean;\n        #24 ()LBoolean;\n```", "```java\nConstant pool:\n    // invokestatic Example3.lambda$example$25:()LBoolean;\n    #25 = MethodHandle #6:#35\n```", "```java\npublic class Example4 {\n    // lambda with arguments\n    void example() throws InterruptedException {\n        waitFor(new HttpServer(), (server) -> server.isRunning());\n    }\n}\n```", "```java\nvoid example() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags:\n    Code:\n      stack=2, locals=1, args_size=1\n         0: new #2 // class Server$HttpServer\n         3: dup\n         4: invokespecial #3 // Method Server$HttpServer.\"\":()V\n         7: invokedynamic #4, 0 // InvokeDynamic #0:test:  \n            ()LPredicate;\n        12: invokestatic #5 // Method WaitFor.waitFor:     \n            (LObject;LPredicate;)V\n        15: return\n      LineNumberTable:\n        line 13: 0\n        line 15: 15\n      LocalVariableTable:\n        Start Length Slot Name Signature\n            0     16    0 this LExample4;\n    Exceptions:\n      throws java.lang.InterruptedException\n```", "```java\npublic class Example4_method_reference {\n    // lambda with method reference\n    void example() throws InterruptedException {\n        waitFor(new HttpServer(), HttpServer::isRunning);\n    }\n}\n```", "```java\nvoid example() throws java.lang.InterruptedException;\n    descriptor: ()V\n    flags:\n    Code:\n      stack=2, locals=1, args_size=1\n         0: new #2 // class Server$HttpServer\n         3: dup\n         4: invokespecial #3 // Method Server$HttpServer.\"\":()V\n         7: invokedynamic #4, 0 // InvokeDynamic #0:test:   \n            ()LPredicate;\n        12: invokestatic #5 // Method WaitFor.waitFor:\n            (LObject;LPredicate;)V\n        15: return\n      LineNumberTable:\n        line 11: 0\n        line 12: 15\n      LocalVariableTable:\n        Start Length Slot Name Signature\n            0     16    0 this LExample4_method_reference;\n    Exceptions:\n      throws java.lang.InterruptedException\n```", "```java\npublic class Example5 {\n    // closure\n    void example() throws InterruptedException {\n        Server server = new HttpServer();\n        waitFor(() -> !server.isRunning());\n    }\n}\n```", "```java\nBootstrapMethods:\n    0: #34 invokestatic LambdaMetafactory.metafactory:\n            (LMethodHandles$Lookup;\n             LString;LMethodType;\n             LMethodType;\n             LMethodHandle;LMethodType;)LCallSite;\n      Method arguments:\n        #35 ()LBoolean; // <-- SAM method to be implemented by the        \n            lambda\n        #36 invokestatic Example5.lambda$example$35:\n          (LServer;)LBoolean;\n        #35 ()LBoolean; // <-- type to be enforced at invocation   \n        time\n```"]