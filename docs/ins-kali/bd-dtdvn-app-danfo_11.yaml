- en: '*Chapter 8*: Creating a No-Code Data Analysis/Handling System'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：创建无代码数据分析/处理系统'
- en: One of the main purposes of creating **Danfo.js** was to easily enable data
    processing in the browser. This gives the ability to integrate data analysis and
    handling data seamlessly into web apps. Apart from the ability to add data handling
    to a web app, we have the tools to make data handling and analysis look more like
    what designers do when they use **Photoshop** and **Figma**; how they mix brush
    strokes together on the canvas just with a click or how they manipulate images
    by laying a canvas on top the canvas, just by dragging and dropping and with some
    button clicks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**Danfo.js**的主要目的之一是在浏览器中轻松启用数据处理。这使得能够将数据分析和处理数据无缝地集成到Web应用程序中。除了能够将数据处理添加到Web应用程序中，我们还有工具可以使数据处理和分析看起来更像设计师在使用**Photoshop**和**Figma**时所做的事情；他们如何在画布上混合刷子笔触，只需点击一下，或者如何通过拖放和一些按钮点击在画布上叠加画布来操纵图像。
- en: With Danfo.js, we can easily enable such an environment (using tools such as
    **React.js** and **Vue.js**) where data scientists become artists maneuvering
    their way through data with a few clicks of a button and getting the desired output
    without actually coding anything.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Danfo.js，我们可以轻松地启用这样的环境（使用**React.js**和**Vue.js**等工具），在这样的环境中，数据科学家可以像艺术家一样通过几次点击按钮来操纵数据，并在不实际编写任何代码的情况下获得所需的输出。
- en: A lot of tools with such features commonly exist, but the cool thing about Danfo.js
    is building the whole app with tools in JavaScript. In fact, doing all operations
    in the browser without a call to the server is quite amazing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多具有这些功能的工具通常存在，但Danfo.js的很酷的地方是使用JavaScript构建整个应用程序的工具。事实上，在浏览器中执行所有操作而不调用服务器是非常惊人的。
- en: The goal of this chapter is to show how such an environment can be built using
    Danfo.js and React.js. Also, note that the tools used here (apart from Danfo.js)
    are not mandatory for building the app; these are just the tools I'm quite familiar
    with.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是展示如何使用Danfo.js和React.js构建这样的环境。还要注意，这里使用的工具（除了Danfo.js之外）不是构建应用程序的必需工具；这些只是我非常熟悉的工具。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up the project environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目环境
- en: Structuring and designing the app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和设计应用程序
- en: App layout and the `DataTable` component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序布局和`DataTable`组件
- en: Creating different `DataFrame` operation components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建不同的`DataFrame`操作组件
- en: Implementing the `Chart` component
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`Chart`组件
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the basic environment and knowledge requirements for this
    chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的基本环境和知识要求如下：
- en: A modern web browser such as **Chrome**
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代Web浏览器，如**Chrome**
- en: A suitable code editor such as **VScode**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适合的代码编辑器，如**VScode**
- en: '**Node.js** installed'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装**Node.js**
- en: A bit of knowledge of `tailwindcss` and `React-chart-js`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`tailwindcss`和`React-chart-js`有一些了解
- en: Knowledge of the basics of React.js is needed. To brush up on React.js, check
    out the official site at [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要了解React.js的基础知识。要了解React.js，请访问官方网站[https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)
- en: The code for this chapter is available and can be cloned from GitHub at [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的代码可在GitHub上克隆，网址为[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter08)
- en: Setting up the project environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目环境
- en: React.js is used for the project, and to set up the React app, we will use the
    `create-react-app` package to automatically generate a frontend build pipeline
    for us. But first, make sure you have Node.js and `npx`, a package runner tool
    that comes with *npm 5.2+*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 项目使用React.js，并且为了设置React应用程序，我们将使用`create-react-app`包自动生成前端构建流水线。但首先，请确保您已安装Node.js和`npx`，这是随*npm
    5.2+*一起提供的包运行工具。
- en: 'Before we dive into setting up our environment, here are the tools needed and
    that will be installed in this chapter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始设置环境之前，这里是本章中需要的工具，并将在其中安装：
- en: '**React.js**: A JavaScript framework for building the UI'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React.js**：用于构建UI的JavaScript框架'
- en: '**Draggable**: A drag-and-drop library that makes it possible to move HTML
    elements around'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Draggable**：使HTML元素可以拖放的拖放库'
- en: '`chart` components'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`图表`组件'
- en: '**React-table-v6**: A React library for displaying tables'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React-table-v6**：用于显示表格的React库'
- en: 'The following are some alternatives to the preceding tools:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述工具的一些替代方案：
- en: '**Vue.js**: A JavaScript library for building the UI'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue.js**：用于构建UI的JavaScript库'
- en: '**rechart.js**: A composable charting library built on React.js'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rechart.js**：基于React.js构建的可组合图表库'
- en: '**Material-table**: A data table for React based on **material-UI**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Material-table**：基于**material-UI**的React数据表'
- en: 'To create a React app pipeline, we make a call to `create-react-app` using
    `npx` and then specify the name of our project as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建React应用程序流水线，我们使用`npx`调用`create-react-app`，然后指定我们的项目名称如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will create a directory called `data-art` in the parent directory
    in which the command is being initiated. This `data-art` directory is prefilled
    with the React.js template and all the packages needed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在启动命令的父目录中创建一个名为`data-art`的目录。`data-art`目录中预先填充了React.js模板和所有所需的包。
- en: 'Here is the structure of the `data-art` folder:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`data-art`文件夹的结构：
- en: '![Figure 8.1 – React.js directory structure'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – React.js目录结构'
- en: '](img/B17076_8_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_01.jpg)'
- en: Figure 8.1 – React.js directory structure
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – React.js目录结构
- en: 'After the installation, we can always start the app by using the following
    command (assuming you are not in the `data-art` directory in the terminal):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用以下命令始终启动应用程序（假设您不在终端中的`data-art`目录中）：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following command will start the app server and also output the server
    port in which the app is running in the terminal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将启动应用程序服务器，并在终端中输出应用程序运行的服务器端口：
- en: '![Figure 8.2 – yarn start output'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – yarn start输出'
- en: '](img/B17076_8_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_02.jpg)'
- en: Figure 8.2 – yarn start output
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – yarn start输出
- en: As seen in *Figure 8.1*, the app is served at `http://localhost:3000`. If everything
    works properly, then once the server is started, it will automatically open the
    web browser to display the React app.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图8.1*所示，应用程序在`http://localhost:3000`上提供。如果一切正常，那么一旦服务器启动，它将自动打开Web浏览器以显示React应用程序。
- en: For the development of the app, we won't spend more time on styling, but we
    will make it easier to integrate styling in the future and also enable quick prototyping;
    we'll make use of `tailwindcss`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的开发中，我们不会花费更多时间在样式上，但我们将使将来集成样式变得更容易，并且还可以实现快速原型设计；我们将使用`tailwindcss`。
- en: To make Tailwind work with the React.js app, we will need to do some extra configuration.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使Tailwind与React.js应用程序一起工作，我们需要进行一些额外的配置。
- en: 'Let''s install Tailwind and its peer dependencies via `npm` as shown in the
    `tailwindcss` docs: [https://tailwindcss.com/docs/guides/create-react-app](https://tailwindcss.com/docs/guides/create-react-app):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照`tailwindcss`文档中所示通过`npm`安装Tailwind及其对等依赖项：[https://tailwindcss.com/docs/guides/create-react-app](https://tailwindcss.com/docs/guides/create-react-app)：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the installation is done, we will go ahead and install the `craco` module,
    which allows us to override `postcss` configuration as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们将继续安装`craco`模块，它允许我们覆盖`postcss`配置如下：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After installing `craco`, we can go ahead and configure how to build, start,
    and test the React app. This will be done by changing the commands for `"start"`,
    `"build"`, and `"test"` in `package.json` to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完`craco`后，我们可以继续配置如何构建、启动和测试React应用程序。这将通过更改`package.json`中`"start"`、`"build"`和`"test"`的命令来完成，如下所示：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the changes made previously, let''s create a config file that enables
    `craco` to always inject `tailwindcss` and `autoprefixer` when building a React
    app, as shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过之前所做的更改，让我们创建一个配置文件，使`craco`在构建React应用程序时始终注入`tailwindcss`和`autoprefixer`，如下所示：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s configure `tailwindcss` itself. With this configuration, we can tell
    `tailwindcss` to remove unused styles in production, we can add custom themes,
    and we can also add customized color, font, width, and height not included in
    the `tailwindcss` package, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置`tailwindcss`本身。通过这个配置，我们可以告诉`tailwindcss`在生产中删除未使用的样式，我们可以添加自定义主题，还可以添加`tailwindcss`包中未包含的自定义颜色、字体、宽度和高度，如下所示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After configuring Tailwind, we will edit the `css` file, `index.css`, in the
    `src` directory. We''ll add the following to the file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置Tailwind之后，我们将编辑`src`目录中的`css`文件`index.css`。我们将向文件中添加以下内容：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We are done with the configuration; we can now import `index.css` in `index.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了配置；现在我们可以在`index.js`中导入`index.css`：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that in `App.js`, we still have the default code that came with the `create-react-app`
    package; let''s edit the code. Here is the initial code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`App.js`中，我们仍然有`create-react-app`包中提供的默认代码；让我们编辑代码。这是初始代码：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We edit the HTML code in the `App` comment by editing the HTML and replacing
    it with the name of the app:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过编辑HTML代码在`App`注释中编辑HTML，并用应用程序的名称替换它：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'By updating `App.js` with the preceding code and saving it, you should see
    the changes being made in the browser directly, as seen in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新`App.js`并保存前面的代码，您应该直接在浏览器中看到所做的更改，如下截图所示：
- en: '![Figure 8.3 – React app'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 – React应用程序'
- en: '](img/B17076_8_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_03.jpg)'
- en: Figure 8.3 – React app
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – React应用程序
- en: 'Let''s test our `tailwindcss` configuration to ensure it is set properly. We
    will do this by adding some style to the preceding code as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试我们的`tailwindcss`配置，以确保它设置正确。我们将通过向前面的代码添加一些样式来做到这一点，如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `css` styling is declared within a `div` attribute called `className`. First,
    we set the maximum width and the border, then create a margin along the *x* axis
    (margin left and right to be `auto`), declare the font size to be `text-3xl`,
    set the margin top to be `60`, and then center the text within the `div` instance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`css`样式是在名为`className`的`div`属性中声明的。首先，我们设置最大宽度和边框，然后在*x*轴上创建一个边距（左右边距为`auto`），声明字体大小为`text-3xl`，将顶部边距设置为`60`，然后在`div`实例中居中文本。'
- en: 'Based on the styling, we should see the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据样式，我们应该看到以下输出：
- en: '![Figure 8.4 – Centering the div and text'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 居中div和文本'
- en: '](img/B17076_8_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_04.jpg)'
- en: Figure 8.4 – Centering the div and text
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 居中div和文本
- en: The code base is set and we are ready to implement our no-code environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库已经设置好，我们准备实现无代码环境。
- en: In this section, we saw how to set up a React environment for our app. We also
    saw how to configure `tailwindcss` for our app. In the next section, we will learn
    how to structure and design the app.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何为我们的应用程序设置React环境。我们还看到了如何为我们的应用程序配置`tailwindcss`。在下一节中，我们将学习如何构建和设计应用程序。
- en: Structuring and designing the app
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和设计应用程序
- en: React.js has some core philosophy of app design, which is mostly about breaking
    up the UI into a component hierarchy, and also one of the ideas is to identify
    where your state should live.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: React.js有一些关于应用程序设计的核心理念，主要是将UI分解为组件层次结构，另一个理念是确定状态应该存在的位置。
- en: In this section, we will see how to design the structure of our no-code app
    with React.js and also consider the React philosophy of app design. With this
    principle, we will find it easy to implement a basic UI in React.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用React.js设计无代码应用程序的结构，并考虑React应用程序设计的理念。根据这个原则，我们将发现在React中实现基本UI很容易。
- en: First, let's understand what a no-code environment is and what we want to achieve
    with it. The no-code environment is used to make data handling and analysis easier
    with just the click of a few buttons.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们了解什么是无代码环境，以及我们希望通过它实现什么。无代码环境用于通过点击几下按钮使数据处理和分析变得更加容易。
- en: 'We will create a platform where users can upload their data, perform analysis,
    and do what they do with code, such as the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个平台，用户可以上传其数据，进行分析，并进行代码操作，例如以下操作：
- en: DataFrame-to-DataFrame operations such as `concat`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataFrame到DataFrame操作，例如“concat”
- en: Arithmetic operations such as `cummax` and `cumsum`
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如“cummax”和“cumsum”之类的算术操作
- en: Querying to filter out a DataFrame by a column value
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询按列值筛选出DataFrame
- en: Describing a DataFrame
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述DataFrame
- en: 'We want to be able to do all that without actually coding, and everything will
    be done in the browser. We also want to make it possible to get insights from
    data via data visualization using a bar chart, line chart, and pie chart. The
    following figure shows a sketch of the app design:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够在不编写代码的情况下完成所有这些操作，并且所有操作都将在浏览器中完成。我们还希望通过数据可视化（使用柱状图、折线图和饼图）获得数据洞察。以下图显示了应用程序设计的草图：
- en: '![Figure 8.5 – App structure and design sketch'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 - 应用程序结构和设计草图'
- en: '](img/B17076_8_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_05.jpg)'
- en: Figure 8.5 – App structure and design sketch
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 - 应用程序结构和设计草图
- en: '*Figure 8.5* shows the structure and design of the app. The app is divided
    into three main components, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.5*显示了应用程序的结构和设计。应用程序分为三个主要组件，如下所示：'
- en: The `Navbar` component, containing file upload, a bar chart, a line chart, and
    the `DataFrame` operation select field
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “导航栏”组件，包含文件上传、柱状图、折线图和“DataFrame”操作选择字段
- en: The main body containing a `Data Table` component and a `chart` component
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含“数据表”组件和“图表”组件的主体
- en: '`SideBar`, containing the side planes for chart and `DataFrame` operations'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “侧边栏”，包含图表和“DataFrame”操作的侧面板
- en: 'The app workflow can be described as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序工作流程如下所述：
- en: First, a data file (`csv`) is uploaded.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，上传了一个数据文件（csv）。
- en: By uploading a file, the first `Data Table` is created. This is a component
    containing the display of DataFrame.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过上传文件，创建了第一个“数据表”。这是一个包含DataFrame显示的组件。
- en: To perform any operation, such as `DataFrame` operations or chart operations,
    the Data Table is selected, so that we can identify the correct table to perform
    operations on.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行任何操作，例如DataFrame操作或图表操作，必须选择数据表，以便我们可以识别要执行操作的正确表。
- en: For chart operations, either a bar chart, line chart, or pie chart is clicked.
    This clicked event activates the `Side Plane` for chart operations.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于图表操作，单击柱状图、折线图或饼图。此单击事件将激活图表操作的“侧面板”。
- en: If a `DataFrame` operation is selected, the `Side Plane` is activated for `DataFrame`
    operations.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果选择了“DataFrame”操作，则“侧面板”将被激活以进行“DataFrame”操作。
- en: When you've filled in the necessary fields in the `Side Plane`, a new chart
    component and `Data Table` component are created.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在“侧面板”中填写必要的字段时，将创建新的图表组件和“数据表”组件。
- en: 'The following figure describes the whole workflow:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了整个工作流程：
- en: '![Figure 8.6 – App workflow'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 - 应用程序工作流程'
- en: '](img/B17076_8_06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_06.jpg)'
- en: Figure 8.6 – App workflow
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 - 应用程序工作流程
- en: The workflow shows how each component responds to one another. For instance,
    without uploading a file, the main body and the `Side Plane` will be invisible.
    Even with file upload, the `Side Plane` remains hidden and only comes up whenever
    a DataFrame or chart operation is to be performed on a particular data table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程显示了每个组件如何相互响应。例如，没有上传文件，主体和“侧面板”将不可见。即使上传了文件，“侧面板”仍然隐藏，只有在要对特定数据表执行DataFrame或图表操作时才会出现。
- en: With this, it shows that we need to create a state to manage the activation
    of the main body whenever a file is uploaded and also a state to manage how the
    `Side Plane` is activated when operations are being done on a data table. Also,
    note that the `Side Plane` contains two operations, and we must display the fields
    for these operations based on the type of operations being selected.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由此可见，我们需要创建一个状态来管理在上传文件时激活主体的状态，还需要创建一个状态来管理在对数据表进行操作时激活“侧面板”的状态。还要注意，“侧面板”包含两种操作，我们必须根据所选操作的类型显示这些操作的字段。
- en: 'If a chart operation is being selected, the `Side Plane` needs to display the
    necessary fields for the selected plot chart, either bar, line, or pie chart,
    and if it''s a `DataFrame` operation that''s being selected, the `Side Plane`
    needs to display the DataFrame operation fields as shown in the following figure:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了图表操作，则“侧面板”需要显示所选绘图图表（柱状图、折线图或饼图）所需的字段，如果选择了“DataFrame”操作，则“侧面板”需要显示如下图所示的DataFrame操作字段：
- en: '![Figure 8.7 – Side plane operation fields'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.7 - 侧面板操作字段'
- en: '](img/B17076_8_07.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_07.jpg)'
- en: Figure 8.7 – Side plane operation fields
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 - 侧面板操作字段
- en: From *Figure 8.7*, we can see that the data table and `chart` components have
    an `Data Table` components and `chart` components. Having a state for each component
    makes it possible to create, update, and delete the component as we desire.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图8.7*中，我们可以看到数据表和“图表”组件具有“数据表”组件和“图表”组件。每个组件都有一个状态，这样就可以根据需要创建、更新和删除组件。
- en: As described in the app workflow, the `Side Plane` operations need data for
    visualization and `DataFrame` operations and this data is obtained by clicking
    on our desired `Data Table` to work on. Each `Data Table` stores its own DataFrame
    object (we'll look into this deeply while implementing the steps). Hence, whenever
    a data table is clicked, its index in the data table state is obtained and passed
    into the side plane alongside the data table state that indicates which data table
    to work on.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如应用程序工作流程所述，“侧面板”操作需要可视化和DataFrame操作的数据，这些数据是通过单击我们想要处理的所需“数据表”来获取的。每个“数据表”都存储着自己的DataFrame对象（在实施步骤时我们将深入研究这一点）。因此，每当单击数据表时，都会获取其在数据表状态中的索引，并将其传递到侧面板中，同时传递指示要处理哪个数据表的数据表状态。
- en: Also, for the side plane to know which chart type (bar, line, or pie) is required
    for the operation or what type of `DataFrame` operation is to be done, we create
    a state to manage what type of chart or `DataFrame` is currently selected.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了让侧面板知道所需的图表类型（柱状图、折线图或饼图）是什么，或者要执行什么类型的`DataFrame`操作，我们创建一个状态来管理当前选定的图表或`DataFrame`类型。
- en: 'In summary, the set of states that''s needed is described as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，所需的状态集描述如下：
- en: State to manage the `DataTable` list
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理`DataTable`列表的状态
- en: State to manage the list of charts
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理图表列表的状态
- en: State to show to manage the visibility of `SidePlane`
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理`SidePlane`可见性的状态
- en: State to manage the current `DataTable` index
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理当前`DataTable`索引的状态
- en: State to manage the type of chart selected
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理所选图表类型的状态
- en: State to manage the current `DataFrame` operation selected
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理当前选定的`DataFrame`操作的状态
- en: The state created here is not well optimized. It's possible to manage the number
    of states created; for example, the same state managing `Side Plane` visibility
    can also be used to manage the type of chart selected.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里创建的状态并不是很优化。可以管理创建的状态的数量；例如，管理`Side Plane`可见性的相同状态也可以用于管理所选图表类型。
- en: Since we will be using more than one or two states and some of the states interact
    with another state, we could use `useReducer` (a React Hook) to manage the state
    interactions but we would like to make this simple without adding overhead knowledge.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用超过一个或两个状态，并且其中一些状态会与另一个状态交互，我们可以使用`useReducer`（一个React Hook）来管理状态交互，但我们希望简化这个过程，而不是增加额外的知识负担。
- en: In this section, we talked about the app design and structure. We also designed
    the app workflow and talked about different states to be created for the app.
    In the next section, we will talk about the app layout and `DataTable` components.
    We will see how to create a data table component and how to manage the state.
    We will also look into uploading a file in the browser with Danfo.js.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了应用程序的设计和结构。我们还设计了应用程序的工作流程，并讨论了为应用程序创建的不同状态。在下一节中，我们将讨论应用程序的布局和`DataTable`组件。我们将看到如何创建数据表组件以及如何管理状态。我们还将研究如何在浏览器中使用Danfo.js上传文件。
- en: App layout and the DataTable component
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序布局和DataTable组件
- en: In this section, we'll see how to lay out the app based on the design and workflow
    discussed in the previous section. Also, we will implement the `DataTable` component,
    responsible for the display of `DataFrame` tables. We will also implement the
    `DataTables` component, responsible for displaying different `DataTable` components.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何根据前一节讨论的设计和工作流程来布置应用程序。此外，我们将实现`DataTable`组件，负责显示`DataFrame`表格。我们还将实现`DataTables`组件，负责显示不同的`DataTable`组件。
- en: We've seen the sketch of what the app will look like and also seen the basic
    workflow of the app. We will start to implement the steps by first building the
    basic layout of the app and then implementing the data table component.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了应用程序的草图，也看到了应用程序的基本工作流程。我们将开始实施这些步骤，首先构建应用程序的基本布局，然后实现数据表组件。
- en: 'With `tailwindcss`, it''s quite easy to lay out the app. Let''s create a file
    called `App.js` and input the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tailwindcss`，布置应用程序非常容易。让我们创建一个名为`App.js`的文件，并输入以下代码：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code snippet creates the layout of the app with a `flex` box.
    This layout shows the basic components of the app, which are `Nav`, `Main Body`,
    and `Side Plane`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段创建了一个带有`flex`框的应用程序布局。这个布局显示了应用程序的基本组件，即`Nav`、`Main Body`和`Side Plane`。
- en: Note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `css` instance being used in the tutorial won't be explained. Our main focus
    is on building the functionality of the app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的`css`实例不会被解释。我们的主要重点是构建应用程序的功能。
- en: 'If everything runs well, we should get the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该得到以下输出：
- en: '![Figure 8.8 – App layout'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.8 - 应用程序布局'
- en: '](img/B17076_8_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_08.jpg)'
- en: Figure 8.8 – App layout
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 - 应用程序布局
- en: We've laid out the app. Let's move on to implementing `DataTable` components
    to display the result of all `DataFrame` operations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经布置好了应用程序。让我们继续实现`DataTable`组件，以显示所有`DataFrame`操作的结果。
- en: Implementing DataTable components
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现DataTable组件
- en: 'A `DataTable` component is responsible for the display of a data table. For
    each DataFrame operation, we generate a new data table showing the result of the
    operation as shown in the following sketch:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataTable`组件负责显示数据表。对于每个DataFrame操作，我们生成一个新的数据表，显示操作的结果，如下图所示：'
- en: '![Figure 8.9 – Data table'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.9 - 数据表'
- en: '](img/B17076_8_09.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_09.jpg)'
- en: Figure 8.9 – Data table
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 - 数据表
- en: For the display of the table, we'll make use of a React package called `react-table-v6`
    and since we want the `DataTable` component to be draggable across the page, there
    is a package called `react-draggable`, which makes it easier to implement the
    feature.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示表格，我们将使用一个名为`react-table-v6`的React包，由于我们希望`DataTable`组件可以在页面上拖动，所以有一个名为`react-draggable`的包，它可以更容易地实现这个功能。
- en: Note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for `DataTable` can be pulled from here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataTable`的代码可以从这里获取：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTable.js)。'
- en: 'We need to add these packages to our code base using `yarn`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`yarn`将这些包添加到我们的代码库中：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the packages are installed, let''s create a `DataTable` component in the
    `src/component/DataTable.js` file with the following steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完包之后，在`src/component/DataTable.js`文件中创建一个`DataTable`组件，具体步骤如下：
- en: 'We import the necessary packages:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入必要的包：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We create the `DataTable` component:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建`DataTable`组件：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `DataTable` component takes in the following `props` values:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataTable`组件接受以下`props`值：'
- en: '`columns`: Data table column names.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns`：数据表列名。'
- en: '`values`: Data table values for each column.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values`：每列的数据表值。'
- en: '`setCompIndex`: This is a state function used to manage the current data table
    selected.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setCompIndex`：这是一个状态函数，用于管理当前选择的数据表。'
- en: '`index`: This is the index of the current table.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：这是当前表格的索引。'
- en: For the `react-table` component, we need to reshape the column and the values
    to fit the desired input for the `react-table` component.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`react-table`组件，我们需要重塑列和值，以适应`react-table`组件所需的输入。
- en: 'Let''s reshape the column value to be passed into `react-table`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重塑要传递给`react-table`的列值：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using the preceding code, the column names, which are the `Header` for the
    table, are transformed to the following shape:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述代码，表格的列名（即表格的`Header`）被转换为以下形式：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `Header` key is the name of the column to be shown in the table, and `accessor`
    is the key in the data.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`键是要在表格中显示的列名，`accessor`是数据中的键。'
- en: 'We need to transform the data table values into a format needed by `react-table`.
    The following code is used to transform data table values:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将数据表值转换为`react-table`所需的格式。以下代码用于转换数据表值：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As shown in the preceding code, we will transform the data table values into
    the following data form:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，我们将把数据表值转换为以下数据形式：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Initially, `values` is an array of an array that is being transformed into the
    preceding data format and then assigned to the `data` variable.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，`values`是一个数组的数组，正在转换为上述数据格式，然后赋给`data`变量。
- en: 'The accessor declared in the preceding column format points to the value of
    each of the keys in the dictionary. Sometimes, we might have nested data in the
    following format:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述列格式中声明的访问器指向字典中每个键的值。有时，我们可能会有以下格式的嵌套数据：
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For this type of data format, we can declare the `data` column to be in the
    following format:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种数据格式，我们可以声明`data`列的格式如下：
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: For this project, we won't be working with this nested data format, so there
    won't be a need to dive deeper, but if you are curious, you can check the `react-table-v6`
    documentation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们不会使用这种嵌套数据格式，所以不需要深入研究，但如果你感兴趣，可以查看`react-table-v6`文档。
- en: 'The column names, including `Header`, and the table data are now in the right
    format and are ready to be passed into the `react` table. The `DataTable` component
    is now updated to contain the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 包括`Header`在内的列名和表格数据现在已经处于正确的格式，并准备传递给`react`表格。`DataTable`组件现在已更新，包含以下代码：
- en: '[PRE22]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `ReactTable` component is wrapped in the `Draggable` component to make the
    `DataTable` component draggable. In the `ReactTable` component, we set up some
    pagination fields, such as setting the default page to be `10`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactTable`组件被包装在`Draggable`组件中，以使`DataTable`组件可拖动。在`ReactTable`组件中，我们设置了一些分页字段，例如将默认页设置为`10`。'
- en: Recall how when designing the workflow of the app we mentioned tracking the
    ID of a `Data Table` when clicked. The `handleSide Plane` function is used to
    make a call to `setCompIndex`. `setCompIndex` is used to update the `compIndex`
    state, which stores the index of the selected `Data Table`.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，当设计应用程序的工作流程时，我们提到了跟踪单击的`Data Table`的ID。`handleSide Plane`函数用于调用`setCompIndex`。`setCompIndex`用于更新存储所选`Data
    Table`的索引的`compIndex`状态。
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for `DataTables` is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataTables`的代码在这里：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/DataTables.js)。'
- en: 'Several Data Tables will be generated per operation, hence we need to manage
    the display of this `Data Table`. We''ll create a component that manages the display
    of all the `Data Tables` generated; hence, we''ll create a file in the component
    directory and name it `Data Tables`, containing the following code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 每个操作将生成多个数据表，因此我们需要管理这些`Data Table`的显示。我们将创建一个组件来管理生成的所有`Data Table`的显示；因此，我们将在组件目录中创建一个名为`Data
    Tables`的文件，并包含以下代码：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This component loops through the `datacomp` state and passes each prop into
    the `DataTable` components.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件循环遍历`datacomp`状态，并将每个属性传递给`DataTable`组件。
- en: In the next sub-section, we'll go ahead and initialize different states and
    also show how to upload a CSV and obtain our data.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个子部分中，我们将继续初始化不同的状态，并展示如何上传CSV并获取我们的数据。
- en: File upload and state management
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件上传和状态管理
- en: From the app design, we see that for any operation to take place, we need to
    upload a file first. By uploading the files, we create the `DataFrame` that will
    be used by the `DataTable` and `chart` components.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序设计中，我们可以看到任何操作都需要先上传文件。通过上传文件，我们创建了将被`DataTable`和`chart`组件使用的`DataFrame`。
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Across this chapter, the code in `App.js` is gradually updated based on the
    implementation of new components. But the final code for `App.js` is available
    here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，`App.js` 中的代码会根据新组件的实现逐渐更新。但是`App.js` 的最终代码可以在这里找到：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/App.js)。
- en: 'We''ll update the code in `App.js` with the following step to contain the `Data`
    component state, file upload, and updating of the state:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`App.js`中的代码，包括`Data`组件状态、文件上传和状态更新：
- en: 'We import `React` and a React hook called `useState`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入`React`和一个名为`useState`的React hook：
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We import the `read_csv` method, which will be used to read the CSV files uploaded:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入`read_csv`方法，该方法将用于读取上传的CSV文件：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We create a state to store a list of data for each `DataTable` component generated:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个状态来存储每个生成的`DataTable`组件的数据列表：
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We then create a function to manage file upload and read the uploaded file
    into a `DataFrame`:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后我们创建一个函数来管理文件上传并将上传的文件读入`DataFrame`中： '
- en: '[PRE27]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding code, we generate a blob URL from the uploaded file with `URL.createObjectURL`.
    This is done because the `read_csv` code in `Danfo.js` is only taken in the local
    path of the CSV file, the HTTP URL of a CSV file, and the blob URL of a CSV file.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们使用`URL.createObjectURL`从上传的文件生成一个blob URL。这是因为`Danfo.js`中的`read_csv`代码只接受CSV文件的本地路径、CSV文件的HTTP
    URL和CSV文件的blob URL。
- en: The generated URL is then passed into the `read_csv` function. Since `read_csv`
    is an asynchronous function, we need to wait for the promise to be resolved, and
    then collect the returned value from the promise via the `then` method. The return
    value from the resolved promise is a `DataFrame`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将生成的URL传递给`read_csv`函数。由于`read_csv`是一个异步函数，我们需要等待承诺被解决，然后通过`then`方法收集承诺的返回值。解决承诺的返回值是一个`DataFrame`。
- en: 'With `read_csv`, the CSV data is converted into a `DataFrame` and then the
    `DataComponent` state is updated. Using the `setDataComp` state function, we created
    an object containing the following keys:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`read_csv`，CSV数据被转换为`DataFrame`，然后更新`DataComponent`状态。使用`setDataComp`状态函数，我们创建了一个包含以下键的对象：
- en: 'a) `columns`: To store the headers (column name) of the CSV file'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'a) `columns`: 存储CSV文件的标题（列名）'
- en: 'b) `values`: To store the CSV data point, which is the `DataFrame` values'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'b) `values`: 存储CSV数据点，即`DataFrame`的值'
- en: 'c) `df`: To store the `DataFrame` generated'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'c) `df`: 存储生成的`DataFrame`'
- en: 'd) `keys`: Generates a key for each of the Data component `data`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'd) `keys`: 为每个数据组件`data`生成一个键'
- en: There was a decision to be made, between actually saving the DataFrame itself
    in the state data for each component. Since we have the column name and the `DataFrame`
    value stored, it looks redundant.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 需要做出一个决定，是在每个组件的状态数据中实际保存DataFrame本身。由于我们已经存储了列名和`DataFrame`值，这看起来是多余的。
- en: But the reason we finally go with storing it is that it will be computationally
    expensive to always create a `DataFrame` from the column and values every time
    we need to perform `DataFrame` operations.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们最终选择存储它的原因是，每次需要执行`DataFrame`操作时，总是从列和值中创建`DataFrame`将会非常昂贵。
- en: Also, `columns` and `values` are stored for easy accessibility whenever we want
    to generate a table from the `react-table` component. But still, it feels redundant
    and as a personal exercise (among the list of to-dos that will be listed at the
    end of this section), you can go ahead and clean it up.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`columns`和`values`被存储以便在我们想要从`react-table`组件生成表格时轻松访问。但仍然感觉冗余，作为个人练习（在本节末尾列出的待办事项清单中），您可以继续清理它。
- en: 'We print out the output of the `dataComp` state in the browser console once
    the state is updated:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦状态更新，我们就在浏览器控制台中打印出`dataComp`状态的输出：
- en: '[PRE28]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following screenshot shows the updated UI of the app:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了应用程序的更新UI：
- en: '![Figure 8.10 – Updated UI for file upload'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10 - 文件上传的更新UI'
- en: '](img/B17076_8_10.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_10.jpg)'
- en: Figure 8.10 – Updated UI for file upload
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 - 文件上传的更新UI
- en: 'Once a file is uploaded, we should see the following output in the browser
    console:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传文件，我们应该在浏览器控制台中看到以下输出：
- en: '![Figure 8.11 – dataComp state output'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11 - dataComp状态输出'
- en: '](img/B17076_8_11.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_11.jpg)'
- en: Figure 8.11 – dataComp state output
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 - dataComp状态输出
- en: We've set up the file upload and also the state management for each of the `DataTable`
    components. Let's integrate the `DataTables` component created into the app.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了文件上传和每个`DataTable`组件的状态管理。让我们将创建的`DataTables`组件集成到应用程序中。
- en: Integrating the DataTables component into App.js
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将DataTable组件集成到App.js中
- en: '`App.js` will be updated with the following steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.js`将按以下步骤进行更新：'
- en: 'We import the `DataTables` component and create a `compIndex` state, which
    enables us to store the index of the `DataTable` component we want to work on
    at the moment:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们导入`DataTables`组件并创建一个`compIndex`状态，它使我们能够存储我们想要处理的`DataTable`组件的索引：
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We then add the `DataTables` component to the `App` component:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将`DataTables`组件添加到`App`组件中：
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To enable `DataTable` component visibility, we check that the `dataComp` state
    is not empty. Before uploading a file, if the `dataComp` state is empty, the `DataTable`
    component will not be visible. Once a file is updated, the `DataTable` component
    becomes visible, since the `dataComp` state is no longer empty.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`DataTable`组件可见，我们检查`dataComp`状态是否为空。在上传文件之前，如果`dataComp`状态为空，`DataTable`组件将不可见。一旦文件更新，`DataTable`组件就变得可见，因为`dataComp`状态不再为空。
- en: 'The preceding code should give us the following output once a file is uploaded:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传文件，上述代码应该给我们以下输出：
- en: '![Figure 8.12 – Display of the DataTable component on file upload'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.12 - 文件上传时显示的DataTable组件'
- en: '](img/B17076_8_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_12.jpg)'
- en: Figure 8.12 – Display of the DataTable component on file upload
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 - 文件上传时显示的DataTable组件
- en: In this section, we talked about file upload and `DataTable` creation and management
    and saw how to manage state. In the next section, we will implement different
    `DataFrame` operation components and also implement the `Side Plane` for `DataFrame`
    operations.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了文件上传和`DataTable`的创建和管理，并看到了如何管理状态。在下一节中，我们将实现不同的`DataFrame`操作组件，并为`DataFrame`操作实现`Side
    Plane`。
- en: Creating different DataFrame operation components
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建不同的DataFrame操作组件
- en: In this section, we will create different `DataFrame` operation components and
    also implement the `Side Plane` for `DataFrame` operation components. Danfo.js
    contains a lot of `DataFrame` operations. If we were to design a component for
    each, it would be very stressful and redundant.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建不同的`DataFrame`操作组件，并为`DataFrame`操作组件实现`Side Plane`。Danfo.js包含许多`DataFrame`操作。如果我们为每个操作设计一个组件，那将会非常紧张和冗余。
- en: To prevent the creation of a component for each `DataFrame` method, we group
    each of the `DataFrame` operations based on their (keyword) argument, that is,
    based on the variable passed into them. For example, there are some `DataFrame`
    methods that take in only the axis of operation, hence we can group these types
    of methods together.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止为每个`DataFrame`方法创建一个组件，我们根据它们的（关键字）参数对`DataFrame`操作进行分组，也就是根据传递给它们的变量进行分组。例如，有一些`DataFrame`方法只接受操作的轴，因此我们可以将这些类型的方法分组在一起。
- en: 'Here is a list of `DataFrame` operation components to be created and the `DataFrame`
    method grouped under them:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要创建的`DataFrame`操作组件列表和它们下面的`DataFrame`方法：
- en: '`DataFrame` method whose argument is only the axis of operation, which can
    be either `1` or `0`. The methods used to carry out arithmetic operations on `DataFrame`
    include `min`, `max`, `sum`, `std`, `var`, `sum`, `cumsum`, `cummax`, and `cummin`.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame`方法的参数只是操作的轴，可以是`1`或`0`。用于在`DataFrame`上执行算术操作的方法包括`min`、`max`、`sum`、`std`、`var`、`sum`、`cumsum`、`cummax`和`cummin`。'
- en: '`DataFrame` components, such as the logical operation between a `DataFrame`
    and a series, a value, or a `DataFrame`. The methods used to carry out these operations
    are `concat`, `lt`, `gte`, `lte`, `gt`, and `neq`.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame`组件，例如`DataFrame`和系列之间的逻辑操作，值或`DataFrame`之间的逻辑操作。用于执行这些操作的方法包括`concat`、`lt`、`gte`、`lte`、`gt`和`neq`。'
- en: '`DataFrame` query.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame`查询。'
- en: '`DataFrame` statistic.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame`统计。'
- en: 'We will start looking at the implementation of these components starting from
    the least complex in this order: `Describe`, `query`, `Df2df`, and `Arithmetic`.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最不复杂的组件开始查看这些组件的实现，顺序为：`Describe`、`query`、`Df2df`和`Arithmetic`。
- en: Implementing the Describe component
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Describe组件
- en: In this section, we will implement the `Describe` component and also integrate
    the `Side Plane` component.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将实现`Describe`组件，并集成`Side Plane`组件。
- en: In the `src/Components/` directory, let's create another folder called `Side
    Planes`. This folder will contain all the components for `DataFrame` operations.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/Components/`目录中，让我们创建另一个名为`Side Planes`的文件夹。这个文件夹将包含所有用于`DataFrame`操作的组件。
- en: 'In the `Side Planes/` folder, let''s create a `".js"` file named `Describe.js`
    and update it with the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Side Planes/`文件夹中，让我们创建一个名为`Describe.js`的`".js"`文件，并按照以下步骤进行更新：
- en: 'We create the `Describe` functional component, taking in the `dataComp` state
    and the `setDataComp` state function, to update the `dataComp` state with the
    generated `DataFrame`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建`Describe`函数组件，接受`dataComp`状态和`setDataComp`状态函数，以使用生成的`DataFrame`更新`dataComp`状态：
- en: '[PRE31]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We create a button named `Describe`:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个名为`Describe`的按钮：
- en: '[PRE32]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `Describe` component has a button interface because it does not take in
    any arguments. The button has an `onClick` event that triggers the `Describe`
    function whenever the button is clicked.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`Describe`组件具有按钮接口，因为它不接受任何参数。按钮具有`onClick`事件，每当点击按钮时都会触发`Describe`函数。'
- en: 'We then implement the `describe()` function, which is triggered anytime the
    `describe` button is clicked:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们实现`describe()`函数，它会在点击`describe`按钮时触发：
- en: '[PRE33]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We obtain the `df` key containing the `DataFrame` from the `dataComp` state
    and then call the `describe` method.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`dataComp`状态中获取包含`DataFrame`的`df`键，然后调用`describe`方法。
- en: From the `DataFrame` generated from the `describe` operation, we obtain the
    columns and add an index to the list of column names. The index is added at the
    start of the list; this is done because the index generated from the `describe`
    method is needed to capture what each row in the data is.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 从`describe`操作生成的`DataFrame`中，我们获取列并将索引添加到列名列表中。索引添加在列表的开头；这是因为需要捕获数据中每一行的索引，这是从`describe`方法生成的。
- en: Next, we obtain the `DataFrame` value, loop through it, and add the index values
    to the `DataFrame` value obtained.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们获取`DataFrame`值，循环遍历它，并将索引值添加到获取的`DataFrame`值中。
- en: 'We update the `dataComp` state with the new generated column, value, and `DataFrame`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用新生成的列、值和`DataFrame`更新`dataComp`状态：
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: To view this component in action, we will need to implement the `DataFrame`
    operation selection field, as shown in the `App` design sketch in *Figure 8.5*.
    This `DataFrame` operation selection field enables us to select which of the `DataFrame`
    operation components to show in `Side Plane`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此组件的操作，我们需要实现`DataFrame`操作选择字段，如*图8.5*中的`App`设计草图所示。这个`DataFrame`操作选择字段使我们能够选择在`Side
    Plane`中显示哪个`DataFrame`操作组件。
- en: To do this, we need to add the `select` field for the `DataFrame` operation
    in the `Navbar` component alongside the input field for file upload. Also, we
    need to implement condition rendering for each of the `DataFrame` operation components
    shown in `Side Plane`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要在`Navbar`组件中添加`DataFrame`操作的`select`字段，以及文件上传的输入字段。此外，我们需要为`Side Plane`中显示的每个`DataFrame`操作组件实现条件渲染。
- en: Setting up SidePlane for the Describe component
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Describe组件设置SidePlane
- en: 'In the `Side Planes/` folder, let''s create a file called `Side Plane.js` and
    input the following code:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Side Planes/`文件夹中，让我们创建一个名为`Side Plane.js`的文件，并输入以下代码：
- en: '[PRE35]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the preceding code, we create a `Side Plane` component. This component contains
    conditional rendering based on the type of data operation selected. The `DataFrame`
    operation selected is managed by the `dfOpsType` state.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个`Side Plane`组件。这个组件根据所选的数据操作类型进行条件渲染。所选的`DataFrame`操作由`dfOpsType`状态管理。
- en: The `Side Plane` takes in the `dataComp` state, which can be any of the data
    stored in the `dataComps` state. Some `DataFrame` operations will need the selected
    `dataComp` state and also the whole state, which is `dataComps` state, for their
    operation.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`Side Plane`接受`dataComp`状态，它可以是`dataComps`状态中存储的任何数据。一些`DataFrame`操作将需要所选的`dataComp`状态以及整个状态，即`dataComps`状态，进行操作。'
- en: In the `Side Plane` component, we will check `dfOpsType` to find out the type
    of operation passed and the interface to render in the side plane.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Side Plane`组件中，我们将检查`dfOpsType`以找出传递的操作类型和在侧面板中渲染的接口。
- en: 'Before we move into integrating `Side Plane` into `App.js`, let''s create an
    `index.js` file in the `Side Planes/` folder. With this, we can define the component
    to import. Since we are using conditional rendering from the `Side Plane` component,
    we just need to export the `Side Plane` component in the `index.js` instance,
    as shown in the following code:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`Side Plane`集成到`App.js`之前，让我们在`Side Planes/`文件夹中创建一个`index.js`文件。通过这样做，我们可以定义要导入的组件。由于我们正在使用`Side
    Plane`组件的条件渲染，我们只需要在`index.js`实例中导出`Side Plane`组件，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding code enables us to import `Side Plane` in `App.js`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使我们能够在`App.js`中导入`Side Plane`。
- en: Integrating SidePlane into App.js
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将SidePlane集成到App.js中
- en: '`Side Plane` is created. Let''s integrate it into `App.js` and also add the
    HTML `select` field for the `DataFrame` operation to `App.js,` as shown in the
    following code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了`Side Plane`。让我们将其集成到`App.js`中，并在`App.js`中为`DataFrame`操作添加HTML`select`字段，如下面的代码所示：
- en: 'We import the `SidePlane` component:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`SidePlane`组件：
- en: '[PRE37]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We update the `App` component functionality with the following code:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下代码更新`App`组件功能：
- en: '[PRE38]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the preceding code, we create the `dfOpsType` state to store the current
    type of `DataFrame` operation selected.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了`dfOpsType`状态来存储当前选择的`DataFrame`操作的类型。
- en: '`showSidePlane` is also created to manage `SidePlane` visibility. Also, an
    array of `DataFrame` operations is created. We then create a function to handle
    updating `dfOpsType` and the `showSidePlane` state whenever a `DataFrame` operation
    is clicked.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 还创建了`showSidePlane`来管理`SidePlane`的可见性。还创建了一个`DataFrame`操作的数组。然后创建一个函数来处理点击`DataFrame`操作时更新`dfOpsType`和`showSidePlane`状态。
- en: 'We then add the `SidePlane` component:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加`SidePlane`组件：
- en: '[PRE39]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the preceding code, we display the `SidePlane` by first checking that the
    `SidePlane` state is not *false*, then we check the type of `SidePlane` to display.
    Since we''ve only implemented the `Describe` component among the list of `DataFrame`
    operations, let''s upload a file and then perform a `DataFrame` operation. The
    following screenshot shows the result of performing a `Describe` operation on
    a `DataTable`:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先检查`SidePlane`状态不是*false*，然后检查`SidePlane`的类型来显示`SidePlane`。由于我们只实现了`DataFrame`操作列表中的`Describe`组件，让我们上传一个文件然后执行`DataFrame`操作。以下截图显示了在`DataTable`上执行`Describe`操作的结果：
- en: '![Figure 8.13 – Describe operation on DataTable'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13 - 在DataTable上执行Describe操作'
- en: '](img/B17076_8_13.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_13.jpg)'
- en: Figure 8.13 – Describe operation on DataTable
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 - 在DataTable上执行Describe操作
- en: In the preceding screenshot, the data table at the top left is generated when
    the file is uploaded and the `DataFrame` at the bottom right as a result of the
    `Describe` operation.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，当上传文件时，左上角的数据表生成，右下角的`DataFrame`是`Describe`操作的结果。
- en: In this section, we saw how to implement the `Describe` component and how to
    manage `Side Plane` visibility. In the next section, we will implement the `Query`
    component for the `Query` method in the `DataFrame`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何实现`Describe`组件以及如何管理`Side Plane`的可见性。在下一节中，我们将为`DataFrame`的`Query`方法实现`Query`组件。
- en: Implementing the Query component
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Query组件
- en: In this section, we'll create a component for the `DataFrame` query method.
    This component will aid the filtering of the `DataFrame` by column values per
    `Data Table`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为`DataFrame`查询方法创建一个组件。该组件将帮助按`Data Table`的列值对`DataFrame`进行过滤。
- en: Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for a `Query` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query`组件的代码在这里可用：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Query.js)。'
- en: 'Let''s create a file in the `components/Side Planes/` folder named `Query.js`
    and update it with the following steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`components/Side Planes/`文件夹中创建一个名为`Query.js`的文件，并按以下步骤更新它：
- en: 'We create the `Query` component:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Query`组件：
- en: '[PRE40]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We created a `useRef` hook variable, which enables us to obtain the current
    value of the input to the following input fields: the column field (takes in the
    name of the column to query), the logic field (takes in the logic value to be
    used for the query), and the value field (takes in the value to be used to query
    the selected column).'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`useRef` hook变量，它使我们能够获取以下输入字段的当前值：列字段（输入要查询的列的名称）、逻辑字段（输入要用于查询的逻辑值）和值字段（输入要用于查询所选列的值）。
- en: 'We then update the `Query` component with the following code:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用以下代码更新`Query`组件：
- en: '[PRE41]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the preceding code, we obtain the column names available in the `DataFrame`
    of the current `Data Table`. This column name will be used to populate the select
    field to which the user can select the column to query.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们获取当前`Data Table`的`DataFrame`中可用的列名。这个列名将用于填充选择字段，用户可以选择要查询的列。
- en: We also create a list of symbols characterizing the type of logic operation
    we want to perform. This symbol will also be used to populate a select field to
    which users can select the logical operation to be used for the query.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一系列符号来表示我们要执行的逻辑操作的类型。这些符号也将用于填充选择字段，用户可以选择用于查询的逻辑操作。
- en: 'Create a `query` function. This function will be triggered to perform the query
    operation whenever the **query** button is clicked:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`query`函数。每当点击**查询**按钮时，将触发此函数执行查询操作：
- en: '[PRE42]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We obtain the value of each of the input fields (select fields) whenever the
    `query` function is triggered. For example, to obtain the value of the column
    field, we make use of `columnRef.current.value`. The same thing is applicable
    for obtaining the value in another field.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 每当触发`query`函数时，我们获取每个输入字段（选择字段）的值。例如，要获取列字段的值，我们使用`columnRef.current.value`。同样的方法也适用于获取另一个字段的值。
- en: We also invoke the query method for the `DataFrame` belonging to the current
    `dataComp` state. The value obtained from each of the input fields is passed into
    the query method to perform the operation.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还调用当前`dataComp`状态所属的`DataFrame`的查询方法。从每个输入字段获得的值传递到查询方法中执行操作。
- en: The `dataComps` state is updated by using the `setDataComp` state function.
    By updating the `dataComps` state, a new `DataComp` state is created containing
    the result of the `query` method.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setDataComp`状态函数更新`dataComps`状态。通过更新`dataComps`状态，创建一个包含`query`方法结果的新`DataComp`状态。
- en: Implementing the query component interface
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现查询组件接口
- en: 'We''ve seen the backend of the `Query` component, so now let''s build an interface
    for it. Let''s update the preceding code in `Query.js` with the following steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了`Query`组件的后端，现在让我们为其构建一个接口。让我们在`Query.js`中更新上述代码，采取以下步骤：
- en: 'For the query UI, we create a form containing three different input fields.
    First, we create the input field for the column field:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于查询UI，我们创建一个包含三个不同输入字段的表单。首先，我们创建列字段的输入字段：
- en: '[PRE43]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: For the column field, we loop through the column array to create HTML select
    field options for the list of columns in the `DataFrame`. We also include `columnRef`
    to track the selected column name.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列字段，我们循环遍历列数组，为`DataFrame`中的列列表创建HTML选择字段选项。我们还包括`columnRef`来跟踪所选的列名。
- en: 'We then create the logic input field:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们创建逻辑输入字段：
- en: '[PRE44]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We loop through the `logic` array and fill in the HTML select field with the
    logic operators. Also, `logicRef` is added to the HTML select field to obtain
    the selected logic operator.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们循环遍历`logic`数组，并用逻辑运算符填充HTML选择字段。同时，将`logicRef`添加到HTML选择字段中以获取所选的逻辑运算符。
- en: 'We then create the `input` field for the query value:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们创建查询值的`input`字段：
- en: '[PRE45]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We create a `button` class name to make a call to the `query` function:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个`button`类名来调用`query`函数：
- en: '[PRE46]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To visualize the `query` component in the main app, let''s update the `SidePlane`
    component in `SidePlane.js`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在主应用程序中可视化`query`组件，让我们更新`SidePlane.js`中的`SidePlane`组件：
- en: '[PRE47]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The preceding code updates the `Side Plane` to contain the `Query` component.
    If we perform a query operation on an uploaded file, we should get the following
    result:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码更新了`Side Plane`以包含`Query`组件。如果我们对上传的文件执行查询操作，我们应该得到以下结果：
- en: '![Figure 8.14 – Query operation run on column C, checking whether its value
    is greater than 20'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14 - 在列C上运行的查询操作，检查其值是否大于20'
- en: '](img/B17076_8_14.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_14.jpg)'
- en: Figure 8.14 – Query operation run on column C, checking whether its value is
    greater than 20
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 - 在列C上运行的查询操作，检查其值是否大于20
- en: In this section, we created a `query` component. In the next section, we will
    look into creating a component for operations involving `DataFrame`-to-`DataFrame`
    operations, series, and scalar values.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个`query`组件。在下一节中，我们将研究创建一个涉及`DataFrame`-to-`DataFrame`操作、series和scalar值的组件。
- en: Implementing the Df2df component
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Df2df组件
- en: In this section, we will be implementing a component for performing an operation
    between a `DataFrame` and another `DataFrame`, `Series`, and `Scalar` values.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现一个组件，用于在`DataFrame`和另一个`DataFrame`、`Series`和`Scalar`值之间执行操作。
- en: Note
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for the `Df2df` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js).'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`Df2df`组件的代码在这里可用：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Df2df.js)。'
- en: There are different components in Danfo.js that perform the operation between
    a `DataFrame` and a `Series` and a `DataFrame` and a `Scalar` value. To prevent
    having to create a component for each of these methods, we can group them together
    to form a single component.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Danfo.js中有不同的组件，用于在`DataFrame`和`Series`之间以及`DataFrame`和`Scalar`值之间执行操作。为了避免为每个方法创建一个组件，我们可以将它们组合在一起形成一个单一的组件。
- en: 'A list of `DataFrame` methods we plan on grouping together is as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划将一组`DataFrame`方法列在一起的列表如下：
- en: Less than (`df.lt`)
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小于（`df.lt`）
- en: Greater than (`df.gt`)
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于（`df.gt`）
- en: Not equal to (`df.ne`)
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不等于（`df.ne`）
- en: Equal to (`df.eq`)
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于（`df.eq`）
- en: Greater than or equal to (`df.ge`)
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于或等于（`df.ge`）
- en: Addition (`df.add`)
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加法（`df.add`）
- en: Subtraction (`df.sub`)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减法（`df.sub`）
- en: Multiplication (`df.mul`)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乘法（`df.mul`）
- en: Division (`df.div`)
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除法（`df.div`）
- en: Power (`df.pow`)
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 幂（`df.pow`）
- en: One common attribute in the preceding list of methods is that they all take
    in the same type of arguments, which is the value (it can be a `DataFrame`, `Series`,
    or `scalar` value) and the axis on which the operation is to be performed.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方法列表中的一个共同属性是它们都接受相同类型的参数，即值（可以是`DataFrame`、`Series`或`scalar`值）和要执行操作的轴。
- en: If we look at the `DataFrame` `concat` method, it also takes in arguments of
    the same pattern similar to the methods in the preceding list. The only difference
    is that for the `concat` method, the `df_list` argument is an array of `DataFrames`.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下`DataFrame` `concat`方法，它也接受与上述列表中的方法类似的模式的参数。唯一的区别是对于`concat`方法，`df_list`参数是一个`DataFrames`数组。
- en: 'Let''s create a file in the `Side Planes/` folder named `Df2df.js`. In this
    file, we will implement the `Df2df` component with the following steps:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Side Planes/`文件夹中创建一个名为`Df2df.js`的文件。在这个文件中，我们将按照以下步骤实现`Df2df`组件：
- en: 'First, we import `concat` from Danfo.js, and then create the `Df2df` component:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们从Danfo.js中导入“concat”，然后创建“Df2df”组件：
- en: '[PRE48]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We created a reference variable for each of the input fields. For the `Df2df`
    operation, we have four input fields (the `DataFrame` selection field, the `scalar`
    value input field, the `axis` field, and the `operation` type field).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为每个输入字段创建了一个引用变量。对于“Df2df”操作，我们有四个输入字段（“DataFrame”选择字段，“scalar”值输入字段，“axis”字段和“operation”类型字段）。
- en: The `operation` type fields contain the list of all operations available in
    the `Df2df` component. This will be a select field, hence users can select any
    of the operations to work with.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: “operation”类型字段包含“Df2df”组件中所有可用操作的列表。这将是一个选择字段，因此用户可以选择要使用的任何操作。
- en: We also create an `allOps` list of all operations to be offered by the `Df2df`
    component.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了“allOps”列表，其中包含“Df2df”组件提供的所有操作。
- en: 'We also need to create a function to perform the `Df2df` operation whenever
    the `submit` button is clicked:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要创建一个函数，以便在单击“submit”按钮时执行“Df2df”操作：
- en: '[PRE49]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We obtained values from all the reference variables belonging to each input
    field.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从属于每个输入字段的所有引用变量中获取值。
- en: 'We update the `df2df` function with the following code:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下代码更新了“df2df”函数：
- en: '[PRE50]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We check that the operation selected is not a `concat` operation. This is done
    because `concat` operations take in a list of `DataFrames` instead of just a `DataFrame`
    or `Series`.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查所选的操作是否不是“concat”操作。这是因为“concat”操作接受的是一个“DataFrames”列表，而不仅仅是一个“DataFrame”或“Series”。
- en: We make use of the `eval` function to prevent writing multiple `if` conditions
    to check which `DataFrame` operation to call.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用“eval”函数来防止编写多个“if”条件来检查要调用哪个“DataFrame”操作。
- en: 'We implement the condition for the `concat` operation. We also make a call
    to the `concat` method in the `DataFrame`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实现了“concat”操作的条件。我们还在“DataFrame”中调用了“concat”方法：
- en: '[PRE51]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The preceding steps show the backend implementation of the `Df2df` component.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤展示了“Df2df”组件的后端实现。
- en: Implementing the Df2df component interface
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现Df2df组件接口
- en: 'Let''s update the code for the UI with the following steps:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤更新UI的代码：
- en: 'For the UI, we need to create a form containing four input fields. First, we
    create an input field to select the type of `DataFrame` operation we want:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于UI，我们需要创建一个包含四个输入字段的表单。首先，我们创建一个输入字段来选择我们想要执行的“DataFrame”操作的类型：
- en: '[PRE52]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: We loop through the `allops` array to create an `input` field to select different
    types of `DataFrame` operations.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们循环遍历“allops”数组，创建一个“input”字段来选择不同类型的“DataFrame”操作。
- en: 'We then create an `input` field to select the `DataFrame` we want to perform
    the operation selected on:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个“input”字段来选择要在其上执行所选操作的“DataFrame”：
- en: '[PRE53]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We also loop through the `dataComps` state to obtain all `dataComp` state in
    it except for the `dataComp` state we are performing the operation with.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还循环遍历“dataComps”状态，以获取其中除了我们正在执行操作的“dataComp”状态之外的所有“dataComp”状态。
- en: 'We then create an `input` field to input our value; in this case, we are performing
    an operation between `DataFrame` and a `Scalar` value:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个“input”字段来输入我们的值；在这种情况下，我们正在执行“DataFrame”和“Scalar”值之间的操作：
- en: '[PRE54]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We create an `input` field to select the axis of operation:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个“input”字段来选择操作的轴：
- en: '[PRE55]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We then create a button that triggers the `df2df` function to perform a Df2df
    operation based on the input fields:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个按钮，触发“df2df”函数根据输入字段执行Df2df操作：
- en: '[PRE56]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the preceding steps, we created the UI for the component.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们为组件创建了UI。
- en: 'Let''s update the `SidePlane` component to contain the Df2df component:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新“SidePlane”组件，以包含Df2df组件：
- en: '[PRE57]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The preceding code adds the `Df2df` component to the `SidePlane` component
    and passes the required props in the `Df2df` component. The following screenshot
    shows the upload of two CSV files with the same content:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将“Df2df”组件添加到“SidePlane”组件中，并在“Df2df”组件中传递所需的props。以下截图显示了上传具有相同内容的两个CSV文件：
- en: '![Figure 8.15 – Uploading CSV files with the same content'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15 - 上传具有相同内容的CSV文件'
- en: '](img/B17076_8_15.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_15.jpg)'
- en: Figure 8.15 – Uploading CSV files with the same content
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 - 上传具有相同内容的CSV文件
- en: 'The following shows the output of performing a `Df2df` operation (the `concat`
    operation to be specific) on the selected `Data Table`:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了在所选“数据表”上执行“Df2df”操作（具体是“concat”操作）的输出：
- en: '![Figure 8.16 – Performing a concat operation on the Data Table'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.16 - 在数据表上执行concat操作'
- en: '](img/B17076_8_16.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_16.jpg)'
- en: Figure 8.16 – Performing a concat operation on the Data Table
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 - 在数据表上执行concat操作
- en: In this section, we created the `Df2df` component for performing an operation
    between two `DataFrames`, and between a `DataFrame` and a `Series`/`Scalar` value.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了“Df2df”组件，用于在两个“DataFrames”之间以及在“DataFrame”和“Series”/“Scalar”值之间执行操作。
- en: In the next section, we will implement the last `DataFrame` component, which
    is the `arithmetic` component for the `DataFrame` arithmetic operation.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将实现最后一个“DataFrame”组件，即“arithmetic”组件，用于“DataFrame”算术运算。
- en: Implementing the Arithmetic component
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现算术组件
- en: We will implement the `arithmetic` component to perform some of the arithmetic
    operations provided in `Danfo.js`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现“arithmetic”组件，以执行“Danfo.js”中提供的一些算术运算。
- en: Note
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for the `Arithmetic` component is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js).'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: “Arithmetic”组件的代码在这里可用：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/SidePlanes/Arithemtic.js)。
- en: 'Let''s create a file named `Arithmetic.js` in the `Side Planes/` folder. The
    following steps will be used to create the `Arithmetic` component:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在“Side Planes/”文件夹中创建一个名为“Arithmetic.js”的文件。以下步骤将用于创建“Arithmetic”组件：
- en: 'We create an `Arithmetic` component:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个`Arithmetic`组件：
- en: '[PRE58]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We create different arrays to store different operations, such as `seriesOps`
    for a Series operation and `dfOps` for a DataFrame operation. We also create an
    `all` array that stores all these operations (`Series` and `DataFrame`) together.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建不同的数组来存储不同的操作，比如`seriesOps`用于Series操作，`dfOps`用于DataFrame操作。我们还创建一个`all`数组，将所有这些操作（`Series`和`DataFrame`）存储在一起。
- en: 'We create a function called `arithmetic`. This function is used to perform
    the arithmetic operations:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个名为`arithmetic`的函数。这个函数用于执行算术操作：
- en: '[PRE59]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We obtain the values from the input fields, `opsRef.current.value` and `axisRef.current.value`.
    We also check whether the operation selected belongs to `seriesOps`. If so, we
    perform the operation selected.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从输入字段`opsRef.current.value`和`axisRef.current.value`中获取值。我们还检查所选的操作是否属于`seriesOps`。如果是，我们执行所选的操作。
- en: 'We perform a `DataFrame` operation if the operation does not belong to `seriesOps`:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果操作不属于`seriesOps`，我们执行`DataFrame`操作：
- en: '[PRE60]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The preceding steps are used to create the `Arithmetic` component. The UI for
    `Arithmetic` is the same as for the other `DataFrame` operation component created.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤用于创建`Arithmetic`组件。`Arithmetic`的UI与其他创建的`DataFrame`操作组件相同。
- en: 'Let''s add the `arithmetic` component to the `SidePlane` component:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`arithmetic`组件添加到`SidePlane`组件中：
- en: '[PRE61]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The preceding code imports the `Arithmetic` component and checks whether the
    `dfOpsType` component is `Arithmetic`.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码导入了`Arithmetic`组件，并检查`dfOpsType`组件是否为`Arithmetic`。
- en: 'The following screenshot shows an example of performing an arithmetic operation
    on a `Data Table`:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在`Data Table`上执行算术操作的示例：
- en: '![Figure 8.17 – Arithmetic operation'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17 – 算术操作'
- en: '](img/B17076_8_17.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_17.jpg)'
- en: Figure 8.17 – Arithmetic operation
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 算术操作
- en: In this section, we discussed and implemented different `DataFrame` operations
    as a React component. We were able to organize some methods into a single component
    to prevent creating components for each of the operations.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论并实现了不同的`DataFrame`操作作为React组件。我们能够将一些方法组织到单个组件中，以防止为每个操作创建组件。
- en: In the next section, we will implement a `chart` component for different visualizations.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将为不同的可视化实现一个`chart`组件。
- en: Implementing the chart component
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现图表组件
- en: In this section, we'll be creating `chart` components to display common and
    simple charts such as a bar chart, line chart, and pie chart. We'll then implement
    the chart `Side Plane` to enable the setting of chart component variables.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建`chart`组件来显示常见和简单的图表，如条形图、折线图和饼图。然后我们将实现图表`Side Plane`以启用设置图表组件变量。
- en: Note
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for the `Chart` and `ChartPlane` components implemented is available
    here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js).'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 已实现的`Chart`和`ChartPlane`组件的代码在此处可用：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartPlane.js)。
- en: 'In the `src/components/` directory, let''s create a file called `Chart.js`
    and the `Chart` component will be implemented with the following steps:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/components/`目录中，让我们创建一个名为`Chart.js`的文件，`Chart`组件将通过以下步骤实现：
- en: 'We import our desired plotting component from `react-chartjs-2`, and then create
    the `Chart` component:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从`react-chartjs-2`中导入我们想要的绘图组件，然后创建`Chart`组件：
- en: '[PRE62]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the preceding code, the `Chart` component takes in the following props:
    `labels`, `dataset`, and `type`. `labels` signifies the column names, `dataset`
    represents the `dataComp` values, and `type` represents the type of chart we want
    to plot.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`Chart`组件接受以下props：`labels`，`dataset`和`type`。`labels`表示列名，`dataset`表示`dataComp`的值，`type`表示我们想要绘制的图表类型。
- en: In the `Chart` component, we create a variable named `data`, which is an object
    formatted in the way that is required by `react-chartjs-2` for plotting our desired
    chart.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chart`组件中，我们创建一个名为`data`的变量，这是一个按照`react-chartjs-2`所需的格式化的对象，用于绘制我们想要的图表。
- en: 'We create a set of conditional rendering here, as we want to render a specific
    type of chart, based on the `prop` type passed into the `Chart` component:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里创建一组条件渲染，因为我们希望根据传递到`Chart`组件的`prop`类型来渲染特定类型的图表：
- en: '[PRE63]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: We check the type of chart to render. If it's a bar chart, we make a call to
    the `BarChart` component from `react-chartjs-2` and pass in the necessary props.
    The `BarChart` component is wrapped in a `Draggable` component to make the `chart`
    component being rendered draggable. The preceding code is applicable to rendering
    all other `Chart` components, such as `LineChart` and `PieChart` from `react-chartjs-2`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查要渲染的图表类型。如果是条形图，我们调用`react-chartjs-2`中的`BarChart`组件，并传入必要的props。`BarChart`组件包装在`Draggable`组件中，使得渲染的`chart`组件可以被拖动。上述代码适用于渲染所有其他`Chart`组件，如`react-chartjs-2`中的`LineChart`和`PieChart`。
- en: 'To dive deep into `react-chartjs-2`, you can check out the documentation here:
    [https://github.com/reactchartjs/react-chartjs-2](https://github.com/reactchartjs/react-chartjs-2).'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解`react-chartjs-2`，您可以在此处查看文档：[https://github.com/reactchartjs/react-chartjs-2](https://github.com/reactchartjs/react-chartjs-2)。
- en: Implementing the ChartPlane component
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现ChartPlane组件
- en: 'We''ve created the `chart` component, so let''s now create the chart `Side
    Plane`. In the `components/` folder, let''s create a file called `ChartPlane.js`
    with the following steps:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`chart`组件，现在让我们创建图表`Side Plane`。在`components/`文件夹中，让我们创建一个名为`ChartPlane.js`的文件，具体步骤如下：
- en: 'We create a `ChartPlane` component:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个`ChartPlane`组件：
- en: '[PRE64]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In the preceding code, we create a `ChartPlane` component accepting the following
    props:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们创建了一个接受以下props的`ChartPlane`组件：
- en: 'a) `SetChartComp`: The function to update the `chartComp` state'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'a) `SetChartComp`: 更新`chartComp`状态的函数'
- en: 'b) `dataComp`: The current `DataTable` component to generate a chart from'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: b) `dataComp`：当前的`DataTable`组件，用于生成图表
- en: 'c) `chartType`: The type of chart we want to generate'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: c) `chartType`：我们想要生成的图表类型
- en: First, in the component, we obtain the list of possible *x*-axis variables and
    store them in the `x` variable. These *x*-axis variables can be either a column
    name with `String` or number `dtypes`.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在组件中，我们获取可能的*x*轴变量列表，并将它们存储在`x`变量中。这些*x*轴变量可以是带有`String`或数字`dtypes`的列名。
- en: Since we are plotting the *y* axis against the *x* axis, it is compulsory for
    our *y* axis (the `y` variable) to be an integer. Therefore, we check that the
    column of a `DataFrame` is not a string, and if not we add the column to the list
    of *y*-axis variables.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在绘制*y*轴相对于*x*轴，我们的*y*轴（`y`变量）必须是整数。因此，我们检查`DataFrame`的列是否不是字符串，如果不是，我们将该列添加到*y*轴变量的列表中。
- en: Note
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is flexible. Sometimes a chart can be flipped such that the *y* axis is
    actually the labels and the *x* axis contains the data.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 这是灵活的。有时图表可以翻转，使*y*轴实际上是标签，而*x*轴包含数据。
- en: 'We create the UI for the `ChartPlane` component. Depending on how we''ve designed
    the UI for other components, the `x` and `y` variables are used to create an input
    field with which the user can select the *x*-axis label and the *y*-axis label:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建`ChartPlane`组件的UI。根据我们为其他组件设计UI的方式，`x`和`y`变量用于创建一个输入字段，用户可以用它来选择*x*轴标签和*y*轴标签：
- en: '[PRE65]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This UI also contains a button that triggers a function called `handleChart`,
    which updates the `chart` component:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这个UI还包含一个按钮，触发名为`handleChart`的函数，该函数更新`chart`组件：
- en: '[PRE66]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We create a function called `handleChart`, which obtains the value of the *x*-axis
    and *y*-axis input fields and uses them to create the respective charts as requested:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个名为`handleChart`的函数，该函数获取*x*轴和*y*轴输入字段的值，并使用它们来创建相应的图表：
- en: '[PRE67]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`xVal` and `yVal` are the values of the input field for the *x* axis and *y*
    axis. The `labels` and `data` variable are created, to contain the value of the
    respective columns from `xVal` and `yVal`. The label and data are then used to
    update the `chartComp` state.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`xVal`和`yVal`是*x*轴和*y*轴输入字段的值。创建`labels`和`data`变量，以包含从`xVal`和`yVal`的相应列中获取的值。然后使用标签和数据来更新`chartComp`状态。'
- en: Implementing the ChartViz component
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现ChartViz组件
- en: The preceding steps are used to create the chart `Side Plane`, but for now,
    we can't see the updated `chartComp` component. To view the chart, let's create
    a component to manage all chart component to be displayed.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤用于创建图表`Side Plane`，但目前我们无法看到更新的`chartComp`组件。为了查看图表，让我们创建一个组件来管理所有要显示的图表组件。
- en: Note
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code for `ChartViz` to be implemented is available here: [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js).'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现的`ChartViz`的代码在这里：[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/blob/main/Chapter08/src/components/ChartsViz.js)。
- en: 'Let''s create a file in the `components/` folder named `ChartViz.js`. Add the
    following code to the file:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`components/`文件夹中创建一个名为`ChartViz.js`的文件。将以下代码添加到文件中：
- en: '[PRE68]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In the preceding code, we import our `chart` component and then create a `ChartViz`
    component containing the following `chartComp` and `setChartComp` props. We loop
    through the `chartComp` state and pass each of the state values to the `chart`
    component as a prop.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们导入我们的`chart`组件，然后创建一个包含以下`chartComp`和`setChartComp` props的`ChartViz`组件。我们循环遍历`chartComp`状态，并将每个状态值作为props传递给`chart`组件。
- en: Integrating ChartViz and ChartPlane into App.js
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将ChartViz和ChartPlane集成到App.js中
- en: 'Now we are done with all the necessary parts of the `chart` component. Let''s
    update our `App.js` component to activate the `chart` component based on the following
    steps:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了`chart`组件的所有必要部分。让我们更新我们的`App.js`组件，根据以下步骤激活`chart`组件：
- en: 'We import `ChartViz` and `ChartPlane` into `App.js`:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`ChartViz`和`ChartPlane`导入到`App.js`中：
- en: '[PRE69]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We need to create some state to manage the type of chart we want, and the `chart`
    component:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一些状态来管理我们想要的图表类型和`chart`组件：
- en: '[PRE70]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: In the preceding code, we also create an array variable to store a list of charts
    that we want to display in our `Navbar`.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们还创建一个数组变量来存储我们想要在`Navbar`中显示的图表列表。
- en: 'We create a function to update the `chartType` component and the `Side Plane`
    component whenever a chart is created:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个函数来更新`chartType`组件和`Side Plane`组件，每当创建一个图表时：
- en: '[PRE71]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In the `handleChart` function, we obtain the target value, which is the chart
    type selected by the user. This value is used to update the `chartType` component
    and also, we notify the `Side Plane` to display a chart `Side Plane` by updating
    the `showSidePlane` state with the `chart` string.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在`handleChart`函数中，我们获取目标值，即用户选择的图表类型。使用此值来更新`chartType`组件，并且我们通过使用`chart`字符串更新`showSidePlane`状态，通知`Side
    Plane`显示图表。
- en: 'We loop the `charts` variable in the `nav` field and display them as buttons:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们循环`nav`字段中的`charts`变量，并将它们显示为按钮：
- en: '[PRE72]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the preceding code, we loop through the `charts` array and create a button
    for each of the values in the array. We disabled the button by checking that the
    `dataComp` state is not empty, that is, whether no file has been uploaded.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们循环遍历`charts`数组，并为数组中的每个值创建一个按钮。通过检查`dataComp`状态是否为空来禁用按钮，也就是说，是否没有上传文件。
- en: 'We call the `ChartViz` component and pass in the necessary props:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们调用`ChartViz`组件并传入必要的props：
- en: '[PRE73]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: We check that the `chartComp` state is not empty. If it's not, we make a call
    to the `ChartViz` component and then display the charts created.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查`chartComp`状态是否为空。如果不是，我们调用`ChartViz`组件，然后显示创建的图表。
- en: 'We then add the `ChartPlane` component:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加`ChartPlane`组件：
- en: '[PRE74]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: If the `showSide Plane` chart is a value chart, the `ChartPlane` component is
    displayed in the `Side` `Plane`.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果“showSide Plane”图表是一个值图表，那么“ChartPlane”组件将显示在“Side”“Plane”中。
- en: 'The following screenshot shows the chart update by plotting a bar chart, line
    chart, and pie chart on the available `Data Table`:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了通过在可用的“数据表”上绘制条形图、折线图和饼图来更新图表：
- en: '![Figure 8.18 – Chart component displayed'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.18 - 显示的图表组件'
- en: '](img/B17076_8_18.jpg)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_8_18.jpg)'
- en: Figure 8.18 – Chart component displayed
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 - 显示的图表组件
- en: In this section, we implemented `ChartComponent` and `ChartPlane`. We made use
    of `React-chart-js` to ease the development of each chart component.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了`ChartComponent`和`ChartPlane`。我们利用了`React-chart-js`来简化每个图表组件的开发。
- en: Summary
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to create a no-code environment, where you can just
    upload your data and then get started with handling and doing data analysis immediately.
    We also saw how to convert each `DataFrame` method in Danfo.js into a React component.
    This gives the capability to convert all Danfo.js methods into React components,
    hence creating a React component library for Danfo.js.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何创建一个无代码环境，您可以在其中上传数据，然后立即开始处理和进行数据分析。我们还看到了如何将Danfo.js中的每个`DataFrame`方法转换为React组件。这使得能够将所有Danfo.js方法转换为React组件，从而为Danfo.js创建一个React组件库。
- en: Also, we saw how to design the flow for the app and how to manage the state
    in React. Even if some of the states created are redundant, this is an opportunity
    for you to contribute and update the app to make it robust. If you can update
    the app to make it possible to delete, update, and save every operation being
    done, this will make the app robust and even ready for production.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还看到了如何设计应用程序的流程以及如何在React中管理状态。即使创建的一些状态是多余的，这也是您贡献和更新应用程序以使其更加健壮的机会。如果您可以更新应用程序以使其能够删除、更新和保存正在进行的每个操作，这将使应用程序更加健壮，甚至可以投入生产。
- en: In the next chapter, we will be introduced to machine learning. The chapter
    will cover the fundamental idea behind machine learning in the simplest form possible.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍机器学习。本章将以尽可能简单的形式介绍机器学习背后的基本思想。
