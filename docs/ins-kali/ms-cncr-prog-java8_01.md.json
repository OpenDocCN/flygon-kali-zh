["```java\npackage com.packt.java.concurrency;\n\npublic class Account {\n\n  private float balance;\n\n  public void modify (float difference) {\n\n    float value=this.balance;\n    this.balance=value+difference;\n  }\n\n}\n```", "```java\npublic void task1() {\n  section1();\n  commonObject.notify();\n}\n\npublic void task2() {\n  commonObject.wait();\n  section2();\n}\n```", "```java\npublic void task1() {\n  section1_1();\n  commonObject1.notify();\n  commonObject2.wait();\n  section1_2();\n}\npublic void task2() {\n  section2_1();\n  commonObject2.notify();\n  commonObject1.wait();\n  section2_2();\n}\n```", "```java\npublic void task() {\n  preCriticalSection();\n  lockObject.lock() // The critical section begins\n  criticalSection();\n  lockObject.unlock(); // The critical section ends\n  postCriticalSection();\n}\n```", "```java\npublic void task() {\n  preCriticalSection();\n  semaphoreObject.acquire();\n  criticalSection();\n  semaphoreObject.release();\n  postCriticalSection();\n}\n```", "```java\npublic void task() {\n  preSyncPoint();\n  barrierObject.await();\n  postSyncPoint();\n}\n```", "```java\npublic class Singleton{\n  private static Singleton reference;\n  private static final Lock lock=new ReentrantLock();\n  public static Singleton getReference() {\n    lock.lock();\n    try {\n        if (reference==null) {\n          reference=new Object();\n        }\n    } finally {\n        lock.unlock();\n    }\n    return reference;\n  }\n}\n```", "```java\npublic class Singleton{\n  private Object reference;\n  private Lock lock=new ReentrantLock();\n  public Object getReference() {\n    if (reference==null) {\n      lock.lock();\n      try {\n          if (reference == null) {\n            reference=new Object();\n          }\n      } finally {\n          lock.unlock();\n      }\n    }\n    return reference;\n  }\n}\n```", "```java\npublic class Singleton {\n\n  private static class LazySingleton {\n    private static final Singleton INSTANCE = new Singleton();\n  }\n\n  public static Singleton getSingleton() {\n    return LazySingleton.INSTANCE;\n  }\n\n}\n```"]