["```\n// configuration file of namespace\n# cat 8-1-1_ns1.yml\napiVersion: v1\nkind: Namespace\nmetadata:\nname: project1\n\n// create namespace for project1\n# kubectl create -f 8-1-1_ns1.yml\nnamespace \"project1\" created\n\n// list namespace, the abbreviation of namespaces is ns. We could use `kubectl get ns` to list it as well.\n# kubectl get namespaces\nNAME          STATUS    AGE\ndefault       Active    1d\nkube-public   Active    1d\nkube-system   Active    1d\nproject1      Active    11s\n```", "```\n// run a nginx deployment in project1 ns\n# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80 --namespace=project1 \n```", "```\n// We'll see the Pods if we explicitly specify --namespace\n# kubectl get pods --namespace=project1\nNAME                     READY     STATUS    RESTARTS   AGE\nnginx-3599227048-gghvw   1/1       Running   0          15s\nnginx-3599227048-jz3lg   1/1       Running   0          15s  \n```", "```\n- context:\ncluster: gke_devops-with-kubernetes_us-central1-b_cluster\nuser: gke_devops-with-kubernetes_us-central1-b_cluster\nname: gke_devops-with-kubernetes_us-central1-b_cluster  \n```", "```\n# kubectl config current-context\ngke_devops-with-kubernetes_us-central1-b_cluster\n```", "```\n$ kubectl config set-context <context_name> --namespace=<namespace_name> --cluster=<cluster_name> --user=<user_name>  \n```", "```\n// create a context with my GKE cluster\n# kubectl config set-context project1 --namespace=project1 --cluster=gke_devops-with-kubernetes_us-central1-b_cluster --user=gke_devops-with-kubernetes_us-central1-b_cluster\nContext \"project1\" created.  \n```", "```\n# kubectl config use-context project1\nSwitched to context \"project1\".  \n```", "```\n// list pods\n# kubectl get pods\nNAME                     READY     STATUS    RESTARTS   AGE\nnginx-3599227048-gghvw   1/1       Running   0          3m\nnginx-3599227048-jz3lg   1/1       Running   0          3m  \n```", "```\n# cat 8-1-2_resource_quota.yml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n name: project1-resource-quota\nspec:\n hard:# the limits of the sum of memory request\n requests.cpu: \"1\"               # the limits of the sum   \n   of requested CPU\n   requests.memory: 1Gi            # the limits of the sum  \n   of requested memory \n   limits.cpu: \"2\"           # the limits of total CPU  \n   limits\n   limits.memory: 2Gi        # the limits of total memory \n   limit \n   requests.storage: 64Gi    # the limits of sum of \n   storage requests across PV claims\n   pods: \"4\"                 # the limits of pod number   \n```", "```\n# kubectl describe deployment nginx\nReplicas:         4 desired | 2 updated | 2 total | 2 available | 2 unavailable\nConditions:\n Type                  Status      Reason\n ----                  ------      ------\n Available             False MinimumReplicasUnavailable\n ReplicaFailure  True  FailedCreate  \n```", "```\n# kubectl describe rs nginx-3599227048\n...\nError creating: pods \"nginx-3599227048-\" is **forbidden**: failed quota: project1-resource-quota: must specify limits.cpu,limits.memory,requests.cpu,requests.memory  \n```", "```\n// check the deployment state\n# kubectl get deployment\nNAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx     4         3         2            3           2d  \n```", "```\n# kubectl describe resourcequota project1-resource-quota\nName:             project1-resource-quota\nNamespace:        project1\nResource          Used  Hard\n--------          ----  ----\nlimits.cpu        900m  4\nlimits.memory     900Mi 4Gi\npods              4     4\nrequests.cpu      300m  4\nrequests.memory   450Mi 16Gi\nrequests.storage  0     64Gi  \n```", "```\n# cat 8-1-3_limit_range.yml\napiVersion: v1\nkind: LimitRange\nmetadata:\n name: project1-limit-range\nspec:\n limits:\n - default:\n cpu: 0.5\n memory: 512Mi\n defaultRequest:\n cpu: 0.25\n memory: 256Mi\n type: Container\n\n// create limit range\n# kubectl create -f 8-1-3_limit_range.yml\nlimitrange \"project1-limit-range\" created  \n```", "```\nlimits: \n   - max: \n      cpu: 1 \n      memory: 1Gi \n     min: \n      cpu: 0.25 \n      memory: 128Mi \n    type: Container \n```", "```\n# kubectl config view\napiVersion: v1\nclusters:  \n- cluster:\n certificate-authority: /Users/k8s/.minikube/ca.crt\n server: https://192.168.99.100:8443\n name: minikube\ncontexts:\n- context:\n cluster: minikube\n user: minikube\n name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\nusers:\n- name: minikube\n user:\n client-certificate: /Users/k8s/.minikube/apiserver.crt\n client-key: /Users/k8s/.minikube/apiserver.key\n```", "```\n# export KUBECONFIG=$KUBECONFIG: kubeconfig-file1: kubeconfig-file2  \n```", "```\n// list service account across all namespaces\n# kubectl get serviceaccount --all-namespaces\nNAMESPACE     NAME                         SECRETS   AGE\ndefault       default                      1         5d\nkube-public   default                      1         5d\nkube-system   namespace-controller         1         5d\nkube-system   resourcequota-controller     1         5d\nkube-system   service-account-controller   1         5d\nkube-system   service-controller           1         5d\nproject1      default                      1         2h\n...  \n```", "```\n# kubectl describe serviceaccount/default\nName:       default\nNamespace:  project1\nLabels:           <none>\nAnnotations:      <none>\nImage pull secrets:     <none>\nMountable secrets:      default-token-nsqls\nTokens:                 default-token-nsqls  \n```", "```\n// describe the secret, the name is default-token-nsqls here\n# kubectl describe secret default-token-nsqls\nName:       default-token-nsqls\nNamespace:  project1\nAnnotations:  kubernetes.io/service-account.name=default\n              kubernetes.io/service-account.uid=5e46cc5e- \n              8b52-11e7-a832-42010af00267\nType: kubernetes.io/service-account-token\nData\n====\nca.crt:     # the public CA of api server. Base64 encoded.\nnamespace:  # the name space associated with this service account. Base64 encoded\ntoken:      # bearer token. Base64 encoded\n```", "```\n# kubectl config set-credentials mysa --token=${CI_ENV_K8S_SA_TOKEN}  \n```", "```\n# kubectl config set-context myctxt --cluster=mycluster --user=mysa  \n```", "```\n# kubectl config use-context myctxt  \n```", "```\n// generate a private key for Linda\n# openssl genrsa -out linda.key 2048  \n```", "```\n// making CN as your username\n# openssl req -new -key linda.key -out linda.csr -subj \"/CN=linda\"  \n```", "```\n// generate the cert for Linda, this cert is only valid for 30 days.\n# openssl x509 -req -in linda.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out linda.crt -days 30\nSignature ok\nsubject=/CN=linda\nGetting CA Private Key  \n```", "```\n# kubectl config set-credentials linda --client-certificate=linda.crt --client-key=linda.key\nUser \"linda\" set.  \n```", "```\n# kubectl config set-context devops-context --cluster=k8s-devops.net --namespace=project1 --user=linda\nContext \"devops-context\" modified.  \n```", "```\n// test for getting a pod \n# kubectl --context=devops-context get pods\nError from server (Forbidden): User \"linda\" cannot list pods in the namespace \"project1\". (get pods)  \n```", "```\n{\"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \"kind\": \"Policy\", \"spec\": {\"user\":\"admin\", \"namespace\": \"*\", \"resource\": \"*\", \"apiGroup\": \"*\"}} \n{\"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \"kind\": \"Policy\", \"spec\": {\"user\":\"linda\", \"namespace\": \"project1\", \"resource\": \"deployments\", \"apiGroup\": \"*\", \"readonly\": true}} \n{\"apiVersion\": \"abac.authorization.kubernetes.io/v1beta1\", \"kind\": \"Policy\", \"spec\": {\"user\":\"linda\", \"namespace\": \"project1\", \"resource\": \"replicasets\", \"apiGroup\": \"*\", \"readonly\": true}} \n```", "```\n# cat 8-5-2_role.yml\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n namespace: project1\n name: devops-role\nrules:\n- apiGroups: [\"\", \"extensions\", \"apps\"]\n resources:\n - \"deployments\"\n - \"replicasets\"\n - \"pods\"\n verbs: [\"*\"]\n```", "```\n# cat cd-clusterrole.yml\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n name: cd-role\nrules:\n- apiGroups: [\"extensions\", \"apps\"]\n resources:\n - deployments\n - replicasets\n - ingresses\n verbs: [\"*\"]\n - apiGroups: [\"\"]\n resources:\n - namespaces\n - events\n verbs: [\"get\", \"list\", \"watch\"]\n - apiGroups: [\"\"]\n resources:\n - pods\n - services\n - secrets\n - replicationcontrollers\n - persistentvolumeclaims\n - jobs\n - cronjobs\n verbs: [\"*\"]\n```", "```\n# cat 8-5-2_rolebinding_user.yml  \nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n name: devops-role-binding\n namespace: project1\nsubjects:\n- kind: User\n name: linda\n apiGroup: [\"\"]\nroleRef:\n kind: Role\n name: devops-role\n apiGroup: [\"\"]\n```", "```\nroleRef:\nkind: ClusterRole\nname: cd-role\napiGroup: rbac.authorization.k8s.io \n```", "```\n# cat cd-clusterrolebinding.yml\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n name: cd-agent\nroleRef:\n apiGroup: rbac.authorization.k8s.io\n kind: ClusterRole\n name: cd-role\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n kind: User\n name: system:serviceaccount:cd:cd-agent  \n```", "```\nsystem:serviceaccount:<namespace>:<serviceaccountname> \n```", "```\n# kubectl create -f 8-5-2_role.yml\nrole \"devops-role\" created\n# kubectl create -f 8-5-2_rolebinding_user.yml\nrolebinding \"devops-role-binding\" created  \n```", "```\n# kubectl --context=devops-context get pods\nNo resources found.\n```", "```\n# kubectl --context=devops-context get namespaces\nError from server (Forbidden): User \"linda\" cannot list namespaces at the cluster scope. (get namespaces)  \n```", "```\n--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,ResourceQuota  \n```", "```\n# kubectl get nodes\nNAME                            STATUS    AGE       VERSION  \nip-172-20-56-91.ec2.internal Ready 6h v1.7.2\nip-172-20-68-10.ec2.internal Ready 29m v1.7.2\n```", "```\n# kubectl describe pods nginx-4217019353-s9xrn\nName:       nginx-4217019353-s9xrn\nNode:       ip-172-20-56-91.ec2.internal/172.20.56.91\nTolerations:    node.alpha.kubernetes.io/notReady:NoExecute for 300s\nnode.alpha.kubernetes.io/unreachable:NoExecute for 300s  \n```", "```\n# kubectl taint nodes ip-172-20-56-91.ec2.internal experimental=true:NoExecute\nnode \"ip-172-20-56-91.ec2.internal\" tainted  \n```", "```\n# cat 8-6_pod_tolerations.yml\napiVersion: v1\nkind: Pod\nmetadata:\n name: pod-with-tolerations\nspec:\n containers:\n - name: web\n image: nginx\n tolerations:\n - key: \"experimental\"\n value: \"true\"\n operator: \"Equal\"\n effect: \"NoExecute\"  \n```", "```\npodNodeSelectorPluginConfig:\n clusterDefaultNodeSelector: <default-node-selectors-  \n  labels>\n namespace1: <namespace-node-selectors-labels-1>\n namespace2: <namespace-node-selectors-labels-2>\n```"]