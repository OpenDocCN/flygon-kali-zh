["```cs\npublic interface IEnumerable<out T> : IEnumerable \n\n```", "```cs\nIEnumerator<T> GetEnumerator() \n\n```", "```cs\nFn = Fn-1 + Fn-2 \n\n```", "```cs\npublic partial class Program \n{ \n  public class FibonacciNumbers \n    : IEnumerable<Int64> \n  { \n    public IEnumerator<Int64> GetEnumerator() \n    { \n      return new FibEnumerator(); \n    } \n    IEnumerator IEnumerable.GetEnumerator() \n    { \n      return GetEnumerator(); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  public class FibEnumerator \n    : IEnumerator<Int64> \n  { \n    public FibEnumerator() \n    { \n      Reset(); \n    } \n    // To get the current element \n    public Int64 Current { get; private set; } \n    // To get the last element \n    Int64 Last { get; set; } \n    object IEnumerator.Current \n    { \n      get \n      { \n        return Current; \n      } \n    } \n    public void Dispose() \n    { \n      ; // Do Nothing \n    } \n    public bool MoveNext() \n    { \n      if (Current == -1) \n      { \n        // Fibonacci algorithm \n        // F0 = 0 \n        Current = 0; \n      } \n      else if (Current == 0) \n      { \n        // Fibonacci algorithm \n        // F1 = 1 \n        Current = 1; \n      } \n      else \n      { \n        // Fibonacci algorithm \n        // Fn = F(n-1) + F(n-2) \n        Int64 next = Current + Last; \n        Last = Current; \n        Current = next; \n      } \n      // It's never ending sequence, \n      // so the MoveNext() always TRUE \n      return true; \n    } \n    public void Reset() \n    { \n      // Back to before first element \n      // which is -1 \n      Current = -1; \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void GetFibonnacciNumbers( \n    int totalNumber) \n  { \n    FibonacciNumbers fibNumbers = \n      new FibonacciNumbers(); \n    foreach (Int64 number in \n      fibNumbers.Take(totalNumber)) \n    { \n      Console.Write(number); \n      Console.Write(\"\\t\"); \n    } \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\nforeach (Int64 number in \n  fibNumbers.Take(totalNumber)) \n\n```", "```cs\nGetFibonnacciNumbers(40) \n\n```", "```cs\npublic partial class Program \n{ \n  private static MemberData GetMember() \n  { \n    MemberData member = null; \n    try \n    { \n      if (member != null || member.Age > 50) \n      { \n        Console.WriteLine(\"IF Statement is TRUE\"); \n        return member; \n      } \n      else \n      { \n        Console.WriteLine(\"IF Statement is FALSE\"); \n        return null; \n      } \n    } \n    catch (Exception e) \n    { \n      Console.WriteLine(\"ERROR: \" + e.Message); \n      return null; \n    } \n  } \n} \n\n```", "```cs\npublic class MemberData \n{ \n  public string Name { get; set; } \n  public string Gender { get; set; } \n  public int Age { get; set; } \n} \n\n```", "```cs\nif (member != null || member.Age > 50) \n\n```", "```cs\nif (member != null && member.Age > 50) \n\n```", "```cs\npublic partial class Program \n{ \n  private static MemberData GetMemberANDOperator() \n  { \n    MemberData member = null; \n    try \n    { \n      if (member != null && member.Age > 50) \n      { \n        Console.WriteLine(\"IF Statement is TRUE\"); \n        return member; \n      } \n      else \n      { \n        Console.WriteLine(\"IF Statement is FALSE\"); \n        return null; \n      } \n    } \n    catch (Exception e) \n    { \n      Console.WriteLine(\"ERROR: \" + e.Message); \n      return null; \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static int OuterFormula(int x, int yz) \n  { \n    Console.WriteLine( \n      String.Format( \n        \"Calculate {0} + InnerFormula({1})\", \n        x, \n        yz)); \n    return x * yz; \n  } \n  private static int InnerFormula(int y, int z) \n  { \n    Console.WriteLine( \n      String.Format( \n        \"Calculate {0} * {1}\", \n        y, \n        z \n        )); \n    return y * z; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void StrictEvaluation() \n  { \n    int x = 4; \n    int y = 3; \n    int z = 2; \n    Console.WriteLine(\"Strict Evaluation\"); \n    Console.WriteLine( \n      String.Format( \n        \"Calculate {0} + ({1} * {2})\",x, y, z)); \n    int result = OuterFormula(x, InnerFormula(y, z)); \n    Console.WriteLine( \n      String.Format( \n        \"{0} + ({1} * {2}) = {3}\",x, y, z, result)); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\nint result = OuterFormula(x, InnerFormula(y, z)); \n\n```", "```cs\npublic partial class Program \n{ \n  private static int OuterFormulaNonStrict( \n    int x, \n    Func<int, int, int> yzFunc) \n  { \n    int y = 3; \n    int z = 2; \n    Console.WriteLine( \n      String.Format( \n        \"Calculate {0} + InnerFormula ({1})\", \n        x, \n        y * z \n        )); \n    return x * yzFunc(3, 2); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void NonStrictEvaluation() \n  { \n    int x = 4; \n    int y = 3; \n    int z = 2; \n    Console.WriteLine(\"Non-Strict Evaluation\"); \n    Console.WriteLine( \n      String.Format( \n        \"Calculate {0} + ({1} * {2})\",x, y, z)); \n    int result = OuterFormulaNonStrict(x, InnerFormula); \n    Console.WriteLine( \n      String.Format( \n        \"{0} + ({1} * {2}) = {3}\",x, y, z, result)); \n    Console.WriteLine(); \n  } \n} \n\n```", "```cs\nint result = OuterFormulaNonStrict(x, InnerFormula); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void LazyInitName(string NameOfPerson) \n  { \n    Lazy<PersonName> pn = \n      new Lazy<PersonName>( \n        () => \n          new PersonName(NameOfPerson)); \n    Console.WriteLine( \n      \"Status: PersonName has been defined.\"); \n    if (pn.IsValueCreated) \n    { \n      Console.WriteLine( \n        \"Status: PersonName has been initialized.\"); \n    } \n    else \n    { \n      Console.WriteLine( \n        \"Status: PersonName hasn't been initialized.\"); \n    } \n    Console.WriteLine( \n      String.Format( \n        \"Status: PersonName.Name = {0}\", \n        (pn.Value as PersonName).Name)); \n    if (pn.IsValueCreated) \n    { \n      Console.WriteLine( \n        \"Status: PersonName has been initialized.\"); \n    } \n    else \n    { \n      Console.WriteLine( \n        \"Status: PersonName hasn't been initialized.\"); \n    } \n  } \n} \n\n```", "```cs\npublic class PersonName \n{ \n  public string Name { get; set; } \n  public PersonName(string name) \n  { \n    Name = name; \n    Console.WriteLine( \n      \"Status: PersonName constructor has been called.\" \n      ); \n  } \n} \n\n```", "```cs\nLazy<PersonName> pn = \n  new Lazy<PersonName>( \n    () => \n      new PersonName(NameOfPerson)); \n\n```", "```cs\nPersonName pn = \n  new PersonName( \n    NameOfPerson); \n\n```", "```cs\nConsole.WriteLine( \n  String.Format( \n    \"Status: PersonName.Name = {0}\", \n    (pn.Value as PersonName).Name)); \n\n```", "```cs\nif (pn.IsValueCreated) \n{ \n  Console.WriteLine( \n    \"Status: PersonName has been initialized.\"); \n} \nelse \n{ \n  Console.WriteLine( \n    \"Status: PersonName hasn't been initialized.\"); \n} \n\n```", "```cs\nLazyInitName(\"Matthew Maxwell\"); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void WithoutPrecomputation() \n  { \n    Console.WriteLine(\"WithoutPrecomputation()\"); \n    Console.Write( \n      \"Choose number from 0 to 99 twice \"); \n    Console.WriteLine( \n      \"to find the power of two result: \"); \n    Console.Write(\"First Number: \"); \n    int iInput1 = Convert.ToInt32(Console.ReadLine()); \n    Console.Write(\"Second Number: \"); \n    int iInput2 = Convert.ToInt32(Console.ReadLine()); \n    int iOutput1 = (int) Math.Pow(iInput1, 2); \n    int iOutput2 = (int)Math.Pow(iInput2, 2); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput1, \n      iOutput1); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput2, \n      iOutput2); \n  } \n} \n\n```", "```cs\nConsole.Write(\"First Number: \"); \nint iInput1 =Convert.ToInt32(Console.ReadLine()); \nConsole.Write(\"Second Number: \"); \nint iInput2 = Convert.ToInt32(Console.ReadLine()); \n\n```", "```cs\nint iOutput1 = (int) Math.Pow(iInput1, 2); \nint iOutput2 = (int)Math.Pow(iInput2, 2); \n\n```", "```cs\npublic partial class Program \n{ \n  private static void WithPrecomputation() \n  { \n    int[]powerOfTwos = new int[100]; \n    for (int i = 0; i < 100; i++) \n    { \n      powerOfTwos[i] = (int)Math.Pow(i, 2); \n    } \n    Console.WriteLine(\"WithPrecomputation()\"); \n    Console.Write( \n      \"Choose number from 0 to 99 twice \"); \n    Console.WriteLine( \n      \"to find the power of two result: \"); \n    Console.Write(\"First Number: \"); \n    int iInput1 = Convert.ToInt32(Console.ReadLine()); \n    Console.Write(\"Second Number: \"); \n    int iInput2 = Convert.ToInt32(Console.ReadLine()); \n    int iOutput1 = FindThePowerOfTwo(powerOfTwos, iInput1); \n    int iOutput2 = FindThePowerOfTwo(powerOfTwos, iInput2); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput1, \n      iOutput1); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput2, \n      iOutput2); \n  } \n} \n\n```", "```cs\nint[] powerOfTwos = new int[100]; \nfor (int i = 0; i < 100; i++) \n{ \n  powerOfTwos[i] = (int)Math.Pow(i, 2); \n} \n\n```", "```cs\nint iOutput1 = FindThePowerOfTwo(squares, iInput1); \nint iOutput2 = FindThePowerOfTwo(squares, iInput2); \n\n```", "```cs\npublic partial class Program \n{ \n  private static int FindThePowerOfTwo ( \n    int[] precomputeData, \n    int baseNumber) \n  { \n    return precomputeData[baseNumber]; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void WithPrecomputationFunctional() \n  { \n    int[]powerOfTwos = new int[100]; \n    for (int i = 0; i < 100; i++) \n    { \n      powerOfTwos[i] = (int) Math.Pow(i, 2); \n    } \n    Console.WriteLine(\"WithPrecomputationFunctional()\"); \n    Console.Write( \n      \"Choose number from 0 to 99 twice \"); \n    Console.WriteLine( \n      \"to find the power of two result: \"); \n    Console.Write(\"First Number: \"); \n    int iInput1 = Convert.ToInt32(Console.ReadLine()); \n    Console.Write(\"Second Number: \"); \n    int iInput2 = Convert.ToInt32(Console.ReadLine()); \n    var curried = CurriedPowerOfTwo(powerOfTwos); \n    int iOutput1 = curried(iInput1); \n    int iOutput2 = curried(iInput2); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput1, \n      iOutput1); \n    Console.WriteLine( \n      \"2 the power of {0} is {1}\", \n      iInput2, \n      iOutput2); \n  } \n} \n\n```", "```cs\nvar curried = CurriedSquare(squares); \nint iOutput1 = curried(iInput1); \nint iOutput2 = curried(iInput2); \n\n```", "```cs\npublic partial class Program \n{ \n  public static Func<int, int> \n  CurriedPowerOfTwo(int[] intArray) \n      => i => intArray[i]; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static int GetFactorial(int intNumber) \n  { \n    if (intNumber == 0) \n    { \n      return 1; \n    } \n    return intNumber * GetFactorial(intNumber - 1); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static Dictionary<int, int> \n    memoizeDict = new Dictionary<int, int>(); \n  private static int GetFactorialMemoization(int intNumber) \n  { \n    if (intNumber == 0) \n    { \n      return 1; \n    } \n    if (memoizeDict.ContainsKey(intNumber)) \n    { \n      return memoizeDict[intNumber]; \n    } \n    int i = intNumber * GetFactorialMemoization( \n      intNumber - 1); \n    memoizeDict.Add(intNumber, i); \n    return i; \n  } \n} \n\n```", "```cs\nprivate static Dictionary<int, int> \n  memoizeDict = new Dictionary<int, int>(); \n\n```", "```cs\nprivate static int GetFactorialMemoization(int intNumber) \n{ \n  if (intNumber == 0) \n  { \n    return 1; \n  } \n  if (memoizeDict.ContainsKey(intNumber)) \n  { \n    return memoizeDict[intNumber]; \n  } \n  int i = intNumber * GetFactorialMemoization( \n    intNumber - 1); \n  memoizeDict.Add(intNumber, i); \n  return i; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void RunFactorial() \n  { \n    Stopwatch sw = new Stopwatch(); \n    int factorialResult = 0; \n    Console.WriteLine( \n      \"RunFactorial() function is called\"); \n    Console.WriteLine( \n      \"Get factorial of 9216\"); \n    for (int i = 1; i <= 5; i++) \n    { \n      sw.Restart(); \n      factorialResult = GetFactorial(9216); \n      sw.Stop(); \n      Console.WriteLine( \n        \"Time elapsed ({0}): {1,8} ns\", \n        i, \n        sw.ElapsedTicks * \n          1000000000 / \n          Stopwatch.Frequency); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void RunFactorialMemoization() \n  { \n    Stopwatch sw = new Stopwatch(); \n    int factorialResult = 0; \n    Console.WriteLine( \n      \"RunFactorialMemoization() function is called\"); \n    Console.WriteLine( \n      \"Get factorial of 9216\"); \n    for (int i = 1; i <= 5; i++) \n    { \n      sw.Restart(); \n      factorialResult = GetFactorialMemoization(9216); \n      sw.Stop(); \n      Console.WriteLine( \n        \"Time elapsed ({0}): {1,8} ns\", \n        i, \n        sw.ElapsedTicks * \n          1000000000 / \n          Stopwatch.Frequency); \n    } \n  } \n} \n\n```"]