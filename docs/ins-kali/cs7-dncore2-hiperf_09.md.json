["```cs\n Install-Package App.Metrics \n      Install-Pacakge App.Metrics.AspnetCore.Mvc \n```", "```cs\n      public static IWebHost BuildWebHost(string[] args) => \n        WebHost.CreateDefaultBuilder(args) \n          .UseMetrics() \n          .UseStartup<Startup>() \n          .Build(); \n```", "```cs\n      public void ConfigureServices(IServiceCollection services) \n      { \n        services.AddMvc(options => options.AddMetricsResourceFilter()); \n      } \n```", "```cs\nInstall-Package App.Metrics.AspNetCore.Tracking\n```", "```cs\napp.UseMetricsApdexTrackingMiddleware(); \napp.UseMetricsRequestTrackingMiddleware(); \napp.UseMetricsErrorTrackingMiddleware(); \napp.UseMetricsActiveRequestMiddleware(); \napp.UseMetricsPostAndPutSizeTrackingMiddleware(); \napp.UseMetricsOAuth2TrackingMiddleware();\n```", "```cs\napp.UseMetricsAllMiddleware(); \n```", "```cs\nservices.AddMetricsTrackingMiddleware(); \n```", "```cs\npublic static IWebHost BuildWebHost(string[] args) => \n  WebHost.CreateDefaultBuilder(args) \n    .UseMetrics() \n    .UseMetricsWebTracking() \n    .UseStartup<Startup>() \n    .Build();\n```", "```cs\n\"MetricsWebTrackingOptions\": { \n  \"ApdexTrackingEnabled\": true, \n  \"ApdexTSeconds\": 0.1, \n  \"IgnoredHttpStatusCodes\": [ 404 ], \n  \"IgnoredRoutesRegexPatterns\": [], \n  \"OAuth2TrackingEnabled\": true \n    }, \n```", "```cs\n Enable-WindowsOptionalFeature -Online -FeatureName \n      Microsoft-Windows-Subsystem-Linux\n```", "```cs\n $ curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add - \n      $ source /etc/lsb-release \n      $ echo \"deb https://repos.influxdata.com/${DISTRIB_ID,,} \n      $ {DISTRIB_CODENAME} stable\" | sudo tee /etc/apt/sources.list.d/influxdb.list \n```", "```cs\n $ sudo apt-get update && sudo apt-get install influxdb \n```", "```cs\n $ sudo influxd\n```", "```cs\n $ sudo influx \n```", "```cs\n      > create database appmetricsdb  \n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n  var metrics = new MetricsBuilder()\n  .Configuration.Configure(\n  options =>\n  {\n    options.WithGlobalTags((globalTags, info) =>\n    {\n      globalTags.Add(\"app\", info.EntryAssemblyName);\n      globalTags.Add(\"env\", \"stage\");\n    });\n  })\n  .Report.ToInfluxDb(\n  options =>\n  {\n    options.InfluxDb.BaseUri = new Uri(\"http://127.0.0.1:8086\");\n    options.InfluxDb.Database = \"appmetricsdb\";\n    options.HttpPolicy.Timeout = TimeSpan.FromSeconds(10);\n  })\n  .Build();\n  services.AddMetrics(metrics);\n  services.AddMetricsReportScheduler();\n  services.AddMetricsTrackingMiddleware();         \n  services.AddMvc(options => options.AddMetricsResourceFilter());\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n  if (env.IsDevelopment())\n  {\n    app.UseBrowserLink();\n    app.UseDeveloperExceptionPage();\n  }\n  else\n  {\n    app.UseExceptionHandler(\"/Error\");\n  }\n  app.UseStaticFiles();\n  app.UseMetricsAllMiddleware();\n  app.UseMvc();\n}\n```", "```cs\napp.UseMetricsApdexTrackingMiddleware();\napp.UseMetricsRequestTrackingMiddleware();\napp.UseMetricsErrorTrackingMiddleware();\napp.UseMetricsActiveRequestMiddleware();\napp.UseMetricsPostAndPutSizeTrackingMiddleware();\napp.UseMetricsOAuth2TrackingMiddleware();\n```"]