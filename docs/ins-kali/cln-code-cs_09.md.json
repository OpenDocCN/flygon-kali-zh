["```cs\npublic interface HelloWorldInterface\n{\n    string GetMessage();\n}\n```", "```cs\ninternal class HelloWorldApi : HelloWorldInterface\n{\n    public string GetMessage()\n    {\n        return \"Hello World!\";\n    }\n}\n```", "```cs\n    public class HelloWorldProxy : HelloWorldInterface\n    {\n        public string GetMessage()\n        {\n            return new HelloWorldApi().GetMessage();\n        }\n    }\n```", "```cs\nstatic void Main(string[] args)\n{\n    Console.WriteLine(new HelloWorldProxy().GetMessage());\n    Console.ReadKey();\n}\n```", "```cs\nservices.AddSwaggerGen(swagger =>\n{\n    swagger.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Weather Forecast API\" });\n});\n```", "```cs\napp.UseSwagger();\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Weather Forecast API\");\n});\n```", "```cs\nservices.AddSwaggerGenNewtonsoftSupport();\n```", "```cs\npublic class PersonObject\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```", "```cs\n    public struct PersonStruct\n    {\n        private readonly string _firstName;\n        private readonly string _lastName;\n\n        public PersonStruct(string firstName, string lastName)\n        {\n            _firstName = firstName;\n            _lastName = lastName;\n        }\n\n        public string FirstName => _firstName;\n        public string LastName => _lastName;\n    }\n```", "```cs\nprivate static void CreateObjects()\n{\n    Stopwatch stopwatch = new Stopwatch();\n    stopwatch.Start();\n    var people = new List<PersonObject>();\n    for (var i = 1; i <= 1000000; i++)\n    {\n        people.Add(new PersonObject { FirstName = \"Person\", LastName = $\"Number {i}\" });\n    }\n    stopwatch.Stop();\n    Console.WriteLine($\"Object: {stopwatch.ElapsedMilliseconds}, Object Count: {people.Count}\");\n    GC.Collect();\n}\n```", "```cs\nprivate static void CreateStructs()\n{\n    Stopwatch stopwatch = new Stopwatch();\n    stopwatch.Start();\n    var people = new List<PersonStruct>();\n    for (var i = 1; i <= 1000000; i++)\n    {\n        people.Add(new PersonStruct(\"Person\", $\"Number {i}\"));\n    }\n    stopwatch.Stop();\n    Console.WriteLine($\"Struct: {stopwatch.ElapsedMilliseconds}, Struct Count: {people.Count}\");\n    GC.Collect();\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    CreateObjects();\n    CreateStructs();\n    Console.WriteLine(\"Press any key to exit.\");\n    Console.ReadKey();\n}\n```", "```cs\n#%RAML 1.0\ntitle: Pet Shop\ntypes:\n  TestType:\n    type: object\n    properties:\n      id: number\n      optional?: string\n      expanded:\n        type: object\n        properties:\n          count: number\n/helloWorld:\n  get:\n    responses:\n      200:\n        body:\n          application/json:\n            example: |\n              {\n                \"message\" : \"Hello World\"\n              }\n```", "```cs\n#%RAML 1.0\ntitle: Pet Shop\nversion: v1\nbaseUri: /petshop\ntypes:\n  TestType:\n    type: object\n    properties:\n      id: number\n      optional?: string\n      expanded:\n        type: object\n        properties:\n          count: number\n/helloWorld:\n  get:\n    responses:\n      200:\n        body:\n          application/json:\n            example: |\n              {\n                \"message\" : \"Hello World\"\n              }\n```", "```cs\n/// <summary>\n/// /helloWorld\n/// </summary>\n/// <returns>HelloWorldGet200</returns>\npublic async Task<IHttpActionResult> Get()\n{\n    // TODO: implement Get - route: helloWorld/helloWorld\n    // var result = new HelloWorldGet200();\n    // return Ok(result);\n    return Ok();\n}\n```", "```cs\nreturn Ok(\"Hello World!\");\n```", "```cs\nstatic void Main(string[] args)\n{\n    Task.Run(async () =>\n    {\n        var hwc = new v1HelloWorldController();\n        var response = await hwc.Get() as OkNegotiatedContentResult<string>;\n        if (response is OkNegotiatedContentResult<string>)\n        {\n            var msg = response.Content;\n            Console.WriteLine($\"Message: {msg}\");\n        }\n    }).GetAwaiter().GetResult();\n    Console.ReadKey();\n}\n```"]