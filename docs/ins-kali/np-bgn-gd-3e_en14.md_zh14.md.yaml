- en: Appendix C. NumPy Functions' References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 C：NumPy 函数的参考
- en: This appendix contains a list of useful NumPy functions and their descriptions.
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录包含有用的 NumPy 函数及其说明的列表。
- en: '`numpy.apply_along_axis`(`func1d, axis, arr, *args`): Applies the function
    `func1d` along an axis on 1D slices of `arr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.apply_along_axis`（`func1d, axis, arr, *args`）：沿`arr`的一维切片应用函数`func1d`。'
- en: '`numpy.arange([start,] stop[, step,], dtype=None)`: Creates a NumPy array with
    evenly spaced values within a specified range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.arange([start,] stop[, step,], dtype=None)`：创建一个 NumPy 数组，它在指定范围内均匀间隔。'
- en: '`numpy.argsort(a, axis=-1, kind=''quicksort'', order=None)`: Returns the indices
    that would sort the input array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.argsort(a, axis=-1, kind=''quicksort'', order=None)`：返回对输入数组进行排序的索引。'
- en: '`numpy.argmax(a, axis=None)`: Returns the indices of the maximum values along
    an axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.argmax(a, axis=None)`：返回沿轴的最大值的索引。'
- en: '`numpy.argmin(a, axis=None)`: Returns the indices of the minimum values along
    an axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.argmin(a, axis=None)`：返回沿轴的最小值的索引。'
- en: '`numpy.argwhere(a)`: Finds the indices of non-zero elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.argwhere(a)`：查找非零元素的索引。'
- en: '`numpy.array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)`:
    Creates a NumPy array from an array-like sequence, such as a Python list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)`：从类似数组的序列（例如
    Python 列表）创建 NumPy 数组。'
- en: '`numpy.testing.assert_allclose((actual, desired, rtol=1e-07, atol=0, err_msg='''',
    verbose=True)`: Raises an error if two objects are unequal up to a specified precision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_allclose((actual, desired, rtol=1e-07, atol=0, err_msg='''',
    verbose=True)`：如果两个对象在指定的精度下不相等，则引发错误。'
- en: '`numpy.testing.assert_almost_equal()`: Raises an exception if two numbers are
    not equal up to a specified precision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_almost_equal()`：如果两个数字在指定的精度下不相等，则引发异常。'
- en: '`numpy.testing.assert_approx_equal()`: Raises an exception if two numbers are
    not equal up to a certain significance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_approx_equal()`：如果两个数字在某个有效数字下不相等，则引发异常。'
- en: '`numpy.testing.assert_array_almost_equal()`: Raises an exception if two arrays
    are not equal up to a specified precision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_almost_equal()`：如果两个数组在指定的精度下不相等，则引发异常。'
- en: '`numpy.testing.assert_array_almost_equal_nulp(x, y, nulp=1)`: Compares arrays
    to their **unit** **of** **least** **precision** (**ULP**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_almost_equal_nulp(x, y, nulp=1)`：将数组与其**最低精度单位**（**ULP**）。'
- en: '`numpy.testing.assert_array_equal()`: Raises an exception if two arrays are
    not equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_equal()`：如果两个数组不相等，则引发异常。'
- en: '`numpy.testing.assert_array_less()`: Raises an exception if two arrays do not
    have the same shape, and the elements of the first array are strictly less than
    the elements of the second array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_less()`：如果两个数组的形状不同，并且第一个数组的元素严格小于第二个数组的元素，则会引发异常。'
- en: '`numpy.testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)`: Determines
    whether the array elements differ by, at most, a specified number of ULP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)`：确定数组元素最多相差 ULP 的指定数量。'
- en: '`numpy.testing.assert_equal()`: Tests whether two NumPy arrays are equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_equal()`：测试两个 NumPy 数组是否相等。'
- en: '`numpy.testing.assert_raises()`: Fails if a specified exception is not raised
    by a callable invoked with defined arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_raises()`：如果使用定义的参数调用的可调用对象未引发指定的异常，则失败。'
- en: '`numpy.testing.assert_string_equal()`: Asserts that two strings are equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_string_equal()`：断言两个字符串相等。'
- en: '`numpy.testing.assert_warns()`: Fails if a specified warning is not thrown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.testing.assert_warns()`：如果未引发指定的警告，则失败。'
- en: '`numpy.bartlett(M)`: Returns the Bartlett window with `M` points. This window
    is similar to a triangular window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.bartlett(M)`：返回带有`M`点的巴特列特窗口。 此窗口类似于三角形窗口。'
- en: '`numpy.random.binomial(n, p, size=None)`: Draws random samples from the binomial
    distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.random.binomial(n, p, size=None)`：从二项分布中抽取随机样本。'
- en: '`numpy.bitwise_and(x1, x2[, out])`: Calculates the bit-wise `AND` of arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.bitwise_and(x1, x2[, out])`：计算数组的按位`AND`。'
- en: '`numpy.bitwise_xor(x1, x2[, out])`: Calculates the bit-wise `XOR` of arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.bitwise_xor(x1, x2[, out])`：计算数组的按位`XOR`。'
- en: '`numpy.blackman(M)`: Returns a Blackman window with `M` points, which is close
    to optimal and a little bit worse than a Kaiser window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.blackman(M)`：返回一个具有`M`点的布莱克曼窗口，该窗口接近最佳值，并且比凯撒窗口差。'
- en: '`numpy.column_stack(tup)`: Stacks 1D arrays provided as a tuple column wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.column_stack(tup)`：堆叠以元组列形式提供的一维数组  。'
- en: '`numpy.concatenate ((a1, a2, ...), axis=0)`: Concatenates a sequence of arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.concatenate ((a1, a2, ...), axis=0)`：将数组序列连接在一起。'
- en: '`numpy.convolve(a, v, mode=''full'')`: Computes the linear convolution of 1D'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.convolve(a, v, mode=''full'')`：计算一维数组的线性卷积。'
- en: '`numpy.dot(a, b, out=None)`: Calculates the dot product of two arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.dot(a, b, out=None)`：计算两个数组的点积。'
- en: '`numpy.diff(a, n=1, axis=-1)`: Computes the `nth` difference for a given axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.diff(a, n=1, axis=-1)`：计算给定轴的 N 阶差。'
- en: '`numpy.dsplit(ary, indices_or_sections)`: Splits an array into subarrays along
    the third axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.dsplit(ary, indices_or_sections)`：沿着第三轴将数组拆分为子数组。'
- en: '`numpy.dstack(tup)`: Stacks arrays given as a tuple along the third axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.dstack(tup)`：沿第三轴堆叠以元组形式给出的数组。'
- en: '`numpy.eye(N, M=None, k=0, dtype=<type ''float''>)`: Returns the identity matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.eye(N, M=None, k=0, dtype=<type ''float''>)`：返回单位矩阵。'
- en: '`numpy.extract(condition, arr)`: Selects elements of an array using a condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.extract(condition, arr)`：使用条件选择数组的元素。'
- en: '`numpy.fft.fftshift(x, axes=None)`: Shifts the zero-frequency component of
    a signal to the center of the spectrum.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.fft.fftshift(x, axes=None)`：将信号的零频率分量移到频谱的中心。'
- en: '`numpy.hamming(M)`: Returns the Hamming window with `M` points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.hamming(M)`：返回带有`M`点的汉明窗口。'
- en: '`numpy.hanning(M)`: Returns the Hanning window with `M` points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.hanning(M)`：返回具有`M`点的汉宁窗口。'
- en: '`numpy.hstack(tup)`: Stacks arrays given as a tuple horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.hstack(tup)`：水平堆叠以元组形式给出的数组。'
- en: '`numpy.isreal(x)`: Returns a Boolean array, where `True` corresponds to an
    element of the input array, which is a real number (as opposed to a complex number).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.isreal(x)`：返回一个布尔数组，其中`True`对应于输入数组的实数（而不是复数）元素。'
- en: '`numpy.kaiser(M, beta)`: Returns a Kaiser window with `M` points for a given
    `beta` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.kaiser(M, beta)`：对于给定的`beta`参数，返回带有`M`点的凯撒窗口。'
- en: '`numpy.load(file, mmap_mode=None)`: Loads NumPy arrays or pickled objects from
    `.npy`, `.npz` or pickles. A memory-mapped array is stored in the filesystem and
    doesn''t have to be completely loaded in memory. This is especially useful for
    large arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.load(file, mmap_mode=None)`：从`.npy`，`.npz`，或 Pickle 中加载 NumPy 数组或 Pickle 对象。 内存映射的数组存储在文件系统中，不必完全加载到内存中。
    这对于大型数组尤其有用。'
- en: '`numpy.loadtxt(fname, dtype=<type ''float''>, comments=''#'', delimiter=None,
    converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0)`: Loads data
    from a text file into a NumPy array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.loadtxt(fname, dtype=<type ''float''>, comments=''#'', delimiter=None,
    converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0)`：将文本文件中的数据加载到
    NumPy 数组中。'
- en: '`numpy.lexsort (keys, axis=-1)`: Sorts using multiple keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.lexsort (keys, axis=-1)`：使用多个键进行排序。'
- en: '`numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)`:
    Returns evenly spaced numbers over an interval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)`：返回在间隔内均匀间隔的数字。'
- en: '`numpy.max(a, axis=None, out=None, keepdims=False)`: Returns the maximum of
    an array along an axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.max(a, axis=None, out=None, keepdims=False)`：沿轴返回数组的最大值。'
- en: '`numpy.mean(a, axis=None, dtype=None, out=None, keepdims=False)`: Calculates
    the arithmetic mean along the given axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.mean(a, axis=None, dtype=None, out=None, keepdims=False)`：沿给定轴计算算术平均值。'
- en: '`numpy.median(a, axis=None, out=None, overwrite_input=False)`: Calculates the
    median along the given axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.median(a, axis=None, out=None, overwrite_input=False)`：沿给定轴计算中位数  。'
- en: '`numpy.meshgrid(*xi, **kwargs)`: Returns coordinate matrices for coordinate
    vectors. For instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.meshgrid(*xi, **kwargs)`：返回坐标向量的坐标矩阵。 例如：'
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`numpy.min(a, axis=None, out=None, keepdims=False)`: Returns the minimum of
    an array along an axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.min(a, axis=None, out=None, keepdims=False)`：沿轴返回数组的最小值。'
- en: '`numpy.msort(a)`: Returns a copy of an array sorted along the first axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.msort(a)`：返回沿第一轴排序的数组的副本。'
- en: '`numpy.nanargmax(a, axis=None)`: Returns the indices of the maximums given
    an axis ignoring NaNs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.nanargmax(a, axis=None)`：返回给定一个忽略 NaN 的轴的最大值的索引。'
- en: '`numpy.nanargmin(a, axis=None)`: Returns the indices of the minimums given
    an axis ignoring NaNs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.nanargmin(a, axis=None)`：返回给定的轴的最小值索引，忽略 NaN。'
- en: '`numpy.nonzero(a)`: Returns indices of non-zero array elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.nonzero(a)`：返回非零数组元素的索引。'
- en: '`numpy.ones(shape, dtype=None, order=''C'')`: Creates a NumPy array of specified
    shape and data type, containing 1s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ones(shape, dtype=None, order=''C'')`：创建指定形状和数据类型的 NumPy 数组，包含 1。'
- en: '`numpy.piecewise(x, condlist, funclist, *args, **kw)`: Evaluates a function
    piecewise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.piecewise(x, condlist, funclist, *args, **kw)`：分段求值函数。'
- en: '`numpy.polyder(p, m=1)`: Differentiates a polynomial to a given order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.polyder(p, m=1)`：将多项式微分为给定阶数。'
- en: '`numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)`: Performs
    a least squares polynomial fit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)`：执行最小二乘多项式拟合。'
- en: '`numpy.polysub(a1, a2)`: Subtracts polynomials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.polysub(a1, a2)`：减去多项式。'
- en: '`numpy.polyval(p, x)`: Evaluates a polynomial at specified values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.polyval(p, x)`：以指定值求值多项式。'
- en: '`numpy.prod(a, axis=None, dtype=None, out=None, keepdims=False)`: Returns the
    product of array elements over a specified axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.prod(a, axis=None, dtype=None, out=None, keepdims=False)`：返回指定轴上数组元素的乘积  。'
- en: '`numpy.ravel(a, order=''C'')`: Flattens an array or returns a copy if necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.ravel(a, order=''C'')`：展平数组，或在必要时返回副本。'
- en: '`numpy.reshape(a, newshape, order=''C'')`: Changes the shape of a NumPy array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.reshape(a, newshape, order=''C'')`：更改 NumPy 数组的形状  。'
- en: '`numpy.row_stack(tup)`: Stacks arrays row wise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.row_stack(tup)`：逐行堆叠数组。'
- en: '`numpy.save(file, arr)`: Saves a NumPy array to a file in the NumPy `.npy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.save(file, arr)`：以 NumPy `.npy`格式将 NumPy 数组保存到文件中。'
- en: '`numpy.savetxt(fname, X, fmt=''%.18e'', delimiter='' '', newline=''\n'', header='''',
    footer='''', comments=''# '')`: Saves a NumPy array to a text file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.savetxt(fname, X, fmt=''%.18e'', delimiter='' '', newline=''\n'', header='''',
    footer='''', comments=''# '')`：将 NumPy 数组保存到文本文件。'
- en: '`numpy.sinc(a)`: Computes the `sinc` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.sinc(a)`：计算`sinc`函数。'
- en: '`numpy.sort_complex(a)`: Sorts array elements with the real part first, then
    followed by the imaginary part.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.sort_complex(a)`：首先以实部，然后是虚部对数组元素进行排序。'
- en: '`numpy.split(a, indices_or_sections, axis=0)`: Splits an array into subarrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.split(a, indices_or_sections, axis=0)`：将数组拆分为子数组。'
- en: '`numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)`: Returns
    the standard deviation along the given axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)`：沿给定轴返回标准差。'
- en: '`numpy.take(a, indices, axis=None, out=None, mode=''raise'')`: Selects elements
    from an array using specified indices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.take(a, indices, axis=None, out=None, mode=''raise'')`：使用指定的索引从数组中选择元素。'
- en: '`numpy.vsplit(a, indices_or_sections)`: Splits an array into subarrays vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.vsplit(a, indices_or_sections)`：将数组垂直拆分为子数组。'
- en: '`numpy.vstack(tup)`: Stacks arrays vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.vstack(tup)`：垂直堆叠数组。'
- en: '`numpy.where(condition, [x, y])`: Selects array elements from input arrays
    based on a Boolean condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.where(condition, [x, y])`：基于布尔条件从输入数组中选择数组元素。'
- en: '`numpy.zeros(shape, dtype=float, order=''C'')`: Creates a NumPy array of specified
    shape and data type, containing zeros.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy.zeros(shape, dtype=float, order=''C'')`：创建指定形状和数据类型的 NumPy 数组，其中包含零。'
