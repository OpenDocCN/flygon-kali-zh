- en: Building Custom ECS Container Instances
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义ECS容器实例
- en: In earlier chapters, you learned how you use the Amazon ECS-Optimized Amazon
    Machine Image (AMI) to create ECS container instances and join them to an ECS
    cluster in a few simple steps. Although the ECS-Optimized AMI is great for getting
    up and running quickly, you may want to add additional features to your ECS container
    instances for your production environments, such as adding logging agents or including
    support for HTTP proxies so you can place your ECS clusters in private subnets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的章节中，您学习了如何使用Amazon ECS-Optimized Amazon Machine Image (AMI)来在几个简单的步骤中创建ECS容器实例并将它们加入到ECS集群中。尽管ECS-Optimized
    AMI非常适合快速启动和运行，但您可能希望为生产环境的ECS容器实例添加其他功能，例如添加日志代理或包括对HTTP代理的支持，以便将ECS集群放置在私有子网中。
- en: In this chapter, you will learn how you can build your own custom ECS container
    instances, using the ECS-Optimized AMI as a base machine image and applying your
    own customizations using a popular open source tool called Packer. You will extend
    the base image to include the AWS CloudWatch logs agent, which enables centralized
    logging from your ECS container instances using the CloudWatch logs service, and
    install a useful set of CloudFormation helper scripts, called cfn-bootstrap, which
    will allow you to run powerful initialization scripts at instance-creation time
    and also provide powerful integration features with CloudFormation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用ECS-Optimized AMI作为基础机器映像来构建自定义ECS容器实例，并使用一种名为Packer的流行开源工具应用自定义。您将扩展基础映像以包括AWS
    CloudWatch日志代理，该代理可使用CloudWatch日志服务从您的ECS容器实例进行集中日志记录，并安装一组有用的CloudFormation辅助脚本，称为cfn-bootstrap，它将允许您在实例创建时运行强大的初始化脚本，并提供与CloudFormation的强大集成功能。
- en: Finally, you will create a first-run script that will allow you to adapt your
    instances to the specifics of your target environment without needing to build
    a new AMI for every application and environment. This script will enable you to
    conditionally enable HTTP proxy support, allowing you to install your ECS container
    instances in more secure private subnets, and will also include a healthcheck
    that will wait until your ECS container instances have registered with their configured
    ECS cluster, before signalling CloudFormation that your instances have been successfully
    initialized.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将创建一个首次运行脚本，该脚本将允许您使您的实例适应目标环境的特定要求，而无需为每个应用程序和环境构建新的AMI。该脚本将使您有条件地启用HTTP代理支持，从而可以在更安全的私有子网中安装您的ECS容器实例，并且还将包括一个健康检查，该检查将等待您的ECS容器实例已注册到其配置的ECS集群，然后向CloudFormation发出信号，表明您的实例已成功初始化。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Designing a custom AMI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计自定义AMI
- en: Building a custom AMI using Packer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Packer构建自定义AMI
- en: Creating custom storage configurations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义存储配置
- en: Installing CloudFormation helper scripts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装CloudFormation辅助脚本
- en: Installing the CloudWatch logs agent
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装CloudWatch日志代理
- en: Creating a first-run script
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建首次运行脚本
- en: Testing your custom ECS container instance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试您的自定义ECS容器实例
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following lists the technical requirements to complete this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了完成本章所需的技术要求：
- en: Packer 1.0 or higher (instructions will be provided on how to install Packer)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Packer 1.0或更高（将提供安装Packer的说明）
- en: Administrator access to an AWS account
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对AWS账户的管理员访问权限
- en: Local AWS profile configured as per the instructions in Chapter 3
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第3章的说明配置本地AWS配置文件
- en: GNU Make version 3.82 or higher (note that macOS does not ship with this version
    by default)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU Make版本3.82或更高（请注意，macOS默认不包含此版本）
- en: AWS CLI 1.15.71 or higher
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI 1.15.71或更高
- en: 'This GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch6](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch6)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch6](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch6)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2LzoxaO](http://bit.ly/2LzoxaO)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2LzoxaO](http://bit.ly/2LzoxaO)'
- en: Designing a custom Amazon Machine Image
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计自定义Amazon Machine Image
- en: Before you learn how to build a custom Amazon Machine Image, it is important
    to understand *why* you would want or need to build your own custom image.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何构建自定义Amazon Machine Image之前，了解为什么您想要或需要构建自己的自定义镜像是很重要的。
- en: 'The reasons for this vary depending on your use case or organizational requirements,
    however in general there are a number of reasons why you might want to build a
    custom image:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这取决于您的用例或组织要求，但通常有许多原因您可能想要构建自定义镜像：
- en: '**Custom storage configuration**: The default ECS-optimized AMI ships with
    a 30 GB volume that includes 8 GB for the operating system partition and a 22
    GB volume for storing Docker images and container filesystems. One aspect of your
    configuration that I typically recommend to change is that, by default, Docker
    volumes, which do not use layered filesystems, are stored on the 8 GB operating
    system partition. This approach generally should be avoided for production use
    cases, and instead you should mount a dedicated volume for storing Docker volumes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义存储配置：默认的ECS优化AMI附带一个30GB的卷，其中包括8GB用于操作系统分区，以及一个22GB的卷用于存储Docker镜像和容器文件系统。我通常建议更改配置的一个方面是，默认情况下，不使用分层文件系统的Docker卷存储在8GB的操作系统分区上。这种方法通常不适合生产用例，而应该为存储Docker卷挂载一个专用卷。
- en: '**Installation of additional packages and tools**: In keeping with the minimalist
    philosophy of Docker, the ECS-optimized AMI ships with a minimal installation
    of Amazon Linux that only includes the core components required to run a Docker
    Engine and the supporting ECS agent. For real-world use cases, at a minimum, you
    will typically want to add the CloudWatch logs agent, which supports logging at
    a system level (for example, Operating system, Docker Engine, and ECS agent logs)
    to the AWS CloudWatch logs service. Another important set of tools you should
    consider installing are the cfn-bootstrap tools, which provide a set of CloudFormation
    helper scripts that you can use to define custom provisioning actions for your
    instances in CloudFormation templates, and also allow your EC2 instances to signal
    CloudFormation once provisioning and instance initialization is complete.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装额外的软件包和工具**：与Docker的极简主义理念一致，ECS优化AMI附带了一个最小安装的Amazon Linux，只包括运行Docker
    Engine和支持的ECS代理所需的核心组件。对于实际用例，您通常至少需要添加CloudWatch日志代理，它支持在系统级别（例如操作系统、Docker Engine和ECS代理日志）记录到AWS
    CloudWatch日志服务。另一个重要的工具集是cfn-bootstrap工具，它提供一组CloudFormation辅助脚本，您可以在CloudFormation模板中定义自定义的配置操作，并允许您的EC2实例在配置和实例初始化完成后向CloudFormation发出信号。'
- en: '**Adding first-run scripts**: When deploying ECS container instances to AWS,
    you may use them in a variety of use cases that require different configurations
    depending on the nature of the application. For example, a common security best
    practice is to deploy your ECS container instances into private subnets that have
    no default route attached. This means that your ECS container instance must be
    configured with an HTTP proxy in order to communicate with AWS services such as
    ECS and CloudWatch logs, or any other internet services the ECS container instance
    may rely on. However in some scenarios, using an HTTP proxy may not be feasible
    (for example, consider the ECS container instances that run ECS containers that
    provide the HTTP proxy service for your environment), and rather than build separate
    machine images (one with HTTP proxy enabled and one without an HTTP proxy), you
    can created provisioning scripts that will only run once on instance creation,
    that conditionally enable/disable a desired configuration, such as HTTP proxy
    settings, depending on the target use case.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加首次运行脚本**：在部署ECS容器实例到AWS时，您可能会在各种用例中使用它们，这些用例根据应用程序的性质需要不同的配置。例如，一个常见的安全最佳实践是将ECS容器实例部署到没有默认路由附加的私有子网中。这意味着您的ECS容器实例必须配置HTTP代理，以便与AWS服务（如ECS和CloudWatch日志）或ECS容器实例可能依赖的任何其他互联网服务进行通信。然而，在某些情况下，使用HTTP代理可能不可行（例如，考虑运行为您的环境提供HTTP代理服务的ECS容器实例），而不是构建单独的机器映像（一个启用了HTTP代理和一个未启用HTTP代理），您可以创建一次性运行的配置脚本，根据目标用例有条件地启用/禁用所需的配置，例如HTTP代理设置。'
- en: Of course there are a whole bunch of other use cases that may drive you to build
    your own custom image, however in this chapter we will focus on examples of the
    use cases defined here, which will provide you with a solid foundation and understanding
    of how to apply any additional customizations that you may want to use.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他用例可能会驱使您构建自己的自定义映像，但在本章中，我们将专注于这里定义的用例示例，这将为您提供坚实的基础和理解如何应用您可能想要使用的任何其他自定义的额外定制。
- en: Building a custom AMI using Packer
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Packer构建自定义AMI
- en: Now that you understand the rationale for building a custom ECS container instance
    image, let's introduce a tool called Packer, which allows you to build machine
    images for a wide variety of platforms, including AWS.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了构建自定义ECS容器实例映像的原因，让我们介绍一个名为Packer的工具，它允许您为各种平台构建机器映像，包括AWS。
- en: '**Packer** is an open source tool created by HashiCorp, which you can find
    out more about at [https://www.packer.io/](https://www.packer.io/). Packer can
    build machine images for a wide variety of target platforms, however in this chapter
    we will only focus on building Amazon Machine Images.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Packer**是HashiCorp创建的开源工具，您可以在[https://www.packer.io/](https://www.packer.io/)了解更多信息。Packer可以为各种目标平台构建机器映像，但在本章中，我们将只关注构建Amazon
    Machine Images。'
- en: Installing Packer
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Packer
- en: Before you can get started using Packer, you need to install it on your local
    environment. Packer is supported for Linux, mac OS, and Windows platforms, and
    to install Packer for your target platform, follow the instructions located at
    [https://www.packer.io/intro/getting-started/install.html](https://www.packer.io/intro/getting-started/install.html).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始使用Packer之前，您需要在本地环境中安装它。Packer支持Linux、macOS和Windows平台，要安装Packer到您的目标平台，请按照位于[https://www.packer.io/intro/getting-started/install.html](https://www.packer.io/intro/getting-started/install.html)的说明进行操作。
- en: Note that Packer is widely supported in operating systems and third-party package
    management tools—for example, on mac OS you can install Packer using the Brew
    package manager by running `brew install packer`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Packer在操作系统和第三方软件包管理工具中得到了广泛支持，例如，在mac OS上，您可以通过运行`brew install packer`来使用Brew软件包管理器安装Packer。
- en: Creating a Packer template
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Packer模板
- en: With Packer installed, you can now get started creating a Packer template that
    will define how to build your custom machine image. Before you do this though,
    I do recommend creating a separate repository for your Packer template, which
    should always be placed under version control, just like application source code
    and other infrastructure, as code repositories.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Packer后，您现在可以开始创建一个Packer模板，该模板将定义如何构建您的自定义机器镜像。不过，在这之前，我建议为您的Packer模板创建一个单独的存储库，该存储库应该始终放置在版本控制下，就像应用程序源代码和其他基础设施一样。
- en: For this chapter, I will assume that you have created a repository called `packer-ecs`,
    and you can refer to the `ch6` folder at [https://github.com/docker-in-aws/docker-in-aws](https://github.com/docker-in-aws/docker-in-aws),
    which provides an example repository based upon the content in this chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我假设您已经创建了一个名为`packer-ecs`的存储库，并且您可以参考[https://github.com/docker-in-aws/docker-in-aws](https://github.com/docker-in-aws/docker-in-aws)的`ch6`文件夹，该文件夹提供了一个基于本章内容的示例存储库。
- en: Packer template structure
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Packer模板结构
- en: Packer templates are JSON documents that provide a declarative description that
    tells Packer how to build a machine image.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Packer模板是提供了一个声明性描述的JSON文档，告诉Packer如何构建机器镜像。
- en: 'Packer templates are organized around four common top-level parameters, as
    demonstrated in the following example and described here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Packer模板围绕着四个常见的顶级参数进行组织，如下例所示，并在这里描述：
- en: '**variables**: An object that provides input variables for the build.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**variables**：提供构建的输入变量的对象。'
- en: '**builders**: A list of Packer builders, which define the target machine image
    platform(s). In this chapter, you will be targeting a builder referred to as the
    [EBS-backed AMI builder](https://www.packer.io/docs/builders/amazon-ebs.html),
    which is the simplest and most popular builder for creating custom Amazon Machine
    Images. Builders are responsible for ensuring the correct image format and publishing
    the final image in a format suitable for deployment to the target machine platform.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**builders**：Packer构建器的列表，定义了目标机器镜像平台。在本章中，您将针对一个名为[EBS-backed AMI builder](https://www.packer.io/docs/builders/amazon-ebs.html)的构建器进行定位，这是用于创建自定义Amazon
    Machine Images的最简单和最流行的构建器。构建器负责确保正确的图像格式，并以适合部署到目标机器平台的格式发布最终图像。'
- en: '**provisioners**: A list or array of Packer provisioners, which perform various
    provisioning tasks as part of the image building process. The simplest provisioners
    include file and shell provisioners, which copy files into the image and perform
    shell tasks, such as installing packages.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**provisioners**：Packer配置器的列表或数组，作为图像构建过程的一部分执行各种配置任务。最简单的配置器包括文件和shell配置器，它们将文件复制到图像中并执行shell任务，例如安装软件包。'
- en: '**post-processors**: A list or array of Packer post-processors, which perform
    post-processing tasks once the machine image has been built and published:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**post-processors**：Packer后处理器的列表或数组，一旦机器镜像构建和发布完成，将执行后处理任务。'
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Packer template structure
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Packer模板结构
- en: Configuring a builder
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置构建器
- en: 'Let''s get started configuring our Packer template by first creating a file
    called `packer.json` at the root of the packer-ecs repository, and then defining
    the builders section, as demonstrated in the following example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始配置我们的Packer模板，首先在packer-ecs存储库的根目录下创建一个名为`packer.json`的文件，然后定义构建器部分，如下例所示：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defining an EBS-backed AMI builder
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个EBS-backed AMI构建器
- en: 'In the preceding example, a single object representing our builder is added
    to the builders array. The `type` parameter defines the builder as an EBS-based
    AMI builder, and the settings that follow are specific to this type of builder:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，将表示我们构建器的单个对象添加到构建器数组中。`type`参数将构建器定义为基于EBS的AMI构建器，并且随后的设置特定于此类型的构建器：
- en: '`access_key`: Defines the AWS access key ID used to authenticate access to
    AWS when building and publishing the AMI.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`access_key`：定义用于验证对AWS的访问权限的AWS访问密钥ID，用于构建和发布AMI。'
- en: '`secret_key`: Defines the AWS secret access key used to authenticate access
    to AWS when building and publishing the AMI.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secret_key`：定义用于验证对AWS的访问权限的AWS秘密访问密钥，用于构建和发布AMI。'
- en: '`token`: Optionally defines the AWS session token used when authenticating
    with temporary session credentials.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token`：可选地定义用于验证临时会话凭据的AWS会话令牌。'
- en: '`region`: The target AWS region.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`region`：目标AWS地区。'
- en: '`source_ami`: The source AMI to build from. In this example, the source AMI
    of the latest ECS-Optimized AMI for the us-east-1 region at the time of writing
    is specified, for which you obtain an up-to-date list from [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source_ami`：要构建的源AMI。在此示例中，指定了撰写时us-east-1地区最新的ECS-Optimized AMI的源AMI，您可以从[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)获取最新列表。'
- en: '`instance_type`: The instance type used to build the AMI.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance_type`：用于构建AMI的实例类型。'
- en: '`ssh_username`: The SSH username that Packer should use when attempting to
    connect to the temporary EC2 instance created as part of the Packer build process.
    For Amazon Linux-based AMIs, such as the ECS-Optimized AMI, this must be specified
    as the `ec2-user` user.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh_username`：Packer在尝试连接到Packer构建过程中创建的临时EC2实例时应使用的SSH用户名。对于基于Amazon Linux的AMI（例如ECS-Optimized
    AMI），必须将其指定为`ec2-user`用户。'
- en: '`associate_public_ip_address`: When set to true associates a public IP address
    with the instance. This is required if you are using Packer over the internet
    and don''t have private network access to the temporary EC2 instance created as
    part of the Packer build process.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`associate_public_ip_address`：当设置为true时，将公共IP地址与实例关联。如果您在互联网上使用Packer并且没有对Packer构建过程中创建的临时EC2实例的私有网络访问权限，则需要此选项。'
- en: '`ami_name`: A name for the AMI that will be created. This name must be unique
    and a common approach to ensure uniqueness is by using the `{{timestamp}}` Go
    template function, which will be automatically replaced with the current timestamp
    by Packer.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ami_name`：将要创建的AMI的名称。此名称必须是唯一的，确保唯一性的常见方法是使用`{{timestamp}}` Go模板函数，Packer将自动将其替换为当前时间戳。'
- en: '`tags`: A list of tags to add to the created AMI. This allows you to attach
    metadata, such as the source AMI of the image, the ECS agent version, Docker version,
    or any other information that you might find useful. Notice that you can reference
    a special template variable called `SourceAMI`, which is added by the Amazon EBS
    builder and is based on the value of the `source_ami` variable.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tags`：要添加到创建的AMI中的标记列表。这允许您附加元数据，例如图像的源AMI、ECS代理版本、Docker版本或任何其他您可能发现有用的信息。请注意，您可以引用一个名为`SourceAMI`的特殊模板变量，该变量由Amazon
    EBS构建器添加，并基于`source_ami`变量的值。'
- en: One point to note in the is that rather than hardcode your AWS credentials into
    the template fail, you reference a Go template function called `{{user `<variable-name>`}}`,
    and this will inject user variables defined in the top-level variables parameter
    that we will configure shortly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，与其在模板中硬编码您的AWS凭据，不如引用一个名为`{{user `<variable-name>`}}`的Go模板函数，这将注入在我们即将配置的顶级变量参数中定义的用户变量。
- en: 'Packer templates are processed using Go''s templating language, which you can
    read more about at [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/).
    Go templates allow you to define your own template functions and Packer includes
    a number of useful functions that are defined at [https://www.packer.io/docs/templates/engine.html](https://www.packer.io/docs/templates/engine.html).
    Template functions are invoked through template expressions, which are expressed
    in the handlebars style format: `{{<function> <parameters>}}`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Packer模板使用Go的模板语言进行处理，您可以在[https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/)上了解更多信息。Go模板允许您定义自己的模板函数，Packer包含了一些有用的函数，这些函数在[https://www.packer.io/docs/templates/engine.html](https://www.packer.io/docs/templates/engine.html)中定义。模板函数通过模板表达式调用，表达式采用句柄样式格式：`{{<function>
    <parameters>}}`。
- en: Configuring variables
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置变量
- en: Variables are used to inject user-specific or environment-specific settings
    into your templates at build time, which is useful for making your machine image
    templates more generic and avoids the hardcoding of credentials in your templates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 变量用于在构建时将用户特定或环境特定的设置注入到模板中，这对于使您的机器映像模板更通用并避免在模板中硬编码凭据非常有用。
- en: 'Back in the previous example, you referenced user variables when defining AWS
    credential settings, and these must be defined in the variables section of your
    Packer template, as demonstrated in the previous example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您在定义AWS凭据设置时引用了用户变量，这些变量必须在Packer模板的变量部分中定义，就像在前面的示例中演示的那样：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Defining variables
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 定义变量
- en: In the preceding example, notice that you define each of the variables referenced
    in the user functions for the AWS credential settings in the builders section.
    For example, the builders section defines the `access_key` setting as `{{user
    `aws_access_key_id`}}`, which in turn references the `aws_access_key_id` variable
    defined in the variables section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，请注意您在构建器部分的用户函数中定义了AWS凭据设置的每个变量。例如，构建器部分将`access_key`设置定义为`{{user `aws_access_key_id`}}`，它依次引用了变量部分中定义的`aws_access_key_id`变量。
- en: 'Each variable in turn references the `env` template function, which looks up
    the value of the environment variable passed to this function. This means you
    can control the value of each of the variables as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变量依次引用`env`模板函数，该函数查找传递给此函数的环境变量的值。这意味着您可以控制每个变量的值如下：
- en: '`aws_access_key_id`: Configured using the `AWS_ACCESS_KEY_ID` environment variable'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_access_key_id`：使用`AWS_ACCESS_KEY_ID`环境变量进行配置'
- en: '`aws_secret_access_key`: Configured using the `AWS_SECRET_ACCESS_KEY` environment
    variable'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_secret_access_key`：使用`AWS_SECRET_ACCESS_KEY`环境变量进行配置'
- en: '`aws_session_token`: Configured using the `AWS_SESSION_TOKEN` environment variable'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_session_token`：使用`AWS_SESSION_TOKEN`环境变量进行配置'
- en: '`timezone`: Configured with a default value of **US/Eastern**. You can override
    the default variable when running the `packer build` command by setting the `-var
    ''<variable>=<value>''` flag (for example, `-var ''timezone=US/Pacific''`)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timezone`：使用默认值**US/Eastern**进行配置。在运行`packer build`命令时，您可以通过设置`-var ''<variable>=<value>''`标志（例如，`-var
    ''timezone=US/Pacific''`）来覆盖默认变量。'
- en: Notice that we haven't defined the `timezone` variable yet in our Packer template,
    as you will use this variable later on in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还没有在Packer模板中定义`timezone`变量，因为您将在本章后面使用这个变量。
- en: Configuring provisioners
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置配置程序
- en: Provisioners are the core of Packer templates, forming the various internal
    provisioning actions that are performed when customizing and building your machine
    images.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 配置程序是Packer模板的核心，形成在自定义和构建机器镜像时执行的各种内部配置操作。
- en: Packer supports a number of different types of provisioners, including popular
    configuration management tools such as Ansible and Puppet, and you can read more
    about the different types of provisioners at [https://www.packer.io/docs/provisioners/index.html](https://www.packer.io/docs/provisioners/index.html).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Packer支持许多不同类型的配置程序，包括流行的配置管理工具，如Ansible和Puppet，您可以在[https://www.packer.io/docs/provisioners/index.html](https://www.packer.io/docs/provisioners/index.html)上阅读更多关于不同类型的配置程序的信息。
- en: 'For our machine image, we are only going use two of the most basic and fundamental
    provisioners available:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的机器镜像，我们只会使用两种最基本和基本的配置程序：
- en: '[Shell provisioner](https://www.packer.io/docs/provisioners/shell.html): Performs
    provisioning of machine images using shell commands and scripts'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Shell配置程序](https://www.packer.io/docs/provisioners/shell.html)：使用shell命令和脚本执行机器镜像的配置'
- en: '[File provisioner](https://www.packer.io/docs/provisioners/file.html): Copies
    files into the machine image'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文件配置程序](https://www.packer.io/docs/provisioners/file.html)：将文件复制到机器镜像中'
- en: 'As an introduction to provisioners, let''s define a simple shell provisioner
    that updates the installed operating system packages, as demonstrated in the following
    example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为配置程序的介绍，让我们定义一个简单的shell配置程序，更新已安装的操作系统软件包，如下例所示：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Defining an inline shell provisioner
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 定义内联shell配置程序
- en: The provisioner defined in the preceding example, uses the `inline` parameter
    to define a list of commands that will be executed during the provisioning stage.
    In this case, you are running the `yum update` command, which is the default package
    manager on Amazon Linux systems and updates all installed operation system packages.
    To ensure you use the recommended and tested versions of Docker and ECS agent
    packages included in the base ECS-Optimized AMI, you use the `-x` flag to exclude
    packages that start with `docker` and `ecs`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中定义的配置程序使用`inline`参数来定义在配置阶段将执行的命令列表。在这种情况下，您正在运行`yum update`命令，这是Amazon
    Linux系统上的默认软件包管理器，并更新所有安装的操作系统软件包。为了确保您使用基本ECS-Optimized AMI中包含的Docker和ECS代理软件包的推荐和经过测试的版本，您使用`-x`标志来排除以`docker`和`ecs`开头的软件包。
- en: In the preceding example, the yum command will be executed as `sudo yum -y -x
    docker\* -x ecs\* update`. Because the back slash character (`\`) is used to as
    an escape character in JSON, in the preceding example, a double backslash (for
    example, `\\*`) is used to generate a literal back slash.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，yum命令将被执行为`sudo yum -y -x docker\* -x ecs\* update`。因为反斜杠字符（`\`）在JSON中被用作转义字符，在上面的例子中，双反斜杠（例如，`\\*`）用于生成一个字面上的反斜杠。
- en: Finally, notice that you must run all shell provisioning commands with the `sudo`
    command, as Packer is provisioning the EC2 instance as the `ec2_user` user, as
    defined in the builders section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，您必须使用`sudo`命令运行所有shell配置命令，因为Packer正在以构建器部分中定义的`ec2_user`用户身份配置EC2实例。
- en: Configuring post-processors
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置后处理器
- en: The final structural component of Packer templates we will introduce are [post-processors](https://www.packer.io/docs/post-processors/index.html),
    which allow you to perform actions once your machine image has been provisioned
    and built.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍Packer模板的最终结构组件是[后处理器](https://www.packer.io/docs/post-processors/index.html)，它允许您在机器镜像被配置和构建后执行操作。
- en: Post-processors can be used for a variety of different use cases that are outside
    the scope of this book, however one simple example of a post-processor that I
    like to use is the [Manifest post-processor](https://www.packer.io/docs/post-processors/manifest.html),
    which outputs a JSON file listing all artifacts that Packer produces. This output
    can be very useful when you create continuous delivery pipelines that first build
    your Packer images, and then need to test and deploy your images.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 后处理器可以用于各种不同的用例，超出了本书的范围，但我喜欢使用的一个简单的后处理器示例是[清单后处理器](https://www.packer.io/docs/post-processors/manifest.html)，它输出一个列出Packer生成的所有构件的JSON文件。当您创建首先构建Packer镜像，然后需要测试和部署镜像的持续交付流水线时，此输出非常有用。
- en: In this scenario, a manifest file can be used as an output artifact of your
    Packer build, describing the regions and AMI identifiers associated with your
    new machine image, and as an example used as an input into a CloudFormation template
    that deploys your new machine image into a test environment.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，清单文件可以作为Packer构建的输出构件，描述与新机器映像相关的区域和AMI标识符，并且可以作为一个示例用作CloudFormation模板的输入，该模板将您的新机器映像部署到测试环境中。
- en: 'The following example demonstrates adding a manifest post-processor to your
    Packer template:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何向您的Packer模板添加清单后处理器：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Defining a manifest post-processor
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 定义清单后处理器
- en: As you can see in the preceding example, the manifest post-processor if very
    simple - the `output` parameter specifies the name of the file that the manifest
    will be written to locally, while the `strip_path` parameter strips any local
    filesystem path information for any built artifacts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的示例中所看到的，清单后处理器非常简单 - `output`参数指定清单将被写入本地的文件名，而`strip_path`参数会剥离任何构建构件的本地文件系统路径信息。
- en: Building a machine image
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建机器映像
- en: At this point, you have created a simple Packer image that performs not too
    much in the way of customization, but nevertheless is a complete template that
    is ready to build.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已经创建了一个简单的Packer镜像，它在定制方面并不太多，但仍然是一个完整的模板，可以立即构建。
- en: Before you can actually run the build, you need to ensure your local environment
    is configured correctly for the build to complete successfully. Recall in the
    previous example, you defined variables for your template that reference environment
    variables that configure your AWS credentials, and a common approach here would
    be to set your local AWS access key ID and secret access key as environment variables.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际运行构建之前，您需要确保本地环境已正确配置以成功完成构建。回想一下，在上一个示例中，您为模板定义了引用环境变量的变量，这些环境变量配置了您的AWS凭据，这里的一个常见方法是将本地AWS访问密钥ID和秘密访问密钥设置为环境变量。
- en: In our use case however, I have assumed you are working with the best practice
    approach of using the multi-factor authentication introduced in earlier chapters,
    and hence your template is configured to use temporary session credentials as
    evidenced by the `aws_session_token` input variable that need to be dynamically
    generated and injected into your local environment before running your Packer
    build.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们的用例中，我假设您正在使用早期章节介绍的最佳实践方法，因此您的模板配置为使用临时会话凭据，这可以通过`aws_session_token`输入变量来证明，需要在运行Packer构建之前动态生成并注入到您的本地环境中。
- en: Generating dynamic session credentials
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成动态会话凭据
- en: 'To generate temporary session credentials, assuming you have configured an
    appropriate profile using the `AWS_PROFILE` environment variable, you can run
    the `aws sts assume-role` command to generate credentials:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成临时会话凭据，假设您已经使用`AWS_PROFILE`环境变量配置了适当的配置文件，您可以运行`aws sts assume-role`命令来生成凭据：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Generating temporary session credentials
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 生成临时会话凭据
- en: In the preceding example, notice that you can use bash substitutions to dynamically
    obtain the `role_arn` and `role_session_name` parameters from your AWS CLI profile
    using the `aws configure get <parameter>` command, which are required inputs when
    generating temporary session credentials.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，请注意您可以使用bash替换动态获取`role_arn`和`role_session_name`参数，使用`aws configure
    get <parameter>`命令从AWS CLI配置文件中获取，这些参数在生成临时会话凭据时是必需的输入。
- en: 'The output from the preceding example includes a credentials object that includes
    the following values that are mapped to the environment variables referenced in
    your Packer template:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上面示例的输出包括一个包含以下值的凭据对象，这些值与Packer模板中引用的环境变量相对应：
- en: '**AccessKeyId**: This value is exported as the `AWS_ACCESS_KEY_ID` environment
    variable'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AccessKeyId**：此值作为`AWS_ACCESS_KEY_ID`环境变量导出'
- en: '**SecretAccessKey**: This value is exported as the `AWS_SECRET_ACCESS_KEY`
    environment variable'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SecretAccessKey**：此值作为`AWS_SECRET_ACCESS_KEY`环境变量导出'
- en: '**SessionToken**: This value is exported as the `AWS_SESSION_TOKEN` environment
    variable'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SessionToken**：此值作为`AWS_SESSION_TOKEN`环境变量导出'
- en: Automating generation of dynamic session credentials
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动生成动态会话凭据
- en: 'Although you can use the approach demonstrated in the preceding example to
    generate temporary session credentials as required, this approach will become
    tiresome very quickly. There are many ways you can automate the injection of the
    generated temporary session credentials into your environment, but given this
    book uses Make as an automation tool, The following example demonstrates how you
    can do this using a reasonably simple Makefile:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用上面示例中演示的方法根据需要生成临时会话凭据，但这种方法会很快变得繁琐。有许多方法可以自动将生成的临时会话凭据注入到您的环境中，但考虑到本书使用Make作为自动化工具，以下示例演示了如何使用一个相当简单的Makefile来实现这一点：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Generating temporary session credentials automatically using MakeEnsure all
    indentation in your Makefile is performed using tabs rather than spaces.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Make自动生成临时会话凭据确保您的Makefile中的所有缩进都是使用制表符而不是空格。
- en: In the preceding example, notice the introduction of a directive called `.ONESHELL`.
    This directive configures Make to spawn a single shell for all commands defined
    in a given Make recipe, meaning bash variable assignments and environment settings
    can be reused across multiple lines.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，请注意引入了一个名为`.ONESHELL`的指令。此指令配置Make在给定的Make配方中为所有定义的命令生成单个shell，这意味着bash变量赋值和环境设置可以在多行中重复使用。
- en: The `build` task conditionally calls a function named `assume_role` if the current
    environment is configured with `AWS_PROFILE`, and this approach is useful as it
    means if you were running this Makefile on a build agent that was configured to
    obtain AWS credentials in a different manner, the dynamic generation of temporary
    session credentials would not take place.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前环境配置了`AWS_PROFILE`，`build`任务有条件地调用名为`assume_role`的函数，这种方法很有用，因为这意味着如果您在配置为以不同方式获取AWS凭据的构建代理上运行此Makefile，临时会话凭据的动态生成将不会发生。
- en: When a command is prefixed with the `@` symbol in a Makefile, the executed command
    will not output to stdout, and instead only the output of the command will be
    displayed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Makefile中，如果命令以`@`符号为前缀，则执行的命令将不会输出到stdout，而只会显示命令的输出。
- en: The `assume_role` function uses an advanced JMESPath query expression (as specified
    by the `--query` flag) to generate a set of `export` statements that reference
    the various properties on the **Credentials** dictionary output of the command
    you ran in the previous example and assign the values to the relevant environment
    variables using the JMESPath join function ([http://jmespath.readthedocs.io/en/latest/specification.html#join](http://jmespath.readthedocs.io/en/latest/specification.html#join)).
    This is wrapped in a command substitution, with the `eval` command used to execute
    each output `export` statement. Don't worry too much if you don't understand this
    query, but recognise that the AWS CLI does include a powerful query syntax that
    can create some quite sophisticated one liners.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`assume_role`函数使用高级的JMESPath查询表达式（如`--query`标志所指定的）来生成一组`export`语句，这些语句引用了在前面示例中运行的命令的**Credentials**字典输出上的各种属性，并使用JMESPath
    join函数将值分配给相关的环境变量。这些语句被包裹在一个命令替换中，使用`eval`命令来执行每个输出的`export`语句。如果你不太理解这个查询，不要担心，但要认识到AWS
    CLI确实包含一个强大的查询语法，可以创建一些相当复杂的一行命令。'
- en: Note in the preceding example that you can use back ticks ([PRE7]
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，注意你可以使用反引号（[PRE7]
- en: export AWS_PROFILE=docker-in-aws
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: export AWS_PROFILE=docker-in-aws
- en: make build
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 进行构建
- en: 'Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga: ******'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 输入arn:aws:iam::385605022855:mfa/justin.menga的MFA代码：******
- en: packer build packer.json
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: packer build packer.json
- en: amazon-ebs output will be in this color.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs输出将以这种颜色显示。
- en: '==> amazon-ebs: Prevalidating AMI Name: docker-in-aws-ecs 1518934269'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：预验证AMI名称：docker-in-aws-ecs 1518934269
- en: 'amazon-ebs: Found Image ID: ami-5e414e24'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：找到镜像ID：ami-5e414e24
- en: '==> amazon-ebs: Creating temporary keypair: packer_5a8918fd-018d-964f-4ab3-58bff320ead5'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：创建临时密钥对：packer_5a8918fd-018d-964f-4ab3-58bff320ead5
- en: '==> amazon-ebs: Creating temporary security group for this instance: packer_5a891904-2c84-aca1-d368-8309f215597d'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：为该实例创建临时安全组：packer_5a891904-2c84-aca1-d368-8309f215597d
- en: '==> amazon-ebs: Authorizing access to port 22 from 0.0.0.0/0 in the temporary
    security group...'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：授权临时安全组从0.0.0.0/0访问端口22...
- en: '==> amazon-ebs: Launching a source AWS instance...'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：启动源AWS实例...
- en: '==> amazon-ebs: Adding tags to source instance'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：向源实例添加标签
- en: 'amazon-ebs: Adding tag: "Name": "Packer Builder"'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '亚马逊-ebs：添加标签："Name": "Packer Builder"'
- en: 'amazon-ebs: Instance ID: i-04c150456ac0748aa'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：实例ID：i-04c150456ac0748aa
- en: '==> amazon-ebs: Waiting for instance (i-04c150456ac0748aa) to become ready...'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：等待实例(i-04c150456ac0748aa)就绪...
- en: '==> amazon-ebs: Waiting for SSH to become available...'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：等待SSH可用...
- en: '==> amazon-ebs: Connected to SSH!'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：连接到SSH！
- en: '==> amazon-ebs: Provisioning with shell script: /var/folders/s4/1mblw7cd29s8xc74vr3jdmfr0000gn/T/packer-shell190211980'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：使用shell脚本进行配置：/var/folders/s4/1mblw7cd29s8xc74vr3jdmfr0000gn/T/packer-shell190211980
- en: 'amazon-ebs: Loaded plugins: priorities, update-motd, upgrade-helper'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：已加载插件：priorities, update-motd, upgrade-helper
- en: 'amazon-ebs: Resolving Dependencies'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：解决依赖关系
- en: 'amazon-ebs: --> Running transaction check'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：--> 运行事务检查
- en: 'amazon-ebs: ---> Package elfutils-libelf.x86_64 0:0.163-3.18.amzn1 will be
    updated'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：---> 包elfutils-libelf.x86_64 0:0.163-3.18.amzn1将会被更新
- en: 'amazon-ebs: ---> Package elfutils-libelf.x86_64 0:0.168-8.19.amzn1 will be
    an update'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：---> 包elfutils-libelf.x86_64 0:0.168-8.19.amzn1将会被更新
- en: 'amazon-ebs: ---> Package python27.x86_64 0:2.7.12-2.121.amzn1 will be updated'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：---> 包python27.x86_64 0:2.7.12-2.121.amzn1将会被更新
- en: 'amazon-ebs: ---> Package python27.x86_64 0:2.7.13-2.122.amzn1 will be an update'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：---> 包python27.x86_64 0:2.7.13-2.122.amzn1将会被更新
- en: 'amazon-ebs: ---> Package python27-libs.x86_64 0:2.7.12-2.121.amzn1 will be
    updated'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊-ebs：---> 包python27-libs.x86_64 0:2.7.12-2.121.amzn1将会被更新
- en: 'amazon-ebs: ---> Package python27-libs.x86_64 0:2.7.13-2.122.amzn1 will be
    an update'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：---> 软件包python27-libs.x86_64 0:2.7.13-2.122.amzn1将被更新
- en: 'amazon-ebs: --> Finished Dependency Resolution'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：--> 完成依赖关系解析
- en: 'amazon-ebs:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: Dependencies Resolved'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：依赖关系已解决
- en: 'amazon-ebs:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: ================================================================================'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：===============================================================================
- en: 'amazon-ebs: Package Arch Version Repository Size'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：软件包 架构 版本 资料库 大小
- en: 'amazon-ebs: ================================================================================'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：===============================================================================
- en: 'amazon-ebs: Updating:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在更新：
- en: 'amazon-ebs: elfutils-libelf x86_64 0.168-8.19.amzn1 amzn-updates 313 k'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：elfutils-libelf x86_64 0.168-8.19.amzn1 amzn-updates 313 k
- en: 'amazon-ebs: python27 x86_64 2.7.13-2.122.amzn1 amzn-updates 103 k'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：python27 x86_64 2.7.13-2.122.amzn1 amzn-updates 103 k
- en: 'amazon-ebs: python27-libs x86_64 2.7.13-2.122.amzn1 amzn-updates 6.8 M'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：python27-libs x86_64 2.7.13-2.122.amzn1 amzn-updates 6.8 M
- en: 'amazon-ebs:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: Transaction Summary'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：事务摘要
- en: 'amazon-ebs: ================================================================================'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：===============================================================================
- en: 'amazon-ebs: Upgrade 3 Packages'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：升级3个软件包
- en: 'amazon-ebs:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: Total download size: 7.2 M'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：总下载大小：7.2 M
- en: 'amazon-ebs: Downloading packages:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：下载软件包：
- en: 'amazon-ebs: --------------------------------------------------------------------------------'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：--------------------------------------------------------------------------------
- en: 'amazon-ebs: Total 5.3 MB/s | 7.2 MB 00:01'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：总共 5.3 MB/s | 7.2 MB 00:01
- en: 'amazon-ebs: Running transaction check'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：运行事务检查
- en: 'amazon-ebs: Running transaction test'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：运行事务测试
- en: 'amazon-ebs: Transaction test succeeded'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：事务测试成功
- en: 'amazon-ebs: Running transaction'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：运行事务
- en: 'amazon-ebs: Updating : python27-2.7.13-2.122.amzn1.x86_64 1/6'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在更新：python27-2.7.13-2.122.amzn1.x86_64 1/6
- en: 'amazon-ebs: Updating : python27-libs-2.7.13-2.122.amzn1.x86_64 2/6'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在更新：python27-libs-2.7.13-2.122.amzn1.x86_64 2/6
- en: 'amazon-ebs: Updating : elfutils-libelf-0.168-8.19.amzn1.x86_64 3/6'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在更新：elfutils-libelf-0.168-8.19.amzn1.x86_64 3/6
- en: 'amazon-ebs: Cleanup : python27-2.7.12-2.121.amzn1.x86_64 4/6'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：清理：python27-2.7.12-2.121.amzn1.x86_64 4/6
- en: 'amazon-ebs: Cleanup : python27-libs-2.7.12-2.121.amzn1.x86_64 5/6'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：清理：python27-libs-2.7.12-2.121.amzn1.x86_64 5/6
- en: 'amazon-ebs: Cleanup : elfutils-libelf-0.163-3.18.amzn1.x86_64 6/6'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：清理：elfutils-libelf-0.163-3.18.amzn1.x86_64 6/6
- en: 'amazon-ebs: Verifying : python27-libs-2.7.13-2.122.amzn1.x86_64 1/6'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：python27-libs-2.7.13-2.122.amzn1.x86_64 1/6
- en: 'amazon-ebs: Verifying : elfutils-libelf-0.168-8.19.amzn1.x86_64 2/6'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：elfutils-libelf-0.168-8.19.amzn1.x86_64 2/6
- en: 'amazon-ebs: Verifying : python27-2.7.13-2.122.amzn1.x86_64 3/6'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：python27-2.7.13-2.122.amzn1.x86_64 3/6
- en: 'amazon-ebs: Verifying : python27-libs-2.7.12-2.121.amzn1.x86_64 4/6'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：python27-libs-2.7.12-2.121.amzn1.x86_64 4/6
- en: 'amazon-ebs: Verifying : elfutils-libelf-0.163-3.18.amzn1.x86_64 5/6'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：elfutils-libelf-0.163-3.18.amzn1.x86_64 5/6
- en: 'amazon-ebs: Verifying : python27-2.7.12-2.121.amzn1.x86_64 6/6'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：正在验证：python27-2.7.12-2.121.amzn1.x86_64 6/6
- en: 'amazon-ebs:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: Updated:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：已更新：
- en: 'amazon-ebs: elfutils-libelf.x86_64 0:0.168-8.19.amzn1'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：elfutils-libelf.x86_64 0:0.168-8.19.amzn1
- en: 'amazon-ebs: python27.x86_64 0:2.7.13-2.122.amzn1'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：python27.x86_64 0:2.7.13-2.122.amzn1
- en: 'amazon-ebs: python27-libs.x86_64 0:2.7.13-2.122.amzn1'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：python27-libs.x86_64 0:2.7.13-2.122.amzn1
- en: 'amazon-ebs:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：
- en: 'amazon-ebs: Complete!'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：完成！
- en: '==> amazon-ebs: Stopping the source instance...'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊EBS：停止源实例...
- en: 'amazon-ebs: Stopping instance, attempt 1'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：停止实例，尝试1
- en: '==> amazon-ebs: Waiting for the instance to stop...'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊EBS：等待实例停止...
- en: '==> amazon-ebs: Creating the AMI: docker-in-aws-ecs 1518934269'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊EBS：创建AMI：docker-in-aws-ecs 1518934269
- en: 'amazon-ebs: AMI: ami-57415b2d'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EBS：AMI：ami-57415b2d
- en: '==> amazon-ebs: Waiting for AMI to become ready...'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊EBS：等待AMI准备就绪...
- en: '==> amazon-ebs: Adding tags to AMI (ami-57415b2d)...'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：向AMI（ami-57415b2d）添加标记...
- en: '==> amazon-ebs: Tagging snapshot: snap-0bc767fd982333bf8'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：给快照打标记：snap-0bc767fd982333bf8
- en: '==> amazon-ebs: Tagging snapshot: snap-0104c1a352695c1e9'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：给快照打标记：snap-0104c1a352695c1e9
- en: '==> amazon-ebs: Creating AMI tags'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：创建AMI标记
- en: 'amazon-ebs: Adding tag: "SourceAMI": "ami-5e414e24"'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '亚马逊-ebs：添加标记："SourceAMI": "ami-5e414e24"'
- en: 'amazon-ebs: Adding tag: "DockerVersion": "17.09.1-ce"'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '亚马逊-ebs：添加标记："DockerVersion": "17.09.1-ce"'
- en: 'amazon-ebs: Adding tag: "ECSAgentVersion": "1.17.0-2"'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '亚马逊-ebs：添加标记："ECSAgentVersion": "1.17.0-2"'
- en: 'amazon-ebs: Adding tag: "Name": "Docker in AWS ECS Base Image 2017.09.h"'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '亚马逊-ebs：添加标记："Name": "Docker in AWS ECS Base Image 2017.09.h"'
- en: '==> amazon-ebs: Creating snapshot tags'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：创建快照标记
- en: '==> amazon-ebs: Terminating the source AWS instance...'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：终止源AWS实例...
- en: '==> amazon-ebs: Cleaning up any extra volumes...'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：清理任何额外的卷...
- en: '==> amazon-ebs: No volumes to clean up, skipping'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：没有要清理的卷，跳过
- en: '==> amazon-ebs: Deleting temporary security group...'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：删除临时安全组...
- en: '==> amazon-ebs: Deleting temporary keypair...'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：删除临时密钥对...
- en: '==> amazon-ebs: Running post-processor: manifest'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 亚马逊-ebs：运行后处理器：manifest
- en: Build 'amazon-ebs' finished.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 构建'亚马逊-ebs'完成。
- en: '==> Builds finished. The artifacts of successful builds are:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ==> 构建完成。成功构建的工件是：
- en: '--> amazon-ebs: AMIs were created:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: --> 亚马逊-ebs：AMI已创建：
- en: 'us-east-1: ami-57415b2d'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'us-east-1: ami-57415b2d'
- en: '[PRE8]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: cat manifest.json
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cat manifest.json
- en: '{'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"builds": ['
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '"builds": ['
- en: '{'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"name": "amazon-ebs",'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '"name": "amazon-ebs",'
- en: '"builder_type": "amazon-ebs",'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '"builder_type": "amazon-ebs",'
- en: '"build_time": 1518934504,'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '"build_time": 1518934504,'
- en: '"files": null,'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '"files": null,'
- en: '"artifact_id": "us-east-1:ami-57415b2d",'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '"artifact_id": "us-east-1:ami-57415b2d",'
- en: '"packer_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '"packer_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"'
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"last_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '"last_run_uuid": "db07ccb3-4100-1cc8-f0be-354b9f9b021d"'
- en: '}'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: echo manifest.json >> .gitignore
  id: totrans-228
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: echo manifest.json >> .gitignore
- en: '[PRE9]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '{'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": ['
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": ['
- en: '{'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "amazon-ebs",'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "amazon-ebs",'
- en: '"access_key": "{{user `aws_access_key_id`}}",'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '"access_key": "{{user `aws_access_key_id`}}",'
- en: '"secret_key": "{{user `aws_secret_access_key`}}",'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '"secret_key": "{{user `aws_secret_access_key`}}",'
- en: '"token": "{{user `aws_session_token`}}",'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '"token": "{{user `aws_session_token`}}",'
- en: '"region": "us-east-1",'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '"region": "us-east-1",'
- en: '"source_ami": "ami-5e414e24",'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '"source_ami": "ami-5e414e24",'
- en: '"instance_type": "t2.micro",'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '"instance_type": "t2.micro",'
- en: '"ssh_username": "ec2-user",'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '"ssh_username": "ec2-user",'
- en: '"associate_public_ip_address": "true",'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '"associate_public_ip_address": "true",'
- en: '"ami_name": "docker-in-aws-ecs {{timestamp}}",'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '"ami_name": "docker-in-aws-ecs {{timestamp}}",'
- en: '"launch_block_device_mappings": ['
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '"launch_block_device_mappings": ['
- en: '{'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"device_name": "/dev/xvdcy",'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '"device_name": "/dev/xvdcy",'
- en: '"volume_size": 20,'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '"volume_size": 20,'
- en: '"volume_type": "gp2",'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '"volume_type": "gp2",'
- en: '"delete_on_termination": true'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '"delete_on_termination": true'
- en: '}'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"tags": {'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '"tags": {'
- en: '"Name": "Docker in AWS ECS Base Image 2017.09.h",'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '"Name": "Docker in AWS ECS Base Image 2017.09.h",'
- en: '"SourceAMI": "ami-5e414e24",'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '"SourceAMI": "ami-5e414e24",'
- en: '"DockerVersion": "17.09.1-ce",'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '"DockerVersion": "17.09.1-ce",'
- en: '"ECSAgentVersion": "1.17.0-2"'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '"ECSAgentVersion": "1.17.0-2"'
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"provisioners": [...],'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": [...],'
- en: '"post-processors": [...]'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '{'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update"'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update"'
- en: ']'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: mkdir -p scripts
  id: totrans-282
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: mkdir -p scripts
- en: touch scripts/storage.sh
  id: totrans-283
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: touch scripts/storage.sh
- en: tree
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: tree
- en: .
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: ├── Makefile
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ├── Makefile
- en: ├── manifest.json
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: ├── manifest.json
- en: ├── packer.json
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: ├── packer.json
- en: └── scripts
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: └── 脚本
- en: └── storage.sh
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: └── storage.sh
- en: 1 directory, 4 files
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 1个目录，4个文件
- en: '[PRE12]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '#!/usr/bin/env bash'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: 'echo "### Configuring Docker Volume Storage ###"'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 'echo "### 配置Docker卷存储 ###"'
- en: sudo mkdir -p /data
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mkdir -p /data
- en: sudo mkfs.ext4 -L docker /dev/xvdcy
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mkfs.ext4 -L docker /dev/xvdcy
- en: echo -e "LABEL=docker\t/data\t\text4\tdefaults,noatime\t0\t0" | sudo tee -a
    /etc/fstab
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: echo -e "LABEL=docker\t/data\t\text4\tdefaults,noatime\t0\t0" | sudo tee -a
    /etc/fstab
- en: sudo mount -a
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: sudo mount -a
- en: '[PRE13]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '{'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update",'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update",'
- en: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
- en: ']'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '{'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/time.sh",'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/time.sh",'
- en: '"environment_vars": ['
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '"environment_vars": ['
- en: '"TIMEZONE={{user `timezone`}}"'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '"TIMEZONE={{user `timezone`}}"'
- en: ']'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update",'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update",'
- en: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
- en: ']'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '#!/usr/bin/env bash'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure host to use timezone
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Configure host to use timezone
- en: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html
- en: 'echo "### Setting timezone to $TIMEZONE ###"'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 'echo "### 设置时区为 $TIMEZONE ###"'
- en: sudo tee /etc/sysconfig/clock << EOF > /dev/null
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: sudo tee /etc/sysconfig/clock << EOF > /dev/null
- en: ZONE="$TIMEZONE"
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: ZONE="$TIMEZONE"
- en: UTC=true
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: UTC=true
- en: EOF
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: sudo ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: sudo ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime
- en: Use AWS NTP Sync service
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS NTP 同步服务
- en: echo "server 169.254.169.123 prefer iburst" | sudo tee -a /etc/ntp.conf
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: echo "server 169.254.169.123 prefer iburst" | sudo tee -a /etc/ntp.conf
- en: Enable NTP
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 NTP
- en: sudo chkconfig ntpd on
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chkconfig ntpd on
- en: '[PRE16]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '{'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/time.sh",'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/time.sh",'
- en: '"environment_vars": ['
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '"environment_vars": ['
- en: '"TIMEZONE={{user `timezone`}}"'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '"TIMEZONE={{user `timezone`}}"'
- en: ']'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '},'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/cloudinit.sh"'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/cloudinit.sh"'
- en: '},'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update",'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update",'
- en: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
- en: ']'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '#!/usr/bin/env bash'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Disable cloud-init repo updates or upgrades
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 禁用 cloud-init 仓库更新或升级
- en: 'sudo sed -i -e ''/^repo_update: /{h;s/: .*/: false/};${x;/^$/{s//repo_update:
    false/;H};x}'' /etc/cloud/cloud.cfg'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 'sudo sed -i -e ''/^repo_update: /{h;s/: .*/: false/};${x;/^$/{s//repo_update:
    false/;H};x}'' /etc/cloud/cloud.cfg'
- en: 'sudo sed -i -e ''/^repo_upgrade: /{h;s/: .*/: none/};${x;/^$/{s//repo_upgrade:
    none/;H};x}'' /etc/cloud/cloud.cfg'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 'sudo sed -i -e ''/^repo_upgrade: /{h;s/: .*/: none/};${x;/^$/{s//repo_upgrade:
    none/;H};x}'' /etc/cloud/cloud.cfg'
- en: '[PRE18]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '{'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/time.sh",'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/time.sh",'
- en: '"environment_vars": ['
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '"environment_vars": ['
- en: '"TIMEZONE={{user `timezone`}}"'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '"TIMEZONE={{user `timezone`}}"'
- en: ']'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/cloudinit.sh"'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/cloudinit.sh"'
- en: '},'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update",'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update",'
- en: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
- en: ']'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{ "type": "shell",'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "type": "shell",'
- en: '"script": "scripts/cleanup.sh"'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/cleanup.sh"'
- en: '}'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '#!/usr/bin/env bash'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: 'echo "### Performing final clean-up tasks ###"'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 'echo "### 执行最终清理任务 ###"'
- en: sudo stop ecs
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: sudo stop ecs
- en: sudo docker system prune -f -a
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: sudo docker system prune -f -a
- en: sudo service docker stop
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: sudo service docker stop
- en: sudo chkconfig docker off
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chkconfig docker off
- en: sudo rm -rf /var/log/docker /var/log/ecs/*
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: sudo rm -rf /var/log/docker /var/log/ecs/*
- en: '[PRE20]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '{'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"variables": {...},'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '"variables": {...},'
- en: '"builders": [...],'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '"builders": [...],'
- en: '"provisioners": ['
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '"provisioners": ['
- en: '{'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/storage.sh"'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/storage.sh"'
- en: '},'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/time.sh",'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/time.sh",'
- en: '"environment_vars": ['
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '"environment_vars": ['
- en: '"TIMEZONE={{user `timezone`}}"'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '"TIMEZONE={{user `timezone`}}"'
- en: ']'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/cloudinit.sh"'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/cloudinit.sh"'
- en: '},'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"inline": ['
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '"inline": ['
- en: '"sudo yum -y -x docker\\* -x ecs\\* update",'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y -x docker\\* -x ecs\\* update",'
- en: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '"sudo yum -y install aws-cfn-bootstrap awslogs jq"'
- en: ']'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '},'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "shell",'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "shell",'
- en: '"script": "scripts/cleanup.sh"'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '"script": "scripts/cleanup.sh"'
- en: '},'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "file",'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "file",'
- en: '"source": "files/firstrun.sh",'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '"source": "files/firstrun.sh",'
- en: '"destination": "/home/ec2-user/firstrun.sh"'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '"destination": "/home/ec2-user/firstrun.sh"'
- en: '}'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '],'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"post-processors": [...]'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '"post-processors": [...]'
- en: '}'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '#!/usr/bin/env bash'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure ECS Agent
  id: totrans-479
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS代理
- en: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
- en: '[PRE22]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '#!/usr/bin/env bash'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure ECS Agent
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS代理
- en: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
- en: Set HTTP Proxy URL if provided
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果提供了HTTP代理URL，则设置
- en: if [ -n $PROXY_URL ]
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: if [ -n $PROXY_URL ]
- en: then
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: then
- en: echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
- en: echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
- en: echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
- en: echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
- en: echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
- en: echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
- en: fi
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: '[PRE23]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '#!/usr/bin/env bash'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure ECS Agent
  id: totrans-499
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS代理
- en: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
- en: Set HTTP Proxy URL if provided
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果提供了HTTP代理URL
- en: if [ -n $PROXY_URL ]
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: if [ -n $PROXY_URL ]
- en: then
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: then
- en: echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: echo export HTTPS_PROXY=$PROXY_URL >> /etc/sysconfig/docker
- en: echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTPS_PROXY=$PROXY_URL >> /etc/ecs/ecs.config
- en: echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: echo NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock >> /etc/ecs/ecs.config
- en: echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTP_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
- en: echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: echo HTTPS_PROXY=$PROXY_URL >> /etc/awslogs/proxy.conf
- en: echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: echo NO_PROXY=169.254.169.254 >> /etc/awslogs/proxy.conf
- en: fi
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: fi
- en: Write AWS Logs region
  id: totrans-511
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入AWS日志区域
- en: sudo tee /etc/awslogs/awscli.conf << EOF > /dev/null
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo tee /etc/awslogs/awscli.conf << EOF > /dev/null命令
- en: '[plugins]'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[plugins]'
- en: cwlogs = cwlogs
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: cwlogs = cwlogs
- en: '[default]'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[default]'
- en: region = ${AWS_DEFAULT_REGION}
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: region = ${AWS_DEFAULT_REGION}
- en: EOF
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: Write AWS Logs config
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入AWS日志配置
- en: sudo tee /etc/awslogs/awslogs.conf << EOF > /dev/null
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sudo tee /etc/awslogs/awslogs.conf << EOF > /dev/null命令
- en: '[general]'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '[general]'
- en: state_file = /var/lib/awslogs/agent-state
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: state_file = /var/lib/awslogs/agent-state
- en: '[/var/log/dmesg]'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/dmesg]'
- en: file = /var/log/dmesg
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: file = /var/log/dmesg
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/dmesg
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/dmesg
- en: log_stream_name = {instance_id}
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: '[/var/log/messages]'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/messages]'
- en: file = /var/log/messages
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: file = /var/log/messages
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/messages
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/messages
- en: log_stream_name = {instance_id}
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: datetime_format = %b %d %H:%M:%S
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: datetime_format = %b %d %H:%M:%S
- en: '[/var/log/docker]'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/docker]'
- en: file = /var/log/docker
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 文件= /var/log/docker
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/docker
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/docker
- en: log_stream_name = {instance_id}
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: datetime_format = %Y-%m-%dT%H:%M:%S.%f
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: datetime_format = %Y-%m-%dT%H:%M:%S.%f
- en: '[/var/log/ecs/ecs-init.log]'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/ecs/ecs-init.log]'
- en: file = /var/log/ecs/ecs-init.log*
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 文件= /var/log/ecs/ecs-init.log*
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-init
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-init
- en: log_stream_name = {instance_id}
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: datetime_format = %Y-%m-%dT%H:%M:%SZ
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: datetime_format = %Y-%m-%dT%H:%M:%SZ
- en: time_zone = UTC
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: time_zone = UTC
- en: '[/var/log/ecs/ecs-agent.log]'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/ecs/ecs-agent.log]'
- en: file = /var/log/ecs/ecs-agent.log*
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 文件= /var/log/ecs/ecs-agent.log*
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-agent
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/ecs-agent
- en: log_stream_name = {instance_id}
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: datetime_format = %Y-%m-%dT%H:%M:%SZ
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: datetime_format = %Y-%m-%dT%H:%M:%SZ
- en: time_zone = UTC
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: time_zone = UTC
- en: '[/var/log/ecs/audit.log]'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '[/var/log/ecs/audit.log]'
- en: file = /var/log/ecs/audit.log*
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 文件= /var/log/ecs/audit.log*
- en: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/audit.log
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: log_group_name = /${STACK_NAME}/ec2/${AUTOSCALING_GROUP}/var/log/ecs/audit.log
- en: log_stream_name = {instance_id}
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: log_stream_name = {instance_id}
- en: datetime_format = %Y-%m-%dT%H:%M:%SZ
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: datetime_format = %Y-%m-%dT%H:%M:%SZ
- en: time_zone = UTC
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: time_zone = UTC
- en: EOF
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: '[PRE24]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '#!/usr/bin/env bash'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure ECS Agent
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS代理
- en: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
- en: Set HTTP Proxy URL if provided
  id: totrans-560
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果提供了HTTP代理URL，则设置
- en: '...'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Write AWS Logs region
  id: totrans-563
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写AWS日志区域
- en: '...'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Write AWS Logs config
  id: totrans-566
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写AWS日志配置
- en: '...'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Start services
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务
- en: sudo service awslogs start
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: sudo service awslogs start
- en: sudo chkconfig docker on
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: sudo chkconfig docker on
- en: sudo service docker start
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: sudo service docker start
- en: sudo start ecs
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: sudo start ecs
- en: '[PRE25]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '#!/usr/bin/env bash'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '#!/usr/bin/env bash'
- en: set -e
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: set -e
- en: Configure ECS Agent
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ECS代理
- en: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS_CLUSTER=${ECS_CLUSTER}" > /etc/ecs/ecs.config
- en: Set HTTP Proxy URL if provided
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果提供了HTTP代理URL，则设置
- en: '...'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Write AWS Logs region
  id: totrans-582
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写AWS日志区域
- en: '...'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Write AWS Logs config
  id: totrans-585
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写AWS日志配置
- en: '...'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Start services
  id: totrans-588
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务
- en: '...'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '...'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Health check
  id: totrans-591
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 健康检查
- en: Loop until ECS agent has registered to ECS cluster
  id: totrans-592
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环直到ECS代理注册到ECS集群
- en: echo "Checking ECS agent is joined to ${ECS_CLUSTER}"
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: echo "检查ECS代理是否加入到${ECS_CLUSTER}"
- en: until [[ "$(curl --fail --silent http://localhost:51678/v1/metadata | jq '.Cluster
    // empty' -r -e)" == ${ECS_CLUSTER} ]]
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 直到[[ "$(curl --fail --silent http://localhost:51678/v1/metadata | jq '.Cluster
    // empty' -r -e)" == ${ECS_CLUSTER} ]]
- en: do printf '.'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: do printf '.'
- en: sleep 5
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 睡眠5
- en: done
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 完成
- en: echo "ECS agent successfully joined to ${ECS_CLUSTER}"
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: echo "ECS代理成功加入到${ECS_CLUSTER}"
- en: '[PRE26]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: tree
  id: totrans-600
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 树
- en: .
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 。
- en: ├── Makefile
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: ├── Makefile
- en: ├── files
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: ├── 文件
- en: │   └── firstrun.sh
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: │   └── firstrun.sh
- en: ├── manifest.json
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: ├── manifest.json
- en: ├── packer.json
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: ├── packer.json
- en: └── scripts
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: └── 脚本
- en: ├── cleanup.sh
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: ├── cleanup.sh
- en: ├── cloudinit.sh
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: ├── cloudinit.sh
- en: ├── storage.sh
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: ├── storage.sh
- en: └── time.sh
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: └── time.sh
- en: 2 directories, 8 files
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 2个目录，8个文件
- en: '[PRE27]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: sudo mount
  id: totrans-614
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sudo mount
- en: proc on /proc type proc (rw,relatime)
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: proc在/proc上的类型为proc（rw，relatime）
- en: sysfs on /sys type sysfs (rw,relatime)
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: sysfs在/sys上的类型为sysfs（rw，relatime）
- en: /dev/xvda1 on / type ext4 (rw,noatime,data=ordered)
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/xvda1在/上的类型为ext4（rw，noatime，data=ordered）
- en: devtmpfs on /dev type devtmpfs (rw,relatime,size=500292k,nr_inodes=125073,mode=755)
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: devtmpfs在/dev上的类型为devtmpfs（rw，relatime，size=500292k，nr_inodes=125073，mode=755）
- en: devpts on /dev/pts type devpts (rw,relatime,gid=5,mode=620,ptmxmode=000)
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: devpts在/dev/pts上的类型为devpts（rw，relatime，gid=5，mode=620，ptmxmode=000）
- en: tmpfs on /dev/shm type tmpfs (rw,relatime)
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: tmpfs在/dev/shm上的类型为tmpfs（rw，relatime）
- en: /dev/xvdcy on /data type ext4 (rw,noatime,data=ordered)
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/xvdcy在/data上的类型为ext4（rw，noatime，data=ordered）
- en: none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,relatime)
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: none在/proc/sys/fs/binfmt_misc上的类型为binfmt_misc（rw，relatime）
- en: '[PRE28]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: date
  id: totrans-624
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 日期
- en: Wed Feb 21 06:45:40 EST 2018
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: Wed Feb 21 06:45:40 EST 2018
- en: sudo service ntpd status
  id: totrans-626
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sudo service ntpd status
- en: ntpd is running
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: ntpd正在运行
- en: '[PRE29]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: cat /etc/cloud/cloud.cfg
  id: totrans-629
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cat /etc/cloud/cloud.cfg
- en: 'WARNING: Modifications to this file may be overridden by files in'
  id: totrans-630
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警告：此文件的修改可能会被文件中的内容覆盖
- en: /etc/cloud/cloud.cfg.d
  id: totrans-631
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: /etc/cloud/cloud.cfg.d
- en: If this is set, 'root' will not be able to ssh in and they
  id: totrans-632
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果设置了这个，'root'将无法通过ssh登录，他们
- en: will get a message to login instead as the default user (ec2-user)
  id: totrans-633
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将收到一条消息，以默认用户（ec2-user）身份登录
- en: 'disable_root: true'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 'disable_root: true'
- en: This will cause the set+update hostname module to not operate (if true)
  id: totrans-635
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这将导致set+update主机名模块不起作用（如果为true）
- en: 'preserve_hostname: true'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 'preserve_hostname: true'
- en: 'datasource_list: [ Ec2, None ]'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 'datasource_list: [ Ec2, None ]'
- en: 'repo_upgrade: none'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 'repo_upgrade: none'
- en: 'repo_upgrade_exclude:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 'repo_upgrade_exclude:'
- en: '- kernel'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '- 内核'
- en: '- nvidia*'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '- nvidia*'
- en: '- cudatoolkit'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '- cudatoolkit'
- en: 'mounts:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 'mounts:'
- en: '- [ ephemeral0, /media/ephemeral0 ]'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '- [ 临时0，/media/ephemeral0 ]'
- en: '- [ swap, none, swap, sw, "0", "0" ]'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '- [ 交换，无，交换，sw，"0"，"0" ]'
- en: vim:syntax=yaml
  id: totrans-646
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: vim:syntax=yaml
- en: 'repo_update: false'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 'repo_update: false'
- en: '[PRE30]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: sudo service docker status
  id: totrans-649
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sudo service docker status
- en: docker is stopped
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: docker已停止
- en: sudo chkconfig --list docker
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: sudo chkconfig --list docker
- en: docker 0:off 1:off 2:off 3:off 4:off 5:off 6:off
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: docker 0:off 1:off 2:off 3:off 4:off 5:off 6:off
- en: '[PRE31]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: pwd
  id: totrans-654
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: pwd
- en: /home/ec2-user
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: /home/ec2-user
- en: ls
  id: totrans-656
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ls
- en: firstrun.sh
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: firstrun.sh
- en: '```'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Verifying first-run script
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 验证首次运行脚本
- en: At this point, you have successfully verified that your ECS container instance
    has been built as per your customizations, and you should now terminate the instance
    from the EC2 console. You will notice that it is in an unconfigured state, your
    ECS container instance actually can't do much given the Docker service is disabled,
    and in the next chapter, you will learn how to use CloudFormation to leverage
    the CloudFormation helper scripts you installed into your custom machine image
    to configure your ECS container instances at instance creation and leverage the
    customizations you have created.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已成功验证了您的ECS容器实例已根据您的定制构建，并且现在应该从EC2控制台终止该实例。您会注意到它处于未配置状态，实际上您的ECS容器实例无法做太多事情，因为Docker服务已被禁用，在下一章中，您将学习如何使用CloudFormation利用您安装到自定义机器镜像中的CloudFormation辅助脚本来配置您的ECS容器实例在实例创建时，并利用您创建的定制。
- en: Summary
  id: totrans-661
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to build your custom ECS container instance
    machine image, using the popular open source tool called Packer. You learned how
    to create a Packer template, and learned about the various sections that make
    up a template including variables, builders, provisioners, and post-processors.
    You were able to inject temporary session credentials required to authenticate
    access to AWS as part of the image build process, using a combination of Packer
    variables, environment variables, and a dash of Make automation.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用流行的开源工具Packer构建自定义的ECS容器实例机器镜像。您学习了如何创建Packer模板，并了解了组成模板的各个部分，包括变量、构建器、供应商和后处理器。您能够在图像构建过程中注入临时会话凭据，以便验证访问AWS，使用Packer变量、环境变量和一些Make自动化的组合。
- en: You successfully introduced a number of build-time customizations into your
    ECS container instance image, including installing CloudFormation helper scripts
    and the CloudWatch logs agent, and ensured the system was configured to run the
    NTP service on startup with the correct time zone. You disabled automatic security
    updates in the cloud-init configuration, which can cause problems if you are using
    an HTTP proxy.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将一些构建时定制引入到您的ECS容器实例镜像中，包括安装CloudFormation辅助脚本和CloudWatch日志代理，并确保系统配置为在启动时以正确的时区运行NTP服务。您在cloud-init配置中禁用了自动安全更新，这可能会在使用HTTP代理时造成问题。
- en: Finally, you created a first-run script designed to configure your ECS container
    instances at instance creation and first boot. This script configures ECS cluster
    membership, enables optional HTTP proxy support, configures the CloudWatch logs
    agent for Docker and ECS agent system logs, and performs a health check to ensure
    your instance has initialized successfully.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您创建了一个首次运行脚本，旨在在实例创建和首次启动时配置您的ECS容器实例。该脚本配置ECS集群成员资格，启用可选的HTTP代理支持，为Docker和ECS代理系统日志配置CloudWatch日志代理，并执行健康检查，以确保您的实例已成功初始化。
- en: In the next chapter, you will learn how to use your custom AMI to build an ECS
    cluster and an associated underlying EC2 autoscaling group, which will help you
    understand the rationale for the various customizations you performed to your
    custom machine image.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用自定义AMI来构建ECS集群和相关的底层EC2自动扩展组，这将帮助您理解对自定义机器映像执行的各种自定义的原因。
- en: Questions
  id: totrans-666
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which section of a Packer template defines the EC2 instance type of the temporary
    instance used during the Packer build process?
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Packer模板的哪个部分定义了Packer构建过程中使用的临时实例的EC2实例类型？
- en: 'True/False: Packer requires SSH access to a temporary instance during the Packer
    build process.'
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'True/False: Packer在构建过程中需要对临时实例进行SSH访问。'
- en: What configuration file format do you use to define a Packer template?
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用什么配置文件格式来定义Packer模板？
- en: 'True/False: You must hardcode your AWS credentials into your Packer template.'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'True/False: 您必须将AWS凭据硬编码到Packer模板中。'
- en: 'True/False: To capture the AMI ID created by Packer, you must parse the log
    output of the Packer build process.'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'True/False: 要捕获Packer创建的AMI ID，您必须解析Packer构建过程的日志输出。'
- en: What is the default storage configuration of the ECS-Optimized AMI?
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECS-Optimized AMI的默认存储配置是什么？
- en: What type of Packer provisioner would you use to write a file to the /etc directory?
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会使用什么类型的Packer provisioner来将文件写入/etc目录？
- en: You create an EC2 instance from a custom AMI that takes a long time to boot.
    The AMI is installed in a private subnet with no additional infrastructure configured
    in the environment. What is a likely cause of the slow boot time?
  id: totrans-674
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您从一个需要很长时间才能启动的自定义AMI创建了一个EC2实例。该AMI安装在一个没有额外基础架构配置的私有子网中。导致启动时间缓慢的可能原因是什么？
- en: Further reading
  id: totrans-675
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接以获取本章涵盖的主题的更多信息：
- en: 'Packer Amazon EBS Builder documentation: [https://www.packer.io/docs/builders/amazon-ebs.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html),
    [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Packer Amazon EBS Builder documentation: [https://www.packer.io/docs/builders/amazon-ebs.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html),
    [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)'
- en: 'Amazon ECS-Optimized AMI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Amazon ECS-Optimized AMI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)'
- en: 'Getting Started with CloudWatch logs: [https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html)'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CloudWatch日志入门：[https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html)
- en: 'CloudFormation Helper Scripts Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html)'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation辅助脚本参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html)
- en: 'Using the ECS CLI: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ECS CLI：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html)
