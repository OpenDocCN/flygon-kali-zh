- en: Node.js versus Python
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js与Python
- en: Why would a developer choose Node.js over Python? Can they work together? What
    do our programs look like? These questions and more are at the heart of some of
    the differences between Python and Node.js, and it's important to understand when
    and where to use a particular language. For example, there are tasks for which
    a certain language is more suited than others, and it is the technologist's duty
    to advocate for the proper language. Let's investigate the use cases and different
    considerations when choosing Node.js versus Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么开发人员会选择Node.js而不是Python？它们可以一起工作吗？我们的程序是什么样子的？这些问题等等都是Python和Node.js之间一些差异的核心，了解何时以及在何处使用特定的语言非常重要。例如，有些任务更适合某种语言，而不适合其他语言，技术人员有责任为适当的语言进行倡导。让我们调查在选择Node.js与Python时的用例和不同的考虑因素。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Philosophical differences between Node.js and Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js和Python之间的哲学差异
- en: Performance implications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能影响
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `Chapter-12` directory of
    the repository at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and a local code editor.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库中`Chapter-12`目录中提供的代码，网址为[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12)。由于我们将使用命令行工具，请确保你的终端或命令行shell可用。我们需要一个现代浏览器和一个本地代码编辑器。
- en: Philosophical differences between Node.js and Python
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js和Python之间的哲学差异
- en: It's common to have a main language that you know, work with, and are comfortable
    with. However, it's important to realize that not all programming languages are
    created for the same purpose. That is why it's very important to use the right
    tool for the job at hand. Just as you wouldn't attempt to build a house with a
    pocketknife, you probably wouldn't use a table saw to whittle a stick into a point
    for a campfire for s'mores.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会有一个你熟悉、使用并且感到舒适的主要语言。然而，重要的是要意识到并非所有编程语言都是为相同的目的而创建的。这就是为什么使用合适的工具非常重要。就像你不会用小刀来建造房子一样，你可能也不会用台锯来把树枝削成棍子，用于篝火做棉花糖。
- en: If you've been in the industry for a while, you have probably heard the term
    **stack**. In technology, a stack is the architectural combination of technologies
    used to create a program or multiple programs in an ecosystem. In the past, applications
    tended to be large-scale **monoliths**, built in a "one application to rule them
    all" mindset. In today's world, the use of monoliths is decreasing in favor of
    multiple, smaller applications and **microservices**. In this manner, different
    parts of a workflow can be distributed to completely independent processes, greatly
    increasing the stability of an overall system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个行业呆了一段时间，你可能听说过“堆栈”这个术语。在技术上，堆栈是用于创建程序或多个程序的生态系统的技术的架构组合。过去，应用程序往往是大规模的**单体应用**，以“一款应用程序统治它们所有”为思维方式构建的。在今天的世界中，单体应用的使用正在减少，而更多地采用多个更小的应用程序和**微服务**。通过这种方式，工作流程的不同部分可以分布到完全独立的进程中，大大提高了整个系统的稳定性。
- en: Let's use Office software as an example. You certainly wouldn't try to write
    your next bestselling novel in Microsoft Excel, and you probably wouldn't want
    to do your taxes in Microsoft Word. There is a *separation of concerns* between
    these programs. They function very well together and form a unified whole, but
    each has its own part to play in your workflow.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以办公软件为例。你肯定不会试图在Microsoft Excel中写下你的下一部畅销小说，你可能也不想在Microsoft Word中做税务。这些程序之间存在着“关注点分离”。它们在工作流程中很好地协同工作并形成一个统一的整体，但每个程序都有自己的作用。
- en: 'Similarly, the different pieces of technology in a web application have their
    own uses and concerns. One of the more traditional stacks used for web applications
    is called **LAMP** (**Linux, Apache, MySQL, and PHP**):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Web应用程序中的不同技术部分都有自己的用途和关注点。用于Web应用程序的更传统的堆栈之一称为**LAMP**（**Linux, Apache,
    MySQL和PHP**）。
- en: '![](assets/db3645d2-d9b2-4f38-a070-9ccdccd29948.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db3645d2-d9b2-4f38-a070-9ccdccd29948.png)'
- en: Figure 12.1 – LAMP stack
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 - LAMP堆栈
- en: You can see that when discussing web applications in specifics, we take the
    web browser and the client stack as a given and unknown, not listed in the abbreviation
    LAMP. In this case, LAMP is only the server-side components.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，当讨论具体的Web应用程序时，我们将Web浏览器和客户端堆栈视为已知但未列在LAMP缩写中。在这种情况下，LAMP只是服务器端组件。
- en: As the web evolved, so did the underlying technologies supporting it and their
    stacks. Two of the more common stacks you may hear of now are **MEAN** (**MongoDB,
    Express, Angular, and Node.js**) and **MERN** (**MongoDB, Express, React, and
    Node.js**). It's no coincidence that the only difference in technology is Angular
    versus React. They fulfill essentially the same role in an otherwise stable system.
    We'll explore Express, the ubiquitous web server framework for Node.js, in [Chapter
    13](57b3ea57-b927-47f6-b07e-d1dd11796e1a.xhtml), *Using Express*, and MongoDB
    in [Chapter 18](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml), *Node.js and MongoDB*.
    For now, let's focus on the question of *why Node.js?*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Web的发展，支持它的基础技术及其堆栈也在发展。现在你可能会听到的两种更常见的堆栈是**MEAN**（**MongoDB, Express, Angular和Node.js**）和**MERN**（**MongoDB,
    Express, React和Node.js**）。这两者之间唯一的区别是Angular与React。它们在一个稳定的系统中实质上扮演着相同的角色。我们将在[第13章](57b3ea57-b927-47f6-b07e-d1dd11796e1a.xhtml)中探讨Express，这是Node.js的普遍Web服务器框架，以及在[第18章](b36b27d1-f6cf-4382-ac73-f21a1aeabd3d.xhtml)中探讨MongoDB，现在让我们专注于“为什么选择Node.js？”。
- en: 'When choosing a language for a project, there are many factors to consider.
    Some of them are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择项目的语言时，有许多因素需要考虑。其中一些如下：
- en: Type of project
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目类型
- en: Budget
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预算
- en: Time-to-market
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上市时间
- en: Performance
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: These may sound like very basic factors, but I've certainly seen instances where
    the chosen technology was not a good fit for the type of project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能听起来是非常基本的因素，但我确实见过选择的技术不适合项目类型的情况。
- en: For those immersed in the web side of software, the choice between using JavaScript
    on the backend versus another language seems like a no-brainer. JavaScript is
    foundational to the use of the modern web, so it sounds like, by corollary, it
    should be used on both the client side and server side.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些沉浸在软件网络端的人来说，选择在后端使用JavaScript还是其他语言似乎是一个不言而喻的选择。JavaScript是现代网络使用的基础，因此听起来，顺理成章地，应该在客户端和服务器端都使用它。
- en: However, Python's been around longer and has definitely had a cemented foothold
    in the development community, especially with the explosion of interest in data
    science and machine learning, where Python reigns supreme. Flask and Django are
    excellent web frameworks that are robust and powerful. So why would we want to
    use Node.js instead?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Python已经存在更长时间，而且在开发社区中肯定已经牢固地占据了一席之地，特别是在数据科学和机器学习的兴起中，Python占据着主导地位。Flask和Django是出色的Web框架，功能强大。那么，为什么我们要使用Node.js呢？
- en: The first part of deciding what tech stack to use is understanding the *type
    of project*. For the scope of our discussion today, let's limit our type of project
    to reasonable use cases. We won't open the can of worms to the Internet of Things/connected
    devices, as these are mostly written in Java. Let's also rule out machine learning
    and data science as possible use cases, as it's been established in the field
    that Python is better suited for these use cases. However, there actually is an
    argument for desktop and mobile applications being developed in JavaScript.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 决定使用什么技术栈的第一步是了解*项目类型*。在我们今天的讨论范围内，让我们将我们的项目类型限制在合理的用例范围内。我们不会打开物联网/连接设备的潘多拉魔盒，因为这些大多数是用Java编写的。让我们也排除机器学习和数据科学作为可能的用例，因为在该领域已经确定Python更适合这些用例。然而，实际上有一个关于用JavaScript开发桌面和移动应用程序的论点。
- en: 'To begin with, let''s think about if our project is a web application. In most
    cases, Node.js would be a logical fit over Python for many of the reasons that
    we''ve already explored: its asynchronous nature, less context switching, performance,
    and so forth. I''m hard-pressed to think of an adequate use case for using a Pythonic
    backend for a web app that would be superior to Node.js. I''m sure some exist,
    but in general, even when dealing with larger, more complex systems, the preference
    today is not to have a monolithic backend application, but rather to have a combination
    of *microservices* interacting with each other with data handoff.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们考虑一下我们的项目是否是一个Web应用程序。在大多数情况下，Node.js会是一个比Python更合理的选择，原因有很多，我们已经探讨过：它的异步性质、上下文切换较少、性能等等。我很难想象出一个使用Python后端的Web应用程序的充分用例，它会比Node.js更优越。我相信一些情况确实存在，但总的来说，即使在处理更大、更复杂的系统时，今天的偏好也不是拥有一个单一的后端应用程序，而是拥有一组*微服务*相互交互，并进行数据交接。
- en: 'Let''s have a look at a possible **high-level architecture **(**HLA**) diagram.
    If you''re dealing with complex applications, understanding the HLA of a system
    is extremely useful. Even if you''re only actively working on one part of the
    application, understanding the needs and structure of other systems is invaluable.
    In this example, we have a possible architecture of an e-commerce site that also
    has a mobile app:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个可能的**高级架构**（**HLA**）图表。如果你正在处理复杂的应用程序，了解系统的HLA是非常有用的。即使你只是在应用程序的一部分上积极工作，了解其他系统的需求和结构也是非常宝贵的。在这个例子中，我们有一个可能的电子商务网站架构，还有一个移动应用程序：
- en: '![](assets/20a02158-e417-4e03-9ba7-4030c0f1aa2a.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20a02158-e417-4e03-9ba7-4030c0f1aa2a.png)'
- en: Figure 12.2 – High-level architecture
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 高级架构
- en: We can see that there can be multiple microservices, including some that are
    *not* Node.js or JavaScript at all. Python would be better suited as a microservice
    to provide the overarching application with recommendations, as that requires
    data analysis, which Python and R are better at doing than Node.js. Additionally,
    you can see that in the application, there can be multiple different data sources,
    from third-parties to different database types.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到可能有多个微服务，包括一些*不是*Node.js或JavaScript的。Python更适合作为一个微服务，为整体应用程序提供推荐，因为这需要数据分析，而Python和R在这方面做得比Node.js更好。此外，你可以看到在应用程序中，可以有多个不同的数据源，从第三方到不同的数据库类型。
- en: So, what about our project? Are we building this large ecosystem or a specific
    piece of it? In this example, the web app, payment service, account service, and
    inventory service are Node.js, as it makes sense to use technology designed for
    asynchronous communication. The recommendation engine, however, can be a *completely
    separate stack* without any problems, since it's contained within an overall ecosystem
    of microservices. As long as the parts of the application are appropriately communicating
    with each other, each service can be nearly independent.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们的项目呢？我们是在构建一个庞大的生态系统还是其中的一个特定部分？在这个例子中，Web应用程序、支付服务、账户服务和库存服务都是Node.js，因为使用设计用于异步通信的技术是有意义的。然而，推荐引擎可以是一个*完全独立的堆栈*，没有任何问题，因为它包含在微服务的整体生态系统中。只要应用程序的各个部分适当地相互通信，每个服务几乎可以是独立的。
- en: 'Why is this important? Simply stated, it''s a good way to enable smaller, nimbler
    teams to work in parallel to create software that is delivered faster and with
    greater stability than a monolithic application. Let''s look at an example: you
    hit a major retailer''s website to make a purchase, but instead of seeing the
    home page, you see the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要？简单地说，这是使更小、更灵活的团队能够并行工作，创建比单一应用程序更快、更稳定的软件的好方法。让我们来看一个例子：你打开一个大型零售商的网站来购物，但是你没有看到主页，而是看到了以下内容：
- en: '![](assets/b9d914e1-caa8-4471-afec-3467eff199d1.png)Figure 12.3 – 500! Error,
    error, danger, danger!'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b9d914e1-caa8-4471-afec-3467eff199d1.png)图12.3 – 500！错误，错误，危险，危险！'
- en: 'The bane of any web application developer''s life: a full-blown outage caused
    by a code problem. Instead, wouldn''t it be much nicer if the site functioned
    for the majority of it, but, perhaps when it came time to check out, it said "Sorry,
    our payment processing system is currently offline. We''ve saved your cart for
    later." Or let''s say the Pythonic piece of the recommendation engine crashed—we
    could instead serve in a static collection of items. To creatively construct an
    authentic user experience for a large ecosystem of microservices, it''s important
    to consider the end user''s standpoint *as well as* the business goals. In the
    case of our e-commerce store, we don''t want the whole application to crash from
    a small error. Rather, we can intelligently downgrade the experience if problems
    were to occur. This is one example of a principle often known as fault-tolerant
    computing and, when designing large applications, it''s powerful to separate a
    monolith into microservices in order to be more fault-tolerant.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Web应用程序开发人员的梦魇：由于代码问题导致的全面中断。相反，如果网站在大部分时间内正常运行，但是在结账时可能会显示“抱歉，我们的支付处理系统目前离线。我们已保存您的购物车以便以后使用。”或者说推荐引擎的Python部分崩溃了——我们可以改为提供静态的物品集合。为了创造一个大型微服务生态系统的真实用户体验，重要的是考虑最终用户的立场*以及*业务目标。在我们的电子商务商店的情况下，我们不希望整个应用程序因为一个小错误而崩溃。相反，如果出现问题，我们可以智能地降级体验。这是一个常被称为容错计算的原则的例子，在设计大型应用程序时，将单体应用程序分解为微服务以提高容错性是非常有力的。
- en: 'I want to show you a quick example of some of the power of JavaScript existing
    in the desktop arena before we discuss the consideration of the budget. Let''s
    run a piece of example code provided for you in the GitHub repository at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12/electron](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12/electron):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论预算考虑之前，我想向你展示一些JavaScript在桌面领域的强大示例。让我们运行一个示例代码片段，该代码片段在GitHub存储库[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12/electron](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-12/electron)中为您提供：
- en: Install the dependencies with `npm install`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm install`安装依赖项。
- en: Run the application with `npm start`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm start`运行应用程序。
- en: 'You should see a *native application* start—with our Pokémon game that we created
    in [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events, Event-Driven
    Design, and APIs*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个*本机应用程序*启动——我们在[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中创建的Pokémon游戏，*事件、事件驱动设计和API*：
- en: '![](assets/2c52b4b3-7ea6-409b-ba79-1ac55c544328.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c52b4b3-7ea6-409b-ba79-1ac55c544328.png)'
- en: Figure 12.4 – It's a desktop app!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 这是一个桌面应用程序！
- en: 'How did this happen? We leveraged a great tool: Electron. You can read more
    about Electron at [https://electronjs.org/](https://electronjs.org/), but the
    gist is that it''s a container tool to present HTML, CSS, and JavaScript as a
    desktop application. You may have already used Electron without realizing it:
    Spotify, Slack, and other popular desktop applications are built with Electron.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何发生的？我们利用了一个很棒的工具：Electron。您可以在[https://electronjs.org/](https://electronjs.org/)了解更多关于Electron的信息，但要点是它是一个容器工具，用于将HTML、CSS和JavaScript呈现为桌面应用程序。您可能已经在不知不觉中使用了Electron：Spotify、Slack和其他流行的桌面应用程序都是使用Electron构建的。
- en: 'Let''s take a quick look under the hood:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下内部结构：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we compare this to our PokéAPI project from [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml), *Events,
    Event-Driven Design, and APIs*, ([https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code)),
    we'll see that there are a lot of similarities.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其与[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中的PokéAPI项目进行比较，*事件、事件驱动设计和API*（[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-7/pokeapi/solution-code)），我们会发现有很多相似之处。
- en: '**Wait.**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**等等。**'
- en: 'Not just similarities…this is *identical* to the code we used for our browser!
    `main.js` has been renamed to `poke.js` to avoid a naming conflict, but that''s
    a small detail. Yes: you''ve just successfully created a desktop app with existing
    code.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅相似……这与我们用于浏览器的代码*完全相同*！`main.js`已重命名为`poke.js`以避免命名冲突，但这只是一个小细节。是的：您刚刚成功地使用现有代码创建了一个桌面应用程序。
- en: 'So, back to budget: what if you need a web app *and* a desktop app? You should
    be getting the idea by now that with JavaScript, you can have the best of both
    worlds and have a modern web application *and* a desktop application with minimal
    changes. The nuances are a bit more than we''ve done here, but the power of Electron
    should be evident. Write once, use multiple times—isn''t that the mantra of DRY
    coding?'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，回到预算问题：如果你需要一个Web应用程序*和*一个桌面应用程序呢？你现在应该已经明白，使用JavaScript，你可以同时拥有现代Web应用程序*和*一个桌面应用程序，只需进行最小的更改。细微之处比我们在这里做的要多一些，但是Electron的强大应该是显而易见的。一次编写，多次使用——这不就是DRY编码的口头禅吗？
- en: However, there is a flip side to this argument. Since Python has been mature
    longer than Node.js, there is a probability that Python developers will be more
    cost-effective in their hourly rate than Node.js developers. However, I would
    consider this a secondary concern.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个论点也有反面。由于Python的成熟程度比Node.js更长，Python开发人员的小时费用可能会更具成本效益。然而，我认为这是一个次要的问题。
- en: 'Likewise, as a secondary concern, *time-to-market* is indeed a question that
    arises when choosing a technology. Unfortunately, the numbers here are inconclusive.
    Because Node.js is JavaScript, in theory, it can be developed quickly and iteratively.
    However, Python''s explicit and simple syntax makes writing it faster at times.
    It''s a very difficult problem to solve, so it''s best to consider another part
    of the timing aspect: technical debt. Tech debt is the bane of engineering teams,
    and it simply means that, at the expense of the optimal solution, a faster solution
    was implemented. Additionally, the attrition of technology can lead to tech debt.
    Do you remember Y2K? When it was discovered that many major applications in the
    world were dependent on a two-digit year, it was feared that the change from the
    year 1999 to 2000 would wreak havoc on computer systems. Thankfully, only minor
    glitches occurred, but the problem of tech debt arose: many of those systems were
    coded in languages that had since become obscure. Finding programmers to develop
    these fixes was difficult and costly. Likewise, if you choose a technology because
    it''s faster, you may find yourself paying twice or thrice the initial investment
    in terms of budget and time to refactor the application to meet ongoing needs.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，作为次要关注点，*上市时间*确实是在选择技术时出现的一个问题。不幸的是，这里的数字并不确定。因为Node.js是JavaScript，理论上可以快速迭代开发。然而，Python的明确和简单的语法有时会更快地编写。这是一个非常难解决的问题，因此最好考虑时间方面的另一个部分：技术债务。技术债务是工程团队的大敌，它简单地意味着以牺牲最佳解决方案为代价，实施了更快的解决方案。此外，技术的淘汰也会导致技术债务。您还记得Y2K吗？当发现世界上许多主要应用程序依赖于两位数年份时，人们担心从1999年到2000年的变化会对计算机系统造成严重破坏。幸运的是，只发生了一些小故障，但技术债务的问题出现了：许多这些系统是用已经变得陈旧的语言编写的。找到程序员来开发这些修复程序是困难且昂贵的。同样，如果您选择一种技术是因为它更快，您可能会发现自己在预算和时间方面付出两三倍于最初投资的代价来重构应用程序以满足持续的需求。
- en: Let's turn our attention to performance. There is a lot to consider here, so
    let's continue to the next section and discuss why performance is always a consideration
    when discussing Node.js.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把注意力转向性能。这里有很多要考虑的，所以让我们继续到下一节，讨论为什么在讨论Node.js时性能总是需要考虑的。
- en: Performance implications
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能影响
- en: 'When Node.js was first gaining popularity, there were concerns about its single-threaded
    nature. Single thread means one CPU, and one CPU can be overwhelmed by large traffic
    influxes. However, for the most part, all of these thread concerns have been assuaged
    by advances in server technology, hosting, and DevOps tools. With that being said,
    the single-threaded nature also shouldn''t be a deterrent in and of itself: we''ll
    discuss in just a little bit why the *Node event loop* plays an important role
    in any discussion around Node.js''s performance.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当Node.js首次开始流行时，人们对其单线程性质表示担忧。单线程意味着一个CPU，一个CPU可能会被大量的流量压倒。然而，大部分情况下，所有这些线程问题都已经被服务器技术、托管和DevOps工具的进步所缓解。话虽如此，单线程性质本身也不应该成为阻碍：我们将在稍后讨论为什么*Node事件循环*在任何关于Node.js性能的讨论中扮演着重要角色。
- en: In a nutshell, to really differentiate on performance, we should focus on *perceived*
    performance. Python is an easy-to-understand, robust, object-oriented programming
    language; there are no disputes about that. However, one of the things it does
    not, cannot, and will not do is run in the browser. That spot is taken by JavaScript.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，要真正在性能上有所区别，我们应该专注于*感知*性能。Python 是一种易于理解、强大、面向对象的编程语言；这是毋庸置疑的。然而，它不会在浏览器中运行。这个位置被JavaScript占据了。
- en: 'Why is this important and how does it relate to performance? In a nutshell:
    *Python can''t react to changes in the browser.* It''s possible to perform an
    Ajax request every time the UI of a page changes, but that would be incredibly
    expensive computationally both for the browser and the server. Additionally, you''d
    have to make the browser wait for a response from the server at each change, causing
    a very laggy experience. So, therefore, the more we can do client-side in the
    browser, the better. Using JavaScript in a browser to handle logic before needing
    to communicate with a server is the goal.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这很重要，它与性能有什么关系？简而言之：*Python 无法对浏览器中的更改做出反应*。每次页面UI更改时执行Ajax请求是可能的，但这对浏览器和服务器在计算上都非常昂贵。此外，您必须使浏览器在每次更改时等待来自服务器的响应，导致非常卡顿的体验。因此，在浏览器中我们能做的越多，越好。在需要与服务器通信之前，使用浏览器中的JavaScript来处理逻辑是目标。
- en: 'Implicit in the discussion around using Node.js is a thought you probably have
    from the previous section: *Node.js doesn''t run in the browser either!* That''s
    true! However, there''s the fact that Node.js is based on the Chrome interpreter
    and, as such, implicit in its design is the idea of asynchronicity. The event
    loop of Node.js is designed for, well, events—and inherent in the concept of events
    is that they''re asynchronous.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Node.js的讨论中隐含着您可能从上一节中得出的一个想法：*Node.js 也不在浏览器中运行！*这是真的！然而，Node.js基于Chrome解释器，因此其设计中隐含的是异步性的概念。Node.js的事件循环是为事件设计的，而事件的内在特性是它们是异步的。
- en: 'Let''s review the following diagram from [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml),
    *Events, Event-Driven Design, and APIs*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中的以下图表，*事件、事件驱动设计和API*：
- en: '![](assets/e38f207f-a227-44ba-8593-d7d5f6b0d508.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e38f207f-a227-44ba-8593-d7d5f6b0d508.png)'
- en: Figure 12.5 – The event life cycle
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 - 事件生命周期
- en: 'If you recall, this diagram represents the three phases of a browser event:
    capturing, targeting, and bubbling. The DOM events specifically relate to actions,
    interactions, or triggers that are caused in the browser either by the user or
    the program itself.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得，这个图表代表了浏览器事件的三个阶段：捕获、目标和冒泡。DOM事件特指在浏览器中由用户或程序本身引起的操作、交互或触发器。
- en: 'Similarly, the event loop of Node.js has a life cycle:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Node.js的事件循环有一个生命周期：
- en: '![](assets/e96702ef-0b7d-41c1-9ed5-2b200396ed79.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e96702ef-0b7d-41c1-9ed5-2b200396ed79.png)'
- en: Figure 12.6 - The Node.js event loop
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 - Node.js事件循环
- en: Let's decipher this. The single-thread event loop runs during the life cycle
    of a Node application and accepts inbound requests, either from a browser, another
    API, or other sources, and executes its work. If it's a simple request or specified
    as synchronous, it can be returned immediately. For more intensive operations,
    Node will register a *callback*. Remember that this is a term for a function that
    is passed to another function in order to be executed when the function it's passed
    to finishes its work. We've used these extensively as *event handlers* in JavaScript
    so far. The Node.js event loop provides an efficient means to access and serve
    data to our application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来解释一下。单线程事件循环在Node应用程序的生命周期内运行，并接受来自浏览器、其他API或其他来源的传入请求，并执行其工作。如果是一个简单的请求或被指定为同步的，它可以立即返回。对于更密集的操作，Node将注册一个*回调*。记住，这是一个传递给另一个函数以在其完成工作时执行的函数的术语。到目前为止，我们已经在JavaScript中广泛使用这些作为*事件处理程序*。Node.js事件循环提供了一种有效的方式来访问和为我们的应用程序提供数据。
- en: If you're not too familiar with the concepts of threads and processes, that's
    OK because we won't really dive in deep here. However, it's important to point
    out some facts about Node's use of processes and threads. It's stated by some
    computer scientists that the single-threaded nature of Node is inherently unscalable
    and that it can't stand up to the volume of traffic that a mature web app would
    need. However, as I mentioned previously, our applications don't live in a silo.
    No application that needs to be designed for scale is just going to hang out on
    a server alone. With the advent of cloud technologies such as Amazon AWS, it's
    easy to incorporate multiple virtual machines, load balancers, and other virtual
    tools to appropriately distribute the load for an application. Yes, Python may
    be better suited as a single-box application to receive thousands upon thousands
    of incoming requests, but this benchmark for performance is outdated and belies
    the state of technology today.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对线程和进程的概念不太熟悉，没关系，因为我们不会在这里深入讨论。然而，指出一些关于Node使用进程和线程的事实是很重要的。一些计算机科学家指出，Node的单线程特性在本质上是不可扩展的，无法承受成熟的Web应用程序所需的流量。然而，正如我之前提到的，我们的应用程序并不孤立存在。任何需要设计成可扩展性的应用程序都不会只独自在服务器上运行。随着云技术的出现，比如亚马逊AWS，很容易整合多个虚拟机、负载均衡器和其他虚拟工具，以适当地分配应用程序的负载。是的，Python可能更适合作为一个单一盒子应用程序来接收成千上万的传入请求，但是这种性能基准已经过时，不符合当今技术的状态。
- en: Caveat emptor
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 买方自负
- en: Now that we're in love with Node, let's return to the idea of the right tool
    for the task at hand. Node isn't a panacea for all the world's computing problems.
    In fact, it's specifically *not* designed to be a Swiss Army knife. It has its
    use and its place, but it doesn't try to be everything to everyone. The "do everything"
    nature of Java might be considered one of its weaknesses, in that while you can
    write Java code once and compile it for practically any architecture, there are
    limitations, considerations, and trade-offs that have been made to accommodate
    this. Node.js and JavaScript, in essence, try to stay in their own lanes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经爱上了Node，让我们回到手头任务的正确工具的想法。Node并不是解决世界所有计算问题的灵丹妙药。事实上，它特意*不*设计成瑞士军刀。它有它的用途和位置，但它并不试图成为所有人的一切。Java的“做任何事情”的特性可能被认为是它的弱点，因为虽然你可以编写一次Java代码并为几乎任何架构编译它，但为了适应这一点，已经做出了限制、考虑和权衡。Node.js和JavaScript本质上试图留在自己的领域。
- en: 'So, what''s the catch? We know that JavaScript is fast, powerful, effective,
    and understandable. Like any technology, there are always nuances, and one nuance
    of JavaScript and Node is this mantra that is in some Linux systems when you first
    log in as a superuser: "With great power comes great responsibility." While the
    provenance of the quote is nebulous, it''s important to think of when executing
    anything that has influence over others. (Don''t use hypnotism for evil!)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，有什么问题吗？我们知道JavaScript快速、强大、有效和易懂。像任何技术一样，总会有细微差别，JavaScript和Node的一个细微差别就是在一些Linux系统中，当你首次以超级用户身份登录时，会出现这样的座右铭：“伴随着伟大的力量而来的是伟大的责任。”尽管这句话的出处模糊不清，但在执行任何对他人有影响的事情时，思考这一点是很重要的。（不要用催眠术做坏事！）
- en: 'All joking aside, there are very real problems that can occur with an asynchronous
    environment. We know that we can easily crash a user''s browser with our own client-side
    JavaScript code by throwing it into an infinite loop. Consider the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 开玩笑的话，异步环境可能会出现非常真实的问题。我们知道，我们可以轻松地通过我们自己的客户端JavaScript代码将用户的浏览器崩溃，只需将其放入一个无限循环中。考虑以下代码：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Excellent. If you were to run this in a browser, the *best* that could happen
    is that the browser would recognize an infinite loop and prompt a warning for
    you to exit the script because the page is unresponsive. A second outcome would
    be that the browser crashes, and in the worst-case scenario, the user's entire
    machine may crash with an out-of-memory exception. With great power...
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。如果你在浏览器中运行这个代码，*最好*的情况是浏览器会识别出一个无限循环，并提示你退出脚本，因为页面无响应。第二种情况是浏览器崩溃，最坏的情况是用户的整个机器可能因为内存不足而崩溃。伴随着伟大的力量……
- en: 'Similarly, we can severely impact the user''s experience in Node by improperly
    handling state and events. What if, for example, your frontend code was dependent
    upon a Node process and that process never returned? Luckily, there are Ajax safeguards
    built in to prevent this in most cases, in that HTTP requests will, by default,
    close after a certain period of time and error out if necessary. With that being
    said, there are a whole host of ways to force a connection to stay open, causing
    absolute chaos to a user''s browser. There are perfectly valid reasons for doing
    this, such as long polling for live data, so that''s why they exist. On the flip
    side, it''s also possible to accidentally cause major issues for a user. Fail
    safes such as timing out requests exist for  you protection, but any good engineer
    will tell you: don''t rely on fail safes—avoid errors in the design process.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，通过不正确地处理状态和事件，我们可以严重影响用户在Node中的体验。例如，如果您的前端代码依赖于一个Node进程，而该进程从未返回会怎么样？幸运的是，在大多数情况下，内置了Ajax保障措施，以防止这种情况发生，即HTTP请求将在一定时间后默认关闭并在必要时报错。话虽如此，有许多方法可以强制连接保持打开状态，从而对用户的浏览器造成绝对混乱。有很多正当的理由来做这件事，比如长轮询实时数据，这就是它们存在的原因。另一方面，也有可能意外地给用户造成重大问题。像超时请求这样的故障保护措施存在是为了保护您，但任何优秀的工程师都会告诉您：不要依赖故障保护措施——避免在设计过程中出现错误。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Python is great. Node is great. Both are great. So why are we having this conversation?
    While both technologies are strong and mature, each has a role to play in the
    technology ecosystem. Not all languages are created equal, and not all languages
    handle problems in the same way.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python很棒。Node也很棒。两者都很棒。那么为什么我们要进行这次对话呢？虽然这两种技术都很强大和成熟，但每种技术在技术生态系统中都有其作用。并非所有语言都是平等的，也并非所有语言以相同的方式处理问题。
- en: 'To summarize, we have learned the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们已经学到了以下内容：
- en: Node.js is asynchronous and works well with event-based thoughts, such as JavaScript
    in a browser reacting to page events.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js是异步的，并且与基于事件的思想很好地配合，比如浏览器中的JavaScript对页面事件的反应。
- en: Python has established itself as a leader in data analysis and machine learning,
    as it's able to process large datasets quickly.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python已经确立了自己作为数据分析和机器学习领域的领导者，因为它能够快速处理大型数据集。
- en: For web work, the technologies may be interchangeable, but a complex architecture
    may involve both (and more!).
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Web工作，这些技术可能是可以互换的，但是复杂的架构可能会涉及两者（甚至更多）。
- en: In the next chapter, we'll begin working with Express, a foundational web server
    for Node.js. We'll create our own websites and work with them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用Express，这是Node.js的基础Web服务器。我们将创建自己的网站并与它们一起工作。
- en: Further reading
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here''s a little more reading on some of these topics:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关于这些主题的更多阅读：
- en: stateofjs: [https://2019.stateofjs.com/](https://2019.stateofjs.com/)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: stateofjs：[https://2019.stateofjs.com/](https://2019.stateofjs.com/)
- en: NodeJs versus Python: [https://www.similartech.com/compare/nodejs-vs-python](https://www.similartech.com/compare/nodejs-vs-python)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js与Python：[https://www.similartech.com/compare/nodejs-vs-python](https://www.similartech.com/compare/nodejs-vs-python)
- en: Pattern — microservice architecture: [https://microservices.io/patterns/microservices.html](https://microservices.io/patterns/microservices.html)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pattern — 微服务架构：[https://microservices.io/patterns/microservices.html](https://microservices.io/patterns/microservices.html)
- en: Amazon API Gateway: [https://aws.amazon.com/api-gateway/](https://aws.amazon.com/api-gateway/)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon API Gateway：[https://aws.amazon.com/api-gateway/](https://aws.amazon.com/api-gateway/)
- en: Electron: [https://electronjs.org/](https://electronjs.org/)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Electron：[https://electronjs.org/](https://electronjs.org/)
- en: Y2K bug: [https://www.britannica.com/technology/Y2K-bug](https://www.britannica.com/technology/Y2K-bug)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y2K bug：[https://www.britannica.com/technology/Y2K-bug](https://www.britannica.com/technology/Y2K-bug)
- en: Node.js multithreading: [https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/](https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js多线程：[https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/](https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/)
