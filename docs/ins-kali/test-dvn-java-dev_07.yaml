- en: TDD and Functional Programming – A Perfect Match
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD和函数式编程-完美匹配
- en: '"Any sufficiently advanced technology is indistinguishable from magic."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “任何足够先进的技术都是不可区分的魔术。”
- en: – Arthur C. Clarke
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: -阿瑟·C·克拉克
- en: 'All of the code examples that we have seen so far in this book follow a particular
    programming paradigm: **object-oriented programming** (**OOP**). This paradigm
    has monopolized the software industry for a long time and the majority of software
    companies have adopted OOP as the standard way of programming.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在本书中看到的所有代码示例都遂循了一种特定的编程范式：**面向对象编程**（**OOP**）。这种范式已经垄断了软件行业很长时间，大多数软件公司都采用了OOP作为标准的编程方式。
- en: 'However the fact that OOP has become the most used paradigm does not mean it
    is the only one that exists. In fact, there are more that are worth mentioning,
    but this chapter is going to focus only on one of them: functional programming.
    Additionally, this book''s language is Java, so all code snippets and examples
    will be based on the functional API that were included in version 8 of Java.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，OOP成为最常用的范式并不意味着它是唯一存在的范式。事实上，还有其他值得一提的范式，但本章将只关注其中之一：函数式编程。此外，本书的语言是Java，因此所有的代码片段和示例都将基于Java
    8版本中包含的函数式API。
- en: 'Topics covered in this chapter include:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括：
- en: Optional class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Optional类
- en: Functions revisited
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的再思考
- en: Streams
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流
- en: Applying TDD to functional programming
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将TDD应用于函数式编程
- en: Setting up the environment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: In order to explore some of the goodies of Java Functional Programming in a
    test-driven fashion, we are going to set up a Java project with JUnit and AssertJ
    frameworks. The last one includes quite a few convenient methods for `Optional`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以测试驱动的方式探索Java函数式编程的一些好处，我们将使用JUnit和AssertJ框架设置一个Java项目。后者包含了一些方便的`Optional`方法。
- en: 'Let''s start a new Gradle project. This is how `build.gradle` looks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始一个新的Gradle项目。这就是`build.gradle`的样子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the following sections, we are going to explore some of the utilities and
    classes included in Java 8 that enhance the experience of programming. Most of
    them are not only for functional programming and can be used even in imperative-style
    programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探索Java 8中包含的一些增强编程体验的实用程序和类。它们大多不仅适用于函数式编程，甚至可以在命令式编程中使用。
- en: Optional – dealing with uncertainty
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Optional - 处理不确定性
- en: Since it was created, `null` has been used and misused by developers innumerable
    times in innumerable programs. One of the common cases for `null` is, among others,
    to represent the absence of a value. That is not convenient at all; it could either
    represent the absence of a value or the abnormal execution of a piece of code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自从创建以来，`null`已经被开发人员无数次在无数个程序中使用和滥用。`null`的常见情况之一是代表值的缺失。这一点一点也不方便；它既可以代表值的缺失，也可以代表代码片段的异常执行。
- en: 'Moreover, in order to access variables that can potentially be `null`*,* and
    mitigate undesired runtime exceptions like `NullPointerException`, developers
    tend to wrap variables with an `if` statement so those variables are accessed
    in safe mode. Although it works, this protection against nulls adds some boilerplate
    that has nothing to do with the functionality or the goal of the code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了访问可能为`null`的变量，并减少不希望的运行时异常，比如`NullPointerException`，开发人员倾向于用`if`语句包装变量，以便以安全模式访问这些变量。虽然这样做是有效的，但对空值的保护增加了一些与代码的功能或目标无关的样板代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding code overcomes the problems that the creator of `null` spotted
    in his famous quote during a conference in 2009:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码克服了`null`的创造者在2009年的一次会议上所发现的问题：
- en: '"I call it my billion-dollar mistake. It was the invention of the null reference
    in 1965\. At that time, I was designing the first comprehensive type system for
    references in an object oriented language (ALGOL W). My goal was to ensure that
    all use of references should be absolutely safe, with checking performed automatically
    by the compiler. But I couldn''t resist the temptation to put in a null reference,
    simply because it was so easy to implement. This has led to innumerable errors,
    vulnerabilities, and system crashes, which have probably caused a billion dollars
    of pain and damage in the last forty years."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “我称它为我的十亿美元的错误。这是在1965年发明了空引用。那时，我正在设计第一个综合的面向对象语言（ALGOL W）的引用类型系统。我的目标是确保所有引用的使用都是绝对安全的，由编译器自动执行检查。但我无法抵制放入一个空引用的诱惑，因为它太容易实现了。这导致了无数的错误、漏洞和系统崩溃，这可能在过去四十年中造成了十亿美元的痛苦和损害。”
- en: – Tony Hoare
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: -托尼·霍尔
- en: With the release of Java 8, the utility class called `Optional` was included
    as an alternative to the preceding code block. Among other benefits, it brings
    compilation checks and zero boilerplate code. Let's see `Optional` in action with
    a simple example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Java 8的发布，实用类`Optional`作为替代前面的代码块被包含了进来。除了其他好处，它还带来了编译检查和零样板代码。让我们通过一个简单的例子来看`Optional`的实际应用。
- en: Example of Optional
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Optional的示例
- en: As a demonstration of `Optional`, we are going to create an in-memory student
    repository. This repository has a method to find students by their `name`, which,
    for convenience, will be considered the ID. The value returned by the method is
    `Optional<Student>`***;*** this means that the response might or might not contain
    a `Student`. This pattern is basically one of the common scenarios for `Optional`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`Optional`的演示，我们将创建一个内存中的学生存储库。这个存储库有一个按`name`查找学生的方法，为了方便起见，将被视为ID。该方法返回的值是`Optional<Student>`；这意味着响应可能包含也可能不包含`Student`。这种模式基本上是`Optional`的常见情况之一。
- en: At this point, the reader should be familiar with the TDD process. For the sake
    of brevity the complete Red-Green-Refactor process is skipped. Tests are going
    to be presented along with the implementation in a convenient order, which could
    not coincide with the order in a TDD iteration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，读者应该熟悉TDD过程。为了简洁起见，完整的红-绿-重构过程被省略了。测试将与实现一起按照方便的顺序呈现，这可能与TDD迭代的顺序不一致。
- en: 'First of all, we need a `Student` classto represent students within our system.
    To keep it simple, our implementation is going to be very basic, with only two
    parameters: the student''s `name` and `age`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个`Student`类来表示我们系统中的学生。为了简单起见，我们的实现将非常基本，只有两个参数：学生的`name`和`age`：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next test class verifies two scenarios: a successful lookup and an unsuccessful
    one. Note that AssertJ has some useful and meaningful assertion methods for `Optional`.
    That makes testing really fluent and readable:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个测试类验证了两种情况：成功的查找和失败的查找。请注意，AssertJ对`Optional`有一些有用且有意义的断言方法。这使得测试非常流畅和可读：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In cases where verifying the existence of a student with that `name` is not
    enough, we can perform some assertions on the returned object. In the majority
    of scenarios, this is the way to go:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，仅验证具有该`name`的学生的存在是不够的，我们可以对返回的对象执行一些断言。在大多数情况下，这是正确的做法：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, it''s time to focus on the `StudentRepository` class, which contains only
    one constructor and the method to perform student lookups. As shown in the following
    code, the lookup method `findByName` returns an `Optional` holding a `Student`.
    Note that this is a valid yet not functional implementation used as a starting
    point:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候专注于`StudentRepository`类了，它只包含一个构造函数和执行学生查找的方法。如下所示，查找方法`findByName`返回一个包含`Student`的`Optional`。请注意，这是一个有效但不是功能性的实现，只是作为一个起点使用：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we run the tests against the preceding implementation we get one successful
    test, because the lookup method is returning by default an `Optional.empty()`.
    The other test throws an error, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对前面的实现运行测试，我们会得到一个成功的测试，因为查找方法默认返回`Optional.empty()`。另一个测试会抛出一个错误，如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For the sake of completeness, this is one of the possible implementations:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，这是一个可能的实现之一：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the next section, we will see a different point of view on functions*.* In
    Java 8, some additional capabilities have been added to functions if they are
    used in a particular way. We are going to explore a few of them with some examples.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到对*函数*的不同观点。在Java 8中，如果以特定方式使用函数，它们将增加一些额外的功能。我们将通过一些示例来探索其中的一些功能。
- en: Functions revisited
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视函数
- en: Unlike object-oriented programs, those written in a functional way don't hold
    any mutable state. Instead, code is made up with functions that take arguments
    and return values. Because there is no internal state nor side-effects involved
    that can alter the execution, all functions are deterministic. This is a really
    good feature because it implies that different executions of the same function,
    with the same parameters, would produce the same outcome.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与面向对象的程序不同，以函数式方式编写的程序不持有任何可变状态。相反，代码由接受参数并返回值的函数组成。因为没有涉及可以改变执行的内部状态或副作用，所有函数都是确定性的。这是一个非常好的特性，因为它意味着对于相同参数的同一函数的不同执行将产生相同的结果。
- en: 'The following snippet illustrates a function that does not mutate any internal
    state:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段说明了一个不会改变任何内部状态的函数：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the same function written using Java''s functional API:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Java的函数式API编写的相同函数：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first example should be completely familiar to any Java developer; it follows
    the common syntax of a function that takes two integers as arguments and returns
    the sum of them. The second example, however, differs a bit from the traditional
    code we are used to. In this new version, the function is an object that counts
    as a value, and it can be assigned to a field. This is quite convenient in some
    scenarios because it can still be used as a function in some cases and in some
    others it can also be used as a return value, as an argument in a function or
    a field within a class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子对于任何Java开发人员来说应该是非常熟悉的；它遵循了以两个整数作为参数并返回它们的和的常见语法。然而，第二个例子与我们习惯的传统代码有些不同。在这个新版本中，函数是一个作为值的对象，并且可以分配给一个字段。在某些情况下，这是非常方便的，因为它仍然可以在某些情况下用作函数，在其他情况下也可以用作返回值，在函数中作为参数或在类中作为字段。
- en: 'One can argue that the first version of the function is more appropriated since
    it is shorter and does not require creating a new object. Well, it''s true, but
    the fact that functions can also be objects enhances them with a bunch of new
    capabilities. Regarding code verbosity, it can be considerably reduced to a single
    line by using a lambda expression:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会认为第一个版本的函数更合适，因为它更短，不需要创建一个新对象。嗯，这是真的，但函数也可以是对象，增强了它们的一系列新功能。就代码冗长而言，可以通过使用lambda表达式将其大大减少到一行：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the next section, a possible solution to **Reverse Polish Notation** (**RPN**) kata
    is presented. We are going to use the power and expressiveness of functional programming,
    particularly the lambda notation, which becomes really handy when functions are
    required as arguments of some functions. Using lambdas makes our code very concise
    and elegant, increasing the readability.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，将介绍**逆波兰表示法**（**RPN**）的一个可能解决方案。我们将使用函数式编程的强大和表现力，特别是lambda表示法，在需要函数作为某些函数的参数时变得非常方便。使用lambda使我们的代码非常简洁和优雅，提高了可读性。
- en: Kata – Reverse Polish Notation
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kata - 逆波兰表示法
- en: RPN is a notation used for representing mathematical expressions. It differs
    from the traditional and widely used infix notation in the order of operators
    and operands.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: RPN是用于表示数学表达式的一种表示法。它在运算符和操作数的顺序上与传统和广泛使用的中缀表示法不同。
- en: In infix notation the operator is placed between the operands, whereas in RPN,
    operands are placed first and the operator is located at the end.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在中缀表示法中，运算符放置在操作数之间，而在RPN中，操作数首先放置，运算符位于末尾。
- en: 'This is an expression written using infix notation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用中缀表示法编写的表达式：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The same expression written using RPN:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用RPN编写的相同表达式：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Requirements
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: 'We are going to obviate how the expressions are read so that we can focus on
    solving the problem. Furthermore, we are going to work only with positive integers
    to simplify the problem, although it shouldn''t be very difficult to accept floats
    or doubles as well. In order to solve this kata, we are asked to fulfill only
    the following two requirements:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将忽略如何读取表达式，以便我们可以专注于解决问题。此外，我们将仅使用正整数来简化问题，尽管接受浮点数或双精度数也不应该很困难。为了解决这个kata，我们只需要满足以下两个要求：
- en: On invalid input (not a RPN), an error message should be thrown
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于无效输入（不是RPN），应抛出错误消息
- en: It gets an arithmetic expression written using RPN and computes the result
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它接收使用RPN编写的算术表达式并计算结果
- en: 'The following code snippet is a small scaffold for us to start our project
    upon:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是我们开始项目的一个小脚手架：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With the preceding code fragment as the starting point, we are going to proceed,
    breaking down the requirements into smaller specifications that can be tackled
    one by one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以前面的代码片段作为起点，我们将继续进行，将要求分解为更小的规范，可以逐个解决。
- en: Requirement – handling invalid input
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求 - 处理无效输入
- en: Provided that our implementation is basically doing nothing, we are going to
    focus only on one thing—reading single operands. If the input is a single number
    (no operators) then it's a valid reverse notation and the value of the number
    is returned. Anything other than that is considered not a valid RPN for now.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们的实现基本上什么都没做，我们将只专注于一件事 - 读取单个操作数。如果输入是单个数字（没有运算符），那么它是有效的逆波兰表示法，并返回数字的值。除此以外的任何内容目前都被视为无效的RPN。
- en: 'This requirement is translated into these four tests:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个要求被转化为这四个测试：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our `compute` method is now required to throw an `IllegalArgumentException`
    when an invalid input is provided. In any other case it returns the number as
    an integer value. This can be achieved with the following lines of code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供无效输入时，我们现在要求我们的`compute`方法抛出`IllegalArgumentException`。在任何其他情况下，它将作为整数值返回数字。可以通过以下代码行实现：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This requirement has been fulfilled. The other requirement is a bit more complex,
    so we are going to divide it into two—single operations, which means only one
    operation, and complex operations, which involve more than one operation of any
    kind.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个要求已经实现。另一个要求更复杂一些，所以我们将其分为两个部分 - 单一操作，意味着只有一个操作，和复杂操作，涉及任何类型的多个操作。
- en: Requirement – single operations
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求 - 单一操作
- en: So, the plan is to support add, subtract, multiply and divide operations. As
    explained in the kata presentation, in RPN the operator is located at the end
    of the expression.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，计划是支持加法、减法、乘法和除法操作。如在kata演示中所解释的，在RPN中，运算符位于表达式的末尾。
- en: 'That means *a - b* is represented as *a b -*,and the same applies to the other
    operators: addition *+*,  multiplication* **, and division */*.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着*a - b*表示为*a b -*，其他运算符也是如此：加法*+*，乘法*，和除法*/*。
- en: 'Let''s add one of each of the supported operations to our tests:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在测试中添加每个支持的操作中的一个：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This also includes the necessary changes to make them pass successfully. The
    behavior is basically placing the operator between the expressions and performing
    the operation in case an expression is given as input. If there is only one element
    in the `expression`, then the former rules apply:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这还包括必要的更改，使它们成功通过。行为基本上是将运算符放在表达式之间，并在输入表达式时执行操作。如果`expression`中只有一个元素，则适用前面的规则：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`parseInt` is a `private` method that parses the input and either returns the
    integer value or throws an exception:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`parseInt`是一个`private`方法，用于解析输入并返回整数值或抛出异常：'
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The next requirement is where the magic happens. We are going to support more
    than one operation within the `expression`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个要求是魔术发生的地方。我们将支持`expression`中的多个操作。
- en: Requirement – complex operations
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求 - 复杂操作
- en: 'Complex operations are difficult to address, because mixing operations makes
    it really difficult for the non-trained human eye to understand in which order
    the operations should take place. Also, different evaluation orders usually lead
    to different results. To solve that, the computation of reverse polish expressions
    is backed up by the implementation of a queue. These are some tests for our next
    functionality:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的操作很难处理，因为混合操作使得非受过训练的人眼难以理解操作应该以何种顺序进行。此外，不同的评估顺序通常会导致不同的结果。为了解决这个问题，逆波兰表达式的计算由队列的实现支持。以下是我们下一个功能的一些测试：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The computation should pile up the numbers or operands in the expression sequentially,
    from left to right, in a queue or stack in Java. If at any point an operator is
    found then the pile replaces the two elements on top with the result of applying
    that operator to those values. For better comprehension, the logic is going to
    be separated in to different functions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 计算应该按顺序将表达式中的数字或操作数堆叠在Java中的队列或堆栈中。如果在任何时候找到运算符，则堆栈将用应用该运算符于这些值的结果替换顶部的两个元素。为了更好地理解，逻辑将被分成不同的函数。
- en: 'First of all, we are going to define a function that takes a stack and an operation
    and applies the function to the first two items on the top. Note that the second
    operand is retrieved in the first instance due to the implementation of stack:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一个函数，该函数接受一个堆栈和一个操作，并将该函数应用于顶部的前两个项目。请注意，由于堆栈的实现，第一次检索第二个操作数：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The next step is to create all the functions that our program must handle.
    For each operator a function is defined as an object. This has some advantages,
    such as better isolation for testing. In this case it might not make sense to
    test functions separately because they are trivial, but there are some other scenarios
    where testing the logic of these functions in isolation can be very useful:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建程序必须处理的所有函数。对于每个运算符，都定义了一个函数作为对象。这有一些优势，比如更好的隔离测试。在这种情况下，单独测试函数可能没有意义，因为它们是微不足道的，但在一些其他场景中，单独测试这些函数的逻辑可能非常有用：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And now, putting all the pieces together. Depending on the operator we find,
    the proper operation is applied:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将所有部分放在一起。根据我们找到的运算符，应用适当的操作：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The code is readable and very easy to understand. Moreover, this design allows
    the extending of the functionality by adding support to other different operations
    with ease.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可读性很强，非常容易理解。此外，这种设计允许通过轻松添加对其他不同操作的支持来扩展功能。
- en: It can be a good exercise for readers to add a modulus (*%*) operation to the
    provided solution.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于读者来说，将模数（*％*）操作添加到提供的解决方案可能是一个很好的练习。
- en: Another good example where lambdas fit perfectly is Streams API, since most
    functions have a self-explanatory name like `filter`, `map` or `reduce`, among
    others. Let's explore this more deeply in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很好的例子是lambda完全适合的Streams API，因为大多数函数都有一个名副其实的名称，如`filter`、`map`或`reduce`等。让我们在下一节更深入地探讨这一点。
- en: Streams
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流
- en: One of the top utilities included in Java 8 are Streams. In this chapter we
    are going to use lambdas in combination with Streams in small code fragments,
    and create a test to verify them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8中包含的顶级实用程序之一是Streams。在本章中，我们将在小的代码片段中使用lambda与Streams结合，并创建一个测试来验证它们。
- en: To better understand what Streams are, what to do, and what not to do with them,
    it is highly recommended to read Oracle's Stream pages. A good starting point
    is [https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Streams是什么，该做什么，以及不该做什么，强烈建议阅读Oracle的Stream页面。一个很好的起点是[https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)。
- en: 'To cut a long story short, Streams provide a bunch of facilities to deal with
    long computations that can be executed either in parallel or sequential order.
    Parallel programming is out of the scope of this book, so the next examples will
    be sequential only. Furthermore, in order to keep the chapter concise we are going
    to focus on:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，流提供了一堆设施来处理可以以并行或顺序顺序执行的长计算。并行编程超出了本书的范围，因此下一个示例将仅顺序执行。此外，为了保持本章简洁，我们将专注于：
- en: '`filter`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter`'
- en: '`map`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`映射`'
- en: '`flatMap`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flatMap`'
- en: '`reduce`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce`'
- en: filter
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: 'Let''s start with the `filter` operation. Filters is a function with a self-explanatory
    name; it filters in/out elements in the stream depending on whether the value
    satisfies a condition, as shown in the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`filter`操作开始。Filters是一个名副其实的函数；它根据值是否满足条件来过滤流中的元素，如下例所示：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'One possibility for computing the list of `filteredNames` is the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`filteredNames`列表的一种可能性如下：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: That one is the easiest. In a few words, `filter` filters the input and returns
    a value without all the elements filtered out. Using lambdas makes the code elegant
    and really easy to read.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 那个是最简单的。简而言之，`filter`过滤输入并返回一个值，而不是过滤掉所有的元素。使用lambda使得代码优雅且易于阅读。
- en: map
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: 'The `map` function transforms all the elements in the stream into another.
    The resultant object can share the type with the input, but it''s also possible
    to return an object of a different type:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`map`函数将流中的所有元素转换为另一个。结果对象可以与输入共享类型，但也可以返回不同类型的对象：'
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The list `namesUppercase` should be computed as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`namesUppercase`列表应按以下方式计算：'
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note how the `toUpperCase` method is called. It belongs to the Java class `String`
    and can be used in that scenario only by referencing the function and the class
    that function belongs to. In Java, this is called **method reference**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`toUpperCase`方法的调用。它属于Java类`String`，只能通过引用函数和函数所属的类在该场景中使用。在Java中，这称为**方法引用**。
- en: flatMap
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: flatMap
- en: 'The `flatMap` function is very similar to the `map` function, but it is used
    when the operation might return more than one value and we want to keep a stream
    of single elements. In the case of `map`, a stream of collections would be returned
    instead. Let''s see `flatMap` in use:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatMap`函数与`map`函数非常相似，但当操作可能返回多个值并且我们想保持单个元素流时使用它。在`map`的情况下，将返回一个集合流。让我们看看`flatMap`的使用：'
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'One possible solution could be:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的解决方案可能是：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This time we have used `Stream.of()`, a convenient method for creating Streams.
    Another really nice feature is the method `distinct()`, which returns a collection
    of unique elements, comparing them using the method `equals()`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们使用了`Stream.of()`，这是一个创建流的便捷方法。另一个非常好的特性是`distinct()`方法，它使用`equals()`方法比较它们并返回唯一元素的集合。
- en: reduce
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少
- en: 'In the previous example, the function returns the list of letters used in all
    the names passed as input. But if we are only interested in the number of different
    letters, there''s an easier way to proceed. `reduce` basically applies a function
    to all elements and combines them into one single result. Let''s see an example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，函数返回作为输入传递的所有名称中使用的字母列表。但是，如果我们只对不同字母的数量感兴趣，有一种更简单的方法。`reduce`基本上将函数应用于所有元素并将它们组合成一个单一的结果。让我们看一个例子：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This solution is very similar to the one we used for the previous exercise:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案与我们用于上一个练习的解决方案非常相似：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Even though the preceding code snippet solves the problem, there is a much
    nicer way to do it:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的代码片段解决了问题，但有一种更好的方法来做到这一点：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The function `count()` is another built-in tool that Streams includes. It's
    a particular shortcut for a `reduction` function that counts the number of elements
    the stream contains.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`函数是Streams包含的另一个内置工具。它是一个特殊的快捷方式，用于计算流中包含的元素数量的`reduction`函数。'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Functional programming is an old concept that is gaining popularity, because
    it's easier to use when trying to increase performance by executing tasks in parallel.
    In this chapter some concepts from the functional world were presented along with
    some of the test tools that AssertJ provides.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程是一个古老的概念，因为它更容易在尝试通过并行执行任务来提高性能时使用而变得流行。在本章中，一些来自函数式世界的概念以及AssertJ提供的一些测试工具被介绍了。
- en: Testing functions without side effects is very easy because the test scope is
    reduced. Instead of testing changes that the function might cause on different
    objects, the only thing that needs to be verified is the outcome of the invocation.
    No side-effects means that the outcome of the function is the same as long as
    the parameters are the same. Therefore, the execution is repeatable as many times
    as needed and leads to the same result on every execution. Additionally, tests
    are easier to read and comprehend.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 测试没有副作用的函数非常容易，因为测试范围被缩小了。不需要测试函数可能对不同对象造成的更改，唯一需要验证的是调用的结果。没有副作用意味着只要参数相同，函数的结果就是相同的。因此，执行可以重复多次，并且在每次执行时都会得到相同的结果。此外，测试更容易阅读和理解。
- en: To conclude, Java includes a good API for functional programming if you need
    to use this paradigm within your projects. But there are some languages, some
    of them purely functional, that offer more powerful features with better syntax
    and less boilerplate. You should evaluate whether using one of those other languages
    might make sense if your project or approach can be purely functional.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，如果您需要在项目中使用这种范式，Java包含了一个很好的函数式编程API。但是有一些语言，其中一些是纯函数式的，提供了更强大的功能，更好的语法和更少的样板代码。如果您的项目或方法可以是纯函数式的，您应该评估是否使用其中一种其他语言是合理的。
- en: All of the examples presented in this chapter can be found at [https://bitbucket.org/alexgarcia/tdd-java-funcprog.git](https://bitbucket.org/alexgarcia/tdd-java-funcprog.git).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中介绍的所有示例都可以在[https://bitbucket.org/alexgarcia/tdd-java-funcprog.git](https://bitbucket.org/alexgarcia/tdd-java-funcprog.git)找到。
- en: Now it is time to take a look at legacy code and how to adapt it and make it
    more TDD friendly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一看遗留代码以及如何对其进行调整，使其更符合TDD的要求。
