- en: Chapter 8. Speeding Up NumPy with Cython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章：使用 Cython 加速 NumPy
- en: Python combined with the NumPy library provides the user with a tool to write
    highly complex functions and analysis. As the size and complexity of code grow,
    the number of inefficiencies in the code base starts to creep in. Once the project
    is in its completion stages, developers should start focusing on the performance
    of the code and analyze the bottlenecks. Python provides many tools and libraries
    to create optimized and faster-performing code.
  prefs: []
  type: TYPE_NORMAL
  zh: Python 与 NumPy 库相结合为用户提供了编写高度复杂的函数和分析的工具。 随着代码的大小和复杂性的增长，代码库中的低效率问题开始蔓延。一旦项目进入完成阶段，开发人员就应开始关注代码的性能并分析瓶颈。
    Python 提供了许多工具和库来创建优化且性能更快的代码。
- en: In this chapter, we will be looking at one such tool called Cython. Cython is
    a static compiler for Python and the language "Cython," which is particularly
    popular among developers working on scientific libraries/numerical computing.
    Many famous analytics libraries written in Python make intensive use of Cython
    (pandas, SciPy, scikit-learn, and so on).
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究一种名为 Cython 的工具。 Cython 是 Python 和“Cython”语言的静态编译器，在从事科学库/数值计算的开发人员中特别流行。
    许多用 Python 编写的著名分析库都大量使用 Cython（Pandas，SciPy，scikit-learn 等）。
- en: The Cython programming language is a superset of Python and the user still enjoys
    all the functionalities and higher level constructs provided by Python the language.
    In this chapter, we will look into a number of reasons why Cython works and you
    will learn how to convert Python code to Cython. This chapter is not a complete
    guide to Cython, however.
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 编程语言是 Python 的超集，用户仍然喜欢 Python 所提供的所有功能和更高层次的结构。 在本章中，我们将研究 Cython 起作用的许多原因，并且您将学习如何将
    Python 代码转换为 Cython。 但是，本章不是 Cython 的完整指南。
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Installing Cython on our computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的计算机上安装 Cython
- en: Rewriting a small amount of Python code to the Cython version and analyzing
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将少量 Python 代码重写为 Cython 版本并进行分析
- en: Learning to use NumPy with Cython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习在 Cython 中使用 NumPy
- en: The first step toward optimizing code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化代码的第一步
- en: 'The questions that every developer should have in mind while optimizing their
    code are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发人员在优化其代码时应注意的问题如下：
- en: What number of function calls is your code making?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码执行多少个函数调用？
- en: Are there redundant calls?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多余的调用吗？
- en: How much memory is the code using?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该代码使用了多少内存？
- en: Are there memory leaks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在内存泄漏？
- en: Where are the bottlenecks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瓶颈在哪里？
- en: The first four questions are mostly answered by profiler tools. You are advised
    to learn at least about one profiling tool. Profiling tools will not be covered
    in this chapter. In most cases, it is suggested to first try to optimize function
    calls and memory usage before diving into lower-level approaches such as Cython
    or assembly languages (in C-derived languages).
  prefs: []
  type: TYPE_NORMAL
  zh: 前四个问题主要由分析器工具回答。 建议您至少学习一种分析工具。 分析工具将不在本章中介绍。 在大多数情况下，建议先尝试优化函数调用和内存使用，然后再使用低级方法，例如
    Cython 或汇编语言（使用 C 衍生语言）。
- en: Once the bottlenecks have been identified and all the issues with algorithms
    and logic have been tackled, a Python developer can dive into the world of Cython
    to get extra speed out of your application.
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了瓶颈，并且解决了算法和逻辑的所有问题，Python 开发人员便可以进入 Cython 的世界，以提高应用的速度。
- en: Setting up Cython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Cython
- en: Cython is a compiler that converts Python code with the type definition to C
    code, which still runs in the Python environment. The final output is native machine
    code, which runs much faster than the bytecode produced by Python. The magnitude
    of speed-up for Python code is more evident in code that heavily uses loops. In
    order to compile C code, the first prerequisite is to have a C/C++ compiler such
    as `gcc` (Linux) or `mingw` (Windows) installed on the computer.
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 是一个将类型定义的 Python 代码转换为 C 代码的编译器，该代码仍在 Python 环境中运行。 最终输出是本机代码，其运行速度比
    Python 生成的字节码快得多。 在大量使用循环的代码中，Python 代码加速的幅度更加明显。 为了编译 C 代码，首要条件是在计算机上安装 C/C++
    编译器，例如`gcc`（Linux）或`mingw`（Windows）。
- en: 'The second step is to install Cython. Cython comes just like any other library
    with a Python module and you can install it using any of your preferred methods
    (pip, easy_install, and so on). Once these two steps are done, you can test your
    setup by just trying to call Cython from the shell. If you get an error message,
    then you have missed the second step and you need to reinstall Cython or download
    the TAR archive from the Cython official website ([http://cython.org/#download](http://cython.org/#download)
    ), then run the following command from the `root` folder of this download:'
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是安装 Cython。 Cython 与其他带有 Python 模块的库一样，可以使用任何首选的方法（PIP，EasyInstall 等）进行安装。
    完成这两个步骤后，您可以通过尝试从外壳调用 Cython 来测试设置。 如果收到错误消息，则说明您错过了第二步，需要重新安装 Cython 或从
    Cython 官方网站（[`cython.org/#download`](http://cython.org/#download)）下载 TAR 归档文件，然后从这次下载的`root`文件夹中运行以下命令：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you have everything done properly, you can proceed to write your first
    program in Cython.
  prefs: []
  type: TYPE_NORMAL
  zh: 正确完成所有操作后，您可以继续使用 Cython 编写第一个程序。
- en: Hello world in Cython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cython 中的 HelloWorld
- en: 'Cython programs look quite similar to Python ones, mostly with added type information.
    Let''s have a look at a simple program that computes the *n* ^(th) Fibonacci number
    given `n` :'
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 程序看起来与 Python 程序非常相似，但大多带有附加的类型信息。 让我们看一个简单的程序，该程序计算给定`n`的第`n`个斐波那契数：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's study this program to understand what is going on under the hood when
    you call this function with some numeric output; let's say `compute_fibonacchi(3)`
    .
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一下该程序，以了解在调用带有某些数字输出的函数时幕后的情况。 假设`compute_fibonacchi(3)`。
- en: As we know, Python is an interpreted and dynamic language, which means you do
    not need to declare variables before using them. This means that, at the start
    of a function call, the Python interpreter is agnostic about the type of value
    that `n` will hold. When you call the function with some integral value, Python
    does the type inference automatically for you by a procedure called  **boxing**
    and  **unboxing** .
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，Python 是一种解释性和动态语言，这意味着您无需在使用变量之前声明变量。 这意味着在函数调用开始时，Python 解释器无法确定`n`将保留的值的类型。
    当您使用某个整数值调用函数时，Python 会通过名为**装箱**和**拆箱**的过程自动为您进行类型推断。
- en: 'In Python, everything is an object. So when you type, say, `1` or `hello` ,
    the Python interpreter will internally convert it into objects. This process is
    also referred to as boxing in a lot of online material. The process could be visualized
    as:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，一切都是对象。 因此，当您输入`1`或`hello`时，Python 解释器将在内部将其转换为对象。 在许多在线材料中，此过程也称为拳击。
    该过程可以可视化为：
- en: '![Hello world in Cython](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![Cython 中的 HelloWorld](img/00034.jpeg)'
- en: 'So what happens when you apply functions to objects? The Python interpreter
    has to do some extra work to infer the type and apply the functions. In a general
    sense, the following diagram explains the application of the add function in Python.
    Python being an interpreted language, it does not do a great job in optimizing
    the function calls, but they can be optimized quite nicely with C or Cython:'
  prefs: []
  type: TYPE_NORMAL
  zh: 那么当您将函数应用于对象时会发生什么呢？ Python 解释器必须做一些额外的工作来推断类型并应用函数。 在一般意义上，下图说明了`add`函数在 Python
    中的应用。 Python 是一种解释型语言，它在优化函数调用方面做得并不出色，但是可以使用 C 或 Cython 很好地优化它们：
- en: '![Hello world in Cython](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![Cython 中的 HelloWorld](img/00035.jpeg)'
- en: This boxing and unboxing does not come free and takes valuable computing time.
    The effect becomes more significant when such an operation is performed multiple
    times in loops.
  prefs: []
  type: TYPE_NORMAL
  zh: 这种装箱和拆箱不是免费的，需要花费宝贵的计算时间。 当这样的操作被循环执行多次时，效果变得更加显着。
- en: 'The following program takes around 1.8 micro seconds per loop on my IPython
    notebook when run for *n = 20* :'
  prefs: []
  type: TYPE_NORMAL
  zh: 在`n = 20`上运行时，以下程序在 IPython 笔记本上每个循环大约需要 1.8 微秒：
- en: '![Hello world in Cython](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![Cython 中的 HelloWorld](img/00036.jpeg)'
- en: 'Now let''s rewrite this program into Cython:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将该程序重写为 Cython：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This program takes `64.5` nanoseconds per loop:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序每个循环花费`64.5`纳秒：
- en: '![Hello world in Cython](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![Cython 中的 HelloWorld](img/00037.jpeg)'
- en: Tip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示
- en: Although the speed boost is quite significant in this example code, this is
    not real-world code that you will encounter, so you should always remember to
    first run a profiler on the code and identify the sections that require optimization.
    Also while using Cython, the developer should consider the tradeoff between using
    static types and flexibility. Using types can cut down flexibility and sometimes
    readability.
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在此示例代码中提高速度非常重要，但这不是您将遇到的实际代码，因此您应始终记住首先在代码上运行分析器并确定需要优化的部分。 同样，在使用 Cython
    时，开发人员应考虑在使用静态类型和灵活性之间进行权衡。 使用类型会降低灵活性，有时甚至会降低可读性。
- en: This code could be further improved by removing `xrange` and using a `for` loop
    instead. Once you are satisfied that all the components/functions of the module
    are properly working and bug-free, the user can store these functions/procedures
    in a file with a `.pyx` extension. This is the extension used by Cython. The next
    step towards integrating this code with your application is to add the information
    in your setup file.
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除`xrange`并改用`for`循环，可以进一步改进此代码。 当您对模块的所有组件/功能都满意并且没有错误后，用户可以将这些函数/过程存储在扩展名为`.pyx`的文件中。
    这是 Cython 使用的扩展名。 将此代码与您的应用集成的下一步是在安装文件中添加信息。
- en: 'Here, for illustration purposes, we have stored the code in a file called `fib.pyx`
    and created a setup file that builds this module:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，出于说明目的，我们将代码存储在名为`fib.pyx`的文件中，并创建了一个构建该模块的安装文件：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, note that the name of the extension `first` exactly matches the name
    of the module. If you fail to maintain the same name, then you will get a cryptic
    error:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请注意扩展名`first` 的名称与模块的名称完全匹配。 如果您无法保持相同的名称，则将收到一个神秘的错误：
- en: '![Hello world in Cython](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![Cython 中的 HelloWorld](img/00038.jpeg)'
- en: Multithreaded code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多线程代码
- en: 'Chances are that your application may be using multithreaded code. Python is
    not considered suitable for multithreaded code because of the **Global Interpreter
    Lock** ( **GIL** ). The good news is that, in Cython, you can explicitly unlock
    the GIL and make your code truly multithreaded. This is done by simply putting
    a statement `with nogil:` in your code. You can later acquire the GIL using `with
    gil` in your code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用可能会使用多线程代码。 由于**全局解释器锁**（**GIL**），Python 不适合多线程代码。 好消息是，在 Cython 中，您可以显式解锁
    GIL，并使您的代码真正成为多线程。 只需在您的代码中放置一个`with nogil:`语句即可。 您以后可以在代码中使用`with gil`获取 GIL：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: NumPy and Cython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy 和 Cython
- en: 'Cython has built-in support to provide faster access to NumPy arrays. These
    facilities make Cython an ideal candidate to optimize NumPy code. For this section,
    we will study code that calculates the price of the European option, a financial
    instrument using the Monte-Carlo technique. Knowledge of finance is not expected;
    however, we assume you have a basic understanding of Monte-Carlo simulations:'
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 具有内置支持，可提供对 NumPy 数组的更快访问。 这些功能使 Cython 成为优化 NumPy 代码的理想人选。 在本节中，我们将研究用于计算欧式期权价格的代码，欧式期权是一种使用蒙特卡洛技术的金融工具。
    不期望有金融知识； 但是，我们假设您对蒙特卡洛模拟有基本的了解：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the Cythonized code for the preceding example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面示例的 Cython 化代码：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the setup file for this looks like:'
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相关的安装文件如下所示：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: While the speed-up gained from Cythonizing the code is great and you may be
    tempted to write most of the code in Cython, it is recommended to convert only
    the performance-critical parts to Cython. NumPy has done a great job in optimizing
    access to arrays and performing faster calculations. This code can be taken as
    an ideal candidate for depicting the same. The preceding code has a lot of "loose
    ends" and can be treated as an exercise for you to fix performance issues in Python
    and using NumPy optimally first before going the Cython way. The speed enhancement
    from blindly Cythonizing the NumPy code might not be as huge as that for an optimally
    written code with genuine problems due to the dynamic nature of Python.
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过 Cython 代码获得的加速效果非常好，并且您可能会倾向于在 Cython 中编写大多数代码，但建议仅将性能至关重要的部分转换为 Cython。
    NumPy 在优化对数组的访问和执行更快的计算方面做得非常出色。 该代码可以视为描述该代码的理想候选者。 前面的代码有很多“松散的结果”，可以当作练习来解决
    Python 中的性能问题，并在采用 Cython 方式之前先最佳地使用 NumPy。 由于 Python 的动态特性，盲目地对 NumPy 代码进行 Cython
    化的速度提升可能不如具有真正问题的最优编写代码那样快。
- en: 'To conclude, we present the following that you should follow while developing
    modules in Cython:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍在 Cython 中开发模块时应遵循的以下内容：
- en: Write code in pure Python and test it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用纯 Python 编写代码并进行测试。
- en: Run profilers and identify key areas to focus on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行分析器并确定要关注的关键区域。
- en: Create a new module to hold Cython code (`<module_name>.pyx` ).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新模块以保存 Cython 代码（`<module_name>.pyx`）。
- en: Convert all variables and loop indices in these areas to their C counterparts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些区域中的所有变量和循环索引转换为它们的 C 对应物。
- en: Test using your previous test setups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以前的测试设置进行测试。
- en: Add the extensions into setup files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将扩展添加到安装文件中。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how to covert Python code into Cython. We also looked
    into some example Python code that involved NumPy arrays. We briefly explained
    the concept of boxing and unboxing in the Python language and how they affect
    the performance of code. We also explained how you can explicitly unlock the notorious
    GIL. To dig further deep in the Cython world, we recommend *Learning Cython Programming*
    ,  *Philip Herron* ,  *Packt Publishing* . In the next chapter, you will learn
    about the NumPy C API and how to use it.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何将 Python 代码隐蔽到 Cython 中。 我们还研究了一些涉及 NumPy 数组的示例 Python 代码。 我们简要介绍了
    Python 语言中装箱和拆箱的概念以及它们如何影响代码性能。 我们还说明了如何显式解锁臭名昭著的 GIL。 为了进一步深入研究 Cython，我们建议《Cython
    编程学习手册》，*Philip Herron*，*Packt Publishing*。 在下一章中，您将了解 NumPy C API 以及如何使用它。
