- en: Chapter 9. Monitoring, Management, and Scaling Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。监视、管理和扩展
- en: 'In the previous chapter, we covered one of the most important aspects—testing.
    We will end our discussion on Spring Integration by covering the following topics
    in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们涵盖了最重要的一个方面——测试。我们将通过在本章中涵盖以下主题来结束我们对Spring集成的讨论：
- en: Monitoring and management
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视和管理
- en: Scaling up
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展
- en: As we have witnessed across the chapters, enterprise systems are disparate,
    disconnected, and prone to failure. One important aspect of enabling communication
    across them is the ability to monitor what went wrong, which of the components
    are overloaded, and what have been the vital stats of communication—this all will
    help in improving the reliability and efficiency of the systems. The Spring framework
    provides decent support for monitoring and management, let's discuss how it can
    be leveraged.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在章节中所见，企业系统是分散的，断开的，并且容易出现故障。跨它们进行通信的一个重要方面是监视出了什么问题，哪些组件超载，以及通信的关键统计数据是什么——这将有助于提高系统的可靠性和效率。Spring框架为监视和管理提供了良好的支持，让我们讨论如何利用它。
- en: Monitoring and management
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视和管理
- en: There are multiple ways of monitoring and managing operations; for example,
    the most common way is to use Java's JMX support, another option is to invoke
    commands remotely, or monitor and log events as they occur—let's cover the most
    commonly used method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种监视和管理操作的方法；例如，最常用的方法是使用Java的JMX支持，另一个选项是远程调用命令，或者在事件发生时监视和记录事件——让我们来介绍最常用的方法。
- en: JMX support
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JMX支持
- en: '**JMX,** which is short for **Java Management Extensions**, does not need an
    introduction—it''s a standard way for remote monitoring of applications. Any application
    can provide implementation of MBeans and then they can be queried to get exposed
    management information. Spring Integration provides a standard component, which
    can be used to monitor channels, adapters, and other available components. Standard
    JMX can be extended to get more specific information.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**JMX**，即**Java管理扩展**，无需介绍——这是一种远程监视应用程序的标准方式。任何应用程序都可以提供MBeans的实现，然后可以查询它们以获取公开的管理信息。Spring集成提供了一个标准组件，可以用于监视通道、适配器和其他可用组件。标准JMX可以扩展以获取更具体的信息。'
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Before we can use JMX support from Spring Integration, we need to add namespace
    declarations and maven dependencies:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以从Spring集成中使用JMX支持之前，我们需要添加命名空间声明和Maven依赖：
- en: '**NameSpace support**: This can be added using the following code snippet:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间支持**：可以使用以下代码片段添加：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Maven dependency**: This can be added using the following code snippet:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven依赖**：可以使用以下代码片段添加：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Initializing the server**: Traditionally, in Java/Spring applications, we
    need to write code to start the platform MBean server, and export our MBeans,
    but Spring provides tags to achieve the same tasks. To create and start an MBean
    server, just use the following line of code:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化服务器**：传统上，在Java/Spring应用程序中，我们需要编写代码来启动平台MBean服务器，并导出我们的MBeans，但Spring提供了标签来实现相同的任务。要创建和启动MBean服务器，只需使用以下代码行：'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For exporting the defined MBeans, the following line of code is sufficient:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要导出定义的MBean，以下代码行就足够了：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Management annotations**: The Spring framework exposes some annotation, which
    can be used to mark components that will be managed or will help in management
    and monitoring. For example, `@ManagedResource` indicates a class participating
    in management and monitoring, while `@ManagedAttribute` and `@ManagedOperation`
    indicate a member level participation, respectively, for class attribute and operation.
    Enabling `<context:mbean-export/>` will scan and expose these beans and management
    nodes. Let''s write a sample MBean and export it, we will use this for our examples:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理注释**：Spring框架公开了一些注释，可以用来标记将被管理或将帮助管理和监控的组件。例如，`@ManagedResource`表示参与管理和监控的类，而`@ManagedAttribute`和`@ManagedOperation`分别表示成员级参与，用于类属性和操作。启用`<context:mbean-export/>`将扫描和公开这些bean和管理节点。让我们编写一个示例MBean并导出它，我们将在示例中使用它：'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Due to the annotations used, this class will be exported as MBean. Additionally,
    this class implements `NotificationPublisherAware`, which can be used to send
    notifications. We will see its usage in the next example.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了注释，这个类将被导出为MBean。此外，这个类实现了`NotificationPublisherAware`，可以用来发送通知。我们将在下一个示例中看到它的用法。
- en: '**JConsole**: To connect and monitor JMX beans, the easiest way is to use `Jconsole`.
    It comes bundled with JDK—look for it at `JDK_INSTALLATION_PATH/bin/Jconsole.exe`.
    By default, JConsole will select a random port, but to have explicit control over
    the ports of JMX, start the spring integration application with the following
    parameters:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JConsole**：要连接和监视JMX bean，最简单的方法是使用`Jconsole`。它与JDK捆绑在一起——在`JDK_INSTALLATION_PATH/bin/Jconsole.exe`中查找它。默认情况下，JConsole将选择一个随机端口，但要对JMX端口有明确的控制，启动spring集成应用程序时使用以下参数：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The notification listening channel adapter
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通知监听通道适配器
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s look at the components used:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下使用的组件：
- en: '`int-jmx:notification-listening-channel-adapter`: This is the namespace support
    for the notification listening channel adapter'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int-jmx:notification-listening-channel-adapter`：这是通知监听通道适配器的命名空间支持'
- en: '`channel`: This is the channel on which the received notification will be put
    as a message'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`channel`：这是接收通知的通道，通知将作为消息放入其中'
- en: '`object-name`: This is the name of the MBean, which publishes notifications
    for this adapter'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object-name`：这是MBean的名称，它为此适配器发布通知'
- en: 'To test this adapter, follow these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此适配器，请按照以下步骤进行：
- en: 'Load the configuration context:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载配置上下文：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Start `Jconsole` and connect to `FeedsExample`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Jconsole`并连接到`FeedsExample`。
- en: '`Jconsole` will list the methods and attributes exposed by `TestMBean`.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Jconsole`将列出`TestMBean`公开的方法和属性。'
- en: Invoke add operation, which results in `Testbean` sending a notification.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用添加操作，导致`Testbean`发送通知。
- en: The payload will be put on the `listenForNotification` channel.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有效负载将放在`listenForNotification`通道上。
- en: 'Let''s write a small class that can trigger the preceding code snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个可以触发上述代码片段的小类：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The class of the preceding code snippet is pretty simple; it loads the context,
    gets the reference of a channel, uses the Spring Integration support class `MessageBuilder`
    to build a payload, and then drops it on the channel. As soon as a message is
    put on to this channel, an event will be generated and sent across to subscribers.
    A wait has been introduced to allow some time for `Jconsole` to connect.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的类非常简单；它加载上下文，获取通道的引用，使用Spring Integration支持类`MessageBuilder`构建有效负载，然后将其放在通道上。一旦消息放到这个通道上，就会生成事件并发送给订阅者。引入了等待时间，以便让`Jconsole`连接一段时间。
- en: The attribute polling channel adapter
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性轮询通道适配器
- en: 'As the name suggests, it polls for an attribute that is managed by MBean. The
    attribute name that needs to be polled and the object name of MBean that encapsulates
    the attribute are required. The following code is a quick sample configuration
    of the attribute polling channel adapter:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，它轮询由MBean管理的属性。需要轮询的属性名称和封装属性的MBean的对象名称是必需的。以下代码是属性轮询通道适配器的快速示例配置：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding configuration polls the `ManagedData` attribute of `TestMbean`.
    If the attribute value changes, the changed value is put on the channel. We can
    have a simple service, given in the following line of code, activate it for testing:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置轮询`TestMbean`的`ManagedData`属性。如果属性值发生更改，更改的值将放在通道上。我们可以有一个简单的服务，如下一行代码中所示，激活它进行测试：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The tree polling channel adapter
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树轮询通道适配器
- en: 'The tree polling channel adapter queries the JMX tree itself and sends a payload,
    which is the graph of the MBean object. The graph can be further refined using
    a query—let''s write the following sample configuration:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 树轮询通道适配器查询JMX树本身并发送有效负载，即MBean对象的图形。可以使用查询进一步细化图形-让我们编写以下示例配置：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use the following code snippet to trigger the preceeding adapter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码片段来触发上述适配器：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The operation invoking outbound gateway
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用出站网关的操作
- en: 'As usual, `Gateway` is used to make a response available for further processing—in
    this case, after invoking the operation, a response will be put back on `replychannel`
    for further processing, as done in the following lines of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，`Gateway`用于使响应可用于进一步处理-在这种情况下，在调用操作后，响应将被放回`replychannel`以供进一步处理，就像以下代码行中所做的那样：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A simple service activator can be plugged in to validate the reslts returned
    by the gateway.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以插入一个简单的服务激活器来验证网关返回的结果。
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The MBean exporter
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MBean导出器
- en: 'What about the standard spring integration components: `MessageChannels`, gateways,
    and others? Well, they can be exposed for monitoring with the following single
    line of configuration:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么标准的Spring Integration组件：`MessageChannels`、网关等呢？嗯，它们可以通过以下单行配置进行监视：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s quickly look at the elements used:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下使用的元素：
- en: '`default-domain`: This is optional and if left blank, `org.springframework.integration`
    will be used as the default domain'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default-domain`：这是可选的，如果留空，将使用`org.springframework.integration`作为默认域'
- en: '`server`: This is the reference of `mbeanServer` created using `<context:mbean-server/>`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`：这是使用`<context:mbean-server/>`创建的`mbeanServer`的引用'
- en: 'Before closing the discussion on JMX, let''s look at a snapshot of JConsole.
    Here is the screenshot of the custom MBeans and listeners, which we have exposed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束JMX讨论之前，让我们看一下JConsole的快照。这是我们暴露的自定义MBeans和监听器的屏幕截图：
- en: '![The MBean exporter](img/00015.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: ！[MBean导出器]（img/00015.jpeg）
- en: 'A screenshot showing all the components of Spring Integration, which we have
    defined in our application, is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 显示我们在应用程序中定义的Spring Integration所有组件的屏幕截图如下：
- en: '![The MBean exporter](img/00016.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: ！[MBean导出器]（img/00016.jpeg）
- en: 'We can observe two aspects:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察两个方面：
- en: The Spring Integration package that lists all spring integration components
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有Spring Integration组件的Spring Integration包
- en: The feeds example that exposes user-defined MBeans
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露用户定义的MBeans的feeds示例
- en: Properties and values of these adapters are pretty self-explanatory, I will
    leave it to you to explore these further.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些适配器的属性和值非常容易理解，我将让您进一步探索这些。
- en: Tracking the message
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪消息
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once this is added, all the components through which this message passes (provided
    that the components have an `id` tag) have an audit message appended. Let''s take
    the following example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，通过该消息传递的所有组件（前提是组件有一个`id`标签）都将附加审计消息。让我们看下面的例子：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this code sample, we have declared `<int:message-history/>` at the start.
    Also, notice that the next two components `notifListener` and `publishListener`
    have an ID tag. With this configuration in place, a metadata will be added to
    the message the moment it passes through these components.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码示例中，我们在开头声明了`<int:message-history/>`。还要注意，接下来的两个组件`notifListener`和`publishListener`都有一个ID标签。配置完成后，消息通过这些组件时将添加元数据。
- en: Wire tap
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线路监听
- en: 'This is extremely simple—it''s an interceptor that can be configured with any
    channel and it will "peek" into all messages going through the channel. This can
    be used for the purposes of debugging, logging critical information, and so on.
    Let''s add an interceptor to the channel that is listening for the monitoring
    events:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常简单-它是一个拦截器，可以配置任何通道，并且将“窥视”所有通过通道传递的消息。这可用于调试、记录关键信息等目的。让我们向正在监听监控事件的通道添加一个拦截器：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After adding these configurations, all the messages passing through this channel
    will be logged.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些配置后，通过此通道传递的所有消息都将被记录。
- en: Control bus
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制总线
- en: 'We have elements in spring integration that are being used for application
    level messaging. How about using the same system to trigger some action? The idea
    behind control bus is exactly the same—we can define the channel and then, based
    on the payload on that channel, it can invoke management operations. Let''s look
    at an example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在spring integration中使用了用于应用程序级消息传递的元素。那么如何使用相同的系统来触发一些操作？控制总线背后的想法完全相同——我们可以定义通道，然后根据该通道上的有效负载来调用管理操作。让我们看一个例子：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A class to send a control message to this bus is given in the following lines
    of code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 给出了一个发送控制消息到总线的类在以下代码行中：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With this, let's wrap up our discussion on management and monitoring. In the
    next section, we will pick one of the most important aspects of application design—scalability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们结束我们对管理和监控的讨论。在下一节中，我们将选择应用程序设计中最重要的一个方面——可扩展性。
- en: Scaling up
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: 'Scalability of a system is one of the most important non-functional requirements.
    As we know, there are basically two ways to scale a system: vertical scaling and
    horizontal scaling. **Vertical** **scaling** refers to adding more processing
    power to an existing system—if you are running out of memory, add memory; if CPU
    cycles are getting short, add some more cores and or make other changes. Not much
    of a challenge! On the other hand, **horizontal scaling** refers to adding more
    physical nodes, handling requests in a distributed way, adding redundancy at DB,
    and message broker components. Obviously, this needs a proper thought-through
    design. Let''s take a couple of ways that can be used to scale Spring applications.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可扩展性是最重要的非功能性要求之一。我们知道，基本上有两种扩展系统的方式：垂直扩展和水平扩展。**垂直** **扩展**是指向现有系统添加更多的处理能力——如果内存不够用，就添加内存；如果CPU周期不够，就添加一些核心或进行其他更改。并不是什么大挑战！另一方面，**水平扩展**是指添加更多的物理节点，以分布式方式处理请求，在数据库和消息代理组件中添加冗余。显然，这需要一个经过深思熟虑的设计。让我们看一下可以用来扩展Spring应用程序的几种方法。
- en: Threading
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: 'The most common way to scale a system is to introduce parallel processing.
    However, before you learn how to do this, let''s be aware of the following pitfalls:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展系统的最常见方法是引入并行处理。然而，在学习如何做到这一点之前，让我们意识到以下的陷阱：
- en: It should be evaluated whether creating a thread will help
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该评估是否创建一个线程会有所帮助
- en: Threads should be created as per machine capability
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程应根据机器的能力来创建
- en: We should consider latency across other endpoints
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该考虑其他端点的延迟
- en: Threads should be cleaned up
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程应该被清理
- en: 'So let''s start with an example. We have discussed FTP, if thousands of files
    are available and we want to process them in parallel, how can this be achieved?
    We can use `TaskExecutors`, as shown in the following example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们以一个例子开始。我们已经讨论了FTP，如果有成千上万的文件可用，并且我们想要并行处理它们，该如何实现？我们可以使用`TaskExecutors`，就像下面的例子中所示：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: So what is going on in the preceding code? First, we define a task executor—nothing
    specific to spring integration. You can see that the `org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor`
    class from the Spring framework is used. Then, we attached this with the poller
    on the service activator. Now a pool of service will be created, which will process
    files on the input channel in parallel.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在前面的代码中发生了什么？首先，我们定义了一个任务执行器——与spring integration无关。你可以看到使用了Spring框架的`org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor`类。然后，我们将其附加到服务激活器上的轮询器。现在将创建一个服务池，它将并行处理输入通道上的文件。
- en: 'As obvious as it can be, Spring Integration leverages Spring framework''s support
    for executors. The preceding code uses the bean directly, but Spring has provided
    namespace support as well:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 显而易见，Spring Integration利用了Spring框架对执行者的支持。前面的代码直接使用了bean，但Spring也提供了命名空间支持：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The underlying abstraction is `org.springframework.core.task.TaskExecutor`.
    Whenever a task needs to be executed, it is submitted to the task executor; it
    is the task executor''s job to allocate and de-allocate threads for the task.
    Let''s take the case of the poller from the preceding example, if the elements
    on the pollable channel are stateless and can be processed concurrently, we can
    use an executor there:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 底层抽象是`org.springframework.core.task.TaskExecutor`。每当需要执行任务时，它都会被提交给任务执行器；任务执行器的工作是为任务分配和释放线程。让我们以前面示例中的轮询器为例，如果轮询通道上的元素是无状态的并且可以并发处理，我们可以在那里使用执行器：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we have a task executor that maintains an underlying pool of threads, then
    we can specify the maximum threads to be maintained, keeping in view the physical
    resource limitation:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个维护线程池的任务执行器，那么我们可以指定要维护的最大线程数，考虑到物理资源的限制：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Scaling the state
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展状态
- en: Concurrency will work when there is no state; what about the use cases where
    we want to scale but at the same time managing the state is mandatory? For example,
    if the payload is too big, will we wait for all the payloads to be processed,
    holding the consumers downward? In [Chapter 7](part0061_split_000.html#page "Chapter 7. Integration
    with Spring Batch"), *Integration with Spring Batch*, we mentioned that it is
    possible to trigger the download and then wait for an event that the download
    has been completed; at that stage, the consumer will kick-in. Similarly, we have
    some approaches that we can leverage; in fact, we have already covered these in
    an earlier chapter so I will just touch upon leveraging persistent store for scaling
    state.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 并发将在没有状态时起作用；那么在我们想要扩展但同时又必须管理状态的用例中怎么办？例如，如果负载太大，我们会等待所有负载被处理，将消费者拖下水吗？在[第7章](part0061_split_000.html#page
    "第7章。与Spring Batch集成")*与Spring Batch集成*中，我们提到可以触发下载，然后等待下载完成的事件；在那个阶段，消费者将开始工作。同样，我们有一些方法可以利用；事实上，我们在早期的章节中已经涵盖了这些，所以我只是简单地提一下利用持久存储来扩展状态。
- en: Message store
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息存储
- en: As the name suggests, we can store the messages temporarily until some criteria
    is met. For example, if you remember, Aggregator is a spring integration component
    that correlates and temporarily stores the messages until the completion criteria
    is satisfied. A similar concept can be used for scaling where the task can be
    held aside and only processed when all other coordinating members are available.
    Let's take an example of feeds, some feeds may have pictures associated. The text
    part will be delivered immediately while the picture delivery may take a lot of
    time. We can configure aggregator so that it releases the messages when all of
    the parts have arrived. We already covered how to do this in [Chapter 5](part0044_split_000.html#page
    "Chapter 5. Message Flow"), *Message Flow*!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，我们可以暂时存储消息，直到满足某些条件。例如，如果您记得，聚合器是一个春季集成组件，它关联并临时存储消息，直到满足完成条件。类似的概念可以用于扩展，其中任务可以被搁置，只有在所有其他协调成员都可用时才会被处理。让我们举个例子，一些订阅可能有相关的图片。文本部分将立即传送，而图片传送可能需要很长时间。我们可以配置聚合器，以便在所有部分到达时释放消息。我们已经在[第5章](part0044_split_000.html#page
    "第5章。消息流") *消息流*中介绍了如何做到这一点！
- en: Claim check
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索赔检查
- en: The concept is very simple, instead of waiting for all the components to arrive,
    store the part at some known location and have a pointer to it. When the last
    chunk arrives, "claim" all other parts using the pointer. Obviously, this will
    apply where we can break the payloads in independent units and the system can
    be made aware of the final packet arrival. Once implemented, components down the
    processing chain will get the package only when all of their parts are available—they
    do not have to wait or be blocked for the duration of complete packet arrival.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念非常简单，不是等待所有组件到达，而是将部分存储在某个已知位置，并对其进行指针。当最后一块到达时，使用指针“索赔”所有其他部分。显然，这将适用于我们可以将有效载荷分解为独立单元并且系统可以意识到最终数据包到达的情况。一旦实施，处理链下的组件将只在所有部分都可用时才收到数据包，它们不必等待或被阻塞直到完整数据包到达。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we glanced through monitoring and management aspects of the
    spring integration framework such as how we can keep an eye on implicit and user-defined
    integration components, how we can send and receive an event and invoke an operation,
    and many other aspects. We also covered how threads can be used to scale the application
    and a couple of ways to scale the state. This brings us to the end of our theoretical
    journey. In the next chapter; we will write an end-to-end application and finish
    off our spring integration journey!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们浏览了春季集成框架的监控和管理方面，比如我们如何监视隐式和用户定义的集成组件，如何发送和接收事件并调用操作，以及许多其他方面。我们还介绍了如何使用线程来扩展应用程序以及扩展状态的几种方法。这让我们结束了我们的理论之旅。在下一章中，我们将编写一个端到端的应用程序，结束我们的春季集成之旅！
