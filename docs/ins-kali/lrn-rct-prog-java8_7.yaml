- en: Chapter 7. Testing Your RxJava Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。测试您的RxJava应用程序
- en: While writing software, especially software which will be used by a lot of users,
    we need to be sure that everything is working correctly. We can write readable,
    well-structured, and modular code, which will make it easier for changing and
    maintaining. We should write tests because, with every feature, there is the danger
    of regression. When we already have tests for the existing code, refactoring it
    won't be as hard, because the tests could be run against the new, changed code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写软件时，尤其是将被许多用户使用的软件，我们需要确保一切都正常运行。我们可以编写可读性强、结构良好、模块化的代码，这将使更改和维护变得更容易。我们应该编写测试，因为每个功能都存在回归的危险。当我们已经为现有代码编写了测试时，重构它就不会那么困难，因为测试可以针对新的、更改过的代码运行。
- en: Almost everything needs to be tested and automated. There are even ideologies
    such as **test-driven development** (**TDD**) and **behavior-driven development**
    (**BDD**). If we don't write automated tests, our ever-changing code tends to
    break over time and becomes even harder to test and maintain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎一切都需要进行测试和自动化。甚至有一些意识形态，如**测试驱动开发**（**TDD**）和**行为驱动开发**（**BDD**）。如果我们不编写自动化测试，我们不断变化的代码往往会随着时间的推移而变得更加难以测试和维护。
- en: In this chapter, we won't be talking about why we need to test our code. We'll
    accept that this is mandatory and is part of our life as programmers. We'll learn
    how to test the code written using RxJava.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们不会讨论为什么需要测试我们的代码。我们将接受这是强制性的，并且是作为程序员生活的一部分。我们将学习如何测试使用RxJava编写的代码。
- en: We will see that it is not so hard to write unit tests for it, but that there
    are some hard-to-test cases, such as *asynchronous* `Observable` instances, for
    example. We will learn about some new operators, which will help us in testing
    and a new kind of `Observable` instance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到编写它的单元测试并不那么困难，但也有一些难以测试的情况，比如*异步*`Observable`实例。我们将学习一些新的操作符，这些操作符将帮助我们进行测试，以及一种新的`Observable`实例。
- en: 'With that said, here is what we will cover in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，这一章我们将涵盖以下内容：
- en: Testing `Observable` instances via the `BlockingObservable` class and *aggregating*
    operators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`BlockingObservable`类和*聚合*操作测试`Observable`实例
- en: Using the `TestSubscriber` instance for in-depth testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`TestSubscriber`实例进行深入测试
- en: The `TestScheduler` class and testing *asynchronous* `Observable` instances
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestScheduler`类和测试*异步*`Observable`实例'
- en: Testing using simple subscription
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用简单订阅进行测试
- en: We can test what we get by simply subscribing to the *source* `Observable` instance
    and collecting all of the incoming notifications. In order to demonstrate that,
    we'll develop a `factory` method for creating a new `Observable` instance and
    will test its behavior.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单订阅*源*`Observable`实例并收集所有传入的通知来测试我们得到的内容。为了演示这一点，我们将开发一个用于创建新`Observable`实例并测试其行为的`factory`方法。
- en: The method will receive a `Comparator` instance and multiple items, and will
    return `Observable` instance, emitting these items as a sorted sequence. The items
    will be sorted according to the `Comparator` instance passed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法将接收一个`Comparator`实例和多个项目，并将返回`Observable`实例，按排序顺序发出这些项目。项目将根据传递的`Comparator`实例进行排序。
- en: 'We can develop the method using TDD. Let''s first define the test as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用TDD来开发这个方法。让我们首先定义测试如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The examples of this chapter use the **JUnit** framework for testing. You can
    find out more about this at [http://junit.org](http://junit.org).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例使用**JUnit**框架进行测试。您可以在[http://junit.org](http://junit.org)了解更多信息。
- en: The test uses two variables to store the predefined reusable state. The first
    one is the `Observable` instance we use as source—tested. In the setup `@Before`
    method, it is assigned to the result of our method `CreateObservable.sorted(Comparator,
    T...)`, which is not implemented yet. We compare a set of `String` instances and
    expect them to be received in the order they are stored in the *expected* variable—the
    second reusable field.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试使用两个变量来存储预定义的可重用状态。第一个是我们用作源的`Observable`实例—被测试的。在设置`@Before`方法中，它被分配给我们的方法`CreateObservable.sorted(Comparator,
    T...)`的结果，该方法尚未实现。我们比较一组`String`实例，并期望它们按照*预期*变量中存储的顺序接收—第二个可重用字段。
- en: The test itself is quite verbose. It uses an instance of the `TestData` class
    to store the notifications incoming from the *tested* `Observable` instances.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测试本身相当冗长。它使用`TestData`类的一个实例来存储来自*被测试*`Observable`实例的通知。
- en: If there is an `OnCompleted` notification, the `data.completed` field is set
    to `True`. We expect this to happen, and that's why we assert it at the end of
    the test method. If there is an `OnError` notification, the `data.error` field
    is set to the error. We don't expect that to happen, so we assert it to be `null`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个`OnCompleted`通知，`data.completed`字段将设置为`True`。我们期望这种情况发生，这就是为什么我们在测试方法的最后进行断言。如果有一个`OnError`通知，`data.error`字段将设置为错误。我们不希望发生这种情况，所以我们断言它为`null`。
- en: Every incoming item emitted by the `Observable` instances is added to the `data.resultList`
    field. At the end, it should be equal to the *expected* `List` variable, and we
    assert that.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由`Observable`实例发出的每个传入项目都将添加到`data.resultList`字段中。最后，它应该等于*预期*的`List`变量，我们对此进行断言。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for the preceding test can be viewed/downloaded at [https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)—this
    is the first test method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 前面测试的源代码可以在[https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)中查看/下载——这是第一个测试方法。
- en: 'However, this test fails, of course, because the `CreateObservable.sorted(Comparator,
    T...)` method is not implemented yet. Let''s implement it and run the test again:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个测试当然失败了，因为`CreateObservable.sorted(Comparator, T...)`方法还没有实现。让我们实现它并再次运行测试：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It's that simple! It just turns the passed `varargs` array into a `List` variable
    and uses its `sort()` method to sort it with the passed `Comparator` instance.
    Then, using the `Observable.from(Iterable)` method, we return the desired `Observable`
    instance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！它只是将传递的`varargs`数组转换为一个`List`变量，并使用它的`sort()`方法与传递的`Comparator`实例对其进行排序。然后，使用`Observable.from(Iterable)`方法，我们返回所需的`Observable`实例。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code for the preceding implementation can be found at: [https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/common/CreateObservable.java#L262](https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/common/CreateObservable.java#L262).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面实现的源代码可以在以下位置找到：[https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/common/CreateObservable.java#L262](https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/common/CreateObservable.java#L262)。
- en: If we run the test now, it will pass. This is good! We've got our first test!
    But writing tests similar to this requires a lot of boilerplate code. We always
    need these three state variables and we always need to assert the same things.
    And what about *asynchronous* `Observable` instances, such as the ones created
    by `interval()` and `timer()` methods?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行测试，它将通过。这很好！我们有了我们的第一个测试！但是编写类似这样的测试需要大量的样板代码。我们总是需要这三个状态变量，我们总是需要断言相同的事情。那么像`interval()`和`timer()`方法创建的*异步*`Observable`实例呢？
- en: There are some techniques for removing the boilerplate variables, and later,
    we'll look at how to test *asynchronous* behavior as well. For now, we'll introduce
    one new type of observable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技术可以去除样板变量，稍后，我们将看看如何测试*异步*行为。现在，我们将介绍一种新类型的observable。
- en: The BlockingObservable class
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BlockingObservable类
- en: Every `Observable` instance can be turned into a `BlockingObservable` instance
    with the `toBlocking()` method. The `BlockingObservable` instance has multiple
    methods that block the current thread, while everything is emitted by the *source*
    `Observable` instance until an `OnCompleted` or `OnError` notification is sent.
    If there is an `OnError` notification, an exception will be thrown (`RuntimeException`
    exceptions are thrown directly and checked exceptions are wrapped inside the `RuntimeException`
    instances).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Observable`实例都可以用`toBlocking()`方法转换为`BlockingObservable`实例。`BlockingObservable`实例有多个方法，它们会阻塞当前线程，直到*源*`Observable`实例发出`OnCompleted`或`OnError`通知。如果有`OnError`通知，将抛出异常（`RuntimeException`异常直接抛出，检查异常包装在`RuntimeException`实例中）。
- en: 'The `toBlocking()` method doesn''t block by itself, but the methods of the
    `BlockingObservable` instance it returns may block. Let''s look at some of those
    methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`toBlocking()`方法本身不会阻塞，但它返回的`BlockingObservable`实例的方法可能会阻塞。让我们看一些这些方法：'
- en: 'We can iterate over all the items in the `BlockingObservable` instance, using
    the `forEach()` method. Here is an example of using this:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`forEach()`方法迭代`BlockingObservable`实例中的所有项目。这是一个使用的例子：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is also an example of how to make *asynchronous* code behave *synchronously*.
    The `Observable` instance created by the `interval()` method will not execute
    in the background, because the `toBlocking()` method makes the current thread
    wait until it finishes. That's why we use the `take(int)` method here because,
    otherwise, the *main* thread would be blocked forever. The `forEach()` method
    will print the five items using the passed function and only after that will we
    see the `END` output. The `BlockingObservable` class has a `toIterable()` method
    too. The `Iterable` instance returned by it can be used for iterating over the
    sequence emitted by the source as well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是如何使*异步*代码表现*同步*的一个例子。`interval()`方法创建的`Observable`实例不会在后台执行，因为`toBlocking()`方法使当前线程等待直到它完成。这就是为什么我们在这里使用`take(int)`方法，否则，*主*线程将永远被*阻塞*。`forEach()`方法将使用传递的函数打印五个项目，只有在那之后我们才会看到`END`输出。`BlockingObservable`类也有一个`toIterable()`方法。它返回的`Iterable`实例也可以用于迭代源发出的序列。
- en: 'There are *blocking* methods similar to *asynchronous*, such as `first()`,
    `last()`, `firstOrDefault()`, and `lastOrDefault()` methods (we talked about them
    in [Chapter 4](ch04.html "Chapter 4. Transforming, Filtering, and Accumulating
    Your Data"), *Transforming, Filtering, and Accumulating Your Data*). All of them
    block while waiting for the required item. Let''s take a look at the following
    code snippet:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类似*异步*的*阻塞*方法，比如`first()`、`last()`、`firstOrDefault()`和`lastOrDefault()`方法（我们在[第4章](ch04.html
    "第4章。转换、过滤和累积您的数据")中讨论过它们，*转换、过滤和累积您的数据*）。它们在等待所需项目时都会阻塞。让我们看一下以下代码片段：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will print `'3'` and `'15'`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`'3'`和`'15'`。
- en: An interesting method is the `single()` method; it returns one item only when
    exactly one item is emitted by the *source* and the *source completes*. If there
    is no item emitted, or the *source* emits more than one item, a `NoSuchElementException`
    exception or an `IllegalArgumentException` exception is thrown, respectively.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有趣的方法是`single()`方法；当*源*发出一个项目并且*源*完成时，它只返回一个项目。如果没有发出项目，或者*源*发出多个项目，分别抛出`NoSuchElementException`异常或`IllegalArgumentException`异常。
- en: 'There is a `next()` method that doesn''t *block* and instead returns an `Iterable`
    instance. When an `Iterator` instance is retrieved from this `Iterable` instance,
    each of its `next()` methods will *block*, while awaiting the next incoming item.
    This can be used on infinite `Observable` instances because the *current thread*
    will *block* only while waiting for the *next* item and then it will be able to
    continue. (Note that if no one calls the `next()` method in time, source elements
    may be skipped). Here is an example of using this:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个`next()`方法，它不会*阻塞*，而是返回一个`Iterable`实例。当从这个`Iterable`实例中检索到一个`Iterator`实例时，它的每个`next()`方法都会*阻塞*，同时等待下一个传入的项目。这可以用于无限的`Observable`实例，因为*当前线程*只会在等待*下一个*项目时*阻塞*，然后它就可以继续了。（请注意，如果没有人及时调用`next()`方法，源元素可能会被跳过）。这是一个使用的例子：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The *current thread* will *block* three times for 100 milliseconds and `0`,
    `1`, and `2` will be printed after every pause. There is a similar method called
    `latest()`, which returns an `Iterable` instance. The behavior is different because
    the `Iterable` instance produced by the `latest()` method returns the very last
    items emitted by the source or waits for the next ones, if there aren't any.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*当前线程*将*阻塞*3次，每次100毫秒，然后在每次暂停后打印`0`，`1`和`2`。还有一个类似的方法叫做`latest()`，它返回一个`Iterable`实例。行为不同，因为`latest()`方法产生的`Iterable`实例返回源发出的最后一个项目，或者如果没有，则等待下一个项目。'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will print `0` and then `5` and `6`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`0`，然后`5`和`6`。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code demonstrating all the preceding operators as well as the aggregate
    ones can be viewed/downloaded at [https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/chapter07/BlockingObservablesAndOperators.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/chapter07/BlockingObservablesAndOperators.java).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 展示所有前述运算符以及聚合运算符的源代码可以在[https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/chapter07/BlockingObservablesAndOperators.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/main/java/com/packtpub/reactive/chapter07/BlockingObservablesAndOperators.java)中查看/下载。
- en: Using the `BlockingObservable` instances can help us collect our test data.
    But there is a set of `Observable` operators called **aggregate operators**, which,
    when combined with the `BlockingObservables` instances, are useful too.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`BlockingObservable`实例可以帮助我们收集我们的测试数据。但是还有一组称为**聚合运算符**的`Observable`运算符，当与`BlockingObservables`实例结合使用时也很有用。
- en: The aggregate operators and the BlockingObservable class
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合运算符和BlockingObservable类
- en: Aggregate operators produce the `Observable` instances, which emit only one
    item and complete. This item is composed or is computed using all the items emitted
    by the *source* `Observable` instance. In this section, we'll talk about only
    two of them. For more detailed information, refer to [https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators](https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合运算符产生的`Observable`实例只发出一个项目并完成。这个项目是由*source* `Observable`实例发出的所有项目组成或计算得出的。在本节中，我们只讨论其中的两个。有关更详细的信息，请参阅[https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators](https://github.com/ReactiveX/RxJava/wiki/Mathematical-and-Aggregate-Operators)。
- en: 'The first of these operators is the `count()` or `countLong()` method. It emits
    the number of the items emitted by the *source* `Observable` instance. For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 其中第一个运算符是`count()`或`countLong()`方法。它发出*source* `Observable`实例发出的项目数。例如：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will print `100`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印`100`。
- en: The other one is the `toList()` or `toSortedList()` method, which emits a `list`
    variable (that can be sorted) containing all of the items emitted by the *source*
    `Observable` instance and completes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是`toList()`或`toSortedList()`方法，它发出一个包含*source* `Observable`实例发出的所有项目的`list`变量（可以排序）并完成。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will output the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All these methods, combined with the `toBlocking()` method, work well together.
    For example, if we want to retrieve the list of all the items emitted by the *source*
    `Observable` instance, we can do it like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法，结合`toBlocking()`方法一起很好地工作。例如，如果我们想要检索由*source* `Observable`实例发出的所有项目的列表，我们可以这样做：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And we can use this collection of items however we want: for example, for testing.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需要使用这些项目的集合：例如用于测试。
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The aggregate operators include a `collect()` operator as well, which can be
    used for generating `Observable` instances and emitting arbitrary collections,
    say `Set()` operator, for example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合运算符还包括一个`collect()`运算符，它可以用于生成`Observable`实例并发出任意集合，例如`Set()`运算符。
- en: Testing with the aggregate operators and the BlockingObservable class
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用聚合运算符和BlockingObservable类进行测试
- en: 'Using the operators and methods learned in the previous two sections, we are
    able to rework the test we''ve written to look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在前两节中学到的运算符和方法，我们能够重新设计我们编写的测试，使其看起来像这样：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There is no boilerplate code here. We retrieve all the items emitted as a list
    and compare them to the expected list.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有样板代码。我们将所有发出的项目作为列表检索并将它们与预期的列表进行比较。
- en: 'Using the `BlockingObsevables` class and the aggregate operators is pretty
    useful in most cases. While testing *asynchronous* `Observable` instances, which
    emit long, slow sequences, they are not so useful though. It is not good practice
    to block the test cases for a long time: slow tests are bad tests.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，使用`BlockingObsevables`类和聚合运算符非常有用。然而，在测试*异步*`Observable`实例时，它们并不那么有用，因为它们发出长时间的慢序列。长时间阻塞测试用例不是一个好的做法：慢测试是糟糕的测试。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for the preceding test can be found at [https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)—this
    is the second test method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面测试的源代码可以在[https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)找到-这是第二个测试方法。
- en: Another case in which this method of testing is not helpful is when we want
    to inspect the `Notification` objects sent by the *source* or the subscription
    state.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个这种测试方法不太有用的情况是当我们想要检查*source*发送的`Notification`对象或订阅状态时。
- en: There is one other technique for writing tests that gives us more fine-grained
    control over the *subscription* itself, and this is via a special `Subscriber`—the
    `TestSubscriber`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种编写测试的技术，可以更精细地控制*订阅*本身，这是通过一个特殊的`Subscriber`-`TestSubscriber`。
- en: Using the TestSubscriber class for in-depth testing
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TestSubscriber类进行深入测试
- en: The `TestSubscriber` instance is a special `Subscriber` instance, which we can
    pass to the `subscribe()` method of any `Observable` instance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestSubscriber`实例是一个特殊的`Subscriber`实例，我们可以将其传递给任何`Observable`实例的`subscribe()`方法。'
- en: We can retrieve all the received items and notifications from it. We can also
    look at the last `thread` on which the notifications have been received and the
    subscription state.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从中检索所有接收到的项目和通知。我们还可以查看接收到通知的最后一个`thread`和订阅状态。
- en: 'Let''s rewrite our test using it, in order to demonstrate its capabilities
    and what it stores:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用它来重写我们的测试，以展示它的功能和存储的内容：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The test is, again, very simple. We create a `TestSubscriber` instance and
    *subscribe* to the *tested* `Observable` instance with it. And we have access
    to the whole state after the `Observable` instance is *completed*. Let''s take
    a look at the following term list:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是非常简单的。我们创建一个`TestSubscriber`实例，并使用它*订阅*了*被测试的*`Observable`实例。在`Observable`实例*完成*后，我们可以访问整个状态。让我们来看一下以下的术语列表：
- en: With the `getOnNextEvents()` method, we are able to retrieve all the items emitted
    by the `Observable` instance and compare them to the *expected* `List` variable.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getOnNextEvents()`方法，我们能够检索`Observable`实例发出的所有项目，并将它们与*expected*`List`变量进行比较。
- en: With the `getOnCompletedEvents()` method, we are able to inspect the *OnCompleted*
    notification and to check if it was sent at all. For example, the `Observable.never()`
    method doesn't send it.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getOnCompletedEvents()`方法，我们能够检查*OnCompleted*通知，并检查是否已发送。例如，`Observable.never()`方法不会发送它。
- en: With the `getOnErrorEvents()` method, we are able to inspect *OnError* notifications
    if there were any. In this case, we *assert* that there were no *errors*.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`getOnErrorEvents()`方法，我们能够检查*OnError*通知是否存在。在这种情况下，我们*assert*没有*errors*。
- en: Using the `isUnsubscribed()` method, we can *assert* that, after everything
    *completed*, our `Subscriber` instances were *unsubscribed*.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`isUnsubscribed()`方法，我们可以*assert*在一切*完成*后，我们的`Subscriber`实例已被*unsubscribed*。
- en: 'The `TestSubscriber` instance has some *assertion* methods too. So, there is
    one more way in which the test could be written:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestSubscriber`实例也有一些*assertion*方法。因此，还有一种测试的方法：'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These are almost the same *assertions*, but done with the `TestSubscriber` instance's
    own `assert*` methods.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些几乎是相同的*assertions*，但是使用`TestSubscriber`实例自己的`assert*`方法完成。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for the preceding test can be found at [https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)—these
    are the third and the fourth test methods.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前面测试的源代码可以在[https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/SortedObservableTest.java)找到-这是第三和第四个测试方法。
- en: With these techniques, we can test different behaviors and states of our `RxJava`
    logic. There is one last thing left to learn in this chapter—testing *asynchronous*
    `Observable` instances, such as the ones created by the `Observable.interval()`
    method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些技术，我们可以测试`RxJava`逻辑的不同行为和状态。在本章中还有一件事要学习-测试*异步*`Observable`实例，例如`Observable.interval()`方法创建的实例。
- en: Testing asynchronous Observable instances with the help of the TestScheduler
    class
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TestScheduler类测试异步Observable实例
- en: There is one last type of predefined `scheduler` that we didn't mention in [Chapter
    6](ch06.html "Chapter 6. Using Concurrency and Parallelism with Schedulers"),
    *Using Concurrency and Parallelism with Schedulers*. This is the `TestScheduler`
    scheduler, a `scheduler` designed to be used in unit tests. All the actions scheduled
    on it are wrapped in objects containing the time they should be executed at, and
    won't be executed before the `triggerActions()` method of the `Scheduler` instance
    is called. This method executes all of the actions that are not executed and are
    scheduled to be executed at or before the `Scheduler` instance's present time.
    This time is virtual. This means that it is set by us and we can advance to any
    moment in the future using the special methods of this `scheduler`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章 使用调度程序进行并发和并行处理")中我们没有提到的最后一种预定义的`scheduler`是`TestScheduler`调度程序，这是一个专为单元测试设计的`scheduler`。在它上面安排的所有操作都被包装在对象中，这些对象包含它们应该执行的时间，并且在调用`Scheduler`实例的`triggerActions()`方法之前不会执行。这个方法执行所有未执行并且计划在`Scheduler`实例的当前时间或之前执行的操作。这个时间是虚拟的。这意味着它是由我们设置的，我们可以使用这个`scheduler`的特殊方法提前到未来的任何时刻。
- en: In order to demonstrate it, we'll want to develop another method for creating
    a new type of `observable`. The implementation of the method itself won't be discussed
    in this chapter, but you can find it in the source code accompanying the book.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示它，我们将开发另一种创建新类型的`observable`的方法。该方法的实现本身不会在本章中讨论，但您可以在附带书籍的源代码中找到它。
- en: 'The method creates an `Observable` instance emitting items at set time intervals.
    But the intervals are not equally spaced, such as with the built-in `interval`
    method. The idea is that we can provide a list of different multiple *intervals*
    and the `Observable` instance will cycle through it infinitely. The signature
    of the method is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法创建一个在设定时间间隔发出项目的`Observable`实例。但是间隔不是均匀分布的，就像内置的`interval`方法一样。我们可以提供一个不同的多个*间隔*的列表，`Observable`实例将无限循环其中。该方法的签名如下：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Its behavior should be the same as that of the `Observable.interval` method
    if we pass a `List` variable containing only one time period value. And here is
    the test for this case:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们传递一个只包含一个时间段值的`List`变量，它的行为应该与`Observable.interval`方法相同。以下是针对这种情况的测试：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s take a look at the following explaination:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下的解释：
- en: We create the `TestScheduler` instance, using the `Schedulers.test()` method.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`Schedulers.test()`方法创建`TestScheduler`实例。
- en: Our method receives a `Scheduler` instance as its third parameter. It will *emit
    items* on it, so we pass our `TestScheduler` instance.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的方法的第三个参数是一个`Scheduler`实例。它将在其上*发出项目*，因此我们传递我们的`TestScheduler`实例。
- en: Using a `TestSubscriber` instance, we *subscribe* to the `Observable` instance.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`TestSubscriber`实例，我们*订阅*了`Observable`实例。
- en: Immediately after subscribing, we shouldn't have any notifications, so we check
    that.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 订阅后立即，我们不应该有任何通知，因此我们要检查一下。
- en: The `TestScheduler` instance has an `advanceTimeBy(long, TimeUnit)` method,
    which controls the time of its `Worker` instances, so we can use it to get 101
    milliseconds into the future. After 101 milliseconds, we expect to have received
    one item—`0`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TestScheduler`实例有一个`advanceTimeBy(long, TimeUnit)`方法，它控制其`Worker`实例的时间，因此我们可以使用它将时间推进101毫秒。101毫秒后，我们期望收到一个项目——`0`。'
- en: Using the `advanceTimeBy()` method, we advance 101 more milliseconds into the
    future, and we should have received `0` and `1`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`advanceTimeBy()`方法，我们将时间推进101毫秒，然后我们应该已经收到了`0`和`1`。
- en: The other important method of the `TestScheduler` instance is the `advanceTimeTo(long,
    TimeUnit)` method. It can be used to advance to a specific time point in the future.
    So we use it to get to the moment when exactly one second from the *subscription*
    has passed. We expect to have received ten notifications by that time.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TestScheduler`实例的另一个重要方法是`advanceTimeTo(long, TimeUnit)`方法。它可以用来推进到未来的特定时间点。因此，我们使用它来到达从*订阅*开始过去一秒的时刻。我们期望到那时已经收到了十个通知。'
- en: The `TestScheduler` instance controls the time using its `advanceTimeBy()`and
    `advanceTimeTo()` methods, so we don't need to *block* the *main* `Thread` instance
    waiting for something to happen. We can just go to the time it has already happened.
    With the `TestScheduler` instance, there is a global order of events. So, if two
    tasks are scheduled for the exact same time, they have an order in which they
    will execute and can cause problems with the test that expect a specific global
    order. If we have such an operator to test, we should avoid this by timing to
    different values—one to 100 ms and the other to 101 ms. Using this technique,
    testing *asynchronous* `Observable` instances is not such a complex task anymore.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestScheduler`实例使用其`advanceTimeBy()`和`advanceTimeTo()`方法来控制时间，因此我们不需要*阻塞**主*`Thread`实例等待某些事件发生。我们可以直接到达它已经发生的时间。使用`TestScheduler`实例，有一个全局事件顺序。因此，如果两个任务被安排在完全相同的时间，它们有一个将执行的顺序，并且可能会导致测试出现问题，因为测试期望特定的全局顺序。如果我们有这样的操作符需要测试，我们应该通过定时到不同的值来避免这种情况——一个是100毫秒，另一个是101毫秒。使用这种技术，测试*异步*`Observable`实例不再是一个复杂的任务。'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code for the preceding test can be found at: [https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/CreateObservableIntervalTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/CreateObservableIntervalTest.java).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面测试的源代码可以在以下链接找到：[https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/CreateObservableIntervalTest.java](https://github.com/meddle0x53/learning-rxjava/blob/master/src/test/java/com/packtpub/reactive/chapter07/CreateObservableIntervalTest.java)。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With this chapter, not only did we find out how to write programs using RxJava,
    but we also saw how to test any aspect of them. We've learned about a few new
    operators and the `BlockingObservables` class too.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们不仅了解了如何使用RxJava编写程序，还了解了如何测试它们的任何方面。我们还学习了一些新的操作符和`BlockingObservables`类。
- en: The RxJava library has many operators that are not mentioned in this book, but
    we've studied the more important and useful ones. You can always refer to [https://github.com/ReactiveX/RxJava/wiki](https://github.com/ReactiveX/RxJava/wiki)
    for the rest. There is also much more regarding *subscriptions*, *backpressure*,
    and the `Observable` instance *life cycle*, but with your current knowledge, it
    won't be hard to master everything in the library. Remember that this is just
    a library, a tool to write code. The logic is the important thing here. This way
    of programming is somewhat different from the procedural one, but once you get
    into it, it feels natural.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: RxJava库有许多在本书中未提及的操作符，但我们已经学习了更重要和有用的操作符。您可以随时参考[https://github.com/ReactiveX/RxJava/wiki](https://github.com/ReactiveX/RxJava/wiki)了解其余部分。关于*订阅*、*背压*和`Observable`实例的*生命周期*还有更多内容，但是凭借您目前的知识，掌握库中的一切不会很难。请记住，这只是一个库，一个编写代码的工具。逻辑才是重要的。这种编程方式与过程式编程有些不同，但一旦您掌握了它，就会觉得自然。
- en: In the next and final chapter, we will learn how to free resources allocated
    by *subscriptions*, how to prevent memory leaks, and how to create our own operators
    that can be chained in the `RxJava` logic.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何释放*订阅*分配的资源，如何防止内存泄漏，以及如何创建我们自己的操作符，这些操作符可以在`RxJava`逻辑中链接。
