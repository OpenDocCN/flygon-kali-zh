["```js\n**node webserver.js**\n\n```", "```js\nvar http = require('http'); \n\n```", "```js\nhttp.createServer(function (req, res) { \n\n```", "```js\nres.writeHead(200, {'Content-Type': 'text/plain'}); \n\n```", "```js\nres.end('Hello  from Node.js'); \n\n```", "```js\n}).listen(8056); \n\n```", "```js\nconsole.log('Server running at port 8056'); \n\n```", "```js\n{\"data\": \"Pin D6 set to 1\", \"id\": \"1\", \"name\": \"Arduino\", \"connected\": true}\n```", "```js\n**sudo apt-get install nodejs**\n\n```", "```js\n**sudo npm install arest**\n\n```", "```js\n**sudo npm install express**\n\n```", "```js\n**sudo node output control.js**\n\n```", "```js\nvar gpio = require('rpi-gpio'); \n\n```", "```js\nvar express = require('express'); \nvar app = express(); \n\n```", "```js\nvar Parser = require('body-parser'); \nvar port = 8099; \n\n```", "```js\napp.use(Parser.urlencoded({ extended: false })); \napp.use(Parser.json()); \n\n```", "```js\ngpio.setup(11,gpio.DIR_OUT); \n\n```", "```js\nfunction ledon() { \n    setTimeout(function() { \n        console.log('led1 is on'); \n        gpio.write(11, 1); \n      }, 2000); \n} \n\n```", "```js\nfunction ledoff() { \n    setTimeout(function() { \n        console.log('led1 is off'); \n        gpio.write(11, 0); \n   }, 2000); \n} \n\n```", "```js\napp.get('/ledon', function (req, res) { \n    ledon(); \n    var data ={status:\"connected\",led:\"on\"}; \n    res.json(data); \n}); \n\n```", "```js\napp.get('/ledoff', function (req, res) { \n    ledoff(); \n    var data ={status:\"connected\",led:\"off\"}; \n    res.json(data); \n}); \n\n```", "```js\napp.listen(port); \nconsole.log('Server was started on ' + port); \n\n```", "```js\nvar server = require('http'); \n\n```", "```js\nfunction loadServer(requiere,response){ \n      console.log(\"Somebody is connected\");     \n\n```", "```js\nresponse.writeHead(200,{\"Content-Type\":\"text/html\"}); \n      response.write(\"<h1>The Server works perfect</h1>\"); \n      response.end(); \n} \n\n```", "```js\nserver.createServer(loadServer).listen(8080); \n\n```", "```js\n**C:\\users\\PC>node server.js**\n\n```", "```js\nhttp://localhost:8080  \n\n```", "```js\n#define NUMBER_VARIABLES 3 \n\n```", "```js\n#include \"DHT.h\" \n\n```", "```js\n#define DHTPIN 7  \n#define DHTTYPE DHT11 \n\n```", "```js\nDHT dht(DHTPIN, DHTTYPE); \n\n```", "```js\n#include <Adafruit_CC3000.h> \n#include <SPI.h> \n#include <CC3000_MDNS.h> \n#include <aREST.h> \n\n```", "```js\nusing a breakout board \n#define ADAFRUIT_CC3000_IRQ   3 \n#define ADAFRUIT_CC3000_VBAT  5 \n#define ADAFRUIT_CC3000_CS    10 \n\n```", "```js\nAdafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS,  \nADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT); \n\n```", "```js\naREST rest = aREST(); \n\n```", "```js\n#define WLAN_SSID       \"xxxxx\" \n#define WLAN_PASS       \"xxxxx\" \n#define WLAN_SECURITY   WLAN_SEC_WPA2 \n\n```", "```js\n#define LISTEN_PORT           80 \n\n```", "```js\nAdafruit_CC3000_Server restServer(LISTEN_PORT); \n// DNS responder instance \nMDNSResponder mdns; \n\n```", "```js\nint temp; \nint hum; \nint light; \n\n```", "```js\nvoid setup(void) \n{   \n  // Start Serial \n  Serial.begin(115200);  \n  dht.begin(); \n\n```", "```js\n  rest.variable(\"light\",&light); \n  rest.variable(\"temp\",&temp); \n  rest.variable(\"hum\",&hum); \n\n```", "```js\n  rest.set_id(\"001\"); \n  rest.set_name(\"monitor\"); \n\n```", "```js\n  if (!cc3000.begin()) \n  { \n    while(1); \n  } \n  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) { \n    while(1); \n  } \n  while (!cc3000.checkDHCP()) \n  { \n    delay(100); \n  } \n\n```", "```js\n  if (!mdns.begin(\"arduino\", cc3000)) { \n    while(1);  \n  } \n\n```", "```js\n  displayConnectionDetails(); \n  restServer.begin(); \n  Serial.println(F(\"Listening for connections...\")); \n} \n\n```", "```js\nvoid loop() { \n  temp = (float)dht.readTemperature(); \n  hum = (float)dht.readHumidity(); \n\n```", "```js\n  float sensor_reading = analogRead(A0); \n  light = (int)(sensor_reading/1024*100); \n\n```", "```js\n  mdns.update(); \n\n```", "```js\nAdafruit_CC3000_ClientRef client = restServer.available(); \n  rest.handle(client); \n} \n\n```", "```js\nbool displayConnectionDetails(void) \n{ \n  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv; \n  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv)) \n  { \nSerial.println(F(\"Unable to retrieve the IP Address!\\r\\n\")); \n    return false; \n  } \n  else \n  { \n    Serial.print(F(\"\\nIP Addr: \")); cc3000.printIPdotsRev(ipAddress); \n    Serial.print(F(\"\\nNetmask: \")); cc3000.printIPdotsRev(netmask); \n    Serial.print(F(\"\\nGateway: \")); cc3000.printIPdotsRev(gateway); \n    Serial.print(F(\"\\nDHCPsrv: \")); cc3000.printIPdotsRev(dhcpserv); \n    Serial.print(F(\"\\nDNSserv: \")); cc3000.printIPdotsRev(dnsserv); \n    Serial.println(); \n    return true; \n  } \n} \n\n```", "```js\n#include <SPI.h> \n#include <Ethernet.h> \n#include <aREST.h> \n#include <avr/wdt.h> \n\n```", "```js\n#include \"DHT.h\" \n\n```", "```js\n#define DHTPIN 7  \n#define DHTTYPE DHT11 \n\n```", "```js\nDHT dht(DHTPIN, DHTTYPE); \n\n```", "```js\nbyte mac[] = { 0x90, 0xA2, 0xDA, 0x0E, 0xFE, 0x40 }; \nIPAddress ip(192,168,1,153); \nEthernetServer server(80); \n\n```", "```js\naREST rest = aREST(); \n\n```", "```js\nint temp; \nint hum; \nint light; \n\n```", "```js\nvoid setup(void) \n{   \n  // Start Serial \n  Serial.begin(115200); \n  dht.begin(); \n\n```", "```js\n  rest.variable(\"light\",&light); \n  rest.variable(\"temp\",&temp); \n  rest.variable(\"hum\",&hum); \n\n```", "```js\n  rest.set_id(\"008\"); \n  rest.set_name(\"Ethernet\"); \n\n```", "```js\nif (Ethernet.begin(mac) == 0) { \n    Serial.println(\"Failed to configure Ethernet using DHCP\"); \n    Ethernet.begin(mac, ip); \n  } \n\n```", "```js\n  server.begin(); \n  Serial.print(\"server is at \"); \n  Serial.println(Ethernet.localIP()); \n  wdt_enable(WDTO_4S); \n} \n\n```", "```js\nvoid loop() {   \n\n  temp = (float)dht.readTemperature(); \n  hum = (float)dht.readHumidity(); \n\n```", "```js\n  float sensor_reading = analogRead(A0); \n  light = (sensor_reading/1024*100); \n\n```", "```js\n  EthernetClient client = server.available(); \n  rest.handle(client); \n  wdt_reset(); \n} \n\n```", "```js\n**npm install express**\n\n```", "```js\nvar express = require('express'); \nvar app = express(); \n\n```", "```js\nvar port = 3000; \n\n```", "```js\napp.set('view engine', 'jade'); \n\n```", "```js\napp.use(express.static(__dirname + '/public')); \n\n```", "```js\nvar rest = require(\"arest\")(app); \nrest.addDevice('http','192.168.1.153'); \n\n```", "```js\napp.get('/', function(req, res){ \nres.render('interface'); \n}); \n\n```", "```js\napp.listen(port); \nconsole.log(\"Listening on port \" + port); \n\n```"]