- en: '*Chapter 6*: Securing Cluster Components'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：保护集群组件'
- en: In previous chapters, we looked at the architecture of a Kubernetes cluster.
    A Kubernetes cluster consists of master components—including `kube-apiserver`,
    `etcd`, `kube-scheduler`, CoreDNS, `kube-controller-manager`, and `cloud-controller-manager`—and
    node components, including `kubelet`, `kube-proxy`, and `container-runtime`. Master
    components are responsible for cluster management. They form the control plane
    of the cluster. Node components, on the other hand, are responsible for the functioning
    of pods and containers on the node.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看过了Kubernetes集群的架构。一个Kubernetes集群包括主要组件，包括`kube-apiserver`、`etcd`、`kube-scheduler`、CoreDNS、`kube-controller-manager`和`cloud-controller-manager`，以及节点组件，包括`kubelet`、`kube-proxy`和`container-runtime`。主要组件负责集群管理，它们构成了集群的控制平面。另一方面，节点组件负责节点上pod和容器的运行。
- en: In [*Chapter 3*](B15566_03_Final_ASB_ePub.xhtml#_idTextAnchor091), *Threat Modeling*,
    we briefly discussed that components in a Kubernetes cluster need to be configured
    to ensure the security of the cluster. A compromise of any cluster component can
    cause a data breach. Misconfiguration of environments is one of the primary reasons
    for data breaches in traditional or microservices environments. It is important
    to understand the configurations for each component and how each setting can open
    up a new attack surface. So, it's important for cluster administrators to understand
    different configurations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B15566_03_Final_ASB_ePub.xhtml#_idTextAnchor091)中，*威胁建模*，我们简要讨论了Kubernetes集群中的组件需要进行配置以确保集群的安全。任何集群组件的妥协都可能导致数据泄露。环境的错误配置是传统或微服务环境中数据泄露的主要原因之一。了解每个组件的配置以及每个设置如何打开新的攻击面是很重要的。因此，集群管理员了解不同的配置是很重要的。
- en: In this chapter, we look in detail at how to secure each component in a cluster.
    In many cases, it will not be possible to follow all security best practices,
    but it is important to highlight the risks and have a mitigation strategy in place
    if an attacker tries to exploit a vulnerable configuration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细讨论如何保护集群中的每个组件。在许多情况下，可能无法遵循所有安全最佳实践，但重要的是要强调风险，并制定一套缓解策略，以防攻击者试图利用易受攻击的配置。
- en: For each master and node component, we briefly discuss the function of components
    with a security-relevant configuration in a Kubernetes cluster and look in detail
    at each configuration. We look at the possible settings for these configurations
    and highlight the recommended practices. Finally, we introduce `kube-bench` and
    walk through how this can be used to evaluate the security posture of your cluster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个主要和节点组件，我们简要讨论了Kubernetes集群中具有安全相关配置的组件的功能，并详细查看了每个配置。我们查看了这些配置的可能设置，并强调了推荐的最佳实践。最后，我们介绍了`kube-bench`，并演示了如何使用它来评估您集群的安全姿势。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Securing kube-apiserver
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护kube-apiserver
- en: Securing kubelet
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护kubelet
- en: Securing etcd
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护etcd
- en: Securing kube-scheduler
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护kube-scheduler
- en: Securing kube-controller-manager
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护kube-controller-manager
- en: Securing CoreDNS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护CoreDNS
- en: Benchmarking a cluster's security configuration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对集群的安全配置进行基准测试
- en: Securing kube-apiserver
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护kube-apiserver
- en: '`kube-apiserver` is the gateway to your cluster. It implements a **representational
    state transfer** (**REST**) **application programming interface** (**API**) to
    authorize and validate requests for objects. It is the central gateway that communicates
    and manages other components within the Kubernetes cluster. It performs three
    main functions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-apiserver`是您集群的网关。它实现了**表述状态转移**（**REST**）**应用程序编程接口**（**API**）来授权和验证对象的请求。它是与Kubernetes集群内的其他组件进行通信和管理的中央网关。它执行三个主要功能：'
- en: '**API management**: `kube-apiserver` exposes APIs for cluster management. These
    APIs are used by developers and cluster administrators to modify the state of
    the cluster.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API管理**：`kube-apiserver`公开用于集群管理的API。开发人员和集群管理员使用这些API来修改集群的状态。'
- en: '**Request handling**: Requests for object management and cluster management
    are validated and processed.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求处理**：对于对象管理和集群管理的请求进行验证和处理。'
- en: '**Internal messaging**: The API server interacts with other components in the
    cluster to ensure the cluster functions properly.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部消息传递**：API服务器与集群中的其他组件进行交互，以确保集群正常运行。'
- en: 'A request to the API server goes through the following steps before being processed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器的请求在处理之前经过以下步骤：
- en: '**Authentication**: `kube-apiserver` first validates the origin of the request.
    `kube-apiserver` supports multiple modes of authentication including client certificates,
    bearer tokens, and **HyperText Transfer Protocol** (**HTTP**) authentication.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身份验证**：`kube-apiserver`首先验证请求的来源。`kube-apiserver`支持多种身份验证模式，包括客户端证书、持有者令牌和**超文本传输协议**（**HTTP**）身份验证。'
- en: '**Authorization**: Once the identity of origin is validated, the API server
    validates that the origin is allowed to execute the request. `kube-apiserver`,
    by default, supports **Attribute-Based Access Control** (**ABAC**), **Role-Based
    Access Control** (**RBAC**), node authorization, and Webhooks for authorization.
    RBAC is the recommended mode of authorization.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**授权**：一旦验证了请求来源的身份，API服务器会验证该来源是否被允许执行请求。`kube-apiserver`默认支持**基于属性的访问控制**（**ABAC**）、**基于角色的访问控制**（**RBAC**）、节点授权和用于授权的Webhooks。RBAC是推荐的授权模式。'
- en: '**Admission controller**: Once `kube-apiserver` authenticates and authorizes
    the request, admission controllers parse the request to check if it''s allowed
    within the cluster. If the request is rejected by any admission controller, the
    request is dropped.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准入控制器**：一旦`kube-apiserver`验证并授权请求，准入控制器会解析请求，以检查其是否在集群内允许。如果任何准入控制器拒绝请求，则该请求将被丢弃。'
- en: '`kube-apiserver` is the brain of the cluster. Compromise of the API server
    causes cluster compromise, so it''s essential that the API server is secure. Kubernetes
    provides a myriad of settings to configure the API server. Let''s look at some
    of the security-relevant configurations next.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-apiserver`是集群的大脑。API服务器的妥协会导致集群的妥协，因此确保API服务器安全至关重要。Kubernetes提供了大量设置来配置API服务器。让我们接下来看一些与安全相关的配置。'
- en: 'To secure the API server, you should do the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护API服务器，您应该执行以下操作：
- en: '**Disable anonymous authentication**: Use the `anonymous-auth=false` flag to
    set anonymous authentication to `false`. This ensures that requests rejected by
    all authentication modules are not treated as anonymous and are discarded.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用匿名身份验证**：使用`anonymous-auth=false`标志将匿名身份验证设置为`false`。这可以确保被所有身份验证模块拒绝的请求不被视为匿名并被丢弃。'
- en: '**Disable basic authentication**: Basic authentication is supported for convenience
    in `kube-apiserver` and should not be used. Basic authentication passwords persist
    indefinitely. `kube-apiserver` uses the `--basic-auth-file` argument to enable
    basic authentication. Ensure that this argument is not used.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用基本身份验证**：基本身份验证在`kube-apiserver`中为方便起见而受支持，不应使用。基本身份验证密码会持续存在。`kube-apiserver`使用`--basic-auth-file`参数来启用基本身份验证。确保不使用此参数。'
- en: '**Disable token authentication**: `--token-auth-file` enables token-based authentication
    for your cluster. Token-based authentication is not recommended. Static tokens
    persist forever and need a restart of the API server to update. Client certificates
    should be used for authentication.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用令牌认证**：`--token-auth-file`启用集群的基于令牌的认证。不建议使用基于令牌的认证。静态令牌会永久存在，并且需要重新启动API服务器才能更新。应该使用客户端证书进行认证。'
- en: '**Ensure connections with kubelet use HTTPS**: By default, `--kubelet-https`
    is set to `true`. Ensure that this argument is not set to `false` for `kube-apiserver`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保与kubelet的连接使用HTTPS**：默认情况下，`--kubelet-https`设置为`true`。确保对于`kube-apiserver`，不要将此参数设置为`false`。'
- en: '**Disable profiling**: Enabling profiling using `--profiling` exposes unnecessary
    system and program details. Unless you are experiencing performance issues, disable
    profiling by setting `--profiling=false`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用分析**：使用`--profiling`启用分析会暴露不必要的系统和程序细节。除非遇到性能问题，否则通过设置`--profiling=false`来禁用分析。'
- en: '**Disable AlwaysAdmit**: `--enable-admission-plugins` can be used to enable
    admission control plugins that are not enabled by default. `AlwaysAdmit` accepts
    the request. Ensure that the plugin is not in the `--enabled-admission-plugins`
    list.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用AlwaysAdmit**：`--enable-admission-plugins`可用于启用默认未启用的准入控制插件。`AlwaysAdmit`接受请求。确保该插件不在`--enabled-admission-plugins`列表中。'
- en: '**Use AlwaysPullImages**: The `AlwaysPullImages` admission control ensures
    that images on the nodes cannot be used without correct credentials. This prevents
    malicious pods from spinning up containers for images that already exist on the
    node.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用AlwaysPullImages**：`AlwaysPullImages`准入控制确保节点上的镜像在没有正确凭据的情况下无法使用。这可以防止恶意Pod为节点上已存在的镜像创建容器。'
- en: '**Use SecurityContextDeny**: This admission controller should be used if `PodSecurityPolicy`
    is not enabled. `SecurityContextDeny` ensures that pods cannot modify `SecurityContext`
    to escalate privileges.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用SecurityContextDeny**：如果未启用`PodSecurityPolicy`，应使用此准入控制器。`SecurityContextDeny`确保Pod无法修改`SecurityContext`以提升特权。'
- en: '**Enable auditing**: Auditing is enabled by default in `kube-apiserver`. Ensure
    that `--audit-log-path` is set to a file in a secure location. Additionally, ensure
    that the `maxage`, `maxsize`, and `maxbackup` parameters for auditing are set
    to meet compliance expectations.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用审计**：审计在`kube-apiserver`中默认启用。确保`--audit-log-path`设置为安全位置的文件。此外，确保审计的`maxage`、`maxsize`和`maxbackup`参数设置满足合规性要求。'
- en: '**Disable AlwaysAllow authorization**: Authorization mode ensures that requests
    from users with correct privileges are parsed by the API server. Do not use `AlwaysAllow`
    with `--authorization-mode`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用AlwaysAllow授权**：授权模式确保具有正确权限的用户的请求由API服务器解析。不要在`--authorization-mode`中使用`AlwaysAllow`。'
- en: '**Enable RBAC authorization**: RBAC is the recommended authorization mode for
    the API server. ABAC is difficult to use and manage. The ease of use, and easy
    updates to, RBAC roles and role bindings makes RBAC suitable for environments
    that scale often.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用RBAC授权**：RBAC是API服务器的推荐授权模式。ABAC难以使用和管理。RBAC角色和角色绑定的易用性和易于更新使其适用于经常扩展的环境。'
- en: '**Ensure requests to kubelet use valid certificates**: By default, `kube-apiserver`
    uses HTTPS for requests to `kubelet`. Enabling `--kubelet-certificate-authority`,
    `--kubelet-client-key`, and `--kubelet-client-key` ensures that the communication
    uses valid HTTPS certificates.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保对kubelet的请求使用有效证书**：默认情况下，`kube-apiserver`对`kubelet`的请求使用HTTPS。启用`--kubelet-certificate-authority`、`--kubelet-client-key`和`--kubelet-client-key`确保通信使用有效的HTTPS证书。'
- en: '**Enable service-account-lookup**: In addition to ensuring that the service
    account token is valid, `kube-apiserver` should also verify that the token is
    present in `etcd`. Ensure that `--service-account-lookup` is not set to `false`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用service-account-lookup**：除了确保服务账户令牌有效外，`kube-apiserver`还应验证令牌是否存在于`etcd`中。确保`--service-account-lookup`未设置为`false`。'
- en: '**Enable PodSecurityPolicy**: `--enable-admission-plugins` can be used to enable
    `PodSecurityPolicy`. As we have seen in [*Chapter 5*](B15566_05_Final_ASB_ePub.xhtml#_idTextAnchor144),
    *Configuring Kubernetes Security Boundaries*, `PodSecurityPolicy` is used to define
    the security-sensitive criteria for a pod. We will dive deep into creating pod
    security policies in [*Chapter 8*](B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249),
    *Securing Kubernetes Pods*.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用PodSecurityPolicy**：`--enable-admission-plugins`可用于启用`PodSecurityPolicy`。正如我们在[*第5章*]（B15566_05_Final_ASB_ePub.xhtml#_idTextAnchor144）中所看到的，*配置Kubernetes安全边界*，`PodSecurityPolicy`用于定义pod的安全敏感标准。我们将在[*第8章*]（B15566_08_Final_ASB_ePub.xhtml#_idTextAnchor249）中深入探讨创建pod安全策略。'
- en: '**Use a service account key file**: Use of `--service-account-key-file` enables
    rotation of keys for service accounts. If this is not specified, `kube-apiserver`
    uses the private key from the **Transport Layer Security** (**TLS**) certificates
    to sign the service account tokens.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用服务账户密钥文件**：使用`--service-account-key-file`可以启用对服务账户密钥的轮换。如果未指定此选项，`kube-apiserver`将使用**传输层安全性**（**TLS**）证书的私钥来签署服务账户令牌。'
- en: '**Enable authorized requests to etcd**: `--etcd-certfile` and `--etcd-keyfile`
    can be used to identify requests to `etcd`. This ensures that any unidentified
    requests can be rejected by `etcd`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用对etcd的授权请求**：`--etcd-certfile`和`--etcd-keyfile`可用于标识对`etcd`的请求。这可以确保`etcd`可以拒绝任何未经识别的请求。'
- en: '**Do not disable the ServiceAccount admission controller**: This admission
    control automates service accounts. Enabling `ServiceAccount` ensures that custom
    `ServiceAccount` with restricted permissions can be used with different Kubernetes
    objects.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要禁用ServiceAccount准入控制器**：此准入控制自动化服务账户。启用`ServiceAccount`可确保可以将具有受限权限的自定义`ServiceAccount`与不同的Kubernetes对象一起使用。'
- en: '**Do not use self-signed certificates for requests**: If HTTPS is enabled for
    `kube-apiserver`, a `--tls-cert-file` and a `--tls-private-key-file` should be
    provided to ensure that self-signed certificates are not used.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要为请求使用自签名证书**：如果为`kube-apiserver`启用了HTTPS，则应提供`--tls-cert-file`和`--tls-private-key-file`，以确保不使用自签名证书。'
- en: '**Secure connections to etcd**: Setting `--etcd-cafile` allows `kube-apiserver`
    to verify itself to `etcd` over **Secure Sockets Layer** (**SSL**) using a certificate
    file.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接到etcd的安全连接**：设置`--etcd-cafile`允许`kube-apiserver`使用证书文件通过**安全套接字层**（**SSL**）向`etcd`验证自身。'
- en: '**Use secure TLS connections**: Set `--tls-cipher-suites` to strong ciphers
    only. `--tls-min-version` is used to set the minimum-supported TLS version. TLS
    1.2 is the recommended minimum version.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的TLS连接**：将`--tls-cipher-suites`设置为仅使用强密码。`--tls-min-version`用于设置最低支持的TLS版本。TLS
    1.2是推荐的最低版本。'
- en: '**Enable advanced auditing**: Advanced auditing can be disabled by setting
    the `--feature-gates` to `AdvancedAuditing=false`. Ensure that this field is present
    and is set to `true`. Advanced auditing helps in an investigation if a breach
    happens.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用高级审计**：通过将`--feature-gates`设置为`AdvancedAuditing=false`可以禁用高级审计。确保此字段存在并设置为`true`。高级审计有助于调查是否发生违规行为。'
- en: 'On Minikube, the `kube-apiserver` configuration looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，`kube-apiserver`的配置如下：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, by default on Minikube, `kube-apiserver` does not follow all
    security best practices. For example, `PodSecurityPolicy` is not enabled by default,
    and strong cipher suites and the `tls` minimum version are not set by default.
    It's the responsibility of the cluster administrator to ensure that the API server
    is securely configured.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，默认情况下，在Minikube上，`kube-apiserver`并未遵循所有安全最佳实践。例如，默认情况下未启用`PodSecurityPolicy`，也未设置强密码套件和`tls`最低版本。集群管理员有责任确保API服务器的安全配置。
- en: Securing kubelet
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护kubelet
- en: '`kubelet` is the node agent for Kubernetes. It manages the life cycle of objects
    within the Kubernetes cluster and ensures that the objects are in a healthy state
    on the node.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubelet`是Kubernetes的节点代理。它管理Kubernetes集群中对象的生命周期，并确保节点上的对象处于健康状态。'
- en: 'To secure `kubelet`, you should do the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护`kubelet`，您应该执行以下操作：
- en: '**Disable anonymous authentication**: If anonymous authentication is enabled,
    requests that are rejected by other authentication methods are treated as anonymous.
    Ensure that `--anonymous-auth=false` is set for each instance of `kubelet`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用匿名身份验证**：如果启用了匿名身份验证，则被其他身份验证方法拒绝的请求将被视为匿名。确保为每个`kubelet`实例设置`--anonymous-auth=false`。'
- en: '**Set the authorization mode**: The authorization mode for `kubelet` is set
    using config files. A config file is specified using the `--config` parameter.
    Ensure that the authorization mode does not have `AlwaysAllow` in the list.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置授权模式**：使用配置文件设置`kubelet`的授权模式。可以使用`--config`参数指定配置文件。确保授权模式列表中没有`AlwaysAllow`。'
- en: '**Rotate kubelet certificates**: `kubelet` certificates can be rotated using
    a `RotateCertificates` configuration in the `kubelet` configuration file. This
    should be used in conjunction with `RotateKubeletServerCertificate` to auto-request
    rotation of server certificates.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮换kubelet证书**：可以使用`kubelet`配置文件中的`RotateCertificates`配置来轮换`kubelet`证书。这应与`RotateKubeletServerCertificate`一起使用，以自动请求轮换服务器证书。'
- en: '**Provide a Certificate Authority (CA) bundle**: A CA bundle is used by `kubelet`
    to verify client certificates. This can be set using the `ClientCAFile` parameter
    in the config file.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供证书颁发机构（CA）包**：`kubelet`使用CA包来验证客户端证书。可以使用配置文件中的`ClientCAFile`参数进行设置。'
- en: '**Disable the read-only port**: The read-only port is enabled for `kubelet`
    by default, and should be disabled. The read-only port is served with no authentication
    or authorization.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用只读端口**：默认情况下，`kubelet`启用了只读端口，应该禁用。只读端口没有身份验证或授权。'
- en: '**Enable the NodeRestriction admission controller**: The `NodeRestriction`
    admission controller only allows `kubelet` to modify the node and pod objects
    on the node it is bound to.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用NodeRestriction准入控制器**：`NodeRestriction`准入控制器仅允许`kubelet`修改其绑定的节点上的节点和Pod对象。'
- en: '**Restrict access to the Kubelet API**: Only the `kube-apiserver` component
    interacts with the `kubelet` API. If you try to communicate with the `kubelet`
    API on the node, it is forbidden. This is ensured by using RBAC for `kubelet`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制对Kubelet API的访问**：只有`kube-apiserver`组件与`kubelet` API交互。如果尝试在节点上与`kubelet`
    API通信，将被禁止。这是通过为`kubelet`使用RBAC来确保的。'
- en: 'On Minikube, the `kubelet` configuration looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，`kubelet`配置如下：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similar to the API server, not all secure configurations are used by default
    on a `kubelet`—for example, disabling the read-only port. Next, we talk about
    how cluster administrators can secure `etcd`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与API服务器类似，默认情况下，`kubelet`上并非所有安全配置都被使用，例如禁用只读端口。接下来，我们将讨论集群管理员如何保护`etcd`。
- en: Securing etcd
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护etcd
- en: '`etcd` is a key-value store that is used by Kubernetes for data storage. It
    stores the state, configuration, and secrets of the Kubernetes cluster. Only `kube-apiserver`
    should have access to `etcd`. Compromise of `etcd` can lead to a cluster compromise.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd`是Kubernetes用于数据存储的键值存储。它存储了Kubernetes集群的状态、配置和秘密。只有`kube-apiserver`应该可以访问`etcd`。`etcd`的泄露可能导致集群泄露。'
- en: 'To secure `etcd`, you should do the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护`etcd`，您应该执行以下操作：
- en: '**Restrict node access**: Use Linux firewalls to ensure that only nodes that
    need access to `etcd` are allowed access.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制节点访问**：使用Linux防火墙确保只允许需要访问`etcd`的节点访问。'
- en: '**Ensure the API server uses TLS**: `--cert-file` and `--key-file` ensure that
    requests to `etcd` are secure.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保API服务器使用TLS**：`--cert-file`和`--key-file`确保对`etcd`的请求是安全的。'
- en: '**Use valid certificates**: `--client-cert-auth` ensures that communication
    from clients is made using valid certificates, and setting `--auto-tls` to `false`
    ensures that self-signed certificates are not used.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用有效证书**：`--client-cert-auth`确保客户端通信使用有效证书，并将`--auto-tls`设置为`false`确保不使用自签名证书。'
- en: '**Encrypt data at rest**: `--encryption-provider-config` is passed to the API
    server to ensure that data is encrypted at rest in `etcd`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密静态数据**：将`--encryption-provider-config`传递给API服务器，以确保在`etcd`中对静态数据进行加密。'
- en: 'On Minikube, the `etcd` configuration looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，`etcd`配置如下：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`etcd` stores sensitive data of a Kubernetes cluster, such as private keys
    and secrets. Compromise of `etcd` is compromise of the `api-server` component.
    Cluster administrators should pay special attention while setting up `etcd`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`etcd`存储着Kubernetes集群的敏感数据，如私钥和秘密。`etcd`的泄露就意味着`api-server`组件的泄露。集群管理员在设置`etcd`时应特别注意。'
- en: Securing kube-scheduler
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护kube-scheduler
- en: Next, we look at `kube-scheduler`. As we have already discussed in [*Chapter
    1*](B15566_01_Final_ASB_ePub.xhtml#_idTextAnchor020), *Kubernetes Architecture*,
    `kube-scheduler` is responsible for assigning a node to a pod. Once the pod is
    assigned to a node, the `kubelet` executes the pod. `kube-scheduler` first filters
    the set of nodes on which the pod can run, then, based on the scoring of each
    node, it assigns the pod to the filtered node with the highest score. Compromise
    of the `kube-scheduler` component impacts the performance and availability of
    the pods in the cluster.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看`kube-scheduler`。正如我们在[*第1章*](B15566_01_Final_ASB_ePub.xhtml#_idTextAnchor020)中已经讨论过的，*Kubernetes架构*，`kube-scheduler`负责为pod分配节点。一旦pod分配给节点，`kubelet`就会执行该pod。`kube-scheduler`首先过滤可以运行pod的节点集，然后根据每个节点的评分，将pod分配给评分最高的过滤节点。`kube-scheduler`组件的泄露会影响集群中pod的性能和可用性。
- en: 'To secure `kube-scheduler`, you should do the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护`kube-scheduler`，您应该执行以下操作：
- en: '**Disable profiling**: Profiling of `kube-scheduler` exposes system details.
    Setting `--profiling` to `false` reduces the attack surface.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用分析**：对`kube-scheduler`的分析会暴露系统细节。将`--profiling`设置为`false`可以减少攻击面。'
- en: '**Disable external connections to kube-scheduler**: External connections should
    be disabled for `kube-scheduler`. `AllowExtTrafficLocalEndpoints` is set to `true`,
    enabling external connections to `kube-scheduler`. Ensure that this feature is
    disabled using `--feature-gates`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用kube-scheduler的外部连接**：应禁用`kube-scheduler`的外部连接。将`AllowExtTrafficLocalEndpoints`设置为`true`会启用`kube-scheduler`的外部连接。确保使用`--feature-gates`禁用此功能。'
- en: '**Enable AppArmor**: By default, `AppArmor` is enabled for `kube-scheduler`.
    Ensure that `AppArmor` is not disabled for `kube-scheduler`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用AppArmor**：默认情况下，`kube-scheduler`启用了`AppArmor`。确保不要禁用`kube-scheduler`的`AppArmor`。'
- en: 'On Minikube, the `kube-scheduler` configuration looks like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，`kube-scheduler`配置如下：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similar to `kube-apiserver`, the scheduler also does not follow all security
    best practices such as disabling profiling.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与`kube-apiserver`类似，调度程序也没有遵循所有的安全最佳实践，比如禁用分析。
- en: Securing kube-controller-manager
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护kube-controller-manager
- en: '`kube-controller-manager` manages the control loop for the cluster. It monitors
    the cluster for changes through the API server and aims to move the cluster from
    the current state to the desired state. Multiple controller managers are shipped
    by default with `kube-controller-manager`, such as a replication controller and
    a namespace controller. Compromise of `kube-controller-manager` can result in
    updates to the cluster being rejected.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`管理集群的控制循环。它通过API服务器监视集群的更改，并旨在将集群从当前状态移动到期望的状态。`kube-controller-manager`默认提供多个控制器管理器，如复制控制器和命名空间控制器。对`kube-controller-manager`的妥协可能导致对集群的更新被拒绝。'
- en: To secure `kube-controller-manager`, you should use -`-use-service-account-credentials`
    which, when used with RBAC ensures that control loops run with minimum privileges.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护`kube-controller-manager`，您应该使用`--use-service-account-credentials`，与RBAC一起使用可以确保控制循环以最低特权运行。
- en: 'On Minikube, the `kube-controller-manager` configuration looks like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，`kube-controller-manager`的配置如下：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, let's talk about securing CoreDNS.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们谈谈如何保护CoreDNS。
- en: Securing CoreDNS
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护CoreDNS
- en: '`kube-dns` was the default **Domain Name System** (**DNS**) server for a Kubernetes
    cluster. The DNS server helps internal objects such as services, pods, and containers
    locate each other. `kube-dns` is comprised of three containers, detailed as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-dns`是Kubernetes集群的默认**域名系统**（**DNS**）服务器。DNS服务器帮助内部对象（如服务、pod和容器）相互定位。`kube-dns`由三个容器组成，详细如下：'
- en: '`kube-dns`: This container uses SkyDNS to perform DNS resolution services.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-dns`：此容器使用SkyDNS执行DNS解析服务。'
- en: '`dnsmasq`: A lightweight DNS resolver. It caches responses from SkyDNS.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dnsmasq`：轻量级DNS解析器。它从SkyDNS缓存响应。'
- en: '`sidecar`: This monitors health and handles metrics reporting for DNS.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sidecar`：这个监视健康并处理DNS的度量报告。'
- en: '`kube-dns` has been superseded by CoreDNS since version 1.11 because of security
    vulnerabilities in dnsmasq and performance issues in SkyDNS. CoreDNS is a single
    container that provides all the functions of `kube-dns`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.11版本以来，`kube-dns`已被CoreDNS取代，因为dnsmasq存在安全漏洞，SkyDNS存在性能问题。CoreDNS是一个单一容器，提供了`kube-dns`的所有功能。
- en: 'To edit the configuration file for CoreDNS, you can use `kubectl`, like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑CoreDNS的配置文件，您可以使用`kubectl`，就像这样：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By default, the CoreDNS config file on Minikube looks like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Minikube上，默认的CoreDNS配置文件如下：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To secure CoreDNS, do the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要保护CoreDNS，请执行以下操作：
- en: '**Ensure that the health plugin is not disabled**: The `health` plugin monitors
    the status of CoreDNS. It is used to confirm if CoreDNS is up and running. It
    is enabled by adding `health` to the list of plugins to be enabled in `Corefile`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保健康插件未被禁用**：`health`插件监视CoreDNS的状态。它用于确认CoreDNS是否正在运行。通过在`Corefile`中添加`health`来启用它。'
- en: '**Enable istio for CoreDNS**: `istio` is a service mesh that is used by Kubernetes
    to provide service discovery, load balancing, and authentication. It is not available
    by default in Kubernetes and needs to be added as an external dependency. You
    can add `istio` to your cluster by starting the `istio` service and adding a proxy
    for the `istio` service to the config file, like this:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为CoreDNS启用istio**：`istio`是Kubernetes使用的服务网格，用于提供服务发现、负载平衡和认证。它在Kubernetes中默认不可用，需要作为外部依赖项添加。您可以通过启动`istio`服务并将`istio`服务的代理添加到配置文件中来向集群添加`istio`，就像这样：'
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have looked at different configurations of cluster components, it
    is important to realize that as the components become more sophisticated, more
    configuration parameters will be added. It's not possible for a cluster administrator
    to remember these configurations. So, next, we talk about a tool that helps cluster
    administrators monitor the security posture of cluster components.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了集群组件的不同配置，重要的是要意识到随着组件变得更加复杂，将会添加更多的配置参数。集群管理员不可能记住这些配置。因此，接下来，我们将讨论一种帮助集群管理员监视集群组件安全状况的工具。
- en: Benchmarking a cluster's security configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对集群安全配置进行基准测试
- en: The **Center for Internet Security** (**CIS**) released a benchmark of Kubernetes
    that can be used by cluster administrators to ensure that the cluster follows
    the recommended security configuration. The published Kubernetes benchmark is
    more than 200 pages.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心**（**CIS**）发布了一份Kubernetes基准，可以供集群管理员使用，以确保集群遵循推荐的安全配置。发布的Kubernetes基准超过200页。'
- en: '`kube-bench` is an automated tool written in Go and published by Aqua Security
    that runs tests documented in the CIS benchmark. The tests are written in **YAML
    Ain''t Markup Language** (**YAML**), making it easy to evolve.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-bench`是一个用Go编写并由Aqua Security发布的自动化工具，运行CIS基准中记录的测试。这些测试是用**YAML Ain''t
    Markup Language**（**YAML**）编写的，使其易于演变。'
- en: '`kube-bench` can be run on a node directly using the `kube-bench` binary, as
    follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-bench`可以直接在节点上使用`kube-bench`二进制文件运行，如下所示：'
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For clusters hosted on `gke`, `eks`, and `aks`, `kube-bench` is run as a pod.
    Once the pod finishes running, you can look at the logs to see the results, as
    illustrated in the following code block:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于托管在`gke`、`eks`和`aks`上的集群，`kube-bench`作为一个pod运行。一旦pod运行完成，您可以查看日志以查看结果，如下面的代码块所示：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is important to investigate the checks that have a `FAIL` status. You should
    aim to have zero checks that fail. If this is not possible for any reason, you
    should have a risk mitigation plan in place for the failed check.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要调查具有`FAIL`状态的检查。您应该力求没有失败的检查。如果由于任何原因这是不可能的，您应该制定一个针对失败检查的风险缓解计划。
- en: '`kube-bench` is a helpful tool for monitoring cluster components that are following
    security best practices. It is recommended to add/modify `kube-bench` rules to
    suit your environment. Most developers run `kube-bench` while starting a new cluster,
    but it''s important to run it regularly to monitor that the cluster components
    are secure.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-bench`是一个有用的工具，用于监视遵循安全最佳实践的集群组件。建议根据自己的环境添加/修改`kube-bench`规则。大多数开发人员在启动新集群时运行`kube-bench`，但定期运行它以监视集群组件是否安全很重要。'
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we looked at different security-sensitive configurations for
    each master and node component: `kube-apiserver`, `kube-scheduler`, `kube-controller-manager`,
    `kubelet`, CoreDNS, and `etcd`. We learned how each component can be secured.
    By default, components might not follow all the security best practices, so it
    is the responsibility of the cluster administrators to ensure that the components
    are secure. Finally, we looked at `kube-bench`, which can be used to understand
    the security baseline for your running cluster.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了每个主节点和节点组件的不同安全敏感配置：`kube-apiserver`、`kube-scheduler`、`kube-controller-manager`、`kubelet`、CoreDNS和`etcd`。我们了解了如何保护每个组件。默认情况下，组件可能不遵循所有安全最佳实践，因此集群管理员有责任确保组件是安全的。最后，我们看了一下`kube-bench`，它可以用来了解正在运行的集群的安全基线。
- en: It is important to understand these configurations and ensure that the components
    follow these checklists to reduce the chance of a compromise.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要了解这些配置，并确保组件遵循这些检查表，以减少受到威胁的机会。
- en: In the next chapter, we'll look at authentication and authorization mechanisms
    in Kubernetes. We briefly talked about some admission controllers in this chapter.
    We'll dive deep into different admission controllers and, finally, talk about
    how they can be leveraged to provide a finer-grained access control.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Kubernetes中的身份验证和授权机制。在本章中，我们简要讨论了一些准入控制器。我们将深入探讨不同的准入控制器，并最终讨论它们如何被利用以提供更精细的访问控制。
- en: Questions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is token-based authentication?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是基于令牌的身份验证？
- en: What is a `NodeRestriction` admission controller?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`NodeRestriction`准入控制器？
- en: How do you ensure data is encrypted at rest in `etcd`?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何确保数据在`etcd`中处于加密状态？
- en: Why did CoreDNS supersede `kube-dns`?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么CoreDNS取代了`kube-dns`？
- en: How do you use `kube-bench` on an **Elastic Kubernetes Service** (**EKS**) cluster?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在**弹性Kubernetes服务**（**EKS**）集群上使用`kube-bench`？
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下链接，了解本章涵盖的主题的更多信息：
- en: 'CIS Benchmarks: [https://www.cisecurity.org/benchmark/kubernetes/](https://www.cisecurity.org/benchmark/kubernetes/)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CIS基准：[https://www.cisecurity.org/benchmark/kubernetes/](https://www.cisecurity.org/benchmark/kubernetes/)
- en: 'GitHub (`kube-bench`): [https://github.com/aquasecurity/kube-bench](https://github.com/aquasecurity/kube-bench)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub（`kube-bench`）：[https://github.com/aquasecurity/kube-bench](https://github.com/aquasecurity/kube-bench)
