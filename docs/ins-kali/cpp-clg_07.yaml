- en: Concurrency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发
- en: Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 61\. Parallel transform algorithm
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 61\. 并行转换算法
- en: Write a general-purpose algorithm that applies a given unary function to transform
    the elements of a range in parallel. The unary operation used to transform the
    range must not invalidate range iterators or modify the elements of the range.
    The level of parallelism, that is, the number of execution threads and the way
    it is achieved, is an implementation detail.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个通用算法，以并行方式应用给定的一元函数来转换范围的元素。用于转换范围的一元操作不能使范围迭代器无效或修改范围的元素。并行性的级别，即执行线程的数量和实现方式，是一个实现细节。
- en: 62\. Parallel min and max element algorithms using threads
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 62\. 使用线程的并行最小和最大元素算法
- en: Implement general-purpose parallel algorithms that find the minimum value and, respectively,
    the maximum value in a given range. The parallelism should be implemented using
    threads, although the number of concurrent threads is an implementation detail.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实现通用并行算法，找到给定范围内的最小值和最大值。并行性应该使用线程来实现，尽管并发线程的数量是一个实现细节。
- en: 63\. Parallel min and max element algorithms using asynchronous functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 63\. 使用异步函数的并行最小和最大元素算法
- en: Implement general-purpose parallel algorithms that find the minimum value and,
    respectively, the maximum value in a given range. The parallelism should be implemented
    using asynchronous functions, although the number of concurrent functions is an
    implementation detail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 实现通用并行算法，找到给定范围内的最小值和最大值。并行性应该使用异步函数来实现，尽管并发函数的数量是一个实现细节。
- en: 64\. Parallel sort algorithm
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 64\. 并行排序算法
- en: Write a parallel version of the sort algorithm as defined for problem *53\.
    Sort Algorithm*, in [Chapter 6](980cb06d-ef7f-4c20-b4ff-7bb8bc4d401a.xhtml), *Algorithms
    and Data Structures*, which, given a pair of random access iterators to define
    its lower and upper bounds, sorts the elements of the range using the quicksort
    algorithm. The function should use the comparison operators for comparing the
    elements of the range. The level of parallelism and the way to achieve it is an
    implementation detail.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个并行版本的排序算法，如问题*53\. 排序算法*中定义的，在[第6章](980cb06d-ef7f-4c20-b4ff-7bb8bc4d401a.xhtml)
    *算法和数据结构*中，给定一对随机访问迭代器来定义其下界和上界，使用快速排序算法对范围的元素进行排序。该函数应该使用比较运算符来比较范围的元素。并行性的级别和实现方式是一个实现细节。
- en: 65\. Thread-safe logging to the console
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 65\. 线程安全的日志记录到控制台
- en: Write a class that enables components running in different threads to safely
    print log messages to the console by synchronizing access to the standard output
    stream to guarantee the integrity of the output. This logging component should
    have a method called `log()` with a string argument representing the message to
    be printed to the console.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个类，使不同线程中运行的组件可以安全地将日志消息同步打印到控制台，以保证输出的完整性。这个日志组件应该有一个名为`log()`的方法，带有一个字符串参数，表示要打印到控制台的消息。
- en: 66\. Customer service system
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 66\. 客户服务系统
- en: Write a program that simulates the way customers are served in an office. The
    office has three desks where customers can be served at the same time. Customers
    can enter the office at any time. They take a ticket with a service number from
    a ticketing machine and wait until their number is next for service at one of
    the desks. Customers are served in the order they entered the office, or more
    precisely, in the order given by their ticket. Every time a service desk finishes
    serving a customer, the next customer in order is served. The simulation should
    stop after a particular number of customers have been issued tickets and served.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个模拟客户在办公室接受服务的程序。办公室有三个服务台，客户可以同时接受服务。客户可以随时进入办公室。他们从取票机取一张带有服务号码的票，等待直到轮到他们在其中一个服务台接受服务。客户按照他们进入办公室的顺序接受服务，或者更准确地说，按照他们的票号顺序。每当一个服务台完成为一个客户提供服务时，就会为下一个按顺序的客户提供服务。模拟应在发出一定数量的票并为他们提供服务后停止。
- en: Solutions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 61\. Parallel transform algorithm
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 61\. 并行转换算法
- en: The general-purpose function `std::transform()` applies a given function to
    a range and stores the result in another (or the same) range. The requirement
    for this problem is implementing a parallel version of such a function. A general-purpose
    one would take iterators as arguments to define the first and one-past-last element
    of the range. Because the unary function is applied in the same manner to all
    the elements of the range, it is fairly simple to parallelize the operation. For
    this task, we will be using threads. Since it is not specified how many threads
    should be running at the same time, we could use `std::thread::hardware_concurrency()`.
    This function returns a hint for the number of concurrent threads supported by
    the implementation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数`std::transform()`将给定的函数应用于一个范围，并将结果存储在另一个（或相同）范围中。这个问题的要求是实现这样一个函数的并行版本。通用的函数将迭代器作为参数，定义范围的第一个和最后一个元素。因为一元函数以相同的方式应用于范围的所有元素，所以并行化操作相当简单。对于这个任务，我们将使用线程。由于没有指定同时应该运行多少个线程，我们可以使用`std::thread::hardware_concurrency()`。这个函数返回一个提示，表示实现支持的并发线程数量。
- en: A parallel version of the algorithm performs better than a sequential implementation
    only if the size of the range exceeds a particular threshold, which may vary with
    compilation options, platform, or hardware. In the following implementation that
    threshold is set to 10,000 elements. As a further exercise, you could experiment
    with various thresholds and range sizes to see how the execution time changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的并行版本只有在范围的大小超过特定阈值时才比顺序实现更好，这个阈值可能随着编译选项、平台或硬件的不同而变化。在下面的实现中，该阈值设置为10,000个元素。作为进一步的练习，您可以尝试不同的阈值和范围大小，看执行时间如何变化。
- en: 'The following function, `ptransform()`, implements the parallel transform algorithm
    as requested. It simply calls `std::transform()` if the range size does not exceed
    the defined threshold. Otherwise, it splits the range into several equal parts,
    one for each thread, and calls `std::transform()` on each thread for a particular
    subrange. In this case, the function blocks the calling thread until all the worker
    threads finish execution:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`ptransform()`函数实现了并行转换算法。如果范围大小不超过定义的阈值，它简单地调用`std::transform()`。否则，它将范围分割成几个相等的部分，每个线程一个，然后对每个子范围上的线程调用`std::transform()`。在这种情况下，该函数会阻塞调用线程，直到所有工作线程执行完成。'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The function `palter()`, shown as follows, is a helper function that applies
    `ptransform()` to an `std::vector` and returns another `std::vector` with the
    result:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`palter()`函数如下所示，是一个辅助函数，它将`ptransform()`应用于`std::vector`，并返回另一个带有结果的`std::vector`：'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The function can be used as follows (a complete example can be found in the
    source code accompanying this book):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数可以如下使用（本书附带的源代码中可以找到完整的示例）：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In C++17, a series of standard general-purpose algorithms, including `std::transform()`,
    have overloads that implement a parallel version of the algorithm that can be
    executed according to a specified execution policy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++17中，一系列标准通用算法，包括`std::transform()`，有重载版本实现了可以根据指定执行策略执行的并行算法。
- en: 62\. Parallel min and max element algorithms using threads
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 62. 使用线程的并行最小值和最大值元素算法
- en: 'This problem, and its solution, is similar in most ways to the previous one.
    What is slightly different is that the function concurrently executing on each
    thread must return a value that represents the minimum or the maximum element
    in the subrange. The `pprocess()` function template, shown as follows, is a higher-level
    function that implements the requested functionality generically, in the following
    way:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题及其解决方案在大多数方面与前一个问题类似。稍微不同的是，每个线程上并发执行的函数必须返回表示子范围中的最小值或最大值的值。`pprocess()`函数模板如下所示，以通用方式实现了所请求的功能：
- en: Its arguments are the first and one-past-last iterators to the range and a function
    object that processes the range that we will call `f`.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的参数是范围的第一个和最后一个迭代器，以及一个处理范围的函数对象，我们将其称为`f`。
- en: If the size of the range is smaller than a particular threshold, set to 10,000
    elements here, it simply executes the function object `f` received as argument.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果范围的大小小于一个特定的阈值，这里设置为10,000个元素，它简单地执行作为参数接收的函数对象`f`。
- en: Otherwise, it splits the input range into a number of subranges of equal size,
    one for each concurrent thread that could be executed. Each thread runs `f` for
    the selected subrange.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，它将输入范围分成相等大小的多个子范围，每个并发线程执行一个子范围上的`f`。
- en: 'The results of the parallel execution of `f` are collected in an `std::vector`,
    and after the execution of all threads is completed, `f` is used again to determine
    the overall result from the intermediate results:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f`的并行执行结果被收集在一个`std::vector`中，在所有线程执行完成后，再次使用`f`来确定中间结果的整体结果：'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Two functions, called `pmin()` and `pmax()`, are provided to implement the
    required general-purpose min and max parallel algorithms. These two are in turn
    calling `pprocess()`, passing for the third argument a lambda that uses either
    the `std::min_element()` or the `std::max_element()` standard algorithm:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了两个函数`pmin()`和`pmax()`，用于实现所需的通用最小值和最大值并行算法。这两个函数又调用`pprocess()`，将第三个参数传递给一个lambda，该lambda使用`std::min_element()`或`std::max_element()`标准算法：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These functions can be used as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数可以如下使用：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can take it as a further exercise to implement yet another general-purpose
    algorithm that computes the sum of all the elements of a range in parallel using
    threads.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将其作为进一步的练习来实现另一个计算范围内所有元素的并行通用算法。
- en: 63\. Parallel min and max element algorithms using asynchronous functions
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 63. 使用异步函数的并行最小值和最大值元素算法
- en: The only difference between this problem and the previous one is how the parallelism
    is achieved. For the previous problem, the use of threads was required. For this
    one, you must use asynchronous functions. A function can be executed asynchronously
    with `std::async()`. This function creates a *promise*, which is an asynchronous
    provider of the result of a function executed asynchronously. A promise has a
    shared state (which can store either the return value of a function or an exception
    that resulted from the execution of the function) and an associated *future* object
    that provides access to the shared state from a different thread. The promise-future
    pair defines a channel that enables communicating values across threads. `std::async()`
    returns the future associated with the promise it creates.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题和前一个问题唯一的区别是并行性的实现方式。对于前一个问题，需要使用线程。对于这个问题，您必须使用异步函数。可以使用`std::async()`异步执行函数。这个函数创建一个*promise*，它是一个异步提供者，提供异步执行函数的结果。promise有一个共享状态（可以存储函数的返回值或执行函数产生的异常），以及一个关联的*future*对象，它可以从不同的线程访问共享状态。promise-future对定义了一个通道，可以在线程之间传递值。`std::async()`返回与它创建的promise相关联的future。
- en: 'In the following implementation of `pprocess()`, the use of threads from the
    previous version has been replaced with calls to `std::async()`. Note that you
    must specify `std::launch::async` as the first parameter to `std::async()` to
    guarantee an asynchronous execution and not a lazy evaluation. The amount of changes
    from the previous implementation is very small and it should be easy to follow
    the code based on the description of the algorithm from the previous implementation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pprocess()`的以下实现中，使用了前一个版本的线程被替换为对`std::async()`的调用。请注意，您必须将`std::launch::async`指定为`std::async()`的第一个参数，以确保异步执行而不是惰性评估。与前一个实现相比，更改量非常小，应该很容易根据前一个实现的算法描述来跟踪代码：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code shows how this function can be used:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何使用这个函数：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can again take it as a further exercise to implement a general-purpose algorithm
    that computes the sum of all the elements of a range in parallel using asynchronous
    functions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其作为进一步的练习，使用异步函数实现一个计算范围内所有元素的总和的通用算法。
- en: 64\. Parallel sort algorithm
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 64\. 并行排序算法
- en: We saw a sequential implementation of the quicksort algorithm earlier. Quicksort
    is a divide and conquer algorithm that relies on partitioning the range to be
    sorted into two parts, one that contains only elements smaller than a selected
    element, called the pivot, and one that contains only elements greater than the
    pivot. It then proceeds to recursively apply the same algorithm on the two partitions,
    until the partitions have only one element or none. Because of the nature of the
    algorithm, quicksort can be easily parallelized to recursively apply the algorithm
    on the two partitions concurrently.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到了快速排序算法的顺序实现。快速排序是一种分而治之的算法，依赖于将要排序的范围分成两部分，一部分只包含小于所选元素（称为枢轴）的元素，另一部分只包含大于枢轴的元素。然后，它继续在两个分区上递归应用相同的算法，直到分区只有一个元素或没有元素。由于算法的性质，快速排序可以很容易地并行化，同时在两个分区上并发地应用算法。
- en: 'The `pquicksort()` function uses asynchronous functions for this purpose. However,
    parallelization is only efficient for larger ranges. There is a threshold under
    which the overhead with context switches for parallel execution is too large and
    the parallel execution time is greater than the sequential execution time. In
    the following implementation, this threshold is set to 100,000 elements, but as
    a further exercise, you could experiment with setting different values and see
    how the parallel version performs compared to the sequential one:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`pquicksort()`函数使用异步函数来实现这一目的。然而，并行化只对较大范围有效。存在一个阈值，低于该阈值时，并行执行的上下文切换开销太大，并行执行时间大于顺序执行时间。在下面的实现中，该阈值设置为100,000个元素，但是作为进一步的练习，你可以尝试设置不同的值，并查看并行版本与顺序版本的性能表现：'
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following code shows how a large vector of random integers (with values
    between 1 and 1000) can be sorted using the `pquicksort()` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何使用`pquicksort()`函数对一个大型的随机整数向量（取值在1到1000之间）进行排序：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 65\. Thread-safe logging to the console
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 65\. 线程安全的控制台日志记录
- en: Although C++ does not have the concept of a console and uses streams to perform
    input and output operations on sequential media such as files, the `std::cout`
    and `std::wcout` global objects control the output to a stream buffer associated
    with the C output stream `stdout`. These global stream objects cannot be safely
    accessed from different threads. Should you need that, you must synchronize the
    access to them. That is exactly the purpose of the requested component for this
    problem.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管C++没有控制台的概念，而是使用流来在顺序媒体（如文件）上执行输入和输出操作，但是`std::cout`和`std::wcout`全局对象控制着与C输出流`stdout`关联的流缓冲区的输出。这些全局流对象不能安全地从不同的线程访问。如果需要，必须同步对它们的访问。这正是这个问题所要求的组件的目的。
- en: 'The `logger` class, shown as follows, uses an `std::mutex` to synchronize access
    to the `std::cout` object in the `log()` method. The class is implemented as a
    thread-safe singleton. The static method `instance()` returns a reference to a
    local static object (that has storage duration). In C++11, initialization of a
    static object happens only once, even if several threads attempt to initialize
    the same static object at the same time. In such a case, concurrent threads are
    blocked until the initialization executed on the first calling thread completes.
    Therefore, there is no need for additional user-defined synchronization mechanisms:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`logger`类如下所示，使用`std::mutex`来同步`log()`方法中对`std::cout`对象的访问。该类被实现为一个线程安全的单例。静态方法`instance()`返回一个局部静态对象的引用（具有存储期）。在C++11中，静态对象的初始化只会发生一次，即使多个线程同时尝试初始化同一个静态对象。在这种情况下，并发线程会被阻塞，直到第一个调用线程上的初始化完成。因此，不需要额外的用户定义的同步机制：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding `logger` class can be used to write console message from multiple
    threads:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`logger`类可以用于从多个线程写入控制台消息：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 66\. Customer service system
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 66\. 客户服务系统
- en: 'In order to implement the simulation of the customer service office as required,
    we could use several helper classes. `ticketing_machine` is a class that models
    a very simple machine that issues incremental ticketing numbers, starting with
    an initial, user-specified seed. `customer` is a class that represents a customer
    that enters the store and receives a ticket from the ticketing machine. `operator<`
    is overloaded for this class in order to store customers in a priority queue from
    which they should be taken in the order given by their ticket number. In addition,
    the `logger` class from the previous problem is used to print messages to the
    console:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照要求实现客户服务办公室的模拟，我们可以使用几个辅助类。`ticketing_machine`是一个模拟简单机器的类，它发出递增的票号，从一个初始的、用户指定的种子开始。`customer`是一个代表进入商店并从售票机获得票号的顾客的类。为了按照他们的票号顺序将顾客存储在优先队列中，对该类进行了重载`operator<`。此外，前面问题中的`logger`类用于将消息打印到控制台：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Each desk from the office is modeled using a different thread. Customers entering
    the store and queuing after getting a ticket are modeled using a separate thread.
    In the following simulation, a new customer enters the store every 200-500 milliseconds,
    gets a ticket and is placed in a priority queue. The execution of the store thread
    finishes after 25 customers enter the store and are placed in the queue. An `std::condition_variable`
    is used to communicate between threads to notify that a new customer has been
    placed in the queue or that an existing customer has been removed from the queue
    (which happens when a customer moves to an open desk). The threads that represent
    the office desk are running until a flag indicating the office is opened is reset
    but not before all customers that are in the queue are served. In this simulation,
    each customer spends 2,000 to 3,000 milliseconds at a desk:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 办公室中的每个桌子都使用不同的线程进行建模。进入商店并在领取票据后排队的顾客使用单独的线程进行建模。在以下模拟中，每隔200-500毫秒会有一个新顾客进入商店，领取票据并被放入优先队列。商店线程的执行在25名顾客进入商店并被放入队列后结束。使用`std::condition_variable`在线程之间进行通信，以通知新顾客已被放入队列，或者现有顾客已从队列中移除（当顾客移动到开放的桌子时会发生这种情况）。代表办公室桌子的线程一直运行，直到指示办公室已开放的标志被重置，但在所有在队列中的顾客都得到服务之前不会停止。在这个模拟中，每个顾客在桌子上花费2,000到3,000毫秒。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is a snippet of the output of an execution of this problem:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是执行此问题时输出的一部分内容：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As a further exercise, you can try to change the intervals at which the customers
    enter the store, how many customers are allowed to get a ticket before the office
    closes, how long it takes to serve them, or how many desks are opened in the office.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为进一步的练习，您可以尝试更改顾客进入商店的间隔时间，办公室关闭前允许领取票据的顾客数量，为他们提供服务的时间，或者办公室开放的桌子数量。
