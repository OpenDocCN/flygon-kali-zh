["```java\nint a = 4;\nint b = 5;\nint c = a + b;\nSystem.out.println(c); // 9\n\na = 6;\nSystem.out.println(c);\n// 9 again, but if 'c' was tracking the changes of 'a' and 'b',\n// it would've been 6 + 5 = 11\n```", "```java\n$ git clone git@github.com:ReactiveX/RxJava.git\n$ cd RxJava/\n$ ./gradlew build\n```", "```java\n<dependency>\n  <groupId>io.reactivex</groupId>\n  <artifactId>rxjava</artifactId>\n  <version>1.0.8</version>\n</dependency>\n```", "```java\n<dependency org=\"io.reactivex\" name=\"rxjava\" rev=\"1.0.8\" />\n```", "```java\ndependencies {\n  ...\n  compile 'io.reactivex:rxjava:1.0.8'\n  ...\n}\n```", "```java\nList<String> list = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"); // (1)\n\nIterator<String> iterator = list.iterator(); // (2)\n\nwhile(iterator.hasNext()) { // 3\n  // Prints elements (4)\n  System.out.println(iterator.next());\n}\n```", "```java\nList<String> list = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"); // (1)\n\nObservable<String> observable = Observable.from(list); // (2)\n\nobservable.subscribe(new Action1<String>() { // (3)\n  @Override\n  public void call(String element) {\n    System.out.println(element); // Prints the element (4)\n  }\n});\n```", "```java\nList<String> list = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\");\n\nObservable<String> observable = Observable.from(list);\nobservable.subscribe(new Action1<String>() {\n  @Override\n  public void call(String element) {\n    System.out.println(element);\n  }\n},\nnew Action1<Throwable>() {\n @Override\n public void call(Throwable t) {\n System.err.println(t); // (1)\n }\n},\nnew Action0() {\n @Override\n public void call() {\n System.out.println(\"We've finnished!\"); // (2)\n }\n});\n```", "```java\nConnectableObservable<String> input = from(System.in); // (1)\n\nObservable<Double> a = varStream(\"a\", input); (2)\nObservable<Double> b = varStream(\"b\", input);\n\nReactiveSum sum = new ReactiveSum(a, b); (3)\n\ninput.connect(); (4)\n```", "```java\nstatic ConnectableObservable<String> from(final InputStream stream) {\n  return from(new BufferedReader(new InputStreamReader(stream)));// (1)\n}\n\nstatic ConnectableObservable<String> from(final BufferedReader reader) {\n  return Observable.create(new OnSubscribe<String>() { // (2)\n    @Override\n    public void call(Subscriber<? super String> subscriber) {\n      if (subscriber.isUnsubscribed()) {  // (3)\n        return;\n      }\n      try {\n        String line;\n        while(!subscriber.isUnsubscribed() &&\n          (line = reader.readLine()) != null) { // (4)\n            if (line == null || line.equals(\"exit\")) { // (5)\n              break;\n            }\n            subscriber.onNext(line); // (6)\n          }\n        }\n        catch (IOException e) { // (7)\n          subscriber.onError(e);\n        }\n        if (!subscriber.isUnsubscribed()) // (8)\n        subscriber.onCompleted();\n      }\n    }\n  }).publish(); // (9)\n}\n```", "```java\npublic static Observable<Double> varStream(final String varName, Observable<String> input) {\n  final Pattern pattern = Pattern.compile(\"\\\\^s*\" + varName + \"\\\\s*[:|=]\\\\s*(-?\\\\d+\\\\.?\\\\d*)$\"); // (1)\n  return input\n  .map(new Func1<String, Matcher>() {\n    public Matcher call(String str) {\n      return pattern.matcher(str); // (2)\n    }\n  })\n  .filter(new Func1<Matcher, Boolean>() {\n    public Boolean call(Matcher matcher) {\n      return matcher.matches() && matcher.group(1) != null; // (3)\n    }\n  })\n  .map(new Func1<Matcher, Double>() {\n    public Double call(Matcher matcher) {\n      return Double.parseDouble(matcher.group(1)); // (4)\n    }\n  });\n}\n```", "```java\npublic static final class ReactiveSum implements Observer<Double> { // (1)\n  private double sum;\n  public ReactiveSum(Observable<Double> a, Observable<Double> b) {\n    this.sum = 0;\n    Observable.combineLatest(a, b, new Func2<Double, Double, Double>() { // (5)\n      public Double call(Double a, Double b) {\n        return a + b;\n      }\n    }).subscribe(this); // (6)\n  }\n  public void onCompleted() {\n    System.out.println(\"Exiting last sum was : \" + this.sum); // (4)\n  }\n  public void onError(Throwable e) {\n    System.err.println(\"Got an error!\"); // (3)\n    e.printStackTrace();\n  }\n  public void onNext(Double sum) {\n    this.sum = sum;\n    System.out.println(\"update : a + b = \" + sum); // (2)\n  }\n}\n```", "```java\nReacitve Sum. Type 'a: <number>' and 'b: <number>' to try it.\na:4\nb:5\nupdate : a + b = 9.0\na:6\nupdate : a + b = 11.0\n\n```"]