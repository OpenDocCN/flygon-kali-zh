["```cs\npublic class CoreMiddleware\n{\n    private readonly RequestDelegate _next;\n    public CoreMiddleware(RequestDelegate next, ILoggerFactory \n    loggerFactory)\n    {\n        ...\n        _next = next;\n        ...\n    }\n    public async Task Invoke(HttpContext context)\n    {\n        /*\n            Insert here the module specific code that processes the \n            HttpContext instance before it is passed to the next \n            module.\n\n        */\n\n        await _next.Invoke(context);\n        /*\n            Insert here other module specific code that processes the \n            HttpContext instance, after all modules that follow this\n            module finished their processing.\n        */\n    }\n} \n```", "```cs\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env, \nIServiceProvider serviceProvider)\n{\n    ...\n    app.UseMiddleware<MyCustomModule>\n    ...\n} \n```", "```cs\npublic static class MyMiddlewareExtensions\n{\n    public static IApplicationBuilder UseMyFunctionality(this \n    IApplicationBuilder builder,...)\n    {\n        //other code\n        ...\n        builder.UseMiddleware<MyModule1>();\n        builder.UseMiddleware<MyModule2>();\n        ...\n        //Other code\n        ...\n        return builder;\n    }\n} \n```", "```cs\nservices.AddControllersWithViews(o =>\n{\n    //set here MVC options by modifying the o option parameter\n} \n```", "```cs\n    <PropertyGroup> \n        <EnvironmentName>Staging</EnvironmentName>\n    </PropertyGroup> \n    ```", "```cs\n{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false, \n    \"anonymousAuthentication\": true, \n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:2575\",\n      \"sslPort\": 44393\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    ...\n    ...\n    }\n  }\n} \n```", "```cs\n{\n    \"ConnectionStrings\": {\n        \"DefaultConnection\": \"....\"\n    },\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Warning\"\n        }\n    },\n    \"Email\": {\n        \"FromName\": \"MyName\",\n        \"FromAddress\": \"info@MyDomain.com\",\n        \"LocalDomain\": \"smtps.MyDomain.com\",\n        \"MailServerAddress\": \"smtps.MyDomain.com\",\n        \"MailServerPort\": \"465\",\n        \"UserId\": \"info@MyDomain.com\",\n        \"UserPassword\": \"mypassword\" \n```", "```cs\n public class EmailConfig\n    {\n        public String FromName { get; set; }\n        public String FromAddress { get; set; }\n        public String LocalDomain { get; set; }\n        public String MailServerAddress { get; set; }\n        public String MailServerPort { get; set; }\n        public String UserId { get; set; }\n        public String UserPassword { get; set; }\n    } \n```", "```cs\npublic Startup(IConfiguration configuration)\n{\n    Configuration = configuration;\n}\n....\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    services.Configure<EmailConfig>(Configuration.GetSection(\"Email\"));\n    .. \n```", "```cs\nif (env.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\nelse\n{\n    app.UseExceptionHandler(\"/Home/Error\");\n    app.UseHsts();\n}\napp.UseHttpsRedirection(); \n```", "```cs\nservices.AddHsts(options =>     {\n    ...\n    options.MaxAge = TimeSpan.FromDays(60); \n    ...\n}); \n```", "```cs\napp.UseStaticFiles();\napp.UseCookiePolicy();\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\n... \n```", "```cs\nvar consentFeature = context.Features.Get<ITrackingConsentFeature>();\nvar showBanner = !consentFeature?.CanTrack ?? false;\nvar cookieString = consentFeature?.CreateConsentCookie(); \n```", "```cs\nCookiePolicyOptions in the code instead of using the configuration file:\n```", "```cs\nservices.Configure<CookiePolicyOptions>(options =>\n{\n    options.CheckConsentNeeded = context => true;\n}); \n```", "```cs\nservices.AddAuthentication(o =>\n{\n    o.DefaultScheme = \n    CookieAuthenticationDefaults.AuthenticationScheme;\n})\n.AddCookie(o =>\n{\n    o.Cookie.Name = \"my_cookie\";\n})\n.AddJwtBearer(o =>\n{\n    ...\n}); \n```", "```cs\nRequest path: /UnitedStates/NewYork \nPattern: Name=\"location\", match=\"/{Country}/{Town}\"\nEndpoint: DisplayName=\"Location\", Country=\"UnitedStates\", Town=\"NewYork\" \n```", "```cs\nUseRouting middleware, but they are listed in the UseEndpoints method. While it might appear strange that URL patterns are not defined directly in the middleware that uses them, this was done mainly for coherence with the previous ASP.NET Core versions. In fact, previous versions contained no method analogous to UseRouting, but a unique middleware at the end of the pipeline. In the new version, patterns are still defined at the end of the pipeline for coherence with previous versions, but now, UseEndpoints just creates a data structure containing all patterns when the application starts. Then, this data structure is processed by the UseRouting middleware, as shown in the following code:\n```", "```cs\napp.UseRouting();\napp.UseAuthentication();\napp.UseAuthorization();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\n}); \n```", "```cs\nMapGet(\"hello/{country}\", context => \n    context.Response.WriteAsync(\n    $\"Selected country is {context.GetRouteValue(\"country\")}\")); \n```", "```cs\nendpoints\n .MapHealthChecks(\"/health\")\n .RequireAuthorization(new AuthorizeAttribute(){ Roles = \"admin\", }); \n```", "```cs\n public class HomeController : Controller\n    {\n        public IActionResult MyMethod(\n            int id, \n            MyClass myclass, \n            [FromServices] MyService myservice)\n        {\n            ... \n```", "```cs\npublic IActionResult MyMethod(...)\n{\n   ...\n   return View(\"myviewName\", MyViewModel)\n} \n```", "```cs\nreturn RedirectToAction(\"MyActionName\", \"MyControllerName\",\n         new {par1Name=par1Value,..parNName=parNValue}); \n```", "```cs\nreturn Content(\"this is plain text\", \"text/plain\"); \n```", "```cs\n<PropertyGroup>\n  <TargetFramework> net5.0 </TargetFramework>\n  <!-- add code below -->\n  <RazorCompileOnBuild>false</RazorCompileOnBuild>\n  <RazorCompileOnPublish>false</RazorCompileOnPublish>\n  <!-- end of code to add -->\n    ...\n</PropertyGroup> \n```", "```cs\n@model MyViewModel \n```", "```cs\n@model MyViewModel\n@using MyApplication.Models \n```", "```cs\n@model MyViewModel \n@using MyApplication.Models\n@inject IViewLocalizer Localizer \n```", "```cs\n@{\n    //place C# code here\n    var myVar = 5;\n    ...\n    <div>\n        <!-- here you are in HTML mode again -->\n        ...\n    </div>\n    //after the HTML block you are still in C# mode\n    var x = \"my string\";\n} \n```", "```cs\n<span>Current date is: </span>\n<span>@DateTime.Today.ToString(\"d\")</span>\n...\n<p>\n  User name is: @(myName+ \" \"+mySurname)\n</p>\n...\n<input type=\"submit\" value=\"@myUserMessage\" /> \n```", "```cs\n@HTML.Raw(myDynamicHtml) \n```", "```cs\n@if(myUser.IsRegistered)\n{\n    //this is a C# code area\n    var x=5;\n    ...\n    <p>\n     <!-- This is an HTML area -->\n    </p>\n    //this is a C# code area again\n}\nelse if(callType == CallType.WebApi)\n{\n    ...\n}\nelse\n{\n ..\n} \n```", "```cs\n@for(int i=0; i< 10; i++)\n{\n}\n@foreach(var x in myIEnumerable)\n{\n}\n@while(true)\n{\n\n}\n@do \n{\n\n}\nwhile(true) \n```", "```cs\n@addTagHelper *, Dll.Complete.Name \n```", "```cs\n@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers \n```", "```cs\n<a asp-controller=\"{controller name}\"\nasp-action=\"{action method name}\" \nasp-route-{action method parameter1}=\"value1\"\n...\nasp-route-{action method parametern}=\"valuen\"> \n    put anchor text here\n</a> \n```", "```cs\n<form asp-controller=\"{controller name}\"\nasp-action=\"{action method name}\" \nasp-route-{action method parameter1}=\"value1\"\n...\nasp-route-{action method parametern}=\"valuen\"\n...\n> \n    ... \n```", "```cs\n<script src=\"https://stackpath.bootstrapcdn.com/\nbootstrap/4.3.1/js/bootstrap.bundle.min.js\"\nasp-fallback-src=\"~/lib/bootstrap/dist/js/\nbootstrap.bundle.min.js\"\nasp-fallback-test=\"window.jQuery && window.jQuery.fn && window.jQuery.fn.modal\" crossorigin=\"anonymous\"\nintegrity=\"sha384-xrRywqdh3PHs8keKZN+8zzc5TX0GRTLCcmivcbNJWm2rs5C8PRhcEn3czEjhAO9o\">\n</script> \n```", "```cs\n<environment include=\"Development\">\n        @*development version of JavaScript files*@\n</environment>\n<environment exclude=\"Development\">\n        @*development version of JavaScript files *@\n</environment> \n```", "```cs\n<cache>\n    @* heavy to compute content to cache *@\n</cache> \n```", "```cs\n<input type=\"text\" asp-for\"Address.Town\"/> \n```", "```cs\n<label asp-for=\"Address.Town\"></label\n<input type=\"text\" asp-for=\"Address.Town\"/> \n```", "```cs\nasp-validation-summary=\"ValidationSummary.{All, ModelOnly}\" \n```", "```cs\n@{\n    Layout = \"_MyLayout\";\n} \n```", "```cs\n@{\n    Layout = \"_Layout\";\n} \n```", "```cs\n...\n<main role=\"main\" class=\"pb-3\">\n    ...\n    @RenderBody()\n    ...\n</main>\n... \n```", "```cs\n@*In the view *@\n@{\n    ViewData[\"Title\"] = \"Home Page\";  \n}\n@*In the layout view*@\n<head>\n    <meta charset=\"utf-8\" />\n    ...\n    <title>@ViewData[\"Title\"] - My web application</title>\n    ... \n```", "```cs\n...\n<script src=\"img/site.js\" asp-append-version=\"true\"></script>\n@RenderSection(\"Scripts\", required: false)\n... \n```", "```cs\n.....\n@section scripts{\n    <script src=\"img/pageSpecificJavaScript.min.js\"></script>\n}\n..... \n```", "```cs\n<partial name=\"_viewname\" for=\"ModelProperty.NestedProperty\"/> \n```", "```cs\n<partial name=\"_viewname\" model=\"new MyModel{...})\" /> \n```", "```cs\n<vc:[view-component-name] par1=\"par1 value\" par2=\"parameter2 value\"> </vc:[view-component-name]> \n```", "```cs\npublic class MyTestViewComponent : ViewComponent\n    {\n\n        public async Task<IViewComponentResult> InvokeAsync(\n        int par1, bool par2)\n        {\n            var model= ....\n            return View(\"ViewName\", model);\n        }\n\n    } \n```", "```cs\n<vc:my-test par1=\"10\" par2=\"true\"></my-test> \n```", "```cs\napp.UseEndpoints(endpoints =>\n    {\n        ...\n        endpoints.MapControllerRoute(\"default\", \"\n        {controller=Home}/{action=Index}/{id?}\");\n        ...\n    }); \n```", "```cs\nMapGet(\"hello/{country}\", context => \n    context.Response.WriteAsync(\n    $\"Selected country is {context.GetRouteValue(\"country\")}\"))\n    .RequireAuthorization(new AuthorizeAttribute(){ Roles = \"admin\" }); \n```", "```cs\nservices.AddControllersWithViews()\n    .AddNewtonsoftJson(); \n```", "```cs\n.AddNewtonsoftJson(options =>\n           options.SerializerSettings.ContractResolver =\n              new CamelCasePropertyNamesContractResolver()); \n```", "```cs\nservices.AddControllersWithViews(o => {\n    ...\n    // code that modifies o properties\n}); \n```", "```cs\nvar supportedCultures = new[]\n{\n   new CultureInfo(\"en-AU\"),\n   new CultureInfo(\"en-GB\"),\n   new CultureInfo(\"en\"),\n   new CultureInfo(\"es-MX\"),\n   new CultureInfo(\"es\"),\n   new CultureInfo(\"fr-CA\"),\n   new CultureInfo(\"fr\"),\n   new CultureInfo(\"it-CH\"),\n   new CultureInfo(\"it\")\n}; \n```", "```cs\nvar supportedUICultures = new[]\n{\n    new CultureInfo(\"en\"),\n    new CultureInfo(\"es\"),\n    new CultureInfo(\"fr\"),\n    new CultureInfo(\"it\")\n}; \n```", "```cs\napp.UseRequestLocalization(new RequestLocalizationOptions\n{\n     DefaultRequestCulture = new RequestCulture(\"en\", \"en\"),\n     // Formatting numbers, dates, etc.\n     SupportedCultures = supportedCultures,\n     // UI strings that we have localized.\n     SupportedUICultures = supportedUICultures,\n     FallBackToParentCultures = true,\n     FallBackToParentUICultures = true\n}); \n```", "```cs\nservices.AddControllersWithViews()\n    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix) \n```", "```cs\nservices.AddLocalization(options => \n    options.ResourcesPath = \"Resources\"); \n```", "```cs\n<ResourcesPath >/Views/Home/Index.<culture name>.resx \n```", "```cs\n@{\n    ViewData[\"Title\"] = Localizer[\"HomePageTitle\"];\n}\n<h2>@ViewData[\"MyTitle\"]</h2> \n```", "```cs\n services.AddControllersWithViews()\n    .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)\n    .AddDataAnnotationsLocalization(); \n```", "```cs\n<ResourcesPath >/ViewModels/Account/RegisterViewModel.<culture name>.resx \n```", "```cs\n     <ItemGroup>\n              <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n         </ItemGroup> \n    ```", "```cs\npublic interface IPackage : IEntity<int>\n{\n    void FullUpdate(IPackageFullEditDTO o);\n    string Name { get; set; }\n    string Description { get;}\n    decimal Price { get; set; }\n    int DurationInDays { get; }\n    DateTime? StartValidityDate { get;}\n    DateTime? EndValidityDate { get; }\n    int DestinationId { get; }\n\n} \n```", "```cs\npublic interface IPackageRepository: \n        IRepository<IPackage>\n{\n    Task<IPackage> Get(int id);\n    IPackage New();\n    Task<IPackage> Delete(int id);\n} \n```", "```cs\npublic class PackageDeleteEvent: IEventNotification\n{\n    public PackageDeleteEvent(int id, long oldVersion)\n    {\n        PackageId = id;\n        OldVersion = oldVersion;\n    }\n    public int PackageId { get; }\n    public long OldVersion { get; }\n\n}\npublic class PackagePriceChangedEvent: IEventNotification\n{\n    public PackagePriceChangedEvent(int id, decimal price, \n        long oldVersion, long newVersion)\n    {\n            PackageId = id;\n            NewPrice = price;\n            OldVersion = oldVersion;\n            NewVersion = newVersion;\n     }\n    public int PackageId { get; }\n    public decimal NewPrice { get; }\n    public long OldVersion { get; }\n    public long NewVersion { get; }\n} \n```", "```cs\npublic class Package: Entity<int>, IPackage\n{\n    public void FullUpdate(IPackageFullEditDTO o)\n    {\n        if (IsTransient())\n        {\n            Id = o.Id;\n            DestinationId = o.DestinationId;\n        }\n        else\n        {\n            if (o.Price != this.Price)\n                this.AddDomainEvent(new PackagePriceChangedEvent(\n                        Id, o.Price, EntityVersion, EntityVersion+1));\n        }\n        Name = o.Name;\n        Description = o.Description;\n        Price = o.Price;\n        DurationInDays = o.DurationInDays;\n        StartValidityDate = o.StartValidityDate;\n        EndValidityDate = o.EndValidityDate;\n    }\n    [MaxLength(128), Required]\n    public string Name { get; set; }\n    [MaxLength(128)]\n    public string Description { get; set; }\n    public decimal Price { get; set; }\n    public int DurationInDays { get; set; }\n    public DateTime? StartValidityDate { get; set; }\n    public DateTime? EndValidityDate { get; set; }\n    public Destination MyDestination { get; set; }\n    [ConcurrencyCheck]\n    public long EntityVersion{ get; set; }\n    public int DestinationId { get; set; }\n} \n```", "```cs\nIdentityDbContext<IdentityUser<int>, IdentityRole<int>, int> \n```", "```cs\npublic async Task StartAsync()\n{\n    await Database.BeginTransactionAsync();\n}\npublic Task CommitAsync()\n{\n    Database.CommitTransaction();\n    return Task.CompletedTask;\n}\npublic Task RollbackAsync()\n{\n    Database.RollbackTransaction();\n    return Task.CompletedTask;\n} \n```", "```cs\npublic async Task<bool> SaveEntitiesAsync()\n{ \n    try\n    {\n        return await SaveChangesAsync() > 0;\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        foreach (var entry in ex.Entries)\n        {\n            entry.State = EntityState.Detached; \n\n        }\n        throw;\n    }\n} \n```", "```cs\npublic async Task<IPackage> Delete(int id)\n{\n    var model = await Get(id);\n    if (model is not Package package) return null;\n    context.Packages.Remove(package);\n    model.AddDomainEvent(\n        new PackageDeleteEvent(\n            model.Id, package.EntityVersion));\n    return model;\n} \n```", "```cs\nservices.AddDbContext<MainDbContext>(options =>\n                options.UseSqlServer(connectionString, \n                b => b.MigrationsAssembly(migrationAssembly))); \n```", "```cs\nservices.AddIdentity<IdentityUser<int>, IdentityRole<int>>()\n                .AddEntityFrameworkStores<MainDbContext>()\n                .AddDefaultTokenProviders(); \n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    services.AddRazorPages();\n    services.AddDbLayer(\n        Configuration.GetConnectionString(\"DefaultConnection\"),\n        \"PackagesManagementDB\");\n___________________________\npublic void Configure(IApplicationBuilder app, \n    IWebHostEnvironment env)\n    ...\n    app.UseAuthentication();\n    app.UseAuthorization();\n    ...\n} \n```", "```cs\n{\n   \"ConnectionStrings\": {\n        \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=package-management;Trusted_Connection=True;MultipleActiveResultSets=true\"\n\n    },\n    ...\n} \n```", "```cs\nAdd-Migration Initial -Project PackageManagementDB \n```", "```cs\napp.UseAuthorization();\n// Code to add: configure the Localization middleware\nvar ci = new CultureInfo(\"en-US\"); \napp.UseRequestLocalization(new RequestLocalizationOptions\n{\n    DefaultRequestCulture = new RequestCulture(ci),\n    SupportedCultures = new List<CultureInfo>\n    {\n        ci,\n    },\n     SupportedUICultures = new List<CultureInfo>\n    {\n        ci,\n    }\n}); \n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n    ...\n    services.AddAllQueries(this.GetType().Assembly);\n    services.AddAllCommandHandlers(this.GetType().Assembly);\n    services.AddAllEventHandlers(this.GetType().Assembly);\n} \n```", "```cs\npublic class PackagesListQuery:IPackagesListQuery\n{\n    private readonly MainDbContext ctx;\n    public PackagesListQuery(MainDbContext ctx)\n    {\n        this.ctx = ctx;\n    }\n    public async Task<IEnumerable<PackageInfosViewModel>> GetAllPackages()\n    {\n        return await ctx.Packages.Select(m => new PackageInfosViewModel\n        {\n            StartValidityDate = m.StartValidityDate,\n            EndValidityDate = m.EndValidityDate,\n            Name = m.Name,\n            DurationInDays = m.DurationInDays,\n            Id = m.Id,\n            Price = m.Price,\n            DestinationName = m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n            .OrderByDescending(m=> m.EndValidityDate)\n            .ToListAsync();\n    }\n} \n```", "```cs\npublic class PackageFullEditViewModel: IPackageFullEditDTO\n    {\n        public PackageFullEditViewModel() { }\n        public PackageFullEditViewModel(IPackage o)\n        {\n            Id = o.Id;\n            DestinationId = o.DestinationId;\n            Name = o.Name;\n            Description = o.Description;\n            Price = o.Price;\n            DurationInDays = o.DurationInDays;\n            StartValidityDate = o.StartValidityDate;\n            EndValidityDate = o.EndValidityDate;\n        }\n        ...\n        ... \n```", "```cs\npublic int Id { get; set; }\n[StringLength(128, MinimumLength = 5), Required]\n[Display(Name = \"name\")]\npublic string Name { get; set; }\n[Display(Name = \"package infos\")]\n[StringLength(128, MinimumLength = 10), Required]\npublic string Description { get; set; }\n[Display(Name = \"price\")]\n[Range(0, 100000)]\npublic decimal Price { get; set; }\n[Display(Name = \"duration in days\")]\n[Range(1, 90)]\npublic int DurationInDays { get; set; }\n[Display(Name = \"available from\"), Required]\npublic DateTime? StartValidityDate { get; set; }\n[Display(Name = \"available to\"), Required]\npublic DateTime? EndValidityDate { get; set; }\n[Display(Name = \"destination\")]\npublic int DestinationId { get; set; } \n```", "```cs\npublic class UpdatePackageCommand: ICommand\n{\n    public UpdatePackageCommand(IPackageFullEditDTO updates)\n    {\n        Updates = updates;\n    }\n    public IPackageFullEditDTO Updates { get; private set; }\n} \n```", "```cs\nIPackageRepository repo;\nIEventMediator mediator;\npublic UpdatePackageCommandHandler(IPackageRepository repo, IEventMediator mediator)\n{\n    this.repo = repo;\n    this.mediator = mediator;\n} \n```", "```cs\npublic async Task HandleAsync(UpdatePackageCommand command)\n{\n    bool done = false;\n    IPackage model;\n    while (!done)\n    {\n        try\n        {\n            model = await repo.Get(command.Updates.Id);\n            if (model == null) return;\n            model.FullUpdate(command.Updates);\n            await mediator.TriggerEvents(model.DomainEvents);\n            await repo.UnitOfWork.SaveEntitiesAsync();\n            done = true;\n        }\n        catch (DbUpdateConcurrencyException)\n        {\n          // add some logging here\n        }\n    }\n} \n```", "```cs\npublic class PackagePriceChangedEventHandler :\n    IEventHandler<PackagePriceChangedEvent>\n{\n    private readonly IPackageEventRepository repo;\n    public PackagePriceChangedEventHandler(IPackageEventRepository repo)\n    {\n        this.repo = repo;\n    }\n    public Task HandleAsync(PackagePriceChangedEvent ev)\n    {\n        repo.New(PackageEventType.CostChanged, ev.PackageId, \n            ev.OldVersion, ev.NewVersion, ev.NewPrice);\n      return Task.CompletedTask;\n    }\n} \n```", "```cs\nprivate readonly UserManager<IdentityUser<int>> _userManager;\nprivate readonly SignInManager<IdentityUser<int>> _signInManager;\npublic AccountController(\n    UserManager<IdentityUser<int>> userManager,\n    SignInManager<IdentityUser<int>> signInManager)\n{\n    _userManager = userManager;\n    _signInManager = signInManager;\n} \n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Logout()\n{\n    await _signInManager.SignOutAsync();\n    return RedirectToAction(nameof(HomeController.Index), \"Home\");\n} \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Login(string returnUrl = null)\n{\n    // Clear the existing external cookie \n    //to ensure a clean login process\n    await HttpContext\n         .SignOutAsync(IdentityConstants.ExternalScheme);\n    ViewData[\"ReturnUrl\"] = returnUrl;\n    return View();\n} \n```", "```cs\n<form asp-route-returnurl=\"@ViewData[\"ReturnUrl\"]\" method=\"post\">\n...\n</form> \n```", "```cs\n[ValidateAntiForgeryToken]\npublic async Task<IActionResult> Login(\n    LoginViewModel model,\n    string returnUrl = null)\n        {\n            ... \n```", "```cs\nif (User.Identity.IsAuthenticated)\n{\n      await _signInManager.SignOutAsync();\n\n} \n```", "```cs\nif (ModelState.IsValid)\n{\n     ...\n}\nelse\n // If we got this far, something failed, redisplay form\n return View(model); \n```", "```cs\nvar result = await _signInManager.PasswordSignInAsync(\n    model.UserName, \n    model.Password, model.RememberMe, \n    lockoutOnFailure: false); \n```", "```cs\nif (result.Succeeded)\n{\n    if (!string.IsNullOrEmpty(returnUrl))\n        return LocalRedirect(returnUrl);\n    else\n        return RedirectToAction(nameof(HomeController.Index), \"Home\");\n}\nelse\n{\n    ModelState.AddModelError(string.Empty, \n        \"wrong username or password\");\n    return View(model);\n} \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Index(\n    [FromServices]IPackagesListQuery query)\n{\n    var results = await query.GetAllPackages();\n    var vm = new PackagesListViewModel { Items = results };\n    return View(vm);\n} \n```", "```cs\n@foreach(var package in Model.Items)\n{\n<tr>\n    <td>\n        <a asp-controller=\"ManagePackages\"\n            asp-action=\"@nameof(ManagePackagesController.Delete)\"\n            asp-route-id=\"@package.Id\">\n            delete\n        </a>\n    </td>\n    <td>\n        <a asp-controller=\"ManagePackages\"\n            asp-action=\"@nameof(ManagePackagesController.Edit)\"\n            asp-route-id=\"@package.Id\">\n            edit\n        </a>\n    </td>\n    ...\n    ... \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Edit(\n    int id,\n    [FromServices] IPackageRepository repo)\n{\n    if (id == 0) return RedirectToAction(\n        nameof(ManagePackagesController.Index));\n    var aggregate = await repo.Get(id);\n    if (aggregate == null) return RedirectToAction(\n        nameof(ManagePackagesController.Index));\n    var vm = new PackageFullEditViewModel(aggregate);\n    return View(vm);\n} \n```", "```cs\n@inject PackagesManagement.Queries.IDestinationListQuery destinationsQuery\n@{\n    ViewData[\"Title\"] = \"Edit/Create package\";\n    var allDestinations = \n        await destinationsQuery.AllDestinations();\n} \n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Edit(\n    PackageFullEditViewModel vm,\n    [FromServices] ICommandHandler<UpdatePackageCommand> command)\n{\n    if (ModelState.IsValid)\n    {\n        await command.HandleAsync(new UpdatePackageCommand(vm));\n        return RedirectToAction(\n            nameof(ManagePackagesController.Index));\n    }\n    else\n        return View(vm);\n} \n```", "```cs\n<li class=\"nav-item\">\n    <a class=\"nav-link text-dark\" \n        asp-controller=\"ManagePackages\" \n            asp-action=\"Index\">Manage packages</a>\n</li>\n@if (User.Identity.IsAuthenticated)\n{\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\"\n            href=\"javascript:document.getElementById('logoutForm').submit()\">\n            Logout\n        </a>\n    </li>\n}\nelse\n{\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" \n            asp-controller=\"Account\" asp-action=\"Login\">Login</a>\n    </li>\n} \n```", "```cs\n@if (User.Identity.IsAuthenticated)\n{\n    <form asp-area=\"\" asp-controller=\"Account\" \n            asp-action=\"Logout\" method=\"post\" \n            id=\"logoutForm\" ></form>\n} \n```"]