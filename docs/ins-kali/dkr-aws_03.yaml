- en: Getting Started with AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用AWS
- en: In the previous chapter, we discussed the various options you have for deploying
    your container applications to AWS, and it's now time to start implementing practical
    solutions using the Elastic Container Service (ECS), Fargate, Elastic Kubernetes
    Service (EKS), Elastic Beanstalk, and Docker Swarm. Before we can cover all of
    this exciting material, you need to establish an AWS account, understand how to
    set up access for your account, and ensure you have a solid grasp of the various
    tools we will use throughout this book to interact with AWS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了部署容器应用程序到AWS的各种选项，现在是时候开始使用弹性容器服务（ECS）、Fargate、弹性Kubernetes服务（EKS）、弹性Beanstalk和Docker
    Swarm来实施实际解决方案了。在我们能够涵盖所有这些令人兴奋的材料之前，您需要建立一个AWS账户，了解如何为您的账户设置访问权限，并确保您对我们将在本书中使用的各种工具有牢固的掌握，以与AWS进行交互。
- en: Getting started with AWS is very easy—AWS offers a free tier suite of services
    that enable you to test and try out a number of AWS services at no cost for 12
    months, or, in some cases, indefinitely. Of course, there are limitations imposed
    that ensure you can't set up your own Bitcoin mining services for free, but for
    the most part, you can leverage these free tier services to test a wide number
    of scenarios, including almost all of the material we will work through in this
    book. So, this chapter will start off with establishing a new AWS account, which
    will require you to have a valid credit card, just in case you do follow through
    on that great new Bitcoin mining venture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用AWS非常容易——AWS提供了一套免费的服务套件，使您能够在12个月内免费测试和尝试许多AWS服务，或者在某些情况下，无限期地免费使用。当然，会有一些限制，以确保您不能免费设置自己的比特币挖矿服务，但在大多数情况下，您可以利用这些免费套餐服务来测试大量的场景，包括我们将在本书中进行的几乎所有材料。因此，本章将从建立一个新的AWS账户开始，这将需要您拥有一张有效的信用卡，以防您真的跟进了那个伟大的新比特币挖矿企业。
- en: Once you have an account in place, the next step is to set up administrative
    access to your account. By default, all AWS accounts are created with a root user
    that has the highest level of account privileges, however AWS do not recommend
    using the root account for day-to-day administrative use. Therefore, we will configure
    the AWS Identity Access and Management (IAM) service, creating IAM users and groups,
    and learning how to implement enhanced security using multi-factor authentication
    (MFA).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您建立了一个账户，下一步是为您的账户设置管理访问权限。默认情况下，所有AWS账户都是使用具有最高级别账户特权的根用户创建的，但AWS不建议将根账户用于日常管理。因此，我们将配置AWS身份访问和管理（IAM）服务，创建IAM用户和组，并学习如何使用多因素身份验证（MFA）实施增强安全性。
- en: With access to your AWS account established, we will then focus on the various
    tools that you can use to interact with AWS, including the AWS console that provides
    a web-based management interface that you access with your web browser, and the
    AWS CLI tool for interacting with AWS via the command line.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 建立了对AWS账户的访问权限后，我们将专注于您可以用来与AWS进行交互的各种工具，包括提供基于Web的管理界面的AWS控制台，以及用于通过命令行与AWS进行交互的AWS
    CLI工具。
- en: Finally, we will introduce a management service and toolset called AWS CloudFormation,
    which provides an infrastructure as code approach for defining your AWS infrastructure
    and services. CloudFormation allows you to define templates that enable you to
    build complete environments with the single click of a button, and do so in a
    repeatable and consistent fashion. We will be using CloudFormation extensively
    throughout this book, as in practice, most organizations that are deploying Docker-based
    applications are adopting infrastructure as code tooling such as CloudFormation,
    Ansible, or Terraform to automate the deployment of their Docker applications
    and supporting infrastructure. You will learn how to create a simple CloudFormation
    template and then deploy that template using both the AWS console and AWS CLI.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍一种名为AWS CloudFormation的管理服务和工具集，它提供了一种基础设施即代码的方法来定义您的AWS基础设施和服务。CloudFormation允许您定义模板，使您能够通过单击按钮构建完整的环境，并且以可重复和一致的方式进行操作。在本书中，我们将广泛使用CloudFormation，因为在实践中，大多数部署基于Docker的应用程序的组织都采用基础设施即代码工具，如CloudFormation、Ansible或Terraform来自动化其Docker应用程序和支持基础设施的部署。您将学习如何创建一个简单的CloudFormation模板，然后使用AWS控制台和AWS
    CLI部署该模板。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up an AWS account
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置AWS账户
- en: Logging in as the root account
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以根账户登录
- en: Creating IAM users, groups, and roles
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建IAM用户、组和角色
- en: Creating an EC2 key pair
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个EC2密钥对
- en: Installing the AWS CLI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装AWS CLI
- en: Configuring credentials and profiles in the AWS CLI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS CLI中配置凭据和配置文件
- en: Interacting with AWS using the AWS CLI
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS CLI与AWS进行交互
- en: Introducing AWS CloudFormation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍AWS CloudFormation
- en: Defining a simple AWS CloudFormation template
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个简单的AWS CloudFormation模板
- en: Deploying an AWS CloudFormation stack
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署AWS CloudFormation堆栈
- en: Deleting an AWS CloudFormation stack
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除AWS CloudFormation堆栈
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: Prerequisite software installed as per the instructions in Chapter 1, *Container
    and Docker Fundamentals*
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第1章《容器和Docker基础知识》中的说明安装先决条件软件
- en: A valid credit card is required to create a free AWS account in this chapter
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，需要一个有效的信用卡来创建免费的AWS账户
- en: The following GitHub URL contains the code samples that are used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch14)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch3)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际运行情况：
- en: '[http://bit.ly/2N1nzJc](http://bit.ly/2N1nzJc)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2N1nzJc](http://bit.ly/2N1nzJc)'
- en: Setting up an AWS account
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置AWS账户
- en: The first step on your AWS journey is to establish an AWS account, which is
    a foundational building block of AWS that defines a security and administrative
    context for managing your AWS services and resources that you consume. To encourage
    adoption of AWS and ensure that first time users have an opportunity to try out
    AWS for free, AWS offers a free tier that grants you free access to some AWS services
    (with some limitations around usage). You can find out more about the free tier
    and what services are offered at [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
    Make sure you have a good understanding of what you can and can't use for free
    to avoid an unnecessary bill shock.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您AWS之旅的第一步是建立一个AWS账户，这是AWS的基础构建块，为您管理AWS服务和资源提供了安全和管理上下文。为了鼓励采用AWS，并确保首次用户有机会免费尝试AWS，AWS提供了一个免费套餐，允许您免费访问一些AWS服务（在使用方面有一些限制）。您可以在[https://aws.amazon.com/free/](https://aws.amazon.com/free/)了解更多关于免费套餐和提供的服务。确保您对可以免费使用和不能免费使用有很好的理解，以避免不必要的账单冲击。
- en: 'In this book, we will make use of a number of free tier services with the following
    monthly usage limits:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用一些免费套餐服务，以下是每月使用限制：
- en: '| **Service** | **Limit** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **服务** | **限制** |'
- en: '| EC2 | 750 hours of Linux t2.micro (Single vCPU, 1 GB Memory) instance |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| EC2 | 750小时的Linux t2.micro（单个vCPU，1 GB内存）实例 |'
- en: '| Elastic Block Storage | 30 GB block-level storage (SSD or traditional spinning
    disk) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 弹性块存储 | 30 GB的块级存储（SSD或传统旋转磁盘） |'
- en: '| RDS | 750 hours of db.t2.micro (Single vCPU, 1 GB Memory) MySQL instance
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| RDS | 750小时的db.t2.micro（单个vCPU，1 GB内存）MySQL实例 |'
- en: '| Elastic Container Registry | 500 MB of storage |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 弹性容器注册表 | 500 MB的存储空间 |'
- en: '| Elastic Load Balancing | 750 hours of classic or application load balancers
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 弹性负载均衡 | 750小时的经典或应用负载均衡器 |'
- en: '| S3 | 5 GB of S3 storage |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| S3 | 5 GB的S3存储空间 |'
- en: '| Lambda | 1,000,000 requests |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Lambda | 1,000,000次请求 |'
- en: '| CloudWatch | 10 custom metrics |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| CloudWatch | 10个自定义指标 |'
- en: '| SNS | 1,000,000 publications |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| SNS | 1,000,000次发布 |'
- en: '| CodeBuild | 100 build minutes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| CodeBuild | 100分钟的构建时间 |'
- en: '| CodePipeline | 1 active pipeline |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| CodePipeline | 1个活动管道 |'
- en: '| X-Ray | 100,000 traces |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| X-Ray | 100,000个跟踪 |'
- en: '| Key Management Service | 20,000 requests |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 密钥管理服务 | 20,000个请求 |'
- en: '| Secrets Manager | 30-day free trial period, then $0.40 per secret/month |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Secrets Manager | 30天免费试用期，然后每个秘密/月$0.40 |'
- en: As you can see, we will be covering a number of AWS services in this book and
    almost all of them are free, assuming you honor the usage limits described in
    the preceding table. In fact, the only service that we will use in this book that
    is not free is the AWS Fargate service, so bear this in mind when you read through
    the Fargate chapter and try to minimize your usage if you are worried about the
    cost of this.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您所看到的，我们将在本书中涵盖许多AWS服务，几乎所有这些服务都是免费的，假设您遵守前表中描述的使用限制。实际上，在本书中我们将使用的唯一一个不免费的服务是AWS
    Fargate服务，所以当您阅读Fargate章节时请记住这一点，并尽量减少使用，如果您担心成本。 '
- en: 'To sign up for free tier access, click on the **Create a Free Account** button
    at [https://aws.amazon.com/free/](https://aws.amazon.com/free/):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册免费套餐访问，请点击[https://aws.amazon.com/free/](https://aws.amazon.com/free/)上的**创建免费账户**按钮：
- en: '![](assets/de4a4e51-dad1-4756-ad13-ce2d6089757a.png)Creating a free account'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/de4a4e51-dad1-4756-ad13-ce2d6089757a.png)创建免费账户'
- en: You will be prompted to enter an email address, password, and AWS account name.
    It's important to understand that the email address and password you enter here
    is referred to as the root account for your AWS account, which has the highest
    level of access to your account. For the AWS account name, you can enter any name
    you like, however it must be unique across all of the other AWS accounts, so at
    the very least you won't be able to use the account name I chose, which is `docker-in-aws`.
    This account name is used when you sign in and is much easier to remember than
    your AWS account number, which is a 12-digit number.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被提示输入电子邮件地址、密码和AWS账户名称。重要的是要理解，您在这里输入的电子邮件地址和密码被称为您的AWS账户的根账户，这是对您的账户具有最高访问级别的账户。对于AWS账户名称，您可以输入任何您喜欢的名称，但它必须在所有其他AWS账户中是唯一的，所以至少您将无法使用我选择的账户名称，即`docker-in-aws`。这个账户名称在您登录时使用，比您的AWS账户号码更容易记住，后者是一个12位数字。
- en: The rest of the sign-up process is self-explanatory, so I won't bore you with
    the details here, but understand that you will be required to provide credit card
    details and will be responsible for any charges over and above the free tier usage
    limits. You will also be required to verify the phone number you specify during
    signup, which involves an automated phone call to your number, so ensure you enter
    a valid phone number during registration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注册过程的其余部分是不言自明的，所以我不会在这里详细说明，但请理解，您将需要提供信用卡详细信息，并将对超出免费使用限制的任何费用负责。您还需要验证注册期间指定的电话号码，这涉及自动电话呼叫到您的号码，因此请确保您在注册期间输入一个有效的电话号码。
- en: Installing Google Authenticator
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装谷歌身份验证器
- en: The steps described in this section are completely optional, however, as a security
    best practice you should always enable multi-factor authentication (MFA) on your
    root account. In fact, you should enable this for all user-based access to your
    AWS accounts, regardless of the level of access required. Enabling MFA is increasingly
    becoming a mandatory requirement for many organizations using AWS, so getting
    used to working with AWS when MFA is involved is important. Consequently, we will
    actually use MFA throughout this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述的步骤是完全可选的，但是作为安全最佳实践，您应该始终在根账户上启用多因素身份验证（MFA）。事实上，无论所需访问级别如何，您都应该为所有基于用户的AWS账户访问启用MFA。在许多使用AWS的组织中，启用MFA越来越成为强制性要求，因此在涉及MFA时习惯于使用AWS是很重要的。因此，我们实际上将在本书中始终使用MFA。
- en: Before you can use MFA, you need to have an MFA device, which can be a hardware
    or virtual MFA device. A virtual MFA device is typically installed in the form
    of an application on your smart phone, completing the multi-factor paradigm of
    something you know (password) and something you have (your phone).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用MFA之前，您需要有一个MFA设备，可以是硬件或虚拟MFA设备。虚拟MFA设备通常安装在您的智能手机上，作为应用程序的形式，完成了您所知道的东西（密码）和您所拥有的东西（您的手机）的多因素范式。
- en: A popular MFA application available for both Android and iOS is the Google Authenticator
    app, which you can download from the Google Play or Apple App Stores. Once you
    have installed the application, you can proceed to logging into the root account
    and setting up MFA access.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个流行的MFA应用程序可用于Android和iOS的是谷歌身份验证器应用程序，您可以从谷歌Play或苹果应用商店下载。安装应用程序后，您可以继续登录到根账户并设置MFA访问。
- en: Logging in as the root account
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以根账户登录
- en: After setting up and activating your account, you should be able to log in to
    the AWS console, which you can access at [https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和激活您的账户后，您应该能够登录到AWS控制台，您可以在[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)访问。
- en: After logging in with your root credentials, the first thing you should do is
    immediately enable MFA access. This provides an extra level of security, ensuring
    that if your username and password are compromised, an attacker cannot access
    your account without possession of your MFA device (in our example, that means
    the Google Authenticator application on your smart phone).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用根凭据登录后，您应立即启用MFA访问。这提供了额外的安全级别，确保如果您的用户名和密码被泄露，攻击者不能在没有您的MFA设备（在我们的示例中，这意味着您智能手机上的Google
    Authenticator应用程序）的情况下访问您的帐户。
- en: 'To enable MFA for your root account, select the drop-down that specifies your
    account name (in my case, this is **docker-in-aws**) and select **My Security
    Credentials**:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的根帐户启用MFA，请选择指定您帐户名称的下拉菜单（在我的情况下，这是“docker-in-aws”），然后选择“我的安全凭据”：
- en: '![](assets/bd93b230-35b0-4d24-b1dd-a148d744fe77.png)Accessing My Security Credentials'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/bd93b230-35b0-4d24-b1dd-a148d744fe77.png)访问我的安全凭据
- en: 'On the next prompt, click the **Continue to Security Credentials** button,
    expand the **Multi-factor authentication (MFA)** option on the **Your Security
    Credentials** page, and click the **Activate MFA** button:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个提示中，点击“继续到安全凭据”按钮，在“您的安全凭据”页面上展开“多因素身份验证（MFA）”选项，然后点击“激活MFA”按钮：
- en: '![](assets/b554b605-ddd9-4bce-a62c-1c6a6a7be323.png)The Your Security Credentials
    screen'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/b554b605-ddd9-4bce-a62c-1c6a6a7be323.png)您的安全凭据屏幕
- en: 'In the Manage MFA device screen, click on the **A virtual MFA device** option
    and click **Next Step** twice, at which point you will be presented with a QR
    code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在“管理MFA设备”屏幕上，点击“虚拟MFA设备”选项，然后连续点击两次“下一步”，此时您将看到一个QR码：
- en: '![](assets/56ca8281-9403-47b8-82c7-5c2b96e94fe3.png)Obtaining a QR code'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/56ca8281-9403-47b8-82c7-5c2b96e94fe3.png)获取QR码
- en: 'You can scan this code using the Google Authenticator application on your smart
    phone by clicking the add button, selecting **Scan barcode**, and scanning the
    QR code in the AWS console:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用智能手机上的Google Authenticator应用程序扫描此代码，方法是点击添加按钮，选择“扫描条形码”，然后在AWS控制台中扫描QR码：
- en: '![](assets/6ab37fc0-9b86-4ee4-9c57-b186a02ddb6b.jpg)  ![](assets/0a255dd8-9ba8-4e15-b55d-2d7e10bfc436.png)![](assets/5c785b9d-3b72-40db-9f65-dcbb2a5b3343.png)Registering
    an MFA device'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/6ab37fc0-9b86-4ee4-9c57-b186a02ddb6b.jpg)  ！[](assets/0a255dd8-9ba8-4e15-b55d-2d7e10bfc436.png)！[](assets/5c785b9d-3b72-40db-9f65-dcbb2a5b3343.png)注册MFA设备
- en: Once scanned, you need to input the six-digit code presented in the **Authentication
    code 1** input in the **Manage MFA device** screen.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦扫描完成，您需要在“管理MFA设备”屏幕上的“身份验证代码1”输入中输入显示的六位代码。
- en: 'Once the code rotates, enter the next value of the code into the **Authentication
    code 2** input and click the **Activate virtual MFA** button to complete the registration
    of your MFA device:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 代码旋转后，将代码的下一个值输入到“身份验证代码2”输入中，然后点击“激活虚拟MFA”按钮，以完成MFA设备的注册：
- en: '![](assets/e399192a-aa4e-43d0-a977-2e8ba4107479.png)Your Security Credentials
    with the MFA device'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/e399192a-aa4e-43d0-a977-2e8ba4107479.png)带有MFA设备的您的安全凭据
- en: Creating IAM users, groups, and roles
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IAM用户、组和角色
- en: After securing your root account using MFA, you should next immediately create
    identity access and management (IAM) users, groups, and roles in your account
    for day-to-day access. IAM is the recommended approach for day-to-day administration
    and access to your AWS account and you should restrict root account access for
    billing or emergency purposes only. Before you can continue, you will need to
    know your AWS account ID, which you can see in the previous screenshot, in the
    serial number of your MFA device (note that this will be a different number than
    that which is shown). Write this account number down, as it will be required as
    you configure various IAM resources.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MFA保护根帐户后，您应立即在您的帐户中创建身份访问和管理（IAM）用户、组和角色以进行日常访问。 IAM是日常管理和访问AWS帐户的推荐方法，您应仅限制根帐户访问计费或紧急情况。在继续之前，您需要知道您的AWS帐户ID，您可以在上一个屏幕截图中看到，在您的MFA设备的序列号中（请注意，这将与显示的序列号不同）。记下这个帐户号，因为在配置各种IAM资源时将需要它。
- en: Creating IAM roles
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IAM角色
- en: 'The standard practice for creating IAM resources is to create *roles* that
    a given user can assume, which grants the user elevated privileges for a limited
    period of time (typically up to 1 hour). At a minimum, you need to create one
    IAM role by default:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建IAM资源的标准做法是创建用户可以承担的*角色*，这将为用户在有限的时间内（通常最多1小时）授予提升的特权。最低限度，您需要默认创建一个IAM角色：
- en: '**admin**: This role grants full administrative control of the account, except
    for billing information'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员：此角色授予对帐户的完全管理控制，但不包括计费信息
- en: 'To create the admin role, select **Services** | **IAM** from the AWS console,
    select **Roles** from the left hand menu, and click on the **Create role** button.
    In the **Select type of trusted entity** screen, select the **Another AWS account**
    option and configure your account ID in the **Account ID** field:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建管理员角色，请从AWS控制台中选择“服务”|“IAM”，从左侧菜单中选择“角色”，然后单击“创建角色”按钮。在“选择受信任的实体类型”屏幕中，选择“另一个AWS帐户”选项，并在“帐户ID”字段中配置您的帐户ID：
- en: '![](assets/9ebc3797-e018-48e0-80a1-d81b577a1dc2.png)Selecting a trusted entity
    for admin role'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 选择受信任的实体作为管理员角色
- en: 'After clicking the **Next: Permissions** button, select the **AdministratorAccess**
    policy, which grants the role administrative access:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“下一步：权限”按钮后，选择“AdministratorAccess”策略，该策略授予角色管理访问权限：
- en: '![](assets/5d5dadb4-76a0-43fe-b957-d3a0ed3250f0.png)Attaching a policy to an
    IAM role'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将策略附加到IAM角色
- en: 'Finally, specify a role name of **admin** and then click **Create role** to
    complete the creation of the admin role:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，指定一个名为“admin”的角色名称，然后单击“创建角色”以完成管理员角色的创建：
- en: '![](assets/75f3e14e-ff1a-42e4-8893-9f67a1fdfcec.png)Creating an IAM role'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建IAM角色
- en: 'This creates the admin IAM role. If you click on the newly created role, take
    note of the Role ARN (Amazon Resource Name) of the role, as you will need this
    value later on:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建管理员IAM角色。如果单击新创建的角色，请注意角色的角色ARN（Amazon资源名称），因为您以后会需要这个值：
- en: '![](assets/945a886e-13aa-4153-894a-9e969d65f0e8.png)The admin role'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员角色
- en: Creating an Administrators group
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管理员组
- en: With an administrative role in place, the next step is to assign your role to
    a user or group. Instead of assigning privileges directly to a user, it is strongly
    recommended to instead assign them to groups, as this provides a much more scalable
    way of managing permissions. Given we have created a role with administrative
    privileges, it now makes sense to create a group called Administrators, which
    will be granted permission to *assume* the admin role you just created. Note that
    I refer to assuming a role, which is analogous to Linux and Unix systems, where
    you log in as a regular user and then use the `sudo` command to temporarily assume
    root privileges.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了管理角色之后，下一步是将您的角色分配给用户或组。与其直接为用户分配权限，强烈建议改为将其分配给组，因为这提供了一种更可扩展的权限管理方式。鉴于我们已经创建了具有管理权限的角色，现在创建一个名为管理员的组是有意义的，该组将被授予*假定*您刚刚创建的admin角色的权限。请注意，我指的是假定一个角色，这类似于Linux和Unix系统，在那里您以普通用户身份登录，然后使用`sudo`命令临时假定根权限。
- en: 'You will learn how to assume a role later on in this chapter, but for now you
    need to create the Administrators group by selecting **Groups** from the left
    hand menu in the IAM console and clicking the **Create New Group** button:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章后面学习如何假定一个角色，但现在您需要通过在IAM控制台的左侧菜单中选择**组**并单击**创建新组**按钮来创建管理员组。
- en: '![](assets/02d4df30-8fb3-4a62-af2f-7770c0acddb4.png)Creating an IAM group'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/02d4df30-8fb3-4a62-af2f-7770c0acddb4.png)创建IAM组'
- en: 'You first need to specify a **Group Name** of Administrators and then click
    **Next Step** twice to skip the **Attach Policy** screen and finally click **Create
    Group** to complete creation of the group:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先需要指定一个名为管理员的**组名称**，然后单击**下一步**两次以跳过**附加策略**屏幕，最后单击**创建组**以完成组的创建：
- en: '![](assets/bd6acf11-5675-4b42-aeec-0a51e1c66515.png)The Administrators group'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bd6acf11-5675-4b42-aeec-0a51e1c66515.png)管理员组'
- en: 'This has created a group with no attached permissions, however if you click
    on the group and select **Permissions**, you now have the option to create an
    inline policy:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个没有附加权限的组，但是如果您单击该组并选择**权限**，现在您有创建内联策略的选项：
- en: '![](assets/b3727916-33e9-467c-9529-620aba3b7bbe.png)Creating an inline policy'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b3727916-33e9-467c-9529-620aba3b7bbe.png)创建内联策略'
- en: 'After selecting the click here link in the preceding screenshot, choose the
    **Custom Policy** option and click Select, which allows you to configure an IAM
    policy document that grants the ability to assume the `admin` role you created
    earlier:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中选择点击此处链接后，选择**自定义策略**选项并单击选择，这将允许您配置一个IAM策略文档，以授予假定您之前创建的`admin`角色的能力：
- en: '![](assets/1d451ff2-8214-462c-a2f8-21c0e64d41a4.png)Administrators group inline
    policy'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员组内联策略
- en: The policy includes a single statement that allows the action `sts:AssumeRole` –
    `sts` here refers to the Security Token Service, which is the service you interact
    with whenever you assume a role (the action of assuming a role grants you temporary
    session credentials linked to the role you have assumed). Notice that the resource
    is the ARN of the IAM role you created, so this policy grants anybody that is
    a member of the **Administrators** group to assume the **admin** role. After clicking
    the **Apply Policy** button, you will have successfully created and configured
    the **Administrators** group.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 该策略包括一个允许执行`sts:AssumeRole`操作的声明 - 这里的`sts`指的是安全令牌服务，这是您在假定角色时与之交互的服务（假定角色的操作会授予您与所假定角色相关联的临时会话凭证）。请注意，资源是您创建的IAM角色的ARN，因此该策略允许任何属于**管理员**组的成员假定**admin**角色。单击**应用策略**按钮后，您将成功创建和配置**管理员**组。
- en: Creating a Users group
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用户组
- en: The other group I typically recommend creating is a Users group, which every
    human user accessing your AWS account should belong to, including your administrators
    (who will also be members of the Administrators group).  The core function of
    the Users group is to ensure that with the exception of a very small set of permissions,
    all actions performed by any member of the users group must be MFA authenticated,
    regardless of the permissions that may be granted to that user via other groups.
    This is essentially a force MFA policy, which you can read more about at [https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/](https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/),
    and implementing this approach adds to the overall security protections you put
    in place for access to your AWS accounts. Note that the policy does allow the
    user to perform a minimal set of operations without requiring MFA, which includes
    logging in, changing the user's password, and most importantly allowing the user
    to register an MFA device. This allows new users to log in with a temporary password,
    change their password, and self-enroll their MFA device, and once the user has
    logged out and logged back in with MFA, the policy does permit the user to create
    an AWS access key for API and CLI access.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常建议创建的另一个组是用户组，每个访问您的AWS账户的人类用户都应该属于该组，包括您的管理员（他们也将成为管理员组的成员）。用户组的核心功能是确保除了一小部分权限外，用户组的任何成员执行的所有操作都必须经过MFA身份验证，而不管通过其他组可能授予该用户的权限。这本质上是一个强制MFA策略，您可以在[https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/](https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/)上阅读更多相关信息，并且实施这种方法可以增加您为访问AWS账户设置的整体安全保护。请注意，该策略允许用户执行一小部分操作而无需MFA，包括登录、更改用户密码，以及最重要的是允许用户注册MFA设备。这允许新用户使用临时密码登录，更改密码，并自行注册MFA设备，一旦用户注销并使用MFA重新登录，策略允许用户创建用于API和CLI访问的AWS访问密钥。
- en: To implement the Users group, we first need to create a managed IAM policy,
    which is a more scalable and reusable mechanism for assigning policies to groups
    and roles when compared with the inline approach we took in the preceding screenshot.
    To create a new managed policy, select **Policies** from the right hand menu and
    click on the **Create policy** button, which opens the **Create policy** screen.
    The policy you need to create is quite extensive and is published in a GitHub
    gist at [https://bit.ly/2KfNfAz](https://bit.ly/2KfNfAz), which is based upon
    the policy discussed in the blog post referenced previously, adding a few additional
    security enhancements.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要实施用户组，我们首先需要创建一个托管IAM策略，与我们在前面的截图中采用的内联方法相比，这是一种更可扩展和可重用的机制，用于将策略分配给组和角色。要创建新的托管策略，请从右侧菜单中选择**策略**，然后单击**创建策略**按钮，这将打开**创建策略**屏幕。您需要创建的策略非常广泛，并且在GitHub的要点中发布，网址为[https://bit.ly/2KfNfAz](https://bit.ly/2KfNfAz)，该策略基于先前引用的博客文章中讨论的策略，添加了一些额外的安全增强功能。
- en: 'Note that the gist includes a placeholder called `PASTE_ACCOUNT_NUMBER` within
    the policy document, so you will need to replace this with your actual AWS account
    ID:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，要点包括在策略文件中包含一个名为`PASTE_ACCOUNT_NUMBER`的占位符，因此您需要将其替换为您的实际AWS账户ID：
- en: '![](assets/f65c5220-257c-44e3-be1b-0aa1c9b60e26.png)Creating an IAM managed
    policy'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f65c5220-257c-44e3-be1b-0aa1c9b60e26.png)创建一个IAM托管策略'
- en: After clicking the **Review policy** button, you need to configure a name for
    the policy, which we will call `RequireMFAPolicy`, and, after clicking **Create
    policy** to create the policy, you need to create a Users group using the same
    instructions you followed earlier in this chapter when you created the Administrators
    group.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Review policy**按钮后，您需要为策略配置一个名称，我们将其称为`RequireMFAPolicy`，然后点击**Create policy**创建策略，您需要按照本章前面创建Administrators组时的相同说明创建一个Users组。
- en: 'When you get to the **Attach Policy** screen while you are creating the Users
    group, you can type in the first few letters of the RequireMFAPolicy managed policy
    you just created, which you need to attach to the group:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在创建Users组时到达**Attach Policy**屏幕时，您可以输入刚刚创建的RequireMFAPolicy托管策略的前几个字母，然后将其附加到组中。
- en: '![](assets/a9c05282-0d04-4a82-8e86-63463f523563.png)Attaching the RequireMFAPolicy
    to the Users group'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a9c05282-0d04-4a82-8e86-63463f523563.png)将RequireMFAPolicy附加到Users组'
- en: After completing the wizard for creating the **Users** group, you should now
    have an **Administrators** group and **Users** group in your IAM console.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 完成创建**Users**组的向导后，您现在应该在IAM控制台中拥有一个**Administrators**组和**Users**组。
- en: Creating an IAM user
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IAM用户
- en: The final IAM setup task you need to perform is to create an IAM user to administer
    your account. As discussed earlier in this chapter, you should never use your
    root credentials for day-to-day administrative tasks, and instead create an administrative
    IAM user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行的最后一个IAM设置任务是创建一个IAM用户来管理您的帐户。正如本章前面讨论的那样，您不应该使用根凭证进行日常管理任务，而是创建一个管理IAM用户。
- en: 'To create a user, select **Users** from the right-hand menu in the IAM console
    and click on the **Add user** button. In the **Add user** screen, specify a **User
    name** and only select **AWS Management Console access** for **Access type**,
    ensuring that the **Console password** is set to **Autogenerated password** and
    the **Require password reset** option is set:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建用户，请从IAM控制台的右侧菜单中选择**Users**，然后点击**Add user**按钮。在**Add user**屏幕上，指定一个**User
    name**，并且只选择**AWS Management Console access**作为**Access type**，确保**Console password**设置为**Autogenerated
    password**，并且**Require password reset**选项已设置：
- en: '![](assets/6e4cf11a-4fb8-4226-adcc-a0f4d9cb667b.png)Creating a new user'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6e4cf11a-4fb8-4226-adcc-a0f4d9cb667b.png)创建新用户'
- en: 'After clicking the **Next: Permissions** button, add the user to the **Administrators**
    and **Users** groups you created earlier:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '点击**Next: Permissions**按钮后，将用户添加到您之前创建的**Administrators**和**Users**组中：'
- en: '![](assets/f9dab5ca-1eb6-4942-a07a-d8acd12828aa.png)Adding users to groups'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f9dab5ca-1eb6-4942-a07a-d8acd12828aa.png)将用户添加到组中'
- en: 'You can now click on the **Next: review** and **Create user **buttons to create
    the user. The user will be created and, because you chose to create an autogenerated
    password, you can click the **Show** link in the **Password** field to reveal
    the initial password for the user. Take note of this value, as you will need it
    to test logging in as the IAM user you just created:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，您可以点击**Next: review**和**Create user**按钮来创建用户。用户将被创建，因为您选择创建了自动生成的密码，您可以点击**Password**字段中的**Show**链接来显示用户的初始密码。请注意这个值，因为您将需要它来测试作为刚刚创建的IAM用户登录：'
- en: '![](assets/8b50427a-f35e-4772-a692-8e0664aebdf8.png)Newly created user temporary
    password'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8b50427a-f35e-4772-a692-8e0664aebdf8.png)新创建的用户临时密码'
- en: Logging in as an IAM user
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为IAM用户登录
- en: 'Now that you have created an IAM user, you can test the first time login experience
    for the user by clicking your account alias/ID in the menu and selecting **Sign
    Out**. If you now click on the **Sign In to the Consol**e button or browse to [https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home),
    select the **Sign in to a different account** option, enter your account alias
    or account ID, and click **Next**, and then enter the username and temporary password
    of the IAM user you just created:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了IAM用户，您可以通过单击菜单中的帐户别名/ID并选择**注销**来测试用户的首次登录体验。如果您现在单击**登录到控制台**按钮或浏览到[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)，选择**登录到其他帐户**选项，输入您的帐户别名或帐户ID，然后单击**下一步**，然后输入刚刚创建的IAM用户的用户名和临时密码：
- en: '![](assets/75e79bbf-c290-4a2d-a106-6f13f32561bb.png)Logging in for the first
    time as an IAM user'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/75e79bbf-c290-4a2d-a106-6f13f32561bb.png)首次以IAM用户身份登录'
- en: 'You will then be prompted to enter a new password:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后会提示您输入新密码：
- en: '![](assets/7deaf251-e404-41d0-961d-de7d00b8e18e.png)Entering a new password'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7deaf251-e404-41d0-961d-de7d00b8e18e.png)输入新密码'
- en: After confirming the password change, you will have successfully logged in as
    the new user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 确认密码更改后，您将成功以新用户身份登录。
- en: Enabling MFA for an IAM user
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为IAM用户启用MFA
- en: At this point, you have logged in with an IAM user for the first time, and the
    next step you need to perform is to enroll your MFA device for the new user. To
    do this, select **Services** | **IAM** to open the IAM console, select **Users**
    from the left hand menu, and click on your IAM user.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已经首次使用IAM用户登录，接下来需要执行的步骤是为新用户注册MFA设备。要做到这一点，选择**服务** | **IAM** 打开IAM控制台，从左侧菜单中选择**用户**，然后点击您的IAM用户。
- en: 'In the **Security credentials** tab, click on the pencil icon next to the **Assigned
    MFA device** field:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在**安全凭证**选项卡中，单击**分配的MFA设备**字段旁边的铅笔图标：
- en: '![](assets/aebab6f6-7c8a-4cd4-9671-dccd26b7dc3e.png)IAM user security credentials'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/aebab6f6-7c8a-4cd4-9671-dccd26b7dc3e.png)IAM用户安全凭证'
- en: The Manage MFA Device dialog will pop up, which allows you to register a new
    MFA device. The process for this is identical to how you set up MFA for the root
    account earlier in this chapter, so I won't repeat the instructions for this,
    however once you have registered your MFA device, it is important for you to log
    out and log back in to the console to force MFA authentication.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 管理MFA设备对话框将弹出，允许您注册新的MFA设备。这个过程与本章前面为根帐户设置MFA的过程相同，因此我不会重复说明这个过程，但是一旦您注册了MFA设备，重要的是您登出并重新登录到控制台以强制进行MFA身份验证。
- en: 'If you have configured everything correctly, when you log back in to the console,
    you should be prompted for an MFA code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经正确配置了一切，当您再次登录到控制台时，应该会提示您输入MFA代码：
- en: '![](assets/48de9696-0af0-40f0-bded-e298bd27a327.png)MFA prompt'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/48de9696-0af0-40f0-bded-e298bd27a327.png)MFA提示'
- en: Assuming an IAM role
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设IAM角色
- en: 'Once you have completed registering an MFA device and have logged out and back
    in to the AWS console using MFA, you now meet the requirements that cause the
    following statement in the `RequireMFAPolicy` you created back previously to not
    be applied:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了注册MFA设备并使用MFA登出并重新登录到AWS控制台，您现在满足了导致您之前创建的`RequireMFAPolicy`中的以下语句不被应用的要求：
- en: '[PRE0]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, it's important to note that the IAM effect of `Deny`
    is absolute—as soon as IAM encounters a `Deny` for a given permission or set of
    permissions, there is no way for that permission to be permitted. The `Condition`
    property however makes this broad reaching `Deny` conditional—it will only be
    applied in the event that the special condition `aws:MultiFactorAuthAge` is false,
    which is the case if you have logged in without MFA.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，重要的是要注意`Deny`的IAM效果是绝对的——一旦IAM遇到给定权限或一组权限的`Deny`，那么该权限就无法被允许。然而，`Condition`属性使这个广泛的`Deny`有条件——只有在特殊条件`aws:MultiFactorAuthAge`为false的情况下才会应用，这种情况发生在您没有使用MFA登录时。
- en: Given that the IAM user has logged in via MFA and is attached to the **Administrators**
    group that has permission to assume the **admin** role, there is nothing in the
    `RequireMFAPolicy` that is denying this action, so you should be able to now assume
    the **admin** role.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 假设IAM用户已通过MFA登录，并附加到具有承担**管理员**角色权限的**Administrators**组，那么`RequireMFAPolicy`中没有任何内容会拒绝此操作，因此您现在应该能够承担**管理员**角色。
- en: 'To assume the admin role using the AWS console, click on the drop down that
    reads `<username> @ <account-name-or-id>` and select **Switch Role**:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用AWS控制台承担管理员角色，请点击下拉菜单，选择**切换角色**：
- en: '![](assets/7579bba8-fdb1-4462-a458-03ea1392ffe7.png)Switching roles'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7579bba8-fdb1-4462-a458-03ea1392ffe7.png)切换角色'
- en: 'After clicking on the **Switch Role** button, you will be prompted to enter
    an account ID or name, and the role that you want to assume in the configure account:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**切换角色**按钮后，您将被提示输入帐户ID或名称，以及您想要在配置帐户中承担的角色：
- en: '![](assets/b934817f-04fb-44ab-8a4b-ba8ad803e9a3.png)Switching roles'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b934817f-04fb-44ab-8a4b-ba8ad803e9a3.png)切换角色'
- en: 'You should now notice that the header in the AWS console indicates that you
    have to assume the admin role, and you now have full administrative access to
    your AWS account:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该注意到AWS控制台的标题指示您必须承担管理员角色，现在您已经完全具有对AWS帐户的管理访问权限。
- en: '![](assets/582a79e0-cc9d-45da-ab8f-8e273dcb2a0a.png)Assumed admin roleFor the
    remainder of this book, whenever you need to perform administrative tasks in your
    account, I will be assuming you have assumed the admin role as demonstrated in
    the previous screenshot.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/582a79e0-cc9d-45da-ab8f-8e273dcb2a0a.png)承担管理员角色在本书的其余部分中，每当您需要在您的帐户中执行管理任务时，我将假定您已经承担了管理员角色，就像在之前的屏幕截图中演示的那样。'
- en: Creating an EC2 Key Pair
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建EC2密钥对
- en: A key setup task that is required if you are going to running any EC2 instances
    in your AWS account is to establish one or more EC2 key pairs, which for Linux
    EC2 instances, can be used to define an SSH key pair that grants SSH access to
    your EC2 instances.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算在AWS帐户中运行任何EC2实例，那么需要完成的一个关键设置任务就是建立一个或多个EC2密钥对，对于Linux EC2实例，可以用来定义一个SSH密钥对，以授予对EC2实例的SSH访问。
- en: When you create an EC2 key pair, an SSH public/private key pair will be automatically
    generated, with the SSH public key being stored as a named EC2 key pair in AWS,
    and the corresponding SSH private key downloaded to your local client.  If you
    subsequently create any EC2 instances and reference a named EC2 key pair at instance
    creation, you will be able to automatically use the associated SSH private key
    to access your EC2 instances.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建EC2密钥对时，将自动生成一个SSH公钥/私钥对，其中SSH公钥将作为命名的EC2密钥对存储在AWS中，并相应的SSH私钥下载到您的本地客户端。如果随后创建任何EC2实例并在实例创建时引用命名的EC2密钥对，您将能够自动使用相关的SSH私钥访问您的EC2实例。
- en: SSH access to Linux EC2 instances requires you to use the SSH private key associated
    with the configured EC2 key pair for the instance, and also requires appropriate
    network configuration and security groups to permit access to the EC2 instance
    SSH port from wherever your SSH client is located.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Linux EC2实例的SSH需要您使用与配置的EC2密钥对关联的SSH私钥，并且还需要适当的网络配置和安全组，以允许从您的SSH客户端所在的任何位置访问EC2实例的SSH端口。
- en: 'To create an EC2 Key Pair, first navigate to **Services | EC2** in the AWS
    console, select **Key Pairs** from the **Network & Security** section within the
    left hand menu, and then click on the Create Key Pair button:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建EC2密钥对，首先在AWS控制台中导航到**服务| EC2**，从左侧菜单中的**网络和安全**部分中选择**密钥对**，然后单击**创建密钥对**按钮：
- en: '![](assets/52541551-506e-42ce-9fdf-02cfa8b5a6f9.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52541551-506e-42ce-9fdf-02cfa8b5a6f9.png)'
- en: 'Here you have configured an EC2 key pair name admin, and after clicking on
    the Create button, a new EC2 key pair will be created, with the SSH private key
    downloaded to your computer:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您已配置了一个名为admin的EC2密钥对名称，并在单击“创建”按钮后，将创建一个新的EC2密钥对，并将SSH私钥下载到您的计算机：
- en: '![](assets/b793d0f0-fcb8-4f02-9283-228dcf9a540b.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b793d0f0-fcb8-4f02-9283-228dcf9a540b.png)'
- en: 'At this point you need to move the SSH private key to an appropriate location
    on your computer, and modify the default permissions on the private key file as
    demonstrated below:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您需要将SSH私钥移动到计算机上的适当位置，并按下面的示例修改私钥文件的默认权限：
- en: '[PRE1]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that if you don''t modify the permissions using the chmod command, when
    you attempt to use the SSH key you will be presented with the following error:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您不使用chmod命令修改权限，当您尝试使用SSH密钥时，将会出现以下错误：
- en: '[PRE2]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the AWS CLI
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS CLI
- en: So far in this chapter, you have only interacted with the AWS console, which
    is accessed from your web browser. Although having AWS console access is very
    useful, there are many situations where you may prefer to use command-line tools,
    especially where you need to automate key operational and deployment tasks.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，您只与AWS控制台进行了交互，该控制台可以从您的Web浏览器访问。虽然拥有AWS控制台访问权限非常有用，但在许多情况下，您可能更喜欢使用命令行工具，特别是在需要自动化关键操作和部署任务的情况下。
- en: Installing the AWS CLI
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWS CLI
- en: The AWS CLI is written in Python, and therefore you must have either Python
    2 or Python 3 installed, along with the PIP Python package manager.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI是用Python编写的，因此您必须安装Python 2或Python 3，以及PIP Python软件包管理器。
- en: The instructions and examples used throughout this book assume a MacOS or Linux
    environment.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中使用的说明和示例假定您使用的是MacOS或Linux环境。
- en: For instructions on how to set up the AWS CLI using Windows, refer to [https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html](https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在Windows上设置AWS CLI的说明，请参阅[https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html](https://docs.aws.amazon.com/cli/latest/userguide/awscli-install-windows.html)。
- en: 'Assuming you have met these prerequisites, you can install the AWS CLI in a
    terminal using the `pip` command, along with the `--upgrade` flag to upgrade to
    the latest AWS CLI version if already installed, and the `--user` flag to avoid
    modifying your system libraries:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已满足这些先决条件，您可以在终端中使用`pip`命令安装AWS CLI，并使用`--upgrade`标志升级到最新的AWS CLI版本（如果已安装），并使用`--user`标志避免修改系统库：
- en: '[PRE3]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Depending on your environment, if you are using Python 3, you may need to replace
    the `pip install` command with `pip3 install`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的环境，如果您使用的是Python 3，您可能需要用`pip3 install`命令替换`pip install`。
- en: 'If you now attempt to run an AWS CLI command, the command will fail, indicating
    that you must configure your environment:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试运行AWS CLI命令，该命令将失败，并指示您必须配置您的环境：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating an AWS access key
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AWS访问密钥
- en: 'If you run the `aws configure` command as suggested in the preceding code,
    you will be prompted to enter an AWS Access Key ID:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照前面的代码建议运行`aws configure`命令，将提示您输入AWS访问密钥ID：
- en: '[PRE5]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To use the AWS CLI and AWS SDKs, you must create an AWS access key, which is
    a credential that consists of an access key ID and secret access key value. To
    create an access key, open the IAM dashboard in the AWS console, select **Users**
    from the left hand menu, and then click on your username.  In the **Security credentials**
    tab, under the **Access keys** section, click on the **Create access key** button,
    which will open a dialog box that allows you to view both the access key ID and
    secret access key value:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用AWS CLI和AWS SDK，您必须创建AWS访问密钥，这是由访问密钥ID和秘密访问密钥值组成的凭据。要创建访问密钥，请在AWS控制台中打开IAM仪表板，从左侧菜单中选择**用户**，然后单击您的用户名。在**安全凭据**选项卡下的**访问密钥**部分，单击**创建访问密钥**按钮，这将打开一个对话框，允许您查看访问密钥ID和秘密访问密钥值：
- en: '![](assets/fcc8616b-3a14-43ac-8b78-b7449ca7fc29.png)Access key credentials'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/fcc8616b-3a14-43ac-8b78-b7449ca7fc29.png)访问密钥凭证'
- en: Take a note of both the access key ID and secret access key values, as you will
    need these values to configure your local environment.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 记下访问密钥ID和秘密访问密钥值，因为您将需要这些值来配置您的本地环境。
- en: Configuring the AWS CLI
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置AWS CLI
- en: 'Back in your terminal, you can now complete the `aws configure` setup process:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 回到您的终端，现在您可以完成`aws configure`设置过程：
- en: '[PRE6]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you now attempt to run the `aws ec2 describe-vpcs` command attempted earlier,
    the command still fails; however, the error is different:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试运行之前尝试过的`aws ec2 describe-vpcs`命令，该命令仍然失败；但是，错误是不同的：
- en: '[PRE7]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The problem now is that you are not authorized to execute this command, given
    the access key you just created is linked to your user account, and you must assume
    the admin role to obtain administrative privileges.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是，您未被授权执行此命令，因为您刚刚创建的访问密钥与您的用户帐户相关联，您必须假定管理员角色以获得管理特权。
- en: Configuring the AWS CLI to assume a role
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置AWS CLI以假定角色
- en: At this point, the AWS CLI is running in the context of your user account and
    you need to configure the CLI to assume the admin role to be able to do anything
    useful.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，AWS CLI正在以您的用户帐户的上下文中运行，您需要配置CLI以假定管理员角色以能够执行任何有用的操作。
- en: 'When you run the `aws configure` command, the AWS CLI creates two important
    files in a folder called `.aws` within your home directory:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`aws configure`命令时，AWS CLI在名为`.aws`的文件夹中创建了两个重要文件，该文件夹位于您的主目录中：
- en: '[PRE8]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `credentials` file holds your AWS credentials in one or more named profiles:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`credentials`文件保存了一个或多个命名配置文件中的AWS凭据：'
- en: '[PRE9]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, notice that the `aws configure` command created a profile
    called `default` and stored the access key ID and secret access key values in
    this file. As a best practice, particularly if you are working with multiple AWS
    accounts, I recommend avoiding the use of the default profile, as the AWS CLI
    will use this profile by default if you enter an AWS CLI command. You will soon
    learn how to work with multiple AWS accounts by using named profiles, and if you
    have a default profile, it is very easy to accidentally forget to specify the
    profile you want to work with and accidentally perform an unexpected operation
    in the account reference by your default profile. I prefer to name each profile
    based upon the name of the account you are working with—for example, here, I have
    renamed the default profile in the credentials file to `docker-in-aws`, given
    I named my AWS account `docker-in-aws`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，请注意`aws configure`命令创建了一个名为`default`的配置文件，并将访问密钥ID和秘密访问密钥值存储在该文件中。作为最佳实践，特别是如果您正在使用多个AWS账户，我建议避免使用默认配置文件，因为如果输入AWS
    CLI命令，AWS CLI将默认使用此配置文件。您很快将学会如何使用命名配置文件来处理多个AWS账户，如果您有一个默认配置文件，很容易忘记指定要使用的配置文件，并在默认配置文件引用的账户中意外执行操作。我更喜欢根据您正在使用的账户的名称命名每个配置文件，例如，在这里，我已将凭据文件中的默认配置文件重命名为`docker-in-aws`，因为我将我的AWS账户命名为`docker-in-aws`：
- en: '[PRE10]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The other file that is created by the AWS CLI is the `~/.aws/config` file,
    which is demonstrated as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI创建的另一个文件是`~/.aws/config`文件，如下所示：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This file includes named configuration profiles, and because you specified
    a default region when you ran the `aws configure` command, a `region` variable
    has been added to the `default` profile. Configuration profiles support a number
    of variables that allow you to perform more advanced tasks like automatically
    assuming a role, so this is where we need to configure the CLI to assume the `admin`
    role we created earlier in this chapter. Given that we renamed the `default` profile
    in the `credentials` file, the following code demonstrates renaming the `default`
    profile to `docker-in-aws` and adding support for assuming the `admin` role:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包括命名的配置文件，并且因为您在运行`aws configure`命令时指定了默认区域，所以`default`配置文件中已经添加了`region`变量。配置文件支持许多变量，允许您执行更高级的任务，比如自动假定角色，因此这就是我们需要配置CLI以假定我们在本章前面创建的`admin`角色的地方。鉴于我们已经在`credentials`文件中重命名了`default`配置文件，以下代码演示了将`default`配置文件重命名为`docker-in-aws`并添加支持假定`admin`角色的操作：
- en: '[PRE12]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that we add the `profile` keyword in front of the profile name, which
    is required when configuring named configuration profiles. We also configure a
    number of variables in the profile:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在配置命名配置文件时，我们在配置文件名前面添加了`profile`关键字，这是必需的。我们还在配置文件中配置了许多变量：
- en: '`source_profile`: This is the credential profile that should be used to obtain
    credentials. We specify `docker-in-aws`, given that we renamed the profile in
    the `credentials` file earlier to `docker-in-aws`.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source_profile`：这是应该用于获取凭据的凭据配置文件。我们指定`docker-in-aws`，因为我们之前已将凭据文件中的配置文件重命名为`docker-in-aws`。'
- en: '`role_arn`: This is the ARN of the IAM role to assume. Here, you specify the
    ARN of the `admin` role you created in the previous screenshot.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`role_arn`：这是要假定的IAM角色的ARN。在这里，您指定了您在上一个截图中创建的`admin`角色的ARN。'
- en: '`role_session_name`: This is the name of the temporary session that is created
    when you assume the configured role. As a best practice, you should specify your
    IAM username, as this helps with auditing any actions that you perform using the
    role. When you use an assumed role to perform an action in AWS, your identity
    is actually `arn:aws:sts::<account-id>:assumed-role/<role-name>/<role-session-name>`,
    so setting a username as the role session name ensures the user that performed
    the operation can be easily determined.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`role_session_name`：这是在承担配置的角色时创建的临时会话的名称。作为最佳实践，您应该指定您的IAM用户名，因为这有助于审计您使用角色执行的任何操作。当您使用承担的角色在AWS中执行操作时，您的身份实际上是`arn:aws:sts::<account-id>:assumed-role/<role-name>/<role-session-name>`，因此将用户名设置为角色会话名称可以确保可以轻松确定执行操作的用户。'
- en: '`mfa_serial`: This is the ARN of the MFA device that should be used to assume
    the role. Given your IAM user belongs to the Users group, MFA is required for
    all actions, including any API calls made via the AWS CLI or SDK. By configuring
    this variable, the AWS CLI will automatically prompt you for an MFA code before
    attempting to assume the configured role. You can obtain the ARN of your MFA device
    in the Security credentials tab of your IAM user account (see the Assigned MFA
    device field, however it will always follow a naming convention of `arn:aws:iam::<account-id>:mfa/<user-id>`.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mfa_serial`：这是应该用于承担角色的MFA设备的ARN。鉴于您的IAM用户属于用户组，对于所有操作，包括通过AWS CLI或SDK进行的任何API调用，都需要MFA。通过配置此变量，AWS
    CLI将在尝试承担配置的角色之前自动提示您输入MFA代码。您可以在IAM用户帐户的安全凭据选项卡中获取MFA设备的ARN（请参阅分配的MFA设备字段，但它将始终遵循`arn:aws:iam::<account-id>:mfa/<user-id>`的命名约定）。'
- en: See [https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)
    for a complete description of all variables supported in both credentials and
    configuration profiles.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有关支持凭据和配置文件中的所有变量的完整描述，请参阅[https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)。
- en: Configuring the AWS CLI to use a named profile
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置AWS CLI以使用命名配置文件
- en: 'With the configuration in place, you no longer have a default profile in place,
    so running the AWS CLI will return the same output. To use a named profile, you
    have two options available:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有了配置，您就不再有默认配置文件，因此运行AWS CLI将返回相同的输出。要使用命名配置文件，您有两个选项：
- en: Specify the profile name using the `--profile` flag in the AWS CLI command.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS CLI命令中使用`--profile`标志指定配置文件名称。
- en: Specify the profile name in an environment variable called `AWS_PROFILE`. This
    is my preferred mechanism and I will assume that you are taking this approach
    throughout this book.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在名为`AWS_PROFILE`的环境变量中指定配置文件名称。这是我首选的机制，我将假设您在本书中一直采用这种方法。
- en: 'The preceding code demonstrates using both of these approaches:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码演示了使用这两种方法：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding example, notice that when you run first run the `aws` command,
    you are prompted for your MFA token, however when you next run the command, you
    are not prompted. This is because, by default, the temporary session credentials
    obtained from assuming a role are valid for one hour, and the AWS CLI caches the
    credentials so that you reuse them without having to refresh the credentials on
    each command execution. Of course, after one hour, you will be prompted once again
    for your MFA token, given that the temporary session credentials will have expired.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，请注意当您首次运行`aws`命令时，会提示您输入MFA令牌，但是当您下次运行该命令时，将不会提示您。这是因为默认情况下，从承担角色获取的临时会话凭据在一个小时内有效，并且AWS
    CLI会缓存凭据，以便您在不必在每次执行命令时刷新凭据的情况下重用它们。当然，在一个小时后，由于临时会话凭据将会过期，您将再次被提示输入MFA令牌。
- en: One other interesting point to note in the preceding code is the use of the
    `--query` flag in the last command example. This allows you to specify a JMESPath
    query, which is a query language that can be used to query JSON data structures.
    The AWS CLI outputs JSON by default, so you can use queries to extract specific
    information from the AWS CLI output. Throughout this book, I will frequently use
    examples of these queries, and you can read more about the JMESPath query language
    at [http://jmespath.org/tutorial.html](http://jmespath.org/tutorial.html).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，还有一个有趣的地方需要注意，就是在最后一个命令示例中使用了`--query`标志。这允许您指定一个JMESPath查询，这是一种用于查询JSON数据结构的查询语言。AWS
    CLI默认输出JSON，因此您可以使用查询从AWS CLI输出中提取特定信息。在本书中，我将经常使用这些查询的示例，您可以在[http://jmespath.org/tutorial.html](http://jmespath.org/tutorial.html)上阅读更多关于JMESPath查询语言的信息。
- en: Introduction to AWS CloudFormation
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS CloudFormation简介
- en: '**AWS CloudFormation** is a managed AWS service that allows you to define AWS
    services and resources using infrastructure as code, and is an alternative to
    using the AWS console, CLI, or various SDKs for deploying your AWS infrastructure.
    Although there is bit of a learning curve to master CloudFormation, once you have
    the basics of using CloudFormation under your belt, it represents an extremely
    powerful approach to deploying your AWS infrastructure, particularly once you
    start deploying complex environments.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS CloudFormation**是一项托管的AWS服务，允许您使用基础架构即代码来定义AWS服务和资源，并且是使用AWS控制台、CLI或各种SDK部署AWS基础架构的替代方案。虽然需要一些学习曲线来掌握CloudFormation，但一旦掌握了使用CloudFormation的基础知识，它就代表了一种非常强大的部署AWS基础架构的方法，特别是一旦开始部署复杂的环境。'
- en: When using CloudFormation, you define one or more resources in a CloudFormation
    template, which is a convenient mechanism to group related resources in a single
    place. When you deploy your template, CloudFormation will create a *stack* that
    comprises the physical resources defined in your template. CloudFormation will
    deploy each resource, automatically determining any dependencies between each
    resource, and optimise the deployment so that resources can be deployed in parallel
    where applicable, or in the correct sequence when there are dependencies between
    resources. The best news is that all of this powerful capability comes for free
    – you only pay for the resources you consume when you deploy your stacks via CloudFormation.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用CloudFormation时，您可以在CloudFormation模板中定义一个或多个资源，这是一种将相关资源组合在一个地方的便捷机制。当您部署模板时，CloudFormation将创建一个包含在模板中定义的物理资源的*堆栈*。CloudFormation将部署每个资源，自动确定每个资源之间的任何依赖关系，并优化部署，以便在适用的情况下可以并行部署资源，或者在资源之间存在依赖关系时按正确的顺序部署资源。最好的消息是，所有这些强大的功能都是免费的
    - 您只需要在通过CloudFormation部署堆栈时支付您消耗的资源。
- en: It's also important to note that there are many third-party alternatives to
    CloudFormation – for example, Terraform is very popular, and traditional configuration
    management tools such as Ansible and Puppet also include support for deploying
    AWS resources. My personal favorite is CloudFormation given it is natively supported
    by AWS, has good support for a wide variety of AWS services and resources, and
    natively integrates with the AWS CLI and services such as CodePipeline (we will
    leverage this integration later on in this book in Chapter 13 - *Continuous Delivering
    ECS Applications*).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，有许多第三方替代方案可以替代CloudFormation - 例如，Terraform非常受欢迎，传统的配置管理工具如Ansible和Puppet也包括部署AWS资源的支持。我个人最喜欢的是CloudFormation，因为它得到了AWS的原生支持，对各种AWS服务和资源有很好的支持，并且与AWS
    CLI和CodePipeline等服务进行了原生集成（我们将在本书的第13章“持续交付ECS应用程序”中利用这种集成）。
- en: Defining a CloudFormation template
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义CloudFormation模板
- en: The easiest way to get started with CloudFormation is to create a CloudFormation
    template. This template is defined in either a JSON or YAML format, with the latter
    being the format I recommend given YAML is much easier for humans to work with
    than JSON.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CloudFormation的最简单方法是创建一个CloudFormation模板。该模板以JSON或YAML格式定义，我建议使用YAML格式，因为相比JSON，YAML更容易让人类操作。
- en: 'The [CloudFormation user guide](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
    describes the [template structure in great detail](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html),
    however for the purposes of this book, we only need to worry about a basic template
    structure which is best demonstrated with a real example, which you can save in
    a file called `stack.yml` in a convenient location on your computer:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[CloudFormation用户指南](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)详细描述了[模板结构](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)，但是出于本书的目的，我们只需要关注一个基本的模板结构，最好通过一个真实的例子来演示，您可以将其保存在计算机上一个方便的位置的名为`stack.yml`的文件中。'
- en: '[PRE14]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, the CloudFormation defines a Cloud9 management station
    – Cloud9 provides a cloud-based IDE and terminal, which under the hood runs on
    an EC2 instance in AWS. Let's walk through this example to discuss the structure
    and features of the template.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，CloudFormation定义了一个Cloud9管理站 - Cloud9提供基于云的IDE和终端，在EC2实例上运行。让我们通过这个例子来讨论模板的结构和特性。
- en: The `AWSTemplateFormatVersion` property is required, which specifies the CloudFormation
    template format version that is always expressed in date terms. The `Parameters`
    property defines a set of input parameters that you can supply to your template,
    which is a good way to deal with multiple environments where you may have different
    input values between each environment. For example, the `EC2InstanceType` parameter
    specifies the EC2 instance type for the management station, while the `SubnetId`
    parameter specifies the subnet the EC2 instance should be attached to. Both of
    these values could be different between a non-production environment and production
    environment, so having them as input parameters makes it easier to change depending
    on the target environment. Notice that the `SubnetId` parameter specifies a type
    of `AWS::EC2::Subnet::Id`, which means CloudFormation can use this to lookup or
    validate the input value. For a list of supported parameter types, see [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html).
    You can also see that the `EC2InstanceType` parameter defines a default value
    for the parameter, which will be used if no input is provided for this parameter.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`AWSTemplateFormatVersion`属性是必需的，它指定了CloudFormation模板的格式版本，通常以日期形式表示。`Parameters`属性定义了一组输入参数，您可以将这些参数提供给您的模板，这是处理多个环境的好方法，因为您可能在每个环境之间有不同的输入值。例如，`EC2InstanceType`参数指定了管理站的EC2实例类型，而`SubnetId`参数指定了EC2实例应连接到的子网。这两个值在非生产环境和生产环境之间可能不同，因此将它们作为输入参数使得根据目标环境更容易更改。请注意，`SubnetId`参数指定了`AWS::EC2::Subnet::Id`类型，这意味着CloudFormation可以使用它来查找或验证输入值。有关支持的参数类型列表，请参见[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html)。您还可以看到`EC2InstanceType`参数为参数定义了默认值，如果没有为此参数提供输入，则将使用该默认值。'
- en: The `Resources` property defines all of the resources in your stack – this truly
    is the meat or body of the template, and may contain up to two hundred resources.
    In the preceding code, we only define a single resource which we call `ManagementStation`,
    and this creates Cloud9 EC2 Environment, as expressed via a `Type` value of `AWS::Cloud9::EnvironmentEC2`.
    All resources must specify a `Type` property, which defines the type of resource
    and determines the various configuration properties available for each type. The
    CloudFormation user guide includes a section that defines all supported resource
    types, and at last count there were 300 different types of resources.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resources`属性定义了堆栈中的所有资源 - 这实际上是模板的主体部分，可能包含多达两百个资源。在上面的代码中，我们只定义了一个名为`ManagementStation`的资源，这将创建Cloud9
    EC2环境，其`Type`值为`AWS::Cloud9::EnvironmentEC2`。所有资源必须指定一个`Type`属性，该属性定义了资源的类型，并确定了每种类型可用的各种配置属性。CloudFormation用户指南包括一个定义了所有支持的资源类型的部分，截至最后一次统计，有300种不同类型的资源。'
- en: 'Every resource also includes a Properties property, which holds all of the
    various configuration properties available for the resource. In the preceding
    code, you can see that we have defined five different properties—the properties
    available will vary depending on the resource type and are fully documented in
    the CloudFormation user guide:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资源还包括一个Properties属性，其中包含资源可用的所有各种配置属性。在上面的代码中，您可以看到我们定义了五个不同的属性 - 可用的属性将根据资源类型而变化，并在CloudFormation用户指南中得到充分的文档记录。
- en: '`Name`: This specifies the name of the Cloud9 EC2 environment. The value of
    properties can be simple scalar values like a string or number, however the value
    can also reference other parameters or resources in the template. Notice that
    the value of the `Name` property includes what is referred to as an [intrinsic
    function](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)
    called `Sub`, and can be identified by the preceding exclamation mark (`!Sub`).
    The `!Sub` syntax is actually a shorthand for `Fn::Sub`, an example of which you
    can see with the `Description` property. The `Fn::Sub` intrinsic function allows
    you to define an expression that includes interpolated references to other resources
    or parameters in your stack. For example, the value of the `Name` property is
    `${AWS::StackName}-station`, where the `${AWS::StackName}` is an interpolated
    reference known as a [pseudo parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)
    that will be replaced with the name of the CloudFormation stack you deploy from
    the template. If the name of your stack is `cloud9-management`, then the value
    of `${AWS::StackName}-station` will be expanded to `cloud9-management-station` when
    your stack is deployed.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`名称`：这指定了Cloud9 EC2环境的名称。属性的值可以是简单的标量值，比如字符串或数字，但是值也可以引用模板中的其他参数或资源。请注意，`Name`属性的值包括所谓的内置函数`Sub`，可以通过前面的感叹号(`!Sub`)来识别。`!Sub`语法实际上是`Fn::Sub`的简写，你可以在`Description`属性中看到一个例子。`Fn::Sub`内置函数允许您定义一个表达式，其中包括对堆栈中其他资源或参数的插值引用。例如，`Name`属性的值是`${AWS::StackName}-station`，其中`${AWS::StackName}`是一个称为[伪参数](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)的插值引用，它将被模板部署时的CloudFormation堆栈的名称替换。如果您的堆栈名称是`cloud9-management`，那么`${AWS::StackName}-station`的值在部署堆栈时将扩展为`cloud9-management-station`。'
- en: '`Description`: This provides a description for the Cloud9 EC2 environment.
    This includes an example of the long hand version of the `Fn::Sub` intrinsic function,
    which requires you to indent a new line, whereas the shorthand `!Sub` format allows
    you to specify the value on the same line as the property.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Description`: 这为Cloud9 EC2环境提供了描述。这包括`Fn::Sub`内部函数的长格式示例，该函数要求您缩进一个新行，而简写的`!Sub`格式允许您在同一行上指定值。'
- en: '`AutomaticStopTime`: This defines the amount of idle time in minutes to wait
    before stopping the Cloud9 EC2 instance. This saves on costs, but only when running
    the EC2 instance when you are using it (Cloud9 will automatically start your instance
    and resume your session from where you previously were). In the preceding code,
    the value is a simple scalar value of 15.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AutomaticStopTime`: 这定义了在停止Cloud9 EC2实例之前等待的空闲时间，单位为分钟。这可以节省成本，但只有在您使用EC2实例时才会运行（Cloud9将自动启动您的实例，并从您之前停止的地方恢复会话）。在上面的代码中，该值是一个简单的标量值为15。'
- en: '`InstanceType`: This is the type of EC2 instance. This references the `EC2InstanceType`
    parameter using the Ref intrinsic function (`!Ref` is the shorthand form), which
    allows you to reference other parameters or resources in the stack. This means
    that whatever value is provided for this parameter when you deploy the stack will
    be applied for the `InstanceType` property.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InstanceType`: 这是EC2实例的类型。这引用了`EC2InstanceType`参数，使用了Ref内部函数（`!Ref`是简写形式），允许您引用堆栈中的其他参数或资源。这意味着在部署堆栈时为此参数提供的任何值都将应用于`InstanceType`属性。'
- en: '`SubnetId`: This is the target subnet ID where the EC2 instance will be deployed.
    This property references the SubnetID parameter using the long hand version of
    the `Ref` intrinsic function, which requires to you express this reference on
    an indented new line.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SubnetId`: 这是EC2实例将部署的目标子网ID。此属性引用了SubnetID参数，使用了`Ref`内部函数的长格式，这要求您在缩进的新行上表达此引用。'
- en: Deploying a CloudFormation stack
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署CloudFormation堆栈
- en: Now that you have defined a CloudFormation template, you can deploy the resources
    in your template in the form of a CloudFormation stack.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经定义了一个CloudFormation模板，可以以CloudFormation堆栈的形式部署模板中的资源。
- en: 'You can deploy a stack using the AWS console by choosing **Services** | **CloudFormation**,
    which will open the CloudFormation dashboard. Before you continue, ensure that
    you have assumed the admin role in your account and have also selected US East
    N. Virginia (us-east-1) as the region:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过选择**服务** | **CloudFormation**在AWS控制台上部署堆栈，这将打开CloudFormation仪表板。在继续之前，请确保您已经在您的帐户中扮演了管理员角色，并且还选择了美国东部北弗吉尼亚（us-east-1）作为地区：
- en: For all examples in this book, we will be using the us-east-1 (N. Virginia)
    region.![](assets/6aec5bab-afe5-4795-ac18-1c6681e28289.png)CloudFormation dashboard
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有示例中，我们将使用美国东部北弗吉尼亚（us-east-1）地区。![](assets/6aec5bab-afe5-4795-ac18-1c6681e28289.png)CloudFormation仪表板
- en: 'If you click on the **Create new stack** button, you will be prompted to select
    a template, where you can either select a sample template, upload a template,
    or specify an S3 template URL. Because we defined our stack in a file called `stack.yml`,
    select the option to upload a template and click the **Choose file** button to
    select the file on your computer:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击**创建新堆栈**按钮，将提示您选择模板，您可以选择示例模板、上传模板或指定S3模板URL。因为我们在名为`stack.yml`的文件中定义了我们的堆栈，所以选择上传模板的选项，并单击**选择文件**按钮选择计算机上的文件：
- en: '![](assets/38367206-84db-4a54-8043-fe8aa6613cef.png)Selecting a CloudFormation
    template'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/38367206-84db-4a54-8043-fe8aa6613cef.png)选择CloudFormation模板'
- en: 'After uploading the template, the CloudFormation service will parse the template
    and ask you to specify a name for the stack and also provide values for any parameters
    in the stack:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 上传模板后，CloudFormation 服务将解析模板并要求您为堆栈指定名称，并为堆栈中的任何参数提供值：
- en: '![](assets/65e6ca0f-052d-4840-96b2-503e43d49863.png)Specifying template details'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/65e6ca0f-052d-4840-96b2-503e43d49863.png)指定模板详细信息'
- en: In the preceding screenshot, the value `t2.micro` is set by default for the
    `EC2InstanceType` parameter, given you set this as a default value in your template.
    Because you specified `AWS::EC2::Subnet::Id` as the type of the `SubnetId` parameter,
    the **Create stack** wizard automatically finds all of the subnets in your account
    and region and presents them in a dropdown. Here, I have selected the subnet from
    the default VPC that is created with every new AWS account that is located in
    the **us-east-1a** availability zone.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，默认情况下为`EC2InstanceType`参数设置了值`t2.micro`，因为您在模板中将其设置为默认值。由于您将`AWS::EC2::Subnet::Id`指定为`SubnetId`参数的类型，**创建堆栈**向导会自动查找您帐户和区域中的所有子网，并在下拉菜单中呈现它们。在这里，我选择了位于**us-east-1a**可用区的每个新
    AWS 帐户中创建的默认 VPC 中的子网。
- en: 'You can determine which availability zone each of the subnets belongs to by
    either selecting **Services** | **VPC** | **Subnets** in the AWS console, or by
    running the `aws ec2 describe-subnets` AWS CLI command with a JMESPath query:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 AWS 控制台中选择**服务**|**VPC**|**子网**，或者通过运行带有 JMESPath 查询的`aws ec2 describe-subnets`
    AWS CLI 命令来确定每个子网属于哪个可用区：
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, you can click **Next** and then **Create** in the **Create stack**
    wizard to commence deployment of your new stack. In the CloudFormation dashboard,
    you will see that a new stack called **cloud9-management** is created, which initially
    has a status of `CREATE_IN_PROGRESS`. An interesting behavior associated with
    deploying Cloud9 environments via CloudFormation is that a separate child CloudFormation
    stack is automatically created via the `AWS::Cloud9::Environment` resource—this
    is somewhat unusual as for every other type of CloudFormation resource you will
    create, you will not see this type of behavior. Once deployment is complete, the
    status of the stack will change to `CREATE_COMPLETE`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以单击**下一步**，然后在**创建堆栈**向导中单击**创建**，以开始部署新堆栈。在 CloudFormation 仪表板中，您将看到创建了一个名为**cloud9-management**的新堆栈，最初状态为`CREATE_IN_PROGRESS`。通过
    CloudFormation 部署 Cloud9 环境的一个有趣行为是，通过`AWS::Cloud9::Environment`资源会自动创建一个单独的子
    CloudFormation 堆栈，这在部署其他类型的 CloudFormation 资源时是不太常见的。部署完成后，堆栈的状态将变为`CREATE_COMPLETE`：
- en: '![](assets/de0f7e1f-35bc-47aa-8df0-7bebfa06bb1f.png)Deploying a CloudFormation
    stack'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/de0f7e1f-35bc-47aa-8df0-7bebfa06bb1f.png)部署 CloudFormation 堆栈'
- en: In the preceding screenshot, you can click on the **Events** tab to display
    events associated with stack deployment. This will show you the progress of each
    resource as it is deployed, and will indicate if there are any failures.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，您可以单击**事件**选项卡以显示与堆栈部署相关的事件。这将显示每个资源部署的进度，并指示是否存在任何失败。
- en: 'Now that you have successfully deployed your first CloudFormation stack, you
    should have a brand new Cloud9 IDE environment available for you to use. If you
    select **Services** | **Cloud9** from the AWS console menu bar, you should see
    a single environment called `cloud9-management-station`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已成功部署了第一个 CloudFormation 堆栈，您应该可以使用全新的 Cloud9 IDE 环境。如果您在 AWS 控制台菜单栏中选择**服务**|**Cloud9**，您应该会看到一个名为`cloud9-management-station`的单个环境：
- en: '![](assets/bf94b2a5-6146-44ae-a0ed-3de38549d0ea.png)Cloud9 environments'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bf94b2a5-6146-44ae-a0ed-3de38549d0ea.png)Cloud9 环境'
- en: 'If you click on the **Open IDE** button, this will open a new IDE session which
    includes an integrated terminal with AWS CLI installed. Note that the session
    has all of the permissions associated with the user that created the Cloud9 environment—in
    this case, this is the assumed **admin** role, hence you can perform any administrative
    task from the terminal. The Cloud9 environment is also running within your VPC,
    so if you deploy other resources such as EC2 instances, you can manage them locally
    from this environment, even if your other resources are deployed in private subnets
    without internet connectivity:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击**打开IDE**按钮，这将打开一个包含安装了AWS CLI的集成终端的新IDE会话。请注意，会话具有创建Cloud9环境的用户关联的所有权限
    - 在本例中，这是假定的**admin**角色，因此您可以从终端执行任何管理任务。Cloud9环境也在您的VPC中运行，因此，如果您部署其他资源（如EC2实例），即使您的其他资源部署在没有互联网连接的私有子网中，您也可以从此环境本地管理它们。
- en: Make sure you understand the implications of creating a Cloud9 environment that
    has full administrative privileges. Although this is very convenient, it does
    represent a potential security backdoor that could be used to compromise your
    environment and account. Cloud9 also allows you to share your IDE with other users,
    which could allow other users to masquerade as you and perform any action that
    you are allowed to perform. ![](assets/47bf21c4-dc4c-45a7-800a-25ed9098cff3.png)Cloud9
    IDE
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您了解创建具有完全管理特权的Cloud9环境的影响。尽管这非常方便，但它确实代表了一个潜在的安全后门，可能被用来破坏您的环境和帐户。Cloud9还允许您与其他用户共享您的IDE，这可能允许其他用户冒充您并执行您被允许执行的任何操作。 ![](assets/47bf21c4-dc4c-45a7-800a-25ed9098cff3.png)Cloud9
    IDE
- en: Updating a CloudFormation Stack
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新CloudFormation堆栈
- en: After you have created a CloudFormation stack, you may want to make changes
    to the stack, such as adding additional resources, or changing the configuration
    of existing resources. CloudFormation defines three key life cycle events related
    to stacks – CREATE, UPDATE, and DELETE – and these can apply to individual resources
    within the stack, or to the stack as a whole.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 创建CloudFormation堆栈后，您可能希望对堆栈进行更改，例如添加其他资源或更改现有资源的配置。 CloudFormation定义了与堆栈相关的三个关键生命周期事件
    - CREATE，UPDATE和DELETE - 这些事件可以应用于堆栈中的单个资源，也可以应用于整个堆栈。
- en: To update a stack, you simply make any required changes to your CloudFormation
    template and submit the modified template—the CloudFormation service will calculate
    the required changes for each resource, which may result in the creation of new
    resources, updating or replacement of existing resources, or deletion of existing
    resources. CloudFormation will also make any new changes first, and only if these
    changes are successful will it then clean up any resources that should be removed.
    This provides a higher chance of recovery in the event that a CloudFormation stack
    update fails, in which case CloudFormation will attempt to roll back the changes
    to restore the stack to its original state.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新堆栈，只需对CloudFormation模板进行任何必要的更改，并提交修改后的模板 - CloudFormation服务将计算每个资源所需的更改，这可能导致创建新资源，更新或替换现有资源，或删除现有资源。
    CloudFormation还将首先进行任何新更改，仅当这些更改成功时，它才会清理应该被移除的任何资源。这提供了在CloudFormation堆栈更新失败的情况下恢复的更高机会，在这种情况下，CloudFormation将尝试回滚更改以将堆栈恢复到其原始状态。
- en: 'To test updating your CloudFormation stack, let''s make a small change to the
    `stack.yml` template:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试更新您的CloudFormation堆栈，让我们对`stack.yml`模板进行小的更改：
- en: '[PRE17]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To apply this change, instead of using the AWS console, we will use the AWS
    CLI, which supports deploying your CloudFormation templates via the `aws cloudformation
    deploy` command. We will be using this command extensively throughout the remainder
    of this book, so now is a good time to introduce the command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 应用此更改，我们将使用AWS CLI而不是使用AWS控制台，AWS CLI支持通过`aws cloudformation deploy`命令部署CloudFormation模板。我们将在本书的其余部分大量使用此命令，现在是介绍该命令的好时机：
- en: '[PRE19]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we first ensure that the correct profile is configured,
    and then run the `aws cloudformation deploy` command, specifying the stack name
    using the `--stack-name` flag and template file with the `--template-file` flag.
    The `--parameter-overrides` flag allows you to supply input parameter values in
    the format `<parameter>=<value>` – note that in an update scenario like this one,
    if you don't specify any parameter overrides, the previous parameter values provided
    (when you created the stack, in this case) will be used.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先确保配置了正确的配置文件，然后运行`aws cloudformation deploy`命令，使用`--stack-name`标志指定堆栈名称和`--template-file`标志指定模板文件。`--parameter-overrides`标志允许您以`<parameter>=<value>`格式提供输入参数值-请注意，在像这样的更新场景中，如果您不指定任何参数覆盖，将使用先前提供的参数值（在本例中创建堆栈时）。
- en: 'Notice that the update actually fails, and if you view the stack events via
    the CloudFormation console, you can find out why the stack update failed:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，更新实际上失败了，如果您通过CloudFormation控制台查看堆栈事件，您可以找出堆栈更新失败的原因。
- en: '![](assets/74b208ac-b2b6-4b7d-8dd4-d59eaaa6da1c.png)CloudFormation stack update
    failure'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/74b208ac-b2b6-4b7d-8dd4-d59eaaa6da1c.png)CloudFormation堆栈更新失败'
- en: In the preceding screenshot, you can see that the stack update failed because
    the change required CloudFormation to create and replace the existing resource
    (in this case, the Cloud9 environment) with a new resource. As CloudFormation
    always attempts to create new resources before destroying any old resources that
    have been replaced, because the resource is configured with a name, CloudFormation
    cannot create a new resource with the same name, causing a failure. This highlights
    one of the important gotchas of CloudFormation—be very careful when defining your
    resources with static names—if CloudFormation ever needs to replace the resource
    in an update scenario like this one, the update will fail as generally, resource
    names must be unique.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述屏幕截图中，您可以看到堆栈更新失败，因为更改需要CloudFormation创建并替换现有资源（在本例中为Cloud9环境）为新资源。由于CloudFormation始终在销毁任何已被替换的旧资源之前尝试创建新资源，因为资源配置了名称，CloudFormation无法使用相同名称创建新资源，导致失败。这突显了CloudFormation的一个重要注意事项-在定义资源的静态名称时要非常小心-如果CloudFormation需要在像这样的更新场景中替换资源，更新将失败，因为通常资源名称必须是唯一的。
- en: For guidance on when CloudFormation will choose to replace a resource if you
    are updating the resource, refer to the resource properties defined for each resource
    type in the [AWS Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
    document.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CloudFormation何时选择替换资源（如果正在更新资源），请参考[Amazon Web Services资源类型参考](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)文档中为每种资源类型定义的资源属性。
- en: You can see that CloudFormation automatically rolls back the change after the
    failure, reversing any changes that were made leading up to the failure. The status
    of the stack eventually changes to `UPDATE_ROLLBACK_COMPLETE`, indicating that
    a failure and rollback took place.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，CloudFormation在失败后会自动回滚更改，撤消导致失败的任何更改。堆栈的状态最终会更改为`UPDATE_ROLLBACK_COMPLETE`，表示发生了失败和回滚。
- en: One fix for resolving the stack failure would be to remove the `Name` property
    on the `ManagementStation` resource in your stack – in this instance, CloudFormation
    will ensure it generates a unique name (typically based from the CloudFormation
    stack name with some random alphanumeric characters appended), meaning any time
    you update the resource so that it requires a replacement, CloudFormation will
    simply generate a new unique name and avoid the failure scenario we encountered.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 解决堆栈失败的一个修复方法是在堆栈中的`ManagementStation`资源上删除`Name`属性 - 在这种情况下，CloudFormation将确保生成一个唯一的名称（通常基于CloudFormation堆栈名称并附加一些随机的字母数字字符），这意味着每次更新资源以便需要替换时，CloudFormation将简单地生成一个新的唯一名称并避免我们遇到的失败场景。
- en: Deleting a CloudFormation stack
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除CloudFormation堆栈
- en: 'Now that you understand how to create and update a stack, let''s discuss how
    to delete a stack. You can delete a stack very easily using the CloudFormation
    dashboard by simply selecting the stack, selecting **Actions**, and then clicking
    **Delete Stack**:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了如何创建和更新堆栈，让我们讨论如何删除堆栈。您可以通过CloudFormation仪表板非常轻松地删除堆栈，只需选择堆栈，选择**操作**，然后点击**删除堆栈**：
- en: '![](assets/88161ae0-ec81-4a0a-b229-45e1c8ee18ac.png)Deleting a CloudFormation
    stack'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 删除CloudFormation堆栈
- en: After clicking **Yes, Delete** to confirm deletion of your stack, CloudFormation
    will proceed to delete each resource defined in your stack. Once complete, the
    stack will disappear from the CloudFormation dashboard, although you change the
    **Filter** dropdown that is located below the **Create Stack** button to click **Deleted**
    to view any previously deleted stacks.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**是，删除**以确认删除堆栈后，CloudFormation将继续删除堆栈中定义的每个资源。完成后，堆栈将从CloudFormation仪表板中消失，尽管您可以更改位于**创建堆栈**按钮下方的**筛选器**下拉菜单，以点击**已删除**以查看以前删除的堆栈。
- en: Some might argue it is a little *too* easy to delete your stacks. If you are
    worried about accidental deletion of your stacks, you can select the **Change
    termination protection** option in the preceding screenshot to enable termination
    protection, which will prevent your stacks from being accidentally deleted.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会认为删除堆栈太容易了。如果您担心意外删除堆栈，您可以在前面的截图中选择**更改终止保护**选项以启用终止保护，这将防止堆栈被意外删除。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to get started with AWS by creating a free
    account and establishing a root user for your account. You learned how to secure
    root access using multi-factor authentication, and then created a number of IAM
    resources that are required to administer your account. You first created an administrative
    IAM role called **admin**, and then created an Administrators group which you
    assigned the single permission of being permitted to assume your administrative
    IAM role. This approach of assuming roles is the recommend and best practice method
    of administering AWS, and supports more complex multi-account topologies where
    you can host all of your IAM users in one account and assume administrative roles
    in other accounts.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何通过创建免费账户和建立账户的根用户来开始使用AWS。您学会了如何使用多因素身份验证来保护根访问权限，然后创建了一些IAM资源，这些资源是管理您的账户所必需的。您首先创建了一个名为**admin**的管理IAM角色，然后创建了一个管理员组，将其分配为允许假定您的管理IAM角色的单一权限。假定角色的这种方法是管理AWS的推荐和最佳实践方法，并支持更复杂的多账户拓扑结构，在这种结构中，您可以将所有IAM用户托管在一个账户中，并在其他账户中假定管理角色。
- en: You then created a Users group and assigned a managed policy that forces a requirement
    for multi-factor authentication (MFA) for any user belonging to that group. MFA
    should be considered a mandatory security requirement these days for any organization
    that uses AWS, and the approach of simply assigning your users to a Users group
    that enforces an MFA requirement is a very simple and scalable mechanism to achieve
    this. After creating a user and assigning it to both the Administrators and Users
    group, you learned what is required for a first time user to set up their access,
    which involves logging in with a one-time password, establishing a new password,
    and then setting up an MFA device. Once a user has logged in using MFA, the user
    is then able to perform whatever permissions have been assigned to them – for
    example, the user you created in this chapter was assigned to the Administrators
    group, and so was able to assume the administrative IAM role, which you were able
    to perform in the AWS console by using the Switch Role functionality that is built
    into the console.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您创建了一个用户组，并分配了一个托管策略，该策略强制要求属于该组的任何用户进行多因素身份验证（MFA）。MFA现在应被视为任何使用AWS的组织的强制性安全要求，简单地将用户分配到强制执行MFA要求的用户组是一种非常简单和可扩展的机制来实现这一点。创建用户并将其分配到管理员和用户组后，您学会了首次用户设置其访问所需的步骤，其中包括使用一次性密码登录，建立新密码，然后设置MFA设备。一旦用户使用MFA登录，用户就能执行分配给他们的任何权限
    - 例如，您在本章中创建的用户被分配到了管理员组，因此能够承担管理员IAM角色，您可以在AWS控制台中使用内置的Switch Role功能执行此操作。
- en: With your IAM setup complete and the ability to assume the admin role via the
    console, we next turned our attention to the command line, installing the AWS
    CLI, generating an access key via the console, and then configuring your access
    key credentials in the local `~/.aws` folder that is used by the AWS CLI to store
    credentials and configuration profiles. You learned how to configure a named configuration
    profile in the `~/.aws/configuration` file, which automatically assumes the admin
    role and prompts for an MFA code whenever the CLI detects that new temporary session
    credentials are required.  You also created an EC2 key pair so that you will be
    able to access EC2 instances using SSH.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的IAM设置完成并能够通过控制台承担管理员角色，我们接下来将注意力转向命令行，安装AWS CLI，通过控制台生成访问密钥，然后在本地`~/.aws`文件夹中配置您的访问密钥凭据，该文件夹由AWS
    CLI用于存储凭据和配置文件。您学会了如何在`~/.aws/configuration`文件中配置命名配置文件，该文件会自动承担管理员角色，并在CLI检测到需要新的临时会话凭据时提示输入MFA代码。您还创建了一个EC2密钥对，以便您可以使用SSH访问EC2实例。
- en: Finally, you were introduced to AWS CloudFormation, and learned how to define
    a CloudFormation template and deploy a CloudFormation stack, which is a collection
    of resources based upon your CloudFormation template definition. You learned about
    the basic structure of a CloudFormation template, how to create a stack using
    the AWS console, and how to deploy a stack using the AWS CLI.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您了解了AWS CloudFormation，并学会了如何定义CloudFormation模板并部署CloudFormation堆栈，这是基于您的CloudFormation模板定义的资源集合。您学会了CloudFormation模板的基本结构，如何使用AWS控制台创建堆栈，以及如何使用AWS
    CLI部署堆栈。
- en: In the next chapter, you will be introduced to the Elastic Container Service,
    where you will put your new AWS account to good use and learn how to create ECS
    clusters and deploy Docker applications to ECS.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将介绍弹性容器服务，您将充分利用您的新AWS账户，并学习如何创建ECS集群并将Docker应用程序部署到ECS。
- en: Questions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True/false: A valid credit card is required to establish a free AWS account.'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：建立免费的AWS账户需要一个有效的信用卡。
- en: 'True/false: You should always perform administrative actions using the root
    account.'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确/错误：您应该始终使用根帐户执行管理操作。
- en: 'True/false: You should allocate IAM permissions directly to your IAM users
    and/or groups.'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确/错误：您应该直接为IAM用户和/或组分配IAM权限。
- en: Which IAM managed policy would you use to assign administrative permissions?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用哪个IAM托管策略来分配管理权限？
- en: What command do you run to install the AWS CLI?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您运行什么命令来安装AWS CLI？
- en: 'True/false: When you configure the AWS CLI, you must store your IAM username
    and password locally.'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确/错误：当您配置AWS CLI时，您必须在本地存储您的IAM用户名和密码。
- en: Where do you store credentials for the AWS CLI?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在哪里存储AWS CLI的凭据？
- en: You set up an IAM user that requires MFA to perform administrative actions.
    The IAM user sets up their AWS CLI but complains about unauthorized errors when
    attempt to run AWS CLI commands. The named profile includes the `source_profile`, `role_arn`,
    and `role_session_name` parameters, and you confirm that these are configured
    correctly. How would you fix this issue?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您设置了一个需要MFA才能执行管理操作的IAM用户。IAM用户设置了他们的AWS CLI，但在尝试运行AWS CLI命令时抱怨未经授权的错误。命名配置文件包括`source_profile`，`role_arn`和`role_session_name`参数，并且您确认这些已正确配置。您将如何解决这个问题？
- en: 'True/false: CloudFormation templates can be written using JSON or YAML.'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确/错误：CloudFormation模板可以使用JSON或YAML编写。
- en: 'True/false: You can use the `!Ref` keyword to refer to another resource or
    parameter in a CloudFormation template.'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确/错误：您可以使用`!Ref`关键字来引用CloudFormation模板中的另一个资源或参数。
- en: You define a resource in a CloudFormation template that includes an optional `Name` property
    that you configure as `my-resource`. You create a new stack from the template
    successfully, and then make a change to the resource that the documentation states
    will require replacement of the entire resource. Will you be able to deploy this
    change successfully?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在CloudFormation模板中定义了一个资源，其中包括一个可选的`Name`属性，您将其配置为`my-resource`。您成功从模板创建了一个新堆栈，然后对文档中规定将需要替换整个资源的资源进行了更改。您能成功部署这个更改吗？
- en: Further reading
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接，了解本章涵盖的主题的更多信息：
- en: Setting up a Free Tier account: [https://aws.amazon.com/free](https://aws.amazon.com/free)
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置免费层帐户：[https://aws.amazon.com/free](https://aws.amazon.com/free)
- en: IAM best practices: [https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM最佳实践：[https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
- en: Your AWS Account ID and alias: [https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html)
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的AWS帐户ID和别名：[https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html)
- en: Improving the AWS Force MFA policy: [https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/](https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/)
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进AWS Force MFA策略：[https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/](https://www.trek10.com/blog/improving-the-aws-force-mfa-policy-for-IAM-users/)
- en: Installing the AWS CLI: [https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装AWS CLI：[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)
- en: AWS CLI reference: [https://docs.aws.amazon.com/cli/latest/reference/](https://docs.aws.amazon.com/cli/latest/reference/)
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI参考：[https://docs.aws.amazon.com/cli/latest/reference/](https://docs.aws.amazon.com/cli/latest/reference/)
- en: AWS CLI configuration variables: [https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI配置变量：[https://docs.aws.amazon.com/cli/latest/topic/config-vars.html](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html)
- en: AWS shell: [https://github.com/awslabs/aws-shell](https://github.com/awslabs/aws-shell)
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS shell：[https://github.com/awslabs/aws-shell](https://github.com/awslabs/aws-shell)
- en: AWS CloudFormation user guide: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation用户指南：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
- en: AWS CloudFormation template anatomy: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation模板解剖：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)
- en: AWS CloudFormation resource types reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation资源类型参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
- en: AWS CloudFormation intrinsic functions: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation内部函数：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html)
- en: AWS CloudFormation pseudo parameters: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CloudFormation伪参数：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html)
