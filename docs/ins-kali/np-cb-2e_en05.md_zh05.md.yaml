- en: Chapter 5. Audio and Image Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章：音频和图像处理
- en: 'In this chapter, we will cover basic image and audio (WAV files) processing
    with NumPy and SciPy. We will use NumPy to do interesting things with sounds and
    images in the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 NumPy 和 SciPy 的基本图像和音频（WAV 文件）处理。 在以下秘籍中，我们将使用 NumPy 对声音和图像进行有趣的操作：
- en: Loading images into memory maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图像加载到内存映射中
- en: Adding images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图像
- en: Blurring images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像模糊
- en: Repeating audio fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复音频片段
- en: Generating sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产生声音
- en: Designing an audio filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计音频过滤器
- en: Edge detection with the Sobel filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用索贝尔过滤器进行边界检测
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Although all the chapters in this book are fun, in this chapter, we are really
    going to go for it and concentrate on having fun. In [Chapter 10](ch10.xhtml "Chapter 10. Fun
    with Scikits"), *Fun with Scikits*, you will find a few more image processing
    recipes that use `scikits-image`. Unfortunately, this book does not have direct
    support for audio files, so you really need to run the code examples to fully
    appreciate the recipes.
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书中的所有章节都很有趣，但在本章中，我们确实会继续努力并专注于获得乐趣。 在第 10 章，“Scikits 的乐趣”中，您会发现更多使用`scikits-image`的图像处理秘籍。
    不幸的是，本书没有对音频文件的直接支持，因此您确实需要运行代码示例以充分了解其中的秘籍。
- en: Loading images into memory maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像加载到内存映射中
- en: It is recommended to load large files into memory maps. Memory-mapped files
    only load a small part of large files. NumPy memory maps are array-like. In this
    example, we will generate an image of colored squares and load it into a memory
    map.
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将大文件加载到内存映射中。 内存映射文件仅加载大文件的一小部分。 NumPy 内存映射类似于数组。 在此示例中，我们将生成彩色正方形的图像并将其加载到内存映射中。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: If necessary, install matplotlib. The *See also* section has a reference to
    the corresponding recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，“安装 Matplotlib”的“另请参见”部分具有对相应秘籍的引用。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will begin by initializing arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过初始化数组来开始  ：
- en: 'First we need to initialize the following arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要初始化以下数组：
- en: An array that holds the image data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存图像数据的数组
- en: An array with random coordinates of the centers of the squares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有正方形中心随机坐标的数组
- en: An array with random radii (plural of radius) of the squares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有平方的随机半径（复数个半径）的数组
- en: An array with random colors of the squares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有正方形随机颜色的数组
- en: 'Initialize the arrays:'
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化数组：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are initializing the first array to zeros. The other arrays
    are initialized with functions from the `numpy.random` package that generate random
    integers.
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在将第一个数组初始化为零。 其他数组使用`numpy.random`包中的函数初始化，这些函数生成随机整数。
- en: 'The next step is to generate the squares. We create the squares using the arrays
    in the previous step. With the `clip()` function, we will make sure that the squares
    do not wander outside the image area. The `meshgrid()` function gives us the coordinates
    of the squares. If we give this function two arrays with sizes `N` and `M`, it
    will give us two arrays of shape N x M. The first array will have its elements
    repeated along the *x* axis. The second array will have its elements repeated
    along the *y* axis. The following example IPython session should make this clearer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是生成正方形。 我们在上一步中使用数组创建正方形。 使用`clip()`函数，我们将确保正方形不会在图像区域外徘徊。 `meshgrid()`函数为我们提供了正方形的坐标。
    如果我们给此函数两个大小分别为`N`和`M`的数组，它将给我们两个形状为`N x M`的数组。第一个数组的元素将沿 *x* 轴重复。 第二个数组将沿 *y*
    轴重复其元素。 以下示例 IPython 会话应该使这一点更加清楚：
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, we will set the colors of the squares:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将设置正方形的颜色：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Before we load the image data into a memory map, we need to store it in a file
    with the `tofile()` function. Then load the image data from this file into a memory
    map with the `memmap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将图像数据加载到内存映射之前，我们需要使用`tofile()`函数将其存储在文件中。 然后使用`memmap()`函数将图像文件中的图像数据加载到内存映射中：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To confirm that everything worked fine, we display the image with matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认一切正常，我们使用 Matplotlib 显示图像：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that we are not displaying the axes. An example of a generated image
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有显示轴。 生成图像的示例如下所示：
- en: '![How to do it...](img/0945_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_01.jpg)'
- en: 'Here is the complete source code for this recipe from the `memmap.py` file
    in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`memmap.py`文件的完整源代码：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We used the following functions in this recipe:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此秘籍中使用了以下函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_NORMAL
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `zeros()` | This function gives an array filled with zeros. |'
  prefs: []
  type: TYPE_TB
  zh: '| `zeros()` | 此函数给出一个由零填充的数组。 |'
- en: '| `random_integers()` | This function returns an array with random integer
    values between a high and low bound. |'
  prefs: []
  type: TYPE_TB
  zh: '| `random_integers()` | 此函数返回一个数组，数组中的随机整数值在上限和下限之间。 |'
- en: '| `randint()` | This function has the same functionality as `random_integers()`,
    except that it uses a half-open interval instead of a closed interval. |'
  prefs: []
  type: TYPE_TB
  zh: '| `randint()` | 该函数与`random_integers()`函数相同，除了它使用半开间隔而不是关闭间隔。 |'
- en: '| `clip()` | This function clips values of an array, given a minimum and a
    maximum. |'
  prefs: []
  type: TYPE_TB
  zh: '| `clip()` | 该函数在给定最小值和最大值的情况下裁剪数组的值。 |'
- en: '| `meshgrid()` | This function returns coordinate arrays from an array containing
    *x* coordinates and an array containing *y* coordinates. |'
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid()` | 此函数从包含 *x* 坐标的数组和包含 *y* 坐标的数组返回坐标数组。 |'
- en: '| `tofile()` | This function writes an array to a file. |'
  prefs: []
  type: TYPE_TB
  zh: '| `tofile()` | 此函数将数组写入文件。 |'
- en: '| `memmap()` | This function creates a NumPy memory map from a file, given
    the name of a file. Optionally, you can specify the shape of the array. |'
  prefs: []
  type: TYPE_TB
  zh: '| `memmap()` | 给定文件名，此函数从文件创建 NumPy 内存映射。 （可选）您可以指定数组的形状。 |'
- en: '| `axis()` | This function is the matplotlib function that configures the plot
    axes. For instance, we can turn them off. |'
  prefs: []
  type: TYPE_TB
  zh: '| `axis()` | 该函数是用于配置绘图轴的 Matplotlib 函数。 例如，我们可以将其关闭。 |'
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另见
- en: '*Installing* *matplotlib* in [Chapter 1](ch01.xhtml "Chapter 1. Winding Along
    with IPython"), *Winding Along with IPython*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章“使用 IPython”中的“安装 Matplotlib”
- en: The NumPy memory map documentation at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NumPy 内存映射文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.memmap.html)'
- en: Combining images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成图像
- en: In this recipe, we will combine the famous **Mandelbrot fractal** (see [http://en.wikipedia.org/wiki/Mandelbrot_set](http://en.wikipedia.org/wiki/Mandelbrot_set))
    and the image of Lena. The Mandelbrot set was invented by the mathematician Benoit
    Mandelbrot. These types of fractals are defined by a recursive formula, where
    you calculate the next complex number in a series by multiplying the current complex
    number you have by itself and adding a constant to it. More details will be covered
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们将结合著名的**曼德勃罗分形**（[`en.wikipedia.org/wiki/Mandelbrot_set`](http://en.wikipedia.org/wiki/Mandelbrot_set)）和
    Lena 图像。 曼德勃罗集是数学家伯努瓦·曼德勃罗（Benoit Mandelbrot）发明的。 这些类型的分形由递归公式定义，您可以在其中通过将当前拥有的复数乘以自身并为其添加一个常数来计算序列中的下一个复数。
    本秘籍将涵盖更多详细信息。
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: Install SciPy if necessary. The *See also* section has a reference to the related
    recipe.
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，请安装 SciPy。“另请参见”部分具有相关秘籍的参考。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Start by initializing the arrays, followed by generating and plotting the fractal,
    and finally combining the fractal with the Lena image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先初始化数组，然后生成和绘制分形，最后将分形与 Lena 图像组合：
- en: 'Initialize the `x`, `y`, and `z` arrays, corresponding to the pixels in the
    image area with the `meshgrid()`, `zeros()`, and `linspace()` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`meshgrid()`，`zeros()`和`linspace()`函数初始化对应于图像区域中像素的`x`，`y`和`z`数组：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If `z` is a complex number, we have this relation for a Mandelbrot fractal:![How
    to do it...](img/0945_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`z`是复数，则对于曼德勃罗分形具有以下关系：![操作步骤](img/0945_05_08.jpg)
- en: 'Here, `c` is a constant complex number. This can be graphed in the complex
    plane with the horizontal axis showing real values and the vertical axis showing
    imaginary values. We will use the so-called **escape time** **algorithm** to draw
    the fractal. This algorithm scans the points in a small region around the origin
    at a distance of about 2 units. Each of these points is used as the `c` value
    and is assigned a color based on the number of iterations it takes to escape the
    region. If it takes more than a predefined number of iterations to escape, the
    pixel gets the default background color. For more information, see the Wikipedia
    article already mentioned in this recipe:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，`c`是常数复数。 这可以在复平面上绘制，水平轴显示实数值，垂直轴显示虚数值。 我们将使用所谓的**逃逸时间算法**绘制分形。 该算法以大约 2
    个单位的距离扫描原点周围小区域中的点。 这些点中的每一个都用作`c`值，并根据逃避区域所需的迭代次数为其指定颜色。 如果所需的迭代次数超过了预定义的次数，则像素将获得默认背景色。
    有关更多信息，请参见此秘籍中已提及的维基百科文章：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The resulting image is shown here:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图像如下所示：
- en: '![How to do it...](img/0945_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_02.jpg)'
- en: 'The following is the complete code for this recipe from the `mandelbrot.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书代码集中`mandelbrot.py`文件中该秘籍的完整代码：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'The following functions were used in this example:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中使用了以下函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `linspace()` | This function returns numbers within a range with a specified
    interval between them |'
  prefs: []
  type: TYPE_TB
  zh: '| `linspace()` | 此函数返回范围内具有指定间隔的数字 |'
- en: '| `choose()` | This function creates an array by choosing values from arrays
    based on a condition |'
  prefs: []
  type: TYPE_TB
  zh: '| `choose()` | 此函数通过根据条件从数组中选择值来创建数组 |'
- en: '| `meshgrid()` | This function returns coordinate arrays from an array containing
    *x* coordinates and an array containing *y* coordinates |'
  prefs: []
  type: TYPE_TB
  zh: '| `meshgrid()` | 此函数从包含 *x* 坐标的数组和包含 *y* 坐标的数组返回坐标数组 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The *Installing matplotlib* recipe in [Chapter 1](ch01.xhtml "Chapter 1. Winding
    Along with IPython"), *Winding Along with IPython*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章，“使用 IPython”中的“安装 Matplotlib”秘籍
- en: The *Installing SciPy* recipe in [Chapter 2](ch02.xhtml "Chapter 2. Advanced
    Indexing and Array Concepts"), *Advanced Indexing and Arrays*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章，“高级索引和数组”中的“安装 SciPy”秘籍
- en: Blurring images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像模糊
- en: We can blur images with a Gaussian filter ([http://en.wikipedia.org/wiki/Gaussian_filter](http://en.wikipedia.org/wiki/Gaussian_filter)).
    This filter is based on the normal distribution. A corresponding SciPy function
    requires the standard deviation as a parameter. In this recipe, we will also plot
    a Polar rose and a spiral [http://en.wikipedia.org/wiki/Polar_coordinate_system](http://en.wikipedia.org/wiki/Polar_coordinate_system).
    These figures are not directly related, but it seemed more fun to combine them
    here.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用高斯过滤器（[`en.wikipedia.org/wiki/Gaussian_filter`](http://en.wikipedia.org/wiki/Gaussian_filter)）来模糊图像。 该过滤器基于正态分布。
    对应的 SciPy 函数需要标准差作为参数。 在此秘籍中，我们还将绘制极地玫瑰和螺旋形（[`en.wikipedia.org/wiki/Polar_coordinate_system`](http://en.wikipedia.org/wiki/Polar_coordinate_system)）。
    这些数字没有直接关系，但是在这里将它们组合起来似乎更有趣。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We start by initializing the polar plots, after which we will blur the Lena
    image and plot using polar coordinates:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从初始化极坐标图开始，之后我们将模糊 Lena 图像并使用极坐标进行绘图：
- en: 'Initialize the polar plots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化极坐标图：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To blur Lena, apply the Gaussian filter with a standard deviation of `4`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要模糊 Lena，请应用标准差为`4`的高斯过滤器：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'matplotlib has a `polar()` function, which plots in polar coordinates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Matplotlib 有一个`polar()`函数，它以极坐标进行绘制：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![How to do it...](img/0945_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_03.jpg)'
- en: 'Here is the complete code for this recipe from the `spiral.py` file in this
    book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这本书的代码集中`spiral.py`文件中该秘籍的完整代码：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We made use of the following functions in this tutorial:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用了以下函数：
- en: '| Functions | Desciptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `gaussian_filter()` | This function applies a Gaussian filter |'
  prefs: []
  type: TYPE_TB
  zh: '| `gaussian_filter()` | 此函数应用高斯过滤器 |'
- en: '| `random_integers()` | This function returns an array with random integer
    values between a high and low bound |'
  prefs: []
  type: TYPE_TB
  zh: '| `random_integers()` | 此函数返回一个数组，数组中的随机整数值在上限和下限之间 |'
- en: '| `polar()` | This function plots a figure using polar coordinates |'
  prefs: []
  type: TYPE_TB
  zh: '| `polar()` | 该函数使用极坐标绘制图形 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The `scipy.ndimage` documentation can be found at [http://docs.scipy.org/doc/scipy-0.14.0/reference/ndimage.html](http://docs.scipy.org/doc/scipy-0.14.0/reference/ndimage.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[`docs.scipy.org/doc/scipy-0.14.0/reference/ndimage.html`](http://docs.scipy.org/doc/scipy-0.14.0/reference/ndimage.html)中找到`scipy.ndimage`文档。
- en: Repeating audio fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复音频片段
- en: As we saw in [Chapter 2](ch02.xhtml "Chapter 2. Advanced Indexing and Array
    Concepts"), *Advanced Indexing and Array Concepts*, we can do neat things with
    WAV files. It's just a matter of downloading the file with the `urllib2` standard
    Python module and loading it with SciPy. Let's download a WAV file and repeat
    it three times. We will skip some of the steps that we've already seen in [Chapter
    2](ch02.xhtml "Chapter 2. Advanced Indexing and Array Concepts"), *Advanced Indexing
    and Array Concepts*.
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第二章，“高级索引和数组概念”中所看到的那样，我们可以使用 WAV 文件来完成整洁的事情。 只需使用`urllib2`标准 Python
    模块下载文件并将其加载到 SciPy 中即可。 让我们下载一个 WAV 文件并重复 3 次。 我们将跳过在第二章，“高级索引和数组概念”中已经看到的一些步骤。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Although NumPy has a `repeat()` function, in this case, it is more appropriate
    to use the `tile()` function. The `repeat()` function would have the effect of
    enlarging the array by repeating individual elements and not repeating the contents
    of it. The following IPython session should clarify the difference between these
    functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管NumPy具有`repeat()`函数，但在这种情况下，更适合使用`tile()`函数。 函数`repeat()`的作用是通过重复单个元素而不重复其内容来扩大数组。
    以下 IPython 会话应阐明这些函数之间的区别：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, armed with this knowledge, apply the `tile()` function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了这些知识，就可以应用`tile()`函数：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Plot the audio data with matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制音频数据：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The original sound data and the repeated data plots are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 原始声音数据和重复数据图如下所示：
- en: '![How to do it...](img/0945_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_04.jpg)'
- en: 'Here is the complete code for this recipe from the `repeat_audio.py` file in
    this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书代码包中`repeat_audio.py`文件中该秘籍的完整代码：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'The following are the most important functions in this recipe:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此秘籍中最重要的函数：
- en: '| Functions | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `scipy.io.wavfile.read()` | Reads a WAV file into an array |'
  prefs: []
  type: TYPE_TB
  zh: '| `scipy.io.wavfile.read()` | 将 WAV 文件读入数组 |'
- en: '| `numpy.tile()` | Repeats an array a specified number of times |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.tile()` | 重复数组指定次数 |'
- en: '| `scipy.io.wavfile.write()` | Creates a WAV file out of a NumPy array with
    a specified sample rate |'
  prefs: []
  type: TYPE_TB
  zh: '| `scipy.io.wavfile.write()` | 从 NumPy 数组中以指定的采样率创建 WAV 文件 |'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The `scipy.io` documentation can be found at [http://docs.scipy.org/doc/scipy-0.14.0/reference/io.html](http://docs.scipy.org/doc/scipy-0.14.0/reference/io.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[`docs.scipy.org/doc/scipy-0.14.0/reference/io.html`](http://docs.scipy.org/doc/scipy-0.14.0/reference/io.html)中找到  `scipy.io`文档。
- en: Generating sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产生声音
- en: 'A sound can be represented mathematically by a sine wave with a certain amplitude,
    frequency, and phase. We can randomly select frequencies from a list specified
    in [http://en.wikipedia.org/wiki/Piano_key_frequencies](http://en.wikipedia.org/wiki/Piano_key_frequencies)
    that comply with the following formula:'
  prefs: []
  type: TYPE_NORMAL
  zh: 声音可以用具有一定幅度，频率和相位的正弦波在数学上表示如下。 我们可以从[`en.wikipedia.org/wiki/Piano_key_frequencies`](http://en.wikipedia.org/wiki/Piano_key_frequencies)中指定的列表中随机选择符合以下公式的频率：
- en: '![Generating sounds](img/0945_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![生成声音](img/0945_05_09.jpg)'
- en: Here, `n` is the number of the piano key. We will number the keys from 1 to
    88\. We will select the amplitude, duration, and phase at random.
  prefs: []
  type: TYPE_NORMAL
  zh: 此处，`n`是钢琴键的编号。 我们将键的编号从 1 到 88。我们将随机选择振幅，持续时间和相位。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Begin by initializing random values, then generate sine waves, compose a melody,
    and finally, plot the generated audio data with matplotlib:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先初始化随机值，然后生成正弦波，编写旋律，最后使用 Matplotlib 绘制生成的音频数据：
- en: 'Initialize to random values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化随机值为：
- en: The amplitude between `200` - `2000`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200`-`2000`之间的幅度'
- en: The duration to `0.01` - `0.2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0.01`-`0.2`的持续时间'
- en: The frequencies using the formula already mentioned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已经提到的公式的频率
- en: 'The phase to values between `0` and `2 pi`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`和`2 pi`之间的相位值：'
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Write a `generate()` function to generate sine waves:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`generate()`函数以生成正弦波：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we have generated a few tones, we only need to compose a coherent melody.
    For now, we will just concatenate the sine waves. This does not give a nice melody,
    but can serve as a starting point for more experimenting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们产生了一些音调，我们只需要组成一个连贯的旋律。 现在，我们将连接正弦波。 这不会产生良好的旋律，但可以作为更多实验的起点：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Plot the generated audio data with matplotlib:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制生成的音频数据：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The generated audio data plot is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的音频数据图如下：
- en: '![How to do it...](img/0945_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_05.jpg)'
- en: 'The source code for this example can be found here, and it is from the `tone_generation.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在此处找到本示例的源代码  ，该代码来自本书代码包中的`tone_generation.py`文件：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We created a WAV file with randomly generated sounds. The `concatenate()` function
    was used to concatenate sine waves.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了带有随机生成声音的 WAV 文件  。 `concatenate()`函数用于连接正弦波。
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The `concatenate()` function is documented at [http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html](http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`concatenate()`函数的文档位于[`docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html)'
- en: Designing an audio filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计音频过滤器
- en: I remember learning in the Analog Electronics class about all types of filters.
    Then we actually constructed these filters. As you can imagine, it's much easier
    to make a filter in software than in hardware.
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得在模拟电子课上学习了所有类型的过滤器。 然后，我们实际上构造了这些过滤器。 可以想象，用软件制作过滤器要比用硬件制作过滤器容易得多。
- en: We will build a filter and apply it to an audio fragment that we will download.
    We have done some of these steps before in this chapter, so we will leave out
    those parts.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个过滤器，并将其应用于要下载的音频片段。 在本章之前，我们已经完成了一些步骤，因此我们将省略那些部分。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'The `iirdesign()` function, as its name suggests, allows us to construct several
    types of analog and digital filters. It can be found in the `scipy.signal` module.
    This module contains a comprehensive list of signal processing functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`iirdesign()`函数允许我们构造几种类型的模拟和数字过滤器。 可以在`scipy.signal`模块中找到。 该模块包含信号处理函数的完整列表：
- en: 'Design the filter with the `iirdesign()` function of the `scipy.signal` module.
    IIR stands for infinite impulse response; for more information, see [http://en.wikipedia.org/wiki/Infinite_impulse_response](http://en.wikipedia.org/wiki/Infinite_impulse_response).
    We are not going to go into all the details of the `iirdesign()` function. Take
    a look at the documentation at [http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html](http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html)
    if necessary. In short, these are the parameters we will set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`scipy.signal`模块的`iirdesign()`函数设计过滤器。 IIR 代表无限冲激响应； 有关更多信息，请参见[`en.wikipedia.org/wiki/Infinite_impulse_response`](http://en.wikipedia.org/wiki/Infinite_impulse_response)。
    我们将不涉及`iirdesign())`函数的所有细节。 查看[`docs.scipy.org/doc/scipy/reference`](http://docs.scipy.org/doc/scipy/reference)中的文档。
    简而言之，这些是我们将要设置的参数：
- en: Frequencies normalized from 0 to 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频率标准化为 0 到 1
- en: Maximum loss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大损失
- en: Minimum attenuation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小衰减
- en: 'Filter type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器类型：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The configuration of this filter corresponds to a Butterworth bandpass fillter
    ([http://en.wikipedia.org/wiki/Butterworth_filter](http://en.wikipedia.org/wiki/Butterworth_filter)).
    The **Butterworth filter** was first described by the physicist Stephen Butterworth
    in 1930.
  prefs: []
  type: TYPE_NORMAL
  zh: '此过滤器的配置对应于巴特沃斯过滤器（[`en.wikipedia.org/wiki/Butterworth_filter`](http://en.wikipedia.org/wiki/Butterworth_filter)）。
    **巴特沃斯过滤器**由物理学家史蒂芬·巴特沃斯（Stephen Butterworth）于 1930 年首次描述。'
- en: 'Apply the filter with the `scipy.signal.lfilter()` function. It accepts as
    arguments the values from the previous step and, of course, the data array to
    filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`scipy.signal.lfilter()`函数应用过滤器。 它接受上一步的值作为参数，当然也接受要过滤的数据数组：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When writing the new audio file, make sure that it is of the same data type
    as the original data array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 写入新的音频文件时，请确保其数据类型与原始数据数组相同：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After plotting the original and filtered data, we get the following plot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制原始数据和过滤后的数据之后，我们得到以下图：
- en: '![How to do it...](img/0945_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_06.jpg)'
- en: 'The code for the audio filter is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 音频过滤器的代码列出如下：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We created and applied a Butterworth bandpass filter. The following functions
    were introduced to create the filter:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建并应用了巴特沃斯带通过滤器。 引入了以下函数来创建过滤器：
- en: '| Functions | Descriptions |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `scipy.signal.iirdesign()` | Creates an IIR digital or analog filter. This
    function has an extensive parameter list, which is documented at [http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html](http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html).
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `scipy.signal.iirdesign()` | 创建一个 IIR 数字或模拟过滤器。 此函数具有广泛的参数列表，该列表在[`docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html`](http://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.iirdesign.html)中记录。
    |'
- en: '| `scipy.signal.lfilter()` | Filters an array, given a digital filter. |'
  prefs: []
  type: TYPE_TB
  zh: '| `scipy.signal.lfilter()` | 给定一个数字过滤器，对数组进行滤波。 |'
- en: 'Edge detection with the Sobel filter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用索贝尔过滤器进行边界检测
- en: 'The **Sobel operator** ([http://en.wikipedia.org/wiki/Sobel_operator](http://en.wikipedia.org/wiki/Sobel_operator))
    can be used for edge detection in images. The edge detection is based on performing
    a discrete differentiation on the image intensity. Since an image is two-dimensional,
    the gradient also has two components, unless we limit ourselves to one dimension,
    of course. We will apply the Sobel filter to the picture of Lena Söderberg.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**索贝尔过滤器**（[`en.wikipedia.org/wiki/Sobel_operator`](http://en.wikipedia.org/wiki/Sobel_operator)）可以用于图像中的边界检测 。
    边界检测基于对图像强度执行离散差分。 由于图像是二维的，因此渐变也有两个分量，除非我们将自身限制为一维。 我们将索贝尔过滤器应用于 Lena 的图片。'
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'In this section, you will learn how to apply the Sobel filter to detect edges
    in the Lena image:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，您将学习如何应用索贝尔过滤器来检测 Lena 图像中的边界：
- en: 'To apply the Sobel filter in the *x* direction, set the axis parameter to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 *x* 方向上应用索贝尔过滤器，请将轴参数设置为`0`：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To apply the Sobel filter in the *y* direction, set the axis parameter to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 *y* 方向上应用索贝尔过滤器，请将轴参数设置为`1`：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The default Sobel filter only requires the input array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认的索贝尔过滤器仅需要输入数组：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here are the original and resulting image plots, showing edge detection with
    the Sobel filter:'
  prefs: []
  type: TYPE_NORMAL
  zh: 是原始图像图和所得图像绘图，显示了使用索贝尔过滤器进行边界检测：
- en: '![How to do it...](img/0945_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤](img/0945_05_07.jpg)'
- en: 'The complete edge detection code is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的边界检测代码如下：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We applied the Sobel filter to the picture of the famous model Lena Söderberg.
    As we saw in this example, we can specify along which axis to do the computation.
    The default setting is axis independent.'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将索贝尔过滤器应用于著名模型  Lena 的图片。 如本例所示，我们可以指定沿哪个轴进行计算。 默认设置为独立于轴。
