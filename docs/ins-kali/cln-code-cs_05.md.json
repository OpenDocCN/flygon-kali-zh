["```cs\nprivate static void UncheckedBankAccountException()\n{\n    var currentBalance = int.MaxValue;\n    Console.WriteLine($\"Current Balance: {currentBalance}\");\n    currentBalance = unchecked(currentBalance + 1);\n    Console.WriteLine($\"Current Balance + 1 = {currentBalance}\");\n    Console.ReadKey();\n}\n```", "```cs\nstatic byte y, z;\n```", "```cs\nprivate static void CheckedAdd()\n{\n    try\n    {\n        Console.WriteLine(\"### Checked Add ###\");\n        Console.WriteLine($\"x = {y} + {z}\");\n        Console.WriteLine($\"x = {checked((byte)(y + z))}\");\n    }\n    catch (OverflowException oex)\n    {\n        Console.WriteLine($\"CheckedAdd: {oex.Message}\");\n    }\n}\n```", "```cs\nprivate static void CheckedMultiplication()\n{\n    try\n    {\n        Console.WriteLine(\"### Checked Multiplication ###\");\n        Console.WriteLine($\"x = {y} x {z}\");\n        Console.WriteLine($\"x = {checked((byte)(y * z))}\");\n    }\n    catch (OverflowException oex)\n    {\n        Console.WriteLine($\"CheckedMultiplication: {oex.Message}\");\n    }\n}\n```", "```cs\nprivate static void UncheckedAdd()\n{\n    try\n    {\n         Console.WriteLine(\"### Unchecked Add ###\");\n         Console.WriteLine($\"x = {y} + {z}\");\n         Console.WriteLine($\"x = {unchecked((byte)(y + z))}\");\n    }\n    catch (OverflowException oex)\n    {\n         Console.WriteLine($\"CheckedAdd: {oex.Message}\");\n    }\n}\n```", "```cs\nprivate static void UncheckedMultiplication()\n{\n    try\n    {\n         Console.WriteLine(\"### Unchecked Multiplication ###\");\n         Console.WriteLine($\"x = {y} x {z}\");\n         Console.WriteLine($\"x = {unchecked((byte)(y * z))}\");\n    }\n    catch (OverflowException oex)\n    {\n        Console.WriteLine($\"CheckedMultiplication: {oex.Message}\");\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    y = byte.MaxValue;\n    z = 2;\n    CheckedAdd();\n    CheckedMultiplication();\n    UncheckedAdd();\n    UncheckedMultiplication();\n    Console.WriteLine(\"Press any key to exit.\");\n    Console.ReadLine();\n}\n```", "```cs\npublic class Person\n{\n    public string Name { get; }\n    public Person(string name)\n    {\n         Name = name;\n    }\n}\n```", "```cs\n[AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)]\ninternal sealed class ValidatedNotNullAttribute : Attribute { }\n```", "```cs\ninternal static class ArgumentNullValidator\n{\n    public static void NotNull(string name, \n     [ValidatedNotNull] object value)\n    {\n        if (value == null)\n        {\n            throw new ArgumentNullException(name);\n        }\n    }\n}\n```", "```cs\nprivate void TryCatchExample(Person person)\n{\n    try\n    {\n        Console.WriteLine($\"Person's Name: {person.Name}\");\n    }\n    catch (NullReferenceException nre)\n    {\n        Console.WriteLine(\"Error: The person argument cannot be null.\");\n        throw;\n    }\n}\n```", "```cs\nprivate void ArgumentNullValidatorExample(Person person)\n{\n    ArgumentNullValidator.NotNull(\"Person\", person);\n    Console.WriteLine($\"Person's Name: {person.Name}\");\n    Console.ReadKey();\n}\n```", "```cs\nprivate static void Main(string[] args)\n{\n    var usingBrExceptions = new UsingBusinessRuleExceptions();\n    usingBrExceptions.Run();\n    var usingPflow = new UsingProgramFlow();\n    usingPflow.Run();\n}\n```", "```cs\ninternal class CurrentAccount\n{\n    public long CustomerId { get; }\n    public decimal AgreedOverdraft { get; }\n    public bool IsAllowedToGoOverdrawn { get; }\n    public decimal CurrentBalance { get; }\n    public decimal AvailableBalance { get; private set; }\n    public int AtmDailyLimit { get; }\n    public int AtmWithdrawalAmountToday { get; private set; }\n}\n```", "```cs\npublic CurrentAccount(long customerId)\n{\n    CustomerId = customerId;\n    AgreedOverdraft = GetAgreedOverdraftLimit();\n    IsAllowedToGoOverdrawn = GetIsAllowedToGoOverdrawn();\n    CurrentBalance = GetCurrentBalance();\n    AvailableBalance = GetAvailableBalance();\n    AtmDailyLimit = GetAtmDailyLimit();\n    AtmWithdrawalAmountToday = 0;\n}\n```", "```cs\nprivate static decimal GetAgreedOverdraftLimit()\n{\n    return 0;\n}\n```", "```cs\nprivate static bool GetIsAllowedToGoOverdrawn()\n{\n    return false;\n}\n```", "```cs\nprivate static decimal GetCurrentBalance()\n{\n    return 250.00M;\n}\n```", "```cs\nprivate static decimal GetAvailableBalance()\n{\n    return 173.64M;\n}\n```", "```cs\nprivate static int GetAtmDailyLimit()\n{\n    return 250;\n}\n```", "```cs\npublic class UsingBusinessRuleExceptions\n{\n    public void Run()\n    {\n        ExceedAtmDailyLimit();\n        ExceedAvailableBalance();\n    }\n}\n```", "```cs\nprivate void ExceedAtmDailyLimit()\n{\n     try\n     {\n            var customerAccount = new CurrentAccount(1);\n            customerAccount.Withdraw(300);\n            Console.WriteLine(\"Request accepted. Take cash and card.\");\n      }\n      catch (ExceededAtmDailyLimitException eadlex)\n      {\n            Console.WriteLine(eadlex.Message);\n      }\n}\n```", "```cs\nprivate void ExceedAvailableBalance()\n{\n    try\n    {\n        var customerAccount = new CurrentAccount(1);\n        customerAccount.Withdraw(180);\n        Console.WriteLine(\"Request accepted. Take cash and card.\");\n    }\n    catch (InsufficientFundsException ifex)\n    {\n        Console.WriteLine(ifex.Message);\n    }\n}\n```", "```cs\npublic class UsingProgramFlow\n{\n    private int _requestedAmount;\n    private readonly CurrentAccount _currentAccount;\n\n    public UsingProgramFlow()\n    {\n        _currentAccount = new CurrentAccount(1);\n    }\n}\n```", "```cs\npublic void Run()\n{\n    _requestedAmount = 300;\n    Console.WriteLine($\"Request: Withdraw {_requestedAmount}\");\n    WithdrawMoney();\n    _requestedAmount = 180;\n    Console.WriteLine($\"Request: Withdraw {_requestedAmount}\");\n    WithdrawMoney();\n    _requestedAmount = 20;\n    Console.WriteLine($\"Request: Withdraw {_requestedAmount}\");\n    WithdrawMoney();\n}\n```", "```cs\nprivate bool ExceedsDailyLimit()\n{\n    return (_requestedAmount > _currentAccount.AtmDailyLimit)\n        || (_requestedAmount + _currentAccount.AtmWithdrawalAmountToday > _currentAccount.AtmDailyLimit);\n}\n```", "```cs\nprivate bool ExceedsAvailableBalance()\n{\n    return _requestedAmount > _currentAccount.AvailableBalance;\n}\n```", "```cs\nprivate void WithdrawMoney()\n{\n    if (ExceedsDailyLimit())\n        Console.WriteLine(\"Cannot exceed ATM Daily Limit. Request denied.\");\n    else if (ExceedsAvailableBalance())\n        Console.WriteLine(\"Cannot exceed available balance. You have no agreed \n         overdraft facility. Request denied.\");\n    else\n        Console.WriteLine(\"Request granted. Take card and cash.\");\n}\n```", "```cs\n    public class TickerListNotFoundException : Exception\n    {\n        public TickerListNotFoundException() : base()\n        {\n        }\n\n        public TickerListNotFoundException(string message)\n            : base(message)\n        {\n        }\n\n        public TickerListNotFoundException(\n            string message, \n            Exception innerException\n        )\n            : base(message, innerException)\n        {\n        }\n    }\n```", "```cs\nstatic void Main(string[] args)\n{\n    ThrowCustomExceptionA();\n    ThrowCustomExceptionB();\n    ThrowCustomExceptionC();\n}\n```", "```cs\nprivate static void ThrowCustomExceptionA()\n{\n    try\n    {\n        Console.WriteLine(\"throw new TickerListNotFoundException();\");\n        throw new TickerListNotFoundException();\n    }\n    catch (Exception tlnfex)\n    {\n        Console.WriteLine(tlnfex.Message);\n    }\n}\n```", "```cs\nprivate static void ThrowCustomExceptionB()\n{\n    try\n    {\n        Console.WriteLine(\"throw new \n         TickerListNotFoundException(Message);\");\n        throw new TickerListNotFoundException(\"Ticker list not found.\");\n    }\n    catch (Exception tlnfex)\n    {\n        Console.WriteLine(tlnfex.Message);\n    }\n}\n```", "```cs\nprivate static void ThrowCustomExceptionC()\n{\n    try\n    {\n        Console.WriteLine(\"throw new TickerListNotFoundException(Message, \n         InnerException);\");\n        throw new TickerListNotFoundException(\n            \"Ticker list not found for this exchange.\",\n            new FileNotFoundException(\n                \"Ticker list file not found.\",\n                @\"F:\\TickerFiles\\LSE\\AimTickerList.json\"\n            )\n        );\n    }\n    catch (Exception tlnfex)\n    {\n        Console.WriteLine($\"{tlnfex.Message}\\n{tlnfex.InnerException}\");\n    }\n}\n```"]