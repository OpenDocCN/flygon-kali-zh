- en: Android Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android服务
- en: In the previous chapter, we started working with concurrency mechanisms in Android.
    We made great progress. However, our journey to Android concurrency mechanisms
    is not over yet. We have to present, perhaps, the most important part of the Android
    Framework--Android services. In this chapter, we will explain what are services,
    and when and how to use them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们开始使用Android中的并发机制。我们取得了很大的进展。然而，我们对Android并发机制的旅程还没有结束。我们必须介绍Android框架中可能是最重要的部分--Android服务。在本章中，我们将解释服务是什么，何时以及如何使用它们。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Service categorization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务分类
- en: Basics of Android services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android服务的基础知识
- en: Defining the main application service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义主要应用程序服务
- en: Defining the intent service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义意图服务
- en: Service categorization
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务分类
- en: Before we define the Android service categorization and dive deeper into each
    type, we must answer the question of what Android service really is. Well, **Android
    service** is a mechanism provided by the Android Framework by which we can move
    the execution of long running tasks to the background. Android service provides
    some nice additional features that can make a developer's work more flexible and
    easier. To explain how it will make our development easier, we will create a service
    by extending our Journaler application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定义Android服务分类并深入研究每种类型之前，我们必须回答Android服务到底是什么。嗯，**Android服务**是Android框架提供的一种机制，通过它我们可以将长时间运行的任务移至后台。Android服务提供了一些很好的附加功能，可以使开发人员的工作更加灵活和简单。为了解释它如何使我们的开发更容易，我们将通过扩展我们的Journaler应用程序来创建一个服务。
- en: Android service is an application component that does not have any UI. It can
    be started by any Android application component and continue running as long as
    it's needed, even if we leave our application or kill it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Android服务是一个没有任何UI的应用程序组件。它可以被任何Android应用程序组件启动，并在需要时继续运行，即使我们离开我们的应用程序或杀死它。
- en: 'There are three main types of Android services:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android服务有三种主要类型：
- en: Foreground
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前台
- en: Background
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景
- en: Bound
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定
- en: Foreground Android services
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前台Android服务
- en: A foreground service performs tasks that are noticeable to the end user. These
    services must display a status bar icon. They continue running even when there
    is no interaction with the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前台服务执行的任务对最终用户是可见的。这些服务必须显示状态栏图标。即使没有与应用程序的交互，它们也会继续运行。
- en: Background Android services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后台Android服务
- en: Unlike foreground services, background services perform tasks that aren't noticed
    by the end user. For example, we will perform synchronization with our backend
    instance. The user does not need to know about our progress. We decided not to
    bother the user with that. Everything will be performed silently in the background
    of our application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与前台服务不同，后台服务执行的任务不会被最终用户注意到。例如，我们将与后端实例进行同步。用户不需要知道我们的进度。我们决定不去打扰用户。一切都将在我们应用程序的后台默默执行。
- en: Bound Android services
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定Android服务
- en: Our application components can bind to a service and trigger different tasks
    to be executed. Interacting with a service in Android is very simple. A component
    binds to a service and, as long there is at least one such component, the service
    keeps running. When there are no components bound to a service, the service is
    destroyed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序组件可以绑定到一个服务并触发不同的任务来执行。在Android中与服务交互非常简单。只要有至少一个这样的组件，服务就会继续运行。当没有组件绑定到服务时，服务就会被销毁。
- en: It is possible to create a background service that is running in the background
    and have the ability to bind to it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建一个在后台运行并具有绑定能力的后台服务。
- en: Android service basics
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android服务基础知识
- en: 'To define Android service, you have to extend the `Service` class. We must
    override some of the following methods so the service is functioning:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义Android服务，您必须扩展`Service`类。我们必须重写以下一些方法，以便服务能够正常运行：
- en: '`onStartCommand()`: This method is executed when the `startService()` method
    is triggered by some Android component. After the method is executed, Android
    service is started and can run in the background indefinitely. To stop this service,
    you must execute the `stopService()` method that has an opposite functionality
    to the `startService()` method.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStartCommand()`: 当`startService()`方法被某个Android组件触发时执行此方法。方法执行后，Android服务就会启动并可以在后台无限期运行。要停止这个服务，必须执行`stopService()`方法，它与`startService()`方法的功能相反。'
- en: '`onBind()`: To bind to the service from another Android component, use the
    `bindService()` method. After we bind, the `onBind()` method is executed. In your
    service implementation of this method, you must provide an interface that clients
    use to communicate with the service by returning an `Ibinder` class instance.
    Implementing this method is not optional, but if you don''t plan to bind to the
    service, just return `null`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onBind()`: 要从另一个Android组件绑定到服务，请使用`bindService()`方法。绑定后，将执行`onBind()`方法。在此方法的服务实现中，您必须提供一个接口，客户端通过返回一个`Ibinder`类实例与服务通信。实现此方法是不可选的，但如果您不打算绑定到服务，只需返回`null`即可。'
- en: '`onCreate()`: This method is executed when the service is created. It is not
    executed if the service is already running.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate()`: 当服务被创建时执行此方法。如果服务已经在运行，则不会执行此方法。'
- en: '`onDestroy()`: This method is executed when the service is destroyed. Override
    this method and perform all cleanup tasks for your service here.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDestroy()`: 当服务被销毁时执行此方法。重写此方法并在此处执行所有清理任务。'
- en: '`onUnbind()`: This method is executed when we unbind from the service.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onUnbind()`: 当我们从服务解绑时执行此方法。'
- en: Declaring your service
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明您的服务
- en: 'To declare your service, you need to add its class to the Android Manifest.
    The following code snippet explains what the service definition in Android Manifest
    should look like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明您的服务，您需要将其类添加到Android清单中。以下代码片段解释了Android清单中服务定义应该是什么样子的：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we defined the `MainService` class that extends the `Service`
    class and it's located under the `service` package. The exported flag is set to
    `false`, which means that the `service` will run in the same process as our application.
    To run your  `service` in a separate process, set this flag to `true`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们定义了扩展`Service`类的`MainService`类，并且它位于`service`包下。导出标志设置为`false`，这意味着`service`将在与我们的应用程序相同的进程中运行。要在一个单独的进程中运行你的`service`，将这个标志设置为`true`。
- en: 'It''s important to note that the `Service` class is not the only one you can
    extend. The `IntentService` class is also available. So, what do we get when we
    extend it? `IntentService` represents a class derived from the `Service` class.
    `IntentService` uses the worker thread to process requests one by one. We must
    implement the `onHandleIntent()` method for that purpose. This is what it looks
    like when the `IntentService` class is extended:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，`Service`类不是你唯一可以扩展的类。`IntentService`类也是可用的。那么，当我们扩展它时，我们会得到什么？`IntentService`代表从`Service`类派生的类。`IntentService`使用工作线程逐个处理请求。我们必须实现`onHandleIntent()`方法来实现这个目的。当`IntentService`类被扩展时，它看起来像这样：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s go back on extending the `Service` class and focus on it. We will override
    `onStartCommand()` method to look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到扩展`Service`类并专注于它。我们将重写`onStartCommand()`方法，使其看起来像这样：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, what does the `START_STICKY` return result mean? If it happens that our
    service is killed by the system, or we kill the application to which the service
    belongs, it will start again. Opposite of this is `START_NOT_STICKY`; in that
    case, the service will not be recreated and restarted.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`START_STICKY`返回的结果是什么意思？如果我们的服务被系统杀死，或者我们杀死了服务所属的应用程序，它将重新启动。相反的是`START_NOT_STICKY`；在这种情况下，服务将不会被重新创建和重新启动。
- en: Starting the service
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务
- en: 'To start the service, we need to define the intent that will represent it.
    This is an example on how the service can be started:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务，我们需要定义代表它的意图。这是服务可以启动的一个例子：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `ctx` represents any valid instance of the Android `Context` class.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`ctx`代表Android `Context`类的任何有效实例。
- en: Stopping the service
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止服务
- en: 'To stop the service, execute the `stopService()` method from the Android `Context`
    class like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止服务，执行Android `Context`类的`stopService()`方法，就像这样：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Binding to Android service
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定到Android服务
- en: A **bound service** is the service that allows Android components to bind to
    it. To perform binding, we must call the `bindService()` method. When you want
    to interact with the service from activities or other Android components, service
    binding is necessary. For bind to work, you must implement the `onBind()` method
    and return an `IBinder` instance. If there are no interested parties anymore,
    and all of them are unbound, Android destroys the service. For this type of service,
    you do not need to perform the stop routine.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**绑定服务**是允许Android组件绑定到它的服务。要执行绑定，我们必须调用`bindService()`方法。当你想要从活动或其他Android组件与服务交互时，服务绑定是必要的。为了使绑定工作，你必须实现`onBind()`方法并返回一个`IBinder`实例。如果没有人感兴趣了，所有人都解绑了，Android就会销毁服务。对于这种类型的服务，你不需要执行停止例程。'
- en: Stopping the service
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止服务
- en: We already mentioned that `stopService` will stop our service. Anyway, we can
    achieve the same by calling `stopSelf()` within our service implementation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到`stopService`将停止我们的服务。无论如何，我们可以通过在我们的服务实现中调用`stopSelf()`来实现相同的效果。
- en: Service lifecycle
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务生命周期
- en: 'We covered and explained all important methods that are executed during the
    lifetime of an Android service. Service has its own lifecycle as all other Android
    components. Everything we mentioned so far is represented in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖并解释了在Android服务的生命周期中执行的所有重要方法。服务像所有其他Android组件一样有自己的生命周期。到目前为止我们提到的一切都在下面的截图中表示出来：
- en: '![](img/38a59665-0d7e-433a-8e7a-5188c64ad0cd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38a59665-0d7e-433a-8e7a-5188c64ad0cd.png)'
- en: Now, as we have a basic understanding of the Android services, we will create
    our own service and extend the Journaler application. This service will be repeatedly
    extended later in other chapters with more code. So, pay attention to every line
    as it can be crucial.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对Android服务有了基本的了解，我们将创建我们自己的服务并扩展Journaler应用程序。这个服务将在后面的章节中被重复扩展更多的代码。所以，请注意每一行，因为它可能是至关重要的。
- en: Defining the main application service
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义主应用程序服务
- en: 'As you already know, our application is dealing with Notes and Todos. The current
    application implementation keeps our data locally stored in the SQLite database.
    This data will be synchronized with the backend instance running on some remote
    server. All operations related to the synchronization will be performed silently
    in the background of our application. All responsibility will be given to the
    service, which we will define now. Create a new package called `service` and a
    new class `MainService` that will extend the Android `service` class. Make sure
    your implementation looks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，我们的应用程序处理笔记和待办事项。当前的应用程序实现将我们的数据保存在SQLite数据库中。这些数据将与运行在某个远程服务器上的后端实例进行同步。所有与同步相关的操作将在我们应用程序的后台默默执行。所有的责任将交给我们将要定义的服务。创建一个名为`service`的新包和一个名为`MainService`的新类，它将扩展Android
    `service`类。确保你的实现看起来像这样：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s explain our main service. As you already know, we will extend Android''s
    `Service` class to get all service functionality. We also implemented the `DataSynchronization`
    interface that will describe the main functionality of our service, which is synchronization.
    Please refer to the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下我们的主要服务。正如你们已经知道的，我们将扩展Android的`Service`类以获得所有的服务功能。我们还实现了`DataSynchronization`接口，它将描述我们服务的主要功能，即同步。请参考以下代码：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, we defined the implementation for the `synchronize()` method that will actually
    simulate real synchronization. Later, we will update this code to perform real
    backend communication.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们定义了`synchronize()`方法的实现，它实际上将模拟真正的同步。稍后，我们将更新这段代码以执行真正的后端通信。
- en: All important lifecycle methods are overridden. Pay attention to the `bind()`
    method! This method will return an instance of binder that is produced by calling
    the `getServiceBinder()` method. Thanks to the `MainServiceBinder` class, we will
    expose our `service` instance to the end user that will be able to trigger the
    synchronize mechanism whenever it is needed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所有重要的生命周期方法都被重写。注意`bind()`方法！此方法将通过调用`getServiceBinder()`方法返回一个由`MainServiceBinder`类生成的绑定器实例。由于`MainServiceBinder`类，我们将向最终用户公开我们的`service`实例，最终用户将能够在需要时触发同步机制。
- en: Synchronization is not triggered just by the end user, but also automatically
    by the service itself. We trigger synchronization when a service is started and
    when it is destroyed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同步不仅仅是由最终用户触发的，还会被服务自动触发。当服务启动和销毁时，我们会触发同步。
- en: 'The next important point for us is the starting and stopping of `MainService`.
    Open your `Journaler` class that represents your application and apply this update:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，`MainService`的启动和停止是下一个重要的点。打开代表您的应用程序的`Journaler`类，并应用此更新：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When the Journaler application is created, `MainService` will be started. We
    will also add one small optimization. If it happens that our application gets
    low on memory, we will stop our `MainService` class. Since the service is started
    as sticky, if we explicitly kill our application, the service will restart.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当Journaler应用程序被创建时，`MainService`将被启动。我们还将添加一个小的优化。如果我们的应用程序内存不足，我们将停止我们的`MainService`类。由于服务是粘性启动的，如果我们明确杀死我们的应用程序，服务将重新启动。
- en: So far, we covered the service starting and stopping and its implementation.
    As you probably remember our mockup, at the bottom of our application drawer,
    we planned to put one more item. We planned to have the synchronize button. Triggering
    this button would do synchronization with the backend.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了服务的启动和停止以及其实现。您可能还记得我们的模拟，在我们的应用程序抽屉底部，我们计划放置一个额外的项目。我们计划放置同步按钮。触发此按钮将与后端进行同步。
- en: 'We will add that menu item and connect it with our service. Let''s do some
    preparation first. Open the `NavigationDrawerItem` class and update it as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加该菜单项并将其与我们的服务连接起来。首先让我们做一些准备工作。打开`NavigationDrawerItem`类并按以下方式更新它：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We introduced the `enabled` parameter. Like this, some of our application drawer
    items can be disabled if needed. Our synchronize button will be disabled by default
    and enabled when we bind to the `main` service. These changes must affect `NavigationDrawerAdapter`
    too. Please refer to the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了`enabled`参数。这样，如果需要，我们的应用程序抽屉中的一些项目可以被禁用。我们的同步按钮将默认禁用，并在绑定到`main`服务时启用。这些更改也必须影响`NavigationDrawerAdapter`。请参考以下代码：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we will update our `MainActivity` class as follows, so the synchronization
    button can trigger synchronization:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更新我们的`MainActivity`类如下，以便同步按钮可以触发同步：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We will bind or unbind the `main` service whether our main activity status is
    active or not. To perform binding, we need the `ServiceConnection` implementation
    as it will enable or disable the synchronization button depending on the binding
    state. Also, we will maintain the `main` service instance depending on the binding
    state. The synchronization button will have access to the `service` instance and
    trigger the `synchronize()` method when clicked.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据我们的主活动状态是否活动来绑定或解绑`main`服务。为了执行绑定，我们需要`ServiceConnection`实现，因为它将根据绑定状态启用或禁用同步按钮。此外，我们将根据绑定状态维护`main`服务实例。同步按钮将访问`service`实例，并在点击时触发`synchronize()`方法。
- en: Defining the intent service
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义`intent`服务
- en: We have our `main` service running and responsibility defined. We will now make
    more improvements to our application by introducing one more service. This time,
    we will define the `intent` service. The `intent` service will take over the responsibility
    for the execution of the database CRUD operations. Basically, we will define our
    `intent` service and perform refactoring of the code we already have.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`main`服务正在运行并且责任已定义。现在，我们将通过引入另一个服务来对我们的应用程序进行更多改进。这一次，我们将定义`intent`服务。`intent`服务将接管数据库CRUD操作的执行责任。基本上，我们将定义我们的`intent`服务并对我们已有的代码进行重构。
- en: 'First, we will create a new class inside the `service` package called `DatabaseService`.
    Before we put the whole implementation, we will register it in the Android Manifest
    as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`service`包内创建一个名为`DatabaseService`的新类。在我们放置整个实现之前，我们将在Android清单中注册它如下：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The service will receive intents, obtain the operation, and note the instance
    from it. Depending on the operation, the proper CRUD operation will be triggered.
    To pass a `Note` instance to `Intent`, we must implement `Parcelable` so that
    the data is passed efficiently. For example, comparing to `Serializable`, `Parcelable`
    is much faster. The code, for this purpose, is heavily optimized. We will perform
    explicit serialization without using reflection. Open your `Note` class and update
    it as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 服务将接收意图，获取操作，并从中获取实例。根据操作，将触发适当的CRUD操作。为了将`Note`实例传递给`Intent`，我们必须实现`Parcelable`，以便数据传递效率高。例如，与`Serializable`相比，`Parcelable`要快得多。为此目的，代码已经进行了大量优化。我们将执行显式序列化，而不使用反射。打开您的`Note`类并按以下方式更新它：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Note` class will be serialized and deserialized efficiently when passed
    via `intent` to `DatabaseService`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过`intent`传递到`DatabaseService`时，`Note`类将被高效地序列化和反序列化。
- en: 'The last piece of puzzle is changing the code, which currently performs CRUD
    operations. Instead of directly accessing the `Db` class from our `NoteActivity`
    class, we will create `intent` and fire it so our service handles the rest of
    the work for us. Open `NoteActivity` class and update the code like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一块拼图是更改当前执行CRUD操作的代码。我们将创建`intent`并将其发送，以便我们的服务为我们处理其余工作。打开`NoteActivity`类并按以下方式更新代码：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the change was really simple. Build your application and run
    it. As you create or update your `Note` class, you will notice logs about the
    database operation we perform. Also, you will notice the `DatabaseService` lifecycle
    methods being logged.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，改变真的很简单。构建你的应用程序并运行它。当你创建或更新你的`Note`类时，你会注意到我们执行的数据库操作的日志。此外，你还会注意到`DatabaseService`的生命周期方法被记录下来。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! You mastered Android services and improved the application
    significantly! In this chapter, we explained what Android services are. We also
    explained each type of Android service and gave examples of use. Now, when you
    did these implementations, we encourage you to think about at least one more service
    that can take over some existing part of the application or to introduce something
    completely new. Play with the services and try to think about the benefits they
    can give you.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你掌握了Android服务并显著改进了应用程序！在本章中，我们解释了什么是Android服务。我们还解释了每种类型的Android服务，并举例说明了它们的用途。现在，当你完成这些实现时，我们鼓励你至少考虑一个可以接管应用程序的某个现有部分或引入全新内容的服务。玩转这些服务，并尝试思考它们能给你带来的好处。
