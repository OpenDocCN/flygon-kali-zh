["```java\npublic class Grandad {\n  public String name = \"Grandad\";\n  public String getName() { return this.name; }\n}\n\npublic class Parent extends Grandad {\n  public String name = \"Parent\";\n  public String getName() { return this.name; }\n}\n\npublic class Child extends Parent {\n  public String name = \"Child\";\n  public String getName() { return this.name; }\n}\n```", "```java\nGrandad grandad = new Child();\nSystem.out.println(grandad.name);\nSystem.out.println(grandad.getName());\n\n```", "```java\npublic interface Vehicle {\n  double getSpeedMph(double timeSec);\n  static List<Vehicle> getTraffic(int vehiclesCount){\n    return TrafficFactory.get(vehiclesCount);\n  }\n}\npublic interface Car extends Vehicle {\n  void setPassengersCount(int passengersCount);\n}\npublic interface Truck extends Vehicle {\n  void setPayloadPounds(int payloadPounds);\n}\n```", "```java\nclass VehicleImpl implements Vehicle {\n  public double getSpeedMph(double timeSec){\n    return 42;\n  }\n}\nclass TruckImpl implements Truck {\n  public void setPayloadPounds(int payloadPounds){\n  }\n}\nclass CarImpl implements Car {\n  public void setPassengersCount(int passengersCount){\n  }\n}\n```", "```java\nabstract class VehicleImpl implements Vehicle {\n  public double getSpeedMph(double timeSec){\n    return 42;\n  }\n}\nclass TruckImpl extends VehicleImpl implements Truck {\n  public void setPayloadPounds(int payloadPounds){\n  }\n}\nclass CarImpl extends VehicleImpl implements Car {\n  public void setPassengersCount(int passengersCount){\n  }\n}\n```", "```java\npackage com.packt.javapath.ch08demo.traffic.impl;\n\nimport com.packt.javapath.ch08demo.traffic.Vehicle;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TrafficFactory {\n  public static List<Vehicle> get(int vehiclesCount) {\n    List<Vehicle> list = new ArrayList();\n    return list;\n  }\n}\n```", "```java\ndouble timeSec = 5;\nint vehiclesCount = 4;\nList<Vehicle> traffic = Vehicle.getTraffic(vehiclesCount);\nfor(Vehicle vehicle: traffic){\n  System.out.println(\"Loaded: \" + vehicle.getSpeedMph(timeSec));\n  if(vehicle instanceof Car){\n    ((Car) vehicle).setPassengersCount(0); \n    System.out.println(\"Car(no load): \" + vehicle.getSpeedMph(timeSec));\n  } else {\n    ((Truck) vehicle).setPayloadPounds(0);\n    System.out.println(\"Truck(no load): \" + vehicle.getSpeedMph(timeSec));\n  }\n}\n```", "```java\nabstract class VehicleImpl implements Vehicle {\n  private int weightPounds, horsePower;\n  public VehicleImpl(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  protected int getWeightPounds(){ return this.weightPounds; }\n  protected double getSpeedMph(double timeSec, int weightPounds){\n    double v = 2.0 * this.horsePower * 746 * timeSec * \n                                          32.174 / weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\nclass CarImpl extends VehicleImpl implements Car {\n  private int passengersCount;\n  public CarImpl(int passengersCount, int weightPounds, int horsePower){\n    super(weightPounds , horsePower);\n    this.passengersCount = passengersCount;\n  }\n  public void setPassengersCount(int passengersCount) {\n    this.passengersCount = passengersCount;\n  }\n  protected int getWeightPounds(){ \n    return this.passengersCount * 200 + super.getWeightPounds(); \n  }\n  public double getSpeedMph(double timeSec){\n    return getSpeedMph(timeSec, this.getWeightPounds());\n  }\n}\n```", "```java\nclass TruckImpl extends VehicleImpl implements Truck {\n  private int payloadPounds;\n  TruckImpl(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds, horsePower);\n    this.payloadPounds = payloadPounds;\n  }\n  public void setPayloadPounds(int payloadPounds) {\n    this.payloadPounds = payloadPounds;\n  }\n  protected int getWeightPounds(){ \n    return this.payloadPounds + super.getWeightPounds(); \n  }\n  public double getSpeedMph(double timeSec){\n    return getSpeedMph(timeSec, this.getWeightPounds());\n  }\n}\n```", "```java\npublic class TrafficFactory {\n  public static List<Vehicle> get(int vehiclesCount) {\n    List<Vehicle> list = new ArrayList();\n    for (int i = 0; i < vehiclesCount; i++){\n      Vehicle vehicle;\n      if (Math.random() <= 0.5) {\n        vehicle = new CarImpl(2, 2000, 150);\n      } else {\n        vehicle = new TruckImpl(500, 3000, 300);\n      }\n      list.add(vehicle);\n    }\n    return list;\n  }\n}\n```", "```java\npublic class TrafficApp {\n  public static void main(String... args){\n    double timeSec = 5;\n    int vehiclesCount = 4;\n    List<Vehicle> traffic = Vehicle.getTraffic(vehiclesCount);\n    for(Vehicle vehicle: traffic){\n      System.out.println(\"Loaded: \" + vehicle.getSpeedMph(timeSec));\n      if(vehicle instanceof Car){\n        ((Car) vehicle).setPassengersCount(0);\n        System.out.println(\"Car(no load): \" + \n                           vehicle.getSpeedMph(timeSec));\n      } else {\n        ((Truck) vehicle).setPayloadPounds(0);\n        System.out.println(\"Truck(no load): \" + \n                           vehicle.getSpeedMph(timeSec));\n      }\n    }\n  }\n}\n```", "```java\npackage com.packt.javapath.ch08demo.traffic.impl;\n\nclass SpeedCalculationTest {\n  @Test\n  void speedCalculation() {\n    double timeSec = 5;\n    Vehicle vehicle = new CarImpl(2, 2000, 150);\n    assertEquals(83.0, vehicle.getSpeedMph(timeSec));\n    ((Car) vehicle).setPassengersCount(0);\n    assertEquals(91.0, vehicle.getSpeedMph(timeSec));\n\n    vehicle = new TruckImpl(500, 3000, 300);\n    assertEquals(98.0, vehicle.getSpeedMph(timeSec));\n    ((Truck) vehicle).setPayloadPounds(0);\n    assertEquals(105.0, vehicle.getSpeedMph(timeSec));\n   }\n}\n```", "```java\nclass SpeedModelImpl implements SpeedModel {\n  public double getSpeedMph(double timeSec, int weightPounds,\n                            int horsePower){\n    double v = 2.0 * horsePower * 746 * timeSec * 32.174 / weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\npublic class SpeedModelFactory {\n  public static SpeedModel speedModel(){\n    return new SpeedModelImpl();\n  }\n}\n```", "```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, int weightPounds, int horsePower);\n  static SpeedModel getInstance(Month month, int dayOfMonth, int hour){\n    return SpeedModelFactory.speedModel(month, dayOfMonth, hour);\n  }\n}\n```", "```java\nabstract class VehicleImpl implements Vehicle {\n  private int weightPounds, horsePower;\n  private SpeedModel speedModel;\n  public VehicleImpl(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  protected int getWeightPounds(){ return this.weightPounds; }\n  protected double getSpeedMph(double timeSec, int weightPounds){\n    if(this.speedModel == null){\n      throw new RuntimeException(\"Speed model is required\");\n    } else {\n      return speedModel.getSpeedMph(timeSec, weightPounds, horsePower);\n    }\n  }\n  public void setSpeedModel(SpeedModel speedModel) {\n    this.speedModel = speedModel;\n  }\n}\n```", "```java\npublic class TrafficFactory {\n  public static List<Vehicle> get(int vehiclesCount) {\n    SpeedModel speedModel = SpeedModelFactory.speedModel();\n    List<Vehicle> list = new ArrayList();\n    for (int i = 0; i < vehiclesCount; i++) {\n      Vehicle vehicle;\n      if (Math.random() <= 0.5) {\n        vehicle = new CarImpl(2, 2000, 150);\n      } else {\n        vehicle = new TruckImpl(500, 3000, 300);\n      }\n      ((VehicleImpl)vehicle).setSpeedModel(speedModel);\n      list.add(vehicle);\n    }\n    return list;\n  }\n}\n```"]