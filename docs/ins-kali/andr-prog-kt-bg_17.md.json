["```kt\n// Declare and initialize a new Intent object called myIntent\nval myIntent = Intent(this, \n         SettingsActivity::class.java)\n\n// Switch to the SettingsActivity\nstartActivity(myIntent)\n```", "```kt\n// Create a String called username \n// and set its value to bob\nval username = \"Bob\"\n\n// Create a new Intent as we have already seen\nval myIntent = Intent(this, \n         SettingsActivity::class.java)\n\n// Add the username String to the Intent\n// using the putExtra function of the Intent class\nmyIntent.putExtra(\"USER_NAME\", username)\n\n// Start the new Activity as we have before\nstartActivity(myIntent)\n```", "```kt\n// Here we need an Intent also\n// But the default constructor will do\n// as we are not switching Activity\nval myIntent = Intent()\n\n// Initialize username with the passed in String \nval username = intent.extras.getString(\"USER_NAME\")\n```", "```kt\nval myIntent = Intent();\n```", "```kt\n<activity android:name=\".SettingsActivity\"></activity>\n```", "```kt\nreturn when (item.itemId) {\n   R.id.action_settings -> true\n   else -> super.onOptionsItemSelected(item)\n}\n```", "```kt\nreturn when (item.itemId) {\n   R.id.action_settings -> {\n         val intent = Intent(this, \n                      SettingsActivity::class.java)\n\n         startActivity(intent)\n         true\n  }\n\n  else -> super.onOptionsItemSelected(item)\n}\n```", "```kt\nimport android.content.Intent\n```", "```kt\n// A SharedPreferences instance for reading data\nval prefs = getSharedPreferences(\n         \"My app\",\n          Context.MODE_PRIVATE)\n\n// A SharedPreferences.Editor instance for writing data\nval editor = prefs.edit()\n```", "```kt\neditor.putString(\"username\", username)\n```", "```kt\neditor.putString(\"username\", username)\neditor.putInt(\"age\", age)\neditor.putBoolean(\"newsletter-subscriber\", subscribed)\n\n// Save all the above data\neditor.apply()\n```", "```kt\nval username  = prefs.getString(\n   \"username\", \"new user\")\n\nval age  = prefs.getInt(\"age\", -1)\n\nval subscribed = prefs.getBoolean(\n    \"newsletter-subscriber\", false)\n```", "```kt\nif (age == -1){\n   // Ask the user for his age\n}\n```", "```kt\nprivate val showDividers: Boolean = true\n```", "```kt\nval prefs = getSharedPreferences(\n               \"Note to self\",\n                Context.MODE_PRIVATE)\n```", "```kt\nimport android.content.SharedPreferences\n```", "```kt\nshowDividers  = prefs.getBoolean(\"dividers\", true)\n\n// Set the switch on or off as appropriate\nswitch1.isChecked = showDividers\n```", "```kt\nswitch1.setOnCheckedChangeListener {\n   buttonView, isChecked ->\n\n   showDividers = isChecked\n}\n```", "```kt\noverride fun onPause() {\n   super.onPause()\n\n   // Save the settings here\n   val prefs = getSharedPreferences(\n               \"Note to self\",\n                Context.MODE_PRIVATE)\n\n   val editor = prefs.edit()\n\n   editor.putBoolean(\"dividers\", showDividers)\n\n   editor.apply()\n}\n```", "```kt\nprivate var adapter: NoteAdapter? = null\nprivate var showDividers: Boolean = false\n\n```", "```kt\noverride fun onResume() {\n   super.onResume()\n\n   val prefs = getSharedPreferences(\n               \"Note to self\",\n                Context.MODE_PRIVATE)\n\n  showDividers = prefs.getBoolean(\n               \"dividers\", true)\n}\n```", "```kt\nrecyclerView!!.addItemDecoration(\n   DividerItemDecoration(this,\n         LinearLayoutManager.VERTICAL))\n```", "```kt\n// Add a neat dividing line between list items\nif (showDividers)\n    recyclerView!!.addItemDecoration(\n          DividerItemDecoration(\n          this, LinearLayoutManager.VERTICAL))\nelse {\n  // check there are some dividers\n  // or the app will crash\n  if (recyclerView!!.itemDecorationCount > 0)\n        recyclerView!!.removeItemDecorationAt(0)\n}\n```", "```kt\n@Throws(someException::class)\nfun somePrecariousFunction() {\n   // Risky code goes here\n}\n```", "```kt\ntry {\n  \u2026\n  somePrecariousFunction()\n  \u2026\n\n} catch (e: Exception) {\n   Log.e(\"Uh Oh!\", \"somePrecariousFunction failure\", e)\n}\n```", "```kt\nfinally{\n   // More action here\n}\n```", "```kt\nprivate val JSON_TITLE = \"title\"\nprivate val JSON_DESCRIPTION = \"description\"\nprivate val JSON_IDEA = \"idea\"\nprivate val JSON_TODO = \"todo\"\nprivate val JSON_IMPORTANT = \"important\"\n```", "```kt\n// Constructor\n// Only used when created from a JSONObject\n@Throws(JSONException::class)\nconstructor(jo: JSONObject) {\n\n  title = jo.getString(JSON_TITLE)\n  description = jo.getString(JSON_DESCRIPTION)\n  idea = jo.getBoolean(JSON_IDEA)\n  todo = jo.getBoolean(JSON_TODO)\n  important = jo.getBoolean(JSON_IMPORTANT)\n}\n\n// Now we must provide an empty default constructor for\n// when we create a Note to pass to the new note dialog\nconstructor() {\n\n}\n```", "```kt\nimport org.json.JSONException;\nimport org.json.JSONObject;\n```", "```kt\n@Throws(JSONException::class)\nfun convertToJSON(): JSONObject {\n\n  val jo = JSONObject()\n\n  jo.put(JSON_TITLE, title)\n  jo.put(JSON_DESCRIPTION, description)\n  jo.put(JSON_IDEA, idea)\n  jo.put(JSON_TODO, todo)\n  jo.put(JSON_IMPORTANT, important)\n\n  return jo\n}\n```", "```kt\nclass JSONSerializer(\n   private val filename: String, \n   private val context: Context) {\n   // All the rest of the code goes here\n\n}\n```", "```kt\nimport android.content.Context\n```", "```kt\n@Throws(IOException::class, JSONException::class)\nfun save(notes: List<Note>) {\n\n   // Make an array in JSON format\n   val jArray = JSONArray()\n\n   // And load it with the notes\n   for (n in notes)\n         jArray.put(n.convertToJSON())\n\n  // Now write it to the private disk space of our app\n  var writer: Writer? = null\n  try {\n    val out = context.openFileOutput(filename,\n                Context.MODE_PRIVATE)\n\n    writer = OutputStreamWriter(out)\n    writer.write(jArray.toString())\n\n  } finally {\n        if (writer != null) {\n\n        writer.close()\n      }\n   }\n}\n```", "```kt\nimport org.json.JSONArray\nimport org.json.JSONException\nimport java.io.IOException\nimport java.io.OutputStream\nimport java.io.OutputStreamWriter\nimport java.io.Writer\nimport java.util.List\n```", "```kt\n@Throws(IOException::class, JSONException::class)\nfun load(): ArrayList<Note> {\n   val noteList = ArrayList<Note>()\n   var reader: BufferedReader? = null\n\n   try {\n\n         val `in` = context.openFileInput(filename)\n         reader = BufferedReader(InputStreamReader(`in`))\n         val jsonString = StringBuilder()\n\n    for (line in reader.readLine()) {\n          jsonString.append(line)\n    }\n\n    val jArray = JSONTokener(jsonString.toString()).\n                 nextValue() as JSONArray\n\n    for (i in 0 until jArray.length()) {\n           noteList.add(Note(jArray.getJSONObject(i)))\n    }\n\n  } catch (e: FileNotFoundException) {\n         // we will ignore this one, since it happens\n        // when we start fresh. You could add a log here.\n\n  } finally {\n   // This will always run            \n            reader!!.close()\n  }\n\n  return noteList\n}\n```", "```kt\nimport org.json.JSONTokener\nimport java.io.BufferedReader\nimport java.io.FileNotFoundException\nimport java.io.InputStream\nimport java.io.InputStreamReader\nimport java.util.ArrayList\n```", "```kt\nprivate var mSerializer: JSONSerializer? = null\nprivate var noteList: ArrayList<Note>? = null\n//private val noteList = ArrayList<Note>()\n```", "```kt\nfab.setOnClickListener { view ->\n   val dialog = DialogNewNote()\n   dialog.show(supportFragmentManager, \"\")\n}\n\nmSerializer = JSONSerializer(\"NoteToSelf.json\",\n applicationContext)\n\ntry {\n noteList = mSerializer!!.load()\n} catch (e: Exception) {\n noteList = ArrayList()\n Log.e(\"Error loading notes: \", \"\", e)\n}\n\nrecyclerView =\n         findViewById<View>(R.id.recyclerView) \n         as RecyclerView\n\nadapter = NoteAdapter(this, this.noteList!!)\nval layoutManager = LinearLayoutManager(\n          applicationContext)\n```", "```kt\nprivate fun saveNotes() {\n  try {\n        mSerializer!!.save(this.noteList!!)\n\n  } catch (e: Exception) {\n        Log.e(\"Error Saving Notes\", \"\", e)\n  }\n}\n```", "```kt\noverride fun onPause() {\n   super.onPause()\n\n   saveNotes()\n}\n```"]