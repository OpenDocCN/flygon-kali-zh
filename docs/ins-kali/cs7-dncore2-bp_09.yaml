- en: Using Docker and ASP.NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 和 ASP.NET Core
- en: 'In this chapter, we will be looking at how Docker works. You may have heard
    about Docker before but have not had the opportunity to play around with it yet.
    In particular, we will be looking at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看 Docker 是如何工作的。你可能以前听说过 Docker，但还没有机会去尝试。特别是，我们将看以下内容：
- en: What Docker is
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 是什么
- en: Images and containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像和容器
- en: How Docker benefits web developers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 如何使 web 开发人员受益
- en: Installing Docker on Windows 10 Pro
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 10 Pro 上安装 Docker
- en: Running Docker and selecting some shared drives
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Docker 并选择一些共享驱动器
- en: Troubleshooting shared drives when Windows Firewall seems to be the issue
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 防火墙似乎是问题时排除共享驱动器的故障
- en: How Visual Studio 2017 integrates with Docker
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017 如何与 Docker 集成
- en: Creating an ASP.NET Core MVC application and running it inside a container
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 ASP.NET Core MVC 应用程序并在容器内运行它
- en: Using Docker Hub with GitHub and setting up automated builds
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker Hub 与 GitHub 并设置自动构建
- en: Docker will open up a whole new world for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 将为你打开一个全新的世界。
- en: What is Docker?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 是什么？
- en: Before we begin to work with Docker, let's have a look at exactly what Docker
    is. If you head on over to [https://www.docker.com](https://www.docker.com) and
    look at the What is Docker? page, you will see that they say that Docker is a
    containerization platform. From a first-look perspective, this does not make much
    sense. Digging a little deeper though, you will see that Docker simplifies the
    application-building process and allows you to ship and run those applications
    in different environments. The different environments may be development, testing,
    user acceptance testing, and production environments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Docker 之前，让我们来看看 Docker 到底是什么。如果你访问 [https://www.docker.com](https://www.docker.com)
    并查看 What is Docker? 页面，你会看到他们说 Docker 是一个容器化平台。从第一眼看来，这并没有太多意义。不过，深入挖掘一下，你会发现
    Docker 简化了应用构建过程，并允许你在不同的环境中运行和部署这些应用。这些不同的环境可能是开发、测试、用户验收测试和生产环境。
- en: 'Docker makes use of images and containers, and if you look at the Docker logo,
    you will see this idea of containers represented in their logo:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使用图像和容器，如果你看一下 Docker 的标志，你会看到他们的标志中代表着容器的概念：
- en: '![](img/489db9e4-fde8-4041-8de7-8d9e548cb856.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/489db9e4-fde8-4041-8de7-8d9e548cb856.png)'
- en: Cargo planners often have to be very careful how they stack the containers on
    a cargo ship. They need to keep the container destinations in mind when planning
    the location of the container on the ship.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 货物规划员经常需要非常小心地堆放货船上的集装箱。他们在规划集装箱在船上的位置时需要考虑集装箱的目的地。
- en: For example, a container bound for the Middle East could not be loaded under
    a container bound for Tokyo, Japan. This would mean that they had to remove the
    top containers just to offload the bottom container and then load the top containers
    back again. The position of the containers has to be planned very carefully to
    optimize the efficiency of the freight logistics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前往中东的集装箱不能被装载在前往日本东京的集装箱下面。这意味着他们必须先移除顶部的集装箱，然后卸载底部的集装箱，然后再重新装载顶部的集装箱。集装箱的位置必须非常小心地规划，以优化货运物流的效率。
- en: Docker is similar in its approach to using containers. So, let's clarify the
    terms **containers** and **images** a bit further.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在使用容器方面类似。因此，让我们进一步澄清 **容器** 和 **图像** 这两个术语。
- en: Images and containers
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像和容器
- en: A Docker image is just a file used to create a Docker container. Think of it
    as a blueprint that Docker needs to create a running container. Images are read-only
    templates, if you like, that are created as a layered filesystem which shares
    common files used to create container instances.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像只是用来创建 Docker 容器的文件。把它想象成 Docker 需要创建运行容器的蓝图。图像是只读模板，可以理解为创建容器实例所使用的共享文件的分层文件系统。
- en: Containers, on the other hand, are instances created from these images. Containers
    are isolated and secure, and can be started, stopped, moved, or deleted.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，容器是从这些图像创建的实例。容器是隔离和安全的，可以启动、停止、移动或删除。
- en: Where does Docker run?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 运行在哪里？
- en: As mentioned earlier, using the analogy of the cargo ship, the cargo ship represents
    your development environment, test environment, or production environment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用货船的类比，货船代表你的开发环境、测试环境或生产环境。
- en: 'Docker can run natively on the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 可以原生运行在以下系统上：
- en: Linux
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: Windows Server 2016
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2016
- en: Windows 10
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10
- en: 'Docker also runs in the cloud on the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 也可以在以下云上运行：
- en: Amazon EC2
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon EC2
- en: Google Compute Engine
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Compute Engine
- en: Azure
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure
- en: Rackspace
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rackspace
- en: From the preceding points, you can see that Docker is extremely flexible and
    that using Docker can provide a huge benefit to developers. Let's have a look
    at how Docker can benefit web developers in particular.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的观点可以看出，Docker 是非常灵活的，使用 Docker 可以为开发人员提供巨大的好处。让我们看看 Docker 如何特别有益于 web 开发人员。
- en: How Docker benefits web developers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 如何使 web 开发人员受益
- en: Docker provides several benefits to web developers. If you work in a mixed environment
    of developers, testers, designers, and so on, you probably want them to work with
    the actual application rather than with a prototype. You could set the application
    up on a server and hook it up to a SQL database and then manage the permissions
    needed for each user accessing the site from the server. Docker, on the other
    hand, allows us to make containers that can run on the individual developer or
    designer machines easily.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 为 web 开发人员提供了几个好处。如果你在开发人员、测试人员、设计师等混合环境中工作，你可能希望他们使用实际的应用程序而不是原型。你可以在服务器上设置应用程序，并将其连接到
    SQL 数据库，然后管理每个用户从服务器访问站点所需的权限。另一方面，Docker 允许我们创建可以轻松在各个开发人员或设计师的机器上运行的容器。
- en: I previously mentioned that Docker containers are isolated and secure. Well,
    for this reason, containers eliminate application conflicts. I'm sure that if
    you have been developing for a while, you are bound to have run into a situation
    where the application is deployed on a production server. If you wanted (or needed)
    to upgrade the framework (for example) of the application, you might run into
    other application conflicts as a result of the upgrade. With Docker, the isolated
    containers can be upgraded without affecting other systems in the environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过，Docker容器是隔离和安全的。因此，容器消除了应用程序冲突。我相信如果你已经开发了一段时间，你一定会遇到这样的情况：应用程序部署在生产服务器上。如果你想（或需要）升级应用程序的框架（例如），你可能会因升级而遇到其他应用程序冲突。有了Docker，隔离的容器可以在不影响环境中的其他系统的情况下进行升级。
- en: How many times have you heard a developer say, *But the application works fine
    on my system* when a deployed application fails? This is because there may be
    differences in the way a developer machine, staging server, or production server
    has been set up. With Docker, you simply move the image from one environment to
    another and get the containers up and running. This means that if your application
    runs fine inside its container on a dev machine, it definitely should run fine
    on a staging or production machine too.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你有多少次听到开发人员说，“但是我的系统上应用程序运行良好”，而部署的应用程序失败了？这是因为开发人员的计算机、暂存服务器或生产服务器的设置可能存在差异。有了Docker，你只需将镜像从一个环境移动到另一个环境，并让容器运行起来。这意味着，如果你的应用程序在开发机器上的容器内运行良好，它肯定也应该在暂存或生产机器上运行良好。
- en: Because of the predictability and stability of Docker containers, you are able
    to ship code much faster than before. This leads to increased productivity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker容器的可预测性和稳定性，你能够比以前更快地发布代码。这将提高生产率。
- en: Installing Docker on Windows 10 Pro
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows 10专业版上安装Docker
- en: For Windows 10 Pro and Windows 10 Enterprise, Docker **Community Edition** (**CE**)
    is available for free.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 10专业版和Windows 10企业版，Docker **Community Edition** (**CE**)是免费提供的。
- en: You can download Docker CE from [https://www.docker.com/docker-windows](https://www.docker.com/docker-windows).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://www.docker.com/docker-windows](https://www.docker.com/docker-windows)下载Docker
    CE。
- en: 'Docker CE requires Hyper-V and, for this reason, you need to be running Windows
    10 Pro or higher. To see what version of Windows you have, open Command Prompt
    as Administrator and type in the following command at the prompt:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'Docker CE需要Hyper-V，因此你需要运行Windows 10专业版或更高版本。要查看你的Windows版本，以管理员身份打开命令提示符，并在提示符处输入以下命令： '
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will see the following information displayed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下信息显示：
- en: '![](img/0f2a90cc-d069-4a19-934b-be1ecf222c06.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f2a90cc-d069-4a19-934b-be1ecf222c06.png)'
- en: 'To check whether Hyper-V is enabled, scroll a little way down:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Hyper-V是否已启用，请向下滚动一小段距离：
- en: '![](img/f87eb65c-b913-4de0-b8cb-3135c7738593.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f87eb65c-b913-4de0-b8cb-3135c7738593.png)'
- en: Earlier versions of Windows don't have Hyper-V, so Docker CE will not run. From
    the Docker documentation ([https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels](https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels)),
    Windows 10 Home is also not supported.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 早期版本的Windows没有Hyper-V，因此Docker CE无法运行。根据Docker文档（[https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels](https://docs.docker.com/v17.09/docker-for-windows/faqs/#questions-about-stable-and-edge-channels)），Windows
    10家庭版也不受支持。
- en: For older Mac and Windows systems, Docker Toolbox can be installed. This uses
    the free Oracle VM VirtualBox. For more information on this, have a look at [https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较旧的Mac和Windows系统，可以安装Docker Toolbox。它使用免费的Oracle VM VirtualBox。有关更多信息，请查看[https://docs.docker.com/toolbox/toolbox_install_windows/](https://docs.docker.com/toolbox/toolbox_install_windows/)。
- en: As mentioned earlier, Docker CE can be downloaded for Windows 10 Pro and Windows
    10 Enterprise machines. You can get the installer from the Docker Store at [https://store.docker.com/editions/community/docker-ce-desktop-windows](https://store.docker.com/editions/community/docker-ce-desktop-windows).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker CE可在Windows 10专业版和Windows 10企业版上下载。你可以从Docker商店下载安装程序：[https://store.docker.com/editions/community/docker-ce-desktop-windows](https://store.docker.com/editions/community/docker-ce-desktop-windows)。
- en: 'At the time of writing, the download page on the store looks as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，商店上的下载页面如下所示：
- en: '![](img/76541aed-10d6-4ee5-bd5d-e5e8492c5e6d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76541aed-10d6-4ee5-bd5d-e5e8492c5e6d.png)'
- en: Click on the Get Docker button to download the Docker installer to your computer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“获取Docker”按钮，将Docker安装程序下载到你的计算机上。
- en: The installer will require you to log out of Windows to complete the installation.
    It will not do this automatically but, before performing the installation, it's
    a good idea to close any other running applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序将要求你注销Windows以完成安装。它不会自动执行此操作，但在执行安装之前，最好关闭其他正在运行的应用程序。
- en: 'The installer is actually one of the friendliest installers I have seen in
    recent years. It is also a breeze to install:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个安装程序是我近年来见过的最友好的安装程序之一。而且安装起来也非常简单：
- en: '![](img/1871e2f6-5cc8-491d-9356-ea91c5ed25a3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1871e2f6-5cc8-491d-9356-ea91c5ed25a3.png)'
- en: 'As a rule, I always run installers as Administrator. The installation process
    for Docker is really straightforward. After it has installed, it will prompt you
    to log out of Windows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我总是以管理员身份运行安装程序。Docker的安装过程非常简单。安装完成后，它会提示您注销Windows：
- en: '![](img/2399db35-e2c3-4f03-bd5f-02d30470f177.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2399db35-e2c3-4f03-bd5f-02d30470f177.png)'
- en: 'After you have logged back into Windows, you may see a message asking you to
    turn on Hyper-V to use Docker containers. Choose the option to turn on Hyper-V.
    At this point, your computer may restart again. After your computer has restarted,
    you will see a notification that Docker is running:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重新登录Windows后，你可能会看到一条消息，要求你打开Hyper-V以使用Docker容器。选择打开Hyper-V选项。此时，你的计算机可能会再次重启。计算机重新启动后，你将看到Docker正在运行的通知：
- en: '![](img/73e316ce-2eaf-4d34-b34a-b2720a80b19e.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73e316ce-2eaf-4d34-b34a-b2720a80b19e.png)'
- en: You have successfully installed Docker. I told you it was really easy.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功安装了Docker。我告诉过你，这真的很容易。
- en: Understanding Docker
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Docker
- en: 'To start using Docker, look for the Docker for Windows desktop application:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Docker，请查找Docker for Windows桌面应用程序：
- en: '![](img/8d2b33ab-b33c-4773-8fd7-dd45d5c50eb3.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2b33ab-b33c-4773-8fd7-dd45d5c50eb3.png)'
- en: 'This will start Docker on your machine. When Docker is running, you will see
    it in your taskbar:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的计算机上启动Docker。当Docker运行时，您将在任务栏中看到它：
- en: '![](img/7c76ec28-90c1-444b-a42c-ff22667c23a8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c76ec28-90c1-444b-a42c-ff22667c23a8.png)'
- en: 'By default, Docker should be started after installation, so just check to see
    whether it''s running from the taskbar first. Let''s have a look at the various
    settings available to us with Docker. Right-click the Docker icon in the taskbar
    and select Settings from the context menu. When the screen opens, click on the
    Shared Drives tab:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，安装后应启动Docker，因此首先从任务栏检查它是否正在运行。让我们看看Docker提供给我们的各种设置。右键单击任务栏中的Docker图标，然后从上下文菜单中选择“设置”。打开屏幕后，单击“共享驱动器”选项卡：
- en: '![](img/2324abcf-d808-405e-9194-b6bdd9f82d0c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2324abcf-d808-405e-9194-b6bdd9f82d0c.png)'
- en: It is important that you select the local drives you want to be available to
    your containers. Checking the shared drives allows support for volumes. Volumes
    are the mechanism by which data that is generated by Docker containers is persisted.
    You can read more about volumes in the official Docker documentation at [https://docs.docker.com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是您选择要提供给容器的本地驱动器。检查共享驱动器可以支持卷。卷是Docker容器生成的数据持久存在的机制。您可以在官方Docker文档中阅读有关卷的更多信息[https://docs.docker.com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/)。
- en: 'I do, however, want to point out the following bullet points from the documentation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我想指出文档中的以下要点：
- en: Volumes can easily be backed up
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷可以很容易地进行备份
- en: Volumes work on Linux and Windows containers
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷在Linux和Windows容器上工作
- en: You can share volumes between multiple containers
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在多个容器之间共享卷
- en: You can use volume drivers to store volumes on remote machines or in the cloud
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用卷驱动程序将卷存储在远程计算机或云中
- en: You are able to encrypt the contents of volumes
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以加密卷的内容
- en: 'Because a volume exists outside of a container, it is the preferred choice
    for persisting data. Docker also needs port `445` to be open to share drives between
    the host machine and the containers. If Docker detects that port `445` is closed,
    you will see the following screen:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因为卷存在于容器之外，所以它是持久保存数据的首选选择。Docker还需要端口`445`打开以在主机机器和容器之间共享驱动器。如果Docker检测到端口`445`关闭，您将看到以下屏幕：
- en: '![](img/9f5007bc-555a-4261-8605-e83c058c1486.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f5007bc-555a-4261-8605-e83c058c1486.png)'
- en: You can click on the link to read the documentation on this error.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击链接阅读有关此错误的文档。
- en: For more information on shared drives, see the Docker documentation at [https://docs.docker.com/docker-for-windows/#shared-drives](https://docs.docker.com/docker-for-windows/#shared-drives).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关共享驱动器的更多信息，请参阅Docker文档[https://docs.docker.com/docker-for-windows/#shared-drives](https://docs.docker.com/docker-for-windows/#shared-drives)。
- en: There are a few recommended ways online to resolve this issue. The first is
    to uninstall and re-install File and Printer Sharing for Microsoft Networks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些在线推荐的方法可以解决此问题。首先是卸载并重新安装“Microsoft网络的文件和打印机共享”。
- en: 'To do this, open the Network and Sharing Center from Windows settings. Then
    click on the vEthernet (DockerNAT) connection:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，请从Windows设置中打开“网络和共享中心”。然后单击“vEthernet（DockerNAT）”连接：
- en: '![](img/bdd2714f-ce9d-4cfe-8d65-3a88929a69b7.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdd2714f-ce9d-4cfe-8d65-3a88929a69b7.png)'
- en: 'On the vEthernet (DocketNAT) Status window, click on the Properties button:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在vEthernet（DocketNAT）状态窗口中，单击“属性”按钮：
- en: '![](img/4a31733f-7913-4bc5-b40e-6875260fedb1.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a31733f-7913-4bc5-b40e-6875260fedb1.png)'
- en: 'Here you will see File and Printer Sharing for Microsoft Networks. Your first
    step is to click on the Uninstall button. This will remove the entry from the
    list. Next you need to click on the Install button:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您将看到“文件和打印机共享”用于Microsoft网络。您的第一步是单击“卸载”按钮。这将从列表中删除条目。接下来，您需要单击“安装”按钮：
- en: '![](img/8c66efd6-a6d0-43c5-acfb-273bef665565.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c66efd6-a6d0-43c5-acfb-273bef665565.png)'
- en: 'In the Select Network Feature Type screen, click on the Service feature and
    click on the Add button:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择网络功能类型”屏幕上，单击“服务功能”，然后单击“添加”按钮：
- en: '![](img/8f424b5b-8afc-40f9-87b8-b6b4df3ed34e.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f424b5b-8afc-40f9-87b8-b6b4df3ed34e.png)'
- en: 'In the Select Network Service screen, select Microsoft as the manufacturer
    and click on the File and Printer Sharing for Microsoft Networks service:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择网络服务”屏幕上，选择Microsoft作为制造商，然后单击“Microsoft网络的文件和打印机共享”服务：
- en: '![](img/32fc82cc-f680-4f1e-9eaf-37cd244b737d.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32fc82cc-f680-4f1e-9eaf-37cd244b737d.png)'
- en: After clicking OK and closing all the screens, stop Docker by right-clicking
    the icon in the taskbar and click on Quit Docker. You can then restart Docker
    by clicking on the Docker for Windows application again.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”并关闭所有屏幕后，通过右键单击任务栏中的图标并单击“退出Docker”来停止Docker。然后，您可以通过再次单击“Windows应用程序”来重新启动Docker。
- en: At this point, you should be able to select the shared drives to use with Docker
    from the settings screen. If you still see the Firewall detected message, the
    chances are that your antivirus is blocking it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您应该能够从设置屏幕中选择要与Docker一起使用的共享驱动器。如果仍然看到防火墙检测到的消息，则很可能是您的防病毒软件正在阻止它。
- en: 'In my case, it was ESET Endpoint Security that was blocking the communication.
    You may be using a different antivirus, so have a look at the particular list
    of applications it has recently blocked. In my case, I started ESET Endpoint Security
    and selected SETUP and then Network:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，是ESET Endpoint Security阻止了通信。您可能使用不同的防病毒软件，因此请查看它最近阻止的特定应用程序列表。在我的情况下，我启动了ESET
    Endpoint Security并选择了SETUP，然后选择了Network：
- en: '![](img/11591cb9-ac3c-4ebd-bf4e-f41c688d1141.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11591cb9-ac3c-4ebd-bf4e-f41c688d1141.png)'
- en: 'Next, I selected the Recently blocked applications or devices list:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我选择了“最近阻止的应用程序或设备”列表：
- en: '![](img/1c3c1f7a-1b1a-464e-bbef-ee4c9158915c.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c3c1f7a-1b1a-464e-bbef-ee4c9158915c.png)'
- en: 'Scrolling through the list, I saw that `10.0.75.2` was blocked by ESET. According
    to the Docker documentation, this is the IP to allow through the firewall:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览列表时，我发现ESET阻止了`10.0.75.2`。根据Docker文档，这是要通过防火墙允许的IP地址：
- en: '"To share the drive, allow connections between the Windows host machine and
    the virtual machine in Windows Firewall or your third-party firewall software.
    You do not need to open port 445 on any other network. By default, allow connections
    to 10.0.75.1 port 445 (the Windows host) from 10.0.75.2 (the virtual machine).
    If the firewall rules appear to be open, consider reinstalling the File and Print
    Sharing service on the virtual network adapter."'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: “要共享驱动器，请允许Windows主机机器和Windows防火墙或第三方防火墙软件之间的连接。您不需要在任何其他网络上打开445端口。默认情况下，允许从10.0.75.2（虚拟机）到10.0.75.1端口445（Windows主机）的连接。如果防火墙规则似乎是开放的，请考虑在虚拟网络适配器上重新安装文件和打印共享服务。”
- en: 'Clicking on the Unblock button displays a confirmation screen:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“解除阻止”按钮会显示一个确认屏幕：
- en: '![](img/d6a1c1ad-11b1-4cb8-a79b-7468da16d302.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6a1c1ad-11b1-4cb8-a79b-7468da16d302.png)'
- en: 'When you have done this, you have unblocked `10.0.75.2`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当您这样做时，您已解除了`10.0.75.2`的阻止：
- en: '![](img/ef684023-d7bd-41c4-b984-5e419f0cd385.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef684023-d7bd-41c4-b984-5e419f0cd385.png)'
- en: To finish, click Done, head on back to the Docker settings, and select the drives
    you want to share.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击“完成”，返回到Docker设置，并选择要共享的驱动器。
- en: 'You should now be able to select the shared drives for Docker to use. If you
    are still not able to share drives, have a look at the following Stack Overflow
    article for additional troubleshooting tips: [https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051](https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够选择要供Docker使用的共享驱动器。如果您仍然无法共享驱动器，请查看以下Stack Overflow文章，获取额外的故障排除提示：[https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051](https://stackoverflow.com/questions/42203488/settings-to-windows-firewall-to-allow-docker-for-windows-to-share-drive/43904051#43904051)。
- en: Next, we will have a look at how Docker integrates into Visual Studio 2017,
    and what you can do to enable Docker support for your ASP.NET Core applications.
    We will also have a look at how to add Docker support (or Dockerize) existing
    ASP.NET Core applications.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看Docker如何集成到Visual Studio 2017中，以及您可以为ASP.NET Core应用程序启用Docker支持的方法。我们还将看看如何为现有的ASP.NET
    Core应用程序添加Docker支持（或Dockerize）。
- en: Docker has a healthy community of developers and it also has a lot of help documentation
    available. Take the time to browse through this and research any issues you may
    come across.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Docker拥有一个庞大的开发者社区，也有大量的帮助文档可用。花些时间浏览这些文档，并研究您可能遇到的任何问题。
- en: Running an ASP.NET Core application from Visual Studio 2017 inside Docker
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio 2017中在Docker内运行ASP.NET Core应用程序
- en: So where does this all leave us? We have had a look at how to set up Docker
    on Windows 10, as well as how to resolve a few issues surrounding this setup.
    Let us now have a look at how to create an ASP.NET Core application and add Docker
    support to the new application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这一切对我们意味着什么呢？我们已经看过如何在Windows 10上设置Docker，以及如何解决围绕这一设置的一些问题。现在让我们看看如何创建一个ASP.NET
    Core应用程序并为新应用程序添加Docker支持。
- en: 'Create a new ASP.NET Core Web Application in Visual Studio 2017 and click OK:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2017中创建一个新的ASP.NET Core Web应用程序，然后单击“确定”：
- en: '![](img/56d75944-f66e-4307-938a-991eb3e24ce1.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56d75944-f66e-4307-938a-991eb3e24ce1.png)'
- en: 'On the next screen, select Web Application (Model-View-Controller) or any type
    you like, while ensuring that ASP.NET Core 2.0 is selected from the drop-down
    list. Then check the Enable Docker Support checkbox. This will enable the OS drop-down
    list. Select Windows here and then click on the OK button:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，选择Web应用程序（模型-视图-控制器）或您喜欢的任何类型，同时确保从下拉列表中选择了ASP.NET Core 2.0。然后勾选“启用Docker支持”复选框。这将启用操作系统下拉列表。在这里选择Windows，然后单击“确定”按钮：
- en: '![](img/3522e171-82c9-4f00-a6b5-db3c4e8b52b8.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3522e171-82c9-4f00-a6b5-db3c4e8b52b8.png)'
- en: 'If you see the following message, you need to switch to Windows containers.
    This is because you have probably kept the default container setting for Docker
    as Linux:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下消息，您需要切换到Windows容器。这是因为您可能已将Docker的默认容器设置为Linux：
- en: '![](img/281112c2-1ca9-4c3e-9784-9e958e82c89c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/281112c2-1ca9-4c3e-9784-9e958e82c89c.png)'
- en: 'If you right-click on the Docker icon in the taskbar, you will see that you
    have an option to enable Windows containers there too. You can switch to Windows
    containers from the Docker icon in the taskbar by clicking on the Switch to Windows
    containers option:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在任务栏中的Docker图标上右键单击，您将看到您有一个选项在那里启用Windows容器。您可以通过单击任务栏中的Docker图标上的“切换到Windows容器”选项切换到Windows容器：
- en: '![](img/a31d6e29-9bcb-4a0f-ad57-b32230726971.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a31d6e29-9bcb-4a0f-ad57-b32230726971.png)'
- en: Switching to Windows containers may take several minutes to complete, depending
    on your line speed and the hardware configuration of your PC.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Windows容器可能需要几分钟的时间才能完成，这取决于您的线路速度和PC的硬件配置。
- en: If, however, you don't click on this option, Visual Studio will ask you to change
    to Windows containers when selecting the OS platform as Windows.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您没有单击此选项，当选择操作系统平台为Windows时，Visual Studio将要求您切换到Windows容器。
- en: There is a good reason that I am choosing Windows containers as the target OS.
    This reason will become clear later on in the chapter when working with Docker
    Hub and automated builds.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择Windows容器作为目标操作系统是有充分理由的。在本章中，当使用Docker Hub和自动构建时，这个理由将变得更加清晰。
- en: 'After your ASP.NET Core application is created, you will see the following
    project setup in Solution Explorer:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完ASP.NET Core应用程序后，您将在解决方案资源管理器中看到以下项目设置：
- en: '![](img/be1d936d-3dcd-422f-87d8-35ea8f1e7b05.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be1d936d-3dcd-422f-87d8-35ea8f1e7b05.png)'
- en: 'The Docker support that is added to Visual Studio comes not only in the form
    of the Dockerfile, but also in the form of the Docker configuration information.
    This information is contained in the global `docker-compose.yml` file at the solution
    level:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到 Visual Studio 的 Docker 支持不仅以 Dockerfile 的形式添加，还以 Docker 配置信息的形式添加。这些信息包含在解决方案级别的全局
    `docker-compose.yml` 文件中：
- en: '![](img/7a4a2b60-616d-4d23-8438-e5c1223d37e6.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a4a2b60-616d-4d23-8438-e5c1223d37e6.png)'
- en: 'Clicking on the Dockerfile in Solution Explorer, you will see that it doesn''t
    look complicated at all. Remember, the Dockerfile is the file that creates your
    image. The image is a read-only template that outlines how to create a Docker
    container. The Dockerfile, therefore, contains the steps needed to generate the
    image and run it. The instructions in the Dockerfile create layers in the image.
    This means that if anything changes in the Dockerfile, only the layers that have
    changed will be rebuilt when the image is rebuilt. The Dockerfile looks as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“解决方案资源管理器”中的 Dockerfile，您会发现它看起来一点也不复杂。请记住，Dockerfile 是创建图像的文件。图像是一个只读模板，概述了如何创建
    Docker 容器。因此，Dockerfile 包含生成图像并运行它所需的步骤。Dockerfile 中的指令在图像中创建层。这意味着如果 Dockerfile
    中有任何更改，只有更改的层在重新构建图像时才会被重建。Dockerfile 如下所示：
- en: '[PRE1]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you have a look at the menu in Visual Studio 2017, you will notice that
    the Run button has been changed to Docker:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您查看 Visual Studio 2017 中的菜单时，您会注意到“运行”按钮已更改为“Docker”：
- en: '![](img/2138e1e5-4f04-49e9-aaca-8536e87d1906.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2138e1e5-4f04-49e9-aaca-8536e87d1906.png)'
- en: 'Clicking on the Docker button to debug your ASP.NET Core application, you will
    notice that there are a few things popping up in the Output window. Of particular
    interest is the IP address at the end. In my case, it reads Launching http://172.24.12.112
    (yours will differ):'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“Docker”按钮调试 ASP.NET Core 应用程序时，您会注意到“输出”窗口中会弹出一些内容。特别感兴趣的是最后的 IP 地址。在我的情况下，它显示
    Launching http://172.24.12.112 (您的将不同)：
- en: '![](img/cb41f852-e3b2-49a5-a426-04afafc9b495.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb41f852-e3b2-49a5-a426-04afafc9b495.png)'
- en: 'When the browser is launched, you will see that the ASP.NET Core application
    is running at the IP address listed previously in the Output window. Your ASP.NET
    Core application is now running inside of a Windows Docker container:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 启动浏览器后，您将看到 ASP.NET Core 应用程序正在以前在“输出”窗口中列出的 IP 地址上运行。您的 ASP.NET Core 应用程序现在正在
    Windows Docker 容器中运行：
- en: '![](img/c725afa8-0fe4-482b-a476-24d8c642e639.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c725afa8-0fe4-482b-a476-24d8c642e639.png)'
- en: This is great and really easy to get started with. But what do you need to do
    to Dockerize an existing ASP.NET Core application? As it turns out, this isn't
    as difficult as you may think.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常好，而且非常容易上手。但是，要将现有的 ASP.NET Core 应用程序 Docker 化，您需要做些什么呢？事实证明，这并不像您想象的那么困难。
- en: Adding Docker support to an existing ASP.NET Core application
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为现有的 ASP.NET Core 应用程序添加 Docker 支持
- en: 'Imagine that you have an ASP.NET Core application without Docker support. To
    add Docker support to this existing application, simply add it from the context
    menu:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个不支持 Docker 的 ASP.NET Core 应用程序。要为此现有应用程序添加 Docker 支持，只需从上下文菜单中添加即可：
- en: '![](img/64a64c14-60a7-4988-b714-d5e1bf29d3eb.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64a64c14-60a7-4988-b714-d5e1bf29d3eb.png)'
- en: 'To add Docker support to an existing ASP.NET Core application, you need to
    do the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要为现有的 ASP.NET Core 应用程序添加 Docker 支持，需要执行以下操作：
- en: Right-click on your project in Solution Explorer
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“解决方案资源管理器”中右键单击项目
- en: Click on the Add menu item
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”菜单项
- en: 'Click on Docker Support in the fly-out menu:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“Docker 支持”菜单中的“Docker 支持”：
- en: '![](img/c19e437f-7ae2-46eb-b76f-e07cc035afb4.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c19e437f-7ae2-46eb-b76f-e07cc035afb4.png)'
- en: 'Visual Studio 2017 now asks you what the target OS is going to be. In our case,
    we are going to target Windows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio 2017 现在会询问您的目标操作系统是什么。在我们的情况下，我们将以 Windows 为目标：
- en: '![](img/3a7ba04b-3d6a-4ca8-bc8e-48a65a3e8bc6.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a7ba04b-3d6a-4ca8-bc8e-48a65a3e8bc6.png)'
- en: 'After clicking on the OK button, Visual Studio 2017 will begin to add the Docker
    support to your project:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮后，Visual Studio 2017 将开始为您的项目添加 Docker 支持：
- en: '![](img/7982e375-fd2a-4f95-9d17-20dd50384d8c.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7982e375-fd2a-4f95-9d17-20dd50384d8c.png)'
- en: It is extremely easy to create ASP.NET Core applications that have Docker support
    baked in, and even easier to add Docker support to existing ASP.NET Core applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有 Docker 支持的 ASP.NET Core 应用程序非常容易，甚至可以更轻松地为现有的 ASP.NET Core 应用程序添加 Docker
    支持。
- en: Lastly, if you experience any issues, such as file access issues, ensure that
    your antivirus software has excluded your Dockerfile from scanning. Also, make
    sure that you run Visual Studio as Administrator.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果遇到任何问题，如文件访问问题，请确保您的防病毒软件已将 Dockerfile 排除在扫描范围之外。还要确保以管理员身份运行 Visual Studio。
- en: Using Docker Hub with GitHub
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 的 Docker Hub
- en: The following section will illustrate how to set Docker Hub up to do automated
    builds from your project in a GitHub repository.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将说明如何设置 Docker Hub 以从 GitHub 存储库中的项目进行自动构建。
- en: For this example, I will not be going through how to check your code into GitHub.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我不会介绍如何将代码检入 GitHub。
- en: 'Using the DockerApp project created in the previous sections, check that into
    a new GitHub repository. Once you have checked in your code, swing on over to
    Docker Hub at [https://hub.docker.com/](https://hub.docker.com/) and log in, or
    create an account if you haven''t got one already:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前几节创建的 DockerApp 项目，将其检入新的 GitHub 存储库。检入代码后，转到 Docker Hub [https://hub.docker.com/](https://hub.docker.com/)
    并登录，如果还没有帐户，可以创建一个：
- en: '![](img/6c06ea26-3203-4497-a361-7af6ea985b2a.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c06ea26-3203-4497-a361-7af6ea985b2a.png)'
- en: The sign-up process is really quick and easy. All you need to do is confirm
    your email address and you're in. After confirming your email address, you will
    be prompted to log in again. This will take you to your Docker Hub dashboard.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册过程非常快速简单。您只需确认您的电子邮件地址，然后就可以使用了。确认电子邮件地址后，您将被提示再次登录。这将带您到 Docker Hub 仪表板。
- en: 'On this page, you have several options available to you. You can create repositories and
    organizations, and explore repositories:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上，您有几个选项可用。您可以创建存储库和组织，并浏览存储库：
- en: '![](img/81522c86-c32f-4321-951b-c8c5c58bedc4.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81522c86-c32f-4321-951b-c8c5c58bedc4.png)'
- en: 'To start working with GitHub, we need to link Docker Hub with GitHub first.
    Click on the username you selected in the top right of the page. Then click on
    the Settings menu option:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始使用GitHub，我们首先需要将Docker Hub与GitHub链接起来。点击页面右上角选择的用户名，然后点击“设置”菜单选项：
- en: '![](img/0aaf31c0-c55e-4573-a415-b34df6b71483.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0aaf31c0-c55e-4573-a415-b34df6b71483.png)'
- en: 'Under Settings, look for the Linked Accounts & Services tab and click on that.
    You will now need to click on the Link Github option to continue:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置下，找到“链接的帐户和服务”选项卡，然后点击它。现在您需要点击“链接Github”选项继续：
- en: '![](img/cc496846-3255-4330-a6a8-289300f640f7.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc496846-3255-4330-a6a8-289300f640f7.png)'
- en: 'For simplicity''s sake (and because it is recommended), I just went ahead and
    clicked on the Public and Private access setting:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简单起见（也是建议的），我直接点击了“公共和私有访问”设置：
- en: '![](img/c3af8ca7-b625-48d4-a99b-fd83c3c07090.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3af8ca7-b625-48d4-a99b-fd83c3c07090.png)'
- en: 'Docker Hub now redirects you to the authorization page to allow Docker Hub
    to access your GitHub repository. Here you need to sign in with your GitHub credentials:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Hub现在会重定向您到授权页面，以允许Docker Hub访问您的GitHub存储库。在这里，您需要使用您的GitHub凭据登录：
- en: '![](img/a9013b54-e767-4678-bf54-19f892e6a7af.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9013b54-e767-4678-bf54-19f892e6a7af.png)'
- en: Note that if you have two-factor authentication enabled, you will need to type
    in the authentication code generated by your smartphone app. So keep your mobile
    close by.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您启用了双因素身份验证，您需要输入智能手机应用生成的身份验证代码。所以请保持手机附近。
- en: 'To authorize Docker Hub, click on the Authorize docker button:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要授权Docker Hub，点击“授权docker”按钮：
- en: '![](img/7506ade2-0cfe-4af6-98dc-c020f17297dd.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7506ade2-0cfe-4af6-98dc-c020f17297dd.png)'
- en: 'You are now taken back to the Linked Accounts & Services page, where you will
    see the linked accounts on your Docker Hub profile:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将被带回“链接的帐户和服务”页面，在那里您将看到您Docker Hub配置文件上的已链接帐户：
- en: '![](img/d6b0ef2f-fdf3-4304-ac9e-76de9356398d.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d6b0ef2f-fdf3-4304-ac9e-76de9356398d.png)'
- en: 'Next, we need to go and create an automated build. From the menu, click on
    the Create menu item and select Create Automated Build from the options below
    that:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要去创建一个自动构建。从菜单中，点击“创建”菜单项，然后从下面的选项中选择“创建自动构建”：
- en: '![](img/14550eb3-11e9-430c-88f2-a320a4df177c.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14550eb3-11e9-430c-88f2-a320a4df177c.png)'
- en: 'You then want to click on the Create Auto-build Github option:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要点击“创建自动构建Github”选项：
- en: '![](img/56835390-96cb-4712-a22f-10f916fa8208.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56835390-96cb-4712-a22f-10f916fa8208.png)'
- en: 'This will display a list of all the available repositories in your GitHub account.
    I previously checked in the DockerApp project to my GitHub account, so this is
    what we will be selecting:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示您GitHub帐户中所有可用存储库的列表。我之前将DockerApp项目检入到了我的GitHub帐户，所以这就是我们要选择的：
- en: '![](img/706d8496-54a0-4c3c-9336-9104c9038efa.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/706d8496-54a0-4c3c-9336-9104c9038efa.png)'
- en: 'You can now go and define additional information here as needed, or you can
    keep it as default. It is up to you. When you are done, click on the Create button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以根据需要在这里定义其他信息，或者保持默认设置。由您决定。完成后，点击“创建”按钮：
- en: '![](img/b9630b8e-c499-4e80-bb68-8d8ba859da69.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9630b8e-c499-4e80-bb68-8d8ba859da69.png)'
- en: 'Our automated build is now created and ready. So how, precisely, does this
    automated build work? Well, every time you commit your code to your GitHub repository,
    Docker Hub will build your project:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自动构建现在已经创建并准备就绪。那么，这个自动构建是如何工作的呢？每当您将代码提交到GitHub存储库时，Docker Hub都会构建您的项目：
- en: '![](img/de472987-7d85-4f15-80bb-5ff4abbb771a.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de472987-7d85-4f15-80bb-5ff4abbb771a.png)'
- en: 'To test this, open up your ASP.NET Core application in Visual Studio 2017 and
    make some changes. Then commit those changes to your GitHub repository. Then click
    on the Build Details link in Docker Hub. You will see that the build has been
    queued and will complete in a few minutes. To view the build results, just refresh
    this page after a little while:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试这一点，打开Visual Studio 2017中的ASP.NET Core应用程序并进行一些更改。然后将这些更改提交到您的GitHub存储库。然后点击Docker
    Hub中的“构建详情”链接。您会看到构建已排队，并将在几分钟内完成。要查看构建结果，稍等一会后刷新此页面：
- en: '![](img/a1f57fb4-fba3-4485-9233-fbba04336f93.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1f57fb4-fba3-4485-9233-fbba04336f93.png)'
- en: After refreshing the page, you will see that an error has occurred. Docker Hub
    will display the build results for you and you can click on the build result to
    view the details of the failure.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面后，您会看到发生了错误。Docker Hub将为您显示构建结果，您可以点击构建结果查看失败的详细信息。
- en: I am going to illustrate a few errors that are commonly received during an automated
    build. I will also show the way I have found to resolve these. I'm not sure whether
    there will have been changes to the way these work in the meantime but, at the
    time of writing, these issues presented themselves.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我将举例说明一些常见的自动构建错误。我还将展示我发现的解决方法。我不确定这些方法在此期间是否有变化，但在撰写本文时，这些问题确实存在。
- en: 'When we look at the cause of the failure, we see that Docker Hub can''t find
    the Dockerfile in the root of the project. Why exactly this is an issue, I don''t
    know. I would have expected Docker Hub to recursively walk the tree structure
    of your project to find the Dockerfile location. Nevertheless, this is quite easy
    to fix:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看失败的原因时，我们发现Docker Hub找不到项目根目录中的Dockerfile。为什么会出现这个问题，我不知道。我本来期望Docker Hub会递归地遍历项目的树形结构，以找到Dockerfile的位置。不过，这很容易解决：
- en: '![](img/f514bdf0-50c6-431e-bb8e-add6e2314a9d.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f514bdf0-50c6-431e-bb8e-add6e2314a9d.png)'
- en: 'I simply made a copy of my Dockerfile and copied it to the root of the solution.
    I then checked in my code again to GitHub:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是复制了我的Dockerfile并将其复制到解决方案的根目录。然后我再次将我的代码检入GitHub：
- en: '![](img/5bbe7665-4b8f-4a9c-89ca-d875ceb1d2c2.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bbe7665-4b8f-4a9c-89ca-d875ceb1d2c2.png)'
- en: 'If you refresh your automated build page, you will see that it is building
    the project again:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果刷新您的自动构建页面，您会看到它正在重新构建项目：
- en: '![](img/b81716cc-8f41-4b77-a42c-6e7284824fbb.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b81716cc-8f41-4b77-a42c-6e7284824fbb.png)'
- en: 'This time around, another error presented itself. Clicking on the error entry
    once again takes you to the error details:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一次，又出现了另一个错误。再次点击错误条目会带您到错误详细信息：
- en: '![](img/672b1c39-3f47-4b4b-b827-70b96cb865b8.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/672b1c39-3f47-4b4b-b827-70b96cb865b8.png)'
- en: 'This time, it shows that the cause of the error is the fact that we have targeted
    Windows OS in our project instead of Linux:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，它显示错误的原因是我们的项目针对的是Windows OS而不是Linux：
- en: '![](img/37330ff9-8d5d-4de0-99e9-5e814590b629.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37330ff9-8d5d-4de0-99e9-5e814590b629.png)'
- en: 'The error is listed as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 错误列如下：
- en: '[PRE2]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To fix this issue, we need to modify the Dockerfile. The Dockerfile for Windows
    will look as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解决此问题，我们需要修改Dockerfile。 Windows的Dockerfile如下所示：
- en: '[PRE3]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Modify it to use `aspnetcore:2.0` instead of `aspnetcore:2.0-nanoserver`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其修改为使用`aspnetcore:2.0`而不是`aspnetcore:2.0-nanoserver`：
- en: '[PRE4]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once again, commit your code to GitHub to initiate the automated build:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次将代码提交到GitHub以启动自动构建：
- en: '![](img/a80b5125-a920-4c7f-abdf-11a1d2747594.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a80b5125-a920-4c7f-abdf-11a1d2747594.png)'
- en: This time around, you will see that the build succeeds.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，您将看到构建成功。
- en: For more information on which OS to target with .NET containers, see the following
    Microsoft document: [https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有关.NET容器要针对哪个操作系统的更多信息，请参阅以下Microsoft文档：[https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/net-core-net-framework-containers/net-container-os-targets)。
- en: 'We now have a successful automated build of our GitHub project. Swing back
    to the Repo Info tab and make a note of the Docker pull command:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在成功自动构建了GitHub项目。切换回Repo Info选项卡并记下Docker pull命令：
- en: '![](img/0e7cdf2a-8051-4316-8679-32126084070f.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e7cdf2a-8051-4316-8679-32126084070f.png)'
- en: The Docker repository for your image is at `dirkstrauss/dockerapp` and the Docker
    pull command is `docker pull dirkstrauss/dockerapp`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您的图像的Docker存储库位于`dirkstrauss/dockerapp`，Docker pull命令为`docker pull dirkstrauss/dockerapp`。
- en: 'Run Windows Command Prompt as Administrator, enter the Docker pull command,
    and press the *Enter* key:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份运行Windows命令提示符，输入Docker pull命令，然后按*Enter*键：
- en: '![](img/13991978-bc1f-4220-a962-37207f72dde6.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13991978-bc1f-4220-a962-37207f72dde6.png)'
- en: You will see that you will start to pull the image down to your local computer.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您将开始将图像下载到本地计算机。
- en: 'If, when pulling the Docker image, you receive the error message Error response
    from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled
    while waiting for connection (Client.Timeout exceeded while awaiting headers),
    simply restart Docker by right-clicking the Docker icon in the taskbar, clicking
    on Settings, and then clicking on Reset, and then Restart Docker. If you receive
    an error along the lines of Image operating system "linux" cannot be used on this
    platform, you need to switch back to a Linux container. See the following URL
    for more information: [https://github.com/docker/kitematic/issues/2828](https://github.com/docker/kitematic/issues/2828).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '如果在拉取Docker镜像时收到错误消息Error response from daemon: Get https://registry-1.docker.io/v2/:
    net/http: request canceled while waiting for connection (Client.Timeout exceeded
    while awaiting headers)，只需通过右键单击任务栏中的Docker图标，单击设置，然后单击重置，然后重新启动Docker。如果收到类似于Image
    operating system "linux" cannot be used on this platform的错误，您需要切换回Linux容器。有关更多信息，请参阅以下URL：[https://github.com/docker/kitematic/issues/2828](https://github.com/docker/kitematic/issues/2828)。'
- en: 'We now need to run the container by entering `docker run -d -p 5000:80` `[image-repository]`,
    which binds the container to port `5000`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要通过输入`docker run -d -p 5000:80` `[image-repository]`来运行容器，这将将容器绑定到端口`5000`：
- en: '![](img/c2f1b0ab-af0e-466c-97bc-c61679e07b8a.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2f1b0ab-af0e-466c-97bc-c61679e07b8a.png)'
- en: 'If you want to see whether the container has started, run the following command:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要查看容器是否已启动，请运行以下命令：
- en: '[PRE5]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can now see the container ID, as well as other information about the running
    container:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以看到容器ID，以及有关正在运行的容器的其他信息：
- en: '![](img/396f9412-d90d-4a78-ab7f-bb9f806582eb.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/396f9412-d90d-4a78-ab7f-bb9f806582eb.png)'
- en: 'What we now want to do is run the ASP.NET Core application we checked in to
    GitHub in the browser. To do this, we need to find the IP address. On Windows
    10, we need to look for the IP address of the DockerNAT, and for this we need
    to run the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在要做的是在浏览器中运行我们在GitHub中检查的ASP.NET Core应用程序。为此，我们需要找到IP地址。在Windows 10上，我们需要查找DockerNAT的IP地址，为此我们需要运行以下命令：
- en: '[PRE6]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You will see that the IP address defined is `10.0.75.1` and this is the IP
    address that our container will be running at:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到定义的IP地址是`10.0.75.1`，这是我们的容器将运行的IP地址：
- en: '![](img/7063e9b5-7dbd-4cfd-bbc0-62a279085475.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7063e9b5-7dbd-4cfd-bbc0-62a279085475.png)'
- en: 'Open up your browser and enter the IP address and port number as `10.0.75.1:5000`
    and hit *Enter*. Your ASP.NET Core application will pop into your browser window
    in all its glory:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，输入IP地址和端口号`10.0.75.1:5000`，然后点击*Enter*。您的ASP.NET Core应用程序将在浏览器窗口中以其全部荣耀出现：
- en: '![](img/5c595518-18bc-49e0-a905-832389e4a2ca.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c595518-18bc-49e0-a905-832389e4a2ca.png)'
- en: Setting up GitHub with Docker Hub to perform automated builds may seem like
    a bit of a hassle at first, but the benefits for dev teams are numerous. It allows
    you to always be working with the latest build of your project.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Hub设置GitHub以执行自动构建可能一开始看起来有点麻烦，但对开发团队来说好处多多。它允许您始终使用项目的最新构建。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a look at installing Docker on your Windows 10 Pro machine.
    We also had a look at what Docker is and the benefits to developers. We then took
    a look at troubleshooting the setup of Docker on your local machine when the firewall
    seems to be the blocking issue. Then, we took Docker and created an ASP.NET Core
    MVC application that had Docker support added from the start. We also looked at
    how to add Docker support to existing applications. Finally, we set up Docker
    to integrate with GitHub and perform automated builds. We also had a look at how
    to pull the container from Docker Hub and run it in a container on your local
    machine.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何在Windows 10 Pro机器上安装Docker。我们还了解了Docker是什么，以及对开发人员的好处。然后，我们看了一下当防火墙似乎是阻碍问题时，如何解决在本地机器上安装Docker的设置。然后，我们使用Docker创建了一个从头开始就具有Docker支持的ASP.NET
    Core MVC应用程序。我们还看了如何将Docker支持添加到现有应用程序中。最后，我们设置了Docker与GitHub集成并执行自动构建。我们还看了如何从Docker
    Hub拉取容器并在本地机器上运行它。
- en: Docker containers and Docker Hub are tools that developers can use to make their
    work much easier. The power of collaborating with such popular platforms such
    as GitHub and Docker leads to benefits that will increase productivity and profitability.
    Docker takes away all those compatibility headaches of deploying your application
    across several machines.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器和Docker Hub是开发人员可以使用的工具，可以使他们的工作更加轻松。与GitHub和Docker等流行平台合作的力量将带来增加生产力和盈利能力的好处。Docker消除了在多台机器上部署应用程序时的所有兼容性问题。
- en: There is still a lot to learn regarding Docker, much more than a single chapter
    can illustrate. Go forth and explore the power of Docker.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Docker还有很多要学习的，远远超过一个章节可以说明的。继续探索Docker的力量。
