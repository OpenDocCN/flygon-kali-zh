["```\n#escape=` FROM mcr.microsoft.com/windows/servercore:ltsc2019 as installer SHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop';\"] ARG GOGS_VERSION=\"0.11.86\" RUN Write-Host \"Downloading: $($env:GOGS_VERSION)\"; `\n Invoke-WebRequest -Uri \"https://cdn.gogs.io/$($env:GOGS_VERSION)...zip\" -OutFile 'gogs.zip'; RUN  Expand-Archive gogs.zip -DestinationPath C:\\;\n```", "```\nFROM sixeyed/chocolatey:windowsservercore-ltsc2019 ARG GOGS_VERSION=\"0.11.86\" ARG GOGS_PATH=\"C:\\gogs\"\n\nENV GOGS_VERSION=${GOGS_VERSION} `GOGS_PATH=${GOGS_PATH} EXPOSE 3000 VOLUME C:\\data C:\\logs C:\\repositories CMD [\"gogs\", \"web\"]\n```", "```\nRUN choco install -y git\n```", "```\nWORKDIR ${GOGS_PATH} COPY app.ini ./custom/conf/app.ini COPY --from=installer ${GOGS_PATH} .\n```", "```\n> mkdir C:\\gogs\\data; mkdir C:\\gogs\\repos\n\n> docker container run -d -p 3000:3000 `\n    --name gogs `\n    -v C:\\gogs\\data:C:\\data `\n    -v C:\\gogs\\repos:C:\\gogs\\repositories `\n    dockeronwindows/ch10-gogs:2e\n```", "```\n#ch10 \n127.0.0.1  gogs\n```", "```\n> git remote add gogs http://gogs:3000/docker-on-windows.git\n\n> git push gogs second-edition\nEnumerating objects: 2736, done.\nCounting objects: 100% (2736/2736), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (2058/2058), done.\nWriting objects: 100% (2736/2736), 5.22 MiB | 5.42 MiB/s, done.\nTotal 2736 (delta 808), reused 2089 (delta 487)\nremote: Resolving deltas: 100% (808/808), done.\nTo http://gogs:3000/elton/docker-on-windows.git\n * [new branch]      second-edition -> second-edition\n```", "```\nWORKDIR C:\\jenkins  RUN Write-Host \"Downloading Jenkins version: $env:JENKINS_VERSION\"; `\n Invoke-WebRequest  \"http://.../jenkins.war.sha256\" -OutFile 'jenkins.war.sha256'; `\n   Invoke-WebRequest \"http://../jenkins.war\" -OutFile 'jenkins.war' RUN $env:JENKINS_SHA256=$(Get-Content -Raw jenkins.war.sha256).Split(' ')[0]; `\n    if ((Get-FileHash jenkins.war -Algorithm sha256).Hash.ToLower() -ne $env:JENKINS_SHA256) {exit 1}\n```", "```\nFROM openjdk:8-windowsservercore-1809 ARG JENKINS_VERSION=\"2.150.3\" ENV JENKINS_VERSION=${JENKINS_VERSION} ` JENKINS_HOME=\"C:\\data\" VOLUME ${JENKINS_HOME} EXPOSE 8080 50000 WORKDIR C:\\jenkins ENTRYPOINT java -jar C:\\jenkins\\jenkins.war COPY --from=installer C:\\jenkins .\n```", "```\n# escape=` FROM dockeronwindows/ch10-jenkins-base:2e  WORKDIR C:\\git COPY --from=sixeyed/git:2.17.1-windowsservercore-ltsc2019 C:\\git . WORKDIR C:\\docker COPY --from=sixeyed/docker-cli:18.09.0-windowsservercore-ltsc2019 [\"C:\\\\Program Files\\\\Docker\", \".\"]\n```", "```\nRUN $env:PATH = 'C:\\docker;' + 'C:\\git\\cmd;C:\\git\\mingw64\\bin;C:\\git\\usr\\bin;' + $env:PATH; `   [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine)\n```", "```\nmkdir C:\\jenkins\n\ndocker run -d -p 8080:8080 `\n -v C:\\jenkins:C:\\data `\n --name jenkins `\n dockeronwindows/ch10-jenkins:2e\n```", "```\n> docker container logs jenkins\n...\n*************************************************************\nJenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\n6467e40d9c9b4d21916c9bdb2b05bba3\n\nThis may also be found at: C:\\data\\secrets\\initialAdminPassword\n*************************************************************\n```", "```\n> docker container stop jenkins\njenkins\n\n> docker container commit jenkins dockeronwindows/ch10-jenkins:2e-final\nsha256:96dd3caa601c3040927459bd56b46f8811f7c68e5830a1d76c28660fa726960d\n```", "```\ncd .\\ch10\\ch10-nerd-dinner\n\ndocker image build -t dockeronwindows/ch10-nerd-dinner-db:2e `\n                   -f .\\docker\\nerd-dinner-db\\Dockerfile .\ndocker image build -t dockeronwindows/ch10-nerd-dinner-index-handler:2e `\n                   -f .\\docker\\nerd-dinner-index-handler\\Dockerfile .\ndocker image build -t dockeronwindows/ch10-nerd-dinner-save-handler:2e `\n                   -f .\\docker\\nerd-dinner-save-handler\\Dockerfile .\n...\n```", "```\ndocker container run -d `\n  --label ci ` --name nerd-dinner-db `\n dockeronwindows/ch10-nerd-dinner-db:2e; docker container run -d `\n  --label ci `\n  -l \"traefik.frontend.rule=Host:nerd-dinner-test;PathPrefix:/\"  `\n  -l \"traefik.frontend.priority=1\"  `\n  -e \"HomePage:Enabled=false\"  `\n  -e \"DinnerApi:Enabled=false\"  `\n dockeronwindows/ch10-nerd-dinner-web:2e; ... \n```", "```\nInvoke-WebRequest  -UseBasicParsing http://nerd-dinner-test\n```", "```\nFeature: Nerd Dinner Homepage\n    As a Nerd Dinner user\n    I want to see a modern responsive homepage\n    So that I'm encouraged to engage with the app\n\nScenario: Visit homepage\n    Given I navigate to the app at \"http://nerd-dinner-test\"\n    When I see the homepage \n    Then the heading should contain \"Nerd Dinner 2.0!\"\n```", "```\nFROM sixeyed/nunit:3.9.0-windowsservercore-ltsc2019 WORKDIR /e2e-tests CMD nunit3-console NerdDinner.EndToEndTests.dll COPY --from=builder C:\\e2e-tests .\n```", "```\ncd .\\ch10\\ch10-nerd-dinner docker image build ` -t dockeronwindows/ch10-nerd-dinner-e2e-tests:2e ` -f .\\docker\\nerd-dinner-e2e-tests\\Dockerfile . $e2eId  = docker container run -d dockeronwindows/ch10-nerd-dinner-e2e-tests:2e\n```", "```\ndocker container cp \"$($e2eId):C:\\e2e-tests\\TestResult.xml\" .\n```", "```\n[ch10-nerd-dinner] $ powershell.exe ...\n30bc931ca3941b3357e3b991ccbb4eaf71af03d6c83d95ca6ca06faeb8e46a33\n*** E2E test results:\ntype          : Assembly\nid            : 0-1002\nname          : NerdDinner.EndToEndTests.dll\nfullname      : NerdDinner.EndToEndTests.dll\nrunstate      : Runnable\ntestcasecount : 1\nresult        : Passed\nstart-time    : 2019-02-19 20:48:09Z\nend-time      : 2019-02-19 20:48:10Z\nduration      : 1.305796\ntotal         : 1\npassed        : 1\nfailed        : 0\nwarnings      : 0\ninconclusive  : 0\nskipped       : 0\nasserts       : 2\n\n*** Overall: Passed\n```", "```\ndocker rm -f $(docker container ls --filter \"label=ci\" -q)\n```", "```\n$images = 'ch10-nerd-dinner-db:2e', 'ch10-nerd-dinner-index-handler:2e',  'ch10-nerd-dinner-save-handler:2e', ...  foreach ($image  in  $images) {\n   $sourceTag  =  \"dockeronwindows/$image\"\n   $targetTag  =  \"registry:5000/dockeronwindows/$image-$($env:BUILD_TAG)\"\n\n  docker image tag $sourceTag  $targetTag\n  docker image push $targetTag }\n```", "```\n> Invoke-RestMethod http://registry:5000/v2/dockeronwindows/ch10-nerd-dinner-index-handler/tags/list |\n>> Select tags\n\ntags\n----\n{2e-jenkins-docker-on-windows-ch10-nerd-dinner-20, 2e-jenkins-docker-on-windows-ch10-nerd-dinner-21,2e-jenkins-docker-on-windows-ch10-nerd-dinner-22}\n```", "```\ndocker login --username $env:DOCKER_HUB_USER --password \"$env:DOCKER_HUB_PASSWORD\"\n```", "```\n$images  =  'ch10-nerd-dinner-db:2e',  'ch10-nerd-dinner-index-handler:2e',  'ch10-nerd-dinner-save-handler:2e',  ...  foreach ($image  in  $images) { \n $sourceTag  =  \"registry:5000/dockeronwindows/$image...$($env:VERSION_NUMBER)\"\n  $targetTag  =  \"dockeronwindows/$image-$($env:VERSION_NUMBER)\"\n\n docker image pull $sourceTag docker image tag $sourceTag  $targetTag\n docker image push $targetTag }\n```", "```\ncd .\\ch10\\ch10-nerd-dinner\\compose\n\ndocker-compose `\n  -f .\\docker-compose.yml `\n  -f .\\docker-compose.hybrid-swarm.yml `\n  -f .\\docker-compose.latest.yml `\n  config > docker-stack.yml\n```", "```\n services: nerd-dinner-db:\n     image: dockeronwindows/ch10-nerd-dinner-db:2e-${VERSION_NUMBER}\n\n   nerd-dinner-save-handler:\n     image: dockeronwindows/ch10-nerd-dinner-save-handler:2e-${VERSION_NUMBER} ...\n```", "```\n$config = '--host', 'tcp://dow2e-swarm.westeurope.cloudapp.azure.com:2376', '--tlsverify', `\n '--tlscacert', $env:DOCKER_CA,'--tlscert', $env:DOCKER_CERT, '--tlskey', $env:DOCKER_KEY\n\n& docker $config `\n  stack deploy -c docker-stack.yml nerd-dinner\n```"]