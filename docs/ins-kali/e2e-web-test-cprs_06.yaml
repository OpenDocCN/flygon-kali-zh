- en: '*Chapter 5*: Debugging Cypress Tests'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：调试Cypress测试'
- en: Debugging is the ability to identify and remove bugs from software applications.
    Having knowledge of debugging in Cypress and learning how to interpret Cypress'
    debugging output is critical to working with the Cypress framework. Cypress prides
    itself on its ability to give immediate feedback about whether tests have passed
    or failed. For Cypress to achieve an instant feedback mechanism, it has to be
    effective in the way the debug messages are structured in order to provide the
    user ease of interpretation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是识别和消除软件应用程序中的错误的能力。了解Cypress中的调试并学习如何解释Cypress的调试输出对于使用Cypress框架至关重要。Cypress以其能够立即提供关于测试是否通过或失败的反馈而自豪。为了让Cypress实现即时反馈机制，它必须在调试消息的结构上有效，以便为用户提供解释的便利性。
- en: To be able to excel in this chapter, you need to have read the previous chapters
    as they will help you gain knowledge of how tests run, how Cypress works, and
    the different ways in which we can run Cypress tests. In this chapter, we will
    focus on debugging Cypress tests while running them in headed mode through a test
    runner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章取得成功，您需要阅读前几章，因为它们将帮助您了解测试的运行方式，Cypress的工作原理以及我们可以运行Cypress测试的不同方式。在本章中，我们将专注于在测试运行器中运行Cypress测试时调试Cypress测试。
- en: 'While this chapter will explore debugging Cypress using the test runner, Cypress
    comes bundled with other debugging tools that we might not necessarily cover in
    this chapter, since they have either been covered in the previous chapters or
    are outside the scope of this book. In this chapter, we will learn how Cypress
    debugging works in the test runner. To do this, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章将探讨使用测试运行器调试Cypress，但Cypress捆绑了其他调试工具，我们可能不会在本章中涵盖，因为它们要么已经在前几章中涵盖过，要么超出了本书的范围。在本章中，我们将学习Cypress调试在测试运行器中的工作原理。为此，我们将涵盖以下主题：
- en: Understanding page events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解页面事件
- en: Understanding errors on a test runner
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解测试运行器上的错误
- en: Understanding time travel on executed tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解执行测试的时间旅行
- en: Understanding test snapshots
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解测试快照
- en: Understanding the console debug output
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解控制台调试输出
- en: Special debug commands
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊调试命令
- en: Once you've worked through each of these topics, you will be ready to start
    working on the second part of this book, which involves writing Cypress tests
    using a **test-driven development** (**TDD**) approach.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了这些主题中的每一个，您就准备好开始本书的第二部分，其中涉及使用**测试驱动开发**（**TDD**）方法编写Cypress测试。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)找到。
- en: The source code for this chapter can be found in the `chapter-05` directory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-05`目录中找到。
- en: Understanding page events
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解页面事件
- en: Cypress logs every main event that takes place when the tests are running. It
    can detect when a URL is changing, when a button is clicked, or even when an assertion
    is being made. Page events capture the important events that the DOM goes through
    when a test is running.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress记录测试运行时发生的每个主要事件。它可以检测到URL的更改，按钮的点击，甚至断言的执行。页面事件捕获了测试运行时DOM经历的重要事件。
- en: 'To demonstrate how page events work, we will use our Todo application, as we
    did in the previous chapter. Following the `chapter-05` directory in our GitHub
    repository, we will create our test file in the Cypress integration subdirectory
    and name it `debugging.spec.js`. We will then create our test in the newly created
    spec file, which will navigate to the Todo application, add a todo item, and check
    for the page events that pop up in our Cypress test runner. The following code
    block will handle adding the todo item to our application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示页面事件的工作原理，我们将使用我们的待办事项应用程序，就像在上一章中一样。在我们的GitHub存储库中的`chapter-05`目录中，我们将在Cypress集成子目录中创建我们的测试文件，并将其命名为`debugging.spec.js`。然后，我们将在新创建的规范文件中创建我们的测试，该测试将导航到待办事项应用程序，添加一个待办事项，并检查在我们的Cypress测试运行器中弹出的页面事件。以下代码块将处理将待办事项添加到我们的应用程序中：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this test, we are adding a todo item and checking that the item we''ve added
    can be viewed from our list of todo items. The following screenshot shows an XHR
    page event:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，我们正在添加一个待办事项，并检查我们添加的项目是否可以从待办事项列表中查看。以下屏幕截图显示了一个XHR页面事件：
- en: '![Figure 5.1 – XHR page event'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 - XHR页面事件'
- en: '](image/Figure_5.1_B15616.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.1_B15616.jpg)'
- en: Figure 5.1 – XHR page event
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 - XHR页面事件
- en: The preceding screenshot shows part of the command log for the preceding test.
    The highlighted section, named `xhr`, is the page event for loading a new page
    in Cypress. The page event is automatically detected by the Cypress mechanism
    and is automatically logged – not as a command that needs to be executed, but
    as an event that has triggered a change in the application's state.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了前一个测试的命令日志的一部分。名为`xhr`的突出显示部分是在Cypress中加载新页面的页面事件。页面事件由Cypress机制自动检测到，并自动记录
    - 不是作为需要执行的命令，而是作为触发应用程序状态变化的事件。
- en: 'Cypress logs page events for the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress记录以下页面事件：
- en: Submitting forms
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交表单
- en: Loading new pages
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载新页面
- en: XHR requests for network calls
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于网络调用的XHR请求
- en: Hash changes for test URLs
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试URL的哈希更改
- en: To identify Cypress page events, we need to look for logs in the Cypress command
    log that are gray and have no kind of numbering, such as the commands that are
    within a Cypress test being executed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要识别Cypress页面事件，我们需要查找Cypress命令日志中灰色且没有任何编号的日志，例如在执行Cypress测试中的命令。
- en: Recap – understanding page events
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 理解页面事件
- en: In this section, we covered what page events are, when and how they are logged,
    and how to identify them in Cypress. We also learned that page events are useful
    in tracing the main events that took place when a test was being executed. In
    the next section, we will look at how to obtain further debugging information
    when a test throws an error. We will do this by understanding the error messages
    that can be thrown.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了页面事件是什么，它们何时以及如何被记录，以及如何在Cypress中识别它们。我们还了解到页面事件在追踪测试执行时发生的主要事件方面是有用的。在下一节中，我们将看看当测试抛出错误时如何获得进一步的调试信息。我们将通过理解可能抛出的错误消息来做到这一点。
- en: Understanding errors on a test runner
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解测试运行器上的错误
- en: In this section, we will dissect Cypress errors on the test runner, thus unpacking
    the contents of the errors thrown by Cypress and how to interpret them. We will
    cover different types of information that are present in Cypress errors, including
    the error name, the error message, the code frame file, the stack trace, the print
    to console option, and learn more. Understanding errors in Cypress will not only
    help us write better tests but also guide us through the debugging process when
    our tests fail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解析测试运行器上的Cypress错误，从而解开Cypress抛出的错误的内容以及如何解释它们。我们将涵盖Cypress错误中存在的不同类型的信息，包括错误名称、错误消息、代码框架文件、堆栈跟踪、打印到控制台选项和了解更多。了解Cypress中的错误不仅有助于我们编写更好的测试，还将在测试失败时指导我们进行调试过程。
- en: Cypress excels when it comes to logging exceptions in a test failure event.
    Cypress not only logs information about which tests are failing but goes ahead
    and drills into specific information about the error that was encountered. Errors
    such as successful test executions are visible on the Cypress command log and
    provide descriptive pieces of information that could have led to the error being
    encountered. At times, Cypress even prints suggestions of what needs to be done
    to resolve the errors on the command log.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress在测试失败事件中记录异常方面做得非常出色。Cypress不仅记录了哪些测试失败，而且还深入挖掘了遇到的错误的具体信息。例如，Cypress命令日志上可见成功的测试执行以及提供了可能导致遇到错误的描述性信息。有时，Cypress甚至会在命令日志上打印出解决错误所需的建议。
- en: 'In this section, we will add a test to `debugging.spec.js` that will throw
    an error when it is run in Cypress. In the following test, we will explore the
    information that Cypress provides when an error is encountered, and also try to
    understand why that information is relevant to the process of debugging:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在`debugging.spec.js`中添加一个测试，当在Cypress中运行时会抛出一个错误。在接下来的测试中，我们将探索Cypress在遇到错误时提供的信息，并尝试理解为什么这些信息与调试过程相关。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This test should intentionally throw an error as we are expecting the number
    of todo items to equal `2`, although we have only added a single todo item called
    `New Todo`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试应该故意抛出一个错误，因为我们期望待办事项的数量等于`2`，尽管我们只添加了一个名为`New Todo`的待办事项。
- en: 'Every error that is thrown by Cypress will contain the following pieces of
    information. These will help you identify where the problem is coming from and
    what caused the error that Cypress is throwing:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress抛出的每个错误都包含以下信息。这些信息将帮助您确定问题的根源以及导致Cypress抛出错误的原因：
- en: '**Error name**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误名称
- en: '**Error message**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息
- en: '**Code frame file**'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码框架文件
- en: '**Code frame**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码框架
- en: '**Stack trace**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆栈跟踪
- en: '**Print to console option**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印到控制台选项
- en: '**Learn more (optional)**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多（可选）
- en: Let's look at each of these in detail.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每一个。
- en: Error name
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误名称
- en: Cypress throws different kinds of errors, depending on the error that it has
    encountered. Errors in Cypress are identified by their types and they can be categorized
    by types such as Cypress errors and assertion errors, among others. The type of
    error that Cypress throws helps with debugging. This is because we can fully understand
    whether the test is failing from the tests that are running or from an error that
    Cypress has internally encountered. This error is shown in *Figure 5.2* referenced
    as *1* with the Error name.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress会抛出不同类型的错误，这取决于它遇到的错误。Cypress中的错误通过它们的类型进行识别，它们可以按照Cypress错误和断言错误等类型进行分类。Cypress抛出的错误类型有助于调试。这是因为我们可以充分了解测试是从正在运行的测试失败还是Cypress内部遇到的错误。这个错误显示在*图5.2*中，被引用为*1*，带有错误名称。
- en: Error message
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误消息
- en: With every error comes a message. This message gives a detailed explanation
    of what went wrong when the test was running. Error messages differ from test
    to test. While some messages may be straightforward and tell you what went wrong,
    others will go a step further and even detail the steps that you can take to fix
    the errors. Some error messages contain a **Learn more** section, which will direct
    you to the Cypress documentation that is related to the error that has been encountered.
    This error message is shown in *Figure 5.2* referenced by *2*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个错误都伴随着一条消息。这条消息详细解释了测试运行时出了什么问题。错误消息因测试而异。虽然有些消息可能很直接地告诉您出了什么问题，但其他消息会更进一步，甚至详细说明您可以采取哪些步骤来修复错误。一些错误消息包含一个**了解更多**部分，它将引导您查阅与遇到的错误相关的Cypress文档。这个错误消息显示在*图5.2*中，被引用为*2*。
- en: Code frame file
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码框架文件
- en: This is the file that contains the error that Cypress has encountered. The file
    is shown as the topmost item of the stack trace. The code frame file is displayed
    with the line number and the column number that is highlighted in the Cypress
    error frame. When the code frame file on the stack trace is clicked, it will open
    in the preferred editor and highlight the line and the column where the error
    occurred, if the editor that was used to open the file supports code highlighting.
    We can see Code Frame File in *Figure 5.2*, which is referenced as number *3*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含Cypress遇到的错误的文件。该文件显示为堆栈跟踪的最顶部项目。代码框文件显示了在Cypress错误框中突出显示的行号和列号。当单击堆栈跟踪中的代码框文件时，它将在首选编辑器中打开，并突出显示发生错误的行和列，如果用于打开文件的编辑器支持代码突出显示的话。我们可以在图5.2中看到代码框文件，它被引用为数字*3*。
- en: Code frame
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码框
- en: This is the code snippet that Cypress has flagged to be the cause of the error
    that occurred. It can be found in the code frame file mentioned previously. Cypress
    highlights the specific line that is problematic to executing the test in the
    code frame snippet, as well as the column. We can identify the code frame leading
    to the failure by checking the code snippet referenced as *4* in *Figure 5.2*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Cypress标记为错误原因的代码片段。它可以在先前提到的代码框文件中找到。Cypress在代码框片段中突出显示了导致测试执行问题的特定行，以及列。我们可以通过检查图5.2中标有*4*的代码片段来确定导致失败的代码框。
- en: Stack trace
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈跟踪
- en: The stack trace shows the different methods that were being executed when an
    error occurred, leading to an exception. In Cypress errors, you can toggle the
    stack trace, which can be found below the code frame in the error. This should
    show you the functions that were being executed by the test when it encountered
    an error and failed. Number *5* in *Figure 5.2* shows the stack trace region.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈跟踪显示了在错误发生时正在执行的不同方法，导致了异常。在Cypress错误中，您可以切换堆栈跟踪，它可以在错误的代码框下方找到。这应该向您显示测试在遇到错误并失败时正在执行的函数。图5.2中的数字*5*显示了堆栈跟踪区域。
- en: Print to console
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印到控制台
- en: Cypress errors also offer you the option to print the error that was encountered
    by the DevTools console. The option to print the encountered errors to Command
    Prompt allows us to select a line within the stack trace and print it to the console.
    We can see this in Figure 5.2 as *6*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress错误还为您提供了将遇到的错误打印到DevTools控制台的选项。将遇到的错误打印到命令提示符的选项使我们能够选择堆栈跟踪中的一行并将其打印到控制台。我们可以在图5.2中看到这一点，标有*6*。
- en: Learn more
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解更多
- en: 'As we mentioned earlier, some of the test failures print a **Learn more** link,
    which, when clicked, gives us directions to the relevant Cypress documentation
    for the error that occurred. Cypress failures provide the **Learn more** link
    when the error might require more than just the assertion being adjusted or an
    expectation that is under test:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，一些测试失败会打印出一个**了解更多**的链接，单击该链接将为我们提供有关发生的错误的相关Cypress文档的指引。当错误可能需要调整断言或正在测试的期望之外的更多时，Cypress失败会提供**了解更多**的链接：
- en: '![Figure 5.2 – Information that''s present for test errors'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 - 测试错误时显示的信息'
- en: '](image/Figure_5.2_B15616.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.2_B15616.jpg)'
- en: Figure 5.2 – Information that's present for test errors
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 - 测试错误时显示的信息
- en: The preceding screenshot shows the chronological structure of the error information
    that is displayed when a test throws an exception. As we can see, the test only
    adds one todo item to the todo list but expects to find two. The error occurs
    on the test assertion as Cypress expects two items but only one has been found,
    leading to the error.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了测试抛出异常时显示的错误信息的时间结构。正如我们所看到的，测试只向待办事项列表添加了一个项目，但期望找到两个。错误发生在测试断言上，因为Cypress期望找到两个项目，但只找到了一个，导致了错误。
- en: The information provided by a failing test is crucial to the process of debugging.
    This is because not only does it become easy to identify why the tests are failing,
    but it also helps us understand where changes need to be made for us to restore
    the tests from a failing state to a passing state.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 失败测试提供的信息对于调试过程至关重要。这是因为不仅易于确定测试失败的原因，而且还帮助我们了解需要进行哪些更改才能将测试从失败状态恢复到通过状态。
- en: Recap – understanding errors on a test runner
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 了解测试运行器上的错误
- en: In this section, we learned how informative Cypress errors are. We got to investigate
    different pieces of information that are embedded inside the Cypress error messages
    and their purpose in the debugging process. Knowing how Cypress presents its errors
    when they occur allows us to know how to deal with Cypress errors and understand
    where these errors are coming from. In the next section, we will look at the time
    travel feature of Cypress.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Cypress错误的信息量有多大。我们得以调查嵌入在Cypress错误消息中的不同信息片段以及它们在调试过程中的作用。了解Cypress在发生错误时如何呈现其错误使我们能够知道如何处理Cypress错误以及了解这些错误来自何处。在接下来的部分，我们将看一下Cypress的时间旅行功能。
- en: Understanding time travel on executed tests
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解执行测试的时间旅行
- en: Time travel, just like in sci-fi movies but now in the context of tests, is
    the ability to move back to a state that a test was in while being executed. As
    Cypress tests execute, they create DOM snapshots that we can use to travel back
    in time and check the state of our tests at different times and when different
    actions took place. With time travel, it is possible to check whether an expected
    action takes place and how it took place. Time travel also allows us to investigate
    and audit what actions were taken when the test was running and why errors occurred.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 时间旅行，就像科幻电影中的情节一样，但现在是在测试的背景下，它是指能够回到测试执行时的状态。当Cypress测试执行时，它们会创建DOM快照，我们可以利用这些快照来回溯时间，检查测试在不同时间和不同操作发生时的状态。通过时间旅行，我们可以检查预期的操作是否发生以及它是如何发生的。时间旅行还允许我们调查和审计测试运行时采取了哪些操作以及为什么会出现错误。
- en: 'To investigate time travel in Cypress tests, we will navigate to our `chapter-05`
    folder in this book''s GitHub repository and create a new test in the `debugging.spec.js`
    file, which we created previously. The following code block is a test that will
    mark added todo items as completed. With time travel, we can identify the different
    states of the application as we add todo items, and then mark them as completed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了研究Cypress测试中的时间旅行，我们将导航到本书的GitHub存储库中的`chapter-05`文件夹，并在`debugging.spec.js`文件中创建一个新的测试，这是我们之前创建的。以下代码块是一个测试，将标记添加的待办事项为已完成。通过时间旅行，我们可以识别应用程序的不同状态，当我们添加待办事项时，然后将它们标记为已完成：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code block adds two todo items to the todo list and then marks
    the todo items as completed. Using the Cypress time travel feature, we can refer
    to Cypress to check the states of when we were adding the first todo item and
    even when we were adding the second todo item. By using the time travel feature,
    as shown in the following screenshot, we can further validate that both items
    were in the correct state before they were marked as completed, and that proper
    navigation was done in the process of doing so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码块向待办事项列表中添加了两个待办事项，然后将待办事项标记为已完成。使用Cypress的时间旅行功能，我们可以参考Cypress来检查我们添加第一个待办事项时的状态，甚至是添加第二个待办事项时的状态。通过使用时间旅行功能，如下截图所示，我们可以进一步验证在将它们标记为已完成之前，这两个项目在正确的状态下，并且在执行过程中进行了适当的导航：
- en: '![Figure 5.3 – Time travel and DOM snapshotting in a test'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3-测试中的时间旅行和DOM快照'
- en: '](image/Figure_5.3_B15616.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.3_B15616.jpg)'
- en: Figure 5.3 – Time travel and DOM snapshotting in a test
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3-测试中的时间旅行和DOM快照
- en: In the preceding screenshot, we can see that the test has already finished running
    and has already passed. We can also see that we can step back in time and investigate
    what was happening when the first todo item was clicked inside the todo list.
    Since Cypress can step back in time and show us the DOM at that particular point
    in time, we can actually verify the steps that were taken to reach the end result
    of the test – whether it was a test pass or a test failure. The numbers indicated
    show the main parts of the Cypress time travel mechanism and the order in which
    the events took place.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们可以看到测试已经完成运行并且已经通过了。我们还可以看到我们可以倒退时间并调查当待办事项列表中的第一个待办事项被点击时发生了什么。由于Cypress可以倒退时间并在特定时间点向我们显示DOM，我们实际上可以验证达到测试的最终结果的步骤——无论是测试通过还是测试失败。所示的数字显示了Cypress时间旅行机制的主要部分和事件发生的顺序。
- en: The first step in time travelling is waiting for the test run to be complete,
    then selecting the step that you want to time travel back to. Cypress not only
    shows the test steps but also allows you to pin the DOM snapshot of the step to
    the Cypress preview window.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 时间旅行的第一步是等待测试运行完成，然后选择要倒退时间的步骤。Cypress不仅显示测试步骤，还允许您将步骤的DOM快照固定到Cypress预览窗口。
- en: After selecting the time travel step, the step of interest that we have selected
    is pinned as a DOM snapshot. We can view the step in the state it was in and in
    the new state that it was transformed into after the action took place. This can
    be seen in the preview window of the preceding screenshot.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择时间旅行步骤后，我们选择的感兴趣的步骤被固定为DOM快照。我们可以查看步骤在当时的状态以及在操作发生后转变为的新状态。这可以在上面截图的预览窗口中看到。
- en: The third step in the time travel inspection process is to choose between **after**
    and **before** for the DOM snapshot. Toggling between **after** and **before**
    shows changes within the DOM snapshots. This toggling helps us understand how
    the actions of the Cypress step that we are inspecting changed the DOM at that
    particular stage. When we are done with our inspection, we can move on to the
    next execution step and pin the state of the test at that particular step of execution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 时间旅行检查过程的第三步是在**之后**和**之前**之间选择DOM快照。在**之后**和**之前**之间切换显示DOM快照中的更改。这种切换帮助我们了解我们正在检查的Cypress步骤的操作如何改变了那个特定阶段的DOM。当我们完成检查时，我们可以继续到下一个执行步骤并固定测试在那个特定执行步骤的状态。
- en: Important Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Cypress time travel does not work when the test is still executing and has not
    passed or failed. For proper results, you must wait for the execution to be completed
    before you see the end results of all the relevant steps.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress时间旅行在测试仍在执行并且尚未通过或失败时不起作用。为了获得正确的结果，您必须等待执行完成，然后才能看到所有相关步骤的最终结果。
- en: Recap – understanding time travel on executed tests
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-了解执行测试的时间旅行
- en: In this section, we learned how Cypress provides us with a time travel feature
    so that we can go back to the different steps that Cypress took to execute our
    tests. Time traveling in Cypress allows us to check the steps that Cypress took
    to declare our tests either as failed or passed. We also got the chance to see
    how the time travel feature works with the snapshot feature, which we will cover
    in the next section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Cypress如何为我们提供时间旅行功能，以便我们可以返回到Cypress执行测试的不同步骤。在Cypress中进行时间旅行允许我们检查Cypress执行测试的步骤，无论是将其声明为失败还是通过。我们还有机会看到时间旅行功能如何与快照功能配合使用，我们将在下一节中介绍。
- en: Understanding test snapshots
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解测试快照
- en: We briefly covered the concept of snapshots when we explained the time travel
    process in Cypress. However, this does not mean we have exhausted the advantages
    of the Snapshots feature.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们解释Cypress中的时间旅行过程时，我们简要介绍了快照的概念。然而，这并不意味着我们已经充分利用了快照功能的优势。
- en: 'Snapshots are powerful as they give us a sneak peek into how the test executes
    and into the steps that it took, which either lead to a failure state or to a
    success state in the test. When we pin DOM snapshots, Cypress freezes the test
    and highlights all the actions that were taken. The pinned snapshots allow us
    to inspect the state of the DOM, while at the same time view all the events that
    took place in that particular step. In the preceding screenshot, for example,
    in *step 2*, there''s an **event hitbox** that shows that the first todo item
    was clicked. The following screenshot shows how Cypress interprets events that
    take place as a test is running:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 快照非常强大，因为它们让我们一睹测试的执行过程以及所采取的步骤，这些步骤要么导致测试失败，要么导致测试成功。当我们固定DOM快照时，Cypress会冻结测试并突出显示所有已执行的操作。固定的快照允许我们检查DOM的状态，同时查看在该特定步骤中发生的所有事件。例如，在前面的屏幕截图中，在*步骤2*中，有一个显示第一个待办事项被点击的**事件点击框**。以下屏幕截图显示了Cypress在测试运行时如何解释发生的事件：
- en: '![Figure 5.4 – An event hitbox for a toggled todo item'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4 - 一个切换的待办事项的事件点击框'
- en: '](image/Figure_5.4_B15616.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.4_B15616.jpg)'
- en: Figure 5.4 – An event hitbox for a toggled todo item
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 - 一个切换的待办事项的事件点击框
- en: The preceding screenshot shows the event hitbox in action. Here, we can see
    a click event took place that affects the application state of the todo application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中显示了事件点击框的作用。在这里，我们可以看到发生了一个点击事件，影响了待办事项应用程序的状态。
- en: Important Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The event hitbox is a highlight that pops up on pinned Cypress snapshots to
    show that the test interacted with the element. The event hitbox can be triggered
    by Cypress events such as the `.click()` method.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 事件点击框是在固定的Cypress快照上弹出的突出显示，以显示测试与元素的交互。事件点击框可以由Cypress事件触发，例如`.click()`方法。
- en: 'The **Snapshots** menu allows us to toggle between the states of the snapshot.
    If an event took place that changed the DOM, we can toggle to see the state before
    the change took place and toggle to see the state after the change took place.
    The **before** snapshot toggle will display the state before any event that the
    selected test step triggered. On the other hand, the **after** toggle will show
    the state of the application after an event has been triggered from the selected
    step. The following screenshot shows a toggle for the pinned DOM snapshot, which
    shows what the snapshot looked like before an event and what it will look like
    after an event takes place:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**快照**菜单允许我们在快照的状态之间切换。如果发生了改变DOM的事件，我们可以切换以查看改变发生前的状态，然后切换以查看改变发生后的状态。**之前**快照切换将显示所选测试步骤触发的任何事件之前的状态。另一方面，**之后**切换将显示所选步骤触发事件后应用程序的状态。以下屏幕截图显示了固定的DOM快照的切换，显示了事件发生前快照的样子以及事件发生后快照的样子：'
- en: '![Figure 5.5 – ADOM snapshot menu'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5 - 一个DOM快照菜单'
- en: '](image/Figure_5.5_B15616.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.5_B15616.jpg)'
- en: Figure 5.5 – ADOM snapshot menu
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - 一个DOM快照菜单
- en: In the preceding screenshot, we can see the **Snapshot** menu items. The first
    window-like icon will hide or show the **event hitbox** on the pinned DOM snapshot,
    while the **before** and **after** menus are used to show the transition of the
    DOM of the selected step. The **close** icon of the **Snapshot** menu, when clicked,
    unpins the DOM snapshot and reverts it back to the completed step of the tests
    without any pinned DOM snapshots.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到**快照**菜单项。第一个类似窗口的图标将隐藏或显示固定的DOM快照上的**事件点击框**，而**之前**和**之后**菜单用于显示所选步骤的DOM的转换。**快照**菜单的**关闭**图标在点击时会取消固定DOM快照，并将其恢复到没有固定DOM快照的测试完成步骤。
- en: Important Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'How the **before** and **after** events of the snapshot menu items are displayed
    depends on the event that took place. In events where the action has transformed
    the state of the DOM, then both the before and after snapshots will be different.
    When the action that was performed does not directly change the DOM: it is possible
    to have similar snapshots for both the before and after states of the test step.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 快照菜单项的**之前**和**之后**事件的显示取决于发生的事件。在改变DOM状态的事件中，之前和之后的快照将是不同的。当执行的操作不直接改变DOM时：可能会在测试步骤的之前和之后状态中有相似的快照。
- en: Recap – understanding test snapshots
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 理解测试快照
- en: In this section, we learned how Cypress stores important debugging information
    in the DOM snapshots after every test run. We also learned how to utilize Cypress
    snapshots to check the before and after states of a test step, and then use this
    in the investigation process of debugging. In the next section, we will learn
    how to utilize the console's debug output for information.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Cypress在每次测试运行后如何将重要的调试信息存储在DOM快照中。我们还学习了如何利用Cypress快照来检查测试步骤的前后状态，然后在调试的调查过程中使用这些信息。在接下来的部分中，我们将学习如何利用控制台的调试输出来获取信息。
- en: Understanding the console debug output
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解控制台调试输出
- en: In this section, we will understand how to leverage Cypress' console debug output
    to understand application state changes. We will open and interact with the console
    output in the browser's console. Understanding the output in the browser's console
    will allow us to debug tests even better, since we can investigate issues that
    are thrown as errors by Cypress and resolve them quickly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何利用Cypress的控制台调试输出来理解应用程序状态的变化。我们将在浏览器的控制台中打开并与控制台输出进行交互。理解浏览器控制台中的输出将使我们能够更好地调试测试，因为我们可以调查Cypress抛出的错误并快速解决问题。
- en: Cypress is excellent at providing debugging information. Since all the information
    that's provided by the snapshots might not be enough, Cypress provides an additional
    step so that you can view the information of a specific step and its impact on
    elements. To view the console debug output, we will need to open our DevTools.
    To open the DevTools console of our Cypress test browsers, we need to follow certain
    steps, all of which will be discussed in the following sections.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress非常擅长提供调试信息。由于快照提供的所有信息可能不足够，Cypress提供了额外的步骤，以便您可以查看特定步骤的信息及其对元素的影响。要查看控制台调试输出，我们需要打开DevTools。要打开Cypress测试浏览器的DevTools控制台，我们需要按照一定的步骤进行操作，所有这些步骤将在以下各节中讨论。
- en: macOS
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS
- en: 'To open the **DevTools** console of your Cypress test browser on macOS, follow
    these steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上打开Cypress测试浏览器的**DevTools**控制台，请按照以下步骤操作：
- en: Hold the trackpad down with two fingers while on the Cypress test browser preview.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cypress测试浏览器预览时，用两根手指按住触控板。
- en: Select the **Inspect** option from the pop-up menu.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择**Inspect**选项。
- en: Select the **Console** tab from the **DevTools** console.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**DevTools**控制台中选择**Console**选项卡。
- en: You can also use the *Option* + *J* shortcut to open the **DevTools** menu on
    Mac.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用*Option* + *J*快捷键在Mac上打开**DevTools**菜单。
- en: Windows/Linux OS
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows/Linux操作系统
- en: 'To open the **DevTools** console of your Cypress test browser on Windows and
    Linux OS, follow these steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows和Linux操作系统上打开Cypress测试浏览器的**DevTools**控制台，请按照以下步骤操作：
- en: Right-click on the Cypress test browser while on the Cypress test preview.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cypress测试预览时，右键单击Cypress测试浏览器。
- en: Select the **Inspect** option from the browser pop-up menu.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从浏览器弹出菜单中选择**Inspect**选项。
- en: Select the **Console** tab from the **DevTools** console.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**DevTools**控制台中选择**Console**选项卡。
- en: You can also open it using the *Shift* + *Ctrl* + *J* shortcut on either Windows
    operating systems or Linux to open the **DevTools** console.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用*Shift* + *Ctrl* + *J*快捷键在Windows操作系统或Linux上打开**DevTools**控制台。
- en: 'Once you can see the console output, select a test step, as shown in the following
    screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您可以看到控制台输出，请选择一个测试步骤，如下面的屏幕截图所示：
- en: '![Figure 5.6 – The debug output on a browser console'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6-浏览器控制台上的调试输出'
- en: '](image/Figure_5.6_B15616.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.6_B15616.jpg)'
- en: Figure 5.6 – The debug output on a browser console
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6-浏览器控制台上的调试输出
- en: The preceding screenshot shows the output of the selected Cypress command on
    Command Prompt. As we can see, when a specific command step is clicked, the DOM
    snapshot is pinned to the Cypress browser's preview screen. Pinning the DOM snapshot
    allows us to interact with the elements on the pinned snapshot uninterrupted.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了在命令提示符上选择的Cypress命令的输出。正如我们所看到的，当单击特定命令步骤时，DOM快照会固定到Cypress浏览器的预览屏幕上。固定DOM快照使我们能够在固定快照上无间断地与元素交互。
- en: In the preceding screenshot, we selected the `get` method and the first todo
    item, which can be identified by the `.todo-list>li:nth-child(1)` CSS selector.
    We can also see that the Cypress `get` method finds the CSS selector for the first
    todo item and toggles it to completed. Looking through the console debug information,
    we can see the additional information that Cypress printed on the console that
    is related to the action step and is now pinned to the DOM.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述屏幕截图中，我们选择了`get`方法和第一个待办事项，可以通过`.todo-list>li:nth-child(1)`CSS选择器进行识别。我们还可以看到Cypress
    `get`方法找到了第一个待办事项的CSS选择器，并将其切换为已完成状态。通过查看控制台调试信息，我们可以看到Cypress在控制台上打印的与操作步骤相关的附加信息，现在已固定到DOM上。
- en: 'In the **Console** area, we can see the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Console**区域，我们可以看到以下内容：
- en: '**Command**: This is the command that we issued. In our case, it was a `cy.get()`
    command.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Command**：这是我们发出的命令。在我们的情况下，它是一个`cy.get()`命令。'
- en: '**Yielded**: This prints the statement that was returned by the command that
    was invoked. In our case, it will print out the same as what the input was. This
    is because we are not changing the state of the element with our command.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Yielded**：这会打印由调用的命令返回的语句。在我们的情况下，它将打印与输入相同的内容。这是因为我们没有改变元素的状态。'
- en: '**Elements**: This prints the elements that were returned from our `get` command.
    In our case, we only have one element that was found by using our CSS selector.
    However, if we had more than one element, we would be able to see the elements
    that were found.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elements**：这会打印从我们的`get`命令返回的元素。在我们的情况下，我们只有一个元素是通过CSS选择器找到的。但是，如果我们有多个元素，我们将能够看到找到的元素。'
- en: '**Selector**: This refers to the CSS selector that we used to identify our
    todo item in the DOM.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selector**：这是指我们用来在DOM中识别待办事项的CSS选择器。'
- en: Important Note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The information that's displayed on the console can change due to the different
    commands that are issued and inspected. This is not standard for all the Cypress
    commands that are inspected on the console log.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于发出和检查的不同命令，控制台上显示的信息可能会发生变化。这并不是所有在控制台日志上检查的Cypress命令的标准。
- en: Using this debugging information and combining it with debug information from
    the methods we covered earlier will give you an idea of which Cypress tests are
    failing and why. In most cases, you only need to learn how to read the common
    Cypress errors to understand how the errors are thrown and why those errors appear.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些调试信息，并将其与我们之前介绍的方法的调试信息相结合，将使您了解Cypress测试失败的原因。在大多数情况下，您只需要学习如何阅读常见的Cypress错误，以了解错误是如何抛出的以及为什么会出现这些错误。
- en: Recap – understanding the console debug output
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-了解控制台调试输出
- en: In this section, we learned how to utilize the console debug output in Cypress
    to understand application state changes. We also learned how to open and access
    the console information and interact with it. In the next section, we will learn
    how to utilize Cypress' special debugging commands.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何利用Cypress中的控制台调试输出来了解应用程序状态的变化。我们还学习了如何打开和访问控制台信息并与其交互。在下一节中，我们将学习如何利用Cypress的特殊调试命令。
- en: Special debugging commands
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特殊调试命令
- en: 'If jumping through commands is not your thing, or you are finding it difficult
    to understand how travelling back in time shows you the order of execution in
    a test, Cypress has got your back. Cypress includes commands that are helpful
    for debugging and even gives you the options that you would have when using normal
    code debuggers. The two commands that we will be exploring in this section are
    as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果跳转命令不是您的菜，或者您发现难以理解如何通过时间倒流来显示测试执行顺序，Cypress会帮助您。Cypress包括对调试有帮助的命令，甚至为您提供了在使用普通代码调试器时会有的选项。我们将在本节中探讨的两个命令如下：
- en: '`cy.debug()`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.debug()`'
- en: '`cy.pause()`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cy.pause()`'
- en: Using these Cypress debug commands, we can understand how to debug Cypress from
    the tests themselves. These two special debugging commands will allow us to directly
    control the debug process as we execute our tests. Having the ability to stop
    execution within the tests themselves gives us the advantage of only having to
    debug the specific sections that are throwing errors in Cypress.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些Cypress调试命令，我们可以了解如何从测试本身调试Cypress。这两个特殊的调试命令将允许我们在执行测试时直接控制调试过程。在测试本身中停止执行的能力使我们能够只调试在Cypress中抛出错误的特定部分。
- en: cy.debug
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.debug
- en: The `cy.debug()` command is, by default, the debugging command that Cypress
    offers out of the box. The command will log onto the console and will log the
    output of the command that it has chained off. To use the `cy.debug`() command,
    you need to chain it from any `cy` command or use it as a standalone Cypress command.
    In our context, we will be using the command by chaining it from the `cy.get()`
    command.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`cy.debug()`命令是Cypress默认提供的调试命令。该命令将记录到控制台，并记录其链式调用的命令的输出。要使用`cy.debug()`命令，您需要从任何`cy`命令进行链式调用，或者将其用作独立的Cypress命令。在我们的上下文中，我们将通过从`cy.get()`命令进行链式调用来使用该命令。'
- en: This command pauses the execution of the test when it is called, and also displays
    the option of systematically stepping forward from a command and pausing the debugger
    from the current execution step. In reality, the debugger allows us to execute
    the test at our desired speed while inspecting what happens when a step is executed.
    In addition to the debugger interface, this Cypress command also displays verbose
    on the console output and displays information such as the command name, the type
    of command, and even the subject that we have chained our debugger from.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令在调用时暂停测试的执行，并显示系统地从命令向前步进并暂停调试器的选项。实际上，调试器允许我们以所需的速度执行测试，同时检查执行步骤时发生了什么。除了调试器界面外，该Cypress命令还会在控制台输出中显示详细信息，例如命令名称、命令类型，甚至是我们从中链式调用调试器的主题。
- en: 'Now that we have added both of our todo items and inspected both the console
    log and the Cypress test runner preview pane, we can add the debugger. The following
    code block shows a test that marks a todo item as complete. However, instead of
    executing the whole test, we will open the debugger after adding the second todo
    item:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了我们的两个待办事项，并检查了控制台日志和Cypress测试运行器预览窗格，我们可以添加调试器。以下代码块显示了一个将待办事项标记为已完成的测试。但是，我们将在添加第二个待办事项后打开调试器，而不是执行整个测试：
- en: '[PRE3]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding code block, we want to check the state of our application
    after the second todo item has been added. The following screenshot shows an open
    debugger after the second todo item was added:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们希望在添加第二个待办事项后检查我们的应用程序状态。以下屏幕截图显示了在添加第二个待办事项后打开的调试器：
- en: '![Figure 5.7 – The debugger of a running test'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 - 运行测试的调试器'
- en: '](image/Figure_5.7_B15616.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.7_B15616.jpg)'
- en: Figure 5.7 – The debugger of a running test
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 - 运行测试的调试器
- en: As we can see, the debugger pauses our running test after the second todo item
    is added. Here, we can observe that we can interact with the application and inspect
    elements at our own pace once the debugger has paused our running test. With the
    debugger in place, we can see the application state changes, along with additional
    debug information, displayed on the console output. Once we've finished inspecting
    the state, we can either remove the `.debug()` command or place it in another
    line that we wish to inspect.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，调试器在添加第二个待办事项后暂停了我们的运行测试。在这里，我们可以观察到，一旦调试器暂停了我们的运行测试，我们就可以以自己的步调与应用程序进行交互和检查元素。有了调试器，我们可以看到应用程序状态的变化，以及在控制台输出中显示的其他调试信息。完成检查状态后，我们可以删除`.debug()`命令，或者将其放在我们希望检查的另一行中。
- en: cy.pause
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.pause
- en: 'The Cypress `pause` command works very similar to the `cy.debug()` command
    but instead of being chained to other commands, it can be used independently,
    just like a debugger. When the `pause` command is used, Cypress slows its execution
    and only executes the next step when the forward button is clicked. Just like
    the debugger, the Cypress `pause` command gives control to the person executing
    the tests and allows them to investigate every test step. The following code block
    shows a test that marks a todo item as completed. However, before execution is
    complete, we pause the test after adding the first todo item:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress的`pause`命令与`cy.debug()`命令非常相似，但它不是链式调用其他命令，而是可以独立使用，就像调试器一样。当使用`pause`命令时，Cypress会减慢执行速度，并且只有在单击前进按钮时才执行下一步。与调试器一样，Cypress的`pause`命令将控制权交给执行测试的人，并允许他们调查每个测试步骤。以下代码块显示了一个将待办事项标记为已完成的测试。但是，在执行完成之前，我们在添加第一个待办事项后暂停测试：
- en: '[PRE4]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we have added a single todo item and then paused the execution before
    marking it as completed:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个待办事项，然后在标记为已完成之前暂停了执行：
- en: '![Figure 5.8 – The pause menu of a running test'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 - 运行测试的暂停菜单'
- en: '](image/Figure_5.8_B15616.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_5.8_B15616.jpg)'
- en: Figure 5.8 – The pause menu of a running test
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8 - 运行测试的暂停菜单
- en: As we can see, immediately after adding our todo item, execution is halted until
    we press the **step-forward** button in the **pause** menu. This appears on the
    top part of the test commands section. When all the steps have been executed,
    the test will exit and either pass or fail, depending on the output of the steps
    that were executed. In our case, we have a passing test – hurray!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，添加待办事项后，执行会暂停，直到我们在**暂停**菜单的顶部部分按下**步进**按钮。当所有步骤都执行完毕后，测试将退出，并根据执行的步骤的输出结果，要么通过要么失败。在我们的案例中，我们有一个通过的测试
    - 万岁！
- en: Important Note
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Cypress special debugging commands should only be used when we are investigating
    the state of the tests that are running or for debugging purposes. They should
    not be used in tests that are running in **continuous integration** (**CI**) as
    they might lead to timeouts and, subsequently, test failures.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress特殊调试命令只应在我们调查运行中的测试状态或进行调试时使用。它们不应该在**持续集成**（**CI**）中运行的测试中使用，因为这可能会导致超时，随后导致测试失败。
- en: Recap – special debugging commands
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾 - 特殊调试命令
- en: In this section, we learned about the Cypress special commands that can be used
    to provide additional debugging information. We learned that both the Cypress
    `debug` and `pause` commands come in handy when we want to slow down the execution
    of a test. We also learned that debug commands can be used as complementary tools
    for the Cypress tools that are provided by the test runner, such as DOM snapshots.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Cypress特殊命令，这些命令可用于提供额外的调试信息。我们了解到，当我们想要减慢测试的执行速度时，Cypress的`debug`和`pause`命令都非常有用。我们还了解到调试命令可以作为补充工具，用于Cypress测试运行器提供的工具，例如DOM快照。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the role of debugging when it comes to executing
    tests. We identified aspects of the Cypress framework that make the debugging
    process in Cypress useful for anyone writing tests and implementing the Cypress
    framework. We also learned that Cypress is bundled with different tools that can
    be used either to achieve different purposes or the same ones. The main takeaway
    is that no matter what bug you encounter, Cypress will find a way for you to identify
    and fix it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了调试在执行测试时的作用。我们确定了Cypress框架的一些方面，这些方面使得Cypress中的调试过程对于任何编写测试和实施Cypress框架的人都非常有用。我们还了解到，Cypress捆绑了不同的工具，可以用于实现不同的目的或相同的目的。最重要的是，无论遇到什么错误，Cypress都会为您找到一种方法来识别和解决它。
- en: By completing this chapter, you have learned what page events are in Cypress,
    how to interpret Cypress test runner errors, how time travel works in executed
    tests, and how to interpret test snapshots. You also learned how to interpret
    console output information from Cypress and how to use the two special debugging
    commands that are available.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成本章，您已经了解了Cypress中的页面事件是什么，如何解释Cypress测试运行器的错误，执行测试中时间旅行的工作原理，以及如何解释测试快照。您还学会了如何解释来自Cypress的控制台输出信息，以及如何使用可用的两个特殊调试命令。
- en: Now that we know about debugging and its impact on our tests, we can comfortably
    dive into the second section of this book, which will involve using Cypress with
    a **test-driven development** (**TDD**) approach. In the next chapter, we will
    develop an application by using a test-first approach, where we will write our
    tests before we begin developing our application. We will use these tests later
    on to guide us through the process of application development.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了调试及其对我们测试的影响，我们可以舒适地深入本书的第二部分，这将涉及使用Cypress进行**测试驱动开发**（**TDD**）方法。在下一章中，我们将通过测试优先的方法开发应用程序，我们将在开始开发应用程序之前编写测试。稍后我们将使用这些测试来指导我们完成应用程序开发的过程。
