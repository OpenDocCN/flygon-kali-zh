["```kt\nimport android.app.Activity\nimport android.os.Bundle\nimport android.graphics.Point\n\nclass MainActivity : Activity() {\n\n    private lateinit var liveDrawingView: LiveDrawingView\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        val display = windowManager.defaultDisplay\n        val size = Point()\n        display.getSize(size)\n\n        liveDrawingView = LiveDrawingView(this, size.x)\n\n        setContentView(liveDrawingView)\n\n    }\n}\n```", "```kt\nprivate lateinit var liveDrawingView: LiveDrawingView\n```", "```kt\nval display = windowManager.defaultDisplay\n```", "```kt\nliveDrawingView = LiveDrawingView(this, size.x)\n```", "```kt\nsetContentView(liveDrawingView)\n```", "```kt\noverride fun onResume() {\n   super.onResume()\n\n   // More code here later in the chapter\n}\n\noverride fun onPause() {\n   super.onPause()\n\n  // More code here later in the chapter\n}\n```", "```kt\nclass LiveDrawingView(\n        context: Context,\n        screenX: Int)\n    : SurfaceView(context){\n```", "```kt\nandroid.view.SurfaceView\n\n```", "```kt\n// Are we debugging?\nprivate val debugging = true\n\n// These objects are needed to do the drawing\nprivate lateinit var canvas: Canvas\nprivate val paint: Paint = Paint()\n\n// How many frames per second did we get?\nprivate var fps: Long = 0\n// The number of milliseconds in a second\nprivate val millisInSecond: Long = 1000\n\n// How big will the text be?\n// Font is 5% (1/20th) of screen width\n// Margin is 1.5% (1/75th) of screen width\nprivate val fontSize: Int = mScreenX / 20\nprivate val fontMargin: Int = mScreenX / 75\n\n// The particle systems will be declared here later\n```", "```kt\n// These objects are needed to do the drawing\nprivate lateinit var canvas: Canvas\nprivate val paint: Paint = Paint()\n```", "```kt\n// How many frames per second did we get?\nprivate var fps: Long = 0\n// The number of milliseconds in a second\nprivate val millisInSecond: Long = 1000\n```", "```kt\n// How big will the text be?\n// Font is 5% (1/20th) of screen width\n// Margin is 1.5% (1/75th) of screen width\nprivate val fontSize: Int = screenX / 20\nprivate val fontMargin: Int = screenX / 75\n```", "```kt\nimport android.content.Context\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport android.view.SurfaceView\n```", "```kt\n// Draw the particle systems and the HUD\nprivate fun draw() {\n   if (holder.surface.isValid) {\n         // Lock the canvas (graphics memory) ready to draw\n         canvas = holder.lockCanvas()\n\n         // Fill the screen with a solid color\n         canvas.drawColor(Color.argb(255, 0, 0, 0))\n\n         // Choose a color to paint with\n         paint.color = Color.argb(255, 255, 255, 255)\n\n         // Choose the font size\n         paint.textSize = fontSize.toFloat()\n\n         // Draw the particle systems\n\n         // Draw the HUD\n\n         if (debugging) {\n               printDebuggingText()\n         }\n         // Display the drawing on screen\n         // unlockCanvasAndPost is a \n         // function of SurfaceHolder\n         holder.unlockCanvasAndPost(canvas)\n   }\n}\n```", "```kt\nimport android.graphics.Color;\n```", "```kt\nprivate fun printDebuggingText() {\n   val debugSize = fontSize / 2\n   val debugStart = 150\n   paint.textSize = debugSize.toFloat()\n   canvas.drawText(\"fps: $fps\",\n         10f, (debugStart + debugSize).toFloat(), paint)\n\n }\n```", "```kt\nif (holder.surface.isValid) {\n         // Lock the canvas (graphics memory) ready to draw\n         canvas = holder.lockCanvas()\n```", "```kt\n// Display the drawing on screen\n// unlockCanvasAndPost is a \n// function of SurfaceHolder\nholder.unlockCanvasAndPost(canvas)\n```", "```kt\nprivate lateinit var thread: Thread\n```", "```kt\n// Initialize the instance of Thread\nthread = Thread(this)\n\n// Start the thread\nthread.start()\n```", "```kt\nthread = Thread(this)\n```", "```kt\noverride fun run() {\n         // Anything in here executes in a thread\n         // No skill needed on our part\n         // It is all handled by Android, the Thread class\n         // and the Runnable interface\n}\n```", "```kt\noverride fun run() { \n    // Update the drawing based on\n    // user input and physics\n    update()\n\n    // Draw all the particle systems in their updated locations\n    draw() \n}\n```", "```kt\nthread.join()\n```", "```kt\nclass LiveDrawingView(\n        context: Context,\n        screenX: Int)\n    : SurfaceView(context), Runnable {\n```", "```kt\n// When we start the thread with:\n// thread.start();\n// the run function is continuously called by Android\n// because we implemented the Runnable interface\n// Calling thread.join();\n// will stop the thread\noverride fun run() {\n\n}\n```", "```kt\n// Here is the Thread and two control variables\nprivate lateinit var thread: Thread\n// This volatile variable can be accessed\n// from inside and outside the thread\n@Volatile\nprivate var drawing: Boolean = false\nprivate var paused = true\n```", "```kt\n// This function is called by MainActivity\n// when the user quits the app\nfun pause() {\n   // Set drawing to false\n   // Stopping the thread isn't\n   // always instant\n   drawing = false\n   try {\n         // Stop the thread\n         thread.join()\n  }  catch (e: InterruptedException) {\n     Log.e(\"Error:\", \"joining thread\")\n  }\n\n}\n\n// This function is called by MainActivity\n// when the player starts the app\nfun resume() {\n    drawing = true\n    // Initialize the instance of Thread\n    thread = Thread(this)\n\n    // Start the thread\n    thread.start()\n}\n```", "```kt\noverride fun onResume() {\n  super.onResume()\n\n  // More code here later in the chapter\n liveDrawingView.resume()\n}\n\noverride fun onPause() {\n   super.onPause()\n\n   // More code here later in the chapter\n liveDrawingView.pause()\n}\n```", "```kt\noverride fun run() {\n   // The drawing Boolean gives us finer control\n   // rather than just relying on the calls to run\n   // drawing must be true AND\n   // the thread running for the main\n   // loop to execute\n   while (drawing) {\n\n         // What time is it now at the \n         // start of the loop?\n         val frameStartTime = \n               System.currentTimeMillis()\n\n        // Provided the app isn't paused\n        // call the update function\n        if (!paused) {\n              update()\n        }\n\n        // The movement has been handled\n        // we can draw the scene.\n        draw()\n\n        // How long did this frame/loop take?\n        // Store the answer in timeThisFrame\n        val timeThisFrame = System.currentTimeMillis() \n            - frameStartTime\n\n      // Make sure timeThisFrame is \n      // at least 1 millisecond\n      // because accidentally dividing\n      // by zero crashes the app\n      if (timeThisFrame > 0) {\n            // Store the current frame rate in fps\n            // ready to pass to the update functions of\n            // of our particles in the next frame/loop\n            fps = millisInSecond / timeThisFrame\n      }\n   }\n}\n```", "```kt\nprivate fun update() {\n   // Update the particles\n}\n```", "```kt\noverride fun run() {\n   // The drawing Boolean gives us finer control\n   // rather than just relying on the calls to run\n   // drawing must be true AND\n   // the thread running for the main\n   // loop to execute\n   while (drawing) {\n```", "```kt\n// What time is it now at the \n// start of the loop?\nval frameStartTime = \n  System.currentTimeMillis()\n```", "```kt\n// Provided the app isn't paused\n// call the update function\nif (!paused) {\n   update()\n}\n```", "```kt\n// The movement has been handled\n// we can draw the scene.\ndraw()\n\n// How long did this frame/loop take?\n// Store the answer in timeThisFrame\nval timeThisFrame = System.currentTimeMillis() \n  - frameStartTime\n```", "```kt\n// Make sure timeThisFrame is \n// at least 1 millisecond\n// because accidentally dividing\n// by zero crashes the app\nif (timeThisFrame > 0) {\n   // Store the current frame rate in fps\n   // ready to pass to the update functions of\n   // of our particles in the next frame/loop\n   fps = millisInSecond / timeThisFrame\n}\n```"]