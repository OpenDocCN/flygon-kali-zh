- en: C# with LINQ and Custom Data Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用C#和LINQ以及自定义数据类型
- en: In this chapter, we will talk about using LINQ with custom types.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用LINQ与自定义类型。
- en: Adding a Show People button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个显示人员的按钮
- en: 'Bring up a project. Go to `Default.aspx`, and below the line that begins with
    `with <form id=...`, put in a button. To do this, go to the Toolbox, grab a `Button`
    control, and drag it in there. Change the text on the button to say Show People:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目。转到`Default.aspx`，并在以`<form id=...`开头的行下面放置一个按钮。要做到这一点，转到工具箱，获取一个`Button`控件，并将其拖放到那里。更改按钮上的文本以显示“显示人员”：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up a database
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库
- en: We will have a database, we will query it, and we will show people who have,
    for example, a certain letter in their names, make a certain amount of money,
    and sort it in a certain way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有一个数据库，我们将对其进行查询，并且我们将展示那些，例如，名字中有某个字母的人，赚取一定数量的钱，并以某种方式进行排序。
- en: 'To accomplish this, go to the Design view, and double-click on the Show People
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    10.5.1*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，转到设计视图，并双击“显示人员”按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。该项目的起始代码的相关部分应该看起来像*图10.5.1*：
- en: '![](img/2d58bd36-b314-4537-8214-4ccc5824453c.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d58bd36-b314-4537-8214-4ccc5824453c.png)'
- en: 'Figure 10.5.1: The starting code section for this project'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5.1：该项目的起始代码部分
- en: 'In the next stage, first go to the top of the file, and enter the following
    after `using System`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，首先转到文件顶部，并在`using System`之后输入以下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we''ll make a class. We''ll call it `Person`. So, above the line beginning
    with `public partial class...`, insert the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个类。我们将其称为`Person`。因此，在以`public partial class...`开头的行上面插入以下内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Making a custom type using LINQ
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ制作自定义类型
- en: 'Now, between the set of curly braces below the preceding line, you will declare
    two auto properties, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在上一行下面的花括号集之间，您将声明两个自动属性，如下所示：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, to make a constructor, enter the following below these lines:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了创建一个构造函数，请在这些行下面输入以下内容：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you will set the values of the properties inside the constructor. So,
    enter the following between a set of curly braces below these lines:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将在构造函数内设置属性的值。因此，请在以下这些行下面的一组花括号之间输入以下内容：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is our simple custom type, `Person`, with two automatic properties in a
    parameterized constructor.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们简单的自定义类型`Person`，具有两个自动属性和一个带参数的构造函数。
- en: Setting up an array of people
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个人员数组
- en: 'In the next stage, you''ll make an array of people; enter the following between
    a set of curly braces below the line beginning with `protected void Button1_Click....`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，您将创建一个人员数组；请在以下以`protected void Button1_Click....`开头的行下面的一组花括号之间输入以下内容：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Querying the array
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询数组
- en: 'Now, to query this, enter the following below this line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要查询这个，请在此行下面输入以下内容：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you type, notice that `IEnumerable` doesn''t show up, so you''ve got to
    go to the top of the file again and enter the following after `using System.Linq`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入时，注意到`IEnumerable`不会显示出来，因此您必须再次转到文件顶部，并在`using System.Linq`之后输入以下内容：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now let's make use of this down below; so, underneath the line beginning with
    `Person[] people...`, enter the line `IEnumerable<Person>...` stated earlier.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在下面使用它；因此，在以`Person[] people...`开头的行下面，输入前面提到的`IEnumerable<Person>...`行。
- en: Here, `Person` is a type of object that can be enumerated from the list of people.
    `peopleWithN` indicates that we'll be searching for people who have an `n` letter
    in their name. In fact, the code searches for people whose name ends with `n`.
    (Note that `per` stands for each person inside the list.) Further, we sort by
    salaries in descending order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Person`是可以从人员列表中枚举的对象类型。`peopleWithN`表示我们将搜索名字中有字母`n`的人。实际上，代码搜索名字以`n`结尾的人。（请注意，`per`代表列表中的每个人。）此外，我们按工资降序排序。
- en: Because people sometimes type information inconsistently, you first have to
    convert everything to the equivalent case, but this is something for you to figure
    out on your own.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因为人们有时会不一致地输入信息，所以您首先必须将所有内容转换为等效的情况，但这是您自己要解决的问题。
- en: Remember, in this line we have `people`, which is the name of some kind of object,
    and `Where`, an extension method, followed by a Lambda. Next, we use `OrderByDescending`,
    which you can select that from the list of methods, to order values, such as a
    person's salary, in descending order.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在这一行中，我们有`people`，这是某种对象的名称，以及`Where`，一个扩展方法，后跟一个Lambda。接下来，我们使用`OrderByDescending`，您可以从方法列表中选择它，以按降序排序值，例如人的工资。
- en: 'So, the purpose of this line is to choose each person whose name ends with
    `n`, and then order the results by salary. This yields an `IEnumerable` object,
    and now you can step through it, of course, and say the following in the next
    line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，此行的目的是选择每个名字以`n`结尾的人，然后按工资排序结果。这将产生一个`IEnumerable`对象，现在您当然可以逐步进行，并在下一行中说以下内容：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, to print it all, enter the following between a set of curly braces below
    this line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了打印所有内容，请在此行下面的一组花括号之间输入以下内容：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we put the `Name` variable first, and the `Salary` variable formatted
    as Currency.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先放置了`Name`变量，然后是格式化为货币的`Salary`变量。
- en: Running the program
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'This is the heart of our program. Crank it up in your browser. Click on the
    Show People button, and the results are displayed, as shown in *Figure 10.5.2*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们程序的核心。在浏览器中启动它。单击“显示人员”按钮，结果将显示如*图10.5.2*所示：
- en: '![](img/a9234352-3698-4fc1-90db-62a81ef03f17.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9234352-3698-4fc1-90db-62a81ef03f17.png)'
- en: 'Figure 10.5.2: The results of running the program'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5.2：运行程序的结果
- en: So, Joan makes $87,656.00 and John makes $76,877.00\. They were selected because
    both of them have names ending in a lowercase **n**, as you can see, and then
    it's sorted by salary in descending order. So, it's working as expected. As you
    can see, you can also define custom types, such as the one within curly braces
    below `public class Person`, using LINQ. It is very powerful and works well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，琼赚了$87,656.00，约翰赚了$76,877.00。他们被选中是因为他们的名字都以小写字母**n**结尾，正如您所看到的，然后按工资降序排序。所以，它的运行结果符合预期。正如您所看到的，您还可以使用LINQ定义自定义类型，比如在`public
    class Person`下面的花括号中。它非常强大并且运行良好。
- en: Chapter review
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节复习
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了复习，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about using LINQ with custom types. You set up a
    database, made a custom type using LINQ, set up an array of people, and queried
    the array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何将LINQ与自定义类型一起使用。您设置了一个数据库，使用LINQ创建了一个自定义类型，设置了一个人员数组，并对数组进行了查询。
- en: In the next chapter, you will learn how to write queries using query syntax.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用查询语法编写查询。
