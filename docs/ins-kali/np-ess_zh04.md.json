["```py\n    \u00a0\u00a0\u00a0\u00a0  In [1]: import numpy as np\n    \u00a0\u00a0\u00a0\u00a0  In [2]: x = np.arange(8, dtype = np.int8)\n    \u00a0\u00a0\u00a0\u00a0  In [3]: x\n    \u00a0\u00a0\u00a0\u00a0  Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7])\n    \u00a0\u00a0\u00a0\u00a0  In [4]: x.strides\n    \u00a0\u00a0\u00a0 \u00a0 Out[4]: (1,)\n    \u00a0\u00a0\u00a0\u00a0  In [5]: str(x.data)\n    \u00a0\u00a0\u00a0 \u00a0 Out[5]: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07'\n    ```", "```py\n          In [6]: x.shape = 2, 4 \n          In [7]: x \n          Out[7]: \n          array([[0, 1, 2, 3], \n                 [4, 5, 6, 7]], dtype=int8) \n          In [8]: x.strides \n          Out[8]: (4, 1) \n          In [9]: str(x.data) \n          Out[9]: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07' \n          In [10]: x.shape = 1,4,2 \n          In [11]: x.strides \n          Out[11]: (8, 2, 1) \n          In [12]: str(x.data) \n          Out[12]: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07' \n\n    ```", "```py\n          In [13]: x = np.ones((10000,)) \n          In [14]: y = np.ones((10000 * 100, ))[::100] \n          In [15]: x.shape, y.shape \n          Out[15]: ((10000,), (10000,)) \n          In [16]: x == y \n          Out[16]: array([ True,  True,  True, ...,  True,  True,\n          True], dtype=bool) \n\n    ```", "```py\n          In [17]: x.flags \n          Out[17]: C_CONTIGUOUS : True \n                   F_CONTIGUOUS : True \n                   OWNDATA : True \n                   WRITEABLE : True \n                   ALIGNED : True \n                   UPDATEIFCOPY : False \n\n          In [18]: y.flags \n          Out[18]: C_CONTIGUOUS : False \n                   F_CONTIGUOUS : False \n                   OWNDATA : False \n                   WRITEABLE : True \n                   ALIGNED : True \n                   UPDATEIFCOPY : False \n\n    ```", "```py\n          In [19]: x.strides, y.strides \n          Out[19]: ((8,), (800,)) \n\n    ```", "```py\n          In [18]: %timeit x.sum() \n          100000 loops, best of 3: 13.8 \u00b5s per loop \n          In [19]: %timeit y.sum() \n          10000 loops, best of 3: 25.9 \u00b5s per loop \n\n    ```", "```py\nIn [20]: x = np.empty((2,), dtype = ('i4,f4,a10')) \nIn [21]: x[:] = [(1,0.5, 'NumPy'), (10,-0.5, 'Essential')] \nIn [22]: x \nOut[22]: \narray([(1, 0.5, 'NumPy'), (10, -0.5, 'Essential')], \n      dtype=[('f0', '<i4'), ('f1', '<f4'), ('f2', 'S10')]) \n\n```", "```py\nIn [23]: x[0] \nOut[23]: (1, 0.5, 'NumPy') \nIn [24]: x['f2'] \nOut[24]: \narray(['NumPy', 'Essential'], dtype='|S10') \n\n```", "```py\nIn [25]: y = x['f0'] \nIn [26]: y \nOut[26]: array([ 1, 10]) \nIn [27]: y[:] = y * 10 \nIn [28]: y \nOut[28]: array([ 10, 100]) \nIn [29]: y[:] = y + 0.5 \nIn [30]: y \nOut[30]: array([ 10, 100]) \nIn [31]: x \nOut[31]: \narray([(10, 0.5, 'NumPy'), (100, -0.5, 'Essential')], \n      dtype=[('f0', '<i4'), ('f1', '<f4'), ('f2', 'S10')]) \n\n```", "```py\nIn [32]: z = np.ones((2,), dtype = ('3i4, (2,3)f4')) \nIn [32]: z \nOut[32]: \narray([([1, 1, 1], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]), \n       ([1, 1, 1], [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0]])], \n      dtype=[('f0', '<i4', (3,)), ('f1', '<f4', (2, 3))]) \n\n```", "```py\nIn [33]: x.dtype.names \nOut[33]: ('f0', 'f1', 'f2') \nIn [34]: x.dtype.names = ('id', 'value', 'note') \nIn [35]: x \nOut[35]: \narray([(10, 0.5, 'NumPy'), (100, -0.5, 'Essential')], \n      dtype=[('id', '<i4'), ('value', '<f4'), ('note', 'S10')]) \n\n```", "```py\nIn [36]: list_ex = np.zeros((2,), dtype = [('id', 'i4'), ('value', 'f4', (2,))]) \nIn [37]: list_ex \nOut[37]: \narray([(0, [0.0, 0.0]), (0, [0.0, 0.0])], \n      dtype=[('id', '<i4'), ('value', '<f4', (2,))]) \nIn [38]: dict_ex = np.zeros((2,), dtype = {'names':['id', 'value'], 'formats':['i4', '2f4']}) \nIn [39]: dict_ex \nOut[39]: \narray([(0, [0.0, 0.0]), (0, [0.0, 0.0])], \n      dtype=[('id', '<i4'), ('value', '<f4', (2,))]) \n\n```", "```py\nIn [40]: x[['id', 'note']] \nOut[40]: \narray([(10, 'NumPy'), (100, 'Essential')], \n      dtype=[('id', '<i4'), ('note', 'S10')]) \n\n```", "```py\nIn [41]: x = np.datetime64('2015-04-01') \nIn [42]: y = np.datetime64('2015-04') \nIn [43]: x.dtype, y.dtype \nOut[43]: (dtype('<M8[D]'), dtype('<M8[M]')) \n\n```", "```py\nIn [44]: y = np.datetime64('2015-04', 'D') \nIn [45]: y, y.dtype \nOut[45]: (numpy.datetime64('2015-04-01'), dtype('<M8[D]')) \nIn [46]: x = np.arange('2015-01', '2015-04', dtype = 'datetime64[M]') \nIn [47]: x \nOut[47]: array(['2015-01', '2015-02', '2015-03'], dtype='datetime64[M]') \n\n```", "```py\nIn [48]: y = np.datetime64('2015-04-01', 's') \nTypeError: Cannot parse \"2015-04-01\" as unit 's' using casting rule 'same_kind' \n\n```", "```py\nIn [49]: x \nOut[49]: array(['2015-01', '2015-02', '2015-03'], dtype='datetime64[M]') \nIn [50]: y = np.datetime64('2015-01-01') \nIn [51]: x - y \nOut[51]: array([ 0, 31, 59], dtype='timedelta64[D]') \n\n```", "```py\nIn [52]: np.datetime64('2015') + np.timedelta64(12, 'M') \nOut[52]: numpy.datetime64('2016-01') \nIn [53]: np.timedelta64(1, 'W') / np.timedelta64(1, 'D') \nOut[53]: 7.0 \n\n```", "```py\nIn [54]: x \nOut[54]: array(['2015-01', '2015-02', '2015-03'], dtype='datetime64[M]') \nIn [55]: x.tolist() \nOut[55]: \n[datetime.date(2015, 1, 1), \n datetime.date(2015, 2, 1), \n datetime.date(2015, 3, 1)] \nIn [56]: [element.item() for element in x] \nOut[56]: \n[datetime.date(2015, 1, 1), \n datetime.date(2015, 2, 1), \n datetime.date(2015, 3, 1)] \n\n```", "```py\nIn [57]: id = np.arange(1000) \nIn [58]: value = np.random.random(1000) \nIn [59]: day = np.random.random_integers(0, 365, 1000) * np.timedelta64(1,'D') \nIn [60]: date = np.datetime64('2014-01-01') + day \nIn [61]: rec_array = np.core.records.fromarrays([id, value, date], names='id, value, date', formats='i4, f4, a10') \nIn [62]: rec_array[:5] \nOut[62]: \nrec.array([(0, 0.07019801437854767, '2014-07-10'), \n       (1, 0.4863224923610687, '2014-12-03'), \n       (2, 0.9525277614593506, '2014-03-11'), \n       (3, 0.39706873893737793, '2014-01-02'), \n       (4, 0.8536589741706848, '2014-09-14')], \n      dtype=[('id', '<i4'), ('value', '<f4'), ('date', 'S10')]) \n\n```", "```py\nIn [63]: np.savetxt('./record.csv', rec_array, fmt='%i,%.4f,%s') \n\n```", "```py\nIn [64]: read_array = np.genfromtxt('./record.csv', dtype='i4,f4,a10', delimiter=',', skip_header=0) \nIn [65]: read_array[:5] \nOut[65]: \narray([(0, 0.07020000368356705, '2014-07-10'), \n       (1, 0.486299991607666, '2014-12-03'), \n       (2, 0.9524999856948853, '2014-03-11'), \n       (3, 0.3971000015735626, '2014-01-02'), \n       (4, 0.8536999821662903, '2014-09-14')], \n      dtype=[('f0', '<i4'), ('f1', '<f4'), ('f2', 'S10')]) \n\n```", "```py\nIn [66]: read_array.dtype.names = ('id', 'value', 'date') \n\n```", "```py\nIn [68]: mask = read_array['value'] >= 0.75 \nIn [69]: from numpy.lib.recfunctions import append_fields \nIn [70]: read_array = append_fields(read_array, 'mask', data=mask, dtypes='i1') \nIn [71]: read_array[:5] \nOut[71]: \nmasked_array(data = [(0, 0.07020000368356705, '2014-07-10', 0) \n (1, 0.486299991607666, '2014-12-03', 0)\n\n (2, 0.9524999856948853, '2014-03-11', 1) \n (3, 0.3971000015735626, '2014-01-02', 0) \ndtype = [('id', '<i4'), ('value', '<f4'), ('date', 'S10'), ('mask','i1')]) \n\n```"]