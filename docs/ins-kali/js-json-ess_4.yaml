- en: Chapter 4. AJAX Calls with JSON Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用JSON数据进行AJAX调用
- en: JSON is considered today to be the most popular data interchange format. In
    the previous chapter we saw an example using a JSON feed as a data store. In this
    chapter let's make the data a little more dynamic. HTML, client-side JavaScript,
    and CSS provide the structural, behavioral, and presentational aspects respectively.
    Dynamic web development is all about data transfer between two parties, the client
    and the server. We use programs such as a web server, a database, and a server-side
    programming language to fetch and store dynamic data. Let's take a look at the
    process behind the scenes that facilitates successful operations on the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JSON被认为是当今最流行的数据交换格式。在上一章中，我们看到了一个使用JSON feed作为数据存储的示例。在本章中，让我们使数据更加动态。HTML、客户端JavaScript和CSS分别提供结构、行为和表现方面。动态网页开发涉及两方之间的数据传输，即客户端和服务器。我们使用诸如Web服务器、数据库和服务器端编程语言等程序来获取和存储动态数据。让我们来看看在幕后促成数据成功操作的过程。
- en: When a user opens up a web browser and types `http://www.packtpub.com/`, the
    browser makes a request to the **Internet Service Provider** (**ISP**) to perform
    a reverse lookup of the IP address by providing the domain name. Once the IP address
    is retrieved, the request is then forwarded to the machine that owns the IP address.
    At that point, there is a web server that is waiting to consume the request; the
    web server could be one of the top web servers, such as Apache, IIS, Tomcat, and
    Nginx. The web server receives the request and looks at the headers that are part
    of the HTTP request; those headers pass the information about the request that
    was made to the web server. Once the web server parses those headers, it routes
    the request over to a server-side programming application that is responsible
    for handling this request. The application could be written in PHP, C#/ASP.NET,
    Java/JSP, and so on. This responsible server-side language takes the request,
    understands it, and performs the necessary business logic to complete the request.
    A few examples of such HTTP requests are loading a web page and clicking the **Contact
    us** link on a website. There can be complex HTTP requests too, where the data
    has to be validated, cleansed, and/or retrieved from a data storage application
    such as a database, a file server, or a caching server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户打开Web浏览器并输入`http://www.packtpub.com/`时，浏览器会向**互联网服务提供商**（**ISP**）发出请求，通过提供域名执行IP地址的反向查找。一旦检索到IP地址，请求就会被转发到拥有该IP地址的机器。此时，有一个Web服务器在等待处理请求；Web服务器可以是顶级Web服务器之一，如Apache、IIS、Tomcat和Nginx。Web服务器接收请求并查看HTTP请求的一部分——头部；这些头部传递了有关向Web服务器发出的请求的信息。一旦Web服务器解析了这些头部，它就会将请求路由到负责处理此请求的服务器端编程应用程序。该应用程序可以是用PHP、C#/ASP.NET、Java/JSP等编写的。这个负责的服务器端语言接受请求，理解它，并执行必要的业务逻辑来完成请求。这样的HTTP请求的一些例子包括加载网页和在网站上点击**联系我们**链接。也可能存在复杂的HTTP请求，其中数据必须经过验证、清洗和/或从数据存储应用程序（如数据库、文件服务器或缓存服务器）中检索。
- en: These HTTP requests can be made in two ways—synchronously and asynchronously.
    A synchronous request is a blocking request, where everything has to be done in
    an orderly fashion, one step after another, and where the following step has to
    wait until the previous one has completed execution. Let's assume that there are
    four independent components on a web page when the page is loaded; if one component
    takes a long time during execution, the rest of the page is going to wait for
    it until its execution is complete. If execution fails, the page load fails too.
    One other example is when there is a poll and a ratings component on the web page;
    if the user chooses to answer the poll and give a rating to fulfill these requests,
    two requests have to be sent out one after the other if we go with a synchronous
    requesting mechanism.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些HTTP请求可以通过两种方式进行——同步和异步。同步请求是一种阻塞请求，所有事情都必须按顺序进行，一步接一步，后续步骤必须等待前一步完成执行。假设网页加载时有四个独立的组件；如果其中一个组件执行时间很长，页面的其余部分将等待直到其执行完成。如果执行失败，页面加载也会失败。另一个例子是网页上有一个投票和评分组件；如果用户选择回答投票并给出评分来满足这些请求，如果我们采用同步请求机制，就必须依次发送两个请求。
- en: To tackle the issue of synchronous requests, the development community has gradually
    made progress in the field of asynchronous HTTP requests. The first product to
    come out that allowed asynchronous requests were the IFrame tags, introduced by
    Microsoft; they used IFrames via Internet Explorer to load content asynchronously.
    After IFrame, next in line to revolutionize the Internet was the XML HTTP ActiveX
    control. In later years, all the browsers adopted this control under the new name
    XMLHTTPRequest JavaScript object, which is part of the XMLHTTPRequest API. The
    XMLHTTPRequest API is used to make an HTTP (or HTTPS) call to a web server. It
    can be used to make both synchronous and asynchronous calls. Asynchronous requests
    allow developers to divide web pages into multiple components independent of each
    other, thereby saving a lot of memory by sending data on demand.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决同步请求的问题，开发社区逐渐在异步HTTP请求领域取得了进展。第一个允许异步请求的产品是由微软推出的IFrame标签；它们通过Internet
    Explorer使用IFrames来异步加载内容。在IFrame之后，接下来改变互联网的是XML HTTP ActiveX控件。后来，所有浏览器都在新名称XMLHTTPRequest
    JavaScript对象下采用了这个控件，它是XMLHTTPRequest API的一部分。XMLHTTPRequest API用于向Web服务器发出HTTP（或HTTPS）调用。它可以用于进行同步和异步调用。异步请求允许开发人员将网页分成彼此独立的多个组件，从而通过按需发送数据节省大量内存。
- en: '*Jesse James Garrett* named this phenomenon "AJAX". In **AJAX** (**Asynchronous
    JavaScript and XML**), web requests are made via JavaScript and the data interchange
    originally happened in XML. The "X" in AJAX was originally considered to be XML,
    but today it can be any data interchange format, such as XML, JSON, text file,
    or even HTML. The data format being used for the data transfer has to be mentioned
    in the MIME type headers. In [Chapter 2](ch02.xhtml "Chapter 2. Getting Started
    with JSON"), *Getting Started with JSON*, we have already highlighted why JSON
    is the preferred data interchange format. Let us take a quick look at what we
    would need to make our first AJAX call with JSON data.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*杰西·詹姆斯·加勒特*将这种现象称为“AJAX”。在**AJAX**（**异步JavaScript和XML**）中，通过JavaScript进行网络请求，数据交换最初是在XML中进行的。
    AJAX中的“X”最初被认为是XML，但今天它可以是任何数据交换格式，例如XML，JSON，文本文件，甚至HTML。用于数据传输的数据格式必须在MIME类型标头中提到。在[第2章](ch02.xhtml
    "第2章。使用JSON入门")中，*使用JSON入门*，我们已经强调了为什么JSON是首选的数据交换格式。让我们快速看一下我们需要使用JSON数据进行第一个AJAX调用的内容。'
- en: Essentially, web developers can use the principles of AJAX to fetch data on
    demand to make websites more responsive and interactive; it is very important
    to understand what generates that demand. The trigger for such a demand for data
    is commonly an event that occurs on the web page. An **event** can be described
    as a reaction to an action that was performed, for example, ringing a bell produces
    a vibration inside the bell that generates the sound. Here, ringing a bell is
    the event, while the sound that is produced is the reaction to the event. There
    can be multiple events on a web page; a few such events are clicking a button,
    submitting a form, hovering over a link, and choosing an option from a drop-down,
    all of which are very common events. We have to come up with a way in which they
    are programmatically handled when these events occur.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Web开发人员可以使用AJAX的原则按需获取数据，使网站更具响应性和交互性；了解是什么产生了这种需求非常重要。这种数据需求的触发器通常是在网页上发生的事件。**事件**可以被描述为对执行的操作的反应，例如，敲响铃会在铃内产生振动，产生声音。在这里，敲响铃是事件，而产生的声音是对事件的反应。网页上可能有多个事件；一些常见的事件包括点击按钮，提交表单，悬停在链接上，以及从下拉菜单中选择选项。当这些事件发生时，我们必须想出一种以编程方式处理它们的方法。
- en: Requirements for AJAX
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AJAX的要求
- en: AJAX is an asynchronous two-way communication between the browser that is considered
    to be the client, and a live web server via HTTP (or HTTPS). We can run a live
    server locally, such as Apache or IIS on Windows or Apache on Linux and Mac OS.
    I will take us through setting up the Apache web server in a Linux environment
    and simultaneously also explain how to use the Microsoft Visual Studio development
    environment to build web applications. For this AJAX course, let us pick PHP and
    MySQL to be our main server-side language and database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX是浏览器（被视为客户端）与通过HTTP（或HTTPS）与实时网络服务器之间的异步双向通信。我们可以在本地运行实时服务器，例如在Windows上运行Apache或IIS，或在Linux和Mac
    OS上运行Apache。我将带领我们在Linux环境中设置Apache Web服务器，并同时解释如何使用Microsoft Visual Studio开发环境构建Web应用程序。对于这门AJAX课程，让我们选择PHP和MySQL作为我们的主要服务器端语言和数据库。
- en: In this chapter, I will take you through two setups; the first will be setting
    up Apache and PHP to develop server-side programs on a Linux machine, while the
    second one will be running a .NET-powered web application on Windows. Microsoft's
    .NET Framework requires the libraries in the .NET Framework and Visual Studio
    IDE to be installed. I will assume that you have performed both the steps; we
    will now set up a web application in ASP.NET, powered by C#.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将带您完成两个设置；第一个是在Linux机器上设置Apache和PHP以开发服务器端程序，而第二个是在Windows上运行由.NET驱动的Web应用程序。微软的.NET框架需要安装.NET框架和Visual
    Studio IDE中的库。我假设您已经执行了这两个步骤；现在我们将在ASP.NET中设置一个由C#驱动的Web应用程序。
- en: Linux is an open source operating system and has been the chosen OS by the development
    fraternity for non-Microsoft programming and scripting languages, such as PHP,
    Python, Java, and Ruby. The development environment when using PHP, Perl, or Python
    on a Linux operating system is often referred to as a LAMP environment. **LAMP**
    stands for **Linux**, **Apache**, **MySQL**, and **PHP** (or **Python** or **Perl**).
    The `tasksel` package allows us to install Apache, MySQL, and PHP in a single
    shot. Let's take a quick look at the necessary steps for installing the LAMP stack.
    On your Linux operating system, open up the terminal and type `sudo apt-get install
    tasksel`. The operating system, based on your user privileges, might prompt you
    for a password; after entering the password, hit *Enter*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Linux是一个开源操作系统，已经成为非微软编程和脚本语言开发界的选择操作系统，例如PHP，Python，Java和Ruby。在Linux操作系统上使用PHP，Perl或Python时的开发环境通常被称为LAMP环境。**LAMP**代表**Linux**，**Apache**，**MySQL**和**PHP**（或**Python**或**Perl**）。`tasksel`软件包允许我们一次性安装Apache，MySQL和PHP。让我们快速看一下安装LAMP堆栈所需的步骤。在您的Linux操作系统上，打开终端并键入`sudo
    apt-get install tasksel`。根据您的用户权限，操作系统可能会提示您输入密码；输入密码后，按*Enter*。
- en: '![Requirements for AJAX](img/6034OS_04_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_01.jpg)'
- en: 'As we are installing a package on the operating system, the OS will display
    the package and dependency information for the package it is installing and will
    prompt the user to check whether this is the targeted package. Hit the *Y* key
    on your keyboard to say "yes"; the operating system will then go to the repositories
    and fetch the package to be installed. Upon installation, we can use `tasksel`
    to install the LAMP server. To do this, we will have to invoke the `tasksel` program
    from the terminal by using the command `sudo tasksel`, as shown in the screenshot
    that follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在在操作系统上安装软件包，因此操作系统将显示正在安装的软件包和软件包的依赖信息，并提示用户检查是否为目标软件包。在键盘上按*Y*键表示“是”；然后操作系统将转到存储库并获取要安装的软件包。安装后，我们可以使用`tasksel`来安装LAMP服务器。为此，我们将不得不通过使用命令`sudo
    tasksel`从终端调用`tasksel`程序，如下面的屏幕截图所示：
- en: '![Requirements for AJAX](img/6034OS_04_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_02.jpg)'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`sudo` is required to perform installation operations as normal users might
    not have the required privileges.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo`是必需的，以执行安装操作，因为普通用户可能没有所需的权限。'
- en: Upon invoking `tasksel` we will get a list of installable packages, such as
    the LAMP server, Tomcat server, and DNS server; we will be choosing the LAMP server.
    To navigate within the `tasksel` shell, we will use our arrows keys to move up
    and down, and the Space bar to select the program that has to be installed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`tasksel`后，我们将获得可安装的软件包列表，例如LAMP服务器、Tomcat服务器和DNS服务器；我们将选择LAMP服务器。在`tasksel`
    shell内导航，我们将使用箭头键上下移动，并使用空格键选择要安装的程序。
- en: '![Requirements for AJAX](img/6034OS_04_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_03.jpg)'
- en: After selecting **LAMP server**, go ahead and press *Enter* to confirm the installation.
    Once the installation is complete, we are all set to write our first server-side
    program to generate and host a live JSON feed. To do this, we will navigate to
    the document root folder, which will be the only folder available to Apache. The
    document root folder is a folder where the files pertaining to a website or a
    web application are placed. Only web servers such as Apache, Tomcat, IIS, and
    Nginx are given access to these folders as unverified and anonymous users could
    get access to these files via the website. The default document root folder for
    Apache in Linux is the `/var/www` folder. To navigate to `/var/www`, we will use
    the `cd` command, which refers to change directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**LAMP服务器**后，继续按*Enter*确认安装。安装完成后，我们就可以编写我们的第一个服务器端程序来生成和托管实时JSON数据。为此，我们将导航到文档根文件夹，这将是Apache可用的唯一文件夹。文档根文件夹是放置网站或Web应用程序文件的文件夹。只有像Apache、Tomcat、IIS和Nginx这样的Web服务器才能访问这些文件夹，因为未经验证的匿名用户可能会通过网站访问这些文件。Linux中Apache的默认文档根文件夹是`/var/www`文件夹。要导航到`/var/www`，我们将使用`cd`命令，该命令用于更改目录。
- en: '![Requirements for AJAX](img/6034OS_04_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_04.jpg)'
- en: Once we are in the `www` folder, we can start creating our server-side scripts.
    Apache already provides us with a test HTML page (in that folder) to test if Apache
    is up and running; it is named as the `index.html`. To perform this activity,
    we should open up a browser in the Linux operating system and access `http://localhost/index.html`;
    we should then get a success message.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在`www`文件夹中，我们可以开始创建我们的服务器端脚本。Apache已经为我们提供了一个测试HTML页面（在该文件夹中）来测试Apache是否正在运行；它被命名为`index.html`。要执行此操作，我们应该在Linux操作系统中打开浏览器并访问`http://localhost/index.html`；然后我们应该收到一个成功的消息。
- en: '![Requirements for AJAX](img/6034OS_04_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_05.jpg)'
- en: Once we receive this message we are assured that our Apache web server is up
    and running. Now let's set up a similar architecture using a Windows operating
    system and C# or ASP.NET.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收到这条消息，我们就可以确保我们的Apache Web服务器正在运行。现在让我们使用Windows操作系统和C#或ASP.NET设置类似的架构。
- en: '![Requirements for AJAX](img/6034OS_04_20.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_20.jpg)'
- en: Microsoft Visual Studio is the chosen environment to develop server-side programs
    or web applications using ASP.NET and C#. Navigate to **File** | **New** | **Web
    Site**. Visual Studio comes along with its own development server for running
    a website during development.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio是开发使用ASP.NET和C#的服务器端程序或Web应用程序的选择环境。导航到**文件** | **新建**
    | **网站**。Visual Studio自带自己的开发服务器，用于在开发过程中运行网站。
- en: '![Requirements for AJAX](img/6034OS_04_21.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_21.jpg)'
- en: Once we click on the **New Web Site** option, we will have to choose what type
    of a website we are building; since this is just a dummy website, let us keep
    it simple by choosing **ASP.NET Web Site** and then clicking on **OK**. This is
    shown in the preceding screenshot.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击**新建网站**选项，我们将不得不选择我们正在构建的网站类型；由于这只是一个虚拟网站，让我们简单地选择**ASP.NET网站**，然后点击**确定**。如前面的屏幕截图所示。
- en: '![Requirements for AJAX](img/6034OS_04_22.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_22.jpg)'
- en: The default ASP.NET website comes with some basic HTML that can be used for
    testing; go ahead and click on the green button beside **Debug**. This is used
    to run the website; keep in mind that C# or ASP.NET programs have to be compiled
    before they can be run, unlike PHP or Python, which are interpreted languages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的ASP.NET网站带有一些基本的HTML，可用于测试；继续点击**调试**旁边的绿色按钮。这用于运行网站；请记住，C#或ASP.NET程序必须在运行之前进行编译，而不像PHP或Python那样是解释性语言。
- en: '![Requirements for AJAX](img/6034OS_04_23.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![AJAX的要求](img/6034OS_04_23.jpg)'
- en: And here is our Hello World website application that is powered by C#/ASP.NET.
    Web applications can be built in any language, and JSON can be used as the data
    interchange language between web applications powered by any server-side stack.
    Let's take this knowledge of server-side programming and move forward on our journey
    so that we can implement this in powerful web applications.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的Hello World网站应用程序，由C#/ASP.NET提供支持。Web应用程序可以用任何语言构建，并且JSON可以用作任何服务器端堆栈支持的Web应用程序之间的数据交换语言。让我们利用这些服务器端编程知识，继续我们的旅程，以便我们可以在强大的Web应用程序中实现这一点。
- en: Hosting JSON
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管JSON
- en: 'In this section, we will be creating a PHP script that will allow us to send
    a JSON feedback to the user upon a successful request. Let''s take a look at the
    `index.php` file, which accomplishes this task:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个PHP脚本，允许我们在成功请求时向用户发送JSON反馈。让我们看看完成这个任务的`index.php`文件：
- en: '![Hosting JSON](img/6034OS_04_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![托管JSON](img/6034OS_04_06.jpg)'
- en: In this PHP script, we have created a basic `students` array and are generating
    the JSON feed for that array. The `students` array contains basic student information,
    such as the first name, last name, student ID, and the classes that the student
    has enrolled.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个PHP脚本中，我们创建了一个基本的`students`数组，并为该数组生成了JSON数据源。`students`数组包含基本的学生信息，如名字、姓氏、学生ID以及学生已注册的课程。
- en: 'This file has to be placed in the `www` folder, and it should be on the same
    level as the default `index.html` file that comes with the LAMP installation.
    Refer to the folder structure in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件必须放在`www`文件夹中，并且应该与LAMP安装附带的默认`index.html`文件在同一级别。请参考以下截图中的文件夹结构：
- en: '![Hosting JSON](img/6034OS_04_08.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![托管JSON](img/6034OS_04_08.jpg)'
- en: Now that our `index.php` is in the document root folder, we can load this file
    using our web server. To access this file via our Apache web server, navigate
    to `http://localhost/index.php`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`index.php`在文档根文件夹中，我们可以通过我们的Web服务器加载这个文件。要通过我们的Apache Web服务器访问这个文件，请导航到`http://localhost/index.php`。
- en: '![Hosting JSON](img/6034OS_04_07.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![托管JSON](img/6034OS_04_07.jpg)'
- en: As shown in the preceding screenshot, when the file is run using the Apache
    web server, the server takes the request, parses the PHP code, and outputs the
    JSON feed that delivers the student data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，当使用Apache web服务器运行文件时，服务器接受请求，解析PHP代码，并输出提供学生数据的JSON数据源。
- en: Making your first AJAX call
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行第一个AJAX调用
- en: 'Now that we have an active JSON data feed, it is about time to make our first
    AJAX call. We will look at two approaches of making an AJAX call; these approaches
    come from different periods in time. The first approach will use basic JavaScript
    so that we understand what happens behind the scenes when an AJAX call is made.
    Once we understand the concept of AJAX, we will use a popular JavaScript library
    to make the same AJAX call but with simpler code. Let''s take a look at our first
    approach using basic JavaScript:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个活跃的JSON数据源，是时候进行我们的第一个AJAX调用了。我们将看两种不同时期的AJAX调用方法。第一种方法将使用基本的JavaScript，以便我们了解在进行AJAX调用时发生了什么。一旦我们理解了AJAX的概念，我们将使用流行的JavaScript库来进行相同的AJAX调用，但代码更简单。让我们看看我们使用基本JavaScript的第一种方法：
- en: '![Making your first AJAX call](img/6034OS_04_09.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一个AJAX调用](img/6034OS_04_09.jpg)'
- en: We will begin with our basic `index.html` file that loads an external JavaScript
    file. This JavaScript file performs the AJAX call to fetch the `students` JSON
    feed.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从我们的基本`index.html`文件开始，它加载一个外部JavaScript文件。这个JavaScript文件执行AJAX调用来获取`students`的JSON数据源。
- en: 'Let us take a look at `index.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`index.js`：
- en: '![Making your first AJAX call](img/6034OS_04_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一个AJAX调用](img/6034OS_04_10.jpg)'
- en: 'This is the original way in which an AJAX call is made to a live web server;
    let''s break this script into pieces and investigate it piece by piece:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是向实时网络服务器发出AJAX调用的原始方式；让我们将这个脚本分解成片段，并逐个调查它。
- en: '![Making your first AJAX call](img/6034OS_04_11.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一个AJAX调用](img/6034OS_04_11.jpg)'
- en: 'In the preceding snippet we are creating an instance of the `XMLHttpRequest`
    object. The `XMLHttpRequest` object lets us make asynchronous calls to the server,
    thus allowing us to treat sections in the page as separate components. It comes
    with powerful properties such as `readystate`, `response`, `responseText`, and
    methods such as `open`, `onuploadprogress`, `onreadystatechange`, and `send`.
    Let''s look at how we can use the `request` object that we have created to open
    an AJAX request:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们创建了一个`XMLHttpRequest`对象的实例。`XMLHttpRequest`对象让我们可以对服务器进行异步调用，从而允许我们将页面中的部分视为单独的组件。它具有强大的属性，如`readystate`、`response`、`responseText`，以及方法，如`open`、`onuploadprogress`、`onreadystatechange`和`send`。让我们看看如何使用我们创建的`request`对象来打开一个AJAX请求：
- en: '![Making your first AJAX call](img/6034OS_04_12.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一个AJAX调用](img/6034OS_04_12.jpg)'
- en: '`XMLHttpRequest`, by default, opens up an asynchronous request; here we will
    specify the method in which the live feed has to be contacted. As we will not
    be passing any data, we choose the HTTP `GET` method to send the data over to
    our live web server. While working on an asynchronous request, we should never
    have a blocking script; we can deal with this by setting up callbacks. A **callback**
    is a set of scripts that will be waiting for a response and will be fired on receiving
    that response. This behavior facilitates non-blocking code.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest`默认打开一个异步请求；在这里，我们将指定联系实时数据源的方法。由于我们不会传递任何数据，我们选择使用HTTP `GET`方法将数据发送到我们的实时网络服务器。在处理异步请求时，我们不应该有阻塞脚本；我们可以通过设置回调来处理这个问题。**回调**是一组脚本，它们将等待响应，并在接收到响应时触发。这种行为有助于非阻塞代码。'
- en: 'We are setting up a callback and are assigning the callback to a method called
    `onreadystatechange`, as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在设置一个回调，并将回调分配给一个名为`onreadystatechange`的方法，如下截图所示：
- en: '![Making your first AJAX call](img/6034OS_04_13.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一个AJAX调用](img/6034OS_04_13.jpg)'
- en: 'The placeholder method, `onreadystatechange`, looks for a property in the request
    object called `readyState`; whenever the value of `readyState` changes, the `onreadystatechange`
    event is fired. The `readyState` property keeps track of the progress of the `XMLHttpRequest`
    that is made. In the preceding screenshot, we can see the callback has a conditional
    statement that is verifying that the value of `readyState` is `4`, meaning that
    the server has received the `XMLHttpRequest` that was made by the client and a
    response is ready. Let''s take a quick look at the available values for `readyState`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符方法`onreadystatechange`查找请求对象中名为`readyState`的属性；每当`readyState`的值发生变化时，就会触发`onreadystatechange`事件。`readyState`属性跟踪所做的`XMLHttpRequest`的进度。在前面的屏幕截图中，我们可以看到回调具有一个条件语句，用于验证`readyState`的值是否为`4`，这意味着服务器已经接收到客户端发出的`XMLHttpRequest`，并且准备好响应。让我们快速看一下`readyState`的可用值：
- en: '| `readyState` | Description |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '`readyState` | 描述'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0` | The request hasn''t been initialized |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '`0` | 请求尚未初始化'
- en: '| `1` | Server connection established |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '`1` | 服务器连接已建立'
- en: '| `2` | The server has received the request |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '`2` | 服务器已接收请求'
- en: '| `3` | The server is processing the request |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '`3` | 服务器正在处理请求'
- en: '| `4` | The request has been processed and the response is ready |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '`4` | 请求已处理，响应准备就绪'
- en: In the earlier screenshot, we are also looking for another property called the
    `status`; this is the HTTP status code that is coming back from the server. Status
    code `200` represents a successful transaction, while status code `400` is a bad
    request and `404` means Page Not Found. Other common status codes are `401`, which
    means the user has requested a page that is available only for authorized users,
    and `500`, which is an Internal Server Error.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的屏幕截图中，我们还在寻找另一个名为`status`的属性；这是从服务器返回的HTTP状态码。状态码`200`表示成功的交易，而状态码`400`是一个错误的请求，`404`表示页面未找到。其他常见的状态码是`401`，表示用户请求了一个只有授权用户才能使用的页面，以及`500`，表示内部服务器错误。
- en: 'We have created the `XMLHttpRequest` object and opened the connection; we have
    also added a callback to perform an event when the request is successful. One
    thing to keep in mind is that the request hasn''t yet been made; we are only laying
    the foundation work for the request. We will use the `send()` method to send the
    request over to the server, as shown:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`XMLHttpRequest`对象并打开了连接；我们还添加了一个回调来在请求成功时执行事件。需要记住的一件事是，请求尚未发出；我们只是为请求奠定了基础工作。我们将使用`send()`方法将请求发送到服务器，如下所示：
- en: '![Making your first AJAX call](img/6034OS_04_14.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一次AJAX调用](img/6034OS_04_14.jpg)'
- en: 'In our `onreadystateChange` callback, we are logging the response that is sent
    by the web server to the console window. Let''s take a quick look at what the
    response looks like:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`onreadystateChange`回调中，我们将发送的响应记录到控制台窗口中。让我们快速看一下响应是什么样子的：
- en: '![Making your first AJAX call](img/6034OS_04_15.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一次AJAX调用](img/6034OS_04_15.jpg)'
- en: One way to confirm that this is an AJAX request is by looking at the first request
    in the console, where an asynchronous call is made to the `index.php` file and
    the response comes back with an HTTP status code of `200 OK`. Since the HTTP `status`
    value is `200`, the execution of the callback will be successful and it will output
    the `students` JSON feed onto the console window.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 确认这是一个AJAX请求的一种方法是查看控制台中的第一个请求，在那里会对`index.php`文件进行异步调用，响应返回的HTTP状态码为`200 OK`。由于HTTP
    `status`值为`200`，回调的执行将是成功的，并且将`students` JSON feed输出到控制台窗口。
- en: With the advent of powerful JavaScript libraries such as jQuery, Scriptaculous,
    Dojo, and ExtJS, we have moved away from the archaic process of making an AJAX
    request. One thing to keep in mind is, that, though we do not use this process,
    the libraries will still be using this process under the hood; so having an idea
    of how the `XMLHttpRequest` object works is very important. jQuery is a very popular
    JavaScript library; it has a growing community with a lot of developers. As the
    jQuery library is distributed under the MIT License, it allows users to utilize
    this library free of cost.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随着强大的JavaScript库的出现，如jQuery、Scriptaculous、Dojo和ExtJS，我们已经摆脱了制作AJAX请求的古老过程。需要记住的一件事是，尽管我们不使用这个过程，但这些库仍然会在幕后使用这个过程；因此了解`XMLHttpRequest`对象的工作原理非常重要。jQuery是一个非常受欢迎的JavaScript库；它有一个庞大的开发者社区。由于jQuery库是根据MIT许可证分发的，因此允许用户免费使用该库。
- en: 'jQuery is a very simple, powerful library with fantastic documentation and
    a strong user community that makes a developer''s life very easy. Let''s take
    a quick detour and write our customary Hello World program in jQuery:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个非常简单、强大的库，具有出色的文档和强大的用户社区，使开发者的生活变得非常容易。让我们快速绕个弯，用jQuery编写我们的传统的Hello
    World程序：
- en: '![Making your first AJAX call](img/6034OS_04_16.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![进行第一次AJAX调用](img/6034OS_04_16.jpg)'
- en: In the preceding screenshot, we are importing the jQuery library into our HTML
    file, and in the second set of script tags, we are using the special character
    `$` or jQuery. Similar to the concept of the namespace in object-oriented programming,
    the `jQuery` functionality is namespaced to the special character `$` by default.
    jQuery has been a champion of unobtrusive JavaScript. After `$`, we call the `document`
    object and check whether the it has loaded onto the page; then we assign a callback
    function that will be triggered on a complete load of the document. "`document`"
    here the `document` object that holds the HTML element structure. The output for
    this program is going be the `Hello World!` string that will be outputted to our
    console window.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们将jQuery库导入到我们的HTML文件中，在第二组脚本标签中，我们使用特殊字符`$`或jQuery。类似于面向对象编程中的命名空间的概念，`jQuery`功能默认命名空间为特殊字符`$`。jQuery一直是不显眼的JavaScript的倡导者。在`$`之后，我们调用`document`对象，并检查它是否已加载到页面上；然后我们分配一个回调函数，该函数将在文档完全加载时触发。这里的“`document`”是保存HTML元素结构的`document`对象。这个程序的输出将是`Hello
    World!`字符串，它将被输出到我们的控制台窗口中。
- en: Parsing JSON data
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析JSON数据
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When the button is clicked on, we are using the method `getJSON` to make an
    AJAX call to the live web server to retrieve the JSON data. Since we are getting
    an array of students, we will pass the retrieved data into jQuerys' `each` iterator
    to retrieve one element at a time. Inside the iterator, we are building a string,
    which is appended as a list item to the `"feedContainerList"` unordered list element.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被点击时，我们使用`getJSON`方法向实时网络服务器发出AJAX调用，以检索JSON数据。由于我们得到了一个学生数组，我们将传入检索到的数据到jQuery的`each`迭代器中，以便逐个检索元素。在迭代器内部，我们正在构建一个字符串，该字符串作为列表项附加到`"feedContainerList"`无序列表元素上。
- en: '![Parsing JSON data](img/6034OS_04_18.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![解析JSON数据](img/6034OS_04_18.jpg)'
- en: On loading of the document, as we are only binding our events to the HTML elements,
    there will not be any behavioral changes unless we click on the button. Once we
    click on the button, the unordered list will be populated.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档加载时，由于我们只将事件绑定到HTML元素，除非我们点击按钮，否则不会有任何行为变化。一旦我们点击按钮，无序列表将被填充。
- en: '![Parsing JSON data](img/6034OS_04_19.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![解析JSON数据](img/6034OS_04_19.jpg)'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Since the rise in popularity of the `XMLHttpRequest` object, it has become a
    boon to web developers. In this chapter we began with the basics, such as what
    we need to make an AJAX request. Once we analyzed the basic stack of software
    that we need for AJAX, we moved ahead and understood the basic concept of how
    an `XMLHttpRequest` object is responsible for making an asynchronous request.
    Then we took a leap into one of the most powerful JavaScript Libraries, jQuery,
    to perform AJAX operations using jQuery. This is just the beginning of our journey
    into AJAX; in the next chapter we will be looking at more complex cases where
    AJAX is used, the cases where cross-domain asynchronous requests fail, and how
    JSON savesthe day by allowing us to make cross-domain asynchronous calls.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 自`XMLHttpRequest`对象的流行以来，它已成为Web开发人员的福音。在本章中，我们从基础知识开始，比如我们需要进行AJAX请求。一旦我们分析了AJAX所需的基本软件堆栈，我们就会继续了解`XMLHttpRequest`对象如何负责发出异步请求的基本概念。然后，我们跨入了最强大的JavaScript库之一，jQuery，使用jQuery执行AJAX操作。这只是我们进入AJAX之旅的开始；在下一章中，我们将看到更复杂的情况，其中使用AJAX的情况，跨域异步请求失败的情况，以及JSON通过允许我们进行跨域异步调用来挽救一天。
