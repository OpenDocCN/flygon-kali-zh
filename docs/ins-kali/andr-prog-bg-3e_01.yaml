- en: '*Chapter 1*: Beginning Android and Java'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：开始Android和Java'
- en: Welcome to *Android Programming for Beginners Third Edition*. In this first
    chapter, we won't waste any time getting started with developing Android apps.
    We will look at what is so great about Android, what exactly Android and Java
    are, how they work and complement each other, and what that means to us as future
    developers. Moving quickly on, we will set up the required software so we can
    build and deploy a simple first app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎使用《初学者的Android编程第三版》。在第一章中，我们将立即开始开发Android应用程序。我们将看看Android有什么好处，Android和Java究竟是什么，它们如何工作和相互补充，以及作为未来开发者，这对我们意味着什么。随后，我们将快速设置所需的软件，以便我们可以构建和部署一个简单的第一个应用程序。
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is my aim to keep this book up to date. Please check the following web page
    for any discussion and tips on any changes to Android Studio since the book was
    first printed: [http://gamecodeschool.com/books/android-programming-for-beginners-3rd-edition#android-studio-updates](http://gamecodeschool.com/books/android-programming-for-beginners-3rd-edition#android-studio-updates).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目标是使本书保持最新。请查看以下网页，了解自书印刷以来Android Studio的任何更改讨论和提示：[http://gamecodeschool.com/books/android-programming-for-beginners-3rd-edition#android-studio-updates](http://gamecodeschool.com/books/android-programming-for-beginners-3rd-edition#android-studio-updates)。
- en: 'By the end of this chapter, we will have done the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将完成以下内容：
- en: Discovered what is new in this third edition
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了第三版的新内容
- en: Learned how Java and Android work together
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了Java和Android如何相互配合
- en: Set up our development environment – Android Studio – which takes care of all
    the components involved in building the Android apps that we will learn about
    next
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的开发环境——Android Studio——它负责构建我们将在接下来学习的Android应用程序所涉及的所有组件
- en: Learned about the **Java Development Kit** (**JDK**) and the Android **Application
    Programming Interface** (**API**) and how we use them through Android Studio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了**Java开发工具包**（**JDK**）和Android **应用程序编程接口**（**API**）以及我们如何通过Android Studio使用它们
- en: Built our very first Android app
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建我们的第一个Android应用程序
- en: Deployed the app on an Android emulator
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android模拟器上部署应用程序
- en: Run our app on an Android emulator and a real device
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android模拟器和真实设备上运行我们的应用程序
- en: That's a lot to get through, so let's get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多内容，让我们开始吧。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The following are the official technical requirements for Android development
    with Android Studio and its related tools. However, these are the absolute bare
    minimum. Please see the *Setting up Android Studio* section for further details.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Android Studio及其相关工具进行Android开发的官方技术要求。但这些是绝对的最低要求。请参阅“设置Android Studio”部分以获取更多详细信息。
- en: 'The requirements for Windows are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的要求如下：
- en: Microsoft® Windows® 7/8/10 (64-bit)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft® Windows® 7/8/10（64位）
- en: 4 GB RAM as a minimum; 8 GB RAM recommended
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要4GB的RAM；建议8GB的RAM
- en: 2 GB of available disk space as a minimum; 4 GB recommended (500 MB for the
    **Integrated Development Environment** (**IDE**) + 1.5 GB for the Android **Software
    Development Kit** (**SDK**) and emulator system image)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要2GB的可用磁盘空间；建议4GB（500MB用于**集成开发环境**（**IDE**）+ 1.5GB用于Android **软件开发工具包**（**SDK**）和模拟器系统镜像）
- en: 1,280 x 800 minimum screen resolution
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低屏幕分辨率为1,280 x 800
- en: 'The requirements for Mac are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Mac的要求如下：
- en: Mac® OS X® 10.10 (Yosemite) or higher, up to 10.14 (macOS Mojave)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac® OS X® 10.10（Yosemite）或更高版本，最高为10.14（macOS Mojave）
- en: 4 GB RAM as a minimum; 8 GB RAM recommended
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要4GB的RAM；建议8GB的RAM
- en: 2 GB of available disk space as a minimum; 4 GB recommended (500 MB for the
    IDE + 1.5 GB for the Android SDK and emulator system image)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要2GB的可用磁盘空间；建议4GB（500MB用于IDE + 1.5GB用于Android SDK和模拟器系统镜像）
- en: 1,280 x 800 minimum screen resolution
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低屏幕分辨率为1,280 x 800
- en: 'The requirements for Linux are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的要求如下：
- en: GNOME or KDE desktop
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNOME或KDE桌面
- en: Tested on gLinux based on Debian
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基于Debian的gLinux上进行了测试
- en: 64-bit distribution capable of running 32-bit applications
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 64位发行版，能够运行32位应用程序
- en: GNU C Library (glibc) 2.19 or later
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GNU C库（glibc）2.19或更高版本
- en: 4 GB RAM as a minimum; 8 GB RAM recommended
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要4GB的RAM；建议8GB的RAM
- en: 2 GB of available disk space as a minimum; 4 GB recommended (500 MB for the
    IDE + 1.5 GB for the Android SDK and emulator system image)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要2GB的可用磁盘空间；建议4GB（500MB用于IDE + 1.5GB用于Android SDK和模拟器系统镜像）
- en: 1,280 x 800 minimum screen resolution
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低屏幕分辨率为1,280 x 800
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2001](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2001).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件[https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2001](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2001)。
- en: What's new in the third edition?
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三版有什么新内容？
- en: The second edition saw huge amounts of additional topics compared to the first
    edition. Unfortunately, there are only so many pages that can fit in a paperback
    book. Therefore, this edition focuses on improving the way that the Java, Android,
    and app development concepts are taught. We have rethought the way that topics
    are explained and made it more visual than before. In addition, I have managed
    to squeeze in about a dozen new mini topics. These are either Java fundamentals
    such as variable types not covered in earlier editions, new Android Studio features
    such as the profiler, or classic programming concepts such as method recursion
    and the live debugging of our code. Hopefully, this third edition will therefore
    make your Android and Java journeys smoother and more complete.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与第一版相比，第二版增加了大量额外的主题。不幸的是，平装书只能容纳有限的页数。因此，这一版着重于改进Java、Android和应用开发概念的教学方式。我们重新思考了主题的解释方式，并使其比以前更加直观。此外，我设法加入了大约十几个新的迷你主题。这些内容要么是Java基础知识，比如在早期版本中没有涵盖的变量类型，要么是新的Android
    Studio功能，比如分析器，或者是经典的编程概念，比如方法递归和我们代码的实时调试。希望这第三版能让您的Android和Java之旅更加顺利和完整。
- en: Why Java and Android?
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Java和Android？
- en: When Android first arrived in 2008, it was a bit drab compared to the much more
    stylish iOS on the Apple iPhone/iPad. But quite quickly, through diverse handset
    offerings that struck a chord with both the practical price-conscious as well
    as the fashion-conscious and tech-savvy, the Android user numbers exploded.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当Android于2008年首次出现时，与苹果iPhone/iPad上更时尚的iOS相比，它显得有些沉闷。但通过迅速推出各种各样的手机产品，既符合实际价格敏感的人群，又符合时尚和科技精通的人群，Android用户数量迅速增长。
- en: For many, myself included, developing for Android is the most rewarding pastime
    and business bar none.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多人来说，包括我自己在内，为Android开发是最有意义的业余爱好和事业。
- en: Quickly putting together a prototype of an idea, refining it, and then deciding
    to run with it and wire it up into a fully fledged app is such an exciting and
    rewarding process. Any programming can be fun, and I have been programming all
    my life, but creating for Android is somehow extraordinarily rewarding.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 快速地将一个想法的原型组装起来，完善它，然后决定运行并将其连接成一个完全成熟的应用程序，这是一个如此令人兴奋和有意义的过程。任何编程都可以很有趣，我一生都在编程，但为Android创作某种程度上是非常有意义的。
- en: Defining exactly why this is the case is quite difficult. Perhaps it is the
    fact that the platform is free and open source. You can distribute your apps without
    needing the permission of a big, controlling corporation – nobody can stop you.
    At the same time, you have well-established, corporate-controlled mass markets
    such as Amazon Appstore and Google Play.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确切地定义这种情况为什么会发生是相当困难的。也许是因为这个平台是免费和开源的。您可以在不需要大型控制性公司的许可的情况下分发您的应用程序 - 没有人可以阻止您。与此同时，您还可以在亚马逊应用商店和Google
    Play等成熟的、由公司控制的大众市场上分发应用程序。
- en: More likely, the reason why developing for Android gives such a good feeling
    is the nature of the devices themselves. They are deeply personal. You can develop
    apps that interact with people's lives – educate, entertain, tell a story, and
    so on – and it is there in their pockets ready to go, in the home, in the workplace,
    or on holiday.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更有可能的是，为Android开发带来如此良好的感觉的原因是设备本身的性质。它们是非常个人化的。您可以开发与人们生活互动的应用程序 - 教育、娱乐、讲故事等等
    - 它就在他们的口袋里准备好了，在家里、工作场所或度假时。
- en: You can certainly build something bigger for the desktop. But knowing that thousands
    (or millions) of people are carrying your work in their pockets and sharing it
    with friends gives more than just a buzz.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以为桌面构建更大的东西。但知道成千上万（甚至数百万）的人携带着您的作品并与朋友分享，这带来的不仅仅是一种兴奋。
- en: In fact, developing for Android is considered highly skillful and the most successful
    developers are hugely admired, even revered.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，为Android开发被认为是非常有技巧的，最成功的开发人员受到极大的钦佩，甚至崇敬。
- en: If all this fluffy and spiritual stuff doesn't mean anything to you, then that's
    fine too; developing for Android can make you a living or even make you wealthy.
    With the continued growth of device ownership, the ongoing increase in CPU and
    GPU power, and the non-stop evolution of the Android operating system itself,
    the need for professional app developers is only going to grow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有这些空洞和精神上的东西对您毫无意义，那也没关系；为Android开发可以让您谋生，甚至让您致富。随着设备拥有量的持续增长，CPU和GPU性能的不断提升，以及Android操作系统本身的不断演进，对专业应用程序开发人员的需求只会增长。
- en: In short, the best Android developers – and, more importantly, the Android developers
    with the best ideas and most determination – are in greater demand than ever.
    Nobody knows who these future Android app developers are and they might not even
    have written their first line of Java yet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，最优秀的Android开发人员 - 更重要的是，拥有最好的想法和最大决心的Android开发人员 - 比以往任何时候都更受欢迎。没有人知道这些未来的Android应用程序开发人员是谁，他们甚至可能还没有写过他们的第一行Java代码。
- en: So, why isn't everybody an Android developer? Obviously, not everybody will
    share my enthusiasm for the thrill of creating software that can help people make
    their lives better, but I am guessing that because you are reading this, you might!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么不是每个人都是Android开发人员呢？显然，并不是每个人都会像我一样热衷于创造能够帮助人们改善生活的软件，但我猜测因为您正在阅读这篇文章，您可能会！
- en: The beginner's first stumbling block
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初学者的第一个绊脚石
- en: Unfortunately, for those that do share my enthusiasm, there is a kind of glass
    wall on the path of progress that frustrates many aspiring Android developers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，对于那些和我一样热衷的人来说，进步的道路上存在一种玻璃墙，这让许多有抱负的Android开发人员感到沮丧。
- en: Android uses Java to make apps. Every Android book, even those aimed at so-called
    beginners, assumes readers have at least an intermediate level of Java knowledge,
    and most need an advanced level. So, good-to-excellent Java knowledge *was* a
    prerequisite for learning Android.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Android使用Java来制作应用程序。每本Android书籍，甚至那些针对所谓初学者的书籍，都假设读者至少具有中级水平的Java知识，大多数需要高级水平的知识。因此，良好到优秀的Java知识*曾经*是学习Android的先决条件。
- en: Unfortunately, learning Java in a completely different context to Android can
    sometimes be a little dull and much of what you learn is not directly transferable
    to the world of Android anyway. You can see why beginners to Android and Java
    are often put off from starting.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在完全不同的上下文中学习Java有时可能会有点乏味，而您学到的大部分知识在Android世界中并不直接可转移。您可以理解为什么初学者对Android和Java经常望而却步。
- en: But it doesn't need to be like this. In this book, I have carefully placed all
    the Java topics you would learn in a thick and weighty Java-only beginner's tome
    and reworked them into four multi-chapter apps and more than a dozen quick mini-apps,
    starting from a simple memo app and then progressing to a cool drawing app, a
    database app, and a playable game (available online).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但不一定非得这样。在这本书中，我已经把你在厚重的、专门针对初学者的Java书中学到的所有Java主题都精心安排成了四个多章节的应用程序和十几个快速的迷你应用程序，从一个简单的备忘录应用程序开始，然后逐渐发展成一个酷炫的绘图应用程序、一个数据库应用程序和一个可玩的游戏（可在线使用）。
- en: If you want to become a professional Android developer or just want to have
    more fun when learning Java and Android, this book will help.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想成为专业的Android开发人员，或者只是想在学习Java和Android时更有乐趣，这本书会帮助您。
- en: How Java and Android work together
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java和Android如何协同工作
- en: Before we start our Android quest, we need to understand how Android and Java
    work together. Android is a complex system, but you do not need to understand
    it in depth to be able to make amazing apps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始我们的Android探索之前，我们需要了解Android和Java如何一起工作。Android是一个复杂的系统，但你不需要深入了解它才能制作出令人惊艳的应用程序。
- en: After we write a program in Java for Android, we click a button and our code
    is transformed into another form, the form that is understood by Android. This
    other form is called **bytecode** and the transformation process is called **compiling**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为Android用Java编写程序之后，我们点击一个按钮，我们的代码就会被转换成另一种形式，这种形式是Android可以理解的形式。这种形式被称为**字节码**，转换过程被称为**编译**。
- en: Then, when the user installs our application, the bytecode is translated by
    another process known as the **Android Runtime** (**ART**) into machine code.
    This is the fastest possible execution format. So, if you have ever heard people
    saying that you shouldn't use Java because it is slow, then you know they are
    mistaken. Java is fast for the programmer to program and is then, upon installation,
    changed to machine code that is fast for the device. What could be better?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当用户安装我们的应用程序时，字节码会被另一个进程（称为**Android Runtime**（**ART**））转换为机器码。这是最快的执行格式。因此，如果你曾听说过不应该使用Java因为它很慢，那么你知道他们是错误的。Java对程序员来说编程速度很快，然后在安装时转换为设备快速的机器码。还有什么比这更好的呢？
- en: Not only does ART enable super-fast execution of our apps, but it also lowers
    battery use. Furthermore, the ART system doesn't just create the machine code
    and then sit back and relax; it provides hooks into our application that enhance
    memory management while the application is running. This makes our app run more
    efficiently and, as we will see in [*Chapter 12*](B16773_12_ePub_RK.xhtml#_idTextAnchor218),
    *The Stack, the Heap, and the Garbage Collector*, easier to write by handling
    critical aspects of memory management.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ART不仅能够使我们的应用程序执行速度超快，而且还能降低电池使用。此外，ART系统不仅仅创建机器码然后坐下来放松；它提供了钩子进入我们的应用程序，增强了应用程序在运行时的内存管理。这使得我们的应用程序运行更高效，并且，正如我们将在[*第12章*](B16773_12_ePub_RK.xhtml#_idTextAnchor218)中看到的那样，*堆栈、堆和垃圾收集器*，更容易通过处理内存管理的关键方面来编写。
- en: The ART itself is a software system written in another language that runs on
    a specially adapted version of the Linux operating system. So, what the user sees
    of Android is itself just an app running on yet another operating system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ART本身是用另一种语言编写的软件系统，运行在一个特别适应的Linux操作系统的版本上。因此，用户所看到的Android本身只是在另一个操作系统上运行的应用程序。
- en: Android is a collection of sub-systems. The typical Android user doesn't see
    the Linux operating system or know anything of the presence of ART but they are
    both there making things tick.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个子系统的集合。典型的Android用户看不到Linux操作系统，也不知道ART的存在，但它们都在那里运转。
- en: 'The purpose of the Linux part of the system is to hide the complexity and diversity
    of the hardware and software that Android runs on, but at the same time exposing
    all its useful features. This exposing of features works in two ways:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的Linux部分的目的是隐藏Android运行的硬件和软件的复杂性和多样性，但同时暴露出所有有用的功能。这种功能的暴露有两种方式：
- en: First, the system itself must have access to the hardware, which it does.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，系统本身必须能够访问硬件，它确实可以。
- en: Second, this access must be programmer-friendly and easy to use – and this is
    because of the Android **API**.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，这种访问必须是对程序员友好且易于使用的——这是因为Android **API**。
- en: Let's continue by talking more about the Android API.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续谈谈Android API。
- en: Note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'This book is about learning Java and building Android apps from scratch, so
    I won''t go any deeper than I have into how Android works. If, however, you want
    to know more, then the Wikipedia page is a good reference: [https://en.wikipedia.org/wiki/Android_(operating_system](https://en.wikipedia.org/wiki/Android_(operating_system)).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是关于学习Java并从头开始构建Android应用程序的，所以我不会深入探讨Android的工作原理。然而，如果你想了解更多，那么维基百科页面是一个很好的参考：[https://en.wikipedia.org/wiki/Android_(operating_system](https://en.wikipedia.org/wiki/Android_(operating_system))。
- en: Understanding the Android API
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Android API
- en: 'The Android API is code that makes it easy to do exceptional things. A simple
    analogy could be drawn with a machine, perhaps a car. When you press on the accelerator,
    a whole bunch of things happen under the hood. We don''t need to understand combustion
    or fuel pumps because some smart engineer has made an **interface** for us – in
    this case, a mechanical interface: the accelerator pedal.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Android API是一种使得做出非凡事情变得容易的代码。可以用一个简单的类比来理解，比如一台机器，也许是一辆汽车。当你踩油门时，引擎盖下会发生一大堆事情。我们不需要理解燃烧或燃油泵，因为一些聪明的工程师为我们制作了一个**接口**——在这种情况下，是一个机械接口：油门踏板。
- en: 'For example, the following line of Java code probably looks a little intimidating
    at this stage in the book, but it serves as a good example of how the Android
    API helps us:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面这行Java代码在本书的这个阶段可能看起来有点吓人，但它是Android API如何帮助我们的一个很好的例子：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you learn that this single line of code searches for available satellites
    in space, and then communicates with them in their orbits around the Earth, then
    retrieves your precise latitude and longitude on the surface of the planet, it
    becomes easy to begin to glimpse the power and depth of the Android API in conjunction
    with the compiled bytecode and ART.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你了解到这一行代码在太空搜索可用的卫星，然后与它们在地球轨道上通信，然后在地球表面检索你的精确纬度和经度，那么开始逐渐领略Android API与编译的字节码和ART的强大和深度就变得容易了。
- en: For sure, that code does look a little challenging – even mind-boggling at this
    stage of the book – but imagine trying to talk to a satellite some other way!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这段代码看起来有点具有挑战性——甚至在本书的这个阶段都是如此——但想象一下用其他方式与卫星交流试试看！
- en: The Android API has a whole bunch of Java code that has already been written
    for us to use as we like.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Android API已经为我们编写了一大堆可以随意使用的Java代码。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are many different estimates of the number of lines of code that have
    gone into Android. Some estimates are as low as 1 million, while some are as high
    as 20 million. What might seem surprising is that despite this vast amount of
    code, Android is known in programming circles for being "lightweight."
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Android的代码行数有很多不同的估计。一些估计只有100万行，而一些估计高达2000万行。令人惊讶的是，尽管有如此庞大的代码量，Android在编程圈中以“轻量级”而闻名。
- en: 'The question we must ask and the one this book tries to answer is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须问的问题，也是本书试图回答的问题是：
- en: How do we use all this code to do cool stuff? Or to frame the question to fit
    the earlier analogy, how do we find and manipulate the pedals, steering wheel,
    and sunroof of the Android API?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何使用所有这些代码来做酷炫的事情？或者为了符合之前的类比，我们如何找到并操作Android API的踏板、方向盘和天窗？
- en: The answer to this question is the Java programming language and the fact that
    Java was designed to help programmers handle complexity. Let's talk a bit about
    Java and **Object-Oriented Programming** (**OOP**).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案是Java编程语言以及Java旨在帮助程序员处理复杂性的事实。让我们稍微谈一下Java和面向对象编程（OOP）。
- en: Java is object-oriented
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java是面向对象的
- en: 'Java is a programming language that has been around a lot longer than Android.
    It is an **object-oriented** language. This means it uses the concept of reusable
    programming objects. If this sounds like technical jargon, another analogy will
    help. Java enables us and others (such as the Android development team) to write
    Java code that can be structured based on real-world things, and here is the important
    part: it can be **reused**.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种编程语言，比Android存在的时间长得多。它是一种面向对象的语言。这意味着它使用可重用的编程对象的概念。如果这听起来像技术术语，另一个类比会有所帮助。Java使我们和其他人（比如Android开发团队）能够编写可以基于现实世界事物构建的Java代码，这是重要的部分：它可以被重复使用。
- en: 'So, using the car analogy, we could ask the question: if a manufacturer makes
    more than one car in a day, do they redesign every part for each and every car?'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用汽车类比，我们可以问一个问题：如果一个制造商一天制造多辆汽车，他们是否为每辆汽车重新设计每个零件？
- en: The answer, of course, is no. They get highly skilled engineers to develop exactly
    the right components, honed, refined, and improved over years. Then, that same
    component is reused again and again as well as being occasionally improved.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，答案是否定的。他们让高技能的工程师开发完全正确的组件，经过多年的磨练、改进和提高。然后，同样的组件被反复重复使用，偶尔进行改进。
- en: If you are going to be fussy about my analogy, then you can point out that each
    of the car's components still has to be built from the raw materials using real-life
    engineers or robots and so on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对我的类比挑剔，那么你可以指出每个汽车的组件仍然必须使用现实生活中的工程师或机器人等从原材料中构建出来。
- en: This is true. What software engineers do when they write their code is build
    a blueprint for an object. We then create an object from their blueprint using
    Java code and once we have that object, we can configure it, use it, combine it
    with other objects, and more besides.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是真的。软件工程师在编写代码时所做的是构建对象的蓝图。然后我们使用Java代码从他们的蓝图创建对象，一旦我们有了那个对象，我们可以配置它，使用它，与其他对象组合，以及更多。
- en: Furthermore, as well as this, we can design blueprints ourselves and make objects
    from them as well. The compiler then transforms (manufactures) our bespoke creation
    into bytecode. Hey, presto! We have an Android app.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除此之外，我们也可以设计自己的蓝图并从中制作对象。然后编译器将我们的定制创建转换（制造）成字节码。嘿，变戏法！我们有了一个Android应用程序。
- en: In Java, a blueprint is called a **class**. When a class is transformed into
    a real working "thing," we call it an **object** or an **instance** of the class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，蓝图被称为类。当一个类被转化为一个真正工作的“东西”时，我们称之为类的对象或实例。
- en: Objects concisely
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对象简洁
- en: We could go on making analogies all day long. All we care about at this point,
    however, is the following.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续进行类比。然而，我们在这一点上关心的是以下内容。
- en: 'Java is a language that allows us to write code once that can then be used
    repeatedly. This is very useful because it saves us time and allows us to use
    other people''s code to perform tasks we might otherwise not have the time or
    knowledge to write ourselves. Most of the time, we do not even need to see this
    code or even know how it works! One last analogy: we just need to know how to
    use the code just as we need to learn how to drive a car.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种允许我们编写一次代码然后重复使用的语言。这非常有用，因为它节省了我们的时间，并允许我们使用其他人的代码来执行我们可能没有时间或知识来编写的任务。大多数时候，我们甚至不需要看到这些代码，甚至不知道它是如何工作的！最后一个类比：我们只需要知道如何使用代码，就像我们需要学会如何驾驶汽车一样。
- en: So, some smart software engineer up at Android HQ writes a desperately complex
    Java program that can talk to satellites. They then consider how they can make
    this code useful to all the Android programmers who want to make amazing apps
    that use the user's location to do cool things. One of the things they will do
    is make features such as getting the device's location in the world a simple one-line
    task.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Android总部的一位聪明的软件工程师编写了一个非常复杂的Java程序，可以与卫星通信。然后，他们考虑如何使这段代码对所有想要开发使用用户位置做酷炫事情的Android程序员有用。其中一件事情是使获取设备在世界上的位置成为一个简单的一行任务。
- en: So, the one line of code we saw previously sets in action many more lines of
    code that we don't see and don't need to see. This is an example of using somebody
    else's code to make our code infinitely simpler.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们之前看到的一行代码引发了更多我们看不到、也不需要看到的代码。这是一个使用别人的代码使我们的代码变得无限简单的例子。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: If the fact that you don't have to see all the code is a disappointment to you,
    then I understand how you feel. Some of us, when we learn about something, want
    to learn every intricate detail. If you are like this, then be reassured that
    the best place to start learning how the Android API works internally is to use
    it as the API programmers intended. Throughout the book, I will regularly point
    out further learning opportunities where you can find out about the inner workings
    of the Android API. Also, we will be writing classes that are themselves reusable,
    kind of like our own API, except that our classes will focus on what we want our
    app to do.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不必看到所有的代码这个事实让你失望，那么我理解你的感受。当我们学习某样东西时，有些人希望了解每一个细节。如果你也是这样的话，那么请放心，学习 Android
    API 内部工作原理的最佳起点是按照 API 程序员的意图来使用它。在整本书中，我会定期指出更多学习机会，让你了解 Android API 的内部工作原理。此外，我们将编写一些可重复使用的类，有点像我们自己的
    API，只是我们的类将专注于我们想要我们的应用程序做的事情。
- en: Welcome to the world of **object-oriented programming** – **OOP**. I will constantly
    refer to OOP in every chapter and there is the big reveal of how it works in [*Chapter
    10*](B16773_10_ePub_RK.xhtml#_idTextAnchor187), *Object-Oriented Programming*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到**面向对象编程**（**OOP**）的世界。我会在每一章中不断提到 OOP，而在 [*第10章*](B16773_10_ePub_RK.xhtml#_idTextAnchor187)
    中有关于它如何工作的大揭示，*面向对象编程*。
- en: Run that by me again – what exactly is Android?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 再告诉我一遍 - Android 究竟是什么？
- en: To get things done on Android, we write Java code of our own, which also uses
    the Java code of the Android API. This is then compiled into bytecode and translated
    by ART when installed by the user into machine code, which in turn has connections
    to an underlying operating system called Linux, which handles the complex and
    extremely diverse range of hardware that are the different Android devices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上，我们编写自己的 Java 代码，同时也使用 Android API 的 Java 代码。然后，这些代码被编译成字节码，并在用户安装时由
    ART 转换成机器码，而机器码又与一个名为 Linux 的底层操作系统连接，处理着不同 Android 设备的复杂和极其多样的硬件。
- en: The manufacturers of the Android devices and the individual hardware components
    obviously know this too and they write advanced software called **drivers**, which
    ensure that their hardware (CPU, GPU, GPS receivers, memory chips, hardware interfaces,
    and so on) can run on the underlying Linux operating system.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Android 设备的制造商和个别硬件组件显然也知道这一点，他们编写了称为**驱动程序**的高级软件，确保他们的硬件（CPU、GPU、GPS 接收器、存储芯片、硬件接口等）可以在底层
    Linux 操作系统上运行。
- en: The bytecode (along with some other resources) is placed in a bundle of files
    called an **Android Application Package** (**APK**) and this is what ART needs
    to run to prepare our app for the user.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 字节码（以及其他一些资源）被放在一个称为**Android 应用程序包**（**APK**）的文件包中，这是 ART 运行以准备我们的应用程序给用户使用所需的东西。
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is not necessary to remember the details of the steps that our code goes
    through when it interacts with the hardware. It is enough just to understand that
    our Java code goes through some automated processes to become the apps that we
    will publish to the Google Play Store.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要记住我们的代码与硬件交互时经历的步骤的细节。只需要理解我们的 Java 代码经历了一些自动化过程，成为我们将发布到 Google Play 商店的应用程序。
- en: The next question is "where exactly does all this Java coding and compiling
    into bytecode along with APK packaging take place?". Let's look at the development
    environment we will be using.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的问题是“所有这些 Java 编码和编译成字节码以及 APK 打包到底发生在哪里？”。让我们看看我们将要使用的开发环境。
- en: Android Studio
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android Studio
- en: 'A **development environment** is a term that refers to having everything you
    need to develop, set up, and be ready to go in one place. We need two things to
    get started:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发环境** 是一个术语，指的是在一个地方拥有你开发所需的一切并准备就绪。我们需要两样东西才能开始：'
- en: We talked a fair bit about compiling our Java code, as well as other people's
    Java code, into bytecode that in turn will be converted into executable machine
    code on the user's Android device. To use Java code, we need some free software
    called the **JDK**. The JDK includes even more of other people's code, which is
    separate from the Android API.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们谈到了编译我们的 Java 代码，以及其他人的 Java 代码，将其转换成用户 Android 设备上可执行的机器码。为了使用 Java 代码，我们需要一些名为**JDK**的免费软件。JDK
    包括了更多其他人的代码，这些代码与 Android API 是分开的。
- en: There is an entire range of tools needed to develop for Android, and we also
    need the Android API, of course. This whole suite of requirements is collectively
    known as the Android **SDK**. Fortunately, downloading and installing a single
    application will give us these things all bundled together. The application is
    called **Android Studio**.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发 Android 需要一整套工具，当然还需要 Android API。这整套要求被统称为 Android **SDK**。幸运的是，下载并安装一个应用程序就能将这些东西捆绑在一起。这个应用程序叫做
    **Android Studio**。
- en: Android Studio is an **IDE** that will take care of all the complexities of
    compiling our code and linking with the JDK and the Android API. Once we have
    installed Android Studio, we can do everything we need inside this single application
    and put to the back of our minds many of the complexities we have been discussing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是一个**集成开发环境**，将处理编译我们的代码和与 JDK 和 Android API 进行链接的所有复杂性。一旦安装了
    Android Studio，我们可以在这个单一应用程序中完成所有需要的工作，并将我们讨论过的许多复杂性放在脑后。
- en: Tip
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Over time, these complexities will become second nature. It is not necessary
    to master them to make further progress.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，这些复杂性将变得自然而然。不需要掌握它们才能取得进一步的进展。
- en: So, we had better get hands-on with Android Studio.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们最好开始使用 Android Studio。
- en: Setting up Android Studio
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Android Studio
- en: 'Setting up Android Studio is quite straightforward if a little lengthy. Grab
    some refreshments and get started with the following steps. This tutorial will
    install Android Studio to the D drive. I chose the D drive because it is a big
    install, around 12 GB once we have everything downloaded, and the D drive on many
    PCs is typically larger and has more free space than the C drive. Should you wish
    to install on the C drive (or any other drive), then these instructions should
    be easy to adjust:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Android Studio相当简单，尽管有点冗长。拿些点心，然后按照以下步骤开始。本教程将把Android Studio安装到D驱动器上。我选择了D驱动器，因为这是一个大型安装，一旦我们下载了所有内容，大约有12GB，而且许多PC上的D驱动器通常比C驱动器更大，有更多的可用空间。如果您希望安装在C驱动器（或任何其他驱动器），那么这些说明应该很容易调整：
- en: Visit [https://developer.android.com/studio](https://developer.android.com/studio)
    and click the **Download Android Studio** button. This will begin the download
    of the latest stable version for Windows. You will need to accept the terms and
    conditions to commence the download.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://developer.android.com/studio](https://developer.android.com/studio)并单击**下载Android
    Studio**按钮。这将开始下载最新稳定版本的Windows。您需要接受条款和条件才能开始下载。
- en: While you are waiting for the download to complete, create a new folder on the
    root of your D drive called `Android`. Inside the `Android` folder, create another
    new folder called `Android Studio`. Navigate back to the `Android` folder and
    create another new folder named `Projects`. This is where we will keep all the
    project files we will create throughout the book. Create another new folder called
    `Sdk`, which is where we will ask the installer program to install the Android
    SDK. You should now have a `D:\Android` folder that looks like this:![Figure 1.1
    – D:\Android folder
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在等待下载完成时，在D驱动器的根目录上创建一个名为`Android`的新文件夹。在`Android`文件夹内，创建另一个名为`Android Studio`的新文件夹。返回到`Android`文件夹并创建另一个名为`Projects`的新文件夹。这是我们将在整本书中创建的所有项目文件的存放位置。创建另一个名为`Sdk`的新文件夹，这是我们将要求安装程序安装Android
    SDK的位置。现在您应该有一个看起来像这样的`D:\Android`文件夹：![图1.1 – D:\Android文件夹
- en: '](img/Figure_1.01_B16773.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.01_B16773.jpg)'
- en: Figure 1.1 – D:\Android folder
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – D:\Android文件夹
- en: Once the download is complete, find the downloaded file. It will be called `android-studio-ide....`.
    Double-left-click the file to run it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，找到已下载的文件。它将被称为`android-studio-ide....`。双击该文件运行它。
- en: You will be asked to grant the installer program administrative privileges,
    then you can left-click **Next** to begin the installation. On the **Choose Components**
    screen, make sure that both the **Android Studio** and **Android Virtual Device**
    options are checked, and then left-click the **Next** button:![Figure 1.2 – Choose
    Components screen
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求授予安装程序管理权限，然后您可以单击**下一步**开始安装。在**选择组件**屏幕上，确保**Android Studio**和**Android虚拟设备**选项都被选中，然后单击**下一步**按钮：![图1.2
    – 选择组件屏幕
- en: '](img/Figure_1.02_B16773.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.02_B16773.jpg)'
- en: Figure 1.2 – Choose Components screen
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 选择组件屏幕
- en: On the `D:\Android\Android Studio`, and then left-click the **OK** button:![Figure
    1.3 – Configuration Settings window](img/Figure_1.03_B16773.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`D:\Android\Android Studio`，然后左键单击**确定**按钮：![图1.3 – 配置设置窗口](img/Figure_1.03_B16773.jpg)
- en: Figure 1.3 – Configuration Settings window
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 配置设置窗口
- en: Left-click the **Next** button shown in the preceding screenshot. On the **Choose
    Start Menu Folder** window, left-click **Install** to accept the default option.
    The first part of the installation will now proceed.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的截图中，单击**下一步**按钮。在**选择开始菜单文件夹**窗口上，单击**安装**以接受默认选项。安装的第一部分现在将进行。
- en: Once you get the **Installation Complete** message, left-click the **Next**
    button. You can then left-click the **Finish** button.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦收到**安装完成**消息，单击**下一步**按钮。然后可以单击**完成**按钮。
- en: Android Studio should start automatically. If it doesn't, you can find and start
    the Android Studio app from your Windows start menu.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio应该会自动启动。如果没有，您可以在Windows开始菜单中找到并启动Android Studio应用程序。
- en: You will be prompted that you have a missing SDK (unless this is not the first
    time you have used Android Studio). Left-click **Next** to continue.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将收到一条消息，提示您缺少SDK（除非这不是您第一次使用Android Studio）。单击**下一步**继续。
- en: On the `D:\Android\Sdk`, as shown in the following screenshot:![Figure 1.4 –
    SDK Components Setup screen
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`D:\Android\Sdk`，如下截图所示：![图1.4 – SDK组件设置屏幕
- en: '](img/Figure_1.04_B16773.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.04_B16773.jpg)'
- en: Figure 1.4 – SDK Components Setup screen
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – SDK组件设置屏幕
- en: Left-click the **Next** button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**下一步**按钮。
- en: On the **Verify Settings** window, left-click the **Finish** button. Android
    Studio will now download some more files and complete the installation. It could
    take a few minutes or more and you might again be prompted to allow access to
    your PC.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**验证设置**窗口上，单击**完成**按钮。Android Studio现在将下载一些文件并完成安装。这可能需要几分钟或更长时间，您可能会再次被提示允许访问您的PC。
- en: When the process is over, left-click the **Finish** button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当过程结束时，单击**完成**按钮。
- en: 'You will be greeted with the Android Studio welcome screen, shown next:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到下一个Android Studio欢迎屏幕：
- en: '![Figure 1.5 – Android Studio welcome screen'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5 – Android Studio欢迎屏幕'
- en: '](img/Figure_1.05_B16773.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.05_B16773.jpg)'
- en: Figure 1.5 – Android Studio welcome screen
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – Android Studio欢迎屏幕
- en: If you are carrying straight on with the next section, then leave this screen
    up. If you want, you can close it down and run Android Studio from the Windows
    start menu, just like any other app, when you are ready to proceed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要直接进行下一节，那么保持此屏幕。如果愿意，可以关闭它，然后在准备好继续时，像运行任何其他应用程序一样，从Windows开始菜单中运行Android
    Studio。
- en: Let's talk about all the different things that an Android app comprises.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈Android应用程序包括的所有不同内容。
- en: What makes an Android app?
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么构成了一个Android应用程序？
- en: We already know that we will write Java code that will itself use other people's
    Java code and will be compiled into bytecode that is converted into machine code
    on our users' Android devices. In addition to this, we will also be adding and
    editing other files that are included in the final APK as well. These files are
    known as **Android resources**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道，我们将编写的Java代码本身将使用其他人的Java代码，并将被编译成字节码，然后在用户的Android设备上转换为机器代码。除此之外，我们还将添加和编辑其他包含在最终APK中的文件。这些文件被称为Android资源。
- en: Android resources
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android资源
- en: Our app will include resources such as images, sound, and **User Interface**
    (**UI**) layouts, which are kept in separate files from the Java code. We will
    slowly introduce ourselves to them over the course of the book.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将包括图像、声音和用户界面（UI）布局等资源，这些资源保存在与Java代码分开的文件中。我们将在本书的过程中慢慢介绍它们。
- en: It will also include files that have the textual content of our app. It is the
    convention to refer to the text in our app through separate files because it makes
    them easy to change and easy to create apps that work for different languages
    and geographical regions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将包括具有我们应用程序文本内容的文件。通过单独的文件引用应用程序中的文本是一种惯例，因为这样做可以使它们易于更改，并且可以创建适用于不同语言和地理区域的应用程序。
- en: Furthermore, the actual UI layout of our apps, despite the option to implement
    them with a visual designer, is actually read from text-based files by Android.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管有使用可视化设计工具实现应用程序的实际UI布局的选项，但实际上是由Android从基于文本的文件中读取的。
- en: Android (or any computer), of course, cannot read and recognize text in the
    same way that a human can. Therefore, we must present our resources in a highly
    organized and predefined manner. To do so, we will use `.xml`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Android（或任何计算机）无法像人类一样阅读和识别文本。因此，我们必须以高度组织和预定义的方式呈现我们的资源。为此，我们将使用`.xml`。
- en: You do not need to memorize this as we will constantly be returning to this
    concept throughout the book.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要记住这一点，因为我们将在整本书中不断回到这个概念。
- en: The structure of Android's Java code
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android的Java代码结构
- en: In addition to these resources, it is worth noting that Java as used in Android
    has a structure to its code. There are many millions of lines of code that we
    can take advantage of. This code will obviously need to be organized in a way
    that makes it easy to find and refer to. It is organized into **packages** that
    are specific to Android.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些资源之外，值得注意的是，在Android中使用的Java代码具有其代码结构。我们可以利用数百万行代码。显然，这些代码需要以便于查找和引用的方式进行组织。它们被组织成特定于Android的**包**。
- en: Packages
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包
- en: Whenever we create a new Android app, we will choose a unique name known as
    a **package**. We will see how we do this in the *Building our first Android app*
    section. Packages are often separated into **sub-packages**, so they can be grouped
    together with other similar packages. We can simply think of this as folders and
    sub-folders, which is almost exactly what it is.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们创建一个新的Android应用程序时，我们将选择一个称为**包**的唯一名称。我们将在*构建我们的第一个Android应用程序*部分中看到我们是如何做到这一点的。包通常被分成**子包**，以便与其他类似的包一起分组。我们可以简单地将其视为文件夹和子文件夹，这几乎就是它的实质。
- en: 'We can think of all the packages that the Android API makes available to us
    as code from a code library. Some common Android packages we will use include
    the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Android API提供给我们的所有包视为代码库中的代码。我们将使用的一些常见Android包包括以下内容：
- en: '`android.graphics`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.graphics`'
- en: '`android.database`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.database`'
- en: '`android.view.animation`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android.view.animation`'
- en: As you can see, they are arranged and named to make what is in them as obvious
    as possible.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它们被安排和命名，以使其中的内容尽可能明显。
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to get an idea of the sheer depth and breadth of the Android API,
    then look at the Android package index: [https://developer.android.com/reference/packages](https://developer.android.com/reference/packages).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解Android API的深度和广度，可以查看Android包索引：[https://developer.android.com/reference/packages](https://developer.android.com/reference/packages)。
- en: Classes
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类
- en: Earlier, we learned that the reusable code blueprints that we can transform
    into objects are called `.java` file extension.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们了解到我们可以将可重用的代码蓝图转换为对象的文件称为`.java`文件扩展名。
- en: Methods
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: In Java (and therefore Android), we further break up our classes into sections
    that perform the different actions of our class. We call these action-oriented
    sections **methods**. It is most often the methods of the class that we will use
    to access the functionality provided within all those millions of lines of code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java（因此也是Android）中，我们将类进一步分成执行不同操作的部分。我们称这些以行动为导向的部分为方法。通常，我们将使用类的方法来访问所有这些数百万行代码中提供的功能。
- en: We do not need to read the code. We just need to know which class has what we
    need, which package it is in, and which methods from within the class give us
    precisely the result we are after.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要阅读代码。我们只需要知道哪个类有我们需要的内容，它属于哪个包，以及类内的哪些方法能给我们精确的结果。
- en: The next diagram shows a representation of the Android API. The structure of
    the code we will be writing will be similar to the way this example is structured,
    although we will usually have just one package per app.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图表显示了Android API的表示。我们将编写的代码结构将类似于此示例的结构，尽管我们通常每个应用程序只有一个包。
- en: 'Of course, because of the object-oriented nature of Java, we will only be using
    selected parts from this API. Notice also that each class has its own distinct
    data. Typically, if you want access to the data in a class, you need to have an
    object of that class:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于Java的面向对象性质，我们只会使用API中的部分功能。还要注意，每个类都有其自己独特的数据。通常，如果你想访问类中的数据，你需要有该类的对象：
- en: '![Figure 1.6 – A representation of the Android API'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 - Android API的表示'
- en: '](img/Figure_1.06_B16773.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.06_B16773.jpg)'
- en: Figure 1.6 – A representation of the Android API
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 - Android API的表示
- en: You do not need to memorize this as we will constantly be returning to this
    concept throughout the book.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要记住这一点，因为我们将在整本书中不断回到这个概念。
- en: 'By the end of this chapter, we will have imported multiple packages, as well
    as dozens of classes from them, and we will have used many of their methods as
    well. By the end of [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer*, we will have even written our
    very own methods. Now we can get started with the first app.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将导入多个包，以及其中的几十个类，并且我们还将使用其中许多方法。到[*第2章*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*结束时，首次接触：Java、XML和UI设计*，我们甚至将编写我们自己的方法。现在我们可以开始第一个应用程序了。
- en: Building our first Android app
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的第一个Android应用程序
- en: 'In programming, it is tradition for the first app of a new student to use whatever
    language/operating system they are using to say hello to the world. We will quickly
    build an app that does just that and in [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer*, we will go beyond that and add
    some buttons that respond to the user when they are pressed.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，传统上新学生的第一个应用程序会使用他们正在使用的语言/操作系统向世界打招呼。我们将快速构建一个只做这件事的应用程序，并且在[*第2章*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*结束时，首次接触：Java、XML和UI设计*，我们将超越这一点，并添加一些在用户按下按钮时响应的按钮。
- en: Note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code as it stands at the end of this chapter is in the download
    bundle in the [*Chapter 1*](B16773_01_ePub_RK.xhtml#_idTextAnchor014) folder for
    your reference. You can't simply copy and paste this code, however! You still
    need to go through the project creation phase explained in this chapter (and at
    the beginning of all the projects) as Android Studio does lots of work behind
    the scenes. Once you become familiar with these steps and understand which code
    is typed by you the programmer and which code/files are generated by Android Studio,
    you will then be able to save time and typing by copy and pasting the files I
    supply in the download bundle.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时的完整代码在[*第1章*](B16773_01_ePub_RK.xhtml#_idTextAnchor014)文件夹中的下载包中供您参考。但是，您不能简单地复制和粘贴这段代码！您仍然需要按照本章（以及所有项目开头）中解释的项目创建阶段进行操作，因为Android
    Studio在幕后做了大量工作。一旦您熟悉了这些步骤，并理解了哪些代码是由您作为程序员输入的，哪些代码/文件是由Android Studio生成的，那么您就能够通过复制和粘贴我在下载包中提供的文件来节省时间和输入。
- en: 'Follow these steps to start the project:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始项目：
- en: Run Android Studio in the same way you run any other app. On Windows 10, for
    example, the launch icon appears in the start menu.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以与运行任何其他应用程序相同的方式运行Android Studio。例如，在Windows 10上，启动图标会出现在开始菜单中。
- en: Tip
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you are prompted with **Import Studio settings from…**, choose **Do not import
    settings**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示**从…导入Studio设置**，请选择**不导入设置**。
- en: You will be greeted with the Android Studio welcome screen, as shown in the
    following screenshot. Locate the start a new Android Studio project option and
    left-click it:![Figure 1.7 – Android Studio welcome screen
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到Android Studio的欢迎屏幕，如下截图所示。找到开始一个新的Android Studio项目选项，并单击它：![图1.7 - Android
    Studio欢迎屏幕
- en: '](img/Figure_1.07_B16773.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.07_B16773.jpg)'
- en: Figure 1.7 – Android Studio welcome screen
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 - Android Studio欢迎屏幕
- en: The window that follows is **Select a Project Template**.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的窗口是**选择项目模板**。
- en: These are some useful project templates that Android Studio can generate for
    you depending on the type of app you are going to develop. We will use the **Basic
    Activity** option. Android Studio will auto-generate a small amount of code and
    a selection of resources to get our project started. We will discuss the code
    and the resources in detail in the next chapter.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Android Studio可以根据您要开发的应用程序类型为您生成的一些有用的项目模板。我们将使用**基本活动**选项。Android Studio将自动生成少量代码和一些资源来启动我们的项目。我们将在下一章详细讨论代码和资源。
- en: Select **Basic Activity**. Here is a picture of the **Select a Project Template**
    window with the **Basic Activity** option selected:![Figure 1.8 – Select a Project
    Template window
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**基本活动**。以下是**选择项目模板**窗口，其中选择了**基本活动**选项的图片：![图1.8 - 选择项目模板窗口
- en: '](img/Figure_1.08_B16773.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.08_B16773.jpg)'
- en: Figure 1.8 – Select a Project Template window
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 - 选择项目模板窗口
- en: Make sure **Basic Activity** is selected as it is in the preceding screenshot,
    and then click **Next**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**基本活动**被选中，就像前面的截图中一样，然后点击**下一步**。
- en: After this, Android Studio will bring up the `Hello World` and the location
    for the files will be your `Projects` folder that we created in the *Setting up
    Android Studio* section.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，Android Studio将弹出`Hello World`，文件的位置将是我们在*设置Android Studio*部分中创建的`Projects`文件夹。
- en: The package name can be almost anything you like. If you have a website, you
    could use the format `com.yourdomainname`. If not, feel free to use my domain
    name, `com.gamecodeschool.helloworld`, or something that you just make up yourself.
    It is only important when you come to publish.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 包名可以是几乎任何你喜欢的东西。如果您有一个网站，您可以使用`com.yourdomainname`的格式。如果没有，可以使用我的域名`com.gamecodeschool.helloworld`，或者您自己编造的东西。这只有在您要发布时才重要。
- en: 'To be clear, in case you can''t see the details in the following screenshot
    clearly, here are the values I used. Remember that yours might vary depending
    upon your choices for package name and project location:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确起见，如果您无法清楚地看到以下截图中的细节，这里是我使用的值。请记住，根据您对包名和项目位置的选择，您的值可能会有所不同：
- en: '![](img/Figure_1.Table_1_B16773.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_1.Table_1_B16773.jpg)'
- en: Tip
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the application name has a space between `Hello` and `World` but the
    project location does not and will not work if it does.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用程序名称中`Hello`和`World`之间有一个空格，但项目位置没有，如果有空格将无法工作。
- en: The next screenshot shows the **Configure Your Project** screen once you have
    entered all the information:![Figure 1.9 – Configure Your Project screen
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一张截图显示了一旦您输入了所有信息的**配置您的项目**屏幕：![图1.9 - 配置您的项目屏幕
- en: '](img/Figure_1.09_B16773.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.09_B16773.jpg)'
- en: Figure 1.9 – Configure Your Project screen
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 - 配置您的项目屏幕
- en: In the previous screenshot, you can see that Android Studio has auto-generated
    a package name based on the information entered. Mine is **com.gamecodeschool.helloworld**.
    Yours might be the same or not; it doesn't matter.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一张截图中，您可以看到Android Studio根据输入的信息自动生成了一个包名称。我的是**com.gamecodeschool.helloworld**。您的可能相同，也可能不同；这并不重要。
- en: Note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can write Android apps in a few different languages, including C++ and Kotlin.
    There are various advantages and disadvantages to each compared to using Java.
    Learning Java will be a great introduction to other languages and Java is also
    an official language of Android. Most top apps and games on the Play Store are
    currently written in Java.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用几种不同的语言编写安卓应用程序，包括C++和Kotlin。与使用Java相比，每种语言都有各种优缺点。学习Java将是其他语言的很好入门，并且Java也是安卓的官方语言之一。目前Play商店上大多数热门应用和游戏都是用Java编写的。
- en: You can also see the **Minimum SDK** option. Leave this at the default but note
    that the default might be different for you at the time of writing.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到**最低SDK**选项。将其保留为默认设置，但请注意，写作时默认设置可能与您的设置不同。
- en: Note
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We already know that the Android SDK is the collection of packages of code that
    we will be using to develop our apps. Like any good SDK, the Android SDK is regularly
    updated and each time it gets a significant update, the version number is increased.
    Simply put, the higher the version number, the newer the features you get to use;
    the lower the version number, the more devices our app will work on. For now,
    Android Jelly Bean will give us lots of great features and near-100% compatibility
    with the Android devices currently in use. If at the time of reading Android Studio
    is suggesting a newer API and Android version, then go with that.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道安卓SDK是我们将用来开发应用程序的代码包集合。像任何一个好的SDK一样，安卓SDK定期更新，每次有重大更新时，版本号都会增加。简单来说，版本号越高，您可以使用的新功能就越多；版本号越低，我们的应用程序就能在更多设备上运行。目前，安卓果冻豆将为我们提供许多出色的功能，并且几乎100%兼容当前使用的安卓设备。如果在阅读时，Android
    Studio建议使用更新的API和安卓版本，那就选择那个吧。
- en: If you are reading this some years in the future, then the **Minimum SDK** option
    will probably default to something different but the code in this book will still
    work.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在未来的某个时候阅读本书，那么**最低SDK**选项可能会默认为不同的内容，但本书中的代码仍将有效。
- en: Click the **Finish** button and we will run the app to see what we have achieved.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**完成**按钮，我们将运行应用程序，看看我们取得了什么成就。
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The first time you create a new project, Android Studio will initiate another
    download. Android Studio will set up the Gradle build system that it uses to manage
    project configuration and deployment. This will only happen for the first project.
    No knowledge of Gradle is required for the book but if you are curious, a simple
    web search will reveal more.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次创建新项目时，Android Studio将启动另一个下载。Android Studio将设置用于管理项目配置和部署的Gradle构建系统。这只会发生在第一个项目中。本书不需要了解Gradle的知识，但如果您感兴趣，简单的网络搜索将会揭示更多信息。
- en: Let's look at our app in action.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的应用程序在运行中的情况。
- en: Deploying the app so far
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到目前为止部署应用程序
- en: 'Before we explore any of the code and learn our first bit of Java, you might
    be surprised to learn that we can already run our project. It will just be a fairly
    featureless app but as we will be running the app as often as possible to check
    our progress, let''s see how to do that now. You have three options:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索任何代码并学习我们的第一段Java代码之前，您可能会惊讶地发现我们已经可以运行我们的项目了。这只是一个相当无特色的应用程序，但由于我们将尽可能频繁地运行应用程序来检查我们的进度，现在让我们看看如何做到这一点。您有三个选择：
- en: Run the app on the emulator on your PC (part of Android Studio) in debug mode.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PC上的模拟器上运行应用程序（Android Studio的一部分）处于调试模式。
- en: Run the app on a real Android device in USB debugging mode.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在USB调试模式下在真实的安卓设备上运行应用程序。
- en: Export the app as a full Android project that can be uploaded to the Play Store.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序导出为一个完整的安卓项目，可以上传到Play商店。
- en: The first option (debug mode) is the easiest to set up because we did it as
    part of setting up Android Studio. If you have a powerful PC, you will hardly
    notice the difference between the emulator and a real device. However, screen
    touches are emulated by mouse clicks and proper testing of the user's experience
    is not possible in some of the later apps we will create, such as the drawing
    app. Furthermore, you might just prefer to test out your creations on a real device
    occasionally – I know I do.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项（调试模式）是最容易设置的，因为我们在设置Android Studio时已经做过了。如果您有一台性能强大的PC，您几乎不会注意到模拟器和真实设备之间的区别。然而，屏幕触摸是由鼠标点击模拟的，对用户体验的正确测试在我们将创建的一些后续应用中是不可能的，比如绘图应用。此外，您可能更喜欢偶尔在真实设备上测试您的创作——我知道我会。
- en: The second option, using a real device, has a couple more steps but once set
    up is as good as option 1 and the screen touches are for real.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项，使用真实设备，有几个额外的步骤，但一旦设置好，就和选项1一样好，屏幕触摸是真实的。
- en: The final option takes about 5 minutes (at least) to prepare, and then you need
    to manually put the created package onto a real device and install it every time
    you make a change to the code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项大约需要5分钟（至少）来准备，然后您需要手动将创建的包放到真实设备上并在每次更改代码时安装它。
- en: Probably the best way is to use the emulator to quickly test and debug minor
    increments in your code, and then fairly regularly use USB debugging mode on a
    real device to make sure things are still as expected. Only occasionally will
    you want to export an actual deployable package.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最好的方法是使用模拟器快速测试和调试代码的小增量，然后定期使用USB调试模式在真实设备上确保一切仍然如预期。只有偶尔您才需要导出一个实际可部署的包。
- en: For these reasons, we will now go through how to run the app using the emulator
    and USB debugging on a real device.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在将介绍如何使用模拟器和USB调试在真实设备上运行应用程序。
- en: Running and debugging the app on an Android emulator
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在安卓模拟器上运行和调试应用程序
- en: 'Follow these simple steps to run the app on the default Android emulator:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下简单步骤在默认的安卓模拟器上运行应用程序：
- en: From the Android Studio menu bar, select **Tools** | **AVD Manager**. **AVD**
    stands for **Android Virtual Device** (an emulator). You will see the following
    window:![Figure 1.10 – AVD Manager
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从安卓工作室菜单栏中，选择**工具** | **AVD管理器**。**AVD**代表**安卓虚拟设备**（模拟器）。你会看到以下窗口：![图1.10 -
    AVD管理器
- en: '](img/Figure_1.10_B16773.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.10_B16773.jpg)'
- en: Figure 1.10 – AVD Manager
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 - AVD管理器
- en: Notice there is an emulator on the list. In my case, it is **Pixel_3a_API_30_x….**
    If you are following this sometime in the future, it may be a different emulator
    that was installed by default. It won't matter.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意列表中有一个模拟器。在我的情况下，它是**Pixel_3a_API_30_x….**如果你在将来的某个时候跟着做，可能是一个默认安装的不同模拟器。这没关系。
- en: Important Note
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The emulator should have been installed by the steps we have performed previously.
    I noticed while testing with one pre-release version that it wasn't installed
    by default. In the event that there is no emulator listed on the **Your Virtual
    Devices** screen, select **Tools** | **AVD Manager** | **Create Virtual Device…**
    | **Next**| **R Download** | **Accept** | **Next** and a default emulator will
    be downloaded and installed. When the installation is done, click **Finish** followed
    by **Next** and finally **Finish** again. Now you can refer to the previous step
    to run the emulator.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器应该已经通过我们之前执行的步骤安装好了。我注意到在测试一个预发布版本时，它并没有默认安装。如果在**你的虚拟设备**屏幕上没有列出模拟器，选择**工具**
    | **AVD管理器** | **创建虚拟设备…** | **下一步** | **R下载** | **接受** | **下一步**，然后将会下载并安装一个默认模拟器。安装完成后，点击**完成**，然后**下一步**，最后再次点击**完成**。现在你可以参考前面的步骤来运行模拟器。
- en: Click the green play icon (to the right) shown in the next screenshot and wait
    as the emulator boots up:![Figure 1.11 – Play icon
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一张截图中显示的绿色播放图标（右侧），等待模拟器启动：![图1.11 - 播放图标
- en: '](img/Figure_1.11_B16773.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.11_B16773.jpg)'
- en: Figure 1.11 – Play icon
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 - 播放图标
- en: 'Now you can click the play icon on the Android Studio quick launch bar as shown
    in the next screenshot, and if prompted, choose **Pixel_3a_API_30_x…** (or whatever
    your emulator is called) and the app will launch on the emulator:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击安卓工作室快速启动栏上的播放图标，如下一张截图所示，如果提示，选择**Pixel_3a_API_30_x…**（或者你的模拟器叫什么）然后应用程序将在模拟器上启动：
- en: '![Figure 1.12 – Play icon on the Android Studio quick launch bar'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.12 - 安卓工作室快速启动栏上的播放图标'
- en: '](img/Figure_1.12_B16773.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.12_B16773.jpg)'
- en: Figure 1.12 – Play icon on the Android Studio quick launch bar
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 - 安卓工作室快速启动栏上的播放图标
- en: 'You''re done. Here is what the app looks like so far in the emulator. Remember
    that you might (probably do) have a different emulator – that''s fine:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你完成了。这是到目前为止应用程序的外观在模拟器中。请记住，你可能（很可能）有一个不同的模拟器 - 没关系：
- en: '![Figure 1.13 – What the app looks like so far'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.13 - 到目前为止应用程序的外观'
- en: '](img/Figure_1.13_B16773.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.13_B16773.jpg)'
- en: Figure 1.13 – What the app looks like so far
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13 - 到目前为止应用程序的外观
- en: Clearly, we have more work to do before we move to Silicon Valley and look for
    financial backing, but it is a good start. The message on the screen is **Hello
    first fragment**. A **fragment** is a building block of many Android apps and
    we will explore them further throughout the book. If you click on the **Next**
    button, you will see a new empty layout, and if you then click on the **Previous**
    button, you will see the **Hello first fragment** screen again. Not bad considering
    we haven't written any code yet.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，在我们搬到硅谷寻找资金支持之前，我们还有更多的工作要做，但这是一个很好的开始。屏幕上的消息是**你好第一个片段**。**片段**是许多安卓应用程序的构建块，我们将在整本书中进一步探讨它们。如果你点击**下一步**按钮，你将看到一个新的空布局，如果你然后点击**上一步**按钮，你将再次看到**你好第一个片段**屏幕。考虑到我们还没有写任何代码，这还不错。
- en: We need to test and debug our apps often throughout development to check for
    any errors, crashes, or anything else unintended.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们需要经常测试和调试我们的应用程序，以检查是否有任何错误、崩溃或其他意外情况。
- en: Note
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will see how we get errors and other feedback for debugging from our apps
    in the next chapter.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中看到如何从我们的应用程序中获取错误和其他调试反馈。
- en: It is also important to make sure it looks good and runs correctly on every
    device type/size that you want to target. Obviously, we do not own one of each
    of the many thousands of Android devices. This is where emulators come in.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 确保它在你想要定位的每种设备类型/尺寸上看起来好并且运行正确是很重要的。显然，我们并不拥有成千上万种安卓设备中的每一种。这就是模拟器的用武之地。
- en: Emulators, however, are sometimes a bit slow and cumbersome, although they have
    improved a lot recently. If you want to get a genuine feel for the experience
    your users will get, then you can't beat deploying to a real device. So, we will
    want to use both real devices and emulators while developing our apps.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模拟器有时会有点慢和繁琐，尽管最近已经有了很大的改进。如果你想要真正感受到用户体验，那么你无法击败部署到真实设备。因此，在开发我们的应用程序时，我们将希望同时使用真实设备和模拟器。
- en: Tip
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you are planning on using the emulator again soon, then leave it running
    to avoid having to wait for it to start again.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你计划很快再次使用模拟器，那么保持它运行以避免再次等待启动。 '
- en: If you want to try out your app on a tablet, you're going to need a different
    emulator.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在平板上尝试你的应用程序，你将需要一个不同的模拟器。
- en: Creating a new emulator
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的模拟器
- en: If you want to create an emulator for a different Android device, this is simple.
    From the main menu, select **Tools** | **AVD Manager**. In the AVD Manager window,
    left-click **Create Virtual Device**. Now, left-click on the type of device you
    want to create, **TV**, **Phone**, **Wear OS**, or **Tablet**. Now, simply left-click
    **Next** and follow the instructions to create your new AVD. Next time you run
    your app, the new AVD will appear as an option to run the app on. We will create
    a new tablet emulator step by step in the next chapter.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为不同的安卓设备创建一个模拟器，这很简单。从主菜单中选择**工具** | **AVD管理器**。在AVD管理器窗口中，左键单击**创建虚拟设备**。现在，左键单击你想创建的设备类型，**电视**，**手机**，**Wear
    OS**，或者**平板**。现在，简单地左键单击**下一步**，并按照说明创建你的新AVD。下次运行你的应用程序时，新的AVD将出现作为运行应用程序的选项。我们将在下一章逐步创建一个新的平板模拟器。
- en: Now we can look at how to get our app onto a real device.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看看如何将我们的应用程序放到真实设备上。
- en: Running the app on a real device
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在真实设备上运行应用程序
- en: The first thing to do is to visit your device manufacturer's website and obtain
    and install any drivers that are needed for your device and operating system.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的事情是访问设备制造商的网站，获取并安装设备和操作系统所需的任何驱动程序。
- en: Note
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most newer devices won't need a driver. So, you may want to just try the following
    steps first.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数新设备不需要驱动程序。所以，你可能首先想尝试以下步骤。
- en: 'The next few steps will set up the Android device for debugging. Note that
    different manufacturers structure the menu options slightly differently from others.
    But the following sequence is probably very close, if not exactly the same, for
    enabling debugging on most devices:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个步骤将为安卓设备进行调试设置。请注意，不同的制造商对菜单选项的结构可能略有不同。但是对于大多数设备来说，启用调试的以下顺序可能非常接近，如果不是完全相同：
- en: Tap the **Settings** menu option or the **Settings** app on your phone/tablet.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置**菜单选项或手机/平板上的**设置**应用。
- en: This next step will vary slightly for different versions of Android. The **Developer
    options** menu is hidden away so as not to trouble regular users. You must perform
    a slightly odd task to unlock the menu option. Tap the **About device** or **About
    Phone** option. Find the **Build Number** option and repeatedly tap it until you
    get a message informing you that **You are now a developer!**.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步将针对不同版本的安卓略有不同。**开发者选项**菜单被隐藏起来，以免困扰普通用户。你必须执行一个稍微奇怪的任务来解锁菜单选项。点击**关于设备**或**关于手机**选项。找到**构建号**选项，并重复点击，直到你收到一条消息，告诉你**你现在是开发者了！**。
- en: Note
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some manufacturers have different and obscure methods for achieving this step.
    If this step doesn't work, do a web search for your device and "unlocking developer
    options."
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一些制造商有不同和晦涩的方法来完成这一步。如果这一步不起作用，可以在网上搜索你的设备和“解锁开发者选项”。
- en: Go back to the **Settings** menu.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回**设置**菜单。
- en: Tap **Developer options**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开发者选项**。
- en: Tap the checkbox for **USB Debugging**.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**USB调试**的复选框。
- en: Connect your Android device to the USB port of your computer.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的安卓设备连接到计算机的USB端口。
- en: Click anywhere on Android Studio to get Android Studio to detect that your device
    has been connected. You should now find an **Allow USB debugging?** prompt on
    your device; hit **Allow**.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任何地方的安卓Studio，让安卓Studio检测到你的设备已连接。你现在应该在你的设备上找到一个**允许USB调试？**的提示；点击**允许**。
- en: Click the play icon from the Android Studio toolbar, as shown in the next screenshot:![Figure
    1.14 – Play icon from the Android Studio toolbar
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安卓Studio工具栏上的播放图标，如下图所示：![图1.14 - 来自安卓Studio工具栏的播放图标
- en: '](img/Figure_1.14_B16773.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.14_B16773.jpg)'
- en: Figure 1.14 – Play icon from the Android Studio toolbar
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 - 来自安卓Studio工具栏的播放图标
- en: When prompted, click **OK** to run the app on your chosen device.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时，点击**确定**在你选择的设备上运行应用程序。
- en: We are now ready to learn some Java and add our own Java code to the Hello World
    project, which we will cover in the next chapter.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备学习一些Java，并将我们自己的Java代码添加到Hello World项目中，这将在下一章中介绍。
- en: Frequently asked questions
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: So, is Android not really an operating system, just a virtual machine, and are
    all the phones and tablets really Linux machines?
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那么，安卓真的不是一个操作系统，只是一个虚拟机，所有的手机和平板电脑都是真正的Linux机器吗？
- en: No, all the different sub-systems of an Android device, which include Linux,
    the ART, and the libraries and drivers, are together what make up the Android
    operating system.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 不，安卓设备的所有不同子系统，包括Linux、ART、库和驱动程序，共同构成了安卓操作系统。
- en: I still don't understand all these technical terms, such as ART, object-oriented,
    APK, and so on. Should I re-read this chapter?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我仍然不理解所有这些技术术语，比如ART、面向对象、APK等等。我应该重新阅读这一章吗？
- en: 'No, that isn''t necessary as we just needed to introduce this jargon and we
    will be revisiting it all as well as clarifying it as the book progresses. If
    you understand the following, you are ready to proceed to [*Chapter 2*](B16773_02_ePub_RK.xhtml#_idTextAnchor043)*,
    First Contact: Java, XML, and the UI Designer*:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这并不是必要的，因为我们只是需要介绍这个行话，随着书的进展，我们将重新讨论它并澄清它。如果你理解了以下内容，你就可以继续阅读第二章，即《第一次接触：Java、XML和UI设计师》：
- en: We will be writing Java code and creating other resources in Android Point Studio,
    which, with the help of the JDK, will turn this code and resources into real Android
    apps.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在安卓Point Studio中编写Java代码并创建其他资源，借助JDK，将这些代码和资源转换为真正的安卓应用程序。
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So far, we have set up our Android development environment, created a new Android
    app, and deployed our app to both an emulator and a real device. If you still
    have unanswered questions (and you probably have more than you did at the start
    of the chapter), don't worry because as we dig deeper into the world of Android
    and Java, things will become clearer.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经设置了我们的安卓开发环境，创建了一个新的安卓应用，并将我们的应用部署到模拟器和真实设备上。如果你仍然有未解答的问题（你可能比章节开始时有更多的问题），不要担心，因为随着我们深入了解安卓和Java的世界，事情会变得更清晰。
- en: As the chapters progress, you will build a very rounded understanding of how
    everything fits together, and then success will just be a matter of practice and
    digging even deeper into the Android API.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 随着章节的进展，你将建立起对所有事物如何相互关联的全面理解，成功只是一个练习和更深入了解安卓API的问题。
- en: In the next chapter, we will edit the UI using the visual designer and raw XML
    code, as well as writing our first Java methods and getting to use some of the
    methods provided for us by the Android API.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用可视化设计师和原始XML代码来编辑UI，以及编写我们的第一个Java方法，并开始使用安卓API为我们提供的一些方法。
