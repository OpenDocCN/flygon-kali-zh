- en: Chapter 10. When NumPy Is Not Enough – SciPy and Beyond
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第十章：当 NumPy 不够用时 - SciPy 及更多
- en: '*SciPy is a world famous Python open source scientific computing library built
    on top of NumPy. It adds functionalitties such as numerical integration, optimization,
    statistics, and special functions.*'
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 是建立在 NumPy 之上的世界著名的 Python 开源科学计算库。 它增加了一些功能，例如数值积分，优化，统计和特殊函数。
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: File I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件 I/O
- en: Statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统计
- en: Signal processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号处理
- en: Optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化
- en: Interpolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值
- en: Image and audio processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像和音频处理
- en: MATLAB and Octave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MATLAB 和 Octave
- en: '**MATLAB** and its open source alternative, Octave, are popular mathematical
    programs. The `scipy.io` package has functions that let you load MATLAB or **Octave**
    **matrices** and arrays of numbers or strings in Python programs, and vice versa.
    The `loadmat()` function loads a `.mat` file. The `savemat()` function saves a
    dictionary of names and arrays into a `.mat` file.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**MATLAB** 及其开源替代品 Octave 是流行的数学程序。 `scipy.io`包具有一些函数，可让您加载 MATLAB 或 Octave
    矩阵，以及数字或 Python 程序中的字符串，反之亦然。 `loadmat()`函数加载`.mat`文件。 `savemat()`函数将名称和数组的字典保存到`.mat`文件中。'
- en: Time for action – saving and loading a .mat file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：保存并加载`.mat`文件
- en: 'If we start with NumPy arrays and decide to use said arrays within a MATLAB
    or Octave environment, the easiest thing to do is create a `.mat` file. We can,
    then, load the file within MATLAB or Octave. Let''s go through the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 NumPy 数组开始并决定在 MATLAB 或 Octave 环境中使用所述数组，那么最简单的方法就是创建一个`.mat`文件。 然后，我们可以在
    MATLAB 或 Octave 中加载文件。 让我们完成必要的步骤：
- en: 'Create a NumPy array and call the `savemat()` function to create a `.mat` file.
    This function has two parameters: a file name and a dictionary containing variable
    names and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 NumPy 数组，然后调用  `savemat()`函数来创建`.mat`文件。 该函数有两个参数：文件名和包含变量名和值的字典：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within a MATLAB or Octave environment, load the `.mat` file and check the stored
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MATLAB 或 Octave 环境中，加载`.mat`文件并检查存储的数组：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created a `.mat` file from NumPy code and loaded it within Octave. We checked
    the NumPy array that was created (see `scipyio.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 NumPy 代码创建了一个`.mat`文件，并将其加载到 Octave 中。 我们检查了创建的 NumPy 数组（请参见`scipyio.py`）：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pop quiz – loading .mat files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小测验 - 加载`.mat`文件
- en: Q1\. Which function loads `.mat` files?
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 哪个函数加载`.mat`文件？
- en: '`Loadmatlab`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Loadmatlab`'
- en: '`loadmat`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`loadmat`'
- en: '`loadoct`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`loadoct`'
- en: '`frommat`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`frommat`'
- en: Statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 统计
- en: The SciPy statistics module is called `scipy.stats`. There is one class that
    implements continuous distributions and one class that implements discrete distributions.
    Also, in this module, functions that perform a great number of statistical tests
    can be found.
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 统计模块为  ，称为`scipy.stats`。 一类实现连续分布  ，一类实现离散分布。 同样，在此模块中，可以找到执行大量统计检验的函数。
- en: Time for action – analyzing random values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：分析随机值
- en: We will generate random values that mimic a normal distribution and analyze
    the generated data with statistical functions from the `scipy.stats` package.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将生成模拟正态分布的随机值，并使用`scipy.stats`包中的统计函数分析生成的数据。
- en: 'Generate random values from a normal distribution using the `scipy.stats` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`scipy.stats`包从正态分布生成随机值：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Fit the generated values to a normal distribution. This basically gives the
    mean and standard deviation of the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的值拟合为正态分布。 这基本上给出了数据集的平均值和标准偏差：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The mean and standard deviation appear as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 平均值和标准差如下所示：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Skewness** tells us how skewed (asymmetric) a probability distribution is
    (see [http://en.wikipedia.org/wiki/Skewness](http://en.wikipedia.org/wiki/Skewness)).
    Perform a skewness test. This test returns two values. The second value is the
    **p-value**—the probability that the skewness of the dataset does not correspond
    to a normal distribution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**偏度**告诉我们概率分布有多偏斜（不对称）（见[`en.wikipedia.org/wiki/Skewness`](http://en.wikipedia.org/wiki/Skewness)）。执行偏度检验。 该检验返回两个值。
    第二个值是 **P 值**——数据集的偏斜度不符合正态分布的概率。'
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Generally speaking, the p-value is the probability of an outcome different than
    what was expected given the null hypothesis—in this case, the probability of getting
    a skewness different from that of a normal distribution (which is 0 because of
    symmetry).
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，P 值是结果与给定零假设所期望的结果不同的概率，在这种情况下，偏度与正态分布（由于对称而为 0）不同的概率。
- en: 'P-values range from `0` to `1`:'
  prefs: []
  type: TYPE_NORMAL
  zh: P 值的范围是`0`至`1`：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result of the skewness test appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 偏度检验的结果如下所示：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: So, there is a `53` percent chance we are not dealing with a normal distribution.
    It is instructive to see what happens if we generate more points, because if we
    generate more points, we should have a more normal distribution. For 900,000 points,
    we get a p-value of `0.16`. For 20 generated values, the p-value is `0.50`.
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不处理正态分布的可能性为`53`% 。 观察如果我们生成更多的点会发生什么，这很有启发性，因为如果我们生成更多的点，我们应该具有更正态的分布。
    对于 900,000 点，我们得到`0.16`的 P 值。 对于 20 个生成的值，P 值为`0.50`。
- en: '**Kurtosis** tells us how curved a probability distribution is. Perform a kurtosis
    test. This test is set up similarly to the skewness test, but, of course, applies
    to kurtosis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**峰度**告诉我们概率分布的弯曲程度。 执行峰度检验。 此检验的设置与偏度检验类似，但当然适用于峰度：'
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result of the kurtosis test appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 峰度检验的结果显示如下：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The p-value for 900,000 values is `0.028`. For 20 generated values, the p-values
    is `0.88`.
  prefs: []
  type: TYPE_NORMAL
  zh: 900,000 个值的 P 值为`0.028`。 对于 20 个生成的值，P 值为`0.88`。
- en: 'A **normality** **test** tells us how likely it is that a dataset complies
    the normal distribution. Perform a normality test. This test also returns two
    values, of which the second is a p-value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**正态检验**告诉我们数据集符合正态分布的可能性。 执行正态性检验。 此检验还返回两个值，其中第二个是p值：'
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result of the normality test appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 正态性检验的结果如下所示：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The p-value for 900,000 generated values is `0.035`. For 20 generated values,
    the p-value is `0.79`.
  prefs: []
  type: TYPE_NORMAL
  zh: 900,000 个生成值的 P 值为`0.035`。 对于 20 个生成的值，P 值为`0.79`。
- en: 'We can find the value at a certain percentile easily with SciPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 SciPy 轻松找到某个百分比的值：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The value at the `95th` percentile appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`95th`百分位的值显示如下：'
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Do the opposite of the previous step to find the percentile at `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行与上一步相反的操作，以找到 1 处的百分位数：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The percentile at `1` appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`处的百分位数显示如下：'
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Plot the generated values in a histogram with `matplotlib` (more information
    about `matplotlib` can be found in the previous [Chapter 9](ch09.html "Chapter 9. Plotting
    with matplotlib"), *Plotting with matplotlib*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`matplotlib`在直方图中绘制生成的值（有关`matplotlib`的更多信息，请参见前面的第九章，“Matplotlib 绘图”：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The histogram of the generated random values is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的随机值的直方图如下：
- en: '![Time for action – analyzing random values](img/4154_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：分析随机值](img/4154_10_01.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created a dataset from a normal distribution and analyzed it with the `scipy.stats`
    module (see `statistics.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从正态分布创建了一个数据集，并使用`scipy.stats`模块对其进行了分析（请参见`statistics.py`）：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Have a go hero – improving the data generation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勇往直前 - 改善数据生成
- en: Judging from the histogram in the previous *Time for action* section, there
    is room for improvement when it comes to generating the data. Try using NumPy
    or different parameters of the `scipy.stats.norm.rvs()` function.
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的“实战时间”部分中的直方图来看，在生成数据方面还有改进的余地。 尝试使用 NumPy 或`scipy.stats.norm.rvs()`函数的其他参数。
- en: Sample comparison and SciKits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SciKits 样本比较
- en: Often we have two data samples, maybe from different experiments, that are somehow
    related. Statistical tests exist that can compare the samples. Some of these are
    implemented in the `scipy.stats` module.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们有两个数据样本，可能来自不同的实验，它们之间存在某种关联。 存在可以比较样本的统计检验。 其中一些是在`scipy.stats`模块中实现的。
- en: 'Another statistical test that I like is the **Jarque–Bera** normality test
    from `scikits.statsmodels.stattools`. **SciKits** are small experimental Python
    software toolkits. They are not part of SciPy. There is also pandas, which is
    an offshoot of `scikits.statsmodels`. A list of SciKits can be found at [https://scikits.appspot.com/scikits](https://scikits.appspot.com/scikits).
    You can install `statsmodels` using setuptools with:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢的另一个统计检验是`scikits.statsmodels.stattools`的 **Jarque-Bera** 正态性检验。 **SciKit**
    是小型实验 Python 软件工具箱。 它们不属于 SciPy。 还有 Pandas，这是`scikits.statsmodels`的分支。 可以在[`scikits.appspot.com/scikits`](https://scikits.appspot.com/scikits)上找到  SciKit
    的列表。 您可以使用安装工具通过以下工具安装`statsmodels`：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Time for action – comparing stock log returns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：比较股票对数收益
- en: We will download the stock quotes for the last year of two trackers using `matplotlib`.
    As mentioned in the previous [Chapter 9](ch09.html "Chapter 9. Plotting with matplotlib"),
    *Plotting with matplotlib*, we can retrieve quotes from Yahoo Finance. We will
    compare the log returns of the close price of **DIA** and **SPY** (DIA tracks
    the Dow Jones index; SPY tracks the S & P 500 index). We will also perform the
    Jarque–Bera test on the difference of the log returns.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`matplotlib`下载两个追踪器的去年股票报价。 如先前的第九章，“Matplotlib 绘图”，我们可以从雅虎金融检索报价。 我们将比较`DIA`和`SPY`的收盘价的对数回报（DIA 跟踪道琼斯指数； SPY 跟踪 S&P 500 指数）。 我们还将对返回值的差异执行雅尔克-贝拉检验。
- en: 'Write a function that can return the close price for a specified stock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个可以返回指定股票的收盘价的函数：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Calculate the log returns for DIA and SPY. Compute the log returns by taking
    the natural logarithm of the close price and then taking the difference of consecutive
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算 DIA 和 SPY 的对数返回。 通过采用收盘价的自然对数，然后采用连续值的差来计算对数收益：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The means comparison test checks whether two different samples could have the
    same mean value. Two values are returned, of which the second is the p-value from
    `0` to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 均值比较测试检查两个不同的样本是否可以具有相同的平均值。 返回两个值，第二个是从 0 到 1 的 P 值：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result of the means comparison test appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 均值比较检验的结果如下所示：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So, there is about a 98 percent chance that the two samples have the same mean
    log return. Actually, the documentation has the following to say:'
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这两个样本有大约 98% 的机会具有相同的平均对数回报。 实际上，该文档的内容如下：
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we observe a large p-value, for example, larger than 0.05 or 0.1, then we
    cannot reject the null hypothesis of identical average scores. If the p-value
    is smaller than the threshold, e.g. 1%, 5% or 10%, then we reject the null hypothesis
    of equal averages.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察到较大的 P 值（例如，大于 0.05 或 0.1），那么我们将无法拒绝具有相同平均分数的原假设。 如果 P 值小于阈值，例如 1% ，5%
    或 10% ，则我们拒绝均值的零假设。
- en: 'The **Kolmogorov–Smirnov** two samples test tells us how likely it is that
    two samples are drawn from the same distribution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Kolmogorov–Smirnov** 双样本检验告诉我们从同一分布中抽取两个样本的可能性：'
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Again, two values are returned, of which the second value is the p-value:'
  prefs: []
  type: TYPE_NORMAL
  zh: 再次返回两个值，其中第二个值为 P 值：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Unleash the **Jarque–Bera** normality test on the difference of the log returns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对对数返回值的差异进行 **Jarque–Bera** 正态性检验：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The p-value of the Jarque–Bera normality test appears as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 雅尔克-贝拉正态性检验的 P 值显示如下：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Plot the histograms of the log returns and the difference thereof with `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`matplotlib`绘制对数收益的直方图及其差值：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The histograms of the log returns and difference are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对数收益和差异的直方图如下所示：
- en: '![Time for action – comparing stock log returns](img/4154_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：比较股票对数收益](img/4154_10_02.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We compared samples of log returns for DIA and SPY. Also, we performed the
    Jarque-Bera test on the difference of the log returns (see `pair.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们比较了 DIA 和 SPY 的对数回报样本。 另外，我们对对数返回值的差进行了雅尔克-贝拉检验（请参见`pair.py`）：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Signal processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号处理
- en: The `scipy.signal` module contains filter functions and **B-spline interpolation**
    algorithms.
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.signal`模块包含过滤函数和 **B 样条插值**算法。'
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Spline interpolation uses a polynomial called a spline for interpolation (see
    [http://en.wikipedia.org/wiki/Spline_interpolation](http://en.wikipedia.org/wiki/Spline_interpolation)).
    The interpolation then tries to glue splines together to fit the data. B-spline
    is a type of spline.
  prefs: []
  type: TYPE_NORMAL
  zh: 样条插值使用称为样条的多项式进行插值（见[`en.wikipedia.org/wiki/Spline_interpolation`](http://en.wikipedia.org/wiki/Spline_interpolation)）。 然后，插值尝试将样条线粘合在一起以拟合数据。
    B 样条是样条的一种。
- en: A SciPy signal is defined as an array of numbers. An example of a filter is
    the `detrend()` function. This function takes a signal and does a linear fit on
    it. This trend is then subtracted from the original input data.
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 信号定义为数字数组。 过滤器的一个示例是`detrend()`函数。 此函数接收信号并对其进行线性拟合。 然后从原始输入数据中减去该趋势。
- en: Time for action – detecting a trend in QQQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：检测`QQQ`趋势
- en: Often we are more interested in the trend of a data sample than in detrending
    it. We can still get the trend back easily after detrending. Let's do that for
    one year of price data for QQQ.
  prefs: []
  type: TYPE_NORMAL
  zh: 通常对数据样本的趋势比对其去趋势更感兴趣。 在下降趋势之后，我们仍然可以轻松地恢复趋势。 让我们以`QQQ`的年价格数据为例。
- en: 'Write code that gets the close price and corresponding dates for QQQ:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写获取`QQQ`收盘价和相应日期的代码：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Detrend the signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消除趋势：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create month and day locators for the dates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为日期创建月和日定位器：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a date formatter that creates a string of month name and year:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个日期格式化器，该日期格式化器创建月份名称和年份的字符串：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a figure and subplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建图形和子图：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Plot the data and underlying trend by subtracting the detrended signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过减去去趋势信号绘制数据和潜在趋势：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Set the locators and formatter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置定位器和格式化器：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Format the x-axis labels as dates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 x 轴标签的格式设置为日期：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following figure shows the QQQ prices with a trend line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了带有趋势线的 QQQ 价格：
- en: '![Time for action – detecting a trend in QQQ](img/4154_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：检测`QQQ`趋势](img/4154_10_03.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We plotted the closing price for QQQ with a trend line (see `trend.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用趋势线绘制了 QQQ 的收盘价（请参见`trend.py`）：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Fourier analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 傅立叶分析
- en: 'Signals in the real world often have a periodic nature. A commonly used tool
    to deal with these signals is the **Discrete Fourier transform** (see [https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform](https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform)).
    The Discrete Fourier transform is a transformation from the time domain into the
    frequency domain, that is, the linear decomposition of a periodic signal into
    sine and cosine functions with various frequencies:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界中的信号通常具有周期性。 处理这些信号的常用工具是**离散傅里叶变换**（见[`en.wikipedia.org/wiki/Discrete-time_Fourier_transform`](https://en.wikipedia.org/wiki/Discrete-time_Fourier_transform)）。
    离散傅立叶变换是从时域到频域的变换，即将周期信号线性分解为各种频率的正弦和余弦函数：
- en: '![Fourier analysis](img/4154_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![傅立叶分析](img/4154_10_09.jpg)'
- en: Functions for Fourier transforms can be found in the `scipy.fftpack` module
    (NumPy also has its own Fourier package `numpy.fft`). Included in the package
    are Fast Fourier transforms, differential and pseudo-differential operators, as
    well as several helper functions. MATLAB users will be pleased to know that a
    number of functions in the `scipy.fftpack` module have the same name as their
    MATLAB counterparts, and a similar function as their MATLAB equivalents.
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`scipy.fftpack`模块中找到傅里叶变换的函数（NumPy 也有自己的傅里叶包`numpy.fft`）。 该包中包括快速傅立叶变换，微分和伪微分运算符，以及一些辅助函数。
    MATLAB 用户将很高兴地知道`scipy.fftpack`模块中的许多函数与 MATLAB 的对应函数具有相同的名称，并且与 MATLAB 的等效函数具有相似的功能。
- en: Time for action – filtering a detrended signal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：过滤去趋势的信号
- en: We learned in the previous *Time for action* section how to detrend a signal.
    This detrended signal could have a cyclical component. Let's try to visualize
    this. Some of the steps are a repetition of steps in the previous *Time for action*
    section, such as downloading the data and setting up `matplotlib` objects. These
    steps are omitted here.
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的“实战时间”部分中，我们学习了如何使信号逆趋势。 该去趋势的信号可以具有循环分量。 让我们尝试将其可视化。 其中一些步骤是前面“实战时间”部分中的步骤的重复，例如下载数据和设置`matplotlib`对象。
    这些步骤在此省略。
- en: 'Apply the Fourier transform, giving us the frequency spectrum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用傅立叶变换，得到频谱：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Filter out the noise. Let''s say, if the magnitude of a frequency component
    is below `10` percent of the strongest component, throw it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滤除噪音。 假设，如果频率分量的幅度低于最强分量的`10`% ，则将其丢弃：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Transform the filtered signal back to the original domain and plot it together
    with the detrended signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过滤后的信号转换回原始域，并将其与去趋势的信号一起绘制：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Format the x-axis labels as dates and add a legend with extra large size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 x 轴标签格式化为日期，并添加具有超大尺寸的图例：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add a second subplot and plot the frequency spectrum after filtering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个子图并在过滤后绘制频谱图：
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Display the legend and plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示图例和图解：
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following plots are of the signal and frequency spectrum:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是信号和频谱的图：
- en: '![Time for action – filtering a detrended signal](img/4154_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：过滤去趋势的信号](img/4154_10_04.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We detrended a signal and applied a simple filter on it using the `scipy.fftpack`
    module (see `frequencies.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对信号进行了去趋势处理，然后使用`scipy.fftpack`模块在其上应用了一个简单的过滤器（请参阅`frequencies.py`）：
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Mathematical optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学优化
- en: Optimization algorithms try to find the optimal solution for a problem, for
    instance, finding the maximum or the minimum of a function. The function can be
    linear or non-linear. The solution could also have special constraints. For example,
    the solution may not be allowed to have negative values. The `scipy.optimize`
    module provides several optimization algorithms. One of the algorithms is a least
    squares fitting function, `leastsq()`. When calling this function, we provide
    a residuals (error terms) function. This function minimizes the sum of the squares
    of the residuals; it corresponds to our mathematical model for the solution. It
    is also necessary to give the algorithm a starting point. This should be a best
    guess—as close as possible to the real solution. Otherwise, execution will stop
    after about `100 * (N+1)` iterations, where *N* is the number of parameters to
    optimize.
  prefs: []
  type: TYPE_NORMAL
  zh: 优化算法试图找到问题的最佳解决方案，例如，找到函数的最大值或最小值。 该函数可以是线性的或非线性的。 该解决方案也可能具有特殊的约束。 例如，可能不允许解决方案具有负值。
    `scipy.optimize`模块提供了几种优化算法。 算法之一是最小二乘拟合函数`leastsq()`。 调用此函数时，我们提供了残差（错误项）函数。
    此函数可将残差平方和最小化。 它对应于我们的解决方案数学模型。 还必须给算法一个起点。 这应该是一个最佳猜测-尽可能接近真实的解决方案。 否则，将在大约`100
    * (N+1)`次迭代后停止执行，其中 *N* 是要优化的参数数量。
- en: Time for action – fitting to a sine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：正弦拟合
- en: In the previous *Time for action* section, we created a simple filter for detrended
    data. Now, let's use a more restrictive filter that will leave us only with the
    main frequency component. We will fit a sinusoidal pattern to it and plot our
    results. This model has four parameters—amplitude, frequency, phase, and vertical
    offset.
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的“实战时间”部分中，我们为脱趋势数据创建了一个简单的过滤器。 现在，让我们使用限制性更强的过滤器，该过滤器将只剩下主要频率分量。 我们将为其拟合正弦波模式并绘制结果。
    该模型具有四个参数-幅度，频率，相位和垂直偏移。
- en: 'Define a residuals function based on a sine wave model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据正弦波模型定义残差函数：
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Transform the filtered signal back to the original domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过滤后的信号转换回原始域：
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Guess the values of the parameters of which we are trying to estimate a transformation
    from the time domain into the frequency domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 猜猜我们试图估计的从时域到频域的转换的参数值：
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The initial values appear as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 初始值如下所示：
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Call the `leastsq()`function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`leastsq()`函数：
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The final parameter values are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 最终参数值如下：
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finish the first subplot with detrended data, filtered data, and fit of the
    filtered data. Use a date format for the horizontal axis and add a legend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用去趋势数据，过滤后的数据和过滤后的数据拟合完成第一个子图。 将日期格式用于水平轴并添加图例：
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add a second subplot with a legend of the main component of the frequency spectrum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个子图，其中包含频谱主要成分的图例：
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following are the resulting charts:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果图表：
- en: '![Time for action – fitting to a sine](img/4154_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：正弦拟合](img/4154_10_05.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We detrended one year of price data for QQQ. This signal was then filtered
    until only the main component of the frequency spectrum was left over. We fitted
    a sine to the filtered signal using the `scipy.optimize` module (see `optfit.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们降低了 QQQ 一年价格数据的趋势。 然后对该信号进行过滤，直到仅剩下频谱的主要成分。 我们使用`scipy.optimize`模块（请参见`optfit.py`）将正弦拟合到过滤后的信号：
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Numerical integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值积分
- en: 'SciPy has a numerical integration package, `scipy.integrate`, which has no
    equivalent in NumPy. The `quad()` function can integrate a one-variable function
    between two points. These points can be at infinity. The function uses the simplest
    numerical integration method: the trapezoid rule.'
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 具有数值积分包`scipy.integrate`，在 NumPy 中没有等效项。 `quad()`函数可以在两个点之间整合一个单变量函数。
    这些点可以是无穷大。 该函数使用最简单的数值积分方法：梯形法则。
- en: Time for action – calculating the Gaussian integral
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：计算高斯积分
- en: The **Gaussian** **integral** is related to the `error()` function (also known
    in mathematics as `erf`), but has no finite limits. It evaluates to the square
    root of `pi`.
  prefs: []
  type: TYPE_NORMAL
  zh: '**高斯积分**是`error()`函数相关（在数学上也称为`erf`），但没有限制。 计算结果为`pi`的平方根。'
- en: '![Time for action – calculating the Gaussian integral](img/4154_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：计算高斯积分](img/4154_10_10.jpg)'
- en: 'Let''s calculate the integral with the `quad()` function (for the imports check
    the file in the code bundle):'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`quad()`函数计算积分（对于导入，请检查代码包中的文件）：
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The return value is the outcome and its error would be as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是结果，其错误如下：
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We calculated the Gaussian integral with the `quad()` function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`quad()`函数计算了高斯积分。
- en: Have a go hero – experiment a bit more
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勇往直前：更多实验
- en: Try out other integration functions from the same package. It should just be
    a matter of replacing one function call. We should get the same outcome, so you
    may also want to read the documentation to learn more.
  prefs: []
  type: TYPE_NORMAL
  zh: 试用同一包中的其他集成函数。 只需替换一个函数调用即可。 我们应该得到相同的结果，因此您可能还需要阅读文档以了解更多信息。
- en: Interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值
- en: Interpolation fills in the blanks between known data points in a dataset. The
    `scipy.interpolate()` function interpolates a function based on experimental data.
    The `interp1d` class can create a linear or cubic interpolation function. By default,
    a linear interpolation function is constructed, but if the `kind` parameter is
    set, a cubic interpolation function is created instead. The `interp2d` class works
    the same way, but in 2D.
  prefs: []
  type: TYPE_NORMAL
  zh: 插值填充数据集中已知数据点之间的空白。 `scipy.interpolate()`函数根据实验数据对函数进行插值。 `interp1d`类可以创建线性或三次插值函数。
    默认情况下，会创建线性插值函数，但是如果设置了`kind`参数，则会创建三次插值函数。 `interp2d`类的工作方式相同，但是是 2D 的。
- en: Time for action – interpolating in one dimension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：一维内插
- en: We will create data points using a `sinc()` function and add some random noise
    to it. After this, we will do a linear and cubic interpolation and plot the results.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用  `sinc()`函数创建数据点，并向其中添加一些随机噪声。 之后，我们将进行线性和三次插值并绘制结果。
- en: 'Create the data points and add noise to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据点并为其添加噪声：
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create a linear interpolation function and apply it to an input array with
    five times as many data points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个线性插值函数，并将其应用于具有五倍数据点的输入数组：
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Do the same as in the previous step, but with cubic interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行与上一步相同的操作，但使用三次插值：
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Plot the results with `matplotlib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`matplotlib`绘制结果：
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The following diagram is a plot of the data, linear, and cubic interpolation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是数据，线性和三次插值的图形：
- en: '![Time for action – interpolating in one dimension](img/4154_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：一维内插](img/4154_10_06.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We created a dataset from the `sinc()` function and added noise to it. We then
    did linear and cubic interpolation using the `interp1d` class of the `scipy.interpolate`
    module (see `sincinterp.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`sinc()`函数创建了一个数据集，并添加了噪声。 然后，我们使用`scipy.interpolate`模块的`interp1d`类（请参见`sincinterp.py`）进行了线性和三次插值  ：
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Image processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像处理
- en: With SciPy, we can do image processing using the `scipy.ndimage` package. The
    module contains various image filters and utilities.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SciPy，我们可以使用`scipy.ndimage`包进行图像处理。 该模块包含各种图像过滤器和工具。
- en: Time for action – manipulating Lena
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：操纵 Lena
- en: 'The `scipy.misc` module is a utility that loads the image of "Lena". This is
    the image of **Lena Soderberg**, traditionally used for image processing examples.
    We will apply some filters to this image and rotate it. Perform the following
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.misc`模块是一个加载“Lena”图像的工具。 这是 **Lena Soderberg** 的图像，传统上用于图像处理示例。 我们将对该图像应用一些过滤器并旋转它。
    执行以下步骤以执行  ：'
- en: 'Load the Lena image and display it in a subplot with grayscale colormap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载 Lena 图像并将其显示在带有灰度色图的子图中：
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note that we are dealing with a `float32` array.
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在处理`float32`数组。
- en: 'The **median filter** scans the image and replaces each item by the median
    of neighboring data points. Apply a median filter to the image and display it
    in a second subplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**中值过滤器**扫描图像，并用相邻数据点的中值替换每个项目。 对图像应用中值过滤器，然后在第二个子图中显示它：'
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Rotate the image and display it in the third subplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 旋转图像并将其显示在第三个子图中：
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The **Prewitt filter** is based on computing the gradient of image intensity.
    Apply a Prewitt filter to the image and display it in the fourth subplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Prewitt 过滤器**基于计算图像强度的梯度。 将 Prewitt 过滤器应用于图像，并在第四个子图中显示它：'
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The following are the resulting images:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是生成的图像：
- en: '![Time for action – manipulating Lena](img/4154_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：操纵 Lena](img/4154_10_07.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We manipulated the image of Lena in several ways using the `scipy.ndimage`
    module (see `images.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Lena 的图像：
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Audio processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频处理
- en: Now that we have done some image processing, you will probably not be surprised
    that we can do exciting things with WAV files too. Let's download a WAV file and
    replay it a couple of times. We will skip the explanation of the download part,
    which is just regular Python.
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了一些图像处理，那么您也可以使用 WAV 文件来完成令人兴奋的事情，您可能不会感到惊讶。 让我们下载一个 WAV 文件并重播几次。 我们将跳过下载部分的解释，该部分只是常规的
    Python。
- en: Time for action – replaying audio clips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间：重放音频片段
- en: We will download a WAV file of Austin Powers exclaiming *"Smashing baby"*. This
    file can be converted to a NumPy array with the `read()` function from the `scipy.io.wavfile`
    module. The `write()` function from the same package will be used to create a
    new WAV file at the end of this section. We will further use the `tile()` function
    to replay the audio clip several times.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载 Austin Powers 的  WAV 文件，称为“Smashing baby”。 可以使用`scipy.io.wavfile`模块中的  `read()`函数将此文件转换为
    NumPy 数组。 相同包中的  `write()`函数将在本节末尾用于创建新的 WAV 文件。 我们将进一步使用  `tile()`函数重播音频剪辑几次。
- en: 'Read the file with the `read()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`read()`函数读取文件：
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This gives us two items – sample rate and audio data. For this section we are
    only interested in the audio data.
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们两项–采样率和音频数据。 对于本节，我们仅对音频数据感兴趣。
- en: 'Apply the `tile()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`tile()`函数：
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Write a new file with the `write()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`write()`函数编写一个新文件：
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The original audio data and the audio clip repeated four times appear in the
    following plot:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了四次重复的原始音频数据和音频剪辑：
- en: '![Time for action – replaying audio clips](img/4154_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
  zh: '![实战时间：重放音频片段](img/4154_10_08.jpg)'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We read an audio clip, repeated it four times, and then created a new WAV file
    with the new array (see `repeat_audio.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们读取一个音频剪辑，将其重复四次，然后使用新数组（请参见`repeat_audio.py`）创建一个新的 WAV 文件：
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we only scratched the surface of what is possible with SciPy
    and SciKits. Still, we learned a bit about file I/O, statistics, signal processing,
    optimization, interpolation, audio, and image processing.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仅介绍了 SciPy 和 SciKits 可以实现的功能。 尽管如此，我们还是学到了一些有关文件 I/O，统计量，信号处理，优化，插值，音频和图像处理的知识。
- en: In the next chapter, we will create some simple, yet fun, games with Pygame—the
    open source Python game library. In the process, we will learn about NumPy integration
    with **Pygame**, a machine ning Scikits module, and more.
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Pygame（开源 Python 游戏库）创建一些简单而有趣的游戏。 在此过程中，我们将学习 NumPy 与 **Pygame**，Scikit
    机器学习库，以及其他的集成。
