["```java\npublic class Employee {\n    private String name;\n    private int zip;\n    private int age;\n   \u2026\n}\n```", "```java\nEmployee employee1 = new Employee();\nEmployee employee2 = new Employee();\n```", "```java\nEmployee employee1 = new Employee();\nEmployee employee2 = employee1;\n```", "```java\npublic class Employee {\n    public String name;\n    private int age;\n\n   ...\n\n    public int getAge() {\n        return age;\n    }\n\n    private void setAge(int age) {\n        this.age = age;\n    }\n\n}\n```", "```java\nEmployee employee = new Employee();\nint employeeAge = employee.getAge(24);\nString employeeName = employee.name;\n```", "```java\npublic class Employee {\n    public String name;\n    private int age;\n   ...\n\n    private void setAge(int age) {\n        age = age;\n    }\n\n}\n```", "```java\npublic class Employee {\n  private int age;\n     \u2026\n    private void setAge(int initialAge) {\n        age = initialAge;\n    }\n\n}\n```", "```java\npublic void setAge(final int age) {\n   age = age;\n}\n```", "```java\nfinal parameter age may not be assigned\n\nAssignment To Itself\n\n```", "```java\npublic class Employee {\n  private int age;\n   \u2026\n  private void setAge(int age) {\n      this.age = age;\n  }\n\n}\n```", "```java\n       this.age = age;\n```", "```java\nprivate Department department;\n   \u2026\nprivate void validateEmployee() {\n   if(someCondition) {\n      department.add(this);\n   }\n}\n```", "```java\nprivate Employee getReference() {\n   \u2026\n   return this;\n}\n```", "```java\npublic void passParameters(int number, String label) {\n   \u2026\n}\n```", "```java\npublic static void main(String[] args) {\n   int number = 10;\n   Employee employee1 = new Employee();\n   changeValues(number, employee1);\n   \u2026\n}\n\nprivate static void changeValues(int num, \n   Employee employee) {\n   \u2026\n}\n```", "```java\npublic static void main(String[] args) {\n   \u2026\n   int number = 10;\n   employee = new Employee();\n   employee.setAge(11);\n   changeValues(number, employee);\n\n   System.out.println(number);\n   System.out.println(employee.getAge());\n\n}\n```", "```java\nprivate static void changeValues(int num, Employee employee) {\n   num = 20;\n   employee.setAge(22);\n   employee = new Employee();\n   employee.setAge(33);\n}\n```", "```java\n10\n22\n\n```", "```java\nprivate static int largest(int... numbers) {\n   int currentLargest = numbers[0];\n   for (int number : numbers) {\n      if (number > currentLargest) {\n         currentLargest = number;\n      }\n   }\n   return currentLargest;\n}\n```", "```java\nSystem.out.println(largest(12, -12, 45, 4, 345, 23, 49));\nSystem.out.println(largest(-43, -12, -705, -48, -3));\n```", "```java\n345\n-3\n\n```", "```java\nSystem.out.println(largest());\n```", "```java\nprivate static void displayAspects(String item, \n    float... aspects) {\n   ...    \n}\n```", "```java\ndisplayAspects(\"Europa\", 2.3f, 56.005f, 0.0034f);\n```", "```java\npackage packt;\n\nimport java.util.Date;\n\nfinal public class Header {\n    private final String title;\n    private final int version;\n    private final Date date;\n\n    public Date getDate() {\n        return new Date(date.getTime());\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public int getVersion() {\n        return version;\n    }\n\n    public Header(String title, int version, Date date) {\n        this.title = title;\n        this.version = version;\n        this.date = new Date(date.getTime());\n    }\n\n    public String toString() {\n        return  \"Title: \" + this.title + \"\\n\" +\n                \"Version: \" + this.version + \"\\n\" +\n                \"Date: \" + this.date + \"\\n\";\n    }\n}\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n\n   public Employee() {\n\n   }\n\n   public Employee(String name) {\n\n   }\n\n   public Employee(String name, int zip) {\n\n   }\n\n}\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n\n   \u2026\n\n}\n```", "```java\npublic Employee() {\n    this.name = \"Default name\";\n    this.zip = 12345;\n    this.age = 21;\n}\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n   public Employee(String name) {\n\n   }\n\n   \u2026\n\n}\n```", "```java\nEmployee employee1 = new Employee();\n```", "```java\nno suitable constructor found for Employee()\n\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n\n   public Employee() {\n       this.name = \"Default name\";\n       this.zip = 12345;\n       this.age = 21;\n   }\n   public Employee(String name) {\n       this.name = name;\n       this.zip = 12345;\n       this.age = 21;\n   }\n   public Employee(String name, int zip) {\n       this.name = name;\n       this.zip = zip;\n       this.age = 21;\n   }\n\n   public Employee(String name, int zip, int age) {\n       this.name = name;\n       this.zip = zip;\n       this.age = age;\n   }\n\n}\n```", "```java\npublic class Employee {\n   private String name;\n   private int zip;\n   private int age;\n\n   public Employee() {\n       this(\"Default name\", 12345, 21);\n   }\n\n   public Employee(String name) {\n       this(name, 12345, 21);\n   }\n\n   public Employee(String name, int zip) {\n       this(name, zip, 21);\n   }\n\n   public Employee(String name, int zip, int age) {\n       this.name = name;\n       this.zip = zip;\n       this.age = age;\n   }\n}\n```", "```java\npublic class Employee {\n   private static Employee instance = null;\n   private String name;\n   private int zip;\n   private int age;\n\n   private Employee instance = null;\n   ...\n\n   private Employee() {\n      this.name = \"Default name\";\n      this.zip = 12345;\n      this.age = 21;\n   }\n\n   public Employee getInstance() {\n      if(instance == null) {\n         instance = new Employee();\n      }\n      return instance;\n   }\n\n   ...\n}\n```", "```java\npublic void Employee(String name) {\n\n}\n```", "```java\nEmployee employee = new Employee();\nemployee.Employee(\"Calling a method\");\n```", "```java\npublic class Employee {\n   ...\n   private int age = 21;\n\n   ...\n\n}\n```", "```java\npublic class Employee {\n   ...\n   private int age;\n\n   // Initialization block\n   {\n      age = 31;\n   }\n   ...\n}\n```", "```java\npublic boolean isAgeInRange(int startAge, int endAge) {\n    return (startAge <= age) && (age <= endAge);\u2029}\n```", "```java\n   public int getAgeInMonths() {\n      \u2026\n   }\n\n   public float getAgeInMonths() {\n      \u2026\n   }\n```", "```java\ngetAgeInMonths() is already defined in packt.Employee\n\n```", "```java\nEmployee employee = new Employee();\nSystem.out.println(employee.getAgeInMonths());\n```", "```java\npublic class Employee {\n    // static variables\n    private static int entityCode;\n\n    public static void setEntityCode(int entityCode) {\n        Employee.entityCode = entityCode;\n    }\n   ...\n}\n```", "```java\nEmployee employee = new Employee();\nemployee.setEntityCode(42);\nEmployee.setEntityCode(42);\n```", "```java\nAccessing static method setEntityCode\n\n```", "```java\npublic int getAgeInMonths() {\n    int months = age*12;\n    return months;\n}\n```", "```java\nint max(int, int);\nint max(int, int, int);  // Different number of parameters\nint max(int \u2026);         // Varying number of arguments\nint max(int, float);    // Different type of parameters\nint max(float, int)    // Different order of parameters\n```", "```java\nclass OverloadingDemo {\n\n    public int max(int n1, int n2, int n3) {\n        return 0;\n    }\n\n    public float max(long n1, long n2, long n3) {\n        return 0.0f;\n    }\n\n    public float max(float n1, float n2) {\n        return 0.0f;\n    }\n}\n```", "```java\nint num;\nfloat result;\nOverloadingDemo demo = new OverloadingDemo();\nnum = demo.max(45, 98, 2);\nnum = demo.max(45L, 98L, 2L);\t\t// assignment issue\nresult = demo.max(45L, 98L, 2L);\nnum = demo.max(45, 98, 2L);       // assignment issue\nresult = demo.max(45, 98, 2L);\nresult = demo.max(45.0f, 0.056f);\nresult = demo.max(45.0, 0.056f);  // Overload problem\n```", "```java\npossible loss of precision\n  required: int\n  found:    float\n```", "```java\nno suitable method found for max(double,float)\n\n```", "```java\npublic class Employee {\n   ...\n   private int age;\n   ...\n   public int getAge() {\n      return age;\n   }\n\n   public void setAge(int age) {\n      this.age = age;\n   }\n}\n```", "```java\npublic class Employee {\n    // static variables\n    private static int minimumAge;\n\n    // instance variables\n    private String name;\n    private int zip;\n    private int age;\n\n   ...\n}\n```", "```java\nEmployee employee1 = new Employee();\nEmployee employee2 = new Employee();\n```", "```java\npublic static void setMinimumAge(int minimumAge) {\n   Employee.minimumAge = minimumAge;\n}\n```", "```java\nEmployee.getAge();\n```", "```java\nnon-static method getAge() cannot be referenced from a static context\n\n```", "```java\n    public class SomeClass {public static void main(String arguments[]) {\n          someMethod(arguments);\n       }\n       public void someMethod(String[] parameters) {\n          System.out.println(parameters);\n       }\n    }\n    ```", "```java\n    public class SomeClass {\n       public SomeClass(int i, float f) { }\n       public SomeClass(float f, int i) { }\n       public SomeClass(float f) { }\n       public void SomeClass() { }\n    }\n    ```", "```java\n    class SomeClass {void method1() { }public void method2( { }\n       private void method3( { }\n       protected void method4() { }\n    }\n\n    class demo [\n       public void someMethod(String[] parameters) {SomeClass sc = new SomeClass();\n          sc.method1();\n          sc.method2();\n          sc.method3();\n          sc.method41();}\n    }\n    ```", "```java\n    public static void main(String args[]) { \n        String s = \"string 1\";\n        int i = 5;\n        someMethod1(i);\n        System.out.println(i);\n        someMethod2(s);\n        System.out.println(s);\n    }\n\n    public static void someMethod1(int i) { \n        System.out.println(++i);\n    }\n    public static void someMethod2(String s) { \n        s = \"string 2\"; \n        System.out.println(s);\n    }\n    ```"]