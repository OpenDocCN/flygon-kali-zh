- en: 1\. Creating Your First App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 创建您的第一个应用
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter is an introduction to Android, where you will set up your environment
    and focus on the fundamentals of Android development. By the end of this chapter,
    you will have gained the knowledge required to create an Android app from scratch
    and install it on a virtual or physical Android device. You will be able to analyze
    and understand the importance of the `AndroidManifest.xml` file, and use the Gradle
    build tool to configure your app and implement UI elements from Material Design.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是Android的介绍，您将设置您的环境并专注于Android开发的基础知识。通过本章的学习，您将获得创建Android应用程序所需的知识，并将其安装在虚拟或物理Android设备上。您将能够分析和理解`AndroidManifest.xml`文件的重要性，并使用Gradle构建工具来配置您的应用程序，并从Material
    Design实现UI元素。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Android is the most widely used mobile phone operating system in the world,
    with over 70% of the global market share (see [https://gs.statcounter.com/os-market-share/mobile/worldwide](https://gs.statcounter.com/os-market-share/mobile/worldwide)).
    This presents great opportunities to contribute and make an impact by learning
    Android and building apps that have a global reach. For a developer who is new
    to Android, there are many issues you must contend with in order to get started
    learning and becoming productive. This book will address these issues. After learning
    the tooling and development environment, you will explore fundamental practices
    to build Android apps. We will cover a wide range of real-world development challenges
    faced by developers and explore various techniques to overcome them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Android是世界上使用最广泛的手机操作系统，全球市场份额超过70%（参见[https://gs.statcounter.com/os-market-share/mobile/worldwide](https://gs.statcounter.com/os-market-share/mobile/worldwide)）。这为学习Android和构建具有全球影响力的应用提供了巨大的机会。对于新手Android开发者来说，有许多问题需要解决才能开始学习和提高生产力。本书将解决这些问题。在学习工具和开发环境之后，您将探索构建Android应用的基本实践。我们将涵盖开发者面临的各种现实世界开发挑战，并探索克服这些挑战的各种技术。
- en: In this chapter, you will learn how to create a basic Android project and add
    features to it. You will be introduced to the comprehensive development environment
    of Android Studio and learn about the core areas of the software to enable you
    to work productively. Android Studio provides all the tooling for application
    development, but not the knowledge. This first chapter will guide you through
    using the software effectively to build an app and configure the most common areas
    of an Android project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建一个基本的Android项目并为其添加功能。您将介绍Android Studio的全面开发环境，并了解软件的核心领域，以使您能够高效地工作。Android
    Studio提供了应用程序开发的所有工具，但不提供知识。本章将指导您有效地使用软件来构建应用程序，并配置Android项目的最常见区域。
- en: Let's get started creating an Android project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个Android项目。
- en: Creating an Android Project with Android Studio
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android Studio创建Android项目
- en: In order to be productive in terms of building Android apps, it is essential
    to become confident with how to use **Android Studio**. This is the official **Integrated
    Development Environment** (**IDE**) for Android development, built on JetBrains'
    **IntelliJ IDEA IDE** and developed by the Android Studio team at Google. You
    will be using it throughout this course to create apps and progressively add more
    advanced features.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在构建Android应用方面提高生产力，熟练使用**Android Studio**至关重要。这是Android开发的官方**集成开发环境**（**IDE**），建立在JetBrains的**IntelliJ
    IDEA IDE**上，由Google的Android Studio团队开发。您将在本课程中使用它来创建应用程序，并逐步添加更多高级功能。
- en: The development of Android Studio has followed the development of the IntelliJ
    IDEA IDE. The fundamental features of an IDE are of course present, enabling you
    to optimize your code with suggestions, shortcuts, and standard refactoring. The
    programming language you will be using throughout this course to create Android
    apps is Kotlin. Since Google I/O 2017 (the annual Google developer conference),
    this has been Google's preferred language for Android app development. What really
    sets Android Studio apart from other Android development environments is that
    **Kotlin** was created by JetBrains, the company that created IntelliJ IDEA, the
    software Android Studio is built on. You can, therefore, benefit from established
    and evolving first-class support for Kotlin.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 'Android Studio的开发遵循了IntelliJ IDEA IDE的发展。当然，IDE的基本功能都存在，使您能够通过建议、快捷方式和标准重构来优化您的代码。在本课程中，您将使用Kotlin来创建Android应用程序。自2017年Google
    I/O（Google的年度开发者大会）以来，这一直是Google首选的Android应用程序开发语言。Android Studio与其他Android开发环境的真正区别在于**Kotlin**是由JetBrains创建的，这是Android
    Studio构建在其上的IntelliJ IDEA软件的公司。因此，您可以受益于Kotlin的成熟和不断发展的一流支持。 '
- en: Kotlin was created to address some of the shortcomings of Java in terms of verbosity,
    handling null types, and adding more functional programming techniques, amongst
    many other issues. As Kotlin has been the preferred language for Android development
    since 2017, taking over from Java, you will be using it in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin是为了解决Java的一些缺点而创建的，包括冗长、处理空类型和添加更多的函数式编程技术等问题。自2017年以来，Kotlin一直是Android开发的首选语言，取代了Java，您将在本书中使用它。
- en: Getting to grips and familiarizing yourself with Android Studio will enable
    you to feel confident working on and building Android apps. So, let's get started
    creating your first project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉并熟悉Android Studio将使您有信心在Android应用上工作和构建。所以，让我们开始创建您的第一个项目。
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The installation and setup of Android Studio are covered in the *Preface*. Please
    ensure you have completed those steps before you continue.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio的安装和设置在*前言*中有介绍。请确保在继续之前已完成这些步骤。
- en: 'Exercise 1.01: Creating an Android Studio Project for Your App'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.01：为您的应用创建Android Studio项目
- en: 'This is the starting point for creating a project structure your app will be
    built upon. The template-driven approach will enable you to create a basic project
    in a short timeframe whilst setting up the building blocks you can use to develop
    your app. To complete this exercise, perform the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建应用程序结构的起点。模板驱动的方法将使您能够在短时间内创建一个基本项目，同时设置您可以用来开发应用程序的构建块。要完成此练习，请执行以下步骤：
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The version of Android Studio you will be using is *v4.1.1* (or above).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用的Android Studio版本为*v4.1.1*（或更高）。
- en: Upon opening Android Studio, you will see a window asking whether you want to
    create a new project or open an existing one. Select `Create New Project`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Studio后，您将看到一个窗口，询问您是要创建新项目还是打开现有项目。选择`创建新项目`。
- en: 'The start up window will appear as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 启动窗口将如下所示：
- en: '![Figure 1.1: Android Studio version 4.1.1'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1：Android Studio版本4.1.1'
- en: '](img/B15216_01_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_01.jpg)'
- en: 'Figure 1.1: Android Studio version 4.1.1'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Android Studio版本4.1.1
- en: 'Now, you''ll enter a simple wizard-driven flow, which greatly simplifies the
    creation of your first Android project. The next screen you will see has a large
    number of options for the initial setup you''d like your app to have:![Figure
    1.2: Starting a project template for your app'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将进入一个简单的向导驱动流程，大大简化了您的第一个Android项目的创建。您将看到的下一个屏幕上有大量选项，用于您希望应用程序具有的初始设置：![图1.2：为您的应用程序启动项目模板
- en: '](img/B15216_01_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_02.jpg)'
- en: 'Figure 1.2: Starting a project template for your app'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：为您的应用程序启动项目模板
- en: Welcome to your first introduction to the `Activity`. In Android, an `Activity`
    is a page or screen. The options you can choose from on the preceding screen all
    create this initial screen differently. The descriptions describe how the first
    screen of the app will look. These are templates to build your app with. Select
    `Empty Activity` from the template and click on next.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 欢迎来到您对`Activity`的第一次介绍。在Android中，`Activity`是一个页面或屏幕。您可以从前面的屏幕上选择的选项中以不同的方式创建此初始屏幕。描述描述了应用程序的第一个屏幕将如何显示。这些是用于构建应用程序的模板。从模板中选择`空白Activity`，然后单击下一步。
- en: 'The project configuration screen is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 项目配置屏幕如下：
- en: '![Figure 1.3: Project configuration'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3：项目配置'
- en: '](img/B15216_01_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_03.jpg)'
- en: 'Figure 1.3: Project configuration'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：项目配置
- en: 'The preceding screen configures your app. Let''s go through all the options:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的屏幕配置了您的应用程序。让我们逐个浏览所有选项：
- en: '`Name`: Similar to the name of your Android project, this name will appear
    as the default name of your app when it''s installed on a phone and visible on
    Google Play. You can replace the `Name` field with your own or set it now to the
    app you are going to create.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`名称`：与您的Android项目名称类似，当应用程序安装在手机上并在Google Play上可见时，此名称将显示为应用程序的默认名称。您可以用自己的名称替换`名称`字段，或者现在设置为您将要创建的应用程序。'
- en: '`Package name`: This uses the standard reverse domain name pattern for creating
    a name. It will be used as an address identifier for source code and assets in
    your app. It is best to make this name as clear and descriptive and as closely
    aligned with the purpose of your app as possible. Therefore, it''s probably best
    to change this to use one or more sub-domains (such as `com.sample.shop.myshop`).
    As shown in *Figure 1.3*, the `Name` of the app (in lowercase with spaces removed)
    is appended to the domain.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`包名称`：这使用标准的反向域名模式来创建名称。它将用作应用程序中源代码和资产的地址标识符。最好使此名称尽可能清晰、描述性，并与您的应用程序的目的密切相关。因此，最好更改此名称以使用一个或多个子域（例如`com.sample.shop.myshop`）。如*图1.3*所示，将应用程序的`名称`（小写并去除空格）附加到域名后面。'
- en: '`Save location`: This is the local folder on your machine where the app will
    be initially stored. This can be changed in the future, so you can probably keep
    the default or edit it to something different (such as `Users/MyUser/android/projects`).
    The default location will vary with the operating system you are using.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`保存位置`：这是您的计算机上的本地文件夹，应用程序最初将存储在其中。将来可以更改此位置，因此您可以保留默认设置或将其编辑为其他内容（例如`Users/MyUser/android/projects`）。默认位置将根据您使用的操作系统而变化。'
- en: '`Language – Kotlin`: This is Google''s preferred language for Android app development.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`语言 - Kotlin`：这是Google推荐的用于Android应用程序开发的语言。'
- en: '`Minimum SDK`: Depending on which version of Android Studio you download, the
    default might be the same as displayed in *Figure 1.3* or a different version.
    Keep this the same. Most of Android''s new features are made backward compatible,
    so your app will run fine on the vast majority of older devices. However, if you
    do want to target newer devices, you should consider raising the minimum API level.
    There is a link, `Help Me Choose`, to a dialog that explains the feature set that
    you have access to with a view to development on different versions of Android
    and the current percentage of devices worldwide running each Android version.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`最低SDK`：取决于您下载的Android Studio版本，其默认值可能与*图1.3*中显示的相同，也可能不同。保持不变。大多数Android的新功能都是向后兼容的，因此您的应用程序将在绝大多数旧设备上运行良好。但是，如果您想要针对新设备进行开发，您应该考虑提高最低API级别。有一个名为`帮助我选择`的链接，指向一个对话框，解释了您可以访问的功能集，以便在不同版本的Android上进行开发，以及全球各地运行每个Android版本的设备的当前百分比。'
- en: '`(Checkbox) use legacy android.support libraries`. Leave this unchecked. You
    will be using AndroidX libraries, which are the replacement for the support libraries
    that were designed to make features on newer versions of Android backward compatible
    with older versions, but it provides much more than this. It also contains newer
    Android components called Jetpack, which, as the name suggests, "boost" your Android
    development and provide a host of rich features you will want to use in your app,
    thereby simplifying common operations.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: （复选框）使用传统的android.support库。不要选中此复选框。您将使用AndroidX库，这是支持库的替代品，旨在使新版本Android上的功能向后兼容旧版本，但它提供的远不止于此。它还包含称为Jetpack的新Android组件，正如其名称所示，它可以“增强”您的Android开发，并提供一系列丰富的功能，您将希望在应用程序中使用，从而简化常见操作。
- en: 'Once you have filled in all these details, select `Finish`. Your project will
    be built and you will then be presented with the following screen or similar:
    You can immediately see the activity that has been created (`MainActivity`) in
    one tab and the layout used for the screen in the other tab (`activity_main.xml`).
    The application structure folders are in the left panel.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您填写了所有这些细节，选择`完成`。您的项目将被构建，然后您将看到以下屏幕或类似的屏幕：您可以立即在一个选项卡中看到已创建的活动（`MainActivity`），在另一个选项卡中看到用于屏幕的布局（`activity_main.xml`）。应用程序结构文件夹在左侧面板中。
- en: '![Figure 1.4: Android Studio default project'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.4：Android Studio默认项目'
- en: '](img/B15216_01_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_04.jpg)'
- en: 'Figure 1.4: Android Studio default project'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：Android Studio默认项目
- en: In this exercise, you have gone through the steps to create your first Android
    app using Android Studio. This has been a template-driven approach that has shown
    you the core options you need to configure for your app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经完成了使用Android Studio创建您的第一个Android应用程序的步骤。这是一个模板驱动的方法，向您展示了您需要为应用程序配置的核心选项。
- en: In the next section, you will set up a virtual device and see your app run for
    the first time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将设置一个虚拟设备，并首次看到您的应用程序运行。
- en: Setting Up a Virtual Device and Running Your App
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟设备并运行您的应用
- en: As a part of installing Android Studio, you downloaded and installed the latest
    Android SDK components. These included a base emulator, which you will configure
    to create a virtual device to run Android apps on. The benefit is that you can
    make changes and quickly see them on your desktop whilst developing your app.
    Although virtual devices do not have all the features of a real device, the feedback
    cycle is often quicker than going through the steps of connecting a real device.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为安装Android Studio的一部分，您下载并安装了最新的Android SDK组件。其中包括一个基本的模拟器，您将配置它来创建一个虚拟设备来运行Android应用程序。好处是您可以在开发应用程序时在桌面上进行更改并快速查看它们。虽然虚拟设备没有真实设备的所有功能，但反馈周期通常比连接真实设备的步骤更快。
- en: Also, although you should ensure your app runs as expected on different devices,
    you can standardize it by targeting a specific device by downloading an emulator
    skin even if you don't have the real device if this is a requirement of your project.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，虽然您应该确保您的应用在不同设备上正常运行，但如果这是项目的要求，您可以通过下载模拟器皮肤来针对特定设备进行标准化，即使您没有真实设备也可以做到这一点。
- en: 'The screen you will have seen (or something similar) when installing Android
    Studio is as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您在安装Android Studio时看到的屏幕（或类似的内容）如下：
- en: '![Figure 1.5: SDK components'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.5：SDK组件'
- en: '](img/B15216_01_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_05.jpg)'
- en: 'Figure 1.5: SDK components'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：SDK组件
- en: 'Let''s take a look at the SDK components that are installed and how the virtual
    device fits in:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看已安装的SDK组件以及虚拟设备的作用：
- en: '**Android Emulator**: This is the base emulator, which we will configure to
    create virtual devices of different Android makes and models.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android模拟器**：这是基本模拟器，我们将配置它来创建不同Android品牌和型号的虚拟设备。'
- en: '**Android SDK Build-Tools**: Android Studio uses the build tools to build your
    app. This process involves compiling, linking, and packaging your app to prepare
    it for installation on a device.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK构建工具**：Android Studio使用构建工具来构建您的应用程序。这个过程涉及编译、链接和打包您的应用程序，以便为设备安装做好准备。'
- en: '`Jelly Bean` was selected above in the Create Project wizard for configuring
    the minimum API level of your project. From Android 10, the versioning will no
    longer have a code name that is different from the version name. (The versions
    of the Build-Tools and Platform will change as new versions are released)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建项目向导中选择了`Jelly Bean`来配置项目的最低API级别。从Android 10开始，版本将不再有与版本名称不同的代码名称。（Build-Tools和Platform的版本将随着新版本的发布而改变）
- en: '**Android SDK Platform-Tools**: These are tools you can use, ordinarily, from
    the command line, to interact with and debug your app.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK平台工具**：这些工具通常是您可以从命令行中使用的工具，用于与您的应用程序进行交互和调试。'
- en: '**Android SDK Tools**: In contrast to the platform tools, these are tools that
    you use predominantly from within Android Studio in order to accomplish certain
    tasks, such as the virtual device for running apps and the SDK manager to download
    and install platforms and other components of the SDK.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android SDK工具**：与平台工具相比，这些工具主要是您在Android Studio中使用的工具，用于完成某些任务，例如运行应用程序的虚拟设备和SDK管理器以下载和安装SDK的平台和其他组件。'
- en: '**Intel x86 Emulator Accelerator (HAXM installer)**: If your OS provides it,
    this is a feature at the hardware level of your computer you will be prompted
    to enable, which allows your emulator to run more quickly.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Intel x86模拟器加速器（HAXM安装程序）**：如果您的操作系统提供了它，这是您的计算机硬件级别的功能，您将被提示启用，这样您的模拟器可以运行得更快。'
- en: '**SDK Patch Applier v4**: As newer versions of Android Studio become available,
    this enables patches to be applied to update the version you are running.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SDK补丁应用程序v4**：随着新版本的Android Studio的推出，这使得可以应用补丁来更新您正在运行的版本。'
- en: With this knowledge, let's start with the next exercise of this chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，让我们开始本章的下一个练习。
- en: 'Exercise 1.02: Setting Up a Virtual Device and Running Your App on It'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.02：设置虚拟设备并在其上运行您的应用
- en: 'We set up an Android Studio project to create our app in *Exercise 1.01*, *Creating
    an Android Studio Project for Your App*, and we are now going to run it on a virtual
    device. You can also run your app on a real device, but in this exercise, you
    will use a virtual device. This process is a continuous cycle whilst working on
    your app. Once you have implemented a feature, you can verify its look and behavior
    as you require. For this exercise, you will create a single virtual device, but
    you should ensure you run your app on multiple devices to verify that its look
    and behavior are consistent. Perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*练习1.01*中设置了一个Android Studio项目来创建我们的应用程序，现在我们将在虚拟设备上运行它。您也可以在真实设备上运行您的应用程序，但在本练习中，您将使用虚拟设备。在开发应用程序时，这个过程是一个持续的循环。一旦您实现了一个功能，您可以根据需要验证其外观和行为。在本练习中，您将创建一个虚拟设备，但您应该确保在多个设备上运行您的应用程序，以验证其外观和行为是否一致。执行以下步骤：
- en: 'In the top toolbar in Android Studio, you will see two drop-down boxes next
    to each other pre-selected with `app` and `No devices`:![Figure 1.6: Android Studio
    toolbar'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio的顶部工具栏中，您将看到两个并排的下拉框，预先选择了`app`和`无设备`：![图1.6：Android Studio工具栏
- en: '](img/B15216_01_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_06.jpg)'
- en: 'Figure 1.6: Android Studio toolbar'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：Android Studio工具栏
- en: The `app` is the configuration of our app that we are going to run. As we haven't
    set up a virtual device yet, it says `No devices`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`app`是我们将要运行的应用程序的配置。由于我们还没有设置虚拟设备，因此显示为`无设备`。'
- en: 'In order to create a virtual device, click on the `AVD Manager` (`Tools` menu:![Figure
    1.7: AVD Manager in the Tools menu'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建虚拟设备，请点击`AVD Manager`（`工具`菜单：![图1.7：工具菜单中的AVD管理器
- en: '](img/B15216_01_07.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_07.jpg)'
- en: 'Figure 1.7: AVD Manager in the Tools menu'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：工具菜单中的AVD管理器
- en: 'Click the button or toolbar option to open the `Your Virtual Devices` window:![Figure
    1.8: The Your Virtual Devices window'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮或工具栏选项以打开`您的虚拟设备`窗口：![图1.8：您的虚拟设备窗口
- en: '](img/B15216_01_08.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_08.jpg)'
- en: 'Figure 1.8: The Your Virtual Devices window'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：您的虚拟设备窗口
- en: 'Click the `Create Virtual Device...` button as shown in *Figure 1.8*:![Figure
    1.9: Device definition creation'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`创建虚拟设备...`按钮，如*图1.8*所示：![图1.9：设备定义创建
- en: '](img/B15216_01_09.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_09.jpg)'
- en: 'Figure 1.9: Device definition creation'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：设备定义创建
- en: 'We are going to choose the `Pixel 3` device. The real (non-virtual device)
    Pixel range of devices are developed by Google and have access to the most up-to-date
    versions of the Android platform. Once selected, click the `Next` button:![Figure
    1.10: System Image'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择`Pixel 3`设备。由Google开发的真实（非虚拟设备）Pixel系列设备可以访问最新版本的Android平台。选择后，点击`下一步`按钮：![图1.10：系统镜像
- en: '](img/B15216_01_10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_10.jpg)'
- en: 'Figure 1.10: System Image'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：系统镜像
- en: The `R` name displayed here is the initial code/release name for Android 11\.
    Select the latest system image available. The `Target` column might also show
    `(Google Play)` or `(Google APIs)` in the name. Google APIs mean that the system
    image comes pre-installed with Google Play Services. This is a rich feature set
    of Google APIs and Google apps that your app can use and interact with. On first
    running the app, you will see apps such as Maps and Chrome instead of a plain
    emulator image. A Google Play system image means that, in addition to the Google
    APIs, the Google Play app will also be installed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的`R`名称是Android 11的初始代码/发布名称。选择最新的系统镜像。`目标`列可能还会显示名称中的`(Google Play)`或`(Google
    APIs)`。Google APIs表示系统镜像预装了Google Play服务。这是一组丰富的Google API和Google应用程序功能，您的应用程序可以使用和交互。首次运行应用程序时，您将看到诸如地图和Chrome之类的应用程序，而不是普通的模拟器图像。Google
    Play系统镜像意味着除了Google API之外，还将安装Google Play应用程序。
- en: 'You should develop your app with the latest version of the Android platform
    to benefit from the latest features. On first creating a virtual device, you will
    have to download the system image. If a `Download` link is displayed next to `Release
    Name`, click on it and wait for the download to complete. Select the `Next` button
    to see the virtual device you have set up:![Figure 1.11: Virtual device configuration'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该使用最新版本的Android平台开发您的应用程序，以从最新功能中受益。首次创建虚拟设备时，您将需要下载系统镜像。如果`发布名称`旁边显示`下载`链接，请点击它并等待下载完成。选择`下一步`按钮以查看您设置的虚拟设备：![图1.11：虚拟设备配置
- en: '](img/B15216_01_11.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_11.jpg)'
- en: 'Figure 1.11: Virtual device configuration'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：虚拟设备配置
- en: You will then see a final configuration screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将看到最终的配置屏幕。
- en: 'Click `Finish` and your virtual device will be created. You will then see your
    device highlighted:![Figure 1.12: Virtual devices listed'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`完成`，您的虚拟设备将被创建。然后您将看到您的设备被突出显示：![图1.12：虚拟设备列表
- en: '](img/B15216_01_12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_12.jpg)'
- en: 'Figure 1.12: Virtual devices listed'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：虚拟设备列表
- en: 'Press the right arrow button under the `Actions` column to run up the virtual device:![Figure
    1.13: Virtual device launched'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下`操作`列下的右箭头按钮来启动虚拟设备：![图1.13：虚拟设备已启动
- en: '](img/B15216_01_13.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_13.jpg)'
- en: 'Figure 1.13: Virtual device launched'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：虚拟设备已启动
- en: Now that you've created the virtual device and it's running, you can go back
    into Android Studio to run your app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了虚拟设备并且正在运行，您可以回到Android Studio运行您的应用程序。
- en: 'The virtual device you have set up and started will be selected. Press the
    green triangle/play button to launch your app:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您设置并启动的虚拟设备将被选中。按下绿色三角形/播放按钮启动您的应用程序：
- en: '![Figure 1.14: App launch configuration'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.14：应用程序启动配置'
- en: '](img/B15216_01_14.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_14.jpg)'
- en: 'Figure 1.14: App launch configuration'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：应用程序启动配置
- en: '![Figure 1.15: App running on a virtual device'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.15：在虚拟设备上运行的应用程序'
- en: '](img/B15216_01_15.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_15.jpg)'
- en: 'Figure 1.15: App running on a virtual device'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：在虚拟设备上运行的应用程序
- en: In this exercise, you have gone through the steps to create a virtual device
    and run the app you created on it. The Android Virtual Device Manager, which you
    have used to do this, enables you to create the device (or range of devices) you
    would like to target your app for. Running your app on the virtual device allows
    a quick feedback cycle to verify how a new feature development behaves and that
    it displays the way you expect it to.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经完成了创建虚拟设备并在其上运行您创建的应用程序的步骤。您用于执行此操作的Android虚拟设备管理器使您能够为您的应用程序定位目标设备（或设备范围）。在虚拟设备上运行您的应用程序可以快速验证新功能开发的行为方式以及它是否显示您期望的方式。
- en: Next, you will explore the `AndroidManifest.xml` file of your project, which
    contains the information and configuration of your app.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将探索项目的`AndroidManifest.xml`文件，其中包含应用程序的信息和配置。
- en: The Android Manifest
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android清单
- en: 'The app you have just created, although simple, encompasses the core building
    blocks that you will use in all of the projects you create. The app is driven
    from the `AndroidManifest.xml` file, a manifest file that details the contents
    of your app. It has all the components, such as activities, content providers,
    services, receivers, and the list of permissions that the app requires to implement
    its features. For example, the camera permission is required to capture a photo
    in an app. You can find it in the Project view under `MyApplication` | `app` |
    `src` | `main`. Alternatively, if you are looking at the Android view, it is located
    at `app` | `manifests` | `AndroidManifest.xml`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚创建的应用程序虽然简单，但包含了您在创建的所有项目中将使用的核心构建模块。该应用程序是从`AndroidManifest.xml`文件驱动的，这是一个详细描述您的应用程序内容的清单文件。它包含了所有组件，如活动、内容提供程序、服务、接收器以及应用程序实现其功能所需的权限列表。例如，应用程序需要相机权限来在应用程序中拍摄照片。您可以在项目视图下找到它，路径为`MyApplication`
    | `app` | `src` | `main`。或者，如果您正在查看Android视图，则它位于`app` | `manifests` | `AndroidManifest.xml`：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A typical manifest file in general terms is a top-level file that describes
    the enclosed files or other data and associated metadata that forms a group or
    unit. The Android Manifest takes this concept and applies it to your Android app
    as an XML file. The distinguishing feature of the app specified is the package
    defined at the manifest XML root:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，典型的清单文件是一个描述所包含的文件或其他数据以及形成组或单元的相关元数据的顶层文件。Android清单将这个概念应用到您的Android应用程序中，作为一个XML文件。指定的应用程序的区别特征是在清单XML根部定义的包：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Every Android app has an application class that allows you to configure the
    app. By default, in version 4.1.1 of Android Studio, the following XML attributes
    and values are created in the application element:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android应用程序都有一个应用程序类，允许您配置应用程序。默认情况下，在Android Studio的4.1.1版本中，应用程序元素中创建了以下XML属性和值：
- en: '`android:allowBackup="true"`: This backs up a user''s data from apps that target
    and run on Android 6.0 (API level 23) or later upon reinstall or switching devices.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:allowBackup="true"`：这将在重新安装或切换设备时备份目标并在Android 6.0（API级别23）或更高版本上运行的应用程序的用户数据。'
- en: '`android:icon="@mipmap/ic_launcher"`: The resources Android uses are referenced
    in XML preceded by the `@` symbol and mipmap refers to the folder where launcher
    icons are stored.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:icon="@mipmap/ic_launcher"`：Android使用的资源在XML中以`@`符号开头引用，mipmap指的是存储启动器图标的文件夹。'
- en: '`android:label="@string/app_name"`: This is the name you specified when you
    created the app. It''s also currently displayed in the toolbar of the app and
    will be shown as the name of the app on the user''s device in the launcher. It
    is referenced by the `@` symbol followed by a string reference to the name you
    specified when you created the app.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:label="@string/app_name"`：这是您创建应用程序时指定的名称。它目前显示在应用程序的工具栏中，并将显示为用户设备上启动器中应用程序的名称。它由`@`符号后跟着您创建应用程序时指定的名称的字符串引用引用。'
- en: '`android:roundIcon="@mipmap/ic_launcher_round"`: Depending on the device the
    user has, the launcher icons may be square or round. `roundIcon` is used when
    the user''s device displays round icons in the launcher.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:roundIcon="@mipmap/ic_launcher_round"`：根据用户所使用的设备，启动器图标可能是方形的或圆形的。当用户的设备在启动器中显示圆形图标时，将使用`roundIcon`。'
- en: '`android:supportsRtl="true``"`: This specifies whether the app and its layout
    files support right-to-left language layouts.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:supportsRtl="true"`：这指定了应用程序及其布局文件是否支持从右到左的语言布局。'
- en: '`android:theme="@style/Theme.MyApplication"`: This specifies the theme of your
    app in terms of text styles, colors, and other styles within your app.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:theme="@style/Theme.MyApplication"`：这指定了您的应用程序的主题，包括文本样式、颜色和应用程序内的其他样式。'
- en: 'After the `<application>` element opens, you define the components your app
    consists of. As we have just created our app, it only contains the first screen
    shown in the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在`<application>`元素打开后，您可以定义应用程序包含的组件。由于我们刚刚创建了我们的应用程序，它只包含以下代码中显示的第一个屏幕：
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next child XML node specified is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来指定的子XML节点如下：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Android uses intents as a mechanism for interacting with apps and system components.
    Intents get sent and the intent filter registers your app's capability to react
    to these intents. `<android.intent.action.MAIN>` is the main entry point into
    your app, which, as it appears in the enclosing XML of `.MainActivity`, specifies
    that this screen will be started when the app is launched. `android.intent.category.LAUNCHER`
    states that your app will appear in the launcher of your user's device.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Android使用意图作为与应用程序和系统组件交互的机制。意图被发送，而意图过滤器注册了您的应用程序对这些意图做出反应的能力。`<android.intent.action.MAIN>`是您的应用程序的主要入口点，它在`.MainActivity`的封闭XML中出现，指定了当应用程序启动时将启动该屏幕。`android.intent.category.LAUNCHER`表示您的应用程序将出现在用户设备的启动器中。
- en: As you have created your app from a template, it has a basic manifest that will
    launch the app and display an initial screen at startup through an `Activity`
    component. Depending on which other features you want to add to your app, you
    may need to add permissions in the Android Manifest file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您是从模板创建应用程序，它具有一个基本的清单，将通过`Activity`组件启动应用程序并在启动时显示初始屏幕。根据您想要为应用程序添加哪些其他功能，您可能需要在Android清单文件中添加权限。
- en: 'Permissions are grouped into three different categories: normal, signature,
    and dangerous.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 权限分为三种不同的类别：普通、签名和危险。
- en: '**Normal** permissions include accessing the network state, Wi-Fi, the internet,
    and Bluetooth. These are usually permitted without asking the user''s consent
    at runtime.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通**权限包括访问网络状态、Wi-Fi、互联网和蓝牙。通常情况下，这些权限在运行时可以不经用户同意而被允许。'
- en: '**Signature** permissions are those shared by the same group of apps that have
    to be signed with the same certificate. This means these apps can share data freely,
    but other apps can''t get access.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**权限是由同一组应用程序共享的权限，必须使用相同的证书进行签名。这意味着这些应用程序可以自由共享数据，但其他应用程序无法访问。'
- en: '**Dangerous** permissions are centered around the user and their privacy, for
    example, sending SMS, access to accounts and location, and reading and writing
    to the filesystem and contacts.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**危险**权限围绕用户及其隐私展开，例如发送短信、访问帐户和位置，以及读写文件系统和联系人。'
- en: These permissions have to be listed in the manifest, and, in the case of dangerous
    permissions from Android Marshmallow API 23 (Android 6 Marshmallow) onward, you
    must also ask the user to grant the permissions at runtime.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限必须在清单中列出，并且从Android Marshmallow API 23（Android 6 Marshmallow）开始，对于危险权限，您还必须在运行时要求用户授予权限。
- en: In the next exercise, we will configure the Android Manifest file.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将配置Android清单文件。
- en: 'Exercise 1.03: Configuring the Android Manifest Internet Permission'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.03：配置Android清单互联网权限
- en: 'The key permission that most apps require is access to the internet. This is
    not added by default. In this exercise, we will fix that and, in the process,
    load a `WebView`, which enables the app to show web pages. This use case is a
    very common one in Android app development as most commercial apps will display
    a privacy policy, terms and conditions, etc. As these documents are likely to
    be common to all platforms, the usual way to display them is to load a web page.
    Perform the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序需要的关键权限是访问互联网。这不是默认添加的。在这个练习中，我们将修复这个问题，并在此过程中加载一个`WebView`，这使得应用程序可以显示网页。这种用例在Android应用程序开发中非常常见，因为大多数商业应用程序都会显示隐私政策、条款和条件等。由于这些文件可能对所有平台都是通用的，通常显示它们的方式是加载一个网页。执行以下步骤：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio Project for Your App*.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像在*练习1.01*中一样创建一个新的Android Studio项目，为您的应用程序创建一个Android Studio项目。
- en: Switch tabs to the `MainActivity` class. From the main project window, it's
    located in `MyApplication` | `app` | `src` | `main` | `java` | `com` | `example`
    | `myapplication`. This follows the package structure you defined when creating
    the app. Alternatively, if you are looking at the Android view within the project
    window, it is located at `app` | `java` | `com` | `example` | `myapplication`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`MainActivity`类的标签。从主项目窗口，它位于`MyApplication` | `app` | `src` | `main` | `java`
    | `com` | `example` | `myapplication`。这遵循您创建应用程序时定义的包结构。或者，如果您正在项目窗口中查看Android视图，则它位于`app`
    | `java` | `com` | `example` | `myapplication`。
- en: You can change what the `Project` window displays by opening up the `Tool` window
    by selecting `View | Tool Windows | Project` - this will select `Project` view.
    The drop-down options on the top of the `Project` window allow you to change the
    way you view your project, with the most commonly used displays being `Project`
    and `Android`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过选择`View | Tool Windows | Project`来打开`Tool`窗口，从而更改`Project`窗口显示的内容 - 这将选择`Project`视图。`Project`窗口顶部的下拉选项允许您更改查看项目的方式，最常用的显示方式是`Project`和`Android`。
- en: '![Figure 1.16 Tool Windows drop-down'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.16 工具窗口下拉'
- en: '](img/B15216_01_16.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_16.jpg)'
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You'll examine the contents of this file in more detail in the next section
    of this chapter, but for now, you just need to be aware that the `setContentView(R.layout.Activity_main)`
    statement sets the layout of the UI you saw when you first ran the app in the
    virtual device.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章的下一部分更详细地检查此文件的内容，但现在，您只需要知道`setContentView(R.layout.Activity_main)`语句设置了您在虚拟设备上首次运行应用程序时看到的UI布局。
- en: 'Use the following code to change this to the following:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更改为以下内容：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So, you are replacing the layout file with a `WebView`. The `val` keyword is
    a read-only property reference, which can't be changed once it has been set. JavaScript
    needs to be enabled in the WebView to execute JavaScript.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您正在用`WebView`替换布局文件。`val`关键字是只读属性引用，一旦设置就无法更改。WebView需要启用JavaScript才能执行JavaScript。
- en: Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We are not setting the type, but Kotlin has type inference, so it will infer
    the type if possible. So, specifying the type explicitly with `val webView: WebView
    = WebView(this)` is not necessary. Depending on which programming languages you
    have used in the past, the order of defining the parameter name and type may or
    may not be familiar. Kotlin follows Pascal notation, that is, name followed by
    type.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '我们没有设置类型，但Kotlin具有类型推断，因此如果可能的话，它会推断出类型。因此，不需要使用`val webView: WebView = WebView(this)`显式指定类型。根据您过去使用的编程语言，定义参数名称和类型的顺序可能会很熟悉，也可能不会。Kotlin遵循Pascal符号，即名称后跟类型。'
- en: Now, run the app up and the text will appear as shown in the screenshot here:![Figure
    1.17 No internet permission error message
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行应用程序，文本将显示如下所示的屏幕截图：![图1.17 无互联网权限错误消息
- en: '](img/B15216_01_17.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_17.jpg)'
- en: Figure 1.17 No internet permission error message
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17 无互联网权限错误消息
- en: 'This error occurs because there is no `INTERNET` permission added in your `AndroidManifest.xml`
    file. (If you get the error `net::ERR_CLEARTEXT_NOT_PERMITTED`, this is because
    the URL you are loading into the `WebView` is not HTTPS and non-HTTPS traffic
    is disabled from API level 28, Android 9.0 Pie and above.) Let''s fix that by
    adding the internet permission to the manifest. Open up the Android Manifest and
    add the following to above the `<application>` tag:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个错误是因为在您的`AndroidManifest.xml`文件中没有添加`INTERNET`权限。 (如果您收到错误`net::ERR_CLEARTEXT_NOT_PERMITTED`，这是因为您加载到`WebView`中的URL不是HTTPS，而从API级别28、Android
    9.0 Pie及以上版本开始，非HTTPS流量被禁用。) 让我们通过向清单添加Internet权限来解决这个问题。打开Android清单，并在`<application>`标签上方添加以下内容：
- en: '[PRE6]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your manifest file should now look like the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您的清单文件现在应该如下所示：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Uninstall the app from the virtual device before running up the app again. You
    need to do this as app permissions can sometimes get cached. Do this by long pressing
    on the app icon and selecting the `App Info` option that appears and then pressing
    the Bin icon with `Uninstall` text below it. Alternatively, long press the app
    icon and then drag it to the Bin icon with `Uninstall` text beside it in the top-right
    corner of the screen.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在再次运行应用程序之前，从虚拟设备中卸载应用程序。有时需要这样做，因为应用程序权限有时会被缓存。长按应用图标，选择出现的`App Info`选项，然后按下带有`Uninstall`文本的垃圾桶图标。或者，长按应用图标，然后将其拖动到屏幕右上角带有`Uninstall`文本的垃圾桶图标旁边。
- en: 'Install the app again and see the web page appear in the `WebView`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次安装应用程序，看到网页出现在`WebView`中：
- en: '![Figure 1.18 App displaying the WebView'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.18 应用程序显示WebView'
- en: '](img/B15216_01_18.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_18.jpg)'
- en: Figure 1.18 App displaying the WebView
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18 应用程序显示WebView
- en: In this example, you learned how to add a permission to the manifest. The Android
    Manifest can be thought of as a table of contents of your app. It lists all the
    components and permissions your app uses. As you have seen from starting the app
    from the launcher, it also provides the entry points into your app.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您学会了如何向清单中添加权限。Android清单可以被视为您的应用程序的目录。它列出了应用程序使用的所有组件和权限。正如您从启动器启动应用程序所看到的那样，它还提供了进入应用程序的入口点。
- en: In the next section, you will explore the Android build system, which uses the
    Gradle build tool to get your app up and running.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将探索Android构建系统，该系统使用Gradle构建工具来使您的应用程序正常运行。
- en: Using Gradle to Build, Configure, and Manage App Dependencies
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gradle构建、配置和管理应用程序依赖项
- en: In the course of creating this project, you have principally used the Android
    platform SDK. The necessary Android libraries were downloaded when you installed
    Android Studio. These are not the only libraries, however, that are used to create
    your app. In order to configure and build your Android project or app, a build
    tool called Gradle is used. Gradle is a multi-purpose build tool that Android
    Studio uses to build your app. By default, in Android Studio, it uses Groovy,
    a dynamically typed JVM language, to configure the build process and allows easy
    dependency management so you can add libraries to your project and specify the
    versions. Android Studio can also be configured to use Kotlin to configure builds,
    but, as the default language is Groovy, you will be using this. The files that
    this build and configuration information is stored in are named `build.gradle`.
    When you first create your app, there are two `build.gradle` files, one at the
    root/top level of the project and one specific to your app in the app `module`
    folder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建此项目的过程中，您主要使用了Android平台SDK。安装Android Studio时，必要的Android库已经下载。然而，这些并不是创建您的应用程序所使用的唯一库。为了配置和构建您的Android项目或应用程序，使用了一个名为Gradle的构建工具。Gradle是Android
    Studio用来构建您的应用程序的多用途构建工具。在Android Studio中，默认情况下使用Groovy，这是一种动态类型的JVM语言，用于配置构建过程，并允许轻松管理依赖项，以便向项目添加库并指定版本。Android
    Studio也可以配置为使用Kotlin来配置构建，但是由于默认语言是Groovy，您将使用这种语言。存储此构建和配置信息的文件名为`build.gradle`。当您首次创建应用程序时，会有两个`build.gradle`文件，一个位于项目的根/顶级目录，另一个位于应用程序`module`文件夹中。
- en: Project-Level build.gradle file
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目级`build.gradle`文件
- en: 'Let''s now have a look at the project-level `build.gradle` file. This is where
    you add configuration options common to all sub-projects/modules, as shown in
    the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下项目级`build.gradle`文件。这是您添加到所有子项目/模块的通用配置选项的地方，如下所示：
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `buildscript` block has build and configuration information to actually
    create your project, whilst the `allprojects` block specifies the configuration
    for all of the app''s modules. Groovy works on a plugin system, so you can write
    your own plugin that does a task or series of tasks and plug it into your build
    pipeline. The two plugins specified here are the Android tools plugin, which hooks
    into the `gradle` build toolkit and provides Android-specific settings and configuration
    to build your Android app, and the Kotlin `gradle` plugin, which takes care of
    compiling Kotlin code within the project. The dependencies themselves follow the
    Maven `groupId`, `artifactId`, and `versionId` separated by "`:`" colons. So as
    an example, the Android tools plugin dependency above is shown as:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildscript`块包含了实际创建项目的构建和配置信息，而`allprojects`块指定了所有应用程序模块的配置。Groovy工作在一个插件系统上，因此您可以编写自己的插件来执行任务或一系列任务，并将其插入到构建流水线中。这里指定的两个插件是Android工具插件，它连接到`gradle`构建工具包，并提供了特定于Android的设置和配置来构建您的Android应用程序，以及Kotlin
    `gradle`插件，它负责在项目中编译Kotlin代码。依赖项本身遵循Maven的`groupId`、`artifactId`和`versionId`，用"`:`"冒号分隔。因此，上面的Android工具插件依赖项如下所示：'
- en: '`''com.android.tools.build:gradle:4.4.1''`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`''com.android.tools.build:gradle:4.4.1''`'
- en: The `groupId` is `com.android.tools.build`, the `artifactId` is `gradle`, and
    the `versionId` is `4.4.1`. In this way, the build system locates and downloads
    these dependencies by using the repositories referenced in the `repositories`
    block.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId` 是 `com.android.tools.build`，`artifactId` 是 `gradle`，`versionId` 是
    `4.4.1`。这样，构建系统通过使用`repositories`块中引用的仓库来定位和下载这些依赖项。'
- en: The specific versions of libraries can be specified directly (as is done with
    the Android `tools` plugin) in the dependency or added as variables. The `ext.`
    prefix on the variable means it is a Groovy extension property and can be used
    in the app `build.gradle` file as well.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 库的具体版本可以直接指定（就像Android `tools`插件中所做的那样）在依赖项中，或者作为变量添加。变量上的`ext.`前缀表示它是Groovy扩展属性，也可以在应用程序`build.gradle`文件中使用。
- en: Note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The dependency versions specified in the previous code section and in the following
    sections of this and other chapters are subject to change, and are updated over
    time so are likely to be higher when you create these projects.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码部分和本章节以及其他章节的后续部分中指定的依赖版本可能会发生变化，并且随着时间的推移会进行更新，因此在创建这些项目时可能会更高。
- en: App-Level build.gradle
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用级别的build.gradle
- en: 'The `build.gradle` app is specific to your project configuration:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle`应用程序是特定于您的项目配置的：'
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The plugins for Android and Kotlin detailed in the preceding explanation are
    applied to your project here by id in the `plugins` lines.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的解释中详细介绍的Android和Kotlin插件通过`plugins`行中的id应用于您的项目。
- en: 'The `android` block provided by the `com.android.application` plugin is where
    you configure your Android-specific configuration settings:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.android.application`插件提供的`android`块是您配置Android特定配置设置的地方：'
- en: '`compileSdkVersion`: This is used to define the API level the app has been
    compiled with and the app can use the features of this API and lower.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compileSdkVersion`：用于定义应用程序已编译的API级别，应用程序可以使用此API及更低版本的功能。'
- en: '`buildToolsVersion`: The version of the build tools to build your app. (By
    default the `buildToolsVersion` line will be added to your project, but in order
    to always use the latest version of the build tools you can remove it).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildToolsVersion`：构建应用程序所需的构建工具的版本。（默认情况下，`buildToolsVersion`行将被添加到您的项目中，但是为了始终使用最新版本的构建工具，您可以将其删除）。'
- en: '`defaultConfig`: This is the base configuration of your app.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultConfig`：这是您的应用程序的基本配置。'
- en: '`applicationId`: This is set to the package of your app and is the app identifier
    that is used on Google Play to uniquely identify your app. It can be changed to
    be different from the package name if required.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationId`：这是设置为您的应用程序包的标识符，并且是在Google Play上用于唯一标识您的应用程序的应用程序标识符。如果需要，可以更改为与包名称不同。'
- en: '`minSdkVersion`: The minimum API level your app supports. This will filter
    out your app from being displayed in Google Play for devices that are lower than this.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minSdkVersion`：您的应用程序支持的最低API级别。这将使您的应用程序在低于此级别的设备上不会在Google Play中显示。'
- en: '`targetSdkVersion`: The API level you are targeting. This is the API level
    your built app is intended to work with and has been tested with.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targetSdkVersion`：您正在针对的API级别。这是您构建的应用程序预期使用并已经测试的API级别。'
- en: '`versionCode`: Specifies the version code of your app. Every time an update
    needs to be made to the app, the version code needs to be increased by 1 or more.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`versionCode`：指定您的应用程序的版本代码。每次需要对应用程序进行更新时，版本代码都需要增加1或更多。'
- en: '`versionName`: A user-friendly version name that usually follows semantic versioning
    of X.Y.Z, where X is the major version, Y is the minor version, and Z is the patch
    version, for example, 1.0.3.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`versionName`：一个用户友好的版本名称，通常遵循X.Y.Z的语义版本，其中X是主要版本，Y是次要版本，Z是补丁版本，例如，1.0.3。'
- en: '`testInstrumentationRunner`: The test runner to use for your UI tests.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`testInstrumentationRunner`：用于UI测试的测试运行器。'
- en: '`buildTypes`: Under `buildTypes`, a release is added that configures your app
    to create a `release` build. The `minifyEnabled` value, if set to `true`, will
    shrink your app size by removing any unused code, as well as obfuscate your app.
    This obfuscation step changes the name of the source code references to values
    such as `a.b.c()`. This makes your code less prone to reverse engineering and
    further reduces the size of the built app.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buildTypes`：在`buildTypes`下，添加了一个`release`，用于配置您的应用程序创建一个`release`构建。如果`minifyEnabled`值设置为`true`，将通过删除任何未使用的代码来缩小应用程序的大小，并对应用程序进行混淆。这个混淆步骤会将源代码引用的名称更改为诸如`a.b.c()`的值。这使得您的代码不太容易被逆向工程，并进一步减小了构建应用程序的大小。'
- en: '`compileOptions`: Language level of the java source code (`sourceCompatibility`)
    and byte code (`targetCompatibility`)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compileOptions`：java源代码的语言级别（`sourceCompatibility`）和字节码（`targetCompatibility`）'
- en: '`kotlinOptions`: The `jvm` library the `kotlin gradle` plugin should use'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kotlinOptions`：`kotlin gradle`插件应该使用的`jvm`库'
- en: 'The `dependencies` block specifies the libraries your app uses on top of the
    Android platform SDK, as shown here:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`块指定了您的应用程序在Android平台SDK之上使用的库，如下所示：'
- en: '[PRE10]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `implementation` notation for adding these libraries means that their internal
    dependencies will not be exposed to your app, making compilation faster.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`implementation`标记来添加这些库意味着它们的内部依赖不会暴露给您的应用程序，从而加快编译速度。
- en: You will see here that the `androidx` components are added as dependencies,
    rather than in the Android platform source. This is so that they can be updated
    independently from Android versions. `androidx` is the repackaged support library
    and Jetpack components. In order to add or verify that your `gradle.properties`
    file has `androidx` enabled, you need to inspect the `gradle.properties` file
    at the root of your project and look for the `android.useAndroidX` and `android.enableJetifier`
    properties and ensure that they are set to `true`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到这里`androidx`组件被添加为依赖项，而不是在Android平台源中。这样可以使它们独立于Android版本进行更新。`androidx`是重新打包的支持库和Jetpack组件。为了添加或验证您的`gradle.properties`文件是否启用了`androidx`，您需要检查项目根目录下的`gradle.properties`文件，并查找`android.useAndroidX`和`android.enableJetifier`属性，并确保它们设置为`true`。
- en: 'You can open up the `gradle.properties` file now, and you will see the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以打开`gradle.properties`文件，您会看到以下内容：
- en: '[PRE11]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you created the project with an Android Studio template, it set these flags
    to `true`, as well as adding the relevant `androidx` dependencies the app uses
    into the `dependencies` block of the app's `build.gradle` file. In addition to
    the preceding commented explanation, the `android.useAndroidX=true` flag states
    that the project is using the `androidx` libraries rather than the older support
    libraries and `android.enableJetifier=true` will also convert any older versions
    of the support libraries used in third-party libraries into the AndroidX format.
    `kotlin.code.style=official` will set the code style to the official kotlin one
    rather than the default Android Studio one.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用Android Studio模板创建项目时，它将这些标志设置为`true`，并将应用程序使用的相关`androidx`依赖项添加到应用程序的`build.gradle`文件的`dependencies`块中。除了前面的注释解释之外，`android.useAndroidX=true`标志表示项目正在使用`androidx`库，而不是旧的支持库，`android.enableJetifier=true`还将把第三方库中使用的旧版本支持库转换为AndroidX格式。`kotlin.code.style=official`将把代码风格设置为官方的kotlin风格，而不是默认的Android
    Studio风格。
- en: 'The final Gradle file to examine is `settings.gradle`. This file shows which
    modules your app uses. On first creating a project with Android Studio, there
    will only be one module, `app`, but when you add more features, you can add new
    modules that are dedicated to containing the source of this feature rather than
    packaging it in the main `app` module. These are called feature modules, and you
    can supplement them with other types of modules such as shared modules, which
    are used by all other modules like a networking module. The `settings.gradle`
    file will look like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查的最终Gradle文件是`settings.gradle`。这个文件显示了你的应用程序使用的模块。在使用Android Studio创建项目时，只会有一个模块`app`，但当你添加更多功能时，你可以添加新的模块，这些模块专门用于包含该功能的源代码，而不是将其打包到主`app`模块中。这些被称为特性模块，你可以用其他类型的模块来补充它们，比如被所有其他模块使用的共享模块，比如网络模块。`settings.gradle`文件将如下所示：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Exercise 1.04: Exploring how Material Design is used to theme an app'
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.04：探索如何使用Material Design主题应用程序
- en: 'In this exercise, you will learn about Google''s new design language, **Material
    Design**, and use it to load a **Material Design** themed app. **Material Design**
    is a design language created by Google that adds enriched UI elements based on
    real-world effects such as lighting, depth, shadows, and animations. Perform the
    following steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习关于谷歌的新设计语言**Material Design**，并使用它来加载一个**Material Design**主题的应用程序。**Material
    Design**是谷歌创建的一种设计语言，它增加了基于现实世界效果的丰富UI元素，比如光照、深度、阴影和动画。执行以下步骤：
- en: Create a new Android Studio project as you did in *Exercise 1.01*, *Creating
    an Android Studio Project for Your App*.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像在*练习1.01*中一样创建一个新的Android Studio项目，*为你的应用程序创建一个Android Studio项目*。
- en: Firstly, look at the `dependencies` block and find the material design dependency
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，查看`dependencies`块，并找到material design依赖
- en: '[PRE13]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, open the `themes.xml` file located at `app` | `src` | `main` | `res`
    | `values` | `themes.xml`:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开位于`app` | `src` | `main` | `res` | `values` | `themes.xml`的`themes.xml`文件：
- en: '[PRE14]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that the parent of `Theme.MyApplication` is `Theme.MaterialComponents.DayNight.DarkActionBar`
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Theme.MyApplication`的父级是`Theme.MaterialComponents.DayNight.DarkActionBar`
- en: The Material Design dependency added in the `dependencies` block is being used
    here to apply the theme of the app.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dependencies`块中添加的Material Design依赖项被用于应用程序的主题。
- en: If you run the app now, you will see the default Material themed app as shown
    in *Figure 1.15*
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现在运行应用程序，你将看到默认的Material主题应用程序，如*图1.15*所示。
- en: In this exercise, you've learned how `TextView` on the screen, it is not clear
    what benefits material design provides, but this will change when you start using
    Material UI design widgets more. Now that you've learned how the project is built
    and configured, in the next section, you'll explore the project structure in detail,
    learn how it has been created, and gain familiarity with the core areas of the
    development environment.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你已经学会了如何在屏幕上使用`TextView`，不清楚material design提供了什么好处，但当你开始更多地使用Material
    UI设计小部件时，这将会改变。现在你已经学会了项目是如何构建和配置的，在接下来的部分中，你将详细探索项目结构，了解它是如何创建的，并熟悉开发环境的核心领域。
- en: Android Application Structure
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android应用程序结构
- en: Now that we have covered how the Gradle build tool works, we'll explore the
    rest of the project. The simplest way to do this is to examine the folder structure
    of the app. There is a tool window at the top left of Android Studio called `Project`,
    which allows you to browse the contents of your app. By default, it is `open`/`selected`
    when your Android project is first created. When you select it, you will see a
    view similar to the screenshot in *Figure 1.19*. (If you can't see any window
    bars on the left-hand side of the screen, then go to the top toolbar and select
    `View` | Appearance | `Tool` `Window Bars` and make sure it is ticked). There
    are many different options for how to browse your project, but `Android` will
    be pre-selected. This view neatly groups the `app` folder structure together,
    so let's take a look at it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Gradle构建工具的工作原理，我们将探索项目的其余部分。最简单的方法是检查应用程序的文件夹结构。在Android Studio的左上角有一个名为`Project`的工具窗口，它允许你浏览应用程序的内容。默认情况下，在创建Android项目时，它是`打开`/`选中`的。当你选择它时，你会看到一个类似于*图1.19*中截图的视图。（如果你在屏幕左侧看不到任何窗口栏，那么去顶部工具栏，选择`View`
    | Appearance | `Tool` `Window Bars`，确保它被选中）。浏览项目有许多不同的选项，但`Android`将被预先选择。这个视图将`app`文件夹结构整齐地分组在一起，让我们来看看它。
- en: 'Here is an overview of these files with more detail about the most important
    ones. On opening it, you will see that it consists of the following folder structure:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些文件的概述，更详细地介绍了最重要的文件。打开它时，你会看到它包括以下文件夹结构：
- en: '![Figure 1.19: Overview of the files and folder structure in the app'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.19：应用程序中文件和文件夹结构的概述'
- en: '](img/B15216_01_19.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_19.jpg)'
- en: 'Figure 1.19: Overview of the files and folder structure in the app'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19：应用程序中文件和文件夹结构的概述
- en: 'The Kotlin file (`MainActivity`), which you''ve specified as running when the
    app starts, is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您指定为应用程序启动时运行的Kotlin文件（`MainActivity`）如下：
- en: '[PRE15]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `import` statements include the libraries and the source of what this activity
    uses. The class header `class MainActivity : AppCompatActivity()` creates a class
    that extends `AppCompatActivity`. In Kotlin, the `:` colon character is used for
    both deriving from a class (also known as inheritance) and implementing an interface.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句包括此活动使用的库和源。类头`class MainActivity : AppCompatActivity()`创建了一个扩展`AppCompatActivity`的类。在Kotlin中，`:`冒号字符用于从类派生（也称为继承）和实现接口。'
- en: '`MainActivity` derives from `androidx.appcompat.app.AppCompatActivity`, which
    is the backward-compatible activity designed to make your app work on older devices.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity`派生自`androidx.appcompat.app.AppCompatActivity`，这是向后兼容的活动，旨在使您的应用程序在旧设备上运行。'
- en: 'Android activities have many callback functions that you can override at different
    points of the activity''s life. This is known as the `onCreate` function as shown
    here:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Android活动具有许多回调函数，您可以在活动生命周期的不同点重写这些函数。这就是所谓的`onCreate`函数，如下所示：
- en: '[PRE16]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `override` keyword in Kotlin specifies that you are providing a specific
    implementation for a function that is defined in the parent class. The `fun` keyword
    (as you may have guessed) stands for *function*. The `savedInstanceState: Bundle?`
    parameter is Android''s mechanism for restoring previously saved state. For this
    simple activity, you haven''t stored any state, so this value will be `null`.
    The question mark, `?`, that follows the type declares that this type can be `null`.
    The `super.onCreate(savedInstanceState)` line calls through to the overridden
    method of the base class, and finally, `setContentView(R.layout.Activity_main)`
    loads the layout we want to display in the activity; otherwise, it would be displayed
    as a blank screen as no layout has been defined.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'Kotlin中的`override`关键字指定您正在为父类中定义的函数提供特定的实现。`fun`关键字（您可能已经猜到）代表*function*。`savedInstanceState:
    Bundle?`参数是Android用于恢复先前保存状态的机制。对于这个简单的活动，您没有存储任何状态，因此这个值将是`null`。跟随类型的问号`?`声明了这种类型可以是`null`。`super.onCreate(savedInstanceState)`行调用了基类的重写方法，最后，`setContentView(R.layout.Activity_main)`加载了我们想要在活动中显示的布局；否则，它将显示为空屏幕，因为没有定义布局。'
- en: 'Let''s have a look at some other files (*Figure 1.19*) present in the folder
    structure:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看文件夹结构中存在的一些其他文件（*图1.19*）：
- en: '`ExampleInstrumentedTest`: This is an example UI test. You can check and verify
    the flow and structure of your app by running tests on the UI when the app is
    running.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExampleInstrumentedTest`：这是一个示例UI测试。您可以在应用程序运行时运行UI测试来检查和验证应用程序的流程和结构。'
- en: '`ExampleUnitTest`: This is an example unit test. An essential part of creating
    an Android app is writing unit tests in order to verify that the source code works
    as expected.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExampleUnitTest`：这是一个示例单元测试。创建Android应用程序的一个重要部分是编写单元测试，以验证源代码是否按预期工作。'
- en: '`ic_launcher_background.xml`/`ic_launcher_foreground.xml`: These two files
    together make up the launcher icon of your app in vector format, which will be
    used by the launcher icon file, `ic_launcher.xml`, in Android API 26 (Oreo) and
    above.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ic_launcher_background.xml`/`ic_launcher_foreground.xml`：这两个文件一起以矢量格式组成应用程序的启动器图标，将由Android
    API 26（Oreo）及以上版本中的启动器图标文件`ic_launcher.xml`使用。'
- en: '`activity_main.xml`: This is the layout file that was created by Android Studio
    when we created the project. It is used by `MainActivity` to draw the initial
    screen content, which appears when the app runs:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activity_main.xml`：这是Android Studio创建项目时创建的布局文件。它由`MainActivity`用于绘制初始屏幕内容，该内容在应用程序运行时显示：'
- en: '[PRE17]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In order to support internationalization of your app and right-to-left (`rtl`)
    layouts, you should remove these attributes if they are present:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持应用程序的国际化和从右到左（`rtl`）布局，如果存在这些属性，您应该删除它们：
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Replace them with the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它们：
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this way, start and end are determined by the app language, whereas left
    and right mean start and end only in left-to-right languages.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，开始和结束由应用程序语言确定，而左和右只在从左到右的语言中表示开始和结束。
- en: Most screen displays in Android are created using XML layouts. The document
    starts with an XML header followed by a top-level `ViewGroup` (which here is `ConstraintLayout`)
    and then one or more nested `Views` and `ViewGroups`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的大多数屏幕显示都是使用XML布局创建的。文档以XML标头开头，后跟顶级`ViewGroup`（这里是`ConstraintLayout`），然后是一个或多个嵌套的`Views`和`ViewGroups`。
- en: The `ConstraintLayout` `ViewGroup` allows very precise positioning of views
    on a screen constraining views with parent and sibling views, guidelines, and
    barriers.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConstraintLayout` `ViewGroup`允许在屏幕上非常精确地定位视图，通过将视图约束到父视图和兄弟视图、指南线和障碍物。'
- en: '`TextView`, which is currently the only child view of `ConstraintLayout`, displays
    text on the screen through the `android:text` attribute. The positioning of the
    view horizontally is done by constraining the view to both the start and end of
    the parent, which, as both constraints are applied, centers the view horizontally.
    (start and end in left-to-right languages (`ltr`) are left and right, but right-to-left
    in `non ltr` languages). The view is positioned vertically in the center by constraining
    the view to both the top and the bottom of its parent. The result of applying
    all four constraints centers `TextView` both horizontally and vertically within
    `ConstraintLayout`.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextView`，当前是`ConstraintLayout`的唯一子视图，通过`android:text`属性在屏幕上显示文本。将视图水平定位到父级的开始和结束来完成视图的水平定位，因为应用了两个约束，所以视图在水平方向上居中（从左到右的语言（`ltr`）中的开始和结束是左和右，但在`non
    ltr`语言中是从右到左）。通过将视图约束到其父级的顶部和底部，将视图垂直定位在中心。应用所有四个约束的结果是在`ConstraintLayout`中将`TextView`水平和垂直居中。'
- en: 'There are three XML namespaces in the `ConstraintLayout` tag:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConstraintLayout`标签中有三个XML命名空间：'
- en: '`xmlns:android` refers to the Android-specific namespace and it is used for
    all attributes and values within the main Android SDK.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlns:android`指的是Android特定的命名空间，用于主要Android SDK中的所有属性和值。'
- en: The `xmlns:app` namespace is for anything not in the Android SDK. So, in this
    case, `ConstraintLayout` is not part of the main Android SDK but is added as a
    library.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlns:app`命名空间用于Android SDK中没有的任何内容。因此，在这种情况下，`ConstraintLayout`不是主要Android
    SDK的一部分，而是作为库添加的。'
- en: '`xmnls:tools` refers to a namespace used for adding metadata to the XML, which
    is used to indicate here where the layout is used (`tools:context=".MainActivity"`).'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmnls:tools`指的是用于向XML添加元数据的命名空间，用于指示布局在哪里使用（`tools:context=".MainActivity"`）。'
- en: The two most important attributes of an Android XML layout file are `android:layout_width`
    and `android:layout_height`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Android XML布局文件的两个最重要的属性是`android:layout_width`和`android:layout_height`。
- en: These can be set to absolute values, usually of density-independent pixels (known
    as `dip` or `dp`) that scale pixel sizes to be roughly equivalent on different
    density devices. More commonly, however, these attributes have the values of `wrap_content`
    or `match_parent` set for them. `wrap_content` will be as big as required to enclose
    its contents only. `match_parent` will be sized according to its parent.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以设置为绝对值，通常是密度无关像素（称为`dip`或`dp`），它们将像素大小缩放到不同密度设备上大致相等。然而，更常见的是，这些属性的值设置为`wrap_content`或`match_parent`。`wrap_content`将根据其内容大小调整大小。`match_parent`将根据其父级大小调整大小。
- en: There are other `ViewGroups` you can use to create layouts. `LinearLayout` lays
    out views vertically or horizontally, `FrameLayout` is usually used to display
    a single child view, and `RelativeLayout` is a simpler version of `ConstraintLayout`,
    which lays out views positioned relative to the parent and sibling views.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他`ViewGroups`可以用来创建布局。`LinearLayout`垂直或水平布局视图，`FrameLayout`通常用于显示单个子视图，`RelativeLayout`是`ConstraintLayout`的简化版本，它布局视图相对于父视图和兄弟视图的位置。
- en: 'The `ic_launcher.png` files are `.png` launcher icons that have an icon for
    every different density of devices. As the minimum version of Android we are using
    is API 16: Android 4.1 (Jelly Bean), these `.png` images are included as support
    for the launcher vector format was not introduced until Android API 26 (Oreo).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic_launcher.png`文件是`.png`启动图标，为不同密度的设备提供了图标。由于我们使用的最低版本的Android是API 16：Android
    4.1（果冻豆），因此这些`.png`图像被包含在内，因为直到Android API 26（奥利奥）之前，对启动器矢量格式的支持才被引入。'
- en: The `ic_launcher.xml` file uses the vector files (`ic_launcher_background.xml`/`ic_launcher_foreground.xml`)
    to scale to different density devices in Android API 26 (Oreo) and above.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`ic_launcher.xml`文件使用矢量文件（`ic_launcher_background.xml`/`ic_launcher_foreground.xml`）在Android
    API 26（奥利奥）及以上版本中缩放到不同密度的设备。'
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In order to target different density devices on the Android platform, besides
    each one of the `ic_launcher.png` icons, you will see in brackets the density
    it targets. As devices vary widely in their pixel densities, Google created density
    buckets so that the correct image would be selected to be displayed depending
    on how many dots per inch the device has.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Android平台上针对不同密度的设备，除了每一个`ic_launcher.png`图标外，您将看到括号中标注了它所针对的密度。由于设备的像素密度差异很大，Google创建了密度桶，以便根据设备的每英寸点数选择正确的图像来显示。
- en: 'The different density qualifiers and their details are as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 不同密度限定符及其详细信息如下：
- en: '`nodpi`: Density-independent resources'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nodpi`：密度无关资源'
- en: '`ldpi`: Low-density screens of 120 dpi'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ldpi`：120 dpi的低密度屏幕'
- en: '`mdpi`: Medium-density screens of 160 dpi (the baseline)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mdpi`：160 dpi的中密度屏幕（基线）'
- en: '`hdpi`: High-density screens of 240 dpi'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hdpi`：240 dpi的高密度屏幕'
- en: '`xhdpi`: Extra-high-density screens of 320 dpi'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xhdpi`：320 dpi的超高密度屏幕'
- en: '`xxhdpi`: Extra-extra-high-density screens of 480 dpi'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxhdpi`：480 dpi的超高密度屏幕'
- en: '`xxxhdpi`: Extra-extra-extra-high-density screens of 640 dpi'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xxxhdpi`：640 dpi的超超高密度屏幕'
- en: '`tvdpi`: Resources for televisions (approx 213 dpi)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tvdpi`：电视资源（约213 dpi）'
- en: The baseline density bucket was created at `160` dots per inch for medium-density
    devices and is called `160` dots/pixels, and the largest display bucket is `xxxhdpi`,
    which has `640` dots per inch. Android determines the appropriate image to display
    based on the individual device. So, the Pixel 3 emulator has a density of approximately
    `443dpi`, so it uses resources from the extra-extra-high-density bucket (xxhdpi),
    which is the closest match. Android has a preference for scaling down resources
    to best match density buckets, so a device with `400dpi`, which is halfway between
    the `xhdpi` and `xxhdpi` buckets, is likely to display the `480dpi` asset from
    the `xxhdpi` bucket.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 基线密度桶在中密度设备上以每英寸`160`点创建，并称为每英寸`160`点/像素，最大的显示桶是`xxxhdpi`，它有每英寸`640`点。Android根据各个设备来确定显示的适当图像。因此，Pixel
    3模拟器的密度约为`443dpi`，因此它使用来自超超高密度桶（xxhdpi）的资源，这是最接近的匹配。Android更倾向于缩小资源以最好地匹配密度桶，因此具有`400dpi`的设备，介于`xhdpi`和`xxhdpi`桶之间，可能会显示来自`xxhdpi`桶的`480dpi`资产。
- en: 'To create alternative bitmap drawables for different densities, you should
    follow the `3:4:6:8:12:16` scaling ratio between the six primary densities. For
    example, if you have a bitmap drawable that''s `48x48` pixels for medium-density
    screens, all the different sizes should be:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为不同密度创建替代位图可绘制对象，您应该遵循六种主要密度之间的`3:4:6:8:12:16`缩放比例。例如，如果您有一个用于中密度屏幕的`48x48`像素的位图可绘制对象，则所有不同大小应该是：
- en: '`36x36` (`0.75x`) for low density (`ldpi`)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36x36`（`0.75x`）用于低密度（`ldpi`）'
- en: '`48x48` (`1.0x` baseline) for medium density (`mdpi`)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`48x48`（`1.0x`基线）用于中密度（`mdpi`）'
- en: '`72x72` (`1.5x`) for high density (`hdpi`)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`72x72`（`1.5x`）用于高密度（`hdpi`）'
- en: '`96x96` (`2.0x`) for extra-high density (`xhdpi`)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`96x96`（`2.0x`）用于超高密度（`xhdpi`）'
- en: '`144x144` (`3.0x`) for extra-extra-high density (`xxhdpi`)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`144x144`（`3.0x`）用于超超高密度（`xxhdpi`）'
- en: '`192x192` (`4.0x`) for extra-extra-extra-high density (`xxxhdpi`)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192x192`（`4.0x`）用于超超超高密度（`xxxhdpi`）'
- en: 'For a comparison of these physical launcher icons per density bucket, refer
    to the following table:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要比较每个密度桶中的这些物理启动器图标，请参考以下表格：
- en: '![Figure 1.20: Comparison of principal density bucket launcher image sizes'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.20：主要密度桶发射器图像尺寸比较'
- en: '](img/B15216_01_20.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_20.jpg)'
- en: 'Figure 1.20: Comparison of principal density bucket launcher image sizes'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20：主要密度桶发射器图像尺寸比较
- en: Note
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Launcher icons are made slightly larger than normal images within your app as
    they will be used by the device's launcher. As some launchers can scale up the
    image, this is to ensure there is no pixelation and blurring of the image.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器图标比应用程序中的普通图像略大，因为它们将被设备的启动器使用。由于一些启动器可以放大图像，这是为了确保图像没有像素化和模糊。
- en: Now you are going to look at some of the resources the app uses. These are referenced
    in XML files and keep the display and formatting of your app consistent.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将查看应用程序使用的一些资源。这些资源在XML文件中被引用，并保持应用程序的显示和格式一致。
- en: In the `colors.xml` file, you define the colors you would like to use in your
    app in hexadecimal format.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在`colors.xml`文件中，您以十六进制格式定义了您想在应用程序中使用的颜色。
- en: '[PRE20]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The format is based on the RGB color space, so the first two characters are
    for red, the next two for green, and the last two for blue, where `#00` means
    none of the color is added to make up the composite color, and `#FF` means all
    of the color is added.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式基于RGB颜色空间，因此前两个字符是红色，接下来两个是绿色，最后两个是蓝色，其中`#00`表示没有添加任何颜色来组成复合颜色，而`#FF`表示添加了所有颜色。
- en: 'If you would like some transparency in the color, then precede it with two
    hexadecimal characters, from `#00` for completely transparent to `#FF` for completely
    opaque. So, to create blue and 50% transparent blue characters, here''s the format:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望颜色具有一定的透明度，则在前面加上两个十六进制字符，从`#00`表示完全透明到`#FF`表示完全不透明。因此，要创建蓝色和50%透明的蓝色字符，格式如下：
- en: '[PRE21]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `strings.xml` file displays all the text displayed in the app:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`strings.xml`文件显示应用程序中显示的所有文本：'
- en: '[PRE22]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can use hardcoded strings in your app, but this leads to duplication and
    also means you cannot customize the text if you want to make the app multilingual.
    By adding strings as resources, you can also update the string in one place if
    it is used in different places in the app.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在应用程序中使用硬编码的字符串，但这会导致重复，并且意味着如果要使应用程序支持多种语言，则无法自定义文本。通过将字符串添加为资源，如果在应用程序的不同位置使用了该字符串，您还可以在一个地方更新该字符串。
- en: Common styles you would like to use throughout your app are added to the `themes.xml`
    file.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要在整个应用程序中使用的常见样式都添加到`themes.xml`文件中。
- en: '[PRE23]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It is possible to apply style information directly to views by setting `android:textStyle="bold"`
    as an attribute on `TextView`. However, you would have to repeat this in multiple
    places for every `TextView` you wanted to display in bold. When you start to have
    multiple style attributes added to individual views, it adds a lot of duplication
    and can lead to errors when you want to make a change to all similar views and
    miss changing a style attribute on one view. If you define a style, you only have
    to change the style and it will update all the views that have that style applied
    to them. A top-level theme was applied to the application tag in the `AndroidManifest.xml`
    file when you created the project and is referred to as a theme that styles all
    views contained within the app. The colors you have defined in the `colors.xml`
    file are used here. In effect, if you change one of the colors defined in the
    `colors.xml` file, it will now propagate to style the app as well.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在`TextView`的属性上设置`android:textStyle="bold"`来直接向视图应用样式信息。但是，如果您想要将多个`TextView`显示为粗体，您将不得不在多个地方重复这样做。当您开始向单个视图添加多个样式属性时，会出现大量重复，并且在想要对所有类似视图进行更改时可能会导致错误，并且错过更改一个视图上的样式属性。如果您定义了一个样式，您只需更改样式，它将更新所有应用了该样式的视图。在创建项目时，`AndroidManifest.xml`文件中的应用程序标签应用了顶级主题，并被称为为应用程序中包含的所有视图设置样式的主题。您在`colors.xml`文件中定义的颜色在此处使用。实际上，如果您更改了`colors.xml`文件中定义的颜色之一，它现在也会传播到应用程序的样式中。
- en: You've now explored the core areas of the app. You have added `TextView` views
    to display labels, headings, and blocks of text. In the next exercise, you will
    be introduced to UI elements that will allow the user to interact with your app.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经探索了应用程序的核心领域。您已经添加了`TextView`视图来显示标签、标题和文本块。在下一个练习中，您将介绍允许用户与您的应用程序进行交互的UI元素。
- en: 'Exercise 1.05: Adding Interactive UI Elements to Display a Bespoke Greeting
    to the User'
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.05：向用户添加交互式UI元素以显示定制的问候语
- en: 'The goal of this exercise is to add the capability of users to add and edit
    text and then submit this information to display a bespoke greeting with the entered
    data. You will need to add editable text views to achieve this. The `EditText`
    View is typically how this is done and can be added in an XML layout file like
    this:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本练习的目标是使用户能够添加和编辑文本，然后提交此信息以显示带有输入数据的定制问候语。您需要添加可编辑的文本视图来实现这一点。`EditText`视图通常是这样做的，可以在XML布局文件中添加如下：
- en: '[PRE24]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This uses an android style `TextAppearance.AppCompat.Title` to display a title
    as shown below:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了一个Android样式`TextAppearance.AppCompat.Title`来显示标题，如下所示：
- en: '![Figure 1.21: EditText with hint'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.21：带提示的EditText'
- en: '](img/B15216_01_21.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_21.jpg)'
- en: 'Figure 1.21: EditText with hint'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21：带提示的EditText
- en: 'Although this is perfectly fine to enable the user to add/edit text, the material
    `TextInputEditText` and it''s wrapper View `TextInputLayout` view gives some polish
    to the `EditText` display. Let''s use the following code:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对于启用用户添加/编辑文本是完全可以的，但是材料`TextInputEditText`及其包装视图`TextInputLayout`为`EditText`显示提供了一些修饰。让我们使用以下代码：
- en: '[PRE25]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 1.22: Material TextInputLayout/TextInputEditText with hint'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.22：带提示的Material TextInputLayout/TextInputEditText'
- en: '](img/B15216_01_22.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_22.jpg)'
- en: 'Figure 1.22: Material TextInputLayout/TextInputEditText with hint'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22：带提示的Material TextInputLayout/TextInputEditText
- en: '`TextInputLayout` allows us to create a label for the `TextInputEditText` view
    and does a nice animation when the `TextInputEditText` view is focused (moving
    to the top of the field) while still displaying the label. The label is specified
    with `android:hint.`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextInputLayout`允许我们为`TextInputEditText`视图创建一个标签，并在`TextInputEditText`视图聚焦时进行漂亮的动画（移动到字段的顶部），同时仍然显示标签。标签是使用`android:hint`指定的。'
- en: 'You are going to change the `Hello World` text in your app so a user can enter
    their first and last name and further display a greeting on pressing a button.
    Perform the following steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 您将更改应用程序中的`Hello World`文本，以便用户可以输入他们的名字和姓氏，并在按下按钮时显示问候。执行以下步骤：
- en: 'Create the labels and text you are going to use in your app by adding these
    entries to `app` | `src` | `main` | `res` | `values` | `strings.xml`:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下条目添加到`app` | `src` | `main` | `res` | `values` | `strings.xml`中，创建您的应用程序中要使用的标签和文本：
- en: '[PRE26]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Next, we are going to update our styles to use in the layout by adding the following
    styles to `app` | `src` | `main` | `res` | `themes.xml` after the Base application
    theme)
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过在`app` | `src` | `main` | `res` | `themes.xml`中添加以下样式来更新我们要在布局中使用的样式（在基本应用程序主题之后）
- en: '[PRE27]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The parents of some of the styles refer to material styles, so these styles
    will be applied directly to the views as well as the styles that are specified.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一些样式的父样式引用了材料样式，因此这些样式将直接应用于视图，以及指定的样式。
- en: Now that we have added the styles we want to apply to views in the layout and
    the text, we can update the layout in `activity_main.xml` in `app` | `src` | `main`
    | `res` | `layout` folder. The code below is truncated for space, but you can
    view the full source code using the link below.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经添加了要应用于布局和文本中的视图的样式，我们可以在`app` | `src` | `main` | `res` | `layout`文件夹中的`activity_main.xml`中更新布局。下面的代码由于空间原因而被截断，但您可以使用下面的链接查看完整的源代码。
- en: '[PRE28]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You have added IDs for all the views so they can be constrained against their
    siblings and also provided a way in the activity to get the values of the `TextInputEditText`
    views. The `style="@style.."` notation applies the style from the `themes.xml`
    file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您已为所有视图添加了ID，以便可以将它们约束到它们的兄弟视图，并且还提供了一种在活动中获取`TextInputEditText`视图的值的方法。`style="@style.."`符号应用了`themes.xml`文件中的样式。
- en: 'Run the app and see the look and feel. If you select one of the `TextInputEditText`
    views, you''ll see the label animated and move to the top of the view:![Figure
    1.23: TextInputEditText fields with label states with no focus and with focus'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并查看外观和感觉。如果您选择`TextInputEditText`视图中的一个，您将看到标签被动画化并移动到视图的顶部：![图1.23：TextInputEditText字段的标签状态，无焦点和有焦点
- en: '](img/B15216_01_23.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_23.jpg)'
- en: 'Figure 1.23: TextInputEditText fields with label states with no focus and with
    focus'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23：TextInputEditText字段的标签状态，无焦点和有焦点
- en: Now, we have to add the interaction with the view in our activity. The layout
    by itself doesn't do anything other than allow the user to enter text into the
    `EditText` fields. Clicking the button at this stage will not do anything. You
    will accomplish this by capturing the entered text by using the IDs of the form
    fields when the button is pressed and then using the text to populate a `TextView` message.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须在我们的活动中添加与视图的交互。布局本身除了允许用户在`EditText`字段中输入文本之外，不会做任何事情。在这个阶段点击按钮不会做任何事情。您将通过在按钮被按下时使用表单字段的ID捕获输入的文本，然后使用文本填充`TextView`消息来实现这一点。
- en: Open `MainActivity` and complete the next steps to process the entered text
    and use this data to display a greeting and handle any form input errors.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`并完成下一步，处理输入的文本并使用这些数据显示问候并处理任何表单输入错误。
- en: 'In the `onCreate` function, set a click listener on the button so we can respond
    to the button click and retrieve the form data by updating `MainActivity` to what
    is displayed below:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onCreate`函数中，为按钮设置一个点击监听器，这样我们就可以响应按钮点击并通过更新`MainActivity`来检索表单数据，显示如下内容：
- en: '[PRE29]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, check that the trimmed names are not empty and format the name using
    Kotlin''s string templates:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，检查修剪后的名称是否为空，并使用Kotlin的字符串模板格式化名称：
- en: '[PRE30]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, show a message if the form fields have not been filled in correctly:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果表单字段没有正确填写，显示一条消息：
- en: '[PRE31]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `Toast` specified is a small text dialog that appears above the main layout
    for a short time to display a message to the user before disappearing.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的`Toast`是一个小型文本对话框，它在主布局上方短暂出现，以向用户显示消息，然后消失。
- en: 'Run up the app and enter text into the fields and verify that a greeting message
    is shown when both text fields are filled in, and a pop-up message appears with
    why the greeting hasn''t been set if both fields are not filled in. You should
    see the following display for each one of these cases:![Figure 1.24: App with
    name filled in correctly and with error'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并在字段中输入文本，验证当两个文本字段都填写时是否显示问候消息，并且如果两个字段都没有填写，则弹出消息显示为什么没有设置问候。您应该看到以下显示：![图1.24：名称填写正确和错误的应用程序
- en: '](img/B15216_01_24.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_24.jpg)'
- en: 'Figure 1.24: App with name filled in correctly and with error'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24：名称填写正确和错误的应用程序
- en: 'The full exercise code can be viewed here: [http://packt.live/39JyOzB](http://packt.live/39JyOzB)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的练习代码可以在这里查看：[http://packt.live/39JyOzB](http://packt.live/39JyOzB)
- en: The preceding exercise has introduced you to adding interactivity to your app
    with `EditText` fields that a user can fill in, adding a click listener to respond
    to button events and perform some validation.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的练习介绍了如何通过`EditText`字段向应用程序添加交互性，用户可以填写这些字段，添加点击监听器以响应按钮事件并执行一些验证。
- en: Accessing Views in layout files
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问布局文件中的视图
- en: 'The established way to access Views in layout files is to use `findViewById`
    with the name of the View''s id. So the `enter_button` `Button` is retrieved by
    the syntax `findViewById<Button>(R.id.enter_button)` after the layout has been
    set in `setContentView(R.layout.activity_main)` in the Activity. You will use
    this technique in this course. Google has also introduced ViewBinding to replace
    `findViewById` which creates a binding class to access Views and has the advantage
    of null and type safety. You can read about this here: [https://developer.android.com/topic/libraries/view-binding](https://developer.android.com/topic/libraries/view-binding)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件中访问视图的已建立的方法是使用`findViewById`和视图的id名称。因此，在Activity中的`setContentView(R.layout.activity_main)`设置布局后，可以通过语法`findViewById<Button>(R.id.enter_button)`检索`enter_button`
    `Button`。您将在本课程中使用这种技术。Google还引入了ViewBinding来替代`findViewById`，它创建一个绑定类来访问视图，并具有空值和类型安全的优势。您可以在这里阅读有关此内容：[https://developer.android.com/topic/libraries/view-binding](https://developer.android.com/topic/libraries/view-binding)
- en: Further Input Validation
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的输入验证
- en: Validating user input is a key concept in processing user data and you must
    have seen it in action many times when you've not entered a required field in
    a form. This is what the previous exercise was validating when it checked that
    the user had entered values into both the first name and last name field.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 验证用户输入是处理用户数据的关键概念，当您没有在表单中输入必填字段时，您必须已经多次看到它的作用。在上一个练习中，当检查用户是否已经在名字和姓氏字段中输入值时，就是在验证用户输入。
- en: 'There are other validation options that are available directly within XML view
    elements. Let''s say, for instance, you wanted to validate an IP address entered
    into a field. You know that an IP address can be four numbers separated by periods/dots
    where the maximum length of a number is 3\. So, the maximum number of characters
    that can be entered into the field is 15, and only numbers and periods can be
    entered. There are two XML attributes that can help us with the validation:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他验证选项可以直接在XML视图元素中使用。例如，假设您想要验证输入到字段中的IP地址。您知道IP地址可以是由句点/点分隔的四个数字，其中数字的最大长度为3。因此，可以输入到字段中的字符的最大数量为15，并且只能输入数字和句点。有两个XML属性可以帮助我们进行验证：
- en: '`android:digits="0123456789."`: Restricts the characters that can be entered
    into the field by listing all the permitted individual characters.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:digits="0123456789."`：通过列出所有允许的单个字符，限制可以输入到字段中的字符。'
- en: '`android:maxLength="15"`: Restricts the user from entering more than the maximum
    number of characters an IP address will consist of.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`android:maxLength="15"`：限制用户输入超过IP地址将包含的最大字符数。'
- en: 'So, this is how you could display this in a form field:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这是您可以在表单字段中显示的方式：
- en: '[PRE32]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This validation restricts the characters that can be input and the maximum length.
    Additional validation would be required on the sequence of characters and whether
    they are periods/dots or numbers, as per the IP address format, but it is the
    first step to assist the user in entering the correct characters.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 此验证限制了可以输入的字符和最大长度。还需要对字符序列以及它们是否为句点/点或数字进行额外验证，如IP地址格式所述，但这是帮助用户输入正确字符的第一步。
- en: With the knowledge gained from the chapter, let's start with the following activity.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中获得的知识，让我们从以下活动开始。
- en: 'Activity 1.01: Producing an App to Create RGB Colors'
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动1.01：创建一个应用程序来生成RGB颜色
- en: In this activity, we will look into a scenario that uses validation. Suppose
    you have been tasked with creating an app that shows how the RGB channels of Red,
    Green, and Blue are added to the RGB color space to create a color. Each of the
    RGB channels should be added as two hexadecimal characters, where each character
    can be a value of 0-9 or A-F. The values will then be combined to produce a 6-character
    hexadecimal string that is displayed as a color within the app.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将研究一个使用验证的场景。假设您被要求创建一个应用程序，显示红色、绿色和蓝色的RGB通道如何添加到RGB颜色空间中以创建颜色。每个RGB通道应该作为两个十六进制字符添加，其中每个字符的值可以是0-9或A-F。然后将这些值组合起来，生成一个6个字符的十六进制字符串，该字符串将作为颜色显示在应用程序中。
- en: The aim of this activity is to produce a form with editable fields in which
    the user can add two hexadecimal values for each color. After filling in all three
    fields, the user should click a button that takes the three values and concatenates
    them to create a valid hexadecimal color string. This should then be converted
    to a color and displayed in the UI of the app.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的目的是生成一个具有可编辑字段的表单，用户可以为每种颜色添加两个十六进制值。填写完所有三个字段后，用户应单击一个按钮，该按钮获取三个值并将它们连接起来以创建有效的十六进制颜色字符串。然后将其转换为颜色，并显示在应用程序的UI中。
- en: 'The following steps will help you to complete the activity:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助您完成该活动：
- en: Create a new project called `Colors`
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Colors”的新项目
- en: Add a title to the layout constrained to the top of the layout.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标题添加到布局，约束到布局的顶部。
- en: Add a brief description to the user on how to complete the form.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户添加一个简短的说明，说明如何填写表单。
- en: Add three material `TextInputLayout` fields wrapping three `TextInputEditText`
    fields that appear under `Title`. These should be constrained so that each view
    is on top of the other (rather than to the side). Name the `TextInputEditText`
    fields `Red Channel`, `Green Channel`, and `Blue Channel`, respectively, and add
    a restriction to each field to only be able to enter two characters and add hexadecimal
    characters.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“标题”下方添加三个材料`TextInputLayout`字段，包裹三个`TextInputEditText`字段。这些应该被约束，以便每个视图位于另一个视图的上方（而不是侧面）。分别将`TextInputEditText`字段命名为“红色通道”、“绿色通道”和“蓝色通道”，并对每个字段添加限制，只能输入两个字符并添加十六进制字符。
- en: Add a button that takes the inputs from the three-color fields.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个按钮，该按钮获取三个颜色字段的输入。
- en: Add a view that will display the produced color in the layout.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个视图，用于在布局中显示生成的颜色。
- en: Finally, display the RGB color created from the three channels in the layout.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在布局中显示由三个通道创建的RGB颜色。
- en: 'The final output should look like this (the color will vary depending on the
    inputs):'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出应如下所示（颜色将根据输入而变化）：
- en: '![Figure 1.25: Output when the color is displayed'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.25：显示颜色时的输出'
- en: '](img/B15216_01_25.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_01_25.jpg)'
- en: 'Figure 1.25: Output when the color is displayed'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25：显示颜色时的输出
- en: Note
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: [http://packt.live/3sKj1cp](http://packt.live/3sKj1cp)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在此处找到：[http://packt.live/3sKj1cp](http://packt.live/3sKj1cp)
- en: 'The sources for all the exercises and the activity in this chapter are located
    here: [http://packt.live/2LLY9kb](http://packt.live/2LLY9kb)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有练习和活动的来源都在这里：[http://packt.live/2LLY9kb](http://packt.live/2LLY9kb)
- en: Note
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When loading all completed projects from the Github repository for this course
    into Android Studio for the first time, do *not* open the project using `File`
    | `Open` from the Top menu. Always use `File` | `New` | `Import Project`. This
    is needed to build the app correctly. When opening projects after the initial
    import, you can use `File` | `Open or File` | `Open Recent`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次将此课程的所有已完成项目从Github存储库加载到Android Studio时，*不要*使用顶部菜单中的`File` | `Open`打开项目。始终使用`File`
    | `New` | `Import Project`。这是为了正确构建应用程序。在初始导入后打开项目时，可以使用`File` | `Open`或`File`
    | `Open Recent`。
- en: Summary
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has covered a lot about the foundations of Android development.
    You started off with how to create Android projects using Android Studio and then
    created and ran apps on a virtual device. The chapter then progressed by exploring
    the `AndroidManifest` file, which details the contents of your app and the permission
    model, followed by an introduction to Gradle and the process of adding dependencies
    and building your app. This was then followed by going into the details of an
    Android application and the files and folder structure. Layouts and views were
    introduced, and exercises iterated on to illustrate how to construct UIs with
    an introduction to Google's Material Design. The next chapter will build on this
    knowledge by learning about the activity lifecycle, activity tasks, and launch
    modes, persisting and sharing data between screens, and how to create robust user
    journeys through your apps.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经涵盖了很多关于Android开发基础的内容。您首先学习了如何使用Android Studio创建Android项目，然后在虚拟设备上创建和运行应用程序。接着，本章通过探索`AndroidManifest`文件来详细介绍了应用程序的内容和权限模型，然后介绍了Gradle以及添加依赖项和构建应用程序的过程。然后深入了解了Android应用程序的细节以及文件和文件夹结构。介绍了布局和视图，并进行了练习，以说明如何使用Google的Material
    Design构建用户界面。下一章将在此基础上继续学习活动生命周期、活动任务和启动模式，以及在屏幕之间持久化和共享数据，以及如何通过应用程序创建强大的用户体验。
