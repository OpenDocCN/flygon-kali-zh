["```py\nIn: a = arange(5)\nIn: a.dtype\nOut: dtype('int64')\n```", "```py\nIn: a\nOut: array([0, 1, 2, 3, 4])\nIn: a.shape\nOut: (5,)\n```", "```py\n    In: m = array([arange(2), arange(2)])\n    In: m\n    Out:\n    array([[0, 1],[0, 1]])\n    ```", "```py\n    In: m.shape\n    Out: (2, 2)\n    ```", "```py\nIn: a = array([[1,2],[3,4]])\nIn: a\nOut:\narray([[1, 2],       [3, 4]])\n```", "```py\nIn: a[0,0]\nOut: 1\nIn: a[0,1]\nOut: 2\nIn: a[1,0]\nOut: 3\nIn: a[1,1]\nOut: 4\n```", "```py\nIn: float64(42)\nOut: 42.0\nIn: int8(42.0)\nOut: 42\nIn: bool(42)\nOut: True\nIn: bool(0)\nOut: False\nIn: bool(42.0)\nOut: True\nIn: float(True)\nOut: 1.0\n      In: float(False)\n     Out: 0.0\n```", "```py\nIn: arange(7, dtype=uint16)\nOut: array([0, 1, 2, 3, 4, 5, 6], dtype=uint16)\n```", "```py\nIn: a.dtype.itemsize\nOut: 8\n```", "```py\nIn: arange(7, dtype='f')\nOut: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.], dtype=float32)\nLikewise this creates an array of complex numbers\nIn: arange(7, dtype='D')\nOut: array([ 0.+0.j,  1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  5.+0.j,  6.+0.j])\n```", "```py\n    In: dtype(float)\n    Out: dtype('float64')\n    ```", "```py\n    In: dtype('f')\n    Out: dtype('float32')\n    ```", "```py\n    In: dtype('d')\n    Out: dtype('float64')\n    ```", "```py\n    In: dtype('f8')\n    Out: dtype('float64')\n    ```", "```py\nIn: sctypeDict.keys()\nOut: [0, \u2026'i2','int0']\n```", "```py\nIn: t = dtype('Float64')\nIn: t.char\nOut: 'd'\n```", "```py\nIn: t.type\nOut: <type 'numpy.float64'>\n```", "```py\nIn: t.str\nOut: '<f8'\n```", "```py\n    In: t = dtype([('name', str_, 40), ('numitems', int32), ('price', float32)])\n    In: t\n    Out: dtype([('name', '|S40'), ('numitems', '<i4'), ('price', '<f4')])\n    ```", "```py\n    In: t['name']\n    Out: dtype('|S40')\n    ```", "```py\nIn: itemz = array([('Meaning of life DVD', 42, 3.14), ('Butter', 13, 2.72)], dtype=t)\nIn: itemz[1]\nOut: ('Butter', 13, 2.7200000286102295)\n```", "```py\nIn: a = arange(9)\nIn: a[3:7]\nOut: array([3, 4, 5, 6])\n```", "```py\nIn: a[:7:2]\nOut: array([0, 2, 4, 6])\n```", "```py\nIn: a[::-1]\nOut: array([8, 7, 6, 5, 4, 3, 2, 1, 0])\n```", "```py\n    In: b\n    Out:\n    array([[[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11]],[[12, 13, 14, 15],[16, 17, 18, 19],[20, 21, 22, 23]]])\n    In: b.ravel()\n    Out:\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    ```", "```py\n    In: b.flatten()\n    Out:\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    ```", "```py\n    In: b.shape = (6,4)\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11],[12, 13, 14, 15],[16, 17, 18, 19],[20, 21, 22, 23]])\n    ```", "```py\n    In: b.transpose()\n    Out:\n    array([[ 0,  4,  8, 12, 16, 20],[ 1,  5,  9, 13, 17, 21],[ 2,  6, 10, 14, 18, 22],[ 3,  7, 11, 15, 19, 23]])\n    ```", "```py\n    In: b.resize((2,12))\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n    ```", "```py\nIn: a = arange(9).reshape(3,3)\nIn: a\nOut:\narray([[0, 1, 2],[3, 4, 5],[6, 7, 8]])\nIn: b = 2 * a\nIn: b\nOut:\narray([[ 0,  2,  4],[ 6,  8, 10],[12, 14, 16]])\n```", "```py\n    In: hstack((a, b))\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],[ 3,  4,  5,  6,  8, 10],[ 6,  7,  8, 12, 14, 16]])\n    ```", "```py\n    In: concatenate((a, b), axis=1)\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],[ 3,  4,  5,  6,  8, 10],[ 6,  7,  8, 12, 14, 16]])\n    ```", "```py\n    In: vstack((a, b))\n    Out:\n    array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 0,  2,  4],[ 6,  8, 10],[12, 14, 16]])\n    ```", "```py\n    In: concatenate((a, b), axis=0)\n    Out:\n    array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 0,  2,  4],[ 6,  8, 10],[12, 14, 16]])\n    ```", "```py\n    In: dstack((a, b))\n    Out:\n    array([[[ 0,  0],[ 1,  2],[ 2,  4]],[[ 3,  6],[ 4,  8],[ 5, 10]],[[ 6, 12],[ 7, 14],[ 8, 16]]])\n    ```", "```py\n    In: oned = arange(2)\n    In: oned\n    Out: array([0, 1])\n    In: twice_oned = 2 * oned\n    In: twice_oned\n    Out: array([0, 2])\n    In: column_stack((oned, twice_oned))\n    Out:\n    array([[0, 0],[1, 2]])\n    ```", "```py\n    In: column_stack((a, b))\n    Out:\n    array([[ 0,  1,  2,  0,  2,  4],[ 3,  4,  5,  6,  8, 10],[ 6,  7,  8, 12, 14, 16]])\n    In: column_stack((a, b)) == hstack((a, b))\n    Out:\n    array([[ True,  True,  True,  True,  True,  True],[ True,  True,  True,  True,  True,  True],[ True,  True,  True,  True,  True,  True]], dtype=bool)\n    ```", "```py\n    In: row_stack((oned, twice_oned))\n    Out:\n    array([[0, 1],[0, 2]])\n    ```", "```py\n    In: row_stack((a, b))\n    Out:\n    array([[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8],[ 0,  2,  4],[ 6,  8, 10],[12, 14, 16]])\n    In: row_stack((a,b)) == vstack((a, b))\n    Out:\n    array([[ True,  True,  True],[ True,  True,  True],[ True,  True,  True],[ True,  True,  True],[ True,  True,  True],[ True,  True,  True]], dtype=bool)\n    ```", "```py\n    In: a\n    Out:\n    array([[0, 1, 2],[3, 4, 5],[6, 7, 8]])\n    In: hsplit(a, 3)\n    Out:\n    [array([[0],[3],[6]]),array([[1],[4],[7]]),array([[2],[5],[8]])]\n    ```", "```py\n    In: split(a, 3, axis=1)\n    Out:\n    [array([[0],[3],[6]]),array([[1],[4],[7]]),array([[2],[5],[8]])]\n    ```", "```py\n    In: vsplit(a, 3)\n    Out: [array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n    ```", "```py\n    In: split(a, 3, axis=0)\n    Out: [array([[0, 1, 2]]), array([[3, 4, 5]]), array([[6, 7, 8]])]\n    ```", "```py\n    In: c = arange(27).reshape(3, 3, 3)\n    In: c\n    Out:\n    array([[[ 0,  1,  2],[ 3,  4,  5],[ 6,  7,  8]],[[ 9, 10, 11],[12, 13, 14],[15, 16, 17]],[[18, 19, 20],[21, 22, 23],[24, 25, 26]]])\n    In: dsplit(c, 3)\n    Out:\n    [array([[[ 0],[ 3],[ 6]],[[ 9],[12],[15]],[[18],[21],[24]]]),array([[[ 1],[ 4],[ 7]],[[10],[13],[16]],[[19],[22],[25]]]),array([[[ 2],[ 5],[ 8]],[[11],[14],[17]],[[20],[23],[26]]])]\n    ```", "```py\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\n    In: b.ndim\n    Out: 2\n    ```", "```py\n    In: b.size\n    Out: 24\n    ```", "```py\n    In: b.itemsize\n    Out: 8\n    ```", "```py\n    In: b.nbytes\n    Out: 192\n    In: b.size * b.itemsize\n    Out: 192\n    ```", "```py\n    In: b.resize(6,4)\n    In: b\n    Out:\n    array([[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11],[12, 13, 14, 15],[16, 17, 18, 19],[20, 21, 22, 23]])\n    In: b.T\n    Out:\n    array([[ 0,  4,  8, 12, 16, 20],[ 1,  5,  9, 13, 17, 21],[ 2,  6, 10, 14, 18, 22],[ 3,  7, 11, 15, 19, 23]])\n    ```", "```py\n    In: b.ndim\n    Out: 1\n    In: b.T\n    Out: array([0, 1, 2, 3, 4])\n    ```", "```py\n    In: b = array([1.j + 1, 2.j + 3])\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n    ```", "```py\n    In: b.real\n    Out: array([ 1.,  3.])\n    ```", "```py\n    In: b.imag\n    Out: array([ 1.,  2.])\n    ```", "```py\n    In: b.dtype\n    Out: dtype('complex128')\n    In: b.dtype.str\n    Out: '<c16'\n    ```", "```py\n    In: b = arange(4).reshape(2,2)\n    In: b\n    Out:\n    array([[0, 1],[2, 3]])\n    In: f = b.flat\n    In: f\n    Out: <numpy.flatiter object at 0x103013e00>\n    In: for item in f: print item\n       .....:\n    0\n    1\n    2\n    3\n    ```", "```py\n    In: b.flat[2]\n    Out: 2\n    ```", "```py\n    In: b.flat[[1,3]]\n    Out: array([1, 3])\n    ```", "```py\n    In: b.flat = 7\n    In: b\n    Out:\n    array([[7, 7],[7, 7]])\n    ```", "```py\n    In: b.flat[[1,3]] = 1\n    In: b\n    Out:\n    array([[7, 1],[7, 1]])\n    ```", "```py\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n    In: b.tolist()\n    Out: [(1+1j), (3+2j)]\n    ```", "```py\n    In: b\n    Out: array([ 1.+1.j,  3.+2.j])\n    In: b.astype(int)\n    /usr/local/bin/ipython:1: ComplexWarning: Casting complex values to real discards the imaginary part\n      #!/usr/bin/python\n    Out: array([1, 3])\n    ```", "```py\nIn: b.astype('complex')\nOut: array([ 1.+1.j,  3.+2.j])\n```", "```py\n    acopy = lena.copy()\n    ```", "```py\n    aview = lena.view()\n    ```", "```py\n    aview.flat = 0\n    ```", "```py\nimport scipy.misc\nimport matplotlib.pyplot as plt\n\nlena = scipy.misc.lena()\nacopy = lena.copy()\naview = lena.view()\nplt.subplot(221)\nplt.imshow(lena)\nplt.subplot(222)\nplt.imshow(acopy)\nplt.subplot(223)\nplt.imshow(aview)\naview.flat = 0\nplt.subplot(224)\nplt.imshow(aview)\nplt.show()\n```", "```py\n    lena[range(xmax), range(ymax)] = 0\n    ```", "```py\n    lena[range(xmax-1,-1,-1), range(ymax)] = 0\n    ```", "```py\nimport scipy.misc\nimport matplotlib.pyplot as plt\n\nlena = scipy.misc.lena()\nxmax = lena.shape[0]\nymax = lena.shape[1]\nlena[range(xmax), range(ymax)] = 0\nlena[range(xmax-1,-1,-1), range(ymax)] = 0\nplt.imshow(lena)\nplt.show()\n```", "```py\nIn : ix_([0,1], [2,3])\nOut:\n(array([[0], [1]]), array([[2, 3]]))\n```", "```py\n    def shuffle_indices(size):\n       arr = np.arange(size)\n       np.random.shuffle(arr)\n\n       return arr\n    ```", "```py\n    plt.imshow(lena[np.ix_(xindices, yindices)])\n    ```", "```py\nimport scipy.misc\nimport matplotlib.pyplot\nimport numpy as np\n\nlena = scipy.misc.lena()\nxmax = lena.shape[0]\nymax = lena.shape[1]\n\ndef shuffle_indices(size):\n   arr = np.arange(size)\n   np.random.shuffle(arr)\n\n   return arr\n\nxindices = shuffle_indices(xmax)\nnp.testing.assert_equal(len(xindices), xmax)\nyindices = shuffle_indices(ymax)\nnp.testing.assert_equal(len(yindices), ymax)\nplt.imshow(lena[np.ix_(xindices, yindices)])\nplt.show()\n```", "```py\n    def get_indices(size):\n       arr = np.arange(size)\n       return arr % 4 == 0\n    ```", "```py\n    lena1 = lena.copy() \n    xindices = get_indices(lena.shape[0])\n    yindices = get_indices(lena.shape[1])\n    lena1[xindices, yindices] = 0\n    plt.subplot(211)\n    plt.imshow(lena1)\n    ```", "```py\n    lena2[(lena > lena.max()/4) & (lena < 3 * lena.max()/4)] = 0\n    ```", "```py\nimport scipy.misc\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nlena = scipy.misc.lena()\n\ndef get_indices(size):\n   arr = np.arange(size)\n   return arr % 4 == 0\n\nlena1 = lena.copy() \nxindices = get_indices(lena.shape[0])\nyindices = get_indices(lena.shape[1])\nlena1[xindices, yindices] = 0\nplt.subplot(211)\nplt.imshow(lena1)\nlena2 = lena.copy() \nlena2[(lena > lena.max()/4) & (lena < 3 * lena.max()/4)] = 0\nplt.subplot(212)\nplt.imshow(lena2)\nplt.show()\n```", "```py\n    sudoku = np.array([[2, 8, 7, 1, 6, 5, 9, 4, 3],[9, 5, 4, 7, 3, 2, 1, 6, 8],\u2026[7, 3, 6, 2, 8, 4, 5, 1, 9]])\n    ```", "```py\n    strides = sudoku.itemsize * np.array([27, 3, 9, 1])\n    ```", "```py\n    squares = np.lib.stride_tricks.as_strided(sudoku, shape=shape, strides=strides)\n    print(squares)\n    ```", "```py\n[[[[2 8 7][9 5 4][6 1 3]]\u2026[[[8 7 9][4 2 1][3 6 5]]\u2026[[[1 9 8][5 4 2][7 3 6]]\u2026[[4 2 6][3 8 7][5 1 9]]]]\n\n```", "```py\nimport numpy as np\n\nsudoku = np.array([[2, 8, 7, 1, 6, 5, 9, 4, 3],[9, 5, 4, 7, 3, 2, 1, 6, 8],[6, 1, 3, 8, 4, 9, 7, 5, 2],[8, 7, 9, 6, 5, 1, 2, 3, 4],[4, 2, 1, 3, 9, 8, 6, 7, 5],[3, 6, 5, 4, 2, 7, 8, 9, 1],[1, 9, 8, 5, 7, 3, 4, 2, 6],[5, 4, 2, 9, 1, 6, 3, 8, 7],[7, 3, 6, 2, 8, 4, 5, 1, 9]])\n\nshape = (3, 3, 3, 3)\nstrides = sudoku.itemsize * np.array([27, 3, 9, 1])\nsquares = np.lib.stride_tricks.as_strided(sudoku, shape=shape, strides=strides)\nprint(squares)\n```", "```py\n    sample_rate, data = scipy.io.wavfile.read(WAV_FILE)\n    ```", "```py\n    plt.subplot(2, 1, 1)\n    plt.title(\"Original\")\n    plt.plot(data)\n    ```", "```py\n    newdata = data * 0.2\n    newdata = newdata.astype(np.uint8)\n    ```", "```py\n    scipy.io.wavfile.write(\"quiet.wav\",\n        sample_rate, newdata)\n    ```", "```py\n    matplotlib.pyplot.subplot(2, 1, 2)\n    matplotlib.pyplot.title(\"Quiet\")\n    matplotlib.pyplot.plot(newdata)\n    matplotlib.pyplot.show()\n    ```", "```py\nimport scipy.io.wavfile\nimport matplotlib.pyplot\nimport urllib2\nimport numpy as np\n\nresponse = urllib2.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\nprint response.info()\nWAV_FILE = 'smashingbaby.wav'\nfilehandle = open(WAV_FILE, 'w')\nfilehandle.write(response.read())\nfilehandle.close()\nsample_rate, data = scipy.io.wavfile.read(WAV_FILE)\nprint \"Data type\", data.dtype, \"Shape\", data.shape\nplt.subplot(2, 1, 1)\nplt.title(\"Original\")\nplt.plot(data)\nnewdata = data * 0.2\nnewdata = newdata.astype(np.uint8)\nprint \"Data type\", newdata.dtype, \"Shape\", newdata.shape\nscipy.io.wavfile.write(\"quiet.wav\",\n    sample_rate, newdata)\nplt.subplot(2, 1, 2)\nplt.title(\"Quiet\")\nplt.plot(newdata)\nplt.show()\n```"]