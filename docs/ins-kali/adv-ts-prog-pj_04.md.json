["```ts\nnpm install -g @angular/cli\n```", "```ts\nng new Chapter04 --style scss --prefix atp\n```", "```ts\nng serve --open\n```", "```ts\nng add @angular/material @angular/cdk @angular/animation @angular/flex-layout\n```", "```ts\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule } from '@angular/material';\n```", "```ts\nimports: [\n  ...\n LayoutModule,\n MatToolbarModule,\n MatButtonModule,\n MatSidenavModule,\n MatIconModule,\n MatListModule,\n]\n```", "```ts\n<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport=\"true\" [opened]=\"false\">\n  </mat-sidenav>\n  <mat-sidenav-content>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n```", "```ts\n<mat-toolbar>Menu</mat-toolbar>\n<mat-nav-list>\n  <a mat-list-item>Import Image</a>\n</mat-nav-list>\n```", "```ts\n<mat-toolbar color=\"primary\">\n  <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\n    <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n  </button>\n</mat-toolbar>\n```", "```ts\nng generate component components/fileupload\n```", "```ts\n@Component({\n  selector: 'atp-fileupload',\n  templateUrl: './fileupload.component.html',\n  styleUrls: ['./fileupload.component.scss']\n})\nexport class FileuploadComponent implements OnInit {\n  ngOnInit() {\n  }\n}\n```", "```ts\nng generate service <<servicename>>\n```", "```ts\nng generate service Services/FilePreviewService.\n```", "```ts\nimport { Injectable } from '@angular/core';\n@Injectable({\n providedIn: 'root'\n})\nexport class FilePreviewService {\n}\n```", "```ts\npublic async Preview(files: any): Promise<IPictureModel> {\n}\n```", "```ts\nexport interface IPictureModel {\n Image: string;\n Name: string;\n Description: string;\n Tags: string;\n}\nexport class PictureModel implements IPictureModel {\n Image: string;\n Name: string;\n Description: string;\n Tags: string;\n}\n```", "```ts\nreturn await new Promise((resolve, reject) => {});\n```", "```ts\nif (files.length === 0) {\n  return;\n}\nconst file = files[0];\nif (file.type.match(/image\\/*/) === null) {\n  reject(`The file is not an image file.`);\n  return;\n}\nconst imageModel: IPictureModel = new PictureModel();\n```", "```ts\nconst reader = new FileReader();\nreader.onload = (evt) => {\n  imageModel.Image = reader.result;\n  resolve(imageModel);\n};\nreader.readAsDataURL(file);\n```", "```ts\nprotected imageSource: IPictureModel | null;\nprotected message: any;\nprotected description: string;\nprotected tags: string;\n\nconstructor(\n  private dialog: MatDialogRef<FileuploadComponent>,\n  private preview: FilePreviewService) { }\n```", "```ts\npublic OnImageSelected(files: any): void {\n  this.preview.Preview(files).then(r => {\n    this.imageSource = r;\n  }).catch(r => {\n    this.message = r;\n  });\n}\n```", "```ts\npublic Save(): void {\n  this.imageSource.Description = this.description;\n  this.imageSource.Tags = this.tags;\n  this.dialog.close(this.imageSource);\n}\n```", "```ts\n<h2 mat-dialog-title>Choose image</h2>\n```", "```ts\n<mat-dialog-content>\n  ...\n</mat-dialog-content>\n```", "```ts\n<h3 *ngIf=\"message\">{{message}}</h3>\n```", "```ts\n  <button class=\"mat-raised-button mat-accent\" md-button (click)=\"fileUpload.click()\">Upload</button>\n  <input hidden #fileUpload type=\"file\" accept=\"image/*\" (change)=\"OnImageSelected(fileUpload.files)\" />\n```", "```ts\n<div>\n  <img src=\"{{imageSource.Image}}\" height=\"100\" *ngIf=\"imageSource\" />\n</div>\n```", "```ts\n<mat-form-field>\n  <input type=\"text\" matInput placeholder=\"Add tags\" [(ngModel)]=\"tags\" />\n</mat-form-field>\n<mat-form-field>\n  <input matInput placeholder=\"Description\" [(ngModel)]=\"description\" />\n</mat-form-field>\n```", "```ts\n<mat-dialog-actions>\n  <button class=\"mat-raised-button mat-primary\" (click)=\"Save()\">Save</button>\n  <button class=\"mat-raised-button\" mat-dialog-close>Cancel</button>\n</mat-dialog-actions>\n```", "```ts\ntsc --init\nnpm init -y\nnpm install express @types/express parser @types/body-parser --save\n```", "```ts\n{\n  \"compilerOptions\": {\n    \"target\": \"es2015\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"strict\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true\n  },\n}\n```", "```ts\nimport express from \"express\";\n```", "```ts\nexport class Server {\n  constructor(private port : number = 3000, private app : any = express()) {\n  }\n\n  public Start() : void {\n    this.OnStart();\n    this.app.listen(this.port, () => console.log(`Express server running on port ${this.port}`));\n  }\n\n  protected OnStart() : void {\n    this.app.get(`/`, (request : any, response : any) => res.send(`Hello from the server`));\n  }\n}\n```", "```ts\nnew Server(3000).Start();\n```", "```ts\npublic Start(): void {\n  this.app.use(bodyParser.json({ limit: `100mb` }));\n  this.app.use(bodyParser.urlencoded({ limit: `100mb`, extended: true }));\n  this.OnStart();\n  this.app.listen(this.port, () => console.log(`Express server running on port ${this.port}`));\n}\n```", "```ts\nnpm install cors @types/cors --save\n```", "```ts\npublic WithCorsSupport(): Server {\n    this.app.use(cors());\n    return this;\n}\n```", "```ts\nexport interface IRouter {\n  AddRoute(route: any): void;\n}\n```", "```ts\nexport class RoutingEngine {\n  constructor(private routing: IRouter[] = new Array<IRouter>()) {\n  }\n}\n```", "```ts\npublic Add<T1 extends IRouter>(routing: (new () => T1), route: any) {\n  const routed = new routing();\n  routed.AddRoute(route);\n  this.routing.push(routed);\n}\n```", "```ts\nexport class AddPictureRouter implements IRouter {\n  public AddRoute(route: any): void {\n    route.post('/add/', (request: Request, response: Response) => {\n\n  }\n}\n```", "```ts\nnpm install mongoose @types/mongoose --save-dev\n```", "```ts\nexport const PictureSchema = new Schema({\n  Image: String,\n  Name: String,\n  Description: String,\n  Tags: String,\n});\n```", "```ts\nexport const Picture = mongoose.model('picture', PictureSchema);\n```", "```ts\nexport class Mongo {\n  constructor(private url : string = \"mongodb://localhost:27017/packt_atp_chapter_04\") {\n  }\n\n  public Connect(): void {\n    mongoose.connect(this.url, (e:any) => {\n      if (e) {\n        console.log(`Unable to connect ` + e);\n      } else {\n        console.log(`Connected to the database`);\n      }\n    });\n  } \n}\n```", "```ts\nconst picture = new Picture(request.body);\npicture.save((err, picture) => {\n  if (err) {\n    response.send(err);\n  }\n  response.json(picture);\n});\n```", "```ts\nexport class GetPicturesRouter implements IRouter {\n  public AddRoute(route: any): void {\n    route.get('/get/', (request: Request, response: Response) => {\n\n    });\n  }\n}\n```", "```ts\nPicture.distinct(\"_id\", (err, picture) => {\n  if (err) {\n    response.send(err);\n  }\n  response.send(pic);\n});\n```", "```ts\nexport class FindByIdRouter implements IRouter {\n  public AddRoute(route: any): void {\n    route.get('/id/:id', (request: Request, response: Response) => {\n    });\n  }\n}\n```", "```ts\nPicture.findOne({ _id: request.params.id }, '-_id', (err, picture) => {\n  if (err) {\n    response.send(err);\n  }\n  response.json(picture);\n});\n```", "```ts\nconstructor(private port: number = 3000, private app: any = express(), private mongo: Mongo = new Mongo(), private routingEngine: RoutingEngine = new RoutingEngine()) {}\n\nprotected abstract AddRouting(routingEngine: RoutingEngine, router: any): void;\n\npublic Start() : void {\n  ...\n  this.mongo.connect();\n  this.router = express.Router();\n  this.AddRouting(this.routingEngine, this.router);\n  this.app.use(this.router);\n  this.OnStart();\n  this.app.listen(this.port, () => console.log(`Express server running on port ${this.port}`));\n}\n```", "```ts\nexport class AdvancedTypeScriptProjectsChapter4 extends Server {\n  protected AddRouting(routingEngine: RoutingEngine, router: any): void {\n    routingEngine.Add(AddPictureRouter, router);\n    routingEngine.Add(GetPicturesRouter, router);\n    routingEngine.Add(FindByIdRouter, router);\n  }\n}\n\nnew AdvancedTypeScriptProjectsChapter4(3000).WithCorsSupport().Start();\n```", "```ts\nng g c components/PageBody\n```", "```ts\n...\n      <span>Advanced TypeScript</span>\n    </mat-toolbar>\n    <atp-page-body></atp-page-body>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n```", "```ts\n<div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1%\" fxLayoutAlign=\"left\">\n</div>\n```", "```ts\n<mat-card class=\"picture-card-layout\" *ngFor=\"let picture of Pictures\">\n</mat-card>\n```", "```ts\n<mat-card-title fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\">\n  <span fxFlex=\"80%\">{{picture.Name}}</span>\n</mat-card-title>\n<img mat-card-image [src]=\"picture.Image\" />\n<p>{{picture.Description}}</p>\n```", "```ts\n.picture-card-layout {\n  width: 25%;\n  margin-top: 2%;\n  margin-bottom: 2%;\n}\n```", "```ts\nexport class PageBodyComponent implements OnInit {\n  Pictures: Array<IPictureModel>;\n  constructor(private addImage: AddImageService, private loadImage: LoadImageService, \n    private transfer: TransferDataService) {\n    this.Pictures = new Array<IPictureModel>();\n  }\n\n  ngOnInit() {\n  }\n}\n```", "```ts\nexport class ContextServiceBase {\n}\n```", "```ts\nprivate source = new BehaviorSubject(null);\n```", "```ts\ncontext: this.source.asObservable();\n```", "```ts\npublic add(image: IPictureModel) : void {\n  this.source.next(image);\n} \n```", "```ts\nng generate service services/AddImage\n```", "```ts\nexport class AddImageService extends ContextServiceBase {\n}\n```", "```ts\nng generate service services/LoadImage\n```", "```ts\nexport class LoadImageService extends ContextServiceBase {\n}\n```", "```ts\nng g service services/TransferData\n```", "```ts\nexport class TransferDataService {\n  constructor(private client: HttpClient, private addImage: AddImageService, \n    private loadImage: LoadImageService) {\n  }\n}\n```", "```ts\nprivate SubscribeToAddImageContextChanges() {\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n}\n```", "```ts\nthis.addImage.context.subscribe(message => {\n});\n```", "```ts\nif (message === null) {\n  return;\n}\nthis.client.post<IPictureModel>('http://localhost:3000/add/', message, httpOptions)\n  .subscribe(callback => { });\n```", "```ts\nprivate SubscribeToAddImageContextChanges() {\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n  this.addImage.context.subscribe(message => {\n    if (message === null) {\n      return;\n    }\n    this.client.post<IPictureModel>('http://localhost:3000/add/', message, httpOptions)\n      .subscribe(callback => {\n    });\n  });\n}\n```", "```ts\nprivate LoadImagesWithSubscription() {\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/text',\n    })\n  };\n  this.client.get<string[]>('http://localhost:3000/get/', httpOptions).subscribe(pic => {\n  });\n}\n```", "```ts\npic.forEach(img => {\n  this.client.get<IPictureModel>('http://localhost:3000/id/' + img).subscribe(pic1 => {\n    if (pic1 !== null) {\n      this.loadImage.add(pic1);\n    }\n  });\n});\n```", "```ts\npublic Initialize(): void {\n  this.SubscribeToAddImageContextChanges();\n  this.LoadImagesWithSubscription();\n}\n```", "```ts\nngOnInit() {\n  this.transfer.Initialize();\n\n}\n```", "```ts\nthis.addImage.context.subscribe(message => {\n  if (!message) {\n    return;\n  }\n  this.Pictures.push(message);\n});\nthis.loadImage.context.subscribe(message => {\n  if (!message) {\n    return;\n  }\n  this.Pictures.push(message);\n});\n```", "```ts\nconstructor(private dialog: MatDialog, private addImage: AddImageService) {\n}\n```", "```ts\npublic ImportImage(): void {\n}\n```", "```ts\n<a mat-list-item (click)=\"ImportImage()\">Import image</a>\n```", "```ts\nconst config = new MatDialogConfig();\nconfig.disableClose = true;\nconfig.autoFocus = true;\nconfig.width = '500px';\n```", "```ts\nthis.dialogRef = this.dialog.open(FileuploadComponent, config);\n```", "```ts\nthis.dialogRef.afterClosed().subscribe(r => {\n  if (r) {\n    this.addImage.add(r);\n  }\n});\n```"]