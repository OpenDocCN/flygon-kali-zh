- en: Chapter 3. Working with Real-time JSON
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用实时JSON
- en: In the previous chapter, I introduced you to basic JSON, how JSON objects can
    be embedded into an HTML file, and how basic operations such as accessing keys
    can be performed on simple JSON objects. Now let us take a step forward and work
    with JSON objects that are bigger, more complex, and closer to the JSON that we
    would work with in real-time situations. In real-world applications, JSON can
    be retrieved either as a response from an asynchronous request or from a JSON
    feed. A website uses HTML, CSS, and JavaScript to provide a visually beautiful
    user interface. But there are cases where data vendors are only focused on getting
    the data. A **data feed** serves their purpose; a feed is a crude way of supplying
    data so that others can reuse it to display the data on their websites or to ingest
    the data and run their algorithms on it. Such data feeds are big in size and cannot
    directly be embedded into the `script` tag. Let us look at how external JavaScript
    files can be included in an HTML file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我向您介绍了基本的JSON，以及如何将JSON对象嵌入到HTML文件中，以及如何在简单的JSON对象上执行访问键等基本操作。现在让我们向前迈进一步，使用更大、更复杂且更接近我们在实时情况下使用的JSON对象。在现实世界的应用中，JSON可以作为异步请求的响应或来自JSON源的检索。网站使用HTML、CSS和JavaScript提供视觉上美观的用户界面。但也有一些情况，数据供应商只关注获取数据。数据源满足了他们的目的；数据源是一种提供数据的粗糙方式，以便他人可以重用它来在其网站上显示数据或摄取数据并在其上运行算法。这些数据源体积庞大，不能直接嵌入到`script`标签中。让我们看看如何在HTML文件中包含外部JavaScript文件。
- en: 'The following screenshot depicts the code for the `external-js.html` file:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`external-js.html`文件的代码：
- en: '![Working with Real-time JSON](img/6034OS_03_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![使用实时JSON](img/6034OS_03_01.jpg)'
- en: In this example, we include `example.js`, which is an external JavaScript file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们包含了一个外部JavaScript文件`example.js`。
- en: '![Working with Real-time JSON](img/6034OS_03_02.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![使用实时JSON](img/6034OS_03_02.jpg)'
- en: To access the variable `x` that is in the `example.js` file from the `external-js.html`
    file, we write our programs within our `script` tags in the HTML file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`external-js.html`文件中访问`example.js`文件中的变量`x`，我们在HTML文件的`script`标签中编写我们的程序。
- en: 'This file has to be created in the same folder as `external-js.html`. Follow
    the given folder structure:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件必须在与`external-js.html`相同的文件夹中创建。遵循给定的文件夹结构：
- en: '![Working with Real-time JSON](img/6034OS_03_03.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![使用实时JSON](img/6034OS_03_03.jpg)'
- en: Accessing objects in JSON
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问JSON中的对象
- en: Now that we understand how to make a script call to fetch an external JavaScript
    file, let us use the same technique to import a JSON feed. I have generated a
    test `employee` JSON data feed with 100 records. To traverse through any JSON
    feed, it is important to make a note of how the data is arranged. The keys in
    this data feed are basic employee information such as employee number, date of
    birth, first name, last name, gender, hire date, titles that they have held, and
    the dates during which they have held those titles. A few employees have held
    the same title throughout their tenure, while there are some employees who have
    held more than one title.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何调用脚本来获取外部JavaScript文件，让我们使用相同的技术来导入JSON源。我生成了一个包含100条记录的测试`employee`
    JSON数据源。要遍历任何JSON源，重要的是要注意数据的排列方式。这个数据源中的键是基本的员工信息，如员工编号、出生日期、名字、姓氏、性别、入职日期、他们担任的职务以及他们担任这些职务的日期。一些员工在任期内担任相同的职务，而有些员工则担任了多个职务。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This JSON file will be part of the code files for exercises.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个JSON文件将成为练习的代码文件的一部分。
- en: '![Accessing objects in JSON](img/6034OS_03_04.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![访问JSON中的对象](img/6034OS_03_04.jpg)'
- en: 'As we are dealing with a complex JSON data feed, let us save the data feed
    to a file. In the `data_json_feed.html` file, we have imported the `data.json`
    file, which is in the same folder as the HTML file. It is noteworthy that the
    JSON feed has been assigned to a variable called `data_json`, and to access the
    JSON feed, we will have to use this variable in the `data_json_feed.html` file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在处理复杂的JSON数据源，让我们将数据源保存到一个文件中。在`data_json_feed.html`文件中，我们导入了与HTML文件位于同一文件夹中的`data.json`文件。值得注意的是，JSON源已分配给一个名为`data_json`的变量，要访问JSON源，我们将在`data_json_feed.html`文件中使用这个变量：
- en: '![Accessing objects in JSON](img/6034OS_03_05.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![访问JSON中的对象](img/6034OS_03_05.jpg)'
- en: Another thing to note is the use of a new method called `console.log`. Browsers
    such as Mozilla Firefox, Google Chrome, and Apple Safari profile a console panel
    for run-time JavaScript development and debugging. The use of the JavaScript function
    `alert` is discouraged due to its obtrusive behavior. `console.log`, on the other
    hand, is unobtrusive and logs its messages to the console. From here on, we will
    refrain from using the `alert` method and will use `console.log` to print data
    into the console window. Google Chrome and Apple Safari come with developer tools
    already installed; to view the console, right-click on the page and click on **Inspect
    Element**. Both of them come with a **Console** tab that allows us to work with
    our logging. Firefox is dependent on Firebug; in [Chapter 8](ch08.xhtml "Chapter 8. Debugging
    JSON"), *Debugging JSON*, I will walk you through the installation steps of Firebug.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的一件事是使用一个称为`console.log`的新方法。像Mozilla Firefox、Google Chrome和Apple Safari这样的浏览器为运行时JavaScript开发和调试提供了一个控制台面板。由于其突兀的行为，不建议使用JavaScript函数`alert`。另一方面，`console.log`是不突兀的，并将其消息记录到控制台中。从现在开始，我们将避免使用`alert`方法，而是使用`console.log`将数据打印到控制台窗口。Google
    Chrome和Apple Safari已经安装了开发者工具；要查看控制台，右键单击页面，然后单击**检查元素**。它们都有一个**控制台**选项卡，允许我们使用日志记录。Firefox依赖于Firebug；在[第8章](ch08.xhtml
    "第8章。调试JSON")中，*调试JSON*，我将指导您完成Firebug的安装步骤。
- en: '![Accessing objects in JSON](img/6034OS_03_06.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![访问JSON中的对象](img/6034OS_03_06.jpg)'
- en: When we load the `data_json_feed.html` file into the Firefox browser, open up
    our console window, and click on the **DOM** tab, we are going to see a list of
    100 `employee` objects. If our object is small and has one or two child objects,
    we would prefer using their numeric indexes to access them; in this case, as we
    have a huge number of child objects, it is not realistic to target objects based
    on static indexes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`data_json_feed.html`文件加载到Firefox浏览器中，打开控制台窗口，并点击**DOM**选项卡，我们将看到一个包含100个`employee`对象的列表。如果我们的对象很小并且有一两个子对象，我们会更喜欢使用它们的数字索引来访问它们；在这种情况下，由于我们有大量的子对象，根据静态索引来定位对象是不现实的。
- en: '![Accessing objects in JSON](img/6034OS_03_07.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![访问JSON中的对象](img/6034OS_03_07.jpg)'
- en: Performing complex operations
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行复杂操作
- en: To tackle an array of objects, we have to handle them in an iterative method.
    We will have to come up with an iterative solution in which we target one object
    at a time; once the object is accessed, we would not target that object another
    time. This allows us to maintain data integrity as we can avoid accessing the
    same object multiple times, thereby avoiding any redundancies. The looping statements
    in JavaScript are the `while` loop and the `for` loop. Let us take a quick look
    at how we can use these looping techniques to traverse through our employees'
    array.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理一个对象数组，我们必须以迭代的方式处理它们。我们将不得不提出一个迭代解决方案，其中我们一次只针对一个对象；一旦访问了对象，我们就不会再次访问该对象。这使我们能够保持数据的完整性，因为我们可以避免多次访问相同的对象，从而避免任何冗余。JavaScript中的循环语句是`while`循环和`for`循环。让我们快速看一下如何使用这些循环技术来遍历我们的员工数组。
- en: '![Performing complex operations](img/6034OS_03_08.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_08.jpg)'
- en: 'In the `while_employees_traversal.html` file, we are importing the `data.js`
    file, which we had examined in the previous section. The `data_json` variable
    inside the `data.js` file consists of an array of objects that are imported into
    this HTML page. In the `script` tags, we are setting up two variables: the `i`
    variable to hold a starting counter and the `employeeCount` variable to hold the
    counter of the total number of objects in `data_json`. To retrieve the number
    of items that exists in an array, we can use the `.length` property that is provided
    by JavaScript. There are three important supporting blocks for a `while` loop:
    the condition, statements in the `while` loop, and either the increment or decrement
    operation based on the condition. Let us take a quick look at these three separately:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while_employees_traversal.html`文件中，我们导入了在上一节中检查过的`data.js`文件。`data.js`文件中的`data_json`变量包含了一个对象数组，这些对象被导入到这个HTML页面中。在`script`标签中，我们设置了两个变量：`i`变量用于保存起始计数器，`employeeCount`变量用于保存`data_json`中对象的总数。要检索数组中存在的项目数，我们可以使用JavaScript提供的`.length`属性。`while`循环有三个重要的支持块：条件、`while`循环中的语句，以及根据条件的增量或减量操作。让我们分别快速看一下这三个：
- en: '![Performing complex operations](img/6034OS_03_09.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_09.jpg)'
- en: We are initializing the variable `i` to zero and the condition that we are looking
    for is if zero is less than the number of items in the variable `data_json`, then
    proceed into the loop.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量`i`初始化为零，并且我们要查找的条件是如果零小于变量`data_json`中的项目数，则继续进入循环。
- en: '![Performing complex operations](img/6034OS_03_10.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_10.jpg)'
- en: 'If the condition is true, the statements inside the loop are executed, until
    they hit the incrementing condition:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件为真，则循环内的语句将被执行，直到它们达到增量条件：
- en: '![Performing complex operations](img/6034OS_03_11.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_11.jpg)'
- en: 'Once the incrementing operator approaches, the value of the `i` variable is
    incremented by 1, and it will go back to the initial step of the `while` loop.
    At the initial step, the condition is again verified to check if `i` is still
    less than the number of items in `data_json`. If that were true, it would again
    enter the loop and execute the statements. This process continues to repeat itself
    until the value of variable `i` is equal to that of `employeeCount`. At that point,
    the `while` loop''s execution is complete, and the statements inside the `while`
    loop are maintained as logs in the console window of the browser. Before running
    the HTML file, `while_employees_traversal.html`, verify that the `data.json` file
    is in the same directory as the HTML file. Load this HTML file into a browser
    of your choice (Chrome, Firefox, or Safari are recommended), open up the console
    window by right-clicking on the web page and clicking on **Inspect Element** if
    you are on Chrome or Safari. The employee numbers should be displayed on the console
    window:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦增量运算符接近，变量`i`的值将增加1，并且它将返回到`while`循环的初始步骤。在初始步骤中，再次验证条件，以检查`i`是否仍然小于`data_json`中的项目数。如果是真的，它将再次进入循环并执行语句。这个过程会一直重复，直到变量`i`的值等于`employeeCount`的值。在那一点上，`while`循环的执行就完成了，并且`while`循环内的语句会作为日志保留在浏览器的控制台窗口中。在运行HTML文件`while_employees_traversal.html`之前，请验证`data.json`文件是否与HTML文件在同一个目录中。将这个HTML文件加载到您选择的浏览器中（推荐使用Chrome，Firefox或Safari），通过右键单击网页并点击**检查元素**来打开控制台窗口，如果您使用的是Chrome或Safari。员工编号应该显示在控制台窗口中：
- en: '![Performing complex operations](img/6034OS_03_12.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_12.jpg)'
- en: 'To retrieve the employee''s first name and last name, we will concatenate the
    `first_name` and `last_name` keys in the `employee` object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索员工的名字和姓氏，我们将连接`employee`对象中的`first_name`和`last_name`键：
- en: '![Performing complex operations](img/6034OS_03_13.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_13.jpg)'
- en: We can use the same technique to retrieve the rest of the keys such as `birth_date`,
    `gender`, and `hire_date`, except for `titles`. A quick glance at the JSON feed
    explains that unlike the rest of the keys, `titles` is an object or an array of
    objects. The `titles` object contains all the titles that the employee has held
    since joining the company. Some employees have one title, while others have more
    than one; so the former would be an object by itself, while the latter would be
    an array of objects, each containing a `title` object. To handle this case, we
    would have to check if the employee has one title or more than one title. If the
    person has one title, we should print the data, and if the person has more than
    one title, we would have to iterate them through the array of `title` objects
    to print all the titles that the employee has.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的技术来检索其余的键，比如`birth_date`、`gender`和`hire_date`，除了`titles`。快速浏览JSON数据可以解释，与其余的键不同，`titles`是一个对象或对象数组。`titles`对象包含员工自加入公司以来担任的所有职称。一些员工只有一个职称，而另一些员工有多个；因此前者将是一个独立的对象，而后者将是一个包含`title`对象的对象数组。为了处理这种情况，我们需要检查员工是否只有一个职称或多个职称。如果这个人只有一个职称，我们应该打印数据，如果这个人有多个职称，我们需要遍历`title`对象的数组，打印员工拥有的所有职称。
- en: '![Performing complex operations](img/6034OS_03_14.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_14.jpg)'
- en: 'The existent code in the `script` tags has to be replaced with the previous
    code, provided to retrieve the titles of the employee. In this script, we are
    using the variables `i` and `employeeCount` from our earlier script. We have introduced
    a new condition to check if the `titles` key for a particular employee is an `Array`
    object. This condition gets the type of the value that the loop is passing in
    and verifies if it is an instance of an `Array` object. Let us identify this condition
    that is checking the instance type:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`script`标签中的现有代码必须用之前提供的代码替换，以检索员工的职称。在这个脚本中，我们使用了之前脚本中的变量`i`和`employeeCount`。我们引入了一个新的条件来检查特定员工的`titles`键是否是`Array`对象。这个条件获取循环传递的值的类型，并验证它是否是`Array`对象的实例。让我们识别一下检查实例类型的条件：'
- en: '![Performing complex operations](img/6034OS_03_15.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_15.jpg)'
- en: 'Once this condition is satisfied, the statements inside the condition are executed.
    Inside the success condition we declare three variables. The first variable, `j`,
    would hold the counter for the second `while` loop that would iterate through
    `titles`. The second variable is `titleCount`; it would store the number of items
    that are available in the `titles` array. The last variable is `titles`, which
    is initialized to an empty string. This variable would hold all the titles held
    by the employee. It stores the list of titles as a list separated by `&`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦满足这个条件，就会执行条件内的语句。在成功条件内，我们声明了三个变量。第一个变量`j`将保存第二个`while`循环的计数器，该循环将迭代`titles`。第二个变量是`titleCount`，它将存储`titles`数组中可用项目的数量。最后一个变量是`titles`，它被初始化为空字符串。这个变量将保存员工拥有的所有职称。它将职称列表作为由`&`分隔的列表存储：
- en: '![Performing complex operations](img/6034OS_03_16.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_16.jpg)'
- en: 'In this `while` loop, the titles of the employee are being built; one title
    at a time is being added to the `titles` variable. Once the title has been added
    to the `titles` variable, the value of `j` is incremented and the loop continues
    until all the `title` objects are iterated. If the `titles` key is not an array,
    the execution would go into the `else` block and the statements in the `else`
    block are executed. As there is only one title for that employee, the data would
    be directly printed onto the console. Now let us look at the same example and
    use the `for` loop. Similar to the `while` loop, the `for` loop also traverses
    through the array of employees from the `data_json` variable. The business logic
    remains the same irrespective of what looping technique is used. Let us re-create
    the same example using the `for` loop:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`while`循环中，正在构建员工的职称；每次添加一个职称到`titles`变量中。一旦职称被添加到`titles`变量中，`j`的值就会增加，循环会继续直到所有的`title`对象都被迭代。如果`titles`键不是一个数组，执行会进入`else`块，并执行`else`块中的语句。由于该员工只有一个职称，数据会直接打印到控制台上。现在让我们看一下相同的例子，并使用`for`循环。与`while`循环类似，`for`循环也遍历`data_json`变量中的员工数组。无论使用何种循环技术，业务逻辑都保持不变。让我们使用`for`循环重新创建相同的例子：
- en: '![Performing complex operations](img/6034OS_03_17.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![执行复杂操作](img/6034OS_03_17.jpg)'
- en: Unlike the `while` loop, we would not need extra counter variables to hold the
    current index and the length of the array, the `for` loop takes care of those
    counters. Other than the foundational changes with the syntax, the business logic
    remains the same, as I had pointed out earlier. Now that we are familiar with
    how we can access objects and perform complex operations to extract data, in the
    next section, let us take a look at how JSON data can be modified.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与`while`循环不同，我们不需要额外的计数变量来保存当前索引和数组的长度，`for`循环会处理这些计数器。除了语法上的基本变化，业务逻辑保持不变，就像我之前指出的那样。现在我们已经了解了如何访问对象并执行复杂操作来提取数据，在下一节中，让我们看看如何修改JSON数据。
- en: Modifying JSON
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改JSON
- en: 'JSON retrieved from a JSON feed is always going to be read-only; as such data
    feeds do not provide functionality to modify their data from unverified sources.
    There are many cases where we would want to ingest the data from an external data
    feed, and then modify that content as per our requirements. An example is a company
    that is using a data feed that is being supplied by a data vendor, but the data
    that is being provided is a lot more than the company requires. In such cases,
    rather than using the whole feed, the company would only extract a part of it,
    perform certain operations to modify it as per their requirements, and reuse the
    new JSON object. Let us take our `employee` JSON feed. Assume that the name of
    the company was different during different periods. We want to group the employees
    by company name, which is based on when they joined. Employees who joined the
    company before 1987 belong to Company 1 and those who joined the company in 1987
    or after belong to Company 2\. To represent this change, we add the `company`
    key to our JSON feed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从JSON数据源中检索到的JSON始终是只读的；因此，数据源不提供从未经验证的来源修改其数据的功能。有许多情况下，我们希望从外部数据源摄取数据，然后根据我们的需求修改内容。一个例子是，一家公司正在使用数据供应商提供的数据源，但提供的数据远远超出了公司的需求。在这种情况下，公司不会使用整个数据源，而是只提取其中的一部分，执行某些操作以根据他们的需求修改它，并重用新的JSON对象。让我们以我们的`employee`
    JSON数据源为例。假设公司在不同时期的公司名称不同。我们想要根据员工加入公司的时间将员工分组到公司名称下。在1987年之前加入公司的员工属于公司1，而在1987年或之后加入公司的员工属于公司2。为了表示这种变化，我们向我们的JSON数据源添加了`company`键：
- en: '![Modifying JSON](img/6034OS_03_18.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![修改JSON](img/6034OS_03_18.jpg)'
- en: 'In the `for_employee_company.html` file, we are traversing through the array
    of `employee` objects and we are extracting the year in which the employee joined.
    We are converting this from a string to an integer, so we can use the year value
    for comparison purposes. We assign the parsed year to the `join_year` variable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for_employee_company.html`文件中，我们正在遍历`employee`对象数组，并提取员工加入的年份。我们将其从字符串转换为整数，以便我们可以将年份值用于比较。我们将解析后的年份赋给`join_year`变量：
- en: '![Modifying JSON](img/6034OS_03_19.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![修改JSON](img/6034OS_03_19.jpg)'
- en: 'In the following screenshot, we are checking to see if the employee joined
    the company before 1987; if they have joined before 1987, we add the `company`
    property to the `employee` object and assign the value of `Company1`. If they
    have joined in 1987 or after 1987, we assign the value of `Company2`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们正在检查员工是否在1987年之前加入了公司；如果他们在1987年之前加入了，我们将`company`属性添加到`employee`对象中，并赋予值`Company1`。如果他们在1987年或之后加入了，我们将赋予值`Company2`：
- en: '![Modifying JSON](img/6034OS_03_20.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![修改JSON](img/6034OS_03_20.jpg)'
- en: 'After a value is assigned to the newly added property company, we build a generic
    message that would apply for all the employees, irrespective of which company
    they belong to. We extract the employee number, the year in which the employee
    joined, and the name of the company to generate that message:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在为新添加的属性`company`分配值之后，我们构建了一个通用消息，适用于所有员工，无论他们属于哪家公司。我们提取员工编号、员工加入的年份和公司名称来生成该消息：
- en: '![Modifying JSON](img/6034OS_03_21.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![修改JSON](img/6034OS_03_21.jpg)'
- en: 'When `for_employee_company.html` is run from the web browser, the script to
    perform the modifications is run and the output is logged to the console:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当从Web浏览器运行`for_employee_company.html`时，将运行执行修改的脚本，并将输出记录到控制台：
- en: '![Modifying JSON](img/6034OS_03_22.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![修改JSON](img/6034OS_03_22.jpg)'
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter addresses the core concepts of how to handle static JSON feeds.
    We began by importing an external JSON object into our HTML file, looped through
    the complex array of objects to parse and extract required data. We used the `while`
    and `for` loops to loop through the array and used conditions to target our search.
    We completed this chapter by locally modifying the existing JSON feed and adding
    a new property, the `employee` object. Now that we have mastered accessing JSON
    from a static file, it is time for us to make some asynchronous calls to fetch
    some active JSON over HTTP.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何处理静态JSON数据源的核心概念。我们首先将外部JSON对象导入到我们的HTML文件中，循环遍历复杂的对象数组以解析和提取所需的数据。我们使用`while`和`for`循环来遍历数组，并使用条件来定位我们的搜索。我们通过在本地修改现有的JSON数据源并添加一个新属性`employee`对象来完成本章。现在我们已经掌握了从静态文件中访问JSON的方法，是时候开始进行一些异步调用，以从HTTP获取一些活动的JSON数据了。
