["```java\npackage com.mycompany.product.entity ; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.GeneratedValue; \nimport javax.persistence.GenerationType; \nimport javax.persistence.Id; \n\n@Entity \npublic class Product { \n\n   @Id \n   @GeneratedValue(strategy=GenerationType.AUTO) \n   private int id ; \n\n   @Column(nullable = false) \n   private String name ; \n\n   @Column(nullable = false) \n   private int catId ; \n```", "```java\npackage com.mycompany.product.dao; \n\nimport java.util.List; \nimport org.springframework.data.repository.CrudRepository; \nimport com.mycompany.product.entity.Product; \n\npublic interface ProductRepository extends CrudRepository<Product, Integer> { \n\n   List<Product> findByCatId(int catId); \n} \n```", "```java\n@RestController \npublic class ProductService { \n\n   @Autowired \n   ProductRepository prodRepo ; \n\n   @RequestMapping(\"/product/{id}\") \n   Product getProduct(@PathVariable(\"id\") int id) { \n         return prodRepo.findOne(id); \n   } \n\n   @RequestMapping(\"/products\") \n   List<Product> getProductsForCategory(@RequestParam(\"id\") int id) { \n         return prodRepo.findByCatId(id); \n   } \n} \n```", "```java\nlogging.level.org.hibernate.tool.hbm2ddl=DEBUG \nlogging.level.org.hibernate.SQL=DEBUG \n```", "```java\n-- Adding a few initial products\ninsert into product(id, name, cat_Id) values (1, 'Apples', 1) \ninsert into product(id, name, cat_Id) values (2, 'Oranges', 1) \ninsert into product(id, name, cat_Id) values (3, 'Bananas', 1) \ninsert into product(id, name, cat_Id) values (4, 'Carrot', 2) \n```", "```java\nHHH000227: Running hbm2ddl schema export \ndrop table product if exists \ncreate table product (id integer generated by default as identity (start with 1), cat_id integer not null, name varchar(255) not null, primary key (id)) \nHHH000476: Executing import script '/import.sql' \nHHH000230: Schema export complete \n```", "```java\n{\"id\":1,\"name\":\"Apples\",\"catId\":1} \n```", "```java\nselect product0_.id as id1_0_0_, product0_.cat_id as cat_id2_0_0_, product0_.name as name3_0_0_ from product product0_ where product0_.id=? \n```", "```java\n[{\"id\":1,\"name\":\"Apples\",\"catId\":1},{\"id\":2,\"name\":\"Oranges\",\"catId\":1},{\"id\":3,\"name\":\"Bananas\",\"catId\":1}] \n```", "```java\nselect product0_.id as id1_0_, product0_.cat_id as cat_id2_0_, product0_.name as name3_0_ from product product0_ where product0_.cat_id=? \n```", "```java\n[{\"id\":4,\"name\":\"Carrot\",\"catId\":2}] \n```", "```java\n@SpringBootApplication\n@EnableDiscoveryClient \n@EnableCaching \npublic class ProductSpringApp { \n```", "```java\npublic interface ProductRepository extends CrudRepository<Product, Integer> { \n\n   @Cacheable(\"productsByCategoryCache\") \n   List<Product> findByCatId(int catId); \n} \n```", "```java\nselect product0_.id as id1_0_, product0_.cat_id as cat_id2_0_, product0_.name as name3_0_ from product product0_ where product0_.cat_id=? \n```", "```java\n<dependency> \n   <groupId>org.springframework.boot</groupId> \n   <artifactId>spring-boot-starter-cache</artifactId> \n</dependency> \n<dependency> \n   <groupId>com.hazelcast</groupId> \n   <artifactId>hazelcast-spring</artifactId>              \n</dependency>\n```", "```java\npublic class Product implements Serializable {\n```", "```java\n<hazelcast  \n   xsi:schemaLocation=\"http://www.hazelcast.com/schema/config http://www.hazelcast.com/schema/config/hazelcast-config-3.6.xsd\" \n   > \n\n   <group> \n         <name>ProductCluster</name> \n         <password>letmein</password> \n   </group> \n   <network> \n        <join> \n            <multicast enabled=\"true\"/> \n        </join> \n    </network> \n</hazelcast>\n```", "```java\nLoading 'hazelcast.xml' from classpath. \n[LOCAL] [ProductCluster] [3.6.5] Picked Address[169.254.104.186]:5701, using socket  \n[169.254.104.186]:5701 [ProductCluster] [3.6.5] Hazelcast 3.6.5 (20160823 - e4af3d9) starting \nMembers [1] { \nMember [169.254.104.186]:5701 this \n}\n```", "```java\nMembers [2] { \n   Member [169.254.104.186]:5701 \n   Member [169.254.104.186]:5702 this \n} \n```", "```java\n{\"_id\":\"1\",\"name\":\"Apples\",\"catId\":1} \n{\"_id\":\"2\",\"name\":\"Oranges\",\"catId\":1} \n{\"_id\":\"3\",\"name\":\"Bananas\",\"catId\":1} \n{\"_id\":\"4\",\"name\":\"Carrot\",\"catId\":2} \n```", "```java\nmongoimport --db masterdb --collection product --drop --file D:datamongoscriptsproducts.json \n```", "```java\n<dependencies> \n         <dependency> \n               <groupId>org.springframework.boot</groupId> \n               <artifactId>spring-boot-starter-web</artifactId> \n         </dependency> \n         <dependency> \n               <groupId>org.springframework.boot</groupId> \n               <artifactId>spring-boot-starter-actuator</artifactId> \n         </dependency> \n         <dependency> \n               <groupId>org.springframework.cloud</groupId> \n               <artifactId>spring-cloud-starter-eureka</artifactId> \n         </dependency> \n         <dependency> \n               <groupId>org.springframework.boot</groupId> \n               <artifactId>spring-boot-starter-data- \n                mongodb</artifactId> \n        </dependency> \n</dependencies> \n```", "```java\n@Document \npublic class Product  { \n\n   @Id \n   private String id ;      \n   private String name ;    \n   private int catId ; \n\n   public Product() {} \n\n   .... (other constructors, getters and setters) \n```", "```java\npackage com.mycompany.product.dao; \n\nimport java.util.List; \nimport org.springframework.data.mongodb.repository.MongoRepository; \nimport com.mycompany.product.entity.Product; \n\npublic interface ProductRepository extends MongoRepository<Product, String> { \n\n   List<Product> findByCatId(int catId); \n}\n```", "```java\nserver.port=8085 \neureka.instance.leaseRenewalIntervalInSeconds=5 \nspring.data.mongodb.database=masterdb \n```", "```java\n{\"index\":{\"_id\":\"1\"}} \n{\"id\":\"1\",\"name\":\"Apples\",\"catId\":1} \n\n{\"index\":{\"_id\":\"2\"}} \n{\"id\":\"2\",\"name\":\"Oranges\",\"catId\":1} \n\n{\"index\":{\"_id\":\"3\"}} \n{\"id\":\"3\",\"name\":\"Bananas\",\"catId\":1} \n\n{\"index\":{\"_id\":\"4\"}} \n{\"id\":\"4\",\"name\":\"Carrot\",\"catId\":2} \n```", "```java\nhttp://localhost:9200/product/_search?q=*&pretty\n```", "```java\npackage com.mycompany.product.entity ; \n\nimport org.springframework.data.annotation.Id; \nimport org.springframework.data.elasticsearch.annotations.Document; \n\n@Document(indexName = \"product\", type = \"external\" ) \npublic class Product  { \n\n   @Id \n   private String id ;      \n   private String name ;    \n   private int catId ;           //Remaining class is same as before \n```", "```java\npackage com.mycompany.product.dao; \n\nimport java.util.List; \nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository; \nimport com.mycompany.product.entity.Product; \n\npublic interface ProductRepository extends ElasticsearchRepository<Product, String> { \n\n   List<Product> findByCatId(int catId); \n} \n```", "```java\nserver.port=8086 \neureka.instance.leaseRenewalIntervalInSeconds=5 \n\nspring.data.elasticsearch.repositories.enabled=true \nspring.data.elasticsearch.cluster-name=elasticsearch \nspring.data.elasticsearch.cluster-nodes=localhost:9300 \n```", "```java\n@RequestMapping(value=\"/product\", method = RequestMethod.POST) \nResponseEntity<Product> insertProduct(@RequestBody Product product) { \n\n   Product savedProduct = prodRepo.save(product) ; \n   return new ResponseEntity<Product>(savedProduct, HttpStatus.OK);         \n}  \n```", "```java\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.PUT) \nResponseEntity<Product> updateProduct(@PathVariable(\"id\") int id, @RequestBody Product product) { \n\n   // First fetch an existing product and then modify it.  \n   Product existingProduct = prodRepo.findOne(id);  \n\n   // Now update it back  \n   existingProduct.setCatId(product.getCatId()); \n   existingProduct.setName(product.getName()); \n   Product savedProduct = prodRepo.save(existingProduct) ; \n\n   // Return the updated product with status ok  \n   return new ResponseEntity<Product>(savedProduct, HttpStatus.OK);         \n} \n```", "```java\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.DELETE) \nResponseEntity<Product> deleteProduct(@PathVariable(\"id\") int id) {         \n   prodRepo.delete(id); \n   return new ResponseEntity<Product>(HttpStatus.OK);           \n} \n```", "```java\npublic interface ProductRepository extends CrudRepository<Product, Integer> { \n\n   @Cacheable(\"productsByCategoryCache\") \n   List<Product> findByCatId(int catId); \n\n   @CacheEvict(cacheNames=\"productsByCategoryCache\", allEntries=true) \n   Product save(Product product); \n\n   @CacheEvict(cacheNames=\"productsByCategoryCache\", allEntries=true) \n   void delete(Product product); \n} \n```", "```java\n@CacheEvict(cacheNames=\"productsByCategoryCache\", key = \"#result?.catId\") \nProduct save(Product product); \n\n@CacheEvict(cacheNames=\"productsByCategoryCache\", key = \"#p0.catId\") \nvoid delete(Product product); \n```", "```java\n{ \n  \"timestamp\": 1483701698917, \n  \"status\": 400, \n  \"error\": \"Bad Request\", \n  \"exception\": \"org.springframework.http.converter.HttpMessageNotReadableException\", \n  \"message\": \"Could not read document: Unexpected character ('\"' (code 34)): was expecting comma to separate Object entriesn at ... \n```", "```java\n@Column(nullable = false) \nprivate String name ; \n```", "```java\ncould not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: \n```", "```java\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.DELETE) \nResponseEntity<Product> deleteProduct(@PathVariable(\"id\") int id) { \n\n   // First fetch an existing product and then delete it.  \n   Product existingProduct = prodRepo.findOne(id);  \n   if (existingProduct == null) { \n         return new ResponseEntity<Product>(HttpStatus.NOT_FOUND); \n   } \n\n   // Return the inserted product with status ok \n   prodRepo.delete(existingProduct); \n   return new ResponseEntity<Product>(HttpStatus.OK);           \n} \n```", "```java\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.DELETE) \nProduct deleteProduct(@PathVariable(\"id\") int id) { \n\n   // First fetch an existing product and then delete it.  \n   Product existingProduct = prodRepo.findOne(id);  \n   if (existingProduct == null) { \n     String errMsg = \"Product Not found with code \" + id ;            \n     throw new BadRequestException(BadRequestException.ID_NOT_FOUND, errMsg); \n   }      \n   // Return the deleted product  \n   prodRepo.delete(existingProduct); \n   return existingProduct ;             \n} \n```", "```java\npublic class BadRequestException extends RuntimeException { \n\n   public static final int ID_NOT_FOUND = 1 ;       \n   private static final long serialVersionUID = 1L; \n\n   int errCode ; \n\n   public BadRequestException(int errCode, String msg) { \n         super(msg); \n         this.errCode = errCode ; \n   } \n} \n```", "```java\n@ExceptionHandler(BadRequestException.class) \nvoid handleBadRequests(BadRequestException bre, HttpServletResponse response) throws IOException { \n\n   int respCode = (bre.errCode == BadRequestException.ID_NOT_FOUND) ? \n         HttpStatus.NOT_FOUND.value() : HttpStatus.BAD_REQUEST.value() ; \n\n   response.sendError(respCode, bre.errCode + \":\" + bre.getMessage()); \n} \n```", "```java\n@ControllerAdvice \npublic class GlobalControllerExceptionHandler { \n\n   @ExceptionHandler(BadRequestException.class) \n   void handleBadRequests(BadRequestException bre, HttpServletResponse response) throws IOException { \n\n         ... Same code as earlier ...  \n   } \n} \n```", "```java\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.PUT) \nProduct updateProduct(@PathVariable(\"id\") String id, @RequestBody Product product) { \n\n   // First fetch an existing product and then modify it.  \n   Product existingProduct = prodRepo.findOne(id);  \n   if (existingProduct == null) { \n         String errMsg = \"Product Not found with code \" + id ; \n         throw new BadRequestException(BadRequestException.ID_NOT_FOUND, errMsg); \n   } \n\n   // Now update it back  \n   existingProduct.setCatId(product.getCatId()); \n   existingProduct.setName(product.getName()); \n   Product savedProduct = prodRepo.save(existingProduct) ; \n\n   // Return the updated product   \n   return savedProduct ;          \n} \n```", "```java\n        <dependency> \n            <groupId>org.springframework.boot</groupId> \n            <artifactId>spring-boot-starter-activemq</artifactId> \n        </dependency>\n```", "```java\n@SpringBootApplication \n@EnableDiscoveryClient \n@EnableJms \npublic class ProductSpringApp {\n```", "```java\npublic class ProductUpdMsg { \n\n   Product product ; \n   boolean isDelete = false ; \n// Constructor, getters and setters \n```", "```java\nspring.activemq.broker-url=tcp://localhost:61616 \njms.ProductTopic=ProductT \nspring.jms.pub-sub-domain=true \n```", "```java\n@Component \npublic class ProductMsgProducer { \n\n   @Autowired  \n   JmsTemplate prodUpdtemplate ; \n\n   @Value(\"${jms.ProductTopic}\") \n   private String productTopic ; \n\n@Bean \n   public MessageConverter jacksonJmsMessageConverter() { \n         MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter(); \n         converter.setTargetType(MessageType.TEXT); \n         converter.setTypeIdPropertyName(\"_type\"); \n         return converter; \n\n   public void sendUpdate(Product product, boolean isDelete) { \n         ProductUpdMsg msg = new ProductUpdMsg(product, isDelete);          \n         prodUpdtemplate.convertAndSend(productTopic, msg);  \n   }      \n} \n```", "```java\n@Autowired \nProductMsgProducer producer ; \n\n@RequestMapping(value=\"/product/{id}\", method = RequestMethod.DELETE) \nProduct deleteProduct(@PathVariable(\"id\") String id) { \n\n   // First fetch an existing product and then delete it.  \n   Product existingProduct = prodRepo.findOne(id);  \n   if (existingProduct == null) { \n         String errMsg = \"Product Not found with code \" + id ;              \n         throw new BadRequestException(BadRequestException.ID_NOT_FOUND, errMsg); \n   } \n\n   // Return the deleted product  \n   prodRepo.delete(existingProduct); \n   producer.sendUpdate(existingProduct, true); \n   return existingProduct ;             \n} \n```", "```java\n<dependency> \n   <groupId>org.springframework.boot</groupId> \n   <artifactId>spring-boot-starter-activemq</artifactId> \n</dependency> \n```", "```java\nspring.activemq.broker-url=tcp://localhost:61616 \njms.ProductTopic=ProductT \nspring.jms.pub-sub-domain=true\n```", "```java\n   @PutMapping(\"/product/{id}\") \n   public void insertUpdateProduct(@RequestBody Product product) {          \n         prodRepo.save(product) ;                         \n   } \n\n   @DeleteMapping(\"/product/{id}\") \n   public void deleteProduct(@RequestBody Product product) { \n         prodRepo.delete(product); \n   } \n```", "```java\n@Component \npublic class ProductUpdListener { \n\n   @Autowired \n   ProductService prodService ; \n\n   @JmsListener(destination = \"${jms.ProductTopic}\", subscription = \"productSearchListener\") \n   public void receiveMessage(ProductUpdMsg msg) { \n\n         Product product = msg.getProduct() ; \n         boolean isDelete = msg.isDelete() ; \n         if (isDelete) { \n               prodService.deleteProduct(product); \n               System.out.println(\"deleted \" + product.getId()); \n         } else { \n               prodService.insertUpdateProduct(product);        \n               System.out.println(\"upserted \" + product.getId()); \n         } \n   } \n\n   @Bean // Serialize message content to json using TextMessage \n   public MessageConverter jacksonJmsMessageConverter() { \n         MappingJackson2MessageConverter converter = new  \n         MappingJackson2MessageConverter(); \n         converter.setTargetType(MessageType.BYTES); \n         converter.setTypeIdPropertyName(\"_type\"); \n         return converter; \n   } \n}  \n```"]