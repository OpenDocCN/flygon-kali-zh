["```py\n    print(\"Decimal 6\", np.testing.assert_almost_equal(0.123456789, 0.123456780, decimal=7))\n    ```", "```py\n    Decimal 6 None\n\n    ```", "```py\n    print(\"Decimal 7\", np.testing.assert_almost_equal(0.123456789, 0.123456780, decimal=8))\n    ```", "```py\n    Decimal 7\n    Traceback (most recent call last):\n     \u2026\n     raise AssertionError(msg)\n    AssertionError:\n    Arrays are not almost equal\n     ACTUAL: 0.123456789\n     DESIRED: 0.12345678\n\n    ```", "```py\nabs(actual - expected) >= 10**-(significant - 1)\n```", "```py\n    print(\"Significance 8\", np.testing.assert_approx_equal (0.123456789, 0.123456780,significant=8))\n    ```", "```py\n    Significance 8 None\n\n    ```", "```py\n    print(\"Significance 9\", np.testing.assert_approx_equal (0.123456789, 0.123456780, significant=9))\n    ```", "```py\n    Significance 9\n    Traceback (most recent call last):\n     ...\n     raise AssertionError(msg)\n    AssertionError:\n    Items are not equal to 9 significant digits:\n     ACTUAL: 0.123456789\n     DESIRED: 0.12345678\n\n    ```", "```py\n|expected - actual| < 0.5 10-decimal\n```", "```py\n    print(\"Decimal 8\", np.testing.assert_array_almost_equal([0, 0.123456789], [0, 0.123456780], decimal=8))\n    ```", "```py\n    Decimal 8 None\n\n    ```", "```py\n    print(\"Decimal 9\", np.testing.assert_array_almost_equal([0, 0.123456789], [0, 0.123456780], decimal=9))\n    ```", "```py\n    Decimal 9\n    Traceback (most recent call last):\n     \u2026\n     assert_array_compare\n     raise AssertionError(msg)\n    AssertionError:\n    Arrays are not almost equal\n\n    (mismatch 50.0%)\n     x: array([ 0\\.        ,  0.12345679])\n     y: array([ 0\\.        ,  0.12345678])\n\n    ```", "```py\n|a - b| <= (atol + rtol * |b|)\n```", "```py\n    print(\"Pass\", np.testing.assert_allclose([0, 0.123456789, np.nan], [0, 0.123456780, np.nan], rtol=1e-7, atol=0))\n    ```", "```py\n    Pass None\n\n    ```", "```py\n    print(\"Fail\", np.testing.assert_array_equal([0, 0.123456789, np.nan], [0, 0.123456780, np.nan]))\n    ```", "```py\n    Fail\n    Traceback (most recent call last):\n     \u2026\n    assert_array_compare\n     raise AssertionError(msg)\n    AssertionError:\n    Arrays are not equal\n\n    (mismatch 50.0%)\n     x: array([ 0\\.        ,  0.12345679,         nan])\n     y: array([ 0\\.        ,  0.12345678,         nan])\n\n    ```", "```py\n    print(\"Pass\", np.testing.assert_array_less([0, 0.123456789, np.nan], [1, 0.23456780, np.nan]))\n    ```", "```py\n    Pass None\n\n    ```", "```py\n    print(\"Fail\", np.testing.assert_array_less([0, 0.123456789, np.nan], [0, 0.123456780, np.nan]))\n    ```", "```py\n    Fail\n    Traceback (most recent call last):\n     ...\n     raise AssertionError(msg)\n    AssertionError:\n    Arrays are not less-ordered\n\n    (mismatch 100.0%)\n     x: array([ 0\\.        ,  0.12345679,         nan])\n     y: array([ 0\\.        ,  0.12345678,         nan])\n\n    ```", "```py\nprint(\"Equal?\", np.testing.assert_equal((1, 2), (1, 3)))\n```", "```py\nEqual?\nTraceback (most recent call last):\n ...\n raise AssertionError(msg)\nAssertionError:\nItems are not equal:\nitem=1\n\n ACTUAL: 2\n DESIRED: 3\n\n```", "```py\n    print(\"Pass\", np.testing.assert_string_equal(\"NumPy\", \"NumPy\"))\n    ```", "```py\n    Pass None\n\n    ```", "```py\n    print(\"Fail\", np.testing.assert_string_equal(\"NumPy\", \"Numpy\"))\n    ```", "```py\n    Fail\n    Traceback (most recent call last):\n     \u2026\n     raise AssertionError(msg)\n    AssertionError: Differences in strings:\n    - NumPy?    ^\n    + Numpy?    ^\n\n    ```", "```py\n    eps = np.finfo(float).eps\n    print(\"EPS\", eps)\n    ```", "```py\n    EPS 2.22044604925e-16\n\n    ```", "```py\n    print(\"1\", np.testing.assert_array_almost_equal_nulp(1.0, 1.0 + eps))\n    print(\"2\", np.testing.assert_array_almost_equal_nulp(1.0, 1.0 + 2 * eps))\n    ```", "```py\n    1 None\n    2\n    Traceback (most recent call last):\n     \u2026\n     assert_array_almost_equal_nulp\n     raise AssertionError(msg)\n    AssertionError: X and Y are not equal to 1 ULP (max is 2)\n\n    ```", "```py\n    eps = np.finfo(float).eps\n    print(\"EPS\", eps)\n    ```", "```py\n    EPS 2.22044604925e-16\n\n    ```", "```py\n    print(\"1\", np.testing.assert_array_max_ulp(1.0, 1.0 + eps))\n    print(\"2\", np.testing.assert_array_max_ulp(1.0, 1 + 2 * eps, maxulp=2))\n    ```", "```py\n    1 1.0\n    2 2.0\n\n    ```", "```py\n    import numpy as np\n    import unittest\n\n    def factorial(n):\n       if n == 0:\n          return 1\n\n       if n < 0:\n          raise ValueError, \"Unexpected negative value\"\n\n       return np.arange(1, n+1).cumprod()\n    ```", "```py\n        class FactorialTest(unittest.TestCase):\n           def test_factorial(self):\n              #Test for the factorial of 3 that should pass.\n              self.assertEqual(6, factorial(3)[-1])\n              np.testing.assert_equal(np.array([1, 2, 6]), factorial(3))\n\n           def test_zero(self):\n              #Test for the factorial of 0 that should pass.\n              self.assertEqual(1, factorial(0))\n\n           def test_negative(self):\n              #Test for the factorial of negative numbers that should fail.\n              # It should throw a ValueError, but we expect IndexError\n              self.assertRaises(IndexError, factorial(-10))\n        ```", "```py\n        $ python unit_test.py\n        .E.\n        ======================================================================\n        ERROR: test_negative (__main__.FactorialTest)\n        ----------------------------------------------------------------------\n        Traceback (most recent call last):\n         File \"unit_test.py\", line 26, in test_negative\n         self.assertRaises(IndexError, factorial(-10))\n         File \"unit_test.py\", line 9, in factorial\n         raise ValueError, \"Unexpected negative value\"\n        ValueError: Unexpected negative value\n\n        ----------------------------------------------------------------------\n        Ran 3 tests in 0.003s\n\n        FAILED (errors=1)\n\n        ```", "```py\nimport numpy as np\nimport unittest\n\ndef factorial(n):\n   if n == 0:\n      return 1\n\n   if n < 0:\n      raise ValueError, \"Unexpected negative value\"\n\n   return np.arange(1, n+1).cumprod()\n\nclass FactorialTest(unittest.TestCase):\n   def test_factorial(self):\n      #Test for the factorial of 3 that should pass.\n      self.assertEqual(6, factorial(3)[-1])\n      np.testing.assert_equal(np.array([1, 2, 6]), factorial(3))\n\n   def test_zero(self):\n      #Test for the factorial of 0 that should pass.\n      self.assertEqual(1, factorial(0))\n\n   def test_negative(self):\n      #Test for the factorial of negative numbers that should fail.\n      # It should throw a ValueError, but we expect IndexError\n      self.assertRaises(IndexError, factorial(-10))\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n    $ [sudo] easy_install nose\n\n    ```", "```py\n    $ [sudo] pip install nose\n\n    ```", "```py\n    @setastest(False)\n    def test_false():\n       pass\n\n    @setastest(True)\n    def test_true():\n       pass\n    ```", "```py\n    @skipif(True)\n    def test_skip():\n       pass\n    ```", "```py\n    @knownfailureif(True)\n    def test_alwaysfail():\n         pass\n    ```", "```py\n    class TestClass():\n       def test_true2(self):\n          pass\n\n    class TestClass2():\n       def test_false2(self):\n          pass\n    ```", "```py\n    decorate_methods(TestClass2, setastest(False), 'test_false2')\n    ```", "```py\n    $ nosetests -v decorator_setastest.py\n    decorator_setastest.TestClass.test_true2 ... ok\n    decorator_setastest.test_true ... ok\n    decorator_test.test_skip ... SKIP: Skipping test: test_skipTest skipped due to test condition\n    decorator_test.test_alwaysfail ... ERROR\n\n    ======================================================================\n    ERROR: decorator_test.test_alwaysfail\n    ----------------------------------------------------------------------\n    Traceback (most recent call last):\n     File \"\u2026/nose/case.py\", line 197, in runTest\n     self.test(*self.arg)\n     File \u2026/numpy/testing/decorators.py\", line 213, in knownfailer\n     raise KnownFailureTest(msg)\n    KnownFailureTest: Test skipped due to known failure\n\n    ----------------------------------------------------------------------\n    Ran 4 tests in 0.001s\n\n    FAILED (SKIP=1, errors=1)\n\n    ```", "```py\nfrom numpy.testing.decorators import setastest\nfrom numpy.testing.decorators import skipif\nfrom numpy.testing.decorators import knownfailureif\nfrom numpy.testing import decorate_methods\n\n@setastest(False)\ndef test_false():\n   pass\n\n@setastest(True)\ndef test_true():\n   pass\n\n@skipif(True)\ndef test_skip():\n   pass\n\n@knownfailureif(True)\ndef test_alwaysfail():\n     pass\n\nclass TestClass():\n   def test_true2(self):\n      pass\n\nclass TestClass2():\n   def test_false2(self):\n      pass\n\ndecorate_methods(TestClass2, setastest(False), 'test_false2')\n```", "```py\n    \"\"\"\n    Test for the factorial of 3 that should pass.\n    >>> factorial(3)\n    6\n    Test for the factorial of 0 that should fail.\n    >>> factorial(0)\n    1\n    \"\"\"\n\n    ```", "```py\n    return np.arange(1, n+1).cumprod()[-1]\n    ```", "```py\n    >>> from numpy.testing import rundocs\n    >>> rundocs('docstringtest.py')\n    Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"\u2026/numpy/testing/utils.py\", line 998, in rundocs\n     raise AssertionError(\"Some doctests failed:\\n%s\" % \"\\n\".join(msg))\n    AssertionError: Some doctests failed:\n    **********************************************************************\n    File \"docstringtest.py\", line 10, in docstringtest.factorial\n    Failed example:\n     factorial(0)\n    Exception raised:\n     Traceback (most recent call last):\n     File \"\u2026/doctest.py\", line 1254, in __run\n     compileflags, 1) in test.globs\n     File \"<doctest docstringtest.factorial[1]>\", line 1, in <module>\n     factorial(0)\n     File \"docstringtest.py\", line 13, in factorial\n     return np.arange(1, n+1).cumprod()[-1]\n     IndexError: index -1 is out of bounds for axis 0 with size 0\n\n    ```", "```py\nimport numpy as np\n\ndef factorial(n):\n   \"\"\"\n   Test for the factorial of 3 that should pass.\n   >>> factorial(3)\n   6\n\n   Test for the factorial of 0 that should fail.\n   >>> factorial(0)\n   1\n   \"\"\"\n   return np.arange(1, n+1).cumprod()[-1]\n```"]