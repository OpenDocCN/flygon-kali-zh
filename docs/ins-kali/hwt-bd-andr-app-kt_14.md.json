["```kt\nimplementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'\n```", "```kt\nclass MovieViewModel : ViewModel() {\n\u00a0\u00a0\u00a0\u00a0private val movies: MutableLiveData<List<Movie>>\n\u00a0\u00a0\u00a0\u00a0fun getMovies(): LiveData<List<Movie>> { ... }\n\u00a0\u00a0\u00a0\u00a0...\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\u00a0\u00a0\u00a0\u00a0private val movieViewModel by lazy {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ViewModelProvider(this).get(MovieViewModel::class.java)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0...\n}\n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0movieViewModel.getMovies().observe(this, Observer { popularMovies ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0movieAdapter.addMovies(popularMovies)\n\u00a0\u00a0\u00a0\u00a0})\n\u00a0\u00a0\u00a0\u00a0...\n}\n```", "```kt\nbuildFeatures {\n\u00a0\u00a0\u00a0\u00a0dataBinding true\n}\n```", "```kt\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\u00a0\u00a0\u00a0\u00a0<data>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<variable name=\"movie\" type=\"com.example.model.Movie\"/>\n\u00a0\u00a0\u00a0\u00a0</data>\n\u00a0\u00a0\u00a0\u00a0<ConstraintLayout ... />\n</layout>\n```", "```kt\n<TextView\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0android:text=\"@{movie.title}\"/>\n```", "```kt\nval binding: ActivityMoviesBinding = DataBindingUtil.setContentView(this,   R.layout.activity_movies)\n```", "```kt\nval binding: ActivityMoviesBinding =   ActivityMoviesBinding.inflate(getLayoutInflater())\n```", "```kt\nval movieToDisplay = ...\nbinding.movie = movieToDisplay\n```", "```kt\nbinding.lifeCycleOwner = this\n```", "```kt\n@BindingAdapter(\"list\")\nfun bindMovies(view: RecyclerView, movies: List<Movie>?) {\n\u00a0\u00a0\u00a0\u00a0val adapter = view.adapter as MovieAdapter\n\u00a0\u00a0\u00a0\u00a0adapter.addMovies(movies ?: emptyList())\n}\n```", "```kt\napp:list=\"@{movies}\"\n```", "```kt\n    buildFeatures {\n    \u00a0\u00a0\u00a0\u00a0dataBinding true\n    }\n    ```", "```kt\n    plugins {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0id 'kotlin-kapt'\n    }\n    ```", "```kt\n    @BindingAdapter(\"list\")\n    fun bindMovies(view: RecyclerView, movies: List<Movie>?) {\n    \u00a0\u00a0\u00a0\u00a0val adapter = view.adapter as MovieAdapter\n    \u00a0\u00a0\u00a0\u00a0adapter.addMovies(movies ?: emptyList())\n    }\n    ```", "```kt\n    <layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \u00a0\u00a0\u00a0\u00a0xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    \u00a0\u00a0\u00a0\u00a0xmlns:tools=\"http://schemas.android.com/tools\">\n    \u00a0\u00a0\u00a0\u00a0<androidx.constraintlayout.widget.ConstraintLayout\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... >\n    \u00a0\u00a0\u00a0\u00a0</androidx.constraintlayout.widget.ConstraintLayout>\n    </layout>\n    ```", "```kt\n    <data>\n    \u00a0\u00a0\u00a0\u00a0<variable\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name=\"viewModel\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"com.example.popularmovies.MovieViewModel\" />\n    </data>\n    ```", "```kt\n    app:list=\"@{viewModel.popularMovies}\"\n    ```", "```kt\n    val binding: ActivityMainBinding =   DataBindingUtil.setContentView(this, R.layout.activity_main)\n    ```", "```kt\n    binding.viewModel = movieViewModel\n    binding.lifecycleOwner = this\n    ```", "```kt\nimplementation 'com.squareup.retrofit2:retrofit:2.9.0'\n```", "```kt\nimplementation 'com.squareup.retrofit2:converter-moshi:2.9.0'\n```", "```kt\nRetrofit.Builder()\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0.addConverterFactory(MoshiConverterFactory.create())\n\u00a0\u00a0\u00a0\u00a0...\n```", "```kt\nclass MovieViewModel(val repository: MovieRepository): ViewModel() {\n... \n}\n```", "```kt\ninterface MovieRepository { \n\u00a0\u00a0\u00a0\u00a0fun getMovies(): List<Movie>\n}\n```", "```kt\nimplementation 'androidx.room:room-runtime:2.2.5'\nimplementation 'androidx.room:room-ktx:2.2.5'\nkapt 'androidx.room:room-compiler:2.2.5'\n```", "```kt\n    implementation 'androidx.room:room-runtime:2.2.5'\n    implementation 'androidx.room:room-ktx:2.2.5'\n    kapt 'androidx.room:room-compiler:2.2.5'\n    ```", "```kt\n    @Entity(tableName = \"movies\",\u00a0\u00a0primaryKeys = [(\"id\")])\n    data class Movie( ... )\n    ```", "```kt\n    @Dao\n    interface MovieDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun addMovies(movies: List<Movie>)\n    @Query(\"SELECT * FROM movies\")\n    fun getMovies(): List<Movie>\n    }\n    ```", "```kt\n    @Database(entities = [Movie::class], version = 1)\n    abstract class MovieDatabase : RoomDatabase() {\n    \u00a0\u00a0\u00a0\u00a0abstract fun movieDao(): MovieDao\n    \u00a0\u00a0\u00a0\u00a0companion object {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@Volatile\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private var instance: MovieDatabase? = null\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fun getInstance(context: Context): MovieDatabase {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return instance ?: synchronized(this) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0instance ?: buildDatabase(context).also {                   instance = it                     }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private fun buildDatabase(context: Context): MovieDatabase {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Room.databaseBuilder(context,               MovieDatabase::class.java, \"movie-db\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    class MovieRepository(private val movieService: MovieService,   private val movieDatabase: MovieDatabase) { ... }\n    ```", "```kt\n    suspend fun fetchMovies() {\n    \u00a0\u00a0\u00a0\u00a0val movieDao: MovieDao = movieDatabase.movieDao()\n    \u00a0\u00a0\u00a0\u00a0var moviesFetched = movieDao.getMovies()\n    \u00a0\u00a0\u00a0\u00a0if (moviesFetched.isEmpty()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val popularMovies = movieService.getPopularMovies(apiKey)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0moviesFetched = popularMovies.results\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0movieDao.addMovies(moviesFetched)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (exception: Exception) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0errorLiveData.postValue(\"An error occurred:               ${exception.message}\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0movieLiveData.postValue(moviesFetched)\n    }\n    ```", "```kt\n    val movieDatabase = MovieDatabase.getInstance(applicationContext)\n    movieRepository = MovieRepository(movieService, movieDatabase)\n    ```", "```kt\nimplementation 'androidx.work:work-runtime:2.4.0'\n```", "```kt\n    implementation 'androidx.work:work-runtime:2.4.0'\n    ```", "```kt\n    suspend fun fetchMoviesFromNetwork() {\n    \u00a0\u00a0\u00a0\u00a0val movieDao: MovieDao = movieDatabase.movieDao()\n    \u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val popularMovies = movieService.getPopularMovies(apiKey)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val moviesFetched = popularMovies.results\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0movieDao.addMovies(moviesFetched)\n    \u00a0\u00a0\u00a0\u00a0} catch (exception: Exception) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0errorLiveData.postValue(\"An error occurred:           ${exception.message}\")\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    class MovieWorker(private val context: Context,   params: WorkerParameters) : Worker(context, params) {\n    \u00a0\u00a0\u00a0\u00a0override fun doWork(): Result {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val movieRepository =           (context as MovieApplication).movieRepository\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CoroutineScope(Dispatchers.IO).launch {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0movieRepository.fetchMoviesFromNetwork()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Result.success()\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    override fun onCreate() {\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0val constraints =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Constraints.Builder().setRequiredNetworkType(          NetworkType.CONNECTED).build()\n    \u00a0\u00a0\u00a0\u00a0val workRequest = PeriodicWorkRequest\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Builder(MovieWorker::class.java, 1, TimeUnit.HOURS)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setConstraints(constraints)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.addTag(\"movie-work\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n    \u00a0\u00a0\u00a0\u00a0WorkManager.getInstance(applicationContext).enqueue(workRequest)\n    }\n    ```"]