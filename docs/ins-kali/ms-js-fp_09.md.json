["```js\nconst search = (arr, key) => {\n if (arr.length === 0) {\n return false;\n } else if (arr[0] === key) {\n return true;\n } else {\n return search(arr.slice(1), key);\n }\n};\n```", "```js\nconst search2 = (arr, key) =>\n arr.length === 0\n ? false\n : arr[0] === key || search2(arr.slice(1), key);\n```", "```js\nconst search3 = (arr, key) =>\n arr.length && (arr[0] === key || search3(arr.slice(1), key));\n```", "```js\nconst powerN = (base, power) => {\n if (power === 0) {\n return 1;\n } else if (power % 2) { // *odd power?*\n return base * powerN(base, power - 1);\n } else { // *even power?*\n return powerN(base * base, power / 2);\n }\n};\n```", "```js\nconst hanoi = (disks, from, to, extra) => {\n if (disks === 1) {\n console.log(`Move disk 1 from post ${from} to post ${to}`);\n } else {\n        hanoi(disks - 1, from, extra, to);\n console.log(`Move disk ${disks} from post ${from} to post ${to}`);\n        hanoi(disks - 1, extra, to, from);\n }\n};\n```", "```js\nhanoi (4, \"A\", \"B\", \"C\"); // we want to move all disks from A to B\nMove disk 1 from post A to post C\nMove disk 2 from post A to post B\nMove disk 1 from post C to post B\nMove disk 3 from post A to post C\nMove disk 1 from post B to post A\nMove disk 2 from post B to post C\nMove disk 1 from post A to post C\nMove disk 4 from post A to post B\nMove disk 1 from post C to post B\nMove disk 2 from post C to post A\nMove disk 1 from post B to post A\nMove disk 3 from post C to post B\nMove disk 1 from post A to post C\nMove disk 2 from post A to post B\nMove disk 1 from post C to post B \n```", "```js\nconst hanoi2 = (disks, from, to, extra) => {\n if (disks > 0) {\n hanoi(disks - 1, from, extra, to);\n console.log(`Move disk ${disks} from post ${from} to post ${to}`);\n hanoi(disks - 1, extra, to, from);\n }\n};\n```", "```js\nconst quicksort = arr => {\n if (arr.length < 2) {\n return arr;\n } else {\n const pivot = arr[0];\n const smaller = arr.slice(1).filter(x => x < pivot);\n const greaterEqual = arr.slice(1).filter(x => x >= pivot);\n return [...quicksort(smaller), pivot, ...quicksort(greaterEqual)];\n }\n};\n\nconsole.log(quicksort([22, 9, 60, 12, 4, 56]));\n// *[4, 9, 12, 22, 56, 60]*\n```", "```js\nconst makeChange = (n, bills) => {\n if (n < 0) {\n return 0; // no way of paying negative amounts\n\n } else if (n == 0) {\n return 1; // one single way of paying $0: with no bills\n\n } else if (bills.length == 0) {\n // here, n>0\n return 0; // no bills? no way of paying\n\n } else {\n return (\n makeChange(n, bills.slice(1)) + makeChange(n - bills[0], bills)\n );\n }\n};\n\nconsole.log(makeChange(64, [100, 50, 20, 10, 5, 2, 1]));\n// *969 ways of paying $64*\n```", "```js\nconst memoize3 = fn => {\n let cache = {};\n return (...args) => {\n let strX = JSON.stringify(args);\n return strX in cache ? cache[strX] : (cache[strX] = fn(...args));\n };\n};\n\nconst makeChange = memoize3((n, bills) => {\n // ...*same as above*\n});\n```", "```js\nconst mapR = (arr, cb) =>\n    arr.length === 0 ? [] : [cb(arr[0])].concat(mapR(arr.slice(1), cb));\n```", "```js\nlet aaa = [ 1, 2, 4, 5, 7];\nconst timesTen = x => x * 10;\n\nconsole.log(aaa.map(timesTen));   // *[**10, 20, 40, 50, 70**]*\nconsole.log(mapR(aaa, timesTen)); // *[**10, 20, 40, 50, 70**]*\n```", "```js\nconst timesTenPlusI = (v, i) => 10 * v + i;\n\nconsole.log(aaa.map(timesTenPlusI));    // *[10, 21, 42, 53, 74]*\nconsole.log(mapR2(aaa, timesTenPlusI)); // *[**NaN, NaN, NaN, NaN, NaN**]*\n```", "```js\nconst mapR2 = (arr, cb, i = 0, orig = arr) =>\n arr.length == 0\n ? []\n : [cb(arr[0], i, orig)].concat(\n mapR2(arr.slice(1), cb, i + 1, orig)\n );\n\nlet aaa = [1, 2, 4, 5, 7];\nconst senseless = (x, i, a) => x * 10 + i + a[i] / 10;\nconsole.log(aaa.map(senseless));    // *[**10.1, 21.2, 42.4, 53.5, 74.7**]*\nconsole.log(mapR2(aaa, senseless)); // *[**10.1, 21.2, 42.4, 53.5, 74.7**]*\n```", "```js\nconst mapR3 = (orig, cb) => {\n const mapLoop = (arr, i) =>\n arr.length == 0\n ? []\n : [cb(arr[0], i, orig)].concat(\n mapR3(arr.slice(1), cb, i + 1, orig)\n );\n\n return mapLoop(orig, 0);\n};\n```", "```js\n[1, 2, , , 5].map(tenTimes)\n// [10, 20, undefined \u00d7 2, 50]\n```", "```js\nconst mapR4 = (orig, cb) => {\n const mapLoop = (arr, i) => {\n if (arr.length == 0) {\n return [];\n } else {\n const mapRest = mapR4(arr.slice(1), cb, i + 1, orig);\n if (!(0 in arr)) {\n return [,].concat(mapRest);\n } else {\n return [cb(arr[0], i, orig)].concat(mapRest);\n }\n }\n };\n return mapLoop(orig, 0);\n};\n\nconsole.log(mapR4(aaa, timesTen)); // *[**10, 20, undefined \u00d7 2, 50**]*\n```", "```js\nconst filterR = (orig, cb) => {\n const filterLoop = (arr, i) => {\n if (arr.length == 0) {\n return [];\n } else {\n const filterRest = filterR(arr.slice(1), cb, i + 1, orig);\n if (!(0 in arr)) {\n return filterRest;\n } else if (cb(arr[0], i, orig)) {\n return [arr[0]].concat(filterRest);\n } else {\n return filterRest;\n }\n }\n };\n return filterLoop(orig, 0);\n};\n\nlet aaa = [1, 12, , , 5, 22, 9, 60];\nconst isOdd = x => x % 2;\nconsole.log(aaa.filter(isOdd));   // *[1, 5, 9]*\nconsole.log(filterR(aaa, isOdd)); // *[1, 5, 9]*\n```", "```js\nconst reduceR = (orig, cb, accum) => {\n const reduceLoop = (arr, i) => {\n return arr.length == 0\n ? accum\n : reduceR(\n arr.slice(1),\n cb,\n !(0 in arr) ? accum : cb(accum, arr[0], i, orig),\n i + 1,\n orig\n );\n };\n return reduceLoop(orig, 0);\n};\n\nlet bbb = [1, 2, , 5, 7, 8, 10, 21, 40];\nconsole.log(bbb.reduce((x, y) => x + y, 0));   // 94\nconsole.log(reduce2(bbb, (x, y) => x + y, 0)); // 94\n```", "```js\nconst findR = (arr, cb) => {\n if (arr.length === 0) {\n return undefined;\n } else {\n return cb(arr[0]) ? arr[0] : findR(arr.slice(1), cb);\n }\n};\n```", "```js\nconst findR2 = (arr, cb) =>\n arr.length === 0\n ? undefined\n : cb(arr[0]) ? arr[0] : findR(arr.slice(1), cb);\n```", "```js\nlet aaa = [1, 12, , , 5, 22, 9, 60];\nconst isTwentySomething = x => 20 <= x && x <= 29;\nconsole.log(findR(aaa, isTwentySomething)); // 22\nconst isThirtySomething = x => 30 <= x && x <= 39;\nconsole.log(findR(aaa, isThirtySomething)); // undefined\n```", "```js\nconst pipelineR = (first, ...rest) =>\n rest.length == 0\n ? first\n : (...args) => pipelineR(...rest)(first(...args));\n```", "```js\nconst plus1 = x => x + 1;\nconst by10 = x => x * 10;\n\npipelineR(\n by10,\n plus1,\n plus1,\n plus1,\n by10,\n plus1,\n by10,\n by10,\n plus1,\n plus1,\n plus1\n)(2);\n// 23103\n```", "```js\nconst SIZE = 8;\nlet places = Array(SIZE);\nlet solutions = 0;\n\nfinder();\nconsole.log(`Solutions found: ${solutions}`);\n```", "```js\nconst checkPlace = (column, row) =>\n places\n .slice(0, column)\n .every((v, i) => v !== row && Math.abs(v - row) !== column - i);\n```", "```js\n const checkPlace2 = (column, row) => {\n const checkColumn = i => {\n if (i == column) {\n return true;\n } else if (\n places[i] == row ||\n Math.abs(places[i] - row) == column - i\n ) {\n return false;\n } else {\n return checkColumn(i + 1);\n }\n };\n return checkColumn(0);\n };\n```", "```js\nconst finder = (column = 0) => {\n if (column === SIZE) {\n // *all columns tried out?*\n console.log(places.map(x => x + 1)); // *print out solution*\n solutions++; // *count it*\n\n } else {\n const testRowsInColumn = j => {\n if (j < SIZE) {\n if (checkPlace(column, j)) {\n places[column] = j;\n                    finder(column + 1);\n }\n testRowsInColumn(j + 1);\n }\n };\n testRowsInColumn(0);\n }\n};\n```", "```js\n[1, 5, 8, 6, 3, 7, 2, 4]\n[1, 6, 8, 3, 7, 4, 2, 5]\n[1, 7, 4, 6, 8, 2, 5, 3]\n[1, 7, 5, 8, 2, 4, 6, 3]\n*...*\n*... 84 lines snipped out ...*\n*...*\n[8, 2, 4, 1, 7, 5, 3, 6]\n[8, 2, 5, 3, 1, 7, 4, 6]\n[8, 3, 1, 6, 2, 5, 7, 4]\n[8, 4, 1, 3, 6, 2, 7, 5]\nSolutions found: 92\n```", "```js\nconst fs = require(\"fs\");\n\nconst recursiveDir = path => {\n console.log(path);\n fs.readdirSync(path).forEach(entry => {\n if (entry.startsWith(\".\")) {\n // skip it!\n\n } else {\n const full = path + \"/\" + entry;\n const stats = fs.lstatSync(full);\n if (stats.isSymbolicLink()) {\n console.log(\"L \", full); // symlink, don't follow\n\n } else if (stats.isDirectory()) {\n console.log(\"D \", full);\n                recursiveDir(full);\n\n } else {\n console.log(\" \", full);\n }\n }\n });\n};\n```", "```js\nrecursiveDir(\"/boot\"); /boot\n /boot/System.map-4.11.8-1-default\n   /boot/boot.readme\n   /boot/config-4.11.8-1-default\nD  /boot/efi\nD  /boot/efi/EFI\nD  /boot/efi/EFI/boot\n   /boot/efi/EFI/boot/bootx64.efi\n   /boot/efi/EFI/boot/fallback.efi\n   ...\n ... *many omitted lines*\n ...\nL  /boot/initrd\n   /boot/initrd-4.11.8-1-default\n   /boot/message\n   /boot/symtypes-4.11.8-1-default.gz\n   /boot/symvers-4.11.8-1-default.gz\n   /boot/sysctl.conf-4.11.8-1-default\n   /boot/vmlinux-4.11.8-1-default.gz\nL  /boot/vmlinuz\n   /boot/vmlinuz-4.11.8-1-default\n```", "```js\nconst traverseDom = (node, depth = 0) => {\n console.log(`${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`);\n for (let i = 0; i < node.children.length; i++) {\n        traverseDom(node.children[i], depth + 1);\n }\n};\n```", "```js\ntraverseDom(document.body);\n<body>\n| <script>\n| <div>\n| | <div>\n| | | <a>\n| | | <div>\n| | | | <ul>\n| | | | | <li>\n| | | | | | <a>\n| | | | | | | <div>\n| | | | | | | | <div>\n| | | | | | | <div>\n| | | | | | | | <br>\n| | | | | | | <div>\n| | | | | | <ul>\n| | | | | | | <li>\n| | | | | | | | <a>\n| | | | | | | <li>\n*...etc!*\n```", "```js\nconst traverseDom2 = (node, depth = 0) => {\n console.log(`${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`);\n    Array.from(node.children).forEach(child =>\n traverseDom2(child, depth + 1)\n );\n};\n```", "```js\n\"use strict\";\n\nfunction detectTCO() {\n const outerStackLen = new Error().stack.length;\n return (function inner() {\n const innerStackLen = new Error().stack.length;\n return innerStackLen <= outerStackLen;\n })();\n}\n```", "```js\nError\n at inner (<anonymous>:6:13)\n at detectTCO (<anonymous>:9:6)\n at <anonymous>:1:1\n```", "```js\nfunction justLoop(n) {\n n && justLoop(n - 1); // *until n is zero*\n}\n```", "```js\nfunction fact(n) {\n if (n === 0) {\n return 1;\n } else {\n return n * fact(n - 1);\n }\n}\n```", "```js\nfunction fact2(n) {\n if (n === 0) {\n return 1;\n } else {\n const aux = fact2(n - 1);\n return n * aux;\n }\n}\n```", "```js\nfunction getTime() {\n return new Date().toTimeString();\n}\n\nconsole.log(getTime()); // *\"21:00:24 GMT+0530 (IST)\"*\n```", "```js\nfunction getTime2(cont) {\n return cont(new Date().toTimeString());\n}\n\ngetTime2(console.log); // *similar result as above*\n```", "```js\nfunction fact2(n) {\n if (n === 0) {\n return 1;\n } else {\n const aux = fact2(n - 1);\n return n * aux;\n }\n}\n```", "```js\nfunction factC(n, cont) {\n if (n === 0) {\n return cont(1);\n } else {\n return factC(n - 1, x => cont(n * x));\n }\n}\n```", "```js\nfactC(7, x => x); // *5040, correctly*\n```", "```js\nconst fibC = (n, cont) => {\n if (n <= 1) {\n return cont(n);\n } else {\n return fibC(n - 2, p => fibC(n - 1, q => cont(p + q)));\n }\n};\n```", "```js\n<body>\n| <script>\n| <div>\n| | <div>\n| | | <a>\n| | | <div>\n| | | | <ul>\n| | | | | <li>\n| | | | | | <a>\n| | | | | | | <div>\n| | | | | | | | <div>\n| | | | | | | <div>\n| | | | | | | | <br>\n| | | | | | | <div>\n| | | | | | <ul>\n| | | | | | | <li>\n| | | | | | | | <a>\n| | | | | | | <li>\n*...etc!*\n```", "```js\nconst traverseDom2 = (node, depth = 0) => {\n console.log(`${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`);\n    Array.from(node.children).forEach(child =>\n traverseDom2(child, depth + 1)\n );\n};\n```", "```js\nvar traverseDom3 = (node, depth = 0) => {\n console.log(`${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`);\n\n const traverseChildren = (children, i = 0) => {\n if (i < children.length) {\n traverseDom3(children[i], depth + 1);\n return traverseChildren(children, i + 1); // loop\n }\n return;\n };\n\n return traverseChildren(Array.from(node.children));\n};\n```", "```js\nvar traverseDom3C = (node, depth = 0, cont = () => {}) => {\n console.log(`${\"| \".repeat(depth)}<${node.nodeName.toLowerCase()}>`);\n\n const traverseChildren = (children, i = 0) => {\n if (i < children.length) {\n return traverseDom3C(children[i], depth + 1, () =>\n traverseChildren(children, i + 1)\n );\n }\n return cont();\n };\n\n return traverseChildren(Array.from(node.children));\n};\n```", "```js\nconst getIsoDateAndTime = () => new Date().toISOString(); // a thunk\nconst isoDateAndTime = getIsoDateAndTime(); // getting the thunk's value\n```", "```js\nconst trampoline = (fn) => {\n    while (typeof fn === 'function') { fn = fn();\n    }\n    return fn;\n};\n```", "```js\nconst sumAll = n => (n == 0 ? 0 : n + sumAll(n - 1));\n\nsumAll(10); // 55\nsumAll(100); // 5050\nsumAll(1000); // 500500\nsumAll(10000); // ***Uncaught RangeError: Maximum call stack size exceeded***\n```", "```js\nconst sumAllC = (n, cont) =>\n n === 0 ? cont(0) : sumAllC(n - 1, v => cont(v + n));\n\nsumAllC(10000, console.log); // *crash as earlier*\n```", "```js\nconst sumAllT = (n, cont) =>\n n === 0 ? () => cont(0) : () => sumAllT(n - 1, v => () => cont(v + n));\n```", "```js\nconst sumAll2 = n => trampoline(sumAllT(n, x => x));\n```", "```js\nconst sumAll3 = n => {\n const sumAllT = (n, cont) =>\n n === 0\n ? () => cont(0)\n : () => sumAllT(n - 1, v => () => cont(v + n));\n\n return trampoline(sumAllT(n, x => x));\n};\n```", "```js\nfunction Thunk(fn) {\n this.fn = fn;\n}\n\nvar trampoline2 = thk => {\n while (typeof thk === \"object\" && thk.constructor.name === \"Thunk\") {\n thk = thk.fn();\n }\n return thk;\n};\n```"]