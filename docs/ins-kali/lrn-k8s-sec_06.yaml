- en: '*Chapter 5*: Configuring Kubernetes Security Boundaries'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：配置Kubernetes安全边界
- en: A security boundary separates security domains where a set of entities share
    the same security concerns and access levels, whereas a trust boundary is a dividing
    line where program execution and data change the level of trust. Controls in the
    security boundary ensure that execution moving between boundaries does not elevate
    the trust level without appropriate validation. As data or execution moves between
    security boundaries without appropriate controls, security vulnerabilities show
    up.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全边界分隔了安全域，其中一组实体共享相同的安全关注和访问级别，而信任边界是程序执行和数据改变信任级别的分界线。安全边界中的控制确保在边界之间移动的执行不会在没有适当验证的情况下提升信任级别。如果数据或执行在没有适当控制的情况下在安全边界之间移动，安全漏洞就会出现。
- en: In this chapter, we'll discuss the importance of security and trust boundaries.
    We'll first focus on the introduction to clarify any confusion between security
    and trust boundaries. Then, we'll walk through the security domains and security
    boundaries within the Kubernetes ecosystem. Finally, we'll look at some Kubernetes
    features that enhance security boundaries for an application deployed in Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论安全和信任边界的重要性。我们将首先重点介绍介绍，以澄清安全和信任边界之间的任何混淆。然后，我们将深入了解Kubernetes生态系统中的安全域和安全边界。最后，我们将看一些增强Kubernetes中应用程序安全边界的功能。
- en: You should understand the concepts of security domain and security boundaries,
    and also understand the security boundaries built around Kubernetes based on the
    underlying container technology as well as the built-in security features, such
    as PodSecurityPolicy and NetworkPolicy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该了解安全域和安全边界的概念，并了解基于底层容器技术以及内置安全功能（如PodSecurityPolicy和NetworkPolicy）构建的Kubernetes周围的安全边界。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to security boundaries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全边界的介绍
- en: Security boundaries versus trust boundaries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全边界与信任边界
- en: Kubernetes security domains
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes安全域
- en: Kubernetes entities as security boundaries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes实体作为安全边界
- en: Security boundaries in the system layer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统层的安全边界
- en: Security boundaries in the network layer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络层的安全边界
- en: Introduction to security boundaries
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全边界的介绍
- en: Security boundaries exist in the data layer, the network layer, and the system
    layer. Security boundaries depend on the technologies used by the IT department
    or infrastructure team. For example, companies use virtual machines to manage
    their applications – a hypervisor is the security boundary for virtual machines.
    Hypervisors ensure that code running in a virtual machine does not escape from
    the virtual machine or affect the physical node. When companies start embracing
    microservices and use orchestrators to manage their applications, containers are
    one of the security boundaries. However, compared to hypervisors, containers do
    not provide a strong security boundary, nor do they aim to. Containers enforce
    restrictions at the application layer but do not prevent attackers from bypassing
    these restrictions from the kernel layer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安全边界存在于数据层、网络层和系统层。安全边界取决于IT部门或基础设施团队使用的技术。例如，公司使用虚拟机来管理他们的应用程序- hypervisor是虚拟机的安全边界。Hypervisor确保在虚拟机中运行的代码不会逃离虚拟机或影响物理节点。当公司开始采用微服务并使用编排器来管理他们的应用程序时，容器是安全边界之一。然而，与虚拟机监视器相比，容器并不提供强大的安全边界，也不打算提供。容器在应用程序层强制执行限制，但不能阻止攻击者从内核层绕过这些限制。
- en: At the network layer, traditionally, firewalls provide strong security boundaries
    for applications. In a microservices architecture, Pods in Kubernetes can communicate
    with others. Network policies are used to restrict communication among Pods and
    Services.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络层，传统上，防火墙为应用程序提供了强大的安全边界。在微服务架构中，Kubernetes中的Pod可以相互通信。网络策略用于限制Pod和服务之间的通信。
- en: Security boundaries at the data layer are well known. Kernels limiting write
    access to system or bin directories to only root or system users is a simple example
    of security boundaries at the data layer. In containerized environments, chroot
    prevents containers from tampering with the filesystems of other containers. Kubernetes
    restructures the application deployment in a way that strong security boundaries
    can be enforced on both the network and system layers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据层的安全边界是众所周知的。内核限制对系统或bin目录的写访问仅限于root用户或系统用户是数据层安全边界的一个简单例子。在容器化环境中，chroot防止容器篡改其他容器的文件系统。Kubernetes重新构建了应用程序部署的方式，可以在网络和系统层上强制执行强大的安全边界。
- en: Security boundaries versus trust boundaries
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全边界与信任边界
- en: Security boundary and trust boundary are often used as synonyms. Although similar,
    there is a subtle difference between these two terms. A **trust boundary** is
    where a system changes its level of trust. An execution trust boundary is where
    instructions need different privileges to run. For example, a database server
    executing code in `/bin` is an example of an execution crossing a trust boundary.
    Similarly, a data trust boundary is where data moves between entities with different
    trust levels. Data inserted by an end user into a trusted database is an example
    of data crossing a trust boundary.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安全边界和信任边界经常被用作同义词。虽然相似，但这两个术语之间有微妙的区别。**信任边界**是系统改变其信任级别的地方。执行信任边界是指指令需要不同的特权才能运行的地方。例如，数据库服务器在`/bin`中执行代码就是执行越过信任边界的一个例子。同样，数据信任边界是指数据在不同信任级别的实体之间移动的地方。用户插入到受信任数据库中的数据就是数据越过信任边界的一个例子。
- en: Whereas a **security boundary** is a point of demarcation between different
    security domains, a security domain is a set of entities that are within the same
    access level. For example, in traditional web architecture, the user-facing applications
    are part of a security domain and the internal network is part of a different
    security domain. Security boundaries have access controls associated with it.
    Think of trust boundary as a wall and security boundary as a fence around the
    wall.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 而**安全边界**是不同安全域之间的分界点，安全域是一组在相同访问级别内的实体。例如，在传统的Web架构中，面向用户的应用程序是安全域的一部分，而内部网络是不同安全域的一部分。安全边界有与之相关的访问控制。将信任边界看作墙，将安全边界看作围绕墙的栅栏。
- en: Identifying security and trust boundaries within an ecosystem is important.
    It helps ensure appropriate validation is done for instructions and data before
    it crosses the boundaries. In Kubernetes, components and objects span across different
    security boundaries. It is important to understand these boundaries to put risk
    mitigation plans in place when an attacker crosses a security boundary. CVE-2018-1002105
    is a prime example of an attack caused by missing validation across trust boundaries;
    proxy request handling in the API server allowed an unauthenticated user to get
    admin privileges to the cluster. Similarly, CVE-2018-18264 allows users to skip
    the authentication process on the dashboard to allow unauthenticated users to
    access sensitive cluster information.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在生态系统中识别安全和信任边界是很重要的。这有助于确保在指令和数据跨越边界之前进行适当的验证。在Kubernetes中，组件和对象跨越不同的安全边界。了解这些边界对于在攻击者跨越安全边界时制定风险缓解计划至关重要。CVE-2018-1002105是一个缺少跨信任边界验证而导致的攻击的典型例子；API服务器中的代理请求处理允许未经身份验证的用户获得对集群的管理员特权。同样，CVE-2018-18264允许用户跳过仪表板上的身份验证过程，以允许未经身份验证的用户访问敏感的集群信息。
- en: Now let's look at different Kubernetes security domains.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看不同的Kubernetes安全领域。
- en: Kubernetes security domains
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes安全领域
- en: 'A Kubernetes cluster can be broadly split into three security domains:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群可以大致分为三个安全领域：
- en: '**Kubernetes master components**: Kubernetes master components define the control
    plane for the Kubernetes ecosystem. The master components are responsible for
    decisions required for the smooth operation of the cluster, such as scheduling.
    Master components include `kube-apiserver`, `etcd`, the `kube-controller` manager,
    DNS server, and `kube-scheduler`. A breach in the Kubernetes master components
    can compromise the entire Kubernetes cluster.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes主组件**：Kubernetes主组件定义了Kubernetes生态系统的控制平面。主组件负责决策，以确保集群的顺利运行，如调度。主组件包括`kube-apiserver`、`etcd`、`kube-controller`管理器、DNS服务器和`kube-scheduler`。Kubernetes主组件的违规行为可能会危及整个Kubernetes集群。'
- en: '**Kubernetes worker components**: Kubernetes worker components are deployed
    on every worker node and ensure that Pods and containers are running nicely. Kubernetes
    worker components use authorization and TLS tunneling for communicating with the
    master components. A cluster can function with compromised worker components.
    It is analogous to a rogue node within the environment, which can be removed from
    the cluster when identified.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes工作组件**：Kubernetes工作组件部署在每个工作节点上，确保Pod和容器正常运行。Kubernetes工作组件使用授权和TLS隧道与主组件进行通信。即使工作组件受到损害，集群也可以正常运行。这类似于环境中的一个恶意节点，在识别后可以从集群中移除。'
- en: '**Kubernetes objects**: Kubernetes objects are persistent entities that represent
    the state of the cluster: deployed applications, volumes, and namespaces. Kubernetes
    objects include Pods, Services, volumes, and namespaces. These are deployed by
    developers or DevOps. Object specification defines additional security boundaries
    for objects: defining a Pod with a SecurityContext, network rules to communicate
    with other Pods, and more.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes对象**：Kubernetes对象是表示集群状态的持久实体：部署的应用程序、卷和命名空间。Kubernetes对象包括Pods、Services、卷和命名空间。这些是由开发人员或DevOps部署的。对象规范为对象定义了额外的安全边界：使用SecurityContext定义Pod、与其他Pod通信的网络规则等。'
- en: The high-level security domain division should help you focus on the key assets.
    Keeping that in mind, we'll start looking at Kubernetes entities and the security
    boundaries built around them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 高级安全领域划分应该帮助您专注于关键资产。记住这一点，我们将开始查看Kubernetes实体和围绕它们建立的安全边界。
- en: Kubernetes entities as security boundaries
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes实体作为安全边界
- en: 'In a Kubernetes cluster, the Kubernetes entities (objects and components) you
    interact with have their own built-in security boundaries. The security boundaries
    are derived from the design or implementation of the entities. It is important
    to understand the security boundaries built within or around them:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes集群中，您与之交互的Kubernetes实体（对象和组件）都有其自己内置的安全边界。这些安全边界源自实体的设计或实现。了解实体内部或周围构建的安全边界非常重要：
- en: '**Containers**: Containers are a basic component within a Kubernetes cluster.
    A container provides minimal isolation to the application using cgroups, Linux
    namespaces, AppArmor profiles, and a seccomp profile to the application running
    within the container.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：容器是Kubernetes集群中的基本组件。容器使用cgroups、Linux命名空间、AppArmor配置文件和seccomp配置文件为应用程序提供最小的隔离。'
- en: '**Pods**: A pod is a collection of one or more containers. Pods isolate more
    resources compared to containers, such as a network and IPC. Features such as
    security SecurityContext, NetworkPolicy, and PodSecurityPolicy work at the pod
    level to ensure a higher level of isolation.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pods**：Pod是一个或多个容器的集合。与容器相比，Pod隔离更多资源，例如网络和IPC。诸如SecurityContext、NetworkPolicy和PodSecurityPolicy之类的功能在Pod级别工作，以确保更高级别的隔离。'
- en: '**Nodes**: Nodes in Kubernetes are also a security boundary. Pods can be specified
    to run on specific nodes using `nodeSelectors`. Kernels and hypervisors enforce
    security controls for pods running on the nodes. Features such as AppArmor and
    SELinux can help improve the security posture along with other host-hardening
    mechanisms.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：Kubernetes中的节点也是安全边界。可以使用`nodeSelectors`指定Pod在特定节点上运行。内核和虚拟化程序强制执行运行在节点上的Pod的安全控制。诸如AppArmor和SELinux之类的功能可以帮助改善安全姿态，以及其他主机加固机制。'
- en: '**Cluster**: A cluster is a collection of pods, containers, and the components
    on the master node and worker nodes. A cluster provides a strong security boundary.
    Pods and containers running within a cluster are isolated from other clusters
    at the network and the system layer.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群**：集群是一组Pod、容器以及主节点和工作节点上的组件。集群提供了强大的安全边界。在集群内运行的Pod和容器在网络和系统层面上与其他集群隔离。'
- en: '**Namespaces**: Namespaces are virtual clusters that isolate pods and services.
    The LimitRanger admission controller is applied at the namespace level to control
    resource utilization and denial-of-service attacks. Network policies can be applied
    to the namespace level.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：命名空间是隔离Pod和服务的虚拟集群。LimitRanger准入控制器应用于命名空间级别，以控制资源利用和拒绝服务攻击。网络策略可以应用于命名空间级别。'
- en: '**The Kubernetes API server**: The Kubernetes API server interacts with all
    Kubernetes components, including `etcd`, `controller-manager`, and `kubelet`,
    which is used by cluster administrators to configure a cluster. It mediates communication
    with master components, so cluster administrators do not have to directly interact
    with cluster components.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes API服务器**：Kubernetes API服务器与所有Kubernetes组件交互，包括`etcd`、`controller-manager`和集群管理员用于配置集群的`kubelet`。它调解与主组件的通信，因此集群管理员无需直接与集群组件交互。'
- en: 'We discussed three different threat actors in [*Chapter 3*](B15566_03_Final_ASB_ePub.xhtml#_idTextAnchor091),
    *Threat Modeling*: privileged attackers, internal attackers, and end users. These
    threat actors may also interact with the preceding Kubernetes entities. We will
    see what the security boundaries from these entities an attacker is facing:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第3章*](B15566_03_Final_ASB_ePub.xhtml#_idTextAnchor091)中讨论了三种不同的威胁行为者，*威胁建模*：特权攻击者、内部攻击者和最终用户。这些威胁行为者也可能与前述的Kubernetes实体进行交互。我们将看到攻击者面对这些实体的安全边界：
- en: '**End user**: An end user interacts with either the ingress, exposed Kubernetes
    services, or directly to the open ports on the node. For the end user, nodes,
    Pods, `kube-apiserver`, and the external firewall protect the cluster components
    from being compromised.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最终用户**：最终用户与入口、暴露的Kubernetes服务或直接与节点上的开放端口进行交互。对于最终用户，节点、Pod、`kube-apiserver`和外部防火墙保护集群组件免受危害。'
- en: '**Internal attacker**: Internal attackers have access to Pods and containers.
    Namespaces and access control enforced by `kube-apiserver` prevent these attackers
    from escalating privileges or compromising the cluster. Network policy and RBAC
    controls can prevent lateral movement.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部攻击者**：内部攻击者可以访问Pod和容器。由`kube-apiserver`强制执行的命名空间和访问控制可以防止这些攻击者提升权限或者危害集群。网络策略和RBAC控制可以防止横向移动。'
- en: '**Privileged attacker**: `kube-apiserver` is the only security boundary that
    protects the master components from compromise by privileged attackers. If a privileged
    attacker compromises `kube-apiserver`, it''s game over.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特权攻击者**：`kube-apiserver`是唯一保护主控件组件免受特权攻击者危害的安全边界。如果特权攻击者危害了`kube-apiserver`，那就完了。'
- en: In this section, we looked at security boundaries from a user perspective and
    showed you how security boundaries are built in the Kubernetes ecosystem. Next,
    let's look at the security boundaries in the system layer, from a microservice
    perspective.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们从用户的角度看了安全边界，并向您展示了Kubernetes生态系统中如何构建安全边界。接下来，让我们从微服务的角度来看系统层的安全边界。
- en: Security boundaries in the system layer
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统层的安全边界
- en: Microservices run inside Pods, where Pods are scheduled to run on worker nodes
    in a cluster. In the previous chapters, we already emphasized that a container
    is a process assigned with dedicated Linux namespaces. A container or Pod consumes
    all the necessary resources provided from the worker node. So, it is important
    to understand the security boundaries from the system's perspective and how to
    fortify it. In this section, we will talk about the security boundaries built
    upon Linux namespaces and Linux capabilities together for microservices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务运行在Pod内，Pod被调度在集群中的工作节点上运行。在之前的章节中，我们已经强调容器是分配了专用Linux命名空间的进程。一个容器或Pod消耗了工作节点提供的所有必要资源。因此，了解系统层的安全边界以及如何加固它是很重要的。在本节中，我们将讨论基于Linux命名空间和Linux能力一起为微服务构建的安全边界。
- en: Linux namespaces as security boundaries
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux namespaces作为安全边界
- en: Linux namespaces are a feature of the Linux kernel to partition resources for
    isolation purposes. With namespaces assigned, a set of processes sees one set
    of resources while another set of processes sees another set of resources. We've
    already introduced Linux namespaces in [*Chapter 2*](B15566_02_Final_ASB_ePub.xhtml#_idTextAnchor049),
    *Kubernetes Networking*. By default, each Pod has its own network namespace and
    IPC namespace. Each container inside the same pod has its own PID namespace so
    that one container has no knowledge about other containers running inside the
    same Pod. Similarly, a Pod does not know other Pods exist in the same worker node.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Linux namespaces是Linux内核的一个特性，用于分隔资源以进行隔离。分配了命名空间后，一组进程看到一组资源，而另一组进程看到另一组资源。我们已经在[*第2章*](B15566_02_Final_ASB_ePub.xhtml#_idTextAnchor049)，*Kubernetes
    Networking*中介绍了Linux namespaces。默认情况下，每个Pod都有自己的网络命名空间和IPC命名空间。同一Pod中的每个容器都有自己的PID命名空间，因此一个容器不知道同一Pod中运行的其他容器。同样，一个Pod不知道同一工作节点中存在其他Pod。
- en: 'In general, the default settings offer pretty good isolation for microservices
    from a security standpoint. However, the host namespace settings are allowed to
    be configured in the Kubernetes workload, and more specifically, in the Pod specification.
    With such settings enabled, the microservice uses host-level namespaces:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，默认设置在安全方面为微服务提供了相当好的隔离。然而，允许在Kubernetes工作负载中配置主机命名空间设置，更具体地说，在Pod规范中。启用这样的设置后，微服务将使用主机级别的命名空间：
- en: '**HostNetwork**: The Pod uses the host''s network namespace.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HostNetwork**：Pod使用主机的网络命名空间。'
- en: '**HostIPC**: The Pod uses the host''s IPC namespace.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HostIPC**：Pod使用主机的IPC命名空间。'
- en: '**HostPID**: The Pod uses the host''s PID namespace.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HostPID**：Pod使用主机的PID命名空间。'
- en: '**shareProcessNamespace**: The containers inside the same Pod will share a
    single PID namespace.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**shareProcessNamespace**：同一Pod内的容器将共享一个PID命名空间。'
- en: 'When you try to configure your workload to use host namespaces, do ask yourself
    the question: why do you have to do this? When using host namespaces, pods have
    full knowledge of other pods'' activities in the same worker node, but it also
    depends on what Linux capabilities are assigned to the container. Overall, the
    fact is, you''re disarming other microservices'' security boundaries. Let me give
    a quick example. This is a list of processes visible inside a container:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试配置工作负载以使用主机命名空间时，请问自己一个问题：为什么您必须这样做？当使用主机命名空间时，Pod在同一工作节点中对其他Pod的活动有完全的了解，但这也取决于为容器分配了哪些Linux功能。总的来说，事实是，您正在削弱其他微服务的安全边界。让我举个快速的例子。这是容器内可见的进程列表：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, inside the `nginx` container, only `nginx` processes and `bash`
    process are visible from the container. This `nginx` pod doesn''t use a host PID
    namespace. Let''s a look at what happens if a pod uses host PID namespace:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在`nginx`容器内，只有`nginx`进程和`bash`进程从容器中可见。这个`nginx` Pod没有使用主机PID命名空间。让我们看看如果一个Pod使用主机PID命名空间会发生什么：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding output shows the processes running in the worker node from an
    `nginx` container. Among these processes are system processes, `sshd`, `kubelet`,
    `kube-proxy`, and so on. Besides from the Pod using the host PID namespace, you
    can send signals to other microservices' processes, such as `SIGKILL` to kill
    a process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示了在`nginx`容器中运行的进程。在这些进程中有系统进程，如`sshd`、`kubelet`、`kube-proxy`等等。除了Pod使用主机PID命名空间外，您还可以向其他微服务的进程发送信号，比如向一个进程发送`SIGKILL`来终止它。
- en: Linux capabilities as security boundaries
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux功能作为安全边界
- en: 'Linux capabilities are a concept evolved from the traditional Linux permission
    check: privileged and unprivileged. Privileged processes bypass all kernel permission
    checks. Then, Linux divides privileges associated with Linux superusers into distinct
    units – Linux capabilities. There are network-related capabilities, such as `CAP_NET_ADMIN`,
    `CAP_NET_BIND_SERVICE`, `CAP_NET_BROADCAST`, and `CAP_NET_RAW`. And there are
    audit-related capabilities: `CAP_AUDIT_CONTROL`, `CAP_AUDIT_READ`, and `CAP_AUDIT_WRITE`.
    Of course, there is still an admin-like capability: `CAP_SYS_ADMIN`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Linux功能是从传统的Linux权限检查演变而来的概念：特权和非特权。特权进程绕过所有内核权限检查。然后，Linux将与Linux超级用户关联的特权划分为不同的单元-
    Linux功能。有与网络相关的功能，比如`CAP_NET_ADMIN`、`CAP_NET_BIND_SERVICE`、`CAP_NET_BROADCAST`和`CAP_NET_RAW`。还有审计相关的功能：`CAP_AUDIT_CONTROL`、`CAP_AUDIT_READ`和`CAP_AUDIT_WRITE`。当然，还有类似管理员的功能：`CAP_SYS_ADMIN`。
- en: 'As mentioned in [*Chapter 4*](B15566_04_Final_ASB_ePub.xhtml#_idTextAnchor108),
    *Applying the Principle of Least Privilege in Kubernetes*, you can configure Linux
    capabilities for containers in a pod. By default, here is a list of capabilities
    that are assigned to containers in Kubernetes clusters:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第4章*](B15566_04_Final_ASB_ePub.xhtml#_idTextAnchor108)中所述，*在Kubernetes中应用最小特权原则*，您可以为Pod中的容器配置Linux功能。默认情况下，以下是分配给Kubernetes集群中容器的功能列表：
- en: '`CAP_SETPCAP`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SETPCAP`'
- en: '`CAP_MKNOD`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_MKNOD`'
- en: '`CAP_AUDIT_WRITE`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_AUDIT_WRITE`'
- en: '`CAP_CHOWN`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_CHOWN`'
- en: '`CAP_NET_RAW`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_NET_RAW`'
- en: '`CAP_DAC_OVERRIDE`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_DAC_OVERRIDE`'
- en: '`CAP_FOWNER`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_FOWNER`'
- en: '`CAP_FSETID`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_FSETID`'
- en: '`CAP_KILL`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_KILL`'
- en: '`CAP_SETGID`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SETGID`'
- en: '`CAP_SETUID`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SETUID`'
- en: '`CAP_NET_BIND_SERVICE`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_NET_BIND_SERVICE`'
- en: '`CAP_SYS_CHROOT`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SYS_CHROOT`'
- en: '`CAP_SETFCAP`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CAP_SETFCAP`'
- en: 'For most of the microservices, these capabilities should be good enough to
    perform their daily tasks. You should drop all the capabilities and only add the
    required ones. Similar to host namespaces, granting extra capabilities may disarm
    the security boundaries of other microservices. Here is an example output when
    you run the `tcpdump` command in a container:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数微服务来说，这些功能应该足以执行它们的日常任务。您应该放弃所有功能，只添加所需的功能。与主机命名空间类似，授予额外的功能可能会削弱其他微服务的安全边界。当您在容器中运行`tcpdump`命令时，以下是一个示例输出：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding output shows that inside a container, there is `tcpdump` listening
    on the network interface, `cali01fb9a4e4b4`, which was created for another pod's
    network communication. With a host network namespace and `CAP_NET_ADMIN` granted,
    you are able to sniff network traffic from the entire worker node inside a container.
    In general, the fewer capabilities granted to containers, the more secure the
    boundaries are for other microservices.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示，在容器内部，有`tcpdump`在网络接口`cali01fb9a4e4b4`上监听，该接口是为另一个Pod的网络通信创建的。通过授予主机网络命名空间和`CAP_NET_ADMIN`，您可以在容器内部从整个工作节点嗅探网络流量。一般来说，对容器授予的功能越少，对其他微服务的安全边界就越安全。
- en: Wrapping up security boundaries in the system layer
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在系统层包装安全边界
- en: The dedicated Linux namespaces and the limited Linux capabilities assigned to
    a container or a Pod by default establish good security boundaries for microservices.
    However, users are still allowed to configure host namespaces or add extra Linux
    capabilities to a workload. This will disarm the security boundaries of other
    microservices running on the same worker node. You should be very careful of doing
    so. Usually, monitoring tools or security tools require access to host namespaces
    in order to do their monitoring job or detection job. And it is highly recommended
    to use `PodSecurityPolicy` to restrict the usage of host namespaces as well as
    extra capabilities so that the security boundaries of microservices are fortified.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，为容器或Pod分配的专用Linux命名空间和有限的Linux功能为微服务建立了良好的安全边界。但是，用户仍然可以配置主机命名空间或为工作负载添加额外的Linux功能。这将削弱在同一工作节点上运行的其他微服务的安全边界。您应该非常小心地这样做。通常，监控工具或安全工具需要访问主机命名空间以执行其监控工作或检测工作。强烈建议使用`PodSecurityPolicy`来限制对主机命名空间以及额外功能的使用，以加强微服务的安全边界。
- en: Next, let's look at the security boundaries set up in the network layer, from
    a microservice's perspective.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从微服务的角度来看网络层设置的安全边界。
- en: Security boundaries in the network layer
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络层的安全边界
- en: A Kubernetes network policy defines the rules for different groups of Pods that
    are allowed to communicate with each other. In the previous chapter, we briefly
    talked about the egress rule of a Kubernetes network policy, which can be leveraged
    to enforce the principle of least privilege for microservices. In this section,
    we will go through a little more on the Kubernetes network policy and will focus
    on the ingress rule. We will show how the ingress rules of network policies can
    help to establish the trust boundaries among microservices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes网络策略定义了不同组的Pod之间允许通信的规则。在前一章中，我们简要讨论了Kubernetes网络策略的出口规则，可以利用它来强制执行微服务的最小特权原则。在本节中，我们将更详细地介绍Kubernetes网络策略，并重点关注入口规则。我们将展示网络策略的入口规则如何帮助建立微服务之间的信任边界。
- en: Network policies
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络策略
- en: 'As mentioned in the previous chapter, as per the network model requirement,
    Pods inside a cluster can communicate with each other. But still, from a security
    perspective, you may want to restrict your microservice to being accessed by only
    a few services. How can we achieve that in Kubernetes? Let''s take a quick look
    at the following Kubernetes network policy example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，根据网络模型的要求，集群内的Pod可以相互通信。但从安全角度来看，您可能希望将您的微服务限制为只能被少数服务访问。我们如何在Kubernetes中实现这一点呢？让我们快速看一下以下Kubernetes网络策略示例：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `NetworkPolicy` policy is named `test-network-policy`. A few key attributes
    from the network policy specification worth mentioning are listed here to help
    you understand what the restrictions are:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkPolicy`策略命名为`test-network-policy`。网络策略规范中值得一提的一些关键属性列在这里，以帮助您了解限制是什么：'
- en: '`podSelector`: A grouping of Pods to which the policy applies based on the
    Pod labels.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`podSelector`：基于Pod标签，应用策略的Pod的分组。'
- en: '`Ingress`: Ingress rules that apply to the Pods specified in the top-level
    `podSelector`. The different elements under `Ingress` are discussed as follows:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ingress`：适用于顶层`podSelector`中指定的Pod的入口规则。`Ingress`下的不同元素如下所述：'
- en: '- `ipBlock`: IP CIDR ranges that are allowed to communicate with ingress sources'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '- `ipBlock`：允许与入口源进行通信的IP CIDR范围'
- en: '- `namespaceSelector`: Namespaces that are allowed as ingress sources based
    on namespace labels'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '- `namespaceSelector`：基于命名空间标签，允许作为入口源的命名空间'
- en: '- `podSelector`: Pods that are allowed as ingress sources based on Pod labels'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '- `podSelector`：基于Pod标签，允许作为入口源的Pod'
- en: '- `ports`: Ports and protocols that all pods should be allowed to communicate
    with'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '- `ports`：所有Pod应允许通信的端口和协议'
- en: '`egress`: Egress rules that apply to the Pods specified in the top-level `podSelector`.
    The different elements under `Ingress` are discussed as follows:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出口规则：适用于顶层`podSelector`中指定的Pod的出口规则。`Ingress`下的不同元素如下所述：
- en: '- `ipBlock`: IP CIDR ranges that are allowed to communicate as egress destinations'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '- `ipBlock`：允许作为出口目的地进行通信的IP CIDR范围'
- en: '- `namespaceSelector`: Namespaces that are allowed as egress destinations based
    on namespace labels'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '- `namespaceSelector`：基于命名空间标签，允许作为出口目的地的命名空间'
- en: '- `podSelector`: Pods that are allowed as egress destination based on Pod labels'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '- `podSelector`：基于Pod标签，允许作为出口目的地的Pod'
- en: '- `ports`: Destination ports and protocols that all Pods should be allowed
    to communicate with'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '- `ports`：所有Pod应允许通信的目标端口和协议'
- en: Usually, `ipBlock` is used to specify the external IP block that microservices
    are allowed to interact with in the Kubernetes cluster, while the namespace selector
    and Pod selector are used to restrict network communications among microservices
    in the same Kubernetes cluster.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`ipBlock`用于指定允许在Kubernetes集群中与微服务交互的外部IP块，而命名空间选择器和Pod选择器用于限制在同一Kubernetes集群中微服务之间的网络通信。
- en: 'To strengthen the trust boundaries for microservices from a network aspect,
    you might want to either specify the allowed `ipBlock` from external or allowed
    microservices from a specific namespace. The following is another example to restrict
    the ingress source from certain Pods and namespaces by using `namespaceSelector`
    and `podSelector`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从网络方面加强微服务的信任边界，您可能希望要么指定来自外部的允许的`ipBlock`，要么允许来自特定命名空间的微服务。以下是另一个示例，通过使用`namespaceSelector`和`podSelector`来限制来自特定Pod和命名空间的入口源：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Note that there is no `-` in front of the `podSelector` attribute. This means
    the ingress source can only be pods with the label `from: good` in the namespace
    with the label `from: good`. This network policy protects Pods with the label
    `app: web` in the default namespace:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，在`podSelector`属性前面没有`-`。这意味着入口源只能是具有标签`from: good`的命名空间中的Pod。这个网络策略保护了默认命名空间中具有标签`app:
    web`的Pod：'
- en: '![Figure 5.1 – Network policy restricting incoming traffic by Pod and namespace
    labels'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 - 通过Pod和命名空间标签限制传入流量的网络策略'
- en: '](image/B15566_05_001.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B15566_05_001.jpg)'
- en: Figure 5.1 – Network policy restricting incoming traffic by Pod and namespace
    labels
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 - 通过Pod和命名空间标签限制传入流量的网络策略
- en: 'In the preceding diagram, the `good` namespace has the label `from: good` while
    the `bad` namespace has the label `from: bad`. It illustrates that only Pods with
    the label `from: good` in the namespace with the label `from: good` can access
    the `nginx-web` service in the default namespace. Other Pods, no matter whether
    they''re from the `good` namespace but without the label `from: good` or from
    other namespaces, cannot access the `nginx-web` service in the default namespace.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的图表中，`good`命名空间具有标签`from: good`，而`bad`命名空间具有标签`from: bad`。它说明只有在具有标签`from:
    good`的命名空间中的Pod才能访问默认命名空间中的`nginx-web`服务。其他Pod，无论它们是否来自`good`命名空间但没有标签`from: good`，或者来自其他命名空间，都无法访问默认命名空间中的`nginx-web`服务。'
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the importance of security boundaries. Understanding
    the security domains and security boundaries within the Kubernetes ecosystem helps
    administrators understand the blast radius of an attack and have mitigation strategies
    in place to limit the damage caused in the event of an attack. Knowing Kubernetes
    entities is the starting point of fortifying security boundaries. Knowing the
    security boundaries built into the system layer with Linux namespaces and capabilities
    is the next step. Last but not least, understanding the power of network policies
    is also critical to build security segmentation into microservices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了安全边界的重要性。了解Kubernetes生态系统中的安全域和安全边界有助于管理员了解攻击的影响范围，并制定限制攻击造成的损害的缓解策略。了解Kubernetes实体是巩固安全边界的起点。了解系统层中构建的安全边界与Linux命名空间和功能的能力是下一步。最后但同样重要的是，了解网络策略的威力也是构建安全细分到微服务中的关键。
- en: After this chapter, you should grasp the concept of the security domain and
    security boundaries. You should also know the security domains, common entities
    in Kubernetes, as well as the security boundaries built within or around Kubernetes
    entities. You should know the importance of using built-in security features such
    as PodSecurityPolicy and NetworkPolicy to fortify security boundaries and configure
    the security context of workloads carefully.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您应该掌握安全领域和安全边界的概念。您还应该了解Kubernetes中的安全领域、常见实体，以及在Kubernetes实体内部或周围构建的安全边界。您应该知道使用内置安全功能（如PodSecurityPolicy和NetworkPolicy）来加固安全边界，并仔细配置工作负载的安全上下文的重要性。
- en: In the next chapter, we will talk about how to secure Kubernetes components.
    In particular, there are some configuration details you should pay attention to.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何保护Kubernetes组件的安全。特别是，有一些配置细节需要您注意。
- en: Questions
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the security domains in Kubernetes?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes中的安全领域是什么？
- en: What are the common Kubernetes entities you interact with?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您与哪些常见的Kubernetes实体进行交互？
- en: How can you restrict a Kubernetes user to access objects in a specific namespace?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何限制Kubernetes用户访问特定命名空间中的对象？
- en: What does enable hostPID mean to a pod?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用hostPID对于Pod意味着什么？
- en: Try to configure a network policy to protect your service that only allows specific
    Pods as ingress sources.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试配置网络策略以保护您的服务，只允许特定的Pod作为入口源。
- en: Further references
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步参考
- en: 'Kubernetes network policies: [https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes网络策略：[https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
- en: 'CVE-2018-18264: [https://groups.google.com/forum/#!searchin/kubernetes-announce/CVE-2018-18264%7Csort:date/kubernetes-announce/yBrFf5nmvfI/gUO60KIlCAAJ](https://groups.google.com/forum/#!searchin/kubernetes-announce/CVE-2018-18264%7Csort:date/kubernetes-announce/yBrFf5nmvfI/gUO60KIlCAAJ)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CVE-2018-18264: [https://groups.google.com/forum/#!searchin/kubernetes-announce/CVE-2018-18264%7Csort:date/kubernetes-announce/yBrFf5nmvfI/gUO60KIlCAAJ](https://groups.google.com/forum/#!searchin/kubernetes-announce/CVE-2018-18264%7Csort:date/kubernetes-announce/yBrFf5nmvfI/gUO60KIlCAAJ)'
- en: 'CVE-2018-1002105: [https://groups.google.com/forum/#!topic/kubernetes-announce/GVllWCg6L88](https://groups.google.com/forum/#!topic/kubernetes-announce/GVllWCg6L88)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CVE-2018-1002105: [https://groups.google.com/forum/#!topic/kubernetes-announce/GVllWCg6L88](https://groups.google.com/forum/#!topic/kubernetes-announce/GVllWCg6L88)'
