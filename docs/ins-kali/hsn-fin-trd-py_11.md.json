["```py\nconda create -n zipline_env python=3.6\nconda activate zipline_env\nconda install -c conda-forge zipline\n```", "```py\npip install pyfolio\n```", "```py\nSET QUANDL_API_KEY=XXXXXXXX\nzipline ingest -b quandl\n```", "```py\nexport QUANDL_API_KEY=XXXXXXXX\nzipline ingest -b quandl\n```", "```py\nexport QUANDL_API_KEY=xxxx\n```", "```py\ndate,open,high,low,close,volume,dividend,split\n```", "```py\ndate,open,high,low,close,volume,dividend,split\n2015-05-15,18251.9707,18272.7207,18215.07031,18272.56055,108220000,0,0\n2015-05-18,18267.25,18325.53906,18244.25977,18298.88086,79080000,0,0\n2015-05-19,18300.48047,18351.35938,18261.34961,18312.39063,87200000,0,0\n2015-05-20,18315.06055,18350.13086,18272.56055,18285.40039,80190000,0,0\n2015-05-21,18285.86914,18314.89063,18249.90039,18285.74023,84270000,0,0\n2015-05-22,18286.86914,18286.86914,18217.14063,18232.01953,78890000,0,0\n2015-05-26,18229.75,18229.75,17990.01953,18041.53906,109440000,0,0\n```", "```py\n    import pandas as pd\n    from zipline.data.bundles import register\n    from zipline.data.bundles.csvdir import csvdir_equities\n    register(\n    \u00a0\u00a0\u00a0\u00a0'packt-csvdir-bundle',\n    \u00a0\u00a0\u00a0\u00a0csvdir_equities(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0['daily'],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'c:/MarketData/',\n    \u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0calendar_name='NYSE', \n    \u00a0\u00a0\u00a0\u00a0start_session=pd.Timestamp('2015-5-15', tz='utc'),\n    \u00a0\u00a0\u00a0\u00a0end_session=pd.Timestamp('2020-05-14', tz='utc')\n    )\n    ```", "```py\n    zipline ingest -b packt-csvdir-bundle\n    ```", "```py\n    python -c \"import zipline.data.bundles as bdl; print(bdl.__path__)\"\n    ```", "```py\n    ['d:\\\\Anaconda3\\\\envs\\\\zipline_env\\\\lib\\\\site-packages\\\\zipline\\\\data\\\\bundles']\n    ```", "```py\n    from . import quandl_eod\u00a0\u00a0# noqa\n    ```", "```py\n# These imports are necessary to force module-scope register calls to happen.\nfrom . import quandl\u00a0\u00a0# noqa\nfrom . import csvdir\u00a0\u00a0# noqa\nfrom . import quandl_eod\u00a0\u00a0# noqa\nfrom .core import (\n\u00a0\u00a0\u00a0\u00a0UnknownBundle,\n\u00a0\u00a0\u00a0\u00a0bundles,\n\u00a0\u00a0\u00a0\u00a0clean,\n\u00a0\u00a0\u00a0\u00a0from_bundle_ingest_dirname,\n\u00a0\u00a0\u00a0\u00a0ingest,\n\u00a0\u00a0\u00a0\u00a0ingestions_for_bundle,\n\u00a0\u00a0\u00a0\u00a0load,\n\u00a0\u00a0\u00a0\u00a0register,\n\u00a0\u00a0\u00a0\u00a0to_bundle_ingest_dirname,\n\u00a0\u00a0\u00a0\u00a0unregister,\n)\n__all__ = [\n\u00a0\u00a0\u00a0\u00a0'UnknownBundle',\n\u00a0\u00a0\u00a0\u00a0'bundles',\n\u00a0\u00a0\u00a0\u00a0'clean',\n\u00a0\u00a0\u00a0\u00a0'from_bundle_ingest_dirname',\n\u00a0\u00a0\u00a0\u00a0'ingest',\n\u00a0\u00a0\u00a0\u00a0'ingestions_for_bundle',\n\u00a0\u00a0\u00a0\u00a0'load',\n\u00a0\u00a0\u00a0\u00a0'register',\n\u00a0\u00a0\u00a0\u00a0'to_bundle_ingest_dirname',\n\u00a0\u00a0\u00a0\u00a0'unregister',\n] \n```", "```py\nzipline ingest -b quandl_eod\n```", "```py\n@bundles.register(\"quandl_eod\")\ndef quandl_eod_bundle(environ,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0asset_db_writer,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minute_bar_writer,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0daily_bar_writer,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0adjustment_writer,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0calendar,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0start_session,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_session,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cache,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0show_progress,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0output_dir):\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0quandl_bundle builds a daily dataset using Quandl's WIKI Prices dataset.\n\u00a0\u00a0\u00a0\u00a0For more information on Quandl's API and how to obtain an API key,\n\u00a0\u00a0\u00a0\u00a0please visit https://docs.quandl.com/docs#section-authentication\n\u00a0\u00a0\u00a0\u00a0\"\"\"\n\u00a0\u00a0\u00a0\u00a0api_key = environ.get(\"QUANDL_API_KEY\")\n\u00a0\u00a0\u00a0\u00a0if api_key is None:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raise ValueError(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Please set your QUANDL_API_KEY environment variable and retry.\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0raw_data = fetch_data_table(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0api_key, show_progress, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0environ.get(\"QUANDL_DOWNLOAD_ATTEMPTS\", 5)\n\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0asset_metadata = \\\n\u00a0\u00a0\u00a0\u00a0gen_asset_metadata(raw_data[[\"symbol\", \"date\"]], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0show_progress)\n\u00a0\u00a0\u00a0\u00a0asset_db_writer.write(asset_metadata)\n\u00a0\u00a0\u00a0\u00a0symbol_map = asset_metadata.symbol\n\u00a0\u00a0\u00a0\u00a0sessions = calendar.sessions_in_range(start_session, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_session)\n\u00a0\u00a0\u00a0\u00a0raw_data.set_index([\"date\", \"symbol\"], inplace=True)\n\u00a0\u00a0\u00a0\u00a0daily_bar_writer.write(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parse_pricing_and_vol(raw_data, sessions,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol_map),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0show_progress=show_progress,\n\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0raw_data.reset_index(inplace=True)\n\u00a0\u00a0\u00a0\u00a0raw_data[\"symbol\"] = \\\n\u00a0\u00a0\u00a0\u00a0raw_data[\"symbol\"].astype(\"category\")\n\u00a0\u00a0\u00a0\u00a0raw_data[\"sid\"] = raw_data.symbol.cat.codes\n\u00a0\u00a0\u00a0\u00a0adjustment_writer.write(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0splits=parse_splits(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raw_data[[\"sid\", \"date\", \"split_ratio\"]].loc[raw_data.split_ratio != 1],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0show_progress=show_progress,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dividends=parse_dividends(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raw_data[[\"sid\", \"date\", \"ex_dividend\"]].loc[raw_data.ex_dividend != 0],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0show_progress=show_progress,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0)\n```", "```py\n    register('yahoo_direct', # bundle's name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0direct_ingester('YAHOO',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0every_min_bar=False,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol_list_env='YAHOO_SYM_LST', \n    # the environment variable holding the comma separated list of assert names\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0downloader=yahoo.get_downloader(start_date='2010-01-01',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date='2020-01-01'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0calendar_name='NYSE',\n    )\n    ```", "```py\n    register('iex', # bundle's name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0direct_ingester('IEX Cloud',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0every_min_bar=False,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol_list_env='IEX_SYM_LST', \n    # the environemnt variable holding the comma separated list of assert names\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0downloader=iex.get_downloader(start_date='2020-01-01',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date='2020-01-05'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filter_cb=lambda df: df[[cal.is_session(dt) for dt in df.index]]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0calendar_name='NYSE',\n    )\n    ```", "```py\n    #!/usr/bin/env python\n    # -*- coding: utf-8 -*-\n    from pathlib import Path\n    from zipline.data.bundles import register\n    from zipline.data.bundles.ingester import csv_ingester \n    # ingester.py need to be placed in zipline.data.bundles\n    _DEFAULT_PATH = str(Path.home()/'.zipline/csv/yahoo')\n    register(\n    \u00a0\u00a0\u00a0\u00a0'yahoo_csv',\n    \u00a0\u00a0\u00a0\u00a0csv_ingester('YAHOO',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0every_min_bar=False, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# the price is daily\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csvdir_env='YAHOO_CSVDIR',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0csvdir=_DEFAULT_PATH,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index_column='Date',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0column_mapper={'Open': 'open',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'High': 'high',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Low': 'low',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Close': 'close',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Volume': 'volume',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Adj Close': 'price',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0calendar_name='NYSE',\n    )\n    from zipline.data.bundles.ingester import direct_ingester\n    from zipline.data.bundles import yahoo\n    register('yahoo_direct', # bundle's name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0direct_ingester('YAHOO',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0every_min_bar=False,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol_list_env='YAHOO_SYM_LST', # the environemnt variable holding the comma separated list of assert names\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0downloader=yahoo.get_downloader(start_date='2010-01-01',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date='2020-01-01'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0calendar_name='NYSE',\n    )\n    from zipline.data.bundles import iex\n    import trading_calendars as tc\n    cal=tc.get_calendar('NYSE')\n    register('iex', # bundle's name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0direct_ingester('IEX Cloud',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0every_min_bar=False,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0symbol_list_env='IEX_SYM_LST', # the environemnt variable holding the comma separated list of assert names\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0downloader=iex.get_downloader(start_date='2020-01-01',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0end_date='2020-01-05'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filter_cb=lambda df: df[[cal.is_session(dt) for dt in df.index]]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0calendar_name='NYSE',\n    )\n    ```", "```py\n    python -c \"import zipline.data.bundles as bdl; print(bdl.__path__)\"\n    ```", "```py\n    ['d:\\\\Anaconda3\\\\envs\\\\zipline_env\\\\lib\\\\site-packages\\\\zipline\\\\data\\\\bundles']\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0set YAHOO_SYM_LST=GOOG,AAPL,GE,MSFT\n    \u00a0\u00a0\u00a0\u00a0set IEX_SYM_LST=GOOG,AAPL,GE,MSFT\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0export YAHOO_SYM_LST=GOOG,AAPL,GE,MSFT\n    \u00a0\u00a0\u00a0\u00a0export IEX_SYM_LST=GOOG,AAPL,GE,MSFT\n    ```", "```py\n    set IEX_TOKEN=xxx\n    ```", "```py\n    export IEX_TOKEN=xxx\n    ```", "```py\n    zipline ingest -b yahoo_direct\n    zipline ingest -b iex\n    ```", "```py\nfrom zipline import run_algorithm \nfrom zipline.api import order_target_percent, symbol \nfrom datetime import datetime \nimport pytz \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pyfolio as pf\nfrom random import random\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0pass\ndef handle_data(context, data):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0pass\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('1996-1-1', utc=True)\nend_date = pd.to_datetime('2020-12-31', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0handle_data = handle_data, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\nfrom zipline import run_algorithm\u00a0\u00a0\nfrom zipline.api import order_target_percent, symbol, set_commission, schedule_function, date_rules, time_rules from datetime import datetime \nimport pytz \nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pyfolio as pf\nfrom random import random\ndef initialize(context):\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0# definition of the stocks and the trading parameters, e.g. commission\n\u00a0\u00a0\u00a0\u00a0schedule_function(handle_data, date_rules.month_end(), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0time_rules.market_open(hours=1))\u00a0\u00a0\ndef handle_data(context, data):\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0pass\ndef analyze(context, perf): \n\u00a0\u00a0\u00a0\u00a0returns, positions, transactions = \\\n\u00a0\u00a0\u00a0\u00a0pf.utils.extract_rets_pos_txn_from_zipline(perf) \n\u00a0\u00a0\u00a0\u00a0pf.create_returns_tear_sheet(returns, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0benchmark_rets = None)\n\nstart_date = pd.to_datetime('1996-1-1', utc=True)\nend_date = pd.to_datetime('2020-12-31', utc=True)\n\nresults = run_algorithm(start = start_date, end = end_date, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0initialize = initialize, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0analyze = analyze, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0capital_base = 10000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data_frequency = 'daily', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bundle ='quandl')\n```", "```py\ndef handle_data(context, data): \n\u00a0\u00a0\u00a0\u00a0price_hist = data.history(context.stock, \"close\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0context.rolling_window, \"1d\")\n\u00a0\u00a0\u00a0\u00a0order_target_percent(context.stock, 1.0 if price_hist[-1] > price_hist.mean() else 0.0) \n```", "```py\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5)) \n```", "```py\ndef initialize(context): \n\u00a0\u00a0\u00a0\u00a0context.stock = symbol('AAPL')\n\u00a0\u00a0\u00a0\u00a0context.rolling_window = 90\n\u00a0\u00a0\u00a0\u00a0set_commission(PerTrade(cost=5)) \n\u00a0\u00a0\u00a0\u00a0set_slippage(VolumeShareSlippage(volume_limit=0.025, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0price_impact=0.05))\n```", "```py\nzipline run -f job.py --start 2016-1-1 --end 2021-1-1 -o job_results.pickle --no-benchmark\n```", "```py\ndates = pd.date_range('1992-01-01', '2012-10-22')\nnp.random.seed(1)\npnls = np.random.randint(-990, 1000, size=len(dates)) \n# slight positive bias\npnls = pnls.cumsum()\npositions = np.random.randint(-1, 2, size=len(dates))\npositions = positions.cumsum()\nstrategy_performance = \\\npd.DataFrame(index=dates, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data={'PnL': pnls, 'Position': positions})\nstrategy_performance\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PnL\u00a0\u00a0\u00a0\u00a0Position\n1992-01-01\u00a0\u00a0\u00a0\u00a0\u00a071\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\n1992-01-02\u00a0\u00a0\u00a0-684\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\n1992-01-03\u00a0\u00a0\u00a0\u00a0258\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...\n2012-10-21\u00a0\u00a032100\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-27\n2012-10-22\u00a0\u00a032388\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-26\n7601 rows \u00d7 2 columns\n```", "```py\nstrategy_performance['PnL'].plot(figsize=(12,6), color='black', legend='PnL')\n```", "```py\nstrategy_performance['PnLStdev'] = strategy_performance['PnL'].rolling(20).std().fillna(method='backfill')\nstrategy_performance['PnLStdev'].plot(figsize=(12,6), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='PnLStdev')\n```", "```py\ndaily_pnl_series = strategy_performance['PnL'].shift(-1) - strategy_performance['PnL']\ndaily_pnl_series.fillna(0, inplace=True)\navg_daily_pnl = daily_pnl_series.mean()\nstd_daily_pnl = daily_pnl_series.std()\nsharpe_ratio = avg_daily_pnl/std_daily_pnl\nsharpe_ratio\n0.007417596376703097\n```", "```py\npnls = np.random.randint(-990, 1000, size=len(dates)) \n# slight positive bias\n```", "```py\nannualized_sharpe_ratio = sharpe_ratio * np.sqrt(252)\nannualized_sharpe_ratio\n0.11775069203166105\n```", "```py\nstrategy_performance['PnL'].plot(figsize=(12,6), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color='black', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0legend='PnL')\nplt.axhline(y=28000, color='darkgrey', linestyle='--', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label='PeakPnLBeforeDrawdown')\nplt.axhline(y=-15000, color='darkgrey', linestyle=':', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label='TroughPnLAfterDrawdown')\nplt.vlines(x='2000', ymin=-15000, ymax=28000, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label='MaxDrawdown', color='black', linestyle='-.')\nplt.legend()\n```"]