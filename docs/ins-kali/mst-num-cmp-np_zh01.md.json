["```py\nIn [1]: import numpy as np\n        x = np.array([[1,0,4],[3,3,1]])\n        y = np.array([[2,5],[1,1],[3,2]])\n        x.dot(y)\nOut[1]: array([[14, 13],[12, 20]])\n```", "```py\nIn [2]: import numpy as np\n        x = np.array([[1,2,3],[4,5,6]])\n        x\nOut[2]: array([[1, 2, 3],[4, 5, 6]])\nIn [3]: print(\"We just create a \", type(x))\nOut[3]: We just create a <class 'numpy.ndarray'>\nIn [4]: print(\"Our template has shape as\" ,x.shape)\nOut[4]: Our template has shape as (2, 3)\nIn [5]: print(\"Total size is\",x.size)\nOut[5]: Total size is 6\nIn [6]: print(\"The dimension of our array is \" ,x.ndim)\nOut[6]: The dimension of our array is 2\nIn [7]: print(\"Data type of elements are\",x.dtype)\nOut[7]: Data type of elements are int32\nIn [8]: print(\"It consumes\",x.nbytes,\"bytes\")\nOut[8]: It consumes 24 bytes\n```", "```py\nIn [9]: x = np.array([[1,2,3],[4,5,6]], dtype = np.float)\n         print(x)\nOut[9]: print(x.nbytes)\n        [[ 1\\. 2\\. 3.]\n        [ 4\\. 5\\. 6.]]\n        48\nIn [10]: x = np.array([[1,2,3],[4,5,6]], dtype = np.complex)\n         print(x)\n         print(x.nbytes)\nOut[10]: [[ 1.+0.j 2.+0.j 3.+0.j]\n         [ 4.+0.j 5.+0.j 6.+0.j]]\n         96\nIn [11]: x = np.array([[1,2,3],[4,-5,6]], dtype = np.uint32)\n         print(x)\n         print(x.nbytes)\nOut[11]: [[ 1 2 3]\n         [ 4 4294967291 6]]\n         24\n```", "```py\nIn [12]: x = np.array([[1,2,3],[4,5,6]], dtype = np.int64)\n         print(\"int64 consumes\",x.nbytes, \"bytes\")\n         x = np.array([[1,2,3],[4,5,6]], dtype = np.int32)\n         print(\"int32 consumes\",x.nbytes, \"bytes\")\nOut[12]: int64 consumes 48 bytes\n         int32 consumes 24 bytes\n```", "```py\nIn [13]: x_copy = np.array(x, dtype = np.float)\n         x_copy\nOut[13]: array([[ 1., 2., 3.],\n         [ 4., 5., 6.]])\nIn [14]: x_copy_int = x_copy.astype(np.int)\n         x_copy_int\nOut[14]: array([[1, 2, 3],\n         [4, 5, 6]])\n```", "```py\nIn [15]: x_copy\nOut[15]: array([[ 1., 2., 3.],\n         [ 4., 5., 6.]])\n```", "```py\nIn [16]: Data_Cancer= np.random.rand(100000,100)\n         print(type(Data_Cancer))\n         print(Data_Cancer.dtype)\n         print(Data_Cancer.nbytes)\n         Data_Cancer_New = np.array(Data_Cancer, dtype = np.float32)\n         print(Data_Cancer_New.nbytes)\nOut[16]: <class 'numpy.ndarray'>\n         float64\n         80000000\n         40000000\n```", "```py\nIn [17]: my_list = [2, 14, 6, 8]\n         my_array = np.asarray(my_list)\n         type(my_array)\nOut[17]: numpy.ndarray\n```", "```py\nIn [18]: my_array + 2\nOut[18]: array([ 4, 16, 8, 10])\nIn [19]: my_array - 1\nOut[19]: array([ 1, 13, 5, 7])\nIn [20]: my_array * 2\nOut[20]: array([ 4, 28, 12, 16, 8])\nIn [21]: my_array / 2\nOut[21]: array([ 1\\. , 7\\. , 3\\. , 4\\. ])\n```", "```py\nIn [22]: second_array = np.zeros(4) + 3\n         second_array\nOut[22]: array([ 3., 3., 3., 3.])\nIn [23]: my_array - second_array\nOut[23]: array([ -1., 11., 3., 5.])\nIn [24]: second_array / my_array\nOut[24]: array([ 1.5 , 0.21428571, 0.5 , 0.375 ])\n```", "```py\nIn [25]: second_array = np.ones(4) + 3\n         second_array\nOut[25]: array([ 4., 4., 4., 4.])\nIn [26]: my_array - second_array\nOut[26]: array([ -2., 10., 2., 4.])\nIn [27]: second_array / my_array\nOut[27]: array([ 2\\. , 0.28571429, 0.66666667, 0.5 ])\n```", "```py\nIn [28]: second_array = np.identity(4)\n         second_array\nOut[28]: array([[ 1., 0., 0., 0.],\n                [ 0., 1., 0., 0.],\n                [ 0., 0., 1., 0.],\n                [ 0., 0., 0., 1.]])\nIn [29]: second_array = np.identity(4) + 3\n         second_array\nOut[29]: array([[ 4., 3., 3., 3.],\n                [ 3., 4., 3., 3.],\n                [ 3., 3., 4., 3.],\n                [ 3., 3., 3., 4.]])\nIn [30]: my_array - second_array\nOut[30]: array([[ -2., 11., 3., 5.],\n                [ -1., 10., 3., 5.],\n                [ -1., 11., 2., 5.],\n                [ -1., 11., 3., 4.]])\n```", "```py\nIn [31]: second_array / my_array\nOut[31]: array([[ 2\\.  , 0.21428571, 0.5       , 0.375      ],\n                [ 1.5 , 0.28571429, 0.5       , 0.375      ],\n                [ 1.5 , 0.21428571, 0.66666667, 0.375      ],\n                [ 1.5 , 0.21428571, 0.5       , 0.5        ]])\n```", "```py\nIn [32]: x = np.arange(3,7,0.5)\n         x\nOut[32]: array([ 3\\. , 3.5, 4\\. , 4.5, 5\\. , 5.5, 6\\. , 6.5])\n```", "```py\nIn [33]: x = np.linspace(1.2, 40.5, num=20)\n         x\nOut[33]: array([ 1.2        , 3.26842105,  5.33684211,  7.40526316,   9.47368421,\n                 11.54210526, 13.61052632, 15.67894737, 17.74736842, 19.81578947,\n                 21.88421053, 23.95263158, 26.02105263, 28.08947368, 30.15789474,\n                 32.22631579, 34.29473684, 36.36315789, 38.43157895, 40.5       ])\n```", "```py\nIn [34]: np.geomspace(1, 625, num=5)\nOut[34]: array([ 1., 5., 25., 125., 625.])\n```", "```py\nIn [35]: np.logspace(3, 4, num=5)\nOut[35]: array([ 1000\\. , 1778.27941004, 3162.27766017, 5623.4132519 ,\n                10000\\. ])\n```", "```py\nIn [36]: np.logspace(np.log10(3) , np.log10(4) , num=5)\nOut[36]: array([ 3\\. , 3.2237098 , 3.46410162, 3.72241944, 4\\. ])\n```", "```py\nIn [37]: x = np.array([1,2,3,4])\n         y = np.array([1,3,4,4])\n         x == y\nOut[37]: array([ True, False, False, True], dtype=bool)\n```", "```py\nIn [38]: x = np.array([1,2,3,4])\n         y = np.array([1,3,4,4])\n         np.array_equal(x,y)\nOut[38]: False\n```", "```py\nIn [39]: x = np.array([1,2,3,4])\n         y = np.array([1,3,4,4])\n         x < y\nOut[39]: array([False, True, True, False], dtype=bool)\n```", "```py\nIn [40]: x = np.array([0, 1, 0, 0], dtype=bool)\n         y = np.array([1, 1, 0, 1], dtype=bool)\n         np.logical_or(x,y)\nOut[40]: array([ True, True, False, True], dtype=bool)\nIn [41]: np.logical_and(x,y)\nOut[41]: array([False, True, False, False], dtype=bool)\nIn [42]: x = np.array([12,16,57,11])\n         np.logical_or(x < 13, x > 50)\nOut[42]: array([ True, False, True, True], dtype=bool)\n```", "```py\nIn [43]: x = np.array([1, 2, 3,4 ])\n         np.exp(x)\nOut[43]: array([ 2.71828183, 7.3890561 , 20.08553692, 54.59815003])\nIn [44]: np.log(x)\nOut[44]: array([ 0\\. , 0.69314718, 1.09861229, 1.38629436])\nIn [45]: np.sin(x)\nOut[45]: array([ 0.84147098, 0.90929743, 0.14112001, -0.7568025 ])\n```", "```py\nIn [46]: x = np.arange(9)\n         x\nOut[46]: array([0, 1, 2, 3, 4, 5, 6, 7, 8])\nIn [47]: x = np.arange(9).reshape((3, 3))\n         x\nOut[47]: array([[0, 1, 2],\n                [3, 4, 5],\n                [6, 7, 8]])\nIn [48]: x.T\nOut[48]: array([[0, 3, 6],\n                [1, 4, 7],\n                [2, 5, 8]])\n```", "```py\nIn [49]: x = np.arange(6).reshape(2,3)\n         x\nOut[49]: array([[0, 1, 2],\n                [3, 4, 5]])\nIn [50]: x.T\nOut[50]: array([[0, 3],\n                [1, 4],\n                [2, 5]])\n```", "```py\nIn [51]: x = np.arange(9).reshape((3,3))\n         x\nOut[51]: array([[0, 1, 2],\n                [3, 4, 5],\n                [6, 7, 8]])\nIn [52]: np.sum(x)\nOut[52]: 36\nIn [53]: np.amin(x)\nOut[53]: 0\nIn [54]: np.amax(x)\nOut[54]: 8\nIn [55]: np.amin(x, axis=0)\nOut[55]: array([0, 1, 2])\nIn [56]: np.amin(x, axis=1)\nOut[56]: array([0, 3, 6])\nIn [57]: np.percentile(x, 80)\nOut[57]: 6.4000000000000004\n```", "```py\nIn [58]: x = np.array([1,-21,3,-3])\n         np.argmax(x)\nOut[58]: 2\nIn [59]: np.argmin(x)\nOut[59]: 1\n```", "```py\nIn [60]: x = np.array([[2, 3, 5], [20, 12, 4]])\n         x\nOut[60]: array([[ 2, 3, 5],\n                [20, 12, 4]])\nIn [61]: np.mean(x)\nOut[61]: 7.666666666666667\nIn [62]: np.mean(x, axis=0)\nOut[62]: array([ 11\\. , 7.5, 4.5])\nIn [63]: np.mean(x, axis=1)\nOut[63]: array([ 3.33333333, 12\\. ])\nIn [64]: np.median(x)\nOut[64]: 4.5\nIn [65]: np.std(x)\nOut[65]: 6.3944420310836261\n```", "```py\nIn [66]: c = np.ones((4, 4))\n         c*c\nOut[66]: array([[ 1., 1., 1., 1.],\n                [ 1., 1., 1., 1.],\n                [ 1., 1., 1., 1.],\n                [ 1., 1., 1., 1.]])\nIn [67]: c.dot(c)\nOut[67]: array([[ 4., 4., 4., 4.],\n                [ 4., 4., 4., 4.],\n                [ 4., 4., 4., 4.],\n                [ 4., 4., 4., 4.]])\n```", "```py\nIn [68]: y = np.arange(15).reshape(3,5)\n         x = np.arange(10).reshape(2,5)\n         new_array = np.vstack((y,x))\n         new_array\nOut[68]: array([[ 0, 1, 2, 3, 4],\n                [ 5, 6, 7, 8, 9],\n                [10, 11, 12, 13, 14],\n                [ 0, 1, 2, 3, 4],\n                [ 5, 6, 7, 8, 9]])\nIn [69]: y = np.arange(15).reshape(5,3)\n         x = np.arange(10).reshape(5,2)\n         new_array = np.hstack((y,x))\n         new_array\nOut[69]: array([[ 0, 1, 2, 0, 1],\n                [ 3, 4, 5, 2, 3],\n                [ 6, 7, 8, 4, 5],\n                [ 9, 10, 11, 6, 7],\n                [12, 13, 14, 8, 9]])\n```", "```py\nIn [70]: from scipy import stats\n         x= np.random.rand(100,10)\n         n, min_max, mean, var, skew, kurt = stats.describe(x)\n         new_array = np.vstack((mean,var,skew,kurt,min_max[0],min_max[1]))\n         new_array.T\nOut[70]: array([[ 5.46011575e-01, 8.30007104e-02, -9.72899085e-02,\n                 -1.17492785e+00, 4.07031246e-04, 9.85652100e-01],\n                [ 4.79292653e-01, 8.13883169e-02, 1.00411352e-01,\n                 -1.15988275e+00, 1.27241020e-02, 9.85985488e-01],\n                [ 4.81319367e-01, 8.34107619e-02, 5.55926602e-02,\n                 -1.20006450e+00, 7.49534810e-03, 9.86671083e-01],\n                [ 5.26977277e-01, 9.33829059e-02, -1.12640661e-01,\n                 -1.19955646e+00, 5.74237697e-03, 9.94980830e-01],\n                [ 5.42622228e-01, 8.92615897e-02, -1.79102183e-01,\n                 -1.13744108e+00, 2.27821933e-03, 9.93861532e-01],\n                [ 4.84397369e-01, 9.18274523e-02, 2.33663872e-01,\n                 -1.36827574e+00, 1.18986562e-02, 9.96563489e-01],\n                [ 4.41436165e-01, 9.54357485e-02, 3.48194314e-01,\n                 -1.15588500e+00, 1.77608372e-03, 9.93865324e-01],\n                [ 5.34834409e-01, 7.61735119e-02, -2.10467450e-01,\n                 -1.01442389e+00, 2.44706226e-02, 9.97784091e-01],\n                [ 4.90262346e-01, 9.28757119e-02, 1.02682367e-01,\n                 -1.28987137e+00, 2.97705706e-03, 9.98205307e-01],\n                [ 4.42767478e-01, 7.32159267e-02, 1.74375646e-01,\n                 -9.58660574e-01, 5.52410464e-04, 9.95383732e-01]])\n```", "```py\nIn [71]: import numpy.ma as ma\n         x = np.arange(6)\n         print(x.mean())\n         masked_array = ma.masked_array(x, mask=[1,0,0,0,0,0])\n         masked_array.mean()\n         2.5 \nOut[71]: 3.0\n```", "```py\nIn [72]: x = np.arange(25, dtype = float).reshape(5,5)\n         x[x<5] = np.nan\n         x\nOut[72]: array([[ nan, nan, nan, nan, nan],\n                [ 5., 6., 7., 8., 9.],\n                [ 10., 11., 12., 13., 14.],\n                [ 15., 16., 17., 18., 19.],\n                [ 20., 21., 22., 23., 24.]])\nIn [73]: np.where(np.isnan(x), ma.array(x, mask=np.isnan(x)).mean(axis=0), x)\nOut[73]: array([[ 12.5, 13.5, 14.5, 15.5, 16.5],\n                [ 5\\. , 6\\. , 7\\. , 8\\. , 9\\. ],\n                [ 10\\. , 11\\. , 12\\. , 13\\. , 14\\. ],\n                [ 15\\. , 16\\. , 17\\. , 18\\. , 19\\. ],\n                [ 20\\. , 21\\. , 22\\. , 23\\. , 24\\. ]])\n```", "```py\nIn [74]: x = [\"USA\",\"France\", \"Germany\",\"England\"]\n         x[2]\nOut[74]: 'Germany'\nIn [75]: x = ('USA',3,\"France\",4)\n         x[2]\nOut[75]: 'France'\n```", "```py\nIn [76]: x = np.arange(10)\n         x\nOut[76]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nIn [77]: x[5]\nOut[77]: 5\nIn [78]: x[-2]\nOut[78]: 8\nIn [79]: x[2:8]\nOut[79]: array([2, 3, 4, 5, 6, 7])\nIn [80]: x[:]\nOut[80]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nIn [81]: x[2:8:2]\nOut[81]: array([2, 4, 6])\n```", "```py\nIn [82]: x = np.reshape(np.arange(16),(4,4))\n         x\nOut[82]: array([[ 0, 1, 2, 3],\n                [ 4, 5, 6, 7],\n                [ 8, 9, 10, 11],\n                [12, 13, 14, 15]])\nIn [83]: x[1:3]\nOut[83]: array([[ 4, 5, 6, 7],\n                [ 8, 9, 10, 11]])\nIn [84]: x[:,1:3]\nOut[84]: array([[ 1, 2],\n                [ 5, 6],\n                [ 9, 10],\n                [13, 14]])\nIn [85]: x[1:3,1:3]\nOut[85]: array([[ 5, 6],\n                [ 9, 10]])\n```", "```py\nIn [86]: x = np.reshape(np.arange(16),(4,4))\n         x\nOut[86]: array([[ 0, 1, 2, 3],\n                [ 4, 5, 6, 7],\n                [ 8, 9, 10, 11],\n                [12, 13, 14, 15]])\nIn [87]: x[[0,1,2],[0,1,3]]\nOut[87]: array([ 0, 5, 11])\n```", "```py\nIn [88]: x = np.arange(16).reshape(4,4)\n         x\nOut[88]: array([[ 0, 1, 2, 3],\n                [ 4, 5, 6, 7],\n                [ 8, 9, 10, 11],\n                [12, 13, 14, 15]])\nIn [89]: np.resize(x,(2,2))\nOut[89]: array([[0, 1],\n                 [2, 3]])\nIn [90]: np.resize(x,(6,6))\nOut[90]: array([[ 0, 1, 2, 3, 4, 5],\n                [ 6, 7, 8, 9, 10, 11],\n                [12, 13, 14, 15, 0, 1],\n                [ 2, 3, 4, 5, 6, 7],\n                [ 8, 9, 10, 11, 12, 13],\n                [14, 15, 0, 1, 2, 3]])\n```", "```py\nIn [91]: x = np.arange(16).reshape(4,4)\n         y = np.arange(6).reshape(2,3)\n         x+y\n        ---------------------------------------------------------------                           ------------\n        ValueError Traceback (most recent call last)\n        <ipython-input-102-083fc792f8d9> in <module>()\n        1 x = np.arange(16).reshape(4,4)\n        2 y = np.arange(6).reshape(2,3)\n        ----> 3 x+y\n        12\n        ValueError: operands could not be broadcast together with                      shapes (4,4) (2,3)\n```", "```py\nIn [92]: x = np.ones(16).reshape(4,4)\n          y = np.arange(4)\n          x*y\nOut[92]: array([[ 0., 1., 2., 3.],\n                 [ 0., 1., 2., 3.],\n                 [ 0., 1., 2., 3.],\n                 [ 0., 1., 2., 3.]])\nIn [93]: x = np.arange(4).reshape(2,2)\n         x\nOut[93]: array([[0, 1],\n                [2, 3]])\nIn [94]: y = np.arange(2).reshape(1,2)\n         y\nOut[94]: array([[0, 1]])\nIn [95]: x*y\nOut[95]: array([[0, 1],\n                [0, 3]])\n\n```"]