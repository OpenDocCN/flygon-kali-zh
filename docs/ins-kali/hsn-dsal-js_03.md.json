["```js\n// create an empty object\nvar setOrMap = Object.create(null);\n\n// assign a key and value\nsetOrMap.someKey = someValue;\n\n// if used as a set, check for existence\nif(setOrMap.someKey) {\n    // set has someKey \n}\n\n// if used as a map, access value\nvar returnedValue = setOrMap.someKey;\n```", "```js\n// create a new map object\nlet map = Object.create(null);\n\n// add properties to the new map object\nlet b = {};\nlet c = {};\nmap[b] = 10\nmap[c] = 20\n\n// log map\nObject [object Object]: 20\n```", "```js\nvar map = new Map();\n\n(function() {\n var key =  {}; <- Object \n map.set(key, 10); <- referrer of the Object \n    // other logic which uses the map\n\n})(); <- IIFE which is expected to remove the referrer once executed\n```", "```js\nvar myWeakMap = new WeakMap();\n\n(function() {\n var key =  {};<- Object\n myWeakMap.set(key, 10);<- referrer of the Object\n\n    // other logic which uses the weak map\n})(); <- IIFE which is expected to remove the referrer once executed\n```", "```js\nvar set = new Set();\nvar wset = new WeakSet();\n\n(function() {\n\n  var a = {a: 1};\n  var b = {b: 2};\n  var c = {c: 3};\n  var d = {d: 4};\n\n  set.add(1).add(2).add(3).add(4);\n  wset.add(a).add(b).add(b).add(d);\n\n})();\n\nconsole.dir(set);\nconsole.dir(wset);\n```", "```js\nnpm install -g @angular/cli\n```", "```js\nng new <project-name>\n```", "```js\nng serve\n```", "```js\n ng new keyboard-shortcuts\n```", "```js\nimport { Component } from '@angular/core';\n\n@Component({\n   selector: 'home',\n   template: 'home page' })\nexport class HomeComponent {\n\n}\n```", "```js\nimport { HomeComponent } from './home.component';\n\nexport const HomeRoutes = [\n   { path: 'home', component: HomeComponent },\n];\n\nexport const HomeComponents = [\n   HomeComponent\n];\n```", "```js\nimport { Routes } from '@angular/router';\nimport {AboutComponents, AboutRoutes} from \"./pages/about/about.routing\";\nimport {DashboardComponents, DashboardRoutes} from \"./pages/dashboard/dashboard.routing\";\nimport {HomeComponents, HomeRoutes} from \"./pages/home/home.routing\";\nimport {ProfileComponents, ProfileRoutes} from \"./pages/profile/profile.routing\";\n\nexport const routes: Routes = [\n   {\n path: '',\n redirectTo: '/home',\n pathMatch: 'full'\n  },\n   ...AboutRoutes,\n   ...DashboardRoutes,\n   ...HomeRoutes,\n   ...ProfileRoutes ];\n\nexport const navigatableComponents = [\n   ...AboutComponents,\n   ...DashboardComponents,\n   ...HomeComponents,\n   ...ProfileComponents ];\n```", "```js\n@NgModule({\n    declarations: [\n        AppComponent,\n        ...navigatableComponents\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        RouterModule.forRoot(routes)\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<nav>\n    <button mat-button\n            routerLink=\"/about\"\n  routerLinkActive=\"active\">\n        About\n    </button>\n    <button mat-button\n            routerLink=\"/dashboard\"\n  routerLinkActive=\"active\">\n        Dashboard\n    </button>\n    <button mat-button\n            routerLink=\"/home\"\n  routerLinkActive=\"active\">\n        Home\n    </button>\n    <button mat-button\n            routerLink=\"/profile\"\n  routerLinkActive=\"active\">\n        Profile\n    </button>\n</nav>\n\n<router-outlet></router-outlet>\n```", "```js\nng serve\n```", "```js\nimport { HomeComponent } from './home.component';\n\nexport const HomeRoutes = [\n { path: 'home', component: HomeComponent },\n];\n\nexport const HomeComponents = [\n HomeComponent\n];\n```", "```js\nimport { HomeComponent } from './home.component';\n\nexport const HomeRoutes = [\n { path: 'home', component: HomeComponent, data: { keymap: 'ctrl+h'} },\n];\n\nexport const HomeComponents = [\n HomeComponent\n];\n```", "```js\nimport {Component} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss',  './theme.scss']\n})\nexport class AppComponent {\n\n    // defined the keyMap\n    keyMap = new Map();\n\n    constructor(private router: Router) {\n        // loop over the router configuration\n        this.router.config.forEach((routerConf)=> {\n\n            // extract the keymap\n            const keyMap = routerConf.data ? routerConf.data.keymap :\n            undefined;\n\n            // if keymap exists for the route and is not a duplicate,\n            add\n            // to master list\n            if (keyMap && !this.keyMap.has(keyMap)) {\n                this.keyMap.set(keyMap, `/${routerConf.path}`);\n            }\n        })\n    }\n\n}\n```", "```js\nimport {Component, HostListener} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss',  './theme.scss']\n})\nexport class AppComponent {\n\n    // defined the keyMap\n  keyMap = new Map();\n\n    // add the HostListener\n    @HostListener('document:keydown', ['$event'])\n    onKeyDown(ev: KeyboardEvent) {\n\n        // filter out all non CTRL key presses and \n        // when only CTRL is key press\n        if (ev.ctrlKey && ev.keyCode !== 17) {\n\n            // check if user selection is already registered\n            if (this.keyMap.has(`ctrl+${ev.key}`)) {\n\n                // extract the registered path\n                const path = this.keyMap.get(`ctrl+${ev.key}`);\n\n                // navigate\n                this.router.navigateByUrl(path);\n            }\n        }\n    }\n\n    constructor(private router: Router) {\n        // loop over the router configuration\n  this.router.config.forEach((routerConf)=> {\n\n            // extract the keymap\n  const keyMap = routerConf.data ? routerConf.data.keymap :\n            undefined;\n\n            // if keymap exists for the route and is not a duplicate,\n            add\n // to master list  if (keyMap && !this.keyMap.has(keyMap)) {\n                this.keyMap.set(keyMap, `/${routerConf.path}`);\n            }\n        })\n    }\n}\n```", "```js\n.active {\n    color: red;\n}\n\nnav {\n    button {\n      &::first-letter {\n        font-weight:bold;\n        text-decoration: underline;\n        font-size: 1.2em;\n      }\n    }\n}\n\n.bottom-right {\n  position: fixed;\n  bottom: 30px;\n  right: 30px;\n  background: rgba(0,0,0, 0.5);\n  color: white;\n  padding: 20px;\n}\n```", "```js\n<nav>\n    <button mat-button\n            routerLink=\"/about\"\n  routerLinkActive=\"active\">\n        About\n    </button>\n    <button mat-button\n            routerLink=\"/dashboard\"\n  routerLinkActive=\"active\">\n        Dashboard\n    </button>\n    <button mat-button\n            routerLink=\"/home\"\n  routerLinkActive=\"active\">\n        Home\n    </button>\n    <button mat-button\n            routerLink=\"/profile\"\n  routerLinkActive=\"active\">\n        Profile\n    </button>\n</nav>\n\n<router-outlet></router-outlet>\n\n<section [class]=\"keypress? 'bottom-right': ''\">\n    {{keypress}}\n</section>\n```", "```js\nimport {Component, HostListener} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss',  './theme.scss']\n})\nexport class AppComponent {\n\n    // defined the keyMap\n  keyMap = new Map();\n\n    // defined the keypressed\n  keypress: string = '';\n\n    // clear timer if needed\n timer: number;\n\n    // add the HostListener\n  @HostListener('document:keydown', ['$event'])\n    onKeyDown(ev: KeyboardEvent) {\n\n        // filter out all non CTRL key presses and\n // when only CTRL is key press  if (ev.ctrlKey && ev.keyCode !== 17) {\n\n            // display user selection\n  this.highlightKeypress(`ctrl+${ev.key}`);\n\n            // check if user selection is already registered\n  if (this.keyMap.has(`ctrl+${ev.key}`)) {\n\n                // extract the registered path\n  const path = this.keyMap.get(`ctrl+${ev.key}`);\n\n                // navigate\n  this.router.navigateByUrl(path);\n            }\n        }\n    }\n\n    constructor(private router: Router) {\n        // loop over the router configuration\n  this.router.config.forEach((routerConf)=> {\n\n            // extract the keymap\n  const keyMap = routerConf.data ? routerConf.data.keymap :\n            undefined;\n\n            // if keymap exists for the route and is not a duplicate,\n            add\n // to master list  if (keyMap && !this.keyMap.has(keyMap)) {\n                this.keyMap.set(keyMap, `/${routerConf.path}`);\n            }\n        })\n    }\n\n    highlightKeypress(keypress: string) {\n        // clear existing timer, if any\n  if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        // set the user selection\n  this.keypress = keypress;\n\n        // reset user selection\n  this.timer = setTimeout(()=> {\n            this.keypress = '';\n        }, 500);\n    }\n\n}\n```", "```js\nng new heatmap\n```", "```js\nng serve\n```", "```js\nnpm install --save @angular/material @angular/animations @angular/cdk\n```", "```js\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { MatInputModule } from '@angular/material';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        MatInputModule\n    ],\n    providers: [\n\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<form>\n    <mat-input-container class=\"full-width\">\n        <input matInput placeholder=\"Company Name\">\n    </mat-input-container>\n\n    <table class=\"full-width\" cellspacing=\"0\">\n        <tr>\n            <td>\n                <mat-input-container class=\"full-width\">\n                    <input matInput placeholder=\"First Name\">\n                </mat-input-container>\n            </td>\n            <td>\n                <mat-input-container class=\"full-width\">\n                    <input matInput placeholder=\"Last Name\">\n                </mat-input-container>\n            </td>\n        </tr>\n    </table>\n    <p>\n        <mat-input-container class=\"full-width\">\n            <textarea matInput placeholder=\"Address\"></textarea>\n        </mat-input-container>\n        <mat-input-container class=\"full-width\">\n            <textarea matInput placeholder=\"Address 2\"></textarea>\n        </mat-input-container>\n    </p>\n\n    <table class=\"full-width\" cellspacing=\"0\">\n        <tr>\n            <td>\n                <mat-input-container class=\"full-width\">\n                    <input matInput placeholder=\"City\">\n                </mat-input-container>\n            </td>\n            <td>\n                <mat-input-container class=\"full-width\">\n                    <input matInput placeholder=\"State\">\n                </mat-input-container>\n            </td>\n            <td>\n                <mat-input-container class=\"full-width\">\n                    <input matInput #postalCode maxlength=\"5\" placeholder=\"Postal Code\">\n                    <mat-hint align=\"end\">{{postalCode.value.length}} / 5</mat-\n                    hint>\n                </mat-input-container>\n            </td>\n        </tr>\n    </table>\n</form>\n```", "```js\nbody {\n  position: relative;\n}\n\nform {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.full-width {\n  width: 100%;\n}\n```", "```js\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class TrackerService {\n    worker: any;\n\n    constructor() {\n        this.setupTracker();\n    }\n\n    setupTracker () {\n        this.worker = new Worker('scripts.bundle.js');\n    }\n\n    addEvent(key: string, event: any, customValue ?: string) {\n        this.worker.postMessage({\n            key: key,\n            user: 'user_id_here'\n            event: {\n                pageX: event.pageX,\n                pageY: event.pageY\n  },\n            customValue : customValue\n        });\n    }\n}\n```", "```js\n....\nimport {TrackerService} from \"./service/tracker/tracker.service\";\n\n@NgModule({\n    ....,\n    providers: [\n        TrackerService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\nimport {Directive, Input, HostListener} from '@angular/core';\nimport {TrackerService} from \"../../service/tracker/tracker.service\";\n\n@Directive({\n    selector: '[tracker]',\n})\nexport class tracker {\n\n    @Input('tracker') key: string;\n\n    constructor(private trackerService: TrackerService) {}\n\n    @HostListener('click', ['$event'])\n    clicked(ev: MouseEvent) {\n        this.trackerService.addEvent(this.key, ev);\n    }\n}\n```", "```js\n<input matInput placeholder=\"First Name\" tracker=\"first-name\">\n```", "```js\nvar sessionKeys = new Set();\nvar sessionData = new Map();\nvar startTime = Date.now();\nvar endTime;\n\nself.addEventListener('message', function(e) {\n addEvent(e.data);\n});\n```", "```js\nfunction addEvent(data) {\n   var key = data.key || '';\n   var event = data.event || '';\n   var customValue = data.customValue || '';\n   var currentOccurrences;\n\n   var newItem = {\n      eventX: event.pageX,\n      eventY: event.pageY,\n      timestamp: Date.now(),\n      customValue: customValue ? customValue : ''\n  };\n\n   if (sessionKeys.has(key)) {\n      currentOccurrences = sessionData.get(key);\n      currentOccurrences.push(newItem);\n\n      sessionData.set(key, currentOccurrences);\n   } else {\n      currentOccurrences = [];\n      currentOccurrences.push(newItem);\n\n      sessionKeys.add(key);\n      sessionData.set(key, currentOccurrences);\n   }\n\n   if (Math.random() > 0.7) {\n      syncWithServer(data.user);\n   }\n}\n```", "```js\nfunction syncWithServer(user) {\n   endTime = Date.now();\n\n   fakeSyncWithDB({\n      startTime: startTime,\n      endTime: endTime,\n      user: user,\n      data: Array.from(sessionData)\n   }).then(function () {\n      setupTracker();\n   });\n}\n\nfunction fakeSyncWithDB(data) {\n   //fake sync with DB\n  return new Promise(function (resolve, reject) {\n      console.dir(data);\n      resolve();\n   });\n}\n\nfunction setupTracker() {\n   startTime = Date.now();\n   sessionData.clear();\n   sessionKeys.clear();\n}\n```", "```js\nvar sessionKeys = new Set();\nvar sessionData = new Map();\nvar startTime = Date.now();\nvar endTime;\n\nself.addEventListener('message', function(e) {\n   addEvent(e.data);\n});\n\nfunction addEvent(data) {\n   var key = data.key || '';\n   var event = data.event || '';\n   var customValue = data.customValue || '';\n   var currentOccurrences;\n\n   var newItem = {\n      eventX: event.pageX,\n      eventY: event.pageY,\n      timestamp: Date.now(),\n      customValue: customValue ? customValue : ''\n  };\n\n   if (sessionKeys.has(key)) {\n      currentOccurrences = sessionData.get(key);\n      currentOccurrences.push(newItem);\n\n      sessionData.set(key, currentOccurrences);\n   } else {\n      currentOccurrences = [];\n\n      currentOccurrences.push(newItem);\n      sessionKeys.add(key);\n\n      sessionData.set(key, currentOccurrences);\n   }\n\n   if (Math.random() > 0.7) {\n      syncWithServer(data.user);\n   }\n}\n\nfunction syncWithServer(user) {\n   endTime = Date.now();\n\n   fakeSyncWithDB({\n      startTime: startTime,\n      endTime: endTime,\n      user: user,\n      data: Array.from(sessionData)\n   }).then(function () {\n      setupTracker();\n   });\n}\n\nfunction fakeSyncWithDB(data) {\n   //fake sync with DB\n  return new Promise(function (resolve, reject) {\n      resolve();\n   });\n}\n\nfunction setupTracker() {\n   startTime = Date.now();\n   sessionData.clear();\n   sessionKeys.clear();\n}\n```", "```js\nmkdir performance-sets-maps\n```", "```js\ncd performance-sets-maps\nnpm init\n```", "```js\nnpm install benchmark --save\n```", "```js\nvar Benchmark = require(\"benchmark\");\nvar suite = new Benchmark.Suite();\n\nvar set = new Set();\nvar arr = [];\n\nfor(var i=0; i < 1000; i++) {\n   set.add(i);\n   arr.push(i);\n}\n\nsuite\n  .add(\"array #indexOf\", function(){\n      arr.indexOf(100) > -1;\n   })\n   .add(\"set #has\", function(){\n      set.has(100);\n   })   .add(\"array #splice\", function(){\n      arr.splice(99, 1);\n   })\n   .add(\"set #delete\", function(){\n      set.delete(99);\n   })\n   .add(\"array #length\", function(){\n      arr.length;\n   })\n   .add(\"set #size\", function(){\n      set.size;\n   })\n   .on(\"cycle\", function(e) {\n      console.log(\"\" + e.target);\n   })\n   .run();\n```", "```js\nvar set = new Set();\nvar arr = [];\n\nfor(var i=0; i < 1000; i++) {\n set.add(i);\n arr.push(i);\n}\n```", "```js\nnode sets-arr.js\n```", "```js\nvar Benchmark = require(\"benchmark\");\nvar suite = new Benchmark.Suite();\n\nvar map = new Map();\nvar obj = {};\n\nfor(var i=0; i < 100; i++) {\n   map.set(i, i);\n   obj[i] = i;\n}\n\nsuite\n  .add(\"Object #get\", function(){\n      obj[19];\n   })\n   .add(\"Map #get\", function(){\n      map.get(19);\n   })\n   //\n  .add(\"Object #delete\", function(){\n      delete obj[99];\n   })\n   .add(\"Map #delete\", function(){\n      map.delete(99);\n   })\n   .add(\"Object #length\", function(){\n      Object.keys(obj).length;\n   })\n   .add(\"Map #size\", function(){\n      map.size;\n   })\n   .on(\"cycle\", function(e) {\n      console.log(\"\" + e.target);\n   })\n   .run();\n```", "```js\nnode maps-obj.js\n```"]