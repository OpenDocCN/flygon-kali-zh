- en: Chapter 10. Debugging Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。调试容器
- en: Debugging has been an artistic component in the field of software engineering.
    All kinds of software building blocks individually, as well as collectively, need
    to go through a stream of deeper and decisive investigations by software development
    and testing professionals in order to ensure the security and safety of the resulting
    software applications. As Docker containers are said to be key runtime environments
    for next generation mission-critical software workloads, it is pertinent and paramount
    for containers, crafters, and composers to embark on the systematic and sagacious
    verification and validation of containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试一直是软件工程领域的艺术组成部分。各种软件构建模块个别以及集体都需要经过软件开发和测试专业人员深入而决定性的调查流程，以确保最终软件应用程序的安全性和安全性。由于Docker容器被认为是下一代关键运行时环境，用于使命关键的软件工作负载，因此对于容器、制作者和作曲家来说，进行容器的系统和明智的验证和验证是相关和至关重要的。
- en: This chapter has been dedicatedly written to enable technical guys with all
    the right and relevant information to meticulously debug applications running
    inside containers and containers themselves. In this chapter, we will take a look
    at the theoretical aspects of process isolation for processes running as containers.
    A Docker container runs at a user-level process on host machines and typically
    has the same isolation level as provided by the operating system. With the release
    of Docker 1.5, many debugging tools are available, which can be efficiently used
    to debug your applications. We will also cover the primary Docker debugging tools,
    such as Docker `exec`, `stats`, `ps`, `top`, `events`, and `logs`. Finally, we
    will take a look at the `nsenter` tool to log in to containers without running
    the **Secure Shell** (**SSH**) daemon.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门为技术人员撰写，旨在为他们提供所有正确和相关的信息，以便精心调试在容器内运行的应用程序和容器本身。在本章中，我们将从理论角度探讨作为容器运行的进程的进程隔离方面。Docker容器在主机上以用户级进程运行，通常具有与操作系统提供的隔离级别相同的隔离级别。随着Docker
    1.5的发布，许多调试工具可供使用，可以有效地用于调试应用程序。我们还将介绍主要的Docker调试工具，如Docker `exec`、`stats`、`ps`、`top`、`events`和`logs`。最后，我们将介绍`nsenter`工具，以便登录到容器而无需运行**Secure
    Shell**（**SSH**）守护程序。
- en: 'The list of topics that will be covered in the chapter is as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题列表如下：
- en: Process level isolation for Docker containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器的进程级隔离
- en: Debugging a containerized application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试容器化应用程序
- en: Installing and using `nsenter`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用`nsenter`
- en: Process level isolation for Docker containers
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker容器的进程级隔离
- en: 'In the virtualization paradigm, the hypervisor emulates computing resources
    and provides a virtualized environment called a VM to install the operating system
    and applications on top of it. Whereas, in the case of the container paradigm,
    a single system (bare metal or virtual machine) is effectively partitioned to
    run multiple services simultaneously without interfering with each other. These
    services must be isolated from each other in order to prevent them from stepping
    on each other''s resources or dependency conflict (also known as dependency hell).
    The Docker container technology essentially achieves process-level isolation by
    leveraging the Linux kernel constructs, such as namespaces and cgroups, particularly,
    the namespaces. The Linux kernel provides the following five powerful namespace
    leavers to isolate the global system resources from each other. These are the
    **Interprocess Communication** (**IPC**) namespaces used to isolate the interprocess
    communication resources:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化范式中，hypervisor模拟计算资源并提供一个虚拟化环境，称为VM，用于在其上安装操作系统和应用程序。而在容器范式的情况下，单个系统（裸机或虚拟机）被有效地分区，以便同时运行多个服务而互不干扰。为了防止它们相互干扰，这些服务必须相互隔离，以防止它们占用对方的资源或产生依赖冲突（也称为依赖地狱）。Docker容器技术基本上通过利用Linux内核构造（如命名空间和cgroups，特别是命名空间）实现了进程级别的隔离。Linux内核提供了以下五个强大的命名空间，用于将全局系统资源相互隔离。这些是用于隔离进程间通信资源的**进程间通信**（**IPC**）命名空间：
- en: The network namespace is used to isolate networking resources, such as the network
    devices, network stack, port number, and so on
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络命名空间用于隔离网络资源，如网络设备、网络堆栈、端口号等
- en: The mount namespace isolates the filesystem mount points
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载命名空间隔离文件系统挂载点
- en: The PID namespace isolates the process identification number
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PID命名空间隔离进程标识号
- en: The user namespace is used to isolate the user ID and group ID
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户命名空间用于隔离用户ID和组ID
- en: The UTS namespace is used to isolate the hostname and the NIS domain name
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UTS命名空间用于隔离主机名和NIS域名
- en: These namespaces add an additional level of complexity when we have to debug
    the services running inside the containers, which we will learn more in detail
    in the next chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们必须调试容器内运行的服务时，这些命名空间会增加额外的复杂性，我们将在下一章节中更详细地学习。
- en: 'In this section, we will discuss how the Docker engine provides process isolation
    by leveraging the Linux namespaces through a series of practical examples, and
    one of them is listed here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论Docker引擎如何通过一系列实际示例利用Linux命名空间提供进程隔离，其中之一列在此处：
- en: 'Start by launching an `ubuntu` container in an interactive mode using the `docker
    run` subcommand, as shown here:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过使用`docker run`子命令以交互模式启动一个`ubuntu`容器，如下所示：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Proceed to find the process ID of the preceding container `93f5d72c2f21`, using
    the `docker inspect` subcommand in a different terminal:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续在不同的终端中使用`docker inspect`子命令查找前面容器`93f5d72c2f21`的进程ID：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Apparently, from the preceding output, the process ID of the container `93f5d72c2f21`
    is `2543`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，从前面的输出中，容器`93f5d72c2f21`的进程ID是`2543`。
- en: 'Having got the process ID of the container, let''s continue to see how the
    process associated with the container looks in the Docker host, using the `ps`
    command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 得到容器的进程ID后，让我们继续看看与容器关联的进程在Docker主机中的情况，使用`ps`命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Amazing, isn't it? We launched a container with `/bin/bash` as its command,
    and we have the `/bin/bash` process in the Docker host as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 很神奇，不是吗？我们启动了一个带有`/bin/bash`作为其命令的容器，我们在Docker主机中也有`/bin/bash`进程。
- en: 'Let''s go one step further and display the `/proc/2543/environ` file in the
    Docker host using the `cat` command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再进一步，使用`cat`命令在Docker主机中显示`/proc/2543/environ`文件：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding output, `HOSTNAME=93f5d72c2f21` stands out from the other environment
    variables because `93f5d72c2f21` is the container ID, as well as the hostname
    of the container, which we launched previously.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，`HOSTNAME=93f5d72c2f21`从其他环境变量中脱颖而出，因为`93f5d72c2f21`是容器的ID，也是我们之前启动的容器的主机名。
- en: 'Now, let''s get back to the terminal, where we are running our interactive
    container `93f5d72c2f21`, and list all the processes running inside this container
    using the `ps` command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到终端，我们正在运行交互式容器`93f5d72c2f21`，并使用`ps`命令列出该容器内运行的所有进程：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Surprising, isn't it? Inside the container, the process ID of the `bin/bash`
    process is `1`, whereas outside the container, in the Docker host, the process
    ID is `2543`. Besides, the **Parent Process ID** (**PPID**) is `0` (zero).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶，不是吗？在容器内，`bin/bash`进程的进程ID为`1`，而在容器外，即Docker主机中，进程ID为`2543`。此外，**父进程ID**（**PPID**）为`0`（零）。
- en: In the Linux world, every system has just one root process with the PID 1 and
    PPID 0, which is the root of the complete process tree of that system. The Docker
    framework cleverly leverages the Linux PID namespace to spin a completely new
    process tree; thus, the processes running inside a container have no access to
    the parent process of the Docker host. However, the Docker host has a complete
    view of the child PID namespace spun by the Docker engine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux世界中，每个系统只有一个PID为1且PPID为0的根进程，这是该系统完整进程树的根。Docker框架巧妙地利用Linux PID命名空间来生成一个全新的进程树；因此，容器内运行的进程无法访问Docker主机的父进程。然而，Docker主机可以完全查看Docker引擎生成的子PID命名空间。
- en: 'The network namespace ensures that all containers have independent network
    interfaces on the host machine. Also, each container has its own loopback interface.
    Each container talks to the outside world using its own network interface. You
    will be surprised to know that the namespace not only has its own routing table,
    but also has its own iptables, chains, and rules. The author of this chapter is
    running three containers on his host machine. Here, it is natural to expect three
    network interfaces for each container. Let''s run the `docker ps` command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 网络命名空间确保所有容器在主机上拥有独立的网络接口。此外，每个容器都有自己的回环接口。每个容器使用自己的网络接口与外部世界通信。您会惊讶地知道，该命名空间不仅有自己的路由表，还有自己的iptables、链和规则。本章的作者在他的主机上运行了三个容器。在这里，自然期望每个容器有三个网络接口。让我们运行`docker
    ps`命令：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So here, three are three interfaces, one for each container. Let''s get their
    details by running the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里有三个接口，每个容器一个。让我们通过运行以下命令来获取它们的详细信息：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The mount namespace ensures that the mounted filesystem is accessible only
    to the processes within the same namespace. The container A cannot see the mount
    points of the container B. If you want to check your mount points, you need to
    first log in to your container using the `exec` command (described in the next
    section), and then go to `/proc/mounts`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 挂载命名空间确保挂载的文件系统只能被同一命名空间内的进程访问。容器A无法看到容器B的挂载点。如果您想要检查您的挂载点，您需要首先使用`exec`命令（在下一节中描述），然后转到`/proc/mounts`：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's run a container with a mount point that runs as the **Storage Area Network**
    (**SAN**) or **Network Attached Storage** (**NAS**) device and access it by logging
    into the container. This is given to you as an exercise. I have implemented this
    in one of my projects at work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个带有挂载点的容器，作为**存储区域网络**（**SAN**）或**网络附加存储**（**NAS**）设备，并通过登录到容器来访问它。这是给您的一个练习。我在工作中的一个项目中实现了这一点。
- en: There are other namespaces that these containers/processes can be isolated into,
    namely, user, IPC, and UTS. The user namespace allows you to have root privileges
    within the namespace without giving that particular access to processes outside
    the namespace. Isolating a process with the IPC namespace gives it its own interprocess
    communication resources, for example, System V IPC and POSIX messages. The UTS
    namespace isolates the *hostname* of the system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些容器/进程可以被隔离到其他命名空间中，包括用户、IPC和UTS。用户命名空间允许您在命名空间内拥有根权限，而不会将该特定访问权限授予命名空间外的进程。使用IPC命名空间隔离进程会为其提供自己的进程间通信资源，例如System
    V IPC和POSIX消息。UTS命名空间隔离系统的*主机名*。
- en: 'Docker has implemented this namespace using the `clone` system call. On the
    host machine, you can inspect the namespace created by Docker for the container
    (with `pid 3728`):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使用`clone`系统调用实现了这个命名空间。在主机上，您可以检查Docker为容器创建的命名空间（带有`pid 3728`）：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In most industrial deployments of Docker, people are extensively using patched
    Linux kernels to provide specific needs. Also, a few companies have patched their
    kernels to attach arbitrary processes to the existing namespaces because they
    feel that this is the most convenient and reliable way to deploy, control, and
    orchestrate containers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数Docker的工业部署中，人们广泛使用经过修补的Linux内核来满足特定需求。此外，一些公司已经修补了他们的内核，以将任意进程附加到现有的命名空间，因为他们认为这是部署、控制和编排容器最方便和可靠的方式。
- en: Control groups
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制组
- en: Linux containers rely on control groups (cgroups), which not only track groups
    of processes, but also expose metrics of the CPU, memory, and block I/O usage.
    You can access these metrics and obtain network usage metrics as well. Control
    groups are another important components of Linux containers. Control groups are
    around for a while and are initially merged in the Linux kernel code 2.6.24\.
    They ensure that each Docker container will get a fixed amount of memory, CPU,
    and disk I/O, so that any container will not able to bring the host machine down
    at any point of time under any circumstances. Control groups do not play a role
    in preventing one container from being accessed, but they are essential to fending
    off some **Denial of Service** (**DoS**) attacks.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Linux容器依赖于控制组（cgroups），它们不仅跟踪进程组，还公开CPU、内存和块I/O使用情况的指标。您还可以访问这些指标，并获取网络使用情况指标。控制组是Linux容器的另一个重要组件。控制组已经存在一段时间，并最初是在Linux内核代码2.6.24中合并的。它们确保每个Docker容器都将获得固定数量的内存、CPU和磁盘I/O，以便任何容器都无法在任何情况下使主机机器崩溃。控制组不会阻止访问一个容器，但它们对抵御一些**拒绝服务**（**DoS**）攻击至关重要。
- en: On Ubuntu 14.04, `cgroup` is implemented in the `/sys/fs/cgroup` path. The memory
    information of Docker is available at the `/sys/fs/cgroup/memory/docker/` path.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ubuntu 14.04上，`cgroup`实现在`/sys/fs/cgroup`路径中。Docker的内存信息可在`/sys/fs/cgroup/memory/docker/`路径下找到。
- en: Similarly, the CPU details are made available in the `/sys/fs/cgroup/cpu/docker/`
    path.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，CPU详细信息可以在`/sys/fs/cgroup/cpu/docker/`路径中找到。
- en: Let's find out the maximum limit of memory that can be consumed by the container
    (`41668be6e513e845150abd2dd95dd574591912a7fda947f6744a0bfdb5cd9a85`).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出容器（`41668be6e513e845150abd2dd95dd574591912a7fda947f6744a0bfdb5cd9a85`）可以消耗的最大内存限制。
- en: 'For this, you can go to the `cgroup` memory path and check for the `memory.max.usage`
    file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您可以转到`cgroup`内存路径，并检查`memory.max.usage`文件：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, by default, any container can use up to 13.18 MB memory only.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，默认情况下，任何容器只能使用最多13.18 MB的内存。
- en: 'Similarly, CPU parameters can be found in the following path:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，CPU参数可以在以下路径中找到：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Traditionally, Docker runs only one process inside the containers. So typically,
    you have seen people running three containers each for PHP, nginx, and MySQL.
    However, this is a myth. You can run all your three processes inside a single
    container.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Docker在容器内部只运行一个进程。因此，通常情况下，您会看到人们为PHP、nginx和MySQL分别运行三个容器。然而，这是一个谬论。您可以在单个容器内运行所有三个进程。
- en: Docker isolates many aspects of the underlying host from an application running
    in a container without the root privileges. However, this separation is not as
    strong as that of virtual machines, which run independent OS instances on top
    of a hypervisor without sharing the kernel with the underlying OS. It's not a
    good idea to run applications with different security profiles as containers on
    the same host, but there are security benefits to encapsulate different applications
    into containerized applications that would otherwise run directly on the same
    host.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在不具备root权限的情况下，隔离了容器中运行的应用程序与底层主机的许多方面。然而，这种分离并不像虚拟机那样强大，虚拟机在hypervisor之上独立运行独立的操作系统实例，而不与底层操作系统共享内核。在同一主机上以容器化应用程序的形式运行具有不同安全配置文件的应用程序并不是一个好主意，但将不同的应用程序封装到容器化应用程序中具有安全性的好处，否则这些应用程序将直接在同一主机上运行。
- en: Debugging a containerized application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试容器化应用程序
- en: Computer programs (software) sometimes fail to behave as expected. This is due
    to faulty code or due to the environmental changes between the development, testing,
    and deployment systems. Docker container technology eliminates the environmental
    issues between development, testing, and deployment as much as possible by containerizing
    all the application dependencies. Nonetheless, there could be still anomalies
    due to faulty code or variations in the kernel behavior, which needs debugging.
    Debugging is one of the most complex processes in the software engineering world
    and it becomes much more complex in the container paradigm because of the isolation
    techniques. In this section, we are going to learn a few tips and tricks to debug
    a containerized application using the tools native to Docker, as well as the tools
    provided by external sources.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序（软件）有时无法按预期行为。这是由于错误的代码或由于开发、测试和部署系统之间的环境变化。Docker容器技术通过将所有应用程序依赖项容器化，尽可能消除开发、测试和部署之间的环境问题。尽管如此，由于错误的代码或内核行为的变化，仍可能出现异常，需要进行调试。调试是软件工程世界中最复杂的过程之一，在容器范式中变得更加复杂，因为涉及到隔离技术。在本节中，我们将学习使用Docker本机工具以及外部提供的工具来调试容器化应用程序的一些技巧和窍门。
- en: 'Initially, many people in the Docker community individually developed their
    own debugging tools, but later Docker started supporting native tools, such as
    `exec`, `top`, `logs`, `events`, and many more. In this section, we will dive
    deep into the following Docker tools:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Docker社区中的许多人单独开发了自己的调试工具，但后来Docker开始支持本机工具，如`exec`、`top`、`logs`、`events`等。在本节中，我们将深入探讨以下Docker工具：
- en: '`exec`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec`'
- en: '`ps`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ps`'
- en: '`top`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`'
- en: '`stats`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats`'
- en: '`events`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events`'
- en: '`logs`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logs`'
- en: The Docker exec command
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker exec命令
- en: The `docker exec` command provided the much-needed help to users, who are deploying
    their own web servers or other applications running in the background. Now, it
    is not necessary to log in to run the SSH daemon in the container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker exec`命令为部署自己的Web服务器或在后台运行的其他应用程序的用户提供了非常需要的帮助。现在，不需要登录到容器中运行SSH守护程序。'
- en: 'First, run the `docker ps -a` command to get the container ID:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，运行`docker ps -a`命令以获取容器ID：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, run the `docker exec` command to log in to the container.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行`docker exec`命令以登录到容器中。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It is important to note that the `docker exec` command can only access the
    running containers, so if the container stops functioning, then you need to restart
    the stopped container in order to proceed. The `docker exec` command spawns a
    new process in the target container using the Docker API and CLI. So if you run
    the `pe -aef` command inside the target container, it looks like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`docker exec` 命令只能访问正在运行的容器，因此如果容器停止运行，则需要重新启动已停止的容器才能继续。`docker exec`
    命令使用 Docker API 和 CLI 在目标容器中生成一个新进程。因此，如果你在目标容器内运行 `pe -aef` 命令，结果如下：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, `python app.y` is the application that is already running in the target
    container, and the `docker exec` command has added the `bash` process inside the
    container. If you run `kill -9 pid(45)`, you will be automatically logged out
    of the container.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`python app.y` 是已在目标容器中运行的应用程序，`docker exec` 命令已在容器内添加了 `bash` 进程。如果你运行 `kill
    -9 pid(45)`，你将自动退出容器。
- en: If you are an enthusiastic developer, and you want to enhance the `exec` functionality,
    you can refer to [https://github.com/chris-rock/docker-exec](https://github.com/chris-rock/docker-exec).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一名热情的开发者，并且想增强 `exec` 功能，你可以参考 [https://github.com/chris-rock/docker-exec](https://github.com/chris-rock/docker-exec)。
- en: It is recommended that you use the `docker exec` command only for monitoring
    and diagnostic purposes, and I personally believe in the concept of one process
    per container, which is one of the best practices widely accentuated.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 建议仅将 `docker exec` 命令用于监视和诊断目的，我个人认为一个容器一个进程的概念是最佳实践之一。
- en: The Docker ps command
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker ps 命令
- en: The `docker ps` command, which is available inside the container, is used to
    see the status of the process. This is similar to the standard `ps` command in
    the Linux environment and is *not* a `docker ps` command that we run on the Docker
    host machine.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker ps` 命令可在容器内部使用，用于查看进程的状态。这类似于 Linux 环境中的标准 `ps` 命令，*不*是我们在 Docker 主机上运行的
    `docker ps` 命令。'
- en: 'This command runs inside the Docker container:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在 Docker 容器内运行：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use `ps --help <simple|list|output|threads|misc|all>` or `ps --help <s|l|o|t|m|a>`
    for additional help text.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ps --help <simple|list|output|threads|misc|all>` 或 `ps --help <s|l|o|t|m|a>`
    获取额外的帮助文本。
- en: The Docker top command
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker top 命令
- en: 'You can run the `top` command from the Docker host machine using the following
    command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令从 Docker 主机机器上运行 `top` 命令：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This gives a list of the running processes of a container without logging into
    the container, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出容器的运行进程，而无需登录到容器中，如下所示：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The Docker `top` command provides information about the CPU, memory, and swap
    usage if you run it inside a Docker container:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Docker `top` 命令提供有关 CPU、内存和交换使用情况的信息，如果你在 Docker 容器内运行它：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In case you get the error `error - TERM environment variable not set` while
    running the `top` command inside the container, perform the following steps to
    resolve it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在容器内运行 `top` 命令时出现 `error - TERM environment variable not set` 错误，请执行以下步骤解决：
- en: 'Run the `echo $TERM` command. You will get the result as `dumb`. Then, run
    the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `echo $TERM` 命令。你会得到 `dumb` 作为结果。然后运行以下命令：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will resolve the error.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解决错误。
- en: The Docker stats command
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker stats 命令
- en: 'The Docker `stats` command provides you with the capability to view the memory,
    CPU, and the network usage of a container from a Docker host machine, as illustrated
    here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Docker `stats` 命令使你能够从 Docker 主机机器上查看容器的内存、CPU 和网络使用情况，如下所示：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can run the `stats` command to also view the usage for multiple containers:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以运行 `stats` 命令来查看多个容器的使用情况：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the latest release of Docker 1.5, Docker provides you access to container
    statistics *read only* parameters. This will streamline the CPU, memory, network
    IO, and block IO of your containers. This helps you choose the resource limits
    and also in profiling. The Docker stats utility provides you with these resource
    usage details only for running containers. You can get detailed information using
    the end point APIs at [https://docs.docker.com/reference/api/docker_remote_api_v1.17/#inspect-a-container](https://docs.docker.com/reference/api/docker_remote_api_v1.17/#inspect-a-container).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在最新的Docker 1.5版本中，Docker为您提供了对容器统计信息的*只读*访问权限。这将简化容器的CPU、内存、网络IO和块IO。这有助于您选择资源限制，以及进行性能分析。Docker
    stats实用程序仅为正在运行的容器提供这些资源使用详细信息。您可以使用端点API在[https://docs.docker.com/reference/api/docker_remote_api_v1.17/#inspect-a-container](https://docs.docker.com/reference/api/docker_remote_api_v1.17/#inspect-a-container)获取详细信息。
- en: Docker stats is originally taken from Michael Crosby's code contribution, which
    can be accessed at [https://github.com/crosbymichael](https://github.com/crosbymichael).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Docker stats 最初是从Michael Crosby的代码贡献中获取的，可以在[https://github.com/crosbymichael](https://github.com/crosbymichael)上访问。
- en: The Docker events command
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker事件命令
- en: 'Docker containers will report the following real-time events: `create`, `destroy`,
    `die`, `export`, `kill`, `omm`, `pause`, `restart`, `start`, `stop`, and `unpause`.
    The following are a few examples that illustrate how to use these commands:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器将报告以下实时事件：`create`、`destroy`、`die`、`export`、`kill`、`omm`、`pause`、`restart`、`start`、`stop`和`unpause`。以下是一些示例，说明如何使用这些命令：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The Docker image will also report the untag and delete events.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像还将报告取消标记和删除事件。
- en: Using multiple filters will be handled as an `AND` operation; for example, `--filter
    container= a245253db38b --filter event=start` will display events for the container
    `a245253db38b` and the event type is start.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个过滤器将被视为“AND”操作；例如，`--filter container= a245253db38b --filter event=start`将显示容器`a245253db38b`的事件和事件类型为start的事件。
- en: Currently, the supported filters are container, event, and image.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，支持的过滤器有container、event和image。
- en: The Docker logs command
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker日志命令
- en: This command fetches the log of a container without logging into the container.
    It batch-retrieves logs present at the time of execution. These logs are the output
    of `STDOUT` and `STDERR`. The general usage is shown in `docker logs [OPTIONS]
    CONTAINER`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令获取容器的日志，而无需登录到容器中。它批量检索执行时存在的日志。这些日志是`STDOUT`和`STDERR`的输出。通用用法显示在`docker
    logs [OPTIONS] CONTAINER`中。
- en: 'The `–follow` option will continue to provide the output till the end, `-t`
    will provide the timestamp, and `--tail= <number of lines>` will show the number
    of lines of the log messages of your container:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`–follow`选项将继续提供输出直到结束，`-t`将提供时间戳，`--tail= <number of lines>`将显示容器日志消息的行数：'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We also used the `docker logs` utility in [Chapter 2](ch02.html "Chapter 2. Handling
    Docker Containers"), *Handling Docker Containers* and [Chapter 6](ch06.html "Chapter 6. Running
    Services in a Container"), *Running Services in a Container*, to view the logs
    of our containers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在[第2章](ch02.html "Chapter 2. Handling Docker Containers")和[第6章](ch06.html
    "Chapter 6. Running Services in a Container")中使用了`docker logs`实用程序，以查看我们的容器的日志。
- en: Installing and using nsenter
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用nsenter
- en: In any commercial Docker deployments, you may use various containers, such as
    web application, database, and so on. However, you need to access these containers
    in order to modify the configuration or debug/troubleshoot the issues. A simple
    solution for this problem is to run an SSH server in each container. It is a not
    good way to access the machines due to unanticipated security implications. However,
    if you are working in any one of the world-class IT companies, such as IBM, DELL,
    HP, and so on, your security compliance guy will never allow you to use SSH to
    connect to machines.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何商业Docker部署中，您可能会使用各种容器，如Web应用程序、数据库等。但是，您需要访问这些容器以修改配置或调试/排除故障。这个问题的一个简单解决方案是在每个容器中运行一个SSH服务器。这不是一个访问机器的好方法，因为会带来意想不到的安全影响。然而，如果您在IBM、戴尔、惠普等世界一流的IT公司工作，您的安全合规人员绝不会允许您使用SSH连接到机器。
- en: 'So, here is the solution. The `nsenter` tool provides you access to log in
    to your container. Note that `nsenter` will be first deployed as a Docker container
    only. Using this deployed `nsenter`, you can access your container. Follow these
    steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是解决方案。`nsenter`工具为您提供了登录到容器的访问权限。请注意，`nsenter`将首先作为Docker容器部署。使用部署的`nsenter`，您可以访问您的容器。按照以下步骤进行：
- en: 'Let''s run a simple web application as a container:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行一个简单的Web应用程序作为一个容器：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Test the web container:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试Web容器：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Install `nsenter` and run it as a container:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`nsenter`并将其作为一个容器运行：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, `nsenter` is up and running as a container.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`nsenter`作为一个容器正在运行。
- en: Use the nsenter container to log in to the container (`a245253db38b`), that
    we created in step 1.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用nsenter容器登录到我们在步骤1中创建的容器（`a245253db38b`）。
- en: 'Run the following command to get the `PID` value:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以获取`PID`值：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, access the web container:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，访问Web容器：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Then, you can log in and start accessing your container. Accessing your container
    in this way will make your security and compliance professionals happy, and they
    will feel relaxed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以登录并开始访问您的容器。以这种方式访问您的容器将使您的安全和合规专业人员感到满意，他们会感到放松。
- en: Since Docker 1.3, the Docker exec is a supported tool used for logging into
    containers.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自Docker 1.3以来，Docker exec是一个支持的工具，用于登录到容器中。
- en: The `nsenter` tool doesn't enter cgroups and therefore evades resource limitations.
    The potential benefit of this would be debugging and external audit, but for a
    remote access, `docker exec` is the current recommended approach.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`nsenter`工具不进入cgroups，因此规避了资源限制。这样做的潜在好处是调试和外部审计，但对于远程访问，`docker exec`是当前推荐的方法。'
- en: The `nsenter` tool is tested only on Intel 64-bit platforms. You cannot run
    `nsenter` inside the container that you want to access, and hence, you need to
    run `nsenter` on host machines only. By running `nsenter` on a host machine, you
    can access all of the containers of that host machine. Also, you cannot use the
    running `nsenter` on a particular host, say host A to access the containers on
    host B.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`nsenter`工具仅在Intel 64位平台上进行测试。您不能在要访问的容器内运行`nsenter`，因此只能在主机上运行`nsenter`。通过在主机上运行`nsenter`，您可以访问该主机上的所有容器。此外，您不能使用在特定主机A上运行的`nsenter`来访问主机B上的容器。'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Docker provides you with the isolation of containers using the Linux container
    technology, such as LXC and now `libcontainer`. Libcontainer is Docker's own implementation
    in the Go programming language to access the kernel namespace and control groups.
    This namespace is used for process-level isolation, while control groups is used
    for restricting the resource usage of running containers. Since the containers
    run as independent processes directly over the Linux kernel, the **generally available**
    (**GA**) debugging tools are not fit enough to work inside the containers to debug
    the containerized processes. Docker now provides you with a rich set of tools
    to effectively debug the container, as well as processes inside the container
    itself. Docker `exec` will allow you to log in to the container without running
    an SSH daemon in the container.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Docker利用Linux容器技术（如LXC和现在的`libcontainer`）为您提供容器的隔离。Libcontainer是Docker在Go编程语言中的自己的实现，用于访问内核命名空间和控制组。这个命名空间用于进程级别的隔离，而控制组用于限制运行容器的资源使用。由于容器作为独立进程直接在Linux内核上运行，因此**通常可用**（**GA**）的调试工具不足以在容器内部工作以调试容器化的进程。Docker现在为您提供了丰富的工具集，以有效地调试容器，以及容器内部的进程。Docker
    `exec` 将允许您登录到容器，而无需在容器中运行SSH守护程序。
- en: Docker `stats` provides information about the container's memory and CPU usage.
    Docker `events` reports the events, such as create, destroy, kill, and so on.
    Similarly, Docker `logs` fetch the logs from the container without logging into
    the container.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Docker `stats` 提供有关容器内存和 CPU 使用情况的信息。Docker `events` 报告事件，比如创建、销毁、杀死等。同样，Docker
    `logs` 从容器中获取日志，而无需登录到容器中。
- en: Debugging is the foundation that can be used to strategize other security vulnerabilities
    and holes. The next chapter is therefore incorporated to expound the plausible
    security threats of Docker containers and how they can be subdued with a variety
    of security approaches, automated tools, best practices, key guidelines, and metrics.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是可以用来制定其他安全漏洞和漏洞的基础。因此，下一章将详细阐述Docker容器的可能安全威胁，以及如何通过各种安全方法、自动化工具、最佳实践、关键指南和指标来抑制这些威胁。
