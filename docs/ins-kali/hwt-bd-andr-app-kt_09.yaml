- en: 9\. Unit Tests and Integration Tests with JUnit, Mockito, and Espresso
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 使用JUnit、Mockito和Espresso进行单元测试和集成测试
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you will learn about testing on the Android platform and how
    to create unit tests, integration tests, and UI tests. You will see how to create
    each of these types of tests, analyze how it runs, and work with frameworks such
    as JUnit, Mockito, Robolectric, and Espresso. You will also learn about test-driven
    development, a software development practice that prioritizes tests over implementation.
    By the end of this chapter, you will be able to combine your new testing skills
    to work on a realistic project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习关于在Android平台上进行测试以及如何创建单元测试、集成测试和UI测试。你将看到如何创建这些类型的测试，分析它们的运行方式，并使用JUnit、Mockito、Robolectric和Espresso等框架进行工作。你还将学习关于测试驱动开发，这是一种将测试置于实现之上的软件开发实践。通过本章的学习，你将能够将你的新测试技能结合起来应用到一个真实项目中。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In previous chapters, you learned about how to load background data and display
    it in the UI and how to set up API calls to retrieve data. But how can you be
    sure that things work well? What if you're in a situation where you have to fix
    a bug in a project that you haven't interacted much with in the past? How can
    you know that the fix you are applying won't trigger another bug? The answer to
    these questions is through tests.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，你学习了如何加载背景数据并在用户界面中显示它，以及如何设置API调用来检索数据。但是你如何确保一切正常？如果你处于一个你过去没有太多互动的项目中需要修复一个错误的情况下怎么办？你如何知道你所应用的修复不会触发另一个错误？这些问题的答案是通过测试。
- en: 'In this chapter, we will analyze the types of tests developers can write and
    we will look at available testing tools to ease the testing experience. The first
    issue that arises is the fact that desktops or laptops, which have different operating
    systems, are used to develop mobile applications. This implies that the tests
    also have to be run on the device or emulator, which will slow the tests down.
    In order to solve this issue, we are presented with two types of tests: `test`
    folder and will run on your machine, and `androidTest` folder and will run on
    the device or emulator.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将分析开发人员可以编写的测试类型，并查看可用的测试工具以简化测试体验。首先出现的问题是台式机或笔记本电脑使用不同的操作系统来开发移动应用。这意味着测试也必须在设备或模拟器上运行，这将减慢测试的速度。为了解决这个问题，我们有两种类型的测试：`test`文件夹将在你的机器上运行，而`androidTest`文件夹将在设备或模拟器上运行。
- en: 'Both of these tests rely on the Java **JUnit** library, which helps developers
    set up their tests and group them in different categories. It also provides different
    configuration options, as well as extensions that other libraries can build upon.
    We will also look into the testing pyramid, which helps guide developers as to
    how to structure their tests. We will start at the bottom of the pyramid, which
    is represented by **unit tests**, move upward through **integration tests**, and
    finally reach the top, which is represented by **end-to-end tests** (UI tests).
    You''ll have the opportunity to learn about the tools that aid in writing each
    of these types of tests:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种测试都依赖于Java的**JUnit**库，它帮助开发人员设置他们的测试并将它们分组到不同的类别中。它还提供了不同的配置选项，以及其他库可以构建的扩展。我们还将研究测试金字塔，它帮助指导开发人员如何组织他们的测试。我们将从金字塔的底部开始，代表着**单元测试**，向上移动通过**集成测试**，最终达到顶部，代表着**端到端测试**（UI测试）。你将有机会学习到帮助编写每种类型测试的工具：
- en: '**Mockito** and **mockito-kotlin**, which help mainly in unit tests and are
    useful for creating mocks or test double in which we can manipulate inputs so
    that we can assert different scenarios. (A mock or test double is an object that
    mimics the implementation of another object. Every time a test interacts with
    mocks, you can specify the behavior of these interactions.)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mockito**和**mockito-kotlin**主要帮助进行单元测试，并且对于创建模拟或测试替身非常有用，我们可以操纵输入以便断言不同的场景。（模拟或测试替身是一个模仿另一个对象实现的对象。每当一个测试与模拟对象交互时，你可以指定这些交互的行为。）'
- en: '**Robolectric**, an open source library that brings the Android framework onto
    your machine, allowing you to test activities and fragments locally and not on
    the emulator. This can be used for both unit tests and integration tests.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Robolectric**是一个开源库，它将Android框架引入你的机器，允许你在本地测试活动和片段，而不是在模拟器上。这可以用于单元测试和集成测试。'
- en: '`EditText` components, and so on) and assertions (verifying that views display
    certain text, are currently being displayed to the user, are enabled, and so on)
    on an app''s UI in an instrumented test.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EditText`组件等）和断言（验证视图显示特定文本，当前显示给用户，启用等）在应用的UI中的仪器测试。'
- en: In this chapter, we will also take a look at **test-driven development** (**TDD**).
    This is a software development process where tests take priority. A simple way
    of describing it is as writing the test first. We will analyze how this approach
    is taken when developing features for Android applications. One of the things
    to keep in mind is that in order for an application to be properly tested, its
    classes must be properly written. One way to do this is by clearly defining the
    boundaries between your classes and splitting them based on the tasks you want
    them to accomplish. Once you have achieved this, you can also rely on the **dependency
    inversion** and **dependency injection** principles when writing your classes.
    When these principles are applied properly, you should be able to inject fake
    objects into the subjects of your tests and manipulate the inputs to suit your
    testing scenario. Dependency injection also helps when writing instrumented tests
    to help you swap modules that make network calls with local data in order to make
    your tests independent of external factors, such as networks. Instrumented tests
    are tests that run on a device or an emulator. The "instrument" keyword comes
    from the instrumentation framework, which assembles these tests and then executes
    them on the device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将介绍**测试驱动开发**（**TDD**）。这是一个测试优先的软件开发过程。简单来说，就是先编写测试。我们将分析在为Android应用程序开发功能时采用这种方法。要记住的一件事是，为了正确测试应用程序，其类必须正确编写。一种方法是清晰地定义类之间的边界，并根据您希望它们完成的任务对它们进行拆分。一旦您做到了这一点，您还可以在编写类时依赖于**依赖反转**和**依赖注入**原则。当这些原则得到正确应用时，您应该能够将虚假对象注入到测试对象中，并操纵输入以适应您的测试场景。依赖注入还有助于编写插装测试，以帮助您用本地数据替换进行网络调用的模块，以使您的测试独立于网络等外部因素。插装测试是在设备或模拟器上运行的测试。
    "插装"关键字来自插装框架，该框架组装这些测试，然后在设备上执行它们。
- en: 'Ideally, each application should have three types of tests:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每个应用程序应该有三种类型的测试：
- en: '**Unit tests**: These are local tests that validate individual classes and
    methods. They should represent the majority of your tests and they should be fast,
    easy to debug, and easy to maintain. They are also known as small tests.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：这些是验证单个类和方法的本地测试。它们应该占大多数测试，并且它们应该快速、易于调试和易于维护。它们也被称为小型测试。'
- en: '**Integration tests**: These are either local tests with Robolectric, or instrumented
    tests that validate interactions between your app''s modules and components. These
    are slower and more complex than unit tests. The increase in complexity is due
    to the interaction between the components. These are also known as medium tests.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：这些是使用Robolectric的本地测试，或验证应用程序模块和组件之间交互的插装测试。这些比单元测试更慢，更复杂。复杂性的增加是由于组件之间的交互。这些也被称为中型测试。'
- en: '**UI tests (end-to-end tests)**: These are instrumented tests that verify complete
    user journeys and scenarios. This makes them more complex and harder to maintain;
    they should represent the smallest number of your total test number. These are
    also known as large tests.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI测试（端到端测试）**：这些是验证完整用户旅程和场景的插装测试。这使它们更复杂，更难以维护；它们应该代表您总测试数量中的最少部分。这些也被称为大型测试。'
- en: 'In the following figure, you can observe the **testing pyramid**. The recommendation
    from Google is to keep a ratio of 70:20:10 (unit tests: integration tests: UI
    tests) for your tests:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，您可以观察到**测试金字塔**。Google的建议是保持70:20:10（单元测试：集成测试：UI测试）的比例：
- en: '![Figure 9.1: Testing pyramid'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1：测试金字塔'
- en: '](img/B15216_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_09_01.jpg)'
- en: 'Figure 9.1: Testing pyramid'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：测试金字塔
- en: As mentioned in the previous section, a unit test is a test that verifies a
    small portion of your code, and the majority of your tests should be unit tests
    that should cover all sorts of scenarios (success, errors, limits, and more).
    Ideally, these tests should be local, but there are a few exceptions where you
    can make them instrumented. Those cases are rare and should be limited to when
    you want to interact with specific hardware of the device.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，单元测试是验证代码的一小部分的测试，大多数测试应该是覆盖各种场景（成功、错误、限制等）的单元测试。理想情况下，这些测试应该是本地的，但也有一些例外情况，您可以将它们制作成插装测试。这些情况很少，应该限制在您想要与设备的特定硬件交互时。
- en: JUnit
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit
- en: 'JUnit is a framework for writing unit tests both in Java and in Android. It
    is responsible for how tests are executed, allowing developers to configure their
    tests. It offers a multitude of features, such as the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit是一个用于在Java和Android中编写单元测试的框架。它负责测试的执行方式，允许开发人员配置他们的测试。它提供了许多功能，例如以下内容：
- en: '`@Before` and `@After` annotations.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Before`和`@After`注解。'
- en: '**Assertions**: These are used to verify the result of an operation against
    an expected value.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言**：用于验证操作的结果与预期值是否一致。'
- en: '**Rules**: These allow developers to set up inputs that are common for multiple tests.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则**：这些允许开发人员设置多个测试的常见输入。'
- en: '**Runners**: Using these, you can specify how the tests can be executed.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行器**：使用这些，您可以指定如何执行测试。'
- en: '**Parameters**: These allow a test method to be executed with multiple inputs.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**：这些允许使用多个输入执行测试方法。'
- en: '**Orderings**: These specify in which order the tests should be executed.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序**：这些指定测试应该以何种顺序执行。'
- en: '**Matchers**: These allow you to define patterns that can then be used to validate
    the results of the subject of your tests, or help you control the behavior of mocks.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匹配器**：这些允许您定义模式，然后用于验证测试对象的结果，或者帮助您控制模拟的行为。'
- en: 'In Android Studio, when a new project is created, the `app` module comes with
    the JUnit library in Gradle. This should be visible in `app/build.gradle`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中，创建新项目时，`app`模块会在Gradle中带有JUnit库。这应该在`app/build.gradle`中可见：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s look at the following class that we need to test:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们需要测试的以下类：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This method should return the factorial of the number `n`. We can start with
    a simple test that checks the value. In order to create a new unit test, you will
    need to create a new class in the `test` directory of your project. The typical
    convention most developers follow is to add the `Test` suffix to your class name
    and place it under the same package in the `test` directory. For example, `com.mypackage.ClassA`
    will have the test in `com.mypackage.ClassATest`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法应该返回数字 `n` 的阶乘。我们可以从一个检查值的简单测试开始。为了创建一个新的单元测试，您需要在项目的 `test` 目录中创建一个新的类。大多数开发人员遵循的典型约定是在
    `test` 目录中的相同包下为您的类名称添加 `Test` 后缀，并将其放在相同的包下。例如，`com.mypackage.ClassA` 将在 `com.mypackage.ClassATest`
    中进行测试：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this test, you can see that we initialize the class under test, and the
    test method itself is annotated with the `@Test` annotation. The test method itself
    will assert that `(3!)==6`. The assertion is done using the `assertEquals` method
    from the JUnit library. A common practice in development is to split the test
    into three areas, also known as AAA (Arrange-Act-Assert):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，您可以看到我们初始化了被测试的类，测试方法本身使用了 `@Test` 注解。测试方法本身将断言 `(3!)==6`。断言使用了 JUnit
    库中的 `assertEquals` 方法。开发中的一个常见做法是将测试分为三个区域，也称为 AAA（Arrange-Act-Assert）：
- en: Arrange - Where the inputs are initialized
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arrange - 初始化输入的地方
- en: Act - Where the method under test is called
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Act - 调用被测试方法的地方
- en: Assert - Where the verification is done
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Assert - 验证的地方
- en: We can write another test to make sure that the value is correct, but that would
    mean that we end up duplicating the code. We can now attempt to write a parameterized
    test. In order to do this, we will need to use the parameterized test runner.
    The preceding test has its own built-in runner provided by JUnit. The parameterized
    runner will run the test repeatedly for different values that we provide, and
    it will look like the following. (Please note that import statements have been
    removed for brevity.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写另一个测试来确保值是正确的，但这意味着我们最终会重复代码。现在我们可以尝试编写一个参数化测试。为了做到这一点，我们需要使用参数化测试运行器。前面的测试有其自己的内置运行器，由
    JUnit 提供。参数化运行器将为我们提供的不同值重复运行测试，并且看起来像下面这样。（请注意，出于简洁起见，已删除了导入语句。）
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will actually run six tests. The usage of the `@Parameterized` annotation
    tells JUnit that this is a test with multiple parameters, and also allows us to
    add a constructor for the test that will represent the input value for our factorial
    function and the output. We then defined a collection of parameters with the use
    of the `@Parameterized.Parameters` annotation. Each parameter for this test is
    a separate list containing the input and the expected output. When JUnit runs
    this test, it will run a new instance for each parameter and then execute the
    test method. This will produce five successes and one failure for when we test
    *0!*, meaning that we have found a bug. We never accounted for a situation when
    *n = 0*. Now, we can go back to our code to fix the failure. We can do this by
    replacing the `reduce` function, which doesn''t allow us to specify an initial
    value with a `fold` function, which allows us to give the initial value of `1`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上将运行六个测试。`@Parameterized` 注解的使用告诉 JUnit 这是一个具有多个参数的测试，并且还允许我们为测试添加一个构造函数，该构造函数将表示我们的阶乘函数的输入值和输出。然后我们使用
    `@Parameterized.Parameters` 注解定义了一组参数。这个测试的每个参数都是一个单独的列表，包含输入和期望的输出。当 JUnit 运行这个测试时，它将为每个参数运行一个新的实例，然后执行测试方法。这将产生五个成功和一个失败的结果，当我们测试
    *0!* 时会失败，这意味着我们发现了一个错误。我们从未考虑 *n = 0* 的情况。现在，我们可以回到我们的代码来修复失败。我们可以通过用 `fold`
    函数替换 `reduce` 函数来做到这一点，`fold` 函数允许我们指定初始值为 `1`：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the tests now, they will all pass. But that doesn''t mean we are done
    here. There are many things that can go wrong. What happens if `n` is a negative
    number? Since we are dealing with factorials, we may get really large numbers.
    We are working with integers in our examples, which means that the integer will
    overflow after *12!*. Normally, we would create new test methods in the `MyClassTest`
    class, but since the parametrized runner is used, all of our new methods will
    be run multiple times, which will cost us time, so we will create a new test class
    to check our errors:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行测试，它们都会通过。但这并不意味着我们在这里就完成了。有很多事情可能会出错。如果 `n` 是一个负数会发生什么？由于我们在处理阶乘，可能会得到非常大的数字。在我们的示例中，我们使用整数，这意味着整数在
    *12!* 之后会溢出。通常情况下，我们会在 `MyClassTest` 类中创建新的测试方法，但由于使用了参数化运行器，我们所有的新方法都会运行多次，这将花费我们的时间，因此我们将创建一个新的测试类来检查我们的错误：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This would lead to the following change in the class that was tested:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致被测试的类发生以下变化。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s solve the issue with very large factorials. We can use the `BigInteger`
    class, which is capable of holding large numbers. We can update the test as follows
    (import statements not shown):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解决非常大的阶乘的问题。我们可以使用 `BigInteger` 类，它能够容纳大数字。我们可以更新测试如下（未显示导入语句）：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The class under test now looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在被测试的类看起来像这样：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding example, we have implemented the factorial with the help of
    `IntArray`. This implementation is based more on Kotlin''s ability to chain methods
    together, but it has one drawback: the fact that it uses memory for the array
    when it doesn''t need to. We only care about the factorial and not storing all
    the numbers from 1 to *n*. We can change the implementation to a simple `for`
    loop and use the tests to guide us during the refactoring process. We can observe
    here two benefits of having tests in your application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用 `IntArray` 实现了阶乘。这个实现更多地基于 Kotlin 能够将方法链接在一起的能力，但它有一个缺点：当不需要时它使用了数组的内存。我们只关心阶乘，而不是存储从
    1 到 *n* 的所有数字。我们可以将实现更改为一个简单的 `for` 循环，并在重构过程中使用测试来指导我们。在您的应用程序中有测试的两个好处可以在这里观察到：
- en: They serve as updated documentation of how the features should be implemented.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们作为更新后的文档，说明了特性应该如何实现。
- en: They guide us when refactoring code by maintaining the same assertion and detecting
    whether new changes to the code broke it.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio测试技巧
- en: 'Let''s update the code to get rid of `IntArray`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新代码，摆脱`IntArray`：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we modify the `factorial` function, as in the preceding example, and run
    the tests, we should see them all passing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们修改`factorial`函数，如前面的示例所示，并运行测试，我们应该看到它们都通过了。
- en: 'In certain situations, your tests will use a resource that is common to the
    test or the application (databases, files, and so on). Ideally, this shouldn''t
    happen for unit tests, but there can always be exceptions to this. Let''s analyze
    that scenario and see how JUnit can aid us with it. We will add a `companion`
    object, which will store the result, in order to simulate this behavior:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您的测试将使用测试或应用程序常见的资源（数据库、文件等）。理想情况下，这不应该发生在单元测试中，但总会有例外。让我们分析一下这种情况，看看JUnit如何帮助我们。我们将添加一个`companion`对象，它将存储结果，以模拟这种行为：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we execute the tests for the preceding code, we will start seeing that some
    will fail. That''s because after the first tests execute the `factorial` function,
    the result will have the value of the executed tests, and when a new test is executed,
    the result of the factorial will be multiplied by the previous value of the result.
    Normally, this would be good because the tests tell us that we are doing something
    wrong and we should remedy this, but for this example, we will address the issue
    directly in the tests:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在重构代码时通过保持相同的断言并检测新的代码更改是否破坏了它来指导我们。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the tests, we''ve added two methods with the `@Before` and `@After` annotations.
    When these methods are introduced, JUnit will change the execution flow as follows:
    all methods with the `@Before` annotation will be executed, a method with the
    `@Test` annotation will be executed, and then all methods with the `@After` annotation
    will be executed. This process will repeat for every `@Test` method in your class.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中，我们添加了两个带有`@Before`和`@After`注解的方法。当引入这些方法时，JUnit将按以下方式更改执行流程：所有带有`@Before`注解的方法将被执行，将执行带有`@Test`注解的方法，然后将执行所有带有`@After`注解的方法。这个过程将对类中的每个`@Test`方法重复执行。
- en: 'If you find yourself repeating the same statements in your `@Before` method,
    you can consider using `@Rule` in order to remove the repetition. We can set up
    a test rule for the preceding example. Test rules should be in the `test` or `androidTest`
    packages, because their usage is only limited to testing. They tend to be used
    in multiple tests, so you can place your rules in a `rules` package (import statements
    not shown):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现自己在`@Before`方法中重复相同的语句，可以考虑使用`@Rule`来消除重复。我们可以为前面的示例设置一个测试规则。测试规则应该在`test`或`androidTest`包中，因为它们的使用仅限于测试。它们往往用于多个测试中，因此可以将规则放在`rules`包中（未显示导入语句）：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding example, we can see that the rule will implement `TestRule`,
    which in turn comes with the `apply()` method. We then create a new `Statement`
    object that will execute the base statement (the test itself) and reset the value
    of the result before and after the statement. We can now modify the test as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行前面代码的测试，将开始看到一些测试失败。这是因为在第一个测试执行`factorial`函数后，结果将具有执行测试的值，当执行新测试时，阶乘的结果将乘以结果的先前值。通常，这是好的，因为测试告诉我们我们做错了什么，我们应该纠正这个问题，但是对于这个示例，我们将直接在测试中解决这个问题：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In order to add the rule to the test, we use the `@Rule` annotation. Since the
    test is written in Kotlin, we are using `@JvmField` to avoid generating getters
    and setters because `@Rule` requires a public field and not a method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将规则添加到测试中，我们使用`@Rule`注解。由于测试是用Kotlin编写的，我们使用`@JvmField`来避免生成getter和setter，因为`@Rule`需要一个公共字段而不是方法。
- en: Android Studio Testing Tips
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '![图9.2：Android Studio中的测试输出'
- en: 'Android Studio comes with a good set of shortcuts and visual tools to help
    with testing. If you want to create a new test for your class or go to existing
    tests for your class, you can use the *Ctrl* + *Shift* + *T* (Windows) or *Command*
    + *Shift* + *T* (Mac) shortcut. In order to run tests, there are multiple options:
    right-click your file or the package and select the `Run Tests in...` option,
    or if you want to run a test independently, you can go to the particular test
    method and select the green icon either to the top of the class, which will execute
    all the tests in the class; or, for an individual test, you can click the green
    icon next to the `@Test` annotated methods. This will trigger the test execution,
    which will be displayed in the `Run` tab, as shown in the following screenshot.
    When the tests are completed, they will become either red or green, depending
    on their success state:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以看到规则将实现`TestRule`，而`TestRule`又带有`apply()`方法。然后我们创建一个新的`Statement`对象，它将执行基本语句（测试本身）并在语句之前和之后重置结果的值。现在我们可以修改测试如下：
- en: '![Figure 9.2: Test output in Android Studio'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一套很好的快捷方式和可视化工具来帮助测试。如果要为类创建新的测试或转到类的现有测试，可以使用*Ctrl* + *Shift*
    + *T*（Windows）或*Command* + *Shift* + *T*（Mac）快捷键。要运行测试，有多种选项：右键单击文件或包，然后选择`Run
    Tests in...`选项，或者如果要独立运行测试，可以转到特定的测试方法并选择顶部的绿色图标，这将执行类中的所有测试；或者，对于单个测试，可以单击`@Test`注解方法旁边的绿色图标。这将触发测试执行，显示在`Run`选项卡中，如下截图所示。测试完成后，它们将变成红色或绿色，取决于它们的成功状态：
- en: '](img/B15216_09_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio提供了一套很好的快捷方式和可视化工具来帮助测试。如果要为类创建新的测试或转到类的现有测试，可以使用*Ctrl* + *Shift*
    + *T*（Windows）或*Command* + *Shift* + *T*（Mac）快捷键。要运行测试，有多种选项：右键单击文件或包，然后选择`Run
    Tests in...`选项，或者如果要独立运行测试，可以转到特定的测试方法并选择顶部的绿色图标，这将执行类中的所有测试；或者，对于单个测试，可以单击`@Test`注解方法旁边的绿色图标。这将触发测试执行，显示在`Run`选项卡中，如下截图所示。测试完成后，它们将变成红色或绿色，取决于它们的成功状态：
- en: 'Figure 9.2: Test output in Android Studio'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：Android Studio中的测试输出
- en: Another important feature that can be found in tests is the debug one. This
    is important because you can debug both the test and the method under test, so
    if you find problems in fixing an issue, you can use this to view what the test
    was using as input and how your code handles the input. The third feature you
    can find in the green icon next to a test is the `Run With Coverage` option.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中可以找到的另一个重要功能是调试功能。这很重要，因为您可以调试测试和被测试的方法，所以如果在修复问题时遇到问题，您可以使用此功能查看测试使用的输入以及代码如何处理输入。您可以在测试旁边的绿色图标中找到的第三个功能是`Run
    With Coverage`选项。
- en: 'This helps developers identify what lines of code are covered by the test and
    which ones are skipped. The higher the coverage, the higher the chances of finding
    crashes and bugs:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于开发人员确定测试覆盖的代码行以及跳过的代码行。覆盖率越高，发现崩溃和错误的机会就越大：
- en: '![Figure 9.3: Test coverage in Android Studio'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3：Android Studio中的测试覆盖率'
- en: '](img/B15216_09_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_09_03.jpg)'
- en: 'Figure 9.3: Test coverage in Android Studio'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：Android Studio中的测试覆盖率
- en: In the preceding figure, you can see the coverage of our class broken down into
    the number of classes under test, the number of methods under test, and the number
    of lines under test.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您可以看到我们的类的覆盖范围，其中包括被测试的类的数量、被测试的方法的数量和被测试的行数。
- en: 'Another way to run tests for your Android app is through the command line.
    This is usually handy in situations where your project has `Terminal` tab in Android
    Studio to emulate that behavior. The `Terminal` tab is usually located in the
    bottom bar in Android Studio near the `Logcat` tab. In every Android Studio project,
    a file called `gradlew` is present. This is an executable file that allows developers
    to execute Gradle commands. In order to run your local unit tests, you can use
    the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种运行Android应用程序测试的方法是通过命令行。这通常在您的项目中有`Terminal`选项卡的情况下非常方便。`Terminal`选项卡通常位于Android
    Studio底部栏附近的`Logcat`选项卡附近。在每个Android Studio项目中，都有一个名为`gradlew`的文件。这是一个可执行文件，允许开发人员执行Gradle命令。为了运行本地单元测试，您可以使用以下命令：
- en: '`gradlew.bat test` (for Windows)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradlew.bat test`（适用于Windows）'
- en: '`./gradlew test` (for Mac and Linux)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./gradlew test`（适用于Mac和Linux）'
- en: 'Once that command is executed, the app will be built and tested. You can find
    a variety of commands that you can input in `Terminal` in the `Gradle` tab located
    on the right-hand side in Android Studio. The outputs of the tests, when executed
    from either `Terminal` or the `Gradle` tab, can be found in the `app/build/reports`
    folder:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该命令后，应用程序将被构建和测试。您可以在Android Studio右侧的`Gradle`选项卡中找到可以在`Terminal`中输入的各种命令。从`Terminal`或`Gradle`选项卡执行时，测试的输出可以在`app/build/reports`文件夹中找到：
- en: '![Figure 9.4: Gradle commands in Android Studio'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4：Android Studio中的Gradle命令'
- en: '](img/B15216_09_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_09_04.jpg)'
- en: 'Figure 9.4: Gradle commands in Android Studio'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：Android Studio中的Gradle命令
- en: Mockito
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mockito
- en: In the preceding examples, we looked at how to set up a unit test and how to
    use assertions to verify the result of an operation. What if we want to verify
    whether a certain method was called? Or what if we want to manipulate the test
    input in order to test a specific scenario? In these types of situations, we can
    use **Mockito**. This is a library that helps developers set up dummy objects
    that can be injected into the objects under test and allows them to verify method
    calls, set up inputs, and even monitor the test objects themselves.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们看了如何设置单元测试以及如何使用断言来验证操作的结果。如果我们想要验证某个方法是否被调用呢？或者如果我们想要操纵测试输入以测试特定情景呢？在这些情况下，我们可以使用**Mockito**。这是一个帮助开发人员设置虚拟对象的库，可以将其注入到被测试的对象中，并允许它们验证方法调用、设置输入，甚至监视测试对象本身。
- en: 'The library should be added to your `test` Gradle setup, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该库应该添加到您的`test` Gradle设置中，如下所示：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s look at the following code example (please note that, for brevity,
    import statements have been removed from the following code snippets):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下以下代码示例（请注意，为简洁起见，以下代码片段中的导入语句已被删除）：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we have the `Context` object, which normally cannot be unit tested because
    it's part of the Android framework. We can use `mockito` to create a test double
    and inject it into the `StringConcatenator` object. Then, we can manipulate the
    call to `getString()` to return whatever input we chose. This process is referred
    to as mocking.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有`Context`对象，通常无法进行单元测试，因为它是Android框架的一部分。我们可以使用`mockito`创建一个测试替身，并将其注入到`StringConcatenator`对象中。然后，我们可以操纵对`getString()`的调用，以返回我们选择的任何输入。这个过程被称为模拟。
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'class SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator)
    {'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'class SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator)
    {'
- en: 'fun concatenateSpecificStrings(): String {'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun concatenateSpecificStrings(): String {'
- en: return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)
- en: '}'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: class SpecificStringConcatenatorTest {
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: class SpecificStringConcatenatorTest {
- en: private val stringConcatenator = Mockito
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: private val stringConcatenator = Mockito
- en: .mock(StringConcatenator::class.java)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: .mock(StringConcatenator::class.java)
- en: private val specificStringConcatenator =
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: private val specificStringConcatenator =
- en: SpecificStringConcatenator(stringConcatenator)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SpecificStringConcatenator(stringConcatenator)
- en: '@Test'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun concatenateSpecificStrings() {
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: fun concatenateSpecificStrings() {
- en: val expected = "expected"
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: Mockito.'when'(stringConcatenator.concatenate(R.string.string_1,
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito.'when'(stringConcatenator.concatenate(R.string.string_1,
- en: R.string.string_2))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: R.string.string_2))
- en: .thenReturn(expected)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: .thenReturn(expected)
- en: val result = specificStringConcatenator
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: val result = specificStringConcatenator
- en: .concatenateSpecificStrings()
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: .concatenateSpecificStrings()
- en: assertEquals(expected, result)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals(expected, result)
- en: '}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: mock-maker-inline
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: mock-maker-inline
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'class SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator)
    {'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'class SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator)
    {'
- en: 'fun concatenateSpecificStrings(): String {'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun concatenateSpecificStrings(): String {'
- en: return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)
- en: '}'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'fun concatenateWithCallback(callback: Callback) {'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun concatenateWithCallback(callback: Callback) {'
- en: callback.onStringReady(concatenateSpecificStrings())
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: callback.onStringReady(concatenateSpecificStrings())
- en: '}'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: interface Callback {
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接口回调 {
- en: 'fun onStringReady(input: String)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当字符串准备好时，输入字符串
- en: '}'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '@Test'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun concatenateWithCallback() {
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: fun concatenateWithCallback() {
- en: val expected = "expected"
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: Mockito.`when`(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito.`when`(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))
- en: .thenReturn(expected)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: .thenReturn(expected)
- en: val callback =           Mockito.mock(SpecificStringConcatenator.Callback::class.java)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: val callback =           Mockito.mock(SpecificStringConcatenator.Callback::class.java)
- en: specificStringConcatenator.concatenateWithCallback(callback)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: specificStringConcatenator.concatenateWithCallback(callback)
- en: Mockito.verify(callback).onStringReady(expected)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito.verify(callback).onStringReady(expected)
- en: '}'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '@Test'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun concatenateWithCallback() {
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: fun concatenateWithCallback() {
- en: val expected = "expected"
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: val spy = Mockito.spy(specificStringConcatenator)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: val spy = Mockito.spy(specificStringConcatenator)
- en: Mockito.`when`(spy.concatenateSpecificStrings())          .thenReturn(expected)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito.`when`(spy.concatenateSpecificStrings())          .thenReturn(expected)
- en: val callback           = Mockito.mock(SpecificStringConcatenator.Callback::class.java)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: val callback           = Mockito.mock(SpecificStringConcatenator.Callback::class.java)
- en: specificStringConcatenator.concatenateWithCallback(callback)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: specificStringConcatenator.concatenateWithCallback(callback)
- en: Mockito.verify(callback).onStringReady(expected)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito.verify(callback).onStringReady(expected)
- en: '}'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '@RunWith(MockitoJUnitRunner::class)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(MockitoJUnitRunner::class)'
- en: class SpecificStringConcatenatorTest {
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: class SpecificStringConcatenatorTest {
- en: '@Mock'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '@Mock'
- en: 'lateinit var stringConcatenator: StringConcatenator'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'lateinit var stringConcatenator: StringConcatenator'
- en: '@InjectMocks'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '@InjectMocks'
- en: 'lateinit var specificStringConcatenator: SpecificStringConcatenator'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'lateinit var specificStringConcatenator: SpecificStringConcatenator'
- en: '}'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24] character. This, along with some other minor issues, causes some inconvenience
    when using Mockito in Kotlin. A few libraries were introduced to wrap Mockito
    and provide a nicer experience when using it. One of those is `mockito-kotlin`.
    You can add this library to your module using the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]字符。这个，连同其他一些小问题，导致在Kotlin中使用Mockito时有些不便。引入了一些库来包装Mockito并在使用时提供更好的体验。其中之一是`mockito-kotlin`。您可以使用以下命令将此库添加到您的模块中：'
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A big visible change this library adds is replacing the `when` method with `whenever`.
    Another useful change is replacing the `mock` method to rely on generics, rather
    than class objects. The rest of the syntax is similar to the Mockito syntax.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库添加的一个明显的变化是用`whenever`替换`when`方法。另一个有用的变化是用泛型替换`mock`方法，而不是类对象。其余的语法与Mockito语法类似。
- en: 'We can now update the previous tests with the new library, starting with `StringConcatenatorTest`
    (import statements have been removed for brevity):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用新的库更新之前的测试，从`StringConcatenatorTest`开始（为了简洁起见，导入语句已被删除）：
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can observe, the [PRE27]
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，[PRE27]
- en: '@RunWith(MockitoJUnitRunner::class)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(MockitoJUnitRunner::class)'
- en: class SpecificStringConcatenatorTest {
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: class SpecificStringConcatenatorTest {
- en: '@Mock'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '@Mock'
- en: 'lateinit var stringConcatenator: StringConcatenator'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'lateinit var stringConcatenator: StringConcatenator'
- en: '@InjectMocks'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '@InjectMocks'
- en: 'lateinit var specificStringConcatenator: SpecificStringConcatenator'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'lateinit var specificStringConcatenator: SpecificStringConcatenator'
- en: '@Test'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun concatenateSpecificStrings() {
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: fun concatenateSpecificStrings() {
- en: val expected = "expected"
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: whenever(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: whenever(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))
- en: .thenReturn(expected)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: .thenReturn(expected)
- en: val result =           specificStringConcatenator.concatenateSpecificStrings()
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: val result =           specificStringConcatenator.concatenateSpecificStrings()
- en: assertEquals(expected, result)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals(expected, result)
- en: '}'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun concatenateWithCallback() {
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: fun concatenateWithCallback() {
- en: val expected = "expected"
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: val spy = spy(specificStringConcatenator)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: val spy = spy(specificStringConcatenator)
- en: whenever(spy.concatenateSpecificStrings()).thenReturn(expected)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: whenever(spy.concatenateSpecificStrings()).thenReturn(expected)
- en: val callback = mock<SpecificStringConcatenator.Callback>()
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock<SpecificStringConcatenator.Callback>()
- en: specificStringConcatenator.concatenateWithCallback(callback)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: specificStringConcatenator.concatenateWithCallback(callback)
- en: verify(callback).onStringReady(expected)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: verify(callback).onStringReady(expected)
- en: '}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: class NumberAdder {
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: class NumberAdder {
- en: '@Throws(InvalidNumberException::class)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws(InvalidNumberException::class)'
- en: 'fun sum(n: Int, callback: (BigInteger) -> Unit) {'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun sum(n: Int, callback: (BigInteger) -> Unit) {'
- en: if (n < 0) {
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果(n < 0) {
- en: throw InvalidNumberException
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出InvalidNumberException
- en: '}'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: var result = BigInteger.ZERO
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: var result = BigInteger.ZERO
- en: for (i in 1..n){
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: for (i in 1..n){
- en: result = result.plus(i.toBigInteger())
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: result = result.plus(i.toBigInteger())
- en: '}'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: callback(result)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: callback(result)
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'object InvalidNumberException : Throwable()'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'object InvalidNumberException : Throwable()'
- en: '}'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: testImplementation 'junit:junit:4.13.1'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 测试实现'junit:junit:4.13.1'
- en: testImplementation 'org.mockito:mockito-core:3.6.0'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation 'org.mockito:mockito-core:3.6.0'
- en: testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '@RunWith(Parameterized::class)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(Parameterized::class)'
- en: class NumberAdderParameterTest(
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: class NumberAdderParameterTest(
- en: 'private val input: Int,'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'private val input: Int,'
- en: 'private val expected: BigInteger'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'private val expected: BigInteger'
- en: ) {
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ) {
- en: companion object {
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随对象 {
- en: '@Parameterized.Parameters'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '@Parameterized.Parameters'
- en: '@JvmStatic'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmStatic'
- en: 'fun getData(): List<Array<out Any>> = listOf('
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '获取数据(): List<Array<out Any>> = listOf('
- en: arrayOf(0, BigInteger.ZERO),
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf(0, BigInteger.ZERO),
- en: arrayOf(1, BigInteger.ONE),
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf(1, BigInteger.ONE),
- en: arrayOf(5, 15.toBigInteger()),
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含5和15.toBigInteger()的数组，
- en: arrayOf(20, 210.toBigInteger()),
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf(20, 210.toBigInteger()),
- en: arrayOf(Int.MAX_VALUE, BigInteger("2305843008139952128"))
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf(Int.MAX_VALUE, BigInteger("2305843008139952128"))
- en: )
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private val numberAdder = NumberAdder()
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: private val numberAdder = NumberAdder()
- en: '@Test'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun sum() {
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum() {
- en: val callback = mock<(BigInteger) -> Unit>()
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock<(BigInteger) -> Unit>()
- en: numberAdder.sum(input, callback)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: numberAdder.sum(input, callback)
- en: verify(callback).invoke(expected)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: verify(callback).invoke(expected)
- en: '}'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE31]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '@RunWith(MockitoJUnitRunner::class)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(MockitoJUnitRunner::class)'
- en: class NumberAdderErrorHandlingTest {
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: class NumberAdderErrorHandlingTest {
- en: '@InjectMocks'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '@InjectMocks'
- en: 'lateinit var numberAdder: NumberAdder'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'lateinit var numberAdder: NumberAdder'
- en: '@Test(expected = NumberAdder.InvalidNumberException::class)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test(expected = NumberAdder.InvalidNumberException::class)'
- en: fun sum() {
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum() {
- en: val input = -1
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: val input = -1
- en: val callback = mock<(BigInteger) -> Unit>()
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock<(BigInteger) -> Unit>()
- en: numberAdder.sum(input, callback)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: numberAdder.sum（input，callback）
- en: '}'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE32]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: class NumberAdder {
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 类NumberAdder {
- en: '@Throws(InvalidNumberException::class)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws（InvalidNumberException :: class）'
- en: 'fun sum(n: Int, callback: (BigInteger) -> Unit) {'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int，callback：（BigInteger） - > Unit）{
- en: if (n < 0) {
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（n <0）{
- en: throw InvalidNumberException
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出InvalidNumberException
- en: '}'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: callback(n.toBigInteger().times((n.toBigInteger() +            1.toBigInteger())).divide(2.toBigInteger()))
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: callback（n.toBigInteger（）。times（（n.toBigInteger（）+ 1.toBigInteger（）））。divide（2.toBigInteger（）））
- en: '}'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'object InvalidNumberException : Throwable()'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: object InvalidNumberException：Throwable（）
- en: '}'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE33]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Given I am not logged in
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我没有登录
- en: And I open the application
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我打开应用程序
- en: When I enter my credentials
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当我输入我的凭据时
- en: And click Login
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击登录
- en: Then I see the Main screen
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我看到主屏幕
- en: '[PRE34]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: testImplementation 'org.robolectric:robolectric:4.3'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'org.robolectric：robolectric：4.3'
- en: testImplementation 'androidx.test.ext:junit:1.1.1'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'androidx.test.ext：junit：1.1.1'
- en: '[PRE35]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: class FactorialGenerator {
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: class FactorialGenerator {
- en: '@Throws(FactorialNotFoundException::class)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws（FactorialNotFoundException :: class）'
- en: 'fun factorial(n: Int): BigInteger {'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: fun factorial（n：Int）：BigInteger {
- en: if (n < 0) {
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（n <0）{
- en: throw FactorialNotFoundException
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出FactorialNotFoundException
- en: '}'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: var result = BigInteger.ONE
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: var result = BigInteger.ONE
- en: for (i in 1..n) {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于（i在1..n）{
- en: result = result.times(i.toBigInteger())
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: result = result.times（i.toBigInteger（））
- en: '}'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return result
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果
- en: '}'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'object FactorialNotFoundException : Throwable()'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: object FactorialNotFoundException：Throwable（）
- en: '}'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE36]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: class TextFormatter(
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: class TextFormatter（
- en: 'private val factorialGenerator: FactorialGenerator,'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val factorialGenerator：FactorialGenerator，
- en: 'private val context: Context'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val上下文：上下文
- en: ) {
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ）{
- en: 'fun getFactorialResult(n: Int): String {'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: fun getFactorialResult（n：Int）：String {
- en: return try {
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 返回尝试{
- en: context.getString(R.string.result,               factorialGenerator.factorial(n).toString())
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: context.getString（R.string.result，factorialGenerator.factorial（n）.toString（））
- en: '} catch (e: FactorialGenerator.FactorialNotFoundException) {'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch（e：FactorialGenerator.FactorialNotFoundException）{'
- en: context.getString(R.string.error)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: context.getString（R.string.error）
- en: '}'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE37]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'class MainActivity : AppCompatActivity() {'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 类MainActivity：AppCompatActivity（）{
- en: 'private lateinit var textFormatter: TextFormatter'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: private lateinit var textFormatter：TextFormatter
- en: 'override fun onCreate(savedInstanceState: Bundle?) {'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: override fun onCreate（savedInstanceState：Bundle？）{
- en: super.onCreate(savedInstanceState)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate（savedInstanceState）
- en: setContentView(R.layout.activity_main)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView（R.layout.activity_main）
- en: ttextFormatter = TextFormatter(FactorialGenerator(),
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ttextFormatter = TextFormatter（FactorialGenerator（），
- en: applicationContext)
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: applicationContext）
- en: findViewById<Button>(R.id.button).setOnClickListener {
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById <Button>（R.id.button）。setOnClickListener（{
- en: findViewById<TextView>(R.id.text_view).text               = textFormatter.getFactorialResult(findViewById<EditText>                (R.id.edit_text).text.toString().toInt())
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById <TextView>（R.id.text_view）。text = textFormatter.getFactorialResult（findViewById
    <EditText>（R.id.edit_text）。text.toString（）。toInt（））
- en: '}'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE38]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（AndroidJUnit4 :: class）'
- en: class MainActivityTest {
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 类MainActivityTest {
- en: private val context = getApplicationContext<Application>()
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val上下文= getApplicationContext <Application>()
- en: '@Test'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun `show factorial result in text view`() {
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: fun`在文本视图中显示阶乘结果`（）{
- en: val scenario = launch<MainActivity>(MainActivity::class.java)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 'val scenario = launch <MainActivity>（MainActivity :: class.java）'
- en: scenario.moveToState(Lifecycle.State.RESUMED)
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.moveToState（Lifecycle.State.RESUMED）
- en: scenario.onActivity { activity ->
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.onActivity {activity->
- en: activity.edit_text.setText(5.toString())
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: activity.edit_text.setText（5.toString（））
- en: activity.button.performClick()
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: activity.button.performClick（）
- en: assertEquals(context.getString(R.string.result,               "120"),activity.text_view.text)
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（context.getString（R.string.result，“120”），activity.text_view.text）
- en: '}'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.button））。perform（click（））
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE39]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '@Config('
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '@Config（'
- en: sdk = [Build.VERSION_CODES.P],
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: sdk = [Build.VERSION_CODES.P]，
- en: minSdk = Build.VERSION_CODES.KITKAT,
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: minSdk = Build.VERSION_CODES.KITKAT，
- en: maxSdk = Build.VERSION_CODES.Q,
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: maxSdk = Build.VERSION_CODES.Q，
- en: application = Application::class,
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '应用程序= Application :: class，'
- en: assetDir = "/assetDir/"
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: assetDir =“/ assetDir /”
- en: )
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（AndroidJUnit4 :: class）'
- en: class MainActivityTest
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 类MainActivityTest
- en: '[PRE40]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: sdk=28
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: sdk=28
- en: minSdk = 14
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: minSdk = 14
- en: maxSdk = 29
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: maxSdk = 29
- en: '[PRE41]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: testImplementation 'androidx.fragment:fragment-testing:1.1.0'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'androidx.fragment：fragment-testing：1.1.0'
- en: testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'androidx.test.espresso：espresso-core：3.2.0'
- en: '[PRE42]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: val scenario = launchFragmentInContainer<MainFragment>()
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: val scenario = launchFragmentInContainer <MainFragment>（）
- en: scenario.moveToState(Lifecycle.State.CREATED)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.moveToState（Lifecycle.State.CREATED）
- en: '[PRE43]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: onView(Matcher<View>).perform(ViewAction)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: onView（Matcher <View>）。perform（ViewAction）
- en: '[PRE44]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: onView(Matcher<View>).check(ViewAssertion)
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: onView（Matcher <View>）。check（ViewAssertion）
- en: '[PRE45]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: onView(allOf(withId(R.id.edit_text), withParent(withId(R.id.root))))
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: onView（allOf（withId（R.id.edit_text），withParent（withId（R.id.root））））
- en: '[PRE46]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: onView(withId(R.id.text_view)).check(matches(withText("My text"))))
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.text_view））。check（matches（withText（“我的文本”）））
- en: '[PRE47]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'com.nhaarman.mockitokotlin2
- en: '[PRE48]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（AndroidJUnit4 :: class）'
- en: class MainActivityTest {
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 类MainActivityTest {
- en: '@Test'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun `show factorial result in text view`() {
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: fun`在文本视图中显示阶乘结果`（）{
- en: val scenario = launch<MainActivity>(MainActivity::class.java)
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'val scenario = launch <MainActivity>（MainActivity :: class.java）'
- en: scenario.moveToState(Lifecycle.State.RESUMED)
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.moveToState（Lifecycle.State.RESUMED）
- en: scenario.onActivity { activity ->
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.onActivity {activity->
- en: onView(withId(R.id.edit_text)).perform(typeText("5"))
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.edit_text））。perform（typeText（“5”））
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.button））。perform（click（））
- en: onView(withId(R.id.text_view))
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.text_view））
- en: .check(matches(withText(activity                 .getString(R.string.result,
    "120"))))
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: .check（matches（withText（activity.getString（R.string.result，“120”）））
- en: '}'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE49]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Given I open the application
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我打开应用程序
- en: And I insert the number n
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我插入数字n
- en: When I press the Calculate button
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当我按下“计算”按钮时
- en: Then I should see the text "The sum of numbers from 1 to n is [result]"
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我应该看到文本“从1到n的数字的总和是[result]”
- en: Given I open the application
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我打开应用程序
- en: And I insert the number -n
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我插入数字-n
- en: When I press the Calculate button
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当我按下“计算”按钮时
- en: 'Then I should see the text "Error: Invalid number"'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我应该看到文本“错误：无效数字”
- en: '[PRE50]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: testImplementation 'junit:junit:4.13.1'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'junit：junit：4.13.1'
- en: testImplementation 'org.mockito:mockito-core:3.6.0'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'org.mockito：mockito-core：3.6.0'
- en: testImplementation 'com.nhaarman.mockitokotlin2
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: :mockito-kotlin:2.2.0'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: ：mockito-kotlin：2.2.0'
- en: testImplementation 'org.robolectric:robolectric:4.4'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'org.robolectric：robolectric：4.4'
- en: testImplementation 'androidx.test.ext:junit:1.1.2'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation 'androidx.test.ext：junit：1.1.2'
- en: testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation 'androidx.test.espresso：espresso-core：3.3.0'
- en: androidTestImplementation 'androidx.test.ext:junit:1.1.2'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation 'androidx.test.ext：junit：1.1.2'
- en: androidTestImplementation 'androidx.test
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation 'androidx.test
- en: .espresso:espresso-core:3.3.0'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: .espresso：espresso-core：3.3.0'
- en: androidTestImplementation 'androidx.test:rules:1.3.0'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation 'androidx.test：rules：1.3.0'
- en: '[PRE51]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: testOptions.unitTests.includeAndroidResources = true
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: testOptions.unitTests.includeAndroidResources = true
- en: '[PRE52]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: sdk=28
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: sdk = 28
- en: '[PRE53]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: mock-maker-inline
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟制造商内联
- en: '[PRE54]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: import java.math.BigInteger
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 导入java.math.BigInteger
- en: class NumberAdder {
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 类NumberAdder {
- en: '@Throws(InvalidNumberException::class)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws（InvalidNumberException :: class）'
- en: 'fun sum(n: Int, callback: (BigInteger) -> Unit) {'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int，callback：（BigInteger） - > Unit）{
- en: if (n < 0) {
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: if（n <0）{
- en: throw InvalidNumberException
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出InvalidNumberException
- en: '}'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: callback(n.toBigInteger().times((n.toLong()           + 1).toBigInteger()).divide(2.toBigInteger()))
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 回调（n.toBigInteger（）。times（（n.toLong（）+ 1）。toBigInteger（））。divide（2.toBigInteger（）））
- en: '}'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'object InvalidNumberException : Throwable()'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: object InvalidNumberException：Throwable（）
- en: '}'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE55]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '@RunWith(Parameterized::class)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（Parameterized :: class）'
- en: class NumberAdderParameterTest(
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 类NumberAdderParameterTest（
- en: 'private val input: Int,'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val input：Int，
- en: 'private val expected: BigInteger'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val expected：BigInteger
- en: ) {
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: ）{
- en: companion object {
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随对象{
- en: '@Parameterized.Parameters'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '@Parameterized.Parameters'
- en: '@JvmStatic'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmStatic'
- en: 'fun getData(): List<Array<out Any>> = listOf('
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: fun getData（）：List <Array <out Any>> = listOf（
- en: arrayOf(0, BigInteger.ZERO),
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf（0，BigInteger.ZERO），
- en: arrayOf(1, BigInteger.ONE),
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf（1，BigInteger.ONE），
- en: arrayOf(5, 15.toBigInteger()),
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf（5，15.toBigInteger（）），
- en: arrayOf(20, 210.toBigInteger()),
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf（20，210.toBigInteger（）），
- en: arrayOf(Int.MAX_VALUE, BigInteger("2305843008139952128"))
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: arrayOf（Int.MAX_VALUE，BigInteger（“2305843008139952128”））
- en: )
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '}'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: private val numberAdder = NumberAdder()
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: private val numberAdder = NumberAdder（）
- en: '@Test'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun sum() {
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（）{
- en: val callback = mock<(BigInteger) -> Unit>()
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock <（BigInteger） - > Unit >（）
- en: numberAdder.sum(input, callback)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: numberAdder.sum（input，callback）
- en: verify(callback).invoke(expected)
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: verify(callback).invoke(expected)
- en: '}'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE56]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '@RunWith(MockitoJUnitRunner::class)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（MockitoJUnitRunner :: class）'
- en: class NumberAdderErrorHandlingTest {
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 类NumberAdderErrorHandlingTest {
- en: '@InjectMocks'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '@InjectMocks'
- en: 'lateinit var numberAdder: NumberAdder'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: lateinit var numberAdder：NumberAdder
- en: '@Test(expected = NumberAdder.InvalidNumberException::class)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test（expected = NumberAdder.InvalidNumberException :: class）'
- en: fun sum() {
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（）{
- en: val input = -1
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: val input = -1
- en: val callback = mock<(BigInteger) -> Unit>()
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock <（BigInteger） - > Unit >（）
- en: numberAdder.sum(input, callback)
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: numberAdder.sum（input，callback）
- en: '}'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE57]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: class TextFormatter(
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 类TextFormatter（
- en: 'private val numberAdder: NumberAdder,'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val numberAdder：NumberAdder，
- en: 'private val context: Context'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 私有val context：Context
- en: ) {
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: ）{
- en: 'fun getSumResult(n: Int, callback: (String) -> Unit) {'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: fun getSumResult（n：Int，callback：（String） - > Unit）{
- en: try {
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试{
- en: numberAdder.sum(n) {
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: numberAdder.sum（n）{
- en: callback(
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 回调（
- en: context.getString(
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: context.getString（
- en: R.string.the_sum_of_numbers_from_1_to_is,
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: R.string.the_sum_of_numbers_from_1_to_is，
- en: n,
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: n，
- en: it.toString()
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: it.toString（）
- en: )
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: )
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '}'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '} catch (e: NumberAdder.InvalidNumberException) {'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '} catch（e：NumberAdder.InvalidNumberException）{'
- en: callback(context.getString
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: callback（context.getString
- en: (R.string.error_invalid_number))
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: （R.string.error_invalid_number））
- en: '}'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE58]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '@RunWith(MockitoJUnitRunner::class)'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（MockitoJUnitRunner :: class）'
- en: class TextFormatterTest {
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 类TextFormatterTest {
- en: '@InjectMocks'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '@InjectMocks'
- en: 'lateinit var textFormatter: TextFormatter'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: lateinit var textFormatter：TextFormatter
- en: '@Mock'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '@Mock'
- en: 'lateinit var numberAdder: NumberAdder'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: lateinit var numberAdder：NumberAdder
- en: '@Mock'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '@Mock'
- en: 'lateinit var context: Context'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: lateinit var context：Context
- en: '@Test'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun getSumResult_success() {
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: fun getSumResult_success（）{
- en: val n = 10
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: val n = 10
- en: val sumResult = BigInteger.TEN
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: val sumResult = BigInteger.TEN
- en: val expected = "expected"
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: whenever(numberAdder.sum(eq(n), any())).thenAnswer {
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 每当（numberAdder.sum（eq（n），any（）））。thenAnswer {
- en: (it.arguments[1] as (BigInteger)->Unit)
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: （it.arguments [1] as（BigInteger） - > Unit）
- en: .invoke(sumResult)
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: .invoke（sumResult）
- en: '}'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: whenever(context.getString
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 每当（context.getString
- en: (R.string.the_sum_of_numbers_from_1_to_is, n,
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: （R.string.the_sum_of_numbers_from_1_to_is，n，
- en: sumResult.toString())).thenReturn(expected)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: sumResult.toString（））。thenReturn（expected）
- en: val callback = mock<(String)->Unit>()
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock <（String） - > Unit >（）
- en: textFormatter.getSumResult(n, callback)
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: textFormatter.getSumResult（n，callback）
- en: verify(callback).invoke(expected)
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: verify（callback）.invoke（expected）
- en: '}'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE59]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '@Test'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun getSumResult_error() {
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: fun getSumResult_error（）{
- en: val n = 10
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: val n = 10
- en: val expected = "expected"
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: val expected = "expected"
- en: whenever(numberAdder.sum(eq(n),           any())).thenThrow(NumberAdder.InvalidNumberException)
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 每当（numberAdder.sum（eq（n），any（）））。thenThrow（NumberAdder.InvalidNumberException）
- en: whenever(context.getString(R.string.error_invalid_number))          .thenReturn(expected)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 每当（context.getString（R.string.error_invalid_number））。thenReturn（expected）
- en: val callback = mock<(String)->Unit>()
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: val callback = mock <（String） - > Unit >（）
- en: textFormatter.getSumResult(n, callback)
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: textFormatter.getSumResult（n，callback）
- en: verify(callback).invoke(expected)
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: verify（callback）.invoke（expected）
- en: '}'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE60]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: <?xml version="1.0" encoding="utf-8"?>
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version =“1.0” encoding =“utf-8”?>
- en: <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: <LinearLayout xmlns：android =“http://schemas.android.com/apk/res/android”
- en: android:id="@+id/root"
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/root”
- en: android:layout_width="match_parent"
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“match_parent”
- en: android:layout_height="match_parent"
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“match_parent”
- en: android:orientation="vertical">
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: android：orientation =“vertical”>
- en: <EditText
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: <EditText
- en: android:id="@+id/edit_text"
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/edit_text”
- en: android:layout_width="match_parent"
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“match_parent”
- en: android:layout_height="wrap_content"
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“wrap_content”
- en: android:inputType="number" />
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: android：inputType =“number”/>
- en: <Button
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: <Button
- en: android:id="@+id/button"
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/button”
- en: android:layout_width="wrap_content"
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“wrap_content”
- en: android:layout_height="wrap_content"
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“wrap_content”
- en: android:layout_gravity="center_horizontal"
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_gravity =“center_horizontal”
- en: android:text="@string/calculate" />
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: android：text =“@string/calculate”/>
- en: <TextView
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: <TextView
- en: android:id="@+id/text_view"
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/text_view”
- en: android:layout_width="wrap_content"
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“wrap_content”
- en: android:layout_height="wrap_content"
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“wrap_content”
- en: android:layout_gravity="center_horizontal" />
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_gravity =“center_horizontal”/>
- en: </LinearLayout>
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: </LinearLayout>
- en: '[PRE61]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'class MainActivity : AppCompatActivity() {'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 类MainActivity：AppCompatActivity（）{
- en: 'private lateinit var textFormatter: TextFormatter'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: private lateinit var textFormatter：TextFormatter
- en: 'override fun onCreate(savedInstanceState: Bundle?) {'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 重写fun onCreate(savedInstanceState：Bundle？）{
- en: super.onCreate(savedInstanceState)
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate（savedInstanceState）
- en: setContentView(R.layout.activity_main)
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView（R.layout.activity_main）
- en: textFormatter = TextFormatter(NumberAdder(), applicationContext)
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: textFormatter = TextFormatter(NumberAdder(), applicationContext)
- en: findViewById<Button>(R.id.button).setOnClickListener {
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById<Button>(R.id.button).setOnClickListener {
- en: 'textFormatter.getSumResult(findViewById<EditText>              (R.id.edit_text).text.toString().toIntOrNull()
    ?: 0) {'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 'textFormatter.getSumResult(findViewById<EditText>              (R.id.edit_text).text.toString().toIntOrNull()
    ?: 0) {'
- en: findViewById<TextView>(R.id.text_view).text = it
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById<TextView>(R.id.text_view).text = it
- en: '}'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE62]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(AndroidJUnit4::class)'
- en: class MainActivityTest {
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: class MainActivityTest {
- en: '@Test'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun `show sum result in text view`() {
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: fun `show sum result in text view`() {
- en: val scenario = launch<MainActivity>(MainActivity::class.java)
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: val scenario = launch<MainActivity>(MainActivity::class.java)
- en: scenario.moveToState(Lifecycle.State.RESUMED)
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.moveToState(Lifecycle.State.RESUMED)
- en: scenario.onActivity { activity ->
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.onActivity { activity ->
- en: onView(withId(R.id.edit_text)).perform(replaceText("5"))
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.edit_text)).perform(replaceText("5"))
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.button)).perform(click())
- en: onView(withId(R.id.text_view)).check(matches(withText
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.text_view)).check(matches(withText
- en: (activity.getString
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: (activity.getString
- en: (R.string.the_sum_of_numbers_from_1_to_is, 5, "15"))))
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: (R.string.the_sum_of_numbers_from_1_to_is, 5, "15"))))
- en: '}'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun `show error in text view`() {
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: fun `show error in text view`() {
- en: val scenario = launch<MainActivity>(MainActivity::class.java)
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: val scenario = launch<MainActivity>(MainActivity::class.java)
- en: scenario.moveToState(Lifecycle.State.RESUMED)
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.moveToState(Lifecycle.State.RESUMED)
- en: scenario.onActivity { activity ->
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: scenario.onActivity { activity ->
- en: onView(withId(R.id.edit_text))
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.edit_text))
- en: .perform(replaceText("-5"))
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: .perform(replaceText("-5"))
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.button)).perform(click())
- en: onView(withId(R.id.text_view)).check(
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.text_view)).check(
- en: matches(withText(activity.getString(
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: matches(withText(activity.getString(
- en: R.string.error_invalid_number))))
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: R.string.error_invalid_number))))
- en: '}'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE63]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(AndroidJUnit4::class)'
- en: class MainActivityUiTest {
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 类 MainActivityUiTest {
- en: '@JvmField'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmField'
- en: '@Rule'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '@Rule'
- en: 'var activityRule: ActivityTestRule<MainActivity> ='
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 'var activityRule: ActivityTestRule<MainActivity> ='
- en: ActivityTestRule(MainActivity::class.java)
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: ActivityTestRule(MainActivity::class.java)
- en: '@Test'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun showSumResultInTextView() {
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: fun showSumResultInTextView() {
- en: activityRule.activity.let { activity ->
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: activityRule.activity.let { activity ->
- en: onView(withId(R.id.edit_text)).perform(replaceText("5"))
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.edit_text)).perform(replaceText("5"))
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.button)).perform(click())
- en: onView(withId(R.id.text_view)).check(matches
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.text_view)).check(matches
- en: (withText(activity.getString
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: (withText(activity.getString
- en: (R.string.the_sum_of_numbers_from_1_to_is, 5, "15"))))
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: (R.string.the_sum_of_numbers_from_1_to_is, 5, "15"))))
- en: '}'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun showErrorInTextView() {
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: fun showErrorInTextView() {
- en: activityRule.activity.let { activity ->
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: activityRule.activity.let { activity ->
- en: onView(withId(R.id.edit_text)).perform(replaceText("-5"))
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.edit_text)).perform(replaceText("-5"))
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.button)).perform(click())
- en: onView(withId(R.id.text_view)).check(matches               (withText(activity.getString                 (R.string.error_invalid_number))))
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.text_view)).check(matches               (withText(activity.getString                 (R.string.error_invalid_number))))
- en: '}'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE64]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: android {
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: android {
- en: '...'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: defaultConfig {
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: defaultConfig {
- en: '...'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: testInstrumentationRunner           "androidx.test.runner.AndroidJUnitRunner"
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: testInstrumentationRunner           "androidx.test.runner.AndroidJUnitRunner"
- en: 'testInstrumentationRunnerArguments clearPackageData: ''true'''
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 'testInstrumentationRunnerArguments clearPackageData: ''true'''
- en: '}'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: testOptions {
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: testOptions {
- en: execution 'ANDROIDX_TEST_ORCHESTRATOR'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: execution 'ANDROIDX_TEST_ORCHESTRATOR'
- en: '}'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: dependencies {
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: dependencies {
- en: '...'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: androidTestUtil 'androidx.test:orchestrator:1.3.0'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestUtil 'androidx.test:orchestrator:1.3.0'
- en: '}'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE65]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: testInstrumentationRunner "com.android.CustomTestRunner"
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: testInstrumentationRunner "com.android.CustomTestRunner"
- en: '[PRE66]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'class CustomTestRunner: AndroidJUnitRunner() {'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 'class CustomTestRunner: AndroidJUnitRunner() {'
- en: '@Throws(Exception::class)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws(Exception::class)'
- en: override fun newApplication(
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: override fun newApplication(
- en: 'cl: ClassLoader?,'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 'cl: ClassLoader?,'
- en: 'className: String?,'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 'className: String?,'
- en: 'context: Context?'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 'context: Context?'
- en: '): Application? {'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '): Application? {'
- en: return super.newApplication(cl,           MyApplication::class.java.name, context)
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: return super.newApplication(cl,           MyApplication::class.java.name, context)
- en: '}'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE67]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith(AndroidJUnit4::class)'
- en: class MainActivityUiTest {
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: class MainActivityUiTest {
- en: '}'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE68]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '@JvmField'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmField'
- en: '@Rule'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '@Rule'
- en: 'var activityRule: ActivityTestRule<MainActivity>       = ActivityTestRule(MainActivity::class.java)'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 'var activityRule: ActivityTestRule<MainActivity>       = ActivityTestRule(MainActivity::class.java)'
- en: '[PRE69]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '@JvmField'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '@ JvmField'
- en: '@Rule'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '@Rule'
- en: 'var activityRule: ActivityTestRule<MainActivity> =       ActivityTestRule(MainActivity::class.java,
    false ,false)'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 'var activityRule: ActivityTestRule<MainActivity> =       ActivityTestRule(MainActivity::class.java,
    false ,false)'
- en: '@Test'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun myTestMethod() {
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: fun myTestMethod() {
- en: val myIntent = Intent()
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: val myIntent = Intent()
- en: activityRule.launchActivity(myIntent)
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: activityRule.launchActivity(myIntent)
- en: '}'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE70]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '@Test'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun myTest() {
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: fun myTest() {
- en: onView(withId(R.id.edit_text)).perform(replaceText("5"))
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.edit_text)).perform(replaceText("5"))
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.button)).perform(click())
- en: onView(withId(R.id.text_view))          .check(matches(withText("my test")))
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: onView(withId(R.id.text_view))          .check(matches(withText("my test")))
- en: '}'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE71]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: class MyScreenRobot {
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: class MyScreenRobot {
- en: 'fun setText(): MyScreenRobot {'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun setText(): MyScreenRobot {'
- en: onView(ViewMatchers.withId(R.id.edit_text))          .perform(ViewActions.replaceText("5"))
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: onView(ViewMatchers.withId(R.id.edit_text))          .perform(ViewActions.replaceText("5"))
- en: return this
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: return this
- en: '}'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'fun pressButton(): MyScreenRobot {'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun pressButton(): MyScreenRobot {'
- en: onView(ViewMatchers.withId(R.id.button))          .perform(ViewActions.click())
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: onView(ViewMatchers.withId(R.id.button))          .perform(ViewActions.click())
- en: return this
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: return this
- en: '}'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'fun assertText(): MyScreenRobot {'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 'fun assertText(): MyScreenRobot {'
- en: onView(ViewMatchers.withId(R.id.text_view))          .check(ViewAssertions.matches(ViewMatchers           .withText("my
    test")))
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: onView(ViewMatchers.withId(R.id.text_view))          .check(ViewAssertions.matches(ViewMatchers           .withText("my
    test")))
- en: return this
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: return this
- en: '}'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE72]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '@Test'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun myTest() {
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: fun myTest() {
- en: MyScreenRobot()
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: MyScreenRobot()
- en: .setText()
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: .setText()
- en: .pressButton()
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: .pressButton()
- en: .assertText()
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: .assertText()
- en: '}'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE73]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: class MyHeavyliftingComponent(private val   countingIdlingResource:CountingIdlingResource)
    {
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: class MyHeavyliftingComponent(private val   countingIdlingResource:CountingIdlingResource)
    {
- en: fun doHeavyWork() {
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: fun doHeavyWork() {
- en: countingIdlingResource.increment()
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: countingIdlingResource.increment()
- en: // do work
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: // do work
- en: countingIdlingResource.decrement()
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: countingIdlingResource.decrement()
- en: '}'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE74]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'class MyApplication : Application(){'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 'class MyApplication : Application(){'
- en: val countingIdlingResource = CountingIdlingResource("My heavy work")
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: val countingIdlingResource =计数IdlingResource（“我的繁重工作”）
- en: val myHeavyliftingComponent =       MyHeavyliftingComponent(countingIdlingResource)
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: val myHeavyliftingComponent = MyHeavyliftingComponent（countingIdlingResource）}
- en: '}'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE75]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '使用AndroidJUnit4 :: class运行'
- en: class MyTest {
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: class MyTest {
- en: '@Before'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '@Before'
- en: fun setUp() {
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: fun setUp（）{
- en: val myApplication = getApplicationContext<MyApplication>()
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: val myApplication = getApplicationContext <MyApplication>（）
- en: IdlingRegistry.getInstance()          .register(myApplication.countingIdlingResource)
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: IdlingRegistry.getInstance（）.register（myApplication.countingIdlingResource）
- en: '}'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE76]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation'androidx.test.espresso：espresso-intents：3.3.0'
- en: '[PRE77]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '@JvmField'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmField'
- en: '@Rule'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '@Rule'
- en: 'var intentsRule: IntentsTestRule<MainActivity>       = IntentsTestRule(MainActivity::class.java)'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 'var intentsRule：IntentsTestRule <MainActivity> = IntentsTestRule（MainActivity
    :: class.java）'
- en: '[PRE78]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: onView(withId(R.id.button)).perform(click())
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.button））。执行（click（））
- en: intended(allOf(
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: intended（allOf（
- en: hasComponent(hasShortClassName(".MainActivity")),
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: hasComponent（hasShortClassName（“.MainActivity”）），
- en: hasExtra(MainActivity.MY_EXTRA, "myExtraValue")))
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: hasExtra（MainActivity.MY_EXTRA，“myExtraValue”））
- en: '[PRE79]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: androidTestImplementation   'com.android.support.test.espresso:espresso-contrib:3.0.2'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation'com.android.support.test.espresso：espresso-contrib：3.0.2'
- en: '[PRE80]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: onView(withId(R.id.recycler_view))  .perform(RecyclerViewActions.actionOnItemAtPosition(0,
    click()))
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.recycler_view））。执行（RecyclerViewActions.actionOnItemAtPosition（0，click（）））
- en: '[PRE81]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: onView(withId(R.id.recycler_view)).perform(RecyclerViewActions   .scrollToPosition<RecyclerView.ViewHolder>(10))
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.recycler_view））。执行（RecyclerViewActions.scrollToPosition <RecyclerView.ViewHolder>（10））
- en: '[PRE82]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: onView(withText("myText")).check(matches(isDisplayed()))
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withText（“myText”））。check（matches（isDisplayed（）））
- en: '[PRE83]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: implementation 'androidx.test.espresso:espresso-core:3.3.0'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: implementation'androidx.test.espresso：espresso-core：3.3.0'
- en: testImplementation 'junit:junit:4.13.1'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation'junit：junit：4.13.1'
- en: androidTestImplementation 'androidx.test.ext:junit:1.1.2'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation'androidx.test.ext：junit：1.1.2'
- en: androidTestImplementation 'androidx.test:rules:1.3.0'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: androidTestImplementation'androidx.test：rules：1.3.0'
- en: '[PRE84]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'class Randomizer(private val random: Random) {'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: class Randomizer（private val random：Random）{
- en: 'fun getTimeToWait(): Int {'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: fun getTimeToWait（）：Int {
- en: return random.nextInt(5) + 1
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: return random.nextInt（5）+ 1
- en: '}'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE85]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: class Synchronizer(
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: class Synchronizer（
- en: 'private val randomizer: Randomizer,'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: private val randomizer：Randomizer，
- en: 'private val timer: Timer,'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: private val timer：计时器，
- en: 'private val countingIdlingResource: CountingIdlingResource'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: private val countingIdlingResource：CountingIdlingResource
- en: ) {
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: ）{
- en: 'fun executeAfterDelay(callback: (Int) -> Unit) {'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: fun executeAfterDelay（callback：（Int） - > Unit）{
- en: val timeToWait = randomizer.getTimeToWait()
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: val timeToWait = randomizer.getTimeToWait（）
- en: countingIdlingResource.increment()
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: countingIdlingResource.increment（）
- en: timer.schedule(CallbackTask(callback, timeToWait),           timeToWait * 1000L)
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: timer.schedule（CallbackTask（callback，timeToWait），timeToWait * 1000L）
- en: '}'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: inner class CallbackTask(
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 内部类CallbackTask（
- en: 'private val callback: (Int) -> Unit,'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: private val回调：（Int） - > Unit，
- en: 'private val time: Int'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: private val time：Int
- en: ') : TimerTask() {'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: ）：TimerTask（）{
- en: override fun run() {
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: override fun run（）{
- en: callback(time)
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 回调（时间）
- en: countingIdlingResource.decrement()
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: countingIdlingResource.decrement（）
- en: '}'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE86]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'class MyApplication : Application() {'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: class MyApplication：Application（）{
- en: val countingIdlingResource =       CountingIdlingResource("Timer resource")
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: val countingIdlingResource =计数IdlingResource（“计时器资源”）
- en: val randomizer = Randomizer(Random())
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: val randomizer = Randomizer（Random（））
- en: val synchronizer = Synchronizer(randomizer, Timer(),       countingIdlingResource)
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: val同步器=同步器（随机器，计时器（），计数IdlingResource）
- en: '}'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE87]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: <?xml version="1.0" encoding="utf-8"?>
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version =“1.0” encoding =“utf-8”?>
- en: <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: <LinearLayout xmlns：android="http://schemas.android.com/apk/res/android"
- en: android:layout_width="match_parent"
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“match_parent”
- en: android:layout_height="match_parent"
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“match_parent”
- en: android:orientation="vertical">
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: android：orientation =“vertical”>
- en: <Button
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: <Button
- en: android:id="@+id/activity_1_button"
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/activity_1_button”
- en: android:layout_width="wrap_content"
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“wrap_content”
- en: android:layout_height="wrap_content"
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“wrap_content”
- en: android:layout_gravity="center"
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_gravity =“center”
- en: android:text="@string/press_me" />
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: android：text =“@string / press_me”/>
- en: </LinearLayout>
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: </LinearLayout>
- en: '[PRE88]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: <?xml version="1.0" encoding="utf-8"?>
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: <?xml version =“1.0” encoding =“utf-8”?>
- en: <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: <LinearLayout xmlns：android="http://schemas.android.com/apk/res/android"
- en: android:layout_width="match_parent"
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“match_parent”
- en: android:layout_height="match_parent"
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“match_parent”
- en: android:orientation="vertical">
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: android：orientation =“vertical”>
- en: <TextView
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: <TextView
- en: android:id="@+id/activity_2_text_view"
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: android：id =“@+id/activity_2_text_view”
- en: android:layout_width="wrap_content"
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_width =“wrap_content”
- en: android:layout_height="wrap_content"
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_height =“wrap_content”
- en: android:layout_gravity="center" />
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: android：layout_gravity =“center”/>
- en: </LinearLayout>
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: </LinearLayout>
- en: '[PRE89]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'class Activity1 : AppCompatActivity() {'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: class Activity1：AppCompatActivity（）{
- en: 'override fun onCreate(savedInstanceState: Bundle?) {'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: override fun onCreate（savedInstanceState：Bundle？）{
- en: super.onCreate(savedInstanceState)
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate（savedInstanceState）
- en: setContentView(R.layout.activity_1)
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView（R.layout.activity_1）
- en: findViewById<Button>(R.id.activity_1_button)
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById <Button>（R.id.activity_1_button）
- en: .setOnClickListener {
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: .setOnClickListener {
- en: (application as MyApplication).synchronizer
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: （应用程序作为MyApplication）.synchronizer
- en: .executeAfterDelay {
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: .executeAfterDelay {
- en: startActivity(Activity2.newIntent(this, it))
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: startActivity（Activity2.newIntent（this，it））
- en: '}'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE90]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'class Activity2 : AppCompatActivity() {'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: class Activity2：AppCompatActivity（）{
- en: companion object {
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 伴随对象{
- en: private const val EXTRA_SECONDS = "extra_seconds"
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: private const val EXTRA_SECONDS =“extra_seconds”
- en: 'fun newIntent(context: Context, seconds: Int) ='
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: fun newIntent（context：Context，seconds：Int）=
- en: Intent(context, Activity2::class.java).putExtra(
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 'Intent（context，Activity2 :: class.java）。putExtra（'
- en: EXTRA_SECONDS, seconds
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: EXTRA_SECONDS，秒
- en: )
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '}'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'override fun onCreate(savedInstanceState: Bundle?) {'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: override fun onCreate（savedInstanceState：Bundle？）{
- en: super.onCreate(savedInstanceState)
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate（savedInstanceState）
- en: setContentView(R.layout.activity_2)
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: setContentView（R.layout.activity_2）
- en: findViewById<TextView>(R.id.activity_2_text_view).text =
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: findViewById <TextView>（R.id.activity_2_text_view）。text =
- en: getString(R.string.opened_after_x_seconds,               intent.getIntExtra(EXTRA_SECONDS,
    0))
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: getString（R.string.opened_after_x_seconds，intent.getIntExtra（EXTRA_SECONDS，0））
- en: '}'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE91]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '@RunWith(AndroidJUnit4::class)'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '@RunWith（AndroidJUnit4 :: class）'
- en: '@LargeTest'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '@LargeTest'
- en: class FlowTest {
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: class FlowTest {
- en: '@JvmField'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '@JvmField'
- en: '@Rule'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '@Rule'
- en: 'var activityRule: ActivityTestRule<Activity1> =       ActivityTestRule(Activity1::class.java)'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 'var activityRule：ActivityTestRule <Activity1> = ActivityTestRule（Activity1
    :: class.java）'
- en: private val myApplication = getApplicationContext<MyApplication>()
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: private val myApplication = getApplicationContext<MyApplication>()
- en: '@Before'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '@Before'
- en: fun setUp() {
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: fun setUp（）{
- en: IdlingRegistry.getInstance().register(myApplication           .countingIdlingResource)
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: IdlingRegistry.getInstance（）。register（myApplication.countingIdlingResource）
- en: '}'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun verifyFlow() {
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: fun verifyFlow() {
- en: onView(withId(R.id.activity_1_button)).perform(click())
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.activity_1_button））。perform（click（））
- en: onView(withId(R.id.activity_2_text_view))          .check(matches(withText(myApplication             .getString(R.string.opened_after_x_seconds,
    1))))
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: onView（withId（R.id.activity_2_text_view））.check（matches（withText（myApplication.getString（R.string.opened_after_x_seconds，1））））
- en: '}'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE92]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'class TestRandomizer(random: Random) : Randomizer(random) {'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 类TestRandomizer（随机：随机）：随机器（随机）
- en: 'override fun getTimeToWait(): Int {'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖fun getTimeToWait（）：Int {
- en: return 1
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: return 1
- en: '}'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE93]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'open class MyApplication : Application() {'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: open class MyApplication：Application（）{
- en: val countingIdlingResource =       CountingIdlingResource("Timer resource")
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: val countingIdlingResource = CountingIdlingResource（“Timer resource”）
- en: 'lateinit var synchronizer: Synchronizer'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: lateinit var synchronizer：Synchronizer
- en: override fun onCreate() {
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖fun onCreate（）{
- en: super.onCreate()
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: super.onCreate（）
- en: synchronizer = Synchronizer(createRandomizer(), Timer(),           countingIdlingResource)
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: synchronizer = Synchronizer（createRandomizer（），Timer（），countingIdlingResource）
- en: '}'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: open fun createRandomizer() = Randomizer(Random())
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: open fun createRandomizer（）= Randomizer（Random（））
- en: '}'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE94]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'class TestMyApplication : MyApplication() {'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 类TestMyApplication：MyApplication（）{
- en: 'override fun createRandomizer(): Randomizer {'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖fun createRandomizer（）：Randomizer {
- en: return TestRandomizer(Random())
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 返回TestRandomizer（Random（））
- en: '}'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE95]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'class MyApplicationTestRunner : AndroidJUnitRunner() {'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: class MyApplicationTestRunner：AndroidJUnitRunner（）{
- en: '@Throws(Exception::class)'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '@Throws（Exception :: class）'
- en: override fun newApplication(
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖fun newApplication（
- en: 'cl: ClassLoader?,'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: cl：ClassLoader？
- en: 'className: String?,'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: className：String？
- en: 'context: Context?'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文：上下文？
- en: '): Application? {'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: ）：Application？
- en: return super.newApplication(cl,           TestMyApplication::class.java.name,
    context)
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 'return super.newApplication（cl，TestMyApplication :: class.java.name，context）'
- en: '}'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE96]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: android {
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: android {
- en: '...'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: defaultConfig {
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: defaultConfig {
- en: '...'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: testInstrumentationRunner            "com.android.testable.myapplication            .MyApplicationTestRunner"
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: testInstrumentationRunner "com.android.testable.myapplication.MyApplicationTestRunner"
- en: '}'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE97]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: testImplementation 'junit:junit:4.13.1'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: testImplementation 'junit:junit:4.13.1'
- en: '[PRE98]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: class Adder {
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 类Adder {
- en: 'fun sum(n: Int): Int = 0'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int）：Int = 0
- en: '}'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE99]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: class AdderTest {
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 类AdderTest {
- en: private val adder = Adder()
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: private val adder = Adder（）
- en: '@Test'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun sumSuccess() {
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: fun sumSuccess（）{
- en: assertEquals(1, adder.sum(1))
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（1，adder.sum（1））
- en: assertEquals(3, adder.sum(2))
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（3，adder.sum（2））
- en: assertEquals(55, adder.sum(10))
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（55，adder.sum（10））
- en: assertEquals(210, adder.sum(20))
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（210，adder.sum（20））
- en: assertEquals(2305843008139952128L, adder.sum(Int.MAX_VALUE))
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（2305843008139952128L，adder.sum（Int.MAX_VALUE））
- en: '}'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: fun sumError(){
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: fun sumError（）{
- en: assertEquals(-1, adder.sum(0))
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（-1，adder.sum（0））
- en: assertEquals(-1, adder.sum(-1))
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: assertEquals（-1，adder.sum（-1））
- en: '}'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE100]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: class Adder {
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 类添加器{
- en: 'fun sum(n: Int): Long {'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int）：Long {
- en: var result = 0L
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: var result = 0L
- en: for (i in 1..n) {
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: for（i in 1..n）{
- en: result += i
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: result += i
- en: '}'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return result
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: return result
- en: '}'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE101]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: class Adder {
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 类Adder {
- en: 'fun sum(n: Int): Long {'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int）：Long {
- en: return (n * (n.toLong() + 1)) / 2
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 返回（n *（n.toLong（）+ 1））/ 2
- en: '}'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE102]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: class Adder {
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 类Adder {
- en: 'fun sum(n: Int): Long {'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: fun sum（n：Int）：Long {
- en: return if (n > 0) (n * (n.toLong() + 1)) / 2 else -1
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（n> 0）（n *（n.toLong（）+ 1））/ 2 else -1```
- en: '}'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If we run the tests now, we should see them all passing, similar to the following figure:![Figure
    9.12: Passing tests for Exercise 9.04'
  id: totrans-909
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果现在运行测试，我们应该看到它们全部通过，类似于以下图：![图9.12：练习9.04的通过测试
- en: '](img/B15216_09_12.jpg)'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: ']（img/B15216_09_12.jpg）'
- en: 'Figure 9.12: Passing tests for Exercise 9.04'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12：练习9.04的通过测试
- en: In this exercise, we have applied the concept of TDD to a very small example
    to demonstrate how the technique can be used. We have observed how starting from
    skeleton code, we can create a suite of tests to verify our conditions, and how
    by constantly running tests, we improved the code until a point where all the
    tests pass. As you have probably noticed, the concept isn't an intuitive one.
    Some developers find it hard to define how big skeleton code should be in order
    to start creating the test cases, while others, out of habit, focus on writing
    the code first and then developing the test. In either case, developers will need
    a lot of practice with the technique until it's properly mastered.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们已经将TDD的概念应用到了一个非常小的示例中，以演示如何使用该技术。我们已经观察到，从骨架代码开始，我们可以创建一套测试来验证我们的条件，通过不断运行测试，我们改进了代码，直到所有测试都通过的地步。您可能已经注意到，这个概念并不直观。一些开发人员很难定义骨架代码应该有多大，才能开始创建测试用例，而其他人则出于习惯，专注于先编写代码，然后再开发测试。无论哪种情况，开发人员都需要通过该技术进行大量练习，直到熟练掌握为止。
- en: 'Activity 9.01: Developing with TDD'
  id: totrans-913
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Activity 9.01：使用TDD开发
- en: 'Using the TDD approach, develop an application that contains three activities
    and works as follows:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD方法，开发一个包含三个活动并按以下方式工作的应用程序：
- en: In activity 1, you will display a numeric `EditText` element and a button. When
    the button is clicked, the number in `EditText` will be passed to activity 2.
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在活动1中，您将显示一个数字`EditText`元素和一个按钮。单击按钮后，将`EditText`中的数字传递给活动2。
- en: Activity 2 will generate a list of items asynchronously. The number of items
    will be represented by the number passed from activity 1\. You can use the `Timer`
    class with a delay of 1 second. Each item in the list will display the text `Item
    x`. `x` is the position in the list. When an item is clicked, you should pass
    the clicked item to activity 3.
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Activity 2将异步生成项目列表。项目的数量将由从活动1传递的数字表示。您可以使用`Timer`类，延迟1秒。列表中的每个项目将显示文本`Item
    x`。 `x`是列表中的位置。单击项目时，应将单击的项目传递给活动3。
- en: Activity 3 will display the text `You clicked y`. `y` is the text of the item
    the user has clicked.
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动3将显示文本`You clicked y`。 `y`是用户单击的项目的文本。
- en: 'The tests the app will have will be the following:'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将具有以下测试：
- en: Unit tests with Mockito and `mockito-kotlin` annotated with `@SmallTest`
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mockito和`mockito-kotlin`进行单元测试，注释为`@SmallTest`
- en: Integration tests with Robolectric and Espresso annotated with `@MediumTest`
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robolectric和Espresso进行集成测试，并用`@MediumTest`进行注释
- en: UI tests with Espresso annotated with `@LargeTest` and using the Robot pattern
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Espresso进行UI测试，并用`@LargeTest`进行注释，使用Robot模式
- en: Run the test commands from the command line.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行测试命令。
- en: 'In order to complete this activity, you need to take the following steps:'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成此活动，您需要采取以下步骤：
- en: You will need Android Studio 4.1.1 or higher with Kotlin 1.4.21 or higher for
    the Parcelize Kotlin plugin
  id: totrans-924
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要Android Studio 4.1.1或更高版本，以及Kotlin 1.4.21或更高版本的Parcelize Kotlin插件
- en: Create the three activities and the UI for each of them.
  id: totrans-925
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个活动和其UI创建三个活动。
- en: 'In the `androidTest` folder, create three robots, one for each activity:'
  id: totrans-926
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`androidTest`文件夹中，为每个活动创建三个机器人：
- en: Robot 1 will contain the interaction with `EditText` and the button.
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robot 1将包含与`EditText`和按钮的交互。
- en: Robot 2 will assert the number of items on the screen and interaction with an
    item in the list.
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robot 2将断言屏幕上的项目数量和与列表中项目的交互。
- en: Robot 3 will assert the text displayed in `TextView`.
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robot 3将断言`TextView`中显示的文本。
- en: Create an instrumented test class that will have one test method using the preceding
    robots.
  id: totrans-930
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个仪器测试类，其中将使用前述机器人进行一个测试方法。
- en: Create an `Application` class that will hold instances to all the classes that
    will be unit tested.
  id: totrans-931
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Application`类，其中将保存将进行单元测试的所有类的实例。
- en: Create three classes representing integration tests, one for each of the activities.
    Each of these classes will contain one test method for the interactions and data
    loading. Each integration test will assert the intents passed between the activities.
  id: totrans-932
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建三个表示集成测试的类，每个类对应一个活动。每个集成测试类将包含一个测试方法，用于交互和数据加载。每个集成测试将断言在活动之间传递的意图。
- en: Create a class that will provide the text required for the UI. It will have
    a reference to a `Context` object and will contain two methods that will provide
    the text for the UI, which will return an empty string.
  id: totrans-933
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类，用于提供UI所需的文本。它将引用一个`Context`对象，并包含两个方法，用于为UI提供文本，将返回一个空字符串。
- en: Create the test for the preceding class in which the two methods are tested.
  id: totrans-934
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建前述类的测试，在其中测试两种方法。
- en: Implement the class in order for the preceding tests to pass.
  id: totrans-935
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现类以使前述测试通过。
- en: Create a class that will be responsible for loading the list in `Activity2`
    and provide an empty method for loading. The class will have a reference to the
    timer and the idling resource. Here, you should also create a data class that
    will represent the model for `RecyclerView`.
  id: totrans-936
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类，负责在`Activity2`中加载列表，并提供一个加载的空方法。该类将引用计时器和空闲资源。在这里，您还应该创建一个数据类，用于表示`RecyclerView`的模型。
- en: Create a unit test for the preceding class.
  id: totrans-937
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为前述类创建一个单元测试。
- en: Create the implementation for the preceding class and run the unit tests until
    they pass.
  id: totrans-938
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建前述类的实现并运行单元测试，直到它们通过。
- en: In the `Application` class, instantiate the classes that were unit tested and
    start using them in your activities. Do this until your integration tests pass.
  id: totrans-939
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Application`类中，实例化已进行单元测试的类，并开始在您的活动中使用它们。直到您的集成测试通过为止。
- en: Provide `IntegrationTestApplication`, which will return a new implementation
    of the class responsible for loading. This is to avoid making your integration
    test for activity 2 wait until loading is complete.
  id: totrans-940
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供`IntegrationTestApplication`，它将返回负责加载的类的新实现。这是为了避免使您的活动2的集成测试等待加载完成。
- en: Provide `UiTestApplication`, which will again reduce the loading time of your
    models and connect the idling resource to Espresso. Implement the remaining work
    in order for the UI test to pass.
  id: totrans-941
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供`UiTestApplication`，它将再次减少模型的加载时间，并将空闲资源连接到Espresso。实现剩下的工作以使UI测试通过。
- en: Note
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：http://packt.live/3sKj1cp
- en: Summary
  id: totrans-944
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the different types of testing and the frameworks
    available for implementing these tests. We also took a look at the testing environment
    and how to structure it for each environment, as well as structuring your code
    in multiple components that can be individually unit tested. We analyzed different
    ways to test code, how we should approach testing, and how, by looking at different
    test results, we can improve our code. With TDD, we learned that by starting with
    testing, we can write our code faster and ensure it is less error-prone. The activity
    is where all these concepts came together into building a simple Android application,
    and we can observe how, by adding tests, the development time increases, but this
    pays off in the long term by eliminating possible bugs that appear when the code
    is modified.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了不同类型的测试和可用于实施这些测试的框架。我们还看了测试环境以及如何为每个环境构建结构，以及如何将代码结构化为可以单独进行单元测试的多个组件。我们分析了测试代码的不同方式，我们应该如何进行测试，以及通过查看不同的测试结果，我们如何改进我们的代码。通过TDD，我们了解到通过从测试开始，我们可以更快地编写代码，并确保它更少出错。活动是所有这些概念汇集在一起构建一个简单的Android应用程序的地方，我们可以观察到，通过添加测试，开发时间增加了，但这在长期内通过消除在修改代码时出现的可能错误而得到了回报。
- en: The frameworks we have studied are some of the most common ones, but there are
    others that build on top of these and are used by developers in their projects,
    including mockk (a mocking library designed for Kotlin that takes advantage of
    a lot of the features of the language), Barista (written on top of Espresso and
    simplifies the syntax of UI tests), screenshot tests (which take screenshots of
    your UI tests and compare them to verify no bugs were introduced), UIAutomator,
    and monkeyrunner (which executes UI tests without requiring access to the application's
    code, but are written on top of it), Spoon (allows UI tests to be executed in
    parallel on multiple emulators to reduce time on testing), and Firebase Test Lab
    (allows tests to be executed in the cloud).
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习过的框架是一些最常见的框架，但还有其他一些建立在这些框架之上并被开发人员在他们的项目中使用的框架，包括mockk（一种为Kotlin设计的模拟库，充分利用了语言的许多特性），Barista（建立在Espresso之上，简化了UI测试的语法），屏幕截图测试（对UI测试进行截图并进行比较以验证是否引入了错误），UIAutomator和monkeyrunner（执行UI测试而无需访问应用程序代码，但是建立在其之上），Spoon（允许在多个模拟器上并行执行UI测试以减少测试时间），以及Firebase测试实验室（允许在云中执行测试）。
- en: 'Think of all the concepts presented here as building blocks that fit into two
    processes present in the software engineering world: Automation and continuous
    integration. Automation takes redundant and repetitive work out of the hands of
    developers and puts it into the hands of machines. Instead of having a team of
    quality assurance people testing your application to make sure the requirements
    are met, you can instruct a machine through a variety of tests and test cases
    to test the application instead and just have one person reviewing the results
    of the tests. Continuous integration builds on the concept of automation in order
    to verify your code the moment you submit it for review from other developers.
    A project with continuous integration would have a setup along the following lines:
    A developer submits work for review in a source control repository such as GitHub.'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 将这里介绍的所有概念视为适用于软件工程世界中的两个过程的构建块：自动化和持续集成。自动化将开发人员手中的冗余和重复工作交给机器。与其让一组质量保证人员测试您的应用程序以确保满足要求，不如通过各种测试和测试用例指示机器来测试应用程序，只需一个人审查测试结果。持续集成建立在自动化的概念之上，以便在您提交代码进行其他开发人员审查时立即验证代码。具有持续集成的项目将按以下方式设置：开发人员将工作提交到GitHub等源代码存储库进行审查。
- en: A machine in the cloud would then start executing the tests for the entire project,
    making sure that nothing was broken and the developer can move on to a new task.
    If the tests pass, then the rest of the developers can review the code, and when
    it is correct, it can be merged and a new build can be created in the cloud and
    distributed to the rest of the team and the testers. All of this takes place while
    the initial developer can safely work on something else. If anything fails in
    the process, then they can pause the new task and go and address any issues in
    their work. The continuous integration process can then be expanded into continuous
    delivery, where similar automation can be set up when preparing a submission into
    Google Play that can be handled almost entirely by machines with minor involvement
    from developers. In the chapters that follow, you will learn about how to organize
    your code when building more complex applications that use the storage capabilities
    of the device and connect to the cloud to request data. Each of those components
    can be individually unit tested and you can apply integration tests to assert
    a successful integration of multiple components.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，云中的一台机器将开始执行整个项目的测试，确保没有任何问题，开发人员可以继续进行新的任务。如果测试通过，那么其他开发人员可以审查代码，当正确时，可以合并并在云中创建新的构建并分发给团队的其他成员和测试人员。在初始开发人员可以安全地进行其他工作的同时进行所有这些操作。如果在过程中出现任何失败，那么他们可以暂停新任务并解决工作中的任何问题。然后可以将持续集成过程扩展为持续交付，在准备提交到Google
    Play时可以设置类似的自动化，几乎完全由机器处理，开发人员只需进行少量参与。在接下来的章节中，您将了解如何在构建使用设备存储功能并连接到云以请求数据的更复杂的应用程序时组织代码。每个组件都可以进行单独的单元测试，并且可以应用集成测试来断言多个组件的成功集成。
