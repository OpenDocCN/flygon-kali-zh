- en: '*Chapter 2*: Dnotebook - An Interactive Computing Environment for JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：Dnotebook - 用于JavaScript的交互式计算环境'
- en: The idea of making our code expressive enough for humans to read and not just
    for machines to consume was well pioneered by Donald Knuth, who also wrote a book
    about it called *Literate Programming* ([https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S](https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S)).
    Tools such as Jupyter Notebook give equal weight to prose and code, hence programmers
    and researchers are free to express themselves extensively through code and text
    (including images and workflows).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使我们的代码足够表达人类可读，而不仅仅是供机器消费的想法是由Donald Knuth开创的，他还写了一本名为《文学编程》的书([https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S](https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S))。诸如Jupyter
    Notebook之类的工具同样重视散文和代码，因此程序员和研究人员可以通过代码和文本（包括图像和工作流程）进行广泛表达。
- en: In this chapter, you're going to learn about **Dnotebook** – an interactive
    coding environment for JavaScript. You will learn how to install Dnotebook locally.
    You will also learn how to write code and Markdown in it. In addition, you will
    learn how to save and import the saved notebook.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习有关**Dnotebook**的知识 - 用于JavaScript的交互式编码环境。您还将学习如何在本地安装Dnotebook。此外，您还将学习如何在其中编写代码和Markdown。此外，您还将学习如何保存和导入已保存的笔记本。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to Dnotebook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dnotebook介绍
- en: Setup and installation of Dnotebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dnotebook的设置和安装
- en: Basic concepts behind interactive computing in Dnotebook
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dnotebook中交互式计算的基本概念
- en: Writing interactive code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写交互式代码
- en: Working with Markdown cells
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Markdown单元格
- en: Saving notebooks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存笔记本
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To successfully follow along in this chapter, you need to have **Node.js** and
    a modern browser such as Chrome, Safari, Firefox, or Opera installed on your computer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功跟随本章内容，您需要在计算机上安装**Node.js**和现代浏览器，如Chrome、Safari、Firefox或Opera。
- en: 'To install Node.js, you can follow the official guide here: [https://nodejs.org/en/](https://nodejs.org/en/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Node.js，您可以在这里按照官方指南进行：[https://nodejs.org/en/](https://nodejs.org/en/)。
- en: The code for this chapter is available and can be cloned from GitHub at [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可在GitHub上克隆，网址为[https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02)
- en: Introduction to Dnotebook
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dnotebook介绍
- en: Over the past few years in the field of data science, interactive computing
    environments such as Jupyter Notebook and JupyterLab have actually made a huge
    impact in terms of how code is shared, and this has enhanced fast and rapid iterations
    of ideas.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年的数据科学领域，诸如Jupyter Notebook和JupyterLab之类的交互式计算环境实际上已经对代码共享产生了巨大影响，这增强了想法的快速迭代。
- en: In recent times, data science is moving towards the browser side, in order to
    support diverse users such as web developers. This means that a lot of mature
    data science tooling available in the Python ecosystem needed to be ported or
    made available in JavaScript as well. Following this line of reasoning, we, the
    authors of this book, as well as the creators of Danfo.js, decided to create a
    new version of the Jupyter Notebook specifically targeted at the JavaScript ecosystem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，数据科学正朝着浏览器端发展，以支持Web开发人员等各种用户。这意味着Python生态系统中许多成熟的数据科学工具需要在JavaScript中进行移植或提供。基于这一推理，我们本书的作者以及Danfo.js的创建者决定创建一个专门针对JavaScript生态系统的Jupyter
    Notebook的新版本。
- en: 'Dnotebook, as we have called it, helps you to perform quick and interactive
    experimentation/prototyping in JavaScript. That means you can write code and view
    the results instantly in an interactive and notebook-like manner as seen in the
    following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所称呼的，Dnotebook可以帮助您在JavaScript中进行快速和交互式的实验/原型设计。这意味着您可以以交互式和笔记本式的方式编写代码并立即查看结果，就像下面的屏幕截图所示：
- en: '![Figure 2.1 – Sample Interactive coding using Dnotebook'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 - 使用Dnotebook进行交互式编码示例'
- en: '](img/B17076_02_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_01.jpg)'
- en: Figure 2.1 – Sample Interactive coding using Dnotebook
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 - 使用Dnotebook进行交互式编码示例
- en: 'Dnotebook can be used in numerous areas and for different things such as the
    following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Dnotebook可以用于许多领域和不同的事物，例如以下内容：
- en: '**Data science/analysis**: It can help you easily perform interactive data
    exploration and analysis using efficient JavaScript packages such as *Danfo.js*,
    *Plotly.js*, *Vega*, *Imagecook*, and so on.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据科学/分析**：它可以帮助您使用高效的JavaScript包（如*Danfo.js*、*Plotly.js*、*Vega*、*Imagecook*等）轻松进行交互式数据探索和分析。'
- en: '**Machine learning**: It can help you easily build, train, and prototype machine
    learning models using machine learning libraries such as *Tensorflow.js*.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习**：它可以帮助您使用机器学习库（如*Tensorflow.js*）轻松构建、训练和原型化机器学习模型。'
- en: '**Learning JavaScript interactively**: It can help you learn or teach JavaScript
    in an interactive and visual style. This can foster learning and understanding.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式学习JavaScript**：它可以帮助您以交互式和可视化的方式学习或教授JavaScript。这有助于学习和理解。'
- en: '**Plain experimentation/prototyping**: Any experimentation that can be written
    in JavaScript can run on Dnotebook, hence this can aid quick experimentation with
    ideas.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纯粹的实验/原型设计**：任何可以用JavaScript编写的实验都可以在Dnotebook上运行，因此这可以帮助快速实验想法。'
- en: Now that you have an idea of what Dnotebook is, let's learn how to set up and
    use it locally.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Dnotebook是什么，让我们学习如何在本地设置和使用它。
- en: Setup and installation of Dnotebook
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dnotebook的设置和安装
- en: 'To get Dnotebook installed and running locally, you need to ensure that Node.js
    is installed. Once Node.js is installed, you can easily install Dnotebook by running
    the following command in your terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地安装和运行Dnotebook，您需要确保已安装Node.js。安装Node.js后，您可以通过在终端中运行以下命令轻松安装Dnotebook：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command installs Dnotebook globally. This is the recommended way
    of installing it, as it ensures that the Dnotebook server can be started from
    anywhere on our computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会全局安装Dnotebook。这是推荐的安装方式，因为它确保了Dnotebook服务器可以从计算机的任何位置启动。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use Dnotebook online without installing it; check out the Dnotebook
    playground ([https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在不安装Dnotebook的情况下在线使用它；请查看Dnotebook游乐场（[https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo)）。
- en: 'After installation, you can start the server by running the following in a
    terminal/command prompt:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以通过在终端/命令提示符中运行以下命令来启动服务器：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will open up a tab as shown in the following screenshot in your
    default browser at port http://localhost:4400:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在默认浏览器中打开一个选项卡，端口为http://localhost:4400，如下截图所示：
- en: '![Figure 2.2 – Dnotebook home page'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – Dnotebook主页'
- en: '](img/B17076_02_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_02.jpg)'
- en: Figure 2.2 – Dnotebook home page
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – Dnotebook主页
- en: The opened page is the default page for the Dnotebook interface, and from here
    you can start writing JavaScript and Markdown.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开的页面是Dnotebook界面的默认页面，从这里您可以开始编写JavaScript和Markdown。
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are currently using **Dnotebook version 0.1.1**, and as such, when using
    this book in the future, you might notice some minor changes, especially in the
    UI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前使用的是**Dnotebook版本0.1.1**，因此，在将来使用本书时，您可能会注意到一些细微的变化，特别是在用户界面方面。
- en: Basic concepts behind interactive computing in Dnotebook
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dnotebook中交互式计算的基本概念
- en: In order to write interactive code/Markdown in Dnotebook, you need to understand
    some concepts such as cells and persistency/state. We start this section by explaining
    these concepts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Dnotebook中编写交互式代码/Markdown，您需要了解一些概念，比如单元格和持久性/状态。我们从解释这些概念开始这一部分。
- en: Cells
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元格
- en: 'A cell in Dnotebook is a unit block where code or text can be written in order
    to be executed. The following is an example screenshot showing code and Markdown
    cells:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Dnotebook中的单元格是一个可以写入代码或文本以便执行的单元块。以下是一个示例截图，显示了代码和Markdown单元格：
- en: '![Figure 2.3 – Empty code and Markdown cells in Dnotebook'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.3 – Dnotebook中的空代码和Markdown单元格'
- en: '](img/B17076_02_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_03.jpg)'
- en: Figure 2.3 – Empty code and Markdown cells in Dnotebook
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – Dnotebook中的空代码和Markdown单元格
- en: 'Each cell has edit buttons that can be used for different purposes, as you''ll
    see in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单元格都有编辑按钮，可以用于不同的目的，如下截图所示：
- en: '![Figure 2.4 – Action buttons available in each cell'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.4 – 每个单元格中可用的操作按钮'
- en: '](img/B17076_02_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_04.jpg)'
- en: Figure 2.4 – Action buttons available in each cell
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – 每个单元格中可用的操作按钮
- en: 'Now, let''s understand what these buttons do:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解一下这些按钮的作用：
- en: '**Run**: The **Run** button can be used to execute a cell in order to show
    the output.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：**运行**按钮可用于执行单元格以显示输出。'
- en: '**Add Code**: The add code button has two variants (up and down) specified
    by the arrow direction. They can be used to add a code cell above or below the
    current cell.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加代码**：添加代码按钮有两种变体（向上和向下），由箭头方向指定。它们可以用于在当前单元格上方或下方添加代码单元格。'
- en: '**Add Markdown**: The add markdown button, like the add code button, has two
    variants to add Markdown cells either below or above the current cell.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加Markdown**：添加Markdown按钮与添加代码按钮类似，有两种变体，可以在当前单元格下方或上方添加Markdown单元格。'
- en: '**Delete**: As the name suggests, this button can be used to delete a cell.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：顾名思义，此按钮可用于删除单元格。'
- en: There are two types of cells, namely code cells and markdown cells.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种类型的单元格，即代码单元格和Markdown单元格。
- en: Code cells
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码单元格
- en: A **code cell** is a cell where any JavaScript code can be written and executed.
    The first cell in a new notebook is always a code cell, and we can test this out
    with the classic hello world example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码单元格**是一个可以编写和执行任何JavaScript代码的单元格。新笔记本中的第一个单元格始终是代码单元格，我们可以通过经典的hello world示例来测试这一点。'
- en: 'In your open Dnotebook, write the following command and click the **Run** button:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在您打开的Dnotebook中，写入以下命令并单击**运行**按钮：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Hovering over a code cell reveals the **Run** button. Alternatively, you can
    use the shortcut *Ctrl* + *Enter* in Windows or *Command* + *Enter* in Mac to
    run a code cell.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 悬停在代码单元格上会显示**运行**按钮。或者，您可以使用Windows中的快捷键*Ctrl* + *Enter*或Mac中的*Command* + *Enter*来运行代码单元格。
- en: 'The hello world code and output should be similar to the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: hello world的代码和输出应该与下面的截图类似：
- en: '![Figure 2.5 – A code cell and executed output in Dnotebook'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5 – Dnotebook中的代码单元格和执行输出'
- en: '](img/B17076_02_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_05.jpg)'
- en: Figure 2.5 – A code cell and executed output in Dnotebook
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – Dnotebook中的代码单元格和执行输出
- en: Next, let's understand Markdown cells.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解Markdown单元格。
- en: Markdown cells
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Markdown单元格
- en: '**Markdown cells** are similar to code cells except for the fact that they
    can only execute Markdown or text. This means that Markdown text can compile any
    text written with Markdown syntax.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Markdown单元格**与代码单元格类似，不同之处在于它们只能执行Markdown或文本。这意味着Markdown文本可以编译任何使用Markdown语法编写的文本。'
- en: 'A Markdown cell in Dnotebook is typically white and can be opened by clicking
    the **Text** button in an open cell. The **Text** button is typically available
    for each cell, as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Dnotebook中的Markdown单元格通常是白色的，可以通过单击打开单元格中的**文本**按钮来打开。**文本**按钮通常适用于每个单元格，如下截图所示：
- en: '![Figure 2.6 – Opening a Markdown cell in Dnotebook'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6 – 在Dnotebook中打开一个Markdown单元格'
- en: '](img/B17076_02_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_06.jpg)'
- en: Figure 2.6 – Opening a Markdown cell in Dnotebook
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 在Dnotebook中打开一个Markdown单元格
- en: 'Clicking on the **Text** button opens a Markdown cell, as shown in the following
    screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**文本**按钮会打开一个Markdown单元格，如下截图所示：
- en: '![Figure 2.7 – Writing Markdown text in a Markdown cell'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 – 在Markdown单元格中编写Markdown文本'
- en: '](img/B17076_02_07.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_07.jpg)'
- en: Figure 2.7 – Writing Markdown text in a Markdown cell
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 在Markdown单元格中编写Markdown文本
- en: 'Here, you can write any Markdown-flavored text, and when executed, the result
    is compiled to text and shown in place of the Markdown cell as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以编写任何Markdown格式的文本，当执行时，结果将被编译为文本并显示在Markdown单元格的位置上，如下所示：
- en: '![Figure 2.8 – Output of a Markdown cell'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.8 – Markdown 单元格的输出'
- en: '](img/B17076_02_08.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_08.jpg)'
- en: Figure 2.8 – Output of a Markdown cell
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – Markdown 单元格的输出
- en: Now, let's talk about another important concept in interactive programming,
    called **persistence**/**state**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈交互式编程中的另一个重要概念，称为**持久性**/**状态**。
- en: Persistence/state
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久性/状态
- en: Persistence or state in interactive computing is the ability of environment
    variables or data to outlive (persist) the cell that created it. This means variables
    declared/created in one cell are available to another irrespective of the position
    of the cell.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式计算中的持久性或状态是环境变量或数据在创建它的单元格之外继续存在（持续）的能力。这意味着在一个单元格中声明/创建的变量可以在另一个单元格中使用，而不管单元格的位置如何。
- en: Each instance of a Dnotebook runs a persistent state, and variables declared
    in a cell without the `let` and `const` declarations are available to all cells.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Dnotebook 实例都运行一个持久状态，而在没有 `let` 和 `const` 声明的单元格中声明的变量可供所有单元格使用。
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two main ways we encourage you to declare variables when working in
    Dnotebook.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dnotebook 中工作时，我们鼓励您以两种主要方式声明变量。
- en: 'Option 1 – Without a declaration keyword (preferred method):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 选项1 – 没有声明关键字（首选方法）：
- en: '`food_price = 100`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`food_price = 100`'
- en: '`clothing_price = 200`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`clothing_price = 200`'
- en: '`total = food_price + clothing_price`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`total = food_price + clothing_price`'
- en: 'Option 2 – With the `var` global keyword (this works but is not preferable):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选项2 – 使用 `var` 全局关键字（这样做可以，但不建议）：
- en: '`var food_price = 100`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`var food_price = 100`'
- en: '`var clothing_price = 200`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`var clothing_price = 200`'
- en: '`var total = food_price + clothing_price`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`var total = food_price + clothing_price`'
- en: Using keywords such as `let` or `const` makes the variables inaccessible in
    a new cell.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `let` 或 `const` 等关键字会使变量在新单元格中无法访问。
- en: 'To understand this better, let''s declare some variables and try to access
    them in multiple cells created after or before:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们声明一些变量，并尝试在之后或之前创建的多个单元格中访问它们：
- en: 'Create a new cell in your open notebook and add the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的打开笔记本中创建一个新单元格，并添加以下代码：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run this code cell and you''ll see the sum printed just below the cell, as
    seen in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码单元格，您将看到总和打印在单元格下方，如下面的截图所示：
- en: '![Figure 2.9 – Simple code to add two numbers'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.9 – 简单的代码来相加两个数字'
- en: '](img/B17076_02_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_09.jpg)'
- en: Figure 2.9 – Simple code to add two numbers
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 简单的代码来相加两个数字
- en: 'Next, create a new cell following your first cell, by clicking on a code cell
    button, and try to use the `sum` variable as shown in the following code block:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过单击代码单元格按钮，在第一个单元格后创建一个新单元格，并尝试使用 `sum` 变量，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By executing the preceding cell, you get the output of `85`. This means that
    the variable sum from the first cell persists to the second cell as well as any
    other cell you''ll create, as seen in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行前面的单元格，您将得到 `85` 的输出。这意味着第一个单元格中的变量 sum 也会持续到第二个单元格以及您将创建的任何其他单元格，如下面的截图所示：
- en: '![Figure 2.10 – Two code cells sharing a persistent state'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.10 – 两个共享持久状态的代码单元'
- en: '](img/B17076_02_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_10.jpg)'
- en: Figure 2.10 – Two code cells sharing a persistent state
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 两个共享持久状态的代码单元
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Markdown cells do not persist variables, as they do not execute JavaScript code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 单元格不会保留变量，因为它们不执行 JavaScript 代码。
- en: Now that you understand what cells and persistency are, you can now easily write
    interactive code in Dnotebook, and in the next section, we'll show you how to
    do that.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了单元格和持久性是什么，您现在可以在 Dnotebook 中轻松编写交互式代码，在下一节中，我们将向您展示如何做到这一点。
- en: Writing interactive code
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写交互式代码
- en: In this section, we'll highlight some important things to know when writing
    interactive code in Dnotebook.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将强调在 Dnotebook 中编写交互式代码时需要了解的一些重要事项。
- en: Loading external packages
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载外部包
- en: Importing external packages into your notebook is very important when writing
    JavaScript, and as such, Dnotebook has an inbuilt function called `load_package`
    for doing this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 JavaScript 时，将外部包导入笔记本非常重要，因此 Dnotebook 具有一个名为 `load_package` 的内置函数来执行此操作。
- en: 'The `load_package` method helps you to easily add external packages/libraries
    to your notebook via their CDN links. For instance, to load `Tensorflow.js` and
    `Plotly.js`, you can pass their CDN links to the `load_package` function, as shown
    in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_package` 方法可以帮助您通过它们的CDN链接轻松地将外部包/库添加到您的笔记本中。例如，要加载 `Tensorflow.js` 和
    `Plotly.js`，您可以将它们的CDN链接传递给 `load_package` 函数，如下面的代码所示：'
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This loads the packages and adds them to the notebook state so they can be accessed
    from any cell. In the following section, we use the `Plotly` library we just imported.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载包并将它们添加到笔记本状态中，以便可以从任何单元格中访问它们。在下一节中，我们将使用刚刚导入的 `Plotly` 库。
- en: 'Add the following code to a new cell in your notebook:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到笔记本中的新单元格中：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Executing the code cell in the preceding section will display a plot, as shown
    in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面部分的代码单元格将显示一个图表，如下面的截图所示：
- en: '![Figure 2.11 – Making a plot with an external package'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.11 – 使用外部包制作图表'
- en: '](img/B17076_02_11.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_11.jpg)'
- en: Figure 2.11 – Making a plot with an external package
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 使用外部包制作图表
- en: Hence, by using `load_package`, you can add any external JavaScript package
    of your choice and work with it interactively in Dnotebook.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用 `load_package`，您可以添加任何您选择的外部 JavaScript 包，并在 Dnotebook 中进行交互操作。
- en: Loading CSV files
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载 CSV 文件
- en: Getting data into your notebook, especially into DataFrames, is very important.
    As such, another built-in function we introduce here is `load_csv`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据导入笔记本，特别是导入到数据框中，非常重要。因此，我们在这里介绍的另一个内置函数是 `load_csv`。
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: DataFrames represent data in rows and columns. They are analogous to a spreadsheet
    or a database collection of rows and columns. We'll cover DataFrames and Series
    in depth in [*Chapter 3*](B17076_03_ePub_RK.xhtml#_idTextAnchor066), *Getting
    Started with Danfo.js*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框以行和列的形式表示数据。它们类似于电子表格或数据库中的行和列集合。我们将在 [*第3章*](B17076_03_ePub_RK.xhtml#_idTextAnchor066)
    中深入介绍数据框和系列，*使用 Danfo.js 入门*。
- en: The `load_csv` function helps you load CSV files over the internet into the
    `Danfo.js` DataFrame asynchronously. You should use this instead of Danfo's built-in
    `read_csv` function when reading big files and you want to track the progress.
    This is because `load_csv` displays a spinner on the navbar to indicate the progress.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_csv`函数帮助您异步将CSV文件加载到`Danfo.js` DataFrame中。当读取大文件并且想要跟踪进度时，您应该使用这个函数，而不是Danfo的内置`read_csv`函数。这是因为`load_csv`会在导航栏上显示一个旋转器来指示进度。'
- en: 'Let''s understand this better with an example. In a new code cell, add the
    following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子更好地理解这一点。在一个新的代码单元格中，添加以下代码：
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: On executing the cell, if you look at the top-right corner, you'll notice a
    spinner that indicates the progress of the data loading.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行单元格后，如果您查看右上角，您会注意到一个旋转器，指示数据加载的进度。
- en: After executing the cell, you can interact with the dataset as you would with
    a Danfo DataFrame. For instance, you can use another built-in function `table`
    to easily display the data in tabular format.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行单元格后，您可以像处理Danfo DataFrame一样与数据集交互。例如，您可以使用另一个内置函数`table`来轻松地以表格格式显示数据。
- en: 'In a new cell, add the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新的单元格中，添加以下代码：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On executing, you should see a table of your data, as shown in the following
    screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，您应该会看到数据表，如下截图所示：
- en: '![Figure 2.12 – Loading and displaying a CSV file'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.12–加载和显示CSV文件'
- en: '](img/B17076_02_12.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_12.jpg)'
- en: Figure 2.12 – Loading and displaying a CSV file
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12–加载和显示CSV文件
- en: Next, we'll briefly look at another built-in function that aids the displaying
    of plots in your notebook.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将简要介绍另一个内置函数，它有助于在笔记本中显示图表。
- en: Getting a div container for plots
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取绘图的div容器
- en: In order to display plots, most plotting libraries need some sort of container
    or HTML `div`. This is required for plotting using Danfo.js and the Plotly.js
    libraries. In order to make it easier to access an output `div`, Dnotebook comes
    with the `this_div` function built in.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示图表，大多数绘图库都需要某种容器或HTML `div`。这是使用Danfo.js和Plotly.js库进行绘图所必需的。为了更容易地访问输出`div`，Dnotebook内置了`this_div`函数。
- en: 'The `this_div` function will return the HTML ID of the current code cell''s
    output. For example, in the following code, we pass the `this_div` value to the
    `plot` method of a DataFrame:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`this_div`函数将返回当前代码单元格输出的HTML ID。例如，在以下代码中，我们将`this_div`的值传递给DataFrame的`plot`方法：'
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will pass the current cell''s `div` ID to the `plot` method of the DataFrame,
    and when executed, will display the resulting plot, as shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这将当前单元格的`div` ID传递给DataFrame的`plot`方法，并在执行时显示生成的图表，如下截图所示：
- en: '![Figure 2.13 – Plotting a DataFrame'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13–绘制DataFrame
- en: '](img/B17076_02_13.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_13.jpg)'
- en: Figure 2.13 – Plotting a DataFrame
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13–绘制DataFrame
- en: Finally, in the following section, we'll talk briefly about printing values
    inside a `for` loop. This does not work as expected, and we'll explain why.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在下一节中，我们将简要讨论在`for`循环中打印值的问题。这不会按预期工作，我们将解释原因。
- en: Gotchas when using a for loop
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在使用for循环时要注意的事项
- en: 'When you write a `for` loop and try to print each element in a Dnotebook code
    cell, you get the last element only. This issue has to do with the way the console
    works in the browser. For instance, try executing the following code and observe
    the output:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当您编写`for`循环并尝试在Dnotebook代码单元格中打印每个元素时，您只会得到最后一个元素。这个问题与浏览器中控制台的工作方式有关。例如，尝试执行以下代码并观察输出：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to see all output when you run a `for` loop, especially when debugging
    in Dnotebook, you can use Dnotebook''s built-in `forlog` method. This method has
    been appended to the default console object, and can be used as shown in the following
    code block:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在运行`for`循环时看到所有输出，特别是在Dnotebook中进行调试，您可以使用Dnotebook内置的`forlog`方法。这个方法已经附加到默认的控制台对象上，并且可以像以下代码块中所示那样使用：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Executing the preceding code cell returns all values as shown in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的代码单元格将返回所有值，如下截图所示：
- en: '![Figure 2.14 – Comparing the for and forlog methods'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.14–比较for和forlog方法'
- en: '](img/B17076_02_14.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_14.jpg)'
- en: Figure 2.14 – Comparing the for and forlog methods
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14–比较for和forlog方法
- en: You'll notice that when using the `console.forlog` method, each output gets
    printed on a new line, just like the default behavior of `console.log` in a scripting
    environment.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，当使用`console.forlog`方法时，每个输出都会打印在新的一行上，就像在脚本环境中`console.log`的默认行为一样。
- en: In this section, we have covered some important functions and features that
    will be useful when writing interactive code in a Dnotebook environment. In the
    next section, we'll take a look at working with Markdown cells.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了一些在Dnotebook环境中编写交互式代码时会有用的重要函数和特性。在下一节中，我们将看一下如何使用Markdown单元格。
- en: Working with Markdown cells
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Markdown单元格
- en: Dnotebook supports Markdown, which gives the ability to mix your code with text
    and multimedia, hence enabling easy understanding for people who have access to
    the notebook.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Dnotebook支持Markdown，这使得您可以将代码与文本和多媒体混合使用，从而使得那些可以访问笔记本的人更容易理解。
- en: Markdown is a markup language for creating formatted text using a plain-text
    editor. It is widely used in blogging, documentation pages, and README files.
    If you work with tools such as GitHub, then you have probably used Markdown.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown是一种使用纯文本编辑器创建格式化文本的标记语言。它广泛用于博客、文档页面和README文件。如果您使用GitHub等工具，那么您可能已经使用过Markdown。
- en: Like many other tools, Dnotebook supports all Markdown syntax, image importing,
    the adding of links, and more.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他工具一样，Dnotebook支持所有Markdown语法、图像导入、添加链接等。
- en: In the following sections, we will see some important features you can leverage
    when using Markdown in Dnotebook.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将看到在Dnotebook中使用Markdown时可以利用的一些重要功能。
- en: Creating a Markdown cell
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Markdown单元格
- en: 'In order to write Markdown in the Dnotebook environment, you need to add a
    Markdown cell by clicking the **Text** button (either up or down). This action
    adds a new Markdown cell to your notebook. The following screenshot shows example
    text written in the Markdown cell:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Dnotebook环境中编写Markdown，您需要通过单击**文本**按钮（向上或向下）添加一个Markdown单元格。此操作会向您的笔记本添加一个新的Markdown单元格。以下屏幕截图显示了在Markdown单元格中编写的示例文本：
- en: '![Fig 2.15 – Writing simple text in a Markdown cell'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.15–在Markdown单元格中编写简单文本'
- en: '](img/B17076_02_15.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_15.jpg)'
- en: Fig 2.15 – Writing simple text in a Markdown cell
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15–在Markdown单元格中编写简单文本
- en: After writing Markdown text in a Markdown cell, you can click the **Run** button
    to execute it. This replaces the cell with the transpiled text in read mode. Double-clicking
    on the text reveals the Markdown cell again in edit mode.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在Markdown单元格中编写Markdown文本后，您可以单击**运行**按钮来执行它。这将用读取模式中的转译文本替换单元格。双击文本会再次显示Markdown单元格以进行编辑。
- en: Adding images
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图像
- en: 'In order to add images to Markdown cells, you can use the image syntax shown
    in the following snippet:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要将图像添加到Markdown单元格中，您可以使用以下代码中显示的图像语法：
- en: '[PRE12]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Fig 2.16 – Adding images'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.16–添加图像'
- en: '](img/B17076_02_16.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_16.jpg)'
- en: Fig 2.16 – Adding images
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16–添加图像
- en: 'For example, in the preceding screenshot, we add a link to an image available
    on the internet. The code is shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在前面的屏幕截图中，我们添加了一个指向互联网上可用图像的链接。代码如下所示：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The link provided is a link to a dog image. The **Run** button needs to be
    clicked to view the result of the image as shown here:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的链接是指向狗图像的链接。需要单击**运行**按钮以查看图像的结果，如下所示：
- en: '![Fig 2.17 – Markdown image result'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.17–Markdown图像结果'
- en: '](img/B17076_02_17.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_17.jpg)'
- en: Fig 2.17 – Markdown image result
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17–Markdown图像结果
- en: In the following sections, you'll learn some basic Markdown syntax that you
    can also add to your notebook. To see a comprehensive guide, you can visit the
    site [https://www.markdownguide.org/basic-syntax/](https://www.markdownguide.org/basic-syntax/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，您将学习一些基本的Markdown语法，您也可以将其添加到您的笔记本中。要查看全面的指南，您可以访问网站[https://www.markdownguide.org/basic-syntax/](https://www.markdownguide.org/basic-syntax/)。
- en: Headings
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标题
- en: 'To create a heading, you just need to add the pound symbol `(#)` in front of
    a word or phrase:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建标题，您只需在单词或短语前面添加井号符号`（#）`：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we were to paste the previous texts into the Markdown and click the **Run**
    button, we would get the following output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将前面的文本粘贴到Markdown中并单击**运行**按钮，我们将得到以下输出：
- en: '![Fig 2.18 – Adding header text'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.18–添加标题文本'
- en: '](img/B17076_02_18.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_18.jpg)'
- en: Fig 2.18 – Adding header text
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18–添加标题文本
- en: In the result, you'll notice that a different number of pound signs in front
    of text results in a different size.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果中，您会注意到在文本前面有不同数量的井号会导致不同的大小。
- en: Lists
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: 'Lists are important for enumerating objects and can be added by placing a star
    symbol (*****) in front of text. We provide an example in the following section:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 列表对于枚举对象很重要，可以通过在文本前加上星号符号（*****）来添加。我们在以下部分提供了一个示例：
- en: '[PRE15]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding example creates an unordered list of the items **Food**, **Cat**,
    and **Dog**, with **kitten** as a sub-list of **Cat**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例创建了一个无序列表，其中包括**食物**、**猫**和**狗**，**小猫**作为**猫**的子列表。
- en: 'In order to create a number list, just add numbers in front of the text, as
    shown here:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个编号列表，只需在文本前面添加数字，如下所示：
- en: '**First item**'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第一项**'
- en: '**Second Item**'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**第二项**'
- en: '**Lot more**'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更多**'
- en: 'The preceding text when input into the Markdown input field should output the
    following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在Markdown输入字段中输入前面的文本应该输出以下内容：
- en: '![Fig 2.19 – List'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.19–列表'
- en: '](img/B17076_02_19.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_19.jpg)'
- en: Fig 2.19 – List
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19–列表
- en: In the following section, we will cover an important part of Dnotebook – saving.
    This is extremely important in order to reuse and share your notebooks with other
    people.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将介绍Dnotebook的一个重要部分–保存。这对于重用和与其他人共享您的笔记本非常重要。
- en: Saving notebooks
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存笔记本
- en: Dnotebook supports the saving and importing of saved notebooks. Saving and importing
    a notebook gives you/others the ability to reuse your notebooks.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Dnotebook支持保存和导入已保存的笔记本。保存和导入笔记本可以让您/其他人重用您的笔记本。
- en: 'To save and import a notebook, click on the **File** menu, and select either
    the **Download Notebook** or **Upload Notebook** button depending on what you
    want to do. The options are displayed in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存和导入笔记本，请单击**文件**菜单，然后根据您想要执行的操作选择**下载笔记本**或**上传笔记本**按钮。选项显示在以下屏幕截图中：
- en: '![Fig 2.20 – Saving and importing a notebook'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.20–保存和导入笔记本'
- en: '](img/B17076_02_20.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17076_02_20.jpg)'
- en: Fig 2.20 – Saving and importing a notebook
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20–保存和导入笔记本
- en: Clicking **Download Notebook** saves the notebook in JSON format, and this can
    be easily shared or reloaded.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**下载笔记本**会以JSON格式保存笔记本，这可以很容易地共享或重新加载。
- en: Saving and importing
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 保存和导入
- en: To test this feature, go to [https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo).
    Try saving the demo notebook. Then open up a new notebook, [https://playnotebook.jsdata.org](https://playnotebook.jsdata.org),
    and import the saved file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此功能，请转到[https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo)。尝试保存演示笔记本。然后打开一个新笔记本，[https://playnotebook.jsdata.org](https://playnotebook.jsdata.org)，并导入保存的文件。
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced Dnotebook, an interactive library that supports
    text and multimedia. First, we covered the installation of Dnotebook locally and
    also pointed out that you can run a deployed version for free online. Next, we
    introduced some base concepts and gotchas when working with code and Markdown,
    and finally, we showed you how to save notebooks for sharing and reuse.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Dnotebook，这是一个支持文本和多媒体的交互式库。首先，我们介绍了在本地安装Dnotebook，并指出您可以免费在线运行部署版本。接下来，我们介绍了一些基本概念和在处理代码和Markdown时需要注意的事项，最后，我们向您展示了如何保存笔记本以供共享和重用。
- en: In the next chapter, we will get started with Danfo.js and introduce some of
    the underlying concepts of this awesome library.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用Danfo.js，并介绍这个令人惊叹的库的一些基本概念。
