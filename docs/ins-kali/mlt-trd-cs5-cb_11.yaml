- en: Chapter 11. There's More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。还有更多
- en: 'In this chapter, we will look through a new programming paradigm in the Windows
    8 operating system. You will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到Windows 8操作系统中的一种新的编程范式。您将学习到：
- en: Using a timer in a Windows Store application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows Store应用程序中使用定时器
- en: Using WinRT from a usual application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从通常的应用程序中使用WinRT
- en: Using BackgroundTask in a Windows Store application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows Store应用程序中使用BackgroundTask
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Microsoft released the first public beta build of Windows 8 at the BUILD conference
    on September 13, 2011\. The new OS tried to address almost every problem that
    Windows had by introducing features such as responsive UI suitable for tablet
    devices with touch, lower power consumption, new application model, new asynchronous
    APIs, and tighter security.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 微软于2011年9月13日在BUILD大会上发布了Windows 8的第一个公共测试版。新操作系统试图通过引入响应式UI、适用于触摸的平板设备、低功耗、新的应用程序模型、新的异步API和更严格的安全性等功能来解决Windows几乎所有的问题。
- en: The core of Windows API improvements was a new multiplatform component system,
    **WinRT**, which is a logical development of COM. With WinRT, a programmer can
    use native C++ code, C# and .NET, and even JavaScript and HTML to develop applications.
    Another change is the introduction of a centralized application store, which did
    not exist on the Windows platform before.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Windows API改进的核心是一个新的多平台组件系统**WinRT**，它是COM的逻辑发展。使用WinRT，程序员可以使用本机C++代码、C#和.NET，甚至JavaScript和HTML来开发应用程序。另一个变化是引入了一个集中的应用商店，这在Windows平台之前是不存在的。
- en: 'Being a new application platform, Windows 8 had backward-compatibility and
    allowed to run the usual Windows applications. This lead to a situation where
    there are two major classes of applications: the Windows Store applications, where
    new programs are distributed via the Windows Store, and the usual classic applications
    that did not change since the previous version of Windows.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个新的应用程序平台，Windows 8具有向后兼容性，并允许运行通常的Windows应用程序。这导致了两类主要的应用程序：Windows Store应用程序，其中新程序通过Windows
    Store分发，以及自上一版本Windows以来没有改变的通常的经典应用程序。
- en: The Windows Store applications are what we are going to look at in this chapter.
    The development paradigm shifted very much, and as a programmer you have to comply
    with specific rules. The program has to respond in a limited time to start up
    or to finish, keeping the whole operating system and other applications responsive.
    To save the battery, your applications are no longer running in the background
    by default; instead of that they get suspended and actually stop executing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Windows Store应用程序。开发范式发生了很大的变化，作为程序员，您必须遵守特定的规则。程序必须在有限的时间内响应启动或完成，保持整个操作系统和其他应用程序的响应。为了节省电池，您的应用程序不再默认在后台运行；而是被暂停并实际停止执行。
- en: New Windows APIs are asynchronous, and you can use only white-listed API functions
    in your application. For example, you are not allowed to create a new `Thread`
    class instance anymore. You have to use a system-managed thread pool instead.
    A lot of usual APIs cannot be used anymore, and you have to study new ways to
    achieve the same goals as before.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Windows API是异步的，您只能在应用程序中使用白名单API函数。例如，您不允许再创建一个`Thread`类实例。您必须使用系统管理的线程池。许多通常的API不再能够使用，您必须学习以前实现相同目标的新方法。
- en: In this chapter, we will see how a Windows Store application is different from
    the usual Windows application, how we can use some of the WinRT benefits from
    the usual applications, and go through a simplified scenario of a Windows Store
    application with background notifications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到Windows Store应用程序与通常的Windows应用程序有何不同，我们如何可以在通常的应用程序中使用一些WinRT的好处，并通过一个简化的具有后台通知的Windows
    Store应用程序的场景。
- en: Using a timer in a Windows Store application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows Store应用程序中使用定时器
- en: This recipe shows how to use a simple timer in Windows Store applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何在Windows Store应用程序中使用一个简单的定时器。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need Visual Studio 2012 and the Windows
    8+ operating system. No other prerequisites are required. The source code for
    this recipe can be found at `7644_Code\Chapter11\Recipe1`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要Visual Studio 2012和Windows 8+操作系统。不需要其他先决条件。此示例的源代码可以在`7644_Code\Chapter11\Recipe1`中找到。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how to use a timer in a Windows Store application, perform the
    following steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解如何在Windows Store应用程序中使用定时器，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Blank App (XAML)** project under
    **Windows Store**.![How to do it...](img/7644OT_11_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。在**Windows Store**下创建一个新的C# **空白应用（XAML）**项目。![如何做...](img/7644OT_11_01.jpg)
- en: In case you are asked to renew your developer license, you have to agree to
    the Microsoft privacy terms.![How to do it...](img/7644OT_11_02.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要求您更新开发人员许可证，您必须同意微软的隐私条款。![如何做...](img/7644OT_11_02.jpg)
- en: Then, sign in to your Microsoft account (or create one first).![How to do it...](img/7644OT_11_03.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，登录您的Microsoft账户（或首先创建一个）。![如何做...](img/7644OT_11_03.jpg)
- en: Finally, you get a confirmation dialog that the developer license was successfully
    renewed.![How to do it...](img/7644OT_11_04.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您会收到一个确认对话框，开发人员许可证已成功更新。![如何做...](img/7644OT_11_04.jpg)
- en: 'In the `MainPage.xaml` file, add the `Name` attribute to the `Grid` element:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage.xaml`文件中，为`Grid`元素添加`Name`属性：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the `MainPage.xaml.cs` file, add the following `using` directives:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage.xaml.cs`文件中，添加以下`using`指令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code snippet above the `MainPage` constructor definition:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage`构造函数定义之前添加以下代码片段：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Replace the `MainPage()` constructor with the following code snippet:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码片段替换`MainPage()`构造函数：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code snippet inside the `OnNavigatedTo` method:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnNavigatedTo`方法中添加以下代码片段：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the program.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the program runs, it creates an instance of a `MainPage` class. Here we
    instantiate `DispatcherTimer` in the constructor, and initialize the `ticks` counter
    to zero. Then, in the `OnNavigatedTo` event handler, we create our UI controls
    and bind the start and stop buttons to the corresponding lambda expressions, which
    contain the `start` and `stop` logics.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，它会创建一个`MainPage`类的实例。在构造函数中，我们实例化了`DispatcherTimer`，并将`ticks`计数器初始化为零。然后，在`OnNavigatedTo`事件处理程序中，我们创建了UI控件，并将开始和停止按钮绑定到相应的lambda表达式，其中包含`start`和`stop`逻辑。
- en: As you can see, the `timer` event handler works directly with the UI controls.
    This is okay because `DispatcherTimer` is implemented in such a way that the handlers
    of the `Tick` event of `timer` are run by the UI thread. However, if you run the
    program and then switch to something else, and switch the to the program delete
    after a couple of minutes, you may notice that the seconds counter is far behind
    the real amount of time passed. This happens because Windows 8 applications, or
    Windows Store applications as they are usually referred to, have completely different
    lifecycles.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`timer`事件处理程序直接与UI控件一起工作。这是可以的，因为`DispatcherTimer`是以这样一种方式实现的，即`timer`的`Tick`事件的处理程序由UI线程运行。然而，如果您运行程序然后切换到其他内容，并在几分钟后切换到程序删除，您可能会注意到秒表比实际经过的时间要慢得多。这是因为Windows
    8应用程序，或者通常被称为Windows Store应用程序，具有完全不同的生命周期。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please be aware that Windows Store applications behave much like the applications
    on smartphone and tablet platforms. Instead of running in the background they
    become suspended after some time, and this means that they are actually frozen
    until the user switches back to them. You have a limited time to save the current
    application state before it becomes suspended, and you are able to restore the
    state when the applications run again.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Windows Store应用程序的行为与智能手机和平板电脑平台上的应用程序非常相似。它们在后台运行而不是在一段时间后变得暂停，这意味着它们实际上被冻结，直到用户切换回它们。在它们变得暂停之前，您有有限的时间来保存当前应用程序状态，并且在应用程序再次运行时能够恢复状态。
- en: While this behavior could save power and CPU resources, it creates significant
    difficulties to program applications that are supposed to do some processing in
    the background. Windows 8 has a set of special APIs for programming such applications.
    We will go through such a scenario later in this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种行为可以节省电源和CPU资源，但它会给那些应该在后台进行一些处理的应用程序的编程带来重大困难。Windows 8有一组特殊的API用于编程这些应用程序。我们将在本章后面讨论这样的情景。
- en: Using WinRT from usual applications
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WinRT从普通应用程序中
- en: This recipe shows how to create a console application that will be able to use
    the WinRT API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了如何创建一个控制台应用程序，可以使用WinRT API。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012 and the Windows
    8+ operating system. There are no other prerequisites. The source code for this
    recipe can be found at `7644_Code\Chapter11\Recipe2`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，您需要Visual Studio 2012和Windows 8+操作系统。没有其他先决条件。此示例的源代码可以在`7644_Code\Chapter11\Recipe2`找到。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤如下：
- en: 'To understand how to use WinRT from usual applications, perform the following
    steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何从普通应用程序中使用WinRT，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C# **控制台应用程序**项目。
- en: Right-click on the created project in Visual Studio **Solution Explorer** and
    select the **Unload Project…** menu option.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio的**解决方案资源管理器**中右键单击创建的项目，选择**卸载项目...**菜单选项。
- en: Right-click on the unloaded project and select the **Edit ProjectName.csproj**
    menu option.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击未加载的项目，选择**编辑ProjectName.csproj**菜单选项。
- en: 'Add the following XML below the `<TargetFrameworkVersion>` element:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<TargetFrameworkVersion>`元素下方添加以下XML：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the `.csproj` file, right-click on the unloaded project in Visual Studio
    **Solution Explorer**, and select the **Reload Project** menu option.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`.csproj`文件，在Visual Studio的**解决方案资源管理器**中右键单击未加载的项目，选择**重新加载项目**菜单选项。
- en: Right-click on the project and select **Add Reference** from the **Core** library
    under **Windows**. Then click on the **Browse** button.![How to do it...](img/7644OT_11_05.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目，从**Windows**下的**核心**库中选择**添加引用**。然后点击**浏览**按钮。![操作步骤](img/7644OT_11_05.jpg)
- en: Navigate to `C:\Program Files\Reference Assemblies\Microsoft\Framework\.NETCore\v4.5`
    and click on `System.Runtime.WindowsRuntime.dll`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`C:\Program Files\Reference Assemblies\Microsoft\Framework\.NETCore\v4.5`，然后点击`System.Runtime.WindowsRuntime.dll`。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下方添加以下代码片段：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法内添加以下代码片段：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code snippet below the `Program` class definition:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program`类定义下方添加以下代码片段：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run the program.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理如下：
- en: Here we used quite a tricky way to consume the WinRT API from a common .NET
    console application. Unfortunately, not all available APIs will work in that scenario,
    but still it could be useful to work with movement sensors, GPS location services,
    and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一种相当巧妙的方法，从普通的.NET控制台应用程序中使用WinRT API。不幸的是，并非所有可用的API都适用于这种情况，但仍然可以用于处理运动传感器、GPS定位服务等。
- en: To reference WinRT in Visual Studio we manually edit the `.csproj` file specifying
    the target platform for the application as Windows 8\. Then we manually reference
    `System.Runtime.WindowsRuntime.dll` to leverage the `GetAwaiter` extension method
    implementation for the WinRT asynchronous operations. This allows us to use `await`
    on WinRT APIs directly. There is a backward conversion as well. When we create
    a WinRT library, we have to expose the WinRT native `IAsyncOperation` interfaces
    family for asynchronous operations, so they could be consumed from JavaScript
    and C++ in a language-agnostic manner.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Visual Studio中引用WinRT，我们手动编辑`.csproj`文件，指定应用程序的目标平台为Windows 8。然后我们手动引用`System.Runtime.WindowsRuntime.dll`来利用WinRT异步操作的`GetAwaiter`扩展方法实现。这使我们能够直接在WinRT
    API上使用`await`。也有反向转换。当我们创建一个WinRT库时，我们必须公开WinRT本机`IAsyncOperation`接口系列，以便以一种与语言无关的方式从JavaScript和C++中使用异步操作。
- en: File operations in WinRT are quite self-descriptive; here we have asynchronous
    file create and delete operations. Still, file operations in WinRT contain security
    restrictions, encouraging you to use special Windows folders for your application,
    and not allowing you to work with just any file path on your disk drive.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: WinRT中的文件操作相当自我描述；这里我们有异步文件创建和删除操作。然而，在WinRT中的文件操作包含安全限制，鼓励您使用特殊的Windows文件夹来进行应用程序开发，并不允许您使用磁盘驱动器上的任何文件路径。
- en: Using BackgroundTask in Windows Store applications
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows Store应用程序中使用BackgroundTask
- en: This recipe walks through the process of creating a background task in a Windows
    Store application, which updates the application's live tile on a desktop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作指南介绍了在Windows Store应用程序中创建后台任务的过程，该任务会在桌面上更新应用程序的动态磁贴。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012 and the Windows
    8+ operating system. There are no other prerequisites. The source code for this
    recipe can be found at `7644_Code\Chapter11\Recipe3`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，您需要Visual Studio 2012和Windows 8+操作系统。没有其他先决条件。此操作的源代码可以在`7644_Code\Chapter11\Recipe3`中找到。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: 'To understand how to use `BackgroundTask` in Windows Store applications, perform
    the following steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解如何在Windows Store应用程序中使用`BackgroundTask`，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Blank App (XAML)** project under
    **Windows Store**. In case you need to renew a developer license, please refer
    to the *Using a timer in a Windows Store application* recipe for detailed instructions.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。在**Windows Store**下创建一个新的C# **空白应用程序（XAML）**项目。如果需要更新开发者许可证，请参考*在Windows
    Store应用程序中使用定时器*的详细说明。
- en: In the **Assets** folder, open the **SmallLogo.png** file in the Paint editor,
    crop it to the 24 x 24 pixels size, save it back to the **Assets** folder as `SmallLogo-Badge.png`,
    and include it in the project.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Assets**文件夹中，使用Paint编辑器打开**SmallLogo.png**文件，将其裁剪为24 x 24像素大小，将其另存为`SmallLogo-Badge.png`，并将其包含在项目中。
- en: Open the `Package.appxmanifest` file. In the **Declarations** tab, add **Background
    Tasks** to **Supported Declarations**. Under **Properties**, check the supported
    properties **System event** and **Timer**, and set the name of **Entry point**
    to `YourNamespace.TileSchedulerTask`. `YourNamespace` should be the namespace
    of your application.![How to do it...](img/7644OT_11_06.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Package.appxmanifest`文件。在**声明**选项卡中，将**后台任务**添加到**支持的声明**中。在**属性**下，检查支持的属性**系统事件**和**定时器**，并将**入口点**的名称设置为`YourNamespace.TileSchedulerTask`。`YourNamespace`应该是您的应用程序的命名空间。
- en: In the **Application UI** tab, select **Lock screen notifications** as **Badge**,
    and **Badge logo** as **Assets\SmallLogo-Badge.png**.![How to do it...](img/7644OT_11_07.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用程序UI**选项卡中，将**锁定屏幕通知**选择为**徽章**，并将**徽章标志**选择为**Assets\SmallLogo-Badge.png**。
- en: 'In the `MainPage.xaml` file, insert the following XAML into the `Grid` element:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage.xaml`文件中，在`Grid`元素中插入以下XAML：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `MainPage.xaml.cs` file add the following `using` directives:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage.xaml.cs`文件中添加以下`using`指令：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following code snippet above the `MainPage` constructor definition:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage`构造函数定义之前添加以下代码片段：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace the `MainPage` constructor with the following code snippet:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码片段替换`MainPage`构造函数：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code snippet above the `OnNavigatedTo` method:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnNavigatedTo`方法之前添加以下代码片段：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code snippet inside the `OnNavigatedTo` method:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnNavigatedTo`方法内添加以下代码片段：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code snippet below the `MainPage` class definition:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainPage`类定义之后添加以下代码片段：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the program.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作...
- en: The preceding program shows how to create a background time-based task, and
    how to show the updates from this task on a live tile on the Windows 8 start screen.
    Programming Windows Store applications is quite a challenging task itself—you
    have to care about an application suspending/restoring its state, and many other
    things. Here we are going to concentrate on our main task, leaving behind the
    secondary issues.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序显示了如何创建后台基于时间的任务，以及如何在Windows 8开始屏幕上的动态磁贴上显示来自此任务的更新。编写Windows Store应用程序本身就是一项相当具有挑战性的任务——您必须关心应用程序的暂停/恢复状态等许多其他问题。在这里，我们将专注于我们的主要任务，把次要问题留在后面。
- en: Our main goal is to run some code, when the application itself is not in the
    foreground. First, we create an implementation of the `IBackgroundTask` interface.
    This is our code, and the `Run` method will be called when we get a trigger signal.
    It is important that if the `Run` method contains asynchronous code with `await`
    in it, we have to use a special deferral object as shown in the recipe to explicitly
    specify when we begin and end the `Run` method execution. In our case, method
    call is synchronous, but to illustrate this requirement we work with the deferral
    object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要目标是在应用程序本身不在前台时运行一些代码。首先，我们创建了“IBackgroundTask”接口的实现。这是我们的代码，“Run”方法将在收到触发信号时被调用。重要的是，如果“Run”方法中包含带有“await”的异步代码，我们必须使用一个特殊的延迟对象，如食谱中所示，明确指定我们何时开始和结束“Run”方法的执行。在我们的情况下，方法调用是同步的，但为了说明这一要求，我们使用延迟对象。
- en: Inside our task in the `Run` method, we create a set of tile updates each minute
    for 4 hours, and register it in `TileUpdateManager` with the help of the `ScheduledTaskNotification`
    class. A tile uses a special XML format to specify how exactly the text should
    be positioned on it. When we trigger our task from the system, it schedules one-minute
    tile updates for the next 4 hours. Then, we need to register our background task.
    We do it twice; one registration provides a `UserPresent` trigger, which means
    that this task will be triggered when a user is logged on. The next trigger is
    a time trigger, which runs the task once every 3 hours.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的任务中，我们在“Run”方法中每分钟创建一组磁贴更新，持续4小时，并借助“ScheduledTaskNotification”类将其注册到“TileUpdateManager”中。磁贴使用特殊的XML格式来指定文本在其上的位置。当我们从系统触发任务时，它会为接下来的4小时安排每分钟的磁贴更新。然后，我们需要注册我们的后台任务。我们进行了两次注册；一次注册提供了“UserPresent”触发器，这意味着当用户登录时将触发此任务。下一个触发器是时间触发器，每3小时运行一次任务。
- en: When the program runs, it creates a timer, which runs when the application is
    in the foreground. At the same time it is trying to register background tasks;
    to register those tasks the program needs user permission, and it will show a
    dialog requesting permissions from the user. Now we have scheduled live tile updates
    for the next 4 hours. If we close our application, the live tile will continue
    to show new time every minute. In the next 3 hours the time trigger will run our
    background task once again, and we will schedule another live tile update.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，它会创建一个定时器，在应用程序在前台时运行。与此同时，它正在尝试注册后台任务；要注册这些任务，程序需要用户权限，并且将显示一个对话框请求用户的权限。现在我们已经安排了接下来4小时的动态磁贴更新。如果我们关闭应用程序，动态磁贴将继续每分钟显示新的时间。在接下来的3小时内，时间触发器将再次运行我们的后台任务，并且我们将安排另一个动态磁贴更新。
