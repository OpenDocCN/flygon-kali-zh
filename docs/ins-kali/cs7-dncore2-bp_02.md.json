["```cs\n.score { \n    font-size: 40px; \n} \n.team { \n    font-size: 30px; \n} \n.player { \n    font-size: 16.5px; \n} \n.info { \n    font-size: 18px; \n} \n.btn-round-xs { \n    border-radius: 11px; \n    padding-left: 10px; \n    padding-right: 10px; \n    width: 100%; \n} \n.btn-round { \n    border-radius: 17px; \n} \n.navbar-top-links { \n    margin-right: 0; \n} \n.nav { \n    padding-left: 0; \n    margin-bottom: 0; \n    list-style: none; \n} \n```", "```cs\npublic class EncryptionHelper\n{\n  public string TextToEncrypt = \"\";\n  public void Encrypt()\n  {\n  }\n}\n```", "```cs\npublic class EncryptionHelper\n{\n  public string TextToEncrypt = \"\";\n  public void Encrypt()\n  {\n  }\n  public string GenerateSalt()\n  {\n    Return \"\";\n  }\n}\n```", "```cs\npublic class EncryptionHelper\n{\n  public string TextToEncrypt = \"\";\n  public void Encrypt()\n  {\n  }\n  public string GenerateSalt()\n  {\n    return \"\";\n  }\n  public void SaveToDatabase()\n  {\n  }\n}\n```", "```cs\nEncryptionHelper encr = new EncryptionHelper();\nencr.TextToEncrypt = \"Secret Text\";\nstring salt = encr.GenerateSalt();\nencr.Encrypt();\nencr.SaveToDatabase();\n```", "```cs\npublic void Encrypt(string salt)\n{\n}\n```", "```cs\npublic class EncryptionHelper\n{\n  public string TextToEncrypt = \"\";\n  public void Encrypt()\n  {\n  }\n}\n```", "```cs\npublic class EncryptionHelper\n{\n  public string TextToEncrypt = \"\";\n  public void Encrypt()\n  {\n    string salt = GenerateSalt();\n    // Encrypt the text in the TextToEncrypt variable\n    SaveToDatabase();\n  }\n  private string GenerateSalt()\n  {\n    return \"\";\n  }\n  private void SaveToDatabase()\n  {\n  }\n}\n```", "```cs\nEncryptionHelper encr = new EncryptionHelper();\nencr.TextToEncrypt = \"Secret Text\";\nencr.Encrypt();\n```", "```cs\nnamespace cricketScoreTrack.BaseClasses \n{ \n    public abstract class Player \n    { \n        public abstract string FirstName { get; set; } \n        public abstract string LastName { get; set; } \n        public abstract int Age { get; set; } \n        public abstract string Bio { get; set; } \n    } \n} \n```", "```cs\nabstract public int CalculatePlayerRank(); \n```", "```cs\npublic override int CalculatePlayerRank() \n{ \n  throw new NotImplementedException(); \n} \n```", "```cs\nnamespace cricketScoreTrack.Interfaces \n{ \n    interface IBatter \n    { \n        int BatsmanRuns { get; set; }         \n        int BatsmanBallsFaced { get; set; }         \n        int BatsmanMatch4s { get; set; }         \n        int BatsmanMatch6s { get; set; }         \n        double BatsmanBattingStrikeRate { get; }             \n    } \n} \n```", "```cs\nnamespace cricketScoreTrack.Interfaces \n{ \n    interface IBowler \n    { \n        double BowlerSpeed { get; set; } \n        string BowlerType { get; set; }  \n        int BowlerBallsBowled { get; set; } \n        int BowlerMaidens { get; set; }         \n        int BowlerWickets { get; set; }         \n        double BowlerStrikeRate { get; }         \n        double BowlerEconomy { get; }  \n        int BowlerRunsConceded { get; set; } \n        int BowlerOversBowled { get; set; } \n    } \n} \n```", "```cs\nvoid CalculateBallSpin(); \n```", "```cs\nvoid CalculateBallSpin()\n{\n}\n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing cricketScoreTrack.Interfaces; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class Batsman : Player, IBatter \n    { \n        #region Player \n        public override string FirstName { get; set; } \n        public override string LastName { get; set; } \n        public override int Age { get; set; } \n        public override string Bio { get; set; } \n        #endregion \n\n        #region IBatsman \n        public int BatsmanRuns { get; set; } \n        public int BatsmanBallsFaced { get; set; } \n        public int BatsmanMatch4s { get; set; } \n        public int BatsmanMatch6s { get; set; } \n\n        public double BatsmanBattingStrikeRate => (BatsmanRuns * 100) \n         / BatsmanBallsFaced;  \n\n        public override int CalculatePlayerRank() \n        { \n            return 0; \n        } \n        #endregion \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing cricketScoreTrack.Interfaces; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class AllRounder : Player, IBatter, IBowler         \n    { \n        #region enums \n        public enum StrikeRate { Bowling = 0, Batting = 1 } \n        #endregion \n\n        #region Player \n        public override string FirstName { get; set; } \n        public override string LastName { get; set; } \n        public override int Age { get; set; } \n        public override string Bio { get; set; } \n        #endregion \n\n        #region IBatsman \n        public int BatsmanRuns { get; set; } \n        public int BatsmanBallsFaced { get; set; } \n        public int BatsmanMatch4s { get; set; } \n        public int BatsmanMatch6s { get; set; } \n        public double BatsmanBattingStrikeRate => \n         CalculateStrikeRate(StrikeRate.Batting);  \n        #endregion \n\n        #region IBowler \n        public double BowlerSpeed { get; set; } \n        public string BowlerType { get; set; }  \n        public int BowlerBallsBowled { get; set; } \n        public int BowlerMaidens { get; set; } \n        public int BowlerWickets { get; set; } \n        public double BowlerStrikeRate => \n         CalculateStrikeRate(StrikeRate.Bowling);  \n        public double BowlerEconomy => BowlerRunsConceded / \n         BowlerOversBowled;  \n        public int BowlerRunsConceded  { get; set; } \n        public int BowlerOversBowled { get; set; } \n        #endregion \n\n        private double CalculateStrikeRate(StrikeRate strikeRateType) \n        { \n            switch (strikeRateType) \n            { \n                case StrikeRate.Bowling: \n                    return (BowlerBallsBowled / BowlerWickets); \n                case StrikeRate.Batting: \n                    return (BatsmanRuns * 100) / BatsmanBallsFaced; \n                default: \n                    throw new Exception(\"Invalid enum\"); \n            } \n        } \n\n        public override int CalculatePlayerRank() \n        { \n            return 0; \n        } \n    } \n} \n```", "```cs\npublic enum SelectedPlayer { Batsman1 = 1, Batsman2 = 2, Bowler = 3 } \nList<Player> southAfrica; \nList<Player> india; \n```", "```cs\nprotected void Page_Load(object sender, EventArgs e) \n{ \n    southAfrica = Get_SA_Players(); \n    india = Get_India_Players(); \n} \n```", "```cs\nprivate List<Player> Get_SA_Players() \n{ \n    List<Player> players = new List<Player>(); \n\n    #region Batsmen \n    Batsman b1 = new Batsman(); \n    b1.FirstName = \"Faf\"; \n    b1.LastName = \"du Plessis\"; \n    b1.Age = 33; \n    players.Add(b1); \n    // Rest omitted for brevity \n    #endregion \n\n    #region All Rounders \n    AllRounder ar1 = new AllRounder(); \n    ar1.FirstName = \"Farhaan\"; \n    ar1.LastName = \"Behardien\"; \n    ar1.Age = 33; \n    players.Add(ar1); \n    // Rest omitted for brevity \n    #endregion \n\n    return players; \n} \n```", "```cs\nprivate void GeneratePlayerList(List<Player> team, Type type) \n{ \n    List<string> players = new List<string>(); \n\n    if (type == typeof(Batsman)) \n        players = (from r in team.OfType<Batsman>() \n                   select $\"{r.FirstName} {r.LastName}\").ToList(); \n\n    if (type == typeof(AllRounder)) \n        players = (from r in team.OfType<AllRounder>() \n                   select $\"{r.FirstName} {r.LastName}\").ToList(); \n\n    int liVal = 0; \n    if (ddlPlayersSelect.Items.Count > 0) \n        ddlPlayersSelect.Items.Clear(); \n\n    foreach (string player in players) \n    { \n        ListItem li = new ListItem(); \n        li.Text = player.ToString(); \n        li.Value = liVal.ToString(); \n        ddlPlayersSelect.Items.Add(li); \n\n        liVal += 1; \n    } \n} \n```", "```cs\nprivate double CalculateStrikeRate(StrikeRate strikeRateType) \n{ \n    switch (strikeRateType) \n    { \n        case StrikeRate.Bowling: \n            return (BowlerBallsBowled / BowlerWickets); \n        case StrikeRate.Batting: \n            return (BatsmanRuns * 100) / BatsmanBallsFaced; \n        default: \n            throw new Exception(\"Invalid enum\"); \n    } \n} \n\npublic override int CalculatePlayerRank() \n{ \n    return 0; \n} \n\n```", "```cs\npublic double BatsmanBattingStrikeRate => (BatsmanRuns * 100) / BatsmanBallsFaced;  \n\npublic override int CalculatePlayerRank() \n{ \n    return 0; \n} \n```", "```cs\nnamespace cricketScoreTrack.BaseClasses \n{ \n    public abstract class Statistics \n    { \n        public abstract double CalculateStrikeRate(Player player); \n        public abstract int CalculatePlayerRank(Player player); \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class PlayerStatistics : Statistics \n    { \n        public override int CalculatePlayerRank(Player player) \n        { \n            return 1; \n        } \n\n        public override double CalculateStrikeRate(Player player) \n        {             \n            switch (player) \n            { \n                case AllRounder allrounder: \n                    return (allrounder.BowlerBallsBowled / \n                     allrounder.BowlerWickets); \n\n                case Batsman batsman: \n                    return (batsman.BatsmanRuns * 100) / \n                     batsman.BatsmanBallsFaced; \n\n                default: \n                    throw new ArgumentException(\"Incorrect argument \n                     supplied\"); \n            } \n        } \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing cricketScoreTrack.Interfaces; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class Batsman : Player, IBatter \n    { \n\n        #region Player \n        public override string FirstName { get; set; } \n        public override string LastName { get; set; } \n        public override int Age { get; set; } \n        public override string Bio { get; set; } \n        #endregion \n\n        #region IBatsman \n        public int BatsmanRuns { get; set; } \n        public int BatsmanBallsFaced { get; set; } \n        public int BatsmanMatch4s { get; set; } \n        public int BatsmanMatch6s { get; set; } \n        #endregion \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing cricketScoreTrack.Interfaces; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class AllRounder : Player, IBatter, IBowler \n    { \n        #region Player \n        public override string FirstName { get; set; } \n        public override string LastName { get; set; } \n        public override int Age { get; set; } \n        public override string Bio { get; set; } \n        #endregion \n\n        #region IBatsman \n        public int BatsmanRuns { get; set; } \n        public int BatsmanBallsFaced { get; set; } \n        public int BatsmanMatch4s { get; set; } \n        public int BatsmanMatch6s { get; set; } \n        #endregion \n\n        #region IBowler \n        public double BowlerSpeed { get; set; } \n        public string BowlerType { get; set; }  \n        public int BowlerBallsBowled { get; set; } \n        public int BowlerMaidens { get; set; } \n        public int BowlerWickets { get; set; } \n        public double BowlerEconomy => BowlerRunsConceded / \n         BowlerOversBowled;  \n        public int BowlerRunsConceded  { get; set; } \n        public int BowlerOversBowled { get; set; } \n        #endregion         \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing cricketScoreTrack.Interfaces; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class Bowler : Player, IBowler \n    { \n        #region Player \n        public override string FirstName { get; set; } \n        public override string LastName { get; set; } \n        public override int Age { get; set; } \n        public override string Bio { get; set; } \n        #endregion \n\n        #region IBowler \n        public double BowlerSpeed { get; set; } \n        public string BowlerType { get; set; }  \n        public int BowlerBallsBowled { get; set; } \n        public int BowlerMaidens { get; set; } \n        public int BowlerWickets { get; set; } \n        public double BowlerEconomy => BowlerRunsConceded / \n         BowlerOversBowled;  \n        public int BowlerRunsConceded { get; set; } \n        public int BowlerOversBowled { get; set; } \n        #endregion \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class BatsmanStatistics : Statistics \n    { \n        public override int CalculatePlayerRank(Player player) \n        { \n            return 1; \n        } \n\n        public override double CalculateStrikeRate(Player player) \n        { \n            if (player is Batsman batsman) \n            { \n                return (batsman.BatsmanRuns * 100) / \n                 batsman.BatsmanBallsFaced; \n            } \n            else \n                throw new ArgumentException(\"Incorrect argument \n                 supplied\"); \n        } \n    } \n} \n\n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class AllRounderStatistics : Statistics \n    { \n        public override int CalculatePlayerRank(Player player) \n        { \n            return 1; \n        } \n\n        public override double CalculateStrikeRate(Player player) \n        { \n            if (player is AllRounder allrounder) \n            { \n                return (allrounder.BowlerBallsBowled / \n                 allrounder.BowlerWickets); \n            } \n            else \n                throw new ArgumentException(\"Incorrect argument \n                 supplied\");             \n        } \n    } \n} \n```", "```cs\nusing cricketScoreTrack.BaseClasses; \nusing System; \n\nnamespace cricketScoreTrack.Classes \n{ \n    public class BowlerStatistics : Statistics \n    { \n        public override int CalculatePlayerRank(Player player) \n        { \n            return 1; \n        } \n\n        public override double CalculateStrikeRate(Player player) \n        { \n            if (player is Bowler bowler) \n            { \n                return (bowler.BowlerBallsBowled / \n                 bowler.BowlerWickets); \n            } \n            else \n                throw new ArgumentException(\"Incorrect argument \n                 supplied\"); \n        } \n    } \n} \n```", "```cs\npublic override double CalculateStrikeRate(Player player) \n{             \n    switch (player) \n    { \n        case AllRounder allrounder: \n            return (allrounder.BowlerBallsBowled / \n             allrounder.BowlerWickets); \n\n        case Batsman batsman: \n            return (batsman.BatsmanRuns * 100) / \n             batsman.BatsmanBallsFaced; \n\n        case Bowler bowler: \n            return (bowler.BowlerBallsBowled / bowler.BowlerWickets); \n\n        default: \n            throw new ArgumentException(\"Incorrect argument \n             supplied\"); \n    } \n} \n\n```", "```cs\npublic override double CalculateStrikeRate(Player player) \n{ \n    if (player is Bowler bowler) \n    { \n        return (bowler.BowlerBallsBowled / bowler.BowlerWickets); \n    } \n    else \n        throw new ArgumentException(\"Incorrect argument supplied\"); \n} \n```"]