- en: Chapter 5. Working with Renderers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用渲染器
- en: 'Renderers provide us with a medium to visualize data intuitively using different
    symbols and colors. More than a data visualization technique, renderers are increasingly
    considered as a data analytic tool. The correct use of renderers will help us
    see spatial patterns in the data and display the geographic distribution of various
    phenomena. An understanding of basic cartography, color theory, and even statistics
    will help us create better renderers and eventually better insights into the available
    data. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染器为我们提供了一种直观地使用不同符号和颜色来可视化数据的媒介。渲染器不仅是一种数据可视化技术，而且越来越被认为是一种数据分析工具。正确使用渲染器将帮助我们看到数据中的空间模式，并显示各种现象的地理分布。对基本制图学、色彩理论甚至统计学的理解将帮助我们创建更好的渲染器，最终更好地洞察可用数据。本章将涵盖以下主题：
- en: Learning about different symbols and colors provided by the API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习API提供的不同符号和颜色
- en: Learning how to create a `SimpleRenderer` method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何创建`SimpleRenderer`方法
- en: Learning how to create a `UniqueValueRenderer` method efficiently
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何高效创建`UniqueValueRenderer`方法
- en: Learning when to use `ClassBreakRenderer` and `HeatmapRenderers`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习何时使用`ClassBreakRenderer`和`HeatmapRenderers`
- en: Discussing scenarios where `ScaleDependantRenderers` can be useful
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论`ScaleDependantRenderers`可以有用的情景
- en: An introduction to smart mapping
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能制图简介
- en: Working with colors
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用颜色
- en: The Esri module dealing with colors is called `esri/Color`. Before dealing with
    the color module, let's have a fundamental understanding of colors.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理颜色的Esri模块称为`esri/Color`。在处理颜色模块之前，让我们对颜色有一个基本的了解。
- en: The RGB color model
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RGB颜色模型
- en: Any color in the visible spectrum (the range of colors between Violet to Red),
    can be represented using a combination of Red (R), Green (G) or Blue (B) colors.
    This is known as the **RGB color model**. There are other color models too, but
    let's stick with the RGB color model for now. And each color R, G, or B can be
    expressed in a scale from 0 to 255\.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可见光谱中的任何颜色（紫罗兰到红色之间的颜色范围）都可以用红（R）、绿（G）或蓝（B）颜色的组合来表示。这就是**RGB颜色模型**。还有其他颜色模型，但让我们现在先使用RGB颜色模型。每种颜色R、G或B都可以用0到255的比例来表示。
- en: 'The following picture shows the relationship between the three primary colors
    (R, G, and B) and their additive effect:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了三种原色（R、G和B）及其叠加效果之间的关系：
- en: '![The RGB color model](graphics/B04959_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![RGB颜色模型](graphics/B04959_05_01.jpg)'
- en: 'When the three colors (R, G, and B) are mixed in equal proportion, the resultant
    color always lies somewhere in the grey scale. The following points are worth
    noting:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当三种颜色（R、G和B）以相等比例混合时，产生的颜色总是位于灰度范围内的某个位置。以下几点值得注意：
- en: For example, if the level of `R = 0`, `G = 0`, and `B = 0`, the mixture produces
    black.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，如果`R=0`，`G=0`，`B=0`，混合产生黑色。
- en: If `R = 255`, `G = 255`, and `B = 255`, the mixture produces white.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`R=255`，`G=255`，`B=255`，混合产生白色。
- en: Any other number values, when mixed equally, produce a shade of grey.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他数字值，当等量混合时，产生灰色的阴影。
- en: For example, if `R = 125`, `G = 125`, and `B = 125`, it will be grey.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`R=125`，`G=125`，`B=125`，它将是灰色。
- en: The color model also shows that when Red and Green are mixed together (`R =
    255`, `G = 255`, and `B = 0`), we get yellow.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色模型还显示，当红色和绿色混合在一起时（`R=255`，`G=255`，`B=0`），我们得到黄色。
- en: When Red and Blue alone are mixed (`R=255`, `G= 0`, and `B=255`), we get Magenta.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当仅混合红色和蓝色时（`R=255`，`G=0`，`B=255`），我们得到品红色。
- en: When Green and Blue are mixed, we get Cyan (`R=0`, `G=255`, and `B= 255`).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当绿色和蓝色混合时，我们得到青色（`R=0`，`G=255`，`B=255`）。
- en: The Esri color module
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Esri颜色模块
- en: 'To define a color using the RGB color model, the following format can be used:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用RGB颜色模型定义颜色，可以使用以下格式：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding snippet, `color` is an instance of the `esri/Color` module
    and `r`, `g`, and `b` are values for Red, Green, and Blue respectively. The colors
    should always be ordered as (`r`, `g`, and `b`) and added as an array object.
    As expected, the `color` variable stores a grey color. If we need to add transparency
    to the color, we can define the transparency value known as `alpha`, which is
    an integer between `0` and `1.0`, where `0` represents full transparency and `1.0`
    represents no transparency. The alpha value will be added as the fourth value
    in the array:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的片段中，`color`是`esri/Color`模块的一个实例，`r`、`g`和`b`分别是红色、绿色和蓝色的值。颜色应始终按照（`r`、`g`和`b`）的顺序添加为数组对象。如预期的那样，`color`变量存储了灰色。如果我们需要向颜色添加透明度，我们可以定义透明度值，称为`alpha`，它是一个介于`0`和`1.0`之间的整数，其中`0`表示完全透明，`1.0`表示不透明。透明度值将作为数组中的第四个值添加：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The RGB values can be represented as a hexadecimal number. For example, `[255,
    0, 0]` can be represented as `#FF0000`. The API also allows us to represent the
    color by its English named string, for example, `blue`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: RGB值可以表示为十六进制数。例如，`[255, 0, 0]`可以表示为`#FF0000`。API还允许我们通过其英文命名字符串来表示颜色，例如`blue`：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Working with symbols
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用符号
- en: 'Symbols are based on the geometry that they try to symbolize. Thus, the symbols
    used to represent a point, line, and polygon are different from each other. Apart
    from the geometry, the three important parameters required to define a symbol
    are the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是基于它们试图符号化的几何图形。因此，用于表示点、线和多边形的符号彼此不同。除了几何图形之外，定义符号所需的三个重要参数是以下：
- en: Style
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风格
- en: Color
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: Dimension (or size)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维度（或大小）
- en: 'The style is usually provided as a module constant. For example, `SimpleLineSymbol.STYLE_DASHDOT`,
    `SimpleFillSymbol.STYLE_SOLID`, and `SimpleMarkerSymbol.STYLE_CIRCLE` where `SimpleLineSymbol`,
    `SimpleFillSymbol`, and `SimpleMarkerSymbol` are the modules used to symbolize
    the line, polygon, and point features respectively:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常提供风格作为模块常量。例如，`SimpleLineSymbol.STYLE_DASHDOT`、`SimpleFillSymbol.STYLE_SOLID`和`SimpleMarkerSymbol.STYLE_CIRCLE`，其中`SimpleLineSymbol`、`SimpleFillSymbol`和`SimpleMarkerSymbol`分别用于符号化线、多边形和点要素：
- en: The colors of these symbols can be defined by the color modules that we discussed
    in earlier sections.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些符号的颜色可以由我们在前面章节中讨论的颜色模块定义。
- en: The dimension or size means different things based on the geometry type. For
    example, for a line symbol, we use the parameter known as `width` to refer to
    the line thickness, whereas for a point, we use the parameter named `size` to
    define its dimension.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于几何类型，尺寸意味着不同的东西。例如，对于线符号，我们使用称为 `width` 的参数来指代线的厚度，而对于点，我们使用名为 `size` 的参数来定义其尺寸。
- en: Let's discuss about the three geometry-based symbols first, and then we will
    deal with the non-geometry-based and special symbols.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先讨论基于三角形的几何符号，然后再处理非基于几何的和特殊符号。
- en: 'The geometry-based symbols are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 基于几何的符号如下：
- en: '`SimpleLineSymbol`: This is used to symbolize the line geometry'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpleLineSymbol`: 用于表示线几何'
- en: '`SimpleMarkerSymbol`: This is used to symbolize the point geometry'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpleMarkerSymbol`: 用于表示点几何'
- en: '`SimpelFillSymbol`: This is used to symbolize the polygon geometry'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpelFillSymbol`: 用于表示多边形几何'
- en: SimpleLineSymbol
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SimpleLineSymbol
- en: The line symbol constructor is the simplest, because it can be defined with
    just three parameters namely style, color, and width.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 线符号构造函数是最简单的，因为它只需用样式、颜色和宽度三个参数来定义。
- en: '| Name | Value |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module name | `esri/symbols/SimpleLineSymbol` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/symbols/SimpleLineSymbol` |'
- en: '| Constructor | `new SimpleLineSymbol(style, color, and width)` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new SimpleLineSymbol(style, color, and width)` |'
- en: 'The `style` is a module constant. The following styles are provided by the
    module:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`style` 是一个模块常量。该模块提供以下样式：'
- en: '`STYLE_DASH` (to create lines made of dashes)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_DASH` (创建由短划线组成的线)'
- en: '`STYLE_DASHDOT` (to create lines made of a dash-dot pattern)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_DASHDOT` (创建由短划线点组成的线)'
- en: '`STYLE_DOT` (to create lines made of dots)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_DOT` (创建由点组成的线)'
- en: The module provides other style constants such as `STYLE_LONGDASH`, `STYLE_LONGDASHDOT`,
    `STYLE_NULL`, `STYLE_SHORTDASH`, `STYLE_SHORTDASHDOT`, `STYLE_SHORTDASHDOTDOT`,
    `STYLE_SHORTDOT`, and `STYLE_SOLID`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块提供了其他样式常量，如 `STYLE_LONGDASH`, `STYLE_LONGDASHDOT`, `STYLE_NULL`, `STYLE_SHORTDASH`,
    `STYLE_SHORTDASHDOT`, `STYLE_SHORTDASHDOTDOT`, `STYLE_SHORTDOT`, 和 `STYLE_SOLID`。
- en: '`STYLE_SOLID` is the default style, which provides an uninterrupted solid line.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`STYLE_SOLID` 是默认样式，提供了一个连续的实线。'
- en: We can set the color of the line using the `simpleLineSymbol.setColor(color)`
    method; here, `color` is Esri `Color` object, and `simpleLineSymbol` is an instance
    of `SimpleLineSymbol` object. The `style` constant can be set using the `setStyle(style)`
    method. `SimpleLineSymbol.toJson()` is an important method that converts a `SimpleLineSymbol`
    to an ArcGIS Server JSON representation.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `simpleLineSymbol.setColor(color)` 方法设置线的颜色；这里，`color` 是 Esri `Color`
    对象，`simpleLineSymbol` 是 `SimpleLineSymbol` 对象的一个实例。`style` 常量可以使用 `setStyle(style)`
    方法设置。`SimpleLineSymbol.toJson()` 是一个重要的方法，它将 `SimpleLineSymbol` 转换为 ArcGIS 服务器
    JSON 表示。
- en: 'The following code snippet will create a solid red line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将创建一条红色实线：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: SimpleMarkerSymbol
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SimpleMarkerSymbol
- en: The `SimpleMarkerSymbol` method is used to symbolize a point. Symbolizing a
    point geometry has an extra layer of complexity than symbolizing a line in that
    it accepts an outline parameter which in itself is a `SimpleLineSymbol` object.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleMarkerSymbol` 方法用于表示一个点。与表示线的复杂性相比，表示点几何有一个额外的复杂性，即它接受一个轮廓参数，该参数本身是一个
    `SimpleLineSymbol` 对象。'
- en: '![SimpleMarkerSymbol](graphics/B04959_05_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![SimpleMarkerSymbol](graphics/B04959_05_02.jpg)'
- en: '| Name | Value |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module name | `esri/symbols/SimpleMarkerSymbol` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/symbols/SimpleMarkerSymbol` |'
- en: '| Constructor: | `new SimpleMarkerSymbol(style, size, outline, color)` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new SimpleMarkerSymbol(style, size, outline, color)` |'
- en: 'The following style constants are provided by the module:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块提供了以下样式常量：
- en: '`STYLE_CIRCLE`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_CIRCLE`'
- en: '`STYLE_DIAMOND`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_DIAMOND`'
- en: '`STYLE_SQUARE`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_SQUARE`'
- en: The `setAngle(angle)` method rotates the symbol clockwise around its center
    by a specified angle. The `setColor(color)` method sets the symbol `color`. `setOffset`
    (`x` and `y`) sets the `x` and `y` offsets of a marker in screen units. `setOutline(outline)`
    sets the outline of the marker symbol. `setSize(size)` lets us set the size of
    a marker in pixels. `setStyle(style)` sets the marker symbol style. `toJson()`
    converts objects into their ArcGIS Server JSON representation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAngle(angle)` 方法按指定角度顺时针旋转符号。`setColor(color)` 方法设置符号的颜色。`setOffset` (`x`
    和 `y`) 设置屏幕单位中标记的 `x` 和 `y` 偏移量。`setOutline(outline)` 设置标记符号的轮廓。`setSize(size)`
    允许我们以像素为单位设置标记的大小。`setStyle(style)` 设置标记符号样式。`toJson()` 将对象转换为其 ArcGIS 服务器 JSON
    表示。'
- en: ArcGIS symbol playground
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcGIS 符号沙盘
- en: If selecting the appropriate color and style and other properties for a symbol
    seemed like a difficult choice, the following web page tries to help you out by
    providing a sandbox to generate any type of symbol and the code required to define
    a similar symbol in your code. The webpage is at [http://developers.arcgis.com/javascript/samples/playground/index.html](http://developers.arcgis.com/javascript/samples/playground/index.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择合适的颜色和样式以及其他属性来表示一个符号似乎是一个困难的选择，下面的网页试图通过提供一个沙盒来生成任何类型的符号和定义类似符号所需的代码来帮助你。该网页位于
    [http://developers.arcgis.com/javascript/samples/playground/index.html](http://developers.arcgis.com/javascript/samples/playground/index.html)。
- en: 'Navigating to this URL will land you in a page similar to the following screenshot.
    We can select almost any type of symbol:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到此 URL 将使您进入类似以下截图的页面。我们可以选择几乎任何类型的符号：
- en: '![ArcGIS symbol playground](graphics/B04959_05_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS symbol playground](graphics/B04959_05_03.jpg)'
- en: Selecting one of them will navigate you to another page where you can select
    the properties and generate the symbology code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 选择其中一个将导航到另一个页面，您可以在该页面上选择属性并生成符号代码。
- en: '![ArcGIS symbol playground](graphics/B04959_05_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS symbol playground](graphics/B04959_05_04.jpg)'
- en: 'Well, we easily generated the code required to generate a semi-transparent,
    red-colored, diamond-shaped `SimpleMarkerSymbol` (with no outline):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们很容易生成了生成半透明、红色、菱形 `SimpleMarkerSymbol`（无轮廓）所需的代码：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: SimpleFillSymbol
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SimpleFillSymbol
- en: The `SimpleFillSymbol` module helps us generate symbology for polygons.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleFillSymbol`模块帮助我们为多边形生成符号。'
- en: 'Module name: `esri/symbols/SimpleFillSymbol`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块名称：`esri/symbols/SimpleFillSymbol`
- en: '`new SimpleFillSymbol(style, outline, color)`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new SimpleFillSymbol(style, outline, color)`'
- en: 'Some of the module constants for the `STYLE` parameter are given here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`STYLE`参数的一些模块常量如下：'
- en: '`STYLE_BACKWARD_DIAGONAL`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_BACKWARD_DIAGONAL`'
- en: '`STYLE_CROSS`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_CROSS`'
- en: '`STYLE_NULL`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_NULL`'
- en: '`SimpleFillSymbol.STYLE_SOLID` is the default styling.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleFillSymbol.STYLE_SOLID`是默认样式。'
- en: PictureMarkerSymbol
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PictureMarkerSymbol
- en: When we need to picture an icon to symbolize a point geometry, we can use this
    module. Instead of providing the color information as a parameter, we need an
    image URL to display a picture as a marker symbol.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要描绘一个图标来象征一个点几何体时，我们可以使用这个模块。我们不需要将颜色信息作为参数提供，而是需要一个图像URL来显示一个图片作为标记符号。
- en: '| Name | Value |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module | `esri/symbols/PictureMarkerSymbol` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | `esri/symbols/PictureMarkerSymbol` |'
- en: '| Constructor | `new PictureMarkerSymbol(url, width, height)` |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new PictureMarkerSymbol(url, width, height)` |'
- en: Searching for the appropriate `PictureMarkerSymbol` is aided by a web page found
    at [http://developers.arcgis.com/javascript/samples/portal_symbols/index.html](http://developers.arcgis.com/javascript/samples/portal_symbols/index.html).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://developers.arcgis.com/javascript/samples/portal_symbols/index.html](http://developers.arcgis.com/javascript/samples/portal_symbols/index.html)找到的网页上可以帮助我们搜索适当的`PictureMarkerSymbol`。
- en: Navigating to this URL will open a page as shown next. When a picture icon is
    selected, a code is generated below. This code can be reused to recreate `PictureMarkerSymbology`
    as the one selected in the web page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到此URL将打开下面显示的页面。当选择图片图标时，下方会生成代码。可以重用此代码来重新创建在网页中选择的`PictureMarkerSymbology`。
- en: 'The generated code is a JSON representation of `PictureMarkerSymbol`. The JSON
    object provides the following properties:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的代码是`PictureMarkerSymbol`的JSON表示。JSON对象提供以下属性：
- en: '`angle`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angle`'
- en: '`xoffset`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xoffset`'
- en: '`yoffset`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yoffset`'
- en: '`type`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`'
- en: '`url`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`'
- en: '`contentType`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contentType`'
- en: '`width`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`'
- en: '`height`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`'
- en: '`imageData`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageData`'
- en: Among these, `imageData` and `url` are redundant, so we can avoid the `imageData`
    property, if we can use the URL property. The `imageData` property is just the
    `Base64` representation of the image. To avoid this, we can uncheck a box at the
    top-right corner of the web page, which reads something like **Enable Base64 encoding**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些中，`imageData`和`url`是多余的，所以如果我们可以使用URL属性，我们可以避免`imageData`属性。`imageData`属性只是图像的`Base64`表示。为了避免这种情况，我们可以取消网页右上角的一个框，上面写着**启用Base64编码**之类的字样。
- en: Also, if the values for `angle`, `xoffset`, and `yoffset` are 0, we can omit
    these too.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果`angle`、`xoffset`和`yoffset`的值为0，我们也可以省略这些。
- en: '![PictureMarkerSymbol](graphics/B04959_05_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![PictureMarkerSymbol](graphics/B04959_05_05.jpg)'
- en: Using the URL of the icon provided by this web page and in ArcGIS Symbol Playground
    will enable us to further customize `PictureMarkerSymbol`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此网页提供的图标的URL以及ArcGIS Symbol Playground将使我们能够进一步自定义`PictureMarkerSymbol`。
- en: '![PictureMarkerSymbol](graphics/B04959_05_06.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![PictureMarkerSymbol](graphics/B04959_05_06.jpg)'
- en: 'To customize `PictureMakerSymbol` use the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义`PictureMakerSymbol`，请使用以下内容：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: PictureFillSymbol
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PictureFillSymbol
- en: '`PictureFillSymbol` goes a step further and lets us fill a polygon geometry
    with an image.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`PictureFillSymbol`进一步让我们用图像填充多边形几何体。'
- en: '![PictureFillSymbol](graphics/B04959_05_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![PictureFillSymbol](graphics/B04959_05_07.jpg)'
- en: TextSymbol
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TextSymbol
- en: Text symbols can be generated in lieu of labels. Text symbols lack geometry,
    so it needs to be attached to geometry.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 文本符号可以用来代替标签。文本符号缺乏几何信息，因此需要附加到几何体上。
- en: '![TextSymbol](graphics/B04959_05_08.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![TextSymbol](graphics/B04959_05_08.jpg)'
- en: 'The following snippet generated from ArcGIS Symbol Playground demonstrates
    the components of generating `TextSymbol`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从ArcGIS Symbol Playground生成的以下片段演示了生成`TextSymbol`的组件：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Working with renderers
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用渲染器
- en: When an application uses layers that are referenced from a web map or a GIS
    service, the web map or service itself provides default drawing properties that
    determine how the layer will be drawn. A developer can choose to override this
    behavior by working with colors, symbols, and renderers to change and enhance
    how the features are displayed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序使用从Web地图或GIS服务引用的图层时，Web地图或服务本身提供了默认的绘图属性，确定图层的绘制方式。开发人员可以选择通过使用颜色、符号和渲染器来改变和增强要素的显示方式来覆盖这种行为。
- en: You can use the `setSymbol()` method to apply a symbol to a single graphic.
    When you want to apply symbology to all the graphics in a dynamic, feature, or
    a graphics layer, you can use a renderer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`setSymbol()`方法将符号应用于单个图形。当您想要将符号应用于动态、要素或图形图层中的所有图形时，可以使用渲染器。
- en: Renderers make it easy to symbolize many features quickly, using either a single
    symbol or multiple symbols based on attribute values.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染器使得可以快速地对许多要素进行符号化，可以使用单个符号或基于属性值使用多个符号。
- en: 'Several of the renderers available in the ArcGIS API for JavaScript are as
    follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript中提供的一些渲染器如下：
- en: '`SimpleRenderer`: This applies the same symbol to all the graphics in a layer'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SimpleRenderer`：将相同的符号应用于图层中的所有图形'
- en: '`UniqueValueRenderer`: This applies specific symbols based on the unique attribute
    values of each graphic'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UniqueValueRenderer`：根据每个图形的唯一属性值应用特定的符号'
- en: '`ClassBreaksRenderer`: This applies the symbols of different sizes or colors
    based on the ranges of attribute values'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassBreaksRenderer`：根据属性值的范围应用不同大小或颜色的符号'
- en: '`DotDensityRenderer`: This shows the variation in the spatial density of a
    discrete spatial phenomenon'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DotDensityRenderer`：显示离散空间现象的空间密度变化'
- en: '`HeatmapRenderer`: This converts point data into a raster display that shows
    the high density or weighted areas of concentration using a blur radius and the
    intensity value'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HeatmapRenderer`：将点数据转换为显示高密度或加权区域集中度的光栅显示，使用模糊半径和强度值'
- en: '`TemporalRenderer`: This visualizes real-time or historic observations in the
    current extent of the map, factoring in relative feature aging and tracks along
    which observed incidents occur, such as a hurricane'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TemporalRenderer`：这可视化地图当前范围内的实时或历史观测，考虑相对要素老化和观测事件发生的轨迹，如飓风。'
- en: '`ScaleDependentRenderer`: This applies different renderers to the same layer
    based on the current scale of the map'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ScaleDependentRenderer`：这根据地图的当前比例尺对同一图层应用不同的渲染器。'
- en: Choosing a renderer for a scenario
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为场景选择渲染器
- en: The symbols and renderers guide in the API documentation provides a great guide
    on using symbols and renderers. The documentation can be accessed at [https://developers.arcgis.com/javascript/jshelp/inside_renderers.html](https://developers.arcgis.com/javascript/jshelp/inside_renderers.html).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: API文档中的符号和渲染器指南提供了一个很好的指南，介绍了如何使用符号和渲染器。文档可以在[https://developers.arcgis.com/javascript/jshelp/inside_renderers.html](https://developers.arcgis.com/javascript/jshelp/inside_renderers.html)上访问。
- en: '`UniqueValueRenderer` and `ClassBreaksRenderer` are attribute-based renderers.
    This means that attribute values determine how the features are symbolized. To
    determine whether to use `UniqueValueRenderer` or `ClassBreaksRenderer` in a given
    situation, consider the nature of the field values upon which the categorization
    needs to be performed.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`UniqueValueRenderer`和`ClassBreaksRenderer`是基于属性的渲染器。这意味着属性值决定了要素的符号化方式。要确定在特定情况下使用`UniqueValueRenderer`还是`ClassBreaksRenderer`，需要考虑需要进行分类的字段值的性质。'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the set of unique values over the field to be rendered is small and discrete,
    consider using `UniqueValueRenderer`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要渲染的字段上的唯一值集合较小且离散，请考虑使用`UniqueValueRenderer`。
- en: If the set of unique values over the field to be rendered has a vast range and/or
    is continuous, consider using `ClassBreaksRenderer`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要渲染的字段上的唯一值集合具有广泛范围和/或是连续的，请考虑使用`ClassBreaksRenderer`。
- en: '`UniqueValueRenderer` and `ClassBreaksRenderer` have the `defaultSymbol` property
    that gets used when a value or break cannot be matched. During development, you
    can use a default symbol with a high-contrast color to quickly verify whether
    any feature has failed to match the renderer''s criteria.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`UniqueValueRenderer`和`ClassBreaksRenderer`具有`defaultSymbol`属性，当值或断点无法匹配时会使用。在开发过程中，您可以使用具有高对比度颜色的默认符号，快速验证是否有任何要素未能匹配渲染器的标准。'
- en: Developing a Stream Gauge application
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发流量计应用程序
- en: 'We will be developing a Stream Gauge app to demonstrate how to use the following
    renderers:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个流量计应用程序，以演示如何使用以下渲染器：
- en: Simple renderer
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单渲染器
- en: Unique value renderer
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独特值渲染器
- en: Class breaks renderer
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别分隔渲染器
- en: Heatmap renderer
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热力图渲染器
- en: The data source
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据源
- en: The Stream Gauge data is provide by Esri as part of their Living Atlas of the
    World portal. This means that we need to have an ArcGIS Developer login to access
    the content. The URL to the Mapservice for the Stream Gauge data is [http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/StreamGauge/MapServer/](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/StreamGauge/MapServer/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 流量计数据由Esri提供，作为其世界地图集的一部分。这意味着我们需要有ArcGIS开发者登录才能访问内容。流量计数据的地图服务的URL是[http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/StreamGauge/MapServer/](http://livefeeds.arcgis.com/arcgis/rest/services/LiveFeeds/StreamGauge/MapServer/)。
- en: The map service provides the readings of Stream Gauges around the United States,
    which depict the current water level in the measured areas. The application we
    are trying to develop endeavors to demonstrate different rendering techniques
    over the Gauge data. The upcoming snapshot in the next section provides a rough
    rendition of our final application that we will have developed by the end of this
    chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 地图服务提供了美国各地的流量计读数，显示了测量区域的当前水位。我们试图开发的应用程序旨在演示不同的渲染技术在流量计数据上的应用。下一节中即将呈现的快照提供了我们在本章结束时将开发的最终应用程序的初步呈现。
- en: If you do not have an ArcGIS Developer account, refer to [Chapter 3](ch03.html
    "Chapter 3. Writing Queries"), *Writing Queries*, for instructions on how to register
    an account and use the credentials in the application proxy.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有ArcGIS开发者帐户，请参考[第3章](ch03.html "第3章。编写查询")*编写查询*，了解如何注册帐户并在应用程序代理中使用凭据的说明。
- en: Simple renderer
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单渲染器
- en: Simple renderer is provided by the `esri/renderers/SimpleRenderer` module, and
    its constructor accepts any appropriate symbol or a JSON. Since all the Gauge
    locations are point locations, we will use `SimpleMarkerSymbol` to symbolize them.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleRenderer`由`esri/renderers/SimpleRenderer`模块提供，其构造函数接受任何适当的符号或JSON。由于所有的流量计位置都是点位置，我们将使用`SimpleMarkerSymbol`来对其进行符号化。'
- en: 'Since we have already discussed how to construct a `PictureMarkerSymbol` from
    its corresponding module, we will see how to use the JSON form of the symbol.
    Using the JSON representation of the symbol means that we no longer need to load
    the modules separately for each symbol and color. The following snapshot shows
    how JSON is formed and used in the `SimpleRenderer` constructor:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经讨论了如何从相应的模块构建`PictureMarkerSymbol`，我们将看到如何使用符号的JSON形式。使用符号的JSON表示意味着我们不再需要为每个符号和颜色单独加载模块。以下快照显示了JSON是如何形成并在`SimpleRenderer`构造函数中使用的：
- en: '![Simple renderer](graphics/B04959_05_09.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![简单渲染器](graphics/B04959_05_09.jpg)'
- en: 'In the preceding code, after the renderer is assigned with `SimpleRenderer`,
    the renderer object must be set to the feature layer by using the `setRenderer()`
    method. Also, the legend should be refreshed once the rendering is applied to
    the feature layer:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，在渲染器分配为`SimpleRenderer`之后，必须使用`setRenderer()`方法将渲染器对象设置为要素图层。此外，一旦渲染应用到要素图层上，图例应该被刷新：
- en: '[PRE7]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Applying unique value renderer
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用独特值渲染器
- en: 'Unique value renderer is provided by the `esri/renderers/UniqueValueRenderer`
    module. Unique value renderer lets us define different symbols for a set of unique
    values in the data. Up to three attribute fields can be provided to determine
    the uniqueness of the data. Unique value renderer expects the `uniqueValueInfos`
    object. This object is basically a mapping between the unique value and the symbol
    that is used to represent the value. Therefore, all the features with a specific
    value will be rendered by the corresponding mapped symbol. We can provide the
    `defaultSymbol` object to the renderer that will be used to symbolize any value
    that is not defined in the `uniqueValueInfos` object. The following is a JSON
    representation of a unique value renderer object symbolizing unique values of
    flood stages. The unique values for flood stages that we symbolize are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一值渲染器由`esri/renderers/UniqueValueRenderer`模块提供。唯一值渲染器允许我们为数据中一组唯一值定义不同的符号。最多可以提供三个属性字段来确定数据的唯一性。唯一值渲染器期望`uniqueValueInfos`对象。该对象基本上是唯一值和用于表示该值的符号之间的映射。因此，所有具有特定值的要素将由相应的映射符号渲染。我们可以为渲染器提供`defaultSymbol`对象，该对象将用于表示在`uniqueValueInfos`对象中未定义的任何值。以下是JSON表示唯一值渲染器对象，用于表示洪水阶段的唯一值。我们要表示的洪水阶段的唯一值如下：
- en: '`major`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`主要`'
- en: '`moderate`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`适度`'
- en: '`minor`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`次要`'
- en: '`action`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`行动`'
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code renders in the app as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在应用程序中呈现如下：
- en: '![Applying unique value renderer](graphics/B04959_05_10.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![应用唯一值渲染器](graphics/B04959_05_10.jpg)'
- en: 'The following properties can be used with feature layers to render it based
    on multiple visual properties, such as `color`, `rotation`, `size`, and `opacity`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性可用于特征图层，根据多个视觉属性（如`颜色`、`旋转`、`大小`和`不透明度`）进行渲染：
- en: '| Renderer method | Purpose |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 渲染器方法 | 目的 |'
- en: '| --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `setColorInfo()` | This shows an array of continuous values using a color
    ramp |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `setColorInfo()` | 这显示使用颜色渐变的连续值数组|'
- en: '| `setRotationInfo()` | This rotates a symbol to indicate variance in direction
    (for example, a traveling vehicle or a hurricane event) |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `setRotationInfo()` | 这会旋转一个符号以指示方向的变化（例如，行驶的车辆或飓风事件）|'
- en: '| `setSizeInfo()` | This changes the symbol size or width based on a range
    of data values |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `setSizeInfo()` | 这会根据一系列数据值的范围更改符号大小或宽度|'
- en: '| `setOpacityInfo` | This changes the alpha values used to display a layer
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `setOpacityInfo` | 这会更改用于显示图层的alpha值 |'
- en: Class breaks renderer
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别分隔渲染器
- en: When the field is classified and visually differentiated it is spread over a
    range of values, we can use `ClassBreaksRenderer`. `ClassBreaksRenderer` can be
    used by loading the `esri/renderers/ClassBreaksRenderer` module.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当字段被分类和视觉区分时，它会分布在一系列值上，我们可以使用`ClassBreaksRenderer`。可以通过加载`esri/renderers/ClassBreaksRenderer`模块来使用`ClassBreaksRenderer`。
- en: Class break renderer is very similar to unique value renderer in that the constructor
    for Class break renderer expects a `classBreakInfos` object, which is similar
    to the `uniqueValueInfos` object.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 类别分隔渲染器与唯一值渲染器非常相似，因为类别分隔渲染器的构造函数期望一个`classBreakInfos`对象，这与`uniqueValueInfos`对象类似。
- en: '`classBreakInfos` is an array of `classBreakInfo` objects, which maps between
    a class range and a symbol. A class range is defined by the class'' minimum (`classMinValue`)
    and the class'' maximum (`classMaxValue`).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`classBreakInfos`是一个`classBreakInfo`对象数组，它将类范围和符号进行了映射。类范围由类的最小值（`classMinValue`）和类的最大值（`classMaxValue`）定义。'
- en: '![Class breaks renderer](graphics/B04959_05_11.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![类别分隔渲染器](graphics/B04959_05_11.jpg)'
- en: 'The following snapshot shows how the `ClassBreakRenderer` JSON object is constructed
    with the `classBreakInfo` array and rendered on the map:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下快照显示了如何使用`classBreakInfo`数组构建`ClassBreakRenderer` JSON对象，并在地图上呈现：
- en: '![Class breaks renderer](graphics/B04959_05_12.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![类别分隔渲染器](graphics/B04959_05_12.jpg)'
- en: HeatmapRenderer
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热力图渲染器
- en: '`HeatmapRenderer` renders point data into a raster visualization that emphasizes
    areas of higher density or weighted values. This renderer normal distribution
    curve to spread value out in vertical and horizontal directions.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeatmapRenderer`将点数据渲染成突出显示更高密度或加权值的光栅可视化。该渲染器使用正态分布曲线在垂直和水平方向上分布值。'
- en: This averaging function is applied horizontally and vertically to produce a
    blurred area of influence instead of a single specific point.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个平均函数被水平和垂直应用，以产生一个模糊的影响区域，而不是一个特定的单一点。
- en: 'A `HeatmapRenderer` module constructor accepts an array of colors. The first
    color is used to represent areas with *least influence*, and the last color in
    the array is used to represent pixels with the highest influence. We can also
    define other parameters for the `HeatmapRenderer` constructor such as `blurRadius`,
    the maximum pixel intensity, and the minimum pixel intensity. The following snapshot
    of the code is used to generate a `HeatmapRenderer`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`HeatmapRenderer`模块构造函数接受一个颜色数组。第一种颜色用于表示*最小影响*的区域，数组中的最后一种颜色用于表示像素的最高影响。我们还可以为`HeatmapRenderer`构造函数定义其他参数，如`blurRadius`、最大像素强度和最小像素强度。以下代码快照用于生成`HeatmapRenderer`：'
- en: '![HeatmapRenderer](graphics/B04959_05_13.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![热力图渲染器](graphics/B04959_05_13.jpg)'
- en: DotDensityRenderer
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点密度渲染器
- en: '`DotDensityRenderer` provides the ability to create dot density visualizations
    of the data. A dot density map can be used to visualize the variation in the spatial
    density of a discrete spatial phenomenon. We can use multiple fields to visualize
    multiple variables on one map with different colors. For example, we can use different
    colors to show the distribution of various ethnic groups. The density on the map
    always changes as the user zooms in or out. Use `ScaleDependentRenderer` to set
    a unique-dot density renderer for each scale or zoom range, so `dotValue` and
    `dotSize` can vary across multiple scale ranges.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`DotDensityRenderer`提供了创建数据的点密度可视化的能力。点密度地图可以用来可视化离散空间现象的空间密度变化。我们可以使用多个字段以不同颜色在同一地图上可视化多个变量。例如，我们可以使用不同的颜色来显示各种族群的分布。地图上的密度随着用户的放大或缩小而变化。使用`ScaleDependentRenderer`为每个比例或缩放范围设置唯一的点密度渲染器，以便`dotValue`和`dotSize`可以在多个比例范围内变化。'
- en: BlendRenderer
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BlendRenderer
- en: The problem with `ClassBreakRenderer` or `UniqueValueRenderer` is that you have
    to assign a specific color to any given value. When assigning discrete colors
    based on clear boundary values isn't desirable, we can use `BlendRenderer`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClassBreakRenderer`或`UniqueValueRenderer`的问题在于，您必须为任何给定值分配特定的颜色。当基于明确的边界值分配离散颜色不可取时，我们可以使用`BlendRenderer`。'
- en: '`BlendRenderer` lets you do a fuzzy classification of data. It lets you assign
    different colors for values from different fields and use some opacity to represent
    the magnitude of the value. The final rendering will be a blend of these colors
    since we are using opacity for each field. This diagram shows how color and opacity
    variables can be blended to provide a rendering:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`BlendRenderer`让您对数据进行模糊分类。它允许您为不同字段的值分配不同的颜色，并使用一些不透明度来表示值的大小。由于我们对每个字段使用了不透明度，最终的渲染将是这些颜色的混合。这张图显示了如何混合颜色和不透明度变量以提供渲染：'
- en: '![BlendRenderer](graphics/B04959_05_14.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![BlendRenderer](graphics/B04959_05_14.jpg)'
- en: 'The following map shows a map of predominant minority groups throughout the
    United States. Such illustrations give a sense of predominant features while not
    completely suppressing other details:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下地图显示了美国各地主要少数民族群体的地图。这样的插图可以给出主要特征的感觉，同时不完全压制其他细节：
- en: '![BlendRenderer](graphics/B04959_05_15.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![BlendRenderer](graphics/B04959_05_15.jpg)'
- en: SmartMapping
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能映射
- en: 'The `SmartMapping` module provides a lot of helper methods that help us choose
    the best rendering method. The following illustration shows a list of methods
    available with the `SmartMapping` module:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`SmartMapping`模块提供了许多辅助方法，帮助我们选择最佳的渲染方法。以下插图显示了`SmartMapping`模块提供的方法列表：'
- en: '![SmartMapping](graphics/B04959_05_16.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![SmartMapping](graphics/B04959_05_16.jpg)'
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Smart Mapping Module: `esri/renderers/smartMapping`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 智能映射模块：`esri/renderers/smartMapping`
- en: A classification method for classed renderers
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别渲染器的分类方法
- en: The classed renderer helper methods, such as `createClassedColorRenderer()`
    and `createClassedSizeRenderer()`, need `classificationMethod` as a parameter.
    Choosing this value is quite important if we need to understand the significance
    of each.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类别渲染器辅助方法，如`createClassedColorRenderer()`和`createClassedSizeRenderer()`，需要`classificationMethod`作为参数。如果我们需要理解每个值的重要性，选择这个值是非常重要的。
- en: 'The following classification methods are available:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下分类方法可用：
- en: equal-interval
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等间隔
- en: natural-breaks
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自然断点
- en: quantile
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四分位数
- en: standard-deviation
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准差
- en: The default method is equal-interval.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方法是等间隔的。
- en: Equal interval classification divides the data equally into a predefined number
    of classes. Such a classification might not necessarily reflect the skewness in
    the data. For example, if the data range is from 0-1 million, and the majority
    of the data is concentrated between 300,000-500,000, then instead of classifying
    the data between 0-250,000, 250,000-500,000, 500,000-750,000, and 750,000-1,000,000,
    it would be a better classification scheme if there were a greater number of classification
    ranges between 300,000-500,000.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 等间隔分类将数据平均分成预定义数量的类别。这样的分类可能不一定反映数据的偏斜。例如，如果数据范围是0-100万，而大部分数据集中在30万-50万之间，那么与其将数据分类为0-25万、25万-50万、50万-75万和75万-100万，更好的分类方案是在30万-50万之间有更多的分类范围。
- en: Classification methods such as natural-breaks, quintile, and standard deviation
    help to segregate the data better; hence, our data visualization technique would
    be statistically much accurate. This topic will be discussed in greater detail
    in [Chapter 7](ch07.html "Chapter 7. Map Analytics and Visualization Techniques"),
    *Map Analytics and Visualization Techniques*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 自然断点、四分位数和标准差等分类方法有助于更好地分隔数据；因此，我们的数据可视化技术将在统计上更加准确。这个主题将在[第7章](ch07.html "第7章。地图分析和可视化技术")中进行更详细的讨论，*地图分析和可视化技术*。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter gives an in-depth treatment on the topic of colors, symbols, renderers,
    and the situations where each can be used effectively. This chapter also dealt
    with the nuances of data visualization techniques along with tips and tricks to
    create symbols and picture marker symbols easily. We demonstrated the utility
    of three basic renderers: simple renderer, unique value renderer, and class breaks
    renderer by developing a Stream Gauge app. In the following chapters, we will
    be dealing with advanced visualization techniques to visually classify data on
    spatial as well as temporal scales.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了颜色、符号、渲染器以及每种方法可以有效使用的情况。本章还涉及了数据可视化技术的细微差别，以及创建符号和图片标记符号的技巧和窍门。我们通过开发一个流量计应用程序来展示了三种基本渲染器的实用性：简单渲染器、唯一值渲染器和分级渲染器。在接下来的章节中，我们将探讨高级可视化技术，以在空间和时间尺度上对数据进行视觉分类。
