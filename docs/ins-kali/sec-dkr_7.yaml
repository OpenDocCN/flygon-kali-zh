- en: Chapter 7. Securing Docker with Third-party Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用第三方工具保护Docker
- en: 'In this chapter, let''s take a look at securing Docker using third-party tools.
    These would be tools that are not part of the Docker ecosystem, which you can
    use to help secure your systems. We will be taking a look at the following three
    items:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，让我们看看如何使用第三方工具来保护Docker。这些工具不是Docker生态系统的一部分，您可以使用它们来帮助保护您的系统。我们将看看以下三个项目：
- en: '**Traffic Authorization**: This allows inbound and outbound traffic to be verified
    by the token broker in order to ensure that traffic between services is secure.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量授权**：这允许入站和出站流量由令牌代理进行验证，以确保服务之间的流量是安全的。'
- en: '**Summon**: Summon is a command-line tool that reads a file in the `secrets.yml`
    format and injects secrets as environment variables into any process. Once the
    process exits, the secrets are gone.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Summon**：Summon是一个命令行工具，它读取`secrets.yml`格式的文件，并将秘密作为环境变量注入到任何进程中。一旦进程退出，秘密就消失了。'
- en: '**sVirt and SELinux**: sVirt is a community project that integrates **Mandatory
    Access Control** (**MAC**) security and Linux-based virtualization (**Kernel-base
    Virtual Machine** (**KVM**), lguest, and so on).'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sVirt和SELinux**：sVirt是一个集成**强制访问控制**（**MAC**）安全和基于Linux的虚拟化（**基于内核的虚拟机**（**KVM**），lguest等）的社区项目。'
- en: We will then add bonus material with regards to some extra third-party tools
    that are quite useful and powerful and deserve to get some recognition as useful
    third-party tools. These tools include **dockersh**, **DockerUI**, **Shipyard**,
    and **Logspout**. Without further ado, let's jump in and get started on our path
    to the most secure environments that we can obtain.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将添加一些额外的第三方工具，这些工具非常有用且功能强大，值得得到一些有用的第三方工具的认可。这些工具包括**dockersh**，**DockerUI**，**Shipyard**和**Logspout**。话不多说，让我们开始我们的道路，走向我们可以获得的最安全的环境。
- en: Third-party tools
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方工具
- en: So, what third-party tools will we focus on? Well from the preceding introduction,
    you learned that we will be looking at three tools in particular. These would
    be Traffic Authorization, Summon, and sVirt with SELinux. All the three tools
    help in different aspects and can be used to perform different things. We will
    learn the differences between them and help you to determine which ones to implement.
    You can decide whether you want to implement them all, only one or two of them,
    or maybe you feel that none of these would pertain to your current environment.
    However, it is good to know what is out there, in case, your needs change and
    the overall architecture of your Docker environments change over time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们将关注哪些第三方工具？嗯，从前面的介绍中，您了解到我们将特别关注三种工具。这些将是流量授权、Summon和带有SELinux的sVirt。所有这三种工具在不同方面都有帮助，并且可以用于执行不同的任务。我们将学习它们之间的区别，并帮助您确定要实施哪些工具。您可以决定是否要全部实施它们，只实施其中一两个，或者也许您觉得这些都与您当前的环境无关。然而，了解外部工具的存在是很好的，以防您的需求发生变化，您的Docker环境的整体架构随时间发生变化。
- en: Traffic Authorization
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流量授权
- en: 'Traffic Authorization can be used to regulate HTTP/HTTPS traffic between services.
    This involves a forwarder, gatekeeper, and token broker. This allows inbound and
    outbound traffic to be verified by the token broker in order to ensure that traffic
    between services is secure. Each container runs a gatekeeper that is used to intercept
    all the HTTP/HTTPS inbound traffic and verifies its authenticity from a token
    that is found in the authorization header. The forwarder also runs on each container,
    and like the gatekeeper, this also intercepts traffic; however, instead of intercepting
    inbound traffic, it intercepts outbound traffic and places the token on the authorization
    header. These tokens are issues from the token broker. These tokens can also be
    cached to save time and minimize the impact of latency. Let''s break it down into
    a series of steps, as shown in the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 流量授权可用于调节服务之间的HTTP/HTTPS流量。这涉及到一个转发器、守门人和令牌经纪人。这允许令牌经纪人验证服务之间的流量，以确保流量的安全性。每个容器都运行一个守门人，用于拦截所有的HTTP/HTTPS入站流量，并从授权标头中找到的令牌验证其真实性。转发器也在每个容器上运行，与守门人一样，它也拦截流量；然而，它不是拦截入站流量，而是拦截出站流量，并将令牌放置在授权标头上。这些令牌是由令牌经纪人发出的。这些令牌也可以被缓存以节省时间并最小化延迟的影响。让我们将其分解为一系列步骤，如下所示：
- en: Service A initiates a request to Service B.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务A发起对服务B的请求。
- en: The forwarder on Service A will authenticate itself with the token broker.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务A上的转发器将与令牌经纪人进行身份验证。
- en: The token broker will issue a token that Service A will apply to the authorization
    header and forward the request to Service B.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 令牌经纪人将发出一个令牌，服务A将应用于授权标头并将请求转发给服务B。
- en: Service B's gatekeeper will intercept the request and verify the authorization
    header against the token broker.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务B的守门人将拦截请求，并将授权标头与令牌经纪人进行验证。
- en: Once the authorization header has been verified, it is then forwarded to Service
    B.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦授权标头被验证，它就会被转发到服务B。
- en: As you can see, this applies extra authorizations on both inbound and outbound
    requests. As we will see in the next section, you can also use Summon along with
    Traffic Authorization to use shared secrets that are available once they are used,
    but go away once the application has completed its actions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这对入站和出站请求都应用了额外的授权。正如我们将在下一节中看到的，您还可以使用Summon与流量授权一起使用共享的秘密，一旦使用，这些秘密就可用，但一旦应用程序完成其操作，它们就会消失。
- en: For more information about Traffic Authorization and Docker, visit [https://blog.conjur.net/securing-docker-with-secrets-and-dynamic-traffic-authorization](https://blog.conjur.net/securing-docker-with-secrets-and-dynamic-traffic-authorization).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关流量授权和Docker的更多信息，请访问[https://blog.conjur.net/securing-docker-with-secrets-and-dynamic-traffic-authorization](https://blog.conjur.net/securing-docker-with-secrets-and-dynamic-traffic-authorization)。
- en: Summon
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Summon
- en: Summon is a command-line tool and is used to help pass along secrets or things
    you don't want exposed, such as passwords or environmental variables and then
    these secrets are disposed upon exiting the process. This is great as once the
    secret is used and the process exits, the secret no longer exists. This means
    the secret isn't lingering around until it is either removed manually or discovered
    by an attacker for malicious use. Let's take a look at how to utilize Summon.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Summon是一个命令行工具，用于帮助传递秘密或不想暴露的东西，比如密码或环境变量，然后这些秘密在进程退出时被销毁。这很棒，因为一旦秘密被使用并且进程退出，秘密就不再存在了。这意味着秘密不会一直存在，直到它被手动移除或被攻击者发现并用于恶意目的。让我们看看如何利用Summon。
- en: 'Summon typically uses three files: a `secrets.yml` file, script used to perform
    the action or task, and Dockerfile. As you have learned previously, or based on
    your current Docker experience, the Dockerfile is the basis of what helps in building
    your containers and has instructions on how to set up the container, what to install,
    what to configure, and so on.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Summon通常使用三个文件：一个`secrets.yml`文件，用于执行操作或任务的脚本，以及Dockerfile。正如您之前学到的，或者根据您当前的Docker经验，Dockerfile是构建容器的基础，其中包含了如何设置容器、安装什么、配置什么等指令。
- en: 'One great example have for the usage of Summon is to be able to deploy your
    AWS credentials to a container. For utilizing AWS CLI, you need a few key pieces
    of information that should be kept secret. These two pieces of information are
    your **AWS Access Key ID** and **AWS Secret Access Key**. With these two pieces
    of information, you can manipulate someone''s AWS account and perform actions
    within this account. Let''s take a look at the contents of one of these files,
    the `secrets.yml` file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是使用Summon来部署AWS凭证到一个容器中。为了使用AWS CLI，你需要一些关键的信息，这些信息应该保密。这两个信息是你的AWS访问密钥ID和AWS秘密访问密钥。有了这两个信息，你就可以操纵某人的AWS账户并在该账户内执行操作。让我们来看看其中一个文件`secrets.yml`文件的内容：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `-D` option is used to substitute values while `$env` is an example of a
    substitution variable, therefore, the options can be interchanged.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`-D`选项用于替换值，而`$env`是一个替换变量的例子，因此，选项可以互换使用。'
- en: In the preceding content, we can see that we want to pass along these two values
    into our application. With this file, the script file you want to deploy, and
    the Dockerfile, you are now ready to build your application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的内容中，我们可以看到我们想要将这两个值传递给我们的应用程序。有了这个文件、您想要部署的脚本文件和Dockerfile，您现在可以构建您的应用程序了。
- en: 'We simply utilize the `docker build` command inside the folder that has our
    three files in it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在包含这三个文件的文件夹中使用`docker build`命令：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we need to install Summon, which can be done with a simple `curl` command,
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Summon，可以通过一个简单的`curl`命令来完成：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have Summon installed, we need to run the container with Summon
    and pass along our secret values (note that this will only work on OS X):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们安装了Summon，我们需要使用Summon运行容器，并传递我们的秘密值（请注意，这只适用于OS X）：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we are ready to run Docker with Summon in order to pass along these credentials
    to the container:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备使用Summon运行Docker，以便将这些凭证传递给容器：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also view the values that you have passed along by using the following
    `cat` command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下`cat`命令查看您传递的值：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `@SUMMONENVFILE` is a memory-mapped file that contains the values from the
    `secrets.yml` file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SUMMONENVFILE`是一个内存映射文件，其中包含了`secrets.yml`文件中的值。'
- en: For more information and to see other options to utilize Summon, visit [https://conjurinc.github.io/summon/#examples](https://conjurinc.github.io/summon/#examples).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和其他使用Summon的选项，请访问[https://conjurinc.github.io/summon/#examples](https://conjurinc.github.io/summon/#examples)。
- en: sVirt and SELinux
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sVirt和SELinux
- en: sVirt is part of the SELinux implementation, but it is typically turned off
    as most view it as a roadblock. The only roadblock should be learning sVirt and
    SELinux.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: sVirt是SELinux实现的一部分，但通常被关闭，因为大多数人认为它是一个障碍。唯一的障碍应该是学习sVirt和SELinux。
- en: sVirt is an open source community project that implements MAC security for Linux-based
    virtualization. A reason you would want to implement sVirt is to improve the security
    as well as harden the system against any bugs that might exist in the hypervisor.
    This will help in eliminating any attack vectors that might be aimed towards the
    virtual machine or host.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: sVirt是一个实现Linux基于虚拟化的MAC安全性的开源社区项目。您希望实现sVirt的一个原因是为了提高安全性，以及加固系统防止可能存在于hypervisor中的任何错误。这将有助于消除可能针对虚拟机或主机的任何攻击向量。
- en: Remember that all containers on a Docker host share the usage of the Linux kernel
    that is running on the Docker host. If there is an exploit to this Linux kernel
    on the host, then all containers running on this Docker host have the potential
    to be easily compromised. If you implement sVirt and a container is compromised,
    there is no way for the compromise to reach your Docker host and then out to other
    Docker containers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Docker主机上的所有容器共享运行在Docker主机上的Linux内核的使用权。如果主机上的Linux内核存在漏洞，那么在该Docker主机上运行的所有容器都有可能很容易地受到威胁。如果您实施了sVirt并且容器受到了威胁，那么威胁无法传播到您的Docker主机，然后传播到其他Docker容器。
- en: 'sVirt utilizes labels in the same way as SELinux. The following table is a
    list of these labels and their descriptions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: sVirt与SELinux一样利用标签。以下表格列出了这些标签及其描述：
- en: '| Type | SELinux Context | Description |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | SELinux上下文 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Virtual machine processes | `system_u:system_r:svirt_t:MCS1` | `MCS1` is
    a randomly selected MCS field. Currently, approximately 500,000 labels are supported.
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟机进程 | `system_u:system_r:svirt_t:MCS1` | `MCS1`是一个随机选择的MCS字段。目前，大约支持50万个标签。'
- en: '| Virtual machine image | `system_u:object_r:svirt_image_t:MCS1` | Only processes
    labeled `svirt_t` with the same MCS fields are able to read/write these image
    files and devices. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: 虚拟机镜像 | `system_u:object_r:svirt_image_t:MCS1` | 只有具有相同MCS字段的标记为`svirt_t`的进程才能读/写这些镜像文件和设备。
- en: '| Virtual machine shared read/write content | `system_u:object_r:svirt_image_t:s0`
    | All processes labeled `svirt_t` are allowed to write to the `svirt_image_t:s0`
    files and devices. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟机共享读/写内容 | `system_u:object_r:svirt_image_t:s0` | 所有标记为`svirt_t`的进程都被允许写入`svirt_image_t:s0`文件和设备。'
- en: '| Virtual machine image | `system_u:object_r:virt_content_t:s0` | This is the
    system default label used when an image exits. No `svirt_t` virtual processes
    are allowed to read files/devices with this label. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟机镜像 | `system_u:object_r:virt_content_t:s0` | 这是镜像退出时使用的系统默认标签。不允许`svirt_t`虚拟进程读取带有此标签的文件/设备。'
- en: Other third-party tools
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他第三方工具
- en: There are some other third-party tools that do deserve a mention in this chapter
    and are worth exploring to see the value that they can add for you. It seems that
    these days, a lot of focus is on GUI applications to help with securing applications
    and infrastructures. The following utilities will give you a few options that
    could be pertinent to the environment you are running with the Docker tools.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还有一些其他值得一提的第三方工具，值得探索，看看它们对您能够增加的价值。似乎如今，很多关注点都放在了用于帮助保护应用程序和基础设施的图形界面应用程序上。以下实用程序将为您提供一些可能与您正在使用Docker工具的环境相关的选项。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you should use caution when implementing some of the following items
    as there could be unwanted repercussions. Make sure to use testing environments
    prior to production implementation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在实施以下某些项目时应谨慎，因为可能会产生意想不到的后果。在生产实施之前，请务必在测试环境中使用。
- en: dockersh
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dockersh
- en: The dockersh was designed to be used as a login shell replacement on machines
    that support multiple interactive users. Why is this important? If you remember
    some of the general security warnings that you have when dealing with Docker containers
    on a Docker host, you will know that whoever has access to the Docker host has
    access to all the running containers on this Docker host. With dockersh, you can
    isolate the use on a per-container basis and only allow users access the containers
    that you want them to, while maintaining administrative control over the Docker
    host and keeping the security threshold minimum.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: dockersh旨在用作支持多个交互式用户的机器上的登录shell替代品。为什么这很重要？如果您记得在处理Docker主机上的Docker容器时遇到的一些一般安全警告，您将知道谁可以访问Docker主机就可以访问该Docker主机上运行的所有容器。使用dockersh，您可以按容器隔离用户，并且只允许用户访问您希望他们访问的容器，同时保持对Docker主机的管理控制，并将安全门槛降至最低。
- en: 'This is an ideal way to help isolate users on a per-container basis, while
    containers help eliminate the need for SSH by utilizing dockersh, you can remove
    some of these fears about providing everyone that needs container to access, the
    access to the Docker host(s) as well. There is a lot of information required to
    set up and invoke dockersh, therefore, if you are interested, it''s recommended
    to visit the following URL to find more about dockersh, including how to set it
    up and use it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种理想的方法，可以在每个容器的基础上帮助隔离用户，同时容器有助于通过使用dockersh消除对SSH的需求，您可以消除一些关于提供所有需要容器访问权限的人访问Docker主机的担忧。设置和调用dockersh需要大量信息，因此，如果您感兴趣，建议访问以下网址，了解有关dockersh的更多信息，包括如何设置和使用它：
- en: '[https://github.com/Yelp/dockersh](https://github.com/Yelp/dockersh)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/Yelp/dockersh](https://github.com/Yelp/dockersh)'
- en: DockerUI
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DockerUI
- en: 'DockerUI is a simple way to view what is going on inside your Docker host.
    The installation of DockerUI is very straightforward and is done by running a
    simple `docker run` command in order to get started:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: DockerUI是查看Docker主机内部情况的简单方法。安装DockerUI非常简单，只需运行一个简单的`docker run`命令即可开始：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To access the DockerUI, you simply open a browser and navigate to the following
    link:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问DockerUI，只需打开浏览器并导航到以下链接：
- en: '`http://<docker_host_ip>:9000`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://<docker_host_ip>:9000`'
- en: 'This opens your DockerUI to the world on port `9000`, as shown in the following
    screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在端口`9000`上打开您的DockerUI，如下面的截图所示：
- en: '![DockerUI](../images/00010.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![DockerUI](../images/00010.jpeg)'
- en: You can get the general high-level view of your Docker host and its ecosystem
    and can do things such as manipulate the containers on the Docker host by restarting,
    stopping, or starting them from a stopped state. DockerUI takes some of the steep
    learning curve of running command-line items and places them into actions that
    you perform in a web browser using point and click.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获得有关Docker主机及其生态系统的一般高级视图，并可以执行诸如从停止状态重新启动、停止或启动Docker主机上的容器等操作。DockerUI将运行命令行项的陡峭学习曲线转化为您在Web浏览器中使用点和点击执行的操作。
- en: For more information about DockerUI, visit [https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关DockerUI的更多信息，请访问[https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui)。
- en: Shipyard
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shipyard
- en: Shipyard, like DockerUI, allows you to use a GUI web interface to manage various
    aspects—mainly in your containers—and manipulate them. Shipyard is build on top
    of Docker Swarm so that you get to utilize the feature set of Docker Swarm, where
    you can manage multiple hosts and containers instead of having to just focus on
    one host and its containers at a time.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Shipyard，就像DockerUI一样，允许您使用GUI Web界面来管理各种方面——主要是在您的容器中——并对其进行操作。Shipyard是建立在Docker
    Swarm之上的，因此您可以利用Docker Swarm的功能集，从而可以管理多个主机和容器，而不仅仅是专注于一台主机及其容器。
- en: 'Using Shipyard is simple and the following `curl` command re-enters the picture:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Shipyard非常简单，以下`curl`命令再次出现：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To access the Shipyard once the set up is completed, you can simply open a
    browser and navigate to the following link:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置完成，要访问Shipyard，您只需打开浏览器并导航到以下链接：
- en: '`http://<docker_host_ip>:8080`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://<docker_host_ip>:8080`'
- en: 'As we can see in the following screenshot, we can view all the containers on
    our Docker host:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在下面的屏幕截图中所看到的，我们可以查看我们的Docker主机上的所有容器：
- en: '![Shipyard](../images/00011.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Shipyard](../images/00011.jpeg)'
- en: 'We can also view all the images that are on our Docker host, as shown in the
    following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看位于我们的Docker主机上的所有图像，如下面的屏幕截图所示：
- en: '![Shipyard](../images/00012.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Shipyard](../images/00012.jpeg)'
- en: 'We can also control our containers, as seen in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以控制我们的容器，如下面的屏幕截图所示：
- en: '![Shipyard](../images/00013.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Shipyard](../images/00013.jpeg)'
- en: Shipyard, like DockerUI, allows you to manipulate your Docker hosts and containers,
    by restarting them, stopping them, starting them from a failed state, or deploying
    new containers and having them join the Swarm cluster. Shipyard also allows you
    to view information such as port mapping information that is what port from the
    host maps to the container. This allows you to get a hold of important information
    like that when you need it quickly to address any security related issues. Shipyard
    also has user management where DockerUI lacks such capability.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Shipyard，就像DockerUI一样，允许您操作Docker主机和容器，重新启动它们，停止它们，从失败状态启动它们，或者部署新容器并使其加入Swarm集群。Shipyard还允许您查看诸如端口映射信息之类的信息，即主机的哪个端口映射到容器。这使您能够在需要时快速获取重要信息，以解决任何安全相关问题。Shipyard还具有用户管理功能，而DockerUI则缺乏此功能。
- en: 'For more information about Shipyard simply visit the following URLs:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Shipyard的更多信息，请访问以下网址：
- en: '[https://github.com/shipyard/shipyard](https://github.com/shipyard/shipyard)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/shipyard/shipyard](https://github.com/shipyard/shipyard)'
- en: '[http://shipyard-project.com](http://shipyard-project.com)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://shipyard-project.com](http://shipyard-project.com)'
- en: Logspout
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Logspout
- en: Where do you go when there is an issue that needs to be addressed? Most people
    will first look at the logs of that application to see if it is outputting any
    errors. With Logspout, this becomes a much more manageable task with many multiple
    running containers. With Logspout, you can route all the logs for each and every
    container to a location of your choice. Then, you could parse these logs in one
    place. Instead of having to pull the logs from each container and review them
    individually you can instead have Logspout do that work for you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现需要解决的问题时，您会去哪里？大多数人首先会查看该应用程序的日志，以查看是否输出了任何错误。有了Logspout，对于许多运行中的容器，这将成为一个更易管理的任务。使用Logspout，您可以将每个容器的所有日志路由到您选择的位置。然后，您可以在一个地方解析这些日志。您可以让Logspout为您完成这项工作，而不必从每个容器中提取日志并逐个审查它们。
- en: 'Logspout is just as easy to set up as we have seen for other third-party solutions.
    Simply run the following command on each Docker host to start collecting the logs:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Logspout的设置与我们在其他第三方解决方案中看到的一样简单。只需在每个Docker主机上运行以下命令即可开始收集日志：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we have all the container logs collected in one area, we need to parse
    through these logs, but how do we do it?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有容器日志收集到一个区域，我们需要解析这些日志，但是该如何做呢？
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here's the `curl` command to the rescue again! Logs get prefixed with the container
    names and colorized in a manner in order to distinguish the logs. You can replace
    the loopback (`127.0.0.1`) address in the `docker run` invocations with the IP
    address of the Docker host so that it's easier to connect to in order to be able
    to get the logs as well as change the port from `8000` to something of your choice.
    There are also different modules that you can utilize to obtain and collect logs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里又是`curl`命令拯救的时候了！日志以容器名称为前缀，并以一种方式进行着色，以区分日志。您可以将`docker run`调用中的回环（`127.0.0.1`）地址替换为Docker主机的IP地址，以便更容易连接，以便能够获取日志，并将端口从`8000`更改为您选择的端口。还有不同的模块可以用来获取和收集日志。
- en: For more information about Logspout, visit [https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Logspout的更多信息，请访问[https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout)。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we looked at some third-party tools in order to be able to
    help secure Docker environments. Mainly, we looked at three tools: Traffic Authorization,
    Summon, and sVirt with SELinux. All the three can be utilized in different ways
    to help secure your Docker environments to give you the peace of mind at end of
    the day to run your applications in the Docker containers. We learned what third-party
    tools, beyond those offered by Docker, are out there to help secure your environments
    to keep your application(s) secure when running on Docker.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些第三方工具，以帮助确保Docker环境的安全。主要是我们看了三个工具：Traffic Authorization、Summon和带有SELinux的sVirt。这三个工具可以以不同的方式被利用，以帮助确保您的Docker环境，让您在一天结束时放心地在Docker容器中运行应用程序。我们了解了除Docker提供的工具之外，还有哪些第三方工具可以帮助确保您的环境，在Docker上运行应用程序时保持安全。
- en: We then took a look at some other third-party tools. These are extra tools that
    are worthwhile to some, given what your Docker environment setup looks like. Some
    of these tools include dockersh, DockerUI, Shipyard, and Logsprout. These tools,
    when carefully applied, layer on extra enhancements to help in the overall security
    of your Docker configurations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们看了一些其他第三方工具。鉴于您的Docker环境设置，这些额外的工具对一些人来说是值得的。其中一些工具包括dockersh、DockerUI、Shipyard和Logsprout。这些工具在小心应用时，可以为Docker配置的整体安全性增加额外的增强。
- en: In the next chapter, we will be looking at keeping up on security. With so much
    going on these days that surrounds the security, it's sometimes tough to know
    where to look for updated information and be able to apply quick fixes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何保持安全。在当今安全问题如此严峻的情况下，有时很难知道在哪里寻找更新的信息并能够快速应用修复措施。
- en: You will be learning to help enforce the idea of keeping security in the forefront
    of your mind and subscribing to things such as e-mail lists that not only include
    Docker, but also include items that are related to the environments you are running
    with Linux. Other items are keeping up on following what is going on with regards
    to items such as GitHub issues that relate to Docker security, following along
    in the IRC rooms, and watching websites such as the CVE.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学会帮助强化将安全性放在首要位置的想法，并订阅诸如电子邮件列表之类的内容，这些内容不仅包括Docker，还包括与您在Linux上运行的环境相关的内容。其他内容包括跟踪与Docker安全相关的GitHub问题，参与IRC聊天室的讨论，并关注CVE等网站。
