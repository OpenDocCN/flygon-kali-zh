["```js\nnpm install --save-dev cache-loader\n```", "```js\nmodule.exports = {\n module: {\n  rules: [\n  {\n    test: /\\.ext$/,\n    use: ['cache-loader', 'babel-loader'],\n    include: path.resolve('src'),\n   },\n  ],\n },\n};\n```", "```js\nnpm install worker-loader --save-dev\n```", "```js\nimport Worker from 'worker-loader!./Worker.js';\n```", "```js\n{\n module: {\n  rules: [\n  {\n   test: /\\.worker\\.js$/,\n   use: { \n      loader: 'worker-loader' \n      }\n    }\n   ]\n  }\n }\n```", "```js\nimport Worker from './file.worker.js';\nconst worker = new Worker();\nworker.postMessage({ a: 1 });\nworker.onmessage = function (event) {};\nworker.addEventListener(\"message\", function (event) {});\n```", "```js\nnpm run build\n```", "```js\nnpm install --save-dev coffee-loader\n```", "```js\nmodule.exports = {\n    module: {\n      rules: [\n       {\n          test: /\\.coffee.md$/,\n          use: [{\n          loader: 'coffee-loader',\n          options: {\n            literate: true\n         }\n      }]\n    }]\n  }\n}\n```", "```js\nnpm i -D coffee-redux-loader\n```", "```js\nwebpack - dev - server \"mocha!./cover-my-client-tests.js\"--options webpackOptions.js\n// webpackOptions.js\nmodule.exports = {\n    output: \"bundle.js\",\n    publicPrefix: \"/\",\n    debug: true,\n    includeFilenames: true,\n    watch: true,\n    postLoaders: [{\n       test: \"\",\n       exclude: [\n         \"node_modules.chai\",\n         \"node_modules.coverjs-loader\",\n         \"node_modules.webpack.buildin\"\n    ],\n    loader: \"coverjs-loader\"\n }]\n}\n// cover-my-client-tests.js\nrequire(\"./my-client-tests\");\nafter(function() {\n   require(\"cover-loader\").reportHtml();\n});\n```", "```js\nnpm install i18n-loader\n```", "```js\n. / colors.json {\n        \"red\": \"red\",\n        \"green\": \"green\",\n        \"blue\": \"blue\"\n    }\n    . / de - de.colors.json {\n        \"red\": \"rot\",\n        \"green\": \"green\"\n    }\n```", "```js\nvar locale = require(\"i18n!./colors.json\");\n```", "```js\nlocale(function() {\n console.log(locale.red); // prints red\n console.log(locale.blue); // prints blue\n});\n```", "```js\n{\n    \"i18n\": {\n        \"locales\": [\n            \"de\",\n            \"de-de\",\n            \"fr\"\n        ],\n        // \"bundleTogether\": false\n    }\n}\n```", "```js\nrequire(\"i18n/choose!./file.js\"); \n```", "```js\nrequire(\"i18n/concat!./file.js\"); \nrequire(\"i18n/merge!./file.js\"); \n```", "```js\nrequire(\"i18n!./file.json\") ==\n   require(\"i18n/merge!json!./file.json\")\n```", "```js\nnpm install imports-loader\n```", "```js\n$(\"img\").doSomeAwesomeJqueryPluginStuff();\n```", "```js\nrequire(\"imports-loader?$=jquery!./example.js\");\n```", "```js\n{\n  test: /\\.html$/,\n  include: Condition(s) (optional),\n  exclude: Condition(s) (optional),\n  options: {\n    ignoreLinks: Condition(s) (optional),\n    ignorePathReWrite: Condition(s) (optional),\n    processStyleLinks: Boolean (optional),\n    htmlLoader: Object (optional)\n  },\n  loader: 'polymer-webpack-loader'\n},\n```", "```js\nnpm install --save-dev script-loader\n```", "```js\nmodule.exports = {\n    module: {\n        rules: [{\n            test: /\\.exec\\.js$/,\n            use: ['script-loader']\n        }]\n    }\n}\n```", "```js\nimport exec from 'script-loader!./script.js';\n```", "```js\nmodule.exports = {\n     module: {\n     rules: [\n     {\n       test: /\\.script\\.js$/,\n       use: [\n   {\n     loader: 'script-loader',\n     options: {\n           sourceMap: true,\n              },\n   },\n        ]\n    }\n         ]\n    }\n }\n```", "```js\nmodule.exports = {\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                    loader: 'style-loader', // creates style nodes \n                                               from JS strings\n\n                },\n                {\n                    loader: 'css-loader', // translates CSS \n                                              into  CommonJS\n                },\n                {\n                    loader: 'less-loader', // compiles Less to CSS\n                },\n            ],\n        }, \n      ],\n    },\n };\n```", "```js\nmodule.exports = {\n    module: {\n        rules: [{\n            test: /\\.less$/,\n            use: [{\n                    loader: 'style-loader',\n                },\n                {\n                    loader: 'css-loader',\n                },\n                {\n                    loader: 'less-loader',\n                    options: {\n                        strictMath: true,\n                        noIeCompat: true,\n                    },\n                },\n            ],\n         },\n       ],\n    },\n };\n```", "```js\nThe Node.js API for babel has been moved to babel-core.\n```", "```js\n  {\n    test: /\\.m?js$/,\n    loader: 'babel',\n  }\n```", "```js\n  {\n    test: /\\.m?js$/,\n    loader: 'babel-loader',\n  }\n\n```", "```js\nmodule.exports = require(\"babel-loader\").custom(babel => {\n function myPlugin() {\n return {\n visitor: {},\n };\n }\n```", "```js\nreturn {\n    customOptions({\n        opt1,\n        opt2,\n        ...loader\n    }) {\n        return {\n            custom: {\n                opt1,\n                opt2\n            },\n            loader,\n        };\n    },\n```", "```js\nconfig(cfg) {\n    if (cfg.hasFilesystemConfig()) {\n        return cfg.options;\n    }\n\n    return {\n        ...cfg.options,\n        plugins: [\n            ...(cfg.options.plugins || []),\n            testPlugin,\n        ],\n    };\n},\n```", "```js\nresult(result) {\nreturn {\n    ...result,\n    code: result.code + \"\\n// Generated by this custom loader\",\n    };\n    },\n    };\n});\n```", "```js\n.exports = {\n    module: {\n        rules: [{\n            loader: path.join(__dirname, 'custom-loader.js'),\n        }]\n    }\n};\ncustomOptions(options: Object): {\n    custom: Object,\n    loader: Object\n}\n\n```", "```js\nconfig(cfg: PartialConfig): Object\n```", "```js\nresult(result: Result): Result\n```", "```js\nconst webpack = require('webpack');\n\nwebpack({\n  // Configuration Object\n}, (some, stats) => { // Stats Object\n  if (some || stats.hasErrors()) {\n    // Handle errors here\n  }\n  // Done processing\n});\n```", "```js\nconst webpack = require('webpack');\n\nconst compiler = webpack({\n // Configuration Object\n});\n\ncompiler.run((some, stats) => { // Stats Object\n});\n```", "```js\nwatch(watchOptions, callback);\nconst webpack = require('webpack');\n\nconst compiler = webpack({\n // Configuration Object\n});\n\nconst watching = compiler.watch({\n // Example watchOptions\n aggregateTimeout: 300,\n poll: undefined\n}, (some, stats) => { // Stats Object\n // Print watch/build result here...\n console.log(stats);\n});\n```", "```js\nwatching.close(() => {\n console.log('Watching Ended.');\n});\n```", "```js\nwatching.invalidate();\n```", "```js\nvar webpack = require('webpack');\nwebpack([\n { entry: './index1.js', output: { filename: 'bundle1.js' } },\n { entry: './index2.js', output: { filename: 'bundle2.js' } }\n], (some, stats) => { // Stats Object\n process.stdout.write(stats.toString() + '\\n');\n})\n```", "```js\nconst webpack = require('webpack');\n\nwebpack({\n // Configuration Object\n}, (some, stats) => {\n if (some) {\n   console.error(some.stack || some);\n if (some.details) {\n   console.error(some.details);\n }\n return;\n }\nconst info = stats.toJson();\nif (stats.hasErrors()) {\n  console.error(info.errors);\n }\nif (stats.hasWarnings()) {\n  console.warn(info.warnings);\n }\n// Log results...\n});\n```", "```js\nnpm install full-name-of-plugin-goes-here-and-should-be-hyphenated-and-not-camelcase --save-dev\n```", "```js\nconst MinifyPlugin = require(\"full-name-of-plugin-goes-here-and-should-be-hyphenated-not-camelcase\");\nmodule.exports = {\n entry: //...,\n output: //...,\n plugins: [\n new MinifyPlugin(minifyOpts, pluginOpts)\n ]\n}\n```", "```js\nmangle: {\ntopLevel: true\n}\n```", "```js\nnew webpack.optimize.CommonsChunkPlugin(options);\n```", "```js\nrequire('./locale/' + name + '.json')\n```", "```js\n[/plugins/min-chunk-size-plugin]\n```"]