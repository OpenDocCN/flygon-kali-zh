["```java\n@DisplayName(\"API Calculator tests\")\npublic class CalculatorTest {\n  @Test\n  @DisplayName(\"Happy multiplyByTwo()\")\n  void multiplyByTwo(){\n    CalculatorImpl calculator = new CalculatorImpl();\n    int i = 2;\n    int result = calculator.multiplyByTwo(i);\n    assertEquals(4, result);\n  }\n}\n```", "```java\nCalculator calculator = new CalculatorImpl();\n\n```", "```java\n@DisplayName(\"API Calculator tests\")\npublic class CalculatorTest {\n  @Test\n  @DisplayName(\"Happy multiplyByTwo()\")\n  void multiplyByTwo(){\n    Calculator calculator = CalculatorFactory.createInstance();\n    int i = 2;\n    int result = calculator.multiplyByTwo(i);\n    assertEquals(4, result);\n  }\n}\n```", "```java\npublic static Calculator create(){\n  return AnotherCalculatorImpl();\n}\n```", "```java\nclass AnotherCalculatorImpl  implements Calculator {\n  public int multiplyByTwo(int i){\n    System.out.println(AnotherCalculatorImpl.class.getName());\n    return i + i;\n  }\n}\n```", "```java\npublic class CalculatorFactory {\n  public static Calculator create(){\n    String whichImpl = \n       Utils.getStringValueFromConfig(\"calculator.conf\", \"which.impl\");\n    if(whichImpl.equals(\"multiplies\")){\n      return new CalculatorImpl();\n    } else if (whichImpl.equals(\"adds\")){\n      return new AnotherCalculatorImpl();\n    } else {\n      throw new RuntimeException(\"Houston, we have a problem. \" +\n        \"Unknown key which.impl value \" + whichImpl + \" is in config.\");\n    } \n  }     \n}\n```", "```java\n{\n  \"which.impl\": \"multiplies\"\n}\n```", "```java\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\n\npublic class Utils {\n  private static JSONObject config = null;\n  public static String getStringValueFromConfig(String configFileName, \n                                                            String key){\n    if(config == null){\n      ClassLoader classLoader = Utils.class.getClassLoader();\n      File file =\n           new File(classLoader.getResource(configFileName).getFile());\n      try(FileReader fr = new FileReader(file)){\n        JSONParser parser = new JSONParser();\n        config = (JSONObject) parser.parse(fr);\n      } catch (ParseException | IOException ex){\n        ex.printStackTrace();\n        return \"Problem reading config file.\";\n      }\n    }\n    return config.get(key) == null ? \"unknown\" : (String)config.get(key);\n  }\n}\n```", "```java\n<dependency>\n  <groupId>commons-io</groupId>\n  <artifactId>commons-io</artifactId>\n  <version>2.5</version>\n</dependency>\n\n```", "```java\n<dependency>\n  <groupId>com.googlecode.json-simple</groupId>\n  <artifactId>json-simple</artifactId>\n  <version>1.1</version>\n</dependency>\n\n```", "```java\n<dependency>\n  <groupId>javax.json</groupId>\n  <artifactId>javax.json-api</artifactId>\n  <version>1.1.2</version>\n</dependency>\n<dependency>\n  <groupId>org.glassfish</groupId>\n  <artifactId>javax.json</artifactId>\n  <version>1.1.2</version>\n</dependency>\n\n```", "```java\nimport javax.json.Json;\nimport javax.json.JsonObject;\nimport javax.json.JsonReader;\npublic class Utils {\n  private static JsonObject config = null;\n  public static String getStringValueFromConfig(String FileName, \n                                                           String key){\n    if(config == null){\n      ClassLoader classLoader = Utils.class.getClassLoader();\n      File file = new File(classLoader.getResource(fileName).getFile());\n      try(FileInputStream fis = new FileInputStream(file)){\n        JsonReader reader = Json.createReader(fis);\n        config = reader.readObject();\n      } catch (IOException ex){\n        ex.printStackTrace();\n        return \"Problem reading config file.\";\n      }\n    }\n    return config.get(key) == null ? \"unknown\" : config.getString(key);\n  }\n}\n```", "```java\n@DisplayName(\"Utils tests\")\npublic class UtilsTest {\n  @Test\n  @DisplayName(\"Test reading value from config file by key\")\n  void getStringValueFromConfig(){\n    //test body we will write here\n  }\n}\n```", "```java\n{\n  \"unknown\": \"some value\"\n}\n```", "```java\n@Test\n@DisplayName(\"Test reading value from config file by key\")\nvoid getStringValueFromConfig(){\n  String fileName = \"utilstest.conf\";\n  String value = Utils.getStringValueFromConfig(fileName, \"some value\");\n  assertEquals(\"some value\", value);\n\n  value = Utils.getStringValueFromConfig(fileName, \"some value\");\n  assertEquals(\"unknown\", value);\n}\n```", "```java\n{\n  \"unknown\": \"another value\"\n}\n```", "```java\npublic interface Calculator {\n  int multiplyByTwo(int i);\n}\nstatic Calculator createInstance(){\n  return CalculatorFactory.create();\n}\n```", "```java\npublic interface Calculator {\n  int multiplyByTwo(int i);\n  static Calculator createInstance(){\n    return  CalculatorFactory.create();\n  }\n  String CONF_NAME = \"calculator.conf\";\n  String CONF_WHICH_IMPL = \"which.impl\";\n  enum WhichImpl{\n    multiplies, //use multiplication operation\n    adds        //use addition operation\n  }\n}\n```", "```java\nString whichImpl = \n   Utils.getStringValueFromConfig(Calculator.CONF_NAME, \n                                     Calculator.CONF_WHICH_IMPL);\nSystem.out.println(Calculator.CONF_WHICH_IMPL + \"=\" + whichImpl);\n\n```", "```java\nvoid multiplyByTwo() {\n  WhichImpl whichImpl = \n      Utils.getWhichImplValueFromConfig(Calculator.CONF_NAME, \n                                        Calculator.CONF_WHICH_IMPL);\n  System.out.println(\"\\n\" + Calculator.CONF_WHICH_IMPL + \n                                                   \"=\" + whichImpl);\n  Calculator calculator = Calculator.createInstance();\n  int i = 2;\n  int result = calculator.multiplyByTwo(i);\n  assertEquals(4, result);\n}\n```", "```java\npublic class CalculatorImpl implements Calculator {\n  public int multiplyByTwo(int i){\n    System.out.println(CalculatorImpl.class.getClass().getName());\n    return i * 2;\n  }\n}\npublic class AnotherCalculatorImpl implements Calculator {\n  public int multiplyByTwo(int i){\n    System.out.println(AnotherCalculatorImpl.class.getClass().getName());\n    return i + i;\n }\n}\n```", "```java\npublic static Calculator create(){\n  String whichImpl = Utils.getStringValueFromConfig(Calculator.CONF_NAME, \n                                       Calculator.CONF_WHICH_IMPL);         \n  if(whichImpl.equals(Calculator.WhichImpl.multiplies.name())){\n    return new CalculatorImpl();\n  } else if (whichImpl.equals(Calculator.WhichImpl.adds.name())){\n    return new AnotherCalculatorImpl();\n  } else {\n    throw new RuntimeException(\"Houston, we have a problem. \" +\n                     \"Unknown key \" + Calculator.CONF_WHICH_IMPL +\n                     \" value \" + whichImpl + \" is in config.\");\n  }\n}\n```", "```java\nWhichImpl getWhichImplValueFromConfig(String configFileName, String key){\n  String whichImpl = getStringValueFromConfig(configFileName, key);\n  try{\n    return Enum.valueOf(WhichImpl.class, whichImpl);\n  } catch (IllegalArgumentException ex){\n    throw new RuntimeException(\"Houston, we have a problem. \" +\n                     \"Unknown key \" + Calculator.CONF_WHICH_IMPL +\n                     \" value \" + whichImpl + \" is in config.\");\n  }\n}\n```", "```java\n@Test\n@DisplayName(\"Test matching config value to enum WhichImpl\")\nvoid getWhichImpValueFromConfig(){\n  String confifFileName = \"utilstest.conf\";\n  for(int i = 1; i <= WhichImpl.values().length; i++){\n    String key = String.valueOf(i);\n    WhichImpl whichImpl = \n       Utils.getWhichImplValueFromConfig(confifFileName, key);\n    System.out.println(key + \"=\" + whichImpl);\n  }\n  try {\n    WhichImpl whichImpl = \n       Utils.getWhichImplValueFromConfig(confifFileName, \"unknown\");\n    fail(\"Should not get here! whichImpl = \" + whichImpl);\n  } catch (RuntimeException ex){\n    assertEquals(\"Houston, we have a problem. \" +\n                 \"Unknown key which.impl value unknown is in config.\", \n                 ex.getMessage());\n  }\n  try {\n    WhichImpl whichImpl = \n       Utils.getWhichImplValueFromConfig(confifFileName, \"some value\");\n    fail(\"Should not get here! whichImpl = \" + whichImpl);\n  } catch (RuntimeException ex){\n    assertEquals(\"Houston, we have a problem. \" +\n                 \"Unknown key which.impl value unknown is in config.\", \n                 ex.getMessage());\n  }\n}\n```", "```java\n{\n  \"1\": \"multiplies\",\n  \"2\": \"adds\",\n  \"unknown\": \"unknown\"\n}\n```", "```java\npublic static Calculator create(){\n  WhichImpl whichImpl = \n    Utils.getWhichImplValueFromConfig(Calculator.CONF_NAME, \n                                      Calculator.CONF_WHICH_IMPL);\n  switch (whichImpl){\n    case multiplies:\n      return new CalculatorImpl();\n    case adds:\n      return new AnotherCalculatorImpl();\n    default:\n      throw new RuntimeException(\"Houston, we have another \" + \n                \"problem. We do not have implementation for the key \" +\n                Calculator.CONF_WHICH_IMPL + \" value \" + whichImpl);\n  }\n}\n```", "```java\npublic class CalculatorImpl implements Calculator {\n  public static String addOneAndConvertToString(double d){\n    System.out.println(CalculatorImpl.class.getName());\n    return Double.toString(d + 1);\n  }\n  //...\n}\npublic class AnotherCalculatorImpl implements Calculator {\n  public static String addOneAndConvertToString(double d){\n    System.out.println(AnotherCalculatorImpl.class.getName());\n    return String.format(\"%.2f\", d + 1);\n  }\n  //...\n}\n```", "```java\nString s1 = CalculatorImpl.addOneAndConvertToString(42d);\nString s2 = AnotherCalculatorImpl.addOneAndConvertToString(42d);\n```", "```java\npublic static String addOneAndConvertToString(double d){\n  WhichImpl whichImpl = \n       Utils.getWhichImplValueFromConfig(Calculator.CONF_NAME, \n                                         Calculator.CONF_WHICH_IMPL);\n  switch (whichImpl){\n    case multiplies:\n      return CalculatorImpl.addOneAndConvertToString(d);\n    case adds:\n      return AnotherCalculatorImpl.addOneAndConvertToString(d);\n    default:\n      throw new RuntimeException(\"Houston, we have another \" +\n                \"problem. We do not have implementation for the key \" +\n                Calculator.CONF_WHICH_IMPL + \" value \" + whichImpl);\n  }\n}\n```", "```java\nstatic String addOneAndConvertToString(double d){\n  return CalculatorFactory.addOneAndConvertToString(d);\n}\n```", "```java\ndouble d = 2.12345678;\nString mString = \"3.12345678\";\nString aString = \"3.12\";\nString s = Calculator.addOneAndConvertToString(d);\nif(whichImpl.equals(Calculator.WhichImpl.multiplies)){\n  assertEquals(mString, s);\n} else {\n  assertNotEquals(mString, s);\n}\nif(whichImpl.equals(Calculator.WhichImpl.adds)){\n  assertEquals(aString, s);\n} else {\n  assertNotEquals(aString, s);\n}\n```", "```java\n{\n  \"which.impl\": \"adds\"\n}\n```", "```java\npublic interface Calculator {\n  int multiplyByTwo(int i);\n  static Calculator createInstance(){\n    return  CalculatorFactory.create();\n  }\n  static String addOneAndConvertToString(double d){\n    return  CalculatorFactory.addOneAndConvertToString(d);\n  }\n  String CONF_NAME = \"calculator.conf\";  //file name\n  String CONF_WHICH_IMPL = \"which.impl\"; //key in the .conf file\n  enum WhichImpl{\n    multiplies, //uses multiplication operation\n                // and returns addOneAndConvertToString() \n                // result without formating\n    adds    //uses addition operation \n            // and returns addOneAndConvertToString()\n            // result with two decimals only\n  }\n}\n```", "```java\ninterface A {\n  int m(String s);\n  double m(String s);  \n} \ninterface B {\n  int m(int s);\n  static int m(int i) { return 42; }\n}\ninterface C {\n  int m(double i);\n  private double m(double s) { return 42d; }\n}\ninterface D {\n  int m(String s);\n  default int m(String s) { return 42; }\n}\ninterface E {\n  private int m(int s) { return 1; };\n  default double m(int i) { return 42d; }\n}\ninterface F {\n  default int m(String s) { return 1; };\n  static int m(String s) { return 42; }\n}\ninterface G {\n  private int m(double d) { return 1; };\n  static int m(double s) { return 42; }\n}\ninterface H {\n  default int m(int i) { return 1; };\n  default double m(int s) { return 42d; }\n}\n\n```", "```java\ninterface A {\n  int m(String s);\n  int m(String s, double d);\n  int m(double d, String s);\n  String m(int i);\n  private double m(double d) { return 42d; }\n  private int m(int i, String s) { return 1; }\n  default int m(String s, int i) { return 1; }\n} \ninterface B {\n  static int m(String s, int i) { return 42; }\n  static int m(String s) { return 42; }\n}\n\n```", "```java\ninterface D {\n  default int m(int i, String s) { return 1; }\n  default int m(String s, int i) { return 1; }\n}\ninterface C {\n  default double m(double d) { return 42d; }\n}\ninterface B extends C, D {\n  int m(double d, String s);\n  String m(int i);\n}\ninterface A extends B {\n  int m(String s);\n  int m(String s, double d);\n}\n\n```", "```java\ninterface A {\n  int m(String s);\n  static int m(String s, double d) { return 1 }\n} \ninterface B {\n  int m(String s, int i);\n  static int m(String s) { return 42; }\n}\ninterface D {\n  default int m(String s, int s) { return 1; }\n  static int m(String s, double s) { return 42; }\n}\ninterface E {\n  private int m() { return 1; }\n  static int m(String s) { return 42; }\n}\n```", "```java\ninterface G {\n  static int m(String s) { return 42; }\n}\n\ninterface F extends G {\n  static int m(String s, int i) { return 42; }\n}\n\n```", "```java\ninterface D {\n  default int m(String s) { // does not override anything\n    return 1; \n  } \n}\n\ninterface C extends D {\n  default int m(String d) { // overrides method of D\n    return 42; \n  } \n}\n\n```", "```java\ninterface B {\n  int m(String s);\n}\ninterface A extends B {\n  @Override             //no error \n  int m(String s);\n}\ninterface D {\n  default int m1(String s) { return 1; }\n}\ninterface C extends D {\n  @Override            //error\n  default int m(String d) { return 42; }\n}\n```", "```java\ninterface D {\n  static int m(String s) { return 1; }\n}\ninterface C extends D {\n  @Override                  //error\n  default int m(String d) { return 42; }\n}\n```", "```java\ninterface D {\n  static int m(String s) { return 1; }\n}\ninterface C extends D{\n  @Override               //error\n  static int m(String d) { return 42; }\n}\n```", "```java\ninterface B {\n  String NAME = \"B\";\n  static int m(String d) { return 1; }\n  class Clazz{\n    String m(){ return \"B\";}\n  }\n}\n\ninterface A extends B {\n  String NAME = \"A\";\n  static int m(String d) { return 42; }\n  class Clazz{\n    String m(){ return \"A\";}\n  }\n}\n```", "```java\npublic static void main(String[] args) {\n  System.out.println(B.NAME);\n  System.out.println(B.m(\"\"));\n  System.out.println(new B.Clazz().m());\n}\n```", "```java\nclass ClassC {\n  public static String field = \"static field C\";\n  public static String m(String s){\n    return \"static method C\";\n  }\n}\n\nclass ClassD extends ClassC {\n  public static String field = \"static field D\";\n  public static String m(String s){\n    return \"static method D\";\n  }\n}\n```", "```java\nSystem.out.println(ClassD.field);\nSystem.out.println(ClassD.m(\"\"));\nSystem.out.println(new ClassD().field);\nSystem.out.println(new ClassD().m(\"\"));\nClassC object = new ClassD();\nSystem.out.println(object.field);\nSystem.out.println(object.m(\"\"));\n```", "```java\n1 System.out.println(ClassD.field);       //static field D\n2 System.out.println(ClassD.m(\"\"));       //static method D\n3 System.out.println(new ClassD().field); //static field D\n4 System.out.println(new ClassD().m(\"\")); //static method D\n5 ClassC object = new ClassD();\n6 System.out.println(object.field);       //static field C\n7 System.out.println(object.m(\"\"));       //static method C\n\n```", "```java\nclass ClassC {\n  public static String field1 = \"instance field C\";\n  public String m1(String s){\n    return \"instance method C\";\n  }\n}\nclass ClassD extends ClassC {\n  public String field1 = \"instance field D\";\n  public String m1(String s){\n    return \"instance method D\";\n  }\n}\n```", "```java\nSystem.out.println(new ClassD().field1);\nSystem.out.println(new ClassD().m1(\"\"));\nClassC object1 = new ClassD();\nSystem.out.println(object1.m1(\"\"));\nSystem.out.println(object1.field1);\nSystem.out.println(((ClassD)object1).field1);\n\n```", "```java\n1 System.out.println(new ClassD().field1);     //instance field D\n2 System.out.println(new ClassD().m1(\"\"));     //instance method D\n3 ClassC object1 = new ClassD();\n4 System.out.println(object1.m1(\"\"));          //instance method D\n5 System.out.println(object1.field1);          //instance field C\n6 System.out.println(((ClassD)object1).field1);//instance field D\n\n```", "```java\nclass ClassC {\n  private String field1 = \"instance field C\";\n  public String getField(){ return field1; }\n  public void setField(String s){ field1 = s; }\n  public String m1(String s){\n    return \"instance class C\";\n  }\n}\nclass ClassD extends ClassC {\n  private String field1 = \"instance field D\";\n  public String getField(){ return field1; }\n  public void setField(String s){ field1 = s; }\n  public String m1(String s){\n    return \"instance class D\";\n  }\n}\n```", "```java\nvoid m() {\n  // some code\n}\nint m(String s){\n  // some code\n  return 1;\n}\nvoid m(int i){\n  // some code\n}\nint m(String s, double d){\n  // some code\n  return 1;\n}\nint m(double d, String s){\n  // some code\n  return 1;\n}\n```", "```java\npublic class SimpleMath {\n    public int multiplyByTwo(int i){\n       return i * 2;\n    }\n}\n```", "```java\npublic class SimpleMath {\n    public int multiplyByTwo(int i){\n        return 2 * i;\n    }\n    public int multiplyByTwo(String s){\n        int i = Integer.parseInt(s);\n        return 2 * i;\n    }\n}\n```", "```java\npublic class SimpleMath {\n    public int multiplyByTwo(int i){\n       return 2 * i;\n    }\n    public int multiplyByTwo(String s){\n       int i = Integer.parseInt(s);\n       return multiplyByTwo(i);\n    }\n}\n```", "```java\npublic class SimpleMath {\n  private int i;\n  private String s;\n  public SimpleMath() {\n  }\n  public SimpleMath(int i) {\n    this.i = i;\n  }\n  public SimpleMath(String s) {\n    this.s = s;\n  }\n  // Other methods that use values of the fields i and s\n  // go here\n}\n```", "```java\npublic SimpleMath(int i) {\n  this.i = i;\n}\n```", "```java\npublic class Person {\n  private String firstName;\n  private String lastName;\n  private LocalDate dob;\n  public Person(String firstName, String lastName, LocalDate dob) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.dob = dob;\n  }\n  public String getFirstName() { return firstName; }\n  public String getLastName() { return lastName; }\n  public LocalDate getDob() { return dob; }\n\n  @Override\n  public boolean equals(Object other){\n    if (other == null) return false;\n    if (this == other) return true;\n    if (!(other instanceof Person)) return false;\n    final Person that = (Person) other;\n    return this.getFirstName().equals(that.getFirstName()) &&\n           this.getLastName().equals(that.getLastName()) &&\n           this.getDob().equals(that.getDob());\n  }\n}\n```", "```java\npublic class PersonTest {\n  @Test\n  void equals() {\n    LocalDate dob = LocalDate.of(2001, 01, 20);\n    LocalDate dob1 = LocalDate.of(2001, 01, 21);\n\n    Person p = new Person(\"Joe\", \"Blow\", dob);\n    assertTrue(p.equals(p));\n    assertTrue(p.equals(new Person(\"Joe\", \"Blow\", dob)));\n\n    assertFalse(p.equals(new Person(\"Joe1\", \"Blow\", dob)));\n    assertFalse(p.equals(new Person(\"Joe\", \"Blow1\", dob)));\n    assertFalse(p.equals(new Person(\"Joe\", \"Blow\", dob1)));\n    assertFalse(p.equals( new Person(\"Joe1\", \"Blow1\", dob1)));\n  }\n}\n```", "```java\nassertFalse(p.equals(null));\nassertFalse(p.equals(new Person(null, \"Blow\", dob)));\nassertFalse(p.equals(new Person(\"Joe\", null, dob)));\nassertFalse(p.equals(new Person(null, null, dob)));\nassertFalse(p.equals(new Person(null, null, null)));\n\nassertTrue(new Person(null, \"Blow\", dob)\n   .equals(new Person(null, \"Blow\", dob)));\nassertTrue(new Person(\"Joe\", null, dob)\n   .equals(new Person(\"Joe\", null, dob)));\nassertTrue(new Person(\"Joe\", \"Blow\", null)\n   .equals(new Person(\"Joe\", \"Blow\", null)));\nassertTrue(new Person(null, null, null)\n   .equals(new Person(null, null, null)));\n\n```", "```java\nreturn this.getFirstName().equals(that.getFirstName()) &&\n       this.getLastName().equals(that.getLastName()) &&\n       this.getDob().equals(that.getDob());\n\n```", "```java\npublic Person(String firstName, String lastName, LocalDate dob) {\n  this.firstName = firstName == null ? \"\" : firstName;\n  this.lastName = lastName == null ? \"\" : lastName;\n  this.dob = dob;\n  if(dob == null){\n    throw new RuntimeException(\"Date of birth is null\");\n  }\n}\n```", "```java\nassertFalse(p.equals(null));\nassertFalse(p.equals(new Person(null, \"Blow\", dob)));\nassertFalse(p.equals(new Person(\"Joe\", null, dob)));\nassertFalse(p.equals(new Person(null, null, dob)));\ntry {\n  new Person(\"Joe\", \"Blow\", null);\n} catch (RuntimeException ex){\n  assertNotNull(ex.getMessage());\n  //add the record ex.getMessage() to the log here\n}\n\nassertTrue(new Person(null, \"Blow\", dob)\n   .equals(new Person(null, \"Blow\", dob)));\nassertTrue(new Person(\"Joe\", null, dob)\n   .equals(new Person(\"Joe\", null, dob)));\nassertTrue(new Person(null, null, dob)\n   .equals(new Person(null, null, dob)));\n```", "```java\npublic class Vehicle {\n  private int weightPounds, horsePower;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  protected int getWeightPounds(){ return this.weightPounds; }\n  protected double getSpeedMph(double timeSec, int weightPounds){\n    double v = \n        2.0 * this.horsePower * 746 * timeSec * 32.174 / weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\npublic class Truck extends Vehicle {\n  private int payloadPounds;\n  public Truck(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds, horsePower);\n    this.payloadPounds = payloadPounds;\n  }\n  public void setPayloadPounds(int payloadPounds) {\n    this.payloadPounds = payloadPounds;\n  }\n  protected int getWeightPounds(){ \n    return this.payloadPounds + getWeightPounds(); \n  }\n  public double getSpeedMph(double timeSec){\n    return getSpeedMph(timeSec, getWeightPounds());\n  }\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount;\n  public Car(int passengersCount, int weightPounds, int horsePower) {\n    super(weightPounds , horsePower);\n    this.passengersCount = passengersCount;\n  }\n  public void setPassengersCount(int passengersCount) {\n    this.passengersCount = passengersCount;\n  }\n\n  protected int getWeightPounds(){ \n    return this.passengersCount * 200 + getWeightPounds(); }\n  public double getSpeedMph(double timeSec){\n    return getSpeedMph(timeSec, getWeightPounds());\n  }\n}\n```", "```java\nTruck truck = new Truck(500, 2000, 300);\nSystem.out.println(truck.getSpeedMph(10));\n\n```", "```java\nprotected int getWeightPounds(){ \n  return this.payloadPounds + getWeightPounds(); \n}\n```", "```java\nprotected int getWeightPounds(){ \n  return this.payloadPounds + super.getWeightPounds(); \n}\n```", "```java\npublic double getSpeedMph(double timeSec){\n  return getSpeedMph(timeSec, getWeightPounds());\n}\n```", "```java\npublic double getSpeedMph(double timeSec){\n  return getSpeedMph(timeSec, this.getWeightPounds());\n}\n```", "```java\npublic ClassName(){\n  super();\n}\n```", "```java\npublic class Parent {\n}\npublic class Child extends Parent{\n}\n```", "```java\nnew Child();\n```", "```java\npublic class Parent {\n  public Parent(int i) {\n  }\n}\n```", "```java\npublic class Parent {\n  public Parent() {\n  }\n  public Parent(int i) {\n  }\n}\n```", "```java\npublic class Child extends Parent{\n  public Child() {\n    super(10);\n  }\n}\n```", "```java\npublic class Child extends Parent{\n  public Child(int i) {\n    super(i);\n  }\n}\n```", "```java\npublic class GrandDad{\n  private String name = \"GrandDad\";\n  public GrandDad() {\n    System.out.println(name);\n  }\n}\npublic class Parent extends GrandDad{\n  private String name = \"Parent\";\n  public Parent() {\n    System.out.println(name);\n  }\n}\npublic class Child extends Parent{\n  private String name = \"Child\";\n  public Child() {\n    System.out.println(name);\n  }\n}\n```", "```java\nGrandDad.class.getSimpleName(); //always returns \"GrandDad\"\n```", "```java\npublic class GrandDad{\n  private static String NAME = GrandDad.class.getSimpleName();\n  public GrandDad() {\n    System.out.println(NAME);\n  }\n}\npublic class Parent extends GrandDad{\n  private static String NAME = Parent.class.getSimpleName();\n  public Parent() {\n    System.out.println(NAME);\n  }\n}\npublic class Child extends Parent{\n  private static String NAME = Child.class.getSimpleName();\n  public Child() {\n    System.out.println(NAME);\n  }\n}\n```", "```java\npublic class GrandDad{\n  private static String NAME = GrandDad.class.getSimpleName()\n  public GrandDad() {\n    System.out.println(NAME);\n  }\n  public GrandDad(String familyName) {\n    System.out.println(familyName + \": \" + NAME);\n  }\n}\npublic class Parent extends GrandDad{\n  private static String NAME = Parent.class.getSimpleName()\n  public Parent() {\n    System.out.println(NAME);\n  }\n  public Parent(String familyName) {\n    System.out.println(familyName + \": \" + NAME);\n  }\n}\npublic class Child extends Parent{\n  private static String NAME = Child.class.getSimpleName()\n  public Child() {\n    System.out.println(NAME);\n  }\n  public Child(String familyName) {\n    System.out.println(familyName + \": \" + NAME);\n  }\n}\n```", "```java\npublic GrandDad(String familyName) {\n  System.out.println(familyName + \": \" + NAME);\n}\npublic Parent(String familyName) {\n  super(familyName);\n  System.out.println(familyName + \": \" + NAME);\n}\npublic Child(String familyName) {\n  super(familyName);\n  System.out.println(familyName + \": \" + NAME);\n}\n```", "```java\npublic class Child extends Parent{\n  private static String NAME = Child.class.getSimpleName()\n  public Child() {\n    this(\"The Defaults\");\n  }\n  public Child(String familyName) {\n    super(familyName);\n    System.out.println(familyName + \": \" + NAME);\n  }\n}\n```", "```java\n        class SomeClass{\n          private String someValue = \"Initial value\";\n          public void setSomeValue(String someValue) {\n            this.someValue = someValue;\n          }\n          public String getSomeValue() {\n            return someValue;\n          }\n        }\n        public class FinalDemo {\n          public static void main(String... args) {\n            final SomeClass o = new SomeClass();\n            System.out.println(o.getSomeValue());   //Initial value\n            o.setSomeValue(\"Another value\");\n            System.out.println(o.getSomeValue());   //Another value\n            o.setSomeValue(\"Yet another value\");\n            System.out.println(o.getSomeValue());   //Yet another value\n\n            final String s1, s2;\n            final int x, y;\n            y = 2;\n            int v = y + 2;\n            x = v - 4;\n            System.out.println(\"x = \" + x);        //x = 0\n            s1 = \"1\";\n            s2 = s1 + \" and 2\";\n            System.out.println(s2);                // 1 and 2 \n            //o = new SomeClass();                 //error\n            //s2 = \"3\";                            //error\n            //x = 5;                               //error\n            //y = 6;                               //error\n          }\n        }\n```", "```java\n        public class FinalDemo {\n          final SomeClass o = new SomeClass();\n          final String s1 = \"Initial value\";\n          final String s2;\n          final String s3;\n          final int i = 1;\n          final int j;\n          final int k;\n          {\n            j = 2;\n            s2 = \"new value\";\n          }\n          public FinalDemo() {\n            k = 3;\n            s3 = \"new value\";\n          }\n          public void method(){\n            //this.i = 4;         //error\n            //this.j = 4;         //error\n            //this.k = 4;         //error\n            //this.s3 = \"\";       //error\n            this.o.setSomeValue(\"New value\");\n          }\n        }\n```", "```java\n        public class FinalDemo {\n          final static SomeClass OBJ = new SomeClass();\n          final static String S1 = \"Initial value\";\n          final static String S2;\n          final static int INT1 = 1;\n          final static int INT2;\n          static {\n            INT2 = 2;\n            S2 = \"new value\";\n          }    \n          void method2(){\n            OBJ.setSomeValue(\"new value\");\n            //OBJ = new SomeClass();\n            //S1 = \"\";\n            //S2 = \"\";\n            //INT1 = 0;\n            //INT2 = 0;\n          }\n        }\n```", "```java\nvoid someMethod(final int i, final String s, final SomeClass o){\n    //... \n}\n```", "```java\nclass FinalVariable{\n    private int i;\n    public FinalVariable() { this.i = 1; }\n    public void setInt(int i){\n        this.i = 100;\n        i = i;\n    }\n    public int getInt(){\n        return this.i;\n    }\n}\n```", "```java\nFinalVariable finalVar = new FinalVariable();\nSystem.out.println(\"Initial setting: finalVar.getInt()=\" + \n                                                 finalVar.getInt());\nfinalVar.setInt(5);\nSystem.out.println(\"After setting to 5: finalVar.getInt()=\" + \n                                                 finalVar.getInt());\n```", "```java\npublic void setInt(final int i){\n  this.i = 100;\n  i = i;\n}\n```", "```java\npublic void setInt(final int i){\n    this.i = 100;\n    this.i = i;\n}\n```", "```java\npublic class SingletonClassExample {\n  private static SingletonClassExample OBJECT = null;\n\n  private SingletonClassExample(){}\n\n  public final SingletonClassExample getInstance() {\n    if(OBJECT == null){\n      OBJECT = new SingletonClassExample();\n    }\n    return OBJECT;\n  }\n\n  //... other class functionality\n}\n```"]