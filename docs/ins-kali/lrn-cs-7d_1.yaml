- en: Day 01 - Overview of the .NET Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1天 - .NET框架概述
- en: This is Day 01 of our seven day journey to learn C#. Today, we will begin with
    an introduction of a new world of programming and will discuss all the basic concepts
    required to learn this programming language. We will also discuss the .NET Framework
    and the .NET Core framework by covering important concepts of the framework. We
    will also get a basic understanding of managed and unmanaged code. At the end
    of the day, we will start with a simple Hello World program.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们学习C#的七天之旅的第一天。今天，我们将开始介绍一个新的编程世界，并讨论学习这种编程语言所需的所有基本概念。我们还将讨论.NET框架和.NET
    Core框架，涵盖框架的重要概念。我们还将对托管代码和非托管代码有一个基本的了解。在一天结束时，我们将开始一个简单的Hello World程序。
- en: 'Today, we will learn the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将学习以下主题：
- en: What is programming?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是编程？
- en: What is .NET Core?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是.NET Core？
- en: What is .NET standard?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET标准是什么？
- en: What is programming?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是编程？
- en: There might be various definitions or various thoughts to define the word *programming***.**
    In my view, *programming is writing a solution in such a way that a machine (computer)
    can understand to depict the solution, which you can identify manually*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有各种定义或各种思考来定义单词*编程*。在我看来，*编程是以一种机器（计算机）能够理解并描绘解决方案的方式编写解决方案，这是你可以手动识别的*。
- en: 'For example, let’s say you have a problem statement: *find the total count
    of vowels from this book*. If you want to find the solution to this statement,
    what will you do?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你有一个问题陈述：*找出这本书中元音字母的总数*。如果你想找到这个陈述的解决方案，你会怎么做？
- en: 'The probable steps for the solution to this problem are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的可能步骤如下：
- en: First, get the right book. I am assuming that you know the vowels (*a*, *e*,
    *i*, *o*, and *u*).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，找到正确的书。我假设你知道元音字母（*a*、*e*、*i*、*o*和*u*）。
- en: How many vowels did you find in a book?--0 (zero).
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在书中找到了多少个元音字母？--0（零）。
- en: Open the current page (initially, our current page is 1) and start reading to
    find vowels.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开当前页（最初，我们的当前页是1），开始阅读以找到元音字母。
- en: If the letter matches *a*, *e*, *i*, *o*, or *u* (please note that the case
    doesn’t matter, so the letters might as well be *A*, *E*, *I*, *O*, and *U*),
    then increase the vowel count by one.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果字母匹配*a*、*e*、*i*、*o*或*u*（请注意大小写不重要，所以字母也可以是*A*、*E*、*I*、*O*和*U*），则增加一个元音计数。
- en: Is the current page completed?
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前页完成了吗？
- en: 'If the answer of step 5 is yes, then check if this is the last page of the
    book:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第5步的答案是肯定的，那么检查这是否是书的最后一页：
- en: If yes, then we have the total vowel count in hand, which is nothing but *n*,
    where *n* is the total number of vowels found in the current chapter. Move to
    step 8 for the result.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是的话，那么我们手头就有了总的元音计数，也就是*n*，其中*n*是当前章节中找到的元音字母的总数。移动到第8步获取结果。
- en: If this is not the last chapter, move to the next chapter by adding 1 to the
    current chapter number. So, we should move to 1 + 1 = 2 (Chapter 2).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这不是最后一章，那么通过将当前章节编号加1来移动到下一章。所以，我们应该移动到1 + 1 = 2（第2章）。
- en: In the next chapter, repeat steps 4 to 6 and until you reach the last chapter
    of the book.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一章中，重复第4到6步，直到到达书的最后一章。
- en: Finally, we have the total vowel count, that is, *n* (*n* is the total number
    of vowels found).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有了总的元音计数，也就是*n*（*n*是找到的元音字母的总数）。
- en: The preceding steps just described how we reached a perfect solution for our
    problem statement. These steps showed how we manually found the answer to our
    problem of counting all the vowels in the book's chapters.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤只是描述了我们如何找到问题陈述的完美解决方案。这些步骤展示了我们如何手动找到了书中所有章节中元音字母的总数的答案。
- en: In the programming world, such steps are collectively known as an *algorithm*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程世界中，这些步骤统称为*算法*。
- en: An algorithm is nothing but a process to solve a problem by defining a set of
    rules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 算法只不过是通过定义一组规则来解决问题的过程。
- en: When we write the preceding step(s)/algorithm in such a way that a machine/computer
    will be able to follow the instructions, it is called programming. These instructions
    should be written in a language understood by the machine/computer, and this is
    what is called a programming language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以一种机器/计算机能够遵循指令的方式编写前面的步骤/算法时，这就是编程。这些指令应该用机器/计算机能够理解的语言编写，这就是所谓的编程语言。
- en: In this book, we will use C# 7.0 as the programming language and .NET Core as
    the framework.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用C# 7.0作为编程语言，.NET Core作为框架。
- en: What is .NET?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是.NET？
- en: While we are referring to .NET (pronounced as dot NET), it is .NET Full, as
    we have .NET Core in place and we are using .NET Core in our book examples with
    C# 7.0 as the language. Before moving ahead, you should know about .NET because
    there is a .NET Standard available with the .NET Core, that is API servers for
    both .NET Framework as well .NET Core. So, if you created a project using .NET
    Standard it is valid for both .NET Framework and .NET Core.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提到.NET（发音为点网），它是.NET完整版，因为我们已经准备好了.NET Core，并且我们在书中的示例中使用了C# 7.0作为语言。在继续之前，你应该了解.NET，因为.NET
    Core有一个.NET标准，它是.NET框架和.NET Core的API服务器。因此，如果你使用.NET标准创建了一个项目，它对.NET框架和.NET Core都是有效的。
- en: '.NET is nothing but a combination of languages, runtime, and libraries, by
    using which we can develop managed software/applications. The software written
    in .NET is managed or is in a managed environment. To understand managed, we need
    to dig into how binary executables are available for operating systems. This comprises
    three broader steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: .NET只不过是一种语言、运行时和库的组合，我们可以使用它来开发托管软件/应用程序。在.NET中编写的软件是托管的，或者处于托管环境中。要理解托管，我们需要深入了解操作系统如何获得二进制可执行文件。这包括三个更广泛的步骤：
- en: Writing the code (source code).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码（源代码）。
- en: Compiler compiles the source code.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器编译源代码。
- en: 'The operating system executes the binary executable immediately:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作系统立即执行二进制可执行文件：
- en: '![](img/00005.gif)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.gif)'
- en: Broader steps – how binary executable is available?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 更广泛的步骤——二进制可执行文件是如何获得的？
- en: The preceding process is a standard process depicting how compilers compile
    the source code and create executable binaries, but in the case of .NET, the compiler
    (C# compiler for our code) does not directly provide a binary executable; it provides
    an assembly and this assembly consists of metadata and intermediate language code,
    also known as **Microsoft Intermediate Language** (**MSIL**) or **Intermediate
    Language** (**IL**). This MSIL is a high-level language and this can’t be understood
    directly by the machine, as MSIL is not machine-specific code or byte code. For
    proper execution, it should be interpreted. This interpretation from MSIL or IL
    to the machine language happens with the help of JIT. In other words, JIT compiles
    MSIL, IL into the machine language, also called native code. For more information,
    refer to [https://msdn.microsoft.com/en-us/library/ht8ecch6(v=vs.90).aspx](https://msdn.microsoft.com/en-us/library/ht8ecch6(v=vs.90).aspx).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程是一个标准过程，描述了编译器如何编译源代码并创建可执行二进制文件，但在.NET的情况下，编译器（我们代码的C#编译器）并不直接提供二进制可执行文件；它提供一个程序集，这个程序集包含元数据和中间语言代码，也称为**Microsoft中间语言**（**MSIL**）或**中间语言**（**IL**）。这个MSIL是一种高级语言，机器无法直接理解，因为MSIL不是特定于机器的代码或字节码。为了正确执行，它应该被解释。这种从MSIL或IL到机器语言的解释是通过JIT的帮助发生的。换句话说，JIT将MSIL、IL编译成机器语言，也称为本机代码。更多信息，请参阅[https://msdn.microsoft.com/en-us/library/ht8ecch6(v=vs.90).aspx](https://msdn.microsoft.com/en-us/library/ht8ecch6(v=vs.90).aspx)。
- en: For 64-bit compilation, Microsoft has announced RyuJIT ([https://blogs.msdn.microsoft.com/dotnet/2014/02/27/ryujit-ctp2-getting-ready-for-prime-time/](https://blogs.msdn.microsoft.com/dotnet/2014/02/27/ryujit-ctp2-getting-ready-for-prime-time/)).
    In the coming versions, 32-bit compilation will also be handled by RyuJIT ([https://github.com/dotnet/announcements/issues/10](https://github.com/dotnet/announcements/issues/10)).
    After this, we can now have a single code base for both CoreCLR.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于64位编译，Microsoft已经宣布了RyuJIT（[https://blogs.msdn.microsoft.com/dotnet/2014/02/27/ryujit-ctp2-getting-ready-for-prime-time/](https://blogs.msdn.microsoft.com/dotnet/2014/02/27/ryujit-ctp2-getting-ready-for-prime-time/)）。在即将推出的版本中，32位编译也将由RyuJIT处理（[https://github.com/dotnet/announcements/issues/10](https://github.com/dotnet/announcements/issues/10)）。之后，我们现在可以为CoreCLR拥有一个单一的代码库。
- en: Intermediate language is a high-level component-based assembly language.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 中间语言是一种高级的基于组件的汇编语言。
- en: In our seven days of learning, we will not focus on the framework, but we will
    be more focused on the C# language with the use of .NET Core. In the coming sections,
    we will discuss important things of .NET Core in such a way that while we work
    with a C# program, we should understand how our program talks with the operating
    system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的七天学习中，我们不会专注于框架，而是更加专注于使用.NET Core的C#语言。在接下来的章节中，我们将讨论.NET Core的重要内容，以便在我们使用C#程序时，了解我们的程序如何与操作系统交互。
- en: What is .NET Core?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是.NET Core？
- en: .NET Core is a new general-purpose development environment introduced by Microsoft
    to meet cross-platform requirements. .NET Core supports Windows, Linux, and OSX.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core是微软推出的新的通用开发环境，以满足跨平台的需求。.NET Core支持Windows、Linux和OSX。
- en: .NET Core is an open source software development framework released under MIT
    License and maintained by the Microsoft and .NET community on the GitHub ([https://github.com/dotnet/core](https://github.com/dotnet/core))
    repository.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core是一个开源软件开发框架，采用MIT许可证发布，并由Microsoft和.NET社区在GitHub（[https://github.com/dotnet/core](https://github.com/dotnet/core)）存储库中进行维护。
- en: .NET Core features
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core特性
- en: 'Here are some important features of .NET Core, that make .NET Core an important
    evolution step in software development:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是.NET Core的一些重要特性，使.NET Core成为软件开发中的重要进化步骤：
- en: '**Cross-platform**: Currently, .NET Core can be run on Windows, Linux, and
    macOS; in the future, there may be more. Refer to the roadmap ([https://github.com/dotnet/core/blob/master/roadmap.md](https://github.com/dotnet/core/blob/master/roadmap.md))
    for more info.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台**：目前，.NET Core可以在Windows、Linux和macOS上运行；将来可能会有更多。更多信息请参阅路线图（[https://github.com/dotnet/core/blob/master/roadmap.md](https://github.com/dotnet/core/blob/master/roadmap.md)）。'
- en: '**Having easy command-line tools**: You can use command-line tools for exercise
    with .NET Core. Refer to CLI tools for more at [https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index](https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有易用的命令行工具**：您可以使用命令行工具来练习.NET Core。有关更多信息，请参阅CLI工具[https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index](https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index)。'
- en: '**Having compatibility**: With the use of the .NET standard library, .NET Core
    is compatible with the .NET Frameworks, Xamarin and Mono.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具有兼容性**：通过使用.NET标准库，.NET Core与.NET Frameworks、Xamarin和Mono兼容。'
- en: '**Open source**: .NET Core platform is released under MIT License and is a
    .NET Foundation project ([https://dotnetfoundation.org/](https://dotnetfoundation.org/)).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开源**：.NET Core平台采用MIT许可证发布，是.NET基金会项目（[https://dotnetfoundation.org/](https://dotnetfoundation.org/)）。'
- en: What makes .NET Core?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是什么构成了.NET Core？
- en: .NET Core is a combination of **coreclr**, **corefx**, and **cli and roslyn**.
    These are the main components of .NET Core composition.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core是**coreclr**、**corefx**和**cli和roslyn**的组合。这些是.NET Core组成的主要组件。
- en: '![](img/00006.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: '**Coreclr**: It is a .NET runtime and provides assembly loading, garbage collector,
    and many more. You can check coreclr for more info at [https://github.com/dotnet/coreclr](https://github.com/dotnet/coreclr).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Coreclr**：这是一个.NET运行时，提供程序集加载、垃圾回收器等。您可以在coreclr上查看更多信息[https://github.com/dotnet/coreclr](https://github.com/dotnet/coreclr)。'
- en: '**Corefx**: It is a framework library; you can check corefx for more info at
    [https://github.com/dotnet/corefx](https://github.com/dotnet/corefx).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Corefx**：这是一个框架库；您可以在corefx上查看更多信息[https://github.com/dotnet/corefx](https://github.com/dotnet/corefx)。'
- en: '**Cli**: It is nothing but a command-line interface tool and roslyn is the
    language compiler (the C# language in our case). Refer to cli ([https://github.com/dotnet/cli](https://github.com/dotnet/cli))
    and Roslyn for more info at [https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cli：** 这只是一个命令行界面工具，roslyn是语言编译器（在我们的案例中是C#语言）。请参阅cli（[https://github.com/dotnet/cli](https://github.com/dotnet/cli)）和Roslyn以获取更多信息，网址为[https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn)。'
- en: What is .NET Standard?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是.NET标准？
- en: The .NET Standard is a set of APIs that resolves the problems of code sharing
    while you’re trying to write cross-platform applications. Currently, Microsoft
    is working on .NET Standard 2.0 to make it streamlined, and these standards will
    be implemented by all, that is, .NET Framework, .NET Core, and Xamarin. With the
    use of .NET Standard (that is a set of APIs), you are ensuring that your program
    and class library will be available for all targeted .NET Frameworks and .NET
    Core. In other words, .NET Standard will replace **Portable Class Libraries**
    (**PCL**). For more information, refer to [https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard是一组API，解决了在尝试编写跨平台应用程序时代码共享的问题。目前，微软正在努力使.NET Standard 2.0变得更加流畅，并且所有人都将实施这些标准，即.NET
    Framework、.NET Core和Xamarin。通过使用.NET Standard（一组API），您确保您的程序和类库将适用于所有目标.NET Framework和.NET
    Core。换句话说，.NET Standard将取代**可移植类库**（**PCL**）。有关更多信息，请参阅[https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/](https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/)。
- en: The .NET Standard 2.0 repository is available at [https://github.com/dotnet/standard](https://github.com/dotnet/standard).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Standard 2.0存储库位于[https://github.com/dotnet/standard](https://github.com/dotnet/standard)。
- en: Till now, you've got an idea of .NET Core and a few other things that help build
    cross-platform applications. In the coming sections, we will prepare the environment
    in order to start learning the C# language using Visual Studio 2017 (preferably
    the community edition).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经了解了.NET Core和其他一些有助于构建跨平台应用程序的内容。在接下来的章节中，我们将准备环境，以便开始学习使用Visual Studio
    2017（最好是社区版）的C#语言。
- en: Available IDEs and editors for C#
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的C# IDE和编辑器
- en: '**Integrated Development Environment** (**IDE**) is nothing but software facilitating
    the development of applications. On the other hand, editors are basically meant
    to add/update predefined or new content. When we talk about the C# editor, we
    are referring to an editor that helps write C# programs. Some editors come with
    a lot of add-ons or plugins and can compile or run the programs.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成开发环境**（**IDE**）只是一种便利应用程序开发的软件。另一方面，编辑器基本上是用来添加/更新预定义或新内容的。当我们谈论C#编辑器时，我们指的是一个帮助编写C#程序的编辑器。一些编辑器带有许多附加组件或插件，并且可以编译或运行程序。'
- en: 'We will use Visual Studio 2017 as our preferred C# IDE; however, there are
    a few more C# IDEs and editors you can go with:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Visual Studio 2017作为我们首选的C# IDE；但是，您还可以选择其他一些C# IDE和编辑器：
- en: '**Visual Studio Code:** VS Code is an editor, and you can start by downloading
    it from [https://code.visualstudio.com/](https://code.visualstudio.com/). To start
    with VS Code, you need to install the C# extension from [https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp).'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code:** VS Code是一个编辑器，您可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)开始下载。要开始使用VS
    Code，您需要从[https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp)安装C#扩展。'
- en: '**Cloud9:** It is a web browser-based IDE. You can start it for free by signing
    up at [https://c9.io/signup](https://c9.io/signup).'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Cloud9:** 这是一个基于Web浏览器的IDE。您可以通过在[https://c9.io/signup](https://c9.io/signup)注册免费开始使用它。'
- en: '**JetBrain Rider:** This is a cross-platform IDE by JetBrains. For more information,
    visit [https://www.jetbrains.com/rider/](https://www.jetbrains.com/rider/).'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JetBrain Rider:** 这是JetBrains的跨平台IDE。有关更多信息，请访问[https://www.jetbrains.com/rider/](https://www.jetbrains.com/rider/)。'
- en: '**Zeus IDE:** This is an IDE designed for the Windows platform. You can start
    using Zeus from [https://www.zeusedit.com/index.html](https://www.zeusedit.com/index.html).'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Zeus IDE:** 这是一个专为Windows平台设计的IDE。您可以从[https://www.zeusedit.com/index.html](https://www.zeusedit.com/index.html)开始使用Zeus。'
- en: '**Text editor:** This is the way you can go without any installation; just
    use a text editor of your choice. I use Notepad++ ([https://notepad-plus-plus.org/download/v7.3.3.html](https://notepad-plus-plus.org/download/v7.3.3.html))
    and the C**ommand Line Interface** (**CLI**) to build code. Refer to [https://docs.microsoft.com/en-us/dotnet/articles/core/tools/](https://docs.microsoft.com/en-us/dotnet/articles/core/tools/)
    to know more about how to start with the CLI.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文本编辑器：** 这是您可以在不安装任何软件的情况下使用的方式；只需使用您选择的文本编辑器。我使用Notepad++（[https://notepad-plus-plus.org/download/v7.3.3.html](https://notepad-plus-plus.org/download/v7.3.3.html)）和**命令行界面**（**CLI**）来构建代码。请参阅[https://docs.microsoft.com/en-us/dotnet/articles/core/tools/](https://docs.microsoft.com/en-us/dotnet/articles/core/tools/)了解有关如何使用CLI开始的更多信息。'
- en: There may be more alternative IDEs and editors, but they are not as important
    to us.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有更多的替代IDE和编辑器，但对我们来说它们并不重要。
- en: Setting up the environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'In this section, we will see step by step how to initiate the installation
    of Visual Studio 2017 (preferably, the community edition) on Windows 10:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐步了解如何在Windows 10上启动安装Visual Studio 2017（最好是社区版）：
- en: Go to [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    (you can also get the benefits of Dev Essentials from [https://www.visualstudio.com/dev-essentials/](https://www.visualstudio.com/dev-essentials/)).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)（您还可以从[https://www.visualstudio.com/dev-essentials/](https://www.visualstudio.com/dev-essentials/)获得Dev
    Essentials的好处）。
- en: 'Download Visual Studio Community (https[://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)):'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '下载Visual Studio Community (https[://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)):'
- en: '![](img/00007.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: Start the Visual Studio setup.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始Visual Studio设置。
- en: 'From Workloads, select the options you want to install. For our book, we need
    .NET desktop development and .NET Core:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工作负载中选择你想要安装的选项。对于我们的书籍，我们需要.NET桌面开发和.NET Core：
- en: '![](img/00008.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Click on Install to start the installation:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装开始安装：
- en: '![](img/00009.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: Click Launch once the installation is completed.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后点击启动。
- en: Sign up for Visual Studio using your Live ID.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的Live ID注册Visual Studio。
- en: Select Visual C# as your development setting.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Visual C#作为你的开发设置。
- en: 'You will see the start page as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到以下的起始页面：
- en: '![](img/00010.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: We are all set to start with our first step.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好开始我们的第一步了。
- en: Hands - on exercises
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践练习
- en: Answer the following questions by covering the concepts of today’s learning.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过涵盖今天学习的概念来回答以下问题。
- en: What is programming? Write down an algorithm to find out vowel counts from all
    the pages of book, *Learn C# in 7-days*.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是编程？写下一个算法，从书籍《7天学会C#》的所有页面中找出元音字母的数量。
- en: What is .NET Core and .NET Standard?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是.NET Core和.NET Standard？
- en: What makes a .NET Core an evolutional software ?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是什么让.NET Core成为一种进化的软件？
- en: Revisiting Day 01
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾第一天
- en: Today, we walked you through some important concepts of .NET Core and .NET Standard.
    You learned what programs and algorithms are in the programming world.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们向你介绍了.NET Core和.NET Standard的一些重要概念。你学会了编程世界中的程序和算法是什么。
