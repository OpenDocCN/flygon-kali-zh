- en: '*Chapter 6*: Writing Cypress Tests Using the TDD approach'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：使用TDD方法编写Cypress测试'
- en: Now that we've completed *Part 1* of this book – that is, *Cypress as an End-to-End
    Testing Solution for Frontend Applications* – it is time to move on to *Part 2*
    of this book, which will focus on *Automated Tests with a TDD Approach*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了本书的*第一部分* - 也就是*作为前端应用的端到端测试解决方案的Cypress* - 是时候转向本书的*第二部分*了，它将专注于*使用TDD方法进行自动化测试*。
- en: Before we can start writing Cypress tests using a **TDD** (**TDD**) approach,
    we need to understand how to properly write Cypress tests. This was covered in
    the previous chapters of this book. To excel in this topic, you will need to have
    an understanding of how Cypress tests work, the structure of tests, and the different
    ways in which Cypress tests can be used to make assertions. This background information
    will help you understand how to use TDD in Cypress and the advantages that come
    from using it in the software development life cycle. In this chapter, we will
    utilize a test-driven approach to write tests that will significantly contribute
    to an increased level of trust and confidence in our applications and software
    solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用**TDD**（测试驱动开发）方法编写Cypress测试之前，我们需要了解如何正确地编写Cypress测试。这在本书的前几章中已经涵盖过。要在这个主题上取得成功，您需要了解Cypress测试的工作原理，测试的结构以及Cypress测试可以用来进行断言的不同方式。这些背景信息将帮助您了解如何在Cypress中使用TDD以及在软件开发生命周期中使用它所带来的优势。在本章中，我们将利用测试驱动的方法编写测试，这将极大地增加我们对应用程序和软件解决方案的信任和信心。
- en: Our focus in this chapter will be on identifying how Cypress can be utilized
    to help us holistically think about an application, even before we start the process
    of developing it. We will apply the concept of testing our application first before
    we start development. In doing so, we will utilize the Cypress framework as the
    core for our tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们的重点将放在如何利用Cypress来帮助我们在开始开发之前全面思考一个应用的使用上。我们将应用测试我们的应用在开始开发之前。在这样做的过程中，我们将利用Cypress框架作为我们测试的核心。
- en: 'The following key topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下关键主题：
- en: Understanding TDD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解TDD
- en: Writing TDD tests in Cypress
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Cypress中编写TDD测试
- en: Modifying TDD tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改TDD测试
- en: Once you've worked through each of these topics, you will be ready to learn
    about element interaction in Cypress.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了这些主题，你就准备好学习Cypress中的元素交互了。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we recommend that you clone this book's GitHub repository, which
    contains the application we will be building and all the tests that we will write
    in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们建议您克隆本书的GitHub存储库，其中包含我们将在本章中构建的应用程序和所有我们将编写的测试。
- en: The GitHub repository for this chapter can be found at
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在以下链接找到
- en: '[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)'
- en: The source code for this chapter can be found in the `chapter-06` directory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-06`目录中找到。
- en: We will be using the ReactJS library to develop our application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用ReactJS库来开发我们的应用。
- en: 'You can run the ReactJS application by running the following commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来运行ReactJS应用程序：
- en: '`cd chapter-6/tdd-todo-app`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd chapter-6/tdd-todo-app`'
- en: '`npm install` (to install all the required dependencies)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm install`（安装所有必需的依赖项）'
- en: '`npm run start` (to start the React application for testing purposes)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm run start`（启动React应用程序进行测试）'
- en: 'the following link:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接：
- en: Understanding TDD
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解TDD
- en: 'TDD is a software development process that relies on requirements being turned
    into very specific test cases. After writing these test cases, the code is then
    written and checked against other test cases. The final step in the TDD process
    is to iterate and improve the code to make sure it adheres to the best practices
    required and that the test cases pass. The cycle of a TDD approach consists of
    the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是一个依赖于将需求转化为非常具体测试用例的软件开发过程。编写这些测试用例后，代码被编写并根据其他测试用例进行检查。TDD过程的最后一步是迭代和改进代码，以确保它符合所需的最佳实践，并且测试用例通过。TDD方法的循环包括以下步骤：
- en: Defining the functionality that needs to be implemented
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义需要实现的功能
- en: Writing a new test
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写新的测试
- en: Running the test to check whether the test fails
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试以检查测试是否失败
- en: Writing code for the test case to pass
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写测试用例的代码
- en: Running the test against the added functionality to make sure the test passes
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试以确保测试通过
- en: Refactoring the code
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码
- en: Repeating this process
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复这个过程
- en: The purpose of TDD is to visualize the end before development has started. That
    way, it is possible to foresee the problems or hurdles that may arise during the
    development process. Being able to develop a feature using the TDD approach assists
    in critically thinking about the solution, and also helps with scenarios that
    need to be tested as the application is being developed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的目的是在开发开始之前可视化最终结果。这样，就可以预见在开发过程中可能出现的问题或障碍。能够使用TDD方法开发功能有助于对解决方案进行批判性思考，并且有助于在应用程序开发过程中需要测试的场景。
- en: Let's say we are creating a login functionality; from a testing perspective,
    we will need to come up with all the different scenarios for the login feature.
    Thinking about these test scenarios will give us a clear view of what needs to
    take place in the development phase, making the requirements clearer when we are
    developing this application feature.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在创建一个登录功能；从测试的角度来看，我们需要为登录功能想出所有不同的场景。思考这些测试场景将使我们清楚地了解在开发阶段需要发生什么，使得在开发这个应用功能时需求更加清晰。
- en: TDD assists in reducing the chances of scope creep since, from the onset, we
    can understand the goal of the project. With test cases in place, we can determine
    the functionality and limit the scope to only the test cases that have been written.
    Understanding what this feature involves allows developers to formulate how the
    code will be implemented. In the long run, this might lead to reduced development
    time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TDD有助于减少范围蔓延的可能性，因为从一开始，我们就可以理解项目的目标。有了测试用例，我们可以确定功能并将范围限制在已编写的测试用例之内。了解此功能涉及的内容使开发人员能够制定代码的实现方式。从长远来看，这可能会导致减少开发时间。
- en: Important Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Scope creep refers to uncontrolled changes or the scope of a software development
    project growing after the project has begun.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 范围蔓延是指软件开发项目在项目开始后不受控制地增长或范围扩大。
- en: Next, let's take a look at the advantages of the TDD approach.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看TDD方法的优势。
- en: Advantages of TDD
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TDD的优势
- en: In this section, we will take a closer look at the benefits that come from implementing
    the TDD methodology in a software development life cycle.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地了解在软件开发生命周期中实施TDD方法所带来的好处。
- en: Better project design
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更好的项目设计
- en: When developing using the TDD approach, developers need to think of the goal
    that the piece of code is meant to achieve. Due to this, developers will always
    start with the end in mind. The ability to develop a feature with a specific goal
    ensures that developers only write code that is needed and is necessary, which
    subsequently leads to the application having a clear structure.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TDD方法进行开发时，开发人员需要考虑代码片段的目标。因此，开发人员将始终以最终目标为出发点。以特定目标开发功能的能力确保开发人员只编写所需和必要的代码，从而导致应用程序具有清晰的结构。
- en: Using TDD also ensures higher code quality as TDD strongly emphasizes the use
    of the **Don't Repeat Yourself** (**DRY**) principles, which discourage repetition
    when writing code. Due to this, by using TDD, it is possible to keep functions
    simple and brief, and the code base easy to understand. A cleaner and simple code
    base is easy to maintain and test, which is an added advantage to the developers
    and the code base maintainers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD还可以确保更高的代码质量，因为TDD强调使用“不要重复自己”（DRY）原则，这种原则在编写代码时会阻止重复。因此，通过使用TDD，可以保持函数简单而简洁，代码库易于理解。清洁和简单的代码库易于维护和测试，这对开发人员和代码库维护者是一个额外的优势。
- en: Important Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: DRY principles are application development principles that emphasize the non-repetition
    of software patterns and the use of abstraction to avoid or reduce redundancy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: DRY原则是应用开发原则，强调软件模式的不重复和使用抽象来避免或减少冗余。
- en: Detailed documentation
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 详细文档
- en: TDD enforces strict documentation that references the feature under development;
    developers need to come up with such specifications, which might well include
    the actions of the users. Understanding the actions and breaking down the steps
    into user stories helps developers implement the features and therefore develop
    features that are very close to the defined goal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: TDD强制执行引用正在开发的功能的严格文档；开发人员需要提出这样的规范，其中可能包括用户的操作。理解这些操作并将步骤分解为用户故事有助于开发人员实施功能，因此开发的功能非常接近定义的目标。
- en: Developing proper documentation at the stage of writing tests also relieves
    other parties of the role of having to understand the features to reproduce documentation,
    since it was already part of the software development process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试的阶段开发适当的文档也减轻了其他参与方理解特性以重现文档的角色，因为这已经是软件开发过程的一部分。
- en: Reduced development time
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少开发时间
- en: It is possible to assume that TDD takes more time when developing an application
    and in most cases, this is the truth. From this statement, we can assume that
    TDD will most likely delay the project delivery date, which is not the case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以假设TDD在开发应用程序时需要更多时间，在大多数情况下，这是事实。根据这一说法，我们可以假设TDD很可能会延迟项目交付日期，但事实并非如此。
- en: By taking a TDD approach, it is possible to cover scenarios that would otherwise
    have bugs if a TDD approach was not used in development. While TDD may initially
    consume more time than the non-TDD approach, it significantly reduces the time
    it takes for developers to maintain the project and the work that has to be done
    to test the product and its features.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 采用TDD方法，可以覆盖在开发中如果不使用TDD方法可能会出现错误的情况。虽然TDD可能最初比非TDD方法消耗更多时间，但它显著减少了开发人员维护项目和测试产品及其特性所需的工作量。
- en: Since TDD enforces clean code, it goes without saying that even when bugs are
    identified, it is easier to fix them in a project that utilizes TDD than in a
    project that does not utilize TDD. The focus of TDD on high-quality code standards
    and continuous feedback makes the code base of TDD projects maintainable, which
    is not the case for non-TDD projects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TDD强调清晰的代码，可以毫不夸张地说，即使发现了错误，也比在不使用TDD的项目中更容易修复。TDD项目对高质量代码标准和持续反馈的关注使TDD项目的代码库易于维护，而非TDD项目则不然。
- en: Cost savings
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节约成本
- en: In any project, it is cheaper to find and fix a bug when it is still in development
    than when the bug has already made its way to production. TDD focuses on bug elimination
    as development takes place, which greatly reduces the chances of defects making
    their way through the development and testing phases of a feature. This enforces
    code refactoring principles and bug prevention. The TDD approach greatly saves
    the company's expenditure on actions that are directly related to bugs and defects
    being discovered in production.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何项目中，发现并修复错误在开发阶段比错误已经进入生产阶段时更便宜。TDD专注于在开发过程中消除错误，大大减少了缺陷通过特性的开发和测试阶段的机会。这强化了代码重构原则和错误预防。TDD方法大大节省了公司在与在生产中发现的错误和缺陷直接相关的行动上的支出。
- en: Costs that come as a direct result of a defect can include direct loss of revenue,
    additional time and costs to fix the discovered defect, and even loss of trust
    by the stakeholders of the company, such as the customers. Understanding the ability
    of TDD to lower such costs makes the savings in a company worthwhile since developing
    software costs money and fixing the same software costs even more money.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为缺陷直接结果而产生的成本可能包括直接收入损失、额外的时间和成本来修复发现的缺陷，甚至可能会失去公司利益相关者（如客户）的信任。了解TDD降低这些成本的能力使得公司的节约是值得的，因为开发软件需要花钱，而修复相同的软件则需要花费更多的钱。
- en: Reliable solutions
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可靠的解决方案
- en: TDD solutions are reliable as they undergo scrutiny before development kicks
    off. TDD ensures that the concept that was developed is what is achieved. This
    is realized by the test scenarios that are written when the functionality is still
    an idea and are in the form of requirements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: TDD解决方案是可靠的，因为它们在开发开始之前经过了审查。TDD确保了开发的概念就是实现的内容。这是通过在功能仍然是一个想法的时候编写的测试场景来实现的，并且以需求的形式存在。
- en: Without the use of TDD, it is not possible for developers to build a robust
    solution without thinking about how different parts of the program will interact
    with the new features. With TDD, however, these test cases help developers understand
    how new features and existing features can be integrated, and therefore have knowledge
    of how the application will behave once the new features have been built. This
    approach gives developers confidence as they know about the solution before they
    have started developing it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 没有使用TDD，开发人员无法在不考虑程序的不同部分如何与新功能交互的情况下构建强大的解决方案。然而，使用TDD，这些测试用例帮助开发人员了解新功能和现有功能如何集成，因此了解应用程序在新功能构建后的行为。这种方法使开发人员在开始开发之前就对解决方案有信心。
- en: Disadvantages of TDD
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TDD的缺点
- en: While most of the outcomes of TDD are positive and lead to productivity and
    great development processes, TDD can also be detrimental to teams that are not
    structured to use it. In this section, we will highlight the disadvantages of
    using TDD and why it may not be suitable for some teams.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管TDD的大部分结果都是积极的，可以提高生产力和良好的开发流程，但对于结构不适合使用TDD的团队来说，TDD也可能会带来负面影响。在本节中，我们将重点介绍使用TDD的缺点以及为什么它可能不适合某些团队。
- en: Organizational preparedness
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织准备工作
- en: TDD requires organizations to be present in the process of implementing it.
    TDD requirements need to be defined for the organizations before the implementation
    takes place, so to guarantee success, organizations need to be positioned in such
    a way that TDD will work for them. In some cases, organizations may not have the
    patience to wait for all the requirements before implementation begins, and also
    might not be willing to sacrifice the extra time to critically walk through the
    requirements beforehand.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: TDD要求组织在实施过程中参与其中。TDD要求在实施之前为组织定义需求，以确保成功，组织需要以适当的方式定位TDD适用于他们。在某些情况下，组织可能没有耐心等待所有需求在实施开始之前，也可能不愿意牺牲额外的时间来仔细审查需求。
- en: TDD is structural and requires both management and the team of developers to
    align by agreeing to incur costs related to planning beforehand so that they spend
    less on maintenance later. Not all teams might be willing to take on the approach
    of waiting for the benefits of TDD, which means the organization may not be willing
    to pay for the costs that are not currently visible.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: TDD是结构化的，需要管理层和开发团队一致同意承担与事先规划相关的成本，以便后期在维护上花费更少。并非所有团队都愿意采取等待TDD好处的方法，这意味着组织可能不愿意为目前看不到的成本付费。
- en: Understanding problems
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解问题
- en: Test Driven Development focuses on building tests before implementation begins.
    This approach assists the team to better understand the problem and come up with
    solid implementation solutions. The greatest challenge with writing tests is that
    they cannot solve logical errors that have already been introduced in the implementation
    code. Tests can only identify what they are meant to test and may not be able
    to test things that have not been explicitly defined in the code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: TDD侧重于在实施开始之前构建测试。这种方法有助于团队更好地理解问题并提出坚实的实施解决方案。编写测试的最大挑战在于它们无法解决已经在实施代码中引入的逻辑错误。测试只能识别它们所测试的内容，可能无法测试代码中未明确定义的内容。
- en: With TDD, it is possible to make mistakes due to the understanding of the problem;
    tests might not be in a position to capture situations where the requirements
    were not properly understood by the designer of the solution.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TDD可能会因为对问题的理解而导致错误；测试可能无法捕捉到设计解决方案的人员对需求理解不正确的情况。
- en: Recap – understanding TDD
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 理解TDD
- en: In this section, we learned about TDD, why we need it, and how it is utilized
    in the software development life cycle. We also learned about the advantages of
    using TDD and how it can prevent costs that arise from bugs and defects being
    discovered in the post-development and testing stages. We also learned about the
    disadvantages of utilizing TDD, some of which may arise from tests being as good
    as the reasoning with which they were written. It is therefore critical to understand
    the problem being developed in order to come up with tests for the problem at
    hand. In the next section, we will focus on writing TDD tests in Cypress and how
    this process assists in coming up with robust solutions and implementations for
    feature code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了TDD，为什么我们需要它以及它如何在软件开发生命周期中使用。我们还了解了使用TDD的优势，以及它如何可以防止在后期开发和测试阶段发现的错误和缺陷带来的成本。我们还了解了利用TDD的缺点，其中一些可能源于测试的好坏取决于编写测试时的推理。因此，了解正在开发的问题对于为手头的问题制定测试是至关重要的。在接下来的部分中，我们将专注于在Cypress中编写TDD测试，以及这个过程如何帮助提出功能代码的坚实解决方案和实施。
- en: Writing TDD tests in Cypress
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Cypress中编写TDD测试
- en: 'In this section, we will focus on writing TDD tests using Cypress. Throughout
    this section, we will build a Todo application and apply the TDD principles. First,
    we need to have a design in mind so that we can write proper tests and also critically
    think about the features of our application. The goal of this chapter will be
    to create an application that will add todo items, delete todo items, show added
    todo items, and show the count of the added todo items. A mockup of the final
    application is shown in the following screenshot. Every step we follow will help
    us achieve the mockup we desire:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于使用Cypress编写TDD测试。在本节中，我们将构建一个待办事项应用程序，并应用TDD原则。首先，我们需要有一个设计，这样我们才能编写适当的测试，并且还要对我们应用程序的功能进行批判性思考。本章的目标将是创建一个应用程序，可以添加待办事项，删除待办事项，显示已添加的待办事项，并显示已添加的待办事项的数量。下面的截图显示了最终应用程序的模拟。我们遵循的每一步都将帮助我们实现我们想要的模拟：
- en: '![Figure 6.1 – Todo application mockup'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 - 待办事项应用程序模拟'
- en: '](image/Figure_6.1_B15616.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.1_B15616.jpg)'
- en: Figure 6.1 – Todo application mockup
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 - 待办事项应用程序模拟
- en: 'The preceding screenshot shows a mockup of our Todo application that we will
    be building. We will use a TDD approach with tests written in Cypress. The application
    will have the following features:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了我们将要构建的待办事项应用程序的模拟。我们将使用Cypress中编写的TDD方法。该应用程序将具有以下功能：
- en: Adding new todo items
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: Deleting todo items
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除待办事项
- en: Viewing added todo items
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项
- en: Viewing a count of added todo items
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项数量
- en: These features make up the requirements of our todo application. Throughout
    this chapter, we will be referencing these features as requirements as we develop
    our tests and implement our application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能构成了我们待办事项应用程序的要求。在本章中，我们将在开发测试和实现应用程序时将这些功能称为要求。
- en: Setting up the application
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: To avoid any further complexity in this section, we will not focus on how we
    will build the application but on how we will be implementing the tests as we
    build the application. For background context, the application we will be building
    will be using the ReactJS library, which is written in JavaScript.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在本节中增加任何进一步的复杂性，我们不会关注如何构建应用程序，而是关注在构建应用程序时如何实现测试。在背景上下文中，我们将构建的应用程序将使用ReactJS库，该库是用JavaScript编写的。
- en: Having understood what our application looks like, we will take a step-by-step
    approach to writing our tests before we begin the process of developing our application.
    As we mentioned previously, we have written the application features that we will
    be building toward. We will start by writing TDD tests so that we can add new
    todo items.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了我们的应用程序的外观之后，我们将采取逐步的方法来编写我们的测试，然后再开始开发我们的应用程序的过程。正如我们之前提到的，我们已经编写了我们将要构建的应用程序功能。我们将首先编写TDD测试，以便我们可以添加新的待办事项。
- en: Adding new todo items
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: 'The first TDD tests that we will focus on are tests that will be responsible
    for checking that new todo items have been added to our todo list. To follow these
    steps, navigate to the `tests` directory that you cloned from GitHub with the
    following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于的第一个TDD测试是负责检查新的待办事项是否已添加到我们的待办事项列表中的测试。要按照这些步骤进行，请使用以下命令导航到您从GitHub克隆的“tests”目录：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command will navigate you to the TDD `tests` directory that we
    will be using in this chapter. The tests located in this file are the first versions
    of the tests that we will write in our TDD process. Later, we will modify them
    so that they suit the final application features that we will add.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将引导您进入我们将在本章中使用的TDD“tests”目录。该文件中的测试是我们在TDD过程中编写的测试的第一个版本。稍后，我们将修改它们，使其适应我们将添加的最终应用程序功能。
- en: Important Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When writing TDD tests for our Todo application, note that the Cypress directory
    is located inside the test application. This ensures that we keep track of and
    identify Cypress tests that belong to the application being developed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在为我们的待办事项应用程序编写TDD测试时，请注意Cypress目录位于测试应用程序内部。这确保我们跟踪和识别属于正在开发的应用程序的Cypress测试。
- en: 'The following code snippet is a test that checks that we can add a new todo
    item to our application, which is one of the requirements for our application:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是一个测试，检查我们是否可以向我们的应用程序添加新的待办事项，这是我们应用程序的要求之一：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding code snippet, we wrote a TDD test to check that after the
    feature is complete, we can add our todo item and check that the added item exists.
    Note that at this stage, the feature for adding todo items has not been built
    yet. If we run this code snippet in Cypress, it should automatically fail. To
    verify this, we can run the following command to run the Cypress tests:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们编写了一个TDD测试，以检查在功能完成后，我们可以添加我们的待办事项并检查已添加的项目是否存在。请注意，在这个阶段，添加待办事项的功能尚未构建。如果我们在Cypress中运行这段代码片段，它应该会自动失败。为了验证这一点，我们可以运行以下命令来运行Cypress测试：
- en: '[PRE2]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows a failing TDD test for creating and displaying
    a new todo item:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个失败的TDD测试，用于创建和显示一个新的待办事项：
- en: '![Figure 6.2 – Running a TDD test on Cypress'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 - 在Cypress上运行TDD测试'
- en: '](image/Figure_6.2_B15616.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.2_B15616.jpg)'
- en: Figure 6.2 – Running a TDD test on Cypress
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 - 在Cypress上运行TDD测试
- en: In the preceding screenshot, we are executing the test to check whether or not
    it fails and whether Cypress can execute it. In this test, Cypress tried to execute
    the test against the locally running Todo application running on port `3000`.
    The test failed because Cypress could not find the input element that is responsible
    for adding todo items to the todo list. From the preceding screenshot, we can
    verify that the application successfully navigated to our application running
    in localhost. To continue building on this feature and ensuring that the tests
    are passing, later, we will add the functionality for adding a todo item and rerun
    our tests again.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们正在执行测试，以检查它是否失败以及Cypress是否能够执行它。在这个测试中，Cypress尝试执行针对运行在端口`3000`上的本地运行的待办应用程序的测试。测试失败，因为Cypress找不到负责将待办事项添加到待办事项列表中的输入元素。从前面的屏幕截图中，我们可以验证应用程序成功导航到运行在本地主机上的应用程序。为了继续构建这个功能并确保测试通过，稍后，我们将添加添加待办事项的功能，并重新运行我们的测试。
- en: Deleting a Todo item
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除待办事项
- en: 'Our Todo application requirements state that we should have the ability to
    delete an added todo item. One of the requirements of a deleted todo item is that
    once it is deleted, it should no longer be visible on the todo list. To write
    our TDD test, we need to ensure that we actually deleted the todo item by verifying
    that the todo item no longer exists once it is deleted from the todo list. We
    will use the following code snippet to achieve the deletion feature test requirements:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的待办应用程序要求说明，我们应该有能力删除已添加的待办事项。已删除的待办事项的要求之一是，一旦删除，它就不应再出现在待办事项列表上。为了编写我们的TDD测试，我们需要确保我们实际上已删除了待办事项，方法是验证一旦从待办事项列表中删除后，待办事项不再存在。我们将使用以下代码片段来实现删除功能测试要求：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code block, we added a todo item and then deleted it. Later,
    we verified that the deleted todo item does not exist anymore and asserted that
    by using a Cypress assertion method. This test snippet not only checks for the
    proper deletion of the todo item, but also checks that after deletion takes place,
    the todo item will no longer be present in the DOM. As shown in the preceding
    screenshot, running this test with Cypress fails as our application has not been
    built yet.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码块中，我们添加了一个待办事项，然后将其删除。后来，我们验证了已删除的待办事项不再存在，并通过使用Cypress断言方法来断言。这个测试片段不仅检查了待办事项的正确删除，还检查了删除后，待办事项将不再存在于DOM中。如前面的屏幕截图所示，使用Cypress运行此测试失败，因为我们的应用程序尚未构建。
- en: Viewing the added todo items
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项
- en: 'As specified by our application requirements, when todo items are added, they
    should be visible in the todo list. The todo items that are added should be identical
    to the todo items in the todo list. To achieve a proper test, we need to ensure
    that our test covers the scenario of ensuring that an added todo item is visible
    on the todo list. We also need to verify that the item that has been added to
    the todo application is the same item that is visible on the todo list. Once again,
    we will curate a TDD test that will aim to cover the scenarios of being able to
    display our todo items. The following code block is a TDD test for displaying
    an added todo item:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的应用程序要求，当添加待办事项时，它们应该在待办事项列表中可见。添加的待办事项应该与待办事项列表中的待办事项相同。为了进行适当的测试，我们需要确保我们的测试覆盖了确保添加的待办事项在待办事项列表上可见的情况。我们还需要验证已添加到待办应用程序的项目是否与待办事项列表上可见的项目相同。我们将再次策划一个TDD测试，旨在覆盖能够显示我们的待办事项的情况。以下代码块是用于显示已添加的待办事项的TDD测试：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this code block, the TDD test will add a new todo item using the input element
    of the application, and then verify that the added element is present in the todo
    list. Having this test in place eliminates the possibility that todo items will
    be added and not be visible on the todo item list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，TDD测试将使用应用程序的输入元素添加一个新的待办事项，然后验证添加的元素是否存在于待办事项列表中。有了这个测试，就可以排除待办事项被添加但在待办事项列表上不可见的可能性。
- en: Viewing a count of the added todo items
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项的数量
- en: Following the requirements of our application, we need to ensure that we can
    view the number of added todo items. From our mockup, which can also be found
    in our `chapter-06/mockups/todo-mockup.png` directory, the number of todo items
    should correspond to the items inside the todo list. Using the requirement for
    our todo app, our TDD test should test scenarios such as adding more than one
    todo item and checking that the number of todo items increases or decreases, depending
    on whether they are added or removed from our todo list.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们应用的要求，我们需要确保能够查看添加的待办事项的数量。根据我们的模拟，也可以在`chapter-06/mockups/todo-mockup.png`目录中找到，待办事项的数量应该对应于待办事项列表中的项目。根据我们的待办事项应用程序的要求，我们的TDD测试应该测试诸如添加多个待办事项并检查待办事项的数量增加或减少的情况，具体取决于它们是添加还是从待办事项列表中删除。
- en: Important Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before we write our tests, it is important to understand how Cypress understands
    which element to interact with, which button to click, or where to type on an
    input field. Cypress uses element identifiers, which uniquely identify the elements
    for Cypress to interact with. The unique element identifiers of elements on a
    web page may include unique element ID CSS selectors, XPath locators, or even
    custom element identifiers of our choosing, which will be in the `[data-testid="our-unique-identifier"]`
    format.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试之前，了解Cypress如何理解要与之交互的元素，要单击哪个按钮，或者在输入字段上输入。Cypress使用元素标识符，这些标识符唯一标识Cypress要与之交互的元素。网页上元素的唯一元素标识符可能包括唯一元素ID
    CSS选择器、XPath定位器，甚至是我们选择的自定义元素标识符，格式为`[data-testid="our-unique-identifier"]`。
- en: 'This test, unlike the test scenarios for adding, deleting, or viewing a todo
    item, will encompass multiple steps and more than one assertion. The following
    code block shows a TDD test for viewing the number of todo items that have been
    added to a todo list:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与添加、删除或查看待办事项的测试场景不同，这个测试将包含多个步骤和多个断言。以下代码块显示了一个查看已添加到待办事项列表中的待办事项数量的TDD测试：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code snippet will serve as a template for the final test, which will check
    that the number of todo items increases and decreases as todo items are added
    and deleted. Here, we can see that we added two todo items, then verified that
    both todo items are present. After validating that both items were present in
    the todo list, we deleted one todo item and checked that the count of todo items
    decreases as the number of items decreases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段将作为最终测试的模板，用于检查待办事项的数量随着待办事项的添加和删除而增加和减少。在这里，我们可以看到我们添加了两个待办事项，然后验证两个待办事项都存在。在验证待办事项列表中存在两个项目后，我们删除了一个待办事项，并检查待办事项的计数随着项目数量的减少而减少。
- en: Important Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When writing TDD tests, we are not very concerned about the syntax errors that
    may be present in the tests but rather the scenarios and test coverage. When we
    start modifying the tests once the features have been built, we will fix errors
    as we run our tests again, this time against the added functionality.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写TDD测试时，我们并不太关心测试中可能存在的语法错误，而是关注场景和测试覆盖率。当我们在构建功能后开始修改测试时，我们将在再次运行测试时修复错误，这次针对添加的功能。
- en: Now, it's time for a quick recap.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候进行快速回顾了。
- en: Recap – setting up the application
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾-设置应用程序
- en: In this section, we learned about writing TDD tests and how they help shape
    our thinking as we develop our solutions. We covered the process of writing TDD
    tests for adding a todo item, viewing a todo item, deleting a todo item, and viewing
    the total count of todo items in the todo list. We also learned that TDD tests
    help us understand the process of development and that the tests are not the final
    tests that we will have when the features are completed. In the next section,
    we will look at modifying TDD tests once the features for our application have
    been completed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何编写TDD测试以及它们如何帮助塑造我们的思维，因为我们开发解决方案。我们涵盖了编写TDD测试的过程，用于添加待办事项、查看待办事项、删除待办事项以及查看待办事项列表中的总数。我们还了解到TDD测试帮助我们理解开发过程，并且这些测试不是在功能完成时我们将拥有的最终测试。在下一节中，我们将看看在应用程序的功能完成后如何修改TDD测试。
- en: Modifying TDD tests
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改TDD测试
- en: In the previous section, we looked at how TDD tests are structured and the rationale
    through which they are developed to suit the application under development. As
    we mentioned earlier, we will not go into the details of how we will develop the
    application. Instead, we will focus on how to integrate testing into the application
    under development. The application being referenced here is available in this
    book's GitHub repository ([https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress/tree/master/chapter-06/](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress/tree/master/chapter-6/)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们看了TDD测试的结构以及它们是如何根据正在开发的应用程序进行开发的原理。正如我们之前提到的，我们不会详细介绍如何开发应用程序，而是专注于如何将测试集成到正在开发的应用程序中。这里提到的应用程序可以在本书的GitHub存储库中找到（[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress/tree/master/chapter-06/](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress/tree/master/chapter-6/)）。
- en: 'In this section, we will use the TDD tests that we created in the previous
    section. The TDD tests that we will be building on are responsible for testing
    the defined requirements of the application, which are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用在上一节中创建的TDD测试。我们将要构建的TDD测试负责测试应用程序的定义要求，这些要求如下：
- en: Adding new todo items
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: Deleting todo items
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除待办事项
- en: Viewing added todo items
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项
- en: Viewing a count of added todo items
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项数量
- en: Now that we have written the tests, we will add features to the application
    as we modify them. First, we will run the first test since we have already built
    the feature for adding a todo item. To separate the TDD tests and the final tests
    in our application, we will create a new test file named `todo-v2.spec.js` that
    we will add our final tests to. The test file is located in the `chapter-06/tdd-todo-app/integration/todo-v2.spec.js`
    directory.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了测试，我们将在修改它们时向应用程序添加功能。首先，我们将运行第一个测试，因为我们已经构建了添加待办事项的功能。为了将TDD测试和应用程序中的最终测试分开，我们将创建一个名为`todo-v2.spec.js`的新测试文件，我们将在其中添加我们的最终测试。测试文件位于`chapter-06/tdd-todo-app/integration/todo-v2.spec.js`目录中。
- en: Adding new todo items
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的待办事项
- en: 'Here, we want to verify that the test we wrote earlier to verify the addition
    of a new todo item actually works. To run this test, we will ensure that our application,
    which was built in ReactJS, is running locally. We will run our tests against
    the application, which is locally hosted. Once the feature for adding new todo
    items has been completed, our application will look as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们想要验证我们之前编写的用于验证添加新待办事项的测试是否有效。为了运行这个测试，我们将确保我们的应用程序（使用ReactJS构建）在本地运行。我们将针对本地托管的应用程序运行我们的测试。一旦添加新的待办事项功能完成，我们的应用程序将如下所示：
- en: '![Figure 6.3 – Adding a new todo item feature'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3-添加新的待办事项功能'
- en: '](image/Figure_6.3_B15616.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.3_B15616.jpg)'
- en: Figure 6.3 – Adding a new todo item feature
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3-添加新的待办事项功能
- en: In the preceding screenshot, we can verify that our **Add todo item** feature
    is working since we have already added the todo item. Now that our code seems
    to be working okay, it is time to check whether our tests actually pass when they're
    run. To do this, we will use the `todo-v2.spec.js` test file, which is a modified
    version of `todo-v1.spec.js`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以验证我们的**添加待办事项**功能是否正常工作，因为我们已经添加了待办事项。现在我们的代码似乎工作正常，是时候检查我们的测试在运行时是否实际通过了。为此，我们将使用`todo-v2.spec.js`测试文件，这是`todo-v1.spec.js`的修改版本。
- en: 'We have modified our test from the version 1 test file located in `todo-v1.spec.js`,
    and have also modified the test so that it adapts to the todo item addition feature
    we created in our application. The new test should look as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了位于`todo-v1.spec.js`的版本1测试文件的测试，并且还修改了测试，使其适应我们在应用程序中创建的待办事项添加功能。新测试应如下所示：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just like in our initial test, the initial scenarios to be tested do not change.
    We begin by navigating to the default URL of our application running locally.
    Then, we add a todo item using Cypress and later verify that the added todo item
    is what we initially added to the input element. We can clearly check the actions
    as they happen in the following screenshot, which shows the successful test:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在我们的初始测试中一样，要测试的初始场景并没有改变。我们首先导航到本地运行的应用程序的默认URL。然后，我们使用Cypress添加一个待办事项，然后验证添加的待办事项是否与我们最初添加到输入元素中的内容相同。我们可以清楚地查看以下截图中发生的操作，该截图显示了成功的测试：
- en: '![Figure 6.4 – Passing the test for adding a todo item'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 通过测试添加待办事项'
- en: '](image/Figure_6.4_B15616.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.4_B15616.jpg)'
- en: Figure 6.4 – Passing the test for adding a todo item
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 通过测试添加待办事项
- en: In the preceding screenshot, we can see that Cypress navigated to the locally
    hosted application and added a todo, then checked to see whether the added todo
    was present in the todo list.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们可以看到Cypress导航到本地托管的应用程序并添加了一个待办事项，然后检查添加的待办事项是否出现在待办事项列表中。
- en: Important Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We added element identifiers that are prefixed with `data-testid=*` to our application
    to uniquely identify elements. Element identifiers are very handy when it comes
    to selecting elements in a web application. By adding unique identifiers and not
    using the default CSS selectors for the application, even when the application
    selectors change, our tests will remain unaffected and will continue to run normally.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序添加了以`data-testid=*`为前缀的元素标识符，以唯一标识元素。元素标识符在选择Web应用程序中的元素时非常方便。通过添加唯一标识符并且不使用应用程序的默认CSS选择器，即使应用程序的选择器发生变化，我们的测试也不会受到影响，仍将正常运行。
- en: 'With that, we have successfully completed our first task in TDD. In this section,
    we achieved the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们成功完成了TDD中的第一个任务。在本节中，我们实现了以下目标：
- en: Identified an application that we wanted to develop and prototyped it
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定了我们想要开发并创建原型的应用程序
- en: Wrote TDD tests before development started
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发开始之前编写了TDD测试
- en: Developed the feature for adding a todo item to our application
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发了向我们的应用程序添加待办事项的功能
- en: Modified the TDD tests to make them conform to our developed feature
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改了TDD测试以使其符合我们开发的功能
- en: 'The following screenshot shows a side-by-side comparison of both the TDD version
    and the final feature version of the tests for adding a new todo:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了添加新待办事项的TDD版本和最终功能版本的测试的并排比较：
- en: '![Figure 6.5 – TDD test versus final feature test comparison'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – TDD测试与最终功能测试的比较'
- en: '](image/Figure_6.5_B15616.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.5_B15616.jpg)'
- en: Figure 6.5 – TDD test versus final feature test comparison
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – TDD测试与最终功能测试的比较
- en: As you can see, the second version of the test reveals that while the test structure
    or objective did not change, we had to modify our test so that it suited the developed
    todo addition feature. The ability to identify requirements, develop a feature,
    and then modify the tests to run against the feature is the main goal of TDD,
    which we managed to achieve.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，测试的第二个版本显示，尽管测试结构或目标没有改变，但我们不得不修改测试，以使其适应已开发的待办事项添加功能。识别需求、开发功能，然后修改测试以针对该功能运行是TDD的主要目标，我们成功实现了这一点。
- en: Deleting a todo item
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除待办事项
- en: 'Now, we will learn how to delete an added todo item. Regarding our requirements,
    a deleted todo item is removed from the list of todo items and is not visible
    once the delete button for the todo item is clicked. Again, we will not focus
    on the process of developing the feature but on the tests for this feature. In
    the following screenshot, we can see the delete button for every new todo item
    that is added:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何删除已添加的待办事项。根据我们的需求，删除的待办事项将从待办事项列表中移除，并且一旦单击待办事项的删除按钮，它将不再可见。再次强调，我们不会关注开发该功能的过程，而是关注该功能的测试。在以下截图中，我们可以看到为每个新添加的待办事项显示的删除按钮：
- en: '![Figure 6.6 – Delete todo item feature'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 删除待办事项功能'
- en: '](image/Figure_6.6_B15616.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.6_B15616.jpg)'
- en: Figure 6.6 – Delete todo item feature
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 删除待办事项功能
- en: 'The icon that''s highlighted in red is the delete icon that appears for every
    todo item. If the delete button is clicked, the added todo item will disappear
    from our todo list, as described in our requirements. To validate that the feature
    works according to how we had envisioned it, we will now modify our TDD test for
    the delete feature and run the test against this feature. The following code block
    is a test that deletes a todo item that has already been added to the todo list:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示为红色的图标是出现在每个待办事项上的删除图标。如果单击删除按钮，添加的待办事项将从我们的待办事项列表中消失，就像我们的需求描述的那样。为了验证该功能是否按照我们设想的那样工作，我们现在将修改我们的TDD测试以针对删除功能运行测试。以下代码块是一个测试，用于删除已添加到待办事项列表中的待办事项：
- en: '[PRE7]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This code block shows the modified TDD test for confirming that once a todo
    item has been deleted, it is no longer present in the todo items list. We also
    had to make some minor modifications to the test from the initial TDD test that
    we had written, so that all the selectors and actions matched the feature that
    has been developed. Looking at the following Cypress screenshot, we can see that
    our test passes and that the added todo item is deleted, as we expected:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码显示了修改后的TDD测试，以确认一旦删除了待办事项，它将不再出现在待办事项列表中。我们还必须对我们最初编写的TDD测试进行一些微小修改，以使所有选择器和操作与已开发的功能匹配。从以下Cypress截图中可以看到，我们的测试通过了，添加的待办事项已被删除，正如我们预期的那样：
- en: '![Figure 6.7 – Deleting an added todo item'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 删除已添加的待办事项'
- en: '](image/Figure_6.7_B15616.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.7_B15616.jpg)'
- en: Figure 6.7 – Deleting an added todo item
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 删除已添加的待办事项
- en: Here, the Cypress snapshot feature helps us visualize the process of Cypress
    clicking on the delete button of the newly added todo item. We have also written
    an assertion to verify that the deleted todo does not exist on the todo list once
    it has been deleted. Our test has passed, which means that we have used TDD to
    add a todo item to a todo list and have also deleted this todo item and tested
    that it does not exist in our todo list. In our next test, we will focus on viewing
    added todo items.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Cypress快照功能帮助我们可视化了Cypress点击新添加的待办事项的删除按钮的过程。我们还编写了一个断言来验证一旦删除后，已删除的待办事项在待办事项列表中不存在。我们的测试通过了，这意味着我们已经使用TDD向待办事项列表中添加了一个待办事项，并且还删除了这个待办事项并测试了它在待办事项列表中不存在。在我们的下一个测试中，我们将专注于查看已添加的待办事项。
- en: Viewing added todo items
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项
- en: 'Part of the requirements for our application includes viewing added todo items
    in the todo list. While adding todo items, we have been able to see this feature
    in action but have not tested it. To verify this feature, we will add a new todo
    item and check whether the created todo item appears on the todo list. The following
    code block is a test that checks whether the added todo items are visible on the
    application that we have created:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的要求之一是查看待办事项列表中已添加的待办事项。在添加待办事项时，我们已经能够看到这个功能在运行，但还没有进行测试。为了验证这个功能，我们将添加一个新的待办事项，并检查创建的待办事项是否出现在待办事项列表中。以下代码块是一个检查已添加的待办事项是否在我们创建的应用程序中可见的测试：
- en: '[PRE8]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we have modified our TDD test. Rather than only checking whether we can
    view a single todo item, we have added two items and added an assertion to check
    that both items exist in the todo list. We will run our tests in Cypress and use
    the application preview to verify that both Todo items exist, as shown in the
    following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了我们的TDD测试。不仅仅是检查我们是否可以查看单个待办事项，我们添加了两个项目，并添加了一个断言来检查这两个项目是否存在于待办事项列表中。我们将在Cypress中运行我们的测试，并使用应用程序预览来验证这两个待办事项是否存在，如下截图所示：
- en: '![Figure 6.8 – Viewing added todo items'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – 查看已添加的待办事项'
- en: '](image/Figure_6.8_B15616.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.8_B15616.jpg)'
- en: Figure 6.8 – Viewing added todo items
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 查看已添加的待办事项
- en: Hurray! Our test passes!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！我们的测试通过了！
- en: This screenshot shows that our requirement of having a feature that adds a todo
    item was correctly built, and that our test requirements for viewing todo items
    in our todo list were also met. Here, we have achieved our goal of viewing our
    todo items feature. We have also used TDD to check for scenarios that needed to
    be tested when viewing our todo items.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这个截图显示了我们正确构建了一个添加待办事项的功能的需求，并且我们对查看待办事项在待办事项列表中的测试需求也得到了满足。在这里，我们已经实现了查看我们的待办事项功能的目标。我们还使用了TDD来检查在查看我们的待办事项时需要测试的场景。
- en: Viewing the count of added todo items
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看已添加的待办事项数
- en: 'Now that we have modified our TDD tests for adding a todo item, deleting a
    todo item, and viewing todo items in our todo list, we also want to add a feature
    that checks the number of todo items that have been added. The feature for viewing
    the count of our added todo items is shown in the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修改了用于添加待办事项、删除待办事项和查看待办事项的TDD测试，我们还想添加一个功能，用于检查已添加的待办事项的数量。查看我们已添加的待办事项数的功能如下截图所示：
- en: '![Figure 6.9 – Viewing the count of added todo items'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – 查看已添加的待办事项数'
- en: '](image/Figure_6.9_B15616.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.9_B15616.jpg)'
- en: Figure 6.9 – Viewing the count of added todo items
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 查看已添加的待办事项数
- en: 'This feature displays the number of todo items that are currently available
    in our todo list. The count of todo items will increase as more todo items are
    added and decrease when todo items are deleted from the list. Here, we will use
    our TDD test that we wrote for this feature and modify it so that it can be used
    by our application. In our test, we will focus on adding and deleting todo items
    and validating that on addition and deletion, the number of todo items changes
    accordingly. The following code block shows different assertions that check whether
    the feature works as it should, as per our requirements:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能显示了当前在我们的待办事项列表中可用的待办事项数量。随着添加更多的待办事项，待办事项的数量将增加，并且当从列表中删除待办事项时，数量将减少。在这里，我们将使用我们为此功能编写的TDD测试，并修改它以便我们的应用程序可以使用。在我们的测试中，我们将专注于添加和删除待办事项，并验证在添加和删除时，待办事项的数量会相应地改变。以下代码块显示了不同的断言，检查该功能是否按照我们的要求正常工作：
- en: '[PRE9]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code snippet shows us adding new todo items, verifying that an
    item from the list was deleted, and that the count remains consistent through
    the different state changes of the application. Here, we have modified our initial
    TDD tests and have been able to use them to test whether we can actually increment
    or decrement the count of the todo items available. By running the same test on
    Cypress, we can verify that Cypress is happy and that we have a remaining todo
    item that was not deleted, as shown in the following screenshot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段向我们展示了添加新的待办事项，验证列表中的项目是否被删除，以及计数在应用程序不同状态变化中保持一致。在这里，我们修改了我们最初的TDD测试，并且能够使用它们来测试我们是否实际上可以增加或减少可用的待办事项的数量。通过在Cypress上运行相同的测试，我们可以验证Cypress是正常的，并且我们有一个未被删除的待办事项，如下截图所示：
- en: '![Figure 6.10 – Testing the todo count'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10 – 测试待办事项数'
- en: '](image/Figure_6.10_B15616.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_6.10_B15616.jpg)'
- en: Figure 6.10 – Testing the todo count
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 测试待办事项数
- en: From the preceding screenshot, we can verify that as the state of the application
    changes due to actions such as adding and deleting todo items, the count increases
    or decreases accordingly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以验证，随着应用程序状态的改变，比如添加和删除待办事项，数量会相应地增加或减少。
- en: Recap – modifying TDD tests
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 – 修改TDD测试
- en: In this section, we learned how to modify TDD tests once features have been
    developed to make them conform to how our application has been built. We also
    learned how Cypress uniquely identifies what elements to interact with when our
    tests are running. Finally, we learned how to transform already written TDD tests
    into test features that have been developed for our application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学会了如何修改TDD测试，一旦功能已经开发完成，使其符合我们应用程序的构建方式。我们还学会了Cypress在测试运行时如何独特地识别要与之交互的元素。最后，我们学会了如何将已经编写的TDD测试转换为已为我们的应用程序开发的测试功能。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood how the process of TDD works and the importance
    of embracing TDD in any team, and looked at the advantages and disadvantages of
    TDD. We also explored how TDD can be applied to a practical application. By doing
    this, we created requirements for a Todo application that had not been built yet.
    Before developing the application, we wrote TDD tests for the features we thought
    were important, and then used these requirements and TDD tests to develop our
    features. Once we'd finished developing our features, we modified our first TDD
    versions of the tests so that they work for our developed features, hence completing
    the process of showcasing how to utilize TDD in a practical application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了TDD工作的过程以及在任何团队中拥抱TDD的重要性，并探讨了TDD的优缺点。我们还探讨了如何将TDD应用于实际应用程序。通过这样做，我们为一个尚未构建的Todo应用程序创建了需求。在开发应用程序之前，我们为我们认为重要的功能编写了TDD测试，然后使用这些需求和TDD测试来开发我们的功能。在开发完功能后，我们修改了我们的第一个TDD版本的测试，使其适用于我们开发的功能，从而完成了展示如何在实际应用程序中利用TDD的过程。
- en: Now, you should understand what TDD is, how to write TDD tests, and how to modify
    and use TDD tests in a real-world application so that they conform to the developed
    application.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该了解什么是TDD，如何编写TDD测试，以及如何修改和使用TDD测试在实际应用程序中，使其符合已开发的应用程序。
- en: Now that we know about TDD and how to implement it in our projects, we will
    focus on how to interact with the different elements of the Cypress DOM in the
    next chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了TDD以及如何在项目中实施它，接下来我们将专注于如何与Cypress DOM的不同元素进行交互。
