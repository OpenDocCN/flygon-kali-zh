- en: Chapter 7. Learning Recursion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。学习递归
- en: 'In the first announcement of functional programming, many functional languages
    didn''t have the loop feature to iterate the sequence. All we had to do was construct
    the recursion process to iterate the sequence. Although C# has iteration features
    such as `for` and `while` , it is better if we discuss recursion in the functional
    approach. Recursion will also simplify our code. To do that, in this chapter,
    we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程的首次公告中，许多函数式语言没有循环功能来迭代序列。我们所要做的就是构建递归过程来迭代序列。尽管C#具有诸如`for`和`while`之类的迭代功能，但最好还是在函数式方法中讨论递归。递归也将简化我们的代码。因此，在本章中，我们将讨论以下主题：
- en: Understanding how the recursive routine works
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解递归例程的工作方式
- en: Refactoring an iteration into a recursion
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将迭代重构为递归
- en: Distinguishing tail recursion between the accumulator-passing style and the
    continuation-passing style
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分尾递归和累加器传递风格与续传风格
- en: Understanding indirect recursion over direct recursion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解间接递归和直接递归
- en: Applying recursion in the functional approach using the Aggregate LINQ operator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Aggregate LINQ运算符在函数式方法中应用递归
- en: Exploring recursion
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索递归
- en: A recursive function is a function that calls itself. Like the iteration loop,
    for instance, the `while` and `for` loop--it is used to solve a complicated task
    one piece at a time and combine the results. However, there is a difference between
    the `for` loop and `while` loop. The iteration will keep repeating until the task
    is done, while the recursion will break the task up into smaller pieces in order
    to solve the larger problem and then combine the result. In the functional approach,
    the recursion is closer to the mathematical approach since it is often shorter
    than iteration, although it's somehow more difficult to design and test.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 递归函数是调用自身的函数。与迭代循环（例如`while`和`for`循环）一样，它用于逐步解决复杂的任务并组合结果。但是，`for`循环和`while`循环之间存在区别。迭代将持续重复直到任务完成，而递归将将任务分解成较小的部分以解决更大的问题，然后组合结果。在函数式方法中，递归更接近数学方法，因为它通常比迭代更短，尽管在设计和测试上可能更难一些。
- en: 'In [Chapter 1](text00016.html#ch01 "Chapter 1. Tasting Functional Style in
    C#") , *Tasting Functional Style in C#,* we were acquainted with recursive functions,
    when we discussed the concepts of functional programming. There, we analyzed the
    factorial function named `GetFactorial()` in the imperative and functional approach.
    To refresh our memory, following is the `GetFactorial()` function implementation,
    which we can find in the `SimpleRecursion.csproj` project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](text00016.html#ch01 "第1章。在C#中品尝函数式风格")中，*在C#中品尝函数式风格*，我们在讨论函数式编程的概念时熟悉了递归函数。在那里，我们分析了命名为`GetFactorial()`的阶乘函数在命令式和函数式方法中的实现。为了提醒我们，以下是`GetFactorial()`函数的实现，我们可以在`SimpleRecursion.csproj`项目中找到：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From our discussion in [Chapter 1](text00016.html#ch01 "Chapter 1. Tasting
    Functional Style in C#") , *Tasting Functional Style in C#* we know that the factorial
    of the non-negative integer `N` is the multiplication of all positive integers
    less than or equal to `N` . So, suppose we have the following function to calculate
    the factorial of five:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在[第1章](text00016.html#ch01 "第1章。在C#中品尝函数式风格")的讨论中，*在C#中品尝函数式风格*，我们知道非负整数`N`的阶乘是小于或等于`N`的所有正整数的乘积。因此，假设我们有以下函数来计算五的阶乘：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As we can predict, if we invoke the preceding `GetFactorialOfFive()` method,
    we will get the following output on the console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以预测的那样，如果我们调用前面的`GetFactorialOfFive()`方法，我们将在控制台上得到以下输出：
- en: '![Exploring recursion](img/Image00083.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![探索递归](img/Image00083.jpg)'
- en: 'Back to the `GetFactorial()` method again; we see in the implementation of
    this method there is code that will end the recursion, as shown in the following
    code snippet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`GetFactorial()`方法，我们可以看到在该方法的实现中有结束递归的代码，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can see that the preceding code is the base case of the recursion and the
    recursion usually has the base case. This base case will define the end of the
    recursion chain since, in this case, the method will change the state of `intNumber`
    every time the recursion is run, and the chain will be stopped if `intNumber`
    is zero.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到前面的代码是递归的基本情况，递归通常有基本情况。这个基本情况将定义递归链的结束，因为在这种情况下，每次运行递归时方法都会改变`intNumber`的状态，并且如果`intNumber`为零，链条将停止。
- en: Working of the recursive routine
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归例程的工作方式
- en: 'In order to understand how the recursive routine works, let''s examine the
    state of `intNumber` if we find the factorial of five, as shown in the following
    flow of the program:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解递归例程的工作方式，让我们检查一下程序的流程，看看如果我们找到五的阶乘时`intNumber`的状态是怎样的：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the preceding flow, it becomes clearer how the recursion works. The base
    case we have defines the end of the recursion chain. A programming language compiler
    converts the specific case of recursion into an iteration when applicable because
    a loop-based implementation becomes more efficient by eliminating the need for
    a function call.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前述流程，递归的工作方式变得更清晰。我们定义的基本情况定义了递归链的结束。编程语言编译器将特定情况的递归转换为迭代，因为基于循环的实现通过消除对函数调用的需求而变得更有效率。
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be careful when applying the recursion in your program logic. If you miss a
    base case or give a wrong value to it, you may go off into an infinite recursion.
    For instance, in the preceding `GetFactorial()` method, if we pass `intNumber
    < 0` , then our program will never end.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写程序逻辑时应谨慎应用递归。如果您错过了基本情况或给出了错误的值，可能会陷入无限递归。例如，在前面的`GetFactorial()`方法中，如果我们传递`intNumber
    < 0`，那么我们的程序将永远不会结束。
- en: Refactoring an iteration to the recursion
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将迭代重构为递归
- en: 'Recursion makes our programs more readable, and it is essential in the functional
    programming approach. Here, we are going to refactor the for loop iteration to
    the recursion method. Let''s take a look at the following code, which we can find
    in the `RefactoringIterationToRecursion.csproj` project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 递归使我们的程序更易读，并且在函数式编程方法中是必不可少的。在这里，我们将把for循环迭代重构为递归方法。让我们来看看以下代码，我们可以在`RefactoringIterationToRecursion.csproj`项目中找到：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding `FindMaxIteration()` method is used to pick the maximum number
    in the array of numbers. Consider that we have the following code in order to
    run the `FindMaxIteration()` method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`FindMaxIteration()`方法用于选择数组中的最大数。考虑到我们有以下代码来运行`FindMaxIteration()`方法：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can expect, we will have the following output in the console window:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所期望的，我们将在控制台窗口中得到以下输出：
- en: '![Refactoring an iteration to the recursion](img/Image00084.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![将迭代重构为递归](img/Image00084.jpg)'
- en: 'Now, let''s refactor the `FindMaxIteration()` method to the recursive function.
    The following is the implementation of the `FindMaxRecursive()` method, which
    is the recursion version of the `FindMaxIteration()` method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`FindMaxIteration()`方法重构为递归函数。以下是`FindMaxRecursive()`方法的实现，它是`FindMaxIteration()`方法的递归版本：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can invoke the preceding `FindMaxRecursive()` method using the same code
    as we did in the `FindMaxIteration()` method, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与`FindMaxIteration()`方法相同的代码来调用上述的`FindMaxRecursive()`方法，如下所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we can see in the preceding method, we have the following base case to define
    the end of the recursion chain:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面的方法中所看到的，我们有以下基本情况来定义递归链的结束：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we run the preceding code, we will get the same result as the one we got
    in our previous method, as shown in the following console screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述代码，我们将得到与之前方法中得到的相同结果，如下面的控制台截图所示：
- en: '![Refactoring an iteration to the recursion](img/Image00085.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![将迭代重构为递归](img/Image00085.jpg)'
- en: 'Now, let''s take a look at the following flow to know how we can get this result
    when we use the recursion function:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下以下流程，了解我们如何在使用递归函数时得到这个结果：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Using the preceding flow, we can distinguish every state change in the maximum
    number we get every time the `FindMaxRecursive()` method is called. Then, we can
    prove that the maximum number in the given array is `98` .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述流程，我们可以区分每次调用`FindMaxRecursive()`方法时得到的最大数的每个状态变化。然后，我们可以证明给定数组中的最大数是`98`。
- en: Using tail recursion
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用尾递归
- en: In the `GetFactorial()` method we discussed previously, traditional recursion
    is used to calculate the factorial number. This recursion model performs the recursive
    call first and returns the value, and then it calculates the result. Using this
    recursion model, we won't get the result until the recursive call is finished.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前讨论的`GetFactorial()`方法中，使用传统递归来计算阶乘数。这种递归模型首先执行递归调用并返回值，然后计算结果。使用这种递归模型，我们在递归调用完成之前不会得到结果。
- en: 'Besides the traditional recursion model, we have another recursion called tail
    recursion. The tail call becomes the last thing in the function and it doesn''t
    do anything after the recursion at all. Let''s look at the following code, which
    we can find in the `TailRecursion.csproj` project:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的递归模型，我们还有另一种称为尾递归的递归。尾调用成为函数中的最后一件事，并且在递归之后不执行任何操作。让我们来看看以下代码，我们可以在`TailRecursion.csproj`项目中找到：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the preceding code, the tail is executed when `iTotalRecursion` has reached
    `0` , as shown in the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码中，当`iTotalRecursion`达到`0`时，尾部被执行，如下面的代码片段所示：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we run the preceding `TailCall()` method and pass `5` for the `iTotalRecursion`
    argument, we will get the following output on the console:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`TailCall()`方法，并为`iTotalRecursion`参数传递`5`，我们将在控制台上得到以下输出：
- en: '![Using tail recursion](img/Image00086.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用尾递归](img/Image00086.jpg)'
- en: 'Now, let''s examine the state change every time the function is called recursively
    in this code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看在这段代码中每次递归调用时状态的变化：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'From the preceding flow of recursion, the process is only run in the last recursion
    call. After that, nothing happens to the other recursive calls. In other words,
    we can conclude that the flow will actually be as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从递归的流程中，该过程仅在最后的递归调用中运行。之后，其他递归调用不会发生任何事情。换句话说，我们可以得出以下流程：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, the flow of our tail recursion is obvious and clear. The idea of tail recursion
    is to minimize the use of the stack that is sometimes the expensive resource we
    have. Using tail recursion, the code doesn't need to remember the last state it
    has to come back to when the next step returns, since it has the temporary result
    in the accumulator parameter in this case. The following topic is the two styles
    that follow tail recursion; they are **accumulator-passing style** ( **APS** )
    and **continuation-passing style** ( **CPS** ).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的尾递归流程显而易见。尾递归的思想是尽量减少堆栈的使用，因为堆栈有时是我们拥有的昂贵资源。使用尾递归，代码不需要记住上次返回时必须返回的状态，因为在这种情况下，它在累加器参数中有临时结果。接下来的主题是遵循尾递归的两种风格；它们是**累加器传递风格**（**APS**）和**续传风格**（**CPS**）。
- en: Accumulator-passing style
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 累加器传递风格
- en: 'In the **accumulator-passing style** ( **APS** ), the recursion performs the
    calculation first, executes the recursive call, and then passes the result of
    the current step to the next recursive step. Let''s take a look at the following
    accumulator passing style of the tail recursive code we refactor from the `GetFactorial()`
    method, which we can find in the `AccumulatorPassingStyle.csproj` project:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在**累加器传递风格**（**APS**）中，递归首先执行计算，执行递归调用，然后将当前步骤的结果传递给下一个递归步骤。让我们来看看我们从`GetFactorial()`方法重构的尾递归代码的累加器传递风格，我们可以在`AccumulatorPassingStyle.csproj`项目中找到：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Compared to the `GetFactorial()` method, we now have a second parameter named
    accumulator in the `GetFactorialAPS()` method. Since the result of the factorial
    `0` is `1` , we give the default value of 1 to the accumulator parameter. Instead
    of just returning a value, it now returns the calculation of the factorial every
    time the recursive function is called. To prove this, consider that we have the
    following code in order to invoke the `GetFactorialAPS()` method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与`GetFactorial()`方法相比，`GetFactorialAPS()`方法现在有一个名为accumulator的第二个参数。由于阶乘`0`的结果是`1`，我们将默认值1赋给accumulator参数。现在它不仅返回一个值，而且每次调用递归函数时都返回阶乘的计算结果。为了证明这一点，考虑我们有以下代码来调用`GetFactorialAPS()`方法：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run the preceding method, we will get the following output on the console:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述方法，我们将在控制台上得到以下输出：
- en: '![Accumulator-passing style](img/Image00087.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![累加器传递风格](img/Image00087.jpg)'
- en: 'Now, let''s examine every call of the `GetFactorialAPS()` method to see the
    state change inside the method from the following flow of the program:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查`GetFactorialAPS()`方法的每个调用，以查看程序的以下流程中方法内部的状态变化：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we can see from the preceding flow, since it performs the calculation every
    time it''s called, we now have the result of the calculation in the last call
    of the function, when the `intNumber` parameter has reached `0` , as shown in
    the following code snippet:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述流程中可以看出，由于每次调用时都执行计算，我们现在在函数的最后一次调用中得到了计算的结果，当`intNumber`参数达到`0`时，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also refactor the preceding `GetFactorialAPS()` method into the `GetFactorialAPS2()`
    method in order to not return any value, so it will become more obvious how the
    APS of tail recursion works. The code will be as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将上述的`GetFactorialAPS()`方法重构为`GetFactorialAPS2()`方法，以便不返回任何值，这样尾递归的APS将变得更明显。代码将如下所示：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Suppose we have the following `GetFactorialOfFiveUsingAPS2()` method to call
    the `GetFactorialAPS2()` method:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有以下`GetFactorialOfFiveUsingAPS2()`方法来调用`GetFactorialAPS2()`方法：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So, we will get the following output on the console if we invoke the preceding
    `GetFactorialOfFiveUsingAPS2()` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们调用上述的`GetFactorialOfFiveUsingAPS2()`方法，我们将在控制台上得到以下输出：
- en: '![Accumulator-passing style](img/Image00088.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![累加器传递风格](img/Image00088.jpg)'
- en: 'Now, the flow of the `GetFactorialAPS2()` method becomes clearer, as shown
    in the following flow of the program:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`GetFactorialAPS2()`方法的流程变得更清晰，如下面的程序流程所示：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: From the preceding flow, we can see that we calculate the accumulator every
    time the `GetFactorialAPS2()` method is invoked. The result of this recursion
    type is that we do not need to use the stack anymore since the function doesn't
    need to memorize its start position when it calls the function itself.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述流程中，我们可以看到每次调用`GetFactorialAPS2()`方法时都会计算accumulator。这种递归类型的结果是，我们不再需要使用堆栈，因为函数在调用自身时不需要记住其起始位置。
- en: Continuation-passing style
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续传递风格
- en: The **continuation-passing style** ( **CPS** ) has the same purpose as APS in
    implementing the recursive function using a tail call, but it has explicit continuation
    in processing the operation. The return of the CPS function will be passed on
    to the continuation function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**继续传递风格**（**CPS**）与APS具有相同的目的，即使用尾调用实现递归函数，但在处理操作时具有显式的继续。CPS函数的返回值将传递给继续函数。'
- en: 'Now, let''s refactor the `GetFactorial()` method into the following `GetFactorialCPS()`
    method, which we can find in the `ContinuationPassingStyle.csproj` project:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将`GetFactorial()`方法重构为以下`GetFactorialCPS()`方法，我们可以在`ContinuationPassingStyle.csproj`项目中找到它：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we can see, instead of using the accumulator, as we did in the `GetFactorialAPS()`
    method, we now use `Action<T>` to delegate an anonymous method, which we use as
    a continuation. Suppose we have the following code to invoke the `GetFactorialCPS()`
    method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，与`GetFactorialAPS()`方法中使用accumulator不同，我们现在使用`Action<T>`来委托一个匿名方法，这个方法作为继续使用。假设我们有以下代码来调用`GetFactorialCPS()`方法：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we run the preceding `GetFactorialOfFiveUsingCPS()` method, we will get
    the following output on the console:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`GetFactorialOfFiveUsingCPS()`方法，我们将在控制台上得到以下输出：
- en: '![Continuation-passing style](img/Image00089.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![继续传递风格](img/Image00089.jpg)'
- en: 'Indeed, we get the same result compared to the `GetFactorial()` method or the
    `GetFactorialAPS2()` method. However, the flow of recursion now becomes a little
    bit different, as shown in the following explanation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，与`GetFactorial()`方法或`GetFactorialAPS2()`方法相比，我们得到了相同的结果。然而，递归的流程现在变得有点不同，如下面的解释所示：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The return of each recursion now is passed to the continuation process, in this
    case, the `Console.WriteLine()` function.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次递归的返回值都传递给继续过程，即`Console.WriteLine()`函数。
- en: Indirect recursion over direct recursion
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间接递归比直接递归
- en: 'We have discussed recursion methods earlier. Actually, in our previous discussion,
    we applied direct recursion since we only dealt with a single method and we invoked
    it over and over again until the base case was executed. However, there''s another
    recursive type, which is called indirect recursion. Indirect recursion involves
    at least two functions, for instance, function A and function B. In the application
    of an indirect recursion, function A calls function B, and then function B makes
    a call back to function A. It''s considered a recursion because when method B
    calls method A, function A is actually active when it calls function B. In other
    words, the invocation of function A has not finished when function B calls function
    A again. Let''s take a look at the following code, which demonstrates the indirect
    recursion that we can find in the `IndirectRecursion.csproj` project:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过递归方法。实际上，在我们之前的讨论中，我们应用了直接递归，因为我们只处理了一个单一的方法，并且一遍又一遍地调用它，直到基本情况被执行。然而，还有另一种递归类型，称为间接递归。间接递归涉及至少两个函数，例如函数A和函数B。在间接递归的应用中，函数A调用函数B，然后函数B再次调用函数A。这被认为是递归，因为当方法B调用方法A时，函数A实际上是活动的，当它再次调用函数B时。换句话说，当函数B再次调用函数A时，函数A的调用尚未完成。让我们来看看下面的代码，它演示了我们可以在`IndirectRecursion.csproj`项目中找到的间接递归：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We have two functions in the preceding code: `IsOdd()` and `IsEven()` . Each
    function calls the other function every time the comparison results `false` .
    The `IsOdd()` function will call `IsEven()` when `targetNumber` is not zero and
    so will the `IsEven()` function. The logic of each function is simple. For instance,
    the `IsOdd()` method decides whether or not `targetNumber` is odd by investigating
    whether or not the previous number, which is `targetNumber - 1` , is even. Likewise,
    the `IsEven()` method decides whether or not `targetNumber` is even by investigating
    whether or not the previous number is odd. They all subtract `targetNumber` by
    one until it becomes zero, and since zero is an even number, it''s now quite easy
    to determine whether `targetNumber` is odd or even. Now, we add the following
    code to examine whether the number `5` is even or not:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们有两个函数：`IsOdd()`和`IsEven()`。每个函数在比较结果为`false`时都会调用另一个函数。当`targetNumber`不为零时，`IsOdd()`函数将调用`IsEven()`，`IsEven()`函数也是如此。每个函数的逻辑都很简单。例如，`IsOdd()`方法通过调查前一个数字`targetNumber
    - 1`是否为偶数来决定`targetNumber`是否为奇数。同样，`IsEven()`方法通过调查前一个数字是否为奇数来决定`targetNumber`是否为偶数。它们都将`targetNumber`减一，直到它变为零，由于零是一个偶数，现在很容易确定`targetNumber`是奇数还是偶数。现在，我们添加以下代码来检查数字`5`是偶数还是奇数：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we run the preceding `CheckNumberFive()` method, we will get the following
    output on the console:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`CheckNumberFive()`方法，将在控制台上得到以下输出：
- en: '![Indirect recursion over direct recursion](img/Image00090.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![间接递归与直接递归](img/Image00090.jpg)'
- en: 'Now, to make this clearer, let''s take a look at the following indirect recursion
    flow involving the `IsOdd()` and `IsEven()` methods:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了更清楚地理解，让我们来看看涉及`IsOdd()`和`IsEven()`方法的以下间接递归流程：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: From the preceding flow, we can see that when we check whether number 5 is even
    or not, we move down to number 4 and check whether it is odd. We then check number
    3 and so on, until we reach 0\. By reaching 0, we can easily determine whether
    it's odd or even.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的流程中，我们可以看到，当我们检查数字5是偶数还是奇数时，我们向下移动到数字4并检查它是否为奇数。然后我们检查数字3，依此类推，直到我们达到0。通过达到0，我们可以很容易地确定它是奇数还是偶数。
- en: Recursion in a functional approach using LINQ Aggregate
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ Aggregate进行函数式递归
- en: 'When we deal with a factorial formula, we can use LINQ Aggregate to refactor
    our recursive function into a functional approach. LINQ Aggregate will accumulate
    the given sequence, and then we will have the result of the recursion from the
    accumulator. In [Chapter 1](text00016.html#ch01 "Chapter 1. Tasting Functional
    Style in C#") , *Tasting Functional Style in C#* we have already done this refactoring.
    Let''s borrow the code from the chapter to analyze the use of the `Aggregate`
    method. The following code will use the `Aggregate` method, which we can find
    in the `RecursionUsingAggregate.csproj` project:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理阶乘公式时，我们可以使用LINQ Aggregate将我们的递归函数重构为函数式方法。LINQ Aggregate将累积给定的序列，然后我们将从累加器中得到递归的结果。在[第1章](text00016.html#ch01
    "第1章。在C#中尝试函数式风格")中，我们已经进行了这种重构。让我们借用该章节的代码来分析`Aggregate`方法的使用。下面的代码将使用`Aggregate`方法，我们可以在`RecursionUsingAggregate.csproj`项目中找到：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we run the preceding `GetFactorialAggregate()` method and pass `5` as the
    parameter, we will get the following output on the console:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`GetFactorialAggregate()`方法，并将`5`作为参数传递，将在控制台上得到以下输出：
- en: '![Recursion in a functional approach using LINQ Aggregate](img/Image00091.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用LINQ Aggregate进行函数式递归](img/Image00091.jpg)'
- en: As we can see in the preceding console screenshot, we get the exact same result
    compared to what we get with the use of nonaggregate recursion.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上面的控制台截图中所看到的，与非累积递归相比，我们得到了完全相同的结果。
- en: Delving into the Aggregate method
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入研究Aggregate方法
- en: 'As we discussed earlier, the `Aggregate` method will accumulate the given sequence.
    Let''s take a look at the following code, which we can find in the `AggregateExample.csproj`
    project file, to demonstrate how the `Aggregate` method works:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，`Aggregate`方法将累积给定的序列。让我们来看看下面的代码，我们可以在`AggregateExample.csproj`项目文件中找到，以演示`Aggregate`方法的工作原理：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'From the preceding code, we can see that we have a list of `int` data types,
    which contains numbers from 1 to 6\. We then invoke the `Aggregate` method to
    sum up the members of `listInt` . Here is the flow of the preceding code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码中，我们可以看到我们有一个`int`数据类型的列表，其中包含从1到6的数字。然后我们调用`Aggregate`方法来求和`listInt`的成员。以下是上述代码的流程：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we run the preceding `AggregateInt()` method, we will get the following
    output on the console:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行上述的`AggregateInt()`方法，将在控制台上得到以下输出：
- en: '![Delving into the Aggregate method](img/Image00092.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![深入研究Aggregate方法](img/Image00092.jpg)'
- en: 'Actually, the `Aggregate` method not only adds the number, but it also adds
    the string. Let''s examine the following code, which demonstrates the `Aggregate`
    method used to add the string sequence:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，`Aggregate`方法不仅可以添加数字，还可以添加字符串。让我们来看下面的代码，演示了使用`Aggregate`方法来添加字符串序列：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we run the preceding `AggregateString()` method, we will get the following
    output on the console:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的`AggregateString()`方法，我们将在控制台上得到以下输出：
- en: '![Delving into the Aggregate method](img/Image00093.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: 深入研究Aggregate方法
- en: 'The following is a declaration of the `Aggregate` method that we can find in
    MSDN:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以在MSDN中找到的`Aggregate`方法的声明：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following is the flow of the `AggregateUsage()` method based on the previous
    declaration:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于先前声明的`AggregateUsage()`方法的流程：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: From the preceding flow, we can concatenate all strings in `listString` using
    the `Aggregate` method. This proves that not only can the `int` data type be handled,
    but the string data type can be handled as well.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的流程中，我们可以使用`Aggregate`方法连接`listString`中的所有字符串。这证明不仅可以处理`int`数据类型，还可以处理字符串数据类型。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Although C# has a feature to iterate a sequence using the `for` or `while` loop,
    it's better for us to approach functional programming using recursion to iterate
    the sequence. We already discussed how the recursion routine works and refactored
    the iteration into recursion. We know that in the recursion, we have a base case
    that will define the end of the recursion chain.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然C#有一个使用`for`或`while`循环迭代序列的功能，但最好我们使用递归来迭代序列来接触函数式编程。我们已经讨论了递归例程的工作原理，并将迭代重构为递归。我们知道在递归中，我们有一个将定义递归链结束的基本情况。
- en: In the traditional recursion model, the recursive call performs first then returns
    the value and then calculates the result. The result won't be displayed until
    the recursive call is finished. Whereas, the tail recursion doesn't do anything
    after recursion at all. There are two styles in tail recursion; they are APS and
    CPS.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的递归模型中，递归调用首先执行，然后返回值，然后计算结果。结果直到递归调用完成后才会显示。而尾递归在递归之后根本不做任何事情。尾递归有两种风格；它们是APS和CPS。
- en: Besides direct recursion, we also discussed indirect recursion. Indirect recursion
    involves at least two functions. Then, we applied recursion into the functional
    approach using the **Aggregrate LINQ** operator. We also delved into the Aggregate
    operator and discussed how it works.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接递归，我们还讨论了间接递归。间接递归涉及至少两个函数。然后，我们将递归应用到使用Aggregrate LINQ运算符的函数方法中。我们还深入研究了Aggregate运算符以及它的工作原理。
- en: In the next chapter, we will discuss optimizing techniques to make our code
    more efficient. We will use laziness thinking so the code will be executed at
    the perfect time and also caching techniques so the code doesn't need to execute
    every time it's required.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论优化技术，使我们的代码更加高效。我们将使用懒惰思维，这样代码将在完美的时间执行，还将使用缓存技术，这样代码不需要每次都执行。
