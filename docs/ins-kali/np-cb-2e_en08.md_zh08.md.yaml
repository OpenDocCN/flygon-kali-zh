- en: Chapter 8. Quality Assurance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章：质量保证
- en: '"If you lie to the computer, it will get you."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “如果您对计算机撒谎，它将帮助您。”
- en: ''
  prefs: 
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ''
- en: '--Perry Farrar, Communications of the ACM, Volume 28'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——佩里·法勒（Perry Farrar），ACM 通讯，第 28 卷
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下秘籍：
- en: 'Installing Pyflakes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Pyflakes
- en: 'Performing static analysis with Pyflakes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pyflakes 执行静态分析
- en: 'Analyzing code with Pylint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用 Pylint 分析代码
- en: Performing static analysis with Pychecker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pychecker 执行静态分析
- en: 'Testing code with `docstrings`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docstrings`测试代码
- en: 'Writing unit tests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: 'Testing code with mocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模拟测试代码
- en: 'Testing the BDD way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 BDD 方式来测试
- en: 'Introduction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Quality assurance, contrary to popular belief, is not so much about finding
    bugs as it is about preventing them. We will discuss two ways to improve code
    quality, thereby preventing issues. First, we will carry out static analysis of
    already existing code. Then, we will cover unit testing; this includes mocking
    and **Behavior-Driven Development** (**BDD**).'
  prefs: []
  type: TYPE_NORMAL
  zh: 与普遍的看法相反，质量保证与其说是发现错误，不如说是发现它们。 我们将讨论两种提高代码质量，从而防止出现问题的方法。 首先，我们将对已经存在的代码进行静态分析。
    然后，我们将讨论单元测试； 这包括模拟和**行为驱动开发**（**BDD**）。
- en: 'Installing Pyflakes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Pyflakes
- en: '**Pyflakes** is a Python code analysis package. It can analyze code and spot
    potential problems such as:'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pyflakes** 是 Python 代码分析包。 它可以分析代码并发现潜在的问题，例如：'
- en: 'Unused imports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未使用的导入
- en: 'Unused variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未使用的变量
- en: 'Getting ready'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'Install `pip` or `easy_install` if necessary.'
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，请安装`pip`或`easy_install`。
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Choose one of the following options to install `pyflakes`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下之一来安装`pyflakes`：
- en: 'Install pyflakes with the `pip` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pip`命令安装 Pyflakes：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install pyflakes with the `easy_install` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`easy_install`命令安装 Pyflakes：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here are two ways of installing this package on Linux:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是在 Linux 上安装此包的两种方法：
- en: 'The Linux package name is `pyflakes` as well. For instance, on Red Hat do the
    following:'
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 包的名称也为`pyflakes`。 例如，在 RedHat 上执行以下操作：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On Debian/Ubuntu, the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian/Ubuntu 上，命令如下：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The Pyflakes homepage at [https://launchpad.net/pyflakes](https://launchpad.net/pyflakes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Pyflakes 主页位于[`launchpad.net/pyflakes`](https://launchpad.net/pyflakes)'
- en: Performing static analysis with Pyflakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pyflakes 执行静态分析
- en: 'We will perform static analysis of part of the NumPy codebase. To do this, we
    will check out the code using Git. We will then run static analysis on part of
    the code using `pyflakes`.'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对  NumPy 代码库的一部分执行静态分析。 为此，我们将使用 Git 签出代码。 然后，我们将使用`pyflakes`对部分代码进行静态分析。
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'To check out the NumPy code, we need Git. Installing Git is beyond the scope
    of this book (see [http://git-scm.com/book/en/v2/Getting-Started-Installing-Git](http://git-scm.com/book/en/v2/Getting-Started-Installing-Git)):'
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 NumPy 代码中，我们需要 Git。 安装 Git 超出了本书的范围（见[`git-scm.com/book/en/v2/Getting-Started-Installing-Git`](http://git-scm.com/book/en/v2/Getting-Started-Installing-Git)）：
- en: 'The Git command to retrieve the code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用 Git 命令检索代码如下：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, download a source archive from [https://github.com/numpy/numpy](https://github.com/numpy/numpy).'
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，从[`github.com/numpy/numpy`](https://github.com/numpy/numpy)下载源档案。
- en: 'The previous step creates a `numpy` directory with the entire NumPy code. Go
    to this directory, and within it, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一步使用完整的 NumPy 代码创建一个`numpy`目录。 转到此目录，并在其中运行以下命令：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This runs analysis on the code style and checks for PEP-8 violations in all
    the Python scripts within the current directory. You can also analyze a single
    file if you prefer.'
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对代码样式进行分析，并检查当前目录中所有  Python 脚本中的 PEP-8 违规情况。 如果愿意，还可以分析单个文件。
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'As you can see, it is pretty simple to analyze code style and look for PEP-8
    violations with Pyflakes. The other advantage is speed; however, the number of
    error types that Pyflakes reports is limited.'
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，分析代码样式并使用 Pyflakes 查找违反 PEP-8 的行为非常简单。 另一个优点是速度。 但是，Pyflakes 报告的错误类型的数量是有限的。
- en: 'Analyzing code with Pylint'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pylint 分析代码
- en: '**Pylint** is another open source static analyzer originally created by Logilab.
    Pylint is more complex than Pyflakes; it allows more customization and code checks.
    However, it is slower than Pyflakes. For more information, check out the manual
    at [http://www.logilab.org/card/pylint_manual](http://www.logilab.org/card/pylint_manual).'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pylint** 是另一个由 Logilab 创建的开源静态分析器。 Pylint 比 Pyflakes 更复杂； 它允许更多的自定义和代码检查。
    但是，它比 Pyflakes 慢。 有关更多信息，请参见手册，位于[`www.logilab.org/card/pylint_manual`](http://www.logilab.org/card/pylint_manual)。'
- en: 'In this recipe, we again download the NumPy code from the Git repository—this
    step has been omitted for brevity.'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本秘籍中，我们再次从 Git 仓库下载 NumPy 代码——为简便起见，省略了此步骤。
- en: 'Getting ready'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'You can install Pylint from the source distribution. However, there are many
    dependencies, so you are better off installing with either `easy_install` or `pip`.
    The installation commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从源代码发行版中安装 Pylint。 但是，有很多依赖项，因此最好使用`easy_install`或`pip`进行安装。 安装命令如下：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'We will again analyze from the top directory of the NumPy codebase. Notice
    that we get more output. In fact, Pylint prints so much text that most of it had
    to be omitted here:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次从 NumPy 代码库的顶部目录进行分析。 注意，我们得到了更多的输出。 实际上，Pylint 打印了太多文本，因此在这里大部分都必须省略：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'Pylint outputs raw text by default; but we can request HTML output if we want.
    The messages have the following format:'
  prefs: []
  type: TYPE_NORMAL
  zh: Pylint 默认输出原始文本； 但是我们可以根据需要请求 HTML 输出。 消息具有以下格式：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The message type can be one of the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 消息类型可以是以下之一：
- en: '`[R]`: This means that refactoring is recommended'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[R]`：这意味着建议进行重构'
- en: '`[C]`: This means that there was a code style violation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[C]`：这意味着存在违反代码风格的情况'
- en: '`[W]`: This is used for warnings about minor issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[W]`：用于警告小问题'
- en: '`[E]`: This is used for errors or potential bugs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[E]`：用于错误或潜在的错误'
- en: '`[F]`: This indicates that a fatal error occurred, blocking further analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[F]`：这表明发生致命错误，阻止了进一步的分析'
- en: 'See also'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'Performing static analysis with Pyflakes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Pyflakes 执行静态分析
- en: 'Performing static analysis with Pychecker'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pychecker 执行静态分析
- en: '**Pychecker** is an old, static analysis tool. It is not very actively developed,
    but it''s fast and good enough to mention here. The last version at the time of
    writing this book was 0.8.19, and it was last updated in 2011\. Pychecker tries
    to import each module and process it. It then searches for issues such as passing
    an incorrect number of parameters, incorrect format strings using non-existing
    methods, and other problems. In this recipe, we will again analyze code, but this
    time with Pychecker.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pychecker** 是一个古老的静态分析工具。 它不是十分活跃的开发工具，但它在此提到的速度又足够好。 在编写本书时，最新版本是 0.8.19，最近一次更新是在
    2011 年。Pychecker 尝试导入每个模块并对其进行处理。 然后，它搜索诸如传递不正确数量的参数，使用不存在的方法传递不正确的格式字符串以及其他问题之类的问题。
    在本秘籍中，我们将再次分析代码，但是这次使用 Pychecker。'
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Download the `tar.gz` from `Sourceforge` ([http://pychecker.sourceforge.net/](http://pychecker.sourceforge.net/)).
    Unpack the source archive and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Sourceforge`（[`pychecker.sourceforge.net`](http://pychecker.sourceforge.net/)）下载`tar.gz`。 解压缩源归档文件并运行以下命令：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Alternatively, install Pychecker using `pip`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用`pip`安装 Pychecker：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Analyze the code, just as in the previous recipes. The command we need is as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析代码，就像先前的秘籍一样。 我们需要的命令如下：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Testing code with docstrings'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文档字符串测试代码
- en: '**Doctests** are comment strings embedded in Python code that resemble interactive
    sessions. These strings can be used to test certain assumptions or just provide
    examples. We need to use the `doctest` module to run these tests.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档测试**是注释字符串，它们嵌入在类似交互式会话的 Python 代码中。 这些字符串可用于测试某些假设或仅提供示例。 我们需要使用`doctest`模块来运行这些测试。'
- en: 'Let''s write a simple example that is supposed to calculate the factorial but
    doesn''t cover all possible boundary conditions. In other words, some tests will
    fail.'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个简单的示例，该示例应该计算阶乘，但不涵盖所有可能的边界条件。 换句话说，某些测试将失败。
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Write the `docstring` with a test that will pass and another test that will
    fail. The `docstring` text should look like what you would normally see in a Python
    shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用将通过的测试和将失败的另一个测试编写`docstring`。 `docstring`文本应类似于在 Python 外壳中通常看到的文本：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Write the following NumPy code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下 NumPy 代码：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We want this code to fail on purpose—sometimes. It will create an array of sequential
    numbers, calculate the cumulative product of the array, and return the last element.'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这段代码有时会故意失败。 它将创建一个序列号数组，计算该数组的累积乘积，并返回最后一个元素。
- en: 'Use the `doctest` module to run the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`doctest`模块运行测试：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the complete test example code from the `docstringtest.py`
    file in this book''s code bundle:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本书代码包中`docstringtest.py`文件的完整测试示例代码：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can get verbose output with the `-v` option, as shown here:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`-v`选项获得详细的输出，如下所示：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'As you can see, we didn''t take into account zero and negative numbers. Actually,
    we got an `index out of bounds` error due to an empty array. This is easy to fix,
    of course, which we will do in the next tutorial.'
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们没有考虑零和负数。 实际上，由于数组为空，我们出现了`index out of bounds`错误。 当然，这很容易解决，我们将在下一个教程中进行。
- en: 'See also'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: 'The official `doctest` documentation at [http://docs.python.org/2/library/doctest.html](http://docs.python.org/2/library/doctest.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doctest`官方文档位于[`docs.python.org/2/library/doctest.html`](http://docs.python.org/2/library/doctest.html)'
- en: 'Writing unit tests'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试
- en: '**Test-driven development** (**TDD**) is the best thing that has happened to
    software development this century. One of the most important aspects of TDD is
    the almost manic focus on unit testing.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）是本世纪软件开发诞生的最好的事情。 TDD 的最重要方面之一是，几乎把重点放在单元测试上。'
- en: 'Note'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The TDD methodology uses the so-called **test-first approach**, where we first
    write a test that fails and then write the corresponding code to pass the test.
    The tests should document the developer''s intent, but on a lower level than functional
    design. A suite of tests increases confidence by decreasing the probability of
    regression and facilitates refactoring.'
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 方法使用所谓的**测试优先方法**，在此方法中，我们首先编写一个失败的测试，然后编写相应的代码以通过测试。 测试应记录开发人员的意图，但要比功能设计的水平低。
    一组测试通过降低回归概率来增加置信度，并促进重构。
- en: 'Unit tests are automated tests that test a small piece of code, usually a function
    or method. Python has the PyUnit API for unit testing. As NumPy users, we can
    make use of the convenience functions in the `numpy.testing` module as well. This
    module, as its name suggests, is dedicated to testing.'
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是自动测试，通常测试一小段代码，通常是一个函数或方法。 Python 具有用于单元测试的 PyUnit API。 作为 NumPy 的用户，我们也可以使用`numpy.testing`模块中的便捷函数。
    顾名思义，该模块专用于测试。
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Let''s write some code to test:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些代码进行测试：
- en: 'Start by writing the following `factorial()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先编写以下`factorial()`函数：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The code is the same as what we covered in the previous recipe, but we''ve added
    a few checks for boundary conditions.'
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码与前面的秘籍中的代码相同，但是我们添加了一些边界条件检查。
- en: 'Let''s write a class; this class will contain the unit tests. It extends the
    `TestCase` class from the `unittest` module, which is part of standard Python.
    We run tests by calling the `factorial()` function with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们写一个类； 此类将包含单元测试。 它从`unittest`模块扩展了`TestCase`类，是 Python 标准测试的一部分。 我们通过调用`factorial()`函数并运行以下代码来运行测试：
- en: 'a positive number—the happy path!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正数——幸福之路！
- en: 'boundary condition equal to `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界条件等于`0`
- en: 'negative numbers, which should result in an error:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负数，这将导致错误：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code for the `factorial()` function and the unit test in its entirety is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`factorial()`函数和整个单元测试的代码如下：'
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The negative numbers test fails, as you can see in the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 负数测试失败，如以下输出所示：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'We saw how to implement simple unit tests using the standard `unittest` Python
    module. We wrote a test class that extends the `TestCase` class from the `unittest`
    module. The following functions were used to perform various tests:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用标准`unittest` Python 模块实现简单的单元测试。 我们编写了一个测试类  ，该类从`unittest`模块扩展了`TestCase`类。
    以下函数用于执行各种测试：
- en: '| Functions | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.testing.assert_equal()` | Tests whether two NumPy arrays are equal
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.assert_equal()` | 测试两个 NumPy 数组是否相等 |'
- en: '| `unittest.assertEqual()` | Tests whether two values are equal |'
  prefs: []
  type: TYPE_TB
  zh: '| `unittest.assertEqual()` | 测试两个值是否相等 |'
- en: '| `unittest.assertRaises()` | Tests whether an exception is thrown |'
  prefs: []
  type: TYPE_TB
  zh: '| `unittest.assertRaises()` | 测试是否引发异常 |'
- en: 'The `testing` NumPy package has a number of test functions we should know about,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`testing` NumPy 包具有许多我们应该了解的测试函数，如下所示：'
- en: '| Funcions | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assert_almost_equal()` | This function raises an exception if two numbers
    are not equal up to a specified precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_almost_equal()` | 如果两个数字不等于指定的精度，则此函数引发异常 |'
- en: '| `assert_approx_equal()` | This function raises an exception if two numbers
    are not equal up to a certain significance |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_approx_equal()` | 如果两个数字在一定意义上不相等，则此函数引发异常 |'
- en: '| `assert_array_almost_equal()` | This function raises an exception if two
    arrays are not equal up to a specified amount of precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_almost_equal()` | 如果两个数组不等于指定的精度，此函数会引发异常 |'
- en: '| `assert_array_equal()` | This function raises an exception if two arrays
    are not equal |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_equal()` | 如果两个数组不相等，则此函数引发异常 |'
- en: '| `assert_array_less()` | This function raises an exception if two arrays do
    not have the same shape, and the elements of the first array are strictly less
    than the elements of the second array |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_less()` | 如果两个数组的形状不同，并且此函数引发异常，则第一个数组的元素严格小于第二个数组的元素 |'
- en: '| `assert_raises()` | This function fails if a specified exception is not raised
    by a callable invoked with the defined arguments |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_raises()` | 如果使用定义的参数调用的可调用对象未引发指定的异常，则此函数将失败 |'
- en: '| `assert_warns()` | This function fails if a specified warning is not thrown
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_warns()` | 如果未抛出指定的警告，则此函数失败 |'
- en: '| `assert_string_equal()` | This function asserts that two strings are equal
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_string_equal()` | 此函数断言两个字符串相等 |'
- en: 'Testing code with mocks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模拟测试代码
- en: '**Mocks** are objects created as substitutes for real objects with the purpose
    of testing part of the behavior of the real objects. If you have seen the movie
    Body Snatchers, you might already have an understanding of the basic idea. Generally
    speaking, mocking is useful only when the real objects under test are expensive
    to create, such as a database connection, or when testing could have undesirable
    side effects; for instance, we might not want to write to the file system or a
    database.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟**是用来代替真实对象的对象，目的是测试真实对象的部分行为。 如果您看过电影《身体抢夺者》，您可能已经对基本概念有所了解。 一般来说，  仅在被测试的真实对象的创建成本很高（例如数据库连接）或测试可能产生不良副作用时才有用。
    例如，我们可能不想写入文件系统或数据库。'
- en: 'In this recipe, we will test a nuclear reactor—not a real one, of course! This
    nuclear reactor class performs a factorial calculation that could, in theory,
    cause a chain reaction with a nuclear disaster as consequence. We will mock the
    factorial computation with a mock, using the `mock` package.'
  prefs: []
  type: TYPE_NORMAL
  zh: 在此秘籍中，我们将测试一个核反应堆，当然不是真正的反应堆！ 此类核反应堆执行阶乘计算，从理论上讲，它可能导致连锁反应，进而导致核灾难。 我们将使用`mock`包通过模拟来模拟阶乘计算。
- en: 'How to do it...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'First, we will install the `mock` package; after that, we will create a mock
    and test a piece of code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将安装`mock`包； 之后，我们将创建一个模拟并测试一段代码：
- en: 'To install the `mock` package, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装`mock`包，请执行以下命令：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The nuclear reactor class has a `do_work()` method, which calls a dangerous
    `factorial()` method, which we want to mock. Create a mock as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 核反应堆类有一个`do_work()`方法，该方法调用了我们要模拟的危险的`factorial()`方法。 创建一个模拟，如下所示：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This ensures that the mock returns a value of `6`.
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以确保模拟返回值`6`。
- en: 'We can check the behavior of a mock and, from that, the behavior of the real
    object under test, in several ways. For instance, assert that the potentially
    explosive `factorial()` method was called with the correct arguments, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过多种方式检查模拟的行为，然后从中检查真实对象的行为。 例如，断言使用正确的参数调用了潜在爆炸性的`factorial()`方法，如下所示：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The complete test code with mocks is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 带有模拟的完整测试代码如下：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We pass a string to the `factorial()` method to show that the code with mock
    does not exercise the real code. This unit test works in the same way as the unit
    test in the previous recipe. The second test here does not test anything. The
    purpose of the second test is just to demonstrate what happens if we exercise
    the real code without mocks.'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个字符串传递给`factorial()`方法，以显示带有模拟的代码不会执行实际的代码。 该单元测试的工作方式与上一秘籍中的单元测试相同。 这里的第二项测试不测试任何内容。
    第二个测试的目的只是演示，如果我们在没有模拟的情况下执行真实代码，会发生什么。
- en: 'The output of the tests is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的输出如下：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'How it works...'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'Mocks do not have any behavior. They are like alien clones pretending to be
    real people; only dumber than aliens—an alien clone won''t be able to tell you
    the birthday of the real person it is replacing. We need to set them up to respond
    in an appropriate manner. For instance, the mock returned `6` in this example.
    We can record what is happening to the mock, how many times it is being called,
    and with which arguments.'
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟没有任何行为。 他们就像外星人的克隆人，假装是真实的人。 只能比外星人傻—外星人克隆人无法告诉您被替换的真实人物的生日。 我们需要设置它们以适当的方式进行响应。
    例如，在此示例中，模拟返回`6` 。 我们可以记录模拟发生了什么，被调用了多少次以及使用了哪些参数。
- en: 'See also'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The mock package homepage at [http://pypi.python.org/pypi/mock](http://pypi.python.org/pypi/mock)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mock 包主页位于[`pypi.python.org/pypi/mock`](http://pypi.python.org/pypi/mock)'
- en: 'Testing the BDD way'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以 BDD 方式来测试
- en: '**BDD** (**Behavior-driven Development**) is another hot acronym that you might
    have come across. In BDD, we start by defining (in English) the expected behavior
    of the system under test according to certain conventions and rules. In this recipe,
    we will see an example of those conventions.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**BDD**（**行为驱动开发**）是您可能遇到的另一个热门缩写。 在 BDD 中，我们首先根据某些约定和规则定义（英语）被测系统的预期行为。 在本秘籍中，我们将看到这些约定的示例。'
- en: Installing Pyflakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ''
- en: The idea behind this approach is that we can have people who may not be able
    to program, or write a major part of the tests. A feature written by these people
    takes the form of a sentence consisting of several steps. Each step is more or
    less a unit test that we can write, for instance, using NumPy. There are many
    Python BDD frameworks. In this recipe, we use **Lettuce** to test the factorial
    function.
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法背后的想法是，我们可以让可能无法编程或编写测试大部分内容的人员参加。 这些人编写的功能采用句子的形式，包括多个步骤。 每个步骤或多或少都是我们可以编写的单元测试，例如，使用
    NumPy。 有许多 Python BDD 框架。 在本秘籍中，我们使用 **Lettuce** 来测试阶乘函数。
- en: Unused imports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ''
- en: Unused variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ''
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'In this section, you will learn how to install Lettuce, set up the tests, and
    write the specifications for the tests:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何安装 Lettuce，设置测试以及编写测试规范：
- en: 'To install Lettuce, run either of the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 Lettuce，请运行以下命令之一：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Lettuce requires a special directory structure for the tests. In the `tests`
    directory, we will have a directory called `features` containing the `factorial.feature`
    file, along with the functional descriptions and test code in the `steps.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lettuce 需要特殊的目录结构进行测试。 在`tests`目录中，我们将有一个名为`features`的目录，其中包含`factorial.feature`文件，以及`steps.py`文件中的功能说明和测试代码：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Coming up with business requirements is a hard job. Writing it all down in
    such a way that it is easy to test is even harder. Luckily, the requirements for
    these recipes are pretty simple—we just write down different input values and
    the expected output. We have different scenarios with the `Given`, `When`, and
    `Then` sections, which correspond to different test steps. Define the following
    three scenarios for the factorial feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提出业务需求是一项艰巨的工作。 以易于测试的方式将其全部写下来更加困难。 幸运的是，这些秘籍的要求非常简单——我们只需写下不同的输入值和预期的输出。 我们在`Given`，`When`和`Then`部分中有不同的方案，它们对应于不同的测试步骤。
    为阶乘函数定义以下三种方案：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will define methods that correspond to the steps of our scenario. Pay extra
    attention to the text used to annotate the methods. It matches the text in the
    business scenarios file, and we use regular expressions to get the input parameters.
    In the first two scenarios, we match numbers, and in the last, we match any text.
    The `fromstring()` NumPy function is used to create a string from a NumPy array,
    with an integer data type and comma separator in the string. The following code
    tests our scenarios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义与场景步骤相对应的方法。 要特别注意用于注释方法的文本。 它与业务场景文件中的文本匹配，并且我们使用正则表达式获取输入参数。 在前两个方案中，我们匹配数字，在最后一个方案中，我们匹配任何文本。
    `fromstring()` NumPy 函数用于从 NumPy 数组创建字符串，字符串中使用整数数据类型和逗号分隔符。 以下代码测试了我们的方案：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To run the tests, go to the `tests` directory and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行测试，请转到`tests`目录，然后键入以下命令：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: We defined a feature with three scenarios and corresponding steps. We used NumPy's
    testing functions to test the different steps and the `fromstring()` function
    to create a NumPy array from the specifications text.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了具有三个方案和相应步骤的函数。 我们使用 NumPy 的测试函数来测试不同步骤，并使用`fromstring()`函数从规格文本创建 NumPy
    数组。
- en: 'See also'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The Lettuce documentation at [http://lettuce.it/](http://lettuce.it/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lettuce 文档位于[`lettuce.it`](http://lettuce.it/)'
