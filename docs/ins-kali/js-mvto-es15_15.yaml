- en: Chapter 3. Creational Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建模式
- en: In the last chapter we took a long look at how to fashion a class. In this chapter
    we'll look at how to create instances of classes. On the surface it seems like
    a simple concern but how we create instances of a class can be of great importance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们详细讨论了如何设计一个类。在本章中，我们将讨论如何创建类的实例。表面上看起来似乎是一个简单的问题，但我们如何创建类的实例可能非常重要。
- en: We take great pains in creating our code so that it be as decoupled as possible.
    Ensuring that classes have minimal dependence on other classes is the key to building
    a system that can change fluently with the changing needs of those using the software.
    Allowing classes to be too closely related means that changes ripple through them
    like, well, ripples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常费心地创建我们的代码，使其尽可能解耦。确保类对其他类的依赖最小是构建一个可以随着软件使用者需求的变化而流畅变化的系统的关键。允许类之间关系过于紧密意味着变化会像涟漪一样在它们之间传播。
- en: 'One ripple isn''t a huge problem but, as you throw more and more changes into
    the mix, the ripples add up and create interference patterns. Soon the once placid
    surface is an unrecognizable mess of additive and destructive nodes. This same
    problem occurs in our applications: the changes magnify and interact in unexpected
    ways. One place where we tend to forget about coupling is in the creation of objects:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个涟漪并不是一个巨大的问题，但是当你将越来越多的变化投入到其中时，涟漪会累积并产生干涉模式。很快，曾经平静的表面就变成了一团无法辨认的加法和破坏性节点的混乱。我们的应用程序中也会出现同样的问题：变化会放大并以意想不到的方式相互作用。我们经常忽视耦合的一个地方就是在对象的创建中：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see in this class that the Ruler''s house is strongly coupled to the
    class `Targaryen`. If this were ever to change then this tight coupling would
    have to change in a great number of places. This chapter discusses a number of
    patterns, which were originally presented in the gang of four book, *Design Patterns:
    Elements of Reusable Object-Oriented Software*. The goal of these patterns is
    to improve the degree of coupling in applications and increase the opportunities
    for code reuse. The patterns are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在这个类中，统治者的家族与`Targaryen`类紧密耦合。如果这种情况发生变化，那么这种紧密耦合将不得不在许多地方进行更改。本章讨论了一些模式，这些模式最初是在《设计模式：可复用面向对象软件的元素》一书中提出的。这些模式的目标是改善应用程序中的耦合程度，并增加代码重用的机会。这些模式如下：
- en: Abstract factory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象工厂
- en: Builder
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器
- en: Factory method
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂方法
- en: Singleton
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例
- en: Prototype
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型
- en: Of course not all of these are applicable to JavaScript, but we'll see all about
    that as we work through the creational patterns.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并非所有这些模式都适用于JavaScript，但随着我们逐步了解创建模式，我们将了解所有这些内容。
- en: Abstract factory
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象工厂
- en: The first pattern presented here is a method for creating kits of objects without
    knowing the concrete types of the objects. Let's continue with the system presented
    in the preceding section for ruling a kingdom.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍的第一个模式是一种在不知道对象的具体类型的情况下创建对象组的方法。让我们继续使用在前一节中介绍的统治王国的系统。
- en: For the kingdom in question the ruling house changes with some degree of frequency.
    In all likelihood there is a degree of battling and fighting during the change
    of house but we'll ignore that for the moment. Each house will rule the kingdom
    differently. Some value peace and tranquility and rule as benevolent leaders,
    while others rule with an iron fist. The rule of a kingdom is too large for a
    single individual so the king defers some of his decisions to a second in command
    known as the hand of the king. The king is also advised on matters by a council,
    which consists of some of the more savvy lords and ladies of the land.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所讨论的王国，统治家族的更替频率相当高。很可能在更换家族时会有一定程度的战斗和斗争，但我们暂且不考虑这一点。每个家族都会以不同的方式统治王国。一些家族重视和平与宁静，以仁慈的领导者统治，而另一些则以铁腕统治。一个王国的统治对于一个人来说太大了，所以国王会把一些决定交给一个叫做“国王之手”的副手。国王也会在事务上得到一些精明的领主和女士们组成的议会的建议。
- en: 'A diagram of the classes in our description look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述的类的图表如下：
- en: '![Abstract factory](img/00039.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![抽象工厂](img/00039.jpeg)'
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Unified Modeling Language** (**UML**) is a standardized language developed
    by the Object Management Group, which describes computer systems. There is vocabulary
    in the language for creating user interaction diagrams, sequence diagrams, and
    state machines, amongst others. For the purposes of this module we''re most interested
    in class diagrams, which describe the relationship between a set of classes.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**统一建模语言**（**UML**）是由对象管理组开发的一种标准化语言，用于描述计算机系统。该语言中有用于创建用户交互图、序列图和状态机等的词汇。在本模块的目的上，我们最感兴趣的是类图，它描述了一组类之间的关系。'
- en: The entire UML class diagram vocabulary is extensive and is beyond the scope
    of this module. However, the Wikipedia article available at [https://en.wikipedia.org/wiki/Class_diagram](https://en.wikipedia.org/wiki/Class_diagram)
    acts as a great introduction as does Derek Banas' excellent video tutorial on
    class diagrams available at [https://www.youtube.com/watch?v=3cmzqZzwNDM](https://www.youtube.com/watch?v=3cmzqZzwNDM).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 整个UML类图词汇量很大，超出了本模块的范围。然而，维基百科上的文章[https://en.wikipedia.org/wiki/Class_diagram](https://en.wikipedia.org/wiki/Class_diagram)以及Derek
    Banas的优秀视频教程[https://www.youtube.com/watch?v=3cmzqZzwNDM](https://www.youtube.com/watch?v=3cmzqZzwNDM)都是很好的介绍。
- en: An issue is that, with the ruling family, and even the member of the ruling
    family on the throne, changing so frequently, coupling to a concrete family such
    as Targaryen or Lannister makes our application brittle. Brittle applications
    do not fare well in an ever-changing world.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题是，由于统治家族，甚至坐在王位上的家族成员经常更换，与诸如Targaryen或Lannister之类的具体家族耦合会使我们的应用程序变得脆弱。脆弱的应用程序在不断变化的世界中表现不佳。
- en: An approach to fixing this is to make use of the abstract factory pattern. The
    abstract factory declares an interface for creating each of the various classes
    related to the ruling family.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是利用抽象工厂模式。抽象工厂声明了创建与统治家族相关的各种类的接口。
- en: 'The class diagram of this pattern is rather daunting:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的类图相当令人生畏：
- en: '![Abstract factory](img/00040.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![抽象工厂](img/00040.jpeg)'
- en: The abstract factory class may have multiple implementations for each of the
    various ruling families. These are known as concrete factories and each of them
    will implement the interface provided by the abstract factory. The concrete factories,
    in return, will return concrete implementations of the various ruling classes.
    These concrete classes are known as products.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象工厂类可以有多个实现，每个实现与各种统治家族相关。这些被称为具体工厂，它们将实现抽象工厂提供的接口。具体工厂将返回各种统治类的具体实现。这些具体类被称为产品。
- en: Let's start by looking at the code for the interface for the abstract factory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下抽象工厂的接口代码。
- en: 'No code? Well, actually that is exactly the case. JavaScript''s dynamic nature
    precludes the need for interfaces to describe classes. Instead of having interfaces
    we''ll just create the classes right off the bat:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 没有代码？实际上确实如此。JavaScript的动态特性消除了描述类所需的接口的需要。我们不需要接口，我们将直接创建类：
- en: '![Abstract factory](img/00041.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![抽象工厂](img/00041.jpeg)'
- en: Instead of interfaces, JavaScript trusts that the class you provide implements
    all the appropriate methods. At runtime the interpreter will attempt to call the
    method you request and, if it is found, call it. The interpreter simply assumes
    that if your class implements the method then it is that class. This is known
    as **duck typing**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript相信你提供的类实现了所有适当的方法，而不是接口。在运行时，解释器将尝试调用您请求的方法，并且如果找到，就会调用它。解释器只是假设如果您的类实现了该方法，那么它就是那个类。这就是所谓的**鸭子类型**。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Duck typing**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**鸭子类型**'
- en: 'The name duck typing comes from a 2000 post to the *comp.lang.python* news
    group by Alex Martelli in which he wrote:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 鸭子类型这个名字来源于Alex Martelli在2000年在*comp.lang.python*新闻组中的一篇帖子中提出的：
- en: '*In other words, don''t check whether it IS-a duck: check whether it QUACKS-like-a
    duck, WALKS-like-a duck, and so on, depending on exactly what subset of duck-like
    behavior you need to play your language-games with.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*换句话说，不要检查它是否是一只鸭子：检查它是否像鸭子一样嘎嘎叫，像鸭子一样走路，等等，具体取决于你需要用来玩语言游戏的鸭子行为子集。*'
- en: I enjoy the possibility that Martelli took the term from the witch-hunt sketch
    from *Monty Python and the Holy Grail*. Although I can find no evidence of that,
    I think it quite likely as the Python programming language takes its name from
    Monty Python.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢Martelli可能是从*Monty Python and the Holy Grail*的巫师狩猎片段中取得这个术语的可能性。虽然我找不到证据，但我认为这很可能，因为Python编程语言的名字就来自Monty
    Python。
- en: 'Duck typing is a powerful tool in dynamic languages allowing for much less
    overhead in implementing a class hierarchy. It does, however, introduce some uncertainty.
    If two classes implement an identically named method which have radically different
    meanings then there is no way to know if the one being called is the correct one.
    Consider for example this code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 鸭子类型是动态语言中的一种强大工具，可以大大减少实现类层次结构的开销。然而，它确实引入了一些不确定性。如果两个类实现了一个名称相同但含义完全不同的方法，那么就无法知道调用的是正确的方法。例如，考虑以下代码：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both classes have a `punch()` method but they clearly have different meanings.
    The JavaScript interpreter has no idea that they are different classes and will
    happily call punch on either class, even when one doesn't make sense.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个类都有一个`punch()`方法，但显然含义不同。JavaScript解释器不知道它们是不同的类，并且会愉快地在任何一个类上调用`punch`，即使其中一个没有意义。
- en: Some dynamic languages support a generic method, which is called whenever an
    undefined method is called. Ruby, for instance, has `missing_method`, which has
    proven to be very useful in a number of scenarios. As of writing, there is currently
    no support for `missing_method` in JavaScript. However, ECMAScript 2016, the follow
    up to ECMAScript 2015, defines a new construct called `Proxy` which will support
    dynamically wrapping objects, with this one could implement an equivalent of `missing_method`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些动态语言支持一种通用方法，当调用未定义的方法时会被调用。例如，Ruby有`missing_method`，在许多场景中被证明非常有用。截至目前，JavaScript目前不支持`missing_method`。然而，ECMAScript
    2016，即ECMAScript 2015的后续版本，定义了一个称为`Proxy`的新构造，它将支持动态包装对象，借此可以实现`missing_method`的等效功能。
- en: Implementation
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: 'To demonstrate an implementation of the Abstract Factory the first thing we''ll
    need is an implementation of the `King` class. This code provides that implementation:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示抽象工厂的实现，我们首先需要一个`King`类的实现。以下代码提供了该实现：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This code does not include the module structure suggested in [Chapter 2](part0086_split_000.html#2I0GC1-015e68c68a464f18a9559f448be84435
    "Chapter 2. Organizing Code"), *Organizing Code*. Including the boiler-plate module
    code in every example is tedious and you're all smart cookies so you know to put
    this in modules if you're going to actually use it. The fully modularized code
    is available in the distributed source code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码不包括[第2章](part0086_split_000.html#2I0GC1-015e68c68a464f18a9559f448be84435
    "第2章。组织代码")中建议的模块结构。在每个示例中包含模块代码是很烦人的，而且你们都很聪明，知道如果要实际使用它，就要把它放在模块中。完全模块化的代码可在分发的源代码中找到。
- en: 'This is just a regular concrete class and could really contain any implementation
    details. We''ll also need an implementation of the `HandOfTheKing` class which
    is equally unexciting:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个普通的具体类，实际上可以包含任何实现细节。我们还需要一个`HandOfTheKing`类的实现，同样也不那么令人兴奋：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The concrete factory method looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 具体工厂方法如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code simply instantiates new instances of each of the required classes
    and returns them. An alternative implementation for a different ruling family
    would follow the same general form and might look like:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只是实例化了所需类的新实例并返回它们。对于不同的统治家族，另一种实现可能会遵循相同的一般形式，看起来可能是这样的：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The implementation of the Abstract Factory in JavaScript is much easier than
    in other languages. However the penalty for this is that you lose the compiler
    checks, which force a full implementation of either the factory or the products.
    As we proceed through the rest of the patterns, you'll notice that this is a common
    theme. Patterns that have a great deal of plumbing in statically typed languages
    are far simpler but create a greater risk of runtime failure. Appropriate unit
    tests or a JavaScript compiler can ameliorate this situation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中实现抽象工厂比其他语言要简单得多。然而，这样做的代价是失去了编译器检查，它强制要求对工厂或产品进行完整实现。当我们继续学习其他模式时，你会注意到这是一个常见的主题。在静态类型语言中有很多管道的模式要简单得多，但会增加运行时失败的风险。适当的单元测试或JavaScript编译器可以缓解这种情况。
- en: 'To make use of the Abstract Factory we''ll first need a class that requires
    the use of some ruling family:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用抽象工厂，我们首先需要一个需要使用某个统治家族的类：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now call this `CourtSession` class and inject different functionality
    depending on which factory we pass in:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以调用这个`CourtSession`类，并根据传入的工厂注入不同的功能：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Despite the differences between a static language and JavaScript, this pattern
    remains applicable and useful in JavaScript applications. Creating a kit of objects,
    which work together, is useful in a number of situations; any time a group of
    objects need to collaborate to provide functionality but may need to be replaced
    wholesale. It may also be a useful pattern when attempting to ensure that a set
    of objects be used together without substitutions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管静态语言和JavaScript之间存在差异，但这种模式在JavaScript应用程序中仍然适用且有用。创建一组可以共同工作的对象在许多情况下都很有用；每当一组对象需要协作提供功能，但可能需要被整体替换时。在试图确保一组对象一起使用而不被替换时，这也可能是一种有用的模式。
- en: Builder
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建造者
- en: In our fictional world we sometimes have some rather complicated classes, which
    need to be constructed. The classes contain different implementations of an interface
    depending on how they are constructed. In order to simplify the building of these
    classes and encapsulate the knowledge about building the class away from the consumers,
    a builder may be used. Multiple concrete builders reduce the complexity of the
    constructor in the implementation. When new builders are required, a constructor
    does not need to be added, a new builder just needs to be plugged in.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的虚构世界中，有时我们有一些相当复杂的类需要构建。这些类包含了根据它们的构建方式而不同的接口实现。为了简化这些类的构建并将构建类的知识封装到消费者之外，可以使用建造者。多个具体建造者降低了实现中构造函数的复杂性。当需要新的建造者时，不需要添加构造函数，只需要插入一个新的建造者。
- en: 'Tournaments are an example of a complicated class. Each tournament has a complicated
    setup involving the events, the attendees, and the prizes. Much of the setup for
    these tournaments is similar: each one has a joust, archery, and a melee. Creating
    a tournament from multiple places in the code means that the responsibility for
    knowing how to construct a tournament is distributed. If there is a need to change
    the initiation code then it must be done in a lot of different places.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 锦标赛是一个复杂的类的例子。每个锦标赛都有一个涉及事件、参与者和奖品的复杂设置。这些锦标赛的大部分设置是相似的：每个锦标赛都有一场骑士比武、射箭和混战。在代码中的多个位置创建锦标赛意味着知道如何构建锦标赛的责任被分散了。如果需要更改初始化代码，则必须在许多不同的地方进行更改。
- en: 'Employing a builder pattern avoids this issue by centralizing the logic necessary
    to build the object. Different concrete builders can be plugged into the builder
    to construct different complicated objects. The relationship between the various
    classes in the builder pattern is shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用建造者模式可以避免这个问题，因为它集中了构建对象所需的逻辑。不同的具体建造者可以插入到建造者中，以构建不同的复杂对象。建造者模式中各个类之间的关系如下所示：
- en: '![Builder](img/00042.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Builder](img/00042.jpeg)'
- en: Implementation
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: 'Let''s drop in and look at some of the code. To start with, we''ll create a
    number of utility classes, which will represent the parts of a tournament as shown
    in the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些代码。首先，我们将创建一些实用类，它们将代表锦标赛的各个部分，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The tournament itself is a very simple class as we don''t need to assign any
    of the public properties explicitly:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 锦标赛本身是一个非常简单的类，因为我们不需要显式地分配任何公共属性：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We''ll implement two builders which create different tournaments. This can
    be seen in the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现两个创建不同锦标赛的建造者。以下代码中可以看到这一点：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally the director, or as we''re calling it `TournamentBuilder`, simply takes
    a builder and executes it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，导演，或者我们称之为`TournamentBuilder`，只需接受一个建造者并执行它：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Again you'll see that the JavaScript implementation is far simpler than the
    traditional implementation due to there being no need for interfaces.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你会看到JavaScript的实现比传统实现要简单得多，因为不需要接口。
- en: Builders need not return a fully realized object. This means that you can create
    a builder which partially hydrates an object then allows the object to be passed
    on to another builder for it to finish. A good real world analogy might be the
    manufacturing process for a car. Each station along the assembly line builds just
    a part of the car before passing it onto the next station to build another part.
    This approach allows for dividing the work of building an object amongst several
    classes with limited responsibility. In our example above we could have a builder
    that is responsible for populating the events and another that is responsible
    for populating the attendees.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 建造者不需要返回一个完全实现的对象。这意味着您可以创建一个部分填充对象的构建者，然后允许对象传递给另一个构建者来完成。一个很好的现实世界类比可能是汽车的制造过程。在装配线上的每个工位都会在将汽车的一部分传递给下一个工位之前建造汽车的一部分。这种方法允许将构建对象的工作分配给几个具有有限责任的类。在我们上面的例子中，我们可以有一个负责填充事件的构建者，另一个负责填充参与者的构建者。
- en: Does the builder pattern still make sense in view of JavaScript's prototype
    extension model? I believe so. There are still cases where a complicated object
    needs to be created according to different approaches.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript的原型扩展模型中，建造者模式是否仍然有意义呢？我认为是的。仍然存在需要根据不同的方法创建复杂对象的情况。
- en: Factory method
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工厂方法
- en: 'We''ve already looked at the Abstract Factory and a builder. The Abstract Factory
    builds a family of related classes and the builder creates complicated objects
    using different strategies. The factory method pattern allows a class to request
    a new instance of an interface without the class making decisions about which
    implementation of the interface to use. The factory may use some strategy to select
    which implementation to return:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过抽象工厂和建造者。抽象工厂构建一组相关的类，而建造者使用不同的策略创建复杂对象。工厂方法模式允许类请求接口的新实例，而不是类决定使用接口的哪种实现。工厂可以使用某种策略来选择要返回的实现：
- en: '![Factory method](img/00043.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![工厂方法](img/00043.jpeg)'
- en: Sometimes this strategy is simply to take a string parameter or to examine some
    global setting to act as a switch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这种策略只是接受一个字符串参数或检查一些全局设置以充当开关。
- en: Implementation
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施
- en: In our example world of Westeros there are plenty of times when we would like
    to defer the choice of implementation to a factory. Just like the real world,
    Westeros has a vibrant religious culture with dozens of competing religions worshiping
    a wide variety of gods. When praying in each religion, different rules must be
    followed. Some religions demand sacrifices while others demand only that a gift
    be given. The prayer class doesn't want to know about all the different religions
    and how to construct them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子世界Westeros中，有很多时候我们希望将实现的选择推迟到工厂。就像现实世界一样，Westeros拥有丰富多彩的宗教文化，有数十种宗教崇拜各种各样的神祗。在每种宗教中祈祷时，必须遵循不同的规则。有些宗教要求献祭，而其他宗教只要求给予礼物。祈祷类不想知道所有不同的宗教以及如何构建它们。
- en: 'Let''s start with creating a number of different gods to which prayers can
    be offered. This code creates three gods including a default god to whom prayers
    fall if no other god is specified:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一些可以供祈祷的不同神。这段代码创建了三个神，包括一个默认的神，如果没有指定其他神，祈祷就会落在这个神身上。
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I''ve avoided any sort of implementation details for each god. You may imagine
    whatever traditions you want to populate the `prayTo` methods. There is also no
    need to ensure that each of the gods implements an `IGod` interface. Next we''ll
    need a factory, which is responsible for constructing each of the different gods:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我避免了每个神的任何实现细节。您可以想象任何您想要填充`prayTo`方法的传统。也没有必要确保每个神都实现了`IGod`接口。接下来，我们需要一个工厂，负责构建不同的神：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can see that in this example we''re taking in a simple string to decide
    how to create a god. It could be done via a global or via a more complicated object.
    In some polytheistic religions in Westeros, gods have defined roles as gods of
    courage, beauty, or some other aspect. The god to which one must pray is determined
    by not just the religion but the purpose of the prayer. We can represent this
    with a `GodDeterminant` class as is shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，在这个例子中，我们接受一个简单的字符串来决定如何创建一个神。这可以通过全局变量或更复杂的对象来完成。在Westeros的一些多神教中，神有明确定义的角色，如勇气之神、美丽之神或其他方面的神。必须祈祷的神不仅由宗教决定，还由祈祷的目的决定。我们可以用`GodDeterminant`类来表示，如下所示：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The factory would be updated to take this class instead of the simple string.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂将被更新以接受这个类，而不是简单的字符串。
- en: 'Finally, the last step is to see how this factory would be used. It is quite
    simple, we just need to pass in a string that denotes which religion we wish to
    observe and the factory will construct the correct god and return it. This code
    demonstrates how to call the factory:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一步是看看这个工厂将如何使用。很简单，我们只需要传入一个表示我们希望遵守的宗教的字符串，工厂将构建正确的神并返回它。这段代码演示了如何调用工厂：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once again there is certainly need for a pattern such as this in JavaScript.
    There are plenty of times where separating the instantiation from the use is useful.
    Testing the instantiation is also very simple thanks to the separation of concerns
    and the ability to inject a fake factory to allow testing of `Prayer` is also
    easy.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，这样的模式当然是有必要的。有很多时候，将实例化与使用分开是有用的。由于关注点的分离和注入一个虚假工厂以允许测试`Prayer`也很容易，测试实例化也很简单。
- en: Continuing the trend of creating simpler patterns without interfaces, we can
    ignore the interface portion of the pattern and work directly with the types,
    thanks to duck typing.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续创建简单模式而不使用接口的趋势，我们可以忽略模式的接口部分，直接使用类型，这要归功于鸭子类型。
- en: 'Factory Method is a very useful pattern: it allows classes to defer the selection
    of the implementation of an instantiation to another class. This pattern is very
    useful when there are multiple similar implementations such as the strategy pattern
    (see [Chapter 5](part0111_split_000.html#39REE1-015e68c68a464f18a9559f448be84435
    "Chapter 5. Behavioral Patterns"), *Behavioral Patterns*) and is commonly used
    in conjunction with the Abstract Factory pattern. The Factory Method is used to
    build the concrete objects within a concrete implementation of the abstract factory.
    An Abstract Factory pattern may contain a number of Factory Methods. Factory Method
    is certainly a pattern that remains applicable in the land of JavaScript.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂方法是一个非常有用的模式：它允许类将实例化的选择推迟到另一个类。当存在多个类似的实现时，这种模式非常有用，比如策略模式（见[第5章](part0111_split_000.html#39REE1-015e68c68a464f18a9559f448be84435
    "第5章。行为模式")，*行为模式*），并且通常与抽象工厂模式一起使用。工厂方法用于在抽象工厂的具体实现中构建具体对象。抽象工厂模式可能包含多个工厂方法。工厂方法在JavaScript领域仍然适用。
- en: Singleton
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单例
- en: The Singleton pattern is perhaps the most overused pattern. It is also a pattern
    that has fallen out of favor in recent years. To see why people are starting to
    advise against using Singleton let's take a look at how the pattern works.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式可能是最常用的模式。它也是近年来不受青睐的模式。为了了解为什么人们开始建议不要使用单例模式，让我们看看这个模式是如何工作的。
- en: Singleton is used when a global variable is desirable, but Singleton provides
    protection against accidentally creating multiple copies of complex objects. It
    also allows for the deferral of object instantiation until the first use.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式用于当需要全局变量时，但单例模式可以防止意外创建复杂对象的多个副本。它还允许推迟对象实例化直到第一次使用。
- en: 'The UML diagram for Singleton looks like the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 单例的UML图如下所示：
- en: '![Singleton](img/00044.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Singleton](img/00044.jpeg)'
- en: It is clearly a very simple pattern. The Singleton acts as a wrapper around
    an instance of the class and the singleton itself lives as a global variable.
    When accessing the instance we simply ask the Singleton for the current instance
    of the wrapped class. If the class does not yet exist within the Singleton it
    is common to create a new instance at that time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然是一个非常简单的模式。单例充当类实例的包装器，单例本身作为全局变量存在。当访问实例时，我们只需向单例请求包装类的当前实例。如果类在单例中尚不存在，通常会在那时创建一个新实例。
- en: Implementation
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: Within our ongoing example in the world of Westeros, we need to find a case
    where there can only ever be one of something. Unfortunately, it is a land with
    frequent conflicts and rivalries, and so my first idea of using the king as the
    Singleton is simply not going to fly. This split also means that we cannot make
    use of any of the other obvious candidates (capital city, queen, general, and
    so on). However, in the far north of Westeros there is a giant wall constructed
    to keep an ancient enemy at bay. There is only one of these walls and it should
    pose no issue having it in the global scope.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在维斯特洛大陆的持续示例中，我们需要找到一个只能有一个东西的情况。不幸的是，这是一个经常发生冲突和对抗的土地，所以我最初想到的使用国王作为单例的想法根本行不通。这也意味着我们不能利用其他明显的候选人（首都、王后、将军等）。然而，在维斯特洛大陆的最北端，有一堵巨大的墙，用来阻挡一位古老的敌人。这堵墙只有一道，将其放在全局范围内应该没有问题。
- en: 'Let''s go ahead and create a singleton in JavaScript:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在JavaScript中创建一个单例：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The code creates a lightweight representation of the Wall. The Singleton is
    demonstrated in the two highlighted sections. In a language like C# or Java we
    would normally just set the constructor to be private so that it could only be
    called by the static method `getInstance`. However, we don''t have that ability
    in JavaScript: constructors cannot be private. Thus we do the best we can and
    return the current instance from the constructor. This may appear strange but
    in the way we''ve constructed our classes the constructor is no different from
    any other method so it is possible to return something from it.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码创建了Wall的轻量级表示。单例模式在两个突出显示的部分中得到了展示。在像C#或Java这样的语言中，我们通常会将构造函数设置为私有，以便只能通过静态方法`getInstance`来调用它。然而，在JavaScript中我们没有这个能力：构造函数不能是私有的。因此，我们尽力而为，从构造函数中返回当前实例。这可能看起来很奇怪，但在我们构造类的方式中，构造函数与任何其他方法没有区别，因此可以从中返回一些东西。
- en: In the second highlighted section we set a static variable, `_instance`, to
    be a new instance of the Wall when one is not already there. If that `_instance`
    already exists, we return that. In C# and Java, there would need to be some complicated
    locking logic in this function to avoid race conditions as two different threads
    attempted to access the instance at the same time. Fortunately, there is no need
    to worry about this in JavaScript where the multi-threading story is different.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个突出显示的部分中，我们将静态变量`_instance`设置为Wall的新实例（如果尚不存在）。如果`_instance`已经存在，我们将返回它。在C#和Java中，需要在此函数中添加一些复杂的锁定逻辑，以避免两个不同的线程同时尝试访问实例时出现竞争条件。幸运的是，在JavaScript中我们不需要担心这个问题，因为多线程的情况不同。
- en: Disadvantages
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Singletons have gained something of a bad reputation in the last few years.
    They are, in effect, glorified global variables. As we've discussed, global variables
    are ill conceived and the potential cause of numerous bugs. They are also difficult
    to test with unit tests as the creation of the instance cannot easily be overridden
    and any form of parallelism in the test runner can introduce difficult-to-diagnose
    race conditions. The single largest concern I have with them is that singletons
    have too much responsibility. They control not just themselves but also their
    instantiation. This is a clear violation of the single responsibility principle.
    Almost every problem that can be solved by using a Singleton is better solved
    using some other mechanism.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，单例模式已经获得了不好的声誉。它们实际上是被吹捧的全局变量。正如我们讨论过的，全局变量是不明智的，可能导致许多错误。它们也很难通过单元测试进行测试，因为实例的创建不能轻易被覆盖，测试运行器中的任何并行性都可能引入难以诊断的竞争条件。我对它们最大的担忧是单例有太多的责任。它们不仅控制自己，还控制它们的实例化。这是对单一责任原则的明显违反。几乎每个可以使用单例解决的问题，都可以通过其他机制更好地解决。
- en: JavaScript makes the problem even worse. It isn't possible to create a clean
    implementation of the Singleton due to the restrictions on the constructor. This,
    coupled with the general problems around the Singleton, lead me to suggest that
    the Singleton pattern should be avoided in JavaScript.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使问题变得更糟。由于构造函数的限制，无法创建Singleton的清晰实现。这与Singleton的一般问题结合在一起，导致我建议在JavaScript中应避免使用Singleton。
- en: Prototype
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型
- en: 'The final creational pattern in this chapter is the Prototype pattern. Perhaps
    this name sounds familiar. It certainly should: it is the mechanism through which
    JavaScript inheritance is supported.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个创建模式是原型模式。也许这个名字听起来很熟悉。它确实应该：这是支持JavaScript继承的机制。
- en: We looked at prototypes for inheritance but the applicability of prototypes
    need not be limited to inheritance. Copying existing objects can be a very useful
    pattern. There are numerous cases where being able to duplicate a constructed
    object is handy. For instance, maintaining a history of the state of an object
    is easily done by saving previous instances created by leveraging some sort of
    cloning.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了原型用于继承，但原型的适用性不仅限于继承。复制现有对象可以是一个非常有用的模式。有许多情况下，能够复制构造对象是很方便的。例如，通过保存先前创建的实例来维护对象状态的历史，可以轻松实现某种克隆。
- en: Implementation
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: 'In Westeros, we find that members of a family are frequently very similar;
    as the adage goes: "like father, like son". As each generation is born it is easier
    to create the new generation through copying and modifying an existing family
    member than to build one from scratch.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在维斯特洛大陆，我们发现家庭成员经常非常相似；正如谚语所说：“有其父必有其子”。随着每一代的诞生，通过复制和修改现有家庭成员来创建新一代比从头开始建立更容易。
- en: 'In [Chapter 2](part0086_split_000.html#2I0GC1-015e68c68a464f18a9559f448be84435
    "Chapter 2. Organizing Code"), *Organizing Code*, we looked at how to copy existing
    objects and presented a very simple piece of code for cloning:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0086_split_000.html#2I0GC1-015e68c68a464f18a9559f448be84435 "第2章。组织代码")*组织代码*中，我们看了如何复制现有对象，并提供了一个非常简单的克隆代码片段：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This code can easily be altered to be used inside a class to return a copy
    of itself:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以很容易地修改为在类内部使用，以返回自身的副本：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The highlighted section of code is the modified clone method. It can be used
    as such:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中突出显示的部分是修改后的克隆方法。可以这样使用：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The Prototype pattern allows for a complex object to be constructed only once
    and then cloned into any number of objects that vary only slightly. If the source
    object is not complicated there is little to be gained from taking a cloning approach.
    Care must be taken when using the prototype approach to think about dependent
    objects. Should the clone be a deep one?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 原型模式允许仅构造一次复杂对象，然后克隆成任意数量的仅略有不同的对象。如果源对象不复杂，那么采用克隆方法就没有太多好处。在使用原型方法时，必须考虑依赖对象。克隆是否要深层克隆？
- en: Prototype is obviously a useful pattern and one that forms an integral part
    of JavaScript from the get go. As such it is certainly a pattern that will see
    some use in any JavaScript application of appreciable size.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 原型显然是一个有用的模式，也是JavaScript从一开始就形成的一个组成部分。因此，它肯定是任何规模可观的JavaScript应用程序中会看到一些使用的模式。
- en: Tips and tricks
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技巧和窍门
- en: Creational patterns allow for specialized behavior in creating objects. In many
    cases, such as the factory, they provide extension points into which crosscutting
    logic can be placed. That is to say logic that applies to a number of different
    types of objects. If you're looking for a way to inject, say, logging throughout
    your application, then being able to hook into a factory is of great utility.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模式允许在创建对象时实现特定行为。在许多情况下，比如工厂，它们提供了可以放置横切逻辑的扩展点。也就是说，适用于多种不同类型对象的逻辑。如果你想要在整个应用程序中注入日志，那么能够连接到工厂是非常有用的。
- en: For all the utility of these creational patterns they should not be used very
    frequently. The vast majority of your object instantiations should still be just
    the normal method of improving the objects. Although it is tempting to treat everything
    as a nail when you've got a new hammer, the truth is that each situation needs
    to have a specific strategy. All these patterns are more complicated than simply
    using `new` and complicated code is more liable to have bugs than simple code.
    Use `new` whenever possible.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些创建模式非常有用，但不应该经常使用。绝大多数对象实例化仍应该采用改进对象的常规方法。虽然当你有了新的工具时，把所有东西都视为钉子是很诱人的，但事实是每种情况都需要有特定的策略。所有这些模式都比简单使用`new`更复杂，而复杂的代码更容易出现错误。尽量使用`new`。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter presented a number of different strategies for creating objects.
    These methods provide abstractions over the top of typical methods for creating
    objects. The Abstract Factory provides a method for building interchangeable kits
    or collections of related objects. The Builder pattern provides a solution to
    telescoping parameters issues. It makes the construction of large complicated
    objects easier. The Factory Method, which is a useful complement to Abstract Factory,
    allows different implementations to be created though a static factory. Singleton
    is a pattern for providing a single copy of a class that is available to the entire
    solution. It is the only pattern we've seen so far which has presented some questions
    around applicability in modern software. The Prototype pattern is a commonly used
    pattern in JavaScript for building objects based on other existing objects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了创建对象的许多不同策略。这些方法提供了在创建对象的典型方法之上的抽象。抽象工厂提供了构建可互换的工具包或相关对象集合的方法。建造者模式提供了解决参数问题的解决方案。它使得构建大型复杂对象变得更容易。工厂方法是抽象工厂的有用补充，允许通过静态工厂创建不同的实现。单例模式是提供整个解决方案可用的类的单个副本的模式。这是迄今为止我们所见过的唯一一个在现代软件中提出了一些适用性问题的模式。原型模式是JavaScript中常用的模式，用于基于其他现有对象构建对象。
- en: We'll continue our examination of classical design patterns in the next chapter
    by looking at structural patterns.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续研究经典设计模式，看看结构模式。
