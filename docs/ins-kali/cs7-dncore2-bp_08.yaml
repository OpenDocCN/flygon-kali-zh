- en: Twitter Clone Using OAuth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OAuth创建Twitter克隆
- en: 'In this chapter, we will have a look at how easy it is to create a basic Twitter
    clone using ASP.NET Core MVC. We will be performing the following tasks:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看使用ASP.NET Core MVC创建一个基本的Twitter克隆是多么容易。我们将执行以下任务：
- en: Creating your application on Twitter using Twitter's Application Management
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Twitter上使用Twitter的应用程序管理创建你的应用
- en: Creating an ASP.NET Core MVC application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个ASP.NET Core MVC应用程序
- en: Reading your Home Timeline
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读你的主页时间线
- en: Posting a tweet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布一条推文
- en: As you can imagine, Twitter functionality does not come as standard in .NET
    (let alone in .NET Core).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以想象，Twitter功能在.NET（更不用说.NET Core）中并不是标准配置。
- en: Please be aware that you will need to create a Twitter account in order to perform
    the tasks in this chapter. You can do this by going to [https://twitter.com/](https://twitter.com/)
    and registering.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要创建一个Twitter账户才能在本章中执行任务。你可以通过访问[https://twitter.com/](https://twitter.com/)进行注册。
- en: Luckily for us, there are many dedicated and passionate developers out there
    who give their code away for free. You will usually find their code hosted on
    GitHub, and that is just the place that we will be looking at for a bit of code
    to integrate into our ASP.NET Core MVC application in order to give it that Twitter
    functionality. This chapter is by no means an endorsement of the particular Twitter
    library we're going to use. However, this library is by far one of the best I
    have used. It is also (at the time of writing) constantly being updated.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有很多专注和热情的开发者愿意免费分享他们的代码。你通常会在GitHub上找到他们的代码，而这正是我们将要寻找一些代码集成到我们的ASP.NET
    Core MVC应用程序中，以赋予它Twitter的功能。这一章并不是对我们将要使用的特定Twitter库的认可。然而，这个库是我用过的最好的之一。而且（在撰写本文时）它还在不断更新。
- en: Let's have a look at Tweetinvi.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Tweetinvi。
- en: Using Tweetinvi
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tweetinvi
- en: 'Point your browser to [https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi).
    The description of this library says it all:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的浏览器指向[https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi)。这个库的描述已经说明了一切：
- en: Tweetinvi, the best Twitter C# library for the REST and Stream API. It supports
    .NET, .NETCore, UAP and Portable Class Libraries (Xamarin)...
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Tweetinvi，最好的Twitter C#库，适用于REST和Stream API。它支持.NET、.NETCore、UAP和便携式类库（Xamarin）...
- en: In other words, this library is exactly what we need to create our Twitter clone
    application. Tweetinvi is really well documented and has an active community that
    supports it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这个库正是我们创建Twitter克隆应用所需要的。Tweetinvi文档非常完善，并且有一个支持它的活跃社区。
- en: The ASP.NET Core MVC Twitter clone application
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC Twitter克隆应用程序
- en: Creating a fully-fledged Twitter clone application is a lot of work—more work
    than this chapter would allow me, I'm afraid. I will therefore just illustrate
    how to read the tweets in your main feed (the tweets of the people you follow
    on Twitter). I will also show you how to post a tweet from the application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个完整的Twitter克隆应用是一项艰巨的工作——比这一章节允许的工作还要多，恐怕我只能说明如何读取你主要的推文流（你在Twitter上关注的人的推文）。我还会向你展示如何从应用程序发布一条推文。
- en: 'I will be dispensing with all the fancy UI elements in this application, and
    instead will give you a fantastic basis to carry on developing a fully-fledged
    Twitter clone. You can consider adding the following functionality:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我将放弃所有花哨的UI元素，而是给你一个绝佳的基础，让你继续开发一个完整的Twitter克隆。你可以考虑添加以下功能：
- en: Deleting tweets
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除推文
- en: Retweeting
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转推
- en: Following someone
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关注某人
- en: Unfollowing someone
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消关注某人
- en: Sending private messages
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送私信
- en: Searching
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索
- en: Viewing profile information
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看个人资料
- en: There is a lot of additional functionality you can add; feel free to build in
    any missing functionality you would like to see. I for one would like a better
    way to curate and save tweets that I find interesting.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加很多额外的功能；随意添加你想要看到的任何缺失功能。我个人希望有更好的方式来整理和保存我发现有趣的推文。
- en: I know that some of you might wonder why liking a tweet won't suffice, and here
    is my reason why. Liking tweets has lately become a shorthand way for someone
    to let another person know that they have seen their tweet. This is especially
    true when you are mentioned in a tweet. Instead of just replying (especially to
    rhetorical questions), Twitter users simply like the tweet.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道你们中的一些人可能会想知道为什么点赞一条推文不够，这就是我的原因。点赞推文最近已经成为了一种简便的方式，让别人知道他们已经看到了这条推文。当你在一条推文中被提到时，这一点尤其正确。在不回复的情况下（尤其是对于反问），Twitter用户只是简单地点赞推文。
- en: Liking a tweet is also not a curation tool. Everything you like is found under
    your likes. There is no way to differentiate. Aha! I hear some of you say, *What
    about moments?* Again, moments live on Twitter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 点赞一条推文也不是一个整理工具。你点赞的一切都可以在你的点赞下找到。没有办法区分。啊哈！我听到你们中的一些人说，“那时时刻呢？”再次强调，时刻存在于Twitter上。
- en: Think moments, but moments that come to you. Anyway, there are a lot of improvements
    that one can make to a custom Twitter clone such as this to truly make it your
    own. For now, let's start with the basics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下时刻，但是那些时刻是来到你身边的。无论如何，我们可以对这样一个自定义的Twitter克隆应用进行很多改进，真正让它成为你自己的。现在，让我们从基础开始。
- en: Creating your application on Twitter
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Twitter上创建你的应用程序
- en: Before we can begin creating our Twitter clone, we need to register it on the
    Twitter Application Management console.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建Twitter克隆之前，我们需要在Twitter应用管理控制台上注册它。
- en: 'To access the Application Management console, point your browser to [https://apps.twitter.com](https://apps.twitter.com):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问应用程序管理控制台，请将你的浏览器指向[https://apps.twitter.com](https://apps.twitter.com)：
- en: 'Click on the Sign in link, as shown in the following screenshot:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击登录链接，如下截图所示：
- en: '![](img/b1c9c978-2f75-45c7-8715-45b3c2f095d2.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1c9c978-2f75-45c7-8715-45b3c2f095d2.jpg)'
- en: 'Sign in with your Twitter credentials on the login screen:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在登录界面上使用你的Twitter凭据登录：
- en: '![](img/22c606a1-74a5-4827-9963-efe62080246c.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22c606a1-74a5-4827-9963-efe62080246c.jpg)'
- en: 'If you have created any applications before, you will see them listed. All
    the apps that you create are listed under your Twitter Apps section. Click on
    the Create New App button:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您以前创建过任何应用程序，您将看到它们列在下面。您创建的所有应用程序都列在Twitter应用程序部分下。点击“创建新应用”按钮：
- en: '![](img/9d7eb52c-076c-4a7d-935f-d4b8495724cc.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9d7eb52c-076c-4a7d-935f-d4b8495724cc.jpg)'
- en: 'You will now see the Create an application form. Give your application a suitable
    Name and Description. Provide a Website for your application, and lastly, supply
    a Callback URL value. I have simply used `http://localhost:50000/` and I will
    show you how to configure this in your application later. This is shown in the
    following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您将看到创建应用程序表单。为您的应用程序提供一个合适的名称和描述。为您的应用程序提供一个网站，并最后提供一个回调URL值。我只是使用了`http://localhost:50000/`，稍后将向您展示如何在应用程序中配置此项。如下截图所示：
- en: '![](img/92af6414-677f-436c-86cf-015bebd7a280.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92af6414-677f-436c-86cf-015bebd7a280.jpg)'
- en: If localhost gives you problems during the callback, try using `127.0.0.1` instead.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在回调期间localhost出现问题，请尝试改用`127.0.0.1`。
- en: 'Check the option that you understand the Twitter Developer Agreement and then
    click on Create your Twitter application:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选您理解的Twitter开发者协议选项，然后点击创建Twitter应用程序：
- en: '![](img/5df80045-da9a-437f-9f7f-7af9c50f89f5.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df80045-da9a-437f-9f7f-7af9c50f89f5.jpg)'
- en: 'Next, you will see a summary of the Application Settings you just created.
    At the top of the screen, click on the Keys and Access Tokens tab:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将看到刚刚创建的应用程序设置的摘要。在屏幕顶部，点击“密钥和访问令牌”选项卡：
- en: '![](img/87dd3be5-a457-40ef-9817-72f388a910ee.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87dd3be5-a457-40ef-9817-72f388a910ee.jpg)'
- en: 'This will take you to your Application Settings, where the Consumer Key and
    Consumer Secret is provided. Be sure to make a note of these keys:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您到您的应用程序设置，其中提供了消费者密钥和消费者密钥。一定要记下这些密钥：
- en: '![](img/77855b94-ce50-4fa7-8c31-6711470f6aa7.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77855b94-ce50-4fa7-8c31-6711470f6aa7.jpg)'
- en: 'At the bottom of the page, you will see a button called Create my access token.
    Click on this button. This creates the token that will allow you to make API calls:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部，您将看到一个名为“创建我的访问令牌”的按钮。点击此按钮。这将创建一个令牌，使您能够进行API调用：
- en: '![](img/54daa0fb-d530-48b0-bccb-bbb4db1cf460.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54daa0fb-d530-48b0-bccb-bbb4db1cf460.jpg)'
- en: 'After the token is generated, the Access Token and Access Token Secret are
    displayed for you. Make a note of these too:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成令牌后，将显示访问令牌和访问令牌密钥。也要记下这些：
- en: '![](img/5404e2dc-a57b-47cf-82db-c9c2ac6f079d.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5404e2dc-a57b-47cf-82db-c9c2ac6f079d.jpg)'
- en: That is all there is to registering your application on Twitter's Application
    Management console. The next thing we need to do is create our ASP.NET Core MVC
    Application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在Twitter的应用程序管理控制台上注册您的应用程序所需的全部内容。接下来我们需要做的是创建我们的ASP.NET Core MVC应用程序。
- en: Creating the ASP.NET Core MVC Application and adding the NuGet package
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ASP.NET Core MVC应用程序并添加NuGet包
- en: 'Let''s now begin to create the ASP.NET Core MVC application and add Twitter
    functionality to it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始创建ASP.NET Core MVC应用程序并向其添加Twitter功能：
- en: 'In Visual Studio 2017, create a new ASP.NET Core Web Application. I just called
    my application the same as what I called it when I registered it on Twitter. Click
    on the OK button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2017中，创建一个新的ASP.NET Core Web应用程序。我只是在Twitter上注册时将我的应用程序命名为相同的名称。点击“确定”按钮：
- en: '![](img/d4c2185b-49f0-4bc4-9a45-66f6060b0404.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4c2185b-49f0-4bc4-9a45-66f6060b0404.jpg)'
- en: 'On the next screen, ensure that you have the Web Application (Model-View-Controller)
    template selected and that you have selected ASP.NET Core 2.0 from the dropdown.
    I mention this explicitly, because I get feedback from readers where it turns
    out that they never selected ASP.NET Core 2.0\. Click on the OK button:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，确保您选择了Web应用程序（模型-视图-控制器）模板，并且您已从下拉菜单中选择了ASP.NET Core 2.0。我特别提到这一点，因为我收到读者的反馈，他们从来没有选择过ASP.NET
    Core 2.0。点击“确定”按钮：
- en: '![](img/023ecb2a-d397-4638-9e79-044f588fa480.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/023ecb2a-d397-4638-9e79-044f588fa480.jpg)'
- en: 'When your project has been created, it will look as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，它将如下所示：
- en: '![](img/d3f46e8e-0d10-4635-895c-dd17082fac13.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3f46e8e-0d10-4635-895c-dd17082fac13.jpg)'
- en: 'We now want to go and grab the Tweetinvi NuGet package, so right-click on the
    project and select Manage NuGet Packages from the context menu, shown as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要去获取Tweetinvi NuGet包，因此请右键单击项目，然后从上下文菜单中选择“管理NuGet包”，如下所示：
- en: '![](img/0de4387c-d49e-44df-9c0d-5d8b202505bc.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0de4387c-d49e-44df-9c0d-5d8b202505bc.jpg)'
- en: 'In the Browse tab, search for `tweetinvi` and select the project by the developer
    called Linvi. Click on the Install button to add it to your application:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“浏览”选项卡中，搜索“tweetinvi”，并选择开发人员Linvi的项目。点击“安装”按钮将其添加到您的应用程序：
- en: '![](img/ca830e52-68f5-4bf3-9da2-7e3370071284.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca830e52-68f5-4bf3-9da2-7e3370071284.jpg)'
- en: 'After a short while, the progress will display finished in the Output window
    of Visual Studio:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不久后，进度将在Visual Studio的输出窗口中显示为已完成：
- en: '![](img/a1551d6a-9c59-4e23-8b26-e89cc659f32f.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1551d6a-9c59-4e23-8b26-e89cc659f32f.jpg)'
- en: 'The next thing we want to do is set our URL to the callback URL set in the
    Twitter Application Management console earlier. To do this, right-click your project
    and click on Properties from the context menu:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来要做的是将我们的URL设置为之前在Twitter应用程序管理控制台中设置的回调URL。为此，请右键单击项目，然后从上下文菜单中单击“属性”：
- en: '![](img/92027103-c226-424b-b6ae-37f7a05d41fe.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92027103-c226-424b-b6ae-37f7a05d41fe.jpg)'
- en: 'Select the Debug tab and then enter the callback URL in the App URL field:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“调试”选项卡，然后在“应用程序URL”字段中输入回调URL：
- en: '![](img/5d68b5fc-75e7-4702-88d2-a0b4f0aae335.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d68b5fc-75e7-4702-88d2-a0b4f0aae335.jpg)'
- en: If you set the `localhost` portion of the callback URL to `127.0.0.1` in the
    Application Management console, you need to set it here to `127.0.0.1` too.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在应用程序管理控制台中将回调URL的`localhost`部分设置为`127.0.0.1`，则在此处也需要将其设置为`127.0.0.1`。
- en: Save your settings and return to your code window.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的设置并返回到代码窗口。
- en: From a setup perspective, this should be all you need in order to start writing
    your code and wiring everything up. Let's start doing that next.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从设置的角度来看，这应该是您开始编写代码并连接一切所需的全部内容。让我们开始下一步。
- en: Let's code
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始编码
- en: All the code for this project will be available on GitHub. Point your browser
    to [https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints](https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints)
    and grab the code to work through it as you read through the rest of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的所有代码都可以在GitHub上找到。将浏览器指向[https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints](https://github.com/PacktPublishing/CSharp7-and-.NET-Core-2.0-Blueprints)，并在阅读本章的其余部分时，获取代码并进行操作。
- en: Setting up the classes and settings
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置类和设置
- en: 'The first thing I want to do is create a class that will store my settings.
    For this, perform the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要做的第一件事是创建一个将存储我的设置的类。为此，请执行以下步骤：
- en: Create a folder called `Classes` and, in this folder, create a class called
    `CoreTwitterSettings`. Then, add a second class called `TweetItem` to the `Classes`
    folder (we will be using this class later). While you are at it, create another
    folder called `css`, which we will be using in a minute.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Classes`的文件夹，在该文件夹中创建一个名为`CoreTwitterSettings`的类。然后，在`Classes`文件夹中添加一个名为`TweetItem`的第二个类（我们稍后将使用此类）。在此过程中，创建另一个名为`css`的文件夹，我们稍后将使用它。
- en: 'When you have done this, your project will look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您的项目将如下所示：
- en: '![](img/aadebeb3-b567-4a58-bdfe-eb62b292f4ed.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aadebeb3-b567-4a58-bdfe-eb62b292f4ed.jpg)'
- en: 'Open the `CoreTwitterSettings` class and add the following code to it:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`CoreTwitterSettings`类，并向其中添加以下代码：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next thing we want to do is locate our `appsettings.json` file. This file
    will be in the root of your project, as shown in the following screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的下一件事是找到我们的`appsettings.json`文件。该文件将位于您的项目根目录中，如下截图所示：
- en: '![](img/a68f93de-f0da-4575-a7bf-5179b708fdee.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a68f93de-f0da-4575-a7bf-5179b708fdee.jpg)'
- en: 'Double-click on the `appsettings.json` file to open it for editing. The default
    content of the file should look as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`appsettings.json`文件以打开进行编辑。文件的默认内容应如下所示：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Modify the file to include the settings you want to store. The `appsettings.json`
    file's purpose is to store all of your application's settings.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件以包含您想要存储的设置。`appsettings.json`文件的目的是存储您应用程序的所有设置。
- en: Add your Consumer Key and your Consumer Secret keys to the file. Also, note
    that I have used a setting for the base URL, which is the Callback URL set earlier.
    This is sometimes handy to have around in a setting. I have also created a setting
    called `TweetFeedLimit` to limit the tweets returned to the home timeline.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的Consumer Key和Consumer Secret密钥添加到文件中。还要注意，我已经使用了一个基本URL的设置，这是之前设置的回调URL。这在设置中有时很方便。我还创建了一个名为`TweetFeedLimit`的设置，以限制返回到主页时间线的推文。
- en: Your Consumer Key and Consumer Secret will definitely differ to the values in
    my example. So, be sure to change these accordingly in your application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Consumer Key和Consumer Secret肯定与我的示例中的值不同。因此，请确保相应地更改这些值。
- en: 'When you have modified your `appsettings.json` file, it will look as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的`appsettings.json`文件后，它将如下所示：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you have a look at the `CoreTwitterSettings` class, you will see that it
    slightly resembles the JSON in the `appsettings.json` file.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您查看`CoreTwitterSettings`类，您会发现它与`appsettings.json`文件中的JSON略有相似。
- en: 'In your Visual Studio solution, locate the `Startup.cs` file and open that
    for editing. You will see that Visual Studio 2017 has already added a lot of boilerplate
    code to this class for you already. Take special note of the `ConfigureServices`
    method. It should look something like this:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Visual Studio解决方案中，找到`Startup.cs`文件并打开进行编辑。您会看到Visual Studio 2017已经为您的这个类添加了很多样板代码。特别注意`ConfigureServices`方法。它应该看起来像这样：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since ASP.NET Core 1.1, we have been able to use `Get<T>`, which worked with
    entire sections. To make the settings available in our ASP.NET Core MVC application,
    change the code in this method as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自ASP.NET Core 1.1以来，我们已经能够使用`Get<T>`，它可以与整个部分一起使用。要使设置在我们的ASP.NET Core MVC应用程序中可用，请将此方法中的代码更改如下：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will notice that we are getting the `CoreTwitter` section defined in the
    `appsettings.json` file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们正在获取`appsettings.json`文件中定义的`CoreTwitter`部分。
- en: Creating the TweetItem class
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`TweetItem`类
- en: 'The `TweetItem` class is simply going to contain the URL to a particular tweet.
    It isn''t a very complex class at all, but its usefulness will become clear later
    on in the chapter. For now, just add the following code to it:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`TweetItem`类只是简单地包含特定推文的URL。它并不是一个非常复杂的类，但它的用处将在本章后面变得清晰。现在，只需向其中添加以下代码：'
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The URL it will store will be the URL to a particular tweet.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它将存储的URL将是特定推文的URL。
- en: Setting up the CSS
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置CSS
- en: In order to use the `<blockquote>` HTML tag for a tweet, you will want to add
    a CSS file to your `CSS` folder. In our example, we will not be using it, but
    as you build out your application even further, you would want to use this CSS
    to style your `<blockquote>` tweets.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在推文中使用`<blockquote>` HTML标签，您将希望向您的`CSS`文件夹中添加一个CSS文件。在我们的示例中，我们将不使用它，但随着您进一步构建应用程序，您将希望使用此CSS来为您的`<blockquote>`推文设置样式。
- en: 'If you are just playing around for now, and don''t intend on building this
    application any further after completing this chapter, you can skip this section
    on adding the CSS file. If you want to go further with this application, then
    read on:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在只是玩玩，完成本章后不打算进一步构建此应用程序，可以跳过添加CSS文件的部分。如果您想进一步使用此应用程序，请继续阅读：
- en: 'Right-click the `css` folder in your solution and add a new item to it. Call
    the file `site.css` and click on the Add button, as shown in the following screenshot:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击解决方案中的`css`文件夹，并向其中添加一个新项。将文件命名为`site.css`，然后单击“添加”按钮，如下截图所示：
- en: '![](img/160d4c0c-075c-4e35-a9dd-5a2538fb490a.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/160d4c0c-075c-4e35-a9dd-5a2538fb490a.jpg)'
- en: 'Delete the contents of the `site.css` file and add the following `css` to it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`site.css`文件的内容，并向其中添加以下`css`：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To complement this section, you can read through the Twitter Developer Documentation
    at [https://dev.twitter.com/web/overview/css](https://dev.twitter.com/web/overview/css)
    and have a look at the CSS overview.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了补充这一部分，你可以阅读Twitter开发者文档[https://dev.twitter.com/web/overview/css](https://dev.twitter.com/web/overview/css)，并查看CSS概述。
- en: Adding the controllers
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加控制器
- en: 'We now need to start adding our controllers. Controllers are responsible for
    responding to requests made to your application:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要开始添加我们的控制器。控制器负责响应应用程序发出的请求：
- en: 'To the `Controllers` folder, add another controller called `TwitterController`.
    This controller will be responsible for composing a new tweet and for publishing
    a new tweet. We will get back to this controller later on. For now, just create
    the class. After you have added it, your solution should look as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，添加另一个名为`TwitterController`的控制器。这个控制器将负责撰写新推文和发布新推文。稍后我们会回到这个控制器。现在，只需创建这个类。添加完后，你的解决方案应该如下所示：
- en: '![](img/bf5d9ef8-381a-4114-b7dd-ddfc01a724b4.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf5d9ef8-381a-4114-b7dd-ddfc01a724b4.jpg)'
- en: 'By default, Visual Studio has `HomeController` added for you when you created
    your ASP.NET Core MVC application. Open `HomeController` and look at the contents
    of the class. Be sure to add the following `using` statements to your `HomeController`
    class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，当你创建ASP.NET Core MVC应用程序时，Visual Studio会为你添加`HomeController`。打开`HomeController`并查看类的内容。确保在`HomeController`类中添加以下`using`语句：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first thing I want to do is make my application settings stored in the `appsettings.json`
    file available in my class. You will remember that we modified the `Startup.cs`
    file to inject the settings at startup.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我想要做的第一件事是让我的应用程序设置存储在`appsettings.json`文件中在我的类中可用。你会记得我们修改了`Startup.cs`文件，在启动时注入了这些设置。
- en: 'At the top of the `HomeController` class, add the following line of code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController`类的顶部，添加以下代码行：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Directly underneath that line, add a constructor that brings the `CoreTwitterConfiguration`
    class into scope for our controller:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那行的下面，添加一个构造函数，将`CoreTwitterConfiguration`类引入我们控制器的范围内：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will now modify the `Index` action of the `HomeController` class to check
    whether we have an access token or an access secret. You will remember seeing
    that we left these blank in the `appsettings.json` file earlier. If these are
    empty, then the user has not been authenticated and we then redirect the user
    to the `AuthenticateTwitter` action on `HomeController`:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将修改`HomeController`类的`Index`动作，检查我们是否有访问令牌或访问密钥。你会记得我们之前在`appsettings.json`文件中将它们留空。如果它们为空，那么用户就没有被认证，然后我们将重定向用户到`HomeController`的`AuthenticateTwitter`动作：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's now go and create the `AuthenticateTwitter` action. For this, we need
    the consumer credentials, which we copied from our Twitter Application Management
    console earlier and added to our `appsettings.json` file. We then made these settings
    available throughout our application; now we can see the benefit of having our
    settings stored in the `appsettings.json` file.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们去创建`AuthenticateTwitter`动作。为此，我们需要消费者凭证，这些凭证我们之前从Twitter应用管理控制台复制并添加到我们的`appsettings.json`文件中。然后我们使这些设置在整个应用程序中可用；现在我们可以看到将设置存储在`appsettings.json`文件中的好处。
- en: 'Inside the `AuthenticateTwitter` action, we simply pass the `ConsumerCredentials`
    object the consumer key and consumer secret. When we are validated, we are routed
    to the `ValidateOAuth` action, which we will create next:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AuthenticateTwitter`动作中，我们只需将`ConsumerCredentials`对象传递给消费者密钥和消费者密钥。当我们验证通过时，我们将路由到`ValidateOAuth`动作，接下来我们将创建这个动作：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At this point, we have been redirected to Twitter to authenticate the user
    via OAuth and have been redirected back to our ASP.NET Core application via the
    Callback URL. The code is really straightforward. One thing to note though is
    that `userCredentials.AccessToken` and `userCredentials.AccessTokenSecret` are
    returned from the `userCredentials` object. I just added these to the configuration
    settings for the application, but in reality, you might want to store these elsewhere
    (such as encrypted in a database). This will then allow you to use the application
    without having to authenticate yourself every time:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经被重定向到Twitter进行OAuth用户认证，并通过回调URL被重定向回我们的ASP.NET Core应用程序。代码非常简单。需要注意的一点是`userCredentials.AccessToken`和`userCredentials.AccessTokenSecret`是从`userCredentials`对象返回的。我只是把它们添加到了应用程序的配置设置中，但实际上，你可能希望将它们存储在其他地方（比如加密在数据库中）。这样就可以让你在不需要每次都进行身份验证的情况下使用应用程序：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Seeing as this controller action is called `ValidateOAuth`, let's go and create
    a view with the same name so that we can route to a page that informs the user
    that they have been authenticated successfully.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个控制器动作被称为`ValidateOAuth`，让我们去创建一个同名的视图，这样我们就可以路由到一个页面，通知用户他们已经成功认证。
- en: Creating views
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Views and traditional HTML pages are not the same thing. The pages of the ASP.NET
    Core MVC application are represented by views. As I pointed out earlier, controllers
    receive a request and handle that request. The controller can redirect you to
    another controller action, but it can also return a view:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 视图和传统的HTML页面并不是同一回事。ASP.NET Core MVC应用程序的页面由视图表示。正如我之前指出的，控制器接收请求并处理该请求。控制器可以将你重定向到另一个控制器动作，但也可以返回一个视图：
- en: 'We will now go ahead and create the views for our application. Expand the `Home`
    folder and add a new view called `ValidateOAuth` to the `Home` folder. Just create
    these views without models:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将继续创建应用程序的视图。展开`Home`文件夹，并在`Home`文件夹中添加一个名为`ValidateOAuth`的新视图。只需创建这些视图而不需要模型：
- en: '![](img/93d5351d-0ec7-4612-bab1-9243680d8d64.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93d5351d-0ec7-4612-bab1-9243680d8d64.jpg)'
- en: 'Add another folder to the `Views` folder called `Twitter` and add two views
    to that folder called `ComposeTweet` and `HomeTimeline`. After you have done that,
    your application will look as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Views`文件夹中添加一个名为`Twitter`的文件夹，并在该文件夹中添加两个视图，分别为`ComposeTweet`和`HomeTimeline`。完成后，你的应用程序将如下所示：
- en: '![](img/0176b51a-53c5-4631-8feb-6a76996d894d.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0176b51a-53c5-4631-8feb-6a76996d894d.jpg)'
- en: 'Open the `ValidateOAuth` view and add the following markup to it:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ValidateOAuth`视图，并向其添加以下标记：
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Having a look at the markup, you will notice that all it does is notify the
    user of the authentication status. If authenticated, the user can check out their
    home feed, which is all the tweets of the people they follow on Twitter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下标记，你会注意到它只是通知用户认证状态。如果经过认证，用户可以查看他们的主页动态，这是他们在Twitter上关注的人的所有推文。
- en: 'I want to call your attention here to the way I call the `GetHomeTimeline` action
    on the `Home` controller. You will see in the button link, the following `href`
    exists:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我想在这里提醒你一下，我是如何在`Home`控制器上调用`GetHomeTimeline`动作的。你会在按钮链接中看到以下`href`存在：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is one way to route the user to an action on a controller. A little later,
    I will show you another nicer method to do this.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将用户路由到控制器上的一个方法。稍后，我会向你展示另一种更好的方法来做到这一点。
- en: So, we are allowing a successfully authenticated user to view the tweets of
    the people they follow by clicking on the `Home` link. This calls an action called
    `GetHomeTimeline`. Let's go and modify `HomeController` to add this action.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们允许成功认证的用户通过点击`Home`链接查看他们关注的人的推文。这调用了一个名为`GetHomeTimeline`的动作。让我们去修改`HomeController`以添加这个动作。
- en: Modifying HomeController
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改HomeController
- en: 'Swing back to `HomeController` and add another action called `GetHomeTimeline`.
    This then takes the user credentials to find the home timeline tweets of the authenticated
    user. The user credentials consist of the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`HomeController`，并添加另一个名为`GetHomeTimeline`的动作。然后，使用用户凭据查找经过认证用户的主页时间线推文。用户凭据包括以下内容：
- en: Consumer key
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者密钥
- en: Consumer secret
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者密钥
- en: Access token
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问令牌
- en: Access secret
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问密钥
- en: You will notice that these are all coming from the `CoreTwitterConfiguration`
    object. The twitter feed only consists of the limit set in the settings. I set
    mine to `10`, so this should only contain 10 tweets. For every tweet in the feed,
    I extract the URL of the tweet and add it to a list of type `TweetItem` (the class
    we created earlier). If everything runs smoothly, I route to the `HomeTimeline`
    view.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到这些都来自`CoreTwitterConfiguration`对象。推特动态只包括在设置中设置的限制。我将我的设置为`10`，所以这应该只包含10条推文。对于动态中的每条推文，我提取推文的URL并将其添加到`TweetItem`类型的列表中（我们之前创建的类）。如果一切顺利，我就路由到`HomeTimeline`视图。
- en: Add the following code to your `GetHomeTimeline` action.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的`GetHomeTimeline`动作中。
- en: You should be getting an error on the code that references the `TwitterViewModel`
    instance called `homeView`. We will rectify this next.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在引用名为`homeView`的`TwitterViewModel`实例的代码上得到一个错误。我们接下来将纠正这个错误。
- en: 'Your action should look as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你的动作应该如下所示：
- en: '[PRE15]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As mentioned earlier, you will see some errors. This is because we don't yet
    have a model called `TwitterViewModel`. Let's create that next.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你会看到一些错误。这是因为我们还没有一个名为`TwitterViewModel`的模型。让我们接下来创建它。
- en: Creating the TwitterViewModel class
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建TwitterViewModel类
- en: The `TwitterViewModel` class is just a really simple class that takes a collection
    of `TweetItem` as a property called `HomeTimelineTweets`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`TwitterViewModel`类只是一个非常简单的类，它将`TweetItem`的集合作为名为`HomeTimelineTweets`的属性。'
- en: 'Let''s start by adding a model to our project:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先向我们的项目添加一个模型：
- en: 'Right-click your `Models` folder and add a class called `TwitterViewModel` to
    the folder. Then, add the following code to that class:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Models`文件夹，然后在文件夹中添加一个名为`TwitterViewModel`的类。然后，将以下代码添加到该类中：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Also, add the `using` statement `using CoreTwitter.Classes;` to the class.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要向类添加`using`语句`using CoreTwitter.Classes;`。
- en: This is all that is needed. As you expand the `TweetItem` class later on (if
    you decide to add functionality to this app), this model will be responsible for
    passing that information through to our view for use in the Razor.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所需要的一切。当你稍后扩展`TweetItem`类（如果你决定为这个应用添加功能），这个模型将负责将这些信息传递给我们的视图，以便在Razor中使用。
- en: Creating the HomeTimeline view
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建HomeTimeline视图
- en: Thinking back to the `HomeController` action we created earlier called `GetHomeTimeline`,
    you will remember that we routed to a view called `HomeTimeline`. We have already
    created this view, but now we need to add some logic to it to render the tweets
    in our home timeline.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们之前创建的`HomeController`动作`GetHomeTimeline`，你会记得我们路由到一个名为`HomeTimeline`的视图。我们已经创建了这个视图，但现在我们需要向它添加一些逻辑来呈现我们主页时间线中的推文。
- en: 'We, therefore, need to add a view for our home timeline, which we will add
    next:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要为我们的主页时间线添加一个视图，接下来我们将添加：
- en: 'Open the `HomeTimeline.cshtml` file and add the following markup to the view:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`HomeTimeline.cshtml`文件，并向视图添加以下标记：
- en: '[PRE17]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first thing you need to notice is the `@model TwitterViewModel` statement
    at the top of the file. This allows us to use the values stored inside that model
    in our view. What our view does is loop through the collection of tweets contained
    in the `HomeTimelineTweets` property of the model and build up a list of tweets
    to display on the page.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要注意的第一件事是文件顶部的`@model TwitterViewModel`语句。这允许我们在视图中使用模型中存储的值。我们的视图循环遍历模型的`HomeTimelineTweets`属性中包含的推文集合，并构建一个要在页面上显示的推文列表。
- en: Another thing I want to draw your attention to is the tag helpers `asp-controller`
    and `asp-action` on the Tweet link. This is a cleaner way of routing to a specific
    action on a specific controller (as opposed to doing it in the `href` as we saw
    in the `ValidateOAuth` view earlier).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要引起你的注意的另一件事是Tweet链接上的标签助手`asp-controller`和`asp-action`。这是一种更干净的方式，可以路由到特定控制器上的特定动作（而不是像我们之前在`ValidateOAuth`视图中看到的那样在`href`中进行路由）。
- en: 'Lastly, you might be wondering what the `widgets.js` reference is doing there.
    Well, I didn''t want to style my tweets myself, so I decided to use Twitter to
    do it for me:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能想知道`widgets.js`引用是做什么的。好吧，我不想自己设计我的推文样式，所以我决定让Twitter为我做。
- en: 'To get the markup, head over to [https://publish.twitter.com/#](https://publish.twitter.com/#):'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取标记，请转到[https://publish.twitter.com/#](https://publish.twitter.com/#)：
- en: '![](img/62b13e2c-04bd-441d-9a90-355c75e29b6e.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62b13e2c-04bd-441d-9a90-355c75e29b6e.jpg)'
- en: 'From the dropdown, select A Tweet as the option of the thing you are trying
    to embed, shown as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，选择“A Tweet”作为您要嵌入的内容的选项，如下所示：
- en: '![](img/4b4af95e-1794-4878-a582-d45f1ebc3fbf.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b4af95e-1794-4878-a582-d45f1ebc3fbf.jpg)'
- en: 'You will then be given some sample code to use. You can just click on the Copy
    Code button. This is just the way I did it, but you are welcome to go your own
    way without going through this step:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您将获得一些示例代码供使用。 您只需单击复制代码按钮。 这只是我做的方式，但欢迎您在不经过此步骤的情况下自行前进：
- en: '![](img/eb2c4055-8b95-41f4-8ce2-2c0c8ef713cc.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb2c4055-8b95-41f4-8ce2-2c0c8ef713cc.jpg)'
- en: 'The code that you copied might look something like the following:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您复制的代码可能看起来像以下内容：
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Take that and modify it to be styled according to your page. Do this in a loop
    so that you can output all the tweets individually below each other. The code
    you should end up with is just:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其修改为根据您的页面进行样式设置。 在循环中执行此操作，以便您可以单独输出所有推文。 您最终应该得到的代码只是：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It just contains the link to the Twitter URL.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 它只包含指向Twitter URL的链接。
- en: Modifying the TwitterController class
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改TwitterController类
- en: Now we come to the part where we allow the user to send a tweet.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了允许用户发送推文的部分。
- en: 'Open up the `TwitterController` class and add two actions called `ComposeTweet`
    and `PublishTweet`. The `TwitterController` class is really simple. It just contains
    the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 打开“TwitterController”类并添加名为“ComposeTweet”和“PublishTweet”的两个操作。 “TwitterController”类非常简单。
    它只包含以下代码：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `ComposeTweet` action simply returns the user to a view where they can compose
    a tweet. You will remember that we created the `ComposeTweet` view earlier. The
    `PublishTweet` action is just as simple. It takes the text of what I am tweeting
    and passes it to the `PublishTweet` method of the `Tweetinvi.Tweet` class. After
    that, it makes sense to redirect back to the home timeline where we will expect
    to see the tweet we just created.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “ComposeTweet”操作只是简单地将用户返回到一个视图，他们可以在其中撰写推文。 您会记得我们之前创建了“ComposeTweet”视图。 “PublishTweet”操作同样简单。
    它获取我要发推文的文本，并将其传递给“Tweetinvi.Tweet”类的“PublishTweet”方法。 之后，将重定向回主页时间线，我们期望在那里看到我们刚刚创建的推文。
- en: The last task we need to complete is to modify the `ComposeTweet` view. Let's
    do that next.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要完成的最后一个任务是修改“ComposeTweet”视图。 让我们接下来做这件事。
- en: Finishing up—the ComposeTweet view
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成-ComposeTweet视图
- en: To finish up, we use the `ComposeTweet` view.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用“ComposeTweet”视图。
- en: 'Open up the `ComposeTweet` view and add the following markup to the view:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 打开“ComposeTweet”视图并向视图添加以下标记：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You will notice that once again, I am making use of Tag Helpers to define the
    controller and action to call. Only this time, I am doing it on the `<form>` tag.
    At this point, you are ready to run your application for the first time. Let's
    have a look at how it performs.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，我再次使用标签助手来定义要调用的控制器和操作。 只是这一次，我是在`<form>`标签上这样做的。 在这一点上，您已经准备好首次运行应用程序了。
    让我们看看它的表现如何。
- en: Running the CoreTwitter application
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行CoreTwitter应用程序
- en: Perform a build of your project to make sure everything builds correctly. Then,
    start debugging your application. Because you have not been authenticated, you
    will be redirected to Twitter to be authenticated.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对项目进行构建，以确保一切构建正确。 然后，开始调试您的应用程序。 因为您尚未经过身份验证，所以将被重定向到Twitter进行身份验证。
- en: 'This is a page that I am sure you are used to seeing:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个您肯定习惯看到的页面：
- en: 'Many web applications use OAuth for authentication. To continue, click on the
    Authorize app button, as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许多网络应用程序使用OAuth进行身份验证。 要继续，请点击授权应用程序按钮，如下所示：
- en: '![](img/7c31e5d1-519d-4726-a8f2-996748b2be0b.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c31e5d1-519d-4726-a8f2-996748b2be0b.jpg)'
- en: 'You will then see a redirection notice. This could take a few moments to redirect
    you. It all depends on your internet connection speed:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您将看到一个重定向通知。 这可能需要一些时间来重定向您。 这完全取决于您的互联网连接速度：
- en: '![](img/16d5aebc-76d9-43e1-b267-30d566c50e9c.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16d5aebc-76d9-43e1-b267-30d566c50e9c.jpg)'
- en: 'Once you have been redirected to your CoreTwitter application, you will see
    the OAuth Authentication Succeeded message displayed. Following that, click on
    the Home button to go to `HomeTimeline`:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您被重定向到您的CoreTwitter应用程序，您将看到OAuth身份验证成功的消息。 之后，点击主页按钮转到“主页时间线”：
- en: '![](img/ae259f22-b22d-4cef-b8f6-4e87510b8b07.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae259f22-b22d-4cef-b8f6-4e87510b8b07.jpg)'
- en: '`HomeController` jumps into action as the `GetHomeTimeline` action is called
    and redirects you to the `HomeTimeline` view. You will see your tweets loaded
    in the page:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “HomeController”开始执行，因为调用“GetHomeTimeline”操作并将您重定向到“HomeTimeline”视图。 您将在页面中看到加载的推文：
- en: '![](img/ee698277-a488-4be4-a2f5-1246e1641e58.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee698277-a488-4be4-a2f5-1246e1641e58.jpg)'
- en: 'As you scroll through the tweets (remember, I only returned 10), you will see
    that there are videos included that will play when you click on the play button:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您滚动浏览推文时（记住，我只返回了10条），您将看到包含视频的推文，当您单击播放按钮时将播放：
- en: '![](img/8a119557-0548-44a6-a578-f49a8673137b.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a119557-0548-44a6-a578-f49a8673137b.jpg)'
- en: 'Media-rich tweets give you previews on articles too, and you will also see
    the plain old text tweets in your timeline. All the links are fully active and
    you can click on them to view the article:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 富媒体推文还会为您提供文章预览，并且您还将在时间轴中看到普通的文本推文。 所有链接都是完全活动的，您可以单击它们以查看文章：
- en: '![](img/b8d90cfd-55c3-4dcf-84e5-3637faca8b6a.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8d90cfd-55c3-4dcf-84e5-3637faca8b6a.jpg)'
- en: 'If you scroll right to the bottom of the timeline (this should have been at
    the top, but I told you that I wasn''t going to do much around the UI), you will
    see the Tweet button. Click on that to compose a new tweet:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您向右滚动到时间轴的底部（这应该在顶部，但我告诉过您我不打算在UI周围做太多事情），您将看到“推文”按钮。 单击它以撰写新推文：
- en: '![](img/fe82dbad-3609-4813-95ea-095decbb86f8.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe82dbad-3609-4813-95ea-095decbb86f8.jpg)'
- en: 'On the `ComposeTweet` view, you can enter anything into the tweet field and
    click on the Submit Query button:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“ComposeTweet”视图上，您可以在推文字段中输入任何内容，然后单击“提交查询”按钮：
- en: '![](img/1ddd9137-2214-4353-8c49-cae23fbc20b2.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ddd9137-2214-4353-8c49-cae23fbc20b2.jpg)'
- en: 'Your tweet is then posted on Twitter and you are redirected to the home timeline
    again, where you will see your newly posted tweet:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的推文随后会发布在Twitter上，然后你会被重定向到主页时间轴，你会在那里看到你新发布的推文：
- en: '![](img/4e99f2e9-4d04-448f-badb-dba999404f06.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e99f2e9-4d04-448f-badb-dba999404f06.jpg)'
- en: 'And, just for the sake of it, you can view that specific tweet by going to
    the following URL: [https://twitter.com/DirkStrauss/status/973002561979547650](https://twitter.com/DirkStrauss/status/973002561979547650).'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，仅仅为了这个缘故，你可以通过访问以下URL来查看特定的推文：[https://twitter.com/DirkStrauss/status/973002561979547650](https://twitter.com/DirkStrauss/status/973002561979547650)。
- en: Yes, it really is 3:07 AM right now. `#thatisall`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，现在真的是凌晨3:07。`#就是这样`。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Looking back at the chapter, we really did a lot. I encourage you to go through
    the code on GitHub as well as the Tweetinvi documentation available at [https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi).
    In this chapter, we saw how to register our application on Twitter's Application
    Management console. We saw that we could easily add Twitter functionality to our
    ASP.NET Core MVC app by using a NuGet package called Tweetinvi. We had a look
    at routing as well as controllers, models, views, and storing the settings in
    the `appsetting.json` file.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾这一章，我们确实做了很多。我鼓励你去GitHub上查看代码，以及在[https://github.com/linvi/tweetinvi](https://github.com/linvi/tweetinvi)上可用的Tweetinvi文档。在这一章中，我们看到了如何在Twitter的应用程序管理控制台上注册我们的应用程序。我们看到我们可以通过使用一个叫做Tweetinvi的NuGet包，轻松地为我们的ASP.NET
    Core MVC应用程序添加Twitter功能。我们看了一下路由，以及控制器、模型、视图，以及将设置存储在`appsetting.json`文件中。
- en: We were able to authenticate ourselves with OAuth and read the last 10 tweets
    from our home timeline. Lastly, we were able to post a tweet and view it in our
    home timeline.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够通过OAuth进行身份验证，并从我们的主页时间轴中读取最后10条推文。最后，我们能够发布一条推文，并在我们的主页时间轴中查看它。
- en: There is still a lot of work that can be done inside of our Twitter Clone application.
    I hope that you have found it an interesting chapter and hope that you continue
    to work on it to improve it for your specific workflow and make it your own.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Twitter克隆应用程序中仍然有很多工作可以做。我希望你觉得这是一个有趣的章节，并希望你继续努力改进它，以适应你特定的工作流程，并使其成为你自己的。
- en: In the next chapter, we will be taking a look at Docker and what it means to
    you as a software developer. We will also see how to run our ASP.NET Core MVC
    application inside a Docker container.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下Docker以及作为软件开发人员对你意味着什么。我们还将看到如何在Docker容器中运行我们的ASP.NET Core MVC应用程序。
