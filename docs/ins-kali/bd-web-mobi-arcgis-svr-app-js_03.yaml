- en: Chapter 3. Adding Graphics to the Map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。将图形添加到地图
- en: Graphics are points, lines, or polygons that are drawn on top of your map in
    a layer that is independent of any other data layer associated with a map service.
    Most people associate a graphic object with the symbol that is displayed on a
    map to represent the graphic. However, each graphic in ArcGIS Server can be composed
    of up to four objects, including the geometry of the graphic, the symbology associated
    with the graphic, attributes that describe the graphic, and an info template that
    defines the format of the info window that appears when a graphic is clicked on.
    Although a graphic can be composed of up to four objects, it is not always necessary
    for this to happen. The objects you choose to associate with your graphic will
    be dependent on the needs of the application that you are building. For example,
    in an application that displays GPS coordinates on a map, you may not need to
    associate attributes or display info window for the graphic. However, in most
    cases, you will be defining the geometry and symbology for a graphic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 图形是在地图的图层上绘制的点、线或多边形，这些图层独立于与地图服务相关的任何其他数据图层。大多数人将图形对象与在地图上显示图形的符号相关联。然而，在ArcGIS
    Server中，每个图形可以由多达四个对象组成，包括图形的几何、与图形相关的符号、描述图形的属性和定义当单击图形时出现的信息窗口格式的信息模板。尽管图形可以由多达四个对象组成，但并不总是有必要这样做。您选择与图形关联的对象将取决于您正在构建的应用程序的需求。例如，在显示GPS坐标的地图应用程序中，您可能不需要关联属性或显示图形的信息窗口。然而，在大多数情况下，您将为图形定义几何和符号。
- en: Graphics are temporary objects stored in a separate layer on the map. They are
    displayed while an application is in use and are removed when the session is complete.
    The separate layer, called the graphics layer, stores all the graphics associated
    with your map. In [Chapter 2](ch02.html "Chapter 2. Creating Maps and Adding Layers"),
    *Creating Maps and Adding Layers*, we discussed the various types of layers, including
    dynamic map service layers and tiled map service layers. Just as with the other
    types of layers, `GraphicsLayer` also inherits from the `Layer` class. Therefore,
    all the properties, methods, and events found in the `Layer` class will also be
    present in `GraphicsLayer`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 图形是存储在地图上单独图层中的临时对象。它们在应用程序使用时显示，并在会话完成时删除。名为图形图层的单独图层存储与您的地图相关的所有图形。在[第2章](ch02.html
    "第2章。创建地图和添加图层")中，*创建地图和添加图层*，我们讨论了各种类型的图层，包括动态地图服务图层和切片地图服务图层。与其他类型的图层一样，`GraphicsLayer`也继承自`Layer`类。因此，`Layer`类中找到的所有属性、方法和事件也将存在于`GraphicsLayer`中。
- en: Graphics are displayed on top of any other layers that are present in your application.
    An example of point and polygon graphics is provided in the following screenshot.
    These graphics can be created by users or drawn by the application in response
    to the tasks that have been submitted. For example, a business analysis application
    might provide a tool that allows the user to draw a freehand polygon to represent
    a potential trade area.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图形显示在应用程序中存在的任何其他图层的顶部。以下屏幕截图显示了点和多边形图形的示例。这些图形可以由用户创建，也可以由应用程序根据已提交的任务绘制。例如，商业分析应用程序可能提供一个工具，允许用户绘制自由手绘多边形来表示潜在的贸易区域。
- en: The polygon graphic would be displayed on top of the map, and could then be
    used as an input to a geoprocessing task that pulls demographic information pertaining
    to the potential trade area.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形图形将显示在地图的顶部，并且可以用作拉取与潜在贸易区域相关的人口统计信息的地理处理任务的输入。
- en: '![Adding Graphics to the Map](graphics/7965_03_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![将图形添加到地图](graphics/7965_03_01.jpg)'
- en: Many ArcGIS Server tasks return their results as graphics. The `QueryTask` object
    can perform both attribute and spatial queries. The results of a query are then
    returned to the application in the form of a `FeatureSet` object, which is simply
    an array of features. You can then access each of these features as graphics and
    plot them on the map using a looping structure. Perhaps you'd like to find and
    display all land parcels that intersect the 100 year flood plain. A `QueryTask`
    object could perform the spatial query and then return the results to your application,
    where they would then be displayed as polygon graphics on the map.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多ArcGIS Server任务将它们的结果作为图形返回。`QueryTask`对象可以执行属性和空间查询。然后，查询的结果以`FeatureSet`对象的形式返回到应用程序中，它只是一个要素数组。然后，您可以访问每个要素作为图形，并使用循环结构在地图上绘制它们。也许您想要查找并显示所有与百年洪水平原相交的土地地块。`QueryTask`对象可以执行空间查询，然后将结果返回到您的应用程序中，然后它们将显示为地图上的多边形图形。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The four parts of a graphic
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形的四个部分
- en: Creating geometry for graphics
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为图形创建几何
- en: Symbolizing graphics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号化图形
- en: Assigning attributes to graphics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为图形分配属性
- en: Displaying graphic attributes in an info window
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在信息窗口中显示图形属性
- en: Creating graphics
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图形
- en: Adding graphics to the graphics layer
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图形添加到图形图层
- en: The four parts of a graphic
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形的四个部分
- en: 'A graphic is composed of four items: **Geometry**, **Symbol**, **Attributes**,
    and **InfoTemplate**, as shown in the following diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图形由四个部分组成：**几何**、**符号**、**属性**和**信息模板**，如下图所示：
- en: '![The four parts of a graphic](graphics/7965_03_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图形的四个部分](graphics/7965_03_02.jpg)'
- en: A graphic has a geometric representation that describes where it is located.
    The geometry, along with a symbol, defines how the graphic is displayed. A graphic
    can also have attributes that provide descriptive information about the graphic.
    Attributes are defined as a set of name-value pairs. For example, a graphic depicting
    a wildfire location could have attributes that describe the name of the fire along
    with the number of acres burned. The info template defines what attributes should
    be displayed in the info window that appears when the graphic appears, along with
    how they should be displayed. After their creation, the graphic objects must be
    stored inside a `GraphicsLayer` object, before they can be displayed on the map.
    This `GraphicsLayer` object functions as a container for all the graphics that
    will be displayed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图形具有描述其位置的几何表示。几何与符号一起定义了图形的显示方式。图形还可以具有提供有关图形的描述信息的属性。属性被定义为一组名称-值对。例如，描绘野火位置的图形可以具有描述火灾名称以及烧毁的英亩数的属性。信息模板定义了在图形出现时应显示哪些属性以及它们应该如何显示。创建后，图形对象必须存储在`GraphicsLayer`对象中，然后才能显示在地图上。这个`GraphicsLayer`对象作为将要显示的所有图形的容器。
- en: All the elements of a graphic are optional. However, the geometry and symbology
    of a graphic are almost always assigned. Without these two items, there would
    be nothing to display on the map, and there isn't much point in having a graphic
    unless you're going to display it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图形的所有元素都是可选的。但是，图形的几何和符号几乎总是被分配的。如果没有这两个项目，地图上就没有东西可以显示，而且没有显示图形的意义。
- en: The following figure shows the typical process of creating a graphic and adding
    it to the graphics layer. In this case, we are applying the geometry of the graphic
    as well as a symbol to depict the graphic. However, we haven't specifically assigned
    attributes or an info template to this graphic.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了创建图形并将其添加到图形图层的典型过程。在这种情况下，我们应用了图形的几何以及一个符号来描绘图形。但是，我们还没有专门为这个图形分配属性或信息模板。
- en: '![The four parts of a graphic](graphics/7965_03_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图形的四个部分](graphics/7965_03_03.jpg)'
- en: Creating geometry for graphics
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为图形创建几何
- en: Graphics will almost always have a geometry component, which is necessary for
    their placement on the map. These geometry objects can be points, multipoints,
    polylines, polygons, or extents and can be created programmatically through a
    constructor for these objects or can be returned as an output from a task such
    as a query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图形几乎总是有一个几何组件，这对于它们在地图上的放置是必要的。这些几何对象可以是点、多点、折线、多边形或范围，并且可以通过这些对象的构造函数进行程序化创建，或者可以作为查询等任务的输出返回。
- en: Before creating any of these geometry types, the `esri/geometry` resource needs
    to be imported. This geometry resource contains classes for `Geometry`, `Point`,
    `Multipoint`, `Polyline`, `Polygon`, and `Extent`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建任何这些几何类型之前，需要导入`esri/geometry`资源。这个几何资源包含了`Geometry`、`Point`、`Multipoint`、`Polyline`、`Polygon`和`Extent`的类。
- en: '`Geometry` is the base class that is inherited by `Point`, `MultiPoint`, `Polyline`,
    `Polygon`, and `Extent`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geometry`是由`Point`、`MultiPoint`、`Polyline`、`Polygon`和`Extent`继承的基类。'
- en: 'As can be seen from the following code line, the `Point` class defines a location
    by an X and Y coordinate, and can be defined in either map units or screen units:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如下代码行所示，`Point`类通过X和Y坐标定义位置，并且可以定义为地图单位或屏幕单位：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Symbolizing graphics
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号化图形
- en: Each graphic that you create can be symbolized through one of the various symbol
    classes found in the API. Point graphics are symbolized by the `SimpleMarkerSymbol`
    class and the available shapes include circle, cross, diamond, square, and X.
    It is also possible to symbolize your points through the `PictureMarkerSymbol`
    class, which uses an image to display the graphic. Linear features are symbolized
    through the `SimpleLineSymbol` class and can include solid lines, dashes, dots,
    or a combination. Polygons are symbolized through the `SimpleFillSymbol` class
    and can be solid, transparent, or crosshatch. In the event that you'd prefer to
    use an image in a repeated pattern for your polygons, the `PictureFillSymbol`
    class is available. Text can also be added to the graphics layer and is symbolized
    through the `TextSymbol` class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建的每个图形都可以通过API中找到的各种符号类之一进行符号化。点图形通过`SimpleMarkerSymbol`类进行符号化，可用形状包括圆圈、十字、菱形、正方形和X。还可以通过`PictureMarkerSymbol`类对点进行符号化，该类使用图像来显示图形。线性特征通过`SimpleLineSymbol`类进行符号化，可以包括实线、虚线、点线或组合。多边形通过`SimpleFillSymbol`类进行符号化，可以是实心、透明或斜纹。如果您希望在多边形中使用图像进行重复图案，可以使用`PictureFillSymbol`类。文本也可以添加到图形图层，并通过`TextSymbol`类进行符号化。
- en: 'Points or multipoints can be symbolized through the `SimpleMarkerSymbol` class,
    which has various properties that can be set, including style, size, outline,
    and color. Style is set through the `SimpleMarkerSymbol.setStyle()` method that
    takes one of the following constants, which corresponds to the type of symbol
    that is drawn (circle, cross, diamond, and so on):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 点或多点可以通过`SimpleMarkerSymbol`类进行符号化，该类具有各种可以设置的属性，包括样式、大小、轮廓和颜色。样式是通过`SimpleMarkerSymbol.setStyle()`方法设置的，该方法接受以下常量之一，对应于绘制的符号类型（圆圈、十字、菱形等）：
- en: '`STYLE_CIRCLE`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_CIRCLE`'
- en: '`STYLE_CROSS`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_CROSS`'
- en: '`STYLE_DIAMOND`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_DIAMOND`'
- en: '`STYLE_PATH`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_PATH`'
- en: '`STYLE_SQUARE`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_SQUARE`'
- en: '`STYLE_X`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STYLE_X`'
- en: 'Point graphics can also have an outline color, which is created through the
    `SimpleLineSymbol` class. The size and color of the graphics can also be set.
    Examine the following code example to get an idea on how this is done:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点图形也可以有轮廓颜色，这是通过`SimpleLineSymbol`类创建的。还可以设置图形的大小和颜色。查看以下代码示例，了解如何完成这些操作：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Symbolizing graphics](graphics/7965_03_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![符号化图形](graphics/7965_03_06.jpg)'
- en: 'Linear features are symbolized with the `SimpleLineSymbol` class and can be
    a solid line or a combination of dots and dashes. Other properties include color,
    as defined with `dojo/Color`, and a width property `setWidth` to set the thickness
    of your line. The following code example explains the process in detail:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 线性特征使用`SimpleLineSymbol`类进行符号化，可以是实线或点划线的组合。其他属性包括颜色，使用`dojo/Color`定义，以及`setWidth`属性设置线条的粗细。以下代码示例详细解释了该过程：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot is obtained when the preceding code is run:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时获得以下屏幕截图：
- en: '![Symbolizing graphics](graphics/7965_03_07.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![符号化图形](graphics/7965_03_07.jpg)'
- en: 'Polygons are symbolized through the `SimpleFillSymbol` class, which allows
    the drawing of polygons in solid, transparent, or crosshatch patterns. Polygons
    can also have an outline specified by a `SimpleLineSymbol` object. The following
    code example explains the process in detail:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形通过`SimpleFillSymbol`类进行符号化，允许以实线、透明或交叉图案绘制多边形。多边形还可以具有由`SimpleLineSymbol`对象指定的轮廓。以下代码示例详细解释了该过程。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot is obtained when the preceding code is run:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时获得以下屏幕截图：
- en: '![Symbolizing graphics](graphics/7965_03_08.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![符号化图形](graphics/7965_03_08.jpg)'
- en: Assigning attributes to graphics
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为图形分配属性
- en: 'The attributes of a graphic are the name-value pairs that describe that object.
    In many cases, graphics are generated as the result of a task operation such as
    `QueryTask`. In such cases, each graphic is composed of both geometry and attributes,
    and you would then need to symbolize each graphic accordingly. The field attributes
    associated with the layer become the attributes for the graphic. In some cases,
    the attributes can be limited through properties such as `outFields`. If your
    graphics are being created programmatically, you will need to assign the attributes
    in your code using the `Graphic.setAttributes()` method as seen in the following
    code example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图形的属性是描述该对象的名称-值对。在许多情况下，图形是作为`QueryTask`等任务操作的结果生成的。在这种情况下，每个图形由几何和属性组成，然后您需要相应地对每个图形进行符号化。与图层关联的字段属性成为图形的属性。在某些情况下，可以通过`outFields`等属性限制属性。如果您的图形是以编程方式创建的，您需要使用`Graphic.setAttributes()`方法在代码中分配属性，如以下代码示例所示：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Displaying graphic attributes in an info template
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在信息模板中显示图形属性
- en: 'In addition to attributes, a graphic can also have an info template that defines
    how the attribute data is displayed in a pop-up window. A point attribute variable
    has been defined in the following code example and contains key-value pairs. In
    this particular case, we have keys that include the address, city, and state.
    Each of these names or keys has a value. This variable is the third parameter
    in the constructor for a new point graphic. An info template defines the format
    of the pop-up window that appears, and contains a title and an optional content
    template string:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了属性之外，图形还可以具有定义属性数据在弹出窗口中显示方式的信息模板。在以下代码示例中定义了一个点属性变量，其中包含键-值对。在这种特殊情况下，我们有包括地址、城市和州的键。每个名称或键都有一个值。该变量是新点图形构造函数的第三个参数。信息模板定义了弹出窗口的格式，并包含一个标题和一个可选的内容模板字符串。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code produces the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成以下屏幕截图：
- en: '![Displaying graphic attributes in an info template](graphics/7965_03_13.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在信息模板中显示图形属性](graphics/7965_03_13.jpg)'
- en: Creating graphics
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图形
- en: Once you have defined the geometry, symbology, and attributes for your graphic,
    a new graphic object can be created with these parameters used as an input to
    the constructor for the `Graphic` object. In the following code example, we will
    create variables for the geometry (`pointESRI`), symbology (`markerSymbol`), point
    attributes (`pointAttributes`), and info template (`pointInfoTemplate`), and then
    apply these variables as an input to the constructor for our new graphic called
    `pointGraphic`. Finally, this graphic is added to the graphics layer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您定义了图形的几何、符号和属性，就可以使用这些参数创建一个新的图形对象，并将其作为`Graphic`对象的构造函数的输入。在以下代码示例中，我们将为几何（`pointESRI`）、符号（`markerSymbol`）、点属性（`pointAttributes`）和信息模板（`pointInfoTemplate`）创建变量，然后将这些变量作为输入应用于我们的名为`pointGraphic`的新图形的构造函数。最后，将该图形添加到图形图层中。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding graphics to the graphics layer
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图形添加到图形图层
- en: Before any of your graphics are displayed on the map, you must add them to the
    graphics layer. Each map has a graphics layer, which contains an array of graphics
    that is initially empty until you add the graphics. This layer can contain any
    type of graphic object. This means that you can mix-in points, lines, and polygons
    at the same time. Graphics are added to the layer through the `add()` method and
    can also be removed individually through the `remove()` method. In the event that
    you need to remove all the graphics simultaneously, the `clear()` method can be
    used. The graphics layer also has a number of events that can be registered, including
    `click`, `mouse-down`, and others.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上显示任何图形之前，您必须将它们添加到图形图层中。每个地图都有一个图形图层，其中包含一个最初为空的图形数组，直到您添加图形为止。该图层可以包含任何类型的图形对象。这意味着您可以同时混合点、线和多边形。图形通过`add()`方法添加到图层中，也可以通过`remove()`方法单独删除。如果需要同时删除所有图形，则可以使用`clear()`方法。图形图层还具有可以注册的多个事件，包括`click`、`mouse-down`等。
- en: Multiple graphics layers
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个图形图层
- en: Multiple graphics layers are supported by the API, making it much easier to
    organize different types of graphics. Layers can be easily removed or added, as
    required. For example, you can put polygon graphics that represent counties in
    one graphics layer and point graphics that represent traffic incidents in another
    graphics layer. Then you can easily add or remove either layer as required.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: API支持多个图形图层，这样可以更轻松地组织不同类型的图形。图层可以根据需要轻松添加或删除。例如，您可以将代表县的多边形图形放在一个图形图层中，将代表交通事故的点图形放在另一个图形图层中。然后，您可以根据需要轻松添加或删除任一图层。
- en: Time to practice with graphics
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候练习图形了。
- en: 'In this exercise, you will learn how to create and display graphics on a map.
    We are going to create a thematic map, that shows population density by county
    for the state of Colorado. You will also be introduced to query tasks. As you
    will learn in a later chapter, tasks can be executed in ArcGIS Server and include
    things such as spatial and attribute queries, identification of features, and
    geocoding. Finally, you will learn how to attach attributes to your graphic features
    and display them in an info window:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将学习如何在地图上创建和显示图形。我们将创建一个专题地图，显示科罗拉多州按县的人口密度。您还将介绍查询任务。正如您将在以后的章节中学到的那样，任务可以在ArcGIS
    Server中执行，并包括空间和属性查询、要素识别和地理编码等内容。最后，您将学习如何将属性附加到您的图形要素并在信息窗口中显示它们：
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)上打开JavaScript沙盒。
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code block:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下代码块中突出显示的`<script>`标记中删除JavaScript内容：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create the variables that you'll use in the application.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建您将在应用程序中使用的变量。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the `require()` function as seen in the following highlighted code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加如下突出显示的代码中所见的`require()`函数：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We covered the `esri/map` resource in a past exercise, so no additional explanation
    should be necessary. The `esri/tasks/query` and `esri/tasks/QueryTask` resources
    are new and we won't cover them until a later chapter. However, in order to complete
    this exercise, it is necessary for me to introduce these to you at this point.
    These resources enable you to perform spatial and attribute queries on a data
    layer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以前的练习中介绍了`esri/map`资源，因此不需要额外的解释。`esri/tasks/query`和`esri/tasks/QueryTask`资源是新的，我们将在以后的章节中介绍它们。然而，为了完成这个练习，有必要在这一点上向您介绍这些资源。这些资源使您能够在数据图层上执行空间和属性查询。
- en: 'Inside the `require()` function, you will need to create a `Map` object and
    add a `basemap: streets` layer by adding the following highlighted code. You will
    set the initial map extent to display the state of Colorado:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`require()`函数内部，您需要创建一个`Map`对象，并通过添加以下突出显示的代码来添加一个`basemap: streets`图层。您将设置初始地图范围以显示科罗拉多州的状态：'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Inside the `require()` function, just below the code block that creates the
    `Map` object, add the highlighted line of code to create a new polygon symbol
    that is transparent. This creates a new `SimpleFillSymbol` object and assigns
    it to the `defPopSymbol` variable. We use RGB values of `255,255,255,and 0` to
    ensure that the filled color will be completely transparent. This is accomplished
    through the value `0`, which ensures that our coloring will be fully transparent.
    Later, we will add additional symbol objects so that we can display a color-coded
    map of county population density. For now though, we simply want to create a symbol
    so that you can understand the basic procedure of creating and displaying graphics
    on a map. The following code explains the process in detail:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`require()`函数内部，在创建`Map`对象的代码块正下方，添加突出显示的代码行以创建一个新的透明多边形符号。这将创建一个新的`SimpleFillSymbol`对象并将其分配给`defPopSymbol`变量。我们使用`255,255,255,和0`的RGB值来确保填充颜色完全透明。这是通过值`0`来实现的，它确保我们的着色将完全透明。稍后，我们将添加额外的符号对象，以便我们可以显示一个按县人口密度着色的地图。但现在，我们只是想创建一个符号，以便您可以理解在地图上创建和显示图形的基本过程。以下代码详细解释了这个过程：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the next step, you are going to get a preview of how the `Query` task can
    be used in an application. We'll cover this task in detail in a later chapter
    but for now, here is an introduction. The `Query` task can be used to perform
    spatial and attribute queries on a data layer in a map service. In this exercise,
    we are going to use a `Query` task to perform an attribute query against a county
    boundary layer provided through an ESRI service.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，您将预览`Query`任务如何在应用程序中使用。我们将在以后的章节中详细介绍这个任务，但现在，这是一个介绍。`Query`任务可用于在地图服务中的数据图层上执行空间和属性查询。在这个练习中，我们将使用`Query`任务对通过ESRI服务提供的县边界图层执行属性查询。
- en: Let's first examine the map service and layer that we will use in our query.
    Open a web browser and go to [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer).
    This map service provides census information for U.S. states and counties and
    also includes a highway layer. In this exercise, we are interested in the county
    layer that has an index number of two. Click on the **counties** option to get
    detailed information about this layer. There are a lot of fields in this layer,
    but we are really only interested in the field that will allow us to query by
    state name and the field that gives us information on the population density.
    The `STATE_NAME` field gives us the state name of each county and the `POP90_SQMI`
    field gives us the population density of each county.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先检查我们将在查询中使用的地图服务和图层。打开一个网络浏览器，转到[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer)。该地图服务提供美国各州和县的人口普查信息，还包括一条高速公路图层。在这个练习中，我们对具有索引号为2的县图层感兴趣。单击**counties**选项以获取有关此图层的详细信息。该图层中有许多字段，但我们实际上只对能够按州名查询的字段和提供每个县人口密度信息的字段感兴趣。`STATE_NAME`字段提供每个县的州名，`POP90_SQMI`字段提供每个县的人口密度。
- en: 'Return to the Sandbox. Below the line of code where we created our symbol,
    initialize a new `QueryTask` object by adding the following line of code just
    below the line that created the `defPopSymbol` variable. What this line does is
    create a new `QueryTask` object that points to the `ESRI_StateCityHighway_USA`
    map service that we just examined in our browser and specifically points to layer
    index `2`, which is our county layer. The following code explains the process
    in detail:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回沙盒。在创建符号的代码行的下面，通过添加以下一行代码来初始化一个新的`QueryTask`对象来创建一个新的`QueryTask`对象。这行代码的作用是创建一个指向我们在浏览器中刚刚检查的`ESRI_StateCityHighway_USA`地图服务的新`QueryTask`对象，并明确指向索引为`2`的图层，即我们的县图层。以下代码详细解释了这个过程。
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'All `QueryTask` objects need input parameters so that they know what to execute
    against the layer. This is accomplished through a `Query` object. Add the following
    line of code right below the line you just entered:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有`QueryTask`对象都需要输入参数，以便它们知道要针对图层执行什么。这是通过`Query`对象实现的。在刚刚输入的行的下面添加以下一行代码：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we will define some of the properties on our new `Query` object that will
    enable us to perform an attribute query. Add the following three highlighted lines
    of code just below the line that created the `query` variable:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义新的`Query`对象上的一些属性，这些属性将使我们能够执行属性查询。在创建`query`变量的行的下面添加以下三行代码：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `where` property is used to create a SQL statement that will be executed
    against the layer. In this case, we're stating that we'd like to return only those
    county records that have a state name of `Colorado`. Setting the `returnGeometry`
    property to `true` indicates that we would like ArcGIS Server to return the geometric
    definition of all the features that matched our query. This is necessary because
    we need to plot these features as graphics on top of the map. Finally, the `outFields`
    property is used to define which fields we would like to be returned along with
    the geometry. This information will be used later when we create the color-coded
    map of a county's population density.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`where`属性用于创建一个SQL语句，该语句将针对该图层执行。在这种情况下，我们声明我们只想返回那些州名为`Colorado`的县记录。将`returnGeometry`属性设置为`true`表示我们希望ArcGIS
    Server返回与我们的查询匹配的所有要素的几何定义。这是必要的，因为我们需要在地图上将这些要素绘制为图形。最后，`outFields`属性用于定义我们希望与几何一起返回的字段。稍后在创建县人口密度的色彩编码地图时将使用这些信息。'
- en: 'Finally, we will use the `execute` method on `queryTask` to perform the query
    against the layer that we have indicated (counties), using the parameters defined
    on our `query` object. Add the following line of code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用`queryTask`上的`execute`方法来执行针对我们已指定的图层（counties）的查询，使用我们`query`对象上定义的参数。添加以下一行代码：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In addition to passing the `query` object into ArcGIS Server, we have also indicated
    that `addPolysToMap` will serve as the callback function. This function will be
    executed after ArcGIS Server has performed the query and returned the results.
    It is up to the `addPolysToMap` function to plot the records using the `featureSet`
    object returned to it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将`query`对象传递给ArcGIS Server之外，我们还指示`addPolysToMap`将作为回调函数。此函数将在ArcGIS Server执行查询并返回结果后执行。`addPolysToMap`函数负责使用返回给它的`featureSet`对象绘制记录。
- en: 'As I mentioned in the previous step, the callback function `addPolysToMap`
    will be executed when ArcGIS Server returns the `featureSet` object, which contains
    the records that matched our attribute query. Before creating the callback function,
    let''s first discuss what the code will accomplish. The `addPolysToMap` function
    will take a single parameter `featureSet`. When a `queryTask` object is executed,
    ArcGIS Server returns a `featureSet` object to your code. A `featureSet` object
    contains the graphic objects returned by the query. Inside the `addPolysToMap`
    function, you will see the line `var features = featureSet.features;`. The `features`
    property returns an array with all the graphics contained within it. After defining
    a new feature variable, we create a `for` loop that we will use to loop through
    each of these graphics and plot the graphics to the map. Create the callback function
    by adding the following code block:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我在上一步中提到的，当ArcGIS Server返回`featureSet`对象时，回调函数`addPolysToMap`将被执行，该对象包含与我们的属性查询匹配的记录。在创建回调函数之前，让我们首先讨论代码将实现的内容。`addPolysToMap`函数将接受一个名为`featureSet`的参数。当执行`queryTask`对象时，ArcGIS
    Server会将一个`featureSet`对象返回给您的代码。`featureSet`对象包含查询返回的图形对象。在`addPolysToMap`函数内部，您将看到一行`var
    features = featureSet.features;`。`features`属性返回一个包含其中所有图形的数组。在定义了一个新的feature变量之后，我们创建了一个`for`循环，用于循环遍历这些图形并将其绘制到地图上。通过添加以下代码块来创建回调函数：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As I mentioned earlier, you have to add each graphic that you create to the
    `GraphicsLayer` object. This is done through the `add()` method as you saw in
    the preceding code block. You will also notice that we are attaching the symbol
    we created earlier to each of the graphics (county boundaries).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，您必须将创建的每个图形添加到`GraphicsLayer`对象中。这是通过`add()`方法完成的，就像您在前面的代码块中看到的那样。您还会注意到，我们将之前创建的符号附加到每个图形（县边界）上。
- en: Execute the code by clicking on the **Run** button and you should see the following
    screenshot as the output if everything has been coded correctly. Notice that each
    of the counties has been outlined with the symbol that we defined.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击**运行**按钮执行代码，如果一切编码正确，您应该看到以下截图作为输出。请注意，每个县都用我们定义的符号轮廓化了。
- en: '![Time to practice with graphics](graphics/7965_03_16.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![练习图形时间](graphics/7965_03_16.jpg)'
- en: 'Now we are going to add additional code to the application that will color-code
    each of the counties based on population. Comment out the `defPopSymbol` variable
    inside the `require()` function and add five new symbols as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向应用程序添加额外的代码，根据人口对每个县进行颜色编码。在`require()`函数内注释掉`defPopSymbol`变量，并添加五个新符号，如下所示：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What we're doing here is basically creating a color ramp of symbols that will
    be assigned to each county, based on the population density. We are also applying
    a transparency value of .85 to each symbol so that we will be able to see through
    each of the counties. This will enable us to see the base map placed below the
    layer that contains the city names.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的基本上是创建一个基于人口密度为每个县分配符号的颜色渐变。我们还对每个符号应用了透明度值为0.85，以便我们能够透过每个县。这将使我们能够看到放置在包含城市名称的图层下面的底图。
- en: 'Recall that earlier in the exercise, we created `queryTask` and `Query` objects
    and defined an `outFields` property on `Query` to return the `POP90_SQMI` field.
    This will now come into play as we will use the values returned in this field
    to determine the symbol applied to each county based on the population density
    of that county. Update the `addPolysToMap` function to appear as seen in the following
    code block, and then we will discuss what we have done:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在之前的练习中，我们创建了`queryTask`和`Query`对象，并在`Query`上定义了一个`outFields`属性，以返回`POP90_SQMI`字段。现在，我们将使用在该字段中返回的值来确定应用于每个县的符号，该符号基于该县的人口密度。更新`addPolysToMap`函数，使其出现在以下代码块中，然后我们将讨论我们所做的事情：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What we have done with the preceding code block is obtain the population density
    information from each graphic and save it to a variable called `pop`. An `if/else`
    code block is then used to assign a symbol to the graphic, based on the population
    density of that county. For example, a county with a population density (as defined
    in the `POP90_SQMI` field) of `400` would be assigned the symbol defined by `fourPopSymbol`.
    Because we are in a `for` loop that examines every county in Colorado, each county
    graphic will be assigned a symbol.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们所做的是从每个图形中获取人口密度信息，并将其保存到名为`pop`的变量中。然后使用`if/else`代码块根据该县的人口密度为图形分配符号。例如，具有人口密度（如`POP90_SQMI`字段中定义的）为`400`的县将被分配为由`fourPopSymbol`定义的符号。因为我们在一个`for`循环中检查科罗拉多州的每个县，所以每个县图形都将被分配一个符号。
- en: Execute the code by clicking on the **Run** button and you should see the following
    screenshot as the output if everything has been coded correctly. Notice that each
    of the counties has been color-coded with one of the symbols that we defined earlier.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击**运行**按钮执行代码，如果一切编码正确，您应该看到以下截图作为输出。请注意，每个县都已根据我们之前定义的符号进行了颜色编码。
- en: '![Time to practice with graphics](graphics/7965_03_17.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![练习图形时间](graphics/7965_03_17.jpg)'
- en: Now you will learn how to attach attributes to a graphic and display them in
    an info window when the graphic is clicked.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将学习如何将属性附加到图形，并在单击图形时在信息窗口中显示它们。
- en: 'An info window is an HTML pop-up window that gets displayed when you click
    on a graphic. Normally, it contains the attributes of the clicked graphic but
    it can also contain custom content that you specify as a developer. The content
    of these windows is specified through an `InfoTemplate` object that specifies
    a title for the window and the content to be displayed in the window. The easiest
    way to create an `InfoTemplate` object is to use a wildcard for the content that
    will automatically insert all the fields of a dataset into the info window. We
    are going to add some additional output fields so that more content can be displayed
    in the info window. Alter the `query.outFields` line to include the fields highlighted
    in the following code line:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 信息窗口是在单击图形时显示的HTML弹出窗口。通常，它包含单击图形的属性，但也可以包含您作为开发人员指定的自定义内容。这些窗口的内容是通过指定窗口标题和要在窗口中显示的内容的`InfoTemplate`对象指定的。创建`InfoTemplate`对象的最简单方法是使用通配符，该通配符将自动将数据集的所有字段插入到信息窗口中。我们将添加一些额外的输出字段，以便在信息窗口中显示更多内容。修改`query.outFields`行，以包括以下代码行中突出显示的字段：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, add the following line of code just below the `queryTask.execute` line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`queryTask.execute`行的下面添加以下代码行：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first parameter passed into the constructor (`"County Attributes"`) is the
    title for the window. The second parameter is a wildcard indicating that all the
    name-value pairs of the attribute should be printed in the window. Therefore,
    the new fields that we added to `query.outFields` should all be included in the
    info window when a graphic is clicked.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给构造函数的第一个参数（`"County Attributes"`）是窗口的标题。第二个参数是一个通配符，表示应在窗口中打印属性的所有名称-值对。因此，我们添加到`query.outFields`的新字段应全部包含在单击图形时的信息窗口中。
- en: 'Finally, we use the `Graphic.setInfoTemplate()` method to assign the newly
    created `InfoTemplate` object to a graphic. Alter your `if/else` statement by
    adding the following highlighted code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`Graphic.setInfoTemplate()`方法将新创建的`InfoTemplate`对象分配给图形。通过添加以下突出显示的代码来修改您的`if/else`语句：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Execute the code by clicking on the **Run** button. Click on any of the counties
    in the map and you should see an info window similar to the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击**运行**按钮执行代码。单击地图中的任何县，您应该看到类似以下屏幕截图的信息窗口：
- en: '![Time to practice with graphics](graphics/7965_03_18.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![练习图形](graphics/7965_03_18.jpg)'
- en: You can view the solution code for this exercise in the `graphicexercise.html`
    file of your `ArcGISJavaScriptAPI` folder to verify that your code has been written
    correctly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`ArcGISJavaScriptAPI`文件夹的`graphicexercise.html`文件中查看此练习的解决方案代码，以验证您的代码是否已正确编写。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that graphics are often used to represent information
    that is generated as the result of actions performed within a working application.
    Frequently, these graphics are returned as the result of a task that has been
    performed, such as an attribute or spatial query. This can include points, lines,
    polygon, and text. These are temporary objects, only displayed during the current
    browser session. Each graphic can be composed of geometry, symbology, attributes,
    and an info template, and is added to the map through the use of a graphics layer,
    which is always the topmost layer in an application. This ensures that the contents
    of the layer will always be visible. In the next chapter, we'll introduce you
    to the feature layer, which can do everything that a graphics layer can do and
    more!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解到图形通常用于表示作为工作应用程序内执行操作的结果生成的信息。通常，这些图形是作为已执行的任务的结果返回的，例如属性或空间查询。这可以包括点、线、多边形和文本。这些都是临时对象，仅在当前浏览器会话期间显示。每个图形可以由几何、符号、属性和信息模板组成，并通过图形图层添加到地图中，该图层始终是应用程序中最顶层的图层。这确保了图层的内容始终可见。在下一章中，我们将向您介绍要素图层，它可以执行图形图层可以执行的所有操作以及更多！
