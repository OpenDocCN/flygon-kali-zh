["```kt\n// Declare and initialize a new Intent object called myIntent\nIntent myIntent = new Intent(this, SettingsActivity.class);\n// Switch to the SettingsActivity\nstartActivity(myIntent);\n```", "```kt\n// Create a String called username \n// and set its value to bob\nString username = \"Bob\";\n// Create a new Intent as we have already seen\nIntent myIntent = new Intent(this, SettingsActivity.class);\n// Add the username String to the Intent\n// using the putExtra method of the Intent class\nmyIntent.putExtra(\"USER_NAME\", username);\n// Start the new Activity as we did before\nstartActivity(myIntent);\n```", "```kt\n// Here we need an Intent also\n// But the default constructor will do\n// as we are not switching Activity\nIntent myIntent = new Intent();\n// Initialize username with the passed in String \nString username = intent.getExtra().getStringKey(\"USER_NAME\");\n```", "```kt\nIntent myIntent = new Intent();\n```", "```kt\n<activity android:name=\".SettingsActivity\"></activity>\n```", "```kt\n//noinspection SimplifiableIfStatement\nif (id == R.id.action_settings) {\n\u00a0\u00a0\u00a0return true;\n}\n```", "```kt\nIntent intent = new Intent(this, SettingsActivity.class);\nstartActivity(intent);\n```", "```kt\nimport android.content.Intent;\n```", "```kt\n// A SharedPreferences for reading data\nSharedPreferences prefs;\n// A SharedPreferences.Editor for writing data\nSharedPreferences.Editor editor; \n```", "```kt\nprefs = getSharedPreferences(\"My App\", MODE_PRIVATE);\n```", "```kt\neditor = prefs.edit();\n```", "```kt\neditor.putString(\"username\", username);\neditor.commit();\n```", "```kt\neditor.putString(\"username\", username);\neditor.putInt(\"age\", age);\neditor.putBoolean(\"newsletter-subscriber\", subscribed);\n// Save all the above data\neditor.commit();\n```", "```kt\nString username\u00a0\u00a0= \n\u00a0\u00a0\u00a0prefs.getString(\"username\", \"new user\");\nint age\u00a0\u00a0= prefs.getInt(\"age\", -1);\nboolean subscribed = \n\u00a0\u00a0\u00a0prefs.getBoolean(\"newsletter-subscriber\", false)\n```", "```kt\nif (age == -1){\n\u00a0\u00a0\u00a0// Ask the user for his age\n}\n```", "```kt\nprivate SharedPreferences mPrefs;\nprivate SharedPreferences.Editor mEditor;\nprivate boolean mShowDividers;\n```", "```kt\nimport android.content.SharedPreferences;\n```", "```kt\nmPrefs = getSharedPreferences(\"Note to self\", MODE_PRIVATE);\nmEditor = mPrefs.edit();\n```", "```kt\nmShowDividers\u00a0\u00a0= mPrefs.getBoolean(\"dividers\", true);\nSwitch switch1 = findViewById(R.id.switch1);\n// Set the switch on or off as appropriate\nswitch1.setChecked(mShowDividers);\n```", "```kt\nimport android.widget.Switch;\n```", "```kt\nswitch1.setOnCheckedChangeListener(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new CompoundButton.OnCheckedChangeListener() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void onCheckedChanged(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CompoundButton buttonView, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean isChecked) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(isChecked){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mEditor.putBoolean(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"dividers\", true);\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mShowDividers = true;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}else{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mEditor.putBoolean(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"dividers\", false);\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mShowDividers = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n);\n```", "```kt\nimport android.widget.CompoundButton;\n```", "```kt\n@Override\nprotected void onPause() {\n\u00a0\u00a0\u00a0super.onPause();\n\u00a0\u00a0\u00a0// Save the settings here\n\u00a0\u00a0\u00a0mEditor.commit();\n}\n```", "```kt\nprivate List<Note> noteList = new ArrayList<>();\nprivate RecyclerView recyclerView;\nprivate NoteAdapter mAdapter;\nprivate boolean mShowDividers;\nprivate SharedPreferences mPrefs;\n```", "```kt\nimport android.content.SharedPreferences;\n```", "```kt\n@Override\nprotected void onResume(){\n\u00a0\u00a0\u00a0super.onResume();\n\u00a0\u00a0\u00a0mPrefs = getSharedPreferences(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Note to self\", MODE_PRIVATE);\n\n\u00a0\u00a0\u00a0mShowDividers\u00a0\u00a0= mPrefs.getBoolean(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"dividers\", true);\n}\n```", "```kt\n// Add a neat dividing line between items in the list\nrecyclerView.addItemDecoration(\n\u00a0\u00a0\u00a0new DividerItemDecoration(\n\u00a0\u00a0\u00a0this, LinearLayoutManager.VERTICAL));\n```", "```kt\nif(mShowDividers) {\n\u00a0\u00a0\u00a0// Add a neat dividing line between list items\n\u00a0\u00a0\u00a0recyclerView.addItemDecoration(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new DividerItemDecoration(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this, LinearLayoutManager.VERTICAL));\n}else{\n\u00a0\u00a0\u00a0// check there are some dividers\n// or the app will crash\nif(recyclerView.getItemDecorationCount() > 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0recyclerView.removeItemDecorationAt(0);\n}\n}\n```", "```kt\npublic void somePrecariousMethod() throws someException{\n\u00a0\u00a0\u00a0// Risky code goes here\n}\n```", "```kt\ntry{\n\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0somePrecariousMethod();\n\u00a0\u00a0\u00a0...\n}catch(someException e){\n\u00a0\u00a0\u00a0Log.e(\"Exception:\" + e, \"Uh ohh\")\n\u00a0\u00a0\u00a0// Take action if possible\n}\n```", "```kt\nfinally{\n\u00a0\u00a0\u00a0// More action here\n}\n```", "```kt\nprivate static final String JSON_TITLE = \"title\";\nprivate static final String JSON_DESCRIPTION = \"description\";\nprivate static final String JSON_IDEA = \"idea\";\nprivate static final String JSON_TODO = \"todo\";\nprivate static final String JSON_IMPORTANT = \"important\";\n```", "```kt\n// Constructor\n// Only used when new is called with a JSONObject\npublic Note(JSONObject jo) throws JSONException {\n\n\u00a0\u00a0\u00a0mTitle =\u00a0\u00a0jo.getString(JSON_TITLE);\n\u00a0\u00a0\u00a0mDescription = jo.getString(JSON_DESCRIPTION);\n\u00a0\u00a0\u00a0mIdea = jo.getBoolean(JSON_IDEA);\n\u00a0\u00a0\u00a0mTodo = jo.getBoolean(JSON_TODO);\n\u00a0\u00a0\u00a0mImportant = jo.getBoolean(JSON_IMPORTANT);\n}\n// Now we must provide an empty default constructor \n// for when we create a Note as we provide a\n// specialized constructor.\npublic Note (){\n}\n```", "```kt\nimport org.json.JSONException;\nimport org.json.JSONObject;\n```", "```kt\npublic JSONObject convertToJSON() throws JSONException{\n\n\u00a0\u00a0\u00a0JSONObject jo = new JSONObject();\n\u00a0\u00a0\u00a0jo.put(JSON_TITLE, mTitle);\n\u00a0\u00a0\u00a0jo.put(JSON_DESCRIPTION, mDescription);\n\u00a0\u00a0\u00a0jo.put(JSON_IDEA, mIdea);\n\u00a0\u00a0\u00a0jo.put(JSON_TODO, mTodo);\n\u00a0\u00a0\u00a0jo.put(JSON_IMPORTANT, mImportant);\n\u00a0\u00a0\u00a0return jo;\n}\n```", "```kt\npublic class JSONSerializer {\n\u00a0\u00a0\u00a0\u00a0private String mFilename;\n\u00a0\u00a0\u00a0\u00a0private Context mContext;\n\n\u00a0\u00a0\u00a0// All the rest of the code for the class goes here\n\n}// End of class\n```", "```kt\npublic JSONSerializer(String fn, Context con){\n\u00a0\u00a0\u00a0mFilename = fn;\n\u00a0\u00a0\u00a0mContext = con;\n}\n```", "```kt\npublic void save(List<Note> notes)\n\u00a0\u00a0\u00a0throws IOException, JSONException{\n\u00a0\u00a0\u00a0// Make an array in JSON format\n\u00a0\u00a0\u00a0JSONArray jArray = new JSONArray();\n\u00a0\u00a0\u00a0// And load it with the notes\n\u00a0\u00a0\u00a0for (Note n : notes)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jArray.put(n.convertToJSON());\n\u00a0\u00a0\u00a0// Now write it to the private disk space of our app\n\u00a0\u00a0\u00a0Writer writer = null;\n\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OutputStream out = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mContext.openFileOutput(mFilename,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mContext.MODE_PRIVATE);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writer = new OutputStreamWriter(out);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writer.write(jArray.toString());\n\u00a0\u00a0\u00a0} finally {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (writer != null) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0writer.close();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.List;\n```", "```kt\npublic ArrayList<Note> load() throws IOException, JSONException{\n\u00a0\u00a0\u00a0ArrayList<Note> noteList = new ArrayList<Note>();\n\u00a0\u00a0\u00a0BufferedReader reader = null;\n\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InputStream in = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mContext.openFileInput(mFilename);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reader = new BufferedReader(new \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0InputStreamReader(in));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StringBuilder jsonString = new StringBuilder();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0String line = null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ((line = reader.readLine()) != null) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jsonString.append(line);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0JSONArray jArray = (JSONArray) new\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0JSONTokener(jsonString.toString()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0).nextValue();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < jArray.length(); i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noteList.add(new \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Note(jArray.getJSONObject(i)));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0} catch (FileNotFoundException e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// we will ignore this one, since it happens\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// when we start fresh. You could add a log here.\n\u00a0\u00a0\u00a0} finally {// This will always run\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (reader != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reader.close();\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0return noteList;\n}\n```", "```kt\nimport org.json.JSONTokener;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n```", "```kt\npublic class MainActivity extends AppCompatActivity {\n\u00a0\u00a0\u00a0private JSONSerializer mSerializer;\n\u00a0\u00a0\u00a0//private List<Note> noteList = new ArrayList<>();\n\u00a0\u00a0\u00a0private List<Note> noteList;\n```", "```kt\n\u2026\nFloatingActionButton fab = \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(FloatingActionButton) findViewById(R.id.fab);\n\nfab.setOnClickListener(new View.OnClickListener() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0@Override\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public void onClick(View view) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DialogNewNote dialog = new DialogNewNote();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dialog.show(getSupportFragmentManager(), \"\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n});\n\u00a0\u00a0\u00a0mSerializer = new JSONSerializer(\"NoteToSelf.json\", \n\u00a0\u00a0\u00a0getApplicationContext());\n\u00a0\u00a0\u00a0try {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noteList = mSerializer.load();\n\u00a0\u00a0\u00a0} catch (Exception e) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0noteList = new ArrayList<Note>();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.e(\"Error loading notes: \", \"\", e);\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0recyclerView =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0findViewById(R.id.recyclerView);\nmAdapter = new NoteAdapter(this, noteList);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u2026\n```", "```kt\npublic void saveNotes(){\n\u00a0\u00a0\u00a0try{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mSerializer.save(noteList);\n\u00a0\u00a0\u00a0}catch(Exception e){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Log.e(\"Error Saving Notes\",\"\", e);\n\u00a0\u00a0\u00a0}\n}\n```", "```kt\n@Override\nprotected void onPause(){\n\u00a0\u00a0\u00a0super.onPause();\n\u00a0\u00a0\u00a0saveNotes();\n}\n```"]