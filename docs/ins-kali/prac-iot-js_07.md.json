["```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar request = require('request'); \nvar ADXL345 = require('adxl345-sensor'); \nrequire('events').EventEmitter.prototype._maxListeners = 100; \n\nvar adxl345 = new ADXL345(); // defaults to i2cBusNo 1, i2cAddress 0x53 \n\nvar Lcd = require('lcd'), \n    lcd = new Lcd({ \n        rs: 12, \n        e: 21, \n        data: [5, 6, 17, 18], \n        cols: 8, \n        rows: 2 \n    }); \n\nvar aclCtr = 0, \n    locCtr = 0; \n\nvar prevX, prevY, prevZ, prevSMV, prevFALL; \nvar locationG; // global location variable \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    client.subscribe('socket'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        displayLocation(); \n        initADXL345(); \n        client.publish('api-engine', mac); \n    }); \n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nfunction initADXL345() { \n    adxl345.init() \n        .then(() => adxl345.setMeasurementRange(ADXL345.RANGE_2_G())) \n        .then(() => adxl345.setDataRate(ADXL345.DATARATE_100_HZ())) \n        .then(() => adxl345.setOffsetX(0)) // measure for your particular device \n        .then(() => adxl345.setOffsetY(0)) // measure for your particular device \n        .then(() => adxl345.setOffsetZ(0)) // measure for your particular device \n        .then(() => adxl345.getMeasurementRange()) \n        .then((range) => { \n            console.log('Measurement range:', ADXL345.stringifyMeasurementRange(range)); \n            return adxl345.getDataRate(); \n        }) \n        .then((rate) => { \n            console.log('Data rate: ', ADXL345.stringifyDataRate(rate)); \n            return adxl345.getOffsets(); \n        }) \n        .then((offsets) => { \n            console.log('Offsets: ', JSON.stringify(offsets, null, 2)); \n            console.log('ADXL345 initialization succeeded'); \n            loop(); \n        }) \n        .catch((err) => console.error('ADXL345 initialization failed:', err)); \n} \n\nfunction loop() { \n    // infinite loop, with 3 seconds delay \n    setInterval(function() { \n        // wait till we get the location \n        // then start processing \n        if (!locationG) return; \n\n        readSensorValues(function(acclVals) { \n            var x = acclVals.x; \n            var y = acclVals.y; \n            var z = acclVals.z; \n            var fall = 0; \n            var smv = Math.sqrt(x * x, y * y, z * z); \n\n            if (smv > 1) { \n                fall = 1; \n            } \n\n            acclVals.smv = smv; \n            acclVals.fall = fall; \n\n            var data2Send = { \n                data: { \n                    acclVals: acclVals, \n                    location: locationG \n                }, \n                macAddress: macAddress \n            }; \n\n            // no duplicate data \n            if (fall === 1 && (x !== prevX || y !== prevY || z !== prevZ || smv !== prevSMV || fall !== prevFALL)) { \n                console.log('Fall Detected >> ', acclVals); \n                client.publish('accelerometer', JSON.stringify(data2Send)); \n                console.log('Data Published'); \n                prevX = x; \n                prevY = y; \n                prevZ = z; \n            } \n        }); \n\n        if (locCtr === 600) { // every 5 mins \n            locCtr = 0; \n            displayLocation(); \n        } \n\n        aclCtr++; \n        locCtr++; \n    }, 500); // every one second \n} \n\nfunction readSensorValues(CB) { \n    adxl345.getAcceleration(true) // true for g-force units, else false for m/s\u00b2 \n        .then(function(acceleration) { \n            if (CB) CB(acceleration); \n        }) \n        .catch((err) => { \n            console.log('ADXL345 read error: ', err); \n        }); \n} \n\nfunction displayLocation() { \n    request('http://ipinfo.io', function(error, res, body) { \n        var info = JSON.parse(body); \n        // console.log(info); \n        locationG = info; \n        var text2Print = ''; \n        text2Print += 'City: ' + info.city; \n        text2Print += ' Region: ' + info.region; \n        text2Print += ' Country: ' + info.country + ' '; \n        lcd.setCursor(16, 0); // 1st row     \n        lcd.autoscroll(); \n        printScroll(text2Print); \n    }); \n} \n\n// a function to print scroll \nfunction printScroll(str, pos) { \n    pos = pos || 0; \n\n    if (pos === str.length) { \n        pos = 0; \n    } \n\n    lcd.print(str[pos]); \n    //console.log('printing', str[pos]); \n\n    setTimeout(function() { \n        return printScroll(str, pos + 1); \n    }, 300); \n} \n\n// If ctrl+c is hit, free resources and exit. \nprocess.on('SIGINT', function() { \n    lcd.clear(); \n    lcd.close(); \n    process.exit(); \n});  \n```", "```js\nmosca -c index.js -v | pino  \n```", "```js\nnpm start  \n```", "```js\nnpm start  \n```", "```js\n[{ \n    \"device\": \"b8:27:eb:39:92:0d\", \n    \"rules\": [ \n    { \n        \"if\": \n        { \n            \"prop\": \"fall\", \n            \"cond\": \"eq\", \n            \"valu\": 1 \n        }, \n        \"then\": \n        { \n            \"action\": \"EMAIL\", \n            \"to\": \"arvind.ravulavaru@gmail.com\" \n        } \n    }] \n}] \n```", "```js\nvar Rules = require('./rules.json'); \n\nexports.processData = function(data) { \n\n    for (var i = 0; i < Rules.length; i++) { \n        if (Rules[i].device === data.macAddress) { \n            // the rule belows to the incoming device's data \n            for (var j = 0; j < Rules[i].rules.length; j++) { \n                // process one rule at a time \n                var rule = Rules[i].rules[j]; \n                var data = data.data.acclVals; \n                if (checkRuleAndData(rule, data)) { \n                    console.log('Rule Matched', 'Processing Then.'); \n                    if (rule.then.action === 'EMAIL') { \n                        console.log('Sending email to', rule.then.to); \n                        EMAIL(rule.then.to); \n                    } else { \n                        console.log('Unknown Then! Please re-check the rules'); \n                    } \n                } else { \n                    console.log('Rule Did Not Matched', rule, data); \n                } \n            } \n        } \n    } \n} \n\n/*   Rule process Helper  */ \nfunction checkRuleAndData(rule, data) { \n    var rule = rule.if; \n    if (rule.cond === 'lt') { \n        return rule.valu < data[rule['prop']]; \n    } else if (rule.cond === 'lte') { \n        return rule.valu <= data[rule['prop']]; \n    } else if (rule.cond === 'eq') { \n        return rule.valu === data[rule['prop']]; \n    } else if (rule.cond === 'gte') { \n        return rule.valu >= data[rule['prop']]; \n    } else if (rule.cond === 'gt') { \n        return rule.valu > data[rule['prop']]; \n    } else if (rule.cond === 'ne') { \n        return rule.valu !== data[rule['prop']]; \n    } else { \n        return false; \n    } \n} \n\n/*Then Helpers*/ \nfunction SMS() { \n    /// AN EXAMPLE TO SHOW OTHER THENs \n} \n\nfunction CALL() { \n    /// AN EXAMPLE TO SHOW OTHER THENs \n} \n\nfunction PUSHNOTIFICATION() { \n    /// AN EXAMPLE TO SHOW OTHER THENs \n} \n\nfunction EMAIL(to) { \n    /// AN EXAMPLE TO SHOW OTHER THENs \n    var email = require('emailjs'); \n    var server = email.server.connect({ \n        user: 'arvind.ravulavaru@gmail.com', \n        password: 'XXXXXXXXXX', \n        host: 'smtp.gmail.com', \n        ssl: true \n    }); \n\n    server.send({ \n        text: 'Fall has been detected. Please attend to the patient', \n        from: 'Patient Bot <arvind.ravulavaru@gmail.com>', \n        to: to, \n        subject: 'Fall Alert!!' \n    }, function(err, message) { \n        if (err) { \n            console.log('Message sending failed!', err); \n        } \n    }); \n} \n```", "```js\nclient.on('message', function(topic, message) { \n    // message is Buffer \n    // console.log('Topic >> ', topic); \n    // console.log('Message >> ', message.toString()); \n    if (topic === 'api-engine') { \n        var macAddress = message.toString(); \n        console.log('Mac Address >> ', macAddress); \n        client.publish('rpi', 'Got Mac Address: ' + macAddress); \n    } else if (topic === 'accelerometer') { \n        var data = JSON.parse(message.toString()); \n        console.log('data >> ', data); \n        // create a new data record for the device \n        Data.create(data, function(err, data) { \n            if (err) return console.error(err); \n            // if the record has been saved successfully,  \n            // websockets will trigger a message to the web-app \n            // console.log('Data Saved :', data.data); \n            // Invoke IFTTT Rules Engine \n            RulesEngine.processData(data); \n        }); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n```", "```js\n<div class=\"container\"> \n  <br> \n  <div *ngIf=\"!device\"> \n    <h3 class=\"text-center\">Loading!</h3> \n  </div> \n  <div class=\"row\" *ngIf=\"lastRecord\"> \n    <div class=\"col-md-12\"> \n      <div class=\"panel panel-info\"> \n        <div class=\"panel-heading\"> \n          <h3 class=\"panel-title\"> \n                        {{device.name}} \n                    </h3> \n          <span class=\"pull-right btn-click\"> \n                        <i class=\"fa fa-chevron-circle-up\"></i> \n                    </span> \n        </div> \n        <div class=\"clearfix\"></div> \n        <div class=\"table-responsive\"> \n          <table class=\"table table-striped\"> \n            <tr *ngIf=\"lastRecord\"> \n              <td>X-Axis</td> \n              <td>{{lastRecord.data.acclVals.x}} {{lastRecord.data.acclVals.units}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Y-Axis</td> \n              <td>{{lastRecord.data.acclVals.y}} {{lastRecord.data.acclVals.units}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Z-Axis</td> \n              <td>{{lastRecord.data.acclVals.z}} {{lastRecord.data.acclVals.units}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Signal Magnitude Vector</td> \n              <td>{{lastRecord.data.acclVals.smv}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Fall State</td> \n              <td>{{lastRecord.data.acclVals.fall ? 'Patient Down' : 'All is well!'}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Location</td> \n              <td>{{lastRecord.data.location.city}}, {{lastRecord.data.location.region}}, {{lastRecord.data.location.country}}</td> \n            </tr> \n            <tr *ngIf=\"lastRecord\"> \n              <td>Received At</td> \n              <td>{{lastRecord.createdAt | date : 'medium'}}</td> \n            </tr> \n          </table> \n          <hr> \n          <div class=\"col-md-12\" *ngIf=\"acclVals.length > 0\"> \n            <canvas baseChart [datasets]=\"acclVals\" [labels]=\"lineChartLabels\" [options]=\"lineChartOptions\" [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\"></canvas> \n          </div> \n        </div> \n      </div> \n    </div> \n  </div> \n</div> \n```", "```js\nnpm start\n```", "```js\nng build --env=prod\n```", "```js\n.\n\n\u251c\u2500\u2500 favicon.ico\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 inline.bundle.js\n\n\u251c\u2500\u2500 inline.bundle.js.map\n\n\u251c\u2500\u2500 main.bundle.js\n\n\u251c\u2500\u2500 main.bundle.js.map\n\n\u251c\u2500\u2500 polyfills.bundle.js\n\n\u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u251c\u2500\u2500 scripts.bundle.js\n\n\u251c\u2500\u2500 scripts.bundle.js.map\n\n\u251c\u2500\u2500 styles.bundle.js\n\n\u251c\u2500\u2500 styles.bundle.js.map\n\n\u251c\u2500\u2500 vendor.bundle.js\n\n\u2514\u2500\u2500 vendor.bundle.js.map\n```", "```js\n.\n\n\u251c\u2500\u2500 app\n\n\u2502 \u251c\u2500\u2500 favicon.ico\n\n\u2502 \u251c\u2500\u2500 index.html\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js\n\n\u2502 \u251c\u2500\u2500 inline.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 main.bundle.js\n\n\u2502 \u251c\u2500\u2500 main.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js\n\n\u2502 \u251c\u2500\u2500 polyfills.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js\n\n\u2502 \u251c\u2500\u2500 scripts.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js\n\n\u2502 \u251c\u2500\u2500 styles.bundle.js.map\n\n\u2502 \u251c\u2500\u2500 vendor.bundle.js\n\n\u2502 \u2514\u2500\u2500 vendor.bundle.js.map\n\n\u251c\u2500\u2500 freeport.js\n\n\u251c\u2500\u2500 index.css\n\n\u251c\u2500\u2500 index.html\n\n\u251c\u2500\u2500 index.js\n\n\u251c\u2500\u2500 license\n\n\u251c\u2500\u2500 package.json\n\n\u251c\u2500\u2500 readme.md\n\n\u2514\u2500\u2500 server.js\n```", "```js\nnpm start  \n```", "```js\n<ion-header> \n  <ion-navbar> \n    <ion-title>Mobile App</ion-title> \n  </ion-navbar> \n</ion-header> \n<ion-content padding> \n  <div *ngIf=\"!lastRecord\"> \n    <h3 class=\"text-center\">Loading!</h3> \n  </div> \n  <div *ngIf=\"lastRecord\"> \n    <ion-list> \n      <ion-item> \n        <ion-label>Name</ion-label> \n        <ion-label>{{device.name}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>X-Axis</ion-label> \n        <ion-label>{{lastRecord.data.acclVals.x}} {{lastRecord.data.acclVals.units}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Y-Axis</ion-label> \n        <ion-label>{{lastRecord.data.acclVals.y}} {{lastRecord.data.acclVals.units}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Z-Axis</ion-label> \n        <ion-label>{{lastRecord.data.acclVals.z}} {{lastRecord.data.acclVals.units}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Signal Magnitude Vector</ion-label> \n        <ion-label>{{lastRecord.data.acclVals.smv}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Fall State</ion-label> \n        <ion-label>{{lastRecord.data.acclVals.fall ? 'Patient Down' : 'All is well!'}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Location</ion-label> \n        <ion-label>{{lastRecord.data.location.city}}, {{lastRecord.data.location.region}}, {{lastRecord.data.location.country}}</ion-label> \n      </ion-item> \n      <ion-item> \n        <ion-label>Received At</ion-label> \n        <ion-label>{{lastRecord.createdAt | date: 'medium'}}</ion-label> \n      </ion-item> \n    </ion-list> \n  </div> \n</ion-content> \n```", "```js\nionic serve  \n```", "```js\nionic cordova run android \n```"]