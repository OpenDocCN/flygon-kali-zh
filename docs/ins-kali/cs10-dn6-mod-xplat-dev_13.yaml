- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Introducing Practical Applications of C# and .NET
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍C#和.NET的实际应用
- en: The third and final part of this book is about practical applications of C#
    and .NET. You will learn how to build cross-platform projects such as websites,
    services, and mobile and desktop apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第三部分是关于C#和.NET的实际应用。您将学习如何构建跨平台项目，如网站、服务以及移动和桌面应用程序。
- en: Microsoft calls platforms for building applications **app models** or **workloads**
    .
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 微软将构建应用程序的平台称为**应用模型**或**工作负载**。
- en: In *Chapters 1* to *18* and *20* , you can use OS-specific Visual Studio or
    cross-platform Visual Studio Code and JetBrains Rider to build all the apps. In
    *Chapter 19* , *Building Mobile and Desktop Apps Using .NET MAUI* (available at
    [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) , although you could use Visual Studio Code to build the mobile and desktop
    app, it is not easy. Visual Studio 2022 for Windows has better support for .NET
    MAUI than Visual Studio Code does (for now).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第1*至*18*和*20*章中，您可以使用特定于操作系统的Visual Studio或跨平台的Visual Studio Code和JetBrains
    Rider构建所有应用程序。在*第19*章中，*使用.NET MAUI构建移动和桌面应用程序*（可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)找到），尽管您可以使用Visual
    Studio Code构建移动和桌面应用程序，但并不容易。目前，Visual Studio 2022 for Windows对.NET MAUI的支持要比Visual
    Studio Code更好。
- en: I recommend that you work through this and subsequent chapters sequentially
    because later chapters will reference projects in earlier chapters, and you will
    build up sufficient knowledge and skills to tackle the trickier problems in later
    chapters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您按顺序阅读本章和后续章节，因为后续章节将引用前面章节中的项目，您将积累足够的知识和技能来解决后续章节中的更棘手的问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding app models for C# and .NET
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解C#和.NET的应用模型
- en: New features in ASP.NET Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core的新功能
- en: Structuring projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Using other project templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他项目模板
- en: Building an entity data model for Northwind
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Northwind构建实体数据模型
- en: Understanding app models for C# and .NET
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解C#和.NET的应用模型
- en: Since this book is about C# 10 and .NET 6, we will learn about app models that
    use them to build the practical applications that we will encounter in the remaining
    chapters of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书涉及C# 10和.NET 6，我们将学习使用它们构建实际应用程序的应用模型，这些应用程序将出现在本书的其余章节中。
- en: '**Learn More** : Microsoft has extensive guidance for implementing app models
    in its .NET Application Architecture Guidance documentation, which you can read
    at the following link: [https://www.microsoft.com/net/learn/architecture](https://www.microsoft.com/net/learn/architecture)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**了解更多**：微软在其.NET应用程序架构指南文档中提供了大量关于实现应用模型的指导，您可以在以下链接阅读：[https://www.microsoft.com/net/learn/architecture](https://www.microsoft.com/net/learn/architecture)'
- en: Building websites using ASP.NET Core
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core构建网站
- en: Websites are made up of multiple web pages loaded statically from the filesystem
    or generated dynamically by a server-side technology such as ASP.NET Core. A web
    browser makes `GET` requests using **Unique Resource Locators** (**URLs** ) that
    identify each page and can manipulate data stored on the server using `POST` ,
    `PUT` , and `DELETE` requests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 网站由多个网页组成，这些网页可以通过文件系统静态加载，也可以通过服务器端技术（如ASP.NET Core）动态生成。Web浏览器使用**统一资源定位符**（**URL**）进行`GET`请求，标识每个页面，并可以使用`POST`，`PUT`和`DELETE`请求操作服务器上存储的数据。
- en: With many websites, the web browser is treated as a presentation layer, with
    almost all the processing performed on the server side. Some JavaScript might
    be used on the client side to implement some presentation features, such as carousels.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多网站，Web浏览器被视为演示层，几乎所有处理都在服务器端执行。一些JavaScript可能会在客户端使用，以实现一些演示功能，如轮播图。
- en: 'ASP.NET Core provides multiple technologies for building websites:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core提供了多种构建网站的技术：
- en: '**ASP.NET Core Razor Pages** and **Razor class libraries** are ways to dynamically
    generate HTML for simple websites. You will learn about them in detail in *Chapter
    14* , *Building Websites Using ASP.NET Core Razor Pages* .'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core Razor Pages**和**Razor类库**是用于简单网站动态生成HTML的方式。您将在*第14章*中详细了解它们，*使用ASP.NET
    Core Razor Pages构建网站*。'
- en: '**ASP.NET Core MVC** is an implementation of the **Model-View-Controller**
    (**MVC** ) design pattern that is popular for developing complex websites. You
    will learn about it in detail in *Chapter 15* , *Building Websites Using the Model-View-Controller
    Pattern* .'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core MVC**是**Model-View-Controller**（**MVC**）设计模式的一种实现，用于开发复杂网站。您将在*第15章*中详细了解它，*使用Model-View-Controller模式构建网站*。'
- en: '**Blazor** lets you build user interface components using C# and .NET instead
    of a JavaScript-based UI framework like Angular, React, and Vue. **Blazor WebAssembly**
    runs your code in the browser like a JavaScript-based framework would. **Blazor
    Server** runs your code on the server and updates the web page dynamically. You
    will learn about Blazor in detail in *Chapter 17* , *Building User Interfaces
    Using Blazor* . Blazor is not just for building websites; it can also be used
    to create hybrid mobile and desktop apps.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor**允许您使用C#和.NET构建用户界面组件，而不是使用基于JavaScript的UI框架，如Angular、React和Vue。**Blazor
    WebAssembly**在浏览器中运行您的代码，就像基于JavaScript的框架一样。**Blazor Server**在服务器上运行您的代码，并动态更新网页。您将在*第17章*中详细了解Blazor，*使用Blazor构建用户界面*。Blazor不仅用于构建网站，还可以用于创建混合移动和桌面应用程序。'
- en: Building websites using a content management system
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用内容管理系统构建网站
- en: Most websites have a lot of content, and if developers had to be involved every
    time some content needed to be changed, that would not scale well. A **Content
    Management System** (**CMS** ) enables developers to define content structure
    and templates to provide consistency and good design while making it easy for
    a non-technical content owner to manage the actual content. They can create new
    pages or blocks of content, and update existing content, knowing it will look
    great for visitors with minimal effort.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都有大量内容，如果开发人员每次需要更改内容时都必须参与其中，那将无法很好地扩展。**内容管理系统**（**CMS**）使开发人员能够定义内容结构和模板，以提供一致性和良好的设计，同时使非技术内容所有者能够轻松管理实际内容。他们可以创建新页面或内容块，并更新现有内容，知道它将以最小的努力为访问者呈现出色。
- en: There is a multitude of CMSs available for all web platforms, like WordPress
    for PHP or Django CMS for Python. CMSs that support modern .NET include Optimizely
    Content Cloud, Piranha CMS, and Orchard Core.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有大量的CMS可用于所有Web平台，如WordPress用于PHP或Django CMS用于Python。支持现代.NET的CMS包括Optimizely
    Content Cloud、Piranha CMS和Orchard Core。
- en: The key benefit of using a CMS is that it provides a friendly content management
    user interface. Content owners log in to the website and manage the content themselves.
    The content is then rendered and returned to visitors using ASP.NET Core MVC controllers
    and views, or via web service endpoints, known as a **headless CMS** , to provide
    that content to "heads" implemented as mobile or desktop apps, in-store touchpoints,
    or clients built with JavaScript frameworks or Blazor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CMS的关键好处是它提供了友好的内容管理用户界面。内容所有者登录网站并自行管理内容。然后，使用ASP.NET Core MVC控制器和视图，或通过Web服务端点（称为**无头CMS**）返回渲染的内容，以向作为移动或桌面应用程序、店内触点或使用JavaScript框架或Blazor构建的客户端提供内容。
- en: 'This book does not cover .NET CMSs, so I have included links where you can
    learn more about them in the GitHub repository:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖.NET CMS，因此我在GitHub存储库中包含了您可以了解更多信息的链接：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#net-content-management-systems)'
- en: Building web applications using SPA frameworks
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SPA框架构建Web应用程序
- en: Web applications, also known as **Single-Page Applications** (**SPAs** ), are
    made up of a single web page built with a frontend technology such as Blazor WebAssembly,
    Angular, React, Vue, or a proprietary JavaScript library that can make requests
    to a backend web service for getting more data when needed and posting updated
    data using common serialization formats such as XML and JSON. The canonical examples
    are Google web apps like Gmail, Maps, and Docs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序，也称为**单页应用程序**（**SPAs**），由使用Blazor WebAssembly、Angular、React、Vue或专有JavaScript库等前端技术构建的单个Web页面组成，可以在需要时向后端Web服务发出请求以获取更多数据，并使用常见的序列化格式（如XML和JSON）发布更新的数据。典型的例子是谷歌的Web应用程序，如Gmail、地图和文档。
- en: With a web application, the client side uses JavaScript frameworks or Blazor
    WebAssembly to implement sophisticated user interactions, but most of the important
    processing and data access still happens on the server side, because the web browser
    has limited access to local system resources.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序，客户端使用JavaScript框架或Blazor WebAssembly来实现复杂的用户交互，但大部分重要的处理和数据访问仍然发生在服务器端，因为Web浏览器对本地系统资源的访问受到限制。
- en: JavaScript is loosely typed and is not designed for complex projects, so most
    JavaScript libraries these days use Microsoft TypeScript, which adds strong typing
    to JavaScript and is designed with many modern language features for handling
    complex implementations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是弱类型的，不适用于复杂项目，因此大多数JavaScript库这些天都使用Microsoft TypeScript，它为JavaScript添加了强类型，并设计了许多现代语言功能，用于处理复杂的实现。
- en: .NET SDK has project templates for JavaScript and TypeScript-based SPAs, but
    we will not spend any time learning how to build JavaScript- and TypeScript-based
    SPAs in this book, even though these are commonly used with ASP.NET Core as the
    backend, because this book is about C#, it is not about other languages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK具有基于JavaScript和TypeScript的SPA的项目模板，但我们不会在本书中花时间学习如何构建基于JavaScript和TypeScript的SPA，尽管这些通常与ASP.NET
    Core作为后端一起使用，因为本书是关于C#，而不是其他语言。
- en: 'In summary, C# and .NET can be used on both the server side and the client
    side to build websites, as shown in *Figure 13.1* :'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，C#和.NET可以在服务器端和客户端用于构建网站，如*图13.1*所示：
- en: '![](img/Image00100.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00100.jpg)'
- en: 'Figure 13.1: The use of C# and .NET to build websites on both the server side
    and the client side'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：使用C#和.NET在服务器端和客户端构建网站
- en: Building web and other services
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建Web和其他服务
- en: Although we will not learn about JavaScript- and TypeScript-based SPAs, we will
    learn how to build a web service using the **ASP.NET Core Web API** , and then
    call that web service from the server-side code in our ASP.NET Core websites,
    and then later, we will call that web service from Blazor WebAssembly components
    and cross-platform mobile and desktop apps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会学习基于JavaScript和TypeScript的SPA，但我们将学习如何使用**ASP.NET Core Web API**构建Web服务，然后从我们的ASP.NET
    Core网站的服务器端代码调用该Web服务，然后稍后，我们将从Blazor WebAssembly组件和跨平台移动和桌面应用程序调用该Web服务。
- en: 'There are no formal definitions, but services are sometimes described based
    on their complexity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有正式的定义，但有时根据其复杂性来描述服务：
- en: '**Service** : all functionality needed by a client app in one monolithic service.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：客户端应用程序所需的所有功能在一个单片服务中。'
- en: '**Microservice** : multiple services that each focus on a smaller set of functionalities.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：每个都专注于较小功能集的多个服务。'
- en: '**Nanoservice** : a single function provided as a service. Unlike services
    and microservices that are hosted 24/7/365, nanoservices are often inactive until
    called upon to reduce resources and costs.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nanoservice**：作为服务提供的单个功能。与24/7/365托管的服务和微服务不同，纳米服务通常处于非活动状态，直到被调用以减少资源和成本。'
- en: 'As well as web services that use HTTP as the underlying communication technology
    and the design principles of the API, we will learn how to build services using
    other technologies and design philosophies, including:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用HTTP作为底层通信技术和API的设计原则的Web服务之外，我们还将学习如何使用其他技术和设计理念构建服务，包括：
- en: '**gRPC** for building highly efficient and performant services with support
    for almost any platform.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gRPC**用于构建高效和高性能的服务，并支持几乎任何平台。'
- en: '**SignalR** for building real-time communications between components.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**用于在组件之间构建实时通信。'
- en: '**OData** for wrapping Entity Framework Core and other data models with a web
    API.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OData**用于使用Web API封装Entity Framework Core和其他数据模型。'
- en: '**GraphQL** for letting the client control what data is retrieved across multiple
    data sources.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL**用于让客户端控制跨多个数据源检索哪些数据。'
- en: '**Azure Functions** for hosting serverless nanoservices in the cloud.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Functions**用于在云中托管无服务器纳米服务。'
- en: Building mobile and desktop apps
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建移动和桌面应用程序
- en: 'There are two major mobile platforms: Apple''s iOS and Google''s Android, each
    with its own programming languages and platform APIs. There are also two major
    desktop platforms: Apple''s macOS and Microsoft''s Windows, each with its own
    programming languages and platform APIs, as shown in the following list:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要的移动平台：苹果的iOS和谷歌的Android，每个平台都有自己的编程语言和平台API。还有两个主要的桌面平台：苹果的macOS和微软的Windows，每个平台都有自己的编程语言和平台API，如下列表所示：
- en: '**iOS** : Objective C or Swift and UIkit.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：Objective C或Swift和UIkit。'
- en: '**Android** : Java or Kotlin and the Android API.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：Java或Kotlin和Android API。'
- en: '**macOS** : Objective C or Swift and AppKit or Catalyst.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**：Objective C或Swift和AppKit或Catalyst。'
- en: '**Windows** : C, C++, or many other languages and the Win32 API or Windows
    App SDK.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：C、C++或许多其他语言和Win32 API或Windows App SDK。'
- en: Since this book is about modern cross-platform development using C# and .NET
    it does not include coverage of building desktop apps using **Windows Forms**
    , **Windows Presentation Foundation** (**WPF** ), or **Universal Windows Platform**
    (**UWP** ) apps because they are Windows-only.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书是关于使用C#和.NET进行现代跨平台开发，因此不包括使用**Windows Forms**、**Windows Presentation Foundation**（**WPF**）或**Universal
    Windows Platform**（**UWP**）应用程序构建桌面应用程序的覆盖范围，因为它们仅适用于Windows。
- en: Cross-platform mobile and desktop apps can be built once for the **.NET Multi-platform
    App User Interfaces** (**MAUI** ) platform, and then can run on many mobile and
    desktop platforms.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台移动和桌面应用程序可以在**.NET多平台应用程序用户界面**（**MAUI**）平台上构建一次，然后可以在许多移动和桌面平台上运行。
- en: .NET MAUI makes it easy to develop those apps by sharing user interface components
    as well as business logic. They can target the same .NET APIs as used by console
    apps, websites, and web services. The app will be executed by the Mono runtime
    on mobile devices and the CoreCLR runtime on desktop devices. The Mono runtime
    is better optimized for mobile devices compared to the normal .NET CoreCLR runtime.
    Blazor WebAssembly also uses the Mono runtime because like a mobile app, it is
    resource constrained.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI通过共享用户界面组件和业务逻辑使开发这些应用程序变得容易。它们可以针对与控制台应用程序、网站和Web服务使用的相同.NET API。应用程序将在移动设备上由Mono运行时执行，在桌面设备上由CoreCLR运行时执行。与普通的.NET
    CoreCLR运行时相比，Mono运行时更好地针对移动设备进行了优化。Blazor WebAssembly也使用了Mono运行时，因为像移动应用程序一样，它受到资源限制。
- en: The apps can exist on their own, but they usually call services to provide an
    experience that spans across all your computing devices, from servers and laptops
    to phones and gaming systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序可以独立存在，但它们通常调用服务来提供跨所有计算设备的体验，从服务器和笔记本电脑到手机和游戏系统。
- en: Future updates to .NET MAUI will support existing MVVM and XAML patterns as
    well as ones like **Model-View-Update** (**MVU** ) with C#, which is like Apple's
    Swift UI.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI的未来更新将支持现有的MVVM和XAML模式，以及像C#这样的**Model-View-Update**（**MVU**）模式，这类似于苹果的Swift
    UI。
- en: The penultimate chapter in this sixth edition is *Chapter 19* , *Building Mobile
    and Desktop Apps Using .NET MAUI* (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) , and covers using .NET MAUI to build cross-platform mobile and desktop apps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第六版中的倒数第二章是*第19章*，*使用.NET MAUI构建移动和桌面应用程序*（可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)找到），涵盖了使用.NET
    MAUI构建跨平台移动和桌面应用程序。
- en: Alternatives to .NET MAUI
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI的替代方案
- en: Before Microsoft created .NET MAUI, third parties created open-source initiatives
    to enable .NET developers to build cross-platform apps using XAML named **Uno**
    and **Avalonia** .
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软创建.NET MAUI之前，第三方创建了开源倡议，以使.NET开发人员能够使用名为**Uno**和**Avalonia**的XAML构建跨平台应用程序。
- en: Understanding Uno Platform
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解Uno平台
- en: As Uno state on their website, it is "the first and only UI Platform for single-codebase
    applications for Windows, WebAssembly, iOS, macOS, Android, and Linux."
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Uno在他们的网站上所说，它是“用于Windows、WebAssembly、iOS、macOS、Android和Linux的单一代码库应用程序的第一个和唯一UI平台。”
- en: Developers can reuse 99% of the business logic and UI layer across native mobile,
    web, and desktop.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以在本机移动、Web和桌面之间重用99%的业务逻辑和UI层。
- en: Uno Platform uses the Xamarin native platform but not Xamarin.Forms. For WebAssembly,
    Uno uses the Mono-WASM runtime just like Blazor WebAssembly. For Linux, Uno uses
    Skia to draw the user interface on the canvas.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Uno平台使用Xamarin本机平台，但不使用Xamarin.Forms。对于WebAssembly，Uno使用与Blazor WebAssembly一样的Mono-WASM运行时。对于Linux，Uno使用Skia在画布上绘制用户界面。
- en: Understanding Avalonia
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解Avalonia
- en: As stated on .NET Foundation's website, Avalonia "is a cross-platform XAML-based
    UI framework providing a flexible styling system and supporting a wide range of
    Operating Systems such as Windows, Linux via Xorg, macOS. Avalonia is ready for
    General-Purpose Desktop App Development."
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据.NET基金会的网站，Avalonia“是一个跨平台的基于XAML的UI框架，提供灵活的样式系统，并支持诸如Windows、通过Xorg的Linux、macOS等多种操作系统。Avalonia已准备好用于通用桌面应用程序开发。”
- en: You can think of Avalonia as a spiritual successor to WPF. WPF, Silverlight,
    and UWP developers familiar with WPF can continue to benefit from their years
    of pre-existing knowledge and skills.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将Avalonia视为WPF的精神继承者。熟悉WPF的WPF、Silverlight和UWP开发人员可以继续受益于他们多年的现有知识和技能。
- en: It was used by JetBrains to modernize their WPF-based tools and take them cross-platform.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains使用它来现代化他们基于WPF的工具并使其跨平台化。
- en: The Avalonia extension for Visual Studio and deep integration with JetBrains
    Rider makes development easier and more productive.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio的Avalonia扩展和与JetBrains Rider的深度集成使开发更加简单和高效。
- en: New features in ASP.NET Core
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core中的新功能
- en: 'Over the past few years, Microsoft has rapidly expanded the capabilities of
    ASP.NET Core. You should note which .NET platforms are supported, as shown in
    the following list:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，微软迅速扩展了ASP.NET Core的功能。您应该注意支持哪些.NET平台，如下列表所示：
- en: ASP.NET Core 1.0 to 2.2 runs on either .NET Core or .NET Framework.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0到2.2可以在.NET Core或.NET Framework上运行。
- en: ASP.NET Core 3.0 or later only runs on .NET Core 3.0 or later.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0或更高版本仅在.NET Core 3.0或更高版本上运行。
- en: ASP.NET Core 1.0
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0
- en: ASP.NET Core 1.0 was released in June 2016 and focused on implementing a minimum
    API suitable for building modern cross-platform web apps and services for Windows,
    macOS, and Linux.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.0于2016年6月发布，重点是实现适用于构建现代跨平台Web应用程序和服务的最小API，适用于Windows、macOS和Linux。
- en: ASP.NET Core 1.1
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.1
- en: ASP.NET Core 1.1 was released in November 2016 and focused on bug fixes and
    general improvements to features and performance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 1.1于2016年11月发布，重点是修复错误并对功能和性能进行一般改进。
- en: ASP.NET Core 2.0
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0
- en: ASP.NET Core 2.0 was released in August 2017 and focused on adding new features
    such as Razor Pages, bundling assemblies into a `Microsoft.AspNetCore.All` metapackage,
    targeting .NET Standard 2.0, providing a new authentication model, and performance
    improvements.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.0于2017年8月发布，重点是添加新功能，如Razor Pages，将程序集捆绑到`Microsoft.AspNetCore.All`元包中，针对.NET
    Standard 2.0，提供新的身份验证模型和性能改进。
- en: The biggest new features introduced with ASP.NET Core 2.0 are ASP.NET Core Razor
    Pages, which is covered in *Chapter 14* , *Building Websites Using ASP.NET Core
    Razor Pages* , and ASP.NET Core OData support, which is covered in *Chapter 18*
    , *Building and Consuming Specialized Services* (available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ) .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'ASP.NET Core 2.0引入的最重要的新功能是ASP.NET Core Razor Pages，涵盖在*第14章*，*使用ASP.NET Core
    Razor Pages构建网站*中，以及ASP.NET Core OData支持，涵盖在*第18章*，*构建和使用专门的服务*中（可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)上找到）。 '
- en: ASP.NET Core 2.1
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1
- en: ASP.NET Core 2.1 was released in May 2018 and was a **Long Term Support** (**LTS**
    ) release, meaning it was supported for three years until August 21, 2021 (LTS
    designation was not officially assigned to it until August 2018 with version 2.1.3).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.1于2018年5月发布，是一个**长期支持**（**LTS**）版本，意味着它在2018年8月21日之前得到支持，持续三年（LTS指定直到2018年8月才正式分配给它，版本为2.1.3）。
- en: 'It focused on adding new features such as **SignalR** for real-time communication,
    **Razor class libraries** for reusing web components, **ASP.NET Core Identity**
    for authentication, and better support for HTTPS and the European Union''s **General
    Data Protection Regulation** (**GDPR** ), including the topics listed in the following
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它的重点是添加新功能，如**SignalR**用于实时通信，**Razor类库**用于重用Web组件，**ASP.NET Core身份验证**以及更好地支持HTTPS和欧盟的**通用数据保护条例**（**GDPR**），包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '|特性|章节|主题|'
- en: '| Razor class libraries | 14 | Using Razor class libraries |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '|Razor类库|14|使用Razor类库|'
- en: '| GDPR support | 15 | Creating and exploring an ASP.NET Core MVC website |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|GDPR支持|15|创建和探索ASP.NET Core MVC网站|'
- en: '| Identity UI library and scaffolding | 15 | Exploring an ASP.NET Core MVC
    website |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '|身份UI库和脚手架|15|探索ASP.NET Core MVC网站|'
- en: '| Integration tests | 15 | Testing an ASP.NET Core MVC website |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '|集成测试|15|测试ASP.NET Core MVC网站|'
- en: '| `[ApiController]` , `ActionResult<T>` | 16 | Creating an ASP.NET Core Web
    API project |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '|`[ApiController]`，`ActionResult<T>`|16|创建ASP.NET Core Web API项目|'
- en: '| Problem details | 16 | Implementing a Web API controller |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '|问题详情|16|实现Web API控制器|'
- en: '| `IHttpClientFactory` | 16 | Configuring HTTP clients using HttpClientFactory
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '|`IHttpClientFactory`|16|使用HttpClientFactory配置HTTP客户端|'
- en: '| ASP.NET Core SignalR | 18 | Implementing Real-time communication using SignalR
    |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|ASP.NET Core SignalR|18|使用SignalR实现实时通信|'
- en: ASP.NET Core 2.2
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2
- en: 'ASP.NET Core 2.2 was released in December 2018 and focused on improving the
    building of RESTful HTTP APIs, updating the project templates to Bootstrap 4 and
    Angular 6, an optimized configuration for hosting in Azure, and performance improvements,
    including the topics listed in the following table:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2于2018年12月发布，重点是改进RESTful HTTP API的构建，更新项目模板以适配Bootstrap 4和Angular
    6，在Azure中进行优化配置，并进行性能改进，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|特性|章节|主题|'
- en: '| HTTP/2 in Kestrel | 14 | Classic ASP.NET versus modern ASP.NET Core |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|Kestrel中的HTTP/2|14|经典ASP.NET与现代ASP.NET Core|'
- en: '| In-process hosting model | 14 | Creating an ASP.NET Core project |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|进程内托管模型|14|创建ASP.NET Core项目|'
- en: '| Endpoint routing | 14 | Understanding endpoint routing |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|端点路由|14|理解端点路由|'
- en: '| Health Check API | 16 | Implementing a health check API |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|健康检查API|16|实现健康检查API|'
- en: '| Open API analyzers | 16 | Implementing Open API analyzers and conventions
    |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| Open API 分析器 | 16 | 实现 Open API 分析器和约定 |'
- en: ASP.NET Core 3.0
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0
- en: 'ASP.NET Core 3.0 was released in September 2019 and focused on fully leveraging
    .NET Core 3.0 and .NET Standard 2.1, which meant it could not support .NET Framework,
    and it added useful refinements, including the topics listed in the following
    table:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.0 在 2019 年 9 月发布，重点是充分利用 .NET Core 3.0 和 .NET Standard 2.1，这意味着它不支持
    .NET Framework，并且添加了有用的改进，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| Static assets in Razor class libraries | 14 | Using Razor class libraries
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| Razor 类库中的静态资源 | 14 | 使用 Razor 类库 |'
- en: '| New options for MVC service registration | 15 | Understanding ASP.NET Core
    MVC startup |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| MVC 服务注册的新选项 | 15 | 了解 ASP.NET Core MVC 启动 |'
- en: '| ASP.NET Core gRPC | 18 | Building services using ASP.NET Core gRPC |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core gRPC | 18 | 使用 ASP.NET Core gRPC 构建服务 |'
- en: '| Blazor Server | 17 | Building components using Blazor Server |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| Blazor Server | 17 | 使用 Blazor Server 构建组件 |'
- en: ASP.NET Core 3.1
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.1
- en: ASP.NET Core 3.1 was released in December 2019 and is an LTS release, meaning
    it will be supported until December 3, 2022\. It focused on refinements like partial
    class support for Razor components and a new `<component>` tag helper.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 3.1 在 2019 年 12 月发布，是一个 LTS 版本，意味着将在 2022 年 12 月 3 日之前得到支持。它专注于改进，如对
    Razor 组件的部分类支持和新的 `<component>` 标签助手。
- en: Blazor WebAssembly 3.2
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 3.2
- en: Blazor WebAssembly 3.2 was released in May 2020\. It was a Current release,
    meaning that projects had to be upgraded to the .NET 5 version within three months
    of the .NET 5 release, that is, by February 10, 2021\. Microsoft finally delivered
    on the promise of full-stack web development with .NET, and both Blazor Server
    and Blazor WebAssembly are covered in *Chapter 17* , *Building User Interfaces
    Using Blazor* .
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 3.2 在 2020 年 5 月发布。这是一个当前版本，意味着项目必须在 .NET 5 版本发布后的三个月内升级，也就是在
    2021 年 2 月 10 日之前。微软最终实现了使用 .NET 进行全栈 Web 开发的承诺，*第 17 章* *使用 Blazor 构建用户界面* 中涵盖了
    Blazor Server 和 Blazor WebAssembly。
- en: ASP.NET Core 5.0
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 5.0
- en: 'ASP.NET Core 5.0 was released in November 2020 and focused on bug fixes, performance
    improvements using caching for certificate authentication, HPACK dynamic compression
    of HTTP/2 response headers in Kestrel, nullable annotations for ASP.NET Core assemblies,
    and a reduction in container image sizes, including the topics listed in the following
    table:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 5.0 在 2020 年 11 月发布，重点是修复错误，使用缓存进行性能改进，Kestrel 中对证书认证进行缓存，HPACK
    动态压缩 HTTP/2 响应头，ASP.NET Core 组件的可空注解，以及减少容器镜像大小，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| Extension method to allow anonymous access to an endpoint | 16 | Securing
    web services |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 扩展方法允许匿名访问端点 | 16 | 保护 Web 服务 |'
- en: '| JSON extension methods for `HttpRequest` and `HttpResponse` | 16 | Getting
    customers as JSON in the controller |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `HttpRequest` 和 `HttpResponse` 的 JSON 扩展方法 | 16 | 在控制器中以 JSON 形式获取客户端 |'
- en: ASP.NET Core 6.0
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 6.0
- en: 'ASP.NET Core 6.0 was released in November 2021 and focused on productivity
    improvements like minimizing code to implement basic websites and services, .NET
    Hot Reload, and new hosting options for Blazor, like hybrid apps using .NET MAUI,
    including the topics listed in the following table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 6.0 在 2021 年 11 月发布，重点是提高生产力，例如最小化代码以实现基本网站和服务，.NET Hot Reload，以及
    Blazor 的新托管选项，如使用 .NET MAUI 的混合应用，包括以下表中列出的主题：
- en: '| Feature | Chapter | Topic |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 特性 | 章节 | 主题 |'
- en: '| New empty web project template | 14 | Understanding the empty web template
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 新的空白 Web 项目模板 | 14 | 了解空白 Web 模板 |'
- en: '| HTTP logging middleware | 16 | Enabling HTTP logging |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| HTTP 日志中间件 | 16 | 启用 HTTP 日志 |'
- en: '| Minimal APIs | 16 | Implementing minimal Web APIs |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 最小 API | 16 | 实现最小的 Web API |'
- en: '| Blazor error boundaries | 17 | Defining Blazor error boundaries |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Blazor 错误边界 | 17 | 定义 Blazor 错误边界 |'
- en: '| Blazor WebAssembly AOT | 17 | Enabling Blazor WebAssembly ahead-of-time compilation
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| Blazor WebAssembly AOT | 17 | 启用 Blazor WebAssembly 预编译 |'
- en: '| .NET Hot Reload | 17 | Fixing code using .NET Hot Reload |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| .NET Hot Reload | 17 | 使用 .NET Hot Reload 修复代码 |'
- en: '| .NET MAUI Blazor apps | 19 | Hosting Blazor components in .NET MAUI apps
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| .NET MAUI Blazor 应用 | 19 | 在 .NET MAUI 应用中托管 Blazor 组件 |'
- en: Building Windows-only desktop apps
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建仅限于 Windows 的桌面应用程序
- en: 'Technologies for building Windows-only desktop apps include:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建仅限于 Windows 的桌面应用程序的技术包括：
- en: '**Windows Forms** , 2002.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Forms**，2002 年。'
- en: '**Windows Presentation Foundation** (**WPF** ), 2006.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Presentation Foundation**（**WPF**），2006 年。'
- en: '**Windows Store** apps, 2012.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Store** 应用，2012 年。'
- en: '**Universal Windows Platform** (**UWP** ) apps, 2015.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Universal Windows Platform**（**UWP**）应用，2015 年。'
- en: '**Windows App SDK** (formerly **WinUI 3** and **Project Reunion** ) apps, 2021.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows App SDK**（原名 **WinUI 3** 和 **Project Reunion**）应用程序，2021 年。'
- en: Understanding legacy Windows application platforms
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解传统的 Windows 应用程序平台
- en: With the Microsoft Windows 1.0 release in 1985, the only way to create Windows
    applications was to use the C language and call functions in three core DLLs named
    kernel, user, and GDI. Once Windows became 32-bit with Windows 95, the DLLs were
    suffixed with 32 and became known as **Win32 API** .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 1985 年，微软发布了 Windows 1.0，创建 Windows 应用程序的唯一方法是使用 C 语言并调用三个核心 DLL 中的函数，这些 DLL
    名为 kernel、user 和 GDI。一旦 Windows 在 Windows 95 中变为 32 位，这些 DLL 就会以 32 为后缀，并被称为 **Win32
    API**。
- en: In 1991, Microsoft introduced Visual Basic, which provided developers with a
    visual, drag-and-drop-from-a-toolbox-of-controls way to build the user interface
    for Windows applications. It was immensely popular, and the Visual Basic runtime
    is still distributed as part of Windows 10 today.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 1991 年，微软推出了 Visual Basic，为开发人员提供了一种可视化、从工具箱中拖放控件的方式来构建 Windows 应用程序的用户界面。它非常受欢迎，而
    Visual Basic 运行时仍然作为 Windows 10 的一部分进行分发。
- en: With the first version of C# and .NET Framework released in 2002, Microsoft
    provided technology for building Windows desktop applications named **Windows
    Forms** . The equivalent at the time for web development was named **Web Forms**
    , hence the complimentary names. The code could be written in either Visual Basic
    or C# languages. Windows Forms had a similar drag-and-drop visual designer, although
    it generated C# or Visual Basic code to define the user interface, which can be
    difficult for humans to understand and edit directly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 随着2002年发布的第一个C#和.NET Framework版本，微软提供了用于构建Windows桌面应用程序的技术，称为**Windows Forms**。当时用于Web开发的等效技术被命名为**Web
    Forms**，因此有了互补的名称。代码可以用Visual Basic或C#语言编写。Windows Forms具有类似的拖放可视化设计工具，尽管它生成C#或Visual
    Basic代码来定义用户界面，这对人类来说可能难以直接理解和编辑。
- en: In 2006, Microsoft released a more powerful technology for building Windows
    desktop applications, named **Windows Presentation Foundation** (**WPF** ), as
    a key component of .NET Framework 3.0 alongside **Windows Communication Foundation**
    (**WCF** ) and **Windows Workflow** (**WF** ).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，微软发布了用于构建Windows桌面应用程序的更强大的技术，称为**Windows Presentation Foundation**（**WPF**），作为.NET
    Framework 3.0的关键组件，与**Windows Communication Foundation**（**WCF**）和**Windows Workflow**（**WF**）一起。
- en: Although a WPF app can be created by writing only C# statements, it can also
    use **eXtensible Application Markup Language** (**XAML** ) to specify its user
    interface, which is easy for both humans and code to understand. Visual Studio
    for Windows is partially built with WPF.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过编写仅C#语句来创建WPF应用程序，但它也可以使用**可扩展应用标记语言**（**XAML**）来指定其用户界面，这对人类和代码来说都很容易理解。Windows的Visual
    Studio部分是用WPF构建的。
- en: In 2012, Microsoft released Windows 8 with its Windows Store apps that run in
    a protected sandbox.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年，微软发布了Windows 8及其在受保护的沙箱中运行的Windows Store应用程序。
- en: In 2015, Microsoft released Windows 10 with an updated Windows Store app concept
    named **Universal Windows Platform** (**UWP** ). UWP apps can be built using C++
    and the DirectX UI, or JavaScript and HTML, or C# using a custom fork of modern
    .NET that is not cross-platform but provides full access to the underlying WinRT
    APIs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，微软发布了带有更新的Windows Store应用概念的Windows 10，名为**Universal Windows Platform**（**UWP**）。UWP应用程序可以使用C++和DirectX
    UI构建，也可以使用JavaScript和HTML构建，或者使用一个不跨平台但提供对底层WinRT API完全访问权限的现代.NET的自定义分支来使用C#构建。
- en: UWP apps can only execute on the Windows 10 platform, not earlier versions of
    Windows, but UWP apps can run on Xbox and Windows Mixed Reality headsets with
    motion controllers.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: UWP应用程序只能在Windows 10平台上执行，而不能在早期版本的Windows上执行，但UWP应用程序可以在Xbox和Windows混合现实头戴设备上运行，并带有运动控制器。
- en: Many Windows developers rejected Windows Store and UWP apps because they have
    limited access to the underlying system. Microsoft recently created **Project
    Reunion** and **WinUI 3** , which work together to allow Windows developers to
    bring some of the benefits of modern Windows development to their existing WPF
    apps and allow them to have the same benefits and system integrations that UWP
    apps have. This initiative is now known as **Windows App SDK** .
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Windows开发人员拒绝了Windows Store和UWP应用程序，因为它们对底层系统的访问受到限制。微软最近创建了**Project Reunion**和**WinUI
    3**，它们共同工作，允许Windows开发人员将现代Windows开发的一些好处带到现有的WPF应用程序中，并允许它们具有与UWP应用程序相同的好处和系统集成。这个倡议现在被称为**Windows
    App SDK**。
- en: Understanding modern .NET support for legacy Windows platforms
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解现代.NET对遗留Windows平台的支持
- en: The on-disk size of the .NET SDKs for Linux and macOS is about 330 MB. The on-disk
    size of the .NET SDK for Windows is about 440 MB. This is because it includes
    the Windows Desktop Runtime, which allows the legacy Windows application platforms
    Windows Forms and WPF to be run on modern .NET.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和macOS上的.NET SDK的磁盘大小约为330 MB。Windows上的.NET SDK的磁盘大小约为440 MB。这是因为它包括Windows桌面运行时，允许遗留的Windows应用程序平台Windows
    Forms和WPF在现代.NET上运行。
- en: There are many enterprise applications built using Windows Forms and WPF that
    need to be maintained or enhanced with new features, but until recently they were
    stuck on .NET Framework, which is now a legacy platform. With modern .NET and
    its Windows Desktop Pack, these apps can now use the full modern capabilities
    of .NET.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多使用Windows Forms和WPF构建的企业应用程序需要维护或增强新功能，但直到最近它们一直停留在.NET Framework上，这现在已经是一个遗留平台。使用现代.NET及其Windows桌面包，这些应用程序现在可以使用.NET的全部现代功能。
- en: Structuring projects
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建项目
- en: How should you structure your projects? So far, we have built small individual
    console apps to illustrate language or library features. In the rest of this book,
    we will build multiple projects using different technologies that work together
    to provide a single solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该如何构建项目？到目前为止，我们已经构建了小型的个别控制台应用程序，以说明语言或库的特性。在本书的其余部分，我们将使用不同的技术构建多个项目，这些技术可以共同提供一个解决方案。
- en: With large, complex solutions, it can be difficult to navigate amongst all the
    code. So, the primary reason to structure your projects is to make it easier to
    find components. It is good to have an overall name for your solution or workspace
    that reflects the application or solution.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型复杂的解决方案，要在所有代码中进行导航可能会很困难。因此，构建项目的主要原因是为了更容易地找到组件。最好为解决方案或工作区设置一个反映应用程序或解决方案的整体名称。
- en: We will build multiple projects for a fictional company named **Northwind**
    . We will name the solution or workspace `PracticalApps` and use the name `Northwind`
    as a prefix for all the project names.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为一个名为**Northwind**的虚构公司构建多个项目。我们将命名解决方案或工作区为`PracticalApps`，并在所有项目名称前使用名称`Northwind`作为前缀。
- en: There are many ways to structure and name projects and solutions, for example,
    using a folder hierarchy as well as a naming convention. If you work in a team,
    make sure you know how your team does it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多结构和命名项目和解决方案的方法，例如使用文件夹层次结构以及命名约定。如果您在团队中工作，请确保您知道您的团队是如何做的。
- en: Structuring projects in a solution or workspace
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在解决方案或工作区中构建项目
- en: 'It is good to have a naming convention for your projects in a solution or workspace
    so that any developer can tell what each one does instantly. A common choice is
    to use the type of project, for example, class library, console app, website,
    and so on, as shown in the following table:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案或工作区中为项目制定命名约定是很好的，这样任何开发人员都可以立即知道每个项目的作用。一个常见的选择是使用项目的类型，例如类库、控制台应用程序、网站等，如下表所示：
- en: '| Name | Description |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `Northwind.Common` | A class library project for common types like interfaces,
    enums, classes, records, and structs, used across multiple projects. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common` | 用于跨多个项目使用的接口、枚举、类、记录和结构等常见类型的类库项目。 |'
- en: '| `Northwind.Common.EntityModels` | A class library project for common EF Core
    entity models. Entity models are often used on both the server and client side,
    so it is best to separate dependencies on specific database providers. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common.EntityModels` | 用于常见的EF Core实体模型的类库项目。实体模型通常在服务器端和客户端上都使用，因此最好将特定数据库提供程序的依赖项分开。
    |'
- en: '| `Northwind.Common.DataContext` | A class library project for the EF Core
    database context with dependencies on specific database providers. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common.DataContext` | 一个依赖于特定数据库提供程序的EF Core数据库上下文的类库项目。 |'
- en: '| `Northwind.Web` | An ASP.NET Core project for a simple website that uses
    a mixture of static HTML files and dynamic Razor Pages. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Web` | 一个使用静态HTML文件和动态Razor页面混合的简单网站的ASP.NET Core项目。 |'
- en: '| `Northwind.Razor.Component` | A class library project for Razor Pages used
    in multiple projects. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Razor.Component` | 用于在多个项目中使用的Razor页面的类库项目。 |'
- en: '| `Northwind.Mvc` | An ASP.NET Core project for a complex website that uses
    the MVC pattern and can be more easily unit tested. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Mvc` | 用于使用MVC模式的复杂网站的ASP.NET Core项目，可以更容易地进行单元测试。 |'
- en: '| `Northwind.WebApi` | An ASP.NET Core project for an HTTP API service. A good
    choice for integrating with websites because they can use any JavaScript library
    or Blazor to interact with the service. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.WebApi` | 用于HTTP API服务的ASP.NET Core项目。与网站集成的一个很好的选择，因为它们可以使用任何JavaScript库或Blazor与服务进行交互。
    |'
- en: '| `Northwind.OData` | An ASP.NET Core project for an HTTP API service that
    implements the OData standard to enable a client to control queries. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.OData` | 一个实现OData标准以启用客户端控制查询的HTTP API服务的ASP.NET Core项目。 |'
- en: '| `Northwind.GraphQL` | An ASP.NET Core project for an HTTP API service that
    implements the GraphQL standard to enable a client to control queries. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.GraphQL` | 一个实现GraphQL标准以启用客户端控制查询的HTTP API服务的ASP.NET Core项目。
    |'
- en: '| `Northwind.gRPC` | An ASP.NET Core project for a gRPC service. A good choice
    for integrating with apps built with any language and platform since gRPC has
    wide support and is highly efficient and performant. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.gRPC` | 用于gRPC服务的ASP.NET Core项目。与任何语言和平台构建的应用程序集成的一个很好的选择，因为gRPC得到了广泛的支持，而且高效和高性能。
    |'
- en: '| `Northwind.SignalR` | An ASP.NET Core project for real-time communication.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.SignalR` | 用于实时通信的ASP.NET Core项目。 |'
- en: '| `Northwind.AzureFuncs` | An ASP.NET Core project for implementing a serverless
    nanoservice for hosting in Azure Functions. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.AzureFuncs` | 用于在Azure Functions中托管无服务器纳米服务的ASP.NET Core项目。 |'
- en: '| `Northwind.BlazorServer` | An ASP.NET Core Blazor Server project. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorServer` | 一个ASP.NET Core Blazor Server项目。 |'
- en: '| `Northwind.BlazorWasm.Client` | An ASP.NET Core Blazor WebAssembly client-side
    project. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorWasm.Client` | 一个ASP.NET Core Blazor WebAssembly客户端项目。 |'
- en: '| `Northwind.BlazorWasm.Server` | An ASP.NET Core Blazor WebAssembly server-side
    project. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.BlazorWasm.Server` | 一个ASP.NET Core Blazor WebAssembly服务器端项目。
    |'
- en: '| `Northwind.Maui` | A .NET MAUI project for a cross-platform desktop/mobile
    app. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Maui` | 用于跨平台桌面/移动应用的.NET MAUI项目。 |'
- en: '| `Northwind.MauiBlazor` | A .NET MAUI project for hosting Blazor components
    with native integrations with the OS. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.MauiBlazor` | 用于在操作系统中本地集成Blazor组件的.NET MAUI项目。 |'
- en: Using other project templates
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用其他项目模板
- en: 'When you install the .NET SDK, there are many project templates included:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装.NET SDK时，会包含许多项目模板：
- en: 'At a command prompt or terminal, enter the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，输入以下命令：
- en: '```cs'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new --list
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new --list
- en: '```'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: You will see a list of currently installed templates, including templates for
    Windows desktop development if you are running on Windows, as shown in *Figure
    13.2* :![](img/Image00101.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到当前安装的模板列表，包括如果您在Windows上运行，则包括用于Windows桌面开发的模板，如*图13.2*所示：![](img/Image00101.jpg)
- en: 'Figure 13.2: A list of dotnet project templates'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：dotnet项目模板列表
- en: 'Note the web-related project templates, including ones for creating SPAs using
    Blazor, Angular, and React. But another common JavaScript SPA library is missing:
    Vue.'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意与Web相关的项目模板，包括用于使用Blazor、Angular和React创建SPA的模板。但是另一个常见的JavaScript SPA库缺失：Vue。
- en: Installing additional template packs
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装额外的模板包
- en: 'Developers can install lots of additional template packs:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以安装许多额外的模板包：
- en: Start a browser and navigate to [http://dotnetnew.azurewebsites.net/](http://dotnetnew.azurewebsites.net/)
    .
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动浏览器并导航到[http://dotnetnew.azurewebsites.net/](http://dotnetnew.azurewebsites.net/)。
- en: Enter `vue` in the textbox and note the list of available templates for Vue.js,
    including one published by Microsoft, as shown in *Figure 13.3* :![](img/Image00102.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框中输入`vue`，注意Vue.js的可用模板列表，包括Microsoft发布的一个，如*图13.3*所示：![](img/Image00102.jpg)
- en: 'Figure 13.3: A project template for Vue.js by Microsoft'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：由Microsoft提供的Vue.js项目模板
- en: 'Click on **ASP.NET Core with Vue.js** by Microsoft, and note the instructions
    for installing and using this template, as shown in the following commands:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Microsoft的**ASP.NET Core with Vue.js**，注意安装和使用此模板的说明，如下命令所示：
- en: '```cs'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new --install "Microsoft.AspNetCore.SpaTemplates"
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new --install "Microsoft.AspNetCore.SpaTemplates"
- en: dotnet new vue
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new vue
- en: '```'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click **View other templates in this package** , and note that as well as a
    project template for Vue.js, it also has project templates for Aurelia and Knockout.js.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**查看此包中的其他模板**，注意除了Vue.js的项目模板外，它还有Aurelia和Knockout.js的项目模板。
- en: Building an entity data model for the Northwind database
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Northwind数据库构建实体数据模型
- en: Practical applications usually need to work with data in a relational database
    or another data store. In this chapter, we will define an entity data model for
    the Northwind database stored in SQL Server or SQLite. It will be used in most
    of the apps that we create in subsequent chapters.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 实际应用通常需要与关系数据库或其他数据存储中的数据一起工作。在本章中，我们将为存储在SQL Server或SQLite中的Northwind数据库定义一个实体数据模型。它将在我们在后续章节中创建的大多数应用程序中使用。
- en: The `Northwind4SQLServer.sql` and `Northwind4SQLite.sql` script files are different.
    The script for SQL Server creates 13 tables as well as related views and stored
    procedures. The script for SQLite is a simplified version that only creates 10
    tables because SQLite does not support as many features. The main projects in
    this book only need those 10 tables so you can complete every task in this book
    with either database.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`Northwind4SQLServer.sql`和`Northwind4SQLite.sql`脚本文件是不同的。SQL Server的脚本创建了13个表以及相关的视图和存储过程。SQLite的脚本是一个简化版本，只创建了10个表，因为SQLite不支持那么多功能。本书的主要项目只需要这10个表，因此您可以使用任一数据库完成本书中的每个任务。'
- en: Instructions to install SQL Server and SQLite can be found in *Chapter 10* ,
    *Working with Data Using Entity Framework Core* . In that chapter, you will also
    find instructions for installing the `dotnet-ef` tool, which you will use to scaffold
    an entity model from an existing database.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装SQL Server和SQLite的说明，请参阅*第10章*，*使用Entity Framework Core处理数据*。在该章节中，您还将找到安装`dotnet-ef`工具的说明，您将使用该工具从现有数据库中生成实体模型。
- en: '**Good Practice** : You should create a separate class library project for
    your entity data models. This allows easier sharing between backend web servers
    and frontend desktop, mobile, and Blazor WebAssembly clients.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：您应该为实体数据模型创建一个单独的类库项目。这样可以更容易地在后端Web服务器和前端桌面、移动和Blazor WebAssembly客户端之间共享。'
- en: Creating a class library for entity models using SQLite
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQLite创建实体模型的类库
- en: You will now define entity data models in a class library so that they can be
    reused in other types of projects including client-side app models. If you are
    not using SQL Server, you will need to create this class library for SQLite. If
    you are using SQL Server, then you can create both a class library for SQLite
    and one for SQL Server and then switch between them as you choose.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将在一个类库中定义实体数据模型，以便它们可以在其他类型的项目中重用，包括客户端应用程序模型。如果您不使用SQL Server，则需要为SQLite创建此类库。如果您使用SQL
    Server，则可以同时创建一个用于SQLite和一个用于SQL Server的类库，然后根据需要在它们之间切换。
- en: 'We will automatically generate some entity models using the EF Core command-line
    tool:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用EF Core命令行工具自动生成一些实体模型：
- en: Use your preferred code editor to create a new solution/workspace named `PracticalApps`
    .
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建名为`PracticalApps`的新解决方案/工作区。
- en: 'Add a class library project, as defined in the following list:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个类库项目，如下列表所定义的：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.EntityModels.Sqlite`'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.EntityModels.Sqlite`
- en: 'In the `Northwind.Common.EntityModels.Sqlite` project, add package references
    for the SQLite database provider and EF Core design-time support, as shown in
    the following markup:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.Sqlite`项目中，添加SQLite数据库提供程序和EF Core设计时支持的包引用，如下标记所示：
- en: '```cs'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Sqlite"
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 包括="Microsoft.EntityFrameworkCore.Sqlite"
- en: Version="6.0.0"
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Design"
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 包括="Microsoft.EntityFrameworkCore.Design"
- en: Version="6.0.0"
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: '>'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PrivateAssets>all</PrivateAssets>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <PrivateAssets>all</PrivateAssets>
- en: <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
- en: </PackageReference>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: </PackageReference>
- en: </ItemGroup>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Delete the `Class1.cs` file.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Class1.cs`文件。
- en: Build the project.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: 'Create the `Northwind.db` file for SQLite by copying the `Northwind4SQLite.sql`
    file into the `PracticalApps` folder, and then enter the following command at
    a command prompt or terminal:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`Northwind4SQLite.sql`文件复制到`PracticalApps`文件夹中，然后在命令提示符或终端中输入以下命令，为SQLite创建`Northwind.db`文件：
- en: '```cs'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: sqlite3 Northwind.db -init Northwind4SQLite.sql
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3 Northwind.db -init Northwind4SQLite.sql
- en: '```'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Be patient because this command might take a while to create the database structure,
    as shown in the following output:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待，因为此命令可能需要一段时间来创建数据库结构，如下输出所示：
- en: '```cs'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: -- Loading resources from Northwind4SQLite.sql
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: -- 从Northwind4SQLite.sql加载资源
- en: SQLite version 3.35.5 2021-04-19 14:49:49
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite版本3.35.5 2021-04-19 14:49:49
- en: Enter ".help" for usage hints.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 输入“.help”以获取使用提示。
- en: sqlite>
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite>
- en: '```'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Press Ctrl + C on Windows or Cmd + D on macOS to exit SQLite command mode.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上按Ctrl + C或在macOS上按Cmd + D退出SQLite命令模式。
- en: Open a command prompt or terminal for the `Northwind.Common.EntityModels.Sqlite`
    folder.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.Common.EntityModels.Sqlite`文件夹的命令提示符或终端。
- en: 'At the command line, generate entity class models for all tables, as shown
    in the following commands:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，生成所有表的实体类模型，如下命令所示：
- en: '```cs'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet ef dbcontext scaffold "Filename=../Northwind.db" Microsoft.EntityFrameworkCore.Sqlite
    --namespace Packt.Shared --data-annotations
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet ef dbcontext scaffold "Filename=../Northwind.db" Microsoft.EntityFrameworkCore.Sqlite
    --namespace Packt.Shared --data-annotations
- en: '```'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: 'The command to perform: `dbcontext scaffold`'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的命令：`dbcontext scaffold`
- en: The connection strings. `"Filename=../Northwind.db"`
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串。`"Filename=../Northwind.db"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.Sqlite`
- en: 'The namespace: `--namespace Packt.Shared`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace Packt.Shared`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用数据注释以及Fluent API：`--data-annotations`
- en: 'Note the build messages and warnings, as shown in the following output:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意构建消息和警告，如下输出所示：
- en: '```cs'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Build started...
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '构建开始... '
- en: Build succeeded.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 构建成功。
- en: To protect potentially sensitive information in your connection string, you
    should move it out of source code. You can avoid scaffolding the connection string
    by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\.
    For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护连接字符串中可能包含的敏感信息，您应该将其移出源代码。您可以通过使用 Name= 语法从配置中读取连接字符串来避免生成连接字符串 - 请参阅 https://go.microsoft.com/fwlink/?linkid=2131148。有关存储连接字符串的更多指导，请参阅
    http://go.microsoft.com/fwlink/?LinkId=723263。
- en: '```'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Improving the class-to-table mapping
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进类到表的映射
- en: The `dotnet-ef` command-line tool generates different code for SQL Server and
    SQLite because they support different levels of functionality.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet-ef`命令行工具生成了不同的代码，因为SQL Server和SQLite支持不同级别的功能。'
- en: 'For example, SQL Server text columns can have limits to the number of characters.
    SQLite does not support this. So, `dotnet-ef` will generate validation attributes
    to ensure `string` properties are limited to a specified number of characters
    for SQL Server but not for SQLite, as shown in the following code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，SQL Server文本列可以限制字符数。SQLite不支持这一点。因此，`dotnet-ef`将生成验证属性，以确保`string`属性在SQL
    Server中限制为指定数量的字符，但在SQLite中不会，如下面的代码所示：
- en: '```cs'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // SQLite database provider-generated code
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: // SQLite数据库提供程序生成的代码
- en: '[Column(TypeName ='
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"nvarchar (15)"'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '"nvarchar (15)"'
- en: )
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CategoryName { get
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ！
- en: // SQL Server database provider-generated code
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: // SQL Server数据库提供程序生成的代码
- en: '[StringLength(15)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(15)'
- en: ']'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CategoryName { get
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: ！
- en: '```'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Neither database provider will mark non-nullable `string` properties as required:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库提供程序都不会将非空的`string`属性标记为必需的：
- en: '```cs'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // no runtime validation of non-nullable property
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: // 不对非空属性进行运行时验证
- en: public
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CategoryName { get
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ！
- en: // nullable property
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: // 可空属性
- en: public
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? Description { get'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '? Description { get'
- en: ; set
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // decorate with attribute to perform runtime validation
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用属性进行运行时验证
- en: '[Required'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '[Required'
- en: ']'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CategoryName { get
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: ！
- en: '```'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'We will make some small changes to improve the entity model mapping and validation
    rules for SQLite:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进行一些小的更改，以改进SQLite的实体模型映射和验证规则：
- en: 'Open the `Customer.cs` file and add a regular expression to validate its primary
    key value to only allow uppercase Western characters, as shown highlighted in
    the following code:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Customer.cs`文件，并添加一个正则表达式来验证其主键值，只允许大写西方字符，如下面代码中的高亮部分所示：
- en: '```cs'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Key'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[Key'
- en: ']'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[Column(TypeName ='
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"nchar (5)"'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '"nchar (5)"'
- en: )
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '**[**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**RegularExpression(**'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**RegularExpression(**'
- en: '**"[A-Z]{5}"**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[A-Z]{5}"**'
- en: '**)**'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**)** '
- en: '**]**'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: CustomerId { get
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: CustomerId { get
- en: ; set
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Activate your code editor''s find and replace feature (in Visual Studio 2022,
    navigate to **Edit** | **Find and Replace** | **Quick Replace** ), toggle on **Use
    Regular Expressions** , and then type a regular expression in the search box,
    as shown in the following expression:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的代码编辑器的查找和替换功能（在Visual Studio 2022中，导航到**编辑** | **查找和替换** | **快速替换**），切换到**使用正则表达式**，然后在搜索框中输入一个正则表达式，如下面的表达式所示：
- en: '```cs'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: \[Column\(TypeName = "(nchar|nvarchar) \((.*)\)"
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: \[Column\(TypeName = "(nchar|nvarchar) \((.*)\)"
- en: \)\]
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: \)\]
- en: '```'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the replace box, type a replacement regular expression, as shown in the
    following expression:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在替换框中，输入一个替换正则表达式，如下面的表达式所示：
- en: '```cs'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: $&\n    [StringLength($2
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: $&\n    [StringLength($2
- en: )]
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: )]
- en: '```'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: After the newline character, `\n` , I have included four space characters to
    indent correctly on my system, which uses two space characters per indentation
    level. You can insert as many as you wish.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在换行符`\n`之后，我已经包含了四个空格字符，以便在我的系统上正确缩进，我的系统每个缩进级别使用两个空格字符。您可以插入任意数量的空格。
- en: Set the find and replace to search files in the current project.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置查找和替换以在当前项目中搜索文件。
- en: Execute the search and replace to replace all, as shown in *Figure 13.4* :![](img/Image00103.jpg)
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行搜索和替换以替换所有内容，如*图13.4*所示：![](img/Image00103.jpg)
- en: 'Figure 13.4: Search and replace all matches using regular expressions in Visual
    Studio 2022'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：在Visual Studio 2022中使用正则表达式搜索和替换所有匹配项
- en: 'Change any date/time properties, for example, in `Employee.cs` , to use a nullable
    `DateTime` instead of an array of bytes, as shown in the following code:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何日期/时间属性更改为使用可空的`DateTime`，例如在`Employee.cs`中，而不是使用字节数组，如下面的代码所示：
- en: '```cs'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // before
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: // 之前
- en: '[Column(TypeName ='
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"datetime"'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '"datetime"'
- en: )
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: byte
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 字节
- en: '[] BirthDate { get'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[] BirthDate { get'
- en: ; set
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // after
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: // 之后
- en: '[Column(TypeName ='
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"datetime"'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '"datetime"'
- en: )
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DateTime? BirthDate { get
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: DateTime? BirthDate { get
- en: ; set
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Use your code editor's find feature to search for `"datetime"` to find all the
    properties that need changing.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的代码编辑器的查找功能来搜索`"datetime"`，以查找所有需要更改的属性。
- en: 'Change any `money` properties, for example, in `Order.cs` , to use a nullable
    `decimal` instead of an array of bytes, as shown in the following code:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何`money`属性更改为使用可空的`decimal`，例如在`Order.cs`中，而不是使用字节数组，如下面的代码所示：
- en: '```cs'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // before
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: // 之前
- en: '[Column(TypeName ='
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"money"'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '"money"'
- en: )
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: byte
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 字节
- en: '[] Freight { get'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[] Freight { get'
- en: ; set
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // after
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: // 之后
- en: '[Column(TypeName ='
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"money"'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '"money"'
- en: )
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: decimal
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Freight { get'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '? Freight { get'
- en: ; set
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Use your code editor's find feature to search for `"money"` to find all the
    properties that need changing.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的代码编辑器的查找功能来搜索`"money"`，以查找所有需要更改的属性。
- en: 'Change any `bit` properties, for example, in `Product.cs` , to use a `bool`
    instead of an array of bytes, as shown in the following code:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何`bit`属性更改为使用`bool`，例如在`Product.cs`中，而不是使用字节数组，如下面的代码所示：
- en: '```cs'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // before
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: // 之前
- en: '[Column(TypeName ='
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"bit"'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '"bit"'
- en: )
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: byte
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 字节
- en: '[] Discontinued { get'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[] Discontinued { get'
- en: ; set
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: ！
- en: // after
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: // after
- en: '[Column(TypeName ='
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"bit"'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '"bit"'
- en: )
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: bool
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: Discontinued { get
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: Discontinued { get
- en: ; set
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Use your code editor's find feature to search for `"bit"` to find all the properties
    that need changing.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的代码编辑器的查找功能来搜索`"bit"`，以找到所有需要更改的属性。
- en: 'In `Category.cs` , make the `CategoryId` property an `int` , as shown highlighted
    in the following code:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，将`CategoryId`属性改为`int`，如下所示在以下代码中突出显示：
- en: '```cs'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Key'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[Key'
- en: ']'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: '**int**'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '**int**'
- en: CategoryId { get
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId { get
- en: ; set
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Category.cs` , make the `CategoryName` property required, as shown highlighted
    in the following code:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，使`CategoryName`属性为必填项，如下所示在以下代码中突出显示：
- en: '```cs'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**[**'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**Required**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**Required**'
- en: '**]**'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: '[Column(TypeName ='
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"nvarchar (15)"'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '"nvarchar (15)"'
- en: )
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(15)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(15)'
- en: ']'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: CategoryName { get
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Customer.cs` , make the `CompanyName` property required, as shown highlighted
    in the following code:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customer.cs`中，使`CompanyName`属性为必填项，如下所示在以下代码中突出显示：
- en: '```cs'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**[**'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**Required**'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '**Required**'
- en: '**]**'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: '[Column(TypeName ='
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"nvarchar (40)"'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '"nvarchar (40)"'
- en: )
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(40)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(40)'
- en: ']'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: CompanyName { get
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: CompanyName { get
- en: ; set
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Employee.cs` , make the `EmployeeId` property an `int` instead of a `long`
    .
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，将`EmployeeId`属性改为`int`而不是`long`。
- en: In `Employee.cs` , make the `FirstName` and `LastName` properties required.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，使`FirstName`和`LastName`属性为必填项。
- en: In `Employee.cs` , make the `ReportsTo` property an `int?` instead of a `long?`
    .
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，将`ReportsTo`属性改为`int?`而不是`long?`。
- en: In `EmployeeTerritory.cs` , make the `EmployeeId` property an `int` instead
    of a `long` .
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EmployeeTerritory.cs`中，将`EmployeeId`属性改为`int`而不是`long`。
- en: In `EmployeeTerritory.cs` , make the `TerritoryId` property required.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EmployeeTerritory.cs`中，使`TerritoryId`属性为必填项。
- en: In `Order.cs` , make the `OrderId` property an `int` instead of a `long` .
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`OrderId`属性改为`int`而不是`long`。
- en: In `Order.cs` , decorate the `CustomerId` property with a regular expression
    to enforce five uppercase characters.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，使用正则表达式装饰`CustomerId`属性以强制五个大写字符。
- en: In `Order.cs` , make the `EmployeeId` property an `int?` instead of a `long?`
    .
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`EmployeeId`属性改为`int?`而不是`long?`。
- en: In `Order.cs` , make the `ShipVia` property an `int?` instead of a `long?` .
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，将`ShipVia`属性改为`int?`而不是`long?`。
- en: In `OrderDetail.cs` , make the `OrderId` property an `int` instead of a `long`
    .
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`OrderId`属性改为`int`而不是`long`。
- en: In `OrderDetail.cs` , make the `ProductId` property an `int` instead of a `long`
    .
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`ProductId`属性改为`int`而不是`long`。
- en: In `OrderDetail.cs` , make the `Quantity` property a `short` instead of a `long`
    .
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OrderDetail.cs`中，将`Quantity`属性改为`short`而不是`long`。
- en: In `Product.cs` , make the `ProductId` property an `int` instead of a `long`
    .
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`ProductId`属性改为`int`而不是`long`。
- en: In `Product.cs` , make the `ProductName` property required.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，使`ProductName`属性为必填项。
- en: In `Product.cs` , make the `SupplierId` and `CategoryId` properties an `int?`
    instead of a `long?` .
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`SupplierId`和`CategoryId`属性改为`int?`而不是`long?`。
- en: In `Product.cs` , make the `UnitsInStock` , `UnitsOnOrder` , and `ReorderLevel`
    properties a `short?` instead of a `long?` .
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`UnitsInStock`，`UnitsOnOrder`和`ReorderLevel`属性改为`short?`而不是`long?`。
- en: In `Shipper.cs` , make the `ShipperId` property an `int` instead of a `long`
    .
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shipper.cs`中，将`ShipperId`属性改为`int`而不是`long`。
- en: In `Shipper.cs` , make the `CompanyName` property required.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shipper.cs`中，使`CompanyName`属性为必填项。
- en: In `Supplier.cs` , make the `SupplierId` property an `int` instead of a `long`
    .
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.cs`中，将`SupplierId`属性改为`int`而不是`long`。
- en: In `Supplier.cs` , make the `CompanyName` property required.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.cs`中，使`CompanyName`属性为必填项。
- en: In `Territory.cs` , make the `RegionId` property an `int` instead of a `long`
    .
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Territory.cs`中，将`RegionId`属性改为`int`而不是`long`。
- en: In `Territory.cs` , make the `TerritoryId` and `TerritoryDescription` properties
    required.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Territory.cs`中，使`TerritoryId`和`TerritoryDescription`属性为必填项。
- en: Now that we have a class library for the entity classes, we can create a class
    library for the database context.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个用于实体类的类库，我们可以为数据库上下文创建一个类库。
- en: Creating a class library for a Northwind database context
  id: totrans-476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个Northwind数据库上下文的类库
- en: 'You will now define a database context class library:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将定义一个数据库上下文类库：
- en: 'Add a class library project to the solution/workspace, as defined in the following
    list:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向解决方案/工作空间添加一个类库项目，如下列表中所定义的：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**Class Library** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作空间/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.DataContext.Sqlite`'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.DataContext.Sqlite`
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `Northwind.Common.DataContext.Sqlite` as the active
    OmniSharp project.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`Northwind.Common.DataContext.Sqlite`作为活动的OmniSharp项目。
- en: 'In the `Northwind.Common.DataContext.Sqlite` project, add a project reference
    to the `Northwind.Common.EntityModels.Sqlite` project and add a package reference
    to the EF Core data provider for SQLite, as shown in the following markup:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.Sqlite`项目中，添加对`Northwind.Common.EntityModels.Sqlite`项目的项目引用，并添加对SQLite的EF
    Core数据提供程序的包引用，如下标记所示：
- en: '```cs'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.SQLite"
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.SQLite"
- en: Version="6.0.0"
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: <ItemGroup>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <ProjectReference Include=
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: <ProjectReference Include=
- en: '"..\Northwind.Common.EntityModels.Sqlite\Northwind.Common'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '"..\Northwind.Common.EntityModels.Sqlite\Northwind.Common'
- en: .EntityModels.Sqlite.csproj"
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: .EntityModels.Sqlite.csproj"
- en: />
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The path to the project reference should not have a line break in your project
    file.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 项目引用的路径不应在项目文件中换行。
- en: In the `Northwind.Common.DataContext.Sqlite` project, delete the `Class1.cs`
    class file.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.Sqlite`项目中，删除`Class1.cs`类文件。
- en: Build the `Northwind.Common.DataContext.Sqlite` project.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Common.DataContext.Sqlite`项目。
- en: Move the `NorthwindContext.cs` file from the `Northwind.Common.EntityModels.Sqlite`
    project/folder to the `Northwind.Common.DataContext.Sqlite` project/folder.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NorthwindContext.cs`文件从`Northwind.Common.EntityModels.Sqlite`项目/文件夹移动到`Northwind.Common.DataContext.Sqlite`项目/文件夹。
- en: In Visual Studio **Solution Explorer** , if you drag and drop a file between
    projects it will be copied. If you hold down Shift while dragging and dropping,
    it will be moved. In Visual Studio Code **EXPLORER** , if you drag and drop a
    file between projects it will be moved. If you hold down Ctrl while dragging and
    dropping, it will be copied.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio **Solution Explorer**中，如果您在项目之间拖放文件，它将被复制。如果您在拖放时按住Shift键，它将被移动。在Visual
    Studio Code **EXPLORER**中，如果您在项目之间拖放文件，它将被移动。如果您在拖放时按住Ctrl键，它将被复制。
- en: In `NorthwindContext.cs` , in the `OnConfiguring` method, remove the compiler
    `#warning` about the connection string.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NorthwindContext.cs`中，在`OnConfiguring`方法中，删除关于连接字符串的编译器`#warning`。
- en: '**Good Practice** : We will override the default database connection string
    in any projects such as websites that need to work with the Northwind database,
    so the class derived from `DbContext` must have a constructor with a `DbContextOptions`
    parameter for this to work, as shown in the following code:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我们将覆盖默认的数据库连接字符串，以便在需要与Northwind数据库一起工作的网站等项目中使用，因此从`DbContext`派生的类必须具有带有`DbContextOptions`参数的构造函数才能正常工作，如下面的代码所示：'
- en: '```cs'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: NorthwindContext
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContext
- en: (DbContextOptions<NorthwindContext> options)
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: (DbContextOptions<NorthwindContext> options)
- en: ': base'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: ': base'
- en: (options)
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: (options)
- en: '{'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the `OnModelCreating` method, remove all Fluent API statements that call
    the `ValueGeneratedNever` method to configure primary key properties like `SupplierId`
    to never generate a value automatically or call the `HasDefaultValueSql` method,
    as shown in the following code:'
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnModelCreating`方法中，删除所有调用`ValueGeneratedNever`方法的Fluent API语句，以配置主键属性，如`SupplierId`，以便不自动生成值，或调用`HasDefaultValueSql`方法，如下面的代码所示：
- en: '```cs'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: modelBuilder.Entity<Supplier>(entity =>
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Supplier>(entity =>
- en: '{'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: entity.Property(e => e.SupplierId).ValueGeneratedNever();
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: entity.Property(e => e.SupplierId).ValueGeneratedNever();
- en: '});'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If we do not remove the configuration like the statements above, then when we
    add new suppliers, the `SupplierId` value would always be 0 and we would only
    be able to add one supplier with that value and then all other attempts would
    throw an exception.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不删除上面的配置语句，那么当我们添加新的供应商时，`SupplierId`的值将始终为0，我们只能添加一个具有该值的供应商，然后所有其他尝试都会引发异常。
- en: 'For the `Product` entity, tell SQLite that the `UnitPrice` can be converted
    from `decimal` to `double` . The `OnModelCreating` method should now be much simplified,
    as shown in the following code:'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Product`实体，告诉SQLite`UnitPrice`可以从`decimal`转换为`double`。`OnModelCreating`方法现在应该更简化，如下面的代码所示：
- en: '```cs'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: protected
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 保护
- en: override
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: OnModelCreating
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: (
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelBuilder modelBuilder
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: modelBuilder.Entity<OrderDetail>(entity =>
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<OrderDetail>(entity =>
- en: '{'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: entity.HasKey(e => new
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: entity.HasKey(e => new
- en: '{ e.OrderId, e.ProductId });'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '{ e.OrderId, e.ProductId });'
- en: entity.HasOne(d => d.Order)
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: entity.HasOne(d => d.Order)
- en: .WithMany(p => p.OrderDetails)
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: .WithMany(p => p.OrderDetails)
- en: .HasForeignKey(d => d.OrderId)
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: .HasForeignKey(d => d.OrderId)
- en: .OnDelete(DeleteBehavior.ClientSetNull);
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: .OnDelete(DeleteBehavior.ClientSetNull);
- en: entity.HasOne(d => d.Product)
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: entity.HasOne(d => d.Product)
- en: .WithMany(p => p.OrderDetails)
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: .WithMany(p => p.OrderDetails)
- en: .HasForeignKey(d => d.ProductId)
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: .HasForeignKey(d => d.ProductId)
- en: .OnDelete(DeleteBehavior.ClientSetNull);
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: .OnDelete(DeleteBehavior.ClientSetNull);
- en: '});'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: modelBuilder.Entity<Product>()
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>()
- en: .Property(product => product.UnitPrice)
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: .Property(product => product.UnitPrice)
- en: .HasConversion<double
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: .HasConversion<double
- en: '>();'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '>();'
- en: OnModelCreatingPartial(modelBuilder);
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreatingPartial(modelBuilder);
- en: '}'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Add a class named `NorthwindContextExtensions.cs` and modify its contents to
    define an extension method that adds the Northwind database context to a collection
    of dependency services, as shown in the following code:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`NorthwindContextExtensions.cs`的类库，并修改其内容以定义将Northwind数据库上下文添加到依赖服务集合的扩展方法，如下面的代码所示：
- en: '```cs'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore; // UseSqlite
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // UseSqlite
- en: using
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.Extensions.DependencyInjection; // IServiceCollection
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.DependencyInjection; // IServiceCollection
- en: namespace
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: class
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: NorthwindContextExtensions
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContextExtensions
- en: '{'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ///
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <summary>
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: <摘要>
- en: ///
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: Adds NorthwindContext to the specified IServiceCollection. Uses the Sqlite database
    provider.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 将NorthwindContext添加到指定的IServiceCollection。使用Sqlite数据库提供程序。
- en: ///
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: </summary>
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: </摘要>
- en: ///
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <param name="services"></param>
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: <param name="services"></param>
- en: ///
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <param name="relativePath">
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: <param name="relativePath">
- en: Set to override the default of ".."
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 设置以覆盖默认值".."
- en: </param>
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: </param>
- en: ///
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <returns>
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: <返回>
- en: An IServiceCollection that can be used to add more services.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用于添加更多服务的IServiceCollection。
- en: </returns>
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: </returns>
- en: public
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: IServiceCollection
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: IServiceCollection
- en: AddNorthwindContext
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: AddNorthwindContext
- en: (
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: this
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IServiceCollection services,
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: IServiceCollection services,
- en: string
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: relativePath =
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: relativePath =
- en: '".."'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '".."'
- en: )
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: databasePath = Path.Combine(relativePath, "Northwind.db"
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: databasePath = Path.Combine(relativePath, "Northwind.db"
- en: );
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: services.AddDbContext<NorthwindContext>(options =>
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: services.AddDbContext<NorthwindContext>(options =>
- en: options.UseSqlite($"Data Source=
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: options.UseSqlite($"数据源=
- en: '{databasePath}'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '{databasePath}'
- en: '"'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: )
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: );
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: return
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: services;
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 服务;
- en: '}'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the two class libraries and fix any compiler errors.
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建两个类库并修复任何编译错误。
- en: Creating a class library for entity models using SQL Server
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为使用SQL Server创建实体模型的类库
- en: 'To use SQL Server, you will not need to do anything if you already set up the
    Northwind database in *Chapter 10* , *Working with Data Using Entity Framework
    Core* . But you will now create the entity models using the `dotnet-ef` tool:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在*第10章* *使用Entity Framework Core处理数据*中设置了Northwind数据库，那么使用SQL Server时将不需要做任何事情。但是，您现在将使用`dotnet-ef`工具创建实体模型：
- en: Use your preferred code editor to create a new solution/workspace named `PracticalApps`
    .
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`PracticalApps`的新解决方案/工作区。
- en: 'Add a class library project, as defined in the following list:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个类库项目，如下列表所示：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-614
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.EntityModels.SqlServer`'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.EntityModels.SqlServer`
- en: 'In the `Northwind.Common.EntityModels.SqlServer` project, add package references
    for the SQL Server database provider and EF Core design-time support, as shown
    in the following markup:'
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.EntityModels.SqlServer`项目中，添加SQL Server数据库提供程序和EF Core设计时支持的包引用，如下标记所示：
- en: '```cs'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.SqlServer"
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.SqlServer"
- en: Version="6.0.0"
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Design"
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.Design"
- en: Version="6.0.0"
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: '>'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <PrivateAssets>all</PrivateAssets>
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: <PrivateAssets>all</PrivateAssets>
- en: <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
- en: </PackageReference>
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: </PackageReference>
- en: </ItemGroup>
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Delete the `Class1.cs` file.
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Class1.cs`文件。
- en: Build the project.
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目。
- en: Open a command prompt or terminal for the `Northwind.Common.EntityModels.SqlServer`
    folder.
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.Common.EntityModels.SqlServer`文件夹的命令提示符或终端。
- en: 'At the command line, generate entity class models for all tables, as shown
    in the following commands:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，生成所有表的实体类模型，如下命令所示：
- en: '```cs'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet ef dbcontext scaffold "Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;" Microsoft.EntityFrameworkCore.SqlServer --namespace Packt.Shared
    --data-annotations
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet ef dbcontext scaffold "Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;" Microsoft.EntityFrameworkCore.SqlServer --namespace Packt.Shared
    --data-annotations
- en: '```'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: 'The command to perform: `dbcontext scaffold`'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的命令：`dbcontext scaffold`
- en: The connection strings. `"Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;"`
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串。`"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.SqlServer`
- en: 'The namespace: `--namespace Packt.Shared`'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace Packt.Shared`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用数据注释以及Fluent API：`--data-annotations`
- en: 'In `Customer.cs` , add a regular expression to validate its primary key value
    to only allow uppercase Western characters, as shown highlighted in the following
    code:'
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customer.cs`中，添加一个正则表达式来验证其主键值，只允许大写西方字符，如下所示：
- en: '```cs'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Key'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '[Key'
- en: ']'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(5)'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(5)'
- en: ']'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '**[**'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**'
- en: '**RegularExpression(**'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '**RegularExpression(**'
- en: '**"[A-Z]{5}"**'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '**"[A-Z]{5}"**'
- en: '**)**'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**]**'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '**]**'
- en: public
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: CustomerId { get
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: CustomerId { get
- en: ; set
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '!;'
- en: '```'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Customer.cs` , make the `CustomerId` and `CompanyName` properties required.
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customer.cs`中，使`CustomerId`和`CompanyName`属性为必填项。
- en: 'Add a class library project to the solution/workspace, as defined in the following
    list:'
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个类库项目添加到解决方案/工作区中，如下列表所示：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Workspace/solution file and folder: `PracticalApps`'
  id: totrans-667
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区/解决方案文件和文件夹：`PracticalApps`
- en: 'Project file and folder: `Northwind.Common.DataContext.SqlServer`'
  id: totrans-668
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Common.DataContext.SqlServer`
- en: In Visual Studio Code, select `Northwind.Common.DataContext.SqlServer` as the
    active OmniSharp project.
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，将`Northwind.Common.DataContext.SqlServer`选择为活动的OmniSharp项目。
- en: 'In the `Northwind.Common.DataContext.SqlServer` project, add a project reference
    to the `Northwind.Common.EntityModels.SqlServer` project and add a package reference
    to the EF Core data provider for SQL Server, as shown in the following markup:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.SqlServer`项目中，添加对`Northwind.Common.EntityModels.SqlServer`项目的项目引用，并添加对SQL
    Server的EF Core数据提供程序的包引用，如下标记所示：
- en: '```cs'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.SqlServer"
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.SqlServer"
- en: Version="6.0.0"
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: <ItemGroup>
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <ProjectReference Include=
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: <ProjectReference Include=
- en: '"..\Northwind.Common.EntityModels.SqlServer\Northwind.Common'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '"..\Northwind.Common.EntityModels.SqlServer\Northwind.Common'
- en: .EntityModels.SqlServer.csproj"
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: .EntityModels.SqlServer.csproj"
- en: />
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the `Northwind.Common.DataContext.SqlServer` project, delete the `Class1.cs`
    class file.
  id: totrans-685
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Common.DataContext.SqlServer`项目中，删除`Class1.cs`类文件。
- en: Build the `Northwind.Common.DataContext.SqlServer` project.
  id: totrans-686
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Common.DataContext.SqlServer`项目。
- en: Move the `NorthwindContext.cs` file from the `Northwind.Common.EntityModels.SqlServer`
    project/folder to the `Northwind.Common.DataContext.SqlServer` project/folder.
  id: totrans-687
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NorthwindContext.cs`文件从`Northwind.Common.EntityModels.SqlServer`项目/文件夹移动到`Northwind.Common.DataContext.SqlServer`项目/文件夹。
- en: In `NorthwindContext.cs` , remove the compiler warning about the connection
    string.
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NorthwindContext.cs`中，删除有关连接字符串的编译器警告。
- en: 'Add a class named `NorthwindContextExtensions.cs` , and modify its contents
    to define an extension method that adds the Northwind database context to a collection
    of dependency services, as shown in the following code:'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`NorthwindContextExtensions.cs`的类，并修改其内容以定义将Northwind数据库上下文添加到依赖服务集合的扩展方法，如下所示：
- en: '```cs'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore; // UseSqlServer
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // UseSqlServer
- en: using
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.Extensions.DependencyInjection; // IServiceCollection
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.DependencyInjection; // IServiceCollection
- en: namespace
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Packt.Shared
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: static
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: class
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: NorthwindContextExtensions
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: NorthwindContextExtensions
- en: '{'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ///
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <summary>
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: <summary>
- en: ///
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: Adds NorthwindContext to the specified IServiceCollection. Uses the SqlServer
    database provider.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 将NorthwindContext添加到指定的IServiceCollection。使用SqlServer数据库提供程序。
- en: ///
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: </summary>
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: </summary>
- en: ///
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <param name="services"></param>
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: <param name="services"></param>
- en: ///
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <param name="connectionString">
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: <param name="connectionString">
- en: Set to override the default.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为覆盖默认值。
- en: </param>
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: </param>
- en: ///
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: ///
- en: <returns>
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: <returns>
- en: An IServiceCollection that can be used to add more services.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用来添加更多服务的IServiceCollection。
- en: </returns>
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: </返回>
- en: public
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: static
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: IServiceCollection
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: IServiceCollection
- en: AddNorthwindContext
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: AddNorthwindContext
- en: (
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: this
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 这
- en: IServiceCollection services,
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: IServiceCollection服务，
- en: string
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: connectionString =
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 连接字符串=
- en: '"Data Source=.;Initial Catalog=Northwind;"'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: “数据源=。；初始目录=Northwind；”
- en: +
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: +
- en: '"Integrated Security=true;MultipleActiveResultsets=true;"'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: “集成安全性=true；MultipleActiveResultsets=true；”
- en: )
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: services.AddDbContext<NorthwindContext>(options =>
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: services.AddDbContext<NorthwindContext>(options =>
- en: options.UseSqlServer(connectionString));
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: options.UseSqlServer(connectionString));
- en: return
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: services;
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 服务；
- en: '}'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the two class libraries and fix any compiler errors.
  id: totrans-740
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建两个类库并修复任何编译错误。
- en: '**Good Practice** : We have provided optional arguments for the `AddNorthwindContext`
    method so that we can override the hardcoded SQLite database filename path or
    the SQL Server database connection string. This will allow us more flexibility,
    for example, to load these values from a configuration file.'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我们为`AddNorthwindContext`方法提供了可选参数，以便我们可以覆盖硬编码的SQLite数据库文件名路径或SQL Server数据库连接字符串。这将使我们更灵活，例如，可以从配置文件中加载这些值。'
- en: Practicing and exploring
  id: totrans-742
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Explore this chapter's topics with deeper research.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 通过深入研究探索本章的主题。
- en: Exercise 13.1 – Test your knowledge
  id: totrans-744
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.1-测试您的知识
- en: .NET 6 is cross-platform. Windows Forms and WPF apps can run on .NET 6\. Can
    those apps therefore run on macOS and Linux?
  id: totrans-745
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 6是跨平台的。 Windows窗体和WPF应用程序可以在.NET 6上运行。因此，这些应用程序是否可以在macOS和Linux上运行？
- en: How does a Windows Forms app define its user interface, and why is this a potential
    problem?
  id: totrans-746
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows窗体应用程序如何定义其用户界面，为什么这可能是一个问题？
- en: How can a WPF or UWP app define its user interface, and why is this good for
    developers?
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WPF或UWP应用程序如何定义其用户界面，为开发人员有何好处？
- en: Exercise 13.2 – Explore topics
  id: totrans-748
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习13.2-探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接，了解本章涵盖的主题的更多详细信息：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net)'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-13---introducing-practical-applications-of-c-and-net)'
- en: Summary
  id: totrans-751
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have been introduced to some of the app models and workloads
    that you can use to build practical applications using C# and .NET.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了一些可以使用C#和.NET构建实用应用程序的应用程序模型和工作负载。
- en: You have created two to four class libraries to define an entity data model
    for working with the Northwind database using either SQLite or SQL Server or both.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经创建了两到四个类库，用于定义与Northwind数据库一起使用SQLite或SQL Server或两者都使用的实体数据模型。
- en: 'In the following six chapters, you will learn the details about how to build
    the following:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的六章中，您将学习如何构建以下细节：
- en: Simple websites using static HTML pages and dynamic Razor Pages.
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态HTML页面和动态Razor页面创建简单网站。
- en: Complex websites using the Model-View-Controller (MVC) design pattern.
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型-视图-控制器（MVC）设计模式构建复杂的网站。
- en: Web services that can be called by any platform that can make an HTTP request
    and client websites that call those web services.
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以由任何可以发出HTTP请求的平台调用的Web服务，以及调用这些Web服务的客户端网站。
- en: Blazor user interface components that can be hosted on a web server, in the
    browser, or on hybrid web-native mobile and desktop apps.
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor用户界面组件可以托管在Web服务器上，在浏览器中，或者在混合Web本机移动和桌面应用程序上。
- en: Services that implement remote procedure calls using gRPC.
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用gRPC实现远程过程调用的服务。
- en: Services that implement real-time communication using SignalR.
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SignalR实现实时通信的服务。
- en: Services that provide easy and flexible access to an EF Core model.
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对EF Core模型的简单灵活访问的服务。
- en: Serverless nano services hosted in Azure Functions.
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure Functions中托管的无服务器纳米服务。
- en: Cross-platform native mobile and desktop apps using .NET MAUI.
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET MAUI构建跨平台本机移动和桌面应用程序。
