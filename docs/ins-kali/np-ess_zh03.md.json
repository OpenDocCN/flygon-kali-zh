["```py\nIn [1]: import numpy as np \nIn [2]: x = np.array([1, 2, 3, 4]) \nIn [3]: x + 1 \nOut[3]: array([2, 3, 4, 5]) \n\n```", "```py\nIn [4]: y = np.array([-1, 2, 3, 0]) \nIn [5]: x * y \nOut[5]: array([-1,  4,  9,  0]) \n\n```", "```py\nIn [6]: np.dot(x, y) \nOut[6]: 12 \n\n```", "```py\nIn [7]: x == y \nOut[7]: array([False,  True,  True, False], dtype=bool) \n\n```", "```py\nIn [8]: x = np.arange(10000) \nIn [9]: %timeit x + 1 \n100000 loops, best of 3: 12.6 \u00b5s per loop \nIn [10]: y = range(10000) \nIn [11]: %timeit [i + 1 for i in y] \n1000 loops, best of 3: 458 \u00b5s per loop \n\n```", "```py\nIn [12]: x = np.arange(1,9) \nIn [13]: x.dtype \nOut[13]: dtype('int32') \nIn [14]: x = x / 10.0 \nIn [15]: x \nOut[15]: array([ 0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8]) \nIn [16]: x.dtype \nOut[16]: dtype('float64') \nIn [17]: y = np.arange(1,9) \nIn [18]: y /= 10.0 \nIn [19]: y \nOut[19]: array([0, 0, 0, 0, 0, 0, 0, 0]) \nIn [20]: y.dtype \nOut[20]: dtype('int32') \n\n```", "```py\nIn [21]: x = np.arange(5,10) \nIn [22]: np.square(x) \nOut[22]: array([25, 36, 49, 64, 81]) \n\n```", "```py\nIn [23]: y = np.ones(5) * 10 \nIn [24]: np.mod(y, x) \nOut[24]: array([ 0.,  4.,  3.,  2.,  1.]) \n\n```", "```py\nIn [25]: np.minimum(x, 7) \nOut[25]: array([5, 6, 7, 7, 7]) \nIn [26]: np.min(x) \nOut[26]: 5 \n\n```", "```py\nIn [27]: z = np.repeat(x, 3).reshape(5, 3) \nIn [28]: z \nOut[28]: \narray([[5, 5, 5], \n       [6, 6, 6], \n       [7, 7, 7], \n       [8, 8, 8], \n       [9, 9, 9]]) \nIn [29]: np.median(z) \nOut[29]: 7.0 \nIn [30]: np.median(z, axis = 0) \nOut[30]: array([ 7.,  7.,  7.]) \nIn [31]: np.median(z, axis = 1) \nOut[31]: array([ 5.,  6.,  7.,  8.,  9.]) \n\n```", "```py\nIn [32]: np.add.accumulate(x) \nOut[32]: array([ 5, 11, 18, 26, 35]) \n\n```", "```py\nIn [33]: np.multiply.outer(x, x) \nOut[33]: \narray([[25, 30, 35, 40, 45], \n       [30, 36, 42, 48, 54], \n       [35, 42, 49, 56, 63], \n       [40, 48, 56, 64, 72], \n       [45, 54, 63, 72, 81]]) \n\n```", "```py\nIn [35]: x = np.array([[ 0, 0, 0], \n   ....:               [10,10,10], \n   ....:               [20,20,20]]) \nIn [36]: y = np.array([1, 2, 3]) \nIn [37]: x + y \nOut[37]: \narray([[ 1,  2,  3], \n       [11, 12, 13], \n       [21, 22, 23]]) \n\n```", "```py\nIn [38]: x = np.array([[0], [10], [20]]) \nIn [39]: x \nOut[39]: \narray([[ 0], \n       [10], \n       [20]]) \nIn [40]: x + y \nOut[40]: \narray([[ 1,  2,  3], \n       [11, 12, 13], \n       [21, 22, 23]]) \n\n```", "```py\nIn [41]: x = np.array([[ 0, 0, 0], \n   ....:               [10,10,10], \n   ....:               [20,20,20]]) \nIn [42]: y = np.arange(1,5) \nIn [43]: x + y \nValueError: operands could not be broadcast together with shapes (3,3) (4) \n\n```", "```py\nIn [44]: x = np.arange(24) \nIn [45]: x.shape = 2, 3, -1 \nIn [46]: x \nOut[46]: \narray([[[ 0,  1,  2,  3], \n        [ 4,  5,  6,  7], \n        [ 8,  9, 10, 11]], \n       [[12, 13, 14, 15], \n        [16, 17, 18, 19], \n        [20, 21, 22, 23]]]) \n\n```", "```py\nIn [47]: x = np.arange(1000000) \nIn [48]: x.shape = 100, 100, 100 \nIn [49]: %timeit x.flatten() \n1000 loops, best of 3: 1.14 ms per loop \nIn [50]: %timeit x.ravel() \n1000000 loops, best of 3: 330 ns per loop \n\n```", "```py\nIn [51]: x = np.arange (0, 10, 2) \nIn [52]: y = np.arange (0, -5, -1) \nIn [53]: np.vstack([x, y]) \nOut[53]: \narray([[ 0,  2,  4,  6,  8], \n          [ 0, -1, -2, -3, -4]]) \n\n```", "```py\nIn [54]: np.hstack([x, y]) \nOut[54]: array([ 0,  2,  4,  6,  8,  0, -1, -2, -3, -4]) \n\n```", "```py\nIn [55]: np.dstack([x, y]) \nOut[55]: \narray([[[ 0,  0], \n        [ 2, -1], \n        [ 4, -2], \n        [ 6, -3], \n        [ 8, -4]]]) \n\n```", "```py\nIn [56]: x = np.arange(3) \nIn [57]: np.resize(x, (8,)) \nOut[57]: array([0, 1, 2, 0, 1, 2, 0, 1]) \n\n```", "```py\nIn [58]: x = np.array([1,3,-1, 5, 7, -1]) \nIn [59]: mask = (x < 0) \nIn [60]: mask \nOut[60]: array([False, False,  True, False, False,  True], dtype=bool) \n\n```", "```py\nIn [61]: x [mask] = 0 \nIn [62]: x \nOut[62]: array([1, 3, 0, 5, 7, 0]) \n\n```", "```py\nIn [69]: x = np.random.random(50) \nIn [70]: (x > .5).sum() \nOut[70]: 20 \n\n```", "```py\nIn [71]: np.lookfor('resize') \nSearch results for 'resize' \n--------------------------- \nnumpy.ma.resize \n    Return a new masked array with the specified size and shape. \nnumpy.chararray.resize \n    Change shape and size of array in-place. \nnumpy.oldnumeric.ma.resize \n    The original array's total size can be any size. \nnumpy.resize \n    Return a new array with the specified shape. \n\n```"]