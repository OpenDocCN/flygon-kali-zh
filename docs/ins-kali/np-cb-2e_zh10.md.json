["```py\n    $ pip install -U scikit-learn\n    $ easy_install -U scikit-learn\n\n    ```", "```py\n    $ python setup.py install\n\n    ```", "```py\nfrom __future__ import print_function\nfrom sklearn import datasets\n\nboston_prices = datasets.load_boston()\nprint(\"Data shape\", boston_prices.data.shape)\nprint(\"Data max=%s min=%s\" % (boston_prices.data.max(), boston_prices.data.min()))\nprint(\"Target shape\", boston_prices.target.shape)\nprint(\"Target max=%s min=%s\" % (boston_prices.target.max(), boston_prices.target.min()))\n```", "```py\nData shape (506, 13)\nData max=711.0 min=0.0\nTarget shape (506,)\nTarget max=50.0 min=5.0\n\n```", "```py\n    # 2011 to 2012\n    start = datetime.datetime(2011, 01, 01)\n    end = datetime.datetime(2012, 01, 01)\n\n    #Dow Jones symbols\n    symbols = [\"AA\", \"AXP\", \"BA\", \"BAC\", \"CAT\",\n       \"CSCO\", \"CVX\", \"DD\", \"DIS\", \"GE\", \"HD\",\n       \"HPQ\", \"IBM\", \"INTC\", \"JNJ\", \"JPM\", \n       \"KO\", \"MCD\", \"MMM\", \"MRK\", \"MSFT\", \"PFE\",\n       \"PG\", \"T\", \"TRV\", \"UTX\", \"VZ\", \"WMT\", \"XOM\"]\n\n    quotes = []\n\n    for symbol in symbols:\n        try:\n            quotes.append(finance.quotes_historical_yahoo(symbol, start, end, asobject=True))\n        except urllib2.HTTPError as e:\n            print(symbol, e)\n\n    close = np.array([q.close for q in quotes]).astype(np.float)\n    print(close.shape)\n    ```", "```py\n    logreturns = np.diff(np.log(close))\n    print(logreturns.shape)\n\n    logreturns_norms = np.sum(logreturns ** 2, axis=1)\n    S = - logreturns_norms[:, np.newaxis] - logreturns_norms[np.newaxis, :] + 2 * np.dot(logreturns, logreturns.T)\n    ```", "```py\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    for symbol, label in zip(symbols, labels):\n        print('%s in Cluster %d' % (symbol, label)) \n    ```", "```py\n    from __future__ import print_function\n    import datetime\n    import numpy as np\n    import sklearn.cluster\n    from matplotlib import finance\n    import urllib2\n\n    #1\\. Download price data\n\n    # 2011 to 2012\n    start = datetime.datetime(2011, 01, 01)\n    end = datetime.datetime(2012, 01, 01)\n\n    #Dow Jones symbols\n    symbols = [\"AA\", \"AXP\", \"BA\", \"BAC\", \"CAT\",\n       \"CSCO\", \"CVX\", \"DD\", \"DIS\", \"GE\", \"HD\",\n       \"HPQ\", \"IBM\", \"INTC\", \"JNJ\", \"JPM\", \n       \"KO\", \"MCD\", \"MMM\", \"MRK\", \"MSFT\", \"PFE\",\n       \"PG\", \"T\", \"TRV\", \"UTX\", \"VZ\", \"WMT\", \"XOM\"]\n\n    quotes = []\n\n    for symbol in symbols:\n        try:\n            quotes.append(finance.quotes_historical_yahoo(symbol, start, end, asobject=True))\n        except urllib2.HTTPError as e:\n            print(symbol, e)\n\n    close = np.array([q.close for q in quotes]).astype(np.float)\n    print(close.shape)\n\n    #2\\. Calculate affinity matrix\n    logreturns = np.diff(np.log(close))\n    print(logreturns.shape)\n\n    logreturns_norms = np.sum(logreturns ** 2, axis=1)\n    S = - logreturns_norms[:, np.newaxis] - logreturns_norms[np.newaxis, :] + 2 * np.dot(logreturns, logreturns.T)\n\n    #3\\. Cluster using affinity propagation\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    for symbol, label in zip(symbols, labels):\n        print('%s in Cluster %d' % (symbol, label))\n    ```", "```py\n    (29, 252)\n    (29, 251)\n    AA in Cluster 0\n    AXP in Cluster 6\n    BA in Cluster 6\n    BAC in Cluster 1\n    CAT in Cluster 6\n    CSCO in Cluster 2\n    CVX in Cluster 7\n    DD in Cluster 6\n    DIS in Cluster 6\n    GE in Cluster 6\n    HD in Cluster 5\n    HPQ in Cluster 3\n    IBM in Cluster 5\n    INTC in Cluster 6\n    JNJ in Cluster 5\n    JPM in Cluster 4\n    KO in Cluster 5\n    MCD in Cluster 5\n    MMM in Cluster 6\n    MRK in Cluster 5\n    MSFT in Cluster 5\n    PFE in Cluster 7\n    PG in Cluster 5\n    T in Cluster 5\n    TRV in Cluster 5\n    UTX in Cluster 6\n    VZ in Cluster 5\n    WMT in Cluster 5\n    XOM in Cluster 7\n\n    ```", "```py\n$ python setup.py install\n\n```", "```py\n$ easy_install statsmodels\n\n```", "```py\nfrom __future__ import print_function\nimport datetime\nimport numpy as np\nfrom matplotlib import finance\nfrom statsmodels.stats.adnorm import normal_ad\n\n#1\\. Download price data\n\n# 2011 to 2012\nstart = datetime.datetime(2011, 01, 01)\nend = datetime.datetime(2012, 01, 01)\n\nquotes = finance.quotes_historical_yahoo('AAPL', start, end, asobject=True)\n\nclose = np.array(quotes.close).astype(np.float)\nprint(close.shape)\n\nprint(normal_ad(np.diff(np.log(close))))\n\n#Retrieving data for AAPL\n#(252,)\n#(0.57103805516803163, 0.13725944999430437)\n```", "```py\nRetrieving data for AAPL\n(252,)\n(0.57103805516803163, 0.13725944999430437)\n\n```", "```py\n$ pip install -U scikit-image\n$ easy_install -U scikit-image\n\n```", "```py\n$ python setup.py install\n\n```", "```py\n$ ./configure\n$  make\n$  sudo make install\n\n```", "```py\n    dataset = load_sample_images()\n    img = dataset.images[0]\n    ```", "```py\n    gray_img = rgb2gray(img)\n    ```", "```py\n    harris_coords = corner_peaks(corner_harris(gray_img))\n    y, x = np.transpose(harris_coords)\n    ```", "```py\n    from sklearn.datasets import load_sample_images\n    import matplotlib.pyplot as plt\n    import numpy as np\n    from skimage.feature import corner_harris\n    from skimage.feature import corner_peaks\n    from skimage.color import rgb2gray\n\n    dataset = load_sample_images()\n    img = dataset.images[0]\n    gray_img = rgb2gray(img)\n    harris_coords = corner_peaks(corner_harris(gray_img))\n    y, x = np.transpose(harris_coords)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.plot(x, y, 'ro')\n    plt.show()\n    ```", "```py\nfrom sklearn.datasets import load_sample_images\nimport matplotlib.pyplot as plt\nimport skimage.feature\n\ndataset = load_sample_images()\nimg = dataset.images[0] \nedges = skimage.feature.canny(img[..., 0])\nplt.axis('off')\nplt.imshow(edges)\nplt.show()\n```", "```py\n$ sudo easy_install -U pandas\n$ pip install pandas\n\n```", "```py\n$ sudo apt-get install python-pandas\n\n```", "```py\n$ git clone git://github.com/pydata/pandas.git\n$ cd pandas\n$ python setup.py install\n\n```", "```py\n    data = {}\n\n    for i, symbol in enumerate(symbols):\n       data[symbol] = np.diff(np.log(close[i]))\n\n    # Convention: import pandas as pd\n    df = pd.DataFrame(data, index=dates[0][:-1], columns=symbols)\n    ```", "```py\n    print(df.corr())\n    df.plot()\n    ```", "```py\n    from __future__ import print_function\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from matplotlib import finance\n    import numpy as np\n\n    # 2011 to 2012\n    start = datetime(2011, 01, 01)\n    end = datetime(2012, 01, 01)\n\n    symbols = [\"AA\", \"AXP\", \"BA\", \"BAC\", \"CAT\"]\n\n    quotes = [finance.quotes_historical_yahoo(symbol, start, end, asobject=True)\n              for symbol in symbols]\n\n    close = np.array([q.close for q in quotes]).astype(np.float)\n    dates = np.array([q.date for q in quotes])\n\n    data = {}\n\n    for i, symbol in enumerate(symbols):\n       data[symbol] = np.diff(np.log(close[i]))\n\n    df = pd.DataFrame(data, index=dates[0][:-1], columns=symbols)\n\n    print(df.corr())\n    df.plot()\n    plt.legend(symbols)\n    plt.show()\n\n    #           AA       AXP        BA       BAC       CAT\n    #AA   1.000000  0.768484  0.758264  0.737625  0.837643\n    #AXP  0.768484  1.000000  0.746898  0.760043  0.736337\n    #BA   0.758264  0.746898  1.000000  0.657075  0.770696\n    #BAC  0.737625  0.760043  0.657075  1.000000  0.657113\n    #CAT  0.837643  0.736337  0.770696  0.657113  1.000000\n    ```", "```py\n     AA       AXP        BA       BAC       CAT\n    AA   1.000000  0.768484  0.758264  0.737625  0.837643\n    AXP  0.768484  1.000000  0.746898  0.760043  0.736337\n    BA   0.758264  0.746898  1.000000  0.657075  0.770696\n    BAC  0.737625  0.760043  0.657075  1.000000  0.657113\n    CAT  0.837643  0.736337  0.770696  0.657113  1.000000\n\n    ```", "```py\n$ sudo easy_install patsy\n$ pip install --upgrade patsy\n\n```", "```py\n    data = statsmodels.api.datasets.copper.load_pandas()\n    ```", "```py\n    x, y = data.exog, data.endog\n\n    fit = statsmodels.api.OLS(y, x).fit()\n    print(\"Fit params\", fit.params)\n    ```", "```py\n    Fit params COPPERPRICE         14.222028\n    INCOMEINDEX       1693.166242\n    ALUMPRICE          -60.638117\n    INVENTORYINDEX    2515.374903\n    TIME               183.193035\n\n    ```", "```py\n    print(fit.summary())\n    ```", "```py\n    from __future__ import print_function\n    import statsmodels.api\n\n    # See https://github.com/statsmodels/statsmodels/tree/master/statsmodels/datasets\n    data = statsmodels.api.datasets.copper.load_pandas()\n\n    x, y = data.exog, data.endog\n\n    fit = statsmodels.api.OLS(y, x).fit()\n    print(\"Fit params\", fit.params)\n    print()\n    print(\"Summary\")\n    print()\n    print(fit.summary())\n    ```", "```py\n    dt_idx = pandas.DatetimeIndex(quotes.date)\n    ```", "```py\n    df = pandas.DataFrame (quotes.close, index=dt_idx, columns=[symbol])\n    ```", "```py\n    resampled = df.resample('M', how=numpy.mean)\n    print(resampled)\n    ```", "```py\n     AAPL\n    2011-01-31  336.932500\n    2011-02-28  349.680526\n    2011-03-31  346.005652\n    2011-04-30  338.960000\n    2011-05-31  340.324286\n    2011-06-30  329.664545\n    2011-07-31  370.647000\n    2011-08-31  375.151304\n    2011-09-30  390.816190\n    2011-10-31  395.532381\n    2011-11-30  383.170476\n    2011-12-31  391.251429\n\n    ```", "```py\n    df.plot()\n    resampled.plot()\n    plt.show()\n    ```", "```py\n    from __future__ import print_function\n    import pandas\n    import matplotlib.pyplot as plt\n    from datetime import datetime\n    from matplotlib import finance\n    import numpy as np\n\n    # Download AAPL data for 2011 to 2012\n    start = datetime(2011, 01, 01)\n    end = datetime(2012, 01, 01)\n\n    symbol = \"AAPL\"\n    quotes = finance.quotes_historical_yahoo(symbol, start, end, asobject=True)\n\n    # Create date time index\n    dt_idx = pandas.DatetimeIndex(quotes.date)\n\n    #Create data frame\n    df = pandas.DataFrame(quotes.close, index=dt_idx, columns=[symbol])\n\n    # Resample with monthly frequency\n    resampled = df.resample('M', how=np.mean)\n    print(resampled) \n\n    # Plot\n    df.plot()\n    plt.title('AAPL prices')\n    plt.ylabel('Price')\n\n    resampled.plot()\n    plt.title('Monthly resampling')\n    plt.ylabel('Price')\n    plt.grid(True)\n    plt.show()\n    ```"]