- en: Chapter 11. Effects and Sound
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。效果和声音
- en: CryENGINE hosts a very modular effects system, allowing the spawning of effects
    at runtime with minimal effort. The engine also features FMOD integration, giving
    the developer the tools for dynamic playback of audio, music, and localized dialogs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE拥有非常模块化的效果系统，允许在运行时轻松生成效果。引擎还具有FMOD集成，为开发人员提供了动态播放音频、音乐和本地化对话的工具。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning about the effects and sound systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习有关效果和声音系统
- en: Discovering how to create and trigger material effects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现如何创建和触发材料效果
- en: Learning how to export and customize sounds via FMOD Designer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何通过FMOD Designer导出和自定义声音
- en: Playing back custom sounds
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放自定义声音
- en: Learning how to integrate sounds into particles and physical events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何将声音集成到粒子和物理事件中
- en: Introducing effects
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入效果
- en: Without FX, the game world is usually hard to believe and is considered void
    of life. Simply adding effects such as sound and particles helps to make the world
    come alive, giving the player a much more immersive feeling of the world.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有FX，游戏世界通常很难相信，并且被认为是没有生命的。简单地添加声音和粒子等效果有助于使世界变得生动，给玩家带来更加沉浸式的世界感。
- en: Although there isn't one combined system for all types of effects in the engine,
    we'll be covering a number of systems that handle effects of various sorts. This
    includes material effects, particle effects, sound effects, and more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管引擎中没有一个统一的系统来处理所有类型的效果，但我们将涵盖处理各种效果的多个系统。这包括材料效果、粒子效果、音效等。
- en: Material effects
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料效果
- en: The material effects system handles reactions between materials, for example,
    to play different particle and sound effects based on which material a rock lands
    on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 材料效果系统处理材料之间的反应，例如，根据岩石落在的材料播放不同的粒子和声音效果。
- en: Surface types
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表面类型
- en: Each material is assigned a **surface type**, indicating what type of surface
    it is. For example, if we are creating a rock material, we should use the mat_rock
    surface type.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 每种材料都被分配了一个**表面类型**，表示其是什么类型的表面。例如，如果我们正在创建一个岩石材料，我们应该使用`mat_rock`表面类型。
- en: By assigning a surface type, the physics system will be able to gather information
    on how collisions should behave, for example, by getting the surface type's friction
    value. Interactions between multiple surface types also allow for dynamic effects
    that change based on the surface types in contact with each other.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分配表面类型，物理系统将能够收集有关碰撞应如何行为的信息，例如，通过获取表面类型的摩擦值。多个表面类型之间的相互作用还允许根据彼此接触的表面类型动态改变效果。
- en: Surface types can be queried programmatically quite easily, allowing various
    systems to create different code paths that are triggered based on the surface
    type.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以很容易地通过编程方式查询表面类型，从而允许各种系统创建基于表面类型触发的不同代码路径。
- en: In C++, surface types are represented by the `ISurfaceType` interface, which
    can be obtained by using `IMaterial::GetSurfaceType`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，表面类型由`ISurfaceType`接口表示，可通过`IMaterial::GetSurfaceType`获得。
- en: Using C#, surface types are represented by the `CryEngine.SurfaceType` class,
    and can be retrieved by using the `CryEngine.Material.SurfaceType` property.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C#，表面类型由`CryEngine.SurfaceType`类表示，并且可以通过`CryEngine.Material.SurfaceType`属性检索。
- en: Adding or modifying surface types
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加或修改表面类型
- en: Surface types are defined in `Game/Libs/MaterialEffects/SurfaceTypes.xml`. The
    file is parsed by the engine at startup, allowing materials to use the loaded
    surface types.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表面类型在`Game/Libs/MaterialEffects/SurfaceTypes.xml`中定义。引擎在启动时解析该文件，允许材料使用加载的表面类型。
- en: 'Each surface type is defined by using the `SurfaceType` element, for example,
    `mat_fabric` as shown in the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每种表面类型都是通过使用`SurfaceType`元素定义的，例如，如下代码所示的`mat_fabric`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The physics properties are queried by the physics system when collisions occur.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生碰撞时，物理系统会查询物理属性。
- en: Particle effects
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粒子效果
- en: Particle effects are handled by the `IParticleManager` interface, accessible
    by using `I3DEngine::GetParticleManager`. To obtain a pointer to an `IParticleEffect`
    object, see `IParticleManager::FindEffect`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子效果由`IParticleManager`接口处理，可通过`I3DEngine::GetParticleManager`访问。要获得`IParticleEffect`对象的指针，请参阅`IParticleManager::FindEffect`。
- en: Particle effects are created by using the **Particle Editor** contained in the
    **Sandbox Editor**, and are typically saved to `Game/Libs/Particles`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**Sandbox Editor**中包含的**Particle Editor**创建粒子效果，并通常保存到`Game/Libs/Particles`中。
- en: Sound effects
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音效
- en: The CryENGINE sound system is powered by FMOD, an audio content creation tool
    for games. By using FMOD, the engine supports easy creation and manipulation of
    sounds for immediate use in the game.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE声音系统由游戏音频内容创建工具FMOD提供支持。通过使用FMOD，引擎支持轻松创建和操作声音，以立即在游戏中使用。
- en: The sound system can be accessed via the `ISoundSystem` interface, which is
    commonly retrieved via the `gEnv->pSoundSystem` pointer. Sounds are represented
    by the `ISound` interface, from which a pointer can be retrieved via `ISoundSystem::CreateSound`
    or `ISoundSystem::GetSound`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 声音系统可以通过`ISoundSystem`接口访问，通常通过`gEnv->pSoundSystem`指针检索。声音由`ISound`接口表示，可以通过`ISoundSystem::CreateSound`或`ISoundSystem::GetSound`检索到指针。
- en: By accessing the `ISound` interface, we can alter semantics, distance multipliers,
    and more, as well as actually play the sound via `ISound::Play`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问`ISound`接口，我们可以更改语义、距离倍增器等，以及通过`ISound::Play`实际播放声音。
- en: FMOD Designer
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FMOD Designer
- en: The designer is what we'll use every time we want to add more sounds to the
    different sound libraries in use by our project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师是我们每次想要向项目中使用的不同声音库添加更多声音时使用的工具。
- en: '![FMOD Designer](img/5909OT_11_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![FMOD Designer](img/5909OT_11_01.jpg)'
- en: The designer allows the creation and maintenance of sound banks, essentially
    libraries that create a separation between different sounds. Within the sound
    banks are events, sound definitions, and music. These can be given static and
    dynamic modifiers, for example, to give distinctive 3D effects to the sounds depending
    on the in-game environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师允许创建和维护声音库，本质上是创建不同声音之间的分离的库。声音库中包括事件、声音定义和音乐。这些可以被赋予静态和动态修饰符，例如根据游戏环境给声音赋予独特的3D效果。
- en: Creating and triggering material effects
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和触发材料效果
- en: There are two ways to trigger custom material effects, as explained in the following
    sections
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种触发自定义材料效果的方法，如下节所述。
- en: Automated playback based on physical interactions
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于物理相互作用的自动播放
- en: When two materials collide due to a physical event, the engine will look up
    a material effect in `Game/Libs/MaterialEffects/MaterialEffects.xml` based on
    the surface types assigned to the materials. This allows various particles and
    sounds to be played when certain interactions occur.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当两种材料由于物理事件发生碰撞时，引擎将根据分配给材料的表面类型在`Game/Libs/MaterialEffects/MaterialEffects.xml`中查找材料效果。这允许在发生某些交互时播放各种粒子和声音。
- en: For example, if a rock collides with wood, we can play a specific sound event
    along with wood splinter particles.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果岩石与木材发生碰撞，我们可以播放特定的声音事件以及木屑粒子。
- en: To start, open `MaterialEffects.xml` with Microsoft Excel.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，用Microsoft Excel打开`MaterialEffects.xml`。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although it's possible to modify the material effects document manually, this
    is not recommended due to the complicated nature of the Excel format.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以手动修改材料效果文档，但由于Excel格式的复杂性，这并不推荐。
- en: '![Automated playback based on physical interactions](img/5909OT_11_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![基于物理相互作用的自动播放](img/5909OT_11_02.jpg)'
- en: You should now see the material effects sheet inside your Excel application.
    The various surface types are laid out in a grid, and the intersection between
    the row and column defines which effect to use.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该在Excel应用程序中看到材料效果表。各种表面类型以网格形式布置，行和列的交叉点定义了要使用的效果。
- en: For example, judging by the sheet shown in the previous screenshot, if a material
    with the surface type **mat_flesh** collides with a **mat_vegetation** surface,
    the engine will load the **collision:vegetation_spruce** effect.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，根据上一个屏幕截图中显示的表，如果一个具有表面类型**mat_flesh**的材料与**mat_vegetation**表面发生碰撞，引擎将加载**collision:vegetation_spruce**效果。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A complete list of surface types can be viewed (or modified) via `Libs/MaterialEffects/SurfaceTypes.xml`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`Libs/MaterialEffects/SurfaceTypes.xml`查看（或修改）完整的表面类型列表。
- en: Adding new surface types
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新的表面类型
- en: If you need to add new surface types to the material effects document, simply
    add a corresponding row and a column with the surface type name, in order to have
    the engine load it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要向材料效果文档中添加新的表面类型，只需添加一个相应的行和一个带有表面类型名称的列，以便引擎加载它。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that the names of your surface type must appear in the same order for
    both the row and column.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，表面类型的名称必须按照相同的顺序出现在行和列中。
- en: Effect definitions
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 效果定义
- en: So now that we know how the system finds effects for various surface type collisions,
    how do we find and create effects?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道系统如何为各种表面类型的碰撞找到效果，那么我们如何找到并创建效果呢？
- en: 'Effects are contained inside `Libs/MaterialEffects/FXLibs/` as pure XML files.
    For example, the definition of the previously used **collision:vegetation_spruce**
    effect is contained in `Libs/MaterialEffects/FXLibs/Collision.xml` with the following
    contents:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 效果以纯XML文件的形式包含在`Libs/MaterialEffects/FXLibs/`中。例如，先前使用的**collision:vegetation_spruce**效果的定义包含在`Libs/MaterialEffects/FXLibs/Collision.xml`中，内容如下：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This tells the engine to play the specified particle when the effect is triggered.
    For example, as we defined previously, if a material with the surface type of
    **mat_flesh** collides with another of the type **mat_vegetation**, the engine
    will spawn the `Snow.Vegetation.SpruceNeedleGroup` effect at the position of impact.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉引擎在触发效果时播放指定的粒子。例如，如前所述，如果一个具有**mat_flesh**表面类型的材料与另一个**mat_vegetation**类型的材料发生碰撞，引擎将在碰撞位置生成`Snow.Vegetation.SpruceNeedleGroup`效果。
- en: 'But what about sounds? Sounds can be played back via events in a similar fashion
    to particles; simply replace the `Particle` tag with `Sound` and specify the name
    of your sound as shown in the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但是声音呢？声音可以通过事件以类似的方式播放，只需用声音的名称替换`Particle`标签，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now when the effect is played, we should be able to hear a pig squirm. That's
    what happens when you collide into vegetation, right?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当效果播放时，我们应该能够听到猪的挣扎声。这就是当你撞到植被时会发生的事情，对吧？
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's worth remembering that an effect does not have to contain one specific
    type of effect, but can also play multiple effects simultaneously. For example,
    based on the previous code, we could create a new effect that plays a sound and
    also spawns a particle effect when triggered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 值得记住的是，一个效果不必包含一种特定类型的效果，而可以在触发时同时播放多种效果。例如，根据前面的代码，我们可以创建一个新的效果，在触发时播放声音并生成粒子效果。
- en: Triggering custom events
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发自定义事件
- en: It is also possible to trigger custom material effects, which is useful when,
    for example, creating footstep effects that should differ based on the interaction
    name.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以触发自定义材料效果，例如，当创建应基于交互名称不同的脚步效果时非常有用。
- en: '![Triggering custom events](img/5909OT_11_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![触发自定义事件](img/5909OT_11_03.jpg)'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The colon ('**:**') stands for the effect category, which is the name of the
    effect library we created in the `Libs/MaterialEffects/FXLibs/` folder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号（'**:**'）代表效果类别，这是我们在`Libs/MaterialEffects/FXLibs/`文件夹中创建的效果库的名称。
- en: The previous screenshot is a smaller selection of custom material effects that
    are triggered programmatically.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个屏幕截图是以编程方式触发的自定义材料效果的较小选择。
- en: To obtain the ID of an effect, call `IMaterialEffects::GetEffectId`, by supplying
    the interaction name and the relevant surface type as shown in the following code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取效果的ID，请调用`IMaterialEffects::GetEffectId`，并提供交互名称和相关表面类型，如下所示。
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many ways of obtaining surface identifiers. For example, casting a
    ray using `RayWorldIntersection` will allow us to get the collided surface ID
    via the `ray_hit::surface_idx` variable. We could also simply call `IMaterial::GetSurfaceTypeId`
    on any material instance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多获取表面标识符的方法。例如，使用`RayWorldIntersection`投射射线将允许我们通过`ray_hit::surface_idx`变量获取碰撞表面ID。我们也可以简单地在任何材质实例上调用`IMaterial::GetSurfaceTypeId`。
- en: We should now have the identifier of the `footstep_player` effect, based on
    the surface type we passed to `GetEffectId`. For example, by cross-referencing
    with the previous screenshot, and assuming that we passed the `mat_metal` identifier,
    we should have the ID of the `footstep_player:metal_thick` effect.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该有`footstep_player`效果的标识符，基于我们传递给`GetEffectId`的表面类型。例如，通过与先前的截图交叉引用，并假设我们传递了`mat_metal`标识符，我们应该有`footstep_player:metal_thick`效果的ID。
- en: 'We can then execute the effect by calling `IMaterialEffects::ExecuteEffect`
    as shown:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过调用`IMaterialEffects::ExecuteEffect`来执行效果，如下所示：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is also possible to get the effect resources by calling `IMaterialEffects::GetResources`
    as shown:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过调用`IMaterialEffects::GetResources`来获取效果资源，如下所示：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Animation-based events and effects
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于动画的事件和效果
- en: Animation-based events can be used to trigger specific effects during a set
    time of an animation. For example, we could use this to link sounds to animations
    to make sure that the sound is always played in sync with its corresponding animation.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于动画的事件可用于在动画的特定时间触发特定效果。例如，我们可以使用这个来将声音链接到动画，以确保声音始终与其对应的动画同步播放。
- en: To start, open the **Character Editor** via the **Sandbox Editor**, load any
    character definition, and then select any animation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过**Sandbox Editor**打开**Character Editor**，加载任何角色定义，然后选择任何动画。
- en: '![Animation-based events and effects](img/5909OT_11_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![基于动画的事件和效果](img/5909OT_11_04.jpg)'
- en: Select the **Animation Control** tab at the bottom center of the window, and
    choose any time during the animation during which you want to play your sound.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口底部中央选择**Animation Control**选项卡，并选择动画期间的任何时间，您想要播放声音的时间。
- en: When you have the slider positioned on the time your sound should be played
    at, click on **New Event**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当滑块定位在应播放声音的时间上时，单击**New Event**。
- en: The **Name** field of the event should be **sound**, and set the **Parameter**
    field to the path of the sound that you want to play.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的**Name**字段应为**sound**，并将**Parameter**字段设置为要播放的声音路径。
- en: '![Animation-based events and effects](img/5909OT_11_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![基于动画的事件和效果](img/5909OT_11_05.jpg)'
- en: After clicking on **Save**, the sound should start playing along with the animation
    at the time specified.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Save**后，声音应该会在指定的时间与动画一起播放。
- en: Spawning particle emitters
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成粒子发射器
- en: As mentioned in the *Particle effects* section, particle effects are represented
    by the `IParticleEffect` interface. However, a particle effect is not the same
    as a particle emitter. The effect interface handles the properties of the default
    effect, and can spawn individual emitters that show the visual effect in the game.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如*Particle effects*部分所述，粒子效果由`IParticleEffect`接口表示。但是，粒子效果与粒子发射器不同。效果接口处理默认效果的属性，并可以生成显示游戏中的视觉效果的单个发射器。
- en: Emitters are represented by the `IParticleEmitter` interface, and are most commonly
    retrieved by calling `IParticleEffect::Spawn`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 发射器由`IParticleEmitter`接口表示，通常通过调用`IParticleEffect::Spawn`来检索。
- en: Exporting sounds by using FMod
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过使用FMod导出声音
- en: So you want to export a few sounds to the engine? The first thing we need to
    do is create a new FMod project, via the **FMOD Designer**. To do so, start by
    opening the designer via `<Engine Root>/Tools/FmodDesigner/fmod_designer.exe`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '所以你想要将一些声音导出到引擎？我们需要做的第一件事是通过**FMOD Designer**创建一个新的FMod项目。要这样做，首先通过`<Engine
    Root>/Tools/FmodDesigner/fmod_designer.exe`打开设计师。 '
- en: To create a new project, click on the **File** menu, select **New Project**,
    and then save the project to the location you see fit. We'll be saving ours to
    `Game/Sounds/Animals/Animals.fdp`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新项目，请单击**File**菜单，选择**New Project**，然后将项目保存到您认为合适的位置。我们将保存到`Game/Sounds/Animals/Animals.fdp`。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a more in-depth tutorial on the FMOD sound system, see the CryENGINE documentation
    at [http://docs.cryengine.com/display/SDKDOC3/The+FMOD+Designer](http://docs.cryengine.com/display/SDKDOC3/The+FMOD+Designer).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关FMOD音频系统的更深入教程，请参阅CryENGINE文档[http://docs.cryengine.com/display/SDKDOC3/The+FMOD+Designer](http://docs.cryengine.com/display/SDKDOC3/The+FMOD+Designer)。
- en: Adding sounds to the project
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向项目添加声音
- en: 'Now that we have a sound project, it''s time to add a few sounds. To do so,
    make sure that you''re in the **Events** menu, with the **Groups** tab activated
    as shown in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个声音项目，是时候添加一些声音了。要这样做，请确保您在**Events**菜单中，**Groups**选项卡处于激活状态，如下截图所示：
- en: '![Adding sounds to the project](img/5909OT_11_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![向项目添加声音](img/5909OT_11_06.jpg)'
- en: Now, to add a sound, simply drag a `.wav` file into the group you selected,
    and it should appear there. You can now navigate to **Project** | **Build**, or
    press *Ctrl* + *B*, in order to build the wave bank for your project, which is
    what the engine will load to detect the sounds.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要添加声音，只需将`.wav`文件拖放到您选择的组中，然后它应该出现在那里。现在，您可以导航到**Project** | **Build**，或按*Ctrl*
    + *B*，以构建项目的波形库，这是引擎将加载以检测声音的内容。
- en: '![Adding sounds to the project](img/5909OT_11_07.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![向项目添加声音](img/5909OT_11_07.jpg)'
- en: By adding more sounds to the event group, the system will randomly pick a sound
    when the group is requested.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向事件组添加更多声音，系统将在请求组时随机选择一个声音。
- en: By selecting an event group in FMOD, we'll also be able to modify its properties,
    essentially tweaking how the sound is played when it is played back.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在FMOD中选择事件组，我们还可以修改其属性，从而调整声音在播放时的播放方式。
- en: '![Adding sounds to the project](img/5909OT_11_08.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![将声音添加到项目中](img/5909OT_11_08.jpg)'
- en: Most properties statically affect the sound, whereas ending with **Randomization**
    creates an effect that is randomly applied at runtime. For example, by tweaking
    **Pitch Randomization**, we can ensure that the pitch of the sound will be randomly
    offset by the value we choose, giving the sound a unique touch.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数属性静态影响声音，而以**随机化**结尾的属性会在运行时随机应用效果。例如，通过调整**音高随机化**，我们可以确保声音的音高会随机偏移我们选择的值，给声音增添独特的风格。
- en: Playing sounds
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放声音
- en: When playing audio, we have to differentiate between dynamic sounds triggered
    by the programmer, and static sounds that are triggered by the level creator.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在播放音频时，我们必须区分由程序员触发的动态声音和由关卡创建者触发的静态声音。
- en: There are multiple ways of triggering audio events, which should be evaluated
    based on the purpose of the sound.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种触发音频事件的方式，应根据声音的目的进行评估。
- en: Using SoundSpots
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SoundSpots
- en: The soundspot entity exists to allow level designers to easily place an entity
    that will play a predefined sound in a specific area. The sound entity supports
    looping sounds, or playing them once each time it is triggered from a scripted
    event.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 声音点实体存在是为了让关卡设计师轻松地放置一个实体，以便在特定区域播放预定义的声音。声音实体支持循环声音，或者在从脚本事件触发时每次播放一次。
- en: 'To use a soundspot, start by placing a new instance of the **SoundSpot** entity
    via the Rollupbar, or navigate to **Sound** | **Soundspot**. Once placed, you
    should see something similar to the example shown in following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用声音点，首先通过Rollupbar放置一个新的**SoundSpot**实体的实例，或导航到**Sound** | **Soundspot**。放置后，您应该看到类似于以下屏幕截图的示例：
- en: '![Using SoundSpots](img/5909OT_11_09.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![使用SoundSpots](img/5909OT_11_09.jpg)'
- en: 'We can now assign a sound that should be played within the spot. To do so,
    click on the **Source** entity property and then choose a sound via the **Sound
    Browser** window as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以分配应该在该位置播放的声音。要这样做，请单击**Source**实体属性，然后通过**Sound Browser**窗口选择一个声音，如下面的屏幕截图所示：
- en: '![Using SoundSpots](img/5909OT_11_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![使用SoundSpots](img/5909OT_11_10.jpg)'
- en: You can then set up **SoundSpot** to either always play the sound, or be triggered
    via flowgraph. For example, in the following screenshot, the soundspot will play
    its sound when the player uses the *K* key.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以设置**SoundSpot**以始终播放声音，或者通过流程图触发。例如，在下面的屏幕截图中，当玩家使用*K*键时，声音点将播放其声音。
- en: '![Using SoundSpots](img/5909OT_11_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用SoundSpots](img/5909OT_11_11.jpg)'
- en: Programmatically playing sound
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以编程方式播放声音
- en: 'To programmatically play a sound, we''ll first need to retrieve an `ISound`
    pointer relevant to the specific sound we''re interested in playing, via `ISoundSystem::CreateSound`
    as shown:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要以编程方式播放声音，我们首先需要通过`ISoundSystem::CreateSound`检索与我们感兴趣的特定声音相关的`ISound`指针，如下所示：
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can then play the sound directly via `ISound::Play`, or attach it to an
    entity''s sound proxy:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以通过`ISound::Play`直接播放声音，或将其附加到实体的声音代理：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By using an entity sound proxy, we can make sure that the sound follows that
    entity as it moves around the game world.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用实体声音代理，我们可以确保声音在游戏世界中移动时跟随该实体。
- en: Sound flags
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声音标志
- en: When creating sounds by using the `ISoundSystem::CreateSound interface`, we
    have the option to specify a set of flags that will affect the playback of our
    sound.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`ISoundSystem::CreateSound`接口创建声音时，我们可以指定一组标志，这些标志将影响我们声音的播放。
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some flags need to be set up in FMOD before they can be used. For example, sounds
    with 3D space effects have to be set up in FMOD before they can be used in the
    engine.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用之前，需要在FMOD中设置一些标志。例如，具有3D空间效果的声音必须在FMOD中设置好才能在引擎中使用。
- en: These flags are contained in `ISound.h` as preprocessor macros with the `FLAG_SOUND_`
    prefix. For example, we could apply the `FLAG_SOUND_DOPPLER` flag to our sound
    in order to have a Doppler effect simulated on playback.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标志包含在`ISound.h`中，作为带有`FLAG_SOUND_`前缀的预处理器宏。例如，我们可以在我们的声音中应用`FLAG_SOUND_DOPPLER`标志，以便在播放时模拟多普勒效应。
- en: Sound semantics
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声音语义
- en: Semantics are essentially modifiers applied to sounds, and are required for
    each sound in order to have it played.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 语义本质上是应用于声音的修饰符，每个声音都需要它才能播放。
- en: The different sound semantics can be viewed in `ISound.h` (in the CryCommon
    project), within the `ESoundSemantic` enum.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的声音语义可以在`ISound.h`（在CryCommon项目中）中查看，其中包括`ESoundSemantic`枚举。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have exported sounds from FMOD into the engine, and learned
    how to tweak them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经将声音从FMOD导入到引擎中，并学会了如何调整它们。
- en: You should now know how to trigger sounds both via the Sandbox Editor and programmatically,
    and also have a working knowledge of material effects.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该知道如何通过Sandbox编辑器和以编程方式触发声音，并且对材质效果有了工作知识。
- en: If you're not quite ready to move on to the next chapter, why not try expanding
    your knowledge? A possibility could be to dive into the particle editor and create
    your own particle, complete with custom effects and sounds.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有准备好进入下一章，为什么不尝试扩展您的知识呢？一个可能的选择是深入研究粒子编辑器，并创建自己的粒子，包括自定义效果和声音。
- en: In the next chapter, we'll be covering the process of debugging and profiling
    your game logic, aiding you in working more efficiently.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍调试和分析游戏逻辑的过程，帮助您更高效地工作。
