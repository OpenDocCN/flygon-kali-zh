- en: '*Chpater 2*'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*'
- en: Variables, Data Types, and Operators
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量、数据类型和运算符
- en: Learning Objectives
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this lesson, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本课程结束时，您将能够：
- en: Use primitive data types in Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中使用原始数据类型
- en: Use reference types in Java
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中使用引用类型
- en: Implement simple arithmetic operations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现简单的算术运算
- en: Use type-casting methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类型转换方法
- en: Input and output various data types
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入和输出各种数据类型
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous lesson, we were introduced to the Java ecosystem and the tools
    that are needed to develop Java programs. In this lesson, we will start our journey
    of the Java language by looking at the fundamental concepts in the language such
    as variables, data types, and operations.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一课中，我们介绍了Java生态系统以及开发Java程序所需的工具。在本课中，我们将通过查看语言中的基本概念，如变量、数据类型和操作，开始我们的Java语言之旅。
- en: Variables and Data Types
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量和数据类型
- en: One of the fundamental concepts in computer programming is memory, used to store
    information in the computer. Computers use bits as the smallest information that
    can be stored. A bit is either a 1 or 0\. We can group 8 bits to get what is called
    a `byte`. Because bits are very small, we usually deal with bytes as the smallest
    unit when programming. When we write programs, what we are essentially doing is
    fetching some bits from a certain memory location, doing some operations on them,
    and writing back the result to a memory location.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程中的一个基本概念是内存，用于在计算机中存储信息。计算机使用位作为可以存储的最小信息单元。一个位要么是1，要么是0。我们可以将8位分组，得到所谓的“字节”。因为位非常小，所以在编程时通常使用字节作为最小单位。当我们编写程序时，我们实际上是从某个内存位置获取一些位，对它们进行一些操作，然后将结果写回到内存位置。
- en: We need a way to store different kinds of data in the computer's memory and
    tell the computer what kind of data is stored at what memory location.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来在计算机的内存中存储不同类型的数据，并告诉计算机在哪个内存位置存储了什么类型的数据。
- en: 'Data types are a way for us to specify what kind of data and the size we need
    to store at a given memory location. An example of a data type is an integer,
    a character, or a string. Broadly, the data types available in Java can be classified
    into the following types:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据类型是我们指定需要在给定内存位置存储的数据类型和大小的一种方式。数据类型的一个示例是整数、字符或字符串。广义上讲，Java中可用的数据类型可以分为以下类型：
- en: Primitive data types
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始数据类型
- en: Reference data types
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考数据类型
- en: '**Primitive types** are the fundamental types, that is, they cannot be modified.
    They are indivisible and form the basis for forming complex types. There are eight
    primitive data types in Java, which we will cover in depth in the subsequent sections:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**原始类型**是基本类型，即它们不能被修改。它们是不可分割的，并且构成了形成复杂类型的基础。Java中有八种原始数据类型，我们将在后续章节中深入讨论：'
- en: byte
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: byte
- en: short
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: short
- en: int
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: int
- en: long
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: long
- en: char
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: char
- en: float
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: float
- en: double
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: double
- en: boolean
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: boolean
- en: '**Reference types** are types that refer to data that''s stored in a certain
    memory location. They don''t hold the data themselves, but hold the address of
    the data. Objects, which will be covered later, are examples of reference types:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**引用类型**是指引用存储在特定内存位置的数据的类型。它们本身不保存数据，而是保存数据的地址。对象，稍后将介绍，是引用类型的示例：'
- en: '![Figure 2.1: Representation of reference types](img/C09581_Figure_02_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1：引用类型的表示](img/C09581_Figure_02_01.jpg)'
- en: 'Figure 2.1: Representation of reference types'
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.1：引用类型的表示
- en: 'All data types have the following common properties:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有数据类型都具有以下共同属性：
- en: They are associated with a value.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们与一个值相关联。
- en: They support certain operations on the value they hold.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们支持对它们所持有的值进行某些操作。
- en: They occupy a given number of bits in memory.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们在内存中占据一定数量的位。
- en: For example, an integer can have a value such as 100, support operations such
    as addition and subtraction, and is represented using 32-bits on the computer's
    memory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，整数可以具有值，如100，支持加法和减法等操作，并且在计算机内存中使用32位表示。
- en: Variables
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: 'Whenever we want to deal with a given data type, we have to create a variable
    of that data type. For example, to create an integer that holds your age, you
    would use a line like the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要处理特定的数据类型时，我们必须创建该数据类型的变量。例如，要创建一个保存您年龄的整数，您可以使用以下行：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we are saying the variable is called `age` and is an integer. Integers
    can only hold values in the range -2,147,483,648 to 2,147,483,647\. Trying to
    hold a value outside the range will result in an error. We can then assign a value
    to the `age` variable, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说变量名为`age`，是一个整数。整数只能保存范围在-2,147,483,648到2,147,483,647之间的值。尝试保存范围外的值将导致错误。然后，我们可以给`age`变量赋值，如下所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `age` variable now holds the value 30\. The word `age` is called an **identifier**
    and is used to refer to the memory location where the value 30 is stored. An identifier
    is a human-readable word that is used to refer to the memory address of the value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`age`变量现在保存了值30。单词`age`称为**标识符**，用于引用存储值30的内存位置。标识符是一个可读的单词，用于引用值的内存地址。'
- en: 'You can use a word of your choice as an identifier to refer to the same memory
    address. For example, we could have written this as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用自己选择的单词作为标识符来引用相同的内存地址。例如，我们可以将其写成如下形式：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is a graphical representation of the preceding code snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码片段的图形表示：
- en: '![](img/C09581_Figure_02_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/C09581_Figure_02_02.jpg)'
- en: 'Figure 2.2: Representation of age in memory address'
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.2：内存地址中年龄的表示
- en: 'As much as we can use any word as an identifier, Java has some rules on what
    makes up a valid identifier. The following are some of the rules to adhere to
    when creating identifier names:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以使用任何单词作为标识符，但Java对构成有效标识符的规则有一些规定。以下是创建标识符名称时需要遵守的一些规则：
- en: Identifiers should start with either a letter, `_`, or `$`. They cannot start
    with a number.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符应以字母、`_`或`$`开头。不能以数字开头。
- en: Identifiers can only contain valid unicode characters and numbers.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符只能包含有效的Unicode字符和数字。
- en: Identifiers cannot have spaces in between them.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符之间不能有空格。
- en: Identifiers can be of any length.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符可以是任意长度。
- en: Identifiers cannot be reserved keywords.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符不能是保留关键字。
- en: Identifiers cannot have arithmetic symbols such as + or -.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符不能包含算术符号，如+或-。
- en: Identifiers are case-sensitive, for example, age and Age are not the same identifiers.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符是区分大小写的，例如，age和Age不是相同的标识符。
- en: Reserved Keywords
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保留关键字
- en: Java also contains inbuilt words that are reserved and cannot be used as identifiers.
    These words have special meanings in the language.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Java还包含内置的保留字，不能用作标识符。这些单词在语言中有特殊的含义。
- en: Now let's discuss the primitive data types in Java. As we said before, Java
    has 8 primitive data types, which we will look at in detail.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论Java中的原始数据类型。正如我们之前所说，Java有8种原始数据类型，我们将详细了解。
- en: Integral Data Types
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数数据类型
- en: Integral types are types that have integer values. These are int, long, short,
    byte, and char.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 整数类型是具有整数值的类型。这些是int、long、short、byte和char。
- en: int Data Type
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数数据类型
- en: 'The `int` data type is used to represent integers. Integers are 32-bit numbers
    in the range of -2,147,483,648 to 2,147,483,647\. Example of integers are 0, 1,
    300, 500, 389 230, 1,345,543, -500, -324,145, and others in that range. For example,
    to create an `int` variable to hold a value 5, we write the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`int`数据类型用于表示整数。整数是-2,147,483,648到2,147,483,647范围内的32位数字。整数的示例是0、1、300、500、389
    230、1,345,543、-500、-324,145等。例如，要创建一个`int`变量来保存值5，我们写如下：'
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `num` variable is now an `int` with a value of five. We can also declare
    more than one variable of the same type in one line:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`num`变量现在是一个值为5的`int`。我们还可以在一行中声明多个相同类型的变量：'
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we have created five variables, all of the `int` type, and initialized
    to zero. We can also initialize all of the variables to a specific value, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了五个变量，全部为`int`类型，并初始化为零。我们还可以将所有变量初始化为特定值，如下所示：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In addition to expressing integers in decimal format, we can also express integers
    in octal, hexadecimal, and binary format:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以十进制格式表示整数外，我们还可以以八进制、十六进制和二进制格式表示整数：
- en: 'To express in hexadecimal format, we start the `int` with 0x or 0X, that is,
    a zero followed by x or X. The number has to be at least 2 digits in length. Hexadecimal
    numbers use 16 digits (0-9 and A-F). For example, to express 30 in hexadecimal,
    we would use the following code:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要以十六进制格式表示，我们从0x或0X开始`int`，即零后面跟着x或X。数字的长度必须至少为2位。十六进制数使用16个数字（0-9和A-F）。例如，要以十六进制表示30，我们将使用以下代码：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Printing the number will output 30 as expected. To hold an integer with a value
    of 501 in hexadecimal, we would write the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出的数字将按预期输出30。要在十六进制中保存值为501的整数，我们将写如下：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To express in octal format, we start the `int` with a zero and must have at
    least 2 digits. Octal numbers have 8 digits. For example, to express 15 in octal,
    we would do the following:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要以八进制格式表示，我们从零开始`int`，并且必须至少有2位数字。八进制数有8位数字。例如，要以八进制表示15，我们将执行以下操作：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Trying to print the preceding variable will output 15\. To represent 501 in
    octal, we would do the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试打印前面的变量将输出15。要表示501的八进制，我们将执行以下操作：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To express in binary format, we start the `int` with 0b or 0B, that is, a zero
    followed by b or B. The case doesn''t matter. For example, to hold the value 100
    in binary, we would do the following:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要以二进制格式表示，我们从0b或0B开始`int`，即零后面跟着b或B。大小写不重要。例如，要在二进制中保存值100，我们将执行以下操作：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To hold the number 999 in binary, we would do the following:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在二进制中保存数字999，我们将执行以下操作：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As a summary of the aforementioned four formats of representing integers, all
    the following variables hold the same value of 117:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为表示整数的前述四种格式的总结，所有以下变量都保存值为117：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: long Data Type
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长数据类型
- en: '`long` is a 64 bit equivalent of an int. They hold numbers in the range of
    -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\. Numbers of long type
    are called long literal and are denoted by an L at the end. For example, to declare
    a long of value 200, we would do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`long`是`int`的64位等价。它们保存在-9,223,372,036,854,775,808到9,223,372,036,854,775,807范围内的数字。长类型的数字称为长文字，并以L结尾。例如，要声明值为200的长，我们将执行以下操作：'
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To declare a `long` of value 8, we would do the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明值为8的`long`，我们将执行以下操作：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Since integers are 32-bit and hence lie within the range of long, we can convert
    an `int` into a `long`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于整数是32位的，因此位于long范围内，我们可以将`int`转换为`long`。
- en: Type Casting
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换
- en: 'To convert an `int` of value of 23 into a long literal, we would need to do
    what is called **type casting**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要将值为23的`int`转换为长文字，我们需要进行所谓的**类型转换**：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the second line, we cast the `num_int` of the `int` type to a long literal
    by using the notation `(long)num_int`. This is referred to as `casting`. Casting
    is the process of converting one data type into another. Although we can cast
    a long to an `int`, remember that the number might be outside the `int` range
    and some numbers will be truncated if they can't fit into the int.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我们通过使用表示法`(long)num_int`将`int`类型的`num_int`转换为长文字。这被称为`强制转换`。强制转换是将一种数据类型转换为另一种数据类型的过程。虽然我们可以将long转换为`int`，但请记住，数字可能超出`int`范围，如果无法适应int，一些数字将被截断。
- en: 'As is with `int`, `long` can also be in octal, hexadecimal, and binary, as
    shown in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与`int`一样，`long`也可以是八进制、十六进制和二进制的，如下所示：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Exercise 5: Type Casting'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习5：类型转换
- en: 'It''s often important to change one type to another. In this exercise, we will
    convert an integer into a floating point:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要将一种类型转换为另一种类型。在这个练习中，我们将把一个整数转换为浮点数：
- en: 'Import `Scanner` and create a public class:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Scanner`并创建一个公共类：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Input a number as an integer:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个整数作为输入：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Print out the integer:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出整数：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Convert the integer into a floating point:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将整数转换为浮点数：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Print out the floating point:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出浮点数：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: byte Data Type
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字节数据类型
- en: 'A `byte` is an 8-bit digit that can hold values in the range of -128 to 127\.
    `byte` is the smallest primitive data type in Java, and can be used to hold binary
    values. To assign a value to a `byte`, it has to be in the range -128 to 127,
    otherwise the compiler will raise an error:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`byte`是一个8位数字，可以容纳范围在-128到127之间的值。`byte`是Java中最小的原始数据类型，可以用来保存二进制值。要给`byte`赋值，它必须在-128到127的范围内，否则编译器会报错：'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can also cast an `int` to a `byte`, as we did with `long`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将`int`转换为`byte`，就像我们对`long`所做的那样：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In addition to casting, we can assign a `byte` to an `int`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 除了强制转换，我们还可以将`byte`赋给`int`：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We, however, cannot directly assign an `int` to a `byte` without casting. The
    following code will raise an error when you try to run it:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不能直接将`int`赋给`byte`，必须进行强制转换。当你尝试运行以下代码时，会引发错误：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is because an integer can be outside the byte range (-128 to 127) and hence
    some precision will be lost. Java doesn't allow you to assign out of range types
    to lower range types. You have to cast so that the overflow bits will be ignored.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为整数可以超出字节范围（-128到127），因此会丢失一些精度。Java不允许你将超出范围的类型赋给较小范围的类型。你必须进行强制转换，这样溢出的位将被忽略。
- en: short Data Type
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: short数据类型
- en: '`short` is a 16-bit data type that can hold numbers in the range of -32,768
    to 32,767\. To assign a value to a `short` variable, make sure it is in the specified
    range, otherwise an error will be thrown:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`short`是一个16位的数据类型，可以容纳范围在-32,768到32,767之间的数字。要给`short`变量赋值，确保它在指定的范围内，否则会抛出错误：'
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can assign a `byte` to a `short` because all the values of a byte fall
    in the short''s range. However, the reverse will throw an error, as explained
    with `byte` and `int`. To convert an `int` into a `short`, you have to cast to
    avoid the compile errors. This also applies to converting a `long` into a `short`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把`byte`赋给`short`，因为byte的所有值都在short的范围内。然而，反过来会报错，就像用`byte`和`int`解释的那样。要把`int`转换成`short`，你必须进行强制转换以避免编译错误。这也适用于将`long`转换为`short`：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Boolean Data Type
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔数据类型
- en: 'A `boolean` is a true or false value:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`boolean`是一个真或假的值：'
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Some languages, such as like C and C++, allow Booleans to take a value of 1
    for true and 0 for a false. Java doesn't allow you to assign 1 or 0 to Boolean
    and this will raise a compile-time error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言，比如C和C++，允许布尔值为true时取值为1，false时取值为0。Java不允许你将1或0赋给布尔值，这将引发编译时错误。
- en: char Data Type
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: char数据类型
- en: 'The `char` data type is used to hold a single character. The character is enclosed
    in single quotes. Examples of characters are ''a'', ''b'', ''z'', and ''5''. Char
    types are 16 bit and cannot be negative. Char types are essentially integers from
    0 to 65,535 to represent Unicode characters. Examples of how to declare chars
    are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`char`数据类型用于保存单个字符。字符用单引号括起来。字符的例子有''a''、''b''、''z''和''5''。Char类型是16位的，不能为负数。Char类型本质上是从0到65535的整数，用来表示Unicode字符。声明char的示例如下：'
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Note that chars are enclosed in single quotes, NOT double quotes. Enclosing
    a `char` in double quotes changes it to a `string`. A `string` is a collection
    of one or more chars. An example of a String is "Hello World":'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，字符要用单引号括起来，而不是双引号。用双引号括起来的`char`会变成`string`。`string`是一个或多个字符的集合。一个字符串的例子是"Hello
    World"：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Enclosing a `char` in double quotes will raise an error because the compiler
    interprets double quotes as a `string`, not a char:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 用双引号括起来的`char`会引发错误，因为编译器将双引号解释为`string`，而不是char：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Likewise, enclosing more than one character in single quotes raises a compiler
    error because chars should be only one character:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，用单引号括起来的多个字符会引发编译错误，因为字符应该只有一个字符：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In addition to chars being used to hold single characters, they can also be
    used to hold escape characters. Escape characters are special characters that
    have a special use. They consist of a backslash followed by a character and are
    enclosed in single quotes. There are 8 predefined escape characters, as shown
    in the following table, along with their uses:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用来保存单个字符，字符也可以用来保存转义字符。转义字符是具有特殊用途的特殊字符。它们由反斜杠后跟一个字符组成，并用单引号括起来。有8个预定义的转义字符，如下表所示，以及它们的用途：
- en: '![Table 2.1:  Representation of escape characters and their use](img/C09581_Table_02_01.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![表2.1：转义字符及其用法的表示](img/C09581_Table_02_01.jpg)'
- en: 'Table 2.1: Representation of escape characters and their use'
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表2.1：转义字符及其用法的表示
- en: 'Let''s say you write a line such as the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你写了下面这样一行：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `char` holds a newline and if you try printing it to the console, it skips
    to the next line.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`char`保存了一个换行符，如果你尝试将其打印到控制台，它会跳到下一行。'
- en: 'If you print `''\t''`, a tab is escaped in the output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印`'\t'`，输出中会出现一个制表符。
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: A '`\\`' will print a backslash in the output.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一个'\\'会在输出中打印一个反斜杠。
- en: 'You can use escape characters to format a string according to your desired
    output. For example, let''s look at the following line:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用转义字符来根据你想要的输出格式化字符串。例如，让我们看看下面这行：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here''s the output:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is because the escape character '`\n`' introduces a new line between `Hello`
    and `World`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为转义字符'`\n`'在`Hello`和`World`之间引入了一个新行。
- en: In addition, chars can also be expressed in Unicode using the Unicode escape
    character '`\u`'. Unicode is an international standard of encoding in which a
    character is assigned a numeric value that can be used on any platform. Unicode
    aims to support all the available languages in the world, which is in contrast
    to ASCII.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，字符还可以使用Unicode转义字符'`\u`'来表示Unicode。Unicode是一种国际编码标准，其中一个字符被分配一个数值，可以在任何平台上使用。Unicode旨在支持世界上所有可用的语言，这与ASCII相反。
- en: Floating-Point Data Types
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数据类型
- en: 'Floating-point data types are numbers that have a fractional part in their
    representation. Examples include 3.2, 5.681, and 0.9734\. Java has two data types
    to represent types with fractional parts:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数据类型是具有小数部分的数字。例如3.2、5.681和0.9734。Java有两种数据类型来表示带有小数部分的类型：
- en: '`float`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float`'
- en: '`double`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`'
- en: Floating types are represented using a special standard referred to as the IEEE
    754 Floating-point standard. This standard was set up by the Institute of Electrical
    and Electronic Engineers (IEEE) and is meant to make the representation of floating
    types uniform in the low level parts of the compute. Remember that floating types
    are usually approximations. When we say 5.01, this number has to be represented
    in binary format and the representation is usually an approximation to the real
    number. When working with very high-performance programs where values have to
    be measured to the order of micro numbers, it becomes imperative that you understand
    how floating types are represented at the hardware levels to avoid precision loss.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点类型使用一种称为IEEE 754浮点标准的特殊标准表示。这个标准是由电气和电子工程师学会（IEEE）制定的，旨在使低级计算机中浮点类型的表示统一。请记住，浮点类型通常是近似值。当我们说5.01时，这个数字必须以二进制格式表示，表示通常是对实际数字的近似。在处理需要测量到微小数字级别的高性能程序时，了解浮点类型在硬件级别的表示方式以避免精度损失变得至关重要。
- en: 'Floating types have two representations: decimal format and scientific notation.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点类型有两种表示形式：十进制格式和科学计数法。
- en: The decimal format is the normal format we usually use, such as 5.4, 0.0004,
    or 23,423.67.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制格式是我们通常使用的正常格式，例如5.4、0.0004或23,423.67。
- en: The scientific notation is the use of the letter e or E to represent a ten raised
    to a value. For example, 0.0004 in scientific notation is 4E-4 or 4e-4, which
    is similar to 4 x 10-4 . The number 23,423.67 in scientific notation would be
    2.342367E4 or 2.342367e4, which is similar to 2.342367 x 104\.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 科学计数法是使用字母e或E表示10的幂。例如，科学计数法中的0.0004是4E-4或4e-4，类似于4 x 10-4。科学计数法中的23,423.67将是2.342367E4或2.342367e4，类似于2.342367
    x 104。
- en: float Data Type
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数据类型
- en: '`float` is used to hold 32-bit fractional numbers in the range 1.4 x 10 -45
    and as big as 3.4 x 10 38\. That is, the smallest number a `float` can hold is
    1.4 x 10 -45 and the largest number it can hold is 3.4 x 10 38\. Floats are followed
    by a letter f or F to indicate that they are of `float` type. Examples of floats
    are shown as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`float`用于保存32位小数，范围为1.4 x 10 -45到3.4 x 10 38。也就是说，`float`可以保存的最小数字是1.4 x 10
    -45，最大数字是3.4 x 10 38。浮点数后面跟着一个字母f或F表示它们是`float`类型。浮点数的示例如下：'
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Floats can also be represented in scientific notation, as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数也可以用科学计数法表示，如下所示：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Java also has a class called Float that can encapsulate floats and offers some
    useful features. For example, to know the largest `float` number and the smallest
    `float` number available in your environment, you''d call the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Java还有一个名为Float的类，可以封装浮点数并提供一些有用的功能。例如，要知道你的环境中可用的最大`float`数和最小`float`数，可以调用以下方法：
- en: '[PRE39]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The Float class also has values to represent positive and negative infinity
    when a division by zero occurs:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当除以零时，Float类还有值表示正无穷和负无穷：
- en: '[PRE40]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Floats support two types of zeros: -0.0f and +0.0f. As we already said, float
    types are represented as approximations in the memory, and so even a zero is not
    an absolute zero. That is why we have two zeros. When a number is divided by positive
    zero, we get `Float.POSITIVE_INFINITY` and when a number is divided by negative
    zero, we get `Float.NEGATIVE_INFINITY`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数支持两种零：-0.0f和+0.0f。正如我们已经说过的，浮点类型在内存中表示为近似值，因此即使是零也不是绝对零。这就是为什么我们有两个零的原因。当一个数字被正零除时，我们得到`Float.POSITIVE_INFINITY`，当一个数字被负零除时，我们得到`Float.NEGATIVE_INFINITY`。
- en: 'The Float class also has the constant `NaN` to indicate a number that is not
    of a `float` type:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Float类还有一个常量`NaN`，表示不是`float`类型的数字：
- en: '[PRE41]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As with the integral types we have discussed, we can assign an `int`, `byte`,
    `short`, `long`, and char to a float, but cannot do the reverse unless we cast.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们讨论过的整数类型一样，我们可以将`int`、`byte`、`short`、`long`和char赋值给float，但不能反过来，除非我们进行转换。
- en: Note
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Casting an integer to a float and then back to an `int` will not always lead
    to an original number. Be careful when doing casting between `int` and `float`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数转换为浮点数，然后再转换回`int`，并不总是会得到原始数字。在进行`int`和`float`之间的转换时要小心。
- en: double Data Type
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双精度数据类型
- en: '`double` holds 64-bit numbers with fractional parts. That is, the range 4.9
    x 10e -324 to 1.7 x 10e 308\. Doubles are used to hold larger numbers than floats.
    They are represented with a d or D at the end. However, by default, in Java, any
    number with a fractional part is a `double`, so there is usually no need to append
    the d or D at the end. Examples of doubles are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`double`保存64位带小数部分的数字。也就是说，范围为4.9 x 10e -324到1.7 x 10e 308。双精度用于保存比浮点数更大的数字。它们以d或D结尾表示。但是，在Java中，默认情况下，任何带小数部分的数字都是`double`，因此通常不需要在末尾添加d或D。双精度的示例如下：'
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Like floats, doubles can also be represented in scientific notation:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 与浮点数一样，双精度也可以用科学计数法表示：
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As you might have already guessed it, Java also provides a class called `Double`
    with some useful constants, as shown in the following code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经猜到了，Java还提供了一个名为`Double`的类，其中包含一些有用的常量，如下所示：
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Likewise, we can assign the integral types and `float` except the `boolean`
    type to `double` and not the other way round until we cast. The following are
    example operations that are allowed and some that are forbidden:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以将整数类型和`float`赋值给`double`，但不能反过来，除非我们进行转换。以下是一些允许和一些禁止的示例操作：
- en: '[PRE45]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Activity 4: Inputting Student Information and Outputting an ID'
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动4：输入学生信息并输出ID
- en: Storing and outputting variables in foundational in any developing environment.
    In this activity you will be creating a program that will ask a student to input
    their data and then output a simple ID card. The program will use integers and
    strings along with the scanner class in the `java.util` package.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何开发环境中，存储和输出变量都是基础。在这个活动中，你将创建一个程序，要求学生输入他们的数据，然后输出一个简单的ID卡。该程序将使用整数和字符串以及`java.util`包中的scanner类。
- en: The following activity uses the string variable and the integer variable to
    input information about a student and then print it out.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下活动使用字符串变量和整数变量输入关于学生的信息，然后打印出来。
- en: Import the scanner package and create a new class.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入scanner包并创建一个新的类。
- en: Import the student name as a string.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入学生的名字作为字符串。
- en: Import the university name as a string.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入大学名称作为字符串。
- en: Import the student's age as an integer.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入学生的年龄作为整数。
- en: Use `System.out.println` to print out the student details.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`System.out.println`打印出学生的详细信息。
- en: 'After running the program, the output should be similar to this:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序后，输出应该类似于这样：
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-190
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 306.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在第306页找到。
- en: 'Activity 5: Calculating the Number of Full Fruit Boxes'
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动5：计算满箱水果的数量
- en: John is a peach grower. He picks peaches from his trees, puts them into fruit
    boxes and ships them. He can ship a fruit box if it is full with 20 peaches. If
    he has less than 20 peaches, he has to pick more peaches so he can fill a fruit
    box with 20 peaches and ship it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰是一个桃子种植者。他从树上摘桃子，把它们放进水果箱里然后运输。如果一个水果箱装满了20个桃子，他就可以运输。如果他的桃子少于20个，他就必须摘更多的桃子，这样他就可以装满一个水果箱，然后运输。
- en: 'We would like to help John by calculating the number of fruit boxes that he
    can ship and the number of peaches left behind, given the number of peaches he
    was able to pick. To achieve this, perform the following steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想通过计算他能够运输的水果箱的数量以及留下的桃子的数量来帮助约翰，给出他能够摘的桃子的数量。为了实现这一点，执行以下步骤：
- en: Create a new class and enter `PeachCalculator` as the class name
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的类，并输入`PeachCalculator`作为类名
- en: 'Import the `java.util.Scanner` package:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`java.util.Scanner`包：
- en: In the `main()` use `System.out.print` to ask the user for the `numberOfPeaches`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main()`中使用`System.out.print`询问用户`numberOfPeaches`。
- en: 'Calculate the `numberOfFullBoxes` and `numberOfPeachesLeft` values. Hint: use
    integer division.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算`numberOfFullBoxes`和`numberOfPeachesLeft`的值。提示：使用整数除法。
- en: Use `System.out.println` to output these two values.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`System.out.println`输出这两个值。
- en: Run the main program.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行主程序。
- en: 'The output should be similar to:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-203
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution for this activity can be found on page 307.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的解决方案可以在第307页找到。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, we learned about the use of primitive and reference data types,
    along with simple arithmetic operations on data in Java. We learned how to cast
    data types from one type to another. We then saw how we can work with floating-point
    data types.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这节课中，我们学习了在Java中使用基本数据类型和引用数据类型，以及对数据进行简单的算术运算。我们学会了如何将数据类型从一种类型转换为另一种类型。然后我们看到了如何使用浮点数据类型。
- en: In the next lesson, we will work with conditional statements and looping structures.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节课中，我们将学习条件语句和循环结构。
