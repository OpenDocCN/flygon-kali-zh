["```java\npublic interface DrawableInComic {\n    String getNickName();\n    void drawSpeechBalloon(String message);\n    void drawSpeechBalloon(DrawableInComic destination, String message);\n    void drawThoughtBalloon(String message);\n}\n```", "```java\npublic interface DrawableInGame {\n    String getFullName();\n    int getScore();\n    int getX();\n    int getY();\n    void setLocation(int x, int y);\n    void draw();\n    boolean isIntersectingWith(DrawableInGame otherDrawableInGame);\n}\n```", "```java\npublic interface Hideable {\n    int getNumberOfEyes();\n    void show();\n    void hide();\n}\n```", "```java\npublic interface Powerable {\n    int getSpellPower();\n    void useSpellToHide(Hideable hideable);\n}\n```", "```java\npublic interface Fightable {\n    int getSwordPower();\n    int getSwordWeight();\n    void unsheathSword();\n    void unsheathSword(Hideable hideable);\n}\n```", "```java\npublic class SpiderDog implements DrawableInComic {\n}\n```", "```java\njshell> public class SpiderDog implements DrawableInComic {\n ...> }\n|  Error:\n|  SpiderDog is not abstract and does not override abstract method drawThoughtBalloon(java.lang.String) in DrawableInComic\n\n```", "```java\npublic class SpiderDog implements DrawableInComic {\n    protected final String nickName;\n\n    public SpiderDog(String nickName) {\n        this.nickName = nickName;\n    }\n\n    protected void speak(String message) {\n        System.out.println(\n            String.format(\"%s -> %s\",\n                nickName,\n                message));\n    }\n\n    protected void think(String message) {\n        System.out.println(\n            String.format(\"%s -> ***%s***\",\n                nickName,\n                message));\n    }\n\n    @Override\n    String getNickName() {\n        return nickName;\n    }\n\n    @Override\n    void drawSpeechBalloon(String message) {\n        speak(message);\n    }\n\n    @Override\n    void drawSpeechBalloon(DrawableInComic destination, \n        String message) {\n        speak(String.format(\"message: %s, %s\",\n            destination.getNickName(),\n            message));\n    }\n\n    @Override\n    void drawThoughtBalloon(String message) {\n        think(message);\n    }\n}\n```", "```java\n|  Error:\n|  drawThoughtBalloon(java.lang.String) in SpiderDog cannot implement drawThoughtBalloon(java.lang.String) in DrawableInComic\n|    attempting to assign weaker access privileges; was public\n|      @Override\n|      ^--------...\n|  Error:\n|  drawSpeechBalloon(DrawableInComic,java.lang.String) in SpiderDog cannot implement drawSpeechBalloon(DrawableInComic,java.lang.String) in DrawableInComic\n|    attempting to assign weaker access privileges; was public\n|      @Override\n|      ^--------...\n|  Error:\n|  drawSpeechBalloon(java.lang.String) in SpiderDog cannot implement drawSpeechBalloon(java.lang.String) in DrawableInComic\n|    attempting to assign weaker access privileges; was public\n|      @Override\n|      ^--------...\n|  Error:\n|  getNickName() in SpiderDog cannot implement getNickName() in DrawableInComic\n|    attempting to assign weaker access privileges; was public\n|      @Override\n|      ^--------...\n\n```", "```java\npublic class SpiderDog implements DrawableInComic {\n    protected final String nickName;\n\n    public SpiderDog(String nickName) {\n        this.nickName = nickName;\n    }\n\n    protected void speak(String message) {\n        System.out.println(\n            String.format(\"%s -> %s\",\n                nickName,\n                message));\n    }\n\n    protected void think(String message) {\n        System.out.println(\n            String.format(\"%s -> ***%s***\",\n                nickName,\n                message));\n    }\n\n    @Override\n public String getNickName() {\n        return nickName;\n    }\n\n    @Override\n public void drawSpeechBalloon(String message) {\n        speak(message);\n    }\n\n    @Override\n public void drawSpeechBalloon(DrawableInComic destination, \n String message) {\n        speak(String.format(\"message: %s, %s\",\n            destination.getNickName(),\n            message));\n    }\n\n    @Override\n public void drawThoughtBalloon(String message) {\n        think(message);\n    }\n}\n```", "```java\npublic class WonderCat implements DrawableInComic {\n    protected final String nickName;\n    protected final int age;\n\n    public WonderCat(String nickName, int age) {\n        this.nickName = nickName;\n        this.age = age;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @Override\n public String getNickName() {\n        return nickName;\n    }\n\n    @Override\n public void drawSpeechBalloon(String message) {\n        String meow = \n            (age > 2) ? \"Meow\" : \"Meeoow Meeoow\";\n        System.out.println(\n            String.format(\"%s -> %s\",\n                nickName,\n                meow));\n    }\n\n    @Override\n public void drawSpeechBalloon(DrawableInComic destination, \n String message) {\n        System.out.println(\n            String.format(\"%s ==> %s --> %s\",\n                destination.getNickName(),\n                nickName,\n                message));\n    }\n\n    @Override\n public void drawThoughtBalloon(String message) {\n        System.out.println(\n            String.format(\"%s thinks: '%s'\",\n                nickName,\n                message));\n    }\n}\n```", "```java\npublic class WonderCat implements \n    DrawableInComic, DrawableInGame {\n```", "```java\n|  Error:\n|  WonderCat is not abstract and does not override abstract method isIntersectingWith(DrawableInGame) in DrawableInGame\n|  public class WonderCat implements\n|  ^--------------------------------...\n\n```", "```java\njava_9_oop_chapter_08_01 folder, in the example08_06.java file.\n```", "```java\npublic class WonderCat implements \n DrawableInComic, DrawableInGame {\n    protected final String nickName;\n    protected final int age;\n protected int score;\n protected final String fullName;\n protected int x;\n protected int y;\n\n public WonderCat(String nickName, \n int age, \n String fullName, \n int score, \n int x, \n int y) {\n        this.nickName = nickName;\n        this.age = age;\n this.fullName = fullName;\n this.score = score;\n this.x = x;\n this.y = y;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    @Override\n    public String getNickName() {\n        return nickName;\n    }\n\n    @Override\n    public void drawSpeechBalloon(String message) {\n        String meow = \n            (age > 2) ? \"Meow\" : \"Meeoow Meeoow\";\n        System.out.println(\n            String.format(\"%s -> %s\",\n                nickName,\n                meow));\n    }\n\n    @Override\n    public void drawSpeechBalloon(DrawableInComic destination, \n        String message) {\n        System.out.println(\n            String.format(\"%s ==> %s --> %s\",\n                destination.getNickName(),\n                nickName,\n                message));\n    }\n\n    @Override\n    public void drawThoughtBalloon(String message) {\n        System.out.println(\n            String.format(\"%s thinks: '%s'\",\n                nickName,\n                message));\n    }\n\n @Override\n public String getFullName() {\n return fullName;\n }\n\n @Override\n public int getScore() {\n return score;\n }\n\n @Override\n public int getX() {\n return x;\n }\n\n @Override\n public int getY() {\n return y;\n }\n\n @Override\n public void setLocation(int x, int y) {\n this.x = x;\n this.y = y;\n System.out.println(\n String.format(\"Moving WonderCat %s to x:%d, y:%d\",\n fullName,\n this.x,\n this.y));\n }\n\n @Override\n public void draw() {\n System.out.println(\n String.format(\"Drawing WonderCat %s at x:%d, y:%d\",\n fullName,\n x,\n y));\n }\n\n @Override\n public boolean isIntersectingWith(\n DrawableInGame otherDrawableInGame) {\n return ((x == otherDrawableInGame.getX()) &&\n (y == otherDrawableInGame.getY()));\n }\n}\n```", "```java\npublic class HideableWonderCat extends WonderCat implements Hideable {\n    protected final int numberOfEyes;\n\n    public HideableWonderCat(String nickName, int age, \n        String fullName, int score, \n        int x, int y, int numberOfEyes) {\n        super(nickName, age, fullName, score, x, y);\n        this.numberOfEyes = numberOfEyes;\n    }\n\n    @Override\n    public int getNumberOfEyes() {\n        return numberOfEyes;\n    }\n\n    @Override\n    public void show() {\n        System.out.println(\n            String.format(\n                \"My name is %s and you can see my %d eyes.\",\n                getFullName(), \n                numberOfEyes));\n    }\n\n    @Override\n    public void hide() {\n        System.out.println(\n            String.format(\n                \"%s is hidden.\", \n                getFullName()));\n    }\n}\n```", "```java\npublic class PowerableWonderCat extends WonderCat implements Powerable {\n    protected final int spellPower;\n\n    public PowerableWonderCat(String nickName, \n        int age, \n        String fullName, \n        int score, \n        int x, \n        int y, \n        int spellPower) {\n        super(nickName, age, fullName, score, x, y);\n        this.spellPower = spellPower;\n    }\n\n    @Override\n    public int getSpellPower() {\n        return spellPower;\n    }\n\n    @Override\n    public void useSpellToHide(Hideable hideable) {\n        System.out.println(\n            String.format(\n                \"%s uses his %d spell power to hide the Hideable with %d eyes.\",\n                getFullName(),\n                spellPower,\n                hideable.getNumberOfEyes()));\n    }\n}\n```", "```java\npublic class FightableWonderCat extends WonderCat implements Fightable {\n    protected final int swordPower;\n    protected final int swordWeight;\n\n    public FightableWonderCat(String nickName, \n        int age, \n        String fullName, \n        int score, \n        int x, \n        int y, \n        int swordPower,\n        int swordWeight) {\n        super(nickName, age, fullName, score, x, y);\n        this.swordPower = swordPower;\n        this.swordWeight = swordWeight;\n    }\n\n    private void printSwordInformation() {\n        System.out.println(\n            String.format(\n                \"%s unsheaths his sword.\", \n                getFullName()));\n        System.out.println(\n            String.format(\n                \"Sword power: %d. Sword weight: %d.\", \n                swordPower,\n                swordWeight));\n    }\n\n    @Override\n    public int getSwordPower() {\n        return swordPower;\n    }\n\n    @Override\n    public int getSwordWeight() {\n        return swordWeight;\n    }\n\n    @Override\n    public void unsheathSword() {\n        printSwordInformation();\n    }\n\n    @Override\n    public void unsheathSword(Hideable hideable) {\n        printSwordInformation();\n        System.out.println(\n            String.format(\"The sword targets a Hideable with %d eyes.\",\n                hideable.getNumberOfEyes()));\n    }\n}\n```", "```java\nSpiderDog spiderDog1 = \n    new SpiderDog(\"Buddy\");\nWonderCat wonderCat1 = \n    new WonderCat(\"Daisy\", 1, \"Mrs. Daisy\", 100, 15, 15);\nHideableWonderCat hideableWonderCat1 =\n    new HideableWonderCat(\"Molly\", 5, \"Mrs. Molly\", 450, 20, 10, 3); \nPowerableWonderCat powerableWonderCat1 =\n    new PowerableWonderCat(\"Princess\", 5, \"Mrs. Princess\", 320, 20, 10, 7);\nFightableWonderCat fightableWonderCat1 =\n    new FightableWonderCat(\"Abby\", 3, \"Mrs. Abby\", 1200, 40, 10, 7, 5);\n```", "```java\nspiderDog1 instanceof SpiderDog\nspiderDog1 instanceof DrawableInComic\n\nwonderCat1 instanceof WonderCat\nwonderCat1 instanceof DrawableInComic\nwonderCat1 instanceof DrawableInGame\n\nhideableWonderCat1 instanceof WonderCat\nhideableWonderCat1 instanceof HideableWonderCat\nhideableWonderCat1 instanceof DrawableInComic\nhideableWonderCat1 instanceof DrawableInGame\nhideableWonderCat1 instanceof Hideable\n\npowerableWonderCat1 instanceof WonderCat\npowerableWonderCat1 instanceof PowerableWonderCat\npowerableWonderCat1 instanceof DrawableInComic\npowerableWonderCat1 instanceof DrawableInGame\npowerableWonderCat1 instanceof Powerable\n\nfightableWonderCat1 instanceof WonderCat\nfightableWonderCat1 instanceof FightableWonderCat\nfightableWonderCat1 instanceof DrawableInComic\nfightableWonderCat1 instanceof DrawableInGame\nfightableWonderCat1 instanceof Fightable\n```"]