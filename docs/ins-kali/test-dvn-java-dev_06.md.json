["```java\njava.util.Date date = new java.util.Date(); \ndate.getTime(); // What is the result this method returns?\n```", "```java\nTicTacToeCollection collection = mock(TicTacToeCollection.class); \nassertThat(collection.drop()).isFalse();\ndoReturn(true).when(collection).drop(); \n\nassertThat(collection.drop()).isTrue();\n```", "```java\ndependencies { \n    compile 'org.jongo:jongo:1.1' \n    compile 'org.mongodb:mongo-java-driver:2.+' \n    testCompile 'junit:junit:4.12' \n    testCompile 'org.mockito:mockito-all:1.+' \n} \n```", "```java\n@Test \npublic void whenInstantiatedThenMongoHasDbNameTicTacToe() { \n  TicTacToeCollection collection = new TicTacToeCollection(); \n  assertEquals(\n     \"tic-tac-toe\",\n     collection.getMongoCollection().getDBCollection().getDB().getName()); \n} \n```", "```java\nprivate MongoCollection mongoCollection; \nprotected MongoCollection getMongoCollection() { \n  return mongoCollection; \n}\npublic TicTacToeCollection() throws UnknownHostException { \n  DB db = new MongoClient().getDB(\"tic-tac-toe\"); \n  mongoCollection = new Jongo(db).getCollection(\"bla\"); \n} \n```", "```java\n@Test \npublic void whenInstantiatedThenMongoCollectionHasNameGame() {\n  TicTacToeCollection collection = new TicTacToeCollection(); \n  assertEquals( \n            \"game\", \n            collection.getMongoCollection().getName()); \n} \n```", "```java\npublic TicTacToeCollection() throws UnknownHostException { \n  DB db = new MongoClient().getDB(\"tic-tac-toe\"); \n  mongoCollection = new Jongo(db).getCollection(\"game\"); \n} \n```", "```java\nTicTacToeCollection collection; \n\n@Before \npublic void before() throws UnknownHostException { \n  collection = new TicTacToeCollection(); \n} \n@Test \npublic void whenInstantiatedThenMongoHasDbNameTicTacToe() { \n//        throws UnknownHostException { \n//  TicTacToeCollection collection = new TicTacToeCollection(); \n  assertEquals(\n    \"tic-tac-toe\", \n    collection.getMongoCollection().getDBCollection().getDB().getName()); \n} \n\n@Test \npublic void whenInstantiatedThenMongoHasNameGame() { \n//        throws UnknownHostException { \n//  TicTacToeCollection collection = new TicTacToeCollection(); \n  assertEquals(\n    \"game\",  \n    collection.getMongoCollection().getName()); \n} \n```", "```java\nimport static org.mockito.Mockito.*; \n... \n@Before \npublic void before() throws UnknownHostException { \n  collection = spy(new TicTacToeCollection()); \n} \n```", "```java\n@Test\npublic void whenSaveMoveThenInvokeMongoCollectionSave() {\n  TicTacToeBean bean = new TicTacToeBean(3, 2, 1, 'Y');\n  MongoCollection mongoCollection = mock(MongoCollection.class);\n  doReturn(mongoCollection).when(collection).getMongoCollection();\n\n  collection.saveMove(bean);\n\n  verify(mongoCollection, times(1)).save(bean);\n}\n```", "```java\nMongoCollection mongoCollection = mock(MongoCollection.class);\n```", "```java\ndoReturn(mongoCollection).when(collection).getMongoCollection(); \n```", "```java\ncollection.saveMove(bean); \n```", "```java\nverify(mongoCollection, times(1)).save(bean);\n```", "```java\npublic void saveMove(TicTacToeBean bean) { \n} \n```", "```java\nWanted but not invoked: \nmongoCollection.save(Turn: 3; X: 2; Y: 1; Player: Y); \n```", "```java\npublic void saveMove(TicTacToeBean bean) { \n  getMongoCollection().save(null); \n} \n```", "```java\nArgument(s) are different! Wanted: \nmongoCollection.save(Turn: 3; X: 2; Y: 1; Player: Y); \n```", "```java\npublic void saveMove(TicTacToeBean bean) { \n  getMongoCollection().save(bean); \n} \n```", "```java\n@Test \npublic void whenSaveMoveThenReturnTrue() {\n  TicTacToeBean bean = new TicTacToeBean(3, 2, 1, 'Y');\n  MongoCollection mongoCollection = mock(MongoCollection.class);\n  doReturn(mongoCollection).when(collection).getMongoCollection();\n  assertTrue(collection.saveMove(bean));\n}\n```", "```java\npublic boolean saveMove(TicTacToeBean bean) {\n  getMongoCollection().save(bean);\n  return true;\n}\n```", "```java\nTicTacToeCollection collection;\nTicTacToeBean bean;\nMongoCollection mongoCollection;\n\n@Before\npublic void before() throws UnknownHostException {\n  collection = spy(new TicTacToeCollection());\n  bean = new TicTacToeBean(3, 2, 1, 'Y');\n  mongoCollection = mock(MongoCollection.class);\n} \n... \n@Test\npublic void whenSaveMoveThenInvokeMongoCollectionSave() {\n// TicTacToeBean bean = new TicTacToeBean(3, 2, 1, 'Y'); \n// MongoCollection mongoCollection = mock(MongoCollection.class); \n  doReturn(mongoCollection).when(collection).getMongoCollection(); \n  collection.saveMove(bean); \n  verify(mongoCollection, times(1)).save(bean); \n} \n\n@Test \npublic void whenSaveMoveThenReturnTrue() { \n// TicTacToeBean bean = new TicTacToeBean(3, 2, 1, 'Y'); \n// MongoCollection mongoCollection = mock(MongoCollection.class); \n   doReturn(mongoCollection).when(collection).getMongoCollection(); \n   assertTrue(collection.saveMove(bean)); \n} \n```", "```java\n@Test\npublic void givenExceptionWhenSaveMoveThenReturnFalse() {\n  doThrow(new MongoException(\"Bla\"))\n    .when(mongoCollection).save(any(TicTacToeBean.class));\n  doReturn(mongoCollection).when(collection).getMongoCollection();\n  assertFalse(collection.saveMove(bean));\n} \n```", "```java\npublic boolean saveMove(TicTacToeBean bean) {\n  try {\n    getMongoCollection().save(bean);\n    return true;\n  } catch (Exception e) {\n    return false;\n  }\n}\n```", "```java\n@Test\npublic void whenDropThenInvokeMongoCollectionDrop() {\n  doReturn(mongoCollection).when(collection).getMongoCollection();\n  collection.drop();\n  verify(mongoCollection).drop();\n}\n```", "```java\npublic void drop() { \n  getMongoCollection().drop(); \n} \n```", "```java\n@Test \npublic void whenDropThenReturnTrue() { \n  doReturn(mongoCollection).when(collection).getMongoCollection();\n  assertTrue(collection.drop()); \n}\n```", "```java\npublic boolean drop() { \n  getMongoCollection().drop(); \n  return true; \n} \n```", "```java\n@Test \npublic void givenExceptionWhenDropThenReturnFalse() {\n  doThrow(new MongoException(\"Bla\")).when(mongoCollection).drop(); \n  doReturn(mongoCollection).when(collection).getMongoCollection(); \n  assertFalse(collection.drop()); \n} \n```", "```java\npublic boolean drop() { \n  try { \n    getMongoCollection().drop();\n    return true; \n  } catch (Exception e) {\n    return false; \n  } \n} \n```", "```java\n@Test \npublic void whenInstantiatedThenSetCollection() {\n  assertNotNull(ticTacToe.getTicTacToeCollection());\n} \n```", "```java\nprivate TicTacToeCollection ticTacToeCollection;\n\nprotected TicTacToeCollection getTicTacToeCollection() {\n  return ticTacToeCollection;\n} \n```", "```java\npublic TicTacToe() throws UnknownHostException {\n  this(new TicTacToeCollection()); \n}\nprotected TicTacToe(TicTacToeCollection collection) {\n  ticTacToeCollection = collection; \n} \n```", "```java\nprivate TicTacToeCollection collection; \n\n@Before \npublic final void before() throws UnknownHostException {\n  collection = mock(TicTacToeCollection.class);\n// ticTacToe = new TicTacToe();\n  ticTacToe = new TicTacToe(collection);\n} \n```", "```java\n@Test \npublic void whenPlayThenSaveMoveIsInvoked() {\n  TicTacToeBean move = new TicTacToeBean(1, 1, 3, 'X');\n  ticTacToe.play(move.getX(), move.getY());\n  verify(collection).saveMove(move);\n}\n```", "```java\nTicTacToeBean move = new TicTacToeBean(1, 1, 3, 'X'); \n```", "```java\nticTacToe.play(move.getX(), move.getY()); \n```", "```java\nverify(collection, times(1)).saveMove(move); \n```", "```java\nprivate void setBox(int x, int y, char lastPlayer) {\n  if (board[x - 1][y - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[x - 1][y - 1] = lastPlayer;\n  }\n}\n```", "```java\nprivate void setBox(TicTacToeBean bean) {\n  if (board[bean.getX() - 1][bean.getY() - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[bean.getX() - 1][bean.getY() - 1] = lastPlayer;\n    getTicTacToeCollection().saveMove(bean);\n  }\n}\n```", "```java\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  lastPlayer = nextPlayer();\n// setBox(x, y, lastPlayer);\n  setBox(new TicTacToeBean(1, x, y, lastPlayer));\n  if (isWin(x, y)) {\n    return lastPlayer + \" is the winner\";\n  } else if (isDraw()) {\n    return RESULT_DRAW;\n  } else {\n    return NO_WINNER;\n  }\n}\n```", "```java\n@Before\npublic final void before() throws UnknownHostException {\n  collection = mock(TicTacToeCollection.class);\n  doReturn(true).when(collection).saveMove(any(TicTacToeBean.class));\n  ticTacToe = new TicTacToe(collection);\n}\n```", "```java\n@Test\npublic void whenPlayAndSaveReturnsFalseThenThrowException() {\n  doReturn(false).when(collection).saveMove(any(TicTacToeBean.class));\n  TicTacToeBean move = new TicTacToeBean(1, 1, 3, 'X');\n  exception.expect(RuntimeException.class);\n  ticTacToe.play(move.getX(), move.getY());\n}\n```", "```java\nprivate void setBox(TicTacToeBean bean) {\n  if (board[bean.getX() - 1][bean.getY() - 1] != '\\0') {\n    throw new RuntimeException(\"Box is occupied\");\n  } else {\n    board[bean.getX() - 1][bean.getY() - 1] = lastPlayer;\n//  getTicTacToeCollection().saveMove(bean);\n    if (!getTicTacToeCollection().saveMove(bean)) {\n      throw new RuntimeException(\"Saving to DB failed\");\n    }\n  }\n}\n```", "```java\n@Test \npublic void whenPlayInvokedMultipleTimesThenTurnIncreases() {\n  TicTacToeBean move1 = new TicTacToeBean(1, 1, 1, 'X'); \n  ticTacToe.play(move1.getX(), move1.getY()); \n  verify(collection, times(1)).saveMove(move1);\n  TicTacToeBean move2 = new TicTacToeBean(2, 1, 2, 'O'); \n  ticTacToe.play(move2.getX(), move2.getY()); \n  verify(collection, times(1)).saveMove(move2); \n} \n```", "```java\nprivate int turn = 0;\n...\npublic String play(int x, int y) {\n  checkAxis(x);\n  checkAxis(y);\n  lastPlayer = nextPlayer();\n  setBox(new TicTacToeBean(++turn, x, y, lastPlayer));\n  if (isWin(x, y)) {\n    return lastPlayer + \" is the winner\";\n  } else if (isDraw()) {\n    return RESULT_DRAW;\n  } else {\n    return NO_WINNER;\n  }\n}\n```", "```java\ntest { \n    include '**/*Spec.class' \n} \n```", "```java\ntask testInteg(type: Test) { \n    include '**/*Integ.class' \n} \n```", "```java\ngradle testInteg\n\n```", "```java\nimport org.junit.Test;\nimport java.net.UnknownHostException;\nimport static org.junit.Assert.*;\n\npublic class TicTacToeInteg {\n\n  @Test\n  public void givenMongoDbIsRunningWhenPlayThenNoException()\n        throws UnknownHostException {\n    TicTacToe ticTacToe = new TicTacToe();\n    assertEquals(TicTacToe.NO_WINNER, ticTacToe.play(1, 1));\n  }\n}\n```", "```java\n$ vagrant up\n\n```"]