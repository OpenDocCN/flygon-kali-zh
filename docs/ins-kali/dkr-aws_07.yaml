- en: Creating ECS Clusters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ECS集群
- en: In the last chapter, you learned how to build a custom ECS container-instance
    Amazon Machine Image (AMI), which introduced features you will typically want
    in your production real-world use cases, including custom storage configurations,
    CloudWatch logs support, and integration with CloudFormation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何构建自定义ECS容器实例Amazon Machine Image（AMI），介绍了您在生产实际用例中通常需要的功能，包括自定义存储配置、CloudWatch日志支持以及与CloudFormation的集成。
- en: In this chapter, you will put your custom machine image to work, building an
    ECS cluster composed of ECS container instances based on your custom machine image.
    Rather than take the approach of previous chapters, of discussing each of the
    various methods of configuring AWS resources, in this chapter, we will focus on
    using an infrastructure-as-code approach, and define your ECS cluster and supporting
    resources using CloudFormation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用自定义机器映像构建ECS集群，该集群由基于您的自定义机器映像的ECS容器实例组成。与之前章节的方法不同，讨论配置AWS资源的各种方法，本章将专注于使用基础设施即代码的方法，并使用CloudFormation定义您的ECS集群和支持资源。
- en: The standard model for deploying ECS clusters is based upon EC2 Auto Scaling
    groups, which consist of a group of EC2 instances that can automatically scale
    up or down based upon a variety of factors. In the use case of an ECS cluster,
    the EC2 Auto Scaling group is a collection of ECS container instances that collectively
    form an ECS cluster to which you can deploy your ECS services and ECS tasks. You
    will learn how to define EC2 auto-scaling groups, define launch configurations
    that control how your EC2 instances are deployed, and configure CloudFormation
    Init metadata, which allows you to trigger custom initialization logic at instance
    creation and wait for each of your instances to signal they have initialized successfully.
    Finally, you will configure supporting resources, such as IAM instance profiles
    and EC2 security groups, proceed to create your CloudFormation stack, and deploy
    your ECS cluster and underlying EC2 Auto Scaling group.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 部署ECS集群的标准模型基于EC2自动扩展组，它由一组EC2实例组成，可以根据各种因素自动扩展或缩小。在ECS集群的用例中，EC2自动扩展组是一组ECS容器实例，共同形成一个ECS集群，您可以将您的ECS服务和ECS任务部署到其中。您将学习如何定义EC2自动扩展组，定义控制您的EC2实例部署方式的启动配置，并配置CloudFormation
    Init元数据，该元数据允许您在实例创建时触发自定义初始化逻辑，并等待每个实例发出初始化成功的信号。最后，您将配置支持资源，如IAM实例配置文件和EC2安全组，然后创建您的CloudFormation堆栈，部署您的ECS集群和底层EC2自动扩展组。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Deployment overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署概述
- en: Defining an ECS cluster
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义ECS集群
- en: Configuring EC2 Auto Scaling groups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置EC2自动扩展组
- en: Defining EC2 Auto Scaling launch configurations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义EC2自动扩展启动配置
- en: Configuring CloudFormation Init Metadata
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置CloudFormation Init Metadata
- en: Configuring Auto Scaling group creation policies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置自动扩展组创建策略
- en: Configuring EC2 Instance Profiles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置EC2实例配置文件
- en: Configuring EC2 Security Groups
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置EC2安全组
- en: Deploying and testing an ECS cluster
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和测试ECS集群
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following lists the technical requirements to complete this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章列出了完成本章所需的技术要求：
- en: Administrator access to an AWS account
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS账户的管理员访问权限
- en: Local AWS profile configured as per instructions in Chapter 3
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第3章的说明配置本地AWS配置文件
- en: AWS CLI
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: 'This GitHub URL contains the code samples used in this chapter: [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch7](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch7)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此GitHub URL包含本章中使用的代码示例：[https://github.com/docker-in-aws/docker-in-aws/tree/master/ch7](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch7)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码实际运行情况：
- en: '[http://bit.ly/2PaK6AM](http://bit.ly/2PaK6AM)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2PaK6AM](http://bit.ly/2PaK6AM)'
- en: Deployment overview
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署概述
- en: The goal of the next two chapters is to establish the supporting infrastructure
    and resources to deploy Docker applications using AWS. In the spirit of the best
    practice of defining your infrastructure as code, you will be defining a CloudFormation
    template that will include all AWS resources required to support your Docker applications
    running in ECS. As you progress through each chapter, you will build on this template,
    slowly but surely adding more and more resources until you have a complete solution
    for deploying your Docker applications in AWS using ECS.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来两章的目标是建立支持基础设施和资源，以便使用AWS部署Docker应用程序。根据将基础设施定义为代码的最佳实践精神，您将定义一个CloudFormation模板，其中包括支持Docker应用程序在ECS中运行所需的所有AWS资源。随着您在每个章节中的进展，您将逐渐添加更多的资源，直到您拥有一个完整的解决方案，可以在AWS中使用ECS部署您的Docker应用程序。
- en: With this in mind, the focus of this chapter is to learn how to build ECS clusters
    using CloudFormation, and as you have already learned in previous chapters, an
    ECS cluster is a collection of ECS container instances that you can target when
    you run an ECS service or ECS task.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，本章的重点是学习如何使用CloudFormation构建ECS集群，正如您在之前的章节中已经学到的，ECS集群是一组ECS容器实例，您可以在运行ECS服务或ECS任务时对其进行定位。
- en: 'ECS clusters themselves are very simple constructs - they simply define a collection
    of ECS container instances and a cluster name. How these clusters are formed,
    however, is much more involved and requires several supporting resources, including
    the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ECS集群本身是非常简单的构造 - 它们只是定义了一组ECS容器实例和一个集群名称。然而，这些集群是如何形成的，涉及到更多的工作，并需要几个支持资源，包括以下内容：
- en: '**EC2 Auto Scaling group**: Defines a collection of EC2 instances with identical
    configurations.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2自动扩展组**：定义具有相同配置的EC2实例集合。'
- en: '**EC2 Auto Scaling Launch Configuration**: Defines the launch configuration
    of newly created instances in the Auto Scaling group. A launch configuration often
    includes user data scripts, which are executed by instances on first run and can
    be used to trigger the CloudFormation helper scripts you installed in your custom
    machine image in the previous chapter to interact with CloudFormation Init Metadata.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EC2自动扩展启动配置**：定义自动扩展组中新创建实例的启动配置。启动配置通常包括用户数据脚本，这些脚本在实例首次运行时执行，并可用于触发您在上一章中安装的CloudFormation助手脚本与CloudFormation
    Init Metadata交互的自定义机器映像。'
- en: '**CloudFormation Init Metadata**: Defines initialization logic that each EC2
    instance in the Auto Scaling group should run on initial creation, such as running
    provisioning commands, enabling services, and creating users and groups. CloudFormation
    Init Metadata is more powerful that the provisioning capabilities offered by user
    data, and most importantly, provides a mechanism for each instance to signal to
    CloudFormation that the instance has successfully provisioned itself.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudFormation Init Metadata**：定义每个自动扩展组中的EC2实例在初始创建时应运行的初始化逻辑，例如运行配置命令、启用服务以及创建用户和组。CloudFormation
    Init Metadata比用户数据提供的配置能力更强大，最重要的是，它为每个实例提供了一种向CloudFormation发出信号的机制，表明实例已成功配置自身。'
- en: '**CloudFormation Creation Policy**: Defines criteria that determines when CloudFormation
    can consider an EC2 Auto Scaling group as having been created successfully and
    to continue provisioning other dependencies in the CloudFormation stack. This
    is based upon CloudFormation receiving a configurable number of success messages
    from each EC2 instance that is part of the EC2 Auto Scaling group.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudFormation Creation Policy**：定义了确定CloudFormation何时可以将EC2自动扩展组视为已成功创建并继续在CloudFormation堆栈中提供其他依赖项的标准。这基于CloudFormation从EC2自动扩展组中的每个EC2实例接收到可配置数量的成功消息。'
- en: There are other ways you can form ECS clusters, but for large-scale production
    environments, you generally want to use EC2 Auto Scaling groups and use CloudFormation
    and associated CloudFormation Init Metadata and Creation Policies to deploy your
    clusters in a robust, repeatable, infrastructure-as-code manner.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他方法可以形成ECS集群，但是对于大规模生产环境，通常希望使用EC2自动扩展组，并使用CloudFormation以及相关的CloudFormation
    Init Metadata和Creation Policies来以稳健、可重复、基础设施即代码的方式部署您的集群。
- en: How each of these components work together is perhaps best described with a
    diagram, followed by a short description of how ECS clusters are formed from these
    components, after which you will proceed to learn how to perform each of the related
    configuration tasks required to create your own ECS clusters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件如何一起工作可能最好通过图表来描述，然后简要描述ECS集群是如何从这些组件中形成的，之后您将学习如何执行每个相关的配置任务，以创建自己的ECS集群。
- en: 'The following diagram illustrates the deployment process for creating an ECS
    cluster, assuming you are using EC2 Auto Scaling groups and CloudFormation:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了使用EC2自动扩展组和CloudFormation创建ECS集群的部署过程：
- en: '![](assets/8fb418d5-187f-43c2-baa4-5def9d81bef0.png)ECS cluster deployment
    overview using EC2 Auto Scaling Groups and CloudFormation'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8fb418d5-187f-43c2-baa4-5def9d81bef0.png)使用EC2自动扩展组和CloudFormation部署ECS集群的概述'
- en: 'In the preceding diagram, the general approach is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，一般的方法如下：
- en: As part of your CloudFormation deployment, CloudFormation determines it is ready
    to start creating the configured ECS cluster resource. The ECS cluster resource
    will be referenced in CloudFormation Init Metadata that is part of the EC2 Auto
    Scaling Launch Configuration resource, hence this ECS cluster resource must be
    created first. Note that at this point, the ECS cluster is empty and is awaiting
    ECS container instances to join the cluster.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为CloudFormation部署的一部分，CloudFormation确定已准备好开始创建配置的ECS集群资源。ECS集群资源将被引用在EC2自动扩展启动配置资源中的CloudFormation
    Init Metadata中，因此必须首先创建此ECS集群资源。请注意，此时ECS集群为空，正在等待ECS容器实例加入集群。
- en: CloudFormation creates an EC2 Auto Scaling Launch Configuration resource, which
    defines the launch configuration that each EC2 instance in the EC2 Auto Scaling
    group will apply on instance creation. The launch configuration includes a user
    data script that invokes CloudFormation helper scripts installed on the EC2 instance,
    which in turn downloads CloudFormation Init Metadata that defines a series of
    commands and other initialization actions each instance should perform on creation.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudFormation创建了一个EC2自动扩展启动配置资源，该资源定义了EC2自动扩展组中每个EC2实例在实例创建时将应用的启动配置。启动配置包括一个用户数据脚本，该脚本调用安装在EC2实例上的CloudFormation辅助脚本，后者又下载定义了每个实例在创建时应执行的一系列命令和其他初始化操作的CloudFormation
    Init Metadata。
- en: Once the launch configuration resource has been created, CloudFormation creates
    the EC2 Auto Scaling group resource. The creation of the Auto Scaling group will
    trigger the EC2 Auto Scaling service to create a configurable desired number of
    EC2 instances in the group.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动配置资源被创建，CloudFormation将创建EC2自动扩展组资源。自动扩展组的创建将触发EC2自动扩展服务在组中创建可配置的期望数量的EC2实例。
- en: As each EC2 instance launches, it applies the launch configuration, executes
    the user data script, and downloads and executes the provisioning tasks defined
    in CloudFormation Init Metadata. This will include various initialization tasks,
    and in our specific use case, the instance will execute the first run script you
    added to your custom machine image in the previous chapter, to join the configured
    ECS cluster, ensure the CloudWatch logs agent is configured to log to the correct
    CloudWatch log groups, start and enable Docker and the ECS agent, and finally,
    verify the EC2 instance successfully joined the ECS cluster and signal to CloudFormation
    that the EC2 instance was launched successfully.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当EC2实例启动时，它会应用启动配置，执行用户数据脚本，并下载并执行CloudFormation Init Metadata中定义的配置任务。这将包括各种初始化任务，在我们的特定用例中，实例将执行您在上一章中添加到自定义机器映像中的第一次运行脚本，以加入配置的ECS集群，确保CloudWatch日志代理配置为记录到正确的CloudWatch日志组，启动和启用Docker和ECS代理，最后，验证EC2实例成功加入ECS集群，并向CloudFormation发出信号，表明EC2实例已成功启动。
- en: The Auto Scaling group is configured with a Creation Policy, which is a special
    feature of CloudFormation that causes CloudFormation to wait until a configurable
    number of success signals is received from EC2 instances in the Auto Scaling group.
    Typically, you will configure this to be all instances in your EC2 autoscaling
    group, ensuring all instances have successfully joined the ECS cluster and are
    healthy before continuing other provisioning tasks.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动扩展组配置了创建策略，这是CloudFormation的一个特殊功能，它会导致CloudFormation等待直到从自动扩展组中的EC2实例接收到可配置数量的成功信号。通常，您将配置为EC2自动扩展组中的所有实例，确保所有实例成功加入ECS集群并且健康，然后才能继续其他的配置任务。
- en: With the ECS cluster in place with the correct number of ECS container instances
    derived from the EC2 Auto Scaling group, CloudFormation can safely provision other
    ECS resources that require a healthy ECS cluster to be in place. For example,
    you might create an ECS service, which will deploy your container applications
    to your ECS cluster.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ECS集群中有正确数量的从EC2自动扩展组派生的ECS容器实例的情况下，CloudFormation可以安全地配置其他需要健康的ECS集群的ECS资源。例如，您可以创建一个ECS服务，该服务将将您的容器应用程序部署到ECS集群中。
- en: Defining an ECS cluster
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义ECS集群
- en: Now that you have an overview of the ECS cluster provisioning process, let's
    step through the configuration required to get an ECS cluster up and running.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了ECS集群配置过程的概述，让我们逐步进行所需的配置，以使ECS集群正常运行。
- en: 'As indicated in the deployment overview, you will be using CloudFormation to
    create your resources in an infrastructure-as-code manner, and because you are
    right at the start of this journey, you first need to create this CloudFormation
    template, which I will assume you are defining in a file called `stack.yml` at
    the root of the **todobackend-aws** repository you created earlier in Chapter
    5 - *Publishing Docker Images Using ECR*, as demonstrated in the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如部署概述所示，您将使用CloudFormation以基础设施即代码的方式创建资源，因为您刚刚开始这个旅程，您首先需要创建这个CloudFormation模板，我假设您正在根据第5章“使用ECR发布Docker镜像”中在**todobackend-aws**存储库中创建的文件`stack.yml`中定义，如下例所示：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Establishing the todobackend-aws repository
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在todobackend-aws存储库中建立
- en: 'You can now establish a skeleton CloudFormation template in the `stack.yml`
    file and create your ECS cluster resource:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以在`stack.yml`文件中建立一个基本的CloudFormation模板，并创建您的ECS集群资源：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defining a CloudFormation template
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个CloudFormation模板
- en: 'As you can see in the preceding example, defining an ECS cluster is very simple,
    with the `AWS::ECS::Cluster` resource type only having a single optional property
    called `ClusterName`. After ensuring your environment is configured with the correct
    AWS profile, you can now create and deploy the stack using the `aws cloudformation
    deploy` command, and verify your cluster has been created by using the `aws ecs
    list-clusters` command, as demonstrated in the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，定义ECS集群非常简单，`AWS::ECS::Cluster`资源类型只有一个可选属性叫做`ClusterName`。确保您的环境配置了正确的AWS配置文件后，您现在可以使用`aws
    cloudformation deploy`命令创建和部署堆栈，并使用`aws ecs list-clusters`命令验证您的集群是否已创建，就像下面的示例中演示的那样：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating an ECS cluster using CloudFormation
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CloudFormation创建ECS集群
- en: Configuring an EC2 Auto Scaling group
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EC2自动扩展组
- en: You have established an ECS cluster, but without ECS container instances to
    provide a container runtime and compute resources, the cluster is not of much
    use. At this point, you could create individual ECS container instances and join
    them to the cluster, however, such an approach is not feasible if you have the
    requirement to run production workloads that need to support tens or hundreds
    of containers, dynamically adding and removing ECS container instances to the
    cluster depending on the current resource requirements of the cluster.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经建立了一个ECS集群，但如果没有ECS容器实例来提供容器运行时和计算资源，该集群就没有太多用处。此时，您可以创建单独的ECS容器实例并加入到集群中，但是，如果您需要运行需要支持数十甚至数百个容器的生产工作负载，根据集群当前资源需求动态添加和移除ECS容器实例，这种方法就不可行了。
- en: The AWS mechanism to deliver such behavior for your ECS container instances
    is the EC2 Auto Scaling group, which operates as a collection of EC2 instances
    that share identical configurations referred to as launch configurations. The
    EC2 Auto Scaling service is a managed service provided by AWS, and takes care
    of managing the lifecycle your EC2 Auto Scaling groups and the EC2 instances that
    make up the group. This mechanism provides one of the core tenets of the cloud
    - elasticity - and allows you to dynamically scale up or scale down the number
    of EC2 instances that are servicing your applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供的用于为ECS容器实例提供这种行为的机制是EC2自动扩展组，它作为一组具有相同配置的EC2实例的集合，被称为启动配置。EC2自动扩展服务是AWS提供的托管服务，负责管理您的EC2自动扩展组和组成组的EC2实例的生命周期。这种机制提供了云的核心原则之一-弹性-并允许您根据应用程序的需求动态扩展或缩减服务您应用程序的EC2实例数量。
- en: In the context of ECS, you can generally think of an ECS cluster as having a
    close correlation to EC2 Auto Scaling groups, and ECS container instances as the
    EC2 instances within the EC2 Auto Scaling groups where the ECS agent and Docker
    Engine are the applications running on each EC2 instance. This is not strictly
    true, in that you can have ECS clusters that span multiple EC2 Auto Scaling groups,
    but it is typical to structure a one-to-one relationship between your ECS clusters
    and EC2 Auto Scaling groups, with a corresponding direct linkage of ECS container
    instances to EC2 instances.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECS的背景下，您可以将ECS集群通常视为与EC2自动扩展组有密切关联，ECS容器实例则是EC2自动扩展组中的EC2实例，其中ECS代理和Docker引擎是每个EC2实例上运行的应用程序。这并不完全正确，因为您可以拥有跨多个EC2自动扩展组的ECS集群，但通常情况下，您的ECS集群和EC2自动扩展组之间会有一对一的关系，ECS容器实例与EC2实例直接关联。
- en: 'Now that you understand the basic background of EC2 Auto Scaling groups and
    how are they related specifically to ECS, it''s important to outline the various
    configuration constructs that you need to interact with when creating EC2 Auto
    Scaling groups:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了EC2自动缩放组的基本背景以及它们与ECS的特定关系，重要的是要概述在创建EC2自动缩放组时需要与之交互的各种配置构造：
- en: '**Auto Scaling group**: Defines a collection of EC2 instances and specifies
    minimum, maximum, and desirable capacities for the group.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动缩放组：定义了一组EC2实例，并为该组指定了最小、最大和期望的容量。
- en: '**Launch configuration**: A launch configuration defines a generic configuration
    that is applied to each EC2 instance at instance creation.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动配置：启动配置定义了应用于每个EC2实例在实例创建时的通用配置。
- en: '**CloudFormation Init metadata**: Defines custom initialization logic that
    can be applied at instance creation.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation Init元数据：定义可以应用于实例创建的自定义初始化逻辑。
- en: '**IAM instance profile and role**: Grants permissions to each EC2 instance
    to interact with the ECS service and publish to CloudWatch logs.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM实例配置文件和角色：授予每个EC2实例与ECS服务交互和发布到CloudWatch日志的权限。
- en: '**EC2 security groups**: Define ingress and egress network policy rules. At
    a minimum, these rules must allow the ECS agent running on each EC2 instance to
    communicate with the ECS API.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2安全组：定义入站和出站网络策略规则。至少，这些规则必须允许每个EC2实例上运行的ECS代理与ECS API进行通信。
- en: Note that I am presenting a top-down approach of defining the requirements for
    an EC2 Auto Scaling group, which is possible when using a declarative infrastructure-as-code
    approach, such as CloudFormation. When it comes to the actual implementation of
    these resources, they will be applied in a bottom-up manner, where dependencies,
    such as security groups and IAM roles, are first created, after which the launch
    configuration, and finally the Auto Scaling group will be created. This, of course,
    is handled by CloudFormation, so we can focus on the desired state configuration
    and let CloudFormation deal with the specific imperative execution requirements
    of meeting the desired state.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我正在提出一种自上而下的方法来定义EC2自动缩放组的要求，这在使用声明性基础设施即代码方法（例如CloudFormation）时是可能的。在实际实现这些资源时，它们将以自下而上的方式应用，首先创建依赖项（例如安全组和IAM角色），然后创建启动配置，最后创建自动缩放组。当然，这是由CloudFormation处理的，因此我们可以专注于所需的状态配置，让CloudFormation处理满足所需状态的具体执行要求。
- en: Creating an EC2 Auto Scaling group
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建EC2自动缩放组
- en: 'The first resource you need to define when creating EC2 Auto Scaling groups
    is the EC2 Auto Scaling group itself, which in CloudFormation terms is defined
    as a resource of the `AWS::AutoScaling::AutoScalingGroup` type:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建EC2自动缩放组时，您需要定义的第一个资源是EC2自动缩放组本身，在CloudFormation术语中，它被定义为`AWS::AutoScaling::AutoScalingGroup`类型的资源。
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Defining an EC2 Auto Scaling group
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 定义EC2自动缩放组
- en: 'The configuration in the preceding example is a basic configuration that meets
    the minimum requirements for defining an EC2 Auto Scaling group as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中的配置是满足定义EC2自动缩放组的最低要求的基本配置，如下所示：
- en: '`LaunchConfigurationName`: The name of the launch configuration that should
    be applied to each instance in the group. In the preceding example, we use the
    shorthand syntax of the `Ref` intrinsic function combined with the name of a resource
    called `ApplicationAutoscalingLaunchConfiguration`, which is a resource we will
    define shortly.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LaunchConfigurationName`：应该应用于组中每个实例的启动配置的名称。在前面的示例中，我们使用`Ref`内部函数的简写语法，结合一个名为`ApplicationAutoscalingLaunchConfiguration`的资源的名称，这是我们将很快定义的资源。'
- en: '`MinSize`, `MaxSize`, and `DesiredCapacity`: The absolute minimum, absolute
    maximum, and desired number of instances in the Auto Scaling group. The EC2 Auto
    Scaling group will always try to maintain the desired number of instances, although
    it may temporarily scale up or scale down the number of instances based upon your
    own criteria within the bounds of the `MinSize` and `MaxSize` properties. In the
    preceding example, you reference a parameter, called `ApplicationDesiredCount`,
    to define the desired number of instances, with the ability to scale down to zero
    instances or scale up to a maximum of four instances.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinSize`，`MaxSize`和`DesiredCapacity`：自动扩展组中实例的绝对最小值，绝对最大值和期望数量。EC2自动扩展组将始终尝试保持期望数量的实例，尽管它可能根据您在`MinSize`和`MaxSize`属性的范围内的自己的标准暂时扩展或缩减实例的数量。在前面的示例中，您引用了一个名为`ApplicationDesiredCount`的参数，以定义期望的实例数量，具有缩减为零实例或扩展为最多四个实例的能力。'
- en: '`VPCZoneIdentifier`: A list of the target subnets that EC2 instances within
    the Auto Scaling group should be deployed to. In the previous example, you reference
    an input parameter, called `ApplicationSubnets`, which is defined as a parameter
    of the `List<AWS::EC2::Subnet::Id>` type. This can be supplied as simply a comma-separated
    list, and you will shortly see an example of defining such a list.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VPCZoneIdentifier`：EC2实例应部署到的目标子网列表。在前面的示例中，您引用了一个名为`ApplicationSubnets`的输入参数，它被定义为`List<AWS::EC2::Subnet::Id>`类型的参数。这可以简单地提供为逗号分隔的列表，您很快将看到定义这样一个列表的示例。'
- en: '`Tags`: Defines one or more tags to attach to the Auto Scaling group. At a
    minimum, it is useful to define the `Name` tag so that you can clearly identify
    your EC2 instances, and in the preceding example, you use the short form of the
    `Fn::Sub` intrinsic function to dynamically inject the name of the stack as defined
    by the `AWS::StackName` pseudo-parameter. The `PropagateAtLaunch` tag configures
    the tag to be attached to each EC2 instance at launch, ensuring the configured
    name will be visible for each instance.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tags`：定义要附加到自动扩展组的一个或多个标记。至少，定义`Name`标记是有用的，以便您可以清楚地识别您的EC2实例，在前面的示例中，您使用`Fn::Sub`内在函数的简写形式来动态注入由`AWS::StackName`伪参数定义的堆栈名称。`PropagateAtLaunch`标记配置标记在每次EC2实例启动时附加，确保配置的名称对于每个实例都可见。'
- en: Refer to the AWS CloudFormation documentation ([https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html))
    for more information on how to configure Auto Scaling group resources.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何配置自动扩展组资源的更多信息，请参阅AWS CloudFormation文档（[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html)）。
- en: Configuring CloudFormation Input Parameters
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置CloudFormation输入参数
- en: In the preceding example, you added parameters to your CloudFormation template
    called `ApplicationDesiredCount` and `ApplicationSubnets`, which you will need
    to supply the values for when you deploy the template.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您向CloudFormation模板添加了名为`ApplicationDesiredCount`和`ApplicationSubnets`的参数，您需要在部署模板时为其提供值。
- en: 'The `ApplicationDesiredCount` parameter simply needs to be a number between
    the configure MinSize and MaxSize properties (that is, between 0 and 4), however,
    to determine the value of the subnet IDs in your account, you can use the `aws
    ec2 describe-subnets` command, as demonstrated here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplicationDesiredCount`参数只需要是配置的MinSize和MaxSize属性之间的数字（即0和4之间），但是，要确定您帐户中子网ID的值，您可以使用`aws
    ec2 describe-subnets`命令，如下所示：'
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Querying subnets using the AWS CLI
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AWS CLI查询子网
- en: In the preceding example, you use a JMESPath query expression to select the
    `SubnetId` and `AvailabilityZone` properties for each subnet, and display the
    output in a table format. Here we are just leveraging the default subnets that
    are created in the default VPC for your account, but you could use any subnets
    that may be defined in your account, depending on the nature of your network topology.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您使用了一个JMESPath查询表达式来选择每个子网的`SubnetId`和`AvailabilityZone`属性，并以表格格式显示输出。在这里，我们只是利用了为您的账户在默认VPC中创建的默认子网，但是根据您网络拓扑的性质，您可以使用在您的账户中定义的任何子网。
- en: For this example, we will use two subnets in the `us-east-1a` and `us-east-1b`
    availability zones, and your next question might be, how do we pass these values
    to the CloudFormation stack? The AWS CLI only currently offers the ability to
    provide input parameters as key value pairs using a command-line flag in conjunction
    with the `aws cloudformation deploy` command, however, this approach quickly becomes
    tedious and unwieldy when you have a large number of stack input and want to persist
    them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用`us-east-1a`和`us-east-1b`可用区中的两个子网，你接下来的问题可能是，我们如何将这些值传递给CloudFormation堆栈？AWS
    CLI目前只能通过命令行标志与`aws cloudformation deploy`命令一起提供输入参数的能力，然而，当您有大量堆栈输入并且想要持久化它们时，这种方法很快变得乏味和笨拙。
- en: 'One very simple approach we will adopt is to define the various input parameters
    within a configuration file called `dev.cfg` at the root of the `todobackend-aws`
    repository:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用的一个非常简单的方法是在`todobackend-aws`存储库的根目录下定义一个名为`dev.cfg`的配置文件中的各种输入参数：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Defining a configuration file for stack parameters in dev.cfg
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为堆栈参数定义一个配置文件dev.cfg
- en: The approach with the configuration file is to add each parameter in the `<key>=<value>`
    format on a new line, and later on in this chapter, you will see how we can use
    this file in conjunction with the `aws cloudformation deploy` command. In the
    preceding example, notice that we configure the `ApplicationSubnets` parameter
    value as a comma-delimited list, which is the standard format for any List types
    when configuring CloudFormation parameters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的方法是在新的一行上以`<key>=<value>`格式添加每个参数，稍后在本章中，您将看到我们如何可以将此文件与`aws cloudformation
    deploy`命令一起使用。在前面的示例中，请注意我们将`ApplicationSubnets`参数值配置为逗号分隔的列表，这是在配置CloudFormation参数时配置任何列表类型的标准格式。
- en: Stack parameters are typically environment-specific, hence it makes sense to
    name your configuration files according to your environments. For example, if
    you had a development and production environment, you might call your configuration
    files `dev.cfg` and `prod.cfg`, respectively.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈参数通常是特定于环境的，因此根据您的环境命名您的配置文件是有意义的。例如，如果您有开发和生产环境，您可能会分别称呼您的配置文件为`dev.cfg`和`prod.cfg`。
- en: Defining an EC2 Auto Scaling launch configuration
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义EC2自动扩展启动配置
- en: Although you have defined an EC2 Auto Scaling group resource, you cannot yet
    deploy your CloudFormation template as the Auto Scaling group references a resource
    called `ApplicationAutoscalingLaunchConfiguration`, which is yet to be defined.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您已经定义了一个EC2自动扩展组资源，但是您还不能部署您的CloudFormation模板，因为自动扩展组引用了一个名为`ApplicationAutoscalingLaunchConfiguration`的资源，该资源尚未定义。
- en: An EC2 Auto Scaling launch configuration defines the configuration that is applied
    to each instance at launch time, and provides a common approach to ensuring each
    instance in your Auto Scaling group is consistent.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: EC2自动扩展启动配置定义了在启动时应用于每个实例的配置，并提供了一种确保自动扩展组中的每个实例保持一致的常见方法。
- en: 'The following example demonstrates configuring an Auto Scaling launch configuration
    within your CloudFormation template:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了在CloudFormation模板中配置自动扩展启动配置：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Defining an EC2 Auto Scaling Launch Configuration
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 定义EC2自动扩展启动配置
- en: 'Notice that you specify a `AWS::AutoScaling::LaunchConfiguration` resource
    type and configure the following properties for your launch configuration:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您指定了`AWS::AutoScaling::LaunchConfiguration`资源类型，并为您的启动配置配置了以下属性：
- en: '`ImageId`: The AMI of the image that the EC2 instance will be launched from.
    For our use case, you will use the AMI that you created in the previous chapter.
    This property references a new parameter called `ApplicationImageId`, so you need
    to add this parameter with the AMI ID of your custom machine image to the `dev.cfg`
    file.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageId`: EC2实例将从中启动的镜像的AMI。对于我们的用例，您将使用在上一章中创建的AMI。此属性引用了一个名为`ApplicationImageId`的新参数，因此您需要将此参数与自定义机器映像的AMI
    ID添加到`dev.cfg`文件中。'
- en: '`InstanceType`: The instance family and type of the EC2 instance.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InstanceType`: EC2实例的实例系列和类型。'
- en: '`KeyName`: The EC2 key pair that will be permitted SSH access to each EC2 instance.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyName`: 将被允许对每个EC2实例进行SSH访问的EC2密钥对。'
- en: '`IamInstanceProfile`: The IAM instance profile to attach to the EC2 instance.
    As you learned in earlier chapters, in order to support operation as an ECS container
    instance, the IAM instance profile must grant permissions for the EC2 instance
    to interact with the ECS service. In the previous example, you reference a resource
    called `ApplicationAutoscalingInstanceProfile`, which you will create later in
    this chapter.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IamInstanceProfile`: 要附加到EC2实例的IAM实例配置文件。正如您在前几章中学到的，为了支持作为ECS容器实例的操作，IAM实例配置文件必须授予EC2实例与ECS服务交互的权限。在前面的示例中，您引用了一个名为`ApplicationAutoscalingInstanceProfile`的资源，您将在本章后面创建。'
- en: '`SecurityGroups`: The EC2 security groups to attach to each instance. These
    define the ingress and egress security rules that are applied to network traffic,
    and, at a minimum, must permit communications to the ECS service, CloudWatch logs
    service, and other associated AWS services. Again, you reference a resource called
    `ApplicationAutoscalingSecurityGroup`, which you will create later in this chapter.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityGroups`: 要附加到每个实例的EC2安全组。这些定义了应用于网络流量的入站和出站安全规则，至少必须允许与ECS服务、CloudWatch日志服务和其他相关的AWS服务进行通信。同样，您引用了一个名为`ApplicationAutoscalingSecurityGroup`的资源，您将在本章后面创建。'
- en: '`UserData`: Defines the user data script that is run upon instance creation.
    This must be supplied as a Base64-encoded string, and you can use the `Fn::Base64`
    intrinsic function to have CloudFormation automatically perform this conversion.
    You define a bash script that first runs the `cfn-init` command, which will download
    and execute CloudFormation Init metadata associated with the `ApplicationAutoscalingLaunchConfiguration`
    reference resource, and then runs the `cfn-signal` command to signal to CloudFormation
    whether or not `cfn-init` ran successfully (note that `cfn-signal` references
    the `AutoscalingGroup` resource, rather than the `ApplicationAutoscalingLaunchConfiguration`
    resource).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserData`: 定义在实例创建时运行的用户数据脚本。这必须作为Base64编码的字符串提供，您可以使用`Fn::Base64`内在函数让CloudFormation自动执行此转换。您定义一个bash脚本，首先运行`cfn-init`命令，该命令将下载并执行与`ApplicationAutoscalingLaunchConfiguration`引用资源相关的CloudFormation
    Init元数据，然后运行`cfn-signal`命令来向CloudFormation发出信号，指示`cfn-init`是否成功运行（请注意，`cfn-signal`引用`AutoscalingGroup`资源，而不是`ApplicationAutoscalingLaunchConfiguration`资源）。'
- en: Notice the use of the `Fn::Sub` function followed by the pipe operator (`|`),
    which enables you to enter free-form text that will honour all line breaks and
    allows you to reference the correct stack name and AWS region using the `AWS::StackName`
    and `AWS::Region` pseudo-parameters.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`Fn::Sub`函数后跟管道运算符(`|`)，这使您可以输入自由格式文本，该文本将遵守所有换行符，并允许您使用`AWS::StackName`和`AWS::Region`伪参数引用正确的堆栈名称和AWS区域。
- en: You may notice that the `set -e` flag is not set in the UserData bash script,
    and this is deliberate as we want the `cfn-signal` script to report the exit code
    of the `cfn-init` script to CloudFormation (as defined by `-e $?` option, where
    `$?` outputs the exit code of the last process). If you were to include `set -e`,
    the script would exit immediately if `cfn-init` returned an error, and `cfn-signal`
    would not be able to signal CloudFormation of the failure.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到在UserData bash脚本中未设置`set -e`标志，这是有意为之的，因为我们希望`cfn-signal`脚本将`cfn-init`脚本的退出代码报告给CloudFormation（由`-e
    $?`选项定义，其中`$?`输出最后一个进程的退出代码）。如果包括`set -e`，则如果`cfn-init`返回错误，脚本将立即退出，`cfn-signal`将无法向CloudFormation发出失败信号。
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding the ApplicationImageId parameter to the dev.cfg file
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将ApplicationImageId参数添加到dev.cfg文件
- en: Configuring CloudFormation Init Metadata
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置CloudFormation Init元数据
- en: The most complex piece of configuration you have performed so far in our stack
    is the `UserData` property, defined as part of the Auto Scaling launch configuration.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的堆栈中，您执行的最复杂的配置部分是`UserData`属性，作为自动扩展启动配置的一部分。
- en: 'Recall in the previous chapter when you created a custom machine image, you
    installed the `cfn-bootstrap` CloudFormation helper scripts, which include the
    `cfn-init` and `cfn-signal` scripts that are referenced in the previous example.
    These scripts are designed to work with a feature known as CloudFormation Init
    metadata, which we will configure now, as demonstrated in the following example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在上一章中，当您创建了一个自定义机器映像时，您安装了`cfn-bootstrap` CloudFormation助手脚本，其中包括在前面的示例中引用的`cfn-init`和`cfn-signal`脚本。这些脚本旨在与称为CloudFormation
    Init元数据的功能一起使用，我们将在下面的示例中进行配置，如下例所示：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring CloudFormation Init Metadata
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 配置CloudFormation Init元数据
- en: 'In the preceding example, you can see the CloudFormation Init metadata defines
    a configuration set that includes a `commands` directive, which defines a several
    command objects:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，您可以看到CloudFormation Init元数据定义了一个包含`commands`指令的配置集，该指令定义了几个命令对象：
- en: '`05_public_volume` - creates a folder called `public` under the `/data` mount
    that is configured in our custom ECS AMI.  We require this path as recall our
    application needs a public volume where static files will be located, and our
    application runs as a non-root user.  Later on we will create a Docker volume
    that references this path, and note that because ECS currently only supports bind
    mounts, this approach of pre-creating a folder on the underly Docker host is required
    (see [https://github.com/aws/amazon-ecs-agent/issues/1123#issuecomment-405063273](https://github.com/aws/amazon-ecs-agent/issues/1123#issuecomment-405063273)
    for more details).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`05_public_volume` - 在我们定制的ECS AMI中创建一个名为`public`的文件夹，该文件夹位于`/data`挂载下。我们需要这个路径，因为我们的应用程序需要一个公共卷，静态文件将位于其中，而我们的应用程序以非root用户身份运行。稍后我们将创建一个Docker卷，该卷引用此路径，并注意因为ECS目前仅支持绑定挂载，所以需要预先在底层Docker主机上创建一个文件夹（有关更多详细信息，请参见[https://github.com/aws/amazon-ecs-agent/issues/1123#issuecomment-405063273](https://github.com/aws/amazon-ecs-agent/issues/1123#issuecomment-405063273)）。'
- en: '`06_public_volume_permissions` - this changes the ownership on the `/data/public`
    folder created in the previous command to be owned by the user and group with
    an ID of 1000.  This is the same user ID/group ID that the todobackend application
    runs as, so will allow the application to read and write to the `/data/public`
    folder.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`06_public_volume_permissions` - 这将更改前一个命令中创建的`/data/public`文件夹的所有权，使其由ID为1000的用户和组拥有。这是todobackend应用程序运行的相同用户ID/组ID，因此将允许应用程序读取和写入`/data/public`文件夹。'
- en: '`10_first_run` -  runs the `sh firstrun.sh` command in the working directory
    of `/home/ec2-user`, which recall from the previous chapter refer to the first
    run script you included in your custom machine image to perform custom initialization
    tasks at instance creation. This first run script includes references to a number
    of environment variables, which are defined in the CloudFormation Init metadata
    under the `env` property and supply the appropriate values to the first run script.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10_first_run` - 在工作目录`/home/ec2-user`中运行`sh firstrun.sh`命令，回顾前一章提到的自定义机器镜像中包含的第一次运行脚本，用于在实例创建时执行自定义初始化任务。这个第一次运行脚本包括对许多环境变量的引用，这些环境变量在CloudFormation
    Init元数据的`env`属性下定义，并为第一次运行脚本提供适当的值。'
- en: 'To illustrate further how the `10_first_run` script works, the following snippet
    configures the ECS container instance to join an ECS cluster as defined by the
    `ECS_CLUSTER` environment variable:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步说明`10_first_run`脚本的工作原理，以下代码片段配置了ECS容器实例加入ECS集群，由`ECS_CLUSTER`环境变量定义：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First run script snippet
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行脚本片段
- en: 'Similarly, the `STACK_NAME`, `AUTOSCALING_GROUP`, and `AWS_DEFAULT_REGION`
    variables are all used to configure the CloudWatch logs agent:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`STACK_NAME`、`AUTOSCALING_GROUP`和`AWS_DEFAULT_REGION`变量都用于配置CloudWatch日志代理：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: First run script snippet
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行脚本片段
- en: Configuring Auto Scaling group creation policies
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置自动扩展组创建策略
- en: In the previous section, you configured a user data script and CloudFormation
    Init metadata so that your ECS container instances can perform first time initialization
    and configuration appropriate to the given target environment. Although each instance
    will signal CloudFormation of success or failure of the CloudFormation Init process,
    you need to configure CloudFormation explicitly to wait for each instance in the
    Auto Scaling group to signal success, which is important if you want to ensure
    you don't attempt to try and deploy ECS services to your ECS clusters before they
    have registered with the ECS cluster or if they fail for some reason.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您配置了用户数据脚本和CloudFormation Init元数据，以便您的ECS容器实例可以执行适合于给定目标环境的首次初始化和配置。虽然每个实例都会向CloudFormation发出CloudFormation
    Init过程的成功或失败信号，但您需要显式地配置CloudFormation等待每个自动扩展组中的实例发出成功信号，这一点非常重要，如果您希望确保在ECS集群注册或由于某种原因失败之前，不会尝试将ECS服务部署到ECS集群。
- en: CloudFormation includes a feature referred to as creation policies, which allow
    you to specify optional creation success criteria when creating EC2 Auto Scaling
    groups and EC2 instances. When a creation policy is attached to an EC2 Auto Scaling
    group, CloudFormation will wait for a configurable number of instances in the
    Auto Scaling group to signal success before proceeding, which provides us with
    a powerful capability to ensure your ECS Auto Scaling groups and corresponding
    ECS clusters are in a healthy state, before proceeding to create other resources
    in your CloudFormation stack. Recall in the previous chapter that the final step
    of the first run script in your custom machine image is to query the local ECS
    agent metadata to verify the instance has joined to the configured ECS cluster,
    so if the first run script completes successfully and cfn-signal signals success
    to CloudFormation, we know that the instance has been successfully registered
    to the ECS cluster.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation包括一个称为创建策略的功能，允许您在创建EC2自动扩展组和EC2实例时指定可选的创建成功标准。当创建策略附加到EC2自动扩展组时，CloudFormation将等待自动扩展组中的可配置数量的实例发出成功信号，然后再继续进行，这为我们提供了强大的能力，以确保您的ECS自动扩展组和相应的ECS集群处于健康状态，然后再继续创建CloudFormation堆栈中的其他资源。回想一下在上一章中，您自定义机器映像中第一次运行脚本的最后一步是查询本地ECS代理元数据，以验证实例是否已加入配置的ECS集群，因此，如果第一次运行脚本成功完成并且cfn-signal向CloudFormation发出成功信号，我们知道该实例已成功注册到ECS集群。
- en: 'The following example demonstrates configuring a creation policy on your existing
    EC2 Auto Scaling group resource:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何在现有的EC2自动扩展组资源上配置创建策略：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Configuring a Creation Policy in CloudFormation
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在CloudFormation中配置创建策略
- en: As you can see in the preceding example, creation policies are configured using
    the `CreationPolicy` attribute, and at the time of writing, these policies can
    only be configured for EC2 Auto Scaling group resources, EC2 instance resources
    and another special type of CloudFormation resource call wait conditions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的示例中所看到的，使用`CreationPolicy`属性配置创建策略，目前，这些策略只能为EC2自动扩展组资源、EC2实例资源和另一种特殊类型的CloudFormation资源调用等待条件进行配置。
- en: The `ResourceSignal` object includes a `Count` property that defines the minimum
    number of success signals required to determine whether the Auto Scaling group
    has been created successfully, and you reference the `ApplicationDesiredCount`
    parameter, meaning you expect all instances in the Auto Scaling group to be created
    successfully. The `Timeout` property defines the maximum amount to time to wait
    for all success signals - if the configured count is not met within this time
    frame, then the Auto Scaling group will be considered to not have created successfully
    and stack deployment will fail and roll back. This property is configured using
    a special format called **ISO8601 duration format**, and the value of `PT15M`
    means CloudFormation will wait up to 15 minutes for all success signals.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceSignal`对象包括一个`Count`属性，该属性定义了确定自动扩展组是否已成功创建所需的最小成功信号数量，并引用`ApplicationDesiredCount`参数，这意味着您期望自动扩展组中的所有实例都能成功创建。`Timeout`属性定义了等待所有成功信号的最长时间
    - 如果在此时间范围内未满足配置的计数，则将认为自动扩展组未成功创建，并且堆栈部署将失败并回滚。此属性使用一种称为**ISO8601持续时间格式**的特殊格式进行配置，`PT15M`的值表示CloudFormation将等待最多15分钟的所有成功信号。'
- en: Configuring EC2 instance profiles
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EC2实例配置文件
- en: In the EC2 Auto Scaling launch configuration you defined in the previous example,
    you referenced an IAM instance profile, which we need to create as a separate
    resource in our stack. EC2 instance profiles allow you to attach an IAM role,
    which your EC2 instances can use to gain access to AWS resources and services,
    and in the ECS container instance use case. Recall from Chapter 4, when you created
    your first ECS cluster, that an IAM instance profile and associated IAM role that
    granted various ECS permissions was automatically attached to your ECS container
    instance.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面示例中定义的EC2自动扩展启动配置中，您引用了一个IAM实例配置文件，我们需要在堆栈中创建为一个单独的资源。EC2实例配置文件允许您附加一个IAM角色，您的EC2实例可以使用该角色来访问AWS资源和服务，在ECS容器实例使用情况下。回想一下第4章，当您创建第一个ECS集群时，自动附加了一个IAM实例配置文件和相关的IAM角色，授予了各种ECS权限。
- en: 'Because we are configuring our ECS cluster and Auto Scaling group from scratch,
    we need to explicitly define an appropriate IAM instance profile and linked IAM
    role, as demonstrated in the following example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在从头开始配置ECS集群和自动扩展组，我们需要明确定义适当的IAM实例配置文件和关联的IAM角色，就像以下示例中所示的那样：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Defining an IAM instance profile and IAM role
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 定义IAM实例配置文件和IAM角色
- en: 'In the preceding example, rather than attach the `AmazonEC2ContainerServiceforEC2Role`
    managed policy, you attach a custom policy that defines a similar set of permission,
    noting the following differences:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您不是附加“AmazonEC2ContainerServiceforEC2Role”托管策略，而是附加了一个定义了类似权限集的自定义策略，注意以下区别：
- en: The permission to create a cluster is not granted, as you are already creating
    the ECS cluster yourself within the stack.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未授予创建集群的权限，因为您已经在堆栈中自己创建了ECS集群。
- en: The permissions to register, deregister, and update container instance states
    are limited to the ECS cluster defined in your stack. In contrast, the `AmazonEC2ContainerServiceforEC2Role`
    role grants this permission to all clusters in your account, so your custom configuration
    is considered more secure.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册、注销和更新容器实例状态的权限仅限于您堆栈中定义的ECS集群。相比之下，“AmazonEC2ContainerServiceforEC2Role”角色授予您账户中所有集群的权限，因此您的自定义配置被认为更安全。
- en: The custom policy grants the `logs:CreateLogGroup` permission - this is required
    as the CloudWatch logs agent expects this permission, even if the log group has
    already been created. In the preceding example, we constrain this permission to
    log groups that are prefixed with the current stack name, limiting the scope of
    these permissions.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义策略授予“logs:CreateLogGroup”权限 - 即使日志组已经创建，CloudWatch日志代理也需要此权限。在前面的示例中，我们将此权限限制为以当前堆栈名称为前缀的日志组，限制了这些权限的范围。
- en: Configuring EC2 security groups
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EC2安全组
- en: 'You have almost completed the required configuration to be able to deploy your
    ECS cluster and EC2 Auto Scaling group, however one final resource we need to
    create is the `ApplicationAutoscalingSecurityGroup` resource, which you referenced
    earlier in the `ApplicationAutoscalingLaunchConfiguration` resource configuration:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎已经完成了部署ECS集群和EC2自动扩展组所需的配置，但是我们还需要创建一个最终资源，即您之前在“ApplicationAutoscalingLaunchConfiguration”资源配置中引用的“ApplicationAutoscalingSecurityGroup”资源：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Defining an EC2 Security Group
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 定义EC2安全组
- en: In the preceding example, you permit inbound SSH access to your instances, and
    allow your instances to access DNS, HTTP, and HTTPS resources on the internet.
    This is not the most secure security group configuration, and in a production
    use case, at a minimum, you would limit SSH access to internal management addresses,
    but for the purposes of keeping things simple and accessible for demonstration
    purposes, you configure a reasonably lax set of security rules.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，您允许入站SSH访问您的实例，并允许您的实例访问互联网上的DNS、HTTP和HTTPS资源。这不是最安全的安全组配置，在生产用例中，您至少会将SSH访问限制在内部管理地址，但为了简化和演示目的，您配置了一组相当宽松的安全规则。
- en: 'Notice that you also define a new parameter, called VPC ID, which specifies
    the ID of the VPC that the security group will be created in, and you can use
    the `aws ec2 describe-vpcs` command to obtain the ID of the default VPC that is
    created by default in your AWS account:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 查找堆栈依赖的外部资源的物理标识符的更可扩展的方法是使用一个称为CloudFormation exports的功能，它允许您将有关资源的数据导出到其他堆栈。例如，您可以在一个名为network-resources的堆栈中定义所有网络资源，然后配置一个CloudFormation导出，将该堆栈创建的VPC资源的VPC
    ID导出。然后，可以通过使用`Fn::ImportValue`内部函数在其他CloudFormation堆栈中引用这些导出。有关此方法的更多详细信息，请参见[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html)。
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Determining your VPC ID
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您还定义了一个新参数，称为VPC ID，它指定将在其中创建安全组的VPC的ID，您可以使用`aws ec2 describe-vpcs`命令获取默认VPC的ID，该VPC默认在您的AWS账户中创建：确定您的VPC
    ID
- en: 'Once you have the correct VPC ID value, you need to update your `dev.cfg` file
    to include the `VpcId` parameter and value:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了正确的VPC ID值，您需要更新您的`dev.cfg`文件，以包括`VpcId`参数和值：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Configuring the VpcId parameter in dev.cfgA more scalable approach to looking
    up the physical identifiers of external resources that your stack has dependencies
    on is to use a feature referred to as CloudFormation exports, which allow you
    to export data about a resource to other stacks. For example, you might define
    all of your networking resources in a stack called network-resources, and then
    configure a CloudFormation export that exports the VPC ID of VPC resources created
    by that stack. These exports can then be referenced in other CloudFormation stacks
    by using the `Fn::ImportValue` intrinsic function. See [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html)
    for more details on this approach.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在dev.cfg中配置VpcId参数
- en: Deploying and testing an ECS cluster
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和测试ECS集群
- en: 'You have now completed the configuration of your CloudFormation template, and
    it''s time to deploy the changes you made in the previous section. Recall that
    you created a separate configuration file, called `dev.cfg`, to store values for
    each stack parameter. The following example demonstrates how you can now use the
    `aws cloudformation deploy` command to deploy your updated stack and reference
    your input parameter values:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经完成了CloudFormation模板的配置，是时候部署您在上一节中所做的更改了。请记住，您创建了一个单独的配置文件，名为`dev.cfg`，用于存储每个堆栈参数的值。以下示例演示了如何使用`aws
    cloudformation deploy`命令来部署您更新的堆栈并引用您的输入参数值：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Deploying a CloudFormation Stack with parameter overrides
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用参数覆盖部署CloudFormation堆栈
- en: In the preceding example, you use the `--parameter-overrides` flag to specify
    values for each of the parameters your template expects. Rather than type these
    out manually each time, you simply use a bash substitution and list the contents
    of the local `dev.cfg` file, which expresses each parameter name and value in
    the correct format.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您使用`--parameter-overrides`标志为模板期望的每个参数指定值。而不是每次手动输入这些值，您只需使用bash替换并列出本地`dev.cfg`文件的内容，该文件以正确的格式表示每个参数名称和值。
- en: Notice also that because your CloudFormation stack now includes IAM resources,
    you must specify the `--capabilities` flag with a value of either `CAPABILITY_IAM`
    or `CAPABILITY_NAMED_IAM`. When you do this, you are acknowledging that CloudFormation
    will be creating IAM resources on your behalf and that you grant permission. Although
    you only need to specify the `CAPABILITY_NAMED_IAM` value if you are creating
    named IAM resources (which we are not), I find it is just more universal and less
    error-prone to always reference this value.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，因为您的CloudFormation堆栈现在包括IAM资源，您必须使用`--capabilities`标志，并将其值指定为`CAPABILITY_IAM`或`CAPABILITY_NAMED_IAM`。当您这样做时，您正在承认CloudFormation将代表您创建IAM资源，并且您授予权限。虽然只有在创建命名IAM资源时才需要指定`CAPABILITY_NAMED_IAM`值（我们没有），但我发现这样更通用，更不容易出错，总是引用这个值。
- en: 'Assuming your template has no configuration errors, your stack should deploy
    successfully and if you browse to the CloudFormation in the AWS console selecting
    the todobackend stack, you can review the various events that took place during
    stack deployment:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的模板没有配置错误，您的堆栈应该可以成功部署，如果您浏览到AWS控制台中的CloudFormation，选择todobackend堆栈，您可以查看堆栈部署过程中发生的各种事件：
- en: '![](assets/236fe068-06d9-4685-862c-a553d2b7494c.png)Viewing CloudFormation
    deployment status'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/236fe068-06d9-4685-862c-a553d2b7494c.png)查看CloudFormation部署状态'
- en: In the preceding screenshot, you can see that CloudFormation starts creating
    an Auto Scaling group at `20:18:56`, and then just over a minute and a half later,
    at `20:20:39`, receives a SUCCESS signal from the single EC2 instance in the Auto
    Scaling group. This meets the creation policy criteria of receiving the desired
    count of instances, and the stack update completes successfully.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到CloudFormation在`20:18:56`开始创建一个自动扩展组，然后一分半钟后，在`20:20:39`，从自动扩展组中的单个EC2实例接收到一个成功的信号。这满足了接收所需数量的实例的创建策略标准，堆栈更新成功完成。
- en: 'At this point, your ECS cluster should have a single ECS container instance
    registered and active, and you can use the `aws ecs describe-cluster` command
    to verify this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的ECS集群应该有一个注册和活动的ECS容器实例，您可以使用`aws ecs describe-cluster`命令来验证。
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Verifying an ECS cluster
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 验证ECS集群
- en: In the previous example, you can see that the ECS cluster had a single registered
    ECS container instance and the status of the cluster is ACTIVE, meaning your ECS
    cluster is ready to run your ECS tasks and services.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，您可以看到ECS集群有一个注册的ECS容器实例，集群的状态是活动的，这意味着您的ECS集群已准备好运行ECS任务和服务。
- en: 'You can also verify that your EC2 Auto Scaling group was created correctly
    by navigating to the EC2 console, and selecting Auto Scaling Groups from the left-hand
    menu:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过导航到EC2控制台，并从左侧菜单中选择自动扩展组来验证您的EC2自动扩展组是否正确创建：
- en: '![](assets/2447a1eb-c0bf-4d72-871f-0473731f994e.png)Verifying EC2 Auto Scaling
    Groups'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2447a1eb-c0bf-4d72-871f-0473731f994e.png)验证EC2自动扩展组'
- en: In the previous screenshot, notice that the name of your Auto Scaling group
    includes the stack name (`todobackend`), logical resource name (`ApplicationAutoscaling`),
    and a random string value (`XFSR1DDVFG9J`). This illustrates an important concept
    of CloudFormation - if you don't name your resources explicitly (assuming the
    resource has a `Name` or equivalent property), then CloudFormation will append
    a random string to ensure resources are named uniquely.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，请注意您的自动缩放组的名称包括堆栈名称（`todobackend`）、逻辑资源名称（`ApplicationAutoscaling`）和一个随机字符串值（`XFSR1DDVFG9J`）。这说明了CloudFormation的一个重要概念
    - 如果您没有显式地为资源命名（假设资源具有`Name`或等效属性），那么CloudFormation将附加一个随机字符串以确保资源具有唯一的名称。
- en: 'If you have followed along and configured your stack without any errors, then
    your CloudFormation stack should deploy successfully, as demonstrated in previous
    screenshots. Chances are that, with a CloudFormation template with ~150 lines
    of configuration, there is a possibility you will make an error and your CloudFormation
    deployment will fail. If you do get stuck and can''t resolve a deployment issue,
    refer to the this GitHub URL as a reference: [https://github.com/docker-in-aws/docker-in-aws/blob/master/ch7/todobackend-aws](https://github.com/docker-in-aws/docker-in-aws/blob/master/ch7/todobackend-aws)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照并且配置您的堆栈没有任何错误，那么您的CloudFormation堆栈应该能够成功部署，就像之前的截图演示的那样。有可能，使用大约150行配置的CloudFormation模板，您会出现错误，您的CloudFormation部署将失败。如果您遇到问题并且无法解决部署问题，请参考此GitHub
    URL作为参考：[https://github.com/docker-in-aws/docker-in-aws/blob/master/ch7/todobackend-aws](https://github.com/docker-in-aws/docker-in-aws/blob/master/ch7/todobackend-aws)
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create an ECS cluster, complete with an
    EC2 Auto Scaling group and ECS container instances based on a custom Amazon machine
    image, using an infrastructure-as-code approach to define all resources using
    CloudFormation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何创建一个ECS集群，包括一个EC2自动缩放组和基于自定义Amazon机器映像的ECS容器实例，使用基础设施即代码的方法使用CloudFormation定义所有资源。
- en: You learned how an ECS cluster is simply a logical grouping of ECS container
    instances, and is composed of EC2 Auto Scaling groups that manage a collection
    of EC2 instances. EC2 Auto Scaling groups can dynamically scale up and down, and
    you attached an EC2 Auto Scaling launch configuration to your Auto Scaling group,
    which provides a common collection of settings applied to each new EC2 instance
    that is added to the group.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您了解了ECS集群如何简单地是ECS容器实例的逻辑分组，并由管理一组EC2实例的EC2自动缩放组组成。EC2自动缩放组可以动态地进行缩放，您将EC2自动缩放启动配置附加到了您的自动缩放组，该配置为每个添加到组中的新EC2实例提供了一组通用的设置。
- en: CloudFormation provides powerful features for ensuring instances in your Auto
    Scaling groups are initialized correctly, and you learned how you to configure
    user data to invoke the CloudFormation helper scripts you installed in your custom
    machine image, which then download configurable initialization logic defined in
    CloudFormation Init metadata that is attached to your launch configuration resources.
    Once the CloudFormation Init process is complete, the helper scripts signal success
    or failure of the initialization process to CloudFormation, and you configured
    a creation policy for your Auto Scaling group that defined the required number
    of instances that must report success for the overall Auto Scaling group resource
    to be considered healthy.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation为确保自动扩展组中的实例正确初始化提供了强大的功能，您学会了如何配置用户数据以调用您在自定义机器映像中安装的CloudFormation辅助脚本，然后下载附加到启动配置资源的CloudFormation
    Init元数据中定义的可配置初始化逻辑。一旦CloudFormation Init过程完成，辅助脚本会向CloudFormation发出初始化过程的成功或失败信号，并为自动扩展组配置了一个创建策略，该策略定义了必须报告成功的实例数量，以便将整个自动扩展组资源视为健康。
- en: You next attached an IAM instance profile and security group to your launch
    configuration, ensuring your ECS container instances have necessary permissions
    to interact with the ECS service, download images from ECR, publish logs to CloudWatch
    logs, and communicate with the relevant AWS API endpoints.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将IAM实例配置文件和安全组附加到启动配置中，确保您的ECS容器实例具有与ECS服务交互，从ECR下载图像，将日志发布到CloudWatch日志以及与相关的AWS
    API端点通信所需的权限。
- en: With the core Auto Scaling group, launch configuration, and other supporting
    resources in place, you successfully deployed your cluster using CloudFormation,
    establishing the necessary infrastructure foundations required to run your ECS
    tasks and services. In the next chapter, you will build on this foundation, extending
    your CloudFormation template to define ECS task definitions, ECS services, and
    other supporting resources required to deploy a complete end-to-end application
    environment.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过核心自动扩展组、启动配置和其他支持资源的部署，您成功地使用CloudFormation部署了您的集群，建立了运行ECS任务和服务所需的基础设施基础。在下一章中，您将在此基础上构建，扩展您的CloudFormation模板以定义ECS任务定义、ECS服务和部署完整端到端应用环境所需的其他支持资源。
- en: Questions
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True/false: An EC2 Auto Scaling group allows you to define a fixed IP address
    for each instance.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：EC2自动扩展组允许您为每个实例定义固定的IP地址。
- en: What type of encoding needs to be applied to EC2 user data?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EC2用户数据需要应用什么类型的编码？
- en: How can you refer to the current AWS region in your CloudFormation templates?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何在CloudFormation模板中引用当前的AWS区域？
- en: 'True/false: The `Ref` intrinsic function can only refer to resources in a CloudFormation
    template.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：`Ref`内在函数只能引用CloudFormation模板中的资源。
- en: When using CloudFormation Init metadata, which two helper scripts do you need
    to run on your EC2 instances?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用CloudFormation Init元数据时，您需要在EC2实例上运行哪两个辅助脚本？
- en: You are attempting to create an EC2 Auto Scaling group and ECS cluster using
    the standard ECS-optimized AMI published by Amazon, however you receive errors
    indicating no instances are registered to a target ECS cluster even though CloudFormation
    reports the Auto Scaling group has been created. How might you fix this problem?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您正在尝试使用亚马逊发布的标准ECS优化AMI创建EC2自动扩展组和ECS集群，但是您收到错误消息，指示没有实例注册到目标ECS集群，即使CloudFormation报告自动扩展组已创建。您如何解决这个问题？
- en: 'True/false: The `aws cloudformation create` command is used for deploying and
    updating CloudFormation stacks.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：`aws cloudformation create`命令用于部署和更新CloudFormation堆栈。
- en: You are attempting to deploy an ECS cluster in a private subnet with no default
    internet route, however the ECS container instances within the cluster fail to
    register to ECS. What is the most likely explanation for this?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您正在尝试在没有默认互联网路由的私有子网中部署ECS集群，但是集群中的ECS容器实例未能注册到ECS。这最有可能的解释是什么？
- en: Further reading
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接，了解本章涵盖的主题的更多信息：
- en: 'CloudFormation EC2 Auto Scaling group Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation EC2自动扩展组资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html)
- en: 'CloudFormation EC2 Auto Scaling Launch Configuration Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation EC2自动扩展启动配置资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html)
- en: 'CloudFormation IAM Instance Profile Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation IAM实例配置文件资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
- en: 'CloudFormation IAM Role Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation IAM角色资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
- en: 'CloudFormation EC2 Security Group Resource Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation EC2安全组资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html)
- en: 'Supported Resource-Level Permissions for Amazon ECS API Actions: [https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-supported-iam-actions-resources.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-supported-iam-actions-resources.html)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon ECS API操作支持的资源级权限：[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-supported-iam-actions-resources.html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-supported-iam-actions-resources.html)
- en: 'CloudFormation Helper Scripts: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation辅助脚本：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html)
- en: 'CloudFormation Init Metadata Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CloudFormation Init Metadata Reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html)'
- en: 'CloudFormation Creation Policy Attribute: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation创建策略属性：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html)
