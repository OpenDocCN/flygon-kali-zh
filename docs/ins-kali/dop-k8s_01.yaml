- en: Introduction to DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps简介
- en: Software delivery cycle has been getting shorter and shorter, while on the other
    hand, application size has been getting bigger and bigger. Software developers
    and IT operators are under the pressure to find a solution to this. There is a
    new role, called **DevOps**, which is dedicated to support software building and
    delivery.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 软件交付周期变得越来越短，而另一方面，应用程序的大小却变得越来越大。软件开发人员和IT运营商面临着找到解决方案的压力。有一个新的角色，称为**DevOps**，专门支持软件构建和交付。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: How has software delivery methodology changed?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件交付方法论如何改变？
- en: What is microservice, and why do people adopt this architecture?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是微服务，为什么人们采用这种架构？
- en: How does DevOps support to build and deliver the application to the user?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps如何支持构建和交付应用程序给用户？
- en: Software delivery challenges
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件交付挑战
- en: Building a computer application and delivering it to the customer has been discussed
    and has evolved over time. It is related to **Software Development Life Cycle**
    (**SDLC**); there are several types of processes, methodologies, and histories.
    In this section, we will describe its evolution.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 构建计算机应用程序并将其交付给客户已经被讨论并随着时间的推移而发展。它与**软件开发生命周期**（**SDLC**）有关；有几种类型的流程、方法论和历史。在本节中，我们将描述其演变。
- en: Waterfall and physical delivery
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瀑布和物理交付
- en: Back in the 1990s, software delivery was adopted by a **physical** method, such
    as a floppy disk or a CD-ROM. Therefore, SDLC was a very long-term schedule, because
    it was not easy to (re)deliver to the customer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回到20世纪90年代，软件交付采用了**物理**方法，如软盘或CD-ROM。因此，SDLC是一个非常长期的时间表，因为很难（重新）交付给客户。
- en: 'At that moment, a major software development methodology was a **waterfall
    model**, which has requirements/design/implementation/verification/maintenance
    phases as shown in the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那时，一个主要的软件开发方法论是**瀑布模型**，它具有如下图所示的需求/设计/实施/验证/维护阶段：
- en: '![](../images/00005.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00005.jpeg)'
- en: In this case, we can't go back to the previous phase. For example, after starting
    or finishing the **Implementation** phase, it is not acceptable to go back to
    the **Design** phase (to find a technical expandability issue, for example). This
    is because it will impact the overall schedule and cost. The project tends to
    proceed and complete to release, then it goes to the next release cycle including
    a new design.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不能回到以前的阶段。例如，在开始或完成**实施**阶段后，不可接受返回到**设计**阶段（例如查找技术可扩展性问题）。这是因为它会影响整体进度和成本。项目倾向于继续并完成发布，然后进入下一个发布周期，包括新设计。
- en: It perfectly matches the physical software delivery because it needs to coordinate
    with logistics management that press and deliver the floppy/CD-ROM to the user.
    Waterfall model and physical delivery used to take a year to several years.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它完全符合物理软件交付，因为它需要与物流管理协调，压制并交付软盘/CD-ROM给用户。瀑布模型和物理交付过去需要一年到几年的时间。
- en: Agile and electrical delivery
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷和电子交付
- en: A few years later, the internet became widely accepted, and then software delivery
    method also changed from physical to **electrical**, such as online download.
    Therefore, many software companies (also known as dot-com companies) tried to
    figure out how to shorten the SDLC process in order to deliver the software that
    can beat the competitors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，互联网被广泛接受，然后软件交付方法也从物理转变为**电子**，如在线下载。因此，许多软件公司（也被称为点com公司）试图找出如何缩短SDLC流程，以交付能够击败竞争对手的软件。
- en: Many developers started to adopt new methodologies such as incremental, iterative,
    or **agile** models and then deliver to the customer faster. Even if new bugs
    are found, it is now easier to update and deliver to the customer as a patch by
    electrical delivery. Microsoft Windows update was also introduced since Windows
    98.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员开始采用增量、迭代或敏捷模型等新方法，以更快地交付给客户。即使发现新的错误，现在也更容易通过电子交付更新并交付给客户。自Windows 98以来，微软Windows更新也被引入。
- en: In this case, the software developer writes only a small logic or module, instead
    of the entire application in one shot. Then, it delivers to the QA, and then the
    developer continues to add a new module and finally delivers it to the QA again.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，软件开发人员只编写一个小的逻辑或模块，而不是一次性编写整个应用程序。然后，交付给质量保证，然后开发人员继续添加新模块，最终再次交付给质量保证。
- en: 'When the desired modules or functions are ready, it will be released as shown
    in the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当所需的模块或功能准备就绪时，将按照以下图表释放：
- en: '![](../images/00006.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00006.jpeg)'
- en: This model makes the SDLC cycle and the software delivery faster and also easy
    to be adjust during the process, because the cycle is from a few weeks to a few
    months which is small enough to make a quick adjustment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式使得软件开发生命周期和交付变得更快，也更容易在过程中进行调整，因为周期从几周到几个月，足够小以便进行快速调整。
- en: Although this model is currently favoured by the majority, at that moment, application
    software delivery meant software binary, such as EXE program which is designed
    to be installed and run on the customer's PC. On the other hand, the infrastructure
    (such as server and network) is very static and set up beforehand. Therefore,
    SDLC doesn't tend to include these infrastructures in the scope yet.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种模式目前受到大多数人的青睐，但在当时，应用软件交付意味着软件二进制，如可安装并在客户PC上运行的EXE程序。另一方面，基础设施（如服务器和网络）非常静态并且事先设置。因此，软件开发生命周期并不倾向于将这些基础设施纳入范围之内。
- en: Software delivery on the cloud
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云端软件交付
- en: A few years later, smartphones (such as iPhone) and wireless technology (such
    as Wi-Fi and 4G network) became widely accepted, and software application also
    changed from binary to the online service. The web browser is the interface of
    the application software, which need not be installed anymore. On the other hand,
    infrastructure becomes dynamic, since the application requirement keeps changing
    and the capacity needs to grow as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，智能手机（如iPhone）和无线技术（如Wi-Fi和4G网络）得到了广泛的接受，软件应用也从二进制转变为在线服务。Web浏览器是应用软件的界面，不再需要安装。另一方面，基础设施变得动态起来，因为应用需求不断变化，容量也需要增长。
- en: Virtualization technology and **Software Defined Network** (**SDN**) make the
    server machine dynamic. Now, cloud services such as **Amazon Web Services** (**AWS**)
    and **Google Cloud Platform** (**GCP**) can be easy to create and manage dynamic
    infrastructures.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化技术和软件定义网络（SDN）使服务器机器变得动态。现在，云服务如亚马逊网络服务（AWS）和谷歌云平台（GCP）可以轻松创建和管理动态基础设施。
- en: Now, infrastructure is one of the important components and being within a scope
    of Software Development Delivery Cycle, because the application is installed and
    runs on the server side, rather than a client PC. Therefore, software and service
    delivery cycle takes between a few days to a few weeks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，基础设施是重要组成部分之一，并且在软件开发交付周期的范围内，因为应用程序安装并在服务器端运行，而不是在客户端PC上运行。因此，软件和服务交付周期需要花费几天到几周的时间。
- en: Continuous Integration
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: As discussed previously, the surrounding software delivery environment keeps
    changing; however, the delivery cycle is getting shorter and shorter. In order
    to achieve rapid delivery with higher quality, the developer and QA start to adopt
    some automation technologies. One of the popular automation technologies is **Continuous
    Integration** (**CI**). CI contains some combination of tools, such as **Version
    Control Systems** (**VCS**), **build server**, and **testing automation tools**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，周围的软件交付环境不断变化；然而，交付周期变得越来越短。为了实现更高质量的快速交付，开发人员和质量保证人员开始采用一些自动化技术。其中一种流行的自动化技术是**持续集成**（**CI**）。CI包含一些工具的组合，如**版本控制系统**（**VCS**）、**构建服务器**和**测试自动化工具**。
- en: VCS helps the developer to maintain program source code onto the central server.
    It prevents overwriting or conflict with other developers' code and also preserves
    the history. Therefore, it makes it easier to keep the source code consistent
    and deliver to the next cycle.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: VCS帮助开发人员将程序源代码维护到中央服务器上。它可以防止覆盖或与其他开发人员的代码冲突，同时保留历史记录。因此，它使得源代码保持一致并交付到下一个周期变得更容易。
- en: The same as VCS, there is a centralized build servers that connects VCS to retrieve
    the source code periodically or automatically when the developer updates the code
    to VCS, and then trigger a new build. If the build fails, it notifies the developer
    in a timely manner. Therefore, it helps the developer when someone commits the
    broken code into the VCS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与VCS一样，有一个集中的构建服务器，它连接VCS定期检索源代码，或者当开发人员更新代码到VCS时自动触发新的构建。如果构建失败，它会及时通知开发人员。因此，当有人将有问题的代码提交到VCS时，它有助于开发人员。
- en: Testing automation tools are also integrated with build server that invoke the
    unit test program after the build succeeds, then notifies the result to the developer
    and QA. It helps to identify when somebody writes a buggy code and stores to VCS.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化工具也与构建服务器集成，构建成功后调用单元测试程序，然后将结果通知给开发人员和质量保证人员。它有助于识别当有人编写有错误的代码并存储到VCS时。
- en: 'The entire flow of CI is as shown in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CI的整个流程如下图所示：
- en: '![](../images/00007.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00007.jpeg)'
- en: CI helps both the developer and the QA not only to increase the quality, but
    also to shorten archiving an application or module package cycle. In an age of
    electrical delivery to the customer, CI is more than enough. However, because
    delivery to the customer means to deploy to the server.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: CI不仅有助于开发人员和质量保证人员提高质量，还有助于缩短应用程序或模块包的归档周期。在电子交付给客户的时代，CI已经远远不够了。然而，因为交付给客户意味着部署到服务器。
- en: Continuous Delivery
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: CI plus deployment automation is the ideal process for the server application
    to provide a service to customers. However, there are some technical challenges
    that need to be resolved. How to deliver a software to the server? How to gracefully
    shutdown the existing application? How to replace and rollback the application?
    How to upgrade or replace if the system library also needs to change? How to modify
    the user and group settings in OS if needed? and so on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: CI加上部署自动化是为服务器应用程序提供服务给客户的理想流程。然而，还有一些技术挑战需要解决。如何将软件交付到服务器？如何优雅地关闭现有应用程序？如何替换和回滚应用程序？如果系统库也需要更改，如何升级或替换？如果需要，如何修改操作系统中的用户和组设置？等等。
- en: Because the infrastructure includes the server and network, it all depends on
    an environment such as Dev/QA/staging/production. Each environment has different
    server configuration and IP address.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基础设施包括服务器和网络，一切都取决于诸如Dev/QA/staging/production之类的环境。每个环境都有不同的服务器配置和IP地址。
- en: '**Continuous Delivery** (**CD**) is a practice that could be achieved; it is
    a combination of CI tool, configuration management tool, and orchestration tool:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）是一种可以实现的实践；它是CI工具、配置管理工具和编排工具的组合：'
- en: '![](../images/00008.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00008.jpeg)'
- en: Configuration management
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理
- en: The configuration management tool helps to configure an OS including the user,
    group, and system libraries, and also manages multiple servers that keep consistent
    with the desired state or configuration if we replace the server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具帮助配置操作系统，包括用户、组和系统库，并管理多个服务器，使其与期望的状态或配置保持一致，如果我们替换服务器。
- en: It is not a scripting language, because scripting language performs to execute
    a command based on the script line by line. If we execute the script twice, it
    may cause some error, for example, attempt to create the same user twice. On the
    other hand, configuration management looks at the **state**, so if user is created
    already, the configuration management tool doesn't do anything. But if we delete
    a user accidentally or intentionally, the configuration management tool will create
    the user again.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是一种脚本语言，因为脚本语言执行基于脚本逐行执行命令。如果我们执行脚本两次，可能会导致一些错误，例如尝试两次创建相同的用户。另一方面，配置管理关注**状态**，所以如果用户已经创建，配置管理工具就不会做任何事情。但是如果我们意外或有意删除用户，配置管理工具将再次创建用户。
- en: It also supports to deploy or install your application to the server. Because
    if you tell the configuration management tool to download your application, then
    set it up and run the application, it tries to do so.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它还支持将应用程序部署或安装到服务器。因为如果您告诉配置管理工具下载您的应用程序，然后设置并运行应用程序，它会尝试这样做。
- en: In addition, if you tell the configuration management tool to shut down your
    application, then download and replace to a new package if available, and then
    restart the application, it keeps up to date with the latest version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您告诉配置管理工具关闭您的应用程序，然后下载并替换为新的软件包（如果有的话），然后重新启动应用程序，它将保持最新版本。
- en: Of course, some of the users want to update the application only when it is
    required, such as blue-green deployments. The configuration management tool allows
    you to trigger to execute manually too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一些用户只希望在需要时更新应用程序，比如蓝绿部署。配置管理工具也允许您手动触发执行。
- en: 'Blue-green deployments is a technique that prepares the two sets of application
    stack, then only one environment (example: blue) is servicing to the production.
    Then when you need to deploy a new version of application, deploy to the other
    side (example: green) then perform the final test. Then if it works fine, change
    the load balancer or router setting to switch the network flow from blue to green.
    Then green becomes a production, while blue becomes dormant and waiting for the
    next version deployment.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署是一种技术，它准备了两套应用程序堆栈，然后只有一个环境（例如：蓝色）提供生产服务。然后当您需要部署新版本的应用程序时，部署到另一侧（例如：绿色），然后进行最终测试。然后如果一切正常，更改负载均衡器或路由器设置，将网络流从蓝色切换到绿色。然后绿色成为生产环境，而蓝色变为休眠状态，等待下一个版本的部署。
- en: Infrastructure as code
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: The configuration management tool supports not only OS or Virtual Machine, but
    also cloud infrastructure. If you need to create and configure a network, storage,
    and Virtual Machine on the cloud, it requires some of the cloud operations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具不仅支持操作系统或虚拟机，还支持云基础架构。如果您需要在云上创建和配置网络、存储和虚拟机，就需要进行一些云操作。
- en: 'But the configuration management tool helps to automate the setup cloud infrastructure
    by configuration file, as shown in the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但是配置管理工具还可以通过配置文件自动设置云基础架构，如下图所示：
- en: '![](../images/00009.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00009.jpeg)'
- en: Configuration management has some advantage against maintaining an operation
    manual **Standard Operation Procedure** (**SOP**). For example, maintaining a
    configuration file using **VCS** such as Git, you can trace the history of how
    the environment setting has changed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理在维护操作手册（SOP）方面具有一些优势。例如，使用Git等版本控制系统维护配置文件，可以追踪环境设置的变化历史。
- en: It is also easy to duplicate the environment. For example, you need an additional
    environment on cloud. If you follow the traditional approach, (that is, to read
    the SOP document to operate the cloud), it always has a potential human error
    and operation error. On the other hand, we can execute the configuration management
    tool that creates an environment on cloud quickly and automatically.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 环境也很容易复制。例如，您需要在云上增加一个额外的环境。如果按照传统方法（即阅读SOP文档来操作云），总是存在潜在的人为错误和操作错误。另一方面，我们可以执行配置管理工具，快速自动地在云上创建一个环境。
- en: Infrastructure as code may or may not be included in the CD process, because
    infrastructure replacement or update cost is higher than just replacing an application
    binary on the server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施即代码可能包含在持续交付过程中，因为基础设施的替换或更新成本比仅仅在服务器上替换应用程序二进制文件要高。
- en: Orchestration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排
- en: The orchestration tool is also categorized as one of the configuration management
    tools. However its more intelligent and dynamic when configuring and allocating
    the cloud resources. For example, orchestration tool manages several server resources
    and networks, and then when the administrator wants to increase the application
    instances, orchestration tool can determine an available server and then deploy
    and configure the application and network automatically.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 编排工具也被归类为配置管理工具之一。然而，当配置和分配云资源时，它更加智能和动态。例如，编排工具管理多个服务器资源和网络，然后当管理员想要增加应用程序实例时，编排工具可以确定一个可用的服务器，然后自动部署和配置应用程序和网络。
- en: Although orchestration tool is beyond the SDLC, it helps Continuous Delivery
    when it needs to scale the application and refactor the infrastructure resource.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编排工具超出了SDLC的范围，但在需要扩展应用程序和重构基础设施资源时，它有助于持续交付。
- en: Overall, the SDLC has been evolved to achieve rapid delivery by several processes,
    tools, and methodologies. Eventually, software (service) delivery takes anywhere
    from a few hours to a day. While at the same time, software architecture and design
    has also evolved to achieve large and rich applications.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，SDLC已经通过多种流程、工具和方法演变，以实现快速交付。最终，软件（服务）交付需要花费几个小时到一天的时间。与此同时，软件架构和设计也在不断演进，以实现大型和丰富的应用程序。
- en: Trend of microservices
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的趋势
- en: Software architecture and design also keep evolving, based on the target environment
    and volume of the application's size.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构和设计也在不断演进，基于目标环境和应用程序规模的大小。
- en: Modular programming
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化编程
- en: When the application size is getting bigger, developers tried to divide by several
    modules. Each module should be independent and reusable, and should be maintained
    by different developer teams. Then, when we start to implement an application,
    the application just initializes and uses these modules to build a larger application
    efficiently.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序规模变大时，开发人员尝试将其分成几个模块。每个模块应该是独立和可重用的，并且应该由不同的开发团队维护。然后，当我们开始实施一个应用程序时，应用程序只需初始化并使用这些模块来高效地构建一个更大的应用程序。
- en: 'The following example shows what kind of library Nginx ([https://www.nginx.com](https://www.nginx.com))
    uses on CentOS 7\. It indicates that Nginx uses `OpenSSL`, `POSIX thread` library,
    `PCRE` the regular expression library, `zlib` the compression library, `GNU C`
    library, and so on. So, Nginx didn''t reinvent to implement SSL encryption, regular
    expression, and so on:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了Nginx（[https://www.nginx.com](https://www.nginx.com)）在CentOS 7上使用的库。它表明Nginx使用了`OpenSSL`、`POSIX线程`库、`PCRE`正则表达式库、`zlib`压缩库、`GNU
    C`库等。因此，Nginx没有重新实现SSL加密、正则表达式等：
- en: '[PRE0]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ldd` command is included in the `glibc-common` package on CentOS.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldd`命令包含在CentOS的`glibc-common`软件包中。'
- en: Package management
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包管理
- en: Java language and several lightweight programming languages such as Python,
    Ruby, and JavaScript have their own module or package management tool. For example,
    Maven ([http://maven.apache.org](http://maven.apache.org)) for Java, pip ([https://pip.pypa.io](https://pip.pypa.io))
    for Python, RubyGems ([https://rubygems.org](https://rubygems.org)) for Ruby and
    npm ([https://www.npmjs.com](https://www.npmjs.com)) for JavaScript.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Java语言和一些轻量级编程语言，如Python、Ruby和JavaScript，都有自己的模块或软件包管理工具。例如，Java使用Maven（[http://maven.apache.org](http://maven.apache.org)），Python使用pip（[https://pip.pypa.io](https://pip.pypa.io)），Ruby使用RubyGems（[https://rubygems.org](https://rubygems.org)），JavaScript使用npm（[https://www.npmjs.com](https://www.npmjs.com)）。
- en: 'Package management tool allows you to register your module or package to the
    centralized or private repository, and also allows to download the necessary packages.
    The following screenshot shows Maven repository for AWS SDK:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包管理工具允许您将您的模块或软件包注册到集中式或私有存储库，并允许下载必要的软件包。以下截图显示了AWS SDK的Maven存储库：
- en: '![](../images/00010.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00010.jpeg)'
- en: 'When you add some particular dependencies to your application, Maven downloads
    the necessary packages. The following screenshot is the result you get when you
    add `aws-java-sdk` dependency to your application:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向应用程序添加特定的依赖项时，Maven会下载必要的软件包。以下截图是当您向应用程序添加`aws-java-sdk`依赖项时所得到的结果：
- en: '![](../images/00011.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00011.jpeg)'
- en: Modular programming helps you to increase software development speed and reduce
    it to reinvent the wheel, so it is the most popular way to develop a software
    application now.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化编程有助于提高软件开发速度并减少重复劳动，因此现在是开发软件应用程序的最流行方式。
- en: However, applications need more and more combination of modules, packages, and
    frameworks, as and when we keep adding a feature and logic. This makes the application
    more complex and larger, especially server-side applications. This is because
    it usually needs to connect to a database such as RDBMS, as well as an authentication
    server such as LDAP, and then return the result to the user by HTML with the appropriate
    design.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着我们不断添加功能和逻辑，应用程序需要越来越多的模块、软件包和框架的组合。这使得应用程序变得更加复杂和庞大，特别是服务器端应用程序。这是因为它通常需要连接到诸如关系型数据库（RDBMS）之类的数据库，以及诸如LDAP之类的身份验证服务器，然后通过适当的设计以HTML形式将结果返回给用户。
- en: Therefore, developers have adopted some software design patterns in order to
    develop an application with a bunch of modules within an application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，开发人员采用了一些软件设计模式，以便在应用程序中开发一堆模块。
- en: MVC design pattern
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC设计模式
- en: 'One of the popular application design patterns is **Model View and Controller**
    (**MVC**). It defines three layers. **View** layer is in charge of **user interface**
    (**UI**) **input output** (**I/O**). **Model** layer is in charge of data query
    and persistency such as load and store to database. Then, the **Controller** layer
    is in charge of business logic that is halfway between **View** and **Model**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型视图控制器**（**MVC**）是一种流行的应用程序设计模式之一。它定义了三层。**视图**层负责**用户界面**（**UI**）**输入输出**（**I/O**）。**模型**层负责数据查询和持久性，比如加载和存储到数据库。然后，**控制器**层负责业务逻辑，处于**视图**和**模型**之间。'
- en: '![](../images/00012.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00012.jpeg)'
- en: There are some frameworks that help developers to make MVC easier, such as Struts
    ([https://struts.apache.org/](https://struts.apache.org/)), SpringMVC ([https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/)),
    Ruby on Rails ([http://rubyonrails.org/](http://rubyonrails.org/)), and Django
    ([https://www.djangoproject.com/](https://www.djangoproject.com/)). MVC is one
    of the successful software design pattern that is used for the foundation of modern
    web applications and services.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些框架可以帮助开发人员更轻松地使用MVC，比如Struts ([https://struts.apache.org/](https://struts.apache.org/))，SpringMVC
    ([https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/))，Ruby
    on Rails ([http://rubyonrails.org/](http://rubyonrails.org/))和Django ([https://www.djangoproject.com/](https://www.djangoproject.com/))。MVC是一种成功的软件设计模式，被用作现代Web应用程序和服务的基础之一。
- en: MVC defines a border line between every layer which allows many developers to
    jointly develop the same application. However, it causes side effects. That is,
    the size of the source code within the application keeps getting bigger. This
    is because database code (**Model**), presentation code (**View**), and business
    logic (**Controller**) are all within the same VCS repository. It eventually makes
    impact on the software development cycle, which gets slower again! It is called
    **monolithic**, which contains a lot of code that builds a giant exe/war program.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: MVC定义了每一层之间的边界线，允许许多开发人员共同开发同一个应用程序。然而，这也会带来副作用。也就是说，应用程序中的源代码大小不断增加。这是因为数据库代码（**模型**）、展示代码（**视图**）和业务逻辑（**控制器**）都在同一个版本控制系统存储库中。最终会对软件开发周期产生影响，使其变得更慢！这被称为**单片式**，其中包含了构建巨大的exe/war程序的大量代码。
- en: Monolithic application
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单片式应用程序
- en: There is no clear measurement of monolithic application definition, but it used
    to have more than 50 modules or packages, more than 50 database tables, and then
    it needs more than 30 minutes to build. When it needs to add or modify one module,
    it affects a lot of code, therefore developers try to minimize the application
    code change. This hesitation causes worse effects such that sometimes the application
    even dies because no one wants to maintain the code anymore.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 单片式应用程序的定义没有明确的衡量标准，但通常具有超过50个模块或包，超过50个数据库表，然后需要超过30分钟的构建时间。当需要添加或修改一个模块时，会影响大量代码，因此开发人员试图最小化应用程序代码的更改。这种犹豫会导致更糟糕的影响，有时甚至会导致应用程序因为没有人愿意再维护代码而死掉。
- en: Therefore, the developer starts to divide monolithic applications in to small
    pieces of application and connect via the network.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，开发人员开始将单片式应用程序分割成小的应用程序片段，并通过网络连接起来。
- en: Remote Procedure Call
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程过程调用
- en: Actually, dividing an application in to small pieces and connecting via the
    network has been attempted back in the 1990s. Sun Microsystems introduced **Sun
    RPC** (**Remote Procedure Call**). It allows you to use the module remotely. One
    of popular Sun RPC implementers is **Network File System** (**NFS**). CPU OS versions
    are independent across NFS client and NFS server, because they are based on Sun
    RPC.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，将应用程序分成小块并通过网络连接已经尝试过了，早在1990年代。Sun Microsystems推出了**Sun RPC**（**远程过程调用**）。它允许您远程使用模块。其中一个流行的Sun
    RPC实现者是**网络文件系统**（**NFS**）。因为它们基于Sun RPC，NFS客户端和NFS服务器之间的CPU操作系统版本是独立的。
- en: The programming language itself also supports RPC-style functionality. UNIX
    and C language have the `rpcgen` tool. It helps the developer to generate a stub
    code, which is in charge of network communication code, so the developer can use
    the C function style and be relieved from difficult network layer programming.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言本身也支持RPC风格的功能。UNIX和C语言都有`rpcgen`工具。它帮助开发人员生成存根代码，负责网络通信代码，因此开发人员可以使用C函数风格，免除了困难的网络层编程。
- en: 'Java has **Java** **Remote Method Invocation** (**RMI**) which is similar to
    Sun RPC, but for Java, **RMI compiler** (**rmic**) generates the stub code that
    connects remote Java processes to invoke the method and get a result back. The
    following diagram shows Java RMI procedure flow:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Java有**Java远程方法调用**（**RMI**），它类似于Sun RPC，但对于Java，**RMI编译器**（**rmic**）生成连接远程Java进程以调用方法并获取结果的存根代码。下图显示了Java
    RMI的过程流程：
- en: '![](../images/00013.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00013.jpeg)'
- en: Objective C also has **distributed object** and .NET has **remoting**, so most
    of the modern programming languages have the capability of Remote Procedure Call
    out of the box.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Objective C也有**分布式对象**，.NET有**远程调用**，因此大多数现代编程语言都具有开箱即用的远程过程调用功能。
- en: These Remote Procedure Call designs have the benefit to divide an application
    into multiple processes (programs). Individual programs can have separate source
    code repositories. It works well although machine resource (CPU, memory) was limited
    during 1990s and 2000s.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些远程过程调用设计的好处是将应用程序分成多个进程（程序）。各个程序可以有单独的源代码存储库。尽管在1990年代和2000年代机器资源（CPU、内存）有限，但它仍然运行良好。
- en: However, it was designed and intended to use the same programming language and
    also designed for client/server model architecture, instead of a distributed architecture.
    In addition, there was less security consideration; therefore, it is not recommended
    to use over a public network.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它的设计意图是使用相同的编程语言，并且设计为客户端/服务器模型架构，而不是分布式架构。此外，安全性考虑较少；因此，不建议在公共网络上使用。
- en: In the 2000s, there was an initiative **web services** that used **SOAP** (HTTP/SSL)
    as data transport, using XML as data presentation and service definition **Web
    Services Description Language** (**WSDL**), then used **Universal Description,
    Discovery, and Integration** (**UDDI**) as the service registry to look up a web
    services application. However, as the machine resources were not rich and due
    to the complexity of web services programming and maintainability, it is not widely
    accepted by developers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代，出现了一个名为**web服务**的倡议，它使用**SOAP**（HTTP/SSL）作为数据传输，使用XML作为数据呈现和服务定义的**Web服务描述语言**（**WSDL**），然后使用**通用描述、发现和集成**（**UDDI**）作为服务注册表来查找web服务应用程序。然而，由于机器资源不丰富，以及Web服务编程和可维护性的复杂性，它并未被开发人员广泛接受。
- en: RESTful design
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful设计
- en: Go to 2010s, now machine power and even the smartphone have plenty of CPU resource,
    in addition to network bandwidth of a few hundred Mbps everywhere. So, the developer
    starts to utilize these resources to make application code and system structure
    as easy as possible making the software development cycle quicker.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 进入2010年代，现在机器性能甚至智能手机都有大量的CPU资源，加上到处都有几百Mbps的网络带宽。因此，开发人员开始利用这些资源，使应用程序代码和系统结构尽可能简单，从而加快软件开发周期。
- en: 'Based on hardware resources, it is a natural decision to use HTTP/SSL as RPC
    transport, but from having experience with web services difficulty, the developer
    makes it simple as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 基于硬件资源，使用HTTP/SSL作为RPC传输是一个自然的决定，但是根据开发人员对Web服务困难的经验，开发人员将其简化如下：
- en: By making HTTP and SSL/TLS a standard transport
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将HTTP和SSL/TLS作为标准传输
- en: By using HTTP method for **Create/Load/Upload/Delete** (**CLUD**) operation,
    such as `GET`/`POST`/`PUT`/`DELETE`
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用HTTP方法进行**创建/加载/上传/删除**（CLUD）操作，例如`GET`/`POST`/`PUT`/`DELETE`
- en: 'By using URI as the resource identifier such as: user ID 123 as `/user/123/`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用URI作为资源标识符，例如：用户ID 123作为`/user/123/`
- en: By using JSON as the standard data presentation
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用JSON作为标准数据呈现
- en: It is called **RESTful** design, and that has been widely accepted by many developers
    and become de facto standard of distributed applications. RESTful application
    allows any programming language as it is HTTP-based, so the RESTful server is
    Java and client Python is very natural.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 它被称为**RESTful**设计，并且已被许多开发人员广泛接受，成为分布式应用程序的事实标准。RESTful应用程序允许任何编程语言，因为它基于HTTP，因此RESTful服务器是Java，客户端Python是非常自然的。
- en: It brings freedom and opportunities to the developer that its easy to perform
    code refactoring, upgrade a library and even switch to another programming language.
    It also encourages the developer to build a distributed modular design by multiple
    RESTful applications, which is called microservices.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它为开发人员带来了自由和机会，易于进行代码重构，升级库甚至切换到另一种编程语言。它还鼓励开发人员通过多个RESTful应用构建分布式模块化设计，这被称为微服务。
- en: If you have multiple RESTful applications, there is a concern on how to manage
    multiple source code on VCS and how to deploy multiple RESTful servers. However,
    Continuous Integration, and Continuous Delivery automation makes a lower bar to
    build and deploy a multiple RESTful server application easier.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个RESTful应用程序，就会关注如何在VCS上管理多个源代码以及如何部署多个RESTful服务器。然而，持续集成和持续交付自动化使构建和部署多个RESTful服务器应用程序变得更加容易。
- en: Therefore, microservices design is getting popular for web application developers.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，微服务设计对Web应用程序开发人员变得越来越受欢迎。
- en: Microservices
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务
- en: 'Although the name is micro, it is actually heavy enough compared to the applications
    from 1990s or 2000s. It uses full stack of HTTP/SSL server and contains entire
    MVC layers. The microservices design should care about the following topics:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管名称是微服务，但与20世纪90年代或2000年代的应用程序相比，它实际上足够复杂。它使用完整的HTTP/SSL服务器并包含整个MVC层。微服务设计应关注以下主题：
- en: '**Stateless**: This doesn''t store user session to the system, which helps
    to scale out easier.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：这不会将用户会话存储到系统中，这有助于更容易地扩展。'
- en: '**No shared datastore**: The microservice should own the datastore such as
    database. It shouldn''t share with the other application. It helps to encapsulate
    the backend database that is easy to refactor and update the database scheme within
    a single microservice.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有共享数据存储**：微服务应该拥有数据存储，比如数据库。它不应该与其他应用程序共享。这有助于封装后端数据库，使单个微服务内的数据库方案易于重构和更新。'
- en: '**Versioning and compatibility**: The microservice may change and update the
    API but should define a version and it should have backward compatibility. This
    helps to decouple between other microservices and applications.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制和兼容性**：微服务可能会更改和更新API，但应定义一个版本，并且应具有向后兼容性。这有助于解耦其他微服务和应用程序之间的关系。'
- en: '**Integrate CI/CD**: The microservice should adopt CI and CD process to eliminate
    management effort.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成CI/CD**：微服务应采用CI和CD流程来消除管理工作。'
- en: There are some frameworks that can help to build the microservice application
    such as Spring Boot ([https://projects.spring.io/spring-boot/)](https://projects.spring.io/spring-boot/))
    and Flask ([http://flask.pocoo.org)](http://flask.pocoo.org)). However, there
    are a lot of HTTP-based frameworks, so the developer can feel free to try and
    choose any preferred framework or even programming language. This is the beauty
    of the microservice design.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些框架可以帮助构建微服务应用程序，比如Spring Boot ([https://projects.spring.io/spring-boot/)](https://projects.spring.io/spring-boot/))和Flask
    ([http://flask.pocoo.org)](http://flask.pocoo.org))。然而，有许多基于HTTP的框架，因此开发人员可以随意尝试和选择任何喜欢的框架甚至编程语言。这就是微服务设计的美妙之处。
- en: The following diagram is a comparison between monolithic application design
    and microservices design. It indicates that microservice (also MVC) design is
    the same as monolithic, which contains interface layer, business logic layer,
    model layer, and datastore.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是单块应用程序设计和微服务设计的比较。它表明微服务（也是MVC）设计与单块设计相同，包含接口层、业务逻辑层、模型层和数据存储。
- en: 'But the difference is that the application (service) is constructed by multiple
    microservices and that different applications can share the same microservice
    underneath:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 但不同的是，应用程序（服务）由多个微服务构成，不同的应用程序可以共享相同的微服务。
- en: '![](../images/00014.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00014.jpeg)'
- en: The developer can add the necessary microservice and modify an existing microservice
    with the rapid software delivery method that won't affect an existing application
    (service) anymore.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以使用快速软件交付方法添加必要的微服务并修改现有的微服务，而不会再影响现有应用程序（服务）。
- en: It is a breakthrough to an entire software development environment and methodology
    that is getting widely accepted by many developers now.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对整个软件开发环境和方法论的突破，现在得到了许多开发人员的广泛接受。
- en: Although Continuous Integration and Continuous Delivery automation process helps
    to develop and deploy multiple microservices, the number of resources and complexity,
    such as Virtual Machine, OS, library, and disk volume and network can't compare
    with monolithic applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管持续集成和持续交付自动化流程有助于开发和部署多个微服务，但资源数量和复杂性，如虚拟机、操作系统、库和磁盘容量以及网络，无法与单块应用程序相比。
- en: Therefore, there are some tools and roles that can support these large automation
    environments on the cloud.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有一些工具和角色可以支持云上的大型自动化环境。
- en: Automation and tools
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化和工具
- en: As discussed previously, automation is the best practice to achieve rapid software
    delivery and solves the complexity to manage many microservices. However, automation
    tools are not an ordinary IT/infrastructure applications such as **Active Directory**,
    **BIND** (DNS), and **Sendmail** (MTA). In order to achieve automation, there
    is an engineer who should have both developer skill set to write a code, especially
    scripting language, and infrastructure operator skill set such as VM, network,
    and storage.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，自动化是实现快速软件交付的最佳实践，并解决了管理许多微服务的复杂性。然而，自动化工具并不是普通的IT/基础架构应用程序，比如**Active
    Directory**，**BIND**（DNS）和**Sendmail**（MTA）。为了实现自动化，需要一名工程师具备开发人员的技能集，能够编写代码，特别是脚本语言，以及基础设施操作员的技能集，比如虚拟机、网络和存储。
- en: DevOps is a clipped compound of *development* and *operations* that can have
    an ability to make automation processes such as Continuous Integration, Infrastructure
    as code, and Continuous Delivery. DevOps uses some DevOps tools to make these
    automation processes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是*开发*和*运维*的缩合词，可以具有使自动化流程成为可能的能力，例如持续集成、基础设施即代码和持续交付。DevOps使用一些DevOps工具来实现这些自动化流程。
- en: Continuous Integration tool
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成工具
- en: 'One of the popular VCS tools is Git ([https://git-scm.com](https://git-scm.com)).
    The developer uses Git to check-in and check-out the code all the time. There
    are some hosting Git service: GitHub ([https://github.com)](https://github.com))
    and Bitbucket ([https://bitbucket.org](https://bitbucket.org)). It allows you
    to create and save your Git repositories and collaborate with other users. The
    following screenshot is a sample pull request on GitHub:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种流行的版本控制工具是Git（[https://git-scm.com](https://git-scm.com)）。开发人员始终使用Git来签入和签出代码。有一些托管Git服务：GitHub（[https://github.com)](https://github.com)）和Bitbucket（[https://bitbucket.org](https://bitbucket.org)）。它允许您创建和保存您的Git存储库，并与其他用户协作。以下截图是GitHub上的示例拉取请求：
- en: '![](../images/00015.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00015.jpeg)'
- en: The build server has a lot of variation. Jenkins ([https://jenkins.io](https://jenkins.io))
    is one of well-established applications, which is the same as TeamCity ([https://www.jetbrains.com/teamcity/)](https://www.jetbrains.com/teamcity/)).
    In addition to build server, you also have hosted services, the **Software as
    a Service (SaaS)** such as Codeship ([https://codeship.com)](https://codeship.com))
    and Travis CI ([https://travis-ci.org)](https://travis-ci.org)). SaaS has the
    strength to integrate with other SaaS tools.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 构建服务器有很多变化。Jenkins（[https://jenkins.io](https://jenkins.io)）是一个成熟的应用程序之一，与TeamCity（[https://www.jetbrains.com/teamcity/)](https://www.jetbrains.com/teamcity/)）相同。除了构建服务器，您还可以使用托管服务，如Codeship（[https://codeship.com)](https://codeship.com)）和Travis
    CI（[https://travis-ci.org)](https://travis-ci.org)）等**软件即服务（SaaS）**。SaaS具有与其他SaaS工具集成的优势。
- en: Build server is capable of invoking an external command such as a unit test
    program; therefore, build server is a key tool within CI pipeline.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 构建服务器能够调用外部命令，如单元测试程序；因此，构建服务器是CI流水线中的关键工具。
- en: 'The following screenshot is a sample build using Codeship; it checks out the
    code from GitHub and invokes Maven to build (`mvn compile`) and unit testing (`mvn
    test`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是使用Codeship的示例构建；它从GitHub检出代码并调用Maven进行构建（`mvn compile`）和单元测试（`mvn test`）：
- en: '![](../images/00016.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00016.jpeg)'
- en: Continuous Delivery tool
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付工具
- en: There are a variety of configuration management tools such as Puppet ([https://puppet.com](https://puppet.com)),
    Chef ([https://www.chef.io](https://www.chef.io)), and Ansible ([https://www.ansible.com](https://www.ansible.com)),
    which are the most popular in configuration management.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种配置管理工具，如Puppet（[https://puppet.com](https://puppet.com)）、Chef（[https://www.chef.io](https://www.chef.io)）和Ansible（[https://www.ansible.com](https://www.ansible.com)），它们是最受欢迎的配置管理工具。
- en: 'AWS OpsWorks ([https://aws.amazon.com/opsworks/](https://aws.amazon.com/opsworks/))
    provides a managed Chef platform. The following screenshot is a Chef recipe (configuration)
    of installation of Amazon CloudWatch Log agent using AWS OpsWorks. It automates
    to install CloudWatch Log agent when launching an EC2 instance:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks（[https://aws.amazon.com/opsworks/](https://aws.amazon.com/opsworks/)）提供了一个托管的Chef平台。以下截图是使用AWS
    OpsWorks安装Amazon CloudWatch日志代理的Chef配方（配置）。它在启动EC2实例时自动安装CloudWatch日志代理：
- en: '![](../images/00017.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00017.jpeg)'
- en: 'AWS CloudFormation ([https://aws.amazon.com/cloudformation/)](https://aws.amazon.com/cloudformation/))
    helps to achieve infrastructure as code. It supports the automation for AWS operation,
    for example, to perform the following functions:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation ([https://aws.amazon.com/cloudformation/)](https://aws.amazon.com/cloudformation/))
    帮助实现基础架构即代码。它支持AWS操作的自动化，例如执行以下功能：
- en: Creating a VPC.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个VPC。
- en: Creating a subnet on VPC.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VPC上创建一个子网。
- en: Creating an internet gateway on VPC.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VPC上创建一个互联网网关。
- en: Creating a routing table to associate a subnet to the internet gateway.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建路由表以将子网与互联网网关关联。
- en: Creating a security group.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个安全组。
- en: Creating a VM instance.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个VM实例。
- en: Associating a security group to a VM instance.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将安全组与VM实例关联。
- en: 'The configuration of CloudFormation is written by JSON as shown in the following
    screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation的配置是通过JSON编写的，如下截图所示：
- en: '![](../images/00018.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00018.jpeg)'
- en: It supports parameterize, so it is easy to create an additional environment
    with different parameters (for example, VPC and CIDR) using a JSON file with the
    same configuration. In addition, it supports the update operation. So, if there
    is a need to change a part of the infrastructure, there's no need to recreate.
    CloudFormation can identify a delta of configuration and perform only the necessary
    infrastructure operations on behalf of you.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持参数化，因此可以使用具有相同配置的JSON文件轻松创建具有不同参数（例如VPC和CIDR）的附加环境。此外，它支持更新操作。因此，如果需要更改基础架构的某个部分，无需重新创建。CloudFormation可以识别配置的增量并代表您执行必要的基础架构操作。
- en: 'AWS CodeDeploy ([https://aws.amazon.com/codedeploy/)](https://aws.amazon.com/codedeploy/))
    is also a useful automation tool. But focus on software deployment. It allows
    the user to define. The following are some actions onto the YAML file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CodeDeploy ([https://aws.amazon.com/codedeploy/)](https://aws.amazon.com/codedeploy/))
    也是一个有用的自动化工具。但专注于软件部署。它允许用户定义。以下是一些操作到YAML文件上：
- en: Where to download and install.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在哪里下载和安装。
- en: How to stop the application.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何停止应用程序。
- en: How to install the application.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何安装应用程序。
- en: After installation, how to start and configure an application.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，如何启动和配置应用程序。
- en: 'The following screenshot is an example of AWS CodeDeploy configuration file
    `appspec.yml`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是AWS CodeDeploy配置文件`appspec.yml`的示例：
- en: '![](../images/00019.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00019.jpeg)'
- en: Monitoring and logging tool
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和日志工具
- en: Once you start to manage some microservices using a cloud infrastructure, there
    are some monitoring tools that help you to manage your servers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始使用云基础架构管理一些微服务，就会有一些监控工具帮助您管理服务器。
- en: '**Amazon** **CloudWatch** is the built-in monitoring tool on AWS. No agent
    installation is needed; it automatically gathers some metrics from AWS instances
    and visualizes for DevOps. It also supports to set an alert based on the criteria
    that you set. The following screenshot is an Amazon CloudWatch metrics for EC2
    instance:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon** **CloudWatch** 是AWS上内置的监控工具。不需要安装代理；它会自动从AWS实例中收集一些指标并为DevOps可视化。它还支持根据您设置的条件设置警报。以下截图是EC2实例的Amazon
    CloudWatch指标：'
- en: '![](../images/00020.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00020.jpeg)'
- en: Amazon CloudWatch also supports to gather an application log. It requires installing
    an agent on EC2 instance; however, centralized log management is useful when you
    need to start managing multiple microservice instances.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon CloudWatch 还支持收集应用程序日志。它需要在EC2实例上安装代理；然而，当您需要开始管理多个微服务实例时，集中式日志管理是有用的。
- en: ELK is a popular combination of stack that stands for Elasticsearch ([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)),
    Logstash ([https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash)),
    and Kibana ([https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana)).
    Logstash helps to aggregate the application log and transform to JSON format and
    then send to Elasticsearch.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ELK是一种流行的组合堆栈，代表Elasticsearch（[https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch)）、Logstash（[https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash)）和Kibana（[https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana)）。Logstash有助于聚合应用程序日志并转换为JSON格式，然后发送到Elasticsearch。
- en: 'Elasticsearch is a distributed JSON database. Kibana can visualize the data,
    which is stored on Elasticsearch. The following example is a Kibana, which shows
    Nginx access log:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch是一个分布式JSON数据库。Kibana可以可视化存储在Elasticsearch上的数据。以下示例是一个Kibana，显示了Nginx访问日志：
- en: '![](../images/00021.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00021.jpeg)'
- en: Grafana ([https://grafana.com](https://grafana.com)) is another popular visualization
    tool. It used to be connected with time series database such as Graphite ([https://graphiteapp.org)](https://graphiteapp.org))
    or InfluxDB ([https://www.influxdata.com)](https://www.influxdata.com)). Time
    series database is designed to store the data, which is flat and de-normalized
    numeric data such as CPU usage and network traffic. Unlike RDBMS, time series
    database has some optimization to save the data space and faster query for numeric
    data history. Most of DevOps monitoring tools are using time series database in
    the backend.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana（[https://grafana.com](https://grafana.com)）是另一个流行的可视化工具。它曾经与时间序列数据库（如Graphite（[https://graphiteapp.org)](https://graphiteapp.org)）或InfluxDB（[https://www.influxdata.com)](https://www.influxdata.com)）连接。时间序列数据库旨在存储数据，这些数据是扁平化和非规范化的数字数据，如CPU使用率和网络流量。与关系型数据库不同，时间序列数据库对于节省数据空间和更快地查询数字数据历史具有一些优化。大多数DevOps监控工具在后端使用时间序列数据库。
- en: 'The following example is a Grafana that shows **Message Queue Server** statistics:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是一个显示**消息队列服务器**统计信息的Grafana：
- en: '![](../images/00022.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00022.jpeg)'
- en: Communication tool
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沟通工具
- en: 'Once you start to use several DevOps tools as we saw earlier, you need to go
    back and forth to visit several consoles to check whether CI and CD pipelines
    work properly or not. For example, consider the following points:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始像我们之前看到的那样使用多个DevOps工具，您需要来回访问多个控制台，以检查CI和CD流水线是否正常工作。例如，请考虑以下几点：
- en: Merge the source code to GitHub.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源代码合并到GitHub。
- en: Trigger the new build on Jenkins.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins上触发新构建。
- en: Trigger AWS CodeDeploy to deploy the new version of the application.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发AWS CodeDeploy部署应用程序的新版本。
- en: These events need to be tracked by time sequence, and if there are some troubles,
    DevOps needs to discuss it with the developer and QA to handle the cases. However,
    there are some over-communication needs, because DevOps needs to capture the event
    one by one and then explain, probably via e-mail. It is not efficient and in the
    meantime the issue is still going on.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件需要按时间顺序跟踪，如果出现问题，DevOps需要与开发人员和质量保证讨论处理情况。然而，由于DevOps需要逐个捕捉事件然后解释，可能通过电子邮件，因此存在一些过度沟通的需求。这并不高效，同时问题仍在继续。
- en: There are some communication tools that help to integrate these DevOps tools
    and anyone can join to look at the event and comment to each other. Slack ([https://slack.com](https://slack.com))
    and HipChat ([https://www.hipchat.com](https://www.hipchat.com)) are the most
    popular communication tools.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些沟通工具可以帮助集成这些DevOps工具，任何人都可以加入以查看事件并相互评论。Slack（[https://slack.com](https://slack.com)）和HipChat（[https://www.hipchat.com](https://www.hipchat.com)）是最流行的沟通工具。
- en: 'These tools support to integrate to SaaS services so that DevOps can see the
    event on the single chat room. The following screenshot is a Slack chat room that
    integrates with Jenkins:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具支持集成到SaaS服务，以便DevOps可以在单个聊天室中查看事件。以下截图是与Jenkins集成的Slack聊天室：
- en: '![](../images/00023.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00023.jpeg)'
- en: Public cloud
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共云
- en: CI CD and automation work can be achieved easily when used with cloud technology.
    Especially public cloud API helps DevOps to come up with many CI CD tools. Public
    cloud such as Amazon Web Services ([https://aws.amazon.com)](https://aws.amazon.com))
    and Google Cloud Platform ([https://cloud.google.com)](https://cloud.google.com))
    provides some APIs to DevOps to control the cloud infrastructure. DevOps can be
    a relief from capacity and resource limitation, just pay as you go whenever the
    resource is needed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当与云技术一起使用时，CI CD和自动化工作可以很容易实现。特别是公共云API帮助DevOps提出许多CI CD工具。亚马逊云服务（[https://aws.amazon.com)](https://aws.amazon.com)）和谷歌云平台（[https://cloud.google.com)](https://cloud.google.com)）提供一些API给DevOps来控制云基础设施。DevOps可以摆脱容量和资源限制，只需在需要资源时按需付费。
- en: Public cloud will keep growing the same way as software development cycle and
    architecture design; these are best friends and the important key to achieve your
    application/service to success.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 公共云将像软件开发周期和架构设计一样不断增长；它们是最好的朋友，也是实现应用/服务成功的重要关键。
- en: 'The following screenshot is a web console for Amazon Web Services:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是亚马逊云服务的网页控制台：
- en: '![](../images/00024.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00024.jpeg)'
- en: 'Google Cloud Platform also has a web console as shown here:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌云平台也有一个网页控制台，如下所示：
- en: '![](../images/00025.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00025.jpeg)'
- en: Both cloud services have a free trial period that DevOps engineer can use to
    try and understand the benefits of cloud infrastructure.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种云服务都有一个免费试用期，DevOps工程师可以使用它来尝试和了解云基础设施的好处。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed the history of software development methodology,
    programming evolution and DevOps tools. These methodologies and tools support
    quicker software delivery cycle. Microservice design also helps continuous software
    update. However, microservice makes complexity of environment management.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了软件开发方法论的历史，编程演变和DevOps工具。这些方法和工具支持更快的软件交付周期。微服务设计也有助于持续的软件更新。然而，微服务使环境管理变得复杂。
- en: The next chapter will describe the Docker container technology, which helps
    to compose microservice application and manage it in a more efficient and automated
    way.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将描述Docker容器技术，它有助于以更高效和自动化的方式组合微服务应用程序并进行管理。
