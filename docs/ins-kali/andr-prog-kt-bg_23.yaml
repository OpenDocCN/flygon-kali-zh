- en: Chapter 23. Android Sound Effects and the Spinner Widget
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第23章。Android声音效果和Spinner小部件
- en: 'In this chapter, we will study the `SoundPool` class and the different ways
    we can use it depending on whether we just want to play sounds or go further and
    keep track of the sounds we are playing. Then, we will put everything we will
    have learned into action by producing a cool sound demo app, which will also introduce
    us to a new UI widget: the **spinner**.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习`SoundPool`类以及我们可以根据是否只想播放声音或进一步跟踪我们正在播放的声音的不同方式。然后，我们将把我们学到的一切付诸实践，制作一个很酷的声音演示应用程序，这也将向我们介绍一个新的UI小部件：**spinner**。
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Learn how to use the Android `SoundPool` class
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Android的`SoundPool`类
- en: Code a sound-based app using `SpinnerView`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`SpinnerView`编写基于声音的应用程序
- en: Let's get started.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: The SoundPool class
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SoundPool类
- en: 'The `SoundPool` class allows us to hold and manipulate a collection of sound
    effects: literally, a pool of sounds. The class handles everything from decompressing
    a sound file, such as a `.wav` or a `.ogg` file, keeping an identifying reference
    to it via an integer ID, and, of course, playing the sound. When the sound is
    played, it is played in a non-blocking manner (using a thread behind the scenes)
    that does not interfere with the smooth running of our app or our user''s interaction
    with it.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`SoundPool`类允许我们持有和操作一组声音效果：字面上就是一组声音。该类处理从解压缩声音文件（如`.wav`或`.ogg`文件）到通过整数ID保持标识引用，以及当然，播放声音的一切。当声音播放时，它以非阻塞的方式播放（在后台使用线程），不会干扰我们应用程序的流畅运行或用户与应用程序的交互。'
- en: The first thing we need to do is add the sound effects to a folder called `assets`
    in the `main` folder of the game project. We will do this shortly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将声音效果添加到游戏项目的`main`文件夹中名为`assets`的文件夹中。我们很快就会做到这一点。
- en: 'Next, in our Kotlin code, we declare an object of the `SoundPool` type and
    an `Int` identifier for each sound effect we intend to use, as shown in the following
    code. We will also declare another `Int` called `nowPlaying`, which we can use
    to track which sound is currently playing; we will see how we do this shortly:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的Kotlin代码中，我们声明了`SoundPool`类型的对象和每个我们打算使用的声音效果的`Int`标识符，如下面的代码所示。我们还将声明另一个名为`nowPlaying`的`Int`，我们可以用它来跟踪当前正在播放的声音；我们很快就会看到我们如何做到这一点：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we will look at the way we initialize a `SoundPool`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下初始化`SoundPool`的方式。
- en: Initializing SoundPool
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化SoundPool
- en: We will use an `AudioAttributes` object to set the attributes of the pool of
    sound we want.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`AudioAttributes`对象来设置我们想要的声音池的属性。
- en: 'The first block of code uses chaining, and calls four separate functions on
    one object that initializes our `AudioAttributes` object (`audioAttributes`),
    as shown in the following code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码块使用链接，并在一个对象上调用了四个单独的函数，初始化了我们的`AudioAttributes`对象（`audioAttributes`），如下面的代码所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, we used the `Builder` function of this class to initialize
    an `AudioAttributes` instance to let it know that it will be used for user interface
    interaction with `USAGE_ASSISTANCE_SONIFICATION`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了此类的`Builder`函数来初始化一个`AudioAttributes`实例，让它知道它将用于`USAGE_ASSISTANCE_SONIFICATION`的用户界面交互。
- en: We also used `CONTENT_TYPE_SONIFICATION`, which lets the class know that it
    is for responsive sounds, for example, button clicks, a collision, or similar.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了`CONTENT_TYPE_SONIFICATION`，让该类知道它是用于响应声音，例如按钮点击，碰撞或类似的声音。
- en: Now, we can initialize the `SoundPool` (`sp`) itself by passing in the `AudioAttributes`
    object (`audioAttributes`) and the maximum number of simultaneous sounds we are
    likely to want to play.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过传入`AudioAttributes`对象（`audioAttributes`）和我们可能想要播放的同时声音的最大数量来初始化`SoundPool`（`sp`）本身。
- en: The second block of code chains another four functions to initialize `sp`, including
    a call to `setAudioAttributes` that uses the `audioAttributes` object that we
    initialized in the earlier block of chained functions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个代码块将另外四个函数链接到`sp`的初始化中，包括调用`setAudioAttributes`，该函数使用我们在前面链接函数块中初始化的`audioAttributes`对象。
- en: Now, we can go ahead and load up (decompress) the sound files into our `SoundPool`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续加载（解压缩）声音文件到我们的`SoundPool`中。
- en: Loading sound files into memory
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将声音文件加载到内存中
- en: Like our thread control, we are required to wrap our code in `try`-`catch` blocks.
    This makes sense because reading a file can fail for reasons beyond our control,
    but we also do this because we are forced to, as the function that we use throws
    an exception and the code we write will not compile otherwise.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的线程控制一样，我们需要将我们的代码包装在`try`-`catch`块中。这是有道理的，因为读取文件可能因我们无法控制的原因而失败，但我们也这样做是因为我们被迫这样做，因为我们使用的函数会抛出异常，否则我们编写的代码将无法编译。
- en: Inside the `try` block, we declare and initialize objects of the `AssetManager`
    and `AssetFileDescriptor` types.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在`try`块内，我们声明并初始化了`AssetManager`和`AssetFileDescriptor`类型的对象。
- en: The `AssetFileDescriptor` is initialized by using the `openFd` function of the
    `AssetManager` object that decompresses the sound file. We then initialize our
    ID (`idFX1`) at the same time that we load the contents of the `AssetFileDescriptor`
    instance into our `SoundPool`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`AssetFileDescriptor`是通过使用`AssetManager`对象的`openFd`函数来初始化的，该函数解压缩声音文件。然后，我们初始化我们的ID（`idFX1`），同时将`AssetFileDescriptor`实例的内容加载到我们的`SoundPool`中。'
- en: 'The `catch` block simply outputs a message to the console to let us know whether
    something has gone wrong, as shown in the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`catch`块只是简单地在控制台输出一条消息，让我们知道是否出了问题，如下面的代码所示：'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we are ready to make some noise.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备制造一些噪音。
- en: Playing a sound
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 播放声音
- en: At this point, there is a sound effect in our `SoundPool`, and we have an ID
    that we can use to refer to it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的`SoundPool`中有一个音效，并且我们有一个ID可以用来引用它。
- en: 'This is how we play the sound. Note that in the following line of code, we
    initialize the `nowPlaying` variable with the return value from the same function
    that plays the sound. The following code therefore simultaneously plays a sound
    and loads the value of the ID that is being played into `nowPlaying`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们播放声音的方式。请注意，在下面的代码行中，我们使用相同的函数的返回值初始化`nowPlaying`变量。因此，以下代码同时播放声音并将正在播放的ID的值加载到`nowPlaying`中：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is not necessary to store the ID in `nowPlaying` in order to play a sound,
    but it has its uses, as we will now see.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要将ID存储在`nowPlaying`中以播放声音，但是它有其用途，我们现在将看到。
- en: 'The parameters of the `play` function are as follows, from left to right:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`play`函数的参数从左到右如下：'
- en: The ID of the sound effect
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音效果的ID
- en: The left and right speaker volumes
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左右扬声器音量
- en: The priority over other sounds that might be playing/played
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能正在播放/已播放的其他声音的优先级
- en: The number of times the sound is repeated
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音重复的次数
- en: The rate/speed it is played at (1 being the normal rate)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放速率/速度（1为正常速率）
- en: There's just one more thing we need to cover before we make the sound demo app.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们制作声音演示应用程序之前，还有一件事情需要讨论。
- en: Stopping a sound
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 停止声音
- en: 'It is also very easy to stop a sound when it is still playing by using the
    `stop` function, as shown in the following code. Note that there might be more
    than one sound effect playing at any given time, so the `stop` function needs
    the ID of the sound effect that you want to stop:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当仍在播放时，使用`stop`函数停止声音也非常容易，如下面的代码所示。请注意，可能会有多个音效在任何给定时间播放，因此`stop`函数需要您想要停止的音效的ID：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you call `play`, you only need to store the ID of the currently playing
    sound if you want to track it so that you can interact with it later. Now, we
    can make the Sound demo app.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调用`play`时，如果您想要跟踪它以便以后与它交互，您只需要存储当前播放声音的ID。现在，我们可以制作声音演示应用程序。
- en: Sound demo app introducing the Spinner widget
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音演示应用程序介绍Spinner小部件
- en: Of course, with all this talk of sound effects, we need some actual sound files.
    You can make you own with BFXR (as explained in the next section) or use the ones
    supplied. The sound effects for this app are in the download bundle, and can be
    found in the `assets` folder of the `Chapter23/Sound Demo` folder.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，谈到音效，我们需要一些实际的声音文件。您可以使用BFXR制作自己的声音文件（如下一节所述）或使用提供的声音文件。该应用程序的音效包含在下载包中，并且可以在`Chapter23/Sound
    Demo`文件夹的`assets`文件夹中找到。
- en: Making sound effects
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作音效
- en: There is an open source app called BFXR that allows us to make our own sound
    effects. Here is a very fast guide to making your own sound effects using BFXR.
    Grab a free copy from [www.bfxr.net](http://www.bfxr.net).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为BFXR的开源应用程序，允许我们制作自己的音效。以下是使用BFXR制作自己的音效的快速指南。从[www.bfxr.net](http://www.bfxr.net)免费获取一份副本。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the sound effects for the Sound demo app are supplied to you in the
    `Chapter23/assets` folder. You don't have to create your own sound effects unless
    you want to, but it is still worth getting this free software and learning how
    to use it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，声音演示应用程序的音效包含在`Chapter23/assets`文件夹中。除非您愿意，否则您不必创建自己的音效，但是学习如何使用它仍然是值得的。
- en: 'Follow the simple instructions on the website to set it up. Try out a few of
    these things to make cool sound effects:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按照网站上的简单说明进行设置。尝试一些这样的事情来制作酷炫的音效：
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is a seriously condensed tutorial. You can do so much with BFXR. To learn
    more, read the tips on the website at the URL we mentioned previously.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简化的教程。您可以使用BFXR做很多事情。要了解更多，请阅读我们之前提到的网站上的提示。
- en: Run `bfxr`. You should see a screen similar to the one shown in the following
    screenshot:![Making sound effects](img/B12806_23_04.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`bfxr`。您应该会看到一个类似于下面屏幕截图所示的屏幕：![制作音效](img/B12806_23_04.jpg)
- en: Try out all the preset types that generate a random sound of that type, as shown
    in the following screenshot. When you have a sound that is close to what you want,
    move on to the next step:![Making sound effects](img/B12806_23_05.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试所有生成该类型随机声音的预设类型，如下面的屏幕截图所示。当您有一个接近您想要的声音时，继续下一步：![制作音效](img/B12806_23_05.jpg)
- en: Use the sliders to fine-tune the pitch, duration, and other aspects of your
    new sound, as shown in the following screenshot:![Making sound effects](img/B12806_23_06.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用滑块微调音高、持续时间和其他方面的新声音，如下面的屏幕截图所示：![制作音效](img/B12806_23_06.jpg)
- en: Save your sound by clicking the **Export Wav** button, as shown in the following
    screenshot. Despite the text of this button, as we will see, we can also save
    in formats other than `.wav`:![Making sound effects](img/B12806_23_07.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击**导出Wav**按钮保存您的声音，如下面的屏幕截图所示。尽管这个按钮的文本，正如我们将看到的，我们也可以保存为`.wav`以外的格式：![制作音效](img/B12806_23_07.jpg)
- en: Android works very well with sounds in OGG format, so when asked to name your
    file, use the `.ogg` extension at the end of the filename.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Android与OGG格式的声音非常兼容，因此在要求命名文件时，请在文件名的末尾使用`.ogg`扩展名。
- en: Repeat steps 2 to 5 to create three cool sound effects. Name them `fx1.ogg`,
    `fx2.ogg`, and `fx3.ogg`. We use the `.ogg` file format as it is more compressed
    than formats such as WAV.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤2到5以创建三个酷炫的音效。将它们命名为`fx1.ogg`，`fx2.ogg`和`fx3.ogg`。我们使用`.ogg`文件格式，因为它比WAV等格式更压缩。
- en: When you have your sound files ready, we can proceed with the app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的声音文件准备好后，我们可以继续进行应用程序。
- en: Laying out the sound demo UI
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布置声音演示UI
- en: I will describe the parts of the project we are getting used to a little more
    briefly than I did in previous projects. Every time there is a new concept, however,
    I will be sure to explain it in full. I guess by now you will be just fine dragging
    a few widgets onto a `ConstraintLayout` and changing their `text` properties.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我将比之前的项目更简要地描述我们正在适应的项目的部分。但是，每当有新概念时，我一定会详细解释。我想现在您应该可以轻松地将一些小部件拖放到`ConstraintLayout`上并更改它们的`text`属性。
- en: 'Complete the following steps, and if you have any problems, you can copy or
    view the code in the `Chapter23/Sound Demo` folder of the download bundle:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下步骤，如果遇到任何问题，您可以复制或查看下载包的`Chapter23/Sound Demo`文件夹中的代码：
- en: 'Create a new project, call it `Sound Demo`, choose a **Basic Activity**, and
    choose **API 21: Android 5.0 (Lollipop)** on the **Minimum API level** option,
    but leave all the other settings at their defaults and delete the **Hello world!**
    `TextView`.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新项目，称其为`Sound Demo`，选择**基本活动**，并在**最低API级别**选项上选择**API 21：Android 5.0（棒棒糖）**，但将所有其他设置保持默认，并删除**Hello
    world!** `TextView`。
- en: In this order, from top to bottom, and then from left to right, drag a **Spinner**
    from the **Containers** category, a **SeekBar** **(discrete)** from the **Widgets**
    category, and four **Buttons** from the palette onto the layout while arranging
    and resizing them and setting their `text` properties, as shown in the following
    screenshot:![Laying out the sound demo UI](img/B12806_23_01.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照从上到下，然后从左到右的顺序，从**容器**类别中拖动一个**下拉列表**，从**小部件**类别中拖动一个**SeekBar** **（离散）**，并从调色板上拖动四个**按钮**到布局上，同时排列和调整它们的大小，并设置它们的`text`属性，如下图所示：![布局声音演示UI](img/B12806_23_01.jpg)
- en: Click the **Infer Constraints** button.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**推断约束**按钮。
- en: 'Use the following table to set their attributes:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下表格设置它们的属性：
- en: '| Widget | Property to change | Value to set |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Widget | 要更改的属性 | 要设置的值 |'
- en: '| --- | --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Spinner | id | `spinner` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Spinner | id | `spinner` |'
- en: '| Spinner | spinnerMode | `dropdown` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 下拉列表 | spinnerMode | `dropdown` |'
- en: '| Spinner | entries | `@array/spinner_options` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| Spinner | 条目 | `@array/spinner_options` |'
- en: '| SeekBar | id | `seekBar` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| SeekBar | id | `seekBar` |'
- en: '| SeekBar | max | `10` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| SeekBar | max | `10` |'
- en: '| Button (**FX 1**) | id | `btnFX1` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 按钮（**FX 1**） | id | `btnFX1` |'
- en: '| Button (**FX 2**) | id | `btnFX2` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 按钮（**FX 2**） | id | `btnFX2` |'
- en: '| Button (**FX 3**) | id | `btnFX3` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 按钮（**FX 3**） | id | `btnFX3` |'
- en: '| Button (**STOP**) | id | `btnStop` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 按钮（**STOP**） | id | `btnStop` |'
- en: 'Next, add the following highlighted code to the `strings.xml` file in the `values`
    folder. We used this array of String resources, which is named `spinner_options`,
    for the `options` property in the previous step. It will represent the options
    that can be chosen from our spinner:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下突出显示的代码添加到`values`文件夹中的`strings.xml`文件中。我们在上一步中使用了这个名为`spinner_options`的字符串资源数组，用于`options`属性。它将代表可以从我们的下拉列表中选择的选项：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the app now and you will not initially see anything that you haven''t seen
    before. If you click on the spinner, however, then you will see the options from
    our String array called `spinner_options`. We will use the spinner to control
    the number of times a sound effect repeats itself when played, as shown in the
    following image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，最初你不会看到任何之前没有看到的东西。但是，如果你点击下拉列表，你将看到我们称为`spinner_options`的字符串数组中的选项。我们将使用下拉列表来控制播放时音效重复的次数，如下图所示：
- en: '![Laying out the sound demo UI](img/B12806_23_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![布局声音演示UI](img/B12806_23_02.jpg)'
- en: Let's write the Kotlin code to make this app work, including how we interact
    with our spinner.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写Kotlin代码，使这个应用程序工作，包括我们如何与我们的下拉列表交互。
- en: Using your operating system's file browser, go to the `app\src\main` folder
    of the project and add a new folder called `assets`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您操作系统的文件浏览器，转到项目的`app\src\main`文件夹，并添加一个名为`assets`的新文件夹。
- en: There are three sound files ready-made for you in the `Chapter23/Sound Demo/assets`
    folder of the download bundle. Place these three files into the `assets` directory
    you just created or use the ones you created yourself. The important thing is
    that their filenames must be `fx1.ogg`, `fx2.ogg`, and `fx3.ogg`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载包的`Chapter23/Sound Demo/assets`文件夹中为您准备了三个音频文件。将这三个文件放入您刚创建的`assets`目录中，或者使用您自己创建的文件。重要的是它们的文件名必须是`fx1.ogg`，`fx2.ogg`和`fx3.ogg`。
- en: Coding the Sound demo
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写声音演示
- en: 'First, we will change the class declaration so that we can handle interaction
    with all our widgets efficiently. Edit the declaration to implement `View.OnClickListener`,
    as highlighted in the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将更改类声明，以便我们可以高效地处理所有小部件的交互。编辑声明以实现`View.OnClickListener`，如下面的代码中所突出显示的那样：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will add the required `onClick` function shortly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快添加所需的`onClick`函数。
- en: 'Now, we will add some properties for our `SoundPool` instance, sound effect
    IDs, and a `nowPlaying Int` property, as we discussed previously, and we will
    also add a `Float` to hold a value for a volume between 0 (silent) and 1 (full
    volume, based on the current volume of the device). We will also add an `Int`
    property called `repeats`, which, unsurprisingly, holds the value of the number
    of times we will repeat a given sound effect:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为我们的`SoundPool`实例、音效ID和`nowPlaying Int`属性添加一些属性，正如我们之前讨论的，我们还将添加一个`Float`来保存设备当前音量基础上的0（静音）到1（最大音量）之间的音量值。我们还将添加一个名为`repeats`的`Int`属性，它意料之中地保存我们将重复给定音效的次数的值：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, we also added an `init` block where we initialized our
    `SoundPool` instance.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们还添加了一个`init`块，我们在其中初始化了我们的`SoundPool`实例。
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Add the following `import` statements for the previous code to work using your
    preferred method:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法添加以下`import`语句，以使前面的代码工作：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, in the `onCreate` function, we can set a click listener for our buttons
    in the usual way, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`onCreate`函数中，我们可以像往常一样为我们的按钮设置点击监听器，如下所示：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Be sure to add the following `import` to make the preceding code work:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 确保添加以下`import`以使前面的代码工作：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we load each of our sound effects in turn and initialize our IDs with
    a value that matches the related sound effect that we load into the `SoundPool`.
    The whole thing is wrapped in a `try`-`catch` block, as required, as shown in
    the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们依次加载我们的每个音效，并用与我们加载到`SoundPool`中的相关音效匹配的值初始化我们的ID。整个过程都包裹在`try`-`catch`块中，如下面的代码所示，根据需要：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法添加以下`import`语句，以使前面的代码工作：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, we will look at how we are going to handle the `SeekBar`. As you have
    probably come to expect, we will use a lambda. We will use `OnSeekBarChangeListener`
    and override the `onProgressChanged`, `onStartTrackingTouch`, and `onStopTrackingTouch`
    functions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何处理`SeekBar`。正如您可能已经期待的那样，我们将使用lambda。我们将使用`OnSeekBarChangeListener`并重写`onProgressChanged`、`onStartTrackingTouch`和`onStopTrackingTouch`函数。
- en: 'We only need to add code to the `onProgressChanged` function. Within this function,
    we simply change the value of our `volume` variable and then use the `setVolume`
    function on our `SoundPool` object, passing in the currently playing sound effect
    and the volume of the left and right channels of sound, as shown in the following
    code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要向`onProgressChanged`函数添加代码。在这个函数中，我们只需更改`volume`变量的值，然后在我们的`SoundPool`对象上使用`setVolume`函数，传入当前播放的声音效果以及左右声道的音量，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Add the following `import` statements for the previous code using your preferred
    method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法为先前的代码添加以下`import`语句：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After the `SeekBar` comes the `Spinner` and another lambda to handle user interaction.
    We will use the `AdapterView.OnItemSelectedListener` to override the `onItemSelected`
    and `onNothingSelected` functions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`SeekBar`之后是`Spinner`和另一个处理用户交互的lambda。我们将使用`AdapterView.OnItemSelectedListener`来重写`onItemSelected`和`onNothingSelected`函数。'
- en: 'All our code goes in to the `onItemSelected` function, which creates a temporary
    `String` named `temp`, and then uses the `Integer.ValueOf` function to convert
    the `String` in to an `Int`, which we can use to initialize the `repeats` property,
    as shown in the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的代码都放在`onItemSelected`函数中，它创建了一个临时的名为`temp`的`String`，然后使用`Integer.ValueOf`函数将`String`转换为`Int`，我们可以用它来初始化`repeats`属性，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Add the following `import` statements to the previous code using your preferred
    method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的方法将以下`import`语句添加到先前的代码中：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That's everything for the `onCreate` function.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`onCreate`函数的所有内容。
- en: 'Now, implement the `onClick` function, which is required because this class
    implements the `View.OnClickListener` interface. Quite simply, there is a `when`
    option for each button. Note that the return value for each call to `play` is
    stored in `nowPlaying`. When the user presses the **STOP** button, we simply call
    `stop` with the current value of `nowPlaying`, causing the most recently started
    sound effect to stop, as shown in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实现`onClick`函数，这是必需的，因为这个类实现了`View.OnClickListener`接口。非常简单，每个按钮都有一个`when`选项。请注意，对`play`的每次调用的返回值都存储在`nowPlaying`中。当用户按下**STOP**按钮时，我们只需使用`nowPlaying`的当前值调用`stop`，导致最近启动的声音效果停止，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can now run the app. Make sure that the volume on your device is turned up
    if you can't hear anything.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行应用程序。如果听不到任何声音，请确保设备的音量已调高。
- en: Click the appropriate button for the sound effect you want to play. Change the
    volume and the number of times it is repeated and, of course, try stopping it
    with the **STOP** button.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 单击适当的按钮以播放所需的声音效果。更改音量和重复播放次数，当然，尝试使用**STOP**按钮停止它。
- en: Also note that you can repeatedly tap multiple play buttons when a sound effect
    is already playing, and the sounds will be played simultaneously up to the maximum
    number of streams that we set (five).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，当一个声音效果正在播放时，您可以重复点击多个播放按钮，声音将同时播放，直到我们设置的最大流数（五）。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked closely at how to use `SoundPool`, and we used all
    this knowledge to complete the Sound demo app.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仔细研究了如何使用`SoundPool`，并利用了所有这些知识来完成声音演示应用程序。
- en: In the next chapter, we will learn about how to make our apps work with multiple
    different layouts.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使我们的应用程序与多个不同的布局配合工作。
