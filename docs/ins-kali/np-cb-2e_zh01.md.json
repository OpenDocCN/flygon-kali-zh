["```py\n    cd C:\\Python27\\scripts\n    python .\\easy_install-27-script.py pip\n\n    ```", "```py\n        $ su \u2013 aptitude install ipython python-setuptools\n\n        ```", "```py\n        $ su \u2013 yum install ipython python-setuptools-devel\n\n        ```", "```py\n        $ su \u2013 emerge ipython\n\n        ```", "```py\n        $ sudo apt-get install ipython python-setuptools\n\n        ```", "```py\n    $ sudo easy_install ipython pyzmq tornado readline\n\n    ```", "```py\n    $ sudo easy_install pip\n\n    ```", "```py\n    $ sudo pip install ipython pyzmq tornado readline\n\n    ```", "```py\n        $ tar xzf ipython-<version>.tar.gz\n\n        ```", "```py\n        $ git clone https://github.com/ipython/ipython.git\n\n        ```", "```py\n        $ cd ipython\n\n        ```", "```py\n        $ sudo python setup.py install\n\n        ```", "```py\n    $ ipython --pylab\n    Type \"copyright\", \"credits\" or \"license\" for more information.\n\n    IPython 2.4.1 -- An enhanced Interactive Python.\n    ?         -> Introduction and overview of IPython's features.\n    %quickref -> Quick reference.\n    help      -> Python's own help system.\n    object?   -> Details about 'object', use 'object??' for extra details.\n\n    Welcome to pylab, a matplotlib-based Python environment [backend: MacOSX].\n    For more information, type 'help(pylab)'.\n\n    In [1]: quit()\n    quit() or Ctrl + D quits the IPython shell.\n\n    ```", "```py\n    In [1]: %logstart\n    Activating auto-logging. Current session state plus future input saved.\n    Filename       : ipython_log.py\n    Mode           : rotate\n    Output logging : False\n    Raw input log  : False\n    Timestamping   : False\n    State          : active\n\n    ```", "```py\n    In [9]: %logoff\n    Switching logging OFF\n\n    ```", "```py\n    In [1]: !date\n\n    ```", "```py\n    In [2]: thedate = !date\n    In [3]: thedate\n\n    ```", "```py\n    In [1]: a = 2 + 2\n\n    In [2]: a\n    Out[2]: 4\n\n    In [3]: %hist\n    a = 2 + 2\n    a\n    %hist\n\n    ```", "```py\n    In [5]: %hist -g a = 2\n     1: a = 2 + 2\n\n    ```", "```py\n    In [3]: arange?\n\n    ```", "```py\n    $ sudo apt-get install python-matplotlib\n\n    ```", "```py\n        $ su - yum install python-matplotlib\n\n        ```", "```py\n    $ git clone git://github.com/matplotlib/matplotlib.git\n\n    ```", "```py\n    $ cd matplotlib\n    $ sudo python setup.py install\n\n    ```", "```py\n    $ ipython notebook\n\n    [NotebookApp] Using existing profile dir: u'/Users/ivanidris/.ipython/profile_default'\n    [NotebookApp] The IPython Notebook is running at: http://127.0.0.1:8888\n    [NotebookApp] Use Control-C to stop this server and shut down all kernels.\n\n    ```", "```py\n    $ ipython notebook --pylab\n\n    ```", "```py\n    $ ipython notebook --pylab inline\n\n    ```", "```py\n    {\n     \"metadata\": {\n      \"name\": \"Untitled1\"\n     }, \n     \"nbformat\": 2, \n     \"worksheets\": [\n      {\n        \"cells\": [\n        {\n          \"cell_type\": \"code\", \n          \"collapsed\": false, \n          \"input\": [\n            \"plot(sinc(a))\"\n          ], \n          \"language\": \"python\", \n          \"outputs\": [\n          {\n            \"output_type\": \"pyout\", \n            \"prompt_number\": 3, \n            \"text\": [\n              \"[<matplotlib.lines.Line2D at 0x103d9c690>]\"\n            ]\n          }, \n          {\n            \"output_type\": \"display_data\", \n            \"png\": \"iVBORw0KGgoAAAANSUhEUgAAAXkAAAD9CAYAAABZVQdHAAAABHNCSVQICAgIf...\n              mgkAAAAASUVORK5CYII=\\n\"\n          }\n          ], \n          \"prompt_number\": 3\n        }\n        ]\n      }\n      ]\n    }\n    ```", "```py\n% load vectorsum.py\n\n```", "```py\n    In [1]: from IPython.lib import passwd\n\n    In [2]: passwd()\n    Enter password: \n    Verify password:\n    Out[2]: 'sha1:0e422dfccef2:84cfbcbb3ef95872fb8e23be3999c123f862d856'\n\n    ```", "```py\n    $ openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem\n    Generating a 1024 bit RSA private key\n    ......++++++\n    ........................++++++\n    writing new private key to 'mycert.pem'\n    -----\n    You are about to be asked to enter information that will be incorporated\n    into your certificate request.\n    What you are about to enter is what is called a Distinguished Name or a DN.\n    There are quite a few fields but you can leave some blank\n    For some fields there will be a default value,\n    If you enter '.', the field will be left blank.\n    -----\n    Country Name (2 letter code) [AU]:\n    State or Province Name (full name) [Some-State]:\n    Locality Name (eg, city) []:\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:\n    Organizational Unit Name (eg, section) []:\n    Common Name (eg, YOUR name) []:\n    Email Address []:\n\n    ```", "```py\n    $ man openssl\n\n    ```", "```py\n    $ ipython profile create nbserver\n\n    ```", "```py\n    c.NotebookApp.certfile = u'/absolute/path/to/your/certificate'\n    c.NotebookApp.password = u'sha1:b...your password'\n    c.NotebookApp.port = 9999\n\n    ```", "```py\n    $ ipython notebook --profile=nbserver\n    [NotebookApp] Using existing profile dir: u'/Users/ivanidris/.ipython/profile_nbserver'\n    [NotebookApp] The IPython Notebook is running at: https://127.0.0.1:9999\n    [NotebookApp] Use Control-C to stop this server and shut down all kernels.\n\n    ```", "```py\n$ ipython profile list\n\nAvailable profiles in IPython:\n cluster\n math\n pysh\n python3\n\n The first request for a bundled profile will copy it\n into your IPython directory (/Users/ivanidris/.ipython),\n where you can customize it.\n\nAvailable profiles in /Users/ivanidris/.ipython:\n default\n nbserver\n sh\n\n```", "```py\n$ sudo easy_install sympy\n$ sudo pip install sympy\n\n```", "```py\n    c = get_config()\n    app = c.InteractiveShellApp\n\n    # This can be used at any point in a config file to load a sub config\n    # and merge it into the current one.\n    load_subconfig('ipython_config.py', profile='default')\n\n    lines = \"\"\"\n    from __future__ import division\n    from sympy import *\n    x, y, z, t = symbols('x y z t')\n    k, m, n = symbols('k m n', integer=True)\n    f, g, h = symbols('f g h', cls=Function)\n    \"\"\"\n\n    # You have to make sure that attributes that are containers already\n    # exist before using them.  Simple assigning a new list will override\n    # all previous values.\n\n    if hasattr(app, 'exec_lines'):\n     app.exec_lines.append(lines)\n    else:\n     app.exec_lines = [lines]\n\n    # Load the sympy_printing extension to enable nice printing of sympy expr's.\n    if hasattr(app, 'extensions'):\n     app.extensions.append('sympyprinting')\n    else:\n     app.extensions = ['sympyprinting']\n\n    ```", "```py\n    $ ipython --profile=sympy\n\n    ```"]