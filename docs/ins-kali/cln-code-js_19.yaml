- en: Tools for Cleaner Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更干净代码的工具
- en: The tools we use have a massive impact on the habits we fall into when writing
    code. When coding, just as in life, we want to gather good habits and avoid bad
    habits. An example of a good habit would be writing syntactically valid JavaScript.
    To help us enforce this good habit, we can use a linter to inform us when our
    code is invalid. We should consider each tool in this way. What good habit does
    it inspire? What bad habit does it discourage?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的工具对我们编写代码时养成的习惯有很大影响。在编码时，就像生活中一样，我们希望养成良好的习惯，避免坏习惯。良好习惯的一个例子是编写符合语法的 JavaScript。为了帮助我们强制执行这个良好习惯，我们可以使用代码检查工具在我们的代码无效时通知我们。我们应该以这种方式考虑每个工具。它激发了什么良好习惯？它又抑制了什么坏习惯？
- en: 'If we recall our original tenets of clean code (*R.E.M.U*) we can observe how
    various tools help us abide by them. Here''s just a small collection of tools
    that would be of service to the four tenets:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下我们原始的清晰代码原则（*R.E.M.U*），我们可以看到各种工具如何帮助我们遵守这些原则。以下是一小部分对这四个原则有帮助的工具：
- en: '**Reliability**: Testing tools, user feedback, error loggers, analytics, linters,
    static typing tools, and languages'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：测试工具、用户反馈、错误记录器、分析数据、代码检查工具、静态类型工具和语言'
- en: '**Efficiency**: Performance measurement, analytics, user feedback, UX reviews,
    ecological costing (for example, *carbon footprint*)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：性能测量、分析数据、用户反馈、用户体验评估、生态成本（例如*碳足迹*）'
- en: '**Maintainability**: Formatters, linters, documentation generators, automated
    builds, and continuous integration'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：格式化程序、代码检查工具、文档生成器、自动化构建和持续集成'
- en: '**Usability**: Analytics, user feedback, documentation generators, accessibility
    checkers, UX reviews, and *hallway testing*'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：分析数据、用户反馈、文档生成器、可访问性检查器、用户体验评估和*走廊测试*'
- en: 'Tools that inspire good habits work by augmenting our *feedback loops*. A feedback
    loop is whatever eventually makes you realize that you need to make a change.
    Perhaps you introduced a bug that caused an error to be logged. Perhaps your implementation
    is unclear and a colleague complained. If tools can catch these situations early,
    then it can speed up our feedback loop, enabling us to work faster and to a higher
    level of quality. In the following diagram, we illustrate **Our Feedback Loop** and
    how it is fed by information from tools at each stage of development:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 激发良好习惯的工具通过增强我们的*反馈循环*。反馈循环是最终让您意识到需要做出改变的任何事物。也许您引入了一个导致错误日志的错误。也许您的实现不清晰，同事抱怨了。如果工具能及早捕捉到这些情况，那么它可以加快我们的反馈循环，使我们能够更快地工作并达到更高的质量水平。在下图中，我们说明了**我们的反馈循环**，以及它是如何在开发的每个阶段接收来自工具的信息的：
- en: '![](assets/ab23a961-0c64-451d-9f3d-cbf75064f16b.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab23a961-0c64-451d-9f3d-cbf75064f16b.png)'
- en: Throughout our stages of development, there are many avenues of feedback. There
    are linters to tell us when our syntax is problematic, static type checkers to
    confirm we are using types correctly, and tests to confirm our expectations. Even
    after deployment, this feedback continues. We have error logs that indicate failure,
    analytics that tell us about user behavior, and feedback from end users and other
    individuals informing us about breakages or areas for improvement.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的开发阶段，有许多反馈渠道。有代码检查工具告诉我们语法有问题，静态类型检查器确认我们正确使用类型，测试确认我们的期望。即使在部署后，这种反馈仍在继续。我们有错误日志指示失败，分析数据告诉我们用户行为，以及来自最终用户和其他个人的反馈，告诉我们有关故障或改进的领域。
- en: Different projects will operate in different ways. You may be a solo programmer
    or 1 of 100 programmers dedicated to a specific project. Regardless, there will
    likely be various stages of development, and the possibility of feedback exists
    at every stage. Tooling and communication is vital to an effective feedback loop.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的项目将以不同的方式运作。您可能是一个独立的程序员，或者是专门从事特定项目的 100 名程序员之一。无论如何，可能会有各种开发阶段，并且在每个阶段都存在反馈的可能性。工具和沟通对于有效的反馈循环至关重要。
- en: 'In this chapter, we''ll be covering a small selection of the tools that can
    help us in building good habits and a positive feedback loop. Specifically, we''re
    going to cover the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一小部分可以帮助我们养成良好习惯和积极反馈循环的工具。具体来说，我们将介绍以下内容：
- en: Linters and formatters
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码检查和格式化工具
- en: Static typing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态类型
- en: E2E testing tools
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端测试工具
- en: Automated builds and CI
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建和持续集成
- en: Linters and formatters
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检查和格式化工具
- en: A **linter** is a tool used to analyze code and discover bugs, syntax errors,
    stylistic inconsistencies, and suspicious constructs. Popular linters for JavaScript
    include *ESLint*, *JSLint*, and *JSHint*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码检查工具**是一种用于分析代码并发现错误、语法错误、风格不一致和可疑结构的工具。JavaScript 的流行代码检查工具包括 *ESLint*、*JSLint*
    和 *JSHint*。'
- en: 'Most linters allow us to specify what types of bugs or inconsistencies we would
    like to look for. *ESLint*, for example, will allow us to specify a global configuration
    for a given code base in a root-level `.eslintrc` (or `.eslintrc.json`) file.
    In it, we can specify the version of the language we are using, which features
    we are using, and which linting rules we would like to be enforced. Here''s an
    example `.eslintrc.json` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码检查工具允许我们指定我们想要查找的错误或不一致的类型。例如，*ESLint* 将允许我们为给定代码库指定全局配置在根级别的 `.eslintrc`（或
    `.eslintrc.json`）文件中。在其中，我们可以指定我们正在使用的语言版本，我们正在使用的功能，以及我们想要强制执行的代码检查规则。以下是一个示例
    `.eslintrc.json` 文件：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s an explanation of our configuration:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们配置的解释：
- en: '`ecmaVersion`: Here, we are specifying that our code base is written in the
    ECMAScript 6 (2016) version of JavaScript. This means that the linter will not
    complain if it sees you are using ES6 features. It will, however, complain if
    you use ES7/8 features, as you would expect.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ecmaVersion`：在这里，我们指定我们的代码基于 ECMAScript 6（2016）版本的 JavaScript 编写。这意味着如果 linter
    发现您正在使用 ES6 特性，它不会抱怨。但是，如果您使用 ES7/8 特性，它会抱怨，这是您所期望的。'
- en: '`sourceType`: This specifies that we are using ES modules (imports and exports).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sourceType`：这指定了我们正在使用 ES 模块（导入和导出）。'
- en: '`ecmaFeatures`: This informs ESLint that we wish to use JSX, a syntax extension
    that allows us to specify XML-like hierarchies (this is used considerably in component
    frameworks like React).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ecmaFeatures`: 这告诉 ESLint 我们希望使用 JSX，这是一种允许我们指定类似 XML 的层次结构的语法扩展（这在像 React
    这样的组件框架中被广泛使用）。'
- en: '`extends`: Here, we specify a default ruleset of `"eslint:recommended"`, which
    means that we''re happy for ESLint to enforce a recommended set of rules. Without
    this, ESLint would only enforce the rules we specify.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extends`: 在这里，我们指定了一个默认的规则集`"eslint:recommended"`，这意味着我们愿意让 ESLint 强制执行一组推荐的规则。如果没有这个，ESLint
    只会执行我们指定的规则。'
- en: '`rules`: Lastly, we are configuring the specific rules we wish to set on top
    of the recommended configuration:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rules`: 最后，我们正在配置我们希望在推荐配置之上设置的具体规则：'
- en: '`semi`: This rule relates to semicolons; in our override, we are specifying
    that we wish for an error to be produced in the case of a missing semicolon in
    case of a mere warning.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`semi`: 这个规则涉及到分号；在我们的覆盖中，我们指定如果缺少分号则产生错误而不是仅仅警告。'
- en: '`quotes`: This rule relates to quotes and specifies that we wish for single
    quotes to be enforced, meaning that the linter will warn us if it sees double
    quotes in our code.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quotes`: 这个规则涉及到引号，并指定我们希望强制使用单引号，这意味着 linter 会在我们的代码中看到双引号时发出警告。'
- en: 'We can try our configuration out by writing a piece of code that intentionally
    breaks the rules:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过编写一个故意违反规则的代码片段来尝试我们的配置：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we install and run ESLint on this code (within bash: `> eslint example.js`),
    then we''ll receive the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这段代码上安装并运行 ESLint（在 bash 中：`> eslint example.js`），那么我们将收到以下内容：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This details all of the errors in the syntax according to our configured rules.
    As you can see, it details the rule that was broken and the line the problem was
    found on. ESLint and other linting tools can be incredibly helpful in finding
    hard-to-spot syntax errors, some of which may, if left untouched, lead to difficult
    to debug functional bugs in the future. Linting also gives the code more consistency,
    enabling programmers to feel a sense of familiarity and endure less cognitive
    burden, as would be the case in a code base with many different syntax conventions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这详细说明了根据我们配置的规则的所有语法错误。正如你所看到的，它详细说明了被违反的规则以及发现问题的行。ESLint 和其他 linting 工具在发现难以发现的语法错误方面非常有帮助，其中一些如果不加以处理，可能会导致将来难以调试的功能性错误。Linting
    还使代码更加一致，使程序员感到熟悉，并减少认知负担，就像在一个具有许多不同语法约定的代码库中一样。
- en: ESLint also includes a facility for fixing a subset of these syntax errors via
    its `--fix` option, although you may have noticed that only a subset of errors
    can be fixed this way. Others will need to be done manually. Thankfully, though,
    there are a number of more advanced tools available to help us out. Formatters,
    such as **Prettier** and **Standard JS**, will take our syntactic preferences
    and make active changes to our code to ensure that it remains consistent. This
    means that programmers don't have to burden themselves with specific syntactic
    rules, or endlessly change code in response to linters. They can write code in
    the manner they desire, and when they're done, the formatter will change the code
    to conform to the agreed upon syntax conventions or warn the programmer if there
    is a severe or invalid syntax error.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ESLint 还包括一个通过其`--fix`选项修复这些语法错误子集的功能，尽管您可能已经注意到只有一部分错误可以通过这种方式修复。其他错误需要手动修复。不过，值得庆幸的是，有许多更高级的工具可用来帮助我们。格式化工具，如
    **Prettier** 和 **Standard JS**，将采用我们的语法偏好并对我们的代码进行积极的更改，以确保它保持一致。这意味着程序员不必为特定的语法规则负担，也不必无休止地更改代码以响应
    linters。他们可以按照自己的意愿编写代码，完成后，格式化程序将更改代码以符合约定的语法约定，或者在出现严重或无效的语法错误时警告程序员。
- en: 'To illustrate, let''s run Prettier with its default configuration on a simple
    piece of code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，让我们用默认配置在一个简单的代码片段上运行 Prettier：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When running the preceding code through Prettier, we receive the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Prettier 上运行上述代码时，我们会收到以下内容：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we can see, Prettier has removed and changed some of our syntactic habits
    to its configured conventions. Namely, it has exchanged single quotes for double
    quotes, it has removed redundant parentheses, and it's made significant changes
    to the whitespace. The magic of formatters is that they take the pain away from
    the programmer. They do the work of correcting minor syntactic habits, leaving
    the programmer free to pursue more important work. The general trend in the industry
    is away from simple linters and toward more fully featured tools that combine
    both linting and formatting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Prettier 已经删除并更改了我们的语法习惯以符合其配置的约定。换句话说，它已经将单引号换成双引号，删除了多余的括号，并对空格进行了重大更改。格式化工具的魔力在于它们帮助程序员摆脱痛苦。它们会纠正一些微小的语法习惯，让程序员可以自由地进行更重要的工作。行业的一般趋势是远离简单的
    linters，转向更全面的工具，将 linting 和格式化结合在一起。
- en: The decision over what syntactic conventions to abide by is configurable and
    entirely up to you. There are many strongly held opinions about this, but the
    most important tenet to uphold is consistency. I personally prefer single quotes
    to double quotes, for example, but if I'm working in a code base where double
    quotes are the established convention, then I'll have no qualms about changing
    my habits. Most of the time, syntactic preferences are just subjective and inherited
    norms, so what's important is not which norm we use, but whether or not we all
    abide by it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 遵守哪种语法约定的决定是可配置的，完全取决于你。关于这个问题有很多坚定的观点，但最重要的原则是一致性。例如，我个人更喜欢单引号而不是双引号，但如果我在一个已经建立了双引号约定的代码库中工作，那么我会毫不犹豫地改变我的习惯。大多数时候，语法偏好只是主观的和传统的规范，所以重要的不是我们使用哪种规范，而是我们是否都遵守它。
- en: Many of the norms we have grown used to within the JavaScript language have
    been guided by its dynamically typed nature. For example, we have become used
    to having to check manually for specific types in order to provide meaningful
    warnings or errors within our interfaces. For many, these norms have been challenging
    to adapt to, and they have grown desperate for a higher level of confidence in
    the types they use. Thus, people have brought various static typing tools and
    language extensions to JavaScript. We'll be exploring these next, and while we
    do, take note of how such static typing tools might change or improve your personal
    development feedback loop.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经习惯了JavaScript语言中的许多规范，这些规范是由其动态类型的特性引导的。例如，我们已经习惯了必须手动检查特定类型，以便在接口中提供有意义的警告或错误。对许多人来说，这些规范很难适应，他们渴望对他们使用的类型有更高的信心。因此，人们将各种静态类型工具和语言扩展引入了JavaScript。接下来我们将探讨这些内容，同时注意这些静态类型工具如何改变或改进您的个人开发反馈循环。
- en: Static typing
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态类型
- en: As we've explored at length, JavaScript is a dynamically typed language. If
    wielded carefully, this can be a great benefit, allowing you to work quickly and
    permit a level of flexibility in your code that enables colleagues to work with
    it less painfully. However, there are situations in which dynamic types can create
    the possibility of bugs and needless cognitive burdens for programmers. Statically
    typed compiled languages, such as Java or Scala, force the programmer to specify
    the types they are expecting at the point of declaration (or infer the type by
    how it is used, prior to execution).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们长时间探讨的那样，JavaScript是一种动态类型语言。如果小心使用，这可能是一个巨大的好处，可以让您快速工作，并允许您的代码具有一定的灵活性，使同事能够更轻松地使用它。然而，动态类型可能会在某些情况下导致程序员的认知负担和不必要的bug可能性。静态类型编译语言，如Java或Scala，强制程序员在声明的时候指定他们期望的类型（或者根据使用方式推断类型，以便在执行之前）。
- en: 'Static typing has the following potential benefits:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 静态类型具有以下潜在的好处：
- en: The programmer can **have confidence in the types** they'll be dealing with,
    and thus, can make a number of safe assumptions about the capabilities and characteristics
    of their values, easing development.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员可以**对他们将要处理的类型有信心**，因此可以对他们的值的能力和特性做出一些安全的假设，从而简化开发。
- en: The code can be statically type-checked prior to execution, meaning that **potential
    bugs can be caught** easily and are not liable to specific (and accidental) arrangements
    of types.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码可以在执行之前进行静态类型检查，这意味着**潜在的bug可以轻松地被捕捉到**，并且不会受到特定（和意外的）类型排列的影响。
- en: The maintainers and users of the code (or its APIs) have a **clearer set of
    expectations** to operate under and are not left guessing what may or may not
    work. The specification of types can itself serve as a sort of documentation.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的维护者和用户（或其API）有一个**更清晰的期望集**，并且不会猜测可能会或可能不会起作用。类型的规范本身可以作为一种文档。
- en: 'Even though JavaScript is dynamically typed, there have been efforts to give
    JavaScript programmers the benefits of a static typing system. Two pertinent examples
    of this are Flow and TypeScript:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript是动态类型的，但已经有努力为JavaScript程序员提供静态类型系统的好处。其中两个相关的例子是Flow和TypeScript：
- en: '**Flow** ([https://flow.org/](https://flow.org/)) is a static type checker
    and language extension to JavaScript. It allows you to annotate types using its
    own specific syntax, although it isn''t considered a distinct language of its
    own.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flow** ([https://flow.org/](https://flow.org/)) 是JavaScript的静态类型检查器和语言扩展。它允许您使用自己特定的语法注释类型，尽管它不被认为是一种独立的语言。'
- en: '**TypeScript** ([http://www.typescriptlang.org/](http://www.typescriptlang.org/))
    is a superset language of JavaScript, developed by Microsoft (meaning that valid
    JavaScript is always valid TypeScript). It is a language unto itself, with its
    own syntax for type annotations.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeScript** ([http://www.typescriptlang.org/](http://www.typescriptlang.org/))
    是由微软开发的JavaScript的超集语言（这意味着有效的JavaScript始终是有效的TypeScript）。它是一种独立的语言，具有自己的类型注释语法。'
- en: 'Both Flow and TypeScript allow you to declare the types that you are declaring,
    either alongside variable declarations or parameter declarations within functions.
    Here''s an example of declaring a function that accepts `productName` (`string`)
    and `rating` (`number`):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Flow和TypeScript都允许您声明正在声明的类型，可以是变量声明或函数内的参数声明。以下是一个接受`productName`（`string`）和`rating`（`number`）的函数声明的示例：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Both Flow and TypeScript generally allow the annotation of types following
    a declaration identifier in the `IDENTIFIER: TYPE` form, where `TYPE` can be any
    of `number`, `string`, `boolean`, and many more. They do differ in many ways though,
    so it''s important to investigate both. Naturally, both Flow and TypeScript, and
    most other static type checking technologies for JavaScript, will require a *build*
    or *compilation* step in order to work, as they include syntax extensions.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'Flow和TypeScript通常允许在声明标识符后注释类型，形式为`IDENTIFIER: TYPE`，其中`TYPE`可以是`number`、`string`、`boolean`等。但它们在许多方面有所不同，因此重要的是要对两者进行调查。当然，Flow和TypeScript以及JavaScript的大多数其他静态类型检查技术都需要*构建*或*编译*步骤才能工作，因为它们包括语法扩展。'
- en: Be aware that static typing is not an elixir. The cleanliness of our code is
    not only constrained to its ability to avoid type-related bugs and difficulties.
    We have to *zoom out*, in our perspective, and remember to consider the user and
    what they're trying to achieve via our software. It's quite common to see passionate
    programmers get lost in the minutiae of their syntax but forgo the bigger picture.
    So, to change tack slightly, we'll now explore *E2E testing tools*, as E2E testing
    can be as significant in its effect on the quality of a code base as the typing
    system or syntax we use, if not more!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，静态类型并不是一种灵丹妙药。我们代码的整洁程度不仅仅限于其避免与类型相关的错误和困难的能力。我们必须*放大*我们的视角，记得考虑用户以及他们通过我们的软件试图实现的目标。很常见看到热情的程序员迷失在他们的语法细节中，但忽略了更大的画面。因此，为了稍微改变方向，我们现在将探讨*端到端测试工具*，因为端到端测试对代码质量的影响可能与我们使用的类型系统或语法一样重要，甚至更重要！
- en: E2E testing tools
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端到端测试工具
- en: In the last few chapters, we explored the benefits and types of testing, including
    an overview of E2E testing. The testing libraries we typically use to build test
    suites and make assertions rarely include E2E testing facilities, so it's necessary
    for us to find our own tooling for this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们探讨了测试的好处和类型，包括端到端测试的概述。我们通常用于构建测试套件和进行断言的测试库很少包括端到端测试功能，因此我们需要为此找到自己的工具。
- en: The aim of an E2E test is to emulate user behavior upon our application and
    to make assertions about the application's state at various stages of user interaction.
    Typically, an E2E test will test a specific user flow, such as *user can register
    new account* or *user can log in and buy product*. Whether we're using JavaScript
    on the server side or the client side, if we're building a web application, it
    will be hugely beneficial to carry out such testing. To do so, we need to use
    a tool that can artificially create the user environment. In the case of a web
    application, the user environment is a browser. And thankfully, there are a large
    number of tools that can either emulate or run real (or *headles**s*) browsers
    that we can access and control via JavaScript.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试的目的是模拟用户在我们的应用程序上的行为，并在用户交互的各个阶段对应用程序的状态进行断言。通常，端到端测试将测试特定的用户流程，例如*用户可以注册新帐户*或*用户可以登录并购买产品*。无论我们是在服务器端还是客户端使用JavaScript，如果我们正在构建一个网络应用程序，进行这样的测试将是非常有益的。为此，我们需要使用一个可以人为创建用户环境的工具。在网络应用程序的情况下，用户环境是浏览器。幸运的是，有大量的工具可以模拟或运行真实（或*无头**s*）浏览器，我们可以通过JavaScript访问和控制。
- en: A **headless** browser is a web browser without a graphic user interface. Imagine
    the Chrome or Firefox browser, but without any visible UI, entirely controllable
    via a CLI or a JavaScript library. Headless browsers allow us to load up our web
    application and make assertions about it without having to pointlessly expend
    hardware capabilities on rendering a GUI (meaning we can run such tests on our
    own computers or *in the cloud* as part of our *continuous integration/deployment* process).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**无头**浏览器是一个没有图形用户界面的网络浏览器。想象一下Chrome或Firefox浏览器，但没有任何可见的UI，完全可以通过CLI或JavaScript库进行控制。无头浏览器允许我们加载我们的网络应用程序并对其进行断言，而无需无谓地消耗硬件能力来渲染GUI（这意味着我们可以在我们自己的计算机上或*在云端*作为我们*持续集成/部署*过程的一部分来运行这些测试）。'
- en: 'An example of such a tool is **Puppeteer**, a Node.js library that provides
    an API to control Chrome (or Chromium). It can run either headless or non-headless.
    Here''s an example in which we open a page and log its `<title>`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个工具的例子是**Puppeteer**，这是一个Node.js库，提供了一个控制Chrome（或Chromium）的API。它可以在无头或非无头模式下运行。以下是一个示例，我们在其中打开一个页面并记录其`<title>`：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Puppeteer provides a high-level API that allows the creation and navigation
    of browser pages. Within this context, using a `page` instance, we can then evaluate
    specific client-side JavaScript via the `evaluate()` method. Any code passed to
    this method will be run within the context of the document, and will, therefore,
    have access to the DOM and other browser APIs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Puppeteer提供了一个高级API，允许创建和导航浏览器页面。在这个上下文中，使用`page`实例，我们可以通过`evaluate()`方法评估特定的客户端JavaScript。传递给此方法的任何代码将在文档的上下文中运行，并且因此可以访问DOM和其他浏览器API。
- en: This is how we're able to retrieve the `textContent` property of the `<title>`
    element. You'll have noticed that much of Puppeteer's API is asynchronous, meaning
    that we have to either use `Promise#then` or `await` to wait for each instruction
    to complete. This may be bothersome, but considering the fact that the code is
    running and controlling an entire web browser, it makes sense that some tasks
    are asynchronous.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何能够检索`<title>`元素的`textContent`属性。您可能已经注意到，Puppeteer的API大部分是异步的，这意味着我们必须使用`Promise#then`或`await`来等待每个指令的完成。这可能有些麻烦，但考虑到代码正在运行和控制整个网络浏览器，一些任务是异步的是有道理的。
- en: 'E2E testing is rarely embraced because it is perceived as being difficult.
    While that perception was accurate at one point, it is no longer so. With APIs
    like that of Puppeteer, we can easily launch our web application, trigger specific
    actions, and make assertions about the results. Here''s an example of using Jest
    (a testing library) with Puppeteer to make an assertion about the text within
    the `<title>` element at `https://google.com`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试很少被接受，因为它被认为很难。虽然这种看法曾经是准确的，但现在不再是这样。有了像Puppeteer这样的API，我们可以轻松地启动我们的网络应用程序，触发特定的操作，并对结果进行断言。以下是使用Jest（一个测试库）与Puppeteer对`https://google.com`的`<title>`元素中的文本进行断言的示例：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Fetching a page, parsing its HTML, and producing a DOM that we can make assertions
    about is a very complex process. Browsers are incredibly effective at doing this,
    so it makes sense to utilize them in our testing process. After all, it is whatever
    the browser sees that will dictate what the end user sees. E2E tests give us realistic
    insights into potential breakages, and it's no longer hard to write or run them.
    They are immensely powerful for the clean coder especially, as they let us see
    the reliability of our code from a more user-oriented perspective.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 获取页面、解析其HTML，并生成我们可以进行断言的DOM是一个非常复杂的过程。浏览器在这方面非常有效，因此在我们的测试过程中利用它们是有意义的。毕竟，决定最终用户看到的是浏览器看到的内容。端到端测试为我们提供了对潜在故障的真实见解，现在编写或运行它们也不再困难。对于干净的代码编写者来说，它们尤其强大，因为它们让我们从更加用户导向的角度看到我们代码的可靠性。
- en: As with many of the tools we've explored, E2E testing may be best integrated
    into our development experience via automation. We'll now explore this in brief.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们探索过的许多工具一样，端到端测试可能最好通过自动化集成到我们的开发体验中。我们现在简要探讨一下这一点。
- en: Automated builds and CI
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化构建和持续集成
- en: 'As we have highlighted, there are a large number of tools available to help
    us write clean code. These tools can be activated manually, usually via a **command-line
    interface** (**CLI**) or sometimes within our IDEs. Usually, however, it is prudent
    to have them run as part of our various stages of development. If using source
    control, then this process will include a *commitment* or *staging* process and
    then a *pushing* or *checking-in *process. These events, when combined with the
    simple act of making changes to files, represent the three vital development stages
    that our tooling can use to generate their outputs:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所强调的，有大量的工具可用于帮助我们编写干净的代码。这些工具通常可以通过**命令行界面**（**CLI**）手动激活，有时也可以在我们的集成开发环境中激活。然而，通常情况下，将它们作为我们开发的各个阶段的一部分运行是明智的。如果使用源代码控制，那么这个过程将包括*提交*或*暂存*过程，然后是*推送*或*检入*过程。这些事件，与简单地对文件进行更改相结合，代表了我们的工具可以用来生成它们的输出的三个重要开发阶段。
- en: '**Upon changes to files**: It is typical for JavaScript (or CSS) transpilation
    or compilation to occur at this stage. For example, if you''re writing JS that
    includes the JSX language extension (React), then you''re likely relying on *Babel*
    to constantly compile your JS hybrid to valid ECMAScript (see Babel''s `--watch`
    command flag). It''s also common to have linting or other code formatting occur
    when files are mutated.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对文件进行更改时：通常在这个阶段会发生JavaScript（或CSS）的转译或编译。例如，如果你正在编写包含JSX语言扩展（React）的JS，那么你可能会依赖*Babel*来不断地将你的JS混合编译为有效的ECMAScript（参见Babel的`--watch`命令标志）。当文件发生变化时，进行代码检查或其他代码格式化也很常见。
- en: '**Upon committing**: It is typical for linting, testing, or other code validation
    to occur at the pre- or post-commit stage. This is useful in that any invalid
    or broken code can be flagged before it is pushed. It''s not rare for asset generation
    or compilation to also occur at this stage (for example, generating valid CSS
    from SASS, an alternative style sheet language).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交时：通常在提交前或提交后阶段会进行代码检查、测试或其他代码验证。这很有用，因为任何无效或损坏的代码都可以在推送之前被标记出来。在这个阶段进行资源生成或编译也并不罕见（例如，从SASS生成有效的CSS，一种替代样式表语言）。
- en: '**Upon pushing**: It is typical for all processes (linting, testing, compilation,
    generation of assets, and so on) to occur within a remote machine when new code
    has been pushed to either a feature branch or the master branch. This is called
    **continuous integration** and allows programmers to see how their code would
    run when combined with their colleagues'' code before deploying to production.
    Examples of tools and services that are used for CI include **TravisCI**, **Jenkins**,
    and **CircleCI**.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在推送时：当新代码被推送到特性分支或主分支时，通常会在远程机器上发生所有过程（代码检查、测试、编译、资源生成等）。这被称为**持续集成**，它允许程序员在部署到生产环境之前看到他们的代码与同事的代码结合后会如何运行。用于持续集成的工具和服务的例子包括**TravisCI**、**Jenkins**和**CircleCI**。
- en: It can greatly ease development to have your tooling activate automatically,
    however, this isn't a requirement. You can lint your code, run tests, transpile
    your CSS, or generate compressed assets all via the CLI, without having to fuss
    with automation. You may find this to be slower though, and it's more likely that
    your tooling will be used inconsistently amongst your team if it is not standardized
    into a set of automations. It may be the case, for example, that your colleague
    always runs tests before transpiling SCSS to CSS, while you tend to do it the
    other way round. This can result in inconsistent bugs and *it works on my machine *syndrome.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 自动激活工具可以极大地简化开发，但这并不是必需的。你可以通过命令行进行代码检查、运行测试、转译CSS，或生成压缩的资源，而无需费心自动化。然而，这样做可能会更慢，如果没有将工具标准化为一组自动化工具，那么你的团队中可能会出现工具使用不一致的情况。例如，你的同事可能总是在将SCSS转译为CSS之前运行测试，而你可能倾向于相反的方式。这可能导致不一致的bug和“在我的机器上可以运行”的情况。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discovered the usefulness of tooling, highlighting
    its power to improve our feedback loops, and how it empowers us to write cleaner
    code. We have explored a number of specific libraries and utilities as well, giving
    us a flavor of what types of tools exist and the various ways in which our abilities
    and habits as programmers can be augmented. We've tried out linters, formatters,
    static type checkers, and E2E testing tools, and we've seen the merits of tooling
    at every stage of development.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经发现了工具的用处，突出了它改进我们的反馈循环的能力，以及它如何赋予我们编写更干净代码的能力。我们还探索了一些具体的库和实用工具，让我们对存在的工具类型和以编程者的能力和习惯可以被增强的各种方式有了一些了解。我们尝试了代码检查器、格式化程序、静态类型检查器和端到端测试工具，并且我们已经看到了工具在开发的每个阶段的优点。
- en: The next chapter begins our journey into the art and science of collaboration;
    a vital ingredient for anyone who wants to write clean code. We'll begin with
    an exploration of how we can write clear and understandable documentation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章开始我们的合作艺术和科学之旅；这对于想要编写清晰代码的人来说是至关重要的要素。我们将从探讨如何编写清晰易懂的文档开始。
