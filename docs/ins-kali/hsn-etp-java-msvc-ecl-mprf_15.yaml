- en: Using MicroProfile in Multi-Cloud Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多云环境中使用MicroProfile
- en: Microservices and microservices architectures are ideal development approaches
    for cloud and multi-cloud environments, including hybrid cloud deployments, where
    your application comprises on-premise logic as well as logic that runs in the
    cloud. Eclipse MicroProfile is a specification that optimizes Java for microservices
    architecture and thus provides constructs so that you can implement microservices
    in Java and the cloud. These topics will help you to understand why Eclipse MicroProfile
    is ideal for developing applications in hybrid and multi-cloud environments, and
    what you must take into consideration when using it in these types of deployments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务和微服务架构是云和多云环境的理想开发方法，包括混合云部署，在这种部署中，您的应用程序包括在本地逻辑以及在云中运行的逻辑。 Eclipse MicroProfile是一种优化Java用于微服务架构的规范，因此提供了构造，以便您可以在Java和云中实现微服务。
    这些主题将帮助您了解为什么Eclipse MicroProfile是在混合和多云环境中开发应用程序的理想选择，以及在这些类型的部署中使用它时必须考虑什么。
- en: In this chapter, we will discuss the following ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容...
- en: Using Eclipse MicroProfile for cloud-native application development
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Eclipse MicroProfile进行云原生应用程序开发
- en: 'What is a cloud-native application? Typically, a definition for **cloud-native**
    entails the following characteristics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是云原生应用程序？ 通常，云原生的定义包括以下特征：
- en: Designed as loosely coupled services, such as microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计为松散耦合的服务，如微服务
- en: Loosely coupled services that interact via language-independent communication
    protocols, which allow microservices to be implemented in different programming
    languages and frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过语言无关的通信协议松散耦合的服务，允许微服务使用不同的编程语言和框架进行实现
- en: Lightweight containers that can scale up and down on-demand or via resource
    utilization metrics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以根据需求或通过资源利用率指标进行缩放的轻量级容器
- en: Managed through Agile DevOps processes, with each microservice of a cloud-native
    application going through an independent life cycle that's managed through an
    Agile process using **continuous integration/continuous delivery** (**CI/CD**)
    pipelines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过敏捷DevOps流程进行管理，云原生应用的每个微服务都经历独立的生命周期，通过使用持续集成/持续交付（CI/CD）流水线进行敏捷流程管理
- en: However, Eclipse MicroProfile's goal is to optimize Java for microservice architectures,
    so does it make it suitable for cloud-native application development? What about
    container-native development? What is the relationship between microservices,
    cloud-native development, and container-native development? How do these differ
    or compare? Let's find out!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Eclipse MicroProfile的目标是优化Java以用于微服务架构，那么它是否适合云原生应用程序开发？ 容器原生开发呢？ 微服务、云原生开发和容器原生开发之间有什么关系？
    它们有何不同或相似之处？ 让我们找出来！
- en: Microservices versus cloud native versus container native
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务与云原生与容器原生
- en: 'First, let''s draw the differences between these three terms with respect to
    how an application is developed. As we discussed in [Chapter 1](96308ec7-7393-41b7-a17c-43c15d409f40.xhtml),
    *Introduction to Eclipse MicroProfile*, an Enterprise Java microservice has the
    following features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们就这三个术语在应用程序开发方面的差异进行讨论。 正如我们在[第1章](96308ec7-7393-41b7-a17c-43c15d409f40.xhtml)中讨论的，*Eclipse
    MicroProfile简介*，企业Java微服务具有以下特点：
- en: It is a microservice written using the Java language.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是使用Java语言编写的微服务。
- en: It can use any Java framework.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何Java框架。
- en: It can use any Java API.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用任何Java API。
- en: It must be enterprise grade, which means it must have high reliability, availability,
    scalability, security, robustness, and performance.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须是企业级的，这意味着必须具有高可靠性、可用性、可扩展性、安全性、健壮性和性能。
- en: It must fulfill the characteristics of a microservice, all of which are listed
    at [https://martinfowler.com/microservices/](https://martinfowler.com/microservices/).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须满足微服务的所有特征，所有这些特征都列在[https://martinfowler.com/microservices/](https://martinfowler.com/microservices/)上。
- en: By its definition, a microservice does not prescribe specific details of the
    underlying ...
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其定义，微服务不规定底层的具体细节...
- en: What about 12-factor applications?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12要素应用程序呢？
- en: 'Just like the microservices and microservices architecture definitions, a 12-factor
    app does not prescribe the underlying technologies, for example, the programming
    language, database, caches, and so on, or frameworks that should be used to implement
    them. The 12-factor app is a methodology that''s used for implementing applications.
    These twelve factors are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就像微服务和微服务架构定义一样，12要素应用程序不规定底层技术，例如编程语言、数据库、缓存等，或者应该用于实现它们的框架。 12要素应用程序是用于实现应用程序的方法。
    这十二个因素如下：
- en: One codebase tracked in revision control, many deploys
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个代码库在修订控制中跟踪，多个部署
- en: Explicitly declare and isolate dependencies
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确声明和隔离依赖关系
- en: Store config in the environment
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在环境中存储配置
- en: Treat backing services as attached resources
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将后备服务视为附加资源
- en: Strictly separate build and run stages
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格分离构建和运行阶段
- en: Execute the app as one or more stateless processes
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序作为一个或多个无状态进程执行
- en: Export services via port binding
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过端口绑定导出服务
- en: Scale out via the process model
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过流程模型进行扩展
- en: Maximize robustness with fast startup and graceful shutdown
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过快速启动和优雅关闭最大化健壮性
- en: Keep development, staging, and production as similar as possible
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使开发、暂存和生产尽可能相似
- en: Treat logs as event streams
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志视为事件流
- en: Run admin/management tasks as one-off processes
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将管理/管理任务作为一次性进程运行
- en: 'Implementing an application using this methodology helps us do the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法实现应用程序可以帮助我们做到以下几点：
- en: Minimize time and cost for new developers joining the project
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化新开发人员加入项目的时间和成本
- en: Offer portability between execution environments
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行环境之间提供可移植性
- en: Easily deploy the application to cloud platforms
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松部署应用到云平台
- en: Minimize the differences between development and production
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化开发和生产之间的差异
- en: Scale it up without changes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需更改即可扩展
- en: You can read all about the 12 factors at [https://12factor.net](https://12factor.net).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://12factor.net](https://12factor.net)上阅读有关12个因素的所有信息。
- en: The 12-factor app is a methodology that a developer can follow while designing
    and implementing microservices and applications, independent of the programming
    language or framework that's being used to implement them. The framework that
    a developer can use to implement microservices using the 12-factor app is Eclipse
    MicroProfile. The 12-factor app and Eclipse MicroProfile are not mutually exclusive
    but really complement each other.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 12因素应用是开发人员在设计和实现微服务和应用程序时可以遵循的一种方法，与用于实现它们的编程语言或框架无关。开发人员可以使用Eclipse MicroProfile来实现符合12因素应用的微服务。12因素应用和Eclipse
    MicroProfile并不是互斥的，而是相互补充的。
- en: But what about a methodology for designing and implementing applications that's
    not the 12-factor app? What about serverless and **Function-as-a-Service** (**FaaS**)
    technologies? How does Eclipse MicroProfile fit into these newer cloud-native
    technologies?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除了12因素应用之外，还有没有一种用于设计和实现应用程序的方法？无服务器和**函数即服务**（**FaaS**）技术怎么样？Eclipse MicroProfile如何适应这些更新的云原生技术？
- en: What about serverless and FaaS?
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器和FaaS怎么样？
- en: Serverless and FaaS cloud-native technologies have been experiencing steady
    interest and growth in the market, as evidenced by offerings from all the major
    cloud providers, that is, AWS Lambda, Azure Functions, Oracle Functions, and Google
    Cloud Functions. In an era where organizations are increasingly using the cloud
    for development and production workloads, and compute and memory costs are operational
    expenses that need to be tracked and monitored, FaaS is attractive because it
    abstracts compute and memory management away from the user, who is then able to
    focus on developing business logic, thereby becoming a lot more productive than
    ever before.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器和FaaS云原生技术在市场上一直受到稳定的关注和增长，这可以从所有主要云提供商的产品中看出，即AWS Lambda，Azure Functions，Oracle
    Functions和Google Cloud Functions。在组织越来越多地使用云进行开发和生产工作负载的时代，计算和内存成本是需要跟踪和监控的运营费用，FaaS很有吸引力，因为它将计算和内存管理抽象化，使用户能够专注于开发业务逻辑，从而比以往更加高效。
- en: With FaaS, developers don't need to set up VMs and memory, ...
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FaaS，开发人员不需要设置虚拟机和内存，...
- en: Cloud-native application development
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用开发
- en: 'There are two complementary aspects or components to cloud-native application
    development: application services and infrastructure services. Application services
    speed up the development of the business logic of a cloud-native application,
    and infrastructure services speed up its delivery and deployment. These two aspects
    are complementary and integral to cloud-native application development. You cannot
    have one without the other. They are essentially the yin and the yang of cloud-native application
    development, as depicted by the following diagram:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用开发有两个互补的方面或组件：应用服务和基础设施服务。应用服务加速云原生应用的业务逻辑开发，基础设施服务加速其交付和部署。这两个方面是互补的，对云原生应用开发至关重要。没有一个，就没有另一个。它们本质上是云原生应用开发的阴阳两极，如下图所示：
- en: '![](img/5396deb8-7e59-4be5-9b20-a31287abeed3.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/5396deb8-7e59-4be5-9b20-a31287abeed3.png)
- en: 'As we mentioned earlier in this chapter, cloud-native application development
    is an approach to building and running applications that takes full advantage
    of the cloud computing model, which is based on four key tenets:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面提到的，云原生应用开发是一种利用云计算模型构建和运行应用程序的方法，该方法基于四个关键原则：
- en: A service-based architecture (miniservices, microservices, SOA services, and
    so on)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于服务的架构（微服务，SOA服务等）
- en: An API-driven approach for inter-service communication
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向API的服务间通信方法
- en: An underlying infrastructure that's based on containers
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的基础设施
- en: DevOps processes
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps流程
- en: 'The following diagram depicts the four key tenets of cloud-native application
    development:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表描述了云原生应用开发的四个关键原则：
- en: '![](img/5994cf8f-77e2-4906-b576-0a8742fe81b5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/5994cf8f-77e2-4906-b576-0a8742fe81b5.png)
- en: As shown in the previous diagram, the architecture and communication aspects
    are related to the development concerns of cloud-native applications, and the
    infrastructure and the process aspects are related to their delivery/deployment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，架构和通信方面与云原生应用的开发相关，基础设施和流程方面与其交付/部署相关。
- en: Organizations who are on their journey to adopting cloud-native application
    development can benefit from eight steps, as described by the e-Book titled *The
    path to cloud-native applications: **8 steps to guide your journey*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行云原生应用开发的组织可以从电子书*通往云原生应用的路径：**指导您的旅程的8个步骤*中受益。
- en: To obtain the e-Book *The path to cloud-native applications: **8 steps to guide
    your journey*, please refer to [https://www.redhat.com/en/resources/path-to-cloud-native-applications-ebook](https://www.redhat.com/en/resources/path-to-cloud-native-applications-ebook).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取电子书*通往云原生应用的路径：**指导您的旅程的8个步骤*，请参阅[https://www.redhat.com/en/resources/path-to-cloud-native-applications-ebook](https://www.redhat.com/en/resources/path-to-cloud-native-applications-ebook)。
- en: 'Let''s discuss how Eclipse MicroProfile can play a role in these eight steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论Eclipse MicroProfile如何在这八个步骤中发挥作用：
- en: '**Evolve the DevOps culture and practices**: "*Take advantage of new technology,
    faster approaches, **and tighter collaboration by embracing the principles and
    cultural values of DevOps and organizing your organization around those values.*"
    Although this is an organizational and process-related step, Eclipse MicroProfile,
    as a specification for microservices, can be a good fit for this adaptation of
    culture and process because microservices, due to their characteristics, closely
    support DevOps processes.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发展DevOps文化和实践：通过接受DevOps的原则和文化价值，并围绕这些价值观组织您的组织，利用新技术、更快的方法和更紧密的协作。尽管这是一个组织和流程相关的步骤，作为微服务规范，Eclipse
    MicroProfile可以很好地适应这种文化和流程的调整，因为微服务由于其特性密切支持DevOps流程。
- en: '**Speed up existing applications using fast monoliths**: "*Accelerate existing
    applications by migrating to a modern, container-based platform – and break up
    monolithic applications into microservices or miniservices for additional efficiency
    gains.*" Eclipse MicroProfile can be of great help when breaking up your monolith
    into microservices. As you identify bounded contexts in your monolith, consider
    using Eclipse MicroProfile to implement each of the microservices that implement
    the logic of each bounded context.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用快速单体加速现有应用程序：通过迁移到现代化的基于容器的平台，加速现有应用程序，并将单片应用程序分解为微服务或迷你服务，以获得额外的效率提升。当将单体应用程序分解为微服务时，Eclipse
    MicroProfile可以提供很大帮助。在识别单体应用程序中的有界上下文时，考虑使用Eclipse MicroProfile来实现每个有界上下文的逻辑的微服务。
- en: '**Use application services to speed up development**: "*Speed up software development
    with reusability. Cloud-native application services are ready-to-use developer
    tools. However, these reusable components must be optimized and integrated into
    the underlying cloud-native infrastructure to maximize their benefits.*" An **In-Memory
    Data Grid** (**IMDG**) and Messaging Brokers are application services that help
    speed up the development of business logic. A microservice, developed using Eclipse
    MicroProfile, can leverage these application services by invoking them from within
    its method bodies. Eclipse MicroProfile does not impose any kind of restriction
    when integrating to application services, such as an IMDG or a Messaging Broker.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用服务加速开发：通过可重用性加速软件开发。云原生应用服务是现成的开发人员工具。然而，这些可重用组件必须优化并集成到底层云原生基础设施中，以最大化它们的效益。内存数据网格（IMDG）和消息代理是帮助加速业务逻辑开发的应用服务。使用Eclipse
    MicroProfile开发的微服务可以通过在其方法体内调用这些应用服务来利用这些应用服务。Eclipse MicroProfile在集成到应用服务（如IMDG或消息代理）时不会施加任何限制。
- en: '**Choose the right tool for the right task**: "*Use a container-based application
    platform that supports the right mix of frameworks, languages, and architectures
    – and can be tailored to your specific business application need.*" Eclipse MicroProfile
    is one of the tools that a developer can use when choosing the right tool for
    the right task. For example, Red Hat Application Runtimes is a collection of runtimes
    and tools, which includes Eclipse MicroProfile, Node.js, Spring Boot, and Vertex.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择正确的工具来完成正确的任务：使用支持适当混合框架、语言和架构的基于容器的应用平台，并可以根据特定的业务应用需求进行定制。Eclipse MicroProfile是开发人员在选择正确的工具来完成正确的任务时可以使用的工具之一。例如，Red
    Hat Application Runtimes是一组运行时和工具，其中包括Eclipse MicroProfile、Node.js、Spring Boot和Vertex。
- en: '**Provide developers with a self-service, on-demand infrastructure**: "*Use
    containers and container orchestration technologies to simplify access to the
    underlying infrastructure, give control and visibility to IT operations teams,
    and provide robust application life cycle management across various infrastructure
    environments, such as data centers, private clouds, and public clouds.*" The microservices
    you develop with Eclipse MicroProfile can be deployed to one or more containers.
    By easily managing these containers and your microservices architecture, which
    is running on them, you can accelerate your development cycles to deliver value
    to the business faster.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为开发人员提供自助式、按需基础设施：使用容器和容器编排技术简化对基础设施的访问，赋予IT运维团队控制和可见性，并在各种基础设施环境（如数据中心、私有云和公共云）中提供强大的应用程序生命周期管理。您使用Eclipse
    MicroProfile开发的微服务可以部署到一个或多个容器中。通过轻松管理这些容器和运行在其中的微服务架构，您可以加快开发周期，更快地为业务创造价值。
- en: '**Automate IT to accelerate application delivery**: "*Create a**utomation sandboxes
    in order to lea**rn about the automation language and process, establish collaborative
    dialog across organizations for defining service requirements, create self-service
    catalogs that empower users and speed delivery, and use metering, monitoring,
    and chargeback policies and processes.*" Eclipse MicroProfile provides capabilities
    for metrics, fault tolerance, and health checks, all of which can be used as input
    to the IT automation processes.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化IT以加速应用交付：创建自动化沙盒以了解自动化语言和流程，跨组织建立协作对话以定义服务需求，创建赋予用户权力并加速交付的自助服务目录，并使用计量、监控和计费政策和流程。Eclipse
    MicroProfile提供了度量、容错和健康检查的功能，所有这些都可以作为IT自动化流程的输入。
- en: '**Implement continuous delivery and advanced deployment techniques**: "*Accelerate
    the delivery of your cloud-native applications with automated delivery, CI/CD
    pipelines, rolling blue/green and canary deployments, and A/B testing.*" The use
    of microservices in combination with CI/CD can facilitate advanced deployment
    techniques. For example, you can introduce a MicroProfile-based microservice with
    new functionality as part of a blue/green or canary deployment into production
    and switch all of the traffic to it once you have proven that the new functionality
    works as expected.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施持续交付和高级部署技术**：“*通过自动交付、CI/CD流水线、滚动蓝/绿和金丝雀部署以及A/B测试加速交付您的云原生应用程序*”。微服务与CI/CD结合可以促进高级部署技术。例如，您可以将基于MicroProfile的微服务与新功能作为蓝/绿或金丝雀部署的一部分引入到生产环境中，并在证明新功能按预期工作后将所有流量切换到它。'
- en: '**Evolve a more modular architecture**: "*Choose a modular design that makes
    sense for your specific needs, using microservices, a monolith-first approach,
    or miniservices – or a combination.*" For this step, you can use Eclipse MicroProfile
    to develop microservices for new applications or as you break specific bounded
    contexts of your monolith into microservices.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**演进更模块化的架构**：“*选择一个对您的特定需求有意义的模块化设计，使用微服务、先单体应用为主或迷你服务-或者结合使用*”。对于这一步，您可以使用Eclipse
    MicroProfile为新应用程序开发微服务，或者在将特定边界上下文从单体应用程序中拆分为微服务时使用。'
- en: Now that we have discussed how Eclipse MicroProfile facilitates cloud-native
    application development and how it can help in each of the eight steps to guide
    you in your journey to cloud-native applications, let's turn to the topic of running
    MicroProfile-based applications across clouds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了Eclipse MicroProfile如何促进云原生应用程序开发以及它如何在指导您在云原生应用程序之旅中的每个八个步骤中提供帮助，让我们转向在不同云上运行基于MicroProfile的应用程序的话题。
- en: Developing and running MicroProfile applications across clouds
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同云上开发和运行MicroProfile应用程序
- en: What features does MicroProfile provide to support development across clouds?
    Microservices and support for language-agnostic communication based on HTTP REST
    API are two of the main features that are supported. In addition, MicroProfile
    Config supports the integration of cloud environment variables that define integration
    with the cloud environment. MicroProfile Health Check supports integration with
    the cloud environment health checks. MicroProfile Metrics and MicroProfile OpenTracing support
    integration with the DevOps monitoring tasks. Finally, MicroProfile fault tolerance
    supports fallback and recovery behaviors between the independent microservices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile提供了哪些功能来支持跨云开发？微服务和基于HTTP REST API的语言无关通信支持是支持的主要功能之一。此外，MicroProfile
    Config支持集成云环境变量，定义与云环境的集成。MicroProfile Health Check支持与云环境的健康检查集成。MicroProfile
    Metrics和MicroProfile OpenTracing支持与DevOps监控任务的集成。最后，MicroProfile容错支持独立微服务之间的回退和恢复行为。
- en: Eclipse MicroProfile ...
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile...
- en: Bare-metal machines versus VMs versus containers
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裸机、虚拟机与容器
- en: The decision of whether to run a MicroProfile-based microservice or application
    on bare-metal machines, VMs, or containers depends on the specific requirements
    of your application. In fact, the determination of what type of underlying cloud
    compute resource rests squarely on your application needs and not the framework
    being used for its development, that is, Eclipse MicroProfile. For example, if
    your application or microservice requires real or near-real-time response times,
    then you'd most likely favor a bare-metal or container (running on bare-metal)
    deployment. This decision would be made independent of the framework you are using
    to write your business logic, whether that be Eclipse MicroProfile or another
    one.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 是否在裸机、虚拟机或容器上运行基于MicroProfile的微服务或应用程序的决定取决于您的应用程序的具体要求。实际上，确定基础云计算资源的类型取决于您的应用程序需求，而不是用于开发的框架，即Eclipse
    MicroProfile。例如，如果您的应用程序或微服务需要实时或接近实时的响应时间，那么您很可能会偏向于裸机或容器（在裸机上运行）。这个决定将独立于您用于编写业务逻辑的框架，无论是Eclipse
    MicroProfile还是其他框架。
- en: Since Eclipse MicroProfile supports microservices and language-agnostic communication
    based on HTTP REST, your inter-microservice communication is unaffected by the
    type of underlying compute on which your microservices are running; for example,
    you could have a microservice running on a VM communicating via REST with another
    microservice running on a bare-metal machine. But what if your application consists
    of microservices running on-premises and another running on the cloud, also known
    as a hybrid cloud application? What considerations do you need to have in mind?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Eclipse MicroProfile支持微服务和基于HTTP REST的语言无关通信，您的微服务之间的通信不受微服务运行的底层计算类型的影响；例如，您可以在虚拟机上运行的微服务通过REST与在裸机上运行的另一个微服务进行通信。但是，如果您的应用程序由在本地运行的微服务和在云上运行的微服务组成，也就是混合云应用程序，您需要考虑哪些因素？
- en: Considerations when using MicroProfile in a hybrid cloud deployment
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在混合云部署中使用MicroProfile时需要考虑的因素
- en: 'A hybrid cloud application comprises on-premises logic as well as on-cloud
    logic. In other words, if part of your application logic runs on-premises and
    part of it runs in the cloud, you effectively have a hybrid cloud application.
    When using Eclipse MicroProfile in this type of deployment, here are the things
    you need to consider:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 混合云应用程序包括本地逻辑以及云上逻辑。换句话说，如果您的应用程序逻辑的一部分在本地运行，另一部分在云上运行，那么您实际上拥有一个混合云应用程序。在这种部署中使用Eclipse
    MicroProfile时，以下是您需要考虑的事项：
- en: Configuration of communication routes between the cloud environment and the
    on-premises environment needs to be done using whatever DNS support the cloud
    environment supports
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云环境和本地环境之间的通信路由配置需要使用云环境支持的DNS支持。
- en: Configuration of MicroProfile OpenTracing to enable the capture of tracing across
    cloud environments
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置MicroProfile OpenTracing以在云环境中启用跟踪捕获
- en: Monitoring of the split MicroProfile Metrics information across cloud ...
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨云监控拆分的MicroProfile指标信息...
- en: Challenges when using MicroProfile OpenTracing in a multi-cloud deployment
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多云部署中使用MicroProfile OpenTracing时的挑战
- en: Distributed tracing in a multi-cloud environment can be challenging. We want
    to fulfill the same objective that we would with a single cloud environment, that
    is, to visualize the single end-to-end trace associated with a request as it passes
    through services within and across each cloud, but may face complications when
    dealing with different context propagation formats and storage of the tracing
    data in different formats per cloud.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在多云环境中进行分布式跟踪可能具有挑战性。我们希望实现与单一云环境相同的目标，即可视化请求通过每个云内部和跨越每个云的服务时的端到端跟踪，但在处理不同的上下文传播格式和不同格式的跟踪数据存储时可能会遇到复杂情况。
- en: The first challenge is to ensure that a trace continues across different cloud
    environments. This is a problem because, at the time of writing this book, there
    is not a widely adopted or standardized trace context format. Usually, each tracing
    system uses different headers and formats to propagate the tracing context. For
    instance, Zipkin uses B3 propagation, Jaeger uses a `ber-trace-id` header, Amazon
    X-Ray uses `X-Amzn-Trace-Id`, and Google uses `X-Cloud-Trace-Context`. Therefore,
    if a request has to be traced across heterogenous tracing systems, each time it
    leaves or enters a different environment, the trace context has to be converted.
    This can usually be done by configuring a tracer with a custom injector or extractor
    implementation. However, this is currently beyond the scope of the MicroProfile
    OpenTracing project. In the future, the trace context format might be standardized
    under the W3C Trace Context project ([https://www.w3.org/TR/trace-context/](https://www.w3.org/TR/trace-context/)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个挑战是确保跟踪在不同的云环境中持续进行。这是一个问题，因为在撰写本书时，尚未广泛采用或标准化跟踪上下文格式。通常，每个跟踪系统使用不同的标头和格式来传播跟踪上下文。例如，Zipkin使用B3传播，Jaeger使用`ber-trace-id`标头，Amazon
    X-Ray使用`X-Amzn-Trace-Id`，Google使用`X-Cloud-Trace-Context`。因此，如果请求必须在异构跟踪系统之间进行跟踪，每次离开或进入不同的环境时，跟踪上下文都必须进行转换。这通常可以通过配置具有自定义注入器或提取器实现的跟踪器来完成。但是，这目前超出了MicroProfile
    OpenTracing项目的范围。将来，跟踪上下文格式可能会在W3C跟踪上下文项目（[https://www.w3.org/TR/trace-context/](https://www.w3.org/TR/trace-context/)）下标准化。
- en: The second challenge, even in a homogenous tracing environment, is to visualize
    tracing data from multi-cloud environments. This can be problematic because tracing
    data in each cloud might be stored in different databases or in different formats.
    This can be overcome by replicating the data to a single unified storage or sending
    missing tracing data between systems on-demand with the appropriate data format
    adjustments.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在同质跟踪环境中，第二个挑战是从多云环境中可视化跟踪数据。这可能是有问题的，因为每个云中的跟踪数据可能存储在不同的数据库中或以不同的格式存储。可以通过将数据复制到单一统一存储或使用适当的数据格式调整在系统之间按需发送丢失的跟踪数据来克服这一问题。
- en: Next, we will discuss the challenges of using Eclipse MicroProfile in a service
    mesh, such as Istio.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论在服务网格中使用Eclipse MicroProfile时面临的挑战，例如Istio。
- en: Considerations when using Eclipse MicroProfile in a service mesh
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务网格中使用Eclipse MicroProfile时需要考虑的因素
- en: Service meshes such as Istio or LinkerD offer services at the platform level
    on top of Kubernetes in the areas of discovery, routing, and fault tolerance. Some
    of those services can also be found in MicroProfile. When you deploy a MicroProfile
    application into such a service mesh, you need to consider whether you want to
    use the version from MicroProfile or the one from the mesh.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如Istio或LinkerD之类的服务网格在Kubernetes的平台级别上提供服务，涵盖了发现、路由和容错等领域。MicroProfile中也可以找到其中一些服务。当您将MicroProfile应用部署到这样的服务网格中时，您需要考虑是使用MicroProfile的版本还是使用网格的版本。
- en: The MicroProfile feature that is most likely affected here is fault tolerance,
    especially the retry logic.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最有可能受到影响的MicroProfile功能是容错，特别是重试逻辑。
- en: Retry
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重试
- en: 'Retry in fault tolerance lets you retry a request to another service in case
    the first request fails (see [Chapter 3](73f2287d-1676-47c9-9887-cf74aa0aa6f0.xhtml), *MicroProfile
    Config and Fault Tolerance*, for more information). Now, consider that you have
    the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 容错中的重试允许您在第一次请求失败时重试到另一个服务（有关更多信息，请参见[第3章](73f2287d-1676-47c9-9887-cf74aa0aa6f0.xhtml)，*MicroProfile
    Config and Fault Tolerance*）。现在，假设您有以下代码：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Although this tells Istio to retry 5 times, you may end up with 15 retries (Istio
    will retry 5 times for each of the 3 retries in your code before it returns an
    error) before `aMethod` finally ends with an error. You may consider turning off
    the retries in code, as changes to the number of retries in Istio can be made
    on the fly without the need to restart a pod.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这告诉Istio重试5次，但您最终可能会得到15次重试（在返回错误之前，Istio将在代码中的3次重试中的每次重试5次）才能最终以错误结束`aMethod`。您可能会考虑在代码中关闭重试，因为在Istio中更改重试次数可以在不需要重新启动pod的情况下进行。
- en: Fallback
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后备
- en: 'On the other hand, Istio does not have a fallback policy for when all the retries
    fail – it is not possible to have Istio call another version of your workload. When
    you annotate the preceding code with the `@Fallback` annotation, it is possible
    to execute another action in case the original call fails:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Istio在所有重试失败时没有后备策略-不可能让Istio调用您工作负载的另一个版本。当您使用`@Fallback`注释前面的代码时，如果原始调用失败，可以执行另一个操作：
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, the `fallbackForA` fallback method will be called once all the
    retries from Istio, times those from MicroProfile, have been exhausted. If you
    remove the `@Retry` annotation from the preceding example, the fallback method
    is called when the Istio retries have been exhausted. ...
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当Istio的重试次数和MicroProfile的重试次数都用尽时，`fallbackForA`回退方法将被调用。如果您从上面的示例中删除`@Retry`注解，则当Istio的重试用尽时，将调用回退方法。...
- en: Fault injection in the service mesh
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务网格中的故障注入
- en: 'Istio lets you inject faults into the results pretty easily. This sounds counterproductive
    at the start, but can be a very nice way of testing that you get the fault tolerance
    handling right. The following `VirtualService` for Istio defines such fault injection:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Istio让您可以很容易地向结果中注入故障。这一开始听起来似乎是适得其反的，但这可以是测试您是否正确处理了故障容忍的一个很好的方式。以下是Istio定义的这种故障注入的`VirtualService`：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Istio will hear for calls to the destination host, `myTarget`, and send a 404
    response for 20% of the calls instead of the real response code. On top of this,
    it will delay every other response by 200 milliseconds.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Istio将监听对目标主机`myTarget`的调用，并对20%的调用发送404响应，而不是真实的响应代码。此外，它将延迟每个其他响应200毫秒。
- en: Conclusion
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: MicroProfile defines primitives in the area of fault tolerance that can also
    be provided by other means, such as in a service mesh. If this is the case for
    you, you have to consider which one to activate. Activating both may result in
    unexpected behavior.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: MicroProfile在容错领域定义了原语，也可以通过其他方式提供，比如在服务网格中。如果这对您来说是这种情况，您必须考虑激活哪一个。同时激活可能会导致意外行为。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned how Eclipse MicroProfile facilitates cloud-native
    application development, regardless of whether it is a hybrid cloud or multi-cloud
    application. We also discussed the relationship between microservices, cloud-native
    development, and container-native development, and how microservices running on
    containers are an ideal option for cloud-native development. You also learned
    how Eclipse MicroProfile relates to the 12-factor app, as well as serverless and
    FaaS environments.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了Eclipse MicroProfile如何促进云原生应用程序的开发，无论是混合云还是多云应用程序。我们还讨论了微服务、云原生开发和容器原生开发之间的关系，以及在容器上运行的微服务是云原生开发的理想选择。您还了解了Eclipse
    MicroProfile与12要素应用程序、无服务器和FaaS环境的关系。
- en: We covered the eight steps to guide your journey into cloud-native applications
    and how Eclipse MicroProfile can help at each step. In addition, we discussed
    what you need to consider when using Eclipse MicroProfile for applications that
    span across clouds, when to run Eclipse MicroProfile on bare-metal machines versus
    VMs versus containers, what to consider when running Eclipse MicroProfile microservices
    in hybrid cloud applications, the challenges to be aware of when running Eclipse
    MicroProfile OpenTracing in a multi-cloud deployment, and finally what to consider
    when using Eclipse MicroProfile in a service mesh.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了八个步骤，指导您进入云原生应用程序的旅程，以及Eclipse MicroProfile如何在每个步骤中提供帮助。此外，我们讨论了在跨越云的应用程序中使用Eclipse
    MicroProfile时需要考虑的事项，以及在裸机、虚拟机和容器上运行Eclipse MicroProfile时需要考虑的事项，以及在混合云应用程序中运行Eclipse
    MicroProfile微服务时需要考虑的事项，以及在多云部署中运行Eclipse MicroProfile OpenTracing时需要注意的挑战，最后讨论了在服务网格中使用Eclipse
    MicroProfile时需要考虑的事项。
- en: Throughout this book, we've covered the origins of MicroProfile, a specification
    for Java microservices, and the history behind how it came into being. We introduced
    the open source project, its mission, governance, benefits, how to contribute
    to it, and the life cycle of its sub-projects. We then delved into each of the
    MicroProfile APIs/sub-projects that make up the umbrella/platform release, as
    well as the sub-projects outside the umbrella release.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们介绍了MicroProfile的起源，这是一个用于Java微服务的规范，以及它产生的历史。我们介绍了这个开源项目，它的使命、治理、好处，如何为其做出贡献以及其子项目的生命周期。然后，我们深入研究了组成整体/平台发布的每个MicroProfile
    API/子项目，以及整体发布之外的子项目。
- en: We also covered the current implementations of MicroProfile in the market, including
    Quarkus, and showed you how to "quark" a generated MicroProfile project by the
    MicroProfile Starter. We discussed the Conference Application, a community sample
    project that demonstrates the interoperability of MicroProfile across different
    vendor implementations. We also provided code examples throughout for reference
    and discussion purposes, and also provided a fully working project with source
    code that implemented all the MicroProfile APIs that you can freely access, download,
    compile, and reuse in your development efforts and to get jump-started with MicroProfile.
    Later, we discussed the reactive functionality offered by MicroProfile and its
    future developments, such as sub-projects in the pipeline and in the MicroProfile
    sandbox, as well as its likely future relationship with Jakarta EE.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了市场上MicroProfile的当前实现，包括Quarkus，并向您展示了如何通过MicroProfile Starter“quark”生成的MicroProfile项目。我们讨论了会议应用程序，这是一个社区示例项目，演示了MicroProfile在不同供应商实现之间的互操作性。我们还提供了代码示例供参考和讨论，并提供了一个完全可用的项目和源代码，实现了您可以自由访问、下载、编译和重用的所有MicroProfile
    API，以及使用MicroProfile快速启动。随后，我们讨论了MicroProfile提供的响应功能及其未来发展，例如管道中的子项目和MicroProfile沙箱中的子项目，以及它与Jakarta
    EE的可能未来关系。
- en: Lastly, we went over how MicroProfile-based applications and microservices are
    a good fit for implementing solutions in containers, the cloud, and serverless/FaaS
    deployments. Whether you are new to Java microservices or an experienced Java
    developer, you can use all the knowledge you have gained from this book to start
    developing microservices that are based on this new and innovative community-driven
    specification for the creation of observable, scalable, secure, and highly available
    hybrid and multi-cloud applications so that you can deliver value to your business
    faster.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了基于MicroProfile的应用程序和微服务如何适合在容器、云和无服务器/FaaS部署中实现解决方案。无论您是新手Java微服务还是经验丰富的Java开发人员，您都可以利用本书所学的知识来开始开发基于这一新的创新社区驱动规范的微服务，以创建可观察、可扩展、安全和高可用的混合和多云应用程序，从而更快地为您的业务提供价值。
- en: Questions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How does Eclipse MicroProfile facilitate cloud-native application development?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile如何促进云原生应用程序开发？
- en: What are the two complementary concerns of cloud-native application development?
    How does Eclipse MicroProfile fit into these concerns?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生应用程序开发的两个互补关注点是什么？Eclipse MicroProfile如何适应这些关注点？
- en: What are the four key tenets of cloud-native application development? How does
    Eclipse MicroProfile relate to these?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生应用程序开发的四个关键原则是什么？Eclipse MicroProfile与这些原则有何关联？
- en: How does Eclipse MicroProfile contribute to each of the eight steps to guide
    your journey through cloud-native applications?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile如何为指导您通过云原生应用程序的八个步骤做出贡献？
- en: How does Eclipse MicroProfile relate to the 12-factor app?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile如何与12要素应用程序相关？
- en: How can Eclipse MicroProfile facilitate serverless and FaaS environments?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile如何促进无服务器和FaaS环境？
- en: What should you consider when implementing and running Eclipse MicroProfile
    across clouds?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在跨云实施和运行Eclipse MicroProfile时，您应该考虑什么？
- en: What are the challenges when using Eclipse MicroProfile ...
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Eclipse MicroProfile时会遇到哪些挑战...
