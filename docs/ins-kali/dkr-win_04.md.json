["```\nRUN Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log' -n 'centralLogFileMode' -v 'CentralW3C'; `\n    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'truncateSize' -v 4294967295; `\n    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'period' -v 'MaxSize'; `\n    Set-WebConfigurationProperty -p 'MACHINE/WEBROOT/APPHOST' -fi 'system.applicationHost/log/centralW3CLogFile' -n 'directory' -v 'C:\\iislog'\n```", "```\n CMD Start-Service W3SVC; `\n     Invoke-WebRequest http://localhost -UseBasicParsing | Out-Null; `\n     netsh http flush logbuffer | Out-Null; `\n     Get-Content -path 'c:\\iislog\\W3SVC\\u_extend1.log' -Tail 1 -Wait\n```", "```\n docker container run -d -P --name log-watcher dockeronwindows/ch03-iis-log-watcher:2e\n```", "```\n> docker container logs log-watcher\n2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET / - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 - 200 0 0 7\n2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET /iisstart.png - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 http://localhost:51959/ 200 0 0 17\n2019-02-06 20:21:30 W3SVC1 172.27.97.43 GET /favicon.ico - 80 - 192.168.2.214 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64;+rv:64.0)+Gecko/20100101+Firefox/64.0 - 404 0 2 23\n```", "```\n# escape=` FROM mcr.microsoft.com/dotnet/framework/aspnet COPY Web.config C:\\inetpub\\wwwroot COPY config\\*.config C:\\inetpub\\wwwroot\\config\\ COPY default.aspx C:\\inetpub\\wwwroot\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration>\n  <appSettings  configSource=\"config\\appSettings.config\"  />\n  <connectionStrings  configSource=\"config\\connectionStrings.config\"  /> </configuration>\n```", "```\ndocker container run -d -P dockeronwindows/ch03-aspnet-config:2e\n```", "```\ndocker container run -d -P `\n -v $pwd\\prod-config:C:\\inetpub\\wwwroot\\config `\n dockeronwindows/ch03-aspnet-config:2e\n```", "```\n ENV A01_KEY A01 value\n ENV A02_KEY=\"A02 value\" `\n     A03_KEY=\"A03 value\"\n```", "```\n> docker container run `\n  --env ENV_01='Hello' --env ENV_02='World' `\n  mcr.microsoft.com/windows/nanoserver:1809 `\n  cmd /s /c echo %ENV_01% %ENV_02%\n\nHello World\n```", "```\n foreach($key in [System.Environment]::GetEnvironmentVariables('Process').Keys) {\n     if ([System.Environment]::GetEnvironmentVariable($key, 'Machine') -eq $null) {\n         $value = [System.Environment]::GetEnvironmentVariable($key, 'Process')\n         [System.Environment]::SetEnvironmentVariable($key, $value, 'Machine')\n     }\n }\n```", "```\nENTRYPOINT [\"powershell\"] CMD Start-Process -NoNewWindow -FilePath C:\\ServiceMonitor.exe -ArgumentList w3svc; ` Invoke-WebRequest http://localhost -UseBasicParsing | Out-Null; `\n    netsh http flush logbuffer | Out-Null; `\n   Get-Content -path 'C:\\iislog\\W3SVC\\u_extend1.log' -Tail 1 -Wait \n```", "```\ndocker container run -d -P --name iis-env dockeronwindows/ch03-iis-environment-variables:2e\n```", "```\n$port = $(docker container port iis-env).Split(':')[1]\nstart \"http://localhost:$port\"\n```", "```\ndocker container run -d -P --name iis-env2 ` \n -e A01_KEY='NEW VALUE!' ` \n -e B01_KEY='NEW KEY!' `\n dockeronwindows/ch03-iis-environment-variables:2e\n```", "```\ntry { \n    $response = iwr http://localhost/ -UseBasicParsing\n    if ($response.StatusCode -eq 200) { \n        return 0\n    } else {\n        return 1\n    } \ncatch { return 1 }\n```", "```\nHEALTHCHECK --interval=5s `\n CMD powershell -command `\n    try { `\n     $response = iwr http://localhost/diagnostics -UseBasicParsing; `\n     if ($response.StatusCode -eq 200) { return 0} `\n     else {return 1}; `\n    } catch { return 1 }\n```", "```\ndocker container run -d -P --name healthcheck dockeronwindows/ch03-iis-healthcheck:2e\n```", "```\n$port = $(docker container port healthcheck).Split(':')[1]\niwr \"http://localhost:$port/diagnostics\"\n```", "```\niwr \"http://localhost:$port/toggle/unhealthy\" -Method Post\n```", "```\n# escape=` FROM microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019 AS builder SHELL [\"powershell\", \"-Command\", \"$ErrorActionPreference = 'Stop';\"] # add SSDT build tools RUN nuget install Microsoft.Data.Tools.Msbuild -Version 10.0.61804.210 # add SqlPackage tool ENV download_url=\"https://download.microsoft.com/download/6/E/4/6E406.../EN/x64/DacFramework.msi\" RUN Invoke-WebRequest -Uri $env:download_url -OutFile DacFramework.msi ; `Start-Process msiexec.exe -ArgumentList '/i', 'DacFramework.msi', '/quiet', '/norestart' -NoNewWindow -Wait; `Remove-Item -Force DacFramework.msi WORKDIR C:\\src\\NerdDinner.Database COPY src\\NerdDinner.Database . RUN msbuild NerdDinner.Database.sqlproj ` /p:SQLDBExtensionsRefPath=\"C:\\Microsoft.Data.Tools.Msbuild.10.0.61804.210\\lib\\net46\" ` /p:SqlServerRedistPath=\"C:\\Microsoft.Data.Tools.Msbuild.10.0.61804.210\\lib\\net46\" \n```", "```\nFROM dockeronwindows/ch03-sql-server:2e ENV DATA_PATH=\"C:\\data\" ` sa_password=\"N3rdD!Nne720^6\" VOLUME ${DATA_PATH} WORKDIR C:\\init COPY Initialize-Database.ps1 . CMD powershell ./Initialize-Database.ps1 -sa_password $env:sa_password -data_path $env:data_path -Verbose COPY --from=builder [\"C:\\\\Program Files...\\\\DAC\", \"C:\\\\Program Files...\\\\DAC\"] COPY --from=builder C:\\docker\\NerdDinner.Database.dacpac . \n```", "```\n$mdfPath  =  \"$data_path\\NerdDinner_Primary.mdf\" $ldfPath  =  \"$data_path\\NerdDinner_Primary.ldf\" # attach data files if they exist: if  ((Test-Path  $mdfPath)  -eq  $true) {  $sqlcmd  =  \"IF DB_ID('NerdDinner') IS NULL BEGIN CREATE DATABASE NerdDinner ON (FILENAME = N'$mdfPath')\"    if  ((Test-Path  $ldfPath)  -eq  $true) {   $sqlcmd  =  \"$sqlcmd, (FILENAME = N'$ldfPath')\"\n }  $sqlcmd  =  \"$sqlcmd FOR ATTACH; END\"  Invoke-Sqlcmd  -Query $sqlcmd  -ServerInstance \".\\SQLEXPRESS\" }\n```", "```\n$SqlPackagePath  =  'C:\\Program Files\\Microsoft SQL Server\\140\\DAC\\bin\\SqlPackage.exe' &  $SqlPackagePath  `\n  /sf:NerdDinner.Database.dacpac `\n  /a:Script /op:deploy.sql /p:CommentOutSetVarDeclarations=true `\n  /tsn:.\\SQLEXPRESS /tdn:NerdDinner /tu:sa /tp:$sa_password  \n```", "```\n$SqlCmdVars  =  \"DatabaseName=NerdDinner\",  \"DefaultFilePrefix=NerdDinner\"...  Invoke-Sqlcmd  -InputFile deploy.sql -Variable $SqlCmdVars  -Verbose\n```", "```\nmkdir -p C:\\databases\\nd\n\ndocker container run -d -p 1433:1433 ` --name nerd-dinner-db ` -v C:\\databases\\nd:C:\\data ` dockeronwindows/ch03-nerd-dinner-db:2e\n```", "```\n> docker container logs nerd-dinner-db\nVERBOSE: Starting SQL Server\nVERBOSE: Changing SA login credentials\nVERBOSE: No data files - will create new database\nGenerating publish script for database 'NerdDinner' on server '.\\SQLEXPRESS'.\nSuccessfully generated script to file C:\\init\\deploy.sql.\nVERBOSE: Changed database context to 'master'.\nVERBOSE: Creating NerdDinner...\nVERBOSE: Changed database context to 'NerdDinner'.\nVERBOSE: Creating [dbo].[Dinners]...\n...\nVERBOSE: Deployed NerdDinner database, data files at: C:\\data\n```", "```\ndocker container run -d -P dockeronwindows/ch03-nerd-dinner-web:2e\n```", "```\n# escape=` FROM microsoft/dotnet:2.2-sdk-nanoserver-1809 AS builder WORKDIR C:\\src\\NerdDinner.Homepage COPY src\\NerdDinner.Homepage\\NerdDinner.Homepage.csproj . RUN dotnet restore COPY src\\NerdDinner.Homepage . RUN dotnet publish  \n```", "```\nFROM microsoft/dotnet:2.2-aspnetcore-runtime-nanoserver-1809 WORKDIR C:\\dotnetapp ENV NERD_DINNER_URL=\"/home/find\" EXPOSE 80 CMD [\"dotnet\", \"NerdDinner.Homepage.dll\"] COPY --from=builder C:\\src\\NerdDinner.Homepage\\bin\\Debug\\netcoreapp2.2\\publish .\n```", "```\nstatic  HomeController() {\n  var  homepageUrl  =  Environment.GetEnvironmentVariable(\"HOMEPAGE_URL\", EnvironmentVariableTarget.Machine); if (!string.IsNullOrEmpty(homepageUrl))\n  {\n    var  request  =  WebRequest.Create(homepageUrl); using (var  response  =  request.GetResponse())\n    using (var  responseStream  =  new  StreamReader(response.GetResponseStream()))\n    {\n      _NewHomePageHtml  =  responseStream.ReadToEnd();\n    }\n } } public  ActionResult  Index() { if (!string.IsNullOrEmpty(_NewHomePageHtml)) { return  Content(_NewHomePageHtml);\n  }\n  else\n  {\n    return  Find();\n } }\n```", "```\ndocker container run -d -p 1433:1433 `\n --name nerd-dinner-db ` \n -v C:\\databases\\nd:C:\\data `\n dockeronwindows/ch03-nerd-dinner-db:2e\n\ndocker container run -d -P `\n --name nerd-dinner-homepage `\n dockeronwindows/ch03-nerd-dinner-homepage:2e\n\ndocker container run -d -P dockeronwindows/ch03-nerd-dinner-web:2e-v2\n```"]