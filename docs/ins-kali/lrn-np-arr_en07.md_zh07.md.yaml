- en: Chapter 7. The Scientific Python Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：Python 科学生态系统
- en: SciPy is built on top of NumPy. It adds functionality such as numerical integration,
    optimization, statistics, and special functions. Historically, NumPy was part
    of SciPy but was then separated in order to be used by other Python libraries.
    These, when combined, define the common stack for scientific and numerical analysis.
    Of course, the stack itself is not set in stone; however, everybody agrees on
    NumPy being at the center of it all. The examples in this chapter should give
    you some idea about the power of the scientific Python ecosystem.
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 是在 NumPy 之上构建的。 它增加了功能，例如数值积分，优化，统计和特殊功能。 从历史上看，NumPy 是 SciPy 的一部分，但后来被分离以供其他
    Python 库使用。 当这些结合在一起时，就定义了用于科学和数值分析的通用栈。 当然，栈本身并不是固定的。 但是，每个人都同意 NumPy 是一切的中心。
    本章中的示例应使您对科学 Python 生态系统的功能有所了解。
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Numerical integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值积分
- en: Interpolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值
- en: Using Cython with NumPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Cython 与 NumPy 结合使用
- en: Clustering with scikit-learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 进行聚类
- en: Detecting corners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测角点
- en: Comparing NumPy to Blaze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较 NumPy 与 Blaze
- en: Numerical integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值积分
- en: Numerical integration is integration using numerical methods instead of analytical
    methods. SciPy has a numerical integration package, `scipy.integrate`, which has
    no equivalent in NumPy. The `quad` function can integrate a one-variable function
    between two points. These points can be at infinity.
  prefs: []
  type: TYPE_NORMAL
  zh: 数值积分是使用数值方法而不是分析方法的积分。 SciPy 具有数值集成包`scipy.integrate`，在 NumPy 中没有等效的包。 `quad`函数可以在两个点之间集成一个变量函数。
    这些点可以是无穷大。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The `quad` function uses the old and tried QUADPACK Fortran library under the
    hood.
  prefs: []
  type: TYPE_NORMAL
  zh: '`quad`函数在引擎盖下使用了久经考验的 QUADPACK Fortran 库。'
- en: 'The Gaussian integral is related to the `error` function, but has no finite
    limits. It evaluates to the square root of *pi*. Let''s calculate the Gaussian
    integral with the `quad` function as shown in the following line of code:'
  prefs: []
  type: TYPE_NORMAL
  zh: 高斯积分与`error`函数相关，但没有限制。 它求值为`pi`的平方根。 让我们用`quad`函数计算高斯积分，如以下代码行所示：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The return value is the outcome, and its error would be:'
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值是结果，其错误将是：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值
- en: Interpolation predicts values within a range based on observations. For instance,
    we could have a relationship between two variables `x` and `y` and we have a set
    of observed `x`-`y` pairs. In this scenario, we could try to predict the `y` value
    given a range of `x` values. This range will start at the lowest `x` value already
    observed and end at the highest `x` value already observed. The `scipy.interpolate`
    function interpolates a function based on experimental data. The `interp1d` class
    can create a linear or cubic interpolation function. By default, a linear interpolation
    function is constructed, but if the `kind` parameter is set, a cubic interpolation
    function is created instead. The `interp2d` class works in the same way but is
    two dimensional.
  prefs: []
  type: TYPE_NORMAL
  zh: 插值根据观察结果预测范围内的值。 例如，我们可以在两个变量`x`和`y`之间建立关系，并且有一组观察到的`x`-`y`对。 在这种情况下，我们可以尝试在给定`x`值范围内的情况下预测`y`值。
    该范围将从已经观察到的最低`x`值开始，到已经观察到的最高`x`值结束。 `scipy.interpolate`函数根据实验数据对函数进行插值。 `interp1d`类可以创建线性或三次插值函数。
    默认情况下，会构造线性插值函数，但是如果设置了`kind`参数，则会创建三次插值函数。 `interp2d`类的工作方式相同，但是是二维的。
- en: 'We will create data points using a `sinc` function and then add some random
    noise to it. After that, we will do a linear and cubic interpolation and plot
    the results as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`sinc`函数创建数据点，然后向其中添加一些随机噪声。 之后，我们将进行线性和三次插值并绘制结果，如下所示：
- en: 'Create the data points and add noise as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据点并添加噪声，如下所示：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a linear interpolation function, and then apply it to an input array
    with five times as many data points:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个线性插值函数，然后将其应用于具有五倍数据点的输入数组：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Do the same as in the previous step but with cubic interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行与上一步相同的操作，但使用三次插值：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Plot the results with Matplotlib as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用 Matplotlib 绘制结果，如下所示：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following diagram is a plot of the data, linear, and cubic interpolations:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是数据，线性和三次插值的图形：
- en: '![Interpolation](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![插值](img/00045.jpeg)'
- en: 'We created a dataset from the `sinc` function and added noise to it. We then
    did linear and cubic interpolation using the `interp1d` class of the `scipy.interpolate`
    module (see the `sincinterp.py` file in the `Chapter07` folder of this book''s
    code bundle):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`sinc`函数创建了一个数据集，并添加了噪声。 然后，我们使用`scipy.interpolate`模块的`interp1d`类进行了线性和三次插值（请参见本书代码包包`Chapter07`文件夹中的`sincinterp.py`文件）：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using Cython with NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Cython 与 NumPy 结合使用
- en: Cython is a relatively young programming language based on Python. The difference
    is that with Python we can optionally declare static types for variables in the
    code. Cython is a compiled language that generates CPython extension modules.
    Besides providing performance enhancement, a major use of Cython is interfacing
    already existing C/C++ software with Python.
  prefs: []
  type: TYPE_NORMAL
  zh: Cython 是一种相对较年轻的基于 Python 的编程语言。 不同之处在于，使用 Python，我们可以选择为代码中的变量声明静态类型。 Cython
    是一种生成 CPython 扩展模块的编译语言。 除了提供性能增强外，Cython 的主要用途是将现有的 C/C++ 软件与 Python 接口。
- en: We can integrate Cython and NumPy code in the same way that we can integrate
    Cython and Python code. Let's go through an example that analyses the ratio of
    up days (close higher than the previous day) for a stock. We will apply the formula
    for binomial proportion confidence ([http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval](http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval)).
    This indicates how significant the ratio is.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像整合 Cython 和 Python 代码一样，整合 Cython 和 NumPy 代码。 让我们看一个示例，该示例分析股票的上涨天数（接近前一天）的比率。
    我们将对二项式比例置信度应用公式（[`en.wikipedia.org/wiki/Binomial_proportion_confidence_interval`](http://en.wikipedia.org/wiki/Binomial_proportion_confidence_interval)）。
    这表明该比率有多重要。
- en: Write a `.pyx` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`.pyx`文件。
- en: The `.pyx` files contain Cython code. Basically, Cython code is standard Python
    code with optional static type declarations added for variables. Let's write a
    `.pyx` file that contains a function that calculates the ratio of up days and
    their associated confidence. Firstly, this function computes the differences between
    the prices. Then, we count the number of positive differences, giving us a ratio
    for the proportion of up days. Finally, we apply the formula for the confidence
    from the Wikipedia page in the introduction, as follows.
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pyx`文件包含 Cython 代码。 基本上，Cython 代码是标准 Python 代码，并为变量添加了可选的静态类型声明。 让我们编写一个`.pyx`文件，其中包含一个函数，该函数计算上升天数的比率及其相关的置信度。
    首先，该函数计算价格之间的差异。 然后，我们计算正差的数量，从而得出上升天数的比率。 最后，我们在引言中的维基百科页面上应用公式来增强置信度，如下所示。'
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Write the `setup.py` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`setup.py`文件。
- en: 'We will use the following `setup.py` file:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下`setup.py`文件：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, use the Cython module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用 Cython 模块。
- en: 'We can build with the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令进行构建：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After building, we can use the Cython module from the previous step by importing.
    We will write a Python program that downloads stock price data with Matplotlib.
    Then, we will apply the confidence function to the close prices.
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，我们可以通过导入使用上一步中的 Cython 模块。 我们将编写一个 Python 程序，使用 Matplotlib 下载股价数据。 然后，我们将置信函数应用于收盘价。
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the program for AAPL is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`AAPL`程序的输出如下：'
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Clustering stocks with scikit-learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 聚类股票
- en: Scikit-learn is an open source software for machine learning. Clustering is
    a type of machine learning algorithm that aims to group items based on similarities.
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn 是用于机器学习的开源软件。 聚类是类型的机器学习算法，旨在基于相似度对项目进行分组。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: A legion of scikits exists. These are all open source scientific Python projects.
    For a list of scikits, please refer to [https://scikits.appspot.com/scikits](https://scikits.appspot.com/scikits).
  prefs: []
  type: TYPE_NORMAL
  zh: 存在大量的 Scikits。 这些都是开源的科学 Python 项目。 有关 Scikits 的列表，请参考[`scikits.appspot.com/scikits`](https://scikits.appspot.com/scikits)。
- en: Clustering is unsupervised, which means that you don't have to create learning
    examples. The algorithm puts items in the appropriate bucket based on some measure
    of distance, so that items that are close to each other end up in the same bucket.
    In this example, we will use the log returns of stocks in the **Dow Jones Industrial**
    (**DJI**) Index to cluster.
  prefs: []
  type: TYPE_NORMAL
  zh: 群集是不受监督的，这意味着您不必创建学习示例。 该算法根据某种距离度量将项目放入适当的存储桶中，以便彼此靠近的项目最终位于同一存储桶中。 在此示例中，我们将使用**道琼斯工业**（**DJI**）指数中的股票对数收益。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: A myriad of clustering algorithms exist, and since this is a rapidly evolving
    field, new algorithms are invented each year. Due to the exigencies of this book,
    we cannot touch upon all of them. The interested reader can have a look at [https://en.wikipedia.org/wiki/Cluster_analysis](https://en.wikipedia.org/wiki/Cluster_analysis).
  prefs: []
  type: TYPE_NORMAL
  zh: 存在无数的聚类算法，并且由于这是一个快速发展的领域，因此每年都会发明新的算法。 由于本书的紧急性，我们无法一一列举。 有兴趣的读者可以看看[`en.wikipedia.org/wiki/Cluster_analysis`](https://en.wikipedia.org/wiki/Cluster_analysis)。
- en: First, we will download EOD price data for these stocks from Yahoo Finance.
    Second, we will calculate a square affinity matrix. Finally, we will cluster the
    stocks with the `AffinityPropagation` class. Affinity propagation, in contrast
    to other clustering algorithms, doesn't require the number of clusters as a parameter.
    The algorithm relies on a so-called affinity matrix. This is a matrix that contains
    affinities of data points, which can be interpreted as distances.
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从雅虎财经下载这些股票的 EOD 价格数据。 其次，我们将计算平方亲和矩阵。 最后，我们将股票分类为`AffinityPropagation`。
    与其他聚类算法相比，亲和力传播不需要聚类数作为参数。 该算法依赖于所谓的亲和力矩阵。 这是一个包含数据点亲和力的矩阵，可以将其解释为距离。
- en: 'We will download price data for 2013 using the stock symbols of the DJI Index.
    In this example, we are only interested in the close price. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 DJI 指数的股票代码下载 2013 年的价格数据。 在此示例中，我们仅对收盘价感兴趣。 代码如下：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Calculate the similarities between different stocks using the log returns as
    the metric. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用对数收益率作为指标来计算不同股票之间的相似性。 代码如下：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Give the `AffinityPropagation` class the result from the previous step. This
    class labels the data points or, in our case, stocks, with the appropriate cluster
    number. The code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`AffinityPropagation`类上一步的结果。 此类使用适当的群集编号标记数据点或本例中的库存。 代码如下：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the complete clustering program:'
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的群集程序：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For symbols within symbols, the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于符号内的符号，代码如下：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output with the cluster numbers for each stock is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 每个股票的集群编号输出如下：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Detecting corners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测角点
- en: Corner detection is a standard technique in computer vision. Scikits-image (a
    package specialized in image processing) offers a Harris corner detector, which
    is great since corner detection is pretty complicated. Obviously, we could do
    it ourselves from scratch, but that would violate the cardinal rule of not reinventing
    the wheel. We will load a sample image from scikits-learn. This is not absolutely
    necessary for this example. You can use any other image instead.
  prefs: []
  type: TYPE_NORMAL
  zh: 角点检测是计算机视觉中的标准技术。 Scikits-image（专门用于图像处理的包）提供了哈里斯角点检测器，由于角点检测非常复杂，因此该函数非常好。
    显然，我们可以从头开始做，但是这违反了不重新发明轮子的基本原则。 我们将从 scikits-learn 加载示例图像。 对于此示例，这不是绝对必要的。 您可以改用其他任何图像。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on corner detection, please refer to [https://en.wikipedia.org/wiki/Corner_detection](https://en.wikipedia.org/wiki/Corner_detection).
  prefs: []
  type: TYPE_NORMAL
  zh: 有关转角检测的更多信息，请参考[`en.wikipedia.org/wiki/Corner_detection`](https://en.wikipedia.org/wiki/Corner_detection)。
- en: 'You might need to install jpeglib on your system to be able to load the scikits-learn
    image, which is a JPEG file. If you are on Windows, use the installer; otherwise,
    download the distribution, unpack it, and build from the top folder with the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要在系统上安装 jpeglib 才能加载 scikits-learn 图像，该图像是 JPEG 文件。 如果您使用的是 Windows，请使用安装程序。
    否则，下载发行版，解压缩，然后使用以下命令行从顶部文件夹中进行构建：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To detect corners of an image, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测图像的角，请执行以下步骤：
- en: Load the sample image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载样例图像。
- en: 'Scikits-learn currently has two sample JPEG images in a dataset structure.
    We will look at the first image only, as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: Scikits-learn 当前在数据集结构中具有两个样本 JPEG 图像。 我们将仅看第一张图像，如下所示：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, detect corners by calling the `harris` function to get the coordinates
    of corners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过调用`harris`函数获取角点的坐标来检测角点：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The code for corner detection is given as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 角点检测的代码如下：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We get an image with red dots, where corners are detected as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个带有红点的图像，其中的角点检测如下：
- en: '![Detecting corners](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
  zh: '![检测角点](img/00046.jpeg)'
- en: Comparing NumPy to Blaze
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较 NumPy 与 Blaze
- en: Since we are close to the end of the book, it seems appropriate to discuss the
    future of NumPy. The future of NumPy is Blaze, a new open source Python numerical
    library. Blaze is supposed to process Big Data better than NumPy ever can. Big
    Data can be defined in many ways. Here, we will define Big Data as data that cannot
    be stored in memory or even on a single machine. Usually, the data is distributed
    amongst several servers. Blaze should also be able to handle large quantities
    of streaming data that is never stored.
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们接近本书结尾，因此似乎很适合讨论 NumPy 的未来。 NumPy 的未来是 Blaze，这是新的开源 Python 数字库。 Blaze 应该比
    NumPy 更好地处理大数据。 大数据可以通过多种方式定义。 在这里，我们将大数据定义为无法存储在内存中甚至无法在一台机器上的数据。 通常，数据分布在多个服务器之间。
    Blaze 还应该能够处理从未存储的大量流数据。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Blaze can be found at [http://blaze.pydata.org/](http://blaze.pydata.org/).
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[`blaze.pydata.org`](http://blaze.pydata.org/)中找到。
- en: Blaze, just like NumPy, allows scientists, analysts, and engineers to quickly
    write efficient code. Blaze, however, goes a step further and also takes care
    of the work related to distributing calculations as well as extracting and transforming
    data from a variety of data source types.
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 NumPy 一样，Blaze 允许科学家，分析师和工程师快速编写高效的代码。 但是，Blaze 更进一步，它还负责与分配计算以及从各种数据源类型提取和转换数据有关的工作。
- en: Blaze is centered around general multidimensional array and table abstractions.
    The classes in Blaze represent different data types and data structures as found
    in the real world. Blaze has a generic computation engine that can process data
    spread out over multiple servers and send instructions to specialized low-level
    kernels.
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze 围绕一般的多维数组和表抽象。 Blaze 中的类表示现实世界中发现的不同数据类型和数据结构。 Blaze 具有通用的计算引擎，可以处理分布在多个服务器上的数据，并将指令发送到专用的低级内核。
- en: Blaze extends NumPy to provide custom-defined data types and heterogeneous shapes.
    This, of course, allows for greater flexibility and ease of use.
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze 扩展了 NumPy，以提供自定义数据类型和异构形状。 当然，这允许更大的灵活性和易用性。
- en: Blaze is designed around arrays. Just like the NumPy `ndarray`, Blaze offers
    metadata with extra computational information. The metadata defines how data is
    stored, (heterogeneously) typed and indexed as multidimensional arrays. Computation
    can be performed on various hardware including heterogeneous clusters of CPUs
    and GPUs.
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze 是围绕数组设计的。 就像 NumPy `ndarray`一样，Blaze 提供带有额外计算信息的元数据。 元数据定义数据的存储方式（异构），并以多维数组的形式进行索引。
    可以在各种硬件上执行计算，包括 CPU 和 GPU 的异构集群。
- en: Blaze has the ambition to become the NumPy of multiple node clusters and distributed
    computing. The main idea, just as with NumPy, is to focus on arrays and array
    operations while abstracting the messy details away.
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze 有志成为多个节点集群和分布式计算的 NumPy。 就像 NumPy 一样，其主要思想是着眼于数组和数组操作，同时将凌乱的细节抽象化。
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Blaze has a special LLVM compiler. For more information about the LLVM compiler,
    see [http://en.wikipedia.org/wiki/LLVM](http://en.wikipedia.org/wiki/LLVM). In
    short, LLVM is an open source compiler technology project.
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze 具有特殊的 LLVM 编译器。 有关 LLVM 编译器的更多信息，请参见[`en.wikipedia.org/wiki/LLVM`](http://en.wikipedia.org/wiki/LLVM)。
    简而言之，LLVM 是一个开源编译器技术项目。
- en: Data can be converted between different formats using the Blaze data adapters.
    Blaze also manages scheduling of computations, which can be either automatic or
    configured by the user, with the possibility to lazily evaluate expressions.
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Blaze 数据适配器在不同格式之间转换数据。 Blaze 还管理计算的调度，该调度可以是自动的，也可以由用户配置的，可以延迟计算表达式。
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we only scratched the surface of what is possible with the
    scientific Python ecosystem. We used some of the libraries that are considered,
    if not part of the common stack, then at least fundamental. We used interpolation
    and numerical integration provided by SciPy. Two of the dozens of algorithms in
    scikit-learn were demonstrated. We also saw Cython in action, which is technically
    a programming language in its own right. Finally, we had a look at Blaze, a library
    supposed to generalize and extend the principles of NumPy. This is in light of
    recent developments such as Big Data and Cloud Computing. Blaze and related projects
    are still in the incubation phase, but we can expect stable software to be produced
    in the near future. You can refer to [http://continuum.io/developer-resources](http://continuum.io/developer-resources)
    for some of these projects.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仅介绍了科学 Python 生态系统的可能性。 我们使用了一些库，即使不是通用栈的一部分，也至少是基础库。 我们使用了 SciPy 提供的插值和数值积分。
    演示了 scikit-learn 中数十种算法中的两种。 我们还看到了 Cython 的实际应用，从技术上讲，它是一种编程语言。 最后，我们看了 Blaze，这是一个应该推广和扩展
    NumPy 原理的库。 鉴于大数据和云计算等最新发展。 Blaze 和相关项目仍处于孵化阶段，但我们可以期望在不久的将来生产稳定的软件。 对于其中一些项目，您可以参考[`continuum.io/developer-resources`](http://continuum.io/developer-resources)。
- en: Unfortunately, we have come to the end of this book. Because of this book's
    format, that is the number of pages, you should have essential NumPy knowledge
    and might feel the need for more. However, don't worry if this wasn't enough for
    you. You can look forward to *Learning Python Data Analysis* by the same author,
    which will come out in early 2015.
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们到了本书的结尾。 由于本书的格式（即页数），您应该掌握 NumPy 的基本知识，并且可能会需要更多。 但是，请不要担心这还不够。 您可以期待同一作者的《学习
    Python 数据分析》，该书将于 2015 年初发布。
