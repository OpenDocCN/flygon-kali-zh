["```js\nconst readline = require('readline')\nconst randomNumber = Math.ceil(Math.random() * 10)\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout\n});\n\naskQuestion()\n\nfunction askQuestion() {\n rl.question('Enter a number from 1 to 10:\\n', (answer) => {\n   evaluateAnswer(answer)\n })\n}\n\nfunction evaluateAnswer(guess) {\n if (parseInt(guess) === randomNumber) {\n   console.log(\"Correct!\\n\")\n   rl.close()\n   process.exit(1)\n } else {\n   console.log(\"Incorrect!\")\n   askQuestion()\n }\n}\n```", "```js\nfunction evaluateAnswer(guess) {\n if (parseInt(guess) === randomNumber) {\n   console.log(\"Correct!\\n\")\n   rl.close()\n   process.exit(1)\n } else {\n   console.log(\"Incorrect!\")\n   askQuestion()\n }\n}\n```", "```js\nconst fs = require('fs')\nconst readline = require('readline')\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout\n});\n\nconst customers = []\n\ngetCustomers()\nask()\n\nfunction getCustomers() {\n const files = fs.readdirSync('data')\n\n for (let i = 0; i < files.length; i++) {\n   const data = fs.readFileSync(`data/${files[i]}`)\n   customers.push(JSON.parse(data))\n }\n}\n\nfunction ask() {\n rl.question(`There are ${customers.length} customers. Enter a number to \n see details:\\n`, (customer) => {\n   if (customer > customers.length || customer < 1) {\n     console.log(\"Customer not found. Please try again\")\n   } else {\n     console.log(customers[customer - 1])\n   }\n   ask()\n })\n}\n```", "```js\nconst asciify = require('asciify-image')\n\nasciify(__dirname + '/image.jpg', { fit: 'box', width: 25, height: 25}, (err, converted) => {\n console.log(err || converted)\n})\n```", "```js\n.\n\u251c\u2500\u2500 image.jpg\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 node_modules\n\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n```", "```js\n{\n \"name\": \"ascii-art\",\n \"version\": \"1.0.0\",\n \"description\": \"\",\n \"main\": \"index.js\",\n \"dependencies\": {\n   \"asciify-image\": \"^0.1.5\"\n },\n \"devDependencies\": {},\n \"scripts\": {\n   \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n },\n \"author\": \"\",\n \"license\": \"ISC\"\n}\n```", "```js\n\"scripts\": {\n   \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n   \"start\": \"node index.js\"\n },\n```", "```js\nconst http = require('http')\n\nhttp.createServer((req, res) => {\n res.writeHead(200, {'Content-Type': 'text/plain'})\n res.end(\"Hello, World!\")\n}).listen(8080)\n\n```", "```js\n\"scripts\": {\n   \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n   \"start\": \"node index.js\"\n },\n```", "```js\nconst http = require('http')\nconst asciify = require('asciify-image')\n\nhttp.createServer((req, res) => {\n res.writeHead(200, {'Content-Type': 'text/html'})\n asciify(__dirname + '/img/image.jpg', { fit: 'box', width: 25, height: 25\n  }, (err, converted) => {\n   res.end(err || converted)\n })\n}).listen(8080)\n```", "```js\nconst http = require('http')\nconst asciify = require('asciify-image')\nconst Convert = require('ansi-to-html')\nconst convert = new Convert()\n\nhttp.createServer((req, res) => {\n res.writeHead(200, {'Content-Type': 'text/html'})\n asciify(__dirname + '/img/image.jpg', { fit: 'box', width: 25, height: 25 \n  }, (err, converted) => {\n   res.end(convert.toHtml(err || converted))\n })\n}).listen(8080)\n```", "```js\nconst css = `\n<style>\nbody {\n background-color: #000;\n}\n* {\n font-family: \"Courier New\";\n white-space: pre-wrap;\n}\n</style>\n`\n```", "```js\nasciify(__dirname + '/img/image.jpg', { fit: 'box', width: 25, height: 25 }, (err, converted) => {\n   res.write(css)\n   res.end(convert.toHtml(err || converted))\n })\n```", "```js\n.\n\u251c\u2500\u2500 img\n\u2502   \u2514\u2500\u2500 pokeapi_256.png\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n```", "```js\nconst axios = require('axios')\nconst asciify = require('asciify-image')\nconst term = require('terminal-kit').terminal\n```", "```js\nconst pokes = {}\n```", "```js\nfunction terminate() {\n term.grabInput(false);\n setTimeout(function () { process.exit() }, 100);\n}\nterm.on('key', (name, matches, data) => {\n if (name === 'CTRL_C') {\n   terminate();\n }\n})\nterm.grabInput({ mouse: 'button' });\n```", "```js\nterm.drawImage(__dirname + '/img/pokeapi_256.png', {\n shrink: {\n   width: term.width,\n   height: term.height * 2\n }\n})\n```", "```js\nasync function getPokemon() {\n const pokes = await axios({\n   url: 'https://pokeapi.co/api/v2/pokemon?limit=50'\n })\n\n return pokes.data.results\n}\n```", "```js\nasync function start() {\n const pokemon = await getPokemon()\n}\n```", "```js\nterm.bold.cyan('Choose your Pok\u00e9mon!\\n')\n```", "```js\nterm.gridMenu(pokemon.map(mon => mon.name), {}, async (error, response) => {\n   pokes['player'] = pokemon[response.selectedIndex]\n   pokes['computer'] = pokemon[(Math.floor(Math.random() *\n    pokemon.length))]\n})\n```", "```js\nstart()\n```", "```js\nawait createPokemon('player')\nawait createPokemon('computer')\n```", "```js\nasync function createPokemon(person) {\n let poke = pokes[person]\n\n const myPoke = await axios({\n   url: poke.url,\n   method: 'get'\n })\n poke = myPoke.data\n const moves = poke.moves.filter((move) => {\n   const mymoves = move.version_group_details.filter((level) => {\n     return level.level_learned_at === 1\n   })\n   return mymoves.length > 0\n })\n const move1 = await axios({\n   url: moves[0].move.url\n })\n const move2 = await axios({\n   url: moves[1].move.url\n })\n pokes[person] = {\n   name: poke.name,\n   hp: poke.stats[5].base_stat,\n   img: await createImg(poke.sprites.front_default),\n   moves: {\n     [moves[0].move.name]: {\n       name: moves[0].move.name,\n       url: moves[0].move.url,\n       power: move1.data.power\n     },\n     [moves[1].move.name]: {\n       name: moves[1].move.name,\n       url: moves[1].move.url,\n       power: move2.data.power\n     }\n   }\n }\n}\n```", "```js\nasync function createImg(url) {\n return asciify(url, { fit: 'box', width: 25 })\n   .then((ascii) => {\n     return ascii\n   }).catch((err) => {\n     console.error(err);\n   });\n}\n```", "```js\nterm.gridMenu(pokemon.map(mon => mon.name), {}, async (error, response) => {\n   pokes['player'] = pokemon[response.selectedIndex]\n   pokes['computer'] = pokemon[(Math.floor(Math.random() * \n    pokemon.length))]\n   await createPokemon('player')\n   await createPokemon('computer')\n   term(`Your ${pokes['player'].name} is so \n    cute!\\n${pokes['player'].img}\\n`)\n   term.singleLineMenu( ['Continue'], (error, response) => {\n     term(`\\nWould you like to continue against the computer's scary\n     ${pokes['computer'].name}? \\n ${pokes['computer'].img}\\n`)\n     term.singleLineMenu( ['Yes', 'No'], (error, response) => {\n       term(`${pokes['computer'].name} is already attacking! No time to \n       decide!`)\n     })\n   })\n })\n```"]