["```py\nimport numpy as np\nimport sys\n\nto_float = lambda x: float(x.strip() or np.nan)\n\n## Measurements are in tenths of degrees\nmin_temp, max_temp = np.loadtxt(sys.argv[1], delimiter=',',usecols=(12, 14), unpack=True, converters={12: to_float, 14: to_float}) * .1\nprint \"# Records\", len(min_temp), len(max_temp)\nprint \"Minimum\", np.nanmin(min_temp)\nprint \"Maximum\", np.nanmax(max_temp)\n```", "```py\n## Records 40996 40996\nMinimum -24.8\nMaximum 36.8\n\n```", "```py\n    import numpy as np\n    import sys\n    import numpy.ma as ma\n    from datetime import datetime as dt\n    ```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    to_date = lambda x: dt.strptime(x, \"%Y%m%d\").toordinal()\n\n    dates, avg_temp, min_temp, max_temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 11, 12, 14), unpack=True, converters={1: to_date, 12: to_float, 14: to_float})\n    ```", "```py\n    print \"% days min < 0\", 100 * len(min_temp[min_temp < 0])/float(len(min_temp))\n    print \"% days max < 0\", 100 * len(max_temp[max_temp < 0])/float(len(max_temp))\n    ```", "```py\n    % days min below 0 18.1944579959 \n    % days max below 0 2.81978729632\n\n    ```", "```py\n    ranges = max_temp - min_temp\n    print \"Minimum daily range\", np.nanmin(ranges)\n    print \"Maximum daily range\", np.nanmax(ranges)\n\n    masked_ranges = ma.array(ranges, mask = np.isnan(ranges))\n    print \"Average daily range\", masked_ranges.mean()\n    print \"Standard deviation\", masked_ranges.std()\n\n    masked_mins = ma.array(min_temp, mask = np.isnan(min_temp))\n    print \"Average minimum temperature\", masked_mins.mean(), \"Standard deviation\", masked_mins.std()\n\n    masked_maxs = ma.array(max_temp, mask = np.isnan(max_temp))\n    print \"Average maximum temperature\", masked_maxs.mean(), \"Standard deviation\", masked_maxs.std()\n    ```", "```py\n    Minimum daily range 0.6 \n    Maximum daily range 22.2 \n    Average daily range 8.20358580315 \n    Standard deviation 3.72983839106 \n    Average minimum temperature 5.39096231248 \n    Standard deviation 5.85061308004 \n    Average maximum temperature 13.5945481156 \n    Standard deviation 7.40767291657\n\n    ```", "```py\n    to_year = lambda x: dt.strptime(x, \"%Y%m%d\").year\n\n    years, avg_temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 11), unpack=True, converters={1: to_year})\n\n    # Measurements are in .1 degrees Celsius\n    avg_temp = .1 * avg_temp\n\n    N = len(avg_temp)\n    print \"First Year\", years[0], \"Last Year\", years[-1]\n    assert N == len(years)\n    assert years[:N/2].mean() < years[N/2:].mean()\n    ```", "```py\n    First Year 1901.0 Last Year 2013.0\n\n    ```", "```py\n    print \"First half average\", avg_temp[:N/2].mean(), \"Std Dev\", avg_temp[:N/2].std()\n    print \"Second half average\", avg_temp[N/2:].mean(), \"Std Dev\", avg_temp[N/2:].std()\n    ```", "```py\n    First half average 9.19078446678 Std Dev 6.42457006016 \n    Second half average 9.78066152795 Std Dev 6.34152195332\n\n    ```", "```py\n    avgs = []\n    year_range = range(int(years[0]), int(years[-1]) - 1)\n\n    for year in year_range:\n       indices = np.where(years == year)\n       avgs.append(avg_temp[indices].mean())\n\n    plt.plot(year_range, avgs, 'r-', label=\"Yearly Averages\")\n    plt.plot(year_range, np.ones(len(avgs)) * np.mean(avgs))\n    plt.legend(prop={'size':'x-small'})\n    plt.show()\n    ```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    to_year = lambda x: dt.strptime(x, \"%Y%m%d\").year\n\n    years, avg_temp, Q = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 11, 20), unpack=True, converters={1: to_year, 20: to_float})\n    ma\n    # Measurements are in .1 degrees Celsius\n    avg_temp = .1 * avg_temp\n\n    Q = ma.masked_invalid(Q)\n    ```", "```py\n    print \"# temperature values\", len(avg_temp), \"# radiation values\", len(Q.compressed())\n    print \"Radiation Min\", Q.min(), \"Radiation Max\", Q.max()\n    print \"Radiation Average\", Q.compressed().mean(), \"Std Dev\", Q.std()\n\n    match_temp =  avg_temp[np.logical_not(np.isnan(Q))]\n    print \"Correlation Coefficient\", np.corrcoef(match_temp, Q.compressed())[0][1]\n    ```", "```py\n    # temperature values 40996 # radiation values 20361 \n    Radiation Min 7.0 Radiation Max 3081.0 \n    Radiation Average 957.156082707 Std Dev 740.68047373 \n    Correlation Coefficient 0.62767320286\n\n    ```", "```py\n    avg_temps = []\n    avg_qs = []\n    year_range = range(int(years[0]), int(years[-1]) - 1)\n\n    for year in year_range:\n       indices = np.where(years == year)\n       avg_temps.append(avg_temp[indices].mean())\n       avg_qs.append(Q[indices].mean())\n\n    def percents(a):\n       return 100 * np.diff(a)/a[:-1]\n    ```", "```py\n    plt.subplot(211)\n    plt.title(\"Global Radiation Histogram\")\n    plt.hist(Q.compressed(), 200)\n\n    plt.subplot(212)\n    plt.title(\"Changes in Average Yearly Temperature & Radiation\")\n    plt.plot(year_range[1:], percents(avg_temps), label='% Change Temperature')\n    plt.plot(year_range[1:], percents(avg_qs), label='% Change Radiation')\n    plt.legend(prop={'size':'x-small'})\n    plt.show()\n    ```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    wind_direction, avg_temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(2, 11), unpack=True, converters={2: to_float})\n    wind_direction = ma.masked_invalid(wind_direction)\n    ```", "```py\n    avgs = []\n\n    for direction in xrange(360):\n       indices = np.where(direction == wind_direction)\n       avgs.append(avg_temp[indices].mean())\n    ```", "```py\n    plt.subplot(211)\n    plt.title(\"Wind Direction Histogram\")\n    plt.hist(wind_direction.compressed(), 200)\n\n    plt.subplot(212)\n    plt.title(\"Average Temperature vs Wind Direction\")\n    plt.plot(np.arange(360), avgs)\n    plt.show()\n    ```", "```py\nto_float = lambda x: float(x.strip() or np.nan)\nwind_direction, wind_speed, avg_temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(2, 4, 11), unpack=True, converters={2: to_float, 4: to_float})\nwind_direction = ma.masked_invalid(wind_direction)\nwind_speed = ma.masked_invalid(wind_speed)\nprint \"# Wind Speed values\", len(wind_speed.compressed())\nprint \"Min speed\", wind_speed.min(), \"Max speed\", wind_speed.max()\nprint \"Average\", wind_speed.mean(), \"Std. Dev\", wind_speed.std()\n\nprint \"Correlation of wind speed and temperature\", np.corrcoef(avg_temp[~wind_speed.mask], wind_speed.compressed())[0][1]\n```", "```py\n## Wind Speed values 39871 \nMin speed 0.0 \nMax speed 16.5 \nAverage 4.2211381706 \nStd. Dev 1.93906822268 \nCorrelation of wind speed and temperature -0.126166541437\n\n```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    to_month = lambda x: dt.strptime(x, \"%Y%m%d\").month\n    months, sun_hours, rain_hours = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 18, 21), unpack=True, converters={1: to_month, 18: to_float, 21: to_float})\n    ```", "```py\n    # Measurements are in .1 hours \n    rain_hours = .1 * ma.masked_invalid(rain_hours)\n\n    #Get rid of -1 values\n    print \"# -1 values Before\", len(sun_hours[sun_hours == -1])\n    sun_hours[sun_hours == -1] = 0\n    print \"# -1 values After\", len(sun_hours[sun_hours == -1])\n    sun_hours = .1 * ma.masked_invalid(sun_hours)\n\n    print \"# Rain hours values\", len(rain_hours.compressed())\n    print \"Min Rain hours \", rain_hours.min(), \"Max Rain hours\", rain_hours.max()\n    print \"Average\", rain_hours.mean(), \"Std. Dev\", rain_hours.std()\n    ```", "```py\n    # -1 values Before 832 \n    # -1 values After 0 # Rain hours values 30373 \n    Min Rain hours 0.0 \n    Max Rain hours 24.0 \n    Average 1.65149639482 \n    Std. Dev 2.78643269679\n\n    ```", "```py\n    monthly_rain = []\n    monthly_sun = []\n    month_range = np.arange(int(months.min()), int(months.max()))\n\n    for month in month_range:\n       indices = np.where(month == months)\n       monthly_rain.append(rain_hours[indices].mean())\n       monthly_sun.append(sun_hours[indices].mean())\n    ```", "```py\n    plt.subplot(211)\n    plt.title(\"Precipitation Duration Histogram\")\n    plt.hist(rain_hours[rain_hours > 0].compressed(), 200)\n\n    width = 0.42\n    ax = plt.subplot(212)\n    plt.title(\"Monthly Precipitation Duration\")\n    plt.bar(month_range, monthly_rain, width, label='Rain Hours')\n    plt.bar(month_range + width, monthly_sun, width, color='red', label='Sun Hours')\n    plt.legend()\n    ax.set_xticklabels(cal.month_abbr[::2])\n    ax.set_ylabel('Hours')\n    plt.show()\n    ```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    to_month = lambda x: dt.strptime(x, \"%Y%m%d\").month\n    months, duration, rain = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 21, 22), unpack=True, converters={1: to_month, 21: to_float, 22: to_float})\n\n    # Remove -1 values\n    rain[rain == -1] = 0\n\n    # Measurements are in .1 mm \n    rain = .1 * ma.masked_invalid(rain)\n\n    # Measurements are in .1 hours \n    duration = .1 * ma.masked_invalid(duration)\n    ```", "```py\n    print \"# Rain values\", len(rain.compressed())\n    print \"Min Rain mm \", rain.min(), \"Max Rain mm\", rain.max()\n    print \"Average\", rain.mean(), \"Std. Dev\", rain.std()\n\n    mask = ~duration.mask & ~rain.mask\n    print \"Correlation with duration\", np.corrcoef(duration[mask], rain[mask])[0][1]\n    ```", "```py\n    # Rain values 39139 \n    Min Rain mm 0.0 \n    Max Rain mm 62.3 \n    Average 2.17747770766 \n    Std. Dev 4.33715191714 \n    Correlation with duration 0.779006349536\n\n    ```", "```py\n    to_float = lambda x: 0.1 * float(x.strip() or np.nan)\n    to_month = lambda x: dt.strptime(x, \"%Y%m%d\").month\n    months, avg_p, max_p, min_p = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 25, 26, 28), unpack=True, converters={1: to_month, 25: to_float, 26: to_float, 28: to_float})\n    ```", "```py\n    max_p = ma.masked_invalid(max_p)\n    print \"Maximum Pressure\", max_p.max()\n\n    avg_p = ma.masked_invalid(avg_p)\n    print \"Average Pressure\", avg_p.mean(), \"Std Dev\", avg_p.std()\n\n    min_p = ma.masked_invalid(min_p)\n    print \"Minimum Pressure\", min_p.max()\n    ```", "```py\n    Maximum Pressure 1050.4 \n    Average Pressure 1015.14058231 Std Dev 9.85889134337 \n    Minimum Pressure 1045.1\n\n    ```", "```py\n    monthly_pressure = []\n    maxes = []\n    mins = []\n    month_range = np.arange(int(months.min()), int(months.max()))\n\n    for month in month_range:\n       indices = np.where(month == months)\n       monthly_pressure.append(avg_p[indices].mean())\n       maxes.append(max_p[indices].max())\n       mins.append(min_p[indices].min())\n    ```", "```py\n    plt.subplot(211)\n    plt.title(\"Pressure Histogram\")\n    a, bins, b = plt.hist(avg_p.compressed(), 200, normed=True)\n    stdev = avg_p.std()\n    avg = avg_p.mean()\n    plt.plot(bins, 1/(stdev * np.sqrt(2 * np.pi)) * np.exp(- (bins - avg)**2/(2 * stdev**2)), 'r-')\n\n    ax = plt.subplot(212)\n    plt.title(\"Monthly Pressure\")\n    plt.plot(month_range, monthly_pressure, 'bo', label=\"Average\")\n    plt.plot(month_range, maxes, 'r^', label=\"Maximum Values\")\n    plt.plot(month_range, mins, 'g>', label=\"Minimum Values\")\n    ax.set_xticklabels(cal.month_abbr[::2])\n    plt.legend(prop={'size':'x-small'}, loc='best')\n    ax.set_ylabel('hPa')\n    plt.show()\n    ```", "```py\n    to_float = lambda x: float(x.strip() or np.nan)\n    to_month = lambda x: dt.strptime(x, \"%Y%m%d\").month\n    months, avg_h, max_h, min_h = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 35, 36, 38), unpack=True, converters={1: to_month, 35: to_float, 36: to_float, 38: to_float})\n    ```", "```py\n    max_h = ma.masked_invalid(max_h)\n    print \"Maximum Humidity\", max_h.max()\n\n    avg_h = ma.masked_invalid(avg_h)\n    print \"Average Humidity\", avg_h.mean(), \"Std Dev\", avg_h.std()\n\n    min_h = ma.masked_invalid(min_h)\n    print \"Minimum Humidity\", min_h.min()\n    ```", "```py\n    Maximum Humidity 111.0 \n    Average Humidity 81.6147091109 Std Dev 10.3747295063 \n    Minimum Humidity 8.0\n\n    ```"]