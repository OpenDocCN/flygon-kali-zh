["```py\n python setup.py install \n\n```", "```py\ndefcompute_fibonacchi(n): \n    \"\"\" \n    Computes fibonacchi sequence \n\n    \"\"\" \n\n    a = 1 \n    b = 1 \n    intermediate = 0  \n    for x in xrange(n): \nintermediate = a \n        a = a + b \n        b = intermediate \n    return a \n\n```", "```py\ndefcompute_fibonacchi_cython(int n): \ncdefint a, b, intermediate, x \n    a, b= 1, 1 \n    intermediate, x  = 0, 0 \n    for x in xrange(n): \n        intermediate = a \n        a = a+b \n        b = intermediate \n    return a \n\n```", "```py\nfrom distutils.core import setup, Extension \nfrom Cython.Build import cythonize \nfrom Cython.Distutils import build_ext \n\nsetup( \next_modules=[Extension('first', ['first.pyx'])], \ncmdclass={'build_ext': build_ext} \n) \n\n```", "```py\nwith nogil: \n<The code block here> \nfunction_name(args) with gil:  \n<function body> \n\n```", "```py\ndefprice_european(strike = 100, S0 = 100, time = 1.0,  \nrate = 0.5, mu = 0.2, steps = 50,  \nN = 10000, option = \"call\"): \n\ndt = time / steps \nrand = np.random.standard_normal((steps + 1, N)) \nS = np.zeros((steps+1, N)); \nS[0] = S0 \n\nfor t in range(1,steps+1): \nS[t] = S[t-1] * np.exp((rate-0.5 * mu ** 2) * dt \n+ mu * np.sqrt(dt) * rand[t]) \nprice_call = (np.exp(-rate * time) \n* np.sum(np.maximum(S[-1] - strike, 0))/N) \nprice_put = (np.exp(-rate * time) \n* np.sum(np.maximum(strike - S[-1], 0))/N) \n\nreturnprice_call if option.upper() == \"CALL\" else price_put \n\n```", "```py\nimport numpy as np \ndef price_european_cython(double strike = 100,doubleS0 = 100, \n                          double time = 1.0, double rate = 0.5, \n                          double mu = 0.2, int steps = 50,  \n                   long N = 10000, char* option = \"call\"): \n   cdef double dt = time / steps \n   cdefnp.ndarray rand = np.random.standard_normal((steps + 1, N)) \n   cdefnp.ndarray S = np.zeros([steps+1, N], dtype=np.float) \n       #cdefnp.ndarrayprice_call = np.zeroes([steps+1,N],     dtype=np.float) \n       S[0] = S0 \n\n   for t in xrange(1,steps+1): \n           S[t] = S[t-1] * np.exp((rate-0.5 * mu ** 2) * dt \n                               + mu * np.sqrt(dt) * rand[t]) \n           price_call = (np.exp(-rate * time) \n                  * np.sum(np.maximum(S[-1] - strike, 0))/N) \n           price_put = (np.exp(-rate * time) \n                  * np.sum(np.maximum(strike - S[-1], 0))/N) \n\n   return price_call if option.upper() == \"CALL\" else price_put \n\n```", "```py\nfrom distutils.core import setup, Extension \nfrom Cython.Build import cythonize \nfrom Cython.Distutils import build_ext \nimport numpy.distutils.misc_util \n\ninclude_dirs = numpy.distutils.misc_util.get_numpy_include_dirs() \n\nsetup( \n\nname=\"numpy_first\", \n    version=\"0.1\", \next_modules=[Extension('dynamic_BS_MC', \n                           ['dynamic_BS_MC.pyx'], \ninclude_dirs = include_dirs)], \ncmdclass={'build_ext': build_ext} \n) \n\n```"]