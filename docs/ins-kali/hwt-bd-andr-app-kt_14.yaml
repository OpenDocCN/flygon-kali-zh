- en: 14\. Architecture Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14. 架构模式
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter will introduce you to architectural patterns you can use for your
    Android projects. It covers using the **MVVM** (**Model-View-ViewModel**) pattern,
    adding ViewModels, and using data binding. You will also learn about using the
    Repository pattern for caching data and WorkManager for scheduling data retrieval
    and storage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍您可以用于Android项目的架构模式。它涵盖了使用**MVVM**（模型-视图-ViewModel）模式，添加ViewModels以及使用数据绑定。您还将了解使用存储库模式进行数据缓存和使用WorkManager进行数据检索和存储的调度。
- en: By the end of the chapter, you will be able to structure your Android project
    using MVVM and data binding. You will also be able to use the Repository pattern
    with Room library to cache data and WorkManager to fetch and save data at a scheduled
    interval.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够使用MVVM和数据绑定来构建Android项目。您还将能够使用Room库的存储库模式缓存数据和使用WorkManager在预定的时间间隔内获取和保存数据。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, you learned about using RxJava and coroutines for doing
    background operations and data manipulation. Now, you will learn about architectural
    patterns so you can improve your application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了如何使用RxJava和协程进行后台操作和数据处理。现在，您将学习架构模式，以便改进您的应用程序。
- en: When developing an Android application, you might tend to write most of the
    code (including business logic) in activities or fragments. This would make your
    project hard to test and maintain later. As your project grows and becomes more
    complex, the difficulty will increase too. You can improve your projects with
    architectural patterns.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Android应用程序时，您可能倾向于在活动或片段中编写大部分代码（包括业务逻辑）。这将使您的项目难以测试和维护。随着项目的增长和变得更加复杂，困难也会增加。您可以通过架构模式改进您的项目。
- en: Architectural patterns are general solutions for designing and developing parts
    of applications, especially for large apps. There are architectural patterns you
    can use to structure your project into different layers (the presentation layer,
    the **user interface** (**UI**) layer, and the data layer) or functions (observer/observable).
    With architectural patterns, you can organize your code in a way that makes it
    easier for you to develop, test, and maintain.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 架构模式是设计和开发应用程序部分的通用解决方案，特别是对于大型应用程序。有一些架构模式可以用来将项目结构化为不同的层（表示层、**用户界面**（UI）层和数据层）或功能（观察者/可观察者）。通过架构模式，您可以以更容易开发、测试和维护的方式组织代码。
- en: For Android development, commonly used patterns include **MVC** (**Model-View-Controller**),
    **MVP** (**Model-View-Presenter**), and MVVM. Google's recommended architectural
    pattern is MVVM, which will be discussed in this chapter. You will also learn
    about data binding, the Repository pattern using Room library, and WorkManager.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Android开发，常用的模式包括**MVC**（模型-视图-控制器）、**MVP**（模型-视图-表示器）和MVVM。谷歌推荐的架构模式是MVVM，本章将对此进行讨论。您还将了解数据绑定、使用Room库的存储库模式以及WorkManager。
- en: Let's get started with the MVVM architectural pattern.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始MVVM架构模式。
- en: MVVM
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVVM
- en: MVVM allows you to separate the UI and business logic. When you need to redesign
    the UI or update the Model/business logic, you only need to touch the relevant
    component without affecting the other components of your app. This will make it
    easier for you to add new features and test your existing code. MVVM is also useful
    in creating huge applications that use a lot of data and views.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM允许您将UI和业务逻辑分开。当您需要重新设计UI或更新模型/业务逻辑时，您只需触及相关组件，而不影响应用程序的其他组件。这将使您更容易添加新功能并测试现有代码。MVVM在创建使用大量数据和视图的大型应用程序时也很有用。
- en: 'With the MVVM architectural pattern, your application will be grouped into
    three components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MVVM架构模式，您的应用程序将分为三个组件：
- en: '**Model**: Represents the data layer'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：代表数据层'
- en: '**View**: The UI that displays the data'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：显示数据的用户界面'
- en: '`Model` and provides it to the `View`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Model`提供给`View`
- en: 'The MVVM architectural pattern can be understood better through the following diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下图表更好地理解MVVM架构模式：
- en: '![Figure 14.1: The MVVM architectural pattern'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1：MVVM架构模式'
- en: '](img/B15216_14_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_14_01.jpg)'
- en: 'Figure 14.1: The MVVM architectural pattern'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1：MVVM架构模式
- en: The Model contains the data and the business logic of the application. The activities,
    fragments, and layouts that your users see and interact are the Views in MVVM.
    Views only deal with how the app looks. They let the ViewModel know about user
    actions (such as opening an activity or clicking on a button).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模型包含应用程序的数据和业务逻辑。在MVVM中，用户看到并与之交互的活动、片段和布局是视图。视图只处理应用程序的外观。它们让ViewModel知道用户的操作（例如打开活动或点击按钮）。
- en: The ViewModel links the View and the Model. ViewModels get the data from the
    Model and transform them for display in the View. Views subscribe to the ViewModel
    and update the UI when a value changes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ViewModel链接视图和模型。ViewModel从模型获取数据并将其转换为视图中的显示。视图订阅ViewModel，并在值更改时更新UI。
- en: You can use Jetpack's ViewModel to create the ViewModel classes for your app.
    Jetpack's ViewModel manages its own life cycle so you don't need to handle it yourself.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Jetpack的ViewModel为应用程序创建ViewModel类。Jetpack的ViewModel管理其自己的生命周期，因此您无需自行处理。
- en: 'You can add a ViewModel to your project by adding the following code in your
    `app/build.gradle` file dependencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`app/build.gradle`文件的依赖项中添加以下代码来将ViewModel添加到您的项目中：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For example, if you''re working on an app that displays movies, you could have
    a `MovieViewModel`. This ViewModel will have a function that will fetch a list
    of movies:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您正在开发一个显示电影的应用程序，您可以拥有一个`MovieViewModel`。这个ViewModel将有一个函数，用于获取电影列表：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In your activity, you can create a ViewModel using `ViewModelProvider`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的活动中，您可以使用`ViewModelProvider`创建一个ViewModel：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, you can subscribe to the `getMovies` function from the ViewModel and
    automatically update the list in the UI when the list of movies changes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以订阅ViewModel中的`getMovies`函数，并在电影列表发生变化时自动更新UI中的列表：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Views are notified when values in the ViewModel have changed. You can also use
    data binding to connect the View with the data from the ViewModel. You will learn
    more about data binding in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当ViewModel中的值发生变化时，视图会收到通知。你还可以使用数据绑定将视图与ViewModel中的数据连接起来。你将在下一节中学到更多关于数据绑定的知识。
- en: Data Binding
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据绑定
- en: Data binding links the views in your layout to data from a source such as a
    ViewModel. Instead of adding code to find the views in the layout file and updating
    them when the value from the ViewModel changes, data binding can handle that for
    you automatically.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定将布局中的视图与来自ViewModel等来源的数据进行绑定。不需要添加代码来查找布局文件中的视图，并在ViewModel的值改变时更新它们，数据绑定可以自动处理这些。
- en: 'To use data binding in your Android project, you should add the following in
    the `android` block of the `app/build.gradle` file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android项目中使用数据绑定，你应该在`app/build.gradle`文件的`android`块中添加以下内容：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the layout file, you must wrap the root element with a layout tag. Inside
    the layout tag, you need to define the `data` element for the data to be bound
    to this layout file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局文件中，你必须用`layout`标签包裹根元素。在`layout`标签内，你需要定义要绑定到该布局文件的数据的`data`元素：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The movie layout variable represents the `com.example.model.Movie` class that
    will be displayed in the layout. To set the attribute to fields in the data model,
    you need to use the `@{}` syntax. For example, to use the movie''s title as the
    text value of the `TextView`, you can use the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 电影布局变量代表将在布局中显示的`com.example.model.Movie`类。要将属性设置为数据模型中的字段，你需要使用`@{}`语法。例如，要将电影的标题作为`TextView`的文本值，你可以使用以下内容：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You also need to change your activity file. If your layout file is named `activity_movies.xml`,
    the data binding library will generate a binding class named `ActivityMainBinding`
    in your project''s build files. In the activity, you can replace the line `setContentView(R.layout.activity_movies)`
    with the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要更改你的活动文件。如果你的布局文件名为`activity_movies.xml`，数据绑定库将在项目的构建文件中生成一个名为`ActivityMainBinding`的绑定类。在活动中，你可以用以下内容替换`setContentView(R.layout.activity_movies)`这一行：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use the `inflate` method of the binding class or the `DataBindingUtil`
    class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用绑定类的`inflate`方法或`DataBindingUtil`类：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, you can set the `movie` instance to bind in the layout with the layout
    variable named `movie`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以将`movie`实例绑定到布局中名为`movie`的布局变量中：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you are using `LiveData` as the item to bind to the layout, you need to
    set `lifeCycleOwner` of the binding variable. `lifeCycleOwner` specifies the scope
    of the `LiveData` object. You can use the activity as `lifeCycleOwner` of the
    binding class:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`LiveData`作为要绑定到布局的项目，你需要设置绑定变量的`lifeCycleOwner`。`lifeCycleOwner`指定了`LiveData`对象的范围。你可以使用活动作为绑定类的`lifeCycleOwner`：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With this, when the values of `LiveData` in the ViewModel change their value,
    the View will automatically update with the new values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，当ViewModel中的`LiveData`的值改变时，视图将自动更新为新的值。
- en: 'You set the movie title in the TextView with `android:text="@{movie.title}"`.
    The data binding library has default binding adapters that handle the binding
    to the `android:text` attribute. Sometimes, there are no default attributes that
    you can use. You can create your own binding adapter. For example, if you want
    to bind the list of movies for `RecyclerView`, you can create a custom `BindingAdapter`
    call:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`android:text="@{movie.title}"`在TextView中设置电影标题。数据绑定库有默认的绑定适配器来处理`android:text`属性的绑定。有时，没有默认的属性可供使用。你可以创建自己的绑定适配器。例如，如果你想要为`RecyclerView`绑定电影列表，你可以创建一个自定义的`BindingAdapter`：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will allow you to add an `app:list` attribute to `RecyclerView` that accepts
    a list of movies:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你为`RecyclerView`添加一个`app:list`属性，接受一个电影列表：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's try implementing data binding on an Android project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在Android项目中实现数据绑定。
- en: 'Exercise 14.01: Using Data Binding in an Android Project'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.01：在Android项目中使用数据绑定
- en: 'In the previous chapter, you worked on an application that displays popular
    movies using the Movie Database API. For this chapter, you will be improving the
    app using MVVM. You can use the Popular Movies project from the previous chapter
    or make a copy of it. In this exercise, you will be adding data binding to bind
    the list of movies from the ViewModel to the UI:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你开发了一个使用电影数据库API显示热门电影的应用程序。在本章中，你将使用MVVM改进该应用程序。你可以使用上一章的Popular Movies项目，或者复制一个。在这个练习中，你将添加数据绑定，将ViewModel中的电影列表绑定到UI上：
- en: Open the `Popular Movies` project in Android Studio.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中打开`Popular Movies`项目。
- en: 'Open the `app/build.gradle` file and add the following in the `android` block:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/build.gradle`文件，并在`android`块中添加以下内容：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This enables data binding for your application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就可以为你的应用启用数据绑定。
- en: 'Add the `kotlin-kapt` plugin at the end of the plugins block in your `app/build.gradle`
    file:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/build.gradle`文件的插件块末尾添加`kotlin-kapt`插件：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The kotlin-kapt plugin is the Kotlin annotation processing tool, which is needed
    for using Data Binding.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: kotlin-kapt插件是Kotlin注解处理工具，用于使用数据绑定。
- en: 'Create a new file called `RecyclerViewBinding` that contains the binding adapter
    for the `RecyclerView` list:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`RecyclerViewBinding`的新文件，其中包含`RecyclerView`列表的绑定适配器：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will allow you to add an `app:list` attribute for `RecyclerView` where
    you can pass the list of movies to be displayed. The list of movies will be set
    to the adapter, updating the `RecyclerView` in the UI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许你为`RecyclerView`添加一个`app:list`属性，你可以将要显示的电影列表传递给它。电影列表将被设置到适配器中，更新UI中的`RecyclerView`。
- en: 'Open the `activity_main.xml` file and wrap everything inside a `layout` tag:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，并将所有内容包裹在`layout`标签内：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this, the data binding library will be able to generate a binding class
    for this layout.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，数据绑定库将能够为这个布局生成一个绑定类。
- en: 'Inside the `layout` tag and before the `ConstraintLayout` tag, add a data element
    with a variable for the `viewModel`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout`标签内，在`ConstraintLayout`标签之前，添加一个带有`viewModel`变量的数据元素：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This creates a `viewModel` layout variable that corresponds to your `MovieViewModel`
    class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个与您的`MovieViewModel`类对应的`viewModel`布局变量。
- en: 'In `RecyclerView`, add the list to be displayed with `app:list`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RecyclerView`中，使用`app:list`添加要显示的列表：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `LiveData` from `MovieViewModel.getPopularMovies` will be passed as the
    list of movies for `RecyclerView`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从`MovieViewModel.getPopularMovies`的`LiveData`将作为`RecyclerView`的电影列表传递。
- en: 'Open `MainActivity`. In the `onCreate` function, replace the `setContentView`
    line with the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`。在`onCreate`函数中，用以下内容替换`setContentView`行：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This sets the layout file to be used and creates a binding object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置要使用的布局文件并创建一个绑定对象。
- en: 'Replace the `movieViewModel` observer with the following:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下内容替换`movieViewModel`观察者：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This binds `movieViewModel` to the `viewModel` layout variable in the `activity_main.xml`
    file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`movieViewModel`绑定到`activity_main.xml`文件中的`viewModel`布局变量。
- en: 'Run the application. It should work as usual, displaying the list of popular
    movies where clicking on one will open the details of the movie selected:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。它应该像往常一样工作，显示流行电影的列表，点击其中一个将打开所选电影的详细信息：
- en: '![Figure 14.2: The main screen (left) with the year’s popular movies sorted
    by title and the details screen (right) with more information about the selected
    movie'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.2：按标题排序的今年热门电影的主屏幕（左）和有关所选电影的详细信息的详细屏幕（右）'
- en: '](img/B15216_14_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_14_02.jpg)'
- en: 'Figure 14.2: The main screen (left) with the year''s popular movies sorted
    by title and the details screen (right) with more information about the selected
    movie'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2：按标题排序的今年热门电影的主屏幕（左）和有关所选电影的详细信息的详细屏幕（右）
- en: In this exercise, you have used data binding on an Android project.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您已经在Android项目上使用了数据绑定。
- en: Data binding links the Views to the ViewModel. The ViewModel retrieves the data
    from the Model. Some of the libraries you can use to fetch data are Retrofit and
    Moshi, which you will learn more about in the next section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定将视图链接到ViewModel。ViewModel从模型中检索数据。您可以使用Retrofit和Moshi等一些库来获取数据，您将在下一节中了解更多信息。
- en: Retrofit and Moshi
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Retrofit和Moshi
- en: When connecting to your remote network, you can use Retrofit. Retrofit is an
    HTTP client that makes it easy to implement creating requests and retrieving responses
    from your backend server.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到远程网络时，您可以使用Retrofit。Retrofit是一个HTTP客户端，可以轻松实现创建请求并从后端服务器检索响应。
- en: 'You can add Retrofit to your project by adding the following code in your `app/build.gradle`
    file dependencies:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下代码添加到您的`app/build.gradle`文件的依赖项中，将Retrofit添加到您的项目中：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can then convert the JSON response from Retrofit by using Moshi, a library
    for parsing JSON into Java objects. For example, you can convert the JSON string
    response from getting the list of movies into a `ListofMovie` object for display
    and storage in your app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用Moshi将Retrofit的JSON响应转换为Java对象。例如，您可以将获取电影列表的JSON字符串响应转换为`ListofMovie`对象，以便在应用程序中显示和存储。
- en: 'You can add the Moshi Converter to your project by adding the following code
    to your `app/build.gradle` file dependencies:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下代码添加到您的`app/build.gradle`文件的依赖项中，将Moshi Converter添加到您的项目中：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In your Retrofit builder code, you can call `addConverterFactory` and pass
    `MoshiConverterFactory`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Retrofit构建器代码中，您可以调用`addConverterFactory`并传递`MoshiConverterFactory`：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can call the data layer from the ViewModel. To reduce its complexity, you
    can use the Repository pattern for loading and caching data. You will learn about
    this in the next section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从ViewModel中调用数据层。为了减少其复杂性，您可以使用存储库模式来加载和缓存数据。您将在下一节中了解到这一点。
- en: The Repository Pattern
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储库模式
- en: Instead of the ViewModel directly calling the services for getting and storing
    data, it should delegate that task to another component, such as a repository.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ViewModel不应直接调用服务来获取和存储数据，而应将该任务委托给另一个组件，例如存储库。
- en: 'With the Repository pattern, you can move the code in the ViewModel that handles
    the data layer into a separate class. This reduces the complexity of the ViewModel,
    making it easier to maintain and test. The repository will manage where the data
    is fetched and stored, just as if the local database or the network service were
    used to get or store data:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用存储库模式，您可以将处理数据层的ViewModel中的代码移动到一个单独的类中。这减少了ViewModel的复杂性，使其更易于维护和测试。存储库将管理从哪里获取和存储数据，就像使用本地数据库或网络服务获取或存储数据一样：
- en: '![Figure 14.3: ViewModel with the Repository pattern'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.3：具有存储库模式的ViewModel'
- en: '](img/B15216_14_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_14_03.jpg)'
- en: 'Figure 14.3: ViewModel with the Repository pattern'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：具有存储库模式的ViewModel
- en: 'In your ViewModel, you can add a property for the repository:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在ViewModel中，您可以添加一个存储库属性：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The ViewModel will get the movies from the repository, or it can listen to them.
    It will not know where you actually got the list from.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ViewModel将从存储库获取电影，或者它可以监听它们。它将不知道您实际从哪里获取列表。
- en: 'You can create a repository interface that connects to a data source, such
    as in the following example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个存储库接口，连接到数据源，例如以下示例：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `MovieRepository` interface has a `getMovies` function that your repository
    implementation class will override to fetch movies from the data source. You can
    also have a single repository class that handles the fetching of data from either
    the local database or from your remote endpoint.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieRepository`接口具有一个`getMovies`函数，您的存储库实现类将覆盖该函数以从数据源获取电影。您还可以拥有一个单一的存储库类，该类处理从本地数据库或远程端点获取数据：'
- en: When using the local database as the data source for your repository, you can
    use the Room library, which makes it easier for you to work with the SQLite database
    by writing less code and having compile-time checks on queries.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当将本地数据库用作存储库的数据源时，您可以使用Room库，它可以让您更轻松地使用SQLite数据库，编写更少的代码，并在查询时进行编译时检查。
- en: 'You can add Room to your project by adding the following code to your `app/build.gradle`
    file dependencies:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下代码添加到`app/build.gradle`文件的依赖项中来将Room添加到您的项目中：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Let's try adding the Repository pattern with Room to an Android project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试向Android项目添加带有Room的存储库模式。
- en: 'Exercise 14.02: Using Repository with Room in an Android Project'
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.02：在Android项目中使用带有Room的存储库
- en: You have added data binding in the Popular Movies project in the previous exercise.
    In this exercise, you will update the app with the Repository pattern.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，您已经在流行电影项目中添加了数据绑定。在这个练习中，您将使用存储库模式更新应用程序。
- en: 'When opening the app, it fetches the list of movies from the network. This
    takes a while. You will be caching this data into the local database every time
    you fetch them. When the user opens the app next time, the app will immediately
    display the list of movies from the database on the screen. You will be using
    Room for data caching:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开应用程序时，它会从网络获取电影列表。这需要一段时间。每次获取数据时，您都将将这些数据缓存在本地数据库中。用户下次打开应用程序时，应用程序将立即在屏幕上显示来自数据库的电影列表。您将使用Room进行数据缓存：
- en: Open the `Popular Movies` project that you used in the previous exercise.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在上一个练习中使用的`Popular Movies`项目。
- en: 'Open the `app/build.gradle` file and add the dependencies for the Room library:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/build.gradle`文件并添加Room库的依赖项：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Open the `Movie` class and add an `Entity` annotation for it:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Movie`类并为其添加一个`Entity`注解：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `Entity` annotation will create a table named `movies` for the list of movies.
    It also sets `id` as the primary key of the table.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entity`注解将为电影列表创建一个名为`movies`的表。它还将`id`设置为表的主键。'
- en: 'Make a new package called `com.example.popularmovies.database`. Create a `MovieDao`
    data access object for accessing the `movies` table:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`com.example.popularmovies.database`的新包。为访问`movies`表创建一个`MovieDao`数据访问对象：
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This class contains a function for adding a list of movies in the database and
    another for getting all the movies from the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 该类包含一个用于将电影列表添加到数据库的函数，另一个用于从数据库中获取所有电影的函数。
- en: 'Create a `MovieDatabase` class in the `com.example.popularmovies.database`
    package:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.example.popularmovies.database`包中创建一个`MovieDatabase`类：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This database has a version of 1, a single entity for `Movie`, and the data
    access object for the movies. It also has a `getInstance` function to generate
    an instance of the database.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据库的版本为1，有一个名为`Movie`的实体和用于电影的数据访问对象。它还有一个`getInstance`函数来生成数据库的实例。
- en: 'Update the `MovieRepository` class with constructors for `movieDatabase`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用构造函数更新`MovieRepository`类的`movieDatabase`：
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Update the `fetchMovies` function:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`fetchMovies`函数：
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It will fetch the movies from the database. If there's nothing saved yet, it
    will retrieve the list from the network endpoint and then save it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 它将从数据库中获取电影。如果尚未保存任何内容，它将从网络端点检索列表，然后保存。
- en: 'Open `MovieApplication` and in the `onCreate` function, replace the `movieRepository`
    initialization with the following:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MovieApplication`并在`onCreate`函数中，用以下内容替换`movieRepository`的初始化：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Run the application. It will display the list of popular movies, and clicking
    on one will open the details of the movie selected. If you turn off mobile data
    or disconnect from the wireless network, it will still display the list of movies,
    which is now cached in the database:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。它将显示流行电影的列表，单击其中一个将打开所选电影的详细信息。如果关闭移动数据或断开无线网络连接，它仍将显示电影列表，该列表现在已缓存在数据库中：
- en: '![Figure 14.4: The Popular Movies app using Repository with Room'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.4：使用带有Room的流行电影应用程序的存储库'
- en: '](img/B15216_14_04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_14_04.jpg)'
- en: 'Figure 14.4: The Popular Movies app using Repository with Room'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4：使用带有Room的流行电影应用程序的存储库
- en: In this exercise, you have improved the app by moving the loading and storing
    of data into a repository. You have also used Room to cache the data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您通过将数据的加载和存储移到存储库中来改进了应用程序。您还使用了Room来缓存数据。
- en: The repository fetches the data from the data source. If there's no data stored
    in the database yet, the app will call the network to request the data. This can
    take a while. You can improve the user experience by pre-fetching data at a scheduled
    time so the next time the user opens the app, they will already see the updated
    contents. You can do this with WorkManager, which we will discuss in the next
    section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库从数据源获取数据。如果数据库中尚未存储数据，应用程序将调用网络请求数据。这可能需要一段时间。您可以通过在预定时间预取数据来改善用户体验，这样用户下次打开应用程序时，他们将立即看到更新的内容。您可以使用我们将在下一节中讨论的WorkManager来实现这一点。
- en: WorkManager
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WorkManager
- en: WorkManager is a Jetpack library for background operations that can be delayed
    and can run based on the constraints you set. It is ideal for doing something
    that must be run but can be done later or at regular intervals, regardless of
    whether the app is running or not.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: WorkManager是一个Jetpack库，用于延迟执行并根据您设置的约束条件运行后台操作。它非常适合执行必须运行但可以稍后或定期运行的操作，无论应用程序是否正在运行。
- en: You can use WorkManager to run tasks such as fetching the data from the network
    and storing it in your database at scheduled intervals. WorkManager will run the
    task even if the app has been closed or if the device restarts. This will keep
    your database up to date with your backend.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用WorkManager定期运行任务，例如从网络获取数据并将其存储在数据库中。即使应用程序已关闭或设备重新启动，WorkManager也会运行任务。这将使您的数据库与后端保持最新。
- en: 'You can add WorkManager to your project by adding the following code to your
    `app/build.gradle` file dependencies:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下代码添加到`app/build.gradle`文件的依赖项中来将WorkManager添加到您的项目中：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: WorkManager can call the repository to fetch and store data from either the
    local database or the network server.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: WorkManager可以调用存储库从本地数据库或网络服务器获取和存储数据。
- en: Let's try adding WorkManager to an Android project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试向Android项目添加WorkManager。
- en: 'Exercise 14.03: Adding WorkManager to an Android Project'
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.03：向Android项目添加WorkManager
- en: 'In the previous exercise, you added the Repository pattern with Room to cache
    data in the local database. The app can now fetch the data from the database instead
    of the network. Now, you will be adding WorkManager to schedule a task for fetching
    data from the server and saving it to the database at scheduled intervals:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，您使用Room添加了存储库模式以将数据缓存到本地数据库中。该应用现在可以从数据库中获取数据，而不是从网络获取。现在，您将添加WorkManager以安排定期从服务器获取数据并将其保存到数据库的任务：
- en: Open the `Popular Movies` project you used in the previous exercise.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在上一个练习中使用的`Popular Movies`项目。
- en: 'Open the `app/build.gradle` file and add the dependency for the WorkManager
    library:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/build.gradle`文件并添加WorkManager库的依赖项：
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will allow you to add WorkManager workers to your app.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您向应用程序添加WorkManager工作程序。
- en: 'Open `MovieRepository` and add a suspending function for fetching movies from
    the network using the apiKey from The Movie Database, and saving them to the database:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MovieRepository`并添加一个挂起函数，用于使用The Movie Database的apiKey从网络获取电影并将其保存到数据库中：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will be the function that will be called by the `Worker` class that will
    be running to fetch and save the movies.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是`Worker`类调用的函数，该类将运行以获取和保存电影。
- en: 'Create the `MovieWorker` class:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`MovieWorker`类：
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Open `MovieApplication` and at the end of the `onCreate` function, schedule
    `MovieWorker` to retrieve and save the movies:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MovieApplication`，并在`onCreate`函数的末尾，安排`MovieWorker`以检索并保存电影：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This schedules `MovieWorker` to run every hour when the device is connected
    to the network. `MovieWorker` will fetch the list of movies from the network and
    save it to the local database.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当设备连接到网络时，这将安排`MovieWorker`每小时运行。`MovieWorker`将从网络获取电影列表并将其保存到本地数据库。
- en: Run the application. Close it and make sure the device is connected to the internet.
    After more than an hour, open the application again and check whether the list
    of movies displayed has been updated. If not, try again in a few hours. The list
    of movies displayed will be updated regularly, around every hour, even if the
    app has been closed.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序。关闭它并确保设备已连接到互联网。一个多小时后，再次打开应用程序并检查显示的电影列表是否已更新。如果没有，请几个小时后再试一次。即使应用程序已关闭，显示的电影列表也会定期更新，大约每小时更新一次。
- en: '![Figure 14.5: The Popular Movies app updates its list with WorkManager'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.5：Popular Movies应用程序使用WorkManager更新其列表'
- en: '](img/B15216_13_04.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_13_04.jpg)'
- en: 'Figure 14.5: The Popular Movies app updates its list with WorkManager'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5：Popular Movies应用程序使用WorkManager更新其列表
- en: In this exercise, you added WorkManager to your application to automatically
    update the database with the list of the movies retrieved from the network.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您向应用程序添加了WorkManager，以自动使用从网络检索的电影列表更新数据库。
- en: 'Activity 14.01: Revisiting the TV Guide App'
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动14.01：重新审视电视指南应用程序
- en: 'In the previous chapter, you developed an app that can display a list of TV
    shows that are on the air. The app had two screens: the main screen and the details
    screen. On the main screen, there''s a list of TV shows. When clicking on a TV
    show, the details screen will be displayed with the details of the selected show.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您开发了一个可以显示正在播出的电视节目列表的应用程序。该应用程序有两个屏幕：主屏幕和详细信息屏幕。在主屏幕上，有一个电视节目列表。单击电视节目时，将显示详细信息屏幕，并显示所选节目的详细信息。
- en: When running the app, it takes a while to display the list of shows. Update
    the app to cache the list so it will be immediately displayed when opening the
    app. Also, improve the app by using MVVM with data binding and adding a WorkManager.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序时，显示节目列表需要一段时间。更新应用程序以缓存列表，以便在打开应用程序时立即显示。此外，通过使用MVVM与数据绑定并添加WorkManager来改进应用程序。
- en: 'You can use the TV Guide app you worked on in the previous chapter or download
    it from the GitHub repository. The following steps will help guide you through
    this activity:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用上一章中使用的电视指南应用程序，也可以从GitHub存储库中下载。以下步骤将帮助您完成此活动：
- en: Open the TV Guide app in Android Studio. Open the `app/build.gradle` file and
    add the `kotlin-kapt` plugin, the data binding dependency, and the dependencies
    for Room and WorkManager.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android Studio中打开电视指南应用程序。打开`app/build.gradle`文件并添加`kotlin-kapt`插件，数据绑定依赖项以及Room和WorkManager的依赖项。
- en: Create a binding adapter class for `RecyclerView`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`RecyclerView`创建一个绑定适配器类。
- en: In `activity_main.xml`, wrap everything inside a `layout` tag.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`中，将所有内容包装在`layout`标签内。
- en: Inside the `layout` tag and before the `ConstraintLayout` tag, add a data element
    with a variable for the ViewModel.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout`标签内并在`ConstraintLayout`标签之前，添加一个包含ViewModel变量的数据元素。
- en: In the `RecyclerView`, add the list to be displayed with `app:list`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RecyclerView`中，使用`app:list`添加要显示的列表。
- en: In `MainActivity`, replace the line for `setContentView` with the `DataBindingUtil.setContentView`
    function.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，用`DataBindingUtil.setContentView`函数替换`setContentView`行。
- en: Replace the observer from `TVShowViewModel` with the data binding code.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用数据绑定代码替换`TVShowViewModel`中的观察者。
- en: Add an `Entity` annotation in the `TVShow` class.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TVShow`类中添加一个`Entity`注解。
- en: Create a `TVDao` data access object for accessing the TV shows table.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`TVDao`数据访问对象，用于访问电视节目表。
- en: Create a `TVDatabase` class.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`TVDatabase`类。
- en: Update `TVShowRepository` with a constructor for `tvDatabase`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tvDatabase`构造函数更新`TVShowRepository`。
- en: Update the `fetchTVShows` function to get the TV shows from the local database.
    If there's nothing there yet, retrieve the list from the endpoint and save it
    in the database.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`fetchTVShows`函数以从本地数据库获取电视节目。如果还没有数据，从端点检索列表并将其保存在数据库中。
- en: Create the `TVShowWorker` class.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`TVShowWorker`类。
- en: Open the `TVApplication` file. In `onCreate`, schedule `TVShowWorker` to retrieve
    and save the shows.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TVApplication`文件。在`onCreate`中，安排`TVShowWorker`以检索并保存节目。
- en: 'Run your application. The app will display a list of TV shows. Clicking on
    a TV show will open the details activity that displays the movie details. The
    main screen and details screen will be similar to *Figure 14.6*:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你的应用程序。应用程序将显示一个电视节目列表。点击电视节目将打开显示电影详情的详情活动。主屏幕和详情屏幕将类似于*图14.6*：
- en: '![Figure 14.6: The main screen and details screen of the TV Guide app'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.6：TV Guide应用的主屏幕和详情屏幕'
- en: '](img/B15216_13_11.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15216_13_11.jpg)'
- en: 'Figure 14.6: The main screen and details screen of the TV Guide app'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：TV Guide应用的主屏幕和详情屏幕
- en: Note
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可在以下网址找到：http://packt.live/3sKj1cp
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter focused on architectural patterns for Android. You started with
    the MVVM architectural pattern. You learned its three components: the Model, the
    View, and the ViewModel. You also used data binding to link the View with the
    ViewModel.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了Android的架构模式。您从MVVM架构模式开始。您学习了它的三个组件：模型、视图和视图模型。您还使用数据绑定将视图与视图模型链接起来。
- en: Next, you learned about how the Repository pattern can be used to cache data.
    Then, you learned about WorkManager and how you can schedule tasks such as retrieving
    data from the network and saving that data to the database to update your local
    data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您了解了存储库模式如何用于缓存数据。然后，您了解了WorkManager以及如何安排任务，例如从网络检索数据并将数据保存到数据库以更新本地数据。
- en: In the next chapter, you will be learning how to improve the look and design
    of your apps with animations. You will add animations and transitions to your
    apps with `CoordinatorLayout` and `MotionLayout`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用动画来改善应用程序的外观和设计。您将使用`CoordinatorLayout`和`MotionLayout`为您的应用程序添加动画和过渡效果。
