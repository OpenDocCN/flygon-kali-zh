["```java\nimport <package>.<class or interface name>;\n```", "```java\nimport com.packt.javapath.ch04demo.MyApplication;\n```", "```java\nimport com.packt.javapath.ch04demo.*;\n```", "```java\nsrc/main/java/com/packt/javapath/MyClass.java (for Linux) \nsrc/main/java/com/packt/javapath/MyEnum.java\nsrc/main/java/com/packt/javapath/MyInterface.java \n```", "```java\nsrc\\main\\java\\com\\packt\\javapath\\MyClass.java (for Windows) \nsrc\\main\\java\\com\\packt\\javapath\\MyEnum.java\nsrc\\main\\java\\com\\packt\\javapath\\MyInterface.java \n```", "```java\npackage com.packt.javapath;\n```", "```java\npublic class MyClass extends SomeClass \n     implements Interface1, Interface2, ... {...}\n```", "```java\npublic enum MyEnum implements Interface1, Interface2, ... {...}\n```", "```java\npublic interface MyInterface extends Interface1, Interface2, ... {...}\n```", "```java\npublic class MyClass \n          extends com.packt.javapath.something.AnotherMyClass \n          implements com.packt.javapath.something2.Interface1,\n                     com.packt.javapath.something3.Interface2\n```", "```java\ncom.packt.javapath.something.SomeClass someClass =\n                    new com.packt.javapath.something.SomeClass();\n```", "```java\npackage com.packt.javapath;\nimport com.packt.javapath.something.SomeClass;\npublic class MyClass {\n  //... \n  SomeClass someClass = new SomeClass();\n  //...\n}\n```", "```java\npackage com.packt.javapath;\nimport com.packt.javapath.something.*;\npublic class MyClass {\n  //... \n  SomeClass someClass = new SomeClass();\n  SomeOtherClass someClass1 = new SomeOtherClass();\n  //...\n}\n```", "```java\nimport static org.junit.jupiter.api.Assertions.*;\n\n```", "```java\nPerson p = new Person(\"Joe\", \"Blow\", dob);\nassertTrue(p.equals(p));\n\n```", "```java\nPerson p = new Person(\"Joe\", \"Blow\", dob);\nAssertions.assertTrue(p.equals(p));\n\n```", "```java\npackage com.packt.javapath.api;\npublic interface Constants {\n  String NAME = \"name\";\n}\n```", "```java\npackage com.packt.javapath;\nimport static com.packt.javapath.api.Constants.*;\npublic class MyClass {\n  //...\n  String s = \"My \" + NAME + \" is Joe\";\n  System.out.println(s);        //Prints: My name is Joe\n  //...\n} \n```", "```java\npackage com.packt.javapath;\nimport com.packt.javapath.api.Constants;\npublic class MyClass implements Constants {\n  //...\n  String s = \"My \" + NAME + \" is Joe\";\n  System.out.println(s);        //Prints: My name is Joe\n  //...\n} \n```", "```java\nimport static java.time.DayOfWeek.*;\n```", "```java\npublic class PublicClass01 {\n  public static void main(String[] args){\n    //We will write code here\n  }\n}\n\nclass DefaultAccessClass01 {\n}\n\npublic interface PublicInterface01 {\n  String name = \"PublicInterface01\";\n}\n\ninterface DefaultAccessInterface01 {\n  String name = \"DefaultAccessInterface01\";\n}\n```", "```java\npublic class PublicClass02 {\n  public static void main(String[] args){\n    //We will write code here\n  }\n}\n```", "```java\nimport com.packt.javapath.Ch07demo.pack01.PublicClass01;\nimport com.packt.javapath.Ch07demo.pack01.PublicInterface01;\n//import com.packt.javapath.Ch07demo.pack01.DefaultAccessClass01;\n//import com.packt.javapath.Ch07demo.pack01.DefaultAccessInterface01;\n\npublic class PublicClass02 {\n  public static void main(String[] args){\n    System.out.println(PublicInterface01.name);\n    PublicClass01 o = new PublicClass01();\n\n  }\n}\n```", "```java\npublic class PublicClass01 {\n  public static void main(String[] args){\n    System.out.println(DefaultAccessInterface01.name);\n    DefaultAccessClass01 o = new DefaultAccessClass01();\n  }\n  class DefaultAccessClass{\n  }\n  protected class ProtectedClass{\n  }\n  private class PrivateClass{\n  }\n  interface DefaultAccessInterface {\n  }\n  protected class ProtectedInterface{\n  }\n  private class PrivateInterface{\n  }\n}\n```", "```java\npublic interface PublicInterface01 {\n  String name = \"PublicInterface01\";\n\n  class DefaultAccessClass{\n  }\n  interface DefaultAccessInterface {\n  }\n}\n```", "```java\nprivate String field;\nprivate static int count;\nprivate PublicClass02(String s){\n  this.field = s;\n}\npublic static PublicClass02 getInstance(String s){\n  if(count > 5){\n    return null;\n  } else {\n    count++;\n    return new PublicClass02(s);\n  }\n}\n```", "```java\npublic static Calculator createInstance(){\n  WhichImpl whichImpl = \n      Utils.getWhichImplValueFromConfig(Utils.class,\n            Calculator.CONF_NAME, Calculator.CONF_WHICH_IMPL);\n  switch (whichImpl){\n    case multiplies:\n      return new CalculatorImpl();\n    case adds:\n      return new AnotherCalculatorImpl();\n    default:\n      throw new RuntimeException(\"Houston, we have another problem.\"+\n                  \" We do not have implementation for the key \" +\n                  Calculator.CONF_WHICH_IMPL + \" value \" + whichImpl);\n    }\n}\n```", "```java\nprivate static Calculator calculator = null;\npublic static Calculator createInstance(){\n  WhichImpl whichImpl = \n      Utils.getWhichImplValueFromConfig(Utils.class,\n            Calculator.CONF_NAME, Calculator.CONF_WHICH_IMPL);\n  switch (whichImpl){\n    case multiplies:\n      if(calculator == null){\n        calculator = new CalculatorImpl();\n      }\n      return calculator;\n    case adds:\n      return new AnotherCalculatorImpl();\n    default:\n      throw new RuntimeException(\"Houston, we have another problem.\"+\n                      \" We do not have implementation for the key \" +\n                  Calculator.CONF_WHICH_IMPL + \" value \" + whichImpl);\n    }\n}\n```", "```java\npublic static Calculator createInstance(){\n  String whichImpl = Utils.getStringValueFromConfig(CalculatorFactory.class,\n            \"calculator.conf\", \"which.impl\");\n  if(whichImpl.equals(\"multiplies\")){\n    return new Whatever();\n  } else if (whichImpl.equals(\"adds\")){\n    return new AnotherCalculatorImpl();\n  } else {\n    throw new RuntimeException(\"Houston, we have a problem. \" +\n              \"Unknown key which.impl value \" + whichImpl +\n              \" is in config.\");\n  }\n\n}\n\nstatic class Whatever implements Calculator {\n  public static String addOneAndConvertToString(double d){\n    System.out.println(Whatever.class.getName());\n    return Double.toString(d + 1);\n  }\n  public int multiplyByTwo(int i){\n    System.out.println(Whatever.class.getName());\n    return i * 2;\n  }\n}\n```", "```java\npublic long sum(String s1, String s2){\n  int i1 = Integer.parseInt(s1);\n  int i2 = Integer.parseInt(s1);\n  return i1 + i2;\n}\n```", "```java\npublic long sum(String s1, String s2){\n  long l1 = Long.parseLong(s1);\n  long l2 = Long.parseLong(s2);\n  return l1 + l2;\n}\n```", "```java\nlong l1 = Long.parseLong(s1);\n\n```", "```java\npublic long sum(String s1, String s2){\n  long l1 = 0;\n  try{\n    l1 = Long.parseLong(s1);\n  } catch (NumberFormatException ex){\n    //make a record to a log\n  }\n  long l2 = 0;\n  try{\n    l2 = Long.parseLong(s2);\n  } catch (NumberFormatException ex){\n    //make a record to a log\n  }\n  return l1 + l2;\n}\n```", "```java\nprivate long getLong(String s){\n  double d = 0;\n  try{\n    d = Double.parseDouble(s);\n  } catch (NumberFormatException ex){\n    //make a record to a log\n  }\n  return Math.round(d);\n}\npublic long sum(String s1, String s2){\n  return getLong(s1) + getLong(s2);\n}\n```", "```java\npublic long sum(int i, String s2){\n  return i + getLong(s2);\n}\n```", "```java\nint i = new Ch07DemoApp().getLong(\"23\", \"45.6\");\n```", "```java\nint i = Ch07DemoApp.getLong(\"23\", \"45.6\");\n```", "```java\npublic class ShadowingDemo {\n  private String x = \"x\";\n  public void printX(){\n    System.out.println(x);   \n    String x = \"y\";\n    System.out.println(x);   \n  }\n}\n```", "```java\nString x = \"y\";\n\n```", "```java\nprivate String x = \"x\";\npublic void setX(String x) {\n  this.x = x;\n}\n```"]