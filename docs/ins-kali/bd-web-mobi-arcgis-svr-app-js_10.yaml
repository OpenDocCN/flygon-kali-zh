- en: Chapter 10. Geoprocessing Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。地理处理任务
- en: Geoprocessing refers to the automation and chaining of GIS operations in a logical
    fashion to accomplish some sort of GIS task. For example, you may want to buffer
    a stream layer and then clip a vegetation layer to this newly created buffer.
    A model can be built in ArcGIS for Desktop and run in an automated fashion from
    either a desktop environment or via a centralized server accessed through a web
    application. Any tool found in ArcToolbox, whether a built-in tool for your ArcGIS
    license level or a custom tool that you've built, can be used in a model and chained
    together with other tools. This chapter examines how you can access these geoprocessing
    tasks through the ArcGIS API for JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 地理处理是指以逻辑方式自动化和链接GIS操作，以完成某种GIS任务。例如，您可能希望对流图层进行缓冲，然后将植被图层裁剪到这个新创建的缓冲区。在ArcGIS
    for Desktop中可以构建模型，并且可以在桌面环境或通过Web应用程序访问的集中服务器上以自动化方式运行。ArcToolbox中的任何工具，无论是您ArcGIS许可级别的内置工具还是您构建的自定义工具，都可以在模型中使用，并与其他工具链接在一起。本章将探讨如何通过ArcGIS
    API for JavaScript访问这些地理处理任务。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Models in ArcGIS Server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcGIS Server中的模型
- en: Using Geoprocessor – what you need to know
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用地理处理器-你需要知道
- en: Understanding the service page for a geoprocessing task
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解地理处理任务的服务页面
- en: The Geoprocessor task
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理处理任务
- en: Running the task
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行任务
- en: Time to practice with the geoprocessing tasks![Geoprocessing Tasks](graphics/7965_10_1.jpg)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习地理处理任务的时间到了！[地理处理任务](graphics/7965_10_1.jpg)
- en: The preceding diagram shows us the components of a model that is built using
    ModelBuilder. These models can be published to ArcGIS Server as geoprocessing
    tasks and then accessed through your applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了使用ModelBuilder构建的模型的组件。这些模型可以作为地理处理任务发布到ArcGIS Server，然后通过你的应用程序访问。
- en: Models in ArcGIS Server
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ArcGIS Server中的模型
- en: 'Models are built in ArcGIS for Desktop using ModelBuilder. Once built, these
    models can be published to ArcGIS Server as geoprocessing tasks. Web applications
    then use the `Geoprocessor` object found in the ArcGIS API for JavaScript to access
    these tasks and retrieve information. These models and tools are run on ArcGIS
    Server due to their computationally intensive nature and the need for ArcGIS software.
    Jobs are submitted to the server through your application and the results are
    picked up after the service is complete. Submitting jobs and retrieving the results
    can be accomplished through the `Geoprocessor` object. This process is illustrated
    in the following diagram:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在ArcGIS for Desktop中使用ModelBuilder构建模型。构建完成后，这些模型可以作为地理处理任务发布到ArcGIS Server。然后，Web应用程序使用在ArcGIS
    API for JavaScript中找到的`Geoprocessor`对象来访问这些任务并检索信息。由于这些模型和工具需要计算密集型和ArcGIS软件，它们在ArcGIS
    Server上运行。作业通过您的应用程序提交到服务器，服务完成后会获取结果。通过`Geoprocessor`对象可以提交作业和检索结果。这个过程在下图中有所说明：
- en: '![Models in ArcGIS Server](graphics/7965_10_2.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS Server中的模型](graphics/7965_10_2.jpg)'
- en: Using Geoprocessor – what you need to know
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用地理处理器-你需要知道的
- en: 'There are three things that you need to know when using a geoprocessing service:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用地理处理服务时，有三件事情是你需要知道的：
- en: First, you need to know the URL where the model or tool is located. An example
    URL is [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，您需要知道模型或工具所在的URL。一个示例URL是[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/GPServer/PopulationSummary)。
- en: When you go to this link, you can also find information about the input and
    output parameters, whether the task is asynchronous or synchronous, and much more.
    Speaking of input and output parameters, you need to know the data types associated
    with these parameters and whether or not each of these parameters is required.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您访问此链接时，您还可以找到有关输入和输出参数的信息，任务是异步还是同步，以及更多信息。说到输入和输出参数，您需要知道与这些参数相关的数据类型以及每个参数是否是必需的。
- en: Finally, you need to know whether the task is asynchronous or synchronous and
    how your code should be configured based on that knowledge. All of this information
    can be found on the service page for the geoprocessing task.![Using Geoprocessor
    – what you need to know](graphics/7965_10_3.jpg)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，您需要知道任务是异步还是同步，以及根据这一知识如何配置您的代码。所有这些信息都可以在地理处理任务的服务页面上找到。![使用地理处理器-你需要知道的](graphics/7965_10_3.jpg)
- en: Understanding the service page for a geoprocessing task
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解地理处理任务的服务页面
- en: The service page for a geoprocessing service includes metadata information about
    the service. This includes the execution type that can be either synchronous or
    asynchronous. In the case of the service seen in the following screenshot, the
    **PopulationSummary** service is a synchronous task, which indicates that the
    application will wait for the results to be returned. This type of execution is
    typically used with tasks that execute quickly. Asynchronous tasks are submitted
    as a job and then the application can continue to function while the geoprocessing
    service is doing its work. When the task is complete, it notifies your application
    that the processing is complete and the results are ready.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 地理处理服务的服务页面包括有关服务的元数据信息。这包括执行类型，可以是同步或异步。在下面的屏幕截图中看到的服务的情况下，**PopulationSummary**服务是一个同步任务，这表明应用程序将等待结果返回。这种执行类型通常用于执行速度快的任务。异步任务被提交为作业，然后应用程序可以在地理处理服务执行其工作时继续运行。任务完成时，它会通知您的应用程序处理已完成并且结果已准备就绪。
- en: Other information includes the parameter names, parameter data type, whether
    the parameter is an input or output type, whether the parameter is required or
    optional, the geometry type, spatial reference, and fields.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他信息包括参数名称、参数数据类型、参数是输入还是输出类型、参数是必需还是可选、几何类型、空间参考和字段。
- en: '![Understanding the service page for a geoprocessing task](graphics/7965_10_4.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![了解地理处理任务的服务页面](graphics/7965_10_4.jpg)'
- en: Input parameters
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入参数
- en: 'There are a number of details you must remember regarding input parameters
    that are submitted to the geoprocessing task. Almost all geoprocessing tasks will
    require one or more parameters. These parameters can be either required or optional
    and are created as JSON objects. In this section, you''ll see a code example showing
    you how to create these JSON objects. When creating parameters as JSON objects,
    you must remember to create them in the exact order that they appear on the service
    page. The parameter names must also be named exactly as they are named on the
    service page. Please see the following screenshot for an example of how to read
    the input parameters of a service:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关于提交给地理处理任务的输入参数，您必须记住一些细节。几乎所有地理处理任务都需要一个或多个参数。这些参数可以是必需的或可选的，并且被创建为JSON对象。在本节中，您将看到一个代码示例，向您展示如何创建这些JSON对象。在创建参数作为JSON对象时，您必须记住按照它们在服务页面上出现的确切顺序创建它们。参数名称也必须与服务页面上的名称完全相同。请参阅以下屏幕截图，了解如何阅读服务的输入参数的示例：
- en: '![Input parameters](graphics/7965_10_5.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![输入参数](graphics/7965_10_5.jpg)'
- en: 'The following code example is correct because the parameter names are spelled
    exactly as seen in the service page (also notice that the casing is the same)
    and are provided in the correct order:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例是正确的，因为参数名称拼写与服务页面上看到的完全相同（还要注意大小写相同），并且按正确顺序提供：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In comparison, the following code example would be incorrect since the parameters
    are provided in reverse order:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，以下代码示例将是不正确的，因为参数是以相反顺序提供的：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous screenshot shows the input parameters supplied to a geoprocessing
    task. When coding your JSON input parameters object, it is critical that you provide
    the exact parameter name as given on the service page and that you provide the
    parameters in the order they appear on the page. Notice in our code example that
    we are providing two parameters: `Input_Observation_Point` and `Viewshed_Distance`.
    Both parameters are required and we have named them exactly as they appear on
    the service page and they are in the correct order.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了提交给地理处理任务的输入参数。在编写JSON输入参数对象时，非常重要的是您提供与服务页面上给出的确切参数名称，并且按照页面上出现的顺序提供参数。请注意，在我们的代码示例中，我们提供了两个参数：`Input_Observation_Point`和`Viewshed_Distance`。这两个参数都是必需的，并且我们已经将它们命名为它们在服务页面上出现的名称，并且它们的顺序是正确的。
- en: The Geoprocessor task
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地理处理任务
- en: 'The `Geoprocessor` class in the ArcGIS API for JavaScript represents a GP task
    resource, which is a single task in a geoprocessing service. Input parameters
    are passed into the `Geoprocessor` class through a call to either `Geoprocessor.execute()`
    or `Geoprocessor.submitJob()`. We''ll discuss the difference between these two
    calls later. After executing the geoprocessing task, the results are returned
    to the `Geoprocessor` object, where they are processed by a callback function.
    Creating an instance of the `Geoprocessor` class simply requires you to pass in
    the URL that points to the geoprocessing service exposed by ArcGIS Server. It
    does require you to import `esri/tasks/gp`. The following code example shows you
    how to create an instance of the `Geoprocessor` object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript中的`Geoprocessor`类表示GP任务资源，这是地理处理服务中的单个任务。输入参数通过调用`Geoprocessor.execute()`或`Geoprocessor.submitJob()`传递给`Geoprocessor`类。我们将在后面讨论这两个调用之间的区别。执行地理处理任务后，结果将返回到`Geoprocessor`对象，然后由回调函数处理。创建`Geoprocessor`类的实例只需要传入指向ArcGIS
    Server暴露的地理处理服务的URL。它需要您导入`esri/tasks/gp`。以下代码示例向您展示如何创建`Geoprocessor`对象的实例：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the task
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行任务
- en: Once you have an understanding of the geoprocessing models and tools available
    to you for an ArcGIS Server instance as well as the input and output parameters,
    you can begin writing the code that will execute the task. Geoprocessing jobs
    are submitted to ArcGIS Server for either synchronous or asynchronous execution.
    A synchronous execution implies that the client calls for execution of the task
    and then waits for the result before continuing with the application code. In
    an asynchronous execution, the client submits a job, continues to run other functions,
    and checks back later for completion of the job. By default, the client checks
    back for completion every second until the job is finished. The service page tells
    you how to submit your job for each geoprocessing task. Simply look for the execution
    type on the service page. The execution type is set when the model is published
    as a service. As a developer, you don't have any control over the type after it
    has been published.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解了ArcGIS Server实例可用的地理处理模型和工具以及输入和输出参数，您就可以开始编写执行任务的代码。地理处理作业被提交到ArcGIS
    Server以进行同步或异步执行。同步执行意味着客户端调用执行任务，然后在继续应用程序代码之前等待结果。在异步执行中，客户端提交作业，继续运行其他函数，并稍后检查作业的完成情况。默认情况下，客户端每秒检查一次作业是否完成。服务页面告诉您如何为每个地理处理任务提交作业。只需在服务页面上查找执行类型。执行类型在模型发布为服务时设置。作为开发人员，在发布后，您无法控制类型。
- en: Synchronous tasks
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步任务
- en: Synchronous tasks require your application code to submit a job and wait for
    a response before continuing. Because your end users must wait for the results
    to be returned before continuing to interact with your application, this type
    of task should only be used with tasks that return data very quickly. If a task
    takes more than just a few seconds, it should be defined as asynchronous instead
    of synchronous. Users quickly become frustrated with applications when data is
    returned within a very short period of time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同步任务需要您的应用程序代码提交作业并等待响应，然后才能继续。因为您的最终用户必须等待结果返回才能继续与应用程序交互，所以这种类型的任务应该仅用于返回数据非常快的任务。如果任务需要的时间超过几秒钟，应将其定义为异步而不是同步。当数据在非常短的时间内返回时，用户很快就会对应用程序感到沮丧。
- en: You will need to use the `Geoprocessor.execute()` method with the property input
    parameters and supplied callback function. The callback function is executed when
    the geoprocessing task returns the results of the job that was submitted. These
    results are stored in an array of `ParameterValue`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用`Geoprocessor.execute()`方法，其中包括属性输入参数和提供的回调函数。当地理处理任务返回提交的作业结果时，将执行回调函数。这些结果存储在`ParameterValue`数组中。
- en: Asynchronous tasks
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步任务
- en: Asynchronous tasks require you to submit a job, continue working on other functions
    while waiting for the process to finish, and then check back in with ArcGIS Server
    on a periodic basis to retrieve the results after completion. The advantage of
    an asynchronous task is that it doesn't force your end users to wait for the results.
    Instead, the task is submitted and your end users continue to interact with the
    application until the task has finished processing. When processing is complete,
    a callback function is triggered in your application and you can handle the results
    that are returned.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 异步任务需要您提交作业，同时继续在等待过程完成时处理其他函数，然后定期与ArcGIS Server检查以检索结果。异步任务的优势在于它不会强迫您的最终用户等待结果。相反，任务被提交，您的最终用户继续与应用程序交互，直到任务完成处理。处理完成后，将在您的应用程序中触发回调函数，您可以处理返回的结果。
- en: The `Geoprocessor.submitJob()` method is used to submit a job to the geoprocessing
    task. You will need to supply input parameters, a callback function, and a status
    callback function. The status callback function executes each time your application
    checks back for the results. By default, the status is checked once per second.
    However, this interval can be changed using the `Geoprocessor.setUpdateDelay()`
    method. Each time the status is checked, a `JobInfo` object is returned and contains
    information indicating the status of the job. When `JobInfo.jobStatus` is set
    to `STATUS_SUCCEEDED`, the complete callback function is called.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geoprocessor.submitJob()`方法用于提交地理处理任务的作业。您需要提供输入参数、回调函数和状态回调函数。状态回调函数每次应用程序检查结果时执行。默认情况下，每秒检查一次状态。但是，可以使用`Geoprocessor.setUpdateDelay()`方法更改此间隔。每次检查状态时，都会返回一个`JobInfo`对象，其中包含指示作业状态的信息。当`JobInfo.jobStatus`设置为`STATUS_SUCCEEDED`时，将调用完成回调函数。'
- en: A visual diagram of the process flow that occurs on asynchronous tasks is provided
    in the following figure and might help reinforce how these types of tasks operate.
    Input parameters are created and input to the `Geoprocessor` object, which uses
    these parameters to submit a geoprocessing job to ArcGIS Server. The `Geoprocessor`
    object then executes the `statusCallback()` function at regular intervals. This
    function checks with the geoprocessing service to see if the job is finished.
    A `JobInfo` object is returned and contains a status indicator, indicating its
    completion status. This process continues until the job is completed, at which
    time a complete callback function is called and which passes the results of the
    job.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了异步任务流程的可视化图表，可能有助于加强这些类型任务的操作方式。创建输入参数并将其输入到`Geoprocessor`对象中，该对象使用这些参数向ArcGIS
    Server提交地理处理作业。然后，`Geoprocessor`对象以固定间隔执行`statusCallback()`函数。此函数检查地理处理服务，以查看作业是否已完成。返回一个`JobInfo`对象，其中包含指示其完成状态的状态指示器。此过程持续进行，直到作业完成，此时将调用完成回调函数，并传递作业的结果。
- en: '![Asynchronous tasks](graphics/7965_10_6.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![异步任务](graphics/7965_10_6.jpg)'
- en: Time to practice with geoprocessing tasks
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习地理处理任务的时间
- en: In this exercise, you will code a simple application that displays drive time
    polygons on a map by accessing the **CreateDriveTimePolygons** model provided
    by Esri. The application will create 1-, 2-, and 3-minute drive time polygons
    around a point clicked on the map.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将编写一个简单的应用程序，通过访问Esri提供的**CreateDriveTimePolygons**模型，在地图上显示行驶时间多边形。该应用程序将在地图上点击的点周围创建1、2和3分钟的行驶时间多边形。
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)上打开JavaScript沙箱。
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我在以下代码片段中突出显示的`<script>`标签中删除JavaScript内容：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为本练习中将使用的对象添加以下引用：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `Map` object as seen in the following code snippet and define variables
    to hold the `Geoprocessor` object and drive times:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码片段中所示创建`Map`对象，并定义变量以保存`Geoprocessor`对象和行驶时间：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside the `require()` function, create the new `Geoprocessor` object and set
    the output spatial reference:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`require()`函数内部，创建新的`Geoprocessor`对象并设置输出空间参考：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set up an event listener for the `Map.click()` event. Each time the user clicks
    on the map, it will trigger the execution of the geoprocessing task that calculates
    drive times:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`Map.click()`事件设置事件监听器。每次用户在地图上单击时，都会触发计算行驶时间的地理处理任务的执行：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you''ll create the `computeServiceArea()` function that serves as the handler
    for the `Map.click()` event. This function will clear any existing graphics, create
    a new point graphic that represents the point where the user clicked on the map,
    and execute the geoprocessing task. First, create the stub for the `computeServiceArea()`
    function just below the line of code that defined the handler:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将创建`computeServiceArea()`函数，该函数作为`Map.click()`事件的处理程序。此函数将清除任何现有的图形，创建一个新的点图形，表示用户在地图上单击的点，并执行地理处理任务。首先，在定义处理程序的代码行的下方创建`computeServiceArea()`函数的存根：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Clear any existing graphics and create the new `SimpleMarkerSymbol` that will
    represent the point that is clicked on the map:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除任何现有的图形，并创建将表示在地图上单击的点的新`SimpleMarkerSymbol`：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the `Map.click()` event is triggered, an `Event` object is created and
    passed to the `computeServiceArea()` function. This object is represented in our
    code by the `evt` variable. In this step, you''re going to create a new `Graphic`
    object by passing in the `Event.mapPoint` property, which contains the `Point`
    geometry returned from the map click as well as the instance of `SimpleMarkerSymbol`
    that you created in the last step. You''ll then add this new graphic to `GraphicsLayer`
    so that it can be displayed on the map:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当触发`Map.click()`事件时，将创建一个`Event`对象并将其传递给`computeServiceArea()`函数。此对象在我们的代码中由`evt`变量表示。在此步骤中，您将通过传递`Event.mapPoint`属性创建一个新的`Graphic`对象，该属性包含从地图单击返回的`Point`几何以及您在上一步中创建的`SimpleMarkerSymbol`实例。然后，将此新图形添加到`GraphicsLayer`中，以便在地图上显示：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, create an array called `features` and place the `graphic` object into
    the array. This array of graphics will eventually be passed into a `FeatureSet`
    object that will be passed to the geoprocessing task:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`features`的数组，并将`graphic`对象放入数组中。这些图形的数组最终将被传递到将传递给地理处理任务的`FeatureSet`对象中：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a new `FeatureSet` object and add the array of graphics to the `FeatureSet.features`
    property:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`FeatureSet`对象，并将图形数组添加到`FeatureSet.features`属性中：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a JSON object that will hold the input parameters to be passed to the
    geoprocessing task and call the `Geoprocessor.execute()` method. The input parameters
    include `Input_Location` and `Drive_Times`. Remember that each input parameter
    must be spelled exactly as it is seen in the service page, including casing. The
    order of the parameters is also very important and is also defined on the service
    page. We define the `Input_Location` parameter to be a `FeatureSet` object. The
    `FeatureSet` object contains an array of graphics which in this case is only a
    single graphic point. The `Drive_Times` object has been hard coded with values
    of 1, 2, and 3 and set in the `driveTimes` variable we created earlier. Finally,
    we called the `Geoprocessor.execute()` method, passing in the input parameters
    as well as a callback function that will process the results. We''ll create this
    callback function next:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个JSON对象，该对象将保存要传递给地理处理任务的输入参数，并调用`Geoprocessor.execute()`方法。输入参数包括`Input_Location`和`Drive_Times`。请记住，每个输入参数必须拼写与服务页面中看到的完全相同，包括大小写。参数的顺序也非常重要，并且也在服务页面上定义。我们将`Input_Location`参数定义为`FeatureSet`对象。`FeatureSet`对象包含一个图形数组，在本例中只有一个单个图形点。`Drive_Times`对象已经使用我们之前创建的`driveTimes`变量硬编码为1、2和3的值。最后，我们调用`Geoprocessor.execute()`方法，传入输入参数以及将处理结果的回调函数。接下来我们将创建这个回调函数：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the last step, we defined a callback function called `getDriveTimePolys()`,
    which will be triggered when the geoprocessing task has finished with the analysis
    of drive times. Let''s create this `getDriveTimePolys()` function. Just below
    the closing brace of the `computeServiceArea()` function, start the stub for `getDriveTimePolys()`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步中，我们定义了一个名为`getDriveTimePolys()`的回调函数，当地理处理任务完成行驶时间分析时将被触发。让我们创建这个`getDriveTimePolys()`函数。在`computeServiceArea()`函数的结束大括号下方，开始`getDriveTimePolys()`的存根：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `getDriveTimePolys()` function accepts two parameters including the result
    object and any messages that are returned. Define a new `features` variable that
    holds the `FeatureSet` object returned by the geoprocessing task:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getDriveTimePolys()`函数接受两个参数，包括结果对象和返回的任何消息。定义一个新的`features`变量，其中包含地理处理任务返回的`FeatureSet`对象：'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The geoprocessing task will return three `Polygon` graphics. Each `Polygon`
    graphic represents a drive time that we hardcoded as an input parameter (1, 2,
    and 3 minutes). Create a `for` loop to process each of the polygons:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地理处理任务将返回三个`Polygon`图形。每个`Polygon`图形表示我们硬编码为输入参数的行驶时间（1、2和3分钟）。创建一个`for`循环来处理每个多边形：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside the `for` loop, symbolize each of the polygons with a different color.
    The first graphic will be red, the second green, and the third blue. There will
    be three polygons in the `FeatureSet` object. Define a different polygon symbol
    for each using the following code block and add the graphic to the `GraphicsLayer`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`for`循环内，使用不同的颜色对每个多边形进行符号化。第一个图形将是红色，第二个是绿色，第三个是蓝色。`FeatureSet`对象中将有三个多边形。使用以下代码块为每个定义不同的多边形符号，并将图形添加到`GraphicsLayer`中：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set the map extent to be the extent of `GraphicsLayer`, which now contains
    the three polygons you just created:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将地图范围设置为`GraphicsLayer`的范围，该范围现在包含您刚刚创建的三个多边形：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add a `<div>` tag that will hold the instructions for the application:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`<div>`标签，用于保存应用程序的说明：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alter the `<style>` tag at the top of the code, as seen in the highlighted
    part of the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改代码顶部的`<style>`标签，如以下代码的突出显示部分所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You may want to review the solution file (`drivetimes.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能希望在`ArcGISJavaScriptAPI`文件夹中查看解决方案文件（`drivetimes.html`），以验证您的代码是否已正确编写。
- en: Click on the **Run** button. You should see the map in the following screenshot.
    If not, you may need to recheck your code for accuracy.![Time to practice with
    geoprocessing tasks](graphics/7965_10_7.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**按钮。您应该在以下截图中看到地图。如果没有，您可能需要重新检查代码的准确性。![练习地理处理任务的时间](graphics/7965_10_7.jpg)
- en: Click somewhere on the map. In just a few moments, you should see the drive
    time polygons displayed. Be patient. Sometimes this can take a little while.![Time
    to practice with geoprocessing tasks](graphics/7965_10_8.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地图上的某个地方点击。只需片刻，您应该看到行驶时间多边形显示出来。请耐心等待。有时这可能需要一点时间。![练习地理处理任务的时间](graphics/7965_10_8.jpg)
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: ArcGIS Server can expose geoprocessing services such as models and tools, which
    your application can access. These tools are run on ArcGIS Server due to their
    computationally intensive nature and need for ArcGIS software. Jobs are submitted
    to the server through your application and the results are returned after the
    task is complete. Geoprocessing tasks can be synchronous or asynchronous and are
    configured to run as one of these types by an ArcGIS Server administrator. As
    an application programmer, it is important for you to understand what type of
    geoprocessing service you are accessing as the method call that you make to the
    service depends upon this information. In addition, to know whether a task is
    synchronous or asynchronous, you also need to know the URL of the geoprocessing
    model or tool as well as the input and output parameters. In the next chapter,
    you will learn how to add data and maps from ArcGIS Online to your application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server可以公开地理处理服务，如模型和工具，您的应用程序可以访问。这些工具在ArcGIS Server上运行，因为它们需要进行计算密集型的操作，并且需要ArcGIS软件。作业通过您的应用程序提交到服务器，任务完成后返回结果。地理处理任务可以是同步或异步的，并且由ArcGIS
    Server管理员配置为其中一种类型运行。作为应用程序员，重要的是要了解您正在访问的地理处理服务的类型，因为您对服务的方法调用取决于这些信息。此外，要知道任务是同步还是异步，您还需要知道地理处理模型或工具的URL以及输入和输出参数。在下一章中，您将学习如何将ArcGIS
    Online的数据和地图添加到您的应用程序中。
