["```\n$ docker-machine create --driver virtualbox docker-local\n```", "```\nCreating CA: /Users/russ/.docker/machine/certs/ca.pem\nCreating client certificate: /Users/russ/.docker/machine/certs/cert.pem\nRunning pre-create checks...\n(docker-local) Image cache directory does not exist, creating it at /Users/russ/.docker/machine/cache...\n```", "```\n(docker-local) No default Boot2Docker ISO found locally, downloading the latest release...\n(docker-local) Latest release for github.com/boot2docker/boot2docker is v18.06.1-ce\n(docker-local) Downloading /Users/russ/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso...\n(docker-local) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%\n```", "```\nCreating machine...\n(docker-local) Copying /Users/russ/.docker/machine/cache/boot2docker.iso to /Users/russ/.docker/machine/machines/docker-local/boot2docker.iso...\n(docker-local) Creating VirtualBox VM...\n(docker-local) Creating SSH key...\n(docker-local) Starting the VM...\n(docker-local) Check network to re-create if needed...\n(docker-local) Found a new host-only adapter: \"vboxnet0\"\n(docker-local) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\n```", "```\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\n```", "```\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-local\n```", "```\n$ docker-machine env docker-local\n```", "```\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://192.168.99.100:2376\"\nexport DOCKER_CERT_PATH=\"/Users/russ/.docker/machine/machines/docker-local\"\nexport DOCKER_MACHINE_NAME=\"docker-local\"\n# Run this command to configure your shell:\n# eval $(docker-machine env docker-local)\n```", "```\n$ eval $(docker-machine env docker-local)\n```", "```\n$ docker-machine ls\n```", "```\n$ docker-machine ssh docker-local\n```", "```\n$ docker-machine ip docker-local\n```", "```\n$ docker-machine inspect docker-local\n$ docker-machine config docker-local\n$ docker-machine status docker-local\n$ docker-machine url docker-local\n```", "```\n$ docker-machine stop docker-local\n$ docker-machine start docker-local\n$ docker-machine restart docker-local\n$ docker-machine rm docker-local\n```", "```\nAbout to remove docker-local\nWARNING: This action will delete both local reference and remote instance.\nAre you sure? (y/n): y\nSuccessfully removed docker-local\n```", "```\n$ DOTOKEN=0cb54091fecfe743920d0e6d28a29fe325b9fc3f2f6fccba80ef4b26d41c7224\n```", "```\n$ docker-machine create \\\n --driver digitalocean \\ --digitalocean-access-token $DOTOKEN \\ docker-digitalocean\n```", "```\nRunning pre-create checks...\nCreating machine...\n(docker-digitalocean) Creating SSH key...\n(docker-digitalocean) Creating Digital Ocean droplet...\n(docker-digitalocean) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-digitalocean\n```", "```\n$ eval $(docker-machine env docker-digitalocean)\n```", "```\n$ docker-machine create \\\n --driver digitalocean \\\n --digitalocean-access-token $DOTOKEN \\\n --digitalocean-image ubuntu-16-04-x64 \\\n --digitalocean-region nyc3 \\\n --digitalocean-size 512mb \\\n --digitalocean-ipv6 false \\\n --digitalocean-private-networking false \\\n --digitalocean-backups false \\\n --digitalocean-ssh-user root \\\n --digitalocean-ssh-port 22 \\\n docker-digitalocean\n```", "```\n$ docker-machine create \\\n --driver digitalocean \\\n --digitalocean-access-token $DOTOKEN \\\n --digitalocean-image ubuntu-18-04-x64 \\\n --digitalocean-size 1gb \\\n docker-digitalocean\n```", "```\n$ docker-machine rm docker-digitalocean\n```", "```\n$ docker-machine create \\\n --driver digitalocean \\\n --digitalocean-access-token $DOTOKEN \\\n --digitalocean-image coreos-stable \\\n --digitalocean-size 1GB \\\n --digitalocean-ssh-user core \\\n docker-coreos\n```", "```\nRunning pre-create checks...\nCreating machine...\n(docker-coreos) Creating SSH key...\n(docker-coreos) Creating Digital Ocean droplet...\n(docker-coreos) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with coreOS...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker-coreos\n```", "```\n$ docker-machine ssh docker-coreos cat /etc/*release\n```", "```\nDISTRIB_ID=\"Container Linux by CoreOS\"\nDISTRIB_RELEASE=1800.7.0\nDISTRIB_CODENAME=\"Rhyolite\"\nDISTRIB_DESCRIPTION=\"Container Linux by CoreOS 1800.7.0 (Rhyolite)\"\nNAME=\"Container Linux by CoreOS\"\nID=coreos\nVERSION=1800.7.0\nVERSION_ID=1800.7.0\nBUILD_ID=2018-08-15-2254\nPRETTY_NAME=\"Container Linux by CoreOS 1800.7.0 (Rhyolite)\"\nANSI_COLOR=\"38;5;75\"\nHOME_URL=\"https://coreos.com/\"\nBUG_REPORT_URL=\"https://issues.coreos.com\"\nCOREOS_BOARD=\"amd64-usr\"\n```", "```\n$ docker $(docker-machine config docker-coreos) version\n```", "```\n$ docker-machine rm docker-coreos\n```"]