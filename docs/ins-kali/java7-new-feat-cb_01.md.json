["```java\n    public class StringSwitchExample {\n    private static boolean verbose = false;\n    private static boolean logging = false;\n    private static boolean displayHelp = false;\n    }\n\n    ```", "```java\n    public static void main(String[] args) {\n    for (String argument : args) {\n    switch (argument) {\n    case \"-verbose\":\n    case \"-v\":\n    verbose = true;\n    switch statementsstring literals, usingbreak;\n    case \"-log\":\n    logging = true;\n    break;\n    case \"-help\":\n    displayHelp = true;\n    break;\n    default:\n    System.out.println(\"Illegal command line argument\");\n    }\n    }\n    displayApplicationSettings();\n    }\n\n    ```", "```java\n    private static void displayApplicationSettings() {\n    System.out.println(\"Application Settings\");\n    System.out.println(\"Verbose: \" + verbose);\n    System.out.println(\"Logging: \" + logging);\n    System.out.println(\"Help: \" + displayHelp);\n    }\n\n    ```", "```java\n    java StringSwitchExample -verbose -log\n\n    ```", "```java\njava StringSwitchExample -Verbose -log\n\n```", "```java\n    public static void main(String[] args) {\n    long debitCard = 1234_5678_9876_5432L;\n    System.out.println(\"The card number is: \" + debitCard);\n    System.out.print(\"The formatted card number is:\");\n    printFormatted(debitCard);\n    float minAmount = 5_000F;\n    float currentAmount = 5_250F;\n    float withdrawalAmount = 500F;\n    if ((currentAmount - withdrawalAmount) < minAmount) {\n    System.out.println(\"Minimum amount limit exceeded \" + minAmount);\n    }\n    }\n\n    ```", "```java\n    private static void printFormatted(long cardNumber) {\n    String formattedNumber = Long.toString(cardNumber);\n    for (int i = 0; i < formattedNumber.length(); i++) {\n    if (i % 4 == 0) {\n    System.out.print(\" \");\n    }\n    System.out.print(formattedNumber.charAt(i));\n    }\n    System.out.println();\n    }\n\n    ```", "```java\nlong productKey = _12345_67890_09876_54321L;\nfloat pi = 3._14_15F;\nlong licenseNumber = 123_456_789_L;\n\n```", "```java\nint commandInHex = 0xE_23D5_8C_7;\nint commandInBinary = 0b1110_0010001111010101_10001100_0111;\n\n```", "```java\nbyte initializationSequence = 0b10_110_010;\n\n```", "```java\nresult = inputValue & 0b000_11111;\n\n```", "```java\nbyte initializationSequence = (byte) 0b01_110_010;\nbyte inputValue = (byte) 0b101_11011;\nbyte result = (byte) (inputValue & (byte) 0b000_11111);\nSystem.out.println(\"initializationSequence: \" +\nInteger.toBinaryString(initializationSequence));\nSystem.out.println(\"result: \" + Integer.toBinaryString(result));\n\n```", "```java\n    public static void main(String[] args) {\n    try (BufferedReader inputReader = Files.newBufferedReader(\n    Paths.get(new URI (\"file:///C:/home/docs/users.txt\")),\n    Charset.defaultCharset());\n    BufferedWriter outputWriter = Files.newBufferedWriter(\n    Paths.get(new URI(\"file:///C:/home/docs/users.bak\")),\n    Charset.defaultCharset())) {\n    String inputLine;\n    while ((inputLine = inputReader.readLine()) != null) {\n    outputWriter.write(inputLine);\n    outputWriter.newLine();\n    }\n    System.out.println(\"Copy complete!\");\n    }\n    catch (URISyntaxException | IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\nPath path = null;\ntry {\npath = Paths.get(new URI(\"file:///C:/home/docs/users.txt\"));\n}\ncatch (URISyntaxException e) {\nSystem.out.println(\"Bad URI\");\n}\ntry (BufferedReader inputReader = Files.newBufferedReader(path, Charset.defaultCharset())) {\nString inputLine;\nwhile ((inputLine = inputReader.readLine()) != null) {\nSystem.out.println(inputLine);\n}\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry (BufferedReader inputReader = Files.newBufferedReader(\nPaths.get(new URI(\"file:///C:/home/docs/users.txt\")), Charset.defaultCharset())) {\nString inputLine;\nwhile ((inputLine = inputReader.readLine()) != null) {\nSystem.out.println(inputLine);\n}\n}\ncatch (IOException | URISyntaxException ex) {\nex.printStackTrace();\n}\n\n```", "```java\ntry {\nPath path = Paths.get(\"users.txt\");\nBufferedReader inputReader =\nFiles.newBufferedReader(path, Charset.defaultCharset());\nString inputLine;\nwhile ((inputLine = inputReader.readLine()) != null) {\nSystem.out.println(inputLine);\n}\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n\n```", "```java\n    public class FirstAutoCloseableResource implements AutoCloseable {\n    @Override\n    public void close() throws Exception {\n    // Close the resource as appropriate\n    System.out.println(\"FirstAutoCloseableResource close method executed\");\n    throw new UnsupportedOperationException(\n    \"A problem has occurred in FirstAutoCloseableResource\");\n    }\n    public void manipulateResource() {\n    // Perform some resource specific operation\n    System.out.println(\"FirstAutoCloseableResource manipulateResource method executed\");\n    try-with-resource blockresource, creating}\n    }\n    public class SecondAutoCloseableResource implements AutoCloseable {\n    @Override\n    public void close() throws Exception {\n    // Close the resource as appropriate\n    System.out.println(\"SecondAutoCloseableResource close method executed\");\n    throw new UnsupportedOperationException(\n    \"A problem has occurred in SecondAutoCloseableResource\");\n    }\n    public void manipulateResource() {\n    // Perform some resource specific operation\n    System.out.println(\"SecondAutoCloseableResource manipulateResource method executed\");\n    }\n    }\n\n    ```", "```java\n    try (FirstAutoCloseableResource resource1 = new FirstAutoCloseableResource();\n    SecondAutoCloseableResource resource2 = new SecondAutoCloseableResource()) {\n    resource1.manipulateResource();\n    resource2.manipulateResource();\n    }\n    catch (Exception e) {\n    e.printStackTrace();\n    for(Throwable throwable : e.getSuppressed()) {\n    System.out.println(throwable);\n    }\n    }\n\n    ```", "```java\n    public class InvalidParameter extends java.lang.Exception {\n    public InvalidParameter() {\n    super(\"Invalid Parameter\");\n    }\n    }\n\n    ```", "```java\n    public class MultipleExceptions {\n    private static final Logger logger = Logger.getLogger(\"log.\n    txt\");\n    public static void main(String[] args) {\n    System.out.print(\"Enter a number: \");\n    try {\n    Scanner scanner = new Scanner(System.in);\n    int number = scanner.nextInt();\n    if (number < 0) {\n    throw new InvalidParameter();\n    }\n    System.out.println(\"The number is: \" + number);\n    }\n    catch (InputMismatchException | InvalidParameter e) {\n    logger.log(Level.INFO, \"Invalid input, try again\");\n    }\n    }\n\n    ```", "```java\n}\ncatch (InputMismatchException | InvalidParameter e) {\ne = new Exception(); // multi-catch parameter e may not be assigned\nlogger.log(Level.INFO, \"Invalid input, try again\");\n}\n\n```", "```java\npublic class ReflectiveOperationExceptionExample {\npublic static void main(String[] args) {\ntry {\nFiles.delete(Paths.get(new URI(\"file:///tmp.txt\")));\n}\ncatch (URISyntaxException ex) {\nex.printStackTrace();\n}\ncatch (IOException ex) {\nex.printStackTrace();\n}\n}\n}\n\n```", "```java\nif(number>10) {\nthrow new AssertionError(\"Number was too big\",new Throwable(\"Throwable assertion message\"));\n}\n\n```", "```java\n    public class ReflectiveOperationExceptionExample {\n    public static void main(String[] args) {\n    try {\n    deleteFile(Paths.get(new URI(\"file:///tmp.txt\")));\n    }\n    catch (URISyntaxException ex) {\n    ex.printStackTrace();\n    }\n    catch (IOException ex) {\n    ex.printStackTrace();\n    }\n    }\n\n    ```", "```java\n    private static void deleteFile(Path path) throws NoSuchFileException, DirectoryNotEmptyException {\n    Java 7exceptions, rethrowingtry {\n    Files.delete(path);\n    }\n    catch (IOException ex) {\n    if(path.toFile().isDirectory()) {\n    throw new DirectoryNotEmptyException(null);\n    }\n    else {\n    throw new NoSuchFileException(null);\n    }\n    }\n    }\n    }\n\n    ```", "```java\n    List<String> list = new ArrayList<>();\n\n    ```", "```java\nList<String> list = new ArrayList(); // Uses raw type\n\n```", "```java\nList<String> list = new ArrayList<String>();\n\n```", "```java\nList<Map<String, List<String>> stringList = new ArrayList<>();\n\n```", "```java\nList arrayList = new ArrayList<>();\narrayList.add(\"First\");\narrayList.add(\"Second\");\n\n```", "```java\nList<String> arrayList = new ArrayList<>();\n\n```", "```java\n@SuppressWarnings(\"unchecked\")\nList<String> arrayList = new ArrayList();\n\n```", "```java\nprivate static void useRawType() {\nList<String> arrayList = new ArrayList();\narrayList.add(\"First\");\narrayList.add(\"Second\");\nSystem.out.println(arrayList.get(0));\n}\nprivate static void useExplicitType() {\nList<String> arrayList = new ArrayList<String>();\narrayList.add(\"First\");\narrayList.add(\"Second\");\nSystem.out.println(arrayList.get(0));\n}\nprivate static void useImplicitType() {\nList<String> arrayList = new ArrayList<>();\narrayList.add(\"First\");\narrayList.add(\"Second\");\nSystem.out.println(arrayList.get(0));\n}\n\n```", "```java\njavap -v -p packt/Bin\n\n```", "```java\nprivate static void useImplicitType();\nflags: ACC_PRIVATE, ACC_STATIC\nCode:\nstack=3, locals=1, args_size=0\n0: new #5 // class java/util/ArrayList\n3: dup\n4: invokespecial #6 // Method java/util/ArrayList.\"<in\nit>\":()V\n7: astore_0\n8: aload_0\n9: ldc #7 // String First\n11: invokevirtual #8 // Method java/util/ArrayList.add:\n(Ljava/lang/Object;)Z\n14: pop\n15: aload_0\n16: ldc #9 // String Second\n18: invokevirtual #8 // Method java/util/ArrayList.add:\n(Ljava/lang/Object;)Z\n21: pop\n22: getstatic #10 // Field java/lang/System.out:Ljav\na/io/PrintStream;\n25: aload_0\n26: iconst_0\n27: invokevirtual #11 // Method java/util/ArrayList.get:\n(I)Ljava/lang/Object;\n30: checkcast #12 // class java/lang/String\n33: invokevirtual #13 // Method java/io/PrintStream.prin\ntln:(Ljava/lang/String;)V\n36: return\n\n```", "```java\n    package packt;\n    import java.util.ArrayList;\n    public class SafeVargExample {\n    public static void main(String[] args) {\n    }\n    @SafeVarargs\n    public static <T> void displayElements(T... array) {\n    for (T element : array) {\n    System.out.println(element.getClass().getName() + \": \" + element);\n    }\n    }\n    }\n\n    ```", "```java\n    ArrayList<Integer> a1 = new ArrayList<>();\n    a1.add(new Integer(1));\n    a1.add(2);\n    ArrayList<Float> a2 = new ArrayList<>();\n    a2.add(new Float(3.0));\n    a2.add(new Float(4.0));\n    displayElements(a1, a2, 12);\n\n    ```", "```java\nString arr[] = {\"First\", \"Second\"};\n\n```", "```java\nList<String> list1 = new ArrayList<String>();\nlist1.add(\"a\");\nList<String> list2 = new ArrayList<String>();\nlist2.add(\"b\");\nList<String> arr[] = {list1, list2}\n\n```", "```java\n@SafeVarargs // Not actually safe!\nstatic void merge(List<String>... stringLists) {\nObject[] array = stringLists;\nList<Integer> tmpList = Arrays.asList(42);\narray[0] = tmpList; // Semantically invalid, but compiles without warnings\nString element = stringLists[0].get(0); // runtime ClassCastException\n}\n\n```", "```java\nList<String> list1 = new ArrayList<>();\nlist1.add(\"One\");\nlist1.add(\"Two\");\nlist1.add(\"Three\");\nList<String> list2 = new ArrayList<>();\nlist2.add(\"Four\");\nlist2.add(\"Five\");\nlist2.add(\"Six\");\nmerge(list1,list2);\n\n```", "```java\narray[0] = tmpList\n\n```"]