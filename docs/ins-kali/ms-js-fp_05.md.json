["```js\nconst myArray = [22, 9, 60, 12, 4, 56];\nconst sum = (x, y) => x + y;\nconst mySum = myArray.reduce(sum, 0); // 163\n```", "```js\nconst sumAndLog = (x, y) => {\n console.log(`${x}+${y}=${x + y}`);\n return x + y;\n};\nmyArray.reduce(sumAndLog, 0);\n```", "```js\n0+22=22\n22+9=31\n31+60=91\n91+12=103\n103+4=107\n107+56=163\n```", "```js\nconst average = arr => arr.reduce(sum, 0) / arr.length;\n\nconsole.log(average(myArray)); // *27.166667*\n```", "```js\nconst myArray = [22, 9, 60, 12, 4, 56];\n\nconst average2 = (sum, val, ind, arr) => {\n sum += val;\n return ind == arr.length - 1 ? sum / arr.length : sum;\n};\n\nconsole.log(myArray.reduce(average2, 0)); // 27.166667\n```", "```js\nArray.prototype.average = function() {\n return this.reduce((x, y) => x + y, 0) / this.length;\n};\n\nlet myAvg = [22, 9, 60, 12, 4, 56].average(); // *27.166667*\n```", "```js\nconst average3 = arr => {\n const sc = arr.reduce(\n (ac, val) => ({ sum: val + ac.sum, count: ac.count + 1 }),\n    { sum: 0, count: 0 }\n );\n return sc.sum / sc.count;\n};\n\nconsole.log(average3(myArray)); // *27.166667*\n```", "```js\nconst average4 = arr => {\n const sc = arr.reduce((ac, val) => [ac[0] + val, ac[1] + 1], [0, 0]);\n return sc[0] / sc[1];\n};\nconsole.log(average4(myArray)); // *27.166667*\n```", "```js\nconst reverseString = str => {\n let arr = str.split(\"\");\n arr.reverse();\n return arr.join(\"\");\n};\n\nconsole.log(reverseString(\"MONTEVIDEO\")); // *OEDIVETNOM*\n```", "```js\nconst reverseString2 = str =>\n str.split(\"\").reduceRight((x, y) => x + y, \"\");\n\nconsole.log(reverseString2(\"OEDIVETNOM\")); // *MONTEVIDEO*\n```", "```js\nconst markers = [\n {name: \"UY\", lat: -34.9, lon: -56.2},\n {name: \"AR\", lat: -34.6, lon: -58.4},\n {name: \"BR\", lat: -15.8, lon: -47.9},\n ...\n {name: \"BO\", lat: -16.5, lon: -68.1}\n];\n```", "```js\nlet averageLat = average(markers.map(x => x.lat));\nlet averageLon = average(markers.map(x => x.lon));\n```", "```js\nlet averageLat2 = markers.map(x => x.lat).average();\nlet averageLon2 = markers.map(x => x.lon).average();\n```", "```js\n[\"123.45\", \"67.8\", \"90\"].map(parseFloat);\n// [123.45, 67.8, 90]\n\n[\"123.45\", \"-67.8\", \"90\"].map(parseInt);\n// [123, NaN, NaN]\n```", "```js\n[\"123.45\", \"-67.8\", \"90\"].map(x => parseFloat(x));\n// [123.45, -67.8, 90]\n\n[\"123.45\", \"-67.8\", \"90\"].map(x => parseInt(x));\n// [123, -67, 90]\n```", "```js\nconst range = (start, stop) =>\n new Array(stop - start).fill(0).map((v, i) => start + i);\n\nlet from2To6 = range(2, 7); // [2, 3, 4, 5, 6];\n```", "```js\nconst factorialByRange = n => range(1, n + 1).reduce((x, y) => x * y, 1);\n\nfactorialByRange(5); // 120\nfactorialByRange(3); // 6\n```", "```js\nconst ALPHABET = range(\"A\".charCodeAt(), \"Z\".charCodeAt() + 1).map(x =>\n String.fromCharCode(x)\n);\n// [\"A\", \"B\", \"C\", ... \"X\", \"Y\", \"Z\"]\n```", "```js\nconst myMap = (arr, fn) => arr.reduce((x, y) => x.concat(fn(y)), []);\n```", "```js\nconst myArray = [22, 9, 60, 12, 4, 56];\nconst dup = x => 2 * x;\n\nconsole.log(myArray.map(dup));    // *[44, 18, 120, 24, 8, 112]*\nconsole.log(myMap(myArray, dup)); // *[44, 18, 120, 24, 8, 112]*\nconsole.log(myArray);             // *[22, 9, 60, 12, 4, 56]*\n```", "```js\nconst objCopy = obj => {\n let copy = Object.create(Object.getPrototypeOf(obj));\n Object.getOwnPropertyNames(obj).forEach(prop =>\n Object.defineProperty(\n copy,\n prop,\n Object.getOwnPropertyDescriptor(obj, prop)\n )\n );\n return copy;\n};\n\nconst myObj = {fk: 22, st: 12, desc: \"couple\"};\nconst myCopy = objCopy(myObj);\nconsole.log(myObj, myCopy); // {fk: 22, st: 12, desc: \"couple\"}, twice\n```", "```js\nconst factorial4 = n => {\n let result = 1;\n    range(1, n + 1).forEach(v => (result *= v));\n return result;\n};\n\nconsole.log(factorial4(5)); // 120\n```", "```js\n{\n accountsData: [\n {\n id: \"F220960K\",\n balance: 1024\n },\n {\n id: \"S120456T\",\n balance: 2260\n },\n {\n id: \"J140793A\",\n balance: -38\n },\n {\n id: \"M120396V\",\n balance: -114\n },\n {\n id: \"A120289L\",\n balance: 55000\n }\n ]\n}\n```", "```js\nconst delinquent = serviceResult.accountsData.filter(v => v.balance < 0);\n\nconsole.log(delinquent); // two objects, with id's J140793A and M120396V\n```", "```js\nconst delinquentIds = delinquent.map(v => v.id);\n```", "```js\nconst delinquentIds2 = serviceResult.accountsData\n .filter(v => v.balance < 0)\n .map(v => v.id);\n```", "```js\nconst myFilter = (arr, fn) =>\n arr.reduce((x, y) => (fn(y) ? x.concat(y) : x), []);\n```", "```js\nconsole.log(myFilter(serviceResult.accountsData, v => v.balance < 0));\n// two objects, with id's J140793A and M120396V\n```", "```js\narr.includes(value); // arr.find(**v => v === value**)\narr.indexOf(value);  // arr.findIndex(**v => v === value**)\n```", "```js\nmarkers = [\n {name: \"UY\", lat: -34.9, lon: -56.2},\n {name: \"AR\", lat: -34.6, lon: -58.4},\n {name: \"BR\", lat: -15.8, lon: -47.9},\n //\u2026\n {name: \"BO\", lat: -16.5, lon: -68.1}\n];\n\nlet brazilData = markers.find(v => v.name === \"BR\");\n// {name:\"BR\", lat:-15.8, lon:-47.9}\n```", "```js\nlet brazilIndex = markers.findIndex(v => v.name === \"BR\"); // 2\nlet mexicoIndex = markers.findIndex(v => v.name === \"MX\"); // -1\n```", "```js\n[1, 2, NaN, 4].findIndex(x => x === NaN); // -1\n```", "```js\n[1, 2, NaN, 4].findIndex(x => isNaN(x)); // 2\n```", "```js\narr.find(fn);\n// arr.reduce((x, y) => (x === undefined && fn(y) ? y : x), undefined);\n```", "```js\narr.findIndex(fn);\n// arr.reduce((x, y, i) => (x == -1 && fn(y) ? i : x), -1);\n```", "```js\nmarkers.every(v => v.lat < 0 && x.lon < 0); // *false*\n\nmarkers.some(v => v.lat < 0 && x.lon < 0);  // *true*\n```", "```js\narr.every(fn);\n// arr.reduce((x, y) => x && fn(y), true);\n\narr.some(fn);\n// arr.reduce((x, y) => x || fn(y), false);\n```", "```js\nconst none = (arr, fn) => arr.every(v => !fn(v));\n```", "```js\nArray.prototype.none = function(fn) {\n return this.every(v => !fn(v));\n};\n```", "```js\n let newArray = someArray.filter(Boolean);\n```", "```js\n var characters = [\n {name: \"Fred\", plays: \"bowling\"},\n {name: \"Barney\", plays: \"chess\"},\n {name: \"Wilma\", plays: \"bridge\"},\n {name: \"Betty\", plays: \"checkers\"},\n .\n .\n .\n {name: \"Pebbles\", plays: \"chess\"}\n ];\n```", "```js\n <div>\n <ul>\n <li>Barney</li>\n <li>Betty</li>\n .\n .\n .\n <li>Pebbles</li>\n </ul>\n </div>;\n```", "```js\n let myData = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\n let myCSV = dataToCsv(myData); // \"1,2,3,4\\n5,6,7,8\\n9,10,11,12\\n\"\n```"]