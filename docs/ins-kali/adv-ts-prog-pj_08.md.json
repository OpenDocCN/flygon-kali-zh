["```ts\nswagger: '2.0'\ninfo:\n  version: '1.0'\n  title: 'Advanced TypeScript 3 - CRM'\n  description: ''\npaths: {}\n# Added by API Auto Mocking Plugin\nhost: virtserver.swaggerhub.com\nbasePath: /user_id/AdvancedTypeScript3CRM/1.0\nschemes:\n - https\n```", "```ts\npaths:\n  /people:\n    get:\n     summary: \"Retrieves the list of people from Firebase\"\n     description: Returns a list of people\n```", "```ts\n     responses:\n        200:\n        400:\n          description: Invalid request \n          schema:\n            type: object\n            properties: \n              message:\n                type: string\n```", "```ts\n          description: Successfully returned a list of people \n          schema:\n            type: array\n            items:\n              type: object\n              properties:\n                ServerID:\n                  type: string\n                FirstName:\n                  type: string\n                LastName:\n                  type: string\n                Address:\n                  type: object\n                  properties:\n                    Line1: \n                      type: string\n                    Line2: \n                      type: string\n                    Line3: \n                      type: string\n                    Line4: \n                      type: string\n                    PostalCode: \n                      type: string\n                    ServerID: \n                      type: string\n```", "```ts\n{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"removeComments\": true,\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"inlineSourceMap\": true,\n    \"experimentalDecorators\": true,\n  }\n}\n```", "```ts\nexport interface IDatabaseModelBase {\n  ServerID: string;\n}\n```", "```ts\nexport abstract class FirestoreService<T extends IDatabaseModelBase> {\n  constructor(private collection: string) { }\n}\n```", "```ts\npublic Save(item: T): Promise<T> {\n  return new Promise<T>(async (coll) => {\n    item.ServerID = Guid.create().toString();\n    await firebase.firestore().collection(this.collection).doc(item.ServerID).set(item);\n    coll(item);\n  });\n}\n```", "```ts\nconst firestore: firebase.firestore.Firestore = firebase.firestore();\n```", "```ts\nconst collection: firebase.firestore.CollectionReference = firestore.collection(this.collection);\n```", "```ts\nconst doc: firebase.firestore.DocumentReference = collection.doc(item.ServerID);\n```", "```ts\nawait doc.set(item);\n```", "```ts\ncoll(item);\n```", "```ts\npublic async Get(id: string): Promise<T> {\n  const qry = await firebase.firestore().collection(this.collection).doc(id).get();\n  return <T>qry.data();\n}\n```", "```ts\npublic async GetAll(): Promise<T[]> {\n  const qry = await firebase.firestore().collection(this.collection).get();\n  const items: T[] = new Array<T>();\n  qry.forEach(item => {\n    items.push(<T>item.data());\n  });\n  return items;\n}\n```", "```ts\nexport interface IAddress extends IDatabaseModelBase {\n  Line1 : string,\n  Line2 : string,\n  Line3 : string,\n  Line4 : string,\n  PostalCode : string\n}\n```", "```ts\nexport class AddressesService extends FirestoreService<IAddress> {\n  constructor() {\n    super('addresses');\n  }\n}\n```", "```ts\nexport interface IPerson extends IDatabaseModelBase {\n  FirstName: string;\n  LastName: string;\n  Address: IAddress;\n}\nexport class PersonService extends FirestoreService<IPerson> {\n  constructor() {\n    super('people');\n  }\n}\n```", "```ts\nexport interface IRouter {\n  AddRoute(route: any): void;\n}\n```", "```ts\nexport class RoutingEngine {\n  constructor(private routing: IRouter[] = new Array<IRouter>()) {\n  }\n  public Add<T1 extends IRouter>(routing: (new () => T1), route: any) {\n    const routed = new routing();\n    routed.AddRoute(route);\n    this.routing.push(routed);\n  }\n}\n```", "```ts\nexport class SaveAddressRouting implements IRouter {\n  AddRoute(route: any): void {\n    route.post('/add/', (request: Request, response: Response) => {\n      const person: IAddress = <IAddress>{...request.body};\n      new AddressesService().Save(person);\n      response.json(person);\n    });\n  }\n}\n```", "```ts\nexport class GetAddressRouting implements IRouter {\n  AddRoute(route: any): void {\n    route.get('/get/', async (request: Request, response: Response) => {\n      const result = await new AddressesService().GetAll();\n      if (result) {\n        response.json(result);\n      }\n      response.send('');\n    });\n  }\n}\n```", "```ts\nexport abstract class Server {\n  constructor(private port: number = 3000, private app: any = express(), protected routingEngine: RoutingEngine = new RoutingEngine()) {}\n  }\n}\n```", "```ts\npublic WithCorsSupport(): Server {\n  this.app.use(cors());\n  return this;\n}\n```", "```ts\nprotected AddRouting(router: Router): void {\n}\n```", "```ts\npublic Start(): void {\n  this.app.use(bodyParser.json()); \n  this.app.use(bodyParser.urlencoded({extended:true}));\n  const router: Router = express.Router();\n  this.AddRouting(router);\n  this.app.use(router);\n  this.app.listen(this.port, ()=> console.log(`logged onto server at ${this.port}`));\n}\n```", "```ts\npublic WithDatabase(): Server {\n  firebase.initializeApp(Environment.fireBase);\n  return this;\n}\n```", "```ts\nexport const Environment = {\n  fireBase: {\n    apiKey: <<add your api key here>>,\n    authDomain: \"advancedtypescript3-containers.firebaseapp.com\",\n    databaseURL: \"https://advancedtypescript3-containers.firebaseio.com\",\n    projectId: \"advancedtypescript3-containers\",\n    storageBucket: \"advancedtypescript3-containers.appspot.com\",\n    messagingSenderId: <<add your sender id here>>\n  }\n}\n```", "```ts\nexport class AddressesServer extends Server {\n  protected AddRouting(router: Router): void {\n    this.routingEngine.Add(GetAddressRouting, router);\n    this.routingEngine.Add(SaveAddressRouting, router);\n  }\n}\n```", "```ts\nnew AddressesServer()\n  .WithCorsSupport()\n  .WithDatabase().Start();\n```", "```ts\nnode_modules\nnpm-debug.log\n```", "```ts\nFROM node:8\n```", "```ts\nWORKDIR /usr/src/app\n```", "```ts\nCOPY package*.json ./\nRUN npm install\n```", "```ts\nCOPY . .\n```", "```ts\nEXPOSE 3000\n```", "```ts\nCMD [ \"npm\", \"start\" ]\n```", "```ts\ndocker build -t ohanlon/addresses .\ndocker run -p 17171:3000 -d ohanlon/addresses\n```", "```ts\nversion: '2.1'\n```", "```ts\nservices:\n  chapter08_addresses:\n  chapter08_people:\n  chapter08_leads:\n```", "```ts\nbuild: \n  context: ./Addresses\n  dockerfile: ./Dockerfile\nenvironment:\n  NODE_ENV: production\nports: \n  - 17171:3000\n```", "```ts\nversion: '2.1'\n\nservices:\n  chapter08_addresses:\n    build: \n      context: ./Addresses\n      dockerfile: ./Dockerfile\n    environment:\n      NODE_ENV: production\n    ports: \n      - 17171:3000\n  chapter08_people:\n    build: \n      context: ./People\n      dockerfile: ./Dockerfile\n    environment:\n      NODE_ENV: production\n    ports: \n      - 31313:3000\n  chapter08_leads:\n    build: \n      context: ./Leads\n      dockerfile: ./Dockerfile\n    environment:\n      NODE_ENV: production\n    ports: \n      - 65432:3000\n```", "```ts\nnpx create-react-app crmclient --scripts-version=react-scripts-ts\n```", "```ts\nexport class App extends React.Component {\n  public render() {\n    return (\n      <Container fluid={true}>\n        <div />\n      </Container>\n    );\n  }\n}\n```", "```ts\nexport class AddAddress extends React.Component<any, IAddress> {\n}\n```", "```ts\nprivate defaultState: Readonly<IAddress>;\nconstructor(props:any) {\n  super(props);\n  this.defaultState = {\n    Line1: '',\n    Line2: '',\n    Line3: '',\n    Line4: '',\n    PostalCode: '',\n    ServerID: '',\n  };\n  const address: IAddress = this.defaultState;\n  this.state = address;\n}\n```", "```ts\nprivate UpdateBinding = (event: any) => {\n  switch (event.target.id) {\n    case `address1`:\n      this.setState({ Line1: event.target.value});\n      break;\n    case `address2`:\n      this.setState({ Line2: event.target.value});\n      break;\n    case `address3`:\n      this.setState({ Line3: event.target.value});\n      break;\n    case `address4`:\n      this.setState({ Line4: event.target.value});\n      break;\n    case `zipcode`:\n      this.setState({ PostalCode: event.target.value});\n      break;\n  }\n}\n```", "```ts\npublic render() {\n  return (\n    <Container>\n  </Container>\n  );\n}\n```", "```ts\n<Form.Group controlId=\"formGridAddress1\">\n  <Form.Label>Address</Form.Label>\n  <Form.Control placeholder=\"First line of address\" id=\"address1\" value={this.state.Line1} onChange={this.UpdateBinding} />\n</Form.Group>\n```", "```ts\n<Button variant=\"primary\" type=\"submit\" onClick={this.Save}>\n  Submit\n</Button>\n```", "```ts\npublic render() {\n  return (\n    <Container>\n      <Form.Group controlId=\"formGridAddress1\">\n        <Form.Label>Address</Form.Label>\n        <Form.Control placeholder=\"First line of address\" id=\"address1\" value={this.state.Line1} onChange={this.UpdateBinding} />\n      </Form.Group>\n      <Form.Group controlId=\"formGridAddress2\">\n        <Form.Label>Address 2</Form.Label>\n        <Form.Control id=\"address2\" value={this.state.Line2} onChange={this.UpdateBinding} />\n      </Form.Group>\n      <Form.Group controlId=\"formGridAddress2\">\n        <Form.Label>Address 3</Form.Label>\n        <Form.Control id=\"address3\" value={this.state.Line3} onChange={this.UpdateBinding} />\n      </Form.Group>\n      <Form.Group controlId=\"formGridAddress2\">\n        <Form.Label>Address 4</Form.Label>\n        <Form.Control id=\"address4\" value={this.state.Line4} onChange={this.UpdateBinding} />\n      </Form.Group>\n      <Form.Group controlId=\"formGridAddress2\">\n        <Form.Label>Zip Code</Form.Label>\n        <Form.Control id=\"zipcode\" value={this.state.PostalCode} onChange={this.UpdateBinding}/>\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\" onClick={this.Save}>\n        Submit\n      </Button>\n    </Container>\n  )\n}\n```", "```ts\nthis.Save = this.Save.bind(this);\n```", "```ts\nexport default class Addresses extends React.Component<any, any> {\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      data: []\n    }\n  }\n}\n```", "```ts\nprivate Load(): void {\n  axios.get(\"http://localhost:17171/get/\").then(x =>\n  {\n    this.setState({data: x.data});\n  });\n}\n```", "```ts\npublic componentWillMount(): void {\n  this.Load(); \n};\n```", "```ts\nprivate TabSelected(): void {\n  this.Load();\n}\n```", "```ts\nreturn (\n  <Tabs id=\"tabController\" defaultActiveKey=\"show\" onSelect={this.TabSelected}>\n    <Tab eventKey=\"add\" title=\"Add address\">\n      <AddAddress />\n    </Tab>\n    <Tab eventKey=\"show\" title=\"Addresses\">\n      <Row>\n      </Row>\n    </Tab>\n  </Tabs>\n)\n```", "```ts\nconst columns = [{\n  Header: 'Address line 1',\n  accessor: 'Line1'\n}, {\n  Header: 'Address line 2',\n  accessor: 'Line2'\n}, {\n  Header: 'Address line 3',\n  accessor: 'Line4'\n}, {\n  Header: 'Address line 4',\n  accessor: 'Line4'\n}, {\n  Header: 'Postal code',\n  accessor: 'PostalCode'\n}]\n```", "```ts\n<Col>\n  <ReactTable data={this.state.data} columns={columns} \n    defaultPageSize={15} pageSizeOptions = {[10, 30]} className=\"-striped -highlight\" /></Col>\n```", "```ts\ninterface IAddressProperty {\n  CurrentSelection : (currentSelection:IAddress | null) => void;\n}\nexport class AddressesChoice extends React.Component<IAddressProperty, Map<string, string>> {\n}\n```", "```ts\nprivate LoadAddreses(): void {\n  axios.get(\"http://localhost:17171/get/\").then((result:AxiosResponse<any>) =>\n  {\n    result.data.forEach((person: any) => {\n      this.options.set(person.ServerID, `${person.Line1} ${person.Line2} ${person.Line3} ${person.Line4} ${person.PostalCode}`);\n    });\n    this.addresses = { ...result.data };\n    this.setState(this.options);\n  });\n}\n```", "```ts\nprivate options: Map<string, string>;\nprivate addresses: IAddress[] = [];\nconstructor(prop: IAddressProperty) {\n  super(prop);\n  this.options = new Map<string, string>();\n  this.Changed = this.Changed.bind(this);\n  this.state = this.options;\n}\n```", "```ts\npublic componentDidMount() {\n this.LoadAddreses();\n}\n```", "```ts\nprivate RenderList(): any[] {\n  const optionsTemplate: any[] = [];\n  this.options.forEach((value, key) => (\n    optionsTemplate.push(<option key={key} value={key}>{value}</option>)\n  ));\n  return optionsTemplate;\n}\n```", "```ts\npublic render() {\n  return (<Form.Control as=\"select\" onChange={this.Changed}>\n    <option>Select...</option>\n    {this.RenderList()}\n  </Form.Control>)\n}\n```", "```ts\nprivate Changed(optionSelected: any) {\n  const address = Object.values(this.addresses).find(x => x.ServerID === optionSelected.target.value);\n  if (address) {\n    this.props.CurrentSelection(address);\n  } else {\n    this.props.CurrentSelection(null);\n  }\n}\n```", "```ts\n<AddressesChoice CurrentSelection={this.CurrentSelection} />\n```", "```ts\nconst routing = (\n  <Router>\n    <Navbar bg=\"light\">\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav.Link href=\"/\">Home</Nav.Link>\n        <Nav.Link href=\"/contacts\">Contacts</Nav.Link>\n        <Nav.Link href=\"/leads\">Leads</Nav.Link>\n        <Nav.Link href=\"/addresses\">Addresses</Nav.Link>\n      </Navbar.Collapse>\n    </Navbar>\n  </Router>\n)\n```", "```ts\n<Route path=\"/\" component={App} />\n<Route path=\"/addresses\" component={Addresses} />\n<Route path=\"/contacts\" component={People} />\n<Route path=\"/leads\" component={Leads} />\n```", "```ts\nconst routing = (\n  <Router>\n    <Navbar bg=\"light\">\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav.Link href=\"/\">Home</Nav.Link>\n        <Nav.Link href=\"/contacts\">Contacts</Nav.Link>\n        <Nav.Link href=\"/leads\">Leads</Nav.Link>\n        <Nav.Link href=\"/addresses\">Addresses</Nav.Link>\n      </Navbar.Collapse>\n    </Navbar>\n    <Route path=\"/\" component={App} />\n    <Route path=\"/addresses\" component={Addresses} />\n    <Route path=\"/contacts\" component={People} />\n    <Route path=\"/leads\" component={Leads} />\n  </Router>\n)\n```", "```ts\nReactDOM.render(\n  routing,\n  document.getElementById('root') as HTMLElement\n);\n```"]