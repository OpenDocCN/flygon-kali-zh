["```js\n**sudo apt-get install arduino**\n\n```", "```js\nint led_output = 13; \n\n```", "```js\nvoid setup () { \n\n```", "```js\npinMode(led_output, OUTPUT); \n\n```", "```js\nSerial.begin(9600); \n} \n\n```", "```js\nvoid loop () {\n```", "```js\nif (Serial.available() > 0){ \n\n```", "```js\nchar c = Serial.read(); \n\n```", "```js\n      if (c == 'H'){ \n\n```", "```js\ndigitalWrite(led_output, HIGH); \n\n```", "```js\n}  \nelse if (c == 'L'){ \n\n```", "```js\n         digitalWrite(led_output, LOW); \n      }  \n   } \n} \n\n```", "```js\n**sudo apt-get install python-serial**\n\n```", "```js\nimport serial \n\n```", "```js\nArduino_UNO = serial.Serial('/dev/ttyACM0', 9600) \n\n```", "```js\nprint(\"Hello From Arduino!\") \n\n```", "```js\nwhile True: \n      command = raw_input('Enter the command ') \n      Arduino_UNO.write(command) \n\n```", "```js\n      if command == 'H': \n            print('LED ON') \n      elif command == 'L': \n            print('LED OFF') \n\n```", "```js\narduino_UNO.close() \n\n```", "```js\n#include <Adafruit_VC0706.h> \n#include <SPI.h> \n#include <SD.h> \n\n```", "```js\n// comment out this line if using Arduino V23 or earlier \n#include <SoftwareSerial.h>        \n\n```", "```js\n#define chipSelect 10 \n\n```", "```js\nSoftwareSerial cameraconnection = SoftwareSerial(2, 3); \nAdafruit_VC0706 cam = Adafruit_VC0706(&cameraconnection); \n\n```", "```js\n  if (cam.begin()) { \n    Serial.println(\"Camera Found:\"); \n  } else { \n    Serial.println(\"No camera found?\"); \n    return; \n  } \n\n```", "```js\n    cam.setImageSize(VC0706_640x480); \n\n```", "```js\n  uint8_t imgsize = cam.getImageSize(); \n  Serial.print(\"Image size: \"); \n\n```", "```js\n  if (! cam.takePicture())  \n    Serial.println(\"Failed to snap!\"); \n  else  \n    Serial.println(\"Picture taken!\"); \n\n```", "```js\n  char filename[13]; \n\n```", "```js\n  strcpy(filename, \"IMAGE00.JPG\"); \n  for (int i = 0; i < 100; i++) { \n    filename[5] = '0' + i/10; \n    filename[6] = '0' + i%10; \n\n```", "```js\nif (! SD.exists(filename)) { \n      break; \n    } \n  } \n\n```", "```js\n  File imgFile = SD.open(filename, FILE_WRITE); \n\n```", "```js\n  uint16_t jpglen = cam.frameLength(); \n  Serial.print(\"Storing \"); \n  Serial.print(jpglen, DEC); \n  Serial.print(\" byte image.\"); \n\n```", "```js\n  byte wCount = 0; // For counting # of writes \n  while (jpglen > 0) { \n\n```", "```js\n    uint8_t *buffer; \n    uint8_t bytesToRead = min(32, jpglen); \n    buffer = cam.readPicture(bytesToRead); \n    imgFile.write(buffer, bytesToRead); \n\n```", "```js\n    if(++wCount >= 64) { \n      Serial.print('.'); \n      wCount = 0; \n    } \n\n```", "```js\nSerial.print(bytesToRead, DEC);  \nSerial.println(\" bytes\"); \njpglen -= bytesToRead; \n  } \n\n```", "```js\nimgFile.close(); \n\n```", "```js\n  cam.setMotionDetect(true); \n\n```", "```js\n  Serial.print(\"Motion detection is \"); \n  if (cam.getMotionDetect())  \n    Serial.println(\"ON\"); \n  else  \n    Serial.println(\"OFF\"); \n} \n\n```", "```js\nif (cam.motionDetected()) { \n   Serial.println(\"Motion!\");    \n   cam.setMotionDetect(false); \n\n```", "```js\n  if (! cam.takePicture())  \n    Serial.println(\"Failed to snap!\"); \n  else  \n    Serial.println(\"Picture taken!\"); \n\n```", "```js\nvoid setup () { \n    Serial.begin(9600);  \n} \n\n```", "```js\nvoid loop () { \n   if (Serial.available() > 0) { \n      char c = Serial.read(); \n      if (c == 'T') {  \n\n      takingpicture(): \n\n      }  \n   } \n} \n\n```", "```js\nvoid takingpicture(){ \n\n```", "```js\n  if (!cam.takePicture())  \n    Serial.println(\"Failed to snap!\"); \n  else  \n    Serial.println(\"Picture taken!\"); \n\n```", "```js\n  char filename[13]; \n\n```", "```js\n  strcpy(filename, \"IMAGE00.JPG\"); \n  for (int i = 0; i < 100; i++) { \n    filename[5] = '0' + i/10; \n    filename[6] = '0' + i%10; \n\n```", "```js\nif (! SD.exists(filename)) { \n      break; \n    } \n  } \n\n```", "```js\n  File imgFile = SD.open(filename, FILE_WRITE); \n\n```", "```js\n  uint16_t jpglen = cam.frameLength(); \n  Serial.print(\"Storing \"); \n  Serial.print(jpglen, DEC); \n  Serial.print(\" byte image.\"); \n\n```", "```js\n  byte wCount = 0; // For counting # of writes \n  while (jpglen > 0) { \n\n```", "```js\n    uint8_t *buffer; \n    uint8_t bytesToRead = min(32, jpglen); \n    buffer = cam.readPicture(bytesToRead); \n    imgFile.write(buffer, bytesToRead); \n\n```", "```js\n    if(++wCount >= 64) { \n      Serial.print('.'); \n      wCount = 0; \n    } \n\n```", "```js\nSerial.print(bytesToRead, DEC);  \nSerial.println(\" bytes\"); \njpglen -= bytesToRead; \n  } \n\n```", "```js\nimgFile.close(); \n}\n```", "```js\n<!DOCTYPE html> \n<html> \n <head> \n <title>Control Camera</title> \n </head> \n  <body> \n\n```", "```js\n<form  action=\"on.php\">   \n  <button type=\"submit\">Taking the picture</button> \n  </form> \n\n```", "```js\n  <form action=\"off.php\">   \n  <button type=\"submit\">Motion</button> \n  </form> \n</body> \n</html> \n\n```", "```js\n<?php \n$prende= exec('sudo python on.py'); \nheader('Location:index.php'); \n?> \n\n<?php \n$apaga = exec('sudo python motion.py'); \nheader('Location:index.php'); \n?> \n\n```", "```js\nimport serial \nimport time \nArduino_1 = serial.Serial('/dev/ttyACM0',9600) \nArduino_1.open() \nCommand='H' \nif command:    \n    Arduino_1.write(command) \nArduino_1.close() \n\nimport serial \nimport time \nArduino_1 = serial.Serial('/dev/ttyACM0',9600) \nArduino_1.open() \nCommand='L' \nif command:    \n    Arduino_1.write(command) \nArduino_1.close() \n\n```", "```js\n**opkg update**\n\n```", "```js\n**opkg install kmod-video-uvc**\n\n```", "```js\n**opkg install fswebcam**\n\n```", "```js\n**wget http://www.custommobileapps.com.au/downloads/mjpgstreamer.Ipk**\n\n```", "```js\n**opkg install mjpg-streamer.ipk**\n\n```", "```js\n**mjpg_streamer -i \"input_uvc.so -d /dev/video0 -r 640x480 -f 25\" -o**\n**\"output_http.so -p 8080 -w /www/webcam\" &**\n\n```", "```js\n**opkg install nano**\n\n```", "```js\n**nano /etc/config/mjpg-streamer**\n\n```", "```js\nconfig mjpg-streamer core   \noption enabled    \"1\"   \noption device    \"/dev/video0\"   \noption resolution  \"640x480\"   \noption fps    \"30\"   \noption www    \"/www/webcam\"   \noption port    \"8080\" \n\n```", "```js\n**/etc/init.d/mjpg-streamer enable**\n**/etc/init.d/mjpg-streamer stop**\n**/etc/init.d/mjpg-streamer start**\n\n```", "```js\n<html> \n<head> \n<title>Monitoring USB Camera</title> \n\n```", "```js\n</head> \n<body> \n<center> \n<img src=\"http://192.168.1.107:8080/?action=stream\"/> \n</center> \n</body> \n</html> \n\n```"]