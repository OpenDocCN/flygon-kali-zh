["```java\npublic class Ch09DemoApp {\n  public static void main(String[] args) {\n    int i = 2;   //unary \"+\" is assumed by default\n    int x = -i;  //unary \"-\" makes positive become negative\n    System.out.println(x);   //prints: -2\n    int y = -x;  //unary \"-\" makes negative become positive\n    System.out.println(y);   //prints: 2\n  }\n}\n```", "```java\nint z = x + y;              //binary \"+\" means \"add\"\nSystem.out.println(z);      //prints: 0\n\nz = x - y;                  //binary \"-\" means \"subtract\"\nSystem.out.println(z);      //prints: -4\nSystem.out.println(y - x);  //prints: 4\n\nz = x * y;\nSystem.out.println(z);      //prints: -4\n\nz = x / y;\nSystem.out.println(z);      //prints: -1\n\nz = x * y;\nSystem.out.println(z % 3);  //prints: -1\nSystem.out.println(z % 2);  //prints: 0\nSystem.out.println(z % 4);  //prints: 0\n\n```", "```java\nint i1 = 11;\nint i2 = 3;\nSystem.out.println(i1 / i2); //prints: 3 instead of 3.66...\nSystem.out.println(i1 % i2); //prints remainder: 2\n```", "```java\ndouble d1 = 11;\nSystem.out.println(d1/i2);    //prints: 3.6666666666666665\n\n```", "```java\nSystem.out.println((float)i1 / i2);  //prints: 3.6666667\nSystem.out.println(i1 / (double)i2); //prints: 3.6666666666666665\nSystem.out.println(i1 * 1.0 / i2);   //prints: 3.6666666666666665\nSystem.out.println(i1 * 1f / i2);    //prints: 3.6666667\nSystem.out.println(i1 * 1d / i2);    //prints: 3.6666666666666665\n```", "```java\nint i1 = 11;\nint i2 = 3;\nfloat r = (float)i1 / i2;\nSystem.out.println(r);                 //prints: 3.6666667\nfloat f = Math.round(r * 100f) / 100f;\nSystem.out.println(f);                 //prints: 3.67\nint i3 = (int)f;\nSystem.out.println(i3);                //prints: 3\n```", "```java\nString s1 = \"Nick\";\nString s2 = \"Samoylov\";\nSystem.out.println(s1 + \" \" + s2);  //prints: Nick Samoylov\nString s3 = s1 + \" \" + s2;\nSystem.out.println(s3);             //prints: Nick Samoylov\n\n```", "```java\nchar c1 = 'a';\nchar c2 = '$';\n\nSystem.out.println(c1 + c2);       //prints: 133\nSystem.out.println(c1/c2);         //prints: 2 \nSystem.out.println((float)c1/c2);  //prints: 2.6944444\n\n```", "```java\nint i = 2;\nSystem.out.println(++i);        //prints: 3\nSystem.out.println(\"i=\" + i);   //prints: i=3\nSystem.out.println(--i);        //prints: 2\nSystem.out.println(\"i=\" + i);   //prints: i=2\n\nSystem.out.println(i++);        //prints: 2\nSystem.out.println(\"i=\" + i);   //prints: i=3\nSystem.out.println(i--);        //prints: 3\nSystem.out.println(\"i=\" + i);   //prints: i=2\n\n```", "```java\nint x = 0;\n++x;\nSystem.out.println(x);   //prints: 1\nx = 0;\nx++;\nSystem.out.println(x);   //prints: 1\n\n```", "```java\nint x = 0;\nint y = x++ + x++;\nSystem.out.println(y);   //prints: 1\nSystem.out.println(x);   //prints: 2\n```", "```java\nint n = 0;\nint m = 5*n++;\nSystem.out.println(m);   //prints: 0\nSystem.out.println(n);   //prints: 1\n\n```", "```java\nint k = 0;\nint[] arr = {88, 5, 42};\nSystem.out.println(arr[k++]);  //prints: 88\nSystem.out.println(k);         //prints: 1\nSystem.out.println(arr[k++]);  //prints: 5\nSystem.out.println(k);         //prints: 2\nSystem.out.println(arr[k++]);  //prints: 42\nSystem.out.println(k);         //prints: 3\n```", "```java\nint k = -1;\nint[] arr = {88, 5, 42};\nSystem.out.println(arr[k++]);  //prints: 88\nSystem.out.println(k);         //prints: 1\nSystem.out.println(arr[++k]);  //prints: 5\nSystem.out.println(k);         //prints: 2\nSystem.out.println(arr[++k]);  //prints: 42\nSystem.out.println(k);         //prints: 3\n```", "```java\nint[] arr = {1,2,3,4};\nint j = 2;\nSystem.out.println(arr[j++]);  //prints: 3\nSystem.out.println(arr[j++]);  //prints: 4\n```", "```java\nchar a = 'a';\nchar b = 'b';\nchar c = 'a';\nSystem.out.println(a == b);  //prints: false\nSystem.out.println(a != b);  //prints: true\nSystem.out.println(a == c);  //prints: true\nSystem.out.println(a != c);  //prints: false\n\nint i1 = 1;\nint i2 = 2;\nint i3 = 1;\nSystem.out.println(i1 == i2);  //prints: false\nSystem.out.println(i1 != i2);  //prints: true\nSystem.out.println(i1 == i3);  //prints: true\n\nSystem.out.println(i1 != i3);  //prints: false\n\nboolean b1 = true;\nboolean b2 = false;\nboolean b3 = true;\nSystem.out.println(b1 == b2);  //prints: false\nSystem.out.println(b1 != b2);  //prints: true\nSystem.out.println(b1 == b3);  //prints: true\nSystem.out.println(b1 != b3);  //prints: false\n\n```", "```java\nSystem.out.println((a + 1) == b); //prints: true\n\n```", "```java\nSystem.out.println(b - a);        //prints: 1\nSystem.out.println((int)a);       //prints: 97\nSystem.out.println((int)b);       //prints: 98\n\n```", "```java\ndouble d1 = 0.42;\ndouble d2 = 0.43;\ndouble d3 = 0.42;\nSystem.out.println(d1 == d2);  //prints: false\nSystem.out.println(d1 != d2);  //prints: true\nSystem.out.println(d1 == d3);  //prints: true\nSystem.out.println(d1 != d3);  //prints: false\n\n```", "```java\nSystem.out.println((double)1/3);    //prints: 0.3333333333333333 \n\n```", "```java\nSomeClass c1 = new SomeClass();\nSomeClass c2 = new SomeClass();\nSomeClass c3 = c1;\nSystem.out.println(c1 == c2);     //prints: false\nSystem.out.println(c1 != c2);     //prints: true\nSystem.out.println(c1 == c3);     //prints: true\nSystem.out.println(c1 != c3);     //prints: false\nSystem.out.println(new SomeClass() == new SomeClass());  //prints: false\n\n```", "```java\nint i1 = 1;\nint i2 = 2;\nint i3 = 1;\nSystem.out.println(i1 > i2);    //prints: false\nSystem.out.println(i1 >= i2);   //prints: false\nSystem.out.println(i1 >= i3);   //prints: true\nSystem.out.println(i1 < i2);    //prints: true\nSystem.out.println(i1 <= i2);   //prints: true\nSystem.out.println(i1 <= i3);   //prints: true\n\nSystem.out.println('a' >= 'b');  //prints: false\nSystem.out.println('a' <= 'b');  //prints: true\n\ndouble d1 = 1/3;\ndouble d2 = 0.34;\ndouble d3 = 0.33;\nSystem.out.println(d1 < d2);  //prints: true\nSystem.out.println(d1 >= d3); //prints: false     \n```", "```java\ndouble d1 = 1/3;\ndouble d2 = 0.34;\ndouble d3 = 0.33;\nSystem.out.println(d1 < d2);   //prints: true\nSystem.out.println(d1 >= d3);  //prints: false\nSystem.out.println(d1);        //prints: 0.0\ndouble d4 = 1/3d;\nSystem.out.println(d4);        //prints: 0.3333333333333333\nSystem.out.println(d4 >= d3);  //prints: true\n\n```", "```java\nboolean x = false;\nSystem.out.println(!x);  //prints: true\nSystem.out.println(!!x); //prints: false\nboolean y = !x;\nSystem.out.println(y & x); //prints: false\nSystem.out.println(y | x); //prints: true\nboolean z = true;\nSystem.out.println(y & z); //prints: true\nSystem.out.println(y | z); //prints: true\n\n```", "```java\nboolean x = false;\nboolean y = !x;\nSystem.out.println(y && x); //prints: false\nSystem.out.println(y || x); //prints: true\nboolean z = true;\nSystem.out.println(y && z); //prints: true\nSystem.out.println(y || z); //prints: true\n\n```", "```java\nint i = 1, j = 3, k = 10;\nSystem.out.println(i > j & i++ < k);  //prints: false\nSystem.out.println(\"i=\" + i);         //prints: i=2\nSystem.out.println(i > j && i++ < k); //prints: false\nSystem.out.println(\"i=\" + i);         //prints: i=2\n\n```", "```java\nint n = 1, m = 2;\nSystem.out.println(n > m ? \"n > m\" : \"n <= m\"); //prints: n <= m\nSystem.out.println(n > m ? true : false);       //prints: false\nint max = n > m ? n : m;      \nSystem.out.println(max);                        //prints: 2\n\n```", "```java\nString result;\nif(n > m){\n  result = \"n > m\";\n} else {\n  result = \"n <= m\";\n} \n```", "```java\nint x = 1;\nx += 2;\nSystem.out.println(x);    //prints: 3\nx -= 1;\nSystem.out.println(x);    //prints: 2\nx *= 2;\nSystem.out.println(x);    //prints: 4\nx /= 2;\nSystem.out.println(x);    //prints: 2\nx %= 2;\nSystem.out.println(x);    //prints: 0\n\n```", "```java\nx = 11;\ndouble y = x;\ny /= 3;          //That's the operation we wanted to do on x\n\nSystem.out.println(y);        //prints: 3.6666666666666665\nx = (int)y;\nSystem.out.println(x);        //prints: 3\n\n//or, if we need to round up the result:\ndouble d = Math.round(y);     //prints: 4.0\nSystem.out.println(d);\nx = (int) d;\nSystem.out.println(x);        //prints: 4\n\n```", "```java\nnew Child();\nnew Child(\"The Blows\");\n\n```", "```java\nSomeClass obj = new SomeClass();\nobj.someMethod();\n```", "```java\nint[] arrInt = new int[42];\n\n```", "```java\nint[] arrInt = new int[42];\narrInt[43] = 22;\n\n```", "```java\nint[] arrInt = {1,2,3,4};\n\n```", "```java\nint[] arrInt = new int[42];\n//arrInt[43] = 22;\nSystem.out.println(arrInt[2]);      //prints: 0\nSystem.out.println(arrInt.length);  //prints: 42\nint[] arrInit = {1,2,3,4};\nSystem.out.println(arrInit[2]);      //prints: 3\nSystem.out.println(arrInit.length);  //prints: 4\n\n```", "```java\ninterface IntrfA{}\nclass ClassA implements IntrfA {}\nclass ClassB extends ClassA {}\nclass ClassX implements IntrfA {}\n\nprivate void instanceofOperator() {\n  ClassA classA = new ClassA();\n  ClassB classB = new ClassB();\n  ClassX classX = new ClassX();\n  int[] arrI = {1,2,3};\n  ClassA[] arrA = {new ClassA(), new ClassA()};\n\n  System.out.println(classA instanceof Object); //prints: true\n  System.out.println(arrI instanceof Object);   //prints: true\n  System.out.println(arrA instanceof Object);   //prints: true\n//System.out.println(arrA instanceof ClassA);   //error\n\n  System.out.println(classA instanceof IntrfA); //prints: true\n  System.out.println(classB instanceof IntrfA); //prints: true\n  System.out.println(classX instanceof IntrfA); //prints: true\n\n  System.out.println(classA instanceof ClassA); //prints: true\n  System.out.println(classB instanceof ClassA); //prints: true\n  System.out.println(classA instanceof ClassB); //prints: false\n//System.out.println(classX instanceof ClassA); //error\n\n  System.out.println(null instanceof ClassA);   //prints: false\n//System.out.println(classA instanceof null);   //error\n  System.out.println(classA == null);           //prints: false\n  System.out.println(classA != null);           //prints: true\n}\n```", "```java\nIntrfA intA = (IntrfA)classA;\nintA = (IntrfA)classX;\n\n```", "```java\nclass ClassBase {\n}\nclass ClassY extends ClassBase {\n  void method(){\n\n    System.out.println(\"ClassY.method() is called\");\n  }\n}\nclass ClassZ extends ClassBase {\n  void method(){\n    System.out.println(\"ClassZ.method() is called\");\n  }\n}\nclass SomeClass{\n  public void doSomething(ClassBase object) {\n    if(object instanceof ClassY){\n      ((ClassY)object).method();\n    } else if(object instanceof ClassZ){\n      ((ClassZ)object).method();\n    }\n    //other code \n  }\n}\n```", "```java\nSomeClass cl = new SomeClass();\ncl.doSomething(new ClassY());\n\n```", "```java\nclass ClassBase {\n  void method(){\n    System.out.println(\"ClassBase.method() is called\");\n  }\n}\n```", "```java\nclass SomeClass{\n  public void doSomething(ClassBase object) {\n    object.method();\n    //other code \n  }\n```", "```java\nclass ClassZ extends ClassBase {\n  @Override\n  void method(){\n    System.out.println(\"ClassY.method() is called\");\n  }\n}\n```", "```java\ninterface InterfaceM {\n  String INTERFACE_FIELD = \"interface field\";\n  static void staticMethod1(){\n    System.out.println(\"interface static method 1\");\n  }\n  static void staticMethod2(){\n    System.out.println(\"interface static method 2\");\n  }\n  default void method1(){\n    System.out.println(\"interface default method 1\");\n  }\n  default void method2(){\n    System.out.println(\"interface default method 2\");\n  }\n  void method3();\n}\n```", "```java\nSystem.out.println(InterfaceM.INTERFACE_FIELD);    //1: interface field\nInterfaceM.staticMethod1();               //2: interface static method\nInterfaceM.staticMethod2();               //3: interface static method\n//InterfaceM.method1();                         //4: compilation error\n//InterfaceM.method2();                         //5: compilation error\n//InterfaceM.method3();                         //6: compilation error\n\nSystem.out.println(ClassM.INTERFACE_FIELD);       //7: interface field\n```", "```java\nclass ClassM implements InterfaceM {\n  public static String CLASS_STATIC_FIELD = \"class static field\";\n  public static void staticMethod2(){\n    System.out.println(\"class static method 2\");\n  }\n  public static void staticMethod3(){\n    System.out.println(\"class static method 3\");\n  }\n  public String instanceField = \"instance field\";\n  public void method2(){\n    System.out.println(\"class instance method 2\");\n  }\n  public void method3(){\n      System.out.println(\"class instance method 3\");\n    }\n}\n```", "```java\n  //ClassM.staticMethod1();                       //8: compilation error\n  ClassM.staticMethod2();                     //9: class static method 2\n  ClassM.staticMethod3();                    //10: class static method 3\n\n  ClassM classM = new ClassM();\n  System.out.println(ClassM.CLASS_STATIC_FIELD);//11: class static field\n  System.out.println(classM.CLASS_STATIC_FIELD);//12: class static field\n  //System.out.println(ClassM.instanceField);    //13: compilation error\n  System.out.println(classM.instanceField);         //14: instance field\n  //classM.staticMethod1();                      //15: compilation error\n  classM.staticMethod2();                   //16: class static method  2\n  classM.staticMethod3();                    //17: class static method 3\n  classM.method1();                     //18: interface default method 1\n  classM.method2();                        //19: class instance method 2\n  classM.method3();                        //20: class instance method 3\n}\n```", "```java\nint i1 = 11;\nint i2 = 3;\nSystem.out.println((float)i1 / i2);  //prints: 3.6666667\n\nSystem.out.println((int)a);          //prints: 97\n\nIntrfA intA = (IntrfA)classA;\n\n```", "```java\ninterface I1{}\ninterface I2{}\ninterface I3{}\nclass A implements I1, I2 {}\nclass B extends A implements I3{}\nclass C extends B {}\nclass D {}\npublic static void main(String[] args) {\n   C c = new C();    //1\n   A a = (A)c;       //2\n   I1 i1 = (I1)c;    //3\n   I2 i2 = (I2)c;    //4\n   I3 i3 = (I3)c;    //5\n   c = (C)a;         //6\n   D d = new D();    //7\n   //a = (A)d;       //8 compilation error\n   i1 = (I1)d;       //9 run-time error\n}\n```", "```java\nInteger integer1 = 3;                  //line 1 \nSystem.out.println(integer1);          //prints: 3\nInteger integer2 = Integer.valueOf(4); \nint i = integer2;                      //line 4\nSystem.out.println(i);                 //prints: 4\n\n```", "```java\nint x = 0, y;\ny = x++;                  //line 2\nSystem.out.println(y);    //prints: 0\nSystem.out.println(x);    //prints: 1\n\n```", "```java\nint x = 2 + 4 * 5 / 6 + 3 + 7 / 3 * 11 - 4;\n```", "```java\nint x = 2 + 4 * 5 / 6 + ( 3 + 7 / 3 * (11 - 4));\n```", "```java\nint p1 = 10, p2 = 1;\nint q = (p1 += 3)  +  (p2 += 3);\nSystem.out.println(q);         //prints: 17\nSystem.out.println(p1);        //prints: 13\nSystem.out.println(p2);        //prints: 4\n\n```", "```java\np1 = 10;\np2 = 1;\nq = p1 += 3  +  (p2 += 3);\nSystem.out.println(q);         //prints: 17\nSystem.out.println(p1);        //prints: 17\nSystem.out.println(p2);        //prints: 4\n\n```", "```java\nint a = 0, b = 0;\nint c = a++ + (a * ++b);       //evaluates to: 0 + (1 * 1);\nSystem.out.println(c);         //prints: 1\n\n```", "```java\nSomeBaseClass someBaseClass = new SomeBaseClass();\nsomeBaseClass = new SomeClass();\n```", "```java\nObject someBaseClass = new SomeBaseClass();\nsomeBaseClass = new SomeClass();             //line 2\n```", "```java\nclass SomeBaseClass{\n  void someMethod(){\n    ...\n  }\n} \nclass SomeClass extends SomeBaseClass{\n  void someOtherMethod(){\n    ...\n  }\n}\nSomeBaseClass someBaseClass = new SomeBaseClass();\nsomeBaseClass = new SomeClass();\nsomeBaseClass.someMethod();                  //works just fine\n//someBaseClass.someOtherMethod();           //compilation error\n((SomeClass)someBaseClass).someOtherMethod(); //works just fine\n//The following methods are available as they come from Object:\nint h = someBaseClass.hashCode();\nObject o = someBaseClass.clone();\n//All other public Object's methods are accessible too\n```", "```java\nint n = 1234567899;\nfloat f = (float)n;\nint r = n - (int)f;\nSystem.out.println(r);    //prints: -46\n\ndouble d = (double)n;\nr = n - (int)d;\nSystem.out.println(r);    //prints: 0\n```", "```java\nlong l = 1234567899123456L;\nfloat f = (float)l;\nlong rl = l - (long)f;\nSystem.out.println(rl);    //prints: -49017088\n\ndouble d = (double)l;\nrl = l - (long)d;\nSystem.out.println(rl);    //prints: 0\n\nl = 12345678991234567L;\nd = (double)l;\nrl = l - (long)d;\nSystem.out.println(rl);    //prints: -1\n\n```", "```java\ndouble dd = 1234567890.0;\nSystem.out.println(Integer.MAX_VALUE); //prints: 2147483647\nif(dd < Integer.MAX_VALUE){\n  int nn = (int)dd;\n  System.out.println(nn);              //prints: 1234567890\n} else {\n  System.out.println(dd - Integer.MAX_VALUE);\n}\n\ndd = 2234567890.0;\nSystem.out.println(Integer.MAX_VALUE); //prints: 2147483647\nif(dd < Integer.MAX_VALUE){\n  int nn = (int)dd;\n  System.out.println(nn);            \n} else {\n  System.out.println(dd - Integer.MAX_VALUE); //prints: 8.7084243E7\n}\n```", "```java\nbyte b = Byte.parseByte(\"3\");\nByte bt = Byte.decode(\"3\");\nboolean boo = Boolean.getBoolean(\"true\");\nBoolean bool = Boolean.valueOf(\"false\");\nint n = Integer.parseInt(\"42\");\nInteger integer = Integer.getInteger(\"42\");\ndouble d1 = Double.parseDouble(\"3.14\");\nDouble d2 = Double.valueOf(\"3.14\");\n```", "```java\nString s1 = Integer.toString(42);\nString s2 = Double.toString(3.14);\n```", "```java\nint n = 12;\nInteger integer = n; //an example of autoboxing\nSystem.out.println(integer);      //prints: 12\ninteger = Integer.valueOf(n);\nSystem.out.println(integer);      //prints: 12\n\nByte b = Byte.valueOf((byte)n);\nShort s = Short.valueOf((short)n);\nLong l = Long.valueOf(n);\nFloat f = Float.valueOf(n);\nDouble d = Double.valueOf(n);\n\n```", "```java\nInteger integer = Integer.valueOf(12);\nSystem.out.println(integer.intValue());    //prints: 12\nSystem.out.println(integer.byteValue());   //prints: 12\nSystem.out.println(integer.shortValue());  //prints: 12\nSystem.out.println(integer.longValue());   //prints: 12\nSystem.out.println(integer.floatValue());  //prints: 12.0\nSystem.out.println(integer.doubleValue()); //prints: 12.0\n```", "```java\nLong longWrapper = Long.valueOf(12L);\nlong lng = longWrapper;    //implicit unboxing\nSystem.out.println(lng);   //prints: 12\n```", "```java\nSomeClass o1 = new SomeClass();\nSomeClass o2 = new SomeClass();\nSystem.out.println(o1 == o2);  //prints: false\nSystem.out.println(o1 == o1);  //prints: true\no2 = o1;\nSystem.out.println(o1 == o2);  //prints: true\n```", "```java\npublic boolean equals(Object obj) {\n  return (this == obj);\n}\n```", "```java\nclass PersonNoEquals {\n  private int age;\n  private String name;\n\n  public PersonNoEquals(int age, String name) {\n    this.age = age;\n    this.name = name;\n  }\n}\n```", "```java\nPersonNoEquals p1 = new PersonNoEquals(42, \"Nick\");\nPersonNoEquals p2 = new PersonNoEquals(42, \"Nick\");\nPersonNoEquals p3 = new PersonNoEquals(25, \"Nick\");\nSystem.out.println(p1.equals(p2));     //false\nSystem.out.println(p1.equals(p3));     //false\nSystem.out.println(p1 == p2);          //false\np1 = p2;\nSystem.out.println(p1.equals(p2));     //true\nSystem.out.println(p1 == p2);          //true\n\n```", "```java\nclass PersonWithEquals{\n  private int age;\n  private String name;\n  private String hairstyle;\n\n  public PersonWithEquals(int age, String name, String hairstyle) {\n    this.age = age;\n    this.name = name;\n\n    this.hairstyle = hairstyle;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    PersonWithEquals person = (PersonWithEquals) o;\n    return age == person.age && Objects.equals(name, person.name);\n  }\n}\n```", "```java\npublic static boolean equals(Object a, Object b) {\n  return (a == b) || (a != null && a.equals(b));\n}\n```", "```java\nPersonWithEquals p11 = new PersonWithEquals(42, \"Kelly\", \"Ponytail\");\nPersonWithEquals p12 = new PersonWithEquals(42, \"Kelly\", \"Pompadour\");\nPersonWithEquals p13 = new PersonWithEquals(25, \"Kelly\", \"Ponytail\");\nSystem.out.println(p11.equals(p12));    //true\nSystem.out.println(p11.equals(p13));    //false\nSystem.out.println(p11 == p12);         //false\np11 = p12;\nSystem.out.println(p11.equals(p12));    //true\nSystem.out.println(p11 == p12);         //true\n```", "```java\nclass Person{\n  private int age;\n  private String name;\n  public Person(int age, String name) {\n    this.age = age;\n    this.name = name;\n  }\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    Person person = (Person) o;\n    return age == person.age && Objects.equals(name, person.name);\n  }\n}\nclass PersonWithHair extends Person{\n  private String hairstyle;\n  public PersonWithHair(int age, String name, String hairstyle) {\n    super(age, name);\n    this.hairstyle = hairstyle;\n  }\n}\n```", "```java\nPersonWithHair p21 = new PersonWithHair(42, \"Kelly\", \"Ponytail\");\nPersonWithHair p22 = new PersonWithHair(42, \"Kelly\", \"Pompadour\");\nPersonWithHair p23 = new PersonWithHair(25, \"Kelly\", \"Ponytail\");\nSystem.out.println(p21.equals(p22));    //true\nSystem.out.println(p21.equals(p23));    //false\nSystem.out.println(p21 == p22);         //false\np21 = p22;\nSystem.out.println(p21.equals(p22));    //true\nSystem.out.println(p21 == p22);         //true\n\n```", "```java\nPerson person = (Person) o;\n```", "```java\nPersonWithHairDressed extends PersonWithHair{\n  private String dress;\n  public PersonWithHairDressed(int age, String name, \n                               String hairstyle, String dress) {\n    super(age, name, hairstyle);\n    this.dress = dress;\n  }\n}\n```", "```java\nPerson p31 = new PersonWithHair(42, \"Kelly\", \"Ponytail\");\nPerson p32 = new PersonWithHairDressed(42, \"Kelly\", \"Pompadour\", \"Suit\");\nPerson p33 = new PersonWithHair(25, \"Kelly\", \"Ponytail\");\nSystem.out.println(p31.equals(p32));    //false\nSystem.out.println(p31.equals(p33));    //false\nSystem.out.println(p31 == p32);         //false\n\n```", "```java\nif (o == null || getClass() != o.getClass()) return false;\n\n```", "```java\nif (o == null || getClass() != o.getClass()) return false;\n```", "```java\nif (o == null) return false;\nif(!(o instanceof Person)) return false;\n\n```", "```java\nPerson p31 = new PersonWithHair(42, \"Kelly\", \"Ponytail\");\nPerson p32 = new PersonWithHairDressed(42, \"Kelly\", \"Pompadour\", \"Suit\");\nPerson p33 = new PersonWithHair(25, \"Kelly\", \"Ponytail\");\nSystem.out.println(p31.equals(p32));    //true\nSystem.out.println(p31.equals(p33));    //false\nSystem.out.println(p31 == p32);         //false\n```", "```java\npublic boolean equals(Object anObject) {\n  if (this == anObject) {\n    return true;\n  }\n  if (anObject instanceof String) {\n\n    String aString = (String)anObject;\n    if (coder() == aString.coder()) {\n      return isLatin1() ? \n               StringLatin1.equals(value, aString.value)\n               : StringUTF16.equals(value, aString.value);\n    }\n  }\n  return false;\n}\n```", "```java\nString sl1 = \"test1\";\nString sl2 = \"test2\";\nString sl3 = \"test1\";\n\nSystem.out.println(sl1 == sl2);              //1: false\nSystem.out.println(sl1.equals(sl2));         //2: false\n\nSystem.out.println(sl1 == sl3);              //3: true\nSystem.out.println(sl1.equals(sl3));         //4: true\n\nString s1 = new String(\"test1\");\nString s2 = new String(\"test2\");\nString s3 = new String(\"test1\");\n\nSystem.out.println(s1 == s2);                //5: false\nSystem.out.println(s1.equals(s2));           //6: false\n\nSystem.out.println(s1 == s3);                //7: false\nSystem.out.println(s1.equals(s3));           //8: true\n\nSystem.out.println(sl1 == s1);               //9: false\nSystem.out.println(sl1.equals(s1));          //10: true\n```", "```java\nlong ln = 42;\nInteger n = 42;\nSystem.out.println(n.equals(42));      //true\n\nSystem.out.println(n.equals(ln));      //false\nSystem.out.println(n.equals(43));      //false\n\nSystem.out.println(n.equals(Integer.valueOf(42)));  //true\nSystem.out.println(n.equals(Long.valueOf(42)));     //false\n\n```", "```java\npublic boolean equals(Object obj) {\n  if (obj instanceof Integer) {\n    return value == ((Integer)obj).intValue();\n  }\n  return false;\n}\n```"]