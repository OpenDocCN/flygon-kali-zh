- en: '*Chapter 7*: Storage on Kubernetes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：Kubernetes上的存储'
- en: In this chapter, we will learn how to provide application storage on Kubernetes.
    We'll review two storage resources on Kubernetes, volumes and persistent volumes.
    Volumes are great for transient data needs, but persistent volumes are necessary
    for running any serious stateful workload on Kubernetes. With the skills you'll
    learn in this chapter, you will be able to configure storage for your applications
    running on Kubernetes in several different ways and environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在Kubernetes上提供应用程序存储。我们将回顾Kubernetes上的两种存储资源，即卷和持久卷。卷非常适合临时数据需求，但持久卷对于在Kubernetes上运行任何严肃的有状态工作负载是必不可少的。通过本章学到的技能，您将能够在多种不同的方式和环境中为在Kubernetes上运行的应用程序配置存储。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the difference between volumes and persistent volumes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解卷和持久卷之间的区别
- en: Using volumes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用卷
- en: Creating persistent volumes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建持久卷
- en: Persistent volume claims
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久卷索赔
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the commands detailed in this chapter, you will need a computer
    that supports the `kubectl` command-line tool along with a working Kubernetes
    cluster. See [*Chapter 1*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016), *Communicating
    with Kubernetes*, for several methods to get up and running with Kubernetes quickly,
    and for instructions on how to install the `kubectl` tool.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行本章中详细介绍的命令，您需要一台支持`kubectl`命令行工具的计算机，以及一个可用的Kubernetes集群。请参阅[*第1章*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016)，*与Kubernetes通信*，了解快速启动和运行Kubernetes的几种方法，以及如何安装`kubectl`工具的说明。
- en: The code used in this chapter can be found in the book's GitHub repository at
    [https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在书籍的GitHub存储库中找到：[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter7)。
- en: Understanding the difference between volumes and persistent volumes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解卷和持久卷之间的区别
- en: A completely stateless, containerized application may only need disk space for
    the container files themselves. When running applications of this type, no additional
    configuration is required on Kubernetes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完全无状态的容器化应用可能只需要磁盘空间来存储容器文件本身。在运行这种类型的应用程序时，Kubernetes不需要额外的配置。
- en: However, this is not always true in the real world. Legacy apps that are being
    moved to containers may need disk space volumes for many possible reasons. In
    order to hold files for use by containers, you need the Kubernetes volume resource.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在现实世界中，这并不总是正确的。正在转移到容器中的传统应用程序可能出于许多可能的原因需要磁盘空间卷。为了保存容器使用的文件，您需要Kubernetes卷资源。
- en: 'There are two main storage resources that can be created in Kubernetes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中可以创建两种主要存储资源：
- en: Volumes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷
- en: Persistent volumes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久卷
- en: 'The distinction between the two is in the name: while volumes are tied to the
    lifecycle of a particular Pod, persistent volumes stay alive until deleted and
    can be shared across different Pods. Volumes can be handy in sharing data across
    containers within a Pod, while persistent volumes can be used for many possible
    advanced purposes.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的区别在于名称：虽然卷与特定Pod的生命周期相关联，但持久卷会一直保持活动状态，直到被删除，并且可以在不同的Pod之间共享。卷可以在Pod内部的容器之间共享数据，而持久卷可以用于许多可能的高级目的。
- en: Let's look at how to implement volumes first.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何实现卷。
- en: Volumes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷
- en: Kubernetes supports many different subtypes of volumes. Most can be used for
    either volumes or persistent volumes, but some are specific to either resource.
    We'll start with the simplest and review a few types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持许多不同类型的卷。大多数可以用于卷或持久卷，但有些是特定于资源的。我们将从最简单的开始，然后回顾一些类型。
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can see the full current list of volume types at https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在https://kubernetes.io/docs/concepts/storage/volumes/#types-of-volumes上查看完整的当前卷类型列表。
- en: 'Here is a short list of volume subtypes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是卷子类型的简短列表：
- en: '`awsElasticBlockStore`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`awsElasticBlockStore`'
- en: '`cephfs`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cephfs`'
- en: '`ConfigMap`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigMap`'
- en: '`emptyDir`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`emptyDir`'
- en: '`hostPath`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hostPath`'
- en: '`local`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`'
- en: '`nfs`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nfs`'
- en: '`persistentVolumeClaim`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persistentVolumeClaim`'
- en: '`rbd`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbd`'
- en: '`Secret`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Secret`'
- en: As you can see, both ConfigMaps and Secrets are actually implemented as *types*
    of volume. Additionally, the list includes cloud provider volume types such as
    `awsElasticBlockStore`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，ConfigMaps和Secrets实际上是卷的*类型*。此外，列表包括云提供商卷类型，如`awsElasticBlockStore`。
- en: Unlike persistent volumes, which are created separately from any one Pod, creating
    a volume is most often done in the context of a Pod.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与持久卷不同，持久卷是单独从任何一个Pod创建的，创建卷通常是在Pod的上下文中完成的。
- en: 'To create a simple volume, you can use the following Pod YAML:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的卷，可以使用以下Pod YAML：
- en: pod-with-vol.yaml
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-vol.yaml
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This YAML will create a Pod along with a volume of type `emptyDir`. Volumes
    of type `emptyDir` are provisioned using whatever storage already exists on the
    node that the Pod is assigned to. As mentioned previously, the volume is tied
    to the lifecycle of the Pod, not its containers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个YAML将创建一个带有`emptyDir`类型卷的Pod。`emptyDir`类型的卷是使用分配给Pod的节点上已经存在的存储来配置的。如前所述，卷与Pod的生命周期相关，而不是与其容器相关。
- en: 'This means that in a Pod with multiple containers, all containers will be able
    to access volume data. Let''s take the following example YAML file for a Pod:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在具有多个容器的Pod中，所有容器都将能够访问卷数据。让我们看一个Pod的以下示例YAML文件：
- en: pod-with-multiple-containers.yaml
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-multiple-containers.yaml
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, both containers in the Pod can access the volume data, though
    at different paths. Containers can even communicate via files in the shared volume.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Pod中的两个容器都可以访问卷数据，尽管路径不同。容器甚至可以通过共享卷中的文件进行通信。
- en: The important parts of the spec are the `volume spec` itself (the list item
    under `volumes`) and the `mount` for the volume (the list item under `volumeMounts`).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 规范的重要部分是`volume spec`本身（`volumes`下的列表项）和卷的`mount`（`volumeMounts`下的列表项）。
- en: Each mount item contains a name, which corresponds to the name of the volume
    in the `volumes` section, and a `mountPath`, which will dictate to which file
    path on the container the volume gets mounted. For instance, in the preceding
    YAML, the volume `config-volume` will be accessible from within the `busybox`
    Pod at `/shared-config`, and within the `busybox2` Pod at `/myconfig`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个挂载项都包含一个名称，对应于`volumes`部分中卷的名称，以及一个`mountPath`，它将决定卷被挂载到容器上的哪个文件路径。例如，在前面的YAML中，卷`config-volume`将在`busybox`
    Pod中的`/shared-config`处访问，在`busybox2` Pod中的`/myconfig`处访问。
- en: The volume spec itself takes a name – in this case, `my-storage`, and additional
    keys/values specific to the volume type, which in this case is `emptyDir` and
    just takes empty brackets.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 卷规范本身需要一个名称 - 在本例中是`my-storage`，以及特定于卷类型的其他键/值，本例中是`emptyDir`，只需要空括号。
- en: 'Now, let''s address the example of a cloud-provisioned volume mounted to a
    Pod. To mount an AWS **Elastic Block Storage** (**EBS**) volume, for instance,
    the following YAML can be used:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个云配置卷挂载到Pod的例子。例如，要挂载AWS **弹性块存储**（**EBS**）卷，可以使用以下YAML：
- en: pod-with-ebs.yaml
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: pod-with-ebs.yaml
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This YAML will, as long as your cluster is set up correctly to authenticate
    with AWS, attach your existing EBS volume to the Pod. As you can see, we use the
    `awsElasticBlockStore` key to specifically configure the exact volume ID to be
    used. In this case, the EBS volume must already exist on your AWS account and
    region. This is much easier with AWS **Elastic Kubernetes Service** (**EKS**)
    since it allows us to automatically provision EBS volumes from within Kubernetes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的集群正确设置了与AWS的身份验证，此YAML将把现有的EBS卷附加到Pod上。正如您所看到的，我们使用`awsElasticBlockStore`键来专门配置要使用的确切卷ID。在这种情况下，EBS卷必须已经存在于您的AWS帐户和区域中。使用AWS
    **弹性Kubernetes服务**（**EKS**）会更容易，因为它允许我们从Kubernetes内部自动提供EBS卷。
- en: Kubernetes also includes features within the Kubernetes AWS cloud provider to
    automatically provision volumes – but these are for use with persistent volumes.
    We'll look at how to get these automatically provisioned volumes in the *Persistent
    volumes* section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还包括Kubernetes AWS云提供程序中的功能，用于自动提供卷-但这些是用于持久卷。我们将在*持久卷*部分看看如何获得这些自动提供的卷。
- en: Persistent volumes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久卷
- en: Persistent volumes hold some key advantages over regular Kubernetes volumes.
    As mentioned previously, their (persistent volumes) lifecycle is tied to the life
    of the cluster, not the life of a single Pod. This means that persistent volumes
    can be shared between Pods and reused as long as the cluster is running. For this
    reason, the pattern matches much better to external stores such as EBS (a block
    storage service on AWS) since the storage itself outlasts a single Pod.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷相对于常规的Kubernetes卷具有一些关键优势。如前所述，它们（持久卷）的生命周期与集群的生命周期相关，而不是与单个Pod的生命周期相关。这意味着持久卷可以在集群运行时在Pod之间共享和重复使用。因此，这种模式更适合外部存储，比如EBS（AWS上的块存储服务），因为存储本身可以超过单个Pod的寿命。
- en: 'Using persistent volumes actually requires two resources: the `PersistentVolume`
    itself and a `PersistentVolumeClaim`, which is used to mount a `PersistentVolume`
    to a Pod.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用持久卷需要两个资源：`PersistentVolume`本身和`PersistentVolumeClaim`，用于将`PersistentVolume`挂载到Pod上。
- en: 'Let''s start with the `PersistentVolume` itself – take a look at the basic
    YAML for creating a `PersistentVolume`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`PersistentVolume`本身开始-看一下创建`PersistentVolume`的基本YAML：
- en: pv.yaml
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: pv.yaml
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now let's pick this apart. Starting with the first line in the spec – `storageClassName`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来分析一下。从规范中的第一行开始-`storageClassName`。
- en: This first config, `storageClassName`, represents the type of storage we want
    to use. For the `hostPath` volume type, we simply specify `manual`, but for AWS
    EBS, for instance, you could create and use a storage class called `gp2Encrypted`
    to match the `gp2` storage type in AWS with EBS encryption enabled. Storage classes
    are therefore combinations of configuration that are available for a particular
    volume type – which can be referenced in the volume spec.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个配置，`storageClassName`，代表了我们想要使用的存储类型。对于`hostPath`卷类型，我们只需指定`manual`，但是对于AWS
    EBS，例如，您可以创建并使用一个名为`gp2Encrypted`的存储类，以匹配AWS中的`gp2`存储类型，并启用EBS加密。因此，存储类是特定卷类型的可用配置的组合-可以在卷规范中引用。
- en: 'Moving forward with our AWS `StorageClass` example, let''s provision a new
    `StorageClass` for `gp2Encrypted`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用我们的AWS `StorageClass`示例，让我们为`gp2Encrypted`提供一个新的`StorageClass`：
- en: gp2-storageclass.yaml
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: gp2-storageclass.yaml
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we can create our `PersistentVolume` using the `gp2Encrypted` storage class.
    However, there's a shortcut to creating `PersistentVolumes` using dynamically
    provisioned EBS (or other cloud) volumes. When using dynamically provisioned volumes,
    we create the `PersistentVolumeClaim` first, which then automatically generates
    the `PersistentVolume`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`gp2Encrypted`存储类创建我们的`PersistentVolume`。但是，使用动态配置的EBS（或其他云）卷创建`PersistentVolumes`有一个快捷方式。当使用动态配置的卷时，我们首先创建`PersistentVolumeClaim`，然后自动生成`PersistentVolume`。
- en: Persistent volume claims
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持久卷声明
- en: We now know that you can easily create persistent volumes in Kubernetes, however,
    that does not allow you to bind storage to a Pod. You need to create a `PersistentVolumeClaim`,
    which claims a `PersistentVolume` and allows you to bind that claim to a Pod or
    multiple Pods.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道您可以在Kubernetes中轻松创建持久卷，但是这并不允许您将存储绑定到Pod。您需要创建一个`PersistentVolumeClaim`，它声明一个`PersistentVolume`并允许您将该声明绑定到一个或多个Pod。
- en: 'Building on our new `StorageClass` from the last section, let''s make a claim
    that will automatically result in a new `PersistentVolume` being created since
    there are no other persistent volumes with our desired `StorageClass`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的新`StorageClass`的基础上，让我们创建一个声明，这将自动导致创建一个新的`PersistentVolume`，因为没有其他具有我们期望的`StorageClass`的持久卷：
- en: pvc.yaml
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: pvc.yaml
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running `kubectl apply -f` on this file should result in a new, autogenerated
    **Persistent Volume** (**PV**) being created. If your AWS cloud provider is set
    up correctly, this will result in the creation of a new EBS volume with type GP2
    and encryption enabled.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件上运行`kubectl apply -f`应该会导致创建一个新的自动生成的**持久卷**（**PV**）。如果您的AWS云服务提供商设置正确，这将导致创建一个新的类型为GP2且启用加密的EBS卷。
- en: Before we attach our EBS-backed persistent volume to our Pod, let's confirm
    that the EBS volume was created correctly in AWS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的基于EBS的持久卷附加到我们的Pod之前，让我们确认EBS卷在AWS中是否正确创建。
- en: 'To do so, we can navigate to our AWS console and ensure we are in the same
    region that our EKS cluster is running in. Then go to **Services** > **EC2** and
    click on **Volumes** in the left menu under **Elastic Block Store**. In this section,
    we should see a line item with an autogenerated volume of the same size (**1 GiB**)
    as our PVC states. It should have the class of GP2, and it should have encryption
    enabled. Let''s see what this would look like in the AWS console:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以转到AWS控制台，并确保我们在运行EKS集群的相同区域。然后转到**服务** > **EC2**，在**弹性块存储**下的左侧菜单中单击**卷**。在这一部分，我们应该看到一个与我们的PVC状态相同大小（**1
    GiB**）的自动生成卷的项目。它应该具有GP2的类，并且应该启用加密。让我们看看这在AWS控制台中会是什么样子：
- en: '![Figure 7.1 – AWS console with autocreated EBS volume](image/B14790_07_001.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 - AWS控制台自动生成的EBS卷](image/B14790_07_001.jpg)'
- en: Figure 7.1 – AWS console with autocreated EBS volume
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 - AWS控制台自动生成的EBS卷
- en: As you can see, we have our dynamically generated EBS volume properly created
    in AWS, with encryption enabled and the **gp2** volume type assigned. Now that
    we have our volume created, and we've confirmed that it has been created in AWS,
    we can attach it to our Pod.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在AWS中正确地创建了我们动态生成的启用加密和分配**gp2**卷类型的EBS卷。现在我们已经创建了我们的卷，并且确认它已经在AWS中创建，我们可以将它附加到我们的Pod上。
- en: Attaching Persistent Volume Claims (PVCs) to Pods
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将持久卷声明（PVC）附加到Pods
- en: Now we have both a `PersistentVolume` and a `PersistentVolumeClaim`, we can
    attach them to a Pod for consumption. This process is very similar to attaching
    a ConfigMap or Secret – which makes sense, because ConfigMaps and Secrets are
    essentially types of volumes!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们既有了`PersistentVolume`又有了`PersistentVolumeClaim`，我们可以将它们附加到一个Pod以供使用。这个过程与附加ConfigMap或Secret非常相似
    - 这是有道理的，因为ConfigMaps和Secrets本质上是卷的类型！
- en: 'Check out the YAML that allows us to attach our encrypted EBS volume to a Pod
    and name it `pod-with-attachment.yaml`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查看允许我们将加密的EBS卷附加到Pod并命名为`pod-with-attachment.yaml`的YAML：
- en: Pod-with-attachment.yaml
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Pod-with-attachment.yaml
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Running `kubectl apply -f pod-with-attachment.yaml` will result in the creation
    of a Pod that has our `PersistentVolume` mounted via our claim to `/usr/data`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`kubectl apply -f pod-with-attachment.yaml`将创建一个Pod，该Pod通过我们的声明将我们的`PersistentVolume`挂载到`/usr/data`。
- en: 'To confirm that the volume has been successfully created, let''s `exec` into
    our Pod and create a file in the location that our volume has been mounted:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认卷已成功创建，让我们`exec`到我们的Pod中，并在我们的卷被挂载的位置创建一个文件：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s delete the Pod using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令删除Pod：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And recreate it again using the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令再次重新创建它：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we''ve done our job right, we should be able to see our file when running
    `kubectl exec` to get into the Pod again:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们做得对，当再次运行`kubectl exec`进入Pod时，我们应该能够看到我们的文件：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Success!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: We now know how to create a cloud-storage-provided persistent volume for Kubernetes.
    However, you may be running Kubernetes on-premise or on your laptop using minikube.
    Let's look at some alternate persistent volume subtypes that you can use instead.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何为Kubernetes创建由云存储提供的持久卷。但是，您可能正在本地环境或使用minikube在笔记本电脑上运行Kubernetes。让我们看看您可以使用的一些替代持久卷子类型。
- en: Persistent volumes without cloud storage
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有云存储的持久卷
- en: Our previous examples assume that you are running Kubernetes in a cloud environment
    and can make use of storage services provided by the cloud platform (AWS EBS and
    others). This, however, is not always possible. You may be running Kubernetes
    in a data center environment, or on dedicated hardware.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的示例假设您正在云环境中运行Kubernetes，并且可以使用云平台提供的存储服务（如AWS EBS和其他服务）。然而，这并非总是可能的。您可能正在数据中心环境中运行Kubernetes，或者在专用硬件上运行。
- en: In this case, there are many potential solutions for providing storage to Kubernetes.
    A simple one is to change the volume type to `hostPath`, which works within the
    node's existing storage devices to create persistent volumes. This is great when
    running on minikube, for instance, but does not provide as powerful an abstraction
    as something like AWS EBS. For a tool with on-premise capabilities similar to
    cloud storage tools like EBS, let's look at using Ceph with Rook. For the full
    documentation, check out the Rook docs (which will teach you Ceph as well) at
    [https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有许多潜在的解决方案可以为Kubernetes提供存储。一个简单的解决方案是将卷类型更改为`hostPath`，它可以在节点现有的存储设备中创建持久卷。例如，在minikube上运行时非常适用，但是不像AWS
    EBS那样提供强大的抽象。对于具有类似云存储工具EBS的本地功能的工具，让我们看看如何使用Rook的Ceph。有关完整的文档，请查看Rook文档（它也会教你Ceph）[https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html)。
- en: Rook is a popular open source Kubernetes storage abstraction layer. It can provide
    persistent volumes through a variety of providers, such as EdgeFS and NFS. In
    this case, we'll use Ceph, an open source storage project that provides object,
    block, and file storage. For simplicity, we'll use block mode.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Rook是一个流行的开源Kubernetes存储抽象层。它可以通过各种提供者（如EdgeFS和NFS）提供持久卷。在这种情况下，我们将使用Ceph，这是一个提供对象、块和文件存储的开源存储项目。为简单起见，我们将使用块模式。
- en: Installing Rook on Kubernetes is actually pretty simple. We'll take you from
    installing Rook to setting up a Ceph cluster, to finally provisioning persistent
    volumes on our cluster.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes上安装Rook实际上非常简单。我们将带您从安装Rook到设置Ceph集群，最终在我们的集群上提供持久卷。
- en: Installing Rook
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Rook
- en: 'We''re going to use a typical Rook installation default setup provided by the
    Rook GitHub repository. This could be highly customized depending on the use case
    but will allow us to quickly set up block storage for our workloads. Please refer
    to the following steps to do this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Rook GitHub存储库提供的典型Rook安装默认设置。这可能会根据用例进行高度定制，但将允许我们快速为我们的工作负载设置块存储。请参考以下步骤来完成这个过程：
- en: 'First, let''s clone the Rook repository:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们克隆Rook存储库：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our next step is to create all the relevant Kubernetes resources, including
    several **Custom Resource Definitions** (**CRDs**). We''ll talk about these in
    later chapters, but for now, consider them new Kubernetes resources that are specific
    to Rook, outside of the typical Pods, Services, and so on. To create common resources,
    run the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一步是创建所有相关的Kubernetes资源，包括几个**自定义资源定义**（**CRDs**）。我们将在后面的章节中讨论这些，但现在，请将它们视为特定于Rook的新Kubernetes资源，而不是典型的Pods、Services等。要创建常见资源，请运行以下命令：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, let''s start our Rook operator, which will handle provisioning all the
    necessary resources for a particular Rook provider, which in this case will be
    Ceph:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们启动我们的Rook操作员，它将处理为特定的Rook提供程序（在本例中将是Ceph）提供所有必要资源的规划：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Before the next step, ensure that the Rook operator Pod is actually running
    by using the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一步之前，请确保Rook操作员Pod实际上正在运行，使用以下命令：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the Rook Pod is in the `Running` state, we can set up our Ceph cluster!
    The YAML for this is also in the folder we''ve cloned from Git. Create it using
    the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Rook Pod处于“运行”状态，我们就可以设置我们的Ceph集群！此YAML也在我们从Git克隆的文件夹中。使用以下命令创建它：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This process can take a few minutes. The Ceph cluster is comprised of several
    different Pod types, including the operator, **Object Storage Devices** (**OSDs**),
    and managers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能需要几分钟。Ceph集群由几种不同的Pod类型组成，包括操作员、**对象存储设备**（**OSDs**）和管理器。
- en: To ensure that our Ceph cluster is working properly, Rook provides a toolbox
    container image that allows you to use the Rook and Ceph command-line tools. To
    start the toolbox, you can use the toolbox Pod spec provided by the Rook project
    at [https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的Ceph集群正常工作，Rook提供了一个工具箱容器映像，允许您使用Rook和Ceph命令行工具。要启动工具箱，您可以使用Rook项目提供的工具箱Pod规范，网址为[https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)。
- en: 'Here is a sample of the spec for the toolbox Pod:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工具箱Pod的规范示例：
- en: rook-toolbox-pod.yaml
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: rook-toolbox-pod.yaml
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, this Pod uses a special container image provided by Rook. The
    image comes with all the tools you need to investigate Rook and Ceph pre-installed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个Pod使用了Rook提供的特殊容器映像。该映像预装了您需要调查Rook和Ceph的所有工具。
- en: Once you have the toolbox Pod running, you can use the `rookctl` and `ceph`
    commands to check on the cluster status (check the Rook docs for specifics).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的工具箱Pod运行起来，您可以使用`rookctl`和`ceph`命令来检查集群状态（查看Rook文档以获取具体信息）。
- en: The rook-ceph-block storage class
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rook-ceph-block存储类
- en: 'Now our cluster is working, we can create our storage class that will be used
    by our PVs. We will call this storage class `rook-ceph-block`. Here''s our YAML
    file (`ceph-rook-combined.yaml`), which will include our `CephBlockPool` (which
    will handle our block storage in Ceph – see [https://rook.io/docs/rook/v0.9/ceph-pool-crd.html](https://rook.io/docs/rook/v0.9/ceph-pool-crd.html)
    for more information) as well as the storage class itself:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群正在运行，我们可以创建将被PVs使用的存储类。我们将称这个存储类为`rook-ceph-block`。这是我们的YAML文件（`ceph-rook-combined.yaml`），其中将包括我们的`CephBlockPool`（它将处理Ceph中的块存储
    - 有关更多信息，请参阅[https://rook.io/docs/rook/v0.9/ceph-pool-crd.html](https://rook.io/docs/rook/v0.9/ceph-pool-crd.html)）以及存储类本身：
- en: ceph-rook-combined.yaml
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ceph-rook-combined.yaml
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the YAML spec defines both our `StorageClass` and the `CephBlockPool`
    resource. As we mentioned earlier in this chapter, `StorageClass` is how we tell
    Kubernetes how to fulfill a `PersistentVolumeClaim`. The `CephBlockPool` resource,
    on the other hand, tells Ceph how and where to create distributed storage resources
    – in this case, how much to replicate the storage.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，YAML规范定义了我们的`StorageClass`和`CephBlockPool`资源。正如我们在本章前面提到的，`StorageClass`是我们告诉Kubernetes如何满足`PersistentVolumeClaim`的方式。另一方面，`CephBlockPool`资源告诉Ceph如何以及在哪里创建分布式存储资源-在这种情况下，要复制多少存储。
- en: 'Now we can give some storage to our Pod! Let''s create a new PVC with our new
    storage class:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以给我们的Pod一些存储了！让我们使用我们的新存储类创建一个新的PVC：
- en: rook-ceph-pvc.yaml
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-pvc.yaml
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our PVC is of storage class `rook-ceph-block`, so it will use the new storage
    class we just created. Now, let''s give the PVC to our Pod in our YAML file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PVC是存储类`rook-ceph-block`，因此它将使用我们刚刚创建的新存储类。现在，让我们在YAML文件中将PVC分配给我们的Pod：
- en: rook-ceph-pod.yaml
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-pod.yaml
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When the Pod is created, Rook should spin up a new persistent volume and attach
    it to the Pod. Let''s peer into the Pod to see if it worked properly:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当Pod被创建时，Rook应该会启动一个新的持久卷并将其附加到Pod上。让我们查看一下Pod，看看它是否正常工作：
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We get the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下输出：
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Success!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: Though we just used Rook's and Ceph's block storage functionality with Ceph,
    it also has a filesystem mode, which has some benefits – let's discuss why you
    may want to use it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们刚刚使用了Ceph的块存储功能，但它也有文件系统模式，这有一些好处-让我们讨论一下为什么你可能想要使用它。
- en: The Rook Ceph filesystem
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rook Ceph文件系统
- en: The downside of Rook's Ceph Block provider is that it can only be written to
    by one Pod at a time. In order to create a `ReadWriteMany` persistent volume with
    Rook/Ceph, we need to use the filesystem provider, which supports RWX mode. For
    more information, check out the Rook/Ceph docs at [https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Rook的Ceph块提供程序的缺点是一次只能由一个Pod进行写入。为了使用Rook/Ceph创建一个`ReadWriteMany`持久卷，我们需要使用支持RWX模式的文件系统提供程序。有关更多信息，请查看Rook/Ceph文档[https://rook.io/docs/rook/v1.3/ceph-quickstart.html](https://rook.io/docs/rook/v1.3/ceph-quickstart.html)。
- en: 'Up to creating the Ceph cluster, all the previous steps apply. At this point,
    we need to create our filesystem. Let''s use the following YAML file to create
    it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Ceph集群之前，所有先前的步骤都适用。在这一点上，我们需要创建我们的文件系统。让我们使用以下的YAML文件来创建它：
- en: rook-ceph-fs.yaml
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-fs.yaml
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, we're replicating metadata and data to at least two pools for
    reliability, as configured in the `metadataPool` and `dataPool` blocks. We are
    also preserving the pools on delete using the `preservePoolsOnDelete` key.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在复制元数据和数据到至少两个池，以确保可靠性，如在`metadataPool`和`dataPool`块中配置的那样。我们还使用`preservePoolsOnDelete`键在删除时保留池。
- en: 'Next, let''s create our new storage class specifically for Rook/Ceph filesystem
    storage. The following YAML does this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为Rook/Ceph文件系统存储专门创建一个新的存储类。以下的YAML文件就是这样做的：
- en: rook-ceph-fs-storageclass.yaml
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: rook-ceph-fs-storageclass.yaml
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This `rook-cephfs` storage class specifies our previously created pool and
    describes the reclaim policy of our storage class. Finally, it uses a few annotations
    that are explained in the Rook/Ceph documentation. Now, we can attach this via
    a PVC to a deployment, not just a Pod! Take a look at our PV:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`rook-cephfs`存储类指定了我们之前创建的池，并描述了我们存储类的回收策略。最后，它使用了一些在Rook/Ceph文档中解释的注释。现在，我们可以通过PVC将其附加到一个部署中，而不仅仅是一个Pod！看一下我们的PV：
- en: rook-cephfs-pvc.yaml
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: rook-cephfs-pvc.yaml
- en: '[PRE24]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This persistent volume references our new `rook-cephfs` storage class in `ReadWriteMany`
    mode – we''re asking for `1 Gi` of this data. Next, we can create our `Deployment`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个持久卷引用了我们的新的`rook-cephfs`存储类，使用`ReadWriteMany`模式 - 我们要求`1 Gi`的数据。接下来，我们可以创建我们的`Deployment`：
- en: rook-cephfs-deployment.yaml
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: rook-cephfs-deployment.yaml
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This `Deployment` references our `ReadWriteMany` persistent volume claim using
    the `persistentVolumeClaim` block under `volumes`. When deployed, all of our Pods
    can now read and write to the same persistent volume.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Deployment`引用了我们的`ReadWriteMany`持久卷声明，使用`volumes`下的`persistentVolumeClaim`块。部署后，我们所有的Pod现在都可以读写同一个持久卷。
- en: After this, you should have a good understanding of how to create persistent
    volumes and attach them to Pods.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您应该对如何创建持久卷并将它们附加到Pod有很好的理解。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we reviewed two methods of providing storage on Kubernetes
    – volumes and persistent volumes. First, we discussed the difference between these
    two methods: while volumes are tied to the lifetime of the Pod, persistent volumes
    last until they or the cluster is deleted. Then, we looked at how to implement
    volumes and attach them to our Pods. Lastly, we extended our learning on volumes
    to persistent volumes, and discovered how to use several different types of persistent
    volumes. These skills will help you assign persistent and non-persistent storage
    to your applications in many possible environments – from on-premises to the cloud.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了在Kubernetes上提供存储的两种方法 - 卷和持久卷。首先，我们讨论了这两种方法之间的区别：虽然卷与Pod的生命周期相关，但持久卷会持续到它们或集群被删除。然后，我们看了如何实现卷并将它们附加到我们的Pod。最后，我们将我们对卷的学习扩展到持久卷，并发现了如何使用几种不同类型的持久卷。这些技能将帮助您在许多可能的环境中为您的应用分配持久和非持久的存储
    - 从本地到云端。
- en: In the next chapter, we'll take a detour from application concerns and discuss
    how to control Pod placement on Kubernetes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从应用程序关注点中脱离出来，讨论如何在Kubernetes上控制Pod的放置。
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the differences between volumes and persistent volumes?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卷和持久卷之间有什么区别？
- en: What is a `StorageClass`, and how does it relate to a volume?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`StorageClass`，它与卷有什么关系？
- en: How can you automatically provision cloud resources when creating Kubernetes
    resources such as a persistent volume?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建Kubernetes资源（如持久卷）时，如何自动配置云资源？
- en: In which use cases do you think that using volumes instead of persistent volumes
    would be prohibitive?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在哪些情况下，您认为使用卷而不是持久卷会是禁止的？
- en: Further reading
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following links for more information:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接获取更多信息：
- en: 'Ceph Storage Quickstart for Rook: [https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md](https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rook的Ceph存储快速入门：[https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md](https://github.com/rook/rook/blob/master/Documentation/ceph-quickstart.md)
- en: 'Rook Toolbox: [https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rook工具箱：[https://rook.io/docs/rook/v0.7/toolbox.html](https://rook.io/docs/rook/v0.7/toolbox.html)
- en: 'Cloud providers: https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云提供商：https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/
