["```cs\nGET /path/to/resource\nAccept: application/json \n\n```", "```cs\nPOST /path/to/resource\nContent-Length: 123\n\nContent-Type: application/json \n\n```", "```cs\nPUT /path/to/resource\nContent-Length: 123\n\nContent-Type: application/json \n\n```", "```cs\nPATCH /path/to/resource\nContent-Length: 123\n\nContent-Type: application/json \n\n```", "```cs\nDELETE /path/to/resource \n\n```", "```cs\n     using\n\n     Microsoft.AspNetCore.Mvc;\n    namespace\n\n     Northwind.WebApi.Controllers\n\n    ;\n    [ApiController\n\n    ]\n    [Route(\n\n    \"[controller]\"\n\n    )\n\n    ]\n    public\n\n     class\n\n     WeatherForecastController\n\n     : ControllerBase\n\n    {\n      private\n\n     static\n\n     readonly\n\n     string\n\n    [] Summaries = new\n\n    []\n      {\n        \"Freezing\"\n\n    , \"Bracing\"\n\n    , \"Chilly\"\n\n    , \"Cool\"\n\n    , \"Mild\"\n\n    ,\n        \"Warm\"\n\n    , \"Balmy\"\n\n    , \"Hot\"\n\n    , \"Sweltering\"\n\n    , \"Scorching\"\n\n      };\n      private\n\n     readonly\n\n     ILogger<WeatherForecastController> _logger;\n      public\n\n    WeatherForecastController\n\n    (\n\n        ILogger<WeatherForecastController> logger\n\n    )\n\n      {\n        _logger = logger;\n      }\n      [HttpGet\n\n    ]\n      public\n\n     IEnumerable<WeatherForecast> \n\n    Get\n\n    ()\n\n      {\n        return\n\n     Enumerable.Range(1\n\n    , 5\n\n    ).Select(index =>\n          new\n\n     WeatherForecast\n          {\n            Date = DateTime.Now.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20\n\n    , 55\n\n    ),\n            Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n          })\n          .ToArray();\n      }\n    } \n\n    ```", "```cs\n **// GET /weatherforecast**\n\n[HttpGet\n\n]\npublic\n\n IEnumerable<WeatherForecast> \n\nGet\n\n() \n\n**// original method**\n\n{\n\n**return**\n\n **Get(**\n\n**5**\n\n**);** \n\n**// five day forecast**\n\n}\n\n**// GET /weatherforecast/7**\n\n**[**\n\n**HttpGet(**\n\n**\"{days:int}\"**\n\n**)**\n\n**]**\n\n**public**\n\n **IEnumerable<WeatherForecast>** \n\n**Get**\n\n**(**\n\n**int**\n\n **days**\n\n**)** \n\n**// new method**\n\n{\n\n**return**\n\n **Enumerable.Range(**\n\n**1**\n\n**, days).Select(index =>**\n\n    new\n\n WeatherForecast\n    {\n      Date = DateTime.Now.AddDays(index),\n      TemperatureC = Random.Shared.Next(-20\n\n, 55\n\n),\n      Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n    })\n    .ToArray();\n} \n\n```", "```cs\n     \"profiles\"\n\n    : {\n      \"Northwind.WebApi\"\n\n    : {\n        \"commandName\"\n\n    : \"Project\"\n\n    ,\n        \"dotnetRunMessages\"\n\n    : \"true\"\n\n    ,\n\n    **\"launchBrowser\"**\n\n    **:** \n\n    **true**\n\n    **,**\n\n    **\"launchUrl\"**\n\n    **:** \n\n    **\"swagger\"**\n\n    **,**\n\n        \"applicationUrl\"\n\n    : \"https://localhost:5001;http://localhost:5000\"\n\n    ,\n        \"environmentVariables\"\n\n    : {\n          \"ASPNETCORE_ENVIRONMENT\"\n\n    : \"Development\"\n\n        }\n      }, \n\n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if\n\n     you prefer -->\n      <ProjectReference Include=\n    \"..\\Northwind.Common.DataContext.Sqlite\\Northwind.Common.DataContext.Sqlite.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     Microsoft.AspNetCore.Mvc.Formatters;\n    using\n\n     Packt.Shared; // AddNorthwindContext extension method\n\n    using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n     // Add services to the container.\n\n    builder.Services.AddNorthwindContext(); \n\n    ```", "```cs\n    builder.Services.AddControllers(options =>\n    {\n      WriteLine(\"Default output formatters:\"\n\n    );\n      foreach\n\n     (IOutputFormatter formatter in\n\n     options.OutputFormatters)\n      {\n        OutputFormatter? mediaFormatter = formatter as\n\n     OutputFormatter;\n        if\n\n     (mediaFormatter == null\n\n    )\n        {\n          WriteLine($\"  \n\n    {formatter.GetType().Name}\n\n    \"\n\n    );\n        }\n        else\n\n     // OutputFormatter class has SupportedMediaTypes\n\n        {\n          WriteLine(\"  {0}, Media types: {1}\"\n\n    ,\n            arg0: mediaFormatter.GetType().Name,\n            arg1: string\n\n    .Join(\", \"\n\n    ,\n              mediaFormatter.SupportedMediaTypes));\n        }\n      }\n    })\n    .AddXmlDataContractSerializerFormatters()\n    .AddXmlSerializerFormatters(); \n\n    ```", "```cs\n    Default output formatters: \n      HttpNoContentOutputFormatter\n      StringOutputFormatter, Media types: text/plain\n      StreamOutputFormatter\n      SystemTextJsonOutputFormatter, Media types: application/json, text/json, application/*+json \n\n    ```", "```cs\n     using\n\n     Packt.Shared; // Customer\n\n    namespace\n\n     Northwind.WebApi.Repositories\n\n    ;\n    public\n\n     interface\n\n     ICustomerRepository\n\n    {\n      Task<Customer?> CreateAsync(Customer c);\n      Task<IEnumerable<Customer>> RetrieveAllAsync();\n      Task<Customer?> RetrieveAsync(string\n\n     id);\n      Task<Customer?> UpdateAsync(string\n\n     id, Customer c);\n      Task<bool\n\n    ?> DeleteAsync(string\n\n     id);\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore.ChangeTracking; // EntityEntry<T>\n\n    using\n\n     Packt.Shared; // Customer\n\n    using\n\n     System.Collections.Concurrent; // ConcurrentDictionary\n\n    namespace\n\n     Northwind.WebApi.Repositories\n\n    ;\n    public\n\n     class\n\n     CustomerRepository\n\n     : ICustomerRepository\n\n    {\n      // use a static thread-safe dictionary field to cache the customers\n\n      private\n\n     static\n\n     ConcurrentDictionary\n        <string\n\n    , Customer>? customersCache;\n      // use an instance data context field because it should not be\n\n      // cached due to their internal caching\n\n      private\n\n     NorthwindContext db;\n      public\n\n    CustomerRepository\n\n    (\n\n    NorthwindContext injectedContext\n\n    )\n\n      {\n        db = injectedContext;\n        // pre-load customers from database as a normal\n\n        // Dictionary with CustomerId as the key,\n\n        // then convert to a thread-safe ConcurrentDictionary\n\n        if\n\n     (customersCache is\n\n     null\n\n    )\n        {\n          customersCache = new\n\n     ConcurrentDictionary<string\n\n    , Customer>(\n            db.Customers.ToDictionary(c => c.CustomerId));\n        }\n      }\n      public\n\n    async\n\n     Task<Customer?> \n\n    CreateAsync\n\n    (\n\n    Customer c\n\n    )\n\n      {\n        // normalize CustomerId into uppercase\n\n        c.CustomerId = c.CustomerId.ToUpper();\n        // add to database using EF Core\n\n        EntityEntry<Customer> added = await\n\n     db.Customers.AddAsync(c);\n        int\n\n     affected = await\n\n     db.SaveChangesAsync();\n        if\n\n     (affected == 1\n\n    )\n        {\n          if\n\n     (customersCache is\n\n     null\n\n    ) return\n\n     c;\n          // if the customer is new, add it to cache, else\n\n          // call UpdateCache method\n\n          return\n\n     customersCache.AddOrUpdate(c.CustomerId, c, UpdateCache);\n        }\n        else\n\n        {\n          return\n\n     null\n\n    ;\n        }\n      }\n      public\n\n     Task<IEnumerable<Customer>> RetrieveAllAsync()\n      {\n        // for performance, get from cache\n\n        return\n\n     Task.FromResult(customersCache is\n\n     null\n\n            ? Enumerable.Empty<Customer>() : customersCache.Values);\n      }\n      public\n\n     Task<Customer?> RetrieveAsync(string\n\n     id)\n      {\n        // for performance, get from cache\n\n        id = id.ToUpper();\n        if\n\n     (customersCache is\n\n     null\n\n    ) return\n\n     null\n\n    !;\n        customersCache.TryGetValue(id, out\n\n     Customer? c);\n        return\n\n     Task.FromResult(c);\n      }\n      private\n\n     Customer \n\n    UpdateCache\n\n    (\n\n    string\n\n     id, Customer c\n\n    )\n\n      {\n        Customer? old;\n        if\n\n     (customersCache is\n\n     not\n\n     null\n\n    )\n        {\n          if\n\n     (customersCache.TryGetValue(id, out\n\n     old))\n          {\n            if\n\n     (customersCache.TryUpdate(id, c, old))\n            {\n              return\n\n     c;\n            }\n          }\n        }\n        return\n\n     null\n\n    !;\n      }\n      public\n\n     async\n\n     Task<Customer?> UpdateAsync(string\n\n     id, Customer c)\n      {\n        // normalize customer Id\n\n        id = id.ToUpper();\n        c.CustomerId = c.CustomerId.ToUpper();\n        // update in database\n\n        db.Customers.Update(c);\n        int\n\n     affected = await\n\n     db.SaveChangesAsync();\n        if\n\n     (affected == 1\n\n    )\n        {\n          // update in cache\n\n          return\n\n     UpdateCache(id, c);\n        }\n        return\n\n     null\n\n    ;\n      }\n      public\n\n     async\n\n     Task<bool\n\n    ?> DeleteAsync(string\n\n     id)\n      {\n        id = id.ToUpper();\n        // remove from database\n\n        Customer? c = db.Customers.Find(id);\n        if\n\n     (c is\n\n     null\n\n    ) return\n\n     null\n\n    ;\n        db.Customers.Remove(c);\n        int\n\n     affected = await\n\n     db.SaveChangesAsync();\n        if\n\n     (affected == 1\n\n    )\n        {\n          if\n\n     (customersCache is\n\n     null\n\n    ) return\n\n     null\n\n    ;\n          // remove from cache\n\n          return\n\n     customersCache.TryRemove(id, out\n\n     c);\n        }\n        else\n\n        {\n          return\n\n     null\n\n    ;\n        }\n      }\n    } \n\n    ```", "```cs\n[HttpGet(\n\n\"{id}\"\n\n)\n\n]\n[ProducesResponseType(200, Type = typeof(Product))\n\n] \n[ProducesResponseType(404)\n\n]\npublic\n\n IActionResult \n\nGet\n\n(\n\nstring\n\n id\n\n) \n\n```", "```cs\n     **builder.Services.AddScoped<ICustomerRepository, CustomerRepository>();**\n\n    var\n\n     app = builder.Build(); \n\n    ```", "```cs\n     using\n\n     Microsoft.AspNetCore.Mvc; // [Route], [ApiController], ControllerBase\n\n    using\n\n     Packt.Shared; // Customer\n\n    using\n\n     Northwind.WebApi.Repositories; // ICustomerRepository\n\n    namespace\n\n     Northwind.WebApi.Controllers\n\n    ;\n    // base address: api/customers\n\n    [Route(\n\n    \"api/[controller]\"\n\n    )\n\n    ]\n    [ApiController\n\n    ]\n    public\n\n     class\n\n     CustomersController\n\n     : ControllerBase\n\n    {\n      private\n\n     readonly\n\n     ICustomerRepository repo;\n      // constructor injects repository registered in Startup\n\n      public\n\n    CustomersController\n\n    (\n\n    ICustomerRepository repo\n\n    )\n\n      {\n        this\n\n    .repo = repo;\n      }\n      // GET: api/customers\n\n      // GET: api/customers/?country=[country]\n\n      // this will always return a list of customers (but it might be empty)\n\n      [HttpGet\n\n    ]\n      [ProducesResponseType(200, Type = typeof(IEnumerable<Customer>))\n\n    ]\n      public\n\n     async\n\n     Task<IEnumerable<Customer>> GetCustomers(string\n\n    ? country)\n      {\n        if\n\n     (string\n\n    .IsNullOrWhiteSpace(country))\n        {\n          return\n\n     await\n\n     repo.RetrieveAllAsync();\n        }\n        else\n\n        {\n          return\n\n     (await\n\n     repo.RetrieveAllAsync())\n            .Where(customer => customer.Country == country);\n        }\n      }\n      // GET: api/customers/[id]\n\n      [HttpGet(\n\n    \"{id}\"\n\n    , Name = nameof(GetCustomer))\n\n    ] // named route\n\n      [ProducesResponseType(200, Type = typeof(Customer))\n\n    ]\n      [ProducesResponseType(404)\n\n    ]\n      public\n\n    async\n\n     Task<IActionResult> \n\n    GetCustomer\n\n    (\n\n    string\n\n     id\n\n    )\n\n      {\n        Customer? c = await\n\n     repo.RetrieveAsync(id);\n        if\n\n     (c == null\n\n    )\n        {\n          return\n\n     NotFound(); // 404 Resource not found\n\n        }\n        return\n\n     Ok(c); // 200 OK with customer in body\n\n      }\n      // POST: api/customers\n\n      // BODY: Customer (JSON, XML)\n\n      [HttpPost\n\n    ]\n      [ProducesResponseType(201, Type = typeof(Customer))\n\n    ]\n      [ProducesResponseType(400)\n\n    ]\n      public\n\n    async\n\n     Task<IActionResult> \n\n    Create\n\n    (\n\n    [FromBody] Customer c\n\n    )\n\n      {\n        if\n\n     (c == null\n\n    )\n        {\n          return\n\n     BadRequest(); // 400 Bad request\n\n        }\n        Customer? addedCustomer = await\n\n     repo.CreateAsync(c);\n        if\n\n     (addedCustomer == null\n\n    )\n        {\n          return\n\n     BadRequest(\"Repository failed to create customer.\"\n\n    );\n        }\n        else\n\n        {\n          return\n\n     CreatedAtRoute( // 201 Created\n\n            routeName: nameof\n\n    (GetCustomer),\n            routeValues: new\n\n     { id = addedCustomer.CustomerId.ToLower() },\n            value\n\n    : addedCustomer);\n        }\n      }\n      // PUT: api/customers/[id]\n\n      // BODY: Customer (JSON, XML)\n\n      [HttpPut(\n\n    \"{id}\"\n\n    )\n\n    ]\n      [ProducesResponseType(204)\n\n    ]\n      [ProducesResponseType(400)\n\n    ]\n      [ProducesResponseType(404)\n\n    ]\n      public\n\n    async\n\n     Task<IActionResult> \n\n    Update\n\n    (\n\n    string\n\n     id, [FromBody] Customer c\n\n    )\n\n      {\n        id = id.ToUpper();\n        c.CustomerId = c.CustomerId.ToUpper();\n        if\n\n     (c == null\n\n     || c.CustomerId != id)\n        {\n          return\n\n     BadRequest(); // 400 Bad request\n\n        }\n        Customer? existing = await\n\n     repo.RetrieveAsync(id);\n        if\n\n     (existing == null\n\n    )\n        {\n          return\n\n     NotFound(); // 404 Resource not found\n\n        }\n        await\n\n     repo.UpdateAsync(id, c);\n        return\n\n     new\n\n     NoContentResult(); // 204 No content\n\n      }\n      // DELETE: api/customers/[id]\n\n      [HttpDelete(\n\n    \"{id}\"\n\n    )\n\n    ]\n      [ProducesResponseType(204)\n\n    ]\n      [ProducesResponseType(400)\n\n    ]\n      [ProducesResponseType(404)\n\n    ]\n      public\n\n    async\n\n     Task<IActionResult> \n\n    Delete\n\n    (\n\n    string\n\n     id\n\n    )\n\n      {\n        Customer? existing = await\n\n     repo.RetrieveAsync(id);\n        if\n\n     (existing == null\n\n    )\n        {\n          return\n\n     NotFound(); // 404 Resource not found\n\n        }\n        bool\n\n    ? deleted = await\n\n     repo.DeleteAsync(id);\n        if\n\n     (deleted.HasValue && deleted.Value) // short circuit AND\n\n        {\n          return\n\n     new\n\n     NoContentResult(); // 204 No content\n\n        }\n        else\n\n        {\n          return\n\n     BadRequest( // 400 Bad request\n\n            $\"Customer \n\n    {id}\n\n     was found but failed to delete.\"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n     // take control of problem details\n\n    if\n\n     (id == \"bad\"\n\n    )\n    {\n      ProblemDetails problemDetails = new\n\n    ()\n      {\n        Status = StatusCodes.Status400BadRequest,\n        Type = \"https://localhost:5001/customers/failed-to-delete\"\n\n    ,\n        Title = $\"Customer ID \n\n    {id}\n\n     found but failed to delete.\"\n\n    ,\n        Detail = \"More details like Company Name, Country and so on.\"\n\n    ,\n        Instance = HttpContext.Request.Path\n      };\n      return\n\n     BadRequest(problemDetails); // 400 Bad Request\n\n    } \n\n    ```", "```cs\nwarn: Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter[1]\nAn error occurred while trying to create an XmlSerializer for the type 'Packt.Shared.Customer'.\nSystem.InvalidOperationException: There was an error reflecting type 'Packt.Shared.Customer'.\n--->\n\n System.InvalidOperationException: Cannot serialize member \n\n'Packt.\n\nShared.Customer.Orders' of type 'System.Collections.Generic.ICollection`1[[Packt. Shared.Order, Northwind.Common.EntityModels, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]', see inner exception for more details. \n\n```", "```cs\n    [InverseProperty(nameof(Order.Customer))\n\n    ]\n\n    **[**\n\n    **XmlIgnore**\n\n    **]**\n\n    public\n\n     virtual\n\n     ICollection<Order> Orders { get\n\n    ; set\n\n    ; } \n\n    ```", "```cs\n    GET https://localhost:5001/api/customers/ HTTP/1.1 \n\n    ```", "```cs\n    ###\n    GET https://localhost:5001/api/customers/?country=Germany HTTP/1.1 \n\n    ###\n    GET https://localhost:5001/api/customers/?country=USA HTTP/1.1 \n\n    Accept\n\n    : application/xml\n    ###\n    GET https://localhost:5001/api/customers/ALFKI HTTP/1.1 \n\n    ###\n    GET https://localhost:5001/api/customers/abcxy HTTP/1.1 \n\n    ```", "```cs\n     POST https://localhost:5001/api/customers/ HTTP/1.1 \n\n    Content-Type\n\n    : application/json\n    Content-Length\n\n    : 301\n    {\n      \"customerID\": \"ABCXY\",\n      \"companyName\": \"ABC Corp\",\n      \"contactName\": \"John Smith\",\n      \"contactTitle\": \"Sir\",\n      \"address\": \"Main Street\",\n      \"city\": \"New York\",\n      \"region\": \"NY\",\n      \"postalCode\": \"90210\",\n      \"country\":  \"USA\",\n      \"phone\": \"(123) 555-1234\",\n      \"fax\": null,\n      \"orders\": null\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Swashbuckle.AspNetCore\"\n\n     Version=\"6.1.5\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     using\n\n     Microsoft.OpenApi.Models; \n\n    ```", "```cs\n     using\n\n     Swashbuckle.AspNetCore.SwaggerUI; // SubmitMethod \n\n    ```", "```cs\n    builder.Services.AddSwaggerGen(c =>\n      {\n        c.SwaggerDoc(\"v1\"\n\n    , new\n\n    ()\n          { Title = \"\n\n    **Northwind Service API**\n\n    \"\n\n    , Version = \"v1\"\n\n     });\n      }); \n\n    ```", "```cs\n     var\n\n     app = builder.Build();\n    // Configure the HTTP request pipeline.\n\n    if\n\n     (builder.Environment.IsDevelopment())\n    {\n      app.UseSwagger(); \n      app.UseSwaggerUI(c =>\n\n     **{**\n\n     **c.SwaggerEndpoint(**\n\n    **\"/swagger/v1/swagger.json\"**\n\n    **,**\n\n    **\"Northwind Service API Version 1\"**\n\n    **);**\n\n     **c.SupportedSubmitMethods(**\n\n    **new**\n\n    **[] {** \n\n     **SubmitMethod.Get, SubmitMethod.Post,**\n\n     **SubmitMethod.Put, SubmitMethod.Delete });**\n\n     **});**\n\n    } \n\n    ```", "```cs\n    {\n      \"customerID\"\n\n    : \"SUPER\"\n\n    ,\n      \"companyName\"\n\n    : \"Super Company\"\n\n    ,\n      \"contactName\"\n\n    : \"Rasmus Ibensen\"\n\n    ,\n      \"contactTitle\"\n\n    : \"Sales Leader\"\n\n    ,\n      \"address\"\n\n    : \"Rotterslef 23\"\n\n    ,\n      \"city\"\n\n    : \"Billund\"\n\n    ,\n      \"region\"\n\n    : null\n\n    ,\n      \"postalCode\"\n\n    : \"4371\"\n\n    ,\n      \"country\"\n\n    : \"Denmark\"\n\n    ,\n      \"phone\"\n\n    : \"31 21 43 21\"\n\n    ,\n      \"fax\"\n\n    : \"31 21 43 22\"\n\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.AspNetCore.HttpLogging; // HttpLoggingFields \n\n    ```", "```cs\n    builder.Services.AddHttpLogging(options =>\n    {\n      options.LoggingFields = HttpLoggingFields.All;\n      options.RequestBodyLogLimit = 4096\n\n    ; // default is 32k\n\n      options.ResponseBodyLogLimit = 4096\n\n    ; // default is 32k\n\n    }); \n\n    ```", "```cs\n    app.UseHttpLogging(); \n\n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n          Request:\n          Protocol: HTTP/1.1\n          Method: GET\n          Scheme: https\n          PathBase:\n          Path: /api/customers\n          QueryString:\n          Connection: keep-alive\n          Accept: */*\n          Accept-Encoding: gzip, deflate, br\n          Host: localhost:5001\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 200\n          Content-Type: application/json; charset=utf-8\n          ...\n          Transfer-Encoding: chunked \n\n    ```", "```cs\n     var\n\n     builder = WebApplication.CreateBuilder(args);\n\n    **builder.WebHost.UseUrls(**\n\n    **\"https://localhost:5002/\"**\n\n    **);** \n\n    ```", "```cs\n     using\n\n     System.Net.Http.Headers; // MediaTypeWithQualityHeaderValue \n\n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.WebApi\"\n\n    ,\n      configureClient: options =>\n      {\n        options.BaseAddress = new\n\n     Uri(\"https://localhost:5002/\"\n\n    );\n        options.DefaultRequestHeaders.Accept.Add(\n          new\n\n     MediaTypeWithQualityHeaderValue(\n          \"application/json\"\n\n    , 1.0\n\n    ));\n      }); \n\n    ```", "```cs\n     private\n\n     readonly\n\n     IHttpClientFactory clientFactory; \n\n    ```", "```cs\n     public\n\n    HomeController\n\n    (\n\n      ILogger<HomeController> logger,\n\n      NorthwindContext injectedContext\n\n    **,**\n\n     **IHttpClientFactory httpClientFactory**\n\n    )\n\n    {\n      _logger = logger;\n      db = injectedContext;\n\n     **clientFactory = httpClientFactory;**\n\n    } \n\n    ```", "```cs\n     public\n\n    async\n\n     Task<IActionResult> \n\n    Customers\n\n    (\n\n    string\n\n     country\n\n    )\n\n    {\n      string\n\n     uri;\n      if\n\n     (string\n\n    .IsNullOrEmpty(country))\n      {\n        ViewData[\"Title\"\n\n    ] = \"All Customers Worldwide\"\n\n    ;\n        uri = \"api/customers/\"\n\n    ;\n      }\n      else\n\n      {\n        ViewData[\"Title\"\n\n    ] = $\"Customers in \n\n    {country}\n\n    \"\n\n    ;\n        uri = $\"api/customers/?country=\n\n    {country}\n\n    \"\n\n    ;\n      }\n      HttpClient client = clientFactory.CreateClient(\n        name: \"Northwind.WebApi\"\n\n    );\n      HttpRequestMessage request = new\n\n    (\n        method: HttpMethod.Get, requestUri: uri);\n      HttpResponseMessage response = await\n\n     client.SendAsync(request);\n      IEnumerable<Customer>? model = await\n\n     response.Content\n        .ReadFromJsonAsync<IEnumerable<Customer>>();\n      return\n\n     View(model);\n    } \n\n    ```", "```cs\n    @using Packt.Shared\n    @model IEnumerable<Customer>\n    <\n\n    h2\n\n    >\n\n    @ViewData[\"Title\"]</\n\n    h2\n\n    >\n\n    <\n\n    table\n\n    class\n\n    =\n\n    \"table\"\n\n    >\n\n      <\n\n    thead\n\n    >\n\n        <\n\n    tr\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Company Name</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Contact Name</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Address</\n\n    th\n\n    >\n\n          <\n\n    th\n\n    >\n\n    Phone</\n\n    th\n\n    >\n\n        </\n\n    tr\n\n    >\n\n      </\n\n    thead\n\n    >\n\n      <\n\n    tbody\n\n    >\n\n        @if (Model is not null)\n        {\n          @foreach (Customer c in Model)\n          {\n            <\n\n    tr\n\n    >\n\n              <\n\n    td\n\n    >\n\n                @Html.DisplayFor(modelItem => c.CompanyName)\n              </\n\n    td\n\n    >\n\n              <\n\n    td\n\n    >\n\n                @Html.DisplayFor(modelItem => c.ContactName)\n              </\n\n    td\n\n    >\n\n              <\n\n    td\n\n    >\n\n                @Html.DisplayFor(modelItem => c.Address) \n                @Html.DisplayFor(modelItem => c.City)\n                @Html.DisplayFor(modelItem => c.Region)\n                @Html.DisplayFor(modelItem => c.Country) \n                @Html.DisplayFor(modelItem => c.PostalCode)\n              </\n\n    td\n\n    >\n\n              <\n\n    td\n\n    >\n\n                @Html.DisplayFor(modelItem => c.Phone)\n              </\n\n    td\n\n    >\n\n            </\n\n    tr\n\n    >\n\n          }\n        }\n      </\n\n    tbody\n\n    >\n\n    </\n\n    table\n\n    > \n\n    ```", "```cs\n     <\n\n    h3\n\n    >\n\n    Query customers from a service</\n\n    h3\n\n    >\n\n    <\n\n    form\n\n    asp-action\n\n    =\n\n    \"Customers\"\n\n    method\n\n    =\n\n    \"get\"\n\n    >\n\n      <\n\n    input\n\n    name\n\n    =\n\n    \"country\"\n\n    placeholder\n\n    =\n\n    \"Enter a country\"\n\n     />\n\n      <\n\n    input\n\n    type\n\n    =\n\n    \"submit\"\n\n     />\n\n    </\n\n    form\n\n    > \n\n    ```", "```cs\n    builder.Services.AddCors(); \n\n    ```", "```cs\n    app.UseCors(configurePolicy: options =>\n    {\n      options.WithMethods(\"GET\"\n\n    , \"POST\"\n\n    , \"PUT\"\n\n    , \"DELETE\"\n\n    );\n      options.WithOrigins(\n        \"https://localhost:5001\"\n\n     // allow requests from the MVC client\n\n      );\n    }); \n\n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5002 \n\n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5001\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5000 \n\n    ```", "```cs\n    info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[100]\n      Sending HTTP request GET https://localhost:5002/api/customers/?country=UK\n    info: System.Net.Http.HttpClient.Northwind.WebApi.ClientHandler[101]\n      Received HTTP response headers after 931.864ms - 200 \n\n    ```", "```cs\n    <PackageReference Include=  \n      \"Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\"\n\n      Version=\"6.0.0\"\n\n     /> \n\n    ```", "```cs\n    builder.Services.AddHealthChecks()\n      .AddDbContextCheck<NorthwindContext>(); \n\n    ```", "```cs\n    app.UseHealthChecks(path: \"/howdoyoufeel\"\n\n    ); \n\n    ```", "```cs\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT 1 \n\n    ```", "```cs\n<PropertyGroup>\n  <TargetFramework>net6.0\n\n</TargetFramework>\n  <Nullable>enable</Nullable>\n  <ImplicitUsings>enable</ImplicitUsings>\n\n **<IncludeOpenAPIAnalyzers>**\n\n**true**\n\n**</IncludeOpenAPIAnalyzers>**\n\n</PropertyGroup> \n\n```", "```cs\n     using\n\n     Microsoft.Extensions.Primitives; // StringValues\n\n    public\n\n     class\n\n     SecurityHeaders\n\n    {\n      private\n\n     readonly\n\n     RequestDelegate next;\n      public\n\n    SecurityHeaders\n\n    (\n\n    RequestDelegate next\n\n    )\n\n      {\n        this\n\n    .next = next;\n      }\n      public\n\n     Task \n\n    Invoke\n\n    (\n\n    HttpContext context\n\n    )\n\n      {\n        // add any HTTP response headers you want here\n\n        context.Response.Headers.Add(\n          \"super-secure\"\n\n    , new\n\n     StringValues(\"enable\"\n\n    ));\n        return\n\n     next(context);\n      }\n    } \n\n    ```", "```cs\n    app.UseMiddleware<SecurityHeaders>(); \n\n    ```", "```cs\n     namespace\n\n     Northwind.Common\n\n    {\n      public\n\n     class\n\n     WeatherForecast\n\n      {\n        public\n\n     static\n\n     readonly\n\n     string\n\n    [] Summaries = new\n\n    []\n        {\n          \"Freezing\"\n\n    , \"Bracing\"\n\n    , \"Chilly\"\n\n    , \"Cool\"\n\n    , \"Mild\"\n\n    ,\n          \"Warm\"\n\n    , \"Balmy\"\n\n    , \"Hot\"\n\n    , \"Sweltering\"\n\n    , \"Scorching\"\n\n        };\n        public\n\n     DateTime Date { get\n\n    ; set\n\n    ; }\n        public\n\n     int\n\n     TemperatureC { get\n\n    ; set\n\n    ; }\n        public\n\n     int\n\n     TemperatureF => 32\n\n     + (int\n\n    )(TemperatureC / 0.5556\n\n    );\n        public\n\n     string\n\n    ? Summary { get\n\n    ; set\n\n    ; }\n      }\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\Northwind.Common\\Northwind.Common.csproj\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     **using**\n\n     **Northwind.Common;** \n\n    **// WeatherForecast**\n\n    var\n\n     builder = WebApplication.CreateBuilder(args);\n\n    **builder.WebHost.UseUrls(**\n\n    **\"https://localhost:5003\"**\n\n    **);**\n\n    **builder.Services.AddCors();**\n\n    var\n\n     app = builder.Build();\n\n    **// only allow the MVC client and only GET requests**\n\n    **app.UseCors(configurePolicy: options =>**\n\n    **{**\n\n     **options.WithMethods(**\n\n    **\"GET\"**\n\n    **);**\n\n     **options.WithOrigins(**\n\n    **\"https://localhost:5001\"**\n\n    **);**\n\n    **});**\n\n    **app.MapGet(**\n\n    **\"/api/weather\"**\n\n    **, () =>** \n\n    **{**\n\n    **return**\n\n     **Enumerable.Range(**\n\n    **1**\n\n    **,** \n\n    **5**\n\n    **).Select(index =>**\n\n    **new**\n\n     **WeatherForecast**\n\n     **{**\n\n     **Date = DateTime.Now.AddDays(index),**\n\n     **TemperatureC = Random.Shared.Next(**\n\n    **-20**\n\n    **,** \n\n    **55**\n\n    **),**\n\n     **Summary = WeatherForecast.Summaries[**\n\n     **Random.Shared.Next(WeatherForecast.Summaries.Length)]**\n\n     **})**\n\n     **.ToArray();**\n\n    **});**\n\n    app.Run(); \n\n    ```", "```cs\n     \"profiles\"\n\n    : {\n      \"Minimal.WebApi\"\n\n    : {\n        \"commandName\"\n\n    : \"Project\"\n\n    ,\n        \"dotnetRunMessages\"\n\n    : \"true\"\n\n    ,\n        \"launchBrowser\"\n\n    : true\n\n    ,\n\n    **\"applicationUrl\"**\n\n    **:** \n\n    **\"https://localhost:5003/api/weather\"**\n\n    **,**\n\n        \"environmentVariables\"\n\n    : {\n          \"ASPNETCORE_ENVIRONMENT\"\n\n    : \"Development\"\n\n        } \n\n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if\n\n     you prefer -->\n      <ProjectReference Include=\"..\\Northwind.Common.DataContext.Sqlite\\Northwind.Common.DataContext.Sqlite.csproj\"\n\n     />\n\n     **<ProjectReference Include=**\n\n    **\"..\\Northwind.Common\\Northwind.Common.csproj\"**\n\n     **/>**\n\n    </ItemGroup> \n\n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Minimal.WebApi\"\n\n    ,\n      configureClient: options =>\n      {\n        options.BaseAddress = new\n\n     Uri(\"https://localhost:5003/\"\n\n    );\n        options.DefaultRequestHeaders.Accept.Add(\n          new\n\n     MediaTypeWithQualityHeaderValue(\n          \"application/json\"\n\n    , 1.0\n\n    ));\n      }); \n\n    ```", "```cs\n     try\n\n    {\n      HttpClient client = clientFactory.CreateClient(\n        name: \"Minimal.WebApi\"\n\n    );\n      HttpRequestMessage request = new\n\n    (\n        method: HttpMethod.Get, requestUri: \"api/weather\"\n\n    );\n      HttpResponseMessage response = await\n\n     client.SendAsync(request);\n      ViewData[\"weather\"\n\n    ] = await\n\n     response.Content\n        .ReadFromJsonAsync<WeatherForecast[]>();\n    }\n    catch (Exception ex)\n    {\n      _logger.LogWarning($\"The Minimal.WebApi service is not responding. Exception: \n\n    {ex.Message}\n\n    \"\n\n    );\n      ViewData[\"weather\"\n\n    ] = Enumerable.Empty<WeatherForecast>().ToArray();\n    } \n\n    ```", "```cs\n    @{\n      ViewData[\"Title\"\n\n    ] = \"Home Page\"\n\n    ;\n      string\n\n     currentItem = \"\"\n\n    ;\n\n     **WeatherForecast[]? weather = ViewData[**\n\n    **\"weather\"**\n\n    **]** \n\n    **as**\n\n     **WeatherForecast[];**\n\n    } \n\n    ```", "```cs\n     <\n\n    p\n\n    >\n\n      <\n\n    h4\n\n    >\n\n    Five-Day Weather Forecast</\n\n    h4\n\n    >\n\n      @if ((weather is null) || (!weather.Any()))\n      {\n        <\n\n    p\n\n    >\n\n    No weather forecasts found.</\n\n    p\n\n    >\n\n      }\n      else\n      {\n      <\n\n    table\n\n    class\n\n    =\n\n    \"table table-info\"\n\n    >\n\n        <\n\n    tr\n\n    >\n\n          @foreach (WeatherForecast w in weather)\n          {\n            <\n\n    td\n\n    >\n\n    @w.Date.ToString(\"ddd d MMM\") will be @w.Summary</\n\n    td\n\n    >\n\n          }\n        </\n\n    tr\n\n    >\n\n      </\n\n    table\n\n    >\n\n      }\n    </\n\n    p\n\n    > \n\n    ```", "```cs\n    info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[100]\n          Start processing HTTP request GET https://localhost:5003/api/weather\n    info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[100]\n          Sending HTTP request GET https://localhost:5003/api/weather\n    info: System.Net.Http.HttpClient.Minimal.WebApi.ClientHandler[101]\n          Received HTTP response headers after 76.8963ms - 200\n    info: System.Net.Http.HttpClient.Minimal.WebApi.LogicalHandler[101]\n          End processing HTTP request after 82.9515ms \u2013 200 \n\n    ```"]