["```js\n.\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 css\n    \u2502   \u2514\u2500\u2500 styles.css\n    \u2514\u2500\u2500 js\n         \u251c\u2500\u2500 general.js\n         \u2514\u2500\u2500 memes.js\n```", "```js\nbody {\n  padding-top: 65px;\n}\n```", "```js\n.body {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n```", "```js\n.canvas-area {\n   flex: 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 10px;\n}\n.img-canvas {\n  border: 1px solid #000000;\n}\n.input-area {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 10px;\n}\n```", "```js\n.form-group {\n  width: 90%;\n}\n.download-button {\n  margin-top: 10px;\n}\n```", "```js\nfunction sum (a, b) {\n  return a+b;\n}\n```", "```js\nexport function sum (a, b) {\n  return a+b;\n}\n```", "```js\n// In file add.js at the same directory as sum.js\nimport { sum } from './sum.js';\n\nlet a = 5, b = 6, total;\ntotal = sum(a, b);\n```", "```js\nlet sum = (a, b) => return a+b;\nmodule.exports = { sum };\n```", "```js\nconst sum = require('./sum');\n```", "```js\nexport default TRIANGLE = 3;\nexport const SQUARE = 4;\nexport const PENTAGON = 5;\nexport const HEXAGON = 6;\n```", "```js\nimport * as sides from './sides.js';\n```", "```js\nimport side from './sides.js';\n```", "```js\nimport TRIANGLE, { SQUARE, PENTAGON, HEXAGON } from './sides.js';\n```", "```js\n// inside memes.js file\nconsole.log('Memes JS file');\n// inside general.js file\nconsole.log('General JS File');\n```", "```js\nimport './general';\n```", "```js\nnpm install -D webpack\n```", "```js\n\"webpack\": \"webpack src/js/memes.js --output-filename dist/memes.js\",\n```", "```js\nnpm run webpack\n```", "```js\n<script  src=\"./dist/memes.js\"></script>\n```", "```js\nconst webpack = require('webpack');\n\nmodule.exports = {\n  context: __dirname,\n  entry: {\n    general: './src/js/general.js',\n    memes: './src/js/memes.js',\n  },\n  output: {\n    path: __dirname + \"/dist\",\n    filename: '[name].js',\n  },\n}\n```", "```js\n\"webpack\": \"webpack\"\n```", "```js\nclass Memes {\n  constructor() {\n    console.log('Inside Memes class');\n  }\n}\n\nnew Memes();\n```", "```js\nnpm install -D babel-core babel-loader babel-preset-env babel-preset-es2015\n```", "```js\nmodule: {\n  rules: [\n    {\n      test: /\\.js$/,\n      exclude: /(node_modules)/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['env', 'es2015'],\n        }\n      }\n    }\n  ],\n},\n```", "```js\nnpm install -D css-loader style-loader\n```", "```js\n{\n  test: /\\.css$/,\n  use: [ 'style-loader', 'css-loader' ]\n},\n```", "```js\nimport  '../css/styles.css';\n```", "```js\nnpm install -S jquery bootstrap@3\n```", "```js\nnpm install -D less less-loader\n```", "```js\n{\n  test: /\\.(less|css)$/,\n  use: [ 'style-loader', 'css-loader', 'less-loader' ]\n},\n```", "```js\nnpm install -D file-loader url-loader\n```", "```js\n{\n  test: /\\.(svg|eot|ttf|woff|woff2)$/,\n  loader: 'url-loader',\n  options: {\n    limit: 10000,\n    name: 'fonts/[name].[ext]'\n  }\n},\n```", "```js\nmodule: {\n  rules: [...],\n},\nplugins: [\n  new webpack.ProvidePlugin({\n    jQuery: 'jquery',\n    $: 'jquery',\n    jquery: 'jquery'\n  }),\n],\n```", "```js\nimport  'bootstrap';\n```", "```js\nnpm install -D img-loader\n```", "```js\n{\n  test: /\\.(png|jpg|gif)$/,\n  loaders: [\n    {\n      loader: 'url-loader',\n      options: {\n        limit: 10000,\n        name: 'images/[name].[ext]'\n      }\n    },\n  'img-loader'\n  ],\n},\n```", "```js\nnpm install -D webpack-dev-server\n```", "```js\n  \"watch\": \"webpack-dev-server\"\n```", "```js\nentry: {...},\noutput: {...},\ndevServer: {\n  compress: true,\n  port: 8080,\n  hot: true,\n},\nmodule: {..},\nplugins: [\n  ...,\n  new webpack.HotModuleReplacementPlugin(),\n],\n```", "```js\noutput: {\n  ...,\n  publicPath: '/dist/',\n},\n```", "```js\ndevtool: 'source-map',\n```", "```js\n{\n  test: /\\.(less|css)$/,\n  use: [\n    {\n      loader: \"style-loader\"\n    },\n    {\n      loader: \"css-loader\",\n      options: {\n        sourceMap: true\n      }\n    },\n    {\n      loader: \"less-loader\",\n      options: {\n        sourceMap: true\n      }\n    }\n  ]\n},\n```", "```js\nnpm install -D dotenv\n```", "```js\nNODE_ENV=production\nCONSTANT_VALUE=1234567\n```", "```js\nNODE_ENV=\nCONSTANT_VALUE=\n```", "```js\nrequire('dotenv').config()\n```", "```js\nconst  isProduction = (process.env.NODE_ENV === 'production');\n```", "```js\nnew webpack.DefinePlugin({\n  ENVIRONMENT: JSON.stringify(process.env.NODE_ENV),\n  CONSTANT_VALUE: JSON.stringify(process.env.CONSTANT_VALUE),\n}),\n```", "```js\nif(isProduction) {\n  module.exports.plugins.push(\n    new webpack.optimize.UglifyJsPlugin({sourceMap: true})\n  );\n}\n```", "```js\nnpm install -D purifycss-webpack\n```", "```js\nconst  PurifyCSSPlugin = require('purifycss-webpack'); constglob = require('glob');\n module.exports = {\n  ...\n  plugins: [\n    ...\n    new PurifyCSSPlugin({\n      paths: glob.sync(__dirname + '/*.html'),\n      minimize: true,\n    }),\n  ],\n}\n```", "```js\nnpm install -D extract-text-webpack-plugin\n```", "```js\n...\nconst extractLess = new ExtractTextPlugin({\n  filename: \"[name].css\",\n});\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.(less|css)$/,\n        use: extractLess.extract({\n          use: [\n            {\n              loader: 'css-loader',\n              options: {\n                sourceMap: true\n              }\n            },\n            {\n              loader: 'less-loader',\n              options: {\n                sourceMap: true\n              }\n            }\n          ],\n          fallback: 'style-loader',\n        })\n     },\n    ]\n  },\n  ...\n  plugins: [\n    ...\n    extractLess,\n    new PurifyCSSPlugin({\n      paths: glob.sync(__dirname + '/*.html'),\n      minimize: true,\n    }),\n    ...\n  ]\n}\n```", "```js\nconst fileNamePrefix = isProduction? '[chunkhash].' : '';\n\nmodule.exports = {\n  ...\n  output: {\n    ...\n    filename: fileNamePrefix + '[name].js',\n    ...\n  }\n}\n```", "```js\nfunction() {\n  this.plugin(\"done\", function(status) {\n    require(\"fs\").writeFileSync(\n      __dirname + \"/dist/manifest.json\",\n      JSON.stringify(status.toJson().assetsByChunkName)\n    );\n  });\n}\n```", "```js\nnpm install -D clean-webpack-plugin\n```", "```js\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst pathsToClean = [\n 'dist'\n];\nconst cleanOptions = {\n root: __dirname,\n verbose: true,\n dry: false,\n exclude: [],\n};\n```", "```js\n//# sourceMappingURL: http://protected.domain/dist/general.js.map\n```", "```js\n<input id=\"target\" class=\"target-input\" type=\"text\"/>\n```", "```js\ndocument.querySelector('#target');\ndocument.querySelector('.target-input');\ndocument.querySelector('input#target.target-input');\n```", "```js\nthis.$canvas = document.querySelector('#imgCanvas');\nthis.$topTextInput = document.querySelector('#topText');\nthis.$bottomTextInput = document.querySelector('#bottomText');\nthis.$imageInput = document.querySelector('#image');\nthis.$downloadButton = document.querySelector('#downloadMeme');\n```", "```js\nconst  deviceWidth = window.innerWidth;\n```", "```js\ncreateCanvas() {\n  let canvasHeight = Math.min(480, deviceWidth-30);\n  let canvasWidth = Math.min(640, deviceWidth-30);\n  this.$canvas.height = canvasHeight;\n  this.$canvas.width = canvasWidth;\n}\n```", "```js\ncreateMeme() {\n  console.log('rendered');\n}\n```", "```js\naddEventListeners() {\n  this.$topTextInput.addEventListener('keyup', this.createMeme);\n  this.$bottomTextInput.addEventListener('keyup', this.createMeme);\n}\n```", "```js\naddEventListeners() {\n  let inputNodes = [this.$topTextInput, this.$bottomTextInput, this.$imageInput];\n\n  inputNodes.forEach(element => element.addEventListener('keyup', this.createMeme));\n}\n```", "```js\ninputNodes.forEach(element  =>  element.addEventListener('change', this.createMeme));\n```", "```js\nlet context = this.$canvas.getContext('2d');\n```", "```js\nif (this.$imageInput.files && this.$imageInput.files[0]) {\n  console.log('rendering');\n}\n```", "```js\nthis.createMeme = this.createMeme.bind(this);\n```", "```js\n<input type=\"file\" id=\"image\" class=\"form-control\" accept=\".png,.jpg,.jpeg\">\n```", "```js\nlet reader = new FileReader();\n\nreader.onload = () => {\n  console.log('file completly read');\n};\n\nreader.readAsDataURL(this.$imageInput.files[0]);\nconsole.log('This will get printed first!');\n```", "```js\nreader.onload = () => {\n  let image = new Image();\n\n  image.onload = () => {\n\n  };\n\n  image.src = reader.result;\n}\n```", "```js\nimage.onload = () => {\n  this.$canvas.height = image.height;\n  this.$canvas.width = image.width;\n}\n```", "```js\ncontext.clearRect(0, 0, this.$canvas.height, this.$canvas.width);\ncontext.drawImage(image,0,0);\n```", "```js\n let fontSize = ((this.$canvas.width+this.$canvas.height)/2)*4/100;\n context.font = `${fontSize}pt sans-serif`;\n context.textAlign = 'center';\n context.textBaseline = 'top';\n```", "```js\n// for stroke text\ncontext.lineWidth = fontSize/5;\ncontext.strokeStyle = 'black';\n\n// for fill text\ncontext.fillStyle = 'white';\n```", "```js\nconst topText = this.$topTextInput.value.toUpperCase();\nconst bottomText = this.$bottomTextInput.value.toUpperCase();\n```", "```js\n// Top Text\ncontext.strokeText(topText, this.$canvas.width/2, this.$canvas.height*(5/100));\ncontext.fillText(topText, this.$canvas.width/2, this.$canvas.height*(5/100));\n\n// Bottom Text\ncontext.strokeText(bottomText, this.$canvas.width/2, this.$canvas.height*(90/100));\ncontext.fillText(bottomText, this.$canvas.width/2, this.$canvas.height*(90/100));\n```", "```js\ncontext.lineJoin = 'round';\n```", "```js\nthis.$downloadButton.addEventListener('click', this.downloadMeme.bind(this));\n```", "```js\nconst imageSource = this.$canvas.toDataURL('image/png');\nlet att = document.createAttribute('href');\natt.value = imageSource.replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\nthis.$downloadButton.setAttributeNode(att);\n```", "```js\nif(!this.$imageInput.files[0]) {\n  this.$imageInput.parentElement.classList.add('has-error');\n  return;\n}\nif(this.$bottomTextInput.value === '') {\n  this.$imageInput.parentElement.classList.remove('has-error');\n  this.$bottomTextInput.parentElement.classList.add('has-error');\n  return;\n}\nthis.$imageInput.parentElement.classList.remove('has-error');\nthis.$bottomTextInput.parentElement.classList.remove('has-error');\n```", "```js\n<div class=\"has-error\" style=\"display: none;\"></div>\n```", "```js\nresizeCanvas(canvasHeight, canvasWidth) {\n  let height = canvasHeight;\n  let width = canvasWidth;\n  this.$canvas.style.height = `${height}px`;\n  this.$canvas.style.width = `${width}px`;\n  while(height > Math.min(1000, deviceWidth-30) && width > Math.min(1000, deviceWidth-30)) {\n    height /= 2;\n    width /= 2;\n    this.$canvas.style.height = `${height}px`;\n    this.$canvas.style.width = `${width}px`;\n  }\n}\n```"]