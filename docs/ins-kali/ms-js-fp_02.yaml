- en: Thinking Functionally - A First Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性思维 - 第一个例子
- en: In [chapter 1](395f5897-0ecc-4841-86ed-21521e148beb.xhtml), *Becoming Functional
    - Several Questions*, we went over what FP is, mentioned some advantages of applying
    it, and listed some tools we'd be needing in JS... but let's now leave theory
    behind, and start out by considering a simple problem, and how to solve it in
    a functional way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](395f5897-0ecc-4841-86ed-21521e148beb.xhtml)中，*成为功能性 - 几个问题*，我们讨论了FP是什么，提到了应用它的一些优势，并列出了一些我们在JS中需要的工具...但现在让我们把理论抛在脑后，从考虑一个简单的问题开始，以及如何以功能性的方式解决它。
- en: 'In this chapter, we will see:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将看到：
- en: A simple, common, e-commerce related problem
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的、常见的、与电子商务相关的问题
- en: Several usual ways to solve it, with their associated defects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用它们相关的缺陷解决它的几种常见方法
- en: A way to solve the problem by looking at it functionally
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过功能性的方式解决问题的方法
- en: A higher-order solution, which can be applied to other problems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个高阶解决方案，可以应用到其他问题上
- en: How to do unit testing for the functional solutions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何对功能性解决方案进行单元测试
- en: In future chapters, We'll be coming back to some of the topics listed here,
    so we won't be getting very much into details. We'll just show how FP can give
    a different outlook for our problem, and leave further details for afterward.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的章节中，我们将回到这里列出的一些主题，所以我们不会深入细节。我们只会展示FP如何为我们的问题提供不同的观点，并留下更多细节以后再讨论。
- en: The problem - do something only once
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题 - 只做一次某事
- en: 'Let''s consider a simple, but common situation. You have developed an e-commerce
    site: the user can fill their shopping cart, and at the end, they must click on
    a BILL ME button, so their credit card will be charged. However, the user shouldn''t
    click twice (or more) or they would be billed several times.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单但常见的情况。你开发了一个电子商务网站：用户可以填写他们的购物车，最后，他们必须点击一个“账单”按钮，这样他们的信用卡就会被收费。然而，用户不应该点击两次（或更多），否则他们将被多次计费。
- en: 'The HTML part of your application might have something like this, somewhere:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序的HTML部分可能会有这样的东西：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And, among the scripts you''d have something similar to this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，在你的脚本中，你可能会有类似这样的东西：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Assigning the events handler directly in HTML, the way I did it, isn't recommended.
    Rather, in *unobtrusive* fashion, you should assign the handler through code.
    So... *Do as I say, not as I do*!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在HTML中分配事件处理程序，就像我做的那样，是不推荐的。相反，在*不显眼*的方式中，你应该通过代码分配处理程序。所以... *说话要做到，不要做到我做的那样*！
- en: This is a very barebones explanation of the problem and your web page, but it's
    enough for our purposes. Let's now get to think about ways of avoiding repeated
    clicks on that button... *How can we manage to avoid the user clicking more than
    once?*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是对问题和你的网页的一个非常简单的解释，但对我们的目的来说已经足够了。现在让我们考虑一下如何避免重复点击那个按钮... *我们如何能够避免用户点击超过一次？*
- en: Some bad solutions
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些不好的解决方案
- en: OK, how many ways can you think of, in order to solve our problem? Let's go
    over several solutions, and analyze their quality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你能想到多少种方法来解决我们的问题？让我们讨论几种解决方案，并分析它们的质量。
- en: 'Solution #1 - hope for the best!'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃1 - 希望一切顺利！
- en: 'How can we solve the problem? The first *solution* may seem like a joke: do
    nothing, tell the user *not* to click twice, and hope for the best! Your page
    might look as Figure 2.1.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题？第一个*解决方案*可能看起来像是一个笑话：什么都不做，告诉用户*不要*点击两次，然后希望一切顺利！你的页面可能看起来像图2.1。
- en: '![](assets/dee3094d-17b8-4d14-8b95-e3d3145d180a.png)Figure 2.1\. An actual
    screenshot of a page, just warning you against clicking more than once'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/dee3094d-17b8-4d14-8b95-e3d3145d180a.png)图2.1\. 页面的实际截图，只是警告您不要点击两次'
- en: This is a weasel way of avoiding the problem, but I've seen several websites
    that just warn the user about the risks of clicking more than once (see Figure
    2.1) and actually do nothing to prevent the situation... *the user got billed
    twice? we warned them... it's their fault!* Your solution might simply look as
    the following code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个回避问题的狡猾方法，但我见过一些网站只是警告用户不要多次点击的风险（见图2.1），实际上并没有采取任何措施来防止这种情况... *用户被收费两次？我们警告过他们了...这是他们的错！*你的解决方案可能看起来就像下面的代码。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: OK, so this isn't actually a solution; let's move on to more serious proposals...
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这实际上不是一个解决方案；让我们继续考虑更严肃的提议...
- en: 'Solution #2 - use a global flag'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃2 - 使用全局标志
- en: 'The solution most people would probably think of first, is using some global
    variable to record whether the user has already clicked on the button. You''d
    define a flag named something like `clicked`, initialized with `false`. When the
    user clicks on the button, if `clicked` was `false`, you change it to `true`,
    and execute the function; otherwise, you don''t do anything at all:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人可能首先想到的解决方案是使用一些全局变量来记录用户是否已经点击了按钮。你可以定义一个名为`clicked`的标志，初始化为`false`。当用户点击按钮时，如果`clicked`是`false`，你就把它改为`true`，并执行该函数；否则，你根本不做任何事情：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For more good reasons NOT to use global variables,
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于不使用全局变量的更多好理由，
- en: read [http://wiki.c2.com/?GlobalVariablesAreBad](http://wiki.c2.com/?GlobalVariablesAreBad).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读[http://wiki.c2.com/?GlobalVariablesAreBad](http://wiki.c2.com/?GlobalVariablesAreBad)。
- en: 'This obviously works, but it has several problems that must be addressed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然有效，但有几个问题必须解决：
- en: You are using a global variable, and you could change its value by accident.
    Global variables aren't a good idea, neither in JS nor in other languages.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在使用一个全局变量，你可能会意外地改变它的值。全局变量不是一个好主意，无论是在JS还是其他语言中。
- en: You must also remember to re-initialize it to `false` when the user starts buying
    again. If you don't, the user won't be able to do a second buy, because paying
    will have become impossible.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户重新开始购买时，你还必须记得重新将其初始化为`false`。如果你不这样做，用户将无法进行第二次购买，因为支付将变得不可能。
- en: You will have difficulties testing this code, because it depends on external
    things (that is, the `clicked` variable).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将很难测试这段代码，因为它依赖于外部事物（也就是`clicked`变量）。
- en: So, this isn't a very good solution... let's keep thinking!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这不是一个很好的解决方案...让我们继续思考！
- en: 'Solution #3 - remove the handler'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃3 - 移除处理程序
- en: 'We may go for a lateral kind of solution, and instead of having the function
    avoid repeated clicks, we might just remove the possibility of clicking altogether:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采用一种侧面的解决方案，而不是让函数避免重复点击，我们可能只是完全删除点击的可能性：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This solution also has some problems:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案也有一些问题：
- en: The code is tightly coupled to the button, so you won't be able to reuse it
    elsewhere
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码与按钮紧密耦合，因此您将无法在其他地方重用它
- en: You must remember to reset the handler, otherwise the user won't be able to
    make a second buy
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须记住重置处理程序，否则用户将无法进行第二次购买
- en: Testing will also be harder, because you'll have to provide some DOM elements
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试也会更加困难，因为您将不得不提供一些DOM元素
- en: 'We can enhance this solution a bit, and avoid coupling the function to the
    button, by providing the latter''s ID as an extra argument in the call. (This
    idea can also be applied to some of the following solutions.) The HTML part would
    be:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以稍微改进这个解决方案，并通过在调用中提供后者的ID作为额外参数来避免将函数与按钮耦合在一起。（这个想法也可以应用于以下一些解决方案。）HTML部分将是：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '(note the extra argument) and the called function would be:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: （注意额外的参数）和被调用的函数将是：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This solution is somewhat better. But, in essence, we are still using a global
    element: not a variable, but the `onclick` value. So, despite the enhancement,
    this isn''t a very good solution either. Let''s move on.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案有点好。但是，本质上，我们仍然使用全局元素：不是变量，而是`onclick`值。因此，尽管有增强，这也不是一个很好的解决方案。让我们继续。
- en: 'Solution #4 - change the handle'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃4-更改处理程序
- en: 'A variant to the previous solution would be not removing the click function,
    and rather assign a new one instead. We are using functions as first class objects
    here, when we assign the `alreadyBilled()` function to the click event:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对先前解决方案的变体将不是删除单击函数，而是改为分配一个新函数。当我们将`alreadyBilled()`函数分配给单击事件时，我们在这里使用函数作为一等对象：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There''s a good point to this solution: if the user clicks a second time, they''ll
    get a warning not to do that, but they won''t be billed again. (From the point
    of view of the user experience, it''s better.) However, this solution still has
    the very same objections as the previous one (code coupled to the button, need
    to reset the handler, harder testing), so we won''t consider it to be quite good
    anyway.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '这个解决方案有一个好处：如果用户第二次点击，他们会收到一个警告，不要这样做，但他们不会再次被收费。（从用户体验的角度来看，这更好。）但是，这个解决方案仍然有与前一个相同的异议（代码与按钮耦合在一起，需要重置处理程序，更难的测试），所以我们不认为它很好。 '
- en: 'Solution #5 - disable the button'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃5-禁用按钮
- en: 'A similar idea: instead of removing the event handler, disable the button,
    so the user won''t be able to click. You might have a function like the following.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似的想法：不要删除事件处理程序，而是禁用按钮，这样用户就无法单击。您可能会有一个类似以下的函数。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This also works, but we still have objections as for the previous solutions
    (coupling the code to the button, need to re-enable the button, harder testing),
    so we don't like this solution either.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这也有效，但我们仍然对先前的解决方案有异议（将代码与按钮耦合在一起，需要重新启用按钮，更难的测试），所以我们也不喜欢这个解决方案。
- en: 'Solution #6 - redefine the handler'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃6-重新定义处理程序
- en: 'Another idea: instead of changing anything in the button, let''s have the event
    handler change itself. The trick is in the second line; by assigning a new value
    to the `billTheUser` variable, we are actually dynamically changing what the function
    does! The first time you call the function, it will do its thing... but it will
    also change itself out of existence, by giving its name to a new function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个想法：不要改变按钮中的任何内容，让事件处理程序自己改变。诀窍在第二行；通过为`billTheUser`变量分配一个新值，我们实际上动态地改变了函数的功能！第一次调用函数时，它会执行其操作...但它也会通过将其名称赋给一个新函数而使自己消失：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's a special trick in the solution. Functions are global, so the line `billTheUser=...`
    actually changes the function's inner workings; from that point on, `billTheUser`
    will be the new (null) function. This solution is still hard to test. Even worse,
    how would you restore the functionality of `billTheUser`, setting it back to its
    original objective?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案中有一个特殊的技巧。函数是全局的，所以`billTheUser=...`这一行实际上改变了函数的内部工作方式；从那时起，`billTheUser`将成为新的（空）函数。这个解决方案仍然很难测试。更糟糕的是，您如何恢复`billTheUser`的功能，将其设置回原来的目标？
- en: 'Solution #7- use a local flag'
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案＃7-使用本地标志
- en: 'We can go back to the idea of using a flag, but instead of making it global
    (which was our main objection) we can use a *Immediately Invoked Function Expression
    (IIFE)*: we''ll see more on this in [Chapter 3](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml),
    *Starting Out with Functions - A Core Concept*, and in [Chapter 11](24b391f7-abaf-439e-9bfc-a71d989cfd48.xhtml),
    *Implementing Design Patterns - The Functional Way*. With this, we can use a closure,
    so `clicked` will be local to the function, and not visible anywhere else:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到使用标志的想法，但是不要使其全局（这是我们的主要异议），我们可以使用*立即调用的函数表达式（IIFE）*：我们将在[第3章](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml)中看到更多关于这一点，*从函数开始-核心概念*，以及在[第11章](24b391f7-abaf-439e-9bfc-a71d989cfd48.xhtml)中，*实施设计模式-功能方式*。通过这样做，我们可以使用闭包，因此`clicked`将局部于函数，而不会在任何其他地方可见：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See how `clicked` gets its initial `false` value, from the call at the end.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`clicked`如何从最后的调用中获得其初始值`false`。
- en: This solution is along the lines of the global variable solution, but using
    a private, local variable is an enhancement. About the only objection we could
    find, is that you'll have to rework every function that needs to be called only
    once, to work in this fashion. (And, as we'll see in the following section, our
    FP solution is similar in some ways to it.) OK, it's not too hard to do, but don't
    forget the *Don't Repeat Yourself (D.R.Y)* advice!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案沿着全局变量解决方案的思路，但是使用私有的本地变量是一种增强。我们唯一找到的异议是，您将不得不重新设计需要以这种方式工作的每个函数。（正如我们将在下一节中看到的那样，我们的FP解决方案在某些方面与它相似。）好吧，这并不难做，但不要忘记*不要重复自己（D.R.Y）*的建议！
- en: A functional solution
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个功能性的解决方案
- en: 'Let''s try to be more general: after all, requiring that some function or other
    be executed only once, isn''t that outlandish, and may be required elsewhere!
    Let''s lay down some principles:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试更通用一些：毕竟，要求某个函数或其他函数只执行一次，这并不奇怪，而且可能在其他地方也需要！让我们建立一些原则：
- en: The original function (the one that may be called only once) should do that
    thing, and no other
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始函数（只能调用一次的函数）应该只执行那件事，而不是其他事情
- en: We don't want to modify the original function in any way
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不想以任何方式修改原始函数
- en: We need to have a new function that will call the original one only once
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个新函数，只能调用原始函数一次
- en: We want a general solution that we can apply to any number of original functions
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望有一个通用解决方案，可以应用于任意数量的原始函数
- en: The first principle listed previously is the *single responsibility principle*
    (the *S* in S.O.L.I.D.), which states that every function should be responsible
    over a single functionality. For more on S.O.L.I.D., check the article by *Uncle
    Bob* (Robert C. Martin, who wrote the five principles) at [http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 先前列出的第一个原则是*单一职责原则*（S.O.L.I.D.中的*S*），它规定每个函数应负责单一功能。有关S.O.L.I.D.的更多信息，请查看*Uncle
    Bob*（编写了这五个原则的Robert C. Martin）的文章[http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod](http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod)。
- en: Can we do it? Yes; and we'll write a *higher-order function*, which we'll be
    able to apply to any function, to produce a new function that will work only once.
    Let's see how!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能做到吗？是的；我们将编写一个*高阶函数*，我们将能够将其应用于任何函数，以生成一个只能工作一次的新函数。让我们看看！
- en: A higher-order solution
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个高阶解决方案
- en: If we don't want to modify the original function, we'll create a higher-order
    function, which we'll, inspiredly, name `once()`. This function will receive a
    function as a parameter and will return a new function, which will work only a
    single time. (We'll be seeing more of higher-order functions in [Chapter 6](9f36fbcb-da30-4a75-9b47-01cd3427633e.xhtml),
    *Producing Functions - Higher-Order Functions*; in particular, see section *Doing
    things once, revisited*.)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想修改原始函数，我们将创建一个高阶函数，我们将其有灵感地命名为`once()`。该函数将接收一个函数作为参数，并将返回一个只能工作一次的新函数。（我们将在[第6章](9f36fbcb-da30-4a75-9b47-01cd3427633e.xhtml)中看到更多的高阶函数；特别是，请参阅*Doing
    things once, revisited*部分。）
- en: Underscore and LoDash already has a similar function, invoked as `_.once()`.
    Ramda also provides `R.once()`, and most FP libraries include similar functionality,
    so you wouldn't have to program it on your own.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Underscore和LoDash已经有一个类似的函数，被调用为`_.once()`。Ramda还提供了`R.once()`，大多数FP库都包含类似的功能，因此您不必自己编写它。
- en: 'Our `once()` function way seems imposing at first, but as you get accustomed
    to working in FP fashion, you''ll get used to this sort of code, and will find
    it to be quite understandable:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`once()`函数方式一开始似乎有些强制，但是当您习惯以FP方式工作时，您会习惯这种代码，并发现它非常易懂。
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s go over some of the finer points of this function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个函数的一些要点：
- en: The first line shows that `once()` receives a function (`fn()`) as its parameter.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行显示`once()`接收一个函数（`fn()`）作为其参数。
- en: 'We are defining an internal, private `done` variable, by taking advantage of
    a closure, as in Solution #7, previously. We opted *not* to call it `clicked`,
    as previously, because you don''t necessarily need to click on a button to call
    the function; we went for a more general term.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过利用闭包定义了一个内部的私有`done`变量，就像之前的解决方案#7一样。我们选择*不*将其称为`clicked`，因为您不一定需要点击按钮才能调用该函数；我们选择了一个更通用的术语。
- en: The line `return (...args) => ...` says that `once()` will return a function,
    with some (0, 1, or more) parameters. Note that we are using the spread syntax
    we saw in [Chapter 1](395f5897-0ecc-4841-86ed-21521e148beb.xhtml), *Becoming Functional
    - Several Questions*. With older versions of JS you'd have to work with the `arguments`
    object; see [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments)
    for more on that. The ES8 way is simpler and shorter!
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return (...args) => ...`这一行表示`once()`将返回一个带有一些（0、1或更多）参数的函数。请注意，我们正在使用我们在[第1章](395f5897-0ecc-4841-86ed-21521e148beb.xhtml)中看到的扩展语法，*成为函数式
    - 几个问题*。在较旧版本的JS中，您必须使用`arguments`对象；有关更多信息，请参阅[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/arguments)。ES8的方式更简单更短！'
- en: We assign `done = true` before calling `fn()`, just in case that function throws
    an exception. Of course, if you don't want to disable the function unless it has
    successfully ended, then you could move the assignment just below the `fn()` call.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用`fn()`之前，我们先赋值`done = true`，以防该函数抛出异常。当然，如果您不想在函数成功结束之前禁用该函数，那么您可以将赋值移到`fn()`调用的下面。
- en: After the setting is done, we finally call the original function. Note the use
    of the spread operator to pass along whatever parameters the original `fn()` had.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置完成后，我们最终调用原始函数。请注意使用扩展运算符传递原始`fn()`的任何参数。
- en: 'So, how would we use it? We don''t even need to store the newly generated function
    in any place; we can simply write the `onclick` method, as shown as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们该如何使用它呢？我们甚至不需要将新生成的函数存储在任何地方；我们可以简单地编写`onclick`方法，如下所示：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Pay close attention to the syntax! When the user clicks on the button, the function
    that gets called with the `(some, sales, data)` argument isn't `billTheUser()`,
    but rather the result of having called `once()` with `billTheUser` as a parameter.
    That result is the one that can be called only a single time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意语法！当用户点击按钮时，使用`(some, sales, data)`参数调用的函数不是`billTheUser()`，而是使用`billTheUser`作为参数调用`once()`的结果。该结果只能被调用一次。
- en: Note that our `once()` function uses functions as first-class objects, arrow
    functions, closures, and the spread operator; back in [Chapter 1](395f5897-0ecc-4841-86ed-21521e148beb.xhtml),
    *Becoming Functional - Several Questions*, we said we'd be needing those, so we're
    keeping our word! All we are missing here from that chapter is recursion... but
    as the Rolling Stones sing, *You Can't Always Get What You Want!*
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的`once()`函数使用函数作为一等对象、箭头函数、闭包和展开操作符；回到[第1章](395f5897-0ecc-4841-86ed-21521e148beb.xhtml)，*成为函数式编程
    - 几个问题*，我们说我们会需要这些，所以我们信守承诺！我们在这一章中唯一缺少的是递归...但正如滚石乐队唱的那样，*你并不总是能得到你想要的！*
- en: Testing the solution manually
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动测试解决方案
- en: 'We can run a simple test:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行一个简单的测试：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Check out the results at CodePen, or see Figure 2.2:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在CodePen上查看结果，或者查看图2.2：
- en: '![](assets/9da8b8c3-1f00-43a6-aa85-f5775c217d61.png)Figure 2.2 - Testing our
    once() higher-order function'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 - 测试我们的once()高阶函数
- en: Testing the solution automatically
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动测试解决方案
- en: 'Running tests by hand is no good; it gets tiresome, boring, and that leads,
    after time, to not running the tests any longer. Let''s do better, and write some
    automatic tests with Jasmine. Following the instructions over at [https://jasmine.github.io/pages/getting_started.html](https://jasmine.github.io/pages/getting_started.html),
    I set up a standalone runner:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 手动运行测试不好；它会变得烦人、无聊，久而久之，就不再运行测试了。让我们做得更好一些，用Jasmine编写一些自动测试。按照[https://jasmine.github.io/pages/getting_started.html](https://jasmine.github.io/pages/getting_started.html)上的说明，我设置了一个独立的运行器：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `src/once.js` file has the `once()` definition that we just saw, and `tests/once.test.js`
    has the actual suite of tests:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/once.js`文件中有我们刚刚看到的`once()`定义，`tests/once.test.js`中有实际的测试套件：'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There are several points to note here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几点需要注意：
- en: In order to spy on a function, it must be associated with an object. (Alternatively,
    you can also directly create a spy using Jasmine's `.createSpy()` method.) Global
    functions are associated with the window object, so `window.fn` is a way of saying
    that `fn` is actually global.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了监听一个函数，它必须与一个对象相关联。（或者，你也可以直接使用Jasmine的`.createSpy()`方法直接创建一个spy。）全局函数与window对象相关联，所以`window.fn`是一种说法，即`fn`实际上是全局的。
- en: When you spy on a function, Jasmine intercepts your calls and registers that
    the function was called, with what arguments, and how many times it was called.
    So, for all we care, `window.fn` could simply be `null`, because it will never
    be executed.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你对一个函数进行监听时，Jasmine会拦截你的调用并注册函数被调用的次数、使用的参数以及调用的次数。所以，就我们所关心的而言，`window.fn`可以简单地是`null`，因为它永远不会被执行。
- en: The first test only checks that if we call the function several times, it gets
    called that number of times. This is trivial, but if that didn't happen, we'd
    be doing something really wrong!
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个测试只检查如果我们多次调用函数，它会被调用相应的次数。这很琐碎，但如果这没有发生，我们肯定做错了什么！
- en: In the second group of tests, we want to see that the `once()`-ed function (`window.onceFn()`)
    gets called, but only once. So, we tell Jasmine to spy on `onceFn`, but let calls
    pass through. Any calls to `fn()` will also get counted. In our case, as expected,
    despite calling `onceFn()` three times, `fn()` gets called only once.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二组测试中，我们想要看到`once()`函数(`window.onceFn()`)被调用，但只调用一次。所以，我们告诉Jasmine监听`onceFn`，但让调用通过。对`fn()`的任何调用也会被计数。在我们的情况下，尽管调用了`onceFn()`三次，`fn()`只被调用了一次，这是我们预期的。
- en: 'We can see the results in Figure 2.3:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图2.3中看到结果：
- en: '![](assets/6e6a785f-7021-4ca4-96ec-08040b7ea624.png)Figure 2.3 - Running automatic
    tests on our function, with Jasmine'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 - 在Jasmine上运行自动测试我们的函数
- en: An even better solution
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个更好的解决方案
- en: 'In one of the previous solutions, we mentioned that it would be a good idea
    to do something every time after the first, and not silently ignoring the user''s
    clicks. We''ll write a new higher-order function, that takes a second parameter;
    a function to be called every time from the second call onward:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的解决方案中，我们提到每次第一次之后都做一些事情而不是默默地忽略用户的点击是一个好主意。我们将编写一个新的高阶函数，它接受第二个参数；一个从第二次调用开始每次都要调用的函数：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have ventured further in higher-order functions; `onceAndAfter` takes *two*
    functions as parameters and produces a third one, which includes the other two
    within.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在高阶函数中更进一步；`onceAndAfter`接受*两个*函数作为参数，并产生一个包含另外两个函数的第三个函数。
- en: You could make `onceAndAfter` more powerful, by giving a default value for `g`,
    along the lines of `const onceAndAfter = (f, g = ()=>{})` ... so if you didn't
    want to specify the second function, it would still work fine, because it would
    call a *do nothing* function, instead of causing an error.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为`g`提供一个默认值来使`onceAndAfter`更加强大，类似于`const onceAndAfter = (f, g = ()=>{})`...所以如果你不想指定第二个函数，它仍然可以正常工作，因为它会调用一个*什么都不做*的函数，而不是引起错误。
- en: 'We can do a quick-and-dirty test, along with the same lines as we did earlier:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行一个快速而简单的测试，与之前我们做的类似：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Writing a test for this new function isn''t hard, only a bit longer:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个新函数编写测试并不难，只是有点长：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that we always check that `func1` is called only once. Similarly, we
    check `func2`; the count of calls starts at zero (the time that `func1` is called),
    and from then on, it goes up by one on each call.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们总是检查`func1`只被调用一次。同样，我们检查`func2`；调用次数从零开始（`func1`被调用的时间），然后每次调用都会增加一次。
- en: Questions
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: '2.1\. **No extra variables**: Our functional implementation required using
    an extra variable, `done`, to mark whether the function had already been called.
    Not that it matters... but could you make do without using any extra variables?
    Note that we aren''t telling you *not* to use any variables; it''s just a matter
    of not adding any new ones, such as `done`, and only as an exercise!'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 2.1\. **没有额外的变量**：我们的函数式实现需要使用一个额外的变量`done`来标记函数是否已经被调用。这并不重要...但你能在不使用任何额外变量的情况下做到吗？请注意，我们并没有告诉你*不*使用任何变量；这只是一个不添加新变量，比如`done`，只是一个练习！
- en: '2.2\. **Alternating functions**: In the spirit of our `onceAndAfter()` function,
    could you write an `alternator()` higher-order function that gets two functions
    as arguments, and on each call, alternatively calls one and another? The expected
    behavior should be as in the following example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 2.2\. **交替函数**：在我们的`onceAndAfter()`函数的精神下，你能否编写一个`alternator()`高阶函数，它接受两个函数作为参数，并在每次调用时交替调用一个和另一个？预期的行为应该如下例所示：
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '2.3\. **Everything has a limit!**: As an extension of `once()`, could you write
    a higher-order function `thisManyTimes(fn,n)` that would let you call the `fn()`
    function up to `n` times, but would afterwards do nothing? To give an example,
    `once(fn)` and `thisManyTimes`(fn,1) would produce functions that behave in exactly
    the same way.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 2.3\. **一切都有限制！**：作为`once()`的扩展，你能否编写一个高阶函数`thisManyTimes(fn,n)`，让你可以调用`fn()`函数最多`n`次，但之后不做任何操作？举个例子，`once(fn)`和`thisManyTimes`(fn,1)会产生完全相同行为的函数。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've seen a common, simple problem, based on a real-life situation,
    and after analyzing several usual ways of solving that, we went for a *functional
    thinking* solution. We saw how to apply FP to our problem, and we also found a
    more general higher-order way that we could apply to similar problems, with no
    further code changes. We saw how to write unit tests for our code, to round out
    the development job. Finally, we even produced an even better solution (from the
    point of view of the user experience) and saw how to code it and how to unit test
    it.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们看到了一个常见的简单问题，基于一个真实的情况，并在分析了几种通常的解决方法之后，我们选择了一个*功能性思维*的解决方案。我们看到了如何将FP应用到我们的问题上，我们还找到了一个更一般的高阶方法，我们可以将其应用到类似的问题上，而无需进行进一步的代码更改。我们看到了如何为我们的代码编写单元测试，以完成开发工作。最后，我们甚至提出了一个更好的解决方案（从用户体验的角度来看），并看到了如何编写代码以及如何对其进行单元测试。
- en: In the next [chapter 3](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml), *Starting
    Out with Functions - A Core Concept*, we'll be delving more deeply into functions,
    which are at the core of all FP.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章[第3章](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml)中，*从函数开始-核心概念*，我们将更深入地探讨函数，这是所有FP的核心。
