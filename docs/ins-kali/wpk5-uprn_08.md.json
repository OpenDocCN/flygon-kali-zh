["```js\n|- webpack.config.js\n  |- package.json\n  |- /src\n  |- index.js\n  |- ref.json\n```", "```js\nnpm init -y\nnpm install --save-dev webpack lodash\n```", "```js\n[\n  {\n    \"num\": 1,\n    \"word\": \"One\"\n  },\n  {\n    \"num\": 2,\n    \"word\": \"Two\"\n  },\n  {\n    \"num\": 3,\n    \"word\": \"Three\"\n  },\n  {\n    \"num\": 4,\n    \"word\": \"Four\"\n  },\n  {\n    \"num\": 5,\n    \"word\": \"Five\"\n  },\n  {\n    \"num\": 0,\n    \"word\": \"Zero\"\n  }\n]\n```", "```js\nimport _ from 'lodash';\nimport numRef from './ref.json';\nexport function numToWord(num) {\n  return _.reduce(numRef, (accum, ref) => {\n  return ref.num === num ? ref.word : accum;\n }, '');\n}\nexport function wordToNum(word) {\n  return _.reduce(numRef, (accum, ref) => {\n  return ref.word === word && word.toLowerCase() ? ref.num : accum;\n  }, -1);\n}\n```", "```js\n import * as numbersToText from 'numbers-to-text';\n// ...\n numbersToText.wordToNum('Two'); \n```", "```js\n const numbersToText = require('numbersToText');\n// ...\n```", "```js\nnumbersToText.wordToNum('Two');\nAMD module requires:\nrequire(['numbersToText'], function (numbersToText) {\n numbersToText.wordToNum('Two');\n });\n```", "```js\n<!doctype html>\n <html>\n   ...\n   <script src=\"img/webpack-numbers\"></script>\n   <script>\n    // Global variable\n    numbersToText.wordToNum('Five')\n    // Property in the window object\n    window.numbersToText.wordToNum('Five')\n   </script>\n </html>\n```", "```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n   path: path.resolve(__dirname, 'dist'),\n   filename: 'numbers-to-text.js'\n  }\n};\n```", "```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n   path: path.resolve(__dirname, 'dist'),\n   filename: 'numbers-to-text.js'\n   }\n  },\n   externals: {\n     lodash: {\n      commonjs: 'lodash',\n      commonjs2: 'lodash',\n      amd: 'lodash',\n      root: '_'\n    }\n  }\n};\n```", "```js\nmodule.exports = {\n externals: [\n   'library/one',\n   'library/two',\n   // Everything that starts with \"library/\"\n   /^library\\/.+$/\n  ]\n};\n```", "```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'numbers-to-text.js'\n    filename: 'numbers-to-text.js',\n library: 'numbersToText'\n },\n externals: {\n lodash: {\n commonjs: 'lodash',\n commonjs2: 'lodash',\n amd: 'lodash',\n root: '_'\n }\n }\n};\n```", "```js\nconst path = require('path');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n   path: path.resolve(__dirname, 'dist'),\n   filename: 'numbers-to-text.js',\n   library: 'numbersToText'\n   library: 'numbersToText',\n   libraryTarget: 'umd'\n },\n externals: {\n   lodash: {\n    commonjs: 'lodash',\n    commonjs2: 'lodash',\n    amd: 'lodash',\n    root: '_'\n   }\n  }\n};\n```", "```js\n{\n ...\n \"main\": \"dist/numbers-to-text.js\",\n ...\n }\n Or, to add as standard module as per this guide:\n{\n ...\n \"module\": \"src/index.js\",\n ...\n }\n```", "```js\nmodule.exports = {\n //...\n module: {\n rules: [\n {\n   test: /\\.js$/,\n   use: [\n {\n    loader: path.resolve('path/to/loader.js'),\n    options: {/* ... */}\n    }\n   ]\n  }\n ]\n }\n};\n```", "```js\nmodule.exports = {\n  resolveLoader: {\n    modules: [\n     'node_modules',\n     path.resolve(__dirname, 'loaders')\n   ]\n  }\n};\n```", "```js\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      {\n        test: /\\.js/,\n        use: [\n         'bar-loader',\n         'foo-loader'\n        ]\n      }\n    ]\n   }\n };\n```", "```js\nimport { getOptions } from 'loader-utils';\n import validateOptions from 'schema-utils';\nconst schema = {\n  type: 'object',\n  properties: {\n    test: {\n     type: 'string'\n    }\n  }\n };\nexport default function(source) {\n  const options = getOptions(this);\n  validateOptions(schema, options, 'Example Loader');\n```", "```js\nreturn `export default ${ JSON.stringify(source) }`;\n }\n```", "```js\nimport path from 'path';\nexport default function(source) {\n  var callback = this.async();\n  var headerPath = path.resolve('header.js');\n  this.addDependency(headerPath);\n  fs.readFile(headerPath, 'utf-8', function(err, header) {\n    if(err) return callback(err);\n    callback(null, header + '\\n' + source);\n  });\n }\n```", "```js\n{\n \"peerDependencies\": {\n   \"node-sass\": \"^4.0.0\"\n  }\n}\n```", "```js\nnpm install --save-dev jest babel-jest babel-preset-env \n```", "```js\n.babelrc\n{\n \"presets\": [[\n \"env\",\n {\n \"targets\": {\n \"node\": \"4\"\n }\n }\n ]]\n }\n```", "```js\nimport { getOptions } from 'loader-utils';\nexport default function loader(source) {\n const options = getOptions(this);\nsource = source.replace(/\\[name\\]/g, options.name);\nreturn `export default ${ JSON.stringify(source) }`;\n }\n```", "```js\nHi Reader!\n```", "```js\nnpm install --save-dev webpack memory-fs\n```", "```js\nimport path from 'path';\n import webpack from 'webpack';\n import memoryfs from 'memory-fs';\nexport default (fixture, options = {}) => {\n const compiler = webpack({\n  context: __dirname,\n  entry: `./${fixture}`,\n  output: {\n   path: path.resolve(__dirname),\n   filename: 'bundle.js',\n },\n module: {\n  rules: [{\n  test: /\\.txt$/,\n  use: {\n   loader: path.resolve(__dirname, '../src/loader.js'),\n   options: {\n     name: 'Alice'\n    }\n   }\n }]\n }\n});\ncompiler.outputFileSystem = new memoryfs();\nreturn new Promise((resolve, reject) => {\n  compiler.run((err, stats) => {\n if (err) reject(err);\n if (stats.hasErrors()) reject(new Error(stats.toJson().errors));\nresolve(stats);\n });\n});\n};\n```", "```js\nimport compiler from './compiler.js';\ntest('Inserts name and outputs JavaScript', async () => {\n const stats = await compiler('example.txt');\n const output = stats.toJson().modules[0].source;\nexpect(output).toBe('export default \"Hi Reader!\\\\n\"');\n });\n package.json\n{\n \"scripts\": {\n  \"test\": \"jest\"\n }\n }\n```", "```js\n Inserts name and outputs JavaScript (229ms)\nTest Suites: 1 passed, 1 total\nTests: 1 passed, 1 total\nSnapshots: 0 total\nTime: 1.853s, estimated 2s\nRan all test suites.\n```", "```js\nfunction foo() {\n  return 5;\n}\nfunction bar() {\n  return function() {\n  // ...\n }\n}\nmodule.exports = function() {\n // ...\n}\n```", "```js\nvar patched = function() {\n if(patchedBindings[binding]) {\n  return patchedBindings[binding].apply(this, arguments);\n }\n else {\n  return f.apply(this, arguments);\n }\n};\n patched.prototype = f.prototype;\n```", "```js\nvar moduleEval = function(some code) {\n return eval(some code);\n }\n```", "```js\nbindings.forEach(function(binding) {\n // Get the updated function instance\n var f = eval(binding);\n// We need to rectify the function in the original module so\n // it references any of the original state. Strip the name\n // and simply eval it.\n var funcCode = (\n '(' + f.toString().replace(/^function \\w+\\(/, 'function (') + ')'\n );\n patchedBindings[binding] = module.hot.data.moduleEval(funcCode);\n });\n```", "```js\nfunction __eval() {\n var user = getLastUser();\n console.log(findAllDataOn(user));\n }\n```"]