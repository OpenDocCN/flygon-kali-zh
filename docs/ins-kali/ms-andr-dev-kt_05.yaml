- en: Look and Feel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外观
- en: Nowadays, applications have a breathtaking visual appearance. This is something
    that makes your application unique and original. An eye pleasing appearance will
    make your application stand out in a field of similar applications, but it will
    also strongly appeal to your users and they are more likely to install and keep
    your app on their devices. In this chapter, we will show you how to make your
    application beautiful. We will introduce you to the secrets of Android UI theming!
    Our focus will only be on the visual aspect of Android applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序具有令人惊叹的视觉外观。这是使您的应用程序独特和原创的东西。令人愉悦的外观将使您的应用程序在类似应用程序的领域中脱颖而出，但它也将强烈吸引您的用户，他们更有可能在其设备上安装和保留您的应用程序。在本章中，我们将向您展示如何使您的应用程序变得美观。我们将向您介绍Android
    UI主题的秘密！我们的重点只会放在Android应用程序的视觉方面。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Themes and styles in Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android中的主题和样式
- en: Working with assets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用资产
- en: Custom fonts and coloring
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义字体和着色
- en: Button designs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮设计
- en: Animations and animation sets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画和动画集
- en: Themes in the Android Framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android框架中的主题
- en: In the last chapter, we established a connection between the main UI elements.
    Our application does not look like one until it gets some color. To get colors,
    we will start with the main application theme. We will extend one of the existing
    Android themes and override it with colors we like.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们建立了主要UI元素之间的连接。我们的应用程序在获得一些颜色之前并不像一个。要获得颜色，我们将从主应用程序主题开始。我们将扩展现有的Android主题之一，并用我们喜欢的颜色进行覆盖。
- en: 'Open `styles.xml`. Here, you will set the default theme defined for our application
    needs. We will also have several colors overridden. However, we will change the
    `parent` theme and customize it according to our wishes. We will update the theme
    according to the following example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`styles.xml`。在这里，您将为我们应用程序的需求设置默认主题。我们还将覆盖几种颜色。但是，我们将更改`parent`主题，并根据我们的意愿进行自定义。我们将根据以下示例更新主题：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We defined a theme that inherits from the `AppCompat` theme. The primary color
    represents the color for the application branding. The color's darker variant
    is `colorPrimaryDark`, while the UI controls colors that will be colored in `colorAccent`.
    We will also set the primary text color to black. The status bar will also use
    our primary branding color.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个从`AppCompat`主题继承的主题。主要颜色代表应用程序品牌的颜色。颜色的较暗变体是`colorPrimaryDark`，而将着色的UI控件颜色为`colorAccent`。我们还将主要文本颜色设置为黑色。状态栏也将使用我们的主要品牌颜色。
- en: 'Open the `colors.xml` file and define the colors we will use for the theme
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`colors.xml`文件，并定义我们将在主题中使用的颜色如下：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before you run the application to see your theme, make sure that the theme
    is actually applied. Update the `manifest` file with the following lines of code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序查看主题之前，请确保主题实际应用。使用以下代码更新`manifest`文件：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, update the color for the floating action button of `fragment_items` as
    follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还要更新`fragment_items`的浮动操作按钮的颜色如下：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The background tint attribute will make sure that the button has the same color
    as the status bar. Build and run the application. Congratulations, you have successfully
    branded your application in orange!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 背景色属性将确保按钮与状态栏具有相同的颜色。构建并运行应用程序。恭喜，您已成功将应用程序品牌定为橙色！
- en: Styles in Android
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android中的样式
- en: The theme we just defined represents style. All styles are defined in the `styles.xml`
    file. We will create several styles to demonstrate how easy it is for you to create
    styles and how powerful they are. You can define styles for buttons, text, or
    any other view. You can inherit styles too.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚定义的主题代表样式。所有样式都在`styles.xml`文件中定义。我们将创建几种样式，以演示您创建样式的简易性和它们的强大性。您可以为按钮、文本或任何其他视图定义样式。您也可以继承样式。
- en: 'For the purpose of styling, we will define the color palette that we will use
    in the application. Open your `colors.xml` file and extend it as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行样式设置，我们将定义应用程序中要使用的颜色调色板。打开您的`colors.xml`文件并扩展如下：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Pay attention to transparent colors! Observe the case of `white` color. Pure
    `white` color has the code `#ffffff` while the `40%` transparent white has the
    code `#64ffffff`. To achieve transparency, you can use the following values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意透明颜色！观察`白色`颜色的情况。纯`白色`颜色的代码为`#ffffff`，而`40%`透明的白色的代码为`#64ffffff`。要实现透明度，您可以使用以下值：
- en: '0% = #00'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '0% = #00'
- en: '10% = #16'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '10% = #16'
- en: '20% = #32'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '20% = #32'
- en: '30% = #48'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '30% = #48'
- en: '40% = #64'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '40% = #64'
- en: '50% = #80'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '50% = #80'
- en: '60% = #96'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '60% = #96'
- en: '70% = #112'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '70% = #112'
- en: '80% = #128'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '80% = #128'
- en: '90% = #144'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '90% = #144'
- en: 'Now that we have defined the color palette we will create our first styles.
    Open `styles.xml` and extend it:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了颜色调色板，我们将创建我们的第一个样式。打开`styles.xml`并扩展它：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We defined two styles. First that defines simple button. It has white text
    with letters of `16sp` in size. The second extends a first and adds the attribute
    for the background. We will create a selector so we can demonstrate you styles
    we defined. Since we do not have this resource yet, create `selector_button_green
    xml` in the `drawable resource` folder:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了两种样式。第一种定义了简单的按钮。它具有白色文本，字体大小为`16sp`。第二个扩展了第一个，并添加了背景属性。我们将创建一个选择器，以便演示我们定义的样式。由于我们还没有这个资源，请在`drawable
    resource`文件夹中创建`selector_button_green xml`：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We defined a selector. Selector is XML that describes visual behavior or the
    different states. We added a different color for the button's disabled state,
    color for states when the button is pressed, released, or when we do not have
    any interaction with it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个选择器。选择器是描述视觉行为或不同状态的XML。我们为按钮的禁用状态添加了不同的颜色，当按钮被按下、释放或我们没有与其进行任何交互时，我们也为其添加了颜色。
- en: 'To see what the buttons will look like, open `activity_todo` layout and for
    each button set the style:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 查看按钮的外观，打开`activity_todo`布局，并为每个按钮设置样式：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, run the application and open the Todo screen. Your screen should look
    like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行应用程序并打开`Todo`屏幕。您的屏幕应该是这样的：
- en: '![](img/bce22470-94fa-4995-9b9a-5af05b6f57da.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bce22470-94fa-4995-9b9a-5af05b6f57da.png)'
- en: 'If you press the buttons you will notice that the color has changed to a darker
    green. In  the next sections, we will even more improve these buttons even more
    by adding rounded edges but before that let''s create some more styles:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按下按钮，您会注意到颜色已经变成了深绿色。在接下来的部分，我们将通过添加圆角边缘来进一步改进这些按钮，但在此之前，让我们创建一些更多的样式：
- en: 'Add styles for input fields and for navigation drawers to your `styles.xml`:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为输入字段和导航抽屉在您的`styles.xml`中添加样式：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For input fields, we defined the color for the hint. Also we introduced one
    more selector drawable, `selector_button_grey`:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于输入字段，我们定义了提示的颜色。同时，我们引入了一个名为`selector_button_grey`的选择器可绘制对象：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For `note_title` on both screens (Note and Todo) add the style:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于两个屏幕（笔记和待办事项）上的`note_title`，添加样式：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For `note_content` add:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`note_content`添加：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For `adapter_navigation_drawer` layout apply the style to a button:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`adapter_navigation_drawer`布局，将样式应用于按钮：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That''s it! You styled your application! Now run it and take a look at all
    screens and navigation drawers:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您已经为您的应用程序添加了样式！现在运行它并查看所有屏幕和导航抽屉：
- en: '![](img/c918278a-815c-40f5-9727-e4c6b0d254de.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c918278a-815c-40f5-9727-e4c6b0d254de.png)'
- en: 'What do you think? Does the UI look nicer now? Observe the next screenshot
    too:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您觉得呢？UI现在看起来更好了吗？也观察下一个屏幕截图：
- en: '![](img/628914df-4308-4f98-94b7-c18cc0862535.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/628914df-4308-4f98-94b7-c18cc0862535.png)'
- en: Application now seems nice. Feel free to adjust the attributes and colors according
    to your desire. We are not done yet. We need some fonts to apply! In the next
    sections, we will deal with that.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在看起来很不错。随意根据您的愿望调整属性和颜色。我们还没有完成。我们需要一些字体来应用！在接下来的部分，我们将处理这个问题。
- en: Working with assets
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用资源文件
- en: The time has come that your application needs to work with raw resources. A
    good example of that is fonts. Each font application we use will be an individual
    file stored in the `assets` folder. The `assets` folder is a subdirectory of `main`
    directory or directory that represents the build variant. Besides fonts, it's
    common that here you store txt files, mp3, waw, mid, and similar. You can't store
    these types of files in the `res` directory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候让您的应用程序使用原始资源了。一个很好的例子就是字体。我们使用的每个字体应用都将是一个存储在`assets`文件夹中的单独文件。`assets`文件夹是`main`目录或代表构建变体的目录的子目录。除了字体之外，通常还会在这里存储txt文件，mp3，waw，mid等。您不能将这些类型的文件存储在`res`目录中。
- en: Using custom fonts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义字体
- en: Fonts are assets. So to provide some fonts for your application we need to copy
    them first. There are a lot of good free font resources. For example, Google Fonts.
    Download some fonts and copy them to your `assets` directory. If there is no `assets`
    directory create one. We will place our fonts in the `assets/fonts` directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 字体是资源。因此，为了为您的应用程序提供一些字体，我们首先需要复制它们。有很多好的免费字体资源。例如，Google Fonts。下载一些字体并将它们复制到您的`assets`目录中。如果没有`assets`目录，请创建一个。我们将把我们的字体放在`assets/fonts`目录中。
- en: 'In our examples, we will use `Exo`. `Exo` comes with the following `font` files:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用`Exo`。`Exo`带有以下`font`文件：
- en: '`Exo2-Black.ttf`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Black.ttf`'
- en: '`Exo2-BlackItalic.ttf`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-BlackItalic.ttf`'
- en: '`Exo2-Bold.ttf`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Bold.ttf`'
- en: '`Exo2-BoldItalic.ttf`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-BoldItalic.ttf`'
- en: '`Exo2-ExtraBold.ttf`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-ExtraBold.ttf`'
- en: '`Exo2-ExtraBoldItalic.ttf`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-ExtraBoldItalic.ttf`'
- en: '`Exo2-ExtraLight.ttf`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-ExtraLight.ttf`'
- en: '`Exo2-ExtraLightItalic.ttf`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-ExtraLightItalic.ttf`'
- en: '`Exo2-Italic.ttf`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Italic.ttf`'
- en: '`Exo2-Light.ttf`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Light.ttf`'
- en: '`Exo2-LightItalic.ttf`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-LightItalic.ttf`'
- en: '`Exo2-Medium.ttf`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Medium.ttf`'
- en: '`Exo2-MediumItalic.ttf`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-MediumItalic.ttf`'
- en: '`Exo2-Regular.ttf`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Regular.ttf`'
- en: '`Exo2-SemiBold.ttf`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-SemiBold.ttf`'
- en: '`Exo2-SemiBoldItalic.ttf`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-SemiBoldItalic.ttf`'
- en: '`Exo2-Thin.ttf`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-Thin.ttf`'
- en: '`Exo2-ThinItalic.ttf`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exo2-ThinItalic.ttf`'
- en: Copying `font` files into the `assets` directory will not give us support for
    those fonts out of the box. We need to use them through our code. We will create
    the code that will apply fonts for us.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将`font`文件复制到`assets`目录不会直接为我们提供对这些字体的支持。我们需要通过代码来使用它们。我们将创建一个代码，它将为我们应用字体。
- en: 'Open `BaseActivity` and extend it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`BaseActivity`并扩展它：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We extended our base activity to handle fonts. When the activity enters `onPostCreate()`,
    the `applyFonts()` method will be called. `applyFonts()` then does the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扩展了我们的基本活动以处理字体。当活动进入`onPostCreate()`时，`applyFonts()`方法将被调用。然后，`applyFonts()`执行以下操作：
- en: Calls the `initFonts()` method which creates `TypeFace` instances from the assets.
    `TypeFace` is used as the representation of a font and its visual properties.
    We instantiated typefaces for `ExoBold` and `ExoRegular`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`initFonts()`方法，该方法从资源文件创建`TypeFace`实例。`TypeFace`用作字体及其视觉属性的表示。我们为`ExoBold`和`ExoRegular`实例化了字体。
- en: What happens next is that we are obtaining `root` view for our current activity
    and passing it to the `applyFonts()` method from the companion object. If the
    view is a `view group` we iterate through its children until the ordinary view
    is reached. View has a property `typeface` to which we set our `typeface` instance.
    You will notice also that we are retrieving the class property called `tag` from
    each view. In Android we can set tags to our views. Tags can be instances of any
    class. In our case, we are checking if the tag is `String` with the value of string
    resource by the name `tag_font_bold`.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来发生的是，我们正在获取当前活动的`root`视图，并将其传递给伴随对象的`applyFonts()`方法。如果视图是一个`view group`，我们会遍历其子项，直到达到普通视图。视图有一个名为`typeface`的属性，我们将其设置为我们的`typeface`实例。您还会注意到，我们正在从每个视图中检索名为`tag`的类属性。在Android中，我们可以为视图设置标签。标签可以是任何类的实例。在我们的情况下，我们正在检查标签是否是具有名称`tag_font_bold`的字符串资源的`String`。
- en: 'To set tags, create a new `xml` in the `values` directory called **tags** and
    populate it with the following content:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置标签，创建一个名为**tags**的新`xml`文件，并将其放入`values`目录中，并填充以下内容：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now all application's buttons will have the bold font version applied. Now build
    your application and run it. You will notice that the font has changed!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有应用程序的按钮都将应用粗体字体版本。现在构建您的应用程序并运行它。您会注意到字体已经改变了！
- en: Applying coloring
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用颜色
- en: We defined the color palette for our application. We applied each color by accessing
    its resource. Sometimes we do not have a particular color resource available.
    It can happen that we obtained the color dynamically through the backend (in a
    response to some API call) or we want the color to be defined from the code because
    of some other reasons.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序定义了颜色调色板。我们通过访问其资源应用了每种颜色。有时我们没有特定的颜色资源可用。可能发生的情况是，我们通过后端（作为对某些API调用的响应）动态获得颜色，或者由于其他原因，我们希望从代码中定义颜色。
- en: Android is very powerful when you need to deal with colors from your code. We
    will cover some examples and show you what you can do.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要在代码中处理颜色时，Android非常强大。我们将涵盖一些示例，并向您展示您可以做什么。
- en: 'To get color from an existing resource you can do the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要从现有资源中获取颜色，您可以执行以下操作：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Before we used to do this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以前我们用来做这个：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: But it is deprecated from Android version 6.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但它已经在Android 6版本中被弃用。
- en: 'When you obtained a color you can apply it on some view:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当您获得颜色后，您可以将其应用于某个视图：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Another way to obtain a color is by accessing `Color` class static methods.
    Let''s start with parsing some color string:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种获取颜色的方法是访问`Color`类的静态方法。让我们从解析一些颜色字符串开始：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We must note that there is already a certain number of predefined colors available:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须注意，已经有一定数量的预定义颜色可用：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So we don''t need to parse `#ff0000`. There are some other colors as well:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不需要解析`#ff0000`。还有一些其他颜色：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Sometimes you will have only parameters about red, green, or blue and based
    on that to create a color:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您只会有关于红色，绿色或蓝色的参数，然后基于此创建颜色：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We must note that this method is available from API version 26!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须注意，此方法从API版本26开始可用！
- en: 'If RGB is not your desired color space then you can pass it as a parameter:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果RGB不是您想要的颜色空间，那么您可以将其作为参数传递：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see there are a lot of possibilities when you deal with the color.
    If standard color resources are not enough for you to manage your colors you can
    do it in an advanced way. We encourage you to play with it and try on some user
    interfaces.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，当您处理颜色时有很多可能性。如果标准颜色资源不足以管理您的颜色，您可以以一种高级方式来处理它。我们鼓励您尝试并在一些用户界面上尝试。
- en: 'For example, if you are using the `AppCompat` library once you get `Color`
    instance you can use it like in the following example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您正在使用`AppCompat`库，一旦您获得`Color`实例，您可以像以下示例中那样使用它：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Consider the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下截图：
- en: '![](img/a593dbbc-7720-4759-b359-609f9d77da18.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a593dbbc-7720-4759-b359-609f9d77da18.png)'
- en: Make your buttons look pretty
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让你的按钮看起来漂亮
- en: 'We colored our buttons and defined states for them. We colored each state differently.
    We have colors for disabled state, for enabled, and pressed states. Now we will
    go one step further. We will make our buttons rounded and color them with a gradient
    instead of a solid color. We will prepare a layout for a new button style. Open
    the `activity_todo` layout and modify the buttons container:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给我们的按钮上色并为它们定义了状态。我们为每个状态着色。我们有禁用状态的颜色，启用状态和按下状态的颜色。现在我们将更进一步。我们将使我们的按钮变圆，并用渐变颜色而不是纯色来着色。我们将为新的按钮样式准备一个布局。打开`activity_todo`布局并修改按钮容器：
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We set the background the same as the one we used for the edit text field.
    Buttons will be rounded so we want them on the same background as the rest of
    the screen. Now, let''s define some additional dimensions and the colors we will
    use. We need to define the radius for a button with rounded corners:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将背景设置为与我们用于编辑文本字段相同的背景。按钮将被圆角，所以我们希望它们与屏幕的其余部分在相同的背景上。现在，让我们定义一些额外的尺寸和我们将使用的颜色。我们需要定义具有圆角边角的按钮的半径：
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Since we plan to use gradient colors we must add a second color for gradients.
    Add these colors to your `colors.xml`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们计划使用渐变颜色，我们必须为渐变添加第二种颜色。将这些颜色添加到您的`colors.xml`中：
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now when we have defined this we will need to update our style for green buttons:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了这一点，我们需要更新绿色按钮的样式：
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We added a margin so that buttons are separated from each other. We need now
    rectangular rounded drawables. Create three drawable resources `rect_rounded_green`,
    `rect_rounded_green_dark`, and `rect_rounded_grey_disabled`. Make sure they are
    defined like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个边距，以便按钮彼此分开。我们现在需要矩形圆角可绘制资源。创建三个可绘制资源`rect_rounded_green`，`rect_rounded_green_dark`和`rect_rounded_grey_disabled`。确保它们定义如下：
- en: '`rect_rounded_green`:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect_rounded_green`：'
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`rect_rounded_green_dark`:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect_rounded_green_dark`:'
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`rect_rounded_grey_disabled`:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect_rounded_grey_disabled`：'
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We defined gradients containing attributes for:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了包含以下属性的渐变：
- en: gradient angle (of 270 degrees)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变角度（270度）
- en: start color (we used our color resource)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始颜色（我们使用了我们的颜色资源）
- en: end color (we used our color resource too)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束颜色（我们也使用了我们的颜色资源）
- en: 'Also, each drawable resource has a value for its corner''s radius. Last step
    is to update our selector. Open `selector_button_green` and update it:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个可绘制资源都有其角半径的值。最后一步是更新我们的选择器。打开`selector_button_green`并更新它：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Build your app and run it. Open the Todo screen and take a look at it. Buttons
    are now much nicer with smooth rounded edges. Buttons are separated from each
    other by margins and if you press a finger on them you will see the secondary
    gradient with the darker green we defined:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 构建您的应用程序并运行它。打开`Todo`屏幕并看一看。按钮现在有了平滑的圆角边缘，看起来更漂亮。按钮之间通过边距分开，如果您在按钮上按下手指，您将看到我们定义的较深绿色的辅助渐变：
- en: '![](img/6ed3b309-e081-464f-a4fc-e90dd4839dac.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ed3b309-e081-464f-a4fc-e90dd4839dac.png)'
- en: Setting animations
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置动画
- en: We consider our layout to be nice. It is pretty. But can it be more entertaining?
    Sure it can! If we make our layout more interactive we will achieve a better user
    experience and attract users to use it. We will achieve that by adding some animations.
    Animations can be defined through the code or by animating view properties. We
    will improve each of the screens by adding simple and effective opening animations.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为我们的布局很好看。它很漂亮。但它可以更有趣吗？当然可以！如果我们使我们的布局更具互动性，我们将实现更好的用户体验，并吸引用户使用它。我们将通过添加一些动画来实现这一点。动画可以通过代码或通过动画视图属性来定义。我们将通过添加简单而有效的开场动画来改进每个屏幕。
- en: 'Animations defined as resources are located in the `anim` resources directory.
    We will need a few animation resources there--`fade_in`, `fade_out`, `bottom_to_top`,
    `top_to_bottom`, `hide_to_top`, `hide_to_bottom`. Create them and define them
    according to these examples:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 作为资源定义的动画位于`anim`资源目录中。我们将需要一些动画资源--`fade_in`，`fade_out`，`bottom_to_top`，`top_to_bottom`，`hide_to_top`，`hide_to_bottom`。创建它们并根据这些示例定义它们：
- en: '`fade_in`:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fade_in`：'
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`fade_out`:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fade_out`：'
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`top_to_bottom`:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top_to_bottom`：'
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`hide_to_top`:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide_to_top`：'
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`hide_to_bottom`:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide_to_bottom`：'
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Take a look at this example and the attributes you can define. In the fade
    animation example, we animated an `alpha` property for the view. We set the animation
    duration, from, and to alpha values and the interpolator we will use for the animation.
    In Android, for your animations you can choose one of these interpolators:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个例子和你可以定义的属性。在淡入淡出动画示例中，我们为视图的`alpha`属性进行了动画处理。我们设置了动画持续时间，从和到alpha值以及我们将用于动画的插值器。在Android中，对于你的动画，你可以选择这些插值器之一：
- en: '`accelerate_interpolator`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accelerate_interpolator`'
- en: '`accelerate_decelerate_interpolator`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accelerate_decelerate_interpolator`'
- en: '`bounce_interpolator`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bounce_interpolator`'
- en: '`cycle_interpolator`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cycle_interpolator`'
- en: '`anticipate_interpolator`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anticipate_interpolator`'
- en: '`anticipate_overshot_interpolator`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anticipate_overshot_interpolator`'
- en: and many others, all defined in--`@android:anim/...`
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及其他许多动画，都定义在`@android:anim/...`中
- en: For other animations we defined the translation with `from` and `to` parameters.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他动画，我们使用`from`和`to`参数定义了平移。
- en: 'Before we use these animations we will adjust some backgrounds so there is
    no gap in our layouts before the animation starts. For `activity_main`, add the
    background for Toolbar parent view:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这些动画之前，我们将调整一些背景，以便在动画开始之前我们的布局中没有间隙。对于`activity_main`，添加工具栏父视图的背景：
- en: '[PRE37]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For `activity_note` and `activity_todo` nest toolbar in one more parent so
    the final color is the same as the color for the title field below the toolbar:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`activity_note`和`activity_todo`，将工具栏嵌套在一个更多的父级中，以便最终颜色与工具栏下方标题字段的颜色相同：
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Finally we will apply our animations. We will use fade in and out animations
    for our screens, opening and closing. Open `BaseActivity` and modify it like this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将应用我们的动画。我们将为我们的屏幕打开和关闭使用淡入和淡出动画。打开`BaseActivity`并修改它如下：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We overrode transition effects by using the `overridePendingTransition()` method
    that takes enter and exit animations as parameters.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`overridePendingTransition()`方法覆盖了过渡效果，该方法将进入和退出动画作为参数。
- en: 'Update your `onResume()` and `onPause()` methods too:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 也更新你的`onResume()`和`onPause()`方法：
- en: '[PRE40]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We created an instance of animation and applied it on the view using the `startAnimation()`
    method. `getAnimation()` method is ours. We defined it. So, add the implementation
    to `BaseActivity`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个动画实例，并使用`startAnimation()`方法将其应用于视图。`getAnimation()`方法是我们自己定义的。因此，将实现添加到`BaseActivity`：
- en: '[PRE41]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Since we are using Kotlin, to make it available to all activities, not just
    the ones that are extending `BaseActivity` change method to be extension function
    like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是Kotlin，为了使其对所有活动都可用，而不仅仅是扩展`BaseActivity`的活动，将方法更改为扩展函数，如下所示：
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Build your application again and run it. Open and close screens multiple times
    to see how our animations are working.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 再次构建并运行应用程序。多次打开和关闭屏幕，看看我们的动画是如何工作的。
- en: Animation sets in Android
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android中的动画集
- en: In previous sections, we worked with animations from resources defined in XML.
    In this section, we will play with various view attributes and with animation
    sets. We will illustrate the purpose and use with simple and effective examples.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的部分中，我们使用了在XML中定义的资源的动画。在本节中，我们将使用各种视图属性和动画集。我们将通过简单而有效的示例来说明目的和用途。
- en: 'Let''s demonstrate the first animation from the code. Open `ItemsFragment`.
    Add the following method:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示代码中的第一个动画。打开`ItemsFragment`。添加以下方法：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: What this method will do? This method will animate scaling for the button with
    bounce interpolation. If the expand parameter is `true`, we will scale up, otherwise
    we will scale down.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法会做什么？这个方法将使用弹跳插值对按钮进行缩放动画。如果扩展参数为`true`，我们将放大，否则我们将缩小。
- en: 'Apply it to our floating action button. Extend the button click listener:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将其应用到我们的浮动操作按钮。扩展按钮点击监听器：
- en: '[PRE44]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And set the main dialog to cancellable with on an cancel action set:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 并将主对话框设置为可取消，并设置取消操作：
- en: '[PRE45]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Build and run the application. Click on the add item button and then close the
    dialog by tapping outside of it. We have a wonderful scale animation!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用程序。单击“添加项目”按钮，然后通过在其外部轻击来关闭对话框。我们有一个精彩的缩放动画！
- en: 'To have floating action button complete add PNG resource for plus sign and
    apply it to the button:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使浮动操作按钮完整，添加加号的PNG资源并将其应用到按钮上：
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: With the icon added to the button the animation looks perfect! Let's make it
    even more perfect! We will create an animation set containing multiple animations!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将图标添加到按钮，动画看起来完美！让我们使它更加完美！我们将创建一个包含多个动画的动画集！
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `AnimatorSet` class gives us the ability to create complex animations. In
    this case, we defined animations for scaling along the *x* axis and for scaling
    along the *y* axis. This two animations will be animated at the same time giving
    us the effect of scaling in both directions. After we scale view we will reduce
    (or increase) view's capacity. As you can see, we can chain or order animation's
    execution.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnimatorSet`类使我们能够创建复杂的动画。在这种情况下，我们定义了沿着*x*轴和*y*轴的缩放动画。这两个动画将同时进行动画处理，给我们带来了在两个方向上缩放的效果。在我们缩放视图之后，我们将减少（或增加）视图的容量。正如你所看到的，我们可以链接或按顺序执行动画。'
- en: Build your project and run. You can see new animation behavior.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 构建你的项目并运行。你可以看到新的动画行为。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was a rather interactive one. First we showed you how to add, define,
    change, and adjust a theme in Android. Then we submerged into Android styles and
    assets. In this chapter, we also adopted some custom fonts and coloring. In the
    end, we made some seriously beautiful buttons and swift animations. In the next
    chapter, you will start learning about the system part of the Android Framework.
    We will start with permissions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个相当互动的章节。首先，我们向您展示了如何在Android中添加、定义、更改和调整主题。然后我们深入研究了Android的样式和资源。在本章中，我们还采用了一些自定义字体和着色。最后，我们制作了一些非常漂亮的按钮和快速动画。在下一章中，您将开始学习Android框架的系统部分。我们将从权限开始。
