["```java\nint[] ages;\nages = new int[5];\n```", "```java\nint[] ages = new int[5];\n```", "```java\nages[0] = 35;\nSystem.out.println(ages[0]);\n```", "```java\nint length = ages.length;\nSystem.out.println(length);\n```", "```java\nint ages[];\n```", "```java\nages = new [5]int;\n```", "```java\n<identifier> expected\n';' expected\n\n```", "```java\n[0]ages = 0;\n```", "```java\nillegal start of expression\nincompatible types\n required: int[]\n found:    int\n\n```", "```java\npublic static void main(String[] args) {\n   ...\n}\n```", "```java\nint[] arr1, arr2;\n```", "```java\nint arr1[], arr2[];\n```", "```java\nint[] arr1;\nint[] arr2;\n```", "```java\nint ages[] = {35, 10, 43, -5, 12};\n```", "```java\nint ages[5] = {35, 10, 43, -5, 12};\n```", "```java\n']' expected\n';' expected\n\n```", "```java\nint ages[] = {35, 10, 43, -5, 12};\nSystem.out.println(ages.toString());\n\nfor(int i = 0; i < ages.length; i++) {\n   System.out.println(ages[i]);\n}\n```", "```java\n[I@27341e11\n35\n10\n43\n-5\n12\n\n```", "```java\nstatic final int SIZE = 5;\n\nint ages[] = new int[SIZE];\n// initialize ages as needed\n\nfor(int i = 0; i < ages.length; i++) {\n   System.out.println(ages[i]);\n}\n```", "```java\npublic static void main(String args[]) {\n   String names[] = new String[5];\n   ...\n}\n```", "```java\nnames[2] = \"Steve\";\n```", "```java\nfor(int i = 0; i < names.length; i++) {\n   System.out.println(names[i]);\n}\n```", "```java\nnull\nnull\nSteve\nnull\nnull\n\n```", "```java\nstatic final int ROWS = 2;\nstatic final int COLS = 3;\n\nint grades[][] = new int[ROWS][COLS];\n```", "```java\ngrades[0][0] = 0;\ngrades[0][1] = 1;\ngrades[0][2] = 2;\ngrades[1][0] = 3;\ngrades[1][1] = 4;\ngrades[1][2] = 5;\n```", "```java\nfor (int rows = 0; rows < ROWS; rows++) {\n   for (int cols = 0; cols < COLS; cols++) {\n      System.out.printf(\"%d  \", grades[rows][cols]);\n   }\n   System.out.println();\n}\n```", "```java\n0  1  2 \n3  4  5 \n\n```", "```java\ngrades = new int[ROWS][];\ngrades[0] = new int[COLS];\ngrades[1] = new int[COLS];\n```", "```java\ngrades[0] = new int[4];\ngrades[1] = new int[2];\n```", "```java\nstatic final int SIZE = 5;\nint[] ages = new int[SIZE];\n```", "```java\nfor(int i = 0; i < ages.length; i++) {\n      ages[i] = 5;\n}\n```", "```java\nint i = 0;\nwhile(i < ages.length) {\n   ages[i++] = 5;\n}      \n```", "```java\nint[] ages = new int[SIZE];\n...\nfor(int i = 0; i < SIZE; i++) {\n   ages[i] = 5;\n}\n\n// Array redefined\nint[] ages = new int[DIFFERENT_SIZE];\n...\nfor(int i = 0; i < SIZE; i++) {\n   ages[i] = 5;\n}\n```", "```java\nfor(int number : ages) {\n   number = 5;\n}\n```", "```java\npublic static void main(String[] args) {\n   int arr1[];\n   int arr2[];\n   arr1 = new int[5];\n   arr2 = new int[5];\n\n   for(int i = 0; i < 5; i++) {\n      arr1[i] = 0;\n      arr2[i] = 0;\n    }\n  }\n```", "```java\nboolean areEqual = true;\nfor (i = 0; i < 5; i++) {\n   if(arr1[i]!= arr2[i]) {\n      areEqual = false;\n   }\n}\nSystem.out.println(areEqual);\n```", "```java\nSystem.out.println(arr1 == arr2);  //Displays false\n```", "```java\nSystem.out.println(arr1.equals(arr2));  // Displays false\n```", "```java\nSystem.out.println(Arrays.equals(arr1,arr2));\n```", "```java\nint grades2[][];\ngrades2 = new int[ROWS][];\ngrades2[0] = new int[COLS];\ngrades2[1] = new int[COLS];\n\ngrades2[0][0] = 0;\ngrades2[0][1] = 1;\ngrades2[0][2] = 2;\ngrades2[1][0] = 3;\ngrades2[1][1] = 4;\ngrades2[1][2] = 5;\n```", "```java\nSystem.out.println(grades == grades2);\nSystem.out.println(grades.equals(grades2));\nSystem.out.println(Arrays.equals(grades, grades2));\nSystem.out.println(Arrays.deepEquals(grades, grades2));\n```", "```java\nfalse\nfalse\nfalse\ntrue\n\n```", "```java\nint arr1[] = new int[5];\nint arr2[] = new int[5];\n```", "```java\nfor(int i = 0; i < arr1.length; i++) {\n   arr1[i] = i;\n}\n```", "```java\nfor(int i = 0; i < arr1.length; i++) {\n   arr2[i] = arr1[i];\n}  \n// 0, 1, 2, 3, 4\n```", "```java\nSystem.arraycopy(arr1, 0, arr2, 0, 5);\n// 0, 1, 2, 3, 4\n```", "```java\nSystem.arraycopy(arr1, 0, arr2, 2, 3);\n// 0  0  0  1  2\n```", "```java\nSystem.arraycopy(arr1, 0, arr1, 3, 2);\n// 0  1  2  0  1\n```", "```java\nStringBuilder arr3[] = new StringBuilder[4];\narr3[0] = new StringBuilder(\"Pine\");\narr3[1] = new StringBuilder(\"Oak\");\narr3[2] = new StringBuilder(\"Maple\");\narr3[3] = new StringBuilder(\"Walnut\");\nStringBuilder arr4[] = new StringBuilder[4];\nSystem.arraycopy(arr3, 0, arr4, 0, 4);\n```", "```java\nfor (int i = 0; i < arr3.length; i++) {\n   arr4[i] = new StringBuilder(arr3[i]);\n}\n```", "```java\narr2 = Arrays.copyOf(arr1, 3);\n// 0  1  2\n```", "```java\narr2 = Arrays.copyOf(arr1, 10);\n// 0  1  2  3  4  0  0  0  0  0\n```", "```java\narr2 = Arrays.copyOfRange(arr1, 3, 5);\n//  3  4\n```", "```java\narr2 = Arrays.copyOfRange(arr1, 3, 8);\n//     3  4  0  0  0\n```", "```java\narr2 = arr1.clone();\n```", "```java\ndisplayArray(arr2);\n   ...\nprivate static void displayArray(int arr[]) {\n   for(int number : arr) {\n      System.out.print(number + \"  \");\n   }\n   System.out.println();\n}\n```", "```java\nSystem.out.println(\"Length of arr2: \" + arr2.length);\nchangeArray(arr2);\nSystem.out.println(\"Length of arr2: \" + arr2.length);\n...    \nprivate static void changeArray(int arr[]) {\n   arr = new int[100];\n   System.out.println(\"Length of arr: \" + arr.length);\n}\n```", "```java\nLength of arr2: 5\nLength of arr: 100\nLength of arr2: 5\n\n```", "```java\npublic class CommandLineDemo {\n\n   public static void main(String args[]) {\n      System.out.println(\"The command line has \" + args.length + \" arguments\");\n      for (int i = 0; i < args.length; i++) {\n         System.out.println(\"\\tArgument Number \" + i + \n                  \": \" + args[i]);\n      }\n   }\n}\n```", "```java\njava CommandLineDemo /D 1024 /f test.dat\n\n```", "```java\nThe command line has 4 arguments\n Argument Number 0: /D\n Argument Number 1: 1024\n Argument Number 2: /f\n Argument Number 3: test.dat\n\n```", "```java\nint arr1[] = new int[5];\nArrayList list = new ArrayList();\nlist.add(\"item 1\");\nlist.add(\"item 2\");\n\nObject arr2[] = {\"item 3\", new Integer(5), list};\nString arr3[] = {\"Pine\", \"Oak\", \"Maple\", \"Walnut\"};\n```", "```java\nArrays.fill(arr1,5);\n```", "```java\nSystem.out.println(Arrays.asList(arr3));\nSystem.out.println(Arrays.toString(arr1));\nSystem.out.println(Arrays.deepToString(arr2));\n```", "```java\n[Pine, Oak, Maple, Walnut]\n [5, 5, 5, 5, 5]\n[item 3, 5, [item 1, item 2]]\n```", "```java\nList list2 = Arrays.asList(arr3);\nlist2.set(0, \"Birch\");\nSystem.out.println(Arrays.toString(arr3));\n```", "```java\n[Birch, Oak, Maple, Walnut]\n\n```", "```java\nArrayList list1 = new ArrayList();\nArrayList list2 = new ArrayList(20);\n```", "```java\nArrayList<String> list3 = new ArrayList<String>();\n```", "```java\nArrayList<String> creatures = new ArrayList<String>();\ncreatures.add(\"Mutant\");\ncreatures.add(\"Alien\");\ncreatures.add(\"Zombie\");\nSystem.out.println(creatures);\n```", "```java\n[Mutant, Alien, Zombie]\n\n```", "```java\ncreatures.add(1,\"Godzilla\");\nSystem.out.println(creatures);\n```", "```java\n [Mutant, Godzilla, Alien, Zombie]\n\n```", "```java\nArrayList<String> cuddles = new ArrayList<String>();\ncuddles.add(\"Tribbles\");\ncuddles.add(\"Ewoks\");\n\ncreatures.addAll(2, cuddles);\nSystem.out.println(creatures);\n```", "```java\n[Mutant, Godzilla, Tribbles, Ewoks, Alien, Zombie]\n```", "```java\nString element = creatures.get(2);\n```", "```java\nSystem.out.println(creatures.indexOf(\"Tribbles\"));\nSystem.out.println(creatures.indexOf(\"King Kong\"));\n```", "```java\n2\n-1\n\n```", "```java\nString[] complete = new String[0];\ncomplete = creatures.toArray(complete);\nfor(String item : complete) {\n   System.out.print(item + \" \");\n}\nSystem.out.println();\n```", "```java\nMutant Godzilla Tribbles Ewoks Alien Zombie\n\n```", "```java\nfor(int i = 0; i < creatures.size(); i++) {\n   System.out.print(creatures.get(i) + \" \");\n}\nSystem.out.println();\n```", "```java\nfor(String creature : creatures) {\n   System.out.print(creature + \" \");\n}\nSystem.out.println();\n```", "```java\nIterator<String> iterator = creatures.iterator();\nwhile(iterator.hasNext()) {\n   System.out.print(iterator.next() + \" \");\n}\nSystem.out.println();\n```", "```java\nListIterator<String> listIterator = \n            creatures.listIterator();\nwhile(listIterator.hasNext()) {\n   System.out.print(listIterator.next() + \" \");\n}\nSystem.out.println();\n```", "```java\nMutant Godzilla Tribbles Ewoks Alien Zombie\n\n```", "```java\nwhile(listIterator.hasPrevious()) {\n   System.out.print(listIterator.previous() + \" \");\n}\nSystem.out.println();\n```", "```java\nZombie Alien Ewoks Tribbles Godzilla Mutant\n\n```", "```java\nCollections.sort(creatures);\nSystem.out.println(creatures);\n```", "```java\n[Alien, Ewoks, Godzilla, Mutant, Tribbles, Zombie]\n\n```", "```java\ncreatures.set(0,\"Ghoul\");\nSystem.out.println(creatures);\n```", "```java\n[Ghoul, Godzilla, Tribbles, Ewoks, Alien, Zombie]\n\n```", "```java\nSystem.out.println(creatures);\ncreatures.remove(0);\nSystem.out.println(creatures);\n\ncreatures.remove(\"Alien\");\nSystem.out.println(creatures);\n\ncreatures.removeAll(cuddles);\nSystem.out.println(creatures);\n\ncreatures.clear();\nSystem.out.println(creatures); \n```", "```java\n[Mutant, Godzilla, Tribbles, Ewoks, Alien, Zombie]\n[Godzilla, Tribbles, Ewoks, Alien, Zombie]\n[Godzilla, Tribbles, Ewoks, Zombie]\n[Godzilla, Zombie]\n[]\n\n```", "```java\npublic class Library {\n\n   private ArrayList<Book> books = new ArrayList<Book>();\n\n   public Book getBook(int index) {\n      return books.get(index);\n   }\n\n   public void addBook(Book book) {\n      books.add(book);\n   }\n\n   public List getBooks() {\n      return books;\n   }\n}\n```", "```java\npublic Book getBook (int index) {\n   return new Book(books.get(index));\n}\n```", "```java\npublic List getBooks() {\n   ArrayList list = new ArrayList(books.size());\n   for(Book book : books) {\n      list.add(new Book(book));\n   }\n   return list;\n}\n```", "```java\n    ArrayList<String> list = new ArrayList<>();\n    list.add(\"dog\");\n    list.add(\"cat\");\n    list.add(\"frog\");\n    ```"]