["```js\nconst firstName = \"Jean-Luc\"\nconst lastName = \"Picard\"\n```", "```js\nconst PI = 3.14159\nconst API_KEY = 'cnview8773jass'\n```", "```js\nlet ship = \"Stargazer\"\nship = \"Enterprise\" // ship now equals \"Enterprise\"\n```", "```js\ntypeof(1) // returns \"number\"\ntypeof(\"hello\") // returns \"string\"\n```", "```js\nlet myAge = 38\nconst age = \"38\"\nmyAge == age\n```", "```js\nconst officers = ['Riker','Data','Worf']\n\nconst captain = {\n  \"name\": \"Jean-Luc Picard\",\n  \"age\": 62,\n  \"serialNumber\": \"SP 937-215\",\n  \"command\": \"NCC 1701-D\",\n  \"seniorStaff\": officers\n}\n```", "```js\nofficers.push('Troi') // officers now equals ['Riker','Data','Worf', 'Troi']\n```", "```js\nofficers.length // now equals 4\n```", "```js\ncaptain.command // equals \"NCC 1701-D\"\n```", "```js\nif a < b:\n  min = a\nelse:\n  min = b\n```", "```js\nlet min\n\nif (a < b) {\n  min = a\n} else {\n  min = b\n}\n```", "```js\nmin = a if a < b else b\n```", "```js\nlet min = (a < b) ? a : b\n```", "```js\nlet myVar = 2\n\nif (typeof(myVar) === \"number\") {\n  myVar++; // myVar now equals 3\n}\n```", "```js\nnames = [\"Alice\",\"Bob\",\"Carol\"]\nfor x in names:\n    print(x)\n```", "```js\nconst names = [\"Alice\",\"Bob\",\"Carol\"]\n\nfor (let i = 0; i < names.length; i++) {\n  console.log(names[i])\n}\n```", "```js\ni = 0\nwhile i < 10:\n    i += 1\n```", "```js\nlet i = 0\nwhile (i < 10) {\n   i++\n}\n```", "```js\nlet i = 0\n\ndo {\n  i++\n} while (i < 10)\n```", "```js\nconst officers = ['Riker','Data','Worf']\n\nconst captain = {\n  \"name\": \"Jean-Luc Picard\",\n  \"age\": 62,\n  \"serialNumber\": \"SP 937-215\",\n  \"command\": \"NCC 1701-D\",\n  \"seniorStaff\": officers\n}\n\nlet myString = ''\n\nfor (let x in captain) {\n  myString += captain[x] + ' '\n}\n```", "```js\nfor (const officer of officers) {\n  console.log(officer)\n}\n```", "```js\ndef add_one(x):\n  x += 1\n  return x\n\nprint(add_one(5))\n// output is 6\n```", "```js\nfunction addOne(val) {\n  return ++val\n}\n\nconsole.log(addOne(5))\n// output is 6\n```", "```js\nfunction functionName(optionalParameters, separatedByCommas) {\n  // do work\n  // optionally return a value\n}\n```", "```js\nconst addOne = function(val) {\n  return ++val\n}\n```", "```js\nconst addOne = (val) => { return ++val }\n```", "```js\nconst addOne = val => { return ++val }\n```", "```js\nconst addOne = (val) => { return ++val } // I am an inline, single line comment\n\n// I am a single comment\n\n/*\n I am a multiline comment\n*/\n```", "```js\n/**\n * Returns the argument incremented by one\n * @example\n * // returns 6\n * addOne(5);\n * @returns {Number} Returns the value of the argument incremented by one.\n */    \n```", "```js\ndef add_one(x):\n  x += 1\n  return x\n```", "```js\nint add_one(int val) {\n  val += 1;\n  return val;\n}\n```", "```js\nint add_one (int val)\n{\n  val += 1;\n  return val;\n}\n```", "```js\nfunction addOne(val) {\n  return ++val\n}\n```", "```js\ndef hello_world(x):\n if x > 3:\n   x += 1\n else:\n   x += 2\n return x\n```", "```js\nfunction helloWorld(val) {\n  if (val > 3) {\n    return ++val\n  } else {\n    return val+2\n  }\n}\n```"]