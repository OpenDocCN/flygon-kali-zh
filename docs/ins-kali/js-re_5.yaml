- en: Chapter 5. Node.js and Regex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Node.js和正则表达式
- en: So far, we've had fun learning how to create regular expressions for different
    situations. However, you may be wondering what it would be like to apply a regular
    expression in a real-world situation, such as reading a log file and presenting
    its information in a user-friendlier format?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经乐在其中学习如何为不同情况创建正则表达式。然而，您可能想知道在现实世界的情况下应用正则表达式会是什么样子，比如读取一个日志文件并以用户友好的格式呈现其信息？
- en: In this chapter, we will learn how to implement a simple **Node.js** application
    that reads a log file and parses it using a regular expression. This way, we can
    retrieve specific information from it and output it in a different format. We
    are going to test all the knowledge we obtained from the previous chapters of
    this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何实现一个简单的**Node.js**应用程序，它可以读取一个日志文件，并使用正则表达式解析它。这样，我们可以从中检索特定信息，并以不同的格式输出它。我们将测试我们从本书前几章中获得的所有知识。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the required software to develop our example
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的软件来开发我们的示例
- en: Reading a file with Node.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js读取文件
- en: Analyzing the anatomy of an Apache log file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析Apache日志文件的解剖学
- en: Creating a parse with regular expressions to read an Apache log file
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用正则表达式创建解析器来读取Apache日志文件
- en: Setting up Node.js
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Node.js
- en: Since we will be developing a Node.js application, the first step is to have
    Node.js installed. We can get it from [http://nodejs.org/download/](http://nodejs.org/download/).
    Just follow the download instructions and we will have it set up on our computer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将开发一个Node.js应用程序，第一步是安装Node.js。我们可以从[http://nodejs.org/download/](http://nodejs.org/download)获取它。只需按照下载说明进行操作，我们就可以在计算机上设置好它。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If this is your first time working with Node.js, please go through the tutorials
    at [https://nodejs.org/](https://nodejs.org/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次使用Node.js，请阅读[https://nodejs.org/](https://nodejs.org/)上的教程。
- en: 'To make sure we have Node.js installed, open the terminal application (Command
    Prompt, if you''re using Windows), and type `node –v`. The Node.js version installed
    should be displayed as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们已经安装了Node.js，打开终端应用程序（如果您使用Windows，则为命令提示符），然后输入`node –v`。安装的Node.js版本应该显示如下：
- en: '![Setting up Node.js](img/2258OS_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![设置Node.js](img/2258OS_05_01.jpg)'
- en: We are now good to go!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始了！
- en: Getting started with our application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始我们的应用程序
- en: 'Let''s start developing our sample application with Node.js, which will read
    a log file and parse its information using a regular expression. We are going
    to create all the required code inside a JavaScript file, which we will name as
    `regex.js`. Before we start coding, we will perform a simple test. Add the following
    content inside the `regex.js`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始用Node.js开发我们的示例应用程序，它将读取一个日志文件，并使用正则表达式解析其信息。我们将在一个名为`regex.js`的JavaScript文件中创建所有所需的代码。在我们开始编码之前，我们将进行一个简单的测试。在`regex.js`中添加以下内容：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, in the terminal application, execute the `regex.js` command node from
    the directory that the file was created in. The **Hello, World!** message should
    be displayed as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在终端应用程序中，从创建文件的目录中执行`regex.js`命令节点。**Hello, World!**消息应该显示如下：
- en: '![Getting started with our application](img/2258OS_05_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![开始我们的应用程序](img/2258OS_05_02.jpg)'
- en: The hello world application with Node.js is created and it works! We can now
    start coding our application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Node.js创建了hello world应用程序并且它可以工作了！我们现在可以开始编写我们的应用程序了。
- en: Reading a file with Node.js
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Node.js读取文件
- en: As the main goal of our application is to read a file, we need the file that
    the application is going to read! We will be using a sample Apache log file. There
    are many files on the Internet, but we will be using the log file that can be
    downloaded from [http://fossies.org/linux/source-highlight/tests/access.log](http://fossies.org/linux/source-highlight/tests/access.log).
    Place the file in the same directory that the `regex.js` file was created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序的主要目标是读取一个文件，我们需要应用程序要读取的文件！我们将使用一个示例Apache日志文件。互联网上有很多文件，但我们将使用可以从[http://fossies.org/linux/source-highlight/tests/access.log](http://fossies.org/linux/source-highlight/tests/access.log)下载的日志文件。将文件放在创建`regex.js`文件的同一目录中。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This sample Apache log file is also available within the source code bundle
    from this book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例Apache日志文件也可以在本书的源代码包中找到。
- en: 'To read a file with Node.js, we need to import the Node.js filesystem module.
    Remove the `console.log` message we placed inside the `regex.js` file and add
    the following line of code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Node.js读取文件，我们需要导入Node.js文件系统模块。删除我们在`regex.js`文件中放置的`console.log`消息，并添加以下一行代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the Node.js filesystem module, please read its documentation
    at [http://nodejs.org/api/fs.html](http://nodejs.org/api/fs.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Node.js文件系统模块的信息，请阅读其文档[http://nodejs.org/api/fs.html](http://nodejs.org/api/fs.html)。
- en: 'The next step is to open the file and read its content. We are going to use
    the following code to do this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是打开文件并读取其内容。我们将使用以下代码来实现这一点：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'According to the Node.js documentation, the `readFile` function (`#1`) can
    receive three arguments: the name of the file (`access.log`), certain options
    (that we are not using in this example), and the callback function that will be
    executed when the contents of the file are loaded in the memory.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Node.js文档，`readFile`函数（`#1`）可以接收三个参数：文件名（`access.log`），某些选项（在本例中我们没有使用），以及当文件内容加载到内存中时将执行的回调函数。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the `readLine` function, please access [http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`readLine`函数的信息，请访问[http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback](http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback)。
- en: The callback function receives two arguments. The first one is the error. In
    case something goes wrong, an exception will be thrown (`#2`). The second argument
    is `data`, which contains the file contents. We are going to store a string with
    all the file contents in a variable named `text` (`#3`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接收两个参数。第一个是错误。如果出现问题，将抛出异常（`＃2`）。第二个参数是`data`，其中包含文件内容。我们将在名为`text`的变量中存储一个包含所有文件内容的字符串（`＃3`）。
- en: Each record of the log is then placed in a row of the file. So, we can go ahead
    and separate the file records and store it into an array (`#4`). We can now iterate
    the array that holds the log rows (`#5`) and perform an action in each line. In
    this case, we are simply outputting the content of each line in `console` (`#6`)
    for now. We will replace line `#6` of the code with a different logic in the next
    section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，日志的每条记录都放在文件的一行中。因此，我们可以继续分隔文件记录并将其存储到一个数组中（`＃4`）。现在，我们可以迭代包含日志行的数组（`＃5`）并在每行执行一个操作。在这种情况下，我们现在只是在`console`（`＃6`）中输出每行的内容。我们将在下一节中用不同的逻辑替换代码的第`＃6`行。
- en: 'If we execute the `regex.js` command node, all the file content should be displayed
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行`regex.js`命令节点，则所有文件内容应显示如下：
- en: '![Reading a file with Node.js](img/2258OS_05_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用Node.js读取文件](img/2258OS_05_03.jpg)'
- en: The anatomy of an Apache log file
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache日志文件的解剖
- en: Before we create the regular expression that will match a line of the Apache
    file, we need to understand what kind of information it holds.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建将匹配Apache文件一行的正则表达式之前，我们需要了解它包含什么样的信息。
- en: 'Let''s take a look at a line from `access.log`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下`access.log`中的一行：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Apache access log that we are reading follows the `%h %l %u %t \"%r\" %>s
    %b \"%{Referer}i\" \"%{User-agent}i\"` format. Let''s take a look at each part:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在阅读的Apache访问日志遵循`％h％l％u％t“％r”％>s％b“％{Referer}i”“％{User-agent}i”`格式。让我们看看每个部分：
- en: '`%h`: The first part of the log is the (`127.0.0.1`) IP address'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％h`：日志的第一部分是（`127.0.0.1`）IP地址'
- en: '`%l`: In the second part, the hyphen in the output indicates that the requested
    piece of information is not available'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％l`：在第二部分中，输出中的连字符表示所请求的信息部分不可用'
- en: '`%u`: The third part is the user ID of the person requesting the (`jan`) document.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％u`：第三部分是请求（`jan`）文档的用户ID。'
- en: '`%t`: The fourth part is the time taken for the request to be received, such
    as (`[30/Jun/2004:22:20:17 +0200]`). It is in the `[day/month/year:hour:minute:second
    zone]` format, where:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％t`：第四部分是请求接收的时间，例如（`[30/Jun/2004:22:20:17 +0200]`）。它的格式是`[day/month/year:hour:minute:second
    zone]`，其中：'
- en: '`day` = 2*digit'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`day` = 2*digit'
- en: '`month` = 3*letter'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`month` = 3*letter'
- en: '`year` = 4*digit'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`year` = 4*digit'
- en: '`hour` = 2*digit'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hour` = 2*digit'
- en: '`minute` = 2*digit'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minute` = 2*digit'
- en: '`second` = 2*digit'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`second` = 2*digit'
- en: '`zone` = (``+'' | `-''`) 4*digit'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zone` =（``+'' | `-''）4*digit'
- en: '`\"%r\"`: The fifth part is the request line from the client that is given
    in double quotes, such as (`"GET /cgi-bin/trac.cgi/login HTTP/1.1"`)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"％r\"`：第五部分是客户端的请求行，用双引号给出，例如（`"GET /cgi-bin/trac.cgi/login HTTP/1.1"`）'
- en: '`%>s`: The sixth part is the status code that the server sends back to the
    (`302`) client'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％>s`：第六部分是服务器发送给（`302`）客户端的状态代码'
- en: '`%b`: The seventh part is the size of the object returned to the (`4370`) client'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`％b`：第七部分是返回给（`4370`）客户端的对象的大小'
- en: '`\"%{Referer}i\"`: The eighth part is the site that the client reports having
    been referred from, which is given in double quotes, such as (`"http://saturn.solar_system/cgi-bin/trac.cgi"`)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"％{Referer}i\"`：第八部分是客户端报告从中引用的站点，用双引号给出，例如（`"http://saturn.solar_system/cgi-bin/trac.cgi"`）'
- en: '`\"%{User-agent}i\"`: The ninth and last part is the user-agent HTTP request
    header and is also given in double quotes, such as (`"Mozilla/5.0 (X11; U; Linux
    i686; en-US; rv:1.7) Gecko/20040620 Galeon/1.3.15"`)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\"％{User-agent}i\"`：第九部分也是用户代理HTTP请求标头，也用双引号给出，例如（`"Mozilla/5.0（X11；U；Linux
    i686；en-US；rv：1.7）Gecko/20040620 Galeon/1.3.15"`）'
- en: All the parts are separated by a space. With this information and that given
    previously, we can start creating our regular expression.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有部分都用空格分隔。有了这些信息和之前提供的信息，我们可以开始创建我们的正则表达式。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the format of Apache logs, please read [http://httpd.apache.org/docs/2.2/logs.html](http://httpd.apache.org/docs/2.2/logs.html).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Apache日志格式的更多信息，请阅读[http://httpd.apache.org/docs/2.2/logs.html](http://httpd.apache.org/docs/2.2/logs.html)。
- en: Creating the Apache log Regex
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Apache日志正则表达式
- en: 'In the Apache access log file, we have nine parts that we want to recognize
    and extract from each line of the file. We can try two approaches while creating
    a Regex: we can be very specific or more generic. As mentioned previously, the
    most powerful regular expressions are the ones that are generic. We will try to
    achieve these expressions in this chapter as well.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache访问日志文件中，我们要识别并从文件的每一行中提取九个部分。在创建正则表达式时，我们可以尝试两种方法：可以非常具体或更通用。如前所述，最强大的正则表达式是通用的。我们将在本章中尝试实现这些表达式。
- en: For example, for the first part of the log, we know it is an IP address. We
    can be specific and use a Regex for the (`^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`)
    IPs or, as we know, the log starts with an IP we can use, such as `^(\S+)`, where,
    `^` means it matches the beginning of the input and `\S` matches a single character
    other than whitespace. The `^(\S+)` expression will match exactly the first part
    of the log, which consists of some specific information until it finds a space
    (such as the IP address). Also, `^(\S+)` is simpler than using `^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`
    and we've still achieved the same result.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于日志的第一部分，我们知道它是一个IP地址。我们可以具体使用正则表达式（`^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`）匹配IP，或者，正如我们所知，日志以IP开头，我们可以使用`^(\S+)`，其中`^`表示它匹配输入的开头，`\S`匹配除空格之外的单个字符。`^(\S+)`表达式将精确匹配日志的第一部分，直到找到空格（例如IP地址）。此外，`^(\S+)`比使用`^\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b`更简单，但我们仍然实现了相同的结果。
- en: 'Let''s go ahead and test the regular expression created so far:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续测试到目前为止创建的正则表达式：
- en: '![Creating the Apache log Regex](img/2258OS_05_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建Apache日志正则表达式](img/2258OS_05_04.jpg)'
- en: To recapitulate what we learned in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Regex"), *Getting Started with Regex*, the `exec` method executes
    a search for a match in a string. It returns an array of information, as it is
    the first position the string has matched and then the subsequent position in
    each part of the Regex.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结我们在[第1章](ch01.html "第1章。正则表达式入门")中学到的内容，*正则表达式入门*，`exec`方法在字符串中执行匹配搜索。它返回一个信息数组，因为它是字符串第一个匹配的位置，然后是正则表达式的每个部分中的后续位置。
- en: 'For the second and third parts, we can continue using the `^(\S+)` Regex. The
    second and third part can contain certain information (including a set of alphanumeric
    characters), or it can contain a hyphen. We are interested in the information
    present in each part until it finds a space. So, we can add two more `^(\S+)`
    to our Regex: `^(\S+) (\S+) (\S+)` and test it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二部分和第三部分，我们可以继续使用`^(\S+)`正则表达式。第二部分和第三部分可以包含特定信息（包括一组字母数字字符），或者可以包含连字符。我们对每个部分中出现的信息感兴趣，直到找到一个空格。因此，我们可以在我们的正则表达式中添加两个`^(\S+)`：`^(\S+)
    (\S+) (\S+)`并测试它：
- en: '![Creating the Apache log Regex](img/2258OS_05_05.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![创建Apache日志正则表达式](img/2258OS_05_05.jpg)'
- en: The first three parts of the log line are recognized.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 日志行的前三部分被识别出来。
- en: Creating a Regex for the time part
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为时间部分创建正则表达式
- en: The fourth part is the time that is given between brackets. The Regex that is
    going to match the time from the log is `\[([^:]+):(\d+:\d+:\d+) ([^\]]+)\]`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分是括号之间给定的时间。从日志中匹配时间的正则表达式是`\[([^:]+):(\d+:\d+:\d+) ([^\]]+)\]`。
- en: Let's see how we can achieve this result.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何实现这个结果。
- en: First, we have the opening and closing brackets. We cannot simply use `[]` as
    part of the Regex, because brackets in a regular expression represent a set of
    characters (groups as we learned in [Chapter 3](ch03.html "Chapter 3. Special
    Characters"), *Special Characters*). So, we need to use the (`\`) scape character
    before each bracket, so that we can represent the bracket as part of the regular
    expression.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有开放和关闭括号。我们不能简单地在正则表达式中使用`[]`，因为正则表达式中的括号代表一组字符（正如我们在[第3章](ch03.html "第3章。特殊字符")中学到的那样，*特殊字符*）。因此，我们需要在每个括号前使用（`\`）转义字符，以便我们可以将括号表示为正则表达式的一部分。
- en: The next piece of the time Regex is `"([^:]+):"`. After the opening bracket,
    we want to match any character until we find the (`:`) colon. We learned in [Chapter
    2](ch02.html "Chapter 2. The Basics"), *The Basics* about a negated range and
    this is exactly what we are going to use. We are expecting any character to be
    present except the colon, so we use `[ˆ:]` to represent it. Also, it can consist
    of one or more characters, such as (`+`). Next, we are expecting a (`:`) colon.
    With this piece of the regular expression, we can match `"[30/Jun/2004:" from
    "[30/Jun/2004:22:20:17 +0200]"`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 时间正则表达式的下一部分是`"([^:]+):"`。在开放括号之后，我们想匹配任何字符，直到找到（`:`）冒号。我们在[第2章](ch02.html "第2章。基础知识")中学到了关于否定范围的知识，这正是我们要使用的。我们期望任何字符都可以出现，除了冒号，所以我们使用`[ˆ:]`来表示它。此外，它可以由一个或多个字符组成，比如（`+`）。接下来，我们期望有一个（`:`）冒号。有了这个正则表达式的一部分，我们就可以匹配`"[30/Jun/2004:"`，从`"[30/Jun/2004:22:20:17
    +0200]"`中。
- en: The same Regex can be represented as `"(\d{2}\/\w{3}\/\d{4}):"`, since the day
    is given in the form of two digits, the month is given in three characters, and
    the year in four digits, and are separated by `\`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的正则表达式可以表示为`"(\d{2}\/\w{3}\/\d{4}):"`，因为日期以两位数字的形式给出，月份以三个字符给出，年份以四位数字给出，并用`\`分隔。
- en: The next piece of the Regex is `(\d+:\d+:\d+)`. It will match `22:20:17` from
    the example. The `\d` character matches any number (`+` matches one or more),
    followed by a (`:`) colon. We could also use (`\d{2}:\d{2}:\d{2}`), since the
    hours, minutes, and seconds are represented by two digits each.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的下一部分是`(\d+:\d+:\d+)`。它将从示例中匹配`22:20:17`。`\d`字符匹配任何数字（`+`匹配一个或多个），后跟一个（`:`）冒号。我们也可以使用（`\d{2}:\d{2}:\d{2}`），因为小时、分钟和秒分别由两位数字表示。
- en: The final piece is `([^\]]+)\]`. We are expecting any character except `"]"
    ([^\]] – negate ] )`. This will match the time zone (+0200). We could also use
    `([\+|-]\d{4})` as Regex, since the zone format is `+` or `-`, followed by four
    digits.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是`([^\]]+)\]`。我们期望任何字符，除了`"]"（[^\]] - 否定]）`。这将匹配时区（+0200）。我们也可以使用`([\+|-]\d{4})`作为正则表达式，因为时区格式是`+`或`-`，后跟四位数字。
- en: 'When we test the regular expression, we will get this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们测试正则表达式时，我们将得到这个结果：
- en: '![Creating a Regex for the time part](img/2258OS_05_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![为时间部分创建正则表达式](img/2258OS_05_06.jpg)'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that each piece of the time was split (the date, time, and zone) by a
    subset, separated by a parenthesis group "()". If we want to have the time as
    a single piece, we can remove the subsets: `\[(\d{2}\/\w{3}\/\d{4}:\d{2}:\d{2}:\d{2}
    [\+|-]\d{4})\]`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，时间的每个部分都被一个子集分割（日期、时间和时区），由括号组（）分隔。如果我们想将时间作为一个单独的部分，我们可以删除子集：`\[(\d{2}\/\w{3}\/\d{4}:\d{2}:\d{2}:\d{2}
    [\+|-]\d{4})\]`。
- en: Creating a Regex for the request information
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为请求信息创建正则表达式
- en: Following the parts that we separated (in a few sections previous to this one),
    let's work on the fifth part of the log, which is the request information.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们分开的部分（在此之前的几个部分中），让我们来处理日志的第五部分，即请求信息。
- en: Let's take a look at the "`GET /cgi-bin/trac.cgi/login HTTP/1.1`" example, so
    we can create a regular expression from it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下"`GET /cgi-bin/trac.cgi/login HTTP/1.1`"的例子，这样我们就可以从中创建一个正则表达式。
- en: The request is given in double quotes, so that we know a regular expression
    is to be created inside `\" \"`. From the preceding example, there are three pieces
    (`GET`, `/cgi-bin/trac.cgi/login`, and `HTTP/1.1`). So, `GET` can be represented
    by `(\S+)`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请求用双引号括起来，这样我们知道要在`\" \"`内创建一个正则表达式。从前面的例子中，有三个部分（`GET`、`/cgi-bin/trac.cgi/login`和`HTTP/1.1`）。因此，`GET`可以用`(\S+)`表示。
- en: Next, we have `/cgi-bin/trac.cgi/login`. We will use `(.*?)`, meaning, it can
    be any character or nothing else. We will use this because we do not know the
    format of this information.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`/cgi-bin/trac.cgi/login`。我们将使用`(.*?)`，意思是，它可以是任何字符，或者什么都没有。我们将使用这个，因为我们不知道这个信息的格式。
- en: Then, we have the `HTTP/1.1` protocol and to match it, we will also use `(\S+)`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有`HTTP/1.1`协议，为了匹配它，我们还将使用`(\S+)`。
- en: 'This will be the result when we try to match the regular expression:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试匹配正则表达式时，将会得到以下结果：
- en: '![Creating a Regex for the request information](img/2258OS_05_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![为请求信息创建正则表达式](img/2258OS_05_07.jpg)'
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If we want to retrieve each part of the request separately (such as the method,
    resource, and protocol), we can use `()`, as we used in the first approach, for
    the time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要分别检索请求的每个部分（比如方法、资源和协议），我们可以像之前一样使用`()`。
- en: Creating a Regex for the status code and object size
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为状态码和对象大小创建正则表达式
- en: 'The next two parts of the log are simple. The first one is the status, which
    is represented by `2xx`, `3xx`, `4xx`, or `5xx`, so, it is basically three digits.
    We can represent it in two ways: `(\S+)`, which will match any character until
    it finds a space, or `(\d{3})`. Of course, we can be even more specific and allow
    the first digit to be only `2`, `3`, `4`, or `5`, though, let''s not complicate
    it any more than is needed.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 日志的下两部分很简单。第一部分是状态，表示为`2xx`、`3xx`、`4xx`或`5xx`，因此基本上是三位数。我们可以用两种方式表示它：`(\S+)`，它将匹配任何字符，直到找到一个空格；或者`(\d{3})`。当然，我们还可以更具体一些，允许第一个数字只能是`2`、`3`、`4`或`5`，不过，让我们不要把它搞得太复杂。
- en: A number can also represent the object size. However, if no information is returned,
    it will be represented by a hyphen, so `(\S+)` represents best. Or we can also
    use `([\d|-]+)`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数字也可以表示对象大小。然而，如果没有返回信息，它将用连字符表示，所以`(\S+)`表示得最好。或者我们也可以使用`([\d|-]+)`。
- en: 'The output will be the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将会是以下内容：
- en: '![Creating a Regex for the status code and object size](img/2258OS_05_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![为状态码和对象大小创建正则表达式](img/2258OS_05_08.jpg)'
- en: Creating a Regex for the referrer and the user agent
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为引荐者和用户代理创建正则表达式
- en: Both parts are given in double quotes. We can represent the information using
    the `"([^"]*)"` expression, which means including any character except `"`. We
    can apply it in both parts.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这两部分都用双引号括起来。我们可以使用`"([^"]*)"`表达式来表示这些信息，这意味着包括除了`"`之外的任何字符。我们可以在这两部分中应用它。
- en: 'With the addition of the last two parts of the log, we will get this output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加日志的最后两部分，我们将得到以下输出：
- en: '![Creating a Regex for the referrer and the user agent](img/2258OS_05_09.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![为引荐者和用户代理创建正则表达式](img/2258OS_05_09.jpg)'
- en: 'Our final Regex to match a line of the Apache access log, is given here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终正则表达式来匹配Apache访问日志的一行如下：
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Trying to create a regular expression at once can be tricky and complicated.
    However, we've split each part and created a Regex. At the end of all this, all
    we have to do is combine all these parts together.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一次性创建一个正则表达式可能会很棘手和复杂。然而，我们已经将每个部分分开并创建了一个正则表达式。在所有这些结束时，我们所要做的就是将所有这些部分组合在一起。
- en: We are now ready to continue coding our application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好继续编写我们的应用程序。
- en: Parsing each Apache log row
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析每个Apache日志行
- en: 'We now know the regular expression that we want to use, so all we need to do
    is add the (`#1`) Regex to the code, execute the Regex with each line (`#2`),
    and obtain the results (`#3`). We will simply output the results in the console
    for now (`#4`). The code is presented here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道了我们想要使用的正则表达式，所以我们需要做的就是将（`#1`）正则表达式添加到代码中，对每一行进行正则表达式匹配（`#2`），并获得结果（`#3`）。目前我们只需要在控制台中输出结果（`#4`）。代码如下所示：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Is this the only way of making Regex work with Node.js?**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是唯一使正则表达式与Node.js配合工作的方法吗？**'
- en: In this example, we used the JavaScript Regex, which we've learned throughout
    this book. However, Node.js has other packages that can make our lives easier
    when working with regular expressions. The `node-regexp` package is one of the
    packages that provides a new way of working with regular expressions while working
    with Node.js. It is worth taking a look at it and spending some time playing with
    it at [https://www.npmjs.com/package/node-regexp](https://www.npmjs.com/package/node-regexp).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了JavaScript正则表达式，这是我们在整本书中学到的。然而，Node.js还有其他可以在使用正则表达式时让我们的生活更轻松的包。`node-regexp`包是提供在Node.js中使用正则表达式的新方法的包之一。值得一看，并花一些时间在[https://www.npmjs.com/package/node-regexp](https://www.npmjs.com/package/node-regexp)上进行尝试。
- en: We will continue completing our code in the next two sections.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的两节中继续完成我们的代码。
- en: Creating a JSON object for each row
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为每一行创建一个JSON对象
- en: Let's try to do something more useful with each row of the Apache log. We are
    going to create a **JavaScript Object Notation** (**JSON**) object with each row
    and add it to an array. To wrap our application, we will save the JSON content
    into a file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试对Apache日志的每一行做一些更有用的事情。我们将为每一行创建一个**JavaScript对象表示**（**JSON**）对象，并将其添加到一个数组中。为了包装我们的应用程序，我们将把JSON内容保存到一个文件中。
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about JSON, please refer to [http://www.json.org/](http://www.json.org/).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于JSON的信息，请参考[http://www.json.org/](http://www.json.org/)。
- en: 'So after the Regex declaration (which is inside the `var` declaration), we
    are going to add a new variable that will hold the collection of **JSON** objects
    we are going to create:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在正则表达式声明之后（它在`var`声明内部），我们将添加一个新变量，用于保存我们将创建的**JSON**对象的集合：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Instead of lines `#3` and `#4`, as seen in the code of the previous section,
    we will place this code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一节代码中的`#3`和`#4`行不同，我们将放置以下代码：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code will verify if any result arises from the execution of the Regex,
    and will create a JSON object called **row**. Then, we simply need to add the
    JSON object into the `jsonObject` array.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将验证正则表达式的执行是否产生了任何结果，并将创建一个名为**row**的JSON对象。然后，我们只需要将JSON对象添加到`jsonObject`数组中。
- en: 'Next, we will construct the last piece of the Node.js application. We will
    create a JSON file with the JSON array that we created. We need to place the following
    code in the `#5` line of the code, as seen in the previous section:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建Node.js应用程序的最后一部分。我们将创建一个JSON文件，其中包含我们创建的JSON数组。我们需要将以下代码放在代码的第`#5`行，就像在前一节中看到的那样：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn more about the `writeFile` function, please refer to [http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`writeFile`函数的信息，请参考[http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback](http://nodejs.org/api/fs.html#fs_fs_writefile_filename_data_options_callback)。
- en: 'The result will be a JSON with content similar to the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个类似以下内容的JSON：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Display the JSON in a table
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在表中显示JSON
- en: 'The last step is to create a simple HTML page to display the Apache log content.
    We are going to create an HTML file and place the following code in it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建一个简单的HTML页面来显示Apache日志内容。我们将创建一个HTML文件，并将以下代码放入其中：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code contains the required JavaScript and CSS imports, so that
    we can display the Apache log.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含所需的JavaScript和CSS导入，以便我们可以显示Apache日志。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The table for this example was created using a Bootstrap table. For more information
    on its usage and examples, please access [http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html](http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的表是使用Bootstrap表创建的。有关其用法和示例的更多信息，请访问[http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html](http://wenzhixin.net.cn/p/bootstrap-table/docs/examples.html)。
- en: 'The next and last piece of code is the body of the HTML:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个也是最后一个代码片段是HTML的正文：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The body will hold a table that will read the content of the `log.json` file,
    parse it, and display it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正文将包含一个表，该表将读取`log.json`文件的内容，解析并显示它。
- en: To be able to open the html file in the browser, we need a server. This is because
    our code is using an Ajax request to load the JSON file created by the Node.js
    application. Since we have Node.js installed, we can use its simplest server to
    execute our code.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在浏览器中打开html文件，我们需要一个服务器。这是因为我们的代码正在使用Ajax请求来加载Node.js应用程序创建的JSON文件。由于我们已经安装了Node.js，我们可以使用它最简单的服务器来执行我们的代码。
- en: 'In the terminal, execute the following command to install the server:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，执行以下命令以安装服务器：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, change the directory to the one you created for the HTML file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将目录更改为为HTML文件创建的目录：
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, start the server:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，启动服务器：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will be able to see the results from the `http://localhost:8080/` URL.
    We can see the final result in the following image:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够在`http://localhost:8080/` URL中看到结果。我们可以在以下图片中看到最终结果：
- en: '![Display the JSON in a table](img/2258OS_05_10.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![在表中显示JSON](img/2258OS_05_10.jpg)'
- en: 'We can also toggle the results in the table and view the complete data:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以切换表中的结果并查看完整的数据：
- en: '![Display the JSON in a table](img/2258OS_05_11.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![在表中显示JSON](img/2258OS_05_11.jpg)'
- en: Now we are done with our sample Node.js application, which has read and parsed
    an Apache log file and can be displayed in a friendlier way.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的示例Node.js应用程序，它已经读取并解析了Apache日志文件，并可以以更友好的方式显示出来。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a simple Node.js application that
    read an Apache log file and extracted the log information using a regular expression.
    We were able to put in to practice the knowledge we acquired in the previous chapters
    of the book.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建一个简单的Node.js应用程序，读取Apache日志文件并使用正则表达式提取日志信息。我们能够将我们在本书前几章中所学到的知识付诸实践。
- en: We also learned that to create a very complex Regex, it is best to do it in
    parts. We learned that we can be very specific while creating a regular expression
    or we can be more generic and achieve the same results.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学到，要创建一个非常复杂的正则表达式，最好是分步进行。我们学到，创建正则表达式时可以非常具体，也可以更通用，从而达到相同的结果。
- en: As a new version of **EcmaScript** is being created (EcmaScript 6, which will
    add lots of new features to JavaScript), it is good to familiarize yourself with
    the improvements related to regular expressions as well. For more information
    please visit [http://www.ecmascript.org/dev.php](http://www.ecmascript.org/dev.php).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**EcmaScript**的新版本（EcmaScript 6）的创建（将为JavaScript添加许多新功能），熟悉与正则表达式相关的改进是很好的。有关更多信息，请访问[http://www.ecmascript.org/dev.php](http://www.ecmascript.org/dev.php)。
- en: We hope you enjoy the book! Have fun creating regular expressions!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您喜欢这本书！玩得开心，创建正则表达式！
