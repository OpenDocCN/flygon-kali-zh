- en: Connection Between Delegates and Lambda Expressions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 委托和Lambda表达式之间的连接
- en: In this chapter, we'll take a look at the connection between delegates and Lambda
    expressions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下委托和Lambda表达式之间的连接。
- en: Adding a Show Results button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加一个显示结果的按钮
- en: 'Open up a project and, inside the <html>, put in a single button that says
    Show Results. To do this, go to Toolbox and grab a `Button` control. Drag and
    drop it below the line beginning with `<form id=...`. You can delete the `<div>`
    lines as you don''t need them. Be sure to insert a `<br>` tag at the end of the
    line with the button:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，在<html>中放入一个显示结果的按钮。要做到这一点，去工具箱中找到`Button`控件。将其拖放到以`<form id=...`开头的行下面。你可以删除`<div>`行，因为你不需要它们。确保在按钮行的末尾插入一个`<br>`标签：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I'll do a hodgepodge of things just to show you different concepts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我将做一些大杂烩的事情，只是为了向你展示不同的概念。
- en: 'Go to the Design view, and double-click on the Show Results button. This takes
    us into `Default.aspx.cs`. Delete the `Page_Load` block. Your initial code screen
    for this project should look like *Figure 6.1.1*:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 转到设计视图，并双击显示结果按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。该项目的初始代码屏幕应该如*图6.1.1*所示：
- en: '![](img/e3e4308a-8be4-4a24-bef4-e473f2ba9749.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3e4308a-8be4-4a24-bef4-e473f2ba9749.png)'
- en: 'Figure 6.1.1: The initial Default.aspx.cs code for this project'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1.1：该项目的初始Default.aspx.cs代码
- en: Adding delegates
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加委托
- en: 'In the first stage, you have to add delegates. While you could put these into
    a separate file, for our purposes let''s just place them here. So, enter the following
    above the line beginning with `public partial class...`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段，你需要添加委托。虽然你可以把它们放到一个单独的文件中，但为了我们的目的，让我们把它们放在这里。因此，在以`public partial class...`开头的行上面输入以下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Remember, delegates are function or method wrappers, actually. Then, directly
    below this line, enter the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，委托实际上是函数或方法的包装器。然后，在这一行的正下方，输入以下内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see here that we have two delegates. One returns a `Boolean` data type,
    and the other one returns a `double` data type.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们有两个委托。一个返回`Boolean`数据类型，另一个返回`double`数据类型。
- en: Setting up the variables
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置变量
- en: 'Next, inside the event handler for `Button1_Click`, we''ll make two variables:
    `x` (which we set to `10`), and `y`, which equals `25`. So, enter the following
    between the set of curly braces:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Button1_Click`的事件处理程序中，我们将创建两个变量：`x`（设置为`10`）和`y`（等于`25`）。因此，在大括号之间输入以下内容：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Making objects of the delegate type
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建委托类型的对象
- en: 'Now, the next thing that we will do is to enter the following below the preceding
    line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们要在上一行下面输入以下内容：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you begin to enter `Compare`, notice from the popup that once you have a
    delegate (`Compare`), essentially, you can make objects of that kind; then, type
    `comp`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始输入`Compare`时，注意到从弹出窗口，一旦你有了一个委托（`Compare`），实质上，你可以创建那种对象；然后，输入`comp`。
- en: Defining lambda expressions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Lambda表达式
- en: Now, to define a lambda expression, you put `= (a,b)`, as shown. Then this will
    be mapped to the operations that follow; so you think of `=>` as the mapping symbol
    or mapping operator. It'll be mapped to the `(a==b)` operation. So, `comp`, in
    other words, will allow us to check whether the two values are the same, and that
    happens in the stage right where `a` and `b` are compared. Basically, `(a, b)`
    are the parameters, and the expression that is evaluated is whether `a` is equal
    to `b`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要定义一个Lambda表达式，你需要输入`= (a,b)`，如所示。然后这将被映射到后面的操作；所以你可以把`=>`看作映射符号或映射操作符。它将被映射到`(a==b)`操作。因此，换句话说，`comp`将允许我们检查这两个值是否相同，这发生在`a`和`b`被比较的阶段。基本上，`(a,
    b)`是参数，被评估的表达式是`a`是否等于`b`。
- en: 'Now, enter the following next:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To invoke this, note that you type `comp` and then pass in the `x` and `y` values.
    Then, to show that you can operate on this further, once you get a result from
    it, you can convert it, say, to a string version, and then all to lowercase, as
    shown in the preceding code line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用这个，注意你要输入`comp`，然后传入`x`和`y`的值。然后，为了显示你可以进一步操作它，一旦你得到了结果，你可以将其转换为字符串版本，然后全部转换为小写，就像前面的代码行所示。
- en: Remember, this is *function chaining*, so it goes from left to right as it executes.
    In other words, first `comp` runs, then `ToString` and lastly `ToLower`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这是*函数链接*，所以它从左到右执行。换句话说，首先运行`comp`，然后是`ToString`，最后是`ToLower`。
- en: Also, note that, at runtime, when you pass in the `x` and `y` values when `comp(x,
    y)` is called, basically, it is `(a==b)` that will be hit; the comparison will
    be made, and the value will be sent back.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，在运行时，当你传入`x`和`y`值时，调用`comp(x, y)`，基本上就是`(a==b)`会被触发；比较将会被执行，并且值将被返回。
- en: 'Next, we can also do the `Multiply` delegate, so enter the following below
    this line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还可以做`Multiply`委托，所以在这一行下面输入以下内容：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that `(a,b)` can be used and reused and so on. Remember that `(a,b)`
    here are parameters, and you can use them and reuse them. They're local within
    each of the lines where they appear. So, then you can use it in another one. Then,
    you say again that `(a,b)` maps to an operation of `(a*b)`. Close this with a
    semicolon.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`(a,b)`可以被使用和重复使用等等。记住，这里的`(a,b)`是参数，你可以使用它们并重复使用它们。它们在出现的每一行中都是局部的。因此，你可以在另一行中使用它。然后，你再次说`(a,b)`映射到`(a*b)`的操作。以分号结束。
- en: 'Now, to invoke this multiplication delegate (Lambda expression that it represents),
    copy (*Ctrl* + *C*) the `sampLabel.Text` line from above and paste it (*Ctrl*
    + *V*) down below, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要调用这个乘法委托（它代表的Lambda表达式），从上面复制（*Ctrl* + *C*）`sampLabel.Text`行，然后粘贴（*Ctrl*
    + *V*）到下面，如下所示：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we say `{x}*{y}` instead and then, `+=` to append, and delete `are equal`,
    and replace `comp` with `mult` as the name of our object. You don't need `toString`
    for it to work, and since it'll give back a number, you don't need `ToLower` either.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说`{x}*{y}`，然后`+=`追加，并删除`are equal`，并用我们对象的名称`mult`替换`comp`。你不需要`toString`让它工作，而且因为它会返回一个数字，你也不需要`ToLower`。
- en: Operating an array
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作数组
- en: 'Now, in the next stage, another thing that you can do is operate an array.
    For example, you can make an array of doubles. We''ll call it `dubsArray`, and
    this will be a new `double` array. To do this, enter the following on the next
    line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一个阶段，你可以做的另一件事是操作一个数组。例如，你可以创建一个双精度数组。我们将其称为“dubsArray”，这将是一个新的双精度数组。要做到这一点，在下一行输入以下内容：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Working with actions
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用操作
- en: 'Now, we will talk about actions, so enter the following as the next line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论操作，所以在下一行输入以下内容：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that `Action` is a delegate. So, if you right-click on `Action` and select
    Go To Definition, you'll see `public delegate void Action()`. If you expand it,
    it says, Encapsulates a method that has no parameters and does not return a value.
    This is the essential definition of an action in .NET.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，“操作”是一个代理。所以，如果你右键单击“操作”并选择“转到定义”，你会看到“public delegate void Action()”。如果你展开它，它说，封装了一个没有参数并且不返回值的方法。这是.NET中操作的基本定义。
- en: You can extend an `Action` delegate, however. They can be generic. For example,
    if you type `Action<double>` and right-click on it and select Go To Definition
    again, this particular form does take a parameter. If you expand it, the Parameters
    section says, The parameter of the method that this delegate encapsulates. Further,
    the *Summary* section says, Encapsulates a method that has a single parameter
    and does not return a value. So, again, there's no need to guess. Right-click
    and select Go To Definition or hover your mouse over it. It tells you what you
    need to know. In our case, it will actually be `showDouble` as seen in the preceding
    line. Now, another lambda can be used to define this; so you insert `(a)` there
    as a single parameter, then, enter the mapping symbol `=>`, and then, `sampLabel.text`.
    You want to append this to the existing text, so type `+=`, and then, you say,
    `<br>`, and then show the square of `a`, type `+ (a * a)` and close with a semicolon.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，你可以扩展一个“操作”代理。它们可以是通用的。例如，如果你输入“Action<double>”，然后右键单击它并再次选择“转到定义”，这个特定形式确实需要一个参数。如果你展开它，参数部分说，这个代理封装的方法的参数。此外，“摘要”部分说，封装了一个具有单个参数并且不返回值的方法。所以，再次强调，没有必要猜测。右键单击并选择“转到定义”或将鼠标悬停在上面。它会告诉你需要知道的内容。在我们的情况下，实际上将是在前一行中看到的“showDouble”。现在，另一个lambda可以用来定义这个；所以你在那里插入“(a)”作为单个参数，然后输入映射符号“=>”，然后是“sampLabel.text”。你想要将这个附加到现有的文本上，所以输入“+=”，然后说，“<br>”，然后显示“a”的平方，输入“+
    (a * a)”并以分号结束。
- en: Now remember from the definition of `Actions`, they do not return a value, right?
    In fact, if we type `Action<double>,` and look at the pop-up tip, if you go through
    the entire list up through T16, it says, Encapsulates a method that has 16 parameters
    and does not return a value, as shown in *Figure 6.1.2:*
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在记住从“操作”的定义中，它们不返回值，对吧？事实上，如果我们输入“Action<double>”，并查看弹出提示，如果你浏览整个列表直到T16，它说，封装了一个具有16个参数并且不返回值的方法，如*图6.1.2*所示：
- en: '![](img/290730d1-917b-43a2-a32e-80470a439338.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/290730d1-917b-43a2-a32e-80470a439338.png)'
- en: Figure 6.1.2\. None of the actions return a value after typing Action<double>,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1.2。在输入Action<double>后，没有一个操作返回值，
- en: So, none of them return a value. This is a basic feature of `Actions` as they
    are defined here, but remember that ultimately it's just a delegate.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它们都不返回值。这是“操作”作为它们在这里定义的一个基本特性，但请记住，最终它只是一个代理。
- en: 'Then, for example, to make use of these `Actions`, one thing that you can do
    is to enter the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，例如，要利用这些“操作”，你可以做的一件事是输入以下内容：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the next stage, enter the following between a set of curly braces below
    this line to invoke the actions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个阶段，在这行下面的花括号之间输入以下内容来调用这些操作：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These are the basics of working with delegates and Lambda expressions. The two
    delegates at the top of the file are the heart of our program, followed by `Compare`
    and `Multiply`, which are the delegate types being used down below, and then the
    Lambda expressions, which are parameter expressions, such as `(a, b) => (a ==
    b)`, `(a, b) => (a * b)`, and `(a) => sampLabel.Text += "<br>" + (a * a)`, which
    are defined using those delegates.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是使用代理和Lambda表达式的基础。文件顶部的两个代理是我们程序的核心，然后是“Compare”和“Multiply”，它们是下面使用的代理类型，然后是使用这些代理定义的Lambda表达式，如“(a,
    b) => (a == b)”，“(a, b) => (a * b)”，和“(a) => sampLabel.Text += "<br>" + (a * a)”。
- en: 'Now, take a look at this in your browser. Click on the Show Results button.
    It says, 10 and 25 are equal is false and 10*25 is 250, and then the squares are
    printed. These are the basic results, and everything looks as it''s supposed to
    look:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用浏览器查看一下。点击“显示结果”按钮。它说，10和25相等是假的，10*25是250，然后打印出了平方。这些是基本的结果，一切看起来都是应该的：
- en: '![](img/9925cc6d-8d67-430e-b075-7fa7c6f5fcd5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9925cc6d-8d67-430e-b075-7fa7c6f5fcd5.png)'
- en: Figure 6.1.3\. The results of running our program
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1.3。运行我们的程序的结果
- en: Chapter review
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review purposes, the complete version of the `Default.aspx.cs` file for
    this chapter, including comments, is shown in the following code block:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 出于复习目的，包括注释的本章的“Default.aspx.cs”文件的完整版本如下所示：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the connection between delegates and lambda expressions.
    You added delegates, set up the project variables, made objects of the delegate
    type, operated an array, and worked with `Actions`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了代理和lambda表达式之间的关系。你添加了代理，设置了项目变量，创建了代理类型的对象，操作了一个数组，并使用了“操作”。
- en: In the next chapter, you will learn about expression-bodied members and then
    lambda expressions defined by blocks of code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于表达式主体成员以及由代码块定义的lambda表达式。
