["```java\nhours ==35;\npayRate = 8.55;\npay = hours * payRate;\nSystem.out.println(pay);\n```", "```java\nboolean isComplete;\nboolean isReady = true;  // Initialized to true\nboolean errorPresent;\n```", "```java\nage > 45\nage > 45 && departmentNumber == 200\n((flowRate > minFlowRate) || ((flowRate > maxFlowRate) && (valveA == off)))\n```", "```java\nint rate;\nrate = 100;\nboolean errorPresent = rate==100;\nSystem.out.println(errorPresent);\n```", "```java\ntrue\n\n```", "```java\nage > 25 && age < 35\n```", "```java\n25 < age < 35\n```", "```java\nerrorPresent = rate == 100 || period > 50;\nerrorPresent = (rate == 100) || (period > 50);\n```", "```java\nerrorPresent = ((period>50) || (rate==100)) && (yaw>56);\n```", "```java\nif (sum > 1200 && amount <500)...\n```", "```java\nprivate static boolean evaluateThis() {\n    System.out.println(\"evaluateThis executed\");\n    return false;\n}\nprivate static boolean evaluateThat() {\n    System.out.println(\"evaluateThat executed\");\n    return false;\n}\n```", "```java\nif(evaluateThis() && evaluateThat()) {\n    System.out.println(\"The result is true\");\n} else {\n    System.out.println(\"The result is false\");\n}\n```", "```java\nevaluateThis executed\nThe result is false\n\n```", "```java\nprivate static boolean evaluateThis() {\n    System.out.println(\"evaluateThis executed\");\n    return true;\n}\n\n    ...\n\nif(evaluateThis() || evaluateThat()) {\n    System.out.println(\"The result is true\");\n} else {\n    System.out.println(\"The result is false\");\n}\n```", "```java\nevaluateThis executed\nThe result is true\n\n```", "```java\nprivate static boolean evaluateThat() {\n   System.out.println(\"evaluateThat executed\");\n   state = 10;\n   return false;\n}\n```", "```java\nif (evaluateThis() & evaluateThat()) {\n   System.out.println(\"The result is true\");\n} else {\n   System.out.println(\"The result is false\");\n}\n```", "```java\nevaluateThis executed\nevaluateThat executed\nThe result is false\n\n```", "```java\nif (rate==100) System.out.println(\"rate is equal to 100\");\n```", "```java\nif (rate == 100) \n   System.out.println(\"rate is equal to 100\");\n```", "```java\nif (rate == 100) {\n    System.out.println(\"rate is equal to 100\");\n}\n```", "```java\nif (rate == 100) {\n   System.out.println(\"rate is equal to 100\");\n} else {\n   System.out.println(\"rate is not equal to 100\");\n}\n```", "```java\nif (amount > limit) {\n  System.out.println(\"Your limit has been exceeded\");\n}\n```", "```java\nif (amount > limit) {\n  System.out.println(\"Your limit has been exceeded\");\n} else {\n  // Do nothing\n}\n```", "```java\nif (amount > limit) {\n   System.out.println(\"Your limit has been exceeded\");\n} else {\n   ;    // Do nothing\n}\n```", "```java\nif (limitIsNotExceeded) {\n   System.out.println(\"Ready\");\n   if (variationIsAcceptable) {\n      System.out.println(\" to go!\");\n   } else {\n      System.out.println(\" \u2013 Not!\");\n   }\n   // Additional processing\n} else {\n   System.out.println(\"Not Ok\");\n}\n```", "```java\nif (zone.equals(\"East\")) {\n   shippingCost = weight * 0.23f;\n} else if (zone.equals(\"NorthCentral\")) {\n   shippingCost = weight * 0.35f;\n} else if (zone.equals(\"SouthCentral\")) {\n   shippingCost = weight * 0.17f;\n} else {\n   shippingCost = weight * 0.25f;\n}\n```", "```java\nif (zone.equals(\"East\")) {\n   shippingCost = weight * 0.23f;\n} else \n   if (zone.equals(\"NorthCentral\")) {\n      shippingCost = weight * 0.35f;\n   } else \n      if (zone.equals(\"SouthCentral\")) {\n         shippingCost = weight * 0.17f;\n      } else {\n         shippingCost = weight * 0.25f;\n      }\n```", "```java\nif(rate == 100) {\n   \u2026\n}\n\n```", "```java\n  if(rate = 100) {\n\u2026\n}\n```", "```java\nincompatible types\n required: boolean\n found:    int\n\n```", "```java\ni = j = k = 10;\n```", "```java\nfinal int LEGAL_AGE = 21;\nint age = 12;\n\nif(age >= LEGAL_AGE) {\n   // Process\n} else {\n   // Do not process\n}\n```", "```java\nif(age < LEGAL_AGE) {\n   // Do not process\n} else {\n   // Process\n}\n```", "```java\nboolean isLegalAge = age >= LEGAL_AGE;\n\nif (isLegalAge) {\n   // Process\n} else {\n   // Do not process\n}\n```", "```java\nif (!isLegalAge) {\n   // Do not process\n} else {\n   // Process\n}\n```", "```java\nif (!isNotLegalAge) {\n   // Process\n} else {\n   // Do not process\n}\n```", "```java\nif (isLegalAge == true) {\n   // Process\n} else {\n   // Do not process\n}\n```", "```java\nif (isLegalAge) {\n   System.out.println(\"Of legal age\");\n   System.out.println(\"Also of legal age\");\n} else {\n   System.out.println(\"Not of legal age\");\n} \n```", "```java\nif (isLegalAge) \n   System.out.println(\"Of legal age\");\n   System.out.println(\"Also of legal age\");\nelse {\n   System.out.println(\"Not of legal age\");\n}\n```", "```java\nif (isLegalAge) \n   System.out.println(\"Of legal age\");\nSystem.out.println(\"Also of legal age\");\nelse {\n   System.out.println(\"Not of legal age\");\n}\n```", "```java\n'else' without 'if'\n\n```", "```java\nif (isLegalAge) \n   System.out.println(\"Of legal age\");\nelse\n   System.out.println(\"Not of legal age\");\n   System.out.println(\"Also not of legal age\");\n```", "```java\nif (isLegalAge) \n   System.out.println(\"Of legal age\");\nelse \n   System.out.println(\"Not of legal age\");\nSystem.out.println(\"Also not of legal age\");\n```", "```java\nif (isLegalAge) {\n   System.out.println(\"Of legal age\");\n} else {\n   System.out.println(\"Not of legal age\");\n   System.out.println(\"Also not of legal age\");\n}\n```", "```java\nif (limit > 100) \n   if (stateCode == 45) \n      limit = limit+10;\nelse\n   limit = limit-10;\n```", "```java\nif (limit > 100) \n   if (stateCode == 45) \n      limit = limit+10;\n   else\n      limit = limit-10;\n```", "```java\nif (limit > 100) if (stateCode == 45) limit = limit+10; else limit = limit-10;\n```", "```java\nif (limit > 100) {\n   if (stateCode == 45) {\n      limit = limit+10;\n   }\n} else {\n   limit = limit-10;\n}\n```", "```java\nresult = (num < 10) ? 1 : 2;\n```", "```java\nif (num < 10) {\n   result = 1;\n} else {\n   result = 2;\n}\n```", "```java\nfloat hoursWorked;\nfloat payRate;\nfloat pay;\n\nif (hoursWorked <= 40) {\n   pay = hoursWorked * payRate;\n} else {\n   pay = 40 * payRate + (hoursWorked - 40) * payRate;\n}\n```", "```java\npayRate = (hoursWorked <= 40) ? \n   hoursWorked * payRate : \n   40 * payRate + (hoursWorked - 40) * payRate;\n```", "```java\nswitch ( expression ) {\n  //case clauses\n}\n```", "```java\ncase <constant-expression>:\n  //statements\nbreak;\n```", "```java\ndefault:\n  //statements\nbreak;  // Optional\n```", "```java\nswitch (expression) {\n  case value: statements\n  case value: statements\n  \u2026\n  default: statements\n}\n```", "```java\nprivate static float computeShippingCost(\n         int zone, float weight) {\n   float shippingCost;\n\n   if (zone == 5) {\n      shippingCost = weight * 0.23f;\n   } else if (zone == 6) {\n      shippingCost = weight * 0.23f;\n   } else if (zone == 15) {\n      shippingCost = weight * 0.35f;\n   } else if (zone == 18) {\n      shippingCost = weight * 0.17f;\n   } else {\n      shippingCost = weight * 0.25f;\n   }\n\n   return shippingCost;\n}\n```", "```java\nswitch (zone) {\n   case 5:\n      shippingCost = weight * 0.23f;\n      break;\n   case 6:\n      shippingCost = weight * 0.23f;\n      break;\n   case 15:\n      shippingCost = weight * 0.35f;\n      break;\n   case 18:\n      shippingCost = weight * 0.17f;\n      break;\n   default:\n      shippingCost = weight * 0.25f;\n}\n```", "```java\nswitch (zone) {\n   case 15:\n      shippingCost = weight * 0.35f;\n      break;\n   default:\n      shippingCost = weight * 0.25f;\n      break; // Only needed if default is not\n             // the last case clause\n   case 5:\n      shippingCost = weight * 0.23f;\n      break;\n   case 18:\n      shippingCost = weight * 0.17f;\n      break;\n   case 6:\n      shippingCost = weight * 0.23f;\n      break;\n}\n```", "```java\nswitch (zone) {\n   case 5:\n   case 6:\n      shippingCost = weight * 0.23f;\n      break;\n   case 15:\n      shippingCost = weight * 0.35f;\n      break;\n   case 18:\n      shippingCost = weight * 0.17f;\n      break;\n   default:\n      shippingCost = weight * 0.25f;\n}\n```", "```java\nprivate static enum Directions {\n    NORTH, SOUTH, EAST, WEST\n};\n\nDirections direction = Directions.NORTH;\n\nswitch (direction) {\n    case NORTH:\n        System.out.println(\"Going North\");\n        break;\n    case SOUTH:\n        System.out.println(\"Going South\");\n        break;\n    case EAST:\n        System.out.println(\"Going East\");\n        break;\n    case WEST:\n        System.out.println(\"Going West\");\n        break;\n}\n```", "```java\nGoing North\n\n```", "```java\nif (zone.equals(\"East\")) {\n   shippingCost = weight * 0.23f;\n} else if (zone.equals(\"NorthCentral\")) {\n   shippingCost = weight * 0.35f;\n} else if (zone.equals(\"SouthCentral\")) {\n   shippingCost = weight * 0.17f;\n} else {\n   shippingCost = weight * 0.25f;\n}\n```", "```java\nswitch (zone) {\n   case \"East\":\n      shippingCost = weight * 0.23f;\n      break;\n   case \"NorthCentral\":\n      shippingCost = weight * 0.35f;\n      break;\n   case \"SouthCentral\":\n      shippingCost = weight * 0.17f;\n      break;\n   default:\n      shippingCost = weight * 0.25f;\n}\n```", "```java\nfloat num1 = 0.0f;\n\nSystem.out.println(num1 / 0.0f);\nSystem.out.println(Math.sqrt(-4));\nSystem.out.println(Double.NaN + Double.NaN);\nSystem.out.println(Float.NaN + 2);\nSystem.out.println((int) Double.NaN);\n```", "```java\nNaN\nNaN\nNaN\nNaN\n0\n\n```", "```java\nSystem.out.println(Float.NEGATIVE_INFINITY);\nSystem.out.println(Double.NEGATIVE_INFINITY);\nSystem.out.println(Float.POSITIVE_INFINITY);\nSystem.out.println(Double.POSITIVE_INFINITY);\nSystem.out.println(Float.POSITIVE_INFINITY+2);\nSystem.out.println(1.0 / 0.0);\nSystem.out.println((1.0 / 0.0) - (1.0 / 0.0));\nSystem.out.println(23.0f / 0.0f);\nSystem.out.println((int)(1.0 / 0.0)); \nSystem.out.println(Float.NEGATIVE_INFINITY == Double.NEGATIVE_INFINITY);\n```", "```java\n-Infinity\n-Infinity\nInfinity\nInfinity\nInfinity\nInfinity\nNaN\nInfinity\n2147483647\nTrue\n\n```", "```java\nSystem.out.println(-1.0f / Float.POSITIVE_INFINITY);\nSystem.out.println(1.0f / Float.NEGATIVE_INFINITY);\n```", "```java\nSystem.out.println(0 == -0);\n```", "```java\nTrue\n\n```", "```java\ndouble num2 = 1.2f;\ndouble num3 = 0.2f;\nSystem.out.println((num2 / num3) == 6);\n```", "```java\nfalse\n\n```", "```java\nfloat epsilon = 0.000001f;\nif (Math.abs((num2 / num3) - 6) < epsilon) {\n   System.out.println(\"They are effectively equal\");\n} else {\n   System.out.println(\"They are not equal\");\n}\n```", "```java\nThey are effectively equal\n\n```", "```java\nSystem.out.println((new Float(-2.0)).compareTo(-0.0f));\n```", "```java\nfor(int i = 0; i < 10; i++) {\n   sum += 0.1f;\n}\nSystem.out.println(sum);\n```", "```java\n1.0000001\n\n```", "```java\n    System.out.println(4 % 3);\n    ```", "```java\n    System.out.println( 16  >>>  3);\n    ```", "```java\n    int i = 3;\n    int j = 3;\n    int k = 3;\n    ```", "```java\n    switch (5) {\n    case 0:\n       System.out.println(\"zero\");\n       break;\n    case 1:\n       System.out.println(\"one\");\n    default:\n       System.out.println(\"default\");\n    case 2:\n       System.out.println(\"two\");\n    }\n    ```"]