- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The aim of this book is to provide you with in-depth knowledge of how Docker
    implements container networking. Whether you use Docker every day or are just
    getting started, this book will introduce you to how Docker uses Linux networking
    primitives to network containers. Through numerous examples, we’ll cover everything
    from the fundamentals of Linux networking to the latest Docker networking drivers.
    Along the way, we’ll also look at integrating existing networking constructs and
    third-party plugins into Docker. The end goal is for you to be comfortable with
    the process Docker uses to provide networking capabilities to containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目的是为您提供关于Docker如何实现容器网络的深入知识。无论您是每天都在使用Docker，还是刚刚开始接触，本书都将向您介绍Docker如何使用Linux网络原语来为容器进行网络连接。通过大量示例，我们将涵盖从Linux网络基础知识到最新的Docker网络驱动程序的所有内容。在此过程中，我们还将探讨如何将现有的网络结构和第三方插件集成到Docker中。最终目标是让您对Docker提供容器网络功能的过程感到舒适。
- en: Like many open source projects, Docker is a fast-moving piece of software. At
    the time of publication, the most recent version of Docker was 1.12\. I’ve done
    my best to ensure that the content in this book reflects the most up-to-date features
    and configurations based on this version. Regardless of the version, many of these
    features have existed in one form or another since the very early versions of
    Docker. So while there have been significant changes in Docker networking over
    the last couple of years, much of the network functionality is still implemented
    in the same manner. It is for this reason that I believe the majority of the content
    in this book will remain relevant for a long time to come.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多开源项目一样，Docker是一个快速发展的软件。在出版时，最新版本的Docker是1.12。我已尽力确保本书中的内容反映了基于这个版本的最新功能和配置。无论版本如何，这些功能中的许多在Docker的早期版本中以某种形式存在。因此，尽管在过去几年中Docker的网络功能发生了重大变化，但大部分网络功能仍然以相同的方式实现。正是因为这个原因，我相信本书中的大部分内容在未来很长一段时间内仍然具有相关性。
- en: '**What this book covers**'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**本书涵盖的内容**'
- en: '[Chapter 1](ch01.html "Chapter 1. Linux Networking Constructs"), *Linux Networking
    Constructs*, will focus on introducing you to Linux networking primitives. Topics
    such as interface creation, addressing, and general connectivity will be discussed
    in detail. You will also be introduced to common Linux command-line syntax and
    tooling as it relates to Linux host network configuration. Understanding these
    basic constructs will greatly increase your ability to understand how Docker handles
    container networking.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. Linux网络结构") *Linux网络结构*，将重点介绍Linux网络原语。诸如接口创建、寻址和一般连接性等主题将被详细讨论。您还将了解与Linux主机网络配置相关的常见Linux命令行语法和工具。了解这些基本结构将极大地增加您理解Docker如何处理容器网络的能力。'
- en: '[Chapter 2](ch02.html "Chapter 2. Configuring and Monitoring Docker Networks"),
    *Configuring and Monitoring Docker Networks*, explains the default means in which
    Docker handles container networking. These include bridge, host, and mapped container
    modes of Docker network operation. We’ll also begin our exploration of how Docker
    handles mapping container-based services to the outside or external network. There
    will also be discussion around Linux host requirements for Docker networking and
    some of the possible Docker service-level parameters that can be modified.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 配置和监控Docker网络") *配置和监控Docker网络*，解释了Docker处理容器网络的默认方式。这包括Docker网络操作的桥接、主机和映射容器模式。我们还将开始探讨Docker如何将基于容器的服务映射到外部或外部网络。还将讨论Docker网络的Linux主机要求以及一些可能被修改的Docker服务级参数。'
- en: '[Chapter 3](ch03.html "Chapter 3. User-Defined Networks"), *User-Defined Networks*,
    begins our discussion on Docker user-defined networks. The advent of user-defined
    networks has greatly increased the flexibility of Docker networking providing
    the end user far more possibilities in regard to container connectivity. We’ll
    discuss the syntax required to create user-defined networks as well as show examples
    of how to create user-defined bridge and overlay-based networks. Finally, we’ll
    cover some options to isolate network segments within Docker.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“用户定义的网络”，开始了我们关于Docker用户定义网络的讨论。用户定义网络的出现极大地增加了Docker网络的灵活性，为最终用户提供了更多关于容器连接的可能性。我们将讨论创建用户定义网络所需的语法，并展示如何创建用户定义的桥接和覆盖网络的示例。最后，我们将介绍一些在Docker中隔离网络段的选项。
- en: '[Chapter 4](ch04.html "Chapter 4. Building Docker Networks"), *Building Docker
    Networks*, begins with a deep dive into how Docker provides container connectivity.
    Starting with a container that was provisioned without a network interface, we’ll
    cover all the steps required in order to get the container communicating on the
    network. We’ll then move on to discuss other options to use custom bridges with
    Docker and cover multiple use cases related to using OVS in conjunction with Docker.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“构建Docker网络”，首先深入探讨了Docker如何提供容器连接。从一个没有网络接口的容器开始，我们将介绍在网络上使容器通信所需的所有步骤。然后，我们将讨论使用自定义桥接与Docker以及与Docker一起使用OVS的多个用例。
- en: '[Chapter 5](ch05.html "Chapter 5. Container Linking and Docker DNS"), *Container
    Linking and Docker DNS*, discusses the available options for container name resolution.
    This includes both the default name resolution behavior as well as the new embedded
    DNS server functionality that exists with user-defined networks. You will become
    comfortable with the process used to determine name server assignment in each
    of these scenarios.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，“容器链接和Docker DNS”，讨论了容器名称解析的可用选项。这包括默认的名称解析行为以及存在于用户定义网络中的新嵌入式DNS服务器功能。您将熟悉确定每种情况下名称服务器分配的过程。
- en: '[Chapter 6](ch06.html "Chapter 6. Securing Container Networks"), *Securing
    Container Networks*, shows a variety of features and strategies that are related
    to container security. You will be exposed to several options to limit the scope
    of container exposure and connectivity. We’ll also discuss options to implement
    a container-based load balancer that utilizes a user-defined overlay network.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，“保护容器网络”，展示了与容器安全相关的各种功能和策略。您将了解到几种限制容器暴露和连接范围的选项。我们还将讨论实现利用用户定义的覆盖网络的基于容器的负载均衡器的选项。
- en: '[Chapter 7](ch07.html "Chapter 7. Working with Weave Net"), *Working with Weave
    Net*, will be our first look at a third-party networking solution that integrates
    with Docker. Weave provides multiple methods to integrate with Docker including
    its own CLI tool as well as a full-blown Docker driver. An example of using Weave
    to provide network isolation will also be demonstrated.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，“使用Weave Net”，将是我们首次接触与Docker集成的第三方网络解决方案。Weave提供了多种与Docker集成的方法，包括其自己的CLI工具以及一个完整的Docker驱动程序。还将演示使用Weave提供网络隔离的示例。
- en: '[Chapter 8](ch08.html "Chapter 8. Working with Flannel"), *Working with Flannel*,
    examines the third-party network plugin built by the team at CoreOS. Flannel is
    an interesting example of how a networking plugin can be integrated into Docker
    just by changing Docker service-level parameters. In addition to providing overlay
    type networking, Flannel also offers a host gateway backend that allows the hosts
    to route directly to each other so long as they meet certain requirements.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章《使用Flannel》，*使用Flannel*，检查了由CoreOS团队构建的第三方网络插件。Flannel是一个有趣的例子，说明了网络插件如何通过更改Docker服务级参数来集成到Docker中。除了提供覆盖类型的网络外，Flannel还提供了主机网关后端，允许主机在满足某些要求的情况下直接路由到彼此。
- en: '[Chapter 9](ch09.html "Chapter 9. Exploring Network Features"), *Exploring
    Network Features*, focuses on how newer networking features are integrated into
    Docker. We’ll examine how you can gain access to and test these new features by
    evaluating different versions of Docker engine. Through the course of the chapter,
    we’ll also examine the now integrated MacVLAN network driver as well as the IPVLAN
    network driver, which is still in testing.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章《探索网络功能》，*探索网络功能*，侧重于新的网络功能如何集成到Docker中。我们将研究如何通过评估不同版本的Docker引擎来获得对这些新功能的访问和测试。在本章的过程中，我们还将研究现在集成的MacVLAN网络驱动程序以及仍在测试中的IPVLAN网络驱动程序。
- en: '[Chapter 10](ch10.html "Chapter 10. Leveraging IPv6"), *Leveraging IPv6*, covers
    IPv6 and Docker’s support of it. IPv6 is a big topic and one that deserves a great
    amount of attention considering the current state of IPv4\. In this chapter, we’ll
    review some of the basics of working with IPv6 on a Linux system. We’ll then spend
    some time reviewing how Docker supports IPv6 and discuss some of the options you
    have around deployment.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章《利用IPv6》，*利用IPv6*，涵盖了IPv6及Docker对其的支持。IPv6是一个重要的话题，考虑到IPv4的当前状态，它值得引起大量关注。在本章中，我们将回顾在Linux系统上使用IPv6的一些基础知识。然后，我们将花一些时间审查Docker如何支持IPv6，并讨论您在部署周围的一些选项。
- en: '[Chapter 11](ch11.html "Chapter 11. Troubleshooting Docker Networks"), *Troubleshooting
    Docker Networks*, examines some of the common steps you might take when troubleshooting
    Docker networking. The focus will be on validating the configuration, but you’ll
    also learn some steps you can take to prove that the configuration is working
    as intended.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章《故障排除Docker网络》，*故障排除Docker网络*，探讨了在故障排除Docker网络时可能采取的一些常见步骤。重点将放在验证配置上，但您还将学习一些可以证明配置是否按预期工作的步骤。
- en: What you need for this book
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为本书做些什么
- en: All of the labs shown in this book were performed on Ubuntu Linux hosts running
    version 16.04 and Docker engine version 1.12.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中显示的所有实验都是在运行版本16.04和Docker引擎版本1.12的Ubuntu Linux主机上执行的。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll note that the network interface names used on the hosts in this book
    use the familiar eth (eth0, eth1, and so on) naming convention. While this is
    still the standard on many versions of Linux, newer versions that run systemd
    (such as Ubuntu 16.04) now use something called Predictable Network Interface
    Names (PNIN). With PNIN, the network interface uses more predictable names based
    on the information about the interface itself. In these cases, the interface names
    will show up using different names, such as ens1 or ens32\. For the sake of making
    the content in this book easier to understand, I chose to disable PNIN on all
    of the hosts. If you’re interested in doing the same instructions can be found
    by doing a web search for ‘Ubuntu disable predictable interface names’. If you
    chose not to, just know that your interface names will show up differently than
    mine do in the examples.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，本书中主机上使用的网络接口名称使用熟悉的eth（eth0、eth1等）命名约定。虽然这在许多Linux版本上仍然是标准，但运行systemd的新版本（如Ubuntu
    16.04）现在使用称为可预测网络接口名称（PNIN）的东西。使用PNIN时，网络接口使用基于接口本身信息的更可预测的名称。在这些情况下，接口名称将以不同的名称显示，例如ens1或ens32。为了使本书中的内容更容易理解，我选择在所有主机上禁用了PNIN。如果您有兴趣执行相同的操作，可以通过网络搜索“Ubuntu禁用可预测接口名称”找到说明。如果您选择不这样做，只需知道您的接口名称将显示为与我的示例不同的方式。
- en: The requirements for labs shown in this book are included at the beginning of
    each recipe. Later recipes may build on configurations shown in earlier recipes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中显示的实验室要求包括在每个配方的开头。后续的配方可能会基于早期配方中显示的配置。
- en: Who this book is for
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁准备的
- en: This book is for people who are interested in learning more about how Docker
    implements container networking. While the recipes cover many of the basics required
    to get you up and running, it is assumed that you have a working knowledge of
    Linux and Docker. It is also assumed that you have a basic understanding of networking.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于那些对了解Docker如何实现容器网络感兴趣的人。虽然这些配方涵盖了许多基础知识，但假定您具有对Linux和Docker的工作知识，并且具有对网络的基本理解。
- en: Conventions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您会发现许多文本样式，用于区分不同类型的信息。以下是一些这些样式的例子以及它们的含义解释。
- en: 'Code words in text, file paths, and executables are shown as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、文件路径和可执行文件显示如下：
- en: '"Interfaces on the host can be seen by using the `ip link show` command".'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “可以使用`ip link show`命令在主机上查看接口”。
- en: 'Any command-line input or output is written as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都将按如下方式编写：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When possible any multiline command-line input will be written using the Linux
    line continuation method of including a trailing `\` at the end of the line to
    be continued:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，任何多行命令行输入将使用Linux行继续方法编写，即在要继续的行的末尾包括一个尾随的`\`：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In some cases command-line output will also be multiline. In those cases, formatting
    was done in an effort to make the output easily readable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，命令行输出也可能是多行的。在这种情况下，格式化是为了使输出易于阅读。
- en: 'When we wish to draw your attention to a particular part of command-line output,
    the relevant lines or items are set in bold:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对命令行输出的特别关注时，相关行或项目将以粗体显示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明显示在这样的框中。
