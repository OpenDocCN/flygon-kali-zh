- en: Code Review – Process and Importance
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查 - 流程和重要性
- en: The primary motivation behind any code review is to improve the overall quality
    of the code. Code quality is very important. This almost goes without saying,
    especially if your code is part of a team project or is accessible to others,
    such as open source developers and customers through escrow agreements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何代码审查的主要动机都是为了提高代码的整体质量。代码质量非常重要。这几乎是不言而喻的，特别是如果您的代码是团队项目的一部分或者对其他人可访问，比如通过托管协议的开源开发者和客户。
- en: If every developer was free to code as they pleased, you would end up with the
    same kind of code written in so many different ways, and ultimately the code would
    become an unwieldy mess. That is why it is important to have a coding standards
    policy that outlines the company's coding practices and code review procedures
    that are to be followed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个开发人员都可以随心所欲地编写代码，最终会得到以许多不同方式编写的相同类型的代码，最终代码将变得难以管理。这就是为什么有必要制定编码标准政策，概述公司的编码实践和应遵循的代码审查程序。
- en: When code reviews are carried out, colleagues will review the code of other
    colleagues. Colleagues will understand that it is only human to make mistakes.
    They will check the code for mistakes, coding that breaks the company's code of
    coding conduct, and any code that, while syntactically correct, can be improved
    upon to either make it more readable, more maintainable, or more performant.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 进行代码审查时，同事们将审查其他同事的代码。同事们会理解犯错误是人之常情。他们将检查代码中的错误、违反公司编码规范的编码以及在语法上正确但可以改进以使其更易读、更易维护或更高效的代码。
- en: 'Therefore, in this chapter, we will cover the following topics to understand
    the code review process in detail:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将详细介绍以下主题以了解代码审查流程：
- en: Preparing code for review
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为审查准备代码
- en: Leading a code review
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领导代码审查
- en: Knowing what to review
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道要审查什么
- en: Knowing when to send code for review
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道何时发送代码进行审查
- en: Providing and responding to review feedback
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供和回应审查反馈
- en: Please note that for the *Preparing code for review* and *Knowing when to send
    code for review *sections, we will be talking from the point of view of the **programmer.**
    For the *Leading a code review* and *Knowing what to review* sections, we will
    be talking from the point of view of the **code reviewer**. However, as regards
    the *Providing and responding to review feedback* section, we will cover the viewpoints
    of both the **programmer** and the **code ****reviewer**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于*为审查准备代码*和*知道何时发送代码进行审查*部分，我们将从**程序员**的角度进行讨论。对于*领导代码审查*和*知道要审查什么*部分，我们将从**代码审查人员**的角度进行讨论。然而，至于*提供和回应审查反馈*部分，我们将涵盖**程序员**和**代码审查人员**的观点。
- en: 'The learning objectives for this chapter are for you to be able to do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的学习目标是让您能够做到以下几点：
- en: Understand code reviews and why they are good
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解代码审查及其好处
- en: Partake in code reviews
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与代码审查
- en: Provide constructive criticism
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供建设性的批评
- en: Respond positively to constructive criticism
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积极回应建设性的批评
- en: Before we dive deep into these topics, let's understand the general code review
    process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论这些话题之前，让我们先了解一下一般的代码审查流程。
- en: The code review process
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查流程
- en: The normal procedure for carrying out a code review is to make sure your code
    compiles and meets the requirements set. It should also pass all unit tests and
    end-to-end tests. Once you are confident that you are able to compile, test, and
    run your code successfully, then it is checked in to the current working branch.
    Once checked in, you will then issue a pull request.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 进行代码审查的正常程序是确保您的代码能够编译并满足设定的要求。它还应该通过所有单元测试和端到端测试。一旦您确信能够成功编译、测试和运行您的代码，那么它就会被检入到当前的工作分支。检入后，您将发出一个拉取请求。
- en: A peer reviewer will then review your code and share comments and feedback.
    If your code passes the code review, your code review is completed and you can
    then merge your working branch into the main trunk. Otherwise, the peer review
    will be rejected, and you will be required to review your work and address the
    issues raised in the comments provided by your reviewer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后同行审阅人将审阅您的代码并分享评论和反馈。如果您的代码通过了代码审查，那么您的代码审查就完成了，然后您可以将您的工作分支合并到主干。否则，同行审查将被拒绝，并且您将需要审查您的工作并解决评论中提出的问题。
- en: 'The following diagram shows the peer code review process:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了同行代码审查流程：
- en: '![](img/65775cfb-9658-4ff4-b584-c5db1880a685.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65775cfb-9658-4ff4-b584-c5db1880a685.png)'
- en: Preparing code for review
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为审查准备代码
- en: Preparing for a code review can be a right royal pain at times, but it does
    work for better overall quality of code that is easy to read and maintain. It
    is definitely a worthwhile practice that teams of developers should carry out
    as standard coding procedures. This is an important step in the code review process,
    as perfecting this step can save the reviewer considerable time and energy in
    performing the review.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为代码审查做准备有时可能会很麻烦，但它确实能够提高代码的整体质量，使其易于阅读和维护。这绝对是一个值得团队开发人员作为标准编码程序执行的实践。这是代码审查流程中的一个重要步骤，因为完善这一步骤可以节省审查人员在进行审查时的大量时间和精力。
- en: 'Here are some standard points to keep in mind when preparing your code for
    review:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备代码进行审查时，请记住以下一些标准要点：
- en: '**Always keep the code review in mind**: When beginning any programming, you
    should have the code review in mind. So keep your code small. If possible, limit
    your code to one feature.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终牢记代码审查**：在开始任何编程时，您应该牢记代码审查。因此，保持您的代码简洁。如果可能的话，将您的代码限制在一个功能上。'
- en: '**Make sure that all your tests pass even if your code builds**: If your code
    builds but you have failing tests, then deal immediately with what''s causing
    those tests to fail. Then, when the tests pass as expected, you can move on. It
    is important to make sure that all unit tests are passed, and that end-to-end
    testing passes all tests. It is important that all testing is complete and gets
    the green light, since releasing code that works but was a test fail could result
    in some very unhappy customers when the code goes to production.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保所有的测试都通过，即使你的代码能够构建：如果你的代码能够构建，但是测试失败了，那么立即处理导致测试失败的原因。然后，当测试按预期通过时，你可以继续进行。确保所有单元测试都通过，并且端到端测试也通过了所有的测试。非常重要的是确保所有的测试都完成并且通过了，因为发布能够工作但测试失败的代码可能会导致在代码投入生产时出现一些非常不满意的客户。
- en: '**Remember YAGNI**: As you code, make sure to only add code that is necessary
    to meet the requirement or feature you are working on. If you don''t need it yet,
    then don''t code it. Only add code when it is needed and not before.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住YAGNI：在编写代码时，确保只添加满足需求或正在开发的功能的必要代码。如果你现在不需要它，那就不要编写它。只有在需要时才添加代码，而不是提前添加。
- en: '**Check for duplicate code**: If your code must be object-oriented and be DRY
    and SOLID, then review your own code to see whether it contains any procedural
    or duplicate code. Should it do so, take the time to refactor it so that it is
    object-oriented, DRY, and SOLID.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查重复代码：如果你的代码必须是面向对象的，并且符合DRY和SOLID原则，那么请检查自己的代码，看看是否包含任何过程性或重复的代码。如果有的话，花时间重构它，使其成为面向对象的、DRY和SOLID的代码。
- en: '**Use** s**tatic analyzers**: Static code analyzers that have been configured
    to enforce your company''s best practices will check your code and highlight any
    issues that are encountered. Make sure that you do not ignore information and
    warnings. These could cause you issues further down the line.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用**静态分析器：已经配置为执行公司最佳实践的静态代码分析器将检查你的代码，并突出显示遇到的任何问题。确保你不要忽略信息和警告。这些可能会在后续引起问题。'
- en: Most importantly, only check your code in when you are confident that your code
    satisfies business requirements, adheres to coding standards, and passes all tests. If
    you check your code in as part of a **Continuous Integration** (**CI**) pipeline,
    and your code fails the build, then you will need to address the areas of concern
    raised by the CI pipeline. When you are able to check in your code and the CI
    gives the green light, then you can issue a pull request.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，只有在你确信你的代码满足业务需求、符合编码标准并且通过了所有测试时才提交你的代码。如果你将代码作为**持续集成**（**CI**）流程的一部分提交，而你的代码构建失败了，那么你需要解决CI流程提出的问题。当你能够提交你的代码并且CI通过时，那么你可以发起一个拉取请求。
- en: Leading a code review
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领导代码审查
- en: When leading code reviews, it is important to have the right people present.
    The people who will be in attendance at the peer code review will be agreed upon
    with the project manager. The programmer(s) responsible for submitting the code
    for review will be present at the code review unless they work remotely. In the
    case of remote working, the reviewer will review the code and either accept the
    pull request, decline the pull request, or send the developer some questions to
    be answered before taking any further action.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行代码审查时，重要的是有合适的人员在场。参加同行代码审查的人员将与项目经理商定。负责提交代码进行审查的程序员将出席代码审查，除非他们远程工作。在远程工作的情况下，审阅者将审查代码，然后接受拉取请求、拒绝拉取请求，或者在采取进一步行动之前向开发人员提出一些问题。
- en: 'A suitable lead for a code review should possess the following skills and knowledge:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 进行代码审查的合适负责人应具备以下技能和知识：
- en: '**Be a technical authority**: The person leading the code review should be
    a technical authority that understands the company''s coding guidelines and software
    development methodologies. It is also important that they have a good overall
    understanding of the software under review.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成为技术权威：领导代码审查的人应该是一个技术权威，了解公司的编码准则和软件开发方法。同时，他们对正在审查的软件有一个良好的整体理解也是非常重要的。
- en: '**Have good soft skills**: As the leader of the code review, the person must
    be a warm and encouraging individual who is able to provide constructive feedback.
    It is important that the person reviewing the programmer''s code has good soft
    skills so that there is no conflict between the reviewer and the person whose
    code is being reviewed.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具备良好的软技能：作为代码审查的负责人，必须是一个热情鼓励的个体，能够提供建设性的反馈。审查程序员代码的人必须具备良好的软技能，以确保审阅者和被审阅代码的人之间没有冲突。
- en: '**Not be overly critical**: The leader of the code review must not be over-critical
    and must be able to explain their critique of the programmer''s code. It is useful
    if the leader has been exposed to different programming styles, and can view the
    code objectively to ensure that it meets the project''s requirements.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要过于批判：代码审查的负责人不应过于批判，并且必须能够解释他们对程序员代码的批评。如果领导者接触过不同的编程风格，并且能够客观地查看代码以确保其满足项目的要求，那将非常有用。
- en: In my experience, peer code reviews are always carried out on pull requests
    in the version control tool being used by the team. A programmer will submit the
    code to version control and then issue a pull request. The peer code reviewer
    will then review the code in the pull request. Constructive feedback will be provided
    in the form of comments that will be attached to the pull request. If there are
    problems with the pull request, then the reviewer will reject the change request
    and comment on specific issues that need to be addressed by the programmer. If
    the code review is successful, then the reviewer may add a comment providing positive
    feedback, merge the pull request, and close it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，同行代码审查总是在团队使用的版本控制工具中进行拉取请求。程序员将代码提交到版本控制，然后发出拉取请求。同行代码审阅者将在拉取请求中审查代码。建设性的反馈将以评论的形式附加到拉取请求上。如果拉取请求存在问题，审阅者将拒绝更改请求并评论需要程序员解决的具体问题。如果代码审查成功，审阅者可能会添加评论以提供积极的反馈，合并拉取请求并关闭它。
- en: Programmers will need to note any comments made by the reviewer and take them
    on board. If the code needs to be resubmitted, then the programmer will need to
    ensure that all the reviewer's comments have been addressed prior to resubmitting.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员需要注意审阅者的任何评论，并加以采纳。如果需要重新提交代码，程序员需要确保在重新提交之前已经解决了审阅者的所有评论。
- en: It is a good idea to keep code reviews short, and to not review too many lines
    at any one time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 保持代码审查简短是个好主意，不要一次审查太多行。
- en: Since a code review normally starts with a pull request, we will look at issuing
    a pull request followed by responding to a pull request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于代码审查通常始于拉取请求，我们将看看如何发出拉取请求，然后回应拉取请求。
- en: Issuing a pull request
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发出拉取请求
- en: When you have finished coding and you are confident in the quality of your code
    and that it builds, you are able to then push or check in your changes, depending
    on what source control system you use. When your code has been pushed, you can
    then issue a pull request. When a pull request is raised, other people that are
    interested in the code are notified and able to review your changes. These changes
    can then be discussed and comments made regarding any potential changes that you
    need to make. In essence, your pushing to your source control repository and issuing
    a pull request is what kick-starts the peer code review process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成编码并对代码质量和构建有信心时，你可以根据你使用的源代码控制系统推送或提交你的更改。当你的代码被推送后，你可以发出拉取请求。发出拉取请求后，对代码感兴趣的其他人会收到通知并能够审查你的更改。然后可以讨论这些更改，并就可能需要进行的任何更改发表评论。实质上，你推送到源代码控制存储库并发出拉取请求是启动同行代码审查流程的开始。
- en: To issue a pull request, all you have to do (once you've checked your code in
    or pushed it) is click on the Pull requests tab of your version control. There
    will then be a button you can click on – New pull request. This will add your
    pull request to a queue to be picked up by the relevant reviewers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要发出拉取请求，你只需（在提交或推送代码后）点击版本控制的拉取请求选项卡。然后会出现一个按钮，你可以点击“新拉取请求”。这将把你的拉取请求添加到等待相关审阅者处理的队列中。
- en: 'In the following screenshots, we will see the process of requesting and fulfilling
    a pull request via GitHub:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的截图中，我们将看到通过GitHub请求和完成拉取请求的过程：
- en: 'On your GitHub project page, click on the Pull requests tab:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GitHub项目页面上，点击拉取请求选项卡：
- en: '![](img/2beae543-1fb9-49bf-8c55-c997442f652c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2beae543-1fb9-49bf-8c55-c997442f652c.png)'
- en: 'Then, click on the New pull request button. This will display the Comparing
    changes page:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“新拉取请求”按钮。这将显示“比较更改”页面：
- en: '![](img/857dd40b-a824-4cb3-8118-d0c41c310b64.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/857dd40b-a824-4cb3-8118-d0c41c310b64.png)'
- en: 'If you are happy, then click on the Create pull request button to start the
    pull request. You will then be presented with the Open a pull request screen:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你满意，然后点击“创建拉取请求”按钮开始拉取请求。然后会出现“打开拉取请求”屏幕：
- en: '![](img/a8c75b78-b39e-417b-8795-cf6153f5e0d8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8c75b78-b39e-417b-8795-cf6153f5e0d8.png)'
- en: Write your comment regarding the pull request. Provide all the necessary information
    for the code reviewer, but keep it brief and to the point. Useful comments include
    identification of what changes have been made. Modify the Reviewers, Assignees,
    Labels, Projects, and Milestones fields as necessary. Then, once you are happy
    with the pull request details, click on the Create pull request button to create
    the pull request. Your code will now be ready to be reviewed by your peers.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下关于拉取请求的评论。为代码审阅者提供所有必要的信息，但保持简洁明了。有用的评论包括对所做更改的说明。根据需要修改“审阅者”、“受让人”、“标签”、“项目”和“里程碑”字段。然后，一旦你对拉取请求的细节满意，点击“创建拉取请求”按钮创建拉取请求。你的代码现在准备好由同行审阅了。
- en: Responding to a pull request
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回应拉取请求
- en: 'Since the reviewer is responsible for reviewing pull requests prior to merges
    of branches, we would do well to look at responding to pull requests:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于审阅者负责在分支合并之前审查拉取请求，我们最好看看如何回应拉取请求：
- en: Start by cloning a copy of the code under review.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先克隆要审查的代码副本。
- en: Review the comments and changes in the pull request.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查拉取请求中的评论和更改。
- en: 'Check that there are no conflicts with the base branch. If there are, then
    you will have to reject the pull request with the necessary comments. Otherwise,
    you can review the changes, make sure the code builds without errors, and make
    sure there are no compilation warnings. At this stage, you will also look out
    for code smells and any potential bugs. You will also check that the tests build,
    run, are correct, and provide good test coverage of the feature to be merged.
    Make any comments necessary and reject the pull request unless you are satisfied.
    When satisfied, you can add your comments and merge the pull request by clicking
    on the Merge pull request button, as shown here:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查基本分支是否存在冲突。如果有冲突，那么您将不得不拒绝拉取请求并附上必要的评论。否则，您可以审查更改，确保代码构建无错误，并确保没有编译警告。在这个阶段，您还将注意代码异味和任何潜在的错误。您还将检查测试构建、运行是否正确，并为要合并的功能提供良好的测试覆盖。除非您满意，否则请进行任何必要的评论并拒绝拉取请求。当满意时，您可以添加您的评论，并通过单击合并拉取请求按钮来合并拉取请求，如下所示：
- en: '![](img/5bf41ebf-d0b4-41b4-bc87-e2abbda5e67b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bf41ebf-d0b4-41b4-bc87-e2abbda5e67b.png)'
- en: 'Now, confirm the merge by entering a comment and clicking on the Confirm merge
    button:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过输入评论并单击确认合并按钮来确认合并：
- en: '![](img/56e50500-b761-4d10-a93b-6accd8f76eb7.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56e50500-b761-4d10-a93b-6accd8f76eb7.png)'
- en: 'Once the pull request has been merged and the pull request closed, the branch
    can be deleted by clicking on the Delete branch button, as can be seen in the
    following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦拉取请求已合并并关闭，可以通过单击删除分支按钮来删除分支，如下截图所示：
- en: '![](img/feb753f7-8666-4187-93ea-bdaa81bf8819.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/feb753f7-8666-4187-93ea-bdaa81bf8819.png)'
- en: In the previous section, you saw how the reviewee raises a pull request to have
    their code peer-reviewed before it is merged. And in this section, you have seen
    how to review a pull request and complete it as part of a code review. Now, we
    will look at what to review in a peer code review when responding to a pull request.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，您看到被审阅者提出拉取请求，要求在合并之前对其代码进行同行审查。在本节中，您已经了解了如何审查拉取请求并将其作为代码审查的一部分完成。现在，我们将看看在回应拉取请求时进行同行代码审查时应该审查什么。
- en: Effects of feedback on reviewees
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反馈对被审阅者的影响
- en: When performing a code review of your peer's code, you must also take into consideration
    the fact that feedback can be positive or negative. Negative feedback does not
    provide specific details about the problem. The reviewer focuses on the reviewee
    and not on the problem. Suggestions for improving the code are not offered to
    the reviewee by the reviewer, and the reviewer's feedback is aimed at hurting
    the reviewee.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查同行代码时，您还必须考虑到反馈可能是积极的或消极的。负面反馈不提供有关问题的具体细节。审阅者关注的是被审阅者而不是问题。审阅者不向被审阅者提供改进代码的建议，而且审阅者的反馈旨在伤害被审阅者。
- en: Such negative feedback received by the reviewee offends them. This has a negative
    impact and can cause them to start doubting themselves. A lack of motivation then
    develops within the reviewee and this can negatively impact the team, as work
    is not done on time or to the required level. The bad feelings between the reviewer
    and the reviewee will also be felt by the team, and an oppressive atmosphere that
    negatively impacts everyone on the team can ensue. This can lead to other colleagues
    becoming demotivated, and the overall project can end up suffering as a result.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 被审阅者收到的这种负面反馈会冒犯他们。这会产生负面影响，并可能导致他们开始怀疑自己。被审阅者内部产生缺乏动力的情况，这可能对团队产生负面影响，因为工作没有按时完成或达到所需水平。审阅者和被审阅者之间的不良情绪也会影响团队，并可能导致对整个团队产生负面影响的压抑氛围。这可能导致其他同事变得缺乏动力，最终导致整个项目遭受损失。
- en: 'In the end, it gets to the point where the reviewee has had enough and leaves
    for a new position somewhere else to get away from it all. The project then suffers
    time-wise and even financially, as time and money will need to be spent on finding
    a replacement. Whoever is found to fill the position then has to be trained upon
    the system and the working procedures and guidelines. The following diagram shows
    negative feedback from the reviewer toward the reviewee:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，到了被审阅者已经受够了的地步，离开去别的地方找新职位摆脱这一切。项目随后在时间和财务上都遭受损失，因为需要花费时间和金钱来寻找替代者。然后找到的人还必须接受系统和工作程序以及指南的培训。以下图表显示了审阅者对被审阅者的负面反馈：
- en: '![](img/86d9dd56-4192-4117-8bc5-f0cde4bfc49c.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86d9dd56-4192-4117-8bc5-f0cde4bfc49c.png)'
- en: Conversely, positive feedback from the reviewer to the reviewee has the opposite
    effect. When the reviewer provides positive feedback to the reviewee, they focus
    on the problem and not on the person. They explain why the code submitted is not
    good, along with the problems it can cause. The reviewer will then suggest to
    the reviewee ways in which the code can be improved. The feedback provided by
    the reviewer is only done to improve the quality of the code submitted by the
    reviewee.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，审阅者对被审阅者的积极反馈产生相反的效果。当审阅者向被审阅者提供积极反馈时，他们关注的是问题，而不是人。他们解释为什么提交的代码不好，以及可能引起的问题。然后审阅者会建议被审阅者改进代码的方法。审阅者提供的反馈只是为了提高被审阅者提交的代码的质量。
- en: 'When the reviewee receives the positive (constructive) feedback, they respond
    in a positive manner. They take on board the reviewer''s comments and respond
    in the appropriate manner by answering any questions, asking any relevant questions
    themselves, and the code is then updated, based on the reviewer''s feedback. The
    amended code is then resubmitted for review and acceptance. This has a positive
    impact on the team as the atmosphere remains a positive one, and work is done
    on time and to the required quality. The following diagram shows the results of
    positive feedback on the reviewee from the reviewer:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当被审查者收到积极（建设性）的反馈时，他们会以积极的方式回应。他们会接受审阅者的评论，并以适当的方式回答任何问题，提出任何相关问题，然后根据审阅者的反馈更新代码。修改后的代码然后重新提交进行审查和接受。这对团队有积极的影响，因为氛围保持积极，工作按时完成并达到所需的质量。以下图表显示了审阅者对被审阅者的积极反馈的结果：
- en: '![](img/5dd7695c-9161-4a21-bae5-419ae275b2b6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5dd7695c-9161-4a21-bae5-419ae275b2b6.png)'
- en: The point to remember is that your feedback can be constructive or destructive.
    Your aim as a reviewer is to be constructive and not destructive. A happy team
    is a productive team. A demoralized team is not productive and is damaging to
    the project. So, always strive to maintain a happy team through positive feedback.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的一点是，你的反馈可以是建设性的，也可以是破坏性的。作为审阅者，你的目标是建设性的，而不是破坏性的。一个快乐的团队是一个高效的团队。一个士气低落的团队是无法高效工作的，对项目也是有害的。因此，始终努力通过积极的反馈来保持一个快乐的团队。
- en: A technique for positive criticism is the feedback sandwich technique. You start
    with praise on the good points, then you provide constructive criticism, and then
    you finish with further praise. This technique can be very useful if you have
    members on the team that doesn't react well to any form of criticism. Your soft
    skills in dealing with people are just as important as your software skills in
    delivering quality code. Don't forget that!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 积极批评的一种技巧是反馈三明治技巧。你从赞扬好的地方开始，然后提出建设性的批评，最后再次赞扬。如果团队中有成员对任何形式的批评都反应不好，这种技巧就非常有用。你在处理人际关系的软技能和交付高质量代码的软件技能一样重要。不要忘记这一点！
- en: We will now move on to look at what we should review.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将继续看一下我们应该审查的内容。
- en: Knowing what to review
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知道要审查什么
- en: There are different aspects of the code that have to be considered when reviewing
    it. Primarily, the code being reviewed should only be the code that was modified
    by the programmer and submitted for review. That's why you should aim to make
    small submissions often. Small amounts of code are much easier to review and comment
    on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查代码时，必须考虑不同的方面。首先，被审查的代码应该只是程序员修改并提交审查的代码。这就是为什么你应该经常提交小的代码。少量的代码更容易审查和评论。
- en: Let's go through different aspects a code reviewer should assess for a complete
    and thorough review.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码审阅者应该评估的不同方面。
- en: Company's coding guidelines and business requirement(s)
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司的编码准则和业务需求
- en: All code being reviewed should be checked against the company's coding guidelines
    and the business requirement(s) the code is addressing. All new code should adhere
    to the latest coding standards and best practices employed by the company.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所有被审查的代码都应该符合公司的编码准则和代码所要满足的业务需求。所有新代码都应该遵循公司采用的最新编码标准和最佳实践。
- en: There are different types of business requirements. These requirements include
    those of the business and the user/stakeholder as well as functional and implementation
    requirements. Regardless of the type of requirement the code is addressing, it
    must be fully checked for correctness in meeting requirements.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 业务需求有不同的类型。这些需求包括业务和用户/利益相关者的需求，以及功能和实施需求。无论代码要满足的需求类型是什么，都必须对其进行全面检查，以确保满足需求的正确性。
- en: For example, if the user/stakeholder requirement states that *as a user, I want
    to add a new customer account*, does the code under review meet all the conditions
    set out in this requirement? If the company's coding guidelines stipulate that
    all code must include unit tests that test the normal flow and exceptional cases,
    then have all the required tests been implemented? If the answer to any of these
    questions is *no*, then the code must be commented on, the comments addressed
    by the programmer, and the code resubmitted.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户/利益相关者的需求规定“作为用户，我想要添加一个新的客户账户”，那么审查的代码是否满足这一要求中列出的所有条件？如果公司的编码准则规定所有代码必须包括测试正常流程和异常情况的单元测试，那么是否已经实现了所有必需的测试？如果对任何一个问题的答案是“否”，那么必须对代码进行评论，程序员必须解决评论，并重新提交代码。
- en: Naming conventions
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名约定
- en: The code should be checked to see whether the naming conventions have been followed
    for the various code constructs, such as classes, interfaces, member variables,
    local variables, enumerations, and methods. Nobody likes cryptic names that are
    hard to decipher, especially if the code base is large.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应该检查代码是否遵循了各种代码结构的命名约定，比如类、接口、成员变量、局部变量、枚举和方法。没有人喜欢难以解读的神秘名称，尤其是当代码库很大时。
- en: 'Here are a couple of questions that a reviewer should ask:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是审阅者应该问的一些问题：
- en: Are the names long enough to be human-readable and understandable?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称是否足够长，以便人类阅读和理解？
- en: Are they meaningful in relation to the intent of the code, but short enough
    to not irritate other programmers?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是否与代码的意图相关，但又足够简短，不会惹恼其他程序员？
- en: As the reviewer, you must be able to read the code and understand it. If the
    code is difficult to read and understand, then it really needs to be refactored
    before being merged.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作为审阅者，你必须能够阅读并理解代码。如果代码难以阅读和理解，那么在合并之前它确实需要重构。
- en: Formatting
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式
- en: Formatting goes a long way to making code easy to understand. Namespaces, braces,
    and indentation should be employed according to the guidelines, and the start
    and end of code blocks should be easily identifiable.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化对于使代码易于理解至关重要。命名空间、大括号和缩进应根据指南使用，并且代码块的开始和结束应该易于识别。
- en: 'Again, here is a set of questions a reviewer should consider asking in their
    review:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是审阅者在审查中应考虑询问的一组问题：
- en: Is code to be indented using spaces or tabs?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否应使用空格或制表符缩进？
- en: Has the correct amount of white space been employed?
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否使用了正确数量的空格？
- en: Are there any lines of code that are too long that should be spread over multiple
    lines?
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有任何代码行太长，应该分成多行？
- en: What about line breaks?
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 换行呢？
- en: Following the style guidelines, is there only one statement per line? Is there
    only one declaration per line?
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循样式指南，每行只有一个语句吗？每行只有一个声明吗？
- en: Are continuation lines correctly indented using one tab stop?
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续行是否正确缩进了一个制表符？
- en: Are methods separated by one line?
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法是否用一行分隔？
- en: Are multiple clauses that make up a single expression separated by parentheses?
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组成单个表达式的多个子句是否用括号分隔？
- en: Are classes and methods clean and small, and do they only do the work they are
    meant to do?
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和方法是否干净且简洁，并且它们只做它们应该做的工作？
- en: Testing
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: 'Tests must be understandable and cover a good subset of use cases. They must
    cover the normal paths of execution and exceptional use cases. When it comes to
    testing the code, the reviewer should check for the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 测试必须易于理解，并覆盖大部分用例。它们必须覆盖正常的执行路径和异常用例。在测试代码时，审阅者应检查以下内容：
- en: Has the programmer provided tests for all the code?
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员是否为所有代码提供了测试？
- en: Is there any code that is untested?
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有没有未经测试的代码？
- en: Do all the tests work?
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有测试都有效吗？
- en: Do any of the tests fail?
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何测试失败了吗？
- en: Is there adequate documentation of the code, including comments, documentation
    comments, tests, and product documentation?
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否有足够的文档，包括注释、文档注释、测试和产品文档？
- en: Do you see anything that stands out that, even if it compiles and works in isolation,
    could cause bugs when integrated into the system?
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否看到任何突出的东西，即使它在隔离环境中可以编译和工作，但在集成到系统中时可能会引起错误？
- en: Is the code well documented to aid maintenance and support?
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否有良好的文档以帮助维护和支持？
- en: 'Let''s see how the process goes:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看流程如何进行：
- en: '![](img/ab775e45-eaf8-4311-bdcc-9900dab5cefb.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab775e45-eaf8-4311-bdcc-9900dab5cefb.png)'
- en: Untested code has the potential to raise unexpected exceptions during testing
    and production. But just as bad as code that is not tested are tests that are
    not correct. This can lead to bugs that are hard to diagnose, can be annoying
    for the customer, and make more work for you further down the line. Bugs are technical
    debt and looked upon negatively by the business. Moreover, you may have written
    the code, but others may have to read it as they maintain and extend the project.
    It is always a good idea to provide some documentation for your colleagues.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 未经测试的代码可能在测试和生产过程中引发意外异常。但与未经测试的代码一样糟糕的是不正确的测试。这可能导致难以诊断的错误，可能会让客户感到恼火，并且会给您带来更多的工作。错误是技术债务，业务上是被贬低的。此外，您可能已经编写了代码，但其他人可能需要阅读它，因为他们维护和扩展项目。为同事提供一些文档始终是一个好主意。
- en: Now, concerning the customer, how are they going to know where your features
    are and how to use them? Good documentation that is user-friendly is a good idea.
    And remember, not all your users may be technically savvy. So, cater to the less
    technical person that may need handholding, but do it without being patronizing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于客户，他们将如何知道您的功能在哪里以及如何使用它们？用户友好的良好文档是一个好主意。记住，并非所有用户都可能具有技术知识。因此，要迎合可能需要援助的非技术人员，但不要显得居高临下。
- en: As a technical authority reviewing the code, do you detect any code smells that
    may become a problem? If so, then you must flag, comment, and reject the pull
    request and get the programmer to resubmit their work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为审查代码的技术权威，您是否发现了可能会成为问题的代码异味？如果是的话，您必须标记、评论和拒绝拉取请求，并让程序员重新提交他们的工作。
- en: As a reviewer, you should check that those exceptions are not used to control
    the program flow and that any errors raised have meaningful messages that are
    helpful to developers and to the customers who will receive them.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为审阅者，您应该检查这些异常是否被用于控制程序流，并且引发的任何错误是否具有对开发人员和接收错误信息的客户有帮助的有意义消息。
- en: Architectural guidelines and design patterns
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构指南和设计模式
- en: The new code must be checked to see whether it conforms to the architectural
    guidelines for the project. The code should follow any coding paradigms that the
    company employs, such as SOLID, DRY, YAGNI, and OOP. In addition, where possible,
    the code should employ suitable design patterns.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 必须检查新代码，以确定它是否符合项目的架构指南。代码应遵循公司采用的任何编码范例，如SOLID、DRY、YAGNI和OOP。此外，可能的话，代码应采用适当的设计模式。
- en: 'This is where the **Gang-of-Four** (**GoF**) patterns come into play. The GOF
    comprises four authors of a C++ book called *Design Patterns: Elements of Reusable
    Object-Oriented Software*. The authors were Erich Gamma, Richard Helm, Ralph Johnson,
    and John Vlissides.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**四人帮**（**GoF**）模式发挥作用的地方。 GOF包括《设计模式：可复用面向对象软件的元素》一书的四位作者。作者是Erich Gamma，Richard
    Helm，Ralph Johnson和John Vlissides。
- en: Today, their design patterns are heavily used in most, if not all, object-oriented
    programming languages. Packt has books that cover design patterns, including *.NET
    Design Patterns*, by Praseen Pai and Shine Xavier. Here is a really good resource
    that I recommend that you visit: [https://www.dofactory.com/net/design-patterns](https://www.dofactory.com/net/design-patterns).
    The site covers each of the GoF patterns and provides the definition, UML class
    diagram, participants, structural code, and some real-world code for the patterns.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，设计模式在大多数，如果不是所有的面向对象编程语言中都被广泛使用。Packt出版社有涵盖设计模式的书籍，包括Praseen Pai和Shine Xavier合著的*.NET设计模式*。这是一个我推荐您访问的非常好的资源：[https://www.dofactory.com/net/design-patterns](https://www.dofactory.com/net/design-patterns)。该网站涵盖了每个GoF模式，并提供了定义、UML类图、参与者、结构代码以及一些模式的真实代码。
- en: GoF patterns consist of creational, structural, and behavioral design patterns.
    Creational design patterns include Abstract Factory, Builder, Factory Method,
    Prototype, and Singleton. Structural design patterns include Adapter, Bridge,
    Composite, Decorator, Façade, Flyweight, and Proxy. Behavioral design patterns
    include Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento,
    Observer, State, Strategy, Template Method, and Visitor.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GoF模式包括创建、结构和行为设计模式。创建设计模式包括抽象工厂、生成器、工厂方法、原型和单例。结构设计模式包括适配器、桥接、组合、装饰器、外观、享元和代理。行为设计模式包括责任链、命令、解释器、迭代器、中介者、备忘录、观察者、状态、策略、模板方法和访问者。
- en: The code should also be properly organized and placed in the correct namespace
    and module. Check the code also to see whether it is too simplistic or over-engineered.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 代码还应该被正确组织并放置在正确的命名空间和模块中。还要检查代码是否过于简单或过度工程化。
- en: Performance and security
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能和安全性
- en: 'Other things that may need to be considered include performance and security:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要考虑的其他事项包括性能和安全性：
- en: How well does the code perform?
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的性能如何？
- en: Are there any bottlenecks that need to be addressed?
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有需要解决的瓶颈？
- en: Is the code programmed in such a way to protect against SQL injection attacks
    and denial-of-service attacks?
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否以一种方式编程，以防止SQL注入攻击和拒绝服务攻击？
- en: Is code properly validated to keep the data clean so that only valid data gets
    stored in the database?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码是否经过适当验证，以保持数据的干净，以便只有有效的数据存储在数据库中？
- en: Have you checked the user interface, documentation, and error messages for spelling
    mistakes?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否检查了用户界面、文档和拼写错误的错误消息？
- en: Have you encountered any magic numbers or hard coded values?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否遇到任何魔术数字或硬编码的值？
- en: Is the configuration data correct?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据是否正确？
- en: Have any secrets accidentally been checked in?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否意外泄露了任何机密信息？
- en: A comprehensive code review will encompass all of the preceding aspects and
    their respective review parameters. But let's find out when it is actually the
    right time to even be performing a code review.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 全面的代码审查将包括所有前述方面及其各自的审查参数。但让我们找出何时进行代码审查才是正确的时间。
- en: Knowing when to send code for review
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知道何时发送代码进行审查
- en: 'Code reviews should take place when the development is complete and before
    the programmer of the code passes the code on to the QA department. Before any
    code is checked into version control, all the code should build and run without
    errors, warnings, or information. You can ensure this by doing the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查应在开发完成后、程序员将代码传递给质量保证部门之前进行。在将任何代码检入版本控制之前，所有代码都应该能够在没有错误、警告或信息的情况下构建和运行。您可以通过以下方式确保这一点：
- en: You should run static code analysis on your programs to see whether any issues
    are raised. If you receive any errors, warnings, or information, then address
    each point raised. Do not ignore them as they can cause problems further down
    the line. You can access the Code Analysis configuration dialog on the Code Analysis
    page of the Visual Studio 2019 Project Properties tab. Right-click on your project
    and select Properties | Code Analysis.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该对程序运行静态代码分析，以查看是否存在任何问题。如果收到任何错误、警告或信息，请解决每个问题。不要忽视它们，因为它们可能会在后续过程中引起问题。您可以在Visual
    Studio 2019项目属性选项卡的代码分析页面上访问代码分析配置对话框。右键单击您的项目，然后选择属性|代码分析。
- en: You should also make sure that all your tests run successfully, and you should
    aim to have all your new code to be fully covered by normal and exceptional use
    cases that test the correctness of your code against the specification you are
    working on.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还应确保所有测试都能成功运行，并且应该确保所有新代码都能完全覆盖正常和异常用例，以测试代码对您正在处理的规范的正确性。
- en: If you employ a continuous development software practice within your place of
    work that integrates your code into a larger system, then you need to make sure
    that the system integration is successful and that all tests run without failing.
    If any errors are encountered, then you must fix them before you go any further.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您在工作场所采用了持续开发软件实践，将您的代码集成到更大的系统中，那么您需要确保系统集成成功，并且所有测试都能够正常运行。如果遇到任何错误，那么您必须在继续之前修复它们。
- en: 'When your code is complete, fully documented, and your tests work, and your
    system integration all works without any issues, then that is the best time to
    undergo a peer code review. Once you have reached the point that your peer code
    review is approved, your code can then be passed on to the QA department. The
    following diagram shows the **Software Development Life Cycle** (**SDLC**) from
    the development of the code through to the end of the life of the code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码完成、完全文档化并且您的测试工作正常，系统集成也没有任何问题时，那就是进行同行代码审查的最佳时机。一旦您的同行代码审查获得批准，您的代码就可以传递给质量保证部门。以下图表显示了**软件开发生命周期**（**SDLC**）从代码开发到代码生命周期结束的过程：
- en: '![](img/dc14aec2-344c-4b77-9593-1a39a2dfbd6f.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc14aec2-344c-4b77-9593-1a39a2dfbd6f.png)'
- en: The programmer codes the software as per specifications. They submit the source
    code to the version control repository and issue a pull request. The request is
    reviewed. If the request fails, then the request is rejected with comments. If
    the code review passes, then the code is deployed to the QA team that carry out
    their own internal testing. Any bugs found are raised for the developers to fix.
    If the internal testing passes QA, then it is deployed into **User Acceptance
    Testing** (**UAT**).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员根据规格编写软件。他们将源代码提交到版本控制存储库并发出拉取请求。请求将被审查。如果请求失败，那么将以评论的形式拒绝请求。如果代码审查通过，那么代码将部署到QA团队进行他们自己的内部测试。发现的任何错误都将被提出给开发人员进行修复。如果内部测试通过QA，那么它将被部署到**用户验收测试**（**UAT**）。
- en: If UAT fails, then bugs are raised with the DevOps team, who could be developers
    or infrastructure. If UAT passes QA, then it is deployed to staging. Staging is
    the team responsible for deploying the product in the production environment.
    When the software is in the hands of the customer, they raise a bug report if
    they encounter any bugs. Developers then work on fixing the customer's bugs, and
    the process is restarted. Once the product reaches the end of its life, it is
    retired from service.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果UAT失败，那么将与DevOps团队提出错误，他们可能是开发人员或基础架构。如果UAT通过QA，那么它将部署到暂存环境。暂存是负责在生产环境中部署产品的团队。当软件交到客户手中时，如果他们遇到任何错误，他们会提出错误报告。然后开发人员开始修复客户的错误，流程重新开始。一旦产品寿命结束，它将退出服务。
- en: Providing and responding to review feedback
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供和回应审阅反馈
- en: It is worth remembering that code reviews are aimed at the overall quality of
    code in keeping with the company's guidelines. Feedback, therefore, should be
    constructive and not used as an excuse to put down or embarrass a fellow colleague.
    Similarly, reviewer feedback should not be taken personally and responses to the
    reviewer should focus on suitable action and explanation.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 值得记住的是，代码审查旨在符合公司指南的代码整体质量。因此，反馈应该是建设性的，而不应该被用作放下或尴尬同事的借口。同样，审阅者的反馈不应该被个人化，对审阅者的回应应该专注于适当的行动和解释。
- en: 'The following diagram shows the process of issuing a **Pull Request** (**PR**),
    performing a code review, and either accepting or rejecting the PR:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了发出**拉取请求**（**PR**），进行代码审查，并接受或拒绝PR的过程：
- en: '![](img/fdda7109-3052-41ac-ac6a-74f019e7ca7f.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdda7109-3052-41ac-ac6a-74f019e7ca7f.png)'
- en: Providing feedback as a reviewer
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为审阅者提供反馈
- en: Workplace bullying can be a problem, and programming environments are not immune.
    Nobody likes a cocky programmer who thinks they are big. So, it is important that
    the reviewer has good soft skills and is very diplomatic. Bear in mind that some
    people can easily be offended and take things the wrong way. So know who you are
    dealing with and how they are likely to respond; this will help you choose your
    approach and your words carefully.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 职场欺凌可能是一个问题，编程环境也不例外。没有人喜欢自以为了不起的程序员。因此，审阅者具有良好的软技能和非常圆滑是很重要的。请记住，有些人很容易感到冒犯，会误解事情。因此，了解您正在处理的人以及他们可能如何回应；这将帮助您谨慎选择您的方法和措辞。
- en: 'As the peer code reviewer, you will be responsible for understanding the requirements
    and making sure the code meets that requirement. So, look for the answers to these
    questions:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为同行代码审阅者，您将负责理解需求，并确保代码符合该要求。因此，请寻找以下问题的答案：
- en: Are you able to read and understand the code?
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能够阅读和理解代码吗？
- en: Can you see any potential bugs?
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您能看到任何潜在的错误吗？
- en: Have any trade-offs been made?
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否做出了任何权衡？
- en: If so, why were the trade-offs made?
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果是这样，为什么要做出这些权衡？
- en: Do the trade-offs incur any technical debt that will need to be factored into
    the project further down the line?
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些权衡是否会产生任何技术债务，需要在项目的后续阶段考虑进去？
- en: 'Once your review is complete, you will have three categories of feedback to
    choose from: positive, optional, and critical. With **positive feedback**, you
    can provide commendations on what the programmer has done really well. This is
    a good way to bolster morale as it can often run low in programming teams. **Optional
    feedback** can be very useful in helping computer programmers to hone their programming
    skills in line with the company guidelines, and they can work to improve the overall
    wellbeing of the software being developed.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的审查完成，您将有三类反馈可供选择：积极的、可选的和关键的。通过**积极的反馈**，您可以对程序员做得非常好的地方进行表扬。这是提高编程团队士气的好方法，因为编程团队的士气通常很低。**可选的反馈**对于帮助计算机程序员根据公司指南提高他们的编程技能非常有用，并且可以帮助改善正在开发的软件的整体健康状况。
- en: Finally, we have critical feedback. **Critical feedback** is necessary for any
    problems that have been identified and must be addressed before the code can be
    accepted and passed on to the QA department. This is the feedback where you will
    need to choose your words carefully to avoid offending anyone. It is important
    that your critical comments address the specific issue being raised with valid
    reasons to support the feedback.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有关键反馈。**关键反馈**对于已经确定的任何问题是必要的，在代码可以被接受并传递给QA部门之前必须解决。这是需要您谨慎选择措辞以避免冒犯任何人的反馈。重要的是，您的关键评论要针对具体的问题，并提供有效的理由支持反馈。
- en: Responding to feedback as a reviewee
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为被审阅者回应反馈
- en: As the reviewee programmer, you must effectively communicate the background
    of your code to your reviewer. You can help them by making small commits. Small
    amounts of code are much easier to review than large amounts of code. The more
    code being reviewed, the easier it is for things to be missed and slip through
    the net. While you are waiting for your code to be reviewed, you must not make
    any further changes to it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 作为被审阅的程序员，您必须有效地向审阅者传达代码的背景。您可以通过进行小的提交来帮助他们。少量的代码比大量的代码更容易审查。审查的代码越多，错过的东西就越容易滑过去。在等待您的代码被审查时，您不能对其进行任何进一步的更改。
- en: As you can guess, you will receive either positive, optional, or critical feedback
    from the reviewer. The positive feedback works to boost your confidence in the
    project as well as your morale. Build upon it and continue with your good practices.
    You may choose to act or not upon optional feedback, but it's always a good idea
    to talk it through with your reviewer.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以猜到，你将从审查者那里收到积极的、可选的或者关键的反馈。积极的反馈有助于增强你对项目的信心以及士气。建立在此基础上，继续保持良好的实践。你可以选择是否采取可选的反馈，但与审查者讨论总是一个好主意。
- en: For critical feedback, you must take it seriously and act upon it as this feedback
    is imperative for the very success of the project. It is very important that you
    handle critical feedback in a polite and professional manner. Don't allow yourself
    to be offended by any comments from your reviewer; they are not meant to be personal.
    This is especially important for new programmers, and programmers who lack confidence.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于关键的反馈，你必须认真对待并采取行动，因为这些反馈对项目的成功至关重要。重要的是你以礼貌和专业的方式处理关键的反馈。不要因为审查者的评论而感到冒犯；它们并不是针对个人的。这对于新程序员和缺乏信心的程序员尤为重要。
- en: As soon as you receive your reviewer's feedback, act upon it, and make sure
    that you discuss it with them as necessary.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到审查者的反馈，请立即采取行动，并确保根据需要与他们讨论。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed the importance of performing code reviews
    and the complete process of getting code ready for review and responding to reviewer
    comments as the programmer, along with how to lead a code review and what to look
    for when performing a review as the code reviewer. It can be seen that there are
    clearly two roles in a peer code review. These are the reviewer and the reviewee.
    The reviewer is the person performing the code review, and the reviewee is the
    person whose code is being reviewed.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了进行代码审查的重要性，以及准备代码进行审查和作为程序员如何回应审查者评论的完整过程，以及如何领导代码审查以及作为代码审查者进行审查时要注意的事项。可以看到同行代码审查中明显有两个角色。这些是审查者和被审查者。审查者是进行代码审查的人，而被审查者是被审查代码的人。
- en: You have also seen how you, as a reviewer, can categorize your feedback and
    why soft skills are important when providing feedback to fellow programmers. And
    as a reviewee whose code is being scrutinized, you have seen how important it
    is to build upon positive and optional feedback and how important it is to act
    upon critical feedback.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你还看到了作为审查者如何对你的反馈进行分类，以及在向其他程序员提供反馈时软技能的重要性。作为被审查者，你的代码正在接受审查，你看到了建立在积极和可选反馈上的重要性，以及对关键反馈采取行动的重要性。
- en: By now, you should have a good understanding of why it is important to conduct
    regular code reviews, and why they should be done before the code is passed on
    to the QA department. Peer code reviews do take time and can be uncomfortable
    for both the reviewer and reviewee. But in the long run, they work toward a high-quality
    product that is easy to extend and maintain, and they lead to better code reuse
    as well.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经很好地理解了为什么进行定期的代码审查很重要，以及为什么在代码传递给QA部门之前应该进行代码审查。同行代码审查确实需要时间，对于审查者和被审查者都可能会感到不舒服。但从长远来看，它们有助于打造易于扩展和维护的高质量产品，也有助于更好地重用代码。
- en: In the next chapter, we will be looking at how to write clean classes, objects,
    and data structures. You will see how we can organize our classes, ensure our
    classes only have one responsibility, and comment on our classes in order to assist
    with documentation generation. We will then look at cohesion and coupling, designing
    for change, and the Law of Demeter. Then, we will look at immutable objects and
    data structures, hiding data, and exposing methods in objects, before finally
    looking at data structures.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何编写清晰的类、对象和数据结构。你将看到我们如何组织我们的类，确保我们的类只负责一个职责，并对我们的类进行注释以帮助生成文档。然后，我们将研究内聚性和耦合性，为变更设计，以及迪米特法则。然后，我们将研究不可变对象和数据结构，隐藏数据，并在对象中公开方法，最后研究数据结构。
- en: Questions
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the two roles involved in a peer code review?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同行代码审查中涉及的两个角色是什么？
- en: Who agrees on the people that will be involved in the peer code review?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁同意参与同行代码审查的人员？
- en: How can you save your reviewer time and effort prior to requesting a peer code
    review?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在请求同行代码审查之前，你如何节省审查者的时间和精力？
- en: When reviewing code, what kinds of things must you look out for?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在审查代码时，你必须注意哪些事项？
- en: What are the three categories of feedback?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反馈有哪三类？
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://docs.microsoft.com/en-us/visualstudio/code-quality/?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/code-quality/?view=vs-2019):
    This documentation by Microsoft provides information on the different tools available
    to help you analyze and improve the quality and maintainability of your code.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/visualstudio/code-quality/?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/code-quality/?view=vs-2019)：这是微软提供的文档，介绍了不同的工具，帮助你分析和改进代码的质量和可维护性。'
- en: '[https://en.wikipedia.org/wiki/Code_review](https://en.wikipedia.org/wiki/Code_review):
    There are many useful links on this page to further your knowledge of code reviews
    and their value to your business.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Code_review](https://en.wikipedia.org/wiki/Code_review)：这个页面上有很多有用的链接，可以进一步了解代码审查及其对业务的价值。'
- en: '[https://springframework.guru/gang-of-four-design-patterns/](https://springframework.guru/gang-of-four-design-patterns/):
    Gang-of-Four design patterns book.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://springframework.guru/gang-of-four-design-patterns/](https://springframework.guru/gang-of-four-design-patterns/)：四人帮设计模式书籍。'
- en: '[https://www.packtpub.com/application-development/net-design-patterns](https://www.packtpub.com/application-development/net-design-patterns):
    .*NET Design Patterns*, by Praseed Pai and Shine Xavier.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/net-design-patterns](https://www.packtpub.com/application-development/net-design-patterns)：*NET设计模式*，作者Praseed
    Pai和Shine Xavier。'
- en: '[https://help.github.com/en](https://help.github.com/en): GitHub''s help page.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://help.github.com/en](https://help.github.com/en)：GitHub的帮助页面。'
