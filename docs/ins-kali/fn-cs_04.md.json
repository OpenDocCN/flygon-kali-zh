["```cs\npublic static class ExtensionMethods \n{ \n  public static bool IsPalindrome(this string str) \n  { \n    char[] array = str.ToCharArray(); \n    Array.Reverse(array); \n    string backwards = new string(array); \n    return str == backwards; \n  } \n} \n\n```", "```cs\npublic static class ExtensionMethods \n{ \n  ... \n} \n\n```", "```cs\npublic static bool IsPalindrome(this string str) \n{ \n  ... \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    string[] strArray = { \n      \"room\", \n      \"level\", \n      \"channel\", \n      \"heat\", \n      \"burn\", \n      \"madam\", \n      \"machine\", \n      \"jump\", \n      \"radar\", \n      \"brain\" \n    }; \n    foreach (string s instrArray) \n    { \n      Console.WriteLine(\"{0} = {1}\", s, s.IsPalindrome()); \n    } \n  } \n} \n\n```", "```cs\nforeach (string s instrArray) \n{ \n  Console.WriteLine(\"{0} = {1}\", s, s.IsPalindrome()); \n} \n\n```", "```cs\nusing System; \nnamespaceReferencingNamespaceLib \n{ \n  public static class ExtensionMethodsClass \n  { \n    public static byte[] ConvertToHex(this string str) \n    { \n      int i = 0; \n      byte[] HexArray = new byte[str.Length]; \n      foreach (char ch in str) \n      { \n        HexArray[i++] = Convert.ToByte(ch); \n      } \n      returnHexArray; \n    } \n  } \n} \n\n```", "```cs\nusing System; \nusing ReferencingNamespaceLib; \nnamespace ReferencingNamespace \n{ \n  class Program \n  { \n    static void Main(string[] args) \n    { \n      int i = 0; \n      string strData = \"Functional in C#\"; \n      byte[] byteData = strData.ConvertToHex(); \n      foreach (char c in strData) \n      { \n        Console.WriteLine(\"{0} = 0x{1:X2} ({2})\", \n        c.ToString(), \n        byteData[i], \n        byteData[i++]); \n      } \n    } \n  } \n} \n\n```", "```cs\nstring strData = \"Functional in C#\"; \nbyte[] byteData = strData.ConvertToHex(); \n\n```", "```cs\nusingReferencingNamespaceLib; \n\n```", "```cs\nnamespace System \n{ \n  public static class ExtensionMethodsClass \n  { \n    public static byte[] ConvertToHex(this string str) \n    { \n      int i = 0; \n      byte[] HexArray = new byte[str.Length]; \n      foreach (char ch in str) \n      { \n        HexArray[i++] = Convert.ToByte(ch); \n      } \n      return HexArray; \n    } \n  } \n} \n\n```", "```cs\nusing System; \nnamespace PiggybackingNamespace \n{ \n  class Program \n  { \n    static void Main(string[] args) \n    { \n      int i = 0; \n      string strData = \"Piggybacking\"; \n      byte[] byteData = strData.ConvertToHex(); \n      foreach (char c in strData) \n      { \n        Console.WriteLine(\"{0} = 0x{1:X2} ({2})\", \n        c.ToString(), \n        byteData[i], \n        byteData[i++]); \n      } \n    } \n  } \n} \n\n```", "```cs\nusing ReferencingNamespaceLib; \n\n```", "```cs\nnamespace ExtendingInterface \n{ \n  public class DataItem \n  { \n    public string Name { get; set; } \n    public string Gender { get; set; } \n  } \n} \n\n```", "```cs\nnamespace ExtendingInterface \n{ \n  public interface IDataSource \n  { \n    IEnumerable<DataItem> GetItems(); \n  } \n} \n\n```", "```cs\npublic partial class ClubMember : IDataSource \n{ \n  public IEnumerable<DataItem> GetItems() \n  { \n    foreach (var item in DataItemList) \n    { \n      yield return item; \n    } \n  } \n} \n\n```", "```cs\npublic partial class ClubMember : IDataSource \n{ \n  List<DataItem> DataItemList = new List<DataItem>() \n  { \n    newDataItem{ \n      Name =\"Dorian Villarreal\", \n      Gender =\"Male\"}, \n    newDataItem{ \n      Name =\"Olivia Bradley\", \n      Gender =\"Female\"}, \n    newDataItem{ \n      Name =\"Jocelyn Garrison\", \n      Gender =\"Female\"}, \n    newDataItem{ \n      Name =\"Connor Hopkins\", \n      Gender =\"Male\"}, \n    newDataItem{ \n      Name =\"Rose Moore\", \n      Gender =\"Female\"}, \n    newDataItem{ \n      Name =\"Conner Avery\", \n      Gender =\"Male\"}, \n    newDataItem{ \n      Name =\"Lexie Irwin\", \n      Gender =\"Female\"}, \n    newDataItem{ \n      Name =\"Bobby Armstrong\", \n      Gender =\"Male\"}, \n    newDataItem{ \n      Name =\"Stanley Wilson\", \n      Gender =\"Male\"}, \n    newDataItem{ \n      Name =\"Chloe Steele\", \n      Gender =\"Female\"} \n  }; \n} \n\n```", "```cs\npublic class Program \n{ \nstatic void Main(string[] args) \n  { \n    ClubMember cm = new ClubMember(); \n    foreach (var item in cm.GetItems()) \n    { \n      Console.WriteLine( \n        \"Name: {0}\\tGender: {1}\", \n          item.Name, \n            item.Gender); \n    } \n  } \n} \n\n```", "```cs\nnamespaceExtendingInterface \n{ \n  public static class IDataSourceExtension \n  { \n    public static IEnumerable<DataItem>\n      GetItemsByGender(thisIDataSourcesrc,string gender) \n    { \n      foreach (DataItem item in src.GetItems()) \n      { \n        if (item.Gender == gender) \n          yield return item; \n      } \n    } \n  } \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    ClubMember cm = new ClubMember(); \n    foreach (var item in cm.GetItemsByGender(\"Female\")) \n    { \n      Console.WriteLine( \n        \"Name: {0}\\tGender: {1}\", \n        item.Name, \n        item.Gender); \n    } \n  } \n} \n\n```", "```cs\npublic static partial class IDataSourceCollectionExtension \n{ \n  public static IEnumerable<DataItem>\n    GetAllItemsByGender_IEnum(thisIEnumerablesrc,string gender) \n  { \n    var items = new List<DataItem>(); \n    foreach (var s in src) \n    { \n      var refDataSource = s as IDataSource; \n      if (refDataSource != null) \n      { \n        items.AddRange(refDataSource.GetItemsByGender(gender)); \n       } \n    } \n    return items; \n  } \n} \n\n```", "```cs\nvar refDataSource = s as IDataSource; \n\n```", "```cs\npublic static partial class IDataSourceCollectionExtension \n{ \n  public static IEnumerable<DataItem> \n  GetAllItemsByGender_IEnumTemplate\n    (thisIEnumerable<IDataSource> src, string gender) \n  { \n    return src.SelectMany(x =>x.GetItemsByGender(gender)); \n  } \n} \n\n```", "```cs\npublic class ClubMember1 : IDataSource \n{ \n  public IEnumerable<DataItem> GetItems() \n  { \n    return new List<DataItem> \n    { \n      newDataItem{ \n        Name =\"Dorian Villarreal\", \n        Gender =\"Male\"}, \n      newDataItem{ \n        Name =\"Olivia Bradley\", \n        Gender =\"Female\"}, \n      newDataItem{ \n        Name =\"Jocelyn Garrison\", \n        Gender =\"Female\"}, \n      newDataItem{ \n        Name =\"Connor Hopkins\", \n        Gender =\"Male\"}, \n      newDataItem{ \n        Name =\"Rose Moore\", \n        Gender =\"Female\"} \n    }; \n  } \n} \npublic class ClubMember2 : IDataSource \n{ \n  public IEnumerable<DataItem> GetItems() \n  { \n    return new List<DataItem> \n    { \n      newDataItem{ \n        Name =\"Conner Avery\", \n        Gender =\"Male\"}, \n      newDataItem{ \n        Name =\"Lexie Irwin\", \n        Gender =\"Female\"}, \n      newDataItem{ \n        Name =\"Bobby Armstrong\", \n        Gender =\"Male\"}, \n      newDataItem{ \n        Name =\"Stanley Wilson\", \n        Gender =\"Male\"}, \n      newDataItem{ \n        Name =\"Chloe Steele\", \n        Gender =\"Female\"} \n    }; \n  } \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    var sources = new IDataSource[] \n    { \n      new ClubMember1(), \n      new ClubMember2() \n    }; \n    var items = sources.GetAllItemsByGender_IEnum(\"Female\"); \n    Console.WriteLine(\"Invoking GetAllItemsByGender_IEnum()\"); \n    foreach (var item in items) \n    { \n      Console.WriteLine( \n        \"Name: {0}\\tGender: {1}\", \n        item.Name, \n        item.Gender); \n    } \n  } \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    var sources = new List<IDataSource> \n    { \n      new ClubMember1(), \n      new ClubMember2() \n    }; \n    var items = \n      sources.GetAllItemsByGender_IEnumTemplate(\"Female\"); \n    Console.WriteLine(\n      \"Invoking GetAllItemsByGender_IEnumTemplate()\"); \n    foreach (var item in items) \n    { \n      Console.WriteLine(\"Name: {0}\\tGender: {1}\", \n        item.Name,item.Gender); \n    } \n  } \n} \n\n```", "```cs\npublic static class ObjectExtension \n{ \n  public static void WriteToConsole(this object o,    stringobjectName) \n  { \n    Console.WriteLine(\n      String.Format(\n        \"{0}: {1}\\n\",\n        objectName,\n        o.ToString())); \n  } \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    var obj1 = UInt64.MaxValue; \n    obj1.WriteToConsole(nameof(obj1)); \n    var obj2 = new DateTime(2016, 1, 1); \n    obj2.WriteToConsole(nameof(obj2)); \n    var obj3 = new DataItem \n    { \n      Name = \"Marcos Raymond\", \n      Gender = \"Male\" \n    }; \n    obj3.WriteToConsole(nameof(obj3)); \n    IEnumerable<IDataSource> obj4 =new List<IDataSource> \n    { \n      new ClubMember1(), \n      new ClubMember2() \n    }; \n    obj4.WriteToConsole(nameof(obj4)); \n  } \n} \n\n```", "```cs\nusing System.Linq; \nnamespace CodeReadability \n{ \n  public static class HelperMethods \n  { \n    public static string TrimAllSpace(string str) \n    { \n      string retValue = \"\"; \n      foreach (char c in str) \n      { \n        retValue +=!char.IsWhiteSpace(c) ?c.ToString() :\"\"; \n      } \n      return retValue; \n    } \n    public static string Capitalize(string str) \n    { \n      string retValue = \"\"; \n      string[] allWords = str.Split(' '); \n      foreach (string s inallWords) \n      { \n        retValue += s.First() \n        .ToString() \n        .ToUpper() \n        + s.Substring(1) \n        + \" \"; \n      } \n      return retValue.Trim(); \n    } \n  } \n} \n\n```", "```cs\nusing System.Linq; \nnamespace CodeReadability \n{ \n  public static class ExtensionMethods \n  { \n    public static string TrimAllSpace(this string str) \n    { \n      string retValue = \"\"; \n      foreach (char c in str) \n      { \n        retValue +=!char.IsWhiteSpace(c) ?c.ToString() :\"\"; \n      } \n      return retValue; \n    } \n    public static string Capitalize(string str) \n    { \n      string retValue = \"\"; \n      string[] allWords = str.Split(' '); \n      foreach (string s inallWords) \n      { \n        retValue += s.First() \n          .ToString() \n          .ToUpper() \n          + s.Substring(1) \n          + \" \"; \n      } \n      return retValue.Trim(); \n    } \n  } \n} \n\n```", "```cs\nstatic void Main(string[] args) \n{ \n  string sntc = \"\"; \n  foreach (string str in sentences) \n  { \n    string strTemp = str; \n    strTemp = HelperMethods.TrimAllSpace(strTemp); \n    strTemp = HelperMethods.Capitalize(strTemp); \n    sntc += strTemp + \" \"; \n  } \n  Console.WriteLine(sntc.Trim()); \n} \n\n```", "```cs\nstatic string[] sentences = new string[] \n{ \n  \" h o w \", \n  \" t o \", \n  \" a p p l y \", \n  \" e x t e n s i o n \", \n  \" m e t h o d s \", \n  \" i n \", \n  \" c s h a r p \", \n  \" p r o g r a m mi n g \" \n}; \n\n```", "```cs\nstatic void Main(string[] args) \n{ \n  string sntc = \"\"; \n  foreach (string str in sentences) \n  { \n    sntc += str.TrimAllSpace().Capitalize() + \" \"; \n  } \n  Console.WriteLine(sntc.Trim()); \n} \n\n```", "```cs\nstring strTemp = str; \nstrTemp = HelperMethods.TrimAllSpace(strTemp); \nstrTemp = HelperMethods.Capitalize(strTemp); \nsntc += strTemp + \" \"; \n\n```", "```cs\nsntc += str.TrimAllSpace().Capitalize() + \" \"; \n\n```", "```cs\npublic static class StaticClassExtensionMethod \n{ \n  public static int Square(this Math m, inti) \n  { \n    return i * i; \n  } \n} \n\n```", "```cs\npublic static class StaticClassExtensionMethod \n{ \n  public static int Square(this inti) \n  { \n    return i * i; \n  } \n} \n\n```", "```cs\npublic class Program \n{ \n  static void Main(string[] args) \n  { \n    int i = 60; \n    Console.WriteLine(i.Square()); \n  } \n} \n\n```", "```cs\nnamespace ModifyingExistingMethod \n{ \n  public static class ExtensionMethods \n  { \n    public static string ToString(this string str) \n    { \n      return \"ToString() extension method\"; \n    } \n  } \n} \n\n```", "```cs\nnamespace ModifyingExistingMethod \n{ \n  public class Program \n  { \n    static void Main(string[] args) \n    { \n      stringstr = \"This is string\"; \n      Console.WriteLine(str.ToString()); \n    } \n  } \n} \n\n```"]