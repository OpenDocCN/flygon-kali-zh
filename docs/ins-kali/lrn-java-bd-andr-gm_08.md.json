["```java\n//Determine the size of each block/place on the game board\n blockSize = screenWidth/40;\n```", "```java\nnumBlocksWide = 40;\n```", "```java\nnumBlocksHigh = ((screenHeight - topGap ))/blockSize;\n```", "```java\n//An array for our snake\nsnakeX = new int[200];\nsnakeY = new int[200];\n```", "```java\n//move the body starting at the back\nfor(int i = snakeLength; i >0 ; i--){\n  snakeX[i] = snakeX[i-1];\n  snakeY[i] = snakeY[i-1];\n}\n```", "```java\nif(snakeX[0] >= numBlocksWide)dead=true;\n```", "```java\n//Have we eaten ourselves?\nfor (int i = snakeLength-1; i > 0; i--) {\n  if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n    dead = true;\n    }\n}\n```", "```java\n//loop through every section of the snake and draw it\n//a block at a time.\ncanvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n```", "```java\nMainActivity.java file\n    Imports\n    MainActivity class\n        Declare some variables and objects\n        onCreate\n        SnakeAnimView class\n            Constructor\n            Run method\n            Update method\n            Draw method\n            controlFPS method\n            pause method\n            resume method\n            onTouchEvent method\n        onStop method\n        onResume method\n        onPause method\n        onKeyDown method\n```", "```java\nMainActivity.java file\n    Imports\n    GameActivity class\n        Declare some variables and objects\n        onCreate\n        SnakeView class\n            Constructor\n            getSnake method\n            getApple method\n            Run method\n            updateGame method\n            drawGame method\n            controlFPS method\n            pause method\n            resume method\n            onTouchEvent method\n        onStop method\n        onResume method\n        onPause method\n        onKeyDown method\n        loadSOund method\n        configureDisplay method\n```", "```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        loadSound();\n        configureDisplay();\n        snakeView = new SnakeView(this);\n        setContentView(snakeView);\n\n    }\n```", "```java\nRect rectToBeDrawn = new Rect(0, 0, 63, 63);\n```", "```java\ncanvas.drawBitmap(headAnimBitmap, rectToBeDrawn, destRect, paint);\n```", "```java\n    public class MainActivity extends Activity {\n\n        Canvas canvas;\n        SnakeAnimView snakeAnimView;\n\n        //The snake head sprite sheet\n        Bitmap headAnimBitmap;\n        //The portion of the bitmap to be drawn in the current frame\n        Rect rectToBeDrawn;\n        //The dimensions of a single frame\n        int frameHeight = 64;\n        int frameWidth = 64;\n        int numFrames = 6;\n        int frameNumber;\n\n        int screenWidth;\n        int screenHeight;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int hi;\n\n        //To start the game from onTouchEvent\n        Intent i;\n    ```", "```java\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n\n            //find out the width and height of the screen\n            Display display = getWindowManager().getDefaultDisplay();\n            Point size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n\n            headAnimBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head_sprite_sheet);\n\n            snakeAnimView = new SnakeAnimView(this);\n            setContentView(snakeAnimView);\n\n            i = new Intent(this, GameActivity.class);\n\n        }\n    ```", "```java\n    class SnakeAnimView extends SurfaceView implements Runnable {\n            Thread ourThread = null;\n            SurfaceHolder ourHolder;\n            volatile boolean playingSnake;\n            Paint paint;\n    ```", "```java\n    public SnakeAnimView(Context context) {\n        super(context);\n        ourHolder = getHolder();\n        paint = new Paint();\n        frameWidth = headAnimBitmap.getWidth()/numFrames;\n        frameHeight = headAnimBitmap.getHeight();\n    }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSnake) {\n                    update();\n                    draw();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void update() {\n\n      //which frame should we draw\n      rectToBeDrawn = new Rect((frameNumber * frameWidth)-1, 0,(frameNumber * frameWidth +frameWidth)-1, frameHeight);\n\n      //now the next frame\n      frameNumber++;\n\n      //don't try and draw frames that don't exist\n      if(frameNumber == numFrames){\n        frameNumber = 0;//back to the first frame\n      }\n    }\n    ```", "```java\n    public void draw() {\n\n                if (ourHolder.getSurface().isValid()) {\n                    canvas = ourHolder.lockCanvas();\n                    //Paint paint = new Paint();\n                    canvas.drawColor(Color.BLACK);//the background\n                    paint.setColor(Color.argb(255, 255, 255, 255));\n                    paint.setTextSize(150);\n                    canvas.drawText(\"Snake\", 10, 150, paint);\n                    paint.setTextSize(25);\n                    canvas.drawText(\"  Hi Score:\" + hi, 10, screenHeight-50, paint);\n\n                    //Draw the snake head\n                    //make this Rect whatever size and location you like\n                    //(startX, startY, endX, endY)\n                    Rect destRect = new Rect(screenWidth/2-100, screenHeight/2-100, screenWidth/2+100, screenHeight/2+100);\n\n                    canvas.drawBitmap(headAnimBitmap, rectToBeDrawn, destRect, paint);\n\n                    ourHolder.unlockCanvasAndPost(canvas);\n                }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n                long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n                long timeToSleep = 500 - timeThisFrame;\n                if (timeThisFrame > 0) {\n                    fps = (int) (1000 / timeThisFrame);\n                }\n                if (timeToSleep > 0) {\n\n                    try {\n                        ourThread.sleep(timeToSleep);\n                    } catch (InterruptedException e) {\n                    }\n\n                }\n\n                lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSnake = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSnake = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n            public boolean onTouchEvent(MotionEvent motionEvent) {\n\n                startActivity(i);\n                return true;\n            }\n    }\n    ```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                snakeAnimView.pause();\n                break;\n            }\n\n            finish();\n        }\n\n        @Override\n        protected void onResume() {\n            super.onResume();\n            snakeAnimView.resume();\n        }\n\n        @Override\n        protected void onPause() {\n            super.onPause();\n            snakeAnimView.pause();\n        }\n\n        public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n                snakeAnimView.pause();\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```", "```java\n    //i = new Intent(this, GameActivity.class);\n    ```", "```java\n    public class GameActivity extends Activity {\n\n        Canvas canvas;\n        SnakeView snakeView;\n\n        Bitmap headBitmap;\n        Bitmap bodyBitmap;\n        Bitmap tailBitmap;\n        Bitmap appleBitmap;\n\n        //Sound\n        //initialize sound variables\n        private SoundPool soundPool;\n        int sample1 = -1;\n        int sample2 = -1;\n        int sample3 = -1;\n        int sample4 = -1;\n\n        //for snake movement\n        int directionOfTravel=0;\n        //0 = up, 1 = right, 2 = down, 3= left\n\n        int screenWidth;\n        int screenHeight;\n        int topGap;\n\n        //stats\n        long lastFrameTime;\n        int fps;\n        int score;\n        int hi;\n\n        //Game objects\n        int [] snakeX;\n        int [] snakeY;\n        int snakeLength;\n        int appleX;\n        int appleY;\n\n        //The size in pixels of a place on the game board\n        int blockSize;\n        int numBlocksWide;\n        int numBlocksHigh;\n    ```", "```java\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n\n            loadSound();\n            configureDisplay();\n            snakeView = new SnakeView(this);\n            setContentView(snakeView);\n\n        }\n    ```", "```java\n      class SnakeView extends SurfaceView implements Runnable {\n          Thread ourThread = null;\n          SurfaceHolder ourHolder;\n          volatile boolean playingSnake;\n          Paint paint;\n\n          public SnakeView(Context context) {\n              super(context);\n              ourHolder = getHolder();\n              paint = new Paint();\n\n                //Even my 9 year old play tester couldn't\n                //get a snake this long\n                snakeX = new int[200];\n                snakeY = new int[200];\n\n                //our starting snake\n                getSnake();\n                //get an apple to munch\n                getApple();\n            }\n    ```", "```java\n    public void getSnake(){\n                snakeLength = 3;\n                //start snake head in the middle of screen\n                snakeX[0] = numBlocksWide / 2;\n                snakeY[0] = numBlocksHigh / 2;\n\n                //Then the body\n                snakeX[1] = snakeX[0]-1;\n                snakeY[1] = snakeY[0];\n\n                //And the tail\n                snakeX[1] = snakeX[1]-1;\n                snakeY[1] = snakeY[0];\n            }\n\n            public void getApple(){\n                Random random = new Random();\n                appleX = random.nextInt(numBlocksWide-1)+1;\n                appleY = random.nextInt(numBlocksHigh-1)+1;\n            }\n    ```", "```java\n    @Override\n            public void run() {\n                while (playingSnake) {\n                    updateGame();\n                    drawGame();\n                    controlFPS();\n\n                }\n\n            }\n    ```", "```java\n    public void updateGame() {\n\n        //Did the player get the apple\n        if(snakeX[0] == appleX && snakeY[0] == appleY){\n            //grow the snake\n            snakeLength++;\n            //replace the apple\n            getApple();\n            //add to the score\n            score = score + snakeLength;\n            soundPool.play(sample1, 1, 1, 0, 0, 1);\n        }\n\n        //move the body - starting at the back\n        for(int i=snakeLength; i >0 ; i--){\n            snakeX[i] = snakeX[i-1];\n            snakeY[i] = snakeY[i-1];\n        }\n\n        //Move the head in the appropriate direction\n        switch (directionOfTravel){\n            case 0://up\n            snakeY[0]  --;\n            break;\n\n            case 1://right\n            snakeX[0] ++;\n            break;\n\n            case 2://down\n            snakeY[0] ++;\n            break;\n\n            case 3://left\n            snakeX[0] --;\n            break;\n            }\n\n            //Have we had an accident\n            boolean dead = false;\n            //with a wall\n            if(snakeX[0] == -1)dead=true;\n            if(snakeX[0] >= numBlocksWide) dead = true;\n            if(snakeY[0] == -1)dead=true;\n            if(snakeY[0] == numBlocksHigh) dead = true;\n            //or eaten ourselves?\n            for (int i = snakeLength-1; i > 0; i--) {\n                if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n                dead = true;\n            }\n        }\n\n            if(dead){\n            //start again\n            soundPool.play(sample4, 1, 1, 0, 0, 1);\n            score = 0;\n            getSnake();\n\n            }\n\n            }\n    ```", "```java\n    public void drawGame() {\n\n        if (ourHolder.getSurface().isValid()) {\n            canvas = ourHolder.lockCanvas();\n            //Paint paint = new Paint();\n            canvas.drawColor(Color.BLACK);//the background\n            paint.setColor(Color.argb(255, 255, 255, 255));\n            paint.setTextSize(topGap/2);\n            canvas.drawText(\"Score:\" + score + \"  Hi:\" + hi, 10, topGap-6, paint);\n\n            //draw a border - 4 lines, top right, bottom , left\n            paint.setStrokeWidth(3);//3 pixel border\n            canvas.drawLine(1,topGap,screenWidth-1,topGap,paint);\n            canvas.drawLine(screenWidth-1,topGap,screenWidth-1,topGap+(numBlocksHigh*blockSize),paint);\n            canvas.drawLine(screenWidth-1,topGap+(numBlocksHigh*blockSize),1,topGap+(numBlocksHigh*blockSize),paint);\n            canvas.drawLine(1,topGap, 1,topGap+(numBlocksHigh*blockSize), paint);\n\n            //Draw the snake\n            canvas.drawBitmap(headBitmap, snakeX[0]*blockSize, (snakeY[0]*blockSize)+topGap, paint);\n            //Draw the body\n            for(int i = 1; i < snakeLength-1;i++){\n                canvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n            }\n            //draw the tail\n            canvas.drawBitmap(tailBitmap, snakeX[snakeLength-1]*blockSize, (snakeY[snakeLength-1]*blockSize)+topGap, paint);\n\n            //draw the apple\n            canvas.drawBitmap(appleBitmap, appleX*blockSize, (appleY*blockSize)+topGap, paint);\n\n            ourHolder.unlockCanvasAndPost(canvas);\n        }\n\n            }\n    ```", "```java\n    public void controlFPS() {\n        long timeThisFrame = (System.currentTimeMillis() - lastFrameTime);\n        long timeToSleep = 100 - timeThisFrame;\n        if (timeThisFrame > 0) {\n            fps = (int) (1000 / timeThisFrame);\n        }\n        if (timeToSleep > 0) {\n\n            try {\n                ourThread.sleep(timeToSleep);\n            } catch (InterruptedException e) {\n            }\n\n            }\n\n            lastFrameTime = System.currentTimeMillis();\n            }\n    ```", "```java\n    public void pause() {\n                playingSnake = false;\n                try {\n                    ourThread.join();\n                } catch (InterruptedException e) {\n                }\n\n            }\n\n            public void resume() {\n                playingSnake = true;\n                ourThread = new Thread(this);\n                ourThread.start();\n            }\n    ```", "```java\n    @Override\n        public boolean onTouchEvent(MotionEvent motionEvent) {\n\n            switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n                case MotionEvent.ACTION_UP:\n                if (motionEvent.getX() >= screenWidth / 2) {\n                    //turn right\n                    directionOfTravel ++;\n                    //no such direction\n\n                    if(directionOfTravel == 4)\n                    //loop back to 0(up)\n                    directionOfTravel = 0;\n                }\n            } else {\n                //turn left\n                directionOfTravel--;\n                if(directionOfTravel == -1) {//no such direction\n                //loop back to 0(up)\n                directionOfTravel = 3;\n                            }\n                        }\n                }\n                return true;\n            }\n    ```", "```java\n    @Override\n        protected void onStop() {\n            super.onStop();\n\n            while (true) {\n                snakeView.pause();\n                break;\n            }\n\n            finish();\n        }\n\n        @Override\n        protected void onResume() {\n            super.onResume();\n            snakeView.resume();\n        }\n\n        @Override\n        protected void onPause() {\n            super.onPause();\n            snakeView.pause();\n        }\n\n        public boolean onKeyDown(int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\n\n               snakeView.pause();\n\n                Intent i = new Intent(this, MainActivity.class);\n                startActivity(i);\n                finish();\n                return true;\n            }\n            return false;\n        }\n    ```", "```java\n    public void loadSound(){\n        soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC, 0);\n        try {\n            //Create objects of the 2 required classes\n            AssetManager assetManager = getAssets();\n            AssetFileDescriptor descriptor;\n\n            //create our three fx in memory ready for use\n            descriptor = assetManager.openFd(\"sample1.ogg\");\n            sample1 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample2.ogg\");\n            sample2 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample3.ogg\");\n            sample3 = soundPool.load(descriptor, 0);\n\n            descriptor = assetManager.openFd(\"sample4.ogg\");\n            sample4 = soundPool.load(descriptor, 0);\n\n            } catch (IOException e) {\n            //Print an error message to the console\n            Log.e(\"error\", \"failed to load sound files);\n            }\n        }\n    ```", "```java\n    public void configureDisplay(){\n            //find out the width and height of the screen\n            Display display = getWindowManager().getDefaultDisplay();\n            Point size = new Point();\n            display.getSize(size);\n            screenWidth = size.x;\n            screenHeight = size.y;\n            topGap = screenHeight/14;\n            //Determine the size of each block/place on the game board\n            blockSize = screenWidth/40;\n\n            //Determine how many game blocks will fit into the \n            //height and width\n            //Leave one block for the score at the top\n            numBlocksWide = 40;\n            numBlocksHigh = ((screenHeight - topGap ))/blockSize;\n\n            //Load and scale bitmaps\n            headBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);\n            bodyBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.body);\n            tailBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.tail);\n            appleBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.apple);\n\n            //scale the bitmaps to match the block size\n            headBitmap = Bitmap.createScaledBitmap(headBitmap, blockSize, blockSize, false);\n            bodyBitmap = Bitmap.createScaledBitmap(bodyBitmap, blockSize, blockSize, false);\n            tailBitmap = Bitmap.createScaledBitmap(tailBitmap, blockSize, blockSize, false);\n            appleBitmap = Bitmap.createScaledBitmap(appleBitmap, blockSize, blockSize, false);\n\n        }\n    ```", "```java\npublic void updateGame() {\n\n            //Did the player get the apple\n            if(snakeX[0] == appleX && snakeY[0] == appleY){\n                //grow the snake\n                snakeLength++;\n                //replace the apple\n                getApple();\n                //add to the score\n                score = score + snakeLength;\n                soundPool.play(sample1, 1, 1, 0, 0, 1);\n            }\n```", "```java\n            //move the body - starting at the back\n            for(int i = snakeLength; i >0 ; i--){\n                snakeX[i] = snakeX[i-1];\n                snakeY[i] = snakeY[i-1];\n            }\n```", "```java\n            //Move the head in the appropriate direction\n            switch (directionOfTravel){\n                case 0://up\n                    snakeY[0]  --;\n                    break;\n\n                case 1://right\n                    snakeX[0] ++;\n                    break;\n\n                case 2://down\n                    snakeY[0] ++;\n                    break;\n\n                case 3://left\n                    snakeX[0] --;\n                    break;\n            }\n```", "```java\n            //Have we had an accident\n            boolean dead = false;\n            //with a wall\n            if(snakeX[0] == -1)dead=true;\n            if(snakeX[0] >= numBlocksWide)dead=true;\n            if(snakeY[0] == -1)dead=true;\n            if(snakeY[0] == numBlocksHigh)dead=true;\n```", "```java\n           //or eaten ourselves?\n            for (int i = snakeLength-1; i > 0; i--) {\n                if ((i > 4) && (snakeX[0] == snakeX[i]) && (snakeY[0] == snakeY[i])) {\n                    dead = true;\n                }\n            }\n```", "```java\n            if(dead){\n                //start again\n                soundPool.play(sample4, 1, 1, 0, 0, 1);\n                score = 0;\n                getSnake();\n\n            }\n\n        }\n```", "```java\npublic void drawGame() {\n\n            if (ourHolder.getSurface().isValid()) {\n                canvas = ourHolder.lockCanvas();\n                //Paint paint = new Paint();\n                canvas.drawColor(Color.BLACK);//the background\n                paint.setColor(Color.argb(255, 255, 255, 255));\n                paint.setTextSize(topGap/2);\n```", "```java\n    canvas.drawText(\"Score:\" + score + \"  Hi:\" + hi, 10, topGap-6, paint);\n```", "```java\n //draw a border - 4 lines, top right, bottom, left\n                paint.setStrokeWidth(3);//4 pixel border\n                canvas.drawLine(1,topGap,screenWidth-1,topGap,paint);\n                canvas.drawLine(screenWidth-1,topGap,screenWidth-1,topGap+(numBlocksHigh*blockSize),paint);\n                canvas.drawLine(screenWidth-1,topGap+(numBlocksHigh*blockSize),1,topGap+(numBlocksHigh*blockSize),paint);\n                canvas.drawLine(1,topGap, 1,topGap+(numBlocksHigh*blockSize), paint);\n```", "```java\n//Draw the snake\ncanvas.drawBitmap(headBitmap, snakeX[0]*blockSize, (snakeY[0]*blockSize)+topGap, paint);\n```", "```java\n//Draw the body\nfor(int i = 1; i < snakeLength-1; i++){\n    canvas.drawBitmap(bodyBitmap, snakeX[i]*blockSize, (snakeY[i]*blockSize)+topGap, paint);\n}\n```", "```java\n//draw the tail\ncanvas.drawBitmap(tailBitmap, snakeX[snakeLength-\n    1]*blockSize, (snakeY[snakeLength-1]*blockSize)+topGap, paint);\n```", "```java\n                //draw the apple\n                canvas.drawBitmap(appleBitmap, appleX*blockSize, \n                    (appleY*blockSize)+topGap, paint);\n\n                ourHolder.unlockCanvasAndPost(canvas);\n            }\n\n        }\n```", "```java\npublic void configureDisplay(){\n        //find out the width and height of the screen\n        Display display = getWindowManager().getDefaultDisplay();\n        Point size = new Point();\n        display.getSize(size);\n        screenWidth = size.x;\n        screenHeight = size.y;\n```", "```java\n        topGap = screenHeight/14;\n        //Determine the size of each block/place on the game board\n        blockSize = screenWidth/40;\n\n        //Determine how many game blocks will fit into the height and width\n        //Leave one block for the score at the top\n        numBlocksWide = 40;\n        numBlocksHigh = (screenHeight - topGap )/blockSize;\n```", "```java\n//Load and scale bitmaps\n        headBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);\n        bodyBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.body);\n        tailBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.tail);\n        appleBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.apple);\n```", "```java\n        //scale the bitmaps to match the block size\n        headBitmap = Bitmap.createScaledBitmap(headBitmap, blockSize, \n            blockSize, false);\n        bodyBitmap = Bitmap.createScaledBitmap(bodyBitmap, blockSize, \n            blockSize, false);\ntailBitmap = Bitmap.createScaledBitmap(tailBitmap, blockSize, \n    blockSize, false);\nappleBitmap = Bitmap.createScaledBitmap(appleBitmap, \n    blockSize, blockSize, false);\n\n    }\n```"]