["```js\nvar express = require('express');\n```", "```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n    res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n```", "```js\n/* GET sub page. */\n router.get('/hello', function(req, res, next) {\n     res.render('index', { title: 'Hello! This is a route!' });\n });\n```", "```js\nfetch('/hello', {\n method: 'POST',\n body: JSON.stringify({ message: \"This is from AJAX\" }),\n headers: {\n   'Content-Type': 'application/json'\n },\n});\n```", "```js\n<h1>{{title}}</h1>\n\n<p>Welcome to {{title}}</p>\n\n<p id=\"data\">{{ data }}</p>\n\n<script src=\"/javascripts/index.js\"></script>\n```", "```js\n/* POST to sub page. */\nrouter.post('/hello', function(req, res, next) {\n  res.send(req.body);\n});\n```", "```js\n{\n \"name\": \"my-webapp\",\n \"version\": \"0.0.0\",\n \"private\": true,\n \"scripts\": {\n \"start\": \"node ./bin/www\"\n },\n \"dependencies\": {\n \"cookie-parser\": \"~1.4.4\",\n \"debug\": \"~2.6.9\",\n \"express\": \"~4.16.1\",\n \"hbs\": \"~4.0.4\",\n \"http-errors\": \"~1.6.3\",\n \"morgan\": \"~1.9.1\",\n \"supervisor\": \"^0.12.0\"\n }\n}\n```", "```js\n\"scripts\": {\n     \"start\": \"supervisor ./bin/www\"\n },\n```", "```js\nfetch('/hello', {\n method: 'POST',\n body: JSON.stringify({ message: \"This is from AJAX\" }),\n headers: {\n   'Content-Type': 'application/json'\n },\n}).then((res) => {\n return res.json();\n}).then((data) => {\n document.querySelector('#data').innerHTML = data.message\n});\n```", "```js\nvar express = require('express');\nvar router = express.Router();\n\nconst store = require('data-store')({ path: process.cwd() + '/data.json' });\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n res.render('index', { title: 'Express', data: \n JSON.stringify(store.get()) });\n});\n\n/* GET sub page. */\nrouter.get('/hello', function(req, res, next) {\n res.render('index', { title: 'Hello! This is a route!' });\n});\n\n/* POST to sub page. */\nrouter.post('/hello', function(req, res) {\n store.set('message', { message: `${req.body.message} at ${Date.now()}` })\n\n res.set('Content-Type', 'application/json');\n res.send(req.body);\n});\n\nmodule.exports = router;\n```", "```js\n<h1>{{title}}</h1>\n<p>Welcome to {{title}}</p>\n\n<button id=\"add\">Add Data</button>\n<button id=\"delete\">Delete Data</button>\n\n<p id=\"data\">{{ data }}</p>\n<script src=\"/javascripts/index.js\"></script>\n\n```", "```js\nconst addData = () => {\n fetch('/hello', {\n   method: 'POST',\n   headers: {\n     'Content-Type': 'application/json'\n   },\n   body: JSON.stringify({ message: \"This is from Ajax\" })\n }).then((res) => {\n   return res.json()\n }).then((data) => {\n     document.querySelector('#data').innerHTML = data.message\n })\n}\n```", "```js\ndocument.querySelector('#add').addEventListener('click', () => {\n addData()\n window.location = \"/\"\n})\n```", "```js\nconst deleteData = () => {\n fetch('/', {\n   method: 'DELETE',\n   headers: {\n     'Content-Type': 'application/json'\n   },\n   body: JSON.stringify({ id: 'message' })\n })\n}\ndocument.querySelector('#delete').addEventListener('click', () => {\n deleteData()\n window.location = \"/\"\n})\n```", "```js\n/* DELETE from json and return to home page */\nrouter.delete('/', function(req, res) {\n store.del(req.body.id);\n\n res.sendStatus(200);\n});\n```", "```js\n{{#if data }}\n <p id=\"data\">{{ data }}</p>\n{{/if}}\n```", "```js\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n res.render('index', { title: 'Express', data: \n JSON.stringify(Object.entries(store.get()).length > 0 ? store.get() :\n  null) });\n});\n```", "```js\ndocument.querySelector('.add-user').addEventListener('click', (e) => {\n  fetch('/user', {\n    method: 'POST'\n  }).then( (data) => {\n    window.location.reload()\n  })\n})\n```", "```js\nvar express = require('express');\nvar router = express.Router();\n\nconst UsersController = require('../controllers/users');\n\n/* GET all users. */\nrouter.get('/', async (req, res, next) => {\n  res.send(await UsersController.getUsers());\n});\n\n/* GET user. */\nrouter.get('/:user', async (req, res, next) => {\n  const user = await UsersController.getUser(req.params.user);\n  res.render('user', { user: user });\n});\n\n/* POST to create user. */\nrouter.post('/', async (req, res, next) => {\n  await UsersController.createUser();\n  res.send(await UsersController.getUsers());\n});\n\n/* DELETE user. */\nrouter.delete('/:user', async (req, res, next) => {\n  await UsersController.deleteUser(req.params.user);\n  res.sendStatus(200);\n});\n\nmodule.exports = router;\n```", "```js\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 bin\n\u2502 \u2514\u2500\u2500 www\n\u251c\u2500\u2500 controllers\n\u2502 \u2514\u2500\u2500 ships.js\n\u251c\u2500\u2500 data\n\u2502 \u2514\u2500\u2500 starship-names.json\n\u251c\u2500\u2500 models\n\u2502 \u2514\u2500\u2500 ships.js\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502 \u251c\u2500\u2500 images\n\u2502 \u2502 \u2514\u2500\u2500 bg.jpg\n\u2502 \u251c\u2500\u2500 javascripts\n\u2502 \u2502 \u2514\u2500\u2500 index.js\n\u2502 \u2514\u2500\u2500 stylesheets\n\u2502 \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 routes\n\u2502 \u251c\u2500\u2500 index.js\n\u2502 \u251c\u2500\u2500 ships.js\n\u2502 \u2514\u2500\u2500 users.js\n\u2514\u2500\u2500 views\n \u251c\u2500\u2500 error.hbs\n \u251c\u2500\u2500 index.hbs\n \u2514\u2500\u2500 layout.hbs\n```", "```js\ndocument.querySelector('.random').addEventListener('click', () => {\n fetch('/ships/random', {\n   method: 'POST'\n }).then( () => {\n   window.location.reload();\n })\n})\n```", "```js\nrouter.post('/random', async (req, res, next) => {\n await ShipsController.createRandom();\n res.sendStatus(200);\n});\n```", "```js\nexports.createRandom = async () => {\n return await ShipsModel.createRandom();\n}\n```", "```js\nexports.createRandom = async () => {\n const shipNames = require('../data/starship-names');\n const randomSeed = Math.ceil(Math.random() * \n  shipNames.names.length);\n\n const shipData = {\n   name: shipNames.names[randomSeed],\n   registry: `NCC-${Math.round(Math.random()*10000)}`,\n   shields: 100,\n   torpedoes: Math.round(Math.random()*255+1),\n   hull: 0,\n   speed: (Math.random()*9+1).toPrecision(2),\n   phasers: Math.round(Math.random()*100+1),\n   x: 0,\n   y: 0,\n   z: 0\n };\n\n if (storage.getItem(shipData.registry) || storage.values('name') \n == shipData.name) {\n   shipData.registry = `NCC-${Math.round(Math.random()*10000)}`;\n   shipData.name = shipNames.names[Math.round(Math.random()*\n    shipNames.names.length)];\n }\n  await storage.setItem(shipData.registry, shipData);\n return;\n}\n```", "```js\nconst eliminateExistingShips = async () => {\n const shipNames = require('../data/starship-names');\n const ships = await storage.values();\n\n const names = Object.values(ships).map((value, index, arr) => {\n   return value.name;\n });\n\n const availableNames = shipNames.names.filter((val) => {\n   return !names.includes(val);\n });\n\n const unavailableRegistryNumbers = Object.values(ships).map((value, index, \n arr) => {\n   return value.registry;\n });\n\n return { names: availableNames, unavailableRegistries: \n unavailableRegistryNumbers };\n}\n```", "```js\nexports.createRandom = async () => {\n const { names, unavailableRegistries } = await eliminateExistingShips();\n\n const randomSeed = Math.ceil(Math.random() * names.length);\n\n const shipData = {\n   name: names[randomSeed],\n   registry: `NCC-${Math.round(Math.random() * 10000)}`,\n   shields: 100,\n   torpedoes: Math.round(Math.random() * 255 + 1),\n   hull: 0,\n   speed: (Math.random() * 9 + 1).toPrecision(2),\n   phasers: Math.round(Math.random() * 100 + 1),\n   x: 0,\n   y: 0,\n   z: 0\n };\n\n while (unavailableRegistries.includes(shipData.registry)) {\n   shipData.registry = `NCC-${Math.round(Math.random() * 10000)}`;\n }\n await storage.setItem(shipData.registry, shipData);\n return;\n}\n```", "```js\nconst names = Object.values(ships).map((value, index, arr) => {\n   return value.name;\n});\n```", "```js\nconst availableNames = shipNames.names.filter((val) => {\n   return !names.includes(val);\n});\n```", "```js\n const { names, unavailableRegistries } = await eliminateExistingShips();\n```", "```js\nrouter.get('/:ship1/attack/:ship2', async (req, res, next) => {\n const damage = await ShipsController.fire(req.params.ship1, \n req.params.ship2);\n res.sendStatus(200);\n});\n```", "```js\nexports.fire = async (ship1, ship2, weapon) => {\n const target = await ShipsModel.getShip(ship2);\n const source = await ShipsModel.getShip(ship1);\n let damage = calculateDamage(source, target, weapon);\n\n if (weapon == 'torpedo' && source.torpedoes > 0) {\n   ShipsModel.fireTorpedo(ship1);\n } else {\n   damage = 0\n }\n\n return damage;\n}\n```", "```js\nconst calculateDamage = (ship1, ship2, weapon) => {\n const distanceBetweenShips = Math.sqrt(Math.pow(ship2.x - ship1.x, 2) + \n Math.pow(ship2.y - ship1.y, 2) + Math.pow(ship2.z - ship1.z, 2));\n const chanceToStrike = Math.floor(100-distanceBetweenShips);\n const didStrike = (Math.ceil(Math.random()*100) - chanceToStrike) ? true : \n false;\n const damage = (didStrike) ? ((weapon == 'phasers') ? \n Math.ceil(Math.random()*ship1.phasers) : TORPEDO_DAMAGE) : 0;\n return damage;\n}\n```"]