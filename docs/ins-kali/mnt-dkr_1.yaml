- en: Chapter 1. Introduction to Docker Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Docker监控简介
- en: Docker has been a recent but very important addition to a SysAdmins toolbox.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是最近添加到系统管理员工具箱中的一个非常重要的工具。
- en: Docker describes itself as an open platform for building, shipping, and running
    distributed applications. This means that developers can bundle their code and
    pass it to their operations team. From here, they can deploy safe in the knowledge
    that it will be done so in a way that introduces consistency with the environment
    in which the code is running.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Docker自称是一个用于构建、发布和运行分布式应用程序的开放平台。这意味着开发人员可以捆绑他们的代码并将其传递给运维团队。从这里，他们可以放心地部署，因为他们知道它将以一种引入代码运行环境一致性的方式进行部署。
- en: When this process is followed, it should make the age-old developers versus
    operations argument of "it worked on my local development server"—a thing of the
    past. Since before its "production ready" 1.0 release back in June 2014, there
    had been over 10,000 Dockerized applications available. By the end of 2014, that
    number had risen to over 71,000\. You can see how Docker grew in 2014 by looking
    at the infographic that was published by Docker in early 2015, which can be found
    at [https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/](https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这个过程后，应该会让开发人员与运维人员之间关于“在我的本地开发服务器上可以运行”的争论成为过去的事情。自2014年6月发布“可投入生产”的1.0版本之前，已经有超过10,000个Docker化的应用程序可用。到2014年底，这个数字已经上升到超过71,000个。您可以通过查看Docker在2014年的增长情况来了解Docker在2014年的增长情况，该信息图表是由Docker在2015年初发布的，可以在[https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/](https://blog.docker.com/2015/01/docker-project-2014-a-whirlwind-year-in-review/)找到。
- en: While the debate is still raging about how production ready the technology is,
    Docker has gained an impressive list of technology partners, including RedHat,
    Canonical, HP, and even Microsoft.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管关于技术是否已经达到生产就绪的争论仍在继续，但Docker已经获得了一系列令人印象深刻的技术合作伙伴，包括RedHat、Canonical、HP，甚至还有微软。
- en: Companies such as Google, Spotify, Soundcloud, and CenturyLink, have all open
    sourced tools that support Docker in some way, shape, or form and there has also
    been numerous independent developers who have released apps that provide additional
    functionality to the core Docker product set. Also, all the companies have sprung
    up around the Docker ecosystem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像Google、Spotify、Soundcloud和CenturyLink这样的公司都以某种方式开源了支持Docker的工具，还有许多独立开发人员发布了提供额外功能的应用程序，以补充核心Docker产品集。此外，围绕Docker生态系统还出现了许多公司。
- en: This book assumes that you have had some level of experience building, running,
    and managing Docker containers, and that you would now like to start to metrics
    from your running applications to further tune them, or that you would like to
    know when a problem occurs with a container so that you can debug any ongoing
    issues.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假定您已经有一定程度的经验来构建、运行和管理Docker容器，并且您现在希望开始从正在运行的应用程序中获取指标，以进一步调整它们，或者您希望在容器出现问题时了解情况，以便调试任何正在发生的问题。
- en: 'If you have never used Docker before, you may want to try one of the excellent
    books that serve and introduce you to all the things that Docker provides, books
    such as *Learning Docker*, *Packt Publishing*, or Docker''s own introduction to
    containers, which can be found at their documentation pages, as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未使用过Docker，您可能希望尝试一本优秀的书籍，介绍Docker提供的所有内容，比如《学习Docker》，Packt Publishing出版，或者Docker自己的容器介绍，可以在他们的文档页面找到，如下所示：
- en: 'Learning Docker: [https://www.packtpub.com/virtualization-and-cloud/learning-docker](https://www.packtpub.com/virtualization-and-cloud/learning-docker)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Docker：[https://www.packtpub.com/virtualization-and-cloud/learning-docker](https://www.packtpub.com/virtualization-and-cloud/learning-docker)
- en: 'Official Docker docs: [https://docs.docker.com/](https://docs.docker.com/)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方Docker文档：[https://docs.docker.com/](https://docs.docker.com/)
- en: 'Now, we have a brought ourselves up to speed with what Docker is; the rest
    of this chapter will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了Docker是什么；本章的其余部分将涵盖以下主题：
- en: How different is it to monitor containers versus more traditional servers such
    as virtual machines, bare metal machine, and cloud instances (Pets, Cattle, Chickens,
    and Snowflakes).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视容器与监视传统服务器（如虚拟机、裸机和云实例）有多大不同（宠物、牛、鸡和雪花）。
- en: What are the minimum versions of Docker you should be running?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该运行的Docker的最低版本是多少？
- en: How to follow instructions on bringing up an environment locally using Vagrant
    in order to follow the practical exercises in this book
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何按照使用Vagrant在本地启动环境的说明，以便在本书的实际练习中进行跟踪
- en: Pets, Cattle, Chickens, and Snowflakes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宠物、牛、鸡和雪花
- en: Before we start discussing the various ways in which you can monitor your containers,
    we should get an understanding of what a SysAdmins world looks like these days
    and also where containers fit into it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论各种监视容器的方法之前，我们应该了解一下现在系统管理员的工作是什么样子，以及容器在其中的位置。
- en: A typical SysAdmin will probably be looking after an estate of servers that
    are hosted in either an on-site or third-party data center, some may even manage
    instances hosted in a public cloud such as Amazon Web Services or Microsoft Azure,
    and some SysAdmins may juggle all their server estates across multiple hosting
    environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的系统管理员可能会负责托管在内部或第三方数据中心的服务器群，有些甚至可能管理托管在亚马逊网络服务或微软Azure等公共云中的实例，一些系统管理员可能会在多个托管环境中管理他们的服务器群。
- en: Each of these different environments has its own way of doing things, as well
    as performing best practices. Back in February 2012, Randy Bias gave a talk at
    Cloudscaling that discussed architectures for open and scalable clouds. Towards
    the end of the slide deck, Randy introduced the concept of Pets versus Cattle
    (which he attributes to Bill Baker, who was then an engineer at Microsoft).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个不同的环境都有自己的做事方式，以及执行最佳实践。2012年2月，Randy Bias在Cloudscaling发表了一篇关于开放和可扩展云架构的演讲。在幻灯片最后，Randy介绍了宠物与牛的概念（他将其归因于当时在微软担任工程师的Bill
    Baker）。
- en: You can view the original slide deck at [http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](http://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds)上查看原始幻灯片。
- en: Pets versus Cattle is now widely accepted as a good analogy to describe modern
    hosting practices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 宠物与牛现在被广泛接受为描述现代托管实践的好比喻。
- en: Pets
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宠物
- en: 'Pets are akin to traditional physical servers or virtual machines, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 宠物类似于传统物理服务器或虚拟机，如下所示：
- en: Each pet has a name; for example, `myserver.domain.com`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个宠物都有一个名字；例如，`myserver.domain.com`。
- en: When they're not well, you take them to the vet to help them get better. You
    employ SysAdmins to look after them.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它们不舒服时，您会带它们去兽医那里帮助它们康复。您雇用系统管理员来照顾它们。
- en: You pay close attention to them, sometimes for years. You take backups, patch
    them, and ensure that they are fully documented.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你密切关注它们，有时长达数年。您备份它们，打补丁，并确保它们完全记录。
- en: Cattle
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 牛
- en: 'Cattle, on the other hand, represent more modern cloud computing instances,
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，牛代表了更现代的云计算实例，如下所示：
- en: You've got too many to name, so you give them numbers; for example, the URL
    could look something like `ip123123123123.eu.public-cloud.com`.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有太多了，无法一一列举，所以你给它们编号；例如，URL可能看起来像`ip123123123123.eu.public-cloud.com`。
- en: 'When they get sick, you shoot them and if your herd requires it, you replace
    anything you''ve killed: A server crashes or shows signs that it is having problems,
    you terminate it and your configuration automatically replaces it with an exact
    replica.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它们生病时，你射杀它们，如果你的群需要，你替换你杀死的任何东西：服务器崩溃或显示出有问题的迹象，你终止它，你的配置会自动用精确的副本替换它。
- en: You put them in a field and watch them from far and you don't expect them to
    live long. Rather than monitoring the individual instances, you monitor the cluster.
    When more resources are needed, you add more instances and once the resource is
    no longer required, you terminate the instances to get you back to your base configuration.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你把它们放在田野里，远远地观察它们，你不指望它们能活得很久。与监视个别实例不同，你监视整个集群。当需要更多资源时，你添加更多实例，一旦不再需要资源，你终止实例以恢复到基本配置。
- en: Chickens
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鸡
- en: 'Next up is a term that is a good way of describing how containers fit into
    the Pets versus Cattle world; in a blog post title "Cloud Computing: Pets, Cattle
    and ... Chickens?" on ActiveState, Bernard Golden describes containers as Chickens:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个术语，它是描述容器如何适应宠物与牛之间的世界的好方法；在ActiveState的一篇名为“云计算：宠物、牛和...鸡？”的博客文章中，伯纳德·戈尔登将容器描述为鸡。
- en: They're more efficient than cattle when it comes to resource use. A container
    can boot in seconds where a instance or server can take minutes; it also uses
    less CPU power than a typical virtual machine or cloud instance.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在资源使用方面，它们比牛更有效。一个容器可以在几秒钟内启动，而实例或服务器可能需要几分钟；它还比典型的虚拟机或云实例使用更少的CPU功率。
- en: There are many more chickens than cattle. You can quite densely pack containers
    onto your instances or servers.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸡比牛多得多。你可以在实例或服务器上密集地放置容器。
- en: Chickens tend to have a shorter lifespan than cattle and pets. Containers lend
    themselves to running micros-services; these containers may only be active for
    a few minutes.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸡的寿命往往比牛和宠物短。容器适合运行微服务；这些容器可能只活跃几分钟。
- en: The original blog post can be found at [http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens](http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 原始博客文章可以在[http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens](http://www.activestate.com/blog/2015/02/cloud-computing-pets-cattle-and-chickens)找到。
- en: Snowflakes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 雪花
- en: 'The final term is not animal-related and it describes a type of server that
    you defiantly don''t want to have in your server estate, a Snowflake. This term
    was penned by Martin Fowler in a blog post titled "SnowflakeServer". Snowflakes
    is a term applied to "legacy" or "inherited" servers:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个术语与动物无关，它描述了一种你绝对不想在服务器群中拥有的类型，即雪花。这个术语是由马丁·福勒在一篇名为“SnowflakeServer”的博客文章中创造的。雪花是一个用于“传统”或“继承”服务器的术语：
- en: Snowflakes are delicate and are treated with kid gloves. Typically, the server
    has been in the data center since you started. No one knows who originally configured
    it and there is no documentation of it; all you know is that it is important.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雪花是脆弱的，需要小心对待。通常，这台服务器从你开始在数据中心工作以来就一直存在。没有人知道最初是谁配置的，也没有文档记录；你只知道它很重要。
- en: Each one is unique and is impossible to exactly reproduce. Even the most hardened
    SysAdmin fears to reboot the machine incase it doesn't boot afterwards, as it
    is running end-of-life software that can not easily be reinstalled.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个都是独一无二的，无法精确复制。即使是最坚强的系统管理员也害怕重新启动机器，因为它正在运行即将终止的软件，无法轻松重新安装。
- en: Martin's post can be found at [http://martinfowler.com/bliki/SnowflakeServer.html](http://martinfowler.com/bliki/SnowflakeServer.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁的文章可以在[http://martinfowler.com/bliki/SnowflakeServer.html](http://martinfowler.com/bliki/SnowflakeServer.html)找到。
- en: So what does this all mean?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么这一切意味着什么呢？
- en: Depending on your requirements and the application you want to deploy, your
    containers can be launched onto either pet or cattle style servers. You can also
    create a clutch of chickens and have your containers run micro-services.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的要求和想要部署的应用程序，您的容器可以部署到宠物风格或牛群风格的服务器上。您还可以创建一群小鸡，并让您的容器运行微服务。
- en: Also, in theory, you can replace your feared snowflake servers with a container-based
    application that meets all the end-of-life software requirements while remaining
    deployable on a modern supportable platform.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，理论上，您可以用满足软件生命周期要求的基于容器的应用程序替换您害怕的雪花服务器，同时仍然可以部署在现代可支持的平台上。
- en: Each of the different styles of server has different monitoring requirements,
    in the final chapter we will look at Pets, Cattle, Chickens, and Snowflakes again
    and discuss the tools we have covered in the coming chapters. We will also cover
    best practices you should take into consideration when planning your monitoring.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每种不同风格的服务器都有不同的监控要求，在最后一章中，我们将再次讨论宠物、牛群、鸡群和雪花，并讨论我们在接下来的章节中涵盖的工具。我们还将介绍在规划监控时应考虑的最佳实践。
- en: Docker
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: While Docker hit its version 1.0 milestone over a year ago, it is still in it's
    infancy; with each new release comes new features, bug fixes, and even support
    for some early functionality that is being depreciated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Docker在一年多前达到了1.0版本的里程碑，但它仍处于初期阶段；每次新发布都会带来新功能、错误修复，甚至支持一些正在被淘汰的早期功能。
- en: 'Docker itself is now a collection of several smaller projects; these include
    the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Docker本身现在是几个较小项目的集合；其中包括以下内容：
- en: Docker Engine
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Engine
- en: Docker Machine
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Machine
- en: Docker Compose
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Docker Swarm
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: Docker Hub
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub
- en: Docker Registry
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Registry
- en: Kitmatic
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kitmatic
- en: In this book, we will be using Docker Engine, Docker Compose, and the Docker
    Hub.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用Docker Engine，Docker Compose和Docker Hub。
- en: Docker Engine is the core component of the Docker project and it provides the
    main bulk of the Docker functionality. Whenever Docker or the `docker` command
    is mentioned in this book, I will be referring to Docker Engine.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Engine是Docker项目的核心组件，它提供了主要的Docker功能。每当在本书中提到Docker或`docker`命令时，我指的是Docker
    Engine。
- en: The book assumes you have Docker Engine version 1.71 or later installed; older
    versions of Docker Engine may not contain the necessary functionality required
    to run the commands and software covered in the upcoming chapters.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您已安装了Docker Engine 1.71或更高版本；旧版本的Docker Engine可能不包含运行接下来章节中涵盖的命令和软件所需的必要功能。
- en: Docker Compose started its life as a third-party orchestration tool called **Fig**
    before being purchased by Docker in 2014\. It is described as a way of defining
    a multi-container application using YAML ([http://yaml.org](http://yaml.org)).
    Simply put, this means that you quickly deploy complex applications using a single
    command that calls a human readable configuration file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose最初是一个名为**Fig**的第三方编排工具，在2014年被Docker收购。它被描述为使用YAML（[http://yaml.org](http://yaml.org)）定义多容器应用程序的一种方式。简而言之，这意味着您可以使用一个调用人类可读配置文件的单个命令快速部署复杂的应用程序。
- en: We assume that you have Docker Compose 1.3.3 or later installed; the `docker-compose.yml`
    files mentioned in this book have been written with this version in mind.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已安装了Docker Compose 1.3.3或更高版本；本书中提到的`docker-compose.yml`文件是根据这个版本编写的。
- en: 'Finally, the majority of the images we will be deploying during this book will
    be sourced from the Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)),
    which not only houses a public registry containing over 40,000 public images but
    also 100 official images. The following screenshot shows the official repositories
    listing on the Docker Hub website:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本书中我们将部署的大部分镜像都将来自Docker Hub（[https://hub.docker.com/](https://hub.docker.com/)），这里不仅有一个包含超过40,000个公共镜像的公共注册表，还有100个官方镜像。以下截图显示了Docker
    Hub网站上的官方存储库列表：
- en: '![Docker](../images/00002.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Docker](../images/00002.jpeg)'
- en: You can also sign up and use the Docker Hub to host your own public and private
    images.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以注册并使用Docker Hub来托管您自己的公共和私有镜像。
- en: Launching a local environment
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动本地环境
- en: Wherever possible, I will try to ensure that the practical exercises in this
    book will be able to be run on a local machine such as your desktop or laptop.
    For the purposes of this book, I will assume that your local machine is running
    either a recent version OS X or an up-to-date Linux distribution and has a high
    enough specification to run the software mentioned in this chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我将尽量确保本书中的实际练习能够在本地机器上运行，比如您的台式机或笔记本电脑。在本书中，我将假设您的本地机器正在运行最新版本的OS X或最新的Linux发行版，并且具有足够高的规格来运行本章中提到的软件。
- en: The two tools we will be using to launch our Docker instances will also run
    on Windows; therefore, it should be possible to follow the instructions within
    this, although you may have to refer the usage guides for any changes to the syntax.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的两个工具也可以在Windows上运行；因此，按照本书中的说明应该是可能的，尽管您可能需要参考语法的使用指南进行任何更改。
- en: Due to the way in which Docker is architected, a lot of the content of this
    book will have you running commands and interacting with the command line on the
    virtual server that is acting as the host machine, rather than the containers
    themselves. Because of this, we will not be using either Docker Machine or Kitematic.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker的架构方式，本书的大部分内容将让您在充当主机机器的虚拟服务器上运行命令并与命令行进行交互，而不是直接与容器进行交互。因此，我们将不使用Docker
    Machine或Kitematic。
- en: Both of these are tools provided by Docker to quickly bootstrap a Docker-enabled
    virtual server on your local machine, as unfortunately the host machines deployed
    by these tools contain a stripped down operating system that is optimized for
    running Docker with the smallest footprint as possible.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具都是Docker提供的，用于在本地机器上快速引导启用Docker的虚拟服务器，不过这些工具部署的主机机器包含了一个经过优化的、尽可能小的Docker运行的精简操作系统。
- en: As we will be installing additional packages on the host machines, a stripped
    down "Docker only" operating system may not have the components available to meet
    the prerequisites of the software that we will be running in the later chapters;
    therefore, to ensure that there are no problems further on, we be running a full
    operating system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在主机上安装额外的软件包，“仅Docker”操作系统可能没有可用的组件来满足我们将在后面章节中运行的软件的先决条件；因此，为了确保以后没有问题，我们将运行一个完整的操作系统。
- en: Personally, I prefer a RPM-based operating system such as RedHat Enterprise
    Linux, Fedora, or CentOS, as I have been using them pretty much since the day
    I first logged into a Linux server.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我更喜欢基于RPM的操作系统，比如RedHat Enterprise Linux，Fedora或CentOS，因为我几乎从第一次登录Linux服务器开始就一直在使用它们。
- en: However, as a lot of readers will be familiar with the Debian-based Ubuntu,
    I will be providing practical examples for both operating systems.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于很多读者熟悉基于Debian的Ubuntu，我将为这两种操作系统提供实际示例。
- en: To ensure the experience is as consistent as possible, we will be installing
    Vagrant and VirtualBox to run the virtual machine that will act as a host to run
    our containers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保体验尽可能一致，我们将安装Vagrant和VirtualBox来运行虚拟机，该虚拟机将充当运行我们容器的主机。
- en: Vagrant, written by Mitchell Hashimoto, is a command line tool for creating
    and configuring reproducible and portable virtual machine environments. There
    have been numerous blog posts and articles that actually pitch Docker against
    Vagrant; however, in our case, the two technologies work quite well together in
    providing a repeatable and consistent environment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant是由Mitchell Hashimoto编写的命令行工具，用于创建和配置可重现和可移植的虚拟机环境。有许多博客文章和文章实际上将Docker与Vagrant进行了比较；然而，在我们的情况下，这两种技术在提供可重复和一致的环境方面工作得相当好。
- en: Vagrant is available for Linux, OS X, and Windows. For details on how to install,
    go to the Vagrant website at [https://www.vagrantup.com/](https://www.vagrantup.com/).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant适用于Linux、OS X和Windows。有关安装的详细信息，请访问Vagrant网站[https://www.vagrantup.com/](https://www.vagrantup.com/)。
- en: VirtualBox is a great all round open source virtualization platform originally
    developed by Sun and now maintained by Oracle. It allows you to run both 32-bit
    and 64-bit guest operating systems on your local machine. Details on how to download
    and install VirtualBox can be found at [https://www.virtualbox.org/](https://www.virtualbox.org/);
    again, VirtualBox can be installed on Linux, OS X, and Windows.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox是一个非常全面的开源虚拟化平台，最初由Sun开发，现在由Oracle维护。它允许您在本地计算机上运行32位和64位的客户操作系统。有关如何下载和安装VirtualBox的详细信息，请访问[https://www.virtualbox.org/](https://www.virtualbox.org/)；同样，VirtualBox可以安装在Linux、OS
    X和Windows上。
- en: Cloning the environment
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆环境
- en: The source for the environment along with the practical examples can be found
    on GitHub in the Monitoring Docker repository at [https://github.com/russmckendrick/monitoring-docker](https://github.com/russmckendrick/monitoring-docker).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 环境的源代码以及实际示例可以在GitHub的Monitoring Docker存储库中找到，网址为[https://github.com/russmckendrick/monitoring-docker](https://github.com/russmckendrick/monitoring-docker)。
- en: 'To clone the repository on a terminal on your local machine, run the following
    commands (replacing the file path as needed):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地计算机的终端上克隆存储库，请运行以下命令（根据需要替换文件路径）：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once cloned, you should see a directory called `monitoring-docker` and then
    enter that directory, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆后，您应该看到一个名为`monitoring-docker`的目录，然后进入该目录，如下所示：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running a virtual server
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行虚拟服务器
- en: In the repository, you will find two folders containing the necessary `Vagrant`
    file to launch either a CentOS 7 or a Ubuntu 14.04 virtual server.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在存储库中，您将找到两个包含启动CentOS 7或Ubuntu 14.04虚拟服务器所需的`Vagrant`文件的文件夹。
- en: 'If you would like to use the CentOS 7 vagrant box, change the directory to
    `vagrant-centos`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用CentOS 7的vagrant box，请将目录更改为`vagrant-centos`：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you are in the vagrant-centos directory, you will see that there is a `Vagrant`
    file; this file is all you need to launch a CentOS 7 virtual server. After the
    virtual server has been booted, the latest version of `docker` and `docker-compose`
    will be installed and the `monitoring-docker` directory will also be mounted inside
    the virtual machine using the mount point `/monitoring-docker`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入vagrant-centos目录，您将看到有一个`Vagrant`文件；这个文件就是启动CentOS 7虚拟服务器所需的全部内容。虚拟服务器启动后，将安装最新版本的`docker`和`docker-compose`，并且`monitoring-docker`目录也将被挂载到虚拟机内，挂载点为`/monitoring-docker`。
- en: 'To launch the virtual server, simply type the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动虚拟服务器，只需输入以下命令：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will download the latest version of the vagrant box from [https://atlas.hashicorp.com/russmckendrick/boxes/centos71](https://atlas.hashicorp.com/russmckendrick/boxes/centos71)
    and then boot the virtual server; it's a 450 MB download so it may take several
    minutes to download; it only has to do this once.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从[https://atlas.hashicorp.com/russmckendrick/boxes/centos71](https://atlas.hashicorp.com/russmckendrick/boxes/centos71)下载vagrant
    box的最新版本，然后启动虚拟服务器；这是一个450MB的下载，所以可能需要几分钟的时间；它只需要做一次。
- en: 'If all goes well, you should see something similar to the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该会看到类似以下输出：
- en: '![Running a virtual server](../images/00003.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![运行虚拟服务器](../images/00003.jpeg)'
- en: 'Now that you have booted the virtual server, you can connect to it using the
    following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经启动了虚拟服务器，可以使用以下命令连接到它：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once logged in, you should verify that `docker` and `docker-compose` are both
    available:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您应该验证`docker`和`docker-compose`是否都可用：
- en: '![Running a virtual server](../images/00004.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: 运行虚拟服务器
- en: 'Finally, you can try running the `hello-world` container using the following
    command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以尝试使用以下命令运行`hello-world`容器：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If everything goes as expected, you should see the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该会看到以下输出：
- en: '![Running a virtual server](../images/00005.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![运行虚拟服务器](../images/00005.jpeg)'
- en: 'To try something more ambitious, you can run an Ubuntu container with the following
    command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试更有雄心的事情，您可以使用以下命令运行一个Ubuntu容器：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Before we launch and enter the Ubuntu container, lets confirm that we are running
    the CentOS host machine by checking the release file that can be found in `/etc`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动并进入Ubuntu容器之前，让我们确认我们正在运行的是CentOS主机机器，通过检查可以在`/etc`中找到的发行文件：
- en: '![Running a virtual server](../images/00006.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![运行虚拟服务器](../images/00006.jpeg)'
- en: 'Now, we can launch the Ubuntu container. Using the same command, we can confirm
    that we are inside the Ubuntu container by viewing its release file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以启动Ubuntu容器。使用相同的命令，我们可以确认我们在Ubuntu容器内部，通过查看其发行文件：
- en: '![Running a virtual server](../images/00007.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![运行虚拟服务器](../images/00007.jpeg)'
- en: To exit the container just type in `exit`. This will stop the container from
    running, as it has terminated the only running process within the container, which
    was bash, and returned you to the host CentOS machine.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出容器，只需输入`exit`。这将停止容器的运行，因为它终止了容器内唯一正在运行的进程，即bash，并将您返回到主机CentOS机器。
- en: As you can see here from our CentOS 7 host, we have launched and removed an
    Ubuntu container.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在我们的CentOS 7主机中所看到的，我们已经启动并移除了一个Ubuntu容器。
- en: Both the CentOS 7 and Ubuntu Vagrant files will configure a static IP address
    on your virtual machine. It is `192.168.33.10`; also, there is a DNS record for
    this IP address available at [docker.media-glass.es](http://docker.media-glass.es).
    These will allow you to access any containers that expose themselves to a browser
    at either `http://192.168.33.10/` or [http://docker.media-glass.es/](http://docker.media-glass.es/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS 7和Ubuntu Vagrant文件都将在您的虚拟机上配置静态IP地址。它是`192.168.33.10`；此外，此IP地址在[docker.media-glass.es](http://docker.media-glass.es)上有一个DNS记录。这将允许您访问任何在浏览器中公开自己的容器，无论是在`http://192.168.33.10/`还是[http://docker.media-glass.es/](http://docker.media-glass.es)。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The URL [http://docker.media-glass.es/](http://docker.media-glass.es/) will
    only work while the vagrant box is up, and you have a container running which
    serves Web pages.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: URL [http://docker.media-glass.es/](http://docker.media-glass.es/) 只有在vagrant
    box运行时才有效，并且您有一个运行Web页面的容器。
- en: 'You can see this in action by running the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来查看这一操作：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载所购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: 'This will download and launch a container running NGINX. You can then go to
    `http://192.168.33.10/` or [http://docker.media-glass.es/](http://docker.media-glass.es/)
    in your browser; you should see a forbidden page. This is because we have not
    yet given NGINX any content to serve (more on this will be covered later in the
    book):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并启动一个运行NGINX的容器。然后您可以在浏览器中转到`http://192.168.33.10/`或[http://docker.media-glass.es/](http://docker.media-glass.es/)；您应该会看到一个禁止访问的页面。这是因为我们尚未为NGINX提供任何内容来提供服务（关于这一点，稍后将在本书中介绍）：
- en: '![Running a virtual server](../images/00008.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![运行虚拟服务器](../images/00008.jpeg)'
- en: For more examples and ideas, go to the website at [http://docs.docker.com/userguide/](http://docs.docker.com/userguide/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多示例和想法，请访问[http://docs.docker.com/userguide/](http://docs.docker.com/userguide/)网站。
- en: Halting the virtual server
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止虚拟服务器
- en: To log out of the virtual server and return to your local machine, you type
    `exit`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要注销虚拟服务器并返回到本地机器，您可以输入`exit`。
- en: 'You should now see your local machine''s terminal prompt; however, the virtual
    server you booted will still be running in the background happily, using resources,
    until you either power it down using the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到本地机器的终端提示；但是，您启动的虚拟服务器仍将在后台运行，快乐地使用资源，直到您使用以下命令关闭它：
- en: '[PRE8]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Terminate the virtual server altogether using `vagrant destroy`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vagrant destroy`完全终止虚拟服务器：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To check the current status of the virtual server, you can run the following
    command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查虚拟服务器的当前状态，可以运行以下命令：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result of the preceding command is given in the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的结果如下输出所示：
- en: '![Halting the virtual server](../images/00009.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![停止虚拟服务器](../images/00009.jpeg)'
- en: Either powering the virtual server back on or creating it from scratch again,
    can be achieved by issuing the `vagrant up` command again.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要么重新启动虚拟服务器，要么从头开始创建虚拟服务器，都可以通过再次发出`vagrant up`命令来实现。
- en: 'The preceding details show how to use the CentOS 7 vagrant box. If you would
    prefer to launch an Ubuntu 14.04 virtual server, you can download and install
    the vagrant box by going into the `vagrant-ubuntu` directory using the following
    command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 上述详细信息显示了如何使用CentOS 7虚拟机箱。如果您希望启动Ubuntu 14.04虚拟服务器，可以通过以下命令进入`vagrant-ubuntu`目录下载并安装vagrant
    box：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: From here, you will be able run vagrant up and follow the same instructions
    used to boot and interact with the CentOS 7 virtual server.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您将能够运行vagrant up并按照启动和与CentOS 7虚拟服务器交互所使用的相同说明进行操作。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about different types of server and also discussed
    how your containerized applications can fit into each of the categories. We have
    also installed VirtualBox and used Vagrant to launch either a CentOS 7 or Ubuntu
    14.04 virtual server, with `docker` and `docker-compose` installed.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了不同类型的服务器，并讨论了您的容器化应用程序如何适应每个类别。我们还安装了VirtualBox并使用Vagrant启动了CentOS
    7或Ubuntu 14.04虚拟服务器，并安装了`docker`和`docker-compose`。
- en: Our new virtual server environment will be used throughout the upcoming chapters
    to test the various different types of monitoring. In the next chapter, we will
    start our journey by using Docker's in-built functionality to explore metrics
    about our running containers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新虚拟服务器环境将在接下来的章节中用于测试各种不同类型的监控。在下一章中，我们将通过使用Docker内置的功能来探索关于我们运行的容器的指标，开始我们的旅程。
