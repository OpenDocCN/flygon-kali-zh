["```js\nAverage = Sum / Count\n```", "```js\nz-score = (Value \u2013 Mean)/Standard_Deviation\n```", "```js\n**Object {MAX_MEDHINC_CY: 113282, MIN_MEDHINC_CY: 18549, STDDEV_MEDHINC_CY: 10960.43202775655, AVG_MEDHINC_CY: 42115.877187400576}**\n**Object {Plus1StdDev: 53076.309215157125, Plus2StdDev: 64036.741242913675, Plus3StdDev: 74997.17327067023, Minus1StdDev: 31155.445159644027, Mius2StdDev: 20195.013131887477\u2026}**\n\n```", "```js\nvar featureLayerStats = new FeatureLayerStatistics({\n          layer: CountyDemogrpahicsLayer\n        });\n```", "```js\nvar featureLayerStatsParams = {\n          field: \"MEDHINC_CY\",\n          classificationMethod : 'natural-breaks'\n        };\n```", "```js\nfeatureLayerStats.getFieldStatistics(featureLayerStatsParams).then(function (result) {\n          console.log(\"Successfully calculated %s for field %s, %o\", \"field statistics\", featureLayerStatsParams.field, result);\n        }).otherwise(function (error) {\n          console.log(\"An error occurred while calculating %s, Error: %o\", \"field statistics\", error);\n        });\n```", "```js\n**Successfully calculated field statistics for field MEDHINC_CY,**\n**Object {\u00a0\u00a0**\n **source:\"service-query\",**\n **min:20566,**\n **max:130615,**\n **avg:46193.26694241171,**\n **stddev:12564.308382029049,**\n **count:3143,**\n **sum:145185438,**\n **variance:157861845.1187254**\n **}**\n\n```", "```js\nfeatureLayerStats.getClassBreaks(featureLayerStatsParams).then(function (result) {\n          console.log(\"Successfully calculated %s for field %s, %o\", \"class breaks\", featureLayerStatsParams[\"field\"], JSON.stringify(result));\n        }).otherwise(function (error) {\n          console.log(\"An error occurred while calculating %s, Error: %o\", \"class breaks\", error);\n        });\n```", "```js\n**{**\n **\"minValue\": 20566,**\n **\"maxValue\": 130615,**\n **\"classBreakInfos\": [**\n **{**\n **\"minValue\": 20566,**\n **\"maxValue\": 27349.802772469,**\n **\"label\": \" < -1.5 Std. Dev.\",**\n **\"minStdDev\": null,**\n **\"maxStdDev\": -1.5**\n **},**\n **{**\n **\"minValue\": 27349.802772469,**\n **\"maxValue\": 39912.112219098,**\n **\"label\": \"-1.5 - -0.50 Std. Dev.\",**\n **\"minStdDev\": -1.5,**\n **\"maxStdDev\": -0.5**\n **},**\n **{**\n **\"minValue\": 39912.112219098,**\n **\"maxValue\": 52474.421665726,**\n **\"label\": \"-0.50 - 0.50 Std. Dev.\",**\n **\"minStdDev\": -0.5,**\n **\"maxStdDev\": 0.5,**\n **\"hasAvg\": true**\n **},**\n **{**\n **\"minValue\": 52474.421665726,**\n **\"maxValue\": 65036.731112354,**\n **\"label\": \"0.50 - 1.5 Std. Dev.\",**\n **\"minStdDev\": 0.5,**\n **\"maxStdDev\": 1.5**\n **},**\n **{**\n **\"minValue\": 65036.731112354,**\n **\"maxValue\": 77599.040558982,**\n **\"label\": \"1.5 - 2.5 Std. Dev.\",**\n **\"minStdDev\": 1.5,**\n **\"maxStdDev\": 2.5**\n **},**\n **{**\n **\"minValue\": 77599.040558982,**\n **\"maxValue\": 130615,**\n **\"label\": \" > 2.5 Std. Dev.\",**\n **\"minStdDev\": 2.5,**\n **\"maxStdDev\": null**\n **}**\n **],**\n **\"source\": \"service-generate-renderer\"**\n**}**\n\n```", "```js\nrenderer.setColorInfo({\n  field: \"MEDHINC_CY\",\n  minDataValue: featureLayerStats.min,\n  maxDataValue: featureLayerStats.max,\n  colors: [\n    new Color([255, 255, 255]),\n    new Color([127, 127, 0])\n  ]\n});\n```", "```js\n**var stops =**\n**[**\n **{**\n **\"value\": 27349.802772469,**\n **\"color\": {      \"b\": 226,      \"g\": 235,       \"r\": 254,      \"a\": 1    },**\n **\"label\": \" < -1.5 Std. Dev.\"**\n **},**\n **{**\n **\"value\": 39912.112219098,**\n **\"color\": {      \"b\": 185,      \"g\": 180,      \"r\": 251,      \"a\": 1    },**\n **\"label\": \"-1.5 - -0.50 Std. Dev.\"**\n **},**\n **{**\n **\"value\": 52474.421665726,**\n **\"color\": {      \"b\": 161,      \"g\": 104,      \"r\": 247,      \"a\": 1    },**\n **\"label\": \"-0.50 - 0.50 Std. Dev.\"**\n **},**\n **{**\n **\"value\": 65036.731112354,**\n **\"color\": {      \"b\": 138,      \"g\": 27,      \"r\": 197,      \"a\": 1    },**\n **\"label\": \"0.50 - 1.5 Std. Dev.\"**\n **},**\n **{**\n **\"value\": 77599.040558982,**\n **\"color\": {      \"b\": 119,      \"g\": 1,      \"r\": 122,      \"a\": 1    },**\n **\"label\": \"1.5 - 2.5 Std. Dev.\"**\n **}**\n**]**\n\n```", "```js\n**//Create a params object for use getClassBreaks method in** \n**// FeatureLayerStatistics module**\n**//Define the field upon which Stats is computed,**\n**//The classification method which should be one among the following:**\n**//standard-deviation, equal-interval, natural-breaks, quantile**\n**//Number of classes the data should be classified. Default is 5**\nvar featureLayerStatsParams_color = {\n          field: \"MEDHINC_CY\",\n          classificationMethod: selectedClassificationMethod, \n          numClasses: 5\n        };\n\n**//Compute the Class Break Statitics. This returns a promise**\n\nvar color_stats_promise = featureLayerStats.getClassBreaks(featureLayerStatsParams_color);\ncolor_stats_promise.then(function (color_stat_result) {\n\n**//The classBreakInfos property of the color_stat_result has all the** \n**//class break values** \n\nvar colorStops = [];\n\n**//Color JavaScript array exported from colorbrewer2.org**\nvar colors = ['#feebe2', '#fbb4b9', '#f768a1', '#c51b8a', '#7a0177']; \n\n**//Loop through each Break info provided by the Feature Layer Stats**\n              array.forEach(color_stat_result.classBreakInfos, function (classBreakInfo, i) {\n                        colorStops.push({\n**//Get value property from the Break value's maximum value**\n                            value: classBreakInfo.maxValue,\n**//Get color from the color Array**\n                            color: new Color(colors[i]),\n**//Get label value from the label value provided by the Feature Layer //Stats**\n                            label: classBreakInfo.label\n                        });\n                    });\n\n**//Define Default renderer symbol**\nvar symbol = new SimpleFillSymbol();\nsymbol.setColor(new Color([255, 0, 0]));\nsymbol.setOutline(new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0]), 0.5));\n\nvar colorBreakRenderer = new ClassBreaksRenderer(symbol);\n\n**//Set the color stops to the stops property to setColorInfo method of //the renderer**\ncolorBreakRenderer.setColorInfo({\n              field:\"MEDHINC_CY\",\n              stops: colorStops\n          });\n});\n```", "```js\nvar minOpacity = 0.2;\nvar maxOpacity = 1;\n\nvar opacityInfo = {\n  field: \"DIVINDX_CY\",\n  minDataValue:  0,\n  maxDataValue:  100,\n  opacityValues:   [minOpacity, maxOpacity]\n};\n```", "```js\nvar opacity = minOpacity + i * maxOpacity / (opacity_stat_result.classBreakInfos.length - 1);\n```", "```js\nvar featureLayerStatsParams_opacity = {\n  field: \"DIVINDX_CY\",\n  classificationMethod: selectedClassificationMethod, //standard-deviation, equal-interval, natural-breaks, quantile and standard-deviation\n  numClasses: 5\n};\n\nvar opacity_stats_promise = featureLayerStats.getClassBreaks(featureLayerStatsParams_opacity);\nopacity_stats_promise.then(function (opacity_stat_result) {\n\n  var opacityStops = [];\n  array.forEach(opacity_stat_result.classBreakInfos, function (classBreakInfo, i) {\n    var minOpacity = 0;\n    var maxOpacity = 1;\n//Calculate opacity by dividing between \n    var opacity = minOpacity + i * maxOpacity / (opacity_stat_result.classBreakInfos.length - 1);\n    opacityStops.push({\n      value: classBreakInfo.maxValue,\n      opacity: opacity\n    });\n  });\n\nvar symbol = new SimpleFillSymbol();\nsymbol.setColor(new Color([255, 0, 0]));\nvar opacityBreakRenderer = new ClassBreaksRenderer(symbol);\nopacityBreakRenderer.setOpacityInfo({\n   field:\"MEDHINC_CY\",\n   stops: stops\n});\n\nCountyDemogrpahicsLayer.setRenderer(opacityBreakRenderer);\nCountyDemogrpahicsLayer.redraw();\n```", "```js\nfunction applySelectedRenderer(selectedClassificationMethod) {\n        var featureLayerStatsParams_color = {\n          field: \"MEDHINC_CY\",\n          classificationMethod: selectedClassificationMethod, //standard-deviation, equal-interval, natural-breaks, quantile and standard-deviation\n          numClasses: 5\n        };\n        var featureLayerStatsParams_opacity = {\n          field: \"DIVINDX_CY\",\n          classificationMethod: selectedClassificationMethod, //standard-deviation, equal-interval, natural-breaks, quantile and standard-deviation\n          numClasses: 5,\n          //normalizationField: 'TOTPOP_CY'\n        };\n\n        var color_stats_promise = featureLayerStats.getClassBreaks(featureLayerStatsParams_color);\n        var opacity_stats_promise = featureLayerStats.getClassBreaks(featureLayerStatsParams_opacity);\n        all([color_stats_promise, opacity_stats_promise]).then(function (results) {\n          var color_stat_result = results[0];\n          var opacity_stat_result = results[1];\n\n          var colorStops = [];\n          var colors = ['#d7191c', '#fdae61', '#ffffbf', '#abd9e9', '#2c7bb6'];\n          array.forEach(color_stat_result.classBreakInfos, function (classBreakInfo, i) {\n            colorStops.push({\n              value: classBreakInfo.maxValue,\n              color: new Color(colors[i]),\n              label: classBreakInfo.label\n            });\n          });\n          var opacityStops = [];\n          array.forEach(opacity_stat_result.classBreakInfos, function (classBreakInfo, i) {\n            var minOpacity = 0;\n            var maxOpacity = 1;\n            var opacity = minOpacity + i * maxOpacity / (opacity_stat_result.classBreakInfos.length - 1);\n            opacityStops.push({\n              value: classBreakInfo.maxValue,\n              opacity: opacity\n            });\n          });\n\n          var visualVariables = [\n            {\n              \"type\": \"colorInfo\",\n              \"field\": \"MEDHINC_CY\",\n              \"stops\": colorStops\n                            }\n\n            ,\n            {\n              \"type\": \"opacityInfo\",\n              \"field\": \"DIVINDX_CY\",\n              \"stops\": opacityStops\n                        }\n\n                        ];\n          console.log(JSON.stringify(visualVariables));\n          var symbol = new SimpleFillSymbol();\n          symbol.setColor(new Color([0, 255, 0]));\n          symbol.setOutline(new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([0, 0, 0]), 0.5));\n\n          var colorBreakRenderer = new ClassBreaksRenderer(symbol);\n          colorBreakRenderer.setVisualVariables(visualVariables);\n          CountyDemogrpahicsLayer.setRenderer(colorBreakRenderer);\n          CountyDemogrpahicsLayer.redraw();\n          legend.refresh();\n        });\n      }\n```", "```js\n**//Call this function with the classification method as input**\nfunction applySmartRenderer(selectedClassificationMethod) {\n\n**//Create a scheme object assigning a theme** \nvar schemes = esriStylesChoropleth.getSchemes({\n **//The following options are available for theme:** \n **// high-to-low, above-and-below, centered-on, or extremes.**\n  theme: \"high-to-low\",\n  basemap: map.getBasemap(),\n  geometryType: \"polygon\"\n});\nconsole.log(JSON.stringify(schemes));\n\n**//Create a classed color Render Parameter object**\nvar classedColorRenderParams = {\n  basemap: map.getBasemap(),\n  classificationMethod: selectedClassificationMethod,\n  field: 'MEDHINC_CY',\n  layer: CountyDemogrpahicsLayer,\n  scheme: schemes.primaryScheme,\n  numClasses: 5\n};\n\nSmartMapping.createClassedColorRenderer(classedColorRenderParams).then(function (result) {\n  CountyDemogrpahicsLayer.setRenderer(result.renderer);\n **//Redraw the feature layer**\n  CountyDemogrpahicsLayer.redraw();\n **//Update the legend**\n  legend.refresh();\n}).otherwise(function (error) {\n  console.log(\"An error occurred while performing%s, Error: %o\", \"Smart Mapping\", error);\n});\n```"]