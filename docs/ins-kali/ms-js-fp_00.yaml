- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'In computer programming, paradigms abound: Some examples are imperative programming,
    structured (*go to less*) programming, object-oriented programming, aspect-oriented
    programming, and declarative programming. Lately, there has been renewed interest
    in a particular paradigm that can arguably be considered to be older than most
    (if not all) of the cited ones--functional programming. **Functional Programming**
    (**FP**) emphasizes writing functions, and connecting them in simple ways to produce
    more understandable and more easily tested code. Thus, given the increased complexity
    of today''s web applications, it''s logical that a safer, cleaner way of programming
    would be of interest.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机编程中，范式层出不穷：一些例子包括命令式编程、结构化（*少用goto*）编程、面向对象编程、面向方面编程和声明式编程。最近，对一种可以说比大多数（如果不是全部）上述范式更古老的范式重新产生了兴趣——函数式编程。**函数式编程**（**FP**）强调编写函数，并以简单的方式连接它们，以产生更易理解和更易测试的代码。因此，鉴于今天的Web应用程序的复杂性增加，逻辑上会对更安全、更清洁的编程方式产生兴趣。
- en: This interest in FP comes hand-in-hand with the evolution of JavaScript. Despite
    its somewhat hasty creation (reportedly managed in only 10 days, in 1995, by Brendan
    Eich at Netscape), today it's a standardized and quickly growing language, with
    features more advanced than most other similarly popular languages. The ubiquity
    of the language, which can now be found in browsers, servers, mobile phones, and
    whatnot, has also impelled interest in better development strategies. Also, even
    if JavaScript wasn't conceived as a functional language by itself, the fact is
    that it provides all the features you'd require to work in that fashion, which
    is another plus.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对FP的兴趣与JavaScript的发展息息相关。尽管JavaScript的创建有些仓促（据说是由Netscape的Brendan Eich在1995年仅用了10天完成），但今天它是一种标准化和迅速增长的语言，具有比大多数其他类似流行语言更先进的特性。这种语言的普及性，现在可以在浏览器、服务器、手机等各种设备上找到，也推动了对更好的开发策略的兴趣。此外，即使JavaScript本身并不是作为一种函数语言而构思的，事实上它提供了你在这种方式下所需的所有功能，这也是一个优点。
- en: It must also be said that FP hasn't been generally applied in industry, possibly
    because it has a certain aura of difficulty, and is thought to be *theoretical*
    rather than *practical*, even *mathematical*, and possibly uses vocabulary and
    concepts that are foreign to developers--Functors? Monads? Folding? Category theory?
    While learning all this theory will certainly be of help, it can also be argued
    that even with zero knowledge of the previous terms, you can understand the tenets
    of FP, and see how to apply it in your programming.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须说一下，FP并没有被广泛应用于工业中，可能是因为它有一定的难度，被认为是*理论性*而不是*实用性*，甚至*数学性*，可能使用的词汇和概念对开发人员来说是陌生的——函子？单子？折叠？范畴论？虽然学习所有这些理论肯定会有所帮助，但也可以说，即使对上述术语一无所知，你也可以理解FP的原则，并看到如何将其应用于你的编程。
- en: FP is not something you have to do on your own, without any help. There are
    many libraries and frameworks that incorporate, in greater or lesser degrees,
    the concepts of FP. Starting with jQuery (which does include some FP concepts),
    passing through Underscore and its close relative LoDash, or other libraries such
    as Ramda, and getting to more complete web development tools such as React and
    Redux, Angular, or Elm (a 100% functional language, which compiles into JavaScript),
    the list of functional aids for your coding is ever growing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: FP不是你必须独自完成的事情，没有任何帮助。有许多库和框架，以不同程度融合了FP的概念。从jQuery开始（其中包括一些FP概念），经过Underscore及其近亲LoDash，或其他库如Ramda，再到更完整的Web开发工具如React和Redux，Angular，或Elm（一种100%的函数语言，可以编译成JavaScript），用于编码的功能性辅助工具列表不断增长。
- en: Learning how to use FP can be a worthwhile investment, and even though you may
    not get to use all of its methods and techniques, just starting to apply some
    of them will pay dividends in better code. You need not try to apply all of FP
    from the start, and you need not try to abandon every non-functional feature in
    the language either. JavaScript assuredly has some bad features, but it also has
    several very good and powerful ones. The idea is not to throw everything you learned
    and use and adopt a 100% functional way; rather, the guiding idea is *evolution,
    not revolution*. In that sense, it can be said that what we'll be doing is not
    FP, but rather **Sorta Functional Programming** (**SFP**), aiming for a fusion
    of paradigms.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用FP可能是一项值得投资的事情，即使你可能无法使用其所有方法和技术，只要开始应用其中的一些方法，就会在编写更好的代码方面获得回报。你不需要从一开始就尝试应用FP的所有内容，也不需要试图放弃语言中的每一个非函数特性。JavaScript确实有一些不好的特性，但也有一些非常好和强大的特性。关键不是要抛弃你学到的和使用的一切，然后采用100%的函数式方式；相反，指导思想是*演变，而不是革命*。在这个意义上，可以说我们要做的不是FP，而是**有点函数式编程**（**SFP**），旨在融合不同的范式。
- en: 'A final comment about the style of the code in this book--it is quite true
    that there are several very good libraries that provide you with functional programming
    tools: Underscore, LoDash, Ramda, and more are counted among them. However, I
    preferred to eschew their usage, because I wanted to show how things really work.
    It''s easy to apply a given function from some package or other, but by coding
    everything out (a *vanilla FP*, if you wish), it''s my belief that you get to
    understand things more deeply. Also, as I will comment in some places, because
    of the power and clarity of arrow functions and other features, the *pure JS*
    versions can be even simpler to understand!'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本书中代码风格的最后一点评论——确实有一些非常好的库，可以为你提供函数式编程工具：Underscore、LoDash、Ramda等等。然而，我更倾向于避免使用它们，因为我想展示事物的真实运行方式。应用某个包中的给定函数很容易，但通过编写所有代码（如果你愿意，可以称之为*纯FP*），我相信你可以更深入地理解事物。此外，正如我在某些地方所评论的，由于箭头函数和其他特性的强大和清晰，*纯JS*版本甚至更容易理解！
- en: What this book covers
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: 'In this book, we''ll cover **Functional Programming** (**FP**) in a practical
    way, though at times we will mention some theoretical points:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将以实际的方式涵盖**函数式编程**（**FP**），尽管有时我们会提到一些理论观点：
- en: '[Chapter 1](395f5897-0ecc-4841-86ed-21521e148beb.xhtml), *Becoming Functional
    - Several Questions*, discusses FP, gives reasons for its usage, and lists the
    tools that you''ll need to take advantage of the rest of the book.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章，*成为函数式-几个问题*，讨论了函数式编程，给出了使用它的原因，并列出了您需要利用本书其余部分的工具。
- en: '[Chapter 2](7e6035b4-9ad0-4301-820a-0b34194bf471.xhtml), *Thinking Functionally
    - A First Example*, will provide the first example of FP by considering a common
    web-related problem and going over several solutions, to finally center on a functional
    way.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章，*功能性思维-第一个例子*，将通过考虑一个常见的与Web相关的问题，并讨论几种解决方案，最终专注于一种功能性的方式，提供了函数式编程的第一个例子。
- en: '[Chapter 3](89a2ff2f-a67d-4a21-a2f5-cd54bed7198a.xhtml), *Starting Out with
    Functions - A Core Concept*, will go over the central concept of FP: functions,
    and the different options available in JavaScript.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，*从函数开始-核心概念*，将介绍函数式编程的核心概念：函数，以及JavaScript中的不同选项。
- en: '[Chapter 4](943d8f5d-2e39-409a-a1aa-26c1a5b36a6d.xhtml), *Behaving Properly
    - Pure Functions*, will consider the concept of purity and pure functions, and
    show how it leads to simpler coding and easier testing.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，*行为得体-纯函数*，将考虑纯度和纯函数的概念，并展示它如何导致更简单的编码和更容易的测试。
- en: '[Chapter 5](3cf24154-32aa-4bcd-bfbe-e9de8fe35096.xhtml), *Programming Declaratively
    - A Better Style*, will use simple data structures to show how to produce results
    working not in an imperative way, but in a declarative fashion.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章，*声明式编程-更好的风格*，将使用简单的数据结构来展示如何以声明式的方式工作，而不是以命令式的方式。
- en: '[Chapter 6](9f36fbcb-da30-4a75-9b47-01cd3427633e.xhtml), *Producing Functions
    - Higher-Order Functions*, will deal with higher-order functions, which receive
    other functions as parameters and produce new functions as results.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第6章，*生成函数-高阶函数*，将处理高阶函数，它们接收其他函数作为参数，并产生新的函数作为结果。
- en: '[Chapter 7](44b5eafa-dc7f-45e4-8b9e-9bb5bb9b02ec.xhtml), *Transforming Functions
    - Currying and Partial Application*, will show some methods for producing new
    and specialized functions from earlier ones.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第7章，*转换函数-柯里化和部分应用*，将展示一些从早期函数中产生新的专门函数的方法。
- en: '[Chapter 8](8e0f575a-87f7-4601-b47c-6872aaacb954.xhtml), *Connecting Functions
    - Pipelining and Composition*, will show the key concepts regarding how to build
    new functions by joining previously defined ones.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章，*连接函数-管道和组合*，将展示如何通过连接先前定义的函数来构建新函数的关键概念。
- en: '[Chapter 9](0f9ddfc4-d3d9-40a9-941b-edbec62cc890.xhtml), *Designing Functions
    - Recursion,* will show how a key concept in FP, recursion, can be applied to
    designing algorithms and functions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第9章，*设计函数-递归*，将展示函数式编程中的关键概念递归如何应用于设计算法和函数。
- en: '[Chapter 10](383f5538-72cc-420a-ae77-896776c03f27.xhtml), *Ensuring Purity
    - Immutability*, will show some tools that can help you work in a pure fashion
    by providing immutable objects and data structures.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第10章，*确保纯净性-不可变性*，将展示一些工具，可以通过提供不可变对象和数据结构来帮助您以纯净的方式工作。
- en: '[Chapter 11](24b391f7-abaf-439e-9bfc-a71d989cfd48.xhtml), *Implementing Design
    Patterns - The Functional Way*, will show how several popular OOP design patterns
    are implemented (or not needed!) when you program in FP ways.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第11章，*实现设计模式-函数式方式*，将展示在以函数式方式编程时如何实现（或不需要！）几种流行的面向对象设计模式。
- en: '[Chapter 12](0d82d215-9bfc-436b-b09d-8ed2e2ebd441.xhtml), *Building Better
    Containers - Functional Data Types*, will show some more high-level functional
    patterns, introducing types, containers, functors, monads, and several other more
    advanced FP concepts.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章，*构建更好的容器-函数数据类型*，将展示更高级的函数模式，介绍类型、容器、函子、单子以及其他更高级的函数式编程概念。
- en: I tried to keep examples simple and down-to-earth, because I wanted to focus
    on functional aspects and not on the intricacies of this or that problem. Some
    programming texts are geared toward learning, say, a given framework, and then
    work on a given problem, seeing how to fully work it out with the chosen tools.
    (Also, in fact, at the very beginning of planning for this book, I entertained
    the idea of developing an application that would use all the FP things I had in
    mind, but there was no way to fit all of that within a single project. Exaggerating
    a bit, I felt like an MD trying to find a patient on whom to apply all of his
    medical knowledge and treatments!) So, I opted to show plenty of individual techniques,
    which can be used in multiple situations. Rather than building a house, I want
    to show you how to put bricks together, how to wire things up, and so on, so that
    you will be able to apply whatever you need, as it may fit.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图保持示例简单和贴近实际，因为我想专注于功能方面，而不是纠缠于这个或那个问题的复杂性。有些编程文本是针对学习某个框架，然后解决特定问题，看如何用所选工具完全解决它。
    （事实上，在规划这本书的最初阶段，我曾经考虑过开发一个应用程序，该应用程序将使用我心目中的所有函数式编程的东西，但是没有办法将所有内容都放入一个项目中。夸张一点说，我感觉自己像是一名医生，试图找到一个可以应用他所有医学知识和治疗方法的病人！）因此，我选择展示大量的个别技术，这些技术可以在多种情况下使用。我不想建造一座房子，我想向您展示如何把砖块放在一起，如何连接线路等，这样您就可以根据需要应用任何内容。
- en: What you need for this book
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您需要为本书做好准备
- en: To understand the concepts and code in this book, you don't need much more than
    a JavaScript environment and a text editor. To be honest, I even developed some
    of the examples working fully online, with tools such as JSFiddle (at [https://jsfiddle.net/](https://jsfiddle.net/))
    or the like, with absolutely nothing else.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解本书中的概念和代码，您不需要比JavaScript环境和文本编辑器更多的东西。老实说，我甚至开发了一些完全在线工作的示例，使用诸如JSFiddle（在[https://jsfiddle.net/](https://jsfiddle.net/)）之类的工具，绝对没有其他东西。
- en: However, you will need some experience with the latest version of JavaScript,
    because it includes several features that help writing more concise and compact
    code. We will frequently include pointers to online documentation, such as the
    documentation available on the MDN (Mozilla Development Network at [https://developer.mozilla.org/](https://developer.mozilla.org/))
    to help you get more in-depth knowledge.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您需要一些关于最新版本的JavaScript的经验，因为它包括一些功能，可以帮助编写更简洁、更紧凑的代码。我们将经常包含指向在线文档的指针，例如MDN（Mozilla
    Development Network）上可用的文档，以帮助您获得更深入的知识。
- en: Who this book is for
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书是为谁准备的
- en: This book is geared toward programmers with a good working knowledge of JavaScript,
    working either on the client-side (browsers) or the server side (Node.JS), who
    are interested in applying techniques to be able to write better, testable, understandable,
    and maintainable code. Some background in Computer Science (including, for example,
    data structures) and good programming practices will also come in handy.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书面向具有良好的JavaScript工作知识的程序员，无论是在客户端（浏览器）还是服务器端（Node.JS）工作，他们有兴趣应用技术来编写更好、可测试、可理解和可维护的代码。一些计算机科学背景（包括例如数据结构）和良好的编程实践也会派上用场。
- en: Conventions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，您将找到许多文本样式，用于区分不同类型的信息。以下是这些样式的一些示例以及它们的含义解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Just
    assign the names of the layers you want to activate to the `VK_INSTANCE_LAYERS`
    environment variable".'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter句柄显示如下：“只需将要激活的图层的名称分配给`VK_INSTANCE_LAYERS`环境变量”。
- en: 'A block of code is set as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都以以下方式编写：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "Select System info from the Administration panel."'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，例如菜单或对话框中的单词，会在文本中出现，就像这样：“从管理面板中选择系统信息”。'
- en: Warnings or important notes appear in a box like this.Tips and tricks appear
    like this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要说明会出现在这样的框中。提示和技巧会出现在这样。
