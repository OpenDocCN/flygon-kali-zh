["```cs\n<PackageReference Include=\"EntityFramework\"\n\n Version=\"6.4.4\"\n\n /> \n\n```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n\n    ```", "```cs\n    -- Loading resources from Northwind4SQLite.sql \n    SQLite version 3.36.0 2021-08-24 15:20:15\n    Enter \".help\" for usage hints.\n    sqlite> \n\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\"\n\n        Version=\"6.0.0\"\n\n     />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\"\n\n        Version=\"6.0.0\"\n\n     />\n    </ItemGroup> \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     ProjectConstants\n\n    {\n      public\n\n     const\n\n     string\n\n     DatabaseProvider = \"SQLite\"\n\n    ; // or \"SQLServer\"\n\n    } \n\n    ```", "```cs\n    WriteLine($\"Using \n\n    {ProjectConstants.DatabaseProvider}\n\n     database provider.\"\n\n    ); \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // DbContext, DbContextOptionsBuilder\n\n    using\n\n     static\n\n     System.Console;\n    namespace\n\n     Packt.Shared\n\n    ;\n    // this manages the connection to the database\n\n    public\n\n     class\n\n     Northwind\n\n     : DbContext\n\n    {\n      protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n        DbContextOptionsBuilder optionsBuilder\n\n    )\n\n      {\n        if\n\n     (ProjectConstants.DatabaseProvider == \"SQLite\"\n\n    )\n        {\n          string\n\n     path = Path.Combine(\n            Environment.CurrentDirectory, \"Northwind.db\"\n\n    );\n          WriteLine($\"Using \n\n    {path}\n\n     database file.\"\n\n    );\n          optionsBuilder.UseSqlite($\"Filename=\n\n    {path}\n\n    \"\n\n    );\n        }\n        else\n\n        {\n          string\n\n     connection = \"Data Source=.;\"\n\n     + \n            \"Initial Catalog=Northwind;\"\n\n     + \n            \"Integrated Security=true;\"\n\n     +\n            \"MultipleActiveResultSets=true;\"\n\n    ;\n          optionsBuilder.UseSqlServer(connection);\n        }\n      }\n    } \n\n    ```", "```cs\n    <ItemGroup>\n      <None Update=\"Northwind.db\"\n\n    >\n        <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n      </None>\n    </ItemGroup> \n\n    ```", "```cs\n CREATE\n\n TABLE\n\n Products (\n    ProductId       INTEGER\n\n       PRIMARY KEY\n\n,\n    ProductName     NVARCHAR\n\n (40\n\n) NOT\n\n NULL\n\n,\n    SupplierId      \"INT\"\n\n,\n    CategoryId      \"INT\"\n\n,\n    QuantityPerUnit NVARCHAR\n\n (20\n\n),\n    UnitPrice       \"MONEY\"\n\n       CONSTRAINT\n\n DF_Products_UnitPrice DEFAULT\n\n (0\n\n),\n    UnitsInStock    \"SMALLINT\"\n\n    CONSTRAINT\n\n DF_Products_UnitsInStock DEFAULT\n\n (0\n\n),\n    UnitsOnOrder    \"SMALLINT\"\n\n    CONSTRAINT\n\n DF_Products_UnitsOnOrder DEFAULT\n\n (0\n\n),\n    ReorderLevel    \"SMALLINT\"\n\n    CONSTRAINT\n\n DF_Products_ReorderLevel DEFAULT\n\n (0\n\n),\n    Discontinued    \"BIT\"\n\n         NOT\n\n NULL\n\n                                  CONSTRAINT\n\n DF_Products_Discontinued DEFAULT\n\n (0\n\n),\n    CONSTRAINT\n\n FK_Products_Categories FOREIGN\n\n KEY\n\n (\n        CategoryId\n    )\n    REFERENCES\n\n Categories (CategoryId),\n    CONSTRAINT\n\n FK_Products_Suppliers FOREIGN\n\n KEY\n\n (\n        SupplierId\n    )\n    REFERENCES\n\n Suppliers (SupplierId),\n    CONSTRAINT\n\n CK_Products_UnitPrice CHECK\n\n (UnitPrice >= 0\n\n),\n    CONSTRAINT\n\n CK_ReorderLevel CHECK\n\n (ReorderLevel >= 0\n\n),\n    CONSTRAINT\n\n CK_UnitsInStock CHECK\n\n (UnitsInStock >= 0\n\n),\n    CONSTRAINT\n\n CK_UnitsOnOrder CHECK\n\n (UnitsOnOrder >= 0\n\n) \n); \n\n```", "```cs\n[Required\n\n] \n[StringLength(40)\n\n]\npublic\n\n string\n\n ProductName { get\n\n; set\n\n; } \n\n```", "```cs\n[Column(TypeName = \n\n\"money\"\n\n)\n\n]\npublic\n\n decimal\n\n? UnitPrice { get\n\n; set\n\n; } \n\n```", "```cs\n CREATE\n\n TABLE\n\n Categories (\n    CategoryId   INTEGER\n\n       PRIMARY KEY\n\n,\n    CategoryName NVARCHAR\n\n (15\n\n) NOT\n\n NULL\n\n,\n    Description  \"NTEXT\"\n\n,\n    Picture      \"IMAGE\"\n\n); \n\n```", "```cs\n[Column(TypeName = \n\n\"ntext\"\n\n)\n\n]\npublic\n\n string\n\n Description { get\n\n; set\n\n; } \n\n```", "```cs\nmodelBuilder.Entity<Product>()\n  .Property(product => product.ProductName)\n  .IsRequired()\n  .HasMaxLength(40\n\n); \n\n```", "```cs\nmodelBuilder.Entity<Product>()\n  .HasData(new\n\n Product\n  {\n    ProductId = 1\n\n,\n    ProductName = \"Chai\"\n\n,\n    UnitPrice = 8.99\n\nM\n  }); \n\n```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Category\n\n    {\n    } \n\n    ```", "```cs\n     namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Product\n\n    {\n    } \n\n    ```", "```cs\n CREATE\n\n TABLE\n\n Categories (\n    CategoryId   INTEGER\n\n       PRIMARY KEY\n\n,\n    CategoryName NVARCHAR\n\n (15\n\n) NOT\n\n NULL\n\n,\n    Description  \"NTEXT\"\n\n,\n    Picture      \"IMAGE\"\n\n); \n\n```", "```cs\n     using\n\n     System.ComponentModel.DataAnnotations.Schema; // [Column]\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Category\n\n    {\n      // these properties map to columns in the database\n\n      public\n\n     int\n\n     CategoryId { get\n\n    ; set\n\n    ; }\n      public\n\n     string\n\n    ? CategoryName { get\n\n    ; set\n\n    ; }\n      [Column(TypeName = \n\n    \"ntext\"\n\n    )\n\n    ]\n      public\n\n     string\n\n    ? Description { get\n\n    ; set\n\n    ; }\n      // defines a navigation property for related rows\n\n      public\n\n     virtual\n\n     ICollection<Product> Products { get\n\n    ; set\n\n    ; }\n      public\n\n    Category\n\n    ()\n\n      {\n        // to enable developers to add products to a Category we must\n\n        // initialize the navigation property to an empty collection\n\n        Products = new\n\n     HashSet<Product>();\n      }\n    } \n\n    ```", "```cs\n     using\n\n     System.ComponentModel.DataAnnotations; // [Required], [StringLength]\n\n    using\n\n     System.ComponentModel.DataAnnotations.Schema; // [Column]\n\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     Product\n\n    {\n      public\n\n     int\n\n     ProductId { get\n\n    ; set\n\n    ; } // primary key\n\n      [Required\n\n    ]\n      [StringLength(40)\n\n    ]\n      public\n\n     string\n\n     ProductName { get\n\n    ; set\n\n    ; } = null\n\n    !;\n      [Column(\n\n    \"UnitPrice\"\n\n    , TypeName = \n\n    \"money\"\n\n    )\n\n    ]\n      public\n\n     decimal\n\n    ? Cost { get\n\n    ; set\n\n    ; } // property name != column name\n\n      [Column(\n\n    \"UnitsInStock\"\n\n    )\n\n    ]\n      public\n\n     short\n\n    ? Stock { get\n\n    ; set\n\n    ; }\n      public\n\n     bool\n\n     Discontinued { get\n\n    ; set\n\n    ; }\n      // these two define the foreign key relationship\n\n      // to the Categories table\n\n      public\n\n     int\n\n     CategoryId { get\n\n    ; set\n\n    ; }\n      public\n\n     virtual\n\n     Category Category { get\n\n    ; set\n\n    ; } = null\n\n    !;\n    } \n\n    ```", "```cs\n     public\n\n     class\n\n     Northwind\n\n     : DbContext\n\n    {\n\n    **// these properties map to tables in the database**\n\n    **public**\n\n     **DbSet<Category>? Categories {** \n\n    **get**\n\n    **;** \n\n    **set**\n\n    **; }**\n\n    **public**\n\n     **DbSet<Product>? Products {** \n\n    **get**\n\n    **;** \n\n    **set**\n\n    **; }**\n\n      protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n        DbContextOptionsBuilder optionsBuilder\n\n    )\n\n      {\n        ...\n      }\n\n    **protected**\n\n    **override**\n\n    **void**\n\n    **OnModelCreating**\n\n    **(**\n\n     **ModelBuilder modelBuilder**\n\n    **)**\n\n     **{**\n\n    **// example of using Fluent API instead of attributes**\n\n    **// to limit the length of a category name to 15**\n\n     **modelBuilder.Entity<Category>()**\n\n     **.Property(category => category.CategoryName)**\n\n     **.IsRequired()** \n\n    **// NOT NULL**\n\n     **.HasMaxLength(**\n\n    **15**\n\n    **);**\n\n    **if**\n\n     **(ProjectConstants.DatabaseProvider ==** \n\n    **\"SQLite\"**\n\n    **)**\n\n     **{**\n\n    **// added to \"fix\" the lack of decimal support in SQLite**\n\n     **modelBuilder.Entity<Product>()**\n\n     **.Property(product => product.Cost)**\n\n     **.HasConversion<**\n\n    **double**\n\n    **>();**\n\n     **}**\n\n     **}**\n\n    } \n\n    ```", "```cs\n    dotnet tool list --global \n\n    ```", "```cs\n    Package Id      Version     Commands\n    -------------------------------------\n    dotnet-ef       3.1.0       dotnet-ef \n\n    ```", "```cs\n    dotnet tool uninstall --global dotnet-ef \n\n    ```", "```cs\n    dotnet tool install --global dotnet-ef --version 6.0.0 \n\n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Filename=Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context Northwind \n\n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;\" Microsoft.EntityFrameworkCore.SqlServer --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context Northwind \n\n    ```", "```cs\n    Build started...\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n    Skipping foreign key with identity '0' on table 'Products' since principal table 'Suppliers' was not found in the model. This usually happens when the principal table was not included in the selection set. \n\n    ```", "```cs\n     using\n\n     System;\n    using\n\n     System.Collections.Generic;\n    using\n\n     System.ComponentModel.DataAnnotations;\n    using\n\n     System.ComponentModel.DataAnnotations.Schema; \n    using\n\n     Microsoft.EntityFrameworkCore;\n    namespace\n\n     WorkingWithEFCore.AutoGen\n\n    {\n      [Index(nameof(CategoryName), Name = \n\n    \"CategoryName\"\n\n    )\n\n    ]\n      public\n\n     partial\n\n     class\n\n     Category\n\n      {\n        public\n\n    Category\n\n    ()\n\n        {\n          Products = new\n\n     HashSet<Product>();\n        }\n        [Key\n\n    ]\n        public\n\n     long\n\n     CategoryId { get\n\n    ; set\n\n    ; }\n        [Required\n\n    ]\n        [Column(TypeName = \n\n    \"nvarchar (15)\"\n\n    )\n\n    ] // SQLite\n\n        [StringLength(15)\n\n    ] // SQL Server\n\n        public\n\n     string\n\n     CategoryName { get\n\n    ; set\n\n    ; }\n        [Column(TypeName = \n\n    \"ntext\"\n\n    )\n\n    ]\n        public\n\n     string\n\n    ? Description { get\n\n    ; set\n\n    ; }\n        [Column(TypeName = \n\n    \"image\"\n\n    )\n\n    ]\n        public\n\n     byte\n\n    []? Picture { get\n\n    ; set\n\n    ; }\n        [InverseProperty(nameof(Product.Category))\n\n    ]\n        public\n\n     virtual\n\n     ICollection<Product> Products { get\n\n    ; set\n\n    ; }\n      }\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; \n    namespace\n\n     WorkingWithEFCore.AutoGen\n\n    {\n      public\n\n     partial\n\n     class\n\n     Northwind\n\n     : DbContext\n\n      {\n        public\n\n    Northwind\n\n    ()\n\n        {\n        }\n        public\n\n    Northwind\n\n    (\n\n    DbContextOptions<Northwind> options\n\n    )\n\n          : \n\n    base\n\n    (\n\n    options\n\n    )\n\n        {\n        }\n        public\n\n     virtual\n\n     DbSet<Category> Categories { get\n\n    ; set\n\n    ; } = null\n\n    !;\n        public\n\n     virtual\n\n     DbSet<Product> Products { get\n\n    ; set\n\n    ; } = null\n\n    !;\n        protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n          DbContextOptionsBuilder optionsBuilder\n\n    )\n\n        {\n          if\n\n     (!optionsBuilder.IsConfigured)\n          {\n    #\n\n    warning\n\n     To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n\n            optionsBuilder.UseSqlite(\"Filename=Northwind.db\"\n\n    );\n          }\n        }\n        protected\n\n    override\n\n    void\n\n    OnModelCreating\n\n    (\n\n    ModelBuilder modelBuilder\n\n    )\n\n        {\n          modelBuilder.Entity<Category>(entity =>\n          {\n            ...\n          });\n          modelBuilder.Entity<Product>(entity =>\n          {\n            ...\n          });\n          OnModelCreatingPartial(modelBuilder);\n        }\n        partial\n\n    void\n\n    OnModelCreatingPartial\n\n    (\n\n    ModelBuilder modelBuilder\n\n    )\n\n    ;\n      }\n    } \n\n    ```", "```cs\n protected\n\noverride\n\nvoid\n\nConfigureConventions\n\n(\n\n  ModelConfigurationBuilder configurationBuilder\n\n)\n\n{\n  configurationBuilder.Properties<string\n\n>().HaveMaxLength(50\n\n);\n  configurationBuilder.IgnoreAny<IDoNotMap>();\n} \n\n```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // Include extension method \n\n    ```", "```cs\n     static\n\n    void\n\n    QueryingCategories\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        WriteLine(\"Categories and how many products they have:\"\n\n    );\n        // a query to get all categories and their related products\n\n        IQueryable<Category>? categories = db.Categories?\n          .Include(c => c.Products);\n        if\n\n     (categories is\n\n     null\n\n    )\n        {\n          WriteLine(\"No categories found.\"\n\n    );\n          return\n\n    ;\n        }\n        // execute query and enumerate results\n\n        foreach\n\n     (Category c in\n\n     categories)\n        {\n          WriteLine($\"\n\n    {c.CategoryName}\n\n     has \n\n    {c.Products.Count}\n\n     products.\"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    WriteLine($\"Using \n\n    {ProjectConstants.DatabaseProvider}\n\n     database provider.\"\n\n    );\n\n    **QueryingCategories();** \n\n    ```", "```cs\n    Using SQLite database provider.\n    Categories and how many products they have: \n    Using C:\\Code\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net6.0\\Northwind.db database file.\n    Beverages has 12 products.\n    Condiments has 12 products. \n    Confections has 13 products. \n    Dairy Products has 10 products. \n    Grains/Cereals has 7 products. \n    Meat/Poultry has 6 products.\n    Produce has 5 products. \n    Seafood has 12 products. \n\n    ```", "```cs\n     static\n\n    void\n\n    FilteredIncludes\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        Write(\"Enter a minimum for units in stock: \"\n\n    );\n        string\n\n     unitsInStock = ReadLine() ?? \"10\"\n\n    ;\n        int\n\n     stock = int\n\n    .Parse(unitsInStock);\n        IQueryable<Category>? categories = db.Categories?\n          .Include(c => c.Products.Where(p => p.Stock >= stock));\n        if\n\n     (categories is\n\n     null\n\n    )\n        {\n          WriteLine(\"No categories found.\"\n\n    );\n          return\n\n    ;\n        }\n        foreach\n\n     (Category c in\n\n     categories)\n        {\n          WriteLine($\"\n\n    {c.CategoryName}\n\n     has \n\n    {c.Products.Count}\n\n     products with a minimum of \n\n    {stock}\n\n     units in stock.\"\n\n    );\n          foreach\n\n    (Product p in\n\n     c.Products)\n          {\n            WriteLine($\"  \n\n    {p.ProductName}\n\n     has \n\n    {p.Stock}\n\n     units in stock.\"\n\n    );\n          }\n        }\n      }\n    } \n\n    ```", "```cs\n    WriteLine($\"Using \n\n    {ProjectConstants.DatabaseProvider}\n\n     database provider.\"\n\n    );\n\n    **// QueryingCategories();**\n\n    **FilteredIncludes();** \n\n    ```", "```cs\n    Enter a minimum for units in stock: 100\n    Beverages has 2 products with a minimum of 100 units in stock.\n      Sasquatch Ale has 111 units in stock.\n      Rh\u00f6nbr\u00e4u Klosterbier has 125 units in stock.\n    Condiments has 2 products with a minimum of 100 units in stock.\n      Grandma's Boysenberry Spread has 120 units in stock.\n      Sirop d'\u00e9rable has 113 units in stock.\n    Confections has 0 products with a minimum of 100 units in stock. \n    Dairy Products has 1 products with a minimum of 100 units in stock.\n      Geitost has 112 units in stock.\n    Grains/Cereals has 1 products with a minimum of 100 units in stock.\n      Gustaf's Kn\u00e4ckebr\u00f6d has 104 units in stock.\n    Meat/Poultry has 1 products with a minimum of 100 units in stock.\n      P\u00e2t\u00e9 chinois has 115 units in stock.\n    Produce has 0 products with a minimum of 100 units in stock. \n    Seafood has 3 products with a minimum of 100 units in stock.\n      Inlagd Sill has 112 units in stock.\n      Boston Crab Meat has 123 units in stock. \n      R\u00f6d Kaviar has 101 units in stock. \n\n    ```", "```cs\nchcp 65001 \n\n```", "```cs\n     static\n\n    void\n\n    QueryingProducts\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        WriteLine(\"Products that cost more than a price, highest at top.\"\n\n    ); \n        string\n\n    ? input;\n        decimal\n\n     price;\n        do\n\n        {\n          Write(\"Enter a product price: \"\n\n    );\n          input = ReadLine();\n        } while\n\n     (!decimal\n\n    .TryParse(input, out\n\n     price));\n        IQueryable<Product>? products = db.Products?\n          .Where(product => product.Cost > price)\n          .OrderByDescending(product => product.Cost);\n        if\n\n     (products is\n\n     null\n\n    )\n        {\n          WriteLine(\"No products found.\"\n\n    );\n          return\n\n    ;\n        }\n        foreach\n\n     (Product p in\n\n     products)\n        {\n          WriteLine(\n            \"{0}: {1} costs {2:$#,##0.00} and has {3} in stock.\"\n\n    ,\n            p.ProductId, p.ProductName, p.Cost, p.Stock);\n        }\n      }\n    } \n\n    ```", "```cs\n    Products that cost more than a price, highest at top. \n    Enter a product price: 50\n    38: C\u00f4te de Blaye costs $263.50 and has 17 in stock.\n    29: Th\u00fcringer Rostbratwurst costs $123.79 and has 0 in stock. \n    9: Mishi Kobe Niku costs $97.00 and has 29 in stock.\n    20: Sir Rodney's Marmalade costs $81.00 and has 40 in stock. \n    18: Carnarvon Tigers costs $62.50 and has 42 in stock.\n    59: Raclette Courdavault costs $55.00 and has 79 in stock. \n    51: Manjimup Dried Apples costs $53.00 and has 20 in stock. \n\n    ```", "```cs\n     **WriteLine(**\n\n    **$\"ToQueryString:** \n\n    **{categories.ToQueryString()}**\n\n    **\"**\n\n    **);**\n\n    foreach\n\n     (Category c in\n\n     categories) \n\n    ```", "```cs\n    Enter a minimum for units in stock: 99 \n    Using SQLite database provider.\n    ToQueryString: .param set @_stock_0 99\n    SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\", \n    \"t\".\"ProductId\", \"t\".\"CategoryId\", \"t\".\"UnitPrice\", \"t\".\"Discontinued\", \n    \"t\".\"ProductName\", \"t\".\"UnitsInStock\"\n    FROM \"Categories\" AS \"c\" \n    LEFT JOIN (\n        SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" \n        FROM \"Products\" AS \"p\"\n        WHERE (\"p\".\"UnitsInStock\" >= @_stock_0)\n    ) AS \"t\" ON \"c\".\"CategoryId\" = \"t\".\"CategoryId\" \n    ORDER BY \"c\".\"CategoryId\", \"t\".\"ProductId\"\n    Beverages has 2 products with a minimum of 99 units in stock.\n      Sasquatch Ale has 111 units in stock. \n      Rh\u00f6nbr\u00e4u Klosterbier has 125 units in stock.\n    ... \n\n    ```", "```cs\nEnter a minimum for units in stock: 99\nUsing SqlServer database provider.\nToQueryString: DECLARE @__stock_0 smallint = CAST(99 AS smallint);\nSELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [t].[ProductId], [t].[CategoryId], [t].[UnitPrice], [t].[Discontinued], [t].[ProductName], [t].[UnitsInStock]\nFROM [Categories] AS [c]\nLEFT JOIN (\n    SELECT [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\n    FROM [Products] AS [p]\n    WHERE [p].[UnitsInStock] >= @__stock_0\n) AS [t] ON [c].[CategoryId] = [t].[CategoryId]\nORDER BY [c].[CategoryId], [t].[ProductId] \n\n```", "```cs\n     using\n\n     Microsoft.Extensions.Logging; // ILoggerProvider, ILogger, LogLevel\n\n    using\n\n     static\n\n     System.Console;\n    namespace\n\n     Packt.Shared\n\n    ;\n    public\n\n     class\n\n     ConsoleLoggerProvider\n\n     : ILoggerProvider\n\n    {\n      public\n\n     ILogger \n\n    CreateLogger\n\n    (\n\n    string\n\n     categoryName\n\n    )\n\n      {\n        // we could have different logger implementations for\n\n        // different categoryName values but we only have one\n\n        return\n\n     new\n\n     ConsoleLogger();\n      }\n      // if your logger uses unmanaged resources,\n\n      // then you can release them here\n\n      public\n\n    void\n\n    Dispose\n\n    ()\n\n     { }\n    }\n    public\n\n     class\n\n     ConsoleLogger\n\n     : ILogger\n\n    {\n      // if your logger uses unmanaged resources, you can\n\n      // return the class that implements IDisposable here\n\n      public\n\n     IDisposable \n\n    BeginScope\n\n    <\n\n    TState\n\n    >(\n\n    TState state\n\n    )\n\n      {\n        return\n\n     null\n\n    ;\n      }\n      public\n\n    bool\n\n    IsEnabled\n\n    (\n\n    LogLevel logLevel\n\n    )\n\n      {\n        // to avoid overlogging, you can filter on the log level\n\n        switch\n\n    (logLevel)\n        {\n          case\n\n     LogLevel.Trace:\n          case\n\n     LogLevel.Information:\n          case\n\n     LogLevel.None:\n            return\n\n     false\n\n    ;\n          case\n\n     LogLevel.Debug:\n          case\n\n     LogLevel.Warning:\n          case\n\n     LogLevel.Error:\n          case\n\n     LogLevel.Critical:\n          default\n\n    :\n            return\n\n     true\n\n    ;\n        };\n      }\n      public\n\n    void\n\n    Log\n\n    <\n\n    TState\n\n    >(\n\n    LogLevel logLevel,\n\n        EventId eventId, TState state, Exception? exception,\n\n        Func<TState, Exception, \n\n    string\n\n    > formatter\n\n    )\n\n      {\n        // log the level and event identifier\n\n        Write($\"Level: \n\n    {logLevel}\n\n    , Event Id: \n\n    {eventId.Id}\n\n    \"\n\n    );\n        // only output the state or exception if it exists\n\n        if\n\n     (state != null\n\n    )\n        {\n          Write($\", State: \n\n    {state}\n\n    \"\n\n    );\n        }\n        if\n\n     (exception != null\n\n    )\n        {\n          Write($\", Exception: \n\n    {exception.Message}\n\n    \"\n\n    );\n        }\n        WriteLine();\n      }\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore.Infrastructure;\n    using\n\n     Microsoft.Extensions.DependencyInjection; \n    using\n\n     Microsoft.Extensions.Logging; \n\n    ```", "```cs\n     using\n\n     (Northwind db = new\n\n    ())\n    {\n\n     **ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();** \n\n     **loggerFactory.AddProvider(**\n\n    **new**\n\n     **ConsoleLoggerProvider());** \n\n    ```", "```cs\n    ...\n    Level: Debug, Event Id: 20000, State: Opening connection to database 'main' on server '/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'.\n    Level: Debug, Event Id: 20001, State: Opened connection to database 'main' on server '/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'.\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__price_0='?'], CommandType='Text', CommandTimeout='30']\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"UnitPrice\" > @__price_0\n    ORDER BY \"product\".\"UnitPrice\" DESC\n    ... \n\n    ```", "```cs\n     public\n\n    void\n\n    Log\n\n    <\n\n    TState\n\n    >(\n\n    LogLevel logLevel, EventId eventId,\n\n      TState state, Exception? exception,\n\n      Func<TState, Exception, \n\n    string\n\n    > formatter\n\n    )\n\n    {\n\n    **if**\n\n     **(eventId.Id ==** \n\n    **20100**\n\n    **)**\n\n     **{**\n\n        // log the level and event identifier\n\n        Write(\"Level: {0}, Event Id: {1}, Event: {2}\"\n\n    ,\n          logLevel, eventId.Id, eventId.Name);\n        // only output the state or exception if it exists\n\n        if\n\n     (state != null\n\n    )\n        {\n          Write($\", State: \n\n    {state}\n\n    \"\n\n    );\n        }\n        if\n\n     (exception != null\n\n    )\n        {\n          Write($\", Exception: \n\n    {exception.Message}\n\n    \"\n\n    );\n        }\n        WriteLine();\n\n     **}**\n\n    } \n\n    ```", "```cs\n    Using SQLServer database provider.\n    Categories and how many products they have:\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\n    FROM [Categories] AS [c]\n    LEFT JOIN [Products] AS [p] ON [c].[CategoryId] = [p].[CategoryId]\n    ORDER BY [c].[CategoryId], [p].[ProductId]\n    Beverages has 12 products.\n    Condiments has 12 products.\n    Confections has 13 products.\n    Dairy Products has 10 products.\n    Grains/Cereals has 7 products.\n    Meat/Poultry has 6 products.\n    Produce has 5 products.\n    Seafood has 12 products. \n\n    ```", "```cs\nIQueryable<Product>? products = db.Products?\n  .TagWith(\"Products filtered by price and sorted.\"\n\n)\n  .Where(product => product.Cost > price)\n  .OrderByDescending(product => product.Cost); \n\n```", "```cs\n-- Products filtered by price and sorted. \n\n```", "```cs\n     static\n\n    void\n\n    QueryingWithLike\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();\n        loggerFactory.AddProvider(new\n\n     ConsoleLoggerProvider());\n        Write(\"Enter part of a product name: \"\n\n    );\n        string\n\n    ? input = ReadLine();\n        IQueryable<Product>? products = db.Products?\n          .Where(p => EF.Functions.Like(p.ProductName, $\"%\n\n    {input}\n\n    %\"\n\n    ));\n        if\n\n     (products is\n\n     null\n\n    )\n        {\n          WriteLine(\"No products found.\"\n\n    );\n          return\n\n    ;\n        }\n        foreach\n\n     (Product p in\n\n     products)\n        {\n          WriteLine(\"{0} has {1} units in stock. Discontinued? {2}\"\n\n    , \n            p.ProductName, p.Stock, p.Discontinued);\n        }\n      }\n    } \n\n    ```", "```cs\n    Using SQLServer database provider.\n    Enter part of a product name: che\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__Format_1='?' (Size = 40)], CommandType='Text', CommandTimeout='30']\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" FROM \"Products\" AS \"p\"\n    WHERE \"p\".\"ProductName\" LIKE @__Format_1\n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False \n    Chef Anton's Gumbo Mix has 0 units in stock. Discontinued? True\n    Queso Manchego La Pastora has 86 units in stock. Discontinued? False \n    Gumb\u00e4r Gummib\u00e4rchen has 15 units in stock. Discontinued? False \n\n    ```", "```cs\n     protected\n\n    override\n\n    void\n\n    OnModelCreating\n\n    (\n\n    ModelBuilder modelBuilder\n\n    )\n\n    {\n      ...\n\n    **// global filter to remove discontinued products**\n\n     **modelBuilder.Entity<Product>()**\n\n     **.HasQueryFilter(p => !p.Discontinued);**\n\n    } \n\n    ```", "```cs\n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\" \n    FROM \"Products\" AS \"p\"\n    WHERE \n    **(\"p\".\"Discontinued\" = 0)**\n\n     AND \"p\".\"ProductName\" LIKE @__Format_1 \n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False \n    Queso Manchego La Pastora has 86 units in stock. Discontinued? False \n    Gumb\u00e4r Gummib\u00e4rchen has 15 units in stock. Discontinued? False \n\n    ```", "```cs\n    IQueryable<Category>? categories =\n      db.Categories; //.Include(c => c.Products); \n\n    ```", "```cs\n    Beverages has 0 products. \n    Condiments has 0 products. \n    Confections has 0 products.\n    Dairy Products has 0 products. \n    Grains/Cereals has 0 products. \n    Meat/Poultry has 0 products.\n    Produce has 0 products. \n    Seafood has 0 products. \n\n    ```", "```cs\n    <PackageReference\n      Include=\"Microsoft.EntityFrameworkCore.Proxies\"\n\n      Version=\"6.0.0\"\n\n     /> \n\n    ```", "```cs\n     protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n      DbContextOptionsBuilder optionsBuilder\n\n    )\n\n    {\n\n     **optionsBuilder.UseLazyLoadingProxies();** \n\n    ```", "```cs\n    Categories and how many products they have:\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n    SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\" FROM \"Categories\" AS \"c\"\n    Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \n    Beverages has 11 products.\n    Level: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \n    SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n    \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n    FROM \"Products\" AS \"p\"\n    WHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \n    Condiments has 11 products. \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore.ChangeTracking; // CollectionEntry \n\n    ```", "```cs\n    IQueryable<Category>? categories;\n      // = db.Categories;\n\n      // .Include(c => c.Products);\n\n    db.ChangeTracker.LazyLoadingEnabled = false\n\n    ; \n    Write(\"Enable eager loading? (Y/N): \"\n\n    );\n    bool\n\n     eagerloading = (ReadKey().Key == ConsoleKey.Y); \n    bool\n\n     explicitloading = false\n\n    ;\n    WriteLine();\n    if\n\n     (eagerloading)\n    {\n      categories = db.Categories?.Include(c => c.Products);\n    }\n    else\n\n    {\n      categories = db.Categories;\n      Write(\"Enable explicit loading? (Y/N): \"\n\n    );\n      explicitloading = (ReadKey().Key == ConsoleKey.Y);\n      WriteLine();\n    } \n\n    ```", "```cs\n     if\n\n     (explicitloading)\n    {\n      Write($\"Explicitly load products for \n\n    {c.CategoryName}\n\n    ? (Y/N): \"\n\n    ); \n      ConsoleKeyInfo key = ReadKey();\n      WriteLine();\n      if\n\n     (key.Key == ConsoleKey.Y)\n      {\n        CollectionEntry<Category, Product> products =\n          db.Entry(c).Collection(c2 => c2.Products);\n        if\n\n     (!products.IsLoaded) products.Load();\n      }\n    }\n    WriteLine($\"\n\n    {c.CategoryName}\n\n     has \n\n    {c.Products.Count}\n\n     products.\"\n\n    ); \n\n    ```", "```cs\nCategories and how many products they have:\nEnable eager loading? (Y/N): n \nEnable explicit loading? (Y/N): y\nLevel: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\nSELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\" FROM \"Categories\" AS \"c\"\nExplicitly load products for Beverages? (Y/N): y\nLevel: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \nSELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n\"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\nFROM \"Products\" AS \"p\"\nWHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0)\nBeverages has 11 products.\nExplicitly load products for Condiments? (Y/N): n \nCondiments has 0 products.\nExplicitly load products for Confections? (Y/N): n \nConfections has 0 products.\nExplicitly load products for Dairy Products? (Y/N): n \nDairy Products has 0 products.\nExplicitly load products for Grains/Cereals? (Y/N): n \nGrains/Cereals has 0 products.\nExplicitly load products for Meat/Poultry? (Y/N): n \nMeat/Poultry has 0 products.\nExplicitly load products for Produce? (Y/N): n \nProduce has 0 products.\nExplicitly load products for Seafood? (Y/N): y\nLevel: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0='?'], CommandType='Text', CommandTimeout='30'] \nSELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\",\n\"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\nFROM \"Products\" AS \"p\"\nWHERE (\"p\".\"Discontinued\" = 0) AND (\"p\".\"CategoryId\" = @ p_0) \nSeafood has 12 products. \n\n```", "```cs\n     static\n\n    bool\n\n    AddProduct\n\n    (\n\n    int\n\n     categoryId, \n\n    string\n\n     productName, \n\n    decimal\n\n    ? price\n\n    )\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        Product p = new\n\n    ()\n        {\n          CategoryId = categoryId,\n          ProductName = productName,\n          Cost = price\n        };\n        // mark product as added in change tracking\n\n        db.Products.Add(p);\n        // save tracked change to database\n\n        int\n\n     affected = db.SaveChanges();\n        return\n\n     (affected == 1\n\n    );\n      }\n    } \n\n    ```", "```cs\n     static\n\n    void\n\n    ListProducts\n\n    ()\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        WriteLine(\"{0,-3} {1,-35} {2,8} {3,5} {4}\"\n\n    ,\n          \"Id\"\n\n    , \"Product Name\"\n\n    , \"Cost\"\n\n    , \"Stock\"\n\n    , \"Disc.\"\n\n    );\n        foreach\n\n     (Product p in\n\n     db.Products\n          .OrderByDescending(product => product.Cost))\n        {\n          WriteLine(\"{0:000} {1,-35} {2,8:$#,##0.00} {3,5} {4}\"\n\n    ,\n            p.ProductId, p.ProductName, p.Cost, p.Stock, p.Discontinued);\n        }\n      }\n    } \n\n    ```", "```cs\n     // QueryingCategories();\n\n    // FilteredIncludes();\n\n    // QueryingProducts();\n\n    // QueryingWithLike();\n\n    if\n\n     (AddProduct(categoryId: 6\n\n    , \n      productName: \"Bob's Burgers\"\n\n    , price: 500\n\n    M))\n    {\n      WriteLine(\"Add product successful.\"\n\n    );\n    }\n    ListProducts(); \n\n    ```", "```cs\n    Add product successful.\n    Id  Product Name              Cost Stock Disc.\n    078 Bob's Burgers          $500.00       False\n    038 C\u00f4te de Blaye          $263.50    17 False\n    020 Sir Rodney's Marmalade  $81.00    40 False\n    ... \n\n    ```", "```cs\n     static\n\n    bool\n\n    IncreaseProductPrice\n\n    (\n\n    string\n\n     productNameStartsWith, \n\n    decimal\n\n     amount\n\n    )\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        // get first product whose name starts with name\n\n        Product updateProduct = db.Products.First(\n          p => p.ProductName.StartsWith(productNameStartsWith));\n        updateProduct.Cost += amount;\n        int\n\n     affected = db.SaveChanges();\n        return\n\n     (affected == 1\n\n    );\n      }\n    } \n\n    ```", "```cs\n     **/***\n\n    if (AddProduct(categoryId: 6, \n\n      productName: \"Bob's Burgers\", price: 500M))\n\n    {\n\n      WriteLine(\"Add product successful.\");\n\n    }\n\n    ***/**\n\n    **if**\n\n     **(IncreaseProductPrice(**\n\n     **productNameStartsWith:** \n\n    **\"Bob\"**\n\n    **, amount:** \n\n    **20**\n\n    **M))**\n\n    **{**\n\n     **WriteLine(**\n\n    **\"Update product price successful.\"**\n\n    **);**\n\n    **}**\n\n    ListProducts(); \n\n    ```", "```cs\n    Update product price successful.\n    Id  Product Name              Cost Stock Disc.\n    078 Bob's Burgers          $520.00       False\n    038 C\u00f4te de Blaye          $263.50    17 False\n    020 Sir Rodney's Marmalade  $81.00    40 False\n    ... \n\n    ```", "```cs\n     static\n\n    int\n\n    DeleteProducts\n\n    (\n\n    string\n\n     productNameStartsWith\n\n    )\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n        IQueryable<Product>? products = db.Products?.Where(\n          p => p.ProductName.StartsWith(productNameStartsWith));\n        if\n\n     (products is\n\n     null\n\n    )\n        {\n          WriteLine(\"No products found to delete.\"\n\n    );\n          return\n\n     0\n\n    ;\n        }\n        else\n\n        {\n          db.Products.RemoveRange(products);\n        }\n        int\n\n     affected = db.SaveChanges();\n        return\n\n     affected;\n      }\n    } \n\n    ```", "```cs\n     int\n\n     deleted = DeleteProducts(productNameStartsWith: \"Bob\"\n\n    );\n    WriteLine($\"\n\n    {deleted}\n\n     product(s) were deleted.\"\n\n    ); \n\n    ```", "```cs\n    1 product(s) were deleted. \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore.Storage; // IDbContextTransaction \n\n    ```", "```cs\n     static\n\n    int\n\n    DeleteProducts\n\n    (\n\n    string\n\n     name\n\n    )\n\n    {\n      using\n\n     (Northwind db = new\n\n    ())\n      {\n\n    **using**\n\n     **(IDbContextTransaction t = db.Database.BeginTransaction())**\n\n     **{**\n\n     **WriteLine(**\n\n    **\"Transaction isolation level: {0}\"**\n\n    **,**\n\n     **arg0: t.GetDbTransaction().IsolationLevel);**\n\n          IQueryable<Product>? products = db.Products?.Where(\n            p => p.ProductName.StartsWith(name));\n          if\n\n     (products is\n\n     null\n\n    )\n          {\n            WriteLine(\"No products found to delete.\"\n\n    );\n            return\n\n     0\n\n    ;\n          }\n          else\n\n          {\n            db.Products.RemoveRange(products);\n          }\n          int\n\n     affected = db.SaveChanges();\n\n     **t.Commit();**\n\n          return\n\n     affected;\n\n     **}**\n\n      }\n    } \n\n    ```", "```cs\n    Transaction isolation level: ReadCommitted \n\n    ```", "```cs\n    Transaction isolation level: Serializable \n\n    ```", "```cs\n     namespace\n\n     CoursesAndStudents\n\n    ;\n    public\n\n     class\n\n     Student\n\n    {\n      public\n\n     int\n\n     StudentId { get\n\n    ; set\n\n    ; }\n      public\n\n     string\n\n    ? FirstName { get\n\n    ; set\n\n    ; }\n      public\n\n     string\n\n    ? LastName { get\n\n    ; set\n\n    ; }\n      public\n\n     ICollection<Course>? Courses { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     using\n\n     System.ComponentModel.DataAnnotations;\n    namespace\n\n     CoursesAndStudents\n\n    ;\n    public\n\n     class\n\n     Course\n\n    {\n      public\n\n     int\n\n     CourseId { get\n\n    ; set\n\n    ; }\n      [Required\n\n    ]\n      [StringLength(60)\n\n    ]\n      public\n\n     string\n\n    ? Title { get\n\n    ; set\n\n    ; }\n      public\n\n     ICollection<Student>? Students { get\n\n    ; set\n\n    ; }\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore;\n    using\n\n     static\n\n     System.Console;\n    namespace\n\n     CoursesAndStudents\n\n    ;\n    public\n\n     class\n\n     Academy\n\n     : DbContext\n\n    {\n      public\n\n     DbSet<Student>? Students { get\n\n    ; set\n\n    ; }\n      public\n\n     DbSet<Course>? Courses { get\n\n    ; set\n\n    ; }\n      protected\n\n    override\n\n    void\n\n    OnConfiguring\n\n    (\n\n        DbContextOptionsBuilder optionsBuilder\n\n    )\n\n      {\n        string\n\n     path = Path.Combine(\n          Environment.CurrentDirectory, \"Academy.db\"\n\n    );\n        WriteLine($\"Using \n\n    {path}\n\n     database file.\"\n\n    );\n        optionsBuilder.UseSqlite($\"Filename=\n\n    {path}\n\n    \"\n\n    );\n        // optionsBuilder.UseSqlServer(@\"Data Source=.;Initial Catalog=Academy;Integrated Security=true;MultipleActiveResultSets=true;\");\n\n      }\n      protected\n\n    override\n\n    void\n\n    OnModelCreating\n\n    (\n\n    ModelBuilder modelBuilder\n\n    )\n\n      {\n        // Fluent API validation rules\n\n        modelBuilder.Entity<Student>()\n            .Property(s => s.LastName).HasMaxLength(30\n\n    ).IsRequired();\n          // populate database with sample data\n\n          Student alice = new\n\n    () { StudentId = 1\n\n    , \n            FirstName = \"Alice\"\n\n    , LastName = \"Jones\"\n\n     };\n          Student bob = new\n\n    () { StudentId = 2\n\n    , \n            FirstName = \"Bob\"\n\n    , LastName = \"Smith\"\n\n     };\n          Student cecilia = new\n\n    () { StudentId = 3\n\n    , \n            FirstName = \"Cecilia\"\n\n    , LastName = \"Ramirez\"\n\n     };\n          Course csharp = new\n\n    () \n          { \n            CourseId = 1\n\n    ,\n            Title = \"C# 10 and .NET 6\"\n\n    , \n          };\n          Course webdev = new\n\n    ()\n          {\n            CourseId = 2\n\n    ,\n            Title = \"Web Development\"\n\n    ,\n          };\n          Course python = new\n\n    ()\n          {\n            CourseId = 3\n\n    ,\n            Title = \"Python for Beginners\"\n\n    ,\n          };\n          modelBuilder.Entity<Student>()\n            .HasData(alice, bob, cecilia);\n          modelBuilder.Entity<Course>()\n            .HasData(csharp, webdev, python);\n          modelBuilder.Entity<Course>()\n            .HasMany(c => c.Students)\n            .WithMany(s => s.Courses)\n            .UsingEntity(e => e.HasData(\n              // all students signed up for C# course\n\n              new\n\n     { CoursesCourseId = 1\n\n    , StudentsStudentId = 1\n\n     },\n              new\n\n     { CoursesCourseId = 1\n\n    , StudentsStudentId = 2\n\n     },\n              new\n\n     { CoursesCourseId = 1\n\n    , StudentsStudentId = 3\n\n     },\n              // only Bob signed up for Web Dev\n\n              new\n\n     { CoursesCourseId = 2\n\n    , StudentsStudentId = 2\n\n     },\n              // only Cecilia signed up for Python\n\n              new\n\n     { CoursesCourseId = 3\n\n    , StudentsStudentId = 3\n\n     }\n            ));\n      }\n    } \n\n    ```", "```cs\n     using\n\n     Microsoft.EntityFrameworkCore; // for GenerateCreateScript()\n\n    using\n\n     CoursesAndStudents; // Academy\n\n    using\n\n     static\n\n     System.Console; \n\n    ```", "```cs\n     using\n\n     (Academy a = new\n\n    ())\n    {\n      bool\n\n     deleted = await\n\n     a.Database.EnsureDeletedAsync();\n      WriteLine($\"Database deleted: \n\n    {deleted}\n\n    \"\n\n    );\n      bool\n\n     created = await\n\n     a.Database.EnsureCreatedAsync();\n      WriteLine($\"Database created: \n\n    {created}\n\n    \"\n\n    );\n      WriteLine(\"SQL script used to create database:\"\n\n    );\n      WriteLine(a.Database.GenerateCreateScript());\n      foreach\n\n     (Student s in\n\n     a.Students.Include(s => s.Courses))\n      {\n        WriteLine(\"{0} {1} attends the following {2} courses:\"\n\n    ,\n          s.FirstName, s.LastName, s.Courses.Count);\n        foreach\n\n     (Course c in\n\n     s.Courses)\n        {\n          WriteLine($\"  \n\n    {c.Title}\n\n    \"\n\n    );\n        }\n      }\n    } \n\n    ```", "```cs\n    Using C:\\Code\\Chapter10\\CoursesAndStudents\\bin\\Debug\\net6.0\\Academy.db database file.\n    Database deleted: False\n    Database created: True\n    SQL script used to create database:\n    CREATE TABLE \"Courses\" (\n        \"CourseId\" INTEGER NOT NULL CONSTRAINT \"PK_Courses\" PRIMARY KEY AUTOINCREMENT,\n        \"Title\" TEXT NOT NULL\n    );\n    CREATE TABLE \"Students\" (\n        \"StudentId\" INTEGER NOT NULL CONSTRAINT \"PK_Students\" PRIMARY KEY AUTOINCREMENT,\n        \"FirstName\" TEXT NULL,\n        \"LastName\" TEXT NOT NULL\n    );\n    CREATE TABLE \"CourseStudent\" (\n        \"CoursesCourseId\" INTEGER NOT NULL,\n        \"StudentsStudentId\" INTEGER NOT NULL,\n        CONSTRAINT \"PK_CourseStudent\" PRIMARY KEY (\"CoursesCourseId\", \"StudentsStudentId\"),\n        CONSTRAINT \"FK_CourseStudent_Courses_CoursesCourseId\" FOREIGN KEY (\"CoursesCourseId\") REFERENCES \"Courses\" (\"CourseId\") ON DELETE CASCADE,\n        CONSTRAINT \"FK_CourseStudent_Students_StudentsStudentId\" FOREIGN KEY (\"StudentsStudentId\") REFERENCES \"Students\" (\"StudentId\") ON DELETE CASCADE\n    );\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (1, 'C# 10 and .NET 6');\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (2, 'Web Development');\n    INSERT INTO \"Courses\" (\"CourseId\", \"Title\")\n    VALUES (3, 'Python for Beginners');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (1, 'Alice', 'Jones');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (2, 'Bob', 'Smith');\n    INSERT INTO \"Students\" (\"StudentId\", \"FirstName\", \"LastName\")\n    VALUES (3, 'Cecilia', 'Ramirez');\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 1);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 2);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (2, 2);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (1, 3);\n    INSERT INTO \"CourseStudent\" (\"CoursesCourseId\", \"StudentsStudentId\")\n    VALUES (3, 3);\n    CREATE INDEX \"IX_CourseStudent_StudentsStudentId\" ON \"CourseStudent\" (\"StudentsStudentId\");\n    Alice Jones attends the following 1 course(s):\n      C#\n\n     10 and .NET 6\n\n    Bob Smith attends the following 2 course(s):\n      C#\n\n     10 and .NET 6\n\n      Web Development\n    Cecilia Ramirez attends the following 2 course(s):\n      C#\n\n     10 and .NET 6\n\n      Python for Beginners \n\n    ```", "```cs\n     CREATE\n\n     TABLE\n\n     Employees(\n      EmpId INT\n\n     IDENTITY\n\n    ,\n      FirstName NVARCHAR\n\n    (40\n\n    ) NOT\n\n     NULL\n\n    ,\n      Salary MONEY\n    ) \n\n    ```"]