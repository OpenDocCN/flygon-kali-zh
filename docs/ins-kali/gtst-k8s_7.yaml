- en: Chapter 7. OCI, CNCF, CoreOS, and Tectonic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。OCI、CNCF、CoreOS和Tectonic
- en: The first half of this chapter will cover how open standards encourage a diverse
    ecosystem of container implementations. We'll look at the Open Container Initiative
    and its mission to provide an open container specification as well. The second
    half of this chapter will cover CoreOS and its advantages as a host OS, including
    performance and support for various container implementations. Also, we'll take
    a brief look at the Tectonic enterprise offering from CoreOS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前半部分将介绍开放标准如何鼓励多样化的容器实现生态系统。我们将看看开放容器倡议及其提供开放容器规范的使命。本章的后半部分将介绍CoreOS及其作为主机操作系统的优势，包括性能和对各种容器实现的支持。此外，我们还将简要介绍CoreOS的Tectonic企业产品。
- en: 'This chapter will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Why standards matter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准的重要性
- en: The Open Container Initiative and Cloud Native Computing Foundation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放容器倡议和云原生计算基金会
- en: Container specifications versus implementations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器规范与实现
- en: CoreOS and its advantages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreOS及其优势
- en: Tectonic
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tectonic
- en: The importance of standards
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准的重要性
- en: Over the past two years, containerization technology has had a tremendous growth
    in popularity. While Docker has been at the center of this ecosystem, there is
    an increased number of players in the container space. There is already a number
    of alternatives to the containerization and Docker implementation itself (**rkt**,
    **Garden**, **LXD**, and so on). In addition, there is a rich ecosystem of third-party
    tools that enhance and compliment your container infrastructure. Kubernetes lands
    squarely on the orchestration side of this ecosystem, but the bottom line is that
    all these tools form the basis to build cloud native applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的两年里，容器技术的流行度有了巨大的增长。虽然Docker一直处于这个生态系统的中心，但容器领域的参与者数量不断增加。已经有许多替代容器化和Docker实现本身的选择（**rkt**、**Garden**、**LXD**等）。此外，还有丰富的第三方工具生态系统，可以增强和补充您的容器基础设施。Kubernetes正好处于这个生态系统的编排方面，但最重要的是，所有这些工具都构成了构建云原生应用程序的基础。
- en: As we mentioned in the very beginning of the book, one of the most attractive
    things about containers is their ability to package our application for deployment
    across various environments (that is, development, testing, production) and various
    infrastructure providers (GCP, AWS, On-Premise, and so on).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在书的开头提到的，容器最吸引人的一点是它们能够将我们的应用程序打包部署到各种环境（即开发、测试、生产）和各种基础设施提供商（GCP、AWS、On-Premise等）中。
- en: To truly support this type of deployment agility, we need not only the container
    themselves to have a common platform, but also the underlying specifications to
    follow a common set of ground rules. This will allow for implementations that
    are both flexible and highly specialized. For example, some workloads may need
    to be run on a highly secure implementation. To provide this, the implementation
    will have to make more intentional decisions about some aspects of implementation.
    In either case, we will have more agility and freedom if our containers are built
    on some common structures that all implementations agree on and support.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正支持这种部署灵活性，我们不仅需要容器本身具有一个共同的平台，还需要底层规范遵循一套共同的基本规则。这将允许实现既灵活又高度专业化。例如，一些工作负载可能需要在高度安全的实现上运行。为了提供这一点，实现将不得不对一些实现方面做出更有意识的决策。无论哪种情况，如果我们的容器建立在所有实现都同意并支持的一些共同结构上，我们将拥有更多的灵活性和自由。
- en: Open Container Initiative
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放容器倡议
- en: One of the first initiatives to gain widespread industry engagement is the **Open
    Container Initiative** (**OCI**). Among the industry collaborators are Docker,
    Red Hat, VMware, IBM, Google, AWS, and many more listed on the OCI website, that
    is, [https://www.opencontainers.org/](https://www.opencontainers.org/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 获得广泛行业参与的首个倡议之一是**开放容器倡议**（**OCI**）。行业合作伙伴包括Docker、Red Hat、VMware、IBM、Google、AWS等，OCI网站上列出了更多的合作伙伴，网址为[https://www.opencontainers.org/](https://www.opencontainers.org/)。
- en: 'The purpose of the OCI is to split implementations, such as Docker and Rocket,
    from a standard specification for the format and runtime of containerized workloads.
    By their own terms, the goal of the OCI specification has three tenets¹:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: OCI的目的是将实现（如Docker和Rocket）与容器化工作负载的格式和运行时的标准规范分开。根据他们自己的说法，OCI规范的目标有三个原则：
- en: '*Creating a formal specification for container image formats and runtime, which
    will allow a compliant container to be portable across all major, compliant operating
    systems and platforms without artificial technical barriers.*'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*创建容器图像格式和运行时的正式规范，这将允许符合规范的容器在所有主要的、符合规范的操作系统和平台上都可以无障碍地移植，而不会有人为的技术障碍。*'
- en: '>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*Accepting, maintaining and advancing the projects associated with these standards
    (the "Projects"). It will look to agree on a standard set of container actions
    (start, exec, pause,….) as well as runtime environment associated with container
    runtime.*'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*接受、维护和推进与这些标准相关的项目（“项目”）。它将寻求就容器运行时相关的标准一致的一组容器操作（启动、执行、暂停……）以及运行时环境达成一致意见。*'
- en: '>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*Harmonizing the above-referenced standard with other proposed standards, including
    the appc specification*'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*将上述标准与其他提议的标准（包括appc规范）进行协调*'
- en: Cloud Native Computing Foundation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生计算基金会
- en: A second initiative that also has a widespread industry acceptance is the **Cloud
    Native Computing Foundation** (**CNCF**). While still focused on containerized
    workloads, the CNCF operates a bit higher up the stack at an application design
    level. The purpose is to provide a standard set of tools and technologies to build,
    operate, and orchestrate cloud native application stacks. Cloud has given us access
    to a variety of new technologies and practices that can improve and evolve our
    classic software designs. This is also particularly focused at the new paradigm
    of microservice-oriented development.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个也得到了广泛行业认可的倡议是**云原生计算基金会**（**CNCF**）。虽然仍然专注于容器化工作负载，但CNCF在应用程序设计层面上操作得更高一些。其目的是提供一套标准的工具和技术，用于构建、操作和编排云原生应用程序堆栈。云计算为我们提供了许多新技术和实践，可以改进和发展我们经典的软件设计。这也特别关注了面向微服务的新范式开发。
- en: As a founding participant in CNCF, Google has donated the Kubernetes open source
    project as the first step. The goal will be to increase interoperability in the
    ecosystem and support better integration with projects, starting off with Mesos.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为CNCF的创始成员，谷歌已经捐赠了Kubernetes开源项目作为第一步。目标是增加生态系统中的互操作性，并支持与项目更好地集成，首先是Mesos。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'For more information on CNCF refer: [https://cncf.io/](https://cncf.io/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CNCF的更多信息，请参阅：[https://cncf.io/](https://cncf.io/)
- en: Standard container specification
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准容器规范
- en: 'A core result of the OCI effort is the creation and development of the overarching
    container specification. The specification has five core principles for all containers
    to follow, which I will briefly paraphrase²:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: OCI努力的一个核心成果是创建和发展全面的容器规范。该规范有五个核心原则，所有容器都必须遵循，我将简要概括如下²：
- en: It must have **standard operations** to create, start, and stop containers across
    all implementations.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须具有标准操作，以在所有实现中创建、启动和停止容器。
- en: It must be **content-agnostic**, which means that type of application inside
    the container does not alter the standard operation or publishing of the container
    itself.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是**内容无关的**，这意味着容器内部的应用类型不会改变容器本身的标准操作或发布。
- en: The container must be **infrastructure-agnostic** as well. Portability is paramount;
    therefore, the containers must be able to operate just as easily in GCE as in
    your company data center or on a developer's laptop.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器必须**与基础设施无关**。可移植性至关重要；因此，容器必须能够在GCE中或在公司数据中心或开发人员的笔记本电脑上同样轻松地运行。
- en: A container must also be **designed for automation**, which allows us to automate
    across the build, updating, and deployment pipelines. While this rule is a bit
    vague, the container implementation should not require onerous manual steps for
    creation and release.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器还必须**设计用于自动化**，这使我们能够在构建、更新和部署管道之间实现自动化。虽然这条规则有点模糊，但容器实现不应要求繁琐的手动步骤来创建和发布。
- en: Finally, the implementation must support **industrial-grade delivery**. Once
    again, speaking to the build and deployment pipelines and requiring a streamlined
    efficiency to the portability and transit of the containers between infrastructure
    and deployment tiers.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，实现必须支持**工业级交付**。再次强调构建和部署管道，并要求容器在基础设施和部署层之间的可移植性和传输的高效性。
- en: 'The specification also defines core principles for container formats and runtimes.
    You can read more about the specifications on the GitHub project at:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该规范还定义了容器格式和运行时的核心原则。您可以在GitHub项目上阅读有关规范的更多信息：
- en: '[https://github.com/opencontainers/specs](https://github.com/opencontainers/specs)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/opencontainers/specs](https://github.com/opencontainers/specs)'
- en: While the core specification can be a bit abstract, the **runC** implementation
    is a concrete example of the OCI specs in the form of a container runtime and
    image format. Also, you can read more of the technical details on GitHub at [https://github.com/opencontainers/runc](https://github.com/opencontainers/runc).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然核心规范可能有点抽象，但**runC**实现是OCI规范的一个具体示例，以容器运行时和图像格式的形式呈现。此外，您可以在GitHub上阅读更多技术细节[https://github.com/opencontainers/runc](https://github.com/opencontainers/runc)。
- en: runC is the backing format and runtime for a variety of popular container tools.
    It was donated to OCI by Docker and was created from the same plumbing work used
    in the Docker platform. Since its release, it has had a welcome uptake by numerous
    projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: runC是各种流行容器工具的支持格式和运行时。它是由Docker捐赠给OCI的，并且是使用Docker平台中的相同基础工作创建的。自发布以来，它已被众多项目欢迎。
- en: Even the popular Open Source PaaS, **Cloud Founrdy** announced that it will
    use runC in Garden. Garden provides the containerization plumbing for Deigo, which
    acts as an orchestration layer similar to Kubernetes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是流行的开源PaaS **Cloud Foundry**也宣布将在Garden中使用runC。Garden为Deigo提供容器化管道，Deigo类似于Kubernetes的编排层。
- en: rkt was originally based on the **appc** specification. appc was actually an
    earlier attempt by the folks at CoreOS to form a common specification around containerization.
    Now that CoreOS is participating in OCI, they are working to help merge the appc
    specification into OCI; it should result in a higher level of compatibility across
    the container ecosystem.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: rkt最初基于**appc**规范。appc实际上是CoreOS团队早期尝试形成容器化通用规范。现在CoreOS参与OCI，他们正在努力将appc规范合并到OCI中；这应该会导致容器生态系统的更高兼容性水平。
- en: CoreOS
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoreOS
- en: While the specifications provide us a common ground, there are also some trends
    evolving around the choice of OS for our containers. There are several tailor-fit
    OSes that are being developed specifically to run container workloads. Although
    implementations vary, they all have similar characteristics. Focus on a slim installation
    base, atomic OS updating, and signed applications for efficient and secure operations.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然规范为我们提供了一个共同的基础，但在选择容器的操作系统方面也出现了一些趋势。有几个专门开发的定制操作系统，专门用于运行容器工作负载。尽管实现各不相同，但它们都具有类似的特征。专注于精简的安装基础、原子OS更新和签名应用程序，以实现高效和安全的操作。
- en: One OS that is gaining popularity is CoreOS. **CoreOS** offers major benefits
    for both security and resource utilization. It provides the later by removing
    package dependencies completely from picture. Instead, CoreOS runs all applications
    and services in containers. By providing only a small set of services required
    to support running containers and bypassing the need for hypervisor usage, CoreOS
    lets us use a larger portion of the resource pool to run our containerized applications.
    This allows users to gain higher performance from their infrastructure and better
    container to node (server) usage ratios.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个正在变得流行的操作系统是CoreOS。**CoreOS**在安全性和资源利用方面提供了重大好处。它通过完全从图片中删除软件包依赖项来提供后者。相反，CoreOS在容器中运行所有应用程序和服务。通过仅提供一小组支持运行容器所需的服务，并且绕过使用hypervisor的需要，CoreOS让我们可以使用更大部分的资源池来运行我们的容器化应用程序。这允许用户从基础架构中获得更高的性能和更好的容器到节点（服务器）使用比率。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**More container OSes**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多容器操作系统**'
- en: There are several other container-optimized OSes that have emerged recently.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最近出现了几种其他优化的容器操作系统。
- en: '**Red Hat Enterprise Linux Atomic Host** focuses on security with **SELinux**
    enabled by default and "Atomic" updates to the OS similar to what we saw with
    CoreOS. Refer to the following link:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 红帽企业Linux原子主机专注于安全，**SELinux**默认启用，并且OS的“原子”更新类似于我们在CoreOS中看到的。参考以下链接：
- en: '[https://access.redhat.com/articles/rhel-atomic-getting-started](https://access.redhat.com/articles/rhel-atomic-getting-started)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://access.redhat.com/articles/rhel-atomic-getting-started](https://access.redhat.com/articles/rhel-atomic-getting-started)'
- en: '**Ubuntu Snappy** also capitalizes on the efficiency and security gains of
    separating the OS components from the frameworks and applications. Using application
    images and verification signatures, we get an efficient Ubuntu-based OS for our
    container workloads:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ubuntu Snappy**也利用了将OS组件与框架和应用程序分离的效率和安全性收益。使用应用程序图像和验证签名，我们可以获得一个高效的基于Ubuntu的OS，用于我们的容器工作负载：'
- en: '[http://www.ubuntu.com/cloud/tools/snappy](http://www.ubuntu.com/cloud/tools/snappy)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.ubuntu.com/cloud/tools/snappy](http://www.ubuntu.com/cloud/tools/snappy)'
- en: '**VMware Photon** is another lightweight container OS that is optimized specifically
    for **vSphere** and the VMware platform. It runs Docker, rkt, and Garden and also
    has some experimental versions you can run on the popular public cloud offerings.
    Refer to the following link:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**VMware Photon**是另一个专门针对**vSphere**和VMware平台进行优化的轻量级容器OS。它运行Docker、rkt和Garden，并且还有一些实验版本可以在流行的公共云提供上运行。参考以下链接：'
- en: '[https://vmware.github.io/photon/](https://vmware.github.io/photon/)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://vmware.github.io/photon/](https://vmware.github.io/photon/)'
- en: Using the isolated nature of containers, we increase reliability and decrease
    the complexity of updates for each application. Now applications can be updated
    along with supporting libraries whenever a new container release is ready.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 利用容器的隔离特性，我们提高了可靠性，并减少了每个应用程序更新的复杂性。现在，每当新的容器发布准备就绪时，应用程序可以与支持库一起更新。
- en: '![CoreOS](../images/00075.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![CoreOS](../images/00075.jpeg)'
- en: Figure 7.1\. CoreOS updates
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1\. CoreOS更新
- en: 'Finally, CoreOS has some added advantages in the realm of security. For starters,
    the OS can be updated as one whole unit instead of by individual packages (refer
    to Figure 7.1). This avoids many issues that arise from partial updates. To achieve
    this, CoreOS uses two partitions: one as the active OS partition and a secondary
    to receive a full update. Once updates are completed successfully, a reboot promotes
    the secondary partition. If anything goes wrong, the original partition is available
    for fail back.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，CoreOS在安全领域有一些额外的优势。首先，操作系统可以作为一个整体单元进行更新，而不是通过单独的软件包（参见图7.1）。这避免了许多由部分更新引起的问题。为了实现这一点，CoreOS使用了两个分区：一个作为活动的操作系统分区，另一个用于接收完整的更新。一旦更新成功完成，重新启动将促进次要分区。如果出现任何问题，原始分区可用于失败回退。
- en: The system owners can also control when those updates are applied. This gives
    us the flexibility to prioritize critical updates while working with real-world
    scheduling for the more common updates. In addition, the entire update is signed
    and transmitted via SSL for added security across the entire process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 系统所有者还可以控制何时应用这些更新。这使我们能够优先处理关键更新，同时与更常见的更新进行实际的调度。此外，整个更新都经过签名并通过SSL传输，以增加整个过程的安全性。
- en: rkt
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rkt
- en: A central piece of the CoreOS ecosystem is its own container runtime, named
    rkt. As we mentioned earlier, rkt is another implementation with a specific focus
    on security. rkt's main advantage is in running the engine without a daemon as
    root the way Docker does today. Initially, rkt also had an advantage in establishing
    trust for container images. However, recent updates to Docker have made great
    strides with the new **Content Trust** feature.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS生态系统的一个核心部分是其自己的容器运行时，名为rkt。正如我们之前提到的，rkt是另一个专注于安全性的实现。rkt的主要优势在于在不像Docker今天那样以root守护程序的方式运行引擎。最初，rkt在建立容器镜像的信任方面也有优势。然而，Docker的最新更新通过新的**内容信任**功能取得了巨大进展。
- en: The bottom line is that rkt is still an implementation focused on security to
    run containers in production. rkt does use an image format named **ACI**, but
    it also supports running Docker-based images. At the time of writing this book,
    it is only at version 0.11.0, but it's already gaining momentum as a way to run
    Docker images securely in production.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，rkt仍然是一个专注于安全性的实现，用于在生产环境中运行容器。rkt确实使用了一个名为**ACI**的镜像格式，但它也支持运行基于Docker的镜像。在撰写本书时，它只有0.11.0版本，但已经在安全地运行Docker镜像的方式上获得了动力。
- en: In addition, CoreOS recently announced integration with the **Intel® Virtualization
    Technology**, which allows containers to run in higher levels of isolation. This
    hardware-enhanced security allows the containers to be run inside a **Kernel-based
    Virtual Machine** (**KVM**) process providing isolation from the kernel similar
    to what we see with hypervisors today.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CoreOS最近宣布与英特尔®虚拟化技术集成，这允许容器在更高级别的隔离中运行。这种硬件增强的安全性允许容器在**基于内核的虚拟机**（**KVM**）进程内运行，提供了与当今的虚拟化程序类似的内核隔离。
- en: etcd
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: etcd
- en: Another central piece in the CoreOS ecosystem worth mentioning is their open
    source etcd project. etcd is a distributed and consistent key-value store. A RESTful
    API is used to interface with etcd, so it's easy to integrate with your project.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: CoreOS生态系统中另一个值得一提的核心部分是他们的开源etcd项目。etcd是一个分布式和一致的键值存储。使用RESTful API与etcd进行接口，因此很容易与您的项目集成。
- en: If it sounds familiar, it's because we saw this process running in [Chapter
    1](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7 "Chapter 1. Kubernetes
    and Container Operations"), *Kubernetes and Container Operations*, under the *Services
    running on the master* section. Kubernetes actually utilizes etcd to keep track
    of cluster configuration and current state. K8s uses it for the service discovery
    capabilities as well.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果听起来很熟悉，那是因为我们在[第1章](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7
    "第1章 Kubernetes和容器操作")中看到了这个过程，*Kubernetes和容器操作*，在*运行在主节点上的服务*部分。Kubernetes实际上利用etcd来跟踪集群配置和当前状态。K8s也使用它来进行服务发现。
- en: Kubernetes with CoreOS
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes与CoreOS
- en: Now that we understand the benefits, let's take a look at a Kubernetes cluster
    using CoreOS. The documentation supports a number of platforms, but one of the
    easiest to spin up is AWS with the CoreOS **CloudFormation** and CLI scripts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了这些好处，让我们来看一下使用CoreOS的Kubernetes集群。文档支持多个平台，但其中一个最容易启动的是使用CoreOS的AWS **CloudFormation**和CLI脚本。
- en: Tip
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If you are interested in running Kubernetes with CoreOS on other platforms,
    you can find more details in the CoreOS documentation here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣在其他平台上运行带有CoreOS的Kubernetes，您可以在CoreOS文档中找到更多详细信息：
- en: '[https://coreos.com/kubernetes/docs/latest/](https://coreos.com/kubernetes/docs/latest/)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://coreos.com/kubernetes/docs/latest/](https://coreos.com/kubernetes/docs/latest/)'
- en: 'We can find the latest scripts for AWS here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里找到AWS的最新脚本：
- en: '[https://github.com/coreos/coreos-kubernetes/releases/latest](https://github.com/coreos/coreos-kubernetes/releases/latest)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/coreos/coreos-kubernetes/releases/latest](https://github.com/coreos/coreos-kubernetes/releases/latest)'
- en: For this walk-through, we will use v0.1.0 (latest at the time of writing) of
    the scripts. We'll need a Linux machine with the AWS CLI installed and configured.
    See the *Working with other providers* section of [Chapter 1](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7
    "Chapter 1. Kubernetes and Container Operations"), *Kubernetes and Container Operations*,
    for details on installing and configuring the AWS CLI. I recommend that you use
    a box with the Kubernetes control scripts already installed to avoid having to
    download `kubectl` separately.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用脚本的v0.1.0版本（撰写时的最新版本）。我们需要一个已安装并配置了AWS CLI的Linux机器。有关安装和配置AWS CLI的详细信息，请参阅[第1章](part0015_split_000.html#E9OE1-22fbdd9ef660435ca6bcc0309f05b1b7
    "第1章 Kubernetes和容器操作")中的*与其他提供商合作*部分。我建议您使用已安装了Kubernetes控制脚本的盒子，以避免需要单独下载`kubectl`。
- en: 'Let''s first download and extract the **tarball** from GitHub as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从GitHub下载并提取**tarball**，如下所示：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will extract a single executable named `kube-aws`. This file will launch
    the AWS infrastructure in the same way that `kube-up.sh` did for us earlier.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提取一个名为`kube-aws`的可执行文件。这个文件将以与之前的`kube-up.sh`相同的方式启动AWS基础设施。
- en: Before we proceed, we need to create a key-pair to use on AWS. For this example,
    I create one key-pair named `kube-aws-key`. We can create a key in the console
    under the EC2 service on the left-hand menu and then select **Key Pairs**. Keys
    can also be created using the CLI.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要创建一个在AWS上使用的密钥对。在这个例子中，我创建了一个名为`kube-aws-key`的密钥对。我们可以在左侧菜单的EC2服务下的控制台中创建一个密钥，然后选择**密钥对**。也可以使用CLI创建密钥。
- en: 'Next, we will need to create a cluster definition file. In the same folder,
    we downloaded `kube-aws`; create a new file from the listing 7-1:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个集群定义文件。在我们下载的`kube-aws`的同一个文件夹中，从列表7-1中创建一个新文件：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-1*: `coreos-cluster.yaml`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表7-1*：`coreos-cluster.yaml`'
- en: We have a few things to note. We have `keyName` set to the key we just created,
    `kube-aws-key`. The region is set to `us-east-1` (Northern Virginia), so edit
    this if you prefer a different region. In addition, `clustername` and `workerCount`
    are commented out, but their defaults are as listed, `kubernetes` and `1`, respectively.
    `workerCount` defines the number of slaves, so you can increase this value if
    you need more.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些需要注意的事情。我们将 `keyName` 设置为我们刚刚创建的密钥 `kube-aws-key`。区域设置为 `us-east-1`（北弗吉尼亚），如果您喜欢其他区域，请进行编辑。此外，`clustername`
    和 `workerCount` 被注释掉，但它们的默认值分别为 `kubernetes` 和 `1`。`workerCount` 定义了从属节点的数量，因此如果需要更多，可以增加此值。
- en: In addition, we have a placeholder DNS entry. The value for `externalDNSName`
    is set to `kube-aws`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们有一个占位符 DNS 条目。`externalDNSName` 的值设置为 `kube-aws`。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity's sake, we can simply add an entry for `kube-aws` in the `/etc/hosts`
    file. For a production system, we would want a real entry that we could expose
    through Route 53, another DNS registrar, or a local DNS entry.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们可以在 `/etc/hosts` 文件中简单地添加一个 `kube-aws` 条目。对于生产系统，我们希望有一个真实的条目，可以通过
    Route 53、另一个 DNS 注册商或本地 DNS 条目来公开。
- en: 'Now we can spin up the CoreOS cluster:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动 CoreOS 集群：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We should get the master IP in the console output under controller IP. We will
    need to update the IP address for `kube-aws` in our `/etc/hosts` file or DNS provider.
    We can also get the master IP by checking our running instances in AWS. It should
    be labeled `kube-aws-controller`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在控制台输出中找到主 IP 地址，位于控制器 IP 下方。我们需要在 `/etc/hosts` 文件或 DNS 提供商中更新 `kube-aws`
    的 IP 地址。我们也可以通过检查在 AWS 中运行的实例来获取主 IP。它应该被标记为 `kube-aws-controller`。
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There you have it! We now have a cluster running CoreOS. The script creates
    all the necessary AWS resources, such as **Virtual Private Clouds** (**VPCs**),
    security groups, and IAM role.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们现在有一个运行 CoreOS 的集群。该脚本创建了所有必要的 AWS 资源，如**虚拟私有云**（**VPC**）、安全组和 IAM 角色。
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Note that if this is a fresh box, you will need to download `kubectl` separately
    as it is not bundled with `kube-aws`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果这是一个全新的盒子，您需要单独下载 `kubectl`，因为它不与 `kube-aws` 捆绑在一起：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now use `kubectl` to see our new cluster:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `kubectl` 来查看我们的新集群：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We should see a single node listed with the EC2 internal DNS as the name. Note
    `kubeconfig`, this tells Kubernetes to use the configuration file for the cluster
    we just created instead of the previous GCE cluster we have been working thus
    far. This is useful if we want to manage multiple clusters from the same machine.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到列出了一个单一节点，其名称为 EC2 内部 DNS。注意 `kubeconfig`，这告诉 Kubernetes 使用我们刚刚创建的集群的配置文件，而不是我们迄今为止一直在使用的之前的
    GCE 集群。如果我们想要从同一台机器管理多个集群，这是很有用的。
- en: Tectonic
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tectonic
- en: Running Kubernetes on CoreOS is a great start, but you may find that you want
    a higher level of support. Enter **Tectonic**, the CoreOS enterprise offering
    for running Kubernetes with CoreOS. Tectonic uses many of the components we've
    already discussed. CoreOS is the OS and both Docker and rkt runtimes are supported.
    In addition, Kubernetes, etcd, and flannel are packaged together to give a full
    stack of cluster orchestration. We discussed flannel briefly in [Chapter 3](part0028_split_000.html#QMFO2-22fbdd9ef660435ca6bcc0309f05b1b7
    "Chapter 3. Core Concepts – Networking, Storage, and Advanced Services"), *Core
    Concepts – Networking, Storage, and Advanced Services*. It is an overlay network
    that uses a model similar to the native Kubernetes model, and it uses etcd as
    a backend.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在CoreOS上运行Kubernetes是一个很好的开始，但您可能会发现您需要更高级别的支持。这就是**Tectonic**，CoreOS企业提供的用于在CoreOS上运行Kubernetes的产品。Tectonic使用了我们已经讨论过的许多组件。CoreOS是操作系统，支持Docker和rkt运行时。此外，Kubernetes、etcd和flannel被打包在一起，提供了一个完整的集群编排栈。我们在[第3章](part0028_split_000.html#QMFO2-22fbdd9ef660435ca6bcc0309f05b1b7
    "第3章。核心概念-网络、存储和高级服务")中简要讨论了flannel。它是一个使用类似于原生Kubernetes模型的覆盖网络，并使用etcd作为后端的网络。
- en: Offering a support package similar to Red Hat, CoreOS are also providing 24x7
    support for the open source software that Tectonic is built on. Tectonic also
    provides regular cluster updates and a nice dashboard with views for all the components
    of Kubernetes. **CoreUpdate** allows users to have more control of the automatic
    updates. In addition, it ships with **Tectonic Identity** for SSO across the cluster
    and the **Quay Enterprise**, which provides a secure container registry behind
    your own firewall.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与Red Hat类似，CoreOS也提供了类似的支持包，为Tectonic构建的开源软件提供24x7支持。Tectonic还提供定期的集群更新和一个漂亮的仪表板，显示了Kubernetes的所有组件的视图。**CoreUpdate**允许用户更多地控制自动更新。此外，它还配备了**Tectonic
    Identity**，用于跨集群的SSO，以及**Quay Enterprise**，它在您自己的防火墙后面提供了一个安全的容器注册表。
- en: Dashboard highlights
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板亮点
- en: 'Here are some highlights of the Tectonic dashboard:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Tectonic仪表板的一些亮点：
- en: '![Dashboard highlights](../images/00076.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![仪表板亮点](../images/00076.jpeg)'
- en: Figure 7.2\. The Tectonic main dashboard
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2。Tectonic主仪表板
- en: 'Tectonic is now generally available and the dashboard already has some nice
    features. As you can see in Figure 7.3, we can see a lot of detail about our replication
    controller and can even use the GUI to scale up and down with the click of a button:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Tectonic现在已经普遍可用，仪表板已经具有一些不错的功能。正如您在图7.3中所看到的，我们可以看到有关我们复制控制器的许多详细信息，并且甚至可以使用GUI通过点击按钮来扩展和缩小规模：
- en: '![Dashboard highlights](../images/00077.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![仪表板亮点](../images/00077.jpeg)'
- en: Figure 7.3\. Tectonic replication controller detail
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3。Tectonic复制控制器详细信息
- en: Another nice feature is the **Streaming events** page. Here, we can watch the
    events live, pause, and filter based on event severity and resource type.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不错的功能是**流事件**页面。在这里，我们可以观看实时事件，暂停，并根据事件严重程度和资源类型进行过滤。
- en: '![Dashboard highlights](../images/00078.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![仪表板亮点](../images/00078.jpeg)'
- en: Figure 7.4\. Events stream
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4。事件流
- en: A useful feature to browse anywhere in the dashboard system is the namespace
    filtering option. Simply click on the gear in the top-right corner of the page,
    and we can filter our views by namespace. This can be helpful if we want to filter
    out the Kubernetes system pods or just look at a particular collection of resources.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览仪表板系统中任何地方的一个有用功能是命名空间过滤选项。只需点击页面右上角的齿轮，我们就可以通过命名空间来过滤我们的视图。如果我们想要过滤掉Kubernetes系统的pod，或者只是查看特定的资源集合，这将非常有帮助。
- en: '![Dashboard highlights](../images/00079.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![仪表板亮点](../images/00079.jpeg)'
- en: Figure 7.5\. Namespace filtering
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5。命名空间过滤
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the emerging standards bodies in the container
    community and how they are shaping the technology for the better with open specifications.
    We also took a closer look at CoreOS, a key player in both the container and Kubernetes
    community. We explored the technology they are developing to enhance and compliment
    container orchestration and saw first-hand how to use some of it with Kubernetes.
    Finally, we looked at the supported enterprise offering of Tectonic and some of
    the features that will be available soon.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了看容器社区中新兴的标准机构，以及它们如何通过开放规范来更好地塑造技术。我们还仔细研究了CoreOS，这是容器和Kubernetes社区中的关键参与者。我们探讨了他们正在开发的技术，以增强和补充容器编排，并亲身体验了如何在Kubernetes中使用其中一些技术。最后，我们看了看Tectonic的企业支持服务以及即将推出的一些功能。
- en: Footnotes
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚注
- en: ¹[https://www.opencontainers.org/faq/](https://www.opencontainers.org/faq/)
    (#11 on the page)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ¹[https://www.opencontainers.org/faq/](https://www.opencontainers.org/faq/)（页面上的第11条）
- en: ²[https://github.com/opencontainers/specs/blob/master/principles.md](https://github.com/opencontainers/specs/blob/master/principles.md)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ²[https://github.com/opencontainers/specs/blob/master/principles.md](https://github.com/opencontainers/specs/blob/master/principles.md)
