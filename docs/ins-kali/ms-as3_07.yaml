- en: Language Support
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言支持
- en: For an IDE to be considered truly essential, it has to do more than just offer
    the basics. In particular, it has to be accessible to developers from all kinds
    of backgrounds, using all kinds of languages and philosophies. For example, many
    developers prefer to take an object-oriented approach, whereas others prefer a
    more function-based philosophy, and many potential projects will lend themselves
    more easily to one or the other of these paradigms.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要被认为是真正必不可少的IDE，它必须做的不仅仅是提供基础功能。特别是，它必须对来自各种背景、使用各种语言和哲学的开发者都是可访问的。例如，许多开发者更喜欢采用面向对象的方法，而其他人更喜欢更基于功能的哲学，许多潜在项目更容易适应这两种范式中的一种。
- en: Android Studio 3 provides complete language support for both C++ and Kotlin,
    giving the developer the chance to focus on speed or programmability depending
    on the needs of the project in hand.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 3为C++和Kotlin提供了完整的语言支持，使开发者有机会根据手头项目的需求专注于速度或可编程性。
- en: In addition to providing this language support, Android Studio also facilitates
    the development of apps for a wide variety of form factors. The reader will already
    be familiar with Android Wear and Android Auto, and recently the IDE has included
    support for Android Things.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供这种语言支持外，Android Studio还促进了为各种形态的设备开发应用程序。读者可能已经熟悉Android Wear和Android Auto，最近IDE还包括了对Android
    Things的支持。
- en: In this chapter, we will take a look at these language support systems and the
    exciting new form factors that comprise the **Internet of Things** (**IoT**).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看这些语言支持系统以及构成**物联网**（**IoT**）的令人兴奋的新形态。
- en: 'In this chapter, you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Including Kotlin language support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括Kotlin语言支持
- en: Integrating Kotlin with Java
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Kotlin与Java集成
- en: Applying Kotlin extensions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用Kotlin扩展
- en: Setting up native components
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置本地组件
- en: Including C/C++ code within a project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中包括C/C++代码
- en: Creating an Android Things project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Android Things项目
- en: Kotlin support
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin支持
- en: Since the dawn of the mobile app, software development has undergone more than
    one revolution, and the Android framework has been no stranger to these changes.
    Many developers prefer Java as it is relatively easy to work with, but there will
    always be times when we want the raw speed of C++, and Java predates mobile devices
    by decades. Wouldn't it be nice if there ware a high-level language, such as Java,
    that had been designed with mobile development largely in mind.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 自移动应用诞生以来，软件开发经历了不止一次革命，而Android框架也不陌生于这些变化。许多开发者更喜欢Java，因为它相对容易使用，但总会有一些时候，我们想要C++的原始速度，而Java早在移动设备出现几十年前就存在了。如果有一种高级语言，比如Java，它是专门为移动开发而设计的，那不是很好吗。
- en: Fortunately, a JetBrains team in Russia created Kotlin, which works alongside
    Java and even runs on the Java Virtual Machine, to create a language that better
    suits the needs of Android developers. It is also 100 percent interoperable with
    Java, so you can use Java and Kotlin files in the same project, and everything
    will still compile. You can also continue to use all existing Java frameworks
    and libraries with Kotlin.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，俄罗斯的JetBrains团队创建了Kotlin，它可以与Java一起工作，甚至在Java虚拟机上运行，以创建一个更适合Android开发者需求的语言。它还与Java完全可互操作，因此您可以在同一个项目中使用Java和Kotlin文件，一切仍然可以编译。您还可以继续使用Kotlin与所有现有的Java框架和库。
- en: Kotlin has been available for some time to developers as a plugin, but since
    the inception of Android Studio 3.0, Kotlin is now fully integrated into the IDE
    and is officially supported as a development language by Google. Both working
    samples written in Kotlin and wizard templates are included in the IDE.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin作为插件已经提供给开发者一段时间了，但自从Android Studio 3.0推出以来，Kotlin现在已完全集成到IDE中，并且已被Google正式支持为开发语言。IDE中包括了用Kotlin编写的工作样本和向导模板。
- en: '![](img/e8482cd4-7b27-4aa5-a322-1fc29ad13536.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8482cd4-7b27-4aa5-a322-1fc29ad13536.png)'
- en: Including Kotlin support in the project setup wizard
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目设置向导中包括Kotlin支持
- en: Learning a new programming language is rarely a great deal of fun, and Kotlin
    is no exception. What takes the hardwork out of using it is that we do not have
    to make the leap from one language to another in a single jump, we can gradually
    introduce Kotlin as and when we choose.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 学习一门新的编程语言很少会有多少乐趣，Kotlin也不例外。使用它的好处在于，我们不必一下子从一种语言跳到另一种语言，可以逐渐引入Kotlin，随时选择使用。
- en: Many of us will have worked with Java for a very long time and will see no real
    reason for changing. After all, Java works perfectly well, and years of experience
    can lead to some very speedy work practices. On top of this, the internet is awash
    with high-quality, open source, code repositories, making research and learning
    new skills very appealing to the Java coder.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们中的许多人已经使用Java很长时间了，并且没有真正改变的理由。毕竟，Java运行得很好，多年的经验可以带来一些非常快速的工作实践。此外，互联网上充斥着高质量的开源代码库，使得研究和学习新技能对Java程序员非常有吸引力。
- en: It will never be strictly necessary to learn and use Kotlin in Android development,
    but it is certainly worth taking a look at why so many developers think it represents
    the future of Android app development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android开发中，学习和使用Kotlin绝对不是必须的，但值得一看的是，为什么有这么多开发者认为它代表了Android应用开发的未来。
- en: The advantages of Kotlin
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin的优势
- en: Along with Google's own endorsements, there are a number of good reasons for
    developers to consider Kotlin. One of the reasons might be the end to null pointer
    exceptions, which the compiler acheives by not allowing a null value to be assigned
    to any object reference. Other exciting features of the language include favoring
    composition over inheritance, smart casting, and the ability to create data classes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了谷歌自己的认可之外，还有许多理由让开发者考虑Kotlin。其中一个原因可能是终结空指针异常，编译器通过不允许将null值分配给任何对象引用来实现这一点。语言的其他令人兴奋的特性包括更青睐组合而非继承、智能转换和创建数据类。
- en: The best way to see how much of an advantage such innovations provide is to
    take a look at these.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这些创新提供了多大的优势，最好的方法是看一下这些。
- en: As the screenshot in the preceding section demonstrates, Kotlin can be included
    into a project directly from the template wizard, but we can also include Kotlin
    classes from an already open project in precisely the same way that we add any
    other class or file, from the module's New menu.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一节中的屏幕截图所示，Kotlin可以直接从模板向项目中包含，但是我们也可以以与添加任何其他类或文件相同的方式，从已经打开的项目中包含Kotlin类。
- en: '![](img/f3358cf0-c019-4b3e-a705-6962e2ca9d66.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3358cf0-c019-4b3e-a705-6962e2ca9d66.png)'
- en: Adding a new Kotlin file/class
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的Kotlin文件/类
- en: 'Including a Kotlin class in this manner will prompt the IDE to automatically
    configure Kotlin with Gradle. It does this by modifying the top-level `build.gradle` file
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式包含一个Kotlin类将提示IDE自动配置Kotlin与Gradle。它通过修改顶级`build.gradle`文件来实现：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using Kotlin in an Android application will incur almost no extra overheads;
    moreover, once it is compiled, Kotlin code will run no more slowly than its Java
    equivalent, nor will it occupy any more memory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用中使用Kotlin几乎不会产生额外开销；而且，一旦编译完成，Kotlin代码的运行速度不会比其Java等价物慢，也不会占用更多的内存。
- en: Including a new Kotlin class or file like this is very useful, but what about
    creating a Kotlin activity or fragment from a template? As Java developers, we
    are used to simple configuration dialogs to set these up. Fortunately, Kotlin
    activities are no different, and the Configure Activity dialog allows us to select
    our source language appropriately.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样包含一个新的Kotlin类或文件非常有用，但是如何从模板创建一个Kotlin活动或片段呢？作为Java开发人员，我们习惯于使用简单的配置对话框来设置这些。幸运的是，Kotlin活动也没有什么不同，`配置活动`对话框允许我们适当地选择源语言。
- en: '![](img/23a4e7b9-8cd7-4e9e-95db-f2d621c88856.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23a4e7b9-8cd7-4e9e-95db-f2d621c88856.png)'
- en: Selecting the source language
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择源语言
- en: 'As before, it is well worth taking a look at the resultant code to see just
    how much more concise and readable it is compared to the tradition Java activity/fragment
    templates:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，值得一看的是最终代码，看看与传统的Java活动/片段模板相比，它有多么简洁和可读。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code can be made even more concise by removing calls to `findViewById()`
    using the Kotlin extension, as explained in the following section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Kotlin扩展来删除对`findViewById()`的调用，可以使这段代码变得更加简洁，如下一节所述。
- en: 'Although mixing-and-matching languages this way can be very useful to adapt
    and update existing apps, Kotlin really comes into its own when applied across
    an entire project. Perhaps its most appealing feature is its conciseness, and
    this can be easily seen by starting two projects from scratch and comparing their
    code. The following is the `onCreate()` listing from the Navigation Drawer template
    code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种混合语言的方式对于调整和更新现有应用非常有用，但是当应用于整个项目时，Kotlin才能充分发挥其作用。也许它最吸引人的特点是简洁性，通过从头开始创建两个项目并比较它们的代码，这一点很容易看出。以下是导航抽屉模板代码中的`onCreate()`列表：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is its Kotlin equivalent:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的Kotlin等价物：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The increased simplicity of this syntax is something all developers will welcome,
    and this is by no means the only advantage to using Kotlin.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法的增加简洁性是所有开发人员都会欢迎的，而这绝不是使用Kotlin的唯一优势。
- en: Extending Kotlin
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Kotlin
- en: As one would expect with any powerful programming paradigm, it can be extended
    with a plugin to increase its usefulness even further.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如人们对任何强大的编程范式所期望的那样，可以通过插件来扩展它，以进一步增加其实用性。
- en: Every Android developer will have lost count of the number of times they have
    typed `findViewById()`. They will also be aware of how error-prone such static
    typing can be.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android开发人员都会对自己多少次输入`findViewById()`失望。他们也会意识到这种静态类型可能有多容易出错。
- en: 'The Kotlin extension is included, by default, when Kotlin support is enabled
    during project setup, as can be seen in the module-level `build.gradle` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目设置期间启用Kotlin支持时，默认情况下会包含Kotlin扩展，如模块级`build.gradle`文件中所示：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using an extension also requires that it be imported into the appropriate class,
    usually an activity or fragment. It is more than likely that the reader will have
    set up automatic imports through system settings. All that is needed then is to
    create a view using XML in the usual fashion, like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用扩展还需要将其导入到适当的类中，通常是活动或片段。读者很可能已经通过系统设置设置了自动导入。然后所需的就是以通常的方式使用XML创建视图，如下所示：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, all that is needed to set values on that widget is something along the
    lines of the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置该小部件的值所需的只是以下内容：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Regardless of whether you have imports set to be included automatically, it
    is useful to know the format these imports take. Consider the following example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是否设置了自动包含导入，了解这些导入的格式是很有用的。考虑以下示例：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is also possible to import a reference to a specific view rather than the
    entire layout file with the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以导入特定视图的引用，而不是整个布局文件，如下所示：
- en: '`import kotlinx.android.synthetic.main.some_layout.text_view`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`import kotlinx.android.synthetic.main.some_layout.text_view`'
- en: In this case, `some_layout.xml` would be the file containing our `text_view`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，`some_layout.xml`将是包含我们的`text_view`的文件。
- en: 'If you are in the healthy habit of using `<include>` to reference content XML
    from your activity XML, then you will need two imports, along these lines:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您习惯于在活动XML中使用`<include>`引用内容XML，那么您将需要两个类似于以下的导入：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is not only the text we can set here; any function we like can be called
    in the same way without ever having to reference a view by searching for its ID.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以在这里设置文本；任何我们喜欢的函数都可以以同样的方式调用，而无需通过搜索其ID来引用视图。
- en: Note that the use of a semicolon as a statement delineation is entirely optional
    in Kotlin.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Kotlin中，分号作为语句分隔符是完全可选的。
- en: Hopefully, by now, the reader will be convinced of the advantages of coding
    in Kotlin, but before we move on, one Kotlin feature is hidden away at the bottom
    of the main `Code` menu. This is Convert Java File to Kotlin File. This does exactly
    what it says and can even find and solve most conversion issues, making it a great
    time-saver and a fun way to learn the differences between the two languages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 希望到目前为止，读者已经被说服了在Kotlin中编码的优势，但在我们继续之前，Kotlin的一个功能隐藏在主`Code`菜单的底部。这是将Java文件转换为Kotlin文件。这正是它所说的，甚至可以找到并解决大多数转换问题，使其成为一个很好的节省时间的工具，也是学习两种语言之间差异的一种有趣方式。
- en: Automatically convert Java into Kotlin with *Ctrl* + *Alt* + *Shift* + *K*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *Alt* + *Shift* + *K*可以自动将Java转换为Kotlin。
- en: Although Kotlin may be one of the newest additions to Android Studio, it is
    not our only choice for an alternative language, and the speed and low-level memory
    access that C++ provides have made it many developers' first choice. In the following
    section we will see how this powerful language can be easily supported by the
    IDE.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Kotlin可能是Android Studio中最新的添加之一，但它并不是我们选择替代语言的唯一选择，C++提供的速度和低级内存访问已经成为许多开发人员的首选。在接下来的部分中，我们将看到这种强大的语言如何被IDE轻松支持。
- en: C/C++ support
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/C++支持
- en: As we have seen so far, there are pros and cons to all programming languages.
    C and C++ probably take a little more discipline to master, but this is often
    more than made up for by the low-level control the language provides us with.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到所有编程语言都有其利弊。C和C++可能需要更多的纪律来掌握，但这往往会被语言提供的低级控制所弥补。
- en: When it comes to Android Studio, a slightly different subset of development
    tools is required. This includes the **Native Development Kit** (**NDK**) and
    the **Java Native Interface** (**JNI**), along with other ways of debugging and
    building. As with most processes in Android Studio, setting up these tools is
    quite straightforward.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Android Studio时，需要一组略有不同的开发工具。这包括**本地开发工具包**（**NDK**）和**Java本机接口**（**JNI**），以及其他调试和构建方式。与Android
    Studio中的大多数流程一样，设置这些工具非常简单。
- en: The NDK
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NDK
- en: As mentioned in the preceding section, native programming requires a slightly
    different set of tools from those we have been using up until now. As one might
    expect, everything we need can be found in the SDK Manager.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，本地编程需要与我们到目前为止使用的略有不同的一套工具。正如人们所期望的那样，我们需要的一切都可以在SDK Manager中找到。
- en: 'It is most likely that you will need to install the components highlighted
    in the following screenshot; you will need at least NDK, CMake, and LLDB:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能您需要安装以下截图中突出显示的组件；您至少需要NDK、CMake和LLDB：
- en: '![](img/d0c0b7cd-f80b-4186-b30d-5d5cc1f16719.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0c0b7cd-f80b-4186-b30d-5d5cc1f16719.png)'
- en: Native development components
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本地开发组件
- en: 'CMake: This a multiplatform test and build tool works alongside Gradle. For
    comprehensive documentation, visit [cmake.org](https://cmake.org/).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CMake：这是一个多平台测试和构建工具，与Gradle一起工作。有关全面的文档，请访问[cmake.org](https://cmake.org/)。
- en: 'LLDB: This is a powerful, open source debugging tool designed specifically
    to work with multithreaded applications. Its detailed usage is beyond the scope
    of this book, but interested users can visit [lldb.llvm.org](http://lldb.llvm.org/).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLDB：这是一个功能强大的开源调试工具，专门设计用于处理多线程应用程序。其详细用法超出了本书的范围，但感兴趣的用户可以访问[lldb.llvm.org](http://lldb.llvm.org/)。
- en: With the correct software installed, native coding is incorporated into Android
    Studio projects very smoothly, alongside our Java/Kotlin classes and files. As
    with Kotlin support, all that is needed is to check the appropriate box during
    setup.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了正确的软件后，本地编码可以非常顺利地整合到Android Studio项目中，与我们的Java/Kotlin类和文件一起。与Kotlin支持一样，只需在设置过程中勾选适当的框即可。
- en: 'Once this option is selected, you will be given the opportunity to configure
    C++ support, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项后，您将有机会配置C++支持，如下所示：
- en: '![](img/4f4bb14b-8e7f-4a61-baca-37ade8605f52.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f4bb14b-8e7f-4a61-baca-37ade8605f52.png)'
- en: The C++ support customization dialog
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: C++支持自定义对话框
- en: 'Selecting Toolchain Default as Standard is your best option if you are working
    with CMake, and both Exceptions Support and Runtime Type Information Support are
    probably worth checking on most occasions. Their inclusion can be most clearly
    seen by examining the module-level `build.gradle` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用CMake，选择标准作为默认的工具链是最佳选择，大多数情况下，异常支持和运行时类型信息支持也值得检查。它们的包含可以通过检查模块级`build.gradle`文件来最清楚地看到：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As is often the case, one of the best ways to get a good look under the hood
    without having to get our hands too dirty is with the ready-made Android samples.
    There are not a huge number of these, but they are all good, and there is a growing
    community project on GitHub at [github.com/googlesamples/android-ndk](https://github.com/googlesamples/android-ndk).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，要在不用弄脏手的情况下深入了解内部情况的最佳方法之一就是使用现成的Android示例。这些示例并不多，但都很好，而且在GitHub上有一个不断增长的社区项目，网址是[github.com/googlesamples/android-ndk](https://github.com/googlesamples/android-ndk)。
- en: What all these samples show is which code structures are added and where; like
    the project structures we've encountered before, the actual file structure is
    not reflected by the project file explorer, which organizes files according to
    their type, not location.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些示例都显示了添加的代码结构以及位置；与我们之前遇到的项目结构一样，实际的文件结构不会反映在项目文件资源管理器中，该资源管理器根据文件类型而不是位置来组织文件。
- en: The obvious additions are the `main/cpp` directory, containing source code,
    and the external build files used by CMake.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 明显的添加是`main/cpp`目录，其中包含源代码，以及CMake使用的外部构建文件。
- en: '![](img/8e2f1e49-266e-490d-89e0-fc3c9abe4844.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e2f1e49-266e-490d-89e0-fc3c9abe4844.png)'
- en: Native code structures
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本地代码结构
- en: C++ is not everyone's cup of tea, and going into greater detail is beyond the
    scope of this book. From an Android Studio point of view, those who want to take
    further advantage of the NDK will find that the way that CMake seamlessly integrates
    with Gradle makes testing and building apps calling on native libraries a fantastic
    time-saver.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了一个套件，系统镜像可以在[developer.android.com/things/preview/download.html](http://developer.android.com/things/preview/download.html)和你的Things开发者控制台上找到[partner.android.com/things/console/](http://partner.android.com/things/console/)。
- en: One of the beauties of the Android OS, for users, manufacturers, and developers
    alike, is the enormous variety of devices it can, and does, run on. At first,
    this phenomenon appeared on our wrist watches, television sets, and in our cars.
    More recently, the development of the IoT has led to the need for sophisticated
    operating systems in any number of electronic devices. This has led Google to
    develop Android Things.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Android Things
- en: Android Things
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Things
- en: The IoT has already made an impact on the consumer with the introduction of
    smart household appliances, such as kettles and washing machines. In addition
    to this, many municipal authorities uses the technology to manage things such
    as traffic and utility usage.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，绝对任何设备都可以构成一个Thing。一个设备甚至不需要有屏幕或任何按钮，只要有IP地址并且能够与其他设备通信。甚至可以获得一个带有IP地址的牙刷，尽管我对此的好处感到遗憾。
- en: In reality, absolutely any device could constitute a Thing. A device does not
    even need to have a screen or any buttons, provided it has an IP address and can
    communicate with other devices. One can even get a toothbrush with an IP address,
    although the advantages of that sadly escape me.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派3
- en: From a developer's perspective, the IoT is incredibly exciting, and the inclusion
    of APIs in the SDK opens up almost unlimited new worlds. Naturally, these APIs
    have been sewn neatly into Android Studio, making Android Thing development as
    simple and as much fun as any other branch of Android app creation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过一点专业知识和焊接铁来创建自己的开发板，但是像英特尔Edison和树莓派这样的低价位开发板，以及来自Android的免费系统镜像，使这个过程变得耗时。如果你有一个想法，并且想要快速测试并将其开发成一个成品项目，最好的方法是使用一个经过批准的开发套件，比如树莓派3，如下图所示：
- en: Development kits
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发套件
- en: Perhaps the most significant differences between Android Things and other forms
    of Android development is the hardware. It is tempting to think that an expertise
    in embedded circuitry is needed, and although a little knowledge in this area
    is useful, it is by no means necessary, as Google works with **System on a Chip**
    (**SoC**) manufacturers, such as Intel, NXP, and Raspberry Pi, to produce developer
    kits that allow us to quickly produce and test prototypes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，Android Studio旨在尽可能地帮助我们，当然，有一个支持库、系统镜像和一个不断增长的工作样本集合来帮助我们。不幸的是，没有简单地模拟Android
    Things的方法，尽管一些功能可以在一些移动AVD上模拟，但仍需要一定形式的物理开发套件。
- en: As always, Android Studio has been designed to assist us in as many ways as
    possible, and of course, there are a support library, system images, and a growing
    collection of working samples to help us on our way. Unfortunately, there is no
    way to simply emulate Android Things, and although some functions can be emulated
    on some mobile AVDs, some form of physical development kit is required.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: C++并不是每个人的菜，深入讨论超出了本书的范围。从Android Studio的角度来看，想要更充分利用NDK的人会发现，CMake与Gradle的无缝集成使得调用本地库进行测试和构建应用程序变得非常方便。
- en: 'It is perfectly possible to create one''s own development board with a little
    expertise and a soldering iron, but the low prices of boards, such as the Intel
    Edison and the Raspberry Pi, along with free system images from Android make this
    a time-consuming process. If what you have is an idea and you want to quickly
    test and develop it into a finished project, the way to go is with an approved
    development kit, such as the Raspberry Pi 3, as shown in the following image:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户、制造商和开发人员来说，Android操作系统的美妙之一是它可以运行在各种设备上。起初，这种现象出现在我们的手表、电视机和汽车上。最近，物联网的发展导致需要在许多电子设备上使用复杂的操作系统。这促使谷歌开发了Android
    Things。
- en: '![](img/2a3d74ca-94d7-4c9c-a60d-2cfec1d7f6b1.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: 物联网已经通过引入智能家用电器（如水壶和洗衣机）对消费者产生了影响。除此之外，许多市政当局使用这项技术来管理交通和公用事业的使用。
- en: Raspberry Pi 3
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Android Things和其他形式的Android开发之间最显著的区别可能是硬件。人们很容易认为需要嵌入式电路方面的专业知识，尽管在这个领域有一点知识是有用的，但绝对不是必需的，因为谷歌与英特尔、NXP和树莓派等SoC制造商合作，生产开发套件，让我们能够快速制作和测试原型。
- en: Information about which single-board computers are available for Things can
    be found at [developer.android.com/things/hardware/developer-kits.html](http://developer.android.com/things/hardware/developer-kits.html). There
    are also peripheral kits available for each of the boards, and these can be found
    on the same page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可用于Things的单板计算机的信息可以在[developer.android.com/things/hardware/developer-kits.html](http://developer.android.com/things/hardware/developer-kits.html)找到。每个板还有外围套件可用，并且可以在同一页上找到。
- en: Once you have chosen a kit, system images can be found at [developer.android.com/things/preview/download.html ](http://developer.android.com/things/preview/download.html)and
    also on your Things developer console at [partner.android.com/things/console/](http://partner.android.com/things/console/).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，物联网非常令人兴奋，SDK中的API的加入打开了几乎无限的新世界。当然，这些API已经整合到了Android Studio中，使得Android
    Thing的开发像其他Android应用程序开发一样简单和有趣。
- en: Once you have your kit and peripherals, you are ready to develop your first
    Things application, the basics of which are outlined in the next section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了套件和外围设备，你就可以开始开发你的第一个Things应用程序，其基础知识在下一节中概述。
- en: Creating a Things project
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Things项目
- en: 'The APIs used by Android Things are not included in the standard SDK, and so
    a support library is required. At the very least, you will need the following
    dependency:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Android Things 使用的 API 不包含在标准 SDK 中，因此需要支持库。至少，你需要以下依赖项：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Along with this entry in your manifest:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在清单中加入以下条目：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Most Things projects will need more than this, depending on which peripherals
    are used and whether the project will be tested using Firebase. Taking a look
    at the provided samples is a good way to see what dependencies are needed; the
    following snippet is taken from the Things Doorbell sample:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Things 项目将需要更多的东西，这取决于使用了哪些外围设备以及项目是否将使用 Firebase 进行测试。查看提供的示例是了解需要哪些依赖项的好方法；以下片段取自
    Things 门铃示例：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next major difference in setting up an Android Things project can be seen
    in the manifest file, and adding the highlighted `<intent-filter>` in the following
    code will enable the project to run successfully when testing and debugging:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 Android Things 项目时，下一个主要的区别可以在清单文件中看到，添加以下代码中突出显示的 `<intent-filter>` 将使项目在测试和调试时成功运行：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These are really the only differences when it comes to setting up an Android
    Things project. The other differences will be based more around which peripherals
    and sensors are being used. As is so often the case, one of the best ways to explore
    Things further is through the provided samples. Not many samples are available,
    but the number is growing, and they have all been written to assist our learning.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实际上是设置 Android Things 项目时唯一的区别。其他的区别将更多地基于使用哪些外围设备和传感器。像往常一样，更深入地探索 Things
    的最佳方式之一是通过提供的示例。虽然可用的示例不多，但数量正在增加，并且它们都是为了帮助我们学习而编写的。
- en: Developing for Android Things can appear daunting for many developers, but the
    way that Android Studio facilitates this through its system images, support libraries,
    and code samples means that any developer with a great idea can cheaply and quickly
    develop, test, and produce such products.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Android Things 开发可能对许多开发者来说似乎令人生畏，但 Android Studio 通过其系统镜像、支持库和代码示例的方式使得任何有好点子的开发者都可以廉价快速地开发、测试和生产这样的产品。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we explored some of the more exotic ways in which Android
    Studio can assist the developer. Google's immense influence in the digital world
    has provided alternative technologies such as the Kotlin language and encouraged
    manufacturers to develop technologies that appeal to Android developers in a way
    that makes cutting-edge technology available to anyone with skills and ideas.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了一些 Android Studio 可以帮助开发者的更加奇特的方式。谷歌在数字世界中的巨大影响力提供了替代技术，比如 Kotlin
    语言，并鼓励制造商开发吸引 Android 开发者的技术，使尖端技术可以被具备技能和想法的任何人使用。
- en: Android Studio is not alone in offering the opportunity to code in different
    languages or for different form factors, but Android Studio does make it simpler
    and easier for developers to learn new skills.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 不是唯一提供使用不同语言或不同形态因素编码的机会的软件，但 Android Studio 确实使开发者学习新技能变得更简单更容易。
- en: 'In the next chapter, we will take a look at one of the final development stages;
    testing. This will give us a great chance to explore one of Android Studio''s
    most innovative and useful tools: the device monitor and profiler.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下最后的开发阶段之一；测试。这将给我们一个很好的机会来探索 Android Studio 最创新和有用的工具之一：设备监视器和分析器。
