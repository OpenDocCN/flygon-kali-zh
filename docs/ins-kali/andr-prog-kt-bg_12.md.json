["```kt\nbutton.text = \"WOO HOO!\"\n```", "```kt\ninterface SomeInterface { \n\n   val someProperty: String \n   // Perhaps more properties\n\n   fun someFunction() \n   // Perhaps more functions\n   // With or without parameters\n   // and return types\n}\n```", "```kt\nclass SomeClass() : SomeInterface{ \n\n   // Overriding any properties\n   // is not optional\n   // It is an obligation for a class\n   // that uses the interface\n   override val someProperty: String = \"Hello\" \n\n   override fun someFunction() { \n      // This implementation is not optional\n      // It is an obligation for a class\n      // that uses the interface\n   } \n}\n```", "```kt\nclass MainActivity : AppCompatActivity(){\n```", "```kt\nclass MainActivity : AppCompatActivity,\n   View.OnClickListener{\n```", "```kt\nimport android.view.View\n```", "```kt\nclass MainActivity : AppCompatActivity(), View.OnClickListener {\n\n // An Int property to hold a value\n private var value = 0\n\n```", "```kt\n// Listen for all the button clicks\nbtnAdd.setOnClickListener(this)\nbtnTake.setOnClickListener(this)\ntxtValue.setOnClickListener(this)\nbtnGrow.setOnClickListener(this)\nbtnShrink.setOnClickListener(this)\nbtnReset.setOnClickListener(this)\nbtnHide.setOnClickListener(this)\n```", "```kt\nimport kotlinx.android.synthetic.main.activity_main.* \n```", "```kt\noverride fun onClick(v: View) {\n // A local variable to use later\n val size: Float\n\n when (v.id) {\n\n }\n}\n```", "```kt\nR.id.btnAdd -> {\n   value++\n   txtValue.text = \"$value\"\n}\n\nR.id.btnTake -> {\n   value--\n   txtValue.text = \"$value\"\n}\n\nR.id.btnReset -> {\n   value = 0\n   txtValue.text = \"$value\"\n}\n\nR.id.btnGrow -> {\n   size = txtValue.textScaleX\n   txtValue.textScaleX = size + 1\n}\n\nR.id.btnShrink -> {\n   size = txtValue.textScaleX\n   txtValue.textScaleX = size - 1\n}\n\nR.id.btnHide -> \n   if (txtValue.visibility \n            == View.VISIBLE) {\n   // Currently visible so hide it\n   txtValue.visibility = View.INVISIBLE\n\n   // Change text on the button\n   btnHide.text = \"SHOW\"\n\n} else {\n   // Currently hidden so show it\n   txtValue.visibility = View.VISIBLE\n\n   // Change text on the button\n   btnHide.text = \"HIDE\"\n}\n```", "```kt\noverride fun onClick(v: View) {\n```", "```kt\nwhen (v.id) {\n\n}\n```", "```kt\nR.id.btnAdd -> {\n   value++\n   txtValue.text = \"$value\"\n}\n\nR.id.btnTake -> {\n   value--\n   txtValue.text = \"$value\"\n}\n\nR.id.btnReset -> {\n   value = 0\n   txtValue.text = \"$value\"\n}\n```", "```kt\nR.id.btnGrow -> {\n   size = txtValue.textScaleX\n   txtValue.textScaleX = size + 1\n}\n\nR.id.btnShrink -> {\n   size = txtValue.textScaleX\n   txtValue.textScaleX = size - 1\n}\n```", "```kt\nR.id.btnHide -> \n   if (txtValue.visibility == View.VISIBLE) {\n      // Currently visible so hide it\n      txtValue.visibility = View.INVISIBLE\n\n      // Change text on the button\n      btnHide.text = \"SHOW\"\n\n   } else {\n      // Currently hidden so show it\n      txtValue.visibility = View.VISIBLE\n\n      // Change text on the button\n      btnHide.text = \"HIDE\"\n   }\n```", "```kt\nif (txtValue.visibility == View.VISIBLE)\n```", "```kt\nval someInstance = SomeClass()\nsomeInstance.someMutableProperty = 1// This was declared as var\nsomeInstance.someMutableProperty = 2// So we can change it\n\nsomeInstance.someImutableProperty = 1\n// This was declared with val. ERROR!\n```", "```kt\n// Continued from previous code\n// Three more instances of the same class\nval someInstance2 = SomeClass() // Immutable\nval someInstance3 = SomeClass()// Immutable\nvar someInstance4 = SomeClass() // Mutable\n\n// Let's change these instances around\u2014 or try to\nsomeInstance = someInstance2 \n// Error cannot reassign, someInstance is immutable\n\nsomeInstance2 = someInstance3 // Error someInstance2 is immutable\nsomeInstance3 = someInstance4 // Error someInstance3 is immutable\n\n// However,\nsomeInstance4 = someInstance \n// No problem! someInstance4 and someInstance are now the\n// same object\u2014 refer to the same object on the heap\n\n// Sometime in the future\u2026\nsomeInstance4 = someInstance3 // No problem\n// Sometime in the future\u2026\nsomeInstance4 = someInstance2 // No problem\n// Sometime in the future\u2026\n// I need a new SomeClass instance\n\nsomeInstance4 = SomeClass() // No problem\n// someInstance4 now uniquely refers \n// to a new object on the heap\n```", "```kt\nvar someInstance5: SomeClass\nsomeInstance5.someMutableProperty = 3\n```", "```kt\nvar someInstance5: SomeClass? = null\n```", "```kt\nvar someBoolean = true\n// Program execution or user input might change \n// the value of someBoolean \n\nif(someBoolean) {\n   someInstance5 = someInstance\n}else{\n   someInstance5 = someInstance2\n}\n```", "```kt\nval someInt = someInstance5?.someImmutableProperty\n```", "```kt\nval someBoolean = true\nif(someBoolean) {\n   someInstance5 = someInstance\n}\n\nsomeInstance5!!.someMutableProperty = 3\n```"]