- en: Chapter 1. Introducing Android Forensics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 介绍Android取证
- en: 'Mobile forensics is a branch of digital forensics which is evolving in today''s
    digital era. Android forensics deals with extracting, recovering and analyzing
    the data present on an Android device through various techniques. However, it
    is important to have a clear understanding of the platform and other fundamentals
    before we dive in and find out how to extract data. In this chapter, we will cover
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 移动取证是数字取证的一个分支，在当今数字时代正在发展。Android取证涉及通过各种技术从Android设备中提取、恢复和分析数据。然而，在我们深入了解如何提取数据之前，有必要对平台和其他基本知识有清晰的理解。在本章中，我们将涵盖以下主题：
- en: Mobile forensics
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动取证
- en: Mobile forensics approach
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动取证方法
- en: Android architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android架构
- en: Android security
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android安全
- en: Android hardware components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android硬件组件
- en: Android boot process
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android启动过程
- en: The world today is experiencing technological innovation like never before.
    This growth is almost exponential in the field of mobile devices. Gartner, a technology
    research and advisory firm, in their forecasts published in June 2014, predicted
    that mobile phone shipments are soon set to break 2.4 billion units. This statistic
    alone reflects the unprecedented growth of mobile devices. Mobile phones have
    not only increased in number but also have become more sophisticated in terms
    of functionality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的世界正经历着前所未有的技术创新。在移动设备领域，这种增长几乎是指数级的。技术研究和咨询公司Gartner在2014年6月发布的预测中预测，手机出货量很快将突破24亿部。这一统计数据反映了移动设备的空前增长。手机不仅数量增加，而且在功能上也变得更加复杂。
- en: 'The following screenshot referenced from [http://en.wikipedia.org/wiki/File:Mobile_phone_subscribers_1997-2014_ITU.svg](http://en.wikipedia.org/wiki/File:Mobile_phone_subscribers_1997-2014_ITU.svg)
    shows the increase in graph of mobile phone subscribers per 100 inhabitants from
    1997 to 2014:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图引用自[http://en.wikipedia.org/wiki/File:Mobile_phone_subscribers_1997-2014_ITU.svg](http://en.wikipedia.org/wiki/File:Mobile_phone_subscribers_1997-2014_ITU.svg)显示了1997年至2014年每100名居民的移动电话用户数量的增长图：
- en: '![Introducing Android Forensics](img/image00250.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Android取证](img/image00250.jpeg)'
- en: Mobile phone subscribers per 100 inhabitants from 1997-2014
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1997-2014年每100名居民的移动电话用户
- en: Within mobile phones, smart phones are very much becoming the norm. Improvements
    in the computing power and data storage of these devices enable us to perform
    a wide range of activities. We are increasingly becoming dependent on these mobile
    devices for most of our activities. Apart from performing routine tasks such as
    making calls, sending messages, and so on, these devices also support other activities
    such as sending e-mails, surfing the Internet, recording videos, creating and
    storing documents, identifying locations with **Global Positioning System** (**GPS**)
    services, managing business tasks, and much more. In other words, mobile devices
    are now a repository of sensitive personal information, containing a wealth of
    user data. Quite often, the data sitting on a device is more valuable than the
    device itself. For instance, calls made from a device could be valuable information
    for law enforcement agencies. The fact that mobile forensics played a crucial
    role in solving high-profile cases, such as the 2010 Times Square car bombing
    attempt and the Boston marathon bombings, reaffirms the increasing role of mobile
    forensics in many government and law enforcement cases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动电话中，智能手机已经成为常态。这些设备的计算能力和数据存储的改进使我们能够执行各种活动。我们越来越依赖这些移动设备来进行大部分活动。除了执行常规任务，如打电话，发送短信等，这些设备还支持其他活动，如发送电子邮件，上网，录制视频，创建和存储文件，使用全球定位系统（GPS）服务识别位置，管理业务任务等等。换句话说，移动设备现在是敏感个人信息的存储库，包含大量用户数据。很多时候，设备上的数据比设备本身更有价值。例如，从设备上拨打的电话可能对执法机构来说是有价值的信息。移动取证在解决高调案件中发挥了关键作用，例如2010年时代广场汽车爆炸未遂和波士顿马拉松爆炸案，这再次证实了移动取证在许多政府和执法案件中的日益重要的作用。
- en: Mobile forensics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动取证
- en: Mobile device forensics is a branch of digital forensics which deals with extracting,
    recovering and analyzing digital evidence or data from a mobile device under forensically
    sound conditions. Simply put, it deals with accessing the data stored on devices
    which includes SMS, contacts, call records, photos, videos, documents, application
    files, browsing history and so on, and also recovering data deleted from devices
    using various forensic techniques. It is important that the process of recovering
    or accessing details from a device is forensically sound, if it has to be admitted
    in a court of law and to maintain the integrity of the evidence. If the evidence
    has to be admitted in a court of law, it is important that the original device
    is not tampered with.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备取证是数字取证的一个分支，涉及在取证上的可靠条件下从移动设备中提取、恢复和分析数字证据或数据。简而言之，它涉及访问存储在设备上的数据，包括短信、联系人、通话记录、照片、视频、文件、应用程序文件、浏览历史等，并使用各种取证技术恢复从设备中删除的数据。如果要在法庭上承认证据并保持证据的完整性，从设备中恢复或访问详细信息必须是取证上的可靠。如果证据必须在法庭上承认，原始设备不被篡改是很重要的。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: The term *forensically sound* is often used in the digital forensics community
    to clarify the correct use of a particular forensic technology or methodology.
    Mobile forensics, especially Android forensics, is evolving fast, owing to the
    fact that it has a market share of 84 percent (as per market research firm IDC).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “取证上的可靠性”这个术语经常在数字取证社区中使用，以澄清特定取证技术或方法的正确使用。移动取证，尤其是Android取证，正在快速发展，因为它在市场研究公司IDC的市场份额达到了84%。
- en: As explained by Eoghan Casey in his book *Digital Forensics and Investigation*,
    forensic soundness is not just about keeping original evidence unaltered. Even
    the routine task of acquiring data from a hard drive using a hardware write-blocker
    may cause alterations (for example, making a hidden area of the hard drive accessible)
    on the drive. One of the keys to forensic soundness is documentation. Documenting
    how the device is handled from the beginning is very important. Hence, an investigation
    can be considered forensically sound if the acquisition process preserves the
    original data and its authenticity and integrity can be validated. Evidence integrity
    checks ensure that the evidence has not been tampered with from the time it was
    collected. Integrity checks are done by comparing the digital fingerprint of the
    evidence taken at the time of collection with the digital fingerprint of the evidence
    in current state.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Eoghan Casey在他的书《数字取证与调查》中所解释的那样，取证的可靠性不仅仅是保持原始证据不变。甚至使用硬件写保护器从硬盘获取数据的例行任务也可能会导致改变（例如，使硬盘的隐藏区域可访问）。取证的可靠性的关键之一是文档记录。记录设备从一开始的处理方式非常重要。因此，如果获取过程保留了原始数据并且其真实性和完整性可以得到验证，那么调查可以被认为是取证上可靠的。证据完整性检查确保证据在收集时没有被篡改。完整性检查是通过比较收集时证据的数字指纹与当前状态下证据的数字指纹来进行的。
- en: 'There is a growing need for mobile forensics due to several reasons. Some of
    the prominent reasons are:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于几个原因，移动取证的需求正在增长。一些突出的原因包括：
- en: Use of mobile phones to store personal information
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用手机存储个人信息
- en: Increased use of mobile phones to perform online activity
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加使用手机进行在线活动
- en: Use of mobile phones in several crimes
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机在多起犯罪中的使用
- en: Mobile forensics on a particular device is primarily dependent on the underlying
    operating systems. Thus we have different fields such as Android forensics, iOS
    forensics, Blackberry forensics, and so on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 特定设备上的移动取证主要取决于底层操作系统。因此，我们有不同的领域，如Android取证、iOS取证、Blackberry取证等。
- en: The mobile forensics approach
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动取证的方法
- en: 'Once the data is extracted from a device, different methods of analysis are
    used based on the underlying case. As each investigation is distinct, it is not
    possible to have a single definitive procedure for all cases. However, the overall
    process can be broken into five phases as shown in the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从设备中提取数据，根据底层案例使用不同的分析方法。由于每个调查都是独特的，不可能为所有案例制定一个单一的明确程序。然而，整个过程可以分为以下图表中显示的五个阶段：
- en: '![The mobile forensics approach](img/image00251.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![移动取证的方法](img/image00251.jpeg)'
- en: Phases in mobile forensics
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 移动取证的阶段
- en: 'The following section discusses each phase in detail:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分详细讨论了每个阶段：
- en: Investigation Preparation
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查准备
- en: This phase begins when a request for examination is received. It involves preparing
    all of the paperwork and forms required to document the chain of custody, ownership
    information, the device model, its purpose, the information that the requestor
    is seeking, and so on. The chain of custody refers to the chronological documentation
    or paper trail, showing the seizure, custody, control, transfer, analysis, and
    disposition of physical or electronic evidence. From the details submitted by
    the requestor, it's important to have a clear understanding of the objective for
    each examination.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当收到检查请求时，这个阶段开始。它涉及准备所有需要记录保管链、所有权信息、设备型号、用途、请求者寻求的信息等的文件和表格。保管链是指按时间顺序记录或纸质追踪，显示物理或电子证据的扣押、保管、控制、转移、分析和处置。根据请求者提交的细节，对每次检查的目标有清晰的理解是很重要的。
- en: Seizure and Isolation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扣押和隔离
- en: Handling the device during seizure is one of the important steps while performing
    forensic analysis. The evidence is usually transported using anti-static bags
    which are designed to protect electronic components against damages produced by
    static electricity. As soon as the device is seized, care should be taken to make
    sure that our actions don't result in any data modification on the device. At
    the same time, any opportunity that can aid the investigation should also not
    be missed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行取证分析时，处理设备的方式是重要的一步。通常使用防静电袋来运输证据，这些袋子设计用来保护电子元件免受静电产生的损坏。一旦设备被扣押，就应该注意确保我们的行动不会导致设备上的任何数据修改。同时，也不应错过任何可以帮助调查的机会。
- en: 'Following are some of the points that need to be considered while handling
    an Android device during this phase:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理Android设备时需要考虑的一些要点如下：
- en: With increasing user awareness on security and privacy, most of the devices
    now have screen lock enabled. During the time of seizure, if there is a chance
    to do so, disable the passcode. Some devices do not ask the user to re-enter the
    passcode while disabling the lock screen option.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着用户对安全和隐私意识的增强，大多数设备现在都启用了屏幕锁定。在扣押时，如果有机会这样做，禁用密码。有些设备在禁用锁屏选项时不要求用户重新输入密码。
- en: 'If the device is unlocked, try to change the settings of the device to allow
    greater access to the device. Some of the settings that can be considered to achieve
    this are as follows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设备已解锁，尝试更改设备的设置以允许更大的访问权限。可以考虑以下设置来实现这一点：
- en: '**Enable USB debugging**: Enabling this option gives greater access to the
    device through **Android debug bridge** (**adb**) connection. We are going to
    cover adb connection in detail in [Chapter 2](part0019.xhtml "Chapter 2. Setting
    Up an Android Forensic Environment"), *Setting Up Android Forensic Environment*.
    This will greatly aid the forensic investigator during the data extraction process.
    In Android devices, this option is usually found under **Settings** | **Developer
    options**, as shown in the following screenshot. In later Android versions starting
    from 4.2, the developer options are hidden by default. To enable them, navigate
    to **Settings** | **About Phone** and tap on **Build number** 7 times.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用USB调试**：启用此选项通过**Android调试桥**（**adb**）连接为设备提供更大的访问权限。我们将在[第2章](part0019.xhtml
    "第2章。设置Android取证环境")*设置Android取证环境*中详细介绍adb连接。这将极大地帮助取证调查员在数据提取过程中。在Android设备中，此选项通常位于**设置**
    | **开发者选项**下，如下面的截图所示。从4.2开始的较新的Android版本中，开发者选项默认是隐藏的。要启用它们，转到**设置** | **关于手机**，然后点击**版本号**7次。'
- en: '**Enable stay awake setting**: Enabling this option and charging the device
    will make the device stay awake which means that, it doesn''t get locked. In Android
    devices, this option is usually found under **Settings** | **Developer options**,
    as shown in the following screenshot:![Seizure and Isolation](img/image00252.jpeg)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用保持唤醒设置**：启用此选项并充电将使设备保持唤醒，这意味着它不会被锁定。在Android设备中，此选项通常位于**设置** | **开发者选项**下，如下面的截图所示：![扣押和隔离](img/image00252.jpeg)'
- en: Stay awake and USB debugging options
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 保持唤醒和USB调试选项
- en: '**Increase Screen timeout**: This is the time for which the device will be
    active once it is unlocked. Depending on the device model, this time can be set
    up to 30 minutes. In most devices, it can be accessed under **Settings** | **Display**
    | **Screen timeout**, as shown in the following screenshot:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加屏幕超时**：这是设备解锁后保持活动的时间。根据设备型号，这个时间可以设置为最长30分钟。在大多数设备中，它可以在**设置** | **显示**
    | **屏幕超时**下找到，如下面的截图所示：'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the location to access this item changes across different versions
    and models of Android phones.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，访问此项目的位置在不同版本和型号的Android手机上会有所变化。
- en: '![Seizure and Isolation](img/image00253.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![扣押和隔离](img/image00253.jpeg)'
- en: Screen timeout option on an Android device
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备上的屏幕超时选项
- en: In mobile forensics, it is of critical importance to protect the seized device
    so that our interaction with the evidence (or for that matter, an attacker's attempt
    to remotely interact with the device) does not change the evidence. In computer
    forensics, we have software and hardware write blockers that can perform this
    function. But in mobile forensics, since we need to interact with the device to
    pull the data, these write blockers are not of any use. Another important aspect
    is that we also need to prevent the device from interacting with wireless radio
    networks. As mentioned earlier, there is a high probability that an attacker can
    issue remote wipe commands to delete all data, including e-mails, applications,
    photos, contacts, and other files on the device.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动取证中，保护扣押的设备非常重要，以便我们与证据的互动（或攻击者试图远程与设备互动）不会改变证据。在计算机取证中，我们有软件和硬件写入阻断器可以执行此功能。但是在移动取证中，由于我们需要与设备互动以提取数据，这些写入阻断器就没有任何用处。另一个重要方面是我们还需要防止设备与无线电网络互动。如前所述，攻击者很有可能发出远程擦除命令，删除设备上的所有数据，包括电子邮件、应用程序、照片、联系人和其他文件。
- en: The **Android Device Manager** (**ADM**) and several other third-party apps
    allow the phone to be remotely wiped or locked. This can be done by signing into
    the Google account that is configured on the mobile device. Using this software,
    an attacker can also locate the device, which could pose a security risk. For
    all these reasons, isolating the device from all communication sources is very
    important.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android设备管理器**（**ADM**）和其他几个第三方应用程序允许远程擦除或锁定手机。这可以通过登录配置在移动设备上的Google帐户来完成。使用这个软件，攻击者也可以定位设备，这可能构成安全风险。出于所有这些原因，将设备与所有通信来源隔离开非常重要。'
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Have you thought about remote wipe options that do not require internet access?
    **Mobile Device Management** (**MDM**) software provides a remote wipe feature
    just by sending an SMS. Isolating the device from all communication options is
    crucial.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否考虑过不需要互联网访问的远程擦除选项？**移动设备管理**（**MDM**）软件通过发送短信提供了远程擦除功能。将设备与所有通信选项隔离开非常重要。
- en: To isolate the device from a network, we can put the device in **Airplane mode**
    if there is access to the device. Airplane mode disables a device's wireless transmission
    functions, such as cellular radio, Wi-Fi, and Bluetooth. However, this may not
    always be possible because most of the devices are screen-locked. Also, as Wi-Fi
    is now available in airplanes, some devices now allow Wi-Fi access in Airplane
    mode. Hence, an alternate solution would be to use a Faraday bag or RF isolation
    box, as both effectively block signals to and from the mobile phone. But, one
    concern with these isolation methods however, is that once they're employed, it
    is difficult to work with the phone because you cannot see through them to use
    the touch screen or keypad. For this reason, Faraday tents and rooms exist, as
    shown in the following screenshot (taken from [http://www.technicalprotection.co.uk/](http://www.technicalprotection.co.uk/)),
    but are very expensive.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将设备与网络隔离，如果可以访问设备，我们可以将设备置于**飞行模式**。飞行模式会禁用设备的无线传输功能，如蜂窝无线电、Wi-Fi和蓝牙。然而，这并不总是可能，因为大多数设备都被锁定屏幕。另外，由于现在飞机上有Wi-Fi，一些设备现在允许在飞行模式下使用Wi-Fi。因此，另一个解决方案是使用法拉第袋或射频隔离盒，因为两者都可以有效地阻断手机的信号。但是，这些隔离方法的一个问题是一旦它们被使用，就很难使用手机，因为你无法透过它们来使用触摸屏或键盘。因此，法拉第帐篷和房间存在，如下面的截图所示（摘自[http://www.technicalprotection.co.uk/](http://www.technicalprotection.co.uk/)），但价格昂贵。
- en: '![Seizure and Isolation](img/image00254.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![扣押和隔离](img/image00254.jpeg)'
- en: Pyramid-shaped Faraday tent
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 金字塔形法拉第帐篷
- en: Even after taking all these precautions, certain automatic functions, such as
    alarms can trigger. If such a situation is encountered, it must be properly documented.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使采取了所有这些预防措施，某些自动功能，如闹钟可能会触发。如果遇到这种情况，必须妥善记录。
- en: Acquisition
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取
- en: 'The acquisition phase refers to the extraction of data from the device. Due
    to the inherent security features of mobile devices, extracting data is not always
    straight forward. Depending on the operating system, make, and model of the device,
    the extraction method is decided. The following types of acquisition methods can
    be used to extract data from a device:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 获取阶段指的是从设备中提取数据。由于移动设备固有的安全功能，提取数据并不总是直截了当的。根据设备的操作系统、制造商和型号，决定提取方法。以下类型的获取方法可用于从设备中提取数据：
- en: '**Manual acquisition**: This is the simplest of all acquisition methods. The
    examiner uses the user interface of the phone to browse and investigate. No special
    tools or techniques are required here, but the limitation is that only those files
    and data that are visible through a normal user interface can be extracted. Data
    extracted through other methods can also be verified using this.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动获取**：这是所有获取方法中最简单的。检查员使用手机的用户界面进行浏览和调查。这里不需要特殊工具或技术，但限制在于只能提取通过正常用户界面可见的文件和数据。通过其他方法提取的数据也可以使用这种方法进行验证。'
- en: '**Logical acquisition**: This is also called logical extraction. This generally
    refers to extracting the files that are present on a logical store such as a filesystem
    partition. This involves obtaining data types, such as text messages, call history,
    pictures and so on, from a phone. The logical extraction technique works by using
    the original equipment manufacturer''s APIs for synchronizing the phone''s contents
    with a computer. This technique usually involves extracting the following evidence:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑获取**：这也被称为逻辑提取。这通常指的是从逻辑存储器（如文件系统分区）中提取文件。这包括从手机中获取文本消息、通话记录、图片等数据类型。逻辑提取技术是通过使用原始设备制造商的API来将手机内容与计算机同步。这种技术通常涉及提取以下证据：'
- en: Call Logs
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通话记录
- en: SMS
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短信
- en: MMS
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MMS
- en: Browser history
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器历史记录
- en: People
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人员
- en: Contact methods
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人方式
- en: Contacts extensions
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人扩展
- en: Contacts groups
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人分组
- en: Contacts phones
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人电话
- en: Contacts setting
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人设置
- en: External image media (metadata)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部图像媒体（元数据）
- en: External image thumbnail media (metadata)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部图像缩略图媒体（元数据）
- en: External media, audio, and misc. (metadata)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部媒体、音频和其他（元数据）
- en: External videos (meta data)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部视频（元数据）
- en: MMSParts (includes full images sent via MMS)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MMSParts（包括通过MMS发送的完整图像）
- en: Location details (GPS data)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置详细信息（GPS数据）
- en: Internet activity
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网活动
- en: Organizations
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织
- en: List of all applications installed, along with their version
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装的所有应用程序列表，以及它们的版本
- en: Social networking apps data such as WhatsApp, Skype, Facebook, and so on.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交网络应用程序的数据，如WhatsApp、Skype、Facebook等。
- en: '**Filesystem acquisition**: This is a logical procedure and generally refers
    to the extraction of a full file system from a mobile device. File system acquisition
    can sometimes help in recovering deleted contents (stored in SQLite files) that
    are deleted from the device.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件系统获取**：这是一个逻辑过程，通常指的是从移动设备中提取完整的文件系统。文件系统获取有时可以帮助恢复从设备中删除的内容（存储在SQLite文件中）。'
- en: '**Physical acquisition**: This involves making a bit-by-bit copy of the entire
    flash memory. The data extracted using this method is usually in the form of raw
    data (as a hexadecimal dump), which can then be further parsed to obtain file
    system information or human readable data. Since all investigations are performed
    on this image, this process also ensures that original evidence is not altered.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理获取**：这涉及制作整个闪存的逐位拷贝。使用这种方法提取的数据通常是原始数据（十六进制转储），然后可以进一步解析以获取文件系统信息或人类可读数据。由于所有调查都是在这个镜像上进行的，这个过程还确保原始证据没有被改变。'
- en: Examination and Analysis
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查和分析
- en: In this phase, different software tools are used to extract the data from the
    memory image. In addition to these tools, an investigator would also need the
    help of a hex editor, as tools do not always extract all the data. There is no
    single tool that can be used in all cases. Hence, examination and analysis requires
    a sound knowledge of various file systems, file headers, and so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，使用不同的软件工具从内存镜像中提取数据。除了这些工具，调查员还需要使用十六进制编辑器的帮助，因为工具并不总是能提取所有数据。没有单一的工具可以在所有情况下使用。因此，检查和分析需要对各种文件系统、文件头等有扎实的知识。
- en: Reporting
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告
- en: 'Documentation of the examination should be done throughout the process, noting
    down what was done in each phase. The following points might be documented by
    an examiner:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个过程中应该记录检查的文档，记录每个阶段所做的工作。检查员可能记录以下几点：
- en: Date and time the examination started
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查开始的日期和时间
- en: Physical condition of the phone
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机的物理状态
- en: The status of the phone when received (ON/OFF)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收到手机时的状态（开/关）
- en: Make, model, and operating system of the phone
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机的制造商、型号和操作系统
- en: Pictures of the phone and individual components
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手机和各个组件的图片
- en: Tools used during the investigation
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查中使用的工具
- en: Data documented during the examination
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查期间记录的数据
- en: The data extracted from the mobile device should be clearly presented to the
    recipient so that it can be imported into other software for further analysis.
    In the case of civil or criminal cases, wherever possible, pictures of data, as
    it existed on the cellular phone, should be collected, as they can be visually
    compelling to a jury.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从移动设备提取的数据应清晰地呈现给接收方，以便可以将其导入其他软件进行进一步分析。在民事或刑事案件中，尽可能收集数据的图片，因为它们对陪审团有视觉上的吸引力。
- en: Challenges in mobile forensics
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动取证中的挑战
- en: 'With the increased usage of Android devices and the wider array of communication
    platforms that they support, demand for forensic examination has automatically
    grown. While working with mobile devices, forensic analysts face a number of challenges.
    The following points shed light on some of the mobile forensics challenges faced
    today:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Android设备的使用增加以及它们支持的通信平台的广泛，对取证检查的需求自然增长。在处理移动设备时，取证分析师面临着许多挑战。以下几点阐明了当今移动取证所面临的一些挑战：
- en: '**Preventing data alteration on the device**: One of the fundamental rules
    to remember in forensics is to not modify the evidence. In other words, the forensic
    techniques that are applied to a device to extract any information, should not
    alter the data present on the device. But this is not practical with respect to
    mobile forensics because simply switching ON a device might also change certain
    state variables that are present on the device. With mobile devices, background
    processes always run and a sudden transition from one state to another can result
    in the loss or modification of data. Therefore, there is a chance that data may
    be altered either intentionally or unintentionally by the forensic analyst. In
    addition to this, there is a high possibility that an attacker can remotely change
    or delete the content present on the device. As mobile phones use different communication
    channels (cellular, Wi-Fi, Bluetooth, infrared, and so on) the possibility of
    communicating through them should be eliminated. Features such as remote data
    wiping would enable an attacker to remotely wipe the entire device just by sending
    an SMS or by simply pressing a button that sends a wipe request to the Android
    device. Unlike computer forensics, mobile device forensics requires more than
    just isolating the device from the network.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止设备上的数据被更改：取证中要记住的基本规则之一是不要修改证据。换句话说，应用于设备的取证技术不应更改设备上的数据。但是，对于移动取证来说，这是不切实际的，因为简单地打开设备可能也会更改设备上存在的某些状态变量。移动设备上始终运行着后台进程，突然从一种状态转换到另一种状态可能导致数据的丢失或修改。因此，取证分析师有可能故意或无意地更改数据。除此之外，攻击者有可能远程更改或删除设备上的内容。由于手机使用不同的通信渠道（蜂窝、Wi-Fi、蓝牙、红外线等），通过它们进行通信的可能性应该被消除。远程数据擦除等功能会使攻击者能够通过发送短信或简单地按下一个发送擦除请求的按钮来远程擦除整个设备。与计算机取证不同，移动设备取证需要更多的工作，不仅仅是将设备与网络隔离。
- en: '**Wide range of operating systems and device models**: The wide range of mobile
    operating systems available in the market makes the life of a forensic analyst
    more difficult. Although Android is the most dominant operating system in the
    mobile world, there are mobile devices which run on other operating systems, including
    iOS, Blackberry, Windows, and so on, which are often encountered during investigations.
    Also for a given operating system, there are millions of mobile devices available
    that differ in OS versions, hardware, and various other features. For example,
    within the Android operating system, there are around 10 versions, and for each
    version, there are different customizations made by different manufacturers. Based
    on the manufacturer, the approach to acquiring forensic artifacts changes. To
    remain competitive, manufacturers release new models and updates so rapidly that
    it''s hard to keep track of all of them. Sometimes within the same operating system
    the data storage options and file structures also change, making it even more
    difficult. There is no single tool that can work on all the available types of
    mobile operating systems. Therefore, it is crucial for forensic analysts to remain
    updated on all the latest changes and techniques.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统和设备型号的广泛范围：市场上提供的广泛移动操作系统使得取证分析师的工作变得更加困难。尽管Android是移动世界中最主要的操作系统，但在调查中经常会遇到运行其他操作系统的移动设备，包括iOS、Blackberry、Windows等。此外，对于给定的操作系统，有数百万种不同的移动设备，它们在操作系统版本、硬件和其他各种功能上都有所不同。例如，在Android操作系统中，大约有10个版本，而对于每个版本，不同制造商都进行了不同的定制。根据制造商，获取取证证据的方法也会改变。为了保持竞争力，制造商们发布新型号和更新如此迅速，以至于很难跟踪所有这些变化。有时在同一操作系统中，数据存储选项和文件结构也会发生变化，使情况变得更加困难。没有单一工具可以在所有可用类型的移动操作系统上运行。因此，取证分析师必须及时了解所有最新的变化和技术。
- en: '**Inherent security features**: As the concept of "privacy" is increasingly
    gaining importance, mobile manufacturers are moving towards implementing robust
    security controls on devices, which complicates the process of gaining access
    to the data. For example, if the device is passcode protected, the forensic investigator
    has to first find a way to bypass the passcode. Similarly, full disk encryption
    mechanisms that are implemented on some of the latest devices prevent law enforcement
    agencies and forensic analysts from accessing the information on the device. Apple''s
    iPhone encrypts all the data present on the device by default, using hardware
    keys built into the device. It is very difficult for an examiner to break these
    encryption mechanisms using techniques such as brute force.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固有的安全功能：随着“隐私”概念日益重要，移动制造商正朝着在设备上实施强大的安全控制的方向发展，这使得获取数据的过程变得更加复杂。例如，如果设备受到密码保护，取证调查员必须首先找到一种绕过密码的方法。同样，一些最新设备上实施的全盘加密机制阻止执法机构和取证分析师访问设备上的信息。苹果的iPhone默认使用设备内置的硬件密钥对设备上的所有数据进行加密。取证人员很难使用暴力破解等技术来破解这些加密机制。
- en: '**Legal issues**: Mobile devices can be involved in crimes that span across
    the globe and can cross geographical boundaries. In order to tackle these multijurisdictional
    issues, the forensic examiner needs to be aware of the nature of the crime and
    also regional laws.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 法律问题：移动设备可能涉及跨越全球并跨越地理边界的犯罪。为了解决这些跨司法管辖范围的问题，取证人员需要了解犯罪的性质以及地区法律。
- en: The Android architecture
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android架构
- en: Before we proceed with the internals of Android forensics, this section introduces
    you to Android as an operating system and covers various fundamental concepts
    that need to be understood to gain experience in the area of forensics.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续讨论Android取证的内部之前，本部分将向您介绍Android作为操作系统的基本概念，并涵盖需要理解的各种基本概念，以便在取证领域获得经验。
- en: Any operating system (desktop or mobile) takes responsibility for managing the
    resources of the system and provides a way for applications to talk to hardware
    or physical components in order to accomplish certain tasks. The Android operating
    system is no different. It powers mobile phones, manages memory and processes,
    enforces security, takes care of networking issues, and so on. Android is open
    source and most of the code is released under the Apache 2.0 license. Practically,
    this means that mobile phone device manufacturers can access it freely, modify
    it, and use the software according to the requirements of any device. This is
    one of the primary reasons for its popularity.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 任何操作系统（桌面或移动）都负责管理系统资源，并提供一种让应用程序与硬件或物理组件进行通信以完成某些任务的方式。Android操作系统也不例外。它为移动电话提供动力，管理内存和进程，执行安全性，处理网络问题等。Android是开源的，大部分代码都是根据Apache
    2.0许可发布的。实际上，这意味着手机设备制造商可以自由访问它，修改它，并根据任何设备的要求使用该软件。这是其受欢迎的主要原因之一。
- en: 'The Android operating system consists of a stack of layers running on top of
    each other. Android architecture can be best understood by taking a look at what
    these layers are and what they do. The following diagram referenced from [http://elinux.org/images/c/c2/Android-system-architecture.jpg](http://elinux.org/images/c/c2/Android-system-architecture.jpg),
    shows the various layers involved in the Android software stack:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统由一系列层次堆叠而成。通过查看这些层次是什么以及它们的作用，可以更好地理解Android架构。以下图表引用自[http://elinux.org/images/c/c2/Android-system-architecture.jpg](http://elinux.org/images/c/c2/Android-system-architecture.jpg)，显示了Android软件堆栈中涉及的各个层次：
- en: '![The Android architecture](img/image00255.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Android架构](img/image00255.jpeg)'
- en: Android architecture
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Android架构
- en: Android architecture is in the form of a software stack comprising kernel, libraries,
    runtime environment, applications, middleware, and services. Each layer of the
    stack (and also elements within each layer) is integrated in a way that provides
    an optimal execution environment for mobile devices. The following sections focus
    on the different layers of the Android stack, starting at the bottom with the
    Linux kernel.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Android架构以软件堆栈的形式存在，包括内核、库、运行环境、应用程序、中间件和服务。堆栈的每一层（以及每一层内的元素）都以一种集成的方式存在，为移动设备提供了最佳的执行环境。接下来的部分将重点介绍Android堆栈的不同层次，从底层的Linux内核开始。
- en: The Linux kernel
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux内核
- en: Android OS is built on top of the Linux kernel with some architectural changes
    made by Google. Linux was chosen as it is a portable platform that can be compiled
    easily on different hardware. The Linux kernel is positioned at the bottom of
    the software stack and provides a level of abstraction between the device hardware
    and the upper layers. It also acts as an abstraction layer between the software
    and hardware present on the device. To understand this better, consider the case
    of a camera click. What actually happens when you click a photo using the camera
    button on your mobile device? At some point, the hardware instruction, such as
    *pressing a button*, has to be converted to a software instruction such as *to
    take a picture and store it in the gallery*. The kernel contains drivers which
    can facilitate this process. When the camera button click is detected, the instruction
    goes to the corresponding driver in the kernel, which sends the necessary commands
    to the camera hardware, similar to what occurs when a key is pressed on a keyboard.
    In simple terms, the drivers in the kernel control the underlying hardware. As
    shown in the preceding figure, the kernel contains drivers related to Wi-Fi, Bluetooth,
    USB, audio, display, and so on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统是建立在Linux内核之上的，谷歌对其进行了一些架构上的改变。选择Linux是因为它是一个可移植的平台，可以在不同的硬件上轻松编译。Linux内核位于软件堆栈的底部，并在设备硬件和上层之间提供了一定程度的抽象。它还充当了设备上软件和硬件之间的抽象层。为了更好地理解这一点，可以考虑一下使用相机按钮拍照的情况。当您在移动设备上按下相机按钮拍照时，实际上会发生什么？在某个时刻，硬件指令，比如*按下按钮*，必须转换为软件指令，比如*拍照并将其存储在相册中*。内核包含可以促进这一过程的驱动程序。当检测到相机按钮点击时，指令会传递到内核中相应的驱动程序，该驱动程序向相机硬件发送必要的命令，类似于在键盘上按键时发生的情况。简而言之，内核中的驱动程序控制着底层硬件。如前图所示，内核包含与Wi-Fi、蓝牙、USB、音频、显示等相关的驱动程序。
- en: All the core functionalities of Android, such as process management, memory
    management, security, and networking, are managed by Linux kernel. Linux is a
    proven platform when it comes to security and process management. Android has
    taken leverage of the existing Linux open source OS to build a solid foundation
    for its ecosystem. Each version of Android has a different version of the underlying
    Linux kernel. As of September 2014, the current Android version 4.2 is built upon
    Linux kernel 3.4 or newer, but the specific kernel version depends on the actual
    Android device and chipset.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Android的所有核心功能，如进程管理、内存管理、安全性和网络，都由Linux内核管理。在安全性和进程管理方面，Linux是一个经过验证的平台。Android利用现有的Linux开源操作系统构建了其生态系统的坚实基础。每个Android版本都有一个不同版本的底层Linux内核。截至2014年9月，当前的Android版本4.2是建立在Linux内核3.4或更新版本之上的，但具体的内核版本取决于实际的Android设备和芯片组。
- en: Libraries
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库
- en: On top of Linux kernel are Android's native libraries. It is with the help of
    these libraries that the device handles different types of data. For example,
    the media framework library supports the recording and playback of audio, video
    and picture formats. These libraries are written in the C or C++ programming languages
    and are specific to a particular hardware. Surface Manager, Media framework, SQLite,
    WebKit, OpenGL, and so on are some of the most important native libraries.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux内核之上是Android的本地库。借助这些库，设备可以处理不同类型的数据。例如，媒体框架库支持音频、视频和图片格式的录制和播放。这些库是用C或C++编程语言编写的，并且特定于特定的硬件。Surface
    Manager、媒体框架、SQLite、WebKit、OpenGL等都是一些最重要的本地库。
- en: Dalvik virtual machine
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 达尔维克虚拟机
- en: Android applications are programmed using the Java programming language. The
    main reason for choosing Java is because it's a well-known language and has a
    massive developer base. Android wanted to take advantage of this existing developer
    community, rather than coming up with a new language.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序是使用Java编程语言编写的。选择Java的主要原因是因为它是一种众所周知的语言，拥有庞大的开发者基础。Android希望利用这个现有的开发者社区，而不是提出一种新的语言。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This later prompted Oracle to file a case in court against Google claiming that
    its copyrights and patents were violated. But the jury finally declared that Google
    did not infringe on Oracle's patents, and the trial judge ruled that the structure
    of the Java APIs used by Google was not copyrightable.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这后来促使Oracle对Google提起诉讼，声称其侵犯了其版权和专利。但陪审团最终宣布Google没有侵犯Oracle的专利，审判法官裁定Google使用的Java
    API结构不受版权保护。
- en: When a Java program is compiled, we get byte code. A **Java virtual machine**
    (**JVM**) (a virtual machine is an application that acts as an operating system)
    can execute this byte code. In the case of Android, this Java byte code is further
    converted to **Dalvik** byte code by the dex compiler. This Dalvik byte code is
    then fed into **Dalvik virtual machine** (**DVM**) which can read and use the
    code. Thus, the `.class` files from the Java compiler are converted to `.dex`
    files using the dx tool. Dalvik byte code is an optimized byte code suitable for
    low-memory and low-processing environments. Also, note that JVM's byte code consists
    of one or more `.class` files, depending on the number of Java files that are
    present in an application, but Dalvik byte code is composed of only one `.dex`
    file. Each Android application runs its own instance of the DVM. The following
    diagram shows the difference between the program compilation of a Java application
    and an Android application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当Java程序编译时，我们得到字节码。**Java虚拟机**（虚拟机是一个充当操作系统的应用程序）可以执行这个字节码。在Android的情况下，这个Java字节码进一步被dex编译器转换为**达尔维克**字节码。这个达尔维克字节码然后被输入到**达尔维克虚拟机**（**DVM**）中，它可以读取和使用这个代码。因此，Java编译器的`.class`文件使用dx工具转换为`.dex`文件。达尔维克字节码是一种适用于低内存和低处理环境的优化字节码。另外，需要注意的是，JVM的字节码由一个或多个`.class`文件组成，取决于应用程序中存在的Java文件的数量，但达尔维克字节码只由一个`.dex`文件组成。每个Android应用程序都运行自己的DVM实例。以下图表显示了Java应用程序和Android应用程序的程序编译之间的差异。
- en: '![Dalvik virtual machine](img/image00256.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![达尔维克虚拟机](img/image00256.jpeg)'
- en: JVM vs DVM
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: JVM与DVM
- en: Since Android 5.0, Dalvik has been replaced by **Android Run Time** (**ART**)
    as the platform default. The ART was introduced in Android 4.4 on an experimental
    basis. Dalvik uses **just-in-time** (**JIT**) compilation which compiles the byte
    code every time an application is launched. However ART uses **ahead-of-time**
    (**AOT**) compilation by performing it upon the installation of an application.
    This greatly reduces the mobile device's processor usage, as the overall compilation
    during the operation of an application is reduced.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 自Android 5.0以来，Dalvik已被**Android运行时**（**ART**）取代为平台默认。ART在Android 4.4上作为实验性功能引入。Dalvik使用**即时**（**JIT**）编译，每次启动应用程序时都会编译字节码。然而，ART使用**预编译**（**AOT**）编译，在安装应用程序时执行。这大大减少了移动设备的处理器使用率，因为在应用程序运行期间的整体编译减少了。
- en: The application framework
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序框架
- en: 'Android applications are run and managed with the help of an Android application
    framework. It is responsible for performing many crucial functions such as resource
    management, handling calls, and so on. The Android framework includes the following
    key services, referenced from [http://fp.edu.gva.es/av/pluginfile.php/745396/mod_imscp/content/2/1_overview_of_the_android_architecture.html](http://fp.edu.gva.es/av/pluginfile.php/745396/mod_imscp/content/2/1_overview_of_the_android_architecture.html):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序是通过Android应用程序框架运行和管理的。它负责执行许多关键功能，如资源管理、处理呼叫等。Android框架包括以下关键服务，引用自[http://fp.edu.gva.es/av/pluginfile.php/745396/mod_imscp/content/2/1_overview_of_the_android_architecture.html](http://fp.edu.gva.es/av/pluginfile.php/745396/mod_imscp/content/2/1_overview_of_the_android_architecture.html)：
- en: '**Activity manager**: This service controls all aspects of the application
    lifecycle and activity stack.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动管理器**：此服务控制应用程序生命周期和活动堆栈的所有方面。'
- en: '**Content providers**: This service allows applications to publish and share
    data with other applications.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容提供者**：此服务允许应用程序与其他应用程序发布和共享数据。'
- en: '**Resource manager**: This service provides access to non-code embedded resources
    such as strings, color settings, and user interface layouts.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源管理器**：此服务提供对非代码嵌入资源的访问，如字符串、颜色设置和用户界面布局。'
- en: '**Notifications manager**: This service allows applications to display alerts
    and notifications to the user.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知管理器**：此服务允许应用程序向用户显示警报和通知。'
- en: '**View system**: This service provides an extensible set of views used to create
    application user interfaces.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图系统**：此服务提供一组可扩展的视图，用于创建应用程序用户界面。'
- en: '**Package manager**: The system by which applications are able to find out
    information about other applications currently installed on the device.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理器**：应用程序可以通过该系统找到有关设备上当前安装的其他应用程序的信息。'
- en: '**Telephony manager**: This service provides information to the application
    about the telephony services available on the device such as status and subscriber
    information.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话管理器**：此服务向应用程序提供有关设备上可用的电话服务的信息，如状态和订阅者信息。'
- en: '**Location manager**: This service provides access to the location services
    allowing an application to receive updates about location changes.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置管理器**：此服务提供对位置服务的访问，允许应用程序接收有关位置更改的更新。'
- en: The applications layer
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序层
- en: 'The topmost layer in the Android stack consists of applications (called **apps**)
    which are programs that users directly interact with. There are two kinds of apps
    discussed as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Android堆栈中的最顶层是应用程序（称为**应用**），这些是用户直接交互的程序。以下讨论了两种类型的应用程序：
- en: '**System apps**: These are applications that are pre-installed on the phone
    and are shipped along with the phone. Applications such as default browser, e-mail
    client, contacts, and so on, are examples for system apps. These cannot be uninstalled
    or changed by the user as they are read-only on production devices. These are
    usually present mounted in the `/system` directory. Until Android 4.4, all apps
    present under `/system` were treated equally. But from Android 4.4 onward, apps
    installed in `/system/priv-app/` are treated as privileged applications and are
    granted permissions with protection level signatureOrSystem to only privileged
    apps.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应用程序：这些是预装在手机上并随手机一起发货的应用程序。默认浏览器、电子邮件客户端、联系人等应用程序都是系统应用程序的示例。这些应用程序无法被用户卸载或更改，因为它们在生产设备上是只读的。这些通常存在于`/system`目录中。直到Android
    4.4，所有存在于`/system`下的应用程序都被平等对待。但从Android 4.4开始，安装在`/system/priv-app/`中的应用程序被视为特权应用程序，并且只有特权应用程序被授予具有签名或系统保护级别的权限。
- en: '**User-installed apps**: These are the applications that are downloaded and
    installed by the user from various distribution platforms such as Google Play.
    Google Play is the official app store for the Android operating system, where
    users can browse and download the applications. Based on December 2014 statistics
    from AppBrain, there are around 1,418,453 Android apps in the Play Store. These
    apps are presently found in the `/data` directory. More information about how
    security is enforced between them is discussed in the following sections.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户安装的应用程序**：这些是用户从各种分发平台（如Google Play）下载并安装的应用程序。Google Play是Android操作系统的官方应用商店，用户可以浏览和下载应用程序。根据2014年12月AppBrain的统计数据，Play商店中大约有1,418,453个Android应用程序。这些应用程序目前位于`/data`目录中。有关它们之间如何执行安全性的更多信息将在以下部分中讨论。'
- en: Android security
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android安全性
- en: 'Android as a platform has certain features built into its architecture that
    ensure the security of users, applications, and data. Although they help in protecting
    the data, these security features sometimes prevent investigators from gaining
    access to necessary data. Hence, from a forensic perspective, it is first important
    to understand the inherent security features so that a clear idea is established
    about what can or cannot be accessed under normal circumstances. The security
    features and offerings that are incorporated aim to achieve three things:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个平台，Android的架构中内置了某些功能，以确保用户、应用程序和数据的安全性。尽管它们有助于保护数据，但这些安全功能有时会阻止调查人员访问必要的数据。因此，从法医学的角度来看，首先要了解固有的安全功能，以便清楚地了解在正常情况下可以或不可以访问的内容。所包含的安全功能和服务旨在实现三个目标：
- en: To protect user data
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护用户数据
- en: To protect system resources
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护系统资源
- en: To make sure that one application cannot access the data of another application
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保一个应用程序不能访问另一个应用程序的数据
- en: The next sections provide an overview of the key security features in the Android
    operating system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将概述Android操作系统中的关键安全功能。
- en: Security at OS level through Linux kernel
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Linux内核在操作系统级别上的安全性
- en: 'The Android operating system is built on top of the Linux kernel. Over the
    past few years, Linux has evolved into a secure operating system trusted by many
    corporations across the world for its security. Today, most of the mission critical
    systems and servers run on Linux because of its security. By having the Linux
    kernel at the heart of its platform, Android tries to ensure security at the OS
    level. Also, Android has built a lot of specific code into Linux to include certain
    features related to mobile environment. With each Android release the kernel version
    also has changed. The following table shows Android versions and the corresponding
    Linux kernel version:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Android操作系统是建立在Linux内核之上的。在过去的几年里，Linux已经发展成为一个受到许多全球公司信任的安全操作系统。今天，大多数关键任务的系统和服务器都在Linux上运行，因为它的安全性。通过将Linux内核置于其平台的核心位置，Android试图确保在操作系统级别上的安全性。此外，Android还在Linux中构建了许多特定的代码，以包括与移动环境相关的某些功能。随着每个Android版本的发布，内核版本也发生了变化。以下表格显示了Android版本和相应的Linux内核版本：
- en: '| Android Version | Linux Kernel Version |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| Android版本 | Linux内核版本 |'
- en: '| --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1.0 | 2.6.25 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 1.0 | 2.6.25 |'
- en: '| 1.5 | 2.6.27 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 1.5 | 2.6.27 |'
- en: '| 1.6 | 2.6.29 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 1.6 | 2.6.29 |'
- en: '| 2.2 | 2.6.32 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 2.2 | 2.6.32 |'
- en: '| 2.3 | 2.6.35 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 2.3 | 2.6.35 |'
- en: '| 3.0 | 2.6.36 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 3.0 | 2.6.36 |'
- en: '| 4.0 | 3.0.1 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 4.0 | 3.0.1 |'
- en: '| 4.1 | 3.0.31 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 4.1 | 3.0.31 |'
- en: '| 4.2 | 3.4.0 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 4.2 | 3.4.0 |'
- en: '| 4.3 | 3.4.39 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 4.3 | 3.4.39 |'
- en: '| 4.4 | 3.8 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 4.4 | 3.8 |'
- en: '*Linux kernel used in various Android versions*'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*各种Android版本中使用的Linux内核*'
- en: 'The Linux kernel provides Android with the below key security features:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核为Android提供了以下关键安全功能：
- en: A user-based permissions model
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于用户的权限模型
- en: Process isolation
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程隔离
- en: Extensible mechanism for secure IPC
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展的安全IPC机制
- en: Permission model
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权限模型
- en: 'Android implements a permission model for individual apps. Applications must
    declare which permissions (in the manifest file) they require. When the application
    is installed, as shown in the following screenshot, Android will present the list
    to the user so that they can view the list to allow installation or not:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Android为各个应用程序实现了权限模型。应用程序必须声明它们需要哪些权限（在清单文件中）。当应用程序安装时，Android会向用户呈现列表，以便他们可以查看列表以允许或不允许安装：
- en: '![Permission model](img/image00257.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![权限模型](img/image00257.jpeg)'
- en: Sample permission model in Android
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的示例权限模型
- en: Unlike a desktop environment, this provides an opportunity for the user to know
    in advance which resources the application is seeking access to. In other words,
    user permission is a must to access any kind of critical resource on the device.
    By looking at the requested permission, the user is more aware of the risks involved
    in installing the application. But most users do not read these and just give
    away a lot of permissions, exposing the device to malicious activities.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与桌面环境不同，这提供了一个机会，让用户提前知道应用程序正在寻求访问哪些资源。换句话说，用户必须获得许可才能访问设备上的任何关键资源。通过查看请求的权限，用户更加了解安装应用程序所涉及的风险。但大多数用户并不阅读这些内容，只是授予了很多权限，使设备暴露于恶意活动之中。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not possible to install an Android app with a few or reduced permissions.
    You can either install the app with all the permissions or decline it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能安装具有少量或减少权限的Android应用程序。您只能安装具有所有权限或拒绝的应用程序。
- en: 'As mentioned earlier, developers have to mention permissions in a file named
    `AndroidManifest.xml`. For example, if the application needs to access the Internet,
    the permission `INTERNET` is specified using the following code in the `AndroidManifest.xml`
    file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，开发人员必须在名为`AndroidManifest.xml`的文件中声明权限。例如，如果应用程序需要访问互联网，则可以使用以下代码在`AndroidManifest.xml`文件中指定`INTERNET`权限：
- en: '[PRE0]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Android permissions are categorized into four levels which are as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Android权限分为四个级别，如下所示：
- en: '| Permission Type | Description |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 权限类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Normal | This is the default value. These are low risk permissions and do
    not pose a risk to other applications, system or user. This permission is automatically
    granted to the app without asking for user approval during installation. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 普通 | 这是默认值。这些是低风险权限，不会对其他应用程序、系统或用户造成风险。在安装过程中，此权限会自动授予应用程序，无需用户批准。 |'
- en: '| Dangerous | These are the permissions that can cause harm to the system and
    other applications. Hence, user approval is necessary during installation. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 危险 | 这些是可能对系统和其他应用程序造成伤害的权限。因此，在安装过程中需要用户批准。 |'
- en: '| Signature | These are automatically granted to a requesting app if that app
    is signed by the same certificate as the one that declared/created the permission.
    This level is designed to allow apps that are part of a suite, or otherwise related,
    to share data. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 签名 | 如果请求的应用程序与声明/创建权限的应用程序使用相同的证书，则会自动授予这些权限。此级别旨在允许套件中的应用程序或其他相关应用程序共享数据。
    |'
- en: '| Signature/System | A permission that the system grants only to the applications
    that are in the Android system image, or that are signed with the same certificate
    as the application that declared the permission. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 签名/系统 | 系统仅授予Android系统镜像中的应用程序，或者与声明权限的应用程序使用相同证书的应用程序。 |'
- en: Application sandboxing
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序隔离
- en: In order to isolate applications from each other, Android takes advantage of
    the Linux user-based protection model. In Linux systems, each user is assigned
    a unique **user ID** (**UID**) and users are segregated so that one user does
    not access the data of another user. All resources under a particular user are
    run with the same privileges. Similarly, each Android application is assigned
    a UID and is run as a separate process. What this means is that even if an installed
    application tries to do something malicious, it can do it only within its context
    and with the permissions it has.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将应用程序相互隔离，Android利用了Linux基于用户的保护模型。在Linux系统中，每个用户被分配一个唯一的用户ID（UID），并且用户被隔离开来，以便一个用户不会访问另一个用户的数据。特定用户下的所有资源都以相同的权限运行。同样，每个Android应用程序都被分配一个UID，并作为一个单独的进程运行。这意味着，即使安装的应用程序尝试执行一些恶意操作，它也只能在其上下文中以及具有的权限内执行。
- en: This application sandboxing is done at the kernel level. The security between
    applications and the system at the process level is ensured through standard Linux
    facilities such as user and group IDs that are assigned to applications. This
    is shown in the following screenshot, referenced from [http://www.ibm.com/developerworks/library/x-androidsecurity/](http://www.ibm.com/developerworks/library/x-androidsecurity/).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这种应用程序隔离是在内核级别完成的。应用程序和系统之间在进程级别的安全性是通过标准的Linux设施来确保的，例如分配给应用程序的用户和组ID。这在下面的截图中显示，引用自[http://www.ibm.com/developerworks/library/x-androidsecurity/](http://www.ibm.com/developerworks/library/x-androidsecurity/)。
- en: '![Application sandboxing](img/image00258.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序隔离](img/image00258.jpeg)'
- en: Two applications on different processes on with different UID's
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 具有不同UID的不同进程上的两个应用程序
- en: By default, applications cannot read or access the data of other applications
    and have limited access to the operating system. If application A tries to read
    application B's data, for example, then the operating system protects against
    this because application A does not have the appropriate privileges. Since the
    application sandbox mechanism is implemented at the kernel level, it applies to
    both native applications and OS applications. Thus the operating system libraries,
    application framework, application runtime, and all applications run within the
    Application Sandbox. Bypassing this sandbox mechanism would require compromising
    the security of Linux kernel.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应用程序无法读取或访问其他应用程序的数据，并且对操作系统的访问权限有限。例如，如果应用程序A尝试读取应用程序B的数据，操作系统会阻止这种操作，因为应用程序A没有适当的权限。由于应用程序沙箱机制是在内核级别实现的，因此适用于本机应用程序和操作系统应用程序。因此，操作系统库、应用程序框架、应用程序运行时以及所有应用程序都在应用程序沙箱中运行。绕过这个沙箱机制将需要破坏Linux内核的安全性。
- en: SELinux in Android
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android中的SELinux
- en: Starting with Android 4.3, **Security-Enhanced Linux** (**SELinux**) is supported
    by the Android security model. Android security is based on discretionary access
    control, which means that applications can ask for permissions, and users can
    grant or deny those permissions. Thus, malware can create havoc on phones by gaining
    permissions. But SE Android uses **mandatory access control** (**MAC**) which
    ensures that applications work in isolated environments. Hence, even if a user
    installs a malware app, the malware cannot access the OS and corrupt the device.
    SELinux is used to enforce MAC over all processes, including the ones running
    with root privileges.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从Android 4.3开始，Android安全模型支持**安全增强型Linux**（**SELinux**）。Android安全基于自由访问控制，这意味着应用程序可以请求权限，用户可以授予或拒绝这些权限。因此，恶意软件可以通过获取权限在手机上制造混乱。但SE
    Android使用**强制访问控制**（**MAC**），确保应用程序在隔离的环境中运行。因此，即使用户安装了恶意应用程序，恶意软件也无法访问操作系统并损坏设备。SELinux用于强制执行MAC，包括以root权限运行的进程。
- en: 'SELinux operates on the principle of *default denial*. Anything that is not
    explicitly allowed is denied. SELinux can operate in one of two global modes:
    **permissive mode**, in which permission denials are logged but not enforced,
    and **enforcing mode**, in which denials are both logged and enforced. As per
    Google''s documentation, in the Android 5.0 Lollipop release, Android moves to
    full enforcement of SELinux. This builds upon the permissive release of 4.3 and
    the partial enforcement of 4.4\. In short, Android is shifting from enforcement
    on a limited set of crucial domains (`installd`, `netd`, `vold` and `zygote`)
    to everything (more than 60 domains).'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux遵循*默认拒绝*的原则。任何未明确允许的操作都将被拒绝。SELinux可以在两种全局模式下运行：**宽容模式**，其中权限拒绝被记录但不被执行，和**强制模式**，其中拒绝既被记录又被执行。根据谷歌的文档，在Android
    5.0棒棒糖版本中，Android将全面执行SELinux。这是在4.3版本的宽容发布和4.4版本的部分执行的基础上构建的。简而言之，Android正在从对一组关键域（`installd`、`netd`、`vold`和`zygote`）的执行转变为对所有内容（超过60个域）的执行。
- en: Application Signing
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序签名
- en: 'All Android apps need to be digitally signed with a certificate before they
    can be installed on a device. The main purpose of using certificates is to identify
    the author of an app. These certificates do not need to be signed by a certificate
    authority and Android apps often use self-signed certificates. The app developer
    holds the certificate''s private key. Using the same private key, the developer
    can provide updates to his applications and share data between applications. In
    debug mode, developers can sign the app with a debug certificate generated by
    the Android SDK tools. You can run and debug an app signed in debug mode but the
    app cannot be distributed. To distribute an app, the app needs to be signed with
    your own certificate. The key store and the private key which are used during
    this process need to be secured by the developer as they are essential to push
    updates. The following screenshot shows the key store selection option that is
    displayed while exporting the application:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Android应用程序在安装到设备上之前都需要使用证书进行数字签名。使用证书的主要目的是识别应用程序的作者。这些证书不需要由证书颁发机构签名，Android应用程序通常使用自签名证书。应用程序开发人员持有证书的私钥。使用相同的私钥，开发人员可以为其应用程序提供更新并在应用程序之间共享数据。在调试模式下，开发人员可以使用Android
    SDK工具生成的调试证书对应用程序进行签名。您可以在调试模式下运行和调试应用程序，但应用程序无法分发。要分发应用程序，应用程序需要使用您自己的证书进行签名。在此过程中使用的密钥库和私钥需要由开发人员保护，因为它们对推送更新至关重要。以下截图显示了在导出应用程序时显示的密钥库选择选项：
- en: '![Application Signing](img/image00259.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序签名](img/image00259.jpeg)'
- en: Keystore selection while exporting Android app
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 导出Android应用程序时的密钥库选择
- en: Secure interprocess communication
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全的进程间通信
- en: As discussed in the above sections, sandboxing of the apps is achieved by running
    apps in different processes with different Linux identities. System services run
    in separate processes and have more privileges. Thus, in order to organize data
    and signals between these processes, an **interprocess communication** (**IPC**)
    framework is needed. In Android, this is achieved with the use of the **Binder**
    mechanism.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，应用程序的沙盒化是通过在不同的进程中以不同的Linux身份运行应用程序来实现的。系统服务在单独的进程中运行，并具有更多的权限。因此，为了在这些进程之间组织数据和信号，需要一个**进程间通信**（**IPC**）框架。在Android中，这是通过使用**Binder**机制实现的。
- en: 'The Binder framework in Android provides the capabilities required to organize
    all types of communication between various processes. Android application components,
    such as intents and content providers, are also built on top of this Binder framework.
    Using this framework, it is possible to perform a variety of actions such as invoking
    methods on remote objects as if they were local, synchronous and asynchronous
    method invocation, sending file descriptors across processes, and so on. Let us
    suppose the application in **Process ''A''** wants to use certain behavior exposed
    by a service which runs in **Process ''B''**. In this case, **Process ''A''**
    is the client and **Process ''B''** is the service. The communication model using
    Binder is shown in the following diagram:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Android中的Binder框架提供了组织各种进程间通信所需的能力。Android应用程序组件，如意图和内容提供程序，也是建立在这个Binder框架之上的。使用这个框架，可以执行各种操作，比如调用远程对象的方法，就像它们是本地的一样，同步和异步方法调用，在进程之间发送文件描述符等等。假设**进程'A'**中的应用程序想要使用**进程'B'**中运行的服务暴露的某些行为。在这种情况下，**进程'A'**是客户端，**进程'B'**是服务。使用Binder的通信模型如下图所示：
- en: '![Secure interprocess communication](img/image00260.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![安全的进程间通信](img/image00260.jpeg)'
- en: Binder Communication Model
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Binder通信模型
- en: All communication between the processes using the Binder framework occurs through
    the `/dev/binder` Linux kernel driver. The permissions to this device driver are
    set to world readable and writable. Hence, any application may write to and read
    from this device driver. All communications between the client and server happen
    through **proxies** on the client side and **stubs** on the server side. The proxies
    and the stubs are responsible for sending and receiving the data, and the commands,
    sent over the Binder driver.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Binder框架进行的进程间通信都是通过`/dev/binder` Linux内核驱动程序进行的。对这个设备驱动程序的权限被设置为全局可读可写。因此，任何应用程序都可以向这个设备驱动程序写入和读取。客户端和服务器之间的所有通信都是通过客户端的**代理**和服务器端的**存根**进行的。代理和存根负责发送和接收通过Binder驱动程序发送的数据和命令。
- en: Each service (also called a Binder service) exposed using the Binder mechanism
    is assigned with a **token**. This token is a 32-bit value and is unique across
    all processes in the system. A client can start interacting with the service after
    discovering this value. This is possible with the help of Binder's **context manager**.
    Basically, the context manager acts as a name service, providing the handle of
    a service using the name of this service. In order to get this process working,
    each service must be registered with the context manager. Thus, a client needs
    to know only the name of a service to communicate. The name is resolved by the
    context manager and the client receives the token that is later used for communicating
    with the service. The Binder driver adds the UID and the PID value of the sender
    process to each transaction. As discussed earlier, each application in the system
    has its own UID and this value is used to identify the calling party. The receiver
    of the call may check the obtained values and decide if the transaction should
    be completed. Thus, the security is enforced, with the Binder token acting as
    a security token as it is unique across all processes.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Binder机制公开的每个服务（也称为Binder服务）都被分配一个**令牌**。这个令牌是一个32位的值，在系统中的所有进程中是唯一的。客户端可以在发现这个值后开始与服务进行交互。这是通过Binder的**上下文管理器**来实现的。基本上，上下文管理器充当名称服务，使用该服务的名称提供服务的句柄。为了使这个过程工作，每个服务必须向上下文管理器注册。因此，客户端只需要知道一个服务的名称来进行通信。名称由上下文管理器解析，客户端接收后用于与服务进行通信。Binder驱动程序向每个事务添加了发送方进程的UID和PID值。正如前面讨论的，系统中的每个应用程序都有自己的UID，这个值用于识别调用方。调用方可以检查获得的值，并决定是否应完成事务。因此，Binder令牌作为安全令牌起作用，因为它在所有进程中是唯一的，从而强制执行安全性。
- en: Android hardware components
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android硬件组件
- en: Android is compatible with a wide range of hardware components. Having a Linux
    kernel made this easy, as Linux supports large variety of hardware. This gives
    manufacturers a lot of flexibility as they can design based on their requirement,
    without worrying about compatibility. This poses a significant challenge for forensic
    analysts during investigations. Thus, understanding the hardware components and
    device types would greatly help in understanding Android forensics.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Android兼容各种硬件组件。由于Linux内核的存在，这变得很容易，因为Linux支持各种硬件。这使制造商有很大的灵活性，他们可以根据自己的需求设计，而不必担心兼容性。这给取证分析人员在调查过程中带来了重大挑战。因此，了解硬件组件和设备类型将极大地帮助理解Android取证。
- en: Core components
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 核心组件
- en: The components present in a device change from one manufacturer to another and
    also from one model to another. However, there are some components which are found
    in most mobile devices. The following sections provide an overview of the commonly-found
    components of an Android device.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 设备中的组件从一个制造商到另一个制造商，以及从一个型号到另一个型号都会有所变化。然而，大多数移动设备中都会找到一些组件。以下部分概述了Android设备中常见的组件。
- en: Central processing unit
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 中央处理单元
- en: The central processing unit (**CPU**), also known as processor, is responsible
    for executing everything that happens on a mobile device. It tells the device
    what to do and how to do it. Its performance is measured based on the number of
    tasks it can complete per second, known as a **cycle**. For example, 1 GHz processor
    can process one billion cycles per second. The higher the capacity of the processor,
    the smoother the performance of the phone will be.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 中央处理单元（**CPU**），也称为处理器，负责执行移动设备上发生的一切。它告诉设备要做什么以及如何做。其性能是根据它每秒可以完成的任务数来衡量的，称为**周期**。例如，1
    GHz处理器可以每秒处理十亿个周期。处理器的容量越大，手机的性能就越流畅。
- en: When dealing with smart phones, we come across the following terminologies—ARM,
    x86 (Intel), MIPS, Cortex, A5, A7, or A9\. ARM is the name of a company that licenses
    their architectures (branded Cortex) with different models coming up each year
    such as the aforementioned A series (A5, A7, and A9). Based on these architectures,
    chip makers release their own series of chipsets (Snapdragon, Exynos, and so on)
    which are used in mobile devices. The latest smartphones are powered by dual core,
    quad core and even octa core processors.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理智能手机时，我们会遇到以下术语——ARM、x86（英特尔）、MIPS、Cortex、A5、A7或A9。ARM是一家授权其架构（品牌Cortex）的公司，每年推出不同型号，如上述的A系列（A5、A7和A9）。基于这些架构，芯片制造商发布自己系列的芯片组（骁龙、Exynos等），用于移动设备。最新的智能手机由双核、四核甚至八核处理器驱动。
- en: Baseband processor
  id: totrans-198
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基带处理器
- en: Smartphones today support a variety of cellular protocols, including GSM, 3G,
    4G and 4G LTE. These protocols are complicated and require a large amount of CPU
    power to process data, generate packets and transmit them to the network provider.
    To handle this process, smartphones now use a baseband modem which is a separate
    chip included in smartphones that communicates with the main processor. These
    baseband modems have their own processor called the baseband processor and run
    their own operating system. The baseband processor manages several radio control
    functions such as signal generation, modulation, encoding, as well as frequency
    shifting. It can also manage the transmission of signals.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的智能手机支持各种蜂窝协议，包括GSM、3G、4G和4G LTE。这些协议很复杂，需要大量的CPU功率来处理数据，生成数据包并将其传输到网络提供商。为了处理这个过程，智能手机现在使用一个基带调制解调器，这是一个单独的芯片，包含在智能手机中，与主处理器通信。这些基带调制解调器有自己的处理器，称为基带处理器，并运行自己的操作系统。基带处理器管理几个无线电控制功能，如信号生成、调制、编码，以及频率转移。它也可以管理信号的传输。
- en: The baseband processor is generally located on the same circuit board as the
    CPU but consists of a separate radio electronics component.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 基带处理器通常位于与CPU相同的电路板上，但由单独的无线电电子组件组成。
- en: Memory
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内存
- en: Android phones, just like normal computers, use two primary types of memory–**random
    access memory** (**RAM**) and **read-only memory** (**ROM**). Although most users
    are familiar with these concepts, there is some confusion when it comes to mobile
    devices.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Android手机，就像普通计算机一样，使用两种主要类型的内存——**随机存取存储器**（**RAM**）和**只读存储器**（**ROM**）。尽管大多数用户对这些概念很熟悉，但在移动设备上存在一些混淆。
- en: RAM is volatile, which means its contents are erased when the power is removed.
    RAM is very fast to access and is used primarily for the runtime memory of software
    applications (including the device's operating system and any applications). In
    other words, it is used by the system to load and execute the OS and other applications.
    So the number of applications and processes that can be run simultaneously depends
    on this RAM size.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: RAM是易失性的，这意味着其内容在断电时被擦除。RAM非常快速访问，主要用于软件应用程序的运行时内存（包括设备的操作系统和任何应用程序）。换句话说，它被系统用来加载和执行操作系统和其他应用程序。因此，可以同时运行的应用程序和进程的数量取决于RAM的大小。
- en: ROM (commonly referred to as Android ROM) is non-volatile, which means it retains
    the contents even when the power is off. Android ROM contains the boot loader,
    OS, all downloaded applications and their data, settings and, so on.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: ROM（通常称为Android ROM）是非易失性的，这意味着即使断电也会保留其内容。Android ROM包含引导加载程序、操作系统、所有下载的应用程序及其数据、设置等。
- en: Note that the part of memory that is used for the boot loader is normally locked
    and can only be changed through a firmware upgrade. The remaining part of the
    memory is termed by some manufacturers as user memory. The data of each application
    stored here will not be accessible to other applications. Once this memory gets
    filled up, the device slows down. Both RAM and Android ROM are manufactured into
    a single component called as **Multichip Package** (**MCP**).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，用于引导加载程序的内存部分通常是锁定的，只能通过固件升级进行更改。其余部分的内存被一些制造商称为用户内存。存储在这里的每个应用程序的数据对其他应用程序是不可访问的。一旦这个内存被填满，设备就会变慢。RAM和Android
    ROM被制造成一个称为**多芯片封装**（**MCP**）的单一组件。
- en: SD Card
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SD卡
- en: The SD card has great significance with respect to mobile forensics because,
    quite often, data that is stored in these can be vital evidence. Many Android
    devices have a removable memory card commonly referred to as their **Secure Digital**
    (**SD**) card. This is in contrast to Apple's iPhone which does *not* have any
    provision for SD cards. SD cards are non-volatile, which means data is stored
    in it even when it is powered off. SD cards use flash memory, a type of **Electrically
    Erasable Programmable Read-Only Memory** (**EEPROM**) that is erased and written
    in large blocks instead of individual bytes. Most of the multimedia data and large
    files are stored by the apps in SD card. In order to interoperate with other devices,
    SD cards implement certain communication protocols and specifications.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡对于移动取证具有重要意义，因为经常存储在其中的数据可能是重要的证据。许多Android设备都有一个可移动的存储卡，通常称为他们的**安全数字**（**SD**）卡。这与苹果的iPhone形成对比，后者没有任何SD卡的规定。SD卡是非易失性的，这意味着即使断电也会存储数据。SD卡使用闪存存储器，一种**可擦可编程只读存储器**（**EEPROM**）类型，它以大块而不是单个字节进行擦除和写入。大多数多媒体数据和大文件都存储在SD卡中。为了与其他设备互操作，SD卡实现了一些通信协议和规范。
- en: In some mobile devices, although an SD card interface is present, some portion
    of the on-board NAND memory (non-volatile) is carved out for creating an emulated
    SD card. This essentially means the SD card is not removable. Hence, forensic
    analysts need to check whether they are dealing with the actual SD card or an
    emulated SD card. SD memory cards come in several different sizes. Mini-SD card
    and micro-SD card contain the same underlying technology as the original SD memory
    card, but are smaller in size.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些移动设备中，虽然存在SD卡接口，但部分内置NAND存储器（非易失性）被划分出来用于创建模拟SD卡。这基本上意味着SD卡是不可移动的。因此，取证分析人员需要检查他们是否正在处理实际的SD卡还是模拟SD卡。SD存储卡有几种不同的尺寸。Mini-SD卡和Micro-SD卡与原始SD存储卡具有相同的基础技术，但尺寸更小。
- en: Display
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示屏
- en: Mobile phone screens have progressed dramatically over the last few years. Below
    is a brief description of some of the widely used types of mobile screens as described
    at [http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms](http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 移动电话屏幕在过去几年里取得了巨大进步。以下是对一些广泛使用的移动屏幕类型的简要描述，如[http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms](http://www.in.techradar.com/news/phone-and-communications/mobile-phones/Best-phone-screen-display-tech-explained/articleshow/38997644.cms)所述。
- en: The **thin film transistor liquid crystal display** (**TFT LCD**) is the most
    common type of screen found in mobile phones. These screens have a light underneath
    them which shines through the pixels to make them visible.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 薄膜晶体管液晶显示屏（TFT LCD）是移动电话中最常见的屏幕类型。这些屏幕下面有一盏灯，透过像素发光，使它们可见。
- en: The **active-matrix organic light-emitting diode** (**AMOLED**) is a technology
    based on organic compounds and known for its best image quality while consuming
    low power. Unlike LCD screens, AMOLED displays don't need a backlight; each pixel
    produces its own light, so phones using them can potentially be thinner.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有机活性矩阵有机发光二极管（AMOLED）是一种基于有机化合物的技术，以其出色的图像质量和低功耗而闻名。与LCD屏幕不同，AMOLED显示屏不需要背光；每个像素都会产生自己的光，因此使用这种显示屏的手机可能会更薄。
- en: Battery
  id: totrans-213
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 电池
- en: 'Battery is the lifeblood of a mobile phone and is one of the major concerns
    with modern smartphones. The more you use the device and its components, the more
    battery is consumed. The following different types of batteries are used in mobile
    phones:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 电池是移动电话的生命线，也是现代智能手机的主要关注点之一。您使用设备及其组件越多，电池消耗就越多。移动电话使用以下不同类型的电池：
- en: '**Lithium Ion (Li-ion)**: These batteries are the most popular batteries used
    in cell phones as they are light and portable. They are well known for their high
    energy density and low maintenance. However, they are expensive to manufacture
    compared to other battery types.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锂离子（Li-ion）：这些电池是手机中最常用的电池，因为它们轻便易携。它们以高能量密度和低维护而闻名。然而，与其他电池类型相比，它们的制造成本较高。
- en: '**Lithium Polymer (Li-Polymer)**: These batteries have all the attributes of
    a Lithium Ion battery but with ultra slim geometry and simplified packaging. They
    are the very latest and found only in few mobile devices.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合物锂电池（Li-Polymer）：这些电池具有锂离子电池的所有特性，但具有超薄的几何形状和简化的包装。它们是最新的，只在少数移动设备中找到。
- en: '**Nickel Cadmium (NiCd)**: These batteries are old technology batteries and
    suffer from memory effect. As a result, the overall capacity and the lifespan
    of the battery are reduced. In addition to this, NiCd batteries are made from
    toxic materials that are not environment-friendly.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镍镉（NiCd）：这些电池是旧技术电池，容易出现记忆效应。因此，电池的总容量和寿命会减少。除此之外，镍镉电池由对环境不友好的有毒材料制成。
- en: '**Nickel Metal Hydrid (NiMH)**: These batteries are same as the NiCd batteries,
    but can contain higher energy and run longer, between 30 and 40 percent. They
    still suffer from memory effect, but comparatively less than the NiCd batteries.
    They are widely used in mobile phones and are affordable too.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 镍氢（NiMH）：这些电池与镍镉电池相同，但可以容纳更多能量，运行时间更长，约为30%至40%。它们仍然会出现记忆效应，但相对于镍镉电池来说较少。它们在手机中被广泛使用，而且价格也比较实惠。
- en: 'The battery type can be found by looking at the details present on its body.
    For example, the following is an image of a Li-ion battery:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过查看电池本体上的详细信息来找到电池类型。例如，以下是锂离子电池的图像：
- en: '![Battery](img/image00261.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![电池](img/image00261.jpeg)'
- en: Lithium-ion battery
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 锂离子电池
- en: Most SD cards are located behind the battery. During forensic analysis, accessing
    an SD card would require removing the battery which would power off the device.
    This can have certain implications which will be discussed in detail in later
    chapters.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SD卡位于电池后面。在取证分析中，访问SD卡需要取出电池，这将关闭设备。这可能会产生某些影响，将在后面的章节中详细讨论。
- en: 'Apart from the components described above, here are some of the other components
    that are well known:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述描述的组件外，以下是一些其他众所周知的组件：
- en: Global Positioning System
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球定位系统
- en: Wi-Fi
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi
- en: Near field communication
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近场通信
- en: Bluetooth
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝牙
- en: Camera
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相机
- en: Keypad
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘
- en: USB
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USB
- en: Accelerometer and gyroscope
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计和陀螺仪
- en: Speaker
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扬声器
- en: Microphone
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 麦克风
- en: Android boot process
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android启动过程
- en: Understanding the boot process of an Android device will help us to understand
    other forensic techniques which involve interacting with the device at various
    levels. When an Android device is first powered on, there is a sequence of steps
    that are executed, helping the device to load necessary firmware, OS, application
    data, and so on into memory. The following information is compiled from the original
    post published at [http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html](http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Android设备的启动过程将帮助我们理解涉及与设备在各个层面交互的其他取证技术。当Android设备首次上电时，会执行一系列步骤，帮助设备将必要的固件、操作系统、应用程序数据等加载到内存中。以下信息编译自原始文章，发表在[http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html](http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html)。
- en: 'The sequence of steps involved in Android boot process is as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程涉及的步骤顺序如下：
- en: Boot ROM code execution
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动ROM代码执行
- en: The boot loader
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引导加载程序
- en: The Linux kernel
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux内核
- en: The init process
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: init进程
- en: Zygote and Dalvik
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zygote和Dalvik
- en: The system server
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统服务器
- en: We will examine each of these steps in detail.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细研究这些步骤中的每一个。
- en: Boot ROM code execution
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动ROM代码执行
- en: 'Before the device is powered on, the device CPU will be in a state where no
    initializations will have taken place. Once the Android device is powered on,
    execution starts with the boot ROM code. This boot ROM code is specific to the
    CPU the device is using. As shown in the the following diagram, this phase includes
    two steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备上电之前，设备CPU将处于未初始化状态。一旦Android设备上电，执行就会从启动ROM代码开始。这个启动ROM代码是特定于设备使用的CPU的。如下图所示，这个阶段包括两个步骤：
- en: When, boot ROM code is executed, it initializes the device hardware and tries
    to detect the boot media. Thus, the boot ROM code scans till it finds the boot
    media. This is similar to the BIOS function in the boot process of a computer.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当启动ROM代码执行时，它会初始化设备硬件并尝试检测引导介质。因此，启动ROM代码会扫描直到找到引导介质。这类似于计算机引导过程中的BIOS功能。
- en: Once the boot sequence is established, the initial boot loader is copied to
    the internal RAM. After this, the execution shifts to the code loaded into the
    RAM.![Boot ROM code execution](img/image00262.jpeg)
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦引导序列建立，初始引导加载程序就会被复制到内部RAM。之后，执行会转移到加载到RAM中的代码。![启动ROM代码执行](img/image00262.jpeg)
- en: 'Android boot process: Boot ROM code execution'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：启动ROM代码执行
- en: The boot loader
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导加载程序
- en: 'The boot loader is a piece of program that is executed before the operating
    system starts to function. Boot loaders are present in desktop computers, laptops
    and mobile devices as well. In an Android boot loader, there are two stages—**initial
    program load** (**IPL**) and **second program load** (**SPL**). As shown in the
    following diagram, this involves three steps explained as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 引导加载程序是在操作系统开始运行之前执行的程序片段。引导加载程序存在于台式计算机、笔记本电脑和移动设备中。在Android引导加载程序中，有两个阶段——**初始程序加载**（**IPL**）和**第二程序加载**（**SPL**）。如下图所示，这涉及到三个步骤，如下所述：
- en: IPL deals with detecting and setting up external RAM.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPL处理检测和设置外部RAM。
- en: Once external RAM is available, the SPL is copied into the RAM and execution
    is transferred to it. The SPL is responsible for loading the Android operating
    system. It also provides access to other boot modes such as fastboot, recovery,
    and so on. It initiates several hardware components such as console, display,
    keyboard and file systems, virtual memory, and other features.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦外部RAM可用，SPL就会被复制到RAM中，并且执行会转移到它。SPL负责加载Android操作系统。它还提供对其他引导模式（如fastboot、recovery等）的访问。它启动了几个硬件组件，如控制台、显示、键盘和文件系统、虚拟内存和其他功能。
- en: After this, the SPL tries to look for the Linux kernel. It will load this from
    the boot media and copy it to the RAM. Once the boot loader is done with this
    process, it transfers the execution to the kernel.![The boot loader](img/image00263.jpeg)
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，SPL会尝试寻找Linux内核。它会从引导介质加载并将其复制到RAM中。一旦引导加载程序完成了这个过程，它就会将执行转移到内核。![引导加载程序](img/image00263.jpeg)
- en: 'Android boot process: The boot loader'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：引导加载程序
- en: The Linux kernel
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux内核
- en: 'The Linux kernel is the heart of the Android operating system and is responsible
    for process management, memory management, and enforcing security on the device.
    After the kernel is loaded, it mounts the **root file system** (**rootfs**) and
    provides access to system and user data, as described in the following steps:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核是Android操作系统的核心，负责进程管理、内存管理和设备安全。内核加载后，它会挂载**根文件系统**（**rootfs**），并提供对系统和用户数据的访问，如下所述：
- en: When the memory management units and caches have been initialized, the system
    can use virtual memory and launch user space processes.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当内存管理单元和缓存已经初始化后，系统可以使用虚拟内存并启动用户空间进程。
- en: The kernel will look in the rootfs for the init process and launch it as the
    initial user space process.![The Linux kernel](img/image00264.jpeg)
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核将在rootfs中寻找init进程，并将其作为初始用户空间进程启动。![Linux内核](img/image00264.jpeg)
- en: 'Android boot process: The kernel'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：内核
- en: The init process
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: init进程
- en: The init is the very first process that starts and is the root process of all
    other processes.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: init是第一个启动的进程，也是所有其他进程的根进程。
- en: The init process will look for a script named `init.rc` that describes the system
    services, file system, and any other parameters that need to be set up.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: init进程将寻找一个名为`init.rc`的脚本，描述系统服务、文件系统和需要设置的其他参数。
- en: The `init` process can be found at:`<android source>/system/core/init`..
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init`进程可以在`<android source>/system/core/init`路径下找到。'
- en: The `init.rc` file can be found in source tree at `<android source>/system/core/rootdir/init.rc`.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init.rc`文件可以在源树中找到，路径为`<android source>/system/core/rootdir/init.rc`。'
- en: Tip
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: More details about the Android file hierarchy will be covered in [Chapter 3](part0026.xhtml
    "Chapter 3. Understanding Data Storage on Android Devices"), *Understanding Data
    Storage on Android Devices*.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Android文件层次结构的更多细节将在[第3章](part0026.xhtml "第3章。了解Android设备上的数据存储")中进行介绍，*了解Android设备上的数据存储*。
- en: The `init` process will parse the `init.rc` script and launch the system service
    processes. At this stage, you will see the Android logo on the device screen.![The
    init process](img/image00265.jpeg)
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`init`进程将解析`init.rc`脚本并启动系统服务进程。在这个阶段，您将在设备屏幕上看到Android标志。![init进程](img/image00265.jpeg)'
- en: 'Android boot process: The init process'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：init进程
- en: Zygote and Dalvik
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Zygote和Dalvik
- en: '**Zygote** is one of the first init processes created after the device boots.
    It initializes the Dalvik virtual machine and tries to create multiple instances
    to support each android process. As discussed in earlier sections, the Dalvik
    virtual machine is the virtual machine which executes Android applications written
    in Java.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zygote**是设备启动后创建的第一个init进程之一。它初始化Dalvik虚拟机，并尝试创建多个实例以支持每个Android进程。正如前面的部分所讨论的，Dalvik虚拟机是执行用Java编写的Android应用程序的虚拟机。'
- en: 'Zygote facilitates using a shared code across the VM, thus helping to save
    the memory and reduce the burden on the system. After this, applications can run
    by requesting new Dalvik virtual machines that each one runs in. Zygote registers
    a server socket for zygote connections, and also preloads certain classes and
    resources. This Zygote loading process has been more clearly explained at [http://www.kpbird.com/2012/11/in-depth-android-boot-sequence-process.html](http://www.kpbird.com/2012/11/in-depth-android-boot-sequence-process.html).
    This is also explained as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Zygote有助于在虚拟机之间使用共享代码，从而有助于节省内存并减轻系统负担。之后，应用程序可以通过请求新的Dalvik虚拟机来运行。Zygote为zygote连接注册了一个服务器套接字，并预加载了某些类和资源。有关Zygote加载过程的更清晰解释，请参见[http://www.kpbird.com/2012/11/in-depth-android-boot-sequence-process.html](http://www.kpbird.com/2012/11/in-depth-android-boot-sequence-process.html)。如下所述：
- en: '`Load ZygoteInitclass`: This class loads the `ZygoteInit` class. Source Code:
    `<Android Source>/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java`.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Load ZygoteInitclass`: 此类加载`ZygoteInit`类。源代码：`<Android Source>/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java`。'
- en: '`registerZygoteSocket()`: This registers a server socket for zygote command
    connections.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registerZygoteSocket()`: 为zygote命令连接注册服务器套接字。'
- en: '`preloadClasses()`: This is a simple text file containing the list of classes
    that need to be preloaded will be executed here. This file can be seen at `<Android
    Source>/frameworks/base`.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preloadClasses()`: 这是一个简单的文本文件，其中包含需要预加载的类的列表将在此处执行。此文件可以在`<Android Source>/frameworks/base`中看到。'
- en: '`preloadResources()`: This deals with native themes and layouts. Everything
    that includes the `android.R` file will be loaded using this method.![Zygote and
    Dalvik](img/image00266.jpeg)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preloadResources()`: 这处理本机主题和布局。所有包括`android.R`文件的内容都将使用此方法加载。![Zygote和Dalvik](img/image00266.jpeg)'
- en: 'Android boot process: The Zygote'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：Zygote
- en: System server
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 系统服务器
- en: 'All the core features of the device such as telephony, network, and other important
    functions, are started by the system server, as shown in the following diagram:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的所有核心功能，如电话、网络和其他重要功能，都是由系统服务器启动的，如下图所示：
- en: '![System server](img/image00267.jpeg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![系统服务器](img/image00267.jpeg)'
- en: 'Android boot process: System server'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Android启动过程：系统服务器
- en: 'The following core services are started in this process:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中启动以下核心服务：
- en: Start Power Manager
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电源管理器
- en: Create Activity Manager
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Activity Manager
- en: Start Telephony Registry
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电话注册表
- en: Start Package Manager
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动包管理器
- en: Set Activity Manager Service as System Process
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Activity Manager服务设置为系统进程
- en: Start Context Manager
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动上下文管理器
- en: Start System Context Providers
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动系统上下文提供程序
- en: Start Battery Service
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动电池服务
- en: Start Alarm Manager
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动闹钟管理器
- en: Start Sensor Service
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动传感器服务
- en: Start Window Manager
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动窗口管理器
- en: Start Bluetooth Service
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动蓝牙服务
- en: Start Mount Service
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动挂载服务
- en: The system sends a broadcast action called `ACTION_BOOT_COMPLETED` which informs
    all the dependent processes that the boot process is complete. After this, the
    device displays the home screen and is ready to interact with the user. The Android
    system is now fully operational and is ready to interact with the user.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 系统发送一个名为`ACTION_BOOT_COMPLETED`的广播动作，通知所有依赖进程引导过程已经完成。之后，设备显示主屏幕，并准备与用户交互。Android系统现在已经完全运行，并准备与用户交互。
- en: As explained earlier, several manufacturers use the Android operating system
    on their devices. Most of these device manufacturers customize the OS based on
    their hardware and other requirements. Hence, when a new version of Android is
    released, these device manufacturers have to port their custom software and tweaks
    to the latest version.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所解释的，许多制造商在其设备上使用Android操作系统。这些设备制造商大多根据其硬件和其他要求定制操作系统。因此，当发布新版本的Android时，这些设备制造商必须将他们的定制软件和调整移植到最新版本。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: Understanding Android architecture and its security model is crucial to having
    a proper understanding of Android forensics. The inherent security features in
    Android OS, such as application sandboxing, permission model, and so on, safeguard
    Android devices from various threats and also act as an obstacle for forensic
    experts during investigation. Having gained this knowledge of Android internals,
    we will discuss more about what type of data is stored on the device and how it
    is stored, in the next chapter.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Android架构及其安全模型对于正确理解Android取证至关重要。Android操作系统中固有的安全功能，如应用程序沙箱、权限模型等，保护Android设备免受各种威胁，并在调查过程中也作为取证专家的障碍。通过获得这些Android内部知识，我们将在下一章更多地讨论设备上存储了什么类型的数据以及它是如何存储的。
