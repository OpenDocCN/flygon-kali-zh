["```py\n    dtidx = pd.DatetimeIndex([dt.fromordinal(int(date)) for date in dates])\n    ```", "```py\n    data = pd.Series(avg_temp * .1, index=dtidx)\n    ```", "```py\n    lag_plot(data)\n    ```", "```py\n    autocorrelation_plot(data)\n    ```", "```py\n    resampled = data.resample('A')\n    resampled.plot()\n    ```", "```py\n    to_float = lambda x: .1 * float(x.strip() or np.nan)\n    to_date = lambda x: dt.strptime(x, \"%Y%m%d\")\n    cols = [4, 11, 25]\n    conv_dict = dict( (col, to_float) for col in cols) \n\n    conv_dict[1] = to_date\n    cols.append(1)\n\n    headers = ['dates', 'avg_ws', 'avg_temp', 'avg_pres']\n    df = pd.read_csv(sys.argv[1], usecols=cols, names=headers, index_col=[0], converters=conv_dict)\n    ```", "```py\n    print df.head()\n    print\n\n    print df.tail()\n    print\n\n    print df.describe()\n    print\n\n    print df.corr()\n    ```", "```py\n    #EWN start Mar 22, 1996\n    start = dt(1996, 3, 22)\n    end = dt(2013, 5, 4)\n\n    symbol = \"EWN\"\n    quotes = finance.quotes_historical_yahoo(symbol, start, end, asobject=True)\n    ```", "```py\n    df2 = pd.DataFrame(quotes.close, index=dt_idx, columns=[symbol])\n    ```", "```py\n    df3 = df.join(df2)\n\n    print df3.corr()\n    ```", "```py\n    poly = np.polyfit( avg_temp[: cutoff - 1], avg_temp[1 : cutoff], degree)\n    ```", "```py\n    fit = np.polyval(poly, avg_temp[cutoff:-1])\n    ```", "```py\n    delta = np.abs(avg_temp[cutoff + 1:] - fit)\n    ```", "```py\n    A = np.zeros((2, cutoff - 2), float)\n\n    A[0, ] = temp[:cutoff - 2]\n    A[1, ] = temp[1 :cutoff - 1]\n    ```", "```py\n    b = temp[2 : cutoff]\n    ```", "```py\n    (x, residuals, rank, s) = np.linalg.lstsq(A.T, b)\n    print x\n    ```", "```py\n    [-0.08293789  1.06517683]\n    ```", "```py\n    fit = x[0] * temp[cutoff-1:-2] + x[1] * temp[cutoff:-1]\n    ```", "```py\n    delta = np.abs(temp[cutoff + 1:] - fit)\n    ```", "```py\n    plt.hist(delta, bins = 10, normed=True)\n    ```", "```py\n    rng = np.arange(1, 366)\n    avgs = np.zeros(365)\n    avgs2 = np.zeros(365)\n    ```", "```py\n    for i in rng: \n       indices = np.where(days[:cutoff] == i)\n       avgs[i-1] = temp[indices].mean()\n       indices = np.where(days[cutoff+1:] == i)\n       avgs2[i-1] = temp[indices].mean()\n    ```", "```py\n    poly = np.polyfit(rng, avgs, 2)\n    print poly\n    ```", "```py\n    [ -4.91329859e-04   1.92787493e-01  -3.98075418e+00]\n\n    ```", "```py\n    plt.plot(avgs2)\n    plt.plot(np.polyval(poly, rng))\n    plt.show()\n    ```", "```py\n    poly = np.polyfit(days[:cutoff], temp[:cutoff], 2)\n    print poly\n    ```", "```py\n    [ -4.91072584e-04   1.92682505e-01  -3.97182941e+00]\n\n    ```", "```py\n    delta = np.abs(np.polyval(poly, days[cutoff:]) - temp[cutoff:])\n    ```", "```py\n    plt.hist(delta, bins = 10, normed = True)\n    plt.show()\n    ```", "```py\n    def error(p, d, t, lag2, lag1):\n       l2, l1, d2, d1, d0 = p\n\n       return t - l2 * lag2 + l1 * lag1 + d2 * d ** 2 + d1 * d + d0\n    ```", "```py\n    p0 = [-0.08293789,  1.06517683, -4.91072584e-04,   1.92682505e-01,  -3.97182941e+00]\n    ```", "```py\n    params = leastsq(error, p0, args=(days[2:cutoff], temp[2:cutoff], temp[:cutoff - 2], temp[1 :cutoff - 1]))[0]\n    print params\n    ```", "```py\n    [ -1.52297691e-01  -9.89195783e-01   8.20879954e-05  -3.16870659e-02    6.06397834e-01]\n\n    ```", "```py\n    def model(p, d):\n       a, b, w, c = p\n       return a + b * np.cos(w * d + c)\n\n    def error(p, d, t):\n       return t - model(p, d)\n    ```", "```py\n    p0 = [.1, 1, .01, .01]\n    params = leastsq(error, p0, args=(days, temp))[0]\n    print params\n    ```", "```py\n    [ 9.6848106  -7.59870042 -0.01766333 -5.83349705]\n\n    ```", "```py\n    def model(p, ma1):\n       return p * ma1\n    ```", "```py\n    params = leastsq(error, p0, args=(temp[1:cutoff] - mu, temp[:cutoff-1] - mu))[0]\n    print params\n    ```", "```py\n    [ 0.94809073]\n\n    ```", "```py\n    def ar(a):\n       ar_p = [1.06517683, -0.08293789]\n\n       return ar_p[0] * a[1:-1] + ar_p[1] * a[:-2]\n    ```", "```py\n    def model(p, ma1):\n       c0, c1 = p\n\n       return c0 + c1 * ma1\n    ```", "```py\n    err_terms = temp[cutoff+1:] - ar(temp[cutoff-1:])\n    ```", "```py\n    import sys\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from datetime import datetime as dt\n    from scipy.optimize import leastsq\n\n    temp = .1 * np.loadtxt(sys.argv[1], delimiter=',', usecols=(11,), unpack=True)\n    cutoff = 0.9 * len(temp)\n\n    def model(p, ma1):\n       c0, c1 = p\n\n       return c0 + c1 * ma1\n\n    def error(p, t, ma1):\n       return t - model(p, ma1)\n\n    p0 = [.1, .1]\n\n    def ar(a):\n       ar_p = [1.06517683, -0.08293789]\n\n       return ar_p[0] * a[1:-1] + ar_p[1] * a[:-2]\n\n    err_terms = temp[2:cutoff] - ar(temp[:cutoff])\n    params = leastsq(error, p0, args=(err_terms[1:], err_terms[:-1]))[0]\n    print params\n\n    err_terms = temp[cutoff+1:] - ar(temp[cutoff-1:])\n    delta = np.abs(error(params, err_terms[1:], err_terms[:-1]))\n    print \"% delta less than 2\", (100\\. * len(delta[delta <= 2]))/len(delta)\n\n    plt.hist(delta, bins = 10, normed = True)\n    plt.show()\n    ```", "```py\n    [ 0.16506278  0.01041355] \n    % delta less than 2 69.7169350903\n\n    ```", "```py\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime as dt\nfrom scipy.optimize import leastsq\n\nto_ordinal = lambda x: dt.strptime(x, \"%Y%m%d\").toordinal()\nordinals, temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 11), unpack=True, converters={1: to_ordinal})\ndays = np.array([dt.fromordinal(int(d)).timetuple().tm_yday for d in ordinals])\nyears = np.array([dt.fromordinal(int(d)).year for d in ordinals])\ntemp = .1 * temp\ncutoff = 0.9 * len(temp)\n\navgs = np.zeros(366)\n\nfor i in xrange(1, 366):\n   indices = np.where(days[:cutoff] == i)\n   avgs[i-1] = temp[indices].mean()\n\ndef subtract_avgs(a, doy):\n   return a - avgs[doy.astype(int)-1]\n\ndef subtract_trend(a, poly, b):\n   return a - poly[0] * b - poly[1]\n\ndef print_stats(a):\n   print \"Min\", a.min(), \"Max\", a.max(), \"Mean\", a.mean(), \"Std\", a.std()\n   print\n\n## Step 1\\. DOY avgs\nless_avgs = subtract_avgs(temp[:cutoff], days[:cutoff])\nprint \"After Subtracting DOY avgs\"\nprint_stats(less_avgs)\n\n## Step 2\\. Linear trend\ntrend = np.polyfit(years[:cutoff], less_avgs, 1)\nprint \"Trend coeff\", trend\nless_trend = subtract_trend(less_avgs, trend, years[:cutoff])\nprint \"After Subtracting Linear Trend\"\nprint_stats(less_trend)\n\ndef model(p, lag2, lag1):\n   l1, l2 = p\n\n   return l2 * lag2 + l1 * lag1\n\ndef error(p, t, lag2, lag1):\n   return t - model(p, lag2, lag1) \n\np0 = [1.06517683, -0.08293789]\nparams = leastsq(error, p0, args=(less_trend[2:], less_trend[:-2], less_trend[1:-1]))[0]\nprint \"AR params\", params\n\n##Step 1\\. again\nless_avgs = subtract_avgs(temp[cutoff+1:], days[cutoff+1:])\n\n##Step 2\\. again\nless_trend = subtract_trend(less_avgs, trend, years[cutoff+1:])\n\ndelta = np.abs(error(params, less_trend[2:], less_trend[:-2], less_trend[1:-1]))\nprint \"% delta less than 2\", (100\\. * len(delta[delta <= 2]))/len(delta)\n\nplt.hist(delta, bins = 10, normed = True)\nplt.show()\n```", "```py\n    q1 = scoreatpercentile(temp, 25)\n    ```", "```py\n    q3 = scoreatpercentile(temp, 75)\n    ```", "```py\n    indices = np.where(temp < (q1 - N * irq))\n    ```", "```py\n    plt.subplot(211)\n    plt.plot(np.diff(indices)[0])\n    plt.title('Indices Diff')\n    plt.subplot(212)\n    plt.title('Outliers Temperature')\n    plt.plot(outliers)\n    plt.show()\n    ```", "```py\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import scoreatpercentile\nfrom datetime import datetime as dt\n\nto_ordinal = lambda x: dt.strptime(x, \"%Y%m%d\").toordinal()\nordinals, temp = np.loadtxt(sys.argv[1], delimiter=',', usecols=(1, 11), unpack=True, converters={1: to_ordinal})\ntemp = .1 * temp\nq1 = scoreatpercentile(temp, 25)\nprint \"1st Quartile\", q1\nq3 = scoreatpercentile(temp, 75)\nprint \"3rd Quartile\", q3\nirq = q3 - q1\nprint \"Std\", temp.std(), \"IRQ\", irq\nN = 1.5 \nprint len(temp[temp > (q3 + N * irq)])\nindices = np.where(temp < (q1 - N * irq))\n\noutliers =  temp[indices]\nprint \"#Outliers\", len(outliers)\nplt.subplot(211)\nplt.plot(np.diff(indices)[0])\nplt.title('Indices Diff')\nplt.subplot(212)\nplt.title('Outliers Temperature')\nplt.plot(outliers)\nplt.show()\n```", "```py\n    avgs[i-1] = np.median(temp[indices])\n    ```", "```py\n    temp[:cutoff] = ma.masked_array(temp[:cutoff], temp[:cutoff] < (q1 - 1.5 * irq))\n    ```", "```py\nAR params [ 0.95095073 -0.17373633]\n% delta less than 2 70.8567244325\n\n```"]