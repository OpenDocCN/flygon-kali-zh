- en: Chapter 5. Moving Around Containerized Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。在容器化应用程序之间移动
- en: In the last chapter, we covered microservices application architecture deployment
    with the help of Docker containers. In this chapter, we will explore Docker registry
    and how it can be used in public and private modes. We will also dive deeply into
    troubleshooting issues when using public and private Docker registry.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了使用Docker容器部署微服务应用程序架构。在本章中，我们将探讨Docker注册表以及如何在公共和私有模式下使用它。我们还将深入探讨在使用公共和私有Docker注册表时出现问题时的故障排除。
- en: 'We will look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下主题：
- en: Redistributing via Docker registry
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Docker注册表重新分发
- en: Public Docker registry
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共Docker注册表
- en: Private Docker registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私有Docker注册表
- en: Ensuring integrity of images-signed images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保镜像的完整性-签名镜像
- en: '**Docker Trusted Registry** (**DTR**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Trusted Registry**（**DTR**）'
- en: Docker Universal Control Plane
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker通用控制平面
- en: Redistributing via Docker registry
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Docker注册表重新分发
- en: Docker registry is the server-side application that allows the users to store
    and distribute Docker images. By default, public Docker registry (Docker Hub)
    can be used to host multiple Docker images that provides free to use, zero maintenance,
    and additional features such as automated builds and organization accounts. Let's
    take a look at public and private Docker registries in detail.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Docker注册表是服务器端应用程序，允许用户存储和分发Docker镜像。默认情况下，公共Docker注册表（Docker Hub）可用于托管多个Docker镜像，提供免费使用、零维护和自动构建等附加功能。让我们详细看看公共和私有Docker注册表。
- en: Docker public repository (Docker Hub)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker公共存储库（Docker Hub）
- en: 'As explained earlier, Docker Hub allows individuals as well as organizations
    to share the Docker images with its internal teams and customers without the hassle
    of maintaining a cloud based public repository. It provides centralized resource
    image discovery and management. It also provides team collaboration and workflow
    automation for the development pipeline. Some of the additional functions of the
    Docker Hub, besides Image repository management are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面解释的那样，Docker Hub允许个人和组织与内部团队和客户共享Docker镜像，而无需维护基于云的公共存储库。它提供了集中的资源镜像发现和管理。它还为开发流水线提供了团队协作和工作流自动化。除了镜像存储库管理之外，Docker
    Hub的一些附加功能如下：
- en: '**Automated build**: It helps in the creation of new images whenever code is
    changed in the GitHub or Bitbucket repository'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动构建**：它帮助在GitHub或Bitbucket存储库中的代码更改时创建新的镜像'
- en: '**WebHooks**: It is a new feature that allows to trigger an action after successful
    image push to repository'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebHooks**：这是一个新功能，允许在成功将镜像推送到存储库后触发操作'
- en: '**User management**: It allows creating workgroups to manage an organization''s
    user access to image repository'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户管理**：它允许创建工作组来管理组织对镜像存储库的用户访问'
- en: 'An account can be created using the Docker Hub sign-in page in order to host
    the Docker images; each account will be linked to a unique identification user-based
    Docker ID. Basic functions, such as Docker image search and *pull* from the Docker
    Hub, can be performed without creating a Docker Hub account. Images existing in
    the Docker Hub can be explored using this command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Docker Hub登录页面创建帐户以托管Docker镜像；每个帐户将与唯一的基于用户的Docker ID相关联。可以在不创建Docker Hub帐户的情况下执行基本功能，例如从Docker
    Hub进行Docker镜像搜索和*拉取*。可以使用以下命令浏览Docker Hub中存在的镜像：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It will show the existing images in Docker Hub on the basis of the keyword matched.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它将根据匹配的关键字显示Docker Hub中存在的镜像。
- en: 'The Docker ID can also be created using the `docker login` command. The following
    command will prompt to create a Docker ID that will be public namespace for the
    user public repository. It will prompt to enter a `Username`, and it will also
    prompt to enter `Password` and `Email` in order to complete the registration process:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`docker login`命令创建Docker ID。以下命令将提示创建一个Docker ID，该ID将成为用户公共存储库的公共命名空间。它将提示输入`用户名`，还将提示输入`密码`和`电子邮件`以完成注册过程：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In order to log out, the following command can be used:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了注销，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Private Docker registry
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有Docker注册表
- en: Private Docker registry can be deployed inside the local organization; it is
    open-source under Apache license and is easy to deploy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 私有Docker注册表可以部署在本地组织内；它是Apache许可下的开源软件，并且易于部署。
- en: 'Using private Docker registry, you have the following advantages:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用私有Docker注册表，您有以下优势：
- en: The organization can control and keep a watch on the location where Docker images
    are stored
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织可以控制并监视Docker图像存储的位置
- en: The complete image distribution pipeline will be owned by the organization
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的图像分发流程将由组织拥有
- en: Image storage and distribution will be useful for in-house development workflow
    and integration with other DevOps components, such as Jenkins
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像存储和分发对于内部开发工作流程以及与其他DevOps组件（如Jenkins）的集成将非常有用
- en: Pushing images to Docker Hub
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像推送到Docker Hub
- en: 'We can create a customized image that can then be pushed on Docker Hub using
    tagging. Let''s create a simple image with a small terminal-based application.
    Create a Dockerfile with the following content:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个定制的图像，然后使用标记将其推送到Docker Hub。让我们创建一个带有小型基于终端的应用程序的简单图像。创建一个包含以下内容的Dockerfile：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Go to the directory containing the Dockerfile and execute the following command
    to build an image:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 转到包含Dockerfile的目录并执行以下命令来构建图像：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, as shown in the following diagram, we can first create a container
    and test it out and then create a tagged **Docker Image** that can be easily pushed
    to **Docker Hub**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如下图所示，我们可以首先创建一个容器并对其进行测试，然后创建一个带有标记的**Docker图像**，可以轻松地推送到**Docker Hub**：
- en: '![Pushing images to Docker Hub](graphics/image_05_002.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![将图像推送到Docker Hub](graphics/image_05_002.jpg)'
- en: Steps to create a Docker Image from Docker Container and push it to public Docker
    Hub
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker容器创建Docker图像并将其推送到公共Docker Hub的步骤
- en: 'We can check whether the image is created using the following command. As you
    can see, the `test/cowsay-dockerfile` image got created:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查图像是否已创建。如您所见，`test/cowsay-dockerfile`图像已创建：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In order to push the image to Docker Hub account, we will have to tag it with
    the Docker tag/Docker ID using the image ID in the following way:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将图像推送到Docker Hub帐户，我们将不得不使用图像ID对其进行标记，标记为Docker标记/Docker ID，方法如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As the tagged username will match the Docker Hub ID account, we can easily
    push the image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于标记的用户名将与Docker Hub ID帐户匹配，因此我们可以轻松地推送图像：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Pushing images to Docker Hub](graphics/image_05_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![将图像推送到Docker Hub](graphics/image_05_003.jpg)'
- en: Screenshot of Docker Hub
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub的屏幕截图
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One of the troubleshooting issues that can be prechecked is that the username
    tagged on the custom Docker image should meet the username of the Docker Hub account
    in order to push the image successfully. Custom images pushed to a Docker Hub
    will be made publicly available. Docker provides one private repository for free,
    which should be used in order to push the private images. The Docker client version
    1.5 and earlier will not be able to push the images to Docker Hub account, but
    will still be able to pull the images. Only version 1.6 or later are supported.
    Thus, it is always advised to keep the Docker version up to date.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以预先检查的故障排除问题之一是，自定义Docker镜像上标记的用户名应与Docker Hub帐户的用户名匹配，以便成功推送镜像。推送到Docker Hub的自定义镜像将公开可用。Docker免费提供一个私有仓库，应该用于推送私有镜像。Docker客户端版本1.5及更早版本将无法将镜像推送到Docker
    Hub帐户，但仍然可以拉取镜像。只支持1.6或更高版本。因此，建议始终保持Docker版本最新。
- en: If the push to Docker Hub fails with a **500 Internal Server Error**, the issue
    is related to Docker Hub infrastructure and a repush might be helpful. If the
    issue persists while pushing the Docker image, Docker logs should be referred
    at `/var/log/docker.log in` in order to debug in detail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果向Docker Hub推送失败并出现**500内部服务器错误**，则问题与Docker Hub基础设施有关，重新推送可能有帮助。如果在推送Docker镜像时问题仍然存在，则应参考`/var/log/docker.log`中的Docker日志以进行详细调试。
- en: Installing a private local Docker registry
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装私有本地Docker注册表
- en: 'The private Docker registry can be deployed using the image that exists on
    the Docker Hub. The port mapped to access the private Docker registry will be
    `5000`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用存在于Docker Hub上的镜像部署私有Docker注册表。映射到访问私有Docker注册表的端口将是`5000`：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we will the tag the same image created in the preceding tutorial to `localhost:5000/cowsay-dockerfile`
    so that the repository name and the image name that match can be easily pushed
    to private Docker registry:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在前面教程中创建的相同镜像标记为`localhost:5000/cowsay-dockerfile`，以便可以轻松地将匹配的仓库名称和镜像名称推送到私有Docker注册表：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Push the image to private Docker registry:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将镜像推送到私有Docker注册表：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The push refers to a repository (`localhost:5000/cowsay-dockerfile`) (len:
    1):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 推送是指一个仓库（`localhost:5000/cowsay-dockerfile`）（长度：1）：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Image ID can be seen by visiting the link in browser or using the `curl` command
    that comes up after pushing the image.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过访问浏览器中的链接或使用`curl`命令来查看镜像ID，该命令在推送镜像后会出现。
- en: Moving images in between hosts
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在主机之间移动镜像
- en: 'Moving an image from one registry to another requires pushing and pulling the
    image from Internet. If the image is required to be moved from one host to another,
    then it can be simply achieved with the help of the `docker save` command, without
    the overhead of uploading and downloading the image. Docker provides two different
    types of methods in order to save container image to tar ball:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个镜像从一个注册表移动到另一个注册表需要从互联网上推送和拉取镜像。如果需要将镜像从一个主机移动到另一个主机，那么可以简单地通过`docker save`命令来实现，而不需要上传和下载镜像。Docker提供了两种不同的方法来将容器镜像保存为tar包：
- en: '`docker export`: This saves a container''s running or paused state to a tar
    file'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker export`：这将一个容器的运行或暂停状态保存到一个tar文件中'
- en: '`docker save`: This saves a non-running container image to a file'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker save`：这将一个非运行的容器镜像保存到一个文件中'
- en: 'Let''s compare the `docker export` and `docker save` commands with the help
    of the following tutorial:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下教程来比较`docker export`和`docker save`命令：
- en: 'Using export, pull a basic image from Docker Hub:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用export，从Docker Hub拉取一个基本的镜像：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s create a sample file after running the Docker container from the preceding
    image:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在从上述镜像运行Docker容器后，让我们创建一个示例文件：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the other shell, we can see the running Docker container and then it can
    be exported into a tar file using the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个shell中，我们可以看到正在运行的Docker容器，然后可以使用以下命令将其导出到tar文件中：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The tar file can then be exported to another machine and then imported using
    the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将tar文件导出到另一台机器，然后使用以下命令导入：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After we run the container from the Ubuntu-sample image in another machine,
    we can find the sample file intact:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一台机器上从Ubuntu-sample图像运行容器后，我们可以发现示例文件完好无损。
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using save, in order to transport the image in spite of the running Docker
    container as shown in the preceding tutorial, we can use the `docker save` command
    that will convert the image into a tar file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用save命令，以便在运行Docker容器的情况下传输图像，我们可以使用`docker save`命令将图像转换为tar文件：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `ubuntu-bundle.tar.gz` file can now be extracted and used in the other
    machine using the `docker load` command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`ubuntu-bundle.tar.gz`文件现在可以使用`docker load`命令在另一台机器上提取并使用：'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running the container from the `ubuntu-bundle` image in the other machine,
    we will find out that the sample file does not exist as the `docker load` command
    will store the image with zero complaints:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一台机器上从`ubuntu-bundle`图像运行容器，我们会发现示例文件不存在，因为`docker load`命令将存储图像而不会有任何投诉：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Both the preceding examples show the difference between the export and save
    commands as well as their use in order to transport the images across local hosts
    without the use of Docker registry.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子都展示了导出和保存命令之间的区别，以及它们在不使用Docker注册表的情况下在本地主机之间传输图像的用法。
- en: Ensuring integrity of images - signed images
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保图像的完整性-签名图像
- en: 'From Docker version 1.8, the feature included is Docker container trust that integrates
    **The Update Framework** (**TUF**) into Docker using Notary, an open source tool
    which provides trust over any content or data. It allows the verification of the
    publisher-Docker Engine uses the publisher key in order to verify that-and the
    image that the user is about to run is exactly what the publisher has created;
    it has not been tampered with and is up to date. Thus, it is an opt-in feature
    that allows verification of the publisher of the image. Docker central commands-*push*,
    *pull*, *build*, *create* and *run-*will operate on the images that either have
    content signatures or explicit content hashes. The images are signed with private
    keys by the content publisher before they are pushed to a repository. A trust
    gets established with publisher when the user interacts with the image for the
    first time, then all the subsequent interactions require only a valid signature
    from the same publisher. The model is similar to the first model of SSH that is
    familiar to us. Docker content trust uses two keys-**offline key** and **tagging
    key**-which are generated for the first time when the publisher pushes an image.
    Each repository has its own tagging key. When users run the `docker pull` command
    for the first time, the trust to repository is established using the offline key:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker版本1.8开始，包含的功能是Docker容器信任，它将**The Update Framework**（**TUF**）集成到Docker中，使用开源工具Notary提供对任何内容或数据的信任。它允许验证发布者-Docker引擎使用发布者密钥来验证，并且用户即将运行的图像确实是发布者创建的；它没有被篡改并且是最新的。因此，这是一个允许验证图像发布者的选择性功能。
    Docker中央命令-*push*，*pull*，*build*，*create*和*run-*将对具有内容签名或显式内容哈希的图像进行操作。图像在推送到存储库之前由内容发布者使用私钥进行签名。当用户第一次与图像交互时，与发布者建立了信任，然后所有后续交互只需要来自同一发布者的有效签名。该模型类似于我们熟悉的SSH的第一个模型。
    Docker内容信任使用两个密钥-**离线密钥**和**标记密钥**-当发布者推送图像时，它们在第一次生成。每个存储库都有自己的标记密钥。当用户第一次运行`docker
    pull`命令时，使用离线密钥建立了对存储库的信任：
- en: '**Offline key**: It is the root of trust for your repository; different repositories
    use the same offline key. This key should be kept offline as it has advantages
    against certain classes of attacks. Basically, this key is required during creation
    of a new repository.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离线密钥：它是您存储库的信任根源；不同的存储库使用相同的离线密钥。由于具有针对某些攻击类别的优势，应将此密钥保持离线。基本上，在创建新存储库时需要此密钥。
- en: '**Tagging key**: It is generated for each new repository that the publisher
    owns. It can be exported and shared with the person who requires the ability to
    sign content for the specific repository.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记密钥**：为发布者拥有的每个新存储库生成。它可以导出并与需要为特定存储库签署内容的人共享。'
- en: 'Here''s a list of the protection provided by following the trust key structure:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是按照信任密钥结构提供的保护列表：
- en: '**Protection against image forgery**: Docker content trust provides protection
    from man-in-the middle attacks. In case a registry is compromised, the malicious
    attacker cannot tamper with the content and serve it to users as every run command
    will fail stating the message unable to verify the content.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防止图像伪造**：Docker内容信任可防止中间人攻击。如果注册表遭到破坏，恶意攻击者无法篡改内容并向用户提供，因为每次运行命令都会失败，显示无法验证内容的消息。'
- en: '**Protection against reply attacks**: In case of replay attacks, the previous
    payloads are used by attackers to trick the system. Docker content trust makes
    use of the timestamp key when publishing the image, thus providing protection
    against replay attacks and ensuring that a user receives the most up to date content.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防止重放攻击**：在重放攻击的情况下，攻击者使用先前的有效负载来欺骗系统。Docker内容信任在发布图像时使用时间戳密钥，从而提供对重放攻击的保护，并确保用户接收到最新的内容。'
- en: '**Protection against key compromise**: The tagging key might get compromised
    due to its online nature, and it is needed every time new content is pushed to
    the repository. Docker content trust allows publisher to rotate the compromised
    key transparently to user and effectively remove it from the system.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防止密钥被破坏**：由于标记密钥的在线特性，可能会遭到破坏，并且每次将新内容推送到存储库时都需要它。Docker内容信任允许发布者透明地旋转受损的密钥，以便用户有效地将其从系统中删除。'
- en: Docker content trust is enabled through integration of Notary into Docker Engine.
    Notary can be downloaded and implemented by anyone who wants to digitally sign
    and verify arbitrary collection of content. Basically, it is the utility for securely
    publishing and verifying content over distributed insecure networks. In the following
    sequence diagram, we can see the flow as to how Notary server is used to verify
    the metadata files and their integration with Docker client. Trusted collections
    will be stored in a Notary server and once Docker client has a trusted list of
    named hashes (tags), it can utilize the Docker remote APIs from client to daemon.
    Once the pull succeeds, we can trust all the content on manifests and layers in
    registry pulls.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Docker内容信任是通过将Notary集成到Docker引擎中实现的。任何希望数字签名和验证任意内容集合的人都可以下载并实施Notary。基本上，这是用于在分布式不安全网络上安全发布和验证内容的实用程序。在以下序列图中，我们可以看到Notary服务器用于验证元数据文件及其与Docker客户端的集成的流程。受信任的集合将存储在Notary服务器中，一旦Docker客户端具有命名哈希（标记）的受信任列表，它就可以利用客户端到守护程序的Docker远程API。一旦拉取成功，我们就可以信任注册表拉取中的所有内容和层。
- en: '![Ensuring integrity of images - signed images](graphics/image_05_004.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![确保图像的完整性-签名图像](graphics/image_05_004.jpg)'
- en: Sequence diagram for Docker trusted run
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker受信任运行的序列图
- en: Internally, Notary uses TUF, a secure general design for software distribution
    and updates that are often vulnerable to attacks. TUF addresses the widespread
    problem by providing a comprehensive, flexible-security framework that the developers
    can integrate with the software update system. Generally, the software update
    system is an application running on a client system that obtains and installs
    software.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，Notary使用TUF，这是一个用于软件分发和更新的安全通用设计，通常容易受到攻击。TUF通过提供一个全面的、灵活的安全框架来解决这个普遍的问题，开发人员可以将其与软件更新系统集成。通常，软件更新系统是在客户端系统上运行的应用程序，用于获取和安装软件。
- en: 'Let''s get started with installing Notary; On Ubuntu 16.04, Notary can be directly
    installed using this command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始安装Notary；在Ubuntu 16.04上，可以直接使用以下命令安装Notary：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Otherwise the project can be downloaded from GitHub and can be manually built
    and installed; Docker Compose is required to be installed in order to build the
    project:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，该项目可以从GitHub下载并手动构建和安装；构建该项目需要安装Docker Compose：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After the preceding steps, add `127.0.0.1` Notary server to the `/etc/hosts`
    or, if a Docker machine is used, add `$(docker-machine ip)` to the Notary server.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述步骤之后，将`127.0.0.1` Notary服务器添加到`/etc/hosts`中，或者如果使用Docker机器，则将`$(docker-machine
    ip)`添加到Notary服务器。
- en: 'Now, we will push the `docker-cowsay` image that we created previously. By
    default, content trust is disabled; it can be enabled with the help of the `DOCKER_CONTENT_TRUST` environment
    variable,  which will be done later in this tutorial. Currently, the commands
    that operate with content trust are as shown:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将推送之前创建的`docker-cowsay`镜像。默认情况下，内容信任是禁用的；可以使用`DOCKER_CONTENT_TRUST`环境变量来启用它，这将在本教程中稍后完成。目前，操作内容信任的命令如下所示：
- en: push
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: push
- en: build
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: build
- en: create
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: create
- en: pull
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pull
- en: run
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: run
- en: 'We will tag the image with the repository name:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用仓库名称标记该镜像：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s check whether notary has data for this image:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查notary是否有这个镜像的数据：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As we can see here, there is no trust data that lets us enable the `DOCKER_CONTENT_TRUST`
    flag and then try to push the image:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里所看到的，没有信任数据可以让我们启用`DOCKER_CONTENT_TRUST`标志，然后尝试推送该镜像：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As we can see here, for the first time push, it will ask for the passphrase
    in order to sign the tagged image.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在这里所看到的，第一次推送时，它将要求输入密码来签署标记的镜像。
- en: 'Now we will be getting the trust data from the Notary for the latest image
    pushed previously:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从Notary获取先前推送的最新镜像的信任数据：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With the help of the preceding example, we clearly get to know the working of
    Notary as well as Docker content trust.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 借助上面的例子，我们清楚地了解了Notary和Docker内容信任的工作原理。
- en: Docker Trusted Registry (DTR)
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Trusted Registry (DTR)
- en: DTR provides enterprise grade Docker image storage on-premises as well as in
    the virtual private cloud to provide security and meet regulatory compliances.
    DTR runs on top of Docker **Universal Control Plane** (**UCP**), which can be
    installed on-premises or on top of the virtual private cloud, with the help of
    which we can store the Docker images securely behind a firewall.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: DTR提供企业级的Docker镜像存储，可以在本地以及虚拟私有云中提供安全性并满足监管合规要求。DTR在Docker Universal Control
    Plane (UCP)之上运行，UCP可以在本地或虚拟私有云中安装，借助它我们可以将Docker镜像安全地存储在防火墙后面。
- en: '![Docker Trusted Registry (DTR)](graphics/image_05_005.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Docker Trusted Registry (DTR)](graphics/image_05_005.jpg)'
- en: DTR running on UCP node
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: DTR在UCP节点上运行
- en: 'The two most important features of DTR are as listed:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: DTR的两个最重要的特性如下：
- en: '**Image management**: It allows the user to store Docker images securely behind
    firewall and DTR can be easily made as part of the continuous integration and
    delivery process in order to build, run, and ship applications.![Docker Trusted
    Registry (DTR)](graphics/image_05_006.jpg)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像管理**：它允许用户在防火墙后安全存储Docker镜像，并且DTR可以轻松地作为持续集成和交付过程的一部分，以构建、运行和交付应用程序。![Docker受信任的注册表（DTR）](graphics/image_05_006.jpg)'
- en: Screenshot of DTR
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DTR的屏幕截图
- en: '**Access control and built-in security**: DTR provides authentication mechanism
    in order to add users as well as integrates with **Lightweight Directory Access
    Protocol** (**LDAP**) and Active Directory. It supports **role-based authentication**
    (**RBAC**) as well, which allows you to assign access control policies for each
    user.![Docker Trusted Registry (DTR)](graphics/image_05_007.jpg)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制和内置安全性**：DTR提供身份验证机制，以添加用户，并集成了**轻量级目录访问协议**（**LDAP**）和Active Directory。它还支持**基于角色的身份验证**（**RBAC**），允许您为每个用户分配访问控制策略。![Docker受信任的注册表（DTR）](graphics/image_05_007.jpg)'
- en: User authentication options in DTR
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: DTR中的用户身份验证选项
- en: Docker Universal Control Plane
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker通用控制平面
- en: Docker UCP is the enterprise-grade cluster management solution that allows you
    to manage the Docker containers from a single platform. It also allows you to
    manage thousands of nodes, which can be managed and monitored with a graphical
    UI.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Docker UCP是企业级集群管理解决方案，允许您从单个平台管理Docker容器。它还允许您管理数千个节点，并可以通过图形用户界面进行管理和监控。
- en: 'UCP has two important components:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: UCP有两个重要组件：
- en: '**Controller**: It manages the cluster and persists the cluster configurations'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：管理集群并保留集群配置'
- en: '**Node**: Multiple nodes can be added to cluster in order to run the containers'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：可以添加多个节点到集群中以运行容器'
- en: UCP can be installed using the sandbox installation on top of Mac OS X or Windows
    system using **Docker Toolbox**. Installation consists of a UCP controller and
    one or more hosts that will be added as nodes in the UCP cluster using Docker
    Toolbox.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Mac OS X或Windows系统上的**Docker Toolbox**进行沙盒安装UCP。安装包括一个UCP控制器和一个或多个主机，这些主机将作为节点添加到UCP集群中，使用Docker
    Toolbox。
- en: A prerequisite for Docker Toolbox is that it is required to be installed for
    Mac OS X and Windows system using the installer available at the official Docker
    website.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox的先决条件是必须在Mac OS X和Windows系统上安装，使用官方Docker网站提供的安装程序。
- en: '![Docker Universal Control Plane](graphics/image_05_008.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Docker通用控制平面](graphics/image_05_008.jpg)'
- en: Docker Toolbox Installation
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Toolbox安装
- en: 'Let''s get started with the deployment of Docker UCP:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始部署Docker UCP：
- en: After the installation, launch the Docker Toolbox terminal:![Docker Universal
    Control Plane](graphics/image_05_009.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，启动Docker Toolbox终端：![Docker通用控制平面](graphics/image_05_009.jpg)
- en: Docker Quickstart Terminal
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Quickstart终端
- en: 'Create a virtual machine named `node1` using the `docker-machine` command and
    `virtualbox` that will act as UCP controller:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker-machine`命令和`virtualbox`创建一个名为`node1`的虚拟机，该虚拟机将充当UCP控制器：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a `node2` VM as well, which will be configured as a UCP node later:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要创建一个名为`node2`的虚拟机，稍后将其配置为UCP节点：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Configure `node1` as a UCP controller, which will be responsible for serving the
    UCP application and running the processes to manage Docker objects'' installation.
    Before that, set the environment to configure `node1` as a UCP controller:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`node1`配置为UCP控制器，负责提供UCP应用程序并运行管理Docker对象安装的过程。在此之前，设置环境以将`node1`配置为UCP控制器：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'While setting the `node1` as a UCP controller, it will ask for the password
    for the UCP admin account and additional aliases will be asked for, which can
    be added or skipped with the enter command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将`node1`设置为UCP控制器时，它将要求输入UCP管理员帐户的密码，并且还将要求输入其他别名，可以使用enter命令添加或跳过：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The UCP console can be accessed using the URL provided at the end of installation;
    log in with `admin` as the username and the password that you set previously while
    installing.![Docker Universal Control Plane](graphics/image_05_010.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UCP控制台可以使用安装结束时提供的URL访问；使用`admin`作为用户名和之前安装时设置的密码登录。![Docker Universal Control
    Plane](graphics/image_05_010.jpg)
- en: Docker UCP license page
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Docker UCP许可证页面
- en: After logging in, the trail license can be added or skipped. The trail license
    can be downloaded by following the link on the UCP dashboard on the Docker website.
    The UCP console with multiple options such as listing application, container,
    and nodes:![Docker Universal Control Plane](graphics/image_05_011.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，可以添加或跳过试用许可证。可以通过在Docker网站上的UCP仪表板上的链接下载试用许可证。UCP控制台具有多个选项，如列出应用程序、容器和节点：![Docker
    Universal Control Plane](graphics/image_05_011.jpg)
- en: Docker UCP management dashboard
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Docker UCP管理仪表板
- en: 'Join UCP `node2` to the controller first by setting the environment:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先通过设置环境将UCP的`node2`加入控制器：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the node to UCP controller using the following command. UCP controller
    URL, username, and password will be asked for, as illustrated:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将节点添加到UCP控制器。将要求输入UCP控制器URL、用户名和密码，如图所示：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The installation of UCP is complete; now DTR can be installed on `node2` by
    pulling the official DTR image from Docker Hub. UCP URL, username, password, and
    certificate will also be required in order to complete the DTR installation:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UCP的安装已完成；现在可以通过从Docker Hub拉取官方DTR镜像来在`node2`上安装DTR。为了完成DTR的安装，还需要UCP URL、用户名、密码和证书：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After the successful installation, DTR can be listed as an application in the
    UCP UI:![Docker Universal Control Plane](graphics/image_05_012.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装成功后，DTR可以在UCP UI中列为一个应用程序：![Docker Universal Control Plane](graphics/image_05_012.jpg)
- en: Docker UCP listing all the applications
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Docker UCP列出所有应用程序
- en: The DTR UI can be accessed using the `http://node2` URL. The new repository
    can be created by clicking on the **New repository** button:![Docker Universal
    Control Plane](graphics/image_05_013.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DTR UI可以使用`http://node2` URL访问。单击**新存储库**按钮即可创建新存储库：![Docker Universal Control
    Plane](graphics/image_05_013.jpg)
- en: Creating a new private registry in DTR
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在DTR中创建新的私有注册表
- en: The images can be pushed and pulled from the secured DTR created previously
    and the repository can be made private as well in order to keep the internal company-wide
    containers secured.![Docker Universal Control Plane](graphics/image_05_014.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从之前创建的安全DTR中推送和拉取镜像，并且还可以将存储库设置为私有，以便保护公司内部的容器。![Docker Universal Control
    Plane](graphics/image_05_014.jpg)
- en: Creating a new private registry in DTR
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在DTR中创建新的私有注册表
- en: DTR can be configured using the **Settings** option from the menu that allows
    to set the domain name, TLS certificate, and storage backend for Docker images.![Docker
    Universal Control Plane](graphics/image_05_015.jpg)
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用**设置**选项从菜单中配置DTR，该选项允许设置Docker镜像的域名、TLS证书和存储后端。![Docker Universal Control
    Plane](graphics/image_05_015.jpg)
- en: Settings option in DTR
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: DTR中的设置选项
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we dived deeply into Docker registry. We started with the basic
    concepts of a Docker public repository using Docker Hub and the use-case of sharing
    containers with a larger audience. Docker also provides the option to deploy a
    private Docker registry that we looked into and that can be used to push, pull,
    and share the Docker containers internally in the organization. Then, we looked
    into tagging and ensuring the integrity of Docker containers by signing them with
    the help of a Notary server, which can be integrated with Docker Engine. A more
    robust solution is provided with the help of DTR, which provides enterprise grade
    Docker image storage on-premises as well as in the virtual private cloud to provide
    security and meet regulatory compliances. It runs on top of the Docker UCP, as
    shown in the preceding detailed installation steps. I hope this chapter has helped
    you troubleshoot and learn the latest trends in Docker registry. In the next chapter,
    we will look into making containers work with the help of privileged containers
    and their resource sharing.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Docker注册表。我们从使用Docker Hub的Docker公共存储库的基本概念开始，并讨论了与更大观众共享容器的用例。Docker还提供了部署私有Docker注册表的选项，我们研究了这一点，并可以用于在组织内部推送、拉取和共享Docker容器。然后，我们研究了通过使用Notary服务器对Docker容器进行签名来标记和确保其完整性，该服务器可以与Docker
    Engine集成。DTR提供了更强大的解决方案，它在本地以及虚拟私有云中提供企业级Docker镜像存储，以提供安全性并满足监管合规要求。它在Docker UCP之上运行，如前面详细的安装步骤所示。我希望本章能帮助您解决问题并了解Docker注册表的最新趋势。在下一章中，我们将探讨如何通过特权容器和资源共享使容器正常工作。
