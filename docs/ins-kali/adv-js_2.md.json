["```php\nfunction foo( x ) { return 2 * x; }\nfunction bar( y ) { return foo( y + 5 ) - 10; }\nconsole.log( bar( 15 ) ); // Expected output: 30\n```", "```php\nQueue: { event: 'click', target: 'button1', handler: clickHandler }, { event: 'click', target: 'button2', handler: clickHandler }\n```", "```php\nsetTimeout( () => { \n\u00a0\u00a0// WARNING: this may take a long time to run on a slow computer\n\u00a0\u00a0// Try with smaller numbers first\n\u00a0\u00a0for( let i = 0; i < 2000000000; i++ ) {}\n\u00a0\u00a0console.log( 'done delaying' );\n}, 0 );\nsetTimeout( () => { console.log( 'done!' ) }, 0 );\n```", "```php\nsetTimeout( () => { console.log( 'step1' ) }, 0 );\nsetTimeout( () => { console.log( 'done!' ) }, 0 );\nconsole.log( 'step0' );\n//Expected output:\n// step0\n// step1\n// done!\n```", "```php\nstep 0\nstack: <global>\nqueue: <empty>\nheap: <empty>\n```", "```php\nfunction f1() { console.log( 'f1' ); }\nfunction f2() { console.log( 'f2' ); }\nfunction f3() {\n\u00a0\u00a0console.log( 'f3' );\n\u00a0\u00a0setTimeout( f5, 90 );\n}\nfunction f4() { console.log( 'f4' ); }\nfunction f5() { console.log( 'f5' ); }\nsetTimeout( f1, 105 );\nsetTimeout( f2, 15 );\nsetTimeout( f3, 10 );\nsetTimeout( f4, 100 );\n```", "```php\nTwitterAPI.listFollowers( { user_id: \"example_user\" }, (err, result) => {   \n\u00a0\u00a0console.log( err, result ); \n} );\n```", "```php\nTwitterAPI.listFollowers( { user_id: \"example_user\" }, (err, result) => {   \n\u00a0\u00a0if ( err ) {\n\u00a0\u00a0\u00a0\u00a0// HANDLE ERROR\n\u00a0\u00a0}\n\u00a0\u00a0console.log( err, result ); \n} );\n```", "```php\nTwitterAPI.listFollowers( { user_id: \"example_user\" }, (err, result) => { \n\u00a0\u00a0if ( err ) { throw err; }\n\u00a0\u00a0TwitterAPI.unfollow( { user_id: result[ 0 ].id }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0if ( err ) { throw err; }\n\u00a0\u00a0\u00a0\u00a0console.log( \"Unfollowed someone!\" );\n\u00a0\u00a0} );\n\u00a0} );\n```", "```php\nTwitterAPI.listFollowers( { user_id: \"example_user\" }, (err, result) => { \n\u00a0\u00a0const [ id1, id2, id3 ] = [ result[ 0 ].id, result[ 1 ].id, result[ 2 ].id ];\n\u00a0\u00a0TwitterAPI.unfollow( { user_id: id1 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0TwitterAPI.block( { user_id: id1 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TwitterAPI.unfollow( { user_id: id2 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TwitterAPI.block( { user_id: id2 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TwitterAPI.unfollow( { user_id: id3 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TwitterAPI.block( { user_id: id3 }, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log( \"Unfollowed and blocked 3 users!\" );\n```", "```php\nfunction listHandler( err, result ) {\n\u00a0\u00a0TwitterAPI.unfollow( { user_id: result[ 0 ].id }, unfollowHandler );\n}\nfunction unfollowHandler( err, result) {\n\u00a0\u00a0TwitterAPI.block( { user_id: result.id }, blockHandler );\n}\nfunction blockHandler( err, result ) {\n\u00a0\u00a0console.log( \"User unfollowed and blocked!\" );\n}\nTwitterAPI.listFollowers( { user_id: \"example_user\" }, listHandler);\n```", "```php\nFunction apiFunction( args, callback ){\n\u00a0\u00a0if ( !callback || !( typeof callback === \"function\" ) ){\n\u00a0\u00a0\u00a0\u00a0throw new Error( \"Invalid callback. Provide a function.\" );\n\u00a0\u00a0}\n\u00a0\u00a0let result = {};\n\u00a0\u00a0let err = null;\n\u00a0\u00a0// Do work\n\u00a0\u00a0// Set err and result\n\u00a0\u00a0callback( err, result );\n}\n```", "```php\nfunction higherOrder( data, cb ) {\n\u00a0if ( !cb || !( typeof cb === 'function' ) ) {\n\u00a0\u00a0\u00a0throw new Error( 'Invalid callback. Please provide a function.' );\n\u00a0}\n\u00a0console.log( data );\n\u00a0setTimeout( cb, 10 );\n}\ntry {\n\u00a0higherOrder( 1, null );\n} catch ( err ) {\n\u00a0console.log( 'Got error: ${err.message}' );\n}\nhigherOrder( 1, () => {\n\u00a0console.log( 'Callback Called!' )\n} );\n```", "```php\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0// Do asynchronous work here and call resolve or reject\n} );\n```", "```php\n// Reject promise with an error\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0// Do asynchronous work here\n\u00a0\u00a0reject( new Error( 'Oh no! Promise was rejected' ) );\n} );\n```", "```php\n// Resolve the promise with a value\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0// Do asynchronous work here\n\u00a0\u00a0resolve( { key1: 'value1' } );\n} );\n```", "```php\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0setTimeout( () => { resolve( 'Done!' ) }, 1000 )\n} );\n```", "```php\n// Resolve the promise with a value or reject with an error\nmyPromise.then( \n\u00a0\u00a0( result ) => { /* handle result */ }, // Promise fulfilled handler\n\u00a0\u00a0( err ) => { /* handle error here */ } // Promise rejected handler\n\u00a0) ;\n```", "```php\n// Resolve the promise with a value\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0// Do asynchronous work here\n\u00a0\u00a0resolve( 'Promise was resolved!' );\n} );\nmyPromse.then( value => console.log( value ) );\n// Expected output: 'Promise was resolved'\n```", "```php\n// Reject the promise with a value\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0// Do asynchronous work here\n\u00a0\u00a0reject( new Error ( 'Promise was rejected!' ) );\n} );\nmyPromse.then( () => {}, error => console.log( error) );\n// Expected output: Error: Promise was rejected! \n// ** output stack trace omitted\n```", "```php\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0console.log( 'Starting asynchronous work!' );\n\u00a0\u00a0setTimeout( () => { resolve( 'Done!' ); }, 1000 );\n} );\nmyPromise.then( value => console.log( value ) );\n```", "```php\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0reject( new Error 'Promise was resolved!' );\n} );\nmyPromise.catch( err => console.log( err ) );\n```", "```php\n// Resolve the promise with a value\nconst myPromise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0resolve( 'Promise was resolved!' );\n} );\nmyPromse.finally( value => { \n\u00a0\u00a0console.log( 'Finally!' );\n\u00a0} );\n// Expected output:\n// Finally!\n```", "```php\nPromise.resolve( 'Resolve value!' ).then( console.log );\nPromise.reject( 'Reject value!' ).catch( console.log );\n//Expected output:\n// Resolve value!\n// Reject value!\n```", "```php\nfunction apiCall1( result ) { // Function that returns a promise\n\u00a0return new Promise( ( resolve, reject ) => { \n\u00a0\u00a0\u00a0\u00a0resolve( 'value1' );\n\u00a0\u00a0} );\n}\nfunction apiCall2( result ) {// Function that returns a promise\n\u00a0\u00a0return new Promise( ( resolve, reject ) => { \n\u00a0\u00a0\u00a0\u00a0resolve( 'value2' );\n\u00a0\u00a0} );\n}\nmyPromse.then( apiCall1 ).then( apiCall2 ).then( result =>  console.log( 'done!') ) ;\n```", "```php\n// Promise chain handles rejection and continues\n// apiCall1 is a function that returns a rejected promise\n// apiCall2 is a function that returns a resolved promise\n// apiCall3 is a function that returns a resolved promise\n// errorHandler1 is a function that returns a resolved promise\nmyPromse.then( apiCall1 ).then( apiCall2, errorHandler1 ).then( apiCall3 ).catch( errorHandler2 );\n```", "```php\n// Promise chain handles rejection and continues\n// apiCall1 returns a rejected promise\nmyPromse.then( apiCall1 ).then( apiCall2 ).then( apiCall3 ).catch( errorHandler1 );\n```", "```php\n// Create promises\nlet promise1 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 10 ), 100 ) );\nlet promise2 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 20 ), 200 ) );\nlet promise3 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 30 ), 10 ) );\nPromise.all( [ promise1, promise2, promise3 ] ).then( results => console.log( results ) );\n//Expected output: [ 10, 20, 30 ]\n```", "```php\n// Create promises\nlet promise1 = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0setTimeout( () => { reject( 'Error 1' ); }, 100 );\n} );\nlet promise2 = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0setTimeout( () => { reject( 'Error 2' ); }, 200 );\n} );\nlet promise3 = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0setTimeout( () => { reject( 'Error 3' ); }, 10 );\n} );\nPromise.all( [ promise1, promise2, promise3 ] ).then( console.log ).catch( console.log );\n// Expected output: \n// Error: Error 3\n```", "```php\n// Create promises\nlet promise1 = new Promise( ( resolve, reject ) => setTimeout( resolve( 10 ), 100 ) );\nlet promise2 = new Promise( ( resolve, reject ) => setTimeout( resolve( 20 ), 200 ) );\nlet promise3 = new Promise( ( resolve, reject ) => setTimeout( resolve( 30 ), 10 ) );\nPromise.race( [ promise1, promise2, promise3 ] ).then( result => console.log( result ) );\n//Expected output: 30\n```", "```php\n// Promise function to be wrapped\nfunction promiseFn( args ){\n\u00a0\u00a0return new Promise( ( resolve, reject ) => {\n\u00a0\u00a0\u00a0\u00a0/* do work */ \n\u00a0\u00a0\u00a0\u00a0/* resolve or reject */\n\u00a0\u00a0} );\n}\n// Wrapper function\nfunction wrapper( promiseFn, args,  callback ){\n\u00a0\u00a0promiseFn( args ).then( value => callback( null, value )\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.catch( err => callback( err, null );\n}\n```", "```php\n// Callback function to be wrapped\nfunction wrappedFn( args, cb ){\n\u00a0\u00a0/* do work */ \n\u00a0\u00a0/* call cb with error or result */\n}\n// Wrapper function\nfunction wrapper( wrappedFn, args ){\n\u00a0\u00a0return new Promise( ( resolve, reject ) => {\n\u00a0\u00a0\u00a0\u00a0wrappedFn( args, ( err, result ) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if( err ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return reject( err );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve( result );\n\u00a0\u00a0\u00a0\u00a0} );\n\u00a0\u00a0} );\n}\n```", "```php\nfunction promiseFunction( data ) {\n\u00a0return new Promise( ( resolve, reject ) => {\n\u00a0\u00a0\u00a0setTimeout( () => {\n\u00a0\u00a0\u00a0\u00a0\u00a0console.log( data );\n\u00a0\u00a0\u00a0\u00a0\u00a0if ( typeof data === 'number' ) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return reject( new Error( 'Data cannot be of type \\'number\\'.' ) );\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0resolve( 'Success!' );\n\u00a0\u00a0\u00a0}, 10 );\n\u00a0} );\n}\npromiseFunction( 1 ).then( console.log ).catch( err => console.log( 'Error: ${err.message}' ) );\npromiseFunction( 'test' ).then( console.log ).catch( err => console.log( 'Error: ${err.message}' ) );\n```", "```php\nasync function asyncExample( /* arguments */  ){ /* do work */ }\n```", "```php\nasync function example1( ){ return 'Hello'; }\nasync function example2( ){ return Promise.resolve( 'World' ); }\nexample1().then( console.log ); // Expected output: Hello\nexample2().then( console.log ); // Expected output: World\n```", "```php\nasync function awaitExample( /* arguments */ ){ \n\u00a0\u00a0let promise = new Promise( ( resolve, reject ) => {\n\u00a0\u00a0\u00a0\u00a0setTimeout( () => resolve( 'done!'), 100 );\n\u00a0\u00a0});\n\u00a0\u00a0const result = await promise;\n\u00a0\u00a0console.log( result ); // Expected output: done!\n}\nawaitExample( /* arguments */ );\n```", "```php\nasync function errorExample1( /* arguments */ ){ \n\u00a0\u00a0return Promise.reject( 'Rejected!' );\n}\nasync function errorExample2( /* arguments */ ){ \n\u00a0\u00a0throw 'Rejected!';\n}\nasync function errorExample3( /* arguments */ ){ \n\u00a0\u00a0await Promise.reject( 'Rejected!' );\n}\nerrorExample1().catch( console.log ); // Expected output: Rejected!\nerrorExample2().catch( console.log ); // Expected output: Rejected!\nerrorExample3().catch( console.log ); // Expected output: Rejected!\n```", "```php\nasync function tryCatchExample() {\n\u00a0\u00a0// Try to do asynchronous work\n\u00a0\u00a0try{\n\u00a0\u00a0\u00a0\u00a0const value1 = await Promise.resolve( 'Success 1' );\n\u00a0\u00a0\u00a0\u00a0const value2 = await Promise.resolve( 'Success 2' );\n\u00a0\u00a0\u00a0\u00a0const value3 = await Promise.reject( 'Oh no!' );\n\u00a0\u00a0} \n\n\u00a0\u00a0// Catch errors\n\u00a0\u00a0catch( err ){\n\u00a0\u00a0\u00a0\u00a0console.log( err ); // Expected output: Oh no!\n\u00a0\u00a0}\n}\ntryCatchExample()\n```", "```php\nasync function nested1() { return await Promise.reject( 'Error!' ); }\nasync function nested2() { return await nested1; }\nasync function nested3() { return await nested2; }\nasync function nestedErrorExample() {\n\u00a0\u00a0try{ const value1 = await nested3; }\n\u00a0\u00a0catch( err ){ console.log( err ); } // Expected output: Oh no!\n}\nnestedErrorExample();\n```", "```php\n// Promise chain - API functions return a promise\nmyPromse.then( apiCall1 ).then( apiCall2 ).then( apiCall3 ).catch( errorHandler );\nasync function asyncAwaitUse( myPromise ) {\n\u00a0\u00a0try{\n\u00a0\u00a0\u00a0\u00a0const value1 = await myPromise;\n\u00a0\u00a0\u00a0\u00a0const value2 = await apiCall1( value1 );\n\u00a0\u00a0\u00a0\u00a0const value3 = await apiCall2( value2 );\n\u00a0\u00a0\u00a0\u00a0const value4 = await apiCall3( value3 );\n\u00a0\u00a0} catch( err ){\n\u00a0\u00a0\u00a0\u00a0errorHandler( err );\n\u00a0\u00a0}\n}\nasyncAwaitUse( myPromise );\n```", "```php\nasync function awaitPromiseAll(){\n\u00a0\u00a0let promise1 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 10 ), 100 ) );\n\u00a0\u00a0let promise2 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 20 ), 200 ) );\n\u00a0\u00a0let promise3 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 30 ), 10 ) );\n\u00a0\u00a0const result = await Promise.all( [ promise1, promise2, promise3 ] );\n\u00a0\u00a0console.log( result ); //Expected output: [ 10, 20, 30 ]\n}\nawaitPromiseAll();\n```", "```php\nasync function awaitPromiseAll(){\n\u00a0\u00a0let promise1 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 10 ), 100 ) );\n\u00a0\u00a0let promise2 = new Promise( ( resolve, reject ) => setTimeout( () => resolve( 20 ), 200 ) );\n\u00a0\u00a0const result = await Promise.race( [ promise1, promise2 ] );\n\u00a0\u00a0console.log( result ); //Expected output: 10]\n}\nawaitPromiseAll();\n```"]