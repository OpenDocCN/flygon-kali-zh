- en: Chapter 8. Advanced Map Visualization and Charting Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章.高级地图可视化和图表库
- en: 'Rendering on a map may not be the only way to visualize spatial data. To put
    the data into perspective, we may have to resort to non-spatial analytics and
    charting capabilities provided by dojo and other popular libraries to complement
    the spatial visualization capabilities of the map. In this chapter, we are going
    to extend the Demographics Analytic Portal we started building in the last chapter
    with the aid of charting libraries and other visualization methods such as data
    clustering. This chapter deals with the following major topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上渲染可能不是可视化空间数据的唯一方式。为了让数据有所侧重，我们可能需要借助于非空间分析和图表功能，这些功能由dojo和其他流行的库提供，以补充地图的空间可视化功能。在本章中，我们将通过图表库和其他可视化方法（如数据聚类）扩展我们在上一章开始构建的人口统计分析门户网站。本章涉及以下主要主题：
- en: Charting with dojo
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用dojo进行图表绘制
- en: Charting with D3 library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用D3库进行图表绘制
- en: Charting with Cedar
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cedar进行图表绘制
- en: Charting with dojo
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用dojo进行图表绘制
- en: 'The ArcGIS API is well integrated for charting with dojo. The charting capabilities
    are provided by the experimental modules of dojo, hence the name `dojox`, for
    which the `x` refers to the experimental nature of the modules . Yet these modules
    are stable enough to be integrated into any production environment. The following
    modules are considered the bare minimum modules for developing charting functionality
    with dojo:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API与dojo的图表绘制非常好地集成在一起。图表功能由dojo的实验模块提供，因此称为`dojox`，其中的`x`指的是模块的实验性质。然而，这些模块足够稳定，可以集成到任何生产环境中。以下模块被认为是使用dojo开发图表功能的最基本模块：
- en: '`dojox/charting`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dojox/charting`'
- en: '`dojox/charting/themes/<themeName>`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dojox/charting/themes/<themeName>`'
- en: '`dojox/charting/Chart2D`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dojox/charting/Chart2D`'
- en: '`dojox/charting/plot2d/Pie`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dojox/charting/plot2d/Pie`'
- en: Dojo chart themes
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dojo图表主题
- en: 'The `dojox` charting library provides a lot of themes, and a theme name must
    be selected among the list of themes provided by `dojox`. A list of all themes
    provided by `dojox` is found under the following URL: [http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojox`图表库提供了许多主题，必须在`dojox`提供的主题列表中选择一个主题名称。可以在以下网址找到`dojox`提供的所有主题列表：[http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/theme_preview.html)'
- en: 'Themes provided by dojox charting library are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: dojox图表库提供的主题如下：
- en: '| JulieThreeDChrisTomClaroPrimaryColorsElectricChargedRenkooAdobebricksAlgaeBahamationBlueDusk
    | DesertDistinctiveDollarGrasshopperGrasslandsGreySkiesHarmonyIndigoNationIrelandMiamiNiceMidwestMintyPurpleRain
    | CubanShirtsRoyalPurplesSageToLimeShroomsTufteWatersEdgeWetlandPlotKit.bluePlotKit.cyanPlotKit.greenPlotKit.orangePlotKit.purplePlotKit.red
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| JulieThreeDChrisTomClaroPrimaryColorsElectricChargedRenkooAdobebricksAlgaeBahamationBlueDusk
    | DesertDistinctiveDollarGrasshopperGrasslandsGreySkiesHarmonyIndigoNationIrelandMiamiNiceMidwestMintyPurpleRain
    | CubanShirtsRoyalPurplesSageToLimeShroomsTufteWatersEdgeWetlandPlotKit.bluePlotKit.cyanPlotKit.greenPlotKit.orangePlotKit.purplePlotKit.red
    |'
- en: The ideal location to test these different chart themes is at [http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 测试这些不同图表主题的理想位置是在[http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie](http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/charting/tests/test_themes.html?Julie)。
- en: '![Dojo chart themes](graphics/B04959_08_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Dojo图表主题](graphics/B04959_08_01.jpg)'
- en: Charting using the popup template
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用弹出模板进行图表绘制
- en: 'Basic charting capabilities can be displayed in the popup of the feature layer
    using the `mediaInfos` property of the `popup` template. We will use the county-level
    demographics feature layer we used in the last chapter to create this chart. We
    are interested in the following fields:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的图表功能可以使用`popup`模板的`mediaInfos`属性在要素图层的弹出窗口中显示。我们将使用上一章中使用的县级人口统计要素图层来创建此图表。我们对以下字段感兴趣：
- en: '| Fields | Description |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `NAME` | Name of the county |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `NAME` | 县的名称 |'
- en: '| `STATE_NAME` | Name of the state |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `STATE_NAME` | 州的名称 |'
- en: '| `TOTPOP_CY` | Total population count for the county |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `TOTPOP_CY` | 县的总人口数量 |'
- en: '| `MEDHINC_CY` | Median household income of the county |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `MEDHINC_CY` | 县的家庭收入中位数 |'
- en: '| `DIVINDX_CY` | Diversity index calculated for the county |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `DIVINDX_CY` | 计算的县的多样性指数 |'
- en: '| `WHITE_CY` | Count of white males and females |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `WHITE_CY` | 白人男性和女性的数量 |'
- en: '| `BLACK_CY` | Count of black males and females |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `BLACK_CY` | 黑人男性和女性的数量 |'
- en: '| `AMERIND_CY` | Count of American Indians (male and female) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `AMERIND_CY` | 美洲印第安人（男性和女性）的数量 |'
- en: '| `ASIAN_CY` | Count of Asians (male and female) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `ASIAN_CY` | 亚洲人（男性和女性）的数量 |'
- en: '| `PACIFIC_CY` | Count of Pacific Islanders (male and female) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `PACIFIC_CY` | 太平洋岛民（男性和女性）的数量 |'
- en: '| `OTHRACE_CY` | Count of other races (male and female) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `OTHRACE_CY` | 其他种族（男性和女性）的数量 |'
- en: 'Creating a `mediaInfos` object involves constructing a `fieldInfos` object
    if we need to change the field names, or give an alias to them in the chart. The
    `mediaInfos` object accepts a `theme` property. Mention one of the dojo charting
    theme names or a custom theme created by you:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`mediaInfos`对象涉及构建`fieldInfos`对象，如果需要更改字段名称或在图表中为它们指定别名。`mediaInfos`对象接受一个`theme`属性。提到一个dojo图表主题名称或您创建的自定义主题：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Charting using the popup template](graphics/B04959_08_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用弹出模板进行图表绘制](graphics/B04959_08_02.jpg)'
- en: Types of 2D charts provided by dojox modules
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: dojox模块提供的2D图表类型
- en: We have seen a pie chart in action. Let's discuss some more chart types provided
    by the `dojox` module and the utility of some of the more popular chart types.
    Notice the difference between chart types such as Bars and Columns, as well as
    Scatter and MarkersOnly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了饼图的效果。让我们讨论一些`dojox`模块提供的更多图表类型以及一些更受欢迎的图表类型的实用性。注意柱状图和柱形图之间的差异，以及散点图和仅标记的图之间的差异。
- en: '| Chart type | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 图表类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Areas | Area under data line(s) will be filled |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 区域 | 数据线下的区域将被填充 |'
- en: '| Bars | Refers to horizontal bars |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 条形 | 指代水平条 |'
- en: '| ClusteredBars | Horizontal bars with grouped data sets |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 分组条 | 具有分组数据集的水平条 |'
- en: '| ClusteredColumns | Vertical bars with grouped data sets |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 分组列 | 具有分组数据集的垂直条 |'
- en: '| Columns | Refers to charts with vertical bars |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 列 | 指代具有垂直条的图表 |'
- en: '| Grid | For adding a grid layer to your chart |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 网格 | 用于向图表添加网格层 |'
- en: '| Lines | Basic line chart |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 线条 | 基本线图 |'
- en: '| Markers | Line chart with data points marked |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 标记 | 具有标记的线图 |'
- en: '| MarkersOnly | Only data points are shown |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 仅标记 | 仅显示数据点 |'
- en: '| Pie | Represents the distribution of data by representing it on a circular
    dias |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 饼图 | 通过在圆形直径上表示数据来表示数据的分布 |'
- en: '| Scatter | Used to plot data |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 散点图 | 用于绘制数据 |'
- en: '| Stacked | Data sets charted in relation to the previous data set |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 堆叠 | 数据集相对于先前数据集的图表 |'
- en: '| StackedAreas | Stacked data sets with filled areas under chart lines |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 堆叠区域 | 堆叠数据集，填充图表线下的区域 |'
- en: '| StackedBars | Stacked data sets with horizontal bars |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 堆叠条 | 具有水平条的堆叠数据集 |'
- en: '| StackedColumns | Stacked data sets with vertical bars |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 堆叠列 | 堆叠具有垂直条的数据集 |'
- en: '| StackedLines | Stacked data sets using lines |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 堆叠线 | 使用线堆叠数据集 |'
- en: Dojo charting methods
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 道场图表方法
- en: 'The charting module has four important methods that will help us create a chart.
    They are:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图表模块有四个重要的方法，将帮助我们创建图表。它们是：
- en: '`addPlot()`: Defines the type of chart and other ancillary properties that
    define the chart.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addPlot()`：定义图表的类型和定义图表的其他辅助属性。'
- en: '`setTheme()`: Lets us set a dojo theme to the chart. The themes can be customized
    too.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTheme()`：让我们为图表设置道场主题。主题也可以自定义。'
- en: '`addSeries()`: Defines the data used by the chart.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addSeries()`：定义图表使用的数据。'
- en: '`render()`: Renders the chart.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`：渲染图表。'
- en: Defining your plot
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义您的情节
- en: 'Using the `addPlot()` method you can define your plot. The plot accepts a name
    and an argument array:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`addPlot()`方法可以定义您的情节。情节接受名称和参数数组：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's see what constitutes the `plotArguments` object. The properties of the
    `plotArguments` vary based on the type of chart we choose to use. If we choose
    a chart type that uses a line, area, or data points to define the data, properties
    such as line, areas, or markers should be set to a Boolean value. The lines option
    determines whether or not lines are used to connect your data points. If the areas
    type is selected, the area below your data line will be filled. The markers option
    will determine whether markers are placed at your data points.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`plotArguments`对象包括什么。`plotArguments`的属性根据我们选择使用的图表类型而变化。如果我们选择使用线条、区域或数据点来定义数据的图表类型，则应将线条、区域或标记等属性设置为布尔值。线条选项确定是否使用线条连接数据点。如果选择区域类型，则将填充数据线下的区域。标记选项将确定是否在数据点处放置标记。
- en: 'The `plotArguments` can accept the following properties:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotArguments`可以接受以下属性：'
- en: '`type`: The type of chart to be rendered'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：要呈现的图表类型'
- en: '`lines`: Boolean to indicate whether the chart data needs to be enclosed by
    lines'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lines`：布尔值，指示图表数据是否需要被线条包围'
- en: '`areas`: Boolean value to indicate whether the data is enclosed by an area'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`areas`：布尔值，表示数据是否被区域包围'
- en: '`markers`: Boolean value which determines whether markers are placed at data
    points'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`markers`：布尔值，确定是否在数据点处放置标记'
- en: 'For chart types such as StackedLines or StackedAreas, we can use properties
    such as tension and shadows to enhance the visualization of the chart. Tension
    smooths the lines connecting the data points, and the shadows property will add
    shadows to the lines. The `shadow` property itself is an object that accepts three
    properties named `dx`, `dy`, and `dw`, which define what should be the *x* offset,
    *y* offset, and width of the shadow line:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于诸如堆叠线或堆叠区域的图表类型，我们可以使用张力和阴影等属性来增强图表的可视化效果。张力平滑连接数据点的线条，阴影属性将在线条上添加阴影。`shadow`属性本身是一个接受名为`dx`、`dy`和`dw`的三个属性的对象，它定义了阴影线的*x*偏移、*y*偏移和宽度：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When rendering a bar chart, use the `gap` property to represent the number
    of pixels between bars:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染条形图时，使用`gap`属性表示条形之间的像素数：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Defining the theme
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义主题
- en: 'Using the list of themes mentioned earlier, we can set the theme for our chart
    using the `setTheme()` method:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的主题列表，我们可以使用`setTheme()`方法为我们的图表设置主题：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pushing the data
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送数据
- en: 'We can push the data into a chart using the `addSeries()` method:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`addSeries()`方法将数据推送到图表中：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `addSeries()` method accepts two arguments. The first argument mentions
    a name for the data and the second argument. The second argument is an array object
    that holds the actual data. It can be one-dimensional data such as `[10,20,30,40,50]`
    or two-dimensional data, in which case the `x` and `y` properties of the data
    can be mentioned:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`addSeries()`方法接受两个参数。第一个参数提到数据的名称，第二个参数。第二个参数是一个包含实际数据的数组对象。它可以是一维数据，例如`[10,20,30,40,50]`，也可以是二维数据，在这种情况下，可以提到数据的`x`和`y`属性：'
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `x` component can be omitted if it is a pie chart.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是饼图，可以省略`x`分量。
- en: Chart plugins
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图表插件
- en: 'There are a few plugins that can be added to the chart module of dojo that
    add value to the charting functions. These plugins provide interactivity to the
    chart data and most of the plugins reveal extra information about the data item
    or emphasize the data item being hovered upon. Some provide an overall sense of
    the data with the aid of visualization elements such as a legend. Some of the
    functions accomplished by the plugins are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些插件可以添加到道场的图表模块中，为图表功能增加价值。这些插件为图表数据提供交互性，大多数插件会显示有关数据项的额外信息，或者强调悬停在其上的数据项。有些插件通过可视化元素（如图例）提供对数据的整体感知。插件完成的一些功能包括：
- en: Adding a tooltip to the chart
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向图表添加工具提示
- en: Moving the pie slice and magnifying it
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动饼图片段并放大它
- en: Adding a legend
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图例
- en: Highlighting the data item
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出显示数据项
- en: Plugin modules such as `dojox/charting/widget/Legend` provide support from the
    `Legend` widget. The `dojox/charting/action2d/Tooltip` module supports tooltip
    support on chart data. Including the `dojox/charting/action2d/Magnify` module
    will magnify the chart data being hovered upon, giving greater interactivity with
    the chart. The `dojox/charting/action2d/MoveSlice` module treats the chart data
    as a slice and shifts the locations of the chart data being hovered upon. This,
    along with the `Magnify` plugin, helps us to effectively give a sense of user
    interactivity with the chart data. The `dojox/charting/action2d/Highlight` module
    highlights the data being hovered upon with a different highlight color such as
    cyan.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 插件模块，如`dojox/charting/widget/Legend`，提供了对`Legend`小部件的支持。`dojox/charting/action2d/Tooltip`模块支持图表数据的工具提示支持。包括`dojox/charting/action2d/Magnify`模块将放大悬停在其上的图表数据，从而增强了与图表的交互性。`dojox/charting/action2d/MoveSlice`模块将图表数据视为一个切片，并移动悬停在其上的图表数据的位置。这与`Magnify`插件一起，有助于有效地给出用户与图表数据的交互感。`dojox/charting/action2d/Highlight`模块用不同的高亮颜色（如青色）突出显示悬停在其上的数据。
- en: 'Implementing the plugin is very easy too. The following lines of code implements
    the plugins such as `Highlight`, `Tooltip`, and `MoveSlice` on the dojo chart
    object:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 实施插件也非常容易。以下代码行实现了诸如`Highlight`、`Tooltip`和`MoveSlice`的插件在dojo图表对象上的使用：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's create a complete chart in a dynamic `div` on the `infotemplate` property
    of the feature layer.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在要素图层的`infotemplate`属性上的动态`div`中创建一个完整的图表。
- en: 'We will use the county-level demographics feature layer for this demonstration
    too. Our objective is to create a pie chart to display the racial distribution
    of any county that we click. We would be calling a function to create the `Infowindow`
    content for each feature dynamically:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也将在此演示中使用县级人口统计特征图层。我们的目标是创建一个饼图，以显示我们单击的任何县的种族分布。我们将调用一个函数来动态创建每个要素的`Infowindow`内容：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the function that returns the `Infotemplate` content, we will do the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回“Infotemplate”内容的函数中，我们将执行以下操作：
- en: Create a `Tab` container that will contain two content panes.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含两个内容窗格的`Tab`容器。
- en: The first content will display details about the county being selected and the
    Median Household Income data.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个内容将显示有关所选县和家庭收入中位数数据的详细信息。
- en: The second content pane will contain the dojo pie chart.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个内容窗格将包含dojo饼图。
- en: Before rendering the pie chart, we shall calculate the percentage of each racial
    group against the total population.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在渲染饼图之前，我们将计算每个种族组占总人口的百分比。
- en: Also, we shall assign a label for each racial group. This label will be used
    while using the legend.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们将为每个种族组分配一个标签。在使用图例时将使用此标签。
- en: Also, pie chart data objects accept a tooltip property where we will mention
    the label along with the data value.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，饼图数据对象接受一个工具提示属性，我们将在其中提及标签以及数据值。
- en: We will try to use the chart plugins such as `Highlight`, `Tooltip`, and `Moveslice`
    to highlight the selected sub data item.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将尝试使用图表插件，如`Highlight`、`Tooltip`和`Moveslice`来突出显示所选的子数据项。
- en: 'Now let''s try to implement these steps in the code. We will write a function
    that constructs the chart and returns the chart content as a `dom` element. We
    will use the `setContent()` method of the `infotemplate` to set the `dom` element
    returned by the following function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试在代码中实现这些步骤。我们将编写一个函数来构建图表，并将图表内容作为`dom`元素返回。我们将使用`infotemplate`的`setContent()`方法来设置以下函数返回的`dom`元素：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When this code is implemented, we will get a popup after we click on any county.
    The popup contains two tabs—the first tab gives details about the **Total Population**
    of the tab and the **Median Household Income** in that county. The title for the
    entire popup will mention the county name and the state name. The contents of
    the first tab will have a dynamically generated Wikipedia link to the county and
    state.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当实现此代码时，我们将在单击任何县后弹出一个弹出窗口。弹出窗口包含两个选项卡——第一个选项卡提供有关该选项卡的**总人口**和该县的**家庭收入中位数**的详细信息。整个弹出窗口的标题将提及县名和州名。第一个选项卡的内容将包含动态生成的维基百科链接到县和州。
- en: 'The first tab of the pop-up container is shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出容器的第一个选项卡如下截图所示：
- en: '![Chart plugins](graphics/B04959_08_03.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图表插件](graphics/B04959_08_03.jpg)'
- en: The second tab in the popup shows the dojo chart. We have a legend element for
    the chart. When we hover over any of the data in the pie chart, it is sliced,
    magnified a bit, and highlighted.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口的第二个选项卡显示了dojo图表。我们的图表上有一个图例元素。当我们在饼图中悬停在任何数据上时，它会被切片，稍微放大，并突出显示。
- en: '![Chart plugins](graphics/B04959_08_04.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图表插件](graphics/B04959_08_04.jpg)'
- en: Charting with D3.js
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3.js进行图表绘制
- en: D3.js is a JavaScript library for manipulating documents based on data. D3 stands
    for data-driven documents and this library provides powerful visualization components
    and a data-driven approach to DOM manipulation.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js是一个用于基于数据操作文档的JavaScript库。D3代表数据驱动文档，该库提供了强大的可视化组件和基于数据驱动的DOM操作方法。
- en: To use D3 in our JavaScript application, we can download the library from the
    D# website found at [http://d3js.org/](http://d3js.org/).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的JavaScript应用程序中使用D3，我们可以从[D3网站](http://d3js.org/)下载该库。
- en: 'Or we can use the CDN in our script tag:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以在我们的脚本标签中使用CDN：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A more dojo-centric approach would be to add this as a package in the `dojoconfig`
    and use it as a module in the define function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 更加面向dojo的方法是将其作为`dojoconfig`中的一个包添加，并在`define`函数中使用它作为一个模块。
- en: 'Here is a snippet to add D3 as a package to the `dojoConfig`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将D3作为`dojoConfig`的包添加的片段：
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using `d3` library as in the `define` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`define`函数中使用`d3`库：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a column chart with D3
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用D3创建柱状图
- en: 'Let''s create a column chart with D3 using the county-level demographics data.
    Our objective is to use the column chart to display four measures of Median Household
    Income centered upon the Median Household Income of the county of interest. The
    four measures are:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用县级人口统计数据使用D3创建一个柱状图。我们的目标是使用柱状图显示围绕感兴趣县的家庭收入中位数的四个度量。这四个度量是：
- en: The National Minimum or value at 5th percentile (Average—three Standard Deviation)
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家最小值或5百分位数的值（平均值-三倍标准差）
- en: The Median Household Income of the county being clicked
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被点击的县的家庭收入中位数
- en: The National Average value for Median Household Income
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家家庭收入中位数的国家平均值
- en: The National Maximum or value at the 95th percentile
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家最大值或95百分位数的值
- en: 'The following image is a mock-up of how we intend to build our chart:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片是我们打算构建图表的模拟：
- en: '![Creating a column chart with D3](graphics/B04959_08_05.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![使用D3创建柱状图](graphics/B04959_08_05.jpg)'
- en: There are several reasons why we have chosen to demonstrate constructing this
    chart using D3\. D3 is entirely data driven, and hence flexible, especially for
    data visualization. Many visualization libraries are built on top of D3 and a
    knowledge of D3 will even help us build intuitive charts and data visualizations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因我们选择使用D3来演示构建这个图表。D3完全由数据驱动，因此灵活，特别适合数据可视化。许多可视化库都是基于D3构建的，了解D3甚至可以帮助我们构建直观的图表和数据可视化。
- en: D3 selections
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D3选择
- en: 'D3 works on selections. The selections in D3 are very similar to jQuery selections.
    To select the `body` tag, all you have to do is declare:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: D3工作在选择上。D3中的选择与jQuery选择非常相似。要选择`body`标签，你只需要声明：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To select all `div` tags with a particular style class named `chart`, use the
    following snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择所有具有名为`chart`的特定样式类的`div`标签，请使用以下代码片段：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To append an `svg` (scalable vector graphic) tag or any other HTML tag to a
    `div` or the body tag, use the append method. The SVG element is used to render
    most graphic elements:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`svg`（可缩放矢量图形）标签或任何其他HTML标签附加到`div`或`body`标签，使用`append`方法。SVG元素用于呈现大多数图形元素：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use it along with an `enter()` method to indicate that the element accepts
    the input:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与`enter()`方法一起使用，表示元素接受输入：
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: D3 data
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D3数据
- en: 'D3 is driven by data as its name suggests. All we need to render a simple chart
    is to feed data to the D3 selection. Data can be as simple as an array:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: D3由数据驱动，正如其名称所示。我们只需要向D3选择提供数据，就可以渲染一个简单的图表。数据可以简单到一个数组：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'All we are doing in the previous snippet is we are setting the width property
    for the style object of the D3 selection. And we get this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码片段中，我们所做的就是为D3选择的样式对象设置宽度属性。然后我们得到了这个：
- en: '![D3 data](graphics/B04959_08_06.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![D3数据](graphics/B04959_08_06.jpg)'
- en: 'The width value of each `div` in pixels is taken from the value of each element
    in the data array multiplied by 20, and the text value within the bar is again
    taken from the value of the individual data. There''s something that needs to
    be done before, to get this beautiful chart—we need to set the CSS styling for
    the `div`. Here''s a simple CSS snippet we used:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`div`的宽度值以像素为单位，取自数据数组中每个元素的值乘以20，柱内的文本值再次取自各个数据的值。在得到这个美丽的图表之前，有一些事情需要做——我们需要为`div`设置CSS样式。这是我们使用的一个简单的CSS代码片段：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: D3 scaling
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D3缩放
- en: In the previous snippet to show a simple D3 chart, we used a multiplicand value
    of `20` with each value of the data to get the pixel value for the `div` width.
    Since our container `div` was around 400 pixels wide, this multiplicand value
    was fine. But what multiplicand value should we use for a dynamic data? The rule
    of thumb is that we should use some kind of scaling mechanism to scale the pixel
    values so that our maximum-most data value fits inside the chart container `div`
    comfortably. D3 provides a mechanism to scale our data and calculate the scaling
    factor, which we use to conveniently scale our data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个代码片段中，为了显示一个简单的D3图表，我们使用了一个乘数值`20`，用于每个数据值获取`div`宽度的像素值。由于我们的容器`div`大约有400像素宽，这个乘数值是合适的。但是对于动态数据，我们应该使用什么样的乘数值呢？经验法则是我们应该使用某种缩放机制来缩放像素值，以便我们的最大数据值舒适地适应图表容器`div`中。D3提供了一种机制来缩放我们的数据并计算缩放因子，我们可以方便地使用它来缩放我们的数据。
- en: 'D3 provides a `scale.linear()` method to calculate the scaling factor. Additionally,
    we need to use two more methods, namely `domain()` and `range()`, to actually
    calculate the scaling factor. The `domain()` method accepts an array with two
    elements. The first element should mention the minimum-most data value or `0`
    (whichever is appropriate) and the second element should mention the maximum-most
    value of the data. We can use the D3 function `d3.max` to find the maximum value
    of the data:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: D3提供了一个`scale.linear()`方法来计算缩放因子。此外，我们还需要使用另外两个方法，即`domain()`和`range()`，来实际计算缩放因子。`domain()`方法接受一个包含两个元素的数组。第一个元素应该提到最小的数据值或`0`（适当的话），第二个元素应该提到数据的最大值。我们可以使用D3函数`d3.max`来找到数据的最大值：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `range` function also accepts an array with two elements, which should
    list the pixel range of the container div element:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`range`函数还接受一个包含两个元素的数组，应列出容器div元素的像素范围：'
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once we find the scaling factor `x`, we can use this as the multiplicand for
    the data item value to derive the pixel value:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到缩放因子`x`，我们就可以将其用作数据项值的乘数，以得出像素值：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Integrating SVG into D3 charts
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将SVG集成到D3图表中
- en: SVG, though intimidating in its entirety, offers several advantages while working
    with data visualizations, and supports a lot of primitive shapes to be rendered
    in HTML. One key thing to be noted is that the SVG coordinate system starts from
    the top-left corner and we need to bear this is mind while calculating the desired
    positions of our elements.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: SVG，虽然在其整体上令人生畏，但在处理数据可视化时提供了几个优势，并支持在HTML中呈现许多原始形状。需要注意的一点是SVG坐标系统从左上角开始，我们在计算元素所需位置时需要记住这一点。
- en: 'Appending an SVG element is similar to appending a `div` to our chart class:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 附加SVG元素类似于将`div`附加到我们的图表类：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the previous snippet, we can actually set the styling and other attributes
    such as width and height. `transform` is an important property by which we can
    move the position of the `svg` element (remember the SVG coordinate system origin
    is in the top-left corner).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我们实际上可以设置样式和其他属性，例如宽度和高度。`transform`是一个重要的属性，通过它我们可以移动`svg`元素的位置（记住SVG坐标系原点在左上角）。
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_07.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![将SVG集成到D3图表中](graphics/B04959_08_07.jpg)'
- en: 'Since we will be constructing a column chart, the first element in the array
    accepted by the `range()` method while calculating D3 linear scaling should not
    be the minimum-most value, but rather the maximum height value in pixels. The
    second element in the array is the minimum pixel value:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将构建一个柱状图，因此在计算D3线性缩放时，由`range()`方法接受的数组中的第一个元素不应是最小值，而应是像素中的最大高度值。数组中的第二个元素是最小像素值：
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Conversely, the `x` scaling factor should be based on an ordinal scale (meaning,
    we don''t use numbers to calculate the width and spacing of the bars):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`x`缩放因子应基于序数比例（意思是，我们不使用数字来计算条的宽度和间距）：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: From the feature statistics module we have discussed earlier, we should be able
    to get the mean and standard deviation of a particular field in the feature layer.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前讨论的特征统计模块中，我们应该能够得到特征层中特定字段的平均值和标准差。
- en: 'From the previous two pieces of information, we know how to calculate the 2.5^(th)
    percentile (bottom 2.5% income) and 97.5^(th) percentile (top 2.5% income level).
    We intend to compare the Median Household Income of the selected feature along
    with these values. The formula to calculate the 2.5^(th) and 97.5^(th) percentile
    is shown as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的两条信息，我们知道如何计算2.5^(th)百分位数（底部2.5%的收入）和97.5^(th)百分位数（顶部2.5%的收入水平）。我们打算将所选特征的收入中位数与这些值进行比较。计算2.5^(th)和97.5^(th)百分位数的公式如下所示：
- en: '| *1st percentile = mean - 2,33 * SD* | *99th percentile = mean + 2,33 * SD*
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| *1st percentile = mean - 2,33 * SD* | *99th percentile = mean + 2,33 * SD*
    |'
- en: '| *2.5th percentile = mean - 1.96 * SD* | *97.5th percentile = mean + 1.96
    * SD* |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| *2.5th percentile = mean - 1.96 * SD* | *97.5th percentile = mean + 1.96
    * SD* |'
- en: '| *5th percentile = mean - 1.65 * SD* | *95th percentile = mean + 1.65 * SD*
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| *5th percentile = mean - 1.65 * SD* | *95th percentile = mean + 1.65 * SD*
    |'
- en: 'From previous statistic computations, we know the following data:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以前的统计计算，我们知道以下数据：
- en: '[PRE25]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We need the 2.5^(th) and 97.5^(th) percentile which can be calculated as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要计算如下的2.5^(th)和97.5^(th)百分位数：
- en: '[PRE26]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And for the 97.5^(th):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于97.5^(th)：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'So, this is going to be the data for our chart:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这将是我们图表的数据：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `Income` value for the `Selected Value` label is set to `0`. This value
    will be updated as we click a feature in the `feature` class. We will also define
    a `margin` object as well as `width` and `height` variables for use in our chart.
    The margin object we defined looked like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`Income`值为`Selected Value`标签设置为`0`。当我们点击`feature`类中的特征时，此值将被更新。我们还将定义一个`margin`对象以及用于图表的`width`和`height`变量。我们定义的`margin`对象如下所示：'
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'While constructing the chart, we will be considering the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建图表时，我们将考虑以下步骤：
- en: Determine the *x* scaling factor and *y* scaling factor.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定*x*缩放因子和*y*缩放因子。
- en: Define the *x* and *y* axes.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义*x*和*y*轴。
- en: Clear all the existing contents of the `div` with a `chart` class.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除`chart`类的`div`的所有现有内容。
- en: Define the *x* and *y* domain values based in the `margin` object, as well as
    `width` and `height` values.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据`margin`对象以及`width`和`height`值定义*x*和*y*域值。
- en: Define the SVG element that would hold our chart.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义将容纳我们的图表的SVG元素。
- en: Add the axes as well as the chart data as rectangle graphic elements in the
    SVG.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SVG中添加轴以及作为矩形图形元素的图表数据。
- en: 'We will write the functionality in a function, and call the function as needed:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一个函数中编写功能，并根据需要调用该函数：
- en: '[PRE30]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can call the previous function on the feature layer `click` event. In our
    project, the feature `click` event is defined in a separate file, and the D3 chart
    code is in a separate file. So, we can send the click results through the dojo
    topic:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在特征层的`click`事件上调用之前的函数。在我们的项目中，特征`click`事件在一个单独的文件中定义，而D3图表代码在另一个文件中。因此，我们可以通过dojo主题发送点击结果：
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result can be accessed in any other file by using the `subscribe()` method
    under the topic module. In the previous snippet, the result can be accessed by
    referring to the name called `app/feature/selected`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过主题模块下的`subscribe()`方法在任何其他文件中访问结果。在前面的片段中，可以通过引用名为`app/feature/selected`的名称来访问结果：
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following screenshot is a representation of the output of our code. The
    D3 chart represents a typical column chart with four columns. The first three
    data values are static as per our code, because we can compute the top and bottom
    2.5^(th) percentile as well as the national average from the feature layer data.
    The last column is the actual value of the selected feature in the feature layer.
    In the following snapshot we have clicked in Nassau county in New York state and
    the data value is a bit above $100,000, which is well above the top 2.5^(th) percentile
    mark:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是我们代码的输出的表示。D3图表代表一个具有四个柱的典型柱状图。前三个数据值根据我们的代码是静态的，因为我们可以从特征层数据中计算出顶部和底部的2.5^(th)百分位数以及国家平均值。最后一栏是特征层中所选特征的实际值。在下面的快照中，我们点击了纽约州的拿骚县，数据值略高于10万美元，远高于顶部的2.5^(th)百分位数标记：
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_08.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![将SVG集成到D3图表中](graphics/B04959_08_08.jpg)'
- en: In the following screenshot, we have selected one of the counties with the least
    Median Household Income. Notice how the *Y* axis re-calibrates itself based on
    the maximum value of the data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们选择了一个收入中位数最低的县。请注意*Y*轴如何根据数据的最大值重新校准自身。
- en: '![Integrating SVG into D3 charts](graphics/B04959_08_09.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![将SVG集成到D3图表中](graphics/B04959_08_09.jpg)'
- en: Charting with D3 using SVG components can be cumbersome, but a basic knowledge
    of these will go a long way when we need to do high-level customizations.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用D3进行SVG组件的图表绘制可能会很麻烦，但对这些的基本了解在需要进行高级定制时会大有裨益。
- en: Charting with Cedar
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cedar进行图表绘制
- en: Cedar is a beta versioned library provided as an open source by Esri to create
    and share data visualizations based on ArcGIS Server data. It is built upon the
    D3 and Vega graphics libraries themselves. Cedar lets us create efficient data
    visualizations and charts using a simple template.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Cedar是由Esri提供的一个基于ArcGIS Server数据创建和共享数据可视化的beta版本库。它是建立在D3和Vega图形库之上的。Cedar让我们可以使用简单的模板创建高效的数据可视化和图表。
- en: Loading Cedar libraries
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载Cedar库
- en: We can load Cedar using two methods. We either use the script tags or use the
    AMD pattern. The latter method is preferred.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两种方法加载Cedar。我们可以使用脚本标签，也可以使用AMD模式。后一种方法更受推荐。
- en: Loading using the script tags
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用脚本标签加载
- en: 'Load Cedar and its dependencies by including script tags. This will make the
    Cedar global available to our application:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含脚本标签加载Cedar及其依赖项。这将使Cedar全局可用于我们的应用程序：
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Loading using the AMD pattern
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AMD模式加载
- en: 'Alternatively, we can use the dojo loader, which is bundled with the ArcGIS
    API for JavaScript, to load Cedar and its dependencies by declaring them as packages:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用ArcGIS API for JavaScript捆绑的dojo加载程序，将Cedar及其依赖项声明为包来加载它们：
- en: '[PRE34]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `dojo` packages expect a set of Cedar library files at the `/js/cedar` location.
    We can download the required files from the following github repository found
    at [https://github.com/Esri/cedar/tree/develop/src](https://github.com/Esri/cedar/tree/develop/src).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojo`包需要在`/js/cedar`位置找到一组Cedar库文件。我们可以从以下github存储库下载所需的文件：[https://github.com/Esri/cedar/tree/develop/src](https://github.com/Esri/cedar/tree/develop/src)。'
- en: We need all the files found at the previously mentioned URL. Place these files
    in the `/js/cedar` folder in the application.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在先前提到的URL找到的所有文件。将这些文件放在应用程序的`/js/cedar`文件夹中。
- en: '![Loading using the AMD pattern](graphics/B04959_08_10.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![使用AMD模式加载](graphics/B04959_08_10.jpg)'
- en: 'We can now load the Cedar module within our own define function as demonstrated
    in the following snippet:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们自己的定义函数中加载Cedar模块，就像以下代码片段中所示的那样：
- en: '[PRE35]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To create a simple chart, all we need to define are two properties:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的图表，我们只需要定义两个属性：
- en: '`type`—defines the type of chart we are trying to construct (`bar`, `bubble`,
    `scatter`, `pie`, and so on).'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`—定义我们试图构建的图表类型（`bar`、`bubble`、`scatter`、`pie`等）。'
- en: dataset—defines where the data should come from; this can be either from a URL
    or values (array). The dataset also accepts properties such as query and mappings.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据集—定义数据应该来自哪里；这可以是来自URL或值（数组）。数据集还接受查询和映射等属性。
- en: The mappings property of the dataset defines the objects required to render
    the map. The specifications for the corresponding type of chart can be found at
    `/js/cedar/charts/<chart_type>.js`.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据集的映射属性定义了呈现地图所需的对象。相应类型图表的规范可以在`/js/cedar/charts/<chart_type>.js`找到。
- en: 'For a bar chart, the mappings property requires two objects, *x* and *y*. Let''s
    try to create a summarization for our county demographics layer. Here we are trying
    to summarize the average of the Median Household Income of all counties grouped
    by state. The following simple code does all that and displays a simple bar chart:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于条形图，映射属性需要两个对象，*x*和*y*。让我们尝试为我们的县级人口统计图创建一个总结。在这里，我们试图总结按州分组的所有县的家庭收入中位数的平均值。以下简单的代码可以做到这一切，并显示一个简单的条形图：
- en: '[PRE36]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The previous lines of code are all that are needed to configure the Cedar library,
    which provides us with this great visualization of the average income levels of
    all states and arranged in ascending order.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码行就是配置Cedar库所需的全部内容，它为我们提供了所有州的平均收入水平的出色可视化，并按升序排列。
- en: '![Loading using the AMD pattern](graphics/B04959_08_11.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![使用AMD模式加载](graphics/B04959_08_11.jpg)'
- en: This kind of chart gives us a holistic picture of the data. Let's get our hands
    dirty and try to construct a scatter plot, which lets us map more than one variable.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的图表给我们提供了数据的整体图片。让我们动手尝试构建一个散点图，它可以让我们映射多个变量。
- en: Our objective is to map the income levels of all states along the *X* axis,
    and the diversity index along the *Y* axis, coloring the data points differently
    according to the state.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将所有州的收入水平沿*X*轴进行映射，将多样性指数沿*Y*轴进行映射，并根据州对数据点进行不同的着色。
- en: 'The demographics URL for the State-level data is: [http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21](http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 州级数据的人口统计URL是：[http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21](http://demographics5.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2015/MapServer/21)
- en: 'The mapping object should have an extra parameter named color:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 映射对象应该有一个名为color的额外参数：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The following screenshot is the result of the implementation of the code given
    previously. The chart produces a legend based on the value that is colored differently.
    In our case, the different states are colored differently. This kind of coloring
    would be more appropriate if the number of values being colored was small, for
    example if we were using the colors to represent states categorized into some
    kind of regions such as North, North East, South, South West, and other cardinal
    directions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是先前给出的代码实现的结果。图表根据不同颜色的值生成图例。在我们的情况下，不同的州被着不同的颜色。如果被着色的值的数量较少，例如如果我们使用颜色来表示被分类为一些区域的州，如北部、东北部、南部、西南部和其他基本方向，这种着色方式会更合适。
- en: '![Loading using the AMD pattern](graphics/B04959_08_12.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![使用AMD模式加载](graphics/B04959_08_12.jpg)'
- en: 'Creating a bubble chart gives an extra handle—representing a third variable
    using the size of the bubble:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 创建气泡图表会提供一个额外的处理方式——使用气泡的大小表示第三个变量：
- en: '[PRE38]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following screenshot shows a bubble chart; the *x* position of the bubble
    represents the median household income of the county, the *y* position of the
    bubble represents the diversity index of the county, and the radius or the size
    of the bubble represents the total population of the county:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个气泡图；气泡的*x*位置代表县的家庭收入中位数，气泡的*y*位置代表县的多样性指数，气泡的半径或大小代表县的总人口：
- en: '![Loading using the AMD pattern](graphics/B04959_08_13.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![使用AMD模式加载](graphics/B04959_08_13.jpg)'
- en: We began from creating a simple customizable chart in `Infotemplate`, which
    can visualize one variable, to a chart that can actually visualize three variables
    at the same time, thus enhancing our understanding of the data and increasing
    the value it offers.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从在“Infotemplate”中创建一个简单的可定制图表开始，它可以可视化一个变量，到一个可以同时可视化三个变量的图表，从而增强我们对数据的理解，并增加其价值。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have covered how we can complement charting techniques along with spatial
    data to provide a comprehensive insight into the data we have. While working with
    `Infotemplate` and dojo chart is handy, working with D3 provides greater flexibility
    and greater control over the graphical elements. Cedar, an open source data visualization
    library provided by Esri, is a great library for creating refreshingly new data
    visualizations very easily. Once we have mastered these techniques along with
    the statistical methods, and have learned to look at our data from different perspectives,
    we can claim ourselves as flag-bearers of map data science. There's one more component
    missing in the way we visualize our spatial data. That component is time. In the
    next chapter, we will see how to visualize spatio-temporal data along with the
    knowledge gained in advanced charting capabilities and the ArcGIS JavaScript API
    itself.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了如何结合空间数据来提供对我们数据的全面洞察。虽然使用“Infotemplate”和dojo图表很方便，但使用D3提供了更大的灵活性和对图形元素的更大控制。Esri提供的开源数据可视化库Cedar非常适合轻松创建全新的数据可视化。一旦我们掌握了这些技术以及统计方法，并学会从不同角度看待我们的数据，我们就可以自称为地图数据科学的旗手。我们在可视化空间数据的方式中还缺少一个组成部分。那个组成部分就是时间。在下一章中，我们将看到如何将时空数据可视化，以及在高级图表功能和ArcGIS
    JavaScript API本身所获得的知识。
