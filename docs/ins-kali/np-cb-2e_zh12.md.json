["```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.stats.adnorm import normal_ad\n\ndata = np.load('cbk12.npy')\n\n# Multiply to get hPa values\nmeanp = .1 * data[:,1]\n\n# Filter out 0 values\nmeanp = meanp[ meanp > 0]\n\n# Get descriptive statistics\nprint(\"Max\", meanp.max())\nprint(\"Min\", meanp.min())\nmean = meanp.mean()\nprint(\"Mean\", mean)\nprint(\"Median\", np.median(meanp))\nstd = meanp.std()\nprint(\"Std dev\", std)\n\n# Check for normality\nprint(\"Normality\", normal_ad(meanp))\n\n#histogram with Gaussian PDF\nplt.subplot(211)\nplt.title('Histogram of average atmospheric pressure')\n_, bins, _ = plt.hist(meanp, np.sqrt(len(meanp)), normed=True)\nplt.plot(bins, 1/(std * np.sqrt(2 * np.pi)) * np.exp(- (bins - mean)**2/(2 * std**2)), 'r-', label=\"Gaussian PDF\")\nplt.grid()\nplt.legend(loc='best')\nplt.xlabel('Average atmospheric pressure (hPa)')\nplt.ylabel('Frequency')\n\n# boxplot\nplt.subplot(212)\nplt.boxplot(meanp)\nplt.title('Boxplot of average atmospheric pressure')\nplt.ylabel('Average atmospheric pressure (hPa)')\nplt.grid()\n\n# Improves spacing of subplots\nplt.tight_layout()\nplt.show()\n```", "```py\n    data = np.load('cbk12.npy')\n    ```", "```py\n    # Multiply to get hPa values\n    meanp = .1 * data[:,1]\n\n    # Filter out 0 values\n    meanp = meanp[ meanp > 0]\n    ```", "```py\n    print(\"Max\", meanp.max())\n    print(\"Min\", meanp.min())\n    mean = meanp.mean()\n    print(\"Mean\", mean)\n    print(\"Median\", np.median(meanp))\n    std = meanp.std()\n    print(\"Std dev\", std)\n    ```", "```py\n    Max 1048.3\n    Min 962.1\n    Mean 1015.14058231\n    Median 1015.8\n    Std dev 9.85889134337\n\n    ```", "```py\n    print(\"Normality\", normal_ad(meanp))\n    ```", "```py\n    Normality (72.685781095773564, 0.0)\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport calendar as cal\n\ndata = np.load('cbk12.npy')\n\n# Multiply to get hPa values\nhighs = .1 * data[:,2]\nlows = .1 * data[:,3]\n\n# Filter out 0 values\nhighs[highs == 0] = np.nan\nlows[lows == 0] = np.nan\n\n# Calculate range and stats\nranges = highs - lows\nprint(\"Minimum daily range\", np.nanmin(ranges))\nprint(\"Maximum daily range\", np.nanmax(ranges))\n\nprint(\"Average daily range\", np.nanmean(ranges))\nprint(\"Standard deviation\", np.nanstd(ranges))\n\n# Get months\ndates = data[:,0]\nmonths = (dates % 10000)/100\nmonths = months[~np.isnan(ranges)]\n\nmonthly = []\nmonth_range = np.arange(1, 13)\n\nfor month in month_range:\n   indices = np.where(month == months)\n   monthly.append(np.nanmean(ranges[indices]))\n\nplt.bar(month_range, monthly)\nplt.title('Monthly average of daily pressure ranges')\nplt.xticks(month_range, cal.month_abbr[1:13])\nplt.ylabel('Monthly Average (hPa)')\nplt.grid()\nplt.show()\n```", "```py\n    highs[highs == 0] = np.nan\n    lows[lows == 0] = np.nan\n    ```", "```py\n    ranges = highs - lows\n    print(\"Minimum daily range\", np.nanmin(ranges))\n    print(\"Maximum daily range\", np.nanmax(ranges))\n\n    print(\"Average daily range\", np.nanmean(ranges))\n    print(\"Standard deviation\", np.nanstd(ranges))\n    ```", "```py\n    Minimum daily range 0.4\n    Maximum daily range 41.7\n    Average daily range 6.11945360571\n    Standard deviation 4.42162136692\n\n    ```", "```py\n    dates = data[:,0]\n    months = (dates % 10000)/100\n    months = months[~np.isnan(ranges)]\n    ```", "```py\n    monthly = []\n    month_range = np.arange(1, 13)\n\n    for month in month_range:\n       indices = np.where(month == months)\n       monthly.append(np.nanmean(ranges[indices]))\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.load('cbk12.npy')\n\n# Multiply to get hPa values\navgs = .1 * data[:,1]\nhighs = .1 * data[:,2]\nlows = .1 * data[:,3]\n\n# Filter out 0 values\navgs = np.ma.array(avgs, mask = avgs == 0)\nlows = np.ma.array(lows, mask = lows == 0)\nhighs = np.ma.array(highs, mask = highs == 0)\n\n# Get years\nyears = data[:,0]/10000\n\n# Initialize annual stats arrays\ny_range = np.arange(1901, 2014)\nnyears = len(y_range)\ny_avgs = np.zeros(nyears)\ny_highs = np.zeros(nyears)\ny_lows = np.zeros(nyears)\n\n# Compute stats\nfor year in y_range:\n   indices = np.where(year == years)\n   y_avgs[year - 1901] = np.mean(avgs[indices])\n   y_highs[year - 1901] = np.max(highs[indices])\n   y_lows[year - 1901] = np.min(lows[indices])\n\nplt.title('Annual atmospheric pressure for De Bilt(NL)')\nplt.ticklabel_format(useOffset=900, axis='y')\n\nplt.plot(y_range, y_avgs, label='Averages')\n\n# Plot ignoring NaNs\nh_mask = np.isfinite(y_highs)\nplt.plot(y_range[h_mask], y_highs[h_mask], '^', label='Highs')\n\nl_mask = np.isfinite(y_lows)\nplt.plot(y_range[l_mask], y_lows[l_mask], 'v', label='Lows')\n\nplt.xlabel('Year')\nplt.ylabel('Atmospheric pressure (hPa)')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    y_range = np.arange(1901, 2014)\n    nyears = len(y_range)\n    y_avgs = np.zeros(nyears)\n    y_highs = np.zeros(nyears)\n    y_lows = np.zeros(nyears)\n    ```", "```py\n    for year in y_range:\n       indices = np.where(year == years)\n       y_avgs[year - 1901] = np.mean(avgs[indices])\n       y_highs[year - 1901] = np.max(highs[indices])\n       y_lows[year - 1901] = np.min(lows[indices])\n    ```", "```py\n    h_mask = np.isfinite(y_highs)\n    plt.plot(y_range[h_mask], y_highs[h_mask], '^', label='Highs')\n\n    l_mask = np.isfinite(y_lows)\n    plt.plot(y_range[l_mask], y_lows[l_mask], 'v', label='Lows')\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.load('cbk12.npy')\n\n# Get minimum visibility\nvisibility = data[:,4]\n\n# doy\ndoy = data[:,0] % 10000\n\ndoy_range = np.unique(doy)\n\n# Initialize arrays\nndoy = len(doy_range)\nmist = np.zeros(ndoy)\nhaze = np.zeros(ndoy)\n\n# Compute frequencies\nfor i, d in enumerate(doy_range):\n   indices = np.where(d == doy)\n   selection = visibility[indices]\n\n   mist_truth = (10 < selection) & (selection < 20)\n   mist[i] = len(selection[mist_truth])/(1\\. * len(selection))\n\n   haze_truth = (20 < selection) & (selection < 50)\n   haze[i] = len(selection[haze_truth])/(1\\. * len(selection))\n\n# Get years\nyears = data[:,0]/10000\n\n# Initialize annual stats arrays\ny_range = np.arange(1901, 2014)\nnyears = len(y_range)\ny_counts = np.zeros(nyears)\n\n# Get annual counts\nfor year in y_range:\n   indices = np.where(year == years)\n   selection = visibility[indices]\n   y_counts[year - 1901] = len(selection[selection > 79])\n\nplt.subplot(211)\nplt.plot(np.arange(1, 367), mist, color='.25', label='mist')\nplt.plot(np.arange(1, 367), haze, color='0.75', lw=2, label='haze')\nplt.title('Probability of mist and haze')\nplt.xlabel('Day of the year')\nplt.ylabel('Probability')\nplt.grid()\nplt.legend(loc='best')\n\nplt.subplot(212)\nplt.plot(y_range, y_counts)\nplt.xlabel('Year')\nplt.ylabel('Number of clear days')\nplt.title('Annual counts of clear days')\nplt.grid()\nplt.tight_layout()\nplt.show()\n```", "```py\n    for i, d in enumerate(doy_range):\n       indices = np.where(d == doy)\n       selection = visibility[indices]\n\n       mist_truth = (10 < selection) & (selection < 20)\n       mist[i] = len(selection[mist_truth])/(1\\. * len(selection))\n\n       haze_truth = (20 < selection) & (selection < 50)\n       haze[i] = len(selection[haze_truth])/(1\\. * len(selection))\n    ```", "```py\n    for year in y_range:\n       indices = np.where(year == years)\n       selection = visibility[indices]\n       y_counts[year - 1901] = len(selection[selection > 79])\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.load('cbk12.npy')\n\n# Load average pressure\nmeanp = .1 * data[:,1]\n\n# Split point for test and train data\ncutoff = 0.9 * len(meanp)\n\nfor degree, marker in zip(xrange(1, 4), ['o', 'x','.']):\n   poly = np.polyfit(meanp[:cutoff - 1], meanp[1:cutoff], degree)\n   print('Polynomial coefficients', poly)\n\n   fit = np.polyval(poly, meanp[cutoff:-1])\n   error = np.abs(meanp[cutoff + 1:] - fit)/fit\n   plt.plot(error, marker, color=str(.25* degree), label='Degree ' + str(degree))\n   plt.plot(np.full(len(error), error.mean()), lw=degree, label='Mean for degree ' + str(degree))\n\n   print(\"Absolute mean relative error\", error.mean(), 'for polynomial of degree', degree)\n   print()\n\nplt.title('Relative test errors for polynomial fits')\nplt.ylabel('Relative error')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    cutoff = 0.9 * len(meanp)\n    ```", "```py\n    poly = np.polyfit(meanp[:cutoff - 1], meanp[1:cutoff], degree)\n    print('Polynomial coefficients', poly)\n\n    fit = np.polyval(poly, meanp[cutoff:-1])\n    ```", "```py\n    error = np.abs(meanp[cutoff + 1:] - fit)/fit\n    ```", "```py\n    Polynomial coefficients [ 0.995542    4.50866543]\n    Absolute mean relative error 0.00442472512506 for polynomial of degree 1\n\n    Polynomial coefficients [ -1.79946321e-04   1.17995347e+00   2.77195814e+00]\n    Absolute mean relative error 0.00421276856088 for polynomial of degree 2\n\n    Polynomial coefficients [  3.17914507e-06  -6.62444552e-03   4.44558056e+00   2.76520065e+00]\n    Absolute mean relative error 0.0041906802632 for polynomial of degree 3\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime as dt\nfrom scipy.optimize import leastsq\n\ndata = np.load('cbk12.npy')\n\n# Load average pressure\nmeanp = .1 * data[:,1]\n\ncutoff = 0.9 * len(meanp)\n\ndef model(p, ma1):\n   return p * ma1\n\ndef error(p, t, ma1):\n   return t - model(p, ma1)\n\np0 = [.9]\nmu = meanp[:cutoff].mean()\nparams = leastsq(error, p0, args=(meanp[1:cutoff] - mu, meanp[:cutoff-1] - mu))[0]\nprint(params)\n\nabs_error = np.abs(error(params, meanp[cutoff+1:] - mu, meanp[cutoff:-1] - mu))\nplt.plot(abs_error, label='Absolute error')\nplt.plot(np.full_like(abs_error, abs_error.mean()), lw=2, label='Absolute mean error')\nplt.title('Absolute error for the moving average model')\nplt.ylabel('Absolute error (hPa)')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    def model(p, ma1):\n       return p * ma1\n\n    def error(p, t, ma1):\n       return t - model(p, ma1)\n    ```", "```py\n    p0 = [.9]\n    mu = meanp[:cutoff].mean()\n    params = leastsq(error, p0, args=(meanp[1:cutoff] - mu, meanp[:cutoff-1] - mu))[0]\n    ```", "```py\n    abs_error = np.abs(error(params, meanp[cutoff+1:] - mu, meanp[cutoff:-1] - mu))\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport calendar as cal\n\ndata = np.load('cbk12.npy')\n\n# Multiply to get hPa values\nmeanp = .1 * data[:,1]\n\n# Get months\ndates = data[:,0]\nmonths = (dates % 10000)/100\n\nmonthly = []\nvars = np.zeros(12)\nmonth_range = np.arange(1, 13)\n\nfor month in month_range:\n indices = np.where(month == months)\n selection = meanp[indices]\n\n # Filter out 0 values\n selection = selection[selection > 0]\n\n monthly.append(selection)\n vars[month - 1] = np.var(selection)\n\ndef plot():\n    plt.xticks(month_range, cal.month_abbr[1:13])\n    plt.grid()\n    plt.xlabel('Month')\n\nplt.subplot(211)\nplot()\nplt.title('Atmospheric pressure box plots')\nplt.boxplot(monthly)\nplt.ylabel('Atmospheric pressure (hPa)')\n\nplt.subplot(212)\nplot()\n\n# Display error bars using standard deviation\nplt.errorbar(month_range, vars, yerr=vars.std())\nplt.plot(month_range, np.full_like(month_range, np.median(vars)), lw=3, label='Median')\n\n# Shades the region above the median\nplt.fill_between(month_range, vars, where=vars>np.median(vars), color='0.5')\nplt.title('Variance of atmospheric pressure')\nplt.ylabel('Variance')\nplt.legend(loc='best')\n\nplt.show()\n```", "```py\n    plt.errorbar(month_range, vars, yerr=vars.std())\n    ```", "```py\n    plt.fill_between(month_range, vars, where=vars>np.median(vars), color='0.5')\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport calendar as cal\n\ndata = np.load('cbk12.npy')\n\n# Multiply to get hPa values\nmeanp = .1 * data[:,1]\n\n# Filter out 0 values\nmeanp = np.ma.array(meanp, mask = meanp == 0)\n\n# Calculate quartiles and irq\nq1 = np.percentile(meanp, 25)\nmedian = np.percentile(meanp, 50)\nq3 = np.percentile(meanp, 75)\n\nirq = q3 - q1\n\n# Get months\ndates = data[:,0]\nmonths = (dates % 10000)/100\n\nm_low = np.zeros(12)\nm_high = np.zeros(12)\nmonth_range = np.arange(1, 13)\n\nfor month in month_range:\n   indices = np.where(month == months)\n   selection = meanp[indices]\n   m_low[month - 1] = len(selection[selection < (q1 - 1.5 * irq)])\n   m_high[month - 1] = len(selection[selection > (q3 + 1.5 * irq)])\n\nplt.xticks(month_range, cal.month_abbr[1:13])\nplt.bar(month_range, m_low, label='Low outliers', color='.25')\nplt.bar(month_range, m_high, label='High outliers', color='0.5')\nplt.title('Atmospheric pressure outliers')\nplt.xlabel('Month')\nplt.ylabel('# of outliers')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    q1 = np.percentile(meanp, 25)\n    median = np.percentile(meanp, 50)\n    q3 = np.percentile(meanp, 75)\n\n    irq = q3 - q1\n    ```", "```py\n    for month in month_range:\n       indices = np.where(month == months)\n       selection = meanp[indices]\n       m_low[month - 1] = len(selection[selection < (q1 - 1.5 * irq)])\n       m_high[month - 1] = len(selection[selection > (q3 + 1.5 * irq)])\n    ```"]