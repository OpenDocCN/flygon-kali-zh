["```cs\n#if __IOS__ \n   // Only compile this code on iOS\n#elif __ANDROID__ \n   // Only compile this code on Android\n#endif\n```", "```cs\nusing Xamarin.Forms;\n\nnamespace WhackABox.Controls\n{\n    public class ARView : View\n    {\n    }\n} \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\">\n<ContentPage  \n\n           x:Class=\"WhackABox.MainPage\">\n\n **<Grid>**\n **<Grid.ColumnDefinitions>**\n **<ColumnDefinition Width=\"*\" />**\n **<ColumnDefinition Width=\"*\" />**\n **</Grid.ColumnDefinitions>**\n\n **<Grid.RowDefinitions>**\n **<RowDefinition Height=\"100\" />**\n **<RowDefinition Height=\"*\" />**\n **</Grid.RowDefinitions>**\n\n **<StackLayout Grid.Row=\"0\" Padding=\"10\">**\n **<Label Text=\"Plane count\" />**\n **<Label Text=\"0\" FontSize=\"Large\"  \n             x:Name=\"planeCountLabel\" />**\n **</StackLayout>**\n\n **<StackLayout** **Grid.Row=\"0\"** **Grid.Column=\"1\" Padding=\"10\">**\n **<Label Text=\"Box count\" />**\n **<Label Text=\"0\" FontSize=\"Large\"   \n          x:Name=\"boxCountLabel\"/>**\n **</StackLayout>**\n\n **<controls:ARView Grid.Row=\"1\" Grid.ColumnSpan=\"2\" />**\n **</Grid>**\n </ContentPage> \n```", "```cs\nprotected override void OnResume()\n{\n    base.OnResume();\n    UrhoSurface.OnResume();\n\n    MessagingCenter.Send(this, \"OnResume\");\n}\n\nprotected override void OnPause()\n{\n    UrhoSurface.OnPause();\n    base.OnPause();\n}\n\nprotected override void OnDestroy()\n{\n    UrhoSurface.OnDestroy();\n    base.OnDestroy();\n}\n\npublic override void OnBackPressed()\n{\n    UrhoSurface.OnDestroy();\n    Finish();\n}\n\npublic override void OnLowMemory()\n{\n    UrhoSurface.OnLowMemory();\n    base.OnLowMemory();\n} \n```", "```cs\nusing Urho;\n\nnamespace WhackABox\n{\n    public class PlaneNode :Node\n    {\n        public string PlaneId { get; set; }\n        public float ExtentX { get; set; }\n        public float ExtentZ { get; set; }\n    }\n} \n```", "```cs\nusing System.Threading.Tasks;\nusing Urho.iOS;\nusing WhackABox.Controls;\nusing WhackABox.iOS.Renderers;using Xamarin.Forms;\nusing Xamarin.Forms.Platform.iOS;\n\n [assembly: ExportRenderer(typeof(ARView), typeof(ARViewRenderer))]\n\n namespace WhackABox.iOS.Renderers\n{\n    public class ARViewRenderer : ViewRenderer<ARView, UrhoSurface>\n    {\n          protected async override void \n          OnElementChanged(ElementChangedEventArgs<ARView> e)\n        {\n            base.OnElementChanged(e);\n\n            if (Control == null)\n            {\n                await Initialize();\n            }\n         }\n\n         private async Task Initialize()\n         {\n             var surface = new UrhoSurface();\n             SetNativeControl(surface);\n             await surface.Show<Game>();\n         }\n     }\n}\n```", "```cs\n using System.Threading.Tasks;\n using Android;\n using Android.App;\n using Android.Content;\n using Android.Content.PM;\n using Android.Support.V4.App;\n using Android.Support.V4.Content;\n using WhackABox.Droid.Renderers;\n using WhackABox;\n using WhackABox.Controls;\n using WhackABox.Droid;\n using Urho.Droid;\n using Xamarin.Forms;\n using Xamarin.Forms.Platform.Android;\n\n  [assembly: ExportRenderer(typeof(ARView), \n  typeof(ARViewRenderer))]\n  namespace WhackABox.Droid.Renderers\n {\n     public class ARViewRenderer : ViewRenderer<ARView,  \n     Android.Views.View>\n     {\n         private UrhoSurfacePlaceholder surface;\n         public ARViewRenderer(Context context) : base(context)\n         {\n             MessagingCenter.Subscribe<MainActivity>(this,  \n             \"OnResume\", async (sender) =>\n             {\n                 await Initialize();\n             });\n         }\n\n         protected async override void \n         OnElementChanged(ElementChangedEventArgs<ARView> e)\n         {\n             base.OnElementChanged(e);\n\n             if (Control == null)\n             {\n                 await Initialize();\n             }\n         }\n\n         private async Task Initialize()\n         {\n             if (ContextCompat.CheckSelfPermission(Context, \n                 Manifest.Permission.Camera) != Permission.Granted)\n             {\n                 ActivityCompat.RequestPermissions(Context as  \n                 Activity, new[] { Manifest.Permission.Camera },  \n                 42);\n                 return;\n             }\n\n             if (surface != null)\n                 return;\n\n             surface = UrhoSurface.CreateSurface(Context as \n             Activity);\n             SetNativeControl(surface);\n\n             await surface.Show<Game>();\n         }\n     }\n }\n\n```", "```cs\nusing System;\nusing System.Linq;\nusing Urho;\nusing Urho.Shapes;\n\nnamespace WhackABox\n{\n    public partial class Game : Application\n    {\n        private Scene scene; \n\n        public Game(ApplicationOptions options) : base(options)\n        {\n        } \n    }\n}\n```", "```cs\nprivate void CreateSubPlane(PlaneNode planeNode)\n{\n    var node = planeNode.CreateChild(\"subplane\");\n    node.Position = new Vector3(0, 0.05f, 0);\n\n    var box = node.CreateComponent<Box>();\n    box.Color = Color.FromHex(\"#22ff0000\");\n} \n```", "```cs\nprivate void UpdateSubPlane(PlaneNode planeNode, Vector3 position)\n{\n    var subPlaneNode = planeNode.GetChild(\"subplane\");\n    subPlaneNode.Scale = new Vector3(planeNode.ExtentX, 0.05f, \n    planeNode.ExtentZ);\n    subPlaneNode.Position = position;\n}\n```", "```cs\nprivate PlaneNode FindNodeByPlaneId(string planeId) =>\n                    scene.Children.OfType<PlaneNode>()\n                    .FirstOrDefault(e => e.PlaneId == planeId); \n```", "```cs\n#if __IOS__ \nnamespace WhackABox\n{\n    public partial class Game\n    {\n    }\n}\n#endif\n```", "```cs\n#if __ANDROID__namespace WhackABox\n{\n    public partial class Game\n    { \n    }\n}\n#endif\n```", "```cs\n#if __IOS__using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Linq;\nusing ARKit;\nusing Urho;\nusing Urho.iOS;\n\nnamespace WhackABox\n{\n    public partial class Game\n    {\n        private ARKitComponent arkitComponent;\n    }\n}\n#endif\n```", "```cs\nprivate void SetPositionAndRotation(ARPlaneAnchor anchor, PlaneNode \n                                    node)\n{\n     arkitComponent.ApplyOpenTkTransform(node, anchor.Transform, \n                                         true);\n\n     node.ExtentX = anchor.Extent.X;\n     node.ExtentZ = anchor.Extent.Z;\n\n     var position = new Vector3(anchor.Center.X, anchor.Center.Y, -\n                                anchor.Center.Z);\n     UpdateSubPlane(node, position);\n} \n```", "```cs\nprivate void UpdateOrAddPlaneNode(ARPlaneAnchor anchor)\n{\n    var node = FindNodeByPlaneId(anchor.Identifier.ToString());\n\n    if (node == null)\n    {\n        node = new PlaneNode()\n        {\n            PlaneId = anchor.Identifier.ToString(),\n            Name = $\"plane{anchor.GetHashCode()}\"\n        };\n\n        CreateSubPlane(node);\n        scene.AddChild(node);\n    }\n\n    SetPositionAndRotation(anchor, node);\n} \n```", "```cs\nprivate void OnAddAnchor(ARAnchor[] anchors)\n{\n    foreach (var anchor in anchors.OfType<ARPlaneAnchor>())\n    {\n        UpdateOrAddPlaneNode(anchor);\n    }\n}\n```", "```cs\nprivate void OnUpdateAnchors(ARAnchor[] anchors)\n{\n    foreach (var anchor in anchors.OfType<ARPlaneAnchor>())\n    {\n        UpdateOrAddPlaneNode(anchor);\n    }\n}\n```", "```cs\nprivate void OnRemoveAnchors(ARAnchor[] anchors)\n{\n    foreach (var anchor in anchors.OfType<ARPlaneAnchor>())\n    {\n        FindNodeByPlaneId(anchor.Identifier.ToString())?.Remove();\n    }\n} \n```", "```cs\nprivate void InitializeAR()\n{\n    arkitComponent = scene.CreateComponent<ARKitComponent>();\n    arkitComponent.Orientation = \n    UIKit.UIInterfaceOrientation.Portrait;\n    arkitComponent.ARConfiguration = new \n    ARWorldTrackingConfiguration\n    {\n        PlaneDetection = ARPlaneDetection.Horizontal\n    };\n    arkitComponent.DidAddAnchors += OnAddAnchor;\n    arkitComponent.DidUpdateAnchors += OnUpdateAnchors;\n    arkitComponent.DidRemoveAnchors += OnRemoveAnchors;\n    arkitComponent.RunEngineFramesInARKitCallbakcs = \n    Options.DelayedStart;\n    arkitComponent.Run();\n} \n```", "```cs\n#if __ANDROID__\nusing Com.Google.AR.Core;\nusing Urho;\nusing Urho.Droid;\n\nnamespace WhackABox\n{\n    public partial class Game\n    {\n        private ARCoreComponent arCore;\n    }\n}\n#endif\n\n```", "```cs\nprivate void SetPositionAndRotation(Com.Google.AR.Core.Plane plane,  \n                                    PlaneNode node)\n{\n    node.ExtentX = plane.ExtentX;\n    node.ExtentZ = plane.ExtentZ;\n    node.Rotation = new Quaternion(plane.CenterPose.Qx(),\n                                   plane.CenterPose.Qy(),\n                                   plane.CenterPose.Qz(),\n                                   -plane.CenterPose.Qw());\n\n    node.Position = new Vector3(plane.CenterPose.Tx(),\n                                plane.CenterPose.Ty(),\n                                -plane.CenterPose.Tz());\n}\n```", "```cs\nprivate void OnARFrameUpdated(Frame arFrame)\n{\n    var all = arCore.Session.GetAllTrackables(\n                  Java.Lang.Class.FromType(\n                  typeof(Com.Google.AR.Core.Plane)));\n\n    foreach (Com.Google.AR.Core.Plane plane in all)\n    {\n        var node = \n        FindNodeByPlaneId(plane.GetHashCode().ToString());\n\n        if (node == null)\n        {\n            node = new PlaneNode\n            {\n                PlaneId = plane.GetHashCode().ToString(),\n                Name = $\"plane{plane.GetHashCode()}\"\n            };\n\n            CreateSubPlane(node);\n            scene.AddChild(node);\n        }\n\n        SetPositionAndRotation(plane, node);\n        UpdateSubPlane(node, Vector3.Zero);\n    }\n} \n```", "```cs\nprivate void OnConfigRequested(Config config)\n{\n    config.SetPlaneFindingMode(Config.PlaneFindingMode.Horizontal);\n    config.SetLightEstimationMode\n\n    (Config.LightEstimationMode.AmbientIntensity);\n    config.SetUpdateMode(Config.UpdateMode.LatestCameraImage);\n} \n```", "```cs\nprivate void InitializeAR()\n{\n    arCore = scene.CreateComponent<ARCoreComponent>();\n    arCore.ARFrameUpdated += OnARFrameUpdated;\n    arCore.ConfigRequested += OnConfigRequested;\n    arCore.Run();\n} \n```", "```cs\nprivate Camera camera; \n\nprivate void InitializeCamera()\n{\n    var cameraNode = scene.CreateChild(\"Camera\");\n    camera = cameraNode.CreateComponent<Camera>();\n} \n```", "```cs\nprivate Viewport viewport; \n\nprivate void InitializeRenderer()\n{\n    viewport = new Viewport(Context, scene, camera, null);\n    Renderer.SetViewport(0, viewport);\n}\n```", "```cs\nprivate void InitializeLights()\n{\n    var lightNode = camera.Node.CreateChild();\n    lightNode.SetDirection(new Vector3(1f, -1.0f, 1f));\n    var light = lightNode.CreateComponent<Light>();\n    light.Range = 10;\n    light.LightType = LightType.Directional;\n    light.CastShadows = true;\n    Renderer.ShadowMapSize *= 4;\n} \n```", "```cs\nprotected override void Start()\n{\n   scene = new Scene(Context);\n   var octree = scene.CreateComponent<Octree>();\n\n    InitializeCamera();\n    InitializeLights();\n    InitializeRenderer();\n\n    InitializeAR();\n} \n```", "```cs\nprivate static Random random = new Random(); \n\nprivate void AddBox(PlaneNode planeNode)\n{\n    var subPlaneNode = planeNode.GetChild(\"subplane\");\n\n    var boxNode = planeNode.CreateChild(\"Box\");\n    boxNode.SetScale(0.1f);\n\n    var x = planeNode.ExtentX * (float)(random.NextDouble() - 0.5f);\n    var z = planeNode.ExtentZ * (float)(random.NextDouble() - 0.5f);\n\n    boxNode.Position = new Vector3(x, 0.1f, z) +  \n    subPlaneNode.Position;\n\n    var box = boxNode.CreateComponent<Box>();\n    box.Color = Color.Blue;\n} \n```", "```cs\nprivate float newBoxTtl;\nprivate readonly float newBoxIntervalInSeconds = 2; \n\nprotected override void OnUpdate(float timeStep)\n{\n    base.OnUpdate(timeStep);\n\n    newBoxTtl -= timeStep;\n\n    if (newBoxTtl < 0)\n    {\n        foreach (var node in scene.Children.OfType<PlaneNode>())\n        {\n            AddBox(node);\n        }\n\n        newBoxTtl += newBoxIntervalInSeconds;\n    }\n} \n```", "```cs\nusing Urho;\n\nnamespace WhackABox\n{\n    public class Rotator : Component\n    {\n        public Vector3 RotationSpeed { get; set; }\n\n        public Rotator()\n        {\n            ReceiveSceneUpdates = true;\n        }\n\n        protected override void OnUpdate(float timeStep)\n        {\n            Node.Rotate(new Quaternion(\n                RotationSpeed.X * timeStep,\n                RotationSpeed.Y * timeStep,\n                RotationSpeed.Z * timeStep),\n                TransformSpace.Local);\n        }\n    }\n}\n```", "```cs\nprivate void AddBox(PlaneNode planeNode)\n{\n    var subPlaneNode = planeNode.GetChild(\"subplane\");\n\n    var boxNode = planeNode.CreateChild(\"Box\");\n    boxNode.SetScale(0.1f);\n\n    var x = planeNode.ExtentX * (float)(random.NextDouble() - 0.5f);\n    var z = planeNode.ExtentZ * (float)(random.NextDouble() - 0.5f);\n\n    boxNode.Position = new Vector3(x, 0.1f, z) + \n    subPlaneNode.Position;\n\n    var box = boxNode.CreateComponent<Box>();\n    box.Color = Color.Blue;\n\n var rotationSpeed = new Vector3(10.0f, 20.0f, 30.0f);\n var rotator = new Rotator() { RotationSpeed = rotationSpeed };\n boxNode.AddComponent(rotator);\n} \n```", "```cs\n using Urho;\n using System;\n\n namespace WhackABox\n {\n     public class Death : Component\n     {\n         private float deathTtl = 1f;\n         private float initialScale = 1;\n\n         public Action OnDeath { get; set; }\n\n         public Death()\n         {\n             ReceiveSceneUpdates = true;\n         }\n\n         public override void OnAttachedToNode(Node node)\n         {\n             initialScale = node.Scale.X;\n         }\n\n         protected override void OnUpdate(float timeStep)\n         {\n             Node.SetScale(deathTtl * initialScale);\n\n             if (deathTtl < 0)\n             {\n                 Node.Remove();\n             }\n\n             deathTtl -= timeStep;\n         }\n     }\n } \n```", "```cs\nprivate void DetermineHit(float x, float y)\n{\n    var cameraRay = camera.GetScreenRay(x, y);\n    var result = scene.GetComponent<Octree>\n    ().RaycastSingle(cameraRay);\n\n    if (result?.Node?.Name?.StartsWith(\"Box\") == true)\n    {\n        var node = result?.Node;\n\n        if (node.Components.OfType<Death>().Any())\n        {\n            return;\n        }\n\n        node.CreateComponent<Death>();\n    }\n} \n```", "```cs\nprivate void OnTouchBegin(TouchBeginEventArgs e)\n{\n    var x = (float)e.X / Graphics.Width;\n    var y = (float)e.Y / Graphics.Height;\n\n    DetermineHit(x, y);\n}\n```", "```cs\nprotected override void Start()\n{\n scene = new Scene(Context);\n var octree = scene.CreateComponent<Octree>();\n\n InitializeCamera();\n InitializeLights();\n InitializeRenderer();\n\n Input.TouchBegin += OnTouchBegin;\n\n InitializeAR();\n} \n```", "```cs\npublic class GameStats\n{\n    public int NumberOfPlanes { get; set; }\n    public int NumberOfBoxes { get; set; }\n} \n```", "```cs\nprivate void SendStats()\n{\n    var planes = scene.Children.OfType<PlaneNode>();\n    var boxCount = 0;\n\n    foreach (var plane in planes)\n    {\n        boxCount += plane.Children.Count(e => e.Name == \"Box\");\n    }\n\n    var stats = new GameStats()\n    {\n        NumberOfBoxes = boxCount,\n        NumberOfPlanes = planes.Count()\n    };\n\n    Xamarin.Forms.Device.BeginInvokeOnMainThread(() =>\n    {\n        Xamarin.Forms.MessagingCenter.Send(this, \"stats_updated\",  \n        stats);\n    });\n} \n```", "```cs\nprotected override void Start()\n{\n    scene = new Scene(Context);\n    scene.NodeAdded += (e) => SendStats();\n scene.NodeRemoved += (e) => SendStats();\n    var octree = scene.CreateComponent<Octree>();\n\n    InitializeCamera();\n    InitializeLights();\n    InitializeRenderer();\n\n    Input.TouchEnd += OnTouchEnd;\n\n    InitializeAR();\n} \n```", "```cs\nprivate void StatsUpdated(Game sender, GameStats stats)\n{\n    boxCountLabel.Text = stats.NumberOfBoxes.ToString();\n    planeCountLabel.Text = stats.NumberOfPlanes.ToString();\n}\n```", "```cs\npublic MainPage()\n{\n    InitializeComponent();\n    MessagingCenter.Subscribe<Game, GameStats>(this,  \n    \"stats_updated\", StatsUpdated);\n} \n```"]