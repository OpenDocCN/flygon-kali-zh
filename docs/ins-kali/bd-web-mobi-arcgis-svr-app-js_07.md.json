["```js\nrequire([\"esri/tasks/IdentifyTask\", ... ], function(IdentifyTask,... ){ ... });\n```", "```js\nvar identifyParams = new IdentifyParameters();\n```", "```js\nidentifyParams.geometry = evt.MapPoint;identifyParams.layerIds[0,1,2]; \nidentifyParams.returnGeometry = true;identifyParams.tolerance = 3; \n```", "```js\nvar identify =new IdentifyTask(\"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer\");\n```", "```js\nidentifyParams = new IdentifyParameters();\nidentifyParams.tolerance = 3;\nidentifyParams.returnGeometry = true;\nidentifyParams.layerIds = [0,2];\nidentifyParams.geometry = evt.mapPoint;\n\n**identifyTask.execute(identifyParams, function(idResults) { addToMap(idResults, evt); });**\n\n**function addToMap(idResults, evt) {**\n **//add the results to the map**\n**}**\n\n```", "```js\nfunction addToMap(**idResults**, evt) {\n  bldgResults = {displayFieldName:null,features:[]};\n  parcelResults = {displayFieldName:null,features:[]};\n  for (vari=0, **i<idResults.length**; i++) {\n **var idResult = idResults[i];**\n    if (**idResult.layerId === 0**) {\n      if (!bldgResults.displayFieldName) \n        {bldgResults.displayFieldName = idResult.displayFieldName};\n        bldgResults.features.push(**idResult.feature**);\n      }\n    else if (**idResult.layerId === 2**) {\n        if (!parcelResults.displayFieldName)\n         {parcelResults.displayFieldName = idResult.displayFieldName};\n         parcelResults.features.push(**idResult.feature**);\n       }\n    }\ndijit.byId(\"bldgTab\").setContent(layerTabContent(bldgResults,\"bldgResults\"));\ndijit.byId(\"parcelTab\").setContent(layerTabContent(parcelResults,\"parcelResults\"));\nmap.infoWindow.show(evt.screenPoint,\nmap.getInfoWindowAnchor(evt.screenPoint));\n}\n```", "```js\n    <script>\n    **dojo.require(\"esri.map\");**\n\n    **function init(){**\n    **var map = new esri.Map(\"mapDiv\", {**\n    **center: [-56.049, 38.485],**\n    **zoom: 3,**\n    **basemap: \"streets\"**\n     **});**\n     **}**\n    **dojo.ready(init);**\n    </script>\n    ```", "```js\n    <script>\n    **var map;**\n    **var identifyTask, identifyParams;**\n    </script>\n    ```", "```js\n    <script>\n      var map;\n    var identifyTask, identifyParams;\n    **require([**\n     **\"esri/map\",  \"esri/dijit/Popup\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\"esri/tasks/IdentifyTask\",** \n     **\"esri/tasks/IdentifyResult\",\"esri/tasks/IdentifyParameters\",\"esri/dijit/InfoWindow\",\"esri/symbols/SimpleFillSymbol\",** \n     **\"esri/symbols/SimpleLineSymbol\",\"esri/InfoTemplate\", \"dojo/_base/Color\" ,\"dojo/on\",**\n     **\"dojo/domReady!\"**\n     **], function(Map, Popup, ArcGISDynamicMapServiceLayer,IdentifyTask, IdentifyResult, IdentifyParameters,InfoWindow,** \n     **SimpleFillSymbol, SimpleLineSymbol, InfoTemplate,Color, on) {**\n\n     **});**\n    </script>\n    ```", "```js\n    <script>\n      var map;\n    var identifyTask, identifyParams;\n    require([\n        \"esri/map\",  \"esri/dijit/Popup\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\"esri/tasks/IdentifyTask\", \n        \"esri/tasks/IdentifyResult\",\"esri/tasks/IdentifyParameters\",\"esri/dijit/InfoWindow\",\"esri/symbols/SimpleFillSymbol\", \n        \"esri/symbols/SimpleLineSymbol\", \"esri/InfoTemplate\", \"dojo/_base/Color\" ,\"dojo/on\",\n          \"dojo/domReady!\"\n          ], function(Map, Popup, ArcGISDynamicMapServiceLayer,IdentifyTask, IdentifyResult, IdentifyParameters,InfoWindow, \n      SimpleFillSymbol, SimpleLineSymbol, InfoTemplate, Color,on) {\n        //setup the popup window \n    var popup = new Popup({\n    fillSymbol: new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID,new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,new Color([255,0,0]), 2), new Color([255,255,0,0.25]))\n            }, dojo.create(\"div\"));\n\n    **map = new Map(\"map\", {**\n     **basemap: \"streets\",**\n     **center: [-83.275, 42.573],**\n     **zoom: 18,**\n     **infoWindow: popup**\n    **});**\n\n        });\n    </script>\n    ```", "```js\n    map = new Map(\"map\", {\n      basemap: \"streets\",\n      center: [-83.275, 42.573],\n      zoom: 18,\n      infoWindow: popup\n    });\n\n    var landBaseLayer = new ArcGISDynamicMapServiceLayer(\"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer\",{opacity:.55});\n    map.addLayer(landBaseLayer);\n    ```", "```js\n    map = new Map(\"map\", {\n      basemap: \"streets\",\n      center: [-83.275, 42.573],\n      zoom: 18,\n      infoWindow: popup\n    });\n\n    varlandBaseLayer = new ArcGISDynamicMapServiceLayer(\"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer\",{opacity:.55});\n    map.addLayer(landBaseLayer);\n\n    **map.on(\"click\", executeIdentifyTask);**\n\n    ```", "```js\n      identifyTask = newIdentifyTask(\"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer\");\n    ```", "```js\n    identifyTask = newIdentifyTask(\"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/BloomfieldHillsMichigan/Parcels/MapServer\");\n\n    **identifyParams = new IdentifyParameters();**\n    **identifyParams.tolerance = 3;**\n    **identifyParams.returnGeometry = true;**\n    **identifyParams.layerIds = [0,2];**\n    **identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_ALL;**\n    **identifyParams.width  = map.width;**\n    **identifyParams.height = map.height;**\n\n    ```", "```js\n    function executeIdentifyTask(evt) {\n            identifyParams.geometry = evt.mapPoint;\n            identifyParams.mapExtent = map.extent;\n\n            var deferred = identifyTask.execute(identifyParams);\n\n            deferred.addCallback(function(response) {     \n              // response is an array of identify result objects    \n              // Let's return an array of features.\n              return dojo.map(response, function(result) {\n                var feature = result.feature;\n                feature.attributes.layerName = result.layerName;\n                if(result.layerName === 'Tax Parcels'){\n                  console.log(feature.attributes.PARCELID);\n                  var template = new esri.InfoTemplate(\"\", \"${PostalAddress} <br/> Owner of record: ${First OwnerName}\");\n                  feature.setInfoTemplate(template);\n                }\n                else if (result.layerName === 'Building Footprints'){\n                  var template = new esri.InfoTemplate(\"\", \"Parcel ID:${PARCELID}\");\n                  feature.setInfoTemplate(template);\n                }\n                return feature;\n              });\n            });\n\n    // InfoWindow expects an array of features from each deferred\n    // object that you pass. If the response from the task execution \n    // above is not an array of features, then you need to add acallback\n    // like the one above to post-process the response and return an\n            // array of features.\n            map.infoWindow.setFeatures([ deferred ]);\n            map.infoWindow.show(evt.mapPoint);\n          }\n    ```", "```js\nvar findParams = new FindParameters();\nfindParams.searchText = dom.byId(\"ownerName\").value;\nfindParams.searchFields = [\"LEGALDESC\",\"ADDRESS\"]; //fields to search\nfindParams.returnGeometry = true;\nfindParams.layerIds = [0]; //layers to use in the find\nfindParams.outSpatialReference = map.spatialReference;\n```", "```js\nfindTask = new FindTask(\"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/TaxParcel/TaxParcelQuery/MapServer/\");\nfindTask.execute(findParams,showResults);\n\nfunction showResults(results) {\n    //This function processes the results\n}\n```", "```js\nfunction showResults(results) {\n//This function works with an array of FindResult that the taskreturns\n  map.graphics.clear();\n  var symbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, \n  new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n  new Color([98,194,204]), 2), new Color([98,194,204,0.5]));\n  //create array of attributes\n  var items = array.map(results,function(result){\n    var graphic = result.feature;\n    graphic.setSymbol(symbol);\n    map.graphics.add(graphic);\n    return result.feature.attributes;\n  });\n  //Create data object to be used in store\n  var data = {\n    identifier: \"PARCELID\", //This field needs to have unique values\n    label: \"PARCELID\", //Name field for display. Not pertinent toagrid but may be used elsewhere.\n    items: items\n  };\n  //Create data store and bind to grid.\n  store = new ItemFileReadStore({ data:data });\n  var grid = dijit.byId('grid');\n  grid.setStore(store);\n  //Zoom back to the initial map extent\n  map.centerAndZoom(center, zoom);\n}\n```"]