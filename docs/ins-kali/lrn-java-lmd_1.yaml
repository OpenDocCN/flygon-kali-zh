- en: Chapter 1. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍
- en: Welcome to Learning Java Lambdas.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到学习Java Lambda。
- en: Java underwent huge changes in it's version 8 release. A lot was driven by the
    perception that Java was becoming long in the tooth. To compete with modern, functional
    programming languages, Java 8 introduced functional programming constructs like
    lambdas to better support a more functional style.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java在其第8版发布中经历了巨大的变革。很多变化是由于Java变得老态龙钟的观念所驱动的。为了与现代的函数式编程语言竞争，Java 8引入了像lambda这样的函数式编程构造，以更好地支持更加函数式的风格。
- en: This book offers a concise explanation of lambdas and various other features
    required to make them work in Java. As well as offering background, syntax and
    usage examples of lambdas, the book describes other related features, such as
    functional interfaces and type inference.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书提供了对lambda和其他各种功能的简明解释，以使它们在Java中发挥作用。除了提供lambda的背景、语法和使用示例外，本书还描述了其他相关功能，如函数接口和类型推断。
- en: The road to modern Java
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通往现代Java的道路
- en: Java 8 was released on March 18, 2014, two years seven months after the previous
    release. It was plagued with delays and technical problems but when it finally
    came, it represented one of the biggest shifts in Java since Java 5.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8于2014年3月18日发布，距上一版发布已有两年零七个月。它受到了延迟和技术问题的困扰，但最终发布时，代表了自Java 5以来最重大的变革之一。
- en: The headliners were of course lambdas and a retrofit to support functional programming
    ideas. With languages such as **Scala** taking center stage and the modern trend
    towards functional programming, Java had to do something to keep up.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，头条新闻是lambda和对支持函数式编程思想的改进。随着**Scala**等语言占据主导地位，以及现代趋势向函数式编程，Java必须做些什么来跟上。
- en: Although Java is not and never will be a *pure* functional programming language,
    the changes in Java 8 enabled developers to use functional idioms more easily
    than in previous versions. With discipline and experience, you can now get a lot
    of the benefits of functional programming without resorting to third-party libraries.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Java不是也永远不会成为*纯*函数式编程语言，但Java 8的变化使得开发人员可以更容易地使用函数式习语，而不必求助于第三方库。
- en: Modern Java features
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代Java特性
- en: 'To give you an idea of just how big a change Java 8 was, and why it ushered
    in a new, modern Java, here''s a mostly complete list of the new features it introduced:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要让你了解Java 8有多么重大的变革，以及为什么它引领了一个新的、现代的Java，以下是它引入的新特性的大部分完整列表：
- en: Lambda support.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda支持。
- en: The core APIs were updated to take advantage of lambdas, including the collection
    APIs and a new functional package to help build functional constructs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心API已更新以利用lambda，包括集合API和一个新的函数包，以帮助构建函数构造。
- en: Entirely new APIs were developed that use lambdas, things like the stream API
    which brought functional style processing of data. For example, functions like
    `map` and `flatMap` from the stream API enable a declarative way to process lists
    and move away from external iteration to internal iteration. This in turn allows
    the *library vendors* to worry about the details and optimize processing however
    they like. For example, Java now comes with a parallel way to process streams
    without bothering the developer with the details.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发了完全新的API，使用了lambda，比如流API，它带来了对数据的函数式处理。例如，流API中的`map`和`flatMap`等函数使得以声明式的方式处理列表，并摆脱外部迭代转向内部迭代成为可能。这反过来允许*库供应商*担心细节并根据他们的喜好优化处理。例如，现在Java提供了一种并行处理流的方式，而不必让开发人员操心细节。
- en: Minor changes to the core APIs; new helper methods were introduced for strings,
    collections, comparators, numbers and maths.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心API的微小改变；为字符串、集合、比较器、数字和数学引入了新的辅助方法。
- en: Some of the additions are changing the way that people code. For example, the
    `Optional` class will be familiar to some, and it enables a better way to deal
    with nulls.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些新增功能正在改变人们编码的方式。例如，`Optional`类对一些人来说已经很熟悉，它提供了更好的处理空值的方式。
- en: There were various concurrency library improvements. Things like an improved
    concurrent hash map, completable futures, thread safe accumulators, an improved
    read write lock (called a StampedLock), an implementation of a work stealing thread
    pool and much more besides.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有各种并发库的改进。例如改进的并发哈希映射，可完成的未来，线程安全的累加器，改进的读写锁（称为StampedLock），一个工作窃取线程池的实现等等。
- en: Support for adding static methods to interfaces.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持向接口添加静态方法。
- en: Default methods (otherwise known as *virtual extension* or *defender methods*).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认方法（又称*虚拟扩展*或*防御者方法*）。
- en: Type inference was improved and new constructs like functional interfaces and
    method references were introduced to better support lambdas.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型推断得到了改进，引入了新的构造，如函数接口和方法引用，以更好地支持lambda。
- en: An improved date and time API was introduced (similar to the popular `Joda-time`
    library).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入了改进的日期和时间API（类似于流行的`Joda-time`库）。
- en: The `IO` and `NIO` packages received welcome additions to enable working with
    IO streams using the new streams API.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IO`和`NIO`包得到了欢迎的补充，以使用新的流API处理IO流。'
- en: Reflection and annotations were improved.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射和注解得到了改进。
- en: An entirely new JavaScript engine shipped with Java 8\. Nashorn replaced Rhino,
    and was faster and had better support for ECMA-Script.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 8配备了全新的JavaScript引擎。Nashorn取代了Rhino，速度更快，对ECMA-Script的支持更好。
- en: JVM improvements; the integration with JRocket was completed, creating a faster
    JVM.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM的改进；与JRocket的集成已完成，创建了一个更快的JVM。
- en: The JVM dropped the idea of perm gen, instead using native OS memory for class
    metadata. This is a huge deal and provides better memory utilization.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM放弃了永久代的概念，而是使用本机操作系统内存来存储类元数据。这是一个巨大的变革，提供了更好的内存利用率。
- en: The JRocket integration also brought Mission control (jmc) to the JDK as standard.
    It compliments JConsole and VisualVM with similar functionality but adds very
    inexpensive profiling.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JRocket集成还将Mission control（jmc）作为标准引入了JDK。它与JConsole和VisualVM具有类似的功能，但添加了非常廉价的性能分析。
- en: Other miscellaneous improvements, like improvements to JavaFX, base64 encoding
    support and more.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他杂项改进，如改进JavaFX，base64编码支持等等。
