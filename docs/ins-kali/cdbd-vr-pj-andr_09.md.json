["```kt\npublic class MainActivity extends CardboardActivity implements IRenderBox {\n    private static final String TAG = \"MainActivity\";CardboardView cardboardView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        cardboardView = (CardboardView) findViewById(R.id.cardboard_view);\n        cardboardView.setRenderer(new RenderBox(this, this));\n        setCardboardView(cardboardView);\n    }\n    @Override\n    public void setup() {\n    }\n    @Override\n    public void preDraw() {\n        // code run beginning each frame\n    }\n    @Override\n    public void postDraw() {\n        // code run end of each frame\n    }\n}\n```", "```kt\n    public void setup() {\n        new Transform()\n            .setLocalPosition(0,0,-7)\n            .setLocalRotation(45,60,0)\n            .addComponent(new Cube(true));\n    }\n```", "```kt\n    <!-- Visualizer permissions -->\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n```", "```kt\npublic class VisualizerBox {\n    static final String TAG = \"VisualizerBox\";\n    public VisualizerBox(final CardboardView cardboardView){\n    }\n    public void setup() {\n    }\n    public void preDraw() {\n    }\n    public void postDraw() {\n    }\n}\n```", "```kt\n    VisualizerBox visualizerBox;\n```", "```kt\n        visualizerBox = new VisualizerBox(cardboardView);\n```", "```kt\n    @Override\n    public void setup() {\n        visualizerBox.setup();\n    }\n    @Override\n    public void preDraw() {\n        visualizerBox.preDraw();\n    }\n    @Override\n    public void postDraw() {\n        visualizerBox.postDraw();\n    }\n```", "```kt\npublic abstract class Visualization {\n    VisualizerBox visualizerBox;            //owner\n\n    public Visualization(VisualizerBox visualizerBox){\n        this.visualizerBox = visualizerBox;\n    }\n    public abstract void setup();\n    public abstract void preDraw();\n    public abstract void postDraw();\n}\n```", "```kt\n    public Visualization activeViz;\n```", "```kt\n    public void setup() {\n        if(activeViz != null)\n            activeViz.setup();\n    }\n    public void preDraw() {\n        if(activeViz != null)\n            activeViz.preDraw();\n    }\n    public void postDraw() {\n        if(activeViz != null)\n            activeViz.postDraw();\n    }\n```", "```kt\npublic class BlankVisualization extends Visualization {\n    static final String TAG = \"BlankVisualization\";\n    public BlankVisualization(VisualizerBox visualizerBox) {\n        super(visualizerBox);\n    }\n    @Override\n    public void setup() {\n    }\n    @Override\n    public void preDraw() {\n    }\n    @Override\n    public void postDraw() {\n    }\n}\n```", "```kt\n    Visualizer visualizer;\n    public static int captureSize;\n    public static byte[] audioBytes;\n```", "```kt\n    public VisualizerBox(final CardboardView cardboardView){\n        visualizer = new Visualizer(0);\n        captureSize = Visualizer.getCaptureSizeRange()[0];\n        visualizer.setCaptureSize(captureSize);\n        // capture audio data\n        // Visualizer.OnDataCaptureListener captureListener = ...\n        visualizer.setDataCaptureListener(captureListener, Visualizer.getMaxCaptureRate(), true, true);\n        visualizer.setEnabled(true);\n    }\n```", "```kt\n        // capture audio data\n        Visualizer.OnDataCaptureListener captureListener = new Visualizer.OnDataCaptureListener() {\n            @Override\n            public void onWaveFormDataCapture(Visualizer visualizer, byte[] bytes, int samplingRate) {\n                audioBytes = bytes;\n            }\n            @Override\n            public void onFftDataCapture(Visualizer visualizer, byte[] bytes, int samplingRate) {\n            }\n        };\n```", "```kt\npublic class GeometricVisualization extends Visualization {\n    static final String TAG = \"GeometricVisualization\";\n    public GeometricVisualization(VisualizerBox visualizerBox) {\n        super(visualizerBox);\n    }\n}\n```", "```kt\n    Transform[] cubes;\n    Cube[] cubeRenderers;\n```", "```kt\n    public void setup() {\n        cubes = new Transform[VisualizerBox.captureSize / 2];\n        cubeRenderers = new Cube[VisualizerBox.captureSize / 2];\n\n        float offset = -3f;\n        float scaleFactor = (offset * -2) / cubes.length;\n        for(int i = 0; i < cubes.length; i++) {\n            cubeRenderers[i] = new Cube(true);\n            cubes[i] = new Transform()\n                    .setLocalPosition(offset, -2, -5)\n                    .addComponent(cubeRenderers[i]);\n            offset += scaleFactor;\n        }\n    }\n```", "```kt\n    public void preDraw() {\n        if (VisualizerBox.audioBytes != null) {\n            float scaleFactor = 3f / cubes.length;\n            for(int i = 0; i < cubes.length; i++) {\n                cubes[i].setLocalScale(scaleFactor, VisualizerBox.audioBytes[i] * 0.01f, 1);\n            }\n        }\n    }\n\n    public void postDraw() {\n    }\n```", "```kt\n        visualizerBox.activeViz = new GeometricVisualization(visualizerBox);\n```", "```kt\n    public static int genTexture(){\n        final int[] textureHandle = new int[1];\n        GLES20.glGenTextures(1, textureHandle, 0);\n        RenderBox.checkGLError(\"VisualizerBox GenTexture\");\n        if (textureHandle[0] != 0) {\n            // Bind to the texture in OpenGL\n            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[0]);\n            // Set filtering\n            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);\n            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);\n        }\n        if (textureHandle[0] == 0){\n            throw new RuntimeException(\"Error loading texture.\");\n        }\n        return textureHandle[0];\n    }\n```", "```kt\n    public static int audioTexture = -1;\n\n    public void setup() {\n        audioTexture = genTexture();\n        if(activeViz != null)\n            activeViz.setup();\n    }\n```", "```kt\n            public void onWaveFormDataCapture(Visualizer visualizer, byte[] bytes, int samplingRate){\n                audioBytes = bytes;\n                loadTexture(cardboardView, audioTexture, bytes);\n            }\n```", "```kt\n    public static void loadTexture(CardboardView cardboardView, final int textureId, byte[] bytes){\n        if(textureId < 0)\n            return;\n        final ByteBuffer buffer = ByteBuffer.allocateDirect(bytes.length * 4);\n        final int length = bytes.length;\n        buffer.order(ByteOrder.nativeOrder());\n        buffer.put(bytes);\n        buffer.position(0);\n        cardboardView.queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);\n                GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_LUMINANCE, length, 1, 0,\n                        GLES20.GL_LUMINANCE, GLES20.GL_UNSIGNED_BYTE, buffer);\n            }\n        });\n    }\n```", "```kt\nuniform mat4 u_MVP;\nattribute vec4 a_Position;\nattribute vec2 a_TexCoordinate;\nvarying vec2 v_TexCoordinate;\nvoid main() {\n   // pass through the texture coordinate\n   v_TexCoordinate = a_TexCoordinate;\n   // final point in normalized screen coordinates\n   gl_Position = u_MVP * a_Position;\n}\n```", "```kt\nprecision mediump float;        // default medium precision\nuniform sampler2D u_Texture;    // the input texture\nvarying vec2 v_TexCoordinate;   // interpolated texture coordinate per fragment\nuniform vec4 u_Color;\nuniform float u_Width;\n// The entry point for our fragment shader.\nvoid main() {\n    vec4 color;\n    float dist = abs(v_TexCoordinate.y - texture2D(u_Texture, v_TexCoordinate).r);\n    if(dist < u_Width){\n        color = u_Color;\n    }\n    gl_FragColor = color;\n}\n```", "```kt\npublic class WaveformMaterial extends Material {\n    private static final String TAG = \"WaveformMaterial\";\n}\n```", "```kt\n    static int program = -1; //Initialize to a totally invalid value for setup state\n    static int positionParam;\n    static int texCoordParam;\n    static int textureParam;\n    static int MVPParam;\n    static int colorParam;\n    static int widthParam;\n\n    public float borderWidth = 0.01f;\n    public float[] borderColor = new float[]{0.6549f, 0.8392f, 1f, 1f};\n\n    FloatBuffer vertexBuffer;\n    FloatBuffer texCoordBuffer;\n    ShortBuffer indexBuffer;\n    int numIndices;\n```", "```kt\n    public WaveformMaterial() {\n        super();\n        setupProgram();\n    }\n\n    public static void setupProgram() {\n        if(program > -1) return;\n        //Create shader program\n        program = createProgram( R.raw.waveform_vertex, R.raw.waveform_fragment );\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n\n        //Get vertex attribute parameters\n        positionParam = GLES20.glGetAttribLocation(program, \"a_Position\");\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n        texCoordParam = GLES20.glGetAttribLocation(program, \"a_TexCoordinate\");\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n\n        //Enable them (turns out this is kind of a big deal ;)\n        GLES20.glEnableVertexAttribArray(positionParam);\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n        GLES20.glEnableVertexAttribArray(texCoordParam);\n        RenderBox.checkGLError(\"Bitmap GenTexture\");\n\n        //Shader-specific parameters\n        textureParam = GLES20.glGetUniformLocation(program, \"u_Texture\");\n        MVPParam = GLES20.glGetUniformLocation(program, \"u_MVP\");\n        colorParam = GLES20.glGetUniformLocation(program, \"u_Color\");\n        widthParam = GLES20.glGetUniformLocation(program, \"u_Width\");\n        RenderBox.checkGLError(\"Waveform params\");\n    }\n```", "```kt\n    public WaveformMaterial setBuffers(FloatBuffer vertexBuffer, FloatBuffer texCoordBuffer, ShortBuffer indexBuffer, int numIndices) {\n        //Associate VBO data with this instance of the material\n        this.vertexBuffer = vertexBuffer;\n        this.texCoordBuffer = texCoordBuffer;\n        this.indexBuffer = indexBuffer;\n        this.numIndices = numIndices;\n        return this;\n    }\n```", "```kt\n    @Override\n    public void draw(float[] view, float[] perspective) {\n        GLES20.glUseProgram(program);\n\n        // Set the active texture unit to texture unit 0.\n        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);\n\n        // Bind the texture to this unit.\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, VisualizerBox.audioTexture);\n\n        // Tell the texture uniform sampler to use this texture in //the shader by binding to texture unit 0.\n        GLES20.glUniform1i(textureParam, 0);\n\n        Matrix.multiplyMM(modelView, 0, view, 0, RenderObject.model, 0);\n        Matrix.multiplyMM(modelViewProjection, 0, perspective, 0, modelView, 0);\n        // Set the ModelViewProjection matrix for eye position.\n        GLES20.glUniformMatrix4fv(MVPParam, 1, false, modelViewProjection, 0);\n\n        GLES20.glUniform4fv(colorParam, 1, borderColor, 0);\n        GLES20.glUniform1f(widthParam, borderWidth);\n\n        //Set vertex attributes\n        GLES20.glVertexAttribPointer(positionParam, 3, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n        GLES20.glVertexAttribPointer(texCoordParam, 2, GLES20.GL_FLOAT, false, 0, texCoordBuffer);\n\n        GLES20.glDrawElements(GLES20.GL_TRIANGLES, numIndices, GLES20.GL_UNSIGNED_SHORT, indexBuffer);\n\n        RenderBox.checkGLError(\"WaveformMaterial draw\");\n    }\n```", "```kt\n    public static void destroy(){\n        program = -1;\n    }\n```", "```kt\npublic class WaveformVisualization extends Visualization {\n    static final String TAG = \"WaveformVisualization\";\n    public WaveformVisualization(VisualizerBox visualizerBox) {\n        super(visualizerBox);\n    }\n    @Override\n    public void setup() {\n    }\n    @Override\n    public void preDraw() {\n    }\n    @Override\n    public void postDraw() {\n    }\n}\n```", "```kt\n    RenderObject plane;\n```", "```kt\n    public void setup() {\n        plane = new Plane().setMaterial(new WaveformMaterial()\n                .setBuffers(Plane.vertexBuffer, Plane.texCoordBuffer, Plane.indexBuffer, Plane.numIndices));\n\n        new Transform()\n                .setLocalPosition(-5, 0, 0)\n                .setLocalRotation(0, 90, 0)\n                .addComponent(plane);\n    }\n```", "```kt\n        visualizerBox.activeViz = new WaveformVisualization(visualizerBox);\n```", "```kt\n    public static byte[] fftBytes, fftNorm;\n    public static float[] fftPrep;\n    public static int fftTexture = -1;\n```", "```kt\n    public VisualizerBox(final CardboardView cardboardView){\n        . . .\n        fftPrep = new float[captureSize / 2];\n        fftNorm = new byte[captureSize / 2];\n        ...\n```", "```kt\n            @Override\n            public void onFftDataCapture(Visualizer visualizer, byte[] bytes, int samplingRate) {\n                fftBytes = bytes;\n                float max = 0;\n                for(int i = 0; i < fftPrep.length; i++) {\n                    if(fftBytes.length > i * 2) {\n                        fftPrep[i] = (float)Math.sqrt(fftBytes[i * 2] * fftBytes[i * 2] + fftBytes[i * 2 + 1] * fftBytes[i * 2 + 1]);\n                        if(fftPrep[i] > max){\n                            max = fftPrep[i];\n                        }\n                    }\n                }\n                float coeff = 1 / max;\n                for(int i = 0; i < fftPrep.length; i++) {\n                    if(fftPrep[i] < MIN_THRESHOLD){\n                        fftPrep[i] = 0;\n                    }\n                    fftNorm[i] = (byte)(fftPrep[i] * coeff * 255);\n                }\n                loadTexture(cardboardView, fftTexture, fftNorm);\n            }\n```", "```kt\n    final float MIN_THRESHOLD = 1.5f;\n```", "```kt\n    public void setup() {\n        audioTexture = genTexture();\n fftTexture = genTexture();\n        if(activeViz != null)\n            activeViz.setup();\n    }\n```", "```kt\nprecision mediump float;        // default medium precision\nuniform sampler2D u_Texture;    // the input texture\n\nvarying vec2 v_TexCoordinate;   // interpolated texture coordinate per fragment\nuniform vec4 u_Color;\n\nvoid main() {\n    vec4 color;\n    if(v_TexCoordinate.y < texture2D(u_Texture, v_TexCoordinate).r){\n        color = u_Color;\n    }\n    gl_FragColor = color;\n}\n```", "```kt\npublic class FFTMaterial extends Material {\n    private static final String TAG = \"FFTMaterial\";\n    ...\n\n    public FFTMaterial(){\n    ...\n```", "```kt\n    public float[] borderColor = new float[]{0.84f, 0.65f, 1f, 1f};\n```", "```kt\n        program = createProgram( R.raw.fft_vertex, R.raw.fft_fragment);\n```", "```kt\n    //Shader-specific parameters\n    textureParam = GLES20.glGetUniformLocation(program, \"u_Texture\");\n    MVPParam = GLES20.glGetUniformLocation(program, \"u_MVP\");\n    colorParam = GLES20.glGetUniformLocation(program, \"u_Color\");\n    RenderBox.checkGLError(\"FFT params\");\n```", "```kt\nGLES20.glBindTexture(GLES20.GL_TEXTURE_2D, VisualizerBox.fftTexture);\n```", "```kt\nGLES20.glUniform4fv(colorParam, 1, borderColor, 0);\n```", "```kt\n    public class FFTVisualization extends Visualization {\n```", "```kt\n    public void setup() {\n        plane = new Plane().setMaterial(new FFTMaterial()\n                .setBuffers(Plane.vertexBuffer, Plane.texCoordBuffer, Plane.indexBuffer, Plane.numIndices));\n\n        new Transform()\n                .setLocalPosition(5, 0, 0)\n                .setLocalRotation(0, -90, 0)\n                .addComponent(plane);\n    }\n```", "```kt\nvisualizerBox.activeViz = new FFTVisualization(visualizerBox);\n```", "```kt\n        RenderBox.mainCamera.trailsMode = true;\n```", "```kt\n    public boolean trailsMode;\n```", "```kt\npublic static float[] customClearColor = new float[]{0,0,0,0.05f};\n```", "```kt\n    public void onDrawEye(Eye eye) {\n if(trailsMode) {\n GLES20.glEnable(GLES20.GL_BLEND);\n GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\n customClear(customClearColor);\n GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT);\n } else {\n            GLES20.glEnable(GLES20.GL_DEPTH_TEST);\n            GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\n        }\n\n        ...\n```", "```kt\nattribute vec4 v_Position;\n\nvoid main() {\n   gl_Position = v_Position;\n}\n```", "```kt\nprecision mediump float;\nuniform vec4 u_Color;\n\nvoid main() {\n    gl_FragColor = u_Color;\n}\n```", "```kt\n    static int program = -1;\n    static int positionParam, colorParam;\n    static boolean setup;\n    public static FloatBuffer vertexBuffer;\n    public static ShortBuffer indexBuffer;\n    public static final int numIndices = 6;\n    public boolean trailsMode;\n\n    public static final float[] COORDS = new float[] {\n            -1.0f, 1.0f, 0.0f,\n            1.0f, 1.0f, 0.0f,\n            -1.0f, -1.0f, 0.0f,\n            1.0f, -1.0f, 0.0f\n    };\n    public static final short[] INDICES = new short[] {\n            0, 1, 2,\n            1, 3, 2\n    };\n    public static float[] customClearColor = new float[]{0,0,0,0.05f};\n```", "```kt\n    public static void setupProgram(){\n        if(program > -1)    //This means program has been set up //(valid program or error)\n            return;\n        //Create shader program\n        program = Material.createProgram(R.raw.fullscreen_solid_color_vertex, R.raw.fullscreen_solid_color_fragment);\n\n        //Get vertex attribute parameters\n        positionParam = GLES20.glGetAttribLocation(program, \"v_Position\");\n\n        //Enable vertex attribute parameters\n        GLES20.glEnableVertexAttribArray(positionParam);\n\n        //Shader-specific parameters\n        colorParam = GLES20.glGetUniformLocation(program, \"u_Color\");\n\n        RenderBox.checkGLError(\"Fullscreen Solid Color params\");\n    }\n```", "```kt\n    public static void allocateBuffers(){\n        setup = true;\n        vertexBuffer = RenderObject.allocateFloatBuffer(COORDS);\n        indexBuffer = RenderObject.allocateShortBuffer(INDICES);\n    }\n```", "```kt\n    public Camera(){\n        transform = new Transform();\n setupProgram();\n allocateBuffers();\n    }\n```", "```kt\n    public static void customClear(float[] clearColor){\n        GLES20.glUseProgram(program);\n        // Set the position buffer\n        GLES20.glVertexAttribPointer(positionParam, 3, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n        GLES20.glUniform4fv(colorParam, 1, clearColor, 0);\n        GLES20.glDrawElements(GLES20.GL_TRIANGLES, numIndices, GLES20.GL_UNSIGNED_SHORT, indexBuffer);\n    }\n```", "```kt\npublic List<Visualization> visualizations = new ArrayList<Visualization|();\n```", "```kt\n    public void setup() {\n        audioTexture = genTexture();\n        fftTexture = genTexture();\n        for (Visualization viz : visualizations) {\n            viz.setup();\n        }\n    }\n    public void preDraw() {\n        for (Visualization viz : visualizations) {\n            viz.preDraw();\n        }\n    }\n    public void postDraw() {\n        for (Visualization viz : visualizations) {\n            viz.postDraw();\n        }\n    }\n```", "```kt\nvisualizerBox = new VisualizerBox(cardboardView);\nvisualizerBox.visualizations.add( new GeometricVisualization(visualizerBox));\nvisualizerBox.visualizations.add( new WaveformVisualization(visualizerBox));\nvisualizerBox.visualizations.add( new FFTVisualization(visualizerBox));\n```", "```kt\n    public boolean active = true;\n    public abstract void activate(boolean enabled);\n```", "```kt\n    @Override\n    public void activate(boolean enabled) {\n        active = enabled;\n        plane.enabled = enabled;\n    }\n```", "```kt\n    @Override\n    public void activate(boolean enabled) {\n        active = enabled;\n        for(int i = 0; i < cubes.length; i++) {\n            cubeRenderers[i].enabled = enabled;\n        }\n    }\n```", "```kt\n        for (Visualization viz : visualizerBox.visualizations) {\n            viz.activate(false);\n        }\n```", "```kt\n    float timeToChange = 0f;\n    final float CHANGE_DELAY = 3f;\n    final Random rand = new Random();\n```", "```kt\n    public void preDraw() {\n        if (Time.getTime() > timeToChange) {\n            int idx = rand.nextInt( visualizerBox.visualizations.size() );\n            Visualization viz = visualizerBox.visualizations.get(idx);\n            viz.activate(!viz.active);\n            timeToChange += CHANGE_DELAY;\n        }\n        visualizerBox.preDraw();\n    }\n```"]