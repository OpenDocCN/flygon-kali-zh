["```cs\nclass TreeNode \n{ \n  public TreeNode(string text, object tag) \n  { \n    this.NodeText = text; \n    this.Tag = tag; \n    Nodes = new List<TreeNode>(); \n  } \n  public string NodeText { get; set; } \n  public Object Tag { get; set; } \n  public List<TreeNode> Nodes { get; set; } \n} \n```", "```cs\nstatic void Main(string[] args) \n{ \n  TreeNode node = new TreeNode(\"Root\", null); \n  node.Nodes.Add(new TreeNode(\"Child 1\", null)); \n  node.Nodes[0].Nodes.Add(new TreeNode(\"Grand Child 1\", null)); \n  node.Nodes.Add(new TreeNode(\"Child 1 (Sibling)\", null)); \n  PopulateTreeView(node, \"\"); \n  Console.Read(); \n} \n\n//Populates a Tree View on Console \nstatic void PopulateTreeView(TreeNode node, string space) \n{ \n  Console.WriteLine(space + node.NodeText); \n  space = space + \" \"; \n  foreach(var treenode in node.Nodes) \n  { \n    //Recurive call \n    PopulateTreeView(treenode, space); \n  } \n}\n```", "```cs\nstatic int SumNumbers(int a, int b) \n{ \n  return a + b; \n} \n```", "```cs\nstatic bool FindItem(List<string> items, string value) \n{ \n  foreach(var item in items) \n  { \n    if (item == value) \n    { \n      return true; \n    } \n  } \n  return false; \n} \n```", "```cs\nstatic void SelectionSort(int[] nums) \n{ \n  int i, j, min; \n\n  // One by one move boundary of unsorted subarray \n  for (i = 0; i <nums.Length-1; i++) \n  { \n    min = i; \n    for (j = i + 1; j < nums.Length; j++) \n    if (nums[j] < nums[min]) \n    min = j; \n\n    // Swap the found minimum element with the first element \n    int temp = nums[min]; \n    nums[min] = nums[i]; \n    nums[i] = temp; \n  } \n} \n```", "```cs\nstatic void Main(string[] args){ \n  Fibonacci_Recursive(0, 1, 1, 10); \n} \n\nstatic void Fibonacci_Recursive(int a, int b, int counter, int maxNo) \n{ \n  if (counter <= maxNo) \n  { \n    Console.Write(\"{0} \", a); \n    Fibonacci_Recursive(b, a + b, counter + 1, len); \n  } \n} \n```", "```cs\nstatic int binarySearch(int[] nums, int startingIndex, int length, int itemToSearch) \n{ \n  if (length >= startingIndex) \n  { \n    int mid = startingIndex + (length - startingIndex) / 2; \n\n    // If the element found at the middle itself \n    if (nums[mid] == itemToSearch) \n    return mid; \n\n    // If the element is smaller than mid then it is \n    // present in left set of array \n    if (nums[mid] > itemToSearch) \n    return binarySearch(nums, startingIndex, mid - 1, itemToSearch); \n\n    // Else the element is present in right set of array \n    return binarySearch(nums, mid + 1, length, itemToSearch); \n  } \n\n  // If item not found return 1 \n  return -1; \n} \n```", "```cs\nList<int> lstNumbers = new List<int>();     \nList<string> lstNames = new List<string>();     \nList<Person> personLst = new List<Person>();              \nHashSet<int> hashInt = new HashSet<int>();\n```", "```cs\nprivate static void AvoidBoxingUnboxing() \n{ \n\n  Stopwatch watch = new Stopwatch(); \n  watch.Start(); \n  //Boxing  \n  int counter = 0; \n  for (int i = 0; i < 1000000; i++) \n  { \n    //Unboxing \n    counter = i + 1; \n  } \n  watch.Stop(); \n  Console.WriteLine($\"Time taken {watch.ElapsedMilliseconds}\"); \n} \n\nprivate static void BoxingUnboxing() \n{ \n\n  Stopwatch watch = new Stopwatch(); \n  watch.Start(); \n  //Boxing  \n  object counter = 0; \n  for (int i = 0; i < 1000000; i++) \n  { \n    //Unboxing \n    counter = (int)i + 1; \n  } \n  watch.Stop(); \n  Console.WriteLine($\"Time taken {watch.ElapsedMilliseconds}\"); \n}\n```", "```cs\nprivate static void AddValuesInArrayList() \n{ \n\n  Stopwatch watch = new Stopwatch(); \n  watch.Start(); \n  ArrayList arr = new ArrayList(); \n  for (int i = 0; i < 1000000; i++) \n  { \n    arr.Add(i); \n  } \n  watch.Stop(); \n  Console.WriteLine($\"Total time taken is \n  {watch.ElapsedMilliseconds}\"); \n}\n```", "```cs\nprivate static void AddValuesInGenericList() \n{ \n\n  Stopwatch watch = new Stopwatch(); \n  watch.Start(); \n  List<int> lst = new List<int>(); \n  for (int i = 0; i < 1000000; i++) \n  { \n    lst.Add(i); \n  } \n  watch.Stop(); \n  Console.WriteLine($\"Total time taken is \n  {watch.ElapsedMilliseconds}\"); \n} \n```", "```cs\nString a = \"Hello World\"; \n```", "```cs\nString b = a;\n```", "```cs\nb= \"Hope this helps\"; \n```", "```cs\nstatic string GetCountryDetails(Dictionary<string, string> countryDictionary, string key)\n{\n  try\n  {\n    return countryDictionary[key];\n  }\n  catch (KeyNotFoundException ex)\n  {\n    KeyNotFoundException argEx = new KeyNotFoundException(\"\n    Error occured while executing GetCountryDetails method. \n    Cause: Key not found\", ex);\n    throw argEx;\n  }\n}\n```", "```cs\ndelegate int Log(string n);\n```", "```cs\nstatic int LogToConsole(string a) { Console.WriteLine(a); \n  return 1; \n}   \n```", "```cs\nLog logDelegate = LogToConsole; \nlogDelegate (\"This is a simple delegate call\"); \n```", "```cs\nstatic int LogToDatabase(string a) \n{ \n  Console.WriteLine(a); \n  //Log to database \n  return 1; \n} \n```", "```cs\nLog logDelegateDatabase = LogToDatabase; \nlogDelegateDatabase (\"This is a simple delegate call\"); \n```", "```cs\nLog logDelegate = LogToConsole; \nlogDelegate += LogToDatabase; \nlogDelegate(\"This is a simple delegate call\");     \n```"]