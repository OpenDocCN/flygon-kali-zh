["```kt\n//Let's have an integer array list and fill some data\nList<int> intListFull = new ArrayList<int>();\n//Fill data\nfor( int i = 0; i < 10; ++ i)\n{\n  intListFull.add(i);\n}\n\n// No we can have two different approach to print all \n// values as debug log.\n// Approach 1: not optimized code\nfor ( int i = 0; i < intListFull.size() ; ++ i)\n{\n  int temp = intListFull.get(i);\n  Log.d(\"EXAMPLE CODE\", \"value at \" + i + \" is \" + temp);\n}\n// List size will be calculated in each cycle, temp works \n//as auto variable and create one memory footprint in each \n//loop. Garbage collector will have to clear the memory. \n\n// Approach 2: optimized code\nint dataCount = intListFull.size();\nint temp;\nfor ( int i = 0; i < dataCount ; ++ i)\n{\n  temp = intListFull.get(i);\n  Log.d(\"EXAMPLE CODE\", \"value at \" + i + \" is \" + temp);\n}\n// only two temporary variable introduced to reduce a foot \n//print in each loop cycle.\n```", "```kt\npublic class Example\n{\n  public int a;\n  public int b;\n\n  public int getSum()\n  {\n    return (a + b);\n  }\n}\n//Lets have a look on un-optimized code\n// Here one object of Example class is instantiating per loop //cycle \u2029// Same is freed and re-instantiated\npublic class ExecuterExample\n{\n  public ExecuterExample()\n  {\n    for ( int i = 0; i < 10; ++ i)\n    {\n      Example test = new Example();\n      test.a = i;\n      test.b = i + 1;\n      Log.d(\"EXAMPLE\", \"Loop Sum: \" + test.getSum());\n    }\n  }\n}\n// Optimized Code would look like this\n// Here only one instance will be created for entire loop\npublic class ExecuterExample\n{\n  public ExecuterExample()\n  {\n    Example test = new Example();\n    for ( int i = 0; i < 10; ++ i)\n    {\n      test.a = i;\n      test.b = i + 1;\n      Log.d(\"EXAMPLE\", \"Loop Sum: \" + test.getSum());\n    }\n  }\n}\n```", "```kt\nint[] testArray = new int[] {0, 1, 2, 3, 5};\nfor (int i = 0; i < testArray.length; ++ i)\n{\n  Log.d(\"EXAMPLE\", \"value is \" + testArray[i]);\n}\n```", "```kt\nint[] testArray = new int[] {0, 1, 2, 3, 5};\nfor (int value : testArray)\n{\n  Log.d(\"EXAMPLE\", \"value is \" + value);\n}\n```", "```kt\nContext.startService();\n```", "```kt\npublic class ExampleClass\n{\n  public ExampleClass()\n  {\n    int bitMapCount = 0;  // primitive type\n    Bitmap testBmp = BitmapFactory.decodeFile(\"bitmap path\"); // Object loading\n    bitMapCount = 1;\n  }\n}\n```", "```kt\n// create a bitmap in a class constructor having global\n// scope with public access\npublic class ExampleClass\n{\n  public Bitmap testBmp;\n  public ExampleClass()\n  {\n    testBmp = BitmapFactory.decodeFile(\"bitmap path\");\n  }\n}\n```", "```kt\npublic class ExampleClass\n{\n  public Bitmap testBmp;\n  public ExampleClass()\n  {\n    testBmp = BitmapFactory.decodeFile(\"bitmap path\");\n  }\n  // create a method to free memory allocated for the\n  // bitmap after use\n  public void unloadBitmap()\n  {\n    testBmp = null;\n  }\n}\n```"]