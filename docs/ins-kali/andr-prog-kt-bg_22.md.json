["```kt\n// These will be used to make simple buttons\nprivate var resetButton: RectF\nprivate var togglePauseButton: RectF\n```", "```kt\ninit {\n   // Initialize the two buttons\n   resetButton = RectF(0f, 0f, 100f, 100f)\n   togglePauseButton = RectF(0f, 150f, 100f, 250f)\n}\n```", "```kt\n// Draw the buttons\ncanvas.drawRect(resetButton, paint)\ncanvas.drawRect(togglePauseButton, paint)\n\n```", "```kt\nimport android.graphics.PointF\n\nclass Particle(direction: PointF) {\n\n    private val velocity: PointF = PointF()\n    val position: PointF = PointF()\n\n    init {\n          // Determine the direction\n          velocity.x = direction.x\n          velocity.y = direction.y\n    }\n```", "```kt\nfun update() {\n    // Move the particle\n    position.x += velocity.x\n    position.y += velocity.y\n}\n```", "```kt\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.graphics.PointF\n\nimport java.util.*\n\nclass ParticleSystem {\n\n    private var duration: Float = 0f\n    private var particles: \n         ArrayList<Particle> = ArrayList()\n\n    private val random = Random()\n    var isRunning = false\n```", "```kt\nfun initParticles(numParticles:Int){\n\n   // Create the particles\n   for (i in 0 until numParticles) {\n         var angle: Double = random.nextInt(360).toDouble()\n         angle *= (3.14 / 180)\n\n         // Option 1 - Slow particles\n         val speed = random.nextFloat() / 3\n\n         // Option 2 - Fast particles\n         //val speed = (random.nextInt(10)+1);\n\n         val direction: PointF\n\n         direction = PointF(Math.cos(\n                     angle).toFloat() * speed,\n                     Math.sin(angle).toFloat() * speed)\n\n         particles.add(Particle(direction))\n\n    }\n}\n```", "```kt\nfun update(fps: Long) {\n   duration -= 1f / fps\n\n   for (p in particles) {\n         p.update()\n  }\n\n   if (duration < 0) {\n         isRunning = false\n  }\n}\n```", "```kt\nfun emitParticles(startPosition: PointF) {\n    isRunning = true\n\n    // Option 1 - System lasts for half a minute\n    duration = 30f\n\n    // Option 2 - System lasts for 2 seconds\n    //duration = 3f\n\n    for (p in particles) {\n          p.position.x = startPosition.x\n          p.position.y = startPosition.y\n   }\n}\n```", "```kt\nfun draw(canvas: Canvas, paint: Paint) {\n\n    for (p in particles) {\n\n           // Option 1 - Colored particles\n           //paint.setARGB(255, random.nextInt(256),\n           //random.nextInt(256),\n           //random.nextInt(256))\n\n           // Option 2 - White particles\n           paint.color = Color.argb(255, 255, 255, 255)\n           // How big is each particle?\n\n           // Option 1 - Big particles\n           //val sizeX = 25f\n           //val sizeY = 25f\n\n           // Option 2 - Medium particles\n           //val sizeX = 10f\n           //val sizeY = 10f\n\n           // Option 3 - Tiny particles\n           val sizeX = 12f\n           val sizeY = 12f\n\n           // Draw the particle\n           // Option 1 - Square particles\n           canvas.drawRect(p.position.x, p.position.y,\n                       p.position.x + sizeX,\n                       p.position.y + sizeY,\n                       paint)\n\n          // Option 2 - Circular particles\n          //canvas.drawCircle(p.position.x, p.position.y,\n          //sizeX, paint)\n   }\n}\n```", "```kt\n// The particle systems will be declared here later\nprivate val particleSystems = ArrayList<ParticleSystem>()\n\nprivate var nextSystem = 0\nprivate val maxSystems = 1000\nprivate val particlesPerSystem = 100\n\n```", "```kt\ninit {\n\n  // Initialize the two buttons\n  resetButton = RectF(0f, 0f, 100f, 100f)\n  togglePauseButton = RectF(0f, 150f, 100f, 250f)\n\n  // Initialize the particles and their systems\n  for (i in 0 until maxSystems) {\n particleSystems.add(ParticleSystem())\n particleSystems[i]\n .initParticles(particlesPerSystem)\n }\n}\n```", "```kt\nprivate fun update() {\n  // Update the particles\n  for (i in 0 until particleSystems.size) {\n if (particleSystems[i].isRunning) {\n particleSystems[i].update(fps)\n         }\n }\n}\n```", "```kt\n// Choose the font size\npaint.textSize = fontSize.toFloat()\n\n// Draw the particle systems\nfor (i in 0 until nextSystem) {\n particleSystems[i].draw(canvas, paint)\n}\n\n// Draw the buttons\ncanvas.drawRect(resetButton, paint)\ncanvas.drawRect(togglePauseButton, paint)\n```", "```kt\noverride fun onTouchEvent(\n   motionEvent: MotionEvent): Boolean {\n\n   return true\n}\n```", "```kt\n// User moved a finger while touching screen\nif (motionEvent.action and MotionEvent.\n ACTION_MASK == \n MotionEvent.ACTION_MOVE) {\n\n particleSystems[nextSystem].emitParticles(\n PointF(motionEvent.x,\n motionEvent.y))\n\n nextSystem++\n if (nextSystem == maxSystems) {\n nextSystem = 0\n }\n}\n\nreturn true\n```", "```kt\n// Did the user touch the screen\nif (motionEvent.action and MotionEvent.ACTION_MASK ==\n MotionEvent.ACTION_DOWN) {\n\n // User pressed the screen so let's \n // see if it was in the reset button\n if (resetButton.contains(motionEvent.x,\n motionEvent.y)) {\n\n // Clear the screen of all particles\n nextSystem = 0\n }\n\n // User pressed the screen so let's \n // see if it was in the toggle button\n if (togglePauseButton.contains(motionEvent.x,\n motionEvent.y)) {\n\n paused = !paused\n }\n}\n\nreturn true\n```", "```kt\ncanvas.drawText(\"Systems: $nextSystem\",\n         10f, (fontMargin + debugStart + \n         debugSize * 2).toFloat(), paint)\n\ncanvas.drawText(\"Particles: ${nextSystem * \n         particlesPerSystem}\",\n         10f, (fontMargin + debugStart \n         + debugSize * 3).toFloat(), paint)\n```"]