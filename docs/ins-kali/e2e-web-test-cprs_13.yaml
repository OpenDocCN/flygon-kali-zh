- en: '*Chapter 10*: Exercise – Navigation and Network Requests'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：练习-导航和网络请求'
- en: Before we get started on this chapter, it is important for you to understand
    that our focus in this third section of the book will be based on exercises and
    examples that will help you hone your testing skills and build knowledge that
    we may not have been able to cover in the previous chapters of this book. We will
    take a hands-on approach in this section with the goal being to work on as many
    examples and exercises as possible. Before we dive into this chapter, it is critical
    that you have gone through every chapter and are now looking to build upon the
    theoretical knowledge that you gained as we learned how Cypress can be used for
    testing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，重要的是要理解，我们在本书的第三部分的重点将放在练习和示例上，这将帮助您磨练测试技能并建立我们在本书之前可能无法涵盖的知识。在本节中，我们将采取实践方法，目标是尽可能多地进行示例和练习。在深入研究本章之前，重要的是您已经阅读了每一章，并且现在希望在我们学习Cypress如何用于测试时，建立在您获得的理论知识基础上。
- en: 'In this chapter, we will focus on exercises and examples that cover the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于涵盖以下主题的练习和示例：
- en: Implementing navigation requests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现导航请求
- en: Implementing network requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现网络请求
- en: Advanced navigation request configuration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级导航请求配置
- en: Once you've worked through each of these exercises, you will have the confidence
    to become a better tester and to get into more complex testing in areas of navigation
    and network requests.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了这些练习，您将有信心成为更好的测试人员，并在导航和网络请求领域进行更复杂的测试。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, it is recommended that you clone the repository that contains
    source code and all the tests that we will write in this chapter from GitHub.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，建议您从GitHub克隆包含源代码和本章中将编写的所有测试的存储库。
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的GitHub存储库可以在[https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress)找到。
- en: The source code for this chapter can be found in the `chapter-10` directory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在`chapter-10`目录中找到。
- en: Inside our GitHub repository, we have a finance test application that we will
    use for our different examples and exercises on Cypress navigation and Cypress
    requests as we go through this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的GitHub存储库中，我们有一个财务测试应用程序，我们将在本章中的不同示例和练习中使用Cypress导航和Cypress请求。
- en: 'Important note: running commands in Windows'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明：在Windows中运行命令
- en: 'NB: The default Windows Command Prompt and PowerShell do not correctly resolve
    the directory locations.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：默认的Windows命令提示符和PowerShell无法正确解析目录位置。
- en: Kindly follow the Windows commands listed further that work exclusively on Windows
    operating systems suffixed with the word `*windows`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请遵循以下列出的Windows命令，这些命令仅适用于以`*windows`结尾的Windows操作系统。
- en: To make sure the test application is running on your machine, run the following
    commands from the root folder directory of the application on your terminal in
    your machine.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保测试应用程序在您的机器上运行，请从应用程序的根文件夹目录中在您的终端上运行以下命令。
- en: 'The `npm run cypress-init` command will install the dependencies that the application
    requires to run and the `npm run cypress-app` command, on the other hand, will
    just start the application. Optionally, you can reset the application state using
    the `npm run cypress-app-reset` command. Resetting the application removes any
    data that has been added that was not part of the application, taking the application
    state back to when you cloned the repository. We can further run the commands
    in our terminal just as they are shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm run cypress-init`命令将安装应用程序运行所需的依赖项，另一方面，`npm run cypress-app`命令将启动应用程序。可选地，您可以使用`npm
    run cypress-app-reset`命令重置应用程序状态。重置应用程序会删除任何不属于应用程序的已添加数据，将应用程序状态恢复到克隆存储库时的状态。我们可以在终端中运行这些命令，就像它们在这里显示的那样：'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: We have two main folders in our `chapter-10` directory, one folder contains
    the application that we will use for our examples and testing exercises while
    the second folder contains our Cypress tests for our test application. To properly
    run our tests, we have to run both our application and the Cypress tests, as the
    tests run on the live application that runs locally on our machines. It is important
    to also note that the application will require us to use port *3000* for the frontend
    application and port *3001* for the backend application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`chapter-10`目录中有两个主要文件夹，一个文件夹包含我们将用于示例和测试练习的应用程序，而第二个文件夹包含我们的Cypress测试。为了正确运行我们的测试，我们必须同时运行我们的应用程序和Cypress测试，因为测试是在我们本地机器上运行的实时应用程序上运行的。还要注意，应用程序将要求我们使用端口*3000*用于前端应用程序和端口*3001*用于后端应用程序。
- en: Mastering the preceding commands will ensure that you will be able to run the
    application, reset the application state, and even install the dependencies for
    your application. Let's now get started with navigation requests.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握上述命令将确保您能够运行应用程序，重置应用程序状态，甚至安装应用程序的依赖项。现在让我们开始导航请求。
- en: Implementing navigation requests
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现导航请求
- en: Cypress navigation involves the behavior of navigating to the web pages of an
    application. In a lot of the tests that we have covered in this book, you might
    remember that before the tests, we have the `cy.visit()` command, which contains
    the URL of the page we are navigating to or that is being tested. The `cy.visit()`
    command is an example of a navigation command and assists us in making navigation
    requests in our Cypress frontend tests. In this section, we will cover different
    Cypress navigation commands by using examples and also exercises. By the end of
    this section, we will have a deeper understanding of Cypress navigation commands,
    which will help us build on the navigation knowledge that we already have from
    previous chapters of this book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress导航涉及导航到应用程序的网页的行为。在本书中我们已经涵盖了很多测试，在测试之前，您可能还记得`cy.visit()`命令，其中包含我们要导航到或正在测试的页面的URL。`cy.visit()`命令是导航命令的一个例子，它帮助我们在Cypress前端测试中进行导航请求。在本节中，我们将通过示例和练习介绍不同的Cypress导航命令。通过本节结束时，我们将更深入地了解Cypress导航命令，这将帮助我们在本书前几章已经具备的导航知识基础上构建更多的知识。
- en: cy.visit()
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.visit()
- en: We use `cy.visit()` in Cypress to navigate to a remote page of the application
    under test. By using this command, we can also pass in configuration information
    to the command and configure options such as the method, URL, timeout options,
    and even query parameters; we will dive into the configuration options of this
    command later in this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cypress中，我们使用`cy.visit()`导航到被测试应用程序的远程页面。通过使用这个命令，我们还可以传递配置信息给命令，并配置选项，如方法、URL、超时选项，甚至查询参数；我们将在本章后面深入探讨该命令的配置选项。
- en: In our GitHub repository, in the `chapter-10/cypress-realworld-app` directory,
    we have an application that we will use for our examples and also for our exercises.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的GitHub存储库中，在`chapter-10/cypress-realworld-app`目录中，我们有一个应用程序，我们将在示例和练习中使用。
- en: Important note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Our finance application located in the `chapter-10/cypress-realworld-app` directory
    records transactions. With the application, we can create transactions by either
    requesting or paying users for the transactions that already exist in the application.
    We can see notifications of transactions that have taken place and can also view
    the contacts and the log of the transactions that have taken place.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的金融应用程序位于`chapter-10/cypress-realworld-app`目录中，记录交易。通过该应用程序，我们可以通过请求或支付用户来创建交易，这些交易已经存在于应用程序中。我们可以看到已发生交易的通知，还可以查看联系人和已发生交易的日志。
- en: The application utilizes a JSON database and therefore it is a tad slow when
    loading all the data into our application. In our tests, we have implemented a
    "safety switch" to prevent flaky tests by ensuring that in the `beforeEach` method,
    we wait for all the initial **XHR** (**XMLHttpRequest**) requests to load data
    before we begin our test execution requests. See more information on the `beforeEach`
    method in the following code block.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序使用JSON数据库，因此在将所有数据加载到我们的应用程序时会有点慢。在我们的测试中，我们已经实现了一个“安全开关”，通过确保在`beforeEach`方法中，我们等待所有初始的XHR（XMLHttpRequest）请求加载数据，以防止测试失败。在下面的代码块中查看有关`beforeEach`方法的更多信息。
- en: 'In our first example, in `navigation.spec.js`, as shown in the following code
    block, we will use the `cy.visit()` command to navigate to the notification page
    of the application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个示例中，在`navigation.spec.js`中，如下所示的代码块，我们将使用`cy.visit()`命令导航到应用程序的通知页面：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code block illustrates the usage of the `cy.visit()` command where we visit
    a remote URL to the notifications route (`http://localhost:3000/notifications`),
    then verify that the remote URL we visited is what we expected. In our navigation
    command, we have also added the timeout option, which ensures that, before failing
    the navigation test, Cypress will wait for 30 seconds for the "page load" event
    before it fails the test.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块说明了`cy.visit()`命令的用法，我们访问远程URL到通知路由（`http://localhost:3000/notifications`），然后验证我们访问的远程URL是否符合预期。在我们的导航命令中，我们还添加了超时选项，确保在失败导航测试之前，Cypress将等待30秒的“页面加载”事件。
- en: 'The following screenshot shows our test being executed and Cypress waiting
    for all the data that has to be loaded from our JSON database by waiting on the
    XHR requests being received from the backend:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的测试正在执行，Cypress正在等待从后端接收的XHR请求加载所有必须从我们的JSON数据库中加载的数据：
- en: '![Figure 10.1 – XHR API requests and responses'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 - XHR API请求和响应'
- en: '](image/Figure_10.1_B15616.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_10.1_B15616.jpg)'
- en: Figure 10.1 – XHR API requests and responses
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 - XHR API请求和响应
- en: In this screenshot, we are navigating to the `/signin` page, then after waiting
    for all the resources to be loaded, we are using the Cypress `cy.visit()` command
    to navigate to the `/notifications` page, which is visible on the right side on
    the test application preview. This is further validated by our test assertion,
    which validates that the visited URL contains the name `notifications`. The following
    exercise will help you better understand how to implement tests using the `cy.visit()`
    command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们正在导航到`/signin`页面，然后等待所有资源加载完成后，我们使用Cypress的`cy.visit()`命令导航到`/notifications`页面，在测试应用程序预览的右侧可见。这进一步通过我们的测试断言进行验证，该断言验证访问的URL是否包含名称`notifications`。以下练习将帮助您更好地了解如何使用`cy.visit()`命令实现测试。
- en: Exercise 1
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1
- en: 'Using the financial application provided in the GitHub repository and located
    in the root directory in the `cypress-real-world-app` folder, carry out the following
    exercises to test your knowledge on the `cy.visit()` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`cypress-real-world-app`文件夹的根目录中，进行以下练习，测试您对`cy.visit()`命令的了解：
- en: Log in to our test application and navigate to the `http://localhost:3000/bankaccounts`
    URL using the `cy.visit()` command.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到我们的测试应用程序，并使用`cy.visit()`命令导航到`http://localhost:3000/bankaccounts` URL。
- en: Create a new bank account, and then check whether or not the application redirects
    back to the `/bankaccounts` URL after the new bank account creation.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的银行账户，然后检查在创建新的银行账户后应用程序是否重定向回`/bankaccounts` URL。
- en: Log in to the application and, using the `cy.visit()` command, try to navigate
    to `http://localhost:3000/signin`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录应用程序，并使用`cy.visit()`命令尝试导航到`http://localhost:3000/signin`。
- en: After a successful login event for a test user, verify that the URL redirects
    to the dashboard instead of the `/signin` page.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录测试用户后，验证URL重定向到仪表板而不是`/signin`页面。
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 练习的解决方案可以在`chapter-10/integration/navigation/navigation-exercise-solutions`目录中找到。
- en: This exercise will test your ability to understand the `cy.visit()` command,
    ensuring that, as a Cypress user, you can effectively use the command to navigate
    to different URLs and also pass in parameters and configuration options to the
    command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将测试您理解`cy.visit()`命令的能力，确保作为Cypress用户，您可以有效地使用该命令导航到不同的URL，并将参数和配置选项传递给命令。
- en: cy.go()
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.go()
- en: The Cypress `cy.go()` navigation command enables a user to navigate forward
    or backward in the application under test. While using the `cy.go()` command,
    passing the `'back'` option to the command will lead the browser to navigate to
    the previous page of the browser history while the `'forward'` option will lead
    the browser to navigate to a forward history of the page. We can also use this
    command to click the forward and back button by passing in number options as parameters,
    where the `'-1'` option will navigate the application *back* while passing `'1'`
    will lead to *forward* navigation from the browser history.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress的`cy.go()`导航命令使用户能够在测试应用程序中向前或向后导航。在使用`cy.go()`命令时，将'back'选项传递给命令将导致浏览器导航到浏览器历史记录的上一页，而'forward'选项将导致浏览器导航到页面的前进历史记录。我们还可以使用此命令通过传递数字选项作为参数来单击前进和后退按钮，其中'-1'选项将导航应用程序*后退*，而传递'1'将导致*前进*从浏览器历史记录中导航。
- en: By using `cy.go()`, we are able to manipulate the browser's navigation behavior
    by being able to step back to a previous page of a browser's history and also
    stepping forward to the next page of the browser's history.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`cy.go()`，我们能够通过能够向后跳转到浏览器历史记录的上一页，以及向前跳转到浏览器历史记录的下一页，来操纵浏览器的导航行为。
- en: Important note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We are only using `/bankaccounts` in our `cy.visit()` command as we have already
    declared `baseUrl` in our `cypress.json` file. `baseUrl` is the full version of
    the URL that we do not need to repeat every time we are using it in the `cy.visit()`
    and `cy.intercept()` commands. You can view more information in the GitHub repository
    that you cloned when starting this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`cy.visit()`命令中只使用`/bankaccounts`，因为我们已经在`cypress.json`文件中声明了`baseUrl`。`baseUrl`是URL的完整版本，我们在使用`cy.visit()`和`cy.intercept()`命令时不需要每次重复。您可以在开始本章时克隆的GitHub存储库中查看更多信息。
- en: 'In the following code block, we will use our finance application to verify
    that we can navigate back to the dashboard after navigating to the `/bankaccounts`
    page:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，我们将使用我们的金融应用程序来验证我们可以在导航到`/bankaccounts`页面后返回到仪表板：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this test, after navigating to the `/bankaccounts` URL, we then use the Cypress
    inbuilt `cy.go('back')` command to navigate back to the dashboard URL, which we
    then verify that we have successfully navigated back to. The following exercise
    will shed more light on how to use the `cy.go()` command.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此测试中，导航到`/bankaccounts` URL后，我们然后使用Cypress内置的`cy.go('back')`命令导航回仪表板URL，然后验证我们已成功导航回去。以下练习将更详细地介绍如何使用`cy.go()`命令。
- en: Exercise 2
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.go()` command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`chapter-10/cypress-real-world-app`目录中，执行以下练习以测试您对`cy.go()`命令的了解：
- en: Once logged in, on the transactions dashboard, click on the **Friends** tab,
    and then on the **Mine** tab.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，在交易仪表板上，单击**Friends**选项卡，然后单击**Mine**选项卡。
- en: Use Cypress to navigate back to the **Friends** tab using the `cy.go()` command.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Cypress使用`cy.go()`命令返回到**Friends**选项卡。
- en: Once logged in, click on the **New** button located at the top right of the
    application navigation bar and create a new transaction.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，单击应用程序导航栏右上角的**New**按钮，并创建一个新交易。
- en: Then navigate back to the dashboard page and back to the new transactions using
    the `cy.go()` Cypress command.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用`cy.go()`Cypress命令返回到仪表板页面，然后返回到新交易。
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 练习的解决方案可以在`chapter-10/integration/navigation/navigation-exercise-solutions`目录中找到。
- en: This exercise will help in building your skills for testing forward and back
    navigation using the `cy.go()` command. It will also assist in building your confidence
    when working with navigation when testing applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将帮助您建立使用`cy.go()`命令测试前进和后退导航的技能。它还将帮助您在测试应用程序时建立对导航的信心。
- en: cy.reload()
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.reload()
- en: 'The Cypress `cy.reload()` command is responsible for reloading a page. The
    command has only one set of options that can be passed to it, which is either
    to reload the page while clearing the cache or to reload the page with the cache
    being kept in the application memory. When a Boolean value of `true` is passed
    to the `cy.reload()` method, Cypress does not reload the page with the cache;
    instead, it clears the cache and loads new information about the page. The omission
    of the Boolean value leads Cypress to reload the page with the cache enabled.
    In the following code block, we are reloading the dashboard after logging into
    our application; this will refresh the state of our dashboard page:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress的`cy.reload()`命令负责重新加载页面。该命令只有一组选项可以传递给它，即重新加载页面时清除缓存或重新加载页面时保留应用程序内存中的缓存。当将`true`的布尔值传递给`cy.reload()`方法时，Cypress不会重新加载带有缓存的页面；相反，它会清除缓存并加载有关页面的新信息。省略布尔值会导致Cypress重新加载启用缓存的页面。在以下代码块中，我们在登录到我们的应用程序后重新加载仪表板；这将刷新我们仪表板页面的状态：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this test, if we had any cached items in our browser, Cypress will reload
    the page and invalidate the cache to ensure that a new state and cache of the
    page is created as our test is being executed. Let's look at the following exercise
    for more scenarios on the use of the `cy.reload()` command.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，如果我们的浏览器中有任何缓存项目，Cypress将重新加载页面并使缓存无效，以确保在执行我们的测试时创建页面的新状态和缓存。让我们看看下面的练习，了解更多关于使用`cy.reload()`命令的情景。
- en: Exercise 3
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercise to test your knowledge on the `cy.reload()` command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`chapter-10/cypress-real-world-app`目录中，进行以下练习，以测试您对`cy.reload()`命令的了解：
- en: Navigate to the **Account** menu item where we have the user settings.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**账户**菜单项，那里有用户设置。
- en: Edit the first and second name of your test user, before clicking on the **Save**
    button.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击**保存**按钮之前，编辑您测试用户的名字和姓氏。
- en: Reload the page and verify that the `cy.reload()` command resets all the settings
    that were not yet saved.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载页面并验证`cy.reload()`命令是否重置了尚未保存的所有设置。
- en: The solutions to the exercise can be found in the `chapter-10/integration/navigation/navigation-exercise-solutions`
    directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 练习的解决方案可以在`chapter-10/integration/navigation/navigation-exercise-solutions`目录中找到。
- en: In this exercise, we have learned that the reload command only resets items
    that are temporarily stored in the browser. By using the `cy.reload()` command,
    we have an understanding of how to reset the cached storage of our application
    and how to test it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们已经学会了reload命令只会重置浏览器中暂时存储的项目。通过使用`cy.reload()`命令，我们了解了如何重置我们应用程序的缓存存储以及如何对其进行测试。
- en: Recap – implementing navigation requests
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结 - 实现导航请求
- en: In this section, we learned how navigation requests work on Cypress by evaluating
    examples and doing exercises. We also explored various navigation commands such
    as `cy.visit()`, `cy.go()`, and `cy.reload()`, which all play a major role when
    executing navigation requests in Cypress. In the next section, we will be looking
    at how we implement network requests using a hands-on approach of exercises and
    examples.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过评估示例和进行练习来学习了Cypress上的导航请求是如何工作的。我们还探讨了各种导航命令，如`cy.visit()`、`cy.go()`和`cy.reload()`，它们在执行Cypress中的导航请求时都扮演着重要角色。在下一节中，我们将深入研究如何使用练习和示例来实现网络请求。
- en: Implementing network requests
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现网络请求
- en: Network requests involve the handling of AJAX and XHR requests to the backend
    services. Cypress handles this with its in-built `cy.request()` and `cy.intercept()`
    commands. In this section, we will take a hands-on approach and dive deep into
    how we implement network requests in Cypress using examples and exercises. We
    have previously interacted with network requests in [*Chapter 9*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196),
    *Advanced Uses of Cypress Test Runner*, of this book and this chapter will help
    you build on the theoretical knowledge and concepts that you are already familiar
    with.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 网络请求涉及处理向后端服务的AJAX和XHR请求。Cypress使用其内置的`cy.request()`和`cy.intercept()`命令来处理这一点。在本节中，我们将采用实践方法，深入探讨如何使用示例和练习在Cypress中实现网络请求。在本书的[*第9章*](B15616_09_Final_NM_ePUB.xhtml#_idTextAnchor196)中，我们已经与网络请求进行了交互，本章将帮助您建立在您已经熟悉的理论知识和概念基础上。
- en: cy.request()
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.request()
- en: 'The Cypress `cy.request()` command is responsible for making HTTP requests
    to API endpoints. This command can be used to execute API requests and receive
    responses without the need to create or import an external library to make and
    handle our API requests and responses. Our Cypress finance application uses a
    backend API that is based on a JSON database. To learn how the `cy.request()`
    command works, we will make requests to the database and check the responses.
    The following code block is a request to fetch all the transactions from our API:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress的`cy.request()`命令负责向API端点发出HTTP请求。该命令可用于执行API请求并接收响应，而无需创建或导入外部库来处理我们的API请求和响应。我们的Cypress金融应用程序使用基于JSON数据库的后端API。为了了解`cy.request()`命令的工作原理，我们将请求数据库并检查响应。以下代码块是一个请求，用于从我们的API中获取所有交易：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding test, we are verifying that our backend responds with a `200`
    status code and with the transactions data, which is an array. We will learn more
    about the `cy.request()` command in the following exercise.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的测试中，我们正在验证我们的后端是否以`200`状态代码和交易数据（数组）做出响应。我们将在下一个练习中了解更多关于`cy.request()`命令的内容。
- en: Exercise 4
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.server()` command. The solutions to
    the exercise can be found in the `chapter-10/integration/navigation/network-requests-excercise-solutions`
    directory:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`chapter-10/cypress-real-world-app`目录中，进行以下练习，以测试您对`cy.server()`命令的了解。练习的解决方案可以在`chapter-10/integration/navigation/network-requests-excercise-solutions`目录中找到：
- en: Once logged in, using your browser, investigate the XHR requests that are loaded
    by our `cypress-realworld` application when we first log in.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，使用您的浏览器，调查我们的`cypress-realworld`应用程序在我们首次登录时加载的XHR请求。
- en: 'From the observation, write a test that returns data for the following:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据观察，编写一个返回以下数据的测试：
- en: Contacts in the application
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的联系人
- en: Notifications in the application
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的通知
- en: By doing this exercise, you will have a better understanding of the `cy.request()`
    command and increase your knowledge of how Cypress requests work. Next, we will
    look at Cypress routing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进行这个练习，您将更好地理解`cy.request()`命令，并增加对Cypress请求工作原理的了解。接下来，我们将看一下Cypress路由。
- en: cy.intercept()
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.intercept()
- en: The `cy.intercept()` command manages the behavior of HTTP requests at the network
    layer of the tests. With the command, we can tell whether XHR requests were made
    and whether the responses to our requests match what we expect. We can even use
    the command to stub responses from routes. With `cy.intercept()`, we can dissect
    responses and ensure that we actually have the correct responses for our application
    under test. The `cy.intercept()` command gives us full access to all the HTTP
    requests of our Cypress tests at all stages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`cy.intercept()`命令管理测试的网络层的HTTP请求的行为。通过该命令，我们可以了解是否进行了XHR请求，以及我们的请求的响应是否与我们的预期相匹配。我们甚至可以使用该命令来存根路由的响应。使用`cy.intercept()`，我们可以解析响应并确保我们实际上对于我们测试的应用程序有正确的响应。`cy.intercept()`命令使我们可以在所有阶段完全访问我们Cypress测试的所有HTTP请求。'
- en: Important note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We have to call `cy.intercept()` before we reference them in our tests so that
    the routes are recorded before we call them in our tests and, from the following
    test, we can observe that behavior in the `beforeEach()` command block. In the
    test that follows, we called the `cy.intercept` command before we started running
    our Cypress test.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在测试中引用路由之前调用`cy.intercept()`，以便在测试中调用它们之前记录路由，并且从下面的测试中，我们可以观察到`beforeEach()`命令块中的行为。在接下来的测试中，我们在开始运行Cypress测试之前调用了`cy.intercept`命令。
- en: 'In the following code block, found in the `network-request.spec.js` file, we
    are verifying that we have a response of the user information when a correct login
    request is made by the application under test:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`network-request.spec.js`文件中找到的以下代码块中，我们正在验证在测试应用程序进行正确登录请求时，我们是否有用户信息的响应：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this code block, we are verifying that the application made a `POST` request
    to the login endpoint and we received a successful status of `200`, which is a
    successful login. The `cy.login()` command navigates to the login page of the
    application. We will interact with the `cy.intercept()` command further in the
    following exercise.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码块中，我们正在验证应用程序是否向登录端点发出了`POST`请求，并且我们收到了成功的`200`状态，这是一个成功的登录。`cy.login()`命令导航到应用程序的登录页面。我们将在下一个练习中进一步使用`cy.intercept()`命令。
- en: Exercise 5
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5
- en: 'Using the financial application provided in the GitHub repository and located
    in the `chapter-10/cypress-real-world-app` directory, carry out the following
    exercises to test your knowledge on the `cy.intercept()` command. The solutions
    to the exercise can be found in the `chapter-10/integration/navigation/network-requests-exercise-solutions`
    directory:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitHub存储库中提供的金融应用程序，位于`chapter-10/cypress-real-world-app`目录中，进行以下练习，以测试您对`cy.intercept()`命令的了解。练习的解决方案可以在`chapter-10/integration/navigation/network-requests-exercise-solutions`目录中找到：
- en: Log in to the test application and navigate to the account page.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到测试应用程序并转到账户页面。
- en: Use the Cypress `cy.route()` command to check whether Cypress verifies that
    a user is logged in when changing the user information.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Cypress的`cy.route()`命令来检查Cypress是否在更改用户信息时验证用户是否已登录。
- en: Time for a quick recap.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行快速总结了。
- en: Recap – implementing network requests
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-实施网络请求
- en: In this section, we explored how Cypress network requests work, and we did this
    by using examples and exercises to understand how `cy.request()` and `cy.intercept()`
    are utilized in Cypress tests. Using the examples and the exercises, we also got
    to expand our knowledge on how we use commands such as `cy.intercept()` to manipulate
    and stub. Now that we know about network requests and can comfortably write tests
    involving Cypress network requests, in the next section, we will dive into the
    advanced configuration of navigation requests.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了Cypress网络请求的工作原理，通过示例和练习来理解`cy.request()`和`cy.intercept()`在Cypress测试中的应用。通过示例和练习，我们还扩展了对如何使用诸如`cy.intercept()`之类的命令来操作和存根的知识。现在我们了解了网络请求，并且可以轻松地编写涉及Cypress网络请求的测试，在下一节中，我们将深入研究导航请求的高级配置。
- en: Advanced navigation request configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级导航请求配置
- en: Navigation is one of the most important aspects of properly running tests. By
    using the `cy.visit()`, `cy.go()`, and even `cy.reload()` commands, we have the
    ability to know what shortcuts to take when writing our tests. The navigation
    commands also significantly simplify test workflows. Most of the frontend tests
    require navigation and, therefore, grasping the advanced configuration will not
    only make your life easier but will also lead to a smoother experience while writing
    tests. In this section, we will focus mainly on the Cypress advanced command configuration
    for `cy.visit()` as it is the main navigation command for Cypress.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 导航是正确运行测试的最重要的方面之一。通过使用`cy.visit()`、`cy.go()`甚至`cy.reload()`命令，我们能够知道在编写测试时应该采取什么样的快捷方式。导航命令还显著简化了测试工作流程。大多数前端测试都需要导航，因此掌握高级配置不仅会让您的生活更轻松，而且在编写测试时也会带来更顺畅的体验。在本节中，我们将主要关注Cypress的`cy.visit()`命令的高级命令配置，因为它是Cypress的主要导航命令。
- en: cy.visit() configuration options
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cy.visit() 配置选项
- en: 'The following table shows the configuration options for the `cy.visit()` command
    and the default values that are loaded when no options are passed to the option
    object:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了`cy.visit()`命令的配置选项以及当没有传递选项给选项对象时加载的默认值：
- en: '![](image/B15616_10_Table_1a.jpg)![](image/B15616_10_Table_1b.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B15616_10_Table_1a.jpg)![](image/B15616_10_Table_1b.jpg)'
- en: 'The `cy.visit()` command accepts different types of parameters and this determines
    the configuration and the options that are passed to it. The following are the
    parameters that the command accepts:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`cy.visit()`命令接受不同类型的参数，这决定了传递给它的配置和选项。以下是该命令接受的参数：'
- en: 'Configuration with only the URL:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只使用URL进行配置：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Configuration with the URL and options as an object:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用URL和选项作为对象的配置：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Configuration with only options as an object:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只使用选项作为对象进行配置：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And it's recap time!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是总结时间！
- en: Recap – advanced navigation request configuration
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结-高级导航请求配置
- en: In this section, we learned how we can configure the `cy.visit()` command using
    different options and also the different types of parameters that the command
    accepts. We also learned different default options that Cypress provides for us
    when they have none and have been passed with the `options` object, and this makes
    the process of using the `cy.visit()` command easy as we only provide to the command
    the options that we need to override in the test.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用不同的选项配置`cy.visit()`命令，以及该命令接受的不同类型的参数。我们还学习了Cypress在没有传递选项对象时为我们提供的不同默认选项，这使得使用`cy.visit()`命令的过程变得简单，因为我们只需要向命令提供我们需要在测试中覆盖的选项。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how Cypress performs navigation, how requests are
    created, and how Cypress interprets and returns them for our test execution process.
    We took a hands-on approach to learning about the three fundamental Cypress navigation
    commands and also the three commands that Cypress uses for making and interpreting
    requests. The exercises provided a channel for you to get out of your comfort
    zone and do some research on advanced uses of Cypress and how we can integrate
    logic and the knowledge we have garnered in this book to write meaningful tests
    that add value to the applications being tested. Finally, we looked at the advanced
    configuration options of the `cy.visit()` command. I am confident that in this
    chapter, you learned the skills of handling and implementing navigation and network
    requests in tests and also configuring navigation requests.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Cypress如何执行导航，如何创建请求以及Cypress如何解释和返回它们以进行我们的测试执行过程。我们采用了实践方法来学习三个基本的Cypress导航命令，以及Cypress用于创建和解释请求的三个命令。这些练习为您提供了一个渠道，让您走出舒适区，并对Cypress的高级用法进行一些研究，以及如何将我们在本书中获得的逻辑和知识整合到编写有意义的测试中，从而为被测试的应用程序增加价值。最后，我们看了一下`cy.visit()`命令的高级配置选项。我相信在本章中，您学会了处理和实现测试中的导航和网络请求的技能，以及配置导航请求。
- en: Now that we have practically explored navigation and requests in Cypress using
    a hands-on approach, we will use the same approach in the next chapter to tackle
    stubbing and spying on tests using Cypress.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实际探索了使用Cypress进行导航和请求，接下来我们将在下一章中使用相同的方法来处理使用Cypress进行测试的存根和间谍。
