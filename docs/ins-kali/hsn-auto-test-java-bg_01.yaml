- en: First Programming Steps in Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中的第一步编程
- en: Welcome to *Hands-On Automation Testing with Java for Beginners*. This is the
    only book you will find on the internet that teaches every topic needed to emerge
    as a strong Java automation tester. It contains easy teaching and simple techniques
    to effectively handle Java-related automation/projects. Considering that we will
    cover each and every topic of core Java, with detailed explanations, this will
    really help us develop and grade our own Java automation projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读《初学者Java自动化测试实战》。这是您在互联网上找到的唯一一本教授每个需要的主题，以成为强大的Java自动化测试人员的书籍。它包含简单的教学和简单的技术，以有效地处理与Java相关的自动化/项目。考虑到我们将详细解释每个核心Java主题，这将真正帮助我们开发和评估我们自己的Java自动化项目。
- en: All the core Java concepts are explained from scratch. We do not assume that
    readers have any prerequisite knowledge, so we consider all readers to be from
    a non-coding background, and we teach each and also support them with examples
    that we will use in real time. Hence, we will not stick to only theories.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有核心Java概念都将从零开始解释。我们不假设读者具有任何先决知识，因此我们认为所有读者都来自非编码背景，并且我们将教授每个读者，并在实时中使用的示例中支持他们。因此，我们不会仅限于理论。
- en: When you check for courses in the market, you should try to learn one new concept.
    You just see three lines of definition followed by examples; that's all. But here,
    we will understand why, when, and where we are using the **object-oriented programming
    systems** (**OOPS**) concept in Java. There will also be proper programming examples,
    showing a particular OOPS concept in real-time usage. In this way, our book will
    drive through real-time projects; it's all about practical learning. This will
    come into play when we start with Java collections, such as core Java, which is
    one of the main concepts in our book since it is definitely required for you to
    start your basics and to develop an automation framework in your workplace. Also,
    since Java collections is one of the core parts, throughout the entire book we
    will take utmost care in providing all the necessary practical scenarios for each
    Java collection that we will discuss.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场上查找课程时，你应该尝试学习一个新概念。你只会看到三行定义，然后是例子；就是这样。但在这里，我们将了解为什么、何时以及在何处我们在Java中使用**面向对象编程系统**（**OOPS**）概念。还将提供适当的编程示例，展示实时使用中的特定OOPS概念。这样，我们的书将通过实时项目进行驱动；这完全是关于实际学习。当我们开始使用Java集合时，这将发挥作用，比如核心Java，这是我们书中的主要概念之一，因为你肯定需要从基础开始，并在工作场所开发自动化框架。此外，由于Java集合是核心部分之一，在整本书中，我们将非常注意为我们讨论的每个Java集合提供所有必要的实际场景。
- en: We will be working on tricky Java programs, looking at printouts, prime numbers,
    Fibonacci series, and pyramids. We will sort out print in descending order, looking
    at array matrices, and printing the maximum column numbers. This book will provide
    you with detailed strategies and tips that you will need to use when approaching
    and designing a logic for these programs. This will help you to think beyond the
    boundaries and get the logic that you will need to write difficult Java programs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究棘手的Java程序，查看输出、质数、斐波那契数列和金字塔。我们将按降序排列输出，查看数组矩阵，并打印最大列数。本书将为您提供详细的策略和技巧，这些将帮助您在处理这些程序时需要使用的逻辑。这将帮助您超越界限，获得编写困难Java程序所需的逻辑。
- en: Programs discussed in this book derive from commonly asked questions during
    interviews in many companies. You will receive help with those questions, with
    detailed solutions, and the methodology to approach that logic. So, this book
    is mainly focused on core Java. We are not dealing with swings and buttons, which
    are out of scope for Java learning in this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书讨论的程序源自许多公司面试中常见的问题。您将获得有关这些问题的帮助，包括详细的解决方案和处理该逻辑的方法。因此，本书主要侧重于核心Java。我们不涉及Swing和按钮，这在本书中超出了Java学习的范围。
- en: In this book, we will be learning core Java, collections, and other concepts
    such as loops, classes, and arrays . These are more than enough for you to start
    and develop a Java project. Whichever field you are put in, the knowledge gained
    from this book will help you start testing in the automation projects right away.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将学习核心Java、集合和其他概念，如循环、类和数组。这些对于您开始和开发Java项目已经足够了。无论您被安排在哪个领域，从本书中获得的知识将帮助您立即开始测试自动化项目。
- en: 'This chapter will cover the following concepts:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下概念：
- en: An introduction to Java and its installation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java及其安装简介
- en: Working with the Java editor tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Java编辑工具
- en: Writing your first executable program in Java
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java中编写您的第一个可执行程序
- en: An introduction to Java and its installation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java及其安装简介
- en: The first thing that comes to mind when we speak about Java is that it is platform-independent.
    This feature has made Java a hot programming tool in the market. So what exactly
    does platform-independent mean?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Java时，首先想到的是它是平台无关的。这个特性使Java成为市场上炙手可热的编程工具。那么平台无关到底意味着什么呢？
- en: The code that we write is independent of the environment; be it Windows, Unix,
    Linux, or Solaris. Basically, when we write a Java program, the Java compiler
    converts the program to bytecode. When we run the Java code, the Java compiler
    converts the entire programming code to bytecode. For example, we are working
    on a Windows machine. When we run the program and the Java compiler runs and creates
    bytecode for us, this bytecode can be taken and executed on any other platform,
    such as Linux, macOS, and Unix. So this means we are developing a bytecode in
    Windows, and that bytecode is runnable on any other platform. So this is what
    we mean by platform-independent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的代码与环境无关；无论是Windows、Unix、Linux还是Solaris。基本上，当我们编写一个Java程序时，Java编译器将程序转换为字节码。当我们运行Java代码时，Java编译器将整个编程代码转换为字节码。例如，我们正在使用Windows机器。当我们运行程序时，Java编译器运行并为我们创建字节码，这个字节码可以在任何其他平台上执行，比如Linux、macOS和Unix。这意味着我们在Windows上开发了一个字节码，而这个字节码可以在任何其他平台上运行。这就是我们所说的平台无关性。
- en: 'This is a really cool feature that we have in Java programming. Whenever you
    ask someone to download Java, the first question you will be asked is, is it JDK
    or JRE? People tend to get confused between these two terminologies. We need to
    be clear about this before we start downloading and configuring Java in our machines.
    Let''s have a look at both JRE and JDK:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Java编程中我们拥有的一个非常酷的功能。每当你让别人下载Java时，你会被问到的第一个问题是，是JDK还是JRE？人们往往会在这两个术语之间感到困惑。在我们开始下载和配置Java之前，我们需要对此有清楚的认识。让我们来看看JRE和JDK：
- en: '**JRE** stands for **Java Runtime Environment**: It is responsible for running
    our Java program. If our aim is to just run a plain Java core code then JRE is
    sufficient.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JRE**代表**Java运行环境**：它负责运行我们的Java程序。如果我们的目标只是运行一个普通的Java核心代码，那么JRE就足够了。'
- en: '**JDK** stands for **Java Development Kit**: It is used to debug our Java code,
    or if we want to have the Java documents or something similar.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDK**代表**Java开发工具包**：它用于调试我们的Java代码，或者如果我们想要Java文档或类似的东西。'
- en: JDK contains JRE, Java documentation, and debugging tools, and other cool things.
    It's an entire Java kit from which we will get all of its components. So it's
    up to us what we download, but I would recommend we only have JDK to be on the
    safe side. If we want to just practice and run our program, JRE is also sufficient,
    but let's stick to JDK.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: JDK包含JRE、Java文档和调试工具，以及其他很酷的东西。它是一个完整的Java工具包，我们将从中获得所有的组件。所以我们下载什么取决于我们，但我建议我们只下载JDK以确保安全。如果我们只是想练习和运行我们的程序，JRE也足够了，但让我们坚持使用JDK。
- en: 'So now let''s go back and download Java from the internet and try to configure
    it in our machines. To download Java, navigate to the following page: [https://java.com/en/download/](https://java.com/en/download/).
    When you click on the Free Java Download button, as shown in the following screenshot,
    the JRE version will be downloaded:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回去从互联网上下载Java并尝试在我们的机器上配置它。要下载Java，导航到以下页面：[https://java.com/en/download/](https://java.com/en/download/)。当你点击免费Java下载按钮时，如下面的截图所示，JRE版本将被下载：
- en: '![](img/dfc3a806-e4d9-41c3-a4b0-93e5b80cb02f.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfc3a806-e4d9-41c3-a4b0-93e5b80cb02f.png)'
- en: 'But we intend to use JDK for our program, so navigate to the following site: [https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html).
    Here, there are multiple versions of JDK. The latest version out in the market
    right now is Java SE 10.0.2\. Click on DOWNLOAD, as shown in the following screenshot,
    so that all the components are downloaded and configured in our machine:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们打算在我们的程序中使用JDK，所以导航到以下网站：[https://www.oracle.com/technetwork/java/javase/downloads/index.html](https://www.oracle.com/technetwork/java/javase/downloads/index.html)。在这里，有多个版本的JDK。目前市场上最新的版本是Java
    SE 10.0.2。点击下载，如下面的截图所示，以便所有组件都被下载并配置在我们的机器上：
- en: '![](img/8274c823-c93f-4b54-9241-6883351188d3.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8274c823-c93f-4b54-9241-6883351188d3.png)'
- en: 'It takes a while because there are quite a few steps to configure it. Keep
    clicking on Next so that Java is successfully configured in our machine. To check
    whether Java is installed in our machine, navigate to `C:\Program Files`. If we
    find the folder named `Java` there, it means that Java has been successfully installed
    in our machine. The `Java` folder is shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 配置需要一些时间，因为有相当多的步骤。不断点击下一步，以便Java能够成功配置在我们的机器上。要检查Java是否安装在我们的机器上，导航到`C:\Program
    Files`。如果我们在那里找到名为`Java`的文件夹，这意味着Java已经成功安装在我们的机器上。`Java`文件夹如下截图所示：
- en: '![](img/1f980050-78d0-4ffb-8832-6595311397bc.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f980050-78d0-4ffb-8832-6595311397bc.png)'
- en: An important point to remember here is that if we are on 64-bit, only then will
    we see this `Java` folder in `Program Files`. If our machine is on 32-bit, then
    we need to go back to `Program Files (x86)` to get the `Java` folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要记住的一个重要点是，如果我们是64位的，那么我们只会在`Program Files`中看到这个`Java`文件夹。如果我们的机器是32位的，那么我们需要回到`Program
    Files (x86)`去获取`Java`文件夹。
- en: 'We can check our system type by going to Control Panel and clicking on System. The
    system I am working on is 64-bit, as displayed in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过进入控制面板并点击系统来检查我们的系统类型。我正在使用的系统是64位的，如下面的截图所示：
- en: '![](img/858828f6-6b25-4d5d-ad17-3ec43841d11d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/858828f6-6b25-4d5d-ad17-3ec43841d11d.png)'
- en: After it is successfully downloaded, we enter the `Java` folder and observe
    that both JDK and JRE have been downloaded. We enter the JDK folder and copy the
    entire file path. We are doing this because we need to set environment variables.
    Setting environment variables means that we are letting our system know where
    the Java folder is located.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 成功下载后，我们进入`Java`文件夹，观察到JDK和JRE都已经下载。我们进入JDK文件夹并复制整个文件路径。我们这样做是因为我们需要设置环境变量。设置环境变量意味着我们让系统知道Java文件夹的位置。
- en: 'In our case, the Java folder is in `C:/Program Files/Java/JDK`, but Windows
    doesn''t know where exactly it is. So to make our system aware of the location,
    we will place the JDK home path in our system variables. This will help our machine
    know where the Java folder is located, so that whenever we run our program, it
    will identify the exact JDK version and run our program. To update this in system
    environment variables, we copy the entire JDK path. Go to Control Panel, select
    System and Security, select System, and click on Advanced System Settings. In
    Advanced System Settings, select Environment Variables. When we click on Environment
    Variables, the following window appears:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，Java文件夹位于 `C:/Program Files/Java/JDK`，但Windows不知道确切的位置。因此，为了让我们的系统知道这个位置，我们将把JDK主目录路径放在系统变量中。这将帮助我们的机器知道Java文件夹的位置，这样每当我们运行程序时，它将识别确切的JDK版本并运行我们的程序。要在系统环境变量中更新这个，我们复制整个JDK路径。转到控制面板，选择系统和安全，选择系统，然后点击高级系统设置。在高级系统设置中，选择环境变量。当我们点击环境变量时，会出现以下窗口：
- en: '![](img/f4d11791-9921-4256-b155-13af1ab89a80.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f4d11791-9921-4256-b155-13af1ab89a80.png)'
- en: 'When we click on New in the User variables for Rahul section, we will get a
    prompt to add a New User Variable. We put in the name as `JAVA_HOME`, paste the
    JDK path in the variable value text box, and click on OK, as shown in the following
    screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Rahul部分的用户变量中点击“新建”，我们将收到一个提示添加新的用户变量。我们将名称设置为 `JAVA_HOME`，将JDK路径粘贴到变量值文本框中，然后点击“确定”，如下屏幕截图所示：
- en: '![](img/fec48ef2-7351-4380-99a4-4f9553bd0f73.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fec48ef2-7351-4380-99a4-4f9553bd0f73.png)'
- en: 'This is how we let our system know where exactly the `Java` folder is present.
    We will need to update another variable too. To do that, we go back to the JDK
    folder and enter the `bin` folder. We will see multiple `.exe` files, as shown
    in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们让系统知道`Java`文件夹的确切位置的方法。我们还需要更新另一个变量。为此，我们返回到JDK文件夹并进入`bin`文件夹。我们会看到多个`.exe`文件，如下屏幕截图所示：
- en: '![](img/e68a481a-76c8-4ab1-a7c8-d1699e36b519.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e68a481a-76c8-4ab1-a7c8-d1699e36b519.png)'
- en: 'We copy the `bin` folder location path and return to our System Properties
    window. In System Variables, we will see a variable named `Path`. Double-clicking
    on it will show us a prompt to Edit System Variable, as shown in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们复制`bin`文件夹的位置路径，然后返回到我们的系统属性窗口。在系统变量中，我们会看到一个名为`Path`的变量。双击它将显示一个提示以编辑系统变量，如下屏幕截图所示：
- en: '![](img/90579f51-f2df-409a-97fe-549e89c09ff9.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/90579f51-f2df-409a-97fe-549e89c09ff9.png)'
- en: In the variable value, we go to the end, add a semicolon, and paste the `bin`
    folder path. This means we are setting the `Path` variable to the `bin` folder.
    We also create a new variable called `JAVA_HOME`, pointing to the `Java` folder.
    We need to set these two variables before we start working on Java. Once we set
    both the variables and click on OK, we will successfully set Environment Variables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量值中，我们到末尾，添加一个分号，并粘贴`bin`文件夹路径。这意味着我们将`Path`变量设置为`bin`文件夹。我们还创建一个名为`JAVA_HOME`的新变量，指向`Java`文件夹。在开始使用Java之前，我们需要设置这两个变量。一旦我们设置了这两个变量并点击“确定”，我们将成功设置环境变量。
- en: 'If we want to cross-check if the environment variables are properly configured
    or not, we use Command Prompt. In Command Prompt, we enter `java -version` and
    hit *Enter*. If we get an output as shown in the following screenshot, it means
    that Java has been successfully configured on our system:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要交叉检查环境变量是否正确配置，我们使用命令提示符。在命令提示符中，我们输入 `java -version` 并按 *Enter*。如果我们得到如下屏幕截图所示的输出，这意味着Java已成功配置在我们的系统上：
- en: '![](img/d964dad8-c9d9-441b-81b3-78fdb3a09c83.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d964dad8-c9d9-441b-81b3-78fdb3a09c83.png)'
- en: If we run the command before adding the variables, we will see that Java is
    not recognized. Only after setting the system environment variables will we be
    able to successfully configure Java.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在添加变量之前运行命令，我们会发现Java无法识别。只有在设置系统环境变量之后，我们才能成功配置Java。
- en: The previous instructions take care of installing and configuring the system
    from our end. Next, we will try to download Eclipse, which is a Java editor tool
    where we write, run, and debug our code. As a pre-requisite to downloading Eclipse,
    we have to make sure that Java is properly configured in our machine. If any of
    the installation or configuration steps haven't been done correctly, Eclipse will
    not install properly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的说明已经照顾到了从我们这边安装和配置系统。接下来，我们将尝试下载Eclipse，这是一个Java编辑工具，我们可以在其中编写、运行和调试我们的代码。在下载Eclipse之前，我们必须确保Java在我们的机器上正确配置。如果安装或配置步骤中的任何一个没有正确完成，Eclipse将无法正确安装。
- en: Working with the Java editor tools
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Java编辑工具
- en: Here, we are going to look at the editor tool that we will be using to write
    our Java code. There are many tools available in the market that can act as a
    new Java editor, but I personally prefer using Eclipse. It comes with lot of in-built
    features and syntax additions. We will see other advantages of Eclipse as we progress.
    Some of the advantages cannot be discussed theoretically, so once we progress
    and start coding practically, we will understand how it prompts us to write a
    correct syntax. So, throughout the course of book, we will write all our Java
    code in the Eclipse IDE editor.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看一下我们将用来编写Java代码的编辑工具。市场上有许多工具可以作为新的Java编辑器，但我个人更喜欢使用Eclipse。它带有许多内置功能和语法补充。随着我们的进展，我们将看到Eclipse的其他优势。有些优势无法在理论上讨论，所以一旦我们进展并开始实际编码，我们将了解它如何提示我们编写正确的语法。因此，在整本书的过程中，我们将在Eclipse
    IDE编辑器中编写所有的Java代码。
- en: 'First, we download the Eclipse IDE editor and take a look at the interface
    that it has to offer. The following link will take us to the official website
    of Eclipse: [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/).
    The website will look like the one shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们下载Eclipse IDE编辑器并查看其提供的界面。以下链接将带我们到Eclipse的官方网站：[https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)。该网站将看起来像以下屏幕截图所示：
- en: '![](img/6e7d05a0-5c60-4645-abd8-5650a5132707.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e7d05a0-5c60-4645-abd8-5650a5132707.png)'
- en: 'When we click on Download Packages below the Download 64 bit button, it takes
    us to the following page:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击下载64位按钮下面的下载包时，它会带我们到下面的页面：
- en: '![](img/93e61a00-a37e-4fd4-b666-9836716b7ab4.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93e61a00-a37e-4fd4-b666-9836716b7ab4.png)'
- en: We will be using Eclipse IDE for Java EE Developers. We can select between 32-bit
    or 64-bit, depending on the system we are working on. We already know how to check
    if our system is 32-bit or 64-bit, by accessing Control Panel and following the
    instruction given during the installation stage.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Eclipse IDE for Java EE Developers。我们可以根据我们正在使用的系统选择32位或64位。我们已经知道如何检查我们的系统是32位还是64位，方法是访问控制面板并按照安装阶段给出的说明进行操作。
- en: An important thing we need to ensure is that our Java version is compatible
    with the IDE we are downloading. If our system is 32-bit and we download 64-bit
    Java, then Eclipse will not open. So ensure that our system, Java, and Eclipse
    versions are all on the same line.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保的一件重要的事情是，我们的Java版本与我们下载的IDE兼容。如果我们的系统是32位并且我们下载了64位的Java，那么Eclipse将无法打开。因此，请确保我们的系统、Java和Eclipse版本都在同一条线上。
- en: 'The file will be downloaded in a ZIP folder form and we can extract it. The
    following screenshot shows folders that will be present in the `eclipse` folder:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 文件将以ZIP文件形式下载，我们可以解压它。下面的屏幕截图显示了`eclipse`文件夹中将存在的文件夹：
- en: '![](img/42f48c59-4c10-4c05-8b74-678f8919c8c6.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42f48c59-4c10-4c05-8b74-678f8919c8c6.png)'
- en: If we double-click on the `eclipse.exe` file, the Eclipse UI will open.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们双击`eclipse.exe`文件，Eclipse UI将会打开。
- en: 'If we want to write our Java code, we need to create a Java project. Right-click
    on the white pane window, which is on the left side, and click on New | Project.
    This is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要编写我们的Java代码，我们需要创建一个Java项目。右键单击左侧的白色窗格窗口，然后点击新建|项目。这在下面的屏幕截图中显示：
- en: '![](img/6b2f9f91-9e30-4bf8-b025-9a062ec08a2b.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b2f9f91-9e30-4bf8-b025-9a062ec08a2b.png)'
- en: 'We get a prompt to tell to Eclipse what kind of project we are working on,
    as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会收到提示，告诉Eclipse我们正在进行什么样的项目，如下面的屏幕截图所示：
- en: '![](img/0c733616-f358-4044-91c0-9a6a0c79ff3d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c733616-f358-4044-91c0-9a6a0c79ff3d.png)'
- en: 'As we can see, a lot of different frameworks are available, such as Java Project,
    C/C++, and Android, but we are interested only in the Java project, so we select
    Java Project, and click on Next. We will get a New Java Project window where we
    will fill in all the information for our new project, as shown in the following
    screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，有许多不同的框架可用，比如Java项目、C/C++和Android，但我们只对Java项目感兴趣，所以我们选择Java项目，然后点击下一步。我们将得到一个新的Java项目窗口，在这里我们将填写我们新项目的所有信息，如下面的屏幕截图所示：
- en: '![](img/b882a9d4-72e6-4fcb-b2eb-987ac4fa0327.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b882a9d4-72e6-4fcb-b2eb-987ac4fa0327.png)'
- en: 'We select a project name for our Java project that we will be creating. We''ll
    name our first project `coreJavaTraining`. Click on Next and then Finish. We will
    get a prompt asking us if we want to Open Associated Perspective?; select No:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们将要创建的Java项目选择一个项目名称。我们将命名我们的第一个项目为`coreJavaTraining`。点击下一步，然后完成。我们将收到一个提示，询问我们是否要打开关联的透视？选择否：
- en: '![](img/554a8c9d-9946-41db-ae31-a0d9d9f65ca3.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/554a8c9d-9946-41db-ae31-a0d9d9f65ca3.png)'
- en: 'This will successfully create `coreJavaTraining`. Within the project, there
    is a source folder that is automatically created. This means we need to write our
    classes inside this source folder. What exactly are the classes? Basically, all
    Java code is written inside a class. When we write Java in Notepad, we open Notepad,
    write the Java code, and save that particular Notepad file with the `.java` extension.
    But in Eclipse, all that work is done by this tool itself. So all we need to do
    is create a class and that will give us a proper template. We right-click on the
    source (`src`) file and click on New | Class. We will get a Java Class prompt
    where we will be entering the class name. We will name this class `Firstclass`
    and ensure that we select the public static void main (String[] args) check box;
    we will discuss the importance of this later. And, finally, we click on Finish.
    This is shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将成功创建`coreJavaTraining`。在项目中，会自动创建一个源文件夹。这意味着我们需要在这个源文件夹中编写我们的类。什么是类？基本上，所有的Java代码都是写在一个类中的。当我们在记事本中写Java时，我们打开记事本，写入Java代码，并将特定的记事本文件保存为`.java`扩展名。但是在Eclipse中，所有这些工作都是由这个工具自己完成的。因此，我们只需要创建一个类，这将给我们一个合适的模板。我们右键单击源（`src`）文件，然后点击新建|类。我们将得到一个Java类提示，我们将在其中输入类名。我们将命名这个类为`Firstclass`，并确保我们选择了`public
    static void main (String[] args)`的复选框；我们将在后面讨论这个的重要性。最后，我们点击完成。这在下面的屏幕截图中显示：
- en: '![](img/bcb92860-b758-4a6b-8a6b-ee6cd6b6619d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcb92860-b758-4a6b-8a6b-ee6cd6b6619d.png)'
- en: We see that the in-built hierarchy is already created for us, as Eclipse creates
    an outer template. We can see in the editor that a class and `public static void
    main` is present. All this is created by the Eclipse tool. If we were writing
    normally on Notepad without using any tool, we would need to create the template.
    But in Eclipse, all we need to do is give the class name. The code we will be
    typing will be encapsulated in the class; that is, inside the brackets of the
    class. Whatever name we use while creating the file will be the class name.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到内置的层次结构已经为我们创建好了，因为Eclipse创建了一个外部模板。我们可以在编辑器中看到一个类和`public static void
    main`已经存在。所有这些都是由Eclipse工具创建的。如果我们在记事本上正常写作而不使用任何工具，我们需要创建模板。但是在Eclipse中，我们只需要给出类名。我们将要输入的代码将被封装在类中；也就是说，在类的括号内。我们在创建文件时使用的任何名称都将成为类名。
- en: 'All the execution of the code will be placed in `public static void main` because
    whenever we run this file, Java control will go directly to this block. It will
    not touch any of the code written outside `public static void main`. In short, we
    write the code outside the `public static void main` block, but ultimately we
    need to call that code inside the block. This is because only the `main` block
    is responsible for the execution of our Java code. That is why we write `public
    static void main`. We will learn about the `public` and `void` keywords as we
    move further in this book because it is too early to get into the details of these
    now. We can see the template in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码的执行都将放在 `public static void main` 中，因为每当我们运行此文件时，Java 控制将直接转到此块。它不会触及任何在
    `public static void main` 之外编写的代码。简而言之，我们在 `public static void main` 块之外编写代码，但最终我们需要在块内调用该代码。这是因为只有
    `main` 块负责执行我们的 Java 代码。这就是为什么我们写 `public static void main`。随着我们在本书中的进一步学习，我们将了解
    `public` 和 `void` 关键字，因为现在深入了解这些关键字还为时过早。我们可以在以下截图中看到模板：
- en: '![](img/3bd15290-1911-47a3-85b8-b329b8fb1658.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bd15290-1911-47a3-85b8-b329b8fb1658.png)'
- en: The class created by the Eclipse tool
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 工具创建的类
- en: Writing your first executable program in Java
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Java 中编写您的第一个可执行程序
- en: 'Let''s start with our basic coding in this section. If we want to print something
    in our output, there is a command in Java called `System.out.println()`. This
    command will print the output in the console. Let''s say we would like to print `hello
    world`, and when we run the following code, `hello world` will be printed in our
    output console:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这一节开始进行基本编码。如果我们想要在输出中打印一些内容，Java 中有一个命令叫做 `System.out.println()`。这个命令将在控制台中打印输出。假设我们想要打印
    `hello world`，当我们运行以下代码时，`hello world` 将在我们的输出控制台中打印出来：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So let''s run the code. There are two methods to run the code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们运行代码。有两种方法来运行代码：
- en: Right-click on the filename in the Project Explorer, click on Run As, and select
    Java Application.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中右键单击文件名，点击“作为”并选择“Java 应用程序”。
- en: 'Or, we could click on the run icon given in the toolbar and click on OK on
    the Save and Launch window. The icon looks like this:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，我们可以点击工具栏中给出的运行图标，然后在保存和启动窗口上点击 OK。图标看起来像这样：
- en: '![](img/8837d0df-f67f-4d4f-8e2c-33e7a974ab22.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8837d0df-f67f-4d4f-8e2c-33e7a974ab22.png)'
- en: 'This will run our code and print our output. The following screenshot shows
    the `hello world` message on our editor:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行我们的代码并打印输出。以下截图显示了我们编辑器中的 `hello world` 消息：
- en: '![](img/a6869a1c-2f13-4dbb-a8ac-b77ba30eddd4.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6869a1c-2f13-4dbb-a8ac-b77ba30eddd4.png)'
- en: Output displaying hello world as per the code
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码显示输出 `hello world`
- en: In short, `System.out.println()` is used to print in our console. We will be
    using this in almost all our examples for our demonstration of practical examples.
    If we remove `ln` from the statement, it will not print the output in the next
    line.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`System.out.println()` 用于在控制台中打印输出。我们将在几乎所有的实际示例中使用它来演示实际示例。如果我们从语句中删除
    `ln`，它将不会在下一行打印输出。
- en: 'Let''s try printing a statement that will display the output of two print commands
    on the same line. Here, we add a `System.out.println("hi")` statement before the
    `hello world` statement. If we run the code, the output will be as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试打印一个语句，它将在同一行上显示两个打印命令的输出。在这里，我们在 `hello world` 语句之前添加了一个 `System.out.println("hi")`
    语句。如果我们运行代码，输出将如下所示：
- en: '![](img/e9034e84-43a3-4a7a-93b4-422c57de9cad.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9034e84-43a3-4a7a-93b4-422c57de9cad.png)'
- en: Output is displayed on two separate lines
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在两行上
- en: 'Observe how `hi` is displayed on one line and then `hello world` is displayed
    on the next line. Here, `ln` displays the output in the next line. If we remove
    `ln` from both the statements and run the code, the message will be displayed
    as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 观察一下 `hi` 是如何显示在一行上，然后 `hello world` 显示在下一行上的。在这里，`ln` 将输出显示在下一行。如果我们从这两个语句中删除
    `ln` 并运行代码，消息将显示如下：
- en: '![](img/bd42539a-47bd-48ac-9970-12b9a284d555.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd42539a-47bd-48ac-9970-12b9a284d555.png)'
- en: Output is displayed on the same lines
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在同一行上
- en: We see, `hihello world` printed on the same line.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，`hihello world` 打印在同一行上。
- en: 'If we write our code, and then we want to check the output partially, we don''t
    need to remove the line of code; all we need to do is just comment it out. We
    can comment it out by simply putting double slashes (`//`) at the beginning so
    that Java will not pick the line. This is shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们编写代码，然后想部分检查输出，我们不需要删除代码行；我们只需要将其注释掉。我们可以通过在开头简单地放置双斜杠 (`//`) 来将其注释掉，这样
    Java 将不会选择这行。这在以下截图中显示：
- en: '![](img/258a0852-04bc-4505-a21d-4d6e35c487bd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/258a0852-04bc-4505-a21d-4d6e35c487bd.png)'
- en: Commenting using double slashes
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用双斜杠进行注释
- en: 'If you remove the slashes and the statement is just some random words, then
    it will throw an error. We will see a red underlined code. This means there is
    an error at the line with a cross mark. This is shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您删除斜杠并且语句只是一些随机单词，那么它将抛出错误。我们将看到一个下划线为红色的代码。这意味着在带有交叉标记的行上有一个错误。这在以下截图中显示：
- en: '![](img/196ae870-4f8f-4f3f-a190-9845e9deb8c9.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/196ae870-4f8f-4f3f-a190-9845e9deb8c9.png)'
- en: Error is flagged with a cross mark besides the line number
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 错误在行号旁边标有一个交叉标记
- en: Add the backslashes again to comment out the error.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次添加反斜杠以注释掉错误。
- en: Remember, here we are writing our actual code in the `main` block only. What
    if we want to print an integer?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里我们只在 `main` 块中编写我们的实际代码。如果我们想要打印一个整数怎么办？
- en: Let's say we want to print the number `4`. To print it, we first need to store
    it in a variable and then we will print the variable. So when we print the variable,
    the value presenting that variable will be printed automatically. For this example,
    we pick the number `4`, and we assign the number in a variable called `a`. The
    problem here is that `a` does not know what data type is being assigned to it.
    So, we have to explicitly mention that `a` is an integer. If we do not mention
    that `a` is an integer, it throws an error.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要打印数字`4`。要打印它，我们首先需要将它存储在一个变量中，然后我们将打印这个变量。因此，当我们打印变量时，表示该变量的值将自动打印出来。对于这个例子，我们选择数字`4`，并将数字赋给一个名为`a`的变量。问题在于`a`不知道分配给它的数据类型是什么。因此，我们必须明确说明`a`是一个整数。如果我们不说明`a`是一个整数，它就会报错。
- en: 'In short, we are first creating a variable called `a` which only acts an integer
    and then places an integer value `4` into this. The following screenshot illustrates
    the example we are talking about:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们首先创建一个名为`a`的变量，它只充当整数，然后将整数值`4`放入其中。下面的截图说明了我们所讨论的示例：
- en: '![](img/8bafaa90-b7b8-4472-aad2-25032cc69f34.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bafaa90-b7b8-4472-aad2-25032cc69f34.png)'
- en: Value 4 is assigned to the variable a
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 值4被赋给变量a
- en: 'So, with this type of code, we can type it outside, but if we want to print
    it, we will have to type it in the main block. In this example, we want to print
    the value of `a` so we add another `System.out.println(a)` statement. The editor
    will throw an error for the variable `a` in the `print` statement. To know what
    the error is, we hover our mouse over the error and a pop up is displayed showing
    the error with a possible fix, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于这种类型的代码，我们可以在外部输入，但如果要打印它，我们将不得不在主块中输入它。在这个例子中，我们想要打印`a`的值，所以我们添加了另一个`System.out.println(a)`语句。编辑器将为`print`语句中的变量`a`抛出一个错误。要知道错误是什么，我们将鼠标悬停在错误上，弹出窗口显示错误和可能的修复，如下面的截图所示：
- en: '![](img/44424143-5c13-4032-9c0c-70ac34ee85fc.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44424143-5c13-4032-9c0c-70ac34ee85fc.png)'
- en: Error details is displayed when the mouse is hovered over it
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在错误上时，会显示错误详细信息
- en: There will be an option to click on in the error detail. This will automatically
    resolve the error by adding the required content. This is an amazing feature that
    the editor has and it is very helpful as we move onto more complex examples.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在错误详细信息中将有一个点击选项。这将通过添加所需的内容自动解决错误。这是编辑器具有的一个令人惊讶的功能，随着我们进入更复杂的示例，它非常有帮助。
- en: 'In our example, when we click on `Change ''a'' to ''static''` in the error
    detail pop up, `static` is added to the variable `a` and we are able to run the
    code. On running the code, the console will look like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，当我们点击错误详细信息弹出窗口中的`将'a'更改为'static'`时，`static`被添加到变量`a`中，我们能够运行代码。运行代码后，控制台将如下所示：
- en: '![](img/697afa9e-3e5a-440f-8fcc-01f96333b0d6.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/697afa9e-3e5a-440f-8fcc-01f96333b0d6.png)'
- en: Output displaying the value of a as per code
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码显示变量a的值
- en: We will be getting into the details of what exactly `static` is in the later
    chapters
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中详细了解`static`到底是什么
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had a short introduction to Java. We then installed and
    configured the various tools required to work with Java. Moving ahead, we took
    a look at the editor we will be using to write our own Java code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了Java。然后安装和配置了与Java一起工作所需的各种工具。接下来，我们看了一下我们将使用的编辑器来编写我们自己的Java代码。
- en: Finally, we executed our first example and saw how the editor works and how
    errors are handled by it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们执行了我们的第一个示例，看到了编辑器的工作原理以及它如何处理错误。
- en: In the next chapter, we will learn about some basic concepts, such as strings,
    variables and methods, and how are they different from each other using code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习一些基本概念，如字符串、变量和方法，以及它们在代码中的不同之处。
