- en: Day 08 - Test Your Skills – Build a Real-World Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第08天-测试你的技能-构建一个真实世界的应用程序
- en: 'On the seventh day, we went through the OOP concepts in C# 7.0\. With the understanding
    of OOP concepts, our journey of this learning series needs a hands-on, practical,
    and real-world application, and this is the reason we are here. Today is our revision
    day of the seven-day learning series. In the past seven days, we learned a lot
    of stuff, including the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第七天，我们学习了C# 7.0中的面向对象编程概念。通过对面向对象编程概念的理解，我们这个学习系列的旅程需要一个实际的、实践的、真实世界的应用程序，这就是我们在这里的原因。今天是我们七天学习系列的复习日。在过去的七天里，我们学到了很多东西，包括以下内容：
- en: .NET Framework and .NET Core
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Framework和.NET Core
- en: Basic C# concepts, including statements, loops, classes, structures, and so
    on
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的C#概念，包括语句，循环，类，结构等
- en: Advanced C# concepts, including delegates, generics, collections, file handling,
    attributes, and so on
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括委托，泛型，集合，文件处理，属性等在内的高级C#概念
- en: The new features of C# 7.0 and C# 7.1
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 7.0和C# 7.1的新功能
- en: In the last seven days, we covered the aforementioned topics in detail, with
    the help of code snippets, and we discussed the code in detail. We started with
    the very basic concepts on Day 1, covered the intermediate stuff on Day 2 and
    Day 3, and then gradually went through advanced topics with code explanations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的七天里，我们通过代码片段详细讨论了上述主题，并详细讨论了代码。我们从第一天开始涵盖了非常基本的概念，第二天和第三天涵盖了中级内容，然后逐渐通过代码解释讨论了高级主题。
- en: 'Today, we will revisit everything and build a real-world application in C#
    7.0\. Here are the steps we will follow to complete the application:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们将重新审视一切，并在C# 7.0中构建一个真实世界的应用程序。以下是我们将遵循的步骤来完成应用程序：
- en: Discussing the requirements of our application.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 讨论我们应用程序的要求。
- en: Why are we developing this application?
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们要开发这个应用程序？
- en: 'Getting started with application development:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始应用程序开发：
- en: Prerequisites
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先决条件
- en: The database design
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库设计
- en: Discussing the basic architecture
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论基本架构
- en: Why are we developing this application?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们要开发这个应用程序？
- en: Our application will be based on India's GST taxation system ([http://www.gstn.org/](http://www.gstn.org/)).
    In India, this system has been recently announced and there is a heavy demand
    in the industry to adopt it as soon as possible. This is the right time to create
    a real-world application that gives us a practical experience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将基于印度的GST税收系统（[http://www.gstn.org/](http://www.gstn.org/)）。在印度，这个系统最近宣布，行业内急需尽快采用。现在是创建一个实际应用程序，让我们获得实际经验的正确时机。
- en: 'Discussing the requirements of our application:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论我们应用程序的要求：
- en: 'In this section, we will discuss our application and lay it out. First of all,
    let''s decide a name for our application; let''s call it *FlixOneInvoicing*—a
    system that generates invoices. As discussed in the previous section, today''s
    industry needs a system that can fulfill its demand to entertain all the parts
    of GST that we are demonstrating with the help of our example of GST-based application
    to . Here are the main requirements of the system:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论我们的应用程序并制定它。首先，让我们为我们的应用程序决定一个名称；让我们称之为*FlixOneInvoicing*—一个生成发票的系统。如前所述，今天的行业需要一个系统，可以满足其需求，以满足我们通过我们的基于GST的应用程序示例所展示的GST的所有部分。以下是系统的主要要求：
- en: The system should be company-specific, and the company should be configurable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该是公司特定的，并且公司应该是可配置的
- en: The company can have multiple addresses (registered and shipping addresses may
    be different)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司可以有多个地址（注册和送货地址可能不同）
- en: The company can be an individual or a registered entity
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司可以是个人或注册实体
- en: The system should have client/customer features
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该具有客户功能
- en: The system should support both service and goods industries
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该支持服务和商品行业
- en: The system should follow Indian GST rules
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该遵循印度的GST规定
- en: The system should have a reports capability
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该具有报告功能
- en: The system should have basic operations such as add, update, delete, and so
    on
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统应该有基本操作，如添加，更新，删除等
- en: The aforementioned high-level requirements give us an idea of the kind of system
    we are going to develop. In the coming sections, we will develop an application
    based on these requirements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述高级要求让我们了解了我们将要开发的系统的类型。在接下来的章节中，我们将根据这些要求开发一个应用程序。
- en: Getting started with application development
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始应用程序开发
- en: In the previous sections, we discussed why we are going to develop this application
    and why it is required, as per industry demands. We also discussed the basic system
    requirements, and we laid out the system theoretically so that when we start with
    the actual coding, we can follow all these rules/requirements. In this section,
    we will start the actual development.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们讨论了为什么我们要开发这个应用程序以及为什么它是必需的，根据行业需求。我们还讨论了基本的系统要求，并在理论上制定了系统，以便在我们开始实际编码时，我们可以遵循所有这些规则/要求。在本节中，我们将开始实际开发。
- en: Prerequisites
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'To start the development of this application, we need the following as prerequisites:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始开发这个应用程序，我们需要以下先决条件：
- en: Visual Studio 2017 update 3 or later
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2017更新3或更高版本
- en: SQL Server 2008 R2 or later
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server 2008 R2或更高版本
- en: C# 7.0 or later
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 7.0或更高版本
- en: ASP.NET Core
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core
- en: Entity Framework Core
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Entity Framework Core
- en: The database design
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库设计
- en: 'To perform the database design, you should have a basic knowledge of the SQL
    Server and the core concepts of database. The following resources may be helpful
    if you want to learn database concepts:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行数据库设计，您应该对SQL Server和数据库的核心概念有基本的了解。如果您想学习数据库概念，以下资源可能有所帮助：
- en: '[https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo](https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo](https://www.codeproject.com/Articles/359654/important-database-designing-rules-which-I-fo)'
- en: '[https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide](https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide](https://www.packtpub.com/big-data-and-business-intelligence/sql-server-2016-developer-guide)'
- en: '[http://www.studytonight.com/dbms/database-normalization.php](http://www.studytonight.com/dbms/database-normalization.php)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.studytonight.com/dbms/database-normalization.php](http://www.studytonight.com/dbms/database-normalization.php)'
- en: On the basis of the basic business requirements that we discussed in the previous
    section for laying our system out, let's design a complete database so that we
    can save the important application data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在上一节讨论的基本业务需求，让我们设计一个完整的数据库，以便保存重要的应用程序数据。
- en: Overview
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: We need to develop our database in such a way that it should work on the basis
    of *single system, multiple companies*. The *single system, multiple companies*
    feature will enable our system to work within a corporate structure, where the
    company has multiple branches with one head office and separate users to maintain
    the system for other branches.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要以*单一系统，多个公司*的方式开发我们的数据库。*单一系统，多个公司*功能将使我们的系统能够在公司结构内运行，其中公司有多个分支机构，一个总部和单独的用户来维护其他分支机构的系统。
- en: 'In this section, we will discuss following database diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论以下数据库图：
- en: '![](img/00123.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: As per our requirements, our system is meant for multiple companies, which means
    that every company will have its own configuration, users, customers, and invoices.
    For example, if two different companies (*abc* and *xyz*) use the same system,
    then the users of *abc* can only access the information of *abc*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的要求，我们的系统适用于多个公司，这意味着每个公司都将有自己的配置、用户、客户和发票。例如，如果两个不同的公司（*abc*和*xyz*）使用相同的系统，那么*abc*的用户只能访问*abc*的信息。
- en: The current system does not follow B2B or B2C categories.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当前系统不遵循B2B或B2C类别。
- en: Let's analyze the previous database diagram to understand the relational hierarchy
    in action. The **Company** table is referenced by the **User** table so that a
    user is specific to a company only. The **Address** table stands out of the **Company**
    and **Customer** tables, and is referenced by both the tables. Having the **Address**
    table refer to the **Company** and **Customer** tables allows us to have more
    than one address for each one of them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析以前的数据库图以了解关系层次结构的运作方式。**公司**表由**用户**表引用，以便用户仅适用于特定公司。**地址**表突出显示**公司**和**客户**表之外，并且被两个表引用。使**地址**表引用**公司**和**客户**表使我们能够为它们每个人拥有多个地址。
- en: The master data for countries and states is stored in the **Country** and **State**
    tables, respectively. The state can only belong to a specific country and, therefore,
    refers to the **Country** table accordingly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 国家和州的主数据分别存储在**国家**和**州**表中。州只能属于特定国家，因此相应地参考**国家**表。
- en: We arrange our tables in this way to achieve normalization. Refer to [http://searchsqlserver.techtarget.com/definition/normalization](http://searchsqlserver.techtarget.com/definition/normalization)
    in order to understand the concept of normalization in a database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以这种方式安排我们的表以实现规范化。请参考[http://searchsqlserver.techtarget.com/definition/normalization](http://searchsqlserver.techtarget.com/definition/normalization)以了解数据库中规范化概念。
- en: 'Discussing the schema and table:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论模式和表：
- en: 'In the previous section, we got an overview of our database design. Let''s
    discuss the important tables and their usage in the system:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们概述了我们的数据库设计。让我们讨论系统中重要的表及其用途：
- en: '**User**: This table contains all the data related to *users* across the companies.
    These are the users who can operate on the system. This table holds the user information;
    **companyid** is a foreign key with the **Company** table, and it provides a relation
    between the **User** and **Company** tables to instruct the system that a particular
    user is meant for a specific company:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：此表包含跨公司的*用户*相关的所有数据。这些用户可以在系统上操作。此表保存用户信息；**companyid**是与**公司**表的外键，并且它在**用户**和**公司**表之间提供关系，指示系统特定用户适用于特定公司：'
- en: '![](img/00124.gif)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.gif)'
- en: '**Company**: This table contains all the information related to the company
    and stores the **name** and **GSTN** fields. The **GSTN** field is blank, if the
    company is not a registered company for GSTN. There is a foreign key relationship
    with the **Address** table, as one company may have multiple addresses. So, the
    the **Company** and **Address** tables exhibit a one-to-many relationship:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司：此表包含与公司相关的所有信息，并存储**名称**和**GSTN**字段。如果公司未注册GSTN，则**GSTN**字段为空。与**地址**表存在外键关系，因为一个公司可能有多个地址。因此，**公司**和**地址**表展示一对多的关系：
- en: '![](img/00125.gif)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.gif)'
- en: '**Customer**: This table contains all the information related to a customer,
    including **Name** and **GSTN.** The **GSTN** field is blank, as an individual
    would not be registered for **GSTN.** This table also has a relationship with
    the **Address** table:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户**：此表包含与客户相关的所有信息，包括**名称**和**GSTN**。**GSTN**字段为空，因为个人不会注册**GSTN**。此表还与**地址**表有关：'
- en: '![](img/00126.gif)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.gif)'
- en: '**Address**: This table contains all the information related to the company
    or customer addresses, which may be multiple:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地址**：此表包含与公司或客户地址相关的所有信息，可能有多个：'
- en: '![](img/00127.gif)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.gif)'
- en: '**Invoice and InvoiceDetails**: These tables are transactional tables. The
    **Invoice** table contains all the details that are required to create an invoice,
    and the **InvoiceDetails** table contains the complete details of items/transactions
    for a specific invoice:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发票和发票明细**：这些表是事务性表。**发票**表包含创建发票所需的所有细节，而**发票明细**表包含特定发票的项目/交易的完整细节：'
- en: '![](img/00128.gif)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.gif)'
- en: '**Country and State**: These tables store the master record data. This data
    will not change, and no system transaction can affect the data stored in these
    two tables. As of now, these two tables contain the master data specific to India:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国家和州**: 这些表存储主记录数据。这些数据不会改变，也不会受到系统事务的影响。目前，这两个表包含了特定于印度的主数据：'
- en: '![](img/00129.gif)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.gif)'
- en: As per our initial requirements, the preceding tables are fine; we can add/update
    the tables as and when we get more or updated requirements. The system is meant
    for updates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们最初的要求，前述表格是可以的；我们可以根据需要添加/更新表格。该系统是用于更新的。
- en: You can refer to `Database_FlixOneInvoice.sql` for the complete database schema
    and master data that is available on GitHub repository [<url>] in Day-08.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考`Database_FlixOneInvoice.sql`，其中包含了完整的数据库架构和主数据，可在GitHub存储库[<url>]的Day-08中找到。
- en: In the next section, we will discuss system architecture and the actual code
    that we are going to write.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论系统架构和我们将要编写的实际代码。
- en: Discussing the basic architecture
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论基本架构
- en: In this section, we will discuss the basic architecture of our application;
    we will not discuss design patterns and other architecture-related stuff, which
    are beyond the scope of this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论我们应用程序的基本架构；我们不会讨论设计模式和其他与架构相关的内容，这超出了本书的范围。
- en: To understand design patterns, refer to [https://www.questpond.com/demo.html#designpattern](https://www.questpond.com/demo.html#designpattern).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解设计模式，请参考[https://www.questpond.com/demo.html#designpattern](https://www.questpond.com/demo.html#designpattern)。
- en: As mentioned in the prerequisites, our application will be based on ASP.NET
    Core, which consumes the RESTful API. This is just a basic version, so we are
    not going to show too much implementation of the design patterns. The following
    image gives a schematic overview of our Visual Studio solution. We have a presentation
    and domain, you can split these layers to more layers to define business workflow.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如先决条件中所述，我们的应用程序将基于ASP.NET Core，它消耗RESTful API。这只是一个基本版本，所以我们不会展示太多设计模式的实现。以下图片给出了我们的Visual
    Studio解决方案的概要。我们有一个表示和领域，您可以将这些层拆分为更多层来定义业务工作流程。
- en: '![](img/00130.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: I wrote the actual code using C# 7.0; the application covers whatever we discussed
    on Day 7.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用C# 7.0编写了实际的代码；该应用程序涵盖了我们在第7天讨论的内容。
- en: 'Complete application is shipped with this chapter on GitHub: <<Link>>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的应用程序已随本章一起在GitHub上发布：<<Link>>
- en: In this section, we will cover the main code snippets of whatever we learned
    up to Day 7\. Download the complete application, open the solution in Visual Studio,
    and then visit the code. Relate the code with everything that you learned in this
    seven-day journey. For instance, see where we have used inheritance, encapsulation,
    and so on. Try to visualize the concepts we discussed in this book. You will be
    able to connect each and every statement of code written for our application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖我们在第7天学到的所有主要代码片段。下载完整的应用程序，在Visual Studio中打开解决方案，然后查看代码。将代码与您在这七天旅程中学到的所有内容联系起来。例如，看看我们在哪里使用了继承、封装等。尝试将我们在本书中讨论的概念可视化。您将能够连接我们为应用程序编写的每一条代码声明。
- en: Revisiting day 08
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重温第08天
- en: This is the revision day of our book. Of course, this is the last chapter of
    the book, but this is just the beginning for you to start exploring more C#-related
    stuff. On this day, we developed an application based on the Indian GST system.
    With the help of this application, we revisited all that you learned in this seven-day
    learning series, including attributes, reflections, C# 7.0 features, and so on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们书的复习日。当然，这是书的最后一章，但这只是您开始探索更多与C#相关内容的开始。在这一天，我们开发了一个基于印度GST系统的应用程序。借助这个应用程序，我们重新访问了您在这七天学习系列中学到的所有内容，包括属性、反射、C#
    7.0特性等。
