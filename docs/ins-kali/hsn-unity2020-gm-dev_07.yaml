- en: '*Chapter 7*: Visual Effects with Particle Systems and VFX Graph'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：使用粒子系统和VFX图进行视觉效果'
- en: Here, we will continue learning about visual effects for our game. We will be
    discussing particle systems, a way to simulate fire, waterfalls, smoke, and all
    kinds of fluids. Also, we will see the two Unity **particle systems** to create
    these kind of effects, **Shuriken** and **VFX Graph**, the latter being more powerful
    than the first, but requiring more hardware.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将继续学习关于我们游戏的视觉效果。我们将讨论粒子系统，一种模拟火、瀑布、烟雾和各种流体的方法。此外，我们将看到两种Unity粒子系统来创建这些效果，**Shuriken**和**VFX
    Graph**，后者比前者更强大，但需要更多的硬件。
- en: 'In this chapter, we will examine the following particle system concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下与粒子相关的概念：
- en: Introduction to particle systems
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子系统简介
- en: Creating fluid simulations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建流体模拟
- en: Creating complex simulations with VFX Graph
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VFX图创建复杂模拟
- en: Introduction to particle systems
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子系统简介
- en: All graphics and effects we have created so far use static meshes, 3D models
    that can't be skewed, bent, or deformed in any way. **Fluids** such as fire and
    smoke clearly can't be represented using this kind of mesh, but actually, we can
    simulate these effects with a combination of static meshes, and this is where
    particle systems are useful.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们创建的所有图形和效果都使用静态网格，即无法扭曲、弯曲或以任何方式变形的3D模型。火和烟等**流体**显然不能用这种网格来表示，但实际上，我们可以通过静态网格的组合来模拟这些效果，这就是粒子系统有用的地方。
- en: '**Particle systems** are objects that emit and animates lots of **particles**
    or **billboards**, which are simple quad meshes that face the camera. Each particle
    is a static mesh, but rendering, animating, and combining lots of them can generate
    the illusion of a fluid. In the next image you can see on the left a smoke effect
    using particle systems, and on the right, the **Wireframe** view of the same particles.
    There you can see the quads that create the illusion of smoke, which is done by
    applying a smoke texture to each of the particles and animating them so they spawn
    at the bottom and move up in random directions:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**粒子系统**是发射和动画大量**粒子**或**广告牌**的对象，这些广告牌是朝向摄像机的简单四边形网格。每个粒子都是一个静态网格，但渲染、动画和组合大量粒子可以产生流体的错觉。在下图中，您可以在左侧看到使用粒子系统的烟雾效果，右侧是相同粒子的**线框**视图。在那里，您可以看到创建烟雾错觉的四边形，这是通过将烟雾纹理应用到每个粒子并使它们在底部生成并朝着随机方向移动来实现的：'
- en: '![Figure 7.1 – Left side, a smoke particle system; right side, the wireframe
    of the same system'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1-左侧，烟雾粒子系统；右侧，相同系统的线框图'
- en: '](img/Figure_7.01_B14199.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.01_B14199.jpg)'
- en: Figure 7.1 – Left side, a smoke particle system; right side, the wireframe of
    the same system
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1-左侧，烟雾粒子系统；右侧，相同系统的线框图
- en: 'In this section, we will cover the following concepts related to particles:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖与粒子相关的以下概念：
- en: Creating a basic particle system
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本粒子系统
- en: Using advanced modules
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级模块
- en: Let's start discussing how to create our very first particle system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始讨论如何创建我们的第一个粒子系统。
- en: Creating a basic particle system
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本粒子系统
- en: 'To illustrate the creation of a particle system, let''s create an explosion
    effect. The idea is to spawn lots of particles at once and spread them in all
    directions. Let''s start creating the particle system and configuring the basic
    settings it provides to change its default behavior. To do so, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明粒子系统的创建，让我们创建一个爆炸效果。想法是一次产生大量粒子并将它们朝各个方向扩散。让我们开始创建粒子系统并配置它提供的基本设置以更改其默认行为。为此，请按照以下步骤操作：
- en: Select the **GameObject** | **Effects** | **Particle System** option:![Figure
    7.2 – Particle system creation button
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**GameObject** | **Effects** | **Particle System**选项：![图7.2-粒子系统创建按钮
- en: '](img/Figure_7.02_B14199.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.02_B14199.jpg)'
- en: Figure 7.2 – Particle system creation button
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2-粒子系统创建按钮
- en: You should see the effect in the following screenshot. The default behavior
    is a column of particles going up, like the smoke effect shown previously. Let's
    change that:![Figure 7.3 – Default particle system appearance](img/Figure_7.03_B14199.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在以下截图中看到效果。默认行为是一列粒子向上移动，就像之前显示的烟雾效果一样。让我们改变一下：![图7.3-默认粒子系统外观](img/Figure_7.03_B14199.jpg)
- en: Figure 7.3 – Default particle system appearance
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3-默认粒子系统外观
- en: Click the created object in the scene and look at the inspector.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击场景中创建的对象，查看检查器。
- en: Open the **Shape** section by clicking on the title.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击标题打开**形状**部分。
- en: Change the **Shape** property to **Sphere**. Now the particles should move in
    all possible directions instead of following the default cone:![Figure 7.4 – Shape
    properties
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**形状**属性更改为**球体**。现在粒子应该在所有可能的方向上移动，而不是遵循默认的锥形：![图7.4-形状属性
- en: '](img/Figure_7.04_B14199.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.04_B14199.jpg)'
- en: Figure 7.4 – Shape properties
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4-形状属性
- en: In the particle system `10`. This will make the particles move faster.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在粒子系统`10`中。这将使粒子移动得更快。
- en: "In the same module, set `0.5`. This specifies how long a particle will live.\
    \ In this case, we have given a lifetime of half a second. In combination \Lwith\
    \ the speed (10 meters per second), this makes the particles disappear after moving\
    \ 5 meters:![Figure 7.5 – Main Particle System module"
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的模块中，设置`0.5`。这指定了粒子的寿命。在这种情况下，我们给了半秒的寿命。结合速度（每秒10米），这使得粒子在移动5米后消失：![图7.5-主粒子系统模块
- en: '](img/Figure_7.05_B14199.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.05_B14199.jpg)'
- en: Figure 7.5 – Main Particle System module
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5-主粒子系统模块
- en: Open the `0`. This property specifies how many particles will be emitted per
    second, but for an explosion, we actually need a burst of particles, so we won't
    emit particles constantly over time in this case.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`0`。这个属性指定每秒将发射多少粒子，但对于爆炸，实际上我们需要一团粒子，所以在这种情况下我们不会持续不断地发射粒子。
- en: In the `100`:![Figure 7.6 – Emission module
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`100`中：![图7.6-发射模块
- en: '](img/Figure_7.06_B14199.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.06_B14199.jpg)'
- en: Figure 7.6 – Emission module
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6-发射模块
- en: In the Main module (the one titled `1` and uncheck **Looping**. In our case,
    the explosion won't repeat constantly; we just need one explosion:![Figure 7.7
    – Looping checkbox
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主模块（标题为`1`）中取消选中**循环**。在我们的情况下，爆炸不会不断重复；我们只需要一个爆炸：![图7.7 – 循环复选框
- en: '](img/Figure_7.07_B14199.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.07_B14199.jpg)'
- en: Figure 7.7 – Looping checkbox
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 循环复选框
- en: Now that the particle isn't looping, you need to manually hit the **Play** button
    that is shown in the **Particle Effect** window in the bottom-right part of the
    Scene View to see the system:![Figure 7.8 – Particle system playback controls
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在粒子不再循环，您需要手动点击**粒子效果**窗口右下角的**播放**按钮来查看系统：![图7.8 – 粒子系统播放控件
- en: '](img/Figure_7.08_B14199.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.08_B14199.jpg)'
- en: Figure 7.8 – Particle system playback controls
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 粒子系统播放控件
- en: Set **Stop Action** to **Destroy**. This will destroy the object when the **Duration**
    time has passed. This will just work when you are running the game, so you can
    safely use this configuration while editing your scene:![Figure 7.9 – Stop Action
    set to Destroy
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**停止动作**设置为**销毁**。当**持续时间**过去时，这将销毁对象。这只在游戏运行时有效，因此您可以在编辑场景时安全地使用此配置：![图7.9
    – 停止动作设置为销毁
- en: '](img/Figure_7.09_B14199.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.09_B14199.jpg)'
- en: Figure 7.9 – Stop Action set to Destroy
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 停止动作设置为销毁
- en: Set the `3`. This will make the particles bigger so they seem denser:![Figure
    7.10 – Particle system Start Size](img/Figure_7.10_B14199.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`3`。这将使粒子变大，看起来更密集：![图7.10 – 粒子系统开始大小](img/Figure_7.10_B14199.jpg)
- en: Figure 7.10 – Particle system Start Size
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – 粒子系统开始大小
- en: Click on the down-pointing arrow at the right of the **Start Rotation** property
    of the Main module and select **Random Between Two Constants**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击主模块的**开始旋转**属性右侧的向下箭头，并选择**两个常数之间的随机值**。
- en: Set the `0` and `360` in the two input values that appeared after the previous
    step. This allows us to give the particles a random rotation when they spawn to
    make them look slightly different from each other:![Figure 7.11 – Random Start
    Rotation
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步骤之后出现的两个输入值中设置`0`和`360`。这样可以使粒子在生成时具有随机旋转，使它们看起来略有不同：![图7.11 – 随机开始旋转
- en: '](img/Figure_7.11_B14199.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.11_B14199.jpg)'
- en: Figure 7.11 – Random Start Rotation
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 – 随机开始旋转
- en: Now the particles behave as expected, but they don't look as expected. Let's
    change that. Create a new material by clicking on the `Explosion`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在粒子的行为符合预期，但外观不符合预期。让我们改变一下。通过点击`爆炸`创建一个新材质。
- en: Set its shader to `Universal Render Pipeline/Particles/Unlit`. This is a special
    shader that is used to apply a texture to the Shuriken particle system:![Figure
    7.12 – Particle system material shader
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其着色器设置为`Universal Render Pipeline/Particles/Unlit`。这是一种特殊的着色器，用于将纹理应用到Shuriken粒子系统：![图7.12
    – 粒子系统材质着色器
- en: '](img/Figure_7.12_B14199.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.12_B14199.jpg)'
- en: Figure 7.12 – Particle system material shader
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 – 粒子系统材质着色器
- en: Download a smoke particle texture from the internet or the **Asset Store**.
    In this case, it is important to download one with a black background; ignore
    the others:![Figure 7.13 – Smoke particle texture
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从互联网或**资产商店**下载烟雾粒子纹理。在这种情况下，重要的是下载带有黑色背景的纹理；忽略其他的：![图7.13 – 烟雾粒子纹理
- en: '](img/Figure_7.13_B14199.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.13_B14199.jpg)'
- en: Figure 7.13 – Smoke particle texture
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 – 烟雾粒子纹理
- en: Set this texture as the **Base Map** of the material.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此纹理设置为材质的**基本贴图**。
- en: Set the **Surface Type** to **Transparent** and the **Blending Mode** to **Additive**.
    Doing this will make the particles blend with each other, instead of being drawn
    on each other, to simulate a big mass of smoke instead of individual smoke puffs.
    We use **Additive** mode because our texture has a black background and because
    we want to create a lighting effect (the explosion will brighten the scene):![Figure
    7.14 – Surface options for particles
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**表面类型**设置为**透明**，**混合模式**设置为**加法**。这样做将使粒子相互混合，而不是相互绘制，以模拟一大团烟雾而不是单个烟雾。我们使用**加法**模式，因为我们的纹理有黑色背景，而且我们想要创建一种光照效果（爆炸会照亮场景）：![图7.14
    – 粒子的表面选项
- en: '](img/Figure_7.14_B14199.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.14_B14199.jpg)'
- en: Figure 7.14 – Surface options for particles
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 – 粒子的表面选项
- en: Drag your material to the **Material** property of the **Renderer** module:![Figure
    7.15 – Particle material settings
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的材质拖到**渲染器**模块的**材质**属性中：![图7.15 – 粒子材质设置
- en: '](img/Figure_7.15_B14199.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.15_B14199.jpg)'
- en: Figure 7.15 – Particle material settings
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15 – 粒子材质设置
- en: 'Now your system should look like this:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的系统应该是这样的：
- en: '![Figure 7.16 – Result of the previous settings'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16 – 前面设置的结果'
- en: '](img/Figure_7.16_B14199.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.16_B14199.jpg)'
- en: Figure 7.16 – Result of the previous settings
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16 – 前面设置的结果
- en: In the previous steps, we have changed how the particles or billboards will
    spawn (using the Emission module), in which direction they will move (using the
    Shape module), how fast they will move, how long they will last, how big they
    will be (using the Main module), and what they will look like (using the Renderer
    module). Creating particle systems is a simple case of properly configuring their
    different settings. Of course, doing it properly is an art on its own; it requires
    creativity and knowledge of how to use all the settings and configurations they
    provide. So, to increase our configurations toolbox, let's discuss some advanced
    modules.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们已经改变了粒子或广告牌的生成方式（使用发射模块），它们将朝向哪个方向移动（使用形状模块），它们将以多快的速度移动，它们将持续多久，它们将有多大（使用主模块），以及它们将看起来像什么（使用渲染器模块）。创建粒子系统就是正确配置它们不同设置的简单情况。当然，正确地做这件事本身就是一门艺术；它需要创造力和对如何使用它们提供的所有设置和配置的知识。因此，为了增加我们的配置工具箱，让我们讨论一些高级模块。
- en: Using advanced modules
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用高级模块
- en: 'Our system looks nice, but we can improve it a lot, so let''s enable some new
    modules to increase its quality:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统看起来不错，但我们可以大大改进它，所以让我们启用一些新模块来提高其质量：
- en: Check the checkbox on the left of the **Color over Lifetime** module to enable
    it:![Figure 7.17 – Enabling the Color over Lifetime module
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**颜色随生命周期**模块左侧的复选框以启用它：![图7.17 - 启用颜色随生命周期模块
- en: '](img/Figure_7.17_B14199.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.17_B14199.jpg)'
- en: Figure 7.17 – Enabling the Color over Lifetime module
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17 - 启用颜色随生命周期模块
- en: Open the module by clicking on the title and click the white bar on the right
    of the **Color** property. This will open the gradient editor.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击标题打开模块，并点击**颜色**属性右侧的白色条。这将打开渐变编辑器。
- en: Click slightly to the right of the top-left white marker in the bar to create
    a new marker. Also, click slightly to the left of the top-right white marker to
    create the fourth marker. These markers will allow us to specify the transparency
    of the particles during its life:![Figure 7.18 – Color over Lifetime gradient
    editor
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击白色标记栏的左上方略微向右侧，创建一个新的标记。同时，点击白色标记的右上方略微向左侧，创建第四个标记。这些标记将允许我们在粒子生命周期中指定透明度：![图7.18
    - 颜色随生命周期渐变编辑器
- en: '](img/Figure_7.18_B14199.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.18_B14199.jpg)'
- en: Figure 7.18 – Color over Lifetime gradient editor
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18 - 颜色随生命周期渐变编辑器
- en: If you created unwanted markers, just drag them outside the window to remove
    them.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果创建了不需要的标记，只需将它们拖到窗口外即可删除。
- en: Click on the top-left marker (not the one we created, the one that was already
    there) and set the `0`. Do the same with the top-right marker, as shown in the
    following screenshot. Now you should see the particles fading away instead of
    popping out of existence when the explosion is finishing:![Figure 7.19 – Fade-in
    and fade-out gradient
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左上角的标记（不是我们创建的那个，而是已经存在的那个）并设置为`0`。对右上角的标记也做同样的操作，如下图所示。现在你应该看到粒子在爆炸结束时淡出而不是突然消失：![图7.19
    - 渐变淡入和淡出
- en: '](img/Figure_7.19_B14199.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.19_B14199.jpg)'
- en: Figure 7.19 – Fade-in and fade-out gradient
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19 - 渐变淡入和淡出
- en: Enable the **Limit Velocity over Lifetime** module by clicking on its checkbox.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击其复选框启用**限制生命周期内的速度**模块。
- en: Set the `0.1`. This will make the particles slowly stop instead of continuing
    to move:![Figure 7.20 – Dampen the velocity to make the particles stop
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置为`0.1`。这将使粒子慢慢停止而不是继续移动：![图7.20 - 减弱速度以使粒子停止
- en: '](img/Figure_7.20_B14199.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.20_B14199.jpg)'
- en: Figure 7.20 – Dampen the velocity to make the particles stop
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20 - 减弱速度以使粒子停止
- en: 'Enable `-90` and `90`. Remember that you should set the value in **Random Between
    Two Constants** by clicking on the down-pointing arrow to the right of the property.
    Now the particles should rotate slightly during their lives to simulate more motion:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`-90`和`90`。记住，你应该通过点击属性右侧的向下箭头来设置**两个常数之间的随机值**。现在粒子在它们的生命周期中应该稍微旋转，以模拟更多的运动：
- en: '![Figure 7.21 – Random rotation velocity'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.21 - 随机旋转速度'
- en: '](img/Figure_7.21_B14199.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.21_B14199.jpg)'
- en: Figure 7.21 – Random rotation velocity
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21 - 随机旋转速度
- en: As you can see, there are lots of extra modules that can be enabled and disabled
    to add layers of behavior on top of the existing ones, so again, use them creatively
    to create all kinds of effects. Remember that you can create Prefabs of these
    systems to replicate them all over your scene. I also recommend searching and
    downloading particle effects from the Asset Store to see how other people have
    used the same system to create amazing effects. That is the best way to learn
    how to create them, seeing a variety of different systems, and that is actually
    what we are going to do in the next section, create more systems!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，有许多额外的模块可以启用和禁用，以在现有模块之上添加行为层，因此，再次创造性地使用它们来创建各种效果。记住，你可以创建这些系统的预制件，以在整个场景中复制它们。我还建议在资产商店搜索和下载粒子效果，看看其他人如何使用相同的系统来创建惊人的效果。这是学习如何创建它们的最佳方式，看到各种不同的系统，这实际上也是我们将在下一节中要做的事情，创建更多的系统！
- en: Creating fluid simulations
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建流体模拟
- en: As we said, the best way to learn how to create particle systems is to keep
    looking for already-created particle systems and explore how people have used
    the various system settings to create completely different simulations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，学习如何创建粒子系统的最佳方式是继续寻找已经创建的粒子系统，并探索人们如何使用各种系统设置来创建完全不同的模拟。
- en: 'In this section, we will see how to create the following effects using particle
    systems:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用粒子系统创建以下效果：
- en: A waterfall effect
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布效果
- en: A bonfire effect
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 篝火效果
- en: Let's start with the simplest one, the waterfall effect.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最简单的瀑布效果开始。
- en: Creating a waterfall effect
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建瀑布效果
- en: 'In order to do this, follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，请按照以下步骤进行：
- en: Create a new particle system (**GameObject** | **Effects** | **Particle System**).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的粒子系统（**GameObject** | **Effects** | **Particle System**）。
- en: Set **Shape** to **Edge** and its **Radius** to 5 in the **Shape** module. This
    will make the particles spawn along a line of emission:![Figure 7.22 – Edge shape
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**形状**设置为**边缘**，并将**半径**设置为**5**在**形状**模块中。这将使粒子沿着一个发射线产生：![图7.22 - 边缘形状
- en: '](img/Figure_7.22_B14199.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.22_B14199.jpg)'
- en: Figure 7.22 – Edge shape
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22 - 边缘形状
- en: Set the `50`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置为`50`。
- en: Set the `3` and the `3`:![Figure 7.23 – Main module settings
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置为`3`和`3`：![图7.23 - 主模块设置
- en: '](img/Figure_7.23_B14199.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.23_B14199.jpg)'
- en: Figure 7.23 – Main module settings
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23 - 主模块设置
- en: Set the `0.5`. This will make the particles fall down:![Figure 7.24 – Gravity
    Modifier in the Main module
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置为`0.5`。这将使粒子下落：![图7.24 - 主模块中的重力修饰器
- en: '](img/Figure_7.24_B14199.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.24_B14199.jpg)'
- en: Figure 7.24 – Gravity Modifier in the Main module
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24 - 主模块中的重力修饰器
- en: Use the same `Explosion` material we created previously for this system:![Figure
    7.25 – Explosion particle material
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们之前为这个系统创建的`爆炸`材质：![图7.25 - 爆炸粒子材质
- en: '](img/Figure_7.25_B14199.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.25_B14199.jpg)'
- en: Figure 7.25 – Explosion particle material
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25 - 爆炸粒子材质
- en: Enable **Color Over Lifetime** and open the **Gradient** editor.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**颜色随生命周期**并打开**渐变**编辑器。
- en: 'Click the bottom-right marker, and this time you should see a color picker
    instead of an alpha slider. The top markers allow you to change the transparency
    over time, while the bottom ones change the color of the particles over time.
    Set a light blue color in this marker:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击右下角的标记，这次你应该看到一个颜色选择器，而不是一个透明度滑块。顶部的标记允许您随时间改变透明度，而底部的标记则随时间改变粒子的颜色。在这个标记中设置浅蓝色：
- en: '![Figure 7.26 – White to light blue gradient'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.26 – 从白色到浅蓝色的渐变'
- en: '](img/Figure_7.26_B14199.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.26_B14199.jpg)'
- en: Figure 7.26 – White to light blue gradient
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26 – 从白色到浅蓝色的渐变
- en: 'As a challenge, I suggest you add a little particle system where this one ends
    to create some water splashes, simulating the water colliding with a lake at the
    bottom. Now we can add this particle system to one of the hills in our scene to
    decorate it, like in the following screenshot. I have adjusted the system a little
    bit to look better in this scenario. I challenge you to tweak it by yourself to
    make it look like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 作为挑战，我建议您在这个结束的地方添加一个小的粒子系统，以创建一些水花，模拟水与湖底碰撞。现在我们可以将这个粒子系统添加到我们场景中的一个山丘上进行装饰，就像下面的截图一样。我已经调整了系统，使其在这种情况下看起来更好。我挑战你自己调整它，使它看起来像这样：
- en: '![Figure 7.27 – The waterfall particle system being applied to our current
    scene'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.27 – 应用到我们当前场景中的瀑布粒子系统'
- en: '](img/Figure_7.27_B14199.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.27_B14199.jpg)'
- en: Figure 7.27 – The waterfall particle system being applied to our current scene
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27 – 应用到我们当前场景中的瀑布粒子系统
- en: Now, let's create another effect, a bonfire.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建另一个效果，一个篝火。
- en: Creating a bonfire effect
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建篝火效果
- en: 'In order to create it, do the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建它，做以下操作：
- en: Create a particle system.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个粒子系统。
- en: Look for a **Fire Particle Texture Sheet** texture on the internet or the Asset
    Store. This kind of texture should look like a grid of different flame textures.
    The idea is to apply a flame animation to our particles swapping all those mini-textures:![Figure
    7.28 – Particles texture sprite sheet](img/Figure_7.28_B14199.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在互联网或资产商店上寻找**火焰粒子纹理表**纹理。这种纹理应该看起来像一个不同火焰纹理的网格。想法是将火焰动画应用到我们的粒子上，交换所有这些小纹理：![图7.28
    – 粒子纹理精灵表](img/Figure_7.28_B14199.jpg)
- en: Figure 7.28 – Particles texture sprite sheet
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28 – 粒子纹理精灵表
- en: Create a particle material and set this texture as the **Base Map**. Set the
    color at the right of the **Base Map** to white. Then set this material as the
    particle material. Remember to set **Surface Type** to **Transparent** and **Blending
    Mode** to **Additive**:![Figure 7.29 – A material with a particle sprite sheet
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个粒子材质，并将此纹理设置为**基本贴图**。将**基本贴图**右侧的颜色设置为白色。然后将此材质设置为粒子材质。记得将**表面类型**设置为**透明**，**混合模式**设置为**叠加**：![图7.29
    – 带有粒子精灵表的材质
- en: '](img/Figure_7.29_B14199.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.29_B14199.jpg)'
- en: Figure 7.29 – A material with a particle sprite sheet
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29 – 带有粒子精灵表的材质
- en: Enable the `4` in `4` in **Y**. After this, you should see the particles swapping
    textures:![Figure 7.30 – Enabling Texture Sheet Animation
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Y**中启用`4`中的`4`。之后，您应该看到粒子交换纹理：![图7.30 – 启用纹理表动画
- en: '](img/Figure_7.30_B14199.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.30_B14199.jpg)'
- en: Figure 7.30 – Enabling Texture Sheet Animation
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.30 – 启用纹理表动画
- en: Set `0` and `1.5` in the Main module.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主模块中设置`0`和`1.5`。
- en: Set `0.5` in **Shape**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**形状**中设置`0.5`。
- en: Create a second particle system and make it a child of the fire system:![Figure
    7.31 – Parenting particle systems
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个粒子系统，并将其设置为火系统的子对象：![图7.31 – 粒子系统的父子关系
- en: '](img/Figure_7.31_B14199.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.31_B14199.jpg)'
- en: Figure 7.31 – Parenting particle systems
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.31 – 粒子系统的父子关系
- en: Apply the Smoke material from the explosion example.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用爆炸示例中的烟雾材质。
- en: Set `0` and `0.5` in the Shape module.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**形状**中设置`0`和`0.5`。
- en: 'The system should look like this:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统应该看起来像这样：
- en: '![Figure 7.32 – Result of combining fire and smoke particle systems'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.32 – 结合火和烟粒子系统的结果'
- en: '](img/Figure_7.32_B14199.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.32_B14199.jpg)'
- en: Figure 7.32 – Result of combining fire and smoke particle systems
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.32 – 结合火和烟粒子系统的结果
- en: As you can see, you can combine several particle systems to create a single
    effect. Take care when doing this because it's easy to emit too many particles
    and affect the game's performance. Particles are not cheap and may cause a reduction
    in the game's **FPS (Frames Per Second)** if you are not cautious with them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您可以组合多个粒子系统来创建单个效果。在这样做时要小心，因为很容易发射太多的粒子并影响游戏的性能。粒子并不便宜，如果不小心使用，可能会导致游戏的**FPS（每秒帧数）**下降。
- en: So far, we have explored one of the Unity systems that you can use to create
    these kinds of effects, and while this system is enough for most situations, Unity
    recently released a new one that can generate more complex effects, called **VFX
    Graph**. Let's see how to use it and see how it differs from Shuriken.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了Unity系统中的一个用于创建这种效果的系统，虽然这个系统对于大多数情况来说已经足够了，但Unity最近发布了一个新的系统，可以生成更复杂的效果，称为**VFX
    Graph**。让我们看看如何使用它，以及它与Shuriken有何不同。
- en: Creating complex simulations with VFX Graph
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用VFX Graph创建复杂的模拟
- en: 'The particle system we have used so far is called Shuriken, and it handles
    all calculations in the CPU. This has both pros and cons. A pro is that it can
    run on all possible devices that Unity supports, regardless of their capabilities
    (all of them have CPUs), but a con is that we can exceed CPU capabilities easily
    if we are not cautious with the number of particles we emit. Modern games require
    more complex particle systems to generate believable effects, and this kind of
    CPU-based particle system solution has started to reach its limits. This is where
    the VFX Graph comes in:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的粒子系统称为Shuriken，它在CPU中处理所有计算。这既有优点也有缺点。优点是它可以在Unity支持的所有设备上运行，而不受它们的能力限制（它们都有CPU），但缺点是如果我们不小心发射太多粒子，很容易超出CPU的能力。现代游戏需要更复杂的粒子系统来生成可信的效果，而这种基于CPU的粒子系统解决方案已经开始达到极限。这就是VFX
    Graph的用武之地：
- en: '![Figure 7.33 – On the left, a massive particle system, and on the right, an
    example of a VFX Graph'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.33 – 左侧是一个大型粒子系统，右侧是VFX图的示例'
- en: '](img/Figure_7.33_B14199.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.33_B14199.jpg)'
- en: Figure 7.33 – On the left, a massive particle system, and on the right, an example
    of a VFX Graph
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.33 – 左侧是一个大型粒子系统，右侧是VFX图的示例
- en: '**VFX Graph (Visual Effects Graph)** is a GPU-based particle system solution,
    meaning that the system is executed on the video card instead of the CPU. That''s
    because video cards are far more efficient at executing lots and lots of little
    simulations, like the ones each particle of a system needs, so we can reach far
    higher orders of magnitude in the number of particles with the GPU than we can
    with the CPU. The con here is that we need a fairly modern GPU that has **compute
    shader** capabilities to support this system, so we will exclude certain target
    platforms using this system (forget about most mobile phones), so only use it
    if your target platform supports it (mid to high-end PCs, consoles, and some high-end
    phones).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**VFX图（视觉效果图）**是基于GPU的粒子系统解决方案，这意味着系统在视频卡上执行，而不是在CPU上执行。这是因为视频卡在执行许多小模拟方面要高效得多，就像系统的每个粒子所需的模拟一样，因此我们可以使用GPU比使用CPU实现更高数量级的粒子。这里的缺点是我们需要一个具有**计算着色器**功能的相当现代的GPU来支持此系统，因此我们将使用此系统排除某些目标平台（忘记大多数手机），因此只有在您的目标平台支持它时才使用它（中高端PC、游戏机和一些高端手机）。'
- en: 'In this section, we will discuss the following concepts of VFX Graph:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论VFX图的以下概念：
- en: Installing VFX Graph
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装VFX图
- en: Creating and analyzing a VFX Graph
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和分析VFX图
- en: Creating a rain effect
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建雨效果
- en: Let's start seeing how we can add support for VFX Graph in our project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始看看如何在我们的项目中添加对VFX图的支持。
- en: Installing VFX Graph
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装VFX图
- en: So far, we have used lots of Unity features that were already installed in our
    project, but Unity can be extended with a myriad of plugins, both official and
    third-party. VFX Graph is one of those features that needs to be independently
    installed if you are using **Universal Render Pipeline** **(URP)**. We can do
    that using the Package Manager, a Unity window dedicated to managing official
    Unity plugins.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了许多Unity功能，这些功能已经安装在我们的项目中，但是Unity可以通过各种官方和第三方插件进行扩展。VFX图是其中之一，如果您使用**通用渲染管线（URP）**，则需要单独安装该功能。我们可以使用包管理器来完成这一点，包管理器是一个专门用于管理官方Unity插件的Unity窗口。
- en: Something to think about when you are installing those packages is that each
    package or plugin has its own version, independent of the Unity version. That
    means that you can have Unity 2020.1 installed, but VFX Graph 7.1.5 or 7.1.2 or
    whatever version you want, and you can actually update the package to a newer
    version without upgrading Unity. This is important because some versions of these
    packages require a minimum version of Unity. Moreover, some packages depend on
    other packages, and actually specific versions of those packages, so we need to
    ensure we have the correct versions of every package to ensure compatibility.
    To be clear, the dependencies of a package are installed automatically, but sometimes
    we can have them installed separately, so in that scenario, we need to check the
    required version. It sounds complicated, but it is simpler than it sounds.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装这些软件包时需要考虑的一点是，每个软件包或插件都有自己的版本，与Unity版本无关。这意味着您可以安装Unity 2020.1，但VFX图可以是7.1.5或7.1.2或任何您想要的版本，并且您实际上可以将软件包更新到新版本，而无需升级Unity。这很重要，因为这些软件包的某些版本需要Unity的最低版本。此外，某些软件包依赖于其他软件包，实际上是这些软件包的特定版本，因此我们需要确保我们拥有每个软件包的正确版本以确保兼容性。需要明确的是，软件包的依赖关系会自动安装，但有时我们可以单独安装它们，因此在这种情况下，我们需要检查所需的版本。听起来很复杂，但实际上比听起来简单。
- en: 'As the time of writing this book, I''m using get VFX Graph version 8.2.0, the
    same version as URP. Yes, URP is another feature you need to install using the
    Package Manager, but as we created the project using the URP template, it was
    already installed for us. Regarding versions, a piece of advice: never update
    your Unity version or a package version during the production of your game unless
    is really necessary. Upgrades generally come with lots of compatibility versions,
    meaning that some parts of your game may need to be fixed after the upgrade to
    comply with the way the new versions of those packages work. Also, consider that
    some packages has the Verified label, meaning that it was tested in our Unity
    version, and therefore is recommended to go with it.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我正在使用VFX图版本8.2.0，与URP相同的版本。是的，URP是另一个您需要使用包管理器安装的功能，但是由于我们使用了URP模板创建项目，它已经为我们安装好了。关于版本，一个建议：在制作游戏期间，除非确有必要，否则永远不要更新Unity版本或软件包版本。升级通常会带来许多兼容性版本，这意味着在升级后，您的游戏的某些部分可能需要修复以符合这些软件包的新版本的工作方式。此外，请考虑一些软件包具有已验证标签，这意味着它已在我们的Unity版本中进行了测试，因此建议使用它。
- en: 'Now, let''s install the VFX Graph as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下步骤安装VFX图：
- en: In the top menu of Unity, go to **Window** | **Package Manager**:![Figure 7.34
    – Package Manager location
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity的顶部菜单中，转到**窗口** | **包管理器**：![图7.34 – 包管理器位置
- en: '](img/Figure_7.34_B14199.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.34_B14199.jpg)'
- en: Figure 7.34 – Package Manager location
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.34 – 包管理器位置
- en: Look for the **Visual Effects Graph** package on the left side of the window.
    Make sure you select version 8.2.0 or higher:![Figure 7.35 – Visual Effect Graph
    package
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口左侧查找**视觉效果图**软件包。确保选择8.2.0或更高版本：![图7.35 – 视觉效果图软件包
- en: '](img/Figure_7.35_B14199.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.35_B14199.jpg)'
- en: Figure 7.35 – Visual Effect Graph package
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.35 – 视觉效果图软件包
- en: Click at the button **Install** at the bottom-right of the window and wait for
    the package to install:![Figure 7.36 – Install package button
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口右下角的**安装**按钮，等待软件包安装：![图7.36 – 安装软件包按钮
- en: '](img/Figure_7.36_B14199.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.36_B14199.jpg)'
- en: Figure 7.36 – Install package button
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.36 – 安装软件包按钮
- en: It is recommended to restart Unity after installing packages, so save your changes
    and restart Unity.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建议在安装包后重新启动Unity，所以保存你的更改并重新启动Unity。
- en: Now that we have installed VFX Graph, let's create our first particle system
    using it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了VFX图形，让我们使用它来创建我们的第一个粒子系统。
- en: Creating and analyzing a VFX Graph
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和分析VFX图形
- en: 'The philosophy to create particle system using VFX Graph is similar to the
    regular Particle System. We will chain and configure modules as parts of the behavior
    of the particles, each module adding some specific behavior, but the way we do
    it is very different than with Shuriken. First, we need to create a **Visual Effect
    Graph**, an asset that will contain all the modules and configurations, and then
    make a GameObject play the Graph. Let''s do that with the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用VFX图形创建粒子系统的理念与常规粒子系统类似。我们将链接和配置模块作为粒子行为的一部分，每个模块都添加一些特定的行为，但我们的做法与Shuriken有很大不同。首先，我们需要创建一个**视觉效果图形**，这是一个包含所有模块和配置的资产，然后让一个游戏对象播放这个图形。让我们按照以下步骤来做：
- en: In the Project window, click on the **+** button and look for **Visual Effects**
    | **Visual Effect Graph**:![Figure 7.37 – Visual Effect Graph
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中，点击**+**按钮，查找**视觉效果** | **视觉效果图形**：![图7.37 - 视觉效果图形
- en: '](img/Figure_7.37_B14199.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.37_B14199.jpg)'
- en: Figure 7.37 – Visual Effect Graph
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.37 - 视觉效果图形
- en: Create an Empty GameObject using the **Game Object** | **Create Empty** option:![Figure
    7.38 – Empty GameObject creation
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**游戏对象** | **创建空**选项创建一个空游戏对象：![图7.38 - 创建空游戏对象
- en: '](img/Figure_7.38_B14199.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.38_B14199.jpg)'
- en: Figure 7.38 – Empty GameObject creation
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.38 - 创建空游戏对象
- en: Select the created object and look at the Inspector.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建的对象并查看检查器。
- en: Using the **Add Component** search bar, look for the **Visual Effect** component
    and click on it to add it to the object:![Figure 7.39 – Adding a component to
    the Visual Effect Graph
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**添加组件**搜索栏，查找**可视效果**组件并点击它以将其添加到对象中：![图7.39 - 向视觉效果图形添加组件
- en: '](img/Figure_7.39_B14199.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.39_B14199.jpg)'
- en: Figure 7.39 – Adding a component to the Visual Effect Graph
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.39 - 向视觉效果图形添加组件
- en: Drag the VFX asset we created to the **Asset Template** property of the **Visual
    Effect** component in our GameObject:![Figure 7.40 – Visual Effect using the previously
    created VFX asset
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们创建的VFX资产拖到我们游戏对象的**可视效果**组件的**资产模板**属性中：![图7.40 - 使用先前创建的VFX资产的可视效果
- en: '](img/Figure_7.40_B14199.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.40_B14199.jpg)'
- en: Figure 7.40 – Visual Effect using the previously created VFX asset
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.40 - 使用先前创建的VFX资产的可视效果
- en: 'You should see clock particles being emitted from our object:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到时钟粒子从我们的对象中发射出来：
- en: '![Figure 7.41 – Default VFX Asset results'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.41 - 默认VFX资产结果'
- en: '](img/Figure_7.41_B14199.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.41_B14199.jpg)'
- en: Figure 7.41 – Default VFX Asset results
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.41 - 默认VFX资产结果
- en: 'Now that we have a base effect, let''s create something that requires a lot
    of particles, such as dense rain. Before doing so, let''s explore some core concepts
    of VFX Graph. If you double-click the Visual Effect asset, you will see the following
    editor:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个基本效果，让我们创建一些需要大量粒子的东西，比如密集的雨。在这样做之前，让我们探索一些VFX图形的核心概念。如果你双击可视效果资产，你会看到以下编辑器：
- en: '![Figure 7.42 – Visual Effect Graph editor window'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.42 - 可视效果图形编辑器窗口'
- en: '](img/Figure_7.42_B14199.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.42_B14199.jpg)'
- en: Figure 7.42 – Visual Effect Graph editor window
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.42 - 可视效果图形编辑器窗口
- en: This window is composed of several interconnected nodes, generating a flow of
    actions to be executed. At first, it seems similar to the shader graph, but it
    works a little bit differently, so let's study each section of the default graph.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口由几个相互连接的节点组成，生成要执行的操作流。起初，它似乎类似于着色器图，但它的工作方式有点不同，所以让我们研究一下默认图的每个部分。
- en: 'The first area to explore is the dotted one that contains three nodes. This
    is what Unity calls a **System**. A System is a set of nodes that defines how
    a particle will behave, and you can have as many as you want, which is the equivalent
    of having several particle system objects. Each System is composed of **Contexts**,
    the nodes inside the dotted area, and in this case, we have **Initialize Particle**,
    **Update Particle**, and **Output Particle Quad**. Each Context represents a different
    stage of the particle system logic flow, so let''s define what each context in
    our graph does:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索的第一个区域是包含三个节点的虚线区域。这就是Unity所谓的**系统**。系统是一组定义粒子行为的节点，你可以有任意多个，这相当于有几个粒子系统对象。每个系统由**上下文**组成，即虚线区域内的节点，在这种情况下，我们有**初始化粒子**、**更新粒子**和**输出粒子四边形**。每个上下文代表粒子系统逻辑流的不同阶段，所以让我们定义一下我们图中的每个上下文做什么：
- en: '**Initialize Particle**: This defines the initial data of each emitted particle,
    such as position, color, speed, and size. It is similar to the Start properties
    in the Main module of the particle system we saw at the beginning of this chapter.
    The logic in this node will only execute when a new particle is emitted.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化粒子**：这定义了每个发射粒子的初始数据，如位置、颜色、速度和大小。这类似于本章开头看到的粒子系统的主模块中的起始属性。这个节点中的逻辑只有在发射新粒子时才会执行。'
- en: '**Update Particle**: Here, we can apply modifications to the data of the living
    particles. We can change particle data such as the current velocity or size all
    the frames. This is similar to the Over Time nodes of the previous particle system.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新粒子**：在这里，我们可以对活动粒子的数据应用修改。我们可以改变粒子数据，比如当前速度或大小，所有帧都可以。这类似于先前粒子系统的随时间节点。'
- en: '**Output Particle Quad**: This Context will be executed when the particle needs
    to be rendered. It will read the particle data to see where to render, how to
    render, which texture and color to use, and different visual settings. This is
    similar to the Renderer module of the previous particle system.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出粒子四边形**：这个上下文将在需要渲染粒子时执行。它将读取粒子数据，看到在哪里渲染，如何渲染，使用哪个纹理和颜色，以及不同的视觉设置。这类似于先前粒子系统的渲染器模块。'
- en: 'Inside each Context, apart from some base configurations, we can add **Blocks**.
    Each Block is an action that will be executed in the context. We have actions
    that can be executed in any Context and then some specific Context actions. As
    an example, we can use an Add Position Block in the Initialize Particle Context
    to move the initial particle position, but if we use the same Block in the Update
    Particle Context, it will move the particle constantly. So basically, Contexts
    are different situations that happen in the life of the particle, and Blocks are
    actions that are executed in those situations:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一些基本配置外，我们可以在每个上下文中添加**块**。每个块都是在上下文中执行的操作。我们有一些可以在任何上下文中执行的操作，然后是一些特定的上下文操作。例如，我们可以在初始化粒子上下文中使用添加位置块来移动初始粒子位置，但如果我们在更新粒子上下文中使用相同的块，它将不断地移动粒子。因此，上下文是粒子生命周期中发生的不同情况，而块是在这些情况下执行的操作：
- en: '![Figure 7.43 – A Set Velocity Random Block inside the Initialize Particle
    Context.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.43 – 在初始化粒子上下文中的设置速度随机块。'
- en: This sets the initial velocity of a particle
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置粒子的初始速度
- en: '](img/Figure_7.43_B14199.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.43_B14199.jpg)'
- en: Figure 7.43 – A Set Velocity Random Block inside the Initialize Particle Context.
    This sets the initial velocity of a particle
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.43 – 在初始化粒子上下文中的设置速度随机块。这将设置粒子的初始速度
- en: Also, we can have **Standalone Contexts**, Contexts outside systems, such as
    **Spawn**. This Context is responsible for telling the system that a new particle
    needs to be created. We can add Blocks to specify when the context will tell the
    system to create the particle, such as at a fixed rate over time, bursts, and
    so on. The idea is that spawn will create particles according to its blocks, while
    a System is responsible for initializing, updating, and rendering each of them,
    again, according to the blocks we set up inside each one of those Contexts.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以有**独立上下文**，即系统之外的上下文，例如**生成**。这个上下文负责告诉系统需要创建一个新粒子。我们可以添加块来指定上下文何时告诉系统创建粒子，例如在固定时间内以固定速率、突发等。生成将根据其块创建粒子，而系统负责根据我们在每个上下文中设置的块来初始化、更新和渲染每个粒子。
- en: So, we can see that there are lots of similarities with Shuriken, but the way
    to create a system here is quite different. Let's reinforce this by creating a
    rain effect, which will require lots of particles, a nice use case for VFX Graph.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到与Shuriken有很多相似之处，但在这里创建系统的方式是完全不同的。让我们通过创建一个雨效果来加强这一点，这将需要大量粒子，这是VFX图形的一个很好的使用案例。
- en: Creating a rain effect
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建雨效果
- en: 'In order to create this effect, do the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这种效果，执行以下操作：
- en: Set the `10000`:![Figure 7.44 – Initialize Particle Context
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`10000`：![图7.44 – 初始化粒子上下文
- en: '](img/Figure_7.44_B14199.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.44_B14199.jpg)'
- en: Figure 7.44 – Initialize Particle Context
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.44 – 初始化粒子上下文
- en: Set the `10000`:![Figure 7.45 – Constant Spawn Rate Block
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`10000`：![图7.45 – 常量生成率块
- en: '](img/Figure_7.45_B14199.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.45_B14199.jpg)'
- en: Figure 7.45 – Constant Spawn Rate Block
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.45 – 常量生成率块
- en: Set the `0`, `-50`, `0`) and (`0`, `-75`, `0`) respectively in the **Set Velocity
    Random Block** in the **Initialize Particle** Context. This will set a random
    velocity pointing downward for our particles:![Figure 7.46 – Set Velocity Random
    Block
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**初始化粒子**上下文中的**设置速度随机块**中分别设置`0`，`-50`，`0`）和（`0`，`-75`，`0`）。这将为我们的粒子设置一个指向下方的随机速度：![图7.46
    – 设置速度随机块
- en: '](img/Figure_7.46_B14199.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.46_B14199.jpg)'
- en: Figure 7.46 – Set Velocity Random Block
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.46 – 设置速度随机块
- en: Click the **Initialize Particle** title to select the context, and once it's
    highlighted press the Spacebar to show the **Add Block** window.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**初始化粒子**标题以选择上下文，一旦突出显示，按空格键显示**添加块**窗口。
- en: Search for the **Set Position Random** block and click on it:![Figure 7.47 –
    Adding blocks
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**设置位置随机**块并单击它：![图7.47 – 添加块
- en: '](img/Figure_7.47_B14199.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.47_B14199.jpg)'
- en: Figure 7.47 – Adding blocks
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.47 – 添加块
- en: Set the `-50` , `0`, `-50`) and (`50`, `0`, `50`) respectively. This will define
    an initial area in which to randomly spawn the particle.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`-50`，`0`，`-50`）和（`50`，`0`，`50`）分别设置。这将定义一个初始区域，以在其中随机生成粒子。
- en: Click the arrow at the left of the `0`, `-12.5`, `0`) and (`100`, `25`, `100`)
    respectively. This will define the area where the particles should live. Particles
    can actually move outside this area, but this is important for the system to work
    properly (search `Frustum Culling` on the internet for more information).
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`0`，`-12.5`，`0`）和（`100`，`25`，`100`）左侧的箭头。这将定义粒子应该存在的区域。粒子实际上可以移出这个区域，但这对系统正常工作很重要（在互联网上搜索`视锥体剔除`以获取更多信息）。
- en: Select the GameObject that is executing the system, and in the bottom-right
    window in the Scene view check the **Show Bounds** checkbox to see the previously
    defined Bounds:![Figure 7.48 – Visual Effect Playback controls
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择执行系统的GameObject，并在场景视图的右下窗口中选中**显示边界**复选框，以查看先前定义的边界：![图7.48 – 视觉效果播放控制
- en: '](img/Figure_7.48_B14199.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.48_B14199.jpg)'
- en: Figure 7.48 – Visual Effect Playback controls
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.48 – 视觉效果播放控制
- en: Set the object position to cover the whole base area. In my case, the position
    is (`100`, `37`, `100`). Remember that you need to change the **Position** of
    the **Transform** component for this:![Figure 7.49 – Setting a transform position
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对象位置设置为覆盖整个基础区域。在我的案例中，位置是（`100`，`37`，`100`）。请记住，您需要更改**变换**组件的**位置**：![图7.49
    – 设置变换位置
- en: '](img/Figure_7.49_B14199.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.49_B14199.jpg)'
- en: Figure 7.49 – Setting a transform position
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.49 – 设置变换位置
- en: Set the `0.5`. This will make the particles have a shorter life, ensuring that
    they are always inside the bounds:![Figure 7.50 – Set Lifetime Random block
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`0.5`。这将使粒子的寿命更短，确保它们始终在边界内：![图7.50 – 设置寿命随机块
- en: '](img/Figure_7.50_B14199.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.50_B14199.jpg)'
- en: Figure 7.50 – Set Lifetime Random block
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.50 – 设置寿命随机块
- en: Change the **Main Texture** property of the **Output Particle Quad** Context
    to another texture. In this case, the previously downloaded smoke texture can
    work here, even though it's not water, because we will modify its appearance in
    a moment. Also, you can try to download a water droplet texture if you want to:![Figure
    7.51 – VFX Graph Main Texture
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**输出粒子四边形**上下文的**主纹理**属性更改为另一个纹理。在这种情况下，之前下载的烟雾纹理可以在这里使用，即使它不是水，因为我们将在一会儿修改它的外观。另外，如果你愿意，你也可以尝试下载水滴纹理:![图7.51
    - VFX图主纹理
- en: '](img/Figure_7.51_B14199.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.51_B14199.jpg)'
- en: Figure 7.51 – VFX Graph Main Texture
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.51 - VFX图主纹理
- en: Set **Blend Mode** of the **Output Particle Quad** Context to **Additive**:![Figure
    7.52 – Additive mode of VFX Graph
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**输出粒子四边形**上下文的**混合模式**设置为**附加**：![图7.52 - VFX图的附加模式
- en: '](img/Figure_7.52_B14199.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.52_B14199.jpg)'
- en: Figure 7.52 – Additive mode of VFX Graph
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.52 - VFX图的附加模式
- en: If you can't see the last change being applied, click the **Compile** button
    in the top-left of the window. Also, you can save your changes using *Ctrl* +
    *S* (*Command* + *S* on Mac):![Figure 7.53 – VFX Asset Saving controls
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看不到最后的更改被应用，点击窗口左上角的**编译**按钮。另外，你可以使用*Ctrl* + *S*（Mac上为*Command* + *S*）保存你的更改:![图7.53
    - VFX资产保存控制
- en: '](img/Figure_7.53_B14199.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.53_B14199.jpg)'
- en: Figure 7.53 – VFX Asset Saving controls
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.53 - VFX资产保存控制
- en: Now we need to stretch our particles a little bit to look like actual raindrops
    instead of falling balls. To do so, first we need to change the orientation of
    our particles so they don't point at the camera all the time. In order to do this,
    right-click on the **Orient Block** in the **Output Particle Quad** Context and
    select **Delete** (or press *Delete* on PC or *Command* + *Backspace* on Mac):![Figure
    7.54 – Deleting a block
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要稍微拉伸我们的粒子，使其看起来像真正的雨滴而不是下落的球。为此，首先我们需要改变粒子的方向，使它们不总是指向摄像机。为了做到这一点，右键单击**输出粒子四边形**上下文中的**定向块**，然后选择**删除**（或在PC上按*Delete*，在Mac上按*Command*
    + *Backspace*）:![图7.54 - 删除块
- en: '](img/Figure_7.54_B14199.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.54_B14199.jpg)'
- en: Figure 7.54 – Deleting a block
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.54 - 删除块
- en: We want to stretch our particles according to their velocity direction. To do
    this, select the title of the **Output Particle Quad** context and hit the space
    bar to look for a block to add. In this case, we need to search for the **Orient
    Along Velocity** block.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想根据它们的速度方向拉伸我们的粒子。为此，选择**输出粒子四边形**上下文的标题，然后按空格键查找要添加的块。在这种情况下，我们需要搜索**沿速度定向**块。
- en: Add a `0.25`, `1.5`, `0.25`). This will stretch the particles to look like falling
    drops:![Figure 7.55 – Set Scale Block
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`0.25`，`1.5`，`0.25`)。这将拉伸粒子，使其看起来像落下的水滴:![图7.55 - 设置比例块
- en: '](img/Figure_7.55_B14199.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.55_B14199.jpg)'
- en: Figure 7.55 – Set Scale Block
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.55 - 设置比例块
- en: 'Click the **Compile** button in the top-left window again to see the changes.
    Your system should look like this:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击窗口左上角的**编译**按钮，以查看更改。你的系统应该看起来像这样：
- en: '![Figure 7.56 – Rain results'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.56 - 雨结果'
- en: '](img/Figure_7.56_B14199.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.56_B14199.jpg)'
- en: Figure 7.56 – Rain results
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.56 - 雨结果
- en: From here, you can experiment by adding and removing Blocks from the Contexts
    as you wish, and again, I recommend you look for already-created Visual Effects
    Graphs to find ideas for other systems. Actually, you can get ideas for VFX Graph
    by looking at effects made in Shuriken and using the analogous blocks. Also, I
    recommend you look for the VFX Graph documentation at [https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@7.1/manual/index.html](https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@7.1/manual/index.html)
    to learn more about this system.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你可以根据自己的意愿向上下文中添加和删除块进行实验，我再次建议你寻找已经创建的视觉效果图，以找到其他系统的创意。实际上，你可以通过查看Shuriken中制作的效果并使用类似的块来获得VFX图的创意。另外，我建议你查看VFX图文档[https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@7.1/manual/index.html](https://docs.unity3d.com/Packages/com.unity.visualeffectgraph@7.1/manual/index.html)以了解更多关于这个系统的信息。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed two different ways to create particle systems,
    using Shuriken and VFX Graph. We used them to simulate different fluid phenomena,
    such as fire, a waterfall, smoke, and rain. The idea is to combine particle systems
    with meshes to generate all the possible props needed for your scene. Also, as
    you can imagine, creating these kinds of effects professionally requires you to
    go deeper. If you want to dedicate yourself to this (another part of the job of
    a Technical Artist), you will need to learn how to create your own particle textures
    to get the exact look and feel you want, code scripts that control certain aspects
    of the systems, and several other aspects of particle creation. Again, that is
    outside the scope of the book.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了使用Shuriken和VFX图创建粒子系统的两种不同方法。我们用它们来模拟不同的流体现象，如火、瀑布、烟雾和雨。这个想法是将粒子系统与网格相结合，生成场景所需的所有可能道具。另外，正如你可以想象的，专业地创建这些效果需要你深入了解。如果你想专注于这一点（技术艺术家的另一部分工作），你需要学会如何创建自己的粒子纹理，以获得你想要的精确外观和感觉，编写控制系统某些方面的代码脚本，以及粒子创建的其他几个方面。再次强调，这超出了本书的范围。
- en: Now that we have some rain in our scene, we can see that the sky and the lighting
    in the scene don't really reflect a rainy day, so let's fix that in the next chapter!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的场景中有了一些雨，我们可以看到天空和场景中的光线并不真正反映出雨天，所以让我们在下一章中解决这个问题！
