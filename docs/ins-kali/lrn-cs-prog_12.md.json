["```cs\nstatic void Main(string[] args)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Current Thread Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0Console.ReadKey();\n}\n```", "```cs\n[DllImport(\"Kernel32.dll\")]\nprivate static extern int GetCurrentThreadId();\nstatic void Main(string[] args)\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Current Thread Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Current Native Thread Id: {GetCurrentThreadId()}\");\n\u00a0\u00a0\u00a0\u00a0Console.ReadKey();\n}\n```", "```cs\npublic class FileWatcher\n{\n\u00a0\u00a0\u00a0\u00a0private FileSystemWatcher _watcher;\n\u00a0\u00a0\u00a0\u00a0public void Run()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var path = Path.GetFullPath(\".\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Observing changes in path: {path}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher = new FileSystemWatcher(path, \"*.txt\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.Created += Watcher_Created;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.Deleted += Watcher_Deleted;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"TID: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = true;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private void Watcher_Deleted(object sender, FileSystemEventArgs e)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Deleted occurred in TID: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0private void Watcher_Created(object sender, FileSystemEventArgs e)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Created occurred in TID: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0}\n} \n```", "```cs\nvar fw = new FileWatcher();\nfw.Run();\nConsole.ReadKey();\n```", "```cs\nObserving changes in path: C:\\projects\\Watch\\bin\\Debug\\netcoreapp3.1\nTID: 1\nCreated occurred in TID: 5\nCreated occurred in TID: 7\nDeleted occurred in TID: 5\nDeleted occurred in TID: 5\n```", "```cs\npublic class Primes : IEnumerable<long>\n{\n\tpublic Primes(long Max = long.MaxValue)\n\t{\n\t\tthis.Max = Max;\n\t}\n\tpublic long Max { get; private set; }\n\tIEnumerator IEnumerable.GetEnumerator() => ((IEnumerable<long>)this).GetEnumerator();\n\tpublic IEnumerator<long> GetEnumerator()\n\t{\n\t\tyield return 1;\n\t\tbool bFlag;\n\t\tlong start = 2;\n\t\twhile (start < Max)\n\t\t{\n\t\t\tbFlag = false;\n\t\t\tvar number = start;\n\t\t\tfor (int i = 2; i < number; i++)\n\t\t\t{\n\t\t\t\tif (number % i == 0)\n\t\t\t\t{\n\t\t\t\t\tbFlag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!bFlag)\n\t\t\t{\n\t\t\t\tyield return number;\n\t\t\t}\n\t\t\tstart++;\n\t\t}\n\t}\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading;\n// namespace and class declaration omitted for clarity\nConsole.WriteLine(\"Start primes\");\nforeach (var n in new Primes(1000000))\u00a0\u00a0\u00a0{\u00a0\u00a0/* ...\u00a0\u00a0*/ }\nConsole.WriteLine(\"End primes\"); // the wait is too long!\n```", "```cs\nprivate void Worker(object param)\n{\n\u00a0\u00a0\u00a0\u00a0PrintThreadInfo(Thread.CurrentThread);\n\u00a0\u00a0\u00a0\u00a0foreach (var n in new Primes(1000000))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(100);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Computation ended!\");\n}\n```", "```cs\nConsole.WriteLine(\"Start primes\");\nPrintThreadInfo(Thread.CurrentThread);\nvar t1 = new Thread(Worker);\n//t1.IsBackground = true; // try with/without this line\nt1.Start();\nConsole.WriteLine(\"Primes calculation is happening in background\");\n```", "```cs\nprivate void PrintThreadInfo(Thread t)\n{\n\u00a0\u00a0\u00a0\u00a0var sb = new StringBuilder();\n\u00a0\u00a0\u00a0\u00a0var state = t.ThreadState;\n\u00a0\u00a0\u00a0\u00a0sb.Append($\"Id:{t.ManagedThreadId} Name:{t.Name} State:{state} \");\n\u00a0\u00a0\u00a0\u00a0if ((state & (ThreadState.Stopped | ThreadState.Unstarted)) == 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sb.Append($\"Priority:{t.Priority} IsBackground:{t.IsBackground}\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine(sb.ToString());\n}\n```", "```cs\nStart primes\nId:1 Name: State:Running Priority:Normal IsBackground:False\nPrimes calculation is happening in background\nId:5 Name: State:Running Priority:Normal IsBackground:False\n```", "```cs\nvar threads = System.Diagnostics.Process.GetCurrentProcess().Threads;\nvar processThread = threads\n\u00a0\u00a0\u00a0\u00a0.OfType<System.Diagnostics.ProcessThread>()\n\u00a0\u00a0\u00a0\u00a0.Where(pt => pt.Id == GetCurrentThreadId())\n\u00a0\u00a0\u00a0\u00a0.Single();\nprocessThread.ProcessorAffinity = (IntPtr)2; // CPU 2\n```", "```cs\n[DllImport(\"Kernel32.dll\")]\nprivate static extern int GetCurrentThreadId();\n```", "```cs\nConsole.WriteLine(\"Start primes\");\nPrintThreadInfo(Thread.CurrentThread);\nThreadPool.QueueUserWorkItem(Worker);\nConsole.WriteLine(\"Primes calculation is happening in background\");\n```", "```cs\npublic void PingPong()\n{\n\u00a0\u00a0\u00a0\u00a0bool quit = false;\n\u00a0\u00a0\u00a0\u00a0var ping = new ManualResetEventSlim(false);\n\u00a0\u00a0\u00a0\u00a0var pong = new ManualResetEventSlim(false);\n\u00a0\u00a0\u00a0\u00a0ThreadPool.QueueUserWorkItem(_ =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Ping thread: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (!quit)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pong.Wait();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pong.Reset();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Ping\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(1000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ping.Set();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0ThreadPool.QueueUserWorkItem(_ =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Pong thread: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while (!quit)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ping.Wait();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ping.Reset();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Pong\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(1000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pong.Set();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0pong.Set();\n\u00a0\u00a0\u00a0\u00a0Console.ReadKey();\n\u00a0\u00a0\u00a0\u00a0quit = true;\n}\n```", "```cs\n|\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Method |\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Mean |\u00a0\u00a0\u00a0\u00a0\u00a0Error |\u00a0\u00a0\u00a0\u00a0StdDev |\n|---------------- |------------:|----------:|----------:|\n| KernelModeEvent | 1,892.11 ns | 24.463 ns | 22.883 ns |\n|\u00a0\u00a0\u00a0UserModeEvent |\u00a0\u00a0\u00a0\u00a025.67 ns |\u00a0\u00a00.320 ns |\u00a0\u00a00.283 ns |\n```", "```cs\npublic void WaitMultiple()\n{\n\u00a0\u00a0\u00a0\u00a0var one = new ManualResetEvent(false);\n\u00a0\u00a0\u00a0\u00a0var two = new ManualResetEvent(false);\n\u00a0\u00a0\u00a0\u00a0ThreadPool.QueueUserWorkItem(_ =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(3000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0one.Set();\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0ThreadPool.QueueUserWorkItem(_ =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(2000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0two.Set();\n\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0int signaled = WaitHandle.WaitAny(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new WaitHandle[] { one, two }, 500);\n\u00a0\u00a0\u00a0\u00a0switch(signaled)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"One was set\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Two was set\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case WaitHandle.WaitTimeout:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"Time expired\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nint _shared;\nint Shared\n{\n\u00a0\u00a0\u00a0\u00a0get => _shared;\n\u00a0\u00a0\u00a0\u00a0set { Thread.Sleep(1); _shared = value; }\n}\nManualResetEvent evt = new ManualResetEvent(false);\nobject sync = new object();\n```", "```cs\npublic void SharedResource()\n{\n\u00a0\u00a0\u00a0\u00a0Shared = 0;\n\u00a0\u00a0\u00a0\u00a0var loop = 100;\n\u00a0\u00a0\u00a0\u00a0var threads = new List<Thread>();\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < loop; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var t = new Thread(() =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0evt.WaitOne();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//lock (sync)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Shared++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.Start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads.Add(t);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0evt.Set(); // make all threads start together\n\u00a0\u00a0\u00a0\u00a0foreach (var t in threads)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.Join();\u00a0\u00a0\u00a0// wait for the thread to finish\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"actual:{Shared}, expected:{loop}\");\n}\n```", "```cs\nInterlocked.Increment(ref _shared);\n```", "```cs\npublic int ReadLength(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0string content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0return content.Length;\n}\n```", "```cs\nTask<string> content = File.ReadAllTextAsync(filename);\n```", "```cs\npublic Task<int> ReadLengthAsync(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0Task<int> lengthTask = File.ReadAllTextAsync(filename)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ContinueWith(t => t.Result.Length);\n\u00a0\u00a0\u00a0\u00a0return lengthTask;\n}\n```", "```cs\npublic async Task<int> ReadLengthAsync(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0string content = await File.ReadAllTextAsync(filename);\n\u00a0\u00a0\u00a0\u00a0return content.Length;\n}\n```", "```cs\nFunc<int, int, Task<int>> adder = \n\u00a0\u00a0\u00a0\u00a0async (a, b) => await AddAsync(a, b);\n```", "```cs\npublic Task WriteEmptyJsonObjectAsync(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0File.WriteAllText(filename, \"{}\");\n\u00a0\u00a0\u00a0\u00a0return Task.CompletedTask;\n}\n```", "```cs\npublic Task<int> AddAsync(int a, int b)\n{\n\u00a0\u00a0\u00a0\u00a0return Task.FromResult(a + b);\n}\n```", "```cs\npublic ValueTask<int> AddAsync(int a, int b)\n{\n\u00a0\u00a0\u00a0\u00a0return new ValueTask<int>(a + b);\n}\n```", "```cs\npublic Task<int> ReadLengthAsync(string filename)\n{\n\u00a0\u00a0\u00a0\u00a0return Task.Run<int>(() =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var content = File.ReadAllText(filename);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return content.Length;\n\u00a0\u00a0\u00a0\u00a0});\n}\n```", "```cs\n    var t = new Task(() => Thread.Sleep(30000),\n    \u00a0\u00a0\u00a0\u00a0TaskCreationOptions.LongRunning);\n    t.Start();\n    ```", "```cs\nvoid Button_Click(object sender, RoutedEventArgs e) { ... }\n```", "```cs\nasync void Button_Click(object sender, RoutedEventArgs e)\n{\n\u00a0\u00a0\u00a0\u00a0await File.WriteAllTextAsync(\"log.txt\", \"something\");\n\u00a0\u00a0\u00a0\u00a0// ... other code\n}\n```", "```cs\nvoid Button_Click(object sender, RoutedEventArgs e)\n{\n\u00a0\u00a0\u00a0\u00a0File.WriteAllTextAsync(\"log.txt\", \"something\");\n}\n```", "```cs\npublic Task<int> CrashBeforeAsync()\n{\n\u00a0\u00a0\u00a0\u00a0throw new Exception(\"Boom\");\n}\npublic Task<int> CrashAfterAsync()\n{\n\u00a0\u00a0\u00a0\u00a0return Task.FromResult(0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ContinueWith<int>(t => throw new Exception(\"Boom\"));\n}\n```", "```cs\npublic Task<int> HandleCrashBeforeAsync()\n{\n\u00a0\u00a0\u00a0\u00a0Task<int> resultTask;\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resultTask = CrashBeforeAsync();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { throw; }\n\u00a0\u00a0\u00a0\u00a0return resultTask;\n}\n```", "```cs\npublic async Task<int> HandleCrashAfterAsync()\n{\n\u00a0\u00a0\u00a0\u00a0Task<int> resultTask = CrashAfterAsync();\n\u00a0\u00a0\u00a0\u00a0int result;\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = await resultTask;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { throw; }\n\u00a0\u00a0\u00a0\u00a0return result;\n}\n```", "```cs\npublic Task<int> HandleCrashAfter2Async()\n{\n\u00a0\u00a0\u00a0\u00a0Task<int> resultTask = CrashAfterAsync();\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return resultTask.ContinueWith<int>(t =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (t.IsCompletedSuccessfully) return t.Result;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(t.Exception.InnerException is OverflowException)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return -1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw t.Exception.InnerException;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception) { throw; }\n}\n```", "```cs\npublic Task<int> CrashAfterAsync() =>\n\u00a0\u00a0\u00a0\u00a0Task.FromException<int>(new Exception(\"Boom\"));\n```", "```cs\npublic async Task CancellingTask()\n{\n\u00a0\u00a0\u00a0\u00a0CancellationTokenSource cts2 = new\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CancellationTokenSource(TimeSpan.FromSeconds(2));\n\u00a0\u00a0\u00a0\u00a0var tok2 = cts2.Token;\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await WorkForever1Async(tok2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//await WorkForever2Async(tok2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//await WorkForever3Async(tok2);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"let's continue\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (TaskCanceledException err)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(err.Message);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic async Task WorkForever1Async(\n\u00a0\u00a0\u00a0\u00a0CancellationToken ct = default(CancellationToken))\n{\n\u00a0\u00a0\u00a0\u00a0while (true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(5000, ct);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nA task was canceled.\n```", "```cs\npublic Task WorkForever2Async(\n\u00a0\u00a0\u00a0\u00a0CancellationToken ct = default(CancellationToken))\n{\n\u00a0\u00a0\u00a0\u00a0while (true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.Sleep(5000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ct.IsCancellationRequested)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Task.FromCanceled(ct);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nA task was canceled.\n```", "```cs\npublic async Task WorkForever3Async(\n\u00a0\u00a0\u00a0\u00a0CancellationToken ct = default(CancellationToken))\n{\n\u00a0\u00a0\u00a0\u00a0while (true)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(5000);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (ct.IsCancellationRequested) return;\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\nlet's continue\n```", "```cs\npublic async Task Load(IProgress<int> progress = null)\n{\n\u00a0\u00a0\u00a0\u00a0var steps = 30;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i < steps; i++)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.Delay(300);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0progress?.Report((i + 1) * 100 / steps);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic class ConsoleProgress : IProgress<int>\n{\n\u00a0\u00a0\u00a0\u00a0void IProgress<int>.Report(int value) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.Write($\"{value}%\u00a0\u00a0\");\n}\n```", "```cs\nawait test.Load(new ConsoleProgress());\n```", "```cs\n3%\u00a0\u00a06%\u00a0\u00a010%\u00a0\u00a013%\u00a0\u00a016%\u00a0\u00a020%\u00a0\u00a023%\u00a0\u00a026%\u00a0\u00a030%\u00a0\u00a033%\u00a0\u00a036%\u00a0\u00a040%\u00a0\u00a043%  46%\u00a0\u00a050%\u00a0\u00a053%\u00a0\u00a056%\u00a0\u00a060%\u00a0\u00a063%\u00a0\u00a066%\u00a0\u00a070%\u00a0\u00a073%\u00a0\u00a076%\u00a0\u00a080%\u00a0\u00a083%\u00a0\u00a086%\u00a0\u00a090%\u00a0\u00a093%\u00a0\u00a096%\u00a0\u00a0100%\n```", "```cs\npublic async Task<byte[]> GetResourceAsync(string uri)\n{\n\u00a0\u00a0\u00a0\u00a0using var client = new HttpClient();\n\u00a0\u00a0\u00a0\u00a0using var response = await client.GetAsync(uri);\n\u00a0\u00a0\u00a0\u00a0response.EnsureSuccessStatusCode();\n\u00a0\u00a0\u00a0\u00a0return await response.Content.ReadAsByteArrayAsync();\n}\n```", "```cs\npublic async Task NeedAll()\n{\n\u00a0\u00a0\u00a0\u00a0var uri = \"https://picsum.photos/200\";\n\u00a0\u00a0\u00a0\u00a0Task<byte[]>[] tasks = Enumerable.Range(0, 10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(_ => GetResourceAsync(uri))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToArray();\n\u00a0\u00a0\u00a0\u00a0Task allTask = Task.WhenAll(tasks);\n\u00a0\u00a0\u00a0\u00a0try\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await allTask;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0catch (Exception)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\"One or more downloads failed\");\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0foreach (var completedTask in tasks)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$\"New image: {completedTask.Result.Length}\");\n}\n```", "```cs\nNew image: 6909\nNew image: 3846\nNew image: 8413\nNew image: 9000\nNew image: 7057\nNew image: 8565\nNew image: 6617\nNew image: 8720\nNew image: 4107\nNew image: 6763\n```", "```cs\npublic async Task NeedAny()\n{\n\u00a0\u00a0\u00a0\u00a0var sw = new Stopwatch();\n\u00a0\u00a0\u00a0\u00a0sw.Start();\n\u00a0\u00a0\u00a0\u00a0var uri = \"https://picsum.photos/200\";\n\u00a0\u00a0\u00a0\u00a0Task<byte[]>[] tasks = Enumerable.Range(0, 10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.Select(_ => GetResourceAsync(uri))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.ToArray();\n\u00a0\u00a0\u00a0\u00a0while (tasks.Length > 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await Task.WhenAny(tasks);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var elapsed = sw.ElapsedMilliseconds;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var completed = tasks.Where(t => t.IsCompleted).ToArray();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach (var completedTask in completed)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"{elapsed} New image: {completedTask.Result.Length}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tasks = tasks.Where(t => !t.IsCompletedSuccessfully).ToArray();\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\n368 New image: 9915\n368 New image: 6032\n419 New image: 6486\n452 New image: 9810\n471 New image: 7030\n514 New image: 10009\n514 New image: 10660\n593 New image: 6871\n658 New image: 2738\n12850 New image: 6072\nThe last image took a lot of time to download, probably because the online service throttles the requests. Using WhenAll, we would have to wait about 13 seconds before getting them all. Instead, we could start processing as soon as each image was available.\n```", "```cs\nawait Task.WhenAll(Task.Delay(100), Task.WhenAny(tasks));\n```", "```cs\n345 New image: 8416\n345 New image: 7315\n345 New image: 8237\n345 New image: 6391\n345 New image: 5477\n457 New image: 9592\n457 New image: 3922\n457 New image: 8870\n563 New image: 3695\n```", "```cs\npublic class DeletionNotifier : IDisposable\n{\n\u00a0\u00a0\u00a0private TaskCompletionSource<FileSystemEventArgs> _tcs;\n\u00a0\u00a0\u00a0private FileSystemWatcher _watcher;\n\u00a0\u00a0\u00a0public DeletionNotifier()\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var path = Path.GetFullPath(\".\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Observing changes in path: {path}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher = new FileSystemWatcher(path, \"*.txt\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.Deleted += (s, e) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_tcs.SetResult(e);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.Error += (s, e) =>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_tcs.SetException(e.GetException());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0}\n\u00a0\u00a0public Task<FileSystemEventArgs> WhenDeleted()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0_tcs = new TaskCompletionSource<FileSystemEventArgs>();\n\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = true;\n\u00a0\u00a0\u00a0\u00a0return _tcs.Task;\n\u00a0\u00a0}\n\u00a0\u00a0public void Dispose() => _watcher.Dispose();\n}\n```", "```cs\nvar dn = new DeletionNotifier();\nvar deleted = await dn.WhenDeleted();\nConsole.WriteLine($\"Deleted: {deleted.Name}\");\n```", "```cs\npublic class DeletionNotifier : IDisposable\n{\n\u00a0\u00a0private TaskCompletionSource<FileSystemEventArgs> _tcs;\n\u00a0\u00a0private FileSystemWatcher _watcher;\n\u00a0\u00a0private ConcurrentQueue<FileSystemEventArgs> _queue;\n\u00a0\u00a0private Exception _error;\n\u00a0\u00a0public DeletionNotifier()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0var path = Path.GetFullPath(\".\");\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Observing changes in path: {path}\");\n\u00a0\u00a0\u00a0\u00a0_queue = new ConcurrentQueue<FileSystemEventArgs>();\n\u00a0\u00a0\u00a0\u00a0_watcher = new FileSystemWatcher(path, \"*.txt\");\n\u00a0\u00a0\u00a0\u00a0_watcher.Deleted += (s, e) =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_queue.Enqueue(e);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_tcs.TrySetResult(e);\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0_watcher.Error += (s, e) =>\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_error = e.GetException();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_tcs.TrySetException(_error);\n\u00a0\u00a0\u00a0\u00a0};\n\u00a0\u00a0\u00a0\u00a0_watcher.EnableRaisingEvents = true;\n\u00a0\u00a0}\n\u00a0\u00a0public Task<FileSystemEventArgs> WhenDeleted()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0if (_queue.TryDequeue(out FileSystemEventArgs fsea))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Task.FromResult(fsea);\n\u00a0\u00a0\u00a0\u00a0if (_error != null)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Task.FromException<FileSystemEventArgs>(_error);\n\u00a0\u00a0\u00a0\u00a0_tcs = new TaskCompletionSource<FileSystemEventArgs>();\n\u00a0\u00a0\u00a0\u00a0return _tcs.Task;\n\u00a0\u00a0}\n\u00a0\u00a0public void Dispose() => _watcher.Dispose();\n}\n```", "```cs\npublic async Task AsyncTest1()\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0await Task.Delay(100);\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0await Task.Delay(100);\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n}\n```", "```cs\npublic async Task AsyncLoop()\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0byte[] data;\n\u00a0\u00a0\u00a0\u00a0while((data = await GetNextAsync()).Length > 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// process data\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```cs\npublic async Task AsyncLoop()\n{\n\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0byte[] data;\n\u00a0\u00a0\u00a0\u00a0while((data = await GetNextAsync().ConfigureAwait(false)).Length > 0)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Console.WriteLine($\"Id: {Thread.CurrentThread.ManagedThreadId}\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// process data\n\u00a0\u00a0\u00a0\u00a0}\n} \n```"]