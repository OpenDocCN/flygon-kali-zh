- en: Docker Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 安全
- en: 'In this chapter, we will take a look at Docker security, a topic at the forefront
    of everyone''s mind these days. We will split the chapter up into the following
    five sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下 Docker 安全，这是当今所有人都关注的话题。我们将把本章分成以下五个部分：
- en: Container considerations
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器考虑
- en: Docker commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 命令
- en: Best practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: The Docker Bench Security application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Bench Security 应用程序
- en: Third-party security services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方安全服务
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using Docker on the desktop, and we will be using
    Docker Machine to launch a Docker host in the cloud. Like in the previous chapters,
    I will be using my preferred operating system, which is macOS. As previously, the
    Docker commands that we will run will work on all three of the operating systems
    that we have installed Docker on so far. However, some of the supporting commands,
    which will be few and far between, may only apply to macOS and Linux based operating
    systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在桌面上使用 Docker，并使用 Docker Machine 在云中启动 Docker 主机。与之前的章节一样，我将使用我偏好的操作系统，即
    macOS。与之前一样，我们将运行的 Docker 命令将适用于迄今为止我们安装 Docker 的三种操作系统。然而，一些支持命令可能只适用于基于 macOS
    和 Linux 的操作系统，而且数量很少。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2AnEv5G](http://bit.ly/2AnEv5G)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2AnEv5G](http://bit.ly/2AnEv5G)'
- en: Container considerations
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器考虑
- en: When Docker was first released, there was a lot of talk about Docker versus
    virtual machines. I remember reading articles in magazines, commenting on threads
    on Reddit, and reading endless blog posts. In the early days of the Docker alpha
    and beta versions, people used to approach Docker containers like virtual machines,
    because there weren't really any other points of reference, and we viewed them
    as tiny VMs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 首次发布时，有很多关于 Docker 与虚拟机的讨论。我记得在杂志上读到的文章，评论 Reddit 上的帖子，以及读了无数的博客文章。在
    Docker 的 alpha 和 beta 版本的早期，人们习惯将 Docker 容器视为虚拟机，因为当时没有其他参考点，我们将它们视为微型虚拟机。
- en: In the past, I would enable SSH, run multiple processes in containers, and even
    create my container images by launching a container and running the commands to
    install my software stack. This is something that we discussed in [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml)*,
    Building Container Images*; you should never do it, as it is considered a bad
    practice.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我会启用 SSH，在容器中运行多个进程，甚至通过启动容器并运行安装软件堆栈的命令来创建我的容器映像。这是我们在第 2 章《构建容器映像》中讨论过的内容；你绝对不应该这样做，因为这被认为是一种不良实践。
- en: So, rather than discussing containers versus virtual machines, let's look at
    some of the considerations that you need to make when running containers, rather
    than virtual machines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与其讨论容器与虚拟机的区别，不如看看在运行容器而不是虚拟机时需要考虑的一些因素。
- en: The advantages
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优势
- en: When you start a Docker container, the Docker Engine does a lot of work behind
    the scenes. One of the tasks that the Docker Engine performs when launching your
    containers is setting up namespaces and control groups. What does that mean? By
    setting up namespaces, Docker keeps the processes isolated in each container -
    not only from other containers, but also from the host system. The control groups
    ensure that each container gets its own share of items, such as CPU, memory, and
    disk I/O. More importantly, they ensure that one container doesn't exhaust all
    of the resources on a given Docker host.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动Docker容器时，Docker引擎在幕后进行了大量工作。在启动容器时，Docker引擎执行的任务之一是设置命名空间和控制组。这是什么意思？通过设置命名空间，Docker将每个容器中的进程隔离
    - 不仅与其他容器隔离，而且与主机系统隔离。控制组确保每个容器获得自己的CPU、内存和磁盘I/O等资源份额。更重要的是，它们确保一个容器不会耗尽给定Docker主机上的所有资源。
- en: As you saw in previous chapters, being able to launch your containers into a
    Docker controlled network means that you can isolate your containers at the application
    level; all of the containers for Application A will not have any access, at the
    network layer, to the containers for Application B.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前几章中看到的，能够将容器启动到Docker控制的网络中意味着您可以在应用程序级别隔离您的容器；应用程序A的所有容器在网络层面上都无法访问应用程序B的容器。
- en: Additionally, this network isolation can run on a single Docker host by using
    the default network driver, or it can span multiple Docker hosts by using Docker
    Swarm's built-in, multi-host networking driver, or the Weave Net driver from Weave.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这种网络隔离可以在单个Docker主机上运行，使用默认的网络驱动程序，或者可以通过使用Docker Swarm的内置多主机网络驱动程序，或者Weave的Weave
    Net驱动程序跨多个Docker主机。
- en: Lastly, what I consider one of the biggest advantages of Docker over a typical
    virtual machine is that you shouldn't have to log in to the container. Docker
    is trying its hardest to keep you from needing to log in to a container to manage
    the process that it is running. With commands such as `docker container exec`,
    `docker container top`, `docker container logs`, and `docker container stats`,
    you can do everything that you need to do, without exposing any more services
    than you have to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我认为Docker相对于典型虚拟机的最大优势之一是您不应该需要登录到容器中。 Docker正在尽最大努力让您不需要登录到容器中来管理它正在运行的进程。通过诸如`docker
    container exec`、`docker container top`、`docker container logs`和`docker container
    stats`之类的命令，您可以做任何需要做的事情，而无需暴露更多的服务。
- en: Your Docker host
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的Docker主机
- en: When you are dealing with virtual machines, you can control who has access to
    which virtual machine. Let's suppose that you only want User 1, who is a developer,
    to have access to the development VMs. However, User 2 is an operator who is responsible
    for both the development and production environments, so he needs access to all
    of the VMs. Most virtual machine management tools allow you to grant role-based
    access to your VMs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您处理虚拟机时，您可以控制谁可以访问哪个虚拟机。假设您只希望开发人员User 1访问开发虚拟机。然而，User 2是负责开发和生产环境的运营商，因此他需要访问所有虚拟机。大多数虚拟机管理工具允许您为虚拟机授予基于角色的访问权限。
- en: With Docker, you have a little disadvantage, because whoever has access to the
    Docker Engine on your Docker host, either through being granted sudo access or
    by having their user added to the Docker Linux group, has access to every Docker
    container that you are running. They can run new containers, they can stop existing
    containers, and they can delete images, as well. Be careful with who you grant
    permission to access the Docker Engine on your hosts. They essentially hold the
    keys to the kingdom, with respect to all of your containers. Knowing this, it
    is recommended to use Docker hosts only for Docker; keep other services separate
    from your Docker hosts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker时，您有一点劣势，因为无论是通过被授予sudo访问权限还是通过将其用户添加到Docker Linux组，只要有人可以访问您的Docker主机上的Docker引擎，他们就可以访问您运行的每个Docker容器。他们可以运行新的容器，停止现有的容器，也可以删除镜像。小心授予谁访问您主机上的Docker引擎的权限。他们基本上掌握了您所有容器的王国之钥。鉴于此，建议仅将Docker主机用于Docker；将其他服务与您的Docker主机分开。
- en: Image trust
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像信任
- en: If you are running virtual machines, you will most likely be setting them up
    yourself, from scratch. It's likely that, due to the size of the download (and
    also the effort in launching it), you will not download a prebuilt machine image
    that some random person on the internet created. Typically, if you were to do
    this, it would be a prebuilt virtual appliance from a trusted software vendor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行虚拟机，您很可能会自己设置它们，从头开始。由于下载的大小（以及启动的工作量），您可能不会下载某个随机人在互联网上创建的预构建机器镜像。通常情况下，如果您这样做，那将是来自受信任软件供应商的预构建虚拟设备。
- en: So, you will be aware of what is inside of the virtual machine and what isn't,
    as you were responsible for building and maintaining it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您将了解虚拟机内部的内容和不了解的内容，因为您负责构建和维护它。
- en: 'Part of the appeal of Docker is its ease of use; however, this ease of use
    can make it really easy to ignore a quite crucial security consideration: Do you
    know what it is running inside of your container?'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker吸引人的部分原因是其易用性；然而，这种易用性可能会让您很容易忽视一个非常关键的安全考虑：您知道容器内部在运行什么吗？
- en: We have already touched upon **image trust** in earlier chapters. For example,
    we spoke about not publishing or downloading images that haven't been defined
    using Dockerfiles, and not embedding custom code or secrets (and so on) directly
    into an image that you will be pushing to the Docker Hub.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在早期章节中提到了**镜像信任**。例如，我们谈到了不要发布或下载未使用Dockerfile定义的镜像，也不要直接将自定义代码或秘密信息等嵌入到您将要推送到Docker
    Hub的镜像中。
- en: While containers have the protection of namespaces, control groups, and network
    isolation, we discussed how a poorly judged image download can introduce security
    concerns and risk into your environment. For example, a perfectly legitimate container
    running an unpatched piece of software can introduce risk to the availability
    of your application and data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 容器虽然有命名空间、控制组和网络隔离的保护，但我们讨论了一个错误判断的镜像下载可能会引入安全问题和风险到您的环境中。例如，一个完全合法的容器运行一个未打补丁的软件可能会给您的应用程序和数据的可用性带来风险。
- en: Docker commands
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker命令
- en: Let's take a look at the Docker commands that can be used to help tighten up
    security, as well as view information about the images that you might be using.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Docker命令，可以用来加强安全性，以及查看您可能正在使用的镜像的信息。
- en: There are two commands that we will focus on. The first will be the `docker
    container run` command, so that you can see some of the items that you can use
    to your advantage with this command. Secondly, we will take a look at the `docker
    container diff` command, which you can use to view what has been done with the
    image that you are planning to use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于两个命令。第一个将是`docker container run`命令，这样你就可以看到一些你可以利用这个命令的项目。其次，我们将看一下`docker
    container diff`命令，你可以用它来查看你计划使用的镜像做了什么。
- en: run command
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: run命令
- en: With respect to the `docker run` command, we will mainly focus on the option
    that allows you to set everything inside the container as read-only, instead of
    a specified directory or volume. This helps to limit the amount of damage that
    can be caused by malicious applications that could also hijack a vulnerable application
    by updating its binaries.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`docker run`命令，我们主要关注的是允许你将容器内的所有内容设置为只读的选项，而不是指定目录或卷。这有助于限制恶意应用程序可能造成的损害，它们也可能通过更新其二进制文件来劫持一个易受攻击的应用程序。
- en: 'Let''s take a look at how to launch a read-only container, and then break down
    what it does, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何启动一个只读容器，然后分解它的功能，如下所示：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we are running a MySQL container and setting the entire container as
    read-only, except for the following folders:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在运行一个MySQL容器，并将整个容器设置为只读，除了以下文件夹：
- en: '`/var/lib/mysql`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/lib/mysql`'
- en: '`/var/run/mysqld`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/var/run/mysqld`'
- en: '`/tmp`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`'
- en: These will be created as three separate volumes, and then mounted as read/write.
    If you do not add these volumes, then MySQL will not be able to start, as it needs
    read/write access to be able to create the socket file in `/var/run/mysqld`, some
    temporary files in `/tmp`, and, finally, the databases themselves, in `/var/lib/mysql`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将被创建为三个单独的卷，然后挂载为读/写。如果你不添加这些卷，那么MySQL将无法启动，因为它需要读/写访问权限才能在`/var/run/mysqld`中创建套接字文件，在`/tmp`中创建一些临时文件，最后，在`/var/lib/mysql`中创建数据库本身。
- en: 'Any other location inside of the container won''t allow you to write anything
    in it. If you tried to run the following, it would fail:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内的任何其他位置都不允许你在其中写任何东西。如果你尝试运行以下命令，它将失败：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command would give you the following message:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将给你以下消息：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This can be extremely helpful if you want to control where the containers can
    write to (or not write to). Be sure to use this wisely. Test thoroughly, as there
    can be consequences when the applications can't write to certain locations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想控制容器可以写入的位置（或者不能写入的位置），这可能非常有帮助。一定要明智地使用它。进行彻底测试，因为当应用程序无法写入某些位置时可能会产生后果。
- en: 'Similar to the previous command, `docker container run`, where we set everything
    to read-only (except for a specified volume), we can do the opposite and set just
    a single volume (or more, if you use more `-v` switches) to read-only. The thing
    to remember about volumes is that when you use a volume and mount it into a container,
    it will mount as an empty volume over the top of the directory inside of the container,
    unless you use the `--volumes-from` switch or add data to the container in some
    other way after it has been launched:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于前一个命令`docker container run`，我们将所有内容设置为只读（除了指定的卷），我们可以做相反的操作，只设置一个卷（或者如果你使用更多的`-v`开关，则设置更多卷）为只读。关于卷的一点要记住的是，当你使用一个卷并将其挂载到容器中时，它将作为空卷挂载到容器内的目录上，除非你使用`--volumes-from`开关或在启动后以其他方式向容器添加数据：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will mount `/local/path/to/html/` from the Docker host to `/var/www/html/`,
    and will set it to read-only. This can be useful if you don't want a running container
    to write to a volume, to keep the data or configuration files intact.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把Docker主机上的`/local/path/to/html/`挂载到`/var/www/html/`，并将其设置为只读。如果您不希望运行的容器写入卷，以保持数据或配置文件的完整性，这可能会很有用。
- en: diff command
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: diff命令
- en: Let's take another look at the `docker diff` command; since it relates to the
    security aspects of the containers, you may want to use the images that are hosted
    on Docker Hub or other related repositories.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一下`docker diff`命令；由于它涉及容器的安全方面，您可能希望使用托管在Docker Hub或其他相关存储库上的镜像。
- en: Remember that whoever has access to your Docker host and the Docker daemon has
    access to all of your running Docker containers. That being said, if you don't
    have monitoring in place, someone could be executing commands against your containers
    and doing malicious things.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，谁拥有对您的Docker主机和Docker守护程序的访问权限，谁就可以访问您所有正在运行的Docker容器。也就是说，如果您没有监控，某人可能会对您的容器执行命令并进行恶意操作。
- en: 'Let''s take a look at the MySQL container that we launched in the previous
    section:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在上一节中启动的MySQL容器：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will notice that no files are returned. Why is that?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到没有返回任何文件。为什么呢？
- en: Well, the `diff` command tells you the changes that have been made to the image
    since the container was launched. In the previous section, we launched the MySQL
    container with the image read-only, and then mounted volumes to where we knew
    MySQL would need to be able to read and write - meaning that there are no file
    differences between the image that we downloaded and the container that we are
    running.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，`diff`命令告诉您自容器启动以来对镜像所做的更改。在上一节中，我们使用只读镜像启动了MySQL容器，然后挂载了卷到MySQL需要读写的位置——这意味着我们下载的镜像和正在运行的容器之间没有文件差异。
- en: 'Stop and remove the MySQL container, then prune the volumes by running the
    following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 停止并删除MySQL容器，然后运行以下命令清理卷：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, launch the same container again, minus the read-only flag and volumes;
    this gives us a different story, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次启动相同的容器，去掉只读标志和卷；这会给我们带来不同的情况，如下所示：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, there were two folders created and several files added:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，创建了两个文件夹并添加了几个文件：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is a great way to spot anything untoward or unexpected that may be going
    on within your container.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是发现容器内可能发生的任何不当或意外情况的好方法。
- en: Best practices
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: In this section, we will look at the best practices when it comes to Docker,
    as well as the *Center for Internet Security* guide, to properly secure all aspects
    of your Docker environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究在使用Docker时的最佳实践，以及*互联网安全中心*指南，以正确地保护Docker环境的所有方面。
- en: Docker best practices
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker最佳实践
- en: 'Before we dive into the Center for Internet Security guide, let''s go over
    some of the best practices for using Docker, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究互联网安全中心指南之前，让我们回顾一下使用Docker的一些最佳实践，如下所示：
- en: '**One application per container**: Spread out your applications to one per
    container. Docker was built for this, and it makes everything easier, at the end
    of the day. The isolation that we discussed earlier is where this is key.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个容器一个应用程序**：将您的应用程序分散到每个容器中。Docker就是为此而构建的，这样做会让一切变得更容易。我们之前讨论的隔离就是关键所在。'
- en: '**Only install what you need**: As we already covered in previous chapters,
    only install what you need in your container images. If you have to install more
    to support the one process your container should be running, I would recommend
    that you review the reasons why. This not only keeps your images small and portable,
    but it also reduces the potential attack surface.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**只安装所需内容**：正如我们在之前的章节中所介绍的，只在容器镜像中安装所需的内容。如果必须安装更多内容来支持容器应该运行的一个进程，我建议你审查原因。这不仅使你的镜像小而且便携，还减少了潜在的攻击面。'
- en: '**Review who has access to your Docker hosts**: Remember that whoever has root
    or sudo access to your Docker hosts has access to manipulate all of the images
    and containers on the host.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查谁可以访问你的Docker主机**：请记住，拥有Docker主机的root或sudo访问权限的人可以访问和操作主机上的所有镜像和容器。'
- en: '**Use the latest version**: Always use the latest version of Docker. This will
    ensure that all security holes have been patched, and that you have the latest
    features, as well. While fixing security issues, keeping up to date using the
    community version may introduce problems caused by changes in functionality or
    new features. If this is a concern for you, then you might want to look at the
    LTS Enterprise versions available from Docker, and also Red Hat.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用最新版本**：始终使用最新版本的Docker。这将确保所有安全漏洞都已修补，并且你拥有最新的功能。在修复安全问题的同时，使用社区版本保持最新可能会引入由功能或新特性变化引起的问题。如果这对你是一个问题，那么你可能需要查看Docker提供的LTS企业版本，以及Red
    Hat。'
- en: '**Use the resources**: Use the resources available if you need help. The community
    within Docker is huge and immensely helpful. Use their website, documentation,
    and the Slack chat rooms to your advantage when planning your Docker environment
    and assessing platforms. For more information on how to access Slack and other
    parts of the community, see [Chapter 14](00a3f458-ae41-4d12-8b56-9cad282a58f0.xhtml)*,
    Next Steps with Docker*.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用资源：如果需要帮助，请利用可用的资源。Docker社区庞大而乐于助人。在规划Docker环境和评估平台时，利用他们的网站、文档和Slack聊天室会对你有所帮助。有关如何访问Slack和社区其他部分的更多信息，请参阅《第14章》，《Docker的下一步》。
- en: The Center for Internet Security benchmark
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网安全中心基准
- en: The **Center for Internet Security (CIS)** is an independent, non-profit organization,
    whose goal is to provide a secure online experience. They publish benchmarks and
    controls, which are considered best practices for all aspects of IT.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网安全中心（CIS）**是一个独立的非营利组织，其目标是提供安全的在线体验。他们发布的基准和控制被认为是IT各个方面的最佳实践。'
- en: The CIS benchmark for Docker is available for download, for free. You should
    note that it is currently a 230-page PDF, released under the Creative Commons
    license, and it covers Docker CE 17.06 and later.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的CIS基准可免费下载。你应该注意，它目前是一个230页的PDF，根据知识共享许可发布，涵盖了Docker CE 17.06及更高版本。
- en: 'You will be referring to this guide when you actually run the scan (in the
    next section of this chapter) and get results back as to what needs to (or should
    be) fixed. The guide is broken down into the following sections:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你实际运行扫描（在本章的下一部分）并获得需要修复的结果时，你将参考本指南。该指南分为以下几个部分：
- en: The host configuration
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: The Docker daemon configuration
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置
- en: The Docker daemon configuration files
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置文件
- en: Container images/runtime
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像/运行时
- en: Docker security operations
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker安全操作
- en: Host configuration
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机配置
- en: This part of the guide is about the configuration of your Docker hosts. This
    is the part of the Docker environment where all your containers run. Thus, keeping
    it secure is of the utmost importance. This is the first line of defense against
    attackers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的这一部分涵盖了您的Docker主机的配置。这是Docker环境中所有容器运行的部分。因此，保持其安全性至关重要。这是对抗攻击者的第一道防线。
- en: Docker daemon configuration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker守护程序配置
- en: This part of the guide has the recommendations that secure the running Docker
    daemon. Everything that you do to the Docker daemon configuration affects each
    and every container. These are the switches that you can attach to the Docker
    daemon that we saw previously, and to the items, you will see in the next section
    when we run through the tool.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的这一部分包含了保护正在运行的Docker守护程序的建议。您对Docker守护程序配置所做的每一项更改都会影响每个容器。这些是您可以附加到Docker守护程序的开关，我们之前看到的，以及下一节中我们运行工具时将看到的项目。
- en: Docker daemon configuration files
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker守护程序配置文件
- en: This part of the guide deals with the files and directories that the Docker
    daemon uses. This ranges from permissions to ownership. Sometimes, these areas
    may contain information that you don't want others to know about, which could
    be in a plain-text format.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的这一部分涉及Docker守护程序使用的文件和目录。这涵盖了从权限到所有权的各种方面。有时，这些区域可能包含您不希望他人知道的信息，这些信息可能以纯文本格式存在。
- en: Container images/runtime and build files
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器图像/运行时和构建文件
- en: This part of the guide contains both the information for securing the container
    images and the build files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的这一部分包含了保护容器图像和构建文件的信息。
- en: The first part contains images, cover base images, and the build files that
    were used. As we covered previously, you need to be sure about the images that
    you are using, not only for your base images, but for any aspect of your Docker
    experience. This section of the guide covers the items that you should follow
    while creating your own base images.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分包含图像、封面基础图像和使用的构建文件。正如我们之前所讨论的，您需要确保您使用的图像，不仅仅是基础图像，还包括Docker体验的任何方面。本指南的这一部分涵盖了在创建自己的基础图像时应遵循的条款。
- en: Container runtime
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器运行时
- en: This section was previously a part of a later section, but it has been moved
    into its own section in the CIS guide. The container runtime covers a lot of security-related
    items.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分以前是后面的一部分，但现在已经移动到CIS指南的自己的部分。容器运行时涵盖了许多与安全相关的项目。
- en: Be careful with the runtime variables that you are using. In some cases, attackers
    can use them to their advantage, when you think you are using them to your own
    advantage. Exposing too much in your containers, such as exposing application
    secrets and database connections as environment variables, can compromise the
    security of not only your container, but the Docker host and the other containers
    running on that host.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 小心使用运行时变量。在某些情况下，攻击者可以利用它们，而您可能认为您正在利用它们。在您的容器中暴露太多，例如将应用程序秘密和数据库连接暴露为环境变量，不仅会危及您的容器的安全性，还会危及Docker主机和在该主机上运行的其他容器的安全性。
- en: Docker security operations
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker安全操作
- en: This part of the guide covers the security areas that involve deployment; the
    items are more closely tied to Docker best practices. Because of this, it is best
    to follow these recommendations.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的这一部分涵盖了涉及部署的安全领域；这些项目与Docker最佳实践更紧密相关。因此，最好遵循这些建议。
- en: The Docker Bench Security application
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker基准安全应用程序
- en: 'In this section, we will cover the Docker Benchmark Security application that
    you can install and run. The tool will inspect the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍您可以安装和运行的Docker基准安全应用程序。该工具将检查以下内容：
- en: The host configuration
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: The Docker daemon configuration
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置
- en: The Docker daemon configuration files
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置文件
- en: Container images and build files
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像和构建文件
- en: Container runtime
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时
- en: The Docker security operations
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker安全操作
- en: Docker Swarm configuration
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm配置
- en: Look familiar? It should, as these are the same items that we reviewed in the
    previous section, only built into an application that will do a lot of the heavy
    lifting for you. It will show you what warnings arise within your configurations,
    and will provide information on other configuration items, and even the items
    that have passed the test.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来熟悉吗？应该是的，因为这些是我们在上一节中审查过的相同项目，只是构建成一个应用程序，它将为您做很多繁重的工作。它将向您显示配置中出现的警告，并提供有关其他配置项的信息，甚至通过了测试的项目。
- en: Now, we will look at how to run the tool, a live example, and what the output
    of the process means.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看一下如何运行该工具，一个实时示例，以及该过程的输出意味着什么。
- en: Running the tool on Docker for macOS and Docker for Windows
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Docker for macOS和Docker for Windows上运行该工具
- en: Running the tool is simple. It's already been packaged for us, inside of a Docker
    container. While you can get the source code and customize the output or manipulate
    it in some way (say, emailing the output), the default may be all that you need.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该工具很简单。它已经被打包到一个Docker容器中。虽然您可以获取源代码并自定义输出或以某种方式操纵它（比如，通过电子邮件输出），但默认情况可能是您所需要的。
- en: 'The tool''s GitHub project can be found at [https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/),
    and to run the tool on a macOS or Windows machine, you simply have to copy and
    paste the following into your Terminal. The following command is missing the line
    needed to check the `systemd`, as Moby Linux, which is the underlying operating
    system for Docker for macOS and Docker for Windows, does not run `systemd`. We
    will look at a `systemd` based system shortly:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具的GitHub项目可以在[https://github.com/docker/docker-bench-security/](https://github.com/docker/docker-bench-security/)找到，要在macOS或Windows机器上运行该工具，您只需将以下内容复制并粘贴到您的终端中。以下命令缺少检查`systemd`所需的行，因为作为Docker
    for macOS和Docker for Windows的基础操作系统的Moby Linux不运行`systemd`。我们将很快看一下基于`systemd`的系统：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once the image has been downloaded, it will launch and immediately start to
    audit your Docker host, printing the results as it goes, as shown in the following
    screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像被下载，它将启动并立即开始审核您的Docker主机，打印结果，如下面的屏幕截图所示：
- en: '![](Images/6fa485b2-d0d5-45fe-ba81-74a1a26e9697.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6fa485b2-d0d5-45fe-ba81-74a1a26e9697.png)'
- en: As you can see, there are a few warnings (`[WARN]`), as well as notes (`[NOTE]`)
    and information (`[INFO]`); however, as this host is managed by Docker, as you
    would expect, there is not too much to worry about.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有一些警告（`[WARN]`），以及注释（`[NOTE]`）和信息（`[INFO]`）；但是，由于这个主机是由Docker管理的，正如您所期望的那样，没有太多需要担心的。
- en: Running on Ubuntu Linux
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu Linux上运行
- en: 'Before we look into the output of the audit in a little more detail, I am going
    to launch a vanilla Ubuntu 16.04.5 LTS server in DigitalOcean, and perform a clean
    installation of Docker using Docker Machine, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更详细地查看审核输出之前，我将在DigitalOcean上启动一个原始的Ubuntu 16.04.5 LTS服务器，并使用Docker Machine进行干净的Docker安装，如下所示：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installed, I will launch a few containers, all of which don''t have very
    sensible settings. I will launch the following two containers from the Docker
    Hub:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我将启动一些容器，所有这些容器都没有非常合理的设置。我将从Docker Hub启动以下两个容器：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, I will build a custom image, based on Ubuntu 16.04, that runs SSH using
    the following `Dockerfile`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将基于Ubuntu 16.04构建一个自定义镜像，运行SSH，使用以下`Dockerfile`：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I will build and launch this using the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用以下代码构建和启动它：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, in one image, we are mounting the root filesystem of our host
    with full read/write access in the `root-nginx container`. We are also running
    with extended privileges in `priv-nginx`, and finally, running SSH in `sshd`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在一个图像中，我们正在使用`root-nginx`容器以完全读/写访问权限挂载我们主机的根文件系统。我们还在`priv-nginx`中以扩展特权运行，并最后在`sshd`中运行SSH。
- en: 'To start the audit on our Ubuntu Docker host, I ran the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的Ubuntu Docker主机上开始审计，我运行了以下命令：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we are running on an operating system that supports `systemd`, we are mounting
    `/usr/lib/systemd`, so that we can audit it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在运行支持`systemd`的操作系统，我们正在挂载`/usr/lib/systemd`，以便我们可以对其进行审计。
- en: There is a lot of output and a lot to digest, but what does it all mean? Let's
    take a look and break down each section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多输出和很多需要消化的内容，但这一切意味着什么呢？让我们来看看并分解每个部分。
- en: Understanding the output
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解输出
- en: 'There are three types of output that we will see, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到三种类型的输出，如下所示：
- en: '**`[PASS]`**: These items are solid and good to go. They don''t need any attention,
    but are good to read, to make you feel warm inside. The more of these, the better!'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`[PASS]`**：这些项目是可靠的并且可以正常运行。它们不需要任何关注，但是很好阅读，让您感到内心温暖。这些越多，越好！'
- en: '`[WARN]`: These are that items that need to be fixed. These are the items that
    we don''t want to see.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[WARN]`：这些是需要修复的项目。这些是我们不想看到的项目。'
- en: '`[INFO]`: These are items that you should review and fix, if you feel they
    are pertinent to your setup and security needs.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[INFO]`：这些是您应该审查并修复的项目，如果您认为它们与您的设置和安全需求相关。'
- en: '`[NOTE]`: These give best-practice advice.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[NOTE]`：这些提供最佳实践建议。'
- en: 'As mentioned, there are seven main sections that are covered in the audit,
    as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，审计中涵盖了七个主要部分，如下所示：
- en: Host configuration
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机配置
- en: Docker daemon configuration
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置
- en: Docker daemon configuration files
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序配置文件
- en: Container images and build files
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器镜像和构建文件
- en: Container runtime
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时
- en: Docker security operations
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker安全操作
- en: Docker Swarm configuration
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Swarm配置
- en: Let's take a look at what we are seeing in each section of the scan. These scan
    results are from a default Ubuntu Docker host, with no tweaks made to the system
    at this point. We want to focus on the `[WARN]` items in each section. Other warnings
    may come up when you run yours, but these will be the ones that come up for most
    people (if not for everyone), at first.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在扫描的每个部分中看到了什么。这些扫描结果来自默认的Ubuntu Docker主机，在此时没有对系统进行任何调整。我们想专注于每个部分中的`[WARN]`项目。当您运行您自己的扫描时，可能会出现其他警告，但这些将是大多数人（如果不是所有人）首先遇到的警告。
- en: Host configuration
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机配置
- en: 'I had five items with a `[WARN]` status for my host configuration, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我的主机配置有五个带有`[WARN]`状态的项目，如下所示：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By default, Docker uses `/var/lib/docker` on the host machine to store all
    of its files, including all images, containers, and volumes created by the default
    driver. This means that this folder may grow quickly. As my host machine is running
    a single partition (and depending on what your containers are doing), this could
    potentially fill the entire drive, which would render my host machine unusable:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker在主机机器上使用`/var/lib/docker`来存储所有文件，包括默认驱动程序创建的所有镜像、容器和卷。这意味着这个文件夹可能会迅速增长。由于我的主机机器正在运行单个分区（并且取决于您的容器在做什么），这可能会填满整个驱动器，这将使我的主机机器无法使用：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These warnings are being flagged because `auditd` is not installed, and there
    are no audit rules for the Docker daemon and associated files; for more information
    on `auditd`, see the blog post at [https://www.linux.com/learn/customized-file-monitoring-auditd/](https://www.linux.com/learn/customized-file-monitoring-auditd/).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这些警告之所以被标记，是因为未安装`auditd`，并且没有Docker守护程序和相关文件的审计规则；有关`auditd`的更多信息，请参阅博客文章[https://www.linux.com/learn/customized-file-monitoring-auditd/](https://www.linux.com/learn/customized-file-monitoring-auditd/)。
- en: Docker daemon configuration
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker守护程序配置
- en: 'My Docker daemon configuration flagged up eight `[WARN]` statuses, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我的Docker守护程序配置标记了八个`[WARN]`状态，如下所示：
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: By default, Docker allows traffic to pass between containers unrestricted, on
    the same host. It is possible to change this behavior; for more information on
    Docker networking, see [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker允许在同一主机上的容器之间无限制地传递流量。可以更改此行为；有关Docker网络的更多信息，请参阅[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)。
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'AUFS was used quite a lot in Docker''s early days; however, it is no longer
    considered a best practice, as it could be responsible for issues in the host
    machine''s Kernel:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker的早期，AUFS被广泛使用；然而，现在不再被认为是最佳实践，因为它可能导致主机机器的内核出现问题：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'By default, the user namespace is not remapped. Mapping them, while possible,
    can currently cause issues with several Docker features; see [https://docs.docker.com/engine/reference/commandline/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/) for
    more details on known restrictions:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用户命名空间不会被重新映射。尽管可以映射它们，但目前可能会导致几个Docker功能出现问题；有关已知限制的更多详细信息，请参阅[https://docs.docker.com/engine/reference/commandline/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/)：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A default installation of Docker allows unrestricted access to the Docker daemon;
    you can limit access to authenticated users by enabling an authorization plugin.
    For more details, see [https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的默认安装允许对Docker守护程序进行不受限制的访问；您可以通过启用授权插件来限制对经过身份验证的用户的访问。有关更多详细信息，请参阅[https://docs.docker.com/engine/extend/plugins_authorization/](https://docs.docker.com/engine/extend/plugins_authorization/)：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As I am only running a single host, I am not using a service, such as `rsyslog`,
    to ship my Docker host''s logs to a central server, nor have I configured a log
    driver on my Docker daemon; see [https://docs.docker.com/engine/admin/logging/overview/](https://docs.docker.com/engine/admin/logging/overview/)
    for more details:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我只运行单个主机，我没有使用诸如`rsyslog`之类的服务将我的Docker主机日志发送到中央服务器，也没有在我的Docker守护程序上配置日志驱动程序；有关更多详细信息，请参阅[https://docs.docker.com/engine/admin/logging/overview/](https://docs.docker.com/engine/admin/logging/overview/)：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `--live-restore` flag enables full support of daemon-less containers in
    Docker; this means that, rather than stopping containers when the daemon shuts
    down, they continue to run, and it properly reconnects to the containers when
    restarted. It is not enabled by default, due to backward compatibility issues;
    for more details, see [https://docs.docker.com/engine/admin/live-restore/](https://docs.docker.com/engine/admin/live-restore/):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`--live-restore`标志在Docker中启用了对无守护程序容器的全面支持；这意味着，与其在守护程序关闭时停止容器，它们会继续运行，并在重新启动时正确重新连接到容器。由于向后兼容性问题，默认情况下未启用；有关更多详细信息，请参阅[https://docs.docker.com/engine/admin/live-restore/](https://docs.docker.com/engine/admin/live-restore/)：'
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are two ways that your containers can route to the outside world: either
    by using a hairpin NAT, or a userland proxy. For most installations, the hairpin
    NAT mode is the preferred mode, as it takes advantage of iptables and has better
    performance. Where this is not available, Docker uses the userland proxy. Most
    Docker installations on modern operating systems will support hairpin NAT; for
    details on how to disable the userland proxy, see [https://docs.docker.com/engine/userguide/networking/default_network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您的容器可以通过两种方式路由到外部世界：使用hairpin NAT或用户态代理。对于大多数安装来说，hairpin NAT模式是首选模式，因为它利用了iptables并具有更好的性能。在这种模式不可用的情况下，Docker使用用户态代理。大多数现代操作系统上的Docker安装都将支持hairpin
    NAT；有关如何禁用用户态代理的详细信息，请参阅[https://docs.docker.com/engine/userguide/networking/default_network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/)：
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This stops the processes within the containers potentially can't gain any additional privileges
    by setting suid or sgid bits; this could limit the impact of any dangerous operations
    trying to access privileged binaries.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以防止容器内的进程通过设置suid或sgid位获得任何额外的特权；这可以限制任何试图访问特权二进制文件的危险操作的影响。
- en: Docker daemon configuration files
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker守护程序配置文件
- en: I had no `[WARN]` statuses in this section, which is to be expected, as Docker
    was deployed using Docker Machine.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我没有`[WARN]`状态，这是可以预料的，因为Docker是使用Docker Machine部署的。
- en: Container images and build files
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器映像和构建文件
- en: 'I had three `[WARN]` statuses for container images and build files; you may
    notice that multi-line warnings are prefixed with `*` after the status:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我在容器映像和构建文件中有三个`[WARN]`状态；您可能会注意到多行警告在状态之后加上了`*`：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The processes in the containers that I am running are all running as the root
    user; this is the default action of most containers. For more information, see [https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在运行的容器中的进程都以root用户身份运行；这是大多数容器的默认操作。有关更多信息，请参阅[https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/)：
- en: '[PRE25]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Enabling content trust for Docker ensures the provenance of the container images
    that you are pulling, as they are digitally signed when you push them; this means
    that you are always running the images that you intended to run. For more information
    on content trust, see [https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为Docker启用内容信任可以确保您拉取的容器映像的来源，因为在推送它们时它们是数字签名的；这意味着您始终运行您打算运行的映像。有关内容信任的更多信息，请参阅[https://docs.docker.com/engine/security/trust/content_trust/](https://docs.docker.com/engine/security/trust/content_trust/)：
- en: '[PRE26]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When building your image, it is possible to build in a `HEALTHCHECK`; this ensures
    that when a container launches from your image, Docker will periodically check
    the status of your container, and, if needed, it will restart or relaunch it.
    More details can be found at [https://docs.docker.com/engine/reference/builder/#healthcheck](https://docs.docker.com/engine/reference/builder/#healthcheck).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 构建图像时，可以构建`HEALTHCHECK`；这可以确保当容器从您的图像启动时，Docker会定期检查容器的状态，并在需要时重新启动或重新启动它。更多详细信息可以在[https://docs.docker.com/engine/reference/builder/#healthcheck](https://docs.docker.com/engine/reference/builder/#healthcheck)找到。
- en: Container runtime
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器运行时
- en: 'As we were a little silly when launching our containers on the Docker Host
    that we audited, we know that there will be a lot of vulnerabilities here, and
    there are 11 of them altogether:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在审核的Docker主机上启动容器时有点愚蠢，我们知道这里会有很多漏洞，总共有11个：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding vulnerability is a false positive; we are not running SELinux,
    as it is an Ubuntu machine, and SELinux is only applicable to Red Hat based machines;
    instead, `5.1` shows us the result, which is a `[PASS]`, which we want:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的漏洞是一个误报；我们没有运行SELinux，因为它是一个Ubuntu机器，SELinux只适用于基于Red Hat的机器；相反，`5.1`向我们展示了结果，这是一个`[PASS]`，这是我们想要的：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The next two `[WARN]` statuses are of our own making, as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个`[WARN]`状态是我们自己制造的，如下所示：
- en: '[PRE29]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is also of our own making:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下也是我们自己制造的：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: These can be safely ignored; it should be very rare that you have to launch
    a container running in `Privileged mode`. It is only if your container needs to
    interact with the Docker Engine running on your Docker host; for example, when
    you are running a GUI (such as Portainer), which we covered in [Chapter 11](d1ef4eff-f35b-47b2-8efc-24a90caa254b.xhtml)*,
    Portainer - A GUI for Docker*.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以安全地忽略；你很少会需要启动以`Privileged mode`运行的容器。只有当你的容器需要与运行在Docker主机上的Docker引擎交互时才需要；例如，当你运行一个GUI（如Portainer）时，我们在[第11章](d1ef4eff-f35b-47b2-8efc-24a90caa254b.xhtml)*,
    Portainer - A GUI for Docker*中介绍过。
- en: We have also discussed that you should not be running SSH in your containers;
    there are a few use cases, such as running a jump host within a certain network;
    however, these should be the exception.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论过你不应该在容器中运行SSH；有一些用例，比如在某个网络中运行跳板主机；然而，这些应该是例外情况。
- en: 'The next two `[WARN]` statuses are flagged because, by default on Docker, all
    running containers on your Docker hosts share the resources equally; setting limits
    on memory and the CPU priority for your containers will ensure that the containers
    that you want to have a higher priority are not starved of resources by lower
    priority containers:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个`[WARN]`状态被标记，因为在Docker上，默认情况下，所有在Docker主机上运行的容器共享资源；为你的容器设置内存和CPU优先级的限制将确保你希望具有更高优先级的容器不会被优先级较低的容器耗尽资源：
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As we already discussed earlier in the chapter, if possible, you should be
    launching your containers read-only, and mounting volumes for where you know your
    process needs to write data to:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面讨论过的，如果可能的话，你应该以只读模式启动你的容器，并为你知道需要写入数据的地方挂载卷：
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The reason the following flags are raised is that we are not telling Docker
    to bind our exposed port to a specific IP address on the Docker host:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 引发以下标志的原因是我们没有告诉Docker将我们的暴露端口绑定到Docker主机上的特定IP地址：
- en: '[PRE33]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As my test Docker host only has a single NIC, this isn''t too much of a problem;
    however, if my Docker host had multiple interfaces, then this container would
    be exposed to all of the networks, which could be a problem if I had, for example,
    an external and internal network. See [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)
    for more details:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的测试Docker主机只有一个网卡，这并不是太大的问题；然而，如果我的Docker主机有多个接口，那么这个容器将暴露给所有网络，如果我有一个外部和内部网络，这可能是一个问题。有关更多详细信息，请参阅[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Although I haven''t launched my containers using the `--restart` flag, there
    is no default value for the `MaximumRetryCount`. This means that if a container
    failed over and over, it would quite happily sit there attempting to restart.
    This could have a negative effect on the Docker host; adding a `MaximumRetryCount`
    of `5` will mean that the container will attempt to restart five times, before
    giving up:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我还没有使用`--restart`标志启动我的容器，但`MaximumRetryCount`没有默认值。这意味着如果一个容器一次又一次地失败，它会很高兴地坐在那里尝试重新启动。这可能会对Docker主机产生负面影响；添加`MaximumRetryCount`为`5`将意味着容器在放弃之前会尝试重新启动五次：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'By default, Docker does not put a restriction on a process or its child processes
    gaining new privileges via suid or sgid bits. To find out details on how you can
    stop this behavior, see [http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/](http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/):'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker不会限制进程或其子进程通过suid或sgid位获得新特权。要了解如何阻止此行为的详细信息，请参阅[http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/](http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/)：
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Again, we are not using any health checks, meaning that Docker will not periodically
    check the status of your containers. To see the GitHub issue for the pull request
    that introduced this feature, browse to [https://github.com/moby/moby/pull/22719/](https://github.com/moby/moby/pull/22719/):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们没有使用任何健康检查，这意味着Docker不会定期检查容器的状态。要查看引入此功能的拉取请求的GitHub问题，请浏览[https://github.com/moby/moby/pull/22719/](https://github.com/moby/moby/pull/22719/)：
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Potentially, an attacker could trigger a fork bomb with a single command inside
    of your container. This has the potential to crash you Docker host, and the only
    way to recover would be to reboot the host. You can protect against this by using
    the `--pids-limit` flag. For more information, see the pull request at [https://github.com/moby/moby/pull/18697/](https://github.com/moby/moby/pull/18697/).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在地，攻击者可以通过容器内的单个命令触发fork bomb。这有可能导致您的Docker主机崩溃，唯一的恢复方法是重新启动主机。您可以使用`--pids-limit`标志来防止这种情况发生。有关更多信息，请参阅拉取请求[https://github.com/moby/moby/pull/18697/](https://github.com/moby/moby/pull/18697/)。
- en: Docker security operations
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker安全操作
- en: 'This section includes `[INFO]` about best practices, as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包括有关最佳实践的`[INFO]`，如下所示：
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Docker Swarm configuration
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Swarm配置
- en: 'This section includes `[PASS]` information, as we don''t have Docker Swarm
    enabled on the host:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包括`[PASS]`信息，因为我们在主机上没有启用Docker Swarm：
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Summing up Docker Bench
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结Docker Bench
- en: As you have seen, running Docker Bench against your Docker host is a much better
    way to get an understanding of how your Docker host stacks up against the CIS
    Docker Benchmark; it is certainly a lot more manageable than manually working
    through every single test in the 230-page document.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，运行Docker Bench来评估Docker主机要比手动逐个测试230页文档中的每个测试要好得多。
- en: Third-party security services
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方安全服务
- en: Before we finish this chapter, we are going to take a look at some of the third-party
    services available, to help you with the vulnerability assessment of your images.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章之前，我们将看一些可用的第三方服务，以帮助您评估图像的漏洞。
- en: Quay
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quay
- en: '**Quay**, an image registry service by CoreOS, which was purchased by Red Hat,
    is similar to the Docker Hub/Registry; one difference is that Quay actually performs
    a security scan of each image after it is pushed/built.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Quay，由CoreOS提供的图像注册服务，被Red Hat收购，类似于Docker Hub/Registry；一个区别是Quay实际上在每次推送/构建图像后执行安全扫描。
- en: 'You can see the results of the scan by viewing the Repository Tags for your
    chosen image; here, you will see a column for Security Scan. As you can see in
    the following screenshot, in the example image that we created, there are no problems:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看所选图像的存储库标记来查看扫描结果；在这里，您将看到一个安全扫描的列。正如您在下面的截图中所看到的，在我们创建的示例图像中，没有问题：
- en: '![](Images/922c1364-af21-4585-8b54-82931a58942d.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/922c1364-af21-4585-8b54-82931a58942d.png)'
- en: 'Clicking on **Passed** will take you to a more detailed breakdown of any vulnerabilities
    that have been detected within the image. As there are no vulnerabilities at the
    moment (which is a good thing), this screen does not tell us much. However, clicking
    on the **Packages** icon in the left-hand menu will present us with a list of
    the packages that the scan has discovered. For our test image, it has found 29
    packages with no vulnerabilities, all of which are displayed here, along with
    confirmation of the version of the package, and how they were introduced to the
    image:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Passed**将带您进入检测到图像中的任何漏洞的更详细的分解。目前没有漏洞（这是一件好事），因此此屏幕并没有告诉我们太多。但是，单击左侧菜单中的**Packages**图标将向我们显示扫描发现的软件包列表。对于我们的测试图像，它发现了29个没有漏洞的软件包，所有这些软件包都显示在这里，还确认了软件包的版本以及它们是如何引入到图像中的：
- en: '![](Images/bd3ddf6d-d5d3-46f8-9766-20686840a568.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/bd3ddf6d-d5d3-46f8-9766-20686840a568.png)'
- en: As you can also see, Quay is scanning our publicly available image, which is
    being hosted on the free-of-charge open source plan that Quay offers. Security
    scanning comes as standard with all plans on Quay.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您也可以看到的，Quay正在扫描我们公开可用的图像，该图像正在Quay提供的免费开源计划上托管。安全扫描是Quay所有计划的标准功能。
- en: Clair
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Clair
- en: '**Clair** is an open source project from CoreOS. In essence, it is a service
    that provides the static analysis functionality for both the hosted version of
    Quay and the commercially supported, enterprise version.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**Clair**是来自CoreOS的开源项目。实质上，它是一个为托管版本的Quay和商业支持的企业版本提供静态分析功能的服务。'
- en: 'It works by creating a local mirror of the following vulnerability databases:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过创建以下漏洞数据库的本地镜像来工作：
- en: 'Debian Security Bug Tracker: [https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian安全漏洞跟踪器：[https://security-tracker.debian.org/tracker/](https://security-tracker.debian.org/tracker/)
- en: 'Ubuntu CVE Tracker: [https://launchpad.net/ubuntu-cve-tracker/](https://launchpad.net/ubuntu-cve-tracker/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu CVE跟踪器：[https://launchpad.net/ubuntu-cve-tracker/](https://launchpad.net/ubuntu-cve-tracker/)
- en: 'Red Hat Security Data: [https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat安全数据：[https://www.redhat.com/security/data/metrics/](https://www.redhat.com/security/data/metrics/)
- en: 'Oracle Linux Security Data: [https://linux.oracle.com/security/](https://linux.oracle.com/security/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle Linux安全数据：[https://linux.oracle.com/security/](https://linux.oracle.com/security/)
- en: 'Alpine SecDB: [https://git.alpinelinux.org/cgit/alpine-secdb/](https://git.alpinelinux.org/cgit/alpine-secdb/)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alpine SecDB：[https://git.alpinelinux.org/cgit/alpine-secdb/](https://git.alpinelinux.org/cgit/alpine-secdb/)
- en: 'NIST NVD: [https://nvd.nist.gov/](https://nvd.nist.gov/)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NIST NVD：[https://nvd.nist.gov/](https://nvd.nist.gov/)
- en: Once it has mirrored the data sources, it mounts the image's filesystem, and
    then performs a scan of the installed packages, comparing them to the signatures
    in the preceding data sources.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它镜像了数据源，它就会挂载图像的文件系统，然后对安装的软件包进行扫描，将它们与前述数据源中的签名进行比较。
- en: Clair is not a straightforward service; it only has an API-driven interface,
    and there are no fancy web-based or command-line tools that ship with Clair by
    default. The documentation for the API can be found at [https://coreos.com/clair/docs/latest/api_v1.html](https://coreos.com/clair/docs/latest/api_v1.html).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Clair并不是一个简单的服务；它只有一个基于API的接口，并且默认情况下Clair没有附带任何花哨的基于Web或命令行的工具。API的文档可以在[https://coreos.com/clair/docs/latest/api_v1.html](https://coreos.com/clair/docs/latest/api_v1.html)找到。
- en: The installation instructions can be found at the project's GitHub page, at
    [https://github.com/coreos/clair/](https://github.com/coreos/clair/).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 安装说明可以在项目的GitHub页面找到，网址为[https://github.com/coreos/clair/](https://github.com/coreos/clair/)。
- en: Also, you can find a list of tools that support Clair on its integration page,
    at [https://coreos.com/clair/docs/latest/integrations.html](https://coreos.com/clair/docs/latest/integrations.html).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以在其集成页面上找到支持Clair的工具列表，网址为[https://coreos.com/clair/docs/latest/integrations.html](https://coreos.com/clair/docs/latest/integrations.html)。
- en: Anchore
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Anchore
- en: The final tool that we are going to cover is **Anchore**. This comes in several
    versions; there are cloud-based offerings and an on-premise enterprise version,
    both of which come with a full, web-based graphical interface. There is a version
    that hooks into Jenkins, and also the open source command-line scanner, which
    is what we are going to take a look at now.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要介绍的最后一个工具是**Anchore**。它有几个版本；有基于云的版本和本地企业版本，两者都配备了完整的基于Web的图形界面。还有一个可以连接到Jenkins的版本，以及开源命令行扫描仪，这就是我们现在要看的。
- en: 'This version is distributed as a Docker Compose file, so we shall start by
    creating the folders that we need, and we will also download the Docker Compose
    and basic configuration file from the project GitHub repository:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本是作为Docker Compose文件分发的，所以我们将首先创建我们需要的文件夹，并且还将从项目GitHub存储库下载Docker Compose和基本配置文件。
- en: '[PRE40]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now that we have the basics in place, you can pull the images and start the
    containers, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本设置，您可以按照以下步骤拉取图像并启动容器：
- en: '[PRE41]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Before we can interact with our Anchore deployment, we need to install the
    command-line client. If you are running macOS, then you have to run the following
    commands, ignoring the first if you already have `pip` installed:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们与Anchore部署进行交互之前，我们需要安装命令行客户端。如果您使用的是macOS，则必须运行以下命令，如果已经安装了`pip`，则忽略第一个命令：
- en: '[PRE42]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'For Ubuntu users, you should run the following commands, this time ignoring
    the first two commands if you already have `pip`:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu用户，您应该运行以下命令，如果已经安装了`pip`，则这次忽略前两个命令：
- en: '[PRE43]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once it has installed, you can run the following commands to check the status
    of your installation:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以运行以下命令来检查安装的状态：
- en: '[PRE44]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This will show you the overall status of your installation; it might take a
    minute or two from when you first launched for everything to show as `up`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示您安装的整体状态；从您第一次启动开始，可能需要一两分钟才能显示所有内容为“up”：
- en: '![](Images/6b81a2d0-bbcd-40e5-a5c7-b25b122f5a5d.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6b81a2d0-bbcd-40e5-a5c7-b25b122f5a5d.png)'
- en: 'The next command shows you where Anchore is in the database sync:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令会显示Anchore在数据库同步中的位置：
- en: '[PRE45]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As you can see in the following screenshot, my installation is currently syncing
    the CentOS 6 database. This process can take up to a few hours; however, for our
    example, we are going to be scanning an Alpine Linux based image as shown:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下截图中所见，我的安装目前正在同步CentOS 6数据库。这个过程可能需要几个小时；但是，对于我们的示例，我们将扫描一个基于Alpine Linux的镜像，如下所示：
- en: '![](Images/db3a369b-9f0b-46c6-9304-de864536aefe.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/db3a369b-9f0b-46c6-9304-de864536aefe.png)'
- en: 'Next up, we have to grab an image to scan; let''s grab an older image, as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要获取一个要扫描的镜像；让我们获取一个旧的镜像，如下所示：
- en: '[PRE46]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It will a minute or two to run its initial scan; you can check the status by
    running the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 它将花费一两分钟来运行其初始扫描；您可以通过运行以下命令来检查状态：
- en: '[PRE47]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'After a while, the status should change from `analyzing` to `analyzed`:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，状态应该从“analyzing”变为“analyzed”：
- en: '[PRE48]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will show you an overview of the image, as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示图像的概述，如下所示：
- en: '![](Images/85631f1e-3fd3-451f-930d-8f968078e110.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/85631f1e-3fd3-451f-930d-8f968078e110.png)'
- en: 'You can then view a list of problems (if there are any), by running the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过运行以下命令查看问题列表（如果有的话）：
- en: '[PRE49]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![](Images/41239fbd-01ca-4dee-a1f0-caf9d81769f0.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/41239fbd-01ca-4dee-a1f0-caf9d81769f0.png)'
- en: As you can see, each package that is listed has the current version, a link
    to the CVE issue, and also, a confirmation of the version number that fixes the
    reported issue.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，列出的每个软件包都有当前版本，指向CVE问题的链接，以及修复报告问题的版本号的确认。
- en: 'You can use the following commands to remove the Anchore containers:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令来删除Anchore容器：
- en: '[PRE50]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered some aspects of Docker security. First, we took
    a look at some of the things that you must consider when running containers (versus
    typical virtual machines), with regards to security. We looked at the advantages
    and your Docker host, and then we discussed image trust. We then took a look at
    the Docker commands that we can use for security purposes.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了Docker安全的一些方面。首先，我们看了一些在运行容器时（与典型的虚拟机相比）必须考虑的事情，涉及安全性。我们看了看Docker主机的优势，然后讨论了镜像信任。然后我们看了看我们可以用于安全目的的Docker命令。
- en: We launched a read-only container, so that we can minimize any potential damage
    an intruder can do within our running containers. As not all applications lend
    themselves to running in read-only containers, we then looked at how we can track
    changes that have been made to the image since it was launched. It is always useful
    to be able to easily discover any changes that were made on the filesystem at
    runtime, when trying to look into any problems.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动了一个只读容器，以便我们可以最小化入侵者在我们运行的容器中可能造成的任何潜在损害。由于并非所有应用程序都适合在只读容器中运行，因此我们随后研究了如何跟踪自启动以来对镜像所做的更改。在尝试解决任何问题时，能够轻松发现运行时文件系统上所做的任何更改总是很有用。
- en: 'Next, we discussed the Center for Internet Security guidelines for Docker.
    This guide will assist you in setting up multiple aspects of your Docker environment.
    Lastly, we took a look at Docker Bench Security. We looked at how to get it up
    and running, and we ran through an example of what the output would look like.
    We then analyzed the output, to see what it meant. Remember the seven items that
    the application covered: the host configuration, the Docker daemon configuration,
    the Docker daemon configuration files, the container images and build files, the
    container runtime, the Docker security operations, and the Docker Swarm configuration.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了Docker的互联网安全中心指南。本指南将帮助您设置Docker环境的多个方面。最后，我们看了看Docker Bench Security。我们看了如何启动它，并且我们通过了一个输出示例。然后我们分析了输出，看看它的含义。请记住应用程序涵盖的七个项目：主机配置，Docker守护程序配置，Docker守护程序配置文件，容器镜像和构建文件，容器运行时，Docker安全操作和Docker
    Swarm配置。
- en: In the next chapter, we will look at how Docker can fit into your existing workflows,
    as well as some new ways to approach working with containers.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看Docker如何适应您现有的工作流程，以及处理容器的一些新方法。
- en: Questions
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: When launching a container, how can we make all of it, or parts of it, read-only?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动容器时，如何使其全部或部分为只读？
- en: How many processes should you be running per container?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个容器应该运行多少个进程？
- en: What is the best way to check your Docker installation against the CIS Docker
    benchmark?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Docker安装与CIS Docker基准的最佳方法是什么？
- en: When running the Docker Bench Security application, what should be mounted?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Docker Bench Security应用程序时，应该挂载什么？
- en: 'True or false: Quay only supports image scanning for private images.'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确还是错误：Quay仅支持私有图像的图像扫描。
- en: Further reading
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For more information, visit the website at [https://www.cisecurity.org/](https://www.cisecurity.org/);
    the Docker Benchmark can be found at [https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问网站[https://www.cisecurity.org/](https://www.cisecurity.org/)；Docker基准可以在[https://www.cisecurity.org/benchmark/docker/](https://www.cisecurity.org/benchmark/docker/)找到。
