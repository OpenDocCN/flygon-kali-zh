["```kt\nimport android.app.AlarmManager\nimport android.app.Dialog\nimport android.app.PendingIntent\nimport android.app.TimePickerDialog\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v4.app.DialogFragment\nimport android.text.format.DateFormat\nimport android.util.Log\nimport android.widget.TimePicker\nimport android.widget.Toast\nimport java.util.Calendar\n\nclass TimePickerFragment : DialogFragment(), TimePickerDialog.OnTimeSetListener {\n\n override fun onCreateDialog(savedInstanceState: Bundle): Dialog {\n val c = Calendar.getInstance()\n val hour = c.get(Calendar.HOUR_OF_DAY)\n val minute = c.get(Calendar.MINUTE)\n\n return TimePickerDialog(activity, this, hour, minute,\n DateFormat.is24HourFormat(activity))\n }\n\n override fun onTimeSet(view: TimePicker, hourOfDay: Int, minute: Int) {\n        Log.d(\"onTimeSet\", \"hourOfDay: $hourOfDay minute:$minute\")\n\n        Toast.makeText(activity, \"Reminder set successfully\", Toast.LENGTH_LONG).show()\n\n        val intent = Intent(activity, AlarmReceiver::class.java)\n        intent.putExtra(ARG_TASK_DESCRIPTION, taskDescription)\n\n        val alarmIntent = PendingIntent.getBroadcast(activity, 0, intent, 0)\n        val alarmMgr = activity.getSystemService(Context.ALARM_SERVICE) as AlarmManager\n\n        val calendar = Calendar.getInstance()\n        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay)\n        calendar.set(Calendar.MINUTE, minute)\n\n        alarmMgr.set(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, alarmIntent)\n    }\n}\n\ncompanion object {\n     val ARG_TASK_DESCRIPTION = \"task-description\"\n\n    fun newInstance(taskDescription: String): TimePickerFragment {\n        val fragment = TimePickerFragment()\n        val args = Bundle()\n        args.putString(ARG_TASK_DESCRIPTION, taskDescription)\n        fragment.arguments = args\n        return fragment\n    }\n}\n```", "```kt\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n    ...\n    val reminderItem = menu.findItem(R.id.reminder_item)\n\n    if (showMenuItems) {\n        ...\n        reminderItem.isVisible = true\n    }\n\n    return true\n}\n```", "```kt\n} else if (R.id.delete_item == item?.itemId) {\n    ...\n} else if (R.id.reminder_item == item?.itemId) {\n    TimePickerFragment.newInstance(\"Time picker argument\")\n            .show(fragmentManager, \"MainActivity\")\n}\n```", "```kt\n<item\n    android:id=\"@+id/reminder_item\"\n    android:title=\"@string/reminder\"\n    android:icon=\"@android:drawable/ic_menu_agenda\"\n    android:visible=\"false\"\n    app:showAsAction=\"ifRoom\"/>\n```", "```kt\n<resources>\n    ...\n    <string name=\"reminder\">Reminder</string>\n</resources>\n```", "```kt\nclass AlarmReceiver: BroadcastReceiver() {\n\n    override fun onReceive(context: Context?, p1: Intent?) {\n        Log.d(\"onReceive\", \"p1$p1\")\n        val i = Intent(context, AlarmService::class.java)\n        context?.startService(i)\n    }\n}\n```", "```kt\n<application>\n    ...\n  <service android:name=\".AlarmReceiver\"/>\n</application>\n```", "```kt\nimport android.app.IntentService\nimport android.app.NotificationManager\nimport android.content.Context\nimport android.content.Intent\nimport android.support.v4.app.NotificationCompat\nimport android.util.Log\n\nclass AlarmService : IntentService(\"ToDoListAppAlarmReceiver\") {\n private var context: Context? = null\n\n override fun onCreate() {\n super.onCreate()\n context = applicationContext\n }\n\n override fun onHandleIntent(intent: Intent?) {\n intent?showNotification(it)\n\n if(null == intent){\n Log.d(\"AlarmService\", \"onHandleIntent( OH How? )\")\n }\n }\n\n private fun showNotification(taskDescription: String) {\n Log.d(\"AlarmService\", \"showNotification($taskDescription)\")\n val CHANNEL_ID = \"todolist_alarm_channel_01\"\n val mBuilder = NotificationCompat.Builder(this, CHANNEL_ID)\n .setSmallIcon(R.drawable.ic_notifications_active_black_48dp)\n .setContentTitle(\"Time Up!\")\n .setContentText(taskDescription)\n\n val mNotificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n mNotificationManager.notify(23, mBuilder.build())\n }\n}\n```", "```kt\n<service android:name=\".AlarmService\"\n         android:exported=\"false\"/>\n\n```", "```kt\nbuildscript {\n    // ...\n    dependencies {\n        // ...\n        classpath 'com.google.gms:google-services:3.1.1' // google-services plugin\n    }\n}\n\nallprojects {\n    // ...\n    repositories {\n        // ...\n        maven {\n            url \"https://maven.google.com\" // Google's Maven repository\n        }\n    }\n}\n```", "```kt\napply plugin: 'com.android.application'\n\nandroid {\n  // ...\n}\ndependencies {\n  // ...\n  compile 'com.google.firebase:firebase-core:11.8.0'\n}\n// ADD THIS AT THE BOTTOM\napply plugin: 'com.google.gms.google-services'\n```", "```kt\n<service\n    android:name=\".MyFirebaseMessagingService\">\n    <intent-filter>\n        <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n    </intent-filter>\n</service>\n```", "```kt\n<service\n    android:name=\".MyFirebaseInstanceIDService\">\n    <intent-filter>\n        <action android:name=\"com.google.firebase.INSTANCE_ID_EVENT\"/>\n    </intent-filter>\n</service>\n```", "```kt\noverride fun onTokenRefresh() {\n    // Get updated InstanceID token.\n    val refreshedToken = FirebaseInstanceId.getInstance().getToken()\n    Log.d(FragmentActivity.TAG, \"Refreshed token: \" + refreshedToken)\n\n    // If you want to send messages to this application instance or\n    // manage this apps subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    sendRegistrationToServer(refreshedToken)\n}\n```"]