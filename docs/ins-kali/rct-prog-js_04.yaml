- en: Chapter 4. Demonstrating Nonfunctional Reactive Programming – A Live Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。演示非功能性反应式编程-一个实时示例
- en: In this chapter, we will be looking at a live example that incorporates some
    principles of reactive programming with ReactJS. Some portions of the program
    remain imperative as a port of something that was previously written in jQuery
    after other ports from HP-28S RPN and Unix C, but ReactJS's power still shines
    through, even with code that, like much of the code in the real world, has gone
    through multiple iterations. We will briefly look at the HTML requirements of
    the web page, before going through the real meat in JavaScript. The web page offers
    a port of a video game originally developed on an HP-28S graphing scientific calculator,
    and retains much of the calculator's look and feel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一个实时示例，其中融合了一些反应式编程原则与ReactJS。程序的一些部分仍然是命令式的，作为之前用jQuery编写的东西的一个端口，经过HP-28S
    RPN和Unix C的其他端口之后，但是ReactJS的强大仍然闪耀，即使像现实世界中的大部分代码一样，它已经经历了多次迭代。我们将简要地看一下网页的HTML要求，然后再看JavaScript中真正的内容。该网页提供了一个最初在HP-28S图形科学计算器上开发的视频游戏的端口，并保留了计算器的外观和感觉。
- en: 'In this chapter, we will be covering these topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The HTML for the web page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页的HTML
- en: The JavaScript that animates the page
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画网页的JavaScript
- en: 'Here we see the game, as rendered against the background of a classic HP28S
    calculator. Effort has been taken so that character graphics mimic the dark and
    light colors as existed on the LED screen:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到游戏，渲染在经典的HP28S计算器的背景下。已经采取了一些措施，使字符图形模仿了LED屏幕上存在的暗色和亮色：
- en: '![Demonstrating Nonfunctional Reactive Programming – A Live Example](img/B04108_04_1.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![演示非功能性反应式编程-一个实时示例](img/B04108_04_1.jpg)'
- en: The history of a game with multiple ports
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有多个端口的游戏的历史
- en: The title specifies that we are making a port of an HP28S RPN game, so let's
    look at a bit of history of the specific game that we are implementing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 标题指定我们正在制作HP28S RPN游戏的一个端口，所以让我们来看一下我们正在实现的特定游戏的一点历史。
- en: This game has had different implementations and different ports, including reimplementation
    in C, and a couple of ways with HTML or JavaScript. The original version was on
    an HP28S, a hackerly scientific calculator that could have 32 KB or a whopping
    512 KB of RAM (mine had 512 KB). Programming and use (the two are not terribly
    different, as in Unix/Linux shell programming) **Reverse Polish Notation** (**RPN**)
    ([http://en.wikipedia.org/wiki/Reverse_Polish_notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation)).
    There were a lot of interesting depths in the calculator as far as hacking was
    concerned, and I made two programs that I specifically remember. One was a fractal
    screen saver with the humble two-dimensional *staggering drunk* algorithm (see
    [http://tinyurl.com/reactjs-staggering-drunk](http://tinyurl.com/reactjs-staggering-drunk)),
    and the other was the video game that will be reimplemented here.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏有不同的实现和不同的端口，包括在C中的重新实现，以及使用HTML或JavaScript的几种方式。原始版本是在HP28S上，这是一个黑客式的科学计算器，可以有32KB或512KB的RAM（我的有512KB）。编程和使用（两者在Unix/Linux
    shell编程中并没有太大的不同）**逆波兰表示法**（**RPN**）（[http://en.wikipedia.org/wiki/Reverse_Polish_notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation)）。在计算器中有很多有趣的深度，我记得我做了两个程序。一个是一个具有谦卑的二维*蹒跚醉酒*算法的分形屏幕保护程序（参见[http://tinyurl.com/reactjs-staggering-drunk](http://tinyurl.com/reactjs-staggering-drunk)），另一个是将在这里重新实现的视频游戏。
- en: The basic game, implemented with dingbat character graphics, had a spaceship
    moving from left to right, in a field with asteroids that grew denser from level
    to level. The primary game mechanics was intended to be the dodging of asteroids
    as you went through. You could shoot asteroids as well. This was really necessary
    because some of the (naïvely) randomly drawn levels did not necessarily have a
    clear route available. To discourage the game mechanics of simply shooting all
    the way through each level, shooting asteroids was penalized, and intended as
    more of a last resort than the maneuvering that intended as the primary game mechanics.
    A friend of mine commented that it was the first video game he knew where the
    player actually lost points for shooting things.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本游戏采用dingbat字符图形实现，一艘太空船从左到右移动，在一个从级别到级别变得更加密集的小行星场中。主要的游戏机制旨在躲避你所经历的小行星。你也可以射击小行星。这真的是必要的，因为一些（天真地）随机绘制的级别并不一定有明确的路线可用。为了阻止游戏机制简单地射击通过每个级别，射击小行星是受到惩罚的，并且意味着更多的是最后的手段而不是旨在作为主要游戏机制的操纵。我的一个朋友评论说，这是他所知道的第一个玩家实际上因射击东西而失去分数的视频游戏。
- en: The HTML for the web page
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页的HTML
- en: 'We open with a standard HTML5 DOCTYPE:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以标准的HTML5 DOCTYPE开头：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Following this, we open the document, specifying UTF-8 as the charset. If the
    web page is served correctly, the charset should be specified with the page download,
    but this is still potentially helpful in terms of defensive coding, which is always
    something to keep in mind:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们打开文档，指定UTF-8作为字符集。如果网页正确提供，字符集应该在页面下载时被指定，但这在防御性编码方面仍然可能有所帮助，这总是值得记住的事情：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Hence the document title:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此文档标题：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The font used here is a retro VT series font, associated with the venerable
    VT100 and other series of Unix terminals. Note—as will be seen in code later—that
    while the VT100 series was a monospaced terminal, the font is not strictly a monospaced
    font and simply displaying each row of spaces or asteroids inline will have undesired
    spacing, so each character is positioned absolutely. Perhaps another font may
    not have this problem, but there's a nice retro tint to the VT100 font.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的字体是复古的VT系列字体，与受人尊敬的VT100和其他系列的Unix终端相关联。请注意-正如稍后将在代码中看到的那样-虽然VT100系列是等宽终端，但该字体并不严格是等宽字体，只是在行内显示每行空格或小行星将产生不希望的间距，因此每个字符都被绝对定位。也许另一个字体可能不会有这个问题，但VT100字体有一种很好的复古色彩。
- en: Note that we will be including dingbats for much of the character graphics.
    They are dealt within the JavaScript.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将为大部分字符图形包括装饰符号。它们在JavaScript中处理。
- en: 'The font tags, like some other tags used on the HTML side, are written via
    the HTTP/HTTPS ambidextrous format of two leading slashes, with `http:` or `https:`
    not specified, and being supplied to be the same as in the web page:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他在HTML中使用的标签一样，字体标签是通过HTTP/HTTPS两个斜杠的模糊格式编写的，`http:`或`https:`不指定，并且被提供为与网页中相同的格式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using a content distribution network wherever we can
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在任何可以的地方使用内容分发网络
- en: We load ReactJS from a **content distribution network** (**CDN**), following
    Steve Souders' widely established Yslow ("Why is my web page slow to load?") recommendation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从**内容分发网络**（**CDN**）加载ReactJS，遵循史蒂夫·索德斯广泛建立的Yslow（“我的网页为什么加载慢？”）建议。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Steve Souders ([http://SteveSouders.com](http://SteveSouders.com)) pioneered
    a realization, initially just at Yahoo!, that rendering web pages that would be
    working more quickly wasn't really about shaving off milliseconds or microseconds
    of server-side performance. There was a significant low-hanging fruit in terms
    of influencing the client to be more performant, for instance, by not loading
    the same resource from the network again and again when it could be loaded with
    lightning speed from a computer's cache.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫·索德斯（[http://SteveSouders.com](http://SteveSouders.com)）最初在雅虎发现，渲染网页更快实际上并不是关于削减服务器端性能的毫秒或微秒。在影响客户端更高效方面有一个显著的低成本果实，例如，当可以从计算机缓存中以闪电般的速度加载资源时，不再一遍又一遍地从网络加载相同的资源。
- en: There are quite a lot of JavaScript libraries and frameworks available from
    a CDN hit, including ReactJS, but there are also almost any other major or minor
    JavaScript tool you would want to use.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多JavaScript库和框架可以从CDN中获取，包括ReactJS，但几乎任何其他你想要使用的主要或次要JavaScript工具也都可以找到。
- en: Some simple styling
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些简单的样式
- en: We give the page some basic styling. The background image is loaded from [http://haywardfamily.org/hp28s.png](http://haywardfamily.org/hp28s.png).
    You can make a local copy if you wish, or if there are issues over HTTPS or if
    you are serving up the files locally where the HTTP/HTTPS ambidextrous hack sadly
    fails to work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为页面添加了一些基本样式。背景图像是从[http://haywardfamily.org/hp28s.png](http://haywardfamily.org/hp28s.png)加载的。如果需要，你可以制作本地副本，或者如果在HTTPS上有问题，或者如果你在本地提供文件时HTTP/HTTPS模糊格式遗憾地无法工作。
- en: 'The color for the text in **p#display** is taken from a screenshot of an HP28S
    calculator:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**p#display**中的文本颜色取自HP28S计算器的屏幕截图：'
- en: '![Some simple styling](img/B04108_04_2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![一些简单的样式](img/B04108_04_2.jpg)'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the last part of the page header.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面头部的最后一部分。
- en: A fairly minimal page body
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个相当简单的页面主体
- en: 'We build the page body, which has an image of an HP-28S calculator as the background.
    We also include a brief legend and space for the game to display on the virtual
    calculator screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建页面主体，其中包含HP-28S计算器的图像作为背景。我们还包括一个简短的图例和游戏在虚拟计算器屏幕上显示的空间：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Before closing the body tag, we load the main script, which will use ReactJS
    to animate the game:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭body标签之前，我们加载主要脚本，它将使用ReactJS来为游戏添加动画：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is the end of the HTML for the page. The JavaScript, which contains the
    real meat as far as programming is concerned, will now follow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面的HTML结束。现在将跟随包含真正的编程内容的JavaScript。
- en: The JavaScript that animates that page
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画页面的JavaScript
- en: We might briefly note that the script is regular JavaScript, rather than ReactJS's
    JSX format, which allows mixing of HTML-like XML and JavaScript and has been called
    the tool that puts angle brackets in your scripts. Not all people will go with
    JSX, but the tool is worth knowing about if nothing else.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能简要指出，脚本是常规的JavaScript，而不是ReactJS的JSX格式，它允许混合类似HTML的XML和JavaScript，并被称为在脚本中放置尖括号的工具。并非所有人都会使用JSX，但如果没有其他选择，了解这个工具也是值得的。
- en: JSX has many merits and is worth considering. It is used by perhaps some, but
    not all non-Facebook ReactJS users, as well as by Facebook. Facebook has been
    careful to support JSX but has not required it to use ReactJS. For development
    purposes, JSX scripts can be loaded after a web page loads, from [http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js](http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js)
    for example, and compiled in the browser. For production purposes, they need to
    be compiled in JavaScript, in which case you can run `npm install jsx` and then
    run the `jsx` compiler from the command line, as documented at [https://www.npmjs.com/package/jsx](https://www.npmjs.com/package/jsx).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JSX有很多优点，值得考虑。它被一些非Facebook ReactJS用户使用，但并非所有人都使用，同时也被Facebook使用。Facebook一直支持JSX，但并没有要求使用JSX来使用ReactJS。开发目的上，JSX脚本可以在网页加载后从[http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js](http://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js)加载，并在浏览器中编译。生产目的上，它们需要在JavaScript中编译，这时你可以运行`npm
    install jsx`，然后从命令行运行`jsx`编译器，具体操作可参考[https://www.npmjs.com/package/jsx](https://www.npmjs.com/package/jsx)。
- en: A brief syntax note – Immediately Invoked Function Expression
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简短的语法说明 - 立即调用的函数表达式
- en: 'In our script, we use an **Immediately Invoked Function Expression** (**IIFE**)
    so that our local variables, defined with the `var` keyword somewhere within the
    function or its dependencies, will be protected as private within a closure. This
    will avoid the concern of a shared mutable state (as it has a nonshared mutable
    state). A shared mutable state leaves the program''s stability at the mercy of
    anyone who has sufficient access to modify the state. The function is wrapped
    in parentheses due to a quirk of JavaScript syntax, wherein a line beginning with
    a function is considered a function definition, so the following syntax will not
    work:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的脚本中，我们使用**立即调用函数表达式**（**IIFE**），以便我们的局部变量，使用`var`关键字在函数或其依赖项的某处定义，将受到闭包内的私有保护。这将避免共享可变状态的问题（因为它具有非共享的可变状态）。共享的可变状态会使程序的稳定性取决于任何有足够访问权限来修改状态的人。由于JavaScript语法的怪癖，该函数被括号包裹，其中以函数开头的行被视为函数定义，因此以下语法将不起作用：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The solution is to put the function within an enclosing pair of parentheses,
    and then it will work properly:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是将函数放在一对括号中，然后它将正常工作：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Back to our main script!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的主脚本！
- en: Variable declaration and initialization
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量声明和初始化
- en: 'Our main `wrapper` function begins nonreactively and imperatively by writing
    state variables that are only used in the function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主`wrapper`函数通过编写仅在函数中使用的状态变量，开始非反应性和命令性地运行：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Having declared—and in some cases, initialized—these variables, we move on to
    the function used to start the game. This initializes or reinitializes variables,
    but does not include initializing the level. It starts the game by setting the
    `game_over` variable to `false`, placing the player on level 1, setting a (horizontal)
    position at the beginning, over to the left of the screen/asteroid field in the
    first of the 23 characters' width, and a vertical position in row 1 (the row below
    the top, out of 4), a score of 0, and the chance of most spaces being clear (that
    is, free of asteroids and therefore safe for the player's ship to travel in) by
    the asteroids keep getting denser! This 5/6 is the start of an exponential decay
    in the chances of a space being asteroid-free each time the player goes to a new
    level. The latter is a parameter that can be adjusted to influence the overall
    difficulty of the game, a lower value making a more difficult-to-navigate field.
    Elsewhere, between levels, the chance that a space is clear decreases exponentially;
    the rate of exponential decay, or perhaps other aspects of that feature are also
    something that could be modified to affect the difficulty of the game between
    levels.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 声明并在某些情况下初始化了这些变量后，我们继续进行游戏启动的函数。这将初始化或重新初始化变量，但不包括初始化关卡。它通过将`game_over`变量设置为`false`，将玩家放在第1级，设置（水平）位置在屏幕/小行星区域的左侧23个字符宽度的开始处，以及垂直位置在第1行（顶部下方的第1行，共4行），得分为0，并且大多数空间都是清晰的（即，没有小行星，因此玩家的飞船可以安全地行驶）但是小行星的密度不断增加！这5/6是空间不被小行星占据的机会呈指数衰减的开始。后者是一个可以调整的参数，以影响游戏的整体难度，较低的值会使领域更难以导航。在关卡之间，在空间清晰的机会呈指数衰减；指数衰减的速率，或者该功能的其他方面也是可以修改以影响关卡之间游戏难度的。
- en: 'Here we see what the display looks like when the player has almost cleared
    the first level:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到当玩家几乎清除了第一关时显示的样子：
- en: '![Variable declaration and initialization](img/B04108_04_3.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: ！[变量声明和初始化]（img/B04108_04_3.jpg）
- en: The levels that are generated have mostly spaces, with a random chance of an
    asteroid being present, but the space that holds the spaceship initially and the
    space in front of it are always clear. This is intended to allow the player to
    get some space to react, instead of an automatic death.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的关卡大部分是空格，有随机的可能性出现小行星，但最初容纳飞船的空间和其前面的空间总是清晰的。这是为了让玩家有一些空间来做出反应，而不是自动死亡。
- en: The function used to start or restart the game
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于启动或重新启动游戏的函数
- en: 'The function is invoked immediately after it is declared:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明后立即调用该函数：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The function that creates game levels
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建游戏关卡的函数
- en: 'In the `get_level()` function, the level is built. The probability that a space
    is clear undergoes exponential decay (the first level, after decay, being .75,
    then .675, then .6075, and so on), with the density of asteroids increasing correspondingly,
    and then a rectangular *array of arrays of characters* is built (arrays of characters
    are used for collections of characters undergoing near-constant changes, rather
    than strings, which are immutable, even though the original implementation manipulated
    strings). Note that in internal representations here, things are represented by
    character codes: `a` for an asteroid, `s` for the player''s ship, a space for
    a blank space, and so on. (Now it may be a bit strange to store an array of arrays
    of characters that are references to other characters. On the original legacy
    system, the approach that would now be obvious was not yet available. This could
    well be refactored out now, but this chapter is the one code chapter intended
    to resemble what it''s like to get good results while dealing legacy code, and
    this wart''s presence is intended. Most of the work most developers do includes
    interfacing with legacy functionality.) Initially, all the spaces are potentially
    populated with asteroids. After that, the ship''s initial slot, and the space
    immediately in front of it, are cleared. This is an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`get_level()`函数中，构建了一个级别。空间清晰的概率经历了指数衰减（衰减后的第一个级别为0.75，然后为0.675，然后为0.6075，依此类推），随着小行星的密度相应增加，然后构建了一个矩形的*字符数组的数组*（字符数组用于集合中的字符，这些字符经历了接近恒定的变化，而不是字符串，字符串是不可变的，即使原始实现操作了字符串）。请注意，在这里的内部表示中，事物是由字符代码表示的：`a`表示小行星，`s`表示玩家的飞船，空格表示空白，依此类推。（现在将一个数组的数组的字符存储为对其他字符的引用可能有点奇怪。在原始的遗留系统上，现在显而易见的方法尚不可用。现在可能会对其进行重构，但是本章是一个旨在类似于处理遗留代码时获得良好结果的代码章节，这个瑕疵的存在是有意的。大多数开发人员所做的工作包括与遗留功能进行接口。）最初，所有空间都有可能被小行星占据。之后，清除了飞船的初始槽和其前面的空间。这是一个例子：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Although this function returns a grid of rows, the grid of rows will be assigned
    to be a field of an object that will be used with ReactJS. ReactJS works better
    with a property on an object than on an array.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个函数返回行的网格，但是行的网格将被分配为将与ReactJS一起使用的对象的字段。ReactJS与对象上的属性一起工作得更好，而不是与数组上的属性一起工作。
- en: 'The result of the preceding function call is stored in a field of the board
    variable, and an array is defined for keystrokes. At the end of a move, the last
    keystroke (if any) is taken from the `keystrokes` array, and then the array is
    emptied so that the ship moves according to the last keystroke (if any) entered
    during a turn. All other keystrokes are ignored:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前面函数调用的结果存储在board变量的一个字段中，并为按键定义了一个数组。在移动结束时，最后一个按键（如果有）从`keystrokes`数组中取出，然后清空数组，以便飞船根据上一次按键（如果有）在回合期间输入的按键移动。所有其他按键都将被忽略：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Getting our hands dirty with ReactJS classes
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ReactJS类来动手实践
- en: 'Now we will directly start interacting with ReactJS. We create a ReactJS class,
    working on a hash of functions with specific fields named as per the documentation.
    The `componentDidMount()` function and field, for instance, is a function invoked
    when a ReactJS component mounts. This means that more or less, it is displayed
    and represented in the DOM. In this case, we add event listeners to the document''s
    body, rather than add something directly to the component in ReactJS. This is
    because we want to listen to key press/key down events, and it is difficult to
    get `DIV` to respond to these events. Therefore, the body has event listeners
    added. They will address event handlers in ReactJS, which are still meant to be
    defined as you would display them normally. Note that some other types of events,
    such as some mouse events (at least), will register through ReactJS''s usual means,
    as introduced here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将直接开始与ReactJS进行交互。我们创建一个ReactJS类，使用特定字段命名的函数哈希。例如，`componentDidMount()`函数和字段是在ReactJS组件挂载时调用的函数。这意味着它基本上是在DOM中显示和表示的。在这种情况下，我们向文档的主体添加事件侦听器，而不是直接向ReactJS组件添加事件。这是因为我们想要监听按键按下/按键事件，而很难让`DIV`对这些事件做出响应。因此，主体添加了事件侦听器。它们将处理ReactJS中的事件处理程序，这些事件处理程序仍然应该像通常显示它们一样定义。请注意，一些其他类型的事件，例如一些鼠标事件（至少），将通过ReactJS通常的方式注册，如下所示：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Components in ReactJS have **properties** and a **state**. Properties are something
    defined once and they cannot be changed. They are available from within ReactJS,
    and they should be treated as immutable. The state is mutable information. Both
    properties and the state are available within ReactJS. We can briefly comment
    that the shared mutable state is rightly treated by Facebook and ReactJS as begging
    for Heisenbugs. Here, we handle all of the mutable state from within a closure.
    The mutable state is not shared, nor should it be shared (in other words, it is
    a nonshared mutable state):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ReactJS中的组件具有**属性**和**状态**。属性是一次定义的东西，不能更改。它们在ReactJS内部可用，并且应该被视为不可变的。状态是可变的信息。属性和状态都在ReactJS中可用。我们可以简要地评论说，Facebook和ReactJS正确地将共享的可变状态视为引发Heisenbugs。在这里，我们从闭包中处理所有可变状态。可变状态不是共享的，也不应该共享（换句话说，它是非共享的可变状态）。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We next define the key down and key press event handlers as they would normally
    be used, as or at least as they would normally be handled if DIVs responded to
    key events. (We will in fact be monitoring the body, because key-related events,
    unlike a hover or mouse click, does not propagate to a containing DIV. This approximates
    how you would normally demonstrate event handling with ReactJS. The specific keys
    we are listening for, arrow keys and the spacebar, present a problem. In essence,
    arrow keys trigger key down events, but not key press events (most other keys
    generate key press events). This behavior is stupid, but it is deeply entrenched
    in JavaScript and is now more or less non-negotiable. We delegate to a common
    event handler that will handle both events. Here, key presses are converted to
    key codes: left or up arrow key to go up (or left, from the orientation of the
    game), right or down arrow key to go down (or right, from the orientation of the
    game), and the spacebar to shoot. These are represented in the `keystrokes` array
    by `u`, `d`, and `s` respectively:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义按键和按键事件处理程序，就像它们通常被使用的那样，或者至少在DIV响应按键事件时通常被处理的那样。（实际上，我们将监视body，因为与悬停或鼠标点击不同，按键相关事件不会传播到包含的DIV。这近似于您通常如何演示ReactJS中的事件处理。我们正在监听的特定按键，箭头键和空格键，存在一个问题。实质上，箭头键触发按键按下事件，但不触发按键事件（大多数其他键会触发按键事件）。这种行为很愚蠢，但它已经深入到JavaScript中，现在基本上是不可协商的。我们委托给一个通用的事件处理程序来处理这两个事件。在这里，按键被转换为键码：左或上箭头键向上移动（或向左，从游戏的方向来看），右或下箭头键向下移动（或向右，从游戏的方向来看），空格键射击。这些分别由`keystrokes`数组中的`u`、`d`和`s`表示。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: At this point, we create the `render()` function, which is a core ReactJS member
    to define. What this render function does is create DIVs and SPANs that represent
    the grid of spaces and symbols as appropriate. The leaf nodes are positioned absolutely.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们创建了`render()`函数，这是一个核心的ReactJS成员来定义。这个渲染函数的作用是创建DIV和SPAN，以适当的方式表示空格和符号的网格。叶节点被绝对定位。
- en: Having built the leaf SPAN nodes and then the intermediate DIVs, we build up
    to the main DIV element.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了叶SPAN节点和中间DIV后，我们构建到主DIV元素。
- en: The `out_symbol` variable is a UTF-8 character and not an ASCII escape; this
    is for a very specific reason. ReactJS, although with a clearly documented escape
    hatch `dangerouslySetInnerHTML()` (see [http://tinyurl.com/reactjs-inner-html](http://tinyurl.com/reactjs-inner-html)),
    is normally set up to resist XSS (cross-site scripting) attacks. As such, its
    normal behavior is to escape angle brackets and much ampersand usage. This means
    that `&nbsp;` will be rendered as it is in source, `&nbsp;` rather than with a
    (non-breaking and non-collapsing) space. Therefore, the dingbat symbols that we
    use are not given as they might be elsewhere—with escape codes (though those are
    left in here in comments)—but symbols pasted in the JavaScript that are stored
    as UTF-8.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`out_symbol`变量是一个UTF-8字符，而不是ASCII转义；这是有一个非常具体的原因。尽管ReactJS有一个明确定义的转义口 `dangerouslySetInnerHTML()`（参见[http://tinyurl.com/reactjs-inner-html](http://tinyurl.com/reactjs-inner-html)），通常设置为抵抗XSS（跨站脚本）攻击。因此，它的正常行为是转义尖括号和大量的和符号使用。这意味着`&nbsp;`将被渲染为源码中的`&nbsp;`，而不是一个（不换行和不折叠）空格。因此，我们使用的dingbat符号不像其他地方那样使用转义码（尽管这些转义码在这里作为注释留下了），而是作为UTF-8存储在JavaScript中。'
- en: 'If you''re not sure how to enter the dingbats, you can simply use something
    else. Alternatively, you can take the escapes in the comments, copy them to a
    **Plain Old Simple HTML** (**POSH**) file, and then copy and paste the half dozen
    symbols from the rendered POSH page in your JavaScript source with your editor.
    Your JavaScript source should be treated as UTF-8:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定如何输入dingbats，您可以简单地使用其他东西。或者，您可以将注释中的转义复制到**普通的简单HTML**（**POSH**）文件中，然后从渲染的POSH页面中复制并粘贴半打符号到您的JavaScript源代码中。您的JavaScript源代码应该被视为UTF-8。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The children and subchildren defined in the preceding code populate the argument
    lists for `React.createElement()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中定义的children和subchildren填充了`React.createElement()`的参数列表。
- en: Having built things in an inner loop, we add a leaf node to the `subchildren`
    array. It is specified to be a span, with inline CSS styling delivered in a hash
    and content equal to the `out_symbol` variable. This in turn is added to the `children`
    array. It contains the rows of the screen, which in turn is built into the complete
    board.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部循环中构建完毕后，我们向`subchildren`数组添加一个叶节点。它被指定为一个span，内联CSS样式以哈希的形式传递，并且内容等于`out_symbol`变量。然后将其添加到`children`数组中。它包含屏幕的行，这些行最终构建成完整的棋盘。
- en: In ReactJS, components are defined in `React.createElement()` and subsequently
    made available for use. The usual invocation for `React.createElement()` is something
    like `React.createElement( 'div', null, ...)`, where the part represented by the
    ellipsis holds all the children. We use `apply()` to call `React.createElement()`
    with the initial Arg that is requested, and then, in the array, what the arguments
    should be.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在ReactJS中，组件是在`React.createElement()`中定义的，随后可以供使用。`React.createElement()`的常规调用方式是`React.createElement(
    'div', null, ...)`，省略号部分包含所有的子元素。我们使用`apply()`来调用`React.createElement()`，并传入所需的初始参数，然后在数组中指定参数。
- en: Tick-tock, tick-tock – the game's clock ticks
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滴答滴答，游戏的时钟在滴答
- en: This closes the `render()` field and the `React.createElement()` class definition.
    In the source code, we move on to the `tick()` function. It handles whatever is
    supposed happen at each turn. As of now, the code calls `tick()` at an interval
    of 300 milliseconds (0.3 seconds), although this is something that could be tweaked
    to influence the gameplay and perhaps refactored slightly so that the gameplay
    would accelerate with higher levels.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这关闭了`render()`字段和`React.createElement()`类定义。在源代码中，我们继续进行`tick()`函数的处理。它处理每一轮应该发生的事情。目前，代码以300毫秒（0.3秒）的间隔调用`tick()`，尽管这是可以调整的，以影响游戏玩法，或者稍微重构以使游戏玩法随着级别的提高而加速。
- en: 'If the game is over, which can only be due to the ship crashing into an asteroid,
    nothing happens in the `tick()` call:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏结束，这只能是因为飞船撞到了小行星，`tick()`调用中什么也不会发生：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, `React.render()` is called, specifying the class that is being rendered
    and what HTML element to render to. `React.render()` should be called at least
    each time you want things to render. If you call it once, it will render once,
    which means that it needs to be called repeatedly if you want repeated updates
    to show up. Here, we call it inside each call of the `tick()` method, asking to
    create an element based on `DisplayGrid` defined in a good chunk of the preceding
    code, and to put the rendered HTML into the DIV with the display ID:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，调用`React.render()`，指定要呈现的类以及要呈现到的HTML元素。`React.render()`应该至少在每次想要呈现东西的时候调用。如果你只调用一次，它将只呈现一次，这意味着如果你想要重复的更新显示，就需要重复调用它。在这里，我们在`tick()`方法的每次调用中调用它，要求基于前面大部分代码中定义的`DisplayGrid`创建一个元素，并将呈现的HTML放入具有显示ID的DIV中：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here we see the screen as the player shoots an asteroid. The asteroid explodes
    into an asterisk!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到玩家射击了一个小行星的屏幕。小行星爆炸成了一个星号！
- en: '![Tick-tock, tick-tock – the game''s clock ticks](img/B04108_04_4.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![滴答，滴答——游戏的时钟在滴答](img/B04108_04_4.jpg)'
- en: 'If, in the previous turn, the ship shot an asteroid (which will be represented
    in the character symbols as zero or more hyphens and an asterisk to their right;
    the hyphens fill the space leading up to the asteroid that has been shot, and
    the asterisk represents the explosion as a shot hits the asteroid), we clear the
    slots that show the shot taken in that turn:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在上一轮中，飞船射击了一个小行星（在字符符号中表示为零个或多个连字符和右侧的星号；连字符填充了射击到的小行星之前的空间，星号代表了射击命中小行星的爆炸），我们清除显示在那一轮中射击的槽：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Having done this, we clear the variable indicating that a shot has been taken:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 做完这些之后，我们清除了指示已经射击的变量：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We clear the space where the ship was:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们清除了飞船所在的空间：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `keystrokes` array is cleared at the end of each tick, and we pay attention
    to the last keystroke stored. In other words, we are attending to the last keystroke,
    if any, since the previous turn. Keystrokes do not accumulate between turns. At
    the end of a turn, the last keystroke is the only keystroke that wins.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个滴答结束时，`keystrokes`数组被清除，并且我们注意存储的最后一个击键。换句话说，我们关注上一个回合之后存储的最后一个击键。击键在回合之间不会累积。在回合结束时，最后一个击键是唯一获胜的击键。
- en: 'The `keystroke` array stores key codes rather than exact keystrokes. Arrow
    keys have been processed such that a left or up arrow key press will store a `u`
    for up, a right or down arrow key press will store a `d` for down, and a spacebar
    press will store an `s` for shoot. If someone enters up or down, the ship moves
    up or down respectively within bounds:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`keystroke`数组存储的是键码，而不是确切的击键。箭头键已经被处理，左箭头或上箭头按下将存储一个`u`表示向上，右箭头或下箭头按下将存储一个`d`表示向下，空格键按下将存储一个`s`表示射击。如果有人输入上或下，飞船将在边界内向上或向下移动：'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If the user shoots an asteroid, in the next turn, a row of hyphens will extend
    from the front of the ship to the asteroid, and the asteroid will become an asterisk,
    representing an explosion:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户射击了一个小行星，在下一轮中，一排连字符将从飞船的前端延伸到小行星，小行星将变成一个星号，表示爆炸：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: GAME OVER
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏结束
- en: 'If the user runs over, or collides with an asteroid, the game is over. Then
    we display a **GAME OVER** screen and stop further processing, like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户撞到了小行星，游戏结束。然后我们显示一个**游戏结束**屏幕，并停止进一步处理，就像这样：
- en: '![GAME OVER](img/B04108_04_5.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![游戏结束](img/B04108_04_5.jpg)'
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As long as the user hasn''t hit an asteroid, the game is still going on, and
    we replace the present slot in the row with a marker for the ship. Then we increment
    the player''s (horizontal) position:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 只要用户没有撞到小行星，游戏仍在进行，我们用飞船的标记替换行中的当前槽。然后增加玩家的（水平）位置：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If the user has "fallen off the right edge of the screen", we take the game
    to the next level:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户“掉出了屏幕的右边缘”，我们将游戏提升到下一个级别：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Having defined all of this, we start the game, and if we haven''t started the
    ticks in motion, we do so with an interval of 300 milliseconds (a value that can
    be played with to make the game easier or harder; it might be made into a configurable
    interval that speeds up with the gameplay):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了所有这些之后，我们开始游戏，如果我们还没有启动滴答声，我们会以300毫秒的间隔启动滴答声（这个值可以调整，以使游戏更容易或更难；它可以成为一个可配置的间隔，随着游戏的进行而加快）：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We covered a lot of ground in this chapter. Earlier, we had covered some theory,
    but it was here that we began to piece together an application using some of ReactJS.
    Later on, we will work with a more in-depth application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。早些时候，我们已经涵盖了一些理论，但是在这里，我们开始使用一些ReactJS来拼凑一个应用程序。以后，我们将使用一个更深入的应用程序。
- en: The topics covered included the HTML for the web page. This is a simple HTML
    skeleton, that serves as a rack to hold reactive JavaScript. Another topic covered
    was the reactive JavaScript. This includes a mix of JavaScript with a clear example
    that shows how to write reactive JavaScript for ReactJS.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖的主题包括网页的HTML。这是一个简单的HTML骨架，用作保存反应式JavaScript的架子。另一个涵盖的主题是反应式JavaScript。这包括了JavaScript的混合，其中有一个清晰的示例，展示了如何为ReactJS编写反应式JavaScript。
- en: We will continue with further coverage of functional programming in the next
    chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章继续介绍函数式编程。
