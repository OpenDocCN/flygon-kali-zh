- en: Cloud-Native Application Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用部署
- en: One of the most unique things about cloud-native applications is their deployment.
    In traditional application deployment, teams deploy their applications by logging
    on to a server and installing the application. But in the cloud there are usually
    many servers, and logging into each one and installing the application manually
    is not feasible and can be very error prone. To combat these problems, we use
    cloud provisioning tools to automate the deployment of cloud-native applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用最独特的一点是它们的部署方式。在传统的应用部署中，团队通过登录服务器并安装应用程序来部署他们的应用。但在云中通常有许多服务器，登录到每台服务器并手动安装应用程序是不可行的，而且可能非常容易出错。为了解决这些问题，我们使用云配置工具来自动部署云原生应用。
- en: 'In this chapter, we will dive into the deployment model for the microservice—including
    how to package your application as a Docker container, how to set up the CI/CD
    pipeline, and how to protect your service from security attacks such as a **distributed
    denial of service** (**DDoS**). We will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨微服务的部署模型，包括如何将应用程序打包为Docker容器、如何设置CI/CD流水线以及如何保护您的服务免受分布式拒绝服务（DDoS）等安全攻击。我们将涵盖以下内容：
- en: Deployment models, packaging, and containerization (using Docker)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署模型、打包和容器化（使用Docker）
- en: Deployment patterns (blue-green, canary release, and dark release)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署模式（蓝绿部署、金丝雀发布和暗部署）
- en: DDoS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDoS
- en: CI/CD
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD
- en: Deployment models
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署模型
- en: We will cover the deployment models that will be used to deploy our application
    in the cloud environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖在云环境中部署我们的应用程序所使用的部署模型。
- en: Virtualization
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟化
- en: 'The fundamental building block of the cloud is a virtual machine (referred
    to as VM from now on), which is equivalent to a physical server (or host) on which
    users can log in and install or maintain applications. The difference being that
    there can be several VMs hosted on a single host thereby increasing the resource
    utilization. This is achieved by using virtualization, where a hypervisor is installed
    on the host that can then apportion the resources available on the physical server,
    such as compute, memory, storage, and networking to the different VMs hosted on
    it. Cloud-native applications can be deployed on such VMs using the following
    strategies:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 云的基本构建块是虚拟机（从现在开始称为VM），它相当于用户可以登录并安装或维护应用程序的物理服务器（或主机）。不同之处在于可以在单个主机上托管多个VM，从而增加资源利用率。这是通过使用虚拟化实现的，其中在主机上安装了一个可以将物理服务器上可用的资源（如计算、内存、存储和网络）分配给托管在其上的不同VM的hypervisor。云原生应用可以使用以下策略部署在这些VM上：
- en: Several applications per VM
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VM上有多个应用程序
- en: One application per VM
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VM上一个应用程序
- en: When running several applications per VM there is the possibility of one application
    hogging all the resources available on the VM and starving out the other applications.
    On the other hand, running a single application per VM ensures that the applications
    are isolated so that they are not affecting each other, but the down side of such
    a deployment is the waste of resources, as each application might not always be
    consuming all the resources that are available to it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个VM上运行多个应用程序时，有可能一个应用程序占用了VM上所有可用的资源，使其他应用程序无法运行。另一方面，每个VM上只运行一个应用程序可以确保应用程序被隔离，以便它们不会相互影响，但这种部署方式的缺点是资源的浪费，因为每个应用程序可能并不总是消耗所有可用的资源。
- en: PaaS
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PaaS
- en: PaaS or Platform as a Service is another popular option for deploying cloud-native
    applications. PaaS offers additional services that complement the development,
    scaling, and maintenance of cloud-native applications. Services such as automated
    builds and deployments through buildpacks greatly minimize the time spent in setting
    up additional infrastructure to support these activities. PaaS also provides some
    basic infrastructure services such as monitoring, log aggregation, secrets management,
    and load balancing out-of-the-box. Cloud Foundry, Google App Engine, Heroku, and
    OpenShift are some examples of  PaaS.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS或平台即服务是部署云原生应用的另一个流行选项。PaaS提供了补充开发、扩展和维护云原生应用的附加服务。通过构建包，自动化构建和部署等服务大大减少了设置额外基础设施来支持这些活动所需的时间。PaaS还提供了一些基本的基础设施服务，如监控、日志聚合、秘密管理和负载均衡。Cloud
    Foundry、Google App Engine、Heroku和OpenShift是PaaS的一些示例。
- en: Containers
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: 'The efforts made to provide the level of isolation required for independent
    operation, while also conserving resource utilization, has resulted in the development
    of container technology. By leveraging features of the Linux kernel, containers
    provide CPU, memory, storage, and network isolation at a process level. The following
    figure demonstrates the difference between virtualizations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供所需的独立运行级别的隔离，并节约资源利用，人们开发了容器技术。通过利用Linux内核的特性，容器在进程级别提供了CPU、内存、存储和网络隔离。下图展示了虚拟化的差异：
- en: '![](img/8c53dec6-cf46-4c95-be5b-36c11e62e444.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c53dec6-cf46-4c95-be5b-36c11e62e444.jpg)'
- en: Containers eliminate the need for the guest operating system, thereby greatly
    increasing the number of containers that can be run versus the number of VMs on
    the same host. Containers also have a smaller footprint, in the order of MBs,
    whereas VMs can easily exceed several GBs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 容器消除了对客户操作系统的需求，因此大大增加了可以在同一主机上运行的容器数量，与可以在同一主机上运行的虚拟机数量相比。容器的占用空间也更小，大约为MB级别，而虚拟机很容易超过几GB。
- en: 'Containers are also very resource efficient in terms of the amount of CPU and
    memory required, as they do not have to support the many peripheral systems that
    have to be supported when running a fully fledged operating system:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在CPU和内存方面也非常高效，因为它们不必支持运行完整操作系统时必须支持的许多外围系统：
- en: '![](img/48a52590-2ddf-490d-b0fd-2d9b256d9448.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48a52590-2ddf-490d-b0fd-2d9b256d9448.jpg)'
- en: 'The previous diagram shows the evolution of cloud-native application deployment
    strategies with the aim of increasing the resource utilization and isolation of
    the applications. At the top of the stack are running containers within VMs running
    on a host. This allows the applications to scale by two degrees:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表显示了云原生应用部署策略的演变，旨在增加资源利用率和应用程序的隔离性。在堆栈的顶部是在主机上运行的VM中运行的容器。这允许应用程序按两个程度进行扩展：
- en: Increasing the number of containers within a VM
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加VM中容器的数量
- en: Increasing the number of VMs running containers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加运行容器的VM数量
- en: Docker
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: Docker is a container runtime that has gained popularity, and has proved itself
    to be a robust platform for deploying cloud-native applications. Docker is available
    on all major platforms, such as Windows, Mac, and Linux. Since containers require
    the Linux kernel, it is easier to run the Docker engine in a Linux environment.
    But, there are several resources available to run Docker containers comfortably
    in both Windows and Mac environments. We will be demonstrating how to deploy the
    services that we have been developing so far as Docker containers, including connecting
    to an external database running in its own container.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个备受欢迎的容器运行时平台，已经证明自己是部署云原生应用程序的强大平台。Docker在Windows、Mac和Linux等所有主要平台上都可用。由于容器需要Linux内核，因此在Linux环境中更容易运行Docker引擎。但是，在Windows和Mac环境中有多种资源可用于舒适地运行Docker容器。我们将演示如何将我们迄今为止开发的服务部署为Docker容器，包括连接到在其自己的容器中运行的外部数据库。
- en: In our examples, we will be using Docker Toolbox and using Docker Machine to
    create a VM, within which the Docker engine will be running. We will connect to
    this engine using the Docker command-line client and use the various commands
    provided.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用Docker Toolbox并使用Docker Machine创建一个VM，在其中将运行Docker引擎。我们将使用Docker命令行客户端连接到此引擎，并使用提供的各种命令。
- en: Building Docker images
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Docker镜像
- en: We will begin to containerize our current projects as a set of Docker containers.
    We will go through the steps for each of the projects.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始将我们当前的项目作为一组Docker容器进行容器化。我们将逐步介绍每个项目的步骤。
- en: Eureka server
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eureka服务器
- en: 'Add a `.dockerignore` file with the following contents in `$WORKSPACE/eureka-server/.dockerignore`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$WORKSPACE/eureka-server/.dockerignore`中添加一个`.dockerignore`文件，内容如下：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a Dockerfile with the following contents in `$WORKSPACE/eureka-server/Dockerfile`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$WORKSPACE/eureka-server/Dockerfile`中添加一个包含以下内容的Dockerfile：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Build the runnable JAR, which will be available in the target folder:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建可运行的JAR，将在目标文件夹中可用：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Build the Docker container:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Docker容器：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/42200017-a61d-439d-b4dc-428fa2f4682a.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42200017-a61d-439d-b4dc-428fa2f4682a.png)'
- en: 'Before running the container, we need to create a network on which the different
    containers can communicate freely with each other. This can be created by running
    the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行容器之前，我们需要创建一个网络，不同的容器可以在其中自由通信。可以通过运行以下命令来创建这个网络：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/9e39ed0d-67a3-4a5e-9b93-9b5d9bbe7c21.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e39ed0d-67a3-4a5e-9b93-9b5d9bbe7c21.png)'
- en: 'Run the container with the name `eureka` and attach it to the network created
    earlier:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`eureka`运行容器，并将其附加到之前创建的网络：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/82772713-3df6-42a4-974e-5bd487f590b5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82772713-3df6-42a4-974e-5bd487f590b5.png)'
- en: Product API
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 产品API
- en: 'Next we work on the product API project:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将在产品API项目上进行工作：
- en: 'Add a new Spring profile, `docker` in the `application.yml` by appending the
    following contents to the existing file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下内容附加到现有文件中，在`application.yml`中添加一个新的Spring配置文件`docker`：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Build the Spring Boot JAR to reflect changes to `application.yml`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Spring Boot JAR以反映对`application.yml`的更改：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a `.dockerignore` file with the following contents:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`.dockerignore`文件，内容如下：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a Dockerfile with the following contents:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个包含以下内容的Dockerfile：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Build the Docker container:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Docker容器：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/1936e083-c0fd-458d-bf95-2182c3abbe95.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1936e083-c0fd-458d-bf95-2182c3abbe95.png)'
- en: 'Start several Docker containers:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动多个Docker容器：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding commands is shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/a3cc2622-9d4b-405e-98cb-d34ef758054c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3cc2622-9d4b-405e-98cb-d34ef758054c.png)'
- en: 'The product API will be available at the following URLs:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 产品API将在以下URL上可用：
- en: '`http://<docker-host>:8011/product/1`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://<docker-host>:8011/product/1`'
- en: '`http://<docker-host>:8012/product/1`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://<docker-host>:8012/product/1`'
- en: Connecting to an external Postgres container
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到外部Postgres容器
- en: 'To connect the `product` API to an external database instead of an in-memory
    database, first create a container image with the data already populated in it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`product` API连接到外部数据库而不是内存数据库，首先创建一个包含数据的容器镜像：
- en: 'Create a file, `import-postgres.sql`, with the following contents:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件`import-postgres.sql`，内容如下：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `Dockerfile.postgres` with the following contents:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的`Dockerfile.postgres`：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now build the Postgres container image which will have the database initialized
    with the contents of `import-postgres.sql`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在构建包含数据库初始化内容的Postgres容器镜像：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出如下截图所示：
- en: '![](img/0f5dd173-6cab-407f-b09f-fe8ea3dcd8c3.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5dd173-6cab-407f-b09f-fe8ea3dcd8c3.png)'
- en: 'Add a new Spring profile, `postgres` to the `application.yml` by appending
    the following contents to the existing file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下内容附加到现有文件中，在`application.yml`中添加一个新的Spring配置文件`postgres`：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Ensure that you replace `<docker-host>` with the value appropriate for your
    environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将`<docker-host>`替换为适合您环境的值。
- en: 'Build the Spring Boot JAR to reflect changes to `application.yml`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Spring Boot JAR以反映对`application.yml`的更改：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Build the Docker container:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Docker容器：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![](img/1089a595-eaec-4cd2-a7e2-f88448bee18d.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1089a595-eaec-4cd2-a7e2-f88448bee18d.png)'
- en: 'If you already have containers running off the old image you can stop and remove
    them:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经有容器在旧镜像上运行，可以停止并删除它们：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Start the database container:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动数据库容器：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![](img/c281d1ed-3aae-4f73-ae03-1ffdc9694a6e.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c281d1ed-3aae-4f73-ae03-1ffdc9694a6e.png)'
- en: 'Start several Docker containers for the product API:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动几个产品API的Docker容器：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下截图所示：
- en: '![](img/c1ba1fe6-d65b-48e3-a52d-493e594b36bf.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1ba1fe6-d65b-48e3-a52d-493e594b36bf.png)'
- en: 'The product API will be available at the following URLs:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 产品API将在以下URL上可用：
- en: '`http://<docker-host>:8011/product/1`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://<docker-host>:8011/product/1`'
- en: '`http://<docker-host>:8012/product/1`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://<docker-host>:8012/product/1`'
- en: Deployment patterns
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署模式
- en: Having covered the packaging and deployment models of cloud-native applications,
    we will now cover the patterns used for deploying cloud-native applications. Traditionally,
    applications get deployed in several environments such as development, testing,
    staging, pre-production, and so on, and each of these environments might be a
    scaled-down version of the final production environment. Applications move through
    a series of pre-production environments and get deployed finally to the production
    environment. However, one significant difference is that while downtime is tolerated
    in all other environments, downtime in a production deployment could lead to serious
    business consequences.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了云原生应用程序的打包和部署模型之后，我们将介绍用于部署云原生应用程序的模式。传统上，应用程序在多个环境中部署，如开发、测试、暂存、预生产等，每个环境可能是最终生产环境的缩减版本。应用程序通过一系列预生产环境，并最终部署到生产环境。然而，一个重要的区别是，虽然其他环境中容忍停机时间，但在生产部署中的停机时间可能导致严重的业务后果。
- en: With cloud-native applications, it is possible to release software with zero
    downtime. This is achieved by the rigorous application of automation to every
    aspect of the development, testing, and deployment of the application. We will
    cover **continuous integration** (**CI**) / **continuous deployment** (**CD**)
    in a later section, but here we will cover some patterns that enable rapid deployment
    of applications. All of these patterns rely on the presence of a router component,
    which not unlike a load balancer can route requests to a certain set of application
    instances. In some cases, the application itself is built with features that are
    hidden behind feature flags, which can be enabled through changes to the application
    configuration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云原生应用程序，可以实现零停机发布软件。这是通过对开发、测试和部署的每个方面严格应用自动化来实现的。我们将在后面的部分介绍**持续集成**（**CI**）/
    **持续部署**（**CD**），但在这里我们将介绍一些能够快速部署应用程序的模式。所有这些模式都依赖于路由器组件的存在，它类似于负载均衡器，可以将请求路由到一定数量的应用实例。在某些情况下，应用程序本身构建了隐藏在功能标志后面的功能，可以通过对应用程序配置的更改来启用。
- en: Blue-green deployment
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: 'Blue-green deployment is a pattern that happens over three stages. The initial
    state of the deployment is depicted in the following figure. All the traffic to
    the application is routed to the existing instances, which are treated as the
    blue instances. A representation of blue-green deployment is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署是一个分为三个阶段的模式。部署的初始状态如下图所示。所有应用流量都路由到现有实例，这些实例被视为蓝色实例。蓝绿部署的表示如下：
- en: '![](img/f7c9ea7f-4822-4601-b318-9d079e137d2f.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7c9ea7f-4822-4601-b318-9d079e137d2f.jpg)'
- en: 'In the first stage of blue-green deployment, a new set of instances with the
    new release of the application are provisioned and become available. At this stage,
    the new green application instance is not available to the end users and the deployment
    is verified internally. This is shown here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝绿部署的第一阶段，使用新版本的应用程序的一组新实例被配置并变为可用。在这个阶段，新的绿色应用实例对最终用户不可用，并且部署在内部进行验证。如下所示：
- en: '![](img/3337e8ca-4e65-4196-b35b-125c16a298c0.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3337e8ca-4e65-4196-b35b-125c16a298c0.jpg)'
- en: 'In the next stage of the deployment, a figurative switch is thrown on the router,
    which now starts routing all the requests to the green instances instead of the
    old blue instances. The old blue instances are kept around for a period of observation
    and if any critical issues are detected we can quickly rollback the deployment
    to the older instance of the application if required:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署的下一个阶段，路由器上会打开一个象征性的开关，现在开始将所有请求路由到绿色实例，而不是旧的蓝色实例。旧的蓝色实例会保留一段时间进行观察，如果检测到任何关键问题，我们可以根据需要快速回滚部署到旧的应用实例：
- en: '![](img/180fc891-da2a-4ec2-8bb1-ca2ac06e6c4f.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/180fc891-da2a-4ec2-8bb1-ca2ac06e6c4f.jpg)'
- en: 'In the last stage of the deployment, the older blue instances of the application
    are decommissioned and the green instance becomes the next stable production release:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署的最后阶段，应用的旧蓝色实例被废弃，绿色实例成为下一个稳定的生产版本：
- en: '![](img/21619477-0763-44a9-83d3-f945bb33dd27.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21619477-0763-44a9-83d3-f945bb33dd27.jpg)'
- en: Blue-green deployments are effective when switching between two stable releases
    of an application and quick recovery is ensured by the availability of a fallback
    environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署在切换两个稳定版本的应用程序之间以及通过备用环境确保快速恢复时非常有效。
- en: Canary deployment
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: 'Canary deployment is also a variation of the blue-green deployment. Canary
    deployment addresses the wasted resources that are provisioned when running two
    production instances simultaneously, albeit for a short duration. In canary deployments,
    the green environment is a scaled-down version of the blue environment and is
    relying on the capability of the router to consistently route a small percentage
    of the requests to the new green environment, while the bulk of the requests are
    routed to the blue environment. The following figure depicts this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部署也是蓝绿部署的一种变体。金丝雀部署解决了同时运行两个生产实例时浪费资源的问题，尽管时间很短。在金丝雀部署中，绿色环境是蓝色环境的缩减版本，并且依赖路由器的能力，始终将一小部分请求路由到新的绿色环境，而大部分请求则路由到蓝色环境。以下图表描述了这一点：
- en: '![](img/76b22168-fae1-4ec4-a902-9b3f0cc10699.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76b22168-fae1-4ec4-a902-9b3f0cc10699.jpg)'
- en: 'This is particularly useful when releasing new features of an application that
    need to be tested with a few beta test users, and then based on the feedback of
    this user group rolled out to all users. Once it is ascertained that the green
    environment is ready for full rollout, instances in the green environment are
    ramped up while simultaneously, instances from the blue environment are ramped
    down. It is best illustrated by the following sequence of diagrams:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布应用程序的新功能需要与一些测试用户进行测试，然后根据这些用户群的反馈进行全面发布时，这种方法尤其有用。一旦确定绿色环境准备好全面发布，绿色环境的实例将增加，同时蓝色环境的实例将减少。以下是一系列图表的最佳说明：
- en: '![](img/b668e3dc-825b-46c1-b9ed-85e2d32535f6.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b668e3dc-825b-46c1-b9ed-85e2d32535f6.jpg)'
- en: This way the problem of having to run two production level environments is avoided,
    and there is a smooth transition from one version to the other while also providing
    an easy fallback to the old version.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就避免了运行两个生产级环境的问题，并且在从一个版本平稳过渡到另一个版本的同时，还提供了回退到旧版本的便利。
- en: Dark release
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暗部署
- en: Another popular deployment pattern that is utilized for deploying cloud-native
    applications is the dark release pattern. Here, new features are hidden behind
    feature flags and are enabled for a select group of users, or in some cases the
    users are totally unaware of the feature while the application mimics the users'
    behavior and exercises the hidden features of the application. Once the feature
    is deemed ready and stable for rollout to all users then it is enabled by toggling
    the feature flags.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常用的部署模式是暗部署模式，用于部署云原生应用程序。在这种模式下，新功能被隐藏在功能标志后，并且仅对一组特定用户启用，或者在某些情况下，用户完全不知道该功能，而应用程序模拟用户行为并执行应用程序的隐藏功能。一旦确定功能准备好并且稳定可供所有用户使用，就通过切换功能标志来启用它。
- en: Applying CI/CD to automate
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用CI/CD进行自动化
- en: One of the central aspects of cloud-native application deployment relies on
    the ability to effectively automate and build a software delivery pipeline. This
    is primarily accomplished by using CI/CD tools that can take the source code from
    the source repositories, run tests, build a deployable artifact, and deploy them
    to the target environments. Most modern CI/CD tools, such as Jenkins, provide
    support for configuring build pipelines that can be used to build several artifacts
    based on a configuration file in the form of a script.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生应用程序部署的核心方面之一在于能够有效地自动化和构建软件交付流水线。这主要是通过使用能够从源代码库获取源代码、运行测试、构建可部署构件并将其部署到目标环境的CI/CD工具来实现的。大多数现代的CI/CD工具，如Jenkins，都支持配置构建流水线，可以根据脚本形式的配置文件构建多个构件。
- en: 'We will take the example of a Jenkins pipeline script to demonstrate how a
    simple build pipeline can be configured. In our example, we will simply build
    two artifacts, namely the `eureka-server` and the `product-api` runnable JARs.
    Add a new file named `Jenkinsfile` with the following contents:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以Jenkins流水线脚本为例，演示如何配置一个简单的构建流水线。在我们的示例中，我们将简单构建两个构件，即`eureka-server`和`product-api`可运行的JAR包。添加一个名为`Jenkinsfile`的新文件，内容如下：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The pipeline script does the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线脚本的功能如下：
- en: Checks out the source code from GitHub
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub检出源代码
- en: Configures the Maven tool
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Maven工具
- en: Builds two artifacts by running the Maven build within two directories of the
    checked-out source repository
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在检出的源代码库的两个目录中运行Maven构建来构建两个构件
- en: Stores the test results and the resultant JARs from the build
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储构建的测试结果和结果JAR包
- en: 'Create a new pipeline job in Jenkins:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins中创建一个新的流水线作业：
- en: '![](img/56901c5c-41af-48b3-b314-6315c6e06ff0.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56901c5c-41af-48b3-b314-6315c6e06ff0.png)'
- en: 'In the pipeline configuration, specify the GitHub repository and the path to
    the `Jenkinsfile` in that Git repository:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在流水线配置中，指定GitHub仓库和Git仓库中`Jenkinsfile`的路径：
- en: '![](img/f9c530a7-f018-4e4e-ac6a-8a4f1e0d0f25.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9c530a7-f018-4e4e-ac6a-8a4f1e0d0f25.png)'
- en: 'On running the build, it should result in the building of two artifacts:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 运行构建后，应该会构建出两个构件：
- en: '![](img/ecbf5ebc-5677-4959-9b5f-6d59d4cfedc0.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecbf5ebc-5677-4959-9b5f-6d59d4cfedc0.png)'
- en: The pipeline script can be extended to build the Docker containers that we built
    by hand earlier in the chapter using the Docker plugin for Jenkins.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过扩展流水线脚本来构建我们在本章中手动构建的Docker容器，使用Jenkins的Docker插件。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the various deployment patterns that can be
    used for deploying cloud-native applications, and how continuous integration tools
    such as Jenkins can be used to automate the build and deployment. We also learned
    how to build and run a sample cloud-native application using Docker containers.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了可以用于部署云原生应用程序的各种部署模式，以及如何使用Jenkins等持续集成工具来自动化构建和部署。我们还学习了如何使用Docker容器构建和运行示例云原生应用程序。
