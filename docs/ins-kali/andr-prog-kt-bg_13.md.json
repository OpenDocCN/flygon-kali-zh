["```kt\n// Grab a reference to an object on the Heap\nval myTextView = findViewById<TextView>(R.id.txtTitle)\n```", "```kt\nmyTextView.text = \"Hi there\"\n```", "```kt\n// Bye bye\nmyTextView.visibility = View.GONE\n```", "```kt\nmyTextView.text = \"BOO!\"\n\n// Surprise\nmyTextView.visibility = View.VISIBLE\n```", "```kt\nVal myButton = Button()\n```", "```kt\n// Get a reference to the LinearLayout\nval linearLayout = \n   findViewById<LinearLayout>(R.id.linearLayout)\n\n// Add our Button to it\nlinearLayout.addView(myButton)\n```", "```kt\n// Create a new LinearLayout\nval linearLayout = LinearLayout()\n\n// Create a new Button\nval myButton = Button()\n\n// Add myButton to the LinearLayout\nlinearLayout.addView(myButton)\n\n// Make the LinearLayout the main view of the app\nsetContentView(linearLayout)\n```", "```kt\nval editTextContents = editText.text\n// editTextContents now contains whatever the user entered\n```", "```kt\n    val imageView = findViewById<ImageView>(R.id.imageView)\n    ```", "```kt\n// Make the image 50% TRANSPARENT\nimageView.alpha = .5f\n```", "```kt\n<RadioGroup\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"match_parent\"\n   android:layout_alignParentTop=\"true\"\n   android:layout_alignParentLeft=\"true\"\n   android:layout_alignParentStart=\"true\"\n   android:id=\"@+id/radioGroup\">\n\n   <RadioButton\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:text=\"Option 1\"\n         android:id=\"@+id/radioButton1\"\n         android:checked=\"true\" />\n\n   <RadioButton\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:text=\"Option 2\"\n         android:id=\"@+id/radioButton2\"\n         android:checked=\"false\" />\n\n   <RadioButton\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:text=\"Option 3\"\n         android:id=\"@+id/radioButton3\"\n         android:checked=\"false\" />\n\n<RadioGroup/>\n```", "```kt\n// Get a reference to all our widgets\nval radioGroup = \n   findViewById<RadioGroup>(R.id.radioGroup)\n\nval rb1 = \n   findViewById<RadioButton>(R.id.radioButton1)\n\nval rb2 = \n   findViewById<RadioButton> R.id.radioButton2)\n\nval rb3 = \n   findViewById<RadioButton>(R.id.radioButton3)\n```", "```kt\nradioGroup.setOnCheckedChangeListener {\n   group, checkedId ->\n   // Handle the clicks here\n}\n```", "```kt\nval rb = group.findViewById<RadioButton>(checkedId)\n```", "```kt\nrb.id\n```", "```kt\n// Get a reference to the RadioButton \n// that is currently checked\nval rb = group.findViewById<RadioButton>(checkedId)\n\n// branch the code based on the 'friendly' id\nwhen (rb.id) {\n\n   R.id.radioButton1->\n          // Do something here\n\n   R.id.radioButton2->\n          // Do something here\n\n   R.id.radioButton3->\n          // Do something here\n\n}\n// End when block\n```", "```kt\nmySwitch.setOnCheckedChangeListener{\n   buttonView, isChecked->\n      if(isChecked){\n            // Currently visible so hide it\n            txtValue.visibility = View.INVISIBLE\n\n      }else{\n            // Currently hidden so show it\n            txtValue.visibility = View.VISIBLE\n      }\n}\n```", "```kt\nmyCheckBox.setOnCheckedChangeListener{   \n   buttonView, isChecked->\n\n   if (myCheckBox.isChecked) {\n         // It's checked so do something\n   } else {\n         // It's not checked do something else\n   }    \n}\n```", "```kt\ntClock.timeZone = \"Europe/Brussels\"\n```", "```kt\n    ...\n    ...\n       </RadioGroup>\n\n       <EditText\n             android:id=\"@+id/editText2\"\n             android:layout_width=\"wrap_content\"\n             android:layout_height=\"wrap_content\"\n             android:layout_alignParentTop=\"true\"\n             android:layout_alignParentEnd=\"true\"\n             android:layout_marginTop=\"263dp\"\n             android:layout_marginEnd=\"105dp\"\n             android:ems=\"10\"\n             android:inputType=\"textPersonName\"\n             android:text=\"Name\" />\n\n       <Button\n             android:id=\"@+id/button2\"\n             android:layout_width=\"wrap_content\"\n             android:layout_height=\"wrap_content\"\n             android:layout_alignParentBottom=\"true\"\n             android:layout_centerHorizontal=\"true\"\n             android:layout_marginBottom=\"278dp\"\n             android:text=\"Button\" />\n\n       <!-- Insert TextClock here-->\n\n    </RelativeLayout>\n    ```", "```kt\n    <TextClock\n       android:id=\"@+id/textClock\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_alignParentBottom=\"true\"\n       android:layout_centerHorizontal=\"true\"\n       android:layout_gravity=\"center_horizontal\"\n       android:layout_marginBottom=\"103dp\" \n       android:textSize=\"54sp\" />\n    ```", "```kt\nsetContentView(R.layout.exploration_layout)\n```", "```kt\nimport androidx.appcompat.app.AppCompatActivity\nimport android.graphics.Color\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.CompoundButton\nimport android.widget.RadioButton\nimport kotlinx.android.synthetic.main.exploration_layout.*\n\n```", "```kt\n// Listen for clicks on the button,\n// the CheckBoxes and the RadioButtons\n\n// setOnCheckedChangeListener requires an interface of type\n// CompoundButton.OnCheckedChangeListener. In turn this interface\n// has a function called onCheckedChanged\n// It is all handled by the lambda\ncheckBoxTransparency.setOnCheckedChangeListener({\n   view, isChecked ->\n      if (isChecked) {\n         // Set some transparency\n         imageView.alpha = .1f\n      } else {\n         // Remove the transparency\n         imageView.alpha = 1f\n      }\n})\n```", "```kt\ncheckBoxTint.setOnCheckedChangeListener({\n   view, isChecked ->\n   if (isChecked) {\n      // Checked so set some tint\n      imageView.setColorFilter(Color.argb(150, 255, 0, 0))\n   } else {\n      // No tint required\n      imageView.setColorFilter(Color.argb(0, 0, 0, 0))\n   }\n})\n```", "```kt\ncheckBoxReSize.setOnCheckedChangeListener({\n   view, isChecked ->\n   if (isChecked) {\n      // It's checked so make bigger\n      imageView.scaleX = 2f\n      imageView.scaleY = 2f\n   } else {\n      // It's not checked make regular size\n      imageView.scaleX = 1f\n      imageView.scaleY = 1f\n   }\n})\n```", "```kt\nval rb = group.findViewById<View>(checkedId) as RadioButton\n```", "```kt\nwhen (rb.id) {\n   \u2026\n```", "```kt\n// Now for the radio buttons\n// Uncheck all buttons\nradioGroup.clearCheck()\n\nradioGroup.setOnCheckedChangeListener {\n   group, checkedId ->\n   val rb = group.findViewById<View>(checkedId) as RadioButton\n\n   when (rb.id) {\n      R.id.radioButtonLondon ->\n         textClock.timeZone = \"Europe/London\"\n\n      R.id.radioButtonBeijing ->\n         textClock.timeZone = \"CST6CDT\"\n\n      R.id.radioButtonNewYork ->\n         textClock.timeZone = \"America/New_York\"\n\n      R.id.radioButtonEuropeanEmpire ->\n         textClock.timeZone = \"Europe/Brussels\"\n   }\n}\n```", "```kt\n/*\n   Let's listen for clicks on our \"Capture\" Button.\n   The compiler has worked out that the single function\n   of the required interface has a single parameter.\n   Therefore, the syntax is shortened (->) is removed\n   and the only parameter, (should we have needed it)\n   is declared invisibly as \"it\"\n*/\nbutton.setOnClickListener {\n   // it... accesses the view that was clicked\n\n   // We want to act on the textView and editText instances\n   // Change the text on the TextView\n   // to whatever is currently in the EditText\n   textView.text = editText.text\n}\n```", "```kt\n// Show or hide the TextView\nswitch1.setOnCheckedChangeListener {\n   buttonView, isChecked ->\n   if (isChecked) {\n      textView.visibility = View.VISIBLE\n   } else {\n      textView.visibility = View.INVISIBLE\n   }\n}\n```"]