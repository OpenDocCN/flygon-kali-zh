["```java\nDo step 1\nDo step 2\nDo step 3\nDone\n```", "```java\nDo step 1\nIf there was a problem with step 1, \n     Handle the error, stop\nElse \n    Do step 2\n    If there was a problem with step 2, \n           Handle the error, stop\n    Else \n           Do step 3\n           If there was a problem with step 3\n                 Handle the error, stop\n           Else\nDone\n```", "```java\nint other_idea()\n{\n    int err = minor_func1();\n    if (!err)\n        err = minor_func2();\n    if (!err)\n        err = minor_func3();\n    return err;\n}\n```", "```java\nTry\nDo step 1\nDo step 2\nDo step 3\nCatch error\n    Handle error appropriately\nDone\n```", "```java\nTry\nDo step 1\nDo step 2 - ERROR\nDo step 3\nCatch error\n    Handle error appropriately\nDone\nTry\nDo step 4\nDo step 5 - ERROR\nDo step 6\nCatch error\n    Handle error appropriately\nDone\n```", "```java\n    public class Main {\n       public static void main(String[] args) { \n    ```", "```java\n    try {\n    System.out.println(\"result 1: \" + (2 / 2));\n    System.out.println(\"result 2: \" + (4 / 0));\n    System.out.println(\"result 3: \" + (6 / 2));\n        } catch (ArithmeticException e) {\n    System.out.println(\"---- An exception in first block\");\n    }\n    try {\n    System.out.println(\"result 4: \" + (8 / 2));\n    System.out.println(\"result 5: \" + (10 / 0));\n    System.out.println(\"result 6: \" + (12 / 2));\n    } catch (ArithmeticException e) {\n    System.out.println(\"---- An exception in second block\");\n    }\n    }\n    }\n    ```", "```java\n    result 1: 1\n    ---- An exception in block 1\n    result 4: 4\n    ---- An exception in block 2\n    ```", "```java\nimport java.io.File;\nimport java.io.FileInputStream;\npublic class Main {\n   public static void main(String[] args) {\n       File file = new File(\"./tmp.txt\");\n       FileInputStream inputStream = new FileInputStream(file);\n   }\n}\n```", "```java\npublic FileInputStream(File file) throws FileNotFoundException {\n```", "```java\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\npublic class Main {\n   public static void main(String[] args) throws FileNotFoundException {\n       File file = new File(\"input.txt\");\n       FileInputStream inputStream = new FileInputStream(file);\n   }\n}\n```", "```java\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\npublic class Main {\n   public static void main(String[] args) {\n       File file = new File(\"input.txt\");\n       try {\n           FileInputStream inputStream = new FileInputStream(file);\n       } catch (FileNotFoundException e) {\n           e.printStackTrace();\n       }\n   }\n}\n```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) {\n    ```", "```java\n    File file = new File(\"input.txt\");\n    FileInputStream fileInputStream = new FileInputStream(file);\n    ```", "```java\n    int data = 0;\n    while(data != -1) {\n    data = fileInputStream.read();\n    System.out.println(data);\n         }\n         fileInputStream.close();\n       }\n    }\n    ```", "```java\n    Exception in thread \"main\" java.io.FileNotFoundException: input.txt (The system cannot find the file specified)\n    at java.io.FileInputStream.open0(Native Method)\n    at java.io.FileInputStream.open(FileInputStream.java:195)\n    at java.io.FileInputStream.<init>(FileInputStream.java:138)\n    at Main.main(Main.java:9)\n    ```", "```java\n    97\n    98\n    99\n    -1\n    ```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    public class Main {\n       public static void main(String[] args) {\n           File file = new File(\"input.txt\");\n           FileInputStream fileInputStream = new FileInputStream(file);\n           int data = 0;\n           while(data != -1) {\n              data = fileInputStream.read();\n              System.out.println(data);\n           }\n           fileInputStream.close();\n       }\n    }\n    ```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.FileNotFoundException;\n    public class Main {\n       public static void main(String[] args) {\n           File file = new File(\"input.txt\");\n           FileInputStream fileInputStream = null;\n           try {\n               fileInputStream = new FileInputStream(file);\n\n               int data = 0;\n               while(data != -1) {\n                   data = fileInputStream.read();\n                   System.out.println(data);\n               }\n               fileInputStream.close();\n           } catch (FileNotFoundException e) {\n               e.printStackTrace();\n           }\n       }\n    }\n    ```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.FileNotFoundException;\n    import java.io.IOException;\n    public class Main {\n       public static void main(String[] args) {\n           File file = new File(\"input.txt\");\n           FileInputStream fileInputStream = null;\n           try {\n               fileInputStream = new FileInputStream(file);\n               int data = 0;\n               while(data != -1) {\n                   data = fileInputStream.read();\n                   System.out.println(data);\n               }\n               fileInputStream.close();\n           } catch (FileNotFoundException e) {\n               e.printStackTrace();\n           } catch (IOException e) {\n               e.printStackTrace();\n           }\n       }\n    }\n    ```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.FileNotFoundException;\n    public class Main {\n       public static void main(String[] args) {\n           File file = new File(\"input.txt\");\n           FileInputStream fileInputStream = null;\n           try {\n               fileInputStream = new FileInputStream(file);\n           } catch (FileNotFoundException e) {\n               e.printStackTrace();\n           }\n           if (fileInputStream != null) {\n               int data = 0;\n               while(data != -1) {\n                   data = fileInputStream.read();\n                   System.out.println(data);\n               }\n               fileInputStream.close();\n           }\n       }\n    }\n    ```", "```java\n    import java.io.File;\n    import java.io.FileInputStream;\n    import java.io.FileNotFoundException;\n    import java.io.IOException;\n    public class Main {\n       public static void main(String[] args) {\n           File file = new File(\"input.txt\");\n           FileInputStream fileInputStream = null;\n           try {\n               fileInputStream = new FileInputStream(file);\n           } catch (FileNotFoundException e) {\n               e.printStackTrace();\n           }\n           if (fileInputStream != null) {\n               try {\n                   int data = 0;\n                   while(data != -1) {\n                       data = fileInputStream.read();\n                       System.out.println(data);\n                   }\n                   fileInputStream.close();\n               } catch (IOException e) {\n                   e.printStackTrace();\n               }\n           }\n       }\n    }\n    ```", "```java\nint other_idea()\n{\n    int err = minor_func1();\n    if (!err)\n        err = minor_func2();\n    if (!err)\n        err = minor_func3();\n    return err;            \n}\n```", "```java\nint otherIdea() {\n   try {\n       minorFunc1();\n       minorFunc2();\n       minorFunc3();\n   } catch (IOException e) {\n       // handle IOException\n   } catch (NullPointerException e) {\n       // handle NullPointerException\n   }\n}\n```", "```java\n    import java.io.IOException;\n    import java.util.Random;\n    ```", "```java\n    public class Main {\n       Random rand = new Random();\n    ```", "```java\n    void thFunction1() throws IOException {\n           System.out.println(\"thFunction1 start\");\n           if (rand.nextInt(10) < 2) {\n               throw new IOException(\"An I/O exception occurred in thFunction1\");\n           }\n           System.out.println(\"thFunction1 done\");\n       }\n       void thFunction2() throws IOException, InterruptedException {\n           System.out.println(\"thFunction2 start\");\n           int r = rand.nextInt(10);\n           if (r < 2) {\n               throw new IOException(\"An I/O exception occurred in thFunction2\");\n           }\n           if (r > 8) {\n               throw new InterruptedException(\"An interruption occurred in thFunction2\");\n           }\n           System.out.println(\"thFunction2 done\");\n       }\n    ```", "```java\n    private static final int EC_NONE = 0;\n    private static final int EC_IO = 1;\n    private static final int EC_INTERRUPTION = 2;\n    ```", "```java\n    int ecFunction1() {\n    System.out.println(\"ecFunction1 start\");\n    if (rand.nextInt(10) < 2) {\n    return EC_IO;\n    }\n    System.out.println(\"thFunction1 done\");\n    return EC_NONE;\n    }\n    int ecFunction2() {\n    System.out.println(\"ecFunction2 start\");\n    int r = rand.nextInt(10);\n    if (r < 2) {\n    return EC_IO;\n    }\n    if (r > 8) {\n    return EC_INTERRUPTION;\n    }\n    System.out.println(\"ecFunction2 done\");\n           return EC_NONE;\n    }\n    ```", "```java\n    private void callThrowingFunctions() {\n    try {\n    thFunction1();\n    thFunction2();\n    } catch (IOException e) {\n    System.out.println(e.getLocalizedMessage());\n    e.printStackTrace();\n    } catch (InterruptedException e) {\n    System.out.println(e.getLocalizedMessage());\n    e.printStackTrace();\n    }\n    }\n    ```", "```java\n    private void callErrorCodeFunctions() {\n    int err = ecFunction1();\n    if (err != EC_NONE) {\n    if (err == EC_IO) {\n    System.out.println(\"An I/O exception occurred in ecFunction1.\");\n    }\n    }\n    err = ecFunction2();\n    switch (err) {\n    case EC_IO:\n    System.out.println(\"An I/O exception occurred in ecFunction2.\");\n    break;\n    case EC_INTERRUPTION:\n    System.out.println(\"An interruption occurred in ecFunction2.\");\n    break;\n    }\n    }\n    ```", "```java\n   public static void main(String[] args) {\n       Main main = new Main();\n       main.callThrowingFunctions();\n       main.callErrorCodeFunctions();\n   }\n}\n```", "```java\nthFunction1 start\nthFunction1 done\nthFunction2 start\nAn interruption occurred in thFunction2\njava.lang.InterruptedException: An interruption occurred in thFunction2\n    at Main.thFunction2(Main.java:24)\n    at Main.callThrowingFunctions(Main.java:58)\n    at Main.main(Main.java:88)\necFunction1 start\nthFunction1 done\necFunction2 start\nthFunction2 done\n```", "```java\nthFunction1 start\nthFunction1 done\nthFunction2 start\nthFunction2 done\necFunction1 start\nAn I/O exception occurred in ecFunction1.\necFunction2 start\necFunction2 done\n```", "```java\nimport java.io.IOException;\npublic class Main {\n   private static void myFunction() {\n       throw new IOException(\"hello\");\n   }\n   public static void main(String[] args) {\n       myFunction();\n   }\n}\n```", "```java\nimport java.io.IOException;\npublic class Main {\n   private static void myFunction() throws IOException {\n       throw new IOException(\"hello\");\n   }\n   public static void main(String[] args) {\n       myFunction();\n   }\n}\n```", "```java\n    import java.io.IOException;\n    public class Main {\n       private static void myFunction() throws IOException {\n           throw new IOException(\"hello\");\n       }\n       public static void main(String[] args) {\n           myFunction();\n       }\n    }\n    ```", "```java\n    import java.io.IOException;\n    public class Main {\n       private static void myFunction() throws IOException {\n           throw new IOException(\"hello\");\n       }\n       public static void main(String[] args) throws IOException {\n           myFunction();\n       }\n    }\n    ```", "```java\n    import java.io.IOException;\n    public class Main {\n       private static void myFunction() throws IOException {\n           throw new IOException(\"hello\");\n       }\n       public static void main(String[] args) {\n           try {\n               myFunction();\n           } catch (IOException e) {\n               e.printStackTrace();\n           }\n       }\n    }\n    ```", "```java\n    public class Main {\n    public static void main(String[] args) {\n    int i = Integer.parseInt(\"this is not a number\");\n    }\n    }\n    ```", "```java\n    Exception in thread \"main\" java.lang.NumberFormatException: For input string: \"this is not a number\"\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n        at java.lang.Integer.parseInt(Integer.java:580)\n        at java.lang.Integer.parseInt(Integer.java:615)\n        at Main.main(Main.java:6)\n    ```", "```java\n    public class Main {\n    public static void main(String[] args) {\n    try {\n    int i = Integer.parseInt(\"this is not a number\");\n    } catch (NumberFormatException e) {\n    System.out.println(\"Sorry, the string does not contain an integer.\");\n    }\n    }\n    }\n    ```", "```java\n    Sorry, the string does not contain an integer.\n    ```", "```java\nThrowable t;\n```", "```java\n    public class Main {\n    public static void useDigitString(String digitString) {\n    if (digitString.isEmpty()) {\n    throw new IllegalArgumentException(\"An empty string was given instead of a digit\");\n    }\n    if (digitString.length() > 1) {\n    throw new NumberFormatException(\"Please supply a string with a single digit\");\n    }\n    }\n    }\n    ```", "```java\n    public class Main {\n       public static void useDigitString(String digitString) {\n           if (digitString.isEmpty()) {\n               throw new IllegalArgumentException(\"An empty string was given instead of a digit\");\n           }\n           if (digitString.length() > 1) {\n               throw new NumberFormatException(\"Please supply a string with a single digit\");\n           }\n           System.out.println(digitString);\n       }\n       private static void runDigits() {\n           try {\n               useDigitString(\"1\");\n               useDigitString(\"23\");\n               useDigitString(\"4\");\n           } catch (NumberFormatException e) {\n               System.out.println(\"A number format problem occurred: \" + e.getMessage());\n           }\n           try {\n               useDigitString(\"5\");\n               useDigitString(\"\");\n               useDigitString(\"7\");\n           } catch (NumberFormatException e) {\n               System.out.println(\"A number format problem occured: \" + e.getMessage());\n           }\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           try {\n               runDigits();\n           } catch (IllegalArgumentException e) {\n               System.out.println(\"An illegal argument was provided: \" + e.getMessage());\n           }\n       }\n    }\n    ```", "```java\n    class EmptyInputException extends Exception {\n    }\n    ```", "```java\n    class EmptyInputException extends Exception {\n    }\n    public class Main {\n       public static void useDigitString(String digitString) throws EmptyInputException {\n           if (digitString.isEmpty()) {\n               throw new EmptyInputException();\n           }\n           if (digitString.length() > 1) {\n               throw new NumberFormatException(\"Please supply a string with a single digit\");\n           }\n           System.out.println(digitString);\n       }\n       private static void runDigits() throws EmptyInputException {\n           try {\n               useDigitString(\"1\");\n               useDigitString(\"23\");\n               useDigitString(\"4\");\n           } catch (NumberFormatException e) {\n               System.out.println(\"A number format problem occured: \" + e.getMessage());\n           }\n           try {\n               useDigitString(\"5\");\n               useDigitString(\"\");\n               useDigitString(\"7\");\n           } catch (NumberFormatException e) {\n               System.out.println(\"A number format problem occured: \" + e.getMessage());\n           }\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           try {\n               runDigits();\n           } catch (EmptyInputException e) {\n               System.out.println(\"An empty string was provided\");\n           }\n       }\n    }\n    ```", "```java\n    1\n    A number format problem occured: Please supply a string with a single digit\n    5\n    An empty string was provided\n    ```", "```java\n    Enter name of visitor: John\n    Enter John's age: 20\n    John is riding the roller coaster.\n    Enter name of visitor: Jack\n    Enter Jack's age: 13\n    Jack is 13 years old, which is too young to ride.\n    Enter name of visitor: \n    ```", "```java\ntry {\n   // the try block\n} catch (Exception e) {\n   // the catch block, can be multiple \n}\n```", "```java\ntry {\n   // line1, fine\n   // line2, fine\n   // line3, EXCEPTION!\n   // line4, skipped\n   // line5, skipped\n} catch (Exception e) {\n   // comes here after line3\n}\n```", "```java\n    public class Main {\n       public static void main(String[] args) {\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           }\n       }\n    }\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) throws Exception {\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           }\n       }\n    }\n    ```", "```java\n    line 0\n    line 1\n    line 2\n    line 3\n    Exception in thread \"main\" java.lang.Exception: EXCEPTION!\n        at Main.main(Main.java:8)\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) {\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           }\n       }\n    }\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) {\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           } catch (Exception e) {\n               e.printStackTrace();\n           }\n       }\n    }\n    ```", "```java\n    public class Main {\n       public static void main(String[] args) {\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (Exception e) {\n               e.printStackTrace();\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           }\n       }\n    }\n    ```", "```java\n    public class Main {\n       private static void method3() throws Exception {\n           System.out.println(\"Begin method 3\");\n           try {\n               for (int i = 0; i < 5; i++) {\n                   System.out.println(\"line \" + i);\n                   if (i == 3) throw new Exception(\"EXCEPTION!\");\n               }\n           } catch (InstantiationException e) {\n               System.out.println(\"Caught an InstantiationException\");\n           }\n           System.out.println(\"End method 3\");\n       }\n       private static void method2() throws Exception {\n           System.out.println(\"Begin method 2\");\n           method3();\n           System.out.println(\"End method 2\");\n       }\n       private static void method1() {\n           System.out.println(\"Begin method 1\");\n           try {\n               method2();\n           } catch (Exception e) {\n               System.out.println(\"method1 caught an Exception!: \" + e.getMessage());\n               System.out.println(\"Also, below is the stack trace:\");\n               e.printStackTrace();\n           }\n           System.out.println(\"End method 1\");\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           System.out.println(\"Begin main\");\n           method1();\n           System.out.println(\"End main\");\n       }\n    }\n    ```", "```java\n    Begin main\n    Begin method 1\n    Begin method 2\n    Begin method 3\n    line 0\n    line 1\n    line 2\n    line 3\n    method1 caught an Exception!: EXCEPTION!\n    Also, below is the stack trace:\n    java.lang.Exception: EXCEPTION!\n        at Main.method3(Main.java:8)\n        at Main.method2(Main.java:18)\n        at Main.method1(Main.java:25)\n        at Main.main(Main.java:36)\n    End method 1\n    End main\n    ```", "```java\nimport java.io.IOException;\npublic class Main {\npublic static void method1() throws IOException {\nSystem.out.println(4/0);\n}\npublic static void main(String[] args) {\ntry {\nSystem.out.println(\"line 1\");\nmethod1();\nSystem.out.println(\"line 2\");\n} catch (IOException|ArithmeticException e) {\nSystem.out.println(\"An IOException or a ArithmeticException was thrown. Details below.\");\ne.printStackTrace();\n}\n}\n}\n```", "```java\nline 1\nAn IOException or a ArithmeticException was thrown. Details below.\njava.lang.ArithmeticException: / by zero\n    at Main.method1(Main.java:6)\n    at Main.main(Main.java:12)\n```", "```java\n    Enter name of visitor: John\n    Enter John's age: 20\n    Enter John's height: 180\n    John is riding the roller coaster.\n    Enter name of visitor: Jack\n    Enter Jack's age: 13\n    Jack is 13 years old, which is too young to ride.\n    Enter name of visitor: Jill\n    Enter Jill's age: 16\n    Enter Jill's height: 120\n    Jill is 120 cm tall, which is too short to ride.\n    Enter name of visitor: \n    ```", "```java\n    public class Main {\n    public static int parseUsersAge(String ageString) {\n    return Integer.parseInt(ageString);\n    }\n    public static void readUserInfo()  {\n    int age = parseUsersAge(\"fifty five\");\n    }\n    public static void main(String[] args) {\n    readUserInfo();\n    }\n    }\n    ```", "```java\n    Exception in thread \"main\" java.lang.NumberFormatException: For input string: \"fifty five\"\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n        at java.lang.Integer.parseInt(Integer.java:580)\n        at java.lang.Integer.parseInt(Integer.java:615)\n        at Main.parseUsersAge(Main.java:4)\n        at Main.readUserInfo(Main.java:8)\n        at Main.main(Main.java:12)\n    ```", "```java\n    public class Main {\n    public static int parseUsersAge(String ageString) {\n    return Integer.parseInt(ageString);\n    }\n    public static void readUserInfo() throws Exception {\n    try {\n    int age = parseUsersAge(\"fifty five\");\n    } catch (NumberFormatException e) {\n    throw new Exception(\"Problem while parsing user's age\", e);\n    }\n    }\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n    readUserInfo();\n    }\n    }\n    ```", "```java\n    Exception in thread \"main\" java.lang.Exception: Problem while parsing user's age\n        at Main.readUserInfo(Main.java:11)\n        at Main.main(Main.java:16)\n    Caused by: java.lang.NumberFormatException: For input string: \"fifty five\"\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n        at java.lang.Integer.parseInt(Integer.java:580)\n        at java.lang.Integer.parseInt(Integer.java:615)\n        at Main.parseUsersAge(Main.java:4)\n        at Main.readUserInfo(Main.java:9)\n        ... 1 more\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    public class Main {\n    private static void useTheFile(String s) {\n    System.out.println(s);\n    throw new RuntimeException(\"oops\");\n    }\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n    try {\n    BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"));\n    System.out.println(\"opened the file\");\n    useTheFile(br.readLine());\n    br.close();\n    System.out.println(\"closed the file\");\n    } catch (Exception e) {\n    System.out.println(\"caught an exception while reading the file\");\n    }\n    }\n    }\n    ```", "```java\n    opened the file\n    line 1 from the file\n    caught an exception while reading the file\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    public class Main {\n    private static void useTheFile(String s) {\n    System.out.println(s);\n    throw new RuntimeException(\"oops\");\n    }\n    public static void main(String[] args) throws Exception {\n    BufferedReader br = null;\n    try {\n    br = new BufferedReader(new FileReader(\"input.txt\"));\n    System.out.println(\"opened the file\");\n    useTheFile(br.readLine());\n    br.close();\n    System.out.println(\"closed the file\");\n    } catch (IOException e) {\n    System.out.println(\"caught an I/O exception while reading the file\");\n    br.close();\n    System.out.println(\"closed the file\");\n    } catch (Exception e) {\n    System.out.println(\"caught an exception while reading the file\");\n    br.close();\n    System.out.println(\"closed the file\");\n    }\n    }\n    }\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    public class Main {\n    private static void useTheFile(String s) {\n    System.out.println(s);\n    throw new RuntimeException(\"oops\");\n    }\n    public static void main(String[] args) throws Exception {\n    BufferedReader br = null;\n    try {\n    br = new BufferedReader(new FileReader(\"input.txt\"));\n    System.out.println(\"opened the file\");\n    useTheFile(br.readLine());\n    } catch (IOException e) {\n    System.out.println(\"caught an I/O exception while reading the file\");\n    throw new Exception(\"something is wrong with I/O\", e);\n    } catch (Exception e) {\n    System.out.println(\"caught an exception while reading the file\");\n    }\n    br.close();\n    System.out.println(\"closed the file\");\n    }\n    }\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    public class Main {\n    private static void useTheFile(String s) {\n    System.out.println(s);\n    throw new RuntimeException(\"oops\");\n    }\n    public static void main(String[] args) throws Exception {\n    BufferedReader br = null;\n    try {\n    br = new BufferedReader(new FileReader(\"input.txt\"));\n    System.out.println(\"opened the file\");\n    useTheFile(br.readLine());\n    } catch (IOException e) {\n    System.out.println(\"caught an I/O exception while reading the file\");\n    throw new Exception(\"something is wrong with I/O\", e);\n    } catch (Exception e) {\n    System.out.println(\"caught an exception while reading the file\");\n    } finally {\n    br.close();\n    System.out.println(\"closed the file\");\n    }\n    }\n    }\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    public class Main {\n       private static void useTheFile(String s) {\n           System.out.println(s);\n           throw new RuntimeException(\"oops\");\n       }\n       public static void main(String[] args) throws Exception {\n           BufferedReader br = null;\n           try {\n               br = new BufferedReader(new FileReader(\"input.txt\"));\n               System.out.println(\"opened the file\");\n               useTheFile(br.readLine());\n           } catch (IOException e) {\n               System.out.println(\"caught an I/O exception while reading the file\");\n               throw new Exception(\"something is wrong with I/O\", e);\n           } catch (Exception e) {\n               System.out.println(\"caught an exception while reading the file\");\n           } finally {\n               if (br != null) {\n                   br.close();\n                   System.out.println(\"closed the file\");\n               }\n           }\n       }\n    }\n    ```", "```java\n    Enter name of visitor: John\n    Enter John's age: 20\n    Enter John's height: 180\n    John is riding the roller coaster.\n    Escorting John outside the premises. \n    Enter name of visitor: Jack\n    Enter Jack's age: 13\n    Jack is 13 years old, which is too young to ride.\n    Escorting Jack outside the premises. \n    Enter name of visitor: Jill\n    Enter Jill's age: 16\n    Enter Jill's height: 120\n    Jill is 120 cm tall, which is too short to ride.\n    Escorting Jill outside the premises. \n    Enter name of visitor: \n    ```", "```java\ntry(Resource r1 = Resource(); OtherResource r2 = OtherResource()) {\n    r1.useResource();\n    r2.useOtherResource();\n} // don't worry about closing the resources\n```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    ```", "```java\n    public class Main {\n       private static void useTheFile(String s) {\n           System.out.println(s);\n           throw new RuntimeException(\"oops\");\n       }\n    ```", "```java\n    public static void main(String[] args) throws Exception {\n           try (BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"))) {\n               System.out.println(\"opened the file, which will be closed automatically\");\n               useTheFile(br.readLine());\n           } catch (IOException e) {\n               System.out.println(\"caught an I/O exception while reading the file\");\n               throw new Exception(\"something is wrong with I/O\", e);\n           } catch (Exception e) {\n               System.out.println(\"caught an exception while reading the file\");\n           }\n       }\n    }\n    ```", "```java\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Main {\n       private static List<Integer> parseIntegers(List<String> inputList) {\n           List<Integer> integers = new ArrayList<>();\n           for(String s: inputList) {\n               integers.add(Integer.parseInt(s));\n           }\n           return integers;\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           List<String> inputList = new ArrayList<>();\n           inputList.add(\"1\");\n           inputList.add(\"two\");\n           inputList.add(\"3\");\n\n           List<Integer> outputList = parseIntegers(inputList);\n\n           int sum = 0;\n           for(Integer i: outputList) {\n               sum += i;\n           }\n           System.out.println(\"Sum is \" + sum);\n       }\n    }\n    ```", "```java\n    Exception in thread \"main\" java.lang.NumberFormatException: For input string: \"two\"\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n        at java.lang.Integer.parseInt(Integer.java:580)\n        at java.lang.Integer.parseInt(Integer.java:615)\n        at Main.parseIntegers(Main.java:9)\n        at Main.main(Main.java:20)\n    ```", "```java\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Main {\n       private static List<Integer> parseIntegers(List<String> inputList) {\n           List<Integer> integers = new ArrayList<>();\n           for(String s: inputList) {\n               try {\n                   integers.add(Integer.parseInt(s));\n               } catch (NumberFormatException e) {\n                   System.out.println(\"could not parse an element: \" + s);\n               }\n           }\n           return integers;\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           List<String> inputList = new ArrayList<>();\n           inputList.add(\"1\");\n           inputList.add(\"two\");\n           inputList.add(\"3\");\n           List<Integer> outputList = parseIntegers(inputList);\n           int sum = 0;\n           for(Integer i: outputList) {\n               sum += i;\n           }\n           System.out.println(\"Sum is \" + sum);\n       }\n    }\n    ```", "```java\n    could not parse an element: two\n    Sum is 4\n    ```", "```java\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Main {\n   private static List<Integer> parseIntegers(List<String> inputList) {\n       List<Integer> integers = new ArrayList<>();\n       for(String s: inputList) {\n           integers.add(Integer.parseInt(s));\n       }\n       return integers;\n   }\n   public static void main(String[] args) {\n       List<String> inputList = new ArrayList<>();\n       inputList.add(\"1\");\n       inputList.add(\"two\");\n       inputList.add(\"3\");\n       try {\n           List<Integer> outputList = parseIntegers(inputList);\n           int sum = 0;\n           for(Integer i: outputList) {\n               sum += i;\n           }\n           System.out.println(\"Sum is \" + sum);\n       } catch (NumberFormatException e) {\n           System.out.println(\"There was a non-number element in the list. Rejecting.\");\n       }\n   }\n}\n```", "```java\nThere was a non-number element in the list. Rejecting.\n```", "```java\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.Scanner;\n    class NonNumberInListException extends Exception {\n       public int index;\n       NonNumberInListException(int index, Throwable cause) {\n           super(cause);\n           this.index = index;\n       }\n    }\n    public class Main {\n       private static List<Integer> parseIntegers(List<String> inputList) throws NonNumberInListException {\n           List<Integer> integers = new ArrayList<>();\n           int index = 0;\n           for(String s: inputList) {\n               try {\n                   integers.add(Integer.parseInt(s));\n               } catch (NumberFormatException e) {\n                   throw new NonNumberInListException(index, e);\n               }\n               index++;\n           }\n           return integers;\n       }\n    ```", "```java\n       public static void main(String[] args) {\n           List<String> inputList = new ArrayList<>();\n           inputList.add(\"1\");\n           inputList.add(\"two\");\n           inputList.add(\"3\");\n           boolean done = false;\n           while (!done) {\n               try {\n                   List<Integer> outputList = parseIntegers(inputList);\n                   int sum = 0;\n                   for(Integer i: outputList) {\n                       sum += i;\n                   }\n                   System.out.println(\"Sum is \" + sum);\n                   done = true;\n               } catch (NonNumberInListException e) {\n                   System.out.println(\"This element does not seem to be a number: \" + inputList.get(e.index));\n                   System.out.print(\"Please provide a number instead: \");\n                   Scanner scanner = new Scanner(System.in);\n                   String newValue = scanner.nextLine();\n                   inputList.set(e.index, newValue);\n               }\n           }\n       }\n    }\n    ```", "```java\n    This element does not seem to be a number: two\n    Please provide a number instead: 2\n    Sum is 6\n    ```"]