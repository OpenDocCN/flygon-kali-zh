- en: Chapter 11. Demonstrating Functional Reactive Programming in JavaScript with
    a Live Example Part IV – Adding a Scratchpad and Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。用实例演示JavaScript中的函数式响应式编程，第四部分 - 添加一个草稿本并将所有内容整合在一起
- en: In this chapter, we will cover the three last endeavors intended to put it all
    together and finish our sample ReactJS application. Earlier chapters dealt with
    a basic custom-made component made with 100 percent ReactJS. This chapter is different
    in making a valid components, that works with ReactJS while drawing on a significant
    non-ReactJS-based tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖最后三个努力，旨在将所有内容整合在一起，完成我们的示例ReactJS应用程序。早期的章节涉及使用100％ReactJS制作的基本定制组件。本章不同之处在于制作有效的组件，该组件在使用ReactJS的同时利用了一个重要的非ReactJS工具。
- en: Having made the last component, we will integrate them into one page, where
    each of the four components is placed in its quarter of the page. This is different
    from development, where we gave the tool under development the whole page. This
    will be the second major section of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 制作了最后一个组件后，我们将把它们整合到一个页面中，其中四个组件中的每一个都放在页面的一个部分。这与开发不同，开发中我们将正在开发的工具放在整个页面下。这将是本章的第二个主要部分。
- en: So far, the page has no way of keeping track of the state. Suppose you make
    an entry in the calendar, a to-do item, or make some notes in the scratchpad.
    Then, if you navigate away and come back or reload the page, all your changes
    will be lost. It would be nice to have the changes remembered, and this is exactly
    what we will do next. In the third, and last, major section in this chapter, we
    will introduce a cheap, homegrown HTML5 localStorage-based persistence solution
    that works surprisingly well. It does not let you access your data from multiple
    computers, but let's leave that alone for now and just work on persistence on
    the same computer.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，页面还没有跟踪状态的方法。假设您在日历中输入了一个条目，待办事项，或在草稿本中做了一些笔记。然后，如果您导航离开并返回或重新加载页面，所有更改都将丢失。有一个记住更改的方法会很好，这正是我们接下来要做的。在本章的第三个，也是最后一个主要部分中，我们将介绍一种便宜的、自制的基于HTML5
    localStorage的持久性解决方案，它的效果出奇的好。它不允许您从多台计算机访问您的数据，但现在让我们把它放在一边，只在同一台计算机上进行持久性工作。
- en: 'The overall application is intended to handle personal information management/logistics:
    a scratchpad for any information, a to-do list, a calendar, and a stub of whining
    artificial intelligence that is meant to be replaced by something interesting
    of your own devising.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 整体应用程序旨在处理个人信息管理/后勤：任何信息的草稿本，待办事项列表，日历，以及一个用于替换为您自己设计的有趣内容的抱怨人工智能的残留部分。
- en: Adding a WYSIWYG scratchpad, courtesy CKeditor
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个所见即所得的草稿本，感谢CKeditor
- en: 'There are multiple **What You See Is What You Get** (**WYSIWYG**) editors out
    here, and the choice of CKeditor is not much a judgment that CKeditor is the uncontested
    king of free and paid editors as a common choice. We will see how to ask ReactJS
    to leave part of the DOM alone (and in this case, not clobber our CKeditor instance).
    We will cover these topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有多个所见即所得（WYSIWYG）编辑器，而选择CKeditor并不是CKeditor是免费和付费编辑器的无可争议的选择。我们将看看如何要求ReactJS不要干涉DOM的一部分（在这种情况下，不要破坏我们的CKeditor实例）。我们将涵盖以下主题：
- en: Why use something such as CKeditor when it doesn't work similar to ReactJS?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用像CKeditor这样的东西，它的工作方式与ReactJS不太相似？
- en: Installing a "small is beautiful" take on CKeditor, with a look at which edition
    is the best
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个“小即美”的CKeditor版本，看看哪个版本最好
- en: Including CKeditor in our page, with an emphasis on JSX
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的页面中包含CKeditor，重点是JSX
- en: Bringing all things together into one web page
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合到一个网页中
- en: 'We''ve done almost everything together. We will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎做完了所有的事情。我们将涵盖以下主题：
- en: Adjusting the JSX so that all our features are now uncommented. This is a very
    simple step.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整JSX，以便现在所有我们的功能都是未注释的。这是一个非常简单的步骤。
- en: CSS styling that lets everything fit. We arrange the components in a 2 x 2 grid,
    but this could be replaced by pretty much any styling approach that would fit
    the components on a page.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS样式让一切都适合。我们将组件排列在2x2的网格中，但这可以被几乎任何适合在页面上放置组件的样式方法所替代。
- en: Bringing in elementary data persistence which displays the components together.
    This will include some basic, non-exhaustive CSS work.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入显示组件的基本数据持久性。这将包括一些基本的、非穷尽的CSS工作。
- en: In the interests of offering a complete sample application, the user-interface-centric
    application we have been developing will include basic persistence on your computer,
    in this case humbly implemented with HTML5 localStorage. This means that one computer,
    without sign-in or other annoyances, will be able to persistently use data.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了提供一个完整的示例应用程序，我们一直在开发的面向用户界面的应用程序将在您的计算机上包含基本的持久性，本例中谦逊地使用HTML5 localStorage实现。这意味着一个计算机，无需登录或其他麻烦，将能够持久地使用数据。
- en: A few simple `JSON.stringify()` calls work and lay a foundation for a more common
    style of remote, server-based persistence. The data is stringified through `JSON.stringify()`,
    which is not specifically needed with localStorage, but makes the code slightly
    more ready to swap out the localStorage references alone and replace them with
    a potentially remote server of choice.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些简单的`JSON.stringify()`调用可以为更常见的远程、基于服务器的持久性奠定基础。数据通过`JSON.stringify()`进行字符串化，这在localStorage中并不是特别需要，但使代码稍微更容易替换掉localStorage引用，并将其替换为潜在的远程服务器。
- en: Causing the CKeditor state to persist. Some experienced programmers, on being
    asked to create a localStorage persistence solution for the component state, might
    reasonably guess our solution for everything but the scratchpad. The scratchpad
    has some gotchas for Web 2.0 work, because CKeditor has some gotchas for Web 2.0
    work.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使CKeditor状态持久化。一些有经验的程序员，在被要求为组件状态创建一个localStorage持久性解决方案时，可能会合理地猜测我们的解决方案，除了草稿本。草稿本对Web
    2.0工作有一些难点，因为CKeditor对Web 2.0工作有一些难点。
- en: The entire system working together may be seen at [http://demo.pragmatometer.com/](http://demo.pragmatometer.com/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 整个系统一起运行可以在[http://demo.pragmatometer.com/](http://demo.pragmatometer.com/)上看到。
- en: This book is about ReactJS, so why use CKeditor?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这本书是关于ReactJS的，那为什么要使用CKeditor？
- en: It might, in general, be suggested that it is better to have something that
    works with the declarative spirit of ReactJS and one-way data bindings. If you
    have a choice between a good implementation of something such as CKeditor that
    doesn't particularly work in a similar way to ReactJS, and some other component
    made that fits in nicely with ReactJS and handles WYSIWYG well, you should go
    with the component that fits ReactJS well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，可以建议最好使用符合ReactJS声明性精神和单向数据绑定的东西。如果您可以选择一个像CKeditor这样的东西的良好实现，它并不特别与ReactJS以类似的方式工作，以及其他一些与ReactJS很好地融合并很好地处理所见即所得的组件，您应该选择与ReactJS很好地融合的组件。
- en: 'This book is intended to help you with either side of a fork on the road. It
    includes development with and without JSX, both legacy and green field development,
    one-way and two-way data binding, and (here) purely ReactJS components versus
    integrating with non-ReactJS JavaScript tools. The good news is that ReactJS is
    good at playing nicely with other children. Tools from all across the world of
    JavaScript are at least potentially available for you, not just the sliver explicitly
    developed for work with ReactJS. Perhaps you may have the luxury of working with
    pure ReactJS components. Perhaps you want, need, or have to use some JavaScript
    tool that was not built with any ReactJS integration in mind. Here''s the good
    news: in either case, ReactJS probably has covered. In this chapter, we will use
    a standard non-ReactJS tool—the famous and well-established CKeditor, which ReactJS
    lets us integrate into our web page quite well.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书旨在帮助您在道路的叉口两侧。它包括使用JSX和不使用JSX的开发，传统和全新的开发，单向和双向数据绑定，以及（在这里）纯ReactJS组件与集成非ReactJS
    JavaScript工具。好消息是，ReactJS擅长与其他工具友好相处。来自JavaScript世界各地的工具至少可能都可以为您提供帮助，而不仅仅是专门为ReactJS工作而开发的一小部分。也许您有幸使用纯ReactJS组件。也许您想要、需要或者不得不使用一些没有考虑到任何ReactJS集成的JavaScript工具。好消息是：在任何一种情况下，ReactJS可能都已经覆盖了。在本章中，我们将使用标准的非ReactJS工具-著名且成熟的CKeditor，ReactJS让我们很好地将其集成到我们的网页中。
- en: CKeditor – small free offerings, and small is beautiful
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CKeditor-小而美的免费提供
- en: 'There are several free and commercial editors available; one such editor is
    CKeditor, (its home page is at [http://ckeditor.com/](http://ckeditor.com/)).
    CKeditor comes with four basic options: *Basic*, *Standard*, *Full*, as well as
    a *Custom* option that allows complete freedom in selecting and deselecting optional
    functionality. For this project, we will use the *Basic* option. This is not a
    service for a user to present an overwhelming array of rows of buttons, and the
    correct question regarding which features to include is, "What is the minimum
    that will work well for us?"'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种免费和商业编辑器可用；其中一个编辑器是CKeditor（其主页位于[http://ckeditor.com/](http://ckeditor.com/)）。CKeditor带有四个基本选项：*Basic*，*Standard*，*Full*，以及一个*Custom*选项，允许完全自由地选择和取消选择可选功能。对于这个项目，我们将使用*Basic*选项。这不是为了让用户呈现一大堆按钮行的服务，关于包括哪些功能的正确问题是，“什么是对我们来说能够很好地工作的最低限度？”
- en: Including CKeditor in our page
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的页面中包含CKeditor
- en: 'The **Basic** option (and also the Standard, Full, and Custom arrays of options)
    is available for download or from CDN. At the time of writing this book, the Basic
    option can be obtained from CDN using the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Basic**选项（以及Standard、Full和Custom选项数组）可通过下载或从CDN获取。在撰写本书时，可以通过以下方式从CDN获取Basic选项：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should be our HTML. We also need to work on JSX. The code used to put
    up the scratchpad is the simplest and shortest of our four subcomponents:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是我们的HTML。我们还需要处理JSX。用于设置草稿的代码是我们四个子组件中最简单和最短的：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `render()` method is as simple as it looks. Note that it defines a `TEXTAREA`
    rather than a CKeditor widget. The different versions of CKeditor work by Hijaxing
    specific `TEXTAREAs` rather than writing their widget in the code. The `shouldComponentUpdate()`
    method is also as simple as it looks, but it is worthy of a comment. This method
    is intended to facilitate optimization for the rare case where ReactJS's virtual
    DOM diffing isn't as fast as what you can do. For instance, under ClojureScript,
    Om has immutable data structures and can therefore test equality via reference
    comparison alone, without the need for deep equality checking, which is why Om
    plus ClojureScript is about twice as fast as ReactJS plus JavaScript. And, as
    stated in earlier chapters, 99 percent of the time, micromanaging ReactJS's virtual
    DOM is simply not needed, even if you want to be very performant.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()`方法就像它看起来的那样简单。请注意，它定义了一个`TEXTAREA`而不是CKeditor小部件。不同版本的CKeditor通过劫持特定的`TEXTAREA`而不是在代码中编写他们的小部件来工作。`shouldComponentUpdate()`方法也和它看起来的一样简单，但值得一提。这个方法旨在促进优化，以解决ReactJS虚拟DOM差异检查不如您所能做的那么快的罕见情况。例如，在ClojureScript下，Om具有不可变的数据结构，因此可以仅通过引用比较来测试相等性，而无需进行深度相等性检查，这就是为什么Om加ClojureScript的速度大约是ReactJS加JavaScript的两倍。正如前几章所述，99%的时间，微观管理ReactJS的虚拟DOM根本不需要，即使您想要非常高效。'
- en: However, here we have a separate use case for the mechanism of `shouldComponentUpdate()`.
    Its use here is unrelated to optimization and obtaining the same result with less
    comparison. Instead, it is used to disclaim the jurisdiction of part of the DOM.
    For some other tools that you might like to include, such as CKeditor, it is desirable
    to ask ReactJS to create part of the DOM and then leave it alone, without later
    clobbering another tool's changes; this is exactly what we have done here. Hence,
    `shouldComponentUpdate()`—besides constituting a mechanism to prune unnecessary
    comparisons in lightning-fast virtual DOM diffing—can also be used to affix a
    label that says, "Something other than ReactJS is responsible for maintaining
    this part of the DOM. Please do not clobber it."
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这里，我们对shouldComponentUpdate()机制有一个单独的用例。它在这里的使用与优化和通过较少的比较获得相同结果无关。相反，它用于否认DOM的部分权限。对于您可能想要包括的其他一些工具，比如CKeditor，希望ReactJS创建DOM的一部分，然后让它保持不变，而不是在以后破坏另一个工具的更改；这正是我们在这里所做的。因此，shouldComponentUpdate()
    - 除了构成一个在闪电般快速的虚拟DOM差异比较中修剪不必要比较的机制之外 - 还可以用于附加一个标签，表示“除了ReactJS之外的东西负责维护DOM的这一部分。请不要破坏它。”
- en: 'After the first rendering of the web application, we ask CKeditor to replace
    the `TEXTAREA` that has an ID of scratchpad, which should give us a live widget:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在首次渲染Web应用程序之后，我们要求CKeditor替换具有ID为scratchpad的TEXTAREA，这应该给我们一个实时小部件：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And now we have an interactive scratchpad. Here is a screenshot of our web
    application, showing only the scratchpad:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个交互式的便签。以下是我们的Web应用程序的屏幕截图，仅显示便签：
- en: '![Including CKeditor in our page](img/B04108_11_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的页面中包含CKeditor](img/B04108_11_01.jpg)'
- en: Integrating all four subcomponents into one page
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有四个子组件整合到一个页面中
- en: Having created four subcomponents—a calendar, a scratchpad, a to-do list, and
    a **You Pick** slot with a placeholder—we will now integrate them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 已经创建了四个子组件 - 日历、便签、待办事项列表和一个带有占位符的“你选择”槽 - 现在我们将把它们整合起来。
- en: 'We start by uncommenting all the commented subcomponents in the Pragmatometer''s
    `render()` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先取消注释Pragmatometer的render()方法中的所有注释子组件：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our next step is to add styling, with just a bit of responsive design. At least
    one of the main contenders in responsive design is to simply not try to know and
    address each screen resolution, but to have several steps of responsiveness depending
    on screen width. You can see this if, for example, you have a wide desktop monitor,
    load [http://therussianshop.com/](http://therussianshop.com/), and progressively
    narrow your browser window. Different adaptations kick in, and the page as a whole
    makes a whole when seen at desktop width, tablet on either orientation, or smartphone.
    We will not be attempting a serious solution here, but there is some responsiveness
    in the fact that we make our styling conditional to a minimum width of 513 px.
    Without any styling, the four elements will displayed one on top of the other;
    with styling, they will be corralled into a 2 x 2 grid.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是添加样式，只需一点响应式设计。响应式设计中的一个主要竞争者是简单地不尝试了解和解决每个屏幕分辨率，而是根据屏幕宽度有几个响应步骤。例如，如果您有一个宽屏桌面监视器，加载[http://therussianshop.com/](http://therussianshop.com/)，然后逐渐缩小浏览器窗口。不同的适应性会启动，并且在桌面宽度、平板电脑的任何方向或智能手机上查看时，整个页面会形成一个整体。我们不会在这里尝试一个严肃的解决方案，但是有一些响应性，因为我们的样式是有条件地适应最小宽度为513像素。没有任何样式，四个元素将显示在彼此上方；有样式，它们将被围成一个2x2的网格。
- en: 'The CSS that styles the subcomponents essentially divides a sufficiently large
    window into quarters, adds some padding, and ensures that any overflow on each
    application will scroll:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 样式化子组件的CSS基本上将足够大的窗口分成四分之一，添加一些填充，并确保每个应用程序上的任何溢出都会滚动：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This allows us to display and the following is a screenshot of all the parts
    of our web application put together:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够显示以下是我们的Web应用程序所有部分的屏幕截图：
- en: '![Integrating all four subcomponents into one page](img/B04108_11_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![将所有四个子组件整合到一个页面中](img/B04108_11_02.jpg)'
- en: Persistence
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久性
- en: Some frameworks are all-purpose frameworks that are intended to do everything;
    ReactJS is not. It does not even offer any method by which to make an AJAX call,
    even though (practically) any important project that uses ReactJS will have AJAX
    requirements. This is entirely by design. The reason is that ReactJS is specialized
    as a framework for working on user interfaces or making Views, and it is intended
    to be combined with other technologies to make whatever complete package is appropriate
    for your site.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有些框架是通用框架，旨在做任何事情；ReactJS不是。它甚至没有提供任何方法来进行AJAX调用，即使（实际上）使用ReactJS的任何重要项目都将具有AJAX要求。这完全是有意设计的。原因是ReactJS专门作为用于工作在用户界面或制作视图的框架，并且旨在与其他技术结合使用，以制作适合您网站的完整包。
- en: One feature that is desirable in this Pragmatometer application is that it remembers
    the data you enter. If you enter an appointment for tomorrow at 2:00 p.m., then
    leave the page and come back, it would be nice if the page remembered the appointment
    instead of presenting a completely blank slate every single time you load it.
    Persistence is one part of a complete web application, but it's not the responsibility
    of the view or user interface, and ReactJS obviously does not offer a solution
    for persistence. Nor should it—perhaps. Some recent chapters covered how to use
    ReactJS to do "X"; this chapter is about how to do something else that complements
    ReactJS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Pragmatometer应用程序中一个希望的功能是它记住您输入的数据。如果您在明天下午2点有一个约会，然后离开页面再回来，页面记住约会而不是每次加载时呈现完全空白。持久性是完整Web应用程序的一部分，但不是视图或用户界面的责任，ReactJS显然也没有提供持久性的解决方案。也许也不应该。最近的一些章节介绍了如何使用ReactJS来做“X”；本章是关于如何做一些与ReactJS相辅相成的其他事情。
- en: For mainstream use, persistence is usually handled by communication with a backend;
    there are several good technologies available. But perhaps it will not be terribly
    useful to try to cram the treatment of properly implementing a backend into one
    section of one chapter of a book on frontend development with ReactJS.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主流用途，持久性通常通过与后端的通信来处理；有几种好的技术可用。但也许试图将正确实现后端的处理塞进ReactJS前端开发书籍的一个章节中并不是非常有用。
- en: As an exercise that remains squarely in frontend territory, we will handle persistence
    by a well-known frontend route—HTML5's localStorage (the persistence code does
    nothing if Modernizr fails to detect localStorage). The functions used, `save()`
    and `restore()`, save in localStorage if such is found. They call `JSON.stringify()`
    and `JSON.parse()` directly, even though such a step is not strictly needed to
    cause JSON-serializable objects to persist in localStorage. This is intended to
    provide a direct hook to change the code to talk to a remote backend. The simplest
    adaptation would, like the implementation here, monolithically save and restore
    the entire state for an application, but remember that premature optimization
    remains the root of all evil. Extremely heavy use of an application in this way
    might lead to an amount of state comparable to a single large PNG file. The code
    is, of course, further adaptable to more surgical approaches to saving or restoring
    a diff that is lighter, but the point here is to lay a solid groundwork, not push
    optimization as far as it can go.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个仍然完全属于前端领域的练习，我们将通过一个众所周知的前端路由来处理持久性——HTML5的localStorage（如果Modernizr未能检测到localStorage，则持久性代码不起作用）。使用的函数`save()`和`restore()`，如果找到localStorage，则保存在localStorage中。它们直接调用`JSON.stringify()`和`JSON.parse()`，即使这一步并不严格需要使JSON可序列化的对象在localStorage中持久化。这旨在提供一个直接的钩子来改变代码以与远程后端通信。最简单的适应方式，就像这里的实现一样，是为应用程序单体保存和恢复整个状态，但要记住，过早优化仍然是万恶之源。以这种方式大量使用应用程序可能会导致与单个大型PNG文件相当的状态量。当然，该代码还可以进一步适应更精细的方法来保存或恢复更轻的差异，但这里的重点是奠定坚实的基础，而不是将优化推到极致。
- en: 'We will use Crockford''s JSON from [https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)
    and Modernizr from [http://modernizr.com/](http://modernizr.com/). We will only
    use Modernizr in this application to test the localStorage availability, so if
    you''re looking for a "minimum weight that''s sufficient for this project" Modernizr
    build, opt to test for localStorage and opt out of everything else. Let''s include
    these files in `index.html`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Crockford的JSON [https://github.com/douglascrockford/JSON-js/blob/master/json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js)
    和Modernizr [http://modernizr.com/](http://modernizr.com/)。在这个应用程序中，我们只会使用Modernizr来测试localStorage的可用性，因此，如果你正在寻找一个“对于这个项目足够轻量级的最小Modernizr构建”，选择测试localStorage并排除其他所有内容。让我们在`index.html`中包含这些文件：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our `site.jsx` file, we define the `save()` and `restore()` functions. These
    will be used to cause the entire state to persist for different applications.
    A different approach might be to make more and smaller saves instead of a few
    monolithic saves, but a few monolithic saves are easy to keep track of mentally.
    Therefore, they are easier to maintain and debug than a mesh of different saves
    for minor aspects of data (if we need to optimize later, we can, but premature
    optimization is still the root of all evil). The save() function reads as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`site.jsx`文件中，我们定义了`save()`和`restore()`函数。这些函数将用于使不同应用程序的整个状态持久化。另一种方法可能是进行更多和更小的保存，而不是少量的单体保存，但少量的单体保存更容易在脑海中跟踪。因此，它们比为数据的次要方面进行不同保存更容易维护和调试（如果以后需要优化，我们可以，但过早优化仍然是万恶之源）。`save()`函数如下所示：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The most obvious way to connect this to a remote backend, besides taking care
    of details such as account management (which are not addressed in this example),
    would be to replace the `localStorage[key]` assignment with a call to notify the
    server of the new stringified data associated with that key. That would make the
    Modernizr check unnecessary. However, be warned: even IE8 supports localStorage,
    and clients that don''t support it will be a little archaic and probably not supported
    by ReactJS, which does not advertise support for IE versions earlier than 8 (also,
    IE8 support is now based on a shim instead of being native; see [http://tinyurl.com/reactjs-ie8-shim](http://tinyurl.com/reactjs-ie8-shim)).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个与远程后端连接的最明显的方法之一，除了处理诸如帐户管理之类的细节（这在本示例中没有涉及），是将`localStorage[key]`的赋值替换为调用通知服务器与该键相关的新字符串化数据。这将使Modernizr检查变得不必要。但要警告：即使IE8支持localStorage，不支持它的客户端可能有点过时，可能不受ReactJS支持，因为ReactJS并不宣传支持早于IE8的版本（此外，IE8支持现在是基于一个shim而不是本地的；参见[http://tinyurl.com/reactjs-ie8-shim](http://tinyurl.com/reactjs-ie8-shim)）。
- en: 'The `restore()` function takes an optional parameter besides key—`default_value`.
    This is used to support an initialization that pulls the saved state if it exists
    and falls back to the normal value that would otherwise be used in initialization.
    Initialization code can be reused to work with this `restore()` function, which
    pulls non-null and defined saved data for that key if it exists, or the default
    if nothing interesting is found. The line with `JSON.parse()` and the `if` statement
    that probes localStorage are the lines you would most directly replace with calls
    to talk to a remote backend. Alternatively, and to take a step further, the `restore()`
    function would probably be gutted and replaced with a function with the same signature
    and semantics, but would talk to a remote server that owned more of the work of
    checking whether any pre-existing data has been saved. This perhaps leaves the
    client to return the default value if the server has nothing to return:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`restore()`函数除了键之外还接受一个可选参数——`default_value`。这用于支持一个初始化，如果存在保存的状态，则会拉取它，否则会回退到在初始化时将要使用的正常值。初始化代码可以被重用以适应这个`restore()`函数，如果存在保存的数据，它会拉取非空和已定义的数据，否则会使用默认值。带有`JSON.parse()`和探测localStorage的`if`语句是你最直接用来调用远程后端的行，或者更进一步，`restore()`函数可能会被彻底清除并替换为具有相同签名和语义的函数，但会与拥有更多工作的远程服务器进行通信，检查是否保存了任何现有数据。这可能会导致客户端在服务器没有返回任何内容时返回默认值：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, all the `getInitialState()` functions are modified to go through the restore()
    function. See what happens hence. Consider the `Todo` initializer of this code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有的`getInitialState()`函数都被修改为通过`restore()`函数。看看接下来会发生什么。考虑一下这段代码的`Todo`初始化器：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is simply wrapped in a call to `restore()`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是包裹在一个`restore()`的调用中：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There are a few functions that alter the state on one component or another,
    and we make any function that changes part one of our component''s states save
    the whole state. Hence, in the appropriately named `Calendar#handle_submit`, numerous
    details of `this.state.entry_being_added` are filled in to match what is on the
    (Hijaxed) form. Then the filled-in entry is added to the list of live filled-in
    entries, and a new one is put in its place:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些函数会改变一个组件或另一个组件的状态，我们让任何改变组件状态的函数都保存整个状态的一部分。因此，在名为`Calendar#handle_submit`的适当命名的函数中，`this.state.entry_being_added`的许多细节都被填充以匹配（Hijaxed）表单上的内容。然后填充的条目被添加到实时填充的条目列表中，并且新的条目被放在它的位置上：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'These two lines alter `this.state`, and so we save the state after them:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行改变了`this.state`，所以我们在它们之后保存了状态：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: One detail – persisting the CKeditor state
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个细节——持久化CKeditor状态
- en: Most of this section is relatively predictable. Some programmers, who were told
    that we were adding persistence through HTML5 localStorage, might have guessed
    something close to what was written earlier, and most likely, they would be pretty
    close to the mark. There is one detail about CKeditor, however, that is less than
    obvious and less than ideal.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分大部分是可以预测的。一些程序员被告知我们通过HTML5 localStorage添加了持久性，可能已经猜到了之前写的东西，很可能他们离答案很近。然而，有一个关于CKeditor的细节，不太明显，也不太理想。
- en: CKeditor does what you might naïvely expect under "un-fancy" Web 1.0 form usage.
    If you have a form, include a `TEXTAREA` with a name and ID of `foo`, call CKeditor
    to convert it, and submit the form. The form will be submitted as if the HTML,
    which was then on the CKeditor instance, had been the content of the `TEXTAREA`.
    All of this is as it should be.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CKeditor在“非花哨”的Web 1.0表单使用下做了你可能天真地期望的事情。如果你有一个表单，包括一个名为`foo`的`TEXTAREA`，调用CKeditor进行转换，然后提交表单。表单将被提交，就好像当时在CKeditor实例上的HTML是`TEXTAREA`的内容一样。所有这些都是应该的。
- en: However, if you use CKeditor in almost any "AJAXian" way, querying the value
    of the text area without having a full-page form submission, you will run into
    a problem. The reported value of the CKeditor instance is neither more nor less
    than the text that it was initialized to. The reason is that the value of `TEXTAREA`
    is synced for you on a whole-page form submission, but this is not automatically
    done at the intermediate steps. This means that unless you take an extra step,
    you cannot usefully query the CKeditor instance.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你以几乎任何“AJAXian”方式使用CKeditor，查询文本区域的值而不进行完整的页面表单提交，你将遇到问题。CKeditor实例的报告值既不多也不少，就是它初始化的文本。原因是`TEXTAREA`的值在整个页面表单提交时会被同步，但在中间步骤不会自动完成。这意味着，除非你采取额外的步骤，否则无法有用地查询CKeditor实例。
- en: 'Fortunately, the extra step is not particularly difficult or slippery; CKeditor
    provides an API to sync the `TEXTAREA`, so you can query `TEXTAREA` to get the
    CKeditor instance''s value. Before connecting the CKeditor scratchpad, we initialized
    the entire display and set an interval so that the display is updated every 100
    milliseconds (there is nothing necessary or magical about this length for an interval;
    it could be updated more or less often, with longer intervals being choppier but
    basically the same):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这个额外的步骤并不特别困难或棘手；CKeditor提供了一个API来同步`TEXTAREA`，所以你可以查询`TEXTAREA`来获取CKeditor实例的值。在连接CKeditor草稿之前，我们初始化了整个显示并设置了一个间隔，以便每100毫秒更新一次显示（这个间隔的长度并不是必要的或神奇的；它可以更频繁或更少地更新，较长的间隔会更加不连贯，但基本上是一样的）：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To accommodate CKeditor, we shuffle and unbundle things slightly. Our code will
    be a little messier in order to accommodate calling things in a particular order.
    For our `TEXTAREA` to exist in the first place, we need to render the Pragmatometer
    master component once (or more than once, if we want). Then, after that call,
    we ask CKeditor to convert the `TEXTAREA`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应CKeditor，我们稍微调整和解开一些东西。我们的代码将会有点混乱，以便按特定顺序调用事物。为了让我们的`TEXTAREA`首先存在，我们需要渲染Pragmatometer主组件一次（或多次，如果我们想要）。然后，在那个调用之后，我们要求CKeditor转换`TEXTAREA`。
- en: 'Next, we start an update function. This both updates the display and synchronizes
    CKeditor''s `TEXTAREAs` to where they can be queried. The loop that synchronizes
    the `TEXTAREA` is not strictly necessary. If we have only one editor instance,
    we need only one line of code, but the code we have is generic for any number
    of CKeditor instances with any ID. Finally, within the loop, we call `save()`
    on the editor contents. One optimization, if `save()` and `restore()` are gutted
    and replaced to talk to a backend server, would be to save the current editor
    state in a variable and only `save()` if the editor''s contents differ from the
    previous saved value. This should diminish the frequent network chatter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始一个更新函数。这既更新了显示，也同步了CKeditor的`TEXTAREAs`，以便可以查询它们的位置。同步`TEXTAREA`的循环并不是绝对必要的。如果我们只有一个编辑器实例，我们只需要一行代码，但我们的代码对于任意数量的具有任意ID的CKeditor实例都是通用的。最后，在循环内，我们调用编辑器内容的`save()`。一个优化是，如果`save()`和`restore()`被清空并替换为与后端服务器通信，那么就可以将当前编辑器状态保存在一个变量中，只有在编辑器的内容与先前保存的值不同时才进行`save()`。这应该减少频繁的网络通信：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are a few more changes so that all of the initialization wraps our earlier
    code in a call to `restore()`. Also, each time we change a component's state,
    we call `save()`. And we're done!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些更改，使得所有的初始化都包裹在对`restore()`的调用中。此外，每当我们改变一个组件的状态时，我们都会调用`save()`。然后我们就完成了！
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added a fourth component. It differs from the others by
    not being built from the ground up in ReactJS, but integrating a third-party tool.
    This can work well enough; just be careful to have a `shouldComponentUpdate()`
    method that returns `false` as a way of saying, "Don't clobber this; let the other
    software do its work here."
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了第四个组件。它与其他组件不同之处在于它不是从头开始在ReactJS中构建的，而是集成了第三方工具。这样做可能足够好；只要小心地编写一个`shouldComponentUpdate()`方法，返回`false`，作为一种方式来表明，“不要破坏这个；让其他软件在这里完成它的工作。”
- en: Despite the fact that we covered three basic topics—a component, integration,
    and persistence—this chapter was easier than some others. We have a live, working
    system, and you can see it at [http://demo.pragmatometer.com/](http://demo.pragmatometer.com/).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们涵盖了三个基本主题——组件、集成和持久性，但这一章比其他一些章节更容易。我们有一个实时、可工作的系统，你可以在[http://demo.pragmatometer.com/](http://demo.pragmatometer.com/)上看到它。
- en: Now let's take a step back to look at the conclusion, discussing what you learned
    over the course of this book.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们退一步，来看一下结论，讨论你在本书学到了什么。
