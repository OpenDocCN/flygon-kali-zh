["```py\n    covariance = np.cov(bhp_returns, vale_returns)\n    print(\"Covariance\", covariance)\n    ```", "```py\n    Covariance [[ 0.00028179  0.00019766]\n     [ 0.00019766  0.00030123]]\n\n    ```", "```py\n    print(\"Covariance diagonal\", covariance.diagonal())\n    ```", "```py\n    Covariance diagonal [ 0.00028179  0.00030123]\n\n    ```", "```py\n    print(\"Covariance trace\", covariance.trace())\n    ```", "```py\n    Covariance trace 0.00058302354992\n\n    ```", "```py\n    print(covariance/ (bhp_returns.std() * vale_returns.std()))\n    ```", "```py\n    [[ 1.00173366  0.70264666]\n    [ 0.70264666  1.0708476 ]]\n\n    ```", "```py\n    print(\"Correlation coefficient\", np.corrcoef(bhp_returns, vale_returns))\n    ```", "```py\n    [[ 1\\.          0.67841747]\n    [ 0.67841747  1\\.        ]]\n\n    ```", "```py\n    difference = bhp - vale\n    ```", "```py\n    avg = np.mean(difference)\n    dev = np.std(difference)\n    print(\"Out of sync\", np.abs(difference[-1] \u2013 avg) > 2 * dev)\n    ```", "```py\n    Out of sync False\n\n    ```", "```py\n    t = np.arange(len(bhp_returns))\n    plt.plot(t, bhp_returns, lw=1, label='BHP returns')\n    plt.plot(t, vale_returns, '--', lw=2, label='VALE returns')\n    plt.title('Correlating arrays')\n\n    plt.xlabel('Days')\n    plt.ylabel('Returns')\n    plt.grid()\n    plt.legend(loc='best')\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nbhp = np.loadtxt('BHP.csv', delimiter=',', usecols=(6,), unpack=True)\n\nbhp_returns = np.diff(bhp) / bhp[ : -1]\n\nvale = np.loadtxt('VALE.csv', delimiter=',', usecols=(6,), unpack=True)\n\nvale_returns = np.diff(vale) / vale[ : -1]\n\ncovariance = np.cov(bhp_returns, vale_returns)\nprint(\"Covariance\", covariance)\n\nprint(\"Covariance diagonal\", covariance.diagonal())\nprint(\"Covariance trace\", covariance.trace())\n\nprint(covariance/ (bhp_returns.std() * vale_returns.std()))\n\nprint(\"Correlation coefficient\", np.corrcoef(bhp_returns, vale_returns))\n\ndifference = bhp - vale\navg = np.mean(difference)\ndev = np.std(difference)\n\nprint(\"Out of sync\", np.abs(difference[-1] - avg) > 2 * dev)\n\nt = np.arange(len(bhp_returns))\nplt.plot(t, bhp_returns, lw=1, label='BHP returns')\nplt.plot(t, vale_returns, '--', lw=2, label='VALE returns')\nplt.title('Correlating arrays')\nplt.xlabel('Days')\nplt.ylabel('Returns')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    bhp=np.loadtxt('BHP.csv', delimiter=',', usecols=(6,), unpack=True)\n    vale=np.loadtxt('VALE.csv', delimiter=',', usecols=(6,), unpack=True)\n    t = np.arange(len(bhp))\n    poly = np.polyfit(t, bhp - vale, 3)\n    print(\"Polynomial fit\", poly)\n    ```", "```py\n    Polynomial fit [  1.11655581e-03  -5.28581762e-02   5.80684638e-01   5.79791202e+01]\n\n    ```", "```py\n    print(\"Next value\", np.polyval(poly, t[-1] + 1))\n    ```", "```py\n    Next value 57.9743076081\n\n    ```", "```py\n    print( \"Roots\", np.roots(poly))\n    ```", "```py\n    Roots [ 35.48624287+30.62717062j  35.48624287-30.62717062j -23.63210575 +0.j        ]\n\n    ```", "```py\n    der = np.polyder(poly)\n    print(\"Derivative\", der)\n    ```", "```py\n    Derivative [ 0.00334967 -0.10571635  0.58068464]\n\n    ```", "```py\n    print(\"Extremas\", np.roots(der))\n    ```", "```py\n    Extremas [ 24.47820054   7.08205278]\n\n    ```", "```py\n    vals = np.polyval(poly, t)\n    ```", "```py\n    vals = np.polyval(poly, t)\n    print(np.argmax(vals))\n    print(np.argmin(vals))\n    ```", "```py\n    7\n    24\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\n\nbhp=np.loadtxt('BHP.csv', delimiter=',', usecols=(6,), unpack=True)\nvale=np.loadtxt('VALE.csv', delimiter=',', usecols=(6,), unpack=True)\n\nt = np.arange(len(bhp))\npoly = np.polyfit(t, bhp - vale, 3)\nprint(\"Polynomial fit\", poly)\n\nprint(\"Next value\", np.polyval(poly, t[-1] + 1))\n\nprint(\"Roots\", np.roots(poly))\n\nder = np.polyder(poly)\nprint(\"Derivative\", der)\n\nprint(\"Extremas\", np.roots(der))\nvals = np.polyval(poly, t)\nprint(np.argmax(vals))\nprint(np.argmin(vals))\n\nplt.plot(t, bhp - vale, label='BHP - VALE')\nplt.plot(t, vals, '-\u2014', label='Fit')\nplt.title('Polynomial fit')\nplt.xlabel('Days')\nplt.ylabel('Difference ($)')\nplt.grid()\nplt.legend()\nplt.show()\n```", "```py\n    c, v=np.loadtxt('BHP.csv', delimiter=',', usecols=(6, 7), unpack=True)\n    ```", "```py\n    change = np.diff(c)\n    print(\"Change\", change)\n    ```", "```py\n    Change [ 1.92 -1.08 -1.26  0.63 -1.54 -0.28  0.25 -0.6   2.15  0.69 -1.33  1.16\n     1.59 -0.26 -1.29 -0.13 -2.12 -3.91  1.28 -0.57 -2.07 -2.07  2.5   1.18\n    -0.88  1.31  1.24 -0.59]\n\n    ```", "```py\n    signs = np.sign(change)\n    print(\"Signs\", signs)\n    ```", "```py\n    Signs [ 1\\. -1\\. -1\\.  1\\. -1\\. -1\\.  1\\. -1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1\\. -1\\. -1\\. -1\\. -1.\n    -1\\. -1\\. -1\\.  1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1.]\n\n    ```", "```py\n    pieces = np.piecewise(change, [change < 0, change > 0], [-1, 1])\n    print(\"Pieces\", pieces)\n    ```", "```py\n    Pieces [ 1\\. -1\\. -1\\.  1\\. -1\\. -1\\.  1\\. -1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1\\. -1\\. -1\\. -1\\. -1.\n    -1\\. -1\\. -1\\.  1\\.  1\\.  1\\. -1\\.  1\\.  1\\. -1.]\n\n    ```", "```py\n    print(\"Arrays equal?\", np.array_equal(signs, pieces))\n    ```", "```py\n    Arrays equal? True\n\n    ```", "```py\n    print(\"On balance volume\", v[1:] * signs)\n    ```", "```py\n    [ 2620800\\. -2461300\\. -3270900\\.  2650200\\. -4667300\\. -5359800\\.  7768400.\n     -4799100\\.  3448300\\.  4719800\\. -3898900\\.  3727700\\.  3379400\\. -2463900.\n     -3590900\\. -3805000\\. -3271700\\. -5507800\\.  2996800\\. -3434800\\. -5008300.\n     -7809799\\.  3947100\\.  3809700\\.  3098200\\. -3500200\\.  4285600\\.  3918800.\n     -3632200.]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nc, v=np.loadtxt('BHP.csv', delimiter=',', usecols=(6, 7), unpack=True)\n\nchange = np.diff(c)\nprint(\"Change\", change)\n\nsigns = np.sign(change)\nprint(\"Signs\", signs)\n\npieces = np.piecewise(change, [change < 0, change > 0], [-1, 1])\nprint(\"Pieces\", pieces)\n\nprint(\"Arrays equal?\", np.array_equal(signs, pieces))\n\nprint(\"On balance volume\", v[1:] * signs)\n\n```", "```py\n    o, h, l, c = np.loadtxt('BHP.csv', delimiter=',', usecols=(3, 4, 5, 6), unpack=True)\n    ```", "```py\n    func = np.vectorize(calc_profit)\n    ```", "```py\n    profits = func(o, h, l, c)\n    ```", "```py\n    def calc_profit(open, high, low, close):\n       #buy just below the open\n       buy = open * 0.999\n       # daily range\n       if low <  buy < high:\n          return (close - buy)/buy\n       else:\n          return 0\n\n    print(\"Profits\", profits)\n    ```", "```py\n    real_trades = profits[profits != 0]\n    print(\"Number of trades\", len(real_trades), round(100.0 * len(real_trades)/len(c), 2), \"%\")\n    print(\"Average profit/loss %\", round(np.mean(real_trades) * 100, 2))\n    ```", "```py\n    Number of trades 28 93.33 %\n    Average profit/loss % 0.02\n\n    ```", "```py\n    winning_trades = profits[profits > 0]\n    print(\"Number of winning trades\", len(winning_trades), round(100.0 * len(winning_trades)/len(c), 2), \"%\")\n    print(\"Average profit %\", round(np.mean(winning_trades) * 100, 2))\n    ```", "```py\n    Number of winning trades 16 53.33 %\n    Average profit % 0.72\n\n    ```", "```py\n    losing_trades = profits[profits < 0]\n    print(\"Number of losing trades\", len(losing_trades), round(100.0 * len(losing_trades)/len(c), 2), \"%\")\n    print(\"Average loss %\", round(np.mean(losing_trades) * 100, 2))\n    ```", "```py\n    Number of losing trades 12 40.0 %\n    Average loss % -0.92\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\no, h, l, c = np.loadtxt('BHP.csv', delimiter=',', usecols=(3, 4, 5, 6), unpack=True)\n\ndef calc_profit(open, high, low, close):\n   #buy just below the open\n   buy = open * 0.999\n\n   # daily range\n   if low <  buy < high:\n      return (close - buy)/buy\n   else:\n      return 0\n\nfunc = np.vectorize(calc_profit)\nprofits = func(o, h, l, c)\nprint(\"Profits\", profits)\n\nreal_trades = profits[profits != 0]\nprint(\"Number of trades\", len(real_trades), round(100.0 * len(real_trades)/len(c), 2), \"%\")\nprint(\"Average profit/loss %\", round(np.mean(real_trades) * 100, 2))\n\nwinning_trades = profits[profits > 0]\nprint(\"Number of winning trades\", len(winning_trades), round(100.0 * len(winning_trades)/len(c), 2), \"%\")\nprint(\"Average profit %\", round(np.mean(winning_trades) * 100, 2))\n\nlosing_trades = profits[profits < 0]\nprint(\"Number of losing trades\", len(losing_trades), round(100.0 * len(losing_trades)/len(c), 2), \"%\")\nprint(\"Average loss %\", round(np.mean(losing_trades) * 100, 2))\n```", "```py\n    N = 8\n    weights = np.hanning(N)\n    print(\"Weights\", weights)\n    ```", "```py\n    Weights [ 0\\.          0.1882551   0.61126047  0.95048443  0.95048443  0.61126047\n     0.1882551   0\\.        ]\n\n    ```", "```py\n    bhp = np.loadtxt('BHP.csv', delimiter=',', usecols=(6,), unpack=True)\n    bhp_returns = np.diff(bhp) / bhp[ : -1]\n    smooth_bhp = np.convolve(weights/weights.sum(), bhp_returns)[N-1:-N+1]\n\n    vale = np.loadtxt('VALE.csv', delimiter=',', usecols=(6,), unpack=True)\n    vale_returns = np.diff(vale) / vale[ : -1]\n    smooth_vale = np.convolve(weights/weights.sum(), vale_returns)[N-1:-N+1]\n    ```", "```py\n    t = np.arange(N - 1, len(bhp_returns))\n    plt.plot(t, bhp_returns[N-1:], lw=1.0)\n    plt.plot(t, smooth_bhp, lw=2.0)\n    plt.plot(t, vale_returns[N-1:], lw=1.0)\n    plt.plot(t, smooth_vale, lw=2.0)\n    plt.show()\n    ```", "```py\n    K = 8\n    t = np.arange(N - 1, len(bhp_returns))\n    poly_bhp = np.polyfit(t, smooth_bhp, K)\n    poly_vale = np.polyfit(t, smooth_vale, K)\n    ```", "```py\n    poly_sub = np.polysub(poly_bhp, poly_vale)\n    xpoints = np.roots(poly_sub)\n    print(\"Intersection points\", xpoints)\n    ```", "```py\n    Intersection points [ 27.73321597+0.j          27.51284094+0.j          24.32064343+0.j\n     18.86423973+0.j          12.43797190+1.73218179j  12.43797190-1.73218179j\n     6.34613053+0.62519463j   6.34613053-0.62519463j]\n\n    ```", "```py\n    reals = np.isreal(xpoints)\n    print(\"Real number?\", reals)\n    ```", "```py\n    Real number? [ True  True  True  True False False False False]\n\n    ```", "```py\n    xpoints = np.select([reals], [xpoints])\n    xpoints = xpoints.real\n    print(\"Real intersection points\", xpoints)\n    ```", "```py\n    Real intersection points [ 27.73321597  27.51284094  24.32064343  18.86423973   0\\.           0\\.   0\\.  0.]\n\n    ```", "```py\n    print(\"Sans 0s\", np.trim_zeros(xpoints))\n    ```", "```py\n    Sans 0s [ 27.73321597  27.51284094  24.32064343  18.86423973]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 8\n\nweights = np.hanning(N)\nprint(\"Weights\", weights)\n\nbhp = np.loadtxt('BHP.csv', delimiter=',', usecols=(6,), unpack=True)\nbhp_returns = np.diff(bhp) / bhp[ : -1]\nsmooth_bhp = np.convolve(weights/weights.sum(), bhp_returns)[N-1:-N+1]\n\nvale = np.loadtxt('VALE.csv', delimiter=',', usecols=(6,), unpack=True)\nvale_returns = np.diff(vale) / vale[ : -1]\nsmooth_vale = np.convolve(weights/weights.sum(), vale_returns)[N-1:-N+1]\n\nK = 8\nt = np.arange(N - 1, len(bhp_returns))\npoly_bhp = np.polyfit(t, smooth_bhp, K)\npoly_vale = np.polyfit(t, smooth_vale, K)\n\npoly_sub = np.polysub(poly_bhp, poly_vale)\nxpoints = np.roots(poly_sub)\nprint(\"Intersection points\", xpoints)\n\nreals = np.isreal(xpoints)\nprint(\"Real number?\", reals)\n\nxpoints = np.select([reals], [xpoints])\nxpoints = xpoints.real\nprint(\"Real intersection points\", xpoints)\n\nprint(\"Sans 0s\", np.trim_zeros(xpoints))\n\nplt.plot(t, bhp_returns[N-1:], lw=1.0, label='BHP returns')\nplt.plot(t, smooth_bhp, lw=2.0, label='BHP smoothed')\n\nplt.plot(t, vale_returns[N-1:], '--', lw=1.0, label='VALE returns')\nplt.plot(t, smooth_vale, '-.', lw=2.0, label='VALE smoothed')\nplt.title('Smoothing')\nplt.xlabel('Days')\nplt.ylabel('Returns')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n$ python\n>>> import numpy as np\n>>> help(np.full)\nReturn a new array of given shape and type, filled with `fill_value`.\n>>> help(np.full_like)\n\n```", "```py\n$ python\n>>> import numpy as np\n\n```", "```py\n    >>> np.full((1, 2), 42)\n    array([[ 42.,  42.]])\n\n    ```", "```py\n    >>> np.full((1, 2), 42, dtype=np.int)\n    array([[42, 42]])\n\n    ```", "```py\n    >>> a = np.linspace(0, 1, 5)\n    >>> a\n    array([ 0\\.  ,  0.25,  0.5 ,  0.75,  1\\.  ])\n    >>> np.full_like(a, 42)\n    array([ 42.,  42.,  42.,  42.,  42.])\n\n    ```", "```py\n    >>> np.full_like(a, 42, dtype=np.int)\n    array([42, 42, 42, 42, 42])\n\n    ```"]