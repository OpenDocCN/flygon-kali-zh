["```cs\npublic interface IComponent {\n   void Operation();\n}\n```", "```cs\nprivate IComponent _component;\n```", "```cs\npublic Decorator(IComponent component) {\n    _component = component;\n}\n```", "```cs\npublic virtual void Operation() {\n    _component.Operation();\n}\n```", "```cs\npublic class ConcreteComponent : IComponent {\n    public void Operation() {\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic class ConcreteDecorator : Decorator {\n    public ConcreteDecorator(IComponent component) : base(component) { }\n}\n```", "```cs\npublic override void Operation() {\n    try {\n        Console.WriteLine(\"Operation: try block.\");\n        base.Operation();\n    } catch(Exception ex)  {\n        Console.WriteLine(\"Operation: catch block.\");\n        Console.WriteLine(ex.Message);\n    }\n}\n```", "```cs\nprivate static void DecoratorPatternExample() {\n    var concreteComponent = new ConcreteComponent();\n    var concreteDecorator = new ConcreteDecorator(concreteComponent);\n    concreteDecorator.Operation();\n}\n```", "```cs\nDecoratorPatternExample();\nConsole.ReadKey();\n```", "```cs\npublic interface IService {\n    void Request();\n}\n```", "```cs\npublic class Service : IService {\n    public void Request() {\n        Console.WriteLine(\"Service: Request();\");\n    }\n}\n```", "```cs\npublic class Proxy : IService {\n    private IService _service;\n\n    public Proxy(IService service) {\n        _service = service;\n    }\n\n    public void Request() {\n        Console.WriteLine(\"Proxy: Request();\");\n        _service.Request();\n    }\n}\n```", "```cs\nprivate static void ProxyPatternExample() {\n    Console.WriteLine(\"### Calling the Service directly. ###\");\n    var service = new Service();\n    service.Request();\n    Console.WriteLine(\"## Calling the Service via a Proxy. ###\");\n    new Proxy(service).Request();\n}\n```", "```cs\n[PSerializable]\npublic class LoggingAspect : OnMethodBoundaryAspect { }\n```", "```cs\npublic override void OnEntry(MethodExecutionArgs args) {\n    Console.WriteLine(\"The {0} method has been entered.\", args.Method.Name);\n}\n```", "```cs\npublic override void OnSuccess(MethodExecutionArgs args) {\n    Console.WriteLine(\"The {0} method executed successfully.\", args.Method.Name);\n}\n```", "```cs\npublic override void OnExit(MethodExecutionArgs args) {\n    Console.WriteLine(\"The {0} method has exited.\", args.Method.Name);\n} \n```", "```cs\npublic override void OnException(MethodExecutionArgs args) { \n    Console.WriteLine(\"An exception was thrown in {0}.\", args.Method.Name); \n}\n```", "```cs\n[LoggingAspect]\nprivate static void SuccessfulMethod() {\n    Console.WriteLine(\"Hello World, I am a success!\");\n}\n```", "```cs\n[LoggingAspect]\nprivate static void FailedMethod() {\n    Console.WriteLine(\"Hello World, I am a failure!\");\n    var x = 1;\n    var y = 0;\n    var z = x / y;\n}\n```", "```cs\n[MulticastAttributeUsage(MulticastTargets.Class, Inheritance = MulticastInheritance.Strict)] \npublic class BusinessRulePatternValidation : ScalarConstraint { }\n```", "```cs\npublic override void CodeValidation(object target)  { \n    var targetType = (Type)target; \n    if (targetType.GetNestedType(\"Factory\") == null) { \n        Message.Write( \n            targetType, SeverityType.Warning, \n            \"10\", \n            \"You must include a 'Factory' as a nested type for {0}.\", \n            targetType.DeclaringType, \n            targetType.Name); \n    } \n} \n```", "```cs\n [BusinessRulePatternValidation]\n public class BusinessRule  { }\n```", "```cs\npublic static class MemoryCache {\n    public static T GetItem<T>(string itemName, TimeSpan timeInCache, Func<T> itemCacheFunction) {\n        var cache = System.Runtime.Caching.MemoryCache.Default;\n        var cachedItem = (T) cache[itemName];\n        if (cachedItem != null) return cachedItem;\n        var policy = new CacheItemPolicy {AbsoluteExpiration = DateTimeOffset.Now.Add(timeInCache)};\n        cachedItem = itemCacheFunction();\n        cache.Set(itemName, cachedItem, policy);\n        return cachedItem;\n    }\n}\n```", "```cs\npublic string GetCachedItem() {\n    return MemoryCache.GetItem<string>(\"Message\", TimeSpan.FromSeconds(30), GetMessage);\n}\n\nprivate string GetMessage() {\n    return \"Hello, world of cache!\";\n}\n```", "```cs\nvar harness = new TestClass();\nConsole.WriteLine(harness.GetCachedItem());\nConsole.WriteLine(harness.GetCachedItem());\nThread.Sleep(TimeSpan.FromSeconds(1));\nConsole.WriteLine(harness.GetCachedItem());\n```", "```cs\nprivate static string _location = string.Empty;\nprivate static string _filename = string.Empty;\nprivate static string _file = string.Empty;\n```", "```cs\nprivate static void AddDirectory() {\n    if (!Directory.Exists(_location))\n        Directory.CreateDirectory(\"Logs\");\n}\n```", "```cs\nprivate static void AddFile() {\n    _file = Path.Combine(_location, _filename);\n    if (File.Exists(_file)) return;\n    using (File.Create($\"Logs\\\\{_filename}\")) {\n\n    }\n}\n```", "```cs\npublic static void AppendTextToFile(string filename, string text) {\n    _location = $\"{Path.GetDirectoryName(Assembly.GetEntryAssembly()?.Location)}\\\\Logs\";\n    _filename = filename;\n    AddDirectory();\n    AddFile();\n    File.AppendAllText(_file, text);\n}\n```", "```cs\n[PSerializable]\npublic class ConsoleLoggingAspect : OnMethodBoundaryAspect { }\n```", "```cs\npublic override void OnEntry(MethodExecutionArgs args) {\n    Console.WriteLine($\"Method: {args.Method.Name}, OnEntry().\");\n}\n```", "```cs\npublic override void OnExit(MethodExecutionArgs args) {\n    Console.WriteLine($\"Method: {args.Method.Name}, OnExit().\");\n}\n```", "```cs\npublic override void OnSuccess(MethodExecutionArgs args) {\n    Console.WriteLine($\"Method: {args.Method.Name}, OnSuccess().\");\n}\n```", "```cs\npublic override void OnException(MethodExecutionArgs args) {\n    Console.WriteLine($\"An exception was thrown in {args.Method.Name}. {args}\");\n}\n```", "```cs\npublic override void OnEntry(MethodExecutionArgs args) {\n    LogFile.AppendTextToFile(\"Log.txt\", $\"\\nMethod: {args.Method.Name}, OnEntry().\");\n}\n```", "```cs\n[PSerializable]\npublic class ExceptionAspect : OnExceptionAspect {\n    public string Message { get; set; }\n    public Type ExceptionType { get; set; }\n    public FlowBehavior Behavior { get; set; }\n\n    public override void OnException(MethodExecutionArgs args) {\n        var message = args.Exception != null ? args.Exception.Message : \"Unknown error occured.\";\n        LogFile.AppendTextToFile(\n            \"Exceptions.log\", $\"\\n{DateTime.Now}: Method: {args.Method}, Exception: {message}\"\n        );\n        args.FlowBehavior = FlowBehavior.Continue;\n    }\n\n    public override Type GetExceptionType(System.Reflection.MethodBase targetMethod) {\n        return ExceptionType;\n    }\n}\n```", "```cs\npublic interface ISecureComponent {\n    void AddData(dynamic data);\n    int EditData(dynamic data);\n    int DeleteData(dynamic data);\n    dynamic GetData(dynamic data);\n}\n```", "```cs\npublic abstract class DecoratorBase : ISecureComponent {\n    private readonly ISecureComponent _secureComponent;\n\n    public DecoratorBase(ISecureComponent secureComponent) {\n        _secureComponent = secureComponent;\n    }\n}\n```", "```cs\npublic virtual void AddData(dynamic data) {\n    _secureComponent.AddData(data);\n}\n```", "```cs\npublic readonly struct Credentials {\n    public static string Role { get; private set; }\n\n    public Credentials(string username, string password) {\n        switch (username)\n        {\n            case \"System\" when password == \"Administrator\":\n                Role = \"Administrator\";\n                break;\n            case \"End\" when password == \"User\":\n                Role = \"Restricted\";\n                break;\n            default:\n                Role = \"Imposter\";\n                break;\n        }\n    }\n}\n```", "```cs\npublic class ConcreteDecorator : DecoratorBase {\n    public ConcreteDecorator(ISecureComponent secureComponent) : base(secureComponent) { }\n}\n```", "```cs\npublic override void AddData(dynamic data) {\n    if (Credentials.Role.Contains(\"Administrator\") || Credentials.Role.Contains(\"Restricted\")) {\n        base.AddData((object)data);\n    } else {\n        throw new UnauthorizedAccessException(\"Unauthorized\");\n    }\n}\n```", "```cs\nprivate static readonly ConcreteDecorator ConcreteDecorator = new ConcreteDecorator(\n    new ConcreteSecureComponent()\n);\n```", "```cs\nprivate static void Main(string[] _) {\n    // ReSharper disable once ObjectCreationAsStatement\n    new Credentials(\"End\", \"User\");\n    DoSecureWork();\n    Console.WriteLine(\"Press any key to exit.\");\n    Console.ReadKey();\n}\n```", "```cs\nprivate static void DoSecureWork() {\n    AddData();\n    EditData();\n    DeleteData();\n    GetData();\n}\n```", "```cs\n[ExceptionAspect(consoleOutput: true)]\nprivate static void AddData() {\n    ConcreteDecorator.AddData(\"Hello, world!\");\n}\n```", "```cs\n[AttributeUsage(AttributeTargets.Parameter | AttributeTargets.ReturnValue | AttributeTargets.Property)]\npublic class AllowNullAttribute : Attribute { }\n```", "```cs\n[Flags]\npublic enum ValidationFlags {\n    Properties = 1,\n    Methods = 2,\n    Arguments = 4,\n    OutValues = 8,\n    ReturnValues = 16,\n    NonPublic = 32,\n    AllPublicArguments = Properties | Methods | Arguments,\n    AllPublic = AllPublicArguments | OutValues | ReturnValues,\n    All = AllPublic | NonPublic\n}\n```", "```cs\npublic static class ReflectionExtensions {\n    private static bool IsCustomAttributeDefined<T>(this ICustomAttributeProvider value) where T \n        : Attribute  {\n        return value.IsDefined(typeof(T), false);\n    }\n\n    public static bool AllowsNull(this ICustomAttributeProvider value) {\n        return value.IsCustomAttributeDefined<AllowNullAttribute>();\n    }\n\n    public static bool MayNotBeNull(this ParameterInfo arg) {\n        return !arg.AllowsNull() && !arg.IsOptional && !arg.ParameterType.IsValueType;\n    }\n}\n```", "```cs\n[PSerializable]\npublic class DisallowNonNullAspect : OnMethodBoundaryAspect {\n    private int[] _inputArgumentsToValidate;\n    private int[] _outputArgumentsToValidate;\n    private string[] _parameterNames;\n    private bool _validateReturnValue;\n    private string _memberName;\n    private bool _isProperty;\n\n    public DisallowNonNullAspect() : this(ValidationFlags.AllPublic) { }\n\n    public DisallowNonNullAspect(ValidationFlags validationFlags) {\n        ValidationFlags = validationFlags;\n    }\n\n    public ValidationFlags ValidationFlags { get; set; }\n}\n```", "```cs\npublic override bool CompileTimeValidate(MethodBase method) {\n    var methodInformation = MethodInformation.GetMethodInformation(method);\n    var parameters = method.GetParameters();\n\n    if (!ValidationFlags.HasFlag(ValidationFlags.NonPublic) && !methodInformation.IsPublic) return false;\n    if (!ValidationFlags.HasFlag(ValidationFlags.Properties) && methodInformation.IsProperty) \n        return false;\n    if (!ValidationFlags.HasFlag(ValidationFlags.Methods) && !methodInformation.IsProperty) return false;\n\n    _parameterNames = parameters.Select(p => p.Name).ToArray();\n    _memberName = methodInformation.Name;\n    _isProperty = methodInformation.IsProperty;\n\n    var argumentsToValidate = parameters.Where(p => p.MayNotBeNull()).ToArray();\n\n    _inputArgumentsToValidate = ValidationFlags.HasFlag(ValidationFlags.Arguments) ? argumentsToValidate.Where(p => !p.IsOut).Select(p => p.Position).ToArray() : new int[0];\n\n    _outputArgumentsToValidate = ValidationFlags.HasFlag(ValidationFlags.OutValues) ? argumentsToValidate.Where(p => p.ParameterType.IsByRef).Select(p => p.Position).ToArray() : new int[0];\n\n    if (!methodInformation.IsConstructor) {\n        _validateReturnValue = ValidationFlags.HasFlag(ValidationFlags.ReturnValues) &&\n                                            methodInformation.ReturnParameter.MayNotBeNull();\n    }\n\n    var validationRequired = _validateReturnValue || _inputArgumentsToValidate.Length > 0 || _outputArgumentsToValidate.Length > 0;\n\n    return validationRequired;\n}\n```", "```cs\npublic override void OnEntry(MethodExecutionArgs args) {\n    foreach (var argumentPosition in _inputArgumentsToValidate) {\n        if (args.Arguments[argumentPosition] != null) continue;\n        var parameterName = _parameterNames[argumentPosition];\n\n        if (_isProperty) {\n            throw new ArgumentNullException(parameterName, \n                $\"Cannot set the value of property '{_memberName}' to null.\");\n        } else {\n            throw new ArgumentNullException(parameterName);\n        }\n    }\n}\n```", "```cs\npublic override void OnSuccess(MethodExecutionArgs args) {\n    foreach (var argumentPosition in _outputArgumentsToValidate) {\n        if (args.Arguments[argumentPosition] != null) continue;\n        var parameterName = _parameterNames[argumentPosition];\n        throw new InvalidOperationException($\"Out parameter '{parameterName}' is null.\");\n    }\n\n    if (!_validateReturnValue || args.ReturnValue != null) return;\n\n    if (_isProperty) {\n        throw new InvalidOperationException($\"Return value of property '{_memberName}' is null.\");\n    }\n    throw new InvalidOperationException($\"Return value of method '{_memberName}' is null.\");\n}\n```", "```cs\nprivate class MethodInformation { }\n```", "```cs\n private MethodInformation(ConstructorInfo constructor) : this((MethodBase)constructor) {\n     IsConstructor = true;\n     Name = constructor.Name;\n }\n\n private MethodInformation(MethodInfo method) : this((MethodBase)method) {\n     IsConstructor = false;\n     Name = method.Name;\n     if (method.IsSpecialName &&\n     (Name.StartsWith(\"set_\", StringComparison.Ordinal) ||\n     Name.StartsWith(\"get_\", StringComparison.Ordinal))) {\n         Name = Name.Substring(4);\n         IsProperty = true;\n     }\n     ReturnParameter = method.ReturnParameter;\n }\n\n private MethodInformation(MethodBase method)\n {\n     IsPublic = method.IsPublic;\n }\n```", "```cs\nprivate static MethodInformation CreateInstance(MethodInfo method) {\n    return new MethodInformation(method);\n}\n```", "```cs\npublic static MethodInformation GetMethodInformation(MethodBase methodBase) {\n    var ctor = methodBase as ConstructorInfo;\n    if (ctor != null) return new MethodInformation(ctor);\n    var method = methodBase as MethodInfo;\n    return method == null ? null : CreateInstance(method);\n}\n```", "```cs\npublic string Name { get; private set; }\npublic bool IsProperty { get; private set; }\npublic bool IsPublic { get; private set; }\npublic bool IsConstructor { get; private set; }\npublic ParameterInfo ReturnParameter { get; private set; }\n```", "```cs\n[PSerializable]\n[AttributeUsage(AttributeTargets.Method)]\npublic sealed class RequiresTransactionAspect : OnMethodBoundaryAspect {\n    public override void OnEntry(MethodExecutionArgs args) {\n        var transactionScope = new TransactionScope(TransactionScopeOption.Required);\n        args.MethodExecutionTag = transactionScope;\n    }\n\n    public override void OnSuccess(MethodExecutionArgs args) {\n        var transactionScope = (TransactionScope)args.MethodExecutionTag;\n        transactionScope.Complete();\n    }\n\n    public override void OnExit(MethodExecutionArgs args) {\n        var transactionScope = (TransactionScope)args.MethodExecutionTag;\n        transactionScope.Dispose();\n    }\n}\n```", "```cs\npublic class ResourcePool<T> {\n    private readonly ConcurrentBag<T> _resources;\n    private readonly Func<T> _resourceGenerator;\n\n    public ResourcePool(Func<T> resourceGenerator) {\n        _resourceGenerator = resourceGenerator ??\n                                 throw new ArgumentNullException(nameof(resourceGenerator));\n        _resources = new ConcurrentBag<T>();\n    }\n\n    public T Get() => _resources.TryTake(out T item) ? item : _resourceGenerator();\n    public void Return(T item) => _resources.Add(item);\n}\n```", "```cs\nvar pool = new ResourcePool<Course>(() => new Course()); // Create a new pool of Course objects.\nvar course = pool.Get(); // Get course from pool.\npool.Return(course); // Return the course to the pool.\n```", "```cs\npublic static class Settings {\n    public static string GetAppSetting(string key) {\n        return System.Configuration.ConfigurationManager.AppSettings[key];\n    }\n\n    public static void SetAppSettings(this string key, string value) {\n        System.Configuration.ConfigurationManager.AppSettings[key] = value;\n    }\n}\n```", "```cs\nusing static CrossCuttingConcerns.Configuration.Settings;\n```", "```cs\nConsole.WriteLine(GetAppSetting(\"Greeting\"));\n\"Greeting\".SetAppSettings(\"Goodbye, my friends!\");\nConsole.WriteLine(GetAppSetting(\"Greeting\"));\n```", "```cs\n\n[PSerializable]\n[AttributeUsage(AttributeTargets.Method)]\npublic class InstrumentationAspect : OnMethodBoundaryAspect {\n    public override void OnEntry(MethodExecutionArgs args) {\n        LogFile.AppendTextToFile(\"Profile.log\", \n            $\"\\nMethod: {args.Method.Name}, Start Time: {DateTime.Now}\");\n        args.MethodExecutionTag = Stopwatch.StartNew();\n    }\n\n    public override void OnException(MethodExecutionArgs args) {\n        LogFile.AppendTextToFile(\"Exception.log\", \n            $\"\\n{DateTime.Now}: {args.Exception.Source} - {args.Exception.Message}\");\n    }\n\n    public override void OnExit(MethodExecutionArgs args) {\n        var stopwatch = (Stopwatch)args.MethodExecutionTag;\n        stopwatch.Stop();\n        LogFile.AppendTextToFile(\"Profile.log\", \n            $\"\\nMethod: {args.Method.Name}, Stop Time: {DateTime.Now}, Duration: {stopwatch.Elapsed}\");\n    }\n}\n```"]