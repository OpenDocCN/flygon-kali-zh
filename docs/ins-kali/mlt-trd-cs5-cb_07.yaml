- en: Chapter 7. Using PLINQ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用PLINQ
- en: 'In this chapter, we will review different parallel programming paradigms, such
    as task and data parallelism, and cover the basics of data parallelism and parallel
    LINQ queries. You will learn about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾不同的并行编程范式，如任务和数据并行性，并介绍数据并行性和并行LINQ查询的基础知识。您将学习：
- en: Using the Parallel class
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Parallel类
- en: Parallelizing a LINQ query
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行化LINQ查询
- en: Tweaking the parameters of a PLINQ query
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整PLINQ查询的参数
- en: Handling exceptions in a PLINQ query
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PLINQ查询中处理异常
- en: Managing data partitioning in a PLINQ query
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PLINQ查询中管理数据分区
- en: Creating a custom aggregator for a PLINQ query
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为PLINQ查询创建自定义聚合器
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In the .NET Framework, there is a subset of libraries that is called the Parallel
    Framework, often referred to as **Parallel Framework Extensions** (**PFX**), which
    was the name of the very first version of these libraries. Parallel Framework
    was released with .NET Framework 4.0 and consists of three major parts:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Framework中，有一个称为并行框架的库子集，通常称为**并行框架扩展**（**PFX**），这是这些库的第一个版本的名称。并行框架是随.NET
    Framework 4.0发布的，由三个主要部分组成：
- en: '**Task** **Parallel Library** (**TPL**)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务并行库**（**TPL**）'
- en: Concurrent collections
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发集合
- en: Parallel LINQ or PLINQ
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行LINQ或PLINQ
- en: Through this book, we learned how to run several tasks in parallel and synchronize
    them with one another. In fact, we partition our program into a set of tasks and
    have different threads running different tasks. This approach is called **task
    parallelism**, and we have only been learning about task parallelism so far.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书，我们学习了如何并行运行多个任务并使它们相互同步。实际上，我们将程序分成一组任务，并且有不同的线程运行不同的任务。这种方法被称为**任务并行性**，到目前为止我们只学习了任务并行性。
- en: Imagine that we have a program that performs some heavy calculations over a
    big set of data. The easiest way to parallelize this program is to partition this
    set of data into smaller chunks, run the calculations needed over these chunks
    of data in parallel, and then aggregate the results of these calculations. This
    programming model is called **data parallelism**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我们有一个程序，对一大批数据进行一些繁重的计算。并行化这个程序最简单的方法是将这批数据分成较小的块，对这些数据块进行并行计算，然后聚合这些计算的结果。这种编程模型称为**数据并行性**。
- en: Task parallelism has the lowest abstraction level. We define the program as
    a combination of tasks, explicitly defining how they combine. A program composed
    in that way could be very complex and detailed. Parallel operations are defined
    in different places in this program, and as it grows, the program becomes harder
    to understand and maintain. This way of making the program parallel is called
    **unstructured parallelism**. It is the price to pay if we have complex parallelization
    logic.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 任务并行性具有最低的抽象级别。我们将程序定义为一组任务的组合，明确定义它们如何组合。以这种方式组成的程序可能非常复杂和详细。并行操作在程序的不同位置定义，随着程序的增长，程序变得更难理解和维护。这种使程序并行的方式被称为**非结构化并行性**。如果我们有复杂的并行逻辑，这就是要付出的代价。
- en: However, when we have simpler program logic, we could try to offload more parallelization
    details to the PFX libraries and the C# compiler. For example, we could say, "I
    would like to run those three methods in parallel and I do not care how exactly
    this parallelization happens; let the .NET infrastructure decide the details".
    This raises the abstraction level as we do not have to provide a detailed description
    of how exactly we are parallelizing this. This approach is referred to as **structured
    parallelism** since the parallelization is usually a sort of declaration and each
    case of parallelization is defined in exactly one place in the program.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们有更简单的程序逻辑时，我们可以尝试将更多的并行化细节交给PFX库和C#编译器。例如，我们可以说，“我想并行运行这三种方法，我不在乎这种并行化的具体细节;
    让.NET基础设施决定细节”。这提高了抽象级别，因为我们不必提供关于我们如何并行化的详细描述。这种方法被称为**结构化并行性**，因为并行化通常是一种声明，并且每种并行化情况在程序中的一个地方被定义。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There could be an impression that unstructured parallelism is a bad practice
    and structured should be always used instead. I would like to emphasize that this
    is not true. Structured parallelism is indeed more maintainable, and preferred
    when possible, but it is a much less universal approach. In general, there are
    many situations when we simply are not able to use it and it is perfectly OK to
    use the TPL task parallelism in an unstructured manner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一种印象，即非结构化并行性是一种不好的实践，而应该始终使用结构化并行性。我想强调这是不正确的。结构化并行性确实更易于维护，并且在可能的情况下更受青睐，但它是一种不太通用的方法。一般来说，有许多情况下我们根本无法使用它，使用TPL任务并行性以非结构化方式是完全可以的。
- en: The Task Parallel Library has a `Parallel` class, which provides APIs for structured
    parallelism. This is still a part of TPL, but we will review it in this chapter
    because it is a perfect example of transition from a lower abstraction level to
    a higher one. When we use the `Parallel` class APIs, we do not need to provide
    the details of how we partition our work. However, we still need to explicitly
    define how we make one single result from partitioned results.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 任务并行库有一个`Parallel`类，提供了结构化并行性的API。这仍然是TPL的一部分，但我们将在本章中进行审查，因为它是从较低抽象级别向较高抽象级别过渡的一个完美例子。当我们使用`Parallel`类的API时，我们不需要提供如何分区我们的工作的细节。但是，我们仍然需要明确定义如何从分区结果中得出一个单一的结果。
- en: PLINQ has the highest abstraction level. It automatically partitions data to
    chunks and decides whether we really need to parallelize the query or whether
    it will be more effective to use usual sequential query processing. Then the PLINQ
    infrastructure takes care of combining the partitioned results together. There
    are many options that programmers may tweak to optimize the query and achieve
    the best possible performance and result.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: PLINQ具有最高的抽象级别。它会自动将数据分成块，并决定我们是否真的需要并行化查询，或者使用通常的顺序查询处理效果更好。然后，PLINQ基础设施会负责将分区结果合并在一起。程序员可以调整许多选项来优化查询，实现最佳性能和结果。
- en: In this chapter we will cover the `Parallel` class API usage and many different
    PLINQ options, such as making a LINQ query parallel, setting up execution mode
    and tweaking the parallelism degree of a PLINQ query, dealing with query item
    order, and handling PLINQ exceptions. We will also learn how to manage data partitioning
    for PLINQ queries.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍`Parallel`类的API用法和许多不同的PLINQ选项，比如使LINQ查询并行化，设置执行模式和调整PLINQ查询的并行度，处理查询项顺序以及处理PLINQ异常。我们还将学习如何管理PLINQ查询的数据分区。
- en: Using the Parallel class
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Parallel类
- en: This recipe shows how to use the `Parallel` class APIs. We will learn how to
    invoke methods in parallel, how to perform parallel loops, and tweak parallelization
    mechanics.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例展示了如何使用`Parallel`类的API。我们将学习如何并行调用方法，如何执行并行循环，并调整并行化机制。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To work through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe1`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤，您需要Visual Studio 2012。没有其他先决条件。此示例的源代码可以在`BookSamples\Chapter7\Recipe1`中找到。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To invoke methods in parallel, perform parallel loops, and tweak parallelization
    mechanics by using the `Parallel` class, perform the given steps:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要并行调用方法，执行并行循环，并使用`Parallel`类调整并行化机制，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下方添加以下代码片段：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the program.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This program demonstrates different features of the `Parallel` class. The `Invoke`
    method allows us to run several actions in parallel without much trouble as compared
    to defining tasks in the Task Parallel Library. The `Invoke` method blocks the
    other thread until all the actions are complete, which is quite a common and a
    convenient scenario.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序演示了`Parallel`类的不同特性。`Invoke`方法允许我们在并行运行多个操作，而不像在任务并行库中定义任务那样麻烦。`Invoke`方法会阻塞其他线程，直到所有操作完成，这是一个常见且方便的场景。
- en: The next feature is parallel loops, which are defined with the `For` and `ForEach`
    methods. We will look closely at `ForEach` since it is very similar to `For`.
    What you can do about the parallel `ForEach` loop is process any `IEnumerable`
    collection in parallel by applying an action delegate to each collection item.
    We are able to provide several options, customizing parallelization behavior,
    and get a result that shows whether the loop completed successfully.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个功能是并行循环，使用`For`和`ForEach`方法定义。我们将仔细研究`ForEach`，因为它与`For`非常相似。关于并行`ForEach`循环，您可以处理任何`IEnumerable`集合，通过将动作委托应用于每个集合项来并行处理。我们能够提供几个选项，自定义并行化行为，并获得一个显示循环是否成功完成的结果。
- en: To tweak our parallel loop, we provide an instance of the `ParallelOptions`
    class to the `ForEach` method. This allows us to cancel the loop with `CancellationToken`,
    restrict the maximum parallelism degree (how many maximum operations can be run
    in parallel), and provide a custom `TaskScheduler` class to schedule action tasks
    with it. Actions could accept an additional `ParallelLoopState` parameter, which
    is useful for breaking the loop or for checking what happens with the loop right
    now.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调整我们的并行循环，我们向`ForEach`方法提供了`ParallelOptions`类的实例。这允许我们使用`CancellationToken`取消循环，限制最大并行度（可以并行运行的最大操作数），并提供自定义的`TaskScheduler`类来调度动作任务。动作可以接受额外的`ParallelLoopState`参数，这对于中断循环或检查循环当前发生了什么非常有用。
- en: There are two ways of stopping the parallel loop with this state. We could use
    either the `Break` or `Stop` methods. The `Stop` method tells the loop to stop
    processing any more work, and sets the `IsStopped` property of the parallel loop
    state to `true`. The `Break` method stops the iterations after it, but the initial
    ones will continue to work. In that case, the `LowestBreakIteration` property
    of the loop result will contain a number of lowest loop iteration where the `Break`
    method was called.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用此状态停止并行循环。我们可以使用`Break`或`Stop`方法。`Stop`方法告诉循环停止处理更多的工作，并将并行循环状态的`IsStopped`属性设置为`true`。`Break`方法在此后停止迭代，但最初的迭代将继续工作。在这种情况下，循环结果的`LowestBreakIteration`属性将包含调用`Break`方法的最低循环迭代的编号。
- en: Parallelizing a LINQ query
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使LINQ查询并行化
- en: This recipe will describe how to use PLINQ to make a query parallel and how
    to go back from a parallel query to sequential processing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将描述如何使用PLINQ使查询并行化，以及如何从并行查询返回到顺序处理。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe2`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个步骤，您需要Visual Studio 2012。没有其他先决条件。此示例的源代码可以在`BookSamples\Chapter7\Recipe2`中找到。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To use PLINQ to make a query parallel and to go back from a parallel query
    to sequential processing, perform the following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PLINQ使查询并行化，并从并行查询返回到顺序处理，执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# `Console Application` project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#`控制台应用程序`项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法内添加以下代码片段：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the program.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When the program runs, we create a LINQ query that uses the reflection API to
    get all types whose names start with "Web" from the assemblies loaded in the current
    application domain. We emulate delays for processing each item and for printing
    it with the `EmulateProcessing` and `PrintInfo` methods. We also use the `Stopwatch`
    class to measure each query's execution time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序运行时，我们创建一个LINQ查询，该查询使用反射API从当前应用程序域中加载的程序集中获取所有以“Web”开头的类型。我们使用`EmulateProcessing`和`PrintInfo`方法模拟处理每个项目和打印项目的延迟。我们还使用`Stopwatch`类来测量每个查询的执行时间。
- en: First we run a usual sequential LINQ query. There is no parallelization here,
    so everything runs on the current thread. The second version of the query uses
    the `ParallelEnumerable` class explicitly. `ParallelEnumerable` contains the PLINQ
    logic implementation and is organized as a number of extension methods to the
    `IEnumerable` collection's functionality. Normally we do not use this class explicitly;
    it is here to illustrate how PLINQ actually works. The second version runs `EmulateProcessing`
    in parallel; however, by default the results are being merged on a single thread,
    so the query execution time should be a couple of seconds less than the first
    version.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先运行一个通常的顺序LINQ查询。这里没有并行化，所以一切都在当前线程上运行。查询的第二个版本明确使用了`ParallelEnumerable`类。`ParallelEnumerable`包含了PLINQ逻辑实现，并且组织为`IEnumerable`集合功能的一些扩展方法。通常我们不会显式使用这个类；这里是为了说明PLINQ实际上是如何工作的。第二个版本并行运行`EmulateProcessing`；然而，默认情况下结果会在单个线程上合并，因此查询执行时间应该比第一个版本少几秒。
- en: The third version shows how to use the `AsParallel` method to run the LINQ query
    in parallel in a declarative manner. We do not care about implementation details
    here but just state that we want to run this in parallel. However, the key difference
    in this version is that we use the `ForAll` method to print out the query results.
    It runs the action to all items in the query on the same thread they were processed
    in, skipping the results-merging step. It allows us to run `PrintInfo` in parallel
    as well, and this version runs even faster than the previous one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个版本展示了如何使用`AsParallel`方法以声明方式并行运行LINQ查询。我们不关心这里的实现细节，只是说明我们想要并行运行。然而，这个版本的关键区别在于我们使用`ForAll`方法来打印查询结果。它在相同的线程上运行操作以处理查询中的所有项目，跳过结果合并步骤。这使我们也可以并行运行`PrintInfo`，这个版本甚至比上一个版本运行得更快。
- en: The last sample shows how to turn a PLINQ query back to sequential with the
    `AsSequential` method. We can see that this query runs exactly like the first
    one.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例展示了如何使用`AsSequential`方法将PLINQ查询转换回顺序。我们可以看到这个查询的运行方式与第一个查询完全相同。
- en: Tweaking the parameters of a PLINQ query
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整PLINQ查询的参数
- en: This recipe shows how we can manage parallel processing options using a PLINQ
    query and what these options could affect during query execution.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例展示了如何使用PLINQ查询来管理并行处理选项，以及这些选项在查询执行期间可能会产生的影响。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe3`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此示例，您需要Visual Studio 2012。没有其他先决条件。此示例的源代码可以在`BookSamples\Chapter7\Recipe3`中找到。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how to manage parallel processing options using a PLINQ query
    and their effects, perform the following steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用PLINQ查询来管理并行处理选项及其影响，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法内添加以下代码片段：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the program.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The program demonstrates different useful PLINQ options that programmers can
    use. We start with creating a PLINQ query, and then we create another query providing
    PLINQ tweaking.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序演示了程序员可以使用的不同有用的PLINQ选项。我们首先创建一个PLINQ查询，然后创建另一个提供PLINQ调整的查询。
- en: Let us start with cancellation first. To be able to cancel a PLINQ query, there
    is a `WithCancellation` method that accepts a cancellation token object. Here
    we signal the cancellation token after three seconds, which leads to `OperationCanceledException`
    in the query and cancellation of the rest of the work.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从取消开始。为了能够取消PLINQ查询，有一个接受取消令牌对象的`WithCancellation`方法。在这里，我们在三秒后发出取消令牌信号，这导致查询中的`OperationCanceledException`和其余工作的取消。
- en: Then we are able to specify a parallelism degree for the query. It is the exact
    number of parallel partitions that will be used to execute the query. In the first
    recipe, we used the `Parallel.ForEach` loop, which has the maximum parallelism
    degree option. It is different because it specifies a maximum partitions value,
    but there could be fewer partitions if the infrastructure decides that it is better
    to use less parallelism to save resources and achieve optimal performance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以为查询指定并行度。这是执行查询时将使用的精确并行分区的数量。在第一个示例中，我们使用了`Parallel.ForEach`循环，它具有最大并行度选项。这是不同的，因为它指定了最大分区值，但如果基础设施决定最好使用较少的并行性来节省资源并实现最佳性能，可能会有更少的分区。
- en: Another interesting option is overriding the query execution mode with the `WithExecutionMode`
    method. The PLINQ infrastructure can process some queries in sequential mode if
    it decides that parallelizing the query will only add more overhead and it actually
    will run slower. We can force the query to run in parallel.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的选项是使用`WithExecutionMode`方法覆盖查询执行模式。如果PLINQ基础设施决定并行化查询只会增加更多的开销，并且实际上运行得更慢，它可以以顺序模式处理一些查询。我们可以强制查询并行运行。
- en: To tune up query result processing we have the `WithMergeOptions` method. The
    default mode is to buffer a number of results selected by the PLINQ infrastructure
    before returning them from the query. If the query takes a significant amount
    of time, it is more reasonable to turn off the result buffering to get the results
    as soon as possible.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调整查询结果处理，我们有`WithMergeOptions`方法。默认模式是在从查询中返回结果之前，由PLINQ基础设施选择的一定数量的结果进行缓冲。如果查询需要大量时间，关闭结果缓冲以尽快获得结果更为合理。
- en: The last option is the `AsOrdered` method. It is possible that when we use parallel
    execution, the item order in the collection is not preserved. Later items in the
    collection could be processed before earlier ones. To prevent this we need to
    call `AsOrdered` on a parallel query to explicitly tell the PLINQ infrastructure
    that we intend to preserve item order for processing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项是`AsOrdered`方法。当我们使用并行执行时，集合中的项目顺序可能不会被保留。在处理更早的项目之前，集合中的后续项目可能会被处理。为了防止这种情况，我们需要在并行查询上调用`AsOrdered`，明确告诉PLINQ基础设施我们打算保留项目顺序进行处理。
- en: Handling exceptions in a PLINQ query
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PLINQ查询中处理异常
- en: This recipe will describe how to handle exceptions in a PLINQ query.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将描述如何处理PLINQ查询中的异常。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe4`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个教程进行，你需要Visual Studio 2012。没有其他先决条件。这个教程的源代码可以在`BookSamples\Chapter7\Recipe4`中找到。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand how to handle exceptions in a PLINQ query, perform the following
    steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何处理PLINQ查询中的异常，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#控制台应用程序项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the program.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First we run a usual LINQ query over a range of numbers from -5 to 4\. When
    we divide by zero, we get `DivideByZeroException` and handle it as usual in a
    try/catch block.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们对从-5到4的数字范围进行了一个通常的LINQ查询。当我们除以零时，我们得到`DivideByZeroException`，并像通常一样在try/catch块中处理它。
- en: However, when we use `AsParallel`, we will get `AggregateException` instead
    because we are now running in parallel, leveraging task infrastructure behind
    the scenes. `AggregateException` will contain all the exceptions that occurred
    while running the PLINQ query. To handle the inner `DivideByZeroException` class
    we use the `Flatten` and `Handle` methods, which were explained in the *Handling
    exceptions in asynchronous operations* recipe in [Chapter 5](ch05.html "Chapter 5. Using
    C# 5.0"), *Using C# 5.0*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们使用`AsParallel`时，我们将得到`AggregateException`，因为现在我们是在并行运行，利用了后台的任务基础设施。`AggregateException`将包含在运行PLINQ查询时发生的所有异常。为了处理内部的`DivideByZeroException`类，我们使用了在[第5章](ch05.html
    "第5章。使用C# 5.0")的*处理异步操作中的异常*教程中解释过的`Flatten`和`Handle`方法，*使用C# 5.0*。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is very easy to forget that when we handle aggregate exceptions, having more
    than one inner exception inside is a very common situation. If you forget to handle
    all of them, the exception will bubble up and the application will stop working.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易忘记当我们处理聚合异常时，内部有多个异常是非常常见的情况。如果你忘记处理所有这些异常，异常将冒泡并且应用程序将停止工作。
- en: Managing data partitioning in a PLINQ query
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PLINQ查询中管理数据分区
- en: This recipe shows how to create a very basic custom partitioning strategy to
    parallelize a LINQ query in a specific way.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程展示了如何创建一个非常基本的自定义分区策略，以特定方式并行化LINQ查询。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe5`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照这个教程进行，你需要Visual Studio 2012。没有其他先决条件。这个教程的源代码可以在`BookSamples\Chapter7\Recipe5`中找到。
- en: How to do it...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To learn how to create a very basic custom partitioning strategy to parallelize
    a LINQ query, perform the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何创建一个非常基本的自定义分区策略来并行化LINQ查询，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#控制台应用程序项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run the program.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To illustrate that we are able to choose custom partitioning strategies for
    the PLINQ query, we have created a very simple partitioner that processes strings
    of odd and even lengths in parallel. To achieve this we derive our custom `StringPartitioner`
    class from a standard base class `Partitioner<T>` using `string` as a type parameter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我们能够为PLINQ查询选择自定义分区策略，我们创建了一个非常简单的分区器，以并行方式处理奇数和偶数长度的字符串。为了实现这一点，我们从标准基类`Partitioner<T>`中使用`string`作为类型参数派生出我们自定义的`StringPartitioner`类。
- en: We declare that we only support static partitioning by overriding the `SupportsDynamicPartitions`
    property and setting it to `false`. This means that we predefine our partitioning
    strategy. This is an easy way to partition the initial collection but could be
    inefficient depending on what data we have inside the collection. For example,
    in our case if we had many strings with odd lengths and only one string with even
    length, one of the threads will finish early and will not help to process odd-length
    strings. On the other hand, dynamic partitioning means that we partition the initial
    collection on the fly, balancing the work load between the worker threads.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明只支持静态分区，通过覆盖`SupportsDynamicPartitions`属性并将其设置为`false`。这意味着我们预定义了我们的分区策略。这是对初始集合进行分区的一种简单方法，但根据集合中的数据内容可能效率低下。例如，在我们的情况下，如果我们有许多奇数长度的字符串和只有一个偶数长度的字符串，其中一个线程将提前完成并且不会帮助处理奇数长度的字符串。另一方面，动态分区意味着我们在飞行中对初始集合进行分区，平衡工作负载在工作线程之间。
- en: Then we implement the `GetPartitions` method where we define two iterators.
    The first one returns strings with odd length from the source collection and the
    second one returns even-length strings. Finally, we create an instance of our
    partitioner and perform a PLINQ query with it. We can see that different threads
    process the odd- and even-length strings.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们实现了`GetPartitions`方法，在其中定义了两个迭代器。第一个从源集合返回奇数长度的字符串，第二个返回偶数长度的字符串。最后，我们创建了我们的分区器的实例，并对其执行了PLINQ查询。我们可以看到不同的线程处理奇数长度和偶数长度的字符串。
- en: Creating a custom aggregator for a PLINQ query
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为PLINQ查询创建自定义聚合器
- en: This recipe shows how to create a custom aggregation function for a PLINQ query.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例演示了如何为PLINQ查询创建自定义聚合函数。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To step through this recipe, you will need Visual Studio 2012\. There are no
    other prerequisites. The source code for this recipe can be found in `BookSamples\Chapter7\Recipe6`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本示例进行操作，您需要Visual Studio 2012。没有其他先决条件。本示例的源代码可以在`BookSamples\Chapter7\Recipe6`中找到。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To understand the workings of custom aggregation function for a PLINQ query,
    perform the following steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 了解PLINQ查询的自定义聚合函数的工作原理，请执行以下步骤：
- en: Start Visual Studio 2012\. Create a new C# **Console Application** project.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2012。创建一个新的C#**控制台应用程序**项目。
- en: 'In the `Program.cs` file add the following `using` directives:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中添加以下`using`指令：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code snippet below the `Main` method:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法下面添加以下代码片段：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following code snippet inside the `Main` method:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`方法中添加以下代码片段：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the program.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行程序。
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here we implement custom aggregation mechanics that are able to work with the
    PLINQ queries. To implement this we have to understand that since a query is being
    processed in parallel by several tasks simultaneously, we need to provide mechanics
    to aggregate each task's result in parallel and then combine those aggregated
    values into one single result value.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们实现了能够处理PLINQ查询的自定义聚合机制。为了实现这一点，我们必须了解，由于查询正在由多个任务同时并行处理，我们需要提供机制来并行聚合每个任务的结果，然后将这些聚合值合并为一个单一的结果值。
- en: In this recipe, we wrote an aggregating function that counts letters in a PLINQ
    query, which returns the `IEnumerable<string>` collection. It counts all the letters
    in each collection item. To illustrate the parallel aggregation process, we print
    out information about which thread processes each part of the aggregation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们编写了一个聚合函数，用于计算PLINQ查询中字母的数量，该查询返回`IEnumerable<string>`集合。它计算每个集合项中的所有字母。为了说明并行聚合过程，我们打印出了关于哪个线程处理聚合的每个部分的信息。
- en: We aggregate the PLINQ query results using the `Aggregate` extension method
    defined in the `ParallelEnumerable` class. It accepts four parameters, each of
    which is a function that performs different parts of the aggregation process.
    The first one is a factory that constructs the empty initial value of the aggregator.
    It is also called the seed value.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ParallelEnumerable`类中定义的`Aggregate`扩展方法对PLINQ查询结果进行聚合。它接受四个参数，每个参数都是执行聚合过程不同部分的函数。第一个是构造聚合器的空初始值的工厂。它也被称为种子值。
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the first value provided to the `Aggregate` method is actually
    not an initial seed value for the aggregator function but a factory method that
    constructs this initial seed value. If you provide just an instance, it will be
    used in all partitions that run in parallel, which will lead to an incorrect result.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供给`Aggregate`方法的第一个值实际上不是聚合器函数的初始种子值，而是一个构造此初始种子值的工厂方法。如果您只提供一个实例，它将在所有并行运行的分区中使用，这将导致不正确的结果。
- en: The second function aggregates each collection item into the partition aggregation
    object. We implement this function with the `AccumulateLettersInformation` method.
    It iterates over the string and counts the letters inside it. Here the aggregation
    objects are different for each query partition running in parallel, which is why
    we called them `taskTotal`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数将每个集合项聚合到分区聚合对象中。我们使用`AccumulateLettersInformation`方法实现此函数。它遍历字符串并计算其中的字母。这里聚合对象对于并行运行的每个查询分区都是不同的，这就是为什么我们称它们为`taskTotal`。
- en: The third function is a higher-level aggregation function that takes an aggregator
    object from a partition and merges it into a global aggregator object. We implement
    it with the `MergeAccumulators` method. The last function is a selector function
    that specifies what exact data we need from the global aggregator object.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个函数是一个高级别的聚合函数，它从分区中获取聚合器对象并将其合并到全局聚合器对象中。我们使用`MergeAccumulators`方法实现它。最后一个函数是一个选择器函数，指定我们需要从全局聚合器对象中获取的确切数据。
- en: Finally, we print out the aggregation result, ordering it by letters used most
    often in the collection items.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们打印出聚合结果，并按集合项中最常用的字母对其进行排序。
