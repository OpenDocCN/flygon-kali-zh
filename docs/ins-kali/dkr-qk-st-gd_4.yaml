- en: Docker Volumes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker卷
- en: In this chapter, we will learn the secrets of Docker volumes. We will learn
    how to use folders on your workstation inside of your Docker containers, and we
    will learn how to create and use persistent volumes, allowing multiple containers
    to share data. We will learn how to clean up after unused volumes. And, to round
    out this chapter, we will learn how to create data-volume containers to become
    the source of volumes for other containers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Docker卷的秘密。我们将学习如何在Docker容器内部使用工作站上的文件夹，以及如何创建和使用持久卷，允许多个容器共享数据。我们将学习如何清理未使用的卷。最后，我们将学习如何创建数据卷容器，成为其他容器的卷的来源。
- en: Approximately 675 shipping containers are lost at sea each year. In 1992, a
    40 ft container full of toys actually fell into the Pacific Ocean and 10 months
    later some of its toys drifted ashore on the Alaskan coastline – [https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers](https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每年大约有675个集装箱在海上丢失。1992年，一个装满玩具的40英尺集装箱实际上掉进了太平洋，10个月后，其中一些玩具漂到了阿拉斯加海岸 - [https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers](https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers)
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a Docker volume?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Docker卷？
- en: Creating Docker volumes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Docker卷
- en: Two ways to remove Docker volumes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除Docker卷的两种方法
- en: Sharing data between containers with data volume containers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据卷容器在容器之间共享数据
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be pulling Docker images from Docker's public repo, so basic internet
    access is required to execute the examples within this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您将从Docker的公共存储库中拉取Docker镜像，因此需要基本的互联网访问权限来执行本章中的示例。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04)'
- en: 'Check out the following video to see the code in action: [http://bit.ly/2QqK78a](http://bit.ly/2QqK78a)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的运行情况：[http://bit.ly/2QqK78a](http://bit.ly/2QqK78a)
- en: What is a Docker volume?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Docker卷？
- en: As we learned in [Chapter 3](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml), *Creating
    Docker Images*, Docker uses a special filesystem called a **Union File System**.
    This is the key to Docker's layered image model and allows for many of the features
    that make using Docker so desirable. However, the one thing that the Union File
    System does not provide for is the persistent storage of data. If you recall,
    the layers of a Docker image are read-only. When you run a container from a Docker
    image, the Docker daemon creates a new read-write layer that holds all of the
    live data that represents your container. When your container makes changes to
    its filesystem, those changes go into that read-write layer. As such, when your
    container goes away, taking the read-write layer goes with it, and any and all
    changes the container made to data within that layer are deleted and gone forever.
    That equals non-persistent storage. Remember, however, that generally speaking
    this is a good thing. A great thing, in fact. Most of the time, this is exactly
    what we want to happen. Containers are meant to be ephemeral and their state data
    is too. However, there are plenty of use cases for persistent data, such as customer
    order data for a shopping site. It would be a pretty bad design if all the order
    data went bye-bye if a container crashed or had to be re-stacked.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml)中学到的，Docker使用一种称为**联合文件系统**的特殊文件系统。这是Docker分层镜像模型的关键，也允许许多使用Docker变得如此令人向往的功能。然而，联合文件系统无法提供数据的持久存储。回想一下，Docker镜像的层是只读的。当你从Docker镜像运行一个容器时，Docker守护进程会创建一个新的读写层，其中包含代表容器的所有实时数据。当容器对其文件系统进行更改时，这些更改会进入该读写层。因此，当容器消失时，带着读写层一起消失，容器对该层内数据所做的任何更改都将被删除并永远消失。这等同于非持久存储。然而，请记住，一般来说这是一件好事。事实上，是一件很好的事情。大多数情况下，这正是我们希望发生的。容器是临时的，它们的状态数据也是如此。然而，持久数据有很多用例，比如购物网站的客户订单数据。如果一个容器崩溃或需要重新堆叠，如果所有订单数据都消失了，那将是一个相当糟糕的设计。
- en: Enter the Docker volume. The Docker volume is a storage location that is completely
    outside of the Union File System. As such, it is not bound by the same rules that
    are placed on the read-only layers of an image or the read-write layer of a container.
    A Docker volume is a storage location that, by default, is on the host that is
    running the container that uses the volume. When the container goes away, either
    by design or by a catastrophic event, the Docker volume stays behind and is available
    to use by other containers. The Docker volume can be used by more than one container
    at the same time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Docker卷的作用。Docker卷是一个完全独立于联合文件系统之外的存储位置。因此，它不受镜像的只读层或容器的读写层所施加的相同规则的约束。Docker卷是一个存储位置，默认情况下位于运行使用该卷的容器的主机上。当容器消失时，无论是出于设计还是因为灾难性事件，Docker卷都会留下并可供其他容器使用。Docker卷可以同时被多个容器使用。
- en: 'The simplest way to describe a Docker volume is this: a Docker volume is a
    folder that exists on the Docker host and is mounted and accessible inside a running
    Docker container. The accessibility goes both ways, allowing the contents of that
    folder to be modified from inside the container, or on the Docker host where the
    folder lives.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 描述Docker卷最简单的方式是：Docker卷是一个存在于Docker主机上并在运行的Docker容器内部挂载和访问的文件夹。这种可访问性是双向的，允许从容器内部修改该文件夹的内容，或者在文件夹所在的Docker主机上进行修改。
- en: Now, this description is a bit of a generalization. Using different volume drivers,
    the actual location of the folder being mounted as a volume can be hosted somewhere
    not on the Docker host. With volume drivers, you are able to create your volumes
    on remote hosts or cloud providers. For example, you can use an NFS driver to
    allow the creation of Docker volumes on a remote NFS server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个描述有点泛化。使用不同的卷驱动程序，作为卷被挂载的文件夹的实际位置可能不在Docker主机上。使用卷驱动程序，您可以在远程主机或云提供商上创建您的卷。例如，您可以使用NFS驱动程序允许在远程NFS服务器上创建Docker卷。
- en: 'Like Docker image and Docker container, the volume commands represent their
    own management category. As you would expect, the top-level management command
    for volumes is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与Docker镜像和Docker容器一样，卷命令代表它们自己的管理类别。正如您所期望的那样，卷的顶级管理命令如下：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The subcommands available in the volume management group include the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 卷管理组中可用的子命令包括以下内容：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are a few different ways you can create a Docker volume, so let's continue
    our investigation of Docker volumes by creating some.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以创建Docker卷，所以让我们继续通过创建一些来调查Docker卷。
- en: References
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: 'Check out the following links for more information:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: The Docker reference for using Docker volumes: [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker卷的Docker参考：[https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)
- en: Docker volume plugin information: [https://docs.docker.com/engine/extend/plugins_volume/](https://docs.docker.com/engine/extend/plugins_volume/)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker卷插件信息：[https://docs.docker.com/engine/extend/plugins_volume/](https://docs.docker.com/engine/extend/plugins_volume/)
- en: Docker engine volume plugins: [https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins](https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎卷插件：[https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins](https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins)
- en: Creating Docker volumes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Docker卷
- en: 'There are a few ways to create a Docker volume. One way is to use the `volume
    create` command. The syntax for that command is as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以创建Docker卷。一种方法是使用`volume create`命令。该命令的语法如下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In addition to the optional volume name parameter, the `create` command allows
    for these options:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可选的卷名称参数外，`create`命令还允许使用以下选项：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s start with the simplest example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最简单的例子开始：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Executing the preceding command will create a new Docker volume and assign
    it a random name. The volume will be created using the built-in local driver (by
    default). Using the `volume ls` command, you can see what random name the Docker
    daemon assigned our new volume. It will look something like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令将创建一个新的Docker卷并分配一个随机名称。该卷将使用内置的本地驱动程序（默认情况下）。使用`volume ls`命令，您可以看到Docker守护程序分配给我们新卷的随机名称。它看起来会像这样：
- en: '![](Images/2073a1d1-1f61-47c2-b94d-7e410c5854c4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2073a1d1-1f61-47c2-b94d-7e410c5854c4.png)'
- en: 'Stepping it up a notch, let''s create another volume, this time supplying an
    optional volume name with the command. The command will look something like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再上一层，让我们创建另一个卷，这次使用命令提供一个可选的卷名称。命令看起来会像这样：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This time, the volume is created and is given the name `my-vol-02`, as requested:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，卷已创建，并被命名为`my-vol-02`，如所请求的：
- en: '![](Images/eff9a8b0-13cb-4efb-8a08-f24ae1580c30.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/eff9a8b0-13cb-4efb-8a08-f24ae1580c30.png)'
- en: 'This volume still uses the default local driver. Using the local driver simply
    means that the actual location for the folder this volume represents can be found
    locally on the Docker host. We can use the volume inspect subcommand to see where
    that folder can actually be found:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个卷仍然使用默认的本地驱动程序。使用本地驱动程序只意味着这个卷所代表的文件夹的实际位置可以在Docker主机上本地找到。我们可以使用卷检查子命令来查看该文件夹实际上可以找到的位置：
- en: '![](Images/39fe956e-5fdb-43a7-86d3-cd6ba89060b6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/39fe956e-5fdb-43a7-86d3-cd6ba89060b6.png)'
- en: As you can see in the preceding screenshot, the volume's mount point is on the
    Docker host's filesystem at `/var/lib/docker/volumes/my-vol-02/_data`. Notice
    that the folder path is owned by root, which means you need elevated permissions
    to access the location from the host. Notice also that this example was run on
    a Linux host.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，该卷的挂载点位于Docker主机的文件系统上，路径为`/var/lib/docker/volumes/my-vol-02/_data`。请注意，文件夹路径由root所有，这意味着您需要提升的权限才能从主机访问该位置。还要注意，这个示例是在Linux主机上运行的。
- en: If you are using OS X, you need to remember that your Docker install is actually
    using a mostly seamless virtual machine. One of the areas where the seams do show
    up is with the use of the Docker volumes. The mount point that is created when
    you create a Docker volume on an OS X host is stored in the filesystem of the
    virtual machine, not on your OS X filesystem. When you use the docker volume inspect
    command and see the path to the mount point of your volume, it is not a path on
    your OS X filesystem, but rather the path on the filesystem of the hidden virtual
    machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是OS X，您需要记住，您的Docker安装实际上是在使用一个几乎无缝的虚拟机。其中一个无缝显示的领域是使用Docker卷。在OS X主机上创建Docker卷时创建的挂载点存储在虚拟机的文件系统中，而不是在您的OS
    X文件系统中。当您使用docker volume inspect命令并查看卷的挂载点路径时，它不是您的OS X文件系统上的路径，而是隐藏虚拟机文件系统上的路径。
- en: 'There is a way to view the filesystem (and other features) of that hidden virtual
    machine. With a command, often referred to as the Magic Screen command, you can
    access the running Docker VM. That command looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以查看隐藏虚拟机的文件系统（和其他功能）。通过一个命令，通常称为魔术屏幕命令，您可以访问正在运行的Docker VM。该命令如下：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Use *Ctrl* + *AK* to kill the screen session.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *AK*来终止屏幕会话。
- en: You can detach with *Ctrl* + *A Ctrl* + *D,* then use `screen -r` to reconnect,
    but don't detach and then start a new screen session. Running more than one screen
    to the VM will give you tty garbage.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用*Ctrl* + *A Ctrl* + *D*分离，然后使用`screen -r`重新连接，但不要分离然后启动新的屏幕会话。在VM上运行多个屏幕会给您tty垃圾。
- en: 'Here is an example of accessing the mount point for a volume created on an
    OS X host. Here is the setup:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在OS X主机上创建的卷的挂载点访问示例。这是设置：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And here is what the setup looks like:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是设置的样子：
- en: '![](Images/5b7d7fed-96dd-4ba6-9d30-0c538740bba6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5b7d7fed-96dd-4ba6-9d30-0c538740bba6.png)'
- en: 'Now, here is how to use the magic screen command to accomplish what we want,
    which is access to the volume mountpoint:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是如何使用魔术屏幕命令来实现我们想要的，即访问卷的挂载点：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And voila...
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后...
- en: '![](Images/5d6fff12-917a-40f8-9b3b-a3c66a9d51f4.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5d6fff12-917a-40f8-9b3b-a3c66a9d51f4.png)'
- en: Now is a good time to point out that we have created these volumes without ever
    creating or using a Docker container. This is an indication that a Docker volume
    is outside of the realm of the normal container-union filesystem.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个很好的时机指出，我们创建了这些卷，而从未创建或使用Docker容器。这表明Docker卷是在正常容器联合文件系统之外的领域。
- en: 'We saw in [Chapter 3](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml), *Creating
    Docker Images*, that we can also create volumes using a parameter on the container
    run command, or by adding a `VOLUME` instruction in the Dockerfile. And, as you
    might expect, you are able to mount volumes pre-created using the Docker `volume
    create` command into containers by using a container run parameter, namely the
    `--mount` parameter, for example, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ab7747ed-23c9-462c-98cb-c70e330c5d87.xhtml)中看到，*创建Docker镜像*，我们还可以使用容器运行命令上的参数或在Dockerfile中添加`VOLUME`指令来创建卷。并且，正如您所期望的那样，您可以使用Docker
    `volume create`命令预先创建的卷通过使用容器运行参数，即`--mount`参数，将卷挂载到容器中，例如，如下所示：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This example will run a new container that will mount the existing volume named
    `my-vol-02`. It will mount that volume in the container at `/myvol`. Note that
    the preceding example could also have been run without pre-creating the `my-vol-02:volume`,
    and the act of running the container with the `--mount` parameter would create
    the volume as part of the process of starting up the container. Note that any
    contents defined in the image''s mount point folder will be added to the volume
    when the volume is mounted. However, if a file exists in the image''s mount point
    folder, it also exists in the host''s mount point, and the contents of the host''s
    file will be what ends up being in the file. Using an image from this Dockerfile,
    here is what that looks like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将运行一个新的容器，它将挂载现有的名为`my-vol-02`的卷。它将在容器中的`/myvol`处挂载该卷。请注意，前面的例子也可以在不预先创建`my-vol-02:volume`的情况下运行，使用`--mount`参数运行容器的行为将在启动容器的过程中创建卷。请注意，当挂载卷时，图像挂载点文件夹中定义的任何内容都将添加到卷中。但是，如果图像挂载点文件夹中存在文件，则它也存在于主机的挂载点，并且主机文件的内容将最终成为文件中的内容。使用此Dockerfile中的图像，看起来是这样的：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note the `Data from image` line. Now, using a pre-created volume that contains
    a file with the matching name of `both-places.txt`, but has the `Data from volume` contents
    in the file, we will run a container based on the image. Here is what happens:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`Data from image`行。现在，使用一个包含与`both-places.txt`匹配名称的文件的预先创建的卷，但文件中包含`Data
    from volume`内容，我们将基于该图像运行一个容器。发生了什么：
- en: '![](Images/07d94005-aefb-4b4a-ba28-a0b452e64ca2.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/07d94005-aefb-4b4a-ba28-a0b452e64ca2.png)'
- en: As you can see, even though the Dockerfile created a file with the `Data from
    image` contents, when we ran a container from that image and mounted a volume
    that had the same file, the contents from the volume (`Data from volume`) prevailed
    and is what was found in the running container.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，尽管Dockerfile创建了一个带有`Data from image`内容的文件，但当我们从该图像运行一个容器并挂载一个具有相同文件的卷时，卷中的内容（`Data
    from volume`）占优势，并且是在运行容器中找到的内容。
- en: Remember that you cannot mount a pre-created volume via a `VOLUME` instruction
    in a Dockerfile. There is no such thing as a Dockerfile `VOLUME` instruction named
    volume. The reason for this is that the Dockerfile cannot dictate the location
    on the host that a volume is mounted from. Allowing that would be bad for a few
    reasons. First, since the Dockerfile creates an image, every container that was
    run from that image would be trying to mount the same host location. That could
    get real bad real fast. Second, since a container image can be run on different
    host operating systems, it is quite possible that the definition of the host path
    for one OS would not even work on another OS. Again, bad. Third, defining the
    volumes host path would open up all kinds of security holes. Bad, bad, bad! Because
    of this, running a container from an image build with a Dockerfile that has a
    `VOLUME` instruction will always create a new, uniquely-named mount point on the
    host. Using the `VOLUME` instruction in a Dockerfile has somewhat limited use
    cases, such as when a container will run an application that will always need
    to read or write data that is expected at a specific location in the filesystem
    but should not be a part of the Union File System.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无法通过Dockerfile中的`VOLUME`指令挂载预先创建的卷。不存在名为volume的Dockerfile `VOLUME`指令。原因是Dockerfile无法指定卷从主机挂载的位置。允许这样做会有几个原因。首先，由于Dockerfile创建了一个镜像，从该镜像运行的每个容器都将尝试挂载相同的主机位置。这可能会很快变得非常糟糕。其次，由于容器镜像可以在不同的主机操作系统上运行，很可能一个操作系统的主机路径定义在另一个操作系统上甚至无法工作。再次，很糟糕。第三，定义卷主机路径将打开各种安全漏洞。糟糕，糟糕，糟糕！因此，使用Dockerfile构建的图像运行具有`VOLUME`指令的容器将始终在主机上创建一个新的，具有唯一名称的挂载点。在Dockerfile中使用`VOLUME`指令的用途有些有限，例如当容器将运行始终需要读取或写入预期在文件系统中特定位置的数据的应用程序，但不应该是联合文件系统的一部分。
- en: 'It is also possible to create a one-to-one mapping of a file on the host to
    a file in a container. To accomplish this, add a `-v` parameter to the container
    run command. You will need to provide the path and filename to the file to be
    shared from the host and the fully-qualified path to the file in the container.
    The container run command might look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在主机上的文件与容器中的文件之间创建一对一的映射。要实现这一点，需要在容器运行命令中添加一个`-v`参数。您需要提供要从主机共享的文件的路径和文件名，以及容器中文件的完全限定路径。容器运行命令可能如下所示：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is what that might look like:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可能如下所示：
- en: '![](Images/032361dd-e5c7-413f-9808-95f9a6022f8c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/032361dd-e5c7-413f-9808-95f9a6022f8c.png)'
- en: 'There are a few different ways to define the volume in the container run command.
    To illustrate this point, look at the following run commands, each of which will
    accomplish the same thing:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以在容器运行命令中定义卷。为了说明这一点，看看以下运行命令，每个都将完成相同的事情：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'All three of the preceding container run commands will create a container that
    has mounted the same volume, in read-only mode. This can be verified with the
    following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前面三个容器运行命令都将创建一个已挂载相同卷的容器，以只读模式。可以使用以下命令进行验证：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](Images/7ad05dcb-f85f-488e-947d-c83d390a8360.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7ad05dcb-f85f-488e-947d-c83d390a8360.png)'
- en: References
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Check out these links for more information:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接获取更多信息：
- en: The Docker `volume create` reference: [https://docs.docker.com/engine/reference/commandline/volume_create/](https://docs.docker.com/engine/reference/commandline/volume_create/)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker `volume create`参考：[https://docs.docker.com/engine/reference/commandline/volume_create/](https://docs.docker.com/engine/reference/commandline/volume_create/)
- en: The Docker storage reference documentation: [https://docs.docker.com/storage/](https://docs.docker.com/storage/)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker存储参考文档：[https://docs.docker.com/storage/](https://docs.docker.com/storage/)
- en: Removing volumes
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除卷
- en: 'We have already seen and used the volume list command, `volume ls`, and the
    inspect command, `volume inspect`, and I think you should have a good grasp of
    what these commands do. There are two other commands in the volume-management
    group, both for volume removal. The first is the `volume rm` command, which you
    can use to remove one or more volumes by name. Then, there is the `volume prune` command;
    with the prune command, you can remove ALL unused volumes. Be extra careful with
    the use of this command. Here is the syntax for the remove and prune commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到并使用了卷列表命令`volume ls`和检查命令`volume inspect`，我认为您应该对这些命令的功能有很好的理解。卷管理组中还有另外两个命令，都用于卷的移除。第一个是`volume
    rm`命令，您可以使用它按名称移除一个或多个卷。然后，还有`volume prune`命令；使用清理命令，您可以移除所有未使用的卷。在使用此命令时要特别小心。以下是删除和清理命令的语法：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here are some examples of using the remove and prune commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用删除和清理命令的一些示例：
- en: '![](Images/21aedc2c-bc31-4731-a064-d4ca50ece52e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/21aedc2c-bc31-4731-a064-d4ca50ece52e.png)'
- en: 'Since the `in-use-volume` volume is mounted in the `vol-demo` container, it
    did not get removed with the prune command. You can use a filter on the volume
    list command to see what volumes are not associated with a container, and as such
    would be removed with the prune command. Here is the filtered ls command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`in-use-volume`卷被挂载在`vol-demo`容器中，它没有被清理命令移除。您可以在卷列表命令上使用过滤器，查看哪些卷与容器不相关，因此将在清理命令中被移除。以下是过滤后的ls命令：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: References
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Check out the following links for more information:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多信息：
- en: Docker's Wiki document for the volume remove command: [https://docs.docker.com/engine/reference/commandline/volume_rm/](https://docs.docker.com/engine/reference/commandline/volume_rm/)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker的卷删除命令的维基文档：[https://docs.docker.com/engine/reference/commandline/volume_rm/](https://docs.docker.com/engine/reference/commandline/volume_rm/)
- en: Docker's Wiki document for the volume prune command: [https://docs.docker.com/engine/reference/commandline/volume_prune](https://docs.docker.com/engine/reference/commandline/volume_prune)/
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker的卷清理命令的维基文档：[https://docs.docker.com/engine/reference/commandline/volume_prune](https://docs.docker.com/engine/reference/commandline/volume_prune)/
- en: Info on pruning Docker objects: [https://docs.docker.com/config/pruning/](https://docs.docker.com/config/pruning/)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关清理Docker对象的信息：[https://docs.docker.com/config/pruning/](https://docs.docker.com/config/pruning/)
- en: Sharing data between containers with data volume containers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据卷容器在容器之间共享数据
- en: 'There is another feature of Docker volumes that allows you to share the volume(s)
    mounted in one Docker container with other containers. It is called **data volume
    containers**. Using data volume containers is basically a two-step process. In
    the first step, you run a container that either creates or mounts Docker volumes
    (or both), and in the second step, you use the special volume parameter, `--volumes-from`,
    when running other containers to configure them to mount all of the volumes mounted
    in the first container. Here is an example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷的另一个功能允许您将一个Docker容器中挂载的卷与其他容器共享。这被称为**数据卷容器**。使用数据卷容器基本上是一个两步过程。在第一步中，您运行一个容器，该容器创建或挂载Docker卷（或两者），在第二步中，当运行其他容器时，您使用特殊的卷参数`--volumes-from`来配置它们挂载在第一个容器中的所有卷。以下是一个例子：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is what that looks like when executed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时的样子如下：
- en: '![](Images/9da94735-93f4-4976-bc7b-1451b0ebf11a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9da94735-93f4-4976-bc7b-1451b0ebf11a.png)'
- en: In this example, the first container run command is creating the volumes, but
    they could have just as easily been pre-created with an earlier container run
    command, or from a `volume create` command.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，第一个容器运行命令正在创建卷，但它们也可以很容易地在之前的容器运行命令中预先创建，或者来自`volume create`命令。
- en: References
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Here is an excellent article on data volume containers, including using them
    to do data backup and restore: [https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/](https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一篇关于数据卷容器的优秀文章，包括如何使用它们进行数据备份和恢复：[https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/](https://www.tricksofthetrades.net/2016/03/14/docker-data-volumes/)。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a deep-dive into Docker volumes. We learned what Docker
    volumes actually are, along with a few ways to create them. We learned the differences
    between creating Docker volumes with the `volume create` command, with the container
    run command, and the Dockerfile `VOLUME` instruction. We looked at a couple of
    ways to remove volumes, and how to use a data container to share volumes with
    other containers. All in all, you should feel pretty confident in your Docker
    volume skills right now. So far, we have built a strong base of Docker knowledge.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Docker卷。我们了解了Docker卷的实际含义，以及创建它们的几种方法。我们学习了使用`volume create`命令、容器运行命令和Dockerfile的`VOLUME`指令创建Docker卷的区别。我们还看了一些删除卷的方法，以及如何使用数据容器与其他容器共享卷。总的来说，你现在应该对自己的Docker卷技能感到非常自信。到目前为止，我们已经建立了扎实的Docker知识基础。
- en: In [Chapter 5](f1681897-580b-44fb-9e43-4aed37e67529.xhtml), *Docker Swarm*,
    we are going to add to that base by learning about Docker Swarm. This is where
    things will really start to get exciting. If you are ready to learn more, turn
    the page!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](f1681897-580b-44fb-9e43-4aed37e67529.xhtml)中，*Docker Swarm*，我们将通过学习Docker
    Swarm来扩展基础知识。这将是真正开始变得令人兴奋的地方。如果你准备好学习更多，请翻页！
