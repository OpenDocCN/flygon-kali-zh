- en: Libraries and Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库和框架
- en: This chapter looks at how applications work with libraries and frameworks. Numerous
    frameworks and libraries work with Webpack. Typically, these are JavaScript frameworks.
    They are becoming an increasingly central part of programming and knowing how
    to integrate them into your application bundle will likely be an increasing need.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨应用程序如何与库和框架一起工作。许多框架和库与Webpack一起工作。通常，这些是JavaScript框架。它们正变得越来越成为编程的核心部分，了解如何将它们集成到应用程序捆绑包中可能会成为一个日益增长的需求。
- en: Working with libraries and frameworks is a little bit different from working
    with other Webpack elements. By following typical examples and use cases, this
    book will explore Angular and how to structure the Angular framework to facilitate
    package bundling. This includes what to expect from the Webpack bundling, the
    desired outcomes, the advantages, and the limitations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他Webpack元素的工作有些不同，使用库和框架。通过典型的例子和用例，本书将探讨Angular以及如何构建Angular框架以便进行包捆绑。这包括对Webpack捆绑的期望，期望的结果，优势和局限性。
- en: Once you have completed this chapter, you should be confident in how to use
    these major frameworks and libraries with Webpack. You will also know how to integrate
    and install them, as well as how to use best practices in your integrations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您应该能够自信地使用这些主要框架和库与Webpack一起使用。您还将知道如何集成和安装它们，以及如何在集成中使用最佳实践。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Best practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Working with JSON
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSON
- en: Working with YAML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YAML
- en: Working with Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular
- en: Working with Vue.js
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Vue.js
- en: Best practices
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: So far, we've only covered building Vanilla JavaScript, which should not be
    confused with the Vanilla framework. Even though it is the best way to learn,
    it is more likely that you will work with some kind of framework. Webpack will
    work with any JavaScript or TypeScript framework, including Ionic and jQuery;
    however, more tricky frameworks include Angular, Vue, and YAML.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只涵盖了构建Vanilla JavaScript，这不应与Vanilla框架混淆。尽管这是学习的最佳方式，但更有可能的是您将使用某种框架。Webpack将与任何JavaScript或TypeScript框架一起工作，包括Ionic和jQuery；然而，更棘手的框架包括Angular、Vue和YAML。
- en: Now, we will get to grips with YAML, but before delving into this, you may be
    wondering whether backend frameworks can be integrated. The simple answer is that
    they can, but they are not bundled. The only level of integration, however, is
    through linking source code, as we do with most projects or APIs, such as REST
    APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始使用YAML，但在深入研究之前，您可能想知道是否可以集成后端框架。简单的答案是可以，但它们不会被捆绑。然而，唯一的集成级别是通过链接源代码，就像我们在大多数项目或API中所做的那样，比如REST
    API。
- en: As we have already discussed, Webpack has a production and development mode.
    Production mode bundles your project into its finished state, ready for web delivery
    or publication, and provides little room for tweaking. Development mode gives
    the developer the freedom to modify database connections; this is how the backend
    integrates. Your project's backend will likely be **ASP.NET** or **PHP**, but
    some backends are more complex and utilize `OpenAuth`. As a developer, you will
    need an overview of all of them. This guide, however, only deals with Webpack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过的，Webpack有生产模式和开发模式。生产模式将您的项目捆绑成最终状态，准备好进行网络交付或发布，并且提供了很少的调整空间。开发模式给开发人员自由修改数据库连接的权限；这是后端集成的方式。您的项目的后端可能是**ASP.NET**或**PHP**，但有些后端更复杂，使用`OpenAuth`。作为开发人员，您需要对所有这些有一个概览。然而，本指南只涉及Webpack。
- en: Rest assured that all of these frameworks will integrate, which is done via
    a REST API, which returns data in **JavaScript Object Notation** (**JSON**) format.
    It is also possible to do this using **AJAX**. In any case, ensure that secure
    best practices are followed, as JSON calls to databases are not as secure as using
    a server-side script.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请放心，所有这些框架都将集成，这是通过REST API完成的，它以**JavaScript对象表示**（**JSON**）格式返回数据。也可以使用**AJAX**来完成这一点。无论如何，请确保遵循安全的最佳实践，因为与使用服务器端脚本相比，对数据库的JSON调用并不安全。
- en: If your project uses Ionic, then you should follow the instructions for Angular
    as the Ionic framework is based on this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的项目使用Ionic，那么您应该按照Angular的说明进行操作，因为Ionic框架是基于此的。
- en: That should give you a solid overview of the best practices for working with
    backends and libraries. We will now discuss each of the most common libraries
    that you will encounter in a Webpack. Let's start with JSON, as it is the easiest
    to understand and is the most important way that external or backend code and
    databases interact with your Webpack application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该为您提供了与后端和库一起工作的最佳实践的全面概述。现在我们将讨论您在Webpack中会遇到的每个常见库。让我们从JSON开始，因为它是最容易理解的，也是外部或后端代码和数据库与您的Webpack应用程序交互的最重要方式。
- en: Working with JSON
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON
- en: Most of the time, when you work with frameworks, you will need to communicate
    across languages and between applications. This is done with JSON. JSON works
    similarly to YAML in this way, but it is much easier to understand how Webpack
    works with JSON, first.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用框架时，大部分时间您需要在不同语言和应用程序之间进行通信。这是通过JSON完成的。JSON在这方面与YAML类似，但更容易理解Webpack如何与JSON一起工作。
- en: JSON files are understood by Webpack's compiler without the need for a dedicated
    loader and, therefore, can be considered a native script to Webpack's bundler,
    just as JavaScript is.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件可以被Webpack的编译器理解，无需专用加载程序，因此可以被视为Webpack捆绑器的本地脚本，就像JavaScript一样。
- en: As alluded to in this guide so far, JSON files are instrumentally used for package
    composition. How Webpack records and tracks the use of loaders and dependencies
    is through a schema in the form of a JSON file. This is typically the `package.json`
    file, or sometimes the `package.lock.json` file, which records the exact version
    of each package installed so that it can be reinstalled. In this context, "package"
    refers to loaders and dependencies, collectively.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本指南已经提到，JSON文件在包组合中起着重要作用。Webpack记录和跟踪加载器和依赖项的使用是通过JSON文件的模式进行的。这通常是`package.json`文件，有时是`package.lock.json`文件，它记录了每个安装包的确切版本，以便可以重新安装。在这种情况下，“包”是指加载器和依赖项的集合。
- en: Each JSON file must be programmed correctly or it won't be readable by Webpack.
    Unlike JavaScript, comments are not permitted in code to guide users, so you may
    want to use a `README` file to explain its content and purpose to the user.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JSON文件必须正确编程，否则Webpack将无法读取。与JavaScript不同，代码中不允许使用注释来指导用户，因此您可能希望使用`README`文件向用户解释其内容和目的。
- en: 'The structure of a JSON file is a little different from JavaScipt and contains
    a different array of elements, such as keys. Take the following code block as
    an example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JSON文件的结构与JavaScipt有所不同，并包含不同的元素数组，例如键。以以下代码块为例：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is an extract from the `package.json` file that we'll use a little later
    on in this chapter. The content of this block essentially declares the parameters
    of a module. The named module is used as a key with a colon after it. These keys
    are sometimes referred to as names and they are where options are placed. This
    code sets a series of rules, and in this rule is the instruction to make Webpack
    use `js-yaml-loader` whenever it transpiles the content modules.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`package.json`文件的一部分，我们稍后在本章中将使用。此块的内容基本上声明了模块的参数。命名模块用作键，并在其后加上冒号。这些键有时被称为名称，它们是选项的放置位置。此代码设置了一系列规则，在这个规则中是指示Webpack在转译内容模块时使用`js-yaml-loader`。
- en: You must ensure that braces and brackets are used in the right sequence or Webpack
    won't be able to read the code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须确保大括号和方括号的使用顺序正确，否则Webpack将无法读取代码。
- en: As a JavaScript developer, you may be very familiar with JSON and how it is
    used. However, it's worth spelling out in case there are any blind spots. YAML
    is a more complex framework but it is something you will often encounter, so it's
    only progressively more complex than JSON. Let's get to grips with it now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为JavaScript开发人员，您可能对JSON及其用法非常熟悉。但是，为了排除任何盲点，值得详细说明。YAML是一个更复杂的框架，但您经常会遇到它，因此它只比JSON逐渐更复杂。现在让我们开始逐步了解它。
- en: Working with YAML
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用YAML
- en: YAML is a common framework that is used in a similar way to JSON. The difference
    is that YAML is more commonly used with configuration files, which is why you
    may encounter it more frequently, or for the first time, when using Webpack.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: YAML是一种常见的框架，类似于JSON的使用方式。不同之处在于YAML更常用于配置文件，这就是为什么在使用Webpack时您可能会更频繁地或者第一次遇到它。
- en: 'To use YAML with Webpack, we must install it. Let''s get started:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Webpack中使用YAML，我们必须安装它。让我们开始吧：
- en: 'You can install YAML using `npm` in your command-line utility. Use the following
    command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在命令行实用程序中使用`npm`安装YAML。使用以下命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note the `yarn` statement. This refers to an open source package manager for
    JavaScript files that comes preinstalled with `Node.js`. It works similarly to
    `npm` and should be preinstalled. If you don't get a response from the code used
    here, then double-check that it is preinstalled.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`yarn`语句。这是指JavaScript文件的开源包管理器，预装在`Node.js`中。它的工作方式类似于`npm`，应该是预安装的。如果您在此处使用的代码没有得到响应，请再次检查是否已预安装。
- en: 'To inspect your YAML files from the command-line interface, you should install
    them globally:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从命令行界面检查YAML文件，您应该全局安装它们：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, open up the configuration file, `webpack.config.js`, and make the following
    amendments:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开配置文件`webpack.config.js`，并进行以下修改：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding line will return a JavaScript object. This method is safe for
    data that is not trusted. See the *Further reading* section for a GitHub YAML
    example.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行将返回一个JavaScript对象。这种方法适用于不受信任的数据。请参阅*进一步阅读*部分，了解GitHub YAML示例。
- en: 'After that, use `webpack.config.js` to configure the file to allow the use
    of the YAML loader:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，使用`webpack.config.js`配置文件来允许使用YAML加载器：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may also want to use the YAML front-matter loader for Webpack. This is an
    MIT-licensed piece of software that will convert YAML files into JSON, which will
    be particularly useful if you are more used to using the latter. If you are a
    JavaScript developer, it is quite likely that you are used to using JSON as it
    tends to be more commonly used with JavaScripters than YAML.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想为Webpack使用YAML front-matter加载器。这是一个MIT许可的软件，它将YAML文件转换为JSON，如果您更习惯于使用后者，这将特别有用。如果您是JavaScript开发人员，您很可能习惯使用JSON，因为它往往比YAML更常用于JavaScript。
- en: This module requires a minimum of Node v6.9.0 and Webpack v4.0.0 installed on
    your device. Webpack 5 is the subject of this guide, so there should be no trouble
    there. However, note that this feature is only available with Webpack 4 and 5.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块需要在您的设备上安装Node v6.9.0和Webpack v4.0.0的最低版本。Webpack 5是本指南的主题，所以不应该有问题。但是，请注意，此功能仅适用于Webpack
    4和5。
- en: 'The following steps are separated from the previous steps as they deal with
    the installation of `yaml-loader` and not `yaml-frontmatter`, which is used to
    convert YAML into JSON files (which is more typical of Webpack package structures):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤与前面的步骤分开，因为它们涉及安装`yaml-loader`而不是`yaml-frontmatter`，后者用于将YAML转换为JSON文件（这更符合Webpack包结构的典型情况）：
- en: 'To begin, you''ll need to install `yaml-frontmatter-loader` using your command-line
    utility:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要使用命令行实用程序安装`yaml-frontmatter-loader`：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This particular command line may be syntactically different from the kind that
    this guide has shown in the past, but regardless of the format, this command should
    work.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的命令行可能在语法上与本指南过去展示的命令行不同，但无论格式如何，这个命令都应该有效。
- en: 'Then, add the loader to your configuration, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照以下方式向配置中添加加载器：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code will return the `file.md` file as a JavaScript object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将`file.md`文件作为JavaScript对象返回。
- en: 'Next, open `webpack.config.js` once more and make the following changes to
    the `rules` key, ensuring you reference the YAML loader:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，再次打开`webpack.config.js`，并对`rules`键进行以下更改，确保引用YAML加载器：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, run Webpack 5 via your preferred method and see the results!
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过你喜欢的方法运行Webpack 5，并查看结果！
- en: If you got through that in one piece, you may be feeling brave enough to tackle
    Angular. That is a more difficult framework to work with, so let's get started.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一口气通过了这一点，你可能已经足够勇敢去应对Angular了。这是一个更难处理的框架，所以让我们开始吧。
- en: Working with Angular
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular
- en: Angular is a library and framework, and as with all frameworks, it aims to make
    building applications easier. Angular utilizes dependency injection, integrated
    best practices, and end-to-end tooling, all of which can help resolve development
    challenges.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Angular是一个库和框架，与所有框架一样，它旨在使构建应用程序更容易。Angular利用依赖注入、集成最佳实践和端到端工具，所有这些都可以帮助解决开发中的挑战。
- en: Angular projects often use Webpack. At the time of writing, the latest version
    of Angular in use is **Angular 9**. An updated version is brought out every year.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Angular项目通常使用Webpack。在撰写本文时，使用的最新版本是**Angular 9**。每年都会推出更新版本。
- en: Now, let's take a look at how Webpack works when bundling Angular projects or
    even bolting Angular on to existing projects.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Webpack在捆绑Angular项目或将Angular添加到现有项目时的工作原理。
- en: 'Angular looks for `window.jQuery` to determine whether jQuery is present. See
    the following code block for the source code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Angular寻找`window.jQuery`来确定是否存在jQuery。查看以下源代码的代码块：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To add a `lodash` map, append the existing code with the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`lodash`映射，请将现有代码附加到以下内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Webpack and Angular work by supplying Webpack with entry files and letting
    it incorporate the dependencies that lead from those entry points. The entry point
    file in the following example is the root file of the application—`src/main.ts`.
    Let''s take a look:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack和Angular通过提供入口文件并让它包含从这些入口点导出的依赖项来工作。以下示例中的入口点文件是应用程序的根文件`src/main.ts`。让我们来看看：
- en: 'We need to use the `webpack.config.js` file here. Note that this is a single
    entry-point process:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在这里使用`webpack.config.js`文件。请注意，这是一个单入口点过程：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Webpack will now parse the file, inspect it, and traverse its imported dependencies
    recursively.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack现在将解析文件，检查它，并递归地遍历其导入的依赖项。
- en: 'Make the following changes in `src/main.ts`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main.ts`中进行以下更改：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Webpack will recognize that the `@angular/core` file is being imported, so this
    will be added to the dependency list for bundle inclusion. Webpack will open the
    `@angualar/core` file and trace its series of `import` statements until a dependency
    graph is built from it. This will be built from `main.ts` (a TypeScript file).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack将识别出正在导入`@angular/core`文件，因此这将被添加到捆绑包含的依赖项列表中。Webpack将打开`@angualar/core`文件，并跟踪其一系列`import`语句，直到从中构建出一个依赖图。这将从`main.ts`（一个TypeScript文件）构建出来。
- en: 'These files will then be provided as output to the `app.js` bundle file that
    is identified in the configuration:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将这些文件作为输出提供给在配置中标识的`app.js`捆绑文件：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The JavaScript file that contains the source code and dependencies is a single
    file and the output bundle is the `app.js` file. This will be loaded later with
    a JavaScript tag (`<script>`) in the `index.html` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 包含源代码和依赖项的JavaScript文件是一个文件，输出捆绑文件是`app.js`文件。稍后将在`index.html`文件中使用JavaScript标签(`<script>`)加载它。
- en: It is advised that you don't have one giant bundle for everything, for obvious
    reasons. Therefore, it is recommended that the volatile application code is separated
    from the more stable vendor code modules.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 建议不要为所有内容创建一个巨大的捆绑文件，这是显而易见的。因此，建议将易变的应用程序代码与更稳定的供应商代码模块分开。
- en: 'This separation of the application and vendor code is done by changing the
    configuration so that two entry points are now used—`main.ts` and `vendor.ts`—as
    shown:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过更改配置，将应用程序和供应商代码分开，现在使用两个入口点——`main.ts`和`vendor.ts`，如下所示：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Two bundle files are emitted from Webpack by constructing two separate dependency
    graphs. The first is called `app.js`, while the second is called `vendor.js`.
    Each contains the application code and vendor dependencies, respectively.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建两个单独的依赖图，Webpack会发出两个捆绑文件。第一个称为`app.js`，而第二个称为`vendor.js`。分别包含应用程序代码和供应商依赖项。
- en: 'In the preceding example, `file name: [name]` indicates a placeholder that
    is replaced with entry names by the Webpack plugin, app, and vendor. Plugins are
    covered in more detail in the next chapter, so if you''re stuck, maybe mark this
    page and come back to it.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的示例中，`file name: [name]`表示一个占位符，Webpack插件app和vendor将其替换为入口名称。插件将在下一章节中详细介绍，所以如果你遇到困难，也许可以标记这一页，然后再回来看看。'
- en: Now, instruct Webpack of which parts belong to the vendor bundle by adding a
    `vendor.ts` file that only imports third-party modules, as in the following code,
    which shows an example of the contents of `vendor.ts`**:**
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过添加一个仅导入第三方模块的`vendor.ts`文件，指示Webpack哪些部分属于供应商捆绑，如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note the mention of `rxjs`. This is a library for reactive programming that
    aims to make it easier for developers to compose asynchronous code or callbacks.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意提到`rxjs`。这是一个用于响应式编程的库，旨在使开发人员更容易地组合异步代码或回调。
- en: Other vendors can be imported this way, such as jQuery, Lodash**,** and Bootstrap.
    File extensions that can also be imported include **JavaScript** files (`.js`),
    **TypeScript** files (`.ts`), **Cascading Style Sheets** files (`.css`), and **Syntactically
    Awesome Style Sheets** files (`.sass`).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其他供应商也可以以这种方式导入，例如 jQuery、Lodash 和 Bootstrap。还可以导入的文件扩展名包括 **JavaScript** 文件（`.js`）、**TypeScript**
    文件（`.ts`）、**层叠样式表** 文件（`.css`）和 **Syntactically Awesome Style Sheets** 文件（`.sass`）。
- en: Angular can be a very complicated framework and is very relevant to web-based
    applications. However, your particular need may suit single-page applications
    better, in which case Vue.js would be the preferred option to use for most. Let's
    take a look at it now.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 可能是一个非常复杂的框架，并且与基于 Web 的应用程序非常相关。然而，您的特定需求可能更适合单页应用程序，这种情况下，Vue.js 将是大多数人首选的选择。现在让我们来看一下它。
- en: Working with Vue.js
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vue.js
- en: Vue.js is another framework but is an open source. The salience of its use,
    or area of distinct purpose, lies within **single-page applications** (**SPAs**).
    This is because the framework focuses on delivering a seamless experience, but
    with fewer features than Angular, which can work alongside many other languages
    and still operate very quickly. Building applications that are quite large with
    Vue.js will result in very slow loading during use and even slower compilation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 是另一个框架，但是它是开源的。它的使用显著性，或者说明显的目的领域，是**单页应用**（**SPAs**）。这是因为该框架专注于提供无缝的体验，但功能比
    Angular 少，可以与许多其他语言一起工作，并且运行速度非常快。使用 Vue.js 构建相当大的应用程序会导致在使用过程中加载非常缓慢，甚至编译速度更慢。
- en: Perhaps the best way to understand this is to consider jQuery and how it uses
    inline statements to call in a script to pages, whereas Angular uses core modules,
    each designed with a specific purpose. Vue.js lies somewhere in between the pure
    and simple jQuery for SPAs and Angular.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 也许理解这一点的最好方法是考虑 jQuery 如何使用内联语句调用页面中的脚本，而 Angular 使用核心模块，每个模块都设计有特定的目的。Vue.js
    介于纯粹简单的 jQuery 和 Angular 之间。
- en: Using Webpack with the Vue.js project is done with the use of a dedicated loader.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Webpack 与 Vue.js 项目是通过使用专用加载器来完成的。
- en: 'The installation of `vue-loader` and `vue-template-compiler` is advised, unless
    you''re an advanced user of Vue.js''s template compiler. Follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 建议安装 `vue-loader` 和 `vue-template-compiler`，除非您是 Vue.js 模板编译器的高级用户。按照以下步骤进行：
- en: 'To follow this example, begin by installing `vue-loader` and `vue-template-compiler` with
    the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要按照这个示例进行，首先安装 `vue-loader` 和 `vue-template-compiler`，使用以下代码：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The template compiler has to be installed separately so that the version can
    be specified.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 模板编译器必须单独安装，以便可以指定版本。
- en: Vue.js has released a corresponding version of its template compiler with each
    new release. The two versions must be in sync so that the loader produces code
    that is runtime compatible. So, every time you upgrade one, you should upgrade
    the other.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Vue.js 每次发布新版本都会发布相应版本的模板编译器。这两个版本必须同步，以便加载器生成的代码是运行时兼容的。因此，每次升级一个版本时，应该升级另一个版本。
- en: The loader associated with Vue.js has a slightly different configuration from
    most loaders. Make sure you add the Vue.js loader's plugin to your Webpack configuration
    when handling files with extensions of `.vue`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Vue.js 相关的加载器与大多数加载器的配置略有不同。在处理扩展名为 `.vue` 的文件时，确保将 Vue.js 加载器的插件添加到您的 Webpack
    配置中。
- en: 'This is done by altering the configuration of Webpack, shown in the following
    example using `webpack.config.js`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是通过修改 Webpack 的配置来完成的，下面的示例使用 `webpack.config.js`：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This plugin is required as it is responsible for cloning riles that are defined
    and applying them to language blocks that correspond to `.vue` files.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件是必需的，因为它负责克隆已定义的文件，并将它们应用于与 `.vue` 文件对应的语言块。
- en: 'Using Vue.js, we add the following content:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Vue.js，我们添加以下内容：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code must be added as it contains the full installation of the
    ECMAScript module for Vue.js when used with bundlers. This should be present in
    the `/dist` folder of your project's `npm` package. Note that `.ems.` signifies
    the ECMAScript module. There are runtime-only and production-specific installation
    methods shown on the Vue.js installation page, which is available in the *Further
    reading* section of this chapter. **UMD** and **CommonJS** installations are similar
    and use the `vue.js` and `vue.common.js` files, respectively.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码必须添加，因为它包含了 ECMAScript 模块的完整安装，用于与打包工具一起使用 Vue.js。这应该存在于项目的 `npm` 包的 `/dist`
    文件夹中。注意 `.ems.` 表示 ECMAScript 模块。Vue.js 安装页面上显示了运行时和生产特定的安装方法，这些方法可以在本章的 *进一步阅读*
    部分找到。**UMD** 和 **CommonJS** 的安装方法类似，分别使用 `vue.js` 和 `vue.common.js` 文件。
- en: As our project will use the `.esm` format, it may be useful to know more about
    it. It has been designed to be analyzed statically, which allows bundlers to perform
    **tree-shaking**, which is the elimination of unused code. Note that the default
    file for bundlers is `pkg.module`, which is responsible for runtime-only ECMAScript
    module compilation. For more information, see the Vue.js installation page—the
    URL is available in the *Further reading* section of this chapter.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的项目将使用 `.esm` 格式，了解更多关于它可能会很有用。它被设计为静态分析，这允许打包工具执行**摇树**，即消除未使用的代码。请注意，打包工具的默认文件是
    `pkg.module`，它负责运行时 ECMAScript 模块编译。有关更多信息，请参阅 Vue.js 安装页面——URL 可在本章的 *进一步阅读*
    部分找到。
- en: This concludes the content of this chapter regarding frameworks and libraries.
    You should now be in a strong position to work with complex projects that may
    even utilize more than one framework.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了关于框架和库的内容。现在，您应该已经具备了处理复杂项目的强大能力，甚至可能会使用多个框架。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered typical frameworks and how to get started with using them.
    This included the installation process that should be followed and what criteria
    and peripherals are needed. This guide has paid attention to best practices and
    security. When you begin your project, you should follow these examples ahead
    of time, paying close attention to procedures, warnings, and requirements.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了典型的框架以及如何开始使用它们。这包括应该遵循的安装过程以及需要的标准和外围设备。本指南关注最佳实践和安全性。在开始项目时，您应该提前遵循这些示例，密切关注程序、警告和要求。
- en: This guide has given you an overview of other frameworks, such as RxJS for callbacks
    and jQuery, as well as pointed you in the right direction when it comes to using
    unusual file extensions. We have also explored the usage and installation procedures
    for Angular's core functionality and Vue.js when working with Webpack 5 and how
    Vue.js is better suited to single-page applications and how Angular works better
    on larger projects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南为您概述了其他框架，如用于回调的RxJS和jQuery，以及在使用不寻常的文件扩展名时指引您正确方向。我们还探讨了在使用Webpack 5时Angular的核心功能和Vue.js的用法和安装程序，以及Vue.js如何更适合单页面应用程序，而Angular在更大的项目上的工作效果更好。
- en: Having covered most of the core topics, in the next chapter we will delve into
    deployment and installation. This will be even more important when working with
    databases and ensuring security requirements are kept. The next chapter will provide
    an in-depth account of this subject and will hopefully address any concerns you
    might have as a developer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在涵盖了大部分核心主题之后，下一章我们将深入探讨部署和安装。在处理数据库并确保满足安全要求时，这将变得更加重要。下一章将对这个主题进行深入探讨，并希望能解决您作为开发人员可能遇到的任何问题。
- en: Further reading
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'GitHub''s YAML example: [https://github.com/nodeca/js-yaml](https://github.com/nodeca/js-yaml)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub的YAML示例：[https://github.com/nodeca/js-yaml](https://github.com/nodeca/js-yaml)
- en: The window.jQuery source code: [https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823](https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823.)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: window.jQuery源代码：[https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823](https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823.)
- en: The Vue.js installation guide: [https://vuejs.org/v2/guide/installation.html](https://vuejs.org/v2/guide/installation.html)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue.js安装指南：[https://vuejs.org/v2/guide/installation.html](https://vuejs.org/v2/guide/installation.html)
- en: Questions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What compiler needs to correspond to the version of `Vue.js` being used?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与正在使用的`Vue.js`版本对应的编译器是什么？
- en: When using Angular, this guide advises the separation of volatile code and stable
    vendor code. This is done using two entry points. What are they?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Angular时，本指南建议将易变代码和稳定供应商代码分开。这是通过使用两个入口点来实现的。它们是什么？
- en: What are the minimal installation requirements when using YAML with Webpack?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Webpack时，使用YAML的最低安装要求是什么？
- en: Why should you install your YAML files globally?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么应该全局安装YAML文件？
- en: What is an SPA?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是SPA？
- en: Where should you add Vue.js's loader when handling `.vue` files?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理`.vue`文件时，应该在哪里添加Vue.js的加载器？
- en: 'What is missing from the following line of code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码行缺少什么？
- en: '`import ''angular/http'';`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`import ''angular/http'';`'
- en: When using Angular, how is `app.js` loaded?
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Angular时，如何加载`app.js`？
- en: What is YARN?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是YARN？
- en: What is the default `pkg.module` file used for?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认的`pkg.module`文件用于什么？
