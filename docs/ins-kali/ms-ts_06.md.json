["```ts\nInstall-Package JasmineTest\nInstall-Package jasmine.TypeScript.DefinitelyTyped\n\n```", "```ts\ndescribe(\"tests/01_SimpleJasmineTests.ts \", () => {\n    it(\"should fail\", () => {\n        var undefinedValue;\n        expect(undefinedValue).toBeDefined();\n    });\n});\n```", "```ts\n<!DOCTYPE html>\n<html >\n    <head>\n        <title>Jasmine Spec Runner</title>\n        <link rel=\"shortcut icon\" type=\"image/png\" href=\"/Content/jasmine/jasmine_favicon.png\">\n        <link rel=\"stylesheet\"\u00a0type=\"text/css\" href=\"/Content/jasmine/jasmine.css\">\n        <script type=\"text/javascript\" src=\"img/jasmine.js\"></script>\n        <script type=\"text/javascript\" src=\"img/jasmine-html.js\"></script>\n        <script type=\"text/javascript\" src=\"img/boot.js\"></script>\n        <script type=\"text/javascript\" src=\"img/01_SimpleJasmineTests.js\"></script>\n\n    </head>\n<body>\n\n</body>\n</html>\n```", "```ts\ndescribe(\"tests/01_SimpleJasmineTests.ts \", () => {\n    it(\"value that has been assigned should be defined\", () => {\n        var undefinedValue = \"test\";\n        expect(undefinedValue).toBeDefined();\n    });\n});\n```", "```ts\n    var undefValue;\n    expect(undefValue).not.toBeDefined();\n```", "```ts\n    var definedValue = 2;\n    expect(definedValue).not.toBe(null);\n```", "```ts\n    expect(definedValue).toBe(2);\n```", "```ts\n    expect(definedValue.toString()).toEqual(\"2\");\n```", "```ts\n    var trueValue = true;\n    expect(trueValue).toBeTruthy();\n    expect(trueValue).not.toBeFalsy();\n```", "```ts\n    var stringValue = \"this is a string\";\n    expect(stringValue).toContain(\"is\");\n    expect(stringValue).not.toContain(\"test\");\n```", "```ts\ndescribe(\"beforeEach and afterEach tests\", () => {\n    var myString;\n\n    beforeEach(() => {\n        myString = \"this is a test string\";\n    });\n    afterEach(() => {\n        expect(myString).toBeUndefined();\n    });\n\n    it(\"should find then clear the myString variable\", () => {\n        expect(myString).toEqual(\"this is a test string\");\n        myString = undefined;\n    });\n\n});\n```", "```ts\ndescribe(\"data driven tests\", () => {\n    using<string>(\"valid values\", [\n        \"first string\",\n        \"second string\",\n        \"third string\"\n    ], (value) => {\n        it(\"should contain string (\" + value + \")\", () => {\n            expect(value).toContain(\"string\");\n        });\n    });\n});\n```", "```ts\nfunction using(name, values, func) {\n    for (var i = 0, count = values.length; i < count; i++) {\n        if (Object.prototype.toString.call(values[i]) !== '[object Array]') \n        {\n            values[i] = [values[i]];\n        }\n        func.apply(this, values[i]);\n    }\n}\n```", "```ts\ndeclare function using<T>(\n    name: string,\n    values : T [],\n    func : (T) => void\n);\n```", "```ts\ndata driven tests\nshould contain string (first string)\nshould contain string (second string)\nshould contain string (third string)\n\n```", "```ts\nclass MySpiedClass {\n    testFunction(arg1: string) {\n        console.log(arg1);\n    }\n}\ndescribe(\"simple spy\", () => {\n    it(\"should register a function call\", () => {\n        var classInstance = new MySpiedClass();\n        spyOn(classInstance, 'testFunction');\n\n        classInstance.testFunction(\"test\");\n\n        expect(classInstance.testFunction).toHaveBeenCalled();\n    });\n});\n```", "```ts\nclass CallbackClass {\n    doCallBack(id: number, callback: (result: string) => void ) {\n        var callbackValue = \"id:\" + id.toString();\n        callback(callbackValue);\n    }\n}\n\nclass DoCallBack {\n    logValue(value: string) {\n        console.log(value);\n    }\n}\n```", "```ts\ndescribe(\"using callback spies\", () => {\n    it(\"should execute callback with the correct string value\", () => {\n        var doCallback = new DoCallBack();\n        var classUnderTest = new CallbackClass();\n\n        spyOn(doCallback, 'logValue');\n        classUnderTest.doCallBack(1, doCallback.logValue);\n\n        expect(callbackSpy.logValue).toHaveBeenCalled();\n        expect(callbackSpy.logValue).toHaveBeenCalledWith(\"id:1\");\n\n    });\n});\n```", "```ts\nClass ClassToFake {\n    getValue(): number {\n        return 2;\n    }\n}\ndescribe(\"using fakes\", () => {\n    it(\"calls fake instead of real function\", () => {\n        var classToFake = new ClassToFake();\n        spyOn(classToFake, 'getValue')\n            .and.callFake( () => { return 5; }\n            );\n        expect(classToFake.getValue()).toBe(5);\n    });\n});\n```", "```ts\nclass MockAsyncClass {\n    executeSlowFunction(success: (value: string) => void) {\n        setTimeout(() => {\n            success(\"success\");\n        }, 1000);\n    }\n}\n```", "```ts\ndescribe(\"asynchronous tests\", () => {\n    it(\"failing test\", () => {\n\n        var mockAsync = new MockAsyncClass();\n        var returnedValue;\n        mockAsync.executeSlowFunction((value: string) => {\n            returnedValue = value;\n        });\n        expect(returnedValue).toEqual(\"success\");\n    });\n\n});\n```", "```ts\nExpected undefined to equal 'success'.\n\n```", "```ts\ndescribe(\"asynch tests with done\", () => {\n    var returnedValue;\n\n    beforeEach((done) => {\n        returnedValue = \"no_return_value\";\n        var mockAsync = new MockAsyncClass();\n        mockAsync.executeSlowFunction((value: string) => {\n            returnedValue = value;\n            done();\n        });\n    });\n\n    it(\"should return success after 1 second\", (done) => {\n        expect(returnedValue).toEqual(\"success\");\n        done();\n    });\n});\n```", "```ts\nInstall-package Jasmine-jquery.TypeScript.DefinitelyTyped\n\n```", "```ts\nClass ModifyDomElement {\n    setHtml() {\n        var elem = $(\"#my_div\");\n        elem.html(\"<p>Hello world</p>\");\n    }\n}\n```", "```ts\ndescribe(\"fixture tests\", () => {\n    it(\"modifies dom element\", () => {\n        setFixtures(\"<div\u00a0id='my_div'></div>\");\n        var modifyDom = new ModifyDomElement();\n        modifyDom.setHtml();\n        var modifiedElement = $(\"#my_div\");\n        expect(modifiedElement.length).toBeGreaterThan(0);\n        expect(modifiedElement.html()).toContain(\"Hello\");\n    });\n});\n```", "```ts\nFunction handle_my_click_div_clicked() {\n    // do nothing at this time\n}\ndescribe(\"click event tests\", () => {\n    it(\"spies on click event element\", () => {\n        setFixtures(\"<div id='my_click_div' \"+\"onclick='handle_my_click_div_clicked'>Click Here</div>\");\n\n        var clickEventSpy = spyOnEvent(\"#my_click_div\", \"click\");\n\n        $('#my_click_div').click();\n        expect(clickEventSpy).toHaveBeenTriggered();\n    });\n});\n```", "```ts\nNpm install \u2013g testem\n\n```", "```ts\n{\n    \"test_page\":\"tests/01_SpecRunner.html\"\n}\n```", "```ts\nNpm install karma-jasmine@2_0 \u2013save-dev\nNpm install jasmine-core \u2013save-dev\nNpm install karma-chrome-launcher\nNpm install karma-jasmine-jquery\n\n```", "```ts\nmodule.exports = function (config) {\n    config.set({\n        basePath: '../../',\n        files: [\n          'Scripts/underscore.js',\n          'Scripts/jquery-1.8.0.js',\n          'Scripts/jasmine-jquery/jasmine-jquery.js',\n          'Scripts/jasmine-data-provider/SpecHelper.js',\n          'tests/*.js'\n        ],\n        autoWatch: true,\n        frameworks: ['jasmine'],\n        browsers: ['Chrome'],\n        plugins: [\n                'karma-chrome-launcher',\n                'karma-jasmine'\n        ],\n\n        junitReporter: {\n            outputFile: 'test_out/unit.xml',\n            suite: 'unit'\n        }\n    });\n};\n```", "```ts\nkarma start <path to karma.config.js>.\n\n```", "```ts\nNpm install \u2013g protractor\n\n```", "```ts\nWebdriver-manager update\n\n```", "```ts\nWebdriver-manager start\n\n```", "```ts\nRemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub\n\n```", "```ts\nexports.config = {\n    seleniumAddress: 'http://localhost:4444/wd/hub',\n    specs: ['*.js']\n}\n```", "```ts\ndescribe(\"simple protractor test\", () => {\n    it(\"should navigate to a page and find a title\", () => {\n        browser.driver.get('http://localhost:64227/Jasmine/Run');\n        expect(browser.driver.getTitle()).toContain(\"Jasmine\");\n    });\n});\n```", "```ts\nprotractor .\\tests\\protractor\\protractor.conf.js\n\n```", "```ts\nUsing the selenium server at http://localhost:4444/wd/hub.\nFinished in 1.606 seconds\n1 test, 1 assertion, 0 failures\n\n```", "```ts\n{\n  Layout = null;\n}\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n  <title>Jasmine Spec Runner</title>\n\n  <link rel=\"shortcut icon\" type=\"image/png\" href=\"/Content/jasmine/jasmine_favicon.png\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/Content/jasmine/jasmine.css\">\n  <script type=\"text/javascript\" src=\"img/jasmine.js\"></script>\n  <script type=\"text/javascript\" src=\"img/jasmine-html.js\"></script>\n  <script type=\"text/javascript\" src=\"img/boot.js\"></script>\n\n  <!\u2014include source files here... -->\n  <script type=\"text/javascript\" src=\"img/SpecHelper.js\"></script>\n  <script type=\"text/javascript\"\n          src=\"img/PlayerSpec.js\"></script>\n\n  <!\u2014include spec files here... -->\n  <script type=\"text/javascript\" src=\"img/Player.js\"></script>\n  <script type=\"text/javascript\" src=\"img/Song.js\"></script>\n</head>\n\n<body>\n</body>\n</html>\n```", "```ts\n<script type=\"text/javascript\" src=\"img/teamcity_reporter.js\">\n</script>\n```", "```ts\n<script type=\"application/javascript\">\n    window.tcapi = new jasmineReporters.TeamCityReporter({});\n    jasmine.getEnv().addReporter(window.tcapi);\n</script>\n```", "```ts\nexportObject.TeamCityReporter = function (args) {\n\n    self.logItems = new Array();\n}\n```", "```ts\nFunction tclog(message, attrs) {\n\n    log(str); // call to console.log\n    return str; // return the string to the calling function\n}\n```", "```ts\nself.jasmineStarted = function (summary) {\n\n    self.logItems.push(\n       tclog(\"progressStart 'Running Jasmine Tests'\"));\n};\n```", "```ts\nclass JasmineApiListener {\n    private _outputComplete: boolean;\n    private _tcReporter: jasmine.ITeamCityReporter;\n\n    constructor(tcreporter: jasmine.ITeamCityReporter) {\n        this._outputComplete = false;\n\n        this._tcReporter = tcreporter;\n        var self = this;\n\n        window.setInterval(() => {\n\n            if (self._tcReporter.finished && !self._outputComplete) {\n                var logItems = self._tcReporter.logItems;\n                var resultNode = document.getElementById( 'teamCityReporterLog');\n                resultNode.setAttribute('class', 'teamCityReporterLog');\n                for (var I = 0; I < logItems.length; i++) {\n                    var resultItemNode = document.createElement('div');\n                    resultItemNode.setAttribute('class', 'logentry');\n                    var textNode = document.createTextNode(logItems[i]);\n                    resultItemNode.appendChild(textNode);\n                    resultNode.appendChild(resultItemNode);\n\n                }\n                self._outputComplete = true;\n\n                var doneFlag = document.getElementById( 'teamCityResultsDone');\n                var doneText = document.createTextNode(\"done\");\n                doneFlag.appendChild(doneText);\n            }\n\n        }, 3000);\n    }\n\n}\n```", "```ts\n<script type=\"application/javascript\">\n    window.tcapi = new jasmineReporters.TeamCityReporter({});\n    jasmine.getEnv().addReporter(window.tcapi);\n    var jasmineApiListener = new JasmineApiListener(window.tcapi);\n</script>\n\n<div id=\"teamCityResultsDone\"></div>\n<div id=\"teamCityReporterLog\"></div>\n```", "```ts\ndescribe(\"team city reporter suite\", () => {\n    it(\"should find test results\", () => {\n        browser.driver.get('http://localhost:64227/Jasmine/Run');\n\n        expect(browser.driver.getTitle()).toContain(\"Jasmine\");\n\n        var element = browser.driver.findElement(\n            { id: \"teamCityResultsDone\" });\n\n        browser.driver.wait(() => {\n            return element.getText().then((value) => {\n                return value.length > 0;\n            });\n        }, 60000, \"failed to complete in 60 s\");\n    });\n\n    afterEach(() => {\n        browser.driver.findElements(\n                by.css(\"#teamCityReporterLog > div.logentry\")\n            ).then((elements) => {\n            for (var i = 0; i < elements.length; i++) {\n                elements[i].getText().then((textValue) => {\n                    console.log(textValue);\n                });\n            }\n        });\n    });\n});\n```"]