["```js\nvec2 item = vec2(1.0, 1.0);\nvec4 other_item = item.xyxx;\n```", "```js\nconst item = [1.0, 1.0];\nconst other_item = [item[0], item[1], item[0], item[0]];\n```", "```js\nconst tempFun = runTemplate.bind(null, loopTemp);\nloopEls = data.items.map(tempFun);\n```", "```js\nfor(let i = 0; i < 10000; i++) {\n    data.items.push({text : `Another item ${i}`});\n}\n```", "```js\nconst markedEls = [];\nfor(let i = 0; i < 10000; i++) {\n    const obj = els[i];\n    if( obj.marked ) {\n        markedEls.push(Object.assign({}, obj));\n    }\n}\n```", "```js\nconst tempFun = runTemplate.bind(null, loopTemp);\nloopEls = data.items.map(tempFun);\n```", "```js\nconst loopEls = data.items.map((item) => {\n    return runTemplate(loopTemp, item);\n});\n```", "```js\n(function() { })();\n```", "```js\n<script type=\"text/javascript\" src=\"./fake_library.js\"></script>\n```", "```js\nfor(let i = 0; i < 100000; i++) {\n    const j = Library.outerFun(true);\n    const k = Library.outerFun(true);\n    const l = Library.outerFun(true);\n    const m = Library.outerFun(true);\n    const n = Library.outerFun(true);\n}\n```", "```js\nfor(let i = 0; i < 100000; i++) {\n    const j = Library.outerFun(true);\n}\n```", "```js\nlet appendCount = 0;\nconst append = function() {\n    if( appendCount >= 100 ) {\n        return clearInterval(append);\n    }\n    const temp = document.createElement('p');\n    temp.textContent = `We are element ${appendCount}`;\n    appendEl.appendChild(temp);\n    appendCount += 1;\n};\nsetInterval(append, 1000);\n```", "```js\nsetTimeout(() => {\n    const prependElement = document.createElement('p');\n    prependElement.textContent = 'we are being prepended to the entire  \n     DOM';\n    document.body.prepend(prependElement);\n}, 5000);\n```", "```js\nconst context = canvasEl.getContext('2d');\ncontext.fillStyle = 'green';\ncontext.fillRect(10, 10, 10, 10);\ncontext.fillStyle = 'red';\ncontext.fillRect(20, 20, 10, 10);\nsetTimeout(() => {\n    context.fillStyle = 'green';\n    context.fillRect(30, 30, 10, 10);\n}, 2000);\n```", "```js\nconst fillStyles = ['green', 'red'];\nconst numOfRunsX = 15;\nconst numOfRunsY = 10;\nconst totalRuns = numOfRunsX * numOfRunsY;\nlet currX = 0;\nlet currY = 0;\nlet count = 0;\nconst paint = function() {\n    context.fillStyle = fillStyles[count % 2];\n    context.fillRect(currX, currY, 10, 10);\n    if(!currX ) {\n        currY += 10;\n    }\n    if( count === totalRuns ) {\n        clearInterval(paint);\n    }\n}\nsetInterval(paint, 1000);\n```", "```js\nfor(let i = 0; i < 1000000; i++) {\n    const temp = document.createElement('p');\n    temp.textContent = `We are element ${i}`;\n    appendEl.appendChild(temp);\n}\n```", "```js\nlist.style.height = `${itemHeight * items.length}px`;\n```", "```js\nconst checkForNewIndex = function(loc) {\n    let tIndex = Math.floor(Math.abs(loc) / ( itemHeight * numItemsOnScreen \n     ));\n    if( tIndex !== currIndex ) {\n        currIndex = tIndex;\n        const fragment = document.createDocumentFragment();\n        fragment.append(...items.slice(currIndex * numItemsOnScreen, \n         (currIndex + 2) * numItemsOnScreen));\n        list.style.paddingTop = `${currIndex * containerHeight}px`;\n        list.style.height = `${(itemHeight * items.length) - (currIndex * \n         containerHeight)}px`;\n        list.innerHTML = '';\n        list.appendChild(fragment);\n    }\n}\n```", "```js\nlist.onwheel = function(ev) {\n    checkForNewIndex(list.getBoundingClientRect().y);\n}\n```", "```js\nconst start = Date.now();\nwhile( Date.now() < start + 1000 ) {; }\n```", "```js\nconst arr = new Array(10000);\nfor(let i = 0; i < arr.length; i++) {\n    arr[i] = i % 2 ? i : -1;\n}\n```", "```js\nconst nArr = [];\nfor(let i = 0; i < arr.length; i++) {\n    if( Math.abs(arr[i]) === arr[i]) {\n        nArr.push(arr[i]);\n    }\n}\n```", "```js\nconst nArr = arr.filter(item => Math.abs(item) === item);\n```", "```js\nconst reducer = function(item) {\n    return Math.abs(item) === item;\n}\nconst nArr = arr.filter(reducer);\n```", "```js\nconst obj = {};\nfor(let i = 0; i < 10000; i++) {\n    obj[`item${i}`] = i;\n}\n```", "```js\nconst results = [];\nfor(let key in obj) {\n    results.push([key, obj[key]]);\n}\n```", "```js\nconst results = [];\nconst keys = Object.keys(obj);\nfor(let i = 0; i < keys.length; i++) {\n    results.push([keys[i], obj[keys[i]]);\n}\n```", "```js\nconst forTest = Object.assign({}, testBaseObj);\nforTest.title = 'for loop';\nforTest.fun = function() {\n    const arr = [];\n    for(let i = 0; i < startup.length; i++) {\n        if( Math.abs(startup[i]) === startup[i] ) {\n            arr.push(startup[i]);\n        }\n    }\n}\nconst filterTest = Object.assign({}, testBaseObj);\nfilterTest.title = 'filter';\nfilterTest.fun = function() {\n    const arr = startup.filter((item) => Math.abs(item) === item);\n}\nconst tests = [forTest, filterTest];\n```", "```js\nconst suite = new Benchmark.Suite;\nfor(let i = 0; i < tests.length; i++) {\n    suite.add(tests[i].title, tests[i].fun);\n}\nsuite.on('cycle', function(event) {\n    const el = document.createElement('li');\n    el.textContent = event.target;\n    el.id = event.target.name;\n    appendEl.appendChild(el);\n})\n.on('complete', function() {\n    const fastest = this.filter('fastest').map('name');\n    document.getElementById(fastest[0]).style.backgroundColor = 'green';\n})\n.run({ 'async' : true });\n```"]