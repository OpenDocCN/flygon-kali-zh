- en: Importance of the super and this Keywords and Exceptions in Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 中 super 和 this 关键字以及异常的重要性
- en: 'In this chapter, we will take a look at two keywords: `super` and `this`. We
    will pick examples and explain how they are put to use in various situations while
    writing our Java code. We will also take a look at exceptions and how we can use
    them to handle situations where the code fails due to some error. We''ll wrap
    up the chapter with a section on the `finally` block.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看两个关键字：`super` 和 `this`。我们将举例并解释它们在编写 Java 代码时在各种情况下的使用方式。我们还将看看异常以及如何使用它们来处理代码由于某些错误而失败的情况。我们将以
    `finally` 块的部分结束本章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The super keyword
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: super 关键字
- en: Practical usage of the super keyword
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: super 关键字的实际用法
- en: Importance of the this keyword
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: this 关键字的重要性
- en: Different kinds of exceptions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的异常
- en: The try...catch mechanism to handle exceptions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: try...catch 机制用于处理异常
- en: Importance of the finally block in Java
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 中 finally 块的重要性
- en: The super keyword
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: super 关键字
- en: In general, when people inherit properties from a different class, there might
    be a redundancy if the same variable names are used in both the parent and child
    class. To differentiate between parent variables and child variables, we use the
    `super` keyword.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当人们从不同的类中继承属性时，如果父类和子类中使用相同的变量名，可能会出现冗余。为了区分父变量和子变量，我们使用 `super` 关键字。
- en: Let's explain this using an example. Let's create two classes and name them
    `childDemo` and `parentDemo`. In the `parentDemo` class, we define a string called
    `name` and assign the `'rahul'` string to it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来解释这个问题。我们创建两个类，分别命名为 `childDemo` 和 `parentDemo`。在 `parentDemo` 类中，我们定义一个名为
    `name` 的字符串，并将字符串 `'rahul'` 赋给它。
- en: 'Now, in the `childDemo` class, we inherit the properties of `parentDemo`. We
    know how to inherit the properties of a parent class using the `extends` keyword,
    which we learned in [Chapter 5](68ddb76d-14d4-4e50-a93d-adef97af0b23.xhtml), *Everything
    You Need to Know About Interfaces and Inheritance*. The code to inherit the properties
    is given here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `childDemo` 类中，我们继承了 `parentDemo` 的属性。我们知道如何使用 `extends` 关键字继承父类的属性，这是我们在[第5章](68ddb76d-14d4-4e50-a93d-adef97af0b23.xhtml)中学到的，*关于接口和继承的一切*。继承属性的代码如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this code, `childDemo` is taking the properties of `parentDemo`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，`childDemo` 继承了 `parentDemo` 的属性。
- en: 'Add a string in the `childDemo` class, call it `name`, and assign the `QAClickAcademy`
    string to it. We then define a method called `public void getStringdata()` inside
    the `childDemo` class and give a statement to print the value of `name` as the
    output. We define another method, called `public static void main(String[] args)`,
    outside `getStringdata()` and create an object for the child class, `childDemo
    cd = new childDemo();`. Once the object is created, we add another line of code
    below it: `cd.getStringdata();`. This calls the `getrStringdata()` method, so
    obviously the name is printed as the output, which is `QAClickAcademy`. Even though
    we are inheriting the properties of the `parentDemo` class, which also contains
    a string with the same name, the print statement calls the value of string in
    `childDemo`. This is because Java gives preference to the local variable.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `childDemo` 类中添加一个字符串，称为 `name`，并将字符串 `QAClickAcademy` 赋给它。然后我们在 `childDemo`
    类内定义一个名为 `public void getStringdata()` 的方法，并给出一个语句来打印 `name` 的值作为输出。我们在 `getStringdata()`
    外定义另一个方法，称为 `public static void main(String[] args)`，并为子类创建一个对象，`childDemo cd
    = new childDemo();`。一旦对象被创建，我们在其下面添加另一行代码：`cd.getStringdata();`。这将调用 `getrStringdata()`
    方法，因此显然名称将作为输出打印，即 `QAClickAcademy`。尽管我们继承了 `parentDemo` 类的属性，该类也包含一个同名的字符串，但打印语句调用的是
    `childDemo` 中字符串的值。这是因为 Java 优先使用局部变量。
- en: 'Whenever there is a collision between the variable names of the parent and
    the child, it gives preference to the local variable, in this case the `childDemo`
    class. What if we are working on a project where we need to print the string name
    in the `parentDemo` class as well? For this, we use the `super` keyword to refer
    to the `parentDemo` class, from which we inherit the properties to the `childDemo`
    class. So, if we want to call the name variable from the `parentDemo` class, we
    add a print statement and add a `super` keyword before the variable we want to
    print—this will get the value from `parentDemo`. When we run the code now, we
    get both the parent object and the child object as an output as we have left a
    print statement for the name string in both classes. The code for the `parentDemo`
    class is given as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当父类和子类的变量名发生冲突时，它会优先使用局部变量，即 `childDemo` 类。如果我们需要在 `parentDemo` 类中打印字符串名称，该怎么办呢？为此，我们使用
    `super` 关键字来引用从中继承属性到 `childDemo` 类的 `parentDemo` 类。因此，如果我们想要从 `parentDemo` 类中调用名称变量，我们添加一个打印语句，并在要打印的变量前添加
    `super` 关键字，这将获取来自 `parentDemo` 的值。现在运行代码，我们将得到父对象和子对象作为输出，因为我们在两个类中都留下了名称字符串的打印语句。`parentDemo`
    类的代码如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code for the `childDemo` class is given as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`childDemo` 类的代码如下所示：'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The final output will be:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出将是：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Practical usage of the super keyword
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: super 关键字的实际用法
- en: In this section, we will take a look at the different ways to use the `super`
    keyword in Java.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看看在 Java 中使用 `super` 关键字的不同方式。
- en: Using the super keyword for methods
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 super 关键字处理方法
- en: We saw how to handle the parent variable with the help of the `super` keyword.
    In this section, we will see how to handle two methods if their names are the
    same in the `parentDemo` and `childDemo` classes. We'll use the previous example
    in this section too.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用 `super` 关键字处理父变量。在本节中，我们还将看到如何处理 `parentDemo` 和 `childDemo` 类中名称相同的两个方法。我们也将在本节中使用之前的例子。
- en: In the `parentDemo` class, add a method called `getData()`, and inside the method
    give a print statement to display the `"I am in parent class"` message. If we
    want to execute the `getData()` method in the `childDemo` class, we write `cd.getData()`
    in the `main` method of the `childDemo` class. We can access `getData()` as we
    are inheriting the properties of the `parentDemo` class. If we run the `childDemo`
    class, we will receive the previous example's output as well as the new sentence
    we added in the `parentDemo` class, `I am in parent class`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`parentDemo`类中，添加一个名为`getData()`的方法，并在方法内部添加一个打印语句来显示`"I am in parent class"`消息。如果我们想在`childDemo`类中执行`getData()`方法，我们在`childDemo`类的`main`方法中写入`cd.getData()`。我们可以访问`getData()`，因为我们继承了`parentDemo`类的属性。如果我们运行`childDemo`类，我们将收到先前示例的输出以及我们在`parentDemo`类中添加的新句子`I
    am in parent class`。
- en: In the `childDemo` class, we will define another method with the same name as
    that of the `parentDemo` class and add a print statement to display the `I am
    in child class` message. If we run the `childDemo` class, we will get the previous
    example's output and then `I am in child class` is displayed. This is because
    preference is given to the local class, so the `getData()` method in the `childDemo`
    class overrides the `getData()` method in the `parentDemo` class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`childDemo`类中，我们将定义另一个与`parentDemo`类相同名称的方法，并添加一个打印语句来显示`I am in child class`消息。如果我们运行`childDemo`类，我们将得到先前示例的输出，然后显示`I
    am in child class`。这是因为优先考虑本地类，所以`childDemo`类中的`getData()`方法覆盖了`parentDemo`类中的`getData()`方法。
- en: 'Now, we want to use the `getData()` method of the `parentDemo` class in the
    `childDemo` class. To do this, we simply do what we did for variables: add `super.getData()`
    inside the `getData()` method of the `childDemo` class. When we run the `childDemo()`
    class, we get the previous example''s output followed by `I am in parent class`
    and then `I am in child class`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想在`childDemo`类中使用`parentDemo`类的`getData()`方法。为此，我们只需像处理变量一样，在`childDemo`类的`getData()`方法中添加`super.getData()`。当我们运行`childDemo()`类时，我们得到先前示例的输出，然后是`I
    am in parent class`，然后是`I am in child class`。
- en: Using the super keyword for constructors
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`super`关键字进行构造函数
- en: Let's use the `super` keyword for constructors in this section. We'll use the
    previous example here too.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在本节中使用`super`关键字进行构造函数。我们也将在这里使用先前的示例。
- en: 'In the `parentDemo` class, we define a constructor, `parentDemo()`, and add
    a print statement to print: `Parent class constructor`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`parentDemo`类中，我们定义一个构造函数`parentDemo()`，并添加一个打印语句来打印：`Parent class constructor`。
- en: 'In `childDemo`, we define a constructor `childDemo()` and add a print statement
    to print: `Child class constructor`. If we want to use the `parentDemo` class
    constructor in the `childDemo` class, we add the `super()` method in the `childDemo()`
    constructor. This makes the controller invoke the constructor in the `parentDemo`
    class.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`childDemo`中，我们定义一个构造函数`childDemo()`并添加一个打印语句来打印：`Child class constructor`。如果我们想在`childDemo`类中使用`parentDemo`类的构造函数，我们在`childDemo()`构造函数中添加`super()`方法。这样控制器就会调用`parentDemo`类中的构造函数。
- en: 'There''s an important rule we need to follow when working with constructors:
    whenever you use a `super` constructor in a child constructor, it should always
    be the first line in it.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用构造函数时，我们需要遵循一个重要的规则：每当在子构造函数中使用`super`构造函数时，它应该始终是第一行。
- en: 'When we run the `childDemo` class, the controller first executes the `super()`
    method. It goes to the `parentDemo()` constructor and executes it and then `childDemo()`.
    So the final output will be:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`childDemo`类时，控制器首先执行`super()`方法。它进入`parentDemo()`构造函数并执行它，然后执行`childDemo()`。因此最终输出将是：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Importance of the this keyword
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`this`关键字的重要性'
- en: 'There is one more keyword in Java that is just like the `super` keyword: `this`.
    In this section, we will take a look at the `this` keyword.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中还有一个与`super`关键字类似的关键字：`this`。在本节中，我们将看一下`this`关键字。
- en: 'Let''s explain the `this` keyword with an example. Create a class named `thisDemo`
    and declare a variable, `a`, and assign the value `2` to it. We define a `getData()`
    method in its class, declare the `a` variable inside it, and assign the value
    `3` to it. We also add a print statement in it. The code will look as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来解释`this`关键字。创建一个名为`thisDemo`的类，并声明一个变量`a`，并将值`2`赋给它。我们在其类中定义一个`getData()`方法，在其中声明`a`变量，并将值`3`赋给它。我们还在其中添加一个打印语句。代码将如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can see, the value of `a` is `2` in the entire class, but in one specific
    method, `getData()`, we want the value of the variable to be `3`. In this code,
    we want to call both values of `a`, that is, `2` and `3`. We create an object
    in the main method and add the `td` object in it. The code for the `td` object
    is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在整个类中`a`的值是`2`，但在一个特定的方法`getData()`中，我们希望变量的值是`3`。在这段代码中，我们想要调用`a`的两个值，即`2`和`3`。我们在主方法中创建一个对象，并将`td`对象添加到其中。`td`对象的代码如下：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If we run the code, the output we get is `3`. But we want to print the value
    of `a` as `2` in the same block too. This is when the `this` keyword comes into
    play. The scope of the class object will be at the class level and not the method
    level. So we say that the `getData()` method refers to the current object and
    the object scope lies in the class level. So `a= 2` is valid for the entire class,
    and `a=3` is valid just for the `getData()` method. This is why we call the `a`
    variable in the `getData()` method, a local variable, and and the `a` variable
    in the class, a global variable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行代码，我们得到的输出是`3`。但是我们也希望在同一个块中将`a`的值打印为`2`。这就是`this`关键字发挥作用的时候。类对象的范围将在类级别而不是方法级别。因此，我们说`getData()`方法是指当前对象，对象范围位于类级别。因此`a=2`对整个类是有效的，而`a=3`仅对`getData()`方法有效。这就是为什么我们称`getData()`方法中的`a`变量为局部变量，而类中的`a`变量为全局变量。
- en: 'To print the global variable of the example that we are working on, we need
    to add a print statement in the `getData()` method and we add `this.a` in the
    print statement. The print statement will look as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印我们正在处理的示例的全局变量，我们需要在`getData()`方法中添加一个打印语句，并在打印语句中添加`this.a`。打印语句将如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we run the code, we get the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，我们得到以下输出：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This wraps up our example on the this variable. Now let's learn about exceptions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们关于这个变量的示例。现在让我们学习一下异常。
- en: Different kinds of exception
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同种类的异常
- en: In this section, we will take a look at how we can handle exceptions in Java.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何在Java中处理异常。
- en: In general, if there is an error in the code, we need to catch it and print
    a message without failing; this can be done using the `try...catch` mechanism.
    So in general, when we try to write code and we suspect that there might be an
    error in it, we will use that error for exception handling.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果代码中有错误，我们需要捕获它并打印一条消息而不是失败；这可以使用`try...catch`机制来实现。因此，一般来说，当我们尝试编写代码并怀疑其中可能有错误时，我们将使用该错误进行异常处理。
- en: We'll explain it with the help of an exercise. Let's create a new class, `exceptionDemo`,
    and inside the `main` block we declare the `a`, `b`, and `c` variables and assign
    values of `4`, `7`, and `0`, respectively, to them. We add a `try` block inside
    the main block and we declare an integer variable, `k`, which is equal to `b`
    divided by `c`. Whenever we add anything in the `try` block, we are trying to
    see whether the code works. If it fails, the controller will come out of this
    `try` block and enter into the `catch` block that contains the exception. An important
    point to remember is that the `catch` block comes right after the `try` block.
    Inside the `catch` block, we write a print message to display `I caught the error/exception`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个练习来解释它。让我们创建一个名为`exceptionDemo`的新类，在`main`块内声明`a`、`b`和`c`变量，并分别为它们赋值`4`、`7`和`0`。我们在主块内添加一个`try`块，并声明一个整数变量`k`，它等于`b`除以`c`。每当我们在`try`块中添加任何内容时，我们都在尝试看代码是否能正常工作。如果失败，控制器将退出这个`try`块并进入包含异常的`catch`块。一个重要的要点是`catch`块紧跟在`try`块后面。在`catch`块内，我们编写一个打印消息来显示`I
    caught the error/exception`。
- en: When the controller goes into the `k` variable line, the script fails because
    `7/0` is infinity, which is an arithmetic exception but the script will not fail
    immediately. If we don't write the `try...catch` block, we see a different kind
    of error.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当控制器进入`k`变量行时，脚本失败，因为`7/0`是无穷大，这是一个算术异常，但脚本不会立即失败。如果我们不编写`try...catch`块，我们会看到一种不同的错误。
- en: Let's take out the `try...catch` block, run the code, and see the error we get.
    We see an error in the output section, `Java.lang.ArithmeticException`; this is
    because we cannot divide `7` by `0`, so the script fails abruptly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去掉`try...catch`块，运行代码，看看我们得到的错误。我们在输出部分看到一个错误，`Java.lang.ArithmeticException`；这是因为我们不能将`7`除以`0`，所以脚本突然失败了。
- en: 'If we initially feel that we will get an error in our code, we can simply make
    a script to pass and catch the error by putting a proper debug message that can
    be handled with the help of the `try...catch` mechanism. Now, let''s add the `try...catch`
    blocks again and debug the entire code. The output will be `I caught the error/exception`;
    this is because `7` divided by `0` is infinity so here the script should fail,
    but we did not see any error in the output section saying the code has failed.
    This is because the controller simply moves to the `catch` block and executes
    it. The final code will look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们最初觉得我们的代码会出错，我们可以简单地编写一个脚本来通过并捕获错误，通过放置一个适当的调试消息，可以通过`try...catch`机制来处理。现在，让我们再次添加`try...catch`块并调试整个代码。输出将是`I
    caught the error/exception`；这是因为`7`除以`0`是无穷大，所以脚本应该失败，但我们在输出部分没有看到任何错误，说代码已经失败。这是因为控制器简单地移动到`catch`块并执行它。最终的代码将如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output will be as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The try...catch mechanism to handle exceptions
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用try...catch机制处理异常
- en: In this section, we will use one `try` followed by multiple `catch` blocks.
    There are different types of exceptions in Java, and for each exception we can
    add separate `catch` blocks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用一个`try`后面跟着多个`catch`块。Java中有不同类型的异常，对于每个异常，我们可以添加单独的`catch`块。
- en: 'Let''s explain this using the previous example. The exception written for the
    previous code is a general exception, so for any error in the `try` block, the
    general exception is executed. Now let''s try and catch a specific exception.
    We can add a `catch` block under the `try` block, and add a specific exception
    and a print statement to print, `I caught the Arithmeticerror/exception`. The
    code for the specific catch block is:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用之前的例子来解释一下。为之前的代码编写的异常是一个通用异常，因此对于`try`块中的任何错误，都会执行通用异常。现在让我们尝试捕获特定的异常。我们可以在`try`块下添加一个`catch`块，并添加一个特定的异常和一个打印语句来打印`I
    caught the Arithmeticerror/exception`。特定catch块的代码如下：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When we run the code, we get the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，我们得到以下输出：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We see that, when we ran the code, the controller went to the `catch` block,
    because the `catch` block is specifically written for an arithmetic exception,
    and the error thrown also belongs to arithmetic errors. So once the controller
    receives an error, the `try` block will see which kind of `catch` block is related
    to it and run it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，当我们运行代码时，控制器进入`catch`块，因为`catch`块专门针对算术异常编写，而抛出的错误也属于算术错误。因此，一旦控制器收到错误，`try`块将查看与之相关的`catch`块的类型，并运行它。
- en: 'There are many other exceptions in Java: we can just Google and take a look
    at them.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Java中还有许多其他异常：我们可以搜索一下看看它们。
- en: Importance of the finally block in Java
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java中finally块的重要性
- en: 'There is one more block that is just like the `try...catch` block: is the `finally`
    block. The `finally` block will be executed irrespective of whether an exception
    is thrown. This block is executed if the program runs successfully, and even executed
    if the program doesn''t run.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个块就像`try...catch`块一样：就是`finally`块。`finally`块将被执行，无论是否抛出异常。如果程序成功运行，这个块将被执行，即使程序不运行也会执行。
- en: 'We''ll explain this using the example we used in the *The try...catch mechanism
    to handle exceptions* section. We just add a `finally` block after the `catch`
    blocks and we give a print statement in it saying, `delete cookies`. The code
    block will look like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*使用try...catch机制处理异常*部分中使用的示例来解释这一点。我们只需在`catch`块后面添加一个`finally`块，并在其中加上一个打印语句，说`delete
    cookies`。代码块将如下所示：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we run the code, we get the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行代码时，我们得到以下输出：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One important point is that `finally` can work with or without the `catch` block;
    all it needs is to be written below a `try` block.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的点是`finally`可以与或不与`catch`块一起工作；它只需要在`try`块下面写就可以了。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at the `super` and `this` keywords. We also
    looked at examples to explain where we can use these keywords to overcome certain
    obstacles. We learned about exceptions, and implemented them in various instances
    where the code failed due to an error. We also learned about the `finally` block.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下`super`和`this`关键字。我们还看了一些例子来解释我们可以在哪些地方使用这些关键字来克服某些障碍。我们学习了异常，并在代码由于错误而失败时在各种情况下实现了它们。我们还学习了`finally`块。
- en: In the next chapter, we will dive deep into the collections framework, which
    consists of interfaces and classes. We will also take a look at the three major
    collections: `List`, `Set` and `Map`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究集合框架，其中包括接口和类。我们还将看一下三个主要的集合：`List`、`Set`和`Map`。
