- en: Queries That Perform Aggregation Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行聚合函数的查询
- en: In this chapter, we will explore LINQ further. Specifically, we'll look at the
    power of LINQ to perform, for example, aggregation functions like averaging, summation,
    counting, and so on. Also, we'll talk about lists of lists, which is a very practical
    thing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进一步探讨LINQ。具体来说，我们将看看LINQ执行聚合函数的能力，比如平均值、求和、计数等。此外，我们还将讨论列表的列表，这是一个非常实用的东西。
- en: Adding a show button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在HTML中添加显示按钮
- en: Bring up project and, to keep things brief, all we will do is put in a button
    below the line beginning with `<form id=....`. To do this, go to Toolbox, grab
    a `Button` control, and drag it in there. Change the text on the Button to say
    `Show`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目，并且为了保持简洁，我们将在以`<form id=....`开头的行下面放一个按钮。要做到这一点，去工具箱，拖动一个`Button`控件，并把它拖到那里。将按钮上的文本更改为`Show`。
- en: 'Now, switch to the Design view and double-click on the Show button. This takes
    us into `Default.aspx.cs`. Delete the `Page_Load` block. We don''t need that.
    The relevant portion of the starting code for this project should look like *Figure
    12.7.1*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到设计视图，并双击显示按钮。这将带我们进入`Default.aspx.cs`。删除`Page_Load`块。我们不需要那个。这个项目的起始代码的相关部分应该看起来像*图12.7.1*：
- en: '![](img/578ad64b-616f-4e92-9494-7532354fad7b.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/578ad64b-616f-4e92-9494-7532354fad7b.png)'
- en: 'Figure 12.7.1: The starting code section for this project'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7.1：这个项目的起始代码部分
- en: 'In the next stage, go to the top of the file and, under `using System`, enter
    the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，转到文件顶部，在`using System`下面输入以下内容：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating an array
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个数组
- en: 'There is a lot of code to enter in this chapter, but it''s mechanical. First,
    we will create an array, so enter the following between the curly braces under
    the line beginning with `protected void Button1_Click...`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中有很多要输入的代码，但这是机械的。首先，我们将创建一个数组，所以在以`protected void Button1_Click...`开头的行的大括号之间输入以下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `IEnumerable` is the data type and `scores` is the name of the array.
    It doesn't matter what values you put into the array.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`IEnumerable`是数据类型，`scores`是数组的名称。你放入数组的值并不重要。
- en: Averaging the values in a list
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对列表中的值求平均值
- en: 'Now, first we will find an average of this list. So, enter the following next:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，首先我们将找到这个列表的平均值。所以，输入以下内容：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will select students who score `90` or above. Imagine, those are the semester
    grades for several students. So, in the preceding line, we're saying where the
    score is `>=90`, select that score. This is a query that you can write in a single
    line. In this context, `score` is the range variable, `scores` is the array, and
    the condition that selects is `where score=>90`. Then, you enter `.` (dot) `Average()`
    to average the whole thing out. In other words, the way that this is written is
    that the query between the parentheses will run and then average the list of values
    in the array. If you hover your mouse over `var` in this line, you'll see that
    it says `double`, because, as you can see if you hover your mouse over `Average`,
    it too returns a double. So, this `Average()` function acts on a list of the `IEnumerable`
    type, but it returns a `double` data type to us.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择得分为`90`或以上的学生。想象一下，这些是几个学生的学期成绩。因此，在前一行中，我们说得分是`>=90`，选择那个分数。这是一个你可以在一行中写的查询。在这个上下文中，`score`是范围变量，`scores`是数组，选择的条件是`where
    score=>90`。然后，你输入`.`（点）`Average()`来平均整个东西。换句话说，这样写的方式是，括号中的查询将运行，然后平均数组中的值。如果你将鼠标悬停在这一行的`var`上，你会看到它说`double`，因为，如果你将鼠标悬停在`Average`上，你也会看到它返回一个`double`。因此，这个`Average()`函数作用于`IEnumerable`类型的列表，但它返回一个`double`数据类型给我们。
- en: Displaying the results
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'Now, you can display the results, of course, because remember that it''s just
    a single numerical value, an aggregation quantity. You can now say the following
    under this line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你当然可以显示结果，因为记住它只是一个单一的数值，一个聚合数量。你现在可以在这一行下面说以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the Count function
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Count函数
- en: 'Now, if you want, you can, for example, also use the `Count` function, so you
    could say something like the following next:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你愿意，你也可以使用`Count`函数，所以你可以说下面的内容：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding line beginning with `var`, we used the query syntax in a single
    line, or inline query syntax, because we used `from` and `where`. Now, we can
    express the same thing using method chaining and the Lambda expressions within
    them. So, here we say `scores.Where`, and then we say where the `grade` is such
    that `70 <=grade`, but `grade <80`. Thus, we''re defining people who earn scores
    of between `70` and `80`, exclusive of a score of `80`, and we''re labeling them
    as average students. Then we''ll `Count` those. This will tell us how many of
    these people are there and then we can display that number. For example, you can
    enter the following next:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在以`var`开头的前一行中，我们在单行中使用了查询语法，或者内联查询语法，因为我们使用了`from`和`where`。现在，我们可以使用方法链接和其中的Lambda表达式来表达相同的事情。所以，这里我们说`scores.Where`，然后我们说`grade`是这样的，即`70
    <=grade`，但`grade <80`。因此，我们正在定义那些得分在`70`和`80`之间的人，不包括`80`的分数，并且我们将它们标记为平均学生。然后我们将`Count`它们。这将告诉我们有多少这样的人，然后我们可以显示那个数字。例如，你可以输入以下内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remember, `averageStudentCount` yields a number, so, for example, the results
    could be, *There are 25 average students*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`averageStudentCount`产生一个数字，所以，例如，结果可能是，*有25个平均学生*。
- en: Working with a list of lists
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用列表的列表
- en: 'Now, a very realistic application of this concept might be to have a list of
    lists. Start by entering the following next:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个概念的一个非常现实的应用可能是有一个列表的列表。首先输入以下内容：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Imagine that you have one student, `firstStudent`. Then, he or she has some
    grade scores, so you make `new List` of integers and then you initialize this
    list with some values within a set of curly braces. So, throw in some values as
    shown. (Note that the values I entered are in the `90` +/- range.) This is how
    you can initialize a list in away that we have not seen before.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一个学生`firstStudent`。然后，他或她有一些成绩，所以您创建了整数的`new List`，然后在一对大括号中初始化了这个列表。因此，按照所示的方式添加一些值。（请注意，我输入的值在`90`
    +/-范围内。）这是您可以以前未见过的方式初始化列表。
- en: 'Now, let''s do one more list of integers for another student. To do this, enter
    the following for `secondStudent`, and write `new List` of integers. Again, initialize
    this list with another set of values. (Note, in this line, the values I will enter
    are in the `80` +/- range.) Now, when you have a whole class, you would have a
    list of such lists, correct? This works because you have multiple students to
    a class:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再为另一个学生做一个整数的列表。为此，输入以下内容以为`secondStudent`创建`new List`。同样，使用另一组值初始化此列表。（请注意，在这一行中，我将输入的值在`80`
    +/-范围内。）现在，当您有一个完整的班级时，您将有这样的列表，对吧？这是因为您有多个学生在一个班级中：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, now you can create constructors. Enter the following next:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在您可以创建构造函数。接下来输入以下内容：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding students to the classList
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向classList添加学生
- en: 'Here, we have a list of lists of integers—you can embed lists inside other
    lists. Then, we will say, for example, the `classList` list, which equals a new
    list of lists. To initialize this list, you can use `Add`. For the next line,
    enter the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个整数的列表列表——您可以在其他列表中嵌入列表。然后，我们会说，例如，`classList`列表等于一个新的列表列表。要初始化此列表，您可以使用`Add`。在下一行，输入以下内容：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is how you can add the first student, the second student, and so on to
    the class list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何将第一个学生、第二个学生等添加到班级列表中的方法。
- en: Summarizing the information in the classList
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结classList中的信息
- en: 'In the next stage, you want to be able to get some useful information. For
    example, imagine you have this list of lists and you want to summarize. So, enter
    the following next:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，您希望能够获得一些有用的信息。例如，想象一下您有这样一个列表的列表，您希望进行总结。因此，接下来输入以下内容：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now `avgPerStudent`, as an example, represents the average student grade. Now,
    after you type `classList.Select()`, the quantity to be selected is the list that
    represents each individual student, which is captured by `(student => student.Average())`.
    Now, be sure that you understand what a `student` parameter is. Here, you select
    a student and average out their grade scores. Hover your mouse over `student`,
    and as you can see, the quantity represents a list of integers that corresponds
    to the first student. Then, `student.Average` means averaging out that student
    and then repeating this process for the next student. If you hover your mouse
    over `var`, you''ll see that the return in this case is of the `IEnumerable` type.
    You can iterate over those values. To do this, you''ll enter the following next:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，以`avgPerStudent`为例，表示平均学生分数。现在，在输入`classList.Select()`之后，要选择的数量是代表每个学生的列表，由`(student
    => student.Average())`捕获。现在，请确保您理解`student`参数是什么。在这里，您选择一个学生并平均他们的成绩。将鼠标悬停在`student`上，您会看到该数量代表与第一个学生对应的整数列表。然后，`student.Average`表示对该学生进行平均，然后对下一个学生重复此过程。如果将鼠标悬停在`var`上，您会看到在这种情况下返回的是`IEnumerable`类型。您可以迭代这些值。要做到这一点，您将输入以下内容：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, underneath this line, enter the following within a set of curly braces
    to display the results:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在此行下方，输入以下内容以在一对大括号中显示结果：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the program
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, build this program and run it in your browser. Click on the Show button:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建此程序并在浏览器中运行它。单击“显示”按钮：
- en: '![](img/69bcb0bf-e199-4312-af4e-1d98e351469b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69bcb0bf-e199-4312-af4e-1d98e351469b.png)'
- en: 'Figure 12.7.2: The results from running our program'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7.2：运行我们程序的结果
- en: Now these are some professional-looking results. The average for great students
    is 98.5\. There are three average students. The extended average grade for the
    two lists is shown at the end.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些是一些专业的结果。优秀学生的平均分是98.5。有三个平均学生。两个列表的扩展平均成绩显示在最后。
- en: So, you learned more of what can be done with LINQ—the `Average` function and
    the `Count` function and you also learned that you can make a list of lists. You
    can operate on these lists using statements such as `Select` and then you can
    embed Lambda expressions to act on each list in the list of lists individually.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您学到了更多关于LINQ的知识——`Average`函数和`Count`函数，还学会了如何制作一个列表的列表。您可以使用`Select`等语句对这些列表进行操作，然后可以嵌入Lambda表达式以单独处理列表中的每个列表。
- en: Chapter review
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored LINQ further. Specifically, we looked at the power
    of LINQ to perform aggregation functions, such as averaging, summation, and counting.
    Also, we talked about lists of lists. You averaged the values in a list, used
    the `Count` function, worked with a list of lists, added students to the `classList`,
    and summarized the information in the `classList`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们进一步探讨了LINQ。具体来说，我们研究了LINQ执行聚合函数（如平均、求和和计数）的能力。此外，我们还讨论了列表的列表。您对列表中的值进行了平均，使用了`Count`函数，处理了列表的列表，向`classList`添加了学生，并总结了`classList`中的信息。
- en: In the next chapter, you will learn about tuples, which are basically collections
    of several values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习关于元组的知识，它们基本上是包含多个值的集合。
