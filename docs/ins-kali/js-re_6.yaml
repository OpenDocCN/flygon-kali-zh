- en: Appendix A. JavaScript Regex Cheat Sheet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. JavaScript 正则表达式速查表
- en: In this appendix, you can find a summary of the patterns used in regular expressions
    in JavaScript along with their descriptions, and a list of useful methods to test
    and create regular expressions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，您可以找到 JavaScript 中正则表达式中使用的模式的摘要，以及它们的描述，以及一些有用的测试和创建正则表达式的方法。
- en: 'The following Regex topics will be covered in this appendix:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录将涵盖以下正则表达式主题：
- en: Character classes and literals
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符类和文字
- en: Character sets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符集
- en: Boundaries and quantifiers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界和量词
- en: Grouping, alternation, and back reference
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分组、选择和反向引用
- en: Useful methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的方法
- en: Character classes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符类
- en: 'In the following table, you can find the patterns for character classes, which
    tell the Regex to match a single character:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到字符类的模式，这些模式告诉正则表达式匹配单个字符：
- en: '| Pattern | Description | Example |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `.` | This matches any character, except newline or another unicode line
    terminator, such as (`\n, \r, \u2028` or `\u2029`). | `/f.o/` matches "fao", "feo",
    and "foo" |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `.` | 这匹配任何字符，除了换行符或其他 Unicode 行终止符，例如 (`\n, \r, \u2028` 或 `\u2029`)。 | `/f.o/`
    匹配 "fao"，"feo" 和 "foo" |'
- en: '| `\w` | This matches any alphanumeric character, including the underscore.
    It is equivalent to `[a-zA-Z0-9_]`. | `/\w/` matches "f" in "foo" |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `\w` | 这匹配任何字母数字字符，包括下划线。它等同于`[a-zA-Z0-9_]`。 | `/\w/` 匹配 "foo" 中的 "f" |'
- en: '| `\W` | This matches any single nonword character. It is equivalent to `[^a-zA-Z0-9_]`.
    | `/\W/` matches "%"in "100%" |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `\W` | 这匹配任何单个非单词字符。它等同于`[^a-zA-Z0-9_]`。 | `/\W/` 匹配 "100%" 中的 "%" |'
- en: '| `\d` | This matches any single digit. It is equivalent to `[0-9]`. | `/\d/`
    matches "1" in "100" |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `\d` | 这匹配任何单个数字。它等同于`[0-9]`。 | `/\d/` 匹配 "100" 中的 "1" |'
- en: '| `\D` | This matches any non digit. It is equivalent to `[^0-9]`. | `/\D/`
    matches "R" in "R2-D2" |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `\D` | 这匹配任何非数字字符。它等同于`[^0-9]`。 | `/\D/` 匹配 "R2-D2" 中的 "R" |'
- en: '| `\s` | This matches any single space character. It is equivalent to `[ \t\r\n\v\f]`.
    | `/\s/` matches " " in "foo bar" |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `\s` | 这匹配任何单个空格字符。它等同于`[ \t\r\n\v\f]`。 | `/\s/` 匹配 "foo bar" 中的 " " |'
- en: '| `\S` | This matches any single nonspace character. It is equivalent to `[^
    \t\r\n\v\f]`. | `/\S/` matches "foo" in "foo bar" |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `\S` | 这匹配任何单个非空格字符。它等同于`[^ \t\r\n\v\f]`。 | `/\S/` 匹配 "foo bar" 中的 "foo"
    |'
- en: Literals
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文字
- en: 'In the following table, you can find the patterns for literal characters, which
    tell the Regex to match a special character:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到文字字符的模式，这些模式告诉正则表达式匹配特殊字符：
- en: '| Pattern | Description | Example |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Alphanumeric` | These match themselves literally. | `/javascript book/`
    matches "javascript book" in "javascript book" |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `字母数字` | 这些字符本身匹配。 | `/javascript book/` 匹配 "javascript book" 中的 "javascript
    book" |'
- en: '| `\0` | This matches a `NUL` character. |   |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `\0` | 这匹配 `NUL` 字符。 |   |'
- en: '| `\n` | This matches a newline character. |   |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 这匹配换行符。 |   |'
- en: '| `\f` | This matches a form feed character. |   |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `\f` | 这匹配换页符。 |   |'
- en: '| `\r` | This matches a carriage return character. |   |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `\r` | 这匹配回车符。 |   |'
- en: '| `\t` | This matches a tab character. |   |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 这匹配制表符。 |   |'
- en: '| `\v` | This matches a vertical tab character. |   |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `\v` | 这匹配垂直制表符。 |   |'
- en: '| `[\b]` | This matches a backspace character. |   |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `[\b]` | 这匹配退格字符。 |   |'
- en: '| `\xxx` | This matches the ASCII character, expressed by the `xxx` octal number.
    | `/112/` matches the "J" character |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `\xxx` | 这匹配 ASCII 字符，由 `xxx` 八进制数表示。 | `/112/` 匹配 "J" 字符 |'
- en: '| `\xdd` | This matches the ASCII character, expressed by the `dd` hex number.
    | `/x4A/` matches the "J" character |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `\xdd` | 这匹配 ASCII 字符，由 `dd` 十六进制数表示。 | `/x4A/` 匹配 "J" 字符 |'
- en: '| `\uxxxx` | This matches the ASCII character, expressed by the `xxxx` UNICODE.
    | `/u0237/` matches the "J" character |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `\uxxxx` | 这匹配 ASCII 字符，由 `xxxx` UNICODE 表示。 | `/u0237/` 匹配 "J" 字符 |'
- en: '| `\` | This indicates whether the next character is special and is not to
    be interpreted literally. | `/\^/` matches "^" in "char ^" |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `\` | 这表明下一个字符是否特殊，不应被字面解释。 | `/\^/` 匹配 "char ^" 中的 "^" |'
- en: Character sets
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符集
- en: In the following table, you can find the patterns for character sets, which
    tell the Regex to match only one character out of several characters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到字符集的模式，这些模式告诉正则表达式仅匹配几个字符中的一个。
- en: '| Pattern | Description | Example |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `[xyz]` | This matches any one character enclosed in the character set. You
    can use a hyphen to denote the range. For example, `/[a-z]/` matches any letter
    in the alphabet and matches `/[0-9]/` to any single digit. | `/[ao]/` matches
    "a" in "bar" |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `[xyz]` | 这匹配字符集中的任何一个字符。您可以使用连字符表示范围。例如，`/[a-z]/` 匹配字母表中的任何字母，`/[0-9]/`
    匹配任何单个数字。 | `/[ao]/` 匹配 "bar" 中的 "a" |'
- en: '| `[^xyz]` | This matches any one character, which is not enclosed in the character
    set. | `/[^ao]/` matches "b" in "bar" |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `[^xyz]` | 这匹配任何一个不在字符集中的字符。 | `/[^ao]/` 匹配 "bar" 中的 "b" |'
- en: Boundaries
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边界
- en: In the following table, you can find the patterns for boundaries, which will
    tell the Regex what position to do the matching in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到边界的模式，这将告诉正则表达式在什么位置进行匹配。
- en: '| Pattern | Description | Example |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `^` | This matches the beginning of an input. If the multiline flag is set
    to true, it also matches immediately after the (`\n`) line break character. |
    `/^ The/` matches "The" in "The stars", but not "In The stars". |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `^` | 这匹配输入的开头。如果多行标志设置为 true，则也匹配 (`\n`) 换行字符之后的位置。 | `/^ The/` 匹配 "The"
    中的 "The"，但不匹配 "In The stars" |'
- en: '| `$` | This matches the end of an input. If the multiline flag is set to true,
    it also matches immediately before the (`\n`) line break character. | `/`and`$/`
    matches "and" in "land", but not "and the bar". |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `$` | 这匹配输入的结尾。如果多行标志设置为 true，则也匹配 (`\n`) 换行字符之前的位置。 | `/`和`$/` 匹配 "land"
    中的 "and"，但不匹配 "and the bar" |'
- en: '| `\b` | This matches any word boundary (test characters must exist at the
    beginning or at the end of a word within the string). | `/va\b/` matches "va"
    in "this is a java script book", but not "this is a javascript book". |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `\b` | 这匹配任何单词边界（测试字符必须存在于字符串中单词的开头或结尾）。 | `/va\b/` 在“this is a java script
    book”中匹配“va”，但不匹配“this is a javascript book”。'
- en: '| `\B` | This matches any non-word boundary. | `/va\B/` matches "va" in "this
    is a JavaScript book", but not "this is a JavaScript book". |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `\B` | 这匹配任何非单词边界。 | `/va\B/` 在“this is a JavaScript book”中匹配“va”，但不匹配“this
    is a JavaScript book”。'
- en: Grouping, alternation, and back reference
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组、交替和反向引用
- en: 'In the following table, you can find the patterns for grouping, alternation,
    and back reference. The grouping is used to group a set of characters in a Regex.
    The alternation is used to combine characters into a single regular expression,
    and the back reference is used to match the same text as previously matched by
    a capturing group:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到分组、交替和反向引用的模式。分组用于在正则表达式中分组一组字符。交替用于将字符组合成单个正则表达式，而反向引用用于匹配与以前捕获组匹配的相同文本：
- en: '| Pattern | Description | Example |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `(x)` | This groups characters together to create a clause, that is, it matches
    `x` and remembers the match. These are called capturing parentheses. | `/(foo)/`
    matches and remembers "foo" in "foo bar". |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `(x)` | 这将字符分组在一起以创建一个子句，即匹配`x`并记住匹配。这些称为捕获括号。 | `/(foo)/` 在“foo bar”中匹配并记住“foo”。'
- en: '| `()` | Parenthesis also serves to capture the desired subpattern within a
    pattern. | `/(\d\d)\/(\d\d)\/(\d\d\d\d)/` matches "12", "12", and "2000" in "12/12/2000".
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `()` | 括号还用于捕获模式内所需的子模式。 | `/(\d\d)\/(\d\d)\/(\d\d\d\d)/` 在“12/12/2000”中匹配“12”、“12”和“2000”。'
- en: '| `(?:x)` | This matches `x` but does not capture it. In other words, no numbered
    references are created for the items within the parenthesis. These are called
    non-capturing parentheses. | `/(?:foo)/` matches, but does not remember "foo"
    in "foo bar". |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `(?:x)` | 这匹配`x`但不捕获它。换句话说，括号内的项目不会创建编号引用。这些称为非捕获括号。 | `/(?:foo)/` 匹配但不记住“foo”在“foo
    bar”中。'
- en: '| `&#124;` | Alternation combines clauses into one regular expression, and
    then matches any of the individual clauses. `x&#124;y` matches either `x` or `y`.
    It is similar to the "OR" statement. | `/morning&#124;night/` matches "morning"
    in "good morning" and matches "night" in "good night". |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;` | 交替将子句组合成一个正则表达式，然后匹配任何单个子句。 `x&#124;y`匹配`x`或`y`。它类似于“OR”语句。 |
    `/morning&#124;night/` 在“good morning”中匹配“morning”，在“good night”中匹配“night”。'
- en: '| `()\n` | "`\n`" (where n is a number from 1-9) when added to the end of a
    regular expression pattern, allows you to back reference a subpattern within the
    pattern, so, the value of the subpattern is remembered and used as part of the
    matching. | `/(no)\1/` matches "nono" in "nono". "`\1`" is replaced with the value
    of the first subpattern within the pattern, or (no), to form the final pattern.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `()\n` | 在正则表达式模式的末尾添加"`\n`"（其中n是1-9之间的数字）允许您在模式内部反向引用一个子模式，因此，子模式的值被记住并用作匹配的一部分。
    | `/(no)\1/` 在“nono”中匹配“nono”。 "`\1`"被替换为模式内的第一个子模式的值，或（no），形成最终模式。'
- en: Quantifiers
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 量词
- en: In the following table, you can find the patterns for quantifiers, which specify
    how many instances of a character, group, or character class must be present in
    an input for a match to be found.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到量词的模式，它们指定了输入中必须存在多少个字符、组或字符类的实例才能找到匹配。
- en: '| Pattern | Description | Example |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `{n}` | This matches exactly `n` occurrences of a regular expression. | `/\d{5}/`
    matches "12345" (five digits) in "1234567890". |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `{n}` | 这匹配正则表达式的确切`n`次出现。 | `/\d{5}/` 在“1234567890”中匹配“12345”（五个数字）。'
- en: '| `{n,}` | This matches `n` or more occurrences of a regular expression. |
    `/\d{5,}/` matches "1234567890" (minimum of five digits) in "1234567890". |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `{n,}` | 这匹配正则表达式的`n`次或更多次出现。 | `/\d{5,}/` 在“1234567890”中匹配“1234567890”（至少五个数字）。'
- en: '| `{n,m}` | This matches `n` to `m` number of occurrences of a regular expression.
    | `/\d{5,7}/` matches "1234567" (minimum of five digits and a maximum of seven
    digits) in "1234567890". |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `{n,m}` | 这匹配正则表达式的`n`到`m`次出现。 | `/\d{5,7}/` 在“1234567890”中匹配“1234567”（至少五个数字，最多七个数字）。'
- en: '| `*` | This matches zero or more occurrences and is equivalent to `{0,}`.
    | `/fo*/` matches "foo" in "foo" and matches "foooooooo" in "fooooooooled". |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 这匹配零次或更多次出现，等同于`{0,}`。 | `/fo*/` 在“foo”中匹配“foo”，在“fooooooooled”中匹配“foooooooo”。'
- en: '| `+` | This matches one or more occurrences and is equivalent to `{1,}`. |
    `/o+/` matches "oo" in "foo". |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 这匹配一次或多次出现，等同于`{1,}`。 | `/o+/` 在“foo”中匹配“oo”。'
- en: '| `?` | This matches zero or one occurrences and is equivalent to `{0,1}`.
    | `/fo?/` matches "fo" in "foo" and matches "f" in "fairy". |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `?` | 这匹配零次或一次出现，等同于`{0,1}`。 | `/fo?/` 在“foo”中匹配“fo”，在“fairy”中匹配“f”。'
- en: '| `+?``*?` | `"?"` can also be used following one of the `*`, `+`, `?`, or
    `{}` quantifiers to make the later match nongreedy, or the minimum number of times
    versus the default maximum. | `/\d{2,4}?/` matches "12" in the "12345" string,
    instead of "1234" due to "`?`" at the end of the quantifier nongreedy. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `+?``*?` | “?”也可以用在`*`、`+`、`?`或`{}`量词之后，使后者匹配非贪婪，或最小次数，而不是默认的最大次数。 | `/\d{2,4}?/`
    在字符串“12345”中匹配“12”，而不是由于量词非贪婪的末尾的“?”而匹配“1234”。 |'
- en: '| `x(?=y)` | Positive lookahead: It matches `x` only if it''s followed by `y`.
    Note that `y` is not included as part of the match, acting only as a required
    condition. | `/Java(?=Script&#124;Hut)/` matches "Java" in "JavaScript" or "JavaHut",
    but not "JavaLand". |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `x(?=y)` | 正向先行断言：仅当`x`后面跟着`y`时才匹配`x`。请注意，`y`不作为匹配的一部分，只作为必需条件。 | `/Java(?=Script&#124;Hut)/`
    在“JavaScript”或“JavaHut”中匹配“Java”，但不匹配“JavaLand”。'
- en: '| `x(?!y)` | Negative lookahead: It matches `x` only if it''s not followed
    by `y`. Note that `y` is not included as part of the match, acting only as a required
    condition. | `/^\d+(?! years)/` matches "5" in "5 days" or "5 books", but not
    "5 years". |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `x(?!y)` | 负向先行断言：仅当`x`后面不跟着`y`时才匹配`x`。请注意，`y`不作为匹配的一部分，只起到必要的条件。 | `/^\d+(?!
    years)/` 在"5 days"或"5 books"中匹配"5"，但不匹配"5 years"。 |'
- en: JavaScript regular expressions methods
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript正则表达式方法
- en: In the following table, you can find the methods used to match or test a regular
    expression. The main JavaScript objects used in regular expressions are `String`
    and `RegExp`, which represent a pattern (such as `regular expression`).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，您可以找到用于匹配或测试正则表达式的方法。正则表达式中使用的主要JavaScript对象是`String`和`RegExp`，它们表示模式（如`regular
    expression`）。
- en: '| Method | Description | Example |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `String.match(regular expression)` | This executes a search for a match within
    a string, based on a regular expression. | `var myString = "today is 12-12-2000";``var
    matches = myString.match(/\d{4}/);``//returns array ["2000"]` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `String.match(regular expression)` | 这在字符串中执行基于正则表达式的匹配搜索。 | `var myString
    = "today is 12-12-2000";``var matches = myString.match(/\d{4}/);``//返回数组["2000"]`
    |'
- en: '| `RegExp.exec(string)` | This executes a search for a match in its string
    parameter. Unlike `String.match`, the parameter entered should be a string, not
    a regular expression pattern. | `var pattern = /\d{4}/;``pattern.exec("today is
    12-12-2000");``//returns array ["2000"]` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `RegExp.exec(string)` | 这在其字符串参数中执行匹配搜索。与`String.match`不同，输入的参数应该是一个字符串，而不是正则表达式模式。
    | `var pattern = /\d{4}/;``pattern.exec("today is 12-12-2000");``//返回数组["2000"]`
    |'
- en: '| `String.replace(regular expression, replacement text)` | This searches and
    replaces the regular expression portion (match) with the replaced text instead.
    | `var phone = "(201) 123-4567";``var phoneFormatted = phone.replace(/[\(\)-\s]/g,
    "");``//returns 2011234567 (removed ( ) - and blank space)` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `String.replace(regular expression, replacement text)` | 这搜索并用替换文本替换正则表达式部分（匹配）。
    | `var phone = "(201) 123-4567";``var phoneFormatted = phone.replace(/[\(\)-\s]/g,
    "");``//返回2011234567（删除了（）-和空格）` |'
- en: '| `String.split (string literal or regular expression)` | This breaks up a
    string into an array of substrings, based on a regular expression or fixed string.
    | `var oldstring = "1,2, 3, 4, 5";``var newstring = oldstring.split(/\s*,\s*/);``//returns
    the array ["1","2","3","4","5"]` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `String.split (string literal or regular expression)` | 这根据正则表达式或固定字符串将字符串分割成子字符串数组。
    | `var oldstring = "1,2, 3, 4, 5";``var newstring = oldstring.split(/\s*,\s*/);``//返回数组["1","2","3","4","5"]`
    |'
- en: '| `String.search(regular expression)` | This tests for a match in a string.
    It returns the index of the match, or `-1`, if it''s not found. | `var myString
    = "today is 12-12-2000";``myString.search(/\d{4}/);``//returns 15 - index of 2000`
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `String.search(regular expression)` | 这在字符串中测试匹配。它返回匹配的索引，如果没有找到则返回`-1`。
    | `var myString = "today is 12-12-2000";``myString.search(/\d{4}/);``//返回15 -
    2000的索引` |'
- en: '| `RegExp.test(string)` | This tests whether the given string matches the Regexp,
    and returns true if it''s matching, and false, if not. | `var pattern = /\d{4}/;``pattern.test("today
    is 12-12-2000");``//returns true` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `RegExp.test(string)` | 这测试给定的字符串是否与正则表达式匹配，如果匹配则返回true，否则返回false。 | `var
    pattern = /\d{4}/;``pattern.test("today is 12-12-2000");``//返回true` |'
- en: In this appendix, we very briefly covered the patterns learned throughout this
    book in a format that is easy to consult on a day-to-day basis.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们非常简要地介绍了本书中学到的模式，以便日常查阅。
