["```kt\n==\n```", "```kt\n!\n```", "```kt\n!=\n```", "```kt\n>\n```", "```kt\n<\n```", "```kt\n>=\n```", "```kt\n<=\n```", "```kt\n&&\n```", "```kt\n||\n```", "```kt\nval time = 9\n\nval amOrPm = if(time < 12) {\n  \"am\"\n} else {\n  \"pm\"\n}\n\nLog.i(\"It is \", amOrPm)\n```", "```kt\nIt is: am\n\n```", "```kt\nval time = 13\n\nif(time < 12) {\n  // Execute some important morning task here\n} else {\n  // Do afternoon work here\n}\n```", "```kt\nLog.i(\"info\", \"$name \nwas born in $yearOfBirth and is $age years old. \nNext year he will be ${currentYear - yearOfBirth} years old)\")\n```", "```kt\nval weight = 30\nval instruction = \n  \"Put bag in ${if (weight >= 25) \"hold\" else \"cabin\" }\"\n\nLog.i(\"instruction is \", instruction)\n```", "```kt\ninstruction is: Put this bag in the hold\n\n```", "```kt\ninstruction is: Put this bag in the cabin\n\n```", "```kt\nif(isComingOverBridge){\n\n   // Shoot them\n\n}\n```", "```kt\nif(isComingOverBridge){\n\n   // Shoot them\n\n}else{\n\n   // Hold position\n\n}\n```", "```kt\nvar isComingOverBridge: Boolean\nvar enemyTroops: Int\nvar friendlyTroops: Int\n\n// Code that initializes the above variables one way or another\n\n// Now the if\nif(isComingOverBridge && friendlyTroops > enemyTroops){\n\n   // shoot them\n\n}else if(isComingOveBridge && friendlyTroops < enemyTroops) {\n\n   // blow the bridge\n\n}else{\n\n   // Hold position\n\n}\n```", "```kt\nif(isComingOverBridge && friendlyTroops > enemyTroops)\n```", "```kt\nelse if(isComingOveBridge && friendlyTroops < enemyTroops)\n```", "```kt\nif (wavingWhiteFlag){\n\n   // Take prisoners\n\n}\n```", "```kt\nif (!wavingWhiteFlag){\n\n   // not surrendering so check everything else\n\n   if(isComingOverBridge && friendlyTroops >= enemyTroops){\n\n          // shoot them\n   }else if(isComingOverBridge && friendlyTroops < \n                enemyTroops) {\n\n         // blow the bridge\n\n   }\n\n}else{\n\n   // this is the else for our first if\n   // Take prisoners\n\n}\n\n// Holding position\n```", "```kt\nval rating:Int = 4\nwhen (rating) {\n  1 -> Log.i(\"Oh dear! Rating = \", \"$rating stars\")\n  2 -> Log.i(\"Not good! Rating = \", \"$rating stars\")\n  3 -> Log.i(\"Not bad! Rating = \", \"$rating stars\")\n  4 -> Log.i(\"This is good! Rating = \", \"$rating stars\")\n  5 -> Log.i(\"Amazing! Rating = \", \"$rating stars\")\n\n  else -> {    \n    Log.i(\"Error:\", \"$rating is not a valid rating\")\n  }\n}\n```", "```kt\nThis is good! Rating =: 4 stars\n\n```", "```kt\nval rating:Int = 4\nwhen (rating) {\n```", "```kt\n1 -> Log.i(\"Oh dear! Rating = \", \"$rating stars\")\n2 -> Log.i(\"Not good! Rating = \", \"$rating stars\")\n3 -> Log.i(\"Not bad! Rating = \", \"$rating stars\")\n4 -> Log.i(\"This is good! Rating = \", \"$rating stars\")\n5 -> Log.i(\"Amazing! Rating = \", \"$rating stars\")\n```", "```kt\nelse -> {\n  Log.i(\"Error:\", \"$rating is not a valid rating\")\n}\n```", "```kt\n// Enter an ocean, river or breed of dog\nval name:String = \"Nile\"\nwhen (name) {\n  \"Atlantic\",\"Pacific\", \"Arctic\" -> \n    Log.i(\"Found:\", \"$name is an ocean\")\n\n  \"Thames\",\"Nile\", \"Mississippi\" -> \n    Log.i(\"Found:\", \"$name is a river\")\n\n  \"Labrador\",\"Beagle\", \"Jack Russel\" -> \n    Log.i(\"Found:\", \"$name is a dog\")\n\n  else -> {\n    Log.i(\"Not found:\", \"$name is not in database\")\n  }\n}\n```", "```kt\nLog.i(\"Found:\", \"$name is an ocean\")\n```", "```kt\nLog.i(\"Found:\", \"$name is a river\")\n```", "```kt\nLog.i(\"Found:\", \"$name is a dog\")\n```", "```kt\nLog.i(\"Not found:\", \"$name is not in database\")\n```", "```kt\nFound:: Nile is a river\n\n```", "```kt\n   \"Atlantic\",\"Pacific\", \"Arctic\" -> \n         printFullDetailsOfOcean(name)\n\n```", "```kt\nvar x = 10\n\nwhile(x > 0) {\n  Log.i(\"x=\", \"$x\")\n  x--\n}\n```", "```kt\nvar x = 10\n\nwhile(x > 10){\n   // more code here.\n   // but it will never run \n  // unless x is greater than 10.\n}\n```", "```kt\nvar newMessages = 3\nvar unreadMessages = 0\n\nwhile(newMessages > 0 || unreadMessages > 0){\n   // Display next message\n   // etc.\n}\n\n// continue here when newMessages and unreadMessages equal 0\n```", "```kt\nvar x = 1\n\nwhile(x > 0){\n   x--\n   // x is now 0 so the condition is false\n   // But this line still runs\n   // and this one\n   // and me!\n}\n```", "```kt\nvar x = 0\n\nwhile(true){\n   x++ // I am going to get very big!\n}\n```", "```kt\nvar y = 10\ndo {\n  y++\n  Log.i(\"In the do block and y=\",\"$y\")\n}\nwhile(y < 10)\n```", "```kt\nIn the do block and y=: 11\n\n```", "```kt\nval rangeOfNumbers = 1..4 \n```", "```kt\nval rangeOfNumbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n```", "```kt\n// We could do this...\n// val list = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n// It is much quicker to do this...\nval list = 1..10\nfor (i in list)\n  Log.i(\"Looping through list\",\"Current value is $i\")\n```", "```kt\nLooping through list: Current value is 1\nLooping through list: Current value is 2\nLooping through list: Current value is 3\nLooping through list: Current value is 4\nLooping through list: Current value is 5\nLooping through list: Current value is 6\nLooping through list: Current value is 7\nLooping through list: Current value is 8\nLooping through list: Current value is 9\nLooping through list: Current value is 10\n\n```", "```kt\nfor (i in list){\n  Log.i(\"Looping through list\",\"Current value is $i\")\n   // More code here\n  // etc.\n}\n```", "```kt\nvar countDown = 10\nwhile(countDown > 0){\n\n  if(countDown == 5)break\n\n  Log.i(\"countDown =\",\"$countDown\")\n  countDown --\n}\n```", "```kt\ncountDown =: 10\ncountDown =: 9\ncountDown =: 8\ncountDown =: 7\ncountDown =: 6\n\n```", "```kt\nvar countUp = 0\nwhile(countUp < 10){\n  countUp++\n\n  if(countUp > 5)continue\n\n  Log.i(\"Inside loop\",\"countUp = $countUp\")\n}\nLog.i(\"Outside loop\",\"countUp = $countUp\")\n```", "```kt\nInside loop: countUp = 1\nInside loop: countUp = 2\nInside loop: countUp = 3\nInside loop: countUp = 4\nInside loop: countUp = 5\nOutside loop: countUp = 10\n\n```"]