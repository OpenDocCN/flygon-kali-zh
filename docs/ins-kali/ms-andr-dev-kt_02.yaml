- en: Building and Running
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行
- en: At this point, you have successfully created an Android project containing one
    screen. In the previous chapter, you also learned how to set up your working environment.
    We showed you how simple it is to use Android tools. You also defined some flavors
    and build types. Let's take control over it! It's time to do your first build
    and run it on a device or an emulator. You will try it with all build types and
    flavor combinations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已成功创建了一个包含一个屏幕的Android项目。在上一章中，您还学会了如何设置您的工作环境。我们向您展示了使用Android工具是多么简单。您还定义了一些风味和构建类型。让我们控制它！现在是时候进行您的第一个构建并在设备或模拟器上运行它了。您将尝试使用所有构建类型和风味组合。
- en: 'This chapter will cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Running your application on emulator and/or real hardware device
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模拟器和/或实际硬件设备上运行您的应用程序
- en: Introduction to Logcat
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Logcat简介
- en: Gradle tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle工具
- en: Running your first Android application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的第一个Android应用程序
- en: 'We made our first screen and defined some specifics for the application itself.
    To be sure that what we did so far is ok, we do the build and run our application.
    We will run the completeDebug build variant. If you forgot how to switch to this
    build variant, we will remind you. Open Android Studio and the `Journaler` project.
    Open the Build Variants pane by clicking on the Build Variants pane on the left
    side of the Android Studio window or by choosing View |Tool Windows | Build Variants.
    The Build Variants pane will appear. Choose completeDebug from the drop-down list,
    as shown in the screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作了我们的第一个屏幕，并为应用程序本身定义了一些具体内容。为了确保我们迄今为止所做的一切都没问题，我们将构建并运行我们的应用程序。我们将运行completeDebug构建变体。如果您忘记了如何切换到这个构建变体，我们会提醒您。打开Android
    Studio和`Journaler`项目。通过单击Android Studio窗口左侧的Build Variants窗格或选择View | Tool Windows
    | Build Variants来打开Build Variants窗格。Build Variants窗格将出现。选择下拉列表中的completeDebug，如屏幕截图所示：
- en: '![](img/11d63f63-a319-436b-b3c9-582e52699a2e.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11d63f63-a319-436b-b3c9-582e52699a2e.png)'
- en: We will use this Build Variant as our main build variant for the try out execution,
    and for production build, we will use the completeDebug build variant. After we
    choose Build Variant from the drop-down list, it takes some time for Gradle to
    build the chosen variant.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个构建变体作为我们的主要构建变体进行尝试执行，对于生产构建，我们将使用completeDebug构建变体。在我们从下拉列表中选择构建变体之后，Gradle需要一些时间来构建所选择的变体。
- en: We will run our application now. We will do it on an emulator first and then
    on a real live device. Start your emulator instance by opening the AVD Manager.
    We will open it by clicking on the AVD Manager icon. It is the fastest way to
    open it. Double-click on the AVD instance. It will take some time until your emulator
    is ready. Emulator performs Android system boot and then it loads a default application
    launcher.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将运行我们的应用程序。我们将首先在模拟器上运行，然后在实际设备上运行。通过打开AVD Manager来启动您的模拟器实例。单击AVD Manager图标来打开它。这是最快的打开方式。双击AVD实例。直到您的模拟器准备就绪，这需要一些时间。模拟器执行Android系统引导，然后加载默认应用程序启动器。
- en: Your emulator is booted and ready to run the application. In order to run the
    application, click on the Run icon or navigate to Run | Run 'app'.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您的模拟器已启动并准备运行应用程序。为了运行应用程序，单击运行图标或导航到Run | Run 'app'。
- en: There is a keyboard shortcut for this; on macOS, it is *Ctrl* + *R*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个键盘快捷键；在macOS上，它是*Ctrl* + *R*。
- en: 'When an application runs, a dialog box for Select Deployment Target appears.
    In case you have multiple instances on which an application can run, you can choose
    one of them as shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，会出现“选择部署目标”对话框。如果您有多个实例可以运行应用程序，您可以选择其中一个，如下面的屏幕截图所示：
- en: '![](img/7c3c0c18-8682-4c61-a468-9b3a11ef7a21.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c3c0c18-8682-4c61-a468-9b3a11ef7a21.png)'
- en: Pick your deployment target and click on OK. In case you want to remember your
    selection, check the Use same selection for future launches selection. It takes
    some time for the application to run, but after a few seconds, your application
    appears!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您的部署目标并单击“确定”。如果您想记住您的选择，请勾选“将来启动时使用相同的选择”。应用程序需要一些时间来运行，但几秒钟后，您的应用程序就会出现！
- en: Meet the Logcat
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Logcat
- en: 'Logcat is an important part of everyday development. Its purpose is to display
    all logs coming from your device. It displays logs from an emulator or a live
    device connected. Android has several levels of log messages:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Logcat是日常开发的重要组成部分。它的目的是显示来自您设备的所有日志。它显示来自模拟器或连接的实际设备的日志。Android有几个级别的日志消息：
- en: Assert
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言
- en: Verbose
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冗长的
- en: Debug
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Information
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息
- en: Warning
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告
- en: Error
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: You can filter log messages by these log levels (for example, when you need
    to see only errors--application crash stacktrace) or log tag (we will explain
    this later); or by keyword, regex, or the application package. Before we apply
    any filter, we will configure Android Studio so the log messages are colored differently.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过这些日志级别（例如，当您需要仅查看错误--应用程序崩溃堆栈跟踪时）或日志标签（我们稍后会解释）或关键字、正则表达式或应用程序包来过滤日志消息。在应用任何过滤器之前，我们将配置Android
    Studio，以便日志消息以不同的颜色显示。
- en: 'Choose Android Studio | Preferences. In the search field, enter `Logcat`. Logcat
    coloring preferences appears, as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Android Studio | Preferences。在搜索字段中输入`Logcat`。Logcat着色首选项将出现，如下面的屏幕截图所示：
- en: '![](img/57490132-7256-442c-9d06-32aa4651e288.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57490132-7256-442c-9d06-32aa4651e288.png)'
- en: 'To edit coloring, you must save a copy of the current coloring theme. Choose
    your theme from the drop-down list and choose Save As. Choose some proper name
    and confirm:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑颜色，您必须保存当前颜色主题的副本。从下拉列表中选择您的主题，然后选择“另存为”。选择一个合适的名称并确认：
- en: '![](img/2b8bb47d-87a0-4041-96b7-72166b35e787.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b8bb47d-87a0-4041-96b7-72166b35e787.png)'
- en: 'Choose Assert from the list and uncheck Use inherited attributes to override
    the color. Make sure that the Foreground option is checked and click on Color
    located to the right of checkbox to choose a new color for the log text. We will
    pick some tone of pink, as shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择断言，并取消选中使用继承的属性以覆盖颜色。确保前景选项被选中，并点击位于复选框右侧的颜色来选择日志文本的新颜色。我们将选择一些粉色的色调，如下面的截图所示：
- en: '![](img/bfbdcad0-4196-47da-acf6-1bff905e7c06.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfbdcad0-4196-47da-acf6-1bff905e7c06.png)'
- en: 'For the Assert level, you can enter the hex code manually: `FF6B68`. For maximal
    readability, we recommend the following colors:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于断言级别，你可以手动输入十六进制代码：`FF6B68`。为了最大的可读性，我们建议以下颜色：
- en: 'Assert: `#FF6B68`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言：`#FF6B68`
- en: 'Verbose: `#BBBBBB`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冗长：`#BBBBBB`
- en: 'Debug: `#F4F4F4`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试：`#F4F4F4`
- en: 'Information: `#6D82E3`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息：`#6D82E3`
- en: 'Warning: `#E57E15`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告：`#E57E15`
- en: 'Error: `#FF1A11`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误：`#FF1A11`
- en: To apply changes, click on Apply and then OK.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用更改，点击应用，然后点击确定。
- en: 'Open Android Monitor (View | Tool Windows | Android Monitor) and take a look
    at the messages printed in the Logcat pane. They are colored with different tones
    for each log level, as shown here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Android Monitor（View | Tool Windows | Android Monitor）并查看在Logcat窗格中打印的消息。它们以不同的色调着色，每个日志级别都不同，如下所示：
- en: '![](img/438b8ce2-45ce-4232-9177-5c5222e5f4cf.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/438b8ce2-45ce-4232-9177-5c5222e5f4cf.png)'
- en: Now we will define our own log messages, which is also a good opportunity to
    work with the Android lifecycle. We will put proper log messages for each lifecycle
    event for the `Application` class and the screen (activity) we created.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将定义我们自己的日志消息，这也是一个与Android生命周期一起工作的好机会。我们将为我们创建的`Application`类和屏幕（活动）的每个生命周期事件放置适当的日志消息。
- en: 'Open your main `Application` class, `Journaler.kt`. Extend the code like the
    following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的主`Application`类，`Journaler.kt`。扩展代码如下：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we introduced some important changes. We overrode the main lifecycle
    event for the `onCreate()`application. We also overrode two additional methods:
    `onLowMemory()`, triggered in critical memory situations (actively running processes
    should trim their memory usage), and `onTrimMemory()`, when the memory is trimmed.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们引入了一些重要的更改。我们重写了`onCreate()`应用程序的主要生命周期事件。我们还重写了另外两个方法：`onLowMemory()`，在内存紧张的情况下触发（正在运行的进程应该减少内存使用），以及`onTrimMemory()`，当内存被修剪时。
- en: 'To log events in our application, we use `Log` class with static methods, each
    exposed for a proper log level. Based on this, we have the following methods exposed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了记录我们应用程序中的事件，我们使用`Log`类的静态方法，每个方法都暴露了适当的日志级别。基于此，我们有以下方法暴露：
- en: 'For Verbose level:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于冗长级别：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For Debug level:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于调试级别：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For Information level:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于信息级别：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Warning level:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于警告级别：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For Error level:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于错误级别：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Methods accept the following parameters:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 方法接受以下参数：
- en: '`Tag`: This is used to identify the origin of a log message'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标签`：用于标识日志消息的来源'
- en: '`message`: This is the message we want to log'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`: 这是我们想要记录的消息'
- en: '`throwable`: This represents an exception to log'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`throwable`: 这代表要记录的异常'
- en: 'Beside these log methods, there are some additional methods that you can use:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些日志方法，还有一些其他方法可以使用：
- en: '`wtf(String tag, String msg)`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wtf(String tag, String msg)`'
- en: '`wtf(String tag, Throwable tr)`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wtf(String tag, Throwable tr)`'
- en: '`wtf(String tag, String msg, Throwable tr)`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wtf(String tag, String msg, Throwable tr)`'
- en: '**Wtf** stands for **What a Terrible Failure**! `Wtf` is used to report an
    exception that should never happen!'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Wtf**代表**What a Terrible Failure**！`Wtf`用于报告不应该发生的异常！'
- en: 'We will play some more with the `Log` class. Open the only screen you have
    created so far and update the `MainActivity` class with the following changes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用`Log`类。打开到目前为止创建的唯一屏幕，并使用以下更改更新`MainActivity`类：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We overrode all important lifecycle methods by the order they execute during
    the activity's lifecycle. For each event, we print the proper log message. Let's
    explain the purpose of the lifecycle and each important event.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照活动生命周期中它们执行的顺序重写了所有重要的生命周期方法。对于每个事件，我们打印适当的日志消息。让我们解释生命周期的目的和每个重要事件。
- en: 'Here, you can see the official diagram from the Android developers'' website,
    explaining the activity lifecycle:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到来自Android开发者网站的官方图表，解释了活动的生命周期：
- en: '![](img/41a10a88-8f9d-4fcb-b24a-28f5f348faf0.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41a10a88-8f9d-4fcb-b24a-28f5f348faf0.png)'
- en: 'You can find the image at [https://developer.android.com/images/activity_lifecycle.png](https://developer.android.com/images/activity_lifecycle.png):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.android.com/images/activity_lifecycle.png](https://developer.android.com/images/activity_lifecycle.png)找到这张图片：
- en: '`onCreate()`: This is executed when the activity is first created. This is
    a place where we usually do main UI elements initialization.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCreate()`: 当活动第一次创建时执行。这通常是我们初始化主要UI元素的地方。'
- en: '`onRestart()`: This is executed if your activity was stopped at some moment
    and then resumed. For example, you turn off your phone screen (lock it) and then
    unlock it again.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRestart()`: 如果你的活动在某个时刻停止然后恢复，这将被执行。例如，你关闭手机屏幕（锁定它），然后再次解锁。'
- en: '`onStart()`: This is executed when the screen becomes visible to the application
    user.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStart()`: 当屏幕对应用程序用户可见时执行。'
- en: '`onResume()`: This is executed when the user starts interaction with the activity.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onResume()`: 当用户开始与活动交互时执行。'
- en: '`onPause()`: Before we resume our previous activity, this method is executed
    on the current one. This is a good place to save all the information you will
    need when you resume again. If there are any unsaved changes, you should save
    them here.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onPause()`: 在我们恢复之前的活动之前，这个方法在当前活动上执行。这是一个保存所有你在下次恢复时需要的信息的好地方。如果有任何未保存的更改，你应该在这里保存它们。'
- en: '`onStop()`: This is executed when an activity is no longer visible to the application
    user.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onStop()`: 当活动对应用程序用户不再可见时执行。'
- en: '`onDestroy()`: This is executed before an activity is destroyed by Android.
    This can happen, for example, if somebody executed the `finish()` method of the
    `Activity` class. To know if the activity is finishing at a particular moment,
    Android provides a method for that check: `isFinishing()`. If an activity is finishing,
    the method will return Boolean `true`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDestroy()`：这是在Android销毁活动之前执行的。例如，如果有人执行了`Activity`类的`finish()`方法，就会发生这种情况。要知道活动是否在特定时刻结束，Android提供了一个检查的方法：`isFinishing()`。如果活动正在结束，该方法将返回布尔值`true`。'
- en: Now, when we wrote some code using the Android lifecycle and put proper log
    messages, we will execute two use cases and look at the logs printed out by Logcat.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们使用Android生命周期编写了一些代码并放置了适当的日志消息后，我们将执行两个用例，并查看Logcat打印出的日志。
- en: First case
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一种情况
- en: 'Run your application. Then just go back and leave it. Kill the app. Open Android
    Monitor, and from the device drop-down list, choose your device instance (emulator
    or real device). From the next drop-down list, choose the Journaler application
    package. Observe the following Logcat output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序。然后只需返回并离开。关闭应用程序。打开Android Monitor，并从设备下拉列表中选择您的设备实例（模拟器或真实设备）。从下一个下拉列表中，选择Journaler应用程序包。观察以下Logcat输出：
- en: '![](img/cecbe102-def8-4013-9a3c-c1e5b8c06d2e.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cecbe102-def8-4013-9a3c-c1e5b8c06d2e.png)'
- en: You will notice the log messages we put in our source code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们在源代码中放置的日志消息。
- en: 'Let''s check how many times during our interaction with the application we
    entered the `onCreate()` and `onDestroy()` methods. Position your cursor on the
    search field and type `on create`. Observe the change in content--there is only
    one entry when we expected two: one for the main `Application` class and one for
    the main activity. Why did this happen? We will find out later:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下在我们与应用程序交互期间我们进入`onCreate()`和`onDestroy()`方法的次数。将光标放在搜索字段上，然后键入`on create`。观察内容的变化--我们预期会有两个条目，但只有一个：一个是主`Application`类的条目，另一个是主活动的条目。为什么会发生这种情况？我们稍后会找出原因：
- en: '![](img/e799dc39-8f47-4598-a9a0-d873f3736f18.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e799dc39-8f47-4598-a9a0-d873f3736f18.png)'
- en: 'What does our output contain? It contains the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出包含什么？它包含以下内容：
- en: '`06-27`: This is the date the event occurred.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`06-27`：这是事件发生的日期。'
- en: '`11:37:59.914`: This is the time the event occurred.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`11:37:59.914`：这是事件发生的时间。'
- en: '`6713-6713/?`: This is the process and thread identifier with the package.
    Process and thread identifiers are the same if the application has only one thread.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`6713-6713/?`：这是带有包的进程和线程标识符。如果应用程序只有一个线程，进程和线程标识符是相同的。'
- en: '`V/Journaler`: This is the log level and tag.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`V/Journaler`：这是日志级别和标记。'
- en: '`[ ON CREATE ]`: This is the log message.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`[ ON CREATE ]`：这是日志消息。'
- en: 'Change the filter to `on destroy`. The content changes to the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将过滤器更改为`on destroy`。内容更改为以下内容：
- en: '`**06-27 11:38:07.317 6713-6713/com.journaler.complete.dev V/Journaler: [ ON
    DESTROY ]**`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`**06-27 11:38:07.317 6713-6713/com.journaler.complete.dev V/Journaler: [ ON
    DESTROY ]**`'
- en: In your case, you will have different date, time, and pid/tid values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的情况下，你会有不同的日期、时间和pid/tid值。
- en: From the drop-down list, change your filtering from Verbose to Warn. Keep the
    value for the filter! You will notice that your Logcat is now empty. It's empty
    because there is no warning messages with the message text containing `on destroy`.
    Remove the filter text and return to Verbose level.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从下拉列表中，将过滤器从Verbose更改为Warn。保持过滤器的值！您会注意到您的Logcat现在是空的。这是因为没有警告消息包含`on destroy`的消息文本。删除过滤器文本并返回到Verbose级别。
- en: 'Run your application. Lock your screen and unlock it a few times in a row.
    Then, close and kill the Journaler application. Observe the following Logcat output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序。锁定屏幕并连续解锁几次。然后，关闭并终止Journaler应用程序。观察以下Logcat输出：
- en: '![](img/eac186f5-fbbf-4970-ac93-48a010ae8480.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eac186f5-fbbf-4970-ac93-48a010ae8480.png)'
- en: As you can see, it's noticeably entering lifecycle states for pausing and resuming.
    Finally, we kill our app and an `onDestroy()` event is triggered. You can see
    it in Logcat.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，它明显地进入了暂停和恢复的生命周期状态。最后，我们终止了我们的应用程序，并触发了一个`onDestroy()`事件。您可以在Logcat中看到它。
- en: 'If it''s easier for you, you can use Logcat from a terminal. Open the terminal
    and execute the following command line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对您来说更容易，您可以从终端使用Logcat。打开终端并执行以下命令行：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the Gradle build tool
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gradle构建工具
- en: During our development, we will need to build different build variants or run
    tests. Those tests can be executed for only certain build variants, if needed,
    or for all of them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的开发过程中，我们需要构建不同的构建变体或运行测试。如果需要，这些测试可以仅针对某些构建变体执行，或者针对所有构建变体执行。
- en: In the following examples, we will cover some of the most common Gradle use
    cases. We will start with cleaning and building.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将涵盖一些最常见的Gradle用例。我们将从清理和构建开始。
- en: 'As you remember, the Journaler application has the following build types defined:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您记得的，Journaler应用程序定义了以下构建类型：
- en: debug
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: release
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布
- en: staging
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂存
- en: preproduction
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预生产
- en: 'The following build flavors are also defined in the Journaler application:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Journaler应用程序中还定义了以下构建风味：
- en: demo
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演示
- en: complete
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成
- en: special
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊
- en: 'Open terminal. To remove everything we built so far, and all temporally build
    derivates, execute the following command line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端。要删除到目前为止构建的所有内容和所有临时构建派生物，请执行以下命令行：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It takes some time to do the cleaning. Then execute the following command line:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 清理需要一些时间。然后执行以下命令行：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This assembles everything--all the build variants that we have in our application.
    Imagine the time impact it can have if we are dealing with a really big project.
    Therefore, we will `isolate` the build command. To build only the debug build
    type, execute the following command line:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将组装所有--我们应用程序中拥有的所有构建变体。想象一下，如果我们正在处理一个非常庞大的项目，它可能会产生什么时间影响。因此，我们将`隔离`构建命令。要仅构建调试构建类型，请执行以下命令行：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It will be executed much faster than the previous example! This builds all
    flavors for the debug build type. In order to be more effective, we will instruct
    Gradle that we are interested only in a complete build flavor for the debug build
    type. Execute this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将比上一个例子执行得快得多！这为调试构建类型构建了所有的flavor。为了更有效，我们将指示Gradle我们只对调试构建类型的完整构建flavor感兴趣。执行这个：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This executes much faster. Here, we will mention several more important Gradle
    commands that are useful:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行得更快。在这里，我们将提到几个更重要的Gradle命令：
- en: 'To run all unit tests execute:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行所有单元测试，请执行：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In case you want to run unit tests for a specific build variant, execute this
    command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为特定的构建变体运行单元测试，请执行以下命令：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In Android, we can run tests on a real device instance or an emulator. Usually,
    those tests have access to some of Android''s components. To execute those (instrumentation)
    tests, you can use the command shown in the following example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，我们可以在真实设备实例或模拟器上运行测试。通常，这些测试可以访问一些Android组件。要执行这些（仪器）测试，你可以使用以下示例中显示的命令：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You will find more about tests and testing Android applications in the final
    chapters of this book.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本书的最后章节中找到更多关于测试和测试Android应用程序的内容。
- en: Debug your application
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试你的应用程序
- en: Now, we know how to log important application messages. During development,
    we will face situations when only logging messages is not enough when analyzing
    application behavior or investigating bugs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何记录重要的应用程序消息。在开发过程中，当分析应用程序行为或调查bug时，仅仅记录消息是不够的。
- en: For us, it's important to have the ability to debug an application code during
    its execution on real Android devices or on emulators. So, let's debug something!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，能够在真实的Android设备或模拟器上执行应用程序代码时进行调试是很重要的。所以，让我们来调试一些东西！
- en: 'Open the main `Application` class and put the break point on line where we
    log the `onCreate()` method, as shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打开主`Application`类，并在我们记录`onCreate()`方法的行上设置断点，如下所示：
- en: '![](img/c08f7d7a-eabc-4c78-9442-00549f6bce2b.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c08f7d7a-eabc-4c78-9442-00549f6bce2b.png)'
- en: As you can see, we set the break point at line **18**. We will add more break
    points. Let's add it in our main (and only) activity. Put a break point in each
    lifecycle event at lines where we perform logging.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在第18行设置了断点。我们将添加更多断点。让我们在我们的主（也是唯一的）活动中添加。在我们执行日志记录的行上的每个生命周期事件中放置一个断点。
- en: '![](img/d5bd3bbf-b390-4c1c-a975-0cb06dfcfc66.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5bd3bbf-b390-4c1c-a975-0cb06dfcfc66.png)'
- en: We set breakpoints at lines 18, 23, 28, 33, 38, and so on. Run the application
    in debug mode by clicking on the debug icon or by choosing Run | Debug app. The
    application is started in debug mode. Wait a little bit and a debugger will soon
    enter the first break point we set.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第18、23、28、33、38行设置了断点。通过点击调试图标或选择运行|调试应用程序，在调试模式下运行应用程序。应用程序以调试模式启动。稍等一会儿，调试器很快就会进入我们设置的第一个断点。
- en: 'The following screenshot illustrates this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的截图说明了这一点：
- en: '![](img/f8821a88-c161-468e-83e5-b756a456f73d.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8821a88-c161-468e-83e5-b756a456f73d.png)'
- en: 'As you can see, the `onCreate()` method of the `Application` class is the first
    method we enter. Let''s check if our applications enter lifecycle methods as expected.
    Click on the Resume Program icon from the Debugger pane. You may notice that we
    did not enter the `onCreate()` method for our main activity! We entered `onStart()`
    after the main `Application` class `onCreate()` method. Congratulations! You just
    discovered your first Android bug! Why did this happen? We used the wrong `onCreate()`
    method version instead of using the following line of code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，`Application`类的`onCreate()`方法是我们进入的第一个方法。让我们检查一下我们的应用程序是否按预期进入了生命周期方法。点击调试器窗格中的恢复程序图标。你可能会注意到，我们没有进入主活动的`onCreate()`方法！我们在主`Application`类的`onCreate()`方法之后进入了`onStart()`。恭喜你！你刚刚发现了你的第一个Android
    bug！为什么会发生这种情况呢？我们使用了错误的`onCreate()`方法版本，而不是使用以下代码行：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We accidentally overrode this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不小心重写了这个：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Thanks to debugging, we discovered this! Stop the debugger by clicking on the
    Stop icon from the Debugger pane and fix the code. Change the code lines to this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了调试，我们发现了这个！通过点击调试器窗格中的停止图标来停止调试器并修复代码。将代码行更改为这样：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We updated our log messages so we can track entering both the `onCreate()` method
    versions. Save your changes and start the application again in debug mode. Don't
    forget to set the break point to both `onCreate()` method overrides! Go through
    the break points one by one. Now we entered all break points in an expected order.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新了我们的日志消息，这样我们就可以跟踪进入`onCreate()`方法的两个版本。保存你的更改，并以调试模式重新启动应用程序。不要忘记为两个`onCreate()`方法重写设置断点！逐个通过断点。现在我们按预期的顺序进入了所有断点。
- en: 'To see all break points, click on the View Breakpoints icon. The Breakpoints
    window appears, as shown here:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有断点，请点击查看断点图标。断点窗口会出现，如下所示：
- en: '![](img/02511c6a-2efb-4eb7-9be8-626cf161c46a.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02511c6a-2efb-4eb7-9be8-626cf161c46a.png)'
- en: By double clicking on Breakpoint, you will be positioned at the line where it
    is set. Stop the debugger.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 双击断点，你将定位到设置断点的行。停止调试器。
- en: 'Imagine you can continue to develop your application for the next two years.
    Your application becomes really big, and it also executes some expensive operations.
    Running it directly in Debug mode can be very difficult and time consuming. We
    will lose a significant amount of time until it enters the break point we are
    interested in. What can we do about it? Applications running in debug mode are
    slower, and we have a slow and big application. How to skip the part where we
    are losing our precious time? We will demonstrate. Run your application by clicking
    on the Run icon or by choosing Run | Run ''app''. The application is executed
    and started on our deployment target (real device or emulator). Attach the debugger
    to your application by clicking on Attach debugger to the Android Process icon
    or by choosing Run | Attach debugger to Android. Choose the Process window that
    appears:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您可以继续开发您的应用程序两年。您的应用程序变得非常庞大，并且还执行一些昂贵的操作。直接在调试模式下运行它可能非常困难和耗时。直到它进入我们感兴趣的断点之前，我们将浪费大量时间。我们能做些什么呢？在调试模式下运行的应用程序速度较慢，而我们的应用程序又又大又慢。如何跳过我们正在浪费宝贵时间的部分？我们将进行演示。通过单击运行图标或选择运行|运行'app'来运行您的应用程序。应用程序在我们的部署目标（真实设备或模拟器）上执行并启动。通过单击附加调试器到Android进程图标或选择运行|附加调试器到Android来将调试器附加到您的应用程序。选择出现的进程窗口：
- en: '![](img/fe6a2ead-2e17-4ef6-be40-deb9a66ad8ad.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fe6a2ead-2e17-4ef6-be40-deb9a66ad8ad.png)'
- en: Pick our application process by double clicking on its package name. The Debugger
    pane appears. From your application, try to go back. **Debugger** enters the `onPause()`
    method of your main activity. Stop Debugger.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过双击其包名称来选择我们的应用程序过程。调试器窗格出现。从您的应用程序中，尝试返回。**调试器**进入主活动的`onPause()`方法。停止调试器。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to build and run your application from Android
    Studio IDE or directly from the terminal. We also analyzed some logs that we got
    from the emulator and real devices. And, in the end, we did some debugging.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，您学会了如何从Android Studio IDE或直接从终端构建和运行应用程序。我们还分析了一些来自模拟器和真实设备的日志。最后，我们进行了一些调试。
- en: In the next chapter, we will get familiar with some components of UI--screens,
    to be more precise. We will show you how to create new screens and how to add
    some stylish details to them. We will also discuss complex layouts of buttons
    and images.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将熟悉一些UI组件--屏幕，更准确地说。我们将向您展示如何创建新屏幕以及如何为它们添加一些时尚细节。我们还将讨论按钮和图像的复杂布局。
