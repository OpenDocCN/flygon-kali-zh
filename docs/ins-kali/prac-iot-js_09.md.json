["```js\naws --version\n```", "```js\naws-cli/1.7.38 Python/2.7.9 Darwin/16.1.0\n```", "```js\naws configure\n```", "```js\nvar config = { \n    collectionName: 'AIOWJS-FACES', \n    region: 'eu-west-1', \n// If the credentials are set using `aws configure`, below two properties are not needed.    \n    accessKeyId: 'YOUR-ACCESSKEYID',  \n    secretAccessKey: YOUR-SECRETACCESSKEY' \n}; \n\nvar AWS = require('aws-sdk'); \nvar fs = require('fs-extra'); \nvar path = require('path'); \nvar klawSync = require('klaw-sync') \n\nAWS.config.region = config.region; \n\nvar rekognition = new AWS.Rekognition({ \n    region: config.region, \n // accessKeyId: config.accessKeyId, // uncomment as applicable \n // secretAccessKey: config.secretAccessKey // uncomment as applicable \n}); \n\nfunction createCollection() { \n    rekognition.createCollection({ \n        'CollectionId': config.collectionName \n    }, (err, data) => { \n        if (err) { \n            console.log(err, err.stack); // an error occurred \n        } else { \n            console.log(data); // successful response \n        } \n    }); \n} \n\nfunction indexFaces() { \n    var paths = klawSync('./faces', { \n        nodir: true, \n        ignore: ['*.json'] \n    }); \n\n    paths.forEach((file) => { \n        var p = path.parse(file.path); \n        var name = p.name.replace(/\\W/g, ''); \n        var bitmap = fs.readFileSync(file.path); \n\n        rekognition.indexFaces({ \n            'CollectionId': config.collectionName, \n            'DetectionAttributes': ['ALL'], \n            'ExternalImageId': name, \n            'Image': { \n                'Bytes': bitmap \n            } \n        }, (err, data) => { \n            if (err) { \n                console.log(err, err.stack); // an error occurred \n            } else { \n                console.log(data.FaceRecords); // successful response \n                fs.writeJson(file.path + '.json', data, (err) => { \n                    if (err) return console.error(err) \n                }); \n            } \n        }); \n    }); \n} \n\ncreateCollection(); \nindexFaces(); \n```", "```js\nnpm init --yes\n```", "```js\nnpm install aws-sdk fs-extra klaw-sync --save\n```", "```js\nnode seed.js\n```", "```js\n[ { Face:  \n     { FaceId: '2d7ac2b3-fa84-5a16-ad8c-7fa670b8ec8c', \n       BoundingBox: [Object], \n       ImageId: '61a299b6-3004-576d-b966-31fb6780f1c7', \n       ExternalImageId: 'photo', \n       Confidence: 99.96211242675781 }, \n    FaceDetail:  \n     { BoundingBox: [Object], \n       AgeRange: [Object], \n       Smile: [Object], \n       Eyeglasses: [Object], \n       Sunglasses: [Object], \n       Gender: [Object], \n       Beard: [Object], \n       Mustache: [Object], \n       EyesOpen: [Object], \n       MouthOpen: [Object], \n       Emotions: [Object], \n       Landmarks: [Object], \n       Pose: [Object], \n       Quality: [Object], \n       Confidence: 99.96211242675781 } } ] \n```", "```js\nvar config = { \n    collectionName: 'AIOWJS-FACES', \n    region: 'eu-west-1', \n    accessKeyId: 'ACCESSKEYID',  \n    secretAccessKey: SECRETACCESSKEY' \n}; \n\nvar AWS = require('aws-sdk'); \nvar fs = require('fs-extra'); \nvar path = require('path'); \nvar klawSync = require('klaw-sync') \n\nAWS.config.region = config.region; \n\nvar rekognition = new AWS.Rekognition({ \n    region: config.region, \n    // accessKeyId: config.accessKeyId, // uncomment as applicable \n    // secretAccessKey: config.secretAccessKey // uncomment as applicable \n}); \n\n// Once you've created your collection you can run this to test it out. \nfunction FaceSearchTest(imagePath) { \n    var bitmap = fs.readFileSync(imagePath); \n\n    rekognition.searchFacesByImage({ \n        \"CollectionId\": config.collectionName, \n        \"FaceMatchThreshold\": 80, \n        \"Image\": { \n            \"Bytes\": bitmap, \n        }, \n        \"MaxFaces\": 1 \n    }, (err, data) => { \n        if (err) { \n            console.error(err, err.stack); // an error occurred \n        } else { \n            // console.log(data); // successful response \n            console.log(data.FaceMatches.length > 0 ? data.FaceMatches[0].Face : data); \n        } \n    }); \n} \n\nFaceSearchTest(__dirname + '/faces/arvind_2.jpg'); \n```", "```js\nnpm init --yes\n```", "```js\nnpm install aws-sdk fs-extra path --save\n```", "```js\nnode seed_test.js\n```", "```js\n{ FaceId: '2d7ac2b3-fa84-5a16-ad8c-7fa670b8ec8c', \n  BoundingBox:  \n   { Width: 0.4594019949436188, \n     Height: 0.4594019949436188, \n     Left: 0.3076919913291931, \n     Top: 0.2820509970188141 }, \n  ImageId: '61a299b6-3004-576d-b966-31fb6780f1c7', \n  ExternalImageId: 'photo', \n  Confidence: 99.96209716796875 } \n```", "```js\nFaceSearchTest(__dirname + '/faces/no_arvind.jpg');\n\nWe should see something like the following:\n\n{ SearchedFaceBoundingBox:\n\n{ Width: 0.5322222113609314,\n\nHeight: 0.5333333611488342,\n\nLeft: 0.2777777910232544,\n\nTop: 0.12444444745779037 },\n\nSearchedFaceConfidence: 99.76634979248047,\n\nFaceMatches: [] }\n```", "```js\nvar config = require('./config.js'); \nvar mqtt = require('mqtt'); \nvar GetMac = require('getmac'); \nvar Raspistill = require('node-raspistill').Raspistill; \nvar crypto = require(\"crypto\"); \nvar Gpio = require('onoff').Gpio; \nvar exec = require('child_process').exec; \n\nvar AWS = require('aws-sdk'); \n\nvar pir = new Gpio(17, 'in', 'both'); \nvar raspistill = new Raspistill({ \n    noFileSave: true, \n    encoding: 'bmp', \n    width: 640, \n    height: 480 \n}); \n\n// Rekognition config \nvar config = { \n    collectionName: 'AIOWJS-FACES', \n    region: 'eu-west-1', \n    accessKeyId: 'ACCESSKEYID',  \n    secretAccessKey: 'SECRETACCESSKEY' \n}; \n\nAWS.config.region = config.region; \n\nvar rekognition = new AWS.Rekognition({ \n    region: config.region, \n    accessKeyId: config.accessKeyId, \n    secretAccessKey: config.secretAccessKey \n}); \n\nvar client = mqtt.connect({ \n    port: config.mqtt.port, \n    protocol: 'mqtts', \n    host: config.mqtt.host, \n    clientId: config.mqtt.clientId, \n    reconnectPeriod: 1000, \n    username: config.mqtt.clientId, \n    password: config.mqtt.clientId, \n    keepalive: 300, \n    rejectUnauthorized: false \n}); \n\nclient.on('connect', function() { \n    client.subscribe('rpi'); \n    GetMac.getMac(function(err, mac) { \n        if (err) throw err; \n        macAddress = mac; \n        client.publish('api-engine', mac); \n        // startStreaming(); \n    }); \n\n}); \n\nclient.on('message', function(topic, message) { \n    message = message.toString(); \n    if (topic === 'rpi') { \n        console.log('API Engine Response >> ', message); \n    } else { \n        console.log('Unknown topic', topic); \n    } \n}); \n\nvar processing = false; \n\n// keep watching for motion \npir.watch(function(err, value) { \n    if (err) exit(); \n    if (value == 1 && !processing) { \n        raspistill.takePhoto() \n            .then((photo) => { \n                console.log('took photo'); \n                checkForMatch(photo, function(err, authorizedFace) { \n                    if (err) { \n                        console.error(err); \n                    } else { \n                        if (authorizedFace) { \n                            console.log('User Authorized'); \n                        } else { \n                            // unauthorized user,  \n                            // send an email! \n                            require('./mailer').sendEmail(photo, function(err, info) { \n                                if (err) { \n                                    console.error(err); \n                                } else { \n                                    console.log('Email Send Success', info); \n                                } \n                            }); \n                        } \n                    } \n                }); \n            }) \n            .catch((error) => { \n                console.error('something bad happened', error); \n            }); \n    } \n}); \n\nfunction checkForMatch(image, cb) { \n    rekognition.searchFacesByImage({ \n        'CollectionId': config.collectionName, \n        'FaceMatchThreshold': 80, \n        'Image': { \n            'Bytes': image, \n        }, \n        'MaxFaces': 1 \n    }, (err, data) => { \n        if (err) { \n            console.error(err, err.stack); // an error occurred \n            cb(err, null); \n        } else { \n            // console.log(data); // successful response \n            console.log(data.FaceMatches.length > 0 ? data.FaceMatches[0].Face : data); \n            cb(null, data.FaceMatches.length >= 1); \n        } \n    }); \n} \n\nfunction exit() { \n    pir.unexport(); \n    process.exit(); \n} \n```", "```js\nnpm install getmac mqtt node-raspistill aws-sdk --save\n```", "```js\nnode index.js\n```"]