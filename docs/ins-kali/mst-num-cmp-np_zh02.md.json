["```py\nIn [1]: import numpy as np \n        a = np.arange(12).reshape(3,2) \n        b = np.arange(15).reshape(2,5) \n        print(a) \n        print(b)\nOut[1]: \n[[ 0 1] \n [ 2 3] \n [ 4 5]] \n[[ 0 1 2 3 4] \n [ 5 6 7 8 9] \nIn [2]: np.dot(a,b)\nOut[2]: array([[ 5,  6,  7,  8,  9], \n               [15, 20, 25, 30, 35], \n               [25, 34, 43, 52, 61]]) \nIn [3]: np.matmul(a,b)\nOut[3]: array([[ 5,  6,  7,  8,  9], \n               [15, 20, 25, 30, 35], \n               [25, 34, 43, 52, 61]]) \nIn [4]: a@b\nOut[4]: array([[ 5,  6,  7,  8,  9], \n               [15, 20, 25, 30, 35], \n               [25, 34, 43, 52, 61]]) \n```", "```py\nIn [5]: from numpy.linalg import multi_dot \n        a = np.arange(12).reshape(4,3) \n        b = np.arange(15).reshape(3,5) \n        c = np.arange(25).reshape(5,5) \n        multi_dot([a, b, c])\nOut[5]: array([[ 1700, 1855, 2010, 2165, 2320], \n               [ 5300, 5770, 6240, 6710, 7180], \n               [ 8900, 9685, 10470, 11255, 12040], \n               [12500, 13600, 14700, 15800, 16900]])\nIn [6]: a.dot(b).dot(c) \nOut[6]: array([[ 1700, 1855, 2010, 2165, 2320], \n               [ 5300, 5770, 6240, 6710, 7180], \n               [ 8900, 9685, 10470, 11255, 12040], \n               [12500, 13600, 14700, 15800, 16900]])\n```", "```py\nIn [7]: import numpy as np \n        from numpy.linalg import multi_dot \n        import time \n        a = np.arange(120000).reshape(400,300) \n        b = np.arange(150000).reshape(300,500) \n        c = np.arange(200000).reshape(500,400) \n        start = time.time() \n        multi_dot([a,b,c]) \n        ft = time.time()-start \n        print ('Multi_dot tooks', time.time()-start,'seconds.') \n        start_ft = time.time()\n        a.dot(b).dot(c) \n        print ('Chain dot tooks', time.time()-start_ft,'seconds.')\nOut[7]:\nMulti_dot tooks 0.14687418937683105 seconds. \nChain dot tooks 0.1572890281677246 seconds. \n```", "```py\nIn [8]: a = np.arange(9).reshape(3,3) \n        b = np.arange(3) \n        print(a) \n        print(b)\nOut[8]:\n[[0 1 2] \n [3 4 5] \n [6 7 8]] \n[0 1 2]\nIn [9]: np.inner(a,b) \nOut[9]: array([ 5, 14, 23])\nIn [10]: np.outer(a,b) \nOut[10]: array([[ 0, 0, 0], \n                [ 0, 1, 2], \n                [ 0, 2, 4], \n                [ 0, 3, 6], \n                [ 0, 4, 8], \n                [ 0, 5, 10], \n                [ 0, 6, 12], \n                [ 0, 7, 14], \n                [ 0, 8, 16]])\n```", "```py\n[0x0 + 1x1 + 2x2, 0x3 + 1x4 + 2x5, 0x6 + 1x7 + 2x8] = [5, 14, 23]\n```", "```py\nIn [11]: a = np.arange(9) \n         np.ndim(a)\nOut[11]: 1 \nIn [12]: np.outer(a,b) \nOut[12]: array([[ 0, 0, 0], \n                [ 0, 1, 2], \n                [ 0, 2, 4], \n                [ 0, 3, 6], \n                [ 0, 4, 8], \n                [ 0, 5, 10], \n                [ 0, 6, 12], \n                [ 0, 7, 14], \n                [ 0, 8, 16]])\n```", "```py\nIn [13]: a = np.arange(12).reshape(2,3,2) \n         b = np.arange(48).reshape(3,2,8) \n         c = np.tensordot(a,b, axes =([1,0],[0,1])) \n         print(a) \n         print(b)\nOut[13]: \n[[[ 0 1] \n   [ 2 3] \n   [ 4 5]] \n\n[[ 6 7] \n [ 8 9] \n [10 11]]] \n[[[ 0 1 2 3 4 5 6 7] \n  [ 8 9 10 11 12 13 14 15]]\n\n [[16 17 18 19 20 21 22 23] \n  [24 25 26 27 28 29 30 31]]\n\n [[32 33 34 35 36 37 38 39] \n  [40 41 42 43 44 45 46 47]]]\nIn [14]: c\nOut[14]: array([[ 800, 830, 860, 890, 920, 950, 980, 1010], \n                [ 920, 956, 992, 1028, 1064, 1100, 1136, 1172]])\n```", "```py\nIn [15]: import numpy as np \n         from sklearn import decomposition, datasets\n         from sklearn.preprocessing import StandardScaler \n         data = datasets.load_breast_cancer() \n         cancer = data.data \n         cancer = StandardScaler().fit_transform(cancer) \n         cancer.shape\nOut[15]: (569, 30) \n```", "```py\nIn [16]: before_transformation = data.data \n         before_transformation[:10,:1]\nOut[16]: array([[ 17.99], \n                [ 20.57], \n                [ 19.69], \n                [ 11.42], \n                [ 20.29], \n                [ 12.45], \n                [ 18.25], \n                [ 13.71], \n                [ 13\\. ], \n                [ 12.46]])\nIn [17]: cancer[:10,:1]\nOut[17]: array([[ 1.09706398], \n                [ 1.82982061], \n                [ 1.57988811], \n                [-0.76890929], \n                [ 1.75029663], \n                [-0.47637467], \n                [ 1.17090767], \n                [-0.11851678], \n                [-0.32016686], \n                [-0.47353452]])\n```", "```py\nIn [18]: covariance_matrix = np.cov(cancer,rowvar=False)\n         covariance_matrix.shape\nOut[18]: (30, 30)\nIn [19]: eig_val_cov, eig_vec_cov = np.linalg.eig(covariance_matrix)\n         eig_pairs = [(np.abs(eig_val_cov[i]), eig_vec_cov[:,i]) for i in\n         range(len(eig_val_cov))]\n```", "```py\nIn [20]: sorted_pairs = eig_pairs.sort(key=lambda x: x[0], reverse=True)\n         for i in eig_pairs:\n             print(i[0])\nOut[20]:\n13.3049907944 \n5.70137460373 \n2.82291015501 \n1.98412751773 \n1.65163324233 \n1.2094822398 \n0.676408881701 \n0.47745625469 \n0.417628782108 \n0.351310874882 \n0.294433153491 \n0.261621161366 \n0.241782421328 \n0.157286149218 \n0.0943006956011 \n0.0800034044774 \n0.0595036135304 \n0.0527114222101 \n0.049564700213 \n0.0312142605531 \n0.0300256630904 \n0.0274877113389 \n0.0243836913546 \n0.0180867939843 \n0.0155085271344 \n0.00819203711761 \n0.00691261257918 \n0.0015921360012 \n0.000750121412719 \n0.000133279056663\n```", "```py\nIn [21]: matrix_w = np.hstack((eig_pairs[0][1].reshape(30,1), eig_pairs[1]             [1].reshape(30,1)))\n         matrix_w.shape \n         transformed = matrix_w.T.dot(cancer.T) \n         transformed = transformed.T \n         transformed[0]\nOut[21]: array([ 9.19283683, 1.94858307])\nIn [22]: transformed.shape\nOut[22]: (569, 2)        \n```", "```py\nIn [23]: import numpy as np \n         from sklearn import decomposition \n         from sklearn import datasets \n         from sklearn.preprocessing import StandardScaler \n         pca = decomposition.PCA(n_components=2) \n         x_std = StandardScaler().fit_transform(cancer)\n         pca.fit_transform(x_std)[0]\nOut[23]: array([ 9.19283683, 1.94858307]) \n```", "```py\nIn [24]: import numpy as np \n         x = np.array([2,5,9,0]) \n         np.linalg.norm(x,ord=0)\nOut[24]: 3.0 \n```", "```py\nIn [25]: np.linalg.norm(x,ord=1) \nOut[25]: 16.0 \n```", "```py\nIn [26]: np.linalg.norm(x,ord=2) \nOut[26]: 10.488088481701515\n```", "```py\n||A||[1] = max(3 + |-2| + 1; 7 + |-5| + 3; 6 + 4 + |-14|) = max(6, 15, 24) = 24\n```", "```py\nIn [27]: a = np.array([3,7,6,-2,-5,4,1,3,-14]).reshape(3,3)\nIn [28]: a\nOut[28]: array([[ 3, 7, 6], \n                [ -2, -5, 4], \n                [ 1, 3, -14]])\nIn [29]: np.linalg.norm(a, ord=1)\nOut[29]: 24.0\nIn [30]: np.linalg.norm(a, np.inf)\nOut[30]: 18.0 \n```", "```py\n||A||[\u221e] = max(3 + 7 + 6; |-2| + |-5| + 4; 1 + 3 + |-14|) = max(16, 11, 18) = 18 \n```", "```py\nIn [31]: np.linalg.norm(a, ord=2)\nOut[31]: 15.832501006406099  \n```", "```py\nIn [32]: A= np.array([2,3,1,4]).reshape(2,2) \nIn [33]: A\nOut[33]: array([[2, 3], \n                [1, 4]])\nIn [34]: np.linalg.det(A)\nOut[34]: 5.0\nIn [35]: B= np.array([2,3,5,1,4,8,5,6,2]).reshape(3,3)\nIn [36]: B\nOut[36]: array([[2, 3, 5], \n                [1, 4, 8], \n                [5, 6, 2]]) \nIn [37]: np.linalg.det(B) \nOut[37]: -36.0\n```", "```py\nIn [38]: a = np.arange(9).reshape(3,3)\nIn [39]: a\nOut[39]: array([[0, 1, 2], \n                [3, 4, 5], \n                [6, 7, 8]])\nIn [40]: np.trace(a) \nOut[40]: 12\nIn [41]: b = np.arange(27).reshape(3,3,3) \nIn [42]: b\nOut[42]: array([[[ 0, 1, 2], \n                 [ 3, 4, 5], \n                 [ 6, 7, 8]], \n\n                [[ 9, 10, 11], \n                 [12, 13, 14], \n                 [15, 16, 17]], \n\n                [[18, 19, 20], \n                 [21, 22, 23], \n                 [24, 25, 26]]])\n\nIn [43]: np.trace(b)\nOut[43]: array([36, 39, 42])\n```", "```py\nIn [44]: A = np.array([[2, 1, 2], [3, 2, 1], [0, 1, 1]])\n         A\nOut[44]: array([[2, 1, 2], \n                [3, 2, 1], \n                [0, 1, 1]])\nIn [45]: B = np.array([8,3,4])\n         B \nOut[45]: array([8, 3, 4])\nIn [46]: A_inv = np.linalg.inv(A)\n         A_inv\nOut[46]: array([[ 0.2, 0.2, -0.6], \n                [-0.6, 0.4, 0.8], \n                [ 0.6, -0.4, 0.2]])\nIn [47]: np.dot(A_inv,B)\nOut[47]: array([-0.2, -0.4, 4.4])\n```", "```py\nIn [48]: A = np.array([[2, 1, 2], [3, 2, 1], [0, 1, 1]]) \n         B = np.array([8,3,4]) \n         x = np.linalg.solve(A, B) \n         x\nOut[48]: array([-0.2, -0.4, 4.4]) \n```", "```py\nIn [49]: np.allclose(np.dot(A, x), B)\nOut[49]: True\n```", "```py\nIn [50]: from numpy import arange,array,ones,linalg\n         from pylab import plot,show\n         x = np.arange(1,11) \n         A = np.vstack([x, np.ones(len(x))]).T\n         A\nOut[50]: array([[ 1., 1.], \n                [ 2., 1.], \n                [ 3., 1.], \n                [ 4., 1.], \n                [ 5., 1.], \n                [ 6., 1.], \n                [ 7., 1.], \n                [ 8., 1.], \n                [ 9., 1.], \n                [ 10., 1.]]) \nIn [51]: y = [5, 6, 6.5, 7, 8,9.5, 10, 10.4,13.1,15.5] \n         w = linalg.lstsq(A,y)[0] \n         w\nOut[51]: array([ 1.05575758, 3.29333333])\nIn [52]: line = w[0]*x+w[1] \n         plot(x,line,'r-',x,y,'o') \n         show()\n```", "```py\nIn [53]: a = np.array([1,3, 6, 7, 11, 14]) \n         gr = np.gradient(a) \n         gr\nOut[53]: array([ 2\\. , 2.5, 2\\. , 2.5, 3.5, 3\\. ])\n```", "```py\ngr[0] = (a[1]-a[0])/1 = (3-1)/1 = 2\ngr[1] = (a[2]-a[0])/2 = (6-1)/2 = 2.5\ngr[2] = (a[3]-a[1])/2 = (7-3)/2 = 2\ngr[3] = (a[4]-a[2])/2 = (11-6)/2 = 2.5\ngr[4] = (a[5]-a[3])/2 = (14-7)/2 = 3.5\ngr[5] = (a[5]-a[4])/1 = (14-11)/1 = 3\n```", "```py\n[54]: a = np.array([1,3, 6, 7, 11, 14]). reshape(2,3) \n         gr = np.gradient(a) \n         gr\nOut[54]: [array([[ 6., 8., 8.], \n                 [ 6., 8., 8.]]), array([[ 2\\. , 2.5, 3\\. ], \n                 [ 4\\. , 3.5, 3\\. ]])]\n```"]