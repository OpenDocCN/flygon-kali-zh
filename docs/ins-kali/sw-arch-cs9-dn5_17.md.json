["```cs\n/// <summary>\n/// This code is being used just for explaining the concept of cyclomatic complexity. \n/// It makes no sense at all. Please Calculate Code Metrics for understanding \n/// </summary>\nprivate static void CyclomaticComplexitySample()\n{\n  var billingMode = GetBillingMode();\n  var messageResponse = ProcessCreditCardMethod();\n  switch (messageResponse)\n    {\n      case \"A\":\n        if (billingMode == \"M1\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"B\":\n        if (billingMode == \"M2\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"C\":\n        if (billingMode == \"M3\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"D\":\n        if (billingMode == \"M4\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"E\":\n        if (billingMode == \"M5\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"F\":\n        if (billingMode == \"M6\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"G\":\n        if (billingMode == \"M7\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      case \"H\":\n        if (billingMode == \"M8\")\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        else\n          Console.WriteLine($\"Billing Mode {billingMode} for \" +\n            $\"Message Response {messageResponse}\");\n        break;\n      default:\n        Console.WriteLine(\"The result of processing is unknown\");\n        break;\n    }\n} \n```", "```cs\nstatic void Main()\n{\n    var billingMode = GetBillingMode();\n    var messageResponse = ProcessCreditCardMethod();\nDictionary<CreditCardProcessingResult, CheckResultMethod>\nmethodsForCheckingResult =GetMethodsForCheckingResult();\n    if (methodsForCheckingResult.ContainsKey(messageResponse))\n        methodsForCheckingResult[messageResponse](billingMode, \n        messageResponse);\n    else\n        Console.WriteLine(\"The result of processing is unknown\");\n} \n```", "```cs\nprivate static int CodeWithNoTryCatch(string textToConvert)\n{\n    return Convert.ToInt32(textToConvert);\n} \n```", "```cs\nprivate static int CodeWithEmptyTryCatch(string textToConvert)\n{\n    try\n    {\n        return Convert.ToInt32(textToConvert);\n    }\n    catch\n    {\n        return 0;\n    }\n} \n```", "```cs\nprivate static int CodeWithCorrectTryCatch(string textToConvert)\n{\n    try\n    {\n        return Convert.ToInt32(textToConvert);\n    }\n    catch (FormatException err)\n    {\n        Logger.GenerateLog(err);\n        return 0;\n    }\n} \n```", "```cs\nprivate static void CodeWithIncorrectFileStreamManagement()\n{\n    FileStream file = new FileStream(\"C:\\\\file.txt\",\n        FileMode.CreateNew);\n    byte[] data = GetFileData();\n    file.Write(data, 0, data.Length);\n} \n```", "```cs\nprivate static void CorrectFileStreamManagementFirstOption()\n{\n    FileStream file = new FileStream(\"C:\\\\file.txt\",\n        FileMode.CreateNew);\n    try\n    {\n        byte[] data = GetFileData();\n        file.Write(data, 0, data.Length);\n    }\n    finally\n    {\n        file.Dispose();\n    }\n}\nprivate static void CorrectFileStreamManagementSecondOption()\n{\n    using (FileStream file = new FileStream(\"C:\\\\file.txt\", \n        FileMode.CreateNew))\n    {\n        byte[] data = GetFileData();\n        file.Write(data, 0, data.Length);\n    }\n}\nprivate static void CorrectFileStreamManagementThirdOption()\n{\n    using FileStream file = new FileStream(\"C:\\\\file.txt\", \n        FileMode.CreateNew);\n    byte[] data = GetFileData();\n    file.Write(data, 0, data.Length);\n} \n```", "```cs\nindicating it in your code and right-clicking on the Quick Actions and Refactoring option, as you can see in the preceding screenshot. \n```"]