["```java\nid,name,email\n10,Bill Gates,william.gates@microsoft.com\n30,Jeff Bezos,jeff.bezos@amazon.com\n20,Marc Benioff,marc.benioff@salesforce.com\n```", "```java\n    public class ReadCSVFile {\n      public static void main(String [] args) throws IOException {\n    ```", "```java\n    String fileName = args[0];  \n    ```", "```java\n    FileReader fileReader = new FileReader(fileName);\n    try (BufferedReader reader = new BufferedReader(fileReader)) {\n    ```", "```java\n    String line;\n    int lineCounter = -1;\n    while ( (line = reader.readLine()) != null ) {\n    ```", "```java\n    lineCounter++;\n    // Ignore the header\n    if (lineCounter == 0) {\n      continue;\n    }\n    ```", "```java\n    String [] split = line.split(\",\");\n    System.out.printf(\"%d - %s\\n\", lineCounter, split[1]);\n    ```", "```java\n1 - Bill Gates\n2 - Jeff Bezos\n3 - Marc Benioff\n4 - Bill Gates\n5 - Jeff Bezos\n6 - Sundar Pichai\n7 - Jeff Bezos\n8 - Larry Ellison\n9 - Marc Benioff\n10 - Larry Ellison\n11 - Jeff Bezos\n12 - Bill Gates\n13 - Sundar Pichai\n14 - Jeff Bezos\n15 - Sundar Pichai\n16 - Marc Benioff\n17 - Larry Ellison\n18 - Marc Benioff\n19 - Jeff Bezos\n20 - Marc Benioff\n21 - Bill Gates\n22 - Sundar Pichai\n23 - Larry Ellison\n24 - Bill Gates\n25 - Larry Ellison\n26 - Jeff Bezos\n27 - Sundar Pichai\n```", "```java\n    public class CSVReader implements Closeable {\n    ```", "```java\n    private final BufferedReader reader;\n    private int lineCount = 0;\n    ```", "```java\n    public CSVReader(BufferedReader reader) throws IOException {\n      this.reader = reader;\n      // Ignores the header\n      reader.readLine();\n    }\n    ```", "```java\n    public void close() throws IOException {\n      this.reader.close();\n    }\n    ```", "```java\n    public String[] readRow() throws IOException {\n      String line = reader.readLine();\n      if (line == null) {\n        return null;\n      }\n      lineCount++;\n      return line.split(\",\");\n    }\n    ```", "```java\n    public int getLineCount() {\n      return lineCount;\n    }\n    ```", "```java\n    public class UseCSVReaderSample {\n      public static void main (String [] args) throws IOException {\n    ```", "```java\n    String fileName = args[0];\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader reader = new BufferedReader(fileReader);\n    try (CSVReader csvReader = new CSVReader(reader)) {\n      String[] row;\n      while ( (row = csvReader.readRow()) != null ) {\n        System.out.printf(\"%d - %s\\n\", csvReader.getLineCount(), row[1]);\n      }\n    }\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    ```", "```java\n    1 - Bill Gates\n    2 - Jeff Bezos\n    3 - Marc Benioff\n    4 - Bill Gates\n    5 - Jeff Bezos\n    6 - Sundar Pichai\n    7 - Jeff Bezos\n    8 - Larry Ellison\n    9 - Marc Benioff\n    10 - Larry Ellison\n    11 - Jeff Bezos\n    12 - Bill Gates\n    13 - Sundar Pichai\n    14 - Jeff Bezos\n    15 - Sundar Pichai\n    16 - Marc Benioff\n    17 - Larry Ellison\n    18 - Marc Benioff\n    19 - Jeff Bezos\n    20 - Marc Benioff\n    21 - Bill Gates\n    22 - Sundar Pichai\n    23 - Larry Ellison\n    24 - Bill Gates\n    25 - Larry Ellison\n    26 - Jeff Bezos\n    27 - Sundar Pichai\n    ```", "```java\n// Increase array size by one\n// Create new array\nUser[] newUsers = new User[users.length + 1];\n// Copy data over\nSystem.arraycopy(users, 0, newUsers, 0, users.length);\n// Switch\nusers = newUsers;\n```", "```java\n    public class User {\n      public int id;\n      public String name;\n      public String email;\n      public User(int id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n      }\n    }\n    ```", "```java\n    public static User fromValues(String [] values) {\n      int id = Integer.parseInt(values[0]);\n      String name = values[1];\n      String email = values[2];\n      return new User(id, name, email);\n    }\n    ```", "```java\n    public class IncreaseOnEachRead {\n      public static final void main (String [] args) throws Exception {\n        User[] users = loadUsers(args[0]);\n        System.out.println(users.length);\n      }\n    }\n    ```", "```java\n    public static User[] loadUsers(String fileToReadFrom) throws Exception {\n    ```", "```java\n    User[] users = new User[0];\n    return users;\n    ```", "```java\n    BufferedReader lineReader = new BufferedReader(new FileReader(fileToReadFrom));\n    try (CSVReader reader = new CSVReader(lineReader)) {\n      String [] row = null;\n      while ( (row = reader.readRow()) != null) {\n        // Increase array size by one\n        // Create new array\n        User[] newUsers = new User[users.length + 1];\n        // Copy data over\n        System.arraycopy(users, 0, newUsers, 0, users.length);\n        // Swap\n        users = newUsers;\n        users[users.length - 1] = User.userFromRow(row);\n      }\n    }\n    ```", "```java\n    27\n    ```", "```java\n    public class UsersLoader {\n    }\n    ```", "```java\n    private static Vector loadUsersInVector(String pathToFile)\n        throws IOException {\n      Vector users = new Vector();\n      return users;\n    }\n    ```", "```java\n    BufferedReader lineReader = new BufferedReader(new FileReader(pathToFile));\n    try (CSVReader reader = new CSVReader(lineReader)) {\n      String [] row = null;\n      while ( (row = reader.readRow()) != null) {\n        users.add(User.fromValues(row));\n      }\n    }\n    ```", "```java\n    import java.io.BufferedReader;\n    import java.io.FileReader;\n    import java.io.IOException;\n    import java.util.Vector;\n    ```", "```java\n    public class ReadUsersIntoVector {\n      public static void main (String [] args) throws IOException {\n      }\n    }\n    ```", "```java\n    Vector users = UserLoader.loadUsersInVector(args[0]);\n    System.out.println(users.size());\n    ```", "```java\n    import java.io.IOException;\n    import java.util.Vector;\n    ```", "```java\n    27\n    ```", "```java\nfor (int i = 0; i < values.length; i++) {\n  System.out.printf(\"%d - %s\\n\", i, values[i]);\n}\n```", "```java\nfor (String value : values) {\n  System.out.println(value);\n}\n```", "```java\nfor (int i = 0; i < values.size(); i++) {\n  String value = (String) values.get(i);\n  System.out.printf(\"%d - %s\\n\", i, value);\n}\n```", "```java\nfor (Object value : values) {\n  System.out.println(value);\n}\n```", "```java\ntry (IterableCSVReader csvReader = new IterableCSVReader(reader)) {\n  for (Object rowAsObject : csvReader) {\n    User user = User.fromValues((String[]) rowAsObject);\n    System.out.println(user.name);\n  }\n}\n```", "```java\nfor (Iterator it = values.iterator(); it.hasNext();) {\n  String value = (String) it.next();\n  if (value.equals(\"Value B\")) {\n    it.remove();\n  }\n}\n```", "```java\n    public static Hashtable loadUsersInHashtableByEmail(String pathToFile) \n        throws IOException {\n      Hashtable users = new Hashtable();\n      return users;\n    }\n    ```", "```java\n    BufferedReader lineReader = new BufferedReader(new FileReader(pathToFile));\n    try (CSVReader reader = new CSVReader(lineReader)) {\n      String [] row = null;\n      while ( (row = reader.readRow()) != null) {\n        User user = User.fromValues(row);\n        users.put(user.email, user);\n      }\n    }\n    ```", "```java\n    import java.util.Hashtable;\n    ```", "```java\n    public class FindUserHashtable {\n      public static void main(String [] args) throws IOException {\n      }\n    }\n    ```", "```java\n    Hashtable users = UsersLoader.loadUsersInHashtableByEmail(args[0]);\n    System.out.printf(\"Loaded %d unique users.\\n\", users.size());\n    ```", "```java\n    System.out.print(\"Type a user email: \");\n    ```", "```java\n    try (Scanner userInput = new Scanner(System.in)) {\n      String email = userInput.nextLine();\n    ```", "```java\n    if (!users.containsKey(email)) {\n      // User email not in file\n      System.out.printf(\"Sorry, user with email %s not found.\\n\", email);\n      return;\n    }\n    ```", "```java\n    User user = (User) users.get(email);\n    System.out.printf(\"User with email '%s' found!\", email);\n    System.out.printf(\" ID: %d, Name: %s\", user.id, user.name);\n    ```", "```java\n    import java.io.IOException;\n    import java.util.Hashtable;\n    import java.util.Scanner;\n    ```", "```java\n    Loaded 5 unique users.\n    Type a user email: william.gates@microsoft.com\n    User with email 'william.gates@microsoft.com' found! ID: 10, Name: Bill Gates\n    ```", "```java\n    Loaded 5 unique users.\n    Type a user email: randomstring\n    Sorry, user with email randomstring not found.\n    ```", "```java\n// This compiles and work\nUser[] usersArray = new User[1];\nusersArray[0] = user;\n// This wouldn't compile\n// usersArray[0] = \"Not a user\";\n/* If you uncomment the last line and try to compile, you would get the following error: */\nFile.java:15: error: incompatible types: String cannot be converted to User\n        usersArray[0] = \"Not a user\";\n                        ^\n```", "```java\nVector usersVector = new Vector();\nusersVector.add(user); // This compiles\nusersVector.add(\"Not a user\"); // This also compiles\n```", "```java\nHashtable usersTable = new Hashtable();\nusersTable.put(user.id, user); // This compiles\nusersTable.put(\"Not a number\", \"Not a user\"); // This also compiles\n```", "```java\nUser userFromArray = usersArray[0];\n```", "```java\nUser userFromVector = (User) usersVector.get(1);\n```", "```java\nException in thread \"main\" java.lang.ClassCastException: java.lang.String cannot be cast to User\n```", "```java\nVector<User> usersVector = new Vector<>();\n```", "```java\nHashtable<Integer, User> usersTable = new Hashtable<>();\n```", "```java\nusersVector.add(\"Not a user\");\n```", "```java\nFile.java:23: error: no suitable method found for add(String)\n        usersVector.add(\"Not a user\");\n                   ^\n```", "```java\n// No casting needed anymore\nUser userFromVector = usersVector.get(0);\n```", "```java\n    public static Hashtable<String, User> loadUsersInHashtableByEmail(String pathToFile)   \n        throws IOException {\n      Hashtable<String, User> users = new Hashtable<>();\n      // Unchanged lines\n    }\n    ```", "```java\n    public static Vector<User> loadUsersInVector(String pathToFile) throws IOException{\n      Vector<User> users = new Vector<>();\n      // Unchanged lines\n    }\n    ```", "```java\n    public class FindByStringWithGenerics {\n      public static void main (String [] args) throws IOException {\n      }\n    }\n    ```", "```java\n    Vector<User> users = UsersLoader.loadUsersInVector(args[0]);\n    System.out.printf(\"Loaded %d users.\\n\", users.size());\n    ```", "```java\n    System.out.print(\"Type a string to search for: \");\n    // Read user input from command line\n    try (Scanner userInput = new Scanner(System.in)) {\n      String toFind = userInput.nextLine().toLowerCase();\n    }\n    ```", "```java\n    int totalFound = 0;\n    for (User user : users) {\n      if (user.email.toLowerCase().contains(toFind)\n            ||user.name.toLowerCase().contains(toFind)) {\n        System.out.printf(\"Found user: %s\",user.name);\n        System.out.printf(\" Email: %s\\n\", user.email);\n        totalFound++;\n      }\n    }\n    ```", "```java\n    if (totalFound == 0) {\n      System.out.printf(\"No user found with string '%s'\\n\", toFind);\n    } else {\n      System.out.printf(\"Found %d users with '%s'\\n\", totalFound, toFind);\n    }\n    ```", "```java\n    Loaded 27 users.\n    Type a string to search for: will\n    Found user: Bill Gates Email: william.gates@microsoft.com\n    Found user: Bill Gates Email: william.gates@microsoft.com\n    Found user: Bill Gates Email: william.gates@microsoft.com\n    Found user: Bill Gates Email: william.gates@microsoft.com\n    Found user: Bill Gates Email: william.gates@microsoft.com\n    Found 5 users with 'will'\n    ```", "```java\n    Loaded 27 users.\n    Type a string to search for: randomstring\n    No user found with string 'randomstring'\n    ```", "```java\n\"A\".compareTo(\"B\") < 0 // -> true\n\"B\".compareTo(\"A\") > 0 // -> true\n```", "```java\n\"a\".compareTo(\"B\") < 0 // -> false\n```", "```java\n    import java.util.Comparator;\n    public class AlphabeticComparator implements Comparator<String> {\n      public int compare(String first, String second) {\n      }\n    }\n    ```", "```java\n    return first.toLowerCase().compareTo(second.toLowerCase());\n    ```", "```java\n    public class UseAlphabeticComparator {\n      public static void main (String [] args) {\n      }\n    }\n    ```", "```java\n    AlphabeticComparator comparator = new AlphabeticComparator();\n    System.out.println(comparator.compare(\"A\", \"B\") < 0); // -> true\n    System.out.println(comparator.compare(\"B\", \"A\") > 0); // -> true\n    System.out.println(comparator.compare(\"a\", \"B\") < 0); // -> true\n    System.out.println(comparator.compare(\"b\", \"A\") > 0); // -> true\n    System.out.println(comparator.compare(\"a\", \"b\") < 0); // -> true\n    System.out.println(comparator.compare(\"b\", \"a\") > 0); // -> true\n    ```", "```java\n    true\n    true\n    true\n    true\n    true\n    true\n    ```", "```java\n    public static void loadUsersIntoSet(String pathToFile, Set<User> usersSet)\n        throws IOException {\n      FileReader fileReader = new FileReader(pathToFile);\n      BufferedReader lineReader = new BufferedReader(fileReader);\n      try(CSVReader reader = new CSVReader(lineReader)) {\n        String [] row = null;\n        while ( (row = reader.readRow()) != null) {\n          usersSet.add(User.fromValues(row));\n        }\n      }\n    }\n    ```", "```java\n    java.util.Set;\n    ```", "```java\n    public class SortUsersTreeSet {\n      public static void main (String [] args) throws IOException {\n      }\n    }\n    ```", "```java\n    Scanner reader = new Scanner(System.in);\n    System.out.print(\"Type a field to sort by: \");\n    String input = reader.nextLine();\n    Comparator<User> comparator;\n    switch(input) {\n      case \"id\":\n        comparator = new ByIdComparator();\n        break;\n      case \"name\":\n        comparator = new ByNameComparator();\n        break;\n      case \"email\":\n        comparator = new ByEmailComparator();\n        break;\n      default:\n        System.out.printf(\"Sorry, invalid option: %s\\n\", input);\n        return;\n    }\n    System.out.printf(\"Sorting by %s\\n\", input);\n    ```", "```java\n    TreeSet<User> users = new TreeSet<>(comparator);\n    UsersLoader.loadUsersIntoSet(args[0], users);\n    for (User user : users) {\n      System.out.printf(\"%d - %s, %s\\n\", user.id, user.name, user.email);\n    }\n    ```", "```java\n    Type a field to sort by: address\n    Sorry, invalid option: address\n    ```", "```java\n    Type a field to sort by: email\n    Sorting by email\n    30 - Jeff Bezos, jeff.bezos@amazon.com\n    50 - Larry Ellison, lawrence.ellison@oracle.com\n    20 - Marc Benioff, marc.benioff@salesforce.com\n    40 - Sundar Pichai, sundar.pichai@google.com\n    10 - Bill Gates, william.gates@microsoft.com\n    ```", "```java\n    Type a field to sort by: id\n    Sorting by id\n    10 - Bill Gates, william.gates@microsoft.com\n    20 - Marc Benioff, marc.benioff@salesforce.com\n    30 - Jeff Bezos, jeff.bezos@amazon.com\n    40 - Sundar Pichai, sundar.pichai@google.com\n    50 - Larry Ellison, lawrence.ellison@oracle.com\n    ```", "```java\n    Type a field to sort by: name\n    Sorting by name\n    10 - Bill Gates, william.gates@microsoft.com\n    30 - Jeff Bezos, jeff.bezos@amazon.com\n    50 - Larry Ellison, lawrence.ellison@oracle.com\n    20 - Marc Benioff, marc.benioff@salesforce.com\n    40 - Sundar Pichai, sundar.pichai@google.com\n    ```", "```java\n    System.out.printf(\"Sending email to %s...\\n\", args[0]);\n    Thread.sleep(new Random().nextInt(1000));\n    System.out.printf(\"Email sent to %s!\\n\", args[0]);\n    ```", "```java\n    public class SendAllEmails {\n    ```", "```java\n    private static Process runningProcess = null;\n    ```", "```java\n    private static void sendEmailWhenReady(ArrayDeque<String> queue)\n        throws Exception {\n      // If running, return\n      if (runningProcess != null && runningProcess.isAlive()) {\n        System.out.print(\".\");\n        return;\n      }\n      System.out.print(\"\\nSending email\");\n      String email = queue.poll();\n      String classpath = System.getProperty(\"java.class.path\");\n      String[] command = new String[]{\n        \"java\", \"-cp\", classpath, \"EmailSender\", email\n      };\n      runningProcess = Runtime.getRuntime().exec(command);\n    }\n    ```", "```java\n    ArrayDeque<String> queue = new ArrayDeque<>();\n    ```", "```java\n    FileReader fileReader = new FileReader(args[0]);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n    try (CSVReader reader = new CSVReader(bufferedReader)) {\n      String[] row;\n      while ( (row = reader.readRow()) != null) {\n        User user = User.fromValues(row);\n      }\n    }\n    ```", "```java\n    queue.offer(user.email);\n    sendEmailWhenReady(queue);\n    ```", "```java\n    Thread.sleep(100);\n    ```", "```java\n    while (!queue.isEmpty()) {\n      sendEmailWhenReady(queue);\n\n      // Wait before checking again\n      Thread.sleep(100);\n    }\n    ```", "```java\n    while (runningProcess.isAlive()) {\n      System.out.print(\".\");\n      Thread.sleep(100);\n    }\n    System.out.println(\"\\nDone sending emails!\");\n    ```"]