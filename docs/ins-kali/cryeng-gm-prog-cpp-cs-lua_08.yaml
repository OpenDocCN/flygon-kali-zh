- en: Chapter 8. Multiplayer and Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。多人游戏和网络
- en: Using the CryENGINE networking system, we can move on from single player games
    and create living worlds with large numbers of human players.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CryENGINE网络系统，我们可以从单人游戏转移到创建具有大量人类玩家的生动世界。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn the basics of the network system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习网络系统的基础知识
- en: Utilize Remote Method Invocations (RMIs)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用远程方法调用（RMIs）
- en: Serialize flowing data over the network using aspects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方面在网络上序列化流动数据
- en: The networking system
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络系统
- en: The CryENGINE networking implementation is a flexible setup used to communicate
    with game servers and other clients.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE的网络实现是一种灵活的设置，用于与游戏服务器和其他客户端通信。
- en: All network messages are sent from an **independent networking thread** in order
    to avoid network updates being crippled by the game frame rate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络消息都是从**独立的网络线程**发送的，以避免网络更新受游戏帧速率的影响。
- en: Network identifiers
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络标识符
- en: Locally, each entity is represented by an entity identifier (`entityId`). However,
    for network contexts, it is not viable to transmit these over the network as they
    are not guaranteed to point to the same entity on the remote client or server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地，每个实体都由实体标识符（`entityId`）表示。然而，在网络环境中，将它们传输到网络上是不可行的，因为不能保证它们指向远程客户端或服务器上的相同实体。
- en: To resolve this, each game object is assigned a net object identifier represented
    by the `SNetObjectID` struct, which contains a simple wrapper for the identifier
    and its salt.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，每个游戏对象都被分配了一个由`SNetObjectID`结构表示的网络对象标识符，其中包含标识符及其盐的简单包装器。
- en: When writing game code that serializes entities and entity IDs across the network,
    we don't have to deal with `SNetObjectID` structs directly as the process of converting
    `entityId` to `SNetObjectID` (and back to `entityId` on the remote machine) is
    automatic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写游戏代码时，将实体和实体ID序列化到网络上时，我们不必直接处理`SNetObjectID`结构，因为将`entityId`转换为`SNetObjectID`（并在远程机器上再转换为`entityId`）的过程是自动的。
- en: To make sure that your entity ID maps to the same entity on the remote machine,
    use the `eid` compression policy when serializing. Read more about policies and
    how to use them in the *Compression policies* section, later in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保您的实体ID映射到远程机器上的相同实体，请在序列化时使用`eid`压缩策略。在本章后面的*压缩策略*部分中，了解有关策略以及如何使用它们的更多信息。
- en: Net channels
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络通道
- en: CryENGINE provides the `INetChannel` interface to represent an ongoing connection
    between two machines. For example, if client A and client B need to communicate
    with each other, a net channel is created on both machines to manage sent and
    received messages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CryENGINE提供了`INetChannel`接口来表示两台机器之间的持续连接。例如，如果客户端A和客户端B需要相互通信，则在两台机器上都会创建一个网络通道来管理发送和接收的消息。
- en: Each channel is referred to by using a channel identifier, which often proves
    useful to determine which client belongs to what machine. For example, to retrieve
    the player actor connected on a specific channel, we use `IActorSystem::GetActorByChannelId`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用通道标识符来引用每个通道，通常可以确定哪个客户端属于哪台机器。例如，要检索连接到特定通道上的玩家角色，我们使用`IActorSystem::GetActorByChannelId`。
- en: Net nubs
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网络nubs
- en: All net channels are handled by the `INetNub` interface, which consists of one
    or more ports for packet-based communication.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有网络通道都由`INetNub`接口处理，该接口由一个或多个用于基于数据包的通信的端口组成。
- en: Setting up a multiplayer game
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置多人游戏
- en: To set up a multiplayer game, we'll need two computers running the same build
    of your game.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置多人游戏，我们需要两台运行相同版本游戏的计算机。
- en: Starting the server
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动服务器
- en: 'There are two methods to create a server that remote clients can connect to.
    These are explained as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以创建远程客户端可以连接的服务器。如下所述：
- en: Dedicated server
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 专用服务器
- en: The dedicated server exists for the purpose of having a client that does not
    render or play back audio, to allow full focus on supporting a server without
    a local client.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 专用服务器存在的目的是有一个不渲染或播放音频的客户端，以便完全专注于支持没有本地客户端的服务器。
- en: 'To start a dedicated server, perform the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动专用服务器，请执行以下步骤：
- en: Start `Bin32/DedicatedServer.exe`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Bin32/DedicatedServer.exe`。
- en: Type in `map` followed by the name of the level you want to load, and then press
    *Enter*.![Dedicated server](img/5909_08_01.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`map`，然后输入要加载的级别名称，然后按*Enter*。![专用服务器](img/5909_08_01.jpg)
- en: Launcher
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动器
- en: It is also possible to start a server via the Launcher, effectively allowing
    you to play with friends without having to launch a separate server application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过启动器启动服务器，从而允许您与朋友一起玩而无需启动单独的服务器应用程序。
- en: 'To start a server via the Launcher, follow these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过启动器启动服务器，请按照以下步骤操作：
- en: Start your Launcher application.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的启动器应用程序。
- en: Open the console.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台。
- en: Type in `map <level name> s`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`map <level name> s`。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Appending `s` to the `map` command will tell the CryENGINE to load the level
    in a multiplayer context as the server. Leaving out `s` will still load the level,
    but in a single player state.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`map`命令后添加`s`将告诉CryENGINE以服务器的多人游戏上下文加载级别。省略`s`仍将加载级别，但在单人状态下加载。
- en: '![Launcher](img/5909_08_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![启动器](img/5909_08_02.jpg)'
- en: Connecting to a server via the console
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过控制台连接到服务器
- en: 'To connect to a server using the console, use the `connect` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用控制台连接到服务器，请使用`connect`命令：
- en: '`connect <ip> <port>`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect <ip> <port>`'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default connection port is 64089.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认连接端口是64089。
- en: It is also possible to set the IP address via the `cl_serveraddr` console variable,
    the port via `cl_serverport`, and then simply calling `connect`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过`cl_serveraddr`控制台变量设置IP地址，通过`cl_serverport`设置端口，然后简单地调用`connect`。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that you can have multiple Launchers running simultaneously, which
    can be very useful when debugging multiplayer games.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以同时运行多个启动器，这在调试多人游戏时非常有用。
- en: Debugging networked games
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试网络游戏
- en: A very useful console variable to use when debugging networked games is `netlog
    1`, which will result in the network system logging a lot more information about
    network issues and events in the console.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试网络游戏时非常有用的一个控制台变量是`netlog 1`，这将导致网络系统在控制台中记录更多关于网络问题和事件的信息。
- en: Networking using game object extensions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用游戏对象扩展进行网络连接
- en: 'Game objects have two methods of communicating over the network: RMIs and network
    serialization via `Aspects`. Essentially, RMIs allow for event-based data transmission
    over the network, whereas an aspect continuously synchronizes data as it is invalidated.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏对象有两种通过网络进行通信的方法：RMIs和通过`Aspects`进行网络序列化。基本上，RMIs允许基于事件的数据传输，而Aspect则在数据失效时连续同步数据。
- en: Prior to being able to communicate over the network, each game object has to
    be bound to the network by using the `IGameObject::BindToNetwork` function. This
    can be called from your `Init` implementation by `IGameObjectExtension`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够通过网络通信之前，每个游戏对象都必须使用`IGameObject::BindToNetwork`函数绑定到网络。这可以通过`IGameObjectExtension`的`Init`实现来调用。
- en: Remote Method Invocation (RMI)
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程方法调用（RMI）
- en: '**Remote Method Invocation** (**RMI**) is used to invoke functions on a remote
    client or server. This is very useful for synchronizing a state over the network,
    for example, to let all clients know that the player named "Dude" just spawned,
    and should be moved to a specific location and orientation.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**远程方法调用**（**RMI**）用于在远程客户端或服务器上调用函数。这对于在网络上同步状态非常有用，例如，让所有客户端知道名为“Dude”的玩家刚刚生成，并且应该移动到特定位置和方向。'
- en: RMI structure
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RMI结构
- en: 'To declare an RMI, we can make use of the macros listed as shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明RMI，我们可以使用列出的宏：
- en: '`DECLARE_SERVER_RMI_NOATTACH`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_SERVER_RMI_NOATTACH`'
- en: '`DECLARE_CLIENT_RMI_NOATTACH`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_CLIENT_RMI_NOATTACH`'
- en: '`DECLARE_SERVER_RMI_PREATTACH`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_SERVER_RMI_PREATTACH`'
- en: '`DECLARE_CLIENT_RMI_PREATTACH`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_CLIENT_RMI_PREATTACH`'
- en: '`DECLARE_SERVER_RMI_POSTATTACH`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_SERVER_RMI_POSTATTACH`'
- en: '`DECLARE_CLIENT_RMI_POSTATTACH`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DECLARE_CLIENT_RMI_POSTATTACH`'
- en: 'An example being:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The last parameter specifies packet reliability, but is largely deprecated in
    the latest version of CryENGINE.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数指定数据包的可靠性，但在最新版本的CryENGINE中已大部分被弃用。
- en: Keep in mind which type of RMI you are exposing when it is created. For example,
    `DECLARE_CLIENT` is only used for functions that will be called on remote clients,
    whereas `DECLARE_SERVER` defines functions that will be called on the server,
    after being requested on a client.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建时要记住你正在暴露哪种类型的RMI。例如，`DECLARE_CLIENT`仅用于将在远程客户端上调用的函数，而`DECLARE_SERVER`定义了将在服务器上调用的函数，在客户端请求后。
- en: Parameters
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: 'The RMI declaration macros require three parameters to be supplied:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: RMI声明宏需要提供三个参数：
- en: '**Function name**: This is the first parameter that determines the name of
    the method, and is what will be used for the function declaration and when invoking
    the RMI itself.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数名称**：这是确定方法名称的第一个参数，也是在声明函数和调用RMI本身时将使用的名称。'
- en: '**RMI parameters**: The RMI has to specify a struct containing all members
    that will be serialized along with the method. The struct must contain a function
    named `SerializeWith` which accepts one `TSerialize` parameter.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RMI参数**：RMI必须指定一个包含将与方法一起序列化的所有成员的结构。该结构必须包含一个名为`SerializeWith`的函数，该函数接受一个`TSerialize`参数。'
- en: '**Packet delivery reliability enum**: This is the last parameter that defines
    reliability of the packet delivery.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据包传递可靠性枚举**：这是定义数据包传递可靠性的最后一个参数。'
- en: 'There are three types of differences between the macros that we just saw:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到的宏之间有三种不同之处：
- en: Attach type
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 附加类型
- en: 'The attachment type defines when the RMI is attached during the network serialization:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 附加类型定义了RMI在网络序列化期间何时附加：
- en: '`NOATTACH`: This is used when the RMI doesn''t rely on game object data, and
    can therefore be attached either prior to or after game object data serialization.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NOATTACH`：当RMI不依赖游戏对象数据时使用，因此可以在游戏对象数据序列化之前或之后附加。'
- en: '`PREATTACH`: In this type, the RMI will be attached before the game object
    data is serialized. It is used when the RMI needs to prepare for incoming data.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PREATTACH`：在此类型中，RMI将在游戏对象数据序列化之前附加。当RMI需要准备接收的数据时使用。'
- en: '`POSTATTACH`: In this type, the RMI is attached after the game object''s data
    is serialized. It is used when the newly-received data is relevant to the RMI.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POSTATTACH`：在此类型中，RMI在游戏对象数据序列化后附加。当新接收的数据与RMI相关时使用。'
- en: Server/client separation
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务器/客户端分离
- en: As you may have noticed from looking at the RMI declaration macros, an RMI cannot
    target both clients and servers at the same time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从RMI声明宏中可以看出，RMI不能同时针对客户端和服务器。
- en: Because of this, we'll either have to decide which target should be able to
    run our function, or create one macro for each target.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们要么决定哪个目标应该能够运行我们的函数，要么为每个目标创建一个宏。
- en: This is a very useful feature when dealing with server-authoritative game contexts,
    due to the continuous distinction between functions that can be remotely triggered
    on the server and clients.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的功能，当处理服务器授权的游戏环境时，由于可以持续区分可以在服务器和客户端上远程触发的函数。
- en: Function definition
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 函数定义
- en: 'To define the RMI function, we can use the `IMPLEMENT_RMI` macro:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义RMI函数，我们可以使用`IMPLEMENT_RMI`宏：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The macro defines a function called when the RMI is invoked, with two parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该宏定义了在调用RMI时调用的函数，具有两个参数：
- en: '`params`: This contains the deserialized data sent from the remote machine.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params`：这包含从远程机器发送的反序列化数据。'
- en: '`pNetChannel`: This is an `INetChannel` instance which describes the connection
    established between the source and target machines.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pNetChannel`：这是一个`INetChannel`实例，描述了源和目标机器之间建立的连接。'
- en: RMI example
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RMI示例
- en: To demonstrate how to create a basic RMI, we're going to create an RMI to allow
    clients to request that an entity is repositioned. This will result in the server
    sending a `ClMoveEntity` RMI to all clients, notifying them of the new entity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何创建基本的RMI，我们将创建一个RMI，允许客户端请求重新定位实体。这将导致服务器向所有客户端发送`ClMoveEntity` RMI，通知它们新实体的情况。
- en: First, we'll need to open our header file. This is where we'll define the RMI
    and our parameters. Start by creating a new struct called `SMoveEntityParams`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要打开我们的头文件。这是我们将定义RMI和我们的参数的地方。首先创建一个名为`SMoveEntityParams`的新结构。
- en: 'We''ll then add three parameters:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加三个参数：
- en: '**EntityID entityId**: This is the identifier of the entity that we want to
    move'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EntityID entityId**：这是我们想要移动的实体的标识符'
- en: '**Vec3 position**: This determines which position the entity should be moved
    to'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vec3位置**：这确定了实体应该移动到哪个位置'
- en: '**Quat orientation**: This is used to set the rotation of the entity on spawn'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Quat方向**：这用于在生成时设置实体的旋转'
- en: After adding the parameters, we need to define the `SerializeWith` function
    inside our `SMoveEntityParams` struct. This will be called when sending data to
    the network, and again to receive the data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加参数后，我们需要在`SMoveEntityParams`结构内定义`SerializeWith`函数。这将在发送数据到网络时调用，然后再次接收数据时调用。
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The usage of the `eid` compression policy, is to be taken care of which makes
    sure that `entityId` points to the same entity. Refer to the *Network identifiers*
    section in this chapter for more information on why the policy is required.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`eid`压缩策略的使用需要特别注意，它确保`entityId`指向相同的实体。有关为什么需要该策略的更多信息，请参阅本章的*网络标识符*部分。'
- en: 'Now that we have defined our RMI parameters, we''ll need to declare two RMIs:
    one for the client and one for the server:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的RMI参数，我们需要声明两个RMI：一个用于客户端，一个用于服务器：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All that''s left now is for us to create the function implementations, which
    we can do in our CPP file by using the `IMPLEMENT_RMI` macro:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所要做的就是创建函数实现，我们可以在我们的CPP文件中使用`IMPLEMENT_RMI`宏来实现。
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code defines our `SvRequestMoveEntity` function, which will be called
    when a client does the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了我们的`SvRequestMoveEntity`函数，当客户端执行以下操作时将调用该函数：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Try to implement the `ClMoveEntity` function on your own. It should set the
    world transformation (`IEntity::SetWorldTM`) of the entity in the same manner
    as we did in `SvRequestMoveEntity`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试自己实现`ClMoveEntity`函数。它应该以与我们在`SvRequestMoveEntity`中所做的相同方式设置实体的世界变换(`IEntity::SetWorldTM`)。
- en: Network aspect serialization
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络方面序列化
- en: Game object extensions can implement the `IGameObjectExtension::NetSerialize`
    function, which is called to serialize data relevant to the extension across the
    network.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏对象扩展可以实现`IGameObjectExtension::NetSerialize`函数，该函数用于在网络上序列化与扩展相关的数据。
- en: Aspects
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方面
- en: To allow separation of data relevant to specific mechanics, the net serialization
    process exposes **Aspects**. When an aspect is declared as "dirty" (changed) on
    the server or a client, the network will trigger this for serialization and call
    the `NetSerialize` function with the specific aspect.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许特定机制相关数据的分离，网络序列化过程公开了**方面**。当服务器或客户端将方面声明为“脏”（更改）时，网络将触发序列化并调用具体方面的`NetSerialize`函数。
- en: 'To mark your aspect as dirty, call `IGameObject::ChangedNetworkState`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的方面标记为脏，请调用`IGameObject::ChangedNetworkState`：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will trigger `NetSerialize` to serialize your aspect, and send its data
    to the remote machine(s) which will then be deserialized in the same function.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发`NetSerialize`来序列化您的方面，并将其数据发送到远程机器，然后在同一函数中对其进行反序列化。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An aspect is considered "dirty" when its value has changed from what was last
    sent to remote client or server.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当方面的值与上次发送到远程客户端或服务器的值不同时，该方面被认为是“脏”。
- en: 'For example, if we want to serialize a set of flags relevant to player input,
    we''ll create a new aspect and mark it as dirty whenever the input flags changes
    on the client:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想序列化与玩家输入相关的一组标志，我们将创建一个新的方面，并在客户端的输入标志发生变化时将其标记为脏：
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`TSerialize::EnumValue` is a specialized form of `TSerialize::Value` which
    calculates the minimum and maximum value of the enum, effectively functioning
    as a dynamic compression policy.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSerialize::EnumValue`是`TSerialize::Value`的一种特殊形式，它计算枚举的最小值和最大值，有效地充当动态压缩策略。'
- en: '`EnumValue` and compression policies should be used wherever possible, in order
    to reduce bandwidth usage.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`EnumValue`和压缩策略应尽可能使用，以减少带宽使用。'
- en: Now, when the `eEA_GameClientF` aspect is marked as dirty on the client, the
    `NetSerialize` function will be called and will write the `m_inputFlags` variable
    value to the network.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当客户端上的`eEA_GameClientF`方面被标记为脏时，将调用`NetSerialize`函数，并将`m_inputFlags`变量值写入网络。
- en: When the data arrives on the remote client or server, the `NetSerialize` function
    will once again be called, but this time writes the value to the `m_inputFlags`
    variable so that the server is aware of the new input flags provided by the client.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据到达远程客户端或服务器时，`NetSerialize`函数将再次被调用，但这次将值写入`m_inputFlags`变量，以便服务器知道客户端提供的新输入标志。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Aspects cannot support conditional serialization, and therefore each aspect
    has to serialize the same variables on each run. For example, if you serialized
    four floats during the first aspect serialization, you will always have to serialize
    four floats.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 方面不支持条件序列化，因此每个方面在每次运行时都必须序列化相同的变量。例如，如果在第一个方面序列化了四个浮点数，那么你将始终需要序列化四个浮点数。
- en: It's still possible to serialize complex objects, for example, we could write
    the length of an array and then iterate over it to read/write each object contained
    within the array.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然可以序列化复杂对象，例如，我们可以写入数组的长度，然后迭代读取/写入数组中包含的每个对象。
- en: Compression policies
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 压缩策略
- en: '`TSerialize::Value` enables the ability to pass an additional parameter, the
    compression policy. This policy is used to determine what compression mechanics
    can be used to optimize network bandwidth when synchronizing the data.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`TSerialize::Value`使能够传递一个额外的参数，即压缩策略。此策略用于确定在同步数据时可以使用哪些压缩机制来优化网络带宽。'
- en: 'The compression policies are defined in `Scripts/Network/CompressionPolicy.xml`.
    Examples of existing policies can be seen as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 压缩策略定义在`Scripts/Network/CompressionPolicy.xml`中。现有策略的示例如下：
- en: '`eid`: This is used when serializing the `entityId` identifiers across the
    network, and compares the game object''s `SNetObjectID` to obtain the correct
    `entityId` on the remote client.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eid`：这用于在网络上序列化`entityId`标识符，并将游戏对象的`SNetObjectID`与远程客户端上的正确`entityId`进行比较。'
- en: '`wrld`: This is used when serializing a `Vec3` struct that represents world
    coordinates. This may have to be tweaked for bigger levels, due to being capped
    at 4095 by default.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wrld`：这在序列化代表世界坐标的`Vec3`结构时使用。由于默认情况下被限制在4095，这可能需要针对更大的级别进行调整。'
- en: '`colr`: This is used to serialize a `ColorF` struct across the network, allowing
    a floating point variable to represent values between 0 and 1.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colr`：这用于在网络上序列化`ColorF`结构，允许浮点变量表示0到1之间的值。'
- en: '`bool`: This is a specific implementation for Boolean, and cuts down on a lot
    of bloat data.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`：这是布尔值的特定实现，并且可以减少大量冗余数据。'
- en: '`ori1`: This is used to serialize the `Quat` structs over the network, for
    player orientation.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ori1`：这用于在网络上序列化`Quat`结构，用于玩家方向。'
- en: Creating a new compression policy
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个新的压缩策略
- en: 'Adding new compression policies is as easy as modifying `CompressionPolicy.xml`.
    For example, if we want to create a new Vec3 policy in which the X and Y axes
    can only reach up to 2048 m, while the Z axis is limited to 1024 m:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的压缩策略就像修改`CompressionPolicy.xml`一样简单。例如，如果我们想要创建一个新的Vec3策略，其中X和Y轴只能达到2048米，而Z轴限制为1024米：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Exposing Lua entities to the network
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Lua实体暴露给网络
- en: Now that we know how to handle network communication in C++, let's have a look
    at how we can expose Lua entities to the network.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何在C++中处理网络通信，让我们看看如何将Lua实体暴露给网络。
- en: Net.Expose
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Net.Expose
- en: 'In order to define RMIs and server properties, we''ll need to call `Net.Expose`
    from within the global scope of your `.lua` script:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义RMIs和服务器属性，我们需要在`.lua`脚本的全局范围内调用`Net.Expose`：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The previous function will define the `ClRevive` and `SvRequestRevive` RMIs,
    which can be called by using three subtables that are automatically created for
    your entity:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个函数将定义`ClRevive`和`SvRequestRevive` RMIs，可以通过使用为实体自动创建的三个子表来调用：
- en: '`allClients`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allClients`'
- en: '`otherClients`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`otherClients`'
- en: '`server`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`'
- en: Function implementation
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数实现
- en: The remote functions are defined within either the `Client` or `Server` subtables
    of your entity script, so that the networking system can quickly find them while
    avoiding name conflicts.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 远程函数定义在实体脚本的`Client`或`Server`子表中，以便网络系统可以快速找到它们，同时避免名称冲突。
- en: 'For example, see the following `SvRequestRevive` function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看以下`SvRequestRevive`函数：
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Invoking RMIs
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用RMIs
- en: On the server, we can trigger the `ClRevive` function on all remote clients,
    along with the parameter that we defined previously.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上，我们可以触发`ClRevive`函数，以及我们之前定义的参数，对所有远程客户端进行触发。
- en: On the server
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在服务器上
- en: 'To invoke our `SvRequestRevive` function on the server, simply use:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在服务器上调用我们的`SvRequestRevive`函数，只需使用：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: On all clients
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在所有客户端
- en: 'If you want all clients to receive a `ClRevive` call:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望所有客户端都收到`ClRevive`调用：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: On all other clients
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在所有其他客户端上
- en: 'To send the `ClRevive` call to all clients except the current one:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将`ClRevive`调用发送到除当前客户端之外的所有客户端：
- en: '[PRE13]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Binding our entity to the network
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的实体绑定到网络
- en: 'Prior to being able to send and receive RMI''s, we''ll have to bind our entity
    to the network. This is done by creating a game object for our entity:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够发送和接收RMI之前，我们必须将我们的实体绑定到网络。这是通过为我们的实体创建一个游戏对象来完成的：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our entity will now have a functional game object, but it''s not yet set up
    for networked usage. To enable this, call the `CryAction.BindGameObjectToNetwork`
    function:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实体现在将拥有一个功能性的游戏对象，但尚未设置为网络使用。要启用此功能，请调用`CryAction.BindGameObjectToNetwork`函数：
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Done! Our entity is now bound to the network, and can send and receive RMI's.
    Note that this should be immediately after the entity is spawned.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！我们的实体现在已绑定到网络，并且可以发送和接收RMI。请注意，这应该在实体生成后立即进行。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how CryENGINE instances can communicate with
    each other remotely over networks, and have also created our own RMI function.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了CryENGINE实例如何在网络上远程通信，并且还创建了我们自己的RMI函数。
- en: You should now be aware of network aspects and compression policies function,
    and have basic knowledge of how you can expose entities to the network.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该了解网络方面和压缩策略函数，并且对如何将实体暴露给网络有基本的了解。
- en: If you would like to proceed with multiplayer games and networking before moving
    on to the next chapter, why not create a basic multiplayer sample in which players
    can send a spawn request to the server that results in the player spawning on
    all remote clients?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在进入下一章之前继续进行多人游戏和网络游戏，为什么不创建一个基本的多人游戏示例，其中玩家可以向服务器发送生成请求，结果是玩家在所有远程客户端上生成？
- en: In the next chapter, we'll be covering the physics system and how it can be
    used to your advantage.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍物理系统以及如何利用它。
