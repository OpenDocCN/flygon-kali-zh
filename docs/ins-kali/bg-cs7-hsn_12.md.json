["```cs\nusing System.Collections.Generic;\nusing System.Linq;\n```", "```cs\nIEnumerable<int> scores = new int[] { 45, 98, 99, 78, 89, 87, 77, 67, 71, 81 };\n```", "```cs\nvar goodStudentAverage = (from score in scores where score >= 90 select score).Average();\n```", "```cs\nsampLabel.Text = $\"<br>The average for great students is {goodStudentAverage}\";\n```", "```cs\nvar averageStudentCount = scores.Where(grade =>70 <= grade && grade <80).Count();\n```", "```cs\nsampLabel.Text += $\"<br>There are {averageStudentCount} average students.\";\n```", "```cs\nList<int> firstStudent = new List<int> { 90, 89, 92 };\n```", "```cs\nList<int> secondStudent = new List<int> { 78, 81, 79};\n```", "```cs\nList<List<int>> classList = new List<List<int>>();\n```", "```cs\nclassList.Add(firstStudent);\nclassList.Add(secondStudent);\n```", "```cs\nvar avgPerStudent = classList.Select(student => student.Average());\n```", "```cs\nforeach(var studentAvg in avgPerStudent)\n```", "```cs\nsampLabel.Text += $\"<br>Average grade={studentAvg}\";\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        IEnumerable<int> scores = \n        new int[] { 45, 98, 99, 78, 89, 87, 77, 67, 71, 81 }; \n        //array of integers\n        //line 17 below selects all scores 90 or above, and averages them,\n        //giving back a double value\n        var goodStudentAverage = (from score in scores where score >= 90 select score).Average();\n        //line 19 below displays the average\n        sampLabel.Text = $\"<br>The average for great students is {goodStudentAverage}\";\n        //line 21 below selects all students below 70 and 80,\n        //and counts them\n        var averageStudentCount = scores.Where(grade => 70 <= grade && grade < 80).Count();\n        //line 23 below displays the student count\n        sampLabel.Text += $\"<br>There are {averageStudentCount} average students.\";\n        //lines 25 and 26 create two new lists with initializer lists\n        List<int> firstStudent = new List<int> {90,89,92};\n        List<int> secondStudent = new List<int> { 78, 81, 79 };\n        //line 28 creates a list of lists\n        List<List<int>> classList = new List<List<int>>();\n        classList.Add(firstStudent);\n        classList.Add(secondStudent);\n        //line 32 below find the average for each list, and \n        //stores the averages\n        //so avgPerStudent is of type IEnumerable\n        var avgPerStudent = classList.Select(student => student.Average());\n        //lines 35-38 display the averages\n        foreach(var studentAvg in avgPerStudent)\n        {\n            sampLabel.Text += $\"<br>Average grade={studentAvg}\";\n        }\n    }\n}\n```"]