["```\n **$**\n**docker run -it --privileged ubuntu /bin/bash** \n**root@9ab706a6a95c:/# cd /dev/**\n**root@9ab706a6a95c:/dev# ls**\n**agpgart          hdb6                psaux   sg1       tty32  tty7**\n**atibm            hdb7                ptmx    shm       tty33  tty8**\n**audio            hdb8                pts     snapshot  tty34  tty9**\n**beep             hdb9                ram0    sr0       tty35  ttyS0**\n\n```", "```\n**$ docker run -it centos /bin/bash**\n**[root@7e1b1fa4fb89 /]#  sysctl -w net.ipv4.ip_forward=0**\n**sysctl: setting key \"net.ipv4.ip_forward\": Read-only file system**\n**$ docker run --privileged -it centos /bin/bash**\n**[root@930aaa93b4e4 /]#  sysctl -a | wc -l**\n**sysctl: reading key \"net.ipv6.conf.all.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.default.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.eth0.stable_secret\"**\n**sysctl: reading key \"net.ipv6.conf.lo.stable_secret\"**\n**638**\n**[root@930aaa93b4e4 /]# sysctl -w net.ipv4.ip_forward=0**\n**net.ipv4.ip_forward = 0**\n\n```", "```\n**$ docker ps -q | xargs docker inspect --format '{{ .Id }}: \n    Privileged={{ \n    .HostConfig.Privileged }}'**\n**930aaa93b4e44c0f647b53b3e934ce162fbd9ef1fd4ec82b826f55357f6fdf3a: \n    Privileged=true**\n\n```", "```\n**$ docker run -it -v /:/media/host --privileged fedora \nnsenter --mount=/media/host/proc/1/ns/mnt --mount /dev/xvdf /home/mic** \n\n```", "```\n**$ sudo docker run --rm --privileged foobar /sbin/modprobe PATHTO/foobar-kmod \n$ sudo docker run -d foobar** \n\n```", "```\n    include 'docker'\n\n```", "```\n    class { 'docker':\n      tcp_bind        => ['tcp://127.0.0.1:4245','tcp://10.0.0.1:4244'],\n      socket_bind     => 'unix:///var/run/docker.sock',\n      ip_forward      => true,\n      iptables        => true,\n      ip_masq         => true,\n      bridge          => br0,\n      fixed_cidr      => '10.21.1.0/24',\n      default_gateway => '10.21.0.1',\n    }\n\n```", "```\n **$ docker pull -t=\"trusty\" ubuntu**\n **docker::image { 'ubuntu':**\n **image_tag => 'trusty'\n    }** \n\n```", "```\n    docker::image { 'ubuntu':\n      docker_file => '/vkohli/Dockerfile'\n      subscribe => File['/vkohli/Dockerfile'],\n    }\n\n    file { '/vkohli/Dockerfile':\n      ensure => file,\n      source => 'puppet:///modules/someModule/Dockerfile',\n    }\n\n```", "```\n    docker::run { 'sampleapplication':\n      image           => 'base',\n      command         => '/bin/sh -c \"while true; do echo hello world; sleep 1; \n                         done\"',\n      ports           => ['4445', '4555'],\n      expose          => ['4665', '4777'],\n      links           => ['mysql:db'],\n      net             => 'my-user-def',\n      volumes         => ['/var/lib/couchdb', '/var/log'],\n      volumes_from    => '6446ea52fbc9',\n      memory_limit    => '20m', # (format: '<number><unit>', where unit = b, k, m \n                         or g)\n      cpuset          => ['0', '4'],\n      username        => 'sample',\n      hostname        => 'sample.com',\n      dns             => ['8.8.8.8', '8.8.4.4'],\n      restart_service => true,\n      privileged      => false,\n      pull_on_start   => false,\n      before_stop     => 'echo \"The sample application completed\"',\n      after           => [ 'container_b', 'mysql' ],\n      depends         => [ 'container_a', 'postgres' ],\n      extra_parameters => [ '--restart=always' ],\n    }\n\n```", "```\n    docker_network { 'sample-net':\n      ensure   => present,\n      driver   => 'overlay',\n      subnet   => '192.168.1.0/24',\n      gateway  => '192.168.1.1',\n      ip_range => '192.168.1.4/32',\n    }\n\n```", "```\n    docker_compose { '/vkohli/docker-compose.yml':\n      ensure  => present,\n      scale   => {\n        'compose_test' => 4,\n      },\n      options => '--x-networking'\n    }\n\n```", "```\n    **$ puppet module install garethr-docker**\n    **The program 'puppet' is currently not installed. On Ubuntu 14.04 the \n            puppet program \n            can be installed as shown below;** \n    **$ apt-get install puppet-common**\n    **Reading package lists... Done**\n    **Building dependency tree**\n    **Reading state information... Done**\n    **...**\n    **The following extra packages will be installed:**\n    **Unpacking puppet-common (3.4.3-1ubuntu1.1) ...**\n    **Selecting previously unselected package ruby-rgen.**\n    **Preparing to unpack .../ruby-rgen_0.6.6-1_all.deb ...**\n    **...**\n\n    ```", "```\n    **$ puppet module install garethr-docker**\n    **Notice: Preparing to install into /etc/puppet/modules ...**\n    **Notice: Downloading from https://forge.puppetlabs.com ...**\n    **Notice: Installing -- do not interrupt ...**\n    **/etc/puppet/modules**\n            |__ **garethr-docker (v5.3.0)**\n     **|__ puppetlabs-apt (v2.2.2)**\n     **|__ puppetlabs-stdlib (v4.12.0)**\n     **|__ stahnma-epel (v1.2.2)**\n\n    ```", "```\n     **$ nano sample.pp \n            include 'docker' \n            docker::image { 'ubuntu': \n              image_tag => 'precise' \n            } \n            docker::run { 'helloworld': \n              image => 'ubuntu', \n              command => '/bin/sh -c \"while true; do echo hello world; sleep 1; \n                         done\"',  \n            }** \n\n    ```", "```\n     **$ puppet apply sample.pp**\n     **Warning: Config file /etc/puppet/hiera.yaml not found, using Hiera \n            defaults \n            Warning: Scope(Apt::Source[docker]): $include_src is deprecated and \n            will be removed in the next major release, please use $include => { \n            'src' => false } instead \n            ... \n            Notice: /Stage[main]/Main/Docker::Run[helloworld]/Service[docker-\n            helloworld]/ensure: \n            ensure changed 'stopped' to 'running' \n            Notice: Finished catalog run in 0.80 seconds \n            Post installation it can be listed as running container: \n            $ docker ps \n            CONTAINER ID        IMAGE               COMMAND \n            CREATED             STATUS              PORTS               NAMES   \n            bd73536c7f64        ubuntu:trusty       \"/bin/sh -c 'while tr\"   5 \n            seconds ago       Up 5 seconds        helloworld**\n\n    ```", "```\n    **$ docker attach bd7**\n    **hello world**\n    **hello world**\n    **hello world**\n    **hello world**\n\n    ```", "```\n            wordpress:\n            image: wordpress\n            links:\n               - db:mysql\n            ports:\n               - 8080:80\n            db:\n            image: mariadb\n            environment:\n                  MYSQL_ROOT_PASSWORD: sample\n\n    ```", "```\n            # tasks file for ansible-dockerized-wordpress\n            - name: \"Launching DB container\"\n             docker:\n               name: db\n               image: mariadb\n               env:\n                 MYSQL_ROOT_PASSWORD: esample\n            - name: \"Launching wordpress container\"\n             docker:\n               name: wordpress\n               image: wordpress\n               links:\n               - db:mysql\n               ports: \n               - 8081:80\n    ```", "```\n**$ virtualenv ansible-container**\n**New python executable in /Users/vkohli/ansible-container/bin/python**\n**Installing setuptools, pip, wheel...done.**\n**vkohli-m01:~ vkohli$ source ansible-container/bin/activate**\n**(ansible-container) vkohli-m01:~ vkohli$ pip install ansible-container**\n**Collecting ansible-container**\n **Using cached ansible-container-0.1.0.tar.gz**\n**Collecting docker-compose==1.7.0 (from ansible-container)**\n **Downloading docker-compose-1.7.0.tar.gz (141kB)**\n **100% |=============================| 143kB 1.1MB/s** \n**Collecting docker-py==1.8.0 (from ansible-container)**\n**...**\n **Downloading docker_py-1.8.0-py2.py3-none-any.whl (41kB)**\n**Collecting cached-property<2,>=1.2.0 (from docker-compose==1.7.0->ansible-\n     container)**\n\n```", "```\n**$ git clone https://github.com/ansible/ansible-container.git**\n**Cloning into 'ansible-container'...**\n**remote: Counting objects: 2032, done.**\n**remote: Total 2032 (delta 0), reused 0 (delta 0), pack-reused 2032**\n**Receiving objects: 100% (2032/2032), 725.29 KiB | 124.00 KiB/s, done.**\n**Resolving deltas: 100% (1277/1277), done.**\n**Checking connectivity... done.**\n**$ cd ansible-container/**\n**$ ls**\n**AUTHORS      container        docs     EXAMPLES.md  LICENSE**\n**README.md         setup.py  update-authors.py**\n**codecov.yml  CONTRIBUTORS.md  example  INSTALL.md   MANIFEST.in**\n**requirements.txt  test**\n**$ sudo python setup.py install**\n**running install**\n**running bdist_egg**\n**running egg_info**\n**creating ansible_container.egg-info**\n**writing requirements to ansible_container.egg-info/requires.txt**\n\n```", "```\n    **$ ansible-container init**\n    **Ansible Container initialized.**\n    **$ cd ansible**\n    **$ ls**\n    **container.yml    main.yml    requirements.tx**\n\n    ```", "```\n    version: \"1\"\n    services:\n      django:\n        image: centos:7\n        expose:\n          - \"8080\"\n        working_dir: '/django'\n\n```", "```\n    # Pull latest nginx image\n    docker_image 'nginx' do\n      tag 'latest'\n      action :pull\n      notifies :redeploy, 'docker_container[sample_nginx]'\n    end\n\n    # Run container by exposing the ports\n    docker_container 'sample_nginx' do\n      repo 'nginx'\n      tag 'latest'\n      port '80:80'\n      host_name 'www'\n      domain_name 'computers.biz'\n      env 'FOO=bar'\n      volumes [ '/some/local/files/:/etc/nginx/conf.d' ]\n    end\n\n```"]