["```cpp\n<?xml version=\"1.0\"?>\n<movies>\n  <movie id=\"9871\" title=\"Forrest Gump\" year=\"1994\" length=\"202\">\n    <cast>\n      <role star=\"Tom Hanks\" name=\"Forrest Gump\" />\n      <role star=\"Sally Field\" name=\"Mrs. Gump\" />\n      <role star=\"Robin Wright\" name=\"Jenny Curran\" />\n      <role star=\"Mykelti Williamson\" name=\"Bubba Blue\" />\n    </cast>\n    <directors>\n      <director name=\"Robert Zemeckis\" />\n    </directors>\n    <writers>\n      <writer name=\"Winston Groom\" />\n      <writer name=\"Eric Roth\" />\n    </writers>\n  </movie>\n  <!-- more movie elements -->\n</movies>\n```", "```cpp\n{\n  \"movies\": [{\n    \"id\": 9871,\n    \"title\": \"Forrest Gump\",\n    \"year\": 1994,\n    \"length\": 202,\n    \"cast\": [{\n        \"star\": \"Tom Hanks\",\n        \"name\": \"Forrest Gump\"\n      },\n      {\n        \"star\": \"Sally Field\",\n        \"name\": \"Mrs. Gump\"\n      },\n      {\n        \"star\": \"Robin Wright\",\n        \"name\": \"Jenny Curran\"\n      },\n      {\n        \"star\": \"Mykelti Williamson\",\n        \"name\": \"Bubba Blue\"\n      }\n    ],\n    \"directors\": [\"Robert Zemeckis\"],\n    \"writers\": [\"Winston Groom\", \"Eric Roth\"]\n  }]\n}\n```", "```cpp\nstruct casting_role\n{\n   std::string actor;\n   std::string role;\n};\n\nstruct movie\n{\n   unsigned int              id;\n   std::string               title;\n   unsigned int              year;\n   unsigned int              length;\n   std::vector<casting_role> cast;\n   std::vector<std::string>  directors;\n   std::vector<std::string>  writers;\n};\n\nusing movie_list = std::vector<movie>;\n```", "```cpp\nvoid serialize(movie_list const & movies, std::string_view filepath)\n{\n   pugi::xml_document doc;\n   auto root = doc.append_child(\"movies\");\n\n   for (auto const & m : movies)\n   {\n      auto movie_node = root.append_child(\"movie\");\n\n      movie_node.append_attribute(\"id\").set_value(m.id);\n      movie_node.append_attribute(\"title\").set_value(m.title.c_str());\n      movie_node.append_attribute(\"year\").set_value(m.year);\n      movie_node.append_attribute(\"length\").set_value(m.length);\n\n      auto cast_node = movie_node.append_child(\"cast\");\n      for (auto const & c : m.cast)\n      { \n         auto node = cast_node.append_child(\"role\");\n         node.append_attribute(\"star\").set_value(c.actor.c_str());\n         node.append_attribute(\"name\").set_value(c.role.c_str());\n      }\n\n      auto directors_node = movie_node.append_child(\"directors\");\n      for (auto const & director : m.directors)\n      {\n         directors_node.append_child(\"director\")\n                       .append_attribute(\"name\")\n                       .set_value(director.c_str());\n      }\n\n      auto writers_node = movie_node.append_child(\"writers\");\n      for (auto const & writer : m.writers)\n      {\n         writers_node.append_child(\"writer\")\n                     .append_attribute(\"name\")\n                     .set_value(writer.c_str());\n      }\n   }\n\n   doc.save_file(filepath.data());\n}\n```", "```cpp\nmovie_list deserialize(std::string_view filepath)\n{\n   pugi::xml_document doc;\n   movie_list movies;\n\n   auto result = doc.load_file(filepath.data());\n   if (result)\n   {\n      auto root = doc.child(\"movies\");\n      for (auto movie_node = root.child(\"movie\");\n           movie_node;\n           movie_node = movie_node.next_sibling(\"movie\"))\n      {\n         movie m;\n         m.id = movie_node.attribute(\"id\").as_uint();\n         m.title = movie_node.attribute(\"title\").as_string();\n         m.year = movie_node.attribute(\"year\").as_uint();\n         m.length = movie_node.attribute(\"length\").as_uint();\n\n         for (auto role_node :       \n              movie_node.child(\"cast\").children(\"role\"))\n         {\n            m.cast.push_back(casting_role{\n               role_node.attribute(\"star\").as_string(),\n               role_node.attribute(\"name\").as_string() });\n         }\n\n         for (auto director_node : \n              movie_node.child(\"directors\").children(\"director\"))\n         {\n            m.directors.push_back(\n               director_node.attribute(\"name\").as_string());\n         }\n\n         for (auto writer_node : \n              movie_node.child(\"writers\").children(\"writer\"))\n         {\n            m.writers.push_back(\n               writer_node.attribute(\"name\").as_string());\n         }\n\n         movies.push_back(m);\n      }\n   }\n\n   return movies;\n}\n```", "```cpp\nint main()\n{\n   movie_list movies\n   {\n      {\n         11001, \"The Matrix\",1999, 196,\n         { {\"Keanu Reeves\", \"Neo\"},\n           {\"Laurence Fishburne\", \"Morpheus\"},\n           {\"Carrie-Anne Moss\", \"Trinity\"}, \n           {\"Hugo Weaving\", \"Agent Smith\"} },\n         {\"Lana Wachowski\", \"Lilly Wachowski\"},\n         {\"Lana Wachowski\", \"Lilly Wachowski\"},\n      },\n      {\n         9871, \"Forrest Gump\", 1994, 202,\n         { {\"Tom Hanks\", \"Forrest Gump\"},\n           {\"Sally Field\", \"Mrs. Gump\"},\n           {\"Robin Wright\",\"Jenny Curran\"},\n           {\"Mykelti Williamson\",\"Bubba Blue\"} },\n         {\"Robert Zemeckis\"},\n         {\"Winston Groom\", \"Eric Roth\"},\n      }\n   };\n\n   serialize(movies, \"movies.xml\");\n   auto result = deserialize(\"movies.xml\");\n\n   assert(result.size() == 2);\n   assert(result[0].title == \"The Matrix\");\n   assert(result[1].title == \"Forrest Gump\");\n}\n```", "```cpp\nstd::string text = R\"(\n<?xml version=\"1.0\"?>\n<movies>\n  <movie id=\"11001\" title=\"The Matrix\" year=\"1999\" length=\"196\">\n    <cast>\n      <role star=\"Keanu Reeves\" name=\"Neo\" />\n      <role star=\"Laurence Fishburne\" name=\"Morpheus\" />\n      <role star=\"Carrie-Anne Moss\" name=\"Trinity\" />\n      <role star=\"Hugo Weaving\" name=\" Agent Smith\" />\n    </cast>\n    <directors>\n      <director name=\"Lana Wachowski\" />\n      <director name=\"Lilly Wachowski\" />\n    </directors>\n    <writers>\n      <writer name=\"Lana Wachowski\" />\n      <writer name=\"Lilly Wachowski\" />\n    </writers>\n  </movie>\n  <movie id=\"9871\" title=\"Forrest Gump\" year=\"1994\" length=\"202\">\n    <cast>\n      <role star=\"Tom Hanks\" name=\"Forrest Gump\" />\n      <role star=\"Sally Field\" name=\"Mrs. Gump\" />\n      <role star=\"Robin Wright\" name=\"Jenny Curran\" />\n      <role star=\"Mykelti Williamson\" name=\"Bubba Blue\" />\n    </cast>\n    <directors>\n      <director name=\"Robert Zemeckis\" />\n    </directors>\n    <writers>\n      <writer name=\"Winston Groom\" />\n      <writer name=\"Eric Roth\" />\n    </writers>\n  </movie>\n</movies>\n)\";\n```", "```cpp\npugi::xml_document doc;\nif (doc.load_string(text.c_str()))\n{\n   try\n   {\n      auto titles = doc.select_nodes(\"/movies/movie[@year>1995]\");\n\n      for (auto it : titles)\n      {\n         std::cout << it.node().attribute(\"title\").as_string() \n                   << std::endl;\n      }\n   }\n   catch (pugi::xpath_exception const & e)\n   {\n      std::cout << e.result().description() << std::endl;\n   }\n\n   try\n   {\n      auto titles = doc.select_nodes(\"/movies/movie/cast/role[last()]\");\n\n      for (auto it : titles)\n      {\n         std::cout << it.node().attribute(\"star\").as_string() \n                   << std::endl;\n      }\n   }\n   catch (pugi::xpath_exception const & e)\n   {\n      std::cout << e.result().description() << std::endl;\n   }\n}\n```", "```cpp\nusing json = nlohmann::json;\n\nvoid to_json(json& j, casting_role const & c)\n{\n   j = json{ {\"star\", c.actor}, {\"name\", c.role} };\n}\n\nvoid to_json(json& j, movie const & m)\n{\n   j = json::object({\n      {\"id\", m.id},\n      {\"title\", m.title},\n      {\"year\", m.year},\n      {\"length\", m.length},\n      {\"cast\", m.cast },\n      {\"directors\", m.directors},\n      {\"writers\", m.writers}\n   });\n}\n\nvoid serialize(movie_list const & movies, std::string_view filepath)\n{\n   json jdata{ { \"movies\", movies } };\n\n   std::ofstream ofile(filepath.data());\n   if (ofile.is_open())\n   {\n      ofile << std::setw(2) << jdata << std::endl;\n   }\n}\n```", "```cpp\nint main()\n{\n   movie_list movies\n   {\n      {\n         11001, \"The Matrix\", 1999, 196,\n         { {\"Keanu Reeves\", \"Neo\"},\n           {\"Laurence Fishburne\", \"Morpheus\"},\n           {\"Carrie-Anne Moss\", \"Trinity\"}, \n           {\"Hugo Weaving\", \"Agent Smith\"} },\n         {\"Lana Wachowski\", \"Lilly Wachowski\"},\n         {\"Lana Wachowski\", \"Lilly Wachowski\"},\n      },\n      {\n         9871, \"Forrest Gump\", 1994, 202,\n         { {\"Tom Hanks\", \"Forrest Gump\"},\n           {\"Sally Field\", \"Mrs. Gump\"},\n           {\"Robin Wright\",\"Jenny Curran\"},\n           {\"Mykelti Williamson\",\"Bubba Blue\"} },\n         {\"Robert Zemeckis\"},\n         {\"Winston Groom\", \"Eric Roth\"},\n      }\n   };\n\n   serialize(movies, \"movies.json\");\n}\n```", "```cpp\nusing json = nlohmann::json;\n\nmovie_list deserialize(std::string_view filepath)\n{\n   movie_list movies;\n\n   std::ifstream ifile(filepath.data());\n   if (ifile.is_open())\n   {\n      json jdata;\n\n      try\n      {\n         ifile >> jdata;\n\n         if (jdata.is_object())\n         {\n            for (auto & element : jdata.at(\"movies\"))\n            {\n               movie m;\n\n               m.id = element.at(\"id\").get<unsigned int>();\n               m.title = element.at(\"title\").get<std::string>();\n               m.year = element.at(\"year\").get<unsigned int>();\n               m.length = element.at(\"length\").get<unsigned int>();\n\n               for (auto & role : element.at(\"cast\"))\n               {\n                  m.cast.push_back(casting_role{\n                     role.at(\"star\").get<std::string>(),\n                     role.at(\"name\").get<std::string>() });\n               }\n\n               for (auto & director : element.at(\"directors\"))\n               {\n                  m.directors.push_back(director);\n               }\n\n               for (auto & writer : element.at(\"writers\"))\n               {\n                  m.writers.push_back(writer);\n               }\n\n               movies.push_back(m);\n            }\n         }\n      }\n      catch (std::exception const & ex)\n      {\n         std::cout << ex.what() << std::endl;\n      }\n   }\n\n   return movies;\n}\n```", "```cpp\nint main()\n{\n   auto movies = deserialize(\"movies.json\");\n\n   assert(movies.size() == 2);\n   assert(movies[0].title == \"The Matrix\");\n   assert(movies[1].title == \"Forrest Gump\");\n}\n```", "```cpp\n#ifdef _WIN32\nstatic const std::string fonts_dir = R\"(c:\\windows\\fonts\\)\";\n#elif defined (__APPLE__)\nstatic const std::string fonts_dir = R\"(/Library/Fonts/)\";\n#else\nstatic const std::string fonts_dir = R\"(/usr/share/fonts)\"; \n#endif\n\nvoid print_pdf(movie_list const & movies,\n               std::string_view path)\n{\n   const int height = 842;\n   const int width = 595;\n   const int left = 60;\n   const int top = 770;\n   const int right = 535;\n   const int bottom = 60;\n   const int line_height = 28;\n\n```", "```cpp\n   PDFWriter pdf;\n   pdf.StartPDF(path.data(), ePDFVersion13);\n   auto font = pdf.GetFontForFile(fonts_dir + \"arial.ttf\");\n\n   AbstractContentContext::GraphicOptions pathStrokeOptions(\n      AbstractContentContext::eStroke,\n      AbstractContentContext::eRGB,\n      0xff000000,\n      1);\n\n   PDFPage* page = nullptr;\n   PageContentContext* context = nullptr;\n   int index = 0;\n   for (size_t i = 0; i < movies.size(); ++i)\n   {\n      index = i % 25;\n      if (index == 0)\n      {\n         if (page != nullptr)\n         {\n            DoubleAndDoublePairList pathPoints;\n            pathPoints.push_back(DoubleAndDoublePair(left, bottom));\n            pathPoints.push_back(DoubleAndDoublePair(right, bottom));\n            context->DrawPath(pathPoints, pathStrokeOptions);\n\n            pdf.EndPageContentContext(context);\n            pdf.WritePageAndRelease(page);\n         }\n\n         page = new PDFPage();\n         page->SetMediaBox(PDFRectangle(0, 0, width, height));\n         context = pdf.StartPageContentContext(page);\n\n         {\n            DoubleAndDoublePairList pathPoints;\n            pathPoints.push_back(DoubleAndDoublePair(left, top));\n            pathPoints.push_back(DoubleAndDoublePair(right, top));\n            context->DrawPath(pathPoints, pathStrokeOptions);\n         }\n      }\n\n      if (i == 0)\n      {\n         AbstractContentContext::TextOptions const textOptions(\n            font, 26, AbstractContentContext::eGray, 0);\n\n```", "```cpp\n         context->WriteText(left, top + 15, \n                            \"List of movies\", textOptions);\n      }\n\n      auto textw = 0;\n      {\n         AbstractContentContext::TextOptions const textOptions(\n            font, 20, AbstractContentContext::eGray, 0);\n\n         context->WriteText(left, top - 20 - line_height * index, \n                            movies[i].title, textOptions);\n         auto textDimensions = font->CalculateTextDimensions(\n                            movies[i].title, 20);\n         textw = textDimensions.width;\n      }\n\n      {\n         AbstractContentContext::TextOptions const textOptions(\n            font, 16, AbstractContentContext::eGray, 0);\n\n         context->WriteText(left + textw + 5, \n                            top - 20 - line_height * index, \n                            \" (\" + std::to_string(movies[i].year) + \")\", \n                            textOptions);\n\n         std::stringstream s;\n         s << movies[i].length / 60 << ':' << std::setw(2) \n           << std::setfill('0') << movies[i].length % 60;\n\n         context->WriteText(right - 30, top - 20 - line_height * index,\n            s.str(),\n           textOptions);\n      }\n   }\n\n   DoubleAndDoublePairList pathPoints;\n   pathPoints.push_back(\n      DoubleAndDoublePair(left, top - line_height * (index + 1)));\n   pathPoints.push_back(\n      DoubleAndDoublePair(right, top - line_height * (index + 1)));\n   context->DrawPath(pathPoints, pathStrokeOptions);\n\n   if (page != nullptr)\n   {\n```", "```cpp\n      pdf.EndPageContentContext(context);\n      pdf.WritePageAndRelease(page);\n   }\n\n   pdf.EndPDF();\n}\n```", "```cpp\nint main()\n{\n   movie_list movies\n   {\n      { 1, \"The Matrix\", 1999, 136},\n      { 2, \"Forrest Gump\", 1994, 142},\n      // .. other movies\n      { 28, \"L.A. Confidential\", 1997, 138},\n      { 29, \"Shutter Island\", 2010, 138},\n   };\n\n   print_pdf(movies, \"movies.pdf\");\n}\n```", "```cpp\nnamespace fs = std::experimental::filesystem;\n\nstd::vector<std::string> get_images(fs::path const & dirpath)\n{\n   std::vector<std::string> paths;\n\n   for (auto const & p : fs::directory_iterator(dirpath))\n   {\n```", "```cpp\n      if (p.path().extension() == \".jpg\")\n         paths.push_back(p.path().string());\n   }\n\n   return paths;\n}\n```", "```cpp\nvoid print_pdf(fs::path const & pdfpath,\n               fs::path const & dirpath)\n{\n   const int height = 842;\n   const int width = 595;\n   const int margin = 20;\n\n   auto image_paths = get_images(dirpath);\n\n   PDFWriter pdf;\n   pdf.StartPDF(pdfpath.string(), ePDFVersion13);\n\n   PDFPage* page = nullptr;\n   PageContentContext* context = nullptr;\n\n   auto top = height - margin;\n   for (size_t i = 0; i < image_paths.size(); ++i)\n   {\n      auto dims = pdf.GetImageDimensions(image_paths[i]);\n\n      if (i == 0 || top - dims.second < margin)\n      {\n         if (page != nullptr)\n         {\n```", "```cpp\n            pdf.EndPageContentContext(context);\n            pdf.WritePageAndRelease(page);\n         }\n\n         page = new PDFPage();\n         page->SetMediaBox(PDFRectangle(0, 0, width, height));\n         context = pdf.StartPageContentContext(page);\n\n         top = height - margin;\n      }\n\n      context->DrawImage(margin, top - dims.second, image_paths[i]);\n\n      top -= dims.second + margin;\n   }\n\n   if (page != nullptr)\n   {\n      pdf.EndPageContentContext(context);\n      pdf.WritePageAndRelease(page);\n   }\n\n   pdf.EndPDF();\n}\n```", "```cpp\nint main()\n{\n   print_pdf(\"sample.pdf\", \"res\");\n}\n```"]