- en: Chapter 14. Securing and Scaling Node.js Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。保护和扩展Node.js应用程序
- en: It's very important to scale and secure your applications. Scaling and securing
    are not one-time tasks. You need to keep making changes to your code as you add
    new features to increase application security, and as your application traffic
    and data increases, you need to scale your servers. In this chapter, you will
    learn how to make Node.js applications more secure and how to scale Node.js applications.
    I will be assuming that your are using Express for creating your web server as
    it is the most common.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展和保护您的应用程序非常重要。扩展和保护不是一次性的任务。随着您添加新功能以增加应用程序安全性，以及您的应用程序流量和数据增加，您需要不断对代码进行更改。在本章中，您将学习如何使Node.js应用程序更安全以及如何扩展Node.js应用程序。我假设您正在使用Express创建您的Web服务器，因为这是最常见的。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Application vulnerabilities
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序漏洞
- en: Non-vulnerability attacks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非漏洞攻击
- en: Various third-party services to protect your application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种第三方服务来保护您的应用程序
- en: Checking security issues in third-party packages
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查第三方包中的安全问题
- en: Techniques of distributing traffic
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发流量的技术
- en: Common vulnerabilities in applications
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序中的常见漏洞
- en: According to Wikipedia, a **vulnerability** is a weakness in the application
    that allows an attacker to reduce a system's information assurance. Applications
    expose different types of vulnerability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科，**漏洞**是应用程序中允许攻击者降低系统信息保障的弱点。应用程序暴露不同类型的漏洞。
- en: Let's look at some important vulnerabilities and how to prevent them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些重要的漏洞以及如何防范它们。
- en: Helmet
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helmet
- en: '**Helmet** is a Node.js library that helps you prevent various attacks by setting
    various security-related HTTP headers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helmet**是一个Node.js库，通过设置各种与安全相关的HTTP标头，帮助您防范各种攻击。'
- en: 'Here are the various headers added by Helmet:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Helmet添加的各种标头如下：
- en: '`Strict-Transport-Policy`: This header is used to enforce secure (HTTP over
    SSL/TLS) connections to the server. HTTPS prevents man-in-the-middle attacks.
    In a man-in-the-middle attack, an attacker secretly alters the communication between
    the client and server. This is done to steal data, add ads to web pages, and so
    on.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Strict-Transport-Policy`：此标头用于强制将安全（HTTP over SSL/TLS）连接到服务器。HTTPS可以防止中间人攻击。在中间人攻击中，攻击者秘密地改变客户端和服务器之间的通信。这是为了窃取数据，在网页上添加广告等。'
- en: '`X-Frame-Options`: This header provides clickjacking protection. **Clickjacking**
    is a technique by which an attacker uses multiple transparent or opaque layers
    to trick a user into clicking on a button or link on another page when they intended
    to click on the top-level page. Thus, the attacker is "hijacking" clicks meant
    for their page and routing them to some other page, most likely owned by another
    application, domain, or both. This header prevents the application from being
    viewed inside an iFrame, therefore providing clickjacking protection.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Frame-Options`：此标头提供点击劫持保护。**点击劫持**是一种攻击技术，攻击者使用多个透明或不透明的层来欺骗用户，使其在打算点击顶层页面上的按钮或链接时，实际上点击了另一页上的按钮或链接。因此，攻击者“劫持”了本来应该点击其页面的点击，并将其路由到另一页，很可能是由另一个应用程序、域或两者拥有的。此标头防止应用程序在iFrame内被查看，从而提供点击劫持保护。'
- en: '`X-XSS-Protection`: This header prevents reflective XSS attacks. Reflective
    XSS attacks are a type of XSS attack. **Cross-Site Scripting** (**XSS**) attacks
    are a type of injection in which malicious scripts are injected into otherwise
    benign and trusted web sites. XSS attacks occur when an attacker uses a web application
    to send malicious code, generally in the form of a browser-side script, to a different
    end user. Reflected XSS is the most frequent type of XSS attack. They are also
    known as non-persistent XSS attacks since the attack payload is delivered and
    executed via a single request and response. Reflected XSS occurs when the attacker
    injects executable JavaScript code into the HTML response by injecting the code
    into the URL.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-XSS-Protection`：此标头防止反射型XSS攻击。反射型XSS攻击是一种XSS攻击。**跨站点脚本**（**XSS**）攻击是一种注入类型，恶意脚本被注入到本来良性和受信任的网站中。XSS攻击发生在攻击者使用Web应用程序向不同的最终用户发送恶意代码，通常以浏览器端脚本的形式。反射型XSS是最常见的XSS攻击类型。它们也被称为非持久性XSS攻击，因为攻击载荷通过单个请求和响应进行交付和执行。反射型XSS发生在攻击者通过将可执行的JavaScript代码注入到HTML响应中，通过将代码注入到URL中。'
- en: '`X-Content-Type-Options`: Browsers can override response `Content-Type` headers
    to guess and process data using an implicit content type. While this can be convenient
    in some scenarios, it can also lead to some kinds of attack, such as a MIME confusion
    attack, authorized hotlinking, and so on. Returning `X-Content-Type-Options` will
    cause browsers to use the provided `Content-Type` header and not interpret the
    content as a different content type.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-Content-Type-Options`：浏览器可以覆盖响应的`Content-Type`标头，以猜测和处理数据使用隐式内容类型。虽然这在某些情况下可能很方便，但也可能导致某些类型的攻击，例如MIME混淆攻击、授权的热链接等。返回`X-Content-Type-Options`将导致浏览器使用提供的`Content-Type`标头，而不将内容解释为不同的内容类型。'
- en: '`Content-Security-Policy`: This header lets us provide a list of trusted sources
    to the browser, from which content such as JavaScript, CSS, HTML frames, fonts,
    images, and embeddable objects (Java applets, ActiveX, audio, and video) can be
    loaded onto a page. This helps us prevent XSS attacks.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Content-Security-Policy`：此标头允许我们向浏览器提供受信任的来源列表，从中可以加载JavaScript、CSS、HTML框架、字体、图像和可嵌入对象（Java小程序、ActiveX、音频和视频）等内容到页面上。这有助于我们防止XSS攻击。'
- en: To learn more about Helmet, visit [https://www.npmjs.com/package/helmet](https://www.npmjs.com/package/helmet)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Helmet的信息，请访问[https://www.npmjs.com/package/helmet](https://www.npmjs.com/package/helmet)
- en: Cross-site request forgery
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站点请求伪造
- en: '**Cross-site request forgery** (**CSRF**) is a type of attack in which requests
    from a user are sent to servers without the user knowing about it.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站点请求伪造**（**CSRF**）是一种攻击类型，其中用户的请求被发送到服务器，而用户并不知道。'
- en: For example, if an attacker is able to find a reproducible link that executes
    a specific action on the target page while the victim is logged in to it, he is
    able to embed such a link on a page he controls and trick the victim into opening
    it. The attack-carrying link may be placed in a location that the victim is likely
    to visit while logged in to the target site sent in a HTML e-mail body or attachment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果攻击者能够找到一个可重现的链接，在受害者登录到目标页面时执行特定操作，他可以将这样的链接嵌入到他控制的页面中，并欺骗受害者打开它。攻击性链接可能放置在受害者在登录到目标站点时可能访问的位置，发送到HTML电子邮件正文或附件中。
- en: There are various ways to prevent CSRF attacks. Most CSRF prevention techniques
    work by embedding additional authentication data into requests, which allows the
    web application to detect requests from unauthorized locations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种方法可以防止CSRF攻击。大多数CSRF预防技术通过将附加的身份验证数据嵌入请求中，允许Web应用程序检测来自未经授权位置的请求。
- en: There is a library named `csrf` ([https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf))
    for Node.js that lets you prevent CSRF attacks. It provides you middleware to
    protect Express web servers from CSRF attacks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`csrf`（[https://www.npmjs.com/package/csrf](https://www.npmjs.com/package/csrf)）的库，用于Node.js，可以让您防止CSRF攻击。它为Express
    Web服务器提供了中间件，以保护免受CSRF攻击。
- en: Cross-site scripting
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站脚本
- en: We saw earlier what the XSS vulnerability is. We basically saw what a reflected
    XSS attack is. There is another type of XSS attack called **stored XSS**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看到了XSS漏洞是什么。我们基本上看到了反射型XSS攻击是什么。还有一种称为**存储型XSS**的XSS攻击。
- en: Stored XSS occurs when the application stores user input that is not correctly
    filtered. For example, while chatting, if a message is not sanitized, then both
    users can run scripts on each other's browsers by sending JS code within `<script>`
    tags as messages.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 存储型XSS发生在应用程序存储未正确过滤的用户输入时。例如，在聊天时，如果消息未经过消毒，则两个用户可以通过在`<script>`标签中发送JS代码作为消息来在彼此的浏览器上运行脚本。
- en: To prevent both types of XSS attack, we should always filter/sanitize user input.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止XSS攻击的两种类型，我们应该始终过滤/清理用户输入。
- en: Session fixation
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话固定
- en: '**Session fixation** is an attack that permits an attacker to hijack a valid
    user session. Here are several techniques to prevent session fixation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话固定**是一种允许攻击者劫持有效用户会话的攻击。以下是几种防止会话固定的技术：'
- en: Set session timeouts
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置会话超时
- en: Regenerate session tokens frequently
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁重新生成会话令牌
- en: When logged out, expire the session token
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在注销时，使会话令牌过期
- en: Store the user agent and IP address of the user when creating a session and
    check whether the value matches during the following HTTP requests.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建会话时存储用户代理和IP地址，并在随后的HTTP请求中检查该值是否匹配。
- en: Non-vulnerability based attacks
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非漏洞攻击
- en: There are various kinds of attack that can be made on any kind of application,
    as they depend on loopholes in the application. Still, applications can do a lot
    to prevent these attacks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种攻击方式可以针对任何类型的应用程序进行，因为它们取决于应用程序中的漏洞。尽管如此，应用程序可以采取很多措施来防止这些攻击。
- en: Let's see a few of the most common non-vulnerability-based attacks and how to
    prevent them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一些最常见的非漏洞攻击以及如何防范它们。
- en: Denial-of-service attacks
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: A **denial-of-service** (**DoS**) attack is an attempt to make a server machine
    unavailable to its intended users temporarily. An attacker uses one or many machines
    to make continuous requests to the server to take it down.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务**（**DoS**）攻击是试图使服务器暂时无法提供给其预期用户的企图。攻击者使用一个或多个机器不断向服务器发出请求，以使其崩溃。'
- en: The best way to prevent DoS is to use an external service such as CloudFlare,
    which uses a lot of different techniques and data from various sources to block
    malicious requests on your server. It's always better to avoid handling DoS on
    your server and leave it to a service created by DoS experts.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 防止DoS的最佳方法是使用CloudFlare等外部服务，它使用来自各种来源的大量不同技术和数据来阻止服务器上的恶意请求。最好避免在服务器上处理DoS，并将其留给由DoS专家创建的服务。
- en: Brute force attacks
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暴力攻击
- en: 'A **brute force attack** aims at being the simplest kind of method to gain
    access to a site: trying usernames and passwords, over and over, until it gets
    in.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**暴力攻击**旨在成为获得网站访问权限的最简单的方法：反复尝试用户名和密码，直到成功。'
- en: 'Here are several ways to prevent brute force attacks:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是几种防止暴力攻击的方法：
- en: We can embed CAPTCHA in forms that can completely prevent bots from making brute
    force attacks and slow down brute force attacks made by humans.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在表单中嵌入CAPTCHA，完全防止机器人进行暴力攻击，并减缓人类进行的暴力攻击。
- en: There is a middleware program for Express servers called **express-brute** that
    limits the rate of incoming requests based on several factors. You can find out
    more about **express-brute** at [https://www.npmjs.com/package/express-brute](https://www.npmjs.com/package/express-brute).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express服务器有一个名为**express-brute**的中间件程序，它基于几个因素限制了传入请求的速率。您可以在[https://www.npmjs.com/package/express-brute](https://www.npmjs.com/package/express-brute)了解更多关于**express-brute**的信息。
- en: Using secure packages
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用安全的包
- en: The npm packages you use may contain critical security vulnerabilities that
    could also affect your application. It's not possible to go through every package's
    code or test each of them separately.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用的npm包可能包含重要的安全漏洞，这可能也会影响您的应用程序。不可能逐个检查每个包的代码或单独测试它们。
- en: There is a database called `Node Security Project` that has a list of the most
    important vulnerable packages. You can use command-line tools such as `nsp` ([https://www.npmjs.com/package/nsp](https://www.npmjs.com/package/nsp))
    and `requireSafe` ([https://www.npmjs.com/package/requiresafe](https://www.npmjs.com/package/requiresafe))
    to check the vulnerable dependencies of your application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`Node Security Project`的数据库，其中列出了最重要的易受攻击的包。您可以使用命令行工具，如`nsp`（[https://www.npmjs.com/package/nsp](https://www.npmjs.com/package/nsp)）和`requireSafe`（[https://www.npmjs.com/package/requiresafe](https://www.npmjs.com/package/requiresafe)）来检查应用程序的易受攻击的依赖项。
- en: You should always keep an eye on the new version releases of the packages that
    your application is dependent on and update it, as a new release often fixes issues
    related to security.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该时刻关注你的应用所依赖的包的新版本发布，并进行更新，因为新版本通常会修复与安全相关的问题。
- en: Scaling Node.js servers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Node.js服务器
- en: If your application has lots of users accessing the system simultaneously, then
    obviously a single server cannot handle all the traffic. It will slow down and
    crash. Therefore, we need to deploy the application on multiple servers and then
    distribute the traffic equally between them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用有很多用户同时访问系统，那么显然单个服务器无法处理所有流量。它会变慢并且崩溃。因此，我们需要将应用部署在多个服务器上，然后在它们之间平均分发流量。
- en: To distribute traffic between servers, we need to use something called a **load
    balancer**. A load balancer is a server that sits in front of the application
    servers. The client communicates with the load balancer instead of the application
    servers, and instead of handling the request, the load balancer forwards it to
    an application server; when the application servers sends the response, it sends
    the same response to the client.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在服务器之间分发流量，我们需要使用一个叫做**负载均衡器**的东西。负载均衡器是一个位于应用服务器前面的服务器。客户端与负载均衡器通信，而不是与应用服务器通信，负载均衡器将请求转发到应用服务器；应用服务器发送响应时，也将相同的响应发送给客户端。
- en: As a load balancer doesn't actually process the request, it can handle many
    more requests than an application server. Obviously, a load balancer cannot handle
    unlimited requests, so we can use multiple load balancers. When we use multiple
    load balancers, the traffic between them is distributed by using the round-robin
    DNS technique. In round-robin DNS, the IP address of the domain pointing to the
    load balancer changes according to an appropriate statistical model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于负载均衡器实际上不处理请求，它可以处理比应用服务器更多的请求。显然，负载均衡器无法处理无限的请求，因此我们可以使用多个负载均衡器。当我们使用多个负载均衡器时，它们之间的流量是通过使用轮询DNS技术进行分发的。在轮询DNS中，指向负载均衡器的域的IP地址会根据适当的统计模型而改变。
- en: '**Amazon Web Services** (**AWS**) provides a load balancer called Amazon ELB,
    which can be used to distribute traffic between Amazon EC2 servers, that is, application
    servers. Obviously, it difficult to predict the total number of EC2 instances
    you would need to scale your application; therefore, AWS also provides something
    called **auto scaling**, which can add/remove EC2 instances as needed. Therefore,
    to host a large-scale application, Amazon is the best choice. It also provides
    lots of other cloud services to scale and deploy your application.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）提供了一个叫做亚马逊ELB的负载均衡器，可以用来在亚马逊EC2服务器之间分发流量，也就是应用服务器。显然，很难预测你需要多少EC2实例来扩展你的应用；因此，AWS还提供了一个叫做**自动扩展**的东西，可以根据需要添加/删除EC2实例。因此，要托管一个大规模的应用，亚马逊是最好的选择。它还提供了许多其他云服务来扩展和部署你的应用。'
- en: In case you don't want to worry about scaling, deploying, and managing your
    servers, then you can use cloud services such as Heroku, which makes it much easier
    to achieve all this, and you just need to worry about the application code—that's
    it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想担心扩展、部署和管理你的服务器，那么你可以使用Heroku等云服务，这样可以更容易地实现所有这些，你只需要担心应用代码就可以了。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw a lot of services and libraries to scale and secure
    Node.js applications. We saw various vulnerabilities and how to prevent them.
    Make sure you take regular backups of your data so that even if your app is hacked,
    you will still have a chance to get the application running again as the data
    is not lost. Obviously, there is a lot more to learn about scaling and securing
    Node.js applications as this is an unending topic and new things come up regularly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了许多用于扩展和保护Node.js应用的服务和库。我们看到了各种漏洞以及如何防范它们。确保定期备份你的数据，这样即使你的应用被黑客攻击，你仍然有机会让应用再次运行，因为数据没有丢失。显然，关于扩展和保护Node.js应用还有很多要学习的，因为这是一个永无止境的话题，新的东西经常出现。
- en: Bibliography
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'This Learning Path is a blend of content, all packaged up keeping your journey
    in mind. It includes content from the following Packt products:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个学习路径是一个混合内容，所有内容都是根据你的学习过程打包而成的。它包括以下Packt产品的内容：
- en: '*Mastering JavaScript- Ved Antani*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《精通JavaScript- Ved Antani*'
- en: '*Mastering JavaScript Design Patterns, Second Edition- Simon Timms*'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《精通JavaScript设计模式，第二版- Simon Timms*'
- en: '*Modern JavaScript Applications- Narayan Prusty*'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《现代JavaScript应用- Narayan Prusty*'
