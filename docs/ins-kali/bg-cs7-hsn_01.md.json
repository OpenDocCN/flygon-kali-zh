["```cs\npublic class GenericsClass<T>\n```", "```cs\nprivate T[] vals;\n```", "```cs\n//generic array instance variable\n```", "```cs\npublic GenericsClass(T[] input)\n```", "```cs\nvals = input;\n```", "```cs\npublic string DisplayValues()\n```", "```cs\nstring str = null;\n```", "```cs\nforeach ( T t in vals)\n```", "```cs\nstr += $\"<br>Value={t}\";\n```", "```cs\nreturn str;\n```", "```cs\n //<T> means this class can operate on many different data types\npublic class GenericsClass<T>\n{\n    //generic array instance variable\n    private T[] vals;//array of T inputs\n    public GenericsClass(T[] input)\n    {\n        //set value of instance variable\n        vals = input;\n    }\n    public string DisplayValues()\n    {\n        string str = null;//create string to build up display\n        foreach(T t in vals)\n        {\n            //actually accumulate stuff to be displayed\n            str += $\"<br>Value={t}\";\n        }\n    //return string of outputs to calling code\n    return str;\n    }\n}  \n```", "```cs\nGenericsClass<int> ints = new GenericsClass<int>(new int[] { 1, 2, 3, 4, 5 });\n```", "```cs\nsampLabel.Text += ints.DisplayValues();\n```", "```cs\nGenericsClass<double> dubs = new GenericsClass<double>(new double[] {1, 2, 3, 4, 5});\nsampLabel.Text = ints.DisplayValues();\n```", "```cs\nGenericsClass<decimal> decs = new GenericsClass<decimal>(new decimal[] { 1, 2, 3, 4, 5 });\nsampLabel.Text = ints.DisplayValues();\n```", "```cs\nGenericsClass<double> dubs = new GenericsClass<double>(new double[] { 1.0, -2.3, 3, 4, 5 });\nsampLabel.Text = ints.DisplayValues();\nGenericsClass<decimal> decs = new GenericsClass<decimal>(new decimal[] { 1, 2.0M, 3, 4, 5.79M });\nsampLabel.Text = ints.DisplayValues();\n```", "```cs\nGenericsClass<double> dubs = new GenericsClass<double>(new double[] { 1.0, -2.3, 3, 4, 5 });\nsampLabel.Text += ints.DisplayValues();\nGenericsClass<decimal> decs = new GenericsClass<decimal>(new decimal[] { 1, 2.0M, 3, 4, 5.79M });\nsampLabel.Text += ints.DisplayValues();\n```", "```cs\npublic GenericsClass(T[] input)\n```", "```cs\n//using is a directive\n//System is a name space\n//name space is a collection of features that our needs to run\nusing System;\n//public means accessible anywhere\n//partial means this class is split over multiple files\n//class is a keyword and think of it as the outermost level of grouping\n//:System.Web.UI.Page means our page inherits the features of a Page\npublic partial class _Default : System.Web.UI.Page\n{\n    protected void Button1_Click(object sender, EventArgs e)\n    {\n        //in each case below, GenericsClass<...> works equally well with\n        //integers, doubles and decimals, among others\n        GenericsClass<int> ints = new GenericsClass<int>(new int[] { 1, 2, 3, 4, 5 });\n        sampLabel.Text = ints.DisplayValues();\n        GenericsClass<double> dubs = new GenericsClass&lt;double>(new double[] { 1.0, -2.3, 3, 4, 5 });\n        sampLabel.Text += ints.DisplayValues();\n        GenericsClass<decimal> decs = new GenericsClass<decimal>(new decimal[] { 1, 2.0M, 3, 4, 5.79M });\n        sampLabel.Text += decs.DisplayValues();\n    }\n} \n```"]