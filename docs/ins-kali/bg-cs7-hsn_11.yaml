- en: Using Query Syntax to Construct Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用查询语法构造查询
- en: In this chapter, you will learn how to write queries using query syntax, for
    example, method chaining, as we done have before.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用查询语法编写查询，例如方法链接，就像我们以前做过的那样。
- en: Adding a show button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向HTML添加显示按钮
- en: 'Bring up a project and the only thing that will go into the <html> is a button
    and nothing else. To do this, go to Toolbox, grab a `Button` control, and drag
    and drop it below the line beginning with `<form id=...`. Replace the text on
    the button to say Show:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，唯一放入<html>中的是一个按钮，没有其他内容。为此，请转到工具箱，获取一个`Button`控件，并将其拖放到以`<form id=...`开头的行下方。将按钮上的文本替换为显示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, switch to the Design view, and double-click on the Show button. This takes
    us into `Default.aspx.cs`. Delete the event handling stub. The relevant portion
    of the starting code for this project should look like *Figure 11.6.1*:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到设计视图，并双击显示按钮。这将带我们进入`Default.aspx.cs`。删除事件处理存根。此项目的起始代码的相关部分应如*图11.6.1*所示：
- en: '![](img/c34a42e9-1784-4147-9aed-cd71dc1f298c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c34a42e9-1784-4147-9aed-cd71dc1f298c.png)'
- en: 'Figure 11.6.1: The starting code section for this project'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6.1：此项目的起始代码部分
- en: 'Next, go to the top of the file and, under `using System`, enter the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到文件顶部，在`using System`下输入以下内容：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To make use of this, we''ll do what follows. It''s routine code; it''s mechanical.
    The first thing is that, when somebody clicks on the Show button, you want to
    create a label so that there''s a cumulative output all the time. To do this,
    enter the following between the curly braces under the line beginning with `protected
    void Button1_Click...`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这一点，我们将做如下操作。这是例行代码；这是机械的。首先，当有人单击显示按钮时，您希望创建一个标签，以便始终有一个累积输出。为此，请在以`protected
    void Button1_Click...`开头的行下的大括号之间输入以下内容：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating a decimal salary array
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个decimal工资数组
- en: 'Next, below the preceding line, you''ll make a `decimal` array called `salaries`,
    naturally enough. So, enter the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一行下面，您将创建一个名为`salaries`的`decimal`数组，自然而然地。因此，输入以下内容：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is how you can query a `decimal` array. This is a `decimal` array specifically,
    but it could be any array essentially. We throw in some values, and there you
    go.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以查询`decimal`数组的方法。这是一个特定的`decimal`数组，但基本上可以是任何数组。我们加入了一些值，就这样。
- en: Working with range variables
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用范围变量
- en: 'Next, enter the following below this line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在此行下面输入以下内容：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the return or results set will be of the `string` type, not of the
    `decimal` type. After `salResults =`, you want to define the body of the LINQ
    queries, so you say `from salary in salaries`. If you hover your mouse over `salary`
    here, you see that it is what is known as a *range variable*, shown in *figure
    11.6.2.* So, you're asking it to take a look in `salaries`. As a range variable,
    it's the quantity that goes over all of the entries individually.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，返回或结果集将是`string`类型，而不是`decimal`类型。在`salResults =`之后，您希望定义LINQ查询的主体，因此您说`from
    salary in salaries`。如果您将鼠标悬停在此处的`salary`上，您会看到它被称为*范围变量*，如*图11.6.2*所示。因此，您要求它查看`salaries`。作为范围变量，它是逐个遍历所有条目的数量。
- en: '![](img/b52e9e05-d447-46e1-8bfd-173af7d283a7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b52e9e05-d447-46e1-8bfd-173af7d283a7.png)'
- en: 'Figure 11.6.2: Range variable'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6.2：范围变量
- en: Selecting a salary range and putting it in descending order
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择工资范围并按降序排列
- en: 'Now you''ll specify some kind of logical condition. For example, to filter
    the results in some fashion. So, enter the following, indented, under this line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将指定某种逻辑条件。例如，以某种方式过滤结果。因此，在此行下缩进输入以下内容：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, you can `orderby` the result set to list salaries in descending order,
    for example; so, enter the following directly under this line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以对结果集进行`orderby`，以按降序列出工资，例如；因此，请直接在此行下面输入以下内容：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The default is in ascending order, from small to big, and you want to reverse
    that. When you throw in the `descending` keyword, then it goes from big to small.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下是按升序排列的，从小到大，您希望将其反转。当您加入`descending`关键字时，它就会从大到小排列。
- en: 'Next, remember the objective is to get an `IEnumerable` construct of strings
    filled with strings. So, finally, enter the following as part of this block:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，记住目标是获得一个填充有字符串的`IEnumerable`构造。因此，最后，请在此代码块的一部分中输入以下内容：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can also format the results in place, as I've done in this line, for example,
    in currency format.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在原地格式化结果，就像我在这一行中所做的那样，例如，以货币格式。
- en: Displaying the results
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示结果
- en: 'With this block of code in place, the next stage, of course, is to iterate
    over this and display the results. For this, you can go with a conversion to a
    list and print, or you can just do the following next:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个代码块，当然，下一阶段是迭代并显示结果。为此，您可以进行转换为列表并打印，或者您可以接下来做以下操作：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How do we know that we should say `string` in this line? Remember that the preceding
    `IEnumerable` line is filled with strings, correct? If you hover your mouse over
    `IEnumerable`, it says `IEnumerable<out T>`, and `T` is string.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们怎么知道在这一行中应该说`string`？记住，前面的`IEnumerable`行填充有字符串，对吗？如果您将鼠标悬停在`IEnumerable`上，它会说`IEnumerable<out
    T>`，而`T`是字符串。
- en: 'Now, to display the results, enter the following between a set of curly braces
    beneath the preceding line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了显示结果，请在上一行下面的一对大括号之间输入以下内容：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `formattedSalary` is what is to be displayed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`formattedSalary`是要显示的内容。
- en: 'Now, crank this up in your browser. Click on the Show button. The results appear,
    as shown in *Figure 11.6.3*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中打开此内容。单击显示按钮。结果将显示如*图11.6.3*所示：
- en: '![](img/6e88179b-abdd-4c82-9165-450db2f5d507.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e88179b-abdd-4c82-9165-450db2f5d507.png)'
- en: 'Figure 11.6.3: The initial results of running the program'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6.3：运行程序的初始结果
- en: The salaries here are sorted in descending order, from highest to lowest, and
    they fall within the $75,000 to $35,000 range. So, that's working as expected.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的工资按降序排列，从高到低，并且在75000美元到35000美元的范围内。所以，这正如预期的那样工作。
- en: Observing deferred execution
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察延迟执行
- en: Now, one thing that you should be aware of is the concept called *deferred execution*.
    So, to see what that means, take a look at what follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该知道的一件事是所谓的*延迟执行*的概念。所以，为了了解这意味着什么，看看接下来的内容。
- en: Imagine that I place a break point right at the `foreach(string formattedSalary
    in salResults)` line. Then, select Step Into from the Debug menu and click on
    the Show button. Note how each line runs consecutively (the elapsed time in ms
    appears after each line). You should see how it's going into it; how it's running.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，我在`foreach(string formattedSalary in salResults)`行右边放了一个断点。然后，从调试菜单中选择单步执行，并点击显示按钮。注意每一行是如何连续运行的（每行后面都会显示毫秒数）。你应该看到它是如何进入的；它是如何运行的。
- en: 'One thing that you should be aware of with LINQ is the concept of deferred
    execution, which means that, `salResults` actually runs, as you can see, so it''s
    a query variable essentially. It runs when you iterate over it using a `foreach`
    construct, as shown in the following code block, not when you write it in the
    preceding `IEnumerable` block. It doesn''t run then. It runs when you iterate
    over it. Otherwise, your program will potentially carry huge amounts of information
    in these query results. So, that''s about deferred execution:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意的一件事是LINQ的延迟执行的概念，这意味着`salResults`实际上是运行的，正如你所看到的，所以它本质上是一个查询变量。它在你使用`foreach`循环迭代时运行，就像下面的代码块中所示的那样，而不是在你在前面的`IEnumerable`块中编写时运行。它不会在那时运行。它会在你迭代它时运行。否则，你的程序可能会在这些查询结果中携带大量信息。所以，这就是延迟执行的内容：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the next stage, we''ll take a look at another practical example of what
    you might be able to do. We also want to display horizontal lines, so enter the
    following after the closed curly brace below the `sampLabel.Text += formattedSalary`
    line:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，我们将看一个可能能做的另一个实际例子。我们还想显示水平线，所以在`sampLabel.Text += formattedSalary`行下面的闭合大括号之后，输入以下内容：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `<hr/>` tag will add a horizontal line to the output.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`<hr/>`标签将在输出中添加一条水平线。'
- en: Making a dictionary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个字典
- en: 'Next, we''ll make a `Dictionary`; for this, enter the following line next:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`Dictionary`；为此，请在下面输入以下行：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, `<string,decimal>` represents the key-value pairs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`<string,decimal>`代表键值对。
- en: Working with key-value pairs
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理键值对
- en: 'Now, let''s add some key-value pairs. So, start by entering the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一些键值对。所以，从输入以下内容开始：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this line, `John Jones` is the key and the value is his salary or $45,355.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，`John Jones`是键，值是他的薪水，或者$45,355。
- en: 'Then, you can repeat this a couple of times, so copy and paste this line three
    more times directly underneath it. Say, John Smith, 76900; John Jenkins, 89000;
    and Steve Jobs, 98000:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以重复这个几次，所以直接在它下面再粘贴这一行三次。比如，约翰·史密斯，76900；约翰·詹金斯，89000；史蒂夫·乔布斯，98000：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that I repeated the name *John* here a couple of times, because I wanted
    to illustrate a concept shortly. The last one listed is *Steve Jobs* and of course
    his salary was much more than 98000!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在这里重复了名字*约翰*几次，因为我想简要说明一个概念。最后一个列出的是*史蒂夫·乔布斯*，当然他的薪水远远超过了98000！
- en: Querying the data in the key-value pairs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询键值对中的数据
- en: 'Now, again we will query this. This is the data that we have in key-value pairs
    and we''ll query it. So, enter the following below these lines:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将再次查询这个。这是我们在键值对中拥有的数据，我们将对其进行查询。所以，在这些行下面输入以下内容：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `nameSalary` is a range variable, which refers to John Jones, John Smith,
    John Jenkins, Steve Jobs, and so on, and `nameSalaries` is the dictionary itself.
    `nameSalary` is the particular combination of a key and a value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`nameSalary`是一个范围变量，它指的是约翰·琼斯、约翰·史密斯、约翰·詹金斯、史蒂夫·乔布斯等等，而`nameSalaries`是字典本身。`nameSalary`是键和值的特定组合。
- en: 'Next, underneath this line, indent the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这一行下面，缩进以下代码：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here we''re saying where the key contains the name John, and the salary is
    greater than or equal to $65,000\. If you wanted to, you could add `OrderBy` and
    so on, but for our purposes, enter the following directly below this line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说键包含名字约翰，薪水大于或等于$65,000。如果你愿意，你可以添加`OrderBy`等等，但对于我们的目的，直接在这一行下面输入以下内容：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this line, we will select those records that apply in the case of these
    two conditions: the name is John and the salary exceeds $65,000\. So, in our case,
    that would definitely be John Smith and John Jenkins. To format the output so
    that it looks good, we say `nameSalary.Value:C` to format it as currency and then
    add `per year`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行中，我们将选择那些符合这两个条件的记录：姓名是约翰，薪水超过$65,000。所以，在我们的情况下，肯定是约翰·史密斯和约翰·詹金斯。为了使输出看起来好看，我们说`nameSalary.Value:C`以货币格式化，然后添加`per
    year`。
- en: 'Now, hover your mouse over `dictResults`. Do you see where it says `IEnumerable`
    in the tooltip popup? Now, `var` is called *implicit typing*. We''ve seen `var`
    before. Sometimes it''s difficult to tell what the output will be from a query
    like the one we created, which is sufficiently complicated. So, if you do implicit
    typing, it tells you what the output should be, so `IEnumerable` of the `string`
    type. Now if you wanted to, you can change this line as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将鼠标悬停在`dictResults`上。你看到弹出提示中说`IEnumerable`吗？现在，`var`被称为*隐式类型*。我们之前见过`var`。有时很难从像我们创建的这样的查询中判断输出会是什么，因为它足够复杂。所以，如果你使用隐式类型，它会告诉你输出应该是什么，所以是`string`类型的`IEnumerable`。现在，如果你愿意，你可以将这一行改为：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we also know this because at the end of this query, you see that there
    are strings, correct? These are strings that include formatting information and
    now, of course, you can iterate over this as usual; so, enter the following next:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们也知道这一点，因为在这个查询的末尾，你看到了字符串，对吧？这些是包含格式化信息的字符串，当然，你可以像往常一样迭代它们；所以，接下来输入以下内容：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, between a set of curly braces under this line, finish with the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这一行下面的一对大括号之间，以以下内容结束：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Running the program
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Run this in your browser to make sure that it''s working as expected. Click
    on the Show button. The results are shown in *Figure 11.6.4*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行这个，确保它按预期工作。点击显示按钮。结果显示在*图11.6.4*中：
- en: '![](img/3a14c5ac-533f-4199-a81f-eb700c65164b.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a14c5ac-533f-4199-a81f-eb700c65164b.png)'
- en: 'Figure 11.6.4: The results of running our program'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6.4：运行我们程序的结果
- en: Now you've got the first results that I described earlier and the second set
    of results are displayed below them, showing that both names contain John and
    the amounts are $65,000 or more.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经得到了我之前描述的第一组结果，第二组结果显示在它们下面，显示两个名字都包含John，金额为$65,000或更多。
- en: Chapter review
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为回顾，包括注释的本章`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to write queries using query syntax. You created
    a decimal salary array, worked with range variables, observed deferred execution,
    made a dictionary, worked with key-value pairs, queried the data in the key-value
    pairs, and learned about implicit typing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何使用查询语法编写查询。你创建了一个十进制薪水数组，使用了范围变量，观察了延迟执行，创建了一个字典，使用了键值对，查询了键值对中的数据，并学习了隐式类型。
- en: In the next chapter, we will explore LINQ further. Specifically, we'll take
    a look at some of the power of LINQ to perform aggregation functions, such as
    averaging, summation, and counting. Also, we'll talk about lists of lists, which
    are very practical thing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步探讨LINQ。具体来说，我们将研究LINQ的一些强大功能，如平均、求和和计数等聚合函数。此外，我们还将讨论列表的列表，这是非常实用的东西。
