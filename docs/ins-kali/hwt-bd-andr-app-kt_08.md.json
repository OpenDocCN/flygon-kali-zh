["```kt\nimplementation \"androidx.work:work-runtime:2.4.0\"\n```", "```kt\nclass CatStretchingWorker(\n\u00a0\u00a0\u00a0\u00a0context: Context,\n\u00a0\u00a0\u00a0\u00a0workerParameters: WorkerParameters\n) : Worker(context, workerParameters) {\n\u00a0\u00a0\u00a0\u00a0override fun doWork(): Result {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val catAgentId = inputData.getString(INPUT_DATA_CAT_AGENT_ID)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.sleep(3000L)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val outputData = Data.Builder()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.putString(OUTPUT_DATA_CAT_AGENT_ID, catAgentId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Result.success(outputData)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0companion object {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const val INPUT_DATA_CAT_AGENT_ID = \"id\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const val OUTPUT_DATA_CAT_AGENT_ID = \"id\"\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\nval catStretchingInputData = Data.Builder()\n\u00a0\u00a0.putString(CatStretchingWorker.INPUT_DATA_CAT_AGENT_ID, \n\u00a0\u00a0\u00a0\u00a0\"catAgentId\").build()\nval catStretchingRequest = OneTimeWorkRequest\n\u00a0\u00a0.Builder(CatStretchingWorker::class.java)\nval catStretchingRequest =   OneTimeWorkRequest.Builder(CatStretchingWorker::class.java)\n\u00a0\u00a0\u00a0\u00a0.setConstraints(networkConstraints)\n\u00a0\u00a0\u00a0\u00a0.setInputData(catStretchingInputData)\n\u00a0\u00a0\u00a0\u00a0.build()\n...\nWorkManager.getInstance(this).beginWith(catStretchingRequest)\n\u00a0\u00a0\u00a0\u00a0.then(catFurGroomingRequest)\n\u00a0\u00a0\u00a0\u00a0.then(catLitterBoxSittingRequest)\n\u00a0\u00a0\u00a0\u00a0.then(catSuitUpRequest)\n\u00a0\u00a0\u00a0\u00a0.enqueue()\n```", "```kt\nworkManager.getWorkInfoByIdLiveData(catStretchingRequest.id)\n\u00a0\u00a0\u00a0\u00a0.observe(this, Observer { info ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (info.state.isFinished) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0doSomething()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0})\n```", "```kt\n    dependencies {\n    \u00a0\u00a0\u00a0\u00a0implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0WorkManager and its dependencies in your code.\n    ```", "```kt\n    package com.example.catagenttracker.worker\n    import android.content.Context\n    import androidx.work.Data\n    import androidx.work.Worker\n    import androidx.work.WorkerParameters\n    class CatStretchingWorker(\n    \u00a0\u00a0\u00a0\u00a0context: Context,\n    \u00a0\u00a0\u00a0\u00a0workerParameters: WorkerParameters\n    ) : Worker(context, workerParameters) {\n    \u00a0\u00a0\u00a0\u00a0override fun doWork(): Result {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val catAgentId = inputData.getString(INPUT_DATA_CAT_AGENT_ID)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.sleep(3000L)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val outputData = Data.Builder()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.putString(OUTPUT_DATA_CAT_AGENT_ID, catAgentId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Result.success(outputData)\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0companion object {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const val INPUT_DATA_CAT_AGENT_ID = \"inId\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const val OUTPUT_DATA_CAT_AGENT_ID = \"outId\"\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun getCatAgentIdInputData(catAgentIdKey: String,   catAgentIdValue: String) =\n    \u00a0\u00a0\u00a0\u00a0Data.Builder().putString(catAgentIdKey, catAgentIdValue)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n    ```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n    \u00a0\u00a0\u00a0\u00a0super.onCreate(savedInstanceState)\n    \u00a0\u00a0\u00a0\u00a0setContentView(R.layout.activity_main)\n    \u00a0\u00a0\u00a0\u00a0WorkManager class to wait for an internet connection before executing work. Then, you define your Cat Agent ID. Finally, you define four requests, passing in your Worker classes, the network constraints, and the Cat Agent ID in the form of input data.\n    ```", "```kt\n    private val workManager = WorkManager.getInstance(this)\n    ```", "```kt\n    val catSuitUpRequest =   OneTimeWorkRequest.Builder(CatSuitUpWorker::class.java)\n    \u00a0\u00a0\u00a0\u00a0.setConstraints(networkConstraints)\n    \u00a0\u00a0\u00a0\u00a0.setInputData(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getCatAgentIdInputData(CatSuitUpWorker           .INPUT_DATA_CAT_AGENT_ID, catAgentId)\n    \u00a0\u00a0\u00a0\u00a0).build()\n    WorkRequests are now enqueued to be executed in sequence when their constraints are met and the WorkManager class is ready to execute them.\n    ```", "```kt\n    private fun showResult(message: String) {\n    \u00a0\u00a0\u00a0\u00a0Toast.makeText(this, message, LENGTH_SHORT).show()\n    }\n    ```", "```kt\n    workManager.beginWith(catStretchingRequest)\n    \u00a0\u00a0\u00a0\u00a0.then(catFurGroomingRequest)\n    \u00a0\u00a0\u00a0\u00a0.then(catLitterBoxSittingRequest)\n    \u00a0\u00a0\u00a0\u00a0.then(catSuitUpRequest)\n    \u00a0\u00a0\u00a0\u00a0.enqueue()\n    WorkInfo observable provided by the WorkManager class for each WorkRequest. When each request is finished, a toast is shown with a relevant message.\n    ```", "```kt\nprivate fun onCreate() {\n\u00a0\u00a0\u00a0\u00a0val channelId = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val newChannelId = \"ChannelId\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val channelName = \"My Background Service\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val channel =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NotificationChannel(newChannelId, channelName,               NotificationManager.IMPORTANCE_DEFAULT)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val service = getSystemService(Context.NOTIFICATION_SERVICE) as           NotificationManager\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service.createNotificationChannel(channel)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newChannelId\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0val pendingIntent = Intent(this, MainActivity::class.java).let {       notificationIntent ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PendingIntent.getActivity(this, 0, notificationIntent, 0)\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0val notification = NotificationCompat.Builder(this, channelId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentTitle(\"Content title\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentText(\"Content text\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setSmallIcon(R.drawable.notification_icon)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentIntent(pendingIntent)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setTicker(\"Ticker message\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n\u00a0\u00a0\u00a0\u00a0startForeground(NOTIFICATION_ID, notificationBuilder.build())\n}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0val channelId = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val newChannelId = \"ChannelId\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val channelName = \"My Background Service\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val channel =\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NotificationChannel(newChannelId, channelName,               NotificationManager.IMPORTANCE_DEFAULT)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val service = getSystemService(Context.NOTIFICATION_SERVICE) as           NotificationManager\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service.createNotificationChannel(channel)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newChannelId\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0val pendingIntent = Intent(this, MainActivity::class.java).let {       notificationIntent ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PendingIntent.getActivity(this, 0, notificationIntent, 0)\n\u00a0\u00a0\u00a0\u00a0}\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0val notification = NotificationCompat.Builder(this, channelId)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentTitle(\"Content title\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentText(\"Content text\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setSmallIcon(R.drawable.notification_icon)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentIntent(pendingIntent)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setTicker(\"Ticker message\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.build()\n```", "```kt\n\u00a0\u00a0\u00a0\u00a0startForeground(NOTIFICATION_ID, notificationBuilder.build())\n```", "```kt\nclass ToastBroadcastReceiver : BroadcastReceiver() {\n\u00a0\u00a0\u00a0\u00a0override fun onReceive(context: Context, intent: Intent) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0StringBuilder().apply {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0append(\"Action: ${intent.action}\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0append(\"URI: ${intent.toUri(Intent.URI_INTENT_SCHEME)}\\n\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0toString().let { eventText ->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Toast.makeText(context, eventText,                   Toast.LENGTH_LONG).show()\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```kt\n<receiver android:name=\".ToastBroadcastReceiver\"\u00a0android:exported=\"true\">\n\u00a0\u00a0\u00a0\u00a0<intent-filter>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<action android:name=          \"android.intent.action.ACTION_POWER_CONNECTED\" />\n\u00a0\u00a0\u00a0\u00a0</intent-filter>\n</receiver>\n```", "```kt\nval filter = IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION).apply {\n\u00a0\u00a0\u00a0\u00a0addAction(Intent.ACTION_POWER_CONNECTED)\n}\nregisterReceiver(ToastBroadcastReceiver(), filter)\n```", "```kt\nDependencies {\n\u00a0\u00a0\u00a0\u00a0...\n\u00a0\u00a0\u00a0\u00a0implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0\"\n\u00a0\u00a0\u00a0\u00a0...\n}\n```", "```kt\ncompanion object {\n\u00a0\u00a0\u00a0\u00a0private val mutableWorkCompletion = MutableLiveData<String>()\n\u00a0\u00a0\u00a0\u00a0val workCompletion: LiveData<String> = mutableWorkCompletion\n}\n```", "```kt\n<application ...>\n\u00a0\u00a0\u00a0\u00a0<service android:name=\".ForegroundService\" />\n</application>\n```", "```kt\nval serviceIntent = Intent(this, ForegroundService::class.java).apply {\n\u00a0\u00a0\u00a0\u00a0putExtra(\"ExtraData\", \"Extra value\")\n}\n```", "```kt\n    implementation \"androidx.work:work-runtime:2.4.0\"\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0\"\n    ```", "```kt\n    class RouteTrackingService : Service() {\n    \u00a0\u00a0\u00a0\u00a0override fun onBind(intent: Intent): IBinder? = null\n    }\n    ```", "```kt\n    companion object {\n    \u00a0\u00a0\u00a0\u00a0const val NOTIFICATION_ID = 0xCA7\n    \u00a0\u00a0\u00a0\u00a0const val EXTRA_SECRET_CAT_AGENT_ID = \"scaId\"\n    \u00a0\u00a0\u00a0\u00a0private val mutableTrackingCompletion = MutableLiveData<String>()\n    \u00a0\u00a0\u00a0\u00a0val trackingCompletion: LiveData<String> = mutableTrackingCompletion\n    }\n    ```", "```kt\n    private fun getPendingIntent() =\n    \u00a0\u00a0\u00a0\u00a0PendingIntent.getActivity(this, 0, Intent(this,       MainActivity::class.java), 0)\n    ```", "```kt\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun createNotificationChannel(): String {\n    \u00a0\u00a0\u00a0\u00a0val channelId = \"routeTracking\"\n    \u00a0\u00a0\u00a0\u00a0val channelName = \"Route Tracking\"\n    \u00a0\u00a0\u00a0\u00a0val channel =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0NotificationChannel(channelId, channelName,           NotificationManager.IMPORTANCE_DEFAULT)\n    \u00a0\u00a0\u00a0\u00a0val service = getSystemService(Context.NOTIFICATION_SERVICE) as       NotificationManager\n    \u00a0\u00a0\u00a0\u00a0service.createNotificationChannel(channel)\n    \u00a0\u00a0\u00a0\u00a0return channelId\n    }\n    ```", "```kt\n    private fun getNotificationBuilder(pendingIntent: PendingIntent, channelId: String) =\n    \u00a0\u00a0\u00a0\u00a0NotificationCompat.Builder(this, channelId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentTitle(\"Agent approaching destination\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentText(\"Agent dispatched\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setSmallIcon(R.drawable.ic_launcher_foreground)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setContentIntent(pendingIntent)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.setTicker(\"Agent dispatched, tracking movement\")\n    ```", "```kt\n    private fun startForegroundService(): NotificationCompat.Builder {\n    \u00a0\u00a0\u00a0\u00a0val pendingIntent = getPendingIntent()\n    \u00a0\u00a0\u00a0\u00a0val channelId =       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0createNotificationChannel()\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0val notificationBuilder = getNotificationBuilder(pendingIntent,       channelId)\n    \u00a0\u00a0\u00a0\u00a0startForeground(NOTIFICATION_ID, notificationBuilder.build())\n    \u00a0\u00a0\u00a0\u00a0return notificationBuilder\n    }\n    ```", "```kt\n    private lateinit var notificationBuilder: NotificationCompat.Builder\n    private lateinit var serviceHandler: Handler\n    ```", "```kt\n    override fun onCreate() {\n    \u00a0\u00a0\u00a0\u00a0super.onCreate()\n    \u00a0\u00a0\u00a0\u00a0notificationBuilder = startForegroundService()\n    \u00a0\u00a0\u00a0\u00a0val handlerThread = HandlerThread(\"RouteTracking\").apply {        start() \n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0serviceHandler = Handler(handlerThread.looper)\n    }\n    ```", "```kt\n    private fun trackToDestination(notificationBuilder:   NotificationCompat.Builder) {\n    \u00a0\u00a0\u00a0\u00a0for (i in 10 downTo 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread.sleep(1000L)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0notificationBuilder           .setContentText(\"$i seconds to destination\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0startForeground(NOTIFICATION_ID,           notificationBuilder.build())\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    private fun notifyCompletion(agentId: String) {\n    \u00a0\u00a0\u00a0\u00a0Handler(Looper.getMainLooper()).post {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mutableTrackingCompletion.value = agentId\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```kt\n    override fun onStartCommand(intent: Intent?, flags: Int,   startId: Int): Int {\n    \u00a0\u00a0\u00a0\u00a0val returnValue = super.onStartCommand(intent, flags, startId)\n    \u00a0\u00a0\u00a0\u00a0val agentId =       intent?.getStringExtra(EXTRA_SECRET_CAT_AGENT_ID)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0?: throw IllegalStateException(\"Agent ID must be provided\")\n    \u00a0\u00a0\u00a0\u00a0serviceHandler.post {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trackToDestination(notificationBuilder)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0notifyCompletion(agentId)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stopForeground(true)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stopSelf()\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return returnValue\n    }\n    ```", "```kt\n    <manifest ...>\n    \u00a0\u00a0\u00a0\u00a0FOREGROUND_SERVICE permission. Unless we do so, the system will block our app from using foreground services. Next, we declare the service. Setting android:enabled=\"true\" tells the system it can instantiate the service. The default is \"true\", so this is optional. Defining the service with android:exported=\"true\" tells the system that other applications could start the service. In our case, we don't need this extra functionality, but we have added it just so that you are aware of this capability.\n    ```", "```kt\n    private fun launchTrackingService() {\n    \u00a0\u00a0\u00a0\u00a0RouteTrackingService.trackingCompletion.observe(this, Observer {       agentId ->\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showResult(\"Agent $agentId arrived!\")\n    \u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0val serviceIntent = Intent(this,       RouteTrackingService::class.java).apply {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0putExtra(EXTRA_SECRET_CAT_AGENT_ID, \"007\")\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0ContextCompat.startForegroundService(this, serviceIntent)\n    }\n    ```", "```kt\n    workManager.getWorkInfoByIdLiveData(catSuitUpRequest.id)\n    \u00a0\u00a0\u00a0\u00a0.observe(this, Observer { info ->\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (info.state.isFinished) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0showResult(\"Agent done suiting up. Ready to go!\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0launchTrackingService()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0})\n    ```"]