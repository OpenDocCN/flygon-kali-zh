["```cs\ntype[] name; \n```", "```cs\nint[] numbers;  \n```", "```cs\nnumbers = new int[5]; \n```", "```cs\nint[] numbers = new int[5]; \n```", "```cs\nnumbers[0] = 9; \nnumbers[1] = -11; (...) \nnumbers[4] = 1; \n```", "```cs\nint[] numbers = new int[] { 9, -11, 6, -12, 1 }; \nint[] numbers = { 9, -11, 6, -12, 1 };  \n```", "```cs\nint middle = numbers[2];\n```", "```cs\nstring[] months = new string[12]; \n\nfor (int month = 1; month <= 12; month++) \n{ \n    DateTime firstDay = new DateTime(DateTime.Now.Year, month, 1); \n    string name = firstDay.ToString(\"MMMM\",  \n        CultureInfo.CreateSpecificCulture(\"en\")); \n    months[month - 1] = name; \n} \n\nforeach (string month in months) \n{ \n    Console.WriteLine($\"-> {month}\"); \n} \n```", "```cs\n    -> January\n    -> February (...)\n    -> November\n    -> December\n```", "```cs\nint[,] numbers = new int[5, 2]; \n```", "```cs\nint[, ,] numbers = new int[5, 4, 3]; \n```", "```cs\nint[,] numbers = new int[,] = \n{ \n    { 9, 5, -9 }, \n    { -11, 4, 0 }, \n    { 6, 115, 3 }, \n    { -12, -9, 71 }, \n    { 1, -6, -1 } \n};\n```", "```cs\nint number = numbers[2][1]; \nnumbers[1][0] = 11; \n```", "```cs\n       1   2   3   4   5   6   7   8   9  10\n       2   4   6   8  10  12  14  16  18  20\n       3   6   9  12  15  18  21  24  27  30\n       4   8  12  16  20  24  28  32  36  40\n       5  10  15  20  25  30  35  40  45  50\n       6  12  18  24  30  36  42  48  54  60\n       7  14  21  28  35  42  49  56  63  70\n       8  16  24  32  40  48  56  64  72  80\n       9  18  27  36  45  54  63  72  81  90\n      10  20  30  40  50  60  70  80  90 100\n\n```", "```cs\nint[,] results = new int[10, 10];\n```", "```cs\nfor (int i = 0; i < results.GetLength(0); i++) \n{ \n    for (int j = 0; j < results.GetLength(1); j++) \n    { \n        results[i, j] = (i + 1) * (j + 1); \n    } \n} \n```", "```cs\nfor (int i = 0; i < results.GetLength(0); i++) \n{ \n    for (int j = 0; j < results.GetLength(1); j++) \n    { \n        Console.Write(\"{0,4}\", results[i, j]); \n    } \n    Console.WriteLine(); \n} \n```", "```cs\npublic enum TerrainEnum \n{ \n    GRASS, \n    SAND, \n    WATER, \n    WALL \n} \n```", "```cs\npublic static class TerrainEnumExtensions \n{ \n    public static ConsoleColor GetColor(this TerrainEnum terrain) \n    { \n        switch (terrain) \n        { \n            case TerrainEnum.GRASS: return ConsoleColor.Green; \n            case TerrainEnum.SAND: return ConsoleColor.Yellow; \n            case TerrainEnum.WATER: return ConsoleColor.Blue; \n            default: return ConsoleColor.DarkGray; \n        } \n    } \n\n    public static char GetChar(this TerrainEnum terrain) \n    { \n        switch (terrain) \n        { \n            case TerrainEnum.GRASS: return '\\u201c'; \n            case TerrainEnum.SAND: return '\\u25cb'; \n            case TerrainEnum.WATER: return '\\u2248'; \n            default: return '\\u25cf'; \n        } \n    } \n} \n```", "```cs\nTerrainEnum[,] map = \n{ \n    { TerrainEnum.SAND, TerrainEnum.SAND, TerrainEnum.SAND,  \n      TerrainEnum.SAND, TerrainEnum.GRASS, TerrainEnum.GRASS,  \n      TerrainEnum.GRASS, TerrainEnum.GRASS, TerrainEnum.GRASS,  \n      TerrainEnum.GRASS }, (...) \n    { TerrainEnum.WATER, TerrainEnum.WATER, TerrainEnum.WATER,  \n      TerrainEnum.WATER, TerrainEnum.WATER, TerrainEnum.WATER,  \n      TerrainEnum.WATER, TerrainEnum.WALL, TerrainEnum.WATER,  \n      TerrainEnum.WATER } \n}; \nConsole.OutputEncoding = UTF8Encoding.UTF8; \nfor (int row = 0; row < map.GetLength(0); row++) \n{ \n    for (int column = 0; column < map.GetLength(1); column++) \n    { \n        Console.ForegroundColor = map[row, column].GetColor(); \n        Console.Write(map[row, column].GetChar() + \" \"); \n    } \n    Console.WriteLine(); \n} \nConsole.ForegroundColor = ConsoleColor.Gray; \n```", "```cs\nint[][] numbers = new int[4][]; \nnumbers[0] = new int[] { 9, 5, -9 }; \nnumbers[1] = new int[] { 0, -3, 12, 51, -3 }; \nnumbers[3] = new int[] { 54 }; \n```", "```cs\nint[][] numbers = \n{ \n    new int[] { 9, 5, -9 }, \n    new int[] { 0, -3, 12, 51, -3 }, \n    NULL, \n    new int[] { 54 } \n}; \n```", "```cs\nint number = numbers[1][2]; \nnumber[1][3] = 50; \n```", "```cs\npublic enum TransportEnum \n{ \n    CAR, \n    BUS, \n    SUBWAY, \n    BIKE, \n    WALK \n} \n```", "```cs\npublic static class TransportEnumExtensions \n{ \n    public static char GetChar(this TransportEnum transport) \n    { \n        switch (transport) \n        { \n            case TransportEnum.BIKE: return 'B'; \n            case TransportEnum.BUS: return 'U'; \n            case TransportEnum.CAR: return 'C'; \n            case TransportEnum.SUBWAY: return 'S'; \n            case TransportEnum.WALK: return 'W'; \n            default: throw new Exception(\"Unknown transport\"); \n        } \n    }\n\n    public static ConsoleColor GetColor( \n        this TransportEnum transport) \n    { \n        switch (transport) \n        { \n            case TransportEnum.BIKE: return ConsoleColor.Blue; \n            case TransportEnum.BUS: return ConsoleColor.DarkGreen; \n            case TransportEnum.CAR: return ConsoleColor.Red; \n            case TransportEnum.SUBWAY:  \n                return ConsoleColor.DarkMagenta; \n            case TransportEnum.WALK:  \n                return ConsoleColor.DarkYellow; \n            default: throw new Exception(\"Unknown transport\"); \n        } \n    } \n} \n```", "```cs\nRandom random = new Random(); \nint transportTypesCount =  \n    Enum.GetNames(typeof(TransportEnum)).Length; \nTransportEnum[][] transport = new TransportEnum[12][]; \nfor (int month = 1; month <= 12; month++) \n{ \n    int daysCount = DateTime.DaysInMonth( \n        DateTime.Now.Year, month); \n    transport[month - 1] = new TransportEnum[daysCount]; \n    for (int day = 1; day <= daysCount; day++) \n    { \n        int randomType = random.Next(transportTypesCount); \n        transport[month - 1][day - 1] = (TransportEnum)randomType; \n    } \n} \n```", "```cs\nstring[] monthNames = GetMonthNames(); \nint monthNamesPart = monthNames.Max(n => n.Length) + 2; \nfor (int month = 1; month <= transport.Length; month++) \n{ \n    Console.Write( \n        $\"{monthNames[month - 1]}:\".PadRight(monthNamesPart)); \n    for (int day = 1; day <= transport[month - 1].Length; day++) \n    { \n        Console.ForegroundColor = ConsoleColor.White; \n        Console.BackgroundColor =  \n            transport[month - 1][day - 1].GetColor(); \n        Console.Write(transport[month - 1][day - 1].GetChar()); \n        Console.BackgroundColor = ConsoleColor.Black; \n        Console.ForegroundColor = ConsoleColor.Gray; \n        Console.Write(\" \"); \n    } \n    Console.WriteLine(); \n} \n```", "```cs\nprivate static string[] GetMonthNames() \n{ \n    string[] names = new string[12]; \n    for (int month = 1; month <= 12; month++) \n    { \n        DateTime firstDay = new DateTime( \n            DateTime.Now.Year, month, 1); \n        string name = firstDay.ToString(\"MMMM\",  \n            CultureInfo.CreateSpecificCulture(\"en\")); \n        names[month - 1] = name; \n    } \n    return names; \n} \n```", "```cs\npublic static class SelectionSort \n{ \n    public static void Sort<T>(T[] array) where T : IComparable \n    { \n        for (int i = 0; i < array.Length - 1; i++) \n        { \n            int minIndex = i; \n            T minValue = array[i]; \n            for (int j = i + 1; j < array.Length; j++) \n            { \n                if (array[j].CompareTo(minValue) < 0) \n                { \n                    minIndex = j; \n                    minValue = array[j]; \n                } \n            } \n            Swap(array, i, minIndex); \n        } \n    } (...) \n} \n```", "```cs\nprivate static void Swap<T>(T[] array, int first, int second) \n{ \n    T temp = array[first]; \n    array[first] = array[second]; \n    array[second] = temp; \n} \n```", "```cs\nint[] integerValues = { -11, 12, -42, 0, 1, 90, 68, 6, -9 }; \nSelectionSort.Sort(integerValues); \nConsole.WriteLine(string.Join(\" | \", integerValues)); \n```", "```cs\n    -42 | -11 | -9 | 0 | 1 | 6 | 12 | 68 | 90\n```", "```cs\nstring[] stringValues = { \"Mary\", \"Marcin\", \"Ann\", \"James\",  \n    \"George\", \"Nicole\" }; \nSelectionSort.Sort(stringValues); \nConsole.WriteLine(string.Join(\" | \", stringValues)); \n```", "```cs\n    Ann | George | James | Marcin | Mary | Nicole\n```", "```cs\npublic static class InsertionSort \n{ \n    public static void Sort<T>(T[] array) where T : IComparable \n    { \n        for (int i = 1; i < array.Length; i++) \n        { \n            int j = i; \n            while (j > 0 && array[j].CompareTo(array[j - 1]) < 0) \n            { \n                Swap(array, j, j - 1); \n                j--; \n            } \n        } \n    } (...) \n} \n```", "```cs\npublic static class BubbleSort \n{ \n    public static void Sort<T>(T[] array) where T : IComparable \n    { \n        for (int i = 0; i < array.Length; i++) \n        { \n            for (int j = 0; j < array.Length - 1; j++) \n            { \n                if (array[j].CompareTo(array[j + 1]) > 0) \n                { \n                    Swap(array, j, j + 1); \n                } \n            } \n        } \n    } (...) \n} \n```", "```cs\npublic static T[] Sort<T>(T[] array) where T : IComparable \n{ \n    for (int i = 0; i < array.Length; i++) \n    { \n        bool isAnyChange = false; \n        for (int j = 0; j < array.Length - 1; j++) \n        { \n            if (array[j].CompareTo(array[j + 1]) > 0) \n            { \n                isAnyChange = true; \n                Swap(array, j, j + 1); \n            } \n        } \n\n        if (!isAnyChange) \n        { \n            break; \n        } \n    } \n    return array; \n} \n```", "```cs\npublic static class QuickSort \n{ \n    public static void Sort<T>(T[] array) where T : IComparable \n    { \n        Sort(array, 0, array.Length - 1); \n    } (...) \n} \n```", "```cs\nprivate static T[] Sort<T>(T[] array, int lower, int upper)  \n    where T : IComparable \n{ \n    if (lower < upper) \n    { \n        int p = Partition(array, lower, upper); \n        Sort(array, lower, p); \n        Sort(array, p + 1, upper); \n    } \n    return array; \n}\n```", "```cs\nprivate static int Partition<T>(T[] array, int lower, int upper)  \n    where T : IComparable \n{ \n    int i = lower; \n    int j = upper; \n    T pivot = array[lower]; \n    // or: T pivot = array[(lower + upper) / 2]; \n    do \n    { \n        while (array[i].CompareTo(pivot) < 0) { i++; } \n        while (array[j].CompareTo(pivot) > 0) { j--; } \n        if (i >= j) { break; } \n        Swap(array, i, j); \n    } \n    while (i <= j); \n    return j; \n} \n```", "```cs\nArrayList arrayList = new ArrayList(); \narrayList.Add(5); \narrayList.AddRange(new int[] { 6, -7, 8 }); \narrayList.AddRange(new object[] { \"Marcin\", \"Mary\" }); \narrayList.Insert(5, 7.8); \n```", "```cs\nobject first = arrayList[0]; \nint third  = (int)arrayList[2]; \n```", "```cs\nforeach (object element in arrayList) \n{ \n    Console.WriteLine(element); \n} \n```", "```cs\nint count = arrayList.Count; \nint capacity = arrayList.Capacity; \n```", "```cs\nbool containsMary = arrayList.Contains(\"Mary\"); \n```", "```cs\nint minusIndex = arrayList.IndexOf(-7); \n```", "```cs\narrayList.Remove(5); \n```", "```cs\nList<double> numbers = new List<double>(); \ndo \n{ \n    Console.Write(\"Enter the number: \"); \n    string numberString = Console.ReadLine(); \n    if (!double.TryParse(numberString, NumberStyles.Float,  \n        new NumberFormatInfo(), out double number)) \n    { \n        break; \n    } \n\n    numbers.Add(number); \n    Console.WriteLine($\"The average value: {numbers.Average()}\"); \n} \nwhile (true); \n```", "```cs\n    Enter the number: 10.5\n    The average value: 10.5 (...)\n    Enter the number: 1.5\n    The average value: 4.875\n```", "```cs\npublic class Person \n{ \n    public string Name { get; set; } \n    public int Age { get; set; } \n    public CountryEnum Country { get; set; } \n} \n```", "```cs\npublic enum CountryEnum \n{ \n    PL, \n    UK, \n    DE \n} \n```", "```cs\nList<Person> people = new List<Person>(); \npeople.Add(new Person() { Name = \"Marcin\",  \n    Country = CountryEnum.PL, Age = 29 });\npeople.Add(new Person() { Name = \"Sabine\",\n    Country = CountryEnum.DE, Age = 25 }); (...) \npeople.Add(new Person() { Name = \"Ann\",  \n    Country = CountryEnum.PL, Age = 31 }); \n```", "```cs\nList<Person> results = people.OrderBy(p => p.Name).ToList();\n```", "```cs\nforeach (Person person in results) \n{ \n    Console.WriteLine($\"{person.Name} ({person.Age} years)  \n        from {person.Country}.\"); \n} \n```", "```cs\n    Marcin (29 years) from PL. (...)\n    Sabine (25 years) from DE.\n\n```", "```cs\nList<string> names = people.Where(p => p.Age <= 30) \n    .OrderBy(p => p.Name) \n    .Select(p => p.Name) \n    .ToList();\n```", "```cs\nList<string> names = (from p in people \n                      where p.Age <= 30 \n                      orderby p.Name \n                      select p.Name).ToList(); \n```", "```cs\npublic class Person \n{ \n    public string Name { get; set; } \n    public int Age { get; set; } \n    public CountryEnum Country { get; set; } \n}\n```", "```cs\npublic enum CountryEnum \n{ \n    PL, \n    UK, \n    DE \n} \n```", "```cs\nSortedList<string, Person> people =  \n    new SortedList<string, Person>(); \n```", "```cs\npeople.Add(\"Marcin\", new Person() { Name = \"Marcin\",  \n    Country = CountryEnum.PL, Age = 29 });\npeople.Add(\"Sabine\", new Person() { Name = \"Sabine\", \n    Country = CountryEnum.DE, Age = 25 }); (...) \npeople.Add(\"Ann\", new Person() { Name = \"Ann\",  \n    Country = CountryEnum.PL, Age = 31 }); \n```", "```cs\nforeach (KeyValuePair<string, Person> person in people) \n{ \n    Console.WriteLine($\"{person.Value.Name} ({person.Value.Age}  \n        years) from {person.Value.Country}.\"); \n} \n```", "```cs\n    Ann (31 years) from PL. (...)\n    Marcin (29 years) from PL. (...)\n    Sabine (25 years) from DE.\n```", "```cs\npublic class Page \n{ \n    public string Content { get; set; } \n} \n```", "```cs\nPage pageFirst = new Page() { Content = \"Nowadays (...)\" }; \nPage pageSecond = new Page() { Content = \"Application (...)\" }; \nPage pageThird = new Page() { Content = \"A lot of (...)\" }; \nPage pageFourth = new Page() { Content = \"Do you know (...)\" }; \nPage pageFifth = new Page() { Content = \"While (...)\" }; \nPage pageSixth = new Page() { Content = \"Could you (...)\" }; \n```", "```cs\nLinkedList<Page> pages = new LinkedList<Page>(); \npages.AddLast(pageSecond); \nLinkedListNode<Page> nodePageFourth = pages.AddLast(pageFourth); \npages.AddLast(pageSixth); \npages.AddFirst(pageFirst); \npages.AddBefore(nodePageFourth, pageThird); \npages.AddAfter(nodePageFourth, pageFifth); \n```", "```cs\nLinkedListNode<Page> current = pages.First; \nint number = 1; \nwhile (current != null) \n{ \n    Console.Clear(); \n    string numberString = $\"- {number} -\"; \n    int leadingSpaces = (90 - numberString.Length) / 2; \n    Console.WriteLine(numberString.PadLeft(leadingSpaces  \n        + numberString.Length)); \n    Console.WriteLine(); \n\n    string content = current.Value.Content; \n    for (int i = 0; i < content.Length; i += 90) \n    { \n        string line = content.Substring(i); \n        line = line.Length > 90 ? line.Substring(0, 90) : line; \n        Console.WriteLine(line); \n    } \n\n    Console.WriteLine(); \n    Console.WriteLine($\"Quote from \"Windows Application  \n        Development Cookbook\" by Marcin  \n        Jamro,{Environment.NewLine}published by Packt Publishing  \n        in 2016.\"); \n\n    Console.WriteLine(); \n    Console.Write(current.Previous != null  \n        ? \"< PREVIOUS [P]\" : GetSpaces(14)); \n    Console.Write(current.Next != null  \n        ? \"[N] NEXT >\".PadLeft(76) : string.Empty); \n    Console.WriteLine(); \n\n    switch (Console.ReadKey(true).Key) \n    { \n        case ConsoleKey.N: \n            if (current.Next != null) \n            { \n                current = current.Next; \n                number++; \n            } \n            break; \n        case ConsoleKey.P: \n            if (current.Previous != null) \n            { \n                current = current.Previous; \n                number--; \n            } \n            break; \n        default: \n            return; \n    } \n} \n```", "```cs\nprivate static string GetSpaces(int number) \n{ \n    string result = string.Empty; \n    for (int i = 0; i < number; i++) \n    { \n        result += \" \"; \n    } \n    return result; \n} \n```", "```cs\npublic class CircularLinkedList<T> : LinkedList<T> \n{ \n    public new IEnumerator GetEnumerator() \n    { \n        return new CircularLinkedListEnumerator<T>(this); \n    } \n} \n```", "```cs\npublic class CircularLinkedListEnumerator<T> : IEnumerator<T> \n{ \n    private LinkedListNode<T> _current; \n    public T Current => _current.Value; \n    object IEnumerator.Current => Current; \n\n    public CircularLinkedListEnumerator(LinkedList<T> list) \n    { \n        _current = list.First; \n    } \n\n    public bool MoveNext() \n    { \n        if (_current == null) \n        { \n            return false; \n        } \n\n        _current = _current.Next ?? _current.List.First; \n        return true; \n    } \n\n    public void Reset() \n    { \n        _current = _current.List.First; \n    } \n\n    public void Dispose() { } \n} \n```", "```cs\npublic static class CircularLinkedListExtensions \n{ \n    public static LinkedListNode<T> Next<T>( \n        this LinkedListNode<T> node) \n    { \n        if (node != null && node.List != null) \n        { \n            return node.Next ?? node.List.First; \n        } \n        return null; \n    } \n\n    public static LinkedListNode<T> Previous<T>( \n        this LinkedListNode<T> node) \n    { \n        if (node != null && node.List != null) \n        { \n            return node.Previous ?? node.List.Last; \n        } \n        return null; \n    } \n} \n```", "```cs\nCircularLinkedList<string> categories =  \n    new CircularLinkedList<string>(); \ncategories.AddLast(\"Sport\"); \ncategories.AddLast(\"Culture\"); \ncategories.AddLast(\"History\"); \ncategories.AddLast(\"Geography\"); \ncategories.AddLast(\"People\"); \ncategories.AddLast(\"Technology\"); \ncategories.AddLast(\"Nature\"); \ncategories.AddLast(\"Science\"); \n```", "```cs\nRandom random = new Random(); \nint totalTime = 0; \nint remainingTime = 0; \nforeach (string category in categories) \n{ \n    if (remainingTime <= 0) \n    { \n        Console.WriteLine(\"Press [Enter] to start  \n            or any other to exit.\"); \n        switch (Console.ReadKey().Key) \n        { \n            case ConsoleKey.Enter: \n                totalTime = random.Next(1000, 5000); \n                remainingTime = totalTime; \n                break; \n            default: \n                return; \n        } \n    } \n\n    int categoryTime = (-450 * remainingTime) / (totalTime - 50)  \n        + 500 + (22500 / (totalTime - 50)); \n    remainingTime -= categoryTime; \n    Thread.Sleep(categoryTime); \n\n    Console.ForegroundColor = remainingTime <= 0  \n        ? ConsoleColor.Red : ConsoleColor.Gray; \n    Console.WriteLine(category); \n    Console.ForegroundColor = ConsoleColor.Gray; \n} \n```", "```cs\n    Press [Enter] to start or any other to exit.\n    Culture\n    History\n    Geography (...)\n    Culture\n    History\n    Press [Enter] to start or any other to exit.\n    Geography (...)\n    Nature\n    Science (...)\n    People\n    Technology\n    Press [Enter] to start or any other to exit.\n```"]