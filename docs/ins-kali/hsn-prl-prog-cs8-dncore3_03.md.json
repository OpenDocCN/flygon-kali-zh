["```cs\nusing System.Threading.Tasks;\n```", "```cs\nTask task = new Task (() => PrintNumber10Times ());\ntask.Start();\n```", "```cs\nTask task = new Task (new Action (PrintNumber10Times));\ntask.Start();\n```", "```cs\nTask task = new Task (delegate {PrintNumber10Times ();});\ntask.Start();\n```", "```cs\nTask.Factory.StartNew(() => PrintNumber10Times());          \n```", "```cs\nTask.Factory.StartNew(new Action( PrintNumber10Times));\n```", "```cs\n Task.Factory.StartNew(delegate { PrintNumber10Times(); });\n```", "```cs\nTask.Run(() => PrintNumber10Times ());\n```", "```cs\nTask.Run(new Action (PrintNumber10Times));\n```", "```cs\nTask.Run(delegate {PrintNumber10Times ();});\n```", "```cs\nConsole.WriteLine(\"What is the output of 20/2\\. We will show result in 2 seconds.\");\nTask.Delay(2000);\nConsole.WriteLine(\"After 2 seconds delay\");\nConsole.WriteLine(\"The output is 10\");\n```", "```cs\nawait Task.Factory.StartNew(() => {},\n    CancellationToken.None,\n    TaskCreationOptions.None,\n    SynchronizationContext.Current != null?\n    TaskScheduler.FromCurrentSynchronizationContext():\n    TaskScheduler.Current);\n```", "```cs\nprivate async static void TaskYield()\n{\n     for (int i = 0; i < 100000; i++)\n     {\n        Console.WriteLine(i);\n        if (i % 1000 == 0)\n        await Task.Yield();\n     }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    StaticTaskFromResultUsingLambda();\n}\nprivate static void StaticTaskFromResultUsingLambda()\n{\n    Task<int> resultTask = Task.FromResult<int>( Sum(10));\n    Console.WriteLine(resultTask.Result);\n}\nprivate static int Sum (int n)\n{\n    int sum=0;\n    for (int i = 0; i < 10; i++)\n    {\n        sum += i;\n    }\n    return sum;\n}\n```", "```cs\nreturn Task.FromException<long>(\nnew FileNotFoundException(\"Invalid File name.\"));\n```", "```cs\nCancellationTokenSource source = new CancellationTokenSource();\nvar token = source.Token;\nsource.Cancel();\nTask task = Task.FromCanceled(token);\nTask<int> canceledTask = Task.FromCanceled<int>(token);\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nnamespace Ch02\n{\n    class _2GettingResultFromTasks\n    {\n        static void Main(string[] args)\n        {\n            GetResultsFromTasks();\n            Console.ReadLine();\n        }\n        private static void GetResultsFromTasks()\n        {\n            var sumTaskViaTaskOfInt = new Task<int>(() => Sum(5));\n            sumTaskViaTaskOfInt.Start();\n            Console.WriteLine($\"Result from sumTask is\n             {sumTaskViaTaskOfInt.Result}\" );\n            var sumTaskViaFactory = Task.Factory.StartNew<int>(() => \n             Sum(5));\n            Console.WriteLine($\"Result from sumTask is \n             {sumTaskViaFactory.Result}\");\n            var sumTaskViaTaskRun = Task.Run<int>(() => Sum(5));\n            Console.WriteLine($\"Result from sumTask is \n             {sumTaskViaTaskRun.Result}\");\n            var sumTaskViaTaskResult = Task.FromResult<int>(Sum(5));\n            Console.WriteLine($\"Result from sumTask is \n             {sumTaskViaTaskResult.Result}\");\n        }\n        private static int Sum(int n)\n        {\n            int sum = 0;\n            for (int i = 0; i < n; i++)\n            {\n                sum += i;\n            }\n            return sum;\n        }\n    }\n}\n```", "```cs\nCancellationTokenSource tokenSource = new CancellationTokenSource();\nCancellationToken token = tokenSource.Token;\n```", "```cs\nvar sumTaskViaTaskOfInt = new Task<int>(() => Sum(5), token);\nvar sumTaskViaFactory = Task.Factory.StartNew<int>(() => Sum(5), token);\nvar sumTaskViaTaskRun = Task.Run<int>(() => Sum(5), token);\n```", "```cs\n        private static void CancelTaskViaPoll()\n        {\n            CancellationTokenSource cancellationTokenSource = \n             new CancellationTokenSource();\n            CancellationToken token = cancellationTokenSource.Token;\n            var sumTaskViaTaskOfInt = new Task(() => \n             LongRunningSum(token), token);\n            sumTaskViaTaskOfInt.Start();\n            //Wait for user to press key to cancel task\n            Console.ReadLine();\n            cancellationTokenSource.Cancel();\n        }\n        private static void LongRunningSum(CancellationToken token)\n        {\n            for (int i = 0; i < 1000; i++)\n            {\n                //Simulate long running operation\n                Task.Delay(100);\n                if (token.IsCancellationRequested)\n                    token.ThrowIfCancellationRequested();\n            }\n        }\n```", "```cs\nprivate static void DownloadFileWithoutToken()\n{\n    WebClient webClient = new WebClient();\n    webClient.DownloadStringAsync(new \n     Uri(\"http://www.google.com\"));\n    webClient.DownloadStringCompleted += (sender, e) => \n     {\n        if (!e.Cancelled)\n          Console.WriteLine(\"Download Complete.\");\n        else\n          Console.WriteLine(\"Download Cancelled.\");\n     };\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    CancellationTokenSource cancellationTokenSource = new \n     CancellationTokenSource();\n    CancellationToken token = cancellationTokenSource.Token;\n    DownloadFileWithToken(token);\n    //Random delay before we cancel token\n    Task.Delay(2000);\n    cancellationTokenSource.Cancel();\n    Console.ReadLine();\n }\nprivate static void DownloadFileWithToken(CancellationToken token)\n{    \n    WebClient webClient = new WebClient();\n    //Here we are registering callback delegate that will get called \n    //as soon as user cancels token\n    token.Register(() => webClient.CancelAsync());\n    webClient.DownloadStringAsync(new \n     Uri(\"http://www.google.com\"));\n    webClient.DownloadStringCompleted += (sender, e) => {\n    //Wait for 3 seconds so we have enough time to cancel task\n    Task.Delay(3000);\n    if (!e.Cancelled)\n        Console.WriteLine(\"Download Complete.\");\n    else\n    Console.WriteLine(\"Download Cancelled.\");};\n}\n```", "```cs\n// Create the token source.\nCancellationTokenSource cts = new CancellationTokenSource();\n// Pass the token to the cancellable operation.\nThreadPool.QueueUserWorkItem(new WaitCallback(DoSomething), cts.Token);\n```", "```cs\nvar task = Task.Factory.StartNew(() => Console.WriteLine(\"Inside Thread\"));\n//Blocks the current thread until task finishes.\ntask.Wait();\n```", "```cs\n    Task taskA = Task.Factory.StartNew(() => \n     Console.WriteLine(\"TaskA finished\"));\n    Task taskB = Task.Factory.StartNew(() => \n     Console.WriteLine(\"TaskB finished\"));\n    Task.WaitAll(taskA, taskB);\n    Console.WriteLine(\"Calling method finishes\");\n```", "```cs\nTask taskA = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskA finished\"));\nTask taskB = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskB finished\"));\nTask.WaitAny(taskA, taskB);\nConsole.WriteLine(\"Calling method finishes\");\n```", "```cs\nTask taskA = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskA finished\"));\nTask taskB = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskB finished\"));\nTask.WhenAll(taskA, taskB);\nConsole.WriteLine(\"Calling method finishes\");\n```", "```cs\nTask taskA = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskA finished\"));\nTask taskB = Task.Factory.StartNew(() => \n Console.WriteLine(\"TaskB finished\"));\nTask.WhenAny(taskA, taskB);\nConsole.WriteLine(\"Calling method finishes\");\n```", "```cs\nclass _4HandlingExceptions\n{\n    static void Main(string[] args)\n    {\n        Task task = null;\n         try\n           {\n                task = Task.Factory.StartNew(() =>\n                {\n                    int num = 0, num2 = 25;\n                    var result = num2 / num;\n                });\n            task.Wait();\n        }\n        catch (AggregateException ex)\n        {\n            Console.WriteLine($\"Task has finished with \n             exception {ex.InnerException.Message}\");\n        }\n        Console.ReadLine();\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    Task taskA = Task.Factory.StartNew(()=> throw \n     new DivideByZeroException());\n    Task taskB = Task.Factory.StartNew(()=> throw \n     new ArithmeticException());\n    Task taskC = Task.Factory.StartNew(()=> throw \n     new NullReferenceException());\n    try\n    {\n        Task.WaitAll(taskA, taskB, taskC);\n    }\n    catch (AggregateException ex)\n    {\n        foreach (Exception innerException in ex.InnerExceptions)\n        {\n            Console.WriteLine(innerException.Message);\n        }\n    }\n    Console.ReadLine();\n}\n```", "```cs\nstatic void Main(string[] args)\n      {\n         Task taskA = Task.Factory.StartNew(() => throw \n          new DivideByZeroException());    \n         Task taskB = Task.Factory.StartNew(() => throw \n          new ArithmeticException());                       \n         Task taskC = Task.Factory.StartNew(() => throw \n          new NullReferenceException()); \n         try\n         {\n             Task.WaitAll(taskA, taskB, taskC);\n         }\n         catch (AggregateException ex)\n         {\n              ex.Handle(innerException =>\n              {\n                 Console.WriteLine(innerException.Message);\n                 return true; \n              });\n          }\n          Console.ReadLine();\n        }\n```", "```cs\nprivate static void ReadFileSynchronously()        \n{            \n    string path = @\"Test.txt\";\n    //Open the stream and read content.\n    using (FileStream fs = File.OpenRead(path))\n    {\n         byte[] b = new byte[1024];\n         UTF8Encoding encoder = new UTF8Encoding(true);\n         fs.Read(b, 0, b.Length);\n         Console.WriteLine(encoder.GetString(b));\n     }\n }\n```", "```cs\nprivate static void ReadFileUsingAPMAsyncWithoutCallback()\n        {\n            string filePath = @\"Test.txt\";\n            //Open the stream and read content.\n            using (FileStream fs = new FileStream(filePath, \n             FileMode.Open, FileAccess.Read, FileShare.Read, \n             1024, FileOptions.Asynchronous))\n            {\n                byte[] buffer = new byte[1024];\n                UTF8Encoding encoder = new UTF8Encoding(true);\n                IAsyncResult result = fs.BeginRead(buffer, 0, \n                 buffer.Length, null, null);\n                Console.WriteLine(\"Do Something here\");\n                int numBytes = fs.EndRead(result);\n                fs.Close();\n                Console.WriteLine(encoder.GetString(buffer));\n            }\n        }\n```", "```cs\npublic override IAsyncResult BeginRead(\n        byte[] array,\n        int offset,\n        int numBytes,\n        AsyncCallback userCallback,\n        object stateObject)\n```", "```cs\nprivate static void ReadFileUsingTask()\n        {\n            string filePath = @\"Test.txt\";\n            //Open the stream and read content.\n            using (FileStream fs = new FileStream(filePath, FileMode.Open, \n             FileAccess.Read, FileShare.Read, 1024, \n             FileOptions.Asynchronous))\n            {\n                byte[] buffer = new byte[1024];\n                UTF8Encoding encoder = new UTF8Encoding(true);\n                //Start task that will read file asynchronously\n                var task = Task<int>.Factory.FromAsync(fs.BeginRead, \n                 fs.EndRead, buffer, 0, buffer.Length,null);\n                Console.WriteLine(\"Do Something while file is read \n                  asynchronously\");\n                //Wait for task to finish\n                task.Wait();\n                Console.WriteLine(encoder.GetString(buffer));\n            }\n        }\n```", "```cs\n  private static void EAPImplementation()\n        {\n            var webClient = new WebClient();\n            webClient.DownloadStringCompleted += (s, e) =>\n            {\n                if (e.Error != null)\n                    Console.WriteLine(e.Error.Message);\n                else if (e.Cancelled)\n                    Console.WriteLine(\"Download Cancel\");\n                else\n                    Console.WriteLine(e.Result);\n            };\n            webClient.DownloadStringAsync(new \n             Uri(\"http://www.someurl.com\"));\n        }\n```", "```cs\nprivate static Task<string> EAPToTask()\n        {\n            var taskCompletionSource = new TaskCompletionSource<string>();\n            var webClient = new WebClient();\n            webClient.DownloadStringCompleted += (s, e) =>\n            {\n                if (e.Error != null)\n                    taskCompletionSource.TrySetException(e.Error);\n                else if (e.Cancelled)\n                    taskCompletionSource.TrySetCanceled();\n                else\n                    taskCompletionSource.TrySetResult(e.Result);\n            };\n            webClient.DownloadStringAsync(new \n             Uri(\"http://www.someurl.com\"));\n            return taskCompletionSource.Task;\n        }\n```", "```cs\nvar task = Task.Factory.StartNew<DataTable>(() =>\n       {\n           Console.WriteLine(\"Fetching Data\");\n           return FetchData();\n       }).ContinueWith(\n           (e) => {\n               var firstRow = e.Result.Rows[0];\n               Console.WriteLine(\"Id is {0} and Name is {0}\", \n                firstRow[\"Id\"], firstRow[\"Name\"]);\n       });\n```", "```cs\n var task = Task.Factory.StartNew<int>(() => GetData()).\n             .ContinueWith((i) => GetMoreData(i.Result)).\n             .ContinueWith((j) => DisplayData(j.Result)));\n```", "```cs\n private async static void ContinueWhenAll()\n        {\n            int a = 2, b = 3;\n            Task<int> taskA = Task.Factory.StartNew<int>(() => a * a);\n            Task<int> taskB = Task.Factory.StartNew<int>(() => b * b);\n            Task<int> taskC = Task.Factory.StartNew<int>(() => 2 * a * b);\n            var sum = await Task.Factory.ContinueWhenAll<int>(new Task[] \n              { taskA, taskB, taskC }, (tasks)     \n              =>tasks.Sum(t => (t as Task<int>).Result));\n            Console.WriteLine(sum);\n        }\n```", "```cs\nprivate static void ContinueWhenAny()\n      {\n          int number = 13;\n          Task<bool> taskA = Task.Factory.StartNew<bool>(() => \n           number / 2 != 0);\n          Task<bool> taskB = Task.Factory.StartNew<bool>(() => \n           (number / 2) * 2 != number);\n          Task<bool> taskC = Task.Factory.StartNew<bool>(() => \n           (number & 1) != 0);\n          Task.Factory.ContinueWhenAny<bool>(new Task<bool>[] \n           { taskA, taskB, taskC }, (task) =>\n          {\n              Console.WriteLine((task as Task<bool>).Result);\n          }\n        ); \n      }\n```", "```cs\nTask parentTask = Task.Factory.StartNew(() =>\n {\n           Console.WriteLine(\" Parent task started\");\n           Task childTask = Task.Factory.StartNew(() => {\n               Console.WriteLine(\" Child task started\");\n           });\n           Console.WriteLine(\" Parent task Finish\");\n       });\n       //Wait for parent to finish\n       parentTask.Wait();\n       Console.WriteLine(\"Work Finished\");\n```", "```cs\n     Task parentTask = Task.Factory.StartNew(() =>\n            {\n                Console.WriteLine(\"Parent task started\");\n                Task childTask = Task.Factory.StartNew(() => {\n                    Console.WriteLine(\"Child task started\");\n                },TaskCreationOptions.AttachedToParent);\n                Console.WriteLine(\"Parent task Finish\");\n            });\n            //Wait for parent to finish\n            parentTask.Wait();\n            Console.WriteLine(\"Work Finished\");\n```"]