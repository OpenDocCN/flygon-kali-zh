- en: Persisting with Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库持久化
- en: In this chapter, we will work on improving the to-do list app from the previous
    chapter by properly persisting the tasks the user enters into a database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过正确地将用户输入的任务持久化到数据库中，改进上一章的待办事项列表应用。
- en: 'In this chapter, we will learn the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: The concept of databases
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的概念
- en: The different types of databases available for mobile development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动开发可用的不同类型的数据库
- en: How to connect to some of the different databases available
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接到一些不同的可用数据库
- en: Introduction to databases
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库简介
- en: 'A database is simply a collection of data organized in a way that makes accessing
    and/or updating it easy. Organizing data can be done in a lot of ways, but they
    can be grouped into two main types:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库简单地是一组数据，以使访问和/或更新它变得容易的方式组织起来。组织数据可以以许多方式进行，但它们可以分为两种主要类型：
- en: Relational databases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系数据库
- en: Non-relational databases
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非关系数据库
- en: Relational databases
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系数据库
- en: A relational database is a database that organizes its data based on the relations
    that exist between the data. In a relational database, data is presented in the
    form of tables with rows and columns. A table stores a collection of data of the
    same type. Each column in a table represents an attribute of an object stored
    in the table. Each row in a table represents an object stored. A table has a heading
    that specifies the names and types of the different attributes of the objects
    to be stored in the database. In relational databases, the data types of each
    attribute are specified at the point of creation of the table.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库是一种根据数据之间的关系组织数据的数据库。在关系数据库中，数据以表格的形式呈现，有行和列。表格存储了相同类型的数据集合。表格中的每一列代表表格中存储的对象的属性。表格中的每一行代表一个存储的对象。表格有一个标题，指定了要存储在数据库中的对象的不同属性的名称和类型。在关系数据库中，每个属性的数据类型在创建表格时指定。
- en: 'Let''s take a look at an example. The table here represents a collection of
    students:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。这里的表代表了一组学生：
- en: '![](img/9cdfbeee-544f-46ce-8ee7-4ef1c80c7f57.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cdfbeee-544f-46ce-8ee7-4ef1c80c7f57.jpg)'
- en: Each row of the table represents a single student. The columns represent different
    attributes of each of the students.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 表的每一行代表一个学生。列代表每个学生的不同属性。
- en: A relational database is maintained using an **RDBMS** (**Relational Database
    Management System**). The data is accessed and managed using a language known
    as **SQL** (Structured Query Language). Some of the most-used RDBMSs are Oracle,
    MySQL, Microsoft SQL Server, PostgreSQL, Microsoft Access, and SQLite. MySQL,
    PostgreSQL, and SQLite are open sourced.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库是使用**RDBMS**（**关系数据库管理系统**）维护的。数据是使用一种称为**SQL**（结构化查询语言）的语言访问和管理的。一些最常用的RDBMS是Oracle、MySQL、Microsoft
    SQL Server、PostgreSQL、Microsoft Access和SQLite。MySQL、PostgreSQL和SQLite是开源的。
- en: The RDBMS of choice for Android development is SQLite. This is because the Android
    OS comes bundled with SQLite.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Android开发的RDBMS选择是SQLite。这是因为Android操作系统捆绑了SQLite。
- en: In the previous chapter, we built a to-do list app that lets the user add, update,
    and delete tasks. We used an `ArrayList` as our data store. Let's go ahead and
    extend the app to use a relational database instead.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个待办事项列表应用，允许用户添加、更新和删除任务。我们使用了`ArrayList`作为我们的数据存储。让我们继续扩展应用程序，改用关系数据库。
- en: Using SQLite
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SQLite
- en: The first thing to do is to define a schema of your database. The schema of
    a database is what defines how the data in the database is organized. It defines
    the tables into which the data is organized, and restrictions on those tables
    (such as allowed data types for the columns). It is advisable to create a contract
    class that specifies the details of your database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是定义数据库的架构。数据库的架构定义了数据库中的数据是如何组织的。它定义了数据组织到哪些表中，并对这些表的限制（例如列的允许数据类型）进行了定义。建议创建一个合同类，指定数据库的详细信息。
- en: 'Create a new Kotlin object, with the name `TodoListDBContract`, and replace
    its contents with the following lines of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Kotlin对象，名为`TodoListDBContract`，并用以下代码替换其内容：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, the `TodoListItem` class represents a table in our database,
    and is used to declare the name of the table and names of its columns.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`TodoListItem`类代表了我们数据库中的一个表，并用于声明表的名称和其列的名称。
- en: To create a new Kotlin object, first, right-click the package and select New
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的Kotlin对象，首先右键单击包，然后选择新建
- en: '| Kotlin File/Class. Then in the New Kotlin File/Class dialog, select Object in
    the Kind field:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '| Kotlin文件/类。然后在新的Kotlin文件/类对话框中，在`Kind`字段中选择`Object`：'
- en: '![](img/17843c5f-c75e-4ae4-a767-86b46ba915b2.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17843c5f-c75e-4ae4-a767-86b46ba915b2.png)'
- en: 'The next thing to do is to create a database helper class. This will help us
    abstract the connection to the database and not keep the database connection logic
    in our Activity. Go ahead and create a new Kotlin class with the name `TodoListDBHelper`.
    The class should take a `Context` parameter in its default constructor and extend
    the `android.database.sqlite.SQLiteOpenHelper` class as shown in the following
    code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的是创建一个数据库助手类。这将帮助我们抽象出对数据库的连接，并且不将数据库连接逻辑保留在我们的Activity中。继续创建一个名为`TodoListDBHelper`的新的Kotlin类。该类应该在其默认构造函数中接受一个`Context`参数，并扩展`android.database.sqlite.SQLiteOpenHelper`类，如下所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, add the following lines of code to the `TodoListDBHelper` class as shown
    in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下代码将以下代码添加到`TodoListDBHelper`类中：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding lines of code the following applies:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，以下内容适用：
- en: '`SQL_CREATE_ENTRIES` is a SQL query to create a table. It specifies an`_id` field,
    which is set as the primary key of the database.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQL_CREATE_ENTRIES`是一个SQL查询，用于创建一个表。它指定了一个`_id`字段，该字段被设置为数据库的主键。'
- en: In relational databases, a table is required to have a column that uniquely
    identifies each row entry. This unique column is known as the **Primary Key**.
    Specifying a column as **AUTOINCREMENT** tells the RDBMS to auto-generate a new
    value for this field whenever a new row is being inserted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系数据库中，表需要有一个列来唯一标识每个行条目。这个唯一的列被称为**主键**。将列指定为**AUTOINCREMENT**告诉RDBMS在插入新行时自动生成此字段的新值。
- en: '`SQL_DELETE_ENTRIES` is a SQL query to drop the table if it exists.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SQL_DELETE_ENTRIES`是一个SQL查询，用于删除表（如果存在）。'
- en: In the `onCreate()` method, the SQL query is executed to create the table.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`onCreate()`方法中，执行SQL查询以创建表。
- en: In `onUpgrade()`, the table is deleted and recreated.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`onUpgrade()`中，表被删除并重新创建。
- en: Since the table will have an ID field in the database, we have to add an extra
    field in the `Task` class to track it. Open `Task.kt`, add a new field of `Long`
    type, named `taskId`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于表在数据库中将有一个ID字段，我们必须在`Task`类中添加一个额外的字段来跟踪它。打开`Task.kt`，添加一个名为`taskId`的`Long`类型的新字段。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, add the constructor shown as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加如下所示的构造函数：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inserting data into the database
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据插入数据库
- en: 'Open `TodoListDBHelper`, and add the method shown here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`TodoListDBHelper`，并添加以下所示的方法：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we perform the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们执行以下操作：
- en: We first retrieve the database in write mode.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先以写模式检索数据库。
- en: Next, we create an instance of `ContentValues` and put in a value key mapping
    of the fields in the item we want to insert.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个`ContentValues`的实例，并放入我们要插入的项目中字段的值键映射。
- en: Then, we invoke the `insert()` method on the database object, passing the table
    name and the `ContentValues` instance to it. This returns the primary key, `_id`,
    of the inserted item. We update the task object and return it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在数据库对象上调用`insert()`方法，将表名和`ContentValues`实例传递给它。这将返回插入项的主键`_id`。我们更新任务对象并返回它。
- en: Open the `MainActivity` class.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainActivity`类。
- en: 'First, add an instance of the `TodoListDBHelper` class as a new field at the
    top of the class:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在类的顶部添加`TodoListDBHelper`类的一个实例作为一个新字段：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And, override the `onDestroy()` method of `AppCompatActivity`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 并重写`AppCompatActivity`的`onDestroy()`方法：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This closes the database connection when the Activity's `onDestroy()` method
    is called.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当Activity的`onDestroy()`方法被调用时，这将关闭数据库连接。
- en: 'Then, in the `onDialogPositiveClick()` method, locate this line of code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`onDialogPositiveClick()`方法中，找到这行代码：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace it with the following lines of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换它：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Calling `dbHelper.addNewTask()` will save the new task to the database instead
    of just adding it to the `todoListItems` field.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`dbHelper.addNewTask()`将新任务保存到数据库，而不仅仅是将其添加到`todoListItems`字段中。
- en: 'Build and run the app:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行应用程序：
- en: '![](img/2db33716-0630-4e2d-a312-b6266e3502d0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2db33716-0630-4e2d-a312-b6266e3502d0.png)'
- en: Now that we've been able to save to the database, we need to be able to view
    the data when the app starts up.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经能够保存到数据库，我们需要在应用程序启动时能够查看数据。
- en: Retrieving data from the database
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: 'Open `TodoListDBHelper`, and add the method shown as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`TodoListDBHelper`，并添加如下所示的方法：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `retrieveTaskList` method, we perform the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`retrieveTaskList`方法中，我们执行以下操作：
- en: We first retrieve the database in read-mode.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先以读模式检索数据库。
- en: Next, we create an array that lists all the columns of the table we need to
    retrieve. Here, if we have no need for the values of a specific column, we don't
    add that.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个列出我们需要检索的表的所有列的数组。在这里，如果我们不需要特定列的值，我们就不添加它。
- en: We then pass the table name and the column list to the `query()` method on the
    database object. This returns a `Cursor` object.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将表名和列列表传递给数据库对象上的`query()`方法。这将返回一个`Cursor`对象。
- en: Next, we loop through the items in the `Cursor` object, and create an instance
    of the `Task` class with the attributes of each item.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们循环遍历`Cursor`对象中的项目，并使用每个项目的属性创建`Task`类的实例。
- en: We close the cursor and return the retrieved data
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们关闭游标并返回检索到的数据
- en: 'Now, open `MainActivity`, and add the following line of code at the beginning
    of the `populateListView()` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity`，并在`populateListView()`方法的开头添加以下代码行：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Your `populateListView()` method should now look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`populateListView()`方法现在应该如下所示：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, build and run again. You''ll notice that, unlike in the previous chapter,
    when you restarted the application, the tasks you saved earlier are preserved:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新构建并运行。您会注意到，与上一章不同的是，当您重新启动应用程序时，您之前保存的任务会被保留：
- en: '![](img/b24d7315-a1a7-436d-95e9-4b8aa4b26542.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b24d7315-a1a7-436d-95e9-4b8aa4b26542.png)'
- en: Updating a task
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新任务
- en: 'In this section, we will learn to update the details of an already saved task
    in the database. Open `TodoListDBHelper`, and add the method shown as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何更新数据库中已保存任务的详细信息。打开`TodoListDBHelper`，并添加如下所示的方法：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `updateTask()` method, we perform the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`updateTask()`方法中，我们执行以下操作：
- en: We first retrieve the database in write mode.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先以写模式检索数据库。
- en: Next, we create an instance of `ContentValues` and put in a value key mapping
    of the fields we want to update. For what we are working on, we will assume an
    update of all columns.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个`ContentValues`的实例，并放入我们要更新的字段的值键映射。对于我们正在处理的内容，我们将假定更新所有列。
- en: We specify a query for selecting which database entry to update. Our selection
    query uses the `_id` column.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为选择要更新的数据库条目指定一个查询。我们的选择查询使用`_id`列。
- en: Then, we specify the argument for the select query which, in our case, is the
    `taskId` of the selected `Task`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们为选择查询指定参数，这里，我们选择的是所选`Task`的`taskId`。
- en: Then, we invoke the `update()` method on the database object, passing the table
    name, the `ContentValues` instance, the select query, and the selection value to
    it.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在数据库对象上调用`update()`方法，传递表名、`ContentValues`实例、选择查询和选择值。
- en: 'In the `onDialogPositiveClick()` method in the `MainActivity` class, locate
    this line of code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`类的`onDialogPositiveClick()`方法中，找到这行代码：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And, place it right after this line of code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其放在以下代码行之后：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `onDialogPositiveClick()` method should now look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`onDialogPositiveClick()`方法现在应该如下所示：'
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, in `onOptionsItemSelected()`, locate the following line of code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onOptionsItemSelected()`中，找到以下代码行：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And, place it right after this line of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在此代码行之后放置：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Build and run. When you click on the **Mark as Complete** menu item, the selected
    task will be updated as completed, and the listView updated accordingly:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。当您点击**标记为完成**菜单项时，所选任务将被更新为已完成，并相应地更新listView：
- en: '![](img/a5216fb5-982a-43ff-89b2-a235647f803a.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5216fb5-982a-43ff-89b2-a235647f803a.png)'
- en: Deleting a task
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除任务
- en: 'In this section, we will learn to delete a saved task in the database. Open `TodoListDBHelper`,
    and add the method shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何从数据库中删除已保存的任务。打开`TodoListDBHelper`，并添加以下方法：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The process for deletion is similar to that of updating:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 删除的过程类似于更新的过程：
- en: First, retrieve the database in write mode
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，以写模式检索数据库
- en: Next, specify a query for selecting which database entry to delete. Our `selection`
    query uses the `_id` column
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为选择要删除的数据库条目指定一个查询。我们的`selection`查询使用`_id`列
- en: Then, specify the argument for the `selection` query which, in our case, is
    the `taskId` of the selected `Task`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，指定`selection`查询的参数，在我们的情况下是所选`Task`的`taskId`
- en: Then, we invoke the `delete()` method on the database object, passing the table
    name, the select query, and the selection value to it
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在数据库对象上调用`delete()`方法，将表名、选择查询和选择值传递给它
- en: 'In the method in the `MainActivity` class, locate the following line of code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`类中的方法中，找到以下代码行：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Replace it with this code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换它：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Build and run. When you add a new item, the entry isn''t just added to the `ListView`, 
    it is also saved in the database:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。当您添加一个新项目时，该条目不仅会添加到`ListView`中，还会保存在数据库中：
- en: '![](img/5ac315e8-e5d1-4094-ba24-3a5d1d6bdf0c.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ac315e8-e5d1-4094-ba24-3a5d1d6bdf0c.png)'
- en: Writing your own SQL queries can be error-prone, especially if you're building
    an app that depends heavily on the database or requires very complex queries.
    It also requires a lot of effort and SQL query knowledge. To help with this, you
    can use an ORM library.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自己的SQL查询可能会出错，特别是如果您正在构建一个严重依赖于数据库或需要非常复杂查询的应用程序。这也需要大量的努力和SQL查询知识。为了帮助解决这个问题，您可以使用ORM库。
- en: ORM libraries
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM库
- en: An **ORM** (**Object Relational Mapping**) Library provides a better way for
    you to persist objects to a database instead, without worrying much about the
    SQL queries, and opening and closing database connections.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**ORM**（对象关系映射）库提供了一种更好的方式，让您将对象持久化到数据库中，而不用太担心SQL查询，以及打开和关闭数据库连接。'
- en: '**NOTE**: You still need some level of SQL query knowledge'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：您仍然需要一定水平的SQL查询知识'
- en: 'There are a number of Android-compatible ORM Libraries:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多适用于Android的ORM库：
- en: ORMLite
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ORMLite
- en: GreenDAO
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GreenDAO
- en: DbFlow
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DbFlow
- en: Room
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Room
- en: But, in this book, we will focus on **Room**, which is an ORM introduced by
    Google.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在本书中，我们将专注于Room，这是Google推出的ORM。
- en: To use Room, we first have to add its dependencies to the project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Room，我们首先必须将其依赖项添加到项目中。
- en: 'Open `build.gradle`, and add the following lines of code to the dependencies
    section:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`build.gradle`，并在依赖项部分添加以下代码行：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Click on Sync Now. For Room to be able to save tasks to the database, we need
    to specify which class represents a table. This is done by annotating the class
    as an `Entity`. Open the `Task` class and replace its contents with the following
    lines of code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 点击立即同步。为了让Room能够将任务保存到数据库中，我们需要指定哪个类表示一个表。这是通过将类注释为`Entity`来完成的。打开`Task`类，并用以下代码替换其内容：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, the following applies:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，以下内容适用：
- en: '`@Entity` specifies that `Task` represents a table in the database'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Entity`指定`Task`表示数据库中的一个表'
- en: '`@ColumnInfo` maps the field to a database column'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@ColumnInfo`将字段映射到数据库列'
- en: '`@PrimaryKey` specifies that the field is the primary key of the table'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@PrimaryKey`指定该字段是表的主键'
- en: 'The next thing is to create a **DAO** (Data Access Object). Create a new Kotlin
    interface with the name `TaskDAO`, and replace its contents with the following
    lines of code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是创建一个**DAO**（数据访问对象）。创建一个名为`TaskDAO`的新的Kotlin接口，并用以下代码替换其内容：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As shown in the preceding code, the following applies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，以下内容适用：
- en: Room provides `Insert`, `Update`, and `Delete` annotations, so you don't have
    to write queries for those
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Room提供了`Insert`、`Update`和`Delete`注释，因此您不必为这些编写查询
- en: For select operations, you have to annotate the method with the query
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于选择操作，您必须使用查询注释方法
- en: 'Next, we have to create a database class that will connect our application
    to the database. Create a new Kotlin class with the name `AppDatabase`, and replace
    its contents with the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个数据库类，将我们的应用程序连接到数据库。创建一个名为`AppDatabase`的新的Kotlin类，并用以下代码替换其内容：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That's all the setup needed to connect to the database.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是连接到数据库所需的所有设置。
- en: 'To use the database, open `MainActivity`. First, create a field of `AppDatabase`
    type:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用数据库，打开`MainActivity`。首先，创建一个`AppDatabase`类型的字段：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, instantiate the field in the `onCreate()` method:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onCreate()`方法中实例化字段：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, you specify your database class and the name of the database.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您指定了您的数据库类和数据库的名称。
- en: Retrieving data from the database
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中检索数据
- en: 'Room does not allow you to run database operations on the main thread, so we
    will use an `AsyncTask` to perform the calls. Add the private class shown here
    to the `MainActivity` class:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Room不允许您在主线程上运行数据库操作，因此我们将使用`AsyncTask`来执行调用。将此私有类添加到`MainActivity`类中，如前面的代码所示：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, we make a call to the `taskDao` to retrieve the task list from the database
    in the `doInBackground()` method.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`doInBackground()`方法中调用`taskDao`来从数据库中检索任务列表。
- en: 'Next, in the `populateListView()`  method, locate the following line of code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`populateListView()`方法中，找到以下代码行：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And, replace it with this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用这个替换它：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Room creates and manages a master table, which it uses to track the version
    of your database. As such, even though we need to perform a migration of the database
    if we want to preserve the data currently in our database.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Room创建并管理一个主表，用于跟踪数据库的版本。因此，即使我们需要对数据库进行迁移以保留当前数据库中的数据。
- en: Open the `TodoListDBContract` class and increase the `DATABASE_VERSION` constant
    to `2`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`TodoListDBContract`类，并将`DATABASE_VERSION`常量增加到`2`。
- en: 'Then, replace the database instantiation in the `MainActivity` with the following
    code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用以下代码替换`MainActivity`中的数据库实例化：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we add a new `Migration` object to the `databaseBuilder`, while specifying
    the current version of the database and the new version.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们向`databaseBuilder`添加一个新的`Migration`对象，同时指定数据库的当前版本和新版本。
- en: 'Now, build and run. Your app will start up with the previously saved `Tasks`
    showing:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建并运行。您的应用程序将启动，并显示先前保存的`Tasks`：
- en: '![](img/437ab9e1-546d-4ee5-a647-fcc44f0d4004.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/437ab9e1-546d-4ee5-a647-fcc44f0d4004.png)'
- en: Inserting data into the database
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据插入数据库
- en: 'To add a new task, create a new `AsyncTask` in the `MainActivity`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新任务，在`MainActivity`中创建一个新的`AsyncTask`：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here, we make a call to the `taskDao` to insert the new task in the database
    in the `doInBackground()` method.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`doInBackground()`方法中调用`taskDao`来将新任务插入数据库。
- en: 'Next, in the `onDialogPositiveClick()` method, locate the line of code shown
    here:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onDialogPositiveClick()`方法中，找到以下代码行：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And, replace it with the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 并用以下代码替换它：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, build and run. Just like in the previous section, when you add a new item,
    the entry isn''t just added to the `ListView`, it is also saved in the database:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建并运行。就像在上一节中一样，当您添加新项目时，该条目不仅会添加到`ListView`中，还会保存到数据库中：
- en: '![](img/0a374130-64f6-4d3b-b2e5-bfa9c68fa19e.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a374130-64f6-4d3b-b2e5-bfa9c68fa19e.png)'
- en: Updating a task
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新任务
- en: 'To update a task, create a new `AsyncTask` in the `MainActivity`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新任务，在`MainActivity`中创建一个新的`AsyncTask`：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here, we make a call to the `taskDao` to insert the new task in the database
    in the `doInBackground()` method.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`doInBackground()`方法中调用`taskDao`来将新任务插入数据库。
- en: 'Next, in the `onDialogPositiveClick()` method, locate the following line of
    code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onDialogPositiveClick()`方法中，找到以下代码行：
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace it with this line of code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 用这行代码替换它：
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Further, in `onOptionsItemSelected()`, locate the following line of code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`onOptionsItemSelected()`中，找到以下代码行：
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And, replace it with this line of code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 并用这行代码替换它：
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, build and run. Just like in the previous chapter, select a task and click
    the Edit menu item. In the Edit Task dialog that shows up, make changes to the
    task details and click on the SAVE button.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建并运行。就像在上一章中一样，选择一个任务，然后单击编辑菜单项。在弹出的编辑任务对话框中，更改任务详细信息，然后单击“保存”按钮。
- en: 'This takes away the dialog, saves the changes to the database, updates your
    ListView with the updated task, and displays a ticker with the message Task Updated
    Successfully at the bottom of the screen:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭对话框，保存对数据库的更改，更新您的ListView以显示更新后的任务，并在屏幕底部显示一个消息提示，显示任务已成功更新：
- en: '![](img/4db5afbc-4728-4d11-bf8b-9b71a1ce8345.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4db5afbc-4728-4d11-bf8b-9b71a1ce8345.png)'
- en: Deleting a task
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除任务
- en: 'To delete a task, create a new `AsyncTask` in the `MainActivity`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除任务，在`MainActivity`中创建一个新的`AsyncTask`：
- en: '[PRE40]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, in `onOptionsItemSelected()`, locate the following line of code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`onOptionsItemSelected()`中，找到以下代码行：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Replace it with this line of code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 用这行代码替换它：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Build and run. Select a task and click the Delete menu item. This removes the
    selected task from the ListView, removes it from the database as well, and displays a
    ticker with the message Task deleted successfully at the bottom of the screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行。选择一个任务，然后单击删除菜单项。这将从ListView中删除所选任务，并从数据库中删除它，并在屏幕底部显示一个消息提示，显示任务已成功删除：
- en: '![](img/01e114b6-5787-42ac-b0cc-a6c7a10d0fd7.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/01e114b6-5787-42ac-b0cc-a6c7a10d0fd7.png)'
- en: That's it. As you can see, using the ORM lets you write less code and reduces
    SQL errors.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。正如您所看到的，使用ORM可以让您编写更少的代码并减少SQL错误。
- en: Non-relational databases
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非关系数据库
- en: 'A non-relational, or NoSQL database, is a database that does not organize its
    data based on relations. Unlike relational databases, there are different ways
    in which the different non-relational databases store and manage their data. Some
    store data as key-value pairs, while others store data as objects. A number of
    these database options support Android. In most cases, these databases come with
    the ability to synchronize your data to an online server. Two of the most popular
    No-SQL mobile databases are:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 非关系型数据库，或者NoSQL数据库，是一种不基于关系组织数据的数据库。与关系数据库不同，不同的非关系数据库存储和管理数据的方式各不相同。一些将数据存储为键值对，而其他一些将数据存储为对象。其中许多选项支持Android。在大多数情况下，这些数据库具有将数据同步到在线服务器的能力。最流行的两种No-SQL移动数据库是：
- en: CouchBase Mobile
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CouchBase Mobile
- en: Realm
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Realm
- en: CouchBase is an example of a document database and Realm is an example of an
    object database.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: CouchBase是文档数据库的一个例子，Realm是对象数据库的一个例子。
- en: Document databases are schema-less, which means they are unstructured and as
    such do not have restrictions on what can go into a document. They store their
    data as key-value pairs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 文档数据库是无模式的，这意味着它们是非结构化的，因此对文档中可以放入什么没有限制。它们将数据存储为键值对。
- en: Object databases, on the other hand, store their data as objects.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，对象数据库将数据存储为对象。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added the functionality of storing our tasks into a database.
    We also learned about the different types of databases we can use. The most-used
    database among Android developers is SQLite, but that does not prevent you from
    exploring other options. There are also database services such as Firebase that
    provide a backend as a service functionality.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了将任务存储到数据库的功能。我们还了解了可以使用的不同类型的数据库。在Android开发人员中使用最多的数据库是SQLite，但这并不妨碍您探索其他选项。还有一些数据库服务，如Firebase，提供后端作为服务的功能。
- en: When choosing a database, you should consider the data needs of your application.
    Is there a need to store the data on an online server? Or, is it data that's only
    used locally for that instance of the app? Do you want to or have the capability
    to set up and manage a custom data server, or will you rather opt for a service
    that does that work for you? These are some of the considerations when choosing
    a database for your Android application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择数据库时，您应该考虑应用程序的数据需求。是否需要将数据存储在在线服务器上？还是，这些数据仅在应用程序的实例中本地使用？您是否想要或有能力设置和管理自定义数据服务器，还是您更愿意选择一个为您完成这项工作的服务？这些都是在为您的Android应用程序选择数据库时需要考虑的一些因素。
- en: In the next chapter, we will work on adding a reminder functionality to our
    To-do List application.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将致力于为我们的待办事项列表应用程序添加提醒功能。
