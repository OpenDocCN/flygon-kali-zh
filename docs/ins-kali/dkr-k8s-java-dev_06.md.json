["```\n$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n\n```", "```\n$ docker stop [OPTIONS] CONTAINER [CONTAINER...]\n\n```", "```\n$ docker kill  CONTAINER [CONTAINER...]\n\n```", "```\n$ docker ps\n\n```", "```\n$ docker ps -a\n\n```", "```\n$ docker ps -a -f status=running\n\n```", "```\n$ docker rm [OPTIONS] CONTAINER [CONTAINER...]\n\n```", "```\n$ docker run --rm -it Ubuntu /bin/bash\n\n```", "```\n$ docker run -a stdin -a stdout -i -t centos /bin/bash\n\n```", "```\n$ docker run -it rest-example\n\n```", "```\n$ docker run -d -p 8080:8080 rest-example\n\n```", "```\n$ docker attach [OPTIONS] <container ID or name>\n\n```", "```\n$ docker attach 5687bd611f84b53716424fd826984f551251bc95f3db49715fc7211a6bb23840\n\n```", "```\n$ docker attach --sig-proxy=false [container-name or ID]\n\n```", "```\n$ docker logs -f <container name or ID>\n\n```", "```\n--log-opt max-size=[0-9+][k|m|g]\n\n--log-opt max-file=[0-9+]\n\n```", "```\n$ docker run --log-driver=syslog rest-example\n\n```", "```\n$ docker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]\n\n```", "```\n$ docker inspect -f '{{.State.ExitCode}}' jboss/wildfly\n\n```", "```\n$ docker inspect -f '{{if ne 0.0 .State.ExitCode }}{{.Name}} {{.State.ExitCode}}{{ end }}' $(docker ps -aq)\n\n```", "```\n$ docker inspect -f '{{.State.ExitCode}}' wildfly\n\n$ docker inspect -f '{{with .State}} {{.ExitCode}} {{end}}' wildfly\n\n```", "```\n$ docker inspect -f '{{with .State}} {{$.Name}} exited with {{.ExitCode}} exit code \\ {{end}}' wildfly\n\n```", "```\n/wildfly exited with 0 exit code.\n\n```", "```\n$ docker inspect -f '{{if eq .State.ExitCode 0.0}} \\\n\nNormal Exit \\\n\n{{else if eq .State.ExitCode 1.0}} \\\n\nNot a Normal Exit \\\n\n{{else}} \\\n\nStill Not a Normal Exit \\\n\n{{end}}' wildfly\n\n```", "```\n$ docker inspect <containerID> | jq -r '.[0].NetworkSettings.IPAddress'\n\n```", "```\ndocker stats [OPTIONS] [CONTAINER...]\n\n```", "```\nattach, commit, copy, create, destroy, detach, die, exec_create, exec_detach, exec_start, export, health_status, kill, oom, pause, rename, resize, restart, start, stop, top, unpause, update\n\n```", "```\n$ docker run --restart=always rest-example\n\n```", "```\n$ docker run --restart=on-failure:5 rest-example\n\n```", "```\n$ docker inspect -f \"{{ .RestartCount }}\" <ContainerID>\n\n```", "```\n$ docker inspect -f \"{{ .State.StartedAt }}\" <ContainerID>\n\n```", "```\n$ docker update --restart=always <CONTAINER_ID or NAME>\n\n```", "```\n$ docker inspect --format '{{ .HostConfig.RestartPolicy.Name }}' <ContainerID>\n\n```", "```\n$ docker run -it -m 512m ubuntu\n\n```", "```\n$ docker run -it -m 1G --memory-reservation 500M ubuntu /bin/bash\n\n```", "```\n$ docker run -it --memory-reservation 1G ubuntu /bin/bash\n\n```", "```\n$ docker run -it --kernel-memory 100M ubuntu  /bin/bash\n\n```", "```\n$ docker run -it -m 1G --kernel-memory 100M ubuntu /bin/bash\n\n```", "```\n$ docker run -it --memory-swappiness=0 ubuntu /bin/bash\n\n```", "```\n$ docker run -it  --cpu-quota=50000 ubuntu /bin/bash\n\n```", "```\n$ docker run -it --cpu-quota=25000 --cpu-period=50000  ubuntu /bin/bash\n\n```", "```\n$ docker run -it --cpuset 4 ubuntu\n\n```", "```\n$ docker run -it --cpuset 1 ubuntu\n\n```", "```\n$ docker update --cpu-shares 512 abbdef1231677\n\n```", "```\ndocker update --cpu-shares 512 -m 500M abbdef1231677 dabdff1231678\n\n```", "```\n$ docker update --restart=always -m 300M aabef1234716\n\n```", "```\n<ports>   \n<port>8080:8080</port>   \n</ports>   \n```", "```\n<restartPolicy>   \n<name> on-failure</name>   \n<retry>5</retry>   \n</restartPolicy>   \n```", "```\n<volumes>   \n<bind>   \n<volume>/logs</volume><volume>/opt/host_export:/opt/container_import</volume> </bind>   \n</volumes>   \n```", "```\n<configuration> \n<images> \n<image> \n<name>rest-example:${project.version}</name> \n<alias>rest-example</alias> \n<build> \n<from>openjdk:latest</from> \n<assembly> \n<descriptorRef>artifact</descriptorRef> \n</assembly> \n<cmd>java -jar maven/${project.name}-${project.version}.jar</cmd> \n</build> \n<run> \n<ports> \n<port>8080:8080</port> \n</ports> \n</run> \n</image> \n</images> \n</configuration>\n\n```", "```\n$ mvn clean package docker:start\n\n```", "```\n$ mvn docker:stop\n\n```", "```\n[INFO] DOCKER> [rest-example:0.1.0] \"rest-example\": Stop and removed container 51660084f0d8 after 0 ms\n\n```", "```\n$ mvn clean package docker:run\n\n```"]