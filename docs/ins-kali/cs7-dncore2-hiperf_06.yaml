- en: Memory Management Techniques in .NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core中的内存管理技术
- en: Memory management significantly affects the performance of any application.
    When the application is run, .NET CLR (Common Language Runtime) allocates many
    objects in memory, and they stay there until they are not needed, until new objects
    are created and are allocated space, or until the GC runs (as it does occasionally)
    to release unused objects and make more space available for other objects. Most
    of the job is done by the GC itself, which runs intelligently and frees up space
    for the objects by removing those that are not needed. However, there are certain
    practices that can help any application to avoid performance issues and run smoothly.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理显著影响任何应用程序的性能。当应用程序运行时，.NET CLR（公共语言运行时）在内存中分配许多对象，并且它们会一直保留在那里，直到它们不再需要，直到创建新对象并分配空间，或者直到GC运行（偶尔会运行）以释放未使用的对象，并为其他对象提供更多空间。大部分工作由GC自己完成，它会智能地运行并通过删除不需要的对象来释放空间。然而，有一些实践可以帮助任何应用程序避免性能问题并平稳运行。
- en: In [Chapter 2](part0059.html#1O8H60-84c100e6bea3438e8844d99ae7f5dfa9), *Understanding
    .NET Core Internals and Measuring Performance*, we already learned about how garbage
    collection works and how generations are maintained in .NET. In this chapter,
    we will focus on some recommended best practices and patterns that avoid memory
    leakage and make the application performant.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0059.html#1O8H60-84c100e6bea3438e8844d99ae7f5dfa9)，*了解.NET Core内部和性能测量*中，我们已经了解了垃圾回收的工作原理以及在.NET中如何维护代。在本章中，我们将专注于一些推荐的最佳实践和模式，以避免内存泄漏并使应用程序性能良好。
- en: 'The following are the topics that we will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习以下主题：
- en: Memory allocation process overview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存分配过程概述
- en: Analysing memory through SOS debugging
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过SOS调试分析内存
- en: Memory fragmentation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存碎片化
- en: Avoiding finalizers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免终结器
- en: Best practices to dispose of objects in .NET Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在.NET Core中最佳的对象处理实践
- en: Memory allocation process overview
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存分配过程概述
- en: Memory allocation is the process of allocating objects in memory when the application
    is running. It is done by the **Common Language Runtime** (**CLR**). When the
    object is initialized (using a `new` keyword), the GC checks whether the generation
    reaches the threshold and performs garbage collection. This means that when the
    system memory reaches its limit, the GC is invoked. When an application runs,
    the GC register itself receives an event notification about the system memory,
    and when the system reaches its particular limit, it invokes garbage collection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分配是应用程序运行时在内存中分配对象的过程。这是由**公共语言运行时**（**CLR**）完成的。当对象被初始化（使用`new`关键字）时，GC会检查代是否达到阈值并执行垃圾回收。这意味着当系统内存达到其限制时，将调用GC。当应用程序运行时，GC寄存器本身会接收有关系统内存的事件通知，当系统达到特定限制时，它会调用垃圾回收。
- en: On the other hand, we can also programmatically invoke the GC using the `GC.Collect`
    method. However, as the GC is a highly fine-tuned algorithm and automatically
    behaves as per memory allocation patterns, calling it explicitly can affect performance,
    and so it is strongly recommended that you don't use it in production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们也可以使用`GC.Collect`方法以编程方式调用GC。然而，由于GC是一个高度调优的算法，并且根据内存分配模式自动行为，显式调用可能会影响性能，因此强烈建议在生产中不要使用它。
- en: Analysing CLR internals through the SOS debugger in .NET Core
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过.NET Core中的SOS调试器分析CLR内部
- en: SOS is a debugging extension that is shipped with Windows and is available for
    Linux as well. It helps to debug .NET Core applications by providing information
    about CLR internals, especially memory allocation, the number of objects created,
    and other details about the CLR. We can use the SOS extension in .NET Core to
    debug the native machine code, which is specific to each platform.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SOS是一个随Windows一起提供并且也适用于Linux的调试扩展。它通过提供有关CLR内部的信息，特别是内存分配、创建的对象数量以及有关CLR的其他详细信息，来帮助调试.NET
    Core应用程序。我们可以在.NET Core中使用SOS扩展来调试特定于每个平台的本机机器代码。
- en: To install the SOS extension for Windows, install the **Windows Driver Kit**
    (**WDK**) from [https://developer.microsoft.com/en-us/windows/hardware/download-kits-windows-hardware-development.](https://developer.microsoft.com/en-us/windows/hardware/download-kits-windows-hardware-development)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装SOS扩展，需要从[https://developer.microsoft.com/en-us/windows/hardware/download-kits-windows-hardware-development](https://developer.microsoft.com/en-us/windows/hardware/download-kits-windows-hardware-development)安装**Windows
    Driver Kit**（**WDK**）。
- en: When the Windows Driver Kit is installed, we can use various commands to analyze
    the CLR internals about the application and identify which objects are taking
    up the most memory in the heap and optimize them accordingly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Windows Driver Kit后，我们可以使用各种命令来分析应用程序的CLR内部，并确定在堆中占用最多内存的对象，并相应地对其进行优化。
- en: 'As we know that, in .NET Core, there is no executable file generated, we can
    use *dotnet cli* commands to execute the .NET Core application. The commands to
    run the .NET Core application are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，在.NET Core中，不会生成可执行文件，我们可以使用*dotnet cli*命令来执行.NET Core应用程序。运行.NET Core应用程序的命令如下：
- en: '`dotnet run`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet run`'
- en: '`dotnet applicationpath/applicationname.dll`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet applicationpath/applicationname.dll`'
- en: 'We can run either of the preceding commands to run the .NET Core application.
    In the case of the ASP.NET Core application, we can go to the root of the application
    folder, where `Views`, `wwwroot`, `Models`, `Controllers` and other files reside,
    and run the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行上述任一命令来运行.NET Core应用程序。对于ASP.NET Core应用程序，我们可以转到应用程序文件夹的根目录，其中包括`Views`、`wwwroot`、`Models`、`Controllers`和其他文件，并运行以下命令：
- en: '![](img/00066.gif)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.gif)'
- en: 'On the other hand, debugging tools usually require the `.exe` file or the process
    ID to dump information related to the CLR internals. To run the SOS debugger,
    we can go to the path where the Windows Driver Kit is installed (the directory
    path will be `{driveletter}:Program Files (x86)Windows Kits10Debuggersx64`) and
    run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，调试工具通常需要`.exe`文件或进程ID来转储与CLR内部相关的信息。要运行SOS调试器，我们可以转到Windows Driver Kit安装的路径（目录路径将是`{driveletter}:Program
    Files (x86)Windows Kits10Debuggersx64`），并运行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a screenshot that shows you how to run the ASP.NET Core application
    using the `windbg` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，显示了如何使用`windbg`命令运行ASP.NET Core应用程序：
- en: '![](img/00067.gif)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.gif)'
- en: 'Once you run the preceding command, it will open up the Windbg window and the
    debugger, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行了上述命令，它会打开Windbg窗口和调试器，如下所示：
- en: '![](img/00068.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: You can stop the debugger by clicking Debug | Break and running the `SOS` command
    to load the information about .NET Core CLR.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击Debug | Break来停止调试器，并运行`SOS`命令来加载.NET Core CLR的信息。
- en: 'Execute the following command from the Windbg window and hit *Enter*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从Windbg窗口执行以下命令，然后按*Enter*：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot is of the interface from which you can type and run
    the preceding command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是一个界面，你可以在其中输入并运行上述命令：
- en: '![](img/00069.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'Finally, we can run the `!DumpHeap` command to see the complete statistical
    details of the objects heap:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以运行`!DumpHeap`命令来查看对象堆的完整统计细节：
- en: '![](img/00070.gif)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.gif)'
- en: 'In the preceding screenshot, the first three columns as shown in the following
    screenshot, represent the `Address`, `Method` table and `Size` of each method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，如下截图所示的前三列，代表每个方法的`地址`、`方法`表和`大小`：
- en: '![](img/00071.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: Using the preceding information, it provides the statistics that classify the
    objects stored on the heap by their type. `MT` is the method table of that type,
    `Count` is the total number of instances of that type, `TotalSize` is the total
    memory size occupied by all the instances of that type, and `Classname` represents
    the actual type that takes up that space on the heap.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 利用上述信息，它提供了按类型对堆上存储的对象进行分类的统计信息。`MT`是该类型的方法表，`Count`是该类型实例的总数，`TotalSize`是所有该类型实例占用的总内存大小，`Classname`代表在堆上占用该空间的实际类型。
- en: 'There are a few more commands that we can use to get specific details, listed
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他命令，我们可以使用来获取特定的细节，列举如下：
- en: '| **Switch** | **Command** | **Description** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **开关** | **命令** | **描述** |'
- en: '| **Statistics** | `!DumpHeap -stat` | Shows only statistical details |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| **统计信息** | `!DumpHeap -stat` | 仅显示统计细节 |'
- en: '| **Type** | `!DumpHeap -type TypeName` | Shows the statistics for a particular
    type stored on the heap |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **类型** | `!DumpHeap -type TypeName` | 显示堆上存储的特定类型的统计信息 |'
- en: '| **Finalization queue** | `!FinalizationQueue` | Show details about the finalizers
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **Finalization queue** | `!FinalizationQueue` | 显示有关终结器的详细信息 |'
- en: This tool helps developers to investigate how objects are allocated on the heap.
    In a practical scenario, we can run our application on a test or staging server
    by running this tool in the background and examining the detailed statistics about
    the objects stored on the heap for a particular point of time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具帮助开发人员调查对象在堆上的分配情况。在实际场景中，我们可以在后台运行这个工具，运行我们的应用程序在测试或暂存服务器上，并检查关于堆上存储的对象的详细统计信息。
- en: Memory fragmentation
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存碎片化
- en: Memory fragmentation is one of the primary causes of performance issues in .NET
    applications. When the object is instantiated, it occupies space in the memory,
    and when it is not needed, it is garbage collected, and that allocated memory
    block becomes available. This occurs when the object is allocated a larger space
    with respect to the size available in that memory segment/block and waits until
    space becomes available. Memory fragmentation is a problem that occurs when most
    of the memory is allocated in a larger number of non-contiguous blocks. When a
    larger size of object stores or occupies the larger memory block and the memory
    only contains smaller chunks of free blocks that are available, this causes fragmentation,
    and the system fails to allocate that object in memory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 内存碎片化是.NET应用程序性能问题的主要原因之一。当对象被实例化时，它占用内存空间，当它不再需要时，它被垃圾回收，分配的内存块变得可用。当对象被分配了一个相对于该内存段/块中可用大小更大的空间，并等待空间变得可用时，就会发生这种情况。内存碎片化是一个问题，当大部分内存分配在较多的非连续块中时发生。当较大大小的对象存储或占用较大的内存块，而内存只包含较小的可用空闲块时，这会导致碎片化，系统无法在内存中分配该对象。
- en: .NET maintains two types of heap—namely the **small object heap** (**SOH**)
    and **large object heap** (**LOH**). Objects that are greater than 85,000 bytes
    are stored in LOH. The key difference between SOH and LOH is that in LOH there
    is no compaction being done by the GC. Compaction is the process that is done
    at the time of garbage collection, where objects stored in the SOH are moved to
    eliminate the smaller chunks of free space available and increase the total space
    available as one form of large memory chunk that can be used by other objects,
    which reduces fragmentation. However, in LOH, there is no compaction being done
    by the GC implicitly. Objects that are large in size are stored in LOH and create
    fragmentation issues. Moreover, if we compare LOH with SOH, the compaction cost
    for LOH is moderately high and involves significant overhead, where the GC needs
    twice as much memory space to move objects for defragmentation. This is another
    reason why LOH is not defragmented implicitly by the GC.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: .NET维护两种堆，即**小对象堆**（SOH）和**大对象堆**（LOH）。大于85,000字节的对象存储在LOH中。SOH和LOH之间的关键区别在于LOH中没有GC进行的压缩。压缩是在垃圾回收时进行的过程，其中存储在SOH中的对象被移动以消除可用的较小空间块，并增加总可用空间，作为其他对象可以使用的一种大内存块的形式，从而减少碎片化。然而，在LOH中，GC没有隐式地进行压缩。大小较大的对象存储在LOH中并创建碎片化问题。此外，如果我们将LOH与SOH进行比较，LOH的压缩成本适度高，并涉及显着的开销，GC需要两倍的内存空间来移动对象进行碎片整理。这也是为什么LOH不会被GC隐式地进行碎片整理的另一个原因。
- en: 'The following is a representation of memory fragmentation, where the white
    blocks represent the unallocated memory space, and are followed by an allocated
    block:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是内存碎片的表示，其中白色块代表未分配的内存空间，后面跟着一个已分配的块：
- en: '![](img/00072.gif)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.gif)'
- en: 'Suppose an object that has a size of 1.5 MB wants to be allocated some memory.
    It will not find any free space available, even though the total amount of memory
    available is 1.8 MB. The reason for this is memory fragmentation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个大小为1.5 MB的对象想要分配一些内存。即使总可用内存量为1.8 MB，它也找不到任何可用的空间。这是由于内存碎片：
- en: '![](img/00073.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: 'On the other hand, if the memory is defragmented, the object can easily use
    the space that is available and will be allocated:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果内存被碎片化，对象可以轻松使用可用的空间并被分配：
- en: '![](img/00074.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: 'In .NET Core, we can perform compaction in LOH explicitly using `GCSettings`,
    as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中，我们可以使用`GCSettings`显式地在LOH中执行压缩，如下所示：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Avoiding finalizers
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免使用终结器
- en: Using finalizers is not a good practice to use in .NET Core applications. Objects
    that use finalizers stay in memory longer and ultimately affect the application's
    performance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core应用程序中使用终结器不是一个好的实践。使用终结器的对象会在内存中停留更长时间，最终影响应用程序的性能。
- en: Objects that are not required by the application at a particular point in time
    stay in the memory so that their `Finalizer` method can be called. For example,
    if the object is considered dead by the GC in generation 0, it will always survive
    in generation 1.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定时间点，应用程序不需要的对象会留在内存中，以便调用它们的`Finalizer`方法。例如，如果GC认为对象在第0代中已经死亡，它将始终存活在第1代中。
- en: In .NET Core, CLR maintains a separate thread to run the `Finalizer` method.
    All the objects that contain the `Finalizer` method are placed into the finalization
    queue. Any object that is no longer required by the application is placed in the
    F-Reachable queue, which is then executed by the dedicated finalizer thread.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中，CLR维护一个单独的线程来运行`Finalizer`方法。包含`Finalizer`方法的所有对象都被放置到终结队列中。应用程序不再需要的任何对象都被放置在F-Reachable队列中，然后由专用的终结线程执行。
- en: 'The following diagram shows an `object1` object that contains a `Finalizer`
    method. The `Finalizer` method is placed in the finalization queue and the object
    occupies the memory space in the Gen0 (generation 0) heap:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了一个包含`Finalizer`方法的`object1`对象。`Finalizer`方法被放置在终结队列中，对象占据了Gen0（第0代）堆中的内存空间：
- en: '![](img/00075.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: When the object is no longer required, it will be moved from Gen0 (generation
    0) to Gen1 (generation 1) and from the Finalizer Queue to the F-Reachable Queue*:*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象不再需要时，它将从Gen0（第0代）移动到Gen1（第1代），并从终结队列移动到F-Reachable队列*：*
- en: '![](img/00076.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: Once the finalizer thread runs the method in the F-Reachable Queue, it will
    be removed from the memory by the GC.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦终结线程在F-Reachable队列中运行方法，它将被GC从内存中移除。
- en: 'In .NET Core, the finalizer can be defined as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中，终结器可以定义如下：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Usually, this method is used to dispose of unmanaged objects and contains some
    code. However, a code can contain bugs that affect performance. For example, we
    have three objects that are queued in a finalization queue, which then waits for
    the first object to be released by the finalizer thread so they can be processed.
    Now, suppose that a bug in the first `Finalizer` method causes a problem and delays
    the finalizer thread in returning and processing the rest of the methods. After
    some time, more objects will come into the finalization queue and wait for the
    finalizer thread to process, impacting the applications, performance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，此方法用于处理非托管对象并包含一些代码。然而，代码可能包含影响性能的错误。例如，我们有三个对象排队在终结队列中，然后等待第一个对象被终结线程释放，以便它们可以被处理。现在，假设第一个`Finalizer`方法中存在问题并延迟了终结线程的返回和处理其余的方法。过一段时间，更多的对象将进入终结队列并等待终结线程处理，影响应用程序的性能。
- en: The best practice to dispose of objects is to use the `IDisposable` interface
    rather than implementing the `Finalizer` method. If you are using the `Finalizer`
    method for some reason, it is always good to implement the `IDisposable` interface
    as well and suppress finalization by calling the `GC.SuppressFinalize` method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 处理对象的最佳实践是使用`IDisposable`接口而不是实现`Finalizer`方法。如果出于某种原因使用`Finalizer`方法，最好也实现`IDisposable`接口，并通过调用`GC.SuppressFinalize`方法来抑制终结。
- en: Best practices for disposing of objects in .NET Core
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core中释放对象的最佳实践
- en: We have learned in the previous section that object disposal in .NET Core is
    automatically done by the GC. Nevertheless, disposing of objects in your code
    is always a good practice, and is highly recommended when you are working with
    unmanaged objects. In this section, we will explore some best practices that can
    be used to dispose of objects while writing code in .NET Core.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前一节中学习了在.NET Core中对象的处理是由GC自动完成的。然而，在您的代码中处理对象始终是一个良好的实践，并且在处理非托管对象时强烈推荐。在本节中，我们将探讨一些在.NET
    Core中编写代码时可以用来释放对象的最佳实践。
- en: Introduction to the IDisposable interface
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDisposable接口简介
- en: '`IDisposable` is a simple interface that contains one `Dispose` method, takes
    no parameter, and returns `void`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`IDisposable`是一个简单的接口，包含一个`Dispose`方法，不带参数，并返回`void`：'
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is used to release unmanaged resources. So if any class implements the `IDisposable`
    interface, it means that the class contains unmanaged resources and these have
    to be released by calling the `Dispose` method of the class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它用于释放非托管资源。因此，如果任何类实现了`IDisposable`接口，这意味着该类包含非托管资源，这些资源必须通过调用类的`Dispose`方法来释放。
- en: What are unmanaged resources?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是非托管资源？
- en: Any resource that is outside of your application boundary is considered an unmanaged
    resource. It could be a database, filesystem, web service, or a similar resource.
    To access the database, we use the managed .NET API to open or close the connection
    and execute various commands. However, the actual connection to the database is
    not managed. The same is true for the filesystem and web services where we use
    managed .NET APIs to interact with them, but they use unmanaged resources in the
    backend that are not managed. The `IDisposable` interface is the best fit for
    all such scenarios.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 任何超出应用程序边界的资源都被视为非托管资源。它可能是数据库、文件系统、Web服务或类似的资源。为了访问数据库，我们使用托管的.NET API来打开或关闭连接并执行各种命令。但是，实际的数据库连接是不受管理的。文件系统和Web服务也是如此，我们使用托管的.NET
    API与它们交互，但它们在后台使用非托管资源。`IDisposable`接口是所有这些情况的最佳选择。
- en: Using IDisposable
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IDisposable
- en: 'Here is a simple `DataManager` class that uses a `System.Data.SQL` API to perform
    database operations on an SQL server database:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的`DataManager`类，它使用`System.Data.SQL` API在SQL服务器数据库上执行数据库操作：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we have implemented the `IDisposable` interface which,
    in turn, implemented the `Dispose` method to clean up the SQL connection object.
    We have also called the connection's `Dispose` method, which will chain up the
    process in the pipeline and close the underlying objects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已经实现了`IDisposable`接口，该接口又实现了`Dispose`方法来清理SQL连接对象。我们还调用了连接的`Dispose`方法，这将在管道中链接该过程并关闭底层对象。
- en: 'From the calling program, we can use the `using` block to instantiate the `DatabaseManager`
    object that invokes the `Dispose` method after calling the `GetUsers` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从调用程序中，我们可以使用`using`块来实例化`DatabaseManager`对象，该对象在调用`GetUsers`方法后调用`Dispose`方法：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `using` block is a C# construct that is rendered by the compiler in a `try
    finally` block and calls the `Dispose` method in the `finally` block. So this
    means that when you are using a `using` block, we don''t have to call the `Dispose`
    method explicitly. Alternatively, the preceding code can be written in the following
    way as well, and this particular code format is internally managed by the `using`
    block:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`using`块是C#的一个构造，由编译器渲染为`try finally`块，并在`finally`块中调用`Dispose`方法。这意味着当您使用`using`块时，我们不必显式调用`Dispose`方法。另外，前面的代码也可以以以下方式编写，这种特定的代码格式由`using`块在内部管理：'
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When to implement the IDisposable interface
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时实现IDisposable接口
- en: We already know that the `IDisposable` interface should be used whenever we
    need to release unmanaged resources. However, there is a standard rule that should
    be considered when dealing with the disposal of objects. The rule states that
    if the instance within the class implements the `IDisposable` interface, we should
    implement `IDisposable` on the consuming class as well. For example, the preceding
    class `DatabaseManager` class uses `SqlConnection`, where `SqlConnection` implements
    the `IDisposable` interface internally. To address this rule, we will implement
    the `IDisposable` interface and invoke the instance's `Dispose` method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道，每当需要释放非托管资源时，应该使用`IDisposable`接口。但是，在处理对象的释放时，有一个标准规则应该被考虑。规则规定，如果类中的实例实现了`IDisposable`接口，我们也应该在使用该类时实现`IDisposable`。例如，前面的`DatabaseManager`类使用了`SqlConnection`，其中`SqlConnection`在内部实现了`IDisposable`接口。为了遵守这个规则，我们将实现`IDisposable`接口并调用实例的`Dispose`方法。
- en: 'Here is a better example that invokes the `protected Dispose` method from the
    `DatabaseManager Dispose` method and passes a `Boolean` value indicating that
    the object is being disposed of. Ultimately, we will call the `GC.SuppressFinalize`
    method that tells the GC that the object is already cleaned up, preventing a redundant
    garbage collection from being called:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个更好的例子，它从`DatabaseManager Dispose`方法中调用`protected Dispose`方法，并传递一个表示对象正在被处理的`Boolean`值。最终，我们将调用`GC.SuppressFinalize`方法，告诉GC对象已经被清理，防止调用冗余的垃圾回收：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The reason we have kept the parameterized `Dispose` method `protected` and `virtual` is
    so that the child classes if derived from the `DatabaseManager` class can override
    the `Dispose` method and clean up their own resources. This ensures that each
    class in the object tree will clean up its resources. Child classes dispose of
    their resources and call `Dispose` on the base class, and so on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将参数化的`Dispose`方法保持为`protected`和`virtual`，这样，如果从`DatabaseManager`类派生的子类可以重写`Dispose`方法并清理自己的资源。这确保了对象树中的每个类都将清理其资源。子类处理其资源并调用基类上的`Dispose`，依此类推。
- en: Finalizer and Dispose
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Finalizer和Dispose
- en: The `Finalizer` method is called by the GC, whereas the `Dispose` method has
    to be called by the developer explicitly in the program. The GC doesn't know if
    the class contains a `Dispose` method, and it needs to be called when the object
    is disposing to clean up the unmanaged resources. In this scenario, where we need
    to strictly clean up the resources rather than relying on the caller to call the `Dispose`
    method of the object, we should implement the `Finalizer` method.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Finalizer`方法由GC调用，而`Dispose`方法必须由开发人员在程序中显式调用。GC不知道类是否包含`Dispose`方法，并且需要在对象处置时调用以清理非托管资源。在这种情况下，我们需要严格清理资源而不是依赖调用者调用对象的`Dispose`方法时，应该实现`Finalizer`方法。'
- en: 'The following is a modified example of the `DatabaseManager` class that implements
    the  `Finalizer` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现`Finalizer`方法的`DatabaseManager`类的修改示例：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was focused on memory management. We learned some best practices
    and the actual underlying process of how memory management is done in .NET. We
    explored the debugging tool, which can be used by developers to investigate an
    object's memory allocation on the heap. We also learned about memory fragmentation,
    finalizers, and how to implement a dispose pattern to clean up resources by implementing
    the `IDisposable` interface.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点是内存管理。我们学习了一些最佳实践，以及.NET中内存管理的实际底层过程。我们探索了调试工具，开发人员可以使用它来调查堆上对象的内存分配。我们还学习了内存碎片化、终结器，以及如何通过实现`IDisposable`接口来实现清理资源的处理模式。
- en: In the next chapter, we will be creating an application following a microservices
    architecture. A microservice architecture is a highly performant and scalable
    architecture that helps the application to scale out easily. The following chapter
    provides you with a complete understanding of how an application can be developed
    following the best practices and principles.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个遵循微服务架构的应用程序。微服务架构是一种高性能和可扩展的架构，可以帮助应用程序轻松扩展。接下来的章节将为您提供一个完整的理解，说明如何遵循最佳实践和原则开发应用程序。
