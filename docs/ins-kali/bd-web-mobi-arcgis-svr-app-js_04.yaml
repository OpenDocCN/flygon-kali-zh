- en: Chapter 4. The Feature Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。要素图层
- en: The ArcGIS API for JavaScript offers a feature layer for working with client-side
    graphic features. This `FeatureLayer` object inherits from the `GraphicsLayer`
    object, but also offers additional capabilities, such as the ability to perform
    queries and selections as well as support definition expressions. It can also
    be used for web editing. You should already be familiar with the graphics layer
    from an earlier chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS API for JavaScript提供了一个用于处理客户端图形要素的要素图层。这个`FeatureLayer`对象继承自`GraphicsLayer`对象，但也提供了额外的功能，比如执行查询和选择，以及支持定义表达式。它也可以用于Web编辑。您应该已经熟悉了之前章节中的图形图层。
- en: A feature layer differs from tiled and dynamic map service layers in that it
    transports geometry information for features from ArcGIS Server to the web browser,
    where it is then drawn on the map. It can also be used to represent data from
    a nonspatial table, in addition to a feature class that contains geometry.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层与瓦片和动态地图服务图层不同，它将要素的几何信息从ArcGIS Server传输到Web浏览器，然后在地图上绘制。它还可以用于表示来自非空间表的数据，以及包含几何的要素类。
- en: Streaming data from ArcGIS Server to the browser potentially cuts down on the
    round trips to the server and can improve the performance of your application.
    A client can request the features it needs and perform selections and queries
    on those features, without having to request any more information from the server.
    The `FeatureLayer` object is especially appropriate for layers that respond to
    user interactions such as mouse clicks or hovers. The tradeoff to this is that
    if you're working with a feature layer that contains a lot of features, it can
    take a long time to initially transport the features to the client. The feature
    layer supports several display modes that can help ease this burden of working
    with a large number of features. We'll examine each of these display modes in
    this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从ArcGIS Server流式传输数据到浏览器可能会减少与服务器的往返次数，并提高应用程序的性能。客户端可以请求其需要的要素，并对这些要素执行选择和查询，而无需从服务器请求更多信息。`FeatureLayer`对象特别适用于响应用户交互的图层，如鼠标点击或悬停。这样做的折衷是，如果您使用包含大量要素的要素图层，最初将要素传输到客户端可能需要很长时间。要素图层支持几种显示模式，可以帮助减轻处理大量要素的负担。我们将在本章中研究每种显示模式。
- en: A feature layer honors any definition expressions, scale dependencies, and other
    properties configured on the layer in a map service. Using a feature layer, you
    can access related tables, perform queries, display time slices, work with feature
    attachments, and do other useful things.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层遵守地图服务中图层上配置的任何定义表达式、比例依赖和其他属性。使用要素图层，您可以访问相关表，执行查询，显示时间切片，处理要素附件，以及执行其他有用的操作。
- en: '![The Feature Layer](graphics/7965_04_07.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![要素图层](graphics/7965_04_07.jpg)'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a FeatureLayer object
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建FeatureLayer对象
- en: Defining display modes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义显示模式
- en: Setting a definition expression
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置定义表达式
- en: Feature selection
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要素选择
- en: Rendering the feature layer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染要素图层
- en: Time to practice with FeatureLayer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习使用FeatureLayer
- en: Creating a FeatureLayer object
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建FeatureLayer对象
- en: A feature layer must reference a layer from either a map service or a feature
    service. Use a map service if you just want to retrieve geometries and attributes
    from the server and symbolize them yourself. Use a feature service if you want
    to benefit from symbols in the service's source map document. Also, use a feature
    service if you plan to edit with the feature layer. Feature layers honor any feature-editing
    templates configured in the source map document.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层必须引用地图服务或要素服务中的图层。如果您只想从服务器检索几何和属性并自行符号化，可以使用地图服务。如果您想要从服务的源地图文档中受益于符号，则使用要素服务。此外，如果您计划使用要素图层进行编辑，则使用要素服务。要素图层遵守源地图文档中配置的任何要素编辑模板。
- en: 'In the following code example, you will get details on how to create a `FeatureLayer`
    object using its constructor. With tiled and dynamic layers, you simply provide
    a pointer to the rest endpoint but with feature layer, you need to point to a
    specific layer in the service. In the following code example, we will create a
    `FeatureLayer` object from the first layer in the service, which is indicated
    by the number `0`. The constructor for `FeatureLayer` also accepts options such
    as the display mode, output fields, and info template. Here, the display mode
    is set to `SNAPSHOT`, which would indicate that we are probably dealing with a
    fairly small dataset. We''ll cover the various types of display modes that can
    be defined for a feature layer as well as when they should be used, in the next
    section:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，您将了解如何使用其构造函数创建`FeatureLayer`对象的详细信息。对于瓦片和动态图层，您只需提供指向rest端点的指针，但对于要素图层，您需要指向服务中的特定图层。在下面的代码示例中，我们将从服务中的第一个图层创建一个`FeatureLayer`对象，该图层由数字`0`表示。`FeatureLayer`的构造函数还接受选项，如显示模式、输出字段和信息模板。在这里，显示模式设置为`SNAPSHOT`，这可能表示我们正在处理一个相当小的数据集。我们将在下一节中讨论可以为要素图层定义的各种显示模式以及何时应该使用它们：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Optional constructor parameters
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选的构造函数参数
- en: In addition to accepting a required layer from the map or feature service for
    the `FeatureLayer` object as the first parameter, you can also pass a JSON object
    that defines various options to the constructor. A wide variety of options can
    be passed into the constructor. I'll discuss the most commonly used options.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将地图或要素服务中的必需图层作为第一个参数传递给`FeatureLayer`对象之外，还可以将定义各种选项的JSON对象传递给构造函数。可以传递各种各样的选项给构造函数。我将讨论最常用的选项。
- en: 'The `outFields` property can be used to restrict the fields that are returned
    with the `FeatureLayer` object. For performance reasons, it''s best to only include
    the fields that you need for the application rather than accepting the default
    of returning all fields. Only return the fields that you absolutely need for your
    application. Doing this will ensure that your application performs better. In
    the following highlighted code, we''ve defined the `outFields` property to return
    only the `Date` and `Magnitude` fields:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`outFields`属性可用于限制与`FeatureLayer`对象一起返回的字段。出于性能原因，最好只包括应用程序所需的字段，而不是接受默认的返回所有字段。只返回绝对需要的字段，这将确保应用程序的性能更好。在以下突出显示的代码中，我们已经定义了`outFields`属性，只返回`Date`和`Magnitude`字段：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `refreshInterval` property defines how often (in minutes) to refresh the
    layer. This property can be used when you have a `FeatureLayer` object containing
    data that changes often, including new records, or perhaps records that have been
    updated or deleted. The following highlighted code sets a refresh interval of
    5 minutes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`refreshInterval`属性定义了刷新图层的频率（以分钟为单位）。当您有包含经常更改的数据的`FeatureLayer`对象时，包括新记录，或者可能已更新或删除的记录时，可以使用此属性。以下突出显示的代码设置了5分钟的刷新间隔：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To define the attributes and styling that should be displayed in an info window
    when a feature is clicked on, you can set the `infoTemplate` property as explained
    in the following code example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义在单击要素时应在信息窗口中显示的属性和样式，您可以设置`infoTemplate`属性，如下面的代码示例所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You may want to consider setting the `displayOnPan` property to `false` if
    you know that Internet Explorer will be the primary browser for your application.
    By default, this property is set to `true` but setting it to `false` will turn
    graphics off during pan operations, thus improving the performance of the application
    on Internet Explorer. The following code block explains this process in detail:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道Internet Explorer将是应用程序的主要浏览器，您可能希望将`displayOnPan`属性设置为`false`。默认情况下，此属性设置为`true`，但将其设置为`false`将在平移操作期间关闭图形，从而提高Internet
    Explorer上应用程序的性能。以下代码块详细解释了这个过程：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The display mode, defined with the `mode` parameter, is probably the most important
    optional parameter. So, we'll cover this in more detail in the next few sections.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 显示模式，由`mode`参数定义，可能是最重要的可选参数。因此，我们将在接下来的几节中更详细地介绍这个内容。
- en: Defining display modes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义显示模式
- en: 'When creating a feature layer, you need to specify a mode for retrieving features.
    Because the mode determines when and how features are brought from the server
    to the client, your choice can affect the speed and appearance of your application.
    You have mode choices as shown in the following diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 创建要素图层时，您需要指定检索要素的模式。因为模式决定了何时以及如何将要素从服务器传输到客户端，您的选择会影响应用程序的速度和外观。您可以在以下图表中看到模式选择：
- en: '![Defining display modes](graphics/7965_04_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![定义显示模式](graphics/7965_04_01.jpg)'
- en: Snapshot mode
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快照模式
- en: The snapshot mode retrieves all the features from the layer and streams them
    to the client browser, where they are added to the map. So, you need to carefully
    consider the size of your layer before using this mode. Generally, you will want
    to use this mode only with small datasets. Large datasets in snapshot mode can
    significantly degrade the performance of your application. The benefit of snapshot
    mode is that since all features from the layer are returned to the client, there
    is no need to return to the server for additional data. This raises the potential
    for a significant boost in your application's performance.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 快照模式检索图层中的所有要素，并将它们流式传输到客户端浏览器，然后将它们添加到地图中。因此，在使用此模式之前，您需要仔细考虑图层的大小。通常情况下，您只会在处理小型数据集时使用此模式。快照模式下的大型数据集可能会显著降低应用程序的性能。快照模式的好处是，由于从图层返回了所有要素到客户端，因此无需返回服务器以获取额外数据。这提高了应用程序性能的潜力。
- en: 'ArcGIS imposes a limit of 1000 features that may be returned at any one time,
    though this number is configurable through ArcGIS Server administration. In practical
    terms, you will want to use this mode only when you''re working with small datasets:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS对一次最多返回的要素数量施加了限制，尽管这个数字可以通过ArcGIS Server管理进行配置。在实际操作中，您只会在处理小型数据集时使用此模式：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The on-demand mode
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按需模式
- en: 'The on-demand mode retrieves features only as and when needed. What this amounts
    to is that all features within the current view extent are returned. Therefore,
    each time a zoom or pan operation takes place, features are streamed to the client
    from the server. This tends to work well with large datasets that won''t operate
    efficiently in snapshot mode. It does require a round trip to the server to fetch
    the features each time the map extent changes but for large datasets, this is
    preferable. The following code example shows you how to set a `FeatureLayer` object
    to the `ONDEMAND` mode:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按需模式仅在需要时检索要素。这意味着当前视图范围内的所有要素都会被返回。因此，每次进行缩放或平移操作时，要素都会从服务器流式传输到客户端。这在大型数据集中效果很好，因为在快照模式下效率不高。这确实需要往返服务器以获取每次地图范围变化时的要素，但对于大型数据集来说，这是可取的。以下代码示例向您展示了如何将`FeatureLayer`对象设置为`ONDEMAND`模式：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The selection-only mode
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅选择模式
- en: 'The selection-only mode does not request features initially. Instead, features
    are returned only when a selection is made on the client. Selected features are
    streamed to the client from the server. These selected features are then held
    on the client. The following code example shows you how to set a `FeatureLayer`
    object to `SELECTION` mode:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 仅选择模式不会最初请求要素。相反，只有在客户端进行选择时才返回要素。所选要素会从服务器流式传输到客户端，然后在客户端上保存。以下代码示例向您展示了如何将`FeatureLayer`对象设置为`SELECTION`模式：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting a definition expression
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置定义表达式
- en: 'Definition expressions are used to limit the features that are streamed to
    the client to only those features that match the attribute constraints. `FeatureLayer`
    contains a `setDefinitionExpression()` method that is used to create the definition
    expression. All features that meet the specified criteria will be returned to
    be displayed on the map. Expressions are built using traditional SQL expressions
    as seen in the following code example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 定义表达式用于限制流向客户端的要素，仅限于符合属性约束的要素。`FeatureLayer`包含一个`setDefinitionExpression()`方法，用于创建定义表达式。满足指定条件的所有要素将返回以在地图上显示。表达式是使用传统的SQL表达式构建的，如以下代码示例所示：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can retrieve the currently set definition expression by using the `FeatureLayer.getDefinitionExpression()`
    method, which returns a string containing the expression.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`FeatureLayer.getDefinitionExpression()`方法检索当前设置的定义表达式，该方法返回包含表达式的字符串。
- en: Feature selection
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要素选择
- en: 'The feature layer also supports feature selection, which is simply a subset
    of features in a layer that is used for viewing, editing, analysis, or input to
    other operations. Features are added to or removed from a selection set using
    either spatial or attribute criteria and can easily be drawn with a different
    symbol than those used in the normal display of a layer. The `selectFeatures(query)`
    method on `FeatureLayer` is used to create a selection set and takes a `Query`
    object as input. This has been explained in the following code example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层还支持要素选择，这只是图层中用于查看、编辑、分析或输入到其他操作的要素子集。使用空间或属性条件将要素添加到选择集或从选择集中删除，并且可以轻松地用不同于图层正常显示中使用的符号绘制。`FeatureLayer`上的`selectFeatures(query)`方法用于创建选择集，并以`Query`对象作为输入。这在以下代码示例中已经解释过了：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We haven't discussed the `Query` object yet but as you can imagine, it is used
    to define the input parameters for an attribute or a spatial query. In this particular
    code example, a spatial query has been defined.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论`Query`对象，但是您可以想象，它用于定义属性或空间查询的输入参数。在此特定代码示例中，已定义了空间查询。
- en: 'The following screenshot shows a feature that has been selected. A selection
    symbol has been applied to the selected feature:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了已选择的要素。已将选择符号应用于所选要素：
- en: '![Feature selection](graphics/7965_04_5.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![要素选择](graphics/7965_04_5.jpg)'
- en: 'Any definition expression set on a layer either through the application or
    on the layer inside the map document file will be honored. Setting a symbol that
    is to be used for the selected features is quite easy and simply involves creating
    a symbol and then using the `setSelectionSymbol()` method on `FeatureLayer`. Selected
    features will automatically be assigned this symbol. You can opt to define a new
    selection set, add features to an existing selection set, or remove features from
    a selection set through various constants, including `SELECTION_NEW`, `SELECTION_ADD`,
    and `SELECTION_SUBTRACT`. A new selection set is defined in the following code
    example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在图层上设置的任何定义表达式，无论是通过应用程序还是在地图文档文件内的图层上设置，都将受到尊重。设置用于所选要素的符号非常简单，只需创建一个符号，然后在FeatureLayer上使用`setSelectionSymbol()`方法。所选要素将自动分配此符号。您可以选择定义新的选择集，将要素添加到现有选择集，或从选择集中删除要素，通过各种常量，包括`SELECTION_NEW`，`SELECTION_ADD`和`SELECTION_SUBTRACT`。新的选择集在以下代码示例中定义：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In addition, you can define the callback and errback functions to process the
    returned features or handle any errors.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以定义回调和错误处理函数来处理返回的要素或处理任何错误。
- en: Rendering a feature layer
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染要素图层
- en: A renderer can be used to define a set of symbols for a feature layer or a graphics
    layer. These symbols can have different colors and/or sizes that are based on
    an attribute. The five types of renderer in the ArcGIS Server API for JavaScript
    include `SimpleRenderer`, `ClassBreaksRenderer`, `UniqueValueRenderer`, `DotDensityRenderer`,
    and `TemporalRenderer`. We'll examine each of these renderers in this section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染器可用于为要素图层或图形图层定义一组符号。这些符号可以基于属性具有不同的颜色和/或大小。ArcGIS Server API for JavaScript中的五种渲染器类型包括`SimpleRenderer`，`ClassBreaksRenderer`，`UniqueValueRenderer`，`DotDensityRenderer`和`TemporalRenderer`。我们将在本节中检查每个渲染器。
- en: 'The rendering process will be the same, regardless of the type of renderer
    you use. You first need to create an instance of the renderer, define the symbology
    for the renderer, and finally apply the renderer to the feature layer. This rendering
    process has been illustrated in the following diagram:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用何种类型的渲染器，渲染过程都将是相同的。您首先需要创建渲染器的实例，为渲染器定义符号，最后将渲染器应用于要素图层。此渲染过程已在以下图表中说明：
- en: '![Rendering a feature layer](graphics/7965_04_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![渲染要素图层](graphics/7965_04_06.jpg)'
- en: 'The following code example shows the basic programmatic structure to create
    and apply a renderer to a `FeatureLayer` object:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了创建和应用渲染器到`FeatureLayer`对象的基本编程结构：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The simplest type of renderer is `SimpleRenderer`, which simply applies the
    same symbol for all graphics.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的渲染器类型是`SimpleRenderer`，它只是为所有图形应用相同的符号。
- en: '`UniqueValueRenderer` can be used to symbolize graphics, based on a matching
    attribute that is typically a field containing string data.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`UniqueValueRenderer`可用于根据通常包含字符串数据的匹配属性对图形进行符号化。'
- en: '![Rendering a feature layer](graphics/7965_04_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![渲染要素图层](graphics/7965_04_08.jpg)'
- en: 'For example, if you have a state feature class, you might want to symbolize
    each feature based on a region name. Each region would have a different symbol.
    The following code example shows how you can programmatically create a `UniqueValueRenderer`
    and add values and symbols to the structure:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个州要素类，您可能希望根据区域名称对每个要素进行符号化。每个区域都将有不同的符号。以下代码示例显示了如何以编程方式创建`UniqueValueRenderer`并向结构添加值和符号：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A `ClassBreaksRenderer` works with data that is stored as a numeric attribute.
    Each graphic will be symbolized according to the value of that particular attribute,
    in accordance with breaks in the data. In the following screenshot, you see an
    example of a `ClassBreaksRenderer` that has been applied to county-level data
    for Kansas:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClassBreaksRenderer`用于处理存储为数值属性的数据。每个图形将根据该特定属性的值以及数据中的断点进行符号化。在下面的屏幕截图中，您可以看到已应用于堪萨斯县级数据的`ClassBreaksRenderer`的示例：'
- en: '![Rendering a feature layer](graphics/7965_04_09.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Rendering a feature layer](graphics/7965_04_09.jpg)'
- en: 'The breaks define the values at which the symbol will change. For example,
    with a Parcel feature class, you might want to symbolize parcels based on values
    found in the `PROPERTYVALUE` field. You''d first want to create a new instance
    of `ClassBreaksRenderer` and then define the breaks for the data. The `Infinity`
    and `–Infinity` values can be used as the lower and upper boundaries for your
    data if needed, as seen in the following code example, where we use the `Infinity`
    keyword to signify a class break for any values greater than 250,000:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 断点定义了符号将发生变化的值。例如，对于包裹要素类，您可能希望根据`PROPERTYVALUE`字段中的值对包裹进行符号化。您首先需要创建`ClassBreaksRenderer`的新实例，然后为数据定义断点。如果需要，可以使用`Infinity`和`-Infinity`值作为数据的下限和上限边界，如下面的代码示例所示，我们在这里使用`Infinity`关键字来表示大于250,000的任何值的类断点：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A `TemporalRenderer` provides time-based rendering of features. This type of
    renderer is often used to display historical information or near real-time data.
    It allows you to define how observations and tracks are rendered.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`TemporalRenderer`提供了基于时间的要素渲染。这种类型的渲染器通常用于显示历史信息或近实时数据。它允许您定义如何渲染观测和轨迹。'
- en: 'The following code example explains how to create a `TemporalRenderer` using
    a `ClassBreaksRenderer` and applying it to a `featureLayer` object. The `ClassBreaksRenderer`
    is used to define symbols by magnitude; the larger the magnitude, the larger the
    symbol:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例解释了如何使用`ClassBreaksRenderer`创建`TemporalRenderer`并将其应用于`featureLayer`对象。`ClassBreaksRenderer`用于按大小定义符号；大小越大，符号越大：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: An `ager` symbol has been defined here, which determines how the feature's symbol
    changes as time progresses.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义了一个`ager`符号，它确定随着时间的推移特征符号的变化。
- en: 'The final type of renderer that we''ll discuss is the `DotDensityRenderer`.
    The following screenshot depicts a map that has been created using a `DotDensityRenderer`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的最后一种渲染器是`DotDensityRenderer`。以下屏幕截图显示了使用`DotDensityRenderer`创建的地图：
- en: '![Rendering a feature layer](graphics/7965_04_10.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Rendering a feature layer](graphics/7965_04_10.jpg)'
- en: This type of renderer enables you to create dot density visualizations of data
    that show spatial density of a discrete spatial phenomenon such as population
    density.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的渲染器使您能够创建数据的点密度可视化，显示离散空间现象的空间密度，如人口密度。
- en: 'The following code example explains the creation of a `DotDensityRenderer`
    based on the `pop` field and defines a `dotValue` of 1000 and `dotSize` equal
    to 2\. This will create one dot per two pixels in size for a population of 1000:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例解释了基于`pop`字段创建`DotDensityRenderer`，并定义了`dotValue`为1000和`dotSize`等于2。这将为1000人口创建每两个像素大小的一个点：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Time to practice with FeatureLayer
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习使用FeatureLayer
- en: In this exercise, you will use the `FeatureLayer` object to set a definition
    expression on a layer, draw the features that match the definition expression
    as graphics, and respond to a hover event over the features.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将使用`FeatureLayer`对象在图层上设置定义表达式，将匹配定义表达式的要素绘制为图形，并响应要素上的悬停事件。
- en: 'Perform the following steps to complete the exercise:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成练习：
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html)中打开JavaScript沙箱。
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code block:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我在下面的代码块中突出显示的`<script>`标签中删除JavaScript内容：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the variables that you''ll use in the application inside the `<script>`
    tag:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`标签内创建应用程序中将使用的变量：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the `require()` function that defines the resources you''ll use in this
    application:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`require()`函数，定义在此应用程序中将使用的资源：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In your web browser, navigate to [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5).
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中，导航到[http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5)。
- en: We will be using the `states` layer for this exercise. What we want to do is
    apply a definition expression to the `states` layer that will display only those
    states that have a median age greater than `36`. These states will be displayed
    as graphics on the map, and an info window will be displayed containing the median
    age, median age for males, and median age for females for that state when the
    user hovers the mouse over the states that meet the definition expression. In
    addition, the state will be outlined in red. The fields we will use from the states
    layer include `STATE_NAME`, `MED_AGE`, `MED_AGE_M`, and `MED_AGE_F`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在此练习中使用`states`图层。我们要做的是对`states`图层应用定义表达式，只显示那些具有中位年龄大于`36`的州。这些州将显示为地图上的图形，并在用户将鼠标悬停在满足定义表达式的州上时，将显示包含该州的中位年龄、男性中位年龄和女性中位年龄的信息窗口。此外，该州将用红色轮廓显示。我们将从`states`图层中使用的字段包括`STATE_NAME`、`MED_AGE`、`MED_AGE_M`和`MED_AGE_F`。
- en: 'Create the `Map` object as seen in the following code example:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`Map`对象如下代码示例所示：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add a `map.load` event that triggers the creation of a `map.graphics.mouse-out`
    event, which clears any existing graphics and info windows. The following code
    example explains this in detail:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`map.load`事件，触发创建`map.graphics.mouse-out`事件，清除任何现有的图形和信息窗口。以下代码示例详细解释了这一点：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a new `FeatureLayer` object that points to the `states` layer that you
    had examined earlier. You will also specify that the `SNAPSHOT` mode be used to
    return the features, define the output fields, and set the definition expression.
    Add the following code to your application for this purpose:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指向您之前检查过的`states`图层的新`FeatureLayer`对象。您还将指定使用`SNAPSHOT`模式返回要素，定义输出字段，并设置定义表达式。为此，将以下代码添加到您的应用程序中：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, we have used the `new` keyword to define a new instance of `FeatureLayer`
    that points to the `states` layer at the `rest` endpoint noted in the code. When
    defining a new instance of `FeatureLayer`, we have included a couple of properties
    including `mode` and `outFields`. The mode property can be set to `SNAPSHOT`,
    `ONDEMAND`, or `SELECTION`. Since the `states` layer contains a relatively small
    number of features, we can use the `SNAPSHOT` mode in this case. This mode retrieves
    all the features from the layer when it is added to the map, and therefore does
    not require any additional trips to the server to retrieve additional features
    from the layer. We are also specifying the `outFields` property, which is an array
    of fields that will be returned. We will be displaying these fields in an info
    window when the user hovers over the state. Finally, we set our definition expression
    on the layer to display only those features (states) where the median age is greater
    than `36`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`new`关键字定义了一个指向代码中指定的`rest`端点上的`states`图层的新`FeatureLayer`实例。在定义`FeatureLayer`的新实例时，我们包括了一些属性，包括`mode`和`outFields`。mode属性可以设置为`SNAPSHOT`、`ONDEMAND`或`SELECTION`。由于`states`图层包含相对较少的要素，我们可以在这种情况下使用`SNAPSHOT`模式。这种模式在将图层添加到地图时检索图层中的所有要素，因此不需要额外的服务器访问来检索图层中的其他要素。我们还指定了`outFields`属性，这是一个将被返回的字段数组。当用户悬停在州上时，我们将显示这些字段在信息窗口中。最后，我们在图层上设置了我们的定义表达式，只显示那些中位年龄大于`36`的要素（州）。
- en: 'In this step, you will create a symbol and apply a renderer to the features
    (states) that are returned from the definition expression. You will also add the
    `FeatureLayer` to the map. Add the following lines of code just below the code
    that you added in the previous step:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，您将创建一个符号并将渲染器应用到从定义表达式返回的要素（州）上。您还将将`FeatureLayer`添加到地图中。将以下代码添加到您在上一步中添加的代码的下方：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using the output fields that you defined earlier, create an `InfoTemplate`
    object. Add the following lines of code to your application just below the lines
    that you added in the previous step. Note the inclusion of the output fields that
    are embedded inside brackets and preceded by a dollar sign:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您之前定义的输出字段，创建一个`InfoTemplate`对象。将以下代码添加到您在上一步中添加的代码的下方。注意嵌在括号内并以美元符号开头的输出字段的包含：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, add the following lines of code to create a graphic that will be displayed
    when the user hovers the mouse over a state:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下代码以创建一个图形，当用户将鼠标悬停在一个州上时将显示该图形：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The final step is to display the highlight symbol and info template that we
    created in the previous steps. This happens each time the user hovers the mouse
    over a state. Add the following code block below the last lines of code that you
    entered previously. Here, we are using `on()` to wire an event (mouse over) to
    a function, which will respond each time the event occurs. The `mouse-over` event
    handler in this case will clear any existing graphics from the `GraphicsLayer`
    object, create the info template that you created in a previous step, create a
    highlight symbol and add it to the `GraphicsLayer`, and then show the `InfoWindow`
    object. This has been explained in the following code block:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是显示我们在前面步骤中创建的高亮符号和信息模板。每当用户将鼠标悬停在一个州上时，就会发生这种情况。在您之前输入的代码的最后一行下面添加以下代码块。在这里，我们使用`on()`将事件（鼠标悬停）与一个函数连接起来，每次事件发生时都会做出响应。在这种情况下，`mouse-over`事件处理程序将清除`GraphicsLayer`对象中的任何现有图形，创建您在上一步中创建的信息模板，创建高亮符号并将其添加到`GraphicsLayer`，然后显示`InfoWindow`对象。这在以下代码块中已经解释过了：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You may want to review the solution file (`featurelayer.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望查看解决方案文件（`featurelayer.html`）中的`ArcGISJavaScriptAPI`文件夹，以验证您的代码是否已正确编写。
- en: 'Execute the code by clicking on the **Run** button and you should see the following
    output if everything has been coded correctly. You should see a map similar to
    the following screenshot. Mouse over one of the highlighted states to see an info
    window as shown in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**运行**按钮执行代码，如果一切编码正确，您应该看到以下输出。您应该看到一个类似以下截图的地图。将鼠标悬停在其中一个高亮显示的州上，就会看到一个信息窗口，如下截图所示：
- en: '![Time to practice with FeatureLayer](graphics/7965_04_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![使用FeatureLayer进行练习的时间](graphics/7965_04_11.jpg)'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The JavaScript API for ArcGIS Server offers a `FeatureLayer` object to work
    with client-side graphic features. This inherits from the graphics layer, but
    also offers additional capabilities, such as the ability to perform queries and
    selections and support definition expressions. A feature layer can also be used
    for web editing. It differs from tiled and dynamic map service layers because
    feature layers bring geometry information across to the client computer, to be
    drawn by the web browser. This potentially cuts down on the round trips to the
    server and can improve the performance of your application on the server side.
    A client can request the features it needs, and perform selections and queries
    on those features without having to request more information from the server.
    The `FeatureLayer` object is especially appropriate for layers that respond to
    user interactions such as mouse clicks or hovers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server的JavaScript API提供了一个`FeatureLayer`对象，用于处理客户端图形要素。这个对象继承自图形图层，但也提供了额外的功能，比如执行查询和选择以及支持定义表达式。特征图层还可以用于Web编辑。它与瓦片和动态地图服务图层不同，因为特征图层将几何信息传输到客户端计算机，由Web浏览器绘制。这可能会减少与服务器之间的往返次数，并且可以提高服务器端应用程序的性能。客户端可以请求所需的要素，并对这些要素执行选择和查询，而无需从服务器请求更多信息。`FeatureLayer`对象特别适用于响应用户交互的图层，如鼠标点击或悬停。
