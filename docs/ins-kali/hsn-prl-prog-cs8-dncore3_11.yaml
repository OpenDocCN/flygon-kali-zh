- en: Introduction to Asynchronous Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程简介
- en: In the previous chapters, we have seen how parallel programming works. Parallelism
    is about creating small tasks called units of work that can be executed simultaneously
    by one or more application threads. Since threads run inside the application process,
    they notify the called thread once they finish using delegates.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经看到并行编程是如何工作的。并行性是关于创建称为工作单元的小任务，可以由一个或多个应用程序线程同时执行。由于线程在应用程序进程内运行，它们在使用委托通知调用线程完成后通知调用线程。
- en: In this chapter, we will start by introducing the difference between synchronous
    code and asynchronous code. Then, we'll discuss when to use asynchronous code
    and when to avoid it. We will also discuss how asynchronous patterns have evolved
    over time. Finally, we will see how new features in parallel programming help
    us get around the complexities of asynchronous code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先介绍同步代码和异步代码之间的区别。然后，我们将讨论何时使用异步代码以及何时避免使用它。我们还将讨论异步模式如何随时间演变。最后，我们将看到并行编程中的新特性如何帮助我们解决异步代码的复杂性。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Synchronous versus asynchronous code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步与异步代码
- en: When to use asynchronous programming
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用异步编程
- en: When to avoid asynchronous programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时避免异步编程
- en: Problems you can solve using asynchronous code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步代码可以解决的问题
- en: Asynchronous patterns in early versions of C#
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#早期版本中的异步模式
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you should have a good understanding of TPL and C#.
    The source code for this chapter is available on GitHub at [https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter08).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，您应该对TPL和C#有很好的理解。本章的源代码可在GitHub上找到[https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter08)。
- en: Types of program execution
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序执行的类型
- en: At any point in time, program flow can either be synchronous or asynchronous.
    Synchronous code is easier to write and maintain but comes with performance overheads
    and UI responsiveness issues. Asynchronous code improves the performance and responsiveness
    of an application as a whole but, in turn, is difficult to write, debug, and maintain.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时刻，程序流程可以是同步的，也可以是异步的。同步代码编写和维护更容易，但会带来性能开销和UI响应性问题。异步代码可以提高整个应用程序的性能和响应性，但反过来，编写、调试和维护都更加困难。
- en: We'll understand the synchronous and asynchronous way of program execution in
    detail in the following subsections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下子章节中详细了解程序执行的同步和异步方式。
- en: Understanding synchronous program execution
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解同步程序执行
- en: In the case of synchronous execution, control never moves out of the calling
    thread. Code is executed one line at a time, and, when a function is called, the
    calling thread waits for the function to finish executing before executing the
    next line of code. Synchronous programming is the most commonly used method of
    programming and it works well due to the increase in CPU performance we have seen
    over the past few years. With faster processors, the code completes sooner.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在同步执行的情况下，控制永远不会移出调用线程。代码一次执行一行，当调用函数时，调用线程会等待函数执行完成后再执行下一行代码。同步编程是最常用的编程方法，由于过去几年CPU性能的提高，它运行良好。随着处理器速度更快，代码完成得更快。
- en: 'With parallel programming, we have seen that we can create multiple threads
    that can run concurrently. We can start many threads but also make the main program
    flow synchronous by calling structures such as `Thread.Join` and `Task.Wait`.
    Let''s take a look at an example of synchronous code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过并行编程，我们已经看到可以创建多个可以并发运行的线程。我们可以启动许多线程，但也可以通过调用`Thread.Join`和`Task.Wait`等结构使主程序流程同步。让我们看一个同步代码的例子：
- en: We start the application thread by calling the `M1()` method.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过调用`M1()`方法启动应用程序线程。
- en: At line 3, `M1()` calls `M3()` synchronously.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第3行，`M1()`同步调用`M3()`。
- en: The moment the `M2()` method is called, the control execution transfers to the `M1()` method.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`M2()`方法的时刻，控制执行转移到`M1()`方法。
- en: Once the called method (`M2`) is finished, the control returns to the main thread,
    which executes the rest of the code in `M1()`, that is, lines 4 and 5.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦被调用的方法（`M2`）完成，控制返回到主线程，执行`M1()`中的其余代码，即第4和第5行。
- en: The same thing happens on line 5 with a call to `M2`. Line 6 executes when `M2`
    has finished.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第5行对`M2`的调用也是同样的情况。当`M2`完成时，第6行执行。
- en: 'The following is a diagrammatic representation of synchronous code execution:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是同步代码执行的图解表示：
- en: '![](img/f5a8b41e-6fed-47f0-a470-48987bd9688d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5a8b41e-6fed-47f0-a470-48987bd9688d.png)'
- en: In the next section, we will try to understand more about writing asynchronous
    code, which will help us compare both program flows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将尝试更多地了解编写异步代码，这将帮助我们比较两种程序流程。
- en: Understanding asynchronous program execution
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解异步程序执行
- en: The asynchronous model allows us to execute multiple tasks concurrently. If
    we call a method asynchronously, the method is executed in the background while
    the thread that is called returns immediately and executes the next line of code.
    The asynchronous method may or may not create a thread, depending on the type
    of task we're dealing with. When the asynchronous method finishes, it returns
    the result to the program via callbacks. An asynchronous method can be void, in
    which case we don't need to specify callbacks.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 异步模型允许我们同时执行多个任务。如果我们异步调用一个方法，该方法将在后台执行，而调用的线程立即返回并执行下一行代码。异步方法可能会创建线程，也可能不会，这取决于我们处理的任务类型。当异步方法完成时，它通过回调将结果返回给程序。异步方法可以是void，这种情况下我们不需要指定回调。
- en: 'The following is a diagram showing a caller thread executing the `M1()` method,
    which calls an async method called `M2()`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个图表，显示了一个调用者线程执行`M1()`方法，该方法调用了一个名为`M2()`的异步方法：
- en: '![](img/79ed2091-8666-497a-b56e-5f3c30bb189a.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79ed2091-8666-497a-b56e-5f3c30bb189a.png)'
- en: 'Contrary to the previous approach, here, caller thread doesn''t wait for `M2()`
    to finish. If there is any output that needs to be utilized from `M2()`, it needs
    to be put into some other method, say, `M3()`, here. This is what happens:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的方法相反，在这里，调用者线程不等待`M2()`完成。如果需要利用`M2()`的任何输出，需要将其放入其他方法，比如`M3()`。这是发生的事情：
- en: While executing `M1()`, the caller thread makes asynchronous calls to `M2()`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行`M1()`时，调用者线程对`M2()`进行异步调用。
- en: The caller thread provides a callback function, say, `M3()`, while calling `M2()`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用者线程在调用`M2()`时提供回调函数，比如`M3()`。
- en: The caller thread doesn't wait for `M2()` to finish; instead, it finishes the
    rest of the code in `M1()` (if there is any to finish).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用者线程不等待`M2()`完成，而是完成`M1()`中的其余代码（如果有的话）。
- en: '`M2()` will be executed by the CPU either instantly in a separate thread or
    at a later date.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`M2()`将由CPU立即在一个单独的线程中执行，或者在以后的某个日期执行。'
- en: Once `M2()` finishes, `M3()` is called, which receives output from `M2()` and
    processes it.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`M2()`完成，将调用`M3()`，`M3()`接收来自`M2()`的输出并对其进行处理。
- en: As you can see, it's easy to understand the synchronous program's execution,
    whereas asynchronous code comes with code branching. We will learn how to mitigate
    this complexity using the `async` and `await` keywords in [Chapter 9](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml),
    *Async, Await, and Task-Based Asynchronous Programming Basics*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，理解同步程序的执行很容易，而异步代码则带有代码分支。我们将学习如何使用`async`和`await`关键字在[第9章](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml)中减轻这种复杂性，*异步、等待和基于任务的异步编程基础*。
- en: When to use asynchronous programming
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用异步编程
- en: There are many situations in which **Direct Memory Access** (**DMA**) is used
    to access the host system or I/O operations (such as files, databases, or network
    access) are used, which is where processing is done by the CPU rather than the
    application thread. In the preceding scenario, the calling thread makes a call
    to the I/O API and waits for the task to complete by moving to a blocked state.
    When the task is completed by the CPU, the thread is unblocked and finishes the
    rest of the method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下会使用**直接内存访问**（**DMA**）来访问主机系统或进行I/O操作（如文件、数据库或网络访问），这是CPU而不是应用程序线程进行处理。在前面的情况下，调用线程调用I/O
    API并等待任务完成，从而进入阻塞状态。当CPU完成任务时，线程将解除阻塞并完成方法的其余部分。
- en: Using asynchronous methods, we can improve the application's performance and
    responsiveness. We can also execute a method via a different thread.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用异步方法，我们可以提高应用程序的性能和响应能力。我们还可以通过不同的线程执行一个方法。
- en: Writing asynchronous code
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写异步代码
- en: Asynchronous programming is not new to C#. We used to write asynchronous code
    in earlier versions of C# using the `BeginInvoke` method of the `Delegate` class,
    as well as by using the `IAsyncResult` interface implementations. With the introduction
    of TPL, we started writing asynchronous code using the `Task` class. From C# 5.0
    onward, the `async` and `await` keywords have been the preferred choice for developers
    writing asynchronous code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程对C#来说并不是什么新鲜事。我们过去在较早版本的C#中使用`Delegate`类的`BeginInvoke`方法以及使用`IAsyncResult`接口实现来编写异步代码。随着TPL的引入，我们开始使用`Task`类编写异步代码。从C#
    5.0开始，开发人员编写异步代码的首选选择是使用`async`和`await`关键字。
- en: 'We can write asynchronous code in the following ways:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以以下方式编写异步代码：
- en: Using the `Delegate.BeginInvoke()` method
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Delegate.BeginInvoke()`方法
- en: Using the `Task` class
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Task`类
- en: Using the `IAsyncResult` interface
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`IAsyncResult`接口
- en: Using the `async` and `await` keywords
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`async`和`await`关键字
- en: In the subsequent sections, we'll look at each of these in detail with code
    examples, except for the `async` and `await` keywords – [Chapter 9](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml), *Async,
    Await, and Task-Based Asynchronous Programming Basics*, is dedicated to them!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将通过代码示例详细讨论每个内容，除了`async`和`await`关键字 - [第9章](1b0d3653-dd80-486b-96fc-b17000f9439d.xhtml)专门讨论它们！
- en: Using the BeginInvoke method of the Delegate class
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Delegate类的BeginInvoke方法
- en: Using `Delegate.BeginInvoke` is no longer supported in .NET Core, but we will
    look at it here in terms of backward compatibility with earlier versions of .NET.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中不再支持使用`Delegate.BeginInvoke`，但是我们将在这里讨论它，以便与较早版本的.NET向后兼容。
- en: We can use the `Delegate.BeginInvoke` method to call any method asynchronously.
    This can be done to improve the UI's performance if some tasks need to be moved
    from the UI thread into the background.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Delegate.BeginInvoke`方法异步调用任何方法。如果需要将一些任务从UI线程移动到后台以提高UI的性能，可以这样做。
- en: 'Let''s look at a `Log` method as an example. The following code works synchronously
    and writes logs. For the sake of demonstration, the logging code has been removed
    and replaced with a dummy 5-second delay, after which the `Log` method prints
    a line to the console:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以`Log`方法为例。以下代码以同步方式工作并写入日志。为了演示，日志记录代码已被删除，并替换为一个虚拟的5秒延迟，之后`Log`方法将在控制台打印一行：
- en: 'Here is a dummy `Log` method that takes 5 seconds to finish:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个虚拟的`Log`方法，需要5秒才能完成：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the call to the `Log` method from the `Main` method:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从`Main`方法调用`Log`方法：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Clearly, a 5-second delay for writing logs is too long. Since we don't expect
    any output from the `Log` method (writing to the console is just for demonstration
    purposes), it makes sense to call it asynchronously and return the response to
    the caller immediately.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，写日志需要5秒的延迟太长了。由于我们不希望从`Log`方法中得到任何输出（将控制台输出仅用于演示目的），因此将其异步调用并立即将响应返回给调用者是有意义的。
- en: 'The following is the output of the program as it is currently:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是当前程序的输出：
- en: '![](img/39f2ec02-f68d-4499-82f1-483b85baf2ca.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39f2ec02-f68d-4499-82f1-483b85baf2ca.png)'
- en: 'We can add a `Log` method call to the preceding method. Then, we can wrap the
    `Log` method call inside a delegate and call the `BeginInvoke` method on the delegate,
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在前面的方法中添加一个`Log`方法调用。然后，我们可以将`Log`方法调用包装在一个委托中，并在委托上调用`BeginInvoke`方法，如下所示：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This time, when we execute the code, we will see asynchronous behavior in older
    versions of .NET. In .NET Core, however, the code breaks at runtime with the following
    error message:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，当我们执行代码时，我们将在较早版本的.NET中看到异步行为。然而，在.NET Core中，代码在运行时会出现以下错误消息：
- en: '`System.PlatformNotSupportedException: ''Operation is not supported on this
    platform.''`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.PlatformNotSupportedException: ''Operation is not supported on this
    platform.''`'
- en: 'In .NET Core, wrapping the synchronous methods into async delegates is no longer
    supported for two main reasons:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中，不再支持将同步方法包装成异步委托，原因有两个：
- en: Async delegates use an `IAsyncResult`-based async pattern, which is not supported
    by .NET Core base class libraries.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步委托使用基于`IAsyncResult`的异步模式，这在.NET Core基类库中不受支持。
- en: Async delegates are not possible without `System.Runtime.Remoting`, which is
    also not supported in .NET Core.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在.NET Core中，没有`System.Runtime.Remoting`，因此无法使用异步委托。
- en: Using the Task class
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Task类
- en: 'Another way to implement asynchronous programming in .NET Core is to use the `System.Threading.Tasks.Task`
    class, as we mentioned earlier. The preceding code can be changed to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET Core中实现异步编程的另一种方法是使用`System.Threading.Tasks.Task`类，正如我们之前提到的。前面的代码可以改为以下内容：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will give us the required output without changing too much of the current
    code flow:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供所需的输出，而不会改变当前代码流的太多内容：
- en: '![](img/414f388a-a105-4677-b001-ec47d471dbe8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/414f388a-a105-4677-b001-ec47d471dbe8.png)'
- en: We discussed `Task` in [Chapter 2](a001ad9c-7e57-4af7-961f-91c1e983b937.xhtml),
    *Task Parallelism*. The `Task` class provides us with a very powerful way to implement
    task-based asynchronous patterns.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](a001ad9c-7e57-4af7-961f-91c1e983b937.xhtml)中讨论了`Task`，*任务并行性*。`Task`类为我们提供了一种非常强大的实现基于任务的异步模式的方法。
- en: Using the IAsyncResult interface
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IAsyncResult接口
- en: 'The `IAsyncResult` interface has been used to implement asynchronous programming
    in older versions of C#. The following is some example code that works well in
    earlier versions of .NET:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`IAsyncResult`接口已经被用来在早期版本的C#中实现异步编程。以下是一些在较早版本的.NET中运行良好的示例代码：'
- en: 'First, we create `AsyncCallback` that will be executed when the async method
    finishes:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`AsyncCallback`，当异步方法完成时将执行它。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we create a delegate that will execute an `Add` method with the parameters
    that are passed. Once finished, it will execute the callback method wrapped by
    `AsyncCallBack`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个委托，该委托将使用传递的参数执行`Add`方法。完成后，它将执行由`AsyncCallBack`包装的回调方法：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the `MyCallBack` method is called, it returns the `IAsyncResult` instance.
    To get the underlying result, state, and callback, we need to cast the `IAsyncResult`
    instance to `AsyncResult`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用`MyCallBack`方法时，它会返回`IAsyncResult`实例。要获取底层结果、状态和回调，我们需要将`IAsyncResult`实例转换为`AsyncResult`：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once we have `AsyncResult`, we can call `EndInvoke` to get the values that
    have been returned by the `Add` method:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了`AsyncResult`，我们就可以调用`EndInvoke`来获取`Add`方法返回的值：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the complete code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的代码：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Unfortunately, .NET Core has no support for `System.Runtime.Remoting` and so
    the preceding code will not work in .NET Core. We can only use task-based asynchronous
    patterns for all `IAsyncResult` scenarios:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，.NET Core不支持`System.Runtime.Remoting`，因此前面的代码在.NET Core中不起作用。我们只能对所有`IAsyncResult`场景使用基于任务的异步模式：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code reads data from the file using the `FileStream` class. `FileStream`
    implements `IAsyncResult` and thus supports the `BeginRead` and `EndRead` methods. Then,
    we used the `Task.Factory.FromAsync` method to wrap `IAsyncResult` and return
    the data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用`FileStream`类从文件中读取数据。`FileStream`实现了`IAsyncResult`，因此支持`BeginRead`和`EndRead`方法。然后，我们使用`Task.Factory.FromAsync`方法来包装`IAsyncResult`并返回数据。
- en: When not to use asynchronous programming
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时不使用异步编程
- en: Asynchronous programming can be very beneficial when it comes to creating a
    responsive UI and improving the application's performance. There are, however,
    scenarios in which asynchronous programming should be avoided as it may reduce
    performance and increase the complexity of the code. In the following subsections,
    we'll go through a few situations in which it is best not to use asynchronous
    programming.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程在创建响应式UI和提高应用程序性能方面非常有益。然而，有些情况下应避免使用异步编程，因为它可能降低性能并增加代码的复杂性。在接下来的小节中，我们将讨论一些最好不要使用异步编程的情况。
- en: In a single database without connection pooling
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在单个没有连接池的数据库中
- en: In cases where we have a single database server that doesn't have connection
    pooling enabled, asynchronous programming will have no benefits. With long-running
    connections and multiple requests, there will be performance bottlenecks, irrespective
    of whether calls are made synchronously or asynchronously.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在只有一个没有启用连接池的数据库服务器的情况下，异步编程将没有任何好处。无论是同步还是异步调用，长时间的连接和多个请求都会导致性能瓶颈。
- en: When it is important that the code is easy to read and maintain
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当代码易于阅读和维护很重要时
- en: 'When using the `IAsyncResult` interface, we have to break down the source method
    into two methods: `BeginMethodName` and `EndMethodName`. Changing the logic in
    this way can take a lot of time and effort and make the code hard to read, debug,
    and maintain.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`IAsyncResult`接口时，我们必须将源方法分解为两个方法：`BeginMethodName`和`EndMethodName`。以这种方式改变逻辑可能需要很多时间和精力，并且会使代码难以阅读、调试和维护。
- en: For simple and short-running operations
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于简单和短暂的操作
- en: We need to consider how much time the code is taking while it's running synchronously.
    If it isn't taking too long, it makes sense to keep the code synchronous as making
    code asynchronous comes with a small performance hit that would not be beneficial
    for small gains.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑代码在同步运行时所花费的时间。如果时间不长，保持代码同步是有意义的，因为将代码改为异步会带来一些性能损失，对于小的收益来说并不划算。
- en: For applications with lots of shared resources
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于有大量共享资源的应用程序
- en: If your application is using lots of shared resources, such as global variables
    or system files, it makes sense to keep the code synchronous; otherwise, we will
    end up reducing the performance benefits. Just like shared resources, we need
    to apply synchronization primitives that can reduce performance with multiple
    threads. Sometimes, single-threaded applications can be more performant than their
    multithreaded counterparts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用大量共享资源，例如全局变量或系统文件，保持代码同步是有意义的；否则，我们将减少性能的好处。与共享资源一样，我们需要应用可以减少多线程性能的同步原语。有时，单线程应用程序可能比多线程应用程序更高效。
- en: Problems you can solve using asynchronous code
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您可以使用异步代码解决的问题
- en: 'Let''s go through a few situations where asynchronous programming can be handy
    to improve the responsiveness of the application and the performance of both the
    application and the server. Some situations are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些情况，异步编程可以帮助改善应用程序的响应性和应用程序和服务器的性能。一些情况如下：
- en: Logging and auditing: Logging and auditing are cross-cutting concerns for applications.
    If you happen to write your own code for logging and auditing, then calls to the
    server become slow as they need to write back the logs as well. We can make logging
    and auditing asynchronous and we should make the implementation stateless wherever
    possible. This will make sure that callbacks can be returned in a static context
    so that calls can continue to execute while the response returns to the browser.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录和审计：日志记录和审计是应用程序的横切关注点。如果您自己编写日志记录和审计的代码，那么对服务器的调用会变慢，因为它们需要写回日志。我们可以使日志记录和审计异步化，并且在可能的情况下应该使实现无状态。这将确保回调可以在静态上下文中返回，以便在响应返回到浏览器时调用可以继续执行。
- en: Service calls: Web service calls and database calls can be made asynchronous
    because, once we make a call to the service/database, the control leaves the current
    application and goes to the CPU, which makes the network call. The caller thread
    goes into a blocked state. Once the response from the service call comes back,
    the CPU receives it and raises an event. The calling thread is unblocked and starts
    further execution. As a pattern, you are likely to have seen that all service
    proxies return asynchronous methods.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务调用：Web服务调用和数据库调用可以是异步的，因为一旦我们调用服务/数据库，控制权就离开当前应用程序并转到CPU，进行网络调用。调用线程进入阻塞状态。一旦服务调用的响应返回，CPU接收并触发一个事件。调用线程解除阻塞并开始进一步执行。作为一种模式，您可能已经看到所有服务代理都返回异步方法。
- en: 'Creating responsive UIs: There may be scenarios in programs where a user clicks
    a button to save data. Saving data can involve multiple small tasks: reading data
    from the UI into models, making a connection to a database, and making calls to
    the database to update the data. This can take a long time and if these calls
    are made on a UI thread, then the thread is blocked until this completes. This
    means the user won''t be able to do anything on the UI until the call is returned.
    We can improve the user experience by making asynchronous calls.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建响应式UI：在程序中可能存在这样的情况，用户点击按钮保存数据。保存数据可能涉及多个小任务：从UI读取数据到模型，连接到数据库，并调用数据库更新数据。这可能需要很长时间，如果这些调用在UI线程上进行，那么线程将被阻塞直到完成。这意味着用户在调用返回之前无法在UI上执行任何操作。通过进行异步调用，我们可以改善用户体验。
- en: 'CPU-bound applications: With the advent of new technology and support in .NET,
    we can now write machine learning, ETL processing, and cryptocurrency mining code
    in .NET. These tasks are highly CPU-intensive and it makes sense to make these programs asynchronous.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU密集型应用程序：随着.NET中新技术和支持的出现，我们现在可以在.NET中编写机器学习、ETL处理和加密货币挖掘代码。这些任务对CPU要求很高，因此将这些程序设置为异步是有意义的。
- en: '**Asynchronous patterns in early versions of C#** In early versions of .NET,
    two patterns were supported to perform I/O-bound and compute-bound operations:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**C#早期版本中的异步模式** 在.NET的早期版本中，支持了两种模式来执行I/O密集型和计算密集型操作：'
- en: '**Asynchronous Programming Model** (**APM**)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步编程模型**（**APM**）'
- en: '**Event-Based Asynchronous Pattern** (**EAP**)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于事件的异步模式**（**EAP**）'
- en: We discussed both of these approaches in detail in [Chapter 2](a001ad9c-7e57-4af7-961f-91c1e983b937.xhtml), *Task
    Parallelism*. We also learned how to convert these legacy implementations into
    task-based asynchronous patterns.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第2章](a001ad9c-7e57-4af7-961f-91c1e983b937.xhtml)中详细讨论了这两种方法，*任务并行性*。我们还学习了如何将这些传统实现转换为基于任务的异步模式。
- en: Now, let's recall what we've covered in this chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下本章涵盖的内容。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed what asynchronous programming is and why it makes
    sense to write asynchronous code. We also discussed scenarios where asynchronous
    programming can be implemented and where it should be avoided. Finally, we covered
    various asynchronous patterns that have been implemented in TPL.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了什么是异步编程，以及为什么编写异步代码是有意义的。我们还讨论了可以实现异步编程的场景以及应该避免的场景。最后，我们介绍了在TPL中实现的各种异步模式。
- en: Asynchronous programming, if used correctly, can really enhance the performance
    of server-side applications by efficiently utilizing threads. It also improves
    the responsiveness of desktop/mobile applications.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确使用，异步编程可以通过有效利用线程来显著提高服务器端应用程序的性能。它还可以提高桌面/移动应用程序的响应性。
- en: In the next chapter, we will discuss the asynchronous programming primitives
    that are provided by the .NET Framework.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论.NET Framework提供的异步编程原语。
- en: Questions
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: ________ code is easier to write, debug, and maintain.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ________ 代码更容易编写、调试和维护。
- en: Synchronous
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同步
- en: Asynchronous
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异步
- en: In what scenario should you use asynchronous programming?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在什么场景下应该使用异步编程？
- en: File I/O
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件I/O
- en: Database with connection pooling
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带有连接池的数据库
- en: Network I/O
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络I/O
- en: Database without connection pooling
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有连接池的数据库
- en: Which approach can be used to write async code?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种方法可以用来编写异步代码？
- en: '`Delegate.BeginInvoke`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Delegate.BeginInvoke
- en: '`Task`'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务
- en: '`IAsyncResult`'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IAsyncResult
- en: Which of these cannot be used to write async code in .NET Core?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种不能用于在.NET Core中编写异步代码？
- en: '`IAsyncResult`'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IAsyncResult
- en: '`Task`'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务
