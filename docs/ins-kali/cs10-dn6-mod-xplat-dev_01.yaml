- en: '01'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '01'
- en: Hello, C#! Welcome, .NET!
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，C#! 欢迎，.NET！
- en: In this first chapter, the goals are setting up your development environment,
    understanding the similarities and differences between modern .NET, .NET Core,
    .NET Framework, Mono, Xamarin, and .NET Standard, creating the simplest application
    possible with C# 10 and .NET 6 using various code editors, and then discovering
    good places to look for help.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章中，目标是设置你的开发环境，理解现代.NET、.NET Core、.NET Framework、Mono、Xamarin和.NET Standard之间的相似性和差异，使用各种代码编辑器创建尽可能简单的C#
    10和.NET 6应用程序，然后发现寻求帮助的好地方。
- en: 'The GitHub repository for this book has solutions using full application projects
    for all code tasks and notebooks when possible:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的GitHub存储库包含了所有代码任务和笔记本的完整应用程序项目的解决方案：
- en: '[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)'
- en: 'Simply press the . (dot) key or change `.com` to `.dev` in the link above to
    change the GitHub repository into a live editor using Visual Studio Code for the
    Web, as shown in *Figure 1.1* :'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按下.（点）键或在上面的链接中将`.com`更改为`.dev`，即可将GitHub存储库更改为使用Visual Studio Code for the
    Web进行实时编辑，如*图1.1*所示：
- en: '![Graphical user interface, text, application Description automatically generated](img/Image00007.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序描述自动生成](img/Image00007.jpg)'
- en: 'Figure 1.1: Visual Studio Code for the Web live editing the book''s GitHub
    repository'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Visual Studio Code for the Web实时编辑该书的GitHub存储库
- en: This is great to run alongside your chosen code editor as you work through the
    book's coding tasks. You can compare your code to the solution code and easily
    copy and paste parts if needed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于在你选择的代码编辑器旁边运行是很好的，你可以将你的代码与解决方案代码进行比较，如果需要，可以轻松地复制和粘贴部分代码。
- en: Throughout this book, I use the term **modern .NET** to refer to .NET 6 and
    its predecessors like .NET 5 that come from .NET Core. I use the term **legacy
    .NET** to refer to .NET Framework, Mono, Xamarin, and .NET Standard. Modern .NET
    is a unification of those legacy platforms and standards.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我使用术语“现代.NET”来指代.NET 6及其前身，如来自.NET Core的.NET 5。我使用术语“传统.NET”来指代.NET Framework、Mono、Xamarin和.NET
    Standard。现代.NET是这些传统平台和标准的统一。
- en: 'After this first chapter, the book can be divided into three parts: first,
    the grammar and vocabulary of the C# language; second, the types available in
    .NET for building app features; and third, examples of common cross-platform apps
    you can build using C# and .NET.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章之后，这本书可以分为三个部分：第一部分是C#语言的语法和词汇；第二部分是.NET中可用的类型，用于构建应用程序功能；第三部分是使用C#和.NET构建的常见跨平台应用程序的示例。
- en: Most people learn complex topics best by imitation and repetition rather than
    reading a detailed explanation of the theory; therefore, I will not overload you
    with detailed explanations of every step throughout this book. The idea is to
    get you to write some code and see it run.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人通过模仿和重复学习复杂的主题，而不是阅读详细的理论解释；因此，我不会在整本书中详细解释每一步。想法是让你编写一些代码并看到它运行。
- en: You don't need to know all the nitty-gritty details immediately. That will be
    something that comes with time as you build your own apps and go beyond what any
    book can teach you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要立即了解所有细节。随着时间的推移，随着你构建自己的应用程序并超越任何书籍所能教授的内容，这些细节会逐渐明朗起来。
- en: In the words of Samuel Johnson, author of the English dictionary in 1755, I
    have committed "a few wild blunders, and risible absurdities, from which no work
    of such multiplicity is free." I take sole responsibility for these and hope you
    appreciate the challenge of my attempt to lash the wind by writing this book about
    rapidly evolving technologies like C# and .NET, and the apps that you can build
    with them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用塞缪尔·约翰逊（Samuel Johnson）的话来说，他是1755年英语词典的作者，我犯了“一些荒唐的错误和可笑的荒谬之处，这是任何如此多元化的作品所不可避免的。”
    我对此负有全部责任，并希望你能欣赏我尝试撰写这本关于快速发展的技术如C#和.NET以及你可以用它们构建的应用程序的书籍的挑战。
- en: 'This first chapter covers the following topics:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章涵盖以下主题：
- en: Setting up your development environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: Understanding .NET
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET
- en: Building console apps using Visual Studio 2022
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022构建控制台应用程序
- en: Building console apps using Visual Studio Code
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code构建控制台应用程序
- en: Exploring code using .NET Interactive Notebooks
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET交互式笔记本来探索代码
- en: Reviewing the folders and files for projects
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查项目的文件夹和文件
- en: Making good use of the GitHub repository for this book
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用GitHub存储库
- en: Looking for help
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻求帮助
- en: Setting up your development environment
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: 'Before you start programming, you''ll need a code editor for C#. Microsoft
    has a family of code editors and **Integrated Development Environments** (**IDEs**
    ), which include:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编程之前，你需要一个C#的代码编辑器。微软有一系列代码编辑器和集成开发环境（IDE），包括：
- en: Visual Studio 2022 for Windows
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的Visual Studio 2022
- en: Visual Studio 2022 for Mac
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac的Visual Studio 2022
- en: Visual Studio Code for Windows, Mac, or Linux
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows、Mac或Linux的Visual Studio Code
- en: GitHub Codespaces
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Codespaces
- en: Third parties have created their own C# code editors, for example, JetBrains
    Rider.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方已经创建了他们自己的C#代码编辑器，例如JetBrains Rider。
- en: Choosing the appropriate tool and application type for learning
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择适合学习的工具和应用类型
- en: What is the best tool and application type for learning C# and .NET?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 学习C#和.NET的最佳工具和应用类型是什么？
- en: When learning, the best tool is one that helps you write code and configuration
    but does not hide what is really happening. IDEs provide graphical user interfaces
    that are friendly to use, but what are they doing for you underneath? A more basic
    code editor that is closer to the action while providing help to write your code
    is better while you are learning.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习时，最好的工具是能帮助你编写代码和配置，但不会隐藏实际发生的事情。IDE提供了友好的图形用户界面，但在底层为你做了什么呢？在学习时，更接近行动并提供帮助编写代码的基本代码编辑器更好。
- en: Having said that, you can make the argument that the best tool is the one you
    are already familiar with or that you or your team will use as your daily development
    tool. For that reason, I want you to be free to choose any C# code editor or IDE
    to complete the coding tasks in this book, including Visual Studio Code, Visual
    Studio for Windows, Visual Studio for Mac, or even JetBrains Rider.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，您可以提出这样的论点，即最好的工具是您已经熟悉的工具，或者您或您的团队将作为日常开发工具使用的工具。因此，我希望您可以自由选择任何C#代码编辑器或IDE来完成本书中的编码任务，包括Visual
    Studio Code、Visual Studio for Windows、Visual Studio for Mac，甚至JetBrains Rider。
- en: In the third edition of this book, I gave detailed step-by-step instructions
    for both Visual Studio for Windows and Visual Studio Code for all coding tasks.
    Unfortunately, that got messy and confusing quickly. In this sixth edition, I
    give detailed step-by-step instructions for how to create multiple projects in
    both Visual Studio 2022 for Windows and Visual Studio Code only in *Chapter 1*
    . After that, I give names of projects and general instructions that work with
    all tools so you can use whichever tool you prefer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第三版中，我为Windows的Visual Studio和所有编码任务的Visual Studio Code提供了详细的逐步说明。不幸的是，情况很快变得混乱和令人困惑。在第六版中，我仅在*第1章*中提供了如何在Windows的Visual
    Studio 2022和Visual Studio Code中创建多个项目的详细逐步说明。之后，我提供了项目名称和适用于所有工具的一般说明，因此您可以使用您喜欢的任何工具。
- en: The best application type for learning the C# language constructs and many of
    the .NET libraries is one that does not distract with unnecessary application
    code. For example, there is no need to create an entire Windows desktop application
    or a website just to learn how to write a `switch` statement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 学习C#语言构造和许多.NET库的最佳应用类型是不会分散注意力的应用程序代码。例如，没有必要创建整个Windows桌面应用程序或网站，只是为了学习如何编写`switch`语句。
- en: For that reason, I believe the best method for learning the C# and .NET topics
    in *Chapters 1* to *12* is to build console applications. Then, in *Chapter 13*
    to *19* onward, you will build websites, services, and graphical desktop and mobile
    apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为学习*第1*至*12*章中的C#和.NET主题的最佳方法是构建控制台应用程序。然后，在*第13*至*19*章以及以后，您将构建网站、服务以及图形桌面和移动应用程序。
- en: Pros and cons of the .NET Interactive Notebooks extension
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET Interactive Notebooks扩展的优缺点
- en: Another benefit of Visual Studio Code is the .NET Interactive Notebooks extension.
    This extension provides an easy and safe place to write simple code snippets.
    It enables you to create a single notebook file that mixes "cells" of Markdown
    (richly formatted text) and code using C# and other related languages, such as
    PowerShell, F#, and SQL (for databases).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code的另一个好处是.NET Interactive Notebooks扩展。该扩展提供了一个简单且安全的地方来编写简单的代码片段。它使您能够创建一个混合使用C#和其他相关语言（如PowerShell、F#和SQL（用于数据库））的Markdown（格式丰富的文本）和代码的“单元格”的单个笔记本文件。
- en: 'However, .NET Interactive Notebooks does have some limitations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，.NET Interactive Notebooks确实有一些限制：
- en: They cannot read input from the user, for example, you cannot use `ReadLine`
    or `ReadKey` .
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们无法从用户那里读取输入，例如，您不能使用`ReadLine`或`ReadKey`。
- en: They cannot have arguments passed to them.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不能接受传递给它们的参数。
- en: They do not allow you to define your own namespaces.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不允许您定义自己的命名空间。
- en: They do not have any debugging tools (but these are coming in the future).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们没有任何调试工具（但这些将来会推出）。
- en: Using Visual Studio Code for cross-platform development
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code进行跨平台开发
- en: The most modern and lightweight code editor to choose from, and the only one
    from Microsoft that is cross-platform, is Microsoft Visual Studio Code. It can
    run on all common operating systems, including Windows, macOS, and many varieties
    of Linux, including Red Hat Enterprise Linux (RHEL) and Ubuntu.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最现代和轻量级的代码编辑器，也是微软唯一跨平台的代码编辑器，就是Microsoft Visual Studio Code。它可以在包括Windows、macOS和许多Linux变体在内的所有常见操作系统上运行，包括Red
    Hat Enterprise Linux（RHEL）和Ubuntu。
- en: Visual Studio Code is a good choice for modern cross-platform development because
    it has an extensive and growing set of extensions to support many languages beyond
    C#.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是现代跨平台开发的不错选择，因为它有大量且不断增长的扩展，支持除了C#之外的许多语言。
- en: Being cross-platform and lightweight, it can be installed on all platforms that
    your apps will be deployed to for quick bug fixes and so on. Choosing Visual Studio
    Code means a developer can use a cross-platform code editor to develop cross-platform
    apps.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为跨平台和轻量级的工具，它可以安装在您的应用程序将部署到的所有平台上，以进行快速的错误修复等。选择Visual Studio Code意味着开发人员可以使用跨平台代码编辑器来开发跨平台应用程序。
- en: Visual Studio Code has strong support for web development, although it currently
    has weak support for mobile and desktop development.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code对Web开发有很好的支持，尽管目前对移动和桌面开发的支持较弱。
- en: Visual Studio Code is supported on ARM processors so that you can develop on
    Apple Silicon computers and Raspberry Pi.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code支持ARM处理器，因此您可以在Apple Silicon计算机和Raspberry Pi上进行开发。
- en: Visual Studio Code is by far the most popular integrated development environment,
    with over 70% of professional developers selecting it in the Stack Overflow 2021
    survey.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是迄今为止最受欢迎的集成开发环境，超过70%的专业开发人员在Stack Overflow 2021调查中选择了它。
- en: Using GitHub Codespaces for development in the cloud
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在云中使用GitHub Codespaces进行开发
- en: GitHub Codespaces is a fully configured development environment based on Visual
    Studio Code that can be spun up in an environment hosted in the cloud and accessed
    through any web browser. It supports Git repos, extensions, and a built-in command-line
    interface so you can edit, run, and test from any device.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces是基于Visual Studio Code的完全配置的开发环境，可以在云中托管的环境中启动，并通过任何Web浏览器访问。它支持Git存储库、扩展和内置命令行界面，因此您可以从任何设备编辑、运行和测试。
- en: Using Visual Studio for Mac for general development
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio for Mac进行一般开发
- en: Microsoft Visual Studio 2022 for Mac can create most types of applications,
    including console apps, websites, web services, desktop, and mobile apps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2022 for Mac可以创建大多数类型的应用程序，包括控制台应用程序、网站、Web服务、桌面和移动应用程序。
- en: To compile apps for Apple operating systems like iOS to run on devices like
    the iPhone and iPad, you must have Xcode, which only runs on macOS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译运行在iPhone和iPad等设备上的苹果操作系统的应用程序，您必须拥有只能在macOS上运行的Xcode。
- en: Using Visual Studio for Windows for general development
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上使用Visual Studio进行一般开发
- en: Microsoft Visual Studio 2022 for Windows can create most types of applications,
    including console apps, websites, web services, desktop, and mobile apps. Although
    you can use Visual Studio 2022 for Windows with its Xamarin extensions to write
    a cross-platform mobile app, you still need macOS and Xcode to compile it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2022 for Windows可以创建大多数类型的应用程序，包括控制台应用程序、网站、Web服务、桌面和移动应用程序。虽然您可以使用Windows版的Visual
    Studio 2022及其Xamarin扩展来编写跨平台移动应用程序，但您仍然需要macOS和Xcode来编译它。
- en: It only runs on Windows, version 7 SP1 or later. You must run it on Windows
    10 or Windows 11 to create **Universal Windows Platform** (**UWP** ) apps that
    are installed from the Microsoft Store and run in a sandbox to protect your computer.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 它只能在Windows 7 SP1或更高版本上运行。您必须在Windows 10或Windows 11上运行它，以创建从Microsoft Store安装并在沙箱中运行以保护您的计算机的**通用Windows平台**（**UWP**）应用程序。
- en: What I used
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我使用的
- en: 'To write and test the code for this book, I used the following hardware:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写和测试本书的代码，我使用了以下硬件：
- en: HP Spectre (Intel) laptop
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HP Spectre（Intel）笔记本电脑
- en: Apple Silicon Mac mini (M1) desktop
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apple Silicon Mac mini（M1）台式机
- en: Raspberry Pi 400 (ARM v8) desktop
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 400（ARM v8）台式机
- en: 'And I used the following software:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了以下软件：
- en: 'Visual Studio Code on:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code上：
- en: macOS on an Apple Silicon Mac mini (M1) desktop
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apple Silicon Mac mini（M1）台式机上的macOS
- en: Windows 10 on an HP Spectre (Intel) laptop
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10在HP Spectre（Intel）笔记本电脑上
- en: Ubuntu 64 on a Raspberry Pi 400
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi 400上的Ubuntu 64
- en: 'Visual Studio 2022 for Windows on:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的Visual Studio 2022：
- en: Windows 10 on an HP Spectre (Intel) laptop
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HP Spectre（Intel）笔记本电脑上的Windows 10
- en: 'Visual Studio 2022 for Mac on:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac上的Visual Studio 2022：
- en: macOS on an Apple Silicon Mac mini (M1) desktop
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apple Silicon Mac mini（M1）台式机上的macOS
- en: I hope that you have access to a variety of hardware and software too, because
    seeing the differences in platforms deepens your understanding of development
    challenges, although any one of the above combinations is enough to learn the
    fundamentals of C# and .NET and how to build practical apps and websites.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您也能访问各种硬件和软件，因为了解平台的差异可以加深您对开发挑战的理解，尽管以上任何一种组合都足以学习C#和.NET的基础知识以及如何构建实际的应用程序和网站。
- en: '**More Information** : You can learn how to write code with C# and .NET using
    a Raspberry Pi 400 with Ubuntu Desktop 64-bit by reading an extra article that
    I wrote at the following link: [https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md](https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md)
    .'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以通过阅读我在以下链接写的额外文章，了解如何使用Raspberry Pi 400和Ubuntu桌面64位编写C#和.NET代码：[https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md](https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md)。'
- en: Deploying cross-platform
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台部署
- en: Your choice of code editor and operating system for development does not limit
    where your code gets deployed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您选择的代码编辑器和操作系统并不限制代码的部署位置。
- en: '.NET 6 supports the following platforms for deployment:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6支持以下部署平台：
- en: '**Windows** : Windows 7 SP1, or later. Windows 10 version 1607, or later, including
    Windows 11\. Windows Server 2012 R2 SP1, or later. Nano Server version 1809, or
    later.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：Windows 7 SP1或更高版本。Windows 10版本1607或更高版本，包括Windows 11。Windows Server
    2012 R2 SP1或更高版本。Nano Server版本1809或更高版本。'
- en: '**Mac** : macOS Mojave (version 10.14), or later.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**：macOS Mojave（版本10.14）或更高版本。'
- en: '**Linux** : Alpine Linux 3.13, or later. CentOS 7, or later. Debian 10, or
    later. Fedora 32, or later. openSUSE 15, or later. Red Hat Enterprise Linux (RHEL)
    7, or later. SUSE Enterprise Linux 12 SP2, or later. Ubuntu 16.04, 18.04, 20.04,
    or later.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：Alpine Linux 3.13或更高版本。CentOS 7或更高版本。Debian 10或更高版本。Fedora 32或更高版本。openSUSE
    15或更高版本。Red Hat Enterprise Linux（RHEL）7或更高版本。SUSE Enterprise Linux 12 SP2或更高版本。Ubuntu
    16.04、18.04、20.04或更高版本。'
- en: '**Android** : API 21, or later.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：API 21或更高版本。'
- en: '**iOS** : 10, or later.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：10或更高版本。'
- en: Windows ARM64 support in .NET 5 and later means you can develop on, and deploy
    to, Windows ARM devices like Microsoft Surface Pro X. But developing on an Apple
    M1 Mac using Parallels and a Windows 10 ARM virtual machine is apparently twice
    as fast!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 5及更高版本中的Windows ARM64支持意味着您可以在Windows ARM设备上开发和部署，比如微软Surface Pro X。但是使用Parallels和Windows
    10 ARM虚拟机在Apple M1 Mac上进行开发，速度显然是原来的两倍！
- en: Downloading and installing Visual Studio 2022 for Windows
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装Windows版Visual Studio 2022
- en: Many professional Microsoft developers use Visual Studio 2022 for Windows in
    their day-to-day development work. Even if you choose to use Visual Studio Code
    to complete the coding tasks in this book, you might want to familiarize yourself
    with Visual Studio 2022 for Windows too.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 许多专业的微软开发人员在日常开发工作中使用Windows的Visual Studio 2022。即使您选择使用Visual Studio Code来完成本书中的编码任务，您可能也希望熟悉一下Windows的Visual
    Studio 2022。
- en: If you do not have a Windows computer, then you can skip this section and continue
    to the next section where you will download and install Visual Studio Code on
    macOS or Linux.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Windows电脑，那么您可以跳过本节，继续下一节，在那里您将在macOS或Linux上下载并安装Visual Studio Code。
- en: 'Since October 2014, Microsoft has made a professional quality edition of Visual
    Studio for Windows available to students, open source contributors, and individuals
    for free. It is called Community Edition. Any of the editions are suitable for
    this book. If you have not already installed it, let''s do so now:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 自2014年10月以来，微软已经向学生、开源贡献者和个人免费提供了Windows版专业质量的Visual Studio，称为社区版。任何版本都适用于本书。如果您还没有安装，请立即安装：
- en: 'Download Microsoft Visual Studio 2022 version 17.0 or later for Windows from
    the following link: [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    .'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载Windows版Microsoft Visual Studio 2022版本17.0或更高版本：[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。
- en: Start the installer.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序。
- en: 'On the **Workloads** tab, select the following:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工作负载**选项卡上，选择以下内容：
- en: '**ASP.NET and web development**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET和Web开发**'
- en: '**Azure development**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure开发**'
- en: '**.NET desktop development**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET桌面开发**'
- en: '**Desktop development with C++**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用C++进行桌面开发**'
- en: '**Universal Windows Platform development**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用Windows平台开发**'
- en: '**Mobile development with .NET**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用.NET进行移动开发**'
- en: 'On the **Individual components** tab, in the **Code tools** section, select
    the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**单独组件**选项卡上，在**代码工具**部分，选择以下内容：
- en: '**Class Designer**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类设计师**'
- en: '**Git for Windows**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows的Git**'
- en: '**PreEmptive Protection - Dotfuscator**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PreEmptive Protection - Dotfuscator**'
- en: Click **Install** and wait for the installer to acquire the selected software
    and install it.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待安装程序获取所选软件并安装。
- en: When the installation is complete, click **Launch** .
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**启动**。
- en: 'The first time that you run Visual Studio, you will be prompted to sign in.
    If you have a Microsoft account, you can use that account. If you don''t, then
    register for a new one at the following link: [https://signup.live.com/](https://signup.live.com/)
    .'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行Visual Studio时，您将被提示登录。如果您有Microsoft帐户，可以使用该帐户。如果没有，则可以在以下链接注册一个新帐户：[https://signup.live.com/](https://signup.live.com/)。
- en: The first time that you run Visual Studio, you will be prompted to configure
    your environment. For **Development Settings** , choose **Visual C#** . For the
    color theme, I chose **Blue** , but you can choose whatever tickles your fancy.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行Visual Studio时，您将被提示配置您的环境。对于**开发设置**，请选择**Visual C#**。对于颜色主题，我选择了**蓝色**，但您可以选择任何您喜欢的。
- en: If you want to customize your keyboard shortcuts, navigate to **Tools** | **Options…**
    , and then select the **Keyboard** section.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要定制您的键盘快捷键，导航到**工具** | **选项...**，然后选择**键盘**部分。
- en: Microsoft Visual Studio for Windows keyboard shortcuts
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows版Microsoft Visual Studio的键盘快捷键
- en: 'In this book, I will avoid showing keyboard shortcuts since they are often
    customized. Where they are consistent across code editors and commonly used, I
    will try to show them. If you want to identify and customize your keyboard shortcuts,
    then you can, as shown at the following link: [https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio)
    .'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将避免显示键盘快捷键，因为它们经常被定制。如果它们在代码编辑器中保持一致并且被广泛使用，我会尽量展示它们。如果您想识别和定制您的键盘快捷键，那么您可以在以下链接中找到相关信息：[https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio)。
- en: Downloading and installing Visual Studio Code
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装Visual Studio Code
- en: Visual Studio Code has rapidly improved over the past couple of years and has
    pleasantly surprised Microsoft with its popularity. If you are brave and like
    to live on the bleeding edge, then there is an Insiders edition, which is a daily
    build of the next version.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code在过去几年里迅速改进，并且以其受欢迎程度令微软惊喜。如果您勇敢并且喜欢尝试最新技术，那么有Insiders版本，这是下一个版本的每日构建。
- en: Even if you plan to only use Visual Studio 2022 for Windows for development,
    I recommend that you download and install Visual Studio Code and try the coding
    tasks in this chapter using it, and then decide if you want to stick with just
    using Visual Studio 2022 for the rest of the book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您打算仅在Windows上使用Visual Studio 2022进行开发，我建议您下载并安装Visual Studio Code，并尝试使用它进行本章的编码任务，然后决定是否要继续只使用Visual
    Studio 2022进行本书的其余部分。
- en: 'Let''s now download and install Visual Studio Code, the .NET SDK, and the C#
    and .NET Interactive Notebooks extensions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们下载并安装Visual Studio Code、.NET SDK以及C#和.NET Interactive笔记本扩展：
- en: 'Download and install either the Stable build or the Insiders edition of Visual
    Studio Code from the following link: [https://code.visualstudio.com/](https://code.visualstudio.com/)
    .'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装Visual Studio Code的稳定版本或Insiders版本：[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: '**More Information** : If you need more help installing Visual Studio Code,
    you can read the official setup guide at the following link: [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)
    .'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：如果您需要更多帮助安装Visual Studio Code，可以阅读以下链接的官方设置指南：[https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)。'
- en: 'Download and install the .NET SDKs for versions 3.1, 5.0, and 6.0 from the
    following link: [https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)
    .'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装版本3.1、5.0和6.0的.NET SDK：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)。
- en: To fully learn how to control .NET SDKs, we need multiple versions installed.
    .NET Core 3.1, .NET 5.0, and .NET 6.0 are the three currently supported versions.
    You can safely install multiple ones side by side. You will learn how to target
    the one you want throughout this book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全学会如何控制.NET SDK，我们需要安装多个版本。.NET Core 3.1、.NET 5.0和.NET 6.0是目前支持的三个版本。您可以安全地并排安装多个版本。在本书中，您将学习如何选择您想要的版本。
- en: To install the C# extension, you must first launch the Visual Studio Code application.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装C#扩展，您必须首先启动Visual Studio Code应用程序。
- en: In Visual Studio Code, click the **Extensions** icon or navigate to **View**
    | **Extensions** .
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，点击**扩展**图标或导航到**视图** | **扩展**。
- en: C# is one of the most popular extensions available, so you should see it at
    the top of the list, or you can enter `C#` in the search box.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C#是最受欢迎的扩展之一，因此您应该在列表顶部看到它，或者您可以在搜索框中输入`C#`。
- en: Click **Install** and wait for supporting packages to download and install.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待支持包下载并安装。
- en: Enter `.NET Interactive` in the search box to find the **.NET Interactive Notebooks**
    extension.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`.NET Interactive`以找到**.NET Interactive笔记本**扩展。
- en: Click **Install** and wait for it to install.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待安装完成。
- en: Installing other extensions
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装其他扩展
- en: 'In later chapters of this book, you will use more extensions. If you want to
    install them now, all the extensions that we will use are shown in the following
    table:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面章节中，您将使用更多的扩展。如果您现在想要安装它们，我们将使用的所有扩展都显示在以下表格中：
- en: '| Extension name and identifier | Description |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 扩展名和标识符 | 描述 |'
- en: '| C# for Visual Studio Code (powered by OmniSharp)`ms-dotnettools.csharp` |
    C# editing support, including syntax highlighting, IntelliSense, Go to Definition,
    Find All References, debugging support for .NET, and support for `csproj` projects
    on Windows, macOS, and Linux. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| C# for Visual Studio Code (powered by OmniSharp)`ms-dotnettools.csharp` |
    包括语法高亮、智能感知、跳转到定义、查找所有引用、.NET 的调试支持以及对 Windows、macOS 和 Linux 上的 `csproj` 项目的支持。
    |'
- en: '| .NET Interactive Notebooks`ms-dotnettools.dotnet-interactive-vscode` | This
    extension adds support for using .NET Interactive in a Visual Studio Code notebook.
    It has a dependency on the Jupyter extension (`ms-toolsai.jupyter` ). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| .NET Interactive Notebooks`ms-dotnettools.dotnet-interactive-vscode` | 此扩展添加了对在
    Visual Studio Code 笔记本中使用 .NET Interactive 的支持。它依赖于 Jupyter 扩展 (`ms-toolsai.jupyter`
    )。 |'
- en: '| MSBuild project tools`tinytoy.msbuild-project-tools` | Provides IntelliSense
    for MSBuild project files, including autocomplete for `<PackageReference>` elements.
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| MSBuild 项目工具`tinytoy.msbuild-project-tools` | 为 MSBuild 项目文件提供智能感知，包括 `<PackageReference>`
    元素的自动完成。 |'
- en: '| REST Client`humao.rest-client` | Send an HTTP request and view the response
    directly in Visual Studio Code. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| REST Client`humao.rest-client` | 直接在 Visual Studio Code 中发送 HTTP 请求并查看响应。
    |'
- en: '| ILSpy .NET Decompiler`icsharpcode.ilspy-vscode` | Decompile MSIL assemblies
    – support for modern .NET, .NET Framework, .NET Core, and .NET Standard. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| ILSpy .NET 反编译器`icsharpcode.ilspy-vscode` | 反编译 MSIL 程序集 - 支持现代 .NET、.NET
    Framework、.NET Core 和 .NET Standard。 |'
- en: '| Azure Functions for Visual Studio Code`ms-azuretools.vscode-azurefunctions`
    | Create, debug, manage, and deploy serverless apps directly from VS Code. It
    has dependencies on Azure Account (`ms-vscode.azure-account` ) and Azure Resources
    (`ms-azuretools.vscode-azureresourcegroups` ) extensions. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| Azure Functions for Visual Studio Code`ms-azuretools.vscode-azurefunctions`
    | 直接从 VS Code 创建、调试、管理和部署无服务器应用。它依赖于 Azure Account (`ms-vscode.azure-account`
    ) 和 Azure Resources (`ms-azuretools.vscode-azureresourcegroups` ) 扩展。 |'
- en: '| GitHub Repositories`github.remotehub` | Browse, search, edit, and commit
    to any remote GitHub repository directly from within Visual Studio Code. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| GitHub 仓库`github.remotehub` | 直接在 Visual Studio Code 中浏览、搜索、编辑和提交到任何远程 GitHub
    仓库。 |'
- en: '| SQL Server (mssql) for Visual Studio Code`ms-mssql.mssql` | For developing
    Microsoft SQL Server, Azure SQL Database, and SQL Data Warehouse everywhere with
    a rich set of functionalities. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| SQL Server (mssql) for Visual Studio Code`ms-mssql.mssql` | 在任何地方开发 Microsoft
    SQL Server、Azure SQL 数据库和 SQL 数据仓库，具有丰富的功能集。 |'
- en: '| Protobuf 3 support for Visual Studio Code`zxh404.vscode-proto3` | Syntax
    highlighting, syntax validation, code snippets, code completion, code formatting,
    brace matching, and line and block commenting. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| Visual Studio Code 的 Protobuf 3 支持`zxh404.vscode-proto3` | 语法高亮、语法验证、代码片段、代码完成、代码格式化、大括号匹配以及行和块注释。
    |'
- en: Understanding Microsoft Visual Studio Code versions
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解 Microsoft Visual Studio Code 的版本
- en: 'Microsoft releases a new feature version of Visual Studio Code (almost) every
    month and bug fix versions more frequently. For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 微软几乎每个月发布 Visual Studio Code 的新功能版本，更频繁地发布 bug 修复版本。例如：
- en: Version 1.59, August 2021 feature release
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.59，2021 年 8 月功能版本
- en: Version 1.59.1, August 2021 bug fix release
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.59.1，2021 年 8 月 bug 修复版本
- en: The version used in this book is 1.59, but the version of Microsoft Visual Studio
    Code is less important than the version of the C# for Visual Studio Code extension
    that you installed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的版本是 1.59，但 Microsoft Visual Studio Code 的版本不如您安装的 C# for Visual Studio
    Code 扩展的版本重要。
- en: While the C# extension is not required, it provides IntelliSense as you type,
    code navigation, and debugging features, so it's something that's very handy to
    install and keep updated to support the latest C# language features.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不需要 C# 扩展，但它提供了您输入时的智能感知、代码导航和调试功能，因此安装并保持更新以支持最新的 C# 语言特性非常方便。
- en: Microsoft Visual Studio Code keyboard shortcuts
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Code 的键盘快捷键
- en: In this book, I will avoid showing keyboard shortcuts used for tasks like creating
    a new file since they are often different on different operating systems. The
    situations where I will show keyboard shortcuts are when you need to repeatedly
    press the key, for example, while debugging. These are also more likely to be
    consistent across operating systems.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将避免显示用于任务的键盘快捷键，比如创建新文件，因为它们在不同的操作系统上通常是不同的。我将展示键盘快捷键的情况是当您需要重复按键时，例如在调试时。这些情况更有可能在不同操作系统上保持一致。
- en: 'If you want to customize your keyboard shortcuts for Visual Studio Code, then
    you can, as shown at the following link: [https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)
    .'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要自定义 Visual Studio Code 的键盘快捷键，可以参考以下链接：[https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)
    。
- en: 'I recommend that you download a PDF of keyboard shortcuts for your operating
    system from the following list:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您从以下列表中下载适用于您操作系统的键盘快捷键的 PDF：
- en: '**Windows** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
- en: '**macOS** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
- en: '**Linux** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
- en: Understanding .NET
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 .NET
- en: .NET 6, .NET Core, .NET Framework, and Xamarin are related and overlapping platforms
    for developers used to build applications and services. In this section, I'm going
    to introduce you to each of these .NET concepts.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6、.NET Core、.NET Framework和Xamarin是相关且重叠的开发平台，用于构建应用程序和服务。在本节中，我将向您介绍这些.NET概念。
- en: Understanding .NET Framework
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET Framework
- en: .NET Framework is a development platform that includes a **Common Language Runtime**
    (**CLR** ), which manages the execution of code, and a **Base Class Library**
    (**BCL** ), which provides a rich library of classes to build applications from.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework是一个开发平台，包括**公共语言运行时**（**CLR**），用于管理代码的执行，以及**基础类库**（**BCL**），提供丰富的类库来构建应用程序。
- en: Microsoft originally designed .NET Framework to have the possibility of being
    cross-platform, but Microsoft put their implementation effort into making it work
    best with Windows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 微软最初设计.NET Framework具有跨平台的可能性，但微软将他们的实现努力放在使其与Windows最好地配合使用。
- en: Since .NET Framework 4.5.2, it has been an official component of the Windows
    operating system. Components have the same support as their parent products, so
    4.5.2 and later follow the life cycle policy of the Windows OS on which it is
    installed. .NET Framework is installed on over one billion computers, so it must
    change as little as possible. Even bug fixes can cause problems, so it is updated
    infrequently.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 自.NET Framework 4.5.2以来，它已成为Windows操作系统的官方组件。组件具有与其父产品相同的支持，因此4.5.2及更高版本遵循其安装的Windows操作系统的生命周期策略。.NET
    Framework已安装在超过10亿台计算机上，因此必须尽可能少地进行更改。即使是错误修复也可能会导致问题，因此更新频率较低。
- en: For .NET Framework 4.0 or later, all of the apps on a computer written for .NET
    Framework share the same version of the CLR and libraries stored in the **Global
    Assembly Cache** (**GAC** ), which can lead to issues if some of them need a specific
    version for compatibility.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET Framework 4.0或更高版本，计算机上为.NET Framework编写的所有应用程序共享**全局程序集缓存**（**GAC**）中存储的CLR和库的相同版本，这可能会导致问题，如果其中一些应用程序需要特定版本以实现兼容性。
- en: '**Good Practice** : Practically speaking, .NET Framework is Windows-only and
    a legacy platform. Do not create new apps using it.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：从实际角度来看，.NET Framework仅适用于Windows，是一个传统的平台。不要使用它创建新的应用程序。'
- en: Understanding the Mono, Xamarin, and Unity projects
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Mono、Xamarin和Unity项目
- en: Third parties developed a .NET Framework implementation named the **Mono** project.
    Mono is cross-platform, but it fell well behind the official implementation of
    .NET Framework.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方开发了一个名为**Mono**项目的.NET Framework实现。Mono是跨平台的，但远远落后于官方的.NET Framework实现。
- en: Mono has found a niche as the foundation of the **Xamarin** mobile platform
    as well as cross-platform game development platforms like **Unity** .
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Mono已经成为**Xamarin**移动平台和跨平台游戏开发平台**Unity**的基础。
- en: Microsoft purchased Xamarin in 2016 and now gives away what used to be an expensive
    Xamarin extension for free with Visual Studio. Microsoft renamed the Xamarin Studio
    development tool, which could only create mobile apps, to Visual Studio for Mac
    and gave it the ability to create other types of projects like console apps and
    web services. With Visual Studio 2022 for Mac, Microsoft has replaced parts of
    the Xamarin Studio editor with parts from Visual Studio 2022 for Windows to provide
    closer parity of experience and performance. Visual Studio 2022 for Mac was also
    rewritten to be a truly native macOS UI app to improve reliability and work with
    macOS's built-in assistive technologies.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在2016年收购了Xamarin，现在免费提供了曾经昂贵的Xamarin扩展，并将其与Visual Studio捆绑在一起。微软将只能创建移动应用程序的Xamarin
    Studio开发工具更名为Visual Studio for Mac，并赋予其创建其他类型项目（如控制台应用程序和Web服务）的能力。通过Visual Studio
    2022 for Mac，微软已经用Visual Studio 2022 for Windows的部分替换了Xamarin Studio编辑器的部分，以提供更接近的体验和性能。Visual
    Studio 2022 for Mac也被重写为真正的本地macOS UI应用程序，以提高可靠性并与macOS内置的辅助技术配合使用。
- en: Understanding .NET Core
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET Core
- en: Today, we live in a truly cross-platform world where modern mobile and cloud
    development have made Windows, as an operating system, much less important. Because
    of that, Microsoft has been working on an effort to decouple .NET from its close
    ties with Windows. While rewriting .NET Framework to be truly cross-platform,
    they've taken the opportunity to refactor and remove major parts that are no longer
    considered core.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们生活在一个真正跨平台的世界，现代移动和云开发已经使作为操作系统的Windows变得不那么重要。因此，微软一直在努力将.NET与其与Windows的紧密联系解耦。在将.NET
    Framework重写为真正的跨平台时，他们抓住机会重构和删除不再被认为是核心的重要部分。
- en: This new product was branded .NET Core and includes a cross-platform implementation
    of the CLR known as CoreCLR and a streamlined BCL known as CoreFX.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新产品被命名为.NET Core，并包括一个名为CoreCLR的跨平台CLR实现和一个名为CoreFX的精简BCL。
- en: Scott Hunter, Microsoft Partner Director Program Manager for .NET, has said
    that "Forty percent of our .NET Core customers are brand-new developers to the
    platform, which is what we want with .NET Core. We want to bring new people in."
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 微软.NET合作伙伴总监.NET项目经理Scott Hunter表示：“我们.NET Core客户中有40%是全新的开发人员，这正是我们希望.NET Core达到的效果。我们希望吸引新的开发人员。”
- en: .NET Core is fast-moving, and because it can be deployed side by side with an
    app, it can change frequently, knowing those changes will not affect other .NET
    Core apps on the same machine. Most improvements that Microsoft makes to .NET
    Core and modern .NET cannot be easily added to .NET Framework.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core发展迅速，因为它可以与应用程序并行部署，所以它可能会经常发生变化，了解这些变化不会影响同一台机器上的其他.NET Core应用程序。微软对.NET
    Core和现代.NET所做的大多数改进都无法轻松地添加到.NET Framework中。
- en: Understanding the journey to one .NET
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解通往一个.NET的旅程
- en: At the Microsoft Build developer conference in May 2020, the .NET team announced
    that their plans for the unification of .NET had been delayed. They said that
    .NET 5 would be released on November 10, 2020, and it would unify all the various
    .NET platforms except mobile. It would not be until .NET 6 in November 2021 that
    mobile will also be supported by the unified .NET platform.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年5月的微软Build开发者大会上，.NET团队宣布他们关于.NET统一的计划已经延迟。他们表示.NET 5将于2020年11月10日发布，并将统一除移动外的所有各种.NET平台。直到2021年11月的.NET
    6版本，移动端也将被统一的.NET平台支持。
- en: .NET Core has been renamed .NET and the major version number has skipped the
    number four to avoid confusion with .NET Framework 4.x. Microsoft plans on annual
    major version releases every November, rather like Apple does major version number
    releases of iOS every September.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core已更名为.NET，主要版本号跳过了数字四，以避免与.NET Framework 4.x混淆。微软计划每年11月发布一次主要版本，有点类似于苹果每年9月发布iOS的主要版本号。
- en: 'The following table shows when the key versions of modern .NET were released,
    when future releases are planned, and which version is used by the various editions
    of this book:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了现代.NET的关键版本发布时间，未来发布计划以及本书各版本所使用的版本：
- en: '| Version | Released | Edition | Published |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 发布时间 | 版本 | 发布时间 |'
- en: '| .NET Core RC1 | November 2015 | First | March 2016 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core RC1 | 2015年11月 | 第一版 | 2016年3月 |'
- en: '| .NET Core 1.0 | June 2016 |  |  |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: .NET Core 1.0 | 2016年6月 |  |  |
- en: '| .NET Core 1.1 | November 2016 |  |  |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: .NET Core 1.1 | 2016年11月 |  |  |
- en: '| .NET Core 1.0.4 and .NET Core 1.1.1 | March 2017 | Second | March 2017 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 1.0.4 and .NET Core 1.1.1 | 2017年3月 | 第二版 | 2017年3月 |'
- en: '| .NET Core 2.0 | August 2017 |  |  |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.0 | 2017年8月 |  |  |'
- en: '| .NET Core for UWP in Windows 10 Fall Creators Update | October 2017 | Third
    | November 2017 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core for UWP in Windows 10 Fall Creators Update | 2017年10月 | 第三版 | 2017年11月
    |'
- en: '| .NET Core 2.1 (LTS) | May 2018 |  |  |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.1 (LTS) | 2018年5月 |  |  |'
- en: '| .NET Core 2.2 (Current) | December 2018 |  |  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.2 (当前) | 2018年12月 |  |  |'
- en: '| .NET Core 3.0 (Current) | September 2019 | Fourth | October 2019 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 3.0 (当前) | 2019年9月 | 第四版 | 2019年10月 |'
- en: '| .NET Core 3.1 (LTS) | December 2019 |  |  |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 3.1 (LTS) | 2019年12月 |  |  |'
- en: '| Blazor WebAssembly 3.2 (Current) | May 2020 |  |  |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: Blazor WebAssembly 3.2 (当前) | 2020年5月 |  |  |
- en: '| .NET 5.0 (Current) | November 2020 | Fifth | November 2020 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| .NET 5.0 (当前) | 2020年11月 | 第五版 | 2020年11月 |'
- en: '| .NET 6.0 (LTS) | November 2021 | Sixth | November 2021 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| .NET 6.0 (LTS) | 2021年11月 | 第六版 | 2021年11月 |'
- en: '| .NET 7.0 (Current) | November 2022 | Seventh | November 2022 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| .NET 7.0 (当前) | 2022年11月 | 第七版 | 2022年11月 |'
- en: '| .NET 8.0 (LTS) | November 2023 | Eighth | November 2023 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| .NET 8.0 (LTS) | 2023年11月 | 第八版 | 2023年11月 |'
- en: .NET Core 3.1 included Blazor Server for building web components. Microsoft
    had also planned to include Blazor WebAssembly in that release, but it was delayed.
    Blazor WebAssembly was later released as an optional add-on for .NET Core 3.1\.
    I include it in the table above because it was versioned as 3.2 to exclude it
    from the LTS of .NET Core 3.1.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.1包括用于构建Web组件的Blazor Server。微软原本计划在该版本中包括Blazor WebAssembly，但推迟了。Blazor
    WebAssembly后来作为.NET Core 3.1的可选附加组件发布。我在上表中包括它，因为它的版本号为3.2，以排除它不在.NET Core 3.1的LTS范围内。
- en: Understanding .NET support
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET支持
- en: '.NET versions are either **Long Term Support** (**LTS** ) or **Current** ,
    as described in the following list:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: .NET版本要么是**长期支持**（**LTS**），要么是**当前**，如下列表所述：
- en: '**LTS** releases are stable and require fewer updates over their lifetime.
    These are a good choice for applications that you do not intend to update frequently.
    LTS releases will be supported for 3 years after general availability, or 1 year
    after the next LTS release ships, whichever is longer.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS** 版本稳定，寿命内需要较少的更新。这些版本适用于您不打算经常更新的应用程序。LTS 版本将在通用可用性后支持3年，或者在下一个 LTS
    版本发布后的1年内支持，以较长者为准。'
- en: '**Current** releases include features that may change based on feedback. These
    are a good choice for applications that you are actively developing because they
    provide access to the latest improvements. After a 6-month maintenance period,
    or 18 months after general availability, the previous minor version will no longer
    be supported.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前** 版本包括可能根据反馈而更改的功能。这些版本适用于您正在积极开发的应用程序，因为它们提供了最新改进的访问权限。在6个月的维护期后，或者在通用可用性后的18个月内，之前的次要版本将不再得到支持。'
- en: Both receive critical fixes throughout their lifetime for security and reliability.
    You must stay up to date with the latest patches to get support. For example,
    if a system is running 1.0 and 1.0.1 has been released, 1.0.1 will need to be
    installed to get support.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在寿命内都会接收到关于安全性和可靠性的关键修复。您必须及时更新最新的补丁以获得支持。例如，如果系统运行的是1.0版本，而1.0.1已发布，就需要安装1.0.1版本以获得支持。
- en: 'To better understand your choices of Current and LTS releases, it is helpful
    to see it visually, with 3-year-long black bars for LTS releases, and variable-length
    gray bars for Current releases that end with cross-hatching for the 6 months after
    a new major or minor release that they retain support for, as shown in *Figure
    1.2* :'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解您对当前和LTS版本的选择，以图形方式呈现是有帮助的，LTS版本为3年长的黑色条，当前版本为可变长度的灰色条，在新的主要或次要版本发布后的6个月内保持支持，如*图1.2*所示：
- en: '![Text Description automatically generated with low confidence](img/Image00008.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![Text Description automatically generated with low confidence](img/Image00008.jpg)'
- en: 'Figure 1.2: Support for various versions'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：各版本支持
- en: For example, if you had created a project using .NET Core 3.0, then when Microsoft
    released .NET Core 3.1 in December 2019, you had to upgrade your project to .NET
    Core 3.1 by March 2020\. (Before .NET 5, the maintenance period for Current releases
    was only three months.)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您使用.NET Core 3.0创建了一个项目，那么当微软在2019年12月发布.NET Core 3.1时，您必须在2020年3月之前将项目升级到.NET
    Core 3.1。（在.NET 5之前，当前版本的维护期仅为三个月。）
- en: If you need long-term support from Microsoft, then choose .NET 6.0 today and
    stick with it until .NET 8.0, even once Microsoft releases .NET 7.0\. This is
    because .NET 7.0 will be a current release and it will therefore lose support
    before .NET 6.0 does. Just remember that even with LTS releases you must upgrade
    to bug fix releases like 6.0.1.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要微软的长期支持，那么今天选择.NET 6.0并坚持到.NET 8.0，即使微软发布.NET 7.0。这是因为.NET 7.0将是一个当前版本，因此在.NET
    6.0之前失去支持。只需记住，即使使用LTS版本，您也必须升级到6.0.1等bug修复版本。
- en: 'All versions of .NET Core and modern .NET have reached their end of life except
    those shown in the following list:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 除以下列表中显示的版本外，所有版本的.NET Core和现代.NET都已经结束生命周期：
- en: .NET 5.0 will reach end of life in May 2022.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 5.0将于2022年5月结束生命周期。
- en: .NET Core 3.1 will reach end of life on December 3, 2022.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 3.1将于2022年12月3日结束生命周期。
- en: .NET 6.0 will reach end of life in November 2024.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 6.0将于2024年11月结束生命周期。
- en: Understanding .NET Runtime and .NET SDK versions
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解.NET Runtime和.NET SDK版本
- en: .NET Runtime versioning follows semantic versioning, that is, a major increment
    indicates breaking changes, minor increments indicate new features, and patch
    increments indicate bug fixes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Runtime版本遵循语义版本控制，即，主要增量表示破坏性更改，次要增量表示新功能，补丁增量表示bug修复。
- en: .NET SDK versioning does not follow semantic versioning. The major and minor
    version numbers are tied to the runtime version it is matched with. The patch
    number follows a convention that indicates the major and minor versions of the
    SDK.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK版本不遵循语义版本控制。主要和次要版本号与其匹配的运行时版本相关联。补丁号遵循一种约定，表示SDK的主要和次要版本。
- en: 'You can see an example of this in the following table:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下表格中看到一个例子：
- en: '| Change | Runtime | SDK |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 变更 | 运行时 | SDK |'
- en: '| Initial release | 6.0.0 | 6.0.100 |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 初始发布 | 6.0.0 | 6.0.100 |'
- en: '| SDK bug fix | 6.0.0 | 6.0.101 |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| SDK错误修复 | 6.0.0 | 6.0.101 |'
- en: '| Runtime and SDK bug fix | 6.0.1 | 6.0.102 |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 运行时和SDK错误修复 | 6.0.1 | 6.0.102 |'
- en: '| SDK new feature | 6.0.1 | 6.0.200 |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| SDK新功能 | 6.0.1 | 6.0.200 |'
- en: Removing old versions of .NET
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除旧版本的.NET
- en: .NET Runtime updates are compatible with a major version such as 6.x, and updated
    releases of the .NET SDK maintain the ability to build applications that target
    previous versions of the runtime, which enables the safe removal of older versions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Runtime更新与6.x等主要版本兼容，更新的.NET SDK版本保持了构建针对先前版本的运行时的应用程序的能力，这使得可以安全地移除旧版本。
- en: 'You can see which SDKs and runtimes are currently installed using the following
    commands:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令查看当前安装的SDK和运行时：
- en: '`dotnet --list-sdks`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet --list-sdks`'
- en: '`dotnet --list-runtimes`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet --list-runtimes`'
- en: On Windows, use the **App & features** section to remove .NET SDKs. On macOS
    or Windows, use the `dotnet-core-uninstall` tool. This tool is not installed by
    default.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用“应用和功能”部分来移除.NET SDK。在macOS或Windows上，使用`dotnet-core-uninstall`工具。这个工具不是默认安装的。
- en: 'For example, while writing the fourth edition, I used the following command
    every month:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在撰写第四版时，我每个月都使用以下命令：
- en: '```cs'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet-core-uninstall remove --all-previews-but-latest --sdk
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet-core-uninstall remove --all-previews-but-latest --sdk
- en: '```'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: What is different about modern .NET?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代.NET有何不同？
- en: Modern .NET is modularized compared to the legacy .NET Framework, which is monolithic.
    It is open source and Microsoft makes decisions about improvements and changes
    in the open. Microsoft has put particular effort into improving the performance
    of modern .NET.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的.NET Framework相比，现代.NET是模块化的，后者是单片的。它是开源的，微软在开放中做出改进和变化的决定。微软特别努力改进现代.NET的性能。
- en: It is smaller than the last version of .NET Framework due to the removal of
    legacy and non-cross-platform technologies. For example, workloads such as Windows
    Forms and **Windows Presentation Foundation** (**WPF** ) can be used to build
    **graphical user** **interface** (**GUI** ) applications, but they are tightly
    bound to the Windows ecosystem, so they are not included with .NET on macOS and
    Linux.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于删除了传统和非跨平台技术，它比.NET Framework的上一个版本要小。例如，工作负载，如Windows Forms和**Windows Presentation
    Foundation**（**WPF**）可用于构建**图形用户** **界面**（**GUI**）应用程序，但它们与Windows生态系统紧密绑定，因此不包括在macOS和Linux的.NET中。
- en: Windows development
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows开发
- en: One of the features of modern .NET is support for running old Windows Forms
    and WPF applications using the Windows Desktop Pack that is included with the
    Windows version of .NET Core 3.1 or later, which is why it is bigger than the
    SDKs for macOS and Linux. You can make some small changes to your legacy Windows
    app if necessary, and then rebuild it for .NET 6 to take advantage of new features
    and performance improvements.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET的一个特性是支持使用包含在Windows版本的.NET Core 3.1或更高版本中的Windows桌面包运行旧的Windows Forms和WPF应用程序，这就是为什么它比macOS和Linux的SDK更大。如果需要，您可以对旧的Windows应用程序进行一些小的更改，然后重新构建为.NET
    6，以利用新功能和性能改进。
- en: Web development
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web开发
- en: ASP.NET Web Forms and Windows Communication Foundation (WCF) are old web application
    and service technologies that fewer developers are choosing to use for new development
    projects today, so they have also been removed from modern .NET. Instead, developers
    prefer to use ASP.NET MVC, ASP.NET Web API, SignalR, and gRPC. These technologies
    have been refactored and combined into a platform that runs on modern .NET, named
    ASP.NET Core. You'll learn about the technologies in *Chapter 14* , *Building
    Websites Using ASP.NET Core Razor Pages* , *Chapter 15* , *Building Websites Using
    the Model-View-Controller Pattern* , *Chapter 16* , *Building and Consuming Web
    Services* , and *Chapter 18* , *Building and Consuming Specialized Services* (Chapter
    18 available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Web Forms和Windows Communication Foundation（WCF）是较少开发人员选择用于新开发项目的旧的Web应用程序和服务技术，因此它们也已从现代.NET中移除。相反，开发人员更喜欢使用ASP.NET
    MVC，ASP.NET Web API，SignalR和gRPC。这些技术已经被重构并合并到一个在现代.NET上运行的平台中，名为ASP.NET Core。您将在*第14章*，*使用ASP.NET
    Core Razor Pages构建网站*，*第15章*，*使用模型-视图-控制器模式构建网站*，*第16章*，*构建和使用Web服务*和*第18章*，*构建和使用专门服务*中了解这些技术（第18章可在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)中找到）。
- en: '**More Information** : Some .NET Framework developers are upset that ASP.NET
    Web Forms, WCF, and Windows Workflow (WF) are missing from modern .NET and would
    like Microsoft to change their minds. There are open source projects to enable
    WCF and WF to migrate to modern .NET. You can read more at the following link:
    [https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/](https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/)
    . There is an open source project for Blazor Web Forms components at the following
    link: [https://github.com/FritzAndFriends/BlazorWebFormsComponents](https://github.com/FritzAndFriends/BlazorWebFormsComponents)
    .'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息：一些.NET Framework开发人员对ASP.NET Web Forms，WCF和Windows Workflow（WF）缺失在现代.NET中感到不满，并希望微软改变他们的想法。有一些开源项目可以使WCF和WF迁移到现代.NET。您可以在以下链接阅读更多信息：[https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/](https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/)。在以下链接中有一个Blazor
    Web Forms组件的开源项目：[https://github.com/FritzAndFriends/BlazorWebFormsComponents](https://github.com/FritzAndFriends/BlazorWebFormsComponents)。
- en: Database development
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库开发
- en: '**Entity Framework** (**EF** ) 6 is an object-relational mapping technology
    that is designed to work with data that is stored in relational databases such
    as Oracle and Microsoft SQL Server. It has gained baggage over the years, so the
    cross-platform API has been slimmed down, has been given support for non-relational
    databases like Microsoft Azure Cosmos DB, and has been renamed Entity Framework
    Core. You will learn about it in *Chapter 10* , *Working with Data Using Entity
    Framework Core* .'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework（EF）6是一种对象关系映射技术，旨在处理存储在关系数据库中的数据，如Oracle和Microsoft SQL Server。多年来，它已经积累了一些问题，因此跨平台API已经被精简，已经支持了像Microsoft
    Azure Cosmos DB这样的非关系数据库，并且已经更名为Entity Framework Core。您将在*第10章*，*使用Entity Framework
    Core处理数据*中了解更多信息。
- en: If you have existing apps that use the old EF, then version 6.3 is supported
    on .NET Core 3.0 or later.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有现有的使用旧EF的应用程序，则版本6.3支持.NET Core 3.0或更高版本。
- en: Themes of modern .NET
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代.NET的主题
- en: 'Microsoft has created a website using Blazor that shows the major themes of
    modern .NET: [https://themesof.net/](https://themesof.net/) .'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 微软使用Blazor创建了一个网站，展示了现代.NET的主要主题：[https://themesof.net/](https://themesof.net/)。
- en: Understanding .NET Standard
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET标准
- en: 'The situation with .NET in 2019 was that there were three forked .NET platforms
    controlled by Microsoft, as shown in the following list:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年.NET的情况是，有三个由微软控制的.NET分支平台，如下列表所示：
- en: '**.NET Core** : For cross-platform and new apps'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core：用于跨平台和新应用程序
- en: '**.NET Framework** : For legacy apps'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Framework：用于传统应用程序
- en: '**Xamarin** : For mobile apps'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xamarin：用于移动应用程序
- en: Each had strengths and weaknesses because they were all designed for different
    scenarios. This led to the problem that a developer had to learn three platforms,
    each with annoying quirks and limitations.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 每个平台都有其优势和劣势，因为它们都是为不同的场景而设计的。这导致了一个问题，即开发人员必须学习三个平台，每个平台都有令人讨厌的怪癖和限制。
- en: Because of that, Microsoft defined .NET Standard – a specification for a set
    of APIs that all .NET platforms could implement to indicate what level of compatibility
    they have. For example, basic support is indicated by a platform being compliant
    with .NET Standard 1.4.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，微软定义了.NET标准-一组所有.NET平台都可以实现的API的规范，以指示它们具有何种级别的兼容性。例如，平台符合.NET标准1.4表示基本支持。
- en: With .NET Standard 2.0 and later, Microsoft made all three platforms converge
    on a modern minimum standard, which made it much easier for developers to share
    code between any flavor of .NET.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 通过.NET标准2.0及更高版本，微软使得所有三个平台都收敛到了一个现代的最低标准，这使得开发人员可以更轻松地在任何.NET版本之间共享代码。
- en: For .NET Core 2.0 and later, this added most of the missing APIs that developers
    need to port old code written for .NET Framework to the cross-platform .NET Core.
    However, some APIs are implemented but throw an exception to indicate to a developer
    that they should not actually be used! This is usually due to differences in the
    operating system on which you run .NET. You'll learn how to handle these exceptions
    in *Chapter 2* , *Speaking C#.*
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET Core 2.0及更高版本，这增加了大部分开发人员需要将为.NET Framework编写的旧代码移植到跨平台.NET Core的缺失API。但是，一些API已经实现，但会抛出异常，以指示开发人员实际上不应该使用它们！这通常是由于您运行.NET的操作系统的差异。您将在*第2章*，*使用C#进行交谈*中学习如何处理这些异常。
- en: It is important to understand that .NET Standard is just a standard. You are
    not able to install .NET Standard in the same way that you cannot install HTML5\.
    To use HTML5, you must install a web browser that implements the HTML5 standard.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，.NET Standard只是一个标准。你不能像安装HTML5一样安装.NET Standard。要使用HTML5，必须安装一个实现了HTML5标准的网络浏览器。
- en: To use .NET Standard, you must install a .NET platform that implements the .NET
    Standard specification. The last .NET Standard, version 2.1, is implemented by
    .NET Core 3.0, Mono, and Xamarin. Some features of C# 8.0 require .NET Standard
    2.1\. .NET Standard 2.1 is not implemented by .NET Framework 4.8, so we should
    treat .NET Framework as legacy.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用.NET Standard，必须安装实现.NET Standard规范的.NET平台。最后一个.NET Standard，版本2.1，由.NET
    Core 3.0、Mono和Xamarin实现。C# 8.0的一些功能需要.NET Standard 2.1。.NET Standard 2.1不被.NET
    Framework 4.8实现，因此我们应该将.NET Framework视为遗留系统。
- en: 'With the release of .NET 6 in November 2021, the need for .NET Standard has
    reduced significantly because there is now a single .NET for all platforms, including
    mobile. .NET 6 has a single BCL and two CLRs: CoreCLR is optimized for server
    or desktop scenarios like websites and Windows desktop apps, and the Mono runtime
    is optimized for mobile and web browser apps that have limited resources.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 随着2021年11月发布的.NET 6，.NET Standard的需求显著减少，因为现在所有平台，包括移动平台，都有一个单一的.NET。.NET 6有一个单一的BCL和两个CLR：CoreCLR针对服务器或桌面场景进行了优化，如网站和Windows桌面应用程序，而Mono运行时针对移动和具有有限资源的网络浏览器应用程序进行了优化。
- en: Even now, apps and websites created for .NET Framework will need to be supported,
    so it is important to understand that you can create .NET Standard 2.0 class libraries
    that are backward compatible with legacy .NET platforms.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 即使现在，为.NET Framework创建的应用程序和网站仍需要得到支持，因此重要的是要理解，您可以创建与旧版.NET平台向后兼容的.NET Standard
    2.0类库。
- en: .NET platforms and tools used by the book editions
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书籍版本使用的.NET平台和工具
- en: For the first edition of this book, which was written in March 2016, I focused
    on .NET Core functionality but used .NET Framework when important or useful features
    had not yet been implemented in .NET Core because that was before the final release
    of .NET Core 1.0\. Visual Studio 2015 was used for most examples, with Visual
    Studio Code shown only briefly.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的第一版，写于2016年3月，我专注于.NET Core功能，但在.NET Core 1.0最终发布之前，当重要或有用的功能尚未在.NET Core中实现时，使用了.NET
    Framework。大多数示例使用Visual Studio 2015，只有简短地展示了Visual Studio Code。
- en: The second edition was (almost) completely purged of all .NET Framework code
    examples so that readers were able to focus on .NET Core examples that truly run
    cross-platform.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 第二版（几乎）完全清除了所有.NET Framework代码示例，以便读者能够专注于真正可以在跨平台上运行的.NET Core示例。
- en: The third edition completed the switch. It was rewritten so that all of the
    code was pure .NET Core. But giving step-by-step instructions for both Visual
    Studio Code and Visual Studio 2017 for all tasks added complexity.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 第三版完成了转换。它被重写，以便所有代码都是纯.NET Core。但是为所有任务提供了使用Visual Studio Code和Visual Studio
    2017的逐步说明增加了复杂性。
- en: The fourth edition continued the trend by only showing coding examples using
    Visual Studio Code for all but the last two chapters. In *Chapter 20* , *Building
    Windows Desktop Apps* , it used Visual Studio running on Windows 10, and in *Chapter
    21* , *Building Cross-Platform Mobile Apps* , it used Visual Studio for Mac.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 第四版继续了这一趋势，只展示了使用Visual Studio Code的编码示例，除了最后两章。在*第20章*，*构建Windows桌面应用程序*中，它使用了在Windows
    10上运行的Visual Studio，而在*第21章*，*构建跨平台移动应用程序*中，它使用了Visual Studio for Mac。
- en: In the fifth edition, *Chapter 20* , *Building Windows Desktop Apps* , was moved
    to *Appendix B* to make space for a new *Chapter 20* , *Building Web User Interfaces
    Using Blazor* . Blazor projects can be created using Visual Studio Code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在第五版中，*第20章*，*构建Windows桌面应用程序*，被移动到*附录B*，为新的*第20章*，*使用Blazor构建Web用户界面*，腾出空间。可以使用Visual
    Studio Code创建Blazor项目。
- en: In this sixth edition, *Chapter 19* , *Building Mobile and Desktop Apps Using
    .NET MAUI* , was updated to show how mobile and desktop cross-platform apps can
    be created using Visual Studio 2022 and **.NET MAUI** (**Multi-platform App UI**
    ). You can find it at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    .
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在第六版中，*第19章*，*使用.NET MAUI构建移动和桌面应用程序*，已更新，展示了如何使用Visual Studio 2022和**.NET MAUI**（**多平台应用UI**）创建移动和桌面跨平台应用程序。您可以在[https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)找到它。
- en: By the seventh edition and the release of .NET 7, Visual Studio Code will have
    an extension to support .NET MAUI. At that point, readers will be able to use
    Visual Studio Code for all examples in the book.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 到第七版和.NET 7的发布时，Visual Studio Code将有一个扩展来支持.NET MAUI。到那时，读者将能够在本书中的所有示例中使用Visual
    Studio Code。
- en: Understanding intermediate language
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解中间语言
- en: The C# compiler (named **Roslyn** ) used by the `dotnet` CLI tool converts your
    C# source code into **intermediate language** (**IL** ) code and stores the IL
    in an **assembly** (a DLL or EXE file). IL code statements are like assembly language
    instructions, which are executed by .NET's virtual machine, known as CoreCLR.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet` CLI工具使用的C#编译器（名为**Roslyn**）将您的C#源代码转换为**中间语言**（**IL**）代码，并将IL存储在**程序集**（DLL或EXE文件）中。IL代码语句类似于汇编语言指令，由.NET的虚拟机CoreCLR执行。'
- en: At runtime, CoreCLR loads the IL code from the assembly, the **just-in-time**
    (**JIT** ) compiler compiles it into native CPU instructions, and then it is executed
    by the CPU on your machine.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，CoreCLR从程序集中加载IL代码，**即时**（**JIT**）编译器将其编译成本机CPU指令，然后由计算机上的CPU执行。
- en: The benefit of this two-step compilation process is that Microsoft can create
    CLRs for Linux and macOS, as well as for Windows. The same IL code runs everywhere
    because of the second compilation step, which generates code for the native operating
    system and CPU instruction set.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这种两步编译过程的好处是，微软可以为Linux和macOS创建CLR，也可以为Windows创建CLR。由于第二个编译步骤生成了针对本机操作系统和CPU指令集的代码，所以相同的IL代码可以在任何地方运行。
- en: Regardless of which language the source code is written in, for example, C#,
    Visual Basic, or F#, all .NET applications use IL code for their instructions
    stored in an assembly. Microsoft and others provide disassembler tools that can
    open an assembly and reveal this IL code, such as the ILSpy .NET Decompiler extension.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 无论源代码使用哪种语言编写，例如C#、Visual Basic或F#，所有.NET应用程序都使用IL代码作为其指令存储在程序集中。微软和其他公司提供了反汇编工具，可以打开程序集并显示这些IL代码，例如ILSpy
    .NET反编译器扩展。
- en: Comparing .NET technologies
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较.NET技术
- en: 'We can summarize and compare .NET technologies today, as shown in the following
    table:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以总结和比较今天的.NET技术，如下表所示：
- en: '| Technology | Description | Host operating systems |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 技术 | 描述 | 主机操作系统 |'
- en: '| Modern .NET | A modern feature set, full C# 8, 9, and 10 support, used to
    port existing apps or create new desktop, mobile, and web apps and services |
    Windows, macOS, Linux, Android, iOS |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 现代.NET | 现代功能集，完全支持C# 8、9和10，用于移植现有应用程序或创建新的桌面、移动和Web应用程序和服务 | Windows，macOS，Linux，Android，iOS
    |'
- en: '| .NET Framework | A legacy feature set, limited C# 8 support, no C# 9 or 10
    support, used to maintain existing applications only | Windows only |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| .NET Framework | 传统功能集，有限的C# 8支持，没有C# 9或10支持，仅用于维护现有应用程序 | 仅限Windows |'
- en: '| Xamarin | Mobile and desktop apps only | Android, iOS, macOS |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| Xamarin | 仅限移动和桌面应用程序 | Android，iOS，macOS |'
- en: Building console apps using Visual Studio 2022
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022构建控制台应用程序
- en: The goal of this section is to showcase how to build a console app using Visual
    Studio 2022 for Windows.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是展示如何使用Visual Studio 2022为Windows构建控制台应用程序。
- en: If you do not have a Windows computer or you want to use Visual Studio Code,
    then you can skip this section since the code will be the same, just the tooling
    experience is different.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Windows计算机，或者想要使用Visual Studio Code，那么您可以跳过本节，因为代码将是相同的，只是工具体验不同。
- en: Managing multiple projects using Visual Studio 2022
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022管理多个项目
- en: Visual Studio 2022 has a concept named a **solution** that allows you to open
    and manage multiple projects simultaneously. We will use a solution to manage
    the two projects that you will create in this chapter.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2022有一个名为**解决方案**的概念，允许您同时打开和管理多个项目。我们将使用一个解决方案来管理您在本章中将创建的两个项目。
- en: Writing code using Visual Studio 2022
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022编写代码
- en: Let's get started writing code!
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码吧！
- en: Start Visual Studio 2022.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio 2022。
- en: In the Start window, click **Create a new project** .
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动窗口中，点击**创建新项目**。
- en: In the **Create a new project** dialog, enter `console` in the **Search for
    templates** box, and select **Console Application** , making sure that you have
    chosen the C# project template rather than another language, such as F# or Visual
    Basic, as shown in *Figure 1.3* :![](img/Image00009.jpg)
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新项目**对话框中，在**搜索模板**框中输入`console`，选择**控制台应用程序**，确保选择了C#项目模板而不是其他语言，如F#或Visual
    Basic，如*图1.3*所示：![](img/Image00009.jpg)
- en: 'Figure 1.3: Selecting the Console Application project template'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：选择控制台应用程序项目模板
- en: Click **Next** .
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: In the **Configure your new project** dialog, enter `HelloCS` for the project
    name, enter `C:\Code` for the location, and enter `Chapter01` for the solution
    name, as shown in *Figure 1.4* :![](img/Image00010.jpg)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置新项目**对话框中，输入项目名称`HelloCS`，输入位置`C:\Code`，输入解决方案名称`Chapter01`，如*图1.4*所示：![](img/Image00010.jpg)
- en: 'Figure 1.4: Configuring names and locations for your new project'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：为新项目配置名称和位置
- en: Click **Next** .
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: We are deliberately going to use the older project template for .NET 5.0 to
    see what a full console application looks like. In the next section, you will
    create a console application using .NET 6.0 and see what has changed.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意使用较旧的.NET 5.0项目模板，以查看完整的控制台应用程序是什么样子。在下一节中，您将使用.NET 6.0创建一个控制台应用程序，并看到发生了什么变化。
- en: In the **Additional information** dialog, in the **Target Framework** drop-down
    list, note the choices of Current and long-term support versions of .NET, and
    then select **.NET 5.0 (Current)** and click **Create** .
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**附加信息**对话框中，在**目标框架**下拉列表中，注意.NET的当前版本和长期支持版本的选择，然后选择**.NET 5.0（当前）**并点击**创建**。
- en: In **Solution Explorer** , double-click to open the file named `Program.cs`
    , and note that **Solution Explorer** shows the **HelloCS** project, as shown
    in *Figure 1.5* :![](img/Image00011.jpg)
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，双击打开名为`Program.cs`的文件，并注意**解决方案资源管理器**显示**HelloCS**项目，如*图1.5*所示：![](img/Image00011.jpg)
- en: 'Figure 1.5: Editing Program.cs in Visual Studio 2022'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：在Visual Studio 2022中编辑Program.cs
- en: In `Program.cs` , modify line 9 so that the text that is being written to the
    console says `Hello, C#!`
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，修改第9行，使得写入控制台的文本为`Hello, C#!`
- en: Compiling and running code using Visual Studio
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio编译和运行代码
- en: The next task is to compile and run the code.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是编译和运行代码。
- en: In Visual Studio, navigate to **Debug** | **Start Without Debugging** .
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**调试** | **开始不带调试**。
- en: The output in the console window will show the result of running your application,
    as shown in *Figure 1.6* :![Graphical user interface, text, application Description
    automatically generated](img/Image00012.jpg)
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台窗口中的输出将显示运行应用程序的结果，如*图1.6*所示：![图形用户界面，文本，应用程序说明自动生成](img/Image00012.jpg)
- en: 'Figure 1.6: Running the console app on Windows'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：在Windows上运行控制台应用程序
- en: Press any key to close the console window and return to Visual Studio.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键关闭控制台窗口并返回到Visual Studio。
- en: Select the **HelloCS** project and then, in the **Solution Explorer** toolbar,
    toggle on the **Show All Files** button, and note that the compiler-generated
    `bin` and `obj` folders are visible, as shown in *Figure 1.7* :![Graphical user
    interface, text, application, email Description automatically generated](img/Image00013.jpg)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**HelloCS**项目，然后在**解决方案资源管理器**工具栏中，切换打开**显示所有文件**按钮，并注意到编译器生成的`bin`和`obj`文件夹是可见的，如*图1.7*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00013.jpg)
- en: 'Figure 1.7: Showing the compiler-generated folders and files'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：显示编译器生成的文件夹和文件
- en: Understanding the compiler-generated folders and files
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解编译器生成的文件夹和文件
- en: Two compiler-generated folders were created, named `obj` and `bin` . You do
    not need to look inside these folders or understand their files yet. Just be aware
    that the compiler needs to create temporary folders and files to do its work.
    You could delete these folders and their files, and they can be recreated later.
    Developers often do this to "clean" a project. Visual Studio even has a command
    on the **Build** menu named **Clean Solution** that deletes some of these temporary
    files for you. The equivalent command with Visual Studio Code is `dotnet clean`
    .
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了两个编译器生成的文件夹，名为`obj`和`bin`。您不需要查看这些文件夹或了解它们的文件。只需知道编译器需要创建临时文件夹和文件来完成其工作。您可以删除这些文件夹及其文件，稍后可以重新创建。开发人员经常这样做来“清理”项目。Visual
    Studio甚至在**生成**菜单上有一个名为**清理解决方案**的命令，可以为您删除其中一些临时文件。在Visual Studio Code中，相应的命令是`dotnet
    clean`。
- en: The `obj` folder contains one compiled *object* file for each source code file.
    These objects haven't been linked together into a final executable yet.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj`文件夹包含每个源代码文件的一个已编译的*对象*文件。这些对象尚未链接到最终的可执行文件中。'
- en: The `bin` folder contains the *binary* executable for the application or class
    library. We will look at this in more detail in *Chapter 7* , *Packaging and Distributing
    .NET Types* .
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`文件夹包含应用程序或类库的*二进制*可执行文件。我们将在*第7章*中更详细地讨论这一点，*打包和分发.NET类型*。'
- en: Writing top-level programs
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写顶级程序
- en: You might be thinking that was a lot of code just to output `Hello, C#!` .
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会认为这是为了输出`Hello, C#!`而编写了大量代码。
- en: Although the boilerplate code is written for you by the project template, is
    there a simpler way?
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然项目模板为您编写了样板代码，但是否有更简单的方法？
- en: Well, in C# 9 or later, there is, and it is known as **top-level programs**
    .
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在C# 9或更高版本中，有一种称为**顶级程序**的方法。
- en: 'Let''s compare the console app created by the project template, as shown in
    the following code:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较项目模板创建的控制台应用程序，如下面的代码所示：
- en: '```cs'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System;
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: System;
- en: namespace
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: HelloCS
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: HelloCS
- en: '{'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: class
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Program
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Program
- en: '{'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: static
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的
- en: void
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Main
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: Main
- en: (
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '[] args'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[] args'
- en: )
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Console.WriteLine("Hello World!"
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello World!"
- en: );
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To the new top-level program minimum console app, as shown in the following
    code:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 到新的顶级程序最小控制台应用程序，如下面的代码所示：
- en: '```cs'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System;
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 系统;
- en: Console.WriteLine("Hello World!"
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello World!"
- en: );
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: That is a lot simpler, right? If you had to start with a blank file and write
    all the statements yourself, this is better. But how does it work?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就简单多了，对吧？如果您必须从空白文件开始编写所有语句，这样做更好。但是它是如何工作的呢？
- en: During compilation, all the boilerplate code to define a namespace, the `Program`
    class, and its `Main` method, is generated and wrapped around the statements you
    write.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译期间，将生成并包装您编写的语句周围的所有定义命名空间、`Program`类和其`Main`方法的样板代码。
- en: 'Key points to remember about top-level programs include the following list:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 关于顶级程序的要点包括以下列表：
- en: Any `using` statements still must to go at the top of the file.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何`using`语句仍然必须放在文件的顶部。
- en: There can be only one file like this in a project.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中只能有一个这样的文件。
- en: The `using System;` statement at the top of the file imports the `System` namespace.
    This enables the `Console.WriteLine` statement to work. You will learn more about
    namespaces in the next chapter.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 文件顶部的`using System;`语句导入了`System`命名空间。这使得`Console.WriteLine`语句能够工作。您将在下一章中了解更多关于命名空间的知识。
- en: Adding a second project using Visual Studio 2022
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022添加第二个项目
- en: 'Let''s add a second project to our solution to explore top-level programs:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的解决方案添加第二个项目，以探索顶级程序：
- en: In Visual Studio, navigate to **File** | **Add** | **New Project** .
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**文件** | **添加** | **新建项目**。
- en: In the **Add a new project** dialog, in **Recent project templates** , select
    **Console Application [C#]** and then click **Next** .
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加新项目**对话框中，在**最近的项目模板**中，选择**控制台应用程序[C#]**，然后单击**下一步**。
- en: In the **Configure your new project** dialog, for the **Project name** , enter
    `TopLevelProgram` , leave the location as `C:\Code\Chapter01` , and then click
    **Next** .
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置新项目**对话框中，对于**项目名称**，输入`TopLevelProgram`，将位置保留为`C:\Code\Chapter01`，然后单击**下一步**。
- en: In the **Additional information** dialog, select **.NET 6.0 (Long-term support)**
    , and then click **Create** .
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**附加信息**对话框中，选择**.NET 6.0（长期支持）**，然后单击**创建**。
- en: In **Solution Explorer** , in the `TopLevelProgram` project, double-click `Program.cs`
    to open it.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，在`TopLevelProgram`项目中，双击`Program.cs`以打开它。
- en: 'In `Program.cs` , note the code consists of only a comment and a single statement
    because it uses the top-level program feature introduced in C# 9, as shown in
    the following code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，请注意代码只包含一个注释和一个语句，因为它使用了C# 9中引入的顶级程序特性，如下面的代码所示：
- en: '```cs'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // See https://aka.ms/new-console-template for more information
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: // 有关更多信息，请参见https://aka.ms/new-console-template
- en: Console.WriteLine("Hello, World!"
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello, World!"
- en: );
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: But when I introduced the concept of top-level programs earlier, we needed a
    `using System;` statement. Why don't we need that here?
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我之前介绍了顶级程序的概念时，我们需要一个`using System;`语句。为什么我们在这里不需要呢？
- en: Implicitly imported namespaces
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隐式导入的命名空间
- en: 'The trick is that we do still need to import the `System` namespace, but it
    is now done for us using a feature introduced in C# 10\. Let''s see how:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍在于，我们确实需要导入`System`命名空间，但现在我们使用了C# 10中引入的一个功能来为我们完成。让我们看看：
- en: In **Solution Explorer** , select the `TopLevelProgram` project and toggle on
    the **Show All Files** button, and note that the compiler-generated `bin` and
    `obj` folders are visible.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，选择`TopLevelProgram`项目并切换**显示所有文件**按钮，并注意编译器生成的`bin`和`obj`文件夹是可见的。
- en: Expand the `obj` folder, expand the `Debug` folder, expand the `net6.0` folder,
    and open the file named `TopLevelProgram.GlobalUsings.g.cs` .
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开`obj`文件夹，展开`Debug`文件夹，展开`net6.0`文件夹，并打开名为`TopLevelProgram.GlobalUsings.g.cs`的文件。
- en: 'Note that this file is automatically created by the compiler for projects that
    target .NET 6, and that it uses a feature introduced in C# 10 called **global
    imports** that imports some commonly used namespaces like `System` for use in
    all code files, as shown in the following code:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，此文件是由编译器自动为目标为.NET 6的项目创建的，并且它使用了C# 10中引入的一个名为**全局导入**的功能，用于在所有代码文件中导入一些常用的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // <autogenerated />
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: // <autogenerated />
- en: global
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System;
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: ::System;
- en: global
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.Collections.Generic;
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.Collections.Generic;
- en: global
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.IO;
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.IO;
- en: global
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.Linq;
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.Linq;
- en: global
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.Net.Http;
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.Net.Http;
- en: global
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.Threading;
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.Threading;
- en: global
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: using
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: global
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 全局
- en: ::System.Threading.Tasks;
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: ::System.Threading.Tasks;
- en: '```'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: I will explain more about this feature in the next chapter. For now, just note
    that a significant change between .NET 5 and .NET 6 is that many of the project
    templates, like the one for console applications, use new language features to
    hide what is really happening.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一章更详细地解释这个功能。现在，只需注意.NET 5和.NET 6之间的一个重大变化是，许多项目模板（如控制台应用程序的模板）使用了新的语言特性来隐藏实际发生的事情。
- en: 'In the `TopLevelProgram` project, in `Program.cs` , modify the statement to
    output a different message and the version of the operating system, as shown in
    the following code:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TopLevelProgram`项目中，在`Program.cs`中，修改语句以输出不同的消息和操作系统的版本，如下面的代码所示：
- en: '```cs'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Console.WriteLine("Hello from a Top Level Program!"
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello from a Top Level Program!"
- en: );
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Console.WriteLine(Environment.OSVersion.VersionString);
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine(Environment.OSVersion.VersionString);
- en: '```'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In **Solution Explorer** , right-click the **Chapter01** solution, select **Set
    Startup Projects…** , set **Current selection** , and then click **OK** .
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击**Chapter01**解决方案，选择**设置启动项目…**，设置**当前选择**，然后单击**确定**。
- en: In **Solution Explorer** , click the **TopLevelProgram** project (or any file
    or folder within it), and note that Visual Studio indicates that **TopLevelProgram**
    is now the startup project by making the project name bold.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，单击**TopLevelProgram**项目（或其中的任何文件或文件夹），并注意Visual Studio指示**TopLevelProgram**现在是启动项目，因为项目名称加粗显示。
- en: Navigate to **Debug** | **Start Without Debugging** to run the **TopLevelProgram**
    project, and note the result, as shown in *Figure 1.8* :![](img/Image00014.jpg)
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**调试** | **开始调试**以运行**TopLevelProgram**项目，并注意结果，如*图1.8*所示：![](img/Image00014.jpg)
- en: 'Figure 1.8: Running a top-level program in a Visual Studio solution with two
    projects on Windows'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：在Windows上运行Visual Studio解决方案中的两个项目的顶级程序
- en: Building console apps using Visual Studio Code
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code构建控制台应用程序
- en: The goal of this section is to showcase how to build a console app using Visual
    Studio Code.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是展示如何使用Visual Studio Code构建控制台应用程序。
- en: If you never want to try Visual Studio Code or .NET Interactive Notebooks, then
    please feel free to skip this section and the next, and then continue with the
    *Reviewing the folders and files for projects* section.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从不想尝试Visual Studio Code或.NET交互式笔记本，请随意跳过本节和下一节，然后继续*查看项目的文件夹和文件*部分。
- en: Both the instructions and screenshots in this section are for Windows, but the
    same actions will work with Visual Studio Code on the macOS and Linux variants.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的说明和截图都是针对Windows的，但在macOS和Linux变体上使用Visual Studio Code时，相同的操作也适用。
- en: 'The main differences will be native command-line actions such as deleting a
    file: both the command and the path are likely to be different on Windows or macOS
    and Linux. Luckily, the `dotnet` command-line tool will be identical on all platforms.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别在于本机命令行操作，例如删除文件：在Windows或macOS和Linux上，命令和路径可能不同。幸运的是，`dotnet`命令行工具在所有平台上都是相同的。
- en: Managing multiple projects using Visual Studio Code
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code管理多个项目
- en: Visual Studio Code has a concept named a **workspace** that allows you to open
    and manage multiple projects simultaneously. We will use a workspace to manage
    the two projects that you will create in this chapter.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code有一个名为**工作区**的概念，允许您同时打开和管理多个项目。我们将使用一个工作区来管理您将在本章中创建的两个项目。
- en: Writing code using Visual Studio Code
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code编写代码
- en: Let's get started writing code!
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码！
- en: Start Visual Studio Code.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio Code。
- en: Make sure that you do not have any open files, folders, or workspaces.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您没有打开任何文件、文件夹或工作区。
- en: Navigate to **File** | **Save Workspace As…** .
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **另存工作区为…**。
- en: In the dialog box, navigate to your user folder on macOS (mine is named `markjprice`
    ), your `Documents` folder on Windows, or any directory or drive in which you
    want to save your projects.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，导航到macOS上的用户文件夹（我的名字是`markjprice`），Windows上的`Documents`文件夹，或者您想要保存项目的任何目录或驱动器。
- en: Click the **New Folder** button and name the folder `Code` . (If you completed
    the section for Visual Studio 2022, then this folder will already exist.)
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**新建文件夹**按钮，将文件夹命名为`Code`。（如果您已完成Visual Studio 2022的部分，则此文件夹已经存在。）
- en: In the `Code` folder, create a new folder named `Chapter01-vscode` .
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Code`文件夹中，创建一个名为`Chapter01-vscode`的新文件夹。
- en: In the `Chapter01-vscode` folder, save the workspace as `Chapter01.code-workspace`
    .
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter01-vscode`文件夹中，将工作区保存为`Chapter01.code-workspace`。
- en: Navigate to **File** | **Add Folder to Workspace…** or click the **Add Folder**
    button.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **添加文件夹到工作区…**或单击**添加文件夹**按钮。
- en: In the `Chapter01-vscode` folder, create a new folder named `HelloCS` .
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter01-vscode`文件夹中，创建一个名为`HelloCS`的新文件夹。
- en: Select the `HelloCS` folder and click the **Add** button.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`HelloCS`文件夹，然后单击**添加**按钮。
- en: Navigate to **View** | **Terminal** .
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**视图** | **终端**。
- en: We are deliberately going to use the older project template for .NET 5.0 to
    see what a full console application looks like. In the next section, you will
    create a console application using .NET 6.0 and see what has changed.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意使用较旧的.NET 5.0项目模板，以查看完整的控制台应用程序的外观。在下一节中，您将使用.NET 6.0创建控制台应用程序，并查看发生了什么变化。
- en: 'In **TERMINAL** , make sure that you are in the `HelloCS` folder, and then
    use the `dotnet` command-line tool to create a new console app that targets .NET
    5.0, as shown in the following command:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，确保您在`HelloCS`文件夹中，然后使用`dotnet`命令行工具创建一个新的目标为.NET 5.0的控制台应用程序，如下命令所示：
- en: '```cs'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new console -f net5.0
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new console -f net5.0
- en: '```'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: You will see that the `dotnet` command-line tool creates a new **Console Application**
    project for you in the current folder, and the **EXPLORER** window shows the two
    files created, `HelloCS.csproj` and `Program.cs` , and the `obj` folder, as shown
    in *Figure 1.9* :![](img/Image00015.jpg)
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到`dotnet`命令行工具在当前文件夹中为您创建了一个新的**控制台应用程序**项目，**资源管理器**窗口显示了创建的两个文件`HelloCS.csproj`和`Program.cs`，以及`obj`文件夹，如*图1.9*所示：![](img/Image00015.jpg)
- en: 'Figure 1.9: The EXPLORER window will show that two files and a folder have
    been created'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：**资源管理器**窗口将显示已创建两个文件和一个文件夹
- en: 'In **EXPLORER** , click on the file named `Program.cs` to open it in the editor
    window. The first time that you do this, Visual Studio Code may have to download
    and install C# dependencies like OmniSharp, .NET Core Debugger, and Razor Language
    Server, if it did not do this when you installed the C# extension or if they need
    updating. Visual Studio Code will show progress in the **Output** window and eventually
    the message `Finished` , as shown in the following output:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资源管理器**中，单击名为`Program.cs`的文件，以在编辑器窗口中打开它。第一次这样做时，Visual Studio Code可能需要下载并安装C#依赖项，如OmniSharp、.NET
    Core Debugger和Razor Language Server，如果在安装C#扩展时没有这样做，或者如果它们需要更新。Visual Studio Code将在**输出**窗口中显示进度，并最终显示消息`完成`，如下输出所示：
- en: '```cs'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Installing C# dependencies...
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 安装C#依赖项...
- en: 'Platform: win32, x86_64'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 平台：win32，x86_64
- en: Downloading package 'OmniSharp for Windows (.NET 4.6 / x64)' (36150 KB)....................
    Done!
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 下载包'OmniSharp for Windows (.NET 4.6 / x64)'(36150 KB)....................完成！
- en: Validating download...
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 验证下载...
- en: Integrity Check succeeded.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性检查成功。
- en: Installing package 'OmniSharp for Windows (.NET 4.6 / x64)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包'OmniSharp for Windows (.NET 4.6 / x64)'
- en: Downloading package '.NET Core Debugger (Windows / x64)' (45048 KB)....................
    Done!
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 下载包'.NET Core Debugger (Windows / x64)'(45048 KB)....................完成！
- en: Validating download...
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 验证下载...
- en: Integrity Check succeeded.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性检查成功。
- en: Installing package '.NET Core Debugger (Windows / x64)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包'.NET Core Debugger (Windows / x64)'
- en: Downloading package 'Razor Language Server (Windows / x64)' (52344 KB)....................
    Done!
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 下载包'Razor Language Server (Windows / x64)'(52344 KB)....................完成！
- en: Installing package 'Razor Language Server (Windows / x64)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 安装包'Razor Language Server (Windows / x64)'
- en: Finished
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 完成
- en: '```'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The preceding output is from Visual Studio Code on Windows. When run on macOS
    or Linux, the output will look slightly different, but the equivalent components
    for your operating system will be downloaded and installed.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '上述输出来自Windows上的Visual Studio Code。在macOS或Linux上运行时，输出看起来可能略有不同，但是您的操作系统的等效组件将被下载和安装。 '
- en: Folders named `obj` and `bin` will have been created and when you see a notification
    saying that required assets are missing, click **Yes** , as shown in *Figure 1.10*
    :![Graphical user interface, text, application, email Description automatically
    generated](img/Image00016.jpg)
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建名为`obj`和`bin`的文件夹，当您看到通知说缺少所需的资源时，单击**是**，如*图1.10*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00016.jpg)
- en: 'Figure 1.10: Warning message to add required build and debug assets'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：警告消息，添加所需的构建和调试资源
- en: If the notification disappears before you can interact with it, then you can
    click the bell icon in the far-right corner of the status bar to show it again.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果通知在您与其交互之前消失，则可以单击状态栏最右侧的铃铛图标，以再次显示它。
- en: After a few seconds, another folder named `.vscode` will be created with some
    files that are used by Visual Studio Code to provide features like IntelliSense
    during debugging, which you will learn more about in *Chapter 4* , *Writing, Debugging,
    and Testing Functions* .
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，将创建另一个名为`.vscode`的文件夹，其中包含一些由Visual Studio Code使用的文件，用于在调试期间提供IntelliSense等功能，您将在*第4章*，*编写、调试和测试函数*中了解更多信息。
- en: In `Program.cs` , modify line 9 so that the text that is being written to the
    console says `Hello, C#!`
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，修改第9行，以便写入控制台的文本为`Hello, C#!`
- en: '**Good Practice** : Navigate to **File** | **Auto Save** . This toggle will
    save the annoyance of remembering to save before rebuilding your application each
    time.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：导航到**文件** | **自动保存**。此切换将保存在每次重建应用程序之前记得保存的烦恼。'
- en: Compiling and running code using the dotnet CLI
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用dotnet CLI编译和运行代码
- en: 'The next task is to compile and run the code:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是编译和运行代码：
- en: 'Navigate to **View** | **Terminal** and enter the following command:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**视图** | **终端**，并输入以下命令：
- en: '```cs'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet run
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet run
- en: '```'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The output in the **TERMINAL** window will show the result of running your application,
    as shown in *Figure 1.11* :![Graphical user interface, text, application, email
    Description automatically generated](img/Image00017.jpg)
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**窗口中的输出将显示运行应用程序的结果，如*图1.11*所示：![图形用户界面，文本，应用程序，电子邮件描述自动生成](img/Image00017.jpg)'
- en: 'Figure 1.11: The output of running your first console application'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：运行您的第一个控制台应用程序的输出
- en: Adding a second project using Visual Studio Code
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code添加第二个项目
- en: 'Let''s add a second project to our workspace to explore top-level programs:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的工作区添加第二个项目来探索顶级程序：
- en: In Visual Studio Code, navigate to **File** | **Add Folder to Workspace…** .
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，导航到**File** | **Add Folder to Workspace…**。
- en: In the `Chapter01-vscode` folder, use the **New Folder** button to create a
    new folder named `TopLevelProgram` , select it, and click **Add** .
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter01-vscode`文件夹中，使用**New Folder**按钮创建一个名为`TopLevelProgram`的新文件夹，选择它，然后单击**Add**。
- en: Navigate to **Terminal** | **New Terminal** , and in the drop-down list that
    appears, select **TopLevelProgram** . Alternatively, in **EXPLORER** , right-click
    the `TopLevelProgram` folder and then select **Open in Integrated Terminal** .
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Terminal** | **New Terminal**，然后在出现的下拉列表中选择**TopLevelProgram**。或者，在**EXPLORER**中，右键单击`TopLevelProgram`文件夹，然后选择**Open
    in Integrated Terminal**。
- en: 'In **TERMINAL** , confirm that you are in the `TopLevelProgram` folder, and
    then enter the command to create a new console application, as shown in the following
    command:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**TERMINAL**中，确认您在`TopLevelProgram`文件夹中，然后输入创建新控制台应用程序的命令，如下命令所示：
- en: '```cs'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new console
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new console
- en: '```'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : When using workspaces, be careful when entering commands
    in **TERMINAL** . Be sure that you are in the correct folder before entering potentially
    destructive commands! That is why I got you to create a new terminal for `TopLevelProgram`
    before issuing the command to create a new console app.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在使用工作区时，在**TERMINAL**中输入命令时要小心。在输入可能具有破坏性的命令之前，请确保您在正确的文件夹中！这就是为什么我让您在发出创建新控制台应用程序的命令之前为`TopLevelProgram`创建一个新终端的原因。'
- en: Navigate to **View** | **Command Palette** .
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**View** | **Command Palette**。
- en: 'Enter `omni` , and then, in the drop-down list that appears, select **OmniSharp:
    Select Project** .'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入`omni`，然后在出现的下拉列表中选择**OmniSharp: Select Project**。'
- en: In the drop-down list of two projects, select the **TopLevelProgram** project,
    and when prompted, click **Yes** to add required assets to debug.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个项目的下拉列表中，选择**TopLevelProgram**项目，并在提示时单击**Yes**以添加所需的资产以进行调试。
- en: '**Good Practice** : To enable debugging and other useful features, like code
    formatting and Go to Definition, you must tell OmniSharp which project you are
    actively working on in Visual Studio Code. You can quickly toggle active projects
    by clicking the project/folder to the right of the flame icon on the left side
    of the status bar.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：为了启用调试和其他有用的功能，如代码格式化和转到定义，您必须告诉OmniSharp您正在Visual Studio Code中积极工作的项目。您可以通过单击状态栏左侧火焰图标右侧的项目/文件夹快速切换活动项目。'
- en: 'In **EXPLORER** , in the `TopLevelProgram` folder, select `Program.cs` , and
    then change the existing statement to output a different message and also output
    the operating system version string, as shown in the following code:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**EXPLORER**中，在`TopLevelProgram`文件夹中，选择`Program.cs`，然后更改现有语句以输出不同的消息，并输出操作系统版本字符串，如下面的代码所示：
- en: '```cs'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Console.WriteLine("Hello from a Top Level Program!"
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello from a Top Level Program!"
- en: );
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: Console.WriteLine(Environment.OSVersion.VersionString);
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine(Environment.OSVersion.VersionString);
- en: '```'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In **TERMINAL** , enter the command to run a program, as shown in the following
    command:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**TERMINAL**中，输入运行程序的命令，如下命令所示：
- en: '```cs'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet run
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet run
- en: '```'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note the output in the **TERMINAL** window, as shown in *Figure 1.12* :![](img/Image00018.jpg)
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意**TERMINAL**窗口中的输出，如*图1.12*所示：![](img/Image00018.jpg)
- en: 'Figure 1.12: Running a top-level program in a Visual Studio Code workspace
    with two projects on Windows'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：在Windows上运行Visual Studio Code工作区中的两个项目的顶级程序
- en: 'If you were to run the program on macOS Big Sur, the environment operating
    system would be different, as shown in the following output:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在macOS Big Sur上运行程序，则环境操作系统将不同，如下面的输出所示：
- en: '```cs'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Hello from a Top Level Program!
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 来自顶级程序的问候！
- en: Unix 11.2.3
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: Unix 11.2.3
- en: '```'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Managing multiple files using Visual Studio Code
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code管理多个文件
- en: 'If you have multiple files that you want to work with at the same time, then
    you can put them side by side as you edit them:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个文件要同时使用，则可以将它们并排放置以进行编辑：
- en: In **EXPLORER** , expand the two projects.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**EXPLORER**中，展开两个项目。
- en: Open both `Program.cs` files from the two projects.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从两个项目的`Program.cs`文件中打开。
- en: Click, hold, and drag the edit window tab for one of your open files to arrange
    them so that you can see both files at the same time.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击，按住并拖动一个打开文件的编辑窗口标签，以便您可以同时看到两个文件。
- en: Exploring code using .NET Interactive Notebooks
  id: totrans-491
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.NET交互式笔记本探索代码
- en: .NET Interactive Notebooks makes writing code even easier than top-level programs.
    It requires Visual Studio Code, so if you did not install it earlier, please install
    it now.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: .NET交互式笔记本使编写代码比顶级程序更容易。它需要Visual Studio Code，所以如果您之前没有安装它，请立即安装。
- en: Creating a notebook
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个笔记本
- en: 'First, we need to create a notebook:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个笔记本：
- en: In Visual Studio Code, close any open workspaces or folders.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，关闭任何打开的工作区或文件夹。
- en: Navigate to **View** | **Command Palette** .
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**View** | **Command Palette**。
- en: 'Type `.net inter` , and then select **.NET Interactive: Create new blank notebook**
    , as shown in *Figure 1.13* :![](img/Image00019.jpg)'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入`.net inter`，然后选择**.NET Interactive: Create new blank notebook**，如*图1.13*所示：![](img/Image00019.jpg)'
- en: 'Figure 1.13: Creating a new blank .NET notebook'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：创建一个新的空白.NET笔记本
- en: When prompted to select the file extension, choose **Create as '.dib'** .
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示选择文件扩展名时，选择**Create as '.dib'**。
- en: '`.dib` is an experimental file format defined by Microsoft to avoid confusion
    and compatibility issues with the .`ipynb` format used by Python interactive notebooks.
    The file extension was historically only for Jupyter notebooks that can contain
    an interactive (I) mix of data, Python code (PY), and output in a notebook file
    (NB). With .NET Interactive Notebooks, the concept has expanded to allow a mix
    of C#, F#, SQL, HTML, JavaScript, Markdown, and other languages. `.dib` is polyglot,
    meaning it supports mixed languages. Conversion between the `.dib` and `.ipynb`
    file formats is supported.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`.dib`是由Microsoft定义的实验性文件格式，旨在避免与Python交互式笔记本使用的`.ipynb`格式引起混淆和兼容性问题。该文件扩展名历史上仅用于可以包含笔记本文件（NB）中的数据、Python代码（PY）和输出的交互式（I）混合的Jupyter笔记本。使用.NET
    Interactive笔记本，这个概念已经扩展到允许混合C#、F#、SQL、HTML、JavaScript、Markdown和其他语言。`.dib`是多语言的，意味着它支持混合语言。支持在`.dib`和`.ipynb`文件格式之间进行转换。'
- en: Select **C#** for the default language for code cells in the notebook.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**C#**作为笔记本中代码单元格的默认语言。
- en: 'If a newer version of .NET Interactive is available, you might have to wait
    for it to uninstall the older version and install the newer one. Navigate to **View**
    | **Output** and select **.NET Interactive : diagnostics** in the drop-down list.
    Please be patient. It can take a few minutes for the notebook to appear because
    it has to start up a hosting environment for .NET. If nothing happens after a
    few minutes, then close Visual Studio Code and restart it.'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有更新版本的.NET Interactive可用，您可能需要等待它卸载旧版本并安装新版本。转到**视图** | **输出**，并在下拉列表中选择**.NET
    Interactive：诊断**。请耐心等待。笔记本可能需要几分钟才能出现，因为它必须启动.NET的托管环境。如果几分钟后什么都没有发生，那么关闭Visual
    Studio Code并重新启动它。
- en: 'Once the .NET Interactive Notebooks extension is downloaded and installed,
    the **OUTPUT** window diagnostics will show that a Kernel process has started
    (your process and port number will be different from the output below), as shown
    in the following output, which has been edited to save space:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦下载并安装了.NET Interactive笔记本扩展，**OUTPUT**窗口诊断将显示内核进程已启动（您的进程和端口号将与下面的输出不同），如下面的输出所示，已编辑以节省空间：
- en: '```cs'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Extension started for VS Code Stable.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展已启动，适用于VS Code Stable。
- en: '...'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Kernel process 12516 Port 59565 is using tunnel uri http://localhost:59565/
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 内核进程12516端口59565正在使用隧道uri http://localhost:59565/
- en: '```'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Writing and running code in a notebook
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在笔记本中编写和运行代码
- en: 'Next, we can write code in the notebook cells:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以在笔记本单元格中编写代码：
- en: The first cell should already be set to **C# (.NET Interactive)** , but if it
    is set to anything else, then click the language selector in the bottom-right
    corner of the code cell and then select **C# (.NET Interactive)** as the language
    mode for that cell, and note your other choices of language for a code cell, as
    shown in *Figure 1.14* :![](img/Image00020.jpg)
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个单元格应该已经设置为**C# (.NET Interactive)**，但如果设置为其他任何内容，则单击代码单元格右下角的语言选择器，然后选择**C#
    (.NET Interactive)**作为该单元格的语言模式，并注意您的其他代码单元格语言选择，如*图1.14*所示：![](img/Image00020.jpg)
- en: 'Figure 1.14: Changing the language for a code cell in a .NET Interactive notebook'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：在.NET Interactive笔记本中更改代码单元格的语言
- en: 'Inside the **C# (.NET Interactive)** code cell, enter a statement to output
    a message to the console, and note that you do not need to end the statement with
    a semicolon, as you normally would in a full application, as shown in the following
    code:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**C# (.NET Interactive)**代码单元格中，输入一条语句以将消息输出到控制台，并注意您不需要像在完整应用程序中那样以分号结束语句，如下面的代码所示：
- en: '```cs'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Console.WriteLine("Hello, .NET Interactive!"
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine("Hello, .NET Interactive!"
- en: )
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '```'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click the **Execute Cell** button to the left of the code cell and note the
    output that appears in the gray box under the code cell, as shown in *Figure 1.15*
    :![](img/Image00021.jpg)
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击代码单元格左侧的**执行单元格**按钮，并注意出现在代码单元格下方灰色框中的输出，如*图1.15*所示：![](img/Image00021.jpg)
- en: 'Figure 1.15: Running code in a notebook and seeing the output below'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：在笔记本中运行代码并在下方看到输出
- en: Saving a notebook
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存笔记本
- en: 'Like any other file, we should save the notebook before continuing further:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他文件一样，我们应该在继续之前保存笔记本：
- en: Navigate to **File** | **Save As…** .
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**文件** | **另存为…**。
- en: Change to the `Chapter01-vscode` folder and save the notebook as `Chapter01.dib`
    .
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`Chapter01-vscode`文件夹，并将笔记本保存为`Chapter01.dib`。
- en: Close the `Chapter01.dib` editor tab.
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`Chapter01.dib`编辑器选项卡。
- en: Adding Markdown and special commands to a notebook
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向笔记本添加Markdown和特殊命令
- en: 'We can mix and match cells containing Markdown and code with special commands:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以混合和匹配包含Markdown和特殊命令的单元格：
- en: Navigate to **File** | **Open File…** , and select the `Chapter01.dib` file.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**文件** | **打开文件…**，并选择`Chapter01.dib`文件。
- en: If you are prompted with `Do you` `trust the authors of these files?` , click
    **Open** .
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提示`Do you` `trust the authors of these files?`，请单击**打开**。
- en: Hover your mouse above the code block and click **+ Markup** to add a Markdown
    cell.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在代码块上方，单击**+标记**以添加Markdown单元格。
- en: 'Type a heading level 1, as shown in the following Markdown:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一级标题，如下所示的Markdown：
- en: '```cs'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Chapter 1 - Hello, C#! Welcome, .NET!
  id: totrans-532
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 - 你好，C#! 欢迎，.NET!
- en: Mixing *rich*
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 混合*丰富*
- en: '**text**'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '**text**'
- en: and code is cool!
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 和代码很酷！
- en: '```'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click the tick in the top-right corner of the cell to stop editing the cell
    and view the processed Markdown.
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击单元格右上角的勾号以停止编辑单元格并查看处理后的Markdown。
- en: If your cells are in the wrong order, then you can drag and drop to rearrange
    them.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的单元格顺序不正确，则可以拖放以重新排列它们。
- en: Hover between the Markdown cell and the code cell and click **+ Code** .
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在Markdown单元格和代码单元格之间，然后单击**+代码**。
- en: 'Type a special command to output version information about .NET Interactive,
    as shown in the following code:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个特殊命令以输出.NET Interactive的版本信息，如下所示的代码：
- en: '```cs'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '#!about'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '#!about'
- en: '```'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click the **Execute Cell** button and note the output, as shown in *Figure 1.16*
    :![](img/Image00022.jpg)
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**执行单元格**按钮并注意输出，如*图1.16*所示：![](img/Image00022.jpg)
- en: 'Figure 1.16: Mixing Markdown, code, and special commands in a .NET Interactive
    notebook'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.16：在.NET Interactive笔记本中混合Markdown、代码和特殊命令
- en: Executing code in multiple cells
  id: totrans-546
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多个单元格中执行代码
- en: 'When you have multiple code cells in a notebook, you must execute the preceding
    code cells before their context becomes available in subsequent code cells:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在笔记本中有多个代码单元格时，你必须在后续的代码单元格中执行前面的代码单元格，才能使用它们的上下文：
- en: 'At the bottom of the notebook, add a new code cell, and then type a statement
    to declare a variable and assign an integer value, as shown in the following code:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在笔记本的底部，添加一个新的代码单元格，然后输入一个语句来声明一个变量并赋予一个整数值，如下面的代码所示：
- en: '```cs'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: number = 8
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: number = 8
- en: ;
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '```'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of the notebook, add a new code cell, and then type a statement
    to output the `number` variable, as shown in the following code:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在笔记本的底部，添加一个新的代码单元格，然后输入一个语句来输出`number`变量，如下面的代码所示：
- en: '```cs'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Console.WriteLine(number);
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: Console.WriteLine(number);
- en: '```'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note the second code cell does not know about the `number` variable because
    it was defined and assigned in another code cell, aka context, as shown in *Figure
    1.17* :![](img/Image00023.jpg)
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，第二个代码单元格不知道`number`变量，因为它是在另一个代码单元格中定义和赋值的，也就是上下文，如*图1.17*所示：![](img/Image00023.jpg)
- en: 'Figure 1.17: The number variable does not exist in the current cell or context'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17：当前单元格或上下文中不存在number变量
- en: In the first cell, click the **Execute Cell** button to declare and assign a
    value to the variable, and then in the second cell, click the **Execute Cell**
    button to output the `number` variable, and note that this works. (Alternatively,
    in the first cell, you can click the **Execute Cell and Below** button.)
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个单元格中，点击**执行单元格**按钮来声明并赋值给变量一个值，然后在第二个单元格中，点击**执行单元格**按钮来输出`number`变量，并注意这是有效的。（或者，在第一个单元格中，你可以点击**执行单元格及以下**按钮。）
- en: '**Good Practice** : If you have related code split between two cells, remember
    to execute the preceding cell before executing the subsequent cell. At the top
    of the notebook, there are the following buttons – **Clear Outputs** and **Run
    All** . These are very handy because you can click one and then the other to ensure
    that all code cells are executed properly, as long as they are in the correct
    order.'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：如果你的相关代码分散在两个单元格中，请记得在执行后续单元格之前执行前面的单元格。在笔记本的顶部，有以下按钮 - **清除输出**
    和 **运行全部**。这些非常方便，因为你可以依次点击它们，以确保所有代码单元格都按正确的顺序执行。'
- en: Using .NET Interactive Notebooks for the code in this book
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用本书中的代码的.NET Interactive笔记本
- en: 'Throughout the rest of the chapters, I will not give explicit instructions
    to use notebooks, but the GitHub repository for the book has solution notebooks
    when appropriate. I expect many readers will want to run my pre-created notebooks
    for language and library features covered in *Chapters 2* to *12* , which they
    want to see in action and learn about without having to write a complete application,
    even if it is just a console app:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我不会明确说明使用笔记本，但是本书的GitHub存储库在适当的时候会有解决方案笔记本。我希望许多读者会想要运行我预先创建的笔记本，以了解*第2*至*12*章中涵盖的语言和库特性，并且不必编写一个完整的应用程序，即使只是一个控制台应用程序：
- en: '[https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)'
- en: Reviewing the folders and files for projects
  id: totrans-565
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查项目的文件夹和文件
- en: In this chapter, you created two projects named `HelloCS` and `TopLevelProgram`
    .
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了两个名为`HelloCS`和`TopLevelProgram`的项目。
- en: Visual Studio Code uses a workspace file to manage multiple projects. Visual
    Studio 2022 uses a solution file to manage multiple projects. You also created
    a .NET Interactive notebook.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code使用工作区文件来管理多个项目。Visual Studio 2022使用解决方案文件来管理多个项目。你还创建了一个.NET
    Interactive笔记本。
- en: 'The result is a folder structure and files that will be repeated in subsequent
    chapters, although with more than just two projects, as shown in *Figure 1.18*
    :'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个文件夹结构和文件，将在后续章节中重复出现，尽管不仅仅是两个项目，如*图1.18*所示：
- en: '![](img/Image00024.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image00024.jpg)'
- en: 'Figure 1.18: Folder structure and files for the two projects in this chapter'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18：本章中两个项目的文件夹结构和文件
- en: Understanding the common folders and files
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解常见的文件夹和文件
- en: 'Although `.code-workspace` and `.sln` files are different, the project folders
    and files such as `HelloCS` and `TopLevelProgram` are identical for Visual Studio
    2022 and Visual Studio Code. This means that you can mix and match between both
    code editors if you like:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`.code-workspace`和`.sln`文件是不同的，但是`HelloCS`和`TopLevelProgram`等项目文件夹和文件对于Visual
    Studio 2022和Visual Studio Code是相同的。这意味着你可以在这两个代码编辑器之间进行混合和匹配：
- en: In Visual Studio 2022, with a solution open, navigate to **File** | **Add Existing
    Project…** to add a project file created by another tool.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，打开一个解决方案，导航到**文件** | **添加现有项目…** 来添加另一个工具创建的项目文件。
- en: In Visual Studio Code, with a workspace open, navigate to **File** | **Add Folder
    to Workspace…** to add a project folder created by another tool.
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，打开一个工作区，导航到**文件** | **添加文件夹到工作区…** 来添加另一个工具创建的项目文件夹。
- en: '**Good Practice** : Although the source code, like the `.csproj` and `.cs`
    files, is identical, the `bin` and `obj` folders that are automatically generated
    by the compiler could have mismatched file versions that give errors. If you want
    to open the same project in both Visual Studio 2022 and Visual Studio Code, delete
    the temporary `bin` and `obj` folders before opening the project in the other
    code editor. This is why I asked you to create a different folder for the Visual
    Studio Code solutions in this chapter.'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：尽管源代码，如`.csproj`和`.cs`文件是相同的，但是编译器自动生成的`bin`和`obj`文件夹可能具有不匹配的文件版本，导致错误。如果你想在Visual
    Studio 2022和Visual Studio Code中打开同一个项目，删除在另一个代码编辑器中打开项目之前的临时`bin`和`obj`文件夹。这就是为什么我要求你在本章中为Visual
    Studio Code解决方案创建一个不同的文件夹。'
- en: Understanding the solution code on GitHub
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解GitHub上的解决方案代码
- en: 'The solution code in the GitHub repository for this book includes separate
    folders for Visual Studio Code, Visual Studio 2022, and .NET Interactive notebook
    files, as shown in the following list:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的GitHub存储库中的解决方案代码包括Visual Studio Code、Visual Studio 2022和.NET Interactive笔记本文件的单独文件夹，如下所示：
- en: 'Visual Studio 2022 solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/vs4win](https://github.com/markjprice/cs10dotnet6/tree/main/vs4win)'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022解决方案：[https://github.com/markjprice/cs10dotnet6/tree/main/vs4win](https://github.com/markjprice/cs10dotnet6/tree/main/vs4win)
- en: 'Visual Studio Code solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/vscode](https://github.com/markjprice/cs10dotnet6/tree/main/vscode)'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code解决方案：[https://github.com/markjprice/cs10dotnet6/tree/main/vscode](https://github.com/markjprice/cs10dotnet6/tree/main/vscode)
- en: '.NET Interactive Notebook solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Interactive笔记本解决方案：[https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)
- en: '**Good Practice** : If you need to, return to this chapter to remind yourself
    how to create and manage multiple projects in the code editor of your choice.
    The GitHub repository has step-by-step instructions for four code editors (Visual
    Studio 2022 for Windows, Visual Studio Code, Visual Studio 2022 for Mac, and JetBrains
    Rider), along with additional screenshots: [https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/](https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/)
    .'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果需要的话，可以返回本章，以便提醒自己如何在所选的代码编辑器中创建和管理多个项目。GitHub存储库提供了四种代码编辑器（Windows的Visual
    Studio 2022，Visual Studio Code，Mac的Visual Studio 2022和JetBrains Rider）的逐步说明，以及额外的屏幕截图：[https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/](https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/)。'
- en: Making good use of the GitHub repository for this book
  id: totrans-582
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用本书的GitHub存储库
- en: Git is a commonly used source code management system. GitHub is a company, website,
    and desktop application that makes it easier to manage Git. Microsoft purchased
    GitHub in 2018, so it will continue to get closer integration with Microsoft tools.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一种常用的源代码管理系统。GitHub是一个公司、网站和桌面应用程序，使Git的管理变得更加容易。微软于2018年收购了GitHub，因此它将继续与微软工具更紧密地集成。
- en: 'I created a GitHub repository for this book, and I use it for the following:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这本书创建了一个GitHub存储库，并且我用它来做以下事情：
- en: To store the solution code for the book that can be maintained after the print
    publication date.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储书中可以在印刷出版日期后继续维护的解决方案代码。
- en: To provide extra materials that extend the book, like errata fixes, small improvements,
    lists of useful links, and longer articles that cannot fit in the printed book.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供扩展书籍的额外材料，如勘误修正、小改进、有用链接列表和无法放入印刷书中的长文章。
- en: To provide a place for readers to get in touch with me if they have issues with
    the book.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为读者提供一个与我联系的地方，如果他们在阅读书籍时遇到问题。
- en: Raising issues with the book
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提出书中的问题
- en: 'If you get stuck following any of the instructions in this book, or if you
    spot a mistake in the text or the code in the solutions, please raise an issue
    in the GitHub repository:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在阅读本书时遇到任何问题，或者发现文本或解决方案中的代码错误，请在GitHub存储库中提出问题：
- en: 'Use your favorite browser to navigate to the following link: [https://github.com/markjprice/cs10dotnet6/issues](https://github.com/markjprice/cs10dotnet6/issues)
    .'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的浏览器导航到以下链接：[https://github.com/markjprice/cs10dotnet6/issues](https://github.com/markjprice/cs10dotnet6/issues)。
- en: Click **New Issue** .
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**New Issue**。
- en: 'Enter as much detail as possible that will help me to diagnose the issue. For
    example:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入尽可能多的细节，这将帮助我诊断问题。例如：
- en: Your operating system, for example, Windows 11 64-bit, or macOS Big Sur version
    11.2.3.
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的操作系统，例如Windows 11 64位，或macOS Big Sur版本11.2.3。
- en: Your hardware, for example, Intel, Apple Silicon, or ARM CPU.
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的硬件，例如Intel、Apple Silicon或ARM CPU。
- en: Your code editor, for example, Visual Studio 2022, Visual Studio Code, or something
    else, including the version number.
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的代码编辑器，例如Visual Studio 2022，Visual Studio Code，或其他任何东西，包括版本号。
- en: As much of your code and configuration that you feel is relevant and necessary.
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您认为相关和必要的代码和配置的大部分内容。
- en: Description of expected behavior and the behavior experienced.
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预期行为和实际行为的描述。
- en: Screenshots (if possible).
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕截图（如果可能）。
- en: Writing this book is a side hustle for me. I have a full-time job, so I mostly
    work on the book at weekends. This means that I cannot always respond immediately
    to issues. But I want all my readers to be successful with my book, so if I can
    help you (and others) without too much trouble, then I will gladly do so.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 写这本书对我来说是一种副业。我有一份全职工作，所以我大部分时间都在周末工作。这意味着我不能总是立即回复问题。但我希望所有的读者都能成功阅读我的书，所以如果我可以在不太麻烦的情况下帮助您（和其他人），那么我会很乐意这样做。
- en: Giving me feedback
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给我反馈
- en: If you'd like to give me more general feedback about the book, then the GitHub
    repository `README.md` page has links to some surveys. You can provide the feedback
    anonymously, or if you would like a response from me, then you can supply an email
    address. I will only use this email address to answer your feedback.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想就本书给我提供更一般的反馈意见，那么GitHub存储库的`README.md`页面上有一些调查链接。您可以匿名提供反馈意见，或者如果您希望得到我的回复，那么您可以提供一个电子邮件地址。我只会使用这个电子邮件地址来回复您的反馈。
- en: I love to hear from my readers about what they like about my book, as well as
    suggestions for improvements and how they are working with C# and .NET, so don't
    be shy. Please get in touch!
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 我很乐意听取读者对我的书喜欢的内容，以及改进建议以及他们如何使用C#和.NET，所以不要害羞。请与我联系！
- en: Thank you in advance for your thoughtful and constructive feedback.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 提前感谢您的周到和建设性的反馈。
- en: Downloading solution code from the GitHub repository
  id: totrans-604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从GitHub存储库下载解决方案代码
- en: 'I use GitHub to store solutions to all the hands-on, step-by-step coding examples
    throughout chapters and the practical exercises that are featured at the end of
    each chapter. You will find the repository at the following link: [https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)
    .'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用GitHub存储了所有章节中的逐步操作、逐步编码示例的解决方案以及每章末尾的实践练习。您可以在以下链接找到存储库：[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)。
- en: 'If you just want to download all the solution files without using Git, click
    the green **Code** button and then select **Download ZIP** , as shown in *Figure
    1.19* :'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想下载所有解决方案文件而不使用Git，请单击绿色的**Code**按钮，然后选择**Download ZIP**，如*图1.19*所示：
- en: '![Table Description automatically generated](img/Image00025.jpg)'
  id: totrans-607
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的表描述](img/Image00025.jpg)'
- en: 'Figure 1.19: Downloading the repository as a ZIP file'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19：下载ZIP文件的存储库
- en: I recommend that you add the preceding link to your favorite bookmarks because
    I also use the GitHub repository for this book for publishing errata (corrections)
    and other useful links.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您将上述链接添加到您喜爱的书签中，因为我还使用GitHub存储库发布勘误（更正）和其他有用的链接。
- en: Using Git with Visual Studio Code and the command line
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code和命令行的Git
- en: Visual Studio Code has support for Git, but it will use your operating system's
    Git installation, so you must install Git 2.0 or later first before you get these
    features.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code支持Git，但它将使用您操作系统的Git安装，因此您必须先安装Git 2.0或更高版本，然后才能使用这些功能。
- en: 'You can install Git from the following link: [https://git-scm.com/download](https://git-scm.com/download)
    .'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接安装Git：[https://git-scm.com/download](https://git-scm.com/download)。
- en: 'If you like to use a GUI, you can download GitHub Desktop from the following
    link: [https://desktop.github.com](https://desktop.github.com) .'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用GUI，可以从以下链接下载GitHub Desktop：[https://desktop.github.com](https://desktop.github.com)。
- en: Cloning the book solution code repository
  id: totrans-614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆书籍解决方案代码存储库
- en: 'Let''s clone the book solution code repository. In the steps that follow, you
    will use the Visual Studio Code terminal, but you could enter the commands at
    any command prompt or terminal window:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们克隆书籍解决方案代码存储库。在接下来的步骤中，您将使用Visual Studio Code终端，但您也可以在任何命令提示符或终端窗口中输入命令：
- en: Create a folder named `Repos-vscode` in your user or `Documents` folder, or
    wherever you want to store your Git repositories.
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的用户文件夹或`Documents`文件夹中创建一个名为`Repos-vscode`的文件夹，或者您想要存储Git存储库的任何位置。
- en: In Visual Studio Code, open the `Repos-vscode` folder.
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，打开`Repos-vscode`文件夹。
- en: 'Navigate to **View** | **Terminal** , and enter the following command:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**View** | **Terminal**，并输入以下命令：
- en: '```cs'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: git clone https://github.com/markjprice/cs10dotnet6.git
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: git clone https://github.com/markjprice/cs10dotnet6.git
- en: '```'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note that cloning all the solutions for all of the chapters will take a minute
    or so, as shown in *Figure 1.20* :![Graphical user interface, text, application,
    email Description automatically generated](img/Image00026.jpg)
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，克隆所有章节的所有解决方案将需要一分钟左右，如*图1.20*所示：![自动生成的图形用户界面、文本、应用程序、电子邮件描述](img/Image00026.jpg)
- en: 'Figure 1.20: Cloning the book solution code using Visual Studio Code'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20：使用Visual Studio Code克隆书籍解决方案代码
- en: Looking for help
  id: totrans-624
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻求帮助
- en: This section is all about how to find quality information about programming
    on the web.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何在网络上找到有关编程的高质量信息。
- en: Reading Microsoft documentation
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读微软文档
- en: 'The definitive resource for getting help with Microsoft developer tools and
    platforms is Microsoft Docs, and you can find it at the following link: [https://docs.microsoft.com/](https://docs.microsoft.com/)
    .'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 获取Microsoft开发人员工具和平台帮助的权威资源是Microsoft Docs，您可以在以下链接找到：[https://docs.microsoft.com/](https://docs.microsoft.com/)。
- en: Getting help for the dotnet tool
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取`dotnet`工具的帮助
- en: 'At the command line, you can ask the `dotnet` tool for help with its commands:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行中，您可以使用`dotnet`工具来获取其命令的帮助：
- en: 'To open the official documentation in a browser window for the `dotnet new`
    command, enter the following at the command line or in the Visual Studio Code
    terminal:'
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在浏览器窗口中打开`dotnet new`命令的官方文档，请在命令行或Visual Studio Code终端中输入以下内容：
- en: '```cs'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet help new
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet help new
- en: '```'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'To get help output at the command line, use the `-h` or `--help` flag, as shown
    in the following command:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在命令行输出帮助信息，请使用`-h`或`--help`标志，如下命令所示：
- en: '```cs'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet new console -h
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet new console -h
- en: '```'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'You will see the following partial output:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下部分输出：
- en: '```cs'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Console Application (C#)
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台应用程序（C#）
- en: 'Author: Microsoft'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：Microsoft
- en: 'Description: A project for creating a command-line application that can run
    on .NET Core on Windows, Linux and macOS'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 描述：用于在Windows、Linux和macOS上运行.NET Core的命令行应用程序的项目
- en: 'Options:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 选项：
- en: -f|--framework. The target framework for the project.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: -f|--framework。项目的目标框架。
- en: net6.0           - Target net6.0
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: net6.0           - 目标 net6.0
- en: net5.0           - Target net5.0
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: net5.0           - 目标 net5.0
- en: netcoreapp3.1\.   - Target netcoreapp3.1
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: netcoreapp3.1\.   - 目标 netcoreapp3.1
- en: netcoreapp3.0\.   - Target netcoreapp3.0
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: netcoreapp3.0\.   - 目标 netcoreapp3.0
- en: 'Default: net6.0'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 默认：net6.0
- en: --langVersion    Sets langVersion in the created project file text – Optional
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: --langVersion    在创建的项目文件文本中设置langVersion – 可选
- en: '```'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Getting definitions of types and their members
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取类型及其成员的定义
- en: One of the most useful features of a code editor is **Go To Definition** . It
    is available in Visual Studio Code and Visual Studio 2022\. It will show what
    the public definition of the type or member looks like by reading the metadata
    in the compiled assembly.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器中最有用的功能之一是**转到定义**。它在Visual Studio Code和Visual Studio 2022中可用。通过读取编译后的程序集中的元数据，它将显示类型或成员的公共定义是什么样子。
- en: Some tools, such as ILSpy .NET Decompiler, will even reverse-engineer from the
    metadata and IL code back into C# for you.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工具，如ILSpy .NET反编译器，甚至可以从元数据和IL代码反向工程到C#。
- en: 'Let''s see how to use the **Go To Definition** feature:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用**转到定义**功能：
- en: In Visual Studio 2022 or Visual Studio Code, open the solution/workspace named
    `Chapter01` .
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022或Visual Studio Code中，打开名为`Chapter01`的解决方案/工作区。
- en: 'In the `HelloCS` project, in `Program.cs` , in `Main` , enter the following
    statement to declare an integer variable named `z` :'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HelloCS`项目中，在`Program.cs`中，在`Main`中，输入以下语句声明一个名为`z`的整数变量：
- en: '```cs'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: z;
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: z;
- en: '```'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Click inside `int` and then right-click and choose **Go To Definition** .
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`int`内部，然后右键单击并选择**转到定义**。
- en: In the code window that appears, you can see how the `int` data type is defined,
    as shown in *Figure 1.21* :![Graphical user interface, text, application Description
    automatically generated](img/Image00027.jpg)
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的代码窗口中，您可以看到`int`数据类型的定义，如*图1.21*所示：![图形用户界面，文本，应用程序自动生成的描述](img/Image00027.jpg)
- en: 'Figure 1.21: The int data type metadata'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21：int数据类型元数据
- en: 'You can see that `int` :'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`int`：
- en: Is defined using the `struct` keyword
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`struct`关键字定义
- en: Is in the `System.Runtime` assembly
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`System.Runtime`程序集中
- en: Is in the `System` namespace
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`System`命名空间中
- en: Is named `Int32`
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名为`Int32`
- en: Is therefore an alias for the `System.Int32` type
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此是`System.Int32`类型的别名
- en: Implements interfaces such as `IComparable`
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现诸如`IComparable`之类的接口
- en: Has constant values for its maximum and minimum values
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有其最大和最小值的常量值
- en: Has methods such as `Parse`
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有诸如`Parse`之类的方法
- en: '**Good Practice** : When you try to use **Go To Definition** in Visual Studio
    Code, you will sometimes see an error saying **No definition found** . This is
    because the C# extension does not know about the current project. To fix this
    issue, navigate to **View** | **Command Palette** , enter `omni` , select **OmniSharp:
    Select Project** , and then select the project that you want to work with.'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当您尝试在Visual Studio Code中使用**转到定义**时，有时会看到一个错误，说**找不到定义**。这是因为C#扩展不知道当前项目。要解决此问题，请导航到**视图**
    | **命令面板**，输入`omni`，选择**OmniSharp: 选择项目**，然后选择要使用的项目。'
- en: Right now, the **Go To Definition** feature is not that useful to you because
    you do not yet know what all of this information means.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**转到定义**功能对您来说并不那么有用，因为您还不知道所有这些信息的含义。
- en: By the end of the first part of this book, which consists of *Chapters* *2*
    to *6* , and which teaches you about C#, you will know enough for this feature
    to become very handy.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一部分结束时，该部分由*章节* *2*至*6*组成，教授您有关C#的知识，您将了解足够多的内容，以便此功能变得非常方便。
- en: In the code editor window, scroll down to find the `Parse` method with a single
    `string` parameter on line 106, and the comments that document it on lines 86
    to 105, as shown in *Figure 1.22* :![Graphical user interface, text, application
    Description automatically generated](img/Image00028.jpg)
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器窗口中，向下滚动以找到第106行上具有单个`string`参数的`Parse`方法，以及在第86到105行上记录它的注释，如*图1.22*所示：![图形用户界面，文本，应用程序自动生成的描述](img/Image00028.jpg)
- en: 'Figure 1.22: The comments for the Parse method with a string parameter'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22：具有字符串参数的Parse方法的注释
- en: 'In the comments, you will see that Microsoft has documented the following:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 在注释中，您将看到Microsoft已记录以下内容：
- en: A summary that describes the method.
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述该方法的摘要。
- en: Parameters like the `string` value that can be passed to the method.
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法可以传递的参数，如`string`值。
- en: The return value of the method, including its data type.
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法的返回值，包括其数据类型。
- en: Three exceptions that might occur if you call this method, including `ArgumentNullException`
    , `FormatException` , and `OverflowException` . Now, we know that we could choose
    to wrap a call to this method in a `try` statement and which exceptions to catch.
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果调用此方法可能发生的三种异常，包括`ArgumentNullException`，`FormatException`和`OverflowException`。现在，我们知道我们可以选择在`try`语句中包装对此方法的调用以及要捕获的异常。
- en: Hopefully, you are getting impatient to learn what all this means!
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 希望您已经迫不及待地想要了解所有这些含义！
- en: Be patient for a little longer. You are almost at the end of this chapter, and
    in the next chapter, you will dive into the details of the C# language. But first,
    let's see where else you can look for help.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 再等一会儿。您几乎已经到达本章的末尾，在下一章中，您将深入了解C#语言的细节。但首先，让我们看看您还可以在哪里寻求帮助。
- en: Looking for answers on Stack Overflow
  id: totrans-686
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Stack Overflow上寻找答案
- en: 'Stack Overflow is the most popular third-party website for getting answers
    to difficult programming questions. It''s so popular that search engines such
    as DuckDuckGo have a special way to write a query to search the site:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow是获取困难编程问题答案的最受欢迎的第三方网站。它非常受欢迎，以至于像DuckDuckGo这样的搜索引擎有一种特殊的方法来编写查询以搜索该网站：
- en: Start your favorite web browser.
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的网络浏览器。
- en: 'Navigate to [DuckDuckGo.com](https://duckduckgo.com/) , enter the following
    query, and note the search results, which are also shown in *Figure 1.23* :'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[DuckDuckGo.com](https://duckduckgo.com/)，输入以下查询，并注意搜索结果，也显示在*图1.23*中：
- en: '```cs'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '!so securestring'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: ！so securestring
- en: '```'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '![Graphical user interface, text, application Description automatically generated](img/Image00029.jpg)'
  id: totrans-693
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序自动生成的描述](img/Image00029.jpg)'
- en: 'Figure 1.23: Stack Overflow search results for securestring'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23：securestring的Stack Overflow搜索结果
- en: Searching for answers using Google
  id: totrans-695
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google搜索答案
- en: 'You can search Google with advanced search options to increase the likelihood
    of finding what you need:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用高级搜索选项在Google上搜索，以增加找到所需内容的可能性：
- en: Navigate to Google.
  id: totrans-697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Google。
- en: Search for information about `garbage collection` using a simple Google query,
    and note that you will probably see a lot of ads for garbage collection services
    in your local area before you see the Wikipedia definition of garbage collection
    in computer science.
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用简单的Google查询搜索有关`垃圾收集`的信息，并注意在看到计算机科学中垃圾收集的维基百科定义之前，您可能会看到很多关于本地地区垃圾收集服务的广告。
- en: 'Improve the search by restricting it to a useful site such as Stack Overflow,
    and by removing languages that we might not care about, such as C++, Rust, and
    Python, or by adding C# and .NET explicitly, as shown in the following search
    query:'
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将搜索限制为诸如Stack Overflow之类的有用网站，并删除我们可能不关心的语言，例如C++、Rust和Python，或者显式添加C#和.NET，来改进搜索，如下面的搜索查询所示：
- en: '```cs'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: garbage collection site:stackoverflow.com +C# -Java
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾收集 site:stackoverflow.com +C# -Java
- en: '```'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Subscribing to the official .NET blog
  id: totrans-703
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 订阅官方.NET博客
- en: 'To keep up to date with .NET, an excellent blog to subscribe to is the official
    .NET Blog, written by the .NET engineering teams, and you can find it at the following
    link: [https://devblogs.microsoft.com/dotnet/](https://devblogs.microsoft.com/dotnet/)
    .'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解.NET的最新信息，可以订阅官方.NET博客，由.NET工程团队撰写，链接如下：[https://devblogs.microsoft.com/dotnet/](https://devblogs.microsoft.com/dotnet/)。
- en: Watching Scott Hanselman's videos
  id: totrans-705
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观看Scott Hanselman的视频
- en: 'Scott Hanselman from Microsoft has an excellent YouTube channel about computer
    stuff they didn''t teach you: [http://computerstufftheydidntteachyou.com/](http://computerstufftheydidntteachyou.com/)
    .'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 来自微软的Scott Hanselman拥有一个关于计算机知识的优秀YouTube频道：[http://computerstufftheydidntteachyou.com/](http://computerstufftheydidntteachyou.com/)。
- en: I recommend it to everyone working with computers.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议每个与计算机工作的人都去看。
- en: Practicing and exploring
  id: totrans-708
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Let's now test your knowledge and understanding by trying to answer some questions,
    getting some hands-on practice, and going into the topics covered throughout this
    chapter in greater detail.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过尝试回答一些问题、进行一些动手实践，并更详细地了解本章涵盖的主题来测试您的知识和理解。
- en: Exercise 1.1 – Test your knowledge
  id: totrans-710
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.1 – 测试你的知识
- en: 'Try to answer the following questions, remembering that although most answers
    can be found in this chapter, you should do some online research or code writing
    to answer others:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试回答以下问题，记住虽然大多数答案可以在本章中找到，但您应该进行一些在线研究或编写代码来回答其他问题：
- en: Is Visual Studio 2022 better than Visual Studio Code?
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio 2022是否比Visual Studio Code更好？
- en: Is .NET 6 better than .NET Framework?
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 6是否比.NET Framework更好？
- en: What is .NET Standard and why is it still important?
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET Standard是什么，为什么它仍然重要？
- en: Why can a programmer use different languages, for example, C# and F#, to write
    applications that run on .NET?
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么程序员可以使用不同的语言，例如C#和F#，来编写在.NET上运行的应用程序？
- en: What is the name of the entry point method of a .NET console application and
    how should it be declared?
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET控制台应用程序的入口方法的名称是什么，应该如何声明？
- en: What is a top-level program and how do you access any command-line arguments?
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是顶级程序，如何访问任何命令行参数？
- en: What do you type at the prompt to build and execute C# source code?
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下输入什么来构建和执行C#源代码？
- en: What are some benefits of using .NET Interactive Notebooks to write C# code?
  id: totrans-719
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用.NET交互式笔记本编写C#代码有哪些好处？
- en: Where would you look for help for a C# keyword?
  id: totrans-720
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会在哪里寻找C#关键字的帮助？
- en: Where would you look for solutions to common programming problems?
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会在哪里寻找常见编程问题的解决方案？
- en: '*Appendix* , *Answers to the Test Your Knowledge Questions* , is available
    to download from a link in the README on the GitHub repository: [https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)
    .'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '*附录*，*测试你的知识问题的答案*，可以从GitHub存储库的README中的链接下载：[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)。'
- en: Exercise 1.2 – Practice C# anywhere
  id: totrans-723
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.2 – 在任何地方练习C#
- en: You don't need Visual Studio Code or even Visual Studio 2022 for Windows or
    Mac to write C#. You can go to .NET Fiddle – [https://dotnetfiddle.net/](https://dotnetfiddle.net/)
    – and start coding online.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要Visual Studio Code甚至Visual Studio 2022 for Windows或Mac来编写C#。您可以转到.NET Fiddle
    – [https://dotnetfiddle.net/](https://dotnetfiddle.net/) – 并开始在线编码。
- en: Exercise 1.3 – Explore topics
  id: totrans-725
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.3 – 探索主题
- en: A book is a curated experience. I have tried to find the right balance of topics
    to include in the printed book. Other content that I have written can be found
    in the GitHub repository for this book.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 一本书是一种精心策划的体验。我尽量找到印刷书中包含的主题的合适平衡。我写的其他内容可以在本书的GitHub存储库中找到。
- en: I believe that this book covers all the fundamental knowledge and skills a C#
    and .NET developer should have or be aware of. Some longer examples are best included
    as links to Microsoft documentation or third-party article authors.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信这本书涵盖了C#和.NET开发人员应该具备或了解的所有基本知识和技能。一些较长的示例最好包含为链接到Microsoft文档或第三方文章作者。
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖的主题的更多细节：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net)'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net)'
- en: Summary
  id: totrans-730
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们：
- en: Set up your development environment.
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的开发环境。
- en: Discussed the similarities and differences between modern .NET, .NET Core, .NET
    Framework, Xamarin, and .NET Standard.
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了现代.NET、.NET Core、.NET Framework、Xamarin和.NET Standard之间的相似性和差异。
- en: Used Visual Studio Code with the .NET SDK and Visual Studio 2022 for Windows
    to create some simple console applications.
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code与.NET SDK以及Visual Studio 2022 for Windows创建一些简单的控制台应用程序。
- en: Used .NET Interactive Notebooks to execute snippets of code for learning.
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET交互式笔记本执行代码片段进行学习。
- en: Learned how to download the solution code for this book from a GitHub repository.
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会如何从GitHub存储库下载本书的解决方案代码。
- en: And, most importantly, learned how to find help.
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最重要的是，学会如何寻求帮助。
- en: In the next chapter, you will learn how to "speak" C#.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何“说”C#。
