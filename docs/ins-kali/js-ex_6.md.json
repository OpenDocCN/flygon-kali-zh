["```js\n<h1 class=\"hello\">Hello World!</h1>\n```", "```js\nconst hello = (name) => React.createElement(\"h1\", { className: \"hello\"}, \"Hello \", name, \"!\")\n```", "```js\n<h1 class=\"hello\">Hello Rahul!</h1>\n```", "```js\nconst hello = (name) => <h1 className=\"hello\">Hello {name}!</h1>\n```", "```js\nclass Counter extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    }\n  }\n\n  render() {\n    return ( <h1>{this.state.count}</h1> );\n  }\n}\n```", "```js\nthis.state = { a: 'Tree', b: 'Flower', c: 'Fruit' };\nthis.state.a = 'Plant';\n```", "```js\nthis.state = { a: 'Tree', b: 'Flower', c: 'Fruit' };\nthis.setState({ a: 'Plant' });\n```", "```js\noldState = { a: 'Tree', b: 'Flower', c: 'Fruit' }\nnewState = { a: 'Plant', b: 'Flower', c: 'Fruit' }\n```", "```js\nclass ParentComponent extends Component {\n  render() {\n    return (\n      <ChildrenComponent name={'World'} />\n    )\n  }\n}\n\nclass ChildrenComponent extends Component {\n  render() {\n    return (\n      <h1>Hello {this.props.name}!</h1>\n    )\n  }\n}\n```", "```js\nincreaseCount() {\n  this.setState({ count: this.state.count+1 })  \n}\ncomponentWillMount() {\n  setInterval(this.increaseCount.bind(this), 1000);  \n}\n```", "```js\nReactDOM.render( <Counter />,  document.querySelector(\"app\"));\n```", "```js\nconst vehicles = { fourWheeler: 'Car', twoWheeler: 'Bike' };\nconst { fourWheeler, twoWheeler } = vehicles;\n```", "```js\nconst { Component } = React;\n```", "```js\nconst $app = document.querySelector('app');\n```", "```js\nclass App extends Component {\n  render() {\n    return(\n    <div className=\"container\">      \n      <h1>To Do List</h1>      \n      <input type=\"text\" name=\"newTask\"/>      \n      <div className=\"container\">        \n        <ul className=\"list-group\">          \n          <li>Do Gardening</li>          \n          <li>Return books to library</li>          \n          <li>Go to the Dentist</li>        \n        </ul>      \n      </div>    \n    </div> \n    ); \n  }\n}\n```", "```js\nReactDOM.render( <App/>,  $app);\n```", "```js\nconstructor() {  \n  super();        \n  this.state = {    \n    tasks: [],      \n    inputValue: \"\",    \n  }  \n}\n```", "```js\n<input type=\"text\" name=\"newTask\" value={this.state.inputValue} />\n```", "```js\nclass App extends Component { \n  constructor() {\n    ...\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {  \n    this.setState({inputValue: event.target.value});  \n  }\n\n  ...\n}    \n```", "```js\n<input type=\"text\" name=\"newTask\" value={this.state.inputValue} onChange={this.handleChange} />\n```", "```js\nthis.state = {          \n  tasks: [      \n    'Do Gardening',        \n    'Return books to library',        \n    'Go to the Dentist',      \n  ],            \n  inputValue: \"\",        \n};\n```", "```js\n<ul className=\"list-group\">            \n  {            \n    this.state.tasks.map((task, index) => <li key={index}>{ task }</li>)            \n  }          \n</ul>\n```", "```js\nclass App extends Component {\n  constructor() {\n    ...\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  handleKeyUp(event) {\n    if(event.keyCode === 13) {    \n      if(this.state.inputValue) {        \n        const newTasks = [...this.state.tasks, this.state.inputValue];\n        this.setState({tasks: newTasks, inputValue: \"\"});      \n      } else {      \n        alert('Please add a Task!');      \n      }    \n    }\n  }\n\n  ...\n}\n```", "```js\n<input type=\"text\" name=\"newTask\" value={this.state.inputValue} onChange={this.handleChange} onKeyUp={this.handleKeyUp}/>\n```", "```js\nconst a = [1,2,3,4];\nconst b = a;\nb.push(5);\nconsole.log('Value of a = ', a);\nconsole.log('Value of b = ', b);\n```", "```js\nconst a = [1,2,3,4];\nconst b = [...a, 5];\nconsole.log('Value of a = ', a);\nconsole.log('Value of b = ', b);\n```", "```js\nconst obj1 = { a: 'Tree', b: 'Flower', c: 'Fruit' };\nconst obj2 = { ...obj1, a: 'plant' };\nconst obj3 = { ...obj1, d: 'seed' };\n\nconsole.log('Value of obj1 = ', obj1);\nconsole.log('Value of obj2 = ', obj2);\nconsole.log('Value of obj3 = ', obj3);\n```", "```js\nnpm i -g create-react-app\n```", "```js\ncreate-react-app my-react-project\n```", "```js\ncd my-react-project\nnpm start\n```", "```js\n.\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2514\u2500\u2500 yarn.lock\n```", "```js\n.\n\u251c\u2500\u2500 App.css\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 App.test.js\n\u251c\u2500\u2500 index.css\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 logo.svg\n\u2514\u2500\u2500 registerServiceWorker.js\n```", "```js\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem } from  'reactstrap';\n```", "```js\n    return (\n      <div className=\"App\">\n        <Navbar color=\"faded\" light toggleable>\n          <NavbarToggler right onClick={() => {}} />\n          <a className=\"navbar-brand\" href=\"home\">Blog</a>\n          <Collapse isOpen={false} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <a className=\"nav-link\" href=\"home\">Home</a>\n              </NavItem>\n              <NavItem>\n                <a className=\"nav-link\" href=\"authors\">Authors</a>\n              </NavItem>\n              <NavItem>\n                <a className=\"nav-link\" href=\"new-post\">New Post</a>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n```", "```js\nconstructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n    };\n    this.toggle = this.toggle.bind(this);\n}\n\ntoggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n}\n```", "```js\n  <Collapse  isOpen={this.state.isOpen} navbar>\n```", "```js\n<NavbarToggler  right  onClick={this.toggle} />\n```", "```js\nimport {BrowserRouter  as  Router} from  'react-router-dom';\n```", "```js\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  ,\n  document.getElementById('root')\n);\n```", "```js\nconst routes = {\n  home: '/home',\n  authors: '/authors',\n  author: '/author/:authorname',\n  newPost: '/new-post',\n  post: '/post/:id',\n};\n\nexport default routes;\n```", "```js\nhttp://localhost:3000/post/487929f5-47bc-47af-864a-f570d2523f3e\n```", "```js\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar color=\"faded\" light toggleable>\n          ....\n        </Navbar>\n\n        <Route exact path={routes.home} component={Home} />\n        <Route exact path={routes.post} component={Post} />\n        <Route exact path={routes.authors} component={AuthorList} />\n        <Route exact path={routes.author} component={AuthorPosts} />\n        <Route exact path={routes.newPost} component={NewPost} />\n      </div>\n    );\n  }\n```", "```js\n        <Route exact path={routes.home} component={Home} />\n```", "```js\nexport default App;\n```", "```js\nexport  default  withRouter(App);\n```", "```js\n  componentWillMount() {\n    if(this.props.location.pathname === '/') {\n      this.props.history.replace(routes.home);\n    }\n  }\n```", "```js\nimport  PropTypes  from  'prop-types';\n```", "```js\n  static propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    match: PropTypes.object.isRequired,\n  }\n```", "```js\n<a className=\"nav-link\" href=\"authors\">Authors</a>\n```", "```js\n  <NavLink  className={'nav-link'} activeClassName={'active'} to={routes.authors}>Authors</NavLink>\n```", "```js\n.\n\u251c\u2500\u2500 Author\n\u2502   \u251c\u2500\u2500 AuthorList.js\n\u2502   \u2514\u2500\u2500 AuthorPosts.js\n\u251c\u2500\u2500 Common\n\u2502   \u251c\u2500\u2500 ErrorMessage.js\n\u2502   \u251c\u2500\u2500 LoadingIndicator.js\n\u2502   \u251c\u2500\u2500 PostSummary.js\n\u2502   \u2514\u2500\u2500 SuccessMessage.js\n\u251c\u2500\u2500 Home\n\u2502   \u2514\u2500\u2500 Home.js\n\u251c\u2500\u2500 NewPost\n\u2502   \u251c\u2500\u2500 Components\n\u2502   \u2502   \u2514\u2500\u2500 PostInputField.js\n\u2502   \u2514\u2500\u2500 NewPost.js\n\u2514\u2500\u2500 Post\n    \u2514\u2500\u2500 Post.js\n```", "```js\n  constructor() {\n    super();\n\n    this.state = {\n      posts: [],\n      loading: false,\n      hasError: false,\n    };\n  }\n```", "```js\n  componentWillMount() {\n    this.setState({loading: true});\n    apiCall('posts', {}, 'GET')\n    .then(posts => {\n      this.setState({posts, loading: false});\n    })\n    .catch(error => {\n      this.setState({hasError: true, loading: false});\n      console.error(error);\n    });\n  }\n```", "```js\n    return (\n      <div className={`posts-container container`}>\n        {\n          this.state.loading\n          ?\n            <LoadingIndicator />\n          :\n            null\n        }\n        {\n          this.state.hasError\n          ?\n            <ErrorMessage title={'Error!'} message={'Unable to retrieve posts!'} />\n          :\n            null\n        }\n        {\n          this.state.posts.map(post => <PostSummary key={post.id} post={post}>Post</PostSummary>)\n        }\n      </div>\n    );\n```", "```js\n<ErrorMessage title={'Error!'} message={'Unable to retrieve posts!'} />\n```", "```js\nconst ErrorMessage = ({title, message}) => (\n  <div className=\"alert alert-danger\">\n    <strong>{title}</strong> {message}\n  </div>\n);\n```", "```js\n<ErrorMessage title={'Error!'} message={'Unable to retrieve posts!'} />\n```", "```js\nErrorMessage({\n  title: 'Error!',\n  message: 'Unable to retrieve posts!',\n})\n```", "```js\nconst ErrorMessage = ({title, message}) => {}; // title and message retrieved as normal variables\n```", "```js\nhttp://localhost:3000/post/487929f5-47bc-47af-864a-f570d2523f3e\n```", "```js\nexport default withRouter(Post);\n```", "```js\n  static propTypes = {\n    history: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    match: PropTypes.object.isRequired,\n  }\n```", "```js\n  constructor() {\n    super();\n\n    this.state = {\n      post: {},\n      loading: false,\n      hasError: false,\n    };\n  }\n```", "```js\nconst postId = this.props.match.params.id;\n```", "```js\n  componentWillMount() {\n    this.setState({loading: true});\n    const postId = this.props.match.params.id;\n    apiCall(`post/${postId}`, {}, 'GET')\n    .then(post => {\n      this.setState({post, loading: false});\n    })\n    .catch(error => {\n      this.setState({hasError: true, loading: false});\n      console.error(error);\n    });\n  }\n```", "```js\n    return(\n      <div className={`post-container container`}>\n        {\n          this.state.loading\n          ?\n            <LoadingIndicator />\n          :\n            null\n        }\n        {\n          this.state.hasError\n          ?\n            <ErrorMessage title={'Error!'} message={`Unable to retrieve post!`} />\n          :\n            null\n        }\n        <h2>{this.state.post.title}</h2>\n        <p>{this.state.post.author}</p>\n        <p>{this.state.post.content}</p>\n      </div>\n    );\n```", "```js\n{\n  \"id\": \"string\",\n  \"title\": \"string\",\n  \"content\": \"string\",\n  \"datetime\": \"string\",\n  \"author\": \"string\"\n}\n```", "```js\n  constructor() {\n    super();\n\n    this.state = {\n      author: '',\n      title: '',\n      content: '',\n      noOfLines: 0,\n      loading: false,\n      success: false,\n      hasError: false,\n    };\n  }\n```", "```js\n        <PostInputField\n          className={'author-name-input'}\n          id={'author'}\n          title={'Author Name:'}\n          value={this.state.author}\n          onChange={this.editAuthorName}\n        />\n```", "```js\nconst PostInputField = ({className, title, id, value, onChange}) => (\n  <div className={`form-group ${className}`}>\n    <label htmlFor={id}>{title}</label>\n    <input type=\"text\" className=\"form-control\" id={id} value={value} onChange={onChange}/>\n  </div>\n); \n```", "```js\n  const  noOfLines  =  this.state.noOfLines  <  5  ?  5  :  this.state.noOfLines;\n```", "```js\n<div className=\"form-group content-text-area\">\n  <label htmlFor=\"content\">Post:</label>\n  <textarea className=\"form-control\" rows={noOfLines} id=\"content\" value={this.state.content} onChange={this.editContent}></textarea>\n</div>\n```", "```js\n  editAuthorName(event) {\n    this.setState({author: event.target.value});\n  }\n\n  editTitle(event) {\n    this.setState({title: event.target.value});\n  }\n\n  editContent(event) {\n    const linesArray = event.target.value.split('\\n');\n    this.setState({content: event.target.value, noOfLines: linesArray.length});\n  }\n```", "```js\nconstructor() {\n  ...\n\n  this.editAuthorName = this.editAuthorName.bind(this);\n  this.editContent = this.editContent.bind(this);\n  this.editTitle = this.editTitle.bind(this);\n}\n```", "```js\n  const  date  =  new  Date();\n  const  epoch  = (date.getTime()/1000).toFixed(0).toString();\n```", "```js\n  submit() {\n    if(this.state.author && this.state.content && this.state.title) {\n      this.setState({loading: true});\n\n      const date = new Date();\n      const epoch = (date.getTime()/1000).toFixed(0).toString();\n      const body = {\n        id: uuidv4(),\n        author: this.state.author,\n        title: this.state.title,\n        content: this.state.content,\n        datetime: epoch,\n      };\n\n      apiCall(`post`, body)\n      .then(() => {\n        this.setState({\n          author: '',\n          title: '',\n          content: '',\n          noOfLines: 0,\n          loading: false,\n          success: true,\n        });\n      })\n      .catch(error => {\n        this.setState({hasError: true, loading: false});\n        console.error(error);\n      });\n\n    } else {\n      alert('Please Fill in all the fields');\n    }\n  }\n```", "```js\nthis.submit = this.submit.bind(this)\n```", "```js\nnpm run build\n```"]