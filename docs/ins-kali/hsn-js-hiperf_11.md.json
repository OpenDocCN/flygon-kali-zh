["```js\nconst handler = require('serve-handler');\nconst http = require('http');\nconst server = http.createServer((req, res) => {\n    return handler(req, res, {\n        public : 'source'\n    });\n});\nserver.listen(3000, () => {\n    console.log('listening at 3000');\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <!-- get some resources -->\n    </head>\n    <body>\n        <script type=\"text/javascript\">\n              navigator.serviceWorker.register('./BaseServiceWorker.js', \n             { scope : '/'})\n            .then((reg) => {\n                console.log('successfully registered worker');\n            }).catch((err) => {\n                console.error('there seems to be an issue!');\n            })\n        </script>\n    </body>\n</html>\n```", "```js\nself.addEventListener('install', (event) => {\n    console.log('we are installed!');\n});\nself.addEventListener('fetch', (event) => {\n    console.log('a request was made!');\n    fetch(event.request);\n});\n```", "```js\n*, :root {\n    margin : 0;\n    padding : 0;\n    font-size : 12px;\n}\n```", "```js\nConsole: {\"lineNumber\":2,\"message\":\"we are installed!\",\"message_level\":1,\"sourceIdentifier\":3,\"sourceURL\":\"http://localhost:3000/BaseServiceWorker.js\"}\n```", "```js\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open('v1').then((cache) => {\n            return cache.addAll([\n                './main.css'\n            ]);\n        }).then(() => {\n            console.log('we are ready!');\n        })\n    );\n});\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request).then((response) => {\n            return response || fetch(event.request);\n        })\n    )\n});\n```", "```js\ncaches.open('v1').then((cache) => {\n    return cache.addAll([\n        './main.css',\n        '/'\n    ]);\n})\n```", "```js\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open('v1').then((cache) => {\n            return cache.addAll([\n                // add resources here\n            ]);\n        }).then(() => {\n            console.log('we are ready!');\n        })\n    );\n});\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request).then((response) => {\n            return response || fetch(event.request);\n        })\n    )\n});\n```", "```js\nnavigator.serviceWorker.register('./CacheServiceWorker.js', { scope : '/'})\n    .then((reg) => {\n        console.log('successfully registered worker');\n    }).catch((err) => {\n        console.error('there seems to be an issue!', err);\n    })\n```", "```js\n<button id=\"addRow\">Add</button>\n<button id=\"remove\">Remove</button>\n<table>\n    <thead>\n        <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Points</th>\n        </tr>\n    </thead>\n    <tbody id=\"tablebody\">\n    </tbody>\n</table>\n```", "```js\nconst add = document.querySelector('#addRow');\nconst remove = document.querySelector('#remove');\nconst tableBody = document.querySelector('#tablebody');\nadd.addEventListener('click', (ev) => {\n    fetch('/add').then((res) => res.json()).then((fin) =>\n     tableBody.appendChild(fin));\n});\nremove.addEventListener('click', (ev) => {\n    while(tableBody.firstChild) {\n        tableBody.removeChild(tableBody.firstChild);\n    }\n});\n```", "```js\ncaches.open('v1').then((cache) => {\n    return cache.addAll([\n        '/',\n        './interactions.js',\n        './main.css'\n    ]);\n}).then(() => {\n    console.log('we are ready!');\n})\n```", "```js\n<script src=\"interactions.js\" type=\"text/javascript\"></script>\n```", "```js\ntable {\n    margin: 15px;\n    border : 1px solid black;\n}\nth {\n    border : 1px solid black;\n    padding : 2px;\n}\nbutton {\n    border : 1px solid black;\n    padding :5px;\n    background : #2e2e2e;\n    color : #cfcfcf;\n    cursor : pointer;\n    margin-left : 15px;\n    margin-top : 15px;\n}\n```", "```js\nThe FetchEvent for \"http://localhost:3000/add\" resulted in a network error response: the promise was rejected.\n```", "```js\nevent.respondWith(\n    caches.match(event.request).then((response) => {\n        if( response ) {\n            return response\n        } else {\n            if( event.request.url.includes(\"/add\") ) {\n                return new Response(new Blob([\"Here is some data\"], \n                    { type : 'text/plain'}),\n                    { status : 200 });\n            }\n            fetch(event.request);\n        }\n    })\n)\n```", "```js\nreturn new Response(new Blob([JSON.stringify({test : 'example', stuff : 'other'})], { type : 'application/json'}), { status : 200 });\n```", "```js\nfetch('/add').then((res) => res.json()).then((fin) =>  {\n    const tr = document.createElement('tr');\n    tr.innerHTML = `<td>${fin.test}</td>\n                    <td>${fin.stuff}</td>\n                    <td>other</td>`;\n    tableBody.appendChild(tr);\n});\n```", "```js\nevent.waitUntil(\n    caches.delete('v1').then(() => {\n        caches.open('v1').then((cache) => {\n            return cache.addAll([\n                '/',\n                './interactions.js',\n                './main.css'\n            ]);\n        }).then(() => {\n            console.log('we are ready!');\n        });\n    })\n);\n```", "```js\n<td>${id}</td>\n<td>${name}</td>\n<td>${description}</td>\n<td>${points}</td>\n```", "```js\nfetch('/add').then((res) => res.text()).then((fin) =>  {\n    const row = document.createElement('tr');\n    row.innerHTML = fin;\n    tableBody.appendChild(row);\n});\n```", "```js\nconst renderTemplate = function(template, obj) {\n    const regex = /\\${([a-zA-Z0-9]+)\\}/;\n    const keys = Object.keys(obj);\n    let match = null;\n    while(match = regex.exec(template)) {\n        const key = match[1];\n        if( keys.includes(key) ) {\n            template = template.replace(match[0], obj[key]);\n        } else {\n            match = null;\n        }\n    }\n    return template;\n}\n```", "```js\nif( event.request.url.includes('/add') ) {\n    return fetch('./row.template')\n        .then((res) => res.text())\n        .then((template) => {\n            return new Response(new Blob([renderTemplate(template, \n             add)],{type : 'text/html'}), {status : 200});   \n        })\n} else if( response ) {\n    return response\n} else {\n    return fetch(event.request);\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n    <head><!-- add css file --></head>\n    <body>\n        <h1>Offline Storage</h1>\n        <button id=\"makeRequest\">Request</button>\n        <table>\n            <tbody id=\"body\"></tbody>\n        </table>\n        <p>Are we online?: <span id=\"online\">No</span>\n        <script src=\"interactions.js\"></script>\n        <script>\n            let online = false;\n            const onlineNotification =  \n             document.querySelector('#online');\n            window.addEventListener('load', function() {\n                const changeOnlineNotification = function(status) {\n                    onlineNotification.textContent = status ? \"Yes\" \n                     : \"No\";\n                    online = status;\n                }\n                changeOnlineNotification(navigator.onLine);\n                 navigator.serviceWorker.register('.\n                 /OfflineCacheWorker.js', {scope : '/'})\n                window.addEventListener('online', () => {\n                 changeOnlineNotification(navigator.onLine) });\n                window.addEventListener('offline', () => {\n                 changeOnlineNotification(navigator.onLine) });\n            });\n        </script>\n    </body>\n</html>\n```", "```js\nself.addEventListener('install', (event) => {\n    event.waitUntil(   \n     // normal cache opening\n    );\n});\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request).then((response) => {\n            // normal response handling\n        })\n    )\n});\n```", "```js\nconst requestMaker = document.querySelector('#makeRequest');\nconst tableBody = document.querySelector('#body');\nrequestMaker.addEventListener('click', (ev) => {\n    fetch('/request').then((res) => res.json()).then((fin) => {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n        <td>${fin.id}</td>\n        <td>${fin.name}</td>\n        <td>${fin.phone}</td>\n        <td><button id=${fin.id}>Delete</button></td>\n        `\n        row.querySelector('button').addEventListener('click', (ev) \n         => {\n            fetch(`/delete/${ev.target.id}`).then(() => {\n                tableBody.removeChild(row);\n            });\n        });\n        tableBody.appendChild(row);\n    })\n})\n```", "```js\nconst server = http.createServer((req, res) => {\n    return handler(req, res, {\n        public : 'offline_storage'\n    });\n});\n```", "```js\ncaches.match(event.request).then((response) => {\n    if( event.request.url.includes('/request') ) {\n        return handleRequest();\n    }\n})\n// below in the global scope of the ServiceWorker\nlet counter = 0;\nlet name = 65;\nconst handleRequest = function() {\n    const data = {\n        id : counter,\n        name : String.fromCharCode(name),\n        phone : Math.round(Math.random() * 10000)\n    }\n    counter += 1;\n    name += 1;\n    return new Response(new Blob([JSON.stringify(data)], {type : \n     'application/json'}), {status : 200});\n}\n```", "```js\ncaches.match(event.request).then((response) => {\n    if( event.request.url.includes('/delete') ) {\n        return handleDelete(event.request.url);\n    }\n})\n// place in the global scope of the Service Worker\nconst handleDelete = function(url) {\n    const id = url.split(\"/\")[2];\n    return new Response(new Blob([id], {type : 'text/plain'}), \n     {status : 200});\n}\n```", "```js\ncaches.match(event.request).then((response) => {\n    if( response ) {\n        return response\n    }\n    return actualRequestHandler(event);\n})\n```", "```js\nconst actualRequestHandler = function(req) {\n    if( req.request.url.includes('/request') ) {\n        return handleRequest();\n    }\n    if( req.request.url.includes('/delete') ) {\n        return handleDelete(req.request.url);\n    }\n    return fetch(req.request);\n}\n```", "```js\nconst pollTime = 30000;\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request).then((response) => {\n            if( response ) {\n                return response\n            }\n            if(!navigator.onLine ) {\n                return new Promise((resolve, reject) => {\n                    const interval = setInterval(() => {\n                        if( navigator.onLine ) {\n                            clearInterval(interval);\n                            resolve(actualRequestHandler(event));\n                        }\n                    }, pollTime)\n                })\n            } else {\n                return actualRequestHandler(event);\n            }\n        })\n    )\n});\n```", "```js\n// inside of our index.html\n<p>Oustanding requests: <span id=\"outstanding\">0</span></p>\n\n//inside our interactions.js\nconst requestAmount = document.querySelector('#outstanding');\nlet numRequests = 0;\nrequestMaker.addEventListener('click', (ev) => {\n    numRequests += 1;\n    requestAmount.textContent = numRequests;\n    fetch('/request').then((res) => res.json()).then((fin) => {\n        // our previous fetch handler\n        numRequests -= 1;\n        requestAmount.textContent = numRequests;\n    });\n    // can be setup for delete requests also\n});\n```", "```js\n//index.html\n<button id=\"stop\">Stop all Pending</button>\n\n//interactions.js\nconst stopRequests = document.querySelector('#stop');\nstopRequests.addEventListener('click', (ev) => {   \n    fetch('/stop').then((res) => {\n        numRequests = 0;\n        requestAmount.textContent = numRequests;\n    });\n});\n```", "```js\ncaches.match(event.request).then((response) => {\n    if( response ) {\n        return response\n    }\n    if( event.request.url.includes('/stop') ) {\n        controller.abort();\n        return new Response(new Blob([\"all done\"], {type :\n        'text/plain'}), {status : 200});\n    }\n    // our previous handler code\n})\n```", "```js\nconst controller = new AbortController();\nconst signal = controller.signal;\nconst pollTime = 30000;\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request).then((response) => {\n            if( response ) {\n                return response\n            }\n            if( event.request.url.includes('/stop') ) {\n                controller.abort();\n                return new Response(new Blob([\"all done\"], {type :\n                'text/plain'}), {status : 200});\n            }\n            if(!navigator.onLine ) {\n                return new Promise((resolve, reject) => {\n                    const interval = setInterval(() => {\n                        if( navigator.onLine ) {\n                            clearInterval(interval);\n                            resolve(actualRequestHandler(event));\n                        }\n                    }, pollTime)\n                    signal.addEventListener('abort', () => {\n                        reject('aborted');\n                    })\n                });\n            } else {\n                return actualRequestHandler(event);\n            }\n        })\n    )\n});\n```"]