- en: Chapter 6. Profiling, Debugging, and Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章：性能分析，调试和测试
- en: Profiling, debugging, and testing are an integral part of the development process.
    You are probably familiar with the concept of unit testing. Unit tests are automated
    tests written by a programmer to test his or her code. These tests could, for
    example, test a function or part of a function in isolation. Only a small unit
    of code is tested in each test. The benefits are increased confidence in the quality
    of the code, reproducible tests and, as a side effect, more clear and correct
    code. Unit testing also facilitates collaborative editing because, usually, no
    one understands all the code in a complex project themselves, so unit tests prevent
    contributors from breaking the existing code. Python has good support for unit
    testing. NumPy adds the `numpy.testing` package to help NumPy code the unit testing.
  prefs: []
  type: TYPE_NORMAL
  zh: 分析，调试和测试是开发过程的组成部分。 您可能熟悉单元测试的概念。 单元测试是程序员编写的用于测试其代码的自动测试。 例如，这些测试可以单独测试函数或函数的一部分。
    每次测试仅测试一小部分代码。 这样做的好处是提高了对代码质量的信心，可重复进行的测试，以及副作用，使代码更清晰，更正确。 单元测试还促进了协作编辑，因为通常没有人会自己理解复杂项目中的所有代码，因此，单元测试可防止贡献者破坏现有代码。
    Python 对单元测试有很好的支持。 NumPy 添加了`numpy.testing`包，以帮助 NumPy 对单元测试进行编码。
- en: 'This chapter''s topics include:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题包括：
- en: Asserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言
- en: Profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能分析
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Assert functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言函数
- en: 'The NumPy testing package has a number of utility functions that test whether
    a precondition is true or not. The following table lists the NumPy assert functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 测试包具有许多工具函数，用于测试前提条件是否为真。 下表列出了 NumPy 断言函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assert_almost_equal` | This raises an exception if two numbers are not equal
    up to a specified precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_almost_equal` | 如果两个数字在指定精度上不相等，则此引发异常 |'
- en: '| `assert_approx_equal` | This raises an exception if two numbers are not equal
    up to a certain significance |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_approx_equal` | 如果两个数字在一定重要性上不相等，则会引发异常 |'
- en: '| `assert_array_almost_equal` | This raises an exception if two arrays are
    not equal up to a specified precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_almost_equal` | 如果两个数组在指定精度上不相等，则会引发异常 |'
- en: '| `assert_array_equal` | This raises an exception if two arrays are not equal
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_equal` | 如果两个数组不相等，则此引发异常 |'
- en: '| `assert_array_less` | This raises an exception if two arrays do not have
    the same shape, and the elements of the first array are strictly less than the
    elements of the second array |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_less` | 如果两个数组的形状不同，并且第一个数组的元素严格小于第二个数组的元素，则会引发异常 |'
- en: '| `assert_equal` | This raises an exception if two objects are not equal |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_equal` | 如果两个对象不相等，则此引发异常 |'
- en: '| `assert_raises` | This fails if a specified exception is not raised by a
    callable function invoked with defined arguments |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_raises` | 如果使用定义的参数调用的可调用函数未引发指定的异常，则此操作失败 |'
- en: '| `assert_warns` | This fails if a specified warning is not thrown |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_warns` | 如果未引发指定的警告，则会失败 |'
- en: '| `assert_string_equal` | This asserts that two strings are equal |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_string_equal` | 断言两个字符串相等 |'
- en: The assert_almost_equal function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_almost_equal`函数'
- en: 'Due to the nature of floating point numbers and the way they are represented
    by computers, we cannot always assert equality as we can for integers. Let''s
    use the `assert_almost_equal` function to check whether they are equal:'
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浮点点号的性质及其在计算机中的表示方式，我们不能像整数一样总是声明相等性。 让我们使用`assert_almost_equal`函数检查它们是否相等：
- en: 'Call the function with low precision (up to seven decimal places):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用较低精度调用函数（最多七位小数）：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that no exception is raised, as you can see in the following result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，不会引发异常，如以下结果所示：
- en: Decimal 6 None
  prefs: []
  type: TYPE_NORMAL
  zh: ''
- en: 'Call the function with high precision (up to eight decimal places):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ''
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用较高精度调用函数（最多八位小数）：
- en: ''
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Approximately equal arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大约相等的数组
- en: 'In this section, we will introduce another assert function. The `assert_approx_equal`
    function raises an exception if two numbers are not equal up to a certain number
    of significant digits. The function result is an exception that is triggered by
    the following condition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍另一个断言函数。 如果两个数字不等于一定数量的有效数字，则`assert_approx_equal`函数会引发异常。 函数结果是由以下条件触发的异常：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s take the numbers from the previous tutorial, and let the `assert_approx_equal`
    function work on them:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一教程中获得数字，然后让`assert_approx_equal`函数对其起作用：
- en: 'Call the function with low significance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用低重要性调用函数：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Call the function with high significance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高重要性调用函数：
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An exception is thrown:'
  prefs: []
  type: TYPE_NORMAL
  zh: 引发异常：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The assert_array_almost_equal function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`assert_array_almost_equal`函数'
- en: 'Sometimes we need to check whether two arrays are almost equal. The `assert_array_almost_equal`
    function raises an exception if two arrays are not equal up to a specified precision.
    The function checks whether the two arrays have the same shape. Then, the values
    of the arrays are compared element by element as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要检查两个数组是否几乎相等。 如果两个数组的指定精度不相等，`assert_array_almost_equal`函数将引发异常。 该函数检查两个数组的形状是否相同。
    然后，将数组的值按元素进行如下比较：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s form arrays with the values from the previous tutorial by adding a zero
    to each array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向每个数组添加零来使用上一教程中的值形成数组：
- en: 'Calling the function with lower precision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以较低的精度调用该函数：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: Decimal 8 None
  prefs: []
  type: TYPE_NORMAL
  zh: ''
- en: 'Calling the function with higher precision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ''
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: ''
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以较高的精度调用该函数：
- en: ''
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'An exception is thrown:'
  prefs: []
  type: TYPE_NORMAL
  zh: 引发异常：
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Profiling a program with IPython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 IPython 分析程序
- en: As most of us learned in programming classes, premature optimization is the
    root of all evil. However, once you approach the final stages of software development,
    it could very well be that certain parts of the code are unnecessarily slow or
    use more memory than is strictly needed. We can find these issues through the
    process of profiling. Profiling involves measuring metrics such as execution time
    for a piece of code such as a function or a single statement.
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们大多数人在编程课上所学的那样，过早的优化是万恶之源。 但是，一旦进入了软件开发的最后阶段，很可能是代码的某些部分不必要地变慢了，或者使用了比严格需要的更多的内存。
    我们可以通过分析过程找到这些问题。 分析涉及度量指标，例如一段代码（如函数或一条语句）的执行时间。
- en: IPython is an interactive Python environment, which also comes with a shell
    similar to the standard Python shell. In IPython, we can profile small snippets
    of code using `timeit`. We can also profile a larger script. We will show both
    approaches.
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 是交互式 Python 环境，还带有与标准 Python 外壳相似的外壳。 在 IPython 中，我们可以使用`timeit`来分析小的代码片段。
    我们还可以分析更大的脚本。 我们将展示两种方法。
- en: 'Timing a snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计时一段代码：
- en: Start IPython in pylab mode
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pylab`模式下启动 IPython
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Create an array containing 1,000 integer values between 0 and 1,000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 1,000 个介于 0 到 1,000 之间的整数值的数组。
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is the time to search for the answer to everything 42 in the array.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候搜索数组中所有内容 42 的答案了。
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Profile a script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析脚本：
- en: 'We will profile this small script that inverts a matrix of varying size containing
    random values:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分析这个小脚本，该脚本会反转包含随机值的大小可变的矩阵：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'for n in sizes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`n`个大小：
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can time this as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式计时：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then we can profile the script with the p option.
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`p`选项来分析脚本。
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The interpretation for the column headers is the same as for the standard Python
    profiler (refer to [https://docs.python.org/2/library/profile.html#module-pstats](https://docs.python.org/2/library/profile.html#module-pstats)):'
  prefs: []
  type: TYPE_NORMAL
  zh: 列标题的解释与标准 Python 分析器的解释相同（参考[`docs.python.org/2/library/profile.html#module-pstats`](https://docs.python.org/2/library/profile.html#module-pstats)）：
- en: '| Header | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 标头 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ncalls` | This is the number of calls.. |'
  prefs: []
  type: TYPE_TB
  zh: '| `ncalls` | 这是调用数量。 |'
- en: '| `tottim`e | This is the total time spent in the given function (and excluding
    time spent in making calls to subfunctions). |'
  prefs: []
  type: TYPE_TB
  zh: '| `tottime` | 这是在给定函数上花费的总时间（不包括在调用子函数上花费的时间）。 |'
- en: '| `percall` | This is the quotient of `tottime` divided by `ncalls`. |'
  prefs: []
  type: TYPE_TB
  zh: '| `percall` | 这是`tottime`除以`ncalls`的商。 |'
- en: '| `cumtime` | This is the total time spent in this and all subfunctions (from
    invocation till exit). This figure is accurate even for recursive functions. |'
  prefs: []
  type: TYPE_TB
  zh: '| `cumtime` | 这是此函数和所有子函数（从调用到退出）花费的总时间。 即使对于递归函数，此数字也是准确的。 |'
- en: '| `percall` (second) | This is the quotient of `cumtime` divided by primitive
    calls.. |'
  prefs: []
  type: TYPE_TB
  zh: '| `percall`（第二个） | 这是`cumtime`除以原始调用的商。 |'
- en: Debugging with IPython
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 IPython 进行调试
- en: Debugging is one of those tasks that we try to avoid by having good unit tests
    in place. Debugging can take a long time, and most likely, you don't have that
    time. Therefore, it is important to be systematic and know your tools well. After
    you have found the issue and implemented a fix, you should have a unit test in
    place. This way at least you will not have to go through the torture of debugging
    again.
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是的其中一项，我们通过适当的单元测试来避免这些调试。 调试可能需要很长时间，而且很可能您没有时间。 因此，重要的是要系统地了解您的工具。 找到问题并实现修复后，应该进行单元测试。
    这样，至少您不必再次经历调试的折磨。
- en: 'We will debug some incorrect code that is trying to access an array element
    out of bounds:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调试一些错误的代码，这些代码试图越界访问数组元素：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
  zh: 继续执行以下步骤：
- en: Run the faulty script in IPython.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IPython 中运行错误的脚本。
- en: 'Start the `ipython` shell. Run the faulty script in IPython by issuing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`ipython`外壳。 发出以下命令，在 IPython 中运行错误的脚本：
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Start the debugger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动调试器。
- en: 'Now that our program crashed, we can start the debugger. This will set a breakpoint
    on the line where the error occurred:'
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的程序崩溃了，我们可以启动调试器了。 这将在发生错误的行上设置一个断点：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: List code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出代码。
- en: We can list code with the list command or use the shorthand l.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`list`命令列出代码或使用缩写`l`。
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Evaluate code at the current line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前行求值代码。
- en: We can now evaluate arbitrary code at the current line.
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在当前行求值任意代码。
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: View the call stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看调用栈。
- en: 'We can view the call stack with the `bt` command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`bt`命令查看调用栈：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Move the call stack up:'
  prefs: []
  type: TYPE_NORMAL
  zh: 向上移动调用栈：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Move the call stack down:'
  prefs: []
  type: TYPE_NORMAL
  zh: 下移调用栈：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Performing Unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行单元测试
- en: Unit tests are automated tests that test a small piece of code, usually a function
    or method. Python has the PyUnit API for unit testing. As NumPy users, we can
    make use of the assert functions that we saw in action before.
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是自动化测试，用于测试一小段代码，通常是一个函数或方法。 Python 具有用于单元测试的 PyUnit API 。 作为 NumPy 的用户，我们可以使用之前在操作中看到的断言函数。
- en: 'We will write tests for a simple factorial function. The tests will check for
    the so-called happy path (regular conditions and is expected to always pass) and
    for abnormal conditions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为一个简单的阶乘函数编写测试。 测试将检查所谓的“快乐路径”（正常情况，并且预计将始终通过）和异常情况：
- en: 'We start by writing the factorial function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先编写阶乘函数：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The code is using the `arange` and `cumprod` functions that we have already
    seen to create arrays and calculate the cumulative product, but we added a few
    checks for boundary conditions.
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用了我们已经看到的`arange`和`cumprod`函数来创建数组和计算累积乘积，但是我们对边界条件进行了一些检查。
- en: 'Now we will write the unit test. Let''s write a class that will contain the
    unit tests. It extends the `TestCase` class from the `unittest` module, which
    is a part of standard Python. We test for calling the factorial function with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将编写单元测试。 让我们写一个包含单元测试的类。 它从`unittest`模块扩展了`TestCase`类，这是标准 Python 的一部分。
    我们测试使用以下命令调用阶乘函数：
- en: A positive number, the happy path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正数，正确的方式
- en: Boundary condition zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界条件为零
- en: Negative numbers, which should result in an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负数，应导致错误
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We rigged one of the tests to fail as you can see in the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在以下输出中看到的那样，我们将其中一项测试失败：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We made some happy path tests for the `factorial` function code. We let the
    boundary condition test fail on purpose (see `unit_test.py`) as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`factorial`函数代码做了一些快乐的路径测试。 我们让边界条件测试故意失败（请参见`unit_test.py`），如下所示：
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Nose tests decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`nose`测试装饰器'
- en: 'Nose is a Python framework that makes (unit) testing a bit easier. Nose helps
    you organize tests. According to the `nose` documentation:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`nose`是一个 Python 框架，它使（单元）测试更加容易。 鼻子可以帮助您组织测试。 根据`nose`文档：'
- en: '*Any python source file, directory or package that matches the testMatch regular
    expression (by default: (?:^|[b_.-])[Tt]est) will be collected as a test.*'
  prefs: []
  type: TYPE_NORMAL
  zh: 任何与`testMatch`正则表达式匹配的 Python 源文件，目录或包（默认情况下：`(?:^|[b_.-])[Tt]est)`）都将作为测试被收集。
- en: 'Nose makes extensive use of decorators. Python decorators are annotations that
    indicate something about a method or a function. The `numpy.testing` module has
    a number of decorators:'
  prefs: []
  type: TYPE_NORMAL
  zh: 鼻子广泛使用装饰器。 Python 装饰器是指示有关方法或函数的注解。 `numpy.testing`模块具有许多装饰器：
- en: '| Decorator | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 装饰器 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.testing.decorators.deprecated` | This is the filter''s deprecation
    warning when running tests |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.deprecated` | 这是运行测试时过滤器的过时警告 |'
- en: '| `numpy.testing.decorators.knownfailureif` | This raises the `KnownFailureTest`
    exception based on a condition. |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.knownfailureif` | 这会根据条件引发`KnownFailureTest`异常。
    |'
- en: '| `numpy.testing.decorators.setastest` | This marks a function as being a test
    or not being a test. |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.setastest` | 该将函数标记为测试或非测试。 |'
- en: '| `numpy.testing.decorators.skipif` | This raises the `SkipTest` exception
    based on a condition. |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.skipif` | 这会根据条件引发`SkipTest`异常。 |'
- en: '| `numpy.testing.decorators.slow` | This labels test functions or methods as
    slow. |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.slow` | 这将测试函数或方法标记为缓慢。 |'
- en: Additionally, we can call the `decorate_methods` function to apply decorators
    on methods of a class matching a regular expression or a string.
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以调用`decorate_methods`函数，以将修饰符应用于与正则表达式或字符串匹配的类的方法。
- en: 'We will apply the `setastest` decorator directly to test functions. Then we
    will apply the same decorator to a method to disable it. Also, we will skip one
    of the tests and fail another. First we will install `nose` as follows in the
    case that you don''t have it yet:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接将 `setastest`装饰器应用于测试函数。 然后，我们将相同的装饰器应用于禁用它的方法。 另外，我们将跳过其中一项测试，并通过另一项测试。
    首先，如果您还没有安装 `nose`，请按以下步骤安装：
- en: 'Install `nose` with setup tools as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安装工具安装`nose`，如下所示：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or pip:'
  prefs: []
  type: TYPE_NORMAL
  zh: 或点子：
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Apply the decorators directly as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接应用装饰器，如下所示：
- en: 'We will apply one function as being a test and another as not being a test:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个函数作为测试，将另一个函数作为非测试：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Skip tests as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳过测试如下：
- en: 'We can skip tests with the `skipif` decorator. Let''s use a condition that
    always leads to a test being skipped:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`skipif`装饰器跳过测试。 让我们使用一个总是导致测试被跳过的条件：
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Fail tests with the `knownfailureif` decorator as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`knownfailureif`装饰器的失败测试如下：
- en: 'Add a test function that always passes. Then decorate it with the `knownfailureif`
    decorator so that the test always fails:'
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个始终通过的测试函数。 然后使用`knownfailureif`装饰器对其进行装饰，以使测试始终失败：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define test classes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义测试类，如下所示：
- en: 'We will define some test classes with methods that normally should be executed
    by nose:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用通常应由鼻子执行的方法来定义一些测试类：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Disable a test method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用测试方法如下：
- en: 'Let''s disable the second test method from the previous step:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一步中禁用第二种测试方法：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Run the tests as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试，如下所示：
- en: 'We can run the tests with the following command:'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令运行测试：
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We decorated some functions and methods as not being tests so that they were
    ignored by `nose`. We skipped one test and failed another too. We did this by
    applying decorators directly and with the following `decorate_methods` function
    (see `decorator_test.py`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将某些函数和方法修饰为未经测试，以便`nose`忽略它们。 我们跳过了一项测试，也没有通过另一项测试。 我们通过直接应用装饰器并使用以下`decorate_methods`函数（请参见`decorator_test.py`）来做到这一点：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: We learned about testing and NumPy testing utilities in this chapter. We covered
    unit testing, assert functions, profiling, and debugging. Unit testing is a standard
    practice since it should give you better quality code with a low risk of regression.
    NumPy provides assert functions to help you with unit testing. We covered some
    of these functions in this chapter. No matter how good your unit tests are, at
    a certain point, you will have to do profiling and debugging, so pointers are
    given in that respect.
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了测试和 NumPy 测试工具。 我们介绍了单元测试，断言函数，性能分析和调试。 单元测试是一种标准做法，因为它应该为您提供质量更好的代码，并且回归风险低。
    NumPy 提供断言函数来帮助您进行单元测试。 在本章中，我们介绍了其中一些函数。 无论您的单元测试有多好，在某个时候，您都必须进行性能分析和调试，因此在这方面给出了指针。
- en: The topic of the next chapter is the scientific Python ecosystem and how NumPy
    fits in it.
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章的主题是科学的 Python 生态系统以及 NumPy 如何融入其中。
