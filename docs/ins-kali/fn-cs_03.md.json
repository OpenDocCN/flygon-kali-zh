["```cs\ndelegate void DelDelegate(int x); \nvoid DoSomething(int i) { /* Implementation */ } \nDelDelegate d = DoSomething; \n\n```", "```cs\ndelegate([parameters]) { implementation } \n\n```", "```cs\npublic partial class Program \n{ \n  static Func<string, string> displayMessageDelegate = \n    delegate (string str) \n  { \n    return String.Format(\"Message: {0}\", str); \n  }; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      displayMessageDelegate( \n          \"A simple anonymous method sample.\")); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static Func<int, int, int> AreaRectangleDelegate = \n    delegate (int a, int b) \n  { \n    return a * b; \n  }; \n\n  private static Func<int, int, int> AreaSquareDelegate = \n    delegate (int x, int y) \n  { \n    return x * y; \n  }; \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    int i = AreaRectangleDelegate(1, 2); \n    int j = AreaSquareDelegate(2, 3); \n    Console.WriteLine(\"i = \" + i); \n    Console.WriteLine(\"j = \" + j); \n  } \n} \n\n```", "```cs\nprivate static Func<int, int, int> AreaRectangleDelegate = \n  delegate (int a, int b) \n{ \n  return a * b; \n}; \n\n```", "```cs\npublic partial class Program \n{ \n  private delegate int AreaCalculatorDelegate(int x, int y); \n  static int Square(int x, int y) \n  { \n    return x * y; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static bool IsMultipleOfSeven(int i) \n  { \n    return i % 7 == 0; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static int FindMultipleOfSeven(List<int> numList) \n  { \n    return numList.Find(IsMultipleOfSeven); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void PrintResult() \n  { \n    Console.WriteLine( \n      \"The Multiple of 7 from the number list is {0}\", \n      FindMultipleOfSeven(numbers)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static List<int> numbers = new List<int>() \n  { \n    54, 24, 91, 70, 72, 44, 61, 93, \n    73, 3, 56, 5, 38, 60, 29, 32, \n    86, 44, 34, 25, 22, 44, 66, 7, \n    9, 59, 70, 47, 55, 95, 6, 42 \n  }; \n} \n\n```", "```cs\nreturn numList.Find(IsMultipleOfSeven); \n\n```", "```cs\npublic partial class Program \n{ \n  private static int FindMultipleOfSevenLambda( \n    List<int> numList) \n  { \n    return numList.Find( \n      delegate(int i) \n      { \n        return i % 7 == 0; \n      } \n    ); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void PrintResultLambda() \n  { \n    Console.WriteLine( \n      \"({0}) The Multiple of 7 from the number list is {1}\", \n      \"Lambda\", \n      FindMultipleOfSevenLambda(numbers)); \n  } \n} \n\n```", "```cs\n            delegate (int a, int b) \n            { \n              return a * b; \n            }; \n\n    ```", "```cs\n            private static Func<int, int, int> AreaRectangleDelegate = \n              delegate (int a, int b) \n            { \n              return a * b; \n            }; \n\n    ```", "```cs\n            public partial class Program \n            { \n              private static void Conflict() \n              { \n                for (int i = 0; i < numbers.Count; i++) \n                { \n                  Action<int> actDelegate = delegate(int i) \n                  { \n                    Console.WriteLine(\"{0}\", i); \n                  }; \n                  actDelegate(i); \n                } \n              } \n            } \n\n    ```", "```cs\n([parameters]) => expression; \n\n```", "```cs\npublic partial class Program \n{ \n  static Func<string, string> displayMessageDelegate = \n    str => String.Format(Message: {0}\", str); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Console.WriteLine( \n      displayMessageDelegate( \n      \"A simple lambda expression sample.\")); \n  } \n} \n\n```", "```cs\nstatic Func<string, string> displayMessageDelegate = \n  delegate (string str) \n{ \n  return String.Format(\"Message: {0}\", str); \n}; \n\n```", "```cs\nstatic Func<string, string> displayMessageDelegate = \n  str => String.Format(\"Message: {0}\", str); \n\n```", "```cs\ndelegate (string str) \n{ \n  return String.Format(\"Message: {0}\", str); \n}; \n\n```", "```cs\nstr => String.Format(\"Message: {0}\", str); \n\n```", "```cs\n(string str) \n{ \n  return String.Format(\"Message: {0}\", str); \n}; \n\n```", "```cs\n(string str) => return String.Format(\"Message: {0}\", str); \n\n```", "```cs\n(string str) => String.Format(\"Message: {0}\", str); \n\n```", "```cs\n(string str) => String.Format(\"Message: {0}\", str); \n\n```", "```cs\n(str) => String.Format(\"Message: {0}\", str); \n\n```", "```cs\nstr => String.Format(\"Message: {0}\", str); \n\n```", "```cs\npublic partial class Program \n{ \n  private static Func<int, int, int> AreaRectangleDelegate = \n    (a, b) => a * b; \n  private static Func<int, int, int> AreaSquareDelegate = \n    (x, y) => x * y; \n} \n\n```", "```cs\nFunc<int, int, int> AreaRectangleDelegate = \n  (a, b) => a * b; \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Expression<Func<int, int, int>> expression = \n      (a, b) => a * b; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void exploreBody( \n    Expression<Func<int, int, int>> expr) \n  { \n    BinaryExpression body = \n      (BinaryExpression)expr.Body; \n    ParameterExpression left = \n      (ParameterExpression)body.Left; \n    ParameterExpression right = \n      (ParameterExpression)body.Right; \n    Console.WriteLine(expr.Body); \n    Console.WriteLine( \n      \"\\tThe left part of the expression: {0}\\n\" + \n      \"\\tThe NodeType: {1}\\n\" + \n      \"\\tThe right part: {2}\\n\" + \n      \"\\tThe Type: {3}\\n\", \n      left.Name, \n      body.NodeType, \n      right.Name, \n      body.Type); \n  } \n} \n\n```", "```cs\nBinaryExpression body = \n  (BinaryExpression)expr.Body; \nParameterExpression left = \n  (ParameterExpression)body.Left; \nParameterExpression right = \n  (ParameterExpression)body.Right; \n\n```", "```cs\nExpression<Func<int, int, int>> expression = \n  (a, b) => a * b; \n\n```", "```cs\npublic partial class Program \n{ \n  private static void compilingExpr( \n    Expression<Func<int, int, int>> expr) \n  { \n    int a = 2; \n    int b = 3; \n    int compResult = expr.Compile()(a, b); \n    Console.WriteLine( \n      \"The result of expression {0}\"+ \n      \" with a = {1} and b = {2} is {3}\", \n      expr.Body, \n      a, \n      b, \n      compResult); \n  } \n} \n\n```", "```cs\nint compResult = expr.Compile()(a, b); \n\n```", "```cs\npublic class EventClassWithoutEvent \n{ \n  public Action OnChange { get; set; } \n  public void Raise() \n  { \n    if (OnChange != null) \n    { \n      OnChange(); \n    } \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CreateAndRaiseEvent() \n  { \n    EventClassWithoutEvent ev = new EventClassWithoutEvent(); \n    ev.OnChange += () => \n      Console.WriteLine(\"1st: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"2nd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"3rd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"4th: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"5th: Event raised\"); \n    ev.Raise(); \n  } \n} \n\n```", "```cs\nEventClassWithoutEvent ev = new EventClassWithoutEvent(); \nev.OnChange += () => \n  Console.WriteLine(\"1st: Event raised\"); \nev.Raise(); \n\n```", "```cs\nev.OnChange += () => \n  Console.WriteLine(\"5th: Event raised\"); \n\n```", "```cs\nev.OnChange = () => \n  Console.WriteLine(\"5th: Event raised\"); \n\n```", "```cs\npublic class EventClassWithEvent \n{ \n  public event Action OnChange = () => { }; \n  public void Raise() \n  { \n    OnChange(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CreateAndRaiseEvent2() \n  { \n    EventClassWithEvent ev = new EventClassWithEvent(); \n    ev.OnChange += () => \n      Console.WriteLine(\"1st: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"2nd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"3rd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"4th: Event raised\"); \n    ev.OnChange = () => \n      Console.WriteLine(\"5th: Event raised\"); \n    ev.Raise(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CreateAndRaiseEvent3() \n  { \n    EventClassWithoutEvent ev = new EventClassWithoutEvent(); \n    ev.OnChange += () => \n      Console.WriteLine(\"1st: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"2nd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"3rd: Event raised\"); \n    ev.OnChange(); \n    ev.OnChange += () => \n      Console.WriteLine(\"4th: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"5th: Event raised\"); \n    ev.Raise(); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CreateAndRaiseEvent4() \n  { \n    EventClassWithEvent ev = new EventClassWithEvent(); \n    ev.OnChange += () => \n      Console.WriteLine(\"1st: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"2nd: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"3rd: Event raised\"); \n    ev.OnChange(); \n    ev.OnChange += () => \n      Console.WriteLine(\"4th: Event raised\"); \n    ev.OnChange += () => \n      Console.WriteLine(\"5th: Event raised\"); \n    ev.Raise(); \n  } \n} \n\n```", "```cs\npublic class MyArgs : EventArgs \n{ \n  public int Value { get; set; } \n  public MyArgs(int value) \n  { \n    Value = value; \n  } \n} \npublic class EventClassWithEventHandler \n{ \n  public event EventHandler<MyArgs> OnChange = \n    (sender, e) => { }; \n  public void Raise() \n  { \n    OnChange(this, new MyArgs(100)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static void CreateAndRaiseEvent() \n  { \n    EventClassWithEventHandler ev = \n      new EventClassWithEventHandler(); \n    ev.OnChange += (sender, e) \n      => Console.WriteLine( \n          \"Event raised with args: {0}\", e.Value); \n    ev.Raise(); \n  } \n} \n\n```", "```cs\nev.OnChange += (sender, e) \n  => Console.WriteLine( \n      \"Event raised with args: {0}\", e.Value); \n\n```", "```cs\npublic partial class Program \n{ \n  static Func<string, string> displayMessageDelegate = \n    str => String.Format(Message: {0}\", str); \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static private void firstClassConcept() \n  { \n    string str = displayMessageDelegate( \n      \"Assign displayMessageDelegate() to variable\"); \n      Console.WriteLine(str); \n  } \n} \n\n```", "```cs\nstring str = displayMessageDelegate( \n  \"Assign displayMessageDelegate() to variable\"); \n\n```", "```cs\npublic partial class Program \n{ \n  static private void firstClassConcept2( \n    Func<string, string> funct, \n    string message) \n  { \n    Console.WriteLine(funct(message)); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    firstClassConcept2( \n      displayMessageDelegate, \n      \"Pass lambda expression to argument\"); \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  private static Func<int, int> GetFunction() \n  { \n    int localVar = 1; \n    Func<int, int> returnFunc = scopeVar => \n    { \n      localVar *= 2; \n      return scopeVar + localVar; \n    }; \n  return returnFunc; \n  } \n} \n\n```", "```cs\npublic partial class Program \n{ \n  static void Main(string[] args) \n  { \n    Func<int, int> incrementFunc = GetFunction(); \n    for (int i = 0; i < 10; i++) \n    { \n      Console.WriteLine( \n        \"Invoking {0}: incrementFunc(1) = {1}\", \n        i, \n        incrementFunc(1)); \n    } \n  } \n} \n\n```"]