- en: Creating a Simple Generics Class
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的泛型类
- en: In this chapter, you will look at the basics of making a simple generic class
    so that one class can operate on many different data types. A great benefit of
    generics is flexibility.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习制作一个简单的泛型类的基础知识，以便一个类可以操作许多不同的数据类型。泛型的一个巨大好处是灵活性。
- en: Creating a generics class
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个泛型类
- en: Bring up a project, and go to Solution Explorer; right-click, select Add, and
    click on Class. Name the class `GenericsClass`; a simple generics class. Then,
    click on OK. When the Visual Studio message comes up, click on Yes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个项目，转到解决方案资源管理器；右键单击，选择添加，然后单击类。将类命名为`GenericsClass`；一个简单的泛型类。然后，单击确定。当Visual
    Studio消息出现时，单击是。
- en: 'For our purposes, you don''t need any of the `using System` lines at the top,
    nor any of the comments underneath, so delete them. Your initial screen should
    look like *Figure 1.1.1*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，您不需要顶部的任何`using System`行，也不需要下面的任何注释，所以删除它们。您的初始屏幕应该看起来像*图1.1.1*：
- en: '![](img/2d2bd5c8-61df-4e63-ae54-a3bed3ed1f78.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d2bd5c8-61df-4e63-ae54-a3bed3ed1f78.png)'
- en: 'Figure 1.1.1: The initial GenericsClass.cs screen'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.1：初始GenericsClass.cs屏幕
- en: Working with different data types
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的数据类型
- en: 'Now, let''s put a `<T>` symbol after where it says `public class GenericsClass`,
    as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`public class GenericsClass`后面加上`<T>`符号，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This means that this single class can work equally well with several different
    data types. Next, enter the following beneath the open curly brace under the preceding
    line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着这个单一的类可以同样有效地处理几种不同的数据类型。接下来，在上一行的开放大括号下面输入以下内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Enter the following comment directly above this line:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在此行的正上方直接输入以下注释：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In other words, this will operate equally well on doubles, decimals, integers,
    and so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这将在双精度、小数、整数等上同样有效。
- en: Making parameters that are generic
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作通用参数
- en: 'Now, in the following line, enter the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一行中，输入以下内容：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, you can also make parameters that are generic like this one.
    This is a parameter, `input` is the name of it, and the type is `T`. So, it's
    a generic array.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，您也可以制作像这样通用的参数。这是一个参数，`input`是它的名称，类型是`T`。所以，它是一个通用数组。
- en: 'Next, enter the following between a set of curly braces beneath the preceding
    line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一行的一对大括号之间输入以下内容：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Displaying the values
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示值
- en: 'Of course, you should be able to display these values. so, enter the following
    line beneath the closed curly brace under the `vals = input;` line:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您应该能够显示这些值。因此，在`vals = input;`行的关闭大括号下面输入以下行：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To display these values, you'll enter the following between a set of curly braces
    beneath the preceding line.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示这些值，您将在上一行的一对大括号之间输入以下内容。
- en: 'First, put in a string, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，输入一个字符串，如下所示：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, declare the string and initialize the value to null.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，声明字符串并将值初始化为null。
- en: 'Then, enter the following directly below this line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在此行的正下方输入以下内容：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the `foreach` loop here is going to operate. The `T` object
    will be a different data type, depending on how we choose to make the object.
    The `t` variable, of course, is each specific value inside the `vals` array.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这里`foreach`循环将会运行。`T`对象将是不同的数据类型，取决于我们如何选择制作对象。当然，`t`变量是`vals`数组中每个特定值。
- en: 'Next, you will enter the following between a set of curly braces beneath the
    preceding line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在上一行下面的一对大括号之间输入以下内容：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember, we use the `+=` operator to accumulate and `<br>` to push down to
    the next line. To get the value, of course, we will put in the `t` variable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们使用`+=`运算符来累积和`<br>`来推到下一行。当然，为了得到值，我们将放入`t`变量。
- en: 'At the end, you want to return this, so you will type the following beneath
    the closed curly brace under the preceding line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您希望返回这个，所以您将在上一行的关闭大括号下面输入以下内容：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That''s it. The final version of the `GenericsClass.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。本章的`GenericsClass.cs`文件的最终版本，包括注释，如下所示：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that we have a single block of code; this will now operate on integers,
    doubles, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有一个代码块；现在它将在整数、双精度等上运行。
- en: Adding a button to Default.aspx
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Default.aspx添加按钮
- en: 'Now, let''s take a look at `Default.aspx`. The only thing we really need to
    do at this time is to add a `Button` control. For this, go to Toolbox and grab
    a `Button` control from there. Drag and drop it below the line beginning with
    `<form id=...` (you can delete the `<div>` lines, as we won''t be needing them).
    Change the text on the `Button` control to, for example, `Display Values`. Your
    complete `Default.aspx` file should look like the one shown in *Figure 1.1.2*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`Default.aspx`。此时，我们真正需要做的唯一的事情就是添加一个`Button`控件。为此，转到工具箱，从那里获取一个`Button`控件。将其拖放到以`<form
    id=...`开头的行下面。更改`Button`控件上的文本，例如为`显示值`。您的完整的`Default.aspx`文件应该看起来像*图1.1.2*中显示的那样：
- en: '![](img/ddede415-cfcd-4392-8b8a-ab111ea25f9e.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddede415-cfcd-4392-8b8a-ab111ea25f9e.png)'
- en: 'Figure 1.1.2: The complete HTML for this project'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.2：此项目的完整HTML
- en: 'Now, go to the Design view. Our very simple interface is shown in *Figure 1.1.3*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到设计视图。我们非常简单的界面显示在*图1.1.3*中：
- en: '![](img/e66f3f19-27a2-498f-a6f4-9d18f62dea3d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e66f3f19-27a2-498f-a6f4-9d18f62dea3d.png)'
- en: 'Figure 1.1.3: Our very simple interface in the Design view'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.3：我们在设计视图中非常简单的界面
- en: Initializing a collection of integers to their array and displaying the results
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将整数集合初始化为它们的数组并显示结果
- en: 'Now, double-click on the `Display Values` button and go into `Default.aspx.cs`.
    Delete the `Page_Load` block. Next, between the set of curly braces beneath the
    line beginning with `protected void Button1_Click...`, enter the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，双击`显示值`按钮，进入`Default.aspx.cs`。删除`Page_Load`块。接下来，在以`protected void Button1_Click...`开头的行下面的一对大括号之间，输入以下内容：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see in this line that we are basically initializing a collection of
    integers to their array.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这行中看到，我们基本上是将整数的集合初始化为它们的数组。
- en: 'Now, you can display this. So, for example, you can enter the following below
    this line:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以显示这个。例如，你可以在这行下面输入以下内容：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that the `GenericsClass` which we have constructed is operating in integers,
    but it can operate equally well on any other data type.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们构建的`GenericsClass`正在操作整数，但它同样可以在任何其他数据类型上同样有效地操作。
- en: Changing the data types in our generics class
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改我们泛型类中的数据类型
- en: 'Now, to make the code efficiency more obvious, take both of the preceding lines,
    copy them (*Ctrl* + *C*) and paste them (*Ctrl* + *V*) beneath these and just
    change it to double, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了更明显地显示代码的效率，将前面的两行都复制（*Ctrl* + *C*）并粘贴（*Ctrl* + *V*）在下面，并将其改为double，如下所示：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We''ll call this one `dubs` and change the name here to double: it''s the same
    code, the same class, and the same generic class that you can operate on the doubles.
    Again, to emphasize this one more time, and to see that flexibility and code reuse
    is really the purpose here; that is, the ability to reuse code, we''ll now take
    both of these new lines, copy and paste them below once more, and just change
    `double` to `decimal`, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个称为`dubs`，并在这里将名称更改为double：这是相同的代码，相同的类，以及你可以在双精度上操作的相同的泛型类。再次强调一遍，以及看到这种灵活性和代码重用确实是这里的目的；也就是说，重用代码的能力，我们现在将这两行新代码再次复制粘贴到下面，并将`double`改为`decimal`，如下所示：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s call this one `decs`. Now, of course, if you want to make things a little
    more interesting, you can throw in some decimals:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称这个为`decs`。现在，当然，如果你想让事情变得更有趣一点，你可以加入一些小数：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With decimals, just make sure that you put the `M` suffix in there, because
    you need the `M` suffix at the end to indicate that it's a decimal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小数，只需确保在其中加入`M`后缀，因为你需要在末尾加上`M`后缀来表示它是一个小数。
- en: Running the program
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行程序
- en: 'Now, let''s take a look. When you run this code and click on the Display Values
    button, your screen will look like the one shown in *Figure 1.1.4*:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看。当你运行这段代码并点击“显示数值”按钮时，你的屏幕将会看起来像*图1.1.4*中所示的样子：
- en: '![](img/b3cf8ee3-e14e-4599-9104-e588ff37af9a.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3cf8ee3-e14e-4599-9104-e588ff37af9a.png)'
- en: 'Figure 1.1.4: The initial run of our code'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.4：我们代码的初始运行
- en: Accumulating the input
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 累积输入
- en: 'Now, we will accumulate the input. So, in the following `sampLabel.Text` lines,
    we change the `=` sign to `+=`, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将累积输入。所以，在以下的`sampLabel.Text`行中，我们将`=`号改为`+=`，如下所示：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s run it one more time. Click on the Display Values button and your screen
    will now look like the one shown in *Figure 1.1.5*:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再跑一遍。点击“显示数值”按钮，你的屏幕现在会看起来像*图1.1.5*中所示的样子：
- en: '![](img/f436f1c0-f92c-404a-9e5f-be8280e38c8b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f436f1c0-f92c-404a-9e5f-be8280e38c8b.png)'
- en: 'Figure 1.1.5: The input is now being accumulated, and the values are showing
    as expected'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.5：现在正在累积输入，并且值显示如预期
- en: The program is now working as expected.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 程序现在按预期工作。
- en: So, the big idea of generics at this point is that you can define a generic
    class. This class can operate equally well on many different data types. For example,
    you can make a generic class that operates on integers as well as on doubles and
    decimals.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，泛型的重要概念是你可以定义一个泛型类。这个类可以在许多不同的数据类型上同样有效地操作。例如，你可以创建一个泛型类，它既可以操作整数，也可以操作双精度和小数。
- en: This step isn't strictly required, but here's a little bit of additional insight.
    If you want to, you can set a breakpoint as follows. Select the line with the
    open curly brace under the line beginning with `protected void Button1_Click....`
    Now, go to Debug | Step Into (*F11*) and click on Display Values.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步并不是严格要求的，但是这里有一点额外的见解。如果你愿意，你可以设置一个断点。选择以`protected void Button1_Click....`开头的行下面的大括号所在的行。现在，转到调试
    | 逐步执行（*F11*），然后点击“显示数值”。
- en: 'Now, we will go through it. So, to first step into it, hover your mouse over
    the `T` object in the following line in `Generics Class.cs`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将逐步进行。首先，将鼠标悬停在`Generics Class.cs`中以下行中的`T`对象上：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, `T` is essentially like a parameter, so it does have a certain value,
    which is expressed in the `vals = input;` line. The first time, `T` is used for
    integers. This is how you can step through this code. At the bottom of the screen,
    the values inside the array are displayed, as shown in *Figure 1.1.6*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`T`本质上就像一个参数，因此它确实有一个特定的值，这在`vals = input;`行中得到了表达。第一次，`T`用于整数。这就是你可以逐步执行这段代码的方式。在屏幕底部，数组中的值被显示出来，就像*图1.1.6*中所示的那样：
- en: '![](img/ce84ddec-f168-4cd1-8e13-55c21c9da2c0.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce84ddec-f168-4cd1-8e13-55c21c9da2c0.png)'
- en: 'Figure 1.1.6: The values inside the array'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.6：数组中的值
- en: 'The `t` variable, as you can see in *Figure 1.1.7*, is an integer, and this
    is how it operates:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在*图1.1.7*中所看到的，`t`变量是一个整数，它的操作方式如下：
- en: '![](img/fd9371c5-0f53-4b72-9661-87a7043a74e5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd9371c5-0f53-4b72-9661-87a7043a74e5.png)'
- en: 'Figure 1.1.7: The t is an integer'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1.7：t是一个整数
- en: Notice also in the screenshot that it's a generics class with an `<int>` datatype.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意在截图中，它是一个带有`<int>`数据类型的泛型类。
- en: The `T` object in the `foreach(T t in vals)` line right now represents an integer,
    and so on for the other data types. So, flexibility of code and reuse of code
    means that you will write less code. If not for generics, you would have to create
    individual classes to handle each different data type.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach(T t in vals)`行中的`T`对象现在代表一个整数，其他数据类型也是如此。因此，代码的灵活性和重用意味着你将写更少的代码。如果没有泛型，你将不得不创建单独的类来处理每种不同的数据类型。'
- en: Chapter review
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，包括注释在内，本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the basics of making a simple generic class,
    so that one class can operate on many different data types. A great benefit of
    generics is flexibility. You created a simple generics class that worked with
    different data types, made generic parameters, initialized a collection of integers
    to their array and displayed the results, and then changed the data types in the
    generics class to doubles and decimals.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了创建一个简单的通用类的基础知识，以便一个类可以操作许多不同的数据类型。通用类的一个巨大好处是灵活性。您创建了一个简单的通用类，可以处理不同的数据类型，创建了通用参数，将整数集合初始化为它们的数组并显示结果，然后将通用类中的数据类型更改为双精度和小数。
- en: In the next chapter, you will learn about generic methods, or methods that can
    operate on different data types. You will also learn about constraining a method
    in terms of the data types that it can operate on, so we'll add a concept called
    constraints.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习关于通用方法的知识，或者可以操作不同数据类型的方法。您还将学习如何约束方法可以操作的数据类型，因此我们将添加一个叫做约束的概念。
