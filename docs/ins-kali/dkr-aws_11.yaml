- en: Managing ECS Infrastructure Life Cycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理ECS基础设施生命周期
- en: A fundamental ongoing activity associated with operating ECS infrastructure
    is the requirement to manage the life cycle of your ECS container instances. In
    any production-grade scenario, you will be required to patch your ECS container
    instances, and ensure the core components of your ECS container instances such
    as the Docker Engine and ECS agent are updated frequently to ensure you have access
    to the latest features, and security and performance enhancements. In an immutable
    infrastructure world where your ECS container instances are considered "cattle",
    the standard approach is that you destroy and replace your ECS container instances
    by rolling in new Amazon Machine Images (AMIs), rather than taking the traditional
    approach of patching *pets* and keeping your ECS container instances around for
    a long period of time. Another common use case where you need to manage the life
    cycle is related to Auto Scaling—for example, if you scale your ECS clusters in
    after a period of heavy demand, you need to be able to remove ECS container instances
    from your cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与操作ECS基础设施相关的一个基本持续活动是管理ECS容器实例的生命周期。在任何生产级别的场景中，您都需要对ECS容器实例进行打补丁，并确保ECS容器实例的核心组件（如Docker引擎和ECS代理）经常更新，以确保您可以访问最新功能和安全性和性能增强。在一个不可变基础设施的世界中，您的ECS容器实例被视为“牲畜”，标准方法是通过滚动新的Amazon机器映像（AMIs）销毁和替换ECS容器实例，而不是采取传统的打补丁“宠物”方法，并将ECS容器实例保留很长时间。另一个常见的用例是需要管理生命周期的与自动扩展相关，例如，如果您在高需求期后扩展ECS集群，您需要能够从集群中移除ECS容器实例。
- en: Taking an ECS container instance out of service probably sounds like quite a
    simple task, however consider what happens if you have running containers on your
    instance. If you take the instance out of service immediately, users connected
    to applications running on those containers will be disrupted, which might result
    in data loss and at the very least, unhappy users. What is required is a mechanism
    that enables your ECS container instances to be taken out of service gracefully,
    maintaining current user connections until they can be closed without any impact
    to the end user, and then actually terminate the instance once you can be sure
    the instance is completely out of service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将ECS容器实例从服务中移除听起来可能是一个很简单的任务，然而请考虑一下如果您的实例上有正在运行的容器会发生什么。如果立即将实例移出服务，连接到运行在这些容器上的应用程序的用户将会受到干扰，这可能会导致数据丢失，至少会让用户感到不满。所需的是一种机制，使您的ECS容器实例能够优雅地退出服务，保持当前用户连接，直到可以在不影响最终用户的情况下关闭它们，然后在确保实例完全退出服务后终止实例。
- en: In this chapter, you will learn how to implement such a capability, by leveraging
    two key AWS features—EC2 Auto Scaling life cycle hooks and ECS container instance
    draining. EC2 Auto Scaling life cycle hooks let you be informed of a pending life
    cycle event related to an EC2 instance being started or being taken out of service,
    and provide you with an opportunity to perform any appropriate initialization
    or cleanup actions before signalling that the life cycle event can proceed. This
    is where you can leverage ECS container instance draining, which marks ECS tasks
    on the affected ECS container instance as draining or out of service, and proceeds
    to gracefully take the tasks out of service by starting new replacement ECS tasks
    on other ECS container instances in the cluster, and then draining connections
    to the affected ECS tasks until the tasks can be stopped and the ECS container
    instance is drained.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何通过利用两个关键的AWS功能来实现这样的能力——EC2自动缩放生命周期钩子和ECS容器实例排空。EC2自动缩放生命周期钩子让您了解与启动或停止EC2实例相关的待处理生命周期事件，并为您提供机会在发出生命周期事件之前执行任何适当的初始化或清理操作。这就是您可以利用ECS容器实例排空的地方，它将受影响的ECS容器实例上的ECS任务标记为排空或停用，并开始优雅地将任务从服务中取出，方法是在集群中的其他ECS容器实例上启动新的替代ECS任务，然后排空到受影响的ECS任务的连接，直到任务可以停止并且ECS容器实例被排空。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Understanding ECS infrastructure life cycle management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ECS基础设施的生命周期管理
- en: Building a new ECS container instance AMI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建新的ECS容器实例AMI
- en: Configuring EC2 Auto Scaling rolling updates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置EC2自动缩放滚动更新
- en: Creating EC2 Auto Scaling life cycle hooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建EC2自动缩放生命周期钩子
- en: Creating a Lambda function for consuming life cycle hooks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用于消耗生命周期钩子的Lambda函数
- en: Deploying and testing Auto Scaling life cycle hooks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和测试自动缩放生命周期钩子
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following lists the technical requirements to complete this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了完成本章所需的技术要求：
- en: Administrator access to an AWS account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS账户的管理员访问
- en: Local AWS profile configured as per instructions in Chapter 3
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据第3章的说明配置本地AWS配置文件
- en: AWS CLI version 1.15.71 or higher
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI版本1.15.71或更高版本
- en: This chapter continues on from Chapter 9 (NOT Chapter 10) so it requires you
    to have successfully completed all configuration tasks defined in Chapter 9, and
    ensure you have reset the **todobackend-aws** repository to the master branch
    (which should be based upon completion of Chapter 9)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章继续自第9章（而不是第10章），因此需要您成功完成第9章中定义的所有配置任务，并确保您已将**todobackend-aws**存储库重置为主分支（应基于第9章的完成）
- en: The following GitHub URL contains the code samples used in this chapter - [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch11](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch11)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub URL包含本章中使用的代码示例 - [https://github.com/docker-in-aws/docker-in-aws/tree/master/ch11](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch11)[.](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2BT7DVh](http://bit.ly/2BT7DVh)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2BT7DVh](http://bit.ly/2BT7DVh)'
- en: Understanding ECS life cycle management
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ECS生命周期管理
- en: As described in the introduction to this chapter, ECS life cycle management
    refers to the process of taking existing ECS container instances out of service
    without impacting end users that may be connected to applications running on your
    affect instances.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章介绍中所述，ECS生命周期管理是指将现有的ECS容器实例从服务中取出的过程，而不会影响连接到在您受影响的实例上运行的应用程序的最终用户。
- en: 'This requires you to leverage two key features provided by AWS:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要您利用AWS提供的两个关键功能：
- en: EC2 Auto Scaling life cycle hooks
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2自动扩展生命周期挂钩
- en: ECS container instance draining
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ECS容器实例排水
- en: EC2 Auto Scaling life cycle hooks
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2自动扩展生命周期挂钩
- en: 'EC2 Auto Scaling life cycle hooks allow you to receive notice of a pending
    life cycle event and perform some action before the event takes place. Currently,
    you can be notified of the following life cycle hook events:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: EC2自动扩展生命周期挂钩允许您在挂起的生命周期事件发生之前收到通知并在事件发生之前执行某些操作。目前，您可以收到以下生命周期挂钩事件的通知：
- en: '`EC2_INSTANCE_LAUNCHING`: Raised when an EC2 instance is about to be launched'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EC2_INSTANCE_LAUNCHING`：当EC2实例即将启动时引发'
- en: '`EC2_INSTANCE_TERMINATING`: Raised when an EC2 instance is about to be terminated'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EC2_INSTANCE_TERMINATING`：当EC2实例即将终止时引发'
- en: In general, you don't need to worry about `EC2_INSTANCE_LAUNCHING` events, however
    anybody who runs a production-grade ECS cluster should be interested in `EC2_INSTANCE_TERMINATING`
    events, given an instance that is about to be terminated may be running containers
    with active end user connections. Once you have subscribed to a life cycle hook
    event, the EC2 Auto Scaling service will wait for you to signal that the life
    cycle action can proceed. This provides you with a mechanism that allows you to
    perform graceful tear down actions in the case of an `EC2_INSTANCE_TERMINATING`
    event, and this is where you can leverage ECS container instance draining.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一般情况下，您不需要担心`EC2_INSTANCE_LAUNCHING`事件，但是任何运行生产级ECS集群的人都应该对`EC2_INSTANCE_TERMINATING`事件感兴趣，因为即将终止的实例可能正在运行具有活动最终用户连接的容器。一旦您订阅了生命周期挂钩事件，EC2自动扩展服务将等待您发出信号，表明生命周期操作可以继续进行。这为您提供了一种机制，允许您在`EC2_INSTANCE_TERMINATING`事件发生时执行优雅的拆除操作，这就是您可以利用ECS容器实例排水的地方。
- en: ECS container instance draining
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS容器实例排水
- en: ECS container instance draining is a feature that allows you to gracefully *drain* your
    ECS container instances of running ECS tasks, with the end result being your ECS
    container instance has no running ECS tasks or containers, meaning it is safe
    to terminate the instance without impacting your container applications. ECS container
    instance draining first marks your ECS container instance in a DRAINING state,
    which will cause all ECS tasks running on the instance to be gracefully shut down
    and started on other container instances in the cluster. This draining activity
    uses the standard *rolling* behavior you have already seen with ECS services—for
    example, if you have an ECS task associated with an ECS service that has application
    load balancer integration, ECS will first attempt to register a new ECS task on
    another ECS container instance as a new target in the application load balancer
    target group, and then place the target associated with the ECS container instance
    that is being drained into a connection draining state.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ECS容器实例排水是一个功能，允许您优雅地排水您的ECS容器实例中正在运行的ECS任务，最终结果是您的ECS容器实例没有正在运行的ECS任务或容器，这意味着可以安全地终止实例而不影响您的容器应用程序。ECS容器实例排水首先将您的ECS容器实例标记为DRAINING状态，这将导致在实例上运行的所有ECS任务被优雅地关闭并在集群中的其他容器实例上启动。这种排水活动使用了您已经在ECS服务中看到的标准*滚动*行为，例如，如果您有一个与具有应用程序负载均衡器集成的ECS服务相关联的ECS任务，ECS将首先尝试在另一个ECS容器实例上注册一个新的ECS任务作为应用程序负载均衡器目标组中的新目标，然后将与正在排水的ECS容器实例相关联的目标放置到连接排水状态。
- en: Note that it is important that your ECS cluster has enough resources and ECS
    container instances to migrate each of the affected ECS tasks, which can be challenging
    given you are also reducing the ECS cluster capacity by an instance. This means,
    for example, if you are performing planned replacements of ECS container instances
    in your cluster (for example, you are updating to a new AMI), then you need to
    temporarily add extra capacity to your cluster so that you swap out instances
    in a rolling fashion without reducing overall cluster capacity. If you are using
    CloudFormation to deploy your EC2 Auto Scaling groups, a very useful feature is
    the ability to specify update policies that can temporarily add extra capacity
    to your Auto Scaling groups during a rolling update, and you will learn how to
    leverage this feature to always ensure you maintain ECS cluster capacity at all
    times when performing rolling updates.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，重要的是您的ECS集群具有足够的资源和ECS容器实例来迁移每个受影响的ECS任务，这可能具有挑战性，因为您还通过一个实例减少了ECS集群的容量。这意味着，例如，如果您正在计划替换集群中的ECS容器实例（例如，您正在更新到新的AMI），那么您需要临时向集群添加额外的容量，以便以滚动方式交换实例，而不会减少整体集群容量。如果您正在使用CloudFormation部署您的EC2自动扩展组，一个非常有用的功能是能够指定更新策略，在滚动更新期间临时向您的自动扩展组添加额外的容量，您将学习如何利用此功能始终确保在执行滚动更新时始终保持ECS集群容量。
- en: ECS life cycle management solution
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECS生命周期管理解决方案
- en: Now that you have some background of ECS life cycle management, let's discuss
    the solution that you will implement in this chapter, which will leverage EC2
    life cycle hooks to trigger ECS container instance draining and signal the EC2
    Auto Scaling service when it is safe to terminate your ECS container instances.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了ECS生命周期管理的一些背景知识，让我们讨论一下您将在本章中实施的解决方案，该解决方案将利用EC2生命周期挂钩来触发ECS容器实例的排空，并在安全终止ECS容器实例时向EC2自动扩展服务发出信号。
- en: 'The following diagram illustrates a simple EC2 Auto Scaling group and an ECS
    cluster with two ECS container instances in service, supporting ECS **Service
    A** and ECS **Service B**, which both have two ECS tasks or instances of the ECS
    service running:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了一个简单的EC2自动扩展组和一个具有两个ECS容器实例的ECS集群，支持ECS **Service A**和ECS **Service B**，它们都有两个ECS任务或ECS服务的实例正在运行：
- en: '![](assets/3d9ec502-31d9-4b33-bf8b-3f86c5ae59cb.png)In Service EC2 Auto Scaling
    Group/ECS Cluster'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务中的EC2自动扩展组/ECS集群
- en: 'Let''s assume that you now want to update the ECS container instances in your
    EC2 Auto Scaling group with a new Amazon Machine Image, which requires the termination
    and replacement of each instance. The following diagram illustrates how our life
    cycle hook solution will deal with this requirement and ensure each of the instances
    in the Auto Scaling group can be replaced in a manner that does not disrupt end
    users that are connected to the applications serviced by each ECS service:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您现在希望使用新的Amazon Machine Image更新EC2自动扩展组中的ECS容器实例，这需要终止并替换每个实例。以下图表说明了我们的生命周期挂钩解决方案将如何处理这一要求，并确保自动扩展组中的每个实例都可以以不干扰连接到每个ECS服务的应用程序的最终用户的方式进行替换：
- en: '![](assets/e6a15c2d-7fc9-4819-875d-25b7e000dba6.png)Performing Rolling Updates
    on an In-Service EC2 Auto Scaling Group/ECS Cluster'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 执行滚动更新的在服务中的EC2自动扩展组/ECS集群
- en: 'In the preceding diagram, the following steps take place:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，发生以下步骤：
- en: CloudFormation rolling updates are configured for the EC2 Auto Scaling group,
    which causes the CloudFormation service to temporarily increase the size of the
    EC2 Auto Scaling group.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudFormation滚动更新已配置为EC2自动扩展组，这会导致CloudFormation服务临时增加EC2自动扩展组的大小。
- en: The EC2 Auto Scaling group adds a new EC2 instance (ECS container instance C)
    to the Auto Scaling group in response to the increase in group size from CloudFormation.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EC2自动扩展组根据CloudFormation中组大小的增加，向自动扩展组添加一个新的EC2实例（ECS容器实例C）。
- en: Once the new EC2 instance has started and signalled SUCCESS to CloudFormation,
    the CloudFormation service then instructs the EC2 Auto Scaling service to terminate
    ECS container instance A, given ECS container instance C is now joined to the
    EC2 Auto Scaling group and ECS cluster.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦新的EC2实例启动并向CloudFormation发出成功信号，CloudFormation服务将指示EC2自动扩展服务终止ECS容器实例A，因为ECS容器实例C现在已加入EC2自动扩展组和ECS集群。
- en: Before terminating the instance, the EC2 Auto Scaling service triggers a life
    cycle hook event, publishing this event to a configured Simple Notification Service
    (SNS) topic. SNS is a publish/subscribe style notification service that can be
    used for a variety of use cases, and in our solution we will subscribe a Lambda
    function to the SNS topic.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终止实例之前，EC2自动扩展服务触发一个生命周期挂钩事件，将此事件发布到配置的简单通知服务（SNS）主题。SNS是一种发布/订阅样式的通知服务，可用于各种用例，在我们的解决方案中，我们将订阅一个Lambda函数到SNS主题。
- en: A Lambda function is invoked by the SNS topic in response to the life cycle
    hook event being published to the topic.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda函数是由SNS主题调用的，以响应生命周期挂钩事件被发布到主题。
- en: The Lambda function instructs ECS to drain the ECS container instance that is
    about to be terminated. The function then polls the running task count on the
    ECS container instance, waiting until the task count is zero before considering
    that the draining process is complete.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda函数指示ECS排空即将被终止的ECS容器实例。然后，该函数轮询ECS容器实例上正在运行的任务数量，等待任务数量为零后才认为排空过程完成。
- en: ECS drains the current tasks running on ECS container instance A to other container
    instances that have spare capacity. In the preceding diagram, because ECS container
    instance C was recently added to the cluster, the ECS tasks running on ECS container
    instance A can be drained to container instance C. Note that if container instance
    C had not been added to the cluster, there would be insufficient capacity in the
    cluster to drain container instance A, so ensuring your cluster has sufficient
    capacity for these types of events is very important.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ECS将正在运行在ECS容器实例A上的当前任务转移到具有空闲容量的其他容器实例。在上图中，由于ECS容器实例C最近被添加到集群中，因此正在运行在ECS容器实例A上的ECS任务可以被转移到容器实例C。请注意，如果容器实例C尚未添加到集群中，集群中将没有足够的容量来转移容器实例A，因此确保集群具有足够的容量来处理这些类型的事件非常重要。
- en: In many cases, ECS container instance draining may take longer than the current
    five minute execution timeout limit for Lambda. In this scenario, you can simply
    republish the life cycle hook event notification to the SNS topic, which will
    automatically reinvoke the Lambda function.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在许多情况下，ECS容器实例的排空可能会超过Lambda的当前五分钟执行超时限制。在这种情况下，您可以简单地重新发布生命周期挂钩事件通知到SNS主题，这将自动重新调用Lambda函数。
- en: The Lambda function once again instructs ECS to drain container instance A (which
    is already in progress), and continues to poll the running task count, waiting
    until the running task count is zero.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda函数再次指示ECS排空容器实例A（已在进行中），并继续轮询运行任务数量，等待运行任务数量为零。
- en: Assuming the container instance completes draining and the running task count
    reduces to zero, the Lambda function signals the EC2 Auto Scaling service that
    the life cycle hook is complete.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设容器实例完成排空并且运行任务数量减少为零，Lambda函数会向EC2自动扩展服务发出生命周期挂钩已完成的信号。
- en: The EC2 Auto Scaling service terminates the ECS container instance now that
    the life cycle hook has completed.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: EC2自动缩放服务现在终止ECS容器实例，因为生命周期挂钩已经完成。
- en: At this point, the rolling update that was initiated way back in step 1 by CloudFormation
    is 50% complete, as the old ECS container instance A has been replaced by ECS
    container instance C. The process described in preceding diagram repeats once
    again, with a new ECS container instance introduced to the cluster and ECS container
    instance B marked for termination. Once draining of ECS container instance B has
    completed, all instances in the Auto Scaling group/cluster have been replaced,
    and the rolling update is complete.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，由CloudFormation在步骤1中发起的滚动更新已经完成了50%，因为旧的ECS容器实例A已被ECS容器实例C替换。在前面的图表中描述的过程再次重复，引入了一个新的ECS容器实例到集群中，并将ECS容器实例B标记为终止。一旦ECS容器实例B的排空完成，自动缩放组/集群中的所有实例都已被替换，滚动更新完成。
- en: Building a new ECS container instance AMI
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个新的ECS容器实例AMI
- en: To test our life cycle management solution, we need to have a mechanism to force
    your ECS container instances to be terminated. Although you could simply adjust
    the desired count of your Auto Scaling group (which actually is a common scenario
    when your Auto Scaling groups are scaling down), another common scenario where
    this can happen is when you need to update your ECS container instances by introducing
    a newly built Amazon Machine Image (AMI), complete with the latest operating system
    and security patches, and up-to-date versions of Docker Engine and the ECS agent.
    At the very least, if you are building a custom ECS container instance AMI using
    an approach similar to what you learned in Chapter 6, you should be rebuilding
    your AMI each time Amazon releases a new version of the base ECS-optimized AMI,
    and it is common practice to update your AMIs on a weekly or monthly basis.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的生命周期管理解决方案，我们需要有一种机制来强制终止您的ECS容器实例。虽然您可以简单地调整自动缩放组的期望计数（实际上这是自动缩放组缩减时的常见情况），但另一种常见情况是当您需要通过引入一个新构建的Amazon
    Machine Image（AMI）来更新您的ECS容器实例，其中包括最新的操作系统和安全补丁，以及最新版本的Docker Engine和ECS代理。至少，如果您正在使用类似于第6章中学到的方法构建自定义ECS容器实例AMI，那么每当Amazon发布基本ECS优化AMI的新版本时，您都应该重新构建您的AMI，并且每周或每月更新您的AMI是常见做法。
- en: To simulate introducing a new AMI into your ECS cluster, you can simply perform
    the same steps you executed in Chapter 6, which will output a new AMI that you
    can then use as an input into your stack and force your ECS cluster to upgrade
    each of its ECS container instances.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要模拟将新的AMI引入ECS集群，您可以简单地执行第6章中执行的相同步骤，这将输出一个新的AMI，然后您可以将其作为输入用于您的堆栈，并强制您的ECS集群升级每个ECS容器实例。
- en: 'The following example demonstrates running the `make build` command from the
    root of the **packer-ecs** repository, which will output a new AMI ID for the
    newly created and published image. Ensure you note down this AMI ID as you will
    require it later on in this chapter:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了从**packer-ecs**存储库的根目录运行`make build`命令，这将输出一个新的AMI ID，用于新创建和发布的镜像。确保您记下这个AMI
    ID，因为您稍后在本章中会需要它：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running a Packer build
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Packer构建
- en: Configuring EC2 Auto Scaling rolling updates
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EC2自动缩放滚动更新
- en: When you use CloudFormation to create and manage your EC2 Auto Scaling groups,
    a useful capability is the ability to manage rolling updates. Rolling updates
    refers to the ability to *roll* in new EC2 instances into your Auto Scaling group,
    in a controlled manner that ensures your update process can be completed without
    causing disruption. In Chapter 8, when you created an EC2 Auto Scaling group via
    CloudFormation, you learned how CloudFormation supports creation policies, that
    can help you ensure all instances in your EC2 Auto Scaling have initialized successfully.
    CloudFormation also supports update policies, which as you saw earlier in the
    previous diagram, help you manage and control how updates to your EC2 Auto Scaling
    group are managed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用CloudFormation创建和管理您的EC2自动扩展组时，一个有用的功能是能够管理滚动更新。滚动更新是指以受控的方式将新的EC2实例*滚入*您的自动扩展组，以确保您的更新过程可以在不引起中断的情况下完成。在第8章，当您通过CloudFormation创建EC2自动扩展组时，您了解了CloudFormation支持创建策略，可以帮助您确保EC2自动扩展中的所有实例都已成功初始化。CloudFormation还支持更新策略，正如您在前面的图表中看到的那样，它可以帮助您管理和控制对EC2自动扩展组的更新。
- en: 'If you open the todobackend-aws repository and browse to the CloudFormation
    template located in the `stack.yml` file, you can add an update policy to the `ApplicationAutoscaling` resource,
    as demonstrated in the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开todobackend-aws存储库并浏览到`stack.yml`文件中的CloudFormation模板，您可以向`ApplicationAutoscaling`资源添加更新策略，如以下示例所示：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Configuring a CloudFormation Auto Scaling Group Update Policy
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 配置CloudFormation自动扩展组更新策略
- en: 'In the preceding example, the `UpdatePolicy` setting is applied to the `ApplicationAutoscaling` resource,
    which configures CloudFormation to orchestrate rolling updates according to the
    following `AutoScalingRollingUpdate` configuration parameters whenever instances
    within the Auto Scaling group need to be replaced (*updated*):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`UpdatePolicy`设置应用于`ApplicationAutoscaling`资源，该资源配置CloudFormation根据以下`AutoScalingRollingUpdate`配置参数来编排滚动更新，每当自动扩展组中的实例需要被替换（*更新*）时：
- en: '`MinInstancesInService`: The minimum number of instances that must be in service
    during a rolling update. A standard approach here is to specify the desired count
    of the Auto Scaling group, which means the Auto Scaling will temporarily increase
    in size as new instances are added in order to maintain the minimum number of
    required instances.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinInstancesInService`：在滚动更新期间必须处于服务状态的最小实例数。这里的标准方法是指定自动扩展组的期望计数，这意味着自动扩展将临时增加大小，以便在添加新实例时保持所需实例的最小数量。'
- en: '`MinSuccessfulInstancesPercent`: The minimum percentage of new instances that
    must be deployed successfully for the rolling update to be considered a success.
    If this percentage is not met, then CloudFormation will roll back the stack changes.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinSuccessfulInstancesPercent`：必须成功部署的新实例的最低百分比，以便将滚动更新视为成功。如果未达到此百分比，则CloudFormation将回滚堆栈更改。'
- en: '`WaitOnResourceSignals`: When set to true, specifies that CloudFormation waits
    for a SUCCESS signal from each instance before it considers an instance successfully
    deployed. This requires your EC2 instances to have the `cfn-bootstrap` scripts
    that installed in Chapter 6 and configured in Chapter 7 to signal to CloudFormation
    once initialization of the instance has completed.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WaitOnResourceSignals`：当设置为true时，指定CloudFormation在考虑实例成功部署之前等待每个实例发出的成功信号。这需要您的EC2实例在第6章安装并在第7章配置的`cfn-bootstrap`脚本向CloudFormation发出信号，表示实例初始化已完成。'
- en: '`PauseTime`: When `WaitOnResourceSignals` is configured, specifies the maximum
    amount of time to wait for each instance to signal SUCCESS. This value is expressed
    in ISO8601 format and in the following example is configured to wait for up to
    15 minutes.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PauseTime`：当配置了`WaitOnResourceSignals`时，指定等待每个实例发出SUCCESS信号的最长时间。此值以ISO8601格式表示，在下面的示例中配置为等待最多15分钟。'
- en: 'Then, deploy your changes using the `aws cloudformation deploy` command as
    demonstrated in the following example, your Auto Scaling group will now have the
    update policy applied:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`aws cloudformation deploy`命令部署您的更改，如下例所示，您的自动扩展组现在将应用更新策略：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configuring a CloudFormation Auto Scaling Group Update Policy
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 配置CloudFormation自动扩展组更新策略
- en: 'At this point, you can now update your stack to use the new AMI you created
    in the very first example. This requires you to first update the `dev.cfg` file
    at the root of the todobackend-aws repository:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您现在可以更新堆栈以使用您在第一个示例中创建的新AMI。这需要您首先更新todobackend-aws存储库根目录下的`dev.cfg`文件：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Updating the ECS AMI
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 更新ECS AMI
- en: Then, deploy the change using the same `aws cloudformation deploy` command.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用相同的`aws cloudformation deploy`命令部署更改。
- en: 'While the deployment is running, if you open the AWS console, browse to the
    CloudFormation dashboard, and select the todobackend stack **Events** tab, you
    should be able to see how CloudFormation performs rolling updates:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署运行时，如果您打开AWS控制台，浏览到CloudFormation仪表板，并选择todobackend堆栈**事件**选项卡，您应该能够看到CloudFormation如何执行滚动更新：
- en: '![](assets/8bcbaeaf-b39e-44b4-89e1-f01e76b5a885.png)CloudFormation Rolling
    Updates'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation滚动更新
- en: In the preceding screenshot, you can see that CloudFormation first temporarily
    increases the size of the Auto Scaling group, given it needs to keep at least
    one instance in service at all times. Once the new instance signals SUCCESS to
    CloudFormation, the old instance in the Auto Scaling group is terminated and the
    rolling update is complete.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到CloudFormation首先临时增加了自动扩展组的大小，因为它需要始终保持至少一个实例在服务中。一旦新实例向CloudFormation发出SUCCESS信号，自动扩展组中的旧实例将被终止，滚动更新就完成了。
- en: At this point, you might be feeling pretty happy—with just a small change to
    your CloudFormation configuration, you have been able to add rolling updates to
    your stack. There is just one problem though, that being when the old EC2 instance
    was terminated, it was terminated *immediately*. This actually causes a disruption
    to the service, which you can see an indication of if you navigate to the CloudWatch
    console, select Metrics, in the All metrics tab select ECS **|** ClusterName,
    and then select the MemoryReservation metric for the cluster named todobackend-cluster.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能会感到非常高兴——只需对CloudFormation配置进行小小的更改，您就能够为堆栈添加滚动更新。不过，有一个问题，就是旧的EC2实例被立即终止。这实际上会导致服务中断，如果您导航到CloudWatch控制台，选择指标，在所有指标选项卡中选择ECS
    **|** ClusterName，然后选择名为todobackend-cluster的集群的MemoryReservation指标，您可以看到这种迹象。
- en: 'The following screenshot shows this screen once you have clicked on the Graphed
    metrics tab and changed the Statistic column to Minimum and Period to 1 Minute:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在您单击图形化指标选项卡并将统计列更改为最小值，周期更改为1分钟后，将显示以下屏幕截图：
- en: '![](assets/a53807f6-88a9-49e8-938f-b488d5040709.png)ECS Memory Reservation'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ECS内存预留
- en: If you look back at the timeline in the earlier screenshot, you can see that
    at 21:17:33 the old ECS container instance is terminated, and in the preceding
    screenshot, you can see a corresponding dip in the memory reservation of the cluster
    to 0% at 21:18 (09:18). This indicates that at this point in time, there were
    no actual containers running, given the percentage of cluster memory reserved
    was 0, illustrating there was a small, albeit brief, outage whilst ECS attempted
    to recover the todobackend service to the new ECS container instance after the
    old instance was abruptly terminated.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回顾之前的屏幕截图中的时间线，您会看到在21:17:33旧的ECS容器实例被终止，在之前的屏幕截图中，您可以看到集群内存预留在21:18（09:18）降至0%。这表明在这个时间点上，没有实际的容器在运行，因为集群内存保留的百分比为0，这表明在旧实例突然终止后，ECS尝试将todobackend服务恢复到新的ECS容器实例时出现了短暂的中断。
- en: Because the minimum CloudWatch metrics resolution is 1 minute, it is possible
    that you may not observe the dip to 0% in the previous figure if ECS is able to
    recover the ECS service within a minute, but rest assured there is an outage to
    your application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因为最小的CloudWatch指标分辨率是1分钟，如果ECS能够在一分钟内恢复ECS服务，您可能无法观察到在前一个图表中降至0%的情况，但请放心，您的应用程序确实会中断。
- en: Clearly this is not ideal and as we discussed earlier, we now need to introduce
    EC2 Auto Scaling life cycle hooks to resolve this situation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这并不理想，正如我们之前讨论的那样，我们现在需要引入EC2自动扩展生命周期挂钩来解决这种情况。
- en: Creating EC2 Auto Scaling life cycle hooks
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建EC2自动扩展生命周期挂钩
- en: 'To fix the problem of EC2 instance termination affecting our ECS services,
    we now need to create an EC2 Auto Scaling life cycle hook that will notify us
    that an EC2 instance is about to be terminated. Referring back to the first diagram,
    this requires several resources:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决EC2实例终止影响我们的ECS服务的问题，我们现在需要创建一个EC2自动扩展生命周期挂钩，它将通知我们EC2实例即将被终止。回顾第一个图表，这需要几个资源：
- en: The actual life cycle hook
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际的生命周期挂钩
- en: A life cycle hook role that grants the EC2 Auto Scaling group permission to
    publish life cycle hook notifications to an SNS topic
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授予EC2自动扩展组权限向SNS主题发布生命周期挂钩通知的生命周期挂钩角色
- en: An SNS topic where life cycle hooks can be published and subscribed to
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SNS主题，生命周期挂钩可以发布和订阅
- en: 'The following example demonstrates creating the life cycle hook, life cycle
    hook role, and SNS topic:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了创建生命周期挂钩、生命周期挂钩角色和SNS主题：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating Life Cycle Hook Resources in CloudFormation
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在CloudFormation中创建生命周期挂钩资源
- en: In the preceding example, the `LifecycleHook` resource creates a new hook, which
    is linked to the `ApplicationAutoscaling` resource using the `AutoScalingGroupName`
    property, and is triggered by EC2 instances within the Auto Scaling group that
    are about to be terminated, as specified by the value `autoscaling:EC2_INSTANCE_TERMINATING`
    configured for the `LifecycleTransition` property. The hook is configured to send
    a notification to a new SNS topic resource called `LifecycleHookTopic`, with the
    linked `LifecycleHookRole` IAM role granting the `autoscaling.amazonaws.com` service
    (as specified in the `AssumeRolePolicyDocument` section of the role) permissions
    to publish life cycle hook events to this topic. The `DefaultResult` property
    specifies the default result that should be created if the `HeartbeatTimeout`
    period is reached and no response has been received for the hook, which in this
    example is to send a `CONTINUE` message that instructs the Auto Scaling service
    to continue processing any other life cycle hooks that may be registered. The
    other option for the `DefaultResult` property is to send an `ABANDON` message,
    which still instructs the Auto Scaling service to continue with instance termination,
    but abandons processing any other life cycle hooks that may be configured.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`LifecycleHook`资源创建了一个新的钩子，该钩子与`ApplicationAutoscaling`资源相关联，使用`AutoScalingGroupName`属性，并由EC2实例触发，这些实例即将被终止，如`LifecycleTransition`属性配置的`autoscaling:EC2_INSTANCE_TERMINATING`值所指定的那样。该钩子配置为向名为`LifecycleHookTopic`的新SNS主题资源发送通知，链接的`LifecycleHookRole`
    IAM角色授予`autoscaling.amazonaws.com`服务（如角色的`AssumeRolePolicyDocument`部分中所指定的）权限，以将生命周期钩子事件发布到此主题。`DefaultResult`属性指定了在`HeartbeatTimeout`期间到达并且没有收到钩子响应时应创建的默认结果，例如，在本示例中，发送一个`CONTINUE`消息，指示Auto
    Scaling服务继续处理可能已注册的任何其他生命周期钩子。`DefaultResult`属性的另一个选项是发送一个`ABANDON`消息，这仍然指示Auto
    Scaling服务继续进行实例终止，但放弃处理可能配置的任何其他生命周期钩子。
- en: The final `LifecycleHookSubscription` resource creates a subscription to the
    `LifecycleHookTopic` SNS topic resource, subscribing a Lambda function resource
    called `LifecycleHookFunction` that we will create soon, meaning this function
    will be invoked anytime a message is published to the SNS topic.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`LifecycleHookSubscription`资源创建了对`LifecycleHookTopic` SNS主题资源的订阅，订阅了一个名为`LifecycleHookFunction`的Lambda函数资源，我们将很快创建，这意味着每当消息发布到SNS主题时，将调用此函数。
- en: Creating a Lambda function for consuming life cycle hooks
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用于消耗生命周期钩子的Lambda函数
- en: With the various life cycle hook resources in place, the final piece of the
    puzzle is to create a Lambda function and associated resources that will subscribe
    to the life cycle hook SNS topic you defined in the previous section and will
    ultimately perform ECS container instance draining before signalling that the
    life cycle hook action can continue.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有了各种生命周期钩子资源，谜题的最后一块是创建一个Lambda函数和相关资源，该函数将订阅您在上一节中定义的生命周期钩子SNS主题，并最终在发出信号表明生命周期钩子操作可以继续之前执行ECS容器实例排空。
- en: 'Let''s first focus on the Lambda function itself and the associated source
    code that it will need to execute:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先关注Lambda函数本身以及它将需要执行的相关源代码：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a Lambda Function to Process Life Cycle Hooks
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于处理生命周期钩子的Lambda函数
- en: The Lambda function is a little bit more involved than what we dealt with so
    far, but is still a relatively simple function that should be reasonably easy
    to follow if you have experience with Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数比我们迄今为止处理的要复杂一些，但如果您有Python经验，它仍然是一个相对简单的函数，应该相对容易理解。
- en: The function first defines the required libraries and looks for an environment
    variable called `ECS_CLUSTER`, which is required so that the function knows which
    ECS cluster the life cycle hook relates to, and this environment variable value
    is passed in via the `Environment` property on the Lambda function resource.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数首先定义所需的库，并查找名为`ECS_CLUSTER`的环境变量，这是必需的，以便函数知道生命周期挂钩与哪个ECS集群相关，并且通过Lambda函数资源的`Environment`属性传递此环境变量值。
- en: 'Next, the function declares three AWS clients:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，函数声明了三个AWS客户端：
- en: '`ecs`: Communicates with ECS to introspect ECS container instance information
    and drain the correct instance based upon the EC2 instance ID received in the
    life cycle hook.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ecs`：与ECS通信，以审查ECS容器实例信息并根据生命周期挂钩中接收的EC2实例ID排空正确的实例。'
- en: '`autoscaling`: Signals the EC2 Auto Scaling service when the life cycle hook
    can continue.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoscaling`：在生命周期挂钩可以继续时，向EC2自动缩放服务发出信号。'
- en: '`sns`: Republishes the life cycle hook event if the Lambda function is about
    to reach the maximum five minute execution timeout and the ECS container instance
    has not drained yet. This will reinvoke the Lambda function again, until the ECS
    container instance has completely drained.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sns`：如果Lambda函数即将达到最长五分钟的执行超时，并且ECS容器实例尚未排空，则重新发布生命周期挂钩事件。这将再次调用Lambda函数，直到ECS容器实例完全排空。'
- en: The `handler` method defines the entry point for the Lambda function, and first extracts
    out a number of variables that capture information from the received SNS message including
    the life cycle hook event type ( `transition` variable), hook name (`hook` variable),
    Auto Scaling group name (`group` variable), and EC2 instance ID (`ec2_instance` variable).
    A check is then made immediately to verify the life cycle hook event type does
    relate to an EC2 instance terminating event, and if the  event type (captured
    in the transition variable) does not equal the value `autoscaling:EC2_INSTANCE_TERMINATING`,
    then the function returns immediately, effectively ignoring the event.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`handler`方法定义了Lambda函数的入口点，并首先提取出许多变量，这些变量从接收到的SNS消息中捕获信息，包括生命周期挂钩事件类型（`transition`变量）、挂钩名称（`hook`变量）、Auto
    Scaling组名称（`group`变量）和EC2实例ID（`ec2_instance`变量）。然后立即进行检查，以验证生命周期挂钩事件类型是否与EC2实例终止事件相关，如果事件类型（在transition变量中捕获）不等于值`autoscaling:EC2_INSTANCE_TERMINATING`，则函数立即返回，有效地忽略该事件。'
- en: Assuming the event does relate to an EC2 instance terminating, the handler next
    queries the ECS service via the `ecs` client, first describing all instances in
    the configured cluster and then attempting to locate the ECS container instance
    that matches the EC2 instance ID captured from the life cycle hook event. If the
    instance cannot be found, then a `ValueError` exception is raised, which will
    be caught by the catch statement, resulting in an error being logged and the function
    completing the life cycle hook with a result of `ABANDON`. If the instance is
    found, the handler proceeds to drain the instance by calling the `update_container_instances_state()`
    method on the `ecs` client, which sets the status of the instance to `DRAINING`,
    meaning ECS will no longer schedule any new tasks to the instance and attempt
    to migrate existing tasks to other instances in the cluster. At this point, the
    handler needs to wait for all current ECS tasks running on the instance to be
    drained, and this can be achieved by polling the ECS task count in a `while` loop
    every five seconds until the task count reduces to zero. You could attempt to
    do this indefinitely, however Lambda has a maximum five minute execution time
    limit at the time of writing, so the `while` loop uses the `context.get_remaining_time_in_millis()`
    method to check if the Lambda execution timeout is about to be reached.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设事件确实与EC2实例的终止有关，处理程序接下来通过`ecs`客户端查询ECS服务，首先描述配置集群中的所有实例，然后尝试定位与生命周期挂钩事件捕获的EC2实例ID匹配的ECS容器实例。如果找不到实例，则会引发`ValueError`异常，该异常将被catch语句捕获，导致记录错误并使用`ABANDON`的结果完成生命周期挂钩。如果找到实例，处理程序将继续通过在`ecs`客户端上调用`update_container_instances_state()`方法来排水实例，该方法将实例的状态设置为`DRAINING`，这意味着ECS将不再将任何新任务调度到该实例，并尝试将现有任务迁移到集群中的其他实例。在这一点上，处理程序需要等待在实例上运行的所有当前ECS任务被排水，这可以通过每五秒轮询一次ECS任务计数的`while`循环来实现，直到任务计数减少到零。您可以无限期地尝试这样做，但是在撰写本文时，Lambda具有最长五分钟的执行时间限制，因此`while`循环使用`context.get_remaining_time_in_millis()`方法来检查Lambda执行超时是否即将到达。
- en: The `context` object is an object that is passed by the Lambda runtime environment
    to your handler method and includes information about the Lambda environment including
    memory, CPU, and remaining execution time.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`context`对象是由Lambda运行时环境传递给处理程序方法的对象，其中包括有关Lambda环境的信息，包括内存、CPU和剩余执行时间。'
- en: In the event the task count reduces to zero, you can safely terminate the ECS
    container instance, and the autoscaling client completes the life cycle hook with
    a result of `CONTINUE`, meaning the EC2 Auto Scaling service will continue processing
    any other registered hooks and terminate the instance. If the task count does
    not reduce to zero before the function is about to exit, then the function simply
    republishes the original life cycle hook notification, which will reinvoke the
    function from the start again. Because all of the actions in the function are
    idempotent, that is updating the status of an ECS container instance that is already
    draining to DRAINING results in the same draining state, this approach is safe
    and a very simple and elegant approach to overcoming the execution timeout limits
    of Lambda.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任务计数减少到零，您可以安全地终止ECS容器实例，自动缩放客户端将使用`CONTINUE`的结果完成生命周期挂钩，这意味着EC2自动缩放服务将继续处理任何其他注册的挂钩并终止实例。如果任务计数在函数即将退出之前没有减少到零，则函数只是重新发布原始的生命周期挂钩通知，这将重新启动函数。由于函数中的所有操作都是幂等的，即更新已经处于排水状态的ECS容器实例的状态为DRAINING会导致相同的排水状态，因此这种方法是安全的，也是克服Lambda执行超时限制的一种非常简单而优雅的方法。
- en: Configuring permissions for the life cycle hook Lambda function
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生命周期挂钩Lambda函数配置权限
- en: 'The Lambda function is now in place and the final configuration task is to
    add the required permissions for the various API calls and operations the Lambda
    function performs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数现在已经就位，最后的配置任务是为Lambda函数执行的各种API调用和操作添加所需的权限：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Configuring Permissions for a Life Cycle Hook Lambda Function
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为生命周期挂钩Lambda函数配置权限
- en: In the preceding example, a resource called `LifecycleHookPermission` of type `AWS::Lambda::Permission`
    is required, which grants permission for the SNS service (as referenced by the
    `Principal` property) to invoke the Lambda function (as referenced by the `LambdaFunction`
    property) for notifications published to the SNS topic (as referenced by the `SourceArn`
    property). This approach to configuring permissions is typically required whenever
    you need to grant another AWS service the ability to invoke a Lambda function
    on your behalf, although there are exceptions to this rule (such as the CloudFormation
    custom resource use case, where CloudFormation implicitly has such a permission).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，需要一个名为`LifecycleHookPermission`的资源，类型为`AWS::Lambda::Permission`，它授予SNS服务（由`Principal`属性引用）调用Lambda函数（由`LambdaFunction`属性引用）的权限，用于SNS主题发布的通知（由`SourceArn`属性引用）。每当您需要授予另一个AWS服务代表您调用Lambda函数的能力时，通常需要采用这种配置权限的方法，尽管也有例外情况（例如CloudFormation自定义资源用例，其中CloudFormation隐含具有这样的权限）。
- en: 'You also create an IAM role for the Lambda function called `LambdaFunctionRole`,
    which grants the function the ability to execute the various tasks and operations
    it needs to perform including:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要为Lambda函数创建一个名为`LambdaFunctionRole`的IAM角色，该角色授予函数执行各种任务和操作的能力，包括：
- en: Listing, describing, and updating ECS container instances within the application
    cluster
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出、描述和更新应用程序集群中的ECS容器实例
- en: Republishing the life cycle hook event to SNS if the Lambda function is about
    to timeout
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Lambda函数即将超时，则重新发布生命周期挂钩事件到SNS
- en: Completing the life cycle action once the ECS container instance has drained
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在ECS容器实例排空后完成生命周期操作
- en: Writing logs to CloudWatch logs
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志写入CloudWatch日志
- en: Deploying and testing Auto Scaling life cycle hooks
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和测试自动扩展生命周期挂钩
- en: You can now deploy your complete Auto Scaling life cycle hooks solution using
    the `aws cloudformation deploy` command as demonstrated earlier in this chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用`aws cloudformation deploy`命令部署完整的自动扩展生命周期挂钩解决方案，就像本章前面演示的那样。
- en: 'Once deployment is complete, to test life cycle management is working as expected,
    a simple change you can perform to force replacement of the current ECS container
    instance in your ECS cluster is to revert the AMI change you made earlier in this
    chapter:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，为了测试生命周期管理是否按预期工作，您可以执行一个简单的更改，强制替换ECS集群中当前的ECS容器实例，即恢复您在本章前面所做的AMI更改：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Reverting the ECS AMI
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复ECS AMI
- en: 'Once you now deploy this change, again using the  `aws cloudformation deploy` command
    as demonstrated in earlier example, next switch to the CloudFormation console
    and when the event to terminate the existing EC2 instance is raised, quickly navigate
    to the ECS dashboard and select your ECS cluster. On the container instances tab,
    you should see the status of one of your ECS container instances is draining as
    demonstrated in the following screenshot, and once all tasks have drained from
    this instance, the life cycle hook function will signal the EC2 Auto Scaling service
    to proceed with terminating the instance:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦您部署了这个更改，再次使用`aws cloudformation deploy`命令，就像之前的示例演示的那样，接下来切换到CloudFormation控制台，当事件引发终止现有的EC2实例时，快速导航到ECS仪表板并选择您的ECS集群。在容器实例选项卡上，您应该看到您的ECS容器实例中的一个状态正在排空，如下面的屏幕截图所示，一旦所有任务从这个实例中排空，生命周期挂钩函数将向EC2自动扩展服务发出信号，以继续终止实例：
- en: '![](assets/48e994f8-8700-4055-85be-dce072cd5887.png)ECS Container Instance
    Draining'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/48e994f8-8700-4055-85be-dce072cd5887.png)ECS容器实例排空'
- en: 'If you repeat the steps taken in the previous screenshots to view cluster memory
    reservation during the period the ECS container instances are drained and terminated,
    you should see a graph that looks something like as follows in the example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您重复执行前面屏幕截图中的步骤，以查看ECS容器实例在排空和终止期间的集群内存保留量，您应该会看到一个类似下面示例中的图表：
- en: '![](assets/6ce7187e-5fa4-4457-bea3-ce1220c04bb1.png)Cluster Memory Reservation
    during ECS Container Instance Draining'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6ce7187e-5fa4-4457-bea3-ce1220c04bb1.png)ECS容器实例排空期间的集群内存保留'
- en: In the preceding screenshots, notice that the cluster memory reservation does
    not drop to 0% at any time during the rolling update. The memory utilization percentage
    does change due to their being two instances in the cluster during the rolling
    upgrade, but the ability for us to drain ECS container instances ensures uninterrupted
    service for your applications running on your clusters.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，请注意在滚动更新期间，集群内存保留量从未降至0％。由于在滚动升级期间集群中有两个实例，内存利用率百分比确实会发生变化，但我们排空ECS容器实例的能力确保了在集群上运行的应用程序的不间断服务。
- en: 'As a final check, you can also navigate to the CloudWatch logs group for the
    life cycle hooks function, which is shown in the following screenshot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的检查，您还可以导航到生命周期挂钩函数的CloudWatch日志组，如下面的屏幕截图所示：
- en: '![](assets/5a4701c4-7ce4-4900-9301-222be446dc52.png)Life Cycle Hooks Function
    Logs'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5a4701c4-7ce4-4900-9301-222be446dc52.png)生命周期挂钩函数日志'
- en: In the preceding screenshot, you can see that the function sleeps periodically
    whilst the container instance is draining, and after approximately two minutes
    in this case, all tasks drain and the function sends a `CONTINUE` signal for the
    hook to the Auto Scaling service.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到该函数在容器实例排空时定期休眠，大约两分钟后，在这种情况下，所有任务排空并且函数向自动扩展服务发送`CONTINUE`信号以继续挂钩。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created a solution for managing the life cycle of your
    ECS container instances and ensuring the applications and services running on
    your ECS clusters are not impacted any time you need to terminate and replace
    an ECS container instance within your ECS cluster.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您创建了一个解决方案，用于管理ECS容器实例的生命周期，并确保在需要终止和替换ECS集群中的ECS容器实例时，运行在ECS集群上的应用程序和服务不会受到影响。
- en: You learned how to configure rolling updates for your EC2 Auto Scaling groups,
    by leveraging CloudFormation update policies that enable you to control how new
    instances can be added to your Auto Scaling groups in a rolling fashion.  You
    saw that this feature works well at an Auto Scaling and EC2 instance level, however
    you found that the abrupt termination of existing ECS container instances in your
    cluster causes outages for your applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您学习了如何通过利用CloudFormation更新策略来配置EC2自动扩展组的滚动更新，从而控制新实例如何以滚动方式添加到您的自动扩展组。您发现这个功能在自动扩展和EC2实例级别上运行良好，但是您发现在集群中突然终止现有ECS容器实例会导致应用程序中断。
- en: To address this challenge, you created an EC2 life cycle hook registered for
    `EC2_INSTANCE_TERMINATING` events and configured this hook to publish notifications
    to an SNS topic, which in turn triggers a Lambda function. This function is responsible
    for locating the ECS container instance associated with the EC2 instance about
    to be terminated, draining the container instance, and then waiting until the
    ECS task count reaches 0, indicating all ECS tasks on the instance have been terminated
    and replaced. In the event the ECS container instance takes longer than the five
    minute maximum execution time of a Lambda function, you learned that you can simply
    republish the SNS event that contains the life cycle hook information, which in
    turn will trigger a new invocation of the function, and this process can continue
    indefinitely until the ECS task count on the instance reaches 0.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个挑战，您创建了一个注册为“EC2_INSTANCE_TERMINATING”事件的EC2生命周期挂钩，并配置此挂钩以将通知发布到SNS主题，然后触发一个Lambda函数。该函数负责定位与即将终止的EC2实例相关联的ECS容器实例，排空容器实例，然后等待直到ECS任务计数达到0，表示实例上的所有ECS任务都已终止并替换。如果ECS容器实例的执行时间超过Lambda函数的五分钟最大执行时间，您学会了可以简单地重新发布包含生命周期挂钩信息的SNS事件，这将触发函数的新调用，这个过程可以无限期地继续，直到实例上的ECS任务计数达到0。
- en: In the next chapter, you will learn how you can dynamically manage the capacity
    of your ECS clusters, which is critical to support the Auto Scaling requirements
    of your applications. This involves the ongoing adding and remove ECS container
    instances to your ECS cluster, so you can see that the ECS container instance
    life cycle mechanisms introduced in this chapter are critical for ensuring your
    applications are not affected by any Auto Scaling operations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何动态管理ECS集群的容量，这对支持应用程序的自动扩展要求至关重要。这涉及不断向您的ECS集群添加和删除ECS容器实例，因此您可以看到，本章介绍的ECS容器实例生命周期机制对确保您的应用程序不受任何自动扩展操作影响至关重要。
- en: Questions
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True/false: When you terminate an ECS container instance, the instance will
    automatically drain running ECS tasks to another instance in the cluster.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：当您终止ECS容器实例时，该实例将自动将运行的ECS任务排空到集群中的另一个实例。
- en: What are the types of EC2 Auto Scaling life cycle hooks you can receive?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以接收哪些类型的EC2自动扩展生命周期挂钩？
- en: What type of responses can you send once you have finished processing EC2 Auto
    Scaling life cycle hooks?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成处理EC2自动扩展生命周期挂钩，您可以发送哪些类型的响应？
- en: 'True/false: EC2 Auto Scaling life cycle hooks can publish events to AWS Kinesis.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真/假：EC2自动扩展生命周期挂钩可以向AWS Kinesis发布事件。
- en: You create a Lambda function that processes a life cycle hook and drains your
    ECS container instances.  You have noticed that sometimes this takes around 4
    – 5 minutes, but often takes 15 minutes.  What can you do to resolve this issue?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您创建了一个处理生命周期挂钩并排空ECS容器实例的Lambda函数。您注意到有时这需要大约4-5分钟，但通常需要15分钟。您可以采取什么措施来解决这个问题？
- en: What CloudFormation feature can you configure to enable rolling updates for
    Auto Scaling groups?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以配置哪个CloudFormation功能以启用自动扩展组的滚动更新？
- en: You want to perform rolling updates and ensure that you always have at least
    the current desired count of instances in service during the update. How would
    you achieve this?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您想要执行滚动更新，并确保在更新期间始终至少有当前所需数量的实例在服务中。您将如何实现这一点？
- en: When using CloudFormation to subscribe a Lambda function to an SNS topic, what
    type of resource do you need to create to ensure the SNS service has appropriate
    permissions to invoke the function?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用CloudFormation订阅Lambda函数到SNS主题时，您需要创建什么类型的资源以确保SNS服务具有适当的权限来调用函数？
- en: Further reading
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can check the following links for more information about the topics covered
    in this chapter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看以下链接以获取有关本章涵盖的主题的更多信息：
- en: CloudFormation UpdatePolicy attribute: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation UpdatePolicy属性：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html)
- en: Amazon EC2 Auto Scaling life cycle hooks: [https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html)
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon EC2自动扩展生命周期挂钩：[https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html)
- en: CloudFormation life cycle hook resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html)
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation生命周期挂钩资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html)
- en: CloudFormation SNS topic resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation SNS主题资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html)
- en: CloudFormation SNS subscription resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation SNS订阅资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html)
- en: CloudFormation Lambda permission resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation Lambda权限资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)
- en: CloudFormation ECS task definition resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation ECS任务定义资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)
- en: CloudFormation ECS service resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation ECS服务资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
- en: CloudFormation Lambda function resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation Lambda函数资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html)
- en: CloudFormation Lambda function code: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation Lambda函数代码：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html)
- en: CloudFormation custom resource documentation: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation自定义资源文档：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html)
- en: CloudFormation custom resource reference: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref.html)
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation自定义资源参考：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref.html)
