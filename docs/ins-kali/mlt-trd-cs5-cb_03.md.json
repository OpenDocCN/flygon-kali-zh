["```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    private delegate string RunOnThreadPool(out int threadId);\n\n    private static void Callback(IAsyncResultar)\n    {\n      Console.WriteLine(\"Starting a callback...\");\n      Console.WriteLine(\"State passed to a callback: {0}\",ar.AsyncState);\n      Console.WriteLine(\"Is thread pool thread: {0}\",Thread.CurrentThread.IsThreadPoolThread);\n      Console.WriteLine(\"Thread pool worker thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n    }\n\n    private static string Test(out intthreadId)\n    {\n      Console.WriteLine(\"Starting...\");\n      Console.WriteLine(\"Is thread pool thread: {0}\",Thread.CurrentThread.IsThreadPoolThread);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      threadId = Thread.CurrentThread.ManagedThreadId;\n      return string.Format(\"Thread pool worker thread id was:{0}\", threadId);\n    }\n    ```", "```cs\n    int threadId = 0;\n\n    RunOnThreadPool poolDelegate = Test;\n\n    var t = new Thread(() => Test(out threadId));\n    t.Start();\n    t.Join();\n\n    Console.WriteLine(\"Thread id: {0}\", threadId);\n\n    IAsyncResult r = poolDelegate.BeginInvoke(out threadId,Callback, \"a delegate asynchronous call\");\n    r.AsyncWaitHandle.WaitOne();\n\n    string result = poolDelegate.EndInvoke(out threadId, r);\n\n    Console.WriteLine(\"Thread pool worker thread id: {0}\",threadId);\n    Console.WriteLine(result);\n\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    ```", "```cs\n    using System;\n    usingSystem.Threading;\n    ```", "```cs\n    private static void AsyncOperation(object state)\n    {\n      Console.WriteLine(\"Operation state: {0}\",state ?? \"(null)\");\n      Console.WriteLine(\"Worker thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n    }\n    ```", "```cs\n    const int x = 1;\n    const int y = 2;\n    const string lambdaState = \"lambda state 2\";\n\n    ThreadPool.QueueUserWorkItem(AsyncOperation);\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n\n    ThreadPool.QueueUserWorkItem(AsyncOperation,\"async state\");\n    Thread.Sleep(TimeSpan.FromSeconds(1));\n\n    ThreadPool.QueueUserWorkItem( state => {\n      Console.WriteLine(\"Operation state: {0}\", state);\n      Console.WriteLine(\"Worker thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n    }, \"lambda state\");\n\n    ThreadPool.QueueUserWorkItem( _ => {\n      Console.WriteLine(\"Operation state: {0}, {1}\", x+y,lambdaState);\n      Console.WriteLine(\"Worker thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n    }, \"lambda state\");\n\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Threading;\n    ```", "```cs\n    static void UseThreads(int numberOfOperations)\n    {\n      using (var countdown = new CountdownEvent(numberOfOperations)) {\n\n        Console.WriteLine(\"Scheduling work by creatingthreads\");\n        for (int i=0; i<numberOfOperations; i++) {\n          var thread = new Thread(() => {\n            Console.Write(\"{0},\", Thread.CurrentThread.ManagedThreadId);\n            Thread.Sleep(TimeSpan.FromSeconds(0.1));\n            countdown.Signal();\n          });\n          thread.Start();\n        }\n        countdown.Wait();\n        Console.WriteLine();\n      }\n    }\n\n    static void UseThreadPool(int numberOfOperations)\n    {\n      using (var countdown = new CountdownEvent(numberOfOperations)) {\n\n        Console.WriteLine(\"Starting work on a threadpool\");\n        for (int i=0; i<numberOfOperations; i++) {\n          ThreadPool.QueueUserWorkItem( _ => {\n            Console.Write(\"{0},\", Thread.CurrentThread.ManagedThreadId);\n            Thread.Sleep(TimeSpan.FromSeconds(0.1));\n            countdown.Signal();\n          });\n        }\n        countdown.Wait();\n        Console.WriteLine();\n      }\n    }\n    ```", "```cs\n    const int numberOfOperations = 500;\n    var sw = new Stopwatch();\n    sw.Start();\n    UseThreads(numberOfOperations);\n    sw.Stop();\n    Console.WriteLine(\"Execution time using threads: {0}\",sw.ElapsedMilliseconds);\n\n    sw.Reset();\n    sw.Start();\n    UseThreadPool(numberOfOperations);\n    sw.Stop();\n    Console.WriteLine(\"Execution time using threads: {0}\",sw.ElapsedMilliseconds);\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void AsyncOperation1(CancellationToken token) {\n      Console.WriteLine(\"Starting the first task\");\n      for (int i=0; i<5; i++) {\n        if (token.IsCancellationRequested) {\n          Console.WriteLine(\"The first task has beencanceled.\");\n          return;\n        }\n        Thread.Sleep(TimeSpan.FromSeconds(1));\n      }\n      Console.WriteLine(\"The first task has completedsuccesfully\");\n    }\n\n    static void AsyncOperation2(CancellationToken token) {\n      try {\n        Console.WriteLine(\"Starting the second task\");\n\n        for (int i=0; i<5; i++) {\n          token.ThrowIfCancellationRequested();\n          Thread.Sleep(TimeSpan.FromSeconds(1));\n        }\n        Console.WriteLine(\"The second task has completedsuccessfully\");\n      }\n      catch (OperationCanceledException) {\n        Console.WriteLine(\"The second task has beencanceled.\");\n      }\n    }\n\n    private static void AsyncOperation3(CancellationToken token) {\n\n      boolcancellationFlag = false;\n      token.Register(()=>cancellationFlag=true);\n      Console.WriteLine(\"Starting the third task\");\n      for (int i=0; i<5; i++) {\n        if (cancellationFlag) {\n          Console.WriteLine(\"The third task has beencanceled.\");\n          return;\n        }\n        Thread.Sleep(TimeSpan.FromSeconds(1));\n      }\n      Console.WriteLine(\"The third task has completedsuccesfully\");\n    }\n    ```", "```cs\n    using (var cts = new CancellationTokenSource()) {\n      CancellationToken token = cts.Token;\n      ThreadPool.QueueUserWorkItem(_ => AsyncOperation1(token));\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      cts.Cancel();\n    }\n\n    using (var cts = new CancellationTokenSource()) {\n      CancellationToken token = cts.Token;\n      ThreadPool.QueueUserWorkItem(_ => AsyncOperation2(token));\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      cts.Cancel();\n    }\n\n    using (var cts = new CancellationTokenSource()) {\n      CancellationToken token = cts.Token;\n      ThreadPool.QueueUserWorkItem(_ => AsyncOperation3(token));\n      Thread.Sleep(TimeSpan.FromSeconds(2));\n      cts.Cancel();\n    }\n\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static void RunOperations(TimeSpanworkerOperationTimeout) {\n      using (var evt = new ManualResetEvent(false))\n      using (var cts = new CancellationTokenSource()) {\n        Console.WriteLine(\"Registering timeout operations...\");\n        var worker = ThreadPool.RegisterWaitForSingleObject(evt, (state, isTimedOut) => WorkerOperationWait(cts,isTimedOut), null, workerOperationTimeout, true);\n\n        Console.WriteLine(\"Starting long runningoperation...\");\n\n        ThreadPool.QueueUserWorkItem(_ => WorkerOperation(cts.Token, evt));\n\n        Thread.Sleep(workerOperationTimeout.Add(TimeSpan.FromSeconds(2)));\n        worker.Unregister(evt);\n      }\n    }\n\n    static void WorkerOperation(CancellationToken token,ManualResetEventevt) {\n\n      for(int i=0; i<6; i++) {\n        if (token.IsCancellationRequested) {\n          return;\n        }\n        Thread.Sleep(TimeSpan.FromSeconds(1));\n      }\n      evt.Set();\n    }\n\n    static void WorkerOperationWait(CancellationTokenSource ctsbool isTimedOut) {\n\n      if (isTimedOut) {\n        cts.Cancel();\n        Console.WriteLine(\"Worker operation timed out and wascanceled.\");\n      }\n      else {\n        Console.WriteLine(\"Worker operation succeded.\");\n      }\n    }\n    ```", "```cs\n    RunOperations(TimeSpan.FromSeconds(5));\n    RunOperations(TimeSpan.FromSeconds(7));\n    ```", "```cs\n    using System;\n    using System.Threading;\n    ```", "```cs\n    static Timer _timer;\n\n    static void TimerOperation(DateTime start) {\n      TimeSpan elapsed = DateTime.Now - start;\n      Console.WriteLine(\"{0} seconds from {1}. Timer threadpool thread id: {2}\", elapsed.Seconds, start,\n        Thread.CurrentThread.ManagedThreadId);\n    }\n    ```", "```cs\n    Console.WriteLine(\"Press 'Enter' to stop the timer...\");\n    DateTime start = DateTime.Now;\n    _timer = new Timer(_ => TimerOperation(start), null,TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(2));\n\n    Thread.Sleep(TimeSpan.FromSeconds(6));\n\n    _timer.Change(TimeSpan.FromSeconds(1),TimeSpan.FromSeconds(4));\n\n    Console.ReadLine();\n\n    _timer.Dispose();\n    ```", "```cs\n    using System;\n    using System.ComponentModel;\n    using System.Threading;\n    ```", "```cs\n    static void Worker_DoWork(object sender, DoWorkEventArgs e) \n    {\n      Console.WriteLine(\"DoWork thread pool thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n      var bw = (BackgroundWorker) sender;\n      for (int i=1; i<=100; i++) {\n\n        if (bw.CancellationPending) {\n          e.Cancel = true;\n          return;\n        }\n\n        if (i%10 == 0) {\n          bw.ReportProgress(i);\n        }\n\n        Thread.Sleep(TimeSpan.FromSeconds(0.1));\n      }\n      e.Result = 42;\n    }\n\n    static void Worker_ProgressChanged(object sender,ProgressChangedEventArgs e){\n\n      Console.WriteLine(\"{0}% completed. Progress thread poolthread id: {1}\", e.ProgressPercentage, Thread.CurrentThread.ManagedThreadId);\n    }\n\n    static void Worker_Completed(object sender,RunWorkerCompletedEventArgs e) {\n\n      Console.WriteLine(\"Completed thread pool thread id: {0}\",Thread.CurrentThread.ManagedThreadId);\n      if (e.Error != null) {\n        Console.WriteLine(\"Exception {0} has occured.\",e.Error.Message);\n      }\n      else if (e.Cancelled) {\n        Console.WriteLine(\"Operation has been canceled.\");\n      }\n      else {\n        Console.WriteLine(\"The answer is: {0}\", e.Result);\n      }\n    }\n    ```", "```cs\n    var bw = new BackgroundWorker();\n    bw.WorkerReportsProgress = true;\n    bw.WorkerSupportsCancellation = true;\n\n    bw.DoWork += Worker_DoWork;\n    bw.ProgressChanged += Worker_ProgressChanged;\n    bw.RunWorkerCompleted += Worker_Completed;\n\n    bw.RunWorkerAsync();\n\n    Console.WriteLine(\"Press C to cancel work\");\n    do {\n      if (Console.ReadKey(true).KeyChar == 'C') {\n        bw.CancelAsync();\n      }\n\n    }\n    while(bw.IsBusy);\n    ```"]