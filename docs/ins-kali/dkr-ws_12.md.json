["```\ndocker stats <container_name|container_id>\n```", "```\nNAME                CONTAINER           CPU %\ndocker-stress       c8cf5ad9b6eb        400.43%\n```", "```\ndocker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\"\n```", "```\nNAME                CONTAINER           CPU %\n```", "```\ndocker run --cpus 2 <docker-image>\n```", "```\ndocker run --cpushares 256 <docker-image>\n```", "```\n    FROM ubuntu\n    RUN apt-get update && apt-get install stress\n    CMD stress $var\n    ```", "```\n    docker build -t docker-stress .\n    ```", "```\n    docker rm -f $(docker -a -q)\n    ```", "```\n    docker run --rm -it -e var=\"--cpu 4 --timeout 20\" docker-stress\n    ```", "```\n    stress: info: [6] dispatching hogs: 4 cpu, 0 io, 0 vm, 0 hdd\n    stress: info: [6] successful run completed in 20s\n    ```", "```\n    docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\"\n    ```", "```\n    NAME                CONTAINER           CPU %\n    ```", "```\n    docker run --rm -it -e var=\"--cpu 4 --timeout 20\" --name docker-stress docker-stress\n    ```", "```\n    NAME                CONTAINER           CPU %\n    docker-stress       c8cf5ad9b6eb        400.43%\n    ```", "```\n    docker run --rm -it -e var=\"--cpu 8 --timeout 20\" --name docker-stress docker-stress\n    ```", "```\n    NAME                CONTAINER           CPU %\n    docker-stress       8946da6ffa90        599.44%\n    ```", "```\n    docker run --rm -it -e var=\"--cpu 8 --timeout 20\" --cpus 2 --name docker-stress docker-stress\n    ```", "```\n    NAME                CONTAINER           CPU %\n    docker-stress       79b32c67cbe3        208.91%\n    ```", "```\n    docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.CPUPerc}}\"\n    ```", "```\n    docker run --rm -dit -e var=\"--cpu 8 --timeout 60\" --cpu-shares 512 --name docker-stress1 docker-stress\n    ```", "```\n    5f617e5abebabcbc4250380b2591c692a30b3daf481b6c8d7ab8a0d1840d395f\n    ```", "```\n    docker run --rm -dit -e var=\"--cpu 8 --timeout 30\" --name docker-stress2 docker-stress2\n    ```", "```\n    83712c28866dd289937a9c5fe4ea6c48a6863a7930ff663f3c251145e2fbb97a\n    ```", "```\n    NAME                CONTAINER           CPU %\n    docker-stress1      5f617e5abeba        190.25%\n    docker-stress2      83712c28866d        401.49%\n    ```", "```\n    NAME                CONTAINER           CPU %\n    stoic_keldysh       5f617e5abeba        598.66%\n    ```", "```\ndocker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.MemPerc}}\\t{{.MemUsage}}\"\n```", "```\nNAME         CONTAINER          MEM %         MEM USAGE / LIMIT\n```", "```\ndocker run --memory 512MB <docker-image>\n```", "```\ndocker run --memory 512MB --memory-swap 1024MB <docker-image>\n```", "```\ndocker run --memory 512MB --oom-kill-disable <docker-image>\n```", "```\n    docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.MemPerc}}\\t{{.MemUsage}}\"\n    ```", "```\n    NAME        CONTAINER       MEM %         MEM USAGE / LIMIT\n    ```", "```\n    docker run --rm -it -e var=\"--vm 2 --timeout 20\" --name docker-stress docker-stress\n    ```", "```\n    NAME            CONTAINER      MEM %      MEM USAGE / LIMIT\n    docker-stress   b8af08e4d79d   20.89%     415.4MiB / 1.943GiB\n    ```", "```\n    docker run --rm -it -e var=\"--vm 2 --vm-bytes 128MB --timeout 20\" --name stocker-stress docker-stress\n    ```", "```\n    NAME            CONTAINER      MEM %    MEM USAGE / LIMIT\n    docker-stress   ad7630ed97b0   0.04%    904KiB / 1.943GiB\n    ```", "```\n    docker run --rm -it -e var=\"--vm 2 --timeout 20\" --memory 512MB --name docker-stress docker-stress\n    ```", "```\n    NAME            CONTAINER      MEM %     MEM USAGE / LIMIT\n    docker-stress   bd84cf27e480   88.11%    451.1MiB / 512MiB\n    ```", "```\n    docker run --rm -dit -e var=\"--vm 6 --timeout 60\" --memory 512MB --name docker-stress1 docker-stress\n    ca05e244d03009531a6a67045a5b1edbef09778737cab2aec7fa92eeaaa0c487\n    docker run --rm -dit -e var=\"--vm 6 --timeout 20\" --name docker-stress2 docker-stress\n    6d9cbb966b776bb162a47f5e5ff3d88daee9b0304daa668fca5ff7ae1ee887ea\n    ```", "```\n    NAME             CONTAINER       MEM %    MEM USAGE / LIMIT\n    docker-stress1   ca05e244d030    37.10%   190MiB / 512MiB\n    docker-stress2   6d9cbb966b77    31.03%   617.3MiB / 1.943GiB\n    ```", "```\n    NAME             CONTAINER      MEM %    MEM USAGE / LIMIT\n    docker-stress1   ca05e244d030   16.17%   82.77MiB / 512MiB\n    ```", "```\ndocker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.BlockIO}}\"\n```", "```\nNAME                CONTAINER           BLOCK I/O\n```", "```\ndocker run --blkio-weight <value> <docker-image>\n```", "```\ndocker run --device-write-bps <device>:<limit> <docker-image>\n```", "```\ndocker run --device-read-bps <device>:<limit> <docker-image>\n```", "```\n    docker stats --format \"table {{.Name}}\\t{{.Container}}\\t{{.BlockIO}}\" \n    ```", "```\n    docker run -it --rm --name docker-stress docker-stress /bin/bash\n    ```", "```\n    NAME                CONTAINER           BLOCK I/O\n    docker-stress       0b52a034f814        0B / 0B\n    ```", "```\n    time dd if=/dev/zero of=disk.out bs=1M count=10 oflag=direct\n    10+0 records in\n    10+0 records out\n    10485760 bytes (10 MB, 10 MiB) copied, 0.0087094 s, 1.2 GB/s\n    real    0m0.010s\n    user    0m0.000s\n    sys     0m0.007s\n    ```", "```\n    NAME                CONTAINER           BLOCK I/O\n    docker-stress       0b52a034f814        0B / 10.5MB\n    ```", "```\n    docker run -it --rm --device-write-bps /dev/sda:1mb --name docker-stress docker-stress /bin/bash\n    ```", "```\n    time dd if=/dev/zero of=test.out bs=1M count=10 oflag=direct\n    ```", "```\n    10+0 records in\n    10+0 records out\n    10485760 bytes (10 MB, 10 MiB) copied, 10.0043 s, 1.0 MB/s\n    real    0m10.006s\n    user    0m0.000s\n    sys     0m0.004s\n    ```", "```\n1\u00a0version: '3'\n2\u00a0services:\n3\u00a0\u00a0\u00a0app:\n4\u00a0\u00a0\u00a0\u00a0\u00a0container_name: docker-stress\n5\u00a0\u00a0\u00a0\u00a0\u00a0build: .\n6\u00a0\u00a0\u00a0\u00a0\u00a0environment:\n7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var: \"--cpu 2 --vm 6 --timeout 20\"\n8\u00a0\u00a0\u00a0\u00a0\u00a0deploy:\n9\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n10\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0limits:\n11\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cpus: '2'\n12\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memory: 256M\n```", "```\nLABEL maintainer=\"myemailaddress@emaildomain.com\"\n```", "```\ndocker run -e var=\"<variable_name>\" <image_name>\n```", "```\n1\u00a0FROM ubuntu\n2\u00a0RUN apt-get update && apt-get install stress\n3\u00a0CMD [\"sh\",\"/tmp/stress_test.sh\"]\n```", "```\n1\u00a0#!/bin/bash\n2\u00a0\n3\u00a0/usr/bin/stress --cpu 8 --timeout 20 --vm 6 --timeout 60\n```", "```\ndocker run --rm -it -v ${PWD}/stress_test.sh:/tmp/stress_test.sh docker-stress\n```", "```\ndocker pull hadolint/hadolint\n```", "```\ndocker run hadolint/hadolint < Dockerfile\n```", "```\ndocker run hadolint/hadolint hadolint --ignore <hadolint_rule_id> - < Dockerfile\n```", "```\ndocker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint < Dockerfile\n```", "```\n    docker pull hadolint/hadolint\n    ```", "```\n    docker run --rm -i hadolint/hadolint < Dockerfile\n    ```", "```\n    /dev/stdin:1 DL3006 Always tag the version of an image explicitly\n    /dev/stdin:2 DL3008 Pin versions in apt get install. Instead of \n    'apt-get install <package>' use 'apt-get install \n    <package>=<version>'\n    /dev/stdin:2 DL3009 Delete the apt-get lists after installing \n    something\n    /dev/stdin:2 DL3015 Avoid additional packages by specifying \n    '--no-install-recommends'\n    /dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input \n    'apt-get -y install <package>'\n    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD \n    and ENTRYPOINT arguments\n    ```", "```\n    docker run --rm -i hadolint/hadolint hadolint --ignore DL3008 - < Dockerfile\n    ```", "```\n    /dev/stdin:1 DL3006 Always tag the version of an image explicitly\n    /dev/stdin:2 DL3009 Delete the apt-get lists after installing \n    something\n    /dev/stdin:2 DL3015 Avoid additional packages by specifying \n    '--no-install-recommends'\n    /dev/stdin:2 DL3014 Use the '-y' switch to avoid manual input \n    'apt-get -y install <package>'\n    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD and \n    ENTRYPOINT arguments\n    ```", "```\n    touch .hadolint.yml\n    ```", "```\n    ignored:\n    \u00a0\u00a0- DL3006\n    \u00a0\u00a0- DL3008\n    \u00a0\u00a0- DL3009\n    \u00a0\u00a0- DL3015\n    \u00a0\u00a0- DL3014\n    trustedRegistries:\n    \u00a0\u00a0- docker.io\n    ```", "```\n    docker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint < Dockerfile\n    ```", "```\n    /dev/stdin:3 DL3025 Use arguments JSON notation for CMD and ENTRYPOINT arguments\n    ```", "```\n    docker run --rm -i -v ${PWD}/.hadolint.yml:/.hadolint.yaml hadolint/hadolint hadolint -f json - < Dockerfile | jq\n    ```", "```\n    [\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\"line\": 3,\n    \u00a0\u00a0\u00a0\u00a0\"code\": \"DL3025\",\n    \u00a0\u00a0\u00a0\u00a0\"message\": \"Use arguments JSON notation for CMD and ENTRYPOINT arguments\",\n    \u00a0\u00a0\u00a0\u00a0\"column\": 1,\n    \u00a0\u00a0\u00a0\u00a0\"file\": \"/dev/stdin\",\n    \u00a0\u00a0\u00a0\u00a0\"level\": \"warning\"\n    \u00a0\u00a0}\n    ]\n    ```", "```\n    https://www.fromlatest.io\n    ```", "```\n    FROM ubuntu\n    RUN apt-get update && apt-get install stress\n    CMD stress $var\n    ```", "```\n    git clone https://github.com/serviceprototypinglab/dcvalidator.git\n    ```", "```\n    cd dcvalidator\n    ```", "```\n    pip3 install -r server/requirments.txt\n    ```", "```\n    touch docker-compose.yml\n    ```", "```\n    version: '3'\n    services:\n    \u00a0\u00a0app:\n    \u00a0\u00a0\u00a0\u00a0container_name: docker-stress-20\n    \u00a0\u00a0\u00a0\u00a0build: .\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var: \"--cpu 2 --vm 6 --timeout 20\"\n    \u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 80:8080\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 80:8080\n    \u00a0\u00a0\u00a0\u00a0dns: 8.8.8\n    \u00a0\u00a0\u00a0\u00a0deploy:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0limits:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cpus: '0.50'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memory: 50M\n    \u00a0\u00a0app2:\n    \u00a0\u00a0\u00a0\u00a0container_name: docker-stress-30\n    \u00a0\u00a0\u00a0\u00a0build: .\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var: \"--cpu 2 --vm 6 --timeout 30\"\n    \u00a0\u00a0\u00a0\u00a0dxeploy:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0limits:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cpus: '0.50'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memory: 50M\n    ```", "```\n    python3 validator-cli.py -f docker-compose.yml -fi 'Duplicate Keys,Duplicate ports,Typing mistakes,DNS,Duplicate expose'\n    ```", "```\n    Warning: no kafka support\n    loading compose files....\n    checking consistency...\n    syntax is ok\n    = type: docker-compose\n    - service:app\n    Duplicate ports in service app port 80\n    =================== ERROR ===================\n    Under service: app\n    The DNS is not appropriate!\n    =============================================\n    - service:app2\n    =================== ERROR ===================\n    I can not find 'dxeploy' tag under 'app2' service. \n    Maybe you can use: \n    deploy\n    =============================================\n    services: 2\n    labels:\n    time: 0.0s\n    ```", "```\n    python3 validator-cli.py -u https://github.com/PacktWorkshops/The-Docker-Workshop/blob/master/Chapter11/Exercise11.03/docker-compose.yaml -fi 'Duplicate Keys,Duplicate ports,Typing mistakes,DNS,Duplicate expose'\n    ```", "```\n    Warning: no kafka support\n    discard cache...\n    loading compose files....\n    checking consistency...\n    syntax is ok\n    = type: docker-compose=\n    - service:engine-api\n    - service:engine-catalog\n    - service:engine-simpleq\n    - service:engine-policy-engine\n    - service:engine-analyzer\n    - service:anchore-db\n    services: 6\n    labels:\n    time: 0.6s\n    ```"]