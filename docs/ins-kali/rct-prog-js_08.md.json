["```js\n  var Pragmatometer = React.createClass({\n    render: function() {\n      return (\n        <div className=\"Pragmatometer\">\n          <Calendar />\n          <Todo />\n          <Scratch />\n          <YouPick />\n          </div>\n      );\n    }\n});\n```", "```js\nvar converter = new Showdown.converter();\nvar hello_world = React.createClass({\n  render: function() {\n    var raw_markdown = '*Hello*, world!';\n    var showdown_markup = converter.makeHtml(raw_markdown);\n    return (\n      <div dangerouslySetInnerHtml={{__html:\n        showdown_markup}}>\n      </div>\n    );\n  }\n});\n```", "```js\n  var YouPick = React.createClass({\n    getDefaultProps: function() {\n      return null;\n    },\n    getInitialState: function() {\n      return null;\n    },\n    render: function() {\n      return <div />;\n    }\n  });\n```", "```js\n  getDefaultProps: function() {\n    return {\n    initial_text: '<p><strong>I am <em>terribly</em> ' + \n    'sorry.</strong></p><p>I cannot provide you with ' +\n    'the webapp you requested.</p><p>You must ' + \n    'understand, I am in a difficult position. You ' + \n    'see, I am not a computer from earth at all. I ' +\n    'am a \\'computer\\', to use the term, from a ' +\n    'faroff galaxy: the galaxy of <strong><a ' +\n    'href=\"https://CJSHayward.com/steel/\">Within ' +\n    'the Steel Orb</a></strong>.</p><p>Here I am ' +\n    'with capacities your world\\'s computer science ' + \n    'could never dream of, knowledge from a million, ' +\n    'million worlds, and for that matter more ' +\n    'computing power than Amazon\\'s EC2/Cloud could ' +\n    'possibly expand to, and I must take care of ' +\n    'pitiful responsibilities like ',\n    interval: 100,\n    repeated_text: 'helping you learn web development '\n  };\n},\n```", "```js\n  initial_text: '**I am *terribly* sorry.**\\r\\n\\r\\n' +\n  'I cannot furnish you with the webapp you ' +\n  'requested.\\r\\n\\r\\nYou must understand, I am in ' +\n  'a difficult position. You see, I am not a ' +\n  'computer from earth at all. I am a ' + \n  '\\'computer\\', to use the term, from a faroff ' +\n  'galaxy, the galaxy of **[Within the Steel Orb] +\n  '(https://CJSHayward.com/steel/)**.\\r\\n\\r\\nHere ' +\n  'I am with capacities your world's computer ' +\n  'science could never dream of, knowledge from a ' +\n  'million million worlds, and for that matter ' +\n  'more computing power than Amazon's EC2/Cloud ' +\n  'could possibly expand to, and I must take care ' +\n  'of pitiful responsibilities like ',\n```", "```js\n  var Calendar = React.createClass({\n    render: function() {\n      return <div />;\n    }\n  });\n  var Scratchpad = React.createClass({\n    render: function() {\n      return <div />;\n    }\n  });\n  var Todo = React.createClass({\n    render: function() {\n      return <div />;\n    }\n  });\n```", "```js\n  getInitialState: function() {\n    return {\n      start_time: new Date().getTime()\n    };\n  },\n```", "```js\n  render: function() {\n```", "```js\n  var that = this;\n```", "```js\n  var tokenize = function(original) {\n    var workbench = original;\n    var result = [];\n    while (workbench) {\n      if (workbench[0] === '<') {\n        length = workbench.indexOf('>') + 1;\n        if (length === 0) {\n          length = 1;\n        }\n      } else {\n        length = 1;\n      }\n      result.push(workbench.substr(0, length));\n      workbench = workbench.substr(length);\n    }\n    return result;\n  }\n```", "```js\n  var initial_as_html = converter.makeHtml(\n    that.props.initial_text);\n    var repeated_as_html = converter.makeHtml(\n      that.props.repeated_text);\n```", "```js\n  if (initial_as_html.substr(initial_as_html.length - 4) \n  === '</p>') {\n    initial_as_html = initial_as_html.substr(0,\n      initial_as_html.length - 4);\n    }\n    if (repeated_as_html.substr(0, 3) === '<p>') {\n    repeated_as_html = repeated_as_html.substr(3);\n  }\n  if (repeated_as_html.substr(repeated_as_html.length - 4)\n    === '</p>') {\n    repeated_as_html = repeated_as_html.substr(0,\n    repeated_as_html.length - 4);\n  }\n```", "```js\n  var initial_tokens = tokenize(initial_as_html);\n  var repeated_tokens = tokenize(repeated_as_html);\n```", "```js\n  var tokens = Math.floor((new Date().getTime() -\n  that.state.start_time) / that.props.interval);\n```", "```js\n  var workbench;\n```", "```js\n  if (tokens <= initial_tokens.length) {\n    workbench = initial_tokens.slice(0, tokens);\n  }\n```", "```js\n  else {\n    workbench = [];\n    workbench = workbench.concat(initial_tokens);\n    for(var index = 0; index < Math.floor((new\n      Date().getTime() - that.state.start_time) /\n      that.props.interval) - initial_tokens.length; index +=\n    1) {\n      var position = index % repeated_tokens.length;\n      workbench = workbench.concat(\n      repeated_tokens.slice(position, position + 1));\n    }\n  }\n```", "```js\n  return (\n    <div dangerouslySetInnerHTML={{__html:\n    workbench.join('')}} />\n  );\n}\n```", "```js\n  var update = function() {\n    React.render(<Pragmatometer />,\n      document.getElementById('main'));\n  };\n  update();\n  var update_interval = setInterval(update, 1);\n})();\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Pragmatometer</title>\n    <style type=\"text/css\">\n      body {\n        font-family: Verdana, Arial, sans;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Pragmatometer</h1>\n    <div id=\"main\"></div>\n    <script src=\"img/react.js\">\n    </script>\n    <script\n      src=\"img/   showdown.min.js\">\n    </script>\n    <script src=\"img/site.js\"></script>\n  </body>\n</html>\n```"]