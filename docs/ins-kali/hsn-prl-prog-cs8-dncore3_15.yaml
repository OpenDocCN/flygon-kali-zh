- en: Writing Unit Test Cases for Parallel and Asynchronous Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为并行和异步代码编写单元测试用例
- en: In this chapter, we will introduce how to write unit test cases for parallel
    and asynchronous code. Writing unit test cases is an important aspect of writing
    robust code that is easy to maintain when you're working with large teams.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何为并行和异步代码编写单元测试用例。编写单元测试用例是编写健壮代码的重要方面，当你与大型团队合作时，这样的代码更易于维护。
- en: With the new CI/CD platforms, it's easier to make running unit test cases a
    part of the build process. This helps in finding issues at a very early stage.
    It also makes sense to write integration tests so that we can evaluate whether
    different components are working correctly together. Although you will find more
    features in Visual Studio's Community and Professional editions, only Visual Studio
    Enterprise edition has support for analyzing code coverage for unit test cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有了新的CI/CD平台，使运行单元测试用例成为构建过程的一部分变得更容易。这有助于在非常早期发现问题。编写集成测试也是有意义的，这样我们可以评估不同组件是否正确地一起工作。虽然在Visual
    Studio的社区和专业版本中会发现更多功能，但只有Visual Studio企业版支持分析单元测试用例的代码覆盖率。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the problems with writing unit test cases for async code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解为异步代码编写单元测试用例的问题
- en: Writing unit test cases for parallel and async code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为并行和异步代码编写单元测试用例
- en: Mocking the setup for async code using Moq
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Moq模拟异步代码的设置
- en: Using testing tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试工具
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: A basic understanding of unit testing and C# is required for learning how to
    write unit test cases using frameworks supported by Visual Studio. The source
    code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter11).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用Visual Studio支持的框架编写单元测试用例需要对单元测试和C#有基本的了解。本章的源代码可以在GitHub上找到：[https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter11](https://github.com/PacktPublishing/Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter11)。
- en: Unit testing with .NET Core
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.NET Core进行单元测试
- en: '.NET Core supports three frameworks for writing unit tests, that is, MSTest,
    NUnit, and xUnit, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core支持三种编写单元测试的框架，即MSTest、NUnit和xUnit，如下截图所示：
- en: '![](img/5237ca31-885c-432b-9361-5d3ae572ecec.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5237ca31-885c-432b-9361-5d3ae572ecec.png)'
- en: 'Initially, the preferred framework for writing test cases was NUnit. Then,
    MSTest was added to Visual Studio, before xUnit was introduced into .NET Core.
    xUnit is a very lean version in comparison to NUnit and helps users write clean
    tests and take advantage of new features. Some of the benefits of xUnit are as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，编写测试用例的首选框架是NUnit。然后，MSTest被添加到Visual Studio中，然后xUnit被引入到.NET Core中。与NUnit相比，xUnit是一个非常精简的版本，并帮助用户编写干净的测试并利用新功能。xUnit的一些好处如下：
- en: It is lightweight.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它很轻量级。
- en: It uses new features.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用了新功能。
- en: It has improved test isolation.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它改进了测试隔离。
- en: The xUnit creator is also from Microsoft and is a tool that's used within Microsoft.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: xUnit的创建者也来自微软，是微软内部使用的工具。
- en: The `Setup` and `TearDown` attributes have been replaced with a constructor
    and `System.IDisposable`, thereby forcing the developer to write clean code.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Setup`和`TearDown`属性已被构造函数和`System.IDisposable`取代，从而迫使开发人员编写干净的代码。'
- en: 'A unit test case is just a simple function that returns `void`, which is used
    to test the function logic and verify the output against a predefined set of inputs.
    To make the function recognizable as a test case, it must be decorated with the
    `[Fact]` attribute, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试用例只是一个简单的返回`void`的函数，用于测试函数逻辑并根据预定义的一组输入验证输出。为了使函数被识别为测试用例，必须使用`[Fact]`属性进行修饰，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run this test case, we need to right-click on the function in the code and
    click Run Test(s) or Debug Test(s):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此测试用例，我们需要右键单击代码中的函数，然后单击“运行测试”或“调试测试”：
- en: '![](img/481b8095-a846-48c1-95e7-9ec15d692b72.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/481b8095-a846-48c1-95e7-9ec15d692b72.png)'
- en: 'The output of the test case''s execution can be seen in the Test Explorer window:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例的执行输出可以在测试资源管理器窗口中看到：
- en: '![](img/0c2e553e-e26e-4527-9f74-14522d4b2cb1.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c2e553e-e26e-4527-9f74-14522d4b2cb1.png)'
- en: While this is fairly straightforward, writing unit test cases for parallel and
    asynchronous code is challenging. We'll discuss this in more detail in the next
    section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这相当简单，但为并行和异步代码编写单元测试用例是具有挑战性的。我们将在下一节中详细讨论这个问题。
- en: Understanding the problems with writing unit test cases for async code
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解为异步代码编写单元测试用例的问题
- en: 'Async methods return a `Task` that needs to be awaited to get results. If it
    is not awaited, the method will return immediately, without waiting for the async
    task to finish. Consider the following method, which we''re using to write a unit
    test case with xUnit:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 异步方法返回一个需要等待以获得结果的`Task`。如果不等待，方法将立即返回，而不会等待异步任务完成。考虑以下方法，我们将使用它来编写一个使用xUnit的单元测试用例：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The method returns a constant value of 5 after a delay of 1 second. Since the
    method used `Task`, we made use of the `async` and `await` keywords to get the
    expected results. The following is a very simple test case we can use to test
    this method using MSTest:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在延迟1秒后返回一个常量值5。由于该方法使用了`Task`，我们使用了`async`和`await`关键字来获得预期的结果。以下是一个非常简单的测试用例，我们可以使用MSTest来测试这个方法：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the method should fail as the expected return value is 3 whereas
    the method is returning 5\. When we run this test, however, it passes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，该方法应该失败，因为预期的返回值是3，而方法返回的是5。然而，当我们运行这个测试时，它通过了：
- en: '![](img/83e88031-cd3f-4584-be32-5e41af5e4369.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83e88031-cd3f-4584-be32-5e41af5e4369.png)'
- en: What happened here is that, since the method is marked as async, it returned
    immediately when it encountered the `await` keyword. When a task is returned,
    it's deemed to run at a future point in time, but since the test case returned
    without any failures, it was marked as a pass by the test framework. This is a
    major cause of concern as this means the tests will pass, even if the task throws
    an exception.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的情况是，由于该方法标记为异步，当遇到`await`关键字时立即返回。当返回一个任务时，它被视为在将来的某个时间点运行，但由于测试用例没有失败而返回，测试框架将其标记为通过。这是一个重大问题，因为这意味着即使任务抛出异常，测试也会通过。
- en: 'The preceding test case can be written slightly differently to make it run
    with MSTest:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 可以稍微不同地编写前面的测试用例以使其在MSTest中运行：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The same unit test case can be written in xUnit as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用xUnit编写相同的单元测试用例如下：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we run the preceding xUnit test case, it runs successfully. However, the
    problem with this code is that it''s a blocking test case, which can have a significant
    impact on the performance of our test suite. A better unit test case would be
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的xUnit测试用例时，它会成功运行。但是，这段代码的问题在于它是一个阻塞测试用例，这可能会对我们的测试套件的性能产生重大影响。更好的单元测试用例如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Initially, async unit test cases were not supported by every unit testing framework,
    as we saw in the case of MSTest. However, they are supported by xUnit and NUnit.
    The preceding test case once again returns as a success.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，并非每个单元测试框架都支持异步单元测试用例，正如我们在MSTest的情况下所见。但是，它们受到xUnit和NUnit的支持。前面的测试用例再次返回成功。
- en: 'The preceding unit test case can be written using NUnit as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用NUnit编写上述单元测试用例如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There are some differences here compared to the preceding code. The `[Fact]`
    attribute is replaced by `[Test]`, while `Assert.Equal` is replaced by `Assert.AreEqual`.
    The main difference, however, which you will see when you try running the preceding
    test case in Visual Studio, is that it will fail with the following error: `"Message:
    Async test method must have non-void return type"`. So, for NUnit, the method
    needs to be changed, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的代码相比，这里有一些区别。`[Fact]`属性被`[Test]`替换，而`Assert.Equal`被`Assert.AreEqual`替换。然而，当您尝试在Visual
    Studio中运行前面的测试用例时，您将看到一个错误：`"消息：异步测试方法必须具有非void返回类型"`。因此，对于NUnit，方法需要更改如下：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The only difference here is that `void` is replaced with `Task`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是`void`被`Task`替换。
- en: In this section, we have seen the problems that we may face when we use various
    frameworks that are provided for unit testing. Now, let's take a look at how to
    write better unit test cases.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经看到了在使用为单元测试提供的各种框架时可能会遇到的问题。现在，让我们看看如何编写更好的单元测试用例。
- en: Writing unit test cases for parallel and async code
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写并行和异步代码的单元测试用例
- en: 'In the previous section, we learned how to write unit test cases for async
    code. In this section, we will discuss writing unit test cases for exception scenarios.
    Consider the following method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何为异步代码编写单元测试用例。在本节中，我们将讨论为异常情况编写单元测试用例。考虑以下方法：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding method returns the result of the division of two numbers asynchronously.
    If the divisor is 0, then the `DivideByZero` exception is thrown by the method.
    We need two types of test cases to cover both scenarios:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法以异步方式返回两个数字的除法结果。如果除数为0，则该方法会抛出`DivideByZero`异常。我们需要两种类型的测试用例来覆盖这两种情况：
- en: Checking for a successful result
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查成功的结果
- en: Checking for an exception result when the divisor is 0
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当除数为0时检查异常结果
- en: Checking for a successful result
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查成功的结果
- en: 'The test case will look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the expected result is `5`. When we run the test, it will show
    up as successful in the Test Explorer.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，预期结果是`5`。当我们运行测试时，它将在测试资源管理器中显示为成功。
- en: Checking for an exception result when the divisor is 0
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当除数为0时检查异常结果
- en: 'We can write a test case for a method that throws an exception using the `Assert.ThrowsAsync<>`
    method:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Assert.ThrowsAsync<>`方法为抛出异常的方法编写测试用例：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, we checked the assertion using `Assert.ThrowsAsync<DivideByZeroException>`
    while calling the `GetDivisionAsync` method asynchronously. Since we pass the
    `divisor` as `0`, the method will throw an exception and the assertion will hold
    true.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在异步调用`GetDivisionAsync`方法时使用`Assert.ThrowsAsync<DivideByZeroException>`进行断言。由于我们将`divisor`传递为`0`，该方法将抛出异常，断言将保持为真。
- en: Mocking the setup for async code using Moq
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Moq模拟异步代码的设置
- en: Mocking objects is a very important aspect of unit testing. As you may be aware,
    unit testing is about testing one module at a time; any external dependency is
    assumed to be working fine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟对象是单元测试的一个非常重要的方面。您可能知道，单元测试是关于一次测试一个模块；任何外部依赖都被假定为正常工作。
- en: 'There are many mocking frameworks available for .NET, including the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用于.NET的模拟框架，包括以下内容：
- en: NSubstitute (not supported in .NET core)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSubstitute（在.NET Core中不受支持）
- en: Rhino Mocks (not supported in .NET core)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rhino Mocks（在.NET Core中不受支持）
- en: Moq (supported in .NET core)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moq（在.NET Core中受支持）
- en: NMock3 (not supported in .NET core)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NMock3（在.NET Core中不受支持）
- en: For the sake of demonstration, we will be using Moq to mock our serviced components.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们将使用Moq来模拟我们的服务组件。
- en: 'In this section, we will create a simple service containing asynchronous methods.
    Then, we will try to write unit test cases for the methods that call the service. Let''s
    consider a service interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个包含异步方法的简单服务。然后，我们将尝试为调用该服务的方法编写单元测试用例。让我们考虑一个服务接口：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we can see, the interface has a `GetDataAsync()` method, which fetches data
    in an asynchronous manner. The following snippet shows a controller class that
    makes use of some dependency injection frameworks to gain access to the service
    instance:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，接口有一个`GetDataAsync()`方法，以异步方式获取数据。以下代码片段显示了一个控制器类，该类利用一些依赖注入框架来访问服务实例：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding `Controller` class also exposes an asynchronous method called
    `DisplayData()`, which fetches data from a service and writes it to the console.
    When we try to write a unit test case for the preceding method, the first problem
    we will encounter is that we have no way of creating the service instance in the
    absence of any concrete implementation. Even if we do have a concrete implementation,
    we should avoid calling the actual service method as this would be more appropriate
    in an integration test case rather than a unit test case. Mocking comes to our
    rescue here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`Controller`类还公开了一个名为`DisplayData()`的异步方法，该方法从服务中获取数据并将其写入控制台。当我们尝试为前述方法编写单元测试用例时，我们将遇到的第一个问题是，在没有任何具体实现的情况下，我们无法创建服务实例。即使我们有具体的实现，我们也应该避免调用实际的服务方法，因为这更适合集成测试用例而不是单元测试用例。在这里，Mocking来拯救我们。
- en: 'Let''s try to write a unit test case for the preceding method using Moq:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用Moq为前述方法编写一个单元测试用例：
- en: We need to install `Moq` as a NuGet package.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装`Moq`作为NuGet包。
- en: 'Add the namespace for it as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加其命名空间如下：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a mock object, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个模拟对象，如下所示：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set up a mock object that returns dummy data. This can be achieved using the
    `Task.FromResult` method, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置返回虚拟数据的模拟对象。可以使用`Task.FromResult`方法来实现，如下所示：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we need to create a controller object by passing the mocked object we
    just created:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过传递刚刚创建的模拟对象来创建一个控制器对象：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is a simple test case for the `DisplayData()` method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`DisplayData()`方法的一个简单测试用例：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code shows how we can set up data for mock objects. Another way
    to set up data for mock objects is via the `TaskCompletionSource` class, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了我们如何为模拟对象设置数据。为模拟对象设置数据的另一种方法是通过`TaskCompletionSource`类，如下所示：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Since the number of test cases can really grow in an enterprise project, the
    need to be able to find and execute test cases arises. In the next section, we
    will discuss some common testing tools in Visual Studio that can help us manage
    the test case execution process.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于企业项目中测试用例的数量可能会大幅增长，因此需要能够查找和执行测试用例。在下一节中，我们将讨论一些在Visual Studio中可以帮助我们管理测试用例执行过程的常见测试工具。
- en: Testing tools
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试工具
- en: 'One of the most important tools in Visual Studio to run a test or see the results
    of test execution is Test Explorer. We had a brief look at Test Explorer at the
    start of this chapter. One key feature of Test Explorer is its ability to run
    test cases in parallel. If you have a system with multiple cores, you can easily
    take advantage of parallelism to run test cases faster. This can be done by clicking
    on the Run Tests in parallel toolbar button in Test Explorer:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中运行测试或查看测试执行结果的最重要工具之一是Test Explorer。我们在本章开头简要介绍了Test Explorer。Test
    Explorer的一个关键特性是能够并行运行测试用例。如果您的系统有多个核心，您可以轻松利用并行性来更快地运行测试用例。这可以通过在Test Explorer中点击“Run
    Tests in parallel”工具栏按钮来实现：
- en: '![](img/1d4af856-f5cb-4377-858c-7b492f84903d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d4af856-f5cb-4377-858c-7b492f84903d.png)'
- en: Depending on your version of Visual Studio, some additional support is provided
    by Microsoft. One useful tool is the option to generate unit test cases automatically
    using **Intellitest.** Intellitest analyzes your source code and automatically
    generates test cases, test data, and test suites. Intellitest isn't supported
    in .NET core yet, though it's available for other versions of the .NET Framework.
    It's likely to have a future upgrade to Visual Studio.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的Visual Studio版本，Microsoft还提供了一些额外的支持。一个有用的工具是使用**Intellitest**自动生成单元测试用例的选项。Intellitest分析您的源代码并自动生成测试用例、测试数据和测试套件。尽管Intellitest尚不支持.NET
    Core，但它适用于.NET Framework的其他版本。它很可能会在未来的Visual Studio升级中得到支持。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about writing unit test cases for async methods,
    which helps in achieving robust code, supporting large teams, and adapting to
    new CI/CD platforms, which helps in finding issues at a very early stage. We started
    by introducing a few problems that you may come across while writing unit test
    cases for parallel and async code and how you can mitigate them using correct
    coding practices. Then, we moved on and looked at mocking, which is a very important
    aspect of unit testing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了为异步方法编写单元测试用例，这有助于实现健壮的代码，支持大型团队，并适应新的CI/CD平台，有助于在非常早期发现问题。我们首先介绍了在编写并行和异步代码的单元测试用例时可能遇到的一些问题，以及如何使用正确的编码实践来减轻这些问题。然后，我们继续学习了Mocking，这是单元测试的一个非常重要的方面。
- en: We learned that Moq has support for .NET Core and that .NET Core is evolving
    very fast; soon, there will be support for all the major mocking frameworks. All
    the steps for writing test cases were explained as well, including installing
    Moq as a NuGet package and setting up data for mock objects. Finally, we explored
    the features of an important testing tool, Test Explorer, which we can use to
    write cleaner test cases, and how to parallelize unit test cases for faster execution.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到Moq支持.NET Core，并且.NET Core发展非常迅速；很快将支持所有主要的模拟框架。还解释了编写测试用例的所有步骤，包括安装Moq作为NuGet包和为模拟对象设置数据。最后，我们探讨了一个重要的测试工具Test
    Explorer的功能，我们可以使用它来编写更干净的测试用例，并且如何并行运行单元测试用例以加快执行速度。
- en: In the next chapter, we will introduce the concepts and roles of IIS and Kestrel in
    a .NET Core web application development environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍IIS和Kestrel在.NET Core Web应用程序开发环境中的概念和角色。
- en: Questions
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these is not a supported unit testing framework in Visual Studio?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是Visual Studio中支持的单元测试框架？
- en: JUnit
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JUnit
- en: NUnit
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NUnit
- en: xUnit
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: xUnit
- en: MSTest
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MSTest
- en: How can we check the output of a unit test case?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何检查单元测试用例的输出？
- en: By using the Task Explorer window
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用Task Explorer窗口
- en: By using the Test Explorer window
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用Test Explorer窗口
- en: Which attributes can you apply to a test method when the testing framework is
    xUnit?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当测试框架是xUnit时，您可以将哪些属性应用于测试方法？
- en: Fact
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事实
- en: TestMethod
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TestMethod
- en: Test
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试
- en: How can you verify the success of a test case that throws an exception?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何验证抛出异常的测试用例的成功？
- en: '`Assert.AreEqual(ex, typeof(Exception)`'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Assert.AreEqual(ex, typeof(Exception)`'
- en: '`Assert.IsException`'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Assert.IsException`'
- en: '`Assert.ThrowAsync<T>`'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Assert.ThrowAsync<T>`'
- en: Which of these mocking frameworks is supported in .NET Core?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些模拟框架中哪些受到.NET Core的支持？
- en: NSubstitute
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NSubstitute
- en: Moq
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Moq
- en: Rhino Mocks
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Rhino Mocks
- en: NMock
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NMock
- en: Further reading
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can read about parallel programming and unit testing techniques at the
    following web pages:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网页上了解并行编程和单元测试技术：
- en: '[https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming](https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming](https://www.packtpub.com/application-development/c-multithreaded-and-parallel-programming)'
- en: '[https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook](https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook](https://www.packtpub.com/application-development/net-45-parallel-extensions-cookbook)'
