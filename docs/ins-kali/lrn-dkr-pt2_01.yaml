- en: Chapter 1. Getting Started with Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Docker入门
- en: These days, Docker technology is gaining more market and more mind shares among
    information technology (IT) professionals across the globe. In this chapter, we
    would like to shed more light on Docker, and show why it is being touted as the
    next best thing for the impending cloud IT era. In order to make this book relevant
    to software engineers, we have listed the steps needed for crafting highly usable
    application-aware containers, registering them in a public registry repository,
    and then deploying them in multiple IT environments (on-premises as well as off-premises).
    In this book, we have clearly explained the prerequisites and the most important
    details of Docker, with the help of all the education and experiences that we
    could gain through a series of careful implementations of several useful Docker
    containers in different systems. For doing this, we used our own laptops as well
    as a few leading public **Cloud Service Providers** (**CSP**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Docker技术在全球范围内的信息技术（IT）专业人士中获得了更多的市场份额和更多的关注。在本章中，我们想更多地介绍Docker，并展示为什么它被誉为即将到来的云IT时代的下一个最佳选择。为了使本书与软件工程师相关，我们列出了制作高度可用的应用程序感知容器所需的步骤，将它们注册到公共注册库中，然后在多个IT环境（本地和离地）中部署它们。在本书中，我们清楚地解释了Docker的先决条件和最重要的细节，借助我们通过一系列在不同系统中谨慎实施的几个有用的Docker容器所获得的所有教育和经验。为了做到这一点，我们使用了我们自己的笔记本电脑以及一些领先的公共云服务提供商（CSP）。
- en: We would like to introduce you to the practical side of Docker for the game-changing
    Docker-inspired containerization movement.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想向您介绍Docker实用方面，以改变游戏规则的Docker启发式容器化运动。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An introduction to Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker简介
- en: Docker on Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux上的Docker
- en: Differentiating between containerization and virtualization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分容器化和虚拟化
- en: Installing the Docker engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker引擎
- en: Understanding the Docker setup
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Docker设置
- en: Downloading the first image
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载第一个镜像
- en: Running the first container
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行第一个容器
- en: Running a Docker container on **Amazon Web Services** (**AWS**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon Web Services（AWS）上运行Docker容器
- en: Troubleshooting the Docker containers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决Docker容器的故障
- en: An introduction to Docker
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker简介
- en: Due to its overwhelming usage across industry verticals, the IT domain has been
    stuffed with many new and pathbreaking technologies used not only for bringing
    in more decisive automation but also for overcoming existing complexities. Virtualization
    has set the goal of bringing forth IT infrastructure optimization and portability.
    However, virtualization technology has serious drawbacks, such as performance
    degradation due to the heavyweight nature of **virtual machines** (**VM**), the
    lack of application portability, slowness in provisioning of IT resources, and
    so on. Therefore, the IT industry has been steadily embarking on a Docker-inspired
    containerization journey. The Docker initiative has been specifically designed
    for making the containerization paradigm easier to grasp and use. Docker enables
    the containerization process to be accomplished in a risk-free and accelerated
    fashion.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其在行业垂直领域的广泛使用，IT领域已经充斥着许多新的和开创性的技术，这些技术不仅用于带来更具决定性的自动化，而且还用于克服现有的复杂性。虚拟化已经设定了将IT基础设施优化和可移植性带入前景的目标。然而，虚拟化技术存在严重缺陷，例如由于虚拟机（VM）的笨重性质而导致的性能下降，应用程序可移植性的缺乏，IT资源的提供速度缓慢等。因此，IT行业一直在稳步地踏上Docker启发式容器化之旅。Docker倡议专门设计了使容器化范式更易于理解和使用的目的。Docker使容器化过程能够以无风险和加速的方式完成。
- en: Precisely speaking, **Docker** is an open source containerization engine, which
    automates the packaging, shipping, and deployment of any software applications
    that are presented as lightweight, portable, and self-sufficient containers, that
    will run virtually anywhere.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确切地说，**Docker**是一个开源的容器化引擎，它自动化打包、运输和部署任何呈现为轻量、便携和自给自足容器的软件应用程序，可以在几乎任何地方运行。
- en: A Docker **container** is a software bucket comprising everything necessary
    to run the software independently. There can be multiple Docker containers in
    a single machine and containers are completely isolated from one another as well
    as from the host machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker **容器**是一个软件桶，包括运行软件所需的一切。单台机器上可以有多个Docker容器，这些容器彼此完全隔离，也与主机机器隔离。
- en: In other words, a Docker container includes a software component along with
    all of its dependencies (binaries, libraries, configuration files, scripts, jars,
    and so on). Therefore, the Docker containers could be fluently run on x64 Linux
    kernel supporting namespaces, control groups, and file systems, such as **Another
    Union File System** (**AUFS**). However, as indicated in this chapter, there are
    pragmatic workarounds for running Docker on other mainstream operating systems,
    such as Windows, Mac, and so on. The Docker container has its own process space
    and network interface. It can also run things as root, and have its own `/sbin/init`,
    which can be different from the host machines'.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Docker容器包括一个软件组件以及其所有依赖项（二进制文件、库、配置文件、脚本、jar等）。因此，Docker容器可以在支持命名空间、控制组和文件系统（如**另一个联合文件系统**（AUFS））的x64
    Linux内核上流畅运行。然而，正如本章所示，对于在其他主流操作系统（如Windows、Mac等）上运行Docker，有实用的解决方法。Docker容器有自己的进程空间和网络接口。它也可以以root身份运行，并且有自己的`/sbin/init`，这可能与主机机器不同。
- en: 'In a nutshell, the Docker solution lets us quickly assemble composite, enterprise-scale,
    and business-critical applications. For doing this, we can use different and distributed
    software components: Containers eliminate the friction that comes with shipping
    code to distant locations. Docker also lets us test the code and then deploy it
    in production as fast as possible. The Docker solution primarily consists of the
    following components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Docker解决方案让我们快速组装复合、企业规模和业务关键的应用程序。为了做到这一点，我们可以使用不同的分布式软件组件：容器消除了将代码发送到远程位置时出现的摩擦。Docker还让我们能够尽快测试代码，然后在生产环境中部署它。Docker解决方案主要包括以下组件：
- en: The Docker engine
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker引擎
- en: The Docker Hub
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub
- en: The Docker engine is for enabling the realization of purpose-specific as well
    as generic Docker containers. The Docker Hub is a fast-growing repository of the
    Docker images that can be combined in different ways for producing publicly findable,
    network-accessible, and widely usable containers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎用于实现特定目的和通用Docker容器。Docker Hub是Docker镜像的快速增长的存储库，可以以不同方式组合，以产生公开可查找、网络可访问和广泛可用的容器。
- en: Docker on Linux
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux上的Docker
- en: 'Suppose that we want to directly run the containers on a Linux machine. The
    Docker engine produces, monitors, and manages multiple containers as illustrated
    in the following diagram:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要直接在Linux机器上运行容器。Docker引擎产生、监控和管理多个容器，如下图所示：
- en: '![Docker on Linux](graphics/7937OT_01_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Linux上的Docker](graphics/7937OT_01_01.jpg)'
- en: The preceding diagram vividly illustrates how future IT systems would have hundreds
    of application-aware containers, which would innately be capable of facilitating
    their seamless integration and orchestration for deriving modular applications
    (business, social, mobile, analytical, and embedded solutions). These contained
    applications could fluently run on converged, federated, virtualized, shared,
    dedicated, and automated infrastructures.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上图生动地说明了未来的IT系统将拥有数百个应用感知容器，这些容器天生具有促进其无缝集成和编排以获得模块化应用程序（业务、社交、移动、分析和嵌入式解决方案）的能力。这些包含的应用程序可以流畅地运行在融合、联合、虚拟化、共享、专用和自动化的基础设施上。
- en: Differentiating between containerization and virtualization
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器化和虚拟化的区别
- en: 'It is pertinent, and paramount to extract and expound the game-changing advantages
    of the Docker-inspired containerization movement over the widely used and fully
    matured virtualization paradigm. In the containerization paradigm, strategically
    sound optimizations have been accomplished through a few crucial and well-defined
    rationalizations and the insightful sharing of the compute resources. Some of
    the innate and hitherto underutilized capabilities of the Linux kernel have been
    rediscovered. These capabilities have been rewarded for bringing in much-wanted
    automation and acceleration, which will enable the fledgling containerization
    idea to reach greater heights in the days ahead, especially those of the cloud
    era. The noteworthy business and technical advantages of these include the bare
    metal-scale performance, real-time scalability, higher availability, and so on.
    All the unwanted bulges and flab are being sagaciously eliminated to speed up
    the roll-out of hundreds of application containers in seconds and to reduce the
    time taken for marketing and valuing in a cost-effective fashion. The following
    diagram on the left-hand side depicts the virtualization aspect, whereas the diagram
    on the right-hand side vividly illustrates the simplifications that are being
    achieved in the containers:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器化范式中提取和阐述Docker启发的容器化运动的颠覆性优势是至关重要和至关重要的，这超过了广泛使用和完全成熟的虚拟化范式。在容器化范式中，通过一些关键和明确定义的合理化和计算资源的深刻共享，战略上合理的优化已经完成。一些天生的而迄今为止未充分利用的Linux内核功能已经被重新发现。这些功能因为带来了备受期待的自动化和加速而受到了奖励，这将使新兴的容器化理念在未来的日子里达到更高的高度，特别是在云时代。这些显著的商业和技术优势包括裸金属级性能、实时可伸缩性、更高的可用性等。所有不需要的凸起和赘肉都被明智地消除，以便以成本效益的方式加快数百个应用容器的部署速度，并缩短营销和估值所需的时间。左侧的下图描述了虚拟化方面，而右侧的图形生动地说明了容器中所实现的简化：
- en: '![Differentiating between containerization and virtualization](graphics/7937OT_01_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![容器化和虚拟化的区别](graphics/7937OT_01_02.jpg)'
- en: 'The following table gives a direct comparison between virtual machines and
    containers:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下表直接比较了虚拟机和容器：
- en: '| Virtual Machines (VMs) | Containers |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟机（VMs） | 容器 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Represents hardware-level virtualization | Represents operating system virtualization
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 代表硬件级虚拟化 | 代表操作系统虚拟化 |'
- en: '| Heavyweight | Lightweight |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 重量级 | 轻量级 |'
- en: '| Slow provisioning | Real-time provisioning and scalability |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 缓慢的供应 | 实时供应和可伸缩性 |'
- en: '| Limited performance | Native performance |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 有限的性能 | 本机性能 |'
- en: '| Fully isolated and hence more secure | Process-level isolation and hence
    less secure |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 完全隔离，因此更安全 | 进程级隔离，因此不太安全 |'
- en: The convergence of containerization and virtualization
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化和虚拟化的融合
- en: A hybrid model, having features from both the virtual machines and that of containers,
    is being developed. It is the emergence of system containers, as illustrated in
    the preceding right-hand-side diagram. Traditional hypervisors, which implicitly
    represent hardware virtualization, directly secure the environment with the help
    of the server hardware. That is, VMs are completely isolated from the other VMs
    as well as from the underlying system. But for containers, this isolation happens
    at the process level and hence, they are liable for any kind of security incursion.
    Furthermore, some vital features that are available in the VMs are not available
    in the containers. For instance, there is no support for SSH, TTY, and the other
    security functionalities in the containers. On the other hand, VMs are resource-hungry
    and hence, their performance gets substantially degraded. Indeed, in containerization
    parlance, the overhead of a classic hypervisor and a guest operating system will
    be eliminated to achieve bare metal performance. Therefore, a few VMs can be provisioned
    and made available to work on a single machine. Thus, on one hand, we have the
    fully isolated VMs with average performance and on the other side, we have the
    containers that lack some of the key features, but are blessed with high performance.
    Having understood the ensuing needs, product vendors are working on system containers.
    The objective of this new initiative is to provide full system containers with
    the performance that you would expect from bare metal servers, but with the experience
    of virtual machines. The system containers in the preceding right-hand-side diagram
    represent the convergence of two important concepts (virtualization and containerization)
    for smarter IT. We will hear and read more about this blending in the future.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正在开发一种混合模型，具有虚拟机和容器的特性。这就是系统容器的出现，如前述右侧图表所示。传统的虚拟化程序，隐式地代表硬件虚拟化，直接利用服务器硬件来保护环境。也就是说，虚拟机与其他虚拟机以及底层系统完全隔离。但对于容器来说，这种隔离是在进程级别进行的，因此容器容易受到任何安全侵入的影响。此外，一些在虚拟机中可用的重要功能在容器中是不可用的。例如，容器中没有对SSH、TTY和其他安全功能的支持。另一方面，虚拟机需要大量资源，因此它们的性能会大幅下降。事实上，在容器化术语中，经典虚拟化程序和客户操作系统的开销将被消除，以实现裸金属性能。因此，可以为单台机器提供一些虚拟机。因此，一方面，我们有性能一般的完全隔离的虚拟机，另一方面，我们有一些缺少一些关键功能但性能卓越的容器。在理解了随之而来的需求后，产品供应商正在研发系统容器。这一新举措的目标是提供具有裸金属服务器性能但具有虚拟机体验的完整系统容器。前述右侧图表中的系统容器代表了两个重要概念（虚拟化和容器化）的融合，以实现更智能的IT。我们将在未来听到更多关于这种融合的信息。
- en: Containerization technologies
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化技术
- en: 'Having recognized the role and the relevance of the containerization paradigm
    for IT infrastructure augmentation and acceleration, a few technologies that leverage
    the unique and decisive impacts of the containerization idea have come into existence
    and they have been enumerated as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 认识到容器化范式对IT基础设施增强和加速的作用和相关性后，一些利用容器化理念的独特和决定性影响的技术应运而生，并被列举如下：
- en: '**LXC** (**Linux Containers**): This is the father of all kinds of containers
    and it represents an operating-system-level virtualization environment for running
    multiple isolated Linux systems (containers) on a single Linux machine.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LXC**（**Linux容器**）：这是所有容器的鼻祖，它代表了在单个Linux机器上运行多个隔离的Linux系统（容器）的操作系统级虚拟化环境。'
- en: 'The article *LXC* on the Wikipedia website states that:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科网站上的文章*LXC*指出：
- en: '*"The Linux kernel provides the cgroups functionality that allows limitation
    and prioritization of resources (CPU, memory, block I/O, network, etc.) without
    the need for starting any virtual machines, and namespace isolation functionality
    that allows complete isolation of an applications'' view of the operating environment,
    including process trees, networking, user IDs and mounted file systems."*'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Linux内核提供了cgroups功能，允许对资源（CPU、内存、块I/O、网络等）进行限制和优先级设置，而无需启动任何虚拟机，并提供了命名空间隔离功能，允许完全隔离应用程序对操作环境的视图，包括进程树、网络、用户ID和挂载的文件系统。”
- en: You can get more information from [http://en.wikipedia.org/wiki/LXC](http://en.wikipedia.org/wiki/LXC).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://en.wikipedia.org/wiki/LXC](http://en.wikipedia.org/wiki/LXC)获取更多信息。
- en: '**OpenVZ**: This is an OS-level virtualization technology based on the Linux
    kernel and the operating system. OpenVZ allows a physical server to run multiple
    isolated operating system instances, called containers, virtual private servers
    (VPSs), or virtual environments (VEs).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenVZ：这是一种基于Linux内核和操作系统的操作系统级虚拟化技术。OpenVZ允许物理服务器运行多个隔离的操作系统实例，称为容器、虚拟专用服务器（VPS）或虚拟环境（VEs）。
- en: '**The FreeBSD jail**: This is a mechanism that implements an OS-level virtualization,
    which lets the administrators partition a FreeBSD-based computer system into several
    independent mini-systems called *jails*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FreeBSD监狱：这是一种实现操作系统级虚拟化的机制，它允许管理员将基于FreeBSD的计算机系统分成几个独立的迷你系统，称为“监狱”。
- en: '**The AIX Workload partitions** (**WPARs**): These are the software implementations
    of the OS-level virtualization technology, which provide application environment
    isolation and resource control.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AIX工作负载分区（WPARs）：这些是操作系统级虚拟化技术的软件实现，提供应用环境隔离和资源控制。
- en: '**Solaris Containers** (including **Solaris Zones**): This is an implementation
    of the OS-level virtualization technology for the x86 and SPARC systems. A Solaris
    Container is a combination of the system resource controls and boundary separation
    provided by *zones*. Zones act as completely isolated virtual servers within a
    single operating system instance.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solaris容器（包括Solaris Zones）：这是针对x86和SPARC系统的操作系统级虚拟化技术的实现。Solaris容器是由“区域”提供的系统资源控制和边界分离的组合。区域在单个操作系统实例内充当完全隔离的虚拟服务器。
- en: In this book, considering the surging popularity and the mass adoption happening
    to Docker, we have chosen to dig deeper, dwell in detail on the Docker platform,
    the one-stop solution for the simplified and streamlined containerization movement.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，考虑到Docker的风靡和大规模采用，我们选择深入挖掘，详细讨论Docker平台，这是简化和优化容器化运动的一站式解决方案。
- en: Installing the Docker engine
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker引擎
- en: The Docker engine is built on top of the Linux kernel and it extensively leverages
    its features. Therefore, at this point in time, the Docker engine can only be
    directly run on Linux OS distributions. Nonetheless, the Docker engine could be
    run on the Mac and Microsoft Windows operating systems by using the lightweight
    Linux VMs with the help of adapters, such as Boot2Docker. Due to the surging growing
    of Docker, it is now being packaged by all major Linux distributions so that they
    can retain their loyal users as well as attract new users. You can install the
    Docker engine by using the corresponding packaging tool of the Linux distribution;
    for example, by using the `apt-get` command for Debian and Ubuntu, and the `yum`
    command for RedHat, Fedora, and CentOS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Docker引擎是建立在Linux内核之上的，并且广泛利用其功能。因此，目前Docker引擎只能直接在Linux操作系统发行版上运行。尽管如此，通过使用轻量级Linux虚拟机和适配器（如Boot2Docker），Docker引擎可以在Mac和Microsoft
    Windows操作系统上运行。由于Docker的迅猛增长，它现在被所有主要的Linux发行版打包，以便它们可以保留他们的忠实用户并吸引新用户。您可以使用相应的Linux发行版的打包工具来安装Docker引擎；例如，使用`apt-get`命令安装Debian和Ubuntu，使用`yum`命令安装RedHat、Fedora和CentOS。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have chosen the *Ubuntu Trusty 14.04 (LTS) (64-bit)* Linux distribution for
    all practical purposes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了*Ubuntu Trusty 14.04（LTS）（64位）* Linux发行版以供所有实际目的使用。
- en: Installing from the Ubuntu package repository
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Ubuntu软件包存储库安装
- en: This section explains the steps involved in installing the Docker engine from
    the Ubuntu package repository in detail. At the time of writing this book, the
    Ubuntu repository had packaged Docker 1.0.1, whereas the latest version of Docker
    was 1.5\. We strongly recommend installing Docker version 1.5 or greater by using
    any one of the methods described in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细解释了从Ubuntu软件包存储库安装Docker引擎涉及的步骤。在撰写本书时，Ubuntu存储库已经打包了Docker 1.0.1，而最新版本的Docker是1.5。我们强烈建议使用下一节中描述的任一方法安装Docker版本1.5或更高版本。
- en: 'However, if for any reason you have to install the Ubuntu packaged version,
    then please follow the steps described here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果出于任何原因您必须安装Ubuntu打包版本，请按照这里描述的步骤进行。
- en: 'The best practice for installing the Ubuntu packaged version is to begin the
    installation process by resynchronizing with the Ubuntu package repository. This
    step will essentially update the package repository to the latest published packages,
    thus we will ensure that we always get the latest published version by using the
    command shown here:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Ubuntu打包版本的最佳做法是通过重新与Ubuntu软件包存储库同步开始安装过程。这一步将更新软件包存储库到最新发布的软件包，因此我们将确保始终使用此处显示的命令获取最新发布的版本：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户下载您购买的所有Packt Publishing图书的示例代码文件。如果您在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给您。
- en: 'Kick-start the installation by using the following command. This setup will
    install the Docker engine along with a few more support files, and it will also
    start the `docker` service instantaneously:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动安装。此设置将安装Docker引擎以及一些支持文件，并立即启动`docker`服务：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Docker package is called `docker.io` because an older version of the Ubuntu
    package was called `docker`. As a result, all the files with the name `docker`
    are installed as `docker.io`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Docker软件包被称为`docker.io`，因为Ubuntu软件包的旧版本被称为`docker`。因此，所有名为`docker`的文件都被安装为`docker.io`。
- en: Examples are `/usr/bin/docker.io` and `/etc/bash_completion.d/docker.io`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如`/usr/bin/docker.io`和`/etc/bash_completion.d/docker.io`。
- en: 'For your convenience, you can create a soft link for `docker`.`io` called `docker`.
    This will enable you to execute Docker commands as `docker` instead of `docker.io`.
    You can do this by using the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便起见，你可以为`docker.io`创建一个名为`docker`的软链接。这将使你能够以`docker`而不是`docker.io`执行Docker命令。你可以使用以下命令来实现这一点：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The official Ubuntu package does not come with the latest stable version of
    `docker`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Ubuntu软件包不包含最新稳定版本的`docker`。
- en: Installing the latest Docker using docker.io script
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用docker.io脚本安装最新的Docker
- en: The official distributions might not package the latest version of Docker. In
    such a case, you can install the latest version of Docker either manually or by
    using the automated scripts provided by the Docker community.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 官方发行版可能不会打包最新版本的Docker。在这种情况下，你可以手动安装最新版本的Docker，也可以使用Docker社区提供的自动化脚本。
- en: 'For installing the latest version of Docker manually, follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动安装最新版本的Docker，请按照以下步骤进行：
- en: 'Add the Docker release tool''s repository path to your APT sources, as shown
    here:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Docker发布工具的存储库路径添加到你的APT源中，如下所示：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Import the Docker release tool''s public key by running the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令导入Docker发布工具的公钥：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Resynchronize with the package repository by using the command shown here:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令重新与软件包存储库同步：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Install `docker` and then start the `docker` service.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`docker`，然后启动`docker`服务。
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `lxc-docker` command will install the Docker image using the name `docker`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`lxc-docker`命令将使用名称`docker`安装Docker镜像。'
- en: 'The Docker community has taken a step forward by hiding these details in an
    automated install script. This script enables the installation of Docker on most
    of the popular Linux distributions, either through the `curl` command or through
    the `wget` command, as shown here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Docker社区通过隐藏这些细节在自动安装脚本中迈出了一步。该脚本使得在大多数流行的Linux发行版上安装Docker成为可能，可以通过`curl`命令或`wget`命令来实现，如下所示：
- en: 'For curl command:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于curl命令：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For wget command:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于wget命令：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding automated script approach enforces AUFS as the underlying Docker
    file system. This script probes the AUFS driver, and then installs it automatically
    if it is not found in the system. In addition, it also conducts some basic tests
    upon installation for verifying the sanity.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的自动化脚本方法将AUFS作为底层Docker文件系统。该脚本探测AUFS驱动程序，如果在系统中找不到，则自动安装它。此外，它还在安装后进行一些基本测试以验证其完整性。
- en: Understanding the Docker setup
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Docker设置
- en: It's important to understand Docker's components and their versions, storage,
    execution drivers, file locations, and so on. Incidentally, the quest for understanding
    the Docker setup would also reveal whether the installation was successful or
    not. You can accomplish this by using two `docker` subcommands, namely `docker
    version`, and `docker info`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要了解Docker的组件及其版本、存储、执行驱动程序、文件位置等。顺便说一句，对于理解Docker设置的追求也将揭示安装是否成功。你可以通过使用两个`docker`子命令来实现这一点，即`docker
    version`和`docker info`。
- en: 'Let''s start our `docker` journey with the `docker version` subcommand, as
    shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`docker version`子命令开始我们的`docker`之旅，如下所示：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Although the `docker version` subcommand lists many lines of text, as a Docker
    user, you should know what these following output lines mean:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`docker version`子命令列出了许多文本行，作为Docker用户，你应该知道以下输出行的含义：
- en: The client version
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端版本
- en: The client API version
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端API版本
- en: The server version
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器版本
- en: The server API version
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器API版本
- en: The client and server versions that have been considered here are 1.5.0 and
    the client API and the server API, versions 1.17.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里考虑的客户端和服务器版本分别为1.5.0和客户端API和服务器API版本1.17。
- en: If we dissect the internals of the `docker version` subcommand, then it will
    first list the client-related information that is stored locally. Subsequently,
    it will make a REST API call to the server over HTTP to obtain the server-related
    details.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们分析`docker version`子命令的内部，它首先会列出本地存储的与客户端相关的信息。随后，它将通过HTTP向服务器发出REST API调用，以获取与服务器相关的详细信息。
- en: 'Let''s learn more about the Docker environment using the `docker info` subcommand:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`docker info`子命令来了解更多关于Docker环境的信息：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see in the output of a freshly installed Docker engine, the number
    of `Containers` and `Images` is invariably nil. The `Storage Driver` has been
    set up as `aufs`, and the directory has been given the `/var/lib/docker/aufs`
    location. The `Execution Driver` has been set to the `native` mode. This command
    also lists details, such as the `Kernel Version`, the `Operating System`, the
    number of `CPUs`, the `Total Memory`, and `Name`, the new Docker hostname.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在新安装的Docker引擎的输出中所看到的，`容器`和`镜像`的数量始终为零。`存储驱动程序`已设置为`aufs`，并且目录已设置为`/var/lib/docker/aufs`位置。`执行驱动程序`已设置为`本机`模式。此命令还列出了详细信息，如`内核版本`、`操作系统`、`CPU`数量、`总内存`和`名称`，即新的Docker主机名。
- en: Client server communication
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端服务器通信
- en: On Linux installations, Docker is usually programmed for carrying out server-client
    communication by using the Unix socket (`/var/run/docker.sock`). Docker also has
    an IANA registered port, which is `2375`. However, for security reasons, this
    port is not enabled by default.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux安装中，Docker通常通过使用Unix套接字(`/var/run/docker.sock`)进行服务器-客户端通信。Docker还有一个IANA注册的端口，即`2375`。然而，出于安全原因，此端口默认情况下未启用。
- en: Downloading the first Docker image
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载第一个Docker镜像
- en: 'Having installed the Docker engine successfully, the next logical step is to
    download the images from the Docker registry. The Docker registry is an application
    repository, which hosts a range of applications that vary between basic Linux
    images and advanced applications. The `docker pull` subcommand is used for downloading
    any number of images from the registry. In this section, we will download a tiny
    version of Linux called the `busybox` image by using the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装了Docker引擎后，下一个逻辑步骤是从Docker注册表中下载镜像。Docker注册表是一个应用程序存储库，其中托管了一系列应用程序，从基本的Linux镜像到高级应用程序不等。`docker
    pull`子命令用于从注册表下载任意数量的镜像。在本节中，我们将使用以下命令下载一个名为`busybox`的小型Linux版本的镜像：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the images have been downloaded, they can be verified by using the `docker
    images` subcommand, as shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像被下载，可以使用`docker images`子命令进行验证，如下所示：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the first Docker container
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行第一个Docker容器
- en: 'Now, you can start your first Docker container. It is standard practice to
    start with the basic *Hello World!* application. In the following example, we
    will echo `Hello World!` by using a `busybox` image, which we have already downloaded,
    as shown here:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以启动您的第一个Docker容器。以基本的*Hello World!*应用程序开始是标准做法。在下面的示例中，我们将使用已经下载的`busybox`镜像来回显`Hello
    World!`，如下所示：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Cool, isn't it? You have set up your first Docker container in no time. In the
    preceding example, the `docker run` subcommand has been used for creating a container
    and for printing `Hello World!` by using the `echo` command.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷，不是吗？您已经在短时间内设置了您的第一个Docker容器。在上面的示例中，使用了`docker run`子命令来创建一个容器，并使用`echo`命令打印`Hello
    World!`。
- en: Running a Docker container on Amazon Web Services
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在亚马逊网络服务上运行Docker容器
- en: '**Amazon Web Services** (**AWS**) announced the availability of Docker containers
    at the beginning of 2014, as a part of its Elastic Beanstalk offering. At the
    end of 2014, they revolutionized Docker deployment and provided the users with
    options shown here for running Docker containers:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）在2014年初宣布了Docker容器的可用性，作为其Elastic Beanstalk提供的一部分。在2014年底，他们改革了Docker部署，并为用户提供了以下选项来运行Docker容器：'
- en: The Amazon EC2 container service (only available in **preview** mode at the
    time of writing this book)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊EC2容器服务（在撰写本书时仅处于**预览**模式）
- en: Docker deployment by using the Amazon Elastic Beans services
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用亚马逊弹性豆服务进行Docker部署
- en: The Amazon EC2 container service lets you start and stop the container-enabled
    applications with the help of simple API calls. AWS has introduced the concept
    of a cluster for viewing the state of your containers. You can view the tasks
    from a centralized service, and it gives you access to many familiar Amazon EC2
    features, such as the security groups, the EBS volumes and the IAM roles.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EC2容器服务允许您通过简单的API调用启动和停止容器启用的应用程序。AWS引入了集群的概念，用于查看容器的状态。您可以从集中式服务查看任务，并且它为您提供了许多熟悉的亚马逊EC2功能，如安全组、EBS卷和IAM角色。
- en: Please note that this service is still not available in the AWS console. You
    need to install AWS CLI on your machine to deploy, run, and access this service.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此服务仍未在AWS控制台中可用。您需要在您的机器上安装AWS CLI来部署、运行和访问此服务。
- en: 'The AWS Elastic Beanstalk service supports the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk服务支持以下内容：
- en: A single container that supports Elastic Beanstalk by using a console. Currently,
    it supports the PHP and Python applications.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制台支持Elastic Beanstalk的单个容器。目前，它支持PHP和Python应用程序。
- en: A single container that supports Elastic Beanstalk by using a command line tool
    called *eb*. It supports the same PHP and Python applications.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个名为*eb*的命令行工具支持Elastic Beanstalk的单个容器。它支持相同的PHP和Python应用程序。
- en: Use of multiple container environments by using Elastic beanstalk.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用Elastic Beanstalk使用多个容器环境。
- en: Currently, AWS supports the latest Docker version, which is 1.5.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，AWS支持最新的Docker版本，即1.5。
- en: 'This section provides a step-by-step process to deploy a sample application
    on a Docker container running on AWS Elastic Beanstalk.The following are the steps
    of deployment:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了在运行在AWS Elastic Beanstalk上的Docker容器上部署示例应用程序的逐步过程。以下是部署的步骤：
- en: Log in to the AWS Elastic Beanstalk console by using this [https://console.aws.amazon.com/elasticbeanstalk/](https://console.aws.amazon.com/elasticbeanstalk/)
    URL.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用此[https://console.aws.amazon.com/elasticbeanstalk/](https://console.aws.amazon.com/elasticbeanstalk/)
    URL登录到AWS Elastic Beanstalk控制台。
- en: Select a region where you want to deploy your application, as shown here:![Running
    a Docker container on Amazon Web Services](graphics/7937OT_01_03.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要部署应用程序的区域，如下所示：![在亚马逊网络服务上运行Docker容器](graphics/7937OT_01_03.jpg)
- en: Select the **Docker** option, which is in the drop down menu, and then click
    on **Launch Now**. The next screen will be shown after a few minutes, as shown
    here:![Running a Docker container on Amazon Web Services](graphics/7937OT_01_04.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择下拉菜单中的**Docker**选项，然后点击**立即启动**。几分钟后，下一个屏幕将显示如下：![在亚马逊网络服务上运行Docker容器](graphics/7937OT_01_04.jpg)
- en: 'Now, click on the URL that is next to **Default-Environment (Default-Environment-pjgerbmmjm.elasticbeanstalk.com)**,
    as shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击旁边的URL **Default-Environment (Default-Environment-pjgerbmmjm.elasticbeanstalk.com)**，如下所示：
- en: '![Running a Docker container on Amazon Web Services](graphics/7937OT_01_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![在亚马逊网络服务上运行Docker容器](graphics/7937OT_01_05.jpg)'
- en: Troubleshooting
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Most of the time, you will not encounter any issues when installing Docker.
    However, unplanned failures might occur. Therefore, it is necessary to discuss
    prominent troubleshooting techniques and tips. Let''s begin by discussing the
    troubleshooting knowhow in this section. The first tip is that the running status
    of Docker should be checked by using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，安装Docker时不会遇到任何问题。然而，可能会发生意外故障。因此，有必要讨论突出的故障排除技术和技巧。让我们从本节讨论故障排除知识开始。第一个提示是使用以下命令检查Docker的运行状态：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: However, if Docker has been installed by using the Ubuntu package, then you
    will have to use `docker.io` as the service name. If the `docker` service is running,
    then this command will print the status as `start/running` along with its process
    ID.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果Docker是通过Ubuntu软件包安装的，则必须使用`docker.io`作为服务名称。如果`docker`服务正在运行，则此命令将打印状态为`start/running`以及其进程ID。
- en: If you are still experiencing issues with the Docker setup, then you could open
    the Docker log by using the `/var/log/upstart/docker.log` file for further investigation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Docker设置中仍然遇到问题，那么您可以使用`/var/log/upstart/docker.log`文件打开Docker日志进行进一步调查。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Containerization is going to be a dominant and decisive paradigm for the enterprise
    as well as cloud IT environments in the future because of its hitherto unforeseen
    automation and acceleration capabilities. There are several mechanisms in place
    for taking the containerization movement to greater heights. However, Docker has
    zoomed ahead of everyone in this hot race, and it has successfully decimated the
    previously-elucidated barriers.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化将成为未来企业和云IT环境的主导和决定性范式，因为它具有迄今为止未曾预见的自动化和加速能力。有几种机制可以将容器化运动推向更高的高度。然而，在这场激烈的竞赛中，Docker已经遥遥领先，并成功摧毁了先前阐明的障碍。
- en: In this chapter, we have exclusively concentrated on the practical side of Docker
    for giving you a head start in learning about the most promising technology. We
    have listed the appropriate steps and tips for effortlessly installing the Docker
    engine in different environments, for leveraging and for building, installing,
    and running a few sample Docker containers, both in local as well as remote environments.
    We will dive deep into the world of Docker and dig deeper to extract and share
    tactically and strategically sound information with you in the ensuing chapters.
    Please read on to gain the required knowledge about advanced topics, such as container
    integration, orchestration, management, governance, security, and so on, through
    the Docker engine. We will also discuss a bevy of third-party tools.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于Docker的实际应用，为您提供学习最有前途的技术的起点。我们列出了在不同环境中轻松安装Docker引擎的适当步骤和技巧，以及利用和构建、安装和运行一些示例Docker容器的方法，无论是在本地还是远程环境中。我们将深入探讨Docker的世界，并深入挖掘，以在接下来的章节中与您分享战术和战略上的可靠信息。请继续阅读，以获取有关高级主题（如容器集成、编排、管理、治理、安全等）的所需知识，通过Docker引擎。我们还将讨论大量第三方工具。
