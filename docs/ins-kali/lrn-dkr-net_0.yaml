- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: This book helps the reader to learn, create, deploy, and provide administration
    steps for Docker networking. Docker is a Linux container implementation that enables
    the creation of light-weight portable development and production-quality environments.
    These environments can be updated incrementally. Docker achieves this by leveraging
    containment principles, such as cgroups and Linux namespaces, along with overlay
    filesystem-based portable images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书帮助读者学习、创建、部署和提供Docker网络的管理步骤。Docker是一个Linux容器实现，可以创建轻量级便携的开发和生产环境。这些环境可以进行增量更新。Docker通过利用cgroups和Linux命名空间等封装原则以及基于覆盖文件系统的便携式镜像来实现这一点。
- en: Docker provides the networking primitives that allow administrators to specify
    how different containers network with each application, connect to each of their
    components, then distribute them across a large number of servers, and ensure
    coordination between them irrespective of the host or the VM that they are running
    on. This book aggregates all the latest Docker networking technology and provides
    great in depth explanation with setup details.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Docker提供了网络原语，允许管理员指定不同容器如何与每个应用程序进行网络连接，连接到它们的各个组件，然后将它们分布在大量服务器上，并确保它们之间的协调，无论它们运行在哪个主机或虚拟机上。本书汇集了所有最新的Docker网络技术，并提供了深入的设置详细说明。
- en: What this book covers
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章《Docker网络入门》解释了Docker网络的基本组件，这些组件是从简单的Docker抽象和强大的网络组件（如Linux桥接、Open vSwitch等）演变而来。本章还解释了Docker容器可以以各种模式创建。在默认模式下，端口映射通过使用iptables
    NAT规则帮助我们，允许到达主机的流量到达容器。本章后面还涵盖了容器的基本链接以及下一代Docker网络——libnetwork。
- en: '[Chapter 1](part0014_split_000.html#DB7S1-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 1. Docker Networking Primer"), *Docker Networking Primer*, explains the
    essential components of Docker networking, which have evolved from coupling simple
    Docker abstractions and powerful network components, such as Linux bridges, Open
    vSwitch, and so on. This chapter also explains how Docker containers can be created
    with various modes. In the default mode, port mapping helps us through the use
    of iptables NAT rules, allowing traffic arriving at the host to reach containers.
    Later in this chapter, basic linking of the container is covered and the next
    generation of Docker networking, which is libnetwork, is also discussed.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书内容
- en: '[Chapter 2](part0022_split_000.html#KVCC1-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 2. Docker Networking Internals"), *Docker Networking Internals*, discusses
    Docker''s internal networking architecture. We will learn about IPv4, IPv6, and
    DNS configurations in Docker. Later in this chapter, Docker bridge and communication
    between containers in single host and multihost is covered. This chapter also
    explains overlay tunneling and different methods that are implemented on Docker
    networking, such as OVS, Flannel, and Weave.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第2章《Docker网络内部》讨论了Docker的内部网络架构。我们将了解Docker中的IPv4、IPv6和DNS配置。本章后面还涵盖了Docker桥接和单主机和多主机之间容器之间的通信。本章还解释了覆盖隧道和Docker网络上实现的不同方法，如OVS、Flannel和Weave。
- en: '[Chapter 3](part0027_split_000.html#PNV61-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 3. Building Your First Docker Network"), *Building Your First Docker
    Network*, shows how Docker containers communicate from multiple hosts using different
    networking options, such as Weave, OVS, and Flannel. Pipework uses legacy Linux
    bridge, Weave creates a virtual network, OVS uses GRE tunneling technology, and
    Flannel provides a separate subnet to each host to connect containers on multiple
    hosts. Some of the implementations, such as Pipework, are legacy and will become
    obsolete over a period of time, while others are designed to be used in the context
    of specific OSes, such as Flannel with CoreOS. Basic comparisons of Docker networking
    options are also covered in this chapter.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第3章，“构建您的第一个Docker网络”，展示了Docker容器如何使用不同的网络选项从多个主机进行通信，例如Weave、OVS和Flannel。Pipework使用传统的Linux桥接，Weave创建虚拟网络，OVS使用GRE隧道技术，Flannel为每个主机提供单独的子网，以连接多个主机上的容器。一些实现，如Pipework，是传统的，并将在一段时间内变得过时，而其他一些则设计用于特定操作系统的上下文中，例如Flannel与CoreOS。本章还涵盖了Docker网络选项的基本比较。
- en: '[Chapter 4](part0032_split_000.html#UGI02-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 4. Networking in a Docker Cluster"), *Networking in a Docker Cluster*,
    explains Docker networking in depth using various frameworks, such as native Docker
    Swarm, where using the libnetwork or the out-of the-box overlay network, Swarm,
    provides the multihost networking features. Kubernetes, on the other hand, has
    a different perspective from Docker, where each pod will get a unique IP address
    and communication between pods can occur with the help of services. Using Open
    vSwitch or IP-forwarding advanced routing rules, the Kubernetes networking can
    be enhanced to provide connectivity between pods on different subnets across hosts
    and expose the pods to the external world. In the case of Mesosphere, we can see
    that Marathon is used as a backend for the networking of the deployed containers.
    In the case of DCOS of the Mesosphere, the entire deployed stack of machines is
    treated as one machine to provide a rich-networking experience between deployed
    container services.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第4章，“Docker集群中的网络”，深入解释了Docker网络，使用各种框架，如原生Docker Swarm，使用libnetwork或开箱即用的覆盖网络，Swarm提供了多主机网络功能。另一方面，Kubernetes与Docker有不同的观点，其中每个pod将获得一个唯一的IP地址，并且可以借助服务在pod之间进行通信。使用Open
    vSwitch或IP转发高级路由规则，可以增强Kubernetes网络，以在不同子网的主机之间提供连接，并将pod暴露给外部世界。在Mesosphere的情况下，我们可以看到Marathon被用作部署容器的网络后端。在Mesosphere的DCOS情况下，整个部署的机器堆栈被视为一个机器，以在部署的容器服务之间提供丰富的网络体验。
- en: '[Chapter 5](part0036_split_000.html#12AK81-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 5. Security and QoS for Docker Containers"), *Security and QoS for Docker
    Containers*, takes a dive into Docker security by referring to kernel and cgroups
    namespaces. We will also visit some of the aspects of filesystems and various
    Linux capabilities, which containers leverage in order to provide more features,
    such as the privileged container but at the cost of exposing itself more on the
    threat side. We will also see how containers can be deployed in a secured environment
    in AWS ECS using proxy containers to restrict the vulnerable traffic. We will
    also talk about how AppArmor is also provided with a rich set of **Mandatory Access
    Control** (**MAC**) system, which provides kernel-enhancement features in order
    to confine applications to a limited set of resources. Leveraging their benefits
    to Docker containers helps us deploy them in a secured environment. In the last
    section, we take a quick dive into Docker security benchmarks and some of the
    important recommendations that can be followed during auditing and Docker deployment
    in a production environment.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](part0036_split_000.html#12AK81-2d417e3c905d4b6c9e03acfd1355cc86 "第5章。Docker容器的安全性和QoS")，“Docker容器的安全性和QoS”，通过引用内核和cgroups命名空间，深入探讨Docker安全性。我们还将讨论文件系统和各种Linux功能的一些方面，容器利用这些功能来提供更多功能，例如特权容器，但以暴露更多威胁为代价。我们还将看到如何在AWS
    ECS中部署容器在安全环境中使用代理容器来限制易受攻击的流量。我们还将讨论AppArmor提供了丰富的强制访问控制（MAC）系统，提供内核增强功能，以限制应用程序对有限资源的访问。利用它们对Docker容器的好处有助于在安全环境中部署它们。在最后一节中，我们将快速深入研究Docker安全基准和一些在审核和在生产环境中部署Docker时可以遵循的重要建议。'
- en: '[Chapter 6](part0043_split_000.html#190861-2d417e3c905d4b6c9e03acfd1355cc86
    "Chapter 6. Next Generation Networking Stack for Docker: libnetwork"), *Next Generation
    Networking Stack for Docker: libnetwork*, will look into some of the deeper and
    conceptual aspects of Docker networking. One of these is libnetworking—the future
    of the Docker network model, which is already getting into shape with the release
    of Docker 1.9\. While explaining the libnetworking concept, we will also study
    the CNM model, its various objects and components, along with its implementation
    code snippets. Next, we will look into drivers of CNM, the prime one being the
    overlay driver, in detail with deployment as part of Vagrant setup. We will look
    at standalone integrations of containers with overlay network with Docker Swarm
    and Docker Machine as well. In the next section, we explain the CNI interface,
    its executable plugins, and give a tutorial to configure Docker networking with
    the CNI plugin. In the last section, Project Calico is explained in detail, which
    provides scalable networking solutions that are based out of libnetwork and provides
    integration with Docker, Kubernetes, Mesos, bare-metal, and VMs, primarily.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](part0043_split_000.html#190861-2d417e3c905d4b6c9e03acfd1355cc86 "第6章。Docker的下一代网络堆栈：libnetwork")，“Docker的下一代网络堆栈：libnetwork”，将深入探讨Docker网络的一些更深层次和概念性方面。其中之一是libnetworking——Docker网络模型的未来，随着Docker
    1.9版本的发布已经初具规模。在解释libnetworking概念的同时，我们还将研究CNM模型，以及其各种对象和组件，以及其实现代码片段。接下来，我们将详细研究CNM的驱动程序，主要是覆盖驱动程序，并作为Vagrant设置的一部分进行部署。我们还将研究容器与覆盖网络的独立集成，以及Docker
    Swarm和Docker Machine。在接下来的部分中，我们将解释CNI接口，其可执行插件，并提供使用CNI插件配置Docker网络的教程。在最后一节中，将详细解释Project
    Calico，该项目提供基于libnetwork的可扩展网络解决方案，并与Docker、Kubernetes、Mesos、裸机和虚拟机集成。'
- en: What you need for this book
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所需内容
- en: Mostly all of the setups basically require Ubuntu 14.04 (either installed on
    a physical machine or as a virtual machine) and Docker 1.9, which is the latest
    version to date. Specific OS and software requirements (Open Source Git Projects)
    are mentioned before each setup if required.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上所有的设置都需要Ubuntu 14.04（安装在物理机器上或作为虚拟机）和Docker 1.9，这是截止目前的最新版本。如果需要，会在每个设置之前提到特定的操作系统和软件要求（开源Git项目）。
- en: Who this book is for
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这本书适合谁
- en: If you are a Linux administrator who wants to learn networking using Docker
    to ensure the efficient administration of core elements and applications, then
    this book is for you. Basic knowledge of LXC/Docker is assumed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一名Linux管理员，想要通过使用Docker来学习网络知识，以确保对核心元素和应用程序进行高效管理，那么这本书适合您。假定您具有LXC/Docker的基础知识。
- en: Conventions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: You will also find a number of text styles that distinguish between different
    kinds of information. Here are some examples of these styles and an explanation
    of their meaning.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会发现一些文本样式，用于区分不同类型的信息。以下是一些这些样式的示例和它们的含义解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "You
    may notice that we used the Unix command, `rm`, to remove the `Drush` directory
    rather than the DOS `del` command."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟URL、用户输入和Twitter用户名会显示如下：“您可能会注意到，我们使用了Unix命令`rm`来删除`Drush`目录，而不是DOS的`del`命令。”
- en: 'A block of code is set as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们希望引起您对代码块的特定部分的注意时，相关的行或项目会以粗体显示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何命令行输入或输出都会以以下形式书写：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**New** **terms** and **important** **words** are shown in bold. Words that
    you see on the screen, in menus or dialog boxes for example, appear in the text
    like this: "On the **Select** **Destination** **Location** screen, click on **Next**
    to accept the default destination."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**会以粗体显示。您在屏幕上看到的单词，比如菜单或对话框中的单词，会以这样的形式出现在文本中：“在**选择目标位置**屏幕上，点击**下一步**以接受默认目标。”'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要提示会出现在这样的框中。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Tips and tricks appear like this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧和窍门会以这样的形式出现。
