- en: Your First Java Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的第一个Java项目
- en: In the previous chapters, you learned quite a few things about Java, including
    its basic aspects, and main tools. Now, we are going to apply the knowledge acquired
    to complete and take the first step toward a real-life program—creating a Java
    project. We will show you how to write application code, how to test it, and how
    to execute the main code and its tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，您学到了关于Java的许多东西，包括其基本方面和主要工具。现在，我们将应用所学知识来完成并迈出迈向真实程序的第一步——创建一个Java项目。我们将向您展示如何编写应用程序代码，如何测试它以及如何执行主代码及其测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a project?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是项目？
- en: Creating a project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目
- en: Writing and building application code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和构建应用程序代码
- en: Executing and unit testing an application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行和单元测试应用程序
- en: 'Exercise: JUnit `@Before` and `@After` annotations'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：JUnit `@Before`和`@After`注解
- en: What is a project?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是项目？
- en: Let's start with the definition and origin of the term project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从项目的定义和起源开始。
- en: Definition and origin of project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目的定义和起源
- en: The term *project*, according to an English by Oxford Dictionaries, is *an individual
    or collaborative enterprise that is carefully planned to achieve a particular
    aim*. The term was adopted by the designers of IDEs to mean the collection of
    files that compose an application. That is why the term project is often used
    as a synonym for an application, too.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据牛津词典的英语，术语*项目*是*一个个人或协作的企业，经过精心计划以实现特定目标*。这个术语被IDE的设计者采用，意思是组成应用程序的文件集合。这就是为什么项目这个术语经常被用作应用程序的同义词。
- en: Project-related terms
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与项目相关的术语
- en: The files that constitute the project are stored in the directories of a filesystem.
    The top-most directory is called the *project root directory*, and the rest of
    the project directories form a tree underneath it. That's why a project can also
    be seen as a tree of directories that contain all of the `.java` files and other
    files that comprise the source code of an application and its tests. Non-Java
    files are usually called `resources`, and are stored in a directory with the same
    name.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 构成项目的文件存储在文件系统的目录中。最顶层的目录称为*项目根目录*，项目的其余目录形成其下的树。这就是为什么项目也可以被看作是包含应用程序和其测试的所有`.java`文件和其他文件的目录树。非Java文件通常称为`资源`，并存储在同名目录中。
- en: Programmers also use the terms *source code tree*, *source code*, or just *source*,
    as synonyms for aproject.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员还使用*源代码树*、*源代码*或*源*这些术语作为项目的同义词。
- en: When a project uses the classes of another project, they are packaged in a `.jar`
    file and usually constitute a *library* (a collection of, more or less, independent
    classes) or *framework* (a system of classes designed to work together in support
    of certain functionalities). The difference between a library and a framework
    does not affect how your project accesses its classes, so from now on, we will
    call all of the third-party `.jar` files used by the project libraries for brevity. 
    In the *Maven project configuration* section, we will show you how to access such
    libraries, if your code needs them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个项目使用另一个项目的类时，它们被打包成一个`.jar`文件，通常构成一个*库*（一个或多个独立类的集合）或*框架*（一组旨在共同支持某些功能的类）。库和框架之间的区别不影响您的项目如何访问其类，因此从现在开始，我们将称项目使用的所有第三方`.jar`文件为库。在*Maven项目配置*部分，我们将向您展示如何访问这些库，如果您的代码需要它们。
- en: A project's life cycle
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目的生命周期
- en: 'The Java project life cycle consists of the following phases (steps, stages):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Java项目的生命周期包括以下阶段（步骤、阶段）：
- en: 'Feasibility: when a determination is made on whether to proceed with the project
    or not'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可行性：是否继续进行项目的决定
- en: Requirements-gathering and high-level design
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求收集和高级设计
- en: Class-level design:* the first phase of the development phases*
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类级设计：*开发阶段的第一阶段*
- en: Project creation
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目创建
- en: Writing application code and its unit tests
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写应用程序代码及其单元测试
- en: Project building: code compilation
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目构建：代码编译
- en: Storing the source code in a remote repository and sharing it with other programmers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将源代码存储在远程存储库中并与其他程序员共享
- en: 'Project packaging: gathering `.class` files and all the supporting non-Java
    files into a `.jar` file that is commonly called a *project artifact* or just
    an *artifact*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目打包：将`.class`文件和所有支持的非Java文件收集到一个`.jar`文件中，通常称为*项目构件*或*构件*
- en: 'Project installation: saving the artifact in a binary repository (also called
    *an* *artifactory*), from where it can be retrieved and shared among other programmers.
    This phase is the last one of the development phases'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目安装：将构件保存在二进制存储库（也称为*构件库*）中，从中可以检索并与其他程序员共享。这个阶段是开发阶段的最后一个阶段
- en: Project deployment and execution in a test environment; placing the artifact
    into an environment where it can be executed and tested under the condition similar
    to production, *this is the testing phase*
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试环境中部署和执行项目；将构件放入一个可以在类似于生产环境的条件下执行和测试的环境中，*这是测试阶段*
- en: Project deployment and execution in the production environment: *this is the
    first phase of the production (also called maintenance) phases*
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目在生产环境中部署和执行：*这是生产（也称为维护）阶段的第一阶段*
- en: Project enhancement and maintenance:fixing the defects and adding new features
    to the application
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目增强和维护：修复缺陷并向应用程序添加新功能
- en: Shutting down the project after it is not needed anymore
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不再需要项目后关闭项目
- en: 'In this book, we cover only four project phases:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只涵盖了四个项目阶段：
- en: Project design (see [Chapter 8](2dc9b974-3d85-458b-ac71-a7fae4599a00.xhtml),
    *Object-Oriented Design (OOD) Principles*)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目设计（参见[第8章](2dc9b974-3d85-458b-ac71-a7fae4599a00.xhtml)，*面向对象设计（OOD）原则*）
- en: Project creation
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目创建
- en: Writing application code and its unit tests
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写应用程序代码及其单元测试
- en: Project building, which is a code compilation using the `javac` tool
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目构建，使用`javac`工具进行代码编译
- en: We will show you how to perform all these phases using the IntelliJ IDEA Community
    edition, but similar procedures are available with other IDEs, too.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何使用IntelliJ IDEA社区版执行所有这些阶段，但其他IDE也有类似的操作。
- en: To build the project, IDE uses Java Compiler (the `javac` tool) and a dependency
    managing tool. The latter sets the values of the `-classpath` option in the `javac` and `java` commands.
    The three most popular dependency managing tools are Maven, Gradle, and Ant. IntelliJ
    IDEA has a built-in Maven capability and does not require installing an external
    dependency managing tool.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建项目，IDE使用Java编译器（`javac`工具）和依赖管理工具。后者设置了`javac`和`java`命令中`-classpath`选项的值。最流行的三种依赖管理工具是Maven、Gradle和Ant。IntelliJ
    IDEA具有内置的Maven功能，不需要安装外部的依赖管理工具。
- en: Creating a project
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'There are several ways to create a project in IntelliJ IDEA (or any other IDE,
    for that matter):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种在IntelliJ IDEA（或其他任何IDE）中创建项目的方法：
- en: Using a project wizard (see the *Creating a project using a project wizard* section)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用项目向导（请参阅“使用项目向导创建项目”部分）
- en: Reading the existing source code from the filesystem
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文件系统中读取现有源代码
- en: Reading the existing source code from the source-control system
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码控制系统中读取现有源代码
- en: In this book, we will walk you through the first option only—using a project
    wizard. The other two options are just point-and-read, in one step, and do not
    require much of an explanation. After you learn how to create a project manually,
    you will understand what happens behind the scenes, during the automatic creation
    from the existing source.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只会介绍第一种选项——使用项目向导。其他两个选项只需一步即可完成，无需太多解释。在学会如何手动创建项目之后，您将了解在从现有源代码自动创建项目时发生了什么。
- en: Creating a project using a project wizard
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用项目向导创建项目
- en: 'When you start IntelliJ IDEA except for the first time, it will show you a
    list of already created projects. Otherwise, you will see the following screen
    only:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启动IntelliJ IDEA时，除了第一次，它会显示您已创建的项目列表。否则，您只会看到以下屏幕：
- en: '![](img/d9c1ca00-c44a-4df6-a758-41466300cb6b.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9c1ca00-c44a-4df6-a758-41466300cb6b.png)'
- en: The three options – Import Project, Open, and Check out from Version Control –
    allow you to work on an existing project. We are not going to use them in this
    book.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 导入项目、打开项目和从版本控制中检出这三个选项允许您处理现有项目。我们在本书中不会使用它们。
- en: Click the Create New Project link, which brings you to the first screen of the
    project-creation wizard. Choose Java in the upper-left corner, then click the
    New button in the upper-right corner, and select the location of the JDK installed
    on your computer. After that, click the OK button in the bottom-right corner.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建新项目”链接，这将带您到项目创建向导的第一个屏幕。在左上角选择Java，然后单击右上角的“新建”按钮，并选择计算机上安装的JDK的位置。之后，单击右下角的“确定”按钮。
- en: 'On the next window, do not select anything, and just click the Next button:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，不要选择任何内容，只需单击“下一步”按钮：
- en: '![](img/61ba60bf-f3e7-4947-b186-8ce954d1be64.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61ba60bf-f3e7-4947-b186-8ce954d1be64.png)'
- en: You don't see the  Next button in the preceding screenshot because it is at
    the bottom of the actual screen, and the rest is empty space, which we decided
    not to show here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您在上面的屏幕截图中看不到“下一步”按钮，因为它在实际屏幕的底部，其余部分是空白空间，我们决定不在这里显示。
- en: 'On the next screen, enter the project name (typically, your application name)
    in the upper field, as shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕中，在上方的字段中输入项目名称（通常是您的应用程序名称），如下所示：
- en: '![](img/1421815e-24de-4e39-8cec-9bba0f4fd9f9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1421815e-24de-4e39-8cec-9bba0f4fd9f9.png)'
- en: 'For our demo code, we have chosen the project (application) name to be `javapath`, in
    the sense of the path to the Java programming. Click the Finish button at the
    bottom of the preceding screen, and you should see something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的演示代码，我们选择了项目（应用程序）名称为`javapath`，意思是Java编程的路径。单击上一个屏幕底部的“完成”按钮，您应该会看到类似于这样的内容：
- en: '![](img/25b5df1f-4238-4be3-8534-e105e42805bc.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25b5df1f-4238-4be3-8534-e105e42805bc.png)'
- en: 'If you don''t see the project structure in the left pane, click View (in the
    top-most menu), then Tool Windows, then Project, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在左窗格中看不到项目结构，请单击“查看”（在最顶部菜单中），然后选择“工具窗口”，然后选择“项目”，如下面的屏幕截图所示：
- en: '![](img/e275f861-da88-4088-a94a-f662403384f7.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e275f861-da88-4088-a94a-f662403384f7.png)'
- en: 'Now you should be able to see the project structure:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够看到项目结构：
- en: '![](img/5ee3b110-40db-43bf-9b63-d774581d76ff.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ee3b110-40db-43bf-9b63-d774581d76ff.png)'
- en: 'The preceding project includes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的项目包括：
- en: The `.idea` directory that holds the IntelliJ IDEA settings for your project
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.idea`目录保存了项目的IntelliJ IDEA设置'
- en: 'The `src` directory, with subdirectories:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`目录，包括子目录：'
- en: '`main`, which will hold your application files in its `java` subdirectory (for
    `.java` files) and `resources` subdirectory (for other types of files),'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main`，将在其`java`子目录（对于`.java`文件）和`resources`子目录（对于其他类型的文件）中保存应用程序文件，'
- en: '`test`, which will hold the tests for your application in its `java` (for `.java` files)
    and the `resources` subdirectory (for other types of files).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`，将在其`java`（对于`.java`文件）和`resources`子目录（对于其他类型的文件）中保存应用程序的测试。'
- en: The `javapath.iml` file, which is another IntelliJ IDEA file with project configurations
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javapath.iml`文件，这是另一个带有项目配置的IntelliJ IDEA文件'
- en: The `External Libraries` directory, which holds all of the libraries your project
    is using
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`External Libraries`目录，其中包含项目使用的所有库'
- en: 'In the preceding screenshot, you can also see the `pom.xml` file. This file
    is used to describe other libraries your code requires. We will explain how to
    use it in the *Maven project configuration* section. IDE generated it automatically,
    because in the previous chapter, while configuring the IDE, we indicated our desire
    to integrate with Maven in the IDE default settings. If you have not done that,
    you can now right-click on the project name (`JavaPath`, in our case) and select
    Add Framework Support:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你还可以看到`pom.xml`文件。这个文件用于描述代码所需的其他库。我们将在“Maven项目配置”部分解释如何使用它。IDE会自动生成它，因为在上一章中，在配置IDE时，我们指示了我们希望在IDE默认设置中与Maven集成。如果你还没有这样做，现在你可以右键单击项目名称（在我们的例子中是`JavaPath`），然后选择“添加框架支持”：
- en: '![](img/fd6fe0b9-d54c-462c-b45c-d40a1e40db73.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd6fe0b9-d54c-462c-b45c-d40a1e40db73.png)'
- en: 'Then, you will be presented with the screen where you can select Maven:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到一个屏幕，你可以选择Maven：
- en: '![](img/4ab050c6-5a58-44be-8f58-756afa545957.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ab050c6-5a58-44be-8f58-756afa545957.png)'
- en: 'Click the OK button, and the `pom.xml` file will be created. The same steps
    should be followed if the `pom.xml` file does not have the Maven symbol, as in
    the preceding screenshots. Here is how it looks after Maven support is added:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮，`pom.xml`文件将被创建。如果`pom.xml`文件没有Maven符号，应该按照前面的截图进行相同的步骤。添加Maven支持后的效果如下：
- en: '![](img/9cf1a0bf-2b97-459f-9abe-2fb46d64cc2a.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cf1a0bf-2b97-459f-9abe-2fb46d64cc2a.png)'
- en: 'Another way to trigger `pom.xml` creation is to respond to a small window in
    the lower-right corner that pops up with various suggestions, including Add as
    Maven Project (it means that the code dependencies are going to be managed by
    Maven):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 触发`pom.xml`创建的另一种方法是响应右下角弹出的小窗口，其中包含各种建议，包括“添加为Maven项目”（这意味着代码依赖将由Maven管理）：
- en: '![](img/ad8b0ad0-e94e-465c-b8d6-ed44567a3de9.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad8b0ad0-e94e-465c-b8d6-ed44567a3de9.png)'
- en: 'If you have missed clicking the preceding link, you can still recover the suggestion
    by clicking the link at the bottom line:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你错过了点击前面的链接，你仍然可以通过点击底部的链接来恢复建议：
- en: '![](img/20cf88b3-d22d-42b9-bdf5-9096150d0c7c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20cf88b3-d22d-42b9-bdf5-9096150d0c7c.png)'
- en: 'It will bring the suggestion back into the bottom-left corner of the screen:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它将把建议带回到屏幕左下角：
- en: '![](img/ddd94b75-8dde-4477-9f1f-d7d8b59d5888.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddd94b75-8dde-4477-9f1f-d7d8b59d5888.png)'
- en: Click on the Add as Maven Project link, and the `pom.xml` file will be created.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“添加为Maven项目”链接，`pom.xml`文件将被创建。
- en: 'Another helpful suggestion looks like the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的建议如下：
- en: '![](img/cfc6d2f8-2f92-4f4c-8829-2911c6e9ca5a.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfc6d2f8-2f92-4f4c-8829-2911c6e9ca5a.png)'
- en: We recommend that you click the Enable Auto-Import link. It will allow IDE to
    support your project even better, by relieving you from having to do certain things
    manually.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议你点击“启用自动导入”链接。这将使IDE更好地支持你的项目，从而免除你手动执行某些操作。
- en: If none of the preceding methods work for you, it is always possible to create
    the `pom.xml` file manually. Just right-click on the project name (`JavaPath`)
    in the left pane, select New, select File, then type the filename, `pom.xml`,
    and click the OK button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以上方法都不适用于你，总是可以手动创建`pom.xml`文件。只需右键单击左窗格中的项目名称（`JavaPath`），选择“新建”，选择“文件”，然后输入文件名`pom.xml`，并点击“确定”按钮。
- en: Maven project configuration
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven项目配置
- en: As we have already mentioned, Maven helps to compose the `javac` and `java` commands when
    you compile and run your application. It sets the value of the `-classpath` option.
    To accomplish it, Maven reads the list of libraries your project needs from `pom.xml`.
    It is your responsibility to correctly specify these libraries. Otherwise, Maven
    will not be able to find them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，Maven在编译和运行应用程序时帮助组成`javac`和`java`命令。它设置了`-classpath`选项的值。为了实现这一点，Maven从`pom.xml`中读取项目所需的库列表。你有责任正确指定这些库。否则，Maven将无法找到它们。
- en: By default, the `pom.xml` file is located in the project root directory. That
    is also the directory where IDE runs the `javac` command and sets the `src/main/java` directory
    on the classpath so that `javac` can find the source files of your project. It
    puts the compiled `.class` files in the `target/classes` directory into the root
    directory too, and sets this directory on the classpath while executing the `java` command.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`pom.xml`文件位于项目根目录。这也是IDE运行`javac`命令并将`src/main/java`目录设置为类路径的目录，以便`javac`可以找到项目的源文件。它还将编译后的`.class`文件放在`target/classes`目录中，也放在根目录中，并在执行`java`命令时将此目录设置为类路径。
- en: 'Another function of `pom.xml` is to describe your project so that it can be
    uniquely identified among all other projects on your computer, and even among
    all other projects on the internet. That is what we are going to do now. Let''s
    look inside the `pom.xml` file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`pom.xml`的另一个功能是描述你的项目，以便它可以在你的计算机上唯一地被识别，甚至在互联网上的所有其他项目中也是如此。这就是我们现在要做的。让我们来看看`pom.xml`文件的内部：'
- en: '![](img/ede91dcf-6317-495e-a25a-978535dca95c.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ede91dcf-6317-495e-a25a-978535dca95c.png)'
- en: 'You can see the three XML tags that identify your project:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到标识项目的三个XML标签：
- en: '`groupId` identifies a group of projects within an organization or an open
    source community'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`标识组织或开源社区内项目的组'
- en: '`artifactId` identifies a particular project within the group'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`标识组内的特定项目'
- en: '`version` identifies the version of the project'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`标识项目的版本'
- en: The value set in the `groupId` tag has to follow the package-naming convention,
    so now, we need to explain what a package is. A package is the biggest structural
    unit of the Java application. Each package groups related Java classes. Two different
    classes in different packages can have the same name. That's why a package is
    also called a namespace.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId`标签中设置的值必须遵循包命名约定，所以现在，我们需要解释一下包是什么。包是Java应用程序的最大结构单元。每个包都将相关的Java类分组在一起。不同包中的两个不同类可以具有相同的名称。这就是为什么包也被称为命名空间。'
- en: The package name has to be unique. It enables us to identify a class correctly,
    even when a class with the same name exists in other packages listed on the classpath.
    The package can have several subpackages. They are organized in a hierarchy similar
    to the directory structure of a filesystem. The package that contains all the
    other packages is called a top-level package. Its name is used as the `groupId` tag
    value of the `pom.xml` file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 包名必须是唯一的。它使我们能够正确地识别一个类，即使在类路径上列出了具有相同名称的其他包中存在一个类。包可以有几个子包。它们以类似于文件系统的目录结构的层次结构组织。包含所有其他包的包称为顶级包。它的名称被用作`pom.xml`文件的`groupId`标签值。
- en: The package-naming convention requires that the top-level package name is based
    on the internet domain name (in reverse order) of the organization that created
    the package. For example, if the domain name is `oracle.com`, then the top-level
    package name has to be `com.oracle` followed by (after a dot, `.`) the project
    name. Alternatively, a subdomain, a department name, or any other project group
    can be inserted between the reversed domain name and project name. Then, other
    subpackages follow.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 包命名约定要求顶级包名基于创建包的组织的互联网域名（倒序）。例如，如果域名是`oracle.com`，那么顶级包名必须是`com.oracle`，后面跟着（在一个点，`.`后）项目名称。或者，可以在倒置的域名和项目名称之间插入子域、部门名称或任何其他项目组。然后，其他子包跟随。
- en: Many packages of JDK standard libraries, start with `jdk`, `java`, or `javax`,
    for example. But the best practice is to follow the described naming convention
    defined in section $6.1 of the Java Specification ([https://docs.oracle.com/javase/specs](https://docs.oracle.com/javase/specs)).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 许多JDK标准库的包以`jdk`、`java`或`javax`开头，例如。但最佳实践是遵循Java规范第6.1节中定义的命名约定（[https://docs.oracle.com/javase/specs](https://docs.oracle.com/javase/specs)）。
- en: Selecting a unique package name may be problematic when an open source project
    starts without any organization in mind. In such cases, programmers often use
    `org.github.<author's name>` or something similar.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个独特的包名可能会有问题，当一个开源项目开始时，没有任何组织在脑海中。在这种情况下，程序员通常使用`org.github.<作者的名字>`或类似的东西。
- en: In our project, we have a top-level `com.packt.javapath` package. By doing so,
    we took a bit of a risk, because another Packt author may decide to start the
    packages with the same name. It would be better to start our packages with `com.packt.nicksamoylov.javapath`.
    This way, the author's name would resolve the possible conflict, unless, of course,
    another author with the same name starts writing Java books for Packt. But, we
    decided to take the risk for brevity. Besides, we do not think that the code we
    are creating in this book will be used by another project.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们有一个顶级的`com.packt.javapath`包。这样做有一点风险，因为另一个Packt的作者可能决定以相同的名称开始包。最好以`com.packt.nicksamoylov.javapath`开始我们的包。这样，作者的名字将解决可能的冲突，除非当然，另一个同名的作者开始为Packt写Java书。但是，我们决定冒险简洁。此外，我们认为我们在这本书中创建的代码不会被另一个项目使用。
- en: So, the `groupId` tag value for our project will be `com.packt.javapath`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们项目的`groupId`标签值将是`com.packt.javapath`。
- en: The `artifactId` tag value is typically set to the project name.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`artifactId`标签值通常设置为项目名称。'
- en: The `version` tag value contains the project version.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`version`标签值包含项目版本。'
- en: The `artifactId` and `version` are used to form a `.jar` filename during the
    project packaging. For example, if the project name is `javapath` and the version
    is `1.0.0`, the `.jar` filename will be `javapath-1.0.0.jar`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`artifactId`和`version`用于在项目打包期间形成`.jar`文件名。例如，如果项目名称是`javapath`，版本是`1.0.0`，`.jar`文件名将是`javapath-1.0.0.jar`。'
- en: 'So, our `pom.xml` will now look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的`pom.xml`现在看起来像这样：
- en: '![](img/7101640e-2074-4130-82b3-97ef4adedbc0.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7101640e-2074-4130-82b3-97ef4adedbc0.png)'
- en: Notice the `-SNAPSHOT` suffix in the version. Its usefulness becomes apparent
    only when you are going to share the same project with other programmers. But
    we will explain it now, so that you understand the purpose of this value. When
    an artifact of a project (a `.jar` file) is created, its name will be `javapath-1.0-SNAPSHOT.jar`.
    The presence of `-SNAPSHOT` in the filename indicates that it is a work in progress
    and the code is changing from build to build. This way, other Maven-managed projects that
    use your artifact will download it every time a timestamp on the `.jar` file changes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意版本中的`-SNAPSHOT`后缀。它的用处只有当您要与其他程序员共享同一个项目时才会显现出来。但我们现在会解释它，这样您就能理解这个值的目的。当一个项目的构件（一个`.jar`文件）被创建时，它的名称将是`javapath-1.0-SNAPSHOT.jar`。文件名中的`-SNAPSHOT`表示它是一个正在进行的工作，代码正在从构建到构建中改变。这样，使用您的构件的其他Maven管理的项目将在`.jar`文件上的时间戳更改时每次下载它。
- en: When the code stabilizes and the changes become rare, you can set the version
    value to `1.0.0` and change it only when the code changes and a new project version
    is released—`javapath-1.0.0.jar`, `javapath-1.0.1.jar`, or `javapath-1.2.0.jar`,
    for example. Then, a other projects that use the javapath `.jar` file do not download
    a new file version automatically. Instead, the programmers of another projects
    can read the release notes of each new version and decide whether to use it or
    not; a new version may introduce changes that are not desirable, or are incompatible
    with their application code. If they decide they need a new version, they set
    it in the `pom.xml` file in the `dependencies` tag of their project, and Maven
    downloads it for them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码稳定下来，更改变得罕见时，您可以将版本值设置为`1.0.0`，并且只有在代码更改并发布新项目版本时才更改它——例如`javapath-1.0.0.jar`、`javapath-1.0.1.jar`或`javapath-1.2.0.jar`。然后，使用`javapath`的其他项目不会自动下载新的文件版本。相反，另一个项目的程序员可以阅读每个新版本的发布说明，并决定是否使用它；新版本可能会引入不希望的更改，或者与他们的应用程序代码不兼容。如果他们决定需要一个新版本，他们会在项目的`pom.xml`文件中的`dependencies`标签中设置它，然后Maven会为他们下载它。
- en: 'In our `pom.xml` file, there is no `dependencies` tag yet. But it can be placed
    anywhere inside of the `<project>...</project>` tags. Let''s look at a few examples
    of dependencies in a `pom.xml` file. We can add them to the project now, because
    we are going to use them later, anyway:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`pom.xml`文件中，还没有`dependencies`标签。但它可以放置在`<project>...</project>`标签的任何位置。让我们看一下`pom.xml`文件中依赖项的一些示例。我们现在可以将它们添加到项目中，因为无论如何我们以后都会使用它们：
- en: '```java'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: <dependencies>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <dependencies>
- en: <dependency>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <dependency>
- en: <groupId>org.junit.jupiter</groupId>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <groupId>org.junit.jupiter</groupId>
- en: <artifactId>junit-jupiter-api</artifactId>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <artifactId>junit-jupiter-api</artifactId>
- en: <version>5.1.0-M1</version>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <version>5.1.0-M1</version>
- en: </dependency>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: </dependency>
- en: <dependency>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <dependency>
- en: <groupId>org.postgresql</groupId>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <groupId>org.postgresql</groupId>
- en: <artifactId>postgresql</artifactId>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <artifactId>postgresql</artifactId>
- en: <version>42.2.2</version>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <version>42.2.2</version>
- en: </dependency>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: </dependency>
- en: <dependency>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <dependency>
- en: <groupId>org.apache.commons</groupId>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <groupId>org.apache.commons</groupId>
- en: <artifactId>commons-lang3</artifactId>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <artifactId>commons-lang3</artifactId>
- en: <version>3.4</version>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <version>3.4</version>
- en: </dependency>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: </dependency>
- en: </dependencies>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: </dependencies>
- en: '```'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The first `org.junit.jupiter` dependency refers to a `junit-jupiter-api-5.1.0-M1.jar`
    file that contains the `.class` files necessary for writing tests. We will use
    it in the next section, *Writing an application code and tests*.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`org.junit.jupiter`依赖项是指`junit-jupiter-api-5.1.0-M1.jar`文件，其中包含编写测试所需的`.class`文件。我们将在下一节*编写应用程序代码和测试*中使用它。
- en: The second `org.postgresql` dependency refers to a `postgresql-42.2.2.jar` file
    that allows us to connect and work with the PostgreSQL database. We will use this
    dependency in [Chapter 16](d77f1f16-0aa6-4d13-b9a8-f2b6e195f0f1.xhtml), *Database
    Programming*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`org.postgresql`依赖项是指`postgresql-42.2.2.jar`文件，允许我们连接并使用PostgreSQL数据库。我们将在[第16章](d77f1f16-0aa6-4d13-b9a8-f2b6e195f0f1.xhtml)中使用此依赖项，*数据库编程*。
- en: The third dependency refers to the `org.apache.commons` file, `commons-lang3-3.4.jar`,
    that contains many small, very useful methods called utilities, some of which
    we are going to use generously, for various purposes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个依赖项是指`org.apache.commons`文件`commons-lang3-3.4.jar`，其中包含许多称为实用程序的小型、非常有用的方法，其中一些我们将大量使用，用于各种目的。
- en: 'Each of these `.jar` files is stored in a repository on the internet. By default,
    Maven will search its own central repository, located at [http://repo1.maven.org/maven2](http://repo1.maven.org/maven2).
    The vast majority of the libraries you need are stored there. But in the rare
    case that you need to specify other repositories—in addition to the Maven central
    one—you can do it as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`.jar`文件都存储在互联网上的一个仓库中。默认情况下，Maven将搜索其自己的中央仓库，位于[http://repo1.maven.org/maven2](http://repo1.maven.org/maven2)。您需要的绝大多数库都存储在那里。但在您需要指定其他仓库的罕见情况下，除了Maven中央仓库之外，您可以这样做：
- en: '```java'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: <repositories>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <repositories>
- en: <repository>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <repository>
- en: <id>my-repo1</id>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <id>my-repo1</id>
- en: <name>your custom repo</name>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <name>your custom repo</name>
- en: <url>http://jarsm2.dyndns.dk</url>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <url>http://jarsm2.dyndns.dk</url>
- en: </repository>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: </repository>
- en: <repository>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <repository>
- en: <id>my-repo2</id>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <id>my-repo2</id>
- en: <name>your custom repo</name>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <name>your custom repo</name>
- en: <url>http://jarsm2.dyndns.dk</url>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <url>http://jarsm2.dyndns.dk</url>
- en: </repository>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: </repository>
- en: </repositories>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: </repositories>
- en: '```'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Read the Maven guides for more details on Maven at [http://maven.apache.org/guides](http://maven.apache.org/guides).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读Maven指南，了解有关Maven的更多详细信息[http://maven.apache.org/guides](http://maven.apache.org/guides)。
- en: With the `pom.xml` file configured, we can start writing code for our first
    application. But before that, we would like to mention how you can customize the
    configuration of IntelliJ IDEA to match your preferences for the look and feel
    and other features of the IDE.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了`pom.xml`文件后，我们可以开始为我们的第一个应用程序编写代码。但在此之前，我们想提一下如何自定义IntelliJ IDEA的配置，以匹配您对IDE外观和其他功能的偏好。
- en: Changing IDE settings at any time
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随时更改IDE设置
- en: You can change IntelliJ IDEA settings and project configuration any time, to
    adjust the appearance and behavior of the IDE to the style most comfortable for
    you. Take your time and see what you can set on each of the following configuration
    pages.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时更改IntelliJ IDEA的设置和项目配置，以调整IDE的外观和行为，使其最适合您的风格。花点时间看看您可以在以下每个配置页面上设置什么。
- en: 'To change the configuration of IntelliJ IDEA itself:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改IntelliJ IDEA本身的配置：
- en: 'On Windows: click File on the top-most menu, then select Settings'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上：点击顶部菜单上的文件，然后选择设置
- en: On Linux and macOS: click IntelliJ IDEA on the top-most menu, then select Preferences
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux和macOS上：点击顶部菜单上的IntelliJ IDEA，然后选择首选项
- en: 'The configuration screen that you access will look similar to the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您访问的配置屏幕将类似于以下内容：
- en: '![](img/d957132c-f95f-4808-8c69-af37ff21b84c.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d957132c-f95f-4808-8c69-af37ff21b84c.png)'
- en: Click around and see what you can do here, so that you know the possibilities
    of your IDE.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 四处点击并查看您在这里可以做什么，以便了解IDE的可能性。
- en: To change project specific settings, click File, then select Project Structure,
    and see the available settings and options. Notice that the same screen can be
    accessed by right-clicking on the project name (in the left pane) and then selecting
    Open Module Settings.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改特定于项目的设置，请单击文件，然后选择项目结构，并查看可用的设置和选项。请注意，可以通过右键单击项目名称（在左窗格中）然后选择打开模块设置来访问相同的屏幕。
- en: After you have established your own style and know your preferences, you can
    set them as the default settings for the IDE configuration via File | Other Settings |
    Default Settings.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在您建立了自己的风格并了解了自己的偏好之后，您可以将它们设置为IDE配置的默认设置，方法是通过文件|其他设置|默认设置。
- en: The default project structure can be also set via File | Other Settings | Default
    Project Structure. These default settings will be applied automatically, every
    time you create a new project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 默认项目结构也可以通过文件|其他设置|默认项目结构进行设置。这些默认设置将在每次创建新项目时自动应用。
- en: With that out of our way, we can start writing our application code.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们可以开始编写我们的应用程序代码了。
- en: Writing an application code
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写应用程序代码
- en: This is the most interesting activity of a programmer's profession. And that
    is the purpose of this book – to help you write Java code well.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序员职业中最有趣的活动。这也是本书的目的——帮助你写出优秀的Java代码。
- en: 'Let''s start with the requirements for your first application. It should take
    an integer number as an input, multiply it by `2`, and print the result in the
    following format: `<the input number> * 2 = <result>`.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从你的第一个应用程序的需求开始。它应该接受一个整数作为输入，将其乘以`2`，并以以下格式打印结果：`<输入数字> * 2 = <结果>`。
- en: 'Now, let''s come up with the design. We will create the `SimpleMath` class
    with the `multiplyByTwo(int i)` method that will accept an integer and return
    the result. This method will be called by the `main()` method of the `MyApplication` class.
    The `main()` method should:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来设计一下。我们将创建`SimpleMath`类，其中包含`multiplyByTwo(int i)`方法，该方法将接受一个整数并返回结果。这个方法将被`MyApplication`类的`main()`方法调用。`main()`方法应该：
- en: Receive an input number from a user
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从用户那里接收一个输入数字
- en: Pass the input value into the `multiplyByTwo(int i)` method
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将输入值传递给`multiplyByTwo(int i)`方法
- en: Get back the result
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 得到结果
- en: Print it on a screen in the required format
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以所需的格式在屏幕上打印出来
- en: We will also create tests for the `multiplyByTwo(int i)` method, to make sure
    that the code we have written works correctly.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将为`multiplyByTwo(int i)`方法创建测试，以确保我们编写的代码能够正确运行。
- en: We will start by creating directories that will hold our `.java` files. The
    directory path must match the package name of each class. We have talked about
    a package already, and set the top-level package name as a `groupId` value. Now,
    we will describe how to declare it in the `.java` files.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建包含我们的`.java`文件的目录。目录路径必须与每个类的包名匹配。我们已经讨论过包，并将顶级包名设置为`groupId`值。现在，我们将描述如何在`.java`文件中声明它。
- en: Java package declaration
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java包声明
- en: Package declaration is the first line of any Java class. It starts with the
    `package` keyword, followed by the package name. The `javac` and `java` tools
    search for a class on a classpath using a fully qualified class name, which is
    a class name with the package name appended in front of it. For example, if we
    put the `MyApplication` class in the `com.packt.javapath.ch04demo` package, the
    fully qualified name of this class will be `com.packt.javapath.ch04demo.MyApplication`.
    As you could guess, `ch04demo` stands for the *demo code* of Chapter 4\. This
    way, we can use the same class name in different chapters, and they will not clash.
    That is how the package name serves the purpose of unique identification of a
    class on a classpath.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 包声明是任何Java类的第一行。它以`package`关键字开头，后面跟着包名。`javac`和`java`工具使用完全限定的类名在类路径上搜索类，这是一个在类名前附加包名的类名。例如，如果我们将`MyApplication`类放在`com.packt.javapath.ch04demo`包中，那么这个类的完全限定名将是`com.packt.javapath.ch04demo.MyApplication`。你可以猜到，`ch04demo`代表第4章的*演示代码*。这样，我们可以在不同的章节中使用相同的类名，它们不会冲突。这就是包名用于唯一标识类在类路径上的目的。
- en: 'Another function of the package is to define the location of the `.java` files,
    relative to the `src\main\java` directory (for Windows) or the `src/main/java` directory
    (for Linux). The package name must match the path to the files that belong to
    this package:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 包的另一个功能是定义`.java`文件的位置，相对于`src\main\java`目录（适用于Windows）或`src/main/java`目录（适用于Linux）。包名必须与属于该包的文件的路径匹配：
- en: '```java'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: src\main\java\com\packt\javapath\ch04demo\MyApplication.java (for Windows)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: src\main\java\com\packt\javapath\ch04demo\MyApplication.java (适用于Windows)
- en: src/main/java/com/packt/javapath/ch04demo/MyApplication.java (for Linux)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: src/main/java/com/packt/javapath/ch04demo/MyApplication.java (适用于Linux)
- en: '```'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Any mismatch between the package name and the file location triggers a compilation
    error. When you create a new class using an IDE wizard (after right-clicking on
    the package name), IDE adds the correct package declaration as the first line
    of the `.java` file automatically. But if you create a new source file without
    using IDE, then it is your responsibility to match the package name and the `.java`
    file location.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 包名与文件位置之间的任何不匹配都会触发编译错误。当使用IDE向包名右键单击后使用IDE向导创建新类时，IDE会自动将正确的包声明添加为`.java`文件的第一行。但是，如果不使用IDE创建新的源文件，那么就需要自己负责匹配包名和`.java`文件的位置。
- en: It is possible to not have a package name declared if the `.java` file resides
    in the `src\main\java` directory (for Windows) or the `src/main/java` directory
    (for Linux). Java specification calls such a package a default package. Using
    the default package is practical for only a small or temporary application, because
    as the number of classes grows, a flat list of a hundred, or even a thousand,
    files becomes unmanageable. Besides, if you write code to be used by other projects,
    these other projects will not be able to refer to your classes without a package
    name. In [Chapter 7](c33d6d65-074b-49cb-b013-f7157eb70816.xhtml), *Packages and
    Accessibility (Visibility)*, we will talk more about this.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`.java`文件位于`src\main\java`目录（适用于Windows）或`src/main/java`目录（适用于Linux）中，则可以不声明包名。Java规范将这样的包称为默认包。使用默认包只适用于小型或临时应用程序，因为随着类的数量增加，一百甚至一千个文件的平面列表将变得难以管理。此外，如果你编写的代码要被其他项目使用，那么这些其他项目将无法在没有包名的情况下引用你的类。在第7章《包和可访问性（可见性）》中，我们将更多地讨论这个问题。
- en: 'The directory tree of the `.class` files is created by the `javac` tool during
    compilation, and it mirrors the directory structure of the `.java` files. Maven
    creates a `target` directory in the project root directory with a `classes` subdirectory
    in it. Maven then specifies this subdirectory as the output location of the generated
    files, with a `-d` option in the `javac` command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，`.class`文件的目录树是由`javac`工具创建的，并且它反映了`.java`文件的目录结构。Maven在项目根目录中创建了一个`target`目录，并在其中创建了一个`classes`子目录。然后，Maven在`javac`命令中使用`-d`选项指定这个子目录作为生成文件的输出位置：
- en: '```java'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '//For Windows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: //对于Windows：
- en: javac -classpath src\main\java -d target\classes
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: javac -classpath src\main\java -d target\classes
- en: com.packt.javapath.ch04demo.MyApplication.java
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: com.packt.javapath.ch04demo.MyApplication.java
- en: '//For Linux:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: //对于Linux：
- en: javac -classpath src/main/java -d target/classes
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: javac -classpath src/main/java -d target/classes
- en: com.packt.javapath.ch04demo.MyApplication.java
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: com.packt.javapath.ch04demo.MyApplication.java
- en: '```'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'During the execution, the `.class` files'' location is set on the classpath:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，`.class`文件的位置设置在类路径上：
- en: '```java'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: '//For Windows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: //对于Windows：
- en: java -classpath target\classes com.packt.javapath.ch04demo.MyApplication
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: java -classpath target\classes com.packt.javapath.ch04demo.MyApplication
- en: '//For Linux:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: //对于Linux：
- en: java -classpath target/classes com.packt.javapath.ch04demo.MyApplication
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: java -classpath target/classes com.packt.javapath.ch04demo.MyApplication
- en: '```'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: With the knowledge of the package declaration, its function, and its relation
    with the directory structure, let's create our first package.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有了包声明、其功能以及与目录结构的关系的知识，让我们创建我们的第一个包。
- en: Creating a package
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个包
- en: We assume that you have created the project by following the steps in the *Creating
    a project using a project wizard* section. If you have closed your IDE, please
    start it again, and open the created project by selecting `JavaPath` in the list
    of Recent projects.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经按照“使用项目向导创建项目”的步骤创建了项目。如果您已经关闭了IDE，请重新启动它，并通过在“最近项目”列表中选择`JavaPath`来打开创建的项目。
- en: 'When the project is open, click on the `src` folder in the left pane, then click
    on the `main` folder. You should see the `java` folder now:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 项目打开后，在左窗格中点击`src`文件夹，然后点击`main`文件夹。现在应该看到`java`文件夹：
- en: '![](img/7f2a3362-e71f-4b18-b321-994848eff558.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f2a3362-e71f-4b18-b321-994848eff558.png)'
- en: 'Right-click on the `java` folder, select the New menu item, and then select
    the Package menu item:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`java`文件夹，选择“新建”菜单项，然后选择“包”菜单项：
- en: '![](img/12d9f974-ec53-408e-a288-edc7b25dca93.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12d9f974-ec53-408e-a288-edc7b25dca93.png)'
- en: 'Type `com` in the pop-up window:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在弹出窗口中输入`com`：
- en: '![](img/6bf9e2d4-2ca4-4d79-8073-f976cff359bb.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bf9e2d4-2ca4-4d79-8073-f976cff359bb.png)'
- en: Click the OK button. The `com` folder will be created.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮。将创建`com`文件夹。
- en: 'Right-click on it in the left pane, select the New menu item, then select the
    Package menu item, and type `packt` in the pop-up window:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在左窗格中右键单击它，选择“新建”菜单项，然后选择“包”菜单项，在弹出窗口中输入`packt`：
- en: '![](img/8bc316e8-3f10-4edf-9fff-2b5784b465cf.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bc316e8-3f10-4edf-9fff-2b5784b465cf.png)'
- en: Repeat the process and create the `javapath` folder under the `packt` folder,
    and then the `ch04demo` folder under the `javapath` folder. After the `com.packt.javapath.ch04demo` package
    is in place,  we can create its member—the `MyApplication` class.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 重复这个过程，在`packt`文件夹下创建`javapath`文件夹，然后在`javapath`文件夹下创建`ch04demo`文件夹。在`com.packt.javapath.ch04demo`包就位后，我们可以创建它的成员——`MyApplication`类。
- en: Creating the MyApplication class
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`MyApplication`类
- en: 'To create a class, right-click on the `com.packt.javapath.che04demo` package
    in the left pane, select the New menu item, then select the Java Class menu item,
    and type `MyApplication` in the pop-up window:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个类，在左窗格中右键单击`com.packt.javapath.che04demo`包，选择“新建”菜单项，然后选择“Java类”菜单项，在弹出窗口中输入`MyApplication`：
- en: '![](img/12cce37d-6bdc-4d61-a9a2-3a990766a9a5.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12cce37d-6bdc-4d61-a9a2-3a990766a9a5.png)'
- en: 'Click the OK button, and the class will be created:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮，类将被创建：
- en: '![](img/c6371bf2-f8d5-44dc-a830-12f4c166a782.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6371bf2-f8d5-44dc-a830-12f4c166a782.png)'
- en: The name of the `MyApplication` class in the right pane is faded. That is how
    IntelliJ IDEA indicates that it is not used anywhere yet.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 右窗格中`MyApplication`类的名称变得模糊。这就是IntelliJ IDEA指示它尚未被使用的方式。
- en: Building the application
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序
- en: 'Behind the scenes, the IDE compiles the code you are writing every time you
    change it. For example, try to remove the first letter, `M`, in the name of the
    class in the right pane. IDE will immediately warn you about the syntax error:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，IDE会在每次更改代码时编译您正在编写的代码。例如，尝试删除右窗格中类名称中的第一个字母`M`。IDE会立即警告您有语法错误：
- en: '![](img/df804b66-9c28-487f-84ec-a9d3ca2b67d1.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df804b66-9c28-487f-84ec-a9d3ca2b67d1.png)'
- en: If you navigate your mouse to the red bubble, or any red line that underscores
    the class declaration in the preceding screenshot, you will see the Class 'yApplication'
    is public, should be declared in a file named 'yApplication.java' message. You
    may recall that we talked about it in [Chapter 2](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml),
    *Java Language Basics.*
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将鼠标移到前面截图中类声明的红色气泡或任何下划线类声明的红线上，您将看到“类'yApplication'是公共的，应该在名为'yApplication.java'的文件中声明”的消息。您可能还记得我们在[第2章](4eaa4fe6-9564-40ba-b799-7fdc2abb5039.xhtml)中谈到过这一点，*Java语言基础知识*。
- en: Each `.java` file contains only one `public` class. The file name must match
    the public class name.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`.java`文件只包含一个`public`类。文件名必须与公共类名匹配。
- en: Because IDE compiles the code after every change, in the case of a small number
    of `.java` files, building a project explicitly is not necessary. But when the
    size of the application increases, you might not notice that something went wrong.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 因为IDE在每次更改后都会编译代码，所以在少量`.java`文件的情况下，显式构建项目是不必要的。但是当应用程序的大小增加时，您可能不会注意到出现问题。
- en: 'That''s why it is a good practice to request IDE to recompile (or build, in
    other words) all of the `.java` files of your application from time to time, by
    clicking Build in the top-most menu and selecting the Rebuild Project menu item:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么请求IDE定期重新编译（或者换句话说，构建）应用程序的所有`.java`文件是一个好的做法，方法是点击顶部菜单中的“构建”，然后选择“重建项目”菜单项：
- en: '![](img/a1f2f3c7-e8e0-463c-9ef4-366adf39fdc4.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1f2f3c7-e8e0-463c-9ef4-366adf39fdc4.png)'
- en: 'You may have noticed other related menu items: Build Project and Build Module
    ''javapath''. A module is a way to bundle classes across packages. But using modules
    is outside the scope of this book. Build Project recompiles only the classes that
    have been changed, and those that use the changed classes. It makes sense to only
    use it for a very big application, when the build time is significant. Rebuild
    Projects, on the other hand, recompiles all of the `.java` files, whether they
    were changed or not, and we recommend that you always use it. That way, you can
    be sure that every class is rebuilt, and no dependency was missed.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到其他相关的菜单项：Build Project和Build Module 'javapath'。模块是一种跨包捆绑类的方式。但是使用模块超出了本书的范围。Build
    Project仅重新编译已更改的类以及使用更改的类的类。只有在构建时间显着时才有意义。另一方面，Rebuild Projects重新编译所有`.java`文件，无论它们是否已更改，我们建议您始终使用它。这样，您可以确保每个类都已重新构建，并且没有遗漏依赖项。
- en: 'After you click on Rebuild Projects, you will see a new `target` folder appear
    in the left pane:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Rebuild Projects后，您将在左窗格中看到一个新的`target`文件夹：
- en: '![](img/eace96bb-ca9f-452d-b0fb-c24037973683.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eace96bb-ca9f-452d-b0fb-c24037973683.png)'
- en: That is where Maven (and the built-in Maven used by IntelliJ IDEA) stores the
    `.class` files. You may have noticed that the `javac` tool creates a folder for
    each part of the package name. That way, the tree of compiled classes reflects
    exactly the tree of the source classes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Maven（和IntelliJ IDEA使用的内置Maven）存储`.class`文件的地方。您可能已经注意到`javac`工具为包名的每个部分创建一个文件夹。这样，编译类的树完全反映了源类的树。
- en: Now, before continuing code writing, we are going to perform a trick that will
    make your source tree look simpler.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在继续编写代码之前，我们将执行一个技巧，使您的源树看起来更简单。
- en: Hiding some files and directories
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏一些文件和目录
- en: 'If you prefer not to see the IDE-specific files (`.iml` files, for example)
    or temporary files and directories (the `target` folder, for example), you can
    configure IntelliJ IDEA to not show them. Just click on File | Settings (on Windows)
    or IntelliJ IDEA | Preferences (on Linux and macOS), then click the Editor menu
    item in the left column, and then File Types. The resulting screen will have the
    following section:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望看到特定于IDE的文件（例如`.iml`文件）或临时文件和目录（例如`target`文件夹），可以配置IntelliJ IDEA不显示它们。只需单击File
    | Settings（在Windows上）或IntelliJ IDEA | Preferences（在Linux和macOS上），然后单击左列中的Editor菜单项，然后单击File
    Types。生成的屏幕将具有以下部分：
- en: '![](img/182f27f3-539a-4f24-b9aa-4fc65604cd81.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/182f27f3-539a-4f24-b9aa-4fc65604cd81.png)'
- en: 'At the bottom of the screen, you can see the Ignore files and folders label
    and the input field with the file name patterns. Add the following to the end
    of the list: `*.iml;.idea;target;`. Then, click the OK button. Now, your project
    structure should look like this:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕底部，您可以看到忽略文件和文件夹标签以及带有文件名模式的输入字段。在列表的末尾添加以下内容：`*.iml;.idea;target;`。然后，单击OK按钮。现在，您的项目结构应该如下所示：
- en: '![](img/f17e89e1-be92-4df8-972a-f1c5e0d93a20.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f17e89e1-be92-4df8-972a-f1c5e0d93a20.png)'
- en: It shows only the application source files and third-party libraries (under
    External Libraries).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 它仅显示应用程序源文件和第三方库（在外部库下）。
- en: Creating the SimpleMath class
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建SimpleMath类
- en: Let's now create another package, `com.packt.javapath.math`, and the `SimpleMath` class
    in it. The reason for this is that in the future, we plan to have several, similar
    math-related classes in this package, and other, non-math-related classes in other
    packages.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建另一个包`com.packt.javapath.math`，并在其中创建`SimpleMath`类。这样做的原因是，将来我们计划在此包中有几个类似的与数学相关的类，以及其他与数学无关的类。
- en: In the left pane, right-click on the `com.packt.javapath.ch04demo` package, select
    New, then click Package. Type `math` in the provided input field, and click the
    OK button.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在左窗格中，右键单击`com.packt.javapath.ch04demo`包，选择New，然后单击Package。在提供的输入字段中键入`math`，然后单击OK按钮。
- en: Right-click on the `math` package name, select New, then click Java Class, type
    `SimpleMath` in the provided input field, and click the OK button.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`math`包名称，选择New，然后单击Java Class，在提供的输入字段中键入`SimpleMath`，然后单击OK按钮。
- en: 'You should have created a new `SimpleMath` class that looks like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该创建一个新的`SimpleMath`类，看起来像这样：
- en: '![](img/45202168-ee23-40e7-9910-2122a88846bd.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45202168-ee23-40e7-9910-2122a88846bd.png)'
- en: Creating methods
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建方法
- en: 'First, we add the following method to the `SimpleMath` class:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将以下方法添加到`SimpleMath`类中：
- en: '```java'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: public int multiplyByTwo(int i){
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: public int multiplyByTwo(int i){
- en: return i * 2;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: return i * 2;
- en: '}'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Now, we can add the code that uses the preceding method to the `MyApplication`
    class:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将使用上述方法的代码添加到`MyApplication`类中：
- en: '```java'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: public static void main(String[] args) {
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: public static void main(String[] args) {
- en: int i = Integer.parseInt(args[0]);
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: int i = Integer.parseInt(args[0]);
- en: SimpleMath simpleMath = new SimpleMath();
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: SimpleMath simpleMath = new SimpleMath();
- en: int result = simpleMath.multiplyByTwo(i);
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: int result = simpleMath.multiplyByTwo(i);
- en: System.out.println(i + " * 2 = " + result);
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(i + " * 2 = " + result);
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The preceding code is pretty straightforward. The application receives an integer
    as an input parameter from the first element of the `String[] args` input array.
    Notice that the first element in the Java array has the index 0, not 1\. The argument
    comes as a string, and has to be converted (parsed) to an `int` type by using
    the `parseInt()` static method of the `java.lang.Integer` class from a standard
    Java library. We will talk about Java types in [Chapter 5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml),
    *Java Language Elements and Types*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码非常简单。应用程序从`String[] args`输入数组的第一个元素接收一个整数作为输入参数。请注意，Java数组中的第一个元素的索引是0，而不是1。参数作为字符串传递，并且必须通过使用标准Java库中`java.lang.Integer`类的`parseInt()`静态方法转换（解析）为`int`类型。我们将在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml)中讨论Java类型，*Java语言元素和类型*。
- en: Then, an object of the `SimpleMath` class is created, and the `multiplyByTwo()` method
    is called. The returned result is stored in the `result` variable of the `int` type,
    and then printed out in the required format using the `java.lang.System` class
    of a standard Java library. This class has an `out` static property that holds
    a reference to an object of the `java.io.PrintStream` class. The `PrintStream` class,
    in turn, has the `println()` method, which prints the result to a screen.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建了一个`SimpleMath`类的对象，并调用了`multiplyByTwo()`方法。返回的结果存储在`int`类型的`result`变量中，然后使用标准Java库的`java.lang.System`类以所需的格式打印出来。这个类有一个`out`静态属性，它持有一个对`java.io.PrintStream`类对象的引用。而`PrintStream`类又有`println()`方法，它将结果打印到屏幕上。
- en: Executing and unit testing an application
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行和单元测试应用程序
- en: There are several ways to execute our new application. In the *Building the
    application* section, we saw that all of the compiled classes are stored by IntelliJ
    IDEA (using the built-in Maven) in the `target` folder. This means that we can
    execute the application by using the `java` tool and listing the folder target
    with the `-classpath` option.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以执行我们的新应用程序。在*构建应用程序*部分，我们看到所有编译后的类都存储在`target`文件夹中。这意味着我们可以使用`java`工具并列出带有`-classpath`选项的`target`文件夹来执行应用程序。
- en: 'To do that, open a Command Prompt or Terminal window and go to the root directory
    of our new project. If you are not sure where it is, look at the top line of the
    IntelliJ IDEA window that shows the full path to it. Once you are in the project
    root directory (it is the folder where the `pom.xml` file is located), run the
    following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，打开命令提示符或终端窗口，然后转到我们新项目的根目录。如果不确定在哪里，可以查看IntelliJ IDEA窗口顶部显示的完整路径。一旦进入项目根目录（即存放`pom.xml`文件的文件夹），运行以下命令：
- en: '![](img/dad25f60-410a-4c64-9847-d83b2932c7f5.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dad25f60-410a-4c64-9847-d83b2932c7f5.png)'
- en: In the preceding screenshot, you can see that the `-classpath` option (we used
    the short version, `-cp`, instead) has listed the directory where all of the classes
    are compiled. After that, we have typed the name of the `com.packt.javapath.ch04demo.MyApplication` main
    class, because we have to tell the `java` tool which class is an entry point to
    the application and contains the `main()` method. Then, we have typed `2` as an
    input parameter to the main class. As you may recall, the `main()` method expects
    it to be an integer.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，可以看到`-classpath`选项（我们使用了缩写版本`-cp`）列出了所有编译后的类所在的目录。之后，我们输入了`com.packt.javapath.ch04demo.MyApplication`主类的名称，因为我们必须告诉`java`工具哪个类是应用程序的入口点，并包含`main()`方法。然后，我们输入`2`作为主类的输入参数。你可能还记得，`main()`方法期望它是一个整数。
- en: 'When we run that command, the result shows the output in the expected format:
    `2 * 2 = 4`.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行该命令时，结果以预期格式显示输出：`2 * 2 = 4`。
- en: 'Alternatively, we could collect all of the compiled classes in a `myapp.jar`
    file and run a similar `java` command with the `myapp.jar` file listed on the
    classpath:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将所有编译后的类收集到一个`myapp.jar`文件中，并使用类似的`java`命令在类路径上列出`myapp.jar`文件来运行：
- en: '![](img/68445744-4225-4d7a-a13a-b29e1f44445e.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68445744-4225-4d7a-a13a-b29e1f44445e.png)'
- en: 'In the preceding screenshot, you can see that we entered the `target` folder
    and its `classes` subfolder first, then collected its content (all of the compiled
    classes) into the `myapp.jar` file with the `jar` command. Then, we typed the `java` command
    and listed the `myapp.jar` file with the `-classpath` option. Since the `myapp.jar` file
    is in the current directory, we do not include any directory path. The result
    of the `java` command was the same as before: `2 * 2 = 4`.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，可以看到我们首先进入了`target`文件夹及其`classes`子文件夹，然后使用`jar`命令将其内容（所有编译后的类）收集到`myapp.jar`文件中。然后，我们使用`java`命令并列出了`myapp.jar`文件和`-classpath`选项。由于`myapp.jar`文件在当前目录中，我们不包括任何目录路径。`java`命令的结果与之前相同：`2
    * 2 = 4`。
- en: 'Another way to get to the project root directory is to just open a terminal
    window from IDE. In IntelliJ IDEA, you can do it by clicking on the Terminal link
    in the bottom-left corner:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种进入项目根目录的方法是直接从IDE打开终端窗口。在IntelliJ IDEA中，可以通过单击左下角的Terminal链接来实现：
- en: '![](img/b634572c-f39d-48af-9664-10a12682bd46.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b634572c-f39d-48af-9664-10a12682bd46.png)'
- en: Then, we can type all of the preceding commands in the Terminal window inside
    the IDE.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在IDE内部的终端窗口中输入所有上述命令。
- en: But there is an even easier way to execute the application from the IDE without
    typing all of the preceding commands, which is the recommended way during the
    project development phase. It is your IDE, remember? We will demonstrate how to
    do it in the next section.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一种更简单的方法可以在项目开发阶段从IDE中执行应用程序，而不必输入所有上述命令，这是推荐的方法。这是你的IDE，记住吗？我们将在下一节中演示如何做到这一点。
- en: Executing the application using the IDE
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IDE执行应用程序
- en: 'In order to be able to execute an application from the IDE, some configuration
    has to be set the first time. In IntelliJ IDEA, if you click on the top-most menu
    item, click Run, and select Edit Configurations..., you will see the following
    screen:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够从IDE执行应用程序，首次需要进行一些配置。在IntelliJ IDEA中，如果单击最顶部的菜单项，点击Run，然后选择Edit Configurations...，将会看到以下屏幕：
- en: '![](img/57ee7aff-829c-47f4-a2c3-b3c1153ff62d.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57ee7aff-829c-47f4-a2c3-b3c1153ff62d.png)'
- en: 'Click the plus (+) symbol in the upper-left corner, and type the values in
    the new window:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 单击左上角的加号（+）符号，并在新窗口中输入值：
- en: '![](img/4e6536d9-cea0-4cea-a7d5-c70c4db164f3.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e6536d9-cea0-4cea-a7d5-c70c4db164f3.png)'
- en: Type `MyApplication` (or any other name you like) in the Name field.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在名称字段中输入`MyApplication`（或其他任何名称）。
- en: Type `com.packt.javapath.ch02demo.MyApplication` in the Main class field.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在主类字段中输入`com.packt.javapath.ch02demo.MyApplication`。
- en: Type `2` (or any other number you like) in the Program arguments field.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序参数字段中输入`2`（或其他任何数字）。
- en: Check the Single instance only checkbox in the upper-right corner. It will ensure
    that you will have only one instance of your application running at all times.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角的单一实例复选框中选中。这将确保您的应用程序始终只运行一个实例。
- en: After filling in all the described values, click the OK button in the bottom-right
    corner.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写了所有描述的值之后，单击右下角的OK按钮。
- en: 'Now, if you open the `MyApplication` class, you will see two green arrows –
    one at the class level, and another at the `main()` method:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您打开`MyApplication`类，您将看到两个绿色箭头 - 一个在类级别，另一个在`main()`方法中：
- en: '![](img/44313d36-8ea3-40bf-bd74-ce920ac2a46d.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44313d36-8ea3-40bf-bd74-ce920ac2a46d.png)'
- en: Click on any of these green arrows, and your application will be executed.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 单击其中任何一个绿色箭头，您的应用程序将被执行。
- en: 'The result will be shown in the bottom-left corner of IntelliJ IDEA. A window
    with the title Run will open, and you will see the result of the application execution.
    If you have typed `2` in the Program arguments field, the result should be the
    same: `2 * 2 = 4`.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将显示在IntelliJ IDEA左下角。将打开一个名为Run的窗口，并且您将看到应用程序执行的结果。如果您在程序参数字段中输入了`2`，则结果应该是相同的：`2
    * 2 = 4`。
- en: Creating a unit test
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: Now, let's write a test for the `multiplyByTwo()` method of the `SimpleMath` class,
    because we would like to make sure that the `multiplyByTwo()` method works as
    expected. Such tests are useful as long as the project exists, because you can
    run them every time the code is changed, and verify that the existing functionality has
    not been changed accidentally.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`SimpleMath`类的`multiplyByTwo()`方法编写一个测试，因为我们希望确保`multiplyByTwo()`方法按预期工作。只要项目存在，这样的测试就很有用，因为您可以在每次更改代码时运行它们，并验证现有功能没有意外更改。
- en: A method is the smallest testable part of an application. That's why such a
    test is called a unit test. It is a good idea to have a unit test for each method
    that you create (except the trivial ones, such as getters and setters, for example).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是应用程序中最小的可测试部分。这就是为什么这样的测试被称为单元测试。为您创建的每个方法编写单元测试是一个好主意（例如，除了诸如getter和setter之类的微不足道的方法）。
- en: We will use a popular test framework called JUnit. There are several versions
    of it. At the time of this writing, version 5 is the latest one, but versions
    3 and 4 are still actively used. We will use version 5\. It requires Java 8 or
    later, and we assume that on your computer, you have installed Java 9, at least.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个名为JUnit的流行测试框架。有几个版本。在撰写本文时，版本5是最新版本，但版本3和4仍在积极使用。我们将使用版本5。它需要Java 8或更高版本，并且我们假设您的计算机上至少安装了Java
    9。
- en: As we have already mentioned, in order to use a third-party library or a framework,
    you need to specify it as a dependency in the `pom.xml` file. As soon as you do
    it, the Maven tool (or the built-in Maven feature of the IDE) will look for the
    corresponding `.jar` file in the Maven repository online. It will download that
    `.jar` to your local Maven repository in the `.m2` folder, which was automatically
    created in the home directory on your computer. After that, your project can access
    it and use it at any time.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们已经提到的，在使用第三方库或框架时，您需要在`pom.xml`文件中将其指定为依赖项。一旦您这样做，Maven工具（或IDE的内置Maven功能）将在Maven在线存储库中查找相应的`.jar`文件。它将下载该`.jar`文件到您计算机主目录中自动创建的`.m2`文件夹中的本地Maven存储库。之后，您的项目可以随时访问并使用它。
- en: We have already set values in `pom.xml` for the dependency on JUnit 5 in the *Maven
    project configuration* section. But, let's assume that we have not done it yet,
    in order to show you how programmers usually do it.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在*Maven项目配置*部分的`pom.xml`中设置了对JUnit 5的依赖。但是，假设我们还没有这样做，以便向您展示程序员通常如何做。
- en: 'First, you need to do some research and decide which framework or library you
    need. For example, after searching the internet, you may have read JUnit 5 documentation
    ([http://junit.org/junit5](http://junit.org/junit5)) and figured that you need
    to set the Maven dependency on `junit-jupiter-api`. With that, you can search
    the internet again, and this time, look for `maven dependency junit-jupiter-api`,
    or just `maven dependency junit 5`. Chances are, the first link in your search
    results will bring you to the following page:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要进行一些研究并决定您需要哪个框架或库。例如，通过搜索互联网，您可能已经阅读了JUnit 5文档（[http://junit.org/junit5](http://junit.org/junit5)）并发现您需要在`junit-jupiter-api`上设置Maven依赖项。有了这个，您可以再次搜索互联网，这次搜索`maven
    dependency junit-jupiter-api`，或者只搜索`maven dependency junit 5`。您搜索结果中的第一个链接很可能会将您带到以下页面：
- en: '![](img/25e23750-6422-4a3e-adfc-297ea4cd2aff.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25e23750-6422-4a3e-adfc-297ea4cd2aff.png)'
- en: Select any version you like (we have chosen the latest, 5.1.0-M1) and click
    on it.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您喜欢的任何版本（我们选择了最新版本5.1.0-M1）并单击它。
- en: 'A new page will be opened, which tells you how to set the dependency in `pom.xml`:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 将打开一个新页面，告诉您如何在`pom.xml`中设置依赖项：
- en: '![](img/3c580196-a134-452e-a96d-b7e352f511d9.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c580196-a134-452e-a96d-b7e352f511d9.png)'
- en: Alternatively, you can go to the Maven repository site ([https://mvnrepository.com](https://mvnrepository.com))
    and type `junit-jupiter-api` in its search window. Then, click on one of the provided
    links, and you will see the same page.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以转到Maven存储库网站（[https://mvnrepository.com](https://mvnrepository.com)）并在其搜索窗口中键入`junit-jupiter-api`。然后，单击提供的链接之一，您将看到相同的页面。
- en: 'If you did not add the `junit-jupiter-api` dependency while reading the [Chapter
    3](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml), *Your Development* Environment
    *Setup*, you can do it now by copying the provided dependency into your `pom.xml`
    file inside the `<dependencies></dependencies>` tag:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在阅读[第3章](18c6e8b8-9d8a-4ece-9a3f-cd00474b713e.xhtml) *您的开发环境设置*时没有添加`junit-jupiter-api`依赖项，现在可以通过将提供的依赖项复制到`pom.xml`文件中的`<dependencies></dependencies>`标签内来添加它：
- en: '![](img/1a19f2bc-aebf-42ee-aefd-43d8f4c3e9c7.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a19f2bc-aebf-42ee-aefd-43d8f4c3e9c7.png)'
- en: Now, you can use the JUnit framework to create a unit test.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用JUnit框架创建单元测试。
- en: In IntelliJ IDEA, the `junit-jupiter-api-5.1.0-M1.jar` file is also listed in
    the `External Libraries` folder, in the left pane. If you open the list, you will
    see that there are two other libraries that were not specified in the `pom.xml` file: `junit-latform-commons-1.0.0-M1.jar` and `opentest4j-1.0.0.jar`.
    They are there because `junit-jupiter-api-5.1.0-M1.jar` depends on them. That
    is what Maven does—it discovers all of the dependencies and downloads all necessary
    libraries.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中，`junit-jupiter-api-5.1.0-M1.jar`文件也列在左侧窗格的`External Libraries`文件夹中。如果您打开列表，您将看到还有两个其他库，这些库没有在`pom.xml`文件中指定：`junit-latform-commons-1.0.0-M1.jar`和`opentest4j-1.0.0.jar`。它们存在是因为`junit-jupiter-api-5.1.0-M1.jar`依赖于它们。这就是Maven的工作原理-它发现所有依赖项并下载所有必要的库。
- en: 'Now, we can create a test for the `SimpleMath` class. We will use IntelliJ
    IDEA to do it. Open the `SimpleMath` class and right-click on the class name,
    then select  Go To, and click on Test:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为`SimpleMath`类创建一个测试。我们将使用IntelliJ IDEA来完成。打开`SimpleMath`类，右键单击类名，然后选择Go
    To，点击Test：
- en: '![](img/2432ae77-367c-4583-8688-33a3955ee126.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2432ae77-367c-4583-8688-33a3955ee126.png)'
- en: 'You will get a small pop-up window:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 您将会看到一个小弹出窗口：
- en: '![](img/a8498649-3985-495c-aee9-94585cd58e4d.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8498649-3985-495c-aee9-94585cd58e4d.png)'
- en: 'Click on Create New Test... and the following window will allow you to configure
    the test:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Create New Test...，然后以下窗口将允许您配置测试：
- en: '![](img/b349dccc-04c1-4b39-9c78-af90cfef7b8d.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b349dccc-04c1-4b39-9c78-af90cfef7b8d.png)'
- en: 'There is built-in support for JUnit 5 in IntelliJ IDEA. In the preceding screen,
    select JUnit5 for Testing library, and check the checkbox for the `multiplyByTwo()`
    method. Then, click the OK button in the bottom-right corner. The test will be
    created:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在IntelliJ IDEA中有对JUnit 5的内置支持。在前面的屏幕中，选择JUnit5作为测试库，并选中`multiplyByTwo()`方法的复选框。然后，单击右下角的OK按钮。测试将被创建：
- en: '![](img/1e3526b4-c252-4073-ad78-73a72c9c099c.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e3526b4-c252-4073-ad78-73a72c9c099c.png)'
- en: Notice that in the left pane, under the `test/java` folder, a package structure
    is created that matches the package of the `SimpleMath` class exactly. In the
    right pane, you can see the `SimpleMathTest` test class with one test (empty,
    so far) for the `multiplyByTwo()` method. The test method can have any name, but
    it has to have `@Test` in front of it, which is called an annotation. It tells
    the test framework that this is one of the tests.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在左侧窗格的`test/java`文件夹下，创建了一个与`SimpleMath`类的包结构完全匹配的包结构。在右侧窗格中，您可以看到`SimpleMathTest`测试类，其中包含一个针对`multiplyByTwo()`方法的测试（目前为空）。测试方法可以有任何名称，但必须在其前面加上`@Test`，这被称为注解。它告诉测试框架这是其中一个测试。
- en: 'Let''s implement the test. For example, we can do it like this:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现测试。例如，我们可以这样做：
- en: '![](img/3640513c-02b3-481e-9869-09c7297fcbc5.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3640513c-02b3-481e-9869-09c7297fcbc5.png)'
- en: As you can see, we have created an object of the `SimpleMath` class and called
    the `multiplyByTwo()` method with a parameter of `2`. We know that the correct
    result has to be `4`, and we check the result using the `assertEquals()` method
    that comes from the JUnit framework. We also added the `@DisplayName` annotation
    to the class and to the test method. You will see what this annotation does shortly.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经创建了`SimpleMath`类的对象，并调用了带有参数`2`的`multiplyByTwo()`方法。我们知道正确的结果应该是`4`，我们使用来自JUnit框架的`assertEquals()`方法来检查结果。我们还在类和测试方法中添加了`@DisplayName`注解。您很快就会看到这个注解的作用。
- en: 'Let''s now modify the `mutliplyByTwo()` method in the the `SimpleMath` class:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改`SimpleMath`类中的`mutliplyByTwo()`方法：
- en: '![](img/a6427a90-f3ca-4f1e-abb6-e8ea76953674.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6427a90-f3ca-4f1e-abb6-e8ea76953674.png)'
- en: Instead of just multiplying by `2`, we also add `1` to the result, so our test
    will break. It is a good practice to run a test on the incorrect code, first,
    so we can make sure that our test catches such errors.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅仅是乘以`2`，我们还将`1`添加到结果中，所以我们的测试将失败。首先在错误的代码上运行测试是一个好习惯，这样我们可以确保我们的测试能够捕捉到这样的错误。
- en: Executing the unit test
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行单元测试
- en: 'Now, let''s go back to the `SimpleMathTest` class, and run it by clicking on
    one of the green arrows. The green arrow on the class level runs all of the test
    methods, while the green arrow on the method level runs only that test method.
    Since we have only one test method, so far, it does not matter which arrow we
    click. The result should look like this:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到`SimpleMathTest`类，并通过单击绿色箭头之一来运行它。类级别上的绿色箭头运行所有测试方法，而方法级别上的绿色箭头只运行该测试方法。因为我们目前只有一个测试方法，所以单击哪个箭头都无所谓。结果应该如下所示：
- en: '![](img/168972fa-0fe1-42c0-9063-8a9127bbdef0.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/168972fa-0fe1-42c0-9063-8a9127bbdef0.png)'
- en: 'That is exactly what we hoped to see: the test expected to a result equal to
    `4`, but got `5`, instead. It provides us with a level of confidence that our
    test works correctly.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们希望看到的：测试期望得到一个等于`4`的结果，但实际得到了`5`。这让我们对我们的测试是否正确工作有了一定的信心。
- en: Notice in the left pane, we can see the display names that came from the `@DisplayName` annotations—that
    was the purpose of those annotations.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在左侧窗格中，我们可以看到来自`@DisplayName`注解的显示名称-这就是这些注解的目的。
- en: Also, click on each of the blue links in the right pane to see what they do.
    The first one provides more detailed information about expected and actual results.
    The second link brings you to the line of the test, where the assertion is located
    that has failed the testis located, so you can see the exact context and correct
    what went wrong.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 还要单击右侧窗格中的每个蓝色链接，以查看它们的作用。第一个链接提供有关预期和实际结果的更详细信息。第二个链接将带您到测试的行，其中包含失败测试的断言，这样您就可以看到确切的上下文并纠正错误。
- en: 'Now, you can go to the `SimpleMath` class again and remove the `1` that we
    added. Then ,click on the green triangle in the upper-left corner (see the preceding
    screenshot). It means *rerun the test*. The result should look like this:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以再次转到`SimpleMath`类，并删除我们添加的`1`。然后，单击左上角的绿色三角形（参见前面的屏幕截图）。这意味着*重新运行测试*。结果应该如下所示：
- en: '![](img/8851a540-9056-4835-a8e3-45437fcb18d8.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8851a540-9056-4835-a8e3-45437fcb18d8.png)'
- en: By the way, you may have noticed that our screenshots and the path to the project
    have slightly changed. It happened because we are now taking the screenshots from
    IntelliJ IDEA running on macOS, so we can cover Windows and macOS. As you can
    see, the appearance of IntelliJ IDEA screens look principally the same on Windows
    as on the macOS system.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，您可能已经注意到我们的屏幕截图和项目路径已经略有改变。这是因为我们现在是从在macOS上运行的IntelliJ IDEA中获取屏幕截图，所以我们可以覆盖Windows和macOS。正如您所看到的，IntelliJ
    IDEA屏幕在Windows和macOS系统上的外观基本相同。
- en: How many unit tests are enough?
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多少单元测试足够？
- en: This is always the question any programmer thinks about every time a new method
    is written or an old method is modified—How many unit tests are enough to make
    sure that the application is thoroughly tested, and what kind of tests should
    they be? Typically, it is not enough to have one test for each method of the application.
    There are usually many aspects of functionality that have to be tested. But each
    test method should test only one aspect, so it is easier to write it and to understand.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这总是任何程序员在编写新方法或修改旧方法时都会考虑的问题-有多少单元测试足以确保应用程序得到彻底测试，以及应该是什么样的测试？通常，仅为应用程序的每个方法编写一个测试是不够的。通常需要测试许多功能方面。但是，每个测试方法应该只测试一个方面，这样更容易编写和理解。
- en: For example, for our simple `multiplyByTwo()` method, we could add another test
    (we would call it `multiplyByTwoRandom()`) that picks a random integer number
    as an input into the method and does it a hundred times. Or, we could think about
    some extreme numbers, such as `0` and negative numbers, and see how our method
    works with them (we could call them `multiplyByZero()` and `multiplyByNegative()`,
    for example). Another test would be to use a very big number – bigger than half
    the biggest integer Java allows (we will talk about such limits in [Chapter 5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml),
    *Java Language Elements and Types*). We might also think about adding the check
    of the passed-in parameter value inside the `multiplyByTwo()` method, and throwing
    an exceptionif the passed-in parameter is bigger than half the maximum integer. We
    will talk about exceptions in [Chapter 10](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml),
    *Control Flow Statements*.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于我们简单的`multiplyByTwo()`方法，我们可以添加另一个测试（我们将称之为`multiplyByTwoRandom()`），它会将随机整数作为输入传递给方法，并重复一百次。或者，我们可以考虑一些极端的数字，比如`0`和负数，并查看我们的方法如何处理它们（例如，我们可以称它们为`multiplyByZero()`和`multiplyByNegative()`）。另一个测试是使用一个非常大的数字-比Java允许的最大整数的一半还要大（我们将在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml)中讨论这样的限制，*Java语言元素和类型*）。我们还可以考虑在`multiplyByTwo()`方法中添加对传入参数值的检查，并在传入参数大于最大整数的一半时抛出异常。我们将在[第10章](9b40994b-a83d-4b78-b7c2-695c2afcfaa9.xhtml)中讨论异常，*控制流语句*。
- en: You can see how quickly the number of unit tests, for the simplest method can
    grow. Imagine how many unit tests can be written for a method that does much more
    than our simple code.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到最简单的方法的单元测试数量增长得多快。想象一下，对于一个比我们简单代码做得多得多的方法，可以编写多少单元测试。
- en: We don't want to write too many unit tests, either, because we need to maintain
    all this code for the rest of the project's life. In the past, on more than only
    one occasion, a big project became too expensive to maintain, only because too
    many complex unit tests were written that added little or no value. That's why
    often, after the project code stabilizes and works in production for some time,
    and if there is a reason to think that it has too many unit tests, the team revisits
    them and makes sure that there are no useless tests, duplicates, or anything else
    quite obvious.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不希望写太多的单元测试，因为我们需要在项目的整个生命周期中维护所有这些代码。过去，不止一次，一个大项目因为编写了太多复杂的单元测试而变得维护成本过高，而这些测试几乎没有增加任何价值。这就是为什么通常在项目代码稳定并在生产中运行一段时间后，如果有理由认为它有太多的单元测试，团队会重新审视它们，并确保没有无用的测试、重复的测试或其他明显的问题。
- en: Writing good unit tests that work quickly and test the code thoroughly is a
    skill that comes with experience. In this book, we will use every opportunity
    to share the best practices of unit testing with you, so that by the end of this
    book, you will have some experience in this very important area of professional
    Java programming.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 编写良好的单元测试，可以快速工作并彻底测试代码，这是一种随着经验而来的技能。在本书中，我们将利用一切机会与您分享单元测试的最佳实践，以便在本书结束时，您将在这个非常重要的专业Java编程领域中有一些经验。
- en: Exercise – JUnit @Before and @After annotations
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习-JUnit @Before和@After注释
- en: 'Read the JUnit user guide ([https://junit.org/junit5/docs/current/user-guide](https://junit.org/junit5/docs/current/user-guide))
    and the class `SampleMathTest` two new methods:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读JUnit用户指南（[https://junit.org/junit5/docs/current/user-guide](https://junit.org/junit5/docs/current/user-guide)）和类`SampleMathTest`两个新方法：
- en: One that is executed only once before any test method is run
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在任何测试方法运行之前执行一次的方法
- en: One that is executed only once after all the test methods were run
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有在所有测试方法运行后执行一次的方法
- en: We did not talk about it, so you would need to do some research.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有讨论它，所以您需要进行一些研究。
- en: Answer
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'For JUnit 5, the annotations that can be used for this purpose are `@BeforeAll` and
    `@AfterAll`. Here is the demonstration code:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JUnit 5，可以用于此目的的注释是`@BeforeAll`和`@AfterAll`。这是演示代码：
- en: '```java'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: public class DemoTest {
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: public class DemoTest {
- en: '@BeforeAll'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '@BeforeAll'
- en: static void beforeAll(){
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有之前的静态方法中：
- en: System.out.println("beforeAll is executed");
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("beforeAll is executed");
- en: '}'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@AfterAll'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '@AfterAll'
- en: static void afterAll(){
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有之后的静态方法中：
- en: System.out.println("afterAll is executed");
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("afterAll is executed");
- en: '}'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: void test1(){
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: void test1(){
- en: System.out.println("test1 is executed");
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("test1 is executed");
- en: '}'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '@Test'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '@Test'
- en: void test2(){
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: void test2(){
- en: System.out.println("test2 is executed");
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("test2 is executed");
- en: '}'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If you run it, the output will be:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行它，输出将是：
- en: '```java'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '```java'
- en: beforeAll is executed
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: beforeAll is executed
- en: test1 is executed
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: test1被执行
- en: test2 is executed
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: test2 is executed
- en: afterAll is executed
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: afterAll is executed
- en: '```'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about Java projects, and how to set them up and
    use them for writing your application code and unit tests. You also learned how
    to build and how to execute application code and unit tests. Basically, that is
    what a Java programmer does most of the time. In the rest of the book, you will
    gain more detailed knowledge of the Java language, the standard libraries, and
    third-party libraries and frameworks.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Java项目以及如何设置和使用它们来编写应用程序代码和单元测试。您还学会了如何构建和执行应用程序代码和单元测试。基本上，这就是Java程序员大部分时间所做的事情。在本书的其余部分，您将更详细地了解Java语言、标准库以及第三方库和框架。
- en: In the next chapter, we will dive deeper into Java language elements and types,
    including `int`, `String`, and `arrays`. You will also learn what an identifier
    is and how to use it as a variable's name, as well as information about Java-reserved
    keywords and comments.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Java语言的元素和类型，包括`int`、`String`和`arrays`。您还将了解标识符是什么，以及如何将其用作变量的名称，以及有关Java保留关键字和注释的信息。
