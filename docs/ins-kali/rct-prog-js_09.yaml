- en: Chapter 9. Demonstrating Functional Reactive Programming in JavaScript with
    a Live Example Part II – A To-do List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。使用实时示例演示JavaScript中的函数式响应式编程第II部分 - 待办事项列表
- en: 'In this chapter, we will be walking through a to-do list. This to-do list will
    illustrate a slightly obscure kind of two-way data binding. ReactJS''s forte is
    via one-way data binding, and most problems, solved in the idiomatic ReactJS fashion,
    will normally follow the von Neumann model with one-way data binding (it is claimed
    that two-way data binding is usually not needed, and articles such as *AngularJS:
    The Bad Parts* suggest that two-way binding carries a heavy price tag by default,
    especially as far as scaling is concerned).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示一个待办事项列表。这个待办事项列表将说明一种略微晦涩的双向数据绑定。ReactJS的长处是通过单向数据绑定，大多数问题都可以按照惯用的ReactJS方式解决，通常会遵循冯·诺伊曼模型的单向数据绑定（据称通常不需要双向数据绑定，而《AngularJS：坏处》等文章表明，双向绑定默认情况下带来了沉重的代价，特别是在扩展方面）。
- en: If we build our to-do list in an obvious way, the checkboxes will be unresponsive.
    We can click on them as much as we want, but they will never be checked because
    one-way data binding uses props—or in our case, the state—to determine whether
    they will be checked. We will make a foray into two-way data binding, which means
    that not only will the checkboxes be live, but also clicking on a checkbox will
    update the state. This means that what is displayed in the user interface, and
    what is behind the scenes as the state are kept in sync with each other.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以一种明显的方式构建待办事项列表，复选框将无响应。我们可以点击它们任意次数，但它们永远不会被选中，因为单向数据绑定使用props或者在我们的情况下，状态来确定它们是否被选中。我们将尝试双向数据绑定，这意味着复选框不仅是活动的，而且点击复选框还会更新状态。这意味着用户界面中显示的内容和作为状态的幕后内容是相互同步的。
- en: The to-do list, as a distinctive feature, offers more than **Done** or **Not
    done** as a status. It has checkboxes for **Important**, **In Progress**, **Problems**,
    and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项列表作为一个独特的特性，提供的不仅仅是**已完成**或**未完成**的状态。它还有**重要**、**进行中**、**问题**等复选框。
- en: 'This chapter will be a walkthrough of the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将演示以下内容：
- en: The nuts and bolts of using add-ons as in two-way data binding
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插件的要领
- en: Setting the appropriate initial state
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置适当的初始状态
- en: Making text inside a `TEXTAREA` editable
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使`TEXTAREA`中的文本可编辑
- en: A `render()` function that does some heavy lifting
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行一些繁重工作的`render()`函数
- en: Inner functions used by `render()`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`使用的内部函数'
- en: Building the table to display
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建表格以显示
- en: Rendering our result
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染我们的结果
- en: Distinguishing the columns visually
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视觉上区分列
- en: Adding a to-do list to our application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的应用程序添加待办事项列表
- en: 'In the previous chapter, you implemented a `YouPick` placeholder for an application
    of your own to create. Here, we will be commenting it out so as to display only
    our to-do application (we can, and we will, arrange things in different parts
    of the screen, but now we are displaying only one thing at a time). In JSX, the
    way to comment out code is to wrap it in a C-style multiline comment, and then
    wrap that in curly braces, so `<YouPick /> becomes {/* <YouPick /> */}`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您实现了一个`YouPick`占位符，用于创建自己的应用程序。在这里，我们将对其进行注释，以便仅显示我们的待办事项应用程序（我们可以，而且我们将在屏幕的不同部分安排事物，但现在我们一次只显示一件事物）。在JSX中，注释掉代码的方法是将其包装在C风格的多行注释中，然后将其包装在花括号中，因此`<YouPick
    />`变成了{/* <YouPick /> */}：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Including ReactJS add-ons in our project
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的项目中包括ReactJS插件
- en: 'We will open the `Todo` class and include the `React.addons.LinkedStateMixin`
    function. Note that we are using an add-on here, and this means that when we include
    ReactJS in our page, we need to include a build containing add-ons. So, consider
    this line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将打开`Todo`类并包括`React.addons.LinkedStateMixin`函数。请注意，我们在这里使用了一个插件，这意味着当我们在页面中包含ReactJS时，我们需要包含一个包含插件的构建。因此，请考虑这一行：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Instead of it, we include the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包括以下内容：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The opening of the `Todo` class reads as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Todo`类的开头如下所示：'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Setting the appropriate initial state
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置适当的初始状态
- en: 'The initial state is empty; there are no to-do items on the list, and there
    is empty text for any new to-do item:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 初始状态为空；列表中没有待办事项，新的待办事项文本也为空：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that some initial state setting may involve heavy lifting; here, it is
    quite simple, but this need not always be the case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些初始状态设置可能涉及繁重的工作；在这里，它非常简单，但情况并非总是如此。
- en: Making text editable
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使文本可编辑
- en: 'As a minor housekeeping detail, we want obvious behavior when someone types
    in the box. Hence we define a two-way data binding for the TEXTAREA so that if
    someone types in the TEXTAREA, the change is added to the state, and overflows
    back to the TEXTAREA:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个小的清理细节，当有人在框中输入时，我们希望行为明显。因此，我们为TEXTAREA定义了双向数据绑定，这样如果有人在TEXTAREA中输入，更改将被添加到状态中，并溢出回到TEXTAREA中：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If someone submits a new to-do item by hitting the **Submit** button after
    entering some text, we add that item to the list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人在输入一些文本后点击**提交**按钮提交新的待办事项，我们将该项目添加到列表中：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Heavy lifting with render()
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`render()`的繁重工作'
- en: 'The `render()` function is slightly more involved, containing inner functions
    and much of the heavy lifting of a responsive user interface based on two-way
    data binding. Just inside of it, we use the `var that=this;` pattern, which is
    absent from most ReactJS code. In most of ReactJS, we can just use this and it
    works automagically; here we are defining inner functions that are not as directly
    built as other ReactJS functions, and we retain a reference to the this object:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()`函数稍微复杂，包含内部函数和基于双向数据绑定的响应式用户界面的大部分繁重工作。在其中，我们使用了`var that=this;`模式，这在大多数ReactJS代码中都是不存在的。在大多数ReactJS中，我们可以直接使用this，它会自动工作；在这里，我们正在定义不像其他ReactJS函数那样直接构建的内部函数，并保留对this对象的引用：'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Inner functions used to render
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于渲染的内部函数
- en: 'The `table_rows` array will hold to-do items. Having defined these, we define
    our first inner anonymous function, `handle_change()`. If the user clicks on one
    of the checkboxes for a to-do item, we extract the HTML ID, which tells its to-do
    item''s ID, as well as which field (that is, checkbox identifier) has been toggled:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_rows`数组将保存待办事项。定义了这些之后，我们定义了我们的第一个内部匿名函数`handle_change()`。如果用户点击待办事项的复选框之一，我们提取HTML
    ID，该ID告诉它的待办事项ID，以及已切换的字段（即复选框标识符）：'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `display_item_details()` function is the lowest of a few functions used
    to build up the display. It builds up an individual TD containing a checkbox:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`display_item_details()`函数是用于构建显示的几个函数中最低级的一个。它构建了一个包含复选框的单个TD：'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, `display_item()` uses these building blocks to build the display for
    a to-do item. Besides including the rendered nodes, that is, checkboxes, it applies
    markdown formatting to the text in the box:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`display_item()`使用这些构建块来构建待办事项的显示。除了包括渲染的节点，也就是复选框，它还对框中的文本应用了Markdown格式：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Building the result table
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建结果表
- en: 'For each item, we add a table row:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个项目，我们添加一个表格行：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, a JSX expression that includes various values calculated so far is
    returned, and it wraps them in a full-featured table:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，返回一个包含到目前为止计算的各种值的JSX表达式，并将它们包装在一个功能齐全的表格中：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is left as an exercise for you to hide and display rows of data when checkboxes
    that should hide and display them are checked.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当选中应该隐藏和显示它们的复选框时，将数据行隐藏和显示是留给你作为练习的。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Here''s one brief remark about the use of tables: there has been a shift from
    primarily using tables to primarily using CSS for formatting. However, the exact
    rule concerning the use of tables is not precisely "don''t use tables at all"
    or "only use tables when you really have to," but "use tables for tabular data."
    This means grids, such as what we displayed here. The table with its grid of checkboxes
    is a good example of a situation where tables are perfectly appropriate in the
    current markup.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于表格的使用，这里有一个简短的备注：从主要使用表格转变为主要使用CSS进行格式化。然而，关于表格使用的确切规则并不是完全“根本不使用表格”或者“只有在确实必须使用表格时才使用”，而是“用于表格数据的表格”。这意味着像我们这里显示的网格。具有复选框网格的表格是表格在当前标记中完全适当的一个很好的例子。
- en: Rendering our result
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 呈现我们的结果
- en: 'Our result will render only when we tell it to; this can be seen as a chore,
    or as an added degree of freedom on our end. Before we end the closure, we write
    this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有在告诉它时，结果才会呈现出来；这可以被视为一种繁琐，也可以被视为我们端的一种额外自由度。在结束闭包之前，我们写下了这个：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Differentiating columns visually
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视觉上区分列
- en: 'At present, our undifferentiated grid of checkboxes runs together. We could
    do several things to differentiate them. A spectrum of colors in the `index.html`
    CSS differentiates them:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的未区分的复选框网格混在一起。我们可以做一些事情来区分它们。`index.html`中的CSS中的一系列颜色将它们区分开来：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a walkthrough of a slightly-more-than-minimal to-do
    list. As far as functionality is concerned, we saw an interactive form built in
    a way that includes two-way data binding. ReactJS's usual recommendation is that
    most of the time, you think you need two-way data binding, but you would really
    be better off just using one-way data binding. However, the framework does not
    seem to be intended as a straightjacket, and where ReactJS says, "You usually
    shouldn't do X," there is a way to do X. For both dangerouslySetInnerHTML and
    two-way data binding, you can opt into it on specific points, but every effort
    has been made to opt for better engineering. The `dangerouslySetInnerHTML` function
    is a singularly forceful way to name something, and the clearly expressed opinion
    of the ReactJS team is that the von Neumann model calls for one-way data binding,
    at least in most cases. However, the ReactJS philosophy explicitly allows developers
    to use features they think are best to usually avoid; the final verdict is with
    you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们漫游了一个略微超过最小限度的待办事项列表。就功能而言，我们看到了一个以包括双向数据绑定的方式构建的交互式表单。ReactJS通常建议，大多数情况下，你认为你需要双向数据绑定，但你真的最好只使用单向数据绑定。然而，该框架似乎并不打算作为一种约束，当ReactJS说，“你通常不应该做X”时，是有办法做X的。对于`dangerouslySetInnerHTML`和双向数据绑定，你可以在特定点选择使用它，但已经尽一切努力选择更好的工程。`dangerouslySetInnerHTML`函数是一种非常有力的命名方式，ReactJS团队明确表达的观点是冯·诺伊曼模型要求至少在大多数情况下使用单向数据绑定。然而，ReactJS的哲学明确允许开发人员使用他们认为最好通常要避免的功能；最终的裁决权在你手中。
- en: Join us in our next chapter as we create a calendar application that handles
    recurring appointments gracefully.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下一章中，加入我们，我们将创建一个优雅处理重复预约的日历应用程序。
