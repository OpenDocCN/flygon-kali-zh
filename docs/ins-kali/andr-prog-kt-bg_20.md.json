["```kt\nimport android.graphics.Bitmap\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Paint\nimport android.widget.ImageView\n\n```", "```kt\n// Here are all the objects(instances)\n// of classes that we need to do some drawing\nlateinit var myImageView: ImageView\nlateinit var myBlankBitmap: Bitmap\nlateinit var myCanvas: Canvas\nlateinit var myPaint: Paint\n```", "```kt\n// Initialize all the objects ready for drawing\n// We will do this inside the onCreate function\nval widthInPixels = 800\nval heightInPixels = 600\n\n// Create a new Bitmap\nmyBlankBitmap = Bitmap.createBitmap(widthInPixels,\n         heightInPixels,\n         Bitmap.Config.ARGB_8888)\n\n// Initialize the Canvas and associate it\n// with the Bitmap to draw on\nmyCanvas = Canvas(myBlankBitmap)\n\n// Initialize the ImageView and the Paint\nmyImageView = ImageView(this)\nmyPaint = Paint()\n// Do drawing here\n```", "```kt\n// Do drawing here\n```", "```kt\n// Associate the drawn upon Bitmap with the ImageView\nmyImageView.setImageBitmap(myBlankBitmap);\n// Tell Android to set our drawing\n// as the view for this app\n// via the ImageView\nsetContentView(myImageView);\n```", "```kt\nclass MainActivity : Activity() {\n```", "```kt\nimport android.app.Activity\n```", "```kt\n// Here are all the objects(instances)\n// of classes that we need to do some drawing\nlateinit var myImageView: ImageView\nlateinit var myBlankBitmap: Bitmap\nlateinit var myCanvas: Canvas\nlateinit var myPaint: Paint\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n   super.onCreate(savedInstanceState)\n}\n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n   super.onCreate(savedInstanceState)\n\n   // Initialize all the objects ready for drawing\n   // We will do this inside the onCreate function\n   val widthInPixels = 800\n   val heightInPixels = 600\n\n   // Create a new Bitmap\n   myBlankBitmap = Bitmap.createBitmap(widthInPixels,\n                heightInPixels,\n                Bitmap.Config.ARGB_8888)\n\n   // Initialize the Canvas and associate it\n   // with the Bitmap to draw on\n   myCanvas = Canvas(myBlankBitmap)\n\n   // Initialize the ImageView and the Paint\n   myImageView = ImageView(this)\n   myPaint = Paint()\n}\n```", "```kt\n// Draw on the Bitmap\n// Wipe the Bitmap with a blue color\nmyCanvas.drawColor(Color.argb(255, 0, 0, 255))\n\n// Re-size the text\nmyPaint.textSize = 100f\n// Change the paint to white\nmyPaint.color = Color.argb(255, 255, 255, 255)\n// Draw some text\nmyCanvas.drawText(\"Hello World!\",100f, 100f, myPaint)\n\n// Change the paint to yellow\nmyPaint.color = Color.argb(255, 212, 207, 62)\n// Draw a circle\nmyCanvas.drawCircle(400f, 250f, 100f, myPaint)\n```", "```kt\n// Associate the drawn upon Bitmap with the ImageView\nmyImageView.setImageBitmap(myBlankBitmap);\n// Tell Android to set our drawing\n// as the view for this app\n// via the ImageView\nsetContentView(myImageView);\n```", "```kt\nmyBitmap = BitmapFactory.decodeResource\n                (resources, R.drawable.myImage)\n```", "```kt\n// Draw the bitmap at coordinates 100, 100\ncanvas.drawBitmap(myBitmap, \n                100, 100, myPaint);\n```", "```kt\nval matrix = Matrix()\n```", "```kt\nmatrix.preScale(-1, 1)\n```", "```kt\nmyBitmapLeft = Bitmap\n    .createBitmap(myBitmapRight,\n          0, 0, 50, 25, matrix, true)\n```", "```kt\n// A matrix for rotating\nmatrix.preRotate(-90)\n```", "```kt\nmBitmapUp = Bitmap\n   .createBitmap(mBitmap,\n         0, 0, 25, 50, matrix, true)\n```", "```kt\nclass MainActivity : Activity() {\n```", "```kt\nimport android.app.Activity\n```", "```kt\n// Here are all the objects(instances)\n// of classes that we need to do some drawing\nlateinit var myImageView: ImageView\nlateinit var myBlankBitmap: Bitmap\nlateinit var bobBitmap: Bitmap\nlateinit var myCanvas: Canvas\nlateinit var myPaint: Paint\n```", "```kt\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.Canvas\nimport android.graphics.Color\nimport android.graphics.Matrix\nimport android.graphics.Paint\nimport android.widget.ImageView\n```", "```kt\n// Initialize all the objects ready for drawing\nval widthInPixels = 2000\nval heightInPixels = 1000\n\n// Create a new Bitmap\nmyBlankBitmap = Bitmap.createBitmap(widthInPixels,\n         heightInPixels,\n         Bitmap.Config.ARGB_8888)\n\n// Initialize Bob\nbobBitmap = BitmapFactory.decodeResource(\n          resources, R.drawable.bob)\n\n// Initialize the Canvas and associate it\n// with the Bitmap to draw on\nmyCanvas = Canvas(myBlankBitmap)\n\n// Initialize the ImageView and the Paint\nmyImageView = ImageView(this)\nmyPaint = Paint()\n\n// Draw on the Bitmap\n// Wipe the Bitmap with a blue color\nmyCanvas.drawColor(Color.argb(\n         255, 0, 0, 255))\n```", "```kt\n// Draw some bitmaps\ndrawRotatedBitmaps()\ndrawEnlargedBitmap()\ndrawShrunkenBitmap()\n\n// Associate the drawn upon Bitmap\n// with the ImageView\nmyImageView.setImageBitmap(myBlankBitmap)\n// Tell Android to set our drawing\n// as the view for this app\n// via the ImageView\nsetContentView(myImageView)\n```", "```kt\nfun drawRotatedBitmaps() {\n   var rotation = 0f\n   var horizontalPosition = 350\n   var verticalPosition = 25\n   val matrix = Matrix()\n\n   var rotatedBitmap: Bitmap\n\n   rotation = 0f\n   while (rotation < 360) {\n         matrix.reset()\n         matrix.preRotate(rotation)\n         rotatedBitmap = Bitmap\n                      .createBitmap(bobBitmap, \n                      0, 0, bobBitmap.width - 1,\n                      bobBitmap.height - 1,\n                      matrix, true)\n\n        myCanvas.drawBitmap(\n                    rotatedBitmap,\n                    horizontalPosition.toFloat(),\n                    verticalPosition.toFloat(),\n                    myPaint)\n\n        horizontalPosition += 120\n        verticalPosition += 70\n        rotation += 30f\n  }\n}\n```", "```kt\nfun drawEnlargedBitmap() {\n  bobBitmap = Bitmap\n               .createScaledBitmap(bobBitmap,\n                           300, 400, false)\n  myCanvas.drawBitmap(bobBitmap, 25f, 25f, myPaint)\n\n}\n\nfun drawShrunkenBitmap() {\n  bobBitmap = Bitmap\n              .createScaledBitmap(bobBitmap,\n                          50, 75, false)\n  myCanvas.drawBitmap(bobBitmap, 250f, 25f, myPaint)\n}\n```"]