- en: Chapter 7. Forensic Analysis of Android Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。Android应用程序取证分析
- en: 'This chapter will cover application analysis, using free and open source tools.
    It will focus on analyzing the data that would be recovered using any of the logical
    or physical techniques detailed in [Chapters 4](part0031.xhtml "Chapter 4. Extracting
    Data Logically from Android Devices") and [Chapter 5](part0040.xhtml "Chapter 5. Extracting
    Data Physically from Android Devices"). It will also rely heavily on the storage
    methods discussed in [Chapter 2](part0019.xhtml "Chapter 2. Setting Up an Android
    Forensic Environment"). We will see numerous SQLite databases, XML files, and
    other file types from various locations within the file hierarchy described in
    the second chapter. By the end of this chapter, you should be familiar with the
    following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍应用程序分析，使用免费和开源工具。它将重点分析使用[第4章](part0031.xhtml "第4章。从Android设备逻辑上提取数据")和[第5章](part0040.xhtml
    "第5章。从Android设备物理上提取数据")中详细介绍的任何逻辑或物理技术恢复的数据。它还将大量依赖于[第2章](part0019.xhtml "第2章。设置Android取证环境")中讨论的存储方法。我们将看到第二章中描述的文件层次结构中各个位置的众多SQLite数据库、XML文件和其他文件类型。在本章结束时，您应该熟悉以下主题：
- en: 'An overview of application analysis:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序分析概述：
- en: Contacts/Calls/SMS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联系人/通话/短信
- en: Wi-Fi
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wi-Fi
- en: User dictionary
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户词典
- en: 'Third-party applications and various methods used by popular applications to
    store and obfuscate data listed as follows:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出了第三方应用程序和流行应用程序用于存储和混淆数据的各种方法。
- en: Plain text
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯文本
- en: Epoch time
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时代时间
- en: WebKit time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebKit时间
- en: Misnaming file extensions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误命名文件扩展名
- en: Julian dates
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 儒略日期
- en: Base64 encoding
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Base64编码
- en: Encryption
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Basic steganography
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本隐写术
- en: SQLCipher
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLCipher
- en: Basic application reverse engineering
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本应用程序逆向工程
- en: Application analysis
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序分析
- en: Forensically analyzing an application is as much of an art as it is a science.
    There are myriad ways an application can store or obfuscate its data. Different
    versions of the same application may even store the same data differently. A developer
    is really only limited by their imagination (and Android platform restrictions)
    when it comes to choosing how to store their data. As a result of these factors,
    application analysis is a constantly shifting target. The methods that an examiner
    uses one day may be completely irrelevant the next.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对应用程序进行取证分析既是一门艺术，也是一门科学。应用程序可以存储或混淆数据的方式多种多样。甚至同一应用程序的不同版本可能以不同的方式存储相同的数据。当开发者选择如何存储他们的数据时，他们实际上只受到他们的想象力（和Android平台的限制）的限制。由于这些因素，应用程序分析是一个不断变化的目标。一天使用的方法可能在第二天就完全无关紧要了。
- en: The end goal of forensically analyzing an application is consistently the same,
    to understand what the app was used for and find user data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对应用程序进行取证分析的最终目标始终是相同的，即了解应用程序的用途并找到用户数据。
- en: In this chapter, we will look at the current version of many common applications.
    As apps can, and do, change how they store data through updates, nothing in this
    chapter is a definitive guide for how to analyze that application. Instead, we
    will look at a broad range of applications to show a variety of different methods
    used by applications to store their data. For the most part, we will look at very
    common applications (millions of downloads from Google Play), except for cases
    where looking at an obscure app can reveal interesting new ways of storing data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看许多常见应用程序的当前版本。由于应用程序可以通过更新改变它们存储数据的方式，因此本章中的内容并不是分析该应用程序的权威指南。相反，我们将查看广泛的应用程序范围，展示应用程序用于存储数据的各种不同方法。在大多数情况下，我们将查看非常常见的应用程序（从Google
    Play下载了数百万次），除非查看一个不常见的应用程序可以揭示存储数据的有趣新方法。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While we made every attempt to be thorough in our usage of each application
    when populating our test data, it is entirely possible that not every feature
    of every application was used. The apps analyzed in the following sections are
    examples of how to examine data from that application, but may not include every
    possible bit of data that may be recovered.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在填充测试数据时尽力全面地使用了每个应用程序的功能，但有可能并没有使用每个应用程序的每个功能。以下部分中分析的应用程序是如何检查该应用程序的数据的示例，但可能并不包括可能恢复的每一小部分数据。
- en: All of our testing used the default settings of each application, as if the
    application was downloaded and immediately used. Different settings may affect
    the data that is stored and the location of the data on the device.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的测试都使用了每个应用程序的默认设置，就好像应用程序是下载并立即使用的一样。不同的设置可能会影响存储的数据以及设备上数据的位置。
- en: Also, this analysis was done on a Nexus 5 running Android 5.0.1\. Certain manufacturers,
    such as HTC and Samsung, may provide applications that duplicate functionality
    from these apps (such as a home screen widget that accesses Facebook). These apps
    may store data in different locations. Some files we analyze may not be present
    on other versions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这项分析是在运行Android 5.0.1的Nexus 5上进行的。某些制造商，如HTC和三星，可能提供复制这些应用程序功能的应用程序（例如访问Facebook的主屏幕小部件）。这些应用程序可能会将数据存储在不同的位置。我们分析的一些文件可能在其他版本上不存在。
- en: Why do app analysis?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要进行应用程序分析？
- en: 'For starters, even standard phone functions, such as contacts, calls, and SMS,
    are done through applications on Android devices. So, even acquiring basic data
    requires us to analyze an application. Second, a person''s app usage can tell
    you a lot about them: where they''ve been (and when they were there), who they''ve
    communicated with, and even what they may be planning in the future.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，即使是标准的手机功能，如联系人、通话和短信，也是通过Android设备上的应用程序完成的。因此，即使获取基本数据也需要我们分析一个应用程序。其次，一个人的应用程序使用情况可以告诉你很多关于他们的信息：他们去过哪里（以及何时去过），他们与谁交流过，甚至他们可能在未来计划做什么。
- en: Many phones can come out of the box with more than 20 preinstalled applications.
    A Yahoo study in 2014 revealed that users have, on average, 95 apps installed
    on their device. A Nielsen study showed that the average user uses 26 apps per
    month. An examiner has no real way of knowing which of these apps could contain
    information useful for an investigation, and therefore, all of them must be analyzed.
    An examiner may be tempted to skip over certain apps that would appear to have
    little useful data, such as games. This would be a bad idea, though. Many popular
    games, such as *Words with Friends* or *Clash of Clans*, have a built-in chat
    feature that could yield useful information. The following analysis will focus
    heavily on messaging applications, as our experience shows that these tend to
    be the most valuable in forensic analysis.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多手机在出厂时都预装了20多个应用程序。雅虎在2014年的一项研究显示，用户平均安装了95个应用程序。尼尔森的一项研究显示，平均用户每月使用26个应用程序。鉴定人员无法真正知道这些应用程序中哪些可能包含对调查有用的信息，因此所有应用程序都必须进行分析。鉴定人员可能会忽略某些看起来没有多少有用数据的应用程序，比如游戏。然而，这是一个坏主意。许多流行的游戏，比如《Words
    with Friends》或《Clash of Clans》，都有内置的聊天功能，可能会提供有用的信息。接下来的分析将重点放在消息应用上，因为我们的经验表明这些应用在法证分析中往往是最有价值的。
- en: The layout of this chapter
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本章的布局
- en: 'For each application we examine, we will provide a package name, version number
    if possible, and files of interest. For example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们检查的每个应用程序，我们将提供包名称、版本号（如果可能的话）和感兴趣的文件。例如：
- en: 'Package name: `com.android.providers.contacts`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.android.providers.contacts`
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：默认版本，带有Android 5.0.1（未在应用程序中列出）
- en: 'Files of interest:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/files/`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/`'
- en: '`photos/`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`photos/`'
- en: All apps store their data in the `/data/data` directory by default. Apps could
    also use the SD card if they ask for this permission when the app is installed.
    The package name is the name of the directory for the application in the `/data/data`
    directory. Files of interest are from the root of the package name (that is, /`data/data/com.android.providers.contacts/files/photos`
    for the preceding example). Paths to data on the SD card are shown beginning with
    `/sdcard` (that is, `/sdcard/com.facebook.orca`). Do not expect to find data paths
    beginning with `/sdcard` in the `/data/data` directory of the application!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序默认都将其数据存储在`/data/data`目录中。如果应用程序在安装时请求了这个权限，它们也可以使用SD卡。包名称是`/data/data`目录中应用程序目录的名称。感兴趣的文件来自包名称的根目录（即前面示例中的`/data/data/com.android.providers.contacts/files/photos`）。SD卡上数据的路径以`/sdcard`开头（即`/sdcard/com.facebook.orca`）。不要期望在应用程序的`/data/data`目录中找到以`/sdcard`开头的数据路径！
- en: We will begin by looking at some of Google's applications, because these are
    preinstalled on the vast majority of devices (though they do not have to be).
    Then, we will look at third-party applications that can be found on Google Play.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先查看一些谷歌的应用程序，因为这些应用程序预装在绝大多数设备上（尽管不一定）。然后，我们将查看可以在Google Play上找到的第三方应用程序。
- en: Determining what apps are installed
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定安装了哪些应用程序
- en: 'To see what applications are on the device, an examiner could navigate to `/data/data`
    and run the `ls` command. However, this doesn''t provide well-formatted data that
    will look good in a forensic report. We suggest that you pull the `/data/system/packages.list`
    file. This file lists the package name for every app on the device and path to
    its data (if this file does not exist on the device, the `adb shell pm list packages
    -f` command is a good alternative). For example, here is an entry for Google Chrome
    (the full file on our test device contained 120 entries):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看设备上有哪些应用程序，鉴定人员可以导航到`/data/data`并运行`ls`命令。然而，这并不提供格式良好的数据，无法在法证报告中展示。我们建议您提取`/data/system/packages.list`文件。该文件列出了设备上每个应用程序的包名称和其数据的路径（如果设备上不存在此文件，则`adb
    shell pm list packages -f`命令是一个很好的替代方法）。例如，这是Google Chrome的一个条目（我们的测试设备上完整的文件包含了120个条目）：
- en: '![Determining what apps are installed](img/image00389.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![确定安装了哪些应用程序](img/image00389.jpeg)'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is the first method of data storage: plain text. Often, we will see apps
    store data in plain text, including data you wouldn''t expect (such as passwords).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据存储的第一种方法：纯文本。通常，我们会看到应用程序以纯文本形式存储数据，包括您意想不到的数据（比如密码）。
- en: 'Perhaps of greater interest is the `/data/system/package-usage.list` file,
    which shows the last time a package (or application) was used. It''s not perfect;
    the times shown in the file did not correlate exactly with the last time we used
    the app. It appears that the app updating or receiving notifications (even if
    the user does not view them) may affect the time. However, it is good for a general
    indication of the last apps the user accessed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 也许更有趣的是`/data/system/package-usage.list`文件，它显示了包（或应用程序）上次使用的时间。这并不完美；文件中显示的时间与我们上次使用应用程序的时间并不完全一致。似乎应用程序的更新或接收通知（即使用户没有查看）可能会影响时间。然而，它对用户最后访问的应用程序的一般指示是有用的：
- en: '![Determining what apps are installed](img/image00390.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![确定安装了哪些应用程序](img/image00390.jpeg)'
- en: If you're wondering where the time is in the preceding line, it's in a format
    known as Linux epoch time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道前一行的时间在哪里，它是以Linux纪元时间的格式知道的。
- en: Understanding Linux epoch time
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Linux纪元时间
- en: '**Linux epoch time**, also known as Unix time or Posix time, is stored as the
    number of seconds (or milliseconds) since midnight on 1 January, 1970, UTC. A
    10-digit value indicates it is in seconds, while a 13-digit value is indicative
    of a millisecond value (at least for times likely to be found on a smartphone,
    as 9-digit second and 12-digit millisecond values haven''t occurred since 2001).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux纪元时间**，也称为Unix时间或Posix时间，存储为自1970年1月1日UTC午夜以来的秒数（或毫秒数）。10位数表示秒数，而13位数表示毫秒数（至少对于可能在智能手机上找到的时间，自2001年以来，9位数秒和12位数毫秒值就没有出现过）。'
- en: In the preceding example, the value is `1422206858650`; Google Chrome was last
    used 1 billion, 422 million, 206 thousand, 858 seconds, and 650 milliseconds since
    midnight on 1 January, 1970! Don't worry; we don't know what date/time that is
    either. There are many scripts and tools available for download to convert this
    value to a human-readable format. We prefer the free tool **DCode**, which can
    be found at [http://www.digital-detective.net/digital-forensic-software/free-tools/](http://www.digital-detective.net/digital-forensic-software/free-tools/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，该值为`1422206858650`；Google Chrome自1970年1月1日午夜以来已经使用了10亿4220万6858秒和650毫秒！别担心；我们也不知道那是什么日期/时间。有许多可供下载的脚本和工具可用于将此值转换为人类可读格式。我们更喜欢免费工具**DCode**，可以在[http://www.digital-detective.net/digital-forensic-software/free-tools/](http://www.digital-detective.net/digital-forensic-software/free-tools/)找到。
- en: 'In DCode, simply select **Unix: Millisecond Value** from the drop-down list,
    type in the value in the **Value to Decode** field, and click on **Decode**:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在DCode中，只需从下拉列表中选择**Unix：毫秒值**，在**解码值**字段中输入值，然后单击**解码**：
- en: '![Understanding Linux epoch time](img/image00391.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![理解Linux时代时间](img/image00391.jpeg)'
- en: The **Add Bias** field can be selected to convert the time to the desired time
    zone.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加偏差**字段可以选择将时间转换为所需的时区。'
- en: Alternatively, there is also a very useful online epoch converter at [http://www.epochconverter.com/](http://www.epochconverter.com/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，还有一个非常有用的在线时代转换器，网址为[http://www.epochconverter.com/](http://www.epochconverter.com/)。
- en: Using either method, we can see that Google Chrome was actually last used on
    January 25, 2015, at 17:27:38.650 UTC. Linux epoch time is frequently used on
    Android devices to store date/time values and will come up repeatedly in our application
    analysis.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任一方法，我们可以看到Google Chrome实际上是在2015年1月25日17:27:38.650 UTC最后使用的。Linux时代时间经常用于Android设备上存储日期/时间值，并将在我们的应用程序分析中反复出现。
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is the second data storage method: Linux epoch time.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二种数据存储方法：Linux时代时间。
- en: Wi-Fi analysis
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wi-Fi分析
- en: 'Wi-Fi is not technically an application (as evidenced by the fact that it is
    not recovered from `/data/data`), but it is an invaluable source of data that
    should be examined. So, we''ll briefly discuss it here. Wi-Fi connection data
    is found in `/data/misc/wifi/wpa_supplicant.conf`. The `wpa_supplicant.conf` file
    contains a list of access points that the user has chosen to connect to automatically
    (this is set by default when a new access point is connected to). Access points
    that the user has "forgotten" through the device settings will not be shown. If
    the access point requires a password, that would also be stored in the file in
    plain text. In the following example, the `NETGEAR60` access point required a
    password (`ancientshoe601`), while `hhonors` did not:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi在技术上不是一个应用程序（这可以从它没有从`/data/data`中恢复出来来证明），但它是一个宝贵的数据来源，应该被检查。因此，我们在这里简要讨论一下。Wi-Fi连接数据可以在`/data/misc/wifi/wpa_supplicant.conf`中找到。`wpa_supplicant.conf`文件包含了用户选择自动连接的访问点列表（当连接到新的访问点时，默认设置为自动连接）。用户通过设备设置“忘记”的访问点将不会显示。如果访问点需要密码，密码也会以明文存储在文件中。在下面的例子中，`NETGEAR60`访问点需要密码（`ancientshoe601`），而`hhonors`不需要：
- en: '![Wi-Fi analysis](img/image00392.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Wi-Fi分析](img/image00392.jpeg)'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The presence of a **Service Set ID** (**SSID**) in this file does NOT mean that
    this device connected to that access point. These settings are saved to a user's
    Google account and added to the device when that account is set up. An examiner
    can only conclude that the user connected to these access points from some Android
    device, but not necessarily the device being examined.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中存在**服务集标识符**（SSID）并不意味着这个设备连接到了该访问点。这些设置保存在用户的Google账户中，并在设置该账户时添加到设备中。检查员只能得出用户从某个Android设备连接到这些访问点的结论，但不一定是正在检查的设备。
- en: Contacts/call analysis
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系人/通话分析
- en: Contacts and call logs are stored in the same database. Contacts do not have
    to be added explicitly by the user. They may be autofilled when an e-mail is sent
    through Gmail, or a person is added on Google+, or possibly many other ways.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人和通话记录存储在同一个数据库中。联系人不一定要由用户明确添加。当通过Gmail发送电子邮件时，或者在Google+上添加一个人，或者可能还有其他许多方式时，它们可能会被自动填充。
- en: 'Package name: `com.android.providers.contacts`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 包名：`com.android.providers.contacts`
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：默认版本与Android 5.0.1（未在应用程序中列出）
- en: 'Files of interest:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/files/`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/`'
- en: '`photos/`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`photos/`'
- en: '`profile/`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile/`'
- en: '`/databases/`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`contacts2.db`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts2.db`'
- en: The `files` directory contains photos for the user's contacts in the `photos`
    directory and the user's profile photo in the `profile` directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`files`目录包含了用户联系人的`photos`目录中的照片和用户的个人资料照片在`profile`目录中。'
- en: 'The `contacts2.db` database contains all of the information about calls made
    to and from the device and all contacts in the user''s Google account. It contains
    the following tables:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`contacts2.db`数据库包含了设备上所有通话记录和用户Google账户中的所有联系人的信息。它包含以下表格：'
- en: '| Table | Description |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 表格 | 描述 |'
- en: '| --- | --- |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `accounts` | This shows the accounts on the device that have access to the
    contacts list. At least one of the accounts will show the user''s Google account
    e-mail address. This list may include third-party apps installed that have permission
    to access the contacts list (we will see this in the Tango, Viber, and WhatsApp
    sections). |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `accounts` | 这显示了设备上具有访问联系人列表权限的账户。至少一个账户将显示用户的Google账户电子邮件地址。此列表可能包括已安装的第三方应用程序，这些应用程序具有访问联系人列表的权限（我们将在Tango、Viber和WhatsApp部分看到这一点）。'
- en: '| `calls` | This contains information regarding all calls to and from the device.
    The `number` column shows the remote user''s phone number, whether the call was
    sent or received. The `date` column is the date/time of the call, stored in the
    Linux epoch format. The `duration` column is the length of the call, in seconds.
    The `type` column indicates the type of call:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '| `calls` | 这包含有关设备的所有呼入和呼出电话的信息。“number”列显示远程用户的电话号码，无论是发送还是接收的呼叫。“date”列是呼叫的日期/时间，以Linux时代格式存储。“duration”列是呼叫的长度，以秒为单位。“type”列指示呼叫的类型：'
- en: '`1` = incoming'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` = 收到的'
- en: '`2` = outgoing'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` = 发出的'
- en: '`3` = missed'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3` = 未接'
- en: The `name` column shows the remote user's name, if the number was stored in
    the contact list. The `geocoded_location` column shows the location of the phone
    number based on the area code (for US numbers) or country code. |
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “name”列显示远程用户的名称，如果该号码存储在联系人列表中。“geocoded_location”列显示基于区号（对于美国号码）或国家代码的电话号码的位置。
- en: '| `contacts` | This contains partial information for contacts (more data can
    be found in the `raw_contacts` table). The `name_raw_contact_id` value corresponds
    to the `_id` value in the `raw_contacts` table. The `photo_file_id` value corresponds
    to the filename found in the `/files/photos` directory. The `times_contacted`
    and `last_time_contacted` columns show the number of times that contact was called
    from or made a call to the device, and the time of the last call in the Linux
    epoch format. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `contacts` | 这包含联系人的部分信息（更多数据可以在“raw_contacts”表中找到）。“name_raw_contact_id”值对应于“raw_contacts”表中的“_id”值。“photo_file_id”值对应于“/files/photos”目录中找到的文件名。“times_contacted”和“last_time_contacted”列显示从设备呼叫或接听该联系人电话的次数，以及最后一次呼叫的时间（Linux时代格式）。'
- en: '| `data` | This table contains all of the information for each contact: e-mail
    address, phone numbers, and so on. The `raw_contact_id` column is a unique value
    for each contact that can be correlated with the `_id` value in `raw_contact_id`
    to identify the contact. Note that each contact may have several rows, as seen
    by the identical `raw_contact_id` values. There are 15 data columns (`data1` to
    `data15`) that contain some information about the contact, but there are no discernible
    patterns. The same column may contain the contact name, an e-mail address, a Google+
    profile, and so on. The value in the `data14` column correlates to the filenames
    of the images in the `/files/profiles` path. The `data15` column contains a thumbnail
    of the contact''s profile photo. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 该表包含每个联系人的所有信息：电子邮件地址、电话号码等。“raw_contact_id”列是每个联系人的唯一值，可以与“raw_contact_id”中的“_id”值相关联以识别联系人。请注意，每个联系人可能有多行，如相同的“raw_contact_id”值所示。有15个数据列（“data1”到“data15”）包含有关联系人的一些信息，但没有可辨认的模式。同一列可能包含联系人姓名、电子邮件地址、Google+个人资料等。“data14”列中的值与“/files/profiles”路径中图像的文件名相关联。“data15”列包含联系人个人资料照片的缩略图。'
- en: '| `deleted_contacts` | This contains a `contact_id` value and `deleted_contact_timestamp`
    in the Linux epoch format. However, this cannot be correlated back to any other
    tables to identify the name of the contact that was deleted. It may be possible
    to use the deleted data-recovery techniques in [Chapter 6](part0048.xhtml "Chapter 6. Recovering
    Deleted Data from an Android Device"), *Recovering Deleted Data from an Android
    Device*, to recover the contact names, though. The `contact_id` value corresponds
    to the `contact_id` column in the `raw_contacts` table. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `deleted_contacts` | 这包含“contact_id”值和以Linux时代格式的“deleted_contact_timestamp”。然而，这不能与任何其他表相关联以确定已删除的联系人的名称。可能可以使用[第6章](part0048.xhtml
    "第6章。从Android设备中恢复已删除的数据")中的已删除数据恢复技术来恢复联系人名称。“contact_id”值对应于“raw_contacts”表中的“contact_id”列。'
- en: '| `groups` | This shows groups in the contact list, either automatically generated
    or created by the user. The title of the group is the name of the group. There
    does not appear to be a way to identify users in each group. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `groups` | 这显示联系人列表中的组，可以是自动生成的或用户创建的。组的标题是组的名称。似乎没有办法识别每个组中的用户。'
- en: '| `raw_contacts` | This contains all information for every contact in the contact
    list. The `display_name` column shows the contact''s name, if it is available.
    To determine the contact''s phone number, e-mail address, or other information,
    the `_id` column value must be matched back to the `raw_contact_id` value in the
    data table. The `sync3` column shows a timestamp, but based on our testing, this
    cannot be assumed to be the time the contact was added. We had contacts several
    years old that were synced this month. The `times_contacted` and `last_time_contacted`
    columns only apply for phone calls; sending an e-mail or SMS to a contact did
    not increment these values.We were unable to identify any means to determine whether
    a contact was added through the phone interface, added as a friend on Google+,
    or added through other methods. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `raw_contacts` | 这包含联系人列表中每个联系人的所有信息。“display_name”列显示联系人的名称，如果可用。要确定联系人的电话号码、电子邮件地址或其他信息，必须将“_id”列的值与数据表中的“raw_contact_id”值匹配。“sync3”列显示时间戳，但根据我们的测试，不能假定这是联系人添加的时间。我们有一些几年前的联系人在本月同步了。“times_contacted”和“last_time_contacted”列仅适用于电话呼叫；向联系人发送电子邮件或短信不会增加这些值。我们无法确定任何方法来确定联系人是通过电话界面添加的，还是作为Google+上的朋友添加的，或者是通过其他方法添加的。'
- en: SMS/MMS analysis
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短信/彩信分析
- en: SMS and MMS messages are stored in the same database. In our experience, this
    database is also used, regardless of what application is used to send the SMS/MMS
    (that is, sending an SMS through Google Hangouts will populate this database,
    not the Hangouts database examined here). However, third-party apps may also record
    the data in their own databases.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 短信和彩信消息存储在同一个数据库中。根据我们的经验，无论使用何种应用程序发送短信/彩信（即，通过Google Hangouts发送短信将填充此数据库，而不是在此处检查的Hangouts数据库），都会使用此数据库。但是，第三方应用程序也可能将数据记录在其自己的数据库中。
- en: 'Package name: `com.android.providers.telephony`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：“com.android.providers.telephony”
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：Android 5.0.1的默认版本（在应用程序中未列出）
- en: 'Files of interest:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/app_parts`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app_parts`'
- en: '`/databases/`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`mmssms.db`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mmssms.db`'
- en: '`telephony.db`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`telephony.db`'
- en: The `app_parts` directory contains attachments sent as an MMS, both sent and
    received.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`app_parts`目录包含了作为彩信发送和接收的附件。'
- en: 'The `telephony.db` database is small, but contains one potentially useful source
    of information. The table in telephony.db is described as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`telephony.db`数据库很小，但包含了一个潜在有用的信息来源。telephony.db中的表描述如下：'
- en: '| Table | Description |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `siminfo` | This contains historical data for all SIMs that have been used
    in the device, including the ICCID, phone number (if it was stored on the SIM),
    and the **mobile country code** (**MCC**) / **mobile network code** (**MNC**),
    which can be used to identify the network provider. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `siminfo` | 这包含了设备中使用过的所有SIM卡的历史数据，包括ICCID、电话号码（如果存储在SIM卡上）和**移动国家码**（MCC）/
    **移动网络码**（MNC），可以用来识别网络提供商。|'
- en: 'The `mmssms.db` database contains all information regarding SMS and MMS messages
    as described in the following table:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`mmssms.db`数据库包含了关于短信和彩信消息的所有信息，如下表所述：'
- en: '| Table | Description |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `part` | This contains information about files attached to an MMS. Each message
    will have at least two parts: an SMIL header and the attachment. This can be seen
    in the `mid` and `ct` columns, as well as the file type attached. The `_data`
    column provides the path to find the file on the device. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `part` | 这包含了附加到彩信的文件的信息。每条消息至少有两个部分：一个SMIL头和附件。这可以在`mid`和`ct`列中看到，以及附加的文件类型。`_data`列提供了在设备上找到文件的路径。|'
- en: '| `pdu` | This contains metadata about each MMS. The `date` column identifies
    when the message was sent or received, in the Linux epoch format. The `_id` column
    appears to correspond to the mid value in the part column; correlating these values
    will show the time a specific image was sent. The `msg_box` column shows the direction
    of the message (`1` = received and `2` = sent). |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `pdu` | 这包含了每条彩信的元数据。`date`列标识了消息发送或接收的时间，以Linux纪元格式表示。`_id`列似乎对应于part列中的mid值；对这些值进行对应将显示特定图像发送的时间。`msg_box`列显示消息的方向（`1`
    = 接收，`2` = 发送）。|'
- en: '| `sms` | This contains metadata about each SMS (it does not include MMS information).
    The `address` column shows the phone number of the remote user, regardless of
    whether it was a sent or received message. The `person` column contains a value
    that can be looked up in the `contacts2.db` database and corresponds with `raw_contact_id`
    in the `data` table. The `person` column would be blank if it was a sent message
    or if the remote user is not in the contacts list. The `date` column shows the
    timestamp when a message was sent in the Linux epoch format. The `type` column
    shows the direction of the message (`1` = received, `2` = sent). The `body` column
    displays the content of the message. The `seen` column indicates whether or not
    the message was read (`0` = unread, `1` = read); all sent messages will be marked
    as unread. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `sms` | 这包含了每条短信的元数据（不包括MMS信息）。`address`列显示远程用户的电话号码，无论是发送还是接收消息。`person`列包含一个值，可以在`contacts2.db`数据库中查找，并与`data`表中的`raw_contact_id`对应。如果是发送消息或远程用户不在联系人列表中，`person`列将为空。`date`列显示消息发送的时间戳，以Linux纪元格式表示。`type`列显示消息的方向（`1`
    = 接收，`2` = 发送）。`body`列显示消息的内容。`seen`列指示消息是否已读（`0` = 未读，`1` = 已读）；所有发送的消息都将标记为未读。|'
- en: '| `words`, `words_content`, `words_segdir` | This appears to contain duplicate
    content of messages; the exact purpose of this table is unclear. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `words`，`words_content`，`words_segdir` | 这似乎包含了重复的消息内容；这个表的确切目的不清楚。|'
- en: User dictionary analysis
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户词典分析
- en: The **user dictionary** is an incredible source of data for an examiner. While
    it is not necessarily a standalone application, its data is stored in /`data/data
    directory` as if it were. The user dictionary is populated any time the user types
    a word that isn't recognized and chooses to save the word to avoid it being flagged
    by autocorrect. Interestingly, our test device contained dozens of words that
    we never typed or saved on the device. This data appears to sync with a user's
    Google account and persists across multiple devices. Words synced from the account
    were added in alphabetical order at the top of the database, while words added
    manually afterwards were populated in the order they were added at the bottom.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户词典**是调查员的一个难以置信的数据来源。虽然它不一定是一个独立的应用程序，但它的数据存储在`/data/data`目录中，就好像它是一个独立的应用程序一样。用户词典在用户输入一个未被识别的单词并选择保存该单词以避免被自动更正时被填充。有趣的是，我们的测试设备上包含了许多我们从未在设备上输入或保存过的单词。这些数据似乎与用户的Google账户同步，并在多个设备上持久存在。从账户同步的单词按字母顺序添加到数据库顶部，而之后手动添加的单词则按添加顺序填充到底部。'
- en: 'Package name: `com.android.providers.userdictionary`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 包名：`com.android.providers.userdictionary`
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：Android 5.0.1的默认版本（在应用程序中未列出）
- en: 'Files of interest:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/databases/user_dict.db`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/user_dict.db`'
- en: 'The table in the user dictionary is described as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 用户词典中的表描述如下：
- en: '| Table | Description |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `words` | The `word` column contains the word that was added to the dictionary.
    The `frequency` column should likely be ignored; it displayed the same value (250)
    regardless of the number of times we used the word. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `words` | `word`列包含了添加到词典中的单词。`frequency`列可能应该被忽略；无论我们使用该单词的次数如何，它都显示相同的值（250）。|'
- en: 'Here are sample entries from a user dictionary:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户词典的示例条目：
- en: '![User dictionary analysis](img/image00393.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![用户词典分析](img/image00393.jpeg)'
- en: Gmail analysis
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gmail分析
- en: Gmail is an e-mail service provided by Google. A Gmail account is often asked
    for, though is not required, when the device is being set up for the first time.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail是谷歌提供的电子邮件服务。在首次设置设备时，通常会要求使用Gmail帐户，但并非必需。
- en: 'Package name: `com.google.android.gm`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.google.android.gm`
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：默认版本与Android 5.0.1（未在应用程序中列出）
- en: 'Files of interest:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache`'
- en: '`/databases/`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`mailstore.<username>@gmail.com.db`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mailstore.<username>@gmail.com.db`'
- en: '`databases/suggestions.db`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`databases/suggestions.db`'
- en: '`/shared_prefs/`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/`'
- en: '`MailAppProvider.xml`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MailAppProvider.xml`'
- en: '`Gmail.xml`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gmail.xml`'
- en: '`UnifiedEmail.xml`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnifiedEmail.xml`'
- en: The `/cache` directory within the application folder contains recent files that
    were attached to e-mails, both sent and received. These attachments are saved
    here even if they are not explicitly downloaded by the user.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 应用文件夹中的`/cache`目录包含最近附加到电子邮件中的文件，包括已发送和已接收的文件。即使用户没有明确下载这些附件，它们也会保存在这里。
- en: 'The `mailstore.<username>@gmail.com.db` file contains a variety of useful information.
    Interesting tables within the database include the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`mailstore.<username>@gmail.com.db`文件包含各种有用的信息。数据库中的有趣表包括以下内容：'
- en: '| Table | Description |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `attachments` | This contains information about attachments, including their
    size and file path on the device (the `/cache` directory mentioned earlier). Each
    row also contains a `messages_conversation` value. This value can be compared
    with the `conversations` table to correlate an attachment with the e-mail it was
    included within. The `filename` column identifies the path on the device where
    the file is located. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `附件` | 这包含有关附件的信息，包括它们在设备上的大小和文件路径（前面提到的`/cache`目录）。每行还包含一个`messages_conversation`值。这个值可以与`conversations`表进行比较，以将附件与其所包含的电子邮件相关联。`filename`列标识了文件在设备上的路径。|'
- en: '| `conversations` | In older versions, entire e-mail conversations could be
    recovered. In the current version, Google no longer stores the entire conversation
    on the device, possibly assuming that the user will have a data connection to
    download the full conversation. Instead, only the subject line and a "snippet"
    can be recovered. The snippet is roughly the amount of text that would appear
    in the notification bar or inbox screen of the app. The `fromCompact` column identifies
    the sender and any other recipients. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `对话` | 在旧版本中，可以恢复整个电子邮件对话。在当前版本中，Google不再在设备上存储整个对话，可能是因为假定用户将有数据连接来下载完整的对话。相反，只能恢复主题行和“片段”。片段大致是在应用程序的通知栏或收件箱屏幕上显示的文本量。`fromCompact`列标识了发件人和其他收件人。|'
- en: The `suggestions.db` database contains terms that were searched within the application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`suggestions.db`数据库包含在应用程序中搜索的术语。'
- en: The XML files within the `shared_prefs` directory can confirm the account(s)
    that were used with the application. `Gmail.xml` contained another account that
    was linked with our test account, but never used with the application. `UnifiedEmail.xml`
    contained a partial list of senders who e-mailed the account, but with no discernible
    rationale. Many senders were on the list, but far from all, and they appeared
    in no particular order. `Gmail.xml` also contained the last time that the application
    was synced in the Linux epoch format.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared_prefs`目录中的XML文件可以确认与应用程序一起使用的帐户。`Gmail.xml`包含了另一个与我们的测试帐户关联但从未与应用程序一起使用的帐户。`UnifiedEmail.xml`包含了给该帐户发送电子邮件的发件人的部分列表，但没有明显的原因。列表中有许多发件人，但远非全部，并且它们没有按特定顺序出现。`Gmail.xml`还包含了应用程序上次同步的时间，以Linux纪元格式表示。'
- en: Google Chrome analysis
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Chrome分析
- en: Google Chrome is a web browser and is the default browser on Nexus and many
    other devices. Chrome data on the device is somewhat unique, in that, it contains
    data not just from the device, but from all devices on which the user has logged
    in to Chrome. This means that it is entirely possible (even very likely) that
    data from the user browsing on their desktop computer will be found in the databases
    on their phone. However, this also leads to huge amounts of data for an examiner
    to sort through, but that's a good problem to have.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Google Chrome是一款网络浏览器，也是Nexus和许多其他设备上的默认浏览器。设备上的Chrome数据有些独特，因为它不仅包含来自设备的数据，还包含用户在所有登录到Chrome的设备上的数据。这意味着用户在桌面电脑上浏览的数据很可能会在他们手机的数据库中找到。然而，这也导致了大量的数据需要鉴定人员整理，但这是一个好问题。
- en: 'Package name: `com.android.chrome`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.android.chrome`
- en: 'Version: 40.0.2214.89'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：40.0.2214.89
- en: 'Files of interest:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/app_chrome/Default/`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app_chrome/Default/`'
- en: '`Sync Data/SyncData.sqlite3`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sync Data/SyncData.sqlite3`'
- en: '`Bookmarks`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`书签`'
- en: '`Cookies`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cookies`'
- en: '`Google Profile Picture.png`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Google Profile Picture.png`'
- en: '`History`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`历史`'
- en: '`Login Data`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`登录数据`'
- en: '`Preferences`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`偏好设置`'
- en: '`Top Sites`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`热门网站`'
- en: '`Web Data`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Web数据`'
- en: '`/app_ChromeDocumentActivity/`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app_ChromeDocumentActivity/`'
- en: All of the files listed earlier in the `/app_chrome/Default` folder, except
    for the one `.png` file, Bookmarks, and Preferences, are SQLite databases despite
    the lack of a file extension.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`/app_chrome/Default`文件夹中列出的所有文件，除了一个`.png`文件、书签和偏好设置之外，都是SQLite数据库，尽管没有文件扩展名。'
- en: The `SyncData.sqlite3` database is interesting because it appears to contain
    a list of data that has been synced from the user's account on the device back
    to Google's servers. Our database, with a very active Chrome account, contained
    over 2700 entries and included browsing history, autofill form information, passwords,
    and bookmarks. As an example, we were able to find a term one of the authors had
    searched for from 2012, seen in the following screenshot. This is interesting
    because the user purchased this phone in 2014, but previous data is still synced
    to the device.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`SyncData.sqlite3`数据库很有趣，因为它似乎包含了从用户设备同步到谷歌服务器的数据列表。我们的数据库中，一个活跃的Chrome账户包含了超过2700条条目，包括浏览历史、自动填充表单信息、密码和书签。举例来说，我们能够找到其中一位作者从2012年搜索过的一个词，如下截图所示。这很有趣，因为用户是在2014年购买了这部手机，但之前的数据仍然同步到了设备上。'
- en: '![Google Chrome analysis](img/image00394.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Google Chrome分析](img/image00394.jpeg)'
- en: '| Table | Description |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `metas` | There are many columns in the database that contain timestamps,
    and in our database, they all appear to be within seconds of each other for each
    entry. It is unclear which time corresponds to the exact time an entry was added,
    but all of the times roughly correspond with the time of the activity in the user''s
    account. The columns with timestamps are `mtime`, `server_mtime`, `ctime`, `server_ctime`,
    `base_version`, and `server_version`.The `non_unique_name` and `server_non_unique_name`
    columns show the content that was synced. For example, one of our entries shows:`autofill_entry`
    &#124; `LNAME` &#124; `Tindall`Other entries in these columns include URLs visited,
    passwords, and even devices that the account has used. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `metas` | 数据库中有许多列包含时间戳，在我们的数据库中，它们似乎都是每个条目的时间相差不到一秒。目前还不清楚哪个时间对应于条目被添加的确切时间，但所有时间大致对应于用户账户中的活动时间。具有时间戳的列包括`mtime`、`server_mtime`、`ctime`、`server_ctime`、`base_version`和`server_version`。`non_unique_name`和`server_non_unique_name`列显示了被同步的内容。例如，我们的一个条目显示：`autofill_entry`
    &#124; `LNAME` &#124; `Tindall`这些列中的其他条目包括访问过的URL、密码，甚至是账户使用过的设备。'
- en: 'The `Bookmarks` file is a plain-text file that contains information about the
    bookmarks synced with the account. It includes the name of each site that is bookmarked,
    the URL, and the date/time it was bookmarked, stored in a format we have not come
    across yet: the WebKit format. To decode the values, see the Decoding the WebKit
    time format section.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bookmarks`文件是一个纯文本文件，包含了与账户同步的书签信息。它包括了每个被书签的网站名称、URL以及被书签的日期/时间，以我们尚未遇到的格式存储：WebKit格式。要解码这些值，请参阅解码WebKit时间格式部分。'
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is the third method of data storage: the WebKit time format.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第三种数据存储方法：WebKit时间格式。
- en: The `Cookies` database stores cookie information for sites visited (depending
    on the site and Chrome settings), including the name of the site, date the cookie
    was saved, and the last time the cookie was accessed, in the WebKit time format.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cookies`数据库存储了访问过的网站的cookie信息（取决于网站和Chrome设置），包括网站名称、cookie保存日期以及上次访问cookie的时间，以WebKit时间格式显示。'
- en: The `Google Profile Picture.PNG` file is the user's profile picture.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Google Profile Picture.PNG`文件是用户的个人资料图片。'
- en: 'The `History` database contains the user''s web history stored in the following
    tables:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`History`数据库包含了用户的网络历史，存储在以下表中：'
- en: '| Table | Description |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `keyword_search_terms` | This contains a list of terms that were searched
    to use Google within Chrome. The `term` column shows what was searched, while
    `url_id` can be correlated with the URLs table to see the time of the search.
    |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `keyword_search_terms` | 这包含了在Chrome中使用Google搜索的搜索词列表。`term`列显示了搜索的内容，而`url_id`可以与URL表相关联，以查看搜索的时间。
    |'
- en: '| `segments` | This table contains some URLs that were visited, but not all.
    It is not clear what causes data to be entered into this table. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `segments` | 这个表包含了一些被访问过的URL，但并非全部。目前还不清楚是什么导致数据被输入到这个表中。 |'
- en: '| `urls` | This contains the browsing history for the Google account across
    all devices, not just the device the database was pulled from. Our history went
    back approximately 3 months and contained 494 entries, although the Google account
    is much older than that, and we have certainly visited more than 494 pages in
    that time. It is unclear exactly what causes this discrepancy or determines the
    cut-off date for the history.The `id` column is a unique value for each row in
    the table. The `url` and `title` columns contain the URL visited and the name
    of the page. The `visit_count` column appears to be an accurate count of how many
    times the URL was visited. The value in `typed_count` column is always equal to
    or lesser than the value in the `visit_count` column, but we do not know exactly
    what it indicates. For some sites, the discrepancy can be accounted for by factoring
    in the number of times the site was visited through a bookmark rather than typing
    the URL, but this does not hold true for all cases. The `last_visit_time` column
    is the last time the URL was visited, in the WebKit time format. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `urls` | 这包含了Google账户在所有设备上的浏览历史，而不仅仅是从数据库中提取的设备。我们的历史记录大约可以追溯到3个月前，包含了494条记录，尽管Google账户的历史要比这更久，我们在那段时间内肯定访问了超过494个页面。目前还不清楚是什么导致了这种差异，或者决定了历史记录的截止日期。`id`列是表中每行的唯一值。`url`和`title`列包含了访问的URL和页面名称。`visit_count`列似乎是URL被访问的准确次数。`typed_count`列的值始终等于或小于`visit_count`列的值，但我们不确定它具体表示什么。对于一些网站，这种差异可以通过考虑通过书签访问网站的次数来解释，而不是直接输入URL，但并非所有情况都适用。`last_visit_time`列是URL最后被访问的时间，以WebKit时间格式显示。
    |'
- en: '| `visits` | This contains a row for each visit to the URLs in the urls table;
    the number of entries in this table for a URL corresponds to the value in the
    `visit_count` column of the `url` table. The `url` column value correlates to
    the value in the `id` column of the `url` table. The time of each visit can be
    found in the `visit_time` column, again in the WebKit time format. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `访问` | 这包含了urls表中每次访问的行；此表中对于一个URL的条目数量对应于`url`表中的`visit_count`列的值。`url`列的值与`url`表中的`id`列的值相关联。每次访问的时间可以在`visit_time`列中找到，同样以WebKit时间格式。
    |'
- en: The `Login Data` database contains login information saved in Chrome and is
    synced across all devices that use the Google account.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`登录数据`数据库包含在Chrome中保存的登录信息，并在使用Google账户的所有设备上同步。'
- en: '| Table | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `logins` | The `origin_url` is the site the user visited initially, and `action_url`
    is the URL of the login page if the user is redirected to one. If the first page
    visited is the login page, then both URLs are the same. The `username_value` and
    `password_value` columns show the username and password stored for that URL in
    plain text; and no, we''re not going to include a screenshot of our database!
    The `date_created` is the date/time that the login information was first saved,
    in the WebKit time format. The `date_synced` column is the date/time on which
    the login data was synced locally to the device, again in the WebKit time format.
    The `times_used` column shows the number of times that login information was autofilled
    by Chrome after it was saved (excluding the first login, so some values may be
    0). |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `logins` | `origin_url`是用户最初访问的网站，`action_url`是如果用户被重定向到登录页面，则是登录页面的URL。如果访问的第一个页面是登录页面，则两个URL相同。`username_value`和`password_value`列显示了以明文存储的该URL的用户名和密码；不，我们不会包含我们数据库的截图！`创建日期`是登录信息首次保存的日期/时间，以WebKit时间格式存储。`同步日期`列是登录数据在本地设备上同步的日期/时间，同样以WebKit时间格式。`使用次数`列显示了Chrome保存后自动填充登录信息的次数（不包括第一次登录，因此有些值可能为0）。
    |'
- en: '`Preferences file` is a text file and contains the Google account(s) the user
    has signed into Chrome with.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`首选项文件`是一个文本文件，包含用户使用Chrome登录的Google账户。'
- en: The `Top Sites` database contains the sites that are most frequently visited,
    as these are shown by default when Chrome opens.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`热门网站`数据库包含最常访问的网站，因为这些网站在Chrome打开时默认显示。'
- en: The `Web Data` database contains information the user has saved in order to
    automatically fill in forms on websites.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`Web Data`数据库包含用户保存的信息，以便在网站上自动填写表单。'
- en: '| Table | Description |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `autofill` | This contains a list of fields on web-based forms and the value
    the user typed. The `name` column shows the name of the field that was typed in,
    while the `value` column shows what the user typed. The `date_created` and `date_last_used`
    columns are self-explanatory and are stored in the Linux epoch format.Note that
    while this is potentially very valuable information (for example, our database
    contained a few usernames not stored elsewhere), there is also very little context
    available. The URL where the information is not stored may not be determinable.
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `autofill` | 这包含基于网页的表单上的字段列表和用户输入的值。`名称`列显示了用户输入的字段名称，而`值`列显示了用户输入的内容。`创建日期`和`最后使用日期`列是不言自明的，并以Linux纪元格式存储。请注意，虽然这可能是非常有价值的信息（例如，我们的数据库中包含了一些其他地方没有存储的用户名），但可用的上下文信息非常少。信息未存储的URL可能无法确定。
    |'
- en: '| `autofill_profile_emails` | This contains all values the user has saved to
    autofill the `e-mail` field on a web form. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `autofill_profile_emails` | 这包含用户保存的所有值，用于自动填充网页表单上的`电子邮件`字段。 |'
- en: '| `autofill_profile_names` | This contains all values the user has saved to
    autofill the `First`, `Middle`, `Last`, and `Full Name` fields on a web form.
    |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `autofill_profile_names` | 这包含用户保存的所有值，用于自动填充网页表单上的`名`、`中间名`、`姓`和`全名`字段。
    |'
- en: '| `autofill_profile_phonwa` | This contains all values the user has saved to
    autofill the `Phone Number` field on a web form. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `autofill_profile_phonwa` | 这包含用户保存的所有值，用于自动填充网页表单上的`电话号码`字段。 |'
- en: '| `autofill_profiles` | This contains all values the user has saved to autofill
    address information fields on a web form. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `autofill_profiles` | 这包含用户保存的所有值，用于自动填充网页表单上的地址信息字段。 |'
- en: The `/app_ChromeDocumentActivity`/ directory contains files with history for
    recent tabs that were open on the device. URLs can be recovered from these files
    for sites that were visited.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`/app_ChromeDocumentActivity`/目录包含了在设备上最近打开的标签的历史记录文件。可以从这些文件中恢复被访问的网站的URL。'
- en: Decoding the WebKit time format
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码WebKit时间格式
- en: 'Here is a sample WebKit time value: `13066077007826684`.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个样本WebKit时间值：`13066077007826684`。
- en: At first glance, it appears to be very similar to the Linux epoch time, just
    slightly longer (perhaps it is storing nanoseconds?). An examiner who attempts
    to decode this as epoch time will get a date in May 2011, which may seem accurate,
    but is, in fact, several years off from the correct date!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，它似乎与Linux纪元时间非常相似，只是稍微长一些（也许它存储的是纳秒？）。试图将其解码为纪元时间的审查员将得到2011年5月的日期，这可能看起来准确，但实际上比正确日期晚了几年！
- en: The WebKit time is an epoch time. It is just based on a different starting point
    than the Linux epoch time. The WebKit epoch time is the number of microseconds
    since midnight on January 1, 1601\. Yes, we said the year 1601\. Once we know
    where the epoch begins, converting to a recognizable format simply becomes a math
    problem. However, once again, we'd rather use DCode.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: WebKit时间是一个纪元时间。它只是以不同的起始点为基础，而不是Linux纪元时间。WebKit纪元时间是自1601年1月1日午夜以来的微秒数。是的，我们说的是1601年。一旦我们知道纪元开始的地方，转换为可识别的格式就变成了一个数学问题。然而，再一次，我们宁愿使用DCode。
- en: 'This time, in DCode, choose Google Chrome Value in the **Decode Format** drop-down
    selection and click on **Decode**:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，在DCode中，选择**解码格式**下拉选择中的Google Chrome值，然后单击**解码**：
- en: '![Decoding the WebKit time format](img/image00395.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![解码WebKit时间格式](img/image00395.jpeg)'
- en: The actual value of our example is November 2, 2014 at 18:04:33 UTC. This is
    significantly different from the value we would have come up with if we thought
    it was a Linux epoch time!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例的实际值是2014年11月2日UTC时间18:04:33。这与我们认为的Linux纪元时间值有很大不同！
- en: Google Maps analysis
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Maps分析
- en: Maps is a map/navigation application provided by Google.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Maps是由Google提供的地图/导航应用程序。
- en: 'Package name: `com.google.android.apps.maps`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.google.android.apps.maps`
- en: 'Version: 9.2.0 (#902013124)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：9.2.0（#902013124）
- en: 'Files of interest:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/http/`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/http/`'
- en: '`/databases/`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`gmm_myplaces.db`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gmm_myplaces.db`'
- en: '`gmm_storage.db`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gmm_storage.db`'
- en: The `/cache/http` folder contains many files, with `.0` and `.1` file extensions.
    The `.0` files are web requests for the corresponding `.1` file. The `.1` files
    are predominantly images and can be viewed by changing their extension appropriately.
    On our test device, they were either `.jpg` or `.png` files. These files were
    predominantly locations near the user, not necessarily locations the user specifically
    searched for.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: “/cache/http”文件夹中包含许多文件，具有“.0”和“.1”文件扩展名。“.0”文件是对应“.1”文件的网络请求。“.1”文件主要是图像，可以通过适当更改其扩展名来查看。在我们的测试设备上，它们要么是“.jpg”文件，要么是“.png”文件。这些文件主要是用户附近的位置，不一定是用户专门搜索的位置。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is the fourth data storage method: misnamed file extensions.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第四种数据存储方法：错误命名的文件扩展名。
- en: Always verify the header of a file that can't be opened, or use automated tools,
    such as EnCase, to detect the mismatched header/file extension. A good resource
    to verify a file's signature is [http://www.garykessler.net/library/file_sigs.html](http://www.garykessler.net/library/file_sigs.html).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 始终验证无法打开的文件的标头，或使用EnCase等自动工具检测不匹配的标头/文件扩展名。验证文件签名的一个很好的资源是[http://www.garykessler.net/library/file_sigs.html](http://www.garykessler.net/library/file_sigs.html)。
- en: The `gmm_myplaces.db` database contains locations saved by the user. This file
    syncs with the user's Google account, so these locations were not necessarily
    saved using the application.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: “gmm_myplaces.db”数据库包含了用户保存的位置。这个文件与用户的Google帐户同步，因此这些位置不一定是使用应用程序保存的。
- en: 'The `gmm_storage.db` database contains search hits and locations that were
    navigated to the following table:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: “gmm_storage.db”数据库包含了以下表中的搜索结果和导航到的位置：
- en: '| Table | Description |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `gmm_storage_table` | The `_key_pri` column appears to identify the type
    of the location. bundled appears to be a hit that came up on a search, while `ArrivedAtPlacemark`
    identifies locations that were actually navigated to. The `_data` column contains
    the address for the location. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `gmm_storage_table` | “_key_pri”列似乎标识了位置的类型。bundled似乎是搜索结果，而“ArrivedAtPlacemark”标识了实际导航到的位置。“_data”列包含位置的地址。
    |'
- en: Google Hangouts analysis
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Hangouts分析
- en: '**Hangouts** is a chat/SMS application provided by Google. Hangouts is the
    default SMS client on Android devices.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hangouts**是由Google提供的聊天/SMS应用程序。 Hangouts是Android设备上的默认短信客户端。'
- en: 'Package name: `com.google.android.gm`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.google.android.gm`
- en: 'Version: Default version with Android 5.0.1 (not listed within the app)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：Android 5.0.1的默认版本（不在应用程序中列出）
- en: 'Files of interest:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/volleyCache/`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/volleyCache/`'
- en: '`/databases/babel#.db` (our device had babel0.db and babel1.db)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/babel#.db`（我们的设备上有babel0.db和babel1.db）'
- en: '`/shared_prefs/accounts.xml`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/accounts.xml`'
- en: The `cache` directory contains `.0` files, as discussed in the Google Maps example
    earlier. The files contain a URL to fetch the profile pictures of contacts, as
    well as a `.jpg` embedded within the file. Visiting the URL or carving the `.jpg`
    from the file will recover the contact's picture.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: “cache”目录包含了之前在Google Maps示例中讨论的“.0”文件。这些文件包含了获取联系人的个人资料图片的URL，以及文件中嵌入的“.jpg”。访问URL或从文件中提取“.jpg”将恢复联系人的图片。
- en: 'The `babel#.db` file contains all messaging data. On our test device, `babel0.db`
    was blank, and `babel1.db` had all of the data for the active account. There are
    many tables within this database worth looking at:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: “babel#.db”文件包含了所有的消息数据。在我们的测试设备上，“babel0.db”是空白的，“babel1.db”包含了活动帐户的所有数据。这个数据库中有许多值得关注的表：
- en: '| Table | Description |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conversations` | This contains conversation data. There is a unique `conversation_id`
    value for each chat. The `latest_message_timestamp` column is the time of the
    most recent chat, in the Linux epoch format. The `generated_name` column has a
    list of all participants in the chat, minus the account on the device. The `snippet_text`
    column is the content of the most recent message; like Gmail, the entire chat
    is not stored on the device. The `latest_message_author_full_name` and `latest_message_author_first_name`
    columns identify the author of the `snippet_text` column. The `inviter_full_name`
    and `inviter_first_name` columns identify which person initiated the conversation.
    |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `conversations` | 这包含对话数据。每次聊天都有一个唯一的“conversation_id”值。“latest_message_timestamp”列是最近聊天的时间，以Linux纪元格式表示。“generated_name”列列出了聊天中所有参与者的列表，减去设备上的帐户。“snippet_text”列是最近消息的内容；与Gmail一样，整个聊天并未存储在设备上。“latest_message_author_full_name”和“latest_message_author_first_name”列标识了“snippet_text”列的作者。“inviter_full_name”和“inviter_first_name”列标识了谁发起了对话。|'
- en: '| `dismissed_contacts` | This has a list of names of former contacts that had
    been messaged. These are labeled as "Hidden Contacts" within the app. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `dismissed_contacts` | 这里列出了曾经发送消息的前联系人的名称。这些在应用程序中标记为“隐藏联系人”。|'
- en: '| `messages` | As expected, this contains a detailed message history for each
    conversation. The `text` column contains the content of the message, and the `timestamp`
    column is the date/time in the Linux epoch format. The `remote_url` column is,
    once again, a URL to retrieve images shared in the message. Again, it can be accessed
    publically. The `author_chat_id` is a value that can be correlated with the participants
    table to identify the author of each message. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | 如预期的那样，这包含了每次对话的详细消息历史。`text`列包含消息的内容，`timestamp`列是Linux纪元格式的日期/时间。`remote_url`列再次是一个URL，用于检索消息中共享的图像。同样，它可以公开访问。`author_chat_id`是一个值，可以与参与者表相关联，以识别每条消息的作者。
    |'
- en: '| `participants` | This contains a list of people chatted with. It includes
    full names, profile picture URLs, and a `chat_id` value to identify the person
    in the messages table. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `participants` | 这包含了与之聊天的人的列表。它包括全名、个人资料图片URL和`chat_id`值，用于在消息表中识别该人。 |'
- en: The `accounts.xml` file has a `phone_verification` field that contains the phone
    number associated with the Google account when Hangouts is configured to send
    SMS. This could be highly useful, because it is frequently difficult to obtain
    the device's phone number as it is often not stored on the device.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts.xml`文件有一个`phone_verification`字段，其中包含与Google帐户关联的电话号码，当Hangouts配置为发送短信时。这可能非常有用，因为通常很难获得设备的电话号码，因为它通常不存储在设备上。'
- en: Google Keep analysis
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌Keep分析
- en: Keep is a note-taking application provided by Google. It can also be used to
    set reminders, either at a certain date/time or when the user is at a specified
    location.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Keep是谷歌提供的一款笔记应用。它也可以用来设置提醒，无论是在特定的日期/时间还是当用户在指定的位置。
- en: 'Package name: `com.google.android.keep`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.google.android.keep`
- en: 'Version: Default version with Android 5.0.1 (not listed within app)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：默认版本为Android 5.0.1（未在应用程序中列出）
- en: 'Files of interest:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/databases/keep.db`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/keep.db`'
- en: '`/files/1/image/original`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/1/image/original`'
- en: The `files/1/image/original` directory contains photos taken using the app.
    Notes and reminders can both be associated with an image.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`files/1/image/original`目录包含使用该应用程序拍摄的照片。笔记和提醒都可以与图像关联。'
- en: 'The `keep.db` contains all of the information about notes and reminders. There
    are, once again, several tables of interest:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`keep.db`包含有关笔记和提醒的所有信息。再次，有几个感兴趣的表：'
- en: '| Table | Description |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `alert` | This contains information about location-based reminders. The `reminder_id`
    column can be correlated with entries in the reminder table. The `reminder_detail`
    table contains the latitude and longitude set for the reminder. The `scheduled_time`
    column is the date/time the reminder was set, in the Linux epoch time. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `alert` | 这包含了基于位置的提醒的信息。`reminder_id`列可以与提醒表中的条目相关联。`reminder_detail`表包含为提醒设置的纬度和经度。`scheduled_time`列是提醒设置的日期/时间，以Linux纪元时间表示。
    |'
- en: '| `blob` | This contains metadata about images in the `/files` directory mentioned
    earlier, including the filename and size. The `blob_id` column can be correlated
    with the `_id` column in the `blob_node` table. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `blob` | 这包含了关于`/files`目录中图像的元数据，包括文件名和大小。`blob_id`列可以与`blob_node`表中的`_id`列相关联。
    |'
- en: '| `blob_node` | This contains the time-created value for the images in the
    `/files` directory, in the Linux epoch time. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `blob_node` | 这包含了`/files`目录中图像的创建时间值，以Linux纪元时间表示。 |'
- en: '| `list_item` | This stores data for each note on the device. The `text` column
    contains the full text of each note. The `list_parent_id` column is a unique value
    for each note. If multiple rows have the same value, it means they were created
    as a list within the same note. The `time_created` and `time_last_updated` columns
    are the time the note was created and the time it was last synced with the Google
    servers, in the Linux epoch time. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `list_item` | 这个表存储设备上每个笔记的数据。`text`列包含每个笔记的完整文本。`list_parent_id`列是每个笔记的唯一值。如果多行具有相同的值，这意味着它们是在同一个笔记中创建的列表。`time_created`和`time_last_updated`列是笔记创建的时间和最后与Google服务器同步的时间，以Linux纪元时间表示。
    |'
- en: '| `reminder` | This contains data about each reminder set within the app. If
    the reminder is time based, the `julian_date` and `time_of_day` columns will be
    populated. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `reminder` | 这包含了应用程序中设置的每个提醒的数据。如果提醒是基于时间的，`julian_date`和`time_of_day`列将被填充。
    |'
- en: Converting a Julian date
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换儒略日期
- en: '**Julian dates** are similar to the Linux epoch format, simply starting with
    a different date. The Julian date system counts the number of days since noon
    on January 1, 4713 BC. The United States Naval Observatory has an excellent Julian
    date calculator. To obtain the Julian date from the database, simply combine the
    two columns with a decimal in between. Here is an example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**儒略日期**类似于Linux纪元格式，只是从不同的日期开始。儒略日期系统计算自公元前4713年1月1日中午以来的天数。美国海军天文台有一个出色的儒略日期计算器。要从数据库中获取儒略日期，只需将两列组合在一起，中间加上一个小数点。这是一个例子：'
- en: '![Converting a Julian date](img/image00396.jpeg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![转换儒略日期](img/image00396.jpeg)'
- en: The preceding date would correspond to the Julian date 2457042.46800000\. When
    this value is input to the website, we can find out that the date the reminder
    is set for is January 19, 2015 at 23:13:55:2 UTC. The `location_name`, `latitude`,
    `longitude`, and `location_address` columns would be populated if a reminder is
    set as location based. Finally, the `time_created` and `time_last_updated` columns
    are the time the note was created and the time it was last synced with the Google
    servers, in the Linux epoch time.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的日期将对应于儒略日期2457042.46800000。当这个值输入到网站时，我们可以发现提醒设置的日期是2015年1月19日23:13:55:2
    UTC。如果提醒是基于位置设置的，`location_name`、`latitude`、`longitude`和`location_address`列将被填充。最后，`time_created`和`time_last_updated`列是笔记创建的时间和最后与Google服务器同步的时间，以Linux纪元时间表示。
- en: Note
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The fifth data-storage method is Julian date.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 第五种数据存储方法是儒略日期。
- en: Google Plus analysis
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌加分析
- en: Google Plus is the Google-based social network. It allows us to share text/videos/images,
    add friends, follow people, and message. Google Plus may also, depending on the
    user's settings, automatically upload all pictures taken on the user's device.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Google Plus是基于Google的社交网络。它允许我们分享文本/视频/图片，添加朋友，关注人，并发送消息。根据用户的设置，Google Plus也可能自动上传用户设备上拍摄的所有照片。
- en: 'Package name: `com.google.android.apps.plus`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.google.android.apps.plus`
- en: 'Version: 4.8.0.81189390'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：4.8.0.81189390
- en: 'Files of interest:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/databases/es0.db`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/es0.db`'
- en: 'The `Es0.db` database contains all the information an examiner would expect
    to find from a social-media account:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`Es0.db`数据库包含了审查员期望从社交媒体账户中找到的所有信息：'
- en: '| Table | Description |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `all_photos` | This contains a URL to download images shared by and with
    the user as well as the creation date/time in the Linux epoch format. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `all_photos` | 这包含了用户分享和与用户分享的图片的下载URL，以及以Linux纪元格式表示的创建日期/时间。 |'
- en: '| `activites` | This contains data displayed in the user''s stream (that is,
    their news feed). The created and modified time for each post is, once again,
    stored in the Linux epoch time. The title and comment columns will contain the
    post title and at least some of the comments from it. The `permalink` column contains
    a URL that can be followed to view the post, if it was shared publically. If the
    post is shared privately, the content can still be recovered from the embed table.
    The `relateds` column contains the hashtags automatically generated for the post
    by Google; this would also populate even if the post is private. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `activites` | 这包含在用户的流中显示的数据（即他们的新闻动态）。每篇帖子的创建和修改时间再次存储在Linux纪元时间中。标题和评论栏将包含帖子标题以及至少一些评论。`permalink`栏包含一个URL，可以通过它来查看帖子，如果它是公开分享的。如果帖子是私下分享的，内容仍然可以从嵌入表中恢复。`relateds`栏包含Google自动生成的帖子标签；即使帖子是私密的，这也会被填充。
    |'
- en: '| `activity_contacts` | This contains a list of names for people whose posts
    are in the activities table. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `activity_contacts` | 这包含了在活动表中发布帖子的人的姓名列表。 |'
- en: '| `all_photos` | This contains a list of *all* photos the user has backed up
    to Google Plus, whether they were shared or not. The values in the `image_url`
    column can be used to download any of the user''s photos and is publically available.
    Removing `-d` at the end of the URL will view the image without downloading it.
    The `timestamp` column is the date/time the image was taken, based on the image
    metadata. It does not indicate when the image was uploaded. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `all_photos` | 这包含了用户备份到Google Plus的*所有*照片列表，无论它们是否被分享。`image_url`栏中的值可以用于下载用户的任何照片，并且是公开可用的。删除URL末尾的“-d”将查看图片而不是下载。`timestamp`栏是根据图像元数据拍摄的日期/时间。它不表示图像上传的时间。
    |'
- en: '| `all_tiles` | This contains an unknown subset of `all_photos`, but also includes
    images shared with the user. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `all_tiles` | 这包含了`all_photos`的一个未知子集，但也包括了与用户分享的图片。 |'
- en: '| `circle_contact` | This contains a list of people the user has added to their
    circles. It does not include names, but some of the `link_person_id` values include
    e-mail addresses. The `link_circle_id` value can be correlated with the circles
    table to identify the name of each circle. The `link_person_id` value can then
    be correlated with the `contacts` table to identify which user is in which circle.
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `circle_contact` | 这包含了用户添加到他们圈子中的人的列表。它不包括姓名，但一些`link_person_id`值包括电子邮件地址。`link_circle_id`值可以与圈子表相关联，以识别每个圈子的名称。然后`link_person_id`值可以与联系人表相关联，以确定哪个用户在哪个圈子中。
    |'
- en: '| `circles` | This has all the circles the user has created, as well as a count
    of the number of users in each one. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `circles` | 这包含了用户创建的所有圈子，以及每个圈子中用户数量的计数。 |'
- en: '| `contacts` | This contains a list of all contacts in the user''s circles.
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `contacts` | 这包含了用户圈子中的所有联系人列表。 |'
- en: '| `events` | This lists all events the user has been invited to, whether they
    attended or not. The `name` column is the title of the event. The `creator_gaia_id`
    column can be correlated with the `gaia_id` column in the contacts table to identify
    the event creator. The `start_time` and `end_time` columns are the time of the
    event, in the Linux epoch format. The `event_data` column has the description
    of the event entered by the creator, as well as information about the location
    if added. It also lists all the other users who were invited to the event. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `events` | 这列出了用户被邀请参加的所有活动，无论他们是否参加。`name`栏是活动的标题。`creator_gaia_id`栏可以与联系人表中的`gaia_id`栏相关联，以识别活动的创建者。`start_time`和`end_time`栏是活动的时间，以Linux纪元格式表示。`event_data`栏包含活动创建者输入的活动描述，以及如果添加了位置信息。它还列出了所有其他被邀请参加活动的用户。
    |'
- en: '| `squares` | This contains a list of groups the user has joined. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `squares` | 这包含了用户加入的群组列表。 |'
- en: Facebook analysis
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook分析
- en: Facebook is a social-media application with more than 1 billion downloads from
    Google Play.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook是一个社交媒体应用程序，从Google Play已经下载了超过10亿次。
- en: 'Package name: `com.facebook.katana`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.facebook.katana`
- en: 'Version: 25.0.0.19.30'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：25.0.0.19.30
- en: 'Files of interest:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/files/video-cache/`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/video-cache/`'
- en: '`/cache/images/`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/images/`'
- en: '`/databases/`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`bookmarks_db2`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bookmarks_db2`'
- en: '`contacts_db2`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts_db2`'
- en: '`nearbytiles_db`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nearbytiles_db`'
- en: '`newsfeed_db`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newsfeed_db`'
- en: '`notifications_db`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notifications_db`'
- en: '`prefs_db`'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefs_db`'
- en: '`threads_db2`'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threads_db2`'
- en: The `/files/video-cache` directory contains videos from the user's newsfeed,
    though there does not appear to be a way to correlate them back to the user who
    posted them.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`/files/video-cache`目录包含了用户新闻动态中的视频，尽管似乎没有办法将它们与发布它们的用户相关联。'
- en: The `/cache/images` directory contains images from the user's newsfeed as well
    as the profile photos of contacts. This directory contains a multitude of other
    directories (65 on our test phone), and each directory can contain multiple `.cnt`
    files. The `.cnt` files are typically `.jpg` files or other image formats.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/images`目录包含用户新闻动态中的图片以及联系人的个人资料照片。该目录包含大量其他目录（我们测试手机上有65个），每个目录可以包含多个`.cnt`文件。`.cnt`文件通常是`.jpg`文件或其他图像格式。'
- en: The `bookmarks_db2` database is a list of items that appear on the side of the
    user's newsfeed, such as groups and applications. Many of these bookmarks are
    automatically generated by Facebook, but may also be created by the user.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`bookmarks_db2`数据库是用户新闻动态侧边栏上显示的项目列表，例如群组和应用程序。许多这些书签是Facebook自动生成的，但也可能是用户创建的。'
- en: '| Table | Description |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `bookmarks` | This contains all of the info within the database. The `bookmark_name`
    column is the name of the bookmark displayed to the user. The `bookmark_pic` column
    has a publically accessible URL to view the `bookmark` icon displayed to the user.
    The `bookmark_type` column identifies the type of the group. Our testing showed
    `profile`, `group`, `app`, `friend_list`, `page`, and `interest_list`. Finally,
    the `bookmark_unread_count` column shows how many messages in the group have not
    been read by the user. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `bookmarks` | 这包含了数据库中的所有信息。`bookmark_name`列是显示给用户的书签的名称。`bookmark_pic`列有一个公开可访问的URL，用于查看显示给用户的`bookmark`图标。`bookmark_type`列标识了群组的类型。我们的测试显示了`profile`、`group`、`app`、`friend_list`、`page`和`interest_list`。最后，`bookmark_unread_count`列显示了用户尚未阅读的群组中的消息数量。'
- en: 'The `contacts_db2` database predictably contains information about all of the
    user''s contacts stored in the following tables:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`contacts_db2`数据库可预见地包含有关用户所有联系人的信息，存储在以下表中：'
- en: '| Table | Description |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `contacts` | This contains all information about the user''s contacts. The
    `fbid` column is a unique ID that is used to identify the contact in other databases.
    The `first_name`, `last_name`, and `display_name` columns show the contact''s
    name. The `small_picture_url`, `big_picture_url`, and `huge_picture_url` columns
    contain public links to the contact''s profile picture. The `communication_rank`
    column appears to be a number identifying how often the contact communicates with
    the user (taking into account messages, comments, and possibly other factors);
    a higher number indicates more communication with that contact. The `added_time_ms`
    column shows the time (in the Linux epoch format) the contact was added as a friend.
    The `bday_day` and `bday_month` columns show the contact''s birth date, but not
    the year. The `data` column contains a duplicate of all the rest of the data in
    the database, but also contains the contact''s location, which is not found elsewhere
    in the database. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `contacts` | 这包含了有关用户联系人的所有信息。`fbid`列是用于在其他数据库中标识联系人的唯一ID。`first_name`、`last_name`和`display_name`列显示了联系人的姓名。`small_picture_url`、`big_picture_url`和`huge_picture_url`列包含了联系人个人资料图片的公开链接。`communication_rank`列似乎是一个数字，用于标识联系人与用户的交流频率（考虑到消息、评论和可能的其他因素）；数字越高表示与该联系人的交流越频繁。`added_time_ms`列显示了联系人被添加为好友的时间（以Linux纪元格式）。`bday_day`和`bday_month`列显示了联系人的生日日期，但不包括年份。`data`列包含了数据库中所有其他数据的副本，但也包含了联系人的位置，这在数据库的其他地方找不到。|'
- en: The `nearbytiles_db` database contains locations near the user that may interest
    them. This is apparently populated constantly, even if the user does not view
    the locations. It is interesting because, while it isn't a fine location (most
    of our tests showed locations within 6–10 miles of our location), it is a rough
    idea of places a user has been.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`nearbytiles_db`数据库包含用户附近可能感兴趣的位置。这显然是不断填充的，即使用户不查看这些位置。这很有趣，因为虽然它不是精确的位置（我们大部分的测试显示位置在我们位置的6-10英里内），但它是用户曾经去过的地方的一个大致概念。'
- en: '| Table | Description |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `nearby_tiles` | This contains the `latitude` and `longitude` values for
    locations near the user, as well as the time the location was retrieved from the
    Facebook servers in the Linux epoch format. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '`nearby_tiles` | 这包含了用户附近位置的`纬度`和`经度`值，以及从Facebook服务器检索到该位置的时间，格式为Linux纪元。'
- en: 'The `newsfeed_db` database contains data shown to the user in their newsfeed.
    Depending on the usage of the app, it can be a very large file containing the
    table:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`newsfeed_db`数据库包含显示给用户的新闻动态数据。根据应用程序的使用情况，它可能是一个非常大的文件，包含以下表：'
- en: '| Table | Description |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `home_stories` | The `fetched_at` column shows the time the story was pulled
    from the Facebook servers and likely corresponds closely with the time the user
    was using the application or saw the story. The `story_data` column contains the
    story stored as a blob of data. When viewed in a hex or text editor, the username
    of the person posting the story can be found. The content of the post can also
    be found in plain text and is often preceded by a tag that says `text`. An example
    of this is shown in the following screenshot. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `home_stories` | `fetched_at`列显示了从Facebook服务器获取故事的时间，很可能与用户使用应用程序的时间或看到故事的时间密切对应。`story_data`列包含以数据块形式存储的故事。在十六进制或文本编辑器中查看时，可以找到发布故事的人的用户名。帖子的内容也可以以纯文本形式找到，并且通常以标签`text`开头。以下截图显示了一个示例。'
- en: '![Facebook analysis](img/image00397.jpeg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![Facebook分析](img/image00397.jpeg)'
- en: Note
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the actual content of this one cell in the `story_data` column. It
    contained over 10,000 bytes of data, though the actual message is only around
    50 bytes.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`story_data`列中这个单元格的实际内容。它包含超过10,000字节的数据，尽管实际消息只有大约50字节。
- en: 'The `notifications_db` database contains notifications sent to the user stored
    in the following table:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`notifications_db`数据库包含发送给用户的通知，存储在以下表中：'
- en: '| Table | Description |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `gql_notifications` | The `seen_state` column shows whether or not the notification
    has been seen and read. The `updated` column contains the time the notification
    was updated (that is, sent if it is unread or the time it was read) in the Linux
    epoch format. The `gql_payload` column contains the content of the notification
    as well as the sender, similar to the `story_data` column in `newsfeed_db`. The
    message content again is frequently preceded by the flag `text`. A much smaller
    amount of data showing the text of the notification can be found in the `summary_graphql_text_with_entities`
    and `short_summary_graphql_text_with_entities` columns. The `profile_picture_uri`
    contains a public URL to view the sender''s profile picture, and the `icon_url`
    column has a link to view the icon associated with the notification. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `gql_notifications` | `seen_state`列显示通知是否已被查看和阅读。`updated`列包含通知更新的时间（即，如果未读则发送的时间，如果已读则阅读的时间），以Linux纪元格式表示。`gql_payload`列包含通知的内容以及发送者，类似于`newsfeed_db`中的`story_data`列。消息内容再次经常以标记`text`开头。`summary_graphql_text_with_entities`和`short_summary_graphql_text_with_entities`列中可以找到更少量的显示通知文本的数据。`profile_picture_uri`包含一个公共URL，可以查看发送者的个人资料图片，`icon_url`列有一个链接，可以查看与通知相关的图标。'
- en: 'The `prefs_db` database contains application preferences stored as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`prefs_db`数据库包含以下方式存储的应用程序偏好设置：'
- en: '| Table | Description |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `preferences` | The `/auth/user_data/fb_username` row shows the user''s Facebook
    username. The `/config/gk/last_fetch_time_ms` value is the timestamp of the app''s
    last communication with Facebook servers, but may not be an exact time of the
    user''s last interaction with the app. The `/fb_android/last_login_time` value
    shows the last time the user logged in through the app. The database contains
    many other timestamps. When put together, these timestamps can be used to build
    a decent profile of the app''s usage. The `/auth/user_data/fb_me_user` value contains
    data about the user, including their name, e-mail address, and phone number. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '`preferences` | `/auth/user_data/fb_username`行显示用户的Facebook用户名。`/config/gk/last_fetch_time_ms`值是应用程序与Facebook服务器最后通信的时间戳，但可能不是用户最后与应用程序互动的确切时间。`/fb_android/last_login_time`值显示用户通过应用程序登录的最后时间。数据库包含许多其他时间戳。将这些时间戳放在一起，可以用来构建应用程序使用情况的良好概况。`/auth/user_data/fb_me_user`值包含有关用户的数据，包括他们的姓名、电子邮件地址和电话号码。'
- en: 'The `threads_db` database contains messaging information described as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`threads_db`数据库包含以下方式描述的消息信息：'
- en: '| Table | Description |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `messages` | Each message has a unique ID in the `msg_id` column. The `text`
    column contains the message in plain text. The `sender` column identifies the
    Facebook ID and name of the message sender. The `timestamp_ms` column is the time
    the message was sent, in the Linux epoch format. The `attachments` column contains
    a public URL to retrieve attached images. The `coordinates` column would have
    the sender''s latitude and longitude if they have opted to show their location.
    The `source` column identifies whether the message was sent via the website or
    app. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | 每条消息在`msg_id`列中有一个唯一的ID。`text`列包含纯文本消息。`sender`列标识消息发送者的Facebook
    ID和姓名。`timestamp_ms`列是消息发送的时间，以Linux纪元格式表示。`attachments`列包含检索附加图像的公共URL。`coordinates`列如果发送者选择显示他们的位置，则会包含发送者的纬度和经度。`source`列标识消息是通过网站还是应用程序发送的。'
- en: Facebook Messenger analysis
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Facebook Messenger分析
- en: Facebook Messenger is a messaging app separate from the main Facebook application.
    It has over 500,000,000 downloads in the Play Store.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook Messenger是一个独立于主要Facebook应用程序的消息应用程序。在Play商店中已经有超过5亿次下载。
- en: 'Package name: `com.facebook.orca`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.facebook.orca`
- en: 'Version: 18.0.0.27.14'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：18.0.0.27.14
- en: 'Files of interest:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/`'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/`'
- en: '`audio/`'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio/`'
- en: '`fb_temp/`'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fb_temp/`'
- en: '`image/`'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image/`'
- en: '`/sdcard/com.facebook.orca`'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/com.facebook.orca`'
- en: '`/files/ rti.mqtt.analytics.xml`'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/ rti.mqtt.analytics.xml`'
- en: '`/databases/`'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`call_log.sqlite`'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call_log.sqlite`'
- en: '`contacts_db2`'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contacts_db2`'
- en: '`prefs_db`'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefs_db`'
- en: '`threads_db2`'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threads_db2`'
- en: The `/cache/audio` directory contains audio messages sent through the application.
    The files have a `.cnt` file extension, but are actually `.riff` files that can
    be played with Windows Media Player, VLC media player, and other programs.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/audio`目录包含通过应用程序发送的音频消息。这些文件具有`.cnt`文件扩展名，但实际上是可以在Windows Media Player、VLC媒体播放器和其他程序中播放的`.riff`文件。'
- en: The `/cache/fb_temp` path contains temp files for images and video sent through
    the application. It is unclear how long these files will remain. In our testing,
    we sent and received a total of five files, and all five were still in the temp
    folder one week later.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/fb_temp`路径包含通过应用程序发送的图像和视频的临时文件。目前尚不清楚这些文件会保留多久。在我们的测试中，我们发送和接收了总共五个文件，一周后所有五个文件仍然在临时文件夹中。'
- en: The `/cache/image` directory contains a multitude of other directories (33 on
    our test phone), and each directory can contain multiple `.cnt` files. The file
    header should be verified on each file, as some were video files and some were
    images. Several of the files from the `fb_temp` folder were found, as well as
    the profile pictures of some contacts.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/image`目录包含大量其他目录（在我们的测试手机上有33个），每个目录可以包含多个`.cnt`文件。应该验证每个文件的文件头，因为有些是视频文件，有些是图像。找到了`fb_temp`文件夹中的几个文件，以及一些联系人的个人资料图片。'
- en: The `fb_temp` folder on the SD card contains sent images and video only.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡上的`fb_temp`文件夹仅包含发送的图像和视频。
- en: The application also includes an option (disabled by default) to download all
    the received images/video to the device's gallery. If this option is selected,
    all received images/video would be found on the SD card.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序还包括一个选项（默认情况下禁用），可以将所有接收的图像/视频下载到设备的图库中。如果选择了此选项，所有接收的图像/视频将在SD卡上找到。
- en: The `/files/rti.mqtt.analytics.xml` file has the user's Facebook UID.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`/files/rti.mqtt.analytics.xml`文件包含用户的Facebook UID。'
- en: 'The `call_log.sqlite` database contains a log of calls made through the application.
    The `person_summary` table contains the relevant data described as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`call_log.sqlite`数据库包含通过应用程序进行的通话记录。`person_summary`表包含以下描述的相关数据：'
- en: '| Table | Description |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `person_summary` | The `user_id` column contains the Facebook ID of the remote
    user. This can be correlated with the `fbid` column in `contacts_db2` to determine
    the user''s name. The `last_call_time` column contains the time of the previous
    call in the Linux epoch format. This table does not contain information about
    the direction of the call (sent or received). |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `person_summary` | `user_id`列包含远程用户的Facebook ID。这可以与`contacts_db2`中的`fbid`列进行关联，以确定用户的姓名。`last_call_time`列包含以Linux纪元格式记录的上次通话时间。该表不包含通话的方向信息（发送或接收）。
    |'
- en: 'The `contacts_db2` file is a SQLite database, despite the lack of a file extension.
    Useful tables within this database include the following ones:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`contacts_db2`文件是一个SQLite数据库，尽管没有文件扩展名。该数据库中的有用表包括以下表：'
- en: '| Table | Description |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `contacts` | This table includes the contacts the user has added, as well
    as the contacts that were scraped from the user''s phone book (if the phone book
    contact uses Facebook Messenger). It contains the first and last names of each
    contact, as well as that contact''s Facebook ID (as discussed in the `call_log.sqlite`
    table earlier). The `added_time_ms` column shows the time each user was added
    into the app. This can give some insight into whether the contact was added manually
    or automatically. A large group of contacts added within milliseconds of each
    other were likely created automatically when the app was installed. The `small_picture_url`,
    `big_picture_url`, and `huge_picture_url` columns contain public links to the
    contact''s profile picture. A contact''s phone number can be found in the blob
    of information within the data column.It should be noted that we have no idea
    where some of the contacts in this database came from. They were not Facebook
    friends with our account and were not contacts in our device''s phone book, but
    were added at the same time that the phone book was scraped. Our best guess is
    that some contacts in our phone have phone numbers that Facebook associated with
    other users. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `contacts` | 该表包括用户添加的联系人，以及从用户电话簿中抓取的联系人（如果电话簿联系人使用Facebook Messenger）。它包含每个联系人的名字和姓氏，以及该联系人的Facebook
    ID（如前面的`call_log.sqlite`表中所讨论的）。`added_time_ms`列显示每个用户被添加到应用程序中的时间。这可以让人们了解联系人是手动添加还是自动添加的。一组在几毫秒内添加的大量联系人很可能是在安装应用程序时自动创建的。`small_picture_url`、`big_picture_url`和`huge_picture_url`列包含联系人个人资料图片的公共链接。联系人的电话号码可以在数据列中的信息块中找到。值得注意的是，我们不知道数据库中的一些联系人是从哪里来的。他们不是我们账户的Facebook好友，也不是我们设备电话簿中的联系人，但是在电话簿被抓取的同时被添加。我们最好的猜测是我们手机中的一些联系人的电话号码被Facebook与其他用户关联起来。
    |'
- en: '| `favorite_contacts` | The `favorite_contacts` table shows contacts that have
    been added as favorites by the user. They are identified by the `fbid` column,
    which can be correlated back to the contacts table. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `favorite_contacts` | `favorite_contacts`表显示用户添加为收藏夹的联系人。它们由`fbid`列标识，可以与联系人表进行关联。
    |'
- en: 'The `prefs_db` database contains useful metadata about the app and the account:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`prefs_db`数据库包含有关应用程序和账户的有用元数据：'
- en: '| Table | Description |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `preferences` | The `/messenger/first_install_time` value indicates the time
    the application was installed, in the Linux epoch time. The `/auth/user_data/fb_username`
    value shows the username associated with the application. The `/config/neue/validated_phonenumber`
    value shows the phone number associated with the application. The users first
    and last names can be found in the `/auth/user_data/fb_me_user` value. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `preferences` | `/messenger/first_install_time`值表示应用程序安装的时间，以Linux纪元时间表示。`/auth/user_data/fb_username`值显示与应用程序关联的用户名。`/config/neue/validated_phonenumber`值显示与应用程序关联的电话号码。用户的名字和姓氏可以在`/auth/user_data/fb_me_user`值中找到。
    |'
- en: 'Finally, the `threads_db2` database contains data about messages:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`threads_db2`数据库包含有关消息的数据：
- en: '| Table | Description |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `group_clusters` | This shows folders the user has created. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `group_clusters` | 这显示用户创建的文件夹。 |'
- en: '| `group_conversations` | This contains the `thread_key` value for each group
    chat. This can be correlated with the `messages` table. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `group_conversations` | 这包含每个群聊的`thread_key`值。这可以与`messages`表进行关联。 |'
- en: '| `messages` | The `thread_key` value is a unique ID generated for each chat
    session. The `text` column has the contents of each text message sent and received.
    This also identifies voice calls using the phrases "You called Facebook User.",
    "Facebook User called you.", and "You missed a call from Facebook User.". The
    `sender` column identifies which user sent each message (or made each call). The
    `timestamp_ms` column shows the time each message was sent, in the Linux epoch
    format. The `attachments` column will show data for each sent or received attachment.
    The file type is also visible in the data. The `pending_send_media_attachment`
    column shows the path on the device to recover sent attachments. Finding received
    attachments directly does not appear possible, although they were recovered in
    the `/cache/images` directory discussed earlier. There was no way to correlate
    them with a specific message or sender. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | `thread_key`值是为每个聊天会话生成的唯一ID。`text`列包含发送和接收的每条文本消息的内容。这还可以通过短语“您呼叫了Facebook用户。”、“Facebook用户呼叫了您。”和“您错过了来自Facebook用户的电话。”来识别语音通话。`sender`列标识每条消息的发送者（或每次通话的发起者）。`timestamp_ms`列以Linux纪元格式显示每条消息发送的时间。`attachments`列将显示每个发送或接收的附件的数据。文件类型也可在数据中看到。`pending_send_media_attachment`列显示设备上恢复已发送附件的路径。直接找到接收的附件似乎不可能，尽管它们在前面讨论过的`/cache/images`目录中被恢复。没有办法将它们与特定的消息或发送者进行关联。
    |'
- en: Skype analysis
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Skype分析
- en: Skype is a voice-/video-calling app, as well as a messaging app owned by Microsoft.
    It has over 100,000,000 installs on Google Play.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: Skype是一款语音/视频通话应用，也是一款由微软拥有的消息应用。它在Google Play上有超过1亿次安装。
- en: 'Package name: `com.skype.raider`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.skype.raider`
- en: 'Version: 5.1.0.58677'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：5.1.0.58677
- en: 'Files of interest:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/skype-4228/DbTemp`'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/skype-4228/DbTemp`'
- en: '`/sdcard/Android/data/com.skype.raider/cache/`'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/Android/data/com.skype.raider/cache/`'
- en: '`/files/`'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/`'
- en: '`shared.xml`'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shared.xml`'
- en: '`<username>/thumbnails/`'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<username>/thumbnails/`'
- en: '`<username>/main.db`'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<username>/main.db`'
- en: '`<username>/chatsync`'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<username>/chatsync`'
- en: The `/cache/skype-4228/DbTemp` directory contained multiple files with no extension.
    One of these files (`temp-5cu4tRPdDuQ3ckPQG7wQRFgU` on our device) was actually
    a SQLite database that contained the SSID and **Media Access Control** (**MAC**)
    of the wireless access points it had been connected to.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/skype-4228/DbTemp`目录包含多个没有扩展名的文件。其中一个文件（在我们的设备上为`temp-5cu4tRPdDuQ3ckPQG7wQRFgU`）实际上是一个包含它连接到的无线接入点的SSID和**媒体访问控制**（**MAC**）的SQLite数据库。'
- en: The SD card path will contain any images or files received in a chat. If a file
    is downloaded, it would be in the `Downloads` folder in the root of the SD.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡路径将包含在聊天中接收的任何图像或文件。如果下载了文件，它将位于SD卡根目录下的`Downloads`文件夹中。
- en: 'The `shared.xml` file listed the account''s username as well as the last IP
    address that connected to Skype:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`shared.xml`文件列出了帐户的用户名以及连接到Skype的最后IP地址：'
- en: '![Skype analysis](img/image00398.jpeg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![Skype分析](img/image00398.jpeg)'
- en: The `<username>/thumbnails` directory contained the user's profile picture.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`<username>/thumbnails`目录包含了用户的个人资料图片。'
- en: 'The `main.db` database, like it sounds, contains the app usage history. Some
    important tables to look at are as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.db`数据库包含了应用程序的使用历史记录。一些重要的要查看的表格如下：'
- en: '| Table | Description |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| 表格 | 描述 |'
- en: '| --- | --- |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Accounts` | This shows the accounts used on the device and the associated
    e-mail addresses. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `Accounts` | 显示了设备上使用的帐户和相关的电子邮件地址。 |'
- en: '| `CallMembers` | This includes call logs from the app. The `duration` table
    is the duration of the call, and the `start_timestamp` column is the start time
    in the Linux epoch format; neither of these columns is populated if the call is
    not answered. The `creation_timestamp` column is the actual beginning of the call.
    It is populated as soon as the call is initiated within the app, so even unanswered
    calls are shown in this column. The `ip_address` column shows the IP address of
    the user for connected calls. The `type` column indicates whether the call was
    outgoing or incoming (1=incoming, 2=outgoing). The `guid` column also shows the
    direction of the call, listing each participant from left to right, with the user
    on the left-hand side being the one who initiated the call. The `call_db_id` column
    can be correlated with the `Calls` table to find further information about the
    call. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `CallMembers` | 这包括了应用程序的通话日志。`duration`表是通话的持续时间，`start_timestamp`列是Linux纪元格式的开始时间；如果呼叫没有被接听，这两列都不会被填充。`creation_timestamp`列是呼叫的实际开始时间。只要在应用程序中发起呼叫，它就会被填充，所以即使未接听的呼叫也会显示在这一列中。`ip_address`列显示了连接呼叫的用户的IP地址。`type`列指示呼叫是呼入还是呼出（1=呼入，2=呼出）。`guid`列还显示了呼叫的方向，从左到右列出了每个参与者，左侧的用户是发起呼叫的用户。`call_db_id`列可以与`Calls`表相关联，以找到有关呼叫的更多信息。|'
- en: '| `Calls` | This is very similar to `CallMembers`, but with less information.
    It is worth noting that the `begin_timestamp` column in this table is identical
    to `creation_timestamp` in `CallMembers`. There is an `is_incoming` column to
    show the direction of the call; `0` indicates outgoing, and `1` indicates incoming.
    Finally, it should be noted that the duration of some calls did *not* match the
    `CallMembers` table. One of the durations was a second longer than the other table
    indicated. It appears that the `CallMembers` table calculates duration based on
    `start_timestamp`, while the `Calls` table calculates duration based on `begin_timestamp`.
    The difference in duration is likely caused by the amount of time it took the
    user to accept the call. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `Calls` | 这与`CallMembers`非常相似，但信息较少。值得注意的是，这个表中的`begin_timestamp`列与`CallMembers`中的`creation_timestamp`是相同的。有一个`is_incoming`列来显示呼叫的方向；`0`表示呼出，`1`表示呼入。最后，值得注意的是，一些呼叫的持续时间与`CallMembers`表中的持续时间不匹配。其中一个持续时间比另一个表中指示的持续时间长一秒。看起来`CallMembers`表根据`start_timestamp`计算持续时间，而`Calls`表根据`begin_timestamp`计算持续时间。持续时间的差异很可能是由用户接受呼叫所花费的时间引起的。|'
- en: '| `ChatMembers` | This shows the users in each chat. The `adder` column lists
    the user that initiated the chat. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `ChatMembers` | 这显示了每个聊天中的用户。`adder`列列出了发起聊天的用户。|'
- en: '| `Chats` | This lists each unique chat session. The `timestamp` column is
    the date/time the conversation began, in the Linux epoch format. The `dialog_partner`
    column shows users in the chat, excluding the account on the device. The `posters`
    column shows every user who has made a comment in the chat and includes the account
    on the device if it has posted. The `participants` column is similar to the `dialog_partner`
    column, but includes the user''s account. Finally, the `dbpath` column contains
    the name of the chat backup file found in the `<username>/chatsync` directory.
    This will become important further in this analysis. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `Chats` | 这列出了每个唯一的聊天会话。`timestamp`列是对话开始的日期/时间，以Linux纪元格式表示。`dialog_partner`列显示了聊天中的用户，不包括设备上的帐户。`posters`列显示了在聊天中发表评论的每个用户，如果设备上的帐户已经发表了，也会包括在内。`participants`列类似于`dialog_partner`列，但包括用户的帐户。最后，`dbpath`列包含在`<username>/chatsync`目录中找到的聊天备份文件的名称。这在进一步分析中将变得重要。|'
- en: '| `Contacts` | This is actually a very misleading table. In our test, we added
    two users to our contact list; the `Contacts` table has 233 entries! The `is_permanent`
    column indicates the status of the users listed in this table; if it is `1`, the
    user would be added as an actual contact within the application. The other 231
    entries appear to be names that came up in results when we searched for contacts,
    but we never communicated with or added them. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `Contacts` | 这实际上是一个非常误导性的表。在我们的测试中，我们向我们的联系人列表中添加了两个用户；`Contacts`表有233个条目！`is_permanent`列指示了此表中列出的用户的状态；如果是`1`，用户将作为实际联系人添加到应用程序中。其他231个条目似乎是在我们搜索联系人时出现的结果，但我们从未与他们交流或添加他们。'
- en: '| `Conversations` | We have no idea what the difference between `Conversations`
    and `Chats` is. They mostly contain the same information and, in fact, appear
    to be referencing the same chat sessions. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `Conversations` | 我们不知道`Conversations`和`Chats`之间的区别。它们大部分包含相同的信息，实际上似乎是在引用相同的聊天会话。'
- en: '| `Messages` | This contains every individual message from chats/conversations.
    The `convo_id` column has a unique value for each conversation; any messages with
    the same `convo_id` value are from the same conversation. The `author` and `from_dispname`
    columns show who wrote each message. The `timestamp` column, once again, shows
    the date/time of the message in the Linux epoch format. The `type` column indicates
    the type of message that was sent. Here are the values from our testing:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Messages` | 这包含了来自聊天/对话的每条单独消息。`convo_id`列对于每个对话有一个唯一的值；具有相同`convo_id`值的任何消息都来自同一个对话。`author`和`from_dispname`列显示了谁写了每条消息。`timestamp`列再次显示了消息的日期/时间，以Linux纪元格式显示。`type`列指示了发送的消息的类型。以下是我们测试的值：'
- en: '`50`: friend request'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`50`: 好友请求'
- en: '`51`: request accepted'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`51`: 请求已接受'
- en: '`61`: plain text message'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`61`: 纯文本消息'
- en: '`68`: file transfer'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`68`: 文件传输'
- en: '`30`: call begin (voice or video)'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`30`: 通话开始（语音或视频）'
- en: '`39`: call end (voice or video)'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`39`: 通话结束（语音或视频）'
- en: '`70`: video message'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`70`: 视频消息'
- en: The `body_xml` column has the content of the message. For plain-text messages
    and friend requests, the content is simply what the message said. File transfers
    show the size and name of the file. Video messages say that they are video messages,
    but provide no other information. Calls would show the duration if it was connected,
    and no duration if they were missed/ignored. The `identities` column shows who
    sent each message, but may be blank if it was sent by the user account on the
    device. The `reason` column appears to be for calls and shows either `no_answer`
    or `busy` to explain why a call was not connected. |
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`body_xml`列包含消息的内容。对于纯文本消息和好友请求，内容就是消息的内容。文件传输显示文件的大小和名称。视频消息显示它们是视频消息，但没有提供其他信息。通话如果连接了会显示持续时间，如果错过/忽略了则不会显示持续时间。`identities`列显示谁发送了每条消息，但如果是由设备上的用户帐户发送的，则可能为空。`reason`列似乎是用于通话，并显示`no_answer`或`busy`来解释为什么通话未连接。'
- en: '| `Participants` | This is similar to `ChatMembers`. It shows each user involved
    with a chat/conversation. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| `Participants` | 这类似于`ChatMembers`。它显示了参与聊天/对话的每个用户。'
- en: '| `SMSes` | Our testing did not include SMS messaging. However, each column
    in this table appears self-explanatory. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `SMSes` | 我们的测试不包括短信。然而，这个表中的每一列似乎都很容易理解。'
- en: '| `Transfers` | This shows information about files transferred. This includes
    the filename, size, and path on the device. The `partner_dispname` column identifies
    which user began the file transfer. |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `Transfers` | 这显示了有关传输文件的信息。这包括文件名、大小和设备上的路径。`partner_dispname`列标识了哪个用户开始了文件传输。'
- en: '| `VideoMessages` | This shows the author and creation timestamp of video messages.
    Note that video messages are *not* stored on the device. Accessing them will be
    covered in a separate section later on in the chapter. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| `VideoMessages` | 这显示了视频消息的作者和创建时间戳。请注意，视频消息*不*存储在设备上。如何访问它们将在本章的后面单独的部分中介绍。'
- en: '| `VoiceMails` | Our testing did not include voice mails. However, each column
    in this table appears self-explanatory. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| `VoiceMails` | 我们的测试不包括语音邮件。然而，这个表中的每一列似乎都很容易理解。'
- en: Recovering video messages from Skype
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Skype中恢复视频消息
- en: As noted earlier, video messages are not stored on the device. Luckily, for
    us, they can be accessed via the Internet. The first step is to verify that a
    video message was sent by looking in the `Messages` table in the `body_xml` column.
    Next, note the `convo_id` field for the message shown in the following screenshot.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，视频消息不会存储在设备上。幸运的是，它们可以通过互联网访问。第一步是通过查看`Messages`表中的`body_xml`列来验证是否发送了视频消息。接下来，注意以下截图中显示的消息的`convo_id`字段。
- en: '![Recovering video messages from Skype](img/image00399.jpeg)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![从Skype中恢复视频消息](img/image00399.jpeg)'
- en: Our video message is in `convo_id` `257`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视频消息在`convo_id` `257`中。
- en: 'Third, look in the `Chats` table for `convo_id` in the `conv_dbid` column and
    find the `dbpath` value. This will be the name of the conversation''s backup file
    as shown in the following screenshot:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步，在`Chats`表中查找`conv_dbid`列中的`convo_id`，并找到`dbpath`值。这将是对话的备份文件的名称，如下截图所示：
- en: '![Recovering video messages from Skype](img/image00400.jpeg)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![从Skype中恢复视频消息](img/image00400.jpeg)'
- en: To find the backup file, look in `files/<username>/chatsync`. There will be
    a folder for each conversation; the name of the folder is the first two digits
    of the backup name. Our backup will be in folder `28`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到备份文件，请查看`files/<username>/chatsync`。每个对话都会有一个文件夹；文件夹的名称是备份名称的前两位数字。我们的备份将在文件夹`28`中。
- en: 'Open the backup file in a hex editor, and search for `videomessage`. You should
    find a URL and a code to access the video:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在十六进制编辑器中打开备份文件，并搜索`videomessage`。你应该会找到一个URL和一个访问视频的代码：
- en: '![Recovering video messages from Skype](img/image00401.jpeg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: 从Skype中恢复视频消息
- en: Note
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Actually, accessing the URL may require an additional warrant or legal permission,
    depending on your local jurisdiction. As this data is not on the device and is
    private, viewing it without legal guidance could invalidate any evidence found
    in the video.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，访问该URL可能需要额外的授权或法律许可，具体取决于您当地的司法管辖区。由于这些数据不在设备上并且是私人的，未经法律指导的查看可能会使视频中发现的任何证据无效。
- en: Snapchat analysis
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Snapchat分析
- en: Snapchat is an image-sharing and text-messaging service with over 100,000,000
    downloads. Its signature feature is that images and videos sent will "self-destruct"
    after a time limit set by the sender, from 1-10 seconds. Furthermore, if a user
    takes a screenshot of the image, the sender is notified. Text chats do not have
    an expiration timer.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: Snapchat是一个拥有超过1亿次下载的图片分享和文本消息服务。它的特色是发送的图像和视频会在发送者设定的时间限制内"自毁"，从1-10秒不等。此外，如果用户对图像截屏，发送者会收到通知。文本聊天没有过期计时器。
- en: 'Package name: `com.snapchat.android`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.snapchat.android`
- en: 'Version: 8.1.2'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：8.1.2
- en: 'Files of interest:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/stories/received/thumbnail/`'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/stories/received/thumbnail/`'
- en: '`/sdcard/Android/data/com.snapchat.android/cache/my_media/`'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/Android/data/com.snapchat.android/cache/my_media/`'
- en: '`/shared_prefs/com.snapchat.android_preferences.xml`'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/com.snapchat.android_preferences.xml`'
- en: '`/databases/tcspahn.db`'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/tcspahn.db`'
- en: The `/cache/stories/received/thumbnail` path contains thumbnails of pictures
    taken by the user on the device. The `/sdcard` path contains full-sized images.
    These remain even after the time limit has expired, and the recipient can no longer
    access them. The files in both of these locations may not have proper file extensions.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache/stories/received/thumbnail`路径包含用户在设备上拍摄的缩略图。`/sdcard`路径包含全尺寸图像。即使超过时间限制，接收者也无法再访问这些图像。这两个位置的文件可能没有正确的文件扩展名。'
- en: The `com.snapchat.android_preferences.xml` file contains the e-mail address
    used to create an account and the phone number of the device registered with the
    account.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`com.snapchat.android_preferences.xml`文件包含了用于创建账户的电子邮件地址以及与账户注册的设备的电话号码。'
- en: 'The `tcspahn.db` database contains all other information about the app''s usage:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`tcspahn.db`数据库包含了应用程序使用的所有其他信息：'
- en: '| Table | Description |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Chat` | This lists all text chats. It shows the sender, recipient, and timestamp
    in the Linux epoch time and the text of the message. |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `聊天` | 这列出了所有的文本聊天。它显示了发送者、接收者和Linux纪元时间戳以及消息的文本。'
- en: '| `ContactsOnSnapchat` | This shows all the users in the user''s phonebook
    who also have Snapchat installed. The `isAddedAsFriend` column would show a `1`
    value if the user has actually been added as a contact. |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `Snapchat上的联系人` | 这显示了用户电话簿中安装了Snapchat的所有用户。如果用户实际上已被添加为联系人，则`isAddedAsFriend`列将显示`1`值。'
- en: '| `Conversation` | This has information about each open conversation. It includes
    the sender and recipient and the timestamp of the last sent and received snaps
    in the Linux epoch format. |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `对话` | 这包含了每个打开对话的信息。它包括发送者和接收者以及最后发送和接收的快照的时间戳（以Linux纪元格式）。'
- en: '| `Friends` | This is similar to `ContactsOnSnapchat`, but only includes users
    who have been added as a friend. It includes the timestamp when each user added
    the other. |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `朋友` | 这类似于`Snapchat上的联系人`，但只包括已添加为好友的用户。它包括每个用户添加对方的时间戳。'
- en: '| `ReceivedSnaps` | This contains metadata about received images and videos.
    Once the image/video is viewed, it appears to be removed from this table at some
    point. It contains a timestamp for each message, a status, information whether
    or not a snap was screenshot, and the sender. |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `接收的Snaps` | 这包含了关于接收的图像和视频的元数据。一旦图像/视频被查看，它似乎会在某个时候从这个表中删除。它包含每条消息的时间戳、状态、快照是否被截屏的信息以及发送者。'
- en: '| `SentSnaps` | This contains metadata about sent images and videos. Once the
    image/video is viewed, it appears to be removed from this table at some point.
    It contains a timestamp for each message, a status, and the recipient. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `发送的Snaps` | 这包含了关于发送的图像和视频的元数据。一旦图像/视频被查看，它似乎会在某个时候从这个表中删除。它包含每条消息的时间戳、状态和接收者。'
- en: Viber analysis
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Viber分析
- en: Viber is a messaging and voice-/video-calling app with over 100,000,000 downloads.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: Viber是一个拥有超过1亿次下载的消息和语音/视频通话应用程序。
- en: 'Package name: `com.viber.voip`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 包名称：`com.viber.voip`
- en: 'Version: 5.2.1'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：5.2.1
- en: 'Files of interest:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/files/preferences/`'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/preferences/`'
- en: '`activated_sim_serial`'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activated_sim_serial`'
- en: '`display_name`'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_name`'
- en: '`reg_viber_phone_num`'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_viber_phone_num`'
- en: '`/sdcard/viber/media/`'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/viber/media/`'
- en: '`/User Photos/`'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/用户照片/`'
- en: '`/Viber Images/`'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Viber 图像/`'
- en: '`/Viber Videos/`'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/Viber 视频/`'
- en: '`/databases/`'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/数据库/`'
- en: '`viber_data`'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viber_data`'
- en: '`viber_messages`'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`viber_messages`'
- en: The files in `/files/preferences` contain the SIM card's **Integrated Circuit
    Card ID** (**ICCID**), the name the user displays in the app, and the phone number
    used to register with the app.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`/files/preferences`中的文件包含SIM卡的**集成电路卡识别码**（ICCID）、用户在应用程序中显示的名称以及用于注册应用程序的电话号码。'
- en: The files in the `/sdcard/viber/media` path are the profile photos of people
    in the user's contact list who use Viber (regardless of whether they have been
    added as friends in the app) and all images and video sent through the app.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`/sdcard/viber/media`路径中的文件是用户联系人列表中使用Viber的人的个人资料照片（无论他们是否已在应用程序中添加为好友）以及通过应用程序发送的所有图像和视频。'
- en: 'The `viber_data` file is a database, even though it does not have the `.db`
    file extension. It contains information about the user''s contacts:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`viber_data`文件是一个数据库，尽管它没有`.db`文件扩展名。它包含了关于用户联系人的信息：'
- en: '| Table | Description |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `calls` | This table did not populate, even though we made calls from within
    the app. |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| `通话` | 这个表没有填充，即使我们在应用程序内拨打了电话。'
- en: '| `phonebookcontact` | This table could be extremely valuable from a forensic
    standpoint. When Viber is first opened, it scrapes the user''s phonebook and adds
    all the entries it finds to this database. This means it may contain historical
    data about the user''s contacts. If he later deletes an entry from the phone book,
    it may still be recovered in this database. This table only includes names of
    contacts in the phonebook. |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| `phonebookcontact` | 从法医角度来看，这个表可能非常有价值。当Viber首次打开时，它会扫描用户的电话簿，并将找到的所有条目添加到这个数据库中。这意味着它可能包含有关用户联系人的历史数据。如果用户稍后从电话簿中删除了一个条目，它仍然可能在这个数据库中恢复。这个表只包括电话簿中联系人的姓名。'
- en: '| `phonebookdata` | This is similar to phonebook contact, except that it includes
    e-mail addresses and phone numbers for contacts in the device''s phonebook. |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| `phonebookdata` | 这与电话簿联系人类似，只是它包括了设备电话簿中联系人的电子邮件地址和电话号码。'
- en: '| `vibernumbers` | This shows the Viber phone number for each contact in the
    device''s phonebook that uses the app. The value in `actual_photo` corresponds
    with the filenames in the `/sdcard/viber/media/User Photos` directory. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| `vibernumbers` | 这显示了设备电话簿中使用该应用的每个联系人的Viber电话号码。`actual_photo`中的值对应于`/sdcard/viber/media/User
    Photos`目录中的文件名。 |'
- en: 'The `viber_messages` file is a database, even though it does not have the `.db`
    file extension. It contains information about the app''s usage:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`viber_messages`文件是一个数据库，尽管它没有`.db`文件扩展名。它包含了关于应用使用情况的信息：'
- en: '| Table | Description |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conversations` | This contains a unique ID, the recipient, and date for
    each unique conversation. |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| `conversations` | 这包含了每个独特对话的唯一ID、接收者和日期。'
- en: '| `messages` | This contains each individual message from all conversations.
    The address is the phone number of the remote party in the conversation. The `date`
    column is in the Linux epoch format. The `type` column corresponds to incoming
    or outgoing; `1` is an outgoing message, and `0` is incoming. The `location_lat`
    and `location_lng` columns will be populated if a location is shared. Shared files
    can be sent with text to describe them; this is found in the `description` column.
    |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | 这包含了所有对话中的每条消息。地址是对话中远程一方的电话号码。`date`列以Linux纪元格式表示。`type`列对应于传入或传出；`1`表示传出消息，`0`表示传入消息。如果共享了位置，则`location_lat`和`location_lng`列将被填充。共享的文件可以与描述文本一起发送；这在`description`列中找到。'
- en: '| `messages_calls` | This table did not populate, even though we made calls
    from within the app. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| `messages_calls` | 这个表没有填充，尽管我们在应用内进行了通话。'
- en: '| `participants_info` | This has the profile information for each account that
    has been in a conversation with the user. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| `participants_info` | 这包含了与用户进行过对话的每个账户的个人资料信息。'
- en: Tango analysis
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tango分析
- en: Tango is a voice-/text-/video-messaging application. It has over 100,000,000
    downloads in the Play Store.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: Tango是一款语音/文字/视频消息应用程序。在Play商店中已经有超过1亿次下载。
- en: 'Package name: `com.sgiggle.production`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 包名：`com.sgiggle.production`
- en: Note
  id: totrans-467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This package name is seemingly innocuous and could be overlooked by an examiner
    thinking it was a game. This is an example of why every application should be
    analyzed.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包名看起来毫无可疑，可能会被调查人员认为是一个游戏而忽略。这是为什么每个应用都应该被分析的一个例子。
- en: 'Version: 3.13.128111'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：3.13.128111
- en: 'Files of interest:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/sdcard/Android/data/com.sgiggle.production/files/storage/appdata/`'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/Android/data/com.sgiggle.production/files/storage/appdata/`'
- en: '`TCStorageManagerMediaCache_v2/`'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TCStorageManagerMediaCache_v2/`'
- en: '`conv_msg_tab_snapshots/`'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_msg_tab_snapshots/`'
- en: '`/files/`'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/`'
- en: '`tc.db`'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tc.db`'
- en: '`userinfo.xml.db`'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userinfo.xml.db`'
- en: The `/TCStorageManagerMediaCache_v2` path on the SD card contains images that
    were sent and received with the application as well as profile pictures of contacts.
    However, it also contains many images that were never seen or used in the application.
    They appear to either be images for ads or stock emoji-type images that can be
    attached to conversations. The filenames found here can be correlated with `tc.db`
    to find the exact image that was used in a conversation.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡上的`/TCStorageManagerMediaCache_v2`路径包含了通过该应用发送和接收的图片，以及联系人的个人资料图片。然而，它还包含了许多从未在应用中看到或使用过的图片。它们似乎要么是广告图片，要么是可以附加到对话中的库存表情类型图片。在这里找到的文件名可以与`tc.db`相关联，以找到在对话中使用的确切图片。
- en: The `conv_msg_tab_snapshots` path on the SD card contains files with a `.dat`
    extension. When viewed in a hex editor, we were able to find snippets of conversations
    in plain text, as well as paths and URLs to images sent and received in conversations.
    It is unclear what causes these files to exist, but it may be possible to retrieve
    content from these files that may have been deleted in `tc.db`.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡上的`conv_msg_tab_snapshots`路径包含了扩展名为`.dat`的文件。在十六进制编辑器中查看，我们能够找到一些对话的纯文本片段，以及在对话中发送和接收的图片的路径和URL。目前尚不清楚是什么导致了这些文件的存在，但可能可以从这些文件中检索可能已在`tc.db`中被删除的内容。
- en: 'The `tc.db` database is what Tango uses to store all message information:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`tc.db`数据库是Tango用来存储所有消息信息的数据库：'
- en: '| Table | Description |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conversations` | This contains a unique ID in the `conv_id` column for each
    conversation. |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| `conversations` | 此处每个对话在`conv_id`列中包含唯一ID。 |'
- en: '| `messages` | This contains messages sent and received through the app. The
    `msg_id` column is a unique identifier for each message, and the `conv_id` column
    identifies which conversation the message is from. The `send_time` column identifies
    the time a message was sent or when it was received, depending on the direction.
    The `direction` column shows the direction of the message; `1` = sent and `2`
    = received. The `type` column identifies the type of the message. Based on our
    testing, they are as follows:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '| `messages` | 这包含了通过应用发送和接收的消息。`msg_id`列是每条消息的唯一标识符，`conv_id`列标识了消息来自哪个对话。`send_time`列标识了消息发送的时间或接收的时间，取决于方向。`direction`列显示了消息的方向；`1`表示发送，`2`表示接收。`type`列标识了消息的类型。根据我们的测试，它们如下：'
- en: '`0` = plain text message'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0` = 纯文本消息'
- en: '`1` = video message'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` = 视频消息'
- en: '`2` = audio message'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2` = 音频消息'
- en: '`3` = image'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`3` = 图像'
- en: '`4` = location/coordinates'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4` = 位置/坐标'
- en: '`35` = voice call'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`35` = 语音通话'
- en: '`36` = attempted voice call (missed by either party)'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`36` = 尝试语音通话（被任一方错过）'
- en: '`58` = attached stock image, such as the emojis found in the TCStorageManagerMediaCache_v2
    path'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`58` = 附加的股票图片，例如在TCStorageManagerMediaCache_v2路径中找到的表情符号'
- en: Finally, the `payload` column contains the content of the message. The data
    is Base64 encoded, which will be discussed in detail in the following section.
    |
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`payload`列包含消息的内容。数据是Base64编码的，这将在下一节详细讨论。
- en: The `user_info_xml.db` database contains metadata about the account, such as
    the user's name and phone number. However, its data is entirely Base64 encoded,
    like the messages in `tc.db`.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_info_xml.db`数据库包含有关帐户的元数据，例如用户的姓名和电话号码。但是，它的数据完全是Base64编码的，就像`tc.db`中的消息一样。'
- en: Note
  id: totrans-494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The next data-storage method is Base64.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个数据存储方法是Base64。
- en: Decoding Tango messages
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码Tango消息
- en: 'Base64 is an encoding scheme that is commonly used for data transport. It is
    not considered encryption, because it has a known method for decoding and does
    not require a unique key to decode the data. Base64 contains ASCII-printable characters,
    but the underlying data is binary (which will make our output somewhat messy!).
    An example from the `payload` column in the `messages` table of `tc.db` looks
    like this:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: Base64是一种常用于数据传输的编码方案。它不被视为加密，因为它有一个已知的解码方法，并且不需要一个唯一的密钥来解码数据。Base64包含ASCII可打印字符，但底层数据是二进制的（这将使我们的输出有些混乱！）。`tc.db`的`messages`表中`payload`列中的一个示例如下：
- en: '`EhZtQzVtUFVQWmgxWnNRUDJ6aE44cy1nGAAiQldlbGNvbWUgdG8gVGFuZ28hIEhlcmUncyBob3cgdG8gY29ubmVjdCwgZ2V0IHNvY2lhbCwgYW5kIGhhdmUgZnVuIYABAKoBOwoFVGFuZ28SABoWbUM1bVBVUFpoMVpzUVAyemhOOHMtZyILCgcKABIBMRoAEgAqADD///////////8BsAHYioX1rym4AYKAgAjAAQHQAQDoAdC40ELIAgTQAgDqAgc4MDgwODg5yAMA2AMA2AXTHw==`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`EhZtQzVtUFVQWmgxWnNRUDJ6aE44cy1nGAAiQldlbGNvbWUgdG8gVGFuZ28hIEhlcmUncyBob3cgdG8gY29ubmVjdCwgZ2V0IHNvY2lhbCwgYW5kIGhhdmUgZnVuIYABAKoBOwoFVGFuZ28SABoWbUM1bVBVUFpoMVpzUVAyemhOOHMtZyILCgcKABIBMRoAEgAqADD///////////8BsAHYioX1rym4AYKAgAjAAQHQAQDoAdC40ELIAgTQAgDqAgc4MDgwODg5yAMA2AMA2AXTHw==`'
- en: Note
  id: totrans-499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The equal signs at the end of our message. This is a strong indicator that the
    data is Base64 encoded. The input that will be encoded needs to be divisible by
    3, for the math behind Base64 to work properly. If the input is not divisible
    by 3, it would be padded, resulting in the equal signs seen in the output.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 我们消息末尾的等号。这是数据被Base64编码的强烈指示符。要编码的输入需要被3整除，才能使Base64的数学运算正常工作。如果输入不能被3整除，它将被填充，导致在输出中看到的等号。
- en: 'For example, consider the following table:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下表：
- en: '| Input string | Number of characters/bytes | Output |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| 输入字符串 | 字符数/字节数 | 输出 |'
- en: '| --- | --- | --- |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Hello`, `World` | 12 | `SGVsbG8sIFdvcmxk` |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| `Hello`, `World` | 12 | `SGVsbG8sIFdvcmxk` |'
- en: '| `Hello, World!` | 13 | `SGVsbG8sIFdvcmxkIQ==` |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| `Hello, World!` | 13 | `SGVsbG8sIFdvcmxkIQ==` |'
- en: '| `Hello, World!!` | 14 | `SGVsbG8sIFdvcmxkISE=` |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| `Hello, World!!` | 14 | `SGVsbG8sIFdvcmxkISE=` |'
- en: You can see that the 12-byte input (divisible by 3) has no padding, while the
    other two inputs have padding because they are not divisible by 3\. This is important
    because it shows that while the equal signs are a strong indicator of Base64,
    the lack of an equal sign does not mean it isn't Base64!
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到12字节的输入（可被3整除）没有填充，而另外两个输入有填充，因为它们不能被3整除。这很重要，因为它表明虽然等号是Base64的强烈指示符，但缺少等号并不意味着它不是Base64！
- en: Now that we understand a little about Base64 and recognize that our `payload`
    column is very likely encoded in Base64, we need to decode it. There are websites
    that will allow the user to paste in encoded data, and it will be decrypted (such
    as [www.base64decode.org](http://www.base64decode.org)). However, it is inconvenient
    for large amount of data as each message must be input individually (and putting
    evidentiary data on the Internet is also frowned upon in most cases). Likewise,
    it can be decoded on the command line of Linux-based systems, but is equally inconvenient
    for large amounts of data.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Base64有了一点了解，并且认识到我们的`payload`列很可能是Base64编码的，我们需要对其进行解码。有一些网站允许用户粘贴编码数据，然后进行解密（例如[www.base64decode.org](http://www.base64decode.org)）。然而，对于大量数据来说，这是不方便的，因为每条消息都必须单独输入（在大多数情况下，将证据数据放在互联网上也是不受欢迎的）。同样，它可以在基于Linux的系统的命令行上解码，但对于大量数据同样不方便。
- en: 'Our solution was to build a Python script that pulls the Base64 data from the
    database, decodes it, and writes it back out to a new file:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的解决方案是构建一个Python脚本，从数据库中提取Base64数据，对其进行解码，并将其写回到一个新文件中：
- en: '[PRE0]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run the code, simply paste this code into a new file named `tcdb.py`, place
    the script in the same directory as `tc.db`, and on the command line, navigate
    to that directory and run:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码，只需将此代码粘贴到一个名为`tcdb.py`的新文件中，将脚本放在与`tc.db`相同的目录中，然后在命令行上导航到该目录并运行：
- en: '[PRE1]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The script will make a file named `tcdb_out.txt` in the same directory. Opening
    the file in a text editor (or importing it into Excel as a tab-delimited file)
    will show the `msg_id` value so that the examiner can correlate the message back
    to the messages table. The decoded payload shows a plain text message (noted as
    type `0` in the database):'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本将在相同的目录中创建一个名为`tcdb_out.txt`的文件。在文本编辑器中打开该文件（或将其导入Excel作为制表符分隔的文件）将显示`msg_id`值，以便审查人员可以将消息与消息表关联起来。解码的负载显示了一个纯文本消息（在数据库中标记为类型`0`）。
- en: '![Decoding Tango messages](img/image00402.jpeg)'
  id: totrans-514
  prefs: []
  type: TYPE_IMG
  zh: '![解码Tango消息](img/image00402.jpeg)'
- en: Note
  id: totrans-515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the message content is now visible in plain text and is preceded by
    the conversation ID. There is also a ton of binary data cluttering up our output;
    this is likely metadata or other information used by Tango. If the message was
    received, the user's name will also be in the output (above it is Tango).
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，消息内容现在以纯文本形式可见，并且前面有对话ID。我们的输出中还有大量的二进制数据，这很可能是Tango使用的元数据或其他信息。如果消息已收到，用户的姓名也将显示在输出中（上面是Tango）。
- en: 'There are other message types worth looking at, also. Here is a decoded payload
    entry for a video message:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他值得关注的消息类型。这是视频消息的解码负载条目：
- en: '![Decoding Tango messages](img/image00403.jpeg)'
  id: totrans-518
  prefs: []
  type: TYPE_IMG
  zh: '![解码Tango消息](img/image00403.jpeg)'
- en: Note that with the video message, we can see two URLs. They are both public,
    meaning anyone with the link can access them. The URL ending in thumbnail is a
    thumbnail of the video, while the other URL will download the complete video in
    the `.mp4` format. The path to the SD card and filename for the image is also
    shown.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于视频消息，我们可以看到两个URL。它们都是公开的，意味着任何人都可以访问它们。以缩略图结尾的URL是视频的缩略图，而另一个URL将以`.mp4`格式下载完整的视频。还显示了图片的SD卡路径和文件名。
- en: Image and audio messages are stored in a very similar format and contain URLs
    to either view or download the file. They also contain the path to the file on
    the SD card.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 图像和音频消息以非常相似的格式存储，并包含URL以查看或下载文件。它们还包含文件在SD卡上的路径。
- en: 'Here is a sample location message:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例位置消息：
- en: '![Decoding Tango messages](img/image00404.jpeg)'
  id: totrans-522
  prefs: []
  type: TYPE_IMG
  zh: '![解码Tango消息](img/image00404.jpeg)'
- en: This time, we can see the exact coordinates the user was at as well as the address.
    Again, a path on the SD card is also present and will show the map view of the
    location. As with other message types, a received message would also show the
    sender's name.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们可以看到用户所在的确切坐标以及地址。同样，SD卡上的路径也存在，并将显示位置的地图视图。与其他消息类型一样，接收到的消息也会显示发送者的姓名。
- en: 'Finally, let''s take a look at the `userinfo.xml.db` database. Here is what
    it looks like before being decoded properly:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看看`userinfo.xml.db`数据库。这是在正确解码之前的样子：
- en: '![Decoding Tango messages](img/image00405.jpeg)'
  id: totrans-525
  prefs: []
  type: TYPE_IMG
  zh: '![解码Tango消息](img/image00405.jpeg)'
- en: 'We wrote another script very similar to the first to parse the `userinfo.xml.db`
    database:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了另一个与第一个非常相似的脚本来解析`userinfo.xml.db`数据库：
- en: '[PRE2]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The only difference in the code is that the filenames, table names, and values
    changed. This time, both the columns in the database are base64 encoded. Again,
    the code can be run by placing it in the same location as `userinfo.xml.db` and
    running it using the following command:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中唯一的区别是文件名、表名和值发生了变化。这一次，数据库中的两列都是base64编码的。同样，可以通过将代码放在与`userinfo.xml.db`相同的位置并使用以下命令运行它来运行代码：
- en: '[PRE3]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the relevant portion of the resulting output file, showing the personal
    data the user used to register the account:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出文件的相关部分，显示用户用于注册账户的个人数据：
- en: '![Decoding Tango messages](img/image00406.jpeg)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![解码Tango消息](img/image00406.jpeg)'
- en: Further down in the output, there is also a list of all of the user's contacts
    who use Tango. The output also includes the contacts' names and phone numbers.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的更下方，还有一个使用Tango的用户联系人列表。输出还包括联系人的姓名和电话号码。
- en: WhatsApp analysis
  id: totrans-533
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WhatsApp分析
- en: WhatsApp is a popular chat-/video-messaging service with over 500,000,000 downloads
    in Google Play.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: WhatsApp是一款流行的聊天/视频消息服务，在Google Play上已经有超过5亿次下载。
- en: 'Package name: `com.whatsapp`'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 包名：`com.whatsapp`
- en: 'Version: 2.11.498'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：2.11.498
- en: 'Files of interest:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/files/`'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/`'
- en: '`Avatars/`'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Avatars/`'
- en: '`me`'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`me`'
- en: '`me.jpeg`'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`me.jpeg`'
- en: '`/shared_prefs/`'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/`'
- en: '`RegisterPhone.xml`'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RegisterPhone.xml`'
- en: '`VerifySMS.xml`'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerifySMS.xml`'
- en: '`/databases/`'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/`'
- en: '`msgstore.db`'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msgstore.db`'
- en: '`wa.db`'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wa.db`'
- en: '`/sdcard/WhatsApp/`'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/WhatsApp/`'
- en: '`Media/`'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Media/`'
- en: '`Databases/`'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Databases/`'
- en: The `/files/avatars` directory contains thumbnails of the profile pictures of
    contacts that use the app, and `me.jpg` is a full-size version of the user's profile
    picture. The `me` file contains the phone number associated with the account
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '`/files/avatars`目录包含使用该应用的联系人的个人资料图片的缩略图，`me.jpg`是用户个人资料图片的全尺寸版本。`me`文件包含与账户关联的电话号码'
- en: The phone number associated with the account can also be recovered in `/shared_prefs/RegisterPhone.xml`.
    The `/shared_prefs/VerifySMS.xml` file shows the time that the account was verified
    (in the Linux epoch format, of course), indicating when the user first began using
    the app.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 与账户关联的电话号码也可以在`/shared_prefs/RegisterPhone.xml`中恢复。`/shared_prefs/VerifySMS.xml`文件显示了账户验证的时间（当然是以Linux纪元格式），指示用户首次开始使用该应用的时间。
- en: 'The `msgstore.db` database, like it sounds, contains messaging data:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '`msgstore.db`数据库，顾名思义，包含消息数据：'
- en: '| Table | Description |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `chat_list` | The `key_remote_jid` column shows each account the user has
    communicated with. The value in the table is the remote user''s phone number.
    For example, if the value is `13218675309@s.whatsapp.net`, the remote user''s
    number is `1-321-867-5309`. |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| `chat_list` | `key_remote_jid`列显示用户与之通信的每个账户。表中的值是远程用户的电话号码。例如，如果值是`13218675309@s.whatsapp.net`，则远程用户的号码是`1-321-867-5309`。
    |'
- en: '| `group_participants` | This contains metadata about group chats. |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| `group_participants` | 这包含有关群聊的元数据。 |'
- en: '| `messages` | This shows all the message data. Once again, the `key_remote_jid`
    field identifies the remote sender. The `key_from_me` value indicates the direction
    of the message (`0` = received, and `1` = sent). The data column contains the
    text of messages, and timestamp is the sent or received time in the Linux epoch
    format.For attachments, `media_mime_type` identifies the file format. The `media_size`
    and `media_name` columns should be self-explanatory. If the attachment had a caption,
    the text would be shown in the `media_caption` column. If the attachment was a
    location, the `latitude` and `longitude` columns would be populated appropriately.
    The `thumb_image` column has a lot of useless data in it, but also contains the
    path of the attachment on the device. The `raw_data` column contains thumbnails
    for images and videos. |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| `messages` | 这显示了所有消息数据。再次，`key_remote_jid`字段标识了远程发送者。`key_from_me`值表示消息的方向（`0`
    = 接收，`1` = 发送）。数据列包含消息的文本，时间戳是发送或接收时间，以Linux纪元格式表示。对于附件，`media_mime_type`标识文件格式。`media_size`和`media_name`列应该是不言自明的。如果附件有标题，文本将显示在`media_caption`列中。如果附件是位置，则`latitude`和`longitude`列将适当填充。`thumb_image`列中包含大量无用的数据，但也包含设备上附件的路径。`raw_data`列包含图像和视频的缩略图。
    |'
- en: 'The `wa.db` database is used to store contact information:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '`wa.db`数据库用于存储联系人信息：'
- en: '| Table | Description |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `wa_contacts` | Like other apps, WhatsApp scrapes and stores the user''s
    entire phone book and stores the information in its own database. It contains
    the contacts'' names and phone numbers, as well as their statuses if the contacts
    are WhatsApp users. |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| `wa_contacts` | 与其他应用程序一样，WhatsApp会抓取并存储用户的整个电话簿，并将信息存储在自己的数据库中。它包含联系人的姓名和电话号码，以及如果联系人是WhatsApp用户，则包含他们的状态。
    |'
- en: The SD card is a treasure trove of WhatsApp data. The `/sdcard/WhatsApp/Media`
    folder contains a folder for each type of media (Audio, Calls, Images, Video,
    and Voice Notes), and stores all attachments of that type in the folder. Sent
    media is stored in a directory called, unimaginatively, `Sent`. Received media
    is simply stored in the root of the folder.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡是WhatsApp数据的宝库。`/sdcard/WhatsApp/Media`文件夹包含每种类型媒体的文件夹（音频、通话、图像、视频和语音备忘录），并将该类型的所有附件存储在文件夹中。发送的媒体存储在一个名为`Sent`的目录中。接收的媒体简单地存储在文件夹的根目录中。
- en: The `Databases` directory is an even greater source of information. WhatsApp
    makes a backup of `msgstore.db` nightly and stores the backups here. This allows
    an examiner to see historical data that may have been deleted. If I delete a chat
    today, but you look at a backup from yesterday, you would be able to access the
    data I deleted. The app is even kind enough to put the date in the filename, for
    example, `msgstore-2015-01-21.1.db`. The only catch is that these backups are
    encrypted!
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '`Databases`目录是更多信息的一个更大的来源。WhatsApp每晚都会备份`msgstore.db`并将备份存储在这里。这允许检查员查看可能已被删除的历史数据。如果我今天删除了一个聊天，但你查看了昨天的备份，你就可以访问我删除的数据。该应用程序甚至很友好地将日期放在文件名中，例如`msgstore-2015-01-21.1.db`。唯一的问题是这些备份是加密的！'
- en: Decrypting WhatsApp backups
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解密WhatsApp备份
- en: Luckily, there is a tool available to decrypt the backups. It can be found here,
    along with detailed installation instructions at [http://forum.xda-developers.com/showthread.php?t=1583021](http://forum.xda-developers.com/showthread.php?t=1583021).
    Unfortunately, it hasn't been updated in some time and doesn't seem to work on
    newer versions of the app.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个可用于解密备份的工具。它可以在这里找到，并附有详细的安装说明：[http://forum.xda-developers.com/showthread.php?t=1583021](http://forum.xda-developers.com/showthread.php?t=1583021)。不幸的是，它已经有一段时间没有更新了，并且似乎无法在应用程序的新版本上运行。
- en: We are not aware of an easy, automated extraction tool for newer versions of
    WhatsApp. However, with the version of WhatsApp we tested, we had great success
    using the instructions at [http://forum.xda-developers.com/android/apps-games/how-to-decode-whatsapp-crypt8-db-files-t2975313](http://forum.xda-developers.com/android/apps-games/how-to-decode-whatsapp-crypt8-db-files-t2975313).
    Note that this must be done on a Linux computer. Once the steps have been successfully
    followed, the result should be a database identical to `msgstore.db` explained
    earlier.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道有没有一个适用于WhatsApp新版本的简单自动提取工具。然而，对于我们测试的WhatsApp版本，我们使用了[http://forum.xda-developers.com/android/apps-games/how-to-decode-whatsapp-crypt8-db-files-t2975313](http://forum.xda-developers.com/android/apps-games/how-to-decode-whatsapp-crypt8-db-files-t2975313)上的说明取得了巨大成功。请注意，这必须在Linux计算机上完成。一旦成功完成这些步骤，结果应该是一个与之前解释的`msgstore.db`相同的数据库。
- en: This is possible because WhatsApp stores the decryption key on the device, in
    the `/files` directory.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，因为WhatsApp将解密密钥存储在设备的`/files`目录中。
- en: Note
  id: totrans-569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data storage method 7 is using encrypted files.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储方法7使用加密文件。
- en: Kik analysis
  id: totrans-571
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kik分析
- en: Kik is a messaging app with over 50,000,000 downloads from the Play Store.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: Kik是一个拥有超过5000万次下载量的消息应用程序。
- en: 'Package name: `kik.android`'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包名称：`kik.android`
- en: 'Version: 7.9.0'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：7.9.0
- en: 'Files of interest:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: '`/cache/`'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/cache/`'
- en: '`chatPicsBig/`'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chatPicsBig/`'
- en: '`contentpics/`'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contentpics/`'
- en: '`profPics/`'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profPics/`'
- en: '`/files/staging/thumbs`'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/staging/thumbs`'
- en: '`/shared_prefs/KikPreferences.xml`'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/KikPreferences.xml`'
- en: '`/sdcard/Kik/`'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/Kik/`'
- en: '`/databases/kikDatabase.db`'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/databases/kikDatabase.db`'
- en: The `chatPicsBig` and `contentpics` directories in `/cache` contain images that
    were sent and received with the application. The files in `contentpics` contain
    what appears to be Kik metadata embedded before the image. The `.jpg` has to be
    carved out of these files. In our testing, all of the files in `contentpics` were
    also stored in `chatPicsBig`, though this may change with more extensive app usage.
    The user's profile picture is found in the `/profPics` directory.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '`/cache`目录中的`chatPicsBig`和`contentpics`目录包含使用该应用程序发送和接收的图像。`contentpics`中的文件包含了在图像之前嵌入的Kik元数据。`.jpg`必须从这些文件中切割出来。在我们的测试中，`contentpics`中的所有文件也存储在`chatPicsBig`中，尽管这可能会随着更广泛的应用程序使用而改变。用户的个人资料图片可以在`/profPics`目录中找到。'
- en: Note
  id: totrans-585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data storage method 8 is using basic steganography, which means, a file is stored
    within a larger file.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储方法8使用基本隐写术，这意味着一个文件存储在一个更大的文件中。
- en: The `/files/staging/thumbs` directory contains thumbnails of images sent and
    received with the application. Our testing found the same images in this location
    as the `/cache` directories, but again, it is possible this would vary with more
    extensive application usage.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '`/files/staging/thumbs`目录包含使用该应用程序发送和接收的图像的缩略图。我们的测试发现这个位置中的图像与`/cache`目录中的图像相同，但是可能随着更广泛的应用程序使用而有所不同。'
- en: The `KikPreferences.xml` file in `/shared_prefs` shows the user's username and
    e-mail address used with the application. Interestingly, it also contains an unsalted
    SHA1 hash of the user's password.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '`/shared_prefs`中的`KikPreferences.xml`文件显示了用户在应用程序中使用的用户名和电子邮件地址。有趣的是，它还包含了用户密码的未加盐的SHA1哈希。'
- en: The `/sdcard/Kik` directory contains full-sized images that were sent and received
    in the application. The filenames can be correlated with `messagesTable` in the
    `kikDatabase.db` database to identify which message contained the image.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`/sdcard/Kik`目录包含了在应用程序中发送和接收的全尺寸图像。文件名可以与`kikDatabase.db`数据库中的`messagesTable`相关联，以确定哪条消息包含了该图像。'
- en: 'The `kikDatabase.db` database contains all of the messaging data from the application
    stored in the following tables:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '`kikDatabase.db`数据库包含了应用程序中所有的消息数据，存储在以下表中：'
- en: '| Table | Description |'
  id: totrans-591
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-592
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `KIKContentTable` | This table contains metadata about sent and received
    images. Each message is assigned a unique `content_id` value that corresponds
    to the filenames in the `sdcard/Kik` directory. The preview and icon values for
    each image correspond to the filenames found at `/files/staging/thumbs`. Each
    image also contains a `file-URL` value. This is a public URL that can be accessed
    to view the file. |'
  id: totrans-593
  prefs: []
  type: TYPE_TB
  zh: '| `KIKContentTable` | 这个表包含有关发送和接收图像的元数据。每条消息都被分配一个唯一的`content_id`值，对应于`sdcard/Kik`目录中的文件名。每个图像的预览和图标值对应于在`/files/staging/thumbs`找到的文件名。每个图像还包含一个`file-URL`值。这是一个公共URL，可以访问以查看文件。|'
- en: '| `KIKcontactsTable` | This table shows the `user_name` and `display_name`
    values for each contact. The `in_roster` value appears to be set for contacts
    the user has specifically added (if it is set to `1`). Contacts with an `in_roster`
    value of `0` appear to be default contacts added automatically. The `jid` column
    is a unique value for each contact. |'
  id: totrans-594
  prefs: []
  type: TYPE_TB
  zh: '| `KIKcontactsTable` | 这个表显示了每个联系人的`user_name`和`display_name`值。`in_roster`值似乎是为用户专门添加的联系人设置的（如果设置为`1`）。`in_roster`值为`0`的联系人似乎是自动添加的默认联系人。`jid`列是每个联系人的唯一值。'
- en: '| `messagesTable` | This table contains all data for messages sent and received
    with the app. The `body` column shows the text data sent in a message. The `partner_jid`
    value can be correlated back to the `jid` column in `KIKcontactTable` to identify
    the remote user. The `was_me` column is used to indicate the direction of the
    message (`0` = sent, and `1` = received). The `read_state` column shows whether
    the message has been read or not; `500` = read and `400` = unread. The timestamp,
    yet again, is in the Linux epoch format. The `content_id` column is populated
    for message attachments and can be correlated back to `KIKContentTable` for more
    information. |'
  id: totrans-595
  prefs: []
  type: TYPE_TB
  zh: '| `messagesTable` | 这个表包含了使用该应用程序发送和接收的所有消息的数据。`body`列显示了消息中发送的文本数据。`partner_jid`值可以与`KIKcontactTable`中的`jid`列相关联，以识别远程用户。`was_me`列用于指示消息的方向（`0`
    = 发送，`1` = 接收）。`read_state`列显示消息是否已读；`500` = 已读，`400` = 未读。时间戳再次以Linux纪元格式显示。`content_id`列用于消息附件，并可以与`KIKContentTable`相关联以获取更多信息。|'
- en: WeChat analysis
  id: totrans-596
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微信分析
- en: WeChat is a messaging app with over 100,000,000 downloads in the Play Store.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 微信是一个在Play商店中有超过1亿次下载的消息应用程序。
- en: 'Package name: `com.tencent.mm`'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 包名：`com.tencent.mm`
- en: 'Version: `6.0.2`'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 版本：`6.0.2`
- en: 'Files of interest:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 感兴趣的文件：
- en: Note
  id: totrans-601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some of the following paths contain an asterisk (*). This is used to indicate
    a unique string that will differ for each account. Our device had `7f804fdbf79ba9e34e5359fc5df7f1eb`
    in place of the asterisk.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一些路径包含星号（*）。这用于表示一个唯一的字符串，每个帐户都不同。我们的设备在星号的位置有`7f804fdbf79ba9e34e5359fc5df7f1eb`。
- en: '`/files/host/*.getdns2`'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/files/host/*.getdns2`'
- en: '`/shared_prefs/`'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/shared_prefs/`'
- en: '`com.tencent.mm_preferences.xml`'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.tencent.mm_preferences.xml`'
- en: '`system_config_prefs.xml`'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system_config_prefs.xml`'
- en: '`/sdcard/tencent/MicroMsg/`'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/tencent/MicroMsg/`'
- en: '`diskcache/`'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`diskcache/`'
- en: '`WeChat/`'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WeChat/`'
- en: '`/sdcard/tencent/MicroMsg/*/`'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/sdcard/tencent/MicroMsg/*/`'
- en: '`image2/`'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image2/`'
- en: '`video/`'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`video/`'
- en: '`voice2/`'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`voice2/`'
- en: '`/MicroMsg/`'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/MicroMsg/`'
- en: '`CompatibleInfo.cfg`'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompatibleInfo.cfg`'
- en: '`*/EnMicroMsg.db`'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*/EnMicroMsg.db`'
- en: The `*.getdns2` files found in `/files/host` can be opened as text files or
    in a hex editor. There is a section called [`clientip`] that shows the IP address
    from which the user connected as well as the time of the connection in the Linux
    epoch format. Our device contained three of these files to show three different
    connections, though increased application usage may generate more than three of
    these files.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/files/host`中找到的`*.getdns2`文件可以作为文本文件或十六进制编辑器中打开。有一个名为[`clientip`]的部分，显示用户连接的IP地址以及连接时间的Linux纪元格式。我们的设备包含了三个这样的文件，显示了三次不同的连接，尽管增加的应用程序使用可能会生成超过三个这样的文件。
- en: The `com.tencent.mm_preferences.xml` file in `/shared_prefs` records the device's
    phone number in the `login_user_name` field. The `system_config_prefs.xml` file
    contains the path to the user's profile picture on the device as well as a `default_uin`
    value that will be needed later.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '`/shared_prefs`中的`com.tencent.mm_preferences.xml`文件记录了设备的电话号码在`login_user_name`字段中。`system_config_prefs.xml`文件包含了用户在设备上的个人资料图片的路径，以及以后需要的`default_uin`值。'
- en: The SD card contains a wealth of WeChat data. The `/tencent/MicroMsg/diskcache`
    directory contained an image that was never used with the application. We think
    it was put there when attaching a different image as WeChat loads a view of many
    images from the device's gallery. The `/WeChat` directory within `/sdcard/tencent/MicroMsg`
    contained images sent from the device.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: SD卡包含大量的微信数据。`/tencent/MicroMsg/diskcache`目录中包含一个从未在应用程序中使用过的图像。我们认为当附加不同的图像时，它被放在那里，因为微信从设备的图库加载了许多图像的视图。`/sdcard/tencent/MicroMsg`目录中的`/WeChat`目录包含从设备发送的图像。
- en: 'The `/video`, `/voice`, and `/voice2` folders within `/sdcard/tencent/MicroMsg/*`
    contain exactly what they say: video and voice files sent using the app.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '`/video`，`/voice`和`/voice2`文件夹在`/sdcard/tencent/MicroMsg/*`中包含确切的内容：使用该应用程序发送的视频和语音文件。'
- en: WeChat is fairly unique, in that, it does not utilize a `/databases` directory
    within the app's directory structure. `MicroMsg` is its equivalent. `CompatibleInfo.cfg`
    contains the device's IMEI, which will be useful later.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 微信相当独特，因为它在应用程序的目录结构中不使用`/databases`目录。`MicroMsg`是它的等价物。`CompatibleInfo.cfg`包含设备的IMEI，这将在以后有用。
- en: 'The `*` directory within `/MicroMsg` contains the `EnMicroMsg.db` database.
    There''s only one problem: the database is encrypted using **SQLCipher**! SQLCipher
    is an open source extension for SQLite that encrypts the entire database. Luckily,
    like other apps that use encryption that we''ve seen, the key to decrypting the
    file is on the device.'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '`*`目录在`/MicroMsg`中包含`EnMicroMsg.db`数据库。只有一个问题：数据库使用**SQLCipher**加密！SQLCipher是SQLite的一个开源扩展，可以加密整个数据库。幸运的是，就像我们看到的其他使用加密的应用程序一样，解密文件的密钥就在设备上。'
- en: Note
  id: totrans-623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data storage method 9 is using SQLCipher, which involves full-database encryption.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储方法9使用了SQLCipher，涉及整个数据库的加密。
- en: Decrypting the WeChat EnMicroMsg.db database
  id: totrans-625
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解密微信EnMicroMsg.db数据库
- en: Fortunately for us, Forensic Focus has an excellent article on doing exactly
    this at [http://articles.forensicfocus.com/2014/10/01/decrypt-wechat-enmicromsgdb-database/](http://articles.forensicfocus.com/2014/10/01/decrypt-wechat-enmicromsgdb-database/).
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说幸运的是，Forensic Focus在[http://articles.forensicfocus.com/2014/10/01/decrypt-wechat-enmicromsgdb-database/](http://articles.forensicfocus.com/2014/10/01/decrypt-wechat-enmicromsgdb-database/)上有一篇关于如何做到这一点的优秀文章。
- en: They even provide a Python script to do the work for us at [https://gist.github.com/fauzimd/8cb0ca85ecaa923df828/download#](https://gist.github.com/fauzimd/8cb0ca85ecaa923df828/download#).
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 他们甚至提供了一个Python脚本来为我们完成这项工作[https://gist.github.com/fauzimd/8cb0ca85ecaa923df828/download#](https://gist.github.com/fauzimd/8cb0ca85ecaa923df828/download#)。
- en: 'To run the Python script, simply put the EnMicroMsg.db file and the system_config_prefs.xml
    files in the same directory as the script and, in the command-line, type:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行Python脚本，只需将EnMicroMsg.db文件和system_config_prefs.xml文件放在与脚本相同的目录中，并在命令行中输入：
- en: '[PRE4]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The script will then prompt you for the **International Mobile Station Equipment
    Identity** (**IMEI**) of the device. This can be found in the `/MicroMsg/CompatibleInfo.cfg`
    file, printed somewhere on the device (behind the battery, on the SIM card tray
    or etched on the back of the device), or by typing `*#06#` in the phone dialer.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 然后脚本将提示您输入设备的**国际移动台设备识别码**（**IMEI**）。这可以在`/MicroMsg/CompatibleInfo.cfg`文件中找到，打印在设备的某个地方（在电池后面，SIM卡托盘上或在设备的背面上），或者通过在手机拨号器中输入`*#06#`来找到。
- en: The script should run. Place a file called `EnMicroMsg-decrypted.db` in the
    directory.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本应该运行。在目录中放置一个名为`EnMicroMsg-decrypted.db`的文件。
- en: 'Finally, we can now examine the `EnMicroMsg-decrypted.db` database with respect
    to the following tables stored in it:'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在可以检查`EnMicroMsg-decrypted.db`数据库，以了解其中存储的以下表：
- en: '| Table | Description |'
  id: totrans-633
  prefs: []
  type: TYPE_TB
  zh: '| 表 | 描述 |'
- en: '| --- | --- |'
  id: totrans-634
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ImgInfo2` | This contains path information for sent and received images.
    The `bigImgPath` column contains the filename for the image. This can be searched
    on the SD card to find the picture. Alternatively, images are stored in the `/sdcard/tencent/MicroMsg/*/image2`
    directory in folders that correspond to the filename. For example, the file named
    `3b9edb119e04869ecd7d1b21a10aa59f.jpg` can be found in the `image2` directory
    in the `/3b/9e` path. The folders are broken down by the first 2 bytes of the
    name and then by the second 2 bytes of the name. The `thumbImgPath` column contains
    the name of thumbnails for the images. |'
  id: totrans-635
  prefs: []
  type: TYPE_TB
  zh: '| `ImgInfo2` | 这包含了发送和接收图像的路径信息。`bigImgPath`列包含图像的文件名。这可以在SD卡上搜索以找到图片。或者，图像存储在`/sdcard/tencent/MicroMsg/*/image2`目录中，这些目录对应于文件名。例如，名为`3b9edb119e04869ecd7d1b21a10aa59f.jpg`的文件可以在`/3b/9e`路径的`image2`目录中找到。这些文件夹按名称的前2个字节和名称的后2个字节进行分解。`thumbImgPath`列包含图像缩略图的名称。'
- en: '| `message` | This contains all the message information for the app. The `isSend`
    column indicates the message direction (`0` = received, `1` = sent). The `createTime`
    table is the timestamp of the message, in the Linux epoch format. The `talker`
    column contains a unique ID for the remote user. This can be correlated with the
    `rcontact` table to identify the remote user. The `content` column shows the data
    of messages sent as text and identifies video calls as "voip_content_voice". The
    `imgPath` column contains the path to image thumbnails, which can be correlated
    with the `ImgInfo2` table to locate the full-sized images. It also includes filenames
    for audio files, which can be searched for or located in the `/sdcard/tencent/MicroMsg/*/voice2`
    directory. |'
  id: totrans-636
  prefs: []
  type: TYPE_TB
  zh: '| `message` | 这包含了应用程序的所有消息信息。`isSend`列表示消息方向（`0` = 接收，`1` = 发送）。`createTime`表是消息的时间戳，采用Linux纪元格式。`talker`列包含远程用户的唯一ID。这可以与`rcontact`表相关联，以识别远程用户。`content`列显示了以文本形式发送的消息数据，并将视频通话标识为“voip_content_voice”。`imgPath`列包含图像缩略图的路径，可以与`ImgInfo2`表相关联，以定位全尺寸图像。它还包括音频文件的文件名，可以在`/sdcard/tencent/MicroMsg/*/voice2`目录中搜索或定位。'
- en: '| `rcontact` | This contains a list of contacts and includes many that are
    added by default by the app. The `username` column can be correlated with the
    `talker` column in the `message` table. The `nickname` column shows the user''s
    name. The `type` column is an indicator of whether the contact was added manually
    or automatically (`1` = device user, `3` = added by user, and `33` = added by
    app). The exception to this is the user "weixin", which is automatically added,
    but has a type value of `3`. |'
  id: totrans-637
  prefs: []
  type: TYPE_TB
  zh: '| `rcontact` | 这包含了联系人列表，并包括应用程序默认添加的许多联系人。`username`列可以与`message`表中的`talker`列相关联。`nickname`列显示用户的姓名。`type`列指示联系人是手动添加还是自动添加（`1`
    = 设备用户，`3` = 用户添加，`33` = 应用程序添加）。唯一的例外是用户“weixin”，它是自动添加的，但类型值为`3`。'
- en: '| `userinfo` | This table contains information about the user, including their
    name and phone number. |'
  id: totrans-638
  prefs: []
  type: TYPE_TB
  zh: '| `userinfo` | 这个表包含有关用户的信息，包括他们的姓名和电话号码。 |'
- en: Application reverse engineering
  id: totrans-639
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序逆向工程
- en: The vast majority of Android applications are written in Java. In order to truly
    reverse engineer Java code, one should generally be able to engineer Java code
    first. Teaching Java is well beyond the scope of this book. We will, however,
    show a few useful reversing methods that we think will be useful and can be done
    by an average mobile forensic examiner. Many hundreds of tutorials and guides
    have been written online for Android reversing, from the very basic to the highly
    advance.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 绝大多数Android应用程序都是用Java编写的。为了真正逆向工程Java代码，一般应该首先能够编写Java代码。教授Java远远超出了本书的范围。然而，我们将展示一些我们认为会有用并且可以由普通移动取证人员完成的一些有用的逆向方法。已经有数百个关于Android逆向的教程和指南在线撰写，从非常基础的到高级的都有。
- en: Anyone looking for more information on the subject should easily be able to
    find what they are looking for. As always, [www.xda-developers.com](http://www.xda-developers.com)
    is an incredibly useful resource, and entire books have been dedicated to the
    subject. There is also an incredibly detailed, updated list of tools by Ashish
    Bhatia that can be found at [https://github.com/ashishb/android-security-awesome](https://github.com/ashishb/android-security-awesome).
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 任何寻找更多信息的人都应该能够轻松找到他们想要的东西。一如既往，[www.xda-developers.com](http://www.xda-developers.com)是一个非常有用的资源，整本书都致力于这个主题。还有一个由Ashish
    Bhatia制作的非常详细的、更新的工具列表，可以在[https://github.com/ashishb/android-security-awesome](https://github.com/ashishb/android-security-awesome)找到。
- en: Obtaining the application's APK file
  id: totrans-642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取应用程序的APK文件
- en: Applications are installed via `.apk` files. The APK file for an app is stored
    on the device, even after the application is installed (and is removed when an
    app is deleted). This APK contains the compiled Java code for the app, the icons
    and fonts used in the app, and an `AndroidManifest.xml` file that declares the
    permissions the application needs.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序是通过`.apk`文件安装的。应用程序的APK文件存储在设备上，即使应用程序已安装（并且在删除应用程序时删除）。此APK包含应用程序的编译Java代码，应用程序中使用的图标和字体，以及声明应用程序所需权限的`AndroidManifest.xml`文件。
- en: The `APK` file for applications that are installed through Google Play can be
    found in the `/data/app` directory. Another method to find the APK location is
    to use the `adb` shell `pm path <package_name>` command. The APK file for preinstalled
    system applications (that cannot be deleted without root) can be found in the
    /system/app directory. The APK file itself is stored in a directory named after
    its package name, followed by a dash and a number. For example, the package name
    for Kik is `kik.android`, and the APK in `/data/app` is stored as `inkik.android-1`.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Google Play安装的应用程序的`APK`文件可以在`/data/app`目录中找到。查找APK位置的另一种方法是使用`adb` shell
    `pm path <package_name>`命令。无法在没有root权限的情况下删除的预安装系统应用程序的APK文件可以在/system/app目录中找到。APK文件本身存储在以其包名称命名的目录中，后跟破折号和数字。例如，Kik的包名称是`kik.android`，在`/data/app`中的APK存储为`inkik.android-1`。
- en: 'Here is the list of APK directories in `/data/app` for the device we tested:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们测试的设备中`/data/app`中的APK目录列表：
- en: '![Obtaining the application''s APK file](img/image00407.jpeg)'
  id: totrans-646
  prefs: []
  type: TYPE_IMG
  zh: '![获取应用程序的APK文件](img/image00407.jpeg)'
- en: Note that every application we tested has an APK file in this directory, as
    well as many apps that we did not look at.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们测试的每个应用程序在此目录中都有一个APK文件，以及我们没有查看的许多应用程序。
- en: 'Obtaining the APK file is as simple as using the adb pull command. To pull
    the Kik APK, we will use the following command:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 获取APK文件就像使用adb pull命令一样简单。要拉取Kik APK，我们将使用以下命令：
- en: '[PRE5]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This should pull a `lib` directory and a `base.apk` file, which will be in
    the current directory the command was run from:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该拉取一个`lib`目录和一个`base.apk`文件，它将在运行命令的当前目录中：
- en: '![Obtaining the application''s APK file](img/image00408.jpeg)'
  id: totrans-651
  prefs: []
  type: TYPE_IMG
  zh: '![获取应用程序的APK文件](img/image00408.jpeg)'
- en: Disassembling an APK file
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反汇编APK文件
- en: 'For starters, the APK file is actually just a ZIP compressed file. Renaming
    the extension to .zip will allow an examiner to open the container and browse
    the files contained in it:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，APK文件实际上只是一个ZIP压缩文件。将扩展名更改为.zip将允许检查员打开容器并浏览其中包含的文件：
- en: '![Disassembling an APK file](img/image00409.jpeg)'
  id: totrans-654
  prefs: []
  type: TYPE_IMG
  zh: '![反汇编APK文件](img/image00409.jpeg)'
- en: However, you might not be able to view the AndroidManifest.xml file. There are
    many tools and methods to fully disassemble the APK, and these can be found in
    the list we linked to above. Our personal favorite tool, though, is one that allows
    you to simply right-click on the APK and disassemble it (on Windows only). The
    APK_OneClick tool can be found at [http://forum.xda-developers.com/showthread.php?t=873466](http://forum.xda-developers.com/showthread.php?t=873466).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可能无法查看AndroidManifest.xml文件。有许多工具和方法可以完全反汇编APK，这些可以在我们上面链接的列表中找到。不过，我们个人最喜欢的工具是一个允许您简单右键单击APK并对其进行反汇编（仅限Windows）的工具。APK_OneClick工具可以在[http://forum.xda-developers.com/showthread.php?t=873466](http://forum.xda-developers.com/showthread.php?t=873466)找到。
- en: The **Java Runtime Environment** (**JRE**) will have to be installed. It can
    be found at [http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html).
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: Java运行环境（JRE）必须安装。它可以在[http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html)找到。
- en: 'Once the tool and the JRE have been installed, an examiner can simply right-click
    on the APK and select **Disassemble APK and Decode Resources**:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 工具和JRE安装完成后，检查员可以简单右键单击APK并选择**反汇编APK和解码资源**：
- en: '![Disassembling an APK file](img/image00410.jpeg)'
  id: totrans-658
  prefs: []
  type: TYPE_IMG
  zh: '![反汇编APK文件](img/image00410.jpeg)'
- en: 'A pop-up window will appear to show the progress and will disappear if no problems
    are encountered:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出窗口将显示进度，并且如果遇到问题，它将消失：
- en: '![Disassembling an APK file](img/image00411.jpeg)'
  id: totrans-660
  prefs: []
  type: TYPE_IMG
  zh: '![反汇编APK文件](img/image00411.jpeg)'
- en: 'If the disassembly ended successfully, there will now be a folder called `base-disasm`
    in the same directory as the APK. Browsing the directory will show many of the
    same files and folders we saw when the APK was renamed to a `.zip` file:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 如果反汇编成功结束，现在将在与APK相同的目录中有一个名为`base-disasm`的文件夹。浏览目录将显示许多与我们将APK重命名为`.zip`文件时看到的相同的文件和文件夹：
- en: '![Disassembling an APK file](img/image00412.jpeg)'
  id: totrans-662
  prefs: []
  type: TYPE_IMG
  zh: '![反汇编APK文件](img/image00412.jpeg)'
- en: Determining an application's permissions
  id: totrans-663
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定应用程序的权限
- en: Knowing what an app has permission for can be very useful for an examiner. For
    starters, it can help narrow down where data is stored. An app without permission
    to write data to the SD card, for example, won't store any data there. One of
    the most commonly heard defenses when a suspect is caught with illicit material
    is that, of course, the suspect has no idea how it got there and it was placed
    there by a virus. If he says a particular app put that data on his SD card, an
    examiner can show that the app couldn't have done that because it didn't have
    permission to write to the SD card. These are just a few basic examples, but again,
    this is very basic reverse engineering!
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 了解应用程序具有哪些权限对于审查员来说可能非常有用。首先，它可以帮助缩小数据存储的范围。例如，没有权限将数据写入SD卡的应用程序将不会在那里存储任何数据。当嫌疑人被发现携带非法材料时，最常听到的辩护之一是，当然，嫌疑人不知道它是如何出现的，而是被病毒放置在那里的。如果他说某个特定的应用程序将数据放在他的SD卡上，审查员可以证明该应用程序无法这样做，因为它没有权限写入SD卡。这只是一些基本的例子，但再次强调，这是非常基础的逆向工程！
- en: 'The `AndroidManifest.xml` file from the disassembled APK discussed earlier
    will contain the app''s permissions. These are the equivalent of what the user
    is shown and has to approve when the app is installed:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 前面讨论的APK的`AndroidManifest.xml`文件将包含应用程序的权限。这相当于用户在安装应用程序时所看到并需要批准的内容：
- en: '![Determining an application''s permissions](img/image00413.jpeg)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
  zh: '![确定应用程序的权限](img/image00413.jpeg)'
- en: For the specifics of what each permission allows the app to do, Google maintains
    a list at [http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 关于每个权限允许应用程序执行的具体操作，谷歌在[http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html)上维护了一个列表。
- en: Viewing the application's code
  id: totrans-668
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看应用程序的代码
- en: 'To view the application''s code using the APK_OneClick tool, simply right-click
    on the APK and select **Browse Java Code of APK**. Again, a window will pop up
    temporarily showing progress and will disappear if no errors are encountered.
    Once it completes, a Java Decompiler window will appear, allowing the examiner
    to browse through the Java code as follows:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 使用APK_OneClick工具查看应用程序的代码，只需右键单击APK并选择**浏览APK的Java代码**。同样，一个窗口将暂时弹出显示进度，并且如果没有遇到错误，它将消失。完成后，将出现一个Java反编译器窗口，允许审查员浏览Java代码。
- en: '![Viewing the application''s code](img/image00414.jpeg)'
  id: totrans-670
  prefs: []
  type: TYPE_IMG
  zh: '![查看应用程序的代码](img/image00414.jpeg)'
- en: Summary
  id: totrans-671
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has been an in-depth study of specific Android applications, and
    how/where they store their data. We looked at 19 specific applications and discovered
    9 different methods of storing and obfuscating data. Knowing that applications
    store their data in a variety of ways should help an examiner have a better understanding
    of an app's data that they are examining. This knowledge should, hopefully, push
    them to look harder when they can't find data they expect the app to have. An
    examiner has to be able to adapt to the changing world of application analysis.
    As applications constantly update, an examiner has to be able to update their
    own methods and abilities in order to keep up.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 本章对特定的Android应用程序进行了深入研究，以及它们存储数据的方式/位置。我们查看了19个特定的应用程序，并发现了9种不同的存储和混淆数据的方法。知道应用程序以各种方式存储它们的数据应该有助于审查员更好地了解他们正在审查的应用程序的数据。这种知识应该帮助他们在找不到他们期望应用程序具有的数据时更加努力。审查员必须能够适应应用程序分析不断变化的世界。随着应用程序不断更新，审查员必须能够更新自己的方法和能力以跟上步伐。
- en: The next chapter will take a look at several free and open source tools to image
    and analyze Android devices and reverse engineer applications to discover where
    their data is stored.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍几种免费和开源工具，用于对Android设备进行成像和分析，并对应用程序进行逆向工程，以发现它们的数据存储位置。
