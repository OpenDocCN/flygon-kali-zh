["```java\npublic class UDPServer {\n    public UDPServer() {\n        System.out.println(\"UDP Server Started\");\n        ...\n        System.out.println(\"UDP Server Terminating\");\n    }\n\n    public static void main(String[] args) {\n        new UDPServer();\n    }\n}\n```", "```java\n        try (DatagramSocket serverSocket = \n                new DatagramSocket(9003)) {\n            ...\n            }\n        } catch (IOException ex) {\n            //Handle exceptions\n        }\n```", "```java\n        DatagramSocket serverSocket = new DatagramSocket(null); \n        serverSocket.bind(new InetSocketAddress(9003)); \n```", "```java\n        while (true) {\n            byte[] receiveMessage = new byte[1024];\n            DatagramPacket receivePacket = new DatagramPacket(\n                receiveMessage, receiveMessage.length);\n            serverSocket.receive(receivePacket);\n            ...\n        }\n```", "```java\n        String message = new String(receivePacket.getData());\n        System.out.println(\"Received from client: [\" + message\n               + \"]\\nFrom: \" + receivePacket.getAddress());\n```", "```java\n        InetAddress inetAddress = receivePacket.getAddress();\n        int port = receivePacket.getPort();\n        byte[] sendMessage;\n        sendMessage = message.getBytes();\n```", "```java\n        DatagramPacket sendPacket = \n            new DatagramPacket(sendMessage,\n                sendMessage.length, inetAddress, port);\n        serverSocket.send(sendPacket);\n```", "```java\nclass UDPClient {\n    public UDPClient() {\n        System.out.println(\"UDP Client Started\");\n        ...\n        }\n        System.out.println(\"UDP Client Terminating \");\n    }\n\n    public static void main(String args[]) {\n        new UDPClient();\n    }\n}\n```", "```java\n        Scanner scanner = new Scanner(System.in);\n        try (DatagramSocket clientSocket = new DatagramSocket()) {\n            ...\n            }\n            clientSocket.close();\n        } catch (IOException ex) {\n            // Handle exceptions\n        }\n```", "```java\n        InetAddress inetAddress = \n            InetAddress.getByName(\"localhost\");\n        byte[] sendMessage;\n```", "```java\n        while (true) {\n            System.out.print(\"Enter a message: \");\n            String message = scanner.nextLine();\n            if (\"quit\".equalsIgnoreCase(message)) {\n                 break;\n            }\n        ...\n        }\n```", "```java\n            sendMessage = message.getBytes();\n            DatagramPacket sendPacket = new DatagramPacket(\n                sendMessage, sendMessage.length, \n                inetAddress, 9003);\n            clientSocket.send(sendPacket);\n```", "```java\n            byte[] receiveMessage = new byte[1024];\n            DatagramPacket receivePacket = new DatagramPacket(\n                    receiveMessage, receiveMessage.length);\n            clientSocket.receive(receivePacket);\n            String receivedSentence = \n                new String(receivePacket.getData());\n            System.out.println(\"Received from server [\" \n                + receivedSentence + \"]\\nfrom \"\n                + receivePacket.getSocketAddress());\n```", "```java\n        System.out.println(\"Received from client: [\" \n                + message.trim()\n                + \"]\\nFrom: \" + receivePacket.getAddress());\n```", "```java\npublic class UDPEchoServer {\n\n    public static void main(String[] args) {\n        int port = 9000;\n        System.out.println(\"UDP Echo Server Started\");\n        try (DatagramChannel channel = DatagramChannel.open();\n            DatagramSocket socket = channel.socket();){\n                ...\n            }\n        }\n        catch (IOException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\"UDP Echo Server Terminated\");\n    }\n}\n```", "```java\n            SocketAddress address = new InetSocketAddress(port);\n            socket.bind(address);\n```", "```java\n            ByteBuffer buffer = ByteBuffer.allocateDirect(65507);\n```", "```java\n            while (true) {\n                // Get message\n                // Display message\n                // Return message\n            }\n```", "```java\n        SocketAddress client = channel.receive(buffer);\n        buffer.flip();\n```", "```java\n        buffer.mark();\n        System.out.print(\"Received: [\");\n        StringBuilder message = new StringBuilder();\n        while (buffer.hasRemaining()) {\n            message.append((char) buffer.get());\n        }\n        System.out.println(message + \"]\");\n        buffer.reset();\n```", "```java\n        channel.send(buffer, client);\n        System.out.println(\"Sent: [\" + message + \"]\");\n        buffer.clear();\n```", "```java\npublic class UDPEchoClient {\n\n    public static void main(String[] args) {\n        System.out.println(\"UDP Echo Client Started\");\n        try {\n            ...\n        }\n        catch (IOException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\"UDP Echo Client Terminated\");\n    }\n}\n```", "```java\n        SocketAddress remote = \n            new InetSocketAddress(\"127.0.0.1\", 9000);\n```", "```java\n        DatagramChannel channel = DatagramChannel.open();\n        channel.connect(remote);\n```", "```java\n        String message = \"The message\";\n        ByteBuffer buffer = ByteBuffer.allocate(message.length());\n        buffer.put(message.getBytes());\n```", "```java\n        buffer.flip();\n```", "```java\n        channel.write(buffer);\n        System.out.println(\"Sent: [\" + message + \"]\");\n```", "```java\n        buffer.clear();\n        channel.read(buffer);\n        buffer.flip();\n        System.out.print(\"Received: [\");\n        while(buffer.hasRemaining()) {\n            System.out.print((char)buffer.get());\n        }\n        System.out.println(\"]\");\n```", "```java\npublic class UDPMulticastServer {\n\n    public UDPMulticastServer() {\n        System.out.println(\"UDP Multicast Time Server Started\");\n        try {\n            ...\n        } catch (IOException | InterruptedException ex) {\n            // Handle exceptions\n        }\n        System.out.println(\n            \"UDP Multicast Time Server Terminated\");\n    }\n\n    public static void main(String args[]) {\n        new UDPMulticastServer();\n    }\n}\n```", "```java\n    MulticastSocket multicastSocket = new MulticastSocket();\n    InetAddress inetAddress = InetAddress.getByName(\"228.5.6.7\");\n    multicastSocket.joinGroup(inetAddress);\n```", "```java\n    byte[] data;\n    DatagramPacket packet;\n```", "```java\n    while (true) {\n        Thread.sleep(1000);\n        String message = (new Date()).toString();\n        System.out.println(\"Sending: [\" + message + \"]\");\n        data = message.getBytes();\n        packet = new DatagramPacket(data, message.length(), \n                inetAddress, 9877);\n        multicastSocket.send(packet);\n    }\n```", "```java\npublic class UDPMulticastClient {\n\n    public UDPMulticastClient() {\n        System.out.println(\"UDP Multicast Time Client Started\");\n        try {\n            ...\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n\n        System.out.println(\n            \"UDP Multicast Time Client Terminated\");\n    }\n\n    public static void main(String[] args) {\n        new UDPMulticastClient();\n    }\n}\n```", "```java\n    MulticastSocket multicastSocket = new MulticastSocket(9877);\n    InetAddress inetAddress = InetAddress.getByName(\"228.5.6.7\");\n    multicastSocket.joinGroup(inetAddress);\n```", "```java\n    byte[] data = new byte[256];\n    DatagramPacket packet = new DatagramPacket(data, data.length);\n```", "```java\n    while (true) {\n        multicastSocket.receive(packet);\n        String message = new String(\n            packet.getData(), 0, packet.getLength());\n        System.out.println(\"Message from: \" + packet.getAddress() \n            + \" Message: [\" + message + \"]\");\n    }\n```", "```java\n        try {\n            Enumeration<NetworkInterface> networkInterfaces;\n            networkInterfaces = \n                NetworkInterface.getNetworkInterfaces();\n            for (NetworkInterface networkInterface : \n                    Collections.list(networkInterfaces)) {\n                displayNetworkInterfaceInformation(\n                    networkInterface);\n            }\n        } catch (SocketException ex) {\n            // Handle exceptions\n        }\n```", "```java\n    static void displayNetworkInterfaceInformation(\n            NetworkInterface networkInterface) {\n        try {\n            System.out.printf(\"Display name: %s\\n\", \n                networkInterface.getDisplayName());\n            System.out.printf(\"Name: %s\\n\", \n                networkInterface.getName());\n            System.out.printf(\"Supports Multicast: %s\\n\", \n                networkInterface.supportsMulticast());\n            Enumeration<InetAddress> inetAddresses = \n                networkInterface.getInetAddresses();\n            for (InetAddress inetAddress : \n                    Collections.list(inetAddresses)) {\n                System.out.printf(\"InetAddress: %s\\n\", \n                    inetAddress);\n            }\n            System.out.println();\n        } catch (SocketException ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\npublic class UDPDatagramMulticastServer {\n\n    public static void main(String[] args) {\n        try {\n            ...\n            }\n        } catch (IOException | InterruptedException ex) {\n            // Handle exceptions\n        }\n    }\n\n}\n```", "```java\n            System.setProperty(\n                \"java.net.preferIPv6Stack\", \"true\");\n            DatagramChannel channel = DatagramChannel.open();\n            NetworkInterface networkInterface = \n                NetworkInterface.getByName(\"eth0\");\n            channel.setOption(StandardSocketOptions.\n                IP_MULTICAST_IF, \n                networkInterface);\n            InetSocketAddress group = \n                new InetSocketAddress(\"FF01:0:0:0:0:0:0:FC\", \n                        9003);\n```", "```java\n            String message = \"The message\";\n            ByteBuffer buffer = \n                ByteBuffer.allocate(message.length());\n            buffer.put(message.getBytes());\n```", "```java\n            while (true) {\n                channel.send(buffer, group);\n                System.out.println(\"Sent the multicast message: \" \n                    + message);\n                buffer.clear();\n\n                buffer.mark();\n                System.out.print(\"Sent: [\");\n                StringBuilder msg = new StringBuilder();\n                while (buffer.hasRemaining()) {\n                    msg.append((char) buffer.get());\n                }\n                System.out.println(msg + \"]\");\n                buffer.reset();\n\n                Thread.sleep(1000);\n        }\n```", "```java\npublic class UDPDatagramMulticastClient {\n    public static void main(String[] args) throws Exception {\n        System.setProperty(\"java.net.preferIPv6Stack\", \"true\");\n        NetworkInterface networkInterface = \n            NetworkInterface.getByName(\"eth0\");\n        ...\n    }\n}\n```", "```java\n        DatagramChannel channel = DatagramChannel.open()\n                .bind(new InetSocketAddress(9003))\n                .setOption(StandardSocketOptions.IP_MULTICAST_IF, \n                    networkInterface);\n```", "```java\n        InetAddress group = \n            InetAddress.getByName(\"FF01:0:0:0:0:0:0:FC\");\n        MembershipKey key = channel.join(group, networkInterface);\n        System.out.println(\"Joined Multicast Group: \" + key);\n        System.out.println(\"Waiting for a  message...\");\n```", "```java\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        channel.receive(buffer);\n```", "```java\n        buffer.flip();\n        System.out.print(\"Received: [\");\n        StringBuilder message = new StringBuilder();\n        while (buffer.hasRemaining()) {\n            message.append((char) buffer.get());\n        }\n        System.out.println(message + \"]\");\n```", "```java\n        key.drop();\n```", "```java\npublic class AudioUDPServer {\n    private final byte audioBuffer[] = new byte[10000];\n    private TargetDataLine targetDataLine;\n\n    public AudioUDPServer() {\n        setupAudio();\n        broadcastAudio();\n    }\n    ...\n    public static void main(String[] args) {\n        new AudioUDPServer();\n    }\n}\n```", "```java\n    private AudioFormat getAudioFormat() {\n        float sampleRate = 16000F;\n        int sampleSizeInBits = 16;\n        int channels = 1;\n        boolean signed = true;\n        boolean bigEndian = false;\n        return new AudioFormat(sampleRate, sampleSizeInBits, \n            channels, signed, bigEndian);\n    }\n```", "```java\n    private void setupAudio() {\n        try {\n            AudioFormat audioFormat = getAudioFormat();\n            DataLine.Info dataLineInfo = \n                new DataLine.Info(TargetDataLine.class, \n                        audioFormat);\n            targetDataLine =  (TargetDataLine) \n                AudioSystem.getLine(dataLineInfo);\n            targetDataLine.open(audioFormat);\n            targetDataLine.start();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.exit(0);\n        }\n    }\n```", "```java\n    private void broadcastAudio() {\n        try {\n            DatagramSocket socket = new DatagramSocket(8000);\n            InetAddress inetAddress = \n                InetAddress.getByName(\"127.0.0.1\");\n            ...\n        } catch (Exception ex) {\n            // Handle exceptions\n        }\n    }\n```", "```java\n    while (true) {\n        int count = targetDataLine.read(\n            audioBuffer, 0, audioBuffer.length);\n        if (count > 0) {\n            DatagramPacket packet = new DatagramPacket(\n            audioBuffer, audioBuffer.length, inetAddress, 9786);\n            socket.send(packet);\n        }\n    }\n```", "```java\npublic class AudioUDPClient {\n    AudioInputStream audioInputStream;\n    SourceDataLine sourceDataLine;\n    ...\n    public AudioUDPClient() {\n        initiateAudio();\n    }\n\n    public static void main(String[] args) {\n        new AudioUDPClient();\n    }\n}\n```", "```java\n    private void initiateAudio() {\n        try {\n            DatagramSocket socket = new DatagramSocket(9786);\n            byte[] audioBuffer = new byte[10000];\n            ...\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n```", "```java\n    while (true) {\n        DatagramPacket packet\n            = new DatagramPacket(audioBuffer, audioBuffer.length);\n        socket.receive(packet);\n        ...\n    }\n```", "```java\n        try {\n            byte audioData[] = packet.getData();\n            InputStream byteInputStream = \n                new ByteArrayInputStream(audioData);\n            AudioFormat audioFormat = getAudioFormat();\n            audioInputStream =  new AudioInputStream(\n                byteInputStream, \n                audioFormat, audioData.length / \n                audioFormat.getFrameSize());\n            DataLine.Info dataLineInfo = new DataLine.Info(\n                SourceDataLine.class, audioFormat);\n            sourceDataLine = (SourceDataLine) \n                AudioSystem.getLine(dataLineInfo);\n            sourceDataLine.open(audioFormat);\n            sourceDataLine.start();\n            playAudio();\n        } catch (Exception e) {\n            // Handle exceptions\n        }\n```", "```java\n    private void playAudio() {\n        byte[] buffer = new byte[10000];\n        try {\n            int count;\n            while ((count = audioInputStream.read(\n                   buffer, 0, buffer.length)) != -1) {\n                if (count > 0) {\n                    sourceDataLine.write(buffer, 0, count);\n                }\n            }\n        } catch (Exception e) {\n            // Handle exceptions\n        }\n    }\n```"]