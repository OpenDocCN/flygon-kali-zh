- en: Chapter 6. Building the Carousel Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建Carousel应用程序
- en: We have come a long way in our journey to master JavaScript and JSON; it is
    time to get busy and build an end-to-end project that is powered by JSON. In our
    journey, we have come across a variety of concepts such as JavaScript, JSON, the
    use of server-side programming, AJAX, and JSONP. In this photo gallery application,
    let us put all of these to use. We will be building a rotating notification board
    application, which should display the top students for the month. This application
    should provide the Carousel functionality, such as navigational buttons, auto
    play of content, displaying a single item at a given point, and keeping track
    of the first and last piece of content.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在掌握JavaScript和JSON的旅程中走了很长一段路；现在是时候忙起来，构建一个由JSON驱动的端到端项目。在我们的旅程中，我们遇到了各种概念，如JavaScript、JSON、服务器端编程的使用、AJAX和JSONP。在这个照片库应用程序中，让我们把所有这些都用起来。我们将构建一个旋转通知板应用程序，它应该显示本月的顶尖学生。这个应用程序应该提供Carousel功能，如导航按钮、自动播放内容、在给定点显示单个项目，并跟踪第一个和最后一个内容。
- en: Setting up the application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: Let us begin by building a folder that will hold the files for this application.
    This application will need an HTML file that will hold the Carousel; it will need
    a few libraries such as jQuery and jQuery Cycle. We will have to import these
    libraries; we also need a JSON file that holds the data for this exercise. To
    download the jQuery file, please visit [http://www.jquery.com](http://www.jquery.com).
    As we have already observed, jQuery is the most popular JavaScript library available
    to developers. There is a growing community of developers who make jQuery more
    and more popular by the day. We will be using the jQuery Cycle library to power
    our Carousel application. The jQuery Cycle is one the most popular and lightweight
    cycle libraries with numerous features; it can be downloaded from [http://malsup.github.io/jquery.cycle.all.js](http://malsup.github.io/jquery.cycle.all.js).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始建立一个文件夹，用于保存这个应用程序的文件。这个应用程序将需要一个包含Carousel的HTML文件；它将需要一些库，如jQuery和jQuery
    Cycle。我们将不得不导入这些库；我们还需要一个包含这个练习数据的JSON文件。要下载jQuery文件，请访问[http://www.jquery.com](http://www.jquery.com)。正如我们已经观察到的，jQuery是开发人员可用的最流行的JavaScript库。有一个日益增长的开发者社区，他们使jQuery变得越来越受欢迎。我们将使用jQuery
    Cycle库来驱动我们的Carousel应用程序。jQuery Cycle是最受欢迎和轻量级的循环库之一，具有众多功能；它可以从[http://malsup.github.io/jquery.cycle.all.js](http://malsup.github.io/jquery.cycle.all.js)下载。
- en: 'These files have to be in a folder inside your document root; in this project
    we will be working with a live Apache Server, and we will be ingesting the JSON
    feed via AJAX. The following is an example of how the folder should look once
    the files have been added:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件必须在文档根目录内的一个文件夹中；在这个项目中，我们将使用一个实时Apache服务器，并且我们将通过AJAX摄取JSON feed。以下是文件添加后文件夹应该看起来的示例：
- en: '![Setting up the application](img/6034OS_06_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](img/6034OS_06_01.jpg)'
- en: 'Now that we have the libraries arranged in the document root, let us work on
    the basic HTML file that will import these files into the web page, as shown in
    the following screenshot:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在文档根目录中安排好了库，让我们来制作一个基本的HTML文件，将这些文件导入到网页中，如下面的截图所示：
- en: '![Setting up the application](img/6034OS_06_02.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![设置应用程序](img/6034OS_06_02.jpg)'
- en: index-v1.html
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: index-v1.html
- en: This is our initial index web page that will load the JavaScript files onto
    the web page. When this file is fired up via a web browser, both the JavaScript
    libraries have to be loaded and `ready` should be printed onto the console window.
    Now, let's move forward and build our Carousel application. Next in the line of
    requirements is the data file; it will be similar to the `students` JSON feed
    that we have worked with in our previous chapters. Rather than printing them all
    in a single line, we will be loading them into a rotator application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的初始索引网页，将JavaScript文件加载到网页上。当通过Web浏览器启动此文件时，必须加载两个JavaScript库，并且`ready`应该打印到控制台窗口。现在，让我们继续构建我们的Carousel应用程序。接下来的要求是数据文件；它将类似于我们在之前章节中使用的`students`
    JSON feed。我们将把它们加载到旋转应用程序中，而不是将它们全部打印在一行中。
- en: Building the JSON file for the Carousel application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Carousel应用程序构建JSON文件
- en: 'Let us assume that we are an educational institution, and we have a tradition
    of acknowledging the efforts of our students on a monthly basis. We will pick
    the top students from each course for that month, and display their names on our
    notice board rotator application. This notice board rotator application has often
    served as a motivation for other students, who always aim to get themselves onto
    that board. This is the way our educational institution is encouraging the students
    to do well in their courses. The example JSON feed will look like the following
    screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们是一所教育机构，我们有一个传统，即每月承认我们学生的努力。我们将挑选每个课程的顶尖学生，并在我们的通知板旋转应用程序上显示他们的名字。这个通知板旋转应用程序经常作为其他学生的动力，他们总是希望自己能上榜。这是我们教育机构鼓励学生在课程中表现良好的方式。示例JSON
    feed将如下截图所示：
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_03.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![为Carousel应用程序构建JSON文件](img/6034OS_06_03.jpg)'
- en: For our notice board rotator application, we will need basic student information,
    such as the first name, last name, current level of education, and the course
    that they have excelled in.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的通知板旋转应用程序，我们将需要基本的学生信息，如名字、姓氏、当前教育水平和他们擅长的课程。
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_04.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![为Carousel应用程序构建JSON文件](img/6034OS_06_04.jpg)'
- en: index-v2.html
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: index-v2.html
- en: In the preceding screenshot, we are using jQuery's `getJSON()` function to bring
    the JSON feed into the document. When the `index-v2.html` file is loaded into
    the browser, the `students` JSON object array will be loaded onto the console
    window. It is about time to start extracting data from the JSON object, and to
    start embedding them onto the DOM. Let's use the jQuery `each()` function to loop
    over the `students` JSON feed and load the data onto the page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，我们使用jQuery的`getJSON()`函数将JSON数据引入文档中。当`index-v2.html`文件加载到浏览器中时，`students`
    JSON对象数组将加载到控制台窗口上。现在是时候开始从JSON对象中提取数据，并开始将其嵌入到DOM中。让我们使用jQuery的`each()`函数循环遍历`students`
    JSON数据并将数据加载到页面上。
- en: The `each()` function in jQuery is similar to the `foreach()` iterative loop,
    which is available with the popular server-side languages, and the `for in()`
    iterative loop, which is available in the native JavaScript. The `each()` iterator
    takes the data as its first argument, and passes the `each` item in that data
    iteratively as a single key-value pair into a callback. This callback is a collection
    of a number of scripts that are executed on that key-value pair. In this callback,
    we are building the HTML file that will be appended to a `div` element on the
    DOM. We are using this callback to iteratively build the HTML file for all the
    elements that exist in that `students` JSON object.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery中的`each()`函数类似于流行的服务器端语言中提供的`foreach()`迭代循环，以及原生JavaScript中提供的`for in()`迭代循环。`each()`迭代器将数据作为其第一个参数，并将该数据中的每个项作为单个键值对迭代地传递到回调函数中。这个回调是一系列在该键值对上执行的脚本。在这个回调中，我们正在构建将附加到DOM上的`div`元素的HTML文件。我们使用这个回调来迭代地构建`students`
    JSON对象中存在的所有元素的HTML文件。
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_05.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![为Carousel应用程序构建JSON文件](img/6034OS_06_05.jpg)'
- en: index-v3.html
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: index-v3.html
- en: 'In the `index-v3.html` file, we are using the jQuery `each()` function to iterate
    through the `students` JSON feed, and build the HTML file that will display the
    student information, such as the first name, last name, the year of college, and
    the course that they are enrolled in. We are building the dynamic HTML and assigning
    it to the `html` variable. The data in the `html` variable will be added later
    to the `div` element with an ID of `students`. This is shown in the following
    screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index-v3.html`文件中，我们使用jQuery的`each()`函数来遍历`students` JSON数据，并构建将显示学生信息的HTML文件，例如名字，姓氏，大学年级和所注册的课程。我们正在构建动态HTML并将其分配给`html`变量。`html`变量中的数据将稍后添加到ID为`students`的`div`元素中。如下截图所示：
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_06.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![为Carousel应用程序构建JSON文件](img/6034OS_06_06.jpg)'
- en: 'The proceeding screenshot shows the output of the `index-v3.html` body:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了`index-v3.html`主体的输出：
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_07.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![为Carousel应用程序构建JSON文件](img/6034OS_06_07.jpg)'
- en: When the script is loaded into a web browser, the script checks to see if the
    document is ready. Once the document is ready, an AJAX call is made to the server
    to retrieve the JSON data. Once the JSON data is retrieved, each object in the
    `students` JSON object array feed will be passed into the callback that generates
    an HTML `div` element with a class `student`. This repeats until the callback
    is run on the last element, and once the callback is executed on the last element,
    this HTML file will be appended to a `div` element in the HTML with an ID of `students`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本加载到Web浏览器中时，脚本会检查文档是否准备就绪。一旦文档准备就绪，就会向服务器发出AJAX调用以检索JSON数据。检索到JSON数据后，`students`
    JSON对象数组中的每个对象都将传递到生成带有`student`类的HTML `div`元素的回调函数中。这将重复，直到在最后一个元素上执行回调，一旦在最后一个元素上执行回调，此HTML文件将附加到具有ID为`students`的HTML中的`div`元素中。
- en: Creating the Carousel application with jQuery Cycle
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery Cycle创建Carousel应用程序
- en: We have developed a web page that loads all the student data into an HTML file;
    now it is time to build the Carousel application using this data. We will be using
    a jQuery Cycle plugin to rotate the student information on our notice board application.
    The jQuery Cycle is a slideshow plugin that supports various types of transition
    effects on multiple browsers. Effects such as `fade`, `toss`, `wipe`, `zoom`,
    `scroll`, and `shuffle` are available. The plugin also supports the interesting
    pause on hover feature; click triggers and response callbacks are also supported.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经开发了一个网页，将所有学生数据加载到HTML文件中；现在是时候使用这些数据构建Carousel应用程序了。我们将使用jQuery Cycle插件来在我们的公告板应用程序上旋转学生信息。jQuery
    Cycle是一个幻灯片插件，支持多种类型的过渡效果在多个浏览器上。可用的效果包括`fade`、`toss`、`wipe`、`zoom`、`scroll`和`shuffle`。该插件还支持有趣的悬停暂停功能；还支持点击触发和响应回调。
- en: For our Carousel example, let's keep it simple and use the basic options, such
    as a fade effect to rotate the students, enabling the pause so that whenever a
    user hovers onto the cycle, the rotator application is paused to display the information
    of the current student. Finally, we will be setting the speed and the timeout
    values that will determine how much time it will take to transition from one student
    to another.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Carousel示例，让我们保持简单，使用基本选项，例如淡入淡出效果来旋转学生，启用暂停，以便用户悬停在循环上时，旋转应用程序会暂停以显示当前学生的信息。最后，我们将设置速度和超时值，以确定从一个学生过渡到另一个学生需要多长时间。
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_08.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Cycle创建Carousel应用程序](img/6034OS_06_08.jpg)'
- en: index-v4.html
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: index-v4.html
- en: 'In the preceding screenshot, we set up the `cycle` plugin, and added the `cycle`
    plugin to the `div` element of `students`. The `cycle` plugin takes a JSON object
    as its parameter, to add the rotator functionality to a `div` element. In this
    JSON object we have added four properties: `fx`, `pause`, `speed`, and `timeout`.
    `fx` determines the effect that is performed on the `html` element. `fade` is
    a prominent effect that is used for the `cycle` plugin. The other popular effects
    that are supported by the jQuery Cycle plugin are shuffle, zoom, turndown, scrollRight,
    and curtainX. The second property we are using is the `pause` property, this determines
    whether the rotation has stopped when the user hovers onto the `rotator` element;
    it takes a true and false value to determine if the rotation can be paused or
    not. We could either supply a Boolean value such as True or False, or pass one
    or zero that signify True and False respectively. The next two properties are
    `speed` and `timeout`; they determine the speed with which the rotation occurs
    and how much time it will take before the next item is displayed. When the web
    page with the updated script is loaded into a web browser, the whole `students`
    object is parsed into a local JavaScript string variable and is appended to the
    DOM, and only the first element in that rotator object is displayed while the
    rest of them are hidden. This functionality is handled behind-the-scenes by the
    `cycle` plugin. The following screenshot displays a Carousel generated from the
    earlier code sample:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们设置了`cycle`插件，并将`cycle`插件添加到`students`的`div`元素中。`cycle`插件以JSON对象作为其参数，以向`div`元素添加旋转功能。在这个JSON对象中，我们添加了四个属性：`fx`、`pause`、`speed`和`timeout`。`fx`确定在`html`元素上执行的效果。`fade`是`cycle`插件中常用的效果。jQuery
    Cycle插件支持的其他流行效果包括shuffle、zoom、turndown、scrollRight和curtainX。我们使用的第二个属性是`pause`属性，它确定当用户悬停在`rotator`元素上时旋转是否已停止；它接受一个true和false值来确定旋转是否可以暂停。我们可以提供布尔值，如True或False，或传递一个表示True和False的1或0。接下来的两个属性是`speed`和`timeout`；它们确定旋转发生的速度以及在显示下一项之前需要多长时间。当包含更新脚本的网页加载到Web浏览器中时，整个`students`对象被解析为本地JavaScript字符串变量，并附加到DOM，只有该旋转对象中的第一个元素被显示，而其余元素被隐藏。这个功能由`cycle`插件在后台处理。下面的截图显示了从之前的代码示例生成的Carousel：
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_09.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Cycle创建Carousel应用程序](img/6034OS_06_09.jpg)'
- en: 'Let us enhance the user experience of this page by adding the earlier and following
    handlers to give the users custom controllers to handle the rotator functionality,
    as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加早期和后续处理程序来增强此页面的用户体验，以便为用户提供自定义控制器来处理旋转功能，如下面的截图所示：
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_10.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Cycle创建Carousel应用程序](img/6034OS_06_10.jpg)'
- en: index-v5.html
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: index-v5.html
- en: 'In the `cycle` object, we are adding two new properties called `prev` and `next`.
    The values for the `prev` and `next` properties will be the HTML `id` attributes
    of elements that are on the DOM. The HTML file has to be modified as follows in
    order to handle this change:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`cycle`对象中，我们添加了两个名为`prev`和`next`的新属性。`prev`和`next`属性的值将是DOM上存在的元素的HTML `id`属性。为了处理这一变化，HTML文件必须修改如下：
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_11.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Cycle创建Carousel应用程序](img/6034OS_06_11.jpg)'
- en: In the preceding screenshot, we have added two anchor element with `id` values
    of `prev` and `next` that are being referenced in the `cycle` object.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们添加了两个`id`值为`prev`和`next`的锚元素，这些元素在`cycle`对象中被引用。
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_12.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用jQuery Cycle创建Carousel应用程序](img/6034OS_06_12.jpg)'
- en: The **Prev** and **Next** links that are shown in the preceding screenshot are
    going to handle the rotation of our notice board rotation application. This is
    a quick way of building a Carousel application that is powered by jQuery and JSON.
    This example can used to build more complex Carousel applications that can contain
    images and videos for the photo and video gallery Carousel applications respectively.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中显示的**Prev**和**Next**链接将处理我们的公告板旋转应用程序的旋转。这是使用jQuery和JSON构建Carousel应用程序的快速方法。这个示例可以用来构建更复杂的Carousel应用程序，可以分别包含图片和视频，用于照片和视频库Carousel应用程序。
- en: Summary
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we put our JavaScript, jQuery, and JSON knowledge to work, and
    built up a neat little Carousel notice board rotator application. We went through
    a step-by-step process to ingest the data feed, build a dynamic template on the
    fly from that data feed, append the data feed to a `div` element, and then bind
    the `div` element to the `cycle` plugin. This notice board rotator application
    gives us an insight to bigger Carousel projects that can be developed with very
    little development effort. In the next chapter, we will look at the alternative
    implementations of JSON.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将JavaScript、jQuery和JSON知识付诸实践，构建了一个整洁的Carousel公告板旋转应用程序。我们逐步进行了数据源的摄取、从数据源动态生成模板、将数据源附加到`div`元素，然后将`div`元素绑定到`cycle`插件。这个公告板旋转应用程序为我们提供了一个洞察更大的Carousel项目，可以用很少的开发工作来开发。在下一章中，我们将看看JSON的替代实现。
