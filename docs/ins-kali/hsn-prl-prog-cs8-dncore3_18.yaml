- en: Patterns in Parallel Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行编程中的模式
- en: In the previous chapter, we introduced threading models in IIS and Kestrel and
    how they can be optimized to improve performance, as well as some new async feature
    support in .NET Core 3.0.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了IIS和Kestrel中的线程模型，以及如何优化它们以提高性能，以及.NET Core 3.0中一些新的异步特性支持。
- en: In this chapter, we will introduce parallel programming patterns and focus on
    understanding the parallel code problem scenarios and solving them using parallel
    programming/async techniques.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍并行编程模式，并专注于理解并行代码问题场景以及使用并行编程/异步技术解决这些问题。
- en: Although there are numerous patterns that have been utilized in parallel programming
    techniques, we will limit ourselves to explaining the most important ones.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管并行编程技术中使用了许多模式，但我们将限制自己解释最重要的模式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主题：
- en: '`MapReduce`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapReduce`'
- en: Aggregation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合
- en: Fork/join
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支/合并
- en: Speculative processing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推测处理
- en: Laziness
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒惰
- en: Shared state
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享状态
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Knowledge of C# and parallel programming is required in order to understand
    this chapter. The source code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter13](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter13).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解本章内容，需要具备C#和并行编程的知识。本章的源代码可以在GitHub上找到：[https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter13](https://github.com/PacktPublishing/-Hands-On-Parallel-Programming-with-C-8-and-.NET-Core-3/tree/master/Chapter13)。
- en: The MapReduce pattern
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MapReduce模式
- en: The `MapReduce` pattern was introduced in order to handle big data problems
    such as large-scale computing requirements spanning across a cluster of servers.
    The pattern can also be used on single-core machines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapReduce`模式是为了处理大数据问题而引入的，例如跨服务器集群的大规模计算需求。该模式也可以在单核机器上使用。'
- en: 'A `MapReduce` program is composed of two tasks: **map** and **reduce**. The
    input for the `MapReduce` program is passed as a set of key-value pairs and the
    output is also received as such.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapReduce`程序由两个任务组成：**map**和**reduce**。`MapReduce`程序的输入作为一组键值对传递，输出也以此形式接收。'
- en: To implement this pattern, we need to start by writing a `map` function that
    takes in data (key/value pair) as a single input value and converts it into another
    set of intermediate data (key/value pair). The user then writes a `reduce` function
    that takes the output from the `map` function (key/value pair) as input and combines
    the data with a smaller dataset containing any number of rows of data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这种模式，我们需要首先编写一个`map`函数，该函数以数据（键/值对）作为单个输入值，并将其转换为另一组中间数据（键/值对）。然后用户编写一个`reduce`函数，该函数以`map`函数的输出（键/值对）作为输入，并将数据与包含任意行数据的较小数据集组合。
- en: Let's look at how to implement a basic `MapReduce` pattern using LINQ and convert
    it into a PLINQ-based implementation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用LINQ实现基本的`MapReduce`模式，并将其转换为基于PLINQ的实现。
- en: Implementing MapReduce using LINQ
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LINQ实现MapReduce
- en: 'The following is a typical graphical representation of the `MapReduce` pattern.
    The input goes through various mapped functions, with each returning a set of
    mapped values as output. These are then grouped and joined by `Reduce()` functions
    to create the final output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`MapReduce`模式的典型图形表示。输入经过各种映射函数，每个函数返回一组映射值作为输出。然后，这些值被`Reduce()`函数分组和合并以创建最终输出：
- en: '![](img/ce927cbb-692b-46c2-919b-d261f96b84f5.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce927cbb-692b-46c2-919b-d261f96b84f5.png)'
- en: 'Follow these steps to implement the `MapReduce` pattern using LINQ:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用LINQ实现`MapReduce`模式：
- en: First, we need to write a `map` function with a single input value that returns
    a set of mapped values. We can use LINQ's `SelectMany` function for this.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要编写一个`map`函数，它以单个输入值返回一组映射值。我们可以使用LINQ的`SelectMany`函数来实现这一点。
- en: Then, we need to group data according to the intermediate key. We can use LINQ's
    `GroupBy` method for this.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要根据中间键对数据进行分组。我们可以使用LINQ的`GroupBy`方法来实现这一点。
- en: Finally, we need a `reduce` method that will take an intermediate key as input.
    It will also take a corresponding set of values for that and produce output. We
    can use `SelectMany`for this.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要一个`reduce`方法，它将以中间键作为输入。它还将采用相应的值集合并产生输出。我们可以使用`SelectMany`来实现这一点。
- en: 'Our final `MapReduce` pattern will now look as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的最终`MapReduce`模式现在将如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can change the input and output so that it works with `ParallelQuery<T>`
    rather than `IEnumerable<T>`, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以改变输入和输出，使其适用于`ParallelQuery<T>`而不是`IEnumerable<T>`，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is an example of using the custom implementation of `MapReduce` in
    .NET Core. The program generates some positive and negative random numbers in
    a range. Then, it applies a map to filter out any positive numbers and group them
    by number. Finally, it applies the `reduce` function to return a list of numbers,
    along with their counts:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在.NET Core中使用自定义实现的`MapReduce`的示例。程序在范围内生成一些正数和负数的随机数。然后，它应用一个map来过滤掉任何正数，并按数字对它们进行分组。最后，它应用`reduce`函数返回一个数字列表，以及它们的计数：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is an excerpt from the output we receive if we run the preceding
    program code in Visual Studio. As you can see, it iterates the provided list and
    finds the count of how many times the numbers occurred:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在Visual Studio中运行上述程序代码后收到的输出摘录。如您所见，它迭代提供的列表并找到数字出现的次数：
- en: '![](img/2e6c38af-ca3a-4de2-89ee-c6de40ac3d90.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e6c38af-ca3a-4de2-89ee-c6de40ac3d90.png)'
- en: In the next section, we will discuss another common and important parallel design
    pattern called aggregation. While the `MapReduce` pattern acts as a filter, aggregation
    just combines all the data from the input and puts it in another format.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论另一个常见且重要的并行设计模式，称为聚合。而`MapReduce`模式充当过滤器，聚合只是将输入的所有数据组合在一起，并以另一种格式放置。
- en: Aggregation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合
- en: Aggregation is another common design pattern that's used in parallel applications.
    In parallel programs, the data is divided into units so that it can be processed
    across cores by a number of threads. At some point, there is a need to combine
    data from all the relevant sources before it can be presented to the user. This
    is where aggregation comes into the picture.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合是并行应用程序中常用的设计模式。在并行程序中，数据被分成单元，以便可以通过多个线程在多个核心上处理。在某些时候，需要从所有相关来源组合数据，然后才能呈现给用户。这就是聚合的作用。
- en: Now, let's explore the need for aggregation and what is provided by PLINQ.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探讨聚合的需求以及 PLINQ 提供的内容。
- en: 'A common use case of aggregation is as follows. Here, we are trying to iterate
    a set of values, perform some operations, and return the result to the caller:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合的一个常见用例如下。在这里，我们尝试迭代一组值，执行一些操作，并将结果返回给调用者：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The problem with the preceding code is that the output isn''t thread-safe.
    Due to this, to avoid cross-threading issues, we need to make use of synchronization
    primitives:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的问题是输出不是线程安全的。因此，为了避免跨线程问题，我们需要使用同步原语：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code works well if the computation that''s done per item is small.
    However, as the computation that''s done per item increases the cost of taking
    and releasing, the lock will also increase. This results in degraded performance.
    Concurrent collections, which we discussed in [Chapter 6](c10ffb38-9184-4518-8ae3-93c7a2fb4d5d.xhtml),
    *Using Concurrent Collections*, comes to the rescue here. With concurrent collections,
    we don''t have to worry about synchronizations. The following code snippet is
    using concurrent collection:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码在每个项目的计算量较小时运行良好。然而，随着每个项目的计算量增加，获取和释放锁的成本也会增加。这会导致性能下降。在这里，我们讨论的并发集合在这里发挥了作用。使用并发集合，我们不必担心同步。以下代码片段使用并发集合：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'PLINQ also defines methods that help with aggregation and handle synchronization.
    Some of these methods are `ToArray`,  `ToList`,  `ToDictionary`, and `ToLookup`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PLINQ 还定义了帮助聚合和处理同步的方法。其中一些方法是 `ToArray`、`ToList`、`ToDictionary` 和 `ToLookup`：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, the `ToList()` method takes care of aggregating all the
    data while also dealing with synchronization. Some implementation patterns are
    available in TPL and are built into programming languages. One of them is the
    fork/join pattern, which we will discuss next.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，`ToList()` 方法负责聚合所有数据，同时处理同步。TPL 中有一些实现模式，并内置在编程语言中。其中之一是 fork/join
    模式，我们将在下面讨论。
- en: The fork/join pattern
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fork/join 模式
- en: 'In fork/join patterns, work is *forked* (*split*) into a set of tasks that
    can be executed asynchronously. Later, the forked work is joined in the same order
    or a different order, as per the requirements and scope of parallelization. We
    have already seen some common examples of fork/join patterns in this book when
    we discussed delightfully parallel loops. Some implementations of fork/join are
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 fork/join 模式中，工作被 *forked*（分割）成一组可以异步执行的任务。稍后，分叉的工作按照要求和并行化的范围以相同顺序或不同顺序进行合并。在本书中，当我们讨论愉快的并行循环时，已经看到了一些
    fork/join 模式的常见示例。fork/join 的一些实现如下：
- en: '`Parallel.For`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Parallel.For`'
- en: '`Parallel.ForEach`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Parallel.ForEach`'
- en: '`Parallel.Invoke`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Parallel.Invoke`'
- en: '`System.Threading.CountdownEvent`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System.Threading.CountdownEvent`'
- en: Utilizing these framework-provided methods aids in faster development without
    developers having to worry about synchronization overheads. These patterns result
    in high throughput. To achieve high throughput and to reduce latency, another
    pattern, called speculative processing, is widely used.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些框架提供的方法有助于更快地开发，而开发人员无需担心同步开销。这些模式导致高吞吐量。为了实现高吞吐量和减少延迟，另一个称为推测处理的模式被广泛使用。
- en: The speculative processing pattern
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推测处理模式
- en: The speculative processing pattern is another parallel programming pattern that
    relies on high throughput to reduce latency. This is very useful in scenarios
    where there are multiple ways of performing a task but the user doesn't know which
    way will return the results fastest. This approach creates a task for each possible
    method, which is then executed across processors. The task that finishes first
    is used as output, ignoring the others (which may still complete successfully
    but are slow).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 推测处理模式是另一种并行编程模式，依赖于高吞吐量来减少延迟。这在存在多种执行任务的方式但用户不知道哪种方式会最快返回结果的情况下非常有用。这种方法为每种可能的方法创建一个任务，然后在处理器上执行。首先完成的任务被用作输出，忽略其他任务（它们可能仍然成功完成，但速度较慢）。
- en: 'The following is a typical `SpeculativeInvoke` representation. It accepts an
    array of `Func<T>` as parameters and executes them in parallel until one of them
    returns:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是典型的 `SpeculativeInvoke` 表示。它接受 `Func<T>` 数组作为参数，并并行执行它们，直到其中一个返回：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following method executes each action that''s passed to it in parallel
    and breaks out of a parallel loop by calling the `ParallelLoopState.Stop()` method
    as soon as any of the called implementations execute successfully:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法并行执行传递给它的每个操作，并通过调用 `ParallelLoopState.Stop()` 方法来跳出并行循环，一旦任何被调用的实现成功执行：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following code uses two different logics to calculate the square of 5\.
    We will pass both approaches to the `SpeculativeInvoke` method and print the `result`
    as soon as possible:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用两种不同的逻辑来计算 5 的平方。我们将两种方法都传递给 `SpeculativeInvoke` 方法，并尽快打印 `result`：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is the output of the preceding code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的输出：
- en: '![](img/54d8ada1-e36c-45c0-8c92-fc3f760b2e44.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54d8ada1-e36c-45c0-8c92-fc3f760b2e44.png)'
- en: As you will see, both methods finish but only the output of the first finished
    execution is returned to the caller. Creating too many tasks can have an adverse
    effect on system memory as more and more variables need to be allocated and kept
    in memory. Therefore, it becomes very important to allocate objects only when
    they are actually required. Our next pattern helps us achieve this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将看到的，两种方法都会完成，但只有第一个完成的执行的输出会返回给调用者。创建太多任务可能会对系统内存产生不利影响，因为需要分配和保留更多的变量在内存中。因此，只有在实际需要时分配对象变得非常重要。我们的下一个模式可以帮助我们实现这一点。
- en: The lazy pattern
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒惰模式
- en: Lazy is another programming pattern that is used by application developers to
    improve application performance. Laziness is about delaying computation until
    it's actually needed. In a best-case scenario, the computation might not be needed
    at all, which helps in not wasting compute resources and thus improving the performance
    of the system as a whole. Lazy evaluation is not new to computing, and LINQ uses
    *lazy loading* heavily. LINQ follows the deferred execution model in which queries
    are not executed until we call `MoveNext()` on them using some iterator functions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 懒惰是应用程序开发人员用来提高应用程序性能的另一种编程模式。懒惰是指延迟计算直到实际需要。在最佳情况下，可能根本不需要计算，这有助于不浪费计算资源，从而提高整个系统的性能。懒惰评估在计算机领域并不新鲜，LINQ大量使用*延迟加载*。LINQ遵循延迟执行模型，在这个模型中，查询直到我们使用一些迭代器函数调用`MoveNext()`时才被执行。
- en: 'The following is an example of a thread-safe lazy singleton pattern that utilizes
    some heavy compute operations for creation and is thus deferred:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个线程安全的懒惰单例模式的示例，它利用一些繁重的计算操作进行创建，因此是延迟的：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A lazy object is created by calling the `LazySingleton<T>` class's `Value` property.
    Laziness guarantees that an object is not created until the `Value` property is
    called. Once created, the singleton implementation ensures that the same object
    is returned on subsequent calls. A null check on `_value` avoids creating a lock
    on subsequent calls, thereby saving some memory I/O operations and improving performance.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`LazySingleton<T>`类的`Value`属性来创建一个懒惰对象。懒惰保证对象直到调用`Value`属性时才被创建。一旦创建，单例实现确保在后续调用时返回相同的对象。对`_value`的空值检查避免在后续调用时创建锁，从而节省一些内存I/O操作并提高性能。
- en: 'We can get around writing so much code by making use of `System.Lazy<T>`, as
    shown in the following code example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`System.Lazy<T>`来避免编写太多的代码，如下面的代码示例所示：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: While working with asynchronous programming, we can combine the power of `Lazy<T>`
    with TPL to achieve significant results.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用异步编程时，我们可以结合`Lazy<T>`和TPL的力量来取得显著的结果。
- en: 'The following is an example of using both `Lazy<T>` and `Task<T>` to implement
    lazy and asynchronous behavior:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`Lazy<T>`和`Task<T>`来实现懒惰和异步行为的示例：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can access the underlying `Task` through the `data.Value` property. The underlying
    lazy implementation will ensure that the same task instance is returned every
    time, no matter how many times you call the `data.Value` property. This is useful
    in scenarios where you don't want to launch many threads and just want to launch
    a single thread that may carry out some asynchronous processing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`data.Value`属性访问底层的`Task`。底层的懒惰实现将确保每次调用`data.Value`属性时返回相同的任务实例。这在你不想启动许多线程，只想启动一个可能执行一些异步处理的单个线程的情况下非常有用。
- en: 'Consider the following piece of code, which fetches data from a service and
    saves it to an Excel or CSV file from two different thread implementations:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段，它从服务中获取数据，并将其保存到Excel或CSV文件中，使用两种不同的线程实现：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following are two example methods that have logic we can save as text or
    in CSV format:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个示例方法，其中的逻辑可以保存为文本或CSV格式：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following code shows how we can wrap the service call inside `lazy` and
    make sure that a service call is made only once while the output can be used asynchronously.
    As you can see, we have wrapped the lazy initialization method as a task using
    `Task.Factory.StartNew(GetDataFromService)`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了我们如何将服务调用包装在`lazy`中，并确保只有在需要时才进行一次服务调用，而输出可以异步使用。正如你所看到的，我们已经将延迟初始化方法包装为一个任务，使用`Task.Factory.StartNew(GetDataFromService)`：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following is the output of the preceding code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的输出：
- en: '![](img/c4b012ec-745d-4df6-ae05-ad40382ceb23.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4b012ec-745d-4df6-ae05-ad40382ceb23.png)'
- en: As you can see, the service is only called once. Whenever you need to create
    objects, the lazy pattern is an advisable proposition for developers. When we
    create multiple tasks, we face problems associated with the synchronization of
    resources. An understanding of shared state patterns comes in handy in these scenarios.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，服务只被调用了一次。每当需要创建对象时，懒惰模式对开发人员来说是一个值得考虑的建议。当我们创建多个任务时，我们面临与资源同步相关的问题。在这些情况下，对共享状态模式的理解非常有用。
- en: Shared state pattern
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享状态模式
- en: We covered the implementation of these patterns in [Chapter 5](a1a7572c-ff51-47d3-a5e6-3a256fd79b24.xhtml),
    *Synchronization Primitives*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](a1a7572c-ff51-47d3-a5e6-3a256fd79b24.xhtml)中介绍了这些模式的实现，*同步原语*。
- en: A parallel application has to deal with a shared state problem constantly. The
    application will have some data members that need to be protected when they're
    accessed in a multithreaded environment. There are many ways to deal with shared
    state problems, such as using `Synchronization`, `Isolation`, and `Immutability`.
    Synchronization can be achieved using the synchronization primitives provided
    by the .NET Framework and it can also provide mutual exclusion over a shared data
    member. Immutability guarantees only one state for a data member and never changes.
    Consequently, the same state can be shared across threads without any issues.
    Isolation deals with each thread having its own copy of data members.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 并行应用程序必须不断处理共享状态问题。应用程序将具有一些数据成员，在多线程环境中访问时需要受到保护。处理共享状态问题有许多方法，例如使用`同步`、`隔离`和`不可变性`。同步可以使用.NET
    Framework提供的同步原语来实现，并且还可以对共享数据成员提供互斥。不可变性保证数据成员只有一个状态，永远不会改变。因此，相同的状态可以在线程之间共享而不会出现任何问题。隔离处理每个线程都有自己的数据成员副本。
- en: Now, we'll summarize what we learned in this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们总结一下本章学到的内容。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced various patterns of parallel programming and
    provided examples of each. Though not an exhaustive list, these patterns can prove
    to be a good starting point for parallel application programming developers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了并行编程的各种模式，并提供了每种模式的示例。虽然不是详尽无遗的列表，但这些模式可以成为并行应用程序编程开发人员的良好起点。
- en: In a nutshell, we discussed the `MapReduce` pattern, the speculative processing
    pattern, the lazy pattern, and the aggregation pattern. We also introduced some
    implementation patterns, such as fork/join and the shared state pattern, both
    are which are used in .NET Framework libraries for parallel programming.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们讨论了`MapReduce`模式、推测处理模式、懒惰模式和聚合模式。我们还介绍了一些实现模式，比如分支/合并和共享状态模式，这两种模式都在.NET
    Framework库中用于并行编程。
- en: In the next chapter, we will introduce distributed memory management and focus
    on understanding the shared memory model as well as the distributed memory model.
    We will also discuss various types of communication networks and their properties
    with example implementations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍分布式内存管理，并重点了解共享内存模型以及分布式内存模型。我们还将讨论各种类型的通信网络及其具有示例实现的属性。
- en: Questions
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of these is not an implementation of the fork/join pattern?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是分支/合并模式的实现？
- en: '`System.Threading.Barrier`'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.Threading.Barrier`'
- en: '`System.Threading.Countdown`'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.Threading.Countdown`'
- en: '`Parallel.For`'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Parallel.For`'
- en: '`Parallel.ForEach`'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Parallel.ForEach`'
- en: Which of these is the implementation of the lazy pattern in TPL?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是TPL中懒惰模式的实现？
- en: '`Lazy<T>`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Lazy<T>`'
- en: '`LazySingleton`'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 懒惰单例
- en: '`LazyInitializer`'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LazyInitializer`'
- en: Which pattern relies on achieving high throughput to reduce latency?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种模式依赖于实现高吞吐量以减少延迟？
- en: Lazy
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 懒惰
- en: Shared state
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 共享状态
- en: Speculative processing
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推测处理
- en: Which pattern can you use if you need to filter out data from a list and return
    a single output?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要从列表中过滤数据并返回单个输出，可以使用哪种模式？
- en: Aggregation
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 聚合
- en: '`MapReduce`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MapReduce`'
