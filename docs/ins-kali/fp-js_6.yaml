- en: Chapter 6. Advanced Topics and Pitfalls in JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。JavaScript中的高级主题和陷阱
- en: JavaScript has been called the "assembly language of the web". The analogy (it
    isn't perfect, but which analogy is?) draws from the fact that JavaScipt is often
    a target for compilation, namely from **Clojure** and **CoffeeScript**, but also
    from many other sources such as **pyjamas** (python to JS) and Google Web Kit
    (Java to JS).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被称为Web的"汇编语言"。这个类比（它并不完美，但哪个类比是完美的？）源自于JavaScipt经常是编译的目标，主要来自**Clojure**和**CoffeeScript**，但也来自许多其他来源，比如**pyjamas**（python到JS）和Google
    Web Kit（Java到JS）。
- en: But the analogy also references the foolish idea that JavaScript is as expressive
    and low-level as x86 assembly. Perhaps this notion stems from the fact that JavaScript
    has been bashed for its design flaws and oversights ever since it was first shipped
    with Netscape back in 1995\. It was developed and released in a hurry, before
    it could be fully developed. And because of that, some questionable design choices
    made its way into JavaScript, the language that soon became the de-facto scripting
    language of the web. Semicolons were a big mistake. So were its ambiguous methods
    for defining functions. Is it `var foo = function();` or `function foo();`?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个类比也提到了一个愚蠢的想法，即JavaScript和x86汇编一样具有表现力和低级。也许这个想法源于JavaScript自从1995年首次与网景一起发布以来就一直因其设计缺陷和疏忽而受到抨击。它是在匆忙开发和发布的，还没有完全开发就发布了。正因为如此，一些有问题的设计选择进入了JavaScript，这种语言很快成为了Web的事实脚本语言。分号是一个大错误。定义函数的模糊方法也是错误的。是`var
    foo = function();`还是`function foo();`？
- en: Functional programming is an excellent way to side-step some of these mistakes.
    By focusing on the fact that JavaScript is truly a functional language, it becomes
    clear that, in the preceding example about the different ways to declare a function,
    it's best to declare functions as variables. And that semicolons are mostly just
    syntactic sugar to make JavaScript appear more C-like.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程是规避一些这些错误的绝佳方式。通过专注于JavaScript实际上是一种函数式语言这一事实，可以清楚地看到，在前面关于不同声明函数的方式的示例中，最好将函数声明为变量。分号大多只是为了使JavaScript看起来更像C而已。
- en: 'But always remember the language you are working with. JavaScript, like any
    other language, has its pitfalls. And, when programming in a style that often
    skirts the bleeding edge of what''s possible, those minor stumbles can become
    non-recoverable gotchas. Some of these gotchas include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，始终记住你正在使用的语言。JavaScript，像任何其他语言一样，都有其缺陷。而且，在编写通常会绕过可能的边缘的风格时，这些小失误可能会变成不可恢复的陷阱。其中一些陷阱包括：
- en: Recursion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归
- en: Variable scope and closures
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量作用域和闭包
- en: Function declarations vs. function expressions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数声明与函数表达式
- en: However, these issues can be overcome with a little attention.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些问题可以通过一点注意来克服。
- en: Recursion
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 递归
- en: Recursion is very important to functional programming in any language. Many
    functional languages go so far as to require recursion for iteration by not providing
    `for` and `while` loop statements; this is only possible when tail-call elimination
    is guaranteed by the language, which is not the case for JavaScript. A quick primer
    on recursion was given in [Chapter 2](part0019_split_000.html#page "Chapter 2. Fundamentals
    of Functional Programming"), *Fundamentals of Functional Programming*. But in
    this section, we'll dig deeper into exactly how recursion works in JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何语言中，递归对于函数式编程非常重要。许多函数式语言甚至要求通过不提供`for`和`while`循环语句来进行迭代，这只有在语言保证尾调用消除时才可能，而JavaScript并非如此。在[第2章](part0019_split_000.html#page
    "第2章。函数式编程基础")*函数式编程基础*中简要介绍了递归。但在本节中，我们将深入探讨递归在JavaScript中的工作原理。
- en: Tail recursion
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尾递归
- en: JavaScript's routine for handling recursion is known as *tail recursion*, a
    stack-based implementation of recursion. This means that, for every recursive
    call, there is a new frame in the stack.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript处理递归的例程被称为*尾递归*，这是一种基于堆栈的递归实现。这意味着，对于每次递归调用，堆栈中都会有一个新的帧。
- en: To illustrate the problems that can arise from this method, let's use the classic
    recursive algorithm for factorials.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种方法可能出现的问题，让我们使用经典的递归算法来计算阶乘。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The algorithm will call itself `n` times to get the answer. It's literally computing
    `(1 x 1 x 2 x 3 x … x N)`. That means the time complexity is `O(n)`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法将自己调用`n`次以获得答案。它实际上计算了`(1 x 1 x 2 x 3 x … x N)`。这意味着时间复杂度是`O(n)`。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`O(n)`, pronounced "big oh to the n," means that the complexity of the algorithm
    will grow at a rate of `n` as the size of the input grows, which is leaner growth.
    `O(n2)` is exponential growth, `O(log(n))` is logarithmic growth, and so on. This
    notation can be used for time complexity as well as space complexity.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`O(n)`，读作"大O到n"，意味着算法的复杂度将随着输入规模的增长而增长，这是更精简的增长。`O(n2)`是指数增长，`O(log(n))`是对数增长，等等。这种表示法既可以用于时间复杂度，也可以用于空间复杂度。'
- en: 'But, because a new frame in the memory stack is allocated for each iteration,
    the space complexity is also `O(n)`. This is a problem. This means that memory
    will be consumed at such a rate the memory limit will be exceeded far too easily.
    On my laptop, `factorial(23456)` returns `Uncaught Error: RangeError: Maximum
    call stack size exceeded`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '但是，由于每次迭代都会为内存堆栈分配一个新的帧，因此空间复杂度也是`O(n)`。这是一个问题。这意味着内存将以这样的速度被消耗，以至于很容易超出内存限制。在我的笔记本电脑上，`factorial(23456)`返回`Uncaught
    Error: RangeError: Maximum call stack size exceeded`。'
- en: 'While calculating the factorial of 23,456 is a frivolous endeavor, you can
    be assured that many problems that are solved with recursion will grow to that
    size without too much trouble. Consider the case of data trees. The tree could
    be anything: search applications, file systems, routing tables, and so on. Below
    is a very simple implementation of the tree traversal function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然计算23456的阶乘是一种不必要的努力，但可以肯定的是，许多使用递归解决的问题将很容易增长到这样的规模。考虑数据树的情况。树可以是任何东西：搜索应用程序、文件系统、路由表等。下面是树遍历函数的一个非常简单的实现：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With just two children per node, both time complexity and space complexity,
    (in the worst case, where the entire tree must be traversed to find the answer),
    would be `O(n2)` because there would be two recursive calls each. With many children
    per node, the complexity would be `O(nm)` where `m` is the number of children.
    And recursion is the preferred algorithm for tree traversal; a `while` loop would
    be much more complex and would require the maintenance of a stack.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点只有两个子节点时，时间复杂度和空间复杂度（在最坏的情况下，整个树必须被遍历以找到答案）都将是`O(n2)`，因为每次都会有两个递归调用。如果每个节点有许多子节点，复杂度将是`O(nm)`，其中`m`是子节点的数量。递归是树遍历的首选算法；`while`循环会更加复杂，并且需要维护一个堆栈。
- en: Exponential growth like this would mean that it would not take a very large
    tree to throw a `RangeError` exception. There must be a better way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 指数增长意味着不需要一个非常大的树就能抛出`RangeError`异常。必须有更好的方法。
- en: The Tail-call elimination
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尾调用消除
- en: We need a way to eliminate the allocation of new stack frames for every recursive
    call. This is known as *tail-call elimination*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法来消除每次递归调用都分配新的堆栈帧。这就是所谓的*尾调用消除*。
- en: With tail-call elimination, when a function returns the result of calling itself,
    the language doesn't actually perform another function call. It turns the whole
    thing into a loop for you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过尾调用消除，当一个函数返回调用自身的结果时，语言实际上不执行另一个函数调用。它为您将整个过程转换为循环。
- en: OK, so how do we do this? With lazy evaluation. If we could rewrite it to fold
    over a lazy sequence, such that the function returns a value or it returns the
    result of calling another function without doing anything with that result, then
    new stack frames don't need to be allocated.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们该怎么做呢？使用惰性求值。如果我们可以将其重写为对惰性序列进行折叠，使得函数返回一个值或者返回调用另一个函数的结果而不对该结果进行任何操作，那么就不需要分配新的堆栈帧。
- en: 'To put it in "tail recursion form", the factorial function would have to be
    rewritten such that the inner procedure `fact` calls itself last in the control
    flow, as shown in the following code snippet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其转换为“尾递归形式”，阶乘函数必须被重写，使得内部过程`fact`在控制流中最后调用自身，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of having the result produced by the first function in the recursion
    tail (like in `n * factorial(n-1)`), the result is computed going down the recursion
    tail (with the call to `_fact(r*n, n-1)`) and is produced by the last function
    in this tail (with `return r;`). The computation goes only one way down, not on
    its way up. It's relatively easy to process it as an iteration for the interpreter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与其让递归尾部产生结果（比如`n * factorial(n-1)`），不如让结果在递归尾部进行计算（通过调用`_fact(r*n, n-1)`），并由该尾部中的最后一个函数产生结果（通过`return
    r;`）。计算只朝一个方向进行，而不是向上。对解释器来说，将其处理为迭代相对容易。
- en: 'However, *tail-call elimination does not work in JavaScript*. Put the above
    code into your favorite JavaScript engine and `factorial(24567)` still returns
    `Uncaught Error: RangeError: Maximum call stack size exceeded` exception. Tail-call
    elimination is listed as a new feature to be included in the next release of ECMAScript,
    but it will be some time before all browsers implement it.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，*尾调用消除在JavaScript中不起作用*。将上述代码放入您喜欢的JavaScript引擎中，`factorial(24567)`仍然会返回`Uncaught
    Error: RangeError: Maximum call stack size exceeded`异常。尾调用消除被列为要包含在下一个ECMAScript版本中的新功能，但在所有浏览器实现它之前还需要一些时间。'
- en: JavaScript cannot optimize functions that are put into tail recursion form.
    It's a feature of the language specification and runtime interpreter, plain and
    simple. It has to do with how the interpreter acquires resources for stack frames.
    Some languages will reuse the same stack frame when it doesn't need to remember
    anything new, like in the preceding function. This is how tail-call elimination
    reduces both time and space complexity.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript无法优化转换为尾递归形式的函数。这是语言规范和运行时解释器的特性，简单明了。这与解释器如何获取堆栈帧的资源有关。有些语言在不需要记住任何新信息时会重用相同的堆栈帧，就像在前面的函数中一样。这就是尾调用消除如何减少时间和空间复杂度。
- en: 'Unfortunately, JavaScript does not do this. But if it did, it would reorganize
    the stack frames from this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，JavaScript不会这样做。但如果它这样做了，它将重新组织堆栈帧，从这样：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'into the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为以下形式：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Trampolining
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: trampolining
- en: The solution? A process known as **trampolining**. It's a way to "hack" the
    concept of tail-call elimination into a program by using **thunks**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案？一种称为**trampolining**的过程。这是一种通过使用**thunks**来“黑客”尾调用消除概念的方法。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Thunks are, for this purpose, expressions with arguments that wrap anonymous
    functions with no arguments of their own. For example: `function(str){return function(){console.log(str)}}`.
    This prevents the expression from being evaluated until a receiving function calls
    the anonymous function.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，thunks是带有参数的表达式，用于包装没有自己参数的匿名函数。例如：`function(str){return function(){console.log(str)}}`。这可以防止表达式在接收函数调用匿名函数之前被评估。
- en: 'A trampoline is a function that takes a function as input and repeatedly executes
    its returned value until something other than a function is returned. A simple
    implementation is shown in the following code snippet:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: trampoline是一个接受函数作为输入并重复执行其返回值直到返回的不再是函数的函数。以下是一个简单的实现代码片段：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To actually implement tail-call elimination, we need to use thunks. For this,
    we can use the `bind()` function that allows us to apply a method to one object
    with the `this` keyword assigned to another. Internally, it's the same as the
    `call` keyword, but it's chained to the method and returns a new bound function.
    The `bind()` function actually does partial application, though in a very limited
    way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际实现尾调用消除，我们需要使用thunks。为此，我们可以使用`bind()`函数，它允许我们将一个方法应用于具有分配给另一个对象的`this`关键字的对象。在内部，它与`call`关键字相同，但它链接到方法并返回一个新的绑定函数。`bind()`函数实际上进行了部分应用，尽管方式非常有限。
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But writing the `fact.bind(null, ...)` method is cumbersome and would confuse
    anybody reading the code. Instead, let''s write our own function for creating
    thunks. There are a few things the `thunk()` function must do:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是编写 `fact.bind(null, ...)` 方法很麻烦，会让任何阅读代码的人感到困惑。相反，让我们编写自己的函数来创建 thunks。`thunk()`
    函数必须做一些事情：
- en: '`thunk()` function must emulate the `_fact.bind(null, n*x, n-1)` method that
    returns a non-evaluated function'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thunk()` 函数必须模拟 `_fact.bind(null, n*x, n-1)` 方法，返回一个未评估的函数'
- en: 'The `thunk()` function should enclose two more functions:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thunk()` 函数应该包含另外两个函数：'
- en: For processing the give function, and
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理给定函数，以及
- en: For processing the function arguments that will be used when the given function
    is invoked
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于处理函数参数，这些参数将在调用给定函数时使用
- en: With that, we're ready to write the function. We only need a few lines of code
    to write it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们就可以开始编写函数了。我们只需要几行代码就可以写出来。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can use the `thunk()` function in our factorial algorithm like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在阶乘算法中使用 `thunk()` 函数，就像这样：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But again, we can simplify it just a bit further by defining the `_fact()` function
    as a `thunk()` function. By defining the inner function as a `thunk()` function,
    we're relieved of having to use the `thunk()` function both inside the inner function
    definition and in the return statement.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以通过将 `_fact()` 函数定义为 `thunk()` 函数来进一步简化。通过将内部函数定义为 `thunk()` 函数，我们无需在内部函数定义中和返回语句中都使用
    `thunk()` 函数。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result is beautiful. What seems like the function `_fact()` being recursively
    called for a tail-free recursion is almost transparently processed as an iteration!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是美丽的。看起来像 `_fact()` 函数被递归调用以实现无尾递归，实际上几乎透明地被处理为迭代！
- en: 'Finally, let''s see how the `trampoline()` and `thunk()` functions work with
    our more meaningful example of tree traversal. The following is a crude example
    of how a data tree could be traversed using trampolining and thunks:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看 `trampoline()` 和 `thunk()` 函数如何与我们更有意义的树遍历示例一起工作。以下是使用 trampolining
    和 thunks 遍历数据树的一个简单示例：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We've solved the issue of tail recursion. But is there an even better way? What
    if we could simply convert the recursive function to a non-recursive function?
    Up next, we'll look at how to do just that.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经解决了尾递归的问题。但是有没有更好的方法？如果我们能够简单地将递归函数转换为非递归函数呢？接下来，我们将看看如何做到这一点。
- en: The Y-combinator
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Y 组合子
- en: The Y-combinator is one of those things in computer science that amaze even
    the deftest of programming masterminds. Its ability to automatically convert recursive
    functions to non-recursive functions is why Douglas Crockford calls it "one of
    the most strange and wonderful artifacts of computer science", and Sussman and
    Steele once said, "That this manages to work is truly remarkable".
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Y 组合子是计算机科学中令人惊叹的事物之一，即使是最熟练的编程大师也会感到惊讶。它自动将递归函数转换为非递归函数的能力是为什么 Douglas Crockford
    称其为 "计算机科学中最奇怪和奇妙的产物"，而 Sussman 和 Steele 曾经说过，"这个方法能够工作真是了不起"。
- en: 'So a truly-remarkable, wonderfully strange artifact of computer science that
    brings recursive functions to their knees must be massive and complex, right?
    No, not exactly. Its implementation in JavaScript is only nine, very odd, lines
    of code. They are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个真正令人惊叹的、奇妙的计算机科学产物，能够让递归函数屈服，一定是庞大而复杂的，对吗？不完全是这样。它在 JavaScript 中的实现只有九行非常奇怪的代码。它们如下：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here''s how it works: it finds the "fixed point" of the function passed in
    as an argument. Fixed points offer another way to think about functions rather
    than recursion and iteration in the theory of computer programming. And it does
    this with only the use of anonymous function expressions, function applications,
    and variable references. Note that `Y` does not reference itself. In fact, all
    those functions are anonymous.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是：找到作为参数传入的函数的 "不动点"。不动点提供了另一种思考函数的方式，而不是在计算机编程理论中的递归和迭代。它只使用匿名函数表达式、函数应用和变量引用来实现。请注意，`Y`
    并没有引用自身。事实上，所有这些函数都是匿名的。
- en: As you might have guessed, the Y-combinator came out of lambda calculus. It's
    actually derived with the help of another combinator called the U-combinator.
    Combinators are special higher-order functions that only use function application
    and earlier defined combinators to define a result from its input.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，Y 组合子源自 λ 演算。它实际上是借助另一个称为 U 组合子的组合子推导出来的。组合子是特殊的高阶函数，它们只使用函数应用和早期定义的组合子来从输入中定义结果。
- en: To demonstrate the Y-combinator, we'll again turn to the factorial problem,
    but we need to define the factorial function a little differently. Instead of
    writing a recursive function, we write a function that returns a function that
    is the mathematical definition of factorials. Then we can pass this into the Y-combinator.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 Y 组合子，我们将再次转向阶乘问题，但我们需要以稍微不同的方式定义阶乘函数。我们不再写一个递归函数，而是写一个返回数学定义阶乘的函数。然后我们可以将这个函数传递给
    Y 组合子。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: However, when we give it a significantly large number, the stack overflows just
    as if tail recursion without trampolining was used.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们给它一个非常大的数字时，堆栈会溢出，就像使用尾递归而没有 trampolining 一样。
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'But we can use trampolining with the Y-combinator as in the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们可以像下面这样在 Y 组合子中使用 trampolining：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can also rearrange the Y-combinator to perform something called memoization.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以重新排列 Y 组合子以执行称为 memoization 的操作。
- en: Memoization
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Memoization
- en: Memoization is the technique of storing the result of expensive function calls.
    When the function is later called with the same arguments, the stored result is
    returned rather than computing the result again.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Memoization 是一种存储昂贵函数调用结果的技术。当以相同的参数再次调用函数时，将返回存储的结果，而不是重新计算结果。
- en: 'Although the Y-combinator is much faster than recursion, it is still relatively
    slow. To speed it up, we can create a memoizing fixed-point combinator: a Y-like
    combinator that caches the results of intermediate function calls.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Y组合子比递归快得多，但它仍然相对较慢。为了加快速度，我们可以创建一个记忆化的不动点组合子：一个类似Y的组合子，它缓存中间函数调用的结果。
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So how much faster is it? By using [http://jsperf.com/](http://jsperf.com/),
    we can compare the performance.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它有多快呢？通过使用[http://jsperf.com/](http://jsperf.com/)，我们可以比较性能。
- en: 'The following results are with random numbers between 1 and 100\. We can see
    that the memoizing Y-combinator is much, much faster. And adding trampolining
    to it does not slow it down by much. You can view the results and run the tests
    yourself at this URL: [http://jsperf.com/memoizing-y-combinator-vs-tail-call-optimization/7](http://jsperf.com/memoizing-y-combinator-vs-tail-call-optimization/7).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结果是使用1到100之间的随机数。我们可以看到，记忆化的Y组合子要快得多。而且加上trampolining并不会使它变慢太多。您可以在此URL查看结果并运行测试：[http://jsperf.com/memoizing-y-combinator-vs-tail-call-optimization/7](http://jsperf.com/memoizing-y-combinator-vs-tail-call-optimization/7)。
- en: '![Memoization](../images/00010.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![记忆化](../images/00010.jpeg)'
- en: 'The bottom line is: the most efficient and safest method of performing recursion
    in JavaScript is to use the memoizing Y-combinator with tail-call elimination
    via trampolining and thunks.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是：在JavaScript中执行递归的最有效和最安全的方法是使用记忆化的Y组合子，通过trampolining和thunks进行尾调用消除。
- en: Variable scope
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量作用域
- en: The scope of variables in JavaScript is not natural. In fact, sometimes it's
    downright counter-intuitive. They say that JavaScript programmers can be judged
    by how well they understand scope.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中变量的作用域并不是自然的。事实上，有时它甚至是违反直觉的。他们说JavaScript程序员可以通过他们对作用域的理解程度来判断。
- en: Scope resolutions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域解析
- en: First, let's go over the different scope resolutions in JavaScript.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下JavaScript中不同的作用域解析。
- en: JavaScript uses scope chains to establish the scope of variables. When resolving
    a variable, it starts at the innermost scope and searches outwards.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使用作用域链来确定变量的作用域。在解析变量时，它从最内部的作用域开始，向外搜索。
- en: Global scope
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局作用域
- en: Variables, functions, and objects defined at this level are available to any
    code in the entire program. This is the outermost scope.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个级别定义的变量、函数和对象对整个程序中的任何代码都是可用的。这是最外层的作用域。
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Local scope
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部作用域
- en: Each function described has its own local scope. Any function defined within
    another function has a nested local scope that is linked to the outer function.
    Almost always, it's the position in the source that defines the scope.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个描述的函数都有自己的局部作用域。在另一个函数内定义的任何函数都有一个与外部函数相关联的嵌套局部作用域。几乎总是源代码中的位置定义了作用域。
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Local scope is only for functions and not for any expression statements (`if`,
    `for`, `while`, and so on), which is different from how most languages treat scope.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 局部作用域仅适用于函数，而不适用于任何表达式语句（`if`、`for`、`while`等），这与大多数语言处理作用域的方式不同。
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In functional programming, this isn''t as much of a concern because functions
    are used more often and expression statements less often. For example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程中，这不是太大的问题，因为函数更常用，表达式语句不太常用。例如：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Object properties
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象属性
- en: Object properties have their own scope chains as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对象属性也有它们自己的作用域链。
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The object's prototype is further down the scope chain.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的原型在作用域链中更靠下。
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This isn't even close to being comprehensive, but these three types of scope
    are enough to get started.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这甚至不能算是全面的，但这三种作用域类型足以让我们开始。
- en: Closures
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闭包
- en: 'One problem with this scope structure is that it leaves no room for private
    variables. Consider the following code snippet:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种作用域结构的一个问题是它不留下私有变量的空间。考虑以下代码片段：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These variables and functions are global, which means it would be too easy for
    code later down the program to accidentally overwrite them. One solution would
    be to encapsulate them into a function and call that function immediately after
    defining it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量和函数是全局的，这意味着程序后面的代码很容易意外地覆盖它们。一个解决方法是将它们封装到一个函数中，并在定义后立即调用该函数。
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Nothing is happening outside the function, so we ought to discard the function
    name by making it anonymous.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数外部没有发生任何事情，所以我们应该通过使其匿名来丢弃函数名。
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To make the functions `getValue()` and `updateMillage()` available outside
    the anonymous function, we''ll need to return them in an object literal as shown
    in the following code snippet:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使函数`getValue()`和`updateMillage()`在匿名函数外部可用，我们需要在对象字面量中返回它们，如下面的代码片段所示：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This gives us pseudo-private variables, but the problems don't stop there. The
    following section explores more issues with variable scope in JavaScript.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们伪私有变量，但问题并不止于此。下一节将探讨JavaScript中变量作用域的更多问题。
- en: Gotchas
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 陷阱
- en: 'Many variable scope nuances can be found throughout JavaScript. The following
    is by no means a comprehensive list, but it covers the most common cases:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中可以找到许多变量作用域的微妙之处。以下绝不是一个全面的列表，但它涵盖了最常见的情况：
- en: 'The following will output 4, not ''undefined'' as one would expect:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下将输出4，而不是人们所期望的'undefined'：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is due to the fact that, in JavaScript, variable definition happens at
    the beginning of the corresponding scope, not just when it is declared.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在JavaScript中，变量的定义发生在相应作用域的开头，而不仅仅是在声明时。
- en: 'If you define a variable in the outer scope, and then have an `if` statement
    define a variable inside the function with the same name, even if that `if` branch
    isn''t reached, it is redefined. An example:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在外部作用域中定义一个变量，然后在函数内部用相同的名称定义一个变量，即使那个`if`分支没有被执行，它也会被重新定义。例如：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Again, this is caused by moving the variable definition at the beginning of
    the scope with the `undefined` value.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这是由于将变量定义移动到作用域的开头，使用`undefined`值引起的。
- en: In the browser, global variables are really stored in the `window` object.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中，全局变量实际上是存储在`window`对象中的。
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`a` in the global scope means `a` as an attribute of the current context, so
    `a===this.a` and `window` object in a browser act as an equivalent of the `this`
    keyword in the global scope.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 全局作用域中的`a`表示当前上下文的属性，因此`a===this.a`，在浏览器中的`window`对象充当全局作用域中`this`关键字的等价物。
- en: The first two examples are a result of a feature of JavaScript known as hoisting,
    which will be a critical concept in the next section about writing functions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个示例是JavaScript的一个特性导致的，这个特性被称为提升，在下一节关于编写函数的内容中将是一个关键概念。
- en: Function declarations versus function expressions versus the function constructor
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数声明与函数表达式与函数构造函数
- en: What is the difference between these three statements?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种声明之间有什么区别？
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: At first glance, they're merely different ways to write the same function. But
    there's a little more going on here. And if we're to take full advantage of functions
    in JavaScript in order to manipulate them into a functional programming style,
    then we'd better be able to get this right. If there is a better way to do something
    in computer programming, then that one way should be the only way.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，它们只是编写相同函数的不同方式。但这里还有更多的事情。如果我们要充分利用JavaScript中的函数以便将它们操纵成函数式编程风格，那么我们最好能够搞清楚这一点。如果在计算机编程中有更好的方法，那么那一种方法应该是唯一的方法。
- en: Function declarations
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数声明
- en: Function declarations, sometimes called function statements, define a function
    by using the `function` keyword.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 函数声明，有时称为函数语句，使用`function`关键字定义函数。
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Functions that are declared with this syntax are *hoisted* to the top of the
    current scope. What this actually means is that, even if the function is defined
    several lines down, JavaScript knows about it and can use it earlier in the scope.
    For example, the following will correctly print 6 to the console:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种语法声明的函数会被*提升*到当前作用域的顶部。这实际上意味着，即使函数在几行下面定义，JavaScript也知道它并且可以在作用域中较早地使用它。例如，以下内容将正确地将6打印到控制台：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Function expressions
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数表达式
- en: Named functions can also be defined as an expression by defining an anonymous
    function and assigning it to a variable.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 命名函数也可以通过定义匿名函数并将其赋值给变量来定义为表达式。
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'They are not hoisted like function declarations are. This is because, while
    function declarations are hoisted, variable declarations are not. For example,
    this will not work and will throw an error:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它们不像函数声明那样被提升。这是因为，虽然函数声明被提升，但变量声明却没有。例如，这将无法工作并抛出错误：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In functional programming, we're going to want to use function expressions so
    we can treat the functions like variables, making them available to be used as
    callbacks and arguments to higher-order functions such as `map()` functions. Defining
    functions as expressions makes it more obvious that they're variables assigned
    to a function. Also, if we're going to write functions in one style, we should
    write all functions in that style for the sake of consistency and clarity.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数式编程中，我们希望使用函数表达式，这样我们可以将函数视为变量，使它们可以用作回调和高阶函数的参数，例如`map()`函数。将函数定义为表达式使得它们更像是分配给函数的变量。此外，如果我们要以一种风格编写函数，那么为了一致性和清晰度，我们应该以该风格编写所有函数。
- en: The function constructor
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数构造函数
- en: 'JavaScript actually has a third way to create functions: with the `Function()`
    constructor. Just like function expressions, functions defined with the `Function()`
    constructor are not hoisted.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript实际上有第三种创建函数的方式：使用`Function()`构造函数。与函数表达式一样，使用`Function()`构造函数定义的函数也不会被提升。
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'But the `Function()` constructor is not only confusing, it is also highly dangerous.
    No syntax correction can happen, no optimization is possible. It''s far easier,
    safer, and less confusing to write the same function as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 但`Function()`构造函数不仅令人困惑，而且非常危险。无法进行语法纠正，也无法进行优化。以以下方式编写相同函数要容易得多、更安全、更清晰：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Unpredictable behavior
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可预测的行为
- en: 'So the difference is that function declarations are hoisted while function
    expressions are not. This can cause unexpected things to happen. Consider the
    following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以区别在于函数声明会被提升，而函数表达式不会。这可能会导致意想不到的事情发生。考虑以下情况：
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: What's actually printed to the console is `hello`. This is due to the fact that
    the second definition of the `foo()` function is hoisted to the top, making it
    the definition that is actually used by the JavaScript interpreter.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 实际打印到控制台的是`hello`。这是因为`foo()`函数的第二个定义被提升到顶部，成为JavaScript解释器实际使用的定义。
- en: 'While at first this may not seem like a critical difference, in functional
    programming this can cause mayhem. Consider the following code snippet:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然乍一看这可能不是一个关键的区别，在函数式编程中这可能会引起混乱。考虑以下代码片段：
- en: '[PRE37]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When the `foo()` function is called, `two` is printed to the console, not `one`!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`foo()`函数时，控制台会打印`two`，而不是`one`！
- en: 'Finally, there is a way to combine both function expressions and declarations.
    It works as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一种方法可以结合函数表达式和声明。它的工作方式如下：
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It makes very little sense to use this method because the name used in the
    declaration (the `bar()` function in the preceding example) is not available outside
    the function and causes confusion. It would only be appropriate for recursion,
    for example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法几乎没有意义，因为在声明中使用的名称（在前面的示例中的`bar()`函数）在函数外部不可用，会引起混乱。只有在递归的情况下才适用，例如：
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: JavaScript has been called the "assembly language of the web," because it's
    as ubiquitous and unavoidable as x86 assembly. It's the only language that runs
    on all browsers. It's also flawed, yet referring to it as a low-level language
    is missing the mark.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript被称为“Web的汇编语言”，因为它像x86汇编语言一样无处不在且不可避免。它是唯一在所有浏览器上运行的语言。它也有缺陷，但将其称为低级语言却不准确。
- en: Instead, think of JavaScript as the raw coffee beans of the web. Sure, some
    of the beans are damaged and a few are rotten. But if the good ones are selected,
    roasted, and brewed by a skilled barista, the beans can be transformed into a
    brilliant jamocha that cannot be had just once and forgotten. It's consumption
    becomes a daily custom, life without it would be static, harder to perform, and
    much less exciting. Some even prefer to enhance the brew with plug-ins and add-ons
    such as cream, sugar, and cocoa, which complement it very well.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，把JavaScript看作是网络的生咖啡豆。当然，有些豆子是受损的，有些是腐烂的。但是如果选择好豆子，由熟练的咖啡师烘焙和冲泡，这些豆子就可以变成一杯绝妙的摩卡咖啡，一次就无法忘怀。它的消费变成了日常习惯，没有它的生活会变得单调，更难以进行，也不那么令人兴奋。一些人甚至喜欢用插件和附加组件来增强这种咖啡，比如奶油、糖和可可，这些都很好地补充了它。
- en: One of JavaScript's biggest critics, Douglas Crawford, was quoted as saying
    "There are certainly a lot of people who refuse to consider the possibility that
    JavaScript got anything right. I used to be one of those guys. But now I continue
    to be amazed by the brilliance that is in there".
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最大的批评者之一道格拉斯·克劳福德曾说过：“肯定有很多人拒绝考虑JavaScript可能做对了什么。我曾经也是那些人之一。但现在我对其中的才华仍然感到惊讶。”
- en: JavaScript turned out to be pretty awesome.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最终变得非常棒。
