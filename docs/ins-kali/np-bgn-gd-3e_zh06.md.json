["```py\n    A = np.mat(\"0 1 2;1 0 3;4 -3 8\")\n    print(\"A\\n\", A)\n    ```", "```py\n    A\n    [[ 0  1  2]\n     [ 1  0  3]\n     [ 4 -3  8]]\n\n    ```", "```py\n    inverse = np.linalg.inv(A)\n    print(\"inverse of A\\n\", inverse)\n    ```", "```py\n    inverse of A\n    [[-4.5  7\\.  -1.5]\n     [-2\\.   4\\.  -1\\. ]\n     [ 1.5 -2\\.   0.5]]\n\n    ```", "```py\n    print(\"Check\\n\", A * inverse)\n    ```", "```py\n    Check\n    [[ 1\\.  0\\.  0.]\n     [ 0\\.  1\\.  0.]\n     [ 0\\.  0\\.  1.]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"0 1 2;1 0 3;4 -3 8\")\nprint(\"A\\n\", A)\n\ninverse = np.linalg.inv(A)\nprint(\"inverse of A\\n\", inverse)\n\nprint(\"Check\\n\", A * inverse)\n```", "```py\n    A = np.mat(\"1 -2 1;0 2 -8;-4 5 9\")\n    print(\"A\\n\", A)\n    b = np.array([0, 8, -9])\n    print(\"b\\n\", b)\n    ```", "```py\n    x = np.linalg.solve(A, b)\n    print(\"Solution\", x)\n    ```", "```py\n    Solution [ 29\\.  16\\.   3.]\n\n    ```", "```py\n    print(\"Check\\n\", np.dot(A , x))\n    ```", "```py\n    Check\n    [[ 0\\.  8\\. -9.]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"1 -2 1;0 2 -8;-4 5 9\")\nprint(\"A\\n\", A)\n\nb = np.array([0, 8, -9])\nprint(\"b\\n\", b)\n\nx = np.linalg.solve(A, b)\nprint(\"Solution\", x)\n\nprint(\"Check\\n\", np.dot(A , x))\n```", "```py\n    A = np.mat(\"3 -2;1 0\")\n    print(\"A\\n\", A)\n    ```", "```py\n    A\n    [[ 3 -2]\n     [ 1  0]]\n\n    ```", "```py\n    print(\"Eigenvalues\", np.linalg.eigvals(A))\n    ```", "```py\n    Eigenvalues [ 2\\.  1.]\n\n    ```", "```py\n    eigenvalues, eigenvectors = np.linalg.eig(A)\n    print(\"First tuple of eig\", eigenvalues)\n    print(\"Second tuple of eig\\n\", eigenvectors)\n    ```", "```py\n    First tuple of eig [ 2\\.  1.]\n    Second tuple of eig\n    [[ 0.89442719  0.70710678]\n     [ 0.4472136   0.70710678]]\n\n    ```", "```py\n    for i, eigenvalue in enumerate(eigenvalues):\n          print(\"Left\", np.dot(A, eigenvectors[:,i]))\n          print(\"Right\", eigenvalue * eigenvectors[:,i])\n          print()\n    ```", "```py\n    Left [[ 1.78885438]\n     [ 0.89442719]]\n    Right [[ 1.78885438]\n     [ 0.89442719]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"3 -2;1 0\")\nprint(\"A\\n\", A)\n\nprint(\"Eigenvalues\", np.linalg.eigvals(A) )\n\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint(\"First tuple of eig\", eigenvalues)\nprint(\"Second tuple of eig\\n\", eigenvectors)\n\nfor i, eigenvalue in enumerate(eigenvalues):\n      print(\"Left\", np.dot(A, eigenvectors[:,i]))\n      print(\"Right\", eigenvalue * eigenvectors[:,i])\n      print()\n```", "```py\n    A = np.mat(\"4 11 14;8 7 -2\")\n    print(\"A\\n\", A)\n    ```", "```py\n    A\n    [[ 4 11 14]\n     [ 8  7 -2]]\n\n    ```", "```py\n    U, Sigma, V = np.linalg.svd(A, full_matrices=False)\n    print(\"U\")\n    print(U)\n    print(\"Sigma\")\n    print(Sigma)\n    print(\"V\")\n    print(V)\n    ```", "```py\n    U\n    [[-0.9486833  -0.31622777]\n     [-0.31622777  0.9486833 ]]\n    Sigma\n    [ 18.97366596   9.48683298]\n    V\n    [[-0.33333333 -0.66666667 -0.66666667]\n     [ 0.66666667  0.33333333 -0.66666667]]\n\n    ```", "```py\n    print(\"Product\\n\", U * np.diag(Sigma) * V)\n    ```", "```py\n    Product\n    [[  4\\.  11\\.  14.]\n     [  8\\.   7\\.  -2.]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"4 11 14;8 7 -2\")\nprint(\"A\\n\", A)\n\nU, Sigma, V = np.linalg.svd(A, full_matrices=False)\n\nprint(\"U\")\nprint(U)\n\nprint(\"Sigma\")\nprint(Sigma)\n\nprint(\"V\")\nprint(V)\n\nprint(\"Product\\n\", U * np.diag(Sigma) * V)\n```", "```py\n    A = np.mat(\"4 11 14;8 7 -2\")\n    print(\"A\\n\", A)\n    ```", "```py\n    A\n    [[ 4 11 14]\n     [ 8  7 -2]]\n\n    ```", "```py\n    pseudoinv = np.linalg.pinv(A)\n    print(\"Pseudo inverse\\n\", pseudoinv)\n    ```", "```py\n    Pseudo inverse\n    [[-0.00555556  0.07222222]\n     [ 0.02222222  0.04444444]\n     [ 0.05555556 -0.05555556]]\n\n    ```", "```py\n    print(\"Check\", A * pseudoinv)\n    ```", "```py\n    Check [[  1.00000000e+00   0.00000000e+00]\n     [  8.32667268e-17   1.00000000e+00]]\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"4 11 14;8 7 -2\")\nprint(\"A\\n\", A)\n\npseudoinv = np.linalg.pinv(A)\nprint(\"Pseudo inverse\\n\", pseudoinv)\n\nprint(\"Check\", A * pseudoinv)\n```", "```py\n    A = np.mat(\"3 4;5 6\")\n    print(\"A\\n\", A)\n    ```", "```py\n    A\n    [[ 3\\.  4.]\n     [ 5\\.  6.]]\n\n    ```", "```py\n    print(\"Determinant\", np.linalg.det(A))\n    ```", "```py\n    Determinant -2.0\n\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\n\nA = np.mat(\"3 4;5 6\")\nprint(\"A\\n\", A)\n\nprint(\"Determinant\", np.linalg.det(A))\n```", "```py\n    x =  np.linspace(0, 2 * np.pi, 30)\n    wave = np.cos(x)\n    ```", "```py\n    transformed = np.fft.fft(wave)\n    ```", "```py\n    print(np.all(np.abs(np.fft.ifft(transformed) - wave) < 10 ** -9))\n    ```", "```py\n    True\n\n    ```", "```py\n    plt.plot(transformed)\n    plt.title('Transformed cosine')\n    plt.xlabel('Frequency')\n    plt.ylabel('Amplitude')\n    plt.grid()\n    plt.show()\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx =  np.linspace(0, 2 * np.pi, 30)\nwave = np.cos(x)\ntransformed = np.fft.fft(wave)\nprint(np.all(np.abs(np.fft.ifft(transformed) - wave) < 10 ** -9))\n\nplt.plot(transformed)\nplt.title('Transformed cosine')\nplt.xlabel('Frequency')\nplt.ylabel('Amplitude')\nplt.grid()\nplt.show()\n```", "```py\n    x =  np.linspace(0, 2 * np.pi, 30)\n    wave = np.cos(x)\n    ```", "```py\n    transformed = np.fft.fft(wave)\n    ```", "```py\n    shifted = np.fft.fftshift(transformed)\n    ```", "```py\n    print(np.all((np.fft.ifftshift(shifted) - transformed) < 10 ** -9))\n    ```", "```py\n    True\n\n    ```", "```py\n    plt.plot(transformed, lw=2, label=\"Transformed\")\n    plt.plot(shifted, '--', lw=3, label=\"Shifted\")\n    plt.title('Shifted and transformed cosine wave')\n    plt.xlabel('Frequency')\n    plt.ylabel('Amplitude')\n    plt.grid()\n    plt.legend(loc='best')\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx =  np.linspace(0, 2 * np.pi, 30)\nwave = np.cos(x)\ntransformed = np.fft.fft(wave)\nshifted = np.fft.fftshift(transformed)\nprint(np.all(np.abs(np.fft.ifftshift(shifted) - transformed) < 10 ** -9))\n\nplt.plot(transformed, lw=2, label=\"Transformed\")\nplt.plot(shifted, '--', lw=3, label=\"Shifted\")\nplt.title('Shifted and transformed cosine wave')\nplt.xlabel('Frequency')\nplt.ylabel('Amplitude')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    cash = np.zeros(10000)\n    cash[0] = 1000\n    outcome = np.random.binomial(9, 0.5, size=len(cash))\n    ```", "```py\n    for i in range(1, len(cash)):\n       if outcome[i] < 5:\n          cash[i] = cash[i - 1] - 1\n       elif outcome[i] < 10:\n          cash[i] = cash[i - 1] + 1\n       else:\n          raise AssertionError(\"Unexpected outcome \" + outcome)\n\n    print(outcome.min(), outcome.max())\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ncash = np.zeros(10000)\ncash[0] = 1000\nnp.random.seed(73)\noutcome = np.random.binomial(9, 0.5, size=len(cash))\n\nfor i in range(1, len(cash)):\n   if outcome[i] < 5:\n      cash[i] = cash[i - 1] - 1\n   elif outcome[i] < 10:\n      cash[i] = cash[i - 1] + 1\n   else:\n      raise AssertionError(\"Unexpected outcome \" + outcome)\n\nprint(outcome.min(), outcome.max())\n\nplt.plot(np.arange(len(cash)), cash)\nplt.title('Binomial simulation')\nplt.xlabel('# Bets')\nplt.ylabel('Cash')\nplt.grid()\nplt.show()\n```", "```py\n    points = np.zeros(100)\n    outcomes = np.random.hypergeometric(25, 1, 3, size=len(points))\n    ```", "```py\n    for i in range(len(points)):\n       if outcomes[i] == 3:\n          points[i] = points[i - 1] + 1\n       elif outcomes[i] == 2:\n          points[i] = points[i - 1] - 6\n       else:\n          print(outcomes[i])\n    ```", "```py\nfrom __future__ import print_function\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npoints = np.zeros(100)\nnp.random.seed(16)\noutcomes = np.random.hypergeometric(25, 1, 3, size=len(points))\n\nfor i in range(len(points)):\n   if outcomes[i] == 3:\n      points[i] = points[i - 1] + 1\n   elif outcomes[i] == 2:\n      points[i] = points[i - 1] - 6\n   else:\n      print(outcomes[i])\n\nplt.plot(np.arange(len(points)), points)\nplt.title('Game show simulation')\nplt.xlabel('# Rounds')\nplt.ylabel('Score')\nplt.grid()\nplt.show()\n```", "```py\n    N=10000\n    normal_values = np.random.normal(size=N)\n    ```", "```py\n    _, bins, _ = plt.hist(normal_values, np.sqrt(N), normed=True, lw=1)\n    sigma = 1\n    mu = 0\n    plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * sigma**2) ),lw=2)\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN=10000\n\nnp.random.seed(27)\nnormal_values = np.random.normal(size=N)\n_, bins, _ = plt.hist(normal_values, np.sqrt(N), normed=True, lw=1, label=\"Histogram\")\nsigma = 1\nmu = 0\nplt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) * np.exp( - (bins - mu)**2 / (2 * sigma**2) ), '--', lw=3, label=\"PDF\")\nplt.title('Normal distribution')\nplt.xlabel('Value')\nplt.ylabel('Normalized Frequency')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    N=10000\n    lognormal_values = np.random.lognormal(size=N)\n    ```", "```py\n    _, bins, _ = plt.hist(lognormal_values, np.sqrt(N), normed=True, lw=1)\n    sigma = 1\n    mu = 0\n    x = np.linspace(min(bins), max(bins), len(bins))\n    pdf = np.exp(-(numpy.log(x) - mu)**2 / (2 * sigma**2))/ (x * sigma * np.sqrt(2 * np.pi))\n    plt.plot(x, pdf,lw=3)\n    plt.show()\n    ```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN=10000\nnp.random.seed(34)\nlognormal_values = np.random.lognormal(size=N)\n_, bins, _ = plt.hist(lognormal_values, np.sqrt(N), normed=True, lw=1, label=\"Histogram\")\nsigma = 1\nmu = 0\nx = np.linspace(min(bins), max(bins), len(bins))\npdf = np.exp(-(np.log(x) - mu)**2 / (2 * sigma**2))/ (x * sigma * np.sqrt(2 * np.pi))\nplt.xlim([0, 15])\nplt.plot(x, pdf,'--', lw=3, label=\"PDF\")\nplt.title('Lognormal distribution')\nplt.xlabel('Value')\nplt.ylabel('Normalized frequency')\nplt.grid()\nplt.legend(loc='best')\nplt.show()\n```", "```py\n    $ ipython\n    In [1]: import numpy as np\n\n    ```", "```py\n    In [2]: N = 500\n\n    In [3]: np.random.seed(52)\n\n    In [4]: data = np.random.normal(size=N)\n\n    ```", "```py\n    In [5]: data.mean()\n    Out[5]: 0.07253250605445645\n\n    ```", "```py\n    In [6]: bootstrapped = np.random.choice(data, size=(N, 100))\n\n    In [7]: means = bootstrapped.mean(axis=0)\n\n    In [8]: means.shape\n    Out[8]: (100,)\n\n    ```", "```py\n    In [9]: means.mean()\n    Out[9]: 0.067866373318115278\n\n    In [10]: means.var()\n    Out[10]: 0.001762807104774598\n\n    In [11]: means.std()\n    Out[11]: 0.041985796464692651\n\n    ```", "```py\n    In [12]: (data.mean() - means.mean())/means.std()\n    Out[12]: 0.11113598238549766\n\n    ```"]