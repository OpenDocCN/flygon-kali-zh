- en: Chapter 4. Building Custom Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。构建自定义小部件
- en: 'The main objective of this chapter is to develop a custom widget that can perform
    a spatial query and display the results in a simple HTML table. In the process
    of building the custom widget, you will learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是开发一个自定义小部件，可以执行空间查询并在简单的HTML表格中显示结果。在构建自定义小部件的过程中，您将学习以下主题：
- en: How to create a simple class using dojo
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用道场创建一个简单的类
- en: How to configure dojo globally
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何全局配置道场
- en: What is the lifecycle of a dojo widget
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 道场小部件的生命周期是什么
- en: How to create a template widget
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建模板小部件
- en: How to provide support for internationalization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为国际化提供支持
- en: How to organize the dojo code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何组织道场代码
- en: How the draw toolbar works
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图工具栏的工作原理
- en: How to build the custom widget using all the features discussed in the chapter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用本章讨论的所有功能构建自定义小部件
- en: Creating a simple class
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的类
- en: Dojo classes provide a way to inherit and extend other modules to use templating
    as well as create widgets. Classes in dojo reside within a module and the module
    returns the class declaration. To declare classes within a module, we need to
    load a module named `dojo/_base/declare`, which provides support for declaring
    classes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Dojo类提供了一种继承和扩展其他模块以使用模板并创建小部件的方法。道场中的类位于一个模块中，并且模块返回类声明。要在模块中声明类，我们需要加载一个名为`dojo/_base/declare`的模块，该模块提供了声明类的支持。
- en: 'The following screenshot shows a simple dojo class declaration:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了一个简单的道场类声明：
- en: '![Creating a simple class](graphics/B04959_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个简单的类](graphics/B04959_04_01.jpg)'
- en: 'In this screenshot, `declare` is the callback function decoration for the `dojo/_base/declare`
    module. The class declaration accepts three arguments: *classname*, *superclass*,
    and *properties*.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，`declare`是`dojo/_base/declare`模块的回调函数装饰。类声明接受三个参数：*classname*、*superclass*和*properties*。
- en: The classname argument is optional. When a classname string is provided, the
    declaration is called a **named class**. When it is omitted, as in our case, it
    is called an **anonymous class**. We will stick with using anonymous classes for
    a while as named classes must be used only under particular conditions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: classname参数是可选的。当提供了一个classname字符串时，声明被称为**命名类**。当它被省略时，就像我们的情况一样，它被称为**匿名类**。我们将继续使用匿名类，因为命名类必须在特定条件下使用。
- en: The superclass is the module or an array of modules that we would like to extend.
    If the superclass argument is null (as in our snippet), it means that our class
    declaration itself is a superclass.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 超类是我们想要扩展的模块或模块数组。如果超类参数为null（如我们的片段中），这意味着我们的类声明本身就是一个超类。
- en: The third argument in the class declaration is the class properties. We can
    define the class constructor, other class properties, and class methods here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类声明中的第三个参数是类属性。我们可以在这里定义类构造函数、其他类属性和类方法。
- en: Configuring dojo
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置道场
- en: Dojo has a global object named `dojoConfig` which holds all the configuration
    parameters. We can modify the `dojoConfig` object to configure options and default
    behavior for the various aspects of the dojo toolkit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Dojo有一个名为`dojoConfig`的全局对象，其中包含所有的配置参数。我们可以修改`dojoConfig`对象来配置选项和默认行为，以适应道场工具包的各个方面。
- en: The `dojoConfig` object lets us define the location for the custom modules defined
    in our web application and tags it with a package name. So, when we need to load
    these custom modules, we can refer to the folder location using the package name
    instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`dojoConfig`对象让我们定义在我们的Web应用程序中定义的自定义模块的位置，并使用包名标记它。因此，当我们需要加载这些自定义模块时，我们可以使用包名来引用文件夹位置。'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `dojoConfig` object must be declared before referencing the Esri JS API.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在引用Esri JS API之前，必须声明`dojoConfig`对象。
- en: '![Configuring dojo](graphics/B04959_04_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![配置道场](graphics/B04959_04_02.jpg)'
- en: There are other configuration options such as `async`, `parseOnLoad`, `waitSeconds`,
    and `cacheBust`. For detailed information on the `dojoConfig` topic, refer to
    the dojo toolkit documentation at [https://dojotoolkit.org/documentation/tutorials/1.10/dojo_config/](https://dojotoolkit.org/documentation/tutorials/1.10/dojo_config/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他配置选项，如`async`、`parseOnLoad`、`waitSeconds`和`cacheBust`。有关`dojoConfig`主题的详细信息，请参阅道场工具包文档[https://dojotoolkit.org/documentation/tutorials/1.10/dojo_config/](https://dojotoolkit.org/documentation/tutorials/1.10/dojo_config/)。
- en: The `async` option defines whether the dojo core should be loaded asynchronously.
    The recommended value is `true`.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`async`选项定义了道场核心是否应异步加载。推荐的值是`true`。'
- en: The `locale` option lets us override the default language provided to dojo by
    the browser. This will help us develop the app for a different target locale and
    test our widgets for the internationalization support using dojo's `i18n` module.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`选项允许我们覆盖浏览器提供给道场的默认语言。这将帮助我们为不同的目标语言环境开发应用程序，并使用道场的`i18n`模块测试我们的小部件是否支持国际化。'
- en: The `cacheBust` option is a very useful option, which when configured to `true`,
    appends the time string to each URL from the module, thus avoiding module caching.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cacheBust`选项是一个非常有用的选项，当配置为`true`时，将时间字符串附加到模块的每个URL，从而避免模块缓存。'
- en: 'Let''s see how these options work out for us:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些选项对我们有什么作用：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Configuring dojo](graphics/B04959_04_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![配置道场](graphics/B04959_04_03.jpg)'
- en: Effect of configuring cacheBust to True in the dojoConfig object
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`dojoConfig`对象中将cacheBust配置为True的效果
- en: Developing a standalone widget
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发独立的小部件
- en: 'Developing standalone widgets is the main purpose of writing classes in dojo.
    Dojo exclusively provides us a module for supporting the development of widgets:
    `dijit/_WidgetBase`. We also need other ancillary modules such as `dijit` templating
    modules, the dojo parse, and dojo internationalization modules to develop a full-fledged
    widget in a web application.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在道场中编写类的主要目的是开发独立的小部件。道场专门为我们提供了一个支持小部件开发的模块：`dijit/_WidgetBase`。我们还需要其他辅助模块，如`dijit`模板模块、道场解析和道场国际化模块，以在Web应用程序中开发一个完整的小部件。
- en: The key aspect associated with the `WidgetBase` module is the concept of the
    life cycle of a widget. The widget life cycle gives us methods to work with during
    the different stages of the widget, that is, from the initialization of the widget,
    to the stage when its `dom` nodes are fully loaded and utilizable by the application,
    until the destruction of the widget.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`WidgetBase`模块关联的关键方面是小部件的生命周期概念。小部件的生命周期为我们提供了在小部件的不同阶段使用的方法，即从小部件的初始化，到其`dom`节点完全加载并可被应用程序利用，直到小部件的销毁。'
- en: 'This module should be passed in as a superclass array in the class declaration.
    Here is the snippet for a basic widget:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块应作为类声明中的超类数组传递。以下是一个基本小部件的片段：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The dijit life cycle
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dijit生命周期
- en: 'The `_WidgetBase` option provides several methods that the program flow will
    execute in a particular sequence. Some of the most important methods executed
    in order are shown in the following infographic:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`_WidgetBase`选项提供了程序流将按特定顺序执行的几种方法。按顺序执行的一些最重要的方法如下信息图所示：'
- en: '![The dijit life cycle](graphics/B04959_04_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![dijit生命周期](graphics/B04959_04_04.jpg)'
- en: The widget lifecycle infographic
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件生命周期信息图
- en: 'The preceding diagram can be described as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表可以描述如下：
- en: '**constructor**: This is the first method called when the widget is instantiated.
    The `constructor` function can used as a special property named `domNode`. This
    can contain the value of the reference to `domNode` where the widget will be placed.
    The first argument for the `constructor` function will be an `options` object
    to which we can send any object value we would like to send to the widget:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**constructor**：这是小部件实例化时调用的第一个方法。`constructor`函数可以用作一个名为`domNode`的特殊属性。这可以包含对`domNode`的引用，小部件将放置在其中。`constructor`函数的第一个参数将是一个`options`对象，我们可以向其中发送任何我们想发送给小部件的对象值：'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**postCreate**: This method is executed just after all the properties of the
    widget are executed. All the event handlers for the widget will be defined here.
    A particular line of code should be added in the `postCreate()` method so that
    all the definitions made in `WidgetBase` will be inherited properly. In the following
    code snippet, the particular line of code has been highlighted:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**postCreate**：此方法在小部件的所有属性执行后立即执行。所有小部件的事件处理程序将在此处定义。应在`postCreate()`方法中添加一行特定的代码，以便所有在`WidgetBase`中定义的定义都能正确继承。在下面的代码片段中，已经突出显示了特定的代码行：'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**postCreate()**: This method is also the right place to host the special `this.own()`
    method. The event handler defined within this method will release event handles
    when the instance of the widget is destroyed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**postCreate()**：这个方法也是托管特殊`this.own()`方法的正确位置。在此方法中定义的事件处理程序将在小部件实例被销毁时释放事件处理程序。'
- en: '**Startup**: This method is fired after the dom nodes are constructed. So,
    any modification to the dom node will be done here. This is the method through
    which the widget will be called externally for execution.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Startup**：此方法在构造完dom节点后触发。因此，任何对dom节点的修改都将在此处完成。这是通过该方法外部调用小部件执行的方法。'
- en: Creating templated widgets
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模板化小部件
- en: 'Templated widgets are ones that allow the developer to load an HTML file as
    a template string at runtime. All the dom nodes specific to the widget should
    be defined in this HTML template. Dojo provides two more modules to make our experience
    of using templates easier and more efficient. These modules are named `dijit/_TemplatedMixin`
    and `dijit/_WidgetsInTemplateMixin`. Apart from these two modules, we also need
    to load a dojo plugin named `dojo/text!`, which actually loads the HTML page as
    a template string. The way the plugin works is that the HTML file path should
    be appended after the exclamation (`!`) in `dojo/text!`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 模板化小部件允许开发人员在运行时将HTML文件作为模板字符串加载。所有特定于小部件的dom节点都应在此HTML模板中定义。Dojo提供了另外两个模块，以使我们使用模板更轻松、更高效。这些模块名为`dijit/_TemplatedMixin`和`dijit/_WidgetsInTemplateMixin`。除了这两个模块，我们还需要加载一个名为`dojo/text!`的dojo插件，它实际上将HTML页面加载为模板字符串。插件的工作方式是在`dojo/text!`中的感叹号(`!`)后附加HTML文件路径：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The class properties should include a specific property named `templateString`.
    The value of the this property will be the callback function decoration used to
    represent the `dojo/text!<filename.html>` plugin.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性应包括一个名为`templateString`的特定属性。此属性的值将是用于表示`dojo/text!<filename.html>`插件的回调函数装饰。
- en: 'Let''s see a basic code snippet that covers all the topics discussed previously
    and tries to develop a template widget:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个基本的代码片段，涵盖了之前讨论的所有主题，并尝试开发一个模板小部件：
- en: '![Creating templated widgets](graphics/B04959_04_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![创建模板化小部件](graphics/B04959_04_05.jpg)'
- en: Our template file is very innocuous, containing a simple `h1` header tag. It
    is this HTML string that the `templateString` property holds.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模板文件非常无害，只包含一个简单的`h1`标题标签。正是`templateString`属性保存了这个HTML字符串。
- en: 'The contents of the `app_widgets/widgettemplate/template/_widget.html` file
    are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`app_widgets/widgettemplate/template/_widget.html`文件的内容如下：'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s see how to instantiate this widget. As mentioned earlier, we need
    to call the `startup` method in the widget to execute this widget. We will call
    this from another JavaScript file, which will pass a reference to the dom node
    where our widget will be placed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何实例化这个小部件。如前所述，我们需要在小部件中调用`startup`方法来执行此小部件。我们将从另一个JavaScript文件中调用这个方法，该文件将传递一个对dom节点的引用，其中我们的小部件将被放置：
- en: '![Creating templated widgets](graphics/B04959_04_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建模板化小部件](graphics/B04959_04_06.jpg)'
- en: Contents of /js/widgets/app.js
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: /js/widgets/app.js的内容
- en: 'This file will be called from the `index.html` file, which has the `dom` element
    named `templatedWidgetDiv`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件将从`index.html`文件中调用，该文件具有名为`templatedWidgetDiv`的`dom`元素：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Widget folder structure
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件文件夹结构
- en: It is now time to discuss the widget folder structure. When developing large
    projects, the folder structure is an important part of the project-building exercise
    that we need to define at the initial stage of the project itself. We will be
    providing general guidelines on how to decide upon the folder structure. This
    can be modified to suit your preferences and project needs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是讨论小部件文件夹结构的时候了。在开发大型项目时，文件夹结构是项目构建过程的重要部分，我们需要在项目的初始阶段定义。我们将提供关于如何决定文件夹结构的一般指导方针。这可以根据您的偏好和项目需求进行修改。
- en: Guidelines for creating project folders
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目文件夹的指南
- en: 'The guideline for creating project folders are describe in the following diagram:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目文件夹的指南如下图所示：
- en: '![Guidelines for creating project folders](graphics/B04959_04_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目文件夹的指南](graphics/B04959_04_07.jpg)'
- en: Let's discuss each of these in a detailed manner.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论每一个。
- en: Creating a single point of entry
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建单一入口点
- en: We need not crowd the index page with all widget instantiation. It's better
    if we can define a module that can serve as the single point of entry to instantiate
    all the widgets we need.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要在索引页面上拥挤所有小部件的实例化。最好是我们可以定义一个模块，可以作为实例化我们需要的所有小部件的单一入口点。
- en: 'Our HTML page will only contain a reference to the JS API and this single point
    of entry JavaScript module:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 HTML 页面将只包含对 JS API 和这个单一入口 JavaScript 模块的引用：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The contents of the file serving as the single-point-of-entry are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为单一入口点的文件的内容如下：
- en: '![Creating a single point of entry](graphics/B04959_04_08.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![创建单一入口点](graphics/B04959_04_08.jpg)'
- en: Defining dojoConfig
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义 dojoConfig
- en: We discussed this earlier. The `dojoConfig` object will be declared in the index
    page itself. This is a global object whose values can be accessed anywhere in
    the program by loading the module named `dojo/_base/config`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过这一点。`dojoConfig` 对象将在索引页面中声明。这是一个全局对象，其值可以通过加载名为 `dojo/_base/config`
    的模块在程序的任何地方访问。
- en: Modularizing the code
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化代码
- en: This is the core tenet of the AMD pattern of coding. The concept of modularizing
    means that we should decouple any code that is functionally different. As we know,
    the dojo modules return a publicly accessible object. This object can be a class
    declaration, as we saw earlier. A different use of the module is that this can
    be used as a configuration file for the application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 AMD 编码模式的核心原则。模块化的概念意味着我们应该解耦任何功能上不同的代码。正如我们所知，dojo 模块返回一个可公开访问的对象。这个对象可以是一个类声明，就像我们之前看到的那样。模块的另一个用途是可以用作应用程序的配置文件。
- en: 'A sample `config` file that has been created off a dojo module has been provided
    for your reference:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 已经创建了一个基于 dojo 模块的示例 `config` 文件供您参考：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Providing support for internationalization
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供国际化支持
- en: Customizing the text that is shown in the app according to the locale of the
    user is known as **internationalization**. Dojo provides a plugin named `dojo/i18n!`
    to provide this support. When we mention plugin, it means that it expects a file
    path as an argument after the exclamation mark (`!`). The file path refers to
    a JavaScript module, which mentions an object named `root` and lists all the supported
    locales.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户的区域设置自定义应用程序中显示的文本称为**国际化**。Dojo 提供了一个名为 `dojo/i18n!` 的插件来提供这种支持。当我们提到插件时，这意味着它在感叹号
    (`!`) 之后期望一个文件路径作为参数。文件路径指的是一个 JavaScript 模块，其中提到了一个名为 `root` 的对象，并列出了所有支持的区域设置。
- en: For example, `dojo/i18n!app_widgets/widget_i18n/nls/strings` refers to the `strings`
    module defined within the `app_widgets/widget_i18n/nls` folder (remember that
    `app_widgets` is the name package referring to the `/js/widgets` location).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`dojo/i18n!app_widgets/widget_i18n/nls/strings` 指的是在 `app_widgets/widget_i18n/nls`
    文件夹中定义的 `strings` 模块（请记住 `app_widgets` 是指向 `/js/widgets` 位置的包名称）。
- en: The current locale is determined by the user's browser. A `locale` in dojo is
    usually a five-letter string; the first two characters represent the language,
    the third character is a hyphen, and the last two characters represent the country.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的区域设置由用户的浏览器确定。在 dojo 中，`locale` 通常是一个五个字母的字符串；前两个字符代表语言，第三个字符是连字符，最后两个字符代表国家。
- en: 'For example, take a look at the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看一下以下内容：
- en: The `en-us` value represents English as the language and the US as the country
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`en-us` 值代表英语作为语言和美国作为国家'
- en: The `ja-jp` value represents Japanese as the language and Japan as the country
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ja-jp` 值代表日语作为语言和日本作为国家'
- en: The `zh-cn` value represents Simplified Chinese as the language and China as
    the country
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zh-cn` 值代表简体中文作为语言和中国作为国家'
- en: The `zh-tw` value represents Simplified Chinese as the language and Taiwan as
    the country![Providing support for internationalization](graphics/B04959_04_09.jpg)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zh-tw` 值代表简体中文作为语言和台湾作为国家![提供国际化支持](graphics/B04959_04_09.jpg)'
- en: Steps to provide internationalization support
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提供国际化支持的步骤
- en: 'The steps to provide internationalization support are as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 提供国际化支持的步骤如下：
- en: Create a folder named `nls` in the folder where the widget resides.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在小部件所在的文件夹中创建一个名为 `nls` 的文件夹。
- en: 'Define a module that has an object named `root` and lists all the locales supported
    below the `root` object. For example, take a look at the following:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个具有名为 `root` 的对象并在 `root` 对象下列出所有支持的区域设置的模块。例如，看一下以下内容：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `root` object will contain all the string variables for which language support
    is provided, for example, `widgetTitle` and `description`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`root` 对象将包含所有支持语言的字符串变量，例如 `widgetTitle` 和 `description`。'
- en: Create a folder for each locale defined, such as `zh-cn` and `de-at`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个定义的区域设置创建一个文件夹，例如 `zh-cn` 和 `de-at`。
- en: Create a module with the same name as that of the `root` module in each of the
    `language` folders.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个 `language` 文件夹中创建与 `root` 模块同名的模块。
- en: The new modules will contain all the properties of the `root` object. The value
    of the properties will contain the language-specific translation of the corresponding
    values.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新模块将包含`root`对象的所有属性。属性的值将包含相应值的特定语言翻译。
- en: Load the module named `dojo/i18n!` appended with the path to the root module.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载名为`dojo/i18n!`的模块，后面跟上根模块的路径。
- en: 'In the `declare` constructor, assign the `callback` function declaration of
    the `i18n` module to the property named `this.nls`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`declare`构造函数中，将`i18n`模块的`callback`函数声明分配给名为`this.nls`的属性：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An overview of the widget folder structure
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小部件文件夹结构概述
- en: 'Let''s review the `widget` folder structure once again so that we can use this
    as a template before starting any project:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次审查`widget`文件夹结构，以便在开始任何项目之前将其用作模板：
- en: We need a main file (say `index.html`). The main file should have the `dojoConfig`
    object, a reference to all the CSS used in the app, and the Esri CSS. It should
    also have a reference to the API and a reference to the module, which serves as
    the point of entry (`app.js`).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个主文件（比如`index.html`）。主文件应该有`dojoConfig`对象，引用应用程序中使用的所有CSS，以及Esri CSS。它还应该有对API的引用和对作为入口点的模块的引用（`app.js`）。
- en: All widgets go into the `js` folder.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有小部件都放在`js`文件夹中。
- en: All the site-wide CSS and images go into the `CSS` and `image` folders in the
    application `root` directory, respectively.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有站点范围的CSS和图像分别放入应用程序`root`目录中的`CSS`和`image`文件夹中。
- en: All the widgets will be placed within the `widgets` folder inside the `js` folder.
    Each widget can be placed within a separate folder within the `widgets` folder
    too.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有小部件将放置在`js`文件夹内的`widgets`文件夹中。每个小部件也可以放置在`widgets`文件夹内的单独文件夹中。
- en: Templates will be placed inside the `template` folder within the `widget` folder.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板将放置在`widget`文件夹内的`template`文件夹中。
- en: Place the resources needed for internationalization within a folder named `nls`:![An
    overview of the widget folder structure](graphics/B04959_04_10.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将国际化所需的资源放在名为`nls`的文件夹中：![小部件文件夹结构概述](graphics/B04959_04_10.jpg)
- en: Building a custom widget
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义小部件
- en: 'We will extend the app that we developed in the last chapter with advanced
    functionalities and modularized code refactoring. Let''s create a custom widget
    in the app that does the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展上一章中开发的应用程序，添加高级功能和模块化的代码重构。让我们在应用程序中创建一个自定义小部件，该小部件可以执行以下操作：
- en: Allows the user to draw a polygon on the map. The polygon will be symbolized
    by a semi-transparent red fill and a dashed yellow outline.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户在地图上绘制多边形。多边形将以半透明红色填充和虚线黄色轮廓进行符号化。
- en: The polygon should fetch all the major wildfire events within the boundary of
    the polygon.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多边形应该获取多边形边界内的所有重大森林火灾事件。
- en: This shall be shown as a graphic and the data should be in a grid.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将显示为图形，数据应该在网格中。
- en: Internationalization support must be provided.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须提供国际化支持。
- en: Modules required for the widget
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小部件所需的模块
- en: Let's list the modules required to define classes and their corresponding intended
    callback function decoration.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出定义类及其相应预期回调函数装饰所需的模块。
- en: Modules for the class declaration and OOPS
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于类声明和OOPS的模块
- en: '| Modules | Values |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dojo/_base/declare` | `declare` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/_base/declare` | `declare` |'
- en: '| `dijit/_WidgetBase` | `_WidgetBase` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `dijit/_WidgetBase` | `_WidgetBase` |'
- en: '| `dojo/_base/lang` | `lang` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/_base/lang` | `lang` |'
- en: Modules for using HTML templates
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用HTML模板的模块
- en: '| Modules | Values |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dijit/_TemplatedMixin` | `_TemplatedMixin` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `dijit/_TemplatedMixin` | `_TemplatedMixin` |'
- en: '| `dojo/text!` | `dijitTemplate` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/text!` | `dijitTemplate` |'
- en: Module for using event
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于使用事件的模块
- en: '| Modules | Values |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dojo/on` | `on` |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/on` | `on` |'
- en: '| `dijit/a11yclick` | `a11yclick` |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `dijit/a11yclick` | `a11yclick` |'
- en: Modules for manipulating dom elements and their styles
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于操作dom元素及其样式的模块
- en: '| Modules | Values |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dojo/dom-style` | `domStyle` |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/dom-style` | `domStyle` |'
- en: '| `dojo/dom-class` | `domClass` |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/dom-class` | `domClass` |'
- en: '| `dojo/domReady!` |   |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/domReady!` |   |'
- en: Modules for using the draw toolbar and displaying graphics
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于使用绘制工具栏和显示图形的模块
- en: '| Modules | Values |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `esri/toolbars/draw` | `Draw` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `esri/toolbars/draw` | `Draw` |'
- en: '| `esri/symbols/SimpleFillSymbol` | `SimpleFillSymbol` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `esri/symbols/SimpleFillSymbol` | `SimpleFillSymbol` |'
- en: '| `esri/symbols/SimpleLineSymbol` | `SimpleLineSymbol` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `esri/symbols/SimpleLineSymbol` | `SimpleLineSymbol` |'
- en: '| `esri/graphic` | `Graphic` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `esri/graphic` | `Graphic` |'
- en: '| `dojo/_base/Color` | `Color` |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/_base/Color` | `Color` |'
- en: Modules for querying data
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于查询数据的模块
- en: '| Modules | Values |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `esri/tasks/query` | `Query` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `esri/tasks/query` | `Query` |'
- en: '| `esri/tasks/QueryTask` | `QueryTask` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `esri/tasks/QueryTask` | `QueryTask` |'
- en: Modules for internationalization support
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 国际化支持的模块
- en: '| Modules | Values |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 模块 | 值 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `dojo/i18n!` | `nls` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `dojo/i18n!` | `nls` |'
- en: Using the draw toolbar
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用绘制工具栏
- en: 'The draw toolbar enables us to draw graphics on the map. This toolbar has events
    associated with it. When a draw operation is completed, it returns the object
    drawn on the map as geometry. Follow these steps to create a graphic using the
    draw toolbar:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制工具栏使我们能够在地图上绘制图形。此工具栏与事件相关联。完成绘制操作后，它将返回在地图上绘制的对象作为几何图形。按照以下步骤使用绘制工具栏创建图形：
- en: '![Using the draw toolbar](graphics/B04959_04_11.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![使用绘制工具栏](graphics/B04959_04_11.jpg)'
- en: Initiating the draw toolbar
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化绘制工具栏
- en: 'The draw toolbar is provided by the module called `esri/toolbars/draw`. The
    draw toolbar accepts the map object as an argument. Instantiate the draw toolbar
    within the `postCreate` function. The draw toolbar also accepts an additional
    optional argument named `options`. One of the properties in the `options` object
    is named `showTooltips`. This can be set to `true` so that we can see a tooltip
    associated while drawing. The text in the tooltip can be customized. Otherwise,
    a default tooltip associated with draw geometry is displayed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图工具栏由名为`esri/toolbars/draw`的模块提供。绘图工具栏接受地图对象作为参数。在`postCreate`函数中实例化绘图工具栏。绘图工具栏还接受一个名为`options`的额外可选参数。`options`对象中的一个属性名为`showTooltips`。这可以设置为`true`，以便在绘制时看到相关的工具提示。工具提示中的文本可以自定义。否则，将显示与绘制几何图形相关的默认工具提示：
- en: '[PRE11]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The draw toolbar can be activated on the `click` or `touch` event (in case of
    smart phones or tablets) of a button, which is intended to indicate the start
    of a `draw` event. Dojo provides a module that takes care of `touch` as well as
    `click` events. The module is named `dijit/a11yclick`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图工具栏可以在按钮的“单击”或“触摸”事件（在智能手机或平板电脑上）上激活，该按钮旨在指示“绘制”事件的开始。Dojo提供了一个模块，可以处理“触摸”和“单击”事件。该模块名为`dijit/a11yclick`。
- en: To activate the draw toolbar, we need to provide the type of symbol to draw.
    The draw toolbar provides a list of constants, which corresponds to the type of
    the draw symbol. These constants are `POINT`, `POLYGON`, `LINE`, `POLYLINE`, `FREEHAND_POLYGON`,
    `FREEHAND_POLYLINE`, `MULTI_POINT`, `RECTANGLE`, `TRIANGLE`, `CIRCLE`, `ELLIPSE`,
    `ARROW`, `UP_ARROW`, `DOWN_ARROW`, `LEFT_ARROW`, and `RIGHT_ARROW`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活绘图工具栏，我们需要提供要绘制的符号类型。绘图工具栏提供了一组常量，对应于绘制符号的类型。这些常量是`POINT`，`POLYGON`，`LINE`，`POLYLINE`，`FREEHAND_POLYGON`，`FREEHAND_POLYLINE`，`MULTI_POINT`，`RECTANGLE`，`TRIANGLE`，`CIRCLE`，`ELLIPSE`，`ARROW`，`UP_ARROW`，`DOWN_ARROW`，`LEFT_ARROW`和`RIGHT_ARROW`。
- en: 'While activating the draw toolbar these constants must be used to define the
    type of the draw operation required. Our objective is to draw a polygon at the
    click of a draw button. The code is shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 激活绘图工具栏时，必须使用这些常量来定义所需的绘图操作类型。我们的目标是在单击绘图按钮时绘制多边形。代码如下截图所示：
- en: '![Initiating the draw toolbar](graphics/B04959_04_12.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![初始化绘图工具栏](graphics/B04959_04_12.jpg)'
- en: The draw operation
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘图操作
- en: Once the draw toolbar is activated, the draw operation begins. For point geometry,
    the draw operation is just a single click. For a polyline and a polygon, the single
    click adds a vertex to the polyline, and a double-click ends the sketch. For a
    freehand polyline or polygon, the `click` and `drag` operation draw the geometry
    and a `mouse-up` operation ends the drawing.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦激活绘图工具栏，绘图操作就开始了。对于点几何，绘图操作只需单击一次。对于折线和多边形，单击会向折线添加一个顶点，双击结束草图。对于自由手折线或多边形，“单击”和“拖动”操作绘制几何图形，“松开鼠标”操作结束绘制。
- en: The draw-end event handler
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绘制结束事件处理程序
- en: 'When the draw operation is complete, we need an event handler to do something
    with the shape that was drawn by the draw toolbar. The API provides a `draw-end`
    event, which is fired once the draw operation is complete. This event handler
    must be connected to the draw toolbar. This event handler will be defined within
    the `this.own()` function inside the `postCreate()` method of the widget. The
    event result can be passed to a named or anonymous function:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图操作完成后，我们需要一个事件处理程序来处理绘图工具栏绘制的形状。API提供了一个`draw-end`事件，该事件在绘图操作完成后触发。必须将此事件处理程序连接到绘图工具栏。此事件处理程序将在小部件的`postCreate()`方法中的`this.own()`函数内定义。事件结果可以传递给命名或匿名函数：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Symbolizing the drawn shape
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 符号化绘制的形状
- en: In the `draw-end` event callback function, we will get the geometry of the drawn
    shape as the result object. To add this geometry back to the map, we need to symbolize
    it. A symbol is associated with the geometry that it symbolizes. Also, the styling
    of the symbol is defined by the colors or pictures used to fill up the symbol
    and its size. Just to symbolize a polygon, we need to use the `SimpleFillSymbol`
    and `SimpleLineSymbol` modules. We may also need the `esri/color` module to define
    the fill colors.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在`draw-end`事件回调函数中，我们将以结果对象的形式获得绘制形状的几何图形。要将此几何图形添加回地图，我们需要对其进行符号化。符号与其所代表的几何图形相关联。此外，符号的样式由用于填充符号和其大小的颜色或图片定义。仅需对多边形进行符号化，我们需要使用`SimpleFillSymbol`和`SimpleLineSymbol`模块。我们可能还需要`esri/color`模块来定义填充颜色。
- en: 'Let''s review a snippet to understand this better. This is a simple snippet
    used to construct a symbol for a polygon with a semi-transparent solid red color
    fill and a yellow dash-dot line:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一小段代码，以更好地理解这一点。这是一个简单的代码片段，用于构造一个具有半透明实心红色填充和黄色虚线的多边形符号：
- en: '![Symbolizing the drawn shape](graphics/B04959_04_13.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![符号化绘制的形状](graphics/B04959_04_13.jpg)'
- en: In the preceding screenshot, `SimpleFillSymbol.STYLE_SOLID` and `SimpleLineSymbol.STYLE_DASHDOT`
    are the constants provided by the `SimpleFIllSymbol` and `SimpleLineSymbol` modules
    respectively. These constants are used to style the polygon and the line.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，`SimpleFillSymbol.STYLE_SOLID`和`SimpleLineSymbol.STYLE_DASHDOT`是`SimpleFIllSymbol`和`SimpleLineSymbol`模块提供的常量，用于为多边形和线条设置样式。
- en: 'Two colors are defined in the construction of the symbol: one for filling up
    the polygon and the other for coloring the outline. A color can be defined by
    four components. They are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在符号的构造中定义了两种颜色：一种用于填充多边形，另一种用于着色轮廓。颜色可以由四个组件定义。它们如下：
- en: Red
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色
- en: Green
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色
- en: Blue
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝色
- en: Opacity
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不透明度
- en: The red, green, and blue components takes values from `0` to `255` and the opacity
    takes a value from `0` to `1`. A combination of red, green, and blue components
    can be used to produce any color according to the RGB color theory. So, to create
    a yellow color, we use the maximum of red component (`255`) and the maximum of
    green component (`255`); we don't want the blue component to contribute to our
    color, so we use `0`. An opacity value of `0` means 100% transparency, and an
    opacity value of `1` means 100% opaqueness. We have used `0.2` for the fill color.
    This means that we need our polygon to be 20% opaque, or 80% transparent. The
    default value for this component is `1`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 红色、绿色和蓝色分量的取值范围为`0`到`255`，不透明度的取值范围为`0`到`1`。根据RGB颜色理论，可以使用红色、绿色和蓝色分量的组合来产生任何颜色。因此，要创建黄色，我们使用红色分量的最大值（`255`）和绿色分量的最大值（`255`）；我们不希望蓝色分量对我们的颜色产生影响，所以使用`0`。不透明度值为`0`表示100%透明，不透明度值为`1`表示100%不透明。我们使用`0.2`作为填充颜色。这意味着我们的多边形需要20%的不透明度，或者80%的透明度。该组件的默认值为`1`。
- en: A symbol is just a generic object. This means any polygon geometry can use the
    symbol to render itself. Now, we need a container object to display the drawn
    geometry with the previously defined symbol on the map. A graphic object provided
    by the `esri/Graphic` module acts as a container object, which can accept a geometry
    and symbol. The graphic object can be added to the map's graphic layer.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 符号只是一个通用对象。这意味着任何多边形几何体都可以使用该符号来渲染自己。现在，我们需要一个容器对象在地图上显示以前定义的符号绘制的几何体。由`esri/Graphic`模块提供的图形对象充当容器对象，可以接受几何体和符号。图形对象可以添加到地图的图形图层中。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A graphic layer is always present in the map object, which can be accessed by
    using the `graphics` property of the map (`this.map.graphics`).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 地图对象中始终存在一个图形图层，可以通过使用地图的`graphics`属性（`this.map.graphics`）来访问。
- en: '![Symbolizing the drawn shape](graphics/B04959_04_14.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![对绘制的形状进行符号化](graphics/B04959_04_14.jpg)'
- en: Executing the query
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行查询
- en: 'The widget''s main function is to define and execute a query based on the user''s
    draw input. The following image will provide a general way for us to construct
    a `querytask` and handle the execution:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件的主要功能是根据用户的绘制输入定义和执行查询。以下图像将为我们提供构造`querytask`和处理执行的一般方法：
- en: '![Executing the query](graphics/B04959_04_15.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![执行查询](graphics/B04959_04_15.jpg)'
- en: Initializing the QueryTask and Query object
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化QueryTask和Query对象
- en: 'We will be working with Active Wildfire feature layers that we used in the
    previous chapter. When providing the input geometry, we will be using the geometry
    that we got from the `draw-end` event instead of using the map''s current extent
    geometry, like we did in the previous chapter. We will be fetching all the features
    within the draw geometry, hence we will be using the truthy expression (`1=1`)
    as the `where` clause. The following lines of code explain how the `query` object
    is constructed and how the `queryTask` is executed and stored as a deferred variable:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在上一章中使用的Active Wildfire要素图层。在提供输入几何体时，我们将使用从`draw-end`事件中获取的几何体，而不是使用地图的当前范围几何体，就像我们在上一章中所做的那样。我们将获取绘制几何体内的所有要素，因此我们将使用真值表达式（`1=1`）作为`where`子句。以下代码解释了如何构造`query`对象以及如何执行和存储`queryTask`作为延迟变量：
- en: '[PRE13]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Query event handlers
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询事件处理程序
- en: The `execute` method on the `QueryTask` object returns a deferred variable.
    This means that we should use the `.then()` operation to elicit the task execution
    result. The success handler returns a `featureset`. A `featureset` is an array
    of features. A feature contains a graphic as well as some attributes.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryTask`对象上的`execute`方法返回一个延迟变量。这意味着我们应该使用`.then()`操作来引出任务执行结果。成功处理程序返回一个`featureset`。`featureset`是一组要素。要素包含图形以及一些属性。'
- en: 'Now, there are two operations that we needs to perform to display the query
    results:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有两个操作需要执行以显示查询结果：
- en: Highlight the query result by symbolizing it appropriately and adding it as
    appropriate graphics on the map.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过适当地对查询结果进行符号化并将其添加为地图上的适当图形来突出显示查询结果。
- en: Show the details of Active Wildfires satisfying the query conditions in a simple
    HTML table. The HTML table should come from an HTML template file.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在简单的HTML表格中显示满足查询条件的Active Wildfires的详细信息。HTML表格应该来自HTML模板文件。
- en: Defining the HTML template
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义HTML模板
- en: 'We need an HTML template to render the widget. This widget will have the following
    components:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个HTML模板来渲染小部件。该小部件将具有以下组件：
- en: A button whose `click` event will toggle the draw event
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮的`click`事件将切换绘制事件
- en: A button to clear the draw graphic, as well as the result graphic and the HTML
    table
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮用于清除绘制的图形，以及结果图形和HTML表格
- en: A `dom` element to hold onto the HTML table being constructed
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`dom`元素来保存正在构建的HTML表格。
- en: 'The following screenshot explains how the HTML template is constructed:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图解释了HTML模板的构造方式：
- en: '![Defining the HTML template](graphics/B04959_04_16.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![定义HTML模板](graphics/B04959_04_16.jpg)'
- en: 'This HTML file should be loaded as a plugin using the `dojo/text!` plugin.
    Once this is done, all the `dom` elements referred by `dojo-attach-point` can
    be accessed in the code using this notation. Also, functions to handle the click
    events for the `toggleDraw` button and the `clear` button should be implemented.
    The following screenshot shows a barebones implementation of this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 应该使用`dojo/text!`插件将此HTML文件作为插件加载。完成后，可以使用此符号访问代码中由`dojo-attach-point`引用的所有`dom`元素。还应该实现处理`toggleDraw`按钮和`clear`按钮的点击事件的函数。以下屏幕截图显示了这个的基本实现：
- en: '![Defining the HTML template](graphics/B04959_04_17.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![定义HTML模板](graphics/B04959_04_17.jpg)'
- en: Symbolizing query results
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对查询结果进行符号化
- en: 'The features returned by the query are wildfire locations, all of which have
    a point geometry. We can use `SimpleMarkerSymbol` or `PictureMarkerSymbol` to
    symbolize features returned by the query. The `PictureMarker` symbol accepts the
    following properties:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 查询返回的要素是野火位置，所有位置都具有点几何。我们可以使用`SimpleMarkerSymbol`或`PictureMarkerSymbol`来对查询返回的要素进行符号化。`PictureMarker`符号接受以下属性：
- en: '`angle`'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angle`'
- en: '`xoffset`'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xoffset`'
- en: '`yoffset`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yoffset`'
- en: '`type`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`'
- en: '`url`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`'
- en: '`contentType`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contentType`'
- en: '`width`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`'
- en: '`height`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`'
- en: 'We will use a PNG resource, which is part of the application to define `PictureMarkerSymbol`:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用应用程序的PNG资源来定义`PictureMarkerSymbol`：
- en: '[PRE14]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding the graphics to the map
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将图形添加到地图
- en: 'All the query result features should be converted into a graphic with the `PictureMarkerSymbol`
    that we just defined. Additionally, we will also be adding an `infotemplate` to
    each graphic. The `infotemplate` content will be taken from query result attributes.
    The HTML table can also be constructed by iterating through the features returned
    by the query result object. The following screenshot illustrates the entire process
    clearly:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有查询结果特征转换为具有我们刚刚定义的`PictureMarkerSymbol`的图形。此外，我们还将为每个图形添加一个`infotemplate`。`infotemplate`的内容将从查询结果属性中获取。可以通过迭代查询结果对象返回的要素来构建HTML表。以下屏幕截图清楚地说明了整个过程：
- en: '![Adding the graphics to the map](graphics/B04959_04_18.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![将图形添加到地图](graphics/B04959_04_18.jpg)'
- en: The complete code listing can be found in the folder called `B049549_04_CODE02`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码清单可以在名为`B049549_04_CODE02`的文件夹中找到。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create classes and custom widgets in dojo,
    and you also learned about the life cycle of a dojo widget. Then, we walked through
    the guidelines for creating a folder structure for any dojo-related project. We
    also looked at how we can provide support for different languages using the internationalization
    feature provide by the dojo module. Finally, we created a custom widget that uses
    a draw tool to accept a user-drawn polygon and uses it to query a feature layer.
    We showed the results in an HTML table as well as on the map. In the following
    chapters, we will be dealing with how to symbolize the graphics better and intuitively
    using a technique known as rendering. Rendering is a great visualization technique
    that lets us define rules to symbolize features differently, based on the value
    of a particular attribute in the feature. In further chapters, we will be extending
    the visualization techniques to cover non-spatial representations of data such
    as charts and graphs.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在dojo中创建类和自定义小部件，还学习了一个dojo小部件的生命周期。然后，我们遵循了为任何与dojo相关的项目创建文件夹结构的指南。我们还看了如何使用dojo模块提供的国际化功能来支持不同的语言。最后，我们创建了一个自定义小部件，该小部件使用绘图工具来接受用户绘制的多边形，并将其用于查询要素图层。我们还在HTML表和地图上显示了结果。在接下来的章节中，我们将学习如何更好地直观地对图形进行符号化，使用一种称为渲染的技术。渲染是一种很好的可视化技术，它让我们能够根据要素中特定属性的值以不同方式对要素进行符号化。在后续章节中，我们将扩展可视化技术，以涵盖数据的非空间表示，如图表和图形。
