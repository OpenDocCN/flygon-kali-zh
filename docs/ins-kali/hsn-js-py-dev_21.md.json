["```js\n{\n  \"rules\": {\n    \"restaurants\": {\n      \"$uid\": {\n        \".write\": \"auth != null && auth.uid == $uid\",\n        \".read\": \"auth != null && auth.uid == $uid\"\n      }\n    }\n  }\n}\n```", "```js\nimport React from 'react'\nimport cookie from \"react-cookies\"\n\nimport Finder from './components/finder/Finder'\nimport SignIn from './components/signIn/SignIn'\n\nimport './App.css'\n\nexport default class App extends React.Component {\n constructor() {\n   super()\n\n   this.state = {\n     user: cookie.load(\"username\")\n   }\n\n   this.setUser = this.setUser.bind(this)\n }\n\n setUser(user) {\n   this.setState({\n     user: user\n   })\n\n   cookie.save(\"username\", user)\n }\n\n render() {\n   const { user } = this.state\n   return (\n     <div className=\"App\">\n       { (user) ? <Finder user={user} /> : <SignIn setUser={this.setUser}\n     /> }\n     </div>\n   )\n }\n}\n```", "```js\nimport React from 'react'\nimport { Button } from 'react-bootstrap'\nimport * as firebase from 'firebase'\n\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nexport default class SignIn extends React.Component {\n constructor() {\n   super()\n\n   this.login = this.login.bind(this)\n }\n\n login() {\n   const self = this\n\n   firebase.auth().signInWithPopup(provider).then(function (result) {\n     // This gives you a Google Access Token. You can use it to access the\n     // Google API.\n     var token = result.credential.accessToken;\n     // The signed-in user info.\n     self.props.setUser(result.user);\n     // ...\n   }).catch(function (error) {\n     // Handle Errors here.\n     var errorCode = error.code;\n     var errorMessage = error.message;\n     // The email of the user's account used.\n     var email = error.email;\n     // The firebase.auth.AuthCredential type that was used.\n     var credential = error.credential;\n     // ...\n   });\n }\n render() {\n   return <Button onClick={this.login}>Sign In</Button>\n }\n}\n```", "```js\ngetRestaurants() {\n   const { user } = this.props\n\n   Database.ref(`/restaurants/${user.uid}`).on('value', (snapshot) => {\n     const restaurants = []\n\n     const data = snapshot.val()\n\n     for(let restaurant in data) {\n       restaurants.push(data[restaurant])\n     }\n     this.setState({\n       restaurants: restaurants\n     })\n   })\n }\n```", "```js\n{\n  \"rules\": {\n    \"restaurants\": {\n      \"$uid\": {\n        \".write\": \"auth != null && auth.uid == $uid\",\n        \".read\": \"auth != null && auth.uid == $uid\"\n      }\n    }\n  }\n}\n```", "```js\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env*\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n```", "```js\nIF NOT a React page,\n Serve from proxy\nELSE\n Serve React\n```", "```js\nIF NOT an Express route,\n Serve from static build\nELSE\n Serve API\n```", "```js\n\"postinstall\": \"cd client && npm install && npm run build\",\n\"start\": \"node api/api.js\"\n```", "```js\nweb: npm start\n```", "```js\n.\n\u251c\u2500\u2500 Procfile\n\u251c\u2500\u2500 api\n\u2502   \u2514\u2500\u2500 api.js\n\u251c\u2500\u2500 client\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 package-lock.json\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 src\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 package.json\n```", "```js\nconst yelp = require('yelp-fusion');\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\nrequire('dotenv').config();\n\nconst PORT = process.env.PORT || 3000;\n\nconst client = yelp.client(process.env.YELP_API_Key);\n```", "```js\napp.use(express.static(path.join(__dirname, '../client/build')));\n```", "```js\napp.get('/search', (req, res) => {\n const { lat, lng, value } = req.query\n\n client.search({\n   term: value,\n   latitude: lat,\n   longitude: lng,\n   categories: 'Restaurants'\n }).then(response => {\n   res.statusCode = 200;\n   res.setHeader('Content-Type', 'application/json');\n   res.setHeader('Access-Control-Allow-Origin', '*');\n\n   res.write(response.body);\n   res.end();\n })\n   .catch(e => {\n     console.error('error', e)\n   })\n});\n```", "```js\napp.get('*', (req, res) => {\n res.sendFile(path.join(__dirname + '../client/build/index.html'));\n});\n\napp.listen(PORT, () => console.log(`Server listening on port ${PORT}`));\n```", "```js\nsearch(event) {\n   const { lng, lat, val } = this.state\n\n   fetch(`http://localhost:3000/businesses/search?value=${val}&lat=${lat}&lng=${lng}`)\n     .then(data => data.json())\n     .then(data => this.handleSearchResults(data))\n }\n```", "```js\nfetch(`/search?value=${val}&lat=${lat}&lng=${lng}`)\n```"]