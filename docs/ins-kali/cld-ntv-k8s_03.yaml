- en: '*Chapter 2*: Setting Up Your Kubernetes Cluster'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第2章*：设置您的Kubernetes集群'
- en: This chapter contains a review of some of the possibilities for creating a Kubernetes
    cluster, which we'll need to be able to learn the rest of the concepts in this
    book. We'll start with minikube, a tool to create a simple local cluster, then
    touch on some additional, more advanced (and production-ready) tools and review
    the major managed Kubernetes services from public cloud providers, before we finally
    introduce the strategies for creating a cluster from scratch.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含了创建Kubernetes集群的一些可能性的审查，这将使我们能够学习本书中其余概念所需的知识。我们将从minikube开始，这是一个创建简单本地集群的工具，然后涉及一些其他更高级（且适用于生产）的工具，并审查来自公共云提供商的主要托管Kubernetes服务，最后介绍从头开始创建集群的策略。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Options for creating your first cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个集群的选项
- en: minikube – an easy way to start
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube – 一个简单的开始方式
- en: Managed services – EKS, GKE, AKS, and more
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管服务 – EKS、GKE、AKS等
- en: Kubeadm – simple conformance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubeadm – 简单的一致性
- en: Kops – infrastructure bootstrapping
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kops – 基础设施引导
- en: Kubespray – Ansible-powered cluster creation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubespray – 基于Ansible的集群创建
- en: Creating a cluster completely from scratch
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全从头开始创建集群
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to run the commands in this chapter, you will need to have the kubectl
    tool installed. Installation instructions are available in [*Chapter 1*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016),
    *Communicating with Kubernetes*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本章中运行命令，您需要安装kubectl工具。安装说明可在[*第1章*](B14790_01_Final_PG_ePub.xhtml#_idTextAnchor016)，*与Kubernetes通信*中找到。
- en: If you are actually going to create a cluster using any of the methods in this
    chapter, you will need to review the specific technical requirements for each
    method in the relevant project's documentation. For minikube specifically, most
    machines running Linux, macOS, or Windows will work. For large clusters, please
    review the specific documentation of the tool you plan to use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实要使用本章中的任何方法创建集群，您需要查看相关项目文档中每种方法的具体技术要求。对于minikube，大多数运行Linux、macOS或Windows的计算机都可以工作。对于大型集群，请查阅您计划使用的工具的具体文档。
- en: 'The code used in this chapter can be found in the book''s GitHub repository
    at the following link:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可以在书籍的GitHub存储库中找到，链接如下：
- en: '[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter2)'
- en: Options for creating a cluster
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群的选项
- en: There are many ways to create a Kubernetes cluster, ranging from simple local
    tools all the way to fully creating a cluster from scratch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以创建Kubernetes集群，从简单的本地工具到完全从头开始创建集群。
- en: If you're just getting started with learning Kubernetes, you'll probably want
    to spin up a simple local cluster with a tool such as minikube.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚开始学习Kubernetes，可能希望使用minikube等工具快速启动一个简单的本地集群。
- en: 'If you''re looking to build a production cluster for an application, you have
    several options:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望为应用程序构建生产集群，您有几个选项：
- en: You can use a tool such as Kops, Kubespray, or Kubeadm to create the cluster
    programmatically.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用Kops、Kubespray或Kubeadm等工具以编程方式创建集群。
- en: You can use a managed Kubernetes service.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用托管的Kubernetes服务。
- en: You can create a cluster completely from scratch on VMs or physical hardware.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在虚拟机或物理硬件上完全从头开始创建集群。
- en: Unless you have extremely specific demands in terms of cluster configuration
    (and even then), it is not usually recommended to create your cluster completely
    from scratch without using a bootstrapping tool.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除非您在集群配置方面有极其特定的需求（即使是这样），通常不建议完全不使用引导工具从头开始创建您的集群。
- en: For most use cases, the decision will be between using a managed Kubernetes
    service on a cloud provider and using a bootstrapping tool.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用例，决策将在使用云提供商上的托管Kubernetes服务和使用引导工具之间进行。
- en: In air-gapped systems, using a bootstrapping tool is the only way to go – but
    some are better than others for particular use cases. In particular, Kops is aimed
    at making it easier to create and manage clusters on cloud providers such as AWS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在空气隔离系统中，使用引导工具是唯一的选择，但对于特定的用例，有些引导工具比其他引导工具更好。特别是，Kops旨在使在云提供商（如AWS）上创建和管理集群变得更容易。
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Not included in this section is a discussion of alternative third-party managed
    services or cluster creation and administration tools such as Rancher or OpenShift.
    When making a selection for running clusters in production, it is important to
    take into account a large variety of factors including the current infrastructure,
    business requirements, and much more. To keep things simple, in this book we will
    focus on production clusters, assuming no other infrastructure or hyper-specific
    business needs – a "clean slate," so to speak.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节未包括讨论替代的第三方托管服务或集群创建和管理工具，如Rancher或OpenShift。在选择在生产环境中运行集群时，重要的是要考虑包括当前基础设施、业务需求等在内的各种因素。为了简化问题，在本书中，我们将专注于生产集群，假设没有其他基础设施或超特定的业务需求——可以说是一个“白板”。
- en: minikube – an easy way to start
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: minikube-开始的简单方法
- en: minikube is the easiest way to get started with a simple local cluster. This
    cluster won't be set up for high availability, and is not aimed at production
    uses, but it is a great way to get started running workloads on Kubernetes in
    minutes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: minikube是开始使用简单本地集群的最简单方法。这个集群不会设置为高可用性，并且不针对生产使用，但这是一个在几分钟内开始在Kubernetes上运行工作负载的好方法。
- en: Installing minikube
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装minikube
- en: minikube can be installed on Windows, macOS, and Linux. What follows is the
    installation instructions for all three platforms, which you can also find by
    navigating to [https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: minikube可以安装在Windows、macOS和Linux上。接下来是三个平台的安装说明，您也可以通过导航到[https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start)找到。
- en: Installing on Windows
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装
- en: The easiest installation method on Windows is to download and run the minikube
    installer from [https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上最简单的安装方法是从[https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe](https://storage.googleapis.com/minikube/releases/latest/minikube-installer.exe)下载并运行minikube安装程序。
- en: Installing on macOS
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在macOS上安装
- en: 'Use the following command to download and install the binary. You can find
    it in the code repository as well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载和安装二进制文件。您也可以在代码存储库中找到它：
- en: Minikube-install-mac.sh
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube-install-mac.sh
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing on Linux
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装
- en: 'Use the following command to download and install the binary:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令下载和安装二进制文件：
- en: Minikube-install-linux.sh
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube-install-linux.sh
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating a cluster on minikube
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在minikube上创建一个集群
- en: To get started with a cluster on minikube, simply run `minikube start`, which
    will create a simple local cluster with the default VirtualBox VM driver. minikube
    also has several additional configuration options that can be reviewed at the
    documentation site.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用minikube创建一个集群，只需运行`minikube start`，这将使用默认的VirtualBox VM驱动程序创建一个简单的本地集群。minikube还有一些额外的配置选项，可以在文档站点上查看。
- en: Running the `minikube` `start` command will automatically configure your `kubeconfig`
    file so you can run `kubectl` commands without any further configuration on your
    newly created cluster.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`minikube` `start`命令将自动配置您的`kubeconfig`文件，这样您就可以在新创建的集群上运行`kubectl`命令，而无需进行进一步的配置。
- en: Managed Kubernetes services
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管Kubernetes服务
- en: 'The number of managed cloud providers that offer a managed Kubernetes service
    is always growing. However, for the purposes of this book, we will focus on the
    major public clouds and their particular Kubernetes offerings. This includes the
    following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 提供托管Kubernetes服务的云提供商数量不断增加。然而，对于本书的目的，我们将专注于主要的公共云及其特定的Kubernetes服务。这包括以下内容：
- en: '**Amazon Web Services** (**AWS**) – **Elastic Kubernetes Service** (**EKS**)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（AWS） - 弹性Kubernetes服务（EKS）
- en: Google Cloud – **Google Kubernetes Engine** (**GKE**)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌云 - 谷歌Kubernetes引擎（GKE）
- en: Microsoft Azure – **Azure Kubernetes Service** (**AKS**)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Azure - Azure Kubernetes服务（AKS）
- en: Important note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The number and implementation of managed Kubernetes services is always changing.
    AWS, Google Cloud, and Azure were selected for this section of the book because
    they are very likely to continue working in the same manner. Whatever managed
    service you use, make sure to check the official documentation provided with the
    service to ensure that the cluster creation procedure is still the same as what
    is presented in this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 托管Kubernetes服务的数量和实施方式总是在变化。AWS、谷歌云和Azure被选为本书的这一部分，因为它们很可能会继续以相同的方式运行。无论您使用哪种托管服务，请确保查看服务提供的官方文档，以确保集群创建过程与本书中所呈现的相同。
- en: Benefits of managed Kubernetes services
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管Kubernetes服务的好处
- en: Generally, the major managed Kubernetes service offerings provide a few benefits.
    Firstly, all three of the managed service offerings we're reviewing provide a
    completely managed Kubernetes control plane.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，主要的托管Kubernetes服务提供了一些好处。首先，我们正在审查的这三个托管服务提供了完全托管的Kubernetes控制平面。
- en: This means that when you use one of these managed Kubernetes services, you do
    not need to worry about your master nodes. They are abstracted away and may as
    well not exist. All three of these managed clusters allow you to choose the number
    of worker nodes when creating a cluster.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当您使用这些托管Kubernetes服务之一时，您不需要担心主节点。它们被抽象化了，可能根本不存在。这三个托管集群都允许您在创建集群时选择工作节点的数量。
- en: Another benefit of a managed cluster is seamless upgrades from one version of
    Kubernetes to another. Generally, once a new version of Kubernetes (not always
    the newest version) is validated for the managed service, you should be able to
    upgrade using a push button or a reasonably simple procedure.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 托管集群的另一个好处是从一个Kubernetes版本无缝升级到另一个版本。一般来说，一旦验证了托管服务的新版本Kubernetes（不一定是最新版本），您应该能够使用一个按钮或一个相当简单的过程进行升级。
- en: Drawbacks of managed Kubernetes services
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管Kubernetes服务的缺点
- en: Although a managed Kubernetes cluster can make operations easier in many respects,
    there are also some downsides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管托管Kubernetes集群在许多方面可以简化操作，但也存在一些缺点。
- en: For many of the managed Kubernetes services available, the minimum cost for
    a managed cluster far exceeds the cost of a minimal cluster created manually or
    with a tool such as Kops. For production use cases, this is generally not as much
    of an issue because a production cluster should contain a minimum amount of nodes
    anyway, but for development environments or test clusters, the additional cost
    may not be worth the ease of operations depending on the budget.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多可用的托管Kubernetes服务，托管集群的最低成本远远超过手动创建或使用诸如Kops之类的工具创建的最小集群的成本。对于生产用例，这通常不是一个问题，因为生产集群应该包含最少数量的节点，但对于开发环境或测试集群，根据预算，额外的成本可能不值得操作的便利。
- en: Additionally, though abstracting away master nodes makes operations easier,
    it also prevents fine tuning or advanced master node functionality that may otherwise
    be available on clusters with defined masters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然抽象化主节点使操作更容易，但它也阻止了对已定义主节点的集群可能可用的精细调整或高级主节点功能。
- en: AWS – Elastic Kubernetes Service
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS - 弹性Kubernetes服务
- en: AWS' managed Kubernetes service is called EKS, or Elastic Kubernetes Service.
    There are a few different ways to get started with EKS, but we'll cover the simplest
    way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AWS的托管Kubernetes服务称为EKS，或弹性Kubernetes服务。有几种不同的方式可以开始使用EKS，但我们将介绍最简单的方式。
- en: Getting started
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: In order to create an EKS cluster, you must provision the proper **Virtual Private
    Cloud (VPC)** and **Identity and Access Management (IAM)** role settings – at
    which point you can create a cluster through the console. These settings can be
    created manually through the console, or through infrastructure provisioning tools
    such as CloudFormation and Terraform. Full instructions for creating a cluster
    through the console can be found at [https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html](https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个EKS集群，您必须配置适当的**虚拟私有云（VPC）**和**身份和访问管理（IAM）**角色设置 - 在这一点上，您可以通过控制台创建一个集群。这些设置可以通过控制台手动创建，也可以通过基础设施配置工具如CloudFormation和Terraform创建。有关通过控制台创建集群的完整说明，请参阅[https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html](https://docs.aws.amazon.com/en_pv/eks/latest/userguide/getting-started-console.html)。
- en: Assuming you're creating a cluster and VPC from scratch, however, you can instead
    use a tool called `eksctl` to provision your cluster.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您是从头开始创建集群和VPC，您可以使用一个名为`eksctl`的工具来配置您的集群。
- en: To install `eksctl`, you can find installation instructions for macOS, Linux,
    and Windows at [https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`eksctl`，您可以在[https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html)找到macOS、Linux和Windows的安装说明。
- en: 'Once you have `eksctl` installed, creating a cluster is as simple as using
    the `eksctl create cluster` command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`eksctl`，创建一个集群就像使用`eksctl create cluster`命令一样简单：
- en: Eks-create-cluster.sh
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Eks-create-cluster.sh
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a cluster of three `t2.small` instances as worker nodes set
    up in an autoscaling group with a minimum of one node and a maximum of four. The
    Kubernetes version that is used will be `1.17`. Importantly, `eksctl` starts with
    a default region, and depending on the number of nodes chosen, they will be spread
    throughout multiple availability zones in that region.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个由三个`t2.small`实例组成的集群，这些实例被设置为一个具有一个节点最小和四个节点最大的自动缩放组。使用的Kubernetes版本将是`1.17`。重要的是，`eksctl`从一个默认区域开始，并根据选择的节点数量，在该区域的多个可用区中分布它们。
- en: '`eksctl` will also automatically update your `kubeconfig` file, so you should
    be able to run `kubectl` commands immediately after the cluster creation process
    is finished.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`eksctl`还将自动更新您的`kubeconfig`文件，因此在集群创建过程完成后，您应该能够立即运行`kubectl`命令。'
- en: 'Test the configuration with the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码测试配置：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should see a list of your nodes and their associated IPs. Your cluster is
    ready! Next, let's take a look at Google's GKE setup process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到您的节点及其关联的IP列表。您的集群已准备就绪！接下来，让我们看看Google的GKE设置过程。
- en: Google Cloud – Google Kubernetes Engine
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud – Google Kubernetes Engine
- en: GKE is Google Cloud's managed Kubernetes service. With the gcloud command-line
    tool, it is very easy to quickly spin up a GKE cluster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: GKE是Google Cloud的托管Kubernetes服务。使用gcloud命令行工具，可以很容易地快速启动GKE集群。
- en: Getting started
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: To create a cluster on GKE using gcloud, you can either use Google Cloud's Cloud
    Shell service, or run the commands locally. If you want to run the commands locally,
    you must install the gcloud CLI via the Google Cloud SDK. See [https://cloud.google.com/sdk/docs/quickstarts](https://cloud.google.com/sdk/docs/quickstarts)
    for installation instructions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用gcloud在GKE上创建集群，可以使用Google Cloud的Cloud Shell服务，也可以在本地运行命令。如果要在本地运行命令，必须通过Google
    Cloud SDK安装gcloud CLI。有关安装说明，请参阅[https://cloud.google.com/sdk/docs/quickstarts](https://cloud.google.com/sdk/docs/quickstarts)。
- en: Once you have gcloud installed, you need to ensure that you have activated the
    GKE API in your Google Cloud account.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了gcloud后，您需要确保已在Google Cloud帐户中激活了GKE API。
- en: To easily accomplish this, navigate to [https://console.cloud.google.com/apis/library](https://console.cloud.google.com/apis/library),
    then search for `kubernetes` in the search bar. Click on **Kubernetes Engine API**
    and then click **Enable**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松实现这一点，请转到[https://console.cloud.google.com/apis/library](https://console.cloud.google.com/apis/library)，然后在搜索栏中搜索`kubernetes`。单击**Kubernetes
    Engine API**，然后单击**启用**。
- en: 'Now that the API is activated, set your project and compute zone in Google
    Cloud by using the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在API已激活，请使用以下命令在Google Cloud中设置您的项目和计算区域：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the commands, `proj_id` corresponds to the project ID in Google Cloud that
    you want to create your cluster in, and `compute_zone` corresponds to your desired
    compute zone in Google Cloud.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令中，`proj_id`对应于您想要在Google Cloud中创建集群的项目ID，`compute_zone`对应于您在Google Cloud中期望的计算区域。
- en: 'There are actually three types of clusters on GKE, each with different (increasing)
    levels of reliability and fault tolerance:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，GKE上有三种类型的集群，每种类型具有不同（增加）的可靠性和容错能力：
- en: Single-zone clusters
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单区集群
- en: Multi-zonal clusters
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多区集群
- en: Regional clusters
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域集群
- en: A **single-zone** cluster in GKE means a cluster that has a single control plane
    replica and one or more worker nodes running in the same Google Cloud zone. If
    something happens to the zone, both the control plane and the workers (and thus
    the workloads) will go down.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: GKE中的**单区**集群意味着具有单个控制平面副本和一个或多个在同一Google Cloud区域运行的工作节点的集群。如果区域发生故障，控制平面和工作节点（因此工作负载）都将宕机。
- en: A **multi-zonal** cluster in GKE means a cluster that has a single control plane
    replica and two or more worker nodes running in different Google Cloud zones.
    This means that if a single zone (even the zone containing the control plane)
    goes down, the workloads running in the cluster will still persist, but the Kubernetes
    API will be unavailable until the control plane zone comes back up.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: GKE中的**多区**集群意味着具有单个控制平面副本和两个或多个在不同的Google Cloud区域运行的工作节点的集群。这意味着如果单个区域（甚至包含控制平面的区域）发生故障，集群中运行的工作负载仍将持续存在，但是直到控制平面区域恢复之前，Kubernetes
    API将不可用。
- en: Finally, a **regional cluster** in GKE means a cluster that has both a multi-zonal
    control plane and multi-zonal worker nodes. If any zone goes down, both the control
    plane and the workloads on the worker nodes will persist. This is the most expensive
    and reliable option.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 GKE 中，**区域集群** 意味着具有多区域控制平面和多区域工作节点的集群。如果任何区域出现故障，控制平面和工作节点上的工作负载将持续存在。这是最昂贵和可靠的选项。
- en: 'Now, to actually create your cluster, you can run the following command to
    create a cluster named `dev` with the default settings:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要实际创建您的集群，您可以运行以下命令以使用默认设置创建名为 `dev` 的集群：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will create a single-zone cluster in your chosen compute zone.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您选择的计算区域创建一个单区域集群。
- en: 'In order to create a multi-zonal cluster, you can run the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个多区域集群，您可以运行以下命令：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `compute_zone_1` and `compute_zone_2` are disparate Google Cloud zones.
    In addition, more zones can be added via the `node-locations` flag.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`compute_zone_1` 和 `compute_zone_2` 是不同的 Google Cloud 区域。此外，可以通过 `node-locations`
    标志添加更多区域。
- en: 'Finally, to create a regional cluster, you can run the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要创建一个区域集群，您可以运行以下命令：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, the `node-locations` flag is actually optional. If left out, the
    cluster will be created with worker nodes in all the zones within the region.
    If you'd like to change this default behavior, you can override it using the `node-locations`
    flag.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`node-locations` 标志实际上是可选的。如果省略，集群将在该区域内的所有区域中创建工作节点。如果您想更改此默认行为，可以使用
    `node-locations` 标志进行覆盖。
- en: 'Now that you have a cluster running, you need to configure your `kubeconfig`
    file to communicate with the cluster. To do this, simply pass the cluster name
    into the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经运行了一个集群，需要配置您的 `kubeconfig` 文件以与集群通信。为此，只需将集群名称传递给以下命令：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, test the configuration with the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令测试配置：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As with EKS, you should see a list of all your provisioned nodes. Success! Finally,
    let's take a look at Azure's managed offering.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与 EKS 一样，您应该看到所有已配置节点的列表。成功！最后，让我们来看看 Azure 的托管服务。
- en: Microsoft Azure – Azure Kubernetes Service
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure – Azure Kubernetes 服务
- en: Microsoft Azure's managed Kubernetes service is called AKS. Creating a cluster
    on AKS can be done via the Azure CLI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 的托管 Kubernetes 服务称为 AKS。可以通过 Azure CLI 在 AKS 上创建集群。
- en: Getting started
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'To create a cluster on AKS, you can use the Azure CLI tool and run the following
    command to create a service principal (a role that the cluster will use to access
    Azure resources):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 AKS 上创建集群，可以使用 Azure CLI 工具，并运行以下命令以创建服务主体（集群将使用该服务主体访问 Azure 资源的角色）：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result of this command will be a JSON object with information on the service
    principal, which we will use in the next step. This JSON object looks like the
    following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将是一个包含有关服务主体信息的 JSON 对象，我们将在下一步中使用。此 JSON 对象如下所示：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you can use the values from the previous JSON command to actually create
    your AKS cluster:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用上一个 JSON 命令中的值来实际创建您的 AKS 集群：
- en: Aks-create-cluster.sh
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Aks-create-cluster.sh
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command assumes a resource group named `devResourceGroup`, and a cluster
    named `devCluster`. For `appId` and `password`, use the values from the service
    principal creation step.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令假定存在名为 `devResourceGroup` 的资源组和名为 `devCluster` 的集群。对于 `appId` 和 `password`，请使用服务主体创建步骤中的值。
- en: 'Finally, to generate the proper `kubectl` configuration on your machine, you
    can run the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要在您的计算机上生成正确的 `kubectl` 配置，您可以运行以下命令：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At this point, you should be able to properly run `kubectl` commands. Test the
    configuration with the `kubectl get nodes` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，您应该能够正确运行 `kubectl` 命令。使用 `kubectl get nodes` 命令测试配置。
- en: Programmatic cluster creation tools
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 程序化集群创建工具
- en: 'There are several tools available that will bootstrap a Kubernetes cluster
    in various non-managed environments. We''ll focus on three of the most popular:
    Kubeadm, Kops, and Kubespray. Each tool is aimed at a different use case and generally
    works by a different method.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可用的工具可以在各种非托管环境中引导Kubernetes集群。我们将重点关注三种最流行的工具：Kubeadm、Kops和Kubespray。每种工具都针对不同的用例，并且通常通过不同的方法工作。
- en: Kubeadm
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeadm
- en: Kubeadm is a tool created by the Kubernetes community to simplify cluster creation
    on infrastructure that is already provisioned. Unlike Kops, Kubeadm does not have
    the ability to provision infrastructure on cloud services. It simply creates a
    best-practices cluster that will pass Kubernetes conformance tests. Kubeadm is
    agnostic to infrastructure – it should work anywhere you can run Linux VMs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeadm是由Kubernetes社区创建的工具，旨在简化已经配置好的基础架构上的集群创建。与Kops不同，Kubeadm无法在云服务上提供基础架构。它只是创建一个符合Kubernetes一致性测试的最佳实践集群。Kubeadm对基础架构是不可知的-它应该可以在任何可以运行Linux
    VM的地方工作。
- en: Kops
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kops
- en: Kops is a popular cluster provisioning tool. It provisions the underlying infrastructure
    for your cluster, installs all cluster components, and validates the functionality
    of your cluster. It can also be used to perform various cluster operations such
    as upgrades, node rotations, and more. Kops currently supports AWS, with (as of
    the time of writing this book) beta support for Google Compute Engine and OpenStack,
    and alpha support for VMware vSphere and DigitalOcean.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Kops是一种流行的集群配置工具。它为您的集群提供基础架构，安装所有集群组件，并验证您的集群功能。它还可以用于执行各种集群操作，如升级、节点旋转等。Kops目前支持AWS，在撰写本书时，还支持Google
    Compute Engine和OpenStack的beta版本，以及VMware vSphere和DigitalOcean的alpha版本。
- en: Kubespray
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubespray
- en: Kubespray is different to both Kops and Kubeadm. Unlike Kops, Kubespray does
    not inherently provision cluster resources. Instead, Kubespray allows you to choose
    between Ansible and Vagrant in order to perform provisioning, orchestration, and
    node setup.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kubespray与Kops和Kubeadm都不同。与Kops不同，Kubespray并不固有地提供集群资源。相反，Kubespray允许您在Ansible和Vagrant之间进行选择，以执行配置、编排和节点设置。
- en: When compared to Kubeadm, Kubespray has far fewer integrated cluster creation
    and life cycle processes. Newer versions of Kubespray allow you to use Kubeadm
    specifically for cluster creation after node setup.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kubeadm相比，Kubespray集成了更少的集群创建和生命周期流程。Kubespray的新版本允许您在节点设置后专门使用Kubeadm进行集群创建。
- en: Important note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Since creating a cluster with Kubespray requires some Ansible-specific domain
    knowledge, we will keep that discussion out of this book – but a guide to all
    things Kubespray can be found at [https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md](https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用Kubespray创建集群需要一些特定于Ansible的领域知识，我们将不在本书中讨论这个问题-但可以在[https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md](https://github.com/kubernetes-sigs/kubespray/blob/master/docs/getting-started.md)找到有关Kubespray的所有信息的指南。
- en: Creating a cluster with Kubeadm
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubeadm创建集群
- en: To create a cluster with Kubeadm, you will need your nodes provisioned ahead
    of time. As with any other Kubernetes cluster, we'll need VMs or bare-metal servers
    running Linux.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Kubeadm创建集群，您需要提前配置好节点。与任何其他Kubernetes集群一样，我们需要运行Linux的VM或裸金属服务器。
- en: For the purposes of this book, we will show how to bootstrap a Kubeadm cluster
    with only a single master node. For highly available setups, you'll need to run
    additional join commands on the other master nodes, which you can find at [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将展示如何使用单个主节点引导Kubeadm集群。对于高可用设置，您需要在其他主节点上运行额外的加入命令，您可以在[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)找到。
- en: Installing Kubeadm
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubeadm
- en: First things first – you'll need to install Kubeadm on all nodes. The installation
    instructions for each supported operating system can be found at [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在所有节点上安装Kubeadm。每个支持的操作系统的安装说明可以在[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm)找到。
- en: For each node, also make sure to check that all the required ports are open,
    and that you've installed your intended container runtime.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个节点，还要确保所有必需的端口都是开放的，并且已安装您打算使用的容器运行时。
- en: Starting the master nodes
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动主节点
- en: 'To quickly start master nodes with Kubeadm, you only need to run a single command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速启动使用Kubeadm的主节点，您只需要运行一个命令：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This initialization command can take in several optional arguments – depending
    on your preferred cluster setup, networking, and so on, you may need to use them.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此初始化命令可以接受几个可选参数 - 根据您的首选集群设置、网络等，您可能需要使用它们。
- en: In the output of the `init` command, you'll see a `kubeadm join` command. Make
    sure to save this command.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`命令的输出中，您将看到一个`kubeadm join`命令。确保保存此命令。
- en: Starting the worker nodes
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动工作节点
- en: 'In order to bootstrap the worker nodes, you need to run the `join` command
    you saved. The command will be of the following form:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引导工作节点，您需要运行保存的`join`命令。命令的形式如下：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The token in this command is a bootstrap token. It is used to authenticate nodes
    with each other and join new nodes to the cluster. With access to this token comes
    the power to join new nodes to the cluster, so treat it as such.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令中的令牌是引导令牌。它用于验证节点之间的身份，并将新节点加入集群。拥有此令牌的访问权限即可加入新节点到集群中，因此请谨慎对待。
- en: Setting up kubectl
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置kubectl
- en: 'With Kubeadm, kubectl will already be properly set up on the master node. However,
    to use kubectl from any other machine or outside the cluster, you can copy the
    config from the master to your local machine:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubeadm，kubectl已经在主节点上正确设置。但是，要从任何其他机器或集群外部使用kubectl，您可以将主节点上的配置复制到本地机器：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This `kubeconfig` will be the cluster administrator config – in order to specify
    other users (and permissions), you will need to add new service accounts and generate
    `kubeconfig` files for them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`kubeconfig`将是集群管理员配置 - 为了指定其他用户（和权限），您需要添加新的服务账户并为他们生成`kubeconfig`文件。
- en: Creating a cluster with Kops
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kops创建集群
- en: Since Kops will provision infrastructure for you, there is no need to pre-create
    any nodes. All you need to do is install Kops, ensure your cloud platform credentials
    are working, and create your cluster all at once. Kops can be installed on Linux,
    macOS, and Windows.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kops将为您提供基础设施，因此无需预先创建任何节点。您只需要安装Kops，确保您的云平台凭据有效，并立即创建您的集群。Kops可以安装在Linux、macOS和Windows上。
- en: For this tutorial, we will go through creating a cluster on AWS, but you can
    find instructions for other supported Kops platforms in the Kops documentation
    at [https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍如何在AWS上创建一个集群，但您可以在Kops文档中找到其他支持的Kops平台的说明，网址为[https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs)。
- en: Installing on macOS
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在macOS上安装
- en: 'On OS X, the easiest way to install Kops is using Homebrew:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在OS X上，安装Kops的最简单方法是使用Homebrew：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Alternatively, you can grab the newest stable Kops binary from the Kops GitHub
    page at [https://github.com/kubernetes/kops/releases/tag/1.12.3](https://github.com/kubernetes/kops/releases/tag/1.12.3).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从Kops GitHub页面上获取最新的稳定Kops二进制文件，网址为[https://github.com/kubernetes/kops/releases/tag/1.12.3](https://github.com/kubernetes/kops/releases/tag/1.12.3)。
- en: Installing on Linux
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux上安装
- en: 'On Linux, you can install Kops via the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，您可以通过以下命令安装Kops：
- en: Kops-linux-install.sh
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Kops-linux-install.sh
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Installing on Windows
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装
- en: To install Kops on Windows, you'll need to download the newest Windows release
    from [https://github.com/kubernetes/kops/releases/latest](https://github.com/kubernetes/kops/releases/latest),
    rename it to `kops.exe`, and add it to your `path` variable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Kops，您需要从[https://github.com/kubernetes/kops/releases/latest](https://github.com/kubernetes/kops/releases/latest)下载最新的Windows版本，将其重命名为`kops.exe`，并将其添加到您的`path`变量中。
- en: Setting up credentials for Kops
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Kops的凭据
- en: In order for Kops to work, you'll need AWS credentials on your machine with
    a few required IAM permissions. To do this safely, you will want to create an
    IAM user specifically for Kops.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Kops工作，您需要在您的机器上具有一些必需的IAM权限的AWS凭据。为了安全地执行此操作，您需要为Kops专门创建一个IAM用户。
- en: 'First, create an IAM group for the `kops` user:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为`kops`用户创建一个IAM组：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, attach the required roles for the `kops_users` group. To function properly,
    Kops will need `AmazonEC2FullAccess`, `AmazonRoute53FullAccess`, `AmazonS3FullAccess`,
    `IAMFullAccess`, and `AmazonVPCFullAccess`. We can accomplish this by running
    the following commands:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为`kops_users`组附加所需的角色。为了正常运行，Kops将需要`AmazonEC2FullAccess`，`AmazonRoute53FullAccess`，`AmazonS3FullAccess`，`IAMFullAccess`和`AmazonVPCFullAccess`。我们可以通过运行以下命令来实现这一点：
- en: Provide-aws-policies-to-kops.sh
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 提供-aws-policies-to-kops.sh
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, create the `kops` user, add it to the `kops_users` group, and create
    programmatic access keys, which you should save:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建`kops`用户，将其添加到`kops_users`组，并创建程序访问密钥，然后保存：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To allow Kops to access your new IAM credentials, you can use the following
    commands to configure your AWS CLI with the access key and secret from the previous
    command (`create-access-key`):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Kops访问您的新IAM凭据，您可以使用以下命令配置AWS CLI，使用前一个命令（`create-access-key`）中的访问密钥和秘钥：
- en: '[PRE22]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting up state storage
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置状态存储
- en: With the proper credentials set up, we can start creating our cluster. In this
    case, we're going to build a simple gossip-based cluster so we won't need to mess
    around with DNS. To see the possible DNS setups, you can look at the Kops documentation
    ([https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs)).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 凭据设置好后，我们可以开始创建我们的集群。在这种情况下，我们将构建一个简单的基于gossip的集群，因此我们不需要处理DNS。要查看可能的DNS设置，您可以查看Kops文档（[https://github.com/kubernetes/kops/tree/master/docs](https://github.com/kubernetes/kops/tree/master/docs)）。
- en: First, we'll need a location to store our cluster spec. S3 is perfect for this
    since we're on AWS.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个位置来存储我们的集群规范。由于我们在AWS上，S3非常适合这个任务。
- en: 'As usual with S3, bucket names need to be unique. You can easily create a bucket
    using the AWS SDK (make sure to replace `my-domain-dev-state-store` with your
    desired S3 bucket name):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，使用S3时，存储桶名称需要是唯一的。您可以使用AWS SDK轻松创建一个存储桶（确保将`my-domain-dev-state-store`替换为您想要的S3存储桶名称）：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It''s a best practice to enable bucket encryption and versioning as well:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 启用存储桶加密和版本控制是最佳实践：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, to set up variables for Kops, use the following commands:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要设置Kops的变量，请使用以下命令：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Important note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Kops supports several state storage locations such as AWS S3, Google Cloud Storage,
    Kubernetes, DigitalOcean, OpenStack Swift, Alibaba Cloud, and memfs. However,
    you can just save the Kops state to a local file and use that instead. The benefit
    of having a cloud-based state store is the ability for multiple infrastructure
    developers to access and update it with versioning controls.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Kops支持多种状态存储位置，如AWS S3，Google Cloud Storage，Kubernetes，DigitalOcean，OpenStack
    Swift，阿里云和memfs。但是，您可以将Kops状态仅保存到本地文件并使用该文件。云端状态存储的好处是多个基础架构开发人员可以访问并使用版本控制进行更新。
- en: Creating clusters
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集群
- en: With Kops, we can deploy clusters of any size. For the purposes of this guide,
    we will deploy a production-ready cluster by having both worker and master nodes
    span three availability zones. We're going to use the US-East-1 region, and both
    the masters and workers will be `t2.medium` instances.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kops，我们可以部署任何规模的集群。在本指南的目的是，我们将通过在三个可用区域跨越工作节点和主节点来部署一个生产就绪的集群。我们将使用US-East-1地区，主节点和工作节点都将是`t2.medium`实例。
- en: 'To create the config for this cluster, you can run the following `kops create`
    command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要为此集群创建配置，可以运行以下`kops create`命令：
- en: Kops-create-cluster.sh
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Kops-create-cluster.sh
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To see the config that has been created, use the following command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看已创建的配置，请使用以下命令：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, to create our cluster, run the following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要创建我们的集群，请运行以下命令：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The cluster creation process may take some time, but once it is complete, your
    `kubeconfig` should be properly configured to use kubectl with your new cluster.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 集群创建过程可能需要一些时间，但一旦完成，您的`kubeconfig`应该已经正确配置，可以使用kubectl与您的新集群进行交互。
- en: Creating a cluster completely from scratch
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完全从头开始创建集群
- en: Creating a Kubernetes cluster entirely from scratch is a multi-step endeavor
    that could likely span multiple chapters of this book. However, since our purpose
    is to get you up and running with Kubernetes as quickly as possible, we will refrain
    from describing the entire process.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 完全从头开始创建一个Kubernetes集群是一个多步骤的工作，可能需要跨越本书的多个章节。然而，由于我们的目的是尽快让您开始使用Kubernetes，我们将避免描述整个过程。
- en: If you are interested in creating a cluster from scratch, either for educational
    reasons or a need to finely customize your cluster, a great guide is *Kubernetes
    The Hard Way*, which is a full cluster creation tutorial written by *Kelsey Hightower*.
    It can be found at [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣从头开始创建集群，无论是出于教育目的还是需要精细定制您的集群，都可以参考*Kubernetes The Hard Way*，这是由*Kelsey
    Hightower*编写的完整集群创建教程。它可以在[https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)找到。
- en: Now that we've gotten that out of the way, we can proceed with an overview of
    the manual cluster creation process.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经解决了这个问题，我们可以继续概述手动创建集群的过程。
- en: Provisioning your nodes
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置您的节点
- en: First things first – you'll need some infrastructure to run Kubernetes on. Generally,
    VMs are a good candidate for this, though Kubernetes can be run on bare metal
    as well. If you're working in an environment where you cannot easily add nodes
    (which removes many of the scaling benefits of the cloud, but is definitely possible
    in enterprise settings), you'll need enough nodes to meet your application demands.
    This is more likely to be an issue in air-gapped environments.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要一些基础设施来运行Kubernetes。通常，虚拟机是一个很好的选择，尽管Kubernetes也可以在裸机上运行。如果您在一个不能轻松添加节点的环境中工作（这会消除云的许多扩展优势，但在企业环境中绝对可行），您需要足够的节点来满足应用程序的需求。这在空隔离环境中更有可能成为一个问题。
- en: Some of your nodes will be used for the master control plane, while others will
    solely be used as workers. There is no need to make the master and worker nodes
    identical from a memory or CPU perspective – you could even have some weaker and
    some more powerful workers. This pattern results in a non-homogeneous cluster,
    in which certain nodes are better suited to particular workloads.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一些节点将用于主控制平面，而其他节点将仅用作工作节点。没有必要从内存或CPU的角度使主节点和工作节点相同 - 甚至可以有一些较弱的和一些更强大的工作节点。这种模式会导致一个非同质的集群，其中某些节点更适合特定的工作负载。
- en: Creating the Kubernetes certificate authority for TLS
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为TLS创建Kubernetes证书颁发机构
- en: In order to function properly, all major control plane components will need
    a TLS certificate. To create these, a **Certificate Authority** (**CA**) needs
    to be created, which will in turn create the TLS certificates.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正常运行，所有主要控制平面组件都需要TLS证书。为了创建这些证书，需要创建一个证书颁发机构（CA），它将进一步创建TLS证书。
- en: To create the CA, a **Public Key Infrastructure** (**PKI**) needs to be bootstrapped.
    For this task, you can use any PKI tool, but the one used in the Kubernetes docs
    is cfssl.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建CA，需要引导公钥基础设施（PKI）。对于这个任务，可以使用任何PKI工具，但Kubernetes文档中使用的是cfssl。
- en: Once the PKI, CA, and TLS certificates have been created for all components,
    the next step is to create config files for the control plane and worker node
    components.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为所有组件创建了PKI、CA和TLS证书，下一步是为控制平面和工作节点组件创建配置文件。
- en: Creating config files
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建配置文件
- en: Config files need to be created for the `kubelet`, `kube-proxy`, `kube-controller-manager`,
    and `kube-scheduler` components. They will use the certificates in these config
    files to authenticate with `kube-apiserver`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 需要为kubelet、kube-proxy、kube-controller-manager和kube-scheduler组件创建配置文件。它们将使用这些配置文件中的证书与kube-apiserver进行身份验证。
- en: Creating an etcd cluster and configuring encryption
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建etcd集群并配置加密
- en: Creating the data encryption config is handled via a YAML file with a data encryption
    secret. At this point, it is required to start the `etcd` cluster.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个带有数据加密密钥的YAML文件来处理数据加密配置。此时，需要启动etcd集群。
- en: To do this, `systemd` files are created on each node with the `etcd` process
    config. Then `systemctl` is used on each node to start the `etcd` servers.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在每个节点上创建带有etcd进程配置的systemd文件。然后在每个节点上使用systemctl启动etcd服务器。
- en: 'Here is a sample `systemd` file for `etcd`. The `systemd` files for the other
    control plane components will be similar to this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个etcd的systemd文件示例。其他控制平面组件的systemd文件将类似于这个：
- en: Example-systemd-control-plane
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 示例-systemd-control-plane
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This service file provides a runtime definition for our `etcd` component, which
    will be started on each master node. To actually start `etcd` on our node, we
    run the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务文件为我们的etcd组件提供了运行时定义，它将在每个主节点上启动。要在我们的节点上实际启动etcd，我们运行以下命令：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This enables the `etcd` service along with automatic restarts when the node
    is restarted.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`etcd`服务能够在节点重新启动时自动重新启动。
- en: Bootstrapping the control plane component
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导控制平面组件
- en: Bootstrapping the control plane components on the master nodes is similar to
    the process used to create the `etcd` cluster. `systemd` files are created for
    each component – the API server, the controller manager, and the scheduler – and
    then a `systemctl` command is used to start each component.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在主节点上引导控制平面组件的过程类似于创建`etcd`集群所使用的过程。为每个组件创建`systemd`文件 - API服务器、控制器管理器和调度器 -
    然后使用`systemctl`命令启动每个组件。
- en: The previously created config files and certificates also need to be included
    on each master node.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 先前创建的配置文件和证书也需要包含在每个主节点上。
- en: 'Let''s take a look at our service file definition for the `kube-apiserver`
    component, broken down into its sections as follows. The `Unit` section is just
    a quick description of our `systemd` file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的`kube-apiserver`组件的服务文件定义，按照以下各节进行拆分。`Unit`部分只是我们`systemd`文件的一个快速描述：
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Api-server-systemd-example
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Api-server-systemd-example
- en: 'This second piece is the actual start command for the services, along with
    any variables to be passed to the services:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分是服务的实际启动命令，以及要传递给服务的任何变量：
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, the `Install` section allows us to specify a `WantedBy` target:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Install`部分允许我们指定一个`WantedBy`目标：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The service files for `kube-scheduler` and `kube-controller-manager` will be
    very similar to the `kube-apiserver` definition, and once we''re ready to start
    the components on the node, the process is easy:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-scheduler`和`kube-controller-manager`的服务文件将与`kube-apiserver`的定义非常相似，一旦我们准备在节点上启动组件，这个过程就很容易：'
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Similarly to `etcd`, we want to ensure the services restart on a node shutdown.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 与`etcd`类似，我们希望确保服务在节点关闭时重新启动。
- en: Bootstrapping the worker node
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导工作节点
- en: It's a similar story on the worker nodes. Service specs for `kubelet`, the container
    runtime, `cni`, and `kube-proxy` need to be created and run using `systemctl`.
    The `kubelet` config will specify the aforementioned TLS certificate so that it
    can communicate with the control plane via the API server.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点上也是类似的情况。需要创建并使用`systemctl`运行`kubelet`、容器运行时、`cni`和`kube-proxy`的服务规范。`kubelet`配置将指定上述TLS证书，以便它可以通过API服务器与控制平面通信。
- en: 'Let''s take a look at what our `kubelet` service definition looks like:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的`kubelet`服务定义是什么样子的：
- en: Kubelet-systemd-example
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Kubelet-systemd-example
- en: '[PRE35]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, this service definition references `cni`, the container runtime,
    and the `kubelet-config` file. The `kubelet-config` file contains the TLS information
    we need for our workers.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个服务定义引用了`cni`、容器运行时和`kubelet-config`文件。`kubelet-config`文件包含我们工作节点所需的TLS信息。
- en: After bootstrapping the workers and master, the cluster should be functional
    via the use of the admin `kubeconfig` file that was created as part of the TLS
    setup.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在引导工作节点和主节点之后，集群应该可以通过作为TLS设置的一部分创建的管理员`kubeconfig`文件来使用。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed several methods for creating a Kubernetes cluster.
    We looked at minimal local cluster creation using minikube, setting up clusters
    on managed Kubernetes services on Azure, AWS, and Google Cloud, creating clusters
    using the Kops provisioning tool, and finally, manually creating a cluster from
    scratch.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了创建Kubernetes集群的几种方法。我们研究了使用minikube在本地创建最小的集群，设置在Azure、AWS和Google
    Cloud上管理的Kubernetes服务的集群，使用Kops配置工具创建集群，最后，从头开始手动创建集群。
- en: Now that we have the skills to create a Kubernetes cluster in several different
    environments, we can move on to using Kubernetes to run applications.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了在几种不同环境中创建Kubernetes集群的技能，我们可以继续使用Kubernetes来运行应用程序。
- en: In the next chapter, we will learn how to start running applications on Kubernetes.
    The knowledge you've gained about how Kubernetes works at the architectural level
    should make it much easier to understand the concepts in the next few chapters.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在Kubernetes上开始运行应用程序。您对Kubernetes在架构层面的工作原理的了解应该会让您更容易理解接下来几章中的概念。
- en: Questions
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What purpose does minikube serve?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: minikube有什么作用？
- en: What are some downsides to using a managed Kubernetes service?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用托管Kubernetes服务有哪些缺点？
- en: How does Kops compare to Kubeadm? What are the major differences?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kops与Kubeadm有何不同？主要区别是什么？
- en: Which platforms does Kops support?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kops支持哪些平台？
- en: When manually creating a cluster, how are the major cluster components specified?
    How are they run on each node?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在手动创建集群时，如何指定主要集群组件？它们如何在每个节点上运行？
- en: Further reading
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The official Kubernetes documentation: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方Kubernetes文档：[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)
- en: '*Kubernetes The Hard Way*: [https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes The Hard Way*：[https://github.com/kelseyhightower/kubernetes-the-hard-way](https://github.com/kelseyhightower/kubernetes-the-hard-way)'
