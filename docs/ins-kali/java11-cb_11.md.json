["```java\n        public class Chapter11Memory {   \n           public static void main(String... args) {\n              int max = 99_888_999;\n              System.out.println(\"Chapter11Memory.main() for \" \n                                      + max + \" is running...\");\n              List<AnObject> list = new ArrayList<>();\n              IntStream.range(0, max)\n                       .forEach(i -> list.add(new AnObject(i)));\n           }\n\n           private static class AnObject {\n              private int prop;\n              AnObject(int i){ this.prop = i; }\n           }\n        }\n```", "```java\n java -XX:+UseG1GC -cp ./cookbook-1.0.jar \n      com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n time java -Xlog:gc -cp ./cookbook-1.0.jar com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\njava -Xlog:help\n```", "```java\n-Xlog[:[what][:[output][:[decorators][:output-options]]]]\n```", "```java\n-Xlog:all=info:stdout:uptime,level,tags\n```", "```java\n java -Xlog:cpu -cp ./cookbook-1.0.jar \n                  com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:cpu* -cp ./cookbook-1.0.jar  \n                 com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:heap* -cp ./cookbook-1.0.jar \n                 com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:heap*,cpu* -cp ./cookbook-1.0.jar \n                   com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:heap*,cpu*::uptime,tags -cp ./cookbook-1.0.jar \n                    com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:heap*,cpu*:stdout:uptime,tags -cp ./cookbook-1.0.jar\n                    com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n java -Xlog:heap*,cpu*::none -cp ./cookbook-1.0.jar\n                     com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n87863 jdk.jcmd/sun.tools.jcmd.JCmd \n```", "```java\njava -cp ./cookbook-1.0.jar \n                   com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\n87864 jdk.jcmd/sun.tools.jcmd.JCmd \n87785 com.packt.cookbook.ch11_memory.Chapter11Memory\n```", "```java\njcmd 88749 VM.version \n```", "```java\njcmd Chapter11Memory VM.version\n```", "```java\n jcmd PID/main-class-name help\n```", "```java\nJFR.stop\nJFR.start\nJFR.dump\nJFR.check\nVM.native_memory\nVM.check_commercial_features\nVM.unlock_commercial_features\nManagementAgent.stop\nManagementAgent.start_local\nManagementAgent.start\nGC.rotate_log\nThread.print\nGC.class_stats\nGC.class_histogram\nGC.heap_dump\nGC.run_finalization\nGC.run\nVM.uptime\nVM.flags\nVM.system_properties\nVM.command_line\nVM.version\n```", "```java\njcmd -h \n```", "```java\njcmd Chapter11Memory GC.heap_info\n```", "```java\njcmd Chapter11Memory Thread.print\n```", "```java\njcmd Chapter11Memory VM.info\n```", "```java\ntry (Connection conn = getDbConnection();\nStatement st = createStatement(conn)) {\n  st.execute(sql);\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nConnection getDbConnection() {\n  PGPoolingDataSource source = new PGPoolingDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  try {\n    return source.getConnection(); \n  } catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nStatement createStatement(Connection conn) {\n  try {\n    return conn.createStatement();\n  } catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nvoid execute(Statement st, String sql){\n  try {\n    st.execute(sql);\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  } finally {\n    if(st != null) {\n      try{\n        st.close();\n      } catch (Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n}\n```", "```java\n        void execute(Statement st, String sql){\n          try (st) {\n            st.execute(sql);\n          } catch (Exception ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\n        void execute(Connection conn, Statement st, String sql) {\n          try (conn; st) {\n            st.execute(sql);\n          } catch (Exception ex) {\n            ex.printStackTrace();\n          }\n        }\n```", "```java\n        Connection conn = getDbConnection();\n        Statement st = conn.createStatement();\n        try (conn; st) {\n          st.execute(sql);\n        } catch (Exception ex) {\n          ex.printStackTrace();\n        }\n```", "```java\n        Connection conn = getDbConnection();\n        try (conn; Statement st = conn.createStatement()) {\n          st.execute(sql);\n        } catch (Exception ex) {\n          ex.printStackTrace();\n        }\n```", "```java\n        void close() throws Exception;\n```", "```java\nclass MyResource1 implements AutoCloseable {\n  public MyResource1(){\n    System.out.println(\"MyResource1 is acquired\");\n  }\n  public void close() throws Exception {\n    //Do what has to be done to release this resource\n    System.out.println(\"MyResource1 is closed\");\n  }\n}\n```", "```java\nclass MyResource2 implements AutoCloseable {\n  public MyResource2(){\n    System.out.println(\"MyResource2 is acquired\");\n  }\n  public void close() throws Exception {\n    //Do what has to be done to release this resource\n    System.out.println(\"MyResource2 is closed\");\n  }\n}\n```", "```java\nMyResource1 res1 = new MyResource1();\nMyResource2 res2 = new MyResource2();\ntry (res1; res2) {\n  System.out.println(\"res1 and res2 are used\");\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nMyResource1 res1 = new MyResource1();\nMyResource2 res2 = new MyResource2();\ntry (res2; res1) {\n  System.out.println(\"res1 and res2 are used\");\n} catch (Exception ex) {\n  ex.printStackTrace();\n}\n```", "```java\nThread.currentThread().dumpStack();\n```", "```java\nnew Throwable().printStackTrace();\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n      .forEach(System.out::println);\n\nArrays.stream(new Throwable().getStackTrace())\n      .forEach(System.out::println);\n\n```", "```java\nSystem.out.println(\"This method is called by \" + Thread.currentThread()\n                                   .getStackTrace()[1].getClassName());\n\nSystem.out.println(\"This method is called by \" + new Throwable()\n                                   .getStackTrace()[0].getClassName());\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n  .forEach(e -> {\n    System.out.println();\n    System.out.println(\"e=\"+e);\n    System.out.println(\"e.getFileName()=\"+ e.getFileName());\n    System.out.println(\"e.getMethodName()=\"+ e.getMethodName());\n    System.out.println(\"e.getLineNumber()=\"+ e.getLineNumber());\n});\n\n```", "```java\nArrays.stream(new Throwable().getStackTrace())\n  .forEach(x -> {\n    System.out.println();\n    System.out.println(\"x=\"+x);\n    System.out.println(\"x.getFileName()=\"+ x.getFileName());\n    System.out.println(\"x.getMethodName()=\"+ x.getMethodName());\n    System.out.println(\"x.getLineNumber()=\"+ x.getLineNumber());\n});\n\n```", "```java\n        public class Clazz01 {\n          public void method(){\n            new Clazz03().method(\"Do something\");\n            new Clazz02().method();\n          }\n        }\n```", "```java\n        public class Clazz02 {\n          public void method(){\n            new Clazz03().method(null);\n          }\n        }\n```", "```java\n        public class Clazz03 {\n          public void method(String action){\n            if(action != null){\n              System.out.println(action);\n              return;\n            }\n            System.out.println(\"Throw the exception:\");\n            action.toString();\n          }\n        }\n```", "```java\n        private static void demo4_StackWalk(){\n          new Clazz01().method();\n        }\n```", "```java\n        public class Chapter11Memory {\n          public static void main(String... args) {\n            demo4_StackWalk();\n          }\n        }\n```", "```java\npublic class Clazz03 {\n  public void method(String action){\n    if(action != null){\n      System.out.println(action);\n      return;\n    }\n    System.out.println(\"Print the stack trace:\");\n    Thread.currentThread().dumpStack();\n  }\n}\n```", "```java\nnew Throwable().printStackTrace();\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n                             .forEach(System.out::println);\nArrays.stream(new Throwable().getStackTrace())\n                             .forEach(System.out::println);\n\n```", "```java\npublic class Clazz03 {\n  public void method(String action){\n    if(action != null){\n      System.out.println(action);\n      return;\n    }\n    StackWalker stackWalker = StackWalker.getInstance();\n    stackWalker.forEach(System.out::println);\n  }\n}\n```", "```java\nSystem.out.println(\"Print the caller class name:\");\nSystem.out.println(StackWalker.getInstance(StackWalker\n                        .Option.RETAIN_CLASS_REFERENCE)\n                        .getCallerClass().getSimpleName());\n\n```", "```java\nclass Calculator {\n   public  double calculate(int i) {\n       return Math.sqrt(2.0 * i);\n   }\n}\n\nclass SomeOtherClass {\n   void reuseObject() {\n      Calculator calculator = new Calculator();\n      for(int i = 0; i < 100; i++ ){\n          double r = calculator.calculate(i);\n          //use result r\n      }\n   }\n} \n```", "```java\nclass Calculator {\n    public  double calculate(int i) {\n        return Math.sqrt(2.0 * i);\n    }\n}\n\nclass SomeOtherClass {\n     private static Calculator calculator;\n     private static Calculator getCalculator(){\n        if(this.calculator == null){\n            this.calculator = new Calculator();\n        }\n        return this.calculator;\n     }\n     void reuseObject() {\n        for(int i = 0; i < 100; i++ ){\n           double r = getCalculator().calculate(i);\n           //use result r\n      }\n   }\n} \n```", "```java\nclass SomeOtherClass {\n   private static Calculator calculator = new Calculator();\n   void reuseObject() {\n      for(int i = 0; i < 100; i++ ){\n          double r = calculator.calculate(i);\n          //use result r\n      }\n   }\n}\n```", "```java\nclass ExpensiveInitClass {\n    private Object data;\n    public ExpensiveInitClass() {\n        //code that consumes resources\n        //and assignes value to this.data\n    }\n\n    public Object getData(){\n        return this.data;\n    }\n}\n```", "```java\nclass LazyInitExample {\n  public ExpensiveInitClass expensiveInitClass\n  public Object getData(){  //can synchrnonize here\n    if(this.expensiveInitClass == null){\n      synchronized (LazyInitExample.class) {\n        if (this.expensiveInitClass == null) {\n          this.expensiveInitClass = new ExpensiveInitClass();\n        }\n      }\n    }\n    return expensiveInitClass.getData();\n  }\n}\n```", "```java\nstatic HashMap<String, Object> cache = new HashMap<>();\nstatic {\n    //populate the cache here\n}\npublic Object getSomeData(String someKey) {\n    Object obj = cache.get(someKey);\n    cache.remove(someKey);\n    return obj;\n}\n```", "```java\nstatic HashMap<String, Object> cache = new HashMap<>();\npublic Object getSomeData(String someKey) {\n    Object obj = cache.get(someKey);\n    if(obj == null){\n        obj = getDataFromSomeSource();\n        cache.put(someKey, obj);\n    }\n    return obj;\n}\n```", "```java\nstatic HashMap<String, Object> cache = new HashMap<>();\nstatic HashMap<String, Integer> count = new HashMap<>();\npublic static Object getSomeData(String someKey) {\n   Object obj = cache.get(someKey);\n   if(obj == null){\n       obj = getDataFromSomeSource();\n       cache.put(someKey, obj);\n       count.put(someKey, 1);\n       if(cache.size() > 10){\n          Map.Entry<String, Integer> max = \n             count.entrySet().stream()\n             .max(Map.Entry.comparingByValue(Integer::compareTo))\n             .get();\n            cache.remove(max.getKey());\n            count.remove(max.getKey());\n        }\n    } else {\n        count.put(someKey, count.get(someKey) + 1);\n    } \n    return obj;\n}\n```", "```java\nprivate static WeakHashMap<Integer, Double> cache \n                                     = new WeakHashMap<>();\nvoid weakHashMap() {\n    int last = 0;\n    int cacheSize = 0;\n    for(int i = 0; i < 100_000_000; i++) {\n        cache.put(i, Double.valueOf(i));\n        cacheSize = cache.size();\n        if(cacheSize < last){\n            System.out.println(\"Used memory=\" + \n              usedMemoryMB()+\" MB, cache=\"  + cacheSize);\n        }\n        last = cacheSize;\n    }\n}\n```", "```java\nUsed memory=1895 MB, cache=2100931\nUsed memory=189 MB, cache=95658\nUsed memory=296 MB, cache=271\nUsed memory=408 MB, cache=153\nUsed memory=519 MB, cache=350\nUsed memory=631 MB, cache=129\nUsed memory=745 MB, cache=2079710\nUsed memory=750 MB, cache=69590\nUsed memory=858 MB, cache=213\n```", "```java\nlong usedMemoryMB() {\n   return Math.round(\n      Double.valueOf(Runtime.getRuntime().totalMemory() - \n                     Runtime.getRuntime().freeMemory())/1024/1024\n   );\n}\n```", "```java\nprivate static WeakHashMap<Integer, Double> cache \n                                     = new WeakHashMap<>();\nvoid weakHashMap() {\n    int last = 0;\n    int cacheSize = 0;\n    for(int i = 0; i < 100_000_000; i++) {\n        Integer iObj = i;\n        cache.put(iObj, Double.valueOf(i));\n        cacheSize = cache.size();\n        if(cacheSize < last){\n            System.out.println(\"Used memory=\" + \n              usedMemoryMB()+\" MB, cache=\"  + cacheSize);\n        }\n        last = cacheSize;\n    }\n}\n```", "```java\nprivate static WeakHashMap<Integer, Double> cache \n                                     = new WeakHashMap<>();\nvoid weakHashMap() {\n    int last = 0;\n    int cacheSize = 0;\n    List<Integer> list = new ArrayList<>();\n    for(int i = 0; i < 100_000_000; i++) {\n        Integer iObj = i;\n        cache.put(iObj, Double.valueOf(i));\n        list.add(iObj);\n        cacheSize = cache.size();\n        if(cacheSize < last){\n            System.out.println(\"Used memory=\" + \n              usedMemoryMB()+\" MB, cache=\"  + cacheSize);\n        }\n        last = cacheSize;\n    }\n}\n```", "```java\nprivate static WeakHashMap<Integer, Double> cache \n                                     = new WeakHashMap<>();\nvoid weakHashMap() {\n    int last = 0;\n    int cacheSize = 0;\n    List<WeakReference<Integer>> list = new ArrayList<>();\n    for(int i = 0; i < 100_000_000; i++) {\n        Integer iObj = i;\n        cache.put(iObj, Double.valueOf(i));\n list.add(new WeakReference(iObj));\n        cacheSize = cache.size();\n        if(cacheSize < last){\n            System.out.println(\"Used memory=\" + \n              usedMemoryMB()+\" MB, cache=\"  + cacheSize +\n              \", list size=\" + list.size());\n        }\n        last = cacheSize;\n    }\n}\n```", "```java\nprivate static WeakReference<Map<Integer, Double[]>> cache;\nvoid weakReference() {\n   Map<Integer, Double[]> map = new HashMap<>();\n   cache = new WeakReference<>(map);\n   map = null;\n   int cacheSize = 0;\n   List<Double[]> list = new ArrayList<>();\n   for(int i = 0; i < 10_000_000; i++) {\n      Double[] d = new Double[1024];\n      list.add(d);\n      if (cache.get() != null) {\n          cache.get().put(i, d);\n          cacheSize = cache.get().size();\n          System.out.println(\"Cache=\"+cacheSize + \n                  \", used memory=\" + usedMemoryMB()+\" MB\");\n      } else {\n          System.out.println(i +\": cache.get()==\"+cache.get()); \n          break;\n      }\n   }\n}\n```", "```java\nCache=4582, used memory=25 MB\n4582: cache.get()==null\n\n```", "```java\nprivate static SoftReference<Map<Integer, Double[]>> cache;\nvoid weakReference() {\n   Map<Integer, Double[]> map = new HashMap<>();\n   cache = new SoftReference<>(map);\n   map = null;\n   int cacheSize = 0;\n   List<Double[]> list = new ArrayList<>();\n   for(int i = 0; i < 10_000_000; i++) {\n      Double[] d = new Double[1024];\n      list.add(d);\n      if (cache.get() != null) {\n          cache.get().put(i, d);\n          cacheSize = cache.get().size();\n          System.out.println(\"Cache=\"+cacheSize + \n                      \", used memory=\" + usedMemoryMB()+\" MB\");\n      } else {\n          System.out.println(i +\": cache.get()==\"+cache.get()); \n          break;\n      }\n   }\n}\n```", "```java\nCache=1004737, used memory=4096 MB\n1004737: cache.get()==null\n```", "```java\nlong um = usedMemoryMB();\nString s = \"\";\nfor(int i = 1000; i < 10_1000; i++ ){\n    s += Integer.toString(i);\n    s += \" \";\n}\nSystem.out.println(\"Used memory: \" \n         + (usedMemoryMB() - um) + \" MB\");  //prints: 71 MB\n\n```", "```java\nlong usedMemoryMB() {\n   return Math.round(\n      Double.valueOf(Runtime.getRuntime().totalMemory() - \n                  Runtime.getRuntime().freeMemory())/1024/1024\n   );\n}\n```", "```java\nlong um = usedMemoryMB();\nStringBuilder sb = new StringBuilder();\nfor(int i = 1000; i < 10_1000; i++ ){\n    sb.append(Integer.toString(i)).append(\" \");\n}\nSystem.out.println(\"Used memory: \" \n         + (usedMemoryMB() - um) + \" MB\");  //prints: 1 MB\n```", "```java\nString s1 = \"this \" +\n            \"string \" +\n            \"takes \" +\n            \"as much memory as another one\";\nString s2 = \"this string takes as much memory as another one\";\n```", "```java\npackage com.packt.cookbook.ch11_memory;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class Epsilon {\n    public static void main(String... args) {\n        List<byte[]> list = new ArrayList<>();\n        int n = 4 * 1024 * 1024;\n        for(int i=0; i < n; i++){\n            list.add(new byte[1024]);\n            byte[] arr = new byte[1024];\n        }\n    }\n}\n```", "```java\ntime java -cp cookbook-1.0.jar -Xms4G -Xmx4G -Xlog:gc com.packt.cookbook.ch11_memory.Epsilon\n```", "```java\njava -version\njava version \"11-ea\" 2018-09-25\nJava(TM) SE Runtime Environment 18.9 (build 11-ea+22)\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11-ea+22, mixed mode)\n```", "```java\nUsing G1\nGC(0) Pause Young (Normal) (G1 Evacuation Pause) 204M->101M(4096M)\nGC(1) Pause Young (Normal) (G1 Evacuation Pause) 279M->191M(4096M)\nGC(2) Pause Young (Normal) (G1 Evacuation Pause) 371M->280M(4096M)\n```", "```java\nGC(50) Pause Full (G1 Evacuation Pause) 4090M->4083M(4096M)\nGC(51) Concurrent Cycle 401.931ms\nGC(52) To-space exhausted\nGC(52) Pause Young (Concurrent Start) (G1 Humongous Allocation)\nGC(53) Concurrent Cycle\nGC(54) Pause Young (Normal) (G1 Humongous Allocation) 4088M->4088M(4096M)\nGC(55) Pause Full (G1 Humongous Allocation) 4088M->4085M(4096M)\nGC(56) Pause Full (G1 Humongous Allocation) 4085M->4085M(4096M)\nGC(53) Concurrent Cycle 875.061ms\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n at java.base/java.util.Arrays.copyOf(Arrays.java:3720)\n at java.base/java.util.Arrays.copyOf(Arrays.java:3689)\n at java.base/java.util.ArrayList.grow(ArrayList.java:237)\n at java.base/java.util.ArrayList.grow(ArrayList.java:242)\n at java.base/java.util.ArrayList.add(ArrayList.java:485)\n at java.base/java.util.ArrayList.add(ArrayList.java:498)\n at com.packt.cookbook.ch11_memory.Epsilon.main(Epsilon.java:12)\n```", "```java\nreal 0m11.549s    //How long the program ran\nuser 0m35.301s    //How much time the CPU was used by the program\nsys 0m19.125s     //How much time the OS worked for the program\n```", "```java\ntime java -cp cookbook-1.0.jar -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xms4G -Xmx4G -Xlog:gc com.packt.cookbook.ch11_memory.Epsilon\n```", "```java\nNon-resizeable heap; start/max: 4096M\nUsing TLAB allocation; max: 4096K\nElastic TLABs enabled; elasticity: 1.10x\nElastic TLABs decay enabled; decay time: 1000ms\nUsing Epsilon\nHeap: 4096M reserved, 4096M (100.00%) committed, 205M (5.01%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 410M (10.01%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 614M (15.01%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 820M (20.02%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 1025M (25.02%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 1230M (30.03%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 1435M (35.04%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 1640M (40.04%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 1845M (45.05%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 2050M (50.05%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 2255M (55.06%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 2460M (60.06%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 2665M (65.07%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 2870M (70.07%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 3075M (75.08%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 3280M (80.08%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 3485M (85.09%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 3690M (90.09%) used\nHeap: 4096M reserved, 4096M (100.00%) committed, 3895M (95.10%) used\nTerminating due to java.lang.OutOfMemoryError: Java heap space\n```", "```java\nreal 0m4.239s\nuser 0m1.861s\nsys 0m2.132s\n```"]