- en: Chapter 8. 3D Model Viewer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 3D模型查看器
- en: Three-dimensional models are everywhere, from mechanical engineering of machine
    parts to medical imaging; from video game design to 3D printing. 3D models are
    as prolific as photos, videos, music, and other media. Yet, while browsers and
    apps have native support for other media types, 3D models do not have so much.
    One day 3D viewing standards will be integrated into the browser (such as WebGL
    and WebVR). Until then, we'll have to rely on plugins and sister apps to view
    our models. Free 3D file models in the OBJ format, for example, can be found online,
    including TF3DM ([http://tf3dm.com/](http://tf3dm.com/)), TurboSquid ([http://www.turbosquid.com/](http://www.turbosquid.com/)),
    and many others ([http://www.hongkiat.com/blog/60-excellent-free-3d-model-websites/](http://www.hongkiat.com/blog/60-excellent-free-3d-model-websites/)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 三维模型随处可见，从机械工程的机械零件到医学成像；从视频游戏设计到3D打印。 3D模型与照片、视频、音乐和其他媒体一样丰富多样。然而，虽然浏览器和应用程序对其他媒体类型有原生支持，但对3D模型的支持并不多。有一天，3D查看标准将集成到浏览器中（例如WebGL和WebVR）。在那之前，我们将不得不依赖插件和姊妹应用程序来查看我们的模型。例如，可以在网上找到免费的OBJ格式的3D文件模型，包括TF3DM（[http://tf3dm.com/](http://tf3dm.com/)）、TurboSquid（[http://www.turbosquid.com/](http://www.turbosquid.com/)）和其他许多网站（[http://www.hongkiat.com/blog/60-excellent-free-3d-model-websites/](http://www.hongkiat.com/blog/60-excellent-free-3d-model-websites/)）。
- en: In this project, we will build an Android 3D model viewer app that lets you
    open and view models in 3D using a Cardboard VR headset. The file format that
    we'll use is OBJ, an open format first developed by Wavefront Technologies for
    cinematic 3D animation. OBJs can be created and exported by many 3D design applications,
    including open source ones, such as Blender and MeshLab, as well as commercial
    ones, such as 3D Studio Max and Maya. An OBJ is a noncompressed plain text file
    that stores a description of the surface mesh of a 3D object composed of triangles
    (or higher degree polygons).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将构建一个Android 3D模型查看器应用程序，让您可以使用Cardboard VR头盔打开和查看3D模型。我们将使用的文件格式是OBJ，这是Wavefront
    Technologies最初为电影3D动画开发的开放格式。OBJ可以由许多3D设计应用程序创建和导出，包括开源应用程序，如Blender和MeshLab，以及商业应用程序，如3D
    Studio Max和Maya。OBJ是一个非压缩的纯文本文件，用于存储由三角形（或更高阶多边形）组成的3D对象的表面网格的描述。
- en: 'To implement the viewer, we will read and parse OBJ file models and display
    them in 3D for viewing with Cardboard. We will accomplish this by performing the
    following steps:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现查看器，我们将读取和解析OBJ文件模型，并在3D中显示它们以供Cardboard查看。我们将通过以下步骤实现这一目标：
- en: Setting up the new project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置新项目
- en: Writing an OBJ file parser to import the geometry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写OBJ文件解析器以导入几何图形
- en: Displaying the 3D model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示3D模型
- en: Rotating the view of the object using the user's head motion
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户的头部运动旋转对象的视图
- en: The source code for this project can be found on the Packt Publishing website,
    and on GitHub at [https://github.com/cardbookvr/modelviewer](https://github.com/cardbookvr/modelviewer)
    (with each topic as a separate commit).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的源代码可以在Packt Publishing网站上找到，并且在GitHub上也可以找到（[https://github.com/cardbookvr/modelviewer](https://github.com/cardbookvr/modelviewer)）（每个主题作为单独的提交）。
- en: Setting up a new project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立一个新项目
- en: 'To build this project, we''re going to use our `RenderBox` library created
    in [Chapter 5](ch05.html "Chapter 5. RenderBox Engine"), *RenderBox Engine*. You
    can use yours, or grab a copy from the downloadable files provided with this book
    or from our GitHub repository (use the commit tagged `after-ch7`—[https://github.com/cardbookvr/renderboxlib/releases/tag/after-ch7](https://github.com/cardbookvr/renderboxlib/releases/tag/after-ch7)).
    For a more detailed description of how to import the `RenderBox` library, refer
    to the final section, *Using RenderBox in future projects*, of [Chapter 5](ch05.html
    "Chapter 5. RenderBox Engine"), *RenderBox Engine*. To create a new project, perform
    the following steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建这个项目，我们将使用在[第5章](ch05.html "第5章. RenderBox引擎")中创建的`RenderBox`库，*RenderBox引擎*。您可以使用您自己的库，或者从本书提供的可下载文件或我们的GitHub存储库中获取副本（使用标记为`after-ch7`的提交—[https://github.com/cardbookvr/renderboxlib/releases/tag/after-ch7](https://github.com/cardbookvr/renderboxlib/releases/tag/after-ch7)）。有关如何导入`RenderBox`库的更详细描述，请参阅[第5章](ch05.html
    "第5章. RenderBox引擎")的最后一节，*在未来项目中使用RenderBox*。执行以下步骤创建一个新项目：
- en: With Android Studio opened, create a new project. Let's name it `Gallery360`
    and target **Android 4.4 KitKat (API 19)** with an **Empty Activity**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android Studio，创建一个新项目。让我们将其命名为`Gallery360`，并以**空活动**为目标定位到**Android 4.4 KitKat
    (API 19)**。
- en: Create new modules for the `renderbox`, `common` and `core` packages, using
    **File** | **New Module** | **Import .JAR/.AAR Package**.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`renderbox`，`common`和`core`包的新模块，使用**文件** | **新建模块** | **导入.JAR/.AAR包**。
- en: Set the modules as dependencies for the app, using **File** | **Project Structure.**
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**文件** | **项目结构**将模块设置为应用程序的依赖项。
- en: Edit the `build.gradle` file as explained in [Chapter 2](ch02.html "Chapter 2. The
    Skeleton Cardboard Project"), *The Skeleton Cardboard Project*, to compile against
    SDK 22.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[第2章](ch02.html "第2章. Cardboard项目的骨架")中的说明编辑`build.gradle`文件，*Cardboard项目的骨架*，以便对SDK
    22进行编译。
- en: Update `/res/layout/activity_main.xml` and `AndroidManifest.xml`, as explained
    in the previous chapters.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`/res/layout/activity_main.xml`和`AndroidManifest.xml`，如前几章所述。
- en: Edit `MainActivity` as `class MainActivity extends CardboardActivity implements
    IRenderBox`, and implement the interface method stubs (*Ctrl* + *I*).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MainActivity`编辑为`class MainActivity extends CardboardActivity implements IRenderBox`，并实现接口方法存根（*Ctrl*
    + *I*）。
- en: 'We can go ahead and define the `onCreate` method in `MainActivity`. The class
    now has the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续在`MainActivity`中定义`onCreate`方法。该类现在具有以下代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can add a cube to the scene, temporarily, to help ensure that everything
    is set up properly. Add it to the `setup` method, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将一个立方体临时添加到场景中，以确保一切设置正确。将其添加到`setup`方法中，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you remember, a `Cube` is a `Component` that's added to a `Transform`. The
    `Cube` defines its geometry (for example, vertices). The `Transform` defines its
    position, rotation, and scale in 3D space.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您记得，`Cube`是添加到`Transform`的`Component`。`Cube`定义了它的几何形状（例如，顶点）。`Transform`定义了它在3D空间中的位置、旋转和缩放。
- en: You should be able to click on **Run 'app'** with no compile errors and see
    the cube and Cardboard split screen view on your Android device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在Android设备上点击**Run 'app'**而没有编译错误，并看到立方体和Cardboard分屏视图。
- en: Understanding the OBJ file format
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解OBJ文件格式
- en: The goal of this project is to view 3D models in the Wavefront OBJ format. Before
    we begin coding, let's take a look at the file format. A reference can be found
    at [http://www.fileformat.info/format/wavefrontobj/egff.htm](http://www.fileformat.info/format/wavefrontobj/egff.htm).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的目标是查看Wavefront OBJ格式的3D模型。在我们开始编码之前，让我们来看看文件格式。可以在[http://www.fileformat.info/format/wavefrontobj/egff.htm](http://www.fileformat.info/format/wavefrontobj/egff.htm)找到参考资料。
- en: As we know, 3D models can be represented as a mesh of X, Y, and Z vertices.
    Sets of vertices are connected to define a face of the mesh surface. A full mesh
    surface is a collection of these faces.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所知，3D模型可以表示为X、Y和Z顶点的网格。顶点集连接在一起定义网格表面的一个面。完整的网格表面是这些面的集合。
- en: Each vertex can also be assigned a normal vector and/or a texture coordinate.
    The normal vector defines the outward facing direction at that vertex, used in
    lighting calculations. The UV texture coordinate can be used to map texture images
    onto the mesh surface. There are other features of the format, including free-form
    curves and materials, which we will not support in this project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 每个顶点也可以分配一个法线向量和/或纹理坐标。法线向量定义了该顶点的外向面向方向，用于光照计算。UV纹理坐标可用于将纹理图像映射到网格表面上。格式的其他特性包括自由曲线和材质，我们在这个项目中不会支持。
- en: As a plain text file, an OBJ is organized as separate lines of text. Each nonblank
    line begins with a keyword and data for that keyword separated by spaces. Comments
    begin with `#` and are ignored by the parser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为纯文本文件，OBJ被组织为单独的文本行。每个非空行以关键字开头，后面是由空格分隔的该关键字的数据。注释以`#`开头，并且被解析器忽略。
- en: 'The OBJ data keywords include:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: OBJ数据关键字包括：
- en: '`v`: Geometric vertices (for example, `v 0.0 1.0 0.0`)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 几何顶点（例如，`v 0.0 1.0 0.0`）'
- en: '`vt`: Texture vertices (for example, `vt 0.0 1.0 0.0`) [not supported in our
    project]'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vt`: 纹理顶点（例如，`vt 0.0 1.0 0.0`）[在我们的项目中不受支持]'
- en: '`vn`: Vertex normals (for example, `vn 0.0 1.0 0.0`)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vn`: 顶点法线（例如，`vn 0.0 1.0 0.0`）'
- en: '`f`: Polygonal face indexes (for example, `f 1 2 3`)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f`: 多边形面索引（例如，`f 1 2 3`）'
- en: The face values are indices pointing into the vertices list into the vertices
    (starting at 1 for the first one).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 面值是指向顶点列表中的顶点的索引（从第一个顶点开始为1）。
- en: As for the `f` command specifying face indices, they're integer values that
    index into the vertex list. When there are three indices, it describes a triangle;
    four describes a quad, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 至于指定面索引的`f`命令，它们是整数值，用于索引顶点列表。当有三个索引时，它描述一个三角形；四个描述一个四边形，依此类推。
- en: When texture vertices exist, they are referenced as the second number after
    a slash, for example, `f 1/1 2/2 3/3`. We're not supporting them now, but we might
    need to parse them in an `f` command. When vertex normals exist, they are referenced
    as the third number after a slash, for example, `f 1//1 2//2 3//3` or `f 1/1/1
    2/2/2 3/3/3`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当纹理顶点存在时，它们被引用为斜杠后的第二个数字，例如，`f 1/1 2/2 3/3`。我们现在不支持它们，但可能需要在`f`命令中解析它们。当顶点法线存在时，它们被引用为斜杠后的第三个数字，例如，`f
    1//1 2//2 3//3`或`f 1/1/1 2/2/2 3/3/3`。
- en: Indices can be negative, in which case they reference the last (most recently
    encountered) item as -1, the previous one as -2, and so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 索引可以是负数，这种情况下它们将以-1表示最后（最近遇到的）项目，-2表示前一个项目，依此类推。
- en: Other lines, including data that we are not supporting here, will be ignored.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其他行，包括我们这里不支持的数据，将被忽略。
- en: 'For example, the following data represents a simple triangle:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下数据表示一个简单的三角形：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our OBJ implementation is limited. It safely handles the example models included
    with this book, and perhaps others that you'll find on the Internet or make yourself.
    However, this is an example code and a demonstration project. Writing a robust
    data importer and supporting the many features of OBJ in our `RenderBox` engine
    is beyond the scope of this book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的OBJ实现是有限的。它可以安全地处理本书附带的示例模型，也许还可以处理您在互联网上找到或自己制作的其他模型。然而，这只是一个示例代码和演示项目。在我们的`RenderBox`引擎中编写一个强大的数据导入器并支持OBJ的许多特性超出了本书的范围。
- en: Creating the ModelObject class
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`ModelObject`类
- en: To begin with, we will define a `ModelObject` class that extends `RenderObject`.
    It will load model data from OBJ files and set up buffers needed by its material
    (and OpenGL ES shaders to be rendered in the VR scene).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将定义一个`ModelObject`类，它扩展了`RenderObject`。它将从OBJ文件加载模型数据，并设置其材质所需的缓冲区（以及OpenGL
    ES着色器，以在VR场景中呈现）。
- en: 'Right-click on the `app/java/com.cardboardvr.modelviewer/` folder, go to **New**
    | **Java Class**, and name it `ModelObject`. Define it so that it `extends RenderObject`,
    as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`app/java/com.cardboardvr.modelviewer/`文件夹，转到**New** | **Java Class**，并命名为`ModelObject`。定义它以扩展`RenderObject`，如下所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Just like we''ve done in the previous chapters, when introducing new kinds
    of `RenderObjects`, we''ll have one or more constructors that can instantiate
    a `Material` and set up buffers. For `ModelObject`, we''ll pass in a file resource
    handle, parse the file (refer to the next topic), and create a solid color material
    (initially, without lighting), as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在之前的章节中所做的那样，当引入新类型的`RenderObjects`时，我们将有一个或多个构造函数，可以实例化一个`Material`并设置缓冲区。对于`ModelObject`，我们将传入一个文件资源句柄，解析文件（参考下一个主题），并创建一个纯色材质（最初，没有光照），如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now add the material as follows. First, declare variables for the buffers (as
    we have done for other `RenderObjects` in the previous projects). These can be
    private, but our convention is to keep them public if we want to define new materials
    outside:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加材质如下。首先，声明缓冲区的变量（就像我们在之前的项目中为其他`RenderObjects`所做的那样）。这些可以是私有的，但我们的约定是如果我们想在外部定义新材质，就将它们保持为公共的：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the `createMaterial` method (which is called from the constructor):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`createMaterial`方法（从构造函数中调用）：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we implement the `parseObj` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们实现`parseObj`方法。
- en: Parse OBJ models
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析OBJ模型
- en: The `parseObj` method will open the resource file as an `InputStream`. It reads
    one line at a time, parsing the command and data, building the model's list of
    vertices, normals, and indexes. Then, we build the buffers from the data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`parseObj`方法将打开资源文件作为`InputStream`。它一次读取一行，解析命令和数据，构建模型的顶点、法线和索引列表。然后，我们从数据构建缓冲区。'
- en: 'First, at the top of the `ModelObject` class, declare variables for the data
    lists:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`ModelObject`类的顶部，声明数据列表的变量：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s write `parseObj` with placeholders for helper methods. We open the file,
    process each line, build the buffers, and handle potential IO errors:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写`parseObj`，并为辅助方法添加占位符。我们打开文件，处理每一行，构建缓冲区，并处理潜在的IO错误：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `parseLine` code is pretty straightforward. The first token of the line
    is the one-or-two character command (such as `v`, `vn`, or `f`), followed by data
    values (either float coordinates or integer indexes). Here''s the code for `parseLine`
    and the parsers for the `v` and `vn` vertices:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`parseLine`代码非常简单。行的第一个标记是一个或两个字符的命令（如`v`、`vn`或`f`），后面是数据值（浮点坐标或整数索引）。以下是`parseLine`和`v`、`vn`顶点的解析器的代码：'
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `f` line needs to handle various value cases.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`f`行需要处理各种值情况。'
- en: As for the `f` command that specifies face indices, they're integer values that
    index into the vertex list. When there are three indices, it describes a triangle,
    four describes a quad, and so on. Anything with more than three sides will need
    to be subdivided into triangles for our rendering with OpenGL ES.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 至于指定面索引的`f`命令，它们是索引到顶点列表的整数值。当有三个索引时，它描述一个三角形，四个描述一个四边形，依此类推。超过三边的任何形状都需要被细分为三角形，以便在OpenGL
    ES中进行渲染。
- en: Also, there can be any combination of index values, including formats such as
    `v` or `v/vt` or `v/vt/vn`, or even `v//vn`, `/vt/vn`, or `//vn`. (Remember that
    since we're not mapping textures, we will only use the first and third.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以有任意组合的索引值，包括格式如`v`或`v/vt`或`v/vt/vn`，甚至`v//vn`，`/vt/vn`或`//vn`。（请记住，由于我们没有映射纹理，我们只会使用第一个和第三个。）
- en: 'Let''s tackle the simplest case first, a triangle face:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先处理最简单的情况，即三角形面：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now consider that there are more than three indices on the face. We need a
    method to triangulate the polygon. Let''s write that now:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑面上有超过三个索引。我们需要一个方法来将多边形三角化。让我们现在编写这个方法：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can use it in `processFLine`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`processFLine`中使用它：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code is applied to the face value `v` and also `v/vt` since we are skipping
    textures. I''ve also commented out the other two permutations of the face index
    values. The rest of this is mostly just brute force string parsing. The `v//vn`
    case is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码适用于面值`v`和`v/vt`，因为我们跳过纹理。我还注释掉了面索引值的其他两种排列。其余部分大部分只是暴力字符串解析。`v//vn`情况如下：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, the `v/vt/vn` case is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`v/vt/vn`情况如下：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As mentioned earlier, in the OBJ file format description, indices can be negative;
    in which case they need to be referenced from the end of the vertex list backward.
    This can be implemented by adding the index value to the size of the index list.
    To support this, in the preceding code, replace all `s--`; lines with the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在OBJ文件格式描述中，索引可以是负数；在这种情况下，它们需要从顶点列表的末尾向后引用。这可以通过将索引值添加到索引列表的大小来实现。为了支持这一点，在前面的代码中，用以下内容替换所有`s--`行：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: buildBuffers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: buildBuffers
- en: 'The last step for the `parseObj` method is to build our shader buffers from
    the model data, that is, the `vertexBuffer`, `normalBuffer`, and `indexBuffer`
    variables. We can add that now to a `buildBuffers` method, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`parseObj`方法的最后一步是从模型数据构建我们的着色器缓冲区，即`vertexBuffer`、`normalBuffer`和`indexBuffer`变量。我们现在可以将其添加到`buildBuffers`方法中，如下所示：'
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: One caveat. We noticed that for the `RenderBox` coordinate system and shaders,
    it is necessary to invert the normals from the OBJ data (using `-f` rather than
    `f`). Actually, this depends on OBJ exporters (3Ds Max, Blender, and Maya). Some
    of them do and some don't flip normals. Unfortunately, there's no way to determine
    whether or not normals are flipped other than by viewing the model. For this reason,
    some OBJ importer/viewers provide (optional) functions to calculate normals from
    the face geometry rather than rely on the import data itself.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个注意事项。我们注意到对于`RenderBox`坐标系和着色器，有必要从OBJ数据中反转法线（使用`-f`而不是`f`）。实际上，这取决于OBJ导出器（3Ds
    Max、Blender和Maya）。其中一些会翻转法线，而另一些则不会。不幸的是，除了查看模型之外，没有办法确定法线是否被翻转。因此，一些OBJ导入器/查看器提供了（可选的）功能，可以根据面几何计算法线，而不是依赖于导入数据本身。
- en: Model extents, scaling, and center
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型范围、缩放和中心
- en: 3D models come in all shapes and sizes. To view them in our app, we need to
    know the minimum and maximum boundaries of the model and its geometric center
    to scale and position it properly. Let's add this to `ModelObject` now.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 3D模型有各种形状和大小。为了在我们的应用程序中查看它们，我们需要知道模型的最小和最大边界以及其几何中心，以便适当地进行缩放和定位。让我们现在将这些添加到`ModelObject`中。
- en: 'At the top of the `ModelObject` class, add the following variables:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ModelObject`类的顶部，添加以下变量：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Initialize the extents in the parser, before we parse the model data. The minimum
    extents are initialized to the maximum possible values; the maximum extents are
    initialized to the minimum possible values:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析器中初始化范围，然后解析模型数据。最小范围初始化为最大可能值；最大范围初始化为最小可能值：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Rather than calculating the extents after the model is loaded, we''ll do it
    during the import process. As we add a new vertex to the vertex list, we''ll calculate
    the current extents. Add a call to `setExtents` in the `processVLine` loop:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在模型加载后而不是在导入过程中计算范围。当我们向顶点列表添加一个新顶点时，我们将计算当前范围。在`processVLine`循环中添加一个调用`setExtents`：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, the `setExtents` method can be implemented as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`setExtents`方法可以实现如下：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And let''s add a scalar method that will be useful when we add the model to
    the scene (as you''ll see in the next topic), to scale it to a normalized size
    with extents `-1` to `1`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个标量方法，当我们将模型添加到场景中时会很有用（正如你将在下一个主题中看到的），将其缩放到一个标准大小，范围为`-1`到`1`：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, let's try it out!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试试吧！
- en: I'm a little teapot
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我是一个小茶壶
- en: For decades, 3D computer graphics researchers and developers have used this
    cute model of a teapot. It's a classic! The back story is that Martin Newell,
    the famous computer graphics pioneer and researcher, needed a model for his work,
    and his wife suggested that he model their teapot at home. The original is now
    on display at the Boston Computer Museum. We have included an OBJ version of this
    classic model with the downloadable files for this book.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，3D计算机图形研究人员和开发人员一直在使用这个可爱的茶壶模型。它是一个经典！背后的故事是，著名的计算机图形先驱和研究人员马丁·纽维尔需要一个模型来进行他的工作，他的妻子建议他在家里对他们的茶壶进行建模。原作现在展览在波士顿计算机博物馆。我们已经在本书的可下载文件中包含了这个经典模型的OBJ版本。
- en: Of course, you can choose your own OBJ file, but if you want to use the teapot,
    locate the `teapot.obj` file, and copy it to the `res/raw` folder (create the
    folder if necessary).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以选择自己的OBJ文件，但如果你想使用茶壶，找到`teapot.obj`文件，并将其复制到`res/raw`文件夹中（如果需要，创建该文件夹）。
- en: 'Now load the model and try it. In `MainActivity`, add a variable at the top
    of the `MainActivity` class to hold the current model:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在加载模型并尝试。在`MainActivity`中，添加一个变量到`MainActivity`类的顶部来保存当前模型：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code to the `setup` method. Notice that we''re scaling it
    to a fraction of the original size and placing it 3 units in front of the camera:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`setup`方法中。注意，我们将其缩放到原始大小的一小部分，并将其放置在摄像头前方3个单位处：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the project, and it should look like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目，应该看起来像这样：
- en: '![I''m a little teapot](img/B05144_08_01.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![我是一个小茶壶](img/B05144_08_01.jpg)'
- en: 'You can see that the model was successfully loaded and rendered. Unfortunately,
    the shading is difficult to discern. To get a better view of the shaded teapot,
    let''s shift it down a bit. Modify the `setLocalPosition` method in setup, as
    follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到模型已经成功加载和渲染。不幸的是，阴影很难辨认。为了更好地观看阴影茶壶，让我们把它下移一点。修改`setup`中的`setLocalPosition`方法，如下所示：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot is cropped and enlarged, so you can see the shaded
    teapot here similar to the way you''d see it in the Cardboard viewer:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图被裁剪和放大，这样你就可以看到这里的阴影茶壶，就像你在Cardboard观看器中看到的一样：
- en: '![I''m a little teapot](img/B05144_08_02.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![我是一个小茶壶](img/B05144_08_02.jpg)'
- en: I'm a little rotating teapot
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我是一个旋转的小茶壶
- en: Let's enhance the viewing experience by rotating the model as the user rotates
    his head. The effect will be different than a "normal" virtual reality experience.
    Ordinarily, moving one's head in VR rotates the subjective view of the camera
    in the scene to look around in unison with your head movement. In this project,
    the head movement will be like an input control rotating the model. The model
    is at a fixed position in front of you at all times.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过旋转模型来增强观看体验，当用户旋转头部时模型也会旋转。这种效果与“正常”的虚拟现实体验不同。通常情况下，在VR中移动头部会旋转场景中相机的主观视图，以便与头部运动一起四处张望。在这个项目中，头部运动就像一个输入控制旋转模型。模型始终固定在你面前的位置。
- en: To implement this feature is quite simple. The `RenderBox preDraw` interface
    method is called at the start of each frame. We'll get the current head angles
    and rotate the model accordingly, converting the head post-Euler angles into a
    Quaternion. (Combining multiple Euler angles can result in an unexpected final
    rotational orientation). We will also conjugate (that is, invert or reverse) the
    rotation, so that when you look up, you see the bottom of the object and so on.
    It feels more natural this way.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这个功能非常简单。`RenderBox preDraw`接口方法在每一帧开始时被调用。我们将获取当前的头部角度并相应地旋转模型，将头部后欧拉角转换为四元数（组合多个欧拉角可能导致意外的最终旋转方向）。我们还会共轭（即反转）旋转，这样当你抬头时，你会看到物体的底部，依此类推。这样感觉更自然。
- en: 'In `MainActivity`, add the following code to `preDraw`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，添加以下代码到`preDraw`：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In `setup`, ensure that the `setLocalPosition` method positions the teapot
    straight in front of the camera:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup`中，确保`setLocalPosition`方法将茶壶直立在摄像头前方：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Try and run it. We're almost there! The model rotates with the head, but we're
    still looking around the VR space as well.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行它。我们快要成功了！模型随着头部旋转，但我们仍然在VR空间中四处张望。
- en: 'To lock the head position, we just need to disable head tracking in `RenderBox`.
    If your version of `RenderBox` (as built in [Chapter 5](ch05.html "Chapter 5. RenderBox
    Engine"), *RenderBox Engine*) does not yet have this feature, add it to your separate
    `RenderBoxLib` lib project, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了锁定头部位置，我们只需要在`RenderBox`中禁用头部跟踪。如果你的`RenderBox`版本（在[第5章](ch05.html "第5章. RenderBox
    Engine")中构建的*RenderBox Engine*）还没有这个功能，那么将其添加到你的单独的`RenderBoxLib` lib项目中，如下所示：
- en: 'In the `Camera.java` file, first add a new public variable for `headTracking`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Camera.java`文件中，首先添加一个新的公共变量`headTracking`：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Modify the `onDrawEye` method to conditionally update the view transform, as
    follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`onDrawEye`方法以有条件地更新视图变换，如下所示：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Make sure that you copy the updated `.aar` file to the `ModelViewer` project's
    `RenderBox` module folder after you rebuild it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在重新构建后将更新的`.aar`文件复制到`ModelViewer`项目的`RenderBox`模块文件夹中。
- en: 'Now, in the `MainActivity` class''s `setup()`, add the following setting:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`MainActivity`类的`setup()`中，添加以下设置：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run it now, and as you move your head, the model remains relatively stationary
    but rotates as you turn your head. Neato! Much better.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行它，当你移动头部时，模型保持相对静止，但随着你转动头部而旋转。太棒了！好多了。
- en: Thread safe
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线程安全
- en: 'In [Chapter 7](ch07.html "Chapter 7. 360-Degree Gallery"), *360-Degree Gallery*,
    we explained the need for worker threads to offload processing from the render
    thread. In this project, we''ll add threading to the `ModelObject` constructor
    where we read and parse the model files:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章。360度画廊")中，*360度画廊*，我们解释了需要工作线程将处理从渲染线程中卸载的需求。在这个项目中，我们将在`ModelObject`构造函数中添加线程，用于读取和解析模型文件：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have to declare the file handle, `objFile`, as `final` to be able to access
    it from within the inner class. You may have also noticed that we added a call
    to the material's `setup` program before starting the thread to ensure that it's
    properly set up in time and avoid crashing the app. This avoids the need to call
    `createMaterial` within a `queueEvent` procedure, since the shader compiler makes
    use of the graphics context. Similarly, we disable the object until it has completed
    loading its data. Finally, since the load is asynchronous, it's necessary to set
    the scale at the end of this procedure. Our previous method set the scale in `setup()`,
    which now completes before the model is done loading.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将文件句柄`objFile`声明为`final`，以便能够从内部类中访问它。您可能还注意到，我们在启动线程之前添加了对材质的`setup`程序的调用，以确保它在时间上得到正确设置并避免崩溃应用。这避免了在`queueEvent`过程中调用`createMaterial`的需要，因为着色器编译器利用了图形上下文。同样，我们在加载完成之前禁用对象。最后，由于加载是异步的，必须在此过程的末尾设置比例。我们以前的方法在`setup()`中设置了比例，现在在模型加载完成之前完成了。
- en: Launch with intent
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用意图启动
- en: In [Chapter 7](ch07.html "Chapter 7. 360-Degree Gallery"), *360-Degree Gallery*,
    we introduced the use of Android intents to associate an app with a specific file
    type in order to launch our app as a viewer of those files. We'll do the same
    for OBJ files here.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](ch07.html "第7章。360度画廊")中，*360度画廊*，我们介绍了使用Android意图将应用程序与特定文件类型相关联，以便将我们的应用程序作为这些文件的查看器启动。我们将在这里为OBJ文件做同样的事情。
- en: An **intent** is a message that any app can send to the Android system that
    declares its intent to use another app for a certain purpose. The intent object
    contains a number of members to describe what type of action needs to be done,
    and, if any, the data on which it needs to be done. For the image gallery, we
    associated the intent filter with an image mime type. For this project, we'll
    associate an intent filter with a filename extension.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**意图**是任何应用程序都可以发送到Android系统的消息，宣告其意图使用另一个应用程序来完成某个特定目的。意图对象包含许多成员，用于描述需要执行的操作类型，以及（如果有的话）需要执行操作的数据。对于图像库，我们将意图过滤器与图像MIME类型相关联。对于这个项目，我们将意图过滤器与文件名扩展名相关联。'
- en: 'In your `AndroidManifest.xml` file, add an intent filter to the activity block.
    This lets Android know that the app can be used as an OBJ file viewer. We need
    to specify it as a file scheme and the filename pattern. The wildcard mime type
    and host are also required by Android. Add the following XML code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`AndroidManifest.xml`文件中，向活动块添加一个意图过滤器。这让Android知道该应用程序可以用作OBJ文件查看器。我们需要将其指定为文件方案和文件名模式。通配符MIME类型和主机也是Android所必需的。添加以下XML代码：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To handle the situation, we''ll add a new constructor to `ModelObject` that
    takes a URI string instead of a resource ID, as we did earlier. Like the other
    constructor, we need to open an input stream and pass it to `parseObj`. Here''s
    the constructor, including the worker thread:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这种情况，我们将在`ModelObject`中添加一个新的构造函数，该构造函数接受一个URI字符串而不是资源ID，就像我们之前做的那样。与其他构造函数一样，我们需要打开一个输入流并将其传递给`parseObj`。以下是构造函数，包括工作线程：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now in the `MainActivity` class''s `setup`, we''ll check whether the app is
    launched from an intent and use the intent URI. Otherwise, we''ll view the default
    model, as we did earlier:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`MainActivity`类的`setup`中，我们将检查应用程序是否是从意图启动的，并使用意图URI。否则，我们将查看默认模型，就像我们之前做的那样：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now with the project built and installed on the phone, let's try some web integration.
    Open the web browser and visit a 3D model download site.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目已经构建并安装到手机上，让我们尝试一些网络集成。打开网络浏览器并访问一个3D模型下载网站。
- en: Find the **Download** link for the interesting model to download it into the
    phone, and then when prompted, use the `ModelViewer` app to view it!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 找到有趣模型的**下载**链接，将其下载到手机上，然后在提示时，使用`ModelViewer`应用程序查看它！
- en: Practical and production ready
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用和生产就绪
- en: Note that, as mentioned earlier, we've created a limited implementation of the
    OBJ model format, so not every model that you find will view correctly (if at
    all) at this point. Then again, it might be sufficient, depending on the requirements
    of your own projects, for example, if you include specific models in the resource
    folder that can be viewed in the released version of your app. When you have complete
    control of the input data, you can cut corners.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，正如前面提到的，我们已经创建了OBJ模型格式的有限实现，因此您找到的每个模型在这一点上可能无法正确查看（如果有的话）。不过，这可能是足够的，取决于您自己项目的要求，例如，如果您在资源文件夹中包含特定模型，可以在应用的发布版本中查看。当您完全控制输入数据时，您可以偷个懒。
- en: 'While the basic structure of the OBJ file format is not very complicated, as
    we''ve demonstrated here, like many things in software (and in life) "the devil
    is in the details." Using this project as a starting point, and then building
    your own practical and production-ready OBJ file parser and renderer will require
    a considerable amount of additional work. You might also do some research on pre-existing
    packages, other model formats, or maybe even lifting some code from an open-source
    game engine like LibGDX. The features of OBJ that we omitted but are worth considering
    include the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然OBJ文件格式的基本结构并不是非常复杂，正如我们在这里所展示的，就像软件（以及生活中的许多事物）一样，“魔鬼在细节中”。以这个项目作为起点，然后构建您自己的实用和生产就绪的OBJ文件解析器和渲染器将需要相当多的额外工作。您还可以研究现有的软件包、其他模型格式，或者甚至从开源游戏引擎（如LibGDX）中提取一些代码。我们省略的OBJ的特性，但值得考虑的包括以下内容：
- en: Texture vertices
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纹理顶点
- en: Material definitions
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材质定义
- en: Curve elements
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曲线元素
- en: Grouping of geometry
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何图形的分组
- en: Color and other vertex attributes
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色和其他顶点属性
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this project, we wrote a simple viewer for 3D models in the open OBJ file
    format. We implemented a `ModelObject` class that parses the model file and builds
    the vector and normal buffers needed by `RenderBox` to render the object in the
    scene. We then enabled shading. We then made the viewer interactive so that the
    model rotates as you move your head.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们编写了一个简单的查看器，用于以开放的OBJ文件格式查看3D模型。我们实现了一个`ModelObject`类，它解析模型文件并构建了`RenderBox`需要的向量和法线缓冲区，以在场景中渲染对象。然后我们启用了阴影。然后我们使查看器交互，这样模型就会随着你移动头部而旋转。
- en: In the next chapter, we explore another type of media, your music. The music
    visualizer responds to the current music player to display dancing geometry in
    the VR world.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索另一种类型的媒体，即音乐。音乐可视化器会响应当前的音乐播放器，在VR世界中显示跳舞的几何图形。
