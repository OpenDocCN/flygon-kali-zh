- en: Deciphering Error Messages and Performance Leaks
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 解读错误消息和性能泄漏
- en: Of course, no good language is complete without a means to detect and diagnose
    problems in your code. JavaScript provides rich error messages that are incredibly
    powerful and intuitive, but there are a few caveats and tips as you tiptoe through
    bug-ridden code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有一个好的语言是完整的，没有一种方法可以检测和诊断代码中的问题。JavaScript提供了非常强大和直观的丰富错误消息，但在处理错误时有一些注意事项和技巧。
- en: As you probably know, finding a problem in your own code (a "bug") is one of
    the most frustrating events to occur to a developer. We pride ourselves on our
    code's ability to do its task, but sometimes we don't account for edge and corner
    cases. Additionally, error messages give us important information as we're in
    the process of coding by giving us important diagnostic information. Luckily,
    there are tools that can help us understand what's going on in our JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道，在自己的代码中找到问题（“bug”）是开发人员最沮丧的事件之一。我们以代码能够完成任务为傲，但有时我们没有考虑到边缘和特殊情况。此外，错误消息通过提供重要的诊断信息，给我们在编码过程中提供了重要的信息。幸运的是，有一些工具可以帮助我们理解JavaScript中发生的情况。
- en: Let's explore.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索一下。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The Error object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误对象
- en: Using debuggers and other tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用调试器和其他工具
- en: Accommodating JavaScript's performance limitations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适应JavaScript的性能限制
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work through the `Chapter-9` examples from GitHub at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好在GitHub上的`Chapter-9`示例中进行工作，网址为[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/)。
- en: We'll be working with the developer tools in the browser, and for the purposes
    of illustration, the instructions and screenshots will be from Google Chrome.
    If you're familiar with tools in another browser, however, the concepts are similar.
    You may also want to have a JSON parsing extension added to Chrome if you haven't
    already done so.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在浏览器中使用开发者工具，为了说明的目的，指南和截图将来自Google Chrome。但如果你熟悉其他浏览器中的工具，概念是相似的。如果你还没有这样做，你可能还想在Chrome中添加一个JSON解析扩展。
- en: There are no specific hardware requirements for this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有特定的硬件要求。
- en: The Error object
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误对象
- en: Let's take a look at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/error-object](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/error-object).
    Open the `index.html` file and examine the JavaScript console. The first function,
    `typoError`, is invoked and throws a wonderful error.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/error-object](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-9/error-object)。打开`index.html`文件并检查JavaScript控制台。第一个函数`typoError`被调用并抛出了一个精彩的错误。
- en: 'It should look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来像这样：
- en: '![](assets/4597e545-02f8-409c-9027-fb7668083c61.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4597e545-02f8-409c-9027-fb7668083c61.png)'
- en: Figure 9.1 - Error console
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 - 错误控制台
- en: 'Now, let''s look at the code for our function in `index.js`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`index.js`中我们函数的代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'OK! It''s a simple typo, as we''ve all done: it should be `console.error` instead
    of `cnosole.error`. If you''ve never made a typo in code… you''re a unicorn. The
    error message we see in the console makes it easy to see what the error is and
    on what line of code it lives: line 2\. Now, something interesting to note is
    that after calling `typoError()` toward the end of the file, we also have an invocation
    to another function *but it doesn''t fire.* We know this because (spoiler alert)
    it also throws errors, but we don''t see them. An Uncaught ReferenceError is a
    **blocking error**.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！这只是一个简单的拼写错误，我们都犯过：应该是`console.error`而不是`cnosole.error`。如果你在代码中从未犯过拼写错误……你是一个独角兽。我们在控制台中看到的错误消息使我们很容易看到错误是什么，以及它存在于代码的哪一行：第2行。现在，有趣的是，在文件末尾调用`typoError()`之后，我们还调用了另一个函数*但它没有触发*。我们知道这是因为（剧透警告）它也抛出了错误，但我们没有看到它们。未捕获的引用错误是一个**阻塞错误**。
- en: 'In JavaScript, some errors, called blocking errors, will halt the execution
    of the code. Others, called **non-blocking errors**, are mitigated in such a way
    that the code can continue to execute even if the problem isn''t resolved. There
    are a few ways of dealing with errors, and you should do so when faced with potential
    vectors for errors. Do you remember [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml),
    *Events, Event-Driven Design, and APIs*, where we used a `.catch()` block in our
    `fetch()` call to gracefully handle Ajax errors? The same principle applies here.
    This is obviously a very contrived example, but let''s go ahead and mitigate our
    error, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，一些错误称为阻塞错误，将停止代码的执行。其他一些称为**非阻塞错误**，以这样的方式进行缓解，即使问题没有解决，代码仍然可以继续执行。处理错误的方法有几种，当面临潜在的错误向量时，你应该这样做。你还记得[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)吗，*事件、事件驱动设计和API*，我们在`fetch()`调用中使用了`.catch()`块来优雅地处理Ajax错误？同样的原则也适用于这里。这显然是一个非常牵强的例子，但让我们继续缓解我们的错误，就像这样：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a `try/catch` block for a typo is overkill, but let's pretend it was something
    more serious, such as an asynchronous call or a dependency from another library.
    If we take a look at our console output now, we'll see that our second function,
    `fetchAttempt`, has fired and it is also producing errors. Open the `index-mitigated.js`
    file and the accompanying `index-mitigated.html` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拼写错误使用`try/catch`块是杀鸡用牛刀，但让我们假装它是更严重的问题，比如异步调用或来自另一个库的依赖。如果我们现在查看控制台输出，我们会看到我们的第二个函数`fetchAttempt`已经触发，并且也产生了错误。打开`index-mitigated.js`文件和相应的`index-mitigated.html`文件。
- en: 'You should see this in the console of `index-mitigated.html`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在`index-mitigated.html`的控制台中看到这个：
- en: '![](assets/ebf1d3e2-50a3-4680-b6fa-0ed70f4143c6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ebf1d3e2-50a3-4680-b6fa-0ed70f4143c6.png)'
- en: Figure 9.2 - Non-blocking error
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 - 非阻塞错误
- en: 'Here, we see that our code does not stop at the typo; we''ve made it into a
    non-blocking error with our try/catch. We see that our `fetchAttempt` function
    is firing and giving us a different kind of error: `404 Not Found`. Since we entered
    a non-existent URL (ending in `undefined` on purpose), we receive another error
    after that: a `SyntaxError` from our promise.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到我们的代码并没有在拼写错误处停止；我们已经通过try/catch将其变成了一个非阻塞错误。我们看到我们的`fetchAttempt`函数正在触发并给我们一个不同类型的错误：`404
    Not Found`。由于我们输入了一个不存在的URL（故意以`undefined`结尾），之后我们收到了另一个错误：来自我们的promise的`SyntaxError`。
- en: 'At first glance, this error may be difficult to understand, as it is explicitly
    talking about an unexpected character in the JSON. In [Chapter 7](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml),
    *Events, Event-Driven Design, and APIs,* we worked with the Star Wars API: `https://swapi.dev/`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这个错误可能很难理解，因为它明确地谈到了JSON中的意外字符。在[第7章](72ec1a13-fd17-4319-8693-8afa18746a72.xhtml)中，*事件、事件驱动设计和API*，我们使用了星球大战API：`https://swapi.dev/`：
- en: 'Let''s look at the JSON of the example response from `https://swapi.dev/api/people/1/`.
    This could be a good time to ensure you have a JSON parsing extension in your
    browser:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看一下从`https://swapi.dev/api/people/1/`获取的示例响应的JSON。这可能是一个很好的时机，确保你的浏览器中有一个JSON解析扩展：
- en: '![](assets/deb08f36-98ab-4536-86c9-fef988c42ba4.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/deb08f36-98ab-4536-86c9-fef988c42ba4.png)'
- en: Figure 9.3 - JSON from https://swapi.dev/api/people/1/
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 - 来自https://swapi.dev/api/people/1/的JSON
- en: 'It''s well-formed JSON, so even though our error specifies Syntax Error, it''s
    not actually the syntax of the response data that''s the problem. We''ll need
    to look deeper. Let''s look at what we''re getting from our `fetchAttempt` call
    in the Chrome JavaScript debugger. Let''s click the link for the second error
    in our code here:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是格式良好的JSON，所以即使我们的错误指定了语法错误，实际上问题并不在于响应数据的语法。我们需要更深入地了解一下。让我们看看我们在Chrome JavaScript调试器中从`fetchAttempt`调用中得到的内容。让我们点击这里我们代码中的第二个错误的链接：
- en: '![](assets/dca8ad30-ba0b-4013-a321-232dbe29b63b.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dca8ad30-ba0b-4013-a321-232dbe29b63b.png)'
- en: Figure 9.4 - Following the trail of the 404...
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 - 跟踪404的路径...
- en: 'We then see this panel, with the red squiggly underlines and red markers to
    indicate errors:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们看到这个面板，有红色的波浪线和红色的标记表示错误：
- en: '![](assets/2cff2d02-d8e7-4831-b252-eba0e743201d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2cff2d02-d8e7-4831-b252-eba0e743201d.png)'
- en: Figure 9.5 - Errors in the debugger
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 - 调试器中的错误
- en: So far, so good. If you hover over the red X on line 20, the tooltip advises
    us of the 404 error.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很好。如果你在第20行上悬停在红色X上，工具提示会告诉我们有404错误。
- en: Navigate to the Network tab. This tool tracks incoming and outbound HTTP requests.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到网络选项卡。这个工具跟踪传入和传出的HTTP请求。
- en: 'Click on the call named undefined and then into the Headers panel, like so:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击名为undefined的调用，然后进入头部面板，就像这样：
- en: '![](assets/be0217f8-ae58-43b4-901c-2c96ba1fdfb8.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be0217f8-ae58-43b4-901c-2c96ba1fdfb8.png)'
- en: Figure 9.6 - The Headers tab
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6 - 头部选项卡
- en: 'Aha! Now we see what the problem is: the JSON error is helpful, but steered
    us in the wrong direction. The error isn''t with the JSON itself, but rather,
    the error means that the response *isn''t JSON at all*! It is an HTML 404 error,
    so there is no JSON data. Our problem is confirmed to be in the URL fetching a
    non-existent address, and so an error page is rendered, which makes no sense to
    the JSON parser of `fetch`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！现在我们知道问题所在了：JSON错误是有帮助的，但是让我们走错了方向。错误不在于JSON本身，而是错误意味着响应根本就不是JSON！这是一个HTML
    404错误，所以没有JSON数据。我们的问题被确认为在获取一个不存在的地址的URL中，因此会呈现一个错误页面，这对于`fetch`的JSON解析器来说是没有意义的。
- en: Let's spend some more time with debugging tools.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花更多的时间来使用调试工具。
- en: Using debuggers and other tools
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调试器和其他工具
- en: Many web developers choose to use Google Chrome as their browser of choice as
    it provides a wealth of developer tools out of the box. If Chrome is not your
    browser of choice, here are a few browsers that have developer tools that are
    similar.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Web开发人员选择使用Google Chrome作为他们的首选浏览器，因为它提供了丰富的开发工具。如果Chrome不是你的首选浏览器，这里有一些具有类似开发工具的浏览器。
- en: Safari
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Safari
- en: 'Safari ships with developer mode off by default, so if you use Safari, toggle
    the Develop menu in the Advanced pane in the preferences at the bottom:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Safari默认情况下不带开发者模式，所以如果你使用Safari，切换到首选项的高级面板中的开发菜单：
- en: '![](assets/55a1a874-2b1b-403b-85de-b7e8d75fa686.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/55a1a874-2b1b-403b-85de-b7e8d75fa686.png)'
- en: Figure 9.7 - Adding the Develop Menu to Safari
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 - 在Safari中添加开发菜单
- en: Now, you'll have a Develop menu with tools that may render error messages slightly
    differently than Chrome, but that are still accessible.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将拥有一个带有工具的开发菜单，这些工具可能会以与Chrome略有不同的方式呈现错误消息，但仍然可以访问。
- en: Internet Explorer and Microsoft Edge
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Internet Explorer和Microsoft Edge
- en: 'With all sincerity and only a little bit of prejudice, I would recommend *not*
    using Internet Explorer or Microsoft Edge for JavaScript development. It is important
    to test your code cross-browser, but I find the developer tools provided in IE
    and Edge to be lacking. For example, let''s take a look at the exact same page
    in Edge''s developer tools:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 真诚地并且只有一点点偏见，我建议*不要*在JavaScript开发中使用Internet Explorer或Microsoft Edge。跨浏览器测试很重要，但我发现IE和Edge提供的开发工具有所欠缺。例如，让我们在Edge的开发工具中看一下完全相同的页面：
- en: '![](assets/0f6bef7a-8ab0-40ac-9750-869749e6bb52.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f6bef7a-8ab0-40ac-9750-869749e6bb52.png)'
- en: Figure 9.8 - Edge JavaScript Console
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 - Edge JavaScript控制台
- en: Even though we mitigated our error with a try/catch block, Edge still treats
    the typo as a blocking error. There are other idiosyncrasies of the Microsoft
    browsers as well, which date back to the browser wars we learned about before,
    so a good rule of thumb is to develop in Chrome and then test in a Microsoft browser
    to ensure cross-browser compatibility.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们用try/catch块减轻了错误，Edge仍然将拼写错误视为阻塞错误。微软浏览器还有其他特殊之处，这些特殊之处可以追溯到我们之前学到的浏览器战争，所以一个好的经验法则是在Chrome中开发，然后在微软浏览器中测试，以确保跨浏览器兼容性。
- en: While there are development tools in all major browsers, the examples used here
    will be from Chrome. Let's take a closer look at the JavaScript console itself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有主要浏览器都有开发工具，但这里使用的示例将来自Chrome。让我们更仔细地看看JavaScript控制台本身。
- en: The JavaScript console
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript控制台
- en: The console is not only a place to see errors but it can be used to execute
    code as well. This is useful for quick debugging, especially on a page that may
    have another library of code incorporated within it. The console has *scope* to
    all JavaScript loaded on the page, as long as it's accessible from the top-level
    `window` object. We wouldn't expect to have access to a function's internal variables,
    but if the browser can access the data, we can access it in the console.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台不仅是查看错误的地方，还可以用来执行代码。这对于快速调试特别有用，特别是在页面上可能包含另一个代码库的情况下。只要从顶层`window`对象访问，控制台就可以访问页面上加载的所有JavaScript的*作用域*。我们不希望访问函数的内部变量，但如果浏览器可以访问数据，我们就可以在控制台中访问它。
- en: 'Open the `fetch.html` and `fetch.js` files in the `debugger` folder and take
    a look. Here''s the `fetch.js` file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`debugger`文件夹中打开`fetch.html`和`fetch.js`文件并查看。这是`fetch.js`文件：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s a bare-bones `fetch` request with the URL to be fetched as a parameter
    to our function. In the console of our HTML page, we can actually execute this
    function, like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的`fetch`请求，其中URL作为参数传递给我们的函数。在我们的HTML页面的控制台中，我们实际上可以执行这个函数，就像这样：
- en: '![](assets/2fc08cba-7e2f-4d1a-ba78-fd9ff7195646.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2fc08cba-7e2f-4d1a-ba78-fd9ff7195646.png)'
- en: Figure 9.9 - Executing code in the console
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 - 在控制台中执行代码
- en: As you typed in `fetchAttempt('http://httpstat.us/500')`, did you notice that
    the console gave you autocomplete code hints? This is another useful tool for
    determining whether you have access to the functions and variables at the level
    at which you are working. Now we see that we can execute code in the console without
    having to alter our JavaScript file. What did we learn from our console? Our `data.status`
    was indeed `500`, so we threw the console error from line 7\. From line 9, we
    got our response data, which explicitly states `500`. It may go without saying
    but the `console.log`, `console.error`, and `console.info` functions can be invaluable
    as you debug JavaScript. Use them frequently, but do remember to remove them before
    pushing your code to a production-level environment, as they can degrade site
    performance if you log large objects or log too frequently.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入`fetchAttempt('http://httpstat.us/500')`时，你是否注意到控制台给出了自动完成的代码提示？这是另一个有用的工具，用于确定你是否可以访问你正在工作的级别的函数和变量。现在我们看到我们可以在控制台中执行代码，而不必修改我们的JavaScript文件。我们从控制台学到了什么？我们的`data.status`确实是`500`，所以我们从第7行抛出了控制台错误。从第9行，我们得到了我们的响应数据，它明确说明了`500`。可能不用说，但`console.log`，`console.error`和`console.info`函数在调试JavaScript时可能非常有价值。经常使用它们，但记得在将代码推送到生产级环境之前将它们删除，因为如果记录大对象或记录太频繁，它们可能会降低站点性能。
- en: 'One of the tricky things about JavaScript is that you may be dealing with hundreds
    of lines of code, sometimes from a third party. Luckily, the tooling of most browsers
    allows setting *breakpoints* in the code, which halt the execution of the code
    at specified points. Let''s take a look at our previous file in the console and
    set a few breakpoints. If we click the error for line 7, the Sources panel is
    displayed. If you click a line number, you will set a breakpoint, as so:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的一个棘手之处在于，你可能要处理数百行代码，有时还是来自第三方。幸运的是，大多数浏览器的工具允许在代码中设置*断点*，这会在指定的点中断代码的执行。让我们在控制台中看看我们之前的文件，并设置一些断点。如果我们点击第7行的错误，源面板将显示。如果你点击行号，你将设置一个断点，就像这样：
- en: '![](assets/4b98499a-4057-4475-91fe-8b2d90b2cf9d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b98499a-4057-4475-91fe-8b2d90b2cf9d.png)'
- en: Figure 9.10 - Note the arrow marker on line 6
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10 - 注意第6行上的箭头标记
- en: 'It''s often useful to set breakpoints before the line on which the browser
    complained in order to more thoroughly trace through the variables being passed
    to our code. Let''s run our code again with a page refresh and see what happens:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器报错的那一行之前设置断点通常很有用，以便更彻底地跟踪传递给我们代码的变量。让我们再次运行我们的代码，刷新页面，看看会发生什么：
- en: Set breakpoints on lines 6 and 7.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第6行和第7行设置断点。
- en: Refresh the page.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新页面。
- en: 'Navigate to the console and execute our previous command: `fetchAttempt(''http://httpstat.us/500'')`.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到控制台并执行我们之前的命令：`fetchAttempt('http://httpstat.us/500')`。
- en: 'The browser will pull up the Sources tab again and we should see something
    similar to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将再次拉起源选项卡，我们应该看到类似于这样的东西：
- en: '![](assets/94a2092e-2886-47e6-95b1-64569f3d69ad.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/94a2092e-2886-47e6-95b1-64569f3d69ad.png)'
- en: Figure 9.11 - Result of the breakpoint
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 - 断点的结果
- en: 'We can see that in the Scope tab, we get a listing of the variables defined
    in the context within which we are executing code. If we then use the Step button,
    as shown in the screenshot, we can keep moving through our breakpoints and execute
    subsequent lines of code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在作用域选项卡中，我们得到了在执行代码的上下文中定义的变量列表。然后，我们可以使用步骤按钮，如截图所示，继续移动到我们的断点并执行后续的代码行：
- en: '![](assets/4f193063-65a3-4dc1-a12c-b71bf1e23a1c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4f193063-65a3-4dc1-a12c-b71bf1e23a1c.png)'
- en: Figure 9.12 - The Step button
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12 - 步骤按钮
- en: As we step through the breakpoints, the Scope panel will update to show our
    current context, which gives us more information than an explicit `console.log`
    function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过断点时，作用域面板将更新以显示我们当前的上下文，这比显式的`console.log`函数给我们更多的信息。
- en: Let's take a look now at some ideas for how to improve your JavaScript code
    for performance.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何改进JavaScript代码以提高性能的一些想法。
- en: Accommodating JavaScript's performance limitations
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适应JavaScript的性能限制
- en: As with any language, there are ways to write JavaScript and better ways to
    write it. What is not as obvious in other languages, however, is the direct implications
    of your code for the user experience of a website. Complicated, inefficient code
    can clog up a browser, eat CPU cycles, and, in some cases, even crash the browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何语言一样，有写JavaScript的方法，也有更好的写法。然而，在其他语言中不那么明显的是，您的代码对网站用户体验的直接影响。复杂、低效的代码可能会使浏览器变慢，消耗CPU周期，并且在某些情况下甚至会导致浏览器崩溃。
- en: 'Take a look at this simple four-line snippet by Talon Bragg from [https://hackernoon.com/crashing-the-browser-7d540beb0478](https://hackernoon.com/crashing-the-browser-7d540beb0478):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下Talon Bragg在[https://hackernoon.com/crashing-the-browser-7d540beb0478](https://hackernoon.com/crashing-the-browser-7d540beb0478)上的这个简单的四行代码片段：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Warning**: do *not* attempt to run this in a browser! If you''re curious
    about what this does, it will eventually create an out-of-memory exception in
    the browser that will kill the tab with a message that the page has become unresponsive.
    Why is this? Our `while` loop has a simple truthy value for its condition, so
    it will continue adding `"a"` to the string text until the memory allocated to
    that browser process is exhausted. Depending on the behavior of your browser,
    it may crash the tab, the whole browser, or worse. We all have experience with
    unstable programs (the Windows Blue Screen of Death, anyone?) but a browser failure
    can usually be avoided. Apart from coding best practices, such as minimizing loops
    and avoiding reassigning variables, there are ideas specific to JavaScript to
    point out. W3Schools has a few examples that are handy at [https://www.w3schools.com/js/js_performance.asp](https://www.w3schools.com/js/js_performance.asp)
    and I''d like to underscore one specifically.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：*不要*在浏览器中尝试运行这个代码！如果您对此感到好奇，它最终会在浏览器中创建一个内存不足的异常，导致标签被关闭，并显示页面已经无响应的消息。为什么会这样？我们的`while`循环的条件是一个简单的真值，因此它将继续向字符串文本添加`"a"`，直到分配给该浏览器进程的内存耗尽。根据您的浏览器行为，它可能会崩溃标签、整个浏览器，或者更糟。我们都有不稳定程序的经验（Windows蓝屏，有人吗？），但通常可以避免浏览器崩溃。除了编码最佳实践，如最小化循环和避免重新分配变量之外，还有一些特定于JavaScript的想法需要指出。W3Schools有一些很有用的例子，可以在[https://www.w3schools.com/js/js_performance.asp](https://www.w3schools.com/js/js_performance.asp)找到，我想特别强调其中的一个。'
- en: 'One of the most memory-intensive operations in a standard JavaScript application
    is DOM access. A line as simple as `document.getElementById("helloWorld")` is
    actually a fairly expensive operation. As a best practice, if you''re going to
    use a DOM element more than once in your code, you should save it to a variable
    and act on that variable instead of going back to DOM traversal. If you think
    back to [Chapter 6](fe95a50e-72eb-45eb-a35c-4ce76858884e.xhtml): *The Document
    Object Model (DOM)*, we stored the sticky note DOM element as a variable: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-6/stickies/solution-code/script.js#L13](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-6/stickies/solution-code/script.js#L13).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准JavaScript应用程序中，最占用内存的操作之一是DOM访问。像`document.getElementById("helloWorld")`这样简单的一行代码实际上是一个相当昂贵的操作。作为最佳实践，如果您在代码中要多次使用DOM元素，您应该将其保存到一个变量中，并对该变量进行操作，而不是返回到DOM遍历。如果回想一下[第6章](fe95a50e-72eb-45eb-a35c-4ce76858884e.xhtml)：*文档对象模型（DOM）*，我们将便利贴DOM元素存储为一个变量：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-6/stickies/solution-code/script.js#L13](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-6/stickies/solution-code/script.js#L13)。
- en: The Memory panel
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存面板
- en: 'Without getting into too much detail about how computers allocate memory, suffice
    it to say that an improperly written program can cause a memory leak by not properly
    releasing and recycling memory, which can cause the program to crash. As opposed
    to some lower-level languages, JavaScript is supposed to automatically garbage
    collect: the practice of automatic memory management that releases memory by destroying
    unneeded pieces of data. However, there are cases when improperly written code
    can cause a memory leak that garbage collection doesn''t handle.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不要深入讨论计算机如何分配内存的细节，可以说，编写不当的程序可能会导致内存泄漏，因为它没有正确释放和回收内存，这可能导致程序崩溃。与一些低级语言相反，JavaScript应该自动进行垃圾回收：自动内存管理的实践，通过销毁不需要的数据片段来释放内存。然而，有些情况下，编写不当的代码可能会导致垃圾回收无法处理的内存泄漏。
- en: 'Since JavaScript runs client-side, it can be hard to decipher exactly what''s
    going on in your program. Luckily, there are tools to help. Let''s work through
    an example of a program that will allocate a lot of memory. Take a look at this
    example: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/index.html.](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/index.html)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript在客户端运行，很难准确解释程序中到底发生了什么。幸运的是，有一些工具可以帮助。让我们通过一个将分配大量内存的程序示例来进行演示。看一下这个例子：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/index.html.](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/index.html)
- en: 'If you look at the included JavaScript file, you''ll see it''s very simple,
    yet very powerful:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看包含的JavaScript文件，您会发现它非常简单，但非常强大：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s inspect our code and see what happens when we work with this simple
    script. Note that some of these instructions may be different depending on your
    browser and OS version:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们的代码，并看看当我们使用这个简单的脚本时会发生什么。请注意，这些说明可能会有所不同，具体取决于您的浏览器和操作系统版本：
- en: Open the `index.html` page in Chrome.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中打开`index.html`页面。
- en: Open the developer tools.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具。
- en: 'From the More tools menu, select Performance monitor:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“更多工具”菜单中，选择性能监视器：
- en: '![](assets/eb551f2d-5a1e-483e-b680-3d3a26ad2734.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb551f2d-5a1e-483e-b680-3d3a26ad2734.png)'
- en: Figure 9.13 - Investigating the Performance monitor
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13 - 调查性能监视器
- en: You will see a panel with a moving timeline: [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/memory-leak.gif.](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/memory-leak.gif)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个带有移动时间线的面板：[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/memory-leak.gif.](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/blob/master/chapter-9/memory-leak/memory-leak.gif)
- en: Now, click the Grow button several times. You should see an increase in the
    JavaScript heap size, perhaps to the 13 MB range. However, as you keep clicking,
    the heap size shouldn't increase past where it already is.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击几次Grow按钮。您应该看到JavaScript堆大小增加，可能达到13MB范围。但是，随着您不断点击，堆大小不应该超过已经存在的范围。
- en: Why is this? In modern browsers, it's actually gotten a little more difficult
    to accidentally create a memory leak. In this case, Chrome is smart enough to
    do some trickery with memory and not cause a large increase in memory as we repeat
    the actions.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样？在现代浏览器中，意外创建内存泄漏实际上变得有点困难。在这种情况下，Chrome足够聪明，可以对内存进行一些技巧处理，不会因我们重复操作而导致内存大幅增加。
- en: 'However, now start clicking the Log button several times. You''ll see the output
    in the Console as well as an increase in the heap size:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，现在开始点击Log按钮几次。您将在控制台中看到输出以及堆大小的增加：
- en: '![](assets/6b77278a-ca50-4a47-8fca-ef7259a0ee72.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6b77278a-ca50-4a47-8fca-ef7259a0ee72.png)'
- en: Figure 9.14 - Memory heap investigation
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14 - 内存堆调查
- en: Notice how the graph increases in size. However, over time, the memory allocation
    will actually drop if you stop clicking Log. This is an example of Chrome's intelligent
    garbage collection at work.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意图表的增长。然而，随着时间的推移，如果停止点击Log，内存分配实际上会下降。这是Chrome智能垃圾回收的一个例子。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We all make mistakes when coding, and knowing how to find, diagnose, and debug
    those problems is a key skill in any language. In this chapter, we've taken a
    look at how the Error object and the console provide us with rich diagnostic information
    on where an error occurred, what details are piggybacking on the object, and how
    to read them. Don't forget that, sometimes, the error may look one way on the
    surface (our JSON error in *The Error Object* section), and don't be afraid to
    experiment with tracing through your code with console statements and breakpoints.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在编码时都会犯错误，知道如何找到、诊断和调试这些问题是任何语言中的关键技能。在本章中，我们已经看到了Error对象和控制台如何为我们提供丰富的诊断信息，包括错误发生的位置、对象上附加的详细信息以及如何阅读它们。不要忘记，有时错误可能在表面上看起来是一种方式（我们在*错误对象*部分的JSON错误），不要害怕尝试使用控制台语句和断点来跟踪代码。
- en: Since JavaScript runs client-side, it's important to keep in mind the performance
    capacity of your users. There are many best practices when writing JavaScript,
    such as reusing variables (especially DOM-related ones), so always be sure to
    keep your code **DRY** (**Don't Repeat Yourself**).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript在客户端运行，因此重要的是要牢记用户的性能容量。在编写JavaScript时有许多最佳实践，例如重用变量（特别是与DOM相关的变量），因此请务必确保使您的代码DRY（不要重复自己）。
- en: In the next chapter, we'll wrap up working with the frontend and understand
    how JavaScript truly is the ruler of the frontend.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将结束前端的工作，并了解JavaScript真正是前端的统治者。
- en: Questions
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the root cause of memory problems?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存问题的根本原因是什么？
- en: The variables in your program are global.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您程序中的变量是全局的。
- en: Inefficient code.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 低效的代码。
- en: JavaScript's performance limitations.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript的性能限制。
- en: Hardware inadequacies.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 硬件不足。
- en: When using DOM elements, you should store references to them locally versus
    always accessing the DOM.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用DOM元素时，应将对它们的引用存储在本地，而不是始终访问DOM。
- en: 'True'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: True when using them more than once
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在多次使用时为真
- en: JavaScript is pre-processed on the server side, and thus more efficient than
    Python.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript在服务器端进行预处理，因此比Python更高效。
- en: 'True'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Setting breakpoints can't find memory leaks.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置断点无法找到内存泄漏。
- en: 'True'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: It's a good idea to store all variables in the global namespace as they're more
    efficient to reference.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有变量存储在全局命名空间中是个好主意，因为它们更有效地引用。
- en: 'True'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: Further reading
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can use the following links:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，您可以使用以下链接：
- en: 'Isolating Memory Leaks with Chrome''s Allocation Timeline: [https://blog.logrocket.com/isolating-memory-leaks-with-chromes-allocation-timeline-244fa9c48e8e/](https://blog.logrocket.com/isolating-memory-leaks-with-chromes-allocation-timeline-244fa9c48e8e/)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chrome的分配时间线隔离内存泄漏：[https://blog.logrocket.com/isolating-memory-leaks-with-chromes-allocation-timeline-244fa9c48e8e/](https://blog.logrocket.com/isolating-memory-leaks-with-chromes-allocation-timeline-244fa9c48e8e/)
- en: 'Garbage Collection: [https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾回收：[https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))
- en: 'JavaScript Performance: [https://www.w3schools.com/js/js_performance.asp](https://www.w3schools.com/js/js_performance.asp)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript性能：[https://www.w3schools.com/js/js_performance.asp](https://www.w3schools.com/js/js_performance.asp)
- en: 'Memory Problems: [https://developers.google.com/web/tools/chrome-devtools/memory-problems](https://developers.google.com/web/tools/chrome-devtools/memory-problems)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存问题：[https://developers.google.com/web/tools/chrome-devtools/memory-problems](https://developers.google.com/web/tools/chrome-devtools/memory-problems)
- en: 'Node.js Memory Leak Detection: [https://medium.com/tech-tajawal/memory-leaks-in-nodejs-quick-overview-988c23b24dba](https://medium.com/tech-tajawal/memory-leaks-in-nodejs-quick-overview-988c23b24dba)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js内存泄漏检测：[https://medium.com/tech-tajawal/memory-leaks-in-nodejs-quick-overview-988c23b24dba](https://medium.com/tech-tajawal/memory-leaks-in-nodejs-quick-overview-988c23b24dba)
