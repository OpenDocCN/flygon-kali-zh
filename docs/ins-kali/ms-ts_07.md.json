["```ts\nimport _http = require('http');\nvar port = process.env.port || 1337\nhttp.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello World\\n');\n}).listen(port);\n```", "```ts\n_http.createServer((req, res) => { .. }\n```", "```ts\nimport http = require('http');\nexport function processRequest(\n    req: http.ServerRequest,\n    res: http.ServerResponse): void\n{\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello World\\n');\n}\n```", "```ts\nfunction processRequest(req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello World\\n');\n}\nexports.processRequest = processRequest;\n```", "```ts\nimport http = require('http');\nimport ServerMain = require('./ServerMain');\nvar port = process.env.port || 1337;\nhttp.createServer(ServerMain.processRequest).listen(port);\n```", "```ts\nimport fs = require(\"fs\");\nexport function processRequestReadFromFileAnonymous(\n      req: http.ServerRequest, res: http.ServerResponse) \n{\n    fs.readFile('server.js', 'utf8', (err, data) => {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        if (err)\n            res.write(\"could not open file for reading\");\n        else {\n            res.write(data);\n            res.end();\n        }\n    });\n}\n```", "```ts\nexport function processRequestReadFromFileError(\n    req: http.ServerRequest, res: http.ServerResponse) \n{\n    fs.readFile('server.js', 'utf8', writeFileToStreamError);\n}\nfunction writeFileToStreamError(err, data) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    if (err)\n        res.write(\"could not open file for reading\");\n    else {\n        res.write(data);\n        res.end();\n    }\n}\n```", "```ts\nCannot find name 'res'.\n\n```", "```ts\nexport function processRequestReadFromFileChained(\n    req: http.ServerRequest, res: http.ServerResponse) \n{\n    fs.readFile('server.js', 'utf8', (err, data) => {\n        writeFileToStream(err, data, res);\n    });\n}\nfunction writeFileToStream(\n    err: ErrnoException, data: any, \n    res: http.ServerResponse): void \n{\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    if (err)\n        res.write(\"could not open file for reading\");\n    else {\n        res.write(data);\n        res.end();\n    }\n}\n```", "```ts\nhttp.createServer(ServerMain.processRequestReadFromFileChained) .listen(port);\n```", "```ts\ninterface IContactModel {\n    Name: string;\n    EmailAddress: string;\n}\nexport class ContactModel extends Backbone.Model\n    implements IContactModel \n{\n    get Name() {\n        return this.get('Name');\n    }\n    set Name(val: string) {\n        this.set('Name', val);\n    }\n    get EmailAddress() {\n        return this.get('EmailAddress');\n    }\n    set EmailAddress(val: string) {\n        this.set('EmailAddress', val);\n    }\n}\n```", "```ts\nimport cm = require(\"../../app/models/ContactModel\");\ndescribe('/tests/models/ContactModelTests', () => {\n    var contactModel: cm.ContactModel;\n    beforeEach(() => {\n        contactModel = new cm.ContactModel(\t\n            { Name: 'testName', EmailAddress: 'testEmailAddress'\n            });\n    });\n    it('should set the Name property', () => {\n        expect(contactModel.Name).toBe('testName');\n    });\n    it('should set the Name attribute', () => {\n        expect(contactModel.get('Name')).toBe('testName');\n    });\n});\n```", "```ts\n<!DOCTYPE html>\n<html >\n<head>\n    <title>AMD SpecRunner</title>\n    <link rel=\"stylesheet\" \n          type=\"text/css\" \n          href=\"/Scripts/jasmine/jasmine.css\">\n    <script\n        data-main=\"/tscode/tests/TestConfig\"\n        type=\"text/javascript\"\n        src=\"img/require.js\">\n    </script>\n</head>\n<body>\n</body>\n</html>\n```", "```ts\nrequire.config(\n    {\n        baseUrl: \"../../\",\n        paths: {\n            'jasmine': '/Scripts/jasmine/jasmine',\n            'jasmine-html': '/Scripts/jasmine/jasmine-html',\n            'jasmine-boot': '/Scripts/jasmine/boot',\n            'underscore' : '/Scripts/underscore',\n            'backbone': '/Scripts/backbone',\n            'jquery': '/Scripts/jquery-2.1.1',\n        },\n        shim: {\n            underscore: {\n                exports: '_'\n            },\n            backbone : {\n                deps: ['underscore'],\n                exports: 'Backbone'\n            },\n            'jasmine' : {\n                exports: 'window.jasmineRequire'\n            },\n            'jasmine-html': {\n                deps : ['jasmine'],\n                exports: 'window.jasmineRequire'\n            },\n            'jasmine-boot': {\n                deps : ['jasmine-html', 'backbone'],\n                exports: 'window.jasmineRequire'\n            }\n        }\n    }\n);\n\nvar specs = [\n    'tscode/tests/models/ContactModelTests'\n];\n\nrequire(['jasmine-boot'], (jb) => {\n    require(specs, () => {\n        (<any>window).onload();\n    });\n});\n```", "```ts\nReferenceError: jasmineRequire is not defined\nReferenceError: Backbone is not defined\n\n```", "```ts\nError: Script error for: jquery\nhttp://requirejs.org/docs/errors.html#scripterror\nError: Load timeout for modules: jasmine-boot\nhttp://requires.org/docs/errors.html#timeout\n\n```", "```ts\nimport cm = require(\"./ContactModel\")\nexport class ContactCollection\n    extends Backbone.Collection<cm.ContactModel> {\n    model = cm.ContactModel;\n    url = \"/tscode/tests/contacts.json\";\n}\n```", "```ts\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\ndefine([\"require\", \"exports\", \"./ContactModel\"], function (require, exports, cm) {\n    var ContactCollection = (function (_super) {\n        __extends(ContactCollection, _super);\n        function ContactCollection() {\n            _super.apply(this, arguments);\n            this.model = cm.ContactModel;\n            this.url = \"/tscode/tests/contacts.json\";\n        }\n        return ContactCollection;\n    })(Backbone.Collection);\n    exports.ContactCollection = ContactCollection;\n});\n//# sourceMappingURL=ContactCollection.js.map\n```", "```ts\nimport cc = require(\"../../app/models/ContactCollection\");\nimport cm = require(\"../../app/models/ContactModel\");\ndescribe(\"/tests/models/ContactCollectionTests\", () => {\n    it(\"should create a collection\", () => {\n        var contactCollection = new cc.ContactCollection(\n        [\n            new cm.ContactModel(\n              { Name: 'testName1', EmailAddress: 'testEmail1' }),\n            new cm.ContactModel(\n              { Name: 'testName2', EmailAddress: 'testEmail2' })\n        ]);\n        expect(contactCollection.length).toBe(2);\n    });\n});\n```", "```ts\ndescribe(\"contact json tests\", () => {\n    var collection: cc.ContactCollection;\n    it(\"should load collection from url\", () => {\n        collection = new cc.ContactCollection();\n        collection.fetch({ async: false });\n        expect(collection.length).toBe(4);\n    });\n});\n```", "```ts\n[\n    { \"Name\": \"Mr Test Contact\", \n       \"EmailAddress\": \"mr_test_contact@test.com\" },\n    { \"Name\": \"Mrs Test Contact\", \n       \"EmailAddress\": \"mrs_test_contact@test.com\" },\n    { \"Name\": \"Ms Test Contact\",\n       \"EmailAddress\": \"ms_test_contact@test.com\" },\n    { \"Name\": \"Dr Test Contact\", \n       \"EmailAddress\": \"dr_test_contact@test.com\" }\n]\n```", "```ts\ndescribe(\"contact json model tests\", () => {\n    var collection: cc.ContactCollection;\n    beforeEach(() => {\n        collection = new cc.ContactCollection();\n        collection.fetch({ async: false });\n    });\n    it(\"ContactModel at 0 should have attribute called Name\", () => {\n        var contactModel = collection.at(0);\n        expect(contactModel.get('Name')).toBe('Mr Test Contact');\n    });\n    it(\"ContactModel at 0 should have property called Name\", () => {\n        var contactModel : cm.ContactModel = collection.at(0);\n        expect(contactModel.Name).toBe('Mr Test Contact');\n    });\n});\n```", "```ts\nvar specs = [\n    'tscode/tests/models/ContactModelTests',\n    'tscode/tests/models/ContactCollectionTests'\n];\n```", "```ts\nimport cm = require(\"../models/ContactModel\");\nexport class ContactItemView extends Backbone.View<cm.ContactModel> {\n    template: (properties?: any) => string;\n    constructor(options?: any) {\n        this.className = \"contact-item-view\";\n        this.template = _.template(\n            '<p><%= Name %> (<%= EmailAddress %>)</p>');\n        super(options);\n    }\n    render(): ContactItemView {\n        this.$el.html(this.template(this.model.attributes));\n        return this;\n    }\n}\n```", "```ts\nimport cm = require(\"../../app/models/ContactModel\");\nimport ccv = require(\"../../app/views/ContactItemView\");\ndescribe(\"/tscode/tests/views/ContactItemViewTests\", () => {\n    it(\"should generate html from template and model\", () => {\n        var contactModel = new cm.ContactModel(\n            { Name: 'testName', EmailAddress: 'testEmailAddress' });\n\n        var contactItemView = new ccv.ContactItemView(\n            { model: contactModel });\n        var html = contactItemView.render().$el.html();\n\n        expect(html).toBe('<p>testName (testEmailAddress)</p>');\n    });\n});\n```", "```ts\nInstall-package RequireJS.Text\n\n```", "```ts\npaths: {\n    // existing code\n    'text': '/Scripts/text'\n},\n```", "```ts\nvar CONTACT_ITEM_SNIPPET = \"\";\nrequire(\n    ['jasmine-boot',\n     'text!/tscode/app/views/ContactItemView.html'],\n    (jb, contactItemSnippet) => {\n        CONTACT_ITEM_SNIPPET = contactItemSnippet;\n        require(specs, () => {\n            (<any>window).onload();\n        });\n    });\n```", "```ts\nconstructor(options?: any) {\n    this.className = \"contact-item-view\";\n    this.events = <any>{ 'click': this.onClicked };\n    this.template = _.template(CONTACT_ITEM_SNIPPET);\n\n    super(options);\n}\n```", "```ts\n<div class=\"contact-outer-div\">\n    <div class=\"contact-name-div\">\n        <%= Name %>\n    </div>\n    <div class=\"email-address-div\">\n        (<%= EmailAddress %>)\n    </div>\n</div>\n```", "```ts\n//expect(html).toBe('<p>testName (testEmailAddress)</p>');\nexpect(html).toContain('testName');\nexpect(html).toContain('testEmailAddress');\n```", "```ts\nimport cm = require(\"../models/ContactModel\");\nimport civ = require(\"./ContactItemView\");\nexport class ContactCollectionView extends Backbone.View<Backbone.Model> {\n    constructor(options?: any) {\n        super(options);\n        _.bindAll(this, 'renderChildItem');\n    }\n\n    render(): ContactCollectionView {\n        this.collection.each(this.renderChildItem);\n        return this;\n    }\n    renderChildItem(element: Backbone.Model, index: number) {\n        var itemView = new civ.ContactItemView( { model: element });\n        this.$el.append(itemView.render().$el);\n    }\n}\n```", "```ts\nrender(): ContactCollectionView {\n    this.collection.each(\n        (element: Backbone.Model, index: number) => {\n// include rendering code within this anonymous function\n        }\n    );\n    return this;\n}\n```", "```ts\nimport cc = require(\"../../app/models/ContactCollection\");\nimport cm = require(\"../../app/models/ContactModel\");\nimport ccv = require(\"../../app/views/ContactCollectionView\");\ndescribe(\"/ts/views/ContactCollectionViewTests\", () => {\n    var contactCollection: cc.ContactCollection;\n    beforeAll(() => {\n        contactCollection = new cc.ContactCollection([\n            new cm.ContactModel(\n                { Name: 'testName1', EmailAddress: 'testEmail1' }),\n            new cm.ContactModel(\n                { Name: 'testName2', EmailAddress: 'testEmail2' })\n        ]);\n    });\n\n    it(\"should create a collection property on the view\", () => {\n        var contactCollectionView = new ccv.ContactCollectionView({\n            collection: contactCollection\n        });\n        expect(contactCollectionView.collection.length).toBe(2);\n    });\n});\n```", "```ts\nit(\"should call render on child items\", () => {\n    var contactCollectionView = new ccv.ContactCollectionView({\n        collection: contactCollection\n    });\n    spyOn(contactCollectionView, 'renderChildItem');\n    contactCollectionView.render();\n\n expect(contactCollectionView.renderChildItem).toHaveBeenCalled();\n});\n```", "```ts\nit(\"should generate html from child items\", () => {\n    var contactCollectionView = new ccv.ContactCollectionView({\n        collection: contactCollection\n    });\n    var renderedHtml = contactCollectionView.render().$el.html();\n    expect(renderedHtml).toContain(\"testName1\");\n    expect(renderedHtml).toContain(\"testName2\");\n\n});\n```", "```ts\nimport cc = require(\"tscode/app/models/ContactCollection\");\nimport cm = require(\"tscode/app/models/ContactModel\");\nimport civ = require(\"tscode/app/views/ContactItemView\");\nimport ccv = require(\"tscode/app/views/ContactCollectionView\");\nexport class ContactViewApp {\n    run() {\n        var contactCollection = new cc.ContactCollection();\n        contactCollection.fetch(\n            {\n                success: this.contactCollectionLoaded,\n                error: this.contactCollectionError\n            });\n    }\n\n    contactCollectionLoaded(model, response, options) {\n        var contactCollectionView = new ccv.ContactCollectionView(\n            {\n                collection: model\n            });\n        $(\"#mainContent\").append(\n            contactCollectionView.render().$el);\n    }\n    contactCollectionError(model, response, options) {\n        alert(model);\n    }\n}\n```", "```ts\n<!DOCTYPE html>\n<html >\n<head>\n    <title>Contacts View</title>\n    <link rel=\"stylesheet\" type=\"text/css\"\n          href=\"/css/app.css\">\n    <script data-main=\"/tscode/app/AppConfig\"\n            type=\"text/javascript\"\n            src=\"img/require.js\"></script>\n\n</head>\n<body>\n    <div id=\"mainContent\"></div>\n</body>\n</html>\n```", "```ts\nrequire.config(\n    {\n        baseUrl: \"../../\",\n        paths: {\n            'underscore': '/Scripts/underscore',\n            'backbone': '/Scripts/backbone',\n            'jquery': '/Scripts/jquery-2.1.1',\n            'ContactViewApp': '/tscode/app/ContactViewApp',\n            'text': '/Scripts/text'\n        },\n        shim: {\n            underscore: {\n                exports: '_'\n            },\n            backbone: {\n                deps: ['underscore'],\n                exports: 'Backbone'\n            }\n            ,ContactViewApp: {\n                deps: ['backbone']\n            }\n        }\n    }\n);\n\nvar CONTACT_ITEM_SNIPPET = \"\";\n\nrequire([\n    'ContactViewApp',\n    'text!/tscode/app/views/ContactItemView.html'\n    ], (app, contactItemSnippet) => {\n\n    CONTACT_ITEM_SNIPPET = contactItemSnippet;\n    var appInstance = new app.ContactViewApp();\n    appInstance.run();\n});\n```", "```ts\nimport cm = require(\"../models/ContactModel\");\n\nexport class ContactItemView extends Backbone.View<cm.ContactModel> {\n    template: (properties?: any) => string;\n    constructor(options?: any) {\n        this.className = \"contact-item-view\";\n        this.events = <any>{ 'click': this.onClicked };\n        this.template = _.template(CONTACT_ITEM_SNIPPET);\n        super(options);\n    }\n\n    render(): ContactItemView {\n        this.$el.html(this.template(this.model.attributes));\n        return this;\n    }\n\n    onClicked() {\n        alert('clicked : ' + this.model.Name);\n    }\n}\n```", "```ts\nInstall-package jQuery.UI.Combined\n\n```", "```ts\ninterface IFlipOptions {\n    direction: string;\n    onBefore?: () => void;\n    onAnimation?: () => void;\n    onEnd?: () => void;\n    speed?: number;\n    color?: string;\n    content?: string;\n}\ninterface JQuery {\n    flip(input: IFlipOptions): JQuery;\n    revertFlip();\n}\n```", "```ts\nrequire.config(\n    {\n        baseUrl: \"../../\",\n        paths: {\n            'underscore': '/Scripts/underscore',\n            'backbone': '/Scripts/backbone',\n            'jquery': '/Scripts/jquery-2.1.1',\n            'ContactViewApp': '/tscode/app/ContactViewApp',\n            'text': '/Scripts/text',\n            'jqueryui': '/Scripts/jquery-ui-1.11.2',\n            'jqueryflip' : '/Scripts/jquery.flip'\n        },\n        shim: {\n            underscore: {\n                exports: '_'\n            },\n            backbone: {\n                deps: ['underscore'],\n                exports: 'Backbone'\n            }\n            ,jqueryui: {\n                deps: ['jquery']\n            }\n            ,jqueryflip: {\n                deps: ['jqueryui'],\n                exports: '$'\n            }\n            ,ContactViewApp: {\n                deps: ['backbone'\n                    , 'jqueryflip'\n                ]\n            }\n        }\n    }\n);\n```", "```ts\nonClicked() {\n    this.$el.flip({\n        direction: 'tb',\n        speed : 200\n    });\n}\n```"]