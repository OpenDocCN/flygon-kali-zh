- en: ASP.NET Core on the MVC Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core上的MVC框架
- en: 'This chapter will explore creating an ASP.NET Core application with the MVC
    framework. The previous chapter introduced you to ASP.NET Core, and we started
    with the basics needed for this chapter. If you are not familiar with ASP.NET
    Core, take a look at what [Chapter 10](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml),
    *Exploring .NET Core 1.1* has to offer. We will be looking at:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨使用MVC框架创建ASP.NET Core应用程序。上一章向您介绍了ASP.NET Core，并且我们从本章所需的基础知识开始。如果您对ASP.NET
    Core不熟悉，请看看[第10章](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml)，*探索.NET Core 1.1*提供了什么。我们将会看到：
- en: Including middleware and why it is useful
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括中间件及其有用之处
- en: Creating Controllers and using routing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器并使用路由
- en: Rendering Views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 呈现视图
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The MVC framework is named according to the MVC design pattern it follows. MVC
    stands for **M**odel-**V**iew-**C**ontroller. An HTTP request is sent to a Controller,
    which is then mapped to a method inside the *Controller* class. Inside that method,
    the Controller decides what to do with the HTTP request. It then constructs a
    *model* that is agnostic to the Controller and request. The model brings all the
    logic together that contains the information the Controller needs. The *view*
    is then used to display the information contained inside the model to build an
    HTML page that gets sent back to the requesting client in the HTTP response.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MVC框架的命名是根据其遵循的MVC设计模式而来的。MVC代表**M**odel-**V**iew-**C**ontroller。HTTP请求被发送到一个控制器，然后映射到*Controller*类中的一个方法。在该方法内，控制器决定如何处理HTTP请求。然后构造一个对控制器和请求不可知的*模型*。模型将包含控制器需要的所有信息的逻辑。然后使用*视图*来显示模型中包含的信息，以构建一个HTML页面，该页面将在HTTP响应中发送回请求的客户端。
- en: 'What the MVC framework allows us to do is separate the logic by letting each
    component of the framework focus on one specific thing:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MVC框架允许我们通过让框架的每个组件专注于一个特定的事物来分离逻辑：
- en: The Controller receives the HTTP request and builds a model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器接收HTTP请求并构建模型
- en: The model contains the data we requested and sends it to the view
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型包含我们请求的数据并将其发送到视图
- en: The view then creates the HTML page from the data contained in the model
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图然后从模型中包含的数据创建HTML页面
- en: Including middleware and why it is useful
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包括中间件及其有用之处
- en: This recipe will show you how to set up middleware in your ASP.NET Core application.
    Middleware in ASP.NET defines how our application responds to any HTTP requests
    it receives. It is also useful for controlling how our application responds to
    user authentication or errors. It can also perform logging operations regarding
    incoming request.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将向您展示如何在ASP.NET Core应用程序中设置中间件。ASP.NET中间件定义了我们的应用程序如何响应接收到的任何HTTP请求。它还有助于控制我们的应用程序如何响应用户身份验证或错误。它还可以执行有关传入请求的日志操作。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to modify the code contained inside the `Configure()` method of our
    `Startup` class. It is here that we set up middleware in an ASP.NET Core application.
    In [Chapter 10](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml), *Exploring .NET Core
    1.1*, we saw that our `Configure()` method already contained two pieces of middleware.
    The first is a piece of middleware that will display a developer exception page
    when an unhandled exception is caught. The code looks as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改`Startup`类的`Configure()`方法中包含的代码。在ASP.NET Core应用程序中设置中间件就是在这里。在[第10章](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml)，*探索.NET
    Core 1.1*中，我们看到我们的`Configure()`方法已经包含了两个中间件。第一个是一个中间件，当捕获到未处理的异常时，将显示开发人员异常页面。代码如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will display any error messages which is useful for debugging the application.
    Typically, this page would contain information such as a stack trace. It is only
    installed when the application is in development mode. When you first create an
    ASP.NET Core application, it is in development mode.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示任何错误消息，对于调试应用程序很有用。通常，此页面将包含诸如堆栈跟踪之类的信息。仅在应用程序处于开发模式时才安装。当您首次创建ASP.NET Core应用程序时，它处于开发模式。
- en: The second middleware is the `app.Run()` and will always be present in your
    application. In [Chapter 10](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml), *Exploring
    .NET Core 1.1* , it would always respond with the current date. Think of middleware
    as gate keepers. All HTTP requests coming in to your application must pass through
    your middleware.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个中间件是`app.Run()`，并且将始终存在于您的应用程序中。在[第10章](2eda8a40-ad8c-45c9-b49e-82a7d208fdf0.xhtml)，*探索.NET
    Core 1.1*中，它将始终响应当前日期。将中间件视为门卫。所有进入应用程序的HTTP请求都必须通过您的中间件。
- en: It is also important to know that the order you add your middleware is important.
    In the `app.Run()` middleware, we did a `context.Response.WriteAsync()`. Any middleware
    added after this will not be reached because the processing pipeline terminates
    in `app.Run()`. This will become clearer as we move on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 还要知道，您添加中间件的顺序很重要。在`app.Run()`中间件中，我们执行了`context.Response.WriteAsync()`。之后添加的任何中间件都不会被执行，因为处理管道在`app.Run()`中终止。随着我们的学习，这一点将变得更加清晰。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Your current ASP.NET Core application should contain a `Configure()` method
    that looks as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您当前的ASP.NET Core应用程序应包含一个如下所示的`Configure()`方法：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From the Debug menu, click on Start Without Debugging or press *Ctrl* + *F5*.
    You will see the date displayed as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从调试菜单中，单击“开始调试”或按*Ctrl* + *F5*。您将看到日期显示如下：
- en: '![](img/B06434_12_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_01.jpg)'
- en: 'Go back to your code and tell your application to display the welcome page
    middleware. You can do this by adding `app.UseWelcomePage();` just before the
    `app.Run()`. Your code needs to look as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的代码，并告诉您的应用程序显示欢迎页面中间件。您可以通过在`app.Run()`之前添加`app.UseWelcomePage();`来实现这一点。您的代码需要如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save your `Startup.cs` file and refresh your browser.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的`Startup.cs`文件并刷新您的浏览器。
- en: '![](img/B06434_12_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_02.jpg)'
- en: 'You now no longer see the date displayed on the screen. This is because the
    welcome page is the terminating middleware and any HTTP requests do not pass through
    that. Go ahead and modify the welcome page middleware to look as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你再也看不到屏幕上显示的日期了。这是因为欢迎页面是终止中间件，任何HTTP请求都不会通过它。继续修改欢迎页面中间件如下：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you save your file and refresh your browser now, you will see the date displayed
    in the browser again. So what happened? Well you just told the welcome page middleware
    to only respond to requests for a `/hello` page.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你保存文件并刷新浏览器，你会再次在浏览器中看到日期显示。发生了什么？嗯，你刚刚告诉欢迎页面中间件只响应`/hello`页面的请求。
- en: Change the URL in the browser as follows `http://localhost:25860/hello` and
    press *Enter*. The welcome page is displayed again.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中更改URL如下`http://localhost:25860/hello`，然后按*Enter*。欢迎页面再次显示。
- en: 'Let''s take a look at the `UseDeveloperExceptionPage()` middleware. Modify
    `app.Run()` to look as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来看看`UseDeveloperExceptionPage()`中间件。修改`app.Run()`如下：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Save your changes and refresh your browser. You will see that the browser now
    displays a page that a developer will find extremely useful. It displays the stack
    information, the incoming query, any cookies as well as the header info. It even
    tells us on what line the exception happened (line 36 in the `Startup.cs` file).
    The `UseDeveloperExceptionPage()` middleware allows the request to pass through
    it to the lower middleware. If an exception happens, this would then allow the
    `UseDeveloperExceptionPage()` middleware to do its job. As mentioned earlier,
    the placement of middleware is important. If we had this `UseDeveloperExceptionPage()`
    middleware at the end of the page, it wouldn’t catch any unhandled exceptions.
    It is, therefore, a good idea to have this at the top of your `Configure()` method:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改并刷新浏览器。你会看到浏览器现在显示了一个开发人员会发现非常有用的页面。它显示了堆栈信息、传入的查询、任何cookie以及头信息。它甚至告诉我们异常发生的行数（在`Startup.cs`文件的第36行）。`UseDeveloperExceptionPage()`中间件允许请求通过它传递到较低的中间件。如果发生异常，这将允许`UseDeveloperExceptionPage()`中间件执行其工作。正如前面提到的，中间件的放置很重要。如果我们将`UseDeveloperExceptionPage()`中间件放在页面的末尾，它将无法捕获任何未处理的异常。因此，在你的`Configure()`方法的顶部放置这个中间件是一个好主意：
- en: '![](img/B06434_12_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_03.jpg)'
- en: 'Let''s take this concept further. When we are in a production environment,
    we would typically not want the user to see the exception page. Assume that they
    need to be directed to a friendly error page. Start off by adding a static HTML
    page to the wwwroot of your application. Right-click on the wwwroot and select
    Add, New Item from the context menu:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步探讨这个概念。当我们处于生产环境时，通常不希望用户看到异常页面。假设他们需要被引导到一个友好的错误页面。首先在你的应用程序的wwwroot中添加一个静态HTML页面。右键单击wwwroot，然后从上下文菜单中选择添加、新项目：
- en: '![](img/B06434_12_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_04.jpg)'
- en: The wwwroot is where you would serve static pages such as JavaScript files,
    CSS files, images, or static HTML pages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: wwwroot是你可以提供静态页面的地方，比如JavaScript文件、CSS文件、图片或静态HTML页面。
- en: Select an HTML page, call it `friendlyError.html` and click on Add.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个HTML页面，命名为`friendlyError.html`，然后点击添加。
- en: '![](img/B06434_12_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_05.jpg)'
- en: 'Modify the HTML of `friendlyError.html` as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`friendlyError.html`的HTML如下：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What we need to do next is add a NuGet package to our application so that we
    can serve static files. In the **NuGet Package Manager**, search for Microsoft.AspNetCore.StaticFiles
    and add that to the application.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们需要向我们的应用程序添加一个NuGet包，以便我们可以提供静态文件。在**NuGet包管理器**中，搜索Microsoft.AspNetCore.StaticFiles并将其添加到应用程序中。
- en: 'Now, we need to modify the code slightly to simulate that it is running in
    a production environment. We do this by setting the`EnvironmaneName` property
    of the `IHostingEnvironment` interface as follows: `env.EnvironmentName = EnvironmentName.Production;`.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要稍微修改代码，模拟它在生产环境中运行。我们通过设置`IHostingEnvironment`接口的`EnvironmaneName`属性来实现这一点：`env.EnvironmentName
    = EnvironmentName.Production;`。
- en: 'We then need to add an `else` statement to the `if (env.IsDevelopment())` condition
    and write the code to call our custom, static error page. It is here that we will
    add the `friendlyError.html` file to our `DefaultFileNames()` collection and tell
    our application that we want to use this error file on any exceptions in the production
    environment. Lastly, we need to tell our application to use static files by calling
    the `UseStaticFiles()` method. When complete, your code should look as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要在`if (env.IsDevelopment())`条件下添加一个`else`语句，并编写调用我们自定义静态错误页面的代码。在这里，我们将`friendlyError.html`文件添加到我们的`DefaultFileNames()`集合中，并告诉我们的应用程序我们希望在生产环境中的任何异常中使用此错误文件。最后，我们需要调用`UseStaticFiles()`方法告诉我们的应用程序使用静态文件。完成后，你的代码应该如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Press *Ctrl* + *F5* again to restart IIS Express and launch our application.
    You will see that our custom error page has been displayed inside the browser:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按*Ctrl* + *F5*重新启动IIS Express并启动我们的应用程序。你会看到我们的自定义错误页面已经显示在浏览器中：
- en: '![](img/B06434_12_06.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_06.jpg)'
- en: In reality, we will probably use a controller to do this kind of thing. What
    I wanted to illustrate here was the use of adding a custom default page and to
    display that page when an exception happens in the production environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可能会使用控制器来做这种事情。我想在这里说明的是添加自定义默认页面的用法，并在生产环境中发生异常时显示该页面。
- en: As you can see, middleware in ASP.NET Core is really useful. There is a lot
    of documentation regarding his topic, and I encourage you to do some further reading
    on the topic. Start with the Microsoft documentation at [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，ASP.NET Core中的中间件非常有用。关于这个主题有很多文档，我鼓励你在这个主题上进行进一步阅读。从微软文档开始[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware)。
- en: Creating Controllers and using routing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器并使用路由
- en: Inside the MVC framework, the Controllers, Models, and Views need to work together
    to form the HTTP request and response cycle. The fundamental starting point, however,
    is calling the correct Controller based on the HTTP request it receives. Without
    that, our application built on the MVC framework can't work. In the MVC framework,
    the process of calling the correct Controller for the HTTP request is known as
    routing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC框架内，控制器、模型和视图需要共同工作，形成HTTP请求和响应循环。然而，基本的起点是根据接收到的HTTP请求调用正确的控制器。如果没有这样做，我们建立在MVC框架上的应用程序将无法工作。在MVC框架中，调用正确的控制器以处理HTTP请求的过程称为路由。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We can route HTTP requests to the correct Controllers by looking at what routing
    information is contained in the middleware of our application. The middleware
    then uses this routing information to see if the HTTP request needs to get sent
    to a Controller or not. Middleware will have a look at the incoming URL and match
    that up with the configuration information we provide it with. We can define this
    routing information in the `Startup` class using one of two routing approaches,
    namely:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看应用程序中间件中包含的路由信息来将HTTP请求路由到正确的控制器。然后，中间件使用这些路由信息来查看HTTP请求是否需要发送到控制器。中间件将查看传入的URL，并将其与我们提供的配置信息进行匹配。我们可以在`Startup`类中使用两种路由方法之一来定义这些路由信息，即：
- en: Convention-based routing
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于约定的路由
- en: Attribute-based routing
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于属性的路由
- en: 'This recipe will explore these routing approaches. Before we can do that, we
    need to add the ASP.NET MVC NuGet package to our application. You should be rather
    familiar with adding NuGet packages to your application by now. Inside the NuGet
    Package Manager, browse for and install the Microsoft.AspNetCore.Mvc NuGet package.
    This will expose new middleware for our application, one of which is `app.UseMvc();`.
    This is used to map an HTTP request to a method in one of our Controllers. Modify
    the code in your `Configure()` method as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将探讨这些路由方法。在我们开始之前，我们需要将ASP.NET MVC NuGet包添加到我们的应用程序中。您现在应该对向应用程序添加NuGet包相当熟悉。在NuGet包管理器中，浏览并安装`Microsoft.AspNetCore.Mvc`NuGet包。这将为我们的应用程序提供新的中间件，其中之一是`app.UseMvc();`。这用于将HTTP请求映射到我们的控制器中的一个方法。修改您的`Configure()`方法中的代码如下：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we need to register our MVC services that the MVC framework requires
    in order to function. Inside `ConfigureServices()` add the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要注册MVC框架所需的MVC服务。在`ConfigureServices()`中添加以下内容：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After this is complete, we have the basics set up for MVC to function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们已经设置了MVC的基本功能。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Add another folder to your application called `Controllers`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中添加一个名为`Controllers`的新文件夹：
- en: '![](img/B06434_12_07.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_07.jpg)'
- en: 'Inside the `Controllers` folder, add a new class called `StudentController`.
    Inside the `StudentController`, add a method called `Find()`. When you are done,
    your class will look as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controllers`文件夹中，添加一个名为`StudentController`的新类。在`StudentController`中，添加一个名为`Find()`的方法。完成后，您的类将如下所示：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Back in the `Startup` class, add a `private void` method called `FindController()` that
    takes a parameter of type `IRouteBuilder`. Make sure that you also add the `using
    Microsoft.AspNetCore.Routing;` namespace to your class. Your method should look
    as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`Startup`类，在其中添加一个名为`FindController()`的`private void`方法，该方法接受一个`IRouteBuilder`类型的参数。确保还将`using
    Microsoft.AspNetCore.Routing;`命名空间添加到您的类中。您的方法应如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `Configure()` method, change the `app.UseMvc();` to `app.UseMvc(FindController);`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Configure()`方法中，将`app.UseMvc();`更改为`app.UseMvc(FindController);`。
- en: We now need to tell our application how to look at a URL to determine which
    Controller to call. We will use convention-based routing here which uses a template
    that we define, to determine which Controller to call. Consider the following
    template `{controller}/{action}`. Our application will then use this template
    to split apart a URL and identify which part of a URL is the Controller part and
    which part of the URL is the Action. Using our `StudentController` class, the
    method `Find()` is the Action the template refers to. Therefore, when the application
    receives an incoming HTTP request with a URL `/Student/Find`, it will know to
    look for the `StudentController` class and go to the `Find()` method inside that
    Controller.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要告诉我们的应用程序如何查看URL以确定要调用哪个控制器。我们将在这里使用基于约定的路由，它使用我们定义的模板来确定要调用哪个控制器。考虑以下模板`{controller}/{action}`。然后，我们的应用程序将使用此模板来拆分URL，并确定URL的哪一部分是控制器部分，URL的哪一部分是操作部分。使用我们的`StudentController`类，方法`Find()`是模板所指的操作。因此，当应用程序接收到一个带有URL`/Student/Find`的传入HTTP请求时，它将知道要查找`StudentController`类，并转到该控制器中的`Find()`方法。
- en: We do not need to have the URL explicitly named `/StudentController/Find` because
    the MVC framework will, by convention, automatically take the word `Student` in
    the `{controller}` portion of the template and apply `Controller` to it to identify
    the name of the Controller to find.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要将URL明确命名为`/StudentController/Find`，因为MVC框架会根据约定，自动将模板中的`{controller}`部分中的单词`Student`应用`Controller`，以识别要查找的控制器的名称。
- en: 'Add the route mapping to the `FindController()` method. This tells the application
    that the template name is default and the template needs to look for a `{controller}/{action}`
    template in the URL. Your code should now look as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将路由映射添加到`FindController()`方法中。这告诉应用程序模板名称为默认，并且模板需要在URL中查找`{controller}/{action}`模板。您的代码现在应如下所示：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Putting it all together, your `Startup` class will look as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有内容放在一起，您的`Startup`类将如下所示：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save your code and enter the following to the end of your URL in your browser: `/student/find`.
    My URL looks as follows, but yours will differ because the port number will most
    likely be different to mine: `http://localhost:25860/student/find`. Entering that
    in your browser will route the incoming HTTP request to the correct Controller.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的代码并在浏览器中的URL末尾输入以下内容：`/student/find`。我的URL如下，但您的可能会有所不同，因为端口号很可能与我的不同：`http://localhost:25860/student/find`。在浏览器中输入这个将把传入的HTTP请求路由到正确的控制器。
- en: '![](img/B06434_12_08.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_08.jpg)'
- en: 'What should we do, however, if the URL is not in the correct format or the
    Controller can''t be found. Well, this is where we can add defaults to our template.
    Remove the `/student/find` portion of the URL and hit enter. You should now see
    an error 404 in the browser. This is because the application could not find the
    Controller based on our URL. Add another class to our `Controllers` folder. Call
    this class `ErrorController`. Then, create a method inside this controller called
    `Support()`. Your code should look as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果URL格式不正确或找不到控制器，我们应该怎么办呢？这就是我们可以向我们的模板添加默认值的地方。删除URL中的`/student/find`部分并输入。现在您应该在浏览器中看到错误404。这是因为应用程序无法根据我们的URL找到控制器。在我们的`Controllers`文件夹中添加另一个类。将此类命名为`ErrorController`。然后，在此控制器内创建一个名为`Support()`的方法。您的代码应如下所示：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Back in the `Startup` class, modify the template in the `FindController()`
    method. It should look as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`Startup`类，在`FindController()`方法中修改模板。它应如下所示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What this does is tell our application that if it does not find a Controller,
    it should default to the `ErrorController` class and execute the `Support()` method
    inside that class. Save your code and refresh your browser to see the application
    default to the `ErrorController`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做的作用是告诉我们的应用程序，如果找不到控制器，它应默认到`ErrorController`类并执行该类中的`Support()`方法。保存您的代码并刷新浏览器，以查看应用程序默认到`ErrorController`。
- en: '![](img/B06434_12_09.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_09.jpg)'
- en: 'As you can see, the routing in ASP.NET MVC is very flexible. The previous steps
    listed discussed what we call convention-based routing. There is another routing
    method called attribute-based routing that uses attributes on our Controllers.
    Go to the `ErrorController` class and add the following `using Microsoft.AspNetCore.Mvc;` namespace
    to the class. Then, add an attribute `[Route("Error")]` to the class name and
    an attribute `[Route("Support")]` to your method. Your code should look as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您所看到的，ASP.NET MVC中的路由非常灵活。前面列出的步骤讨论了我们所谓的基于约定的路由。还有另一种称为基于属性的路由的路由方法，它在我们的控制器上使用属性。转到`ErrorController`类并向类添加`using
    Microsoft.AspNetCore.Mvc;`命名空间。然后，在类名上添加属性`[Route("Error")]`，在方法上添加属性`[Route("Support")]`。您的代码应如下所示：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the `Startup` class inside the `FindController()` method, comment out the
    line `route.MapRoute("Default", "{controller=Error}/{action=Support}");`. In the
    browser, add the text `/Error/Support` to the end of your URL and enter. You will
    see that the application correctly matches the `ErrorController`, based on the
    attributes defined inside the `ErrorController` class.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Startup`类中的`FindController()`方法中，注释掉`route.MapRoute("Default", "{controller=Error}/{action=Support}");`这一行。在浏览器中，在URL末尾添加文本`/Error/Support`并输入。您会看到应用程序根据`ErrorController`类中定义的属性正确匹配`ErrorController`。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Routing inside the MVC framework is a very flexible method of accessing specific
    Controllers, based on HTTP requests. If you need more control over the Controller
    that is accessed, attribute-based routing would probably be a better fit than
    convention-based routing. That said, there are additional things you can do when
    using attribute-based routing. Take a look at what is available to you as a developer
    when using attribute-based routing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: MVC框架内的路由是一种非常灵活的方法，可以根据HTTP请求访问特定的控制器。如果您需要对访问的控制器有更多控制权，则基于属性的路由可能比基于约定的路由更合适。也就是说，在使用基于属性的路由时，您可以做一些额外的事情。看看在使用基于属性的路由时作为开发人员可用的内容。
- en: Rendering Views
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染视图
- en: So far we have been using plain C# classes as Controllers, but it is far more
    common have your Controllers inherit from the `Controller` base class which the
    MVC framework provides. This allows developers to return complex objects from
    their Controllers, students in our case. These complex return types are returned
    in a result that implements the `IActionResult` interface. We can, therefore,
    return JSON, XML, and even HTML to return to the client. The usage of this and
    creating Views is what we will be looking at next in this recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用普通的C#类作为控制器，但更常见的是让您的控制器从MVC框架提供的`Controller`基类继承。这使开发人员能够从他们的控制器中返回复杂的对象，例如我们的学生。这些复杂的返回类型以实现`IActionResult`接口的结果返回。因此，我们可以返回JSON、XML，甚至HTML以返回给客户端。接下来，我们将看一下这个用法以及创建视图。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open up the `StudentController` class and modify it to contain attribute-based
    routing. Be sure to add the `using Microsoft.AspNetCore.Mvc;` namespace to the
    `StudentController` class. Also, inherit from the `Controller` base class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`StudentController`类并修改它以包含基于属性的路由。确保在`StudentController`类中添加`using Microsoft.AspNetCore.Mvc;`命名空间。还要从`Controller`基类继承。
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, add another folder to your project called `Models`. Inside the `Models`
    folder, add a class called `Student` because our application will be returning
    student information. This will be a simple class with properties for the student
    number, first name, and last name. Your `Student` class should look as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在您的项目中添加一个名为`Models`的文件夹。在`Models`文件夹中，添加一个名为`Student`的类，因为我们的应用程序将返回学生信息。这将是一个简单的类，其中包含学生编号、名和姓的属性。您的`Student`类应如下所示：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Back in the `StudentController`, we want to instantiate our `Student` model
    and give it some data. We then change the return type of the `Find()` method from
    `string` to `IActionResult`. Also, add the `using AspNetCore.Models;` namespace
    to your `StudentController` class.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`StudentController`，我们想要实例化我们的`Student`模型并给它一些数据。然后，将`Find()`方法的返回类型从`string`更改为`IActionResult`。同时，将`using
    AspNetCore.Models;`命名空间添加到你的`StudentController`类中。
- en: 'Note, if your project is called something other than `AspNetCore`, your namespace
    will change accordingly:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你的项目不叫`AspNetCore`，你的命名空间会相应地改变：
- en: '`using [projectname].Models;`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`using [projectname].Models;`'
- en: 'Your code should now look as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该如下所示：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Ultimately, we want to return a view result from our `StudentController`. We
    now have everything set up to do that next.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们希望从我们的`StudentController`返回一个视图结果。我们现在已经准备好进行下一步了。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: Add a new folder to your project called `Views`. Inside that folder, add another
    folder called `Student`. Inside the `Student` folder, add an new item by right-clicking
    on the `Student` folder and selecting New Item... from the context menu. From
    the Add New Item dialog screen, search for the MVC View Page template and call
    it `Find.cshtml`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目中添加一个名为`Views`的新文件夹。在该文件夹内，再添加一个名为`Student`的文件夹。在`Student`文件夹内，通过右键单击`Student`文件夹并从上下文菜单中选择“新建项...”来添加一个新项。在“添加新项”对话框中搜索MVC视图页面模板，并将其命名为`Find.cshtml`。
- en: '![](img/B06434_12_10.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_10.jpg)'
- en: You should begin to notice that the `Views` folder, sub folders, and views follow
    a very specific naming convention. This is because the MVC framework follows a
    very specific convention, and when you look at the `StudentController`, this convention
    will become clear. The `Views` folder are `Views`, `Student`, `Find`, and the
    `StudentController` contains the word `Student` in the class name and has a method
    called `Find()`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该开始注意到`Views`文件夹、子文件夹和视图遵循非常特定的命名约定。这是因为MVC框架遵循非常特定的约定，当你查看`StudentController`时，这个约定就会变得清晰。`Views`文件夹包括`Views`、`Student`、`Find`，而`StudentController`包含类名中的`Student`和一个名为`Find()`的方法。
- en: You can also create a `Shared` folder in the `Views` folder. This is where you
    place views that are shared across all Controllers and the Controllers will look
    in the `Shared` folder by default.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在`Views`文件夹中创建一个`Shared`文件夹。这是你放置所有控制器共享的视图的地方，控制器会默认在`Shared`文件夹中查找。
- en: 'Heading back to the `Find.cshtml` Razor view, delete the code that is currently
    in there and replace it with the following:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`Find.cshtml` Razor视图，删除当前存在的代码，并用以下代码替换：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can also use the HTML code snippet. Type `html` and press *Tab* twice to
    insert the boilerplate HTML code into the Find view.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用HTML代码片段。输入`html`并按两次*Tab*键，将HTML代码的样板插入到Find视图中。
- en: 'The deal with Razor views is that you are able to write C# expressions directly
    inside the `Find.cshtml` file. Before we do this, however, we need to set the
    type of the model we will be bringing in to our view. We do this using the following
    directive: `@model AspNetCore.Models.Student`. We can now reference our `Student`
    model directly inside our Razor view with full IntelliSense support. This is done
    using `@Model` with an upper case `M`. Take a look at the changes to the Razor
    view:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Razor视图的关键在于你可以直接在`Find.cshtml`文件中编写C#表达式。然而，在这之前，我们需要设置我们将要引入视图的模型类型。我们使用以下指令来实现：`@model
    AspNetCore.Models.Student`。现在我们可以在Razor视图中直接引用我们的`Student`模型，并且拥有完整的智能感知支持。这是通过使用大写的`M`来实现的`@Model`。看一下Razor视图的变化：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Save your code and refresh your browser. Your URL should be `http://localhost:[your
    port number]/student/find` for this to work correctly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的代码并刷新你的浏览器。你的URL应该是`http://localhost:[your port number]/student/find`，这样才能正常工作。
- en: '![](img/B06434_12_11.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_12_11.jpg)'
- en: The HTTP request is routed to the `StudentController` that in turn populates
    and returns the `Student` model containing the data we need and sends it to the
    Find Razor view. This is the essence of what the MVC framework is all about. There
    is a lot more to cover when it comes to the MVC framework and ASP.NET Core, but
    this chapter just deals with the basic introduction to these topics.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求被路由到`StudentController`，然后填充并返回包含我们需要的数据的`Student`模型，并将其发送到Find Razor视图。这就是MVC框架的本质。当涉及到MVC框架和ASP.NET
    Core时，还有很多内容需要涵盖，但本章只涉及这些主题的基本介绍。
- en: We as developers are continually challenged to stay up to date with the latest
    and greatest technologies. There is a drive in us to learn more and become better
    at what we do. The very fact that you are reading this book is a testament to
    that. Regarding this chapter, however, .NET Core and the MVC framework are areas
    that definitely need more learning. It is not possible to cover all there is to
    know in a single chapter. There are various online resources available to developers.
    I find that one of the best (and free) resources for learning new tech is the
    Microsoft Virtual Academy at [https://mva.microsoft.com](https://mva.microsoft.com).
    Free Microsoft training is delivered by experts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们不断面临着跟上最新技术的挑战。我们渴望学习更多，变得更加优秀。你正在阅读这本书本身就是对这一点的证明。然而，就本章而言，.NET Core和MVC框架是绝对需要更多学习的领域。在一章中不可能涵盖所有内容。开发人员可以找到各种在线资源。我发现微软虚拟学院[https://mva.microsoft.com](https://mva.microsoft.com)是学习新技术的最佳（免费）资源之一。微软专家提供免费的微软培训。
- en: Hopefully, this is enough to pique your interest and will encourage you to research
    the topics further.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这足以引起你的兴趣，并鼓励你进一步研究这些主题。
