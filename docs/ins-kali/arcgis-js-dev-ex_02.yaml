- en: Chapter 2. Layers and Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。图层和小部件
- en: 'The two basic components that make up our web mapping application are layers
    and widgets. A map object is similar to a canvas that holds all the layers, and
    users can interact with it, such as panning and zooming into the map. Layers are
    primarily associated with a particular data source. Widgets are composed of JavaScript
    logic and an HTML template (if it requires user interaction). Widgets can interact
    with the map or can function independently. Esri has developed a lot of general-purpose
    widgets, and these are bundled with the API. We will discuss how to use these
    widgets throughout this book. We will also see how to develop custom widgets in
    the next chapter. This chapter sets the starting point in the development of a
    full-fledged web mapping application displaying historical earthquake data. We
    will be gaining a strong foothold in the following topics as we progress through
    the chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构成我们网络地图应用程序的两个基本组件是图层和小部件。地图对象类似于一个容纳所有图层的画布，用户可以与之交互，例如平移和缩放地图。图层主要与特定数据源相关联。小部件由JavaScript逻辑和HTML模板（如果需要用户交互）组成。小部件可以与地图交互，也可以独立运行。Esri开发了许多通用小部件，并将其捆绑到API中。我们将在本书中讨论如何使用这些小部件。我们还将在下一章中看到如何开发自定义小部件。本章为开发显示历史地震数据的完整网络地图应用程序奠定了起点。随着我们在本章中的进展，我们将在以下主题中获得牢固的立足点：
- en: Data sources supported by the API
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API支持的数据源
- en: The concept of layers in the context of the API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API的上下文中图层的概念
- en: The functional classification of layers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图层的功能分类
- en: The different types of layers and their properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的图层及其属性
- en: Featurelayers versus DynamicMapService versus graphics layer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要素图层与DynamicMapService与图形图层
- en: Using Esri's in-built widgets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Esri的内置小部件
- en: Data sources supported by the API
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API支持的数据源
- en: The ArcGIS JavaScript API is a powerful and flexible client-side mapping software
    that provides support for integrating a variety of spatial data sources, which
    is currently in production. It also provides support for visualizing flat file
    formats, such as CSV, with some latitude and longitude information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS JavaScript API是一种功能强大且灵活的客户端地图软件，它提供了对各种空间数据源的集成支持，目前正在生产中。它还支持可视化平面文件格式，如CSV，其中包含一些纬度和经度信息。
- en: In order to leverage full capabilities provided by the ArcGIS JavaScript API,
    it is important to know the list of data sources it supports and the properties
    and methods it exposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用ArcGIS JavaScript API提供的全部功能，了解它支持的数据源列表以及其公开的属性和方法是很重要的。
- en: 'The data sources supported by the ArcGIS JavaScript API as of version 3.14
    can be broadly grouped as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 截至版本3.14，ArcGIS JavaScript API支持的数据源可以大致分为以下几类：
- en: ArcGIS Server services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ArcGIS Server服务
- en: OGC compliant GIS services
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合OGC标准的GIS服务
- en: Flat file formats
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平面文件格式
- en: Custom web services (preferably REST services)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义网络服务（最好是REST服务）
- en: Let's review the different data source formats and understand how to get the
    necessary information about the data to consume in the ArcGIS JavaScript API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾不同的数据源格式，并了解如何获取有关数据的必要信息，以在ArcGIS JavaScript API中使用。
- en: Flat file formats
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平面文件格式
- en: The API provides native support to render flat file formats such as KML and
    CSV.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: API提供原生支持以渲染KML和CSV等平面文件格式。
- en: KML
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: KML
- en: '**Keyhole Markup Language** (**KML**) is a spatial file format that was initially
    developed by Google and is currently maintained by OGC. It provides support for
    point, line, and polygon geometry, and even image overlays. KML is an XML well
    known for this versatility, but it is pretty verbose and is used in Google Maps.
    KML files can be opened in any text edit such as Notepad++.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Keyhole标记语言**（**KML**）是一种空间文件格式，最初由Google开发，目前由OGC维护。它支持点、线和多边形几何图形，甚至图像叠加。KML是一种广为人知的XML，以其多功能性而闻名，但它非常冗长，并且在Google地图中使用。KML文件可以在任何文本编辑器中打开，如Notepad++。'
- en: CSV files
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSV文件
- en: The CSV file is a plain text file format that stores tabular data with field
    values separated by commas. CSV files contain information about latitude and longitude
    or coordinate values such as *X* and *Y* coordinates in separate fields. A CSV
    file can be read by the API, and the location information can be converted to
    point to the location on the API.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件是一种存储以逗号分隔的字段值的表格数据的纯文本文件格式。CSV文件包含有关纬度和经度或坐标值（如*X*和*Y*坐标）的信息。API可以读取CSV文件，并将位置信息转换为API上的位置。
- en: ArcGIS Server
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ArcGIS Server
- en: ArcGIS Server can be used to share spatial data over the Web. In our case, if
    we have data as shape files, personal geodatabases, file geodatabases, or enterprise
    geodatabases, we can use ArcGIS Server to serve the data over the Web as REST
    services. ArcGIS JavaScript is capable of consuming these services and displaying
    them onto the map. In case of other spatial formats, such as DWG, we can either
    use the ArcGIS desktop or **Feature Manipulation Engine** (**FME**), which is
    a spatial ETL tool for converting into the Esri file format and publishing it
    via ArcGIS Server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ArcGIS Server可用于在Web上共享空间数据。在我们的情况下，如果我们有形状文件、个人地理数据库、文件地理数据库或企业地理数据库，我们可以使用ArcGIS
    Server将数据作为REST服务在Web上提供。ArcGIS JavaScript能够消费这些服务并将其显示在地图上。在其他空间格式的情况下，例如DWG，我们可以使用ArcGIS桌面或**特征操作引擎**（**FME**），这是一个用于转换为Esri文件格式并通过ArcGIS
    Server发布的空间ETL工具。
- en: The concept of layers
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图层的概念
- en: 'If you had taken an introductory course in GIS, you''d be familiar with the
    classic image of GIS layers overlaid on each other. Layers, in the context of
    the API, are data resources available as REST endpoints or a JSON object. (That''s
    right, you can construct a web map layer using a JSON string.) We will deal with
    the sources and types of these map layers very soon, but before that, let''s list
    the most important considerations of any map layer:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经学过GIS的入门课程，你一定熟悉GIS图层相互叠加的经典形象。在API的上下文中，图层是作为REST端点或JSON对象可用的数据资源。（没错，你可以使用JSON字符串构建Web地图图层。）我们很快就会讨论这些地图图层的来源和类型，但在此之前，让我们列出任何地图图层的最重要考虑因素：
- en: A layer is a container object for any data source
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图层是任何数据源的容器对象
- en: Data can be added to the map object using the layer object
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用图层对象将数据添加到地图对象中
- en: Layers form a stack architecture—the first layer added is at the bottom
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图层形成堆栈架构——添加的第一层位于底部
- en: The norm is to have the *Basemap layer* at the bottom
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将*底图图层*放在底部
- en: The map object has a special in-built layer to contain all map graphics
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图对象具有一个特殊的内置图层，用于包含所有地图图形
- en: This is called the *graphics layer* and is at the top layer *always*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为*图形图层*，并且始终位于顶层
- en: All other functional layers are added in between
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他功能图层都是在中间添加的
- en: The visibility of the layers can be turned on or off at any time
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图层的可见性可以随时打开或关闭
- en: Adding layers to a map
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向地图添加图层
- en: 'Before dealing with the different types of layers, we will discuss how to add
    any layer to the map object, because the process is going to be the same for any
    layer type, and also it''s very simple. In the following diagram, we can see all
    the types of layer:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理不同类型的图层之前，我们将讨论如何将任何图层添加到地图对象中，因为这个过程对于任何图层类型都是相同的，而且非常简单。在下图中，我们可以看到所有类型的图层：
- en: '![Adding layers to a map](graphics/B04959_02_01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![向地图添加图层](graphics/B04959_02_01.jpg)'
- en: 'There are two methods by which you can add any layer to the map object. Suppose
    `prjMap` is the name of the map object defined, and we need to add a layer; you
    can adopt one of these two methods:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将任何图层添加到地图对象中。假设`prjMap`是定义的地图对象的名称，我们需要添加一个图层；你可以采用以下两种方法之一：
- en: '**Method 1**:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法1**：'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Method 2**:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法2**：'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It's as simple as that! The second method is the preferred method, as there
    are certain widgets or functionalities that have to wait until all the layers
    in the map have been loaded. Using the second method will enable us to use an
    event handler that gets fired after all the layers are loaded. We will discuss
    about these event handlers toward the end of this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！第二种方法是首选方法，因为某些小部件或功能必须等到地图中的所有图层加载完毕才能使用。使用第二种方法将使我们能够使用在所有图层加载完毕后触发的事件处理程序。我们将在本章末讨论这些事件处理程序。
- en: The functional classification of layers
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图层的功能分类
- en: 'Functionally, the different types of layer that could be added to a map can
    be classified as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，可以将添加到地图的不同类型的图层分类如下：
- en: Basemap or Tiledmap layers
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底图或瓦片地图图层
- en: Functional layers
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能图层
- en: Graphics layers
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形图层
- en: Let's discuss each of these independently.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分别讨论每一个。
- en: Basemap layers
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 底图图层
- en: Basemap layers is are layers that can be used as a reference background map.
    Usually, satellite imagery, topographical maps (maps showing elevation), or street
    maps serve this purpose. Basemaps are usually cached image tiles. This means that
    the Basemap is a static resource. Since they are static and are served as image
    tiles, we can't interact with (as in query or select) the features seen on the
    Basemap. And since this is the Basemap, this is the bottom-most layers as well
    as being the layer, that's added first to the map.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 底图图层是可以用作参考背景地图的图层。通常，卫星图像、地形图（显示海拔高度的地图）或街道地图可以起到这个作用。底图通常是缓存的图像瓦片。这意味着底图是一个静态资源。由于它们是静态的，并且作为图像瓦片提供，我们无法与底图上看到的要素进行交互（例如查询或选择）。而且由于这是底图，这也是最底层的图层，也是首先添加到地图中的图层。
- en: 'Now, the API provides different methods to add a `basemap` property to the
    map:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，API提供了不同的方法来向地图添加`basemap`属性：
- en: 'Add the `basemap` property to the map object:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`basemap`属性添加到地图对象中：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use the in-built `basemap` gallery provided by the API.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用API提供的内置`basemap`库。
- en: This allows us to toggle between multiple basemaps, such as satellite imagery,
    Streets maps, Topographic maps, National Geographic maps, OpenStreetMaps, and
    so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够在多个底图之间切换，例如卫星图像、街道地图、地形图、国家地理地图、OpenStreetMaps等。
- en: Create your own basemaps by adding Tiledmap layers to the map object (we'll
    discuss about Tiledmap layers very soon).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向地图对象添加瓦片地图图层来创建自己的底图（我们很快将讨论有关瓦片地图图层的内容）。
- en: 'Download the project folder called `B04959_02_CODE_01` and open `index.html`
    to get a feel for the Basemap gallery widget:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下载名为`B04959_02_CODE_01`的项目文件夹，并打开`index.html`以了解底图库小部件的使用方法：
- en: '![Basemap layers](graphics/B04959_02_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![底图图层](graphics/B04959_02_02.jpg)'
- en: Functional layers
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能图层
- en: 'Functional layers display all the recent changes and are hence dynamic in nature
    as opposed to the relatively static nature of the Basemap or cached tile layers.
    Functional layers are layers you can interact with. The API provides options to
    perform different operations on most of these layers, such as:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 功能图层显示所有最新更改，因此在性质上是动态的，而不同于底图或缓存瓦片图层的相对静态性质。功能图层是可以与之交互的图层。API提供了对大多数这些图层执行不同操作的选项，例如：
- en: Selecting feature/s
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择要素
- en: Retrieving the attributes and geometry of features
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索要素的属性和几何信息
- en: Performing queries on the data
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据执行查询
- en: Rendering features (applying styling to the features using different symbols,
    colors, width, and other graphic properties)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染要素（使用不同的符号、颜色、宽度和其他图形属性对要素应用样式）
- en: Allowing create, update, and delete (CRUD) operations on features
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许对要素进行创建、更新和删除（CRUD）操作
- en: Functional layers will be *reprojected-on-the-fly*, based on the spatial reference
    of the Basemap. This means that functional layers could be of a different spatial
    reference system than the Basemap and they'd still align with the Basemap, as
    the API will request the reprojected data of the functional layers from the server.
    There are different types of functional layer, such as dynamic layers and feature
    layers, which will be dealt with very soon.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 功能图层将*动态重投影*，基于Basemap的空间参考。这意味着功能图层的空间参考系统可能与Basemap不同，它们仍然会与Basemap对齐，因为API将从服务器请求功能图层的重投影数据。有不同类型的功能图层，例如动态图层和要素图层，我们将很快处理。
- en: Graphics layers
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形图层
- en: Graphics layers have the greatest versatility in terms of operations. Here,
    you can add as much data as you need to the attributes object. You can assign
    or modify its geometry (using the **Draw** toolbar or even programmatically),
    add symbology, query it (with functional layers, the query or update operations
    might be disabled), delete it, use it for selecting features from functional layers,
    or just use it as a redlining tool. But the graphics layer also has the shortest
    lifespan because it doesn't persist after a session—these are just stored on the
    client side. And due to these properties, it makes sense to have the graphics
    layer as the top-most layer, doesn't it?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图形图层在操作方面具有最大的灵活性。在这里，您可以向属性对象添加尽可能多的数据。您可以分配或修改其几何（使用**绘图**工具栏或甚至以编程方式），添加符号，查询它（对于功能图层，查询或更新操作可能被禁用），删除它，用它来选择功能图层中的要素，或者仅将其用作标注工具。但是图形图层的寿命也是最短的，因为它在会话结束后不会持久存在-这些只是存储在客户端上。由于这些属性，将图形图层作为最顶层是有意义的，不是吗？
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A developer needs to be cautious about the spatial reference of the input data
    source when dealing with graphic layers. `esri/geometry/webMercatorUtils` is a
    handy module that lets us convert Web Mercator coordinates to geographic and vice
    versa.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 处理图形图层时，开发人员需要注意输入数据源的空间参考。`esri/geometry/webMercatorUtils`是一个方便的模块，可以让我们将Web墨卡托坐标转换为地理坐标，反之亦然。
- en: Types of layers
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图层类型
- en: We got a glimpse of the functional classification of layers. The API provides
    a host of modules to load layers from different data sources that generally fall
    into one of the functional classifications that we looked into. We are going to
    review some of the most important types of layers provided by the API and the
    methods and properties it exposes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对图层的功能分类有了一瞥。API提供了一系列模块，用于从不同数据源加载图层，这些数据源通常属于我们研究过的功能分类之一。我们将回顾API提供的一些最重要的图层类型以及它公开的方法和属性。
- en: The ArcGIS Tiledmap service layer
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcGIS Tiledmap服务图层
- en: 'This is the cached Tiledmap layer served by the ArcGIS Server:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由ArcGIS Server提供的缓存Tiledmap图层：
- en: '| Name | Value |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module Name | `esri/layers/ArcGISTiledMapServiceLayer` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/layers/ArcGISTiledMapServiceLayer` |'
- en: '| Data Source Type | `ArcGIS REST Service` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 数据源类型 | `ArcGIS REST Service` |'
- en: '| Layer Type | `BaseMap /Tiled Cache Layer` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 图层类型 | `BaseMap /Tiled Cache Layer` |'
- en: '| Response Type | `Cached image tiles` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 响应类型 | `Cached image tiles` |'
- en: '| Constructor | `new ArcGISTiledMapServiceLayer(url, options?)` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new ArcGISTiledMapServiceLayer(url, options?)` |'
- en: '| Preferred Alias Name | `ArcGISTiledMapServiceLayer` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 首选别名 | `ArcGISTiledMapServiceLayer` |'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Preferred alias names**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**首选别名**'
- en: Preferred alias names provided by the API as part of the code convention and
    be accessed at [https://developers.arcgis.com/javascript/jsapi/argument_aliases.html](https://developers.arcgis.com/javascript/jsapi/argument_aliases.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: API提供的首选别名作为代码约定的一部分，并可以在[https://developers.arcgis.com/javascript/jsapi/argument_aliases.html](https://developers.arcgis.com/javascript/jsapi/argument_aliases.html)上访问。
- en: 'Why do we need to use a different Basemap when we already have a lot of options
    provided by Esri? Well, we found an aesthetic and visually informative tile map
    service from NOAA displaying a color shaded relief of the world''s topography
    and bathymetry (ocean floor elevation differences):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要使用不同的Basemap，当我们已经有Esri提供的很多选项呢？嗯，我们发现了来自NOAA的美学和视觉信息丰富的瓦片地图服务，显示了世界地形和海底地形（海底高程差异）的彩色阴影浮雕：
- en: '![The ArcGIS Tiledmap service layer](graphics/B04959_02_03.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS Tiledmap服务图层](graphics/B04959_02_03.jpg)'
- en: You may consider using this as the Basemap for displaying any world-wide phenomena
    such as hazards or earthquakes. How do we do that? If you look at the constructor
    for this module, it looks for a required `URL` parameter and an optional `options`
    parameter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以考虑将其用作Basemap，用于显示任何全球现象，如灾害或地震。我们该如何做呢？如果您查看此模块的构造函数，它会查找一个必需的`URL`参数和一个可选的`options`参数。
- en: The URL of the NOAA service we were talking about is [http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈论的NOAA服务的URL是[http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/etopo1/MapServer)。
- en: 'Now, let''s try to consume this as `ArcGISTiledMapLayer` (Code Reference: `B04959_02_CODE1.html`):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试将其作为`ArcGISTiledMapLayer`来使用（代码参考：`B04959_02_CODE1.html`）：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That's all the code you need to write to see that beautiful map on your screen.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要编写的所有代码，以在屏幕上看到美丽的地图。
- en: 'The service catalog of the Tiledmap service provides us with a lot of useful
    information that a developer should consider before using the Tiledmap service
    in the application. Let''s consult the service catalog of the previously mentioned
    `ArcGISTiledMapServiceLayer`. In the screenshot of the service catalog provided
    in the next section, the developer can comprehend a lot of information about the
    data source:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Tiledmap服务的服务目录为我们提供了许多有用的信息，开发人员在使用应用程序中的Tiledmap服务之前应该考虑。让我们查看先前提到的`ArcGISTiledMapServiceLayer`的服务目录。在下一节提供的服务目录截图中，开发人员可以了解有关数据源的许多信息：
- en: Spatial Reference
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间参考
- en: TileInfo
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TileInfo
- en: Initial Extent and FullExtent
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始范围和FullExtent
- en: Min Scale and Max Scale
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小比例和最大比例
- en: Layers contributing to the tiles
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献到瓦片的图层
- en: Spatial Reference
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空间参考
- en: '**Spatial Reference** of the Tiledmap service or Basemap is one of the important
    properties overlooked by developers in the initial stages of coding. The **Spatial
    Reference** of the Tiledmap service is set as the spatial reference of the entire
    map. Operational layers, such as the dynamic map service and feature layers, added
    to the map that conforms to this is **Spatial Reference**, whatever their individual
    spatial reference is.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 瓦片地图服务或底图的**空间参考**是开发人员在编码的初始阶段经常忽视的重要属性之一。瓦片地图服务的**空间参考**设置为整个地图的空间参考。添加到地图中的操作图层，如动态地图服务和要素图层，符合此**空间参考**，无论它们各自的空间参考是什么。
- en: '![Spatial Reference](graphics/B04959_02_04.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![空间参考](graphics/B04959_02_04.jpg)'
- en: TileInfo
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: TileInfo
- en: '**TileInfo** provides information about the tiling scheme followed by `TiledMapService`.
    The **Level of Detail** can be used to set the zoom extent of the map.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**TileInfo**提供了有关`TiledMapService`遵循的平铺方案的信息。**详细级别**可用于设置地图的缩放范围。'
- en: Extent and Scale Info
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 范围和比例信息
- en: Extent and scale info provides us information about the extent within which
    the tiles are visible.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 范围和比例信息为我们提供了有关可见瓦片范围的信息。
- en: Download the complete code from project folder `B04959_02_CODE_02` and see your
    beautiful Tiledmap in action.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从项目文件夹`B04959_02_CODE_02`下载完整的代码，并查看您美丽的瓦片地图的效果。
- en: The ArcGIS DynamicMapService layer
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ArcGIS DynamicMapService图层
- en: 'This module, as the name suggests, is a dynamically hosted resource from the
    ArcGIS Server REST API:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块，顾名思义，是来自ArcGIS Server REST API的动态托管资源：
- en: '| Names | Values |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module Name | `esri/layers/ArcGISDynamicMapServiceLayer` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/layers/ArcGISDynamicMapServiceLayer` |'
- en: '| Data Source Type | `ArcGIS REST Service` |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 数据源类型 | `ArcGIS REST服务` |'
- en: '| Layer Type | `Functional Layer` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 图层类型 | `功能图层` |'
- en: '| Response Type | `Dynamically generated images` |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 响应类型 | `动态生成的图像` |'
- en: '| Constructor | `new ArcGISDynamicMapServiceLayer(url, options?)` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new ArcGISDynamicMapServiceLayer(url, options?)` |'
- en: The dynamic map layer actually represents all the data exposed by the non-cached
    map service. For the same reason, dynamic map layers are a kind of composite layer
    because a map service generally has more than one layer.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 动态地图图层实际上代表了非缓存地图服务公开的所有数据。出于同样的原因，动态地图图层是一种复合图层，因为地图服务通常具有多个图层。
- en: We'll see what this means in a moment. We'll refer to the service catalog (yeah,
    it's a fancy term for the interface that appears when we navigate to the map service
    URL).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一会儿看到这意味着什么。我们将参考服务目录（是的，这是一个花哨的术语，用于指导我们导航到地图服务URL时出现的界面）。
- en: Open this URL of a map service in the browser—[http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开此地图服务的URL - [http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/SampleWorldCities/MapServer)。
- en: 'You will be able to see all the data layers exposed by the map service. So,
    when you consume this map service, all the data will be displayed on the map as
    part of a single DynamicMapService layer:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到地图服务公开的所有数据图层。因此，当您使用此地图服务时，所有数据将作为单个DynamicMapService图层的一部分显示在地图上：
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_05.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_05.jpg)'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you cannot see the service catalog for any service shown previously, it doesn't
    mean that the service is offline; it might be that service browsing is turned
    off on the production machine.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法看到先前显示的任何服务的服务目录，则并不意味着该服务已离线；可能是在生产机器上关闭了服务浏览。
- en: Make sure to try the URL by appending a query parameter named `f` with a value
    as `json`, for example, `{{url}}?f=json`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 确保尝试通过附加名为`f`值为`json`的查询参数来尝试URL，例如，`{{url}}?f=json`。
- en: 'Earlier, we discussed how to add `ArcGISTiledMapServiceLayer` to the map. The
    following code adds the `ArcGISDynamicMapService` layer upon the existing tiled
    layer:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了如何将`ArcGISTiledMapServiceLayer`添加到地图中。以下代码在现有的瓦片图层上添加了`ArcGISDynamicMapService`图层：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, if you would have observed, both `ArcGISDynamicMapServiceLayer` and `ArcGISTiledMapServiceLayer`
    consume a map service. So, how do we actually know which map service should be
    used as a Tiledmap service or which can be used as a DynamicMapService? You might
    have guessed it right. The service catalog is the answer. There is a particular
    heading in the service catalog that you have to look for in the map services that
    distinguishes a cached tile map service from the non-cached map service. This
    is called **TileInfo**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您已经注意到，`ArcGISDynamicMapServiceLayer`和`ArcGISTiledMapServiceLayer`都使用地图服务。那么，我们如何知道哪个地图服务应该用作瓦片地图服务，哪个可以用作DynamicMapService呢？您可能已经猜到了。服务目录就是答案。服务目录中有一个特定的标题，您必须在其中查找区分缓存瓦片地图服务和非缓存地图服务的地图服务。这就是**TileInfo**。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The attribute that differentiates cached tile map services from non-cached map
    services is called Tile Info.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 区分缓存瓦片地图服务和非缓存地图服务的属性称为Tile Info。
- en: TileInfo has information on the level of detail information. The levels of details
    determine the discrete scale levels at which the map will be displayed. These
    levels of details are also known as the zoom levels, and the markers in the zoom
    control of the map correspond with these zoom levels.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: TileInfo包含有关详细信息的信息。详细级别确定地图将显示的离散比例级别。这些详细级别也称为缩放级别，地图的缩放控件中的标记与这些缩放级别对应。
- en: Now, there is a similarity with how Tiledmap service and DynamicMapService responses
    are served. Both are served as images. While Tiledmap services serve multiple
    image tiles for each extent, a DynamicMapService serves just one image for a given
    extent.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，瓦片地图服务和动态地图服务响应的提供方式是相似的。两者都是作为图像提供的。瓦片地图服务为每个范围提供多个图像瓦片，而动态地图服务仅为给定范围提供一个图像。
- en: 'If you notice your **Networks** tab, there will be a `GET` request method named
    `export` appended to the DynamicMapService that we declared. This is the `GET`
    request that fetched the dynamic map image from the server:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到您的**网络**选项卡，将会有一个名为`export`的`GET`请求方法附加到我们声明的DynamicMapService。这是从服务器获取动态地图图像的`GET`请求：
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_06.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS DynamicMapService图层](graphics/B04959_02_06.jpg)'
- en: 'Observe the name-value pairs in the query string of the preceding `GET` request.
    You''ll notice the following fieldnames:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 观察前面`GET`请求的查询字符串中的名称-值对。您会注意到以下字段名：
- en: The `dpi` fieldname defines the resolution of the image in dots per inch
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dpi`字段名定义了每英寸点数的图像分辨率'
- en: The `transparent` fieldname defines that the response image is transparent,
    and so, the background Basemap can be viewed
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transparent`字段名定义了响应图像是透明的，因此可以查看背景Basemap'
- en: The `format` fieldname has a value of `png`, which is the format of the response
    image
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format`字段名的值为`png`，这是响应图像的格式'
- en: The value for the `bbox` fieldname requests the extent (consisting of four coordinates—`Xmin`,
    `Ymin`, `Xmax`, and `Ymax`) for which the image is requested
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bbox`字段名的值请求图像所请求的范围（由四个坐标—`Xmin`、`Ymin`、`Xmax`和`Ymax`组成）。'
- en: The value for the `bboxSR` fieldname defines the spatial reference in which
    the `bbox` coordinates were defined, and `imageSR` defines the spatial reference
    in which the response image is requested
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bboxSR`字段名的值定义了`bbox`坐标的空间参考，`imageSR`定义了请求响应图像的空间参考'
- en: The value last fieldname called `f` defines the format of the response; it's
    an `image` of course
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个字段名为`f`定义了响应的格式；当然是一个`image`
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Exercise**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习**'
- en: Change the value for the `f` field name from `image` to `html` in the preceding
    `GET` request and see what you get.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`GET`请求中，将`f`字段名的值从`image`更改为`html`，然后查看您会得到什么。
- en: 'If you check out the API page, you will see that this module provides a lot
    of properties and methods. The following table shows some of the most important
    methods:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看API页面，您会发现此模块提供了许多属性和方法。以下表格显示了一些最重要的方法：
- en: '| Method Name | Description |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 方法名 | 描述 |'
- en: '| --- | --- |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `exportMapImage(imageParameters?, callback_function?)` | This exports a map
    using values as specified by the `imageParameters` object. The callback function
    event returns the map image. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `exportMapImage(imageParameters?, callback_function?)` | 这使用`imageParameters`对象指定的值导出地图。回调函数事件返回地图图像。
    |'
- en: '| `refresh()` | This refreshes the map by making a new request to the server.
    |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `refresh()` | 这将通过向服务器发出新请求来刷新地图。 |'
- en: '| `setDPI(dotsPerInch)` | This enables setting the image resolution in dots
    per inch for the exported map. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `setDPI(dotsPerInch)` | 这使得可以设置导出地图的每英寸点数的图像分辨率。 |'
- en: '| `setLayerDefinitions(stringArray of Layerdefintions)` | This enables us to
    filter the data displayed by the DynamicMapService. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `setLayerDefinitions(stringArray of Layerdefintions)` | 这使我们能够过滤动态地图服务显示的数据。
    |'
- en: '| `setVisibleLayers(Array_of_LayerIds)` | This makes visible only the layers
    whose IDs are passed in as the parameter. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `setVisibleLayers(Array_of_LayerIds)` | 这只显示传递参数作为ID的图层。 |'
- en: 'Now, make sure you have the following requirements to display the DynamicMapService:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请确保您具备以下要求以显示DynamicMapService：
- en: Only display the `Cities` layer
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅显示`Cities`图层
- en: Provide a transparency of 0.5 for the dynamic map image
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为动态地图图像提供0.5的透明度
- en: Display only cities with a population greater than 1 million
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅显示人口超过100万的城市
- en: 'The following snippet guides you in how to accomplish this (Code Reference:
    `B04959_02_CODE2.html`):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段指导您如何完成此操作（代码参考：`B04959_02_CODE2.html`）：
- en: '[PRE5]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When the `showAttribution` property in the options object of any map object
    is set to `true`, all the attributions for the data source are shown in the bottom-right
    corner of the map.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何地图对象的选项对象中的`showAttribution`属性设置为`true`时，数据源的所有归因都显示在地图的右下角。
- en: The `setLayerDefinitions()` method accepts a string array of `where` clauses.
    While passing the layer definitions for a DynamicMapService, keep the following
    things in mind.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`setLayerDefinitions(stringArray of Layerdefintions)`方法接受`where`子句的字符串数组。在传递动态地图服务的图层定义时，请记住以下几点。'
- en: 'The index of the definition expression (`where` clause) should match the index
    of the layer on which the expression is applied. For example, if the `Cities`
    layer had an index of `5` in the preceding map service, the layer definition would
    look like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 定义表达式（`where`子句）的索引应与应用表达式的图层的索引相匹配。例如，如果`Cities`图层在前面的地图服务中的索引为`5`，则图层定义将如下所示：
- en: '[PRE6]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once these conditions are met, the resulting map will look like this. The semi-transparent
    blue dots are the world cities with a population greater than one million:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦满足这些条件，生成的地图将如下所示。半透明的蓝色点是人口超过一百万的世界城市：
- en: '![The ArcGIS DynamicMapService layer](graphics/B04959_02_07.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![ArcGIS DynamicMapService图层](graphics/B04959_02_07.jpg)'
- en: Feature layers
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要素图层
- en: A feature layer is an individual layer of a map service that has a geometry
    type. An individual layer in a map service could be a feature layer or even a
    raster layer; for example, [http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1](http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1)
    and [http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0)
    are both individual layers of a map service, but the former URL is a raster layer
    resource and the latter is a feature layer resource. The raster layer doesn't
    have a geometry type attribute in Service Catalog, whereas the feature layer has
    one of the geometry types point, multipoint, polyline, or polygon.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层是地图服务的一个单独图层，具有几何类型。地图服务中的单独图层可以是要素图层，甚至是栅格图层；例如，[http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1](http://sampleserver4.arcgisonline.com/ArcGIS/rest/services/Elevation/ESRI_Elevation_World/MapServer/1)和[http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer/0)都是地图服务的单独图层，但前一个URL是栅格图层资源，后一个是要素图层资源。栅格图层在服务目录中没有几何类型属性，而要素图层具有点、多点、折线或多边形几何类型之一。
- en: 'A feature layer is a very versatile entity because it supports advanced querying,
    selecting, rendering, and sometimes even editing facilities. A feature layer (or
    a raster layer) is identified using the index in the map service it belongs to:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要素图层是非常灵活的实体，因为它支持高级查询、选择、渲染，有时甚至支持编辑功能。要素图层（或栅格图层）是通过它所属的地图服务中的索引来识别的：
- en: '| Names | Values |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Module Name | `esri/layers/FeatureLayer` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 模块名称 | `esri/layers/FeatureLayer` |'
- en: '| Data Source Type | `ArcGIS REST Service` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 数据源类型 | `ArcGIS REST服务` |'
- en: '| Layer Type | `Functional Layer` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 图层类型 | `功能图层` |'
- en: '| Response Type | `Feature Collection (Feature has geometry, attribute and
    symbology)` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 响应类型 | `要素集合（要素具有几何、属性和符号）` |'
- en: '| Constructor | `new FeatureLayer(url, options?)` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数 | `new FeatureLayer(url, options?)` |'
- en: 'Adding the feature layer/s to the map is the same as adding a DynamicMapService
    layer or a Tiledmap service layer:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 将要素图层/图层添加到地图上与添加DynamicMapService图层或Tiledmap服务图层相同：
- en: '[PRE7]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The FeatureLayer constructor
  id: totrans-177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 要素图层构造函数
- en: The `FeatureLayer` constructor has two arguments—the `FeatureLayer` URL and
    an optional `options` object. The `options` object provides a bunch of options
    to configure the `FeatureLayer` constructor. One of the most important `options`
    property is named `mode`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`FeatureLayer`构造函数有两个参数——`FeatureLayer` URL和一个可选的`options`对象。`options`对象提供了一堆选项来配置`FeatureLayer`构造函数。其中最重要的`options`属性之一被命名为`mode`。'
- en: 'The `mode` property defines how the feature layer is rendered on the map. Since
    feature layers stream the actual geometry of the feature, unlike the map service
    (which provides a dynamically generated image) or a Tiledmap service (which just
    serves pre-rendered cached tiles), the rendering of feature layers on a map has
    some performance considerations. There are four types of mode by which a feature
    layer can be rendered. The four modes are numeric values provided as constants
    by the API. If the callback function alias of the feature layer module is a feature
    layer, the four modes can be accessed using the following decorations:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`属性定义了要素图层在地图上的渲染方式。由于要素图层流式传输要素的实际几何，不像地图服务（提供动态生成的图像）或Tiledmap服务（只提供预先渲染的缓存瓦片），要素图层在地图上的渲染有一些性能考虑。要素图层可以通过四种模式进行渲染。这四种模式是API提供的常量的数值值。如果要素图层模块的回调函数别名是要素图层，那么可以使用以下装饰来访问这四种模式：'
- en: '`FeatureLayer.MODE_SNAPSHOT`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FeatureLayer.MODE_SNAPSHOT`'
- en: This fetches all the features from the server once and resides on the client—a
    one-time overhead
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一次性地从服务器获取所有要素并驻留在客户端上
- en: This is updated when the additional filters are applied
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这在应用额外的过滤器时进行更新
- en: '`FeatureLayer.MODE_ONDEMAND`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FeatureLayer.MODE_ONDEMAND`'
- en: Features are fetched as needed
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要获取要素
- en: Continuous little chunks of overhead
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续的小额开销
- en: Default `MODE`
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认`MODE`
- en: '`FeatureLayer.MODE_SELECTION`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FeatureLayer.MODE_SELECTION`'
- en: Only features selected using `selectFeatures()` method is displayed
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有使用`selectFeatures()`方法选择的要素才会显示
- en: '`FeatureLayer.MODE_AUTO`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FeatureLayer.MODE_AUTO`'
- en: This switches between `MODE_SNAPSHOT` or `MODE_ONDEMAND` (this choice is made
    by the API)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`MODE_SNAPSHOT`和`MODE_ONDEMAND`之间切换（此选择由API进行）
- en: Best of both worlds
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两全其美
- en: We will try to add a `FeatureLayer` constructor for historical earthquakes to
    the map. The map service providing these feature layers can be found at [http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试为历史地震添加一个`FeatureLayer`构造函数到地图上。提供这些要素图层的地图服务可以在[http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer](http://maps.ngdc.noaa.gov/arcgis/rest/services/web_mercator/hazards/MapServer)找到。
- en: 'The earthquakes layer is the fifth layer in the map service. But you can try
    other feature layers too. Here''s a code snippet that lets you add a feature layer
    to the map object (Code Reference: `B04959_02_CODE3.html`):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 地震图层是地图服务中的第五个图层。但你也可以尝试其他要素图层。以下是一个代码片段，让你将要素图层添加到地图对象中（代码参考：`B04959_02_CODE3.html`）：
- en: '[PRE8]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code can be explained as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码可以解释如下：
- en: The `id` property assigns an ID to the feature layer
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`属性为要素图层分配一个ID'
- en: The `opacity` property lets us define an opacity for the map
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opacity`属性让我们为地图定义不透明度'
- en: The `definitionExpression` property is a `where` clause that lets us filter
    the features shown on the map
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`definitionExpression`属性是一个`where`子句，让我们过滤在地图上显示的要素'
- en: An `outFields` property lets us define the fields provided by the feature layer
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outFields`属性让我们定义要素图层提供的字段'
- en: 'Here''s a screenshot of the `FeatureLayer` superimposed over the DynamicMapService
    layer and the Tiledmap service layer. The semi-transparent colored circles represent
    the locations where any earthquake ever happened, which had a magnitude of more
    than 6 Richter scale:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`FeatureLayer`叠加在DynamicMapService图层和Tiledmap服务图层上的屏幕截图。半透明的彩色圆圈代表曾经发生过任何地震的地点，其震级超过6里氏标度：
- en: '![The FeatureLayer constructor](graphics/B04959_02_08.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![The FeatureLayer constructor](graphics/B04959_02_08.jpg)'
- en: 'When you pan the map or zoom around the map, the features are fetched and a
    corresponding `GET` request is fired, which fetches the features *on demand*.
    If you open the **Networks** tab in the developer console just after loading a
    feature layer, you will be able to understand a lot of things:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在地图上平移或缩放时，将获取要素并触发相应的`GET`请求，该请求将*按需*获取要素。如果在加载要素图层后立即打开开发者控制台中的**网络**选项卡，您将能够了解很多事情：
- en: The API uses the `query` method of the feature layer to fetch the features.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API使用要素图层的`query`方法来获取要素。
- en: In the query string, there will be query parameters, such as `geometry`, `spatialRel`,
    `geometryType`, and `inSR` which define the extent for which features need to
    be fetched. Other `FeatureLayer` constructor options, such as `outFields` and
    the `where` clause (corresponding to `definitionExpression`), can also be found
    in the query string.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询字符串中，将包含查询参数，例如`geometry`，`spatialRel`，`geometryType`和`inSR`，这些参数定义了需要获取要素的范围。查询字符串中还可以找到其他`FeatureLayer`构造函数选项，例如`outFields`和`where`子句（对应于`definitionExpression`）。
- en: If you click on the **Preview** or **Response** tab, you will notice that the
    `GET` request fetches an array of features. Each feature has an attributes object
    and a geometry object. The attributes object will contain the field names mentioned
    in the `outFields` array and the corresponding field value of the particular feature:![The
    FeatureLayer constructor](graphics/B04959_02_09.jpg)
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单击**预览**或**响应**选项卡，您将注意到`GET`请求获取了一系列要素。每个要素都有一个属性对象和一个几何对象。属性对象将包含`outFields`数组中提到的字段名称和特定要素的相应字段值：![The
    FeatureLayer constructor](graphics/B04959_02_09.jpg)
- en: 'We''ll deal with how to query and select the features in a feature layer in
    the next chapter. As of now, we are better off knowing what the following method
    does to the feature layer object:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中讨论如何查询和选择要素图层中的要素。目前，我们最好知道以下方法对要素图层对象做了什么：
- en: '| Method | Description |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述|'
- en: '| --- | --- |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `clear()` | Clears all graphics |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `clear()` | 清除所有图形|'
- en: '| `clearSelection()` | Clears the current selection |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `clearSelection()` | 清除当前选择|'
- en: '| `getSelectedFeatures()` | Gets the currently selected features |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `getSelectedFeatures()` | 获取当前选择的要素|'
- en: '| `hide()` | Sets the visibility of the layer to `false` |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `hide()` | 将图层的可见性设置为`false`|'
- en: '| `isEditable()` | Returns true if the `FeatureLayer` is editable |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `isEditable()` | 如果`FeatureLayer`可编辑，则返回`true`|'
- en: '| `setInfoTemplate(infoTemplate)` | Specify or change the `info` template for
    a layer |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `setInfoTemplate(infoTemplate)` | 指定或更改图层的`info`模板|'
- en: '| `setOpacity(opacity)` | Initial opacity of the layer (where `1` is opaque,
    `0` is transparent) |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `setOpacity(opacity)` | 图层的初始不透明度（其中`1`为不透明，`0`为透明）|'
- en: '| `show()` | Sets the visibility of the layer to `true` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `show()` | 将图层的可见性设置为`true`|'
- en: Infotemplates
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Infotemplates
- en: Infotemplates provide a simple way to deliver an HTML popup displaying the information
    about a feature when we on click it. We will discuss Infotemplates in detail in
    the next chapter.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Infotemplates提供了一种简单的方式来提供HTML弹出窗口，显示有关要素的信息，当我们点击时。我们将在下一章中详细讨论Infotemplates。
- en: '![Infotemplates](graphics/B04959_02_10.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![Infotemplates](graphics/B04959_02_10.jpg)'
- en: Graphics layer
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图形图层
- en: We've already discussed about graphics layer a bit. We know that the map object,
    by default, contains a graphics layer, and it can be referenced using the `graphics`
    property of the map object. We can also create our own graphics layers and add
    them to the map. However, the default graphics layer provided by the map remains
    at the top.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些关于图形图层的内容。我们知道地图对象默认包含一个图形图层，并且可以使用地图对象的`graphics`属性引用它。我们还可以创建自己的图形图层并将其添加到地图中。但是，地图提供的默认图形图层始终位于顶部。
- en: Let's understand more about the graphics layer and the `Graphic` object that
    is added to the graphics layer. The graphics layer is a container for the `Graphic`
    objects.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更多地了解图形图层和添加到图形图层的`Graphic`对象。图形图层是`Graphic`对象的容器。
- en: 'A `Graphic` object has the following values:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`Graphic`对象具有以下值：'
- en: Geometry
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何
- en: Symbol
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号
- en: Attributes
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: Infotemplate
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Infotemplate
- en: Geometry
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 几何
- en: Geometry will have a type (point, multipoint, polyline, polygon, and extent),
    a spatial reference, and the coordinates making up the geometry.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 几何将具有类型（点、多点、折线、多边形和范围）、空间参考和构成几何图形的坐标。
- en: Symbol
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 符号
- en: A symbol is a much more complex object because it is associated with the geometry
    it symbolizes. Also, the styling of the symbol is defined by the colors or picture
    used to fill up the symbol and the size of the symbol.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是一个更复杂的对象，因为它与其所代表的几何图形相关联。此外，符号的样式是由用于填充符号的颜色或图片以及符号的大小来定义的。
- en: 'Let''s review a snippet to understand this better. This is a simple snippet
    to construct a symbol for a polygon:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一小段代码，以更好地理解这一点。这是一个为多边形构造符号的简单代码段：
- en: '![Symbol](graphics/B04959_02_11.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![Symbol](graphics/B04959_02_11.jpg)'
- en: Attributes
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: The attributes of a graphic is a key-value pair object that stores information
    about the graphic.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图形的属性是一个键值对对象，用于存储有关图形的信息。
- en: InfoTemplate
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InfoTemplate
- en: '`InfoTemplate` is the HTML template that can be used to display relevant information
    about a graphic when we click on it.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`InfoTemplate`是一个HTML模板，可以用来在我们点击时显示有关图形的相关信息。'
- en: Map and layer properties
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图和图层属性
- en: There are many common properties between the layers that give us relevant information
    about the layer. For example, properties such as `fullExtent`, `id`, `infoTemplates`,
    `initialExtent`, `layerInfos`, `maxRecordCount`, `maxScale`, `minScale`, `opacity`,
    `spatialReference`, `units`, `url`, and `visibleLayers` are the same for dynamic
    map layer as well Tiledmap layer, whereas properties such as `dynamicLayerInfos`
    and `layerDefinitions` are specific to the DynamicMapService layer. So, is the
    `tileInfo` property specific to Tiledmap layer?
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图层之间有许多共同的属性，这些属性为我们提供了有关图层的相关信息。例如，`fullExtent`、`id`、`infoTemplates`、`initialExtent`、`layerInfos`、`maxRecordCount`、`maxScale`、`minScale`、`opacity`、`spatialReference`、`units`、`url`和`visibleLayers`对于动态地图图层和瓦片地图图层来说是相同的，而`dynamicLayerInfos`和`layerDefinitions`等属性则特定于DynamicMapService图层。那么，`tileInfo`属性是特定于瓦片地图图层的吗？
- en: Try to explore these properties by logging the properties to the console. For
    example, if you need to print a list of fields in a feature layer, use the `fields`
    property of the feature layer.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过将属性记录到控制台来探索这些属性。例如，如果您需要打印要素图层中的字段列表，请使用要素图层的`fields`属性。
- en: 'Here''s a code snippet that logs certain information regarding the feature
    layer and the DynamicMapService layer to the console (code reference: `B04959_02_CODE5.html`):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将有关要素图层和DynamicMapService图层的某些信息记录到控制台的代码片段（代码参考：`B04959_02_CODE5.html`）：
- en: '[PRE9]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is the screen output you will get in the console:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您将在控制台中获得的屏幕输出：
- en: '[PRE10]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Featurelayer.fields` returns an array of field objects. Each object contains
    properties such as `alias`, `length`, `name`, `nullable`, and `type`. `DynamicLayer.layerInfos`
    returns an array of the `layerInfo` object. The `layerInfo` object provides information
    about the layer:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`Featurelayer.fields`返回一个字段对象数组。每个对象包含`alias`、`length`、`name`、`nullable`和`type`等属性。`DynamicLayer.layerInfos`返回一个`layerInfo`对象数组。`layerInfo`对象提供有关图层的信息：'
- en: '![Map and layer properties](graphics/B04959_02_12.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![地图和图层属性](graphics/B04959_02_12.jpg)'
- en: Map and layer events
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图和图层事件
- en: 'Changing the extent of the map, adding a layer to a map, adding a group of
    layers to the map, or even clicking on the map or a mouse—the API has an event
    handler for all of it. While using the event, let''s stick to dojo''s on module
    to handle events. Find the prototype of handling events using dojo''s `"dojo/on"`
    module:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 改变地图的范围，向地图添加图层，向地图添加一组图层，甚至点击地图或鼠标 - API 对所有这些都有事件处理程序。在使用事件时，让我们坚持使用dojo的on模块来处理事件。找到使用dojo的`"dojo/on"`模块处理事件的原型：
- en: '![Map and layer events](graphics/B04959_02_13.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![地图和图层事件](graphics/B04959_02_13.jpg)'
- en: '| Target | Event | Description |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 目标 | 事件 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Map | `extent-change` | Fires when the extent of the map has changed |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 地图 | `extent-change` | 地图范围发生变化时触发 |'
- en: '| Map | `layers-add-result` | Fires whenever you use the `map.addLayers()`
    method, after all the layers being added to the map are loaded |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 地图 | `layers-add-result` | 在使用`map.addLayers()`方法后，所有添加到地图的图层加载完成时触发 |'
- en: '| Map | `load` | This one is obvious |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 地图 | `load` | 这个很明显 |'
- en: '| Map | `basemap-change` |   |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 地图 | `basemap-change` |   |'
- en: '| Feature layer | `selection-complete` | After selecting features from a feature
    layer |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 要素图层 | `selection-complete` | 从要素图层中选择要素后 |'
- en: 'In the preceding code snippet, which logged out certain layer properties, you
    might have noticed that the entire code snippet was encompassed in an `on` statement:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，记录了某些图层属性，您可能已经注意到整个代码片段都包含在一个`on`语句中：
- en: '[PRE11]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We needed to print out all the layer-related properties inside the `on` event
    since we need to wait until all the layers are loaded, or we will get an undefined
    for most of the properties. This particular event named `layers-add-result` is
    fired only after all the layer arrays added to the map is loaded.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`on`事件中打印出所有与图层相关的属性，因为我们需要等到所有图层加载完成，否则大多数属性都将返回未定义。这个名为`layers-add-result`的特定事件仅在所有添加到地图的图层数组加载完成后触发。
- en: Using Esri widgets – the genie's lamp
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Esri小部件 - 神灯
- en: Widgets are the cornerstone of dojo. Widgets are UI components that can be built,
    configured, and extended in dojo to do a specific task. So, when someone provides
    us with a widget that accomplishes a task we need to do, all we have to do to
    instantiate it is configure it a bit and provide it with the container node reference
    where the widget should reside.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件是dojo的基石。小部件是可以在dojo中构建、配置和扩展的UI组件，以执行特定任务。因此，当有人为我们提供了一个完成我们需要做的任务的小部件时，我们只需稍微配置一下，然后将其提供给小部件应该驻留的容器节点引用即可实例化它。
- en: So, the good news is Esri provides us with in-built widgets that accomplish
    a lot of things, such as querying features, geocoding addresses (converting a
    text address into a location on a map), adding a widget to display the map legend,
    adding widgets to search for attributes, and even adding a widget to toggle between
    multiple basemaps. All the Esri built widgets can be located under `esri/dijits`
    in the table of contents section of the API reference page.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，好消息是Esri为我们提供了内置小部件，可以完成很多事情，比如查询要素、地理编码地址（将文本地址转换为地图上的位置）、添加小部件以显示地图图例、添加小部件以搜索属性，甚至添加小部件以在多个基础地图之间切换。所有Esri构建的小部件都可以在API参考页面的目录部分中找到，位于`esri/dijits`下。
- en: The BaseMapGallery widget
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BaseMapGallery小部件
- en: 'Well, you''re not surprised that this widget does exist, right? We gave you
    a heads-up at the beginning of this chapter when we were dealing with `TiledMapLayers`.
    The Basemap layer widget provides us a with widget with which we can toggle a
    Basemap from a gallery of basemaps. See the following prototype code for integrating
    basemaps into our application (code reference: `B04959_02_CODE6`):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你一定不会惊讶这个小部件确实存在吧？在本章开头处理`TiledMapLayers`时，我们已经提醒过你了。Basemap图层小部件为我们提供了一个小部件，我们可以从基础地图库中切换基础地图。查看以下集成基础地图到我们应用程序的原型代码（代码参考：`B04959_02_CODE6`）：
- en: '[PRE12]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Legend widget
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图例小部件
- en: 'A map legend lists the layers in the map and the symbology used by all the
    layers. Constructing a legend by ourselves involves getting the `layerinfos` and
    `drawinginfos` and listing them in a `div`—the process sounds like a pain in the
    neck. Luckily for us, Esri provides us `dijit` (probably a portmanteau for dojo
    and widget) for constructing legends:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 地图图例列出了地图中的图层和所有图层使用的符号。自己构建图例涉及获取“layerinfos”和“drawinginfos”，并将它们列在“div”中——这个过程听起来很麻烦。幸运的是，Esri为我们提供了“dijit”（可能是dojo和widget的混成词）来构建图例：
- en: '![The Legend widget](graphics/B04959_02_14.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图例小部件](graphics/B04959_02_14.jpg)'
- en: 'We use the following code to initiate the **Legend** widget (Code Reference:
    `B04959_02_CODE6`)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下代码来启动**图例**小部件（代码参考：`B04959_02_CODE6`）
- en: '[PRE13]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered a lot of ground in this chapter. We tried to identify the process
    by which data is added to the map. We identified the data source, such as ArcGIS
    Server service, OGC data, CSV, KML, and so on. Then, we covered the API provided
    modules that support the display of, and further operations on, three major ArcGIS
    REST service data sources, namely the ArcGIS Tiledmap service layer, the ArcGIS
    DynamicMapService layer, and the feature layer. You also learned how to instantiate
    the layers and how to navigate their properties and events. We also dealt with
    a special kind of layer namely graphics layer, which is the top-most layer in
    the map and is used as a container object for all the graphics in the map. We
    got a taste of the plethora of in-built widgets provided by Esri. In the next
    chapter, we will have an in-depth look into writing spatial queries and retrieving
    the results. You will also learn how to use geometry services and the geometry
    engine to process geometric operations.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们涵盖了很多内容。我们试图确定数据添加到地图的过程。我们确定了数据源，如ArcGIS服务器服务、OGC数据、CSV、KML等。然后，我们介绍了支持显示和进一步操作三种主要ArcGIS
    REST服务数据源的API提供的模块，即ArcGIS Tiledmap服务图层、ArcGIS DynamicMapService图层和要素图层。您还学会了如何实例化图层以及如何浏览它们的属性和事件。我们还处理了一种特殊类型的图层，即图形图层，它是地图中最顶层的图层，并且用作地图中所有图形的容器对象。我们品尝了Esri提供的大量内置小部件。在下一章中，我们将深入研究编写空间查询和检索结果。您还将学习如何使用几何服务和几何引擎来处理几何操作。
