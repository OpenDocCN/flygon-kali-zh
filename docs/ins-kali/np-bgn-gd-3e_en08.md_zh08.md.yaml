- en: Chapter 8. Assuring Quality with Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章：通过测试确保质量
- en: '*Some programmers test only in production. If you are not one of them, then
    you''re probably familiar with the concept of unit testing. Unit tests are automated
    tests written by a programmer to test his or her code. These tests could, for
    example, test a function or part of a function in isolation. Each test covers
    only a small unit of code. The benefits are increased confidence in the quality
    of the code, reproducible tests, and, as a side effect, clearer code.*'
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序员仅在生产中进行测试。 如果您不是其中之一，那么您可能熟悉单元测试的概念。 单元测试是程序员编写的用于测试其代码的自动测试。 例如，这些测试可以单独测试函数或函数的一部分。
    每个测试仅覆盖一小部分代码。 这样做的好处是提高了对代码质量，可重复测试的信心，并附带了更清晰的代码。
- en: '*Python has good support for unit testing. Additionally, NumPy adds the `numpy.testing`
    package to that for NumPy code unit testing.*'
  prefs: []
  type: TYPE_NORMAL
  zh: Python 对单元测试有很好的支持。 此外，NumPy 将`numpy.testing`包添加到 NumPy 代码单元测试的包中。
- en: '**Test-driven** **development** (**TDD**) is one of the most important things
    that happened to software development. TDD focuses a lot on automated unit testing.
    The goal is to test automatically the code as much as possible. The next time
    we change the code, we can run the tests and catch potential regressions. In other
    words, any functionality already present will still work.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动的开发**（**TDD**）是最重要的事情之一发生在软件开发中。 TDD 将集中在自动化单元测试上。 目标是尽可能自动地测试代码。 下次更改代码时，我们可以运行测试并捕获潜在的回归。
    换句话说，任何已经存在的函数仍然可以使用。'
- en: 'The topics in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题包括：
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Asserts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言
- en: Floating-point precision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点精度
- en: Assert functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言函数
- en: 'Unit tests usually use functions, which assert something as part of the test.
    When doing numerical calculations, often we have the fundamental issue of trying
    to compare floating-point numbers that are almost equal. For integers, comparison
    is a trivial operation, but for floating-point numbers it is not, because of the
    inexact representation by computers. The NumPy `testing` package has a number
    of utility functions that test whether a precondition is true or not, taking into
    account the problem of floating-point comparisons. The following table shows the
    different utility functions:'
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试通常使用函数，这些函数断言某些内容是测试的一部分。 在进行数值计算时，通常存在一个基本问题，即试图比较几乎相等的浮点数。 对于整数，比较是微不足道的操作，但对于浮点数则不是，因为计算机的表示不准确。
    NumPy `testing`包具有许多工具函数，这些函数可以测试先决条件是否成立，同时考虑到浮点比较的问题。 下表显示了不同的工具函数：
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assert_almost_equal()` | This function raises an exception if two numbers
    are not equal up to a specified precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_almost_equal()` | 如果两个数字不等于指定的精度，则此函数引发异常 |'
- en: '| `assert_approx_equal()` | This function raises an exception if two numbers
    are not equal up to a certain significance |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_approx_equal()` | 如果两个数字在一定意义上不相等，则此函数引发异常 |'
- en: '| `assert_array_almost_equal()` | This function raises an exception if two
    arrays are not equal up to a specified precision |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_almost_equal()` | 如果两个数组的指定精度不相等，此函数将引发异常 |'
- en: '| `assert_array_equal()` | This function raises an exception if two arrays
    are not equal. |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_equal()` | 如果两个数组不相等，此函数将引发异常。 |'
- en: '| `assert_array_less()` | This function raises an exception if two arrays do
    not have the same shape, and the elements of the first array are strictly less
    than the elements of the second array |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_array_less()` | 如果两个数组的形状不同，并且第一个数组的元素严格小于第二个数组的元素，则此函数引发异常 |'
- en: '| `assert_equal()` | This function raises an exception if two objects are not
    equal |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_equal()` | 如果两个对象不相等，则此函数引发异常 |'
- en: '| `assert_raises()` | This function fails if a specified exception is not raised
    by a callable invoked with defined arguments |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_raises()` | 如果使用定义的参数调用的可调用对象未引发指定的异常，则此函数失败 |'
- en: '| `assert_warns()` | This function fails if a specified warning is not thrown
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_warns()` | 如果未抛出指定的警告，则此函数失败 |'
- en: '| `assert_string_equal()` | This function asserts that two strings are equal
    |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_string_equal()` | 此函数断言两个字符串相等 |'
- en: '| `assert_allclose()` | This function raise an assertion if two objects are
    not equal up to desired tolerance |'
  prefs: []
  type: TYPE_TB
  zh: '| `assert_allclose()` | 如果两个对象不等于期望的公差，则此函数引发断言 |'
- en: Time for action – asserting almost equal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 断言几乎相等
- en: 'Imagine that you have two numbers that are almost equal. Let''s use the `assert_almost_equal()`
    function to check whether they are equal:'
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有两个几乎相等的数字。 让我们使用`assert_almost_equal()`函数检查它们是否相等：
- en: 'Call the function with low precision (up to 7 decimal places):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以较低精度调用函数（最多 7 个小数位）：
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that no exception is raised, as you can see in the following result:'
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，不会引发异常，如以下结果所示：
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Call the function with higher precision (up to 8 decimal places):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以更高的精度调用该函数（最多 8 个小数位）：
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used the `assert_almost_equal()` function from the NumPy `testing` package
    to check whether `0.123456789` and `0.123456780` are equal for different decimal
    precisions.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 NumPy `testing`包中的`assert_almost_equal()`函数来检查`0.123456789`和`0.123456780`对于不同的十进制精度是否相等。
- en: Pop quiz – specifying decimal precision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小测验 - 指定小数精度
- en: Q1\. Which parameter of the `assert_almost_equal()` function specifies the decimal
    precision?
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. `assert_almost_equal()`函数的哪个参数指定小数精度？
- en: decimal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`decimal`'
- en: precision
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: tolerance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tolerance`'
- en: significant
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`significant`'
- en: Approximately equal arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 近似相等的数组
- en: 'The `assert_approx_equal()` function raises an exception if two numbers are
    not equal up to a certain number of significant digits. The function raises an
    exception triggered by the following condition:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数字在一定数量的有效数字下不相等，则`assert_approx_equal()`函数会引发异常。 该函数引发由以下情况触发的异常：
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Time for action – asserting approximately equal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 断言近似相等
- en: 'Let''s take the numbers from the previous *Time* *for* *action* section and
    let the `assert_approx_equal()` function work on them:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一个“实战”部分中选取数字，在它们上应用`assert_approx_equal()`函数：
- en: 'Call the function with low significance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以低重要性调用函数：
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The result is as follows:'
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Call the function with high significance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以高重要性调用函数：
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The function raises an `AssertionError`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数引发一个`AssertionError`：
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used the `assert_approx_equal()` function from the NumPy `testing` package
    to check whether `0.123456789` and `0.123456780` are equal for different decimal
    precisions.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 NumPy `testing`包中的`assert_approx_equal()`函数来检查`0.123456789`和`0.123456780`对于不同的十进制精度是否相等。
- en: Almost equal arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几乎相等的数组
- en: 'The `assert_array_almost_equal()` function raises an exception if two arrays
    are not equal up to a specified precision. The function checks whether the two
    arrays have the same shape. Then, the values of the arrays are compared element
    by element with the following:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数组在指定的精度下不相等，则`assert_array_almost_equal()`函数会引发异常。 该函数检查两个数组的形状是否相同。 然后，将数组的值与以下元素进行逐元素比较：
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Time for action – asserting arrays almost equal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 断言数组几乎相等
- en: 'Let''s form arrays with the values from the previous *Time for action* section
    by adding a `0` to each array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向每个数组添加`0`，用上一个“实战时间”部分的值构成数组：
- en: 'Call the function with lower precision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以较低的精度调用该函数：
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The result is as follows:'
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Call the function with higher precision:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以较高的精度调用该函数：
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The test raises an `AssertionError`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 测试产生一个`AssertionError`：
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We compared two arrays with the NumPy `array_almost_equal()` function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个数组与 NumPy `array_almost_equal()`函数进行了比较。
- en: Have a go hero – comparing arrays with different shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 勇往直前 – 比较不同形状的数组
- en: Use the NumPy `array_almost_equal()` function to compare two arrays with different
    shapes.
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy `array_almost_equal()`函数比较具有不同形状的两个数组。
- en: Equal arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相等的数组
- en: 'The `assert_array_equal()` function raises an exception if two arrays are not
    equal. The shapes of the arrays have to be equal and the elements of each array
    must be equal. NaNs are allowed in the arrays. Alternatively, arrays can be compared
    with the `array_allclose()` function. This function has the parameters **absolute**
    **tolerance** (**atol**) and **relative** **tolerance** (**rtol**). For two arrays
    `a` and `b`, these parameters satisfy the following equation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数组不相等，`assert_array_equal()`函数将引发异常。 数组的形状必须相等，并且每个数组的元素必须相等。 数组中允许使用 NaN。
    或者，可以将数组与`array_allclose()`函数进行比较。 此函数的参数为**绝对公差**（`atol`）和**相对公差**（`rtol`）。 对于两个数组`a`和`b`，这些参数满足以下方程式：
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Time for action – comparing arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 比较数组
- en: 'Let''s compare two arrays with the functions we just mentioned. We will reuse
    the arrays from the previous *Time* *for* *action* section and add a NaN to them:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将两个数组与刚才提到的函数进行比较。 我们将重复使用先前“实战”中的数组，并将它们加上 NaN：
- en: 'Call the `array_allclose()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`array_allclose()`函数：
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The result is as follows:'
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Call the `array_equal()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`array_equal()`函数：
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The test fails with an `AssertionError`:'
  prefs: []
  type: TYPE_NORMAL
  zh: 测试失败，并显示`AssertionError`：
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We compared two arrays with the `array_allclose()` function and the `array_equal()`
    function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个数组与`array_allclose()`函数和`array_equal()`函数进行了比较。
- en: Ordering arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序数组
- en: The `assert_array_less()` function raises an exception if two arrays do not
    have the same shape, and the elements of the first array are strictly less than
    the elements of the second array.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数组不具有相同形状的，并且第一个数组的元素严格小于第二个数组的元素，则`assert_array_less()`函数会引发异常。
- en: Time for action – checking the array order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 检查数组顺序
- en: 'Let''s check whether one array is strictly greater than another array:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个数组是否严格大于另一个数组：
- en: 'Call the `assert_array_less()` function with two strictly ordered arrays:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用两个严格排序的数组调用`assert_array_less()`函数：
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The result is as follows:'
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Call the `assert_array_less()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`assert_array_less()`函数：
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The test raises an exception:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试引发一个异常：
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We checked the ordering of two arrays with the `assert_array_less()` function.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`assert_array_less()`函数检查了两个数组的顺序。
- en: Object comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象比较
- en: The `assert_equal()` function raises an exception if two objects are not equal.
    The objects do not have to be NumPy arrays—they can also be lists, tuples, or
    dictionaries.
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个对象不相等，则`assert_equal()`函数将引发异常。 对象不必是 NumPy 数组，它们也可以是列表，元组或字典。
- en: Time for action – comparing objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 比较对象
- en: Suppose you need to compare two tuples. We can use the `assert_equal()` function
    to do that.
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要比较两个元组。 我们可以使用`assert_equal()`函数来做到这一点。
- en: 'Call the `assert_equal()` function:'
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`assert_equal()`函数：
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The call raises an error because the items are not equal:'
  prefs: []
  type: TYPE_NORMAL
  zh: 该调用引发错误，因为项目不相等：
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We compared two tuples with the `assert_equal()` function—an exception was raised
    because the tuples were not equal to each other.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个元组与`assert_equal()`函数进行了比较-由于元组彼此不相等，因此引发了一个例外。
- en: String comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串比较
- en: The `assert_string_equal()` function asserts that two strings are equal. If
    the test fails, the function throws an exception and shows the difference between
    the strings. The case of the string characters matters.
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_string_equal()`函数断言两个字符串相等。 如果测试失败，该函数将引发异常，并显示字符串之间的差异。 字符串字符的大小写很重要。'
- en: Time for action – comparing strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 比较字符串
- en: 'Let''s compare strings. Both strings are the word "NumPy":'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下字符串。 这两个字符串都是单词`NumPy`：
- en: 'Call the `assert_string_equal()` function to compare a string with itself.
    This test, of course, should pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`assert_string_equal()`函数将字符串与自身进行比较。 该测试当然应该通过：
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The test passes:'
  prefs: []
  type: TYPE_NORMAL
  zh: 测试通过：
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Call the `assert_string_equal()` function to compare a string with another
    string with the same letters, but different casing. This test should throw an
    exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`assert_string_equal()`函数将一个字符串与另一个字母相同但大小写不同的字符串进行比较。 此测试应引发异常：
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The test raises an error:'
  prefs: []
  type: TYPE_NORMAL
  zh: 测试引发错误：
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We compared two strings with the `assert_string_equal()` function. The test
    threw an exception when the casing did not match.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个字符串与`assert_string_equal()`函数进行了比较。 当外壳不匹配时，该测试引发了异常。
- en: Floating-point comparisons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点比较
- en: The representation of floating-point numbers in computers is not exact. This
    leads to issues when comparing floating-point numbers. The `assert_array_almost_equal_nulp()`
    and `assert_array_max_ulp()` NumPy functions provide consistent floating-point
    comparisons. **Unit** **of** **Least** **Precision** (**ULP**) of floating-point
    numbers, according to the IEEE 754 specification, a half ULP precision is required
    for elementary arithmetic operations. You can compare this to a ruler. A metric
    system ruler usually has ticks for millimeters, but beyond that you can only estimate
    half millimeters.
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机中浮点数的表示形式不准确。 比较浮点数时，这会导致问题。 `assert_array_almost_equal_nulp()`和`assert_array_max_ulp()`
    NumPy 函数提供一致的浮点比较。浮点数的**最低精度的单位**（**ULP**），根据 IEEE 754 规范，是基本算术运算所需的半精度。 您可以将此与标尺进行比较。
    公制标尺通常具有毫米的刻度，但超过该刻度则只能估计半毫米。
- en: '**Machine epsilon** is the largest relative rounding error in floating-point
    arithmetic. Machine epsilon is equal to ULP relative to 1\. The NumPy `finfo()`
    function allows us to determine the machine epsilon. The Python standard library
    also can give you the machine epsilon value. The value should be the same as that
    given by NumPy.'
  prefs: []
  type: TYPE_NORMAL
  zh: 机器`ε`是浮点算术中最大的相对舍入误差。 机器`ε`等于 ULP 相对于 1。NumPy `finfo()`函数使我们能够确定机器`ε`。 Python
    标准库还可以为您提供机器的`ε`值。 该值应与 NumPy 给出的值相同。
- en: Time for action – comparing with assert_array_almost_equal_nulp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 使用`assert_array_almost_equal_nulp`来比较
- en: 'Let''s see the `assert_array_almost_equal_nulp()` function in action:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看到`assert_array_almost_equal_nulp()`函数的作用：
- en: 'Determine the machine epsilon with the `finfo()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`finfo()`函数确定机器`epsilon`：
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The epsilon would be as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`ε`将如下所示：'
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Compare `1.0` with `1 + epsilon` using the `assert_almost_equal_nulp()` function.
    Do the same for `1 + 2 * epsilon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`assert_almost_equal_nulp()`函数将`1.0`与`1 + epsilon`进行比较。 对`1 + 2 * epsilon`执行相同的操作：
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The result is as follows:'
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We determined the machine epsilon with the `finfo()` function. We then compared
    `1.0` with `1 + epsilon` with the `assert_almost_equal_nulp()` function. This
    test passed however, adding another epsilon resulted in an exception.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`finfo()`函数确定了机器`ε`。 然后，我们将`1.0`与`1 + epsilon`与`assert_almost_equal_nulp()`函数进行了比较。
    但是，该测试通过了，添加另一个`ε`导致异常。
- en: Comparison of floats with more ULPs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多使用 ULP 的浮点比较
- en: The `assert_array_max_ulp()` function allows you to specify an upper bound for
    the number of ULPs you would allow. The `maxulp` parameter accepts an integer
    value for the limit. The value of this parameter is 1 by default.
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert_array_max_ulp()`函数允许您指定允许的 ULP 数量的上限。 `maxulp`参数接受整数作为限制。 默认情况下，此参数的值为
    1。'
- en: Time for action – comparing using maxulp of 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 使用最大值 2 的比较
- en: 'Let''s do the same comparisons as in the previous *Time* *for* *action* section,
    but specify a `maxulp` of `2` when necessary:'
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行与先前“实战”部分相同的事情，但在必要时， 指定`maxulp`为`2`：
- en: 'Determine the machine epsilon with the `finfo()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`finfo()`函数确定机器`epsilon`：
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The epsilon would be as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 'The epsilon would be as follows:'
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Do the comparisons as done in the previous *Time* *for* *action* section, but
    use the `assert_array_max_ulp()` function with the appropriate `maxulp` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照前面的“实战时间”部分中进行的比较，但是将`assert_array_max_ulp()`函数与相应的`maxulp`值一起使用：
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为  ，如下所示：
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We compared the same values as the previous *Time* *for* *action* section, but
    specified a `maxulp` of `2` in the second comparison. Using the `assert_array_max_ulp()`
    function with the appropriate `maxulp` value, these tests passed with a return
    value of the number of ULPs.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们比较了与之前“实战”部分相同的值，但在第二次比较中指定了`2`的`maxulp`。 通过将`assert_array_max_ulp()`函数与适当的`maxulp`值一起使用，这些测试通过了
    ULP 数量返回值。
- en: Unit tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit tests are automated tests, which test a small piece of code, usually a
    function or method. Python has the `PyUnit` API for unit testing. As NumPy users,
    we can make use of the assert functions we saw in action before.
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是自动化测试，它测试一小段代码，通常是函数或方法。 Python 具有用于单元测试的`PyUnit` API。 作为 NumPy 的用户，我们可以利用之前在操作中看到的`assert`函数。
- en: Time for action – writing a unit test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 编写单元测试
- en: We will write tests for a simple factorial function. The tests will check for
    the so-called happy path and abnormal conditions.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为一个简单的阶乘函数编写测试  。 测试将检查所谓的快乐路径和异常状况。
- en: 'Start by writing the factorial function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先编写阶乘函数：
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The code uses the `arange()` and `cumprod()` functions to create arrays and
    calculate the cumulative product, but we added a few checks for boundary conditions.
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码使用`arange()`和`cumprod()`函数创建数组并计算累积乘积，但是我们添加了一些边界条件检查。
- en: 'Now we will write the unit test. Let''s write a class that will contain the
    unit tests. It extends the `TestCase` class from the `unittest` module, which
    is part of standard Python. Test for calling the factorial function with the following
    three attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将编写单元测试。 让我们写一个包含单元测试的类。 它从标准测试 Pytho 的`unittest`模块扩展了`TestCase`类。 测试具有以下三个属性的阶乘函数的调用：
- en: a positive number, the happy path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正数，正确的方式
- en: boundary condition 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边界条件 0
- en: negative numbers, which should result in an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负数，这将导致错误
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We rigged one of the tests to fail, as you can see in the following output:'
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下输出所示，我们将其中一项测试失败了：
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We made some happy path tests for the factorial function code. We let the boundary
    condition test fail on purpose (see `unit_test.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对阶乘函数代码进行了一些满意的路径测试。 我们让边界条件测试故意失败（请参阅`unit_test.py`）：
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Nose test decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Nose`测试装饰器'
- en: 'A nose is an organ above the mouth that is used by humans and animals to breathe
    and smell. It is also a Python framework that makes (unit) testing easier. `Nose`
    helps you organize tests. According to the `nose` documentation:'
  prefs: []
  type: TYPE_NORMAL
  zh: 鼻子是嘴巴上方的器官，人类和动物用来呼吸和闻味。 它也是一个 Python 框架  ，使（单元）测试变得更加容易。 `Nose`可帮助您组织测试。 根据`nose`文档：
- en: '*"Any python source file, directory or package that matches the `testMatch`
    regular expression (by default: `(?:^|[b_.-])[Tt]est`) will be collected as a
    test."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “将收集与`testMatch`正则表达式（默认值：`(?:^|[b_.-])[Tt]est`）匹配的任何 Python 源文件，目录或包作为测试。”
- en: '`Nose` makes extensive use of decorators. Python decorators are annotations
    that indicate something about a method or a function (see [http://thecodeship.com/patterns/guide-to-python-function-decorators/](http://thecodeship.com/patterns/guide-to-python-function-decorators/)).
    The `numpy.testing` module has a number of decorators. The following table shows
    the different decorators in the `numpy.testing` module:'
  prefs: []
  type: TYPE_NORMAL
  zh: '`Nose`大量使用装饰器。 Python 装饰器是指示有关方法或函数的注释（见[`thecodeship.com/patterns/guide-to-python-function-decorators`](http://thecodeship.com/patterns/guide-to-python-function-decorators/)）。
    `numpy.testing`模块具有许多装饰器。 下表显示了`numpy.testing`模块中的不同装饰器：'
- en: '| Decorator | Description |'
  prefs: []
  type: TYPE_TB
  zh: '| 装饰器 | 描述 |'
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `numpy.testing.decorators.deprecated` | This function filters deprecation
    warnings when running tests |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.deprecated` | 运行测试时，此函数过滤弃用警告 |'
- en: '| `numpy.testing.decorators.knownfailureif` | This function raises `KnownFailureTest`
    exception based on a condition |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.knownfailureif` | 此函数基于条件引发`KnownFailureTest`异常
    |'
- en: '| `numpy.testing.decorators.setastest` | This decorator marks a function as
    being a test or not being a test |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.setastest` | 此装饰器标记测试函数或未测试函数 |'
- en: '| `numpy.testing.decorators.skipif` | This function raises a `SkipTest` exception
    based on a condition |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.skipif` | 此函数根据条件引发一个`SkipTest`异常 |'
- en: '| `numpy.testing.decorators.slow` | This function labels test functions or
    methods as slow |'
  prefs: []
  type: TYPE_TB
  zh: '| `numpy.testing.decorators.slow` | 此函数将测试函数或方法标记为缓慢 |'
- en: Additionally, we can call the `decorate_methods()` function to apply decorators
    on methods of a class matching a regular expression or a string.
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以调用`decorate_methods()`函数将修饰符应用于与正则表达式或字符串匹配的类的方法。
- en: Time for action – decorating tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 装饰测试函数
- en: We will apply the `@setastest` decorator directly to test functions. Then we
    will apply the same decorator to a method to disable it. Also, we will skip one
    of the tests and fail another. First, install `nose` in case you don't have it
    yet.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将直接将`@setastest`装饰器应用于测试函数。 然后，我们将相同的装饰器应用于方法以将其禁用。 另外，我们将跳过其中一项测试，并通过另一项测试。
    首先，安装`nose`以防万一。
- en: 'Install `nose` with `setuptools`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`setuptools`安装`nose`：
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Or pip:'
  prefs: []
  type: TYPE_NORMAL
  zh: 或点子：
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Apply one function as being a test and another as not being a test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个函数当作测试，将另一个函数当作不是测试：
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Skip tests with the `@skipif` decorator. Let''s use a condition that always
    leads to a test being skipped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@skipif`装饰器跳过测试。 让我们使用一个总是导致测试被跳过的条件：
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add a test function that always passes. Then, decorate it with the `@knownfailureif`
    decorator so that the test always fails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个始终通过的测试函数。 然后，使用`@knownfailureif`装饰器对其进行装饰，以使测试始终失败：
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Define some `test` classes with methods that normally should be executed by
    `nose`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用通常应由`nose`执行的方法定义一些`test`类：
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s disable the second test method from the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从上一步中禁用第二个测试方法：
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Run the tests with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行测试：
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We decorated some functions and methods as not being tests so that they were
    ignored by nose. We skipped one test and failed another too. We did this by applying
    decorators directly and with the `decorate_methods()` function (see `decorator_test.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将某些函数和方法修饰为非测试形式，以便它们被鼻子忽略。 我们跳过了一项测试，也没有通过另一项测试。 我们通过直接使用装饰器并使用`decorate_methods()`函数（请参见`decorator_test.py`）来完成此操作：
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Docstrings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档字符串
- en: '**Doctests** are strings embedded in Python code that resemble interactive
    sessions. These strings can be used to test certain assumptions or just to provide
    examples. The `numpy.testing` module has a function to run these tests.'
  prefs: []
  type: TYPE_NORMAL
  zh: '**Doctests** 是嵌入在 Python 代码中的字符串，类似于交互式会话。 这些字符串可用于测试某些假设或仅提供示例。 `numpy.testing`模块具有运行这些测试的函数。'
- en: Time for action – executing doctests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战时间 – 执行文档测试
- en: Let's write a simple example that is supposed to calculate the well-known factorial,
    but doesn't cover all of the possible boundary conditions. In other words, some
    tests will fail.
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一个简单示例，该示例应该计算众所周知的阶乘，但并不涵盖所有可能的边界条件。 换句话说，某些测试将失败。
- en: 'The `docstring` will look like text you would see in a Python shell (including
    a prompt). Rig one of the tests to fail, just to see what will happen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docstring`看起来像您在 Python 外壳中看到的文本（包括提示）。 吊装其中一项测试失败，只是为了看看会发生什么：'
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Write the following line of NumPy code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写以下 NumPy 代码行：
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We want this code to fail from time to time for demonstration purposes.
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望此代码不时出于演示目的而失败。
- en: 'Run the `doctest` by calling the `rundocs()` function of the `numpy.testing`
    module, for instance, in the Python shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，通过在 Python 外壳中调用`numpy.testing`模块的`rundocs()`函数来运行`doctest`：
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '*What just happened?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We wrote a docstring test, which didn''t take into account `0` and negative
    numbers. We ran the test with the `rundocs()` function from the `numpy.testing`
    module and got an index error as a result (see `docstringtest.py`):'
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了文档字符串测试，该测试未考虑`0`和负数。 我们使用`numpy.testing`模块中的`rundocs()`函数运行了测试，结果得到了索引错误（请参见`docstringtest.py`）：
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: You learned about testing and NumPy testing utilities in this chapter. We covered
    unit testing, docstring tests, assert functions, and floating-point precision.
    Most of the NumPy assert functions take care of the complexities of floating-point
    numbers. We demonstrated NumPy decorators that can be used by nose. Decorators
    make testing easier and document the developer intention.
  prefs: []
  type: TYPE_NORMAL
  zh: 您在本章中了解了测试和 NumPy 测试工具。 我们介绍了单元测试，文档字符串测试，断言函数和浮点精度。 大多数 NumPy 断言函数都会处理浮点数的复杂性。
    我们展示了可以被鼻子使用的 NumPy 装饰器。 装饰器使测试更加容易，并记录了开发人员的意图。
- en: The topic of the next chapter is matplotlib—the Python scientific visualization
    and graphing open source library.
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章的主题是 Matplotlib——Python 科学的可视化和图形化开源库。
