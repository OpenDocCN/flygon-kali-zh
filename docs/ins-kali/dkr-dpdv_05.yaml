- en: '4: The big picture'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4：大局观
- en: The idea of this chapter is to paint a quick big-picture of what Docker is all
    about before we dive in deeper in later chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是在我们深入研究后面的章节之前，快速描绘Docker的全貌。
- en: 'We’ll break this chapter into two:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这一章分为两部分：
- en: The Ops perspective
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运维视角
- en: The Dev perspective
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者视角
- en: In the Ops Perspective section, we’ll download an image, start a new container,
    log in to the new container, run a command inside of it, and then destroy it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在运维视角部分，我们将下载一个镜像，启动一个新的容器，登录到新的容器中，在其中运行一个命令，然后销毁它。
- en: In the Dev Perspective section, we’ll focus more on the app. We’ll pull some
    app-code from GitHub, inspect a Dockerfile, containerize the app, run it as a
    container.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发者视角部分，我们将更专注于应用程序。我们将从GitHub上拉取一些应用代码，检查一个Dockerfile，将应用程序容器化，作为容器运行它。
- en: These two sections will give you a good idea of what Docker is all about and
    how some of the major components fit together. **It is recommended that you read
    both sections to get the *dev* and the *ops* perspectives.** DevOps anyone?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个部分将让您对Docker的全貌有一个很好的了解，以及一些主要组件是如何组合在一起的。**建议您阅读这两部分，以获得*开发*和*运维*的视角。**
    DevOps？
- en: Don’t worry if some of the stuff we do here is totally new to you. We’re not
    trying to make you an expert by the end of this chapter. This is about giving
    you a *feel* of things — setting you up so that when we get into the details in
    later chapters, you have an idea of how the pieces fit together.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这里做的一些事情对您来说是全新的，不要担心。我们并不打算在本章结束时让您成为专家。这是为了让您对事物有一个*感觉* - 为您做好准备，以便在后面的章节中，当我们深入了解细节时，您对各个部分是如何组合在一起的有一个概念。
- en: All you need, to follow along, is a single Docker host with an internet connection.
    This can be Linux or Windows, and it doesn’t matter if it’s a VM on your laptop,
    an instance in the public cloud, or a bare metal server in your data center. All
    it needs, is to be running Docker with a connection to the internet. We’ll be
    showing examples using Linux and Windows!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要一个带有互联网连接的单个Docker主机来跟随我们。这可以是Linux或Windows，无论是您笔记本电脑上的虚拟机、公共云中的实例，还是您数据中心中的裸金属服务器都无所谓。它只需要运行Docker并连接到互联网。我们将使用Linux和Windows来展示示例！
- en: Another great way to get Docker, and get it fast, is Play With Docker (PWD).
    Play With Docker is a web-based Docker playground that you can use for free. Just
    point your web browser to https://play-with-docker.com/ and you’re ready to go
    (you may need a Docker Hub account to be able to login). It’s my favourite way
    of spinning up temporary Docker environment!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个快速获取Docker的好方法是使用Play With Docker（PWD）。Play With Docker是一个基于Web的Docker游乐场，您可以免费使用。只需将您的Web浏览器指向https://play-with-docker.com/，您就可以开始使用（您可能需要一个Docker
    Hub帐户才能登录）。这是我最喜欢的快速启动临时Docker环境的方法！
- en: The Ops Perspective
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运维视角
- en: 'When you install Docker, you get two major components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Docker时，您会得到两个主要组件：
- en: the Docker client
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker客户端
- en: the Docker daemon (sometimes called “server” or “engine”)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker守护程序（有时被称为“服务器”或“引擎”）
- en: The daemon implements the [Docker Engine API](https://docs.docker.com/engine/api/v1.35/).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 守护程序实现了[Docker Engine API](https://docs.docker.com/engine/api/v1.35/)。
- en: In a default Linux installation, the client talks to the daemon via a local
    IPC/Unix socket at `/var/run/docker.sock`. On Windows this happens via a named
    pipe at `npipe:////./pipe/docker_engine`. You can use the `docker version` command
    to test that the client and daemon (server) are running and talking to each other.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的Linux安装中，客户端通过本地IPC/Unix套接字`/var/run/docker.sock`与守护程序进行通信。在Windows上，这是通过命名管道`npipe:////./pipe/docker_engine`进行的。您可以使用`docker
    version`命令来测试客户端和守护程序（服务器）是否正在运行并相互通信。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`If you get a response back from the `Client` **and** `Server`, you’re good
    to go. If you are using Linux and get an error response from the Server component,
    try the command again with `sudo` in front of it: `sudo docker version`. If it
    works with `sudo` you will need to add your user account to the local `docker`
    group, or prefix the remainder of the commands in the book with `sudo`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “如果您从`Client`和`Server`那里得到了响应，那就可以继续了。如果您使用Linux并且从服务器组件那里得到了错误响应，请尝试在命令前加上`sudo`再次运行命令：`sudo
    docker version`。如果使用`sudo`可以正常工作，您需要将您的用户帐户添加到本地`docker`组，或者在本书的其余命令前加上`sudo`。
- en: Images
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 图像
- en: It’s useful to think of a Docker image as an object that contains an OS filesystem
    and an application. If you work in operations, it’s like a virtual machine template.
    A virtual machine template is essentially a stopped virtual machine. In the Docker
    world, an image is effectively a stopped container. If you’re a developer, you
    can think of an image as a *class*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将Docker图像视为包含操作系统文件系统和应用程序的对象是很有用的。如果您在运营中工作，这就像一个虚拟机模板。虚拟机模板本质上是一个已停止的虚拟机。在Docker世界中，图像实际上是一个已停止的容器。如果您是开发人员，您可以将图像视为*类*。
- en: Run the `docker image ls` command on your Docker host.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Docker主机上运行`docker image ls`命令。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`If you are working from a freshly installed Docker host, or Play With Docker,
    you will have no images and will look like the output above.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “如果您是从新安装的Docker主机或Play With Docker上进行操作，您将没有任何图像，并且看起来像上面的输出一样。”
- en: Getting images onto your Docker host is called “pulling”. If you are following
    along with Linux, pull the `ubuntu:latest` image. If you are following along on
    Windows, pull the `microsoft/powershell:nanoserver` image.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像放入Docker主机称为“拉取”。如果您正在使用Linux，拉取`ubuntu:latest`镜像。如果您正在使用Windows，拉取`microsoft/powershell:nanoserver`镜像。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`Run the `docker image ls` command again to see the image you just pulled.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`docker image ls`命令以查看您刚刚拉取的图像。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`We’ll get into the details of where the image is stored and what’s inside
    of it in later chapters. For now, it’s enough to know that an image contains enough
    of an operating system (OS), as well as all the code and dependencies to run whatever
    application it’s designed for. The `ubuntu` image that we’ve pulled has a stripped-down
    version of the Ubuntu Linux filesystem, including a few of the common Ubuntu utilities.
    The `microsoft/powershell` image, pulled in the Windows example, contains a Windows
    Nano Server OS with PowerShell.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “我们将在后面的章节中详细介绍图像存储的位置和其中的内容。现在，知道图像包含足够的操作系统（OS）以及运行其设计用途的任何应用程序所需的所有代码和依赖关系就足够了。我们拉取的`ubuntu`图像包含精简版的Ubuntu
    Linux文件系统，包括一些常见的Ubuntu实用程序。在Windows示例中拉取的`microsoft/powershell`图像包含一个带有PowerShell的Windows
    Nano Server操作系统。”
- en: If you pull an application container such as `nginx` or `microsoft/iis`, you
    will get an image that contains some OS, as well as the code to run either `NGINX`
    or `IIS`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您拉取一个应用程序容器，比如`nginx`或`microsoft/iis`，您将获得一个包含一些操作系统以及运行`NGINX`或`IIS`的代码的镜像。
- en: It’s also worth noting that each image gets its own unique ID. When working
    with images, you can refer to them using either `IDs` or names. If you’re working
    with image ID’s, it’s usually enough just to type the first few characters of
    the ID — as long as it’s unique, Docker will know which image you mean.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，每个图像都有自己独特的ID。在使用图像时，您可以使用`ID`或名称来引用它们。如果您使用图像ID，通常只需输入ID的前几个字符就足够了——只要它是唯一的，Docker就会知道您指的是哪个图像。
- en: Containers
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 容器
- en: Now that we have an image pulled locally, we can use the `docker container run`
    command to launch a container from it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在本地拉取了一个镜像，我们可以使用`docker container run`命令从中启动一个容器。
- en: 'For Linux:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`For Windows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Look closely at the output from the previous commands. You should notice that
    the shell prompt has changed in each instance. This is because the `-it` flags
    switch your shell into the terminal of the container — you are literally inside
    of the new container!'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察前面命令的输出。您应该注意到每个实例中shell提示符已经改变。这是因为`-it`标志将您的shell切换到容器的终端 - 您实际上在新容器内部！
- en: Let’s examine that `docker container run` command. `docker container run` tells
    the Docker daemon to start a new container. The `-it` flags tell Docker to make
    the container interactive and to attach our current shell to the container’s terminal
    (we’ll get more specific about this in the chapter on containers). Next, the command
    tells Docker that we want the container to be based on the `ubuntu:latest` image
    (or the `microsoft/powershell:nanoserver` image if you’re following along with
    Windows). Finally, we tell Docker which process we want to run inside of the container.
    For the Linux example we’re running a Bash shell, for the Windows container were
    running PowerShell.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`docker container run`命令。`docker container run`告诉Docker守护程序启动一个新的容器。`-it`标志告诉Docker使容器交互，并将我们当前的shell附加到容器的终端（我们将在容器章节中更具体地讨论这一点）。接下来，命令告诉Docker我们希望容器基于`ubuntu:latest`镜像（或者如果您正在使用Windows，则基于`microsoft/powershell:nanoserver`镜像）。最后，我们告诉Docker我们希望在容器内运行哪个进程。对于Linux示例，我们正在运行Bash
    shell，对于Windows容器，我们正在运行PowerShell。
- en: Run a `ps` command from inside of the container to list all running processes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器内运行`ps`命令以列出所有运行中的进程。
- en: '**Linux example:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux示例：**'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`**Windows example:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows示例：**'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`The Linux container only has two processes:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Linux容器只有两个进程：
- en: PID 1\. This is the `/bin/bash` process that we told the container to run with
    the `docker container run` command.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PID 1。这是我们使用`docker container run`命令告诉容器运行的`/bin/bash`进程。
- en: PID 9\. This is the `ps -elf` command/process that we ran to list the running
    processes.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PID 9。这是我们运行的`ps -elf`命令/进程，用于列出运行中的进程。
- en: The presence of the `ps -elf` process in the Linux output can be a bit misleading,
    as it is a short-lived process that dies as soon as the `ps` command exits. This
    means the only long-running process inside of the container is the `/bin/bash`
    process.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux输出中`ps -elf`进程的存在可能有点误导，因为它是一个短暂的进程，一旦`ps`命令退出就会终止。这意味着容器内唯一长时间运行的进程是`/bin/bash`进程。
- en: The Windows container has a lot more going on. This is an artefact of the way
    the Windows Operating System works. However, even though the Windows container
    has a lot more processes than the Linux container, it is still a lot less than
    a regular Windows **Server**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器有更多的活动。这是Windows操作系统工作方式的产物。然而，即使Windows容器的进程比Linux容器多得多，它仍然远少于常规的Windows
    **Server**。
- en: Press `Ctrl-PQ` to exit the container without terminating it. This will land
    your shell back at the terminal of your Docker host. You can verify this by looking
    at your shell prompt.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按`Ctrl-PQ`退出容器而不终止它。这将使您的shell回到Docker主机的终端。您可以通过查看shell提示符来验证这一点。
- en: Now that you are back at the shell prompt of your Docker host, run the `ps`
    command again.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您回到Docker主机的shell提示符，再次运行`ps`命令。
- en: '**Linux example:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux示例：**'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`**Windows example:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows示例：**'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Notice how many more processes are running on your Docker host compared to
    their respective containers. Windows containers run far fewer processes than Windows
    hosts, and Linux containers run far less than Linux hosts.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您的Docker主机上运行的进程比它们各自的容器多得多。Windows容器运行的进程比Windows主机少得多，而Linux容器运行的进程比Linux主机少得多。
- en: In a previous step, you pressed `Ctrl-PQ` to exit from the container. Doing
    this from inside of a container will exit you from the container without killing
    it. You can see all running containers on your system using the `docker container
    ls` command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的步骤中，你按下`Ctrl-PQ`退出了容器。在容器内部这样做会退出容器但不会杀死它。你可以使用`docker container ls`命令查看系统上所有正在运行的容器。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`The output above shows a single running container. This is the container that
    you created earlier. The presence of the container in this output proves that
    it’s still running. You can also see that it was created 7 minutes ago and has
    been running for 7 minutes.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示了一个正在运行的容器。这是你之前创建的容器。该输出中容器的存在证明它仍在运行。你还可以看到它是在7分钟前创建的，并且已经运行了7分钟。
- en: Attaching to running containers
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 附加到正在运行的容器
- en: You can attach your shell to the terminal of a running container with the `docker
    container exec` command. As the container from the previous steps is still running,
    let’s make a new connection to it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`docker container exec`命令将你的shell附加到正在运行的容器的终端上。由于之前的步骤中的容器仍在运行，让我们重新连接到它。
- en: '**Linux example:**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux示例：**'
- en: This example references a container called “vigilant_borg”. The name of your
    container will be different, so remember to substitute “vigilant_borg” with the
    name or ID of the container running on your Docker host.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子引用了一个名为“vigilant_borg”的容器。你的容器的名称将会不同，所以记得用你的Docker主机上正在运行的容器的名称或ID来替换“vigilant_borg”。
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`**Windows example:**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows示例：**'
- en: This example references a container called “pensive_hamilton”. The name of your
    container will be different, so remember to substitute “pensive_hamilton” with
    the name or ID of the container running on your Docker host.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子引用了一个名为“pensive_hamilton”的容器。你的容器的名称将会不同，所以记得用你的Docker主机上正在运行的容器的名称或ID来替换“pensive_hamilton”。
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Notice that your shell prompt has changed again. You are logged in to the
    container again.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`注意你的shell提示符再次发生了变化。你再次登录到了容器中。'
- en: 'The format of the `docker container exec` command is: `docker container exec
    <options> <container-name or container-id> <command/app>`. In our example, we
    used the `-it` options to attach our shell to the container’s shell. We referenced
    the container by name, and told it to run the bash shell (PowerShell in the Windows
    example). We could easily have referenced the container by its hex ID.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker container exec`命令的格式是：`docker container exec <options> <container-name
    or container-id> <command/app>`。在我们的例子中，我们使用了`-it`选项将我们的shell附加到容器的shell上。我们通过名称引用了容器，并告诉它运行bash
    shell（在Windows示例中是PowerShell）。我们也可以通过它的十六进制ID来引用容器。'
- en: Exit the container again by pressing `Ctrl-PQ`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按下`Ctrl-PQ`退出容器。
- en: Your shell prompt should be back to your Docker host.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的shell提示符应该回到你的Docker主机。
- en: Run the `docker container ls` command again to verify that your container is
    still running.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行`docker container ls`命令来验证你的容器是否仍在运行。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`Stop the container and kill it using the `docker container stop` and `docker
    container rm` commands. Remember to substitute the names/IDs of your own containers.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker container stop`和`docker container rm`命令停止并删除容器。记得用你自己容器的名称/ID来替换。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`Verify that the container was successfully deleted by running the `docker
    container ls` command with the `-a` flag. Adding `-a` tells Docker to list all
    containers, even those in the stopped state.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用带有`-a`标志的`docker container ls`命令来验证容器是否成功删除。添加`-a`告诉Docker列出所有容器，即使是处于停止状态的。
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`### The Dev Perspective'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`### 开发者视角'
- en: Containers are all about the apps!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 容器都是关于应用程序的！
- en: In this section, we’ll clone an app from a Git repo, inspect its Dockerfile,
    containerize it, and run it as a container.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将从Git仓库克隆一个应用程序，检查它的Dockerfile，将其容器化，并作为一个容器运行。
- en: 'The Linux app can be cloned from: https://github.com/nigelpoulton/psweb.git'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Linux应用程序可以从以下位置克隆：https://github.com/nigelpoulton/psweb.git
- en: 'The Windows app can be cloned from: https://github.com/nigelpoulton/dotnet-docker-samples.git'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Windows应用程序可以从以下位置克隆：https://github.com/nigelpoulton/dotnet-docker-samples.git
- en: The rest of this section will walk you through the Linux example. However, both
    examples are containerizing simple web apps, so the process is the same. Where
    there are differences in the Windows example we will highlight them to help you
    follow along.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分将带你完成Linux示例。然而，两个示例都是将简单的Web应用程序容器化，所以过程是一样的。在Windows示例中有差异的地方，我们将突出显示，以帮助你跟上。
- en: Run all of the following commands from a terminal on your Docker host.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请从Docker主机上的终端运行以下所有命令。
- en: Clone the repo locally. This will pull the application code to your local Docker
    host ready for you to containerize it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地克隆存储库。这将把应用程序代码拉到您的本地Docker主机，准备让您将其容器化。
- en: Be sure to substitute the following repo with the Windows repo if you are following
    along with the Windows example.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在按照Windows示例进行操作，请确保用Windows示例替换以下存储库。
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`Change directory into the cloned repo’s directory and list its contents.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: “切换到克隆存储库的目录并列出其内容。
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`For the Windows example you should `cd` into the `dotnet-docker-samples\aspnetapp`
    directory.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “对于Windows示例，您应该`cd`到`dotnet-docker-samples\aspnetapp`目录中。
- en: The Linux example is a simple nodejs web app. The Windows example is a simple
    ASP.NET Core web app.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Linux示例是一个简单的nodejs web应用程序。Windows示例是一个简单的ASP.NET Core web应用程序。
- en: Both Git repos contain a file called `Dockerfile`. A Dockerfile is a plain-text
    document describing how to build an app into a Docker image.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 两个Git存储库都包含一个名为`Dockerfile`的文件。Dockerfile是一个描述如何将应用程序构建成Docker镜像的纯文本文档。
- en: List the contents of the Dockerfile.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列出Dockerfile的内容。
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`The contents of the Dockerfile in the Windows example are different. However,
    this isn’t important at this stage. We’ll cover Dockerfiles in more detail later
    in the book. For now, it’s enough to understand that each line represents an instruction
    that is used to build an image.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “Windows示例中的Dockerfile的内容是不同的。然而，在这个阶段这并不重要。我们将在本书的后面更详细地介绍Dockerfile。现在，理解每一行代表一个指令，用于构建一个镜像就足够了。”
- en: At this point we have pulled some application code from a remote Git repo. We
    also have a Dockerfile containing instructions on how to build the app into a
    Docker image.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经从远程Git存储库中拉取了一些应用程序代码。我们还有一个包含如何将应用程序构建成Docker镜像的Dockerfile中的指令。
- en: Use the `docker image build` command to create a new image using the instructions
    in the Dockerfile. This example creates a new Docker image called `test:latest`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker image build`命令根据Dockerfile中的指令创建一个新的镜像。这个示例创建了一个名为`test:latest`的新Docker镜像。
- en: Be sure to perform this command from within the directory containing the app
    code and Dockerfile.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在包含应用程序代码和Dockerfile的目录中执行此命令。
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`> **Note:** It may take a long time for the build to finish in the Windows
    example. This is because of the size and complexity of the image being pulled.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “> **注意：**在Windows示例中，构建可能需要很长时间才能完成。这是因为正在拉取的镜像的大小和复杂性。
- en: Once the build is complete, check to make sure that the new `test:latest` image
    exists on your host.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，请检查新的`test:latest`镜像是否存在于您的主机上。
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`You now have a newly-built Docker image with the app inside.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个新构建的Docker镜像，里面有这个应用程序。
- en: Run a container from the image and test the app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从该镜像运行一个容器并测试该应用程序。
- en: '**Linux example:**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Linux示例：**'
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`Open a web browser and navigate to the DNS name or IP address of the Docker
    host that you are running the container from, and point it to port 8080\. You
    will see the following web page.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “打开一个Web浏览器，导航到运行容器的Docker主机的DNS名称或IP地址，并将其指向端口8080。您将看到以下网页。
- en: If you are following along with Docker for Windows or Docker for Mac, you will
    be able to use `localhost:8080` or `127.0.0.1:8080`. If you’re following along
    on Play with Docker, you will be able to click the `8080` hyperlink above the
    terminal screen.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Docker for Windows或Docker for Mac进行操作，您将能够使用`localhost:8080`或`127.0.0.1:8080`。如果您正在使用Play
    with Docker进行操作，您将能够点击终端屏幕上方的`8080`超链接。
- en: '![Figure 4.1](images/figure4-1.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1](images/figure4-1.png)'
- en: Figure 4.1
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1
- en: '**Windows example:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows示例：**'
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`Open a web browser and navigate to the DNS name or IP address of the Docker
    host that you are running the container from, and point it to port 8080\. You
    will see the following web page.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器，导航到正在运行容器的Docker主机的DNS名称或IP地址，并将其指向端口8080。您将看到以下网页。
- en: The same rules apply if you’re following along with Docker for Windows or Play
    with Docker.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Docker for Windows或Play with Docker进行操作，同样的规则也适用。
- en: '![Figure 4.2](images/figure4-2.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2](images/figure4-2.png)'
- en: Figure 4.2
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2
- en: Well done. You’ve taken some application code from a remote Git repo and built
    it into a Docker image. You then ran a container from it. We call this “containerizing
    an app”.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。您已经从远程Git存储库中获取了一些应用程序代码，并将其构建成了一个Docker镜像。然后您从中运行了一个容器。我们称之为“容器化应用程序”。
- en: Chapter Summary
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: In the Op section of the chapter you; downloaded a Docker image, launched a
    container from it, logged into the container, executed a command inside of it,
    and then stopped and deleted the container.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的Op部分中，您下载了一个Docker镜像，从中启动了一个容器，登录到了容器中，执行了其中的一个命令，然后停止并删除了容器。
- en: In the Dev section, you containerized a simple application by pulling some source
    code from GitHub and building it into an image using instructions in a Dockerfile.
    You then ran the containerized app.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dev部分，您通过从GitHub拉取一些源代码并使用Dockerfile中的指令将其构建成一个镜像，将一个简单的应用程序容器化。然后您运行了容器化的应用程序。
- en: This *big picture* view should help you with the up-coming chapters where we
    will dig deeper into images and containers.[PRE23]
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个*大局观*应该会帮助您理解接下来的章节，我们将在其中更深入地了解镜像和容器。[PRE23]
