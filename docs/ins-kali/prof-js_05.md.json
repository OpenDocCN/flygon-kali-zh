["```js\n  \"dependencies\": {\n\u00a0\u00a0\u00a0\"express\": \"^4.16.4\",\n\u00a0\u00a0\u00a0\"express-validator\": \"^5.3.1\",\n\u00a0\u00a0\u00a0\"jwt-simple\": \"^0.5.6\",\n\u00a0\u00a0\u00a0\"mongodb\": \"^3.2.3\"\n  }\n```", "```js\nreturn toString.call(arr) == '[object Array]';\n```", "```js\nmodule.exports = router;\n```", "```js\nlet light = require('./routes/devices/light');\n```", "```js\nconst express = require('express');\n```", "```js\nimport React from 'react';\n```", "```js\nimport { Button } from 'reactstrap';\n```", "```js\nimport { Button, Dropdown, Card } from 'reactstrap';\n```", "```js\n    let light = {};\n    light.state = true;\n    light.level = 0.5;\n    var log = function () {\n    \u00a0\u00a0console.log(light);\n    };\n    export default log;\n    ```", "```js\n    import light from './light.js';\n    ```", "```js\n    light();\n    ```", "```js\nlet myString = \"hello\";\nconsole.log(myString.toUpperCase()); // returns HELLO\nconsole.log(myString.length); // returns 5\n```", "```js\n5.toString(); // this doesn't work because 5 is a primitive integer\nlet num = 5;\nnum.toString(); // this works because num is a Number object\n```", "```js\nlet myString = \"hello\";\n```", "```js\nNumber.prototype.functionName = function () {\n  console.log(\"do something here\");\n}\n```", "```js\n    Number.prototype.double = function () {\n      return this.valueOf()*2;\n    }\n    ```", "```js\n    Number.prototype.square = function () {\n      return this.valueOf()*this.valueOf();\n    }\n    ```", "```js\n    Number.prototype.fibonacci = function () {\n      function iterator(a, b, n) {\n    \u00a0\u00a0\u00a0return n == 0n ? b : iterator((a+b), a, (n-1n))\n      }\n      function fibonacci(n) {\n    \u00a0\u00a0\u00a0n = BigInt(n);\n    \u00a0\u00a0\u00a0return iterator(1n, 0n, n);\n      }\n      return fibonacci(this.valueOf());\n    }\n    ```", "```js\n    Number.prototype.factorial = function () {\n      factorial = (n) => {\n    \u00a0\u00a0\u00a0n = BigInt(n);\n    \u00a0\u00a0\u00a0return (n>1) ? n * factorial(n-1n) : n;\n      }\n      return factorial(this.valueOf());\n    }\n    ```", "```js\n    let n = 100;\n    console.log(\n      \"for number \" + n +\"\\n\",\n      \"double is \" + n.double() + \"\\n\",\n      \"square is \" + n.square() + \"\\n\",\n      \"fibonacci is \" + n.fibonacci() + \"\\n\",\n      \"factorial is \" + n.factorial() + \"\\n\"\n    );\n    ```", "```js\n    node number.js\n    ```", "```js\nfunction Vehicle(name, color, sound) {\n\u00a0\u00a0\u00a0this.name = name;\n\u00a0\u00a0\u00a0this.color = color;\n\u00a0\u00a0\u00a0this.sound = sound;\n\u00a0\u00a0\u00a0this.makeSound = function() {console.log(this.sound);};\n}\nvar car = new Vehicle(\"car\", \"red\", \"beep\");\ncar.makeSound();\n```", "```js\nclass Vehicle {\n\u00a0\u00a0\u00a0constructor(name, color, sound) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 this.name = name;\n\u00a0\u00a0\u00a0\u00a0\u00a0 this.color = color;\n\u00a0\u00a0\u00a0\u00a0\u00a0 this.sound = sound;\n\u00a0\u00a0\u00a0\u00a0\u00a0 this.makeSound = () => console.log(this.sound);\n\u00a0\u00a0\u00a0}\n}\nconst car = new Vehicle(\"car\", \"red\", \"beep\");\ncar.makeSound();\n```", "```js\nlet list = [\"car\", \"boat\", \"plane\"];\nlet answer = list.includes(\"car\") ? \"yes\" : \"no\";\nconsole.log(answer);\n```", "```js\nclass Apple {\n  constructor(color, weight) {\n\u00a0\u00a0\u00a0this.color = color;\n\u00a0\u00a0\u00a0this.weight = weight;\n  }\n}\n```", "```js\n  this.birthdate = Date.now();\n```", "```js\n  this.checkIfRotten();\n```", "```js\ncheckIfRotten() {\n  If (Math.floor(Math.random() * Math.floor(10)) == 0) {\n\u00a0\u00a0\u00a0this.isRotten = true;\n  } else {\n\u00a0\u00a0\u00a0this.isRotten = false;\n  }\n}\n```", "```js\n    class Light  {\n    }\n    ```", "```js\n    class Light  {\n      constructor(state, brightness) {\n    \u00a0\u00a0\u00a0// Check that inputs are the right types\n    \u00a0\u00a0\u00a0this.state = this.checkStateFormat(state);\n    \u00a0\u00a0\u00a0this.brightness = this.checkBrightnessFormat(brightness);\n    \u00a0\u00a0\u00a0this.createdAt = Date.now();\n      }\n    }\n    ```", "```js\n      checkStateFormat(state) {\n    \u00a0\u00a0\u00a0// state must be true or false\n    \u00a0\u00a0\u00a0if(state) {\n    \u00a0\u00a0\u00a0\u00a0return true;\n    \u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0return false;\n    \u00a0\u00a0\u00a0}\n      }\n      checkBrightnessFormat(brightness) {\n    \u00a0\u00a0\u00a0// brightness must be a number between 0.01 and 1\n    \u00a0\u00a0\u00a0if(isNaN(brightness)) {\n    \u00a0\u00a0\u00a0\u00a0brightness = 1;\n    \u00a0\u00a0\u00a0} else if(brightness > 1) {\n    \u00a0\u00a0\u00a0\u00a0brightness = 1;\n    \u00a0\u00a0\u00a0} else if(brightness < 0.01) {\n    \u00a0\u00a0\u00a0\u00a0brightness = 0.01;\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return brightness;\n      }\n    ```", "```js\n      toggle() {\n    \u00a0\u00a0\u00a0this.state = !this.state;\n      }\n      test() {\n    \u00a0\u00a0\u00a0alert(\"state is \" + this.state);\n      }\n    ```", "```js\n    export default Light;\n    ```", "```js\n    let light = new Light(true, 0.5);\n    ```", "```js\n    // Set image based on light state\n    bulb.src = light.state ? onImage : offImage;\n    // Set opacity based on brightness\n    bulb.style.opacity = light.brightness;\n    // Set slider value to brightness\n    slider.value = light.brightness;\n    bulb.onclick = function () {\n      light.toggle();\n      bulb.src = light.state ? onImage : offImage;\n    }\n    slider.onchange = function () {\n      light.brightness = this.value;\n      bulb.style.opacity = light.brightness;\n    }\n    ```", "```js\nmyLight = new Light();\n```", "```js\n  constructor(state=false, brightness=100) {\n```", "```js\n  constructor(state, brightness) {\n\u00a0\u00a0\u00a0// Check that input has the right format\n\u00a0\u00a0\u00a0this.brightness = this.checkBrightnessFormat(brightness);\n  }\n```", "```js\nlet light = new Light();\nlight.brightness = \"hello\";\n```", "```js\nvar map = new WeakMap();\nvar light = {state: true, brightness: 100};\nmap.set(light, \"kitchen light\");\nconsole.log(map.get(light));\n```", "```js\nlet light2 = {state: true, brightness: 100};\nmap.set(light2, \"bedroom light\");\n// above has not changed kitchen light reference\nconsole.log(map.get(light));\n```", "```js\nlight.state = false;\n// reference does not change\nconsole.log(map.get(light));\n```", "```js\nlight = null;\n// value will not be returned here\nconsole.log(map.get(light));\n```", "```js\n    let privateVars = new WeakMap();\n    ```", "```js\n    constructor(state, brightness) { \n      // Parse values\n      state = this.checkStateFormat(state);\n      brightness = this.checkBrightnessFormat(brightness);\n      // Create info object \n      let info = {\n    \u00a0\u00a0\u00a0\"state\": state,\n    \u00a0\u00a0\u00a0\"brightness\": brightness,\n    \u00a0\u00a0\u00a0\"createdAt\": Date.now()\n      };\n    // Save info into privateVars \n      privateVars.set(this, info); \n    }\n    ```", "```js\n    toggle() { \n      let info = privateVars.get(this); \n      info.state = !info.state;\n      privateVars.set(this, info); \n    }\n    ```", "```js\n    test() { \n      let info = privateVars.get(this); \n      alert(\"state is \" + privateVars.get(this).state);\n    }\n    ```", "```js\n    setState(state) {\n      let info = privateVars.get(this);\n      info.state = checkStateFormat(state); \n      privateVars.set(this, info); \n    }\n    ```", "```js\n    getState() {\n      let info = privateVars.get(this); \n      return info.state;\n    }\n    ```", "```js\n    setBrightness(brightness) { \n      let info = privateVars.get(this);\n      info.brightness = checkBrightnessFormat(brightness);\n      privateVars.set(this, info);\n    }\n    getBrightness() { \n      let info = privateVars.get(this);\n      return info.brightness;\n    }\n    ```", "```js\n    // Set image based on light state\n    bulb.src = light.getState() ? onImage : offImage;\n    // Set opacity based on brightness\n    bulb.style.opacity = light.getBrightness();\n    // Set slider value to brightness\n    slider.value = light.getBrightness();\n    bulb.onclick = function () {\n      light.toggle();\n      bulb.src = light.getState() ? onImage : offImage;\n    }\n    slider.onchange = function () {\n      light.setBrightness(this.value);\n      bulb.style.opacity = light.getBrightness();\n    }\n    ```", "```js\nconsole.log(light.brightness);\n// will return undefined\n```", "```js\nsetBrightness(brightness) {\n  let info = privateVars.get(this);\n  info.brightness = checkBrightnessFormat(state);\n  privateVars.set(this, info);\n}\ngetBrightness() {\n  let info = privateVars.get(this);\n  return info.brightness;\n}\n```", "```js\n    import Light from './light.js';\n    ```", "```js\n    let privateVars = new WeakMap();\n    class ColorLight extends Light {\n    }\n    ```", "```js\n    class ColorLight extends Light {\n      constructor(state=false, brightness=100, color=\"ffffff\") {\n    \u00a0\u00a0\u00a0super(state, brightness);\n    \u00a0\u00a0\u00a0// Create info object\n    \u00a0\u00a0\u00a0let info = {\"color\": this.checkColorFormat(color)};\n    \u00a0\u00a0\u00a0// Save info into privateVars\n    \u00a0\u00a0\u00a0privateVars.set(this, info);\n      }\n    }\n    ```", "```js\n      checkColorFormat(color) {\n    \u00a0\u00a0\u00a0// color must be a valid hex color\n    \u00a0\u00a0\u00a0var isHexColor  = /^#[0-9A-F]{6}$/i.test('#'+color);\n    \u00a0\u00a0\u00a0if(!isHexColor) {\n    \u00a0\u00a0\u00a0\u00a0// if invalid make white\n    \u00a0\u00a0\u00a0\u00a0color = \"ffffff\";\n    \u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0return color;\n      }\n    ```", "```js\n      getColor() {\n    \u00a0\u00a0\u00a0let info = privateVars.get(this);\n    \u00a0\u00a0\u00a0return info.color;\n      }\n      setColor(color) {\n    \u00a0\u00a0\u00a0let info = privateVars.get(this);\n    \u00a0\u00a0\u00a0info.color = this.checkColorFormat(color);\n    \u00a0\u00a0\u00a0privateVars.set(this, info);\n      }\n    ```", "```js\n    export default ColorLight;\n    ```", "```js\n    import ColorLight from './colorLight.js';\n    import changeColor from './__extra__/changeColor.js';\n    ```", "```js\n    let light = new ColorLight(true, 1, \"61AD85\");\n    ```", "```js\n    // Update image color\n    changeColor(light.getColor());\n    ```", "```js\n  test() {\n\u00a0\u00a0\u00a0let info = privateVars.get(this); \n\u00a0\u00a0\u00a0alert(\"state is \" + privateVars.get(this).state);\n  }\nThen all we have to do is create a new function in js/colorLight.js which has the same name, and replace state with color:\n  test() { \n\u00a0\u00a0\u00a0let info = privateVars.get(this); \n\u00a0\u00a0\u00a0alert(\"color is \" + privateVars.get(this).color);\n  }\n```", "```js\n    let onImage = \"images/bulb_on.png\";\n    let offImage = \"images/bulb_off.png\";\n    ```", "```js\n    \u00a0\u00a0\u00a0// Create html element\n    \u00a0\u00a0\u00a0let div = document.createElement(\"div\");\n    \u00a0\u00a0\u00a0let img = document.createElement(\"img\");\n    \u00a0\u00a0\u00a0let slider = document.createElement(\"input\");\n    \u00a0\u00a0\u00a0// Save reference to element as private variable\n    \u00a0\u00a0\u00a0info.div = div;\n    \u00a0\u00a0\u00a0info.img = img;\n    \u00a0\u00a0\u00a0info.slider = slider;\n    \u00a0\u00a0\u00a0this.createDiv(div, img, slider, state, brightness);\n    ```", "```js\n      createDiv(div, img, slider, state, brightness) {\n    \u00a0\u00a0\u00a0// make it so we can access this in a lower scope\n    \u00a0\u00a0\u00a0let that = this;\n    \u00a0\u00a0\u00a0// modify html\n    \u00a0\u00a0\u00a0div.style.width = \"200px\";\n    \u00a0\u00a0\u00a0div.style.float = \"left\";\n    \u00a0\u00a0\u00a0img.onclick = function () { that.toggle() };\n    \u00a0\u00a0\u00a0img.width = \"200\";\n    \u00a0\u00a0\u00a0img.src = state ? onImage : offImage;\n    \u00a0\u00a0\u00a0img.style.opacity = brightness;\n    \u00a0\u00a0\u00a0slider.onchange = function () { that.setBrightness(this.value) };\n    \u00a0\u00a0\u00a0slider.type = \"range\";\n    \u00a0\u00a0\u00a0slider.min = 0.01;\n    \u00a0\u00a0\u00a0slider.max = 1;\n    \u00a0\u00a0\u00a0slider.step = 0.01;\n    \u00a0\u00a0\u00a0slider.value = brightness;\n    \u00a0\u00a0\u00a0div.appendChild(img);\n    \u00a0\u00a0\u00a0div.appendChild(slider);\n    \u00a0\u00a0\u00a0// append to document\n    \u00a0\u00a0\u00a0document.body.appendChild(div);\n      }\n    ```", "```js\n    info.img.src = info.state ? onImage : offImage;\n    ```", "```js\n    info.img.src = info.state ? onImage : offImage;\n    ```", "```js\n    info.img.style.opacity = brightness;\n    ```", "```js\n      getImg() {\n    \u00a0\u00a0\u00a0let info = privateVars.get(this);\n    \u00a0\u00a0\u00a0return info.img;\n      }\n    ```", "```js\n    import changeLight from './__extra__/changeColor.js';\n    ```", "```js\n    \u00a0\u00a0\u00a0let img = this.getImg();\n    \u00a0\u00a0\u00a0img.style.webkitFilter = changeLight(color);\n    ```", "```js\n    import ColorLight from './colorLight.js';\n    let slider = document.getElementById(\"brightnessSlider\");\n    let color = document.getElementById(\"color\");\n    let button = document.getElementById(\"build\");\n    button.onclick = function () {\n      new ColorLight(true, slider.value, color.value);\n    }\n    ```", "```js\n      <div style=\"position: 'fixed', top: 0, left: 0\">\n    \u00a0\u00a0\u00a0<input type=\"color\" id=\"color\" name=\"head\" value=\"#e66465\">\n    \u00a0\u00a0\u00a0<input id=\"brightnessSlider\" min=\"0.01\" max=\"1\" step=\"0.01\" type=\"range\"/>\n    \u00a0\u00a0\u00a0<button id=\"build\">build</button>\n      </div>\n    ```", "```js\ncd ~/projects/helloWorld\nnpm link\n```", "```js\ncd ~/projects/otherProject\nnpm link helloWorld\n```", "```js\nconst express = require('express');\n```", "```js\nimport express from 'express';\n```", "```js\nimport React, { Component } from 'react';\nclass Button extends Component {\n  render() {\n\u00a0\u00a0\u00a0// ...\n  }\n}\nexport default Button; // Don't forget to use export default!\n```", "```js\nconst path = require(\"path\");\nmodule.exports = {\n  mode: 'development',\n  entry: \"./src/js/viewer.js\",\n  output: {\n\u00a0\u00a0\u00a0path: path.resolve(__dirname, \"build\"),\n\u00a0\u00a0\u00a0filename: \"bundle.js\"\n  }\n};\n```", "```js\n    mkdir src build\n    ```", "```js\n    mv images index.html js src\n    ```", "```js\n    npm install --save-dev webpack webpack-cli @babel/core @babel/cli @babel/preset-env\n    ```", "```js\n    {\n      \"presets\": [\"@babel/preset-env\"]\n    }\n    ```", "```js\n    const path = require(\"path\");\n    module.exports = {\n      mode: 'development',\n      entry: \"./build/js/viewer.js\",\n      output: {\n    \u00a0\u00a0\u00a0path: path.resolve(__dirname, \"build\"),\n    \u00a0\u00a0\u00a0filename: \"bundle.js\"\n      }\n    };\n    ```", "```js\n      \"scripts\": {\n    \u00a0\u00a0\u00a0\"start\": \"ws --directory build\",\n    \u00a0\u00a0\u00a0\"build\": \"babel src -d build && cp -r src/index.html src/images build && webpack --config webpack.config.js\"\n      },\n    ```", "```js\n    <script src=\"bundle.js\"></script>\n    ```"]