["```cs\n     mongod -dbpath D:MongoTask\n```", "```cs\npublic class HomeController : Controller \n{ \n    public IActionResult Index() \n    { \n        return View(); \n    } \n\n    public IActionResult About() \n    { \n        ViewData[\"Message\"] = \"Your application description   \n        page.\"; \n\n        return View(); \n    } \n\n    public IActionResult Contact() \n    { \n        ViewData[\"Message\"] = \"Your contact page.\"; \n\n        return View(); \n    } \n\n    public IActionResult Error() \n    { \n        return View(new ErrorViewModel { RequestId = \n         Activity.Current?.Id ?? HttpContext.TraceIdentifier }); \n    } \n} \n```", "```cs\npublic HomeController() \n{ \n    var mclient = new MongoClient(); \n} \n```", "```cs\n{ \n  \"Logging\": { \n    \"IncludeScopes\": false, \n    \"LogLevel\": { \n      \"Default\": \"Warning\" \n    } \n  } \n} \n```", "```cs\n{ \n  \"MongoConnection\": { \n    \"ConnectionString\": \"mongodb://localhost:27017\", \n    \"Database\": \"TaskLogger\" \n  }, \n  \"Logging\": { \n    \"IncludeScopes\": false, \n    \"LogLevel\": { \n      \"Default\": \"Warning\" \n    } \n  } \n}\n```", "```cs\npublic class Settings \n{ \n    public string ConnectionString { get; set; } \n    public string Database { get; set; } \n} \n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n    services.AddMvc(); \n\n    services.Configure<Settings>(Options => \n    { \n        Options.ConnectionString = Configuration.GetSection\n          (\"MongoConnection:ConnectionString\").Value; \n        Options.Database = Configuration.GetSection\n         (\"MongoConnection:Database\").Value; \n    }); \n\n} \n```", "```cs\npublic HomeController(IOptions<Settings> settings) \n{             \n    var mclient = new \n     MongoClient(settings.Value.ConnectionString);     \n} \n```", "```cs\nIMongoDatabase _database; \n\npublic HomeController(IOptions<Settings> settings) \n{             \n    var mclient = new \n     MongoClient(settings.Value.ConnectionString);             \n      _database = mclient.GetDatabase(settings.Value.Database); \n} \n\npublic IActionResult Index() \n{ \n    return Json(_database.Client.Cluster.Description); \n}\n```", "```cs\npublic class MongoDBRepository \n{ \n    public readonly IMongoDatabase Database; \n\n    public MongoDBRepository(IOptions<Settings> settings) \n    { \n        try \n        { \n            var mclient = new \n             MongoClient(settings.Value.ConnectionString); \n            Database = \n             mclient.GetDatabase(settings.Value.Database); \n        } \n        catch (Exception ex) \n        { \n            throw new Exception(\"There was a problem connecting \n             to the MongoDB database\", ex); \n        } \n    } \n} \n```", "```cs\npublic MongoDBRepository mongoDb; \n\npublic HomeController(IOptions<Settings> settings) \n{             \n    mongoDb =  new MongoDBRepository(settings); \n} \npublic IActionResult Index() \n{ \n    return Json(mongoDb.Database.Client.Cluster.Description); \n} \n```", "```cs\npublic class WorkItem \n{ \n    public ObjectId Id { get; set; } \n    public string Title { get; set; } \n    public string Description { get; set; } \n    public int Severity { get; set; } \n    public string WorkItemType { get; set; } \n    public string AssignedTo { get; set; } \n}\n```", "```cs\npublic IMongoCollection<WorkItem> WorkItems \n{ \n    get \n    { \n        return Database.GetCollection<WorkItem>(\"workitem\"); \n    } \n} \n```", "```cs\npublic IMongoCollection<WorkItem> WorkItems => Database.GetCollection<WorkItem>(\"workitem\"); \n```", "```cs\npublic interface IWorkItemService \n{ \n    IEnumerable<WorkItem> GetAllWorkItems(); \n}\n```", "```cs\npublic class WorkItemService : IWorkItemService \n{ \n    public IEnumerable<WorkItem> GetAllWorkItems() \n    { \n        throw new System.NotImplementedException(); \n    } \n}\n```", "```cs\npublic class WorkItemService : IWorkItemService \n{ \n    private readonly MongoDBRepository repository; \n\n    public WorkItemService(IOptions<Settings> settings) \n    { \n        repository = new MongoDBRepository(settings); \n    } \n\n    public IEnumerable<WorkItem> GetAllWorkItems() \n    { \n        return repository.WorkItems.Find(x => true).ToList(); \n    } \n} \n```", "```cs\nservices.AddScoped<IWorkItemService, WorkItemService>(); \n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n    services.AddMvc(); \n\n    services.Configure<Settings>(Options => \n    { \n        Options.ConnectionString = Configuration.GetSection(\"MongoConnection:ConnectionString\").Value; \n        Options.Database = Configuration.GetSection(\"MongoConnection:Database\").Value; \n    }); \n\n    services.AddScoped<IWorkItemService, WorkItemService>(); \n} \n```", "```cs\n@model IEnumerable<BugTracker.Models.WorkItem> \n\n@{ \n    ViewData[\"Title\"] = \"Work Item Listings\"; \n} \n```", "```cs\nprivate readonly IWorkItemService _workItemService; \n\npublic HomeController(IWorkItemService workItemService) \n{ \n    _workItemService = workItemService; \n\n} \n\npublic IActionResult Index() \n{ \n    var workItems = _workItemService.GetAllWorkItems(); \n    return View(workItems); \n} \n```", "```cs\npublic class AddWorkItem \n{ \n    public string Title { get; set; } \n    public string Description { get; set; } \n    public int Severity { get; set; } \n    public string WorkItemType { get; set; } \n    public string AssignedTo { get; set; } \n}\n```", "```cs\n<div class=\"row\"> \n  <div class=\"col-md-4\"> \n     <form asp-action=\"CreateWorkItem\"> \n         <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div> @*Rest of code omitted for brevity*@ \n```", "```cs\npublic interface IWorkItemService \n{ \n    IEnumerable<WorkItem> GetAllWorkItems(); \n    void InsertWorkItem(WorkItem workItem); \n} \n```", "```cs\nprivate readonly MongoDBRepository repository; \n\npublic WorkItemService(IOptions<Settings> settings) \n{ \n    repository = new MongoDBRepository(settings); \n} \n\npublic IEnumerable<WorkItem> GetAllWorkItems() \n{ \n    return repository.WorkItems.Find(x => true).ToList(); \n} \n\npublic void InsertWorkItem(WorkItem workItem) \n{ \n    throw new System.NotImplementedException(); \n} \n```", "```cs\npublic void InsertWorkItem(WorkItem workItem) \n{ \n\n} \n```", "```cs\npublic class WorkItem \n{ \n    public ObjectId Id { get; set; } \n    public string Title { get; set; } \n    public string Description { get; set; } \n    public int Severity { get; set; } \n    public string WorkItemType { get; set; } \n    public string AssignedTo { get; set; } \n\n    public WorkItem() \n    { \n\n    } \n\n    public WorkItem(AddWorkItem addWorkItem) \n    { \n        Title = addWorkItem.Title; \n        Description = addWorkItem.Description; \n        Severity = addWorkItem.Severity; \n        WorkItemType = addWorkItem.WorkItemType; \n        AssignedTo = addWorkItem.AssignedTo; \n    } \n} \n```", "```cs\nprivate readonly IWorkItemService _workItemService; \n\npublic AddWorkItemController(IWorkItemService workItemService) \n{ \n    _workItemService = workItemService; \n} \n\npublic ActionResult AddItem() \n{ \n    return View(); \n} \n\n[HttpPost] \npublic ActionResult CreateWorkItem(AddWorkItem addWorkItem) \n{ \n    var workItem = new WorkItem(addWorkItem); \n    _workItemService.InsertWorkItem(workItem); \n    return RedirectToAction(\"Index\", \"Home\"); \n} \n```", "```cs\n\npublic ActionResult AddWorkItem() \n{ \n    return RedirectToAction(\"AddItem\", \"AddWorkItem\"); \n} \nYour HomeController code will now look as follows: \nprivate readonly IWorkItemService _workItemService; \n\npublic HomeController(IWorkItemService workItemService) \n{ \n    _workItemService = workItemService;             \n} \n\npublic IActionResult Index() \n{ \n    var workItems = _workItemService.GetAllWorkItems(); \n    return View(workItems); \n} \n\npublic ActionResult AddWorkItem() \n{ \n    return RedirectToAction(\"AddItem\", \"AddWorkItem\"); \n} \n```", "```cs\n@if (Model.Count() == 0)\n@if (Model.Count() == 0)\n{\n    <tr>\n        <td colspan=\"6\">There are no Work Items in BugTracker. @Html.ActionLink(\"Add your first Work Item\", \"AddWorkItem\") now.</td>\n    </tr>\n}\nelse\n{\n\n    @foreach (var item in Model)\n    {\n        <tr>\n            <td>\n                @Html.DisplayFor(modelItem => item.Title)\n            </td>\n            <td>\n                @Html.DisplayFor(modelItem => item.Description)\n            </td>\n            <td>\n                @Html.DisplayFor(modelItem => item.Severity)\n            </td>\n            <td>\n                @Html.DisplayFor(modelItem => item.WorkItemType)\n            </td>\n            <td>\n                @Html.DisplayFor(modelItem => item.AssignedTo)\n            </td>\n            <td>\n            @Html.ActionLink(\"Edit\", \"Edit\", new { /* \n             id=item.PrimaryKey */ }) |\n            @Html.ActionLink(\"Details\", \"Details\", new { /* \n             id=item.PrimaryKey */ }) |\n            @Html.ActionLink(\"Delete\", \"Delete\", new { /* \n             id=item.PrimaryKey */ })\n            </td>\n        </tr>\n   }\n}\n\n```", "```cs\n@if (Model.Count() > 0) \n{ \n<p> \n    <a asp-action=\"Create\">Create New</a> \n</p> \n} \n```", "```cs\n@if (Model.Count() > 0) \n{ \n<p> \n    @Html.ActionLink(\"Create New\", \"AddWorkItem/AddItem\") \n</p> \n} \n```"]