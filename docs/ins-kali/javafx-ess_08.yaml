- en: Chapter 8. Interactive Leap Motion Apps with JavaFX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用JavaFX进行交互式Leap Motion应用程序
- en: Now we have come to the most exciting part of the book, where we will dive into
    the new touchless era of computer-human interaction through body language translated
    into commands to control surrounding objects and computers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了本书最激动人心的部分，我们将通过身体语言转化为命令来控制周围的物体和计算机，进入新的无触摸时代的计算机人交互。
- en: Every day we notice the rise of input interfaces that are less mouse-centric
    and more in favor of touchless input. *Gestures* are one of the ways humans can
    communicate with machines naturally these days.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每天我们都注意到输入界面的崛起，它们不再以鼠标为中心，而更倾向于无触摸输入。*手势*是人类如今可以自然地与机器交流的一种方式。
- en: For decades, motion controls have held a persistent place in our visions of
    the future. We've watched the super heroes, mad scientists, and space cowboys
    of popular media control digital experiences with just a wave of their hands.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，动作控制一直在我们对未来的设想中占据着坚定的位置。我们看到了流行媒体中的超级英雄、疯狂科学家和太空牛仔只需挥动手就能控制数字体验。
- en: '![Interactive Leap Motion Apps with JavaFX](img/B03998_08_1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用JavaFX进行交互式Leap Motion应用程序](img/B03998_08_1.jpg)'
- en: Tom Cruise does his computing by gesturing
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 汤姆·克鲁斯通过手势进行计算
- en: We've been captivated by these powerful, natural, and intuitive interactions—imagining
    what it would be like to have that power at our own fingertips. For example, *Star
    Trek's Holodeck* and *Minority Report's pre-crime visioning computers*. Do you
    remember how Tom Cruise does his computing in the latter using gestures on a transparent
    display? All exude a sense of power and mastery, along with paradoxical perceptions
    of simplicity, ease, intuitiveness, and humanity. Simply, these experiences feel
    magical.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们被这些强大、自然和直观的交互所吸引——想象一下如果我们能在自己的指尖上拥有这种力量会是什么样子。例如，*《星际迷航》的全息甲板*和*《未来报告》中的预犯预测计算机*。你还记得汤姆·克鲁斯在后者中是如何通过透明显示屏上的手势进行计算的吗？所有这些都散发着一种力量和掌控感，同时又具有矛盾的简单、轻松、直观和人性化的感觉。简单地说，这些体验都是神奇的。
- en: 'There are several devices on the market that actually allow us to interact
    with computers using just some parts of our body: many games for the **Xbox**,
    the Microsoft game console, use the **Kinect** controller to recognize the user''s
    body movements. The myoelectric armband detects movements in your muscles and
    translates them into gestures so that you can interact with your computer. Leap
    Motion controller recognizes users'' hands and fingers and translate the movements
    and gestures to the computer.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有几种设备实际上允许我们仅使用身体的一些部分与计算机进行交互：许多**Xbox**游戏，微软游戏机，使用**Kinect**控制器来识别用户的身体动作。肌电臂带可以检测你肌肉的运动并将其转化为手势，以便你可以与计算机交互。Leap
    Motion控制器可以识别用户的手和手指，并将动作和手势转化为计算机上的操作。
- en: In this chapter, you will learn about gesture recognition using the **Leap Motion**
    device, an awesome device that allows a touchless approach to developing enhanced
    JavaFX applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习使用**Leap Motion**设备进行手势识别，这是一种令人敬畏的设备，可以以无触摸的方式开发增强的JavaFX应用程序。
- en: 'Here are some of the topics that we will discuss in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将讨论的一些主题：
- en: Introducing the Leap controller, how it works, and where to get one
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Leap控制器，它的工作原理以及如何获取
- en: Getting and installing the SDK, configuring its driver, and verifying whether
    it works
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取和安装SDK，配置其驱动程序，并验证其是否正常工作
- en: Basics of Leap-based application building blocks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Leap的应用程序构建基础知识
- en: Developing amazing touchless JavaFX applications
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发令人惊叹的无触摸JavaFX应用程序
- en: The Leap Motion controller
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Leap Motion控制器
- en: 'Here is a very tiny device with 13 mm height, 30 mm width, 76 mm depth, and
    a weight of 45 grams (*final dimensions: 0.5" x 1.2" x 3"*). With the Leap Motion
    software running on your computer, just plug the controller into the USB on your
    Mac or PC and you are ready to go (without any external power source).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常小的设备，高度为13毫米，宽度为30毫米，深度为76毫米，重量为45克（*最终尺寸：0.5英寸x 1.2英寸x 3英寸*）。只需将Leap
    Motion软件运行在您的计算机上，将控制器插入Mac或PC上的USB接口，您就可以开始使用了（无需外部电源）。
- en: Here it works with what it finds above it, capturing the individual movements
    of your hands and fingers in almost real time (200-300 fps) and translating the
    gestures into different actions on the application running on your computer. Launched
    in 2013, this $79.99 device is called the Leap Motion controller.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以捕捉你手和手指的个别动作，几乎实时（200-300 fps），并将手势转化为计算机上运行的应用程序的不同操作。这款79.99美元的设备于2013年推出，称为Leap
    Motion控制器。
- en: '![The Leap Motion controller](img/B03998_08_2.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Leap Motion控制器](img/B03998_08_2.jpg)'
- en: Leap Motion size compared to human hand
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion与人手的大小比较
- en: From the developer's point of view, this device allows designing applications
    that can be controlled simply by gestures and movements of the user's *hands*
    and *fingers*, just like in *Minority Report!*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，这个设备允许设计应用程序，可以通过用户的*手*和*手指*的手势和动作来控制，就像*未来报告*中一样！
- en: It senses how you naturally move your hands and lets you use your computer in
    a whole new way—point, wave, reach, grab, or pick something up and move it. You
    can do things you never dreamed possible.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它能感知你自然的手部动作，并让你以全新的方式使用计算机——指向、挥动、伸手、抓取或拿起东西并移动。你可以做一些你从未梦想过的事情。
- en: Check your hand; just one hand has 29 bones, 29 joints, 123 ligaments, 48 nerves,
    and 30 arteries. That's sophisticated and complicated. The controller has come
    really close to figuring it all out.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一下你的手；一只手有29根骨头，29个关节，123条韧带，48条神经和30条动脉。这是复杂而复杂的。控制器已经非常接近完全弄清楚这一切。
- en: 'Actually, when you think about it, the magic of Leap Motion comes in the software,
    but the company works hard on the hardware to deliver their technology. It has
    been in development since they started in 2011\. The evolution is shown in the
    following figure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，当你考虑它时，Leap Motion的魔力在于软件，但公司也在努力开发硬件来提供他们的技术。自2011年开始开发以来，它已经有了很大的进步，如下图所示：
- en: '![The Leap Motion controller](img/B03998_08_3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Leap Motion控制器](img/B03998_08_3.jpg)'
- en: The evolution of the Leap Motion controller
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion控制器的演变
- en: How it works
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Leap Motion's technology, which relies on special receiver hardware and custom
    software, can track movements to 1/100th millimeter with no visible lag time.
    The Leap Motion controller has a *150-degree* field of view, and it tracks individual
    hands and all 10 fingers at 290 fps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion的技术依赖于特殊的接收器硬件和定制软件，可以跟踪到1/100毫米的运动，没有可见的延迟时间。Leap Motion控制器具有*150度*的视野，并以290fps跟踪单独的手部和所有10个手指。
- en: 'The main hardware of the device consists of three infrared LEDs combined with
    two monochromatic infrared (IR) cameras. While the LEDs generate a 3D pattern
    of dots of IR light, the cameras scan the reflected data at nearly 290 fps. Everything
    within a radius of 50 cm will be scanned and processed, with a resolution of 0.01
    mm. The main components of the device are shown in the following figure:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备的主要硬件由三个红外LED和两个单色红外（IR）摄像头组成。LED产生红外光的3D点阵，摄像头以近乎290fps的速度扫描反射数据。在50厘米半径内的所有内容都将被扫描和处理，分辨率为0.01毫米。设备的主要组件如下图所示：
- en: '![How it works](img/B03998_08_4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的](img/B03998_08_4.jpg)'
- en: Leap Motion Controller Hardware layers and internal components
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion控制器硬件层和内部组件
- en: This is the future of computer interaction Leap Motion's incredibly fast and
    accurate natural user interface, which sends all movement data to the computer
    in a very precise way. The data will be analyzed in the host computer by the Leap
    Motion proprietary software detection algorithm, and any Leap-enabled application
    can be interfaced directly without using any other physical input device.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算机交互的未来，Leap Motion的非常快速和准确的自然用户界面以非常精确的方式将所有运动数据发送到计算机。数据将通过Leap Motion专有软件检测算法在主机计算机上进行分析，并且任何启用Leap的应用程序都可以直接进行接口连接，而无需使用任何其他物理输入设备。
- en: The coordinate system
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 坐标系统
- en: Mapping the coordinate values received from the controller to the appropriate
    JavaFX coordinate system is a fundamental task when using the Leap Motion controller
    in your application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中使用Leap Motion控制器时，将从控制器接收的坐标值映射到适当的JavaFX坐标系统是一项基本任务。
- en: From the previous discussion, you can observe that the device can detect hands,
    fingers, and reflective tools within a super-wide 150-degree field of view and
    a z-axis for depth. This means you can move your hands in 3D, just like you do
    in the real world.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的讨论中，您可以观察到该设备可以在超宽的150度视野和深度的z轴内检测手部、手指和反射工具。这意味着您可以像在现实世界中一样在3D中移动您的手。
- en: 'The device coordinate system uses a right-handed Cartesian coordinate system,
    with the origin at the center of the device. This is shown in the following figure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设备坐标系统使用右手笛卡尔坐标系，原点位于设备中心。如下图所示：
- en: '![The coordinate system](img/B03998_08_6.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![坐标系统](img/B03998_08_6.jpg)'
- en: Coordinate system centered in the device
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以设备为中心的坐标系统
- en: Every time the device scans and analyzes your hand movement into data, a Frame
    object containing a list of all the processed and tracked data in terms of instances
    (hands, fingers, and tools) is generated, including a set of motion gestures found
    in the frame (*swipe, tap, or circle*).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每次设备扫描和分析您的手部运动数据时，都会生成一个包含所有已处理和跟踪数据的列表的Frame对象（手部、手指和工具），包括在帧中找到的一组运动手势（*滑动、点击或圈*）。
- en: As you may have noticed, the y-axis positive direction is the opposite of the
    downward orientation in most computer graphics systems, including JavaFX.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，y轴的正方向与大多数计算机图形系统（包括JavaFX）中的向下方向相反。
- en: However, the fact that the data is referred to the device position and not to
    the screen, as we are accustomed to with mouse and touch events, changes dramatically
    the way we need to think.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数据是指设备位置而不是屏幕，这与我们习惯于鼠标和触摸事件的方式发生了根本性的变化。
- en: Fortunately, the API provides several useful methods to find where our hands
    and fingers are pointing at any time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，API提供了几种有用的方法，可以随时找到我们的手和手指指向的位置。
- en: Getting the device
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取设备
- en: As we have been inspired by this amazing technology, we need to engage and start
    developing something with the device. So, we need to get one first.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们受到了这项令人惊叹的技术的启发，我们需要参与并开始使用该设备开发一些东西。因此，我们首先需要获得一个。
- en: The device is available from many vendors such as Amazon, Best buy, and others.
    However, you can also buy it from the Leap Motion store ([http://store-world.leapmotion.com](http://store-world.leapmotion.com)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该设备可以从亚马逊、百思买等许多供应商处购买。但是，您也可以从Leap Motion商店([http://store-world.leapmotion.com](http://store-world.leapmotion.com))购买。
- en: I bought my device at the end of 2014, and it is possible that you can find
    special discounts in some of the stores now.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2014年底购买了我的设备，现在可能可以在一些商店找到特别折扣。
- en: Package contents
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包内容
- en: 'When you buy the Leap Motion package, it should contain at least the items
    shown in the following image:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您购买Leap Motion套装时，至少应包含以下图像中显示的物品：
- en: '![Package contents](img/B03998_08_7.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![包内容](img/B03998_08_7.jpg)'
- en: Leap Motion package contents
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion包内容
- en: 'At the time of writing, the package includes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，该套装包括：
- en: Leap Motion controller
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Leap Motion控制器
- en: Two custom-length USB 2.0 cables
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两根定制长度的USB 2.0电缆
- en: Welcome card
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎卡
- en: Important information guide
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要信息指南
- en: Getting started with the Leap SDK
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Leap SDK入门
- en: Now that we have the hardware, we need to install the software and start development.
    This is a very easy task; just point your mouse to the address bar of your favorite
    browser, type the URL [https://developer.leapmotion.com/downloads](https://developer.leapmotion.com/downloads),
    and click on the *Enter* key.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了硬件，我们需要安装软件并开始开发。这是一项非常简单的任务；只需将鼠标指向您喜欢的浏览器的地址栏，输入URL [https://developer.leapmotion.com/downloads](https://developer.leapmotion.com/downloads)，然后点击*Enter*键。
- en: At the time of writing, the latest version is SDK 2.2.6.29154\. Click on your
    operating system icon to start downloading the supported version. Alternatively,
    just click on the green button with the label **Download SDK 2.2.6.29154 for OSX**
    (for Mac OS X). This will detect your PC/laptop OS and allow you to download the
    suitable SDK for your OS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，最新版本是SDK 2.2.6.29154。单击您的操作系统图标以开始下载支持的版本。或者，只需单击带有标签**Download SDK 2.2.6.29154
    for OSX**（适用于Mac OS X）的绿色按钮。这将检测您的PC /笔记本电脑操作系统，并允许您下载适合您操作系统的SDK。
- en: Installing the controller driver and software
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装控制器驱动程序和软件
- en: 'The installation process and getting your device ready for interaction require
    a few simple steps. After downloading the `zip` content, extract it, install the
    software installer, and everything should be in place:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程和准备好与设备交互需要一些简单的步骤。下载`zip`内容后，提取它，安装软件安装程序，一切都应该就位：
- en: Download, extract, and run the software installer.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载，提取并运行软件安装程序。
- en: After installation, connect your Leap Motion controller and open the Visualizer,
    as shown in the following screenshot:![Installing the controller driver and software](img/B03998_08_8.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，连接您的Leap Motion控制器并打开可视化器，如下面的屏幕截图所示：![安装控制器驱动程序和软件](img/B03998_08_8.jpg)
- en: Running the Visualizer
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行可视化器
- en: The SDK consists of a `LeapJava.jar` libraries and a bunch of native libraries
    for controller integration. One easy way to integrate `LeapJava.jar` on your system
    is by adding the JAR to `<JAVA_HOME>/jre/lib/ext` on Linux or Windows (or `/Library/Java/Extensions
    on the Mac`).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SDK包括`LeapJava.jar`库和一堆用于控制器集成的本机库。在您的系统上集成`LeapJava.jar`的一种简单方法是将JAR添加到Linux或Windows的`<JAVA_HOME>/jre/lib/ext`（或Mac上的`/Library/Java/Extensions`）。
- en: Copy the native libraries (`LeapJava.dll`, `Leap.dll`, and `Leapd.dll` for Windows;
    `libLeapJava.dylib` and `libLeap.dylib` for the Mac; and `libLeapJava.so` and
    `libLeap.so` for Linux) to the `<JAVA_HOME>/jre/bin` folder.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本机库（Windows的`LeapJava.dll`，`Leap.dll`和`Leapd.dll`；Mac的`libLeapJava.dylib`和`libLeap.dylib`；Linux的`libLeapJava.so`和`libLeap.so`）复制到`<JAVA_HOME>/jre/bin`文件夹中。
- en: Alternatively, you can just add the JAR to every project as a dependency and
    load the native libraries as a VM argument `-Djava.library.path=<native library
    path>`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，您可以将JAR作为依赖项添加到每个项目中，并将本机库作为VM参数`-Djava.library.path=<native library path>`加载。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The SDK also includes many examples based on supported languages, including
    the `HelloWorld.java` example, which is a very good base from which to start understanding
    how to integrate your controller with your Java application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: SDK还包括许多基于支持语言的示例，包括`HelloWorld.java`示例，这是一个非常好的起点，可以帮助您了解如何将控制器与Java应用程序集成。
- en: Verifying whether it works
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证是否有效
- en: If everything is okay, a small Leap Motion icon should appear on the taskbar
    notification area (Windows) or menu bar (Mac), and it should be green as shown
    in the previous screenshot. The LED indicator on the device should be lit with
    a green light and *facing you for the correct orientation of the device*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，一个小的Leap Motion图标应该出现在任务栏通知区域（Windows）或菜单栏（Mac）上，并且应该是绿色的，就像前面的屏幕截图所示。设备上的LED指示灯应该亮起绿色，并且*面向您以正确定位设备*。
- en: If you are able to interact and see the visualization of your fingers and hands
    when the visualizer opens, as shown in the following screenshot, then it is time
    to start development.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能够与可视化器交互并看到手指和手的可视化，就像下面的屏幕截图所示，那么现在是开始开发的时候了。
- en: '![Verifying whether it works](img/B03998_08_9.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![验证是否有效](img/B03998_08_9.jpg)'
- en: The Leap Motion Diagnostic Visualizer application
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion诊断可视化器应用程序
- en: Supported languages
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的语言
- en: Before we deep dive into our application, I would like to just mention that
    the Leap Motion SDK supports many languages, including Java and others such as
    JavaScript for Web, C#, C++, Python, Unity, Objective-C, and the Unreal gaming
    engine.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究我们的应用程序之前，我想简单提一下，Leap Motion SDK支持许多语言，包括Java和其他语言，如JavaScript用于Web，C＃，C
    ++，Python，Unity，Objective-C和虚幻游戏引擎。
- en: The Leap JavaFX application
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Leap JavaFX应用程序
- en: Like you, I can't wait to start the development process, and now you will learn
    how to interact touchlessly with a JavaFX 8 3D-based application connected to
    a Leap motion device.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 像您一样，我迫不及待地想要开始开发过程，现在您将学习如何与连接到Leap motion设备的JavaFX 8基于3D的应用程序进行无触摸交互。
- en: Given that the 3D API has not so far been covered in this book, this is good
    opportunity to briefly describe the 3D API and bring Leap Motion v2 skeletal modeling
    (hand in 3D) with some 3D interaction into our JavaFX application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于本书迄今为止尚未涵盖3D API，这是一个很好的机会，简要描述3D API并将Leap Motion v2骨骼建模（3D手）与一些3D交互带入我们的JavaFX应用程序。
- en: The Leap Motion API v2.0 introduces a new skeletal tracking model that provides
    additional information about hands and fingers, predicts the positions of fingers
    and hands that are not clearly in view, and also improves overall tracking data.
    For more information on the API, visit [https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java](https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Leap Motion API v2.0引入了一个新的骨骼跟踪模型，提供有关手和手指的额外信息，预测不清晰可见的手指和手的位置，并改进整体跟踪数据。有关API的更多信息，请访问[https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java](https://developer.leapmotion.com/documentation/java/devguide/Intro_Skeleton_API.html?proglang=java)。
- en: We are going to build and show how the new skeletal model from Leap Motion v2
    can be easily integrated into a JavaFX 3D scene. We will use the predefined 3D
    shapes API provided by JavaFX to quickly create 3D objects out of the box. These
    shapes include boxes, cylinders, and spheres that we will use in our application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何将Leap Motion v2的新骨骼模型轻松集成到JavaFX 3D场景中。我们将使用JavaFX提供的预定义3D形状API，快速创建3D对象。这些形状包括盒子、圆柱体和球体，我们将在我们的应用程序中使用它们。
- en: The JavaFX 3D API at a glance
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一览JavaFX 3D API
- en: 3D means *three-dimensional* or something that has *width*, *height*, and *depth*
    (or *length*). Our physical environment is three-dimensional and we move around
    in 3D every day.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 3D意味着*三维*或者拥有*宽度*、*高度*和*深度*（或*长度*）的东西。我们的物理环境是三维的，我们每天都在三维空间中移动。
- en: 'The JavaFX 3D Graphics library includes Shape3D API, and there are two types
    of 3D shapes in JavaFX:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 3D图形库包括Shape3D API，JavaFX中有两种类型的3D形状：
- en: '**Predefined shapes**: These are provided to make it easier for you to quickly
    create 3D objects out-of-the-box. These shapes include boxes, cylinders, and spheres.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预定义的形状**：这些形状是提供的，以便让你更快地创建3D对象。这些形状包括盒子、圆柱体和球体。'
- en: '**User-defined shapes**: The JavaFX Mesh class hierarchy contains the `TriangleMesh`
    subclass. The Triangle mesh is the most typical kind of mesh used in 3D layouts.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户定义的形状**：JavaFX Mesh类层次结构包含`TriangleMesh`子类。三角网格是3D布局中最常见的网格类型。'
- en: In our application, we are going to use the predefined shapes. For more information
    about the JavaFX 3D API and examples, please visit [http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm](http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将使用预定义的形状。有关JavaFX 3D API和示例的更多信息，请访问[http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm](http://docs.oracle.com/javase/8/javafx/graphics-tutorial/javafx-3d-graphics.htm)。
- en: More learning resources
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多学习资源
- en: One of the rich resources that will help you in the development and integration
    process between the Leap Motion controller and your normal Java application is
    the `HelloWorld.java` example bundled with the SDK.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在SDK中捆绑的`HelloWorld.java`示例是一个丰富的资源，它将帮助你在Leap Motion控制器和普通Java应用程序之间的开发和集成过程中。
- en: Another resource that discusses integration with Java is the *Getting Started
    with Java Development* section from Leap motion documentation, and it is available
    at [https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个讨论与Java集成的资源是Leap Motion文档中的*Getting Started with Java Development*部分，网址为[https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Guides.html)。
- en: The basic application structure
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本应用程序结构
- en: 'After taking a look inside the `HelloWorld.java` example and the documentation
    example, you will notice the following points:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看了`HelloWorld.java`示例和文档示例之后，你会注意到以下几点：
- en: We need a `Controller` object, allowing the connection between the Leap device
    and the application.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个`Controller`对象，允许Leap设备和应用程序之间的连接。
- en: We need a `Listener` subclass to handle events from the controller.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个`Listener`子类来处理来自控制器的事件。
- en: Gesture tracking is enabled in the `onConnect()` method.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手势跟踪在`onConnect()`方法中启用。
- en: The main method in this class is `onFrame()`, a `callback` method dispatched
    when a new `Frame` object with motion tracking data is available. This object
    contains list of hands, fingers, or tools and several vectors with their position,
    orientation, and velocity of movement.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个类中的主要方法是`onFrame()`，这是一个`callback`方法，当一个新的带有运动跟踪数据的`Frame`对象可用时被调用。这个对象包含手、手指或工具的列表，以及它们的位置、方向和运动速度的几个向量。
- en: If gestures are enabled, we'll also get a list of the gestures found, based
    on the analysis of the last frames. In addition, you will know the status of the
    gesture whether it has just begun, is in progress, or has ended.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果启用了手势，我们还将得到一个基于最后几帧分析的手势列表。此外，你将知道手势的状态，无论它是刚开始、正在进行中还是已经结束。
- en: The JavaFX 8 3D application
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaFX 8 3D应用程序
- en: The application we are going to discuss here is a complex JavaFX 8 3D application
    that will help you understand the Leap-based application development structure,
    interact with the device to recognize *hand positions*, and interact with *gestures*
    to model our hand in a 3D environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的应用程序是一个复杂的JavaFX 8 3D应用程序，它将帮助你了解基于Leap的应用程序开发结构，与设备交互以识别*手部位置*，并与*手势*交互以在3D环境中建模我们的手。
- en: You can find more resources, including more advanced concepts for developing
    Leap-based applications with JavaFX, in the examples section later on.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在后面的示例部分找到更多资源，包括开发基于Leap的JavaFX应用程序的更高级概念。
- en: In this application, we are going to detect bones, arms, and joints (position
    and directions) in the form of cylinder and sphere shapes to model our hands in
    3D into our JavaFX application `SubScene`. Then, we will detect their position
    to model our real hand movement above the Leap Motion device.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将检测骨骼、手臂和关节（位置和方向），以圆柱体和球体的形式在我们的JavaFX应用程序`SubScene`中建模我们的手。然后，我们将检测它们的位置，以在Leap
    Motion设备上建模我们真实的手部运动。
- en: We will also add the raw `image` so that you can see the model and your real
    hand in the application's background.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加原始的`image`，这样你就可以在应用程序的背景中看到模型和你的真实手。
- en: 'The application consists of three classes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序由三个类组成：
- en: '`LeapListener.java`: This class is the listener that interacts with the Leap
    Motion controller thread to transfer all the analyzed data (arms, bones, fingers,
    and joints) to the JavaFX application.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LeapListener.java`：这个类是监听器，它与Leap Motion控制器线程交互，将所有分析的数据（手臂、骨骼、手指和关节）传输到JavaFX应用程序中。'
- en: '`LeapJavaFX.java`: This class is a JavaFX application thread that will interact
    with `LeapListener.java` in order to create 3D shapes (on every frame), without
    keeping track of previous ones. Thanks to the power of Observable JavaFX bean
    properties, which allows data transferred from the Leap thread to be rendered
    into the JavaFX thread.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LeapJavaFX.java`：这个类是一个JavaFX应用程序线程，它将与`LeapListener.java`交互，以便在每一帧中创建3D形状，而不需要跟踪以前的形状。由于Observable
    JavaFX bean属性的强大功能，它允许从Leap线程传输的数据被渲染到JavaFX线程中。'
- en: '`Pair.java`: This is a small pair convenience class to store the two bones
    linked in every joint.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pair.java`：这是一个小的便利类，用于存储每个关节中链接的两根骨头。'
- en: So, let's start and see how we can do this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始看看我们如何做到这一点。
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You have to enable images on the Leap Motion control panel by checking the **Allow
    Images** option under the **General** tab, and make sure you disable the **Robust
    Mode** option for higher image under the **Tracking** tab.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须通过在“跃动”控制面板中勾选“**允许图像**”选项并确保在“**跟踪**”选项卡下禁用“**鲁棒模式**”选项来启用Leap Motion控制面板上的图像。
- en: How it works
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理
- en: First, we will explain the main bridge to our application, which is the Leap
    event listener `LeapListener.java`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将解释我们的应用程序的主要桥梁，即Leap事件监听器`LeapListener.java`。
- en: The main concern when developing a JavaFX application is how to mix the JavaFX
    thread with other non-JavaFX threads, which in our case is the Leap Motion Event
    `Listener` subclass that handles events at a very high rate.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 开发JavaFX应用程序时的主要问题是如何将JavaFX线程与其他非JavaFX线程混合，而在我们的情况下是Leap Motion事件`Listener`子类，它以非常高的速率处理事件。
- en: In order to bring these events to a JavaFX thread, we will use the `BooleanProperty`
    objects in the `LeapListener.java` class. Since we will be listening to changes
    only in `doneList` object, we don't need the lists to be observable too, because
    they will be triggering events with any change (adding one bone).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这些事件传递到JavaFX线程，我们将在`LeapListener.java`类中使用`BooleanProperty`对象。由于我们只会监听`doneList`对象的更改，因此我们不需要列表也是可观察的，因为它们将在任何更改时触发事件（添加一个骨骼）。
- en: 'That is why they are plain lists and we use only one Boolean observable property
    to set it to true after creating all the lists in every Leap `Frame` object:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此它们是普通列表，我们只使用一个布尔可观察属性，在创建每个Leap“Frame”对象中的所有列表后将其设置为true：
- en: '[PRE0]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To get the raw images we have to set this policy `onInit()` and, due to privacy
    reasons, the user must also enable the feature in the Leap Motion control panel
    for any application to get the raw camera images.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取原始图像，我们必须在`onInit()`中设置此策略，并且出于隐私原因，用户还必须在Leap Motion控制面板中启用该功能，以便任何应用程序都可以获取原始摄像头图像。
- en: '[PRE1]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (*As you know, if you want to process gestures, here is where you enable this
    feature, so maybe you can keep them commented.*)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: （*如您所知，如果要处理手势，这是您启用此功能的地方，因此也许您可以将它们保持注释状态。*）
- en: 'Let''s go ahead with creating the Frame method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建Frame方法：
- en: '[PRE2]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For every frame, reset `doneList`, process the data, and finally set it to `true`
    if we have bones or arms (if no hand is over the Leap, the frames are still being
    processed). Expose the property to be listened on the JavaFX app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每一帧，重置`doneList`，处理数据，最后如果我们有骨骼或手臂，则将其设置为`true`（如果没有手放在Leap上，帧仍在处理中）。将属性公开以便在JavaFX应用程序中进行监听。
- en: Now processing the frame object data. First, images (this could be done at the
    end). Clear the list on every frame and then retrieve the images (from the left
    and right cameras). The Leap documentation is really helpful if you want to understand
    how this works. Visit [https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在处理帧对象数据。首先是图像（这可以在最后完成）。在每一帧上清除列表，然后检索图像（从左右摄像头）。如果您想了解其工作原理，Leap文档非常有帮助。访问[https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html](https://developer.leapmotion.com/documentation/java/devguide/Leap_Images.html)。
- en: 'In fact, this code is part of the first example, adding `PixelWriter` to generate
    a JavaFX image. Since Leap gives bright pixels, I''ve negated them *(1- (r|g|b))*
    to get a negative image, more visible on the hands. Also, I flipped the image
    from left to right as the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这段代码是第一个示例的一部分，添加了`PixelWriter`以生成JavaFX图像。由于Leap提供了明亮的像素，我对它们进行了否定处理*(1-
    (r|g|b))*以获得负图像，在手部更加清晰可见。此外，我将图像从左到右翻转，如下所示：
- en: '[PRE3]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then clear the bone, arms, and joint lists, as shown in the following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后清除骨骼、手臂和关节列表，如下所示的代码：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Get the list of bones; for every finger found, iterate over the types of bones
    of this finger (up to 5) to avoid the metacarpals of the ring and middle fingers.
    The code is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 获取骨骼列表；对于找到的每个手指，迭代该手指的骨骼类型（最多5个），以避免戒指和中指的掌骨。代码如下：
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we will iterate over the hands list to get each hand arm and add it to
    the arms list as the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将遍历手列表以获取每只手臂，并将其添加到手臂列表中，如下所示：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now getting the fingers joints. It''s a little bit complex to explain in detail
    how to get every joint. Basically, I find the fingers of every hand, identifying
    the four fingers other than the thumb. The code is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在获取手指关节。详细解释如何获取每个关节有点复杂。基本上，我找到每只手的手指，识别除拇指以外的其他四只手指。代码如下：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once I have identified the fingers, I just define the joints between every
    pair of them (the first three joints) and a joint for the wrist (the last one).
    The code is as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我识别出手指，我就定义了它们之间的每对关节（前三个关节）和手腕的关节（最后一个）。代码如下：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, the preceding code returns a fresh copy of the bones collection to
    avoid concurrent exceptions iterating this list. Note that the Leap frame rate
    is really high. In a powerful computer, it is nearly 5 - 10 ms. The code is as
    follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，上述代码返回骨骼集合的新副本，以避免在迭代此列表时出现并发异常。请注意，Leap的帧速率非常高。在一台性能强大的计算机上，它几乎是5-10毫秒。代码如下：
- en: '[PRE9]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is faster than a JavaFX pulse (60 fps, or approximately 16 ms), so lists
    can be changed while the bones are rendered. With this *clone* method, we avoid
    any concurrent problem.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这比JavaFX脉冲更快（60 fps，或大约16毫秒），因此在渲染骨骼时可以更改列表。通过这种*clone*方法，我们避免了任何并发问题。
- en: 'The Listener method for the LeapJavaFX application is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: LeapJavaFX应用程序的Listener方法如下：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Initialize the Leap listener class and controller, then add the listener:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化Leap监听器类和控制器，然后添加监听器：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a perspective camera for the 3D `subScene`, translate to the middle,
    bottom of the screen, and to the user. Also, add some punctual light. The code
    is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为3D“subScene”创建一个透视摄像机，将其平移到屏幕中间底部，并对用户进行翻译。还要添加一些点光源。代码如下：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create an `ImageView` for the Leap image, which is 640 x 240 with robust mode
    off (uncheck the option in the Leap control panel), so we scale it up on Y to
    get a more visible image. The code is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为Leap图像创建一个`ImageView`，尺寸为640 x 240，鲁棒模式关闭（在Leap控制面板中取消选中该选项），因此我们在Y轴上进行缩放以获得更清晰的图像。代码如下：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a group with the camera and an inner group with light as the root for
    the `subScene`. Note that the depth buffer and antialiasing are enabled for better
    rendering. The camera is also added to the `subScene`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有相机的组，并将光源作为`subScene`的根。请注意，启用了深度缓冲和抗锯齿以获得更好的渲染效果。相机也添加到了`subScene`。
- en: 'The main root will be a `StackPane`: on the back, the `ImageView`, on the front,
    the transparent `SubScene`. The code is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 主根将是一个`StackPane`：背面是`ImageView`，前面是透明的`SubScene`。代码如下：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set the material for fingers and arms, with a diffuse color:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为手指和手臂设置材料，使用漫射颜色：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We listen to changes in `doneList`. Whenever it is `true` (after every frame!),
    we process the 3D hand(s) rendering:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们监听`doneList`的变化。每当它为`true`（每帧之后！），我们处理3D手部渲染：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'First, get the fresh copy of the bones, arms, and joints collection. Then,
    if there are valid images in the JavaFX thread, we set the image on the `ImageView`
    and remove all the root children except for the light (so we are recreating the
    hand bones all over again):'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，获取骨骼、手臂和关节集合的最新副本。然后，如果在JavaFX线程中有有效图像，我们将图像设置在`ImageView`上，并删除除光源之外的所有根节点（因此我们重新创建手部骨骼）：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Bones Iterate over the list and add the bones to the scene. If the collection
    changes, there won't be any concurrent exceptions when we iterate over its copy.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 骨骼 迭代列表并将骨骼添加到场景中。如果集合发生变化，我们在其副本上进行迭代时不会出现并发异常。
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we create a cylinder for every bone. This involves some calculations. If
    you want to go into detail, take each bone as a vector with a position and a direction.
    Create a vertical cylinder whose radius is half of the width of the bone and whose
    height is the same as its length. Then, assign it the material. The code is as
    follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为每根骨骼创建一个圆柱体。这涉及一些计算。如果你想深入了解，可以将每根骨骼视为一个带有位置和方向的向量。创建一个垂直圆柱体，其半径为骨骼宽度的一半，高度与长度相同。然后，分配材料。代码如下：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then we get the cross product of the real bone direction with the vertical
    one; this gives us the perpendicular vector of rotation. (Signs are due to changes
    in the coordinate systems). The `ang` object is the angle between those two vectors.
    A transformation can be applied with translation to the center of the bone and
    a rotation of `ang` around the given vector. The code is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们用真实骨骼方向与垂直方向进行叉乘；这给出了旋转的垂直向量。（符号是由于坐标系的变化）。`ang`对象是这两个向量之间的角度。可以应用一个转换，将其旋转到`ang`围绕给定向量的中心。代码如下：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now spheres at the beginning and at the end of every bone:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在每根骨骼的开头和结尾都有球体：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now for the joints; we use cylinders again. The distance between the two elements
    connected gives the length and we get the position and direction to generate and
    transform the cylinder. The code is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于关节；我们再次使用圆柱体。连接的两个元素之间的距离给出长度，我们获取位置和方向来生成和转换圆柱体。代码如下：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we take the length from the distance between elbow and wrist. All
    of this is in the API at: [https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html](https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html).
    The code is as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从肘部到手腕的距离中获取长度。所有这些都在API中：[https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html](https://developer.leapmotion.com/documentation/java/api/Leap.Arm.html)。代码如下：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Running the application
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Congratulations! Now connect your Leap controller (the leap icon should be
    green) and run your application. If everything is okay, you should initially see
    an empty application scene, as shown in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在连接您的Leap控制器（leap图标应该是绿色的）并运行您的应用程序。如果一切正常，您应该最初看到一个空的应用程序场景，如下截图所示：
- en: '![Running the application](img/B03998_08_10.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B03998_08_10.jpg)'
- en: Initial run of the Leap JavaFX application
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Leap JavaFX应用程序的初始运行
- en: 'Move and wave your hand around and the skeletal modeling of your hand should
    appear with your real hands in the background, responding to your real movements
    as shown here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 移动并挥动你的手，你的手的骨骼建模应该出现在你真实的手背景中，响应你的真实动作如下所示：
- en: '![Running the application](img/B03998_08_11.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B03998_08_11.jpg)'
- en: Interaction of Leap JavaFX application and Leap Controller
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Leap JavaFX应用程序与Leap控制器的交互
- en: 'Try a different arm or hand pattern and position; you should have this replicated
    in your JavaFX application scene, as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的手臂或手部模式和位置；您应该在JavaFX应用程序场景中看到这一复制，如下截图所示：
- en: '![Running the application](img/B03998_08_12.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序](img/B03998_08_12.jpg)'
- en: Interaction of Leap JavaFX application and Leap Controller, with a different
    hand pattern
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Leap JavaFX应用程序与Leap控制器的交互，具有不同的手部模式
- en: More examples
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多示例
- en: For more examples of using JavaFX with the Leap Motion device, please refer
    to online resources such as [http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad](http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad)
    or [http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html](http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html).
    For interaction with other programming languages, please visit [https://developer.leapmotion.com/gallery](https://developer.leapmotion.com/gallery).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用JavaFX与Leap Motion设备的更多示例，请参考在线资源，如[http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad](http://www.parleys.com/share.html#play/525467d6e4b0a43ac12124ad)或[http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html](http://jperedadnr.blogspot.com.es/2013/06/leap-motion-controller-and-javafx-new.html)。有关与其他编程语言的交互，请访问[https://developer.leapmotion.com/gallery](https://developer.leapmotion.com/gallery)。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the impressive Leap Motion device, and the
    really nice combination effects that result from using it to enhance JavaFX applications.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了令人印象深刻的Leap Motion设备，以及使用它来增强JavaFX应用程序所产生的非常好的组合效果。
- en: You began by learning about the device and how it works. Next, we discussed
    its SDK for Java and explored a simple application where you learned about listening
    and processing the data from the Leap device in one thread, while triggering events
    in the JavaFX thread to deal with them in the scene graph.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始学习关于设备及其工作原理。接下来，我们讨论了它的Java SDK，并探讨了一个简单的应用程序，在这个应用程序中，你学会了如何在一个线程中监听和处理Leap设备的数据，同时在JavaFX线程中触发事件来处理场景图中的数据。
- en: In the next chapter, I'll provide advanced tools and resources intended for
    true JavaFX gurus.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将提供给真正的JavaFX专家们使用的高级工具和资源。
