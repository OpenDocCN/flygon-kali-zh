- en: Cryptography
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码学
- en: Problems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 88\. Caesar cipher
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 88. 凯撒密码
- en: Write a program that can encrypt and decrypt messages using a Caesar cipher
    with a right rotation and any shift value. For simplicity, the program should
    consider only uppercase text messages and only encode letters, ignoring digits,
    symbols, and other types of characters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以使用右移和任意移位值的凯撒密码加密和解密消息。为简单起见，程序应仅考虑大写文本消息，并仅编码字母，忽略数字、符号和其他类型的字符。
- en: 89\. Vigenère cipher
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 89. 维吉尼亚密码
- en: Write a program that can encrypt and decrypt messages using the Vigenère cipher.
    For simplicity, the input plain-text messages for encryption should consist of
    only uppercase letters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以使用维吉尼亚密码加密和解密消息。为简单起见，加密的输入明文消息应仅包含大写字母。
- en: 90\. Base64 encoding and decoding
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 90. Base64编码和解码
- en: Write a program that can encode and decode binary data using the base64 encoding
    scheme. You must implement the encoding and decoding functions yourself and not
    use a 3^(rd) party library. The table used for encoding should be the one from
    the MIME specification.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以使用base64编码方案对二进制数据进行编码和解码。您必须自己实现编码和解码函数，而不使用第三方库。用于编码的表应该是MIME规范中的表。
- en: 91\. Validating user credentials
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 91. 验证用户凭据
- en: Write a program that simulates the way users authenticate to a secured system.
    In order to log in, a user must be already registered with the system. The user
    enters a username and a password and the program checks if it matches any of its
    registered users; if it does, the user is granted access, otherwise, the operation
    fails. For security reasons, the system must not record the password but use an
    SHA hash instead.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个模拟用户认证到安全系统的方式的程序。为了登录，用户必须已经在系统中注册。用户输入用户名和密码，程序检查是否与其注册用户中的任何匹配；如果匹配，则授予用户访问权限，否则操作失败。出于安全原因，系统不得记录密码，而应使用SHA哈希。
- en: 92\. Computing file hashes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 92. 计算文件哈希
- en: Write a program that, given a path to a file, computes and prints to the console
    the SHA1, SHA256, and MD5 hash values for the content of the file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，给定文件路径，计算并打印文件内容的SHA1、SHA256和MD5哈希值到控制台。
- en: 93\. Encrypting and decrypting files
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 93. 加密和解密文件
- en: Write a program that can encrypt and decrypt files using the **Advanced Encryption
    Standard** (**AES** or **Rijndael**). It should be possible to specify both a
    source file and a destination file path, as well as a password.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以使用**高级加密标准**（**AES**或**Rijndael**）加密和解密文件。应该可以指定源文件和目标文件路径，以及密码。
- en: 94\. File signing
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 94. 文件签名
- en: 'Write a program that is able to sign files and verify that a signed file has
    not been tampered with, using RSA cryptography. When signing a file, the signature
    should be written to a separate file and used later for the verification process.
    The program should provide at least two functions: one that signs a file (taking
    as arguments the path to the file, the path to the RSA private key, and the path
    to the file where the signature will be written) and one that verifies a file
    (taking as arguments the path to the file, the path to the RSA public key, and
    the path to the signature file).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，能够使用RSA密码学对文件进行签名，并验证签名文件是否被篡改。签署文件时，签名应写入单独的文件，并在验证过程中使用。该程序应提供至少两个功能：一个用于签署文件（参数为文件路径、RSA私钥路径和签名文件路径），一个用于验证文件（参数为文件路径、RSA公钥路径和签名文件路径）。
- en: Solutions
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 88\. Caesar cipher
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 88. 凯撒密码
- en: A *Caesar cipher*, also known as *Caesar’s cipher*, *Caesar’s code*, *Caesar
    shift*, or *shift cipher*, is a very old, simple, and widely known encryption
    technique that substitutes each letter in the plain-text with a letter some fixed
    number of positions down the alphabet. This method was used by Julius Caesar to
    protect messages of military importance. He used a shift of three letters, therefore
    replacing A with D, B with E, and so on. In this encoding, the text CPPCHALLENGER
    becomes FSSFKDOOHQJHU. The cipher is described in detail on Wikipedia at [https://en.wikipedia.org/wiki/Caesar_cipher](https://en.wikipedia.org/wiki/Caesar_cipher).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 凯撒密码，也称为凯撒密码、凯撒密码、凯撒移位密码或移位密码，是一种非常古老、简单且广为人知的加密技术，它用字母表中固定数量的位置替换明文中的每个字母。这种方法被朱利叶斯·凯撒用来保护军事重要消息。他使用了三个字母的移位，因此用D代替A，用E代替B，依此类推。在这种编码中，文本CPPCHALLENGER变成了FSSFKDOOHQJHU。维基百科上详细描述了这种密码：[https://en.wikipedia.org/wiki/Caesar_cipher](https://en.wikipedia.org/wiki/Caesar_cipher)。
- en: Although the Caesar cipher has no place in modern cryptography since it is trivial
    to break, it is still used on online forums or newsgroups ...
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管凯撒密码在现代密码学中已经没有地位，因为它很容易被破解，但它仍然在在线论坛或新闻组中使用...
- en: 89\. Vigenère cipher
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 89. 维吉尼亚密码
- en: The Vigenère cipher is an encryption technique that uses a series of interwoven
    Caesar ciphers. Although described in 1553 by Giovan Battista Ballaso, it was
    misattributed in the 19th century to Blaise de Vigenère and ended up being named
    after him. The cipher is described in detail on Wikipedia at [https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher).
    Only a short summary is presented here.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 维吉尼亚密码是一种使用一系列交织的凯撒密码的加密技术。尽管由Giovan Battista Ballaso于1553年描述，但在19世纪被错误地归因于Blaise
    de Vigenère，并以他的名字命名。维基百科上详细描述了这种密码：[https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher)。这里只呈现了一个简短的摘要。
- en: Although the Vigenère cipher took three centuries to be broken, it is nowadays
    trivial to break, just as in the case of the Caesar cipher, on which it is based.
    Like the previous problem, this one is proposed only as a fun and simple exercise
    and not as an argument in favor of using this cipher for cryptographic purposes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管维吉尼亚密码花了三个世纪才被破解，但现在它很容易被破解，就像凯撒密码一样。与前一个问题一样，这个问题只是作为一个有趣和简单的练习提出，而不是为了支持使用这种密码进行加密目的。
- en: The technique ...
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 技术...
- en: 90\. Base64 encoding and decoding
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 90. Base64编码和解码
- en: Base64 is an encoding scheme used for representing binary data in ASCII format
    using an alphabet of 64 characters. Although all implementations use the same
    first 62 characters (`A-Z`, `a-z`, and `0-9`), the last two values may differ.
    The symbols `+` and `/` are used in the MIME specification. A base64 digit represents
    6 bits of data, and four base64 digits encode exactly three bytes (8-bit) of binary
    data. When the number of digits is not divisible by three, extra bytes with a
    value of zero are added before converting to base64\. Padding the encoded text
    with `==` or `=` can be used to indicate that the final group of three bytes from
    the plain data actually contained only one or two bytes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Base64是一种编码方案，用于使用64个字符的字母表将二进制数据表示为ASCII格式。虽然所有实现都使用相同的前62个字符（`A-Z`、`a-z`和`0-9`），但最后两个值可能不同。符号`+`和`/`在MIME规范中使用。一个base64数字表示6位数据，四个base64数字恰好编码三个字节（8位）的二进制数据。当数字的数量不能被三整除时，在转换为base64之前会添加值为零的额外字节。使用`==`或`=`填充编码文本可以用来指示明文数据的最后一组三个字节实际上只包含一个或两个字节。
- en: Here is an example of encoding ...
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个编码示例...
- en: 91\. Validating user credentials
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 91\. 验证用户凭据
- en: A good choice for a free, cross-platform C++ library for cryptographic schemes
    is Crypto++. This library is widely used in both non-commercial and commercial
    projects, as well as academia, student projects, and others, for its industry-proven
    implementation of cryptographic functionalities. The library provides support
    for AES and AES candidates, as well as other block ciphers, message authentication
    codes, hash functions, public key cryptography, and many other features, including
    non-cryptographic functionalities such as pseudo-random number generators, prime
    number generation and verification, DEFLATE compression/decompression, encoding
    schemes, checksum functions, and more. The library is available at ...
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 用于加密方案的免费、跨平台的C++库的一个很好的选择是Crypto++。这个库在非商业和商业项目中广泛使用，以及在学术界、学生项目和其他领域，因为它在加密功能的行业验证实现方面得到了广泛应用。该库提供对AES和AES候选者以及其他块密码、消息认证码、哈希函数、公钥密码学和许多其他功能的支持，包括非加密功能，如伪随机数生成器、素数生成和验证、DEFLATE压缩/解压缩、编码方案、校验和函数等。该库可以在...上获得。
- en: 92\. Computing file hashes
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 92\. 计算文件哈希
- en: File hashes are often used to ensure the integrity of content, such as in the
    case of downloading a file from the web. Although implementations of the SHA1
    and MD5 hashing functions can be found in a variety of libraries, we will again
    use the Crypto++ library. If you did not follow the previous problem and its solution,
    *Validating user credentials*, you should do so before continuing with this one,
    because the general information about the Crypto++ library that was given there
    will not be repeated here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 文件哈希经常用于确保内容的完整性，比如在从网上下载文件的情况下。虽然SHA1和MD5哈希函数的实现可以在各种库中找到，但我们将再次使用Crypto++库。如果您没有遵循前面的问题及其解决方案“验证用户凭据”，在继续本问题之前，您应该这样做，因为在那里提供的有关Crypto++库的一般信息将不会在这里重复。
- en: 'Computing a hash for a file is relatively simple using the Crypto++ library.
    The following code uses several components:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Crypto++库对文件进行哈希计算相对简单。以下代码使用了几个组件：
- en: '`FileSource`, which allows reading data from a file using a `BufferedTransformation`.
    By default, ...'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileSource`，它允许使用`BufferedTransformation`从文件中读取数据。默认情况下，...'
- en: 93\. Encrypting and decrypting files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 93\. 加密和解密文件
- en: 'In order to solve this problem with the Crypto++ library, we need to use several
    components:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要使用Crypto++库的几个组件：
- en: '`FileSource`, which allows reading data from a file using a `BufferedTransformation`.
    By default, it pumps data in blocks or chunks of 4,096 bytes, although manual
    pumping is also possible.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileSource`，它允许使用`BufferedTransformation`从文件中读取数据。默认情况下，它以4,096字节的块或块的形式泵送数据，尽管也可以进行手动泵送。'
- en: '`FileSink`, which allows you to write data to a file using a `BufferedTransformation`.
    It is the companion sink object to a `FileSource` source object.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileSink`，它允许您使用`BufferedTransformation`将数据写入文件。它是`FileSource`源对象的伴随接收对象。'
- en: '`DefaultEncryptorWithMAC` and `DefaultDecryptorWithMAC`, which encrypt and
    decrypt strings and files with an authentication tag to detect tampering. They
    use AES as the default block cipher and SHA256 as the default hash for the MAC.
    Each run through these two classes produces a different ...'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultEncryptorWithMAC`和`DefaultDecryptorWithMAC`，它们使用身份验证标签对字符串和文件进行加密和解密以检测篡改。它们使用AES作为默认块密码和SHA256作为MAC的默认哈希。通过这两个类的每次运行都会产生不同的...'
- en: 94\. File signing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 94\. 文件签名
- en: The process of signing and verifying is similar to encryption and decryption,
    although it differs in a fundamental way; encryption is done using the public
    key and decryption using the private key, while signing is done using the private
    key and verification is done using the public key. Signing helps a recipient that
    owns a public key to verify that a file is unmodified by using the signature and
    its public key. Having the public key, however, is not enough to change the file
    and sign it again. The Crypto++ library is used for solving this problem too.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 签名和验证的过程与加密和解密类似，尽管在根本上有所不同；加密使用公钥，解密使用私钥，而签名使用私钥，验证使用公钥。签名帮助拥有公钥的接收者通过使用签名和其公钥来验证文件是否未经修改。然而，仅拥有公钥是不足以更改文件并重新签名的。Crypto++库也用于解决这个问题。
- en: Although you can use any pair of public-private RSA keys to perform the signing
    and verification, in the implementation provided here the keys are randomly generated
    when ...
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以使用任何一对公钥-私钥RSA密钥对执行签名和验证，但在这里提供的实现中，密钥在...时是随机生成的
