["```cs\n<body>\n<div id=\"app\">Loading...</div>\n<div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n<a href=\"\" class=\"reload\">Reload</a>\n<a class=\"dismiss\">![](img/B16756_16_001.png)</a>\n</div>\n<script \nsrc=\"img/AuthenticationService.js\">\n</script>\n<script src=\"img/blazor.webassembly.js\"></script>\n</body> \n```", "```cs\npublic class Program\n{\n    public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"#app\");\n            // Services added to the application \n            // Dependency Injection engine declared with statements like:\n            // builder.Services.Add...\n            await builder.Build().RunAsync();\n        }\n    } \n```", "```cs\n<CascadingAuthenticationState>\n<Router AppAssembly=\"@typeof(Program).Assembly\">\n<Found Context=\"routeData\">\n<AuthorizeRouteView RouteData=\"@routeData\"\n                    DefaultLayout=\"@typeof(MainLayout)\">\n<NotAuthorized>\n@*Template that specifies what to show \nwhen user is not authorized *@\n</NotAuthorized>\n</AuthorizeRouteView>\n</Found>\n<NotFound>\n<LayoutView Layout=\"@typeof(MainLayout)\">\n<p>Sorry, there's nothing at this address.</p>\n</LayoutView>\n</NotFound>\n</Router>\n</CascadingAuthenticationState> \n```", "```cs\n<RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" /> \n```", "```cs\n<div class=\"content px-4\">\n      @Body\n</div> \n```", "```cs\n<NotAuthorized>\n@if (!context.User.Identity.IsAuthenticated)\n{\n<RedirectToLogin />\n}\nelse\n{\n<p>You are not authorized to access this resource.</p>\n}\n</NotAuthorized> \n```", "```cs\n@page \"/counter\"\n@layout MyCustomLayout\n@namespace BlazorApp2.Client.Pages\n@using Microsoft.AspNetCore.Authorization\n@implements MyInterface\n@inherits MyParentComponent\n@typeparam T\n@attribute [Authorize]\n@inject NavigationManager navigation \n```", "```cs\n@code{\n ...\n private string myField=\"0\";\n [Parameter]\n public int Quantity {get; set;}=0;\n private void IncrementQuantity ()\n {\n         Quantity++;\n }\n private void DecrementQuantity ()\n {\n        Quantity--;\n        if (Quantity<0) Quantity=0;\n }\n ... \n} \n```", "```cs\n<OrderItem Quantity =\"2\" Id=\"123\"/> \n```", "```cs\nOrderItem/{id}/{quantity} \n```", "```cs\n<modal title='() => \"Test title\" ' ...../> \n```", "```cs\n<myGeneric T= \"string\"\u2026\u2026/> \n```", "```cs\npublic partial class Counter\n{\n  [Parameter] \npublic int CurrentCounter {get; set;}=0;\n  ...\n  ...\n} \n```", "```cs\n<div  @attributes=\"AdditionalAttributes\">\n...\n</div>\n@code{\n[Parameter(CaptureUnmatchedValues = true)]\npublic Dictionary<string, object>\nAdditionalAttributes { get; set; }\n [Parameter]\n Public T Value {get; set;}\n} \n```", "```cs\n<Detail Value=\"myObject\" class=\"my-css-class\"/> \n```", "```cs\nRenderFragment myRenderFragment = @<p>The time is @DateTime.Now.</p>;\nRenderFragment<Customer> customerRenderFragment = \n(item) => @<p>Customer name is @item.Name.</p>; \n```", "```cs\nRenderFragment myRenderFragment = ...\n  ...\n<div>\n  ...\n  @myRenderFragment\n  ...\n</div>\n  ... \n```", "```cs\nCustomer myCustomer = ...\n  ...\n<div>\n  ...\n  @myRenderFragment(myCustomer)\n  ...\n</div>\n  ... \n```", "```cs\n[Parameter]\nPublic RenderFragment<Customer>CustomerTemplate {get; set;}\n[Parameter]\nPublic RenderFragment Title {get; set;} \n```", "```cs\n<Detail>\n<Title>\n<h5>This is a title</h5>\n</Title>\n<CustomerTemplate Context=customer>\n<p>Customer name is @customer.Name.</p>\n</CustomerTemplate >\n</Detail> \n```", "```cs\n[Parameter]\nPublic RenderFragment<Customer> ChildContent {get; set;}\n\u2026\u2026\u2026\u2026\u2026\n\u2026\u2026\u2026\u2026\u2026\n<IHaveJustOneRenderFragment Context=customer>\n<p>Customer name is @customer.Name.</p>\n</IHaveJustOneRenderFragment> \n```", "```cs\n@typeparam T\n@foreach(var item in Values)\n{\n@ChildContent(item)\n}\n@code {\n    [Parameter]\npublic RenderFragment<T> ChildContent { get; set; }\n    [Parameter]\npublic IEnumerable<T> Values { get; set; }\n} \n```", "```cs\n<Repeater Values=\"forecasts\" Context=\"forecast\">\n<tr>\n<td>@forecast.Date.ToShortDateString()</td>\n<td>@forecast.TemperatureC</td>\n<td>@forecast.TemperatureF</td>\n<td>@forecast.Summary</td>\n</tr>\n</Repeater> \n```", "```cs\n<CascadingValue  Value=\"new MyOptionsInstance{...}\">\n\u2026\u2026\n</CascadingValue > \n```", "```cs\n[CascadingParameter]\nprivateMyOptionsInstance options {get; set;} \n```", "```cs\n<p>Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\nprivate int currentCount = 0;\nprivate void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\nawaitMyEvent.InvokeAsync() \n```", "```cs\nawaitMyIntEvent.InvokeAsync(arg) \n```", "```cs\n[Parameter]\npublicEventCallback MyEvent {get; set;}\n[Parameter]\npublicEventCallback<int> MyIntEvent {get; set;}\n...\n...\n<ExampleComponent \nMyEvent=\"() => ...\" \nMyIntEvent = \"(i) =>...\" /> \n```", "```cs\n@onkeypress=\"KeyHandler\" @onkeypress:preventDefault=\"true\"\n@onkeypress=\"KeyHandler\" @onkeypress:preventDefault=\"true\" @onkeypress:stopPropagation  =\"true\" \n```", "```cs\n<MyComponent @bind-Value=\"MyObject.MyProperty\"/> \n```", "```cs\n<input type=\"text\" @bind=\"Value\" @attributes=\"AdditionalAttributes\"/>\n<button class=\"btn btn-secondary\" @onclick=\"Confirmed\">@ButtonText</button>\n@code {\n    [Parameter(CaptureUnmatchedValues = true)]\npublic Dictionary<string, object> AdditionalAttributes { get; set; }\n    [Parameter]\npublic string Value {get; set;}\n    [Parameter]\npublic EventCallback<string> ValueChanged { get; set; }\n    [Parameter]\npublic string ButtonText { get; set; }\nasync Task Confirmed()\n    {\n        await ValueChanged.InvokeAsync(Value);\n    }\n} \n```", "```cs\n<ConfirmedText @bind-Value=\"textValue\" ButtonText=\"Confirm\" />\n<p>\n    Confirmed value is: @textValue\n</p>\n@code{\nprivate string textValue = null;\n} \n```", "```cs\npublic override async Task SetParametersAsync(ParameterView parameters)\n{\nawait ...\nawait base.SetParametersAsync(parameters);\n} \n```", "```cs\nprotected override void OnInitialized()\n{\n    ...\n}\nprotected override async Task OnInitializedAsync()\n{\nawait ...\n} \n```", "```cs\nprotected override async Task OnParametersSetAsync()\n{\nawait ...\n}\nprotected override void OnParametersSet()\n{\n    ...\n} \n```", "```cs\nprotected override bool ShouldRender()\n{\n...\n} \n```", "```cs\nprotected override void OnAfterRender(bool firstRender)\n{\nif (firstRender)\n    {\n    }\n...\n}\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\nif (firstRender)\n    {\n    await...\n        ...\n    }\n    await ...\n} \n```", "```cs\n<EditForm Model=\"FixedInteger\"OnValidSubmit=\"@HandleValidSubmit\" >\n<DataAnnotationsValidator />\n<ValidationSummary />\n<div class=\"form-group\">\n<label for=\"integerfixed\">Integer value</label>\n<InputNumber @bind-Value=\"FixedInteger.Value\"\nid=\"integerfixed\" class=\"form-control\" />\n<ValidationMessage For=\"@(() => FixedInteger.Value)\" />\n</div>\n<button type=\"submit\" class=\"btn btn-primary\"> Submit</button>\n</EditForm> \n```", "```cs\n<InputSelect @bind-Value=\"order.ProductColor\">\n<option value=\"\">Select a color ...</option>\n<option value=\"Red\">Red</option>\n<option value=\"Blue\">Blue</option>\n<option value=\"White\">White</option>\n</InputSelect> \n```", "```cs\n<InputRadioGroup Name=\"color\" @bind-Value=\"order.Color\">\n<InputRadio Name=\"color\" Value=\"AllColors.Red\" /> Red<br>\n<InputRadio Name=\"color\" Value=\"AllColors.Blue\" /> Blue<br>\n<InputRadio Name=\"color\" Value=\"AllColors.White\" /> White<br>\n</InputRadioGroup> \n```", "```cs\n<Modal @ref=\"myModal\">\n...\n</Modal>\n...\n<button type=\"button\" class=\"btn btn-primary\" \n@onclick=\"() => myModal.Show()\">\nOpen modal\n</button>\n...\n@code{\nprivate Modal  myModal {get; set;}\n ...\n} \n```", "```cs\nT result = await jsRuntime.InvokeAsync<T>(\n\"<name of JavaScript function or method>\", arg1, arg2....); \n```", "```cs\nawaitjsRuntime.InvokeAsync(\n\"<name of JavaScript function or method>\", arg1, arg2....); \n```", "```cs\n_content/<dll name>/<file path in wwwroot> \n```", "```cs\n_content/MyCompany.MyLibrary/js/myJsFile.js \n```", "```cs\n// _content/MyCompany.MyLibrary/js/myJsFile.js  JavaScript file \nexport function myFunction ()\n{\n...\n}\n...\n//C# code\nvar module = await jsRuntime.InvokeAsync<JSObjectReference>(\n    \"import\", \"./_content/MyCompany.MyLibrary/js/myJsFile.js\");\n...\nT res= await module.InvokeAsync<T>(\"myFunction\") \n```", "```cs\n    var objRef = DotNetObjectReference.Create(myObjectInstance);\n    //pass objRef to JavaScript\n    ....\n    //dispose the DotNetObjectReference\n    objRef.Dispose() \n    ```", "```cs\n    dotnetObject.invokeMethodAsync(\"<dll name>\", \"MyMethod\", arg1, ...).\n    then(result => {...}) \n    ```", "```cs\nservices.AddScoped<AuthenticationStateProvider, MyAuthStateProvider>(); \n```", "```cs\n[CascadingParameter]\nprivate Task<AuthenticationState>myAuthenticationStateTask { get; set; }\n\u2026\u2026\nClaimsPrincipal user = (await myAuthenticationStateTask).User; \n```", "```cs\n<AuthorizeView Roles=\"Admin,SuperUser\">\n//authorized content\n</AuthorizeView> \n```", "```cs\n<AuthorizeView>\n<Authorized>\n...\n</Authorized>\n<Authorizing>\n        ...\n</Authorizing>\n<NotAuthorized>\n        ...\n</NotAuthorized>\n</AuthorizeView> \n```", "```cs\nbuilder.Services.AddApiAuthorization(); \n```", "```cs\n@page \"/authentication/{action}\"\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n<RemoteAuthenticatorView Action=\"@Action\"  />\n@code{\n    [Parameter] public string Action { get; set; }\n} \n```", "```cs\nbuilder.Services.AddHttpClient(\"BlazorReview.ServerAPI\", client =>\n    client.BaseAddress = new Uri(builder.HostEnvironment.BaseAddress)\n.AddHttpMessageHandler<BaseAddressAuthorizationMessageHandler>(); \n```", "```cs\nprotected override async Task<HttpResponseMessage> SendAsync(\n        HttpRequestMessage request,\n        CancellationToken cancellationToken)\n{\n//modify request \n   ...\nHttpResponseMessage= response = await base.SendAsync(\nrequest, cancellationToken);\n//modify response\n   ...\nreturn response;\n} \n```", "```cs\ntry\n    {\n        //server call here\n    }\ncatch (AccessTokenNotAvailableException exception)\n    {\n        exception.Redirect();\n    } \n```", "```cs\nbuilder.Services.AddScoped(sp =>\n                sp.GetRequiredService<IHttpClientFactory>()\n                    .CreateClient(\"BlazorReview.ServerAPI\")); \n```", "```cs\n\"ConnectionStrings\": {\n        \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=package-management;Trusted_Connection=True;MultipleActiveResultSets=true\"\n }, \n```", "```cs\nservices.AddDbLayer(Configuration\n                .GetConnectionString(\"DefaultConnection\"),\n                \"PackagesManagementDB\"); \n```", "```cs\nservices.AddAllQueries(this.GetType().Assembly); \n```", "```cs\nusing System;\nnamespace PackagesManagementBlazor.Shared\n{\n    public class PackageInfosViewModel\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Price { get; set; }\n        public int DurationInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public string DestinationName { get; set; }\n        public int DestinationId { get; set; }\n        public override string ToString()\n        {\n            return string.Format(\"{0}. {1} days in {2}, price: {3}\",\n                Name, DurationInDays, DestinationName, Price);\n        }\n    }\n} \n```", "```cs\nusing System.Collections.Generic;\nnamespace PackagesManagementBlazor.Shared\n{\n    public class PackagesListViewModel\n    {\n        public IEnumerable<PackageInfosViewModel>\n            Items { get; set; }\n    }\n} \n```", "```cs\nusing DDD.ApplicationLayer;\nusing PackagesManagementBlazor.Shared;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nnamespace PackagesManagementBlazor.Server.Queries\n{\n    public interface IPackagesListByLocationQuery: IQuery\n    {\n        Task<IEnumerable<PackageInfosViewModel>>\n            GetPackagesOf(string location); \n    }\n} \n```", "```cs\npublic class PackagesListByLocationQuery:IPackagesListByLocationQuery\n    {\n        private readonly MainDbContext ctx;\n        public PackagesListByLocationQuery(MainDbContext ctx)\n        {\n            this.ctx = ctx;\n        }\n        public async Task<IEnumerable<PackageInfosViewModel>> GetPackagesOf(string location)\n        {\n            return await ctx.Packages\n                .Where(m => m.MyDestination.Name.StartsWith(location))\n                .Select(m => new PackageInfosViewModel\n            {\n                StartValidityDate = m.StartValidityDate,\n                EndValidityDate = m.EndValidityDate,\n                Name = m.Name,\n                DurationInDays = m.DurationInDays,\n                Id = m.Id,\n                Price = m.Price,\n                DestinationName = m.MyDestination.Name,\n                DestinationId = m.DestinationId\n            })\n                .OrderByDescending(m=> m.EndValidityDate)\n                .ToListAsync();\n        }\n    } \n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing PackagesManagementBlazor.Server.Queries;\nusing PackagesManagementBlazor.Shared;\nusing System.Threading.Tasks;\nnamespace PackagesManagementBlazor.Server.Controllers\n{\n    [Route(\"[controller]\")]\n    [ApiController]\n    public class PackagesController : ControllerBase\n    {\n        // GET api/<PackagesController>/Flor\n        [HttpGet(\"{location}\")]\n        public async Task<PackagesListViewModel> Get(string location, \n            [FromServices] IPackagesListByLocationQuery query )\n        {\n            return new PackagesListViewModel\n            {\n                Items = await query.GetPackagesOf(location)\n            };\n        }  \n    }\n} \n```", "```cs\nusing System.ComponentModel.DataAnnotations;\nnamespace PackagesManagementBlazor.Client.ViewModels\n{\n    public class SearchViewModel\n    {\n        [Required]\n        public string Location { get; set; }\n    }\n} \n```", "```cs\nnamespace PackagesManagementBlazor.Client.Services\n{\n    public class PackagesClient\n    {\n        private HttpClient client;\n        public PackagesClient(HttpClient client)\n        {\n            this.client = client;\n        }\n        public async Task<IEnumerable<PackageInfosViewModel>>\n            GetByLocation(string location)\n        {\n            var result =\n                await client.GetFromJsonAsync<PackagesListViewModel>\n                    (\"Packages/\" + Uri.EscapeDataString(location));\n            return result.Items;\n        }\n    }\n} \n```", "```cs\nbuilder.Services.AddScoped<PackagesClient>(); \n```", "```cs\n@using PackagesManagementBlazor.Client.ViewModels\n@using PackagesManagementBlazor.Shared\n@using PackagesManagementBlazor.Client.Services\n@inject PackagesClient client\n@page \"/\"\n<h1>Search packages by location</h1>\n<EditForm Model=\"search\"\n          OnValidSubmit=\"Search\">\n<DataAnnotationsValidator />\n<div class=\"form-group\">\n<label for=\"integerfixed\">Insert location starting chars</label>\n<InputText @bind-Value=\"search.Location\" />\n<ValidationMessage For=\"@(() => search.Location)\" />\n</div>\n<button type=\"submit\" class=\"btn btn-primary\">\n        Search\n</button>\n</EditForm>\n@code{\n    SearchViewModel search { get; set; } \n= new SearchViewModel();\n    async Task Search()\n    {\n        ...\n    }\n} \n```", "```cs\n@if (packages != null)\n{\n...\n}\nelse if (loading)\n{\n    <p><em>Loading...</em></p>\n}\n@code{\n    SearchViewModel search { get; set; } = new SearchViewModel();\n    private IEnumerable<PackageInfosViewModel> packages;\n    bool loading;\n    async Task Search()\n    {\n        packages = null;\n        loading = true;\n        await InvokeAsync(StateHasChanged);\n        packages = await client.GetByLocation(search.Location);\n        loading = false;\n    }\n} \n```", "```cs\n<div class=\"table-responsive\">\n  <table class=\"table\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Destination</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Duration/days</th>\n        <th scope=\"col\">Price</th>\n        <th scope=\"col\">Available from</th>\n        <th scope=\"col\">Available to</th>\n      </tr>\n    </thead>\n    <tbody>\n      @foreach (var package in packages)\n      {\n        <tr>\n          <td>\n            @package.DestinationName\n          </td>\n          <td>\n            @package.Name\n          </td>\n          <td>\n            @package.DurationInDays\n          </td>\n          <td>\n            @package.Price\n          </td>\n          <td>\n            @(package.StartValidityDate.HasValue ?\n              package.StartValidityDate.Value.ToString(\"d\")\n              :\n              String.Empty)\n          </td>\n          <td>\n            @(package.EndValidityDate.HasValue ?\n              package.EndValidityDate.Value.ToString(\"d\")\n              :\n              String.Empty)\n          </td>\n        </tr>\n      }\n    </tbody>\n  </table>\n</div> \n```"]