["```cs\npublic class MessageDispatcher \n{ \n  public const string SmtpAddress = \"smpt.office365.com\"; \n\n  public void SendEmail(string fromAddress, string toAddress, \n  string subject, string body) \n  { \n\n  } \n}\n```", "```cs\npublic int GetUserId(string userName) \n{ \n  //Get user ID from database by passing the username \n} \n\npublic List<Document> GetUserDocuments(int userID) \n{ \n  //Get list of documents by calling some API \n} \n```", "```cs\npublic void LogException(Exception ex) \n{ \n  SendEmail(ex); \n  LogToDatabase(ex); \n} \n```", "```cs\npublic void LogException(Exception ex, bool sendEmail, bool logToDb) \n{ \n  if (sendEmail) \n  { \n    SendEmail(ex); \n  } \n\n  if (logToDb) \n  { \n    LogToDatabase(ex); \n  } \n}\n```", "```cs\npublic class Logger \n{ \n  public virtual void LogMessage(string message) \n  { \n    //This method logs information into file system \n    LogToFileSystem(message); \n  } \n\n  private void LogtoFileSystem(string message) { \n    //Log to file system \n  } \n} \n```", "```cs\npublic abstract class Logger \n{ \n  public abstract void LogMessage(string message); \n\n} \n\npublic class FileLogger : Logger \n{ \n  public override void LogMessage(string message) \n  { \n    //Log to file system \n  } \n} \n\npublic class DatabaseLogger : Logger \n{ \n  public override void LogMessage(string message) \n  { \n    //Log to database \n  } \n} \n\n```", "```cs\npublic abstract class MessageStrategy \n{ \n  public abstract void SendMessage(Message message); \n}\n```", "```cs\npublic class EmailMessage : MessageStrategy \n{ \n  public override void SendMessage(Message message) \n  { \n    //Send Email \n  } \n} \n\npublic class SMSMessage : MessageStrategy \n{ \n  public override void SendMessage(Message message) \n  { \n    //Send SMS  \n  } \n} \n```", "```cs\npublic class MessageSender \n{ \n  private MessageStrategy _messageStrategy; \n  public void SetMessageStrategy(MessageStrategy messageStrategy) \n  { \n    _messageStrategy = messageStrategy; \n  } \n\n  public void SendMessage(Message message) \n  { \n    _messageStrategy.SendMessage(message); \n  } \n\n} \n\n```", "```cs\nstatic void Main(string[] args) \n{ \n  MessageSender sender = new MessageSender(); \n  sender.SetMessageStrategy(new EmailMessage()); \n  sender.SendMessage(new Message { MessageID = 1, MessageTo = \"jason@tfx.com\", \n  MessageFrom = \"donotreply@tfx.com\", MessageBody = \"Hello readers\", \n  MessageSubject = \"Chapter 5\" }); \n}\n```", "```cs\npublic interface IMultiFunctionPrinter \n{ \n  void Print(); \n  void Scan(); \n}\n```", "```cs\npublic class OfficePrinter: IMultiFunctionPrinter \n{ \n  //Office printer can print the page \n  public void Print() { } \n  //Office printer can scan the page \n  public void Scan() { } \n} \n\npublic class DeskjetPrinter : IMultiFunctionPrinter \n{ \n  //Deskjet printer print the page \n  public void Print() { } \n  //Deskjet printer does not contain this feature \n  public void Scan() => throw new NotImplementedException(); \n}\n```", "```cs\npublic interface IPrinter \n{ \n  void Print(); \n} \n\npublic interface IScanner \n{ \n  void Scanner(); \n} \n\npublic interface MultiFunctionPrinter : IPrinter, IScanner \n{  \n\n} \n```", "```cs\npublic class DeskjetPrinter : IPrinter \n{ \n  //Deskjet printer print the page \n  public void Print() { } \n} \n\npublic class OfficePrinter: IMultiFunctionPrinter \n{ \n  //Office printer can print the page \n  public void Print() { } \n  //Office printer can scan the page \n  public void Scan() { } \n}\n```", "```cs\npublic interface ILogger \n{ \n  void WriteLog(string message); \n  List<string> GetLogs(); \n} \n\n/// <summary> \n/// Logger that prints the information on application console window \n/// </summary> \npublic class ConsoleLogger : ILogger \n{ \n  public List<string> GetLogs() => throw new NotImplementedException(); \n  public void WriteLog(string message) \n  { \n    Console.WriteLine(message); \n  } \n} \n\n/// <summary> \n/// Logger that writes the log into database and persist them \n/// </summary> \npublic class DatabaseLogger : ILogger \n{ \n  public List<string> GetLogs() \n  { \n    //do some work to get logs stored in database, as the actual code \n    //in not written so returning null \n    return null;  \n  } \n  public void WriteLog(string message) \n  { \n    //do some work to write log into database \n  } \n}\n```", "```cs\npublic interface ILogger \n{ \n  void WriteLog(string message); \n\n} \n\npublic interface PersistenceLogger: ILogger \n{ \n  List<string> GetLogs(); \n} \n\n/// <summary> \n/// Logger that prints the information on application console window \n/// </summary> \npublic class ConsoleLogger : ILogger \n{ \n  public void WriteLog(string message) \n  { \n    Console.WriteLine(message); \n  } \n} \n\n/// <summary> \n/// Logger that writes the log into database and persist them \n/// </summary> \npublic class DatabaseLogger : PersistenceLogger \n{ \n  public List<string> GetLogs() \n  { \n    //do some work to get logs stored in database, as the actual code \n    //in not written so returning null \n    return null; \n  } \n  public void WriteLog(string message) \n  { \n    //do some work to write log into database \n  } \n}\n```", "```cs\npublic class EmployeeManager \n{ \n\n  public List<Employee> GetEmployees(int id) \n  { \n    //logic to Get employees \n    return null; \n  } \n  public void SaveEmployee(Employee emp) \n  { \n    //logic to Save employee \n  } \n  public void DeleteEmployee(int id) \n  { \n    //Logic to delete employee \n  } \n\n} \n```", "```cs\npublic interface IEmployeeManager \n{ \n  void DeleteEmployee(int id); \n  System.Collections.Generic.List<Employee> GetEmployees(int id); \n  void SaveEmployee(Employee emp); \n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services) \n{ \n  services.AddMvc(); \n  services.AddMemoryCache(); \n}\n```"]