["```\n**## AngularJS Container build  \nFROM nginx:latest \n\n# Download packages \nRUN apt-get update \nRUN apt-get install -y curl   \\ \n                   git    \\ \n                   ruby \\ \n                   ruby-dev \\     \n                   build-essential \n\n# Copy angular files \nCOPY . /usr/share/nginx \n\n# Installation \nRUN curl -sL https://deb.nodesource.com/setup | bash - \nRUN apt-get install -y nodejs \\ \n                  rubygems \nRUN apt-get clean \nWORKDIR /usr/share/nginx \nRUN npm install npm -g \nRUN npm install -g bower \nRUN npm install  -g grunt-cli \nRUN gem install sass \nRUN gem install compass \nRUN npm cache clean \nRUN npm install \nRUN bower -allow-root install -g \n\n# Building \nRUN grunt build \n\n# Open port and start nginx \nEXPOSE 80 \nCMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"]**\n\n```", "```\n**## Ruby-on-Rails Container build \nFROM rails:onbuild \n\n# Create and migrate DB \nRUN bundle exec rake db:create \nRUN bundle exec rake db:migrate \n\n# Start rails server \nCMD [\"bundle\", \"exec\", \"rails\", \"server\", \"-b\", \"0.0.0.0\"]**\n\n```", "```\n **## PostgreSQL Containers build \n# cloudconsulted/postgres is a Postgres setup that accepts remote connections from Docker IP (172.17.0.1/16).  We can therefore make use of this image directory so there is no need to create a new Docker file here.** \n\n```", "```\n**# Directly create and run the Redis image \ndocker run -d -name redis -p 6379:6379 redis \n\n## Node Container \n# Set the base image to Ubuntu \nFROM ubuntu \n\n# File Author / Maintainer \nMAINTAINER John Wooten @CONSULTED <jwooten@cloudconsulted.com> \n\n# Install Node.js and other dependencies \nRUN apt-get update && \\ \n        apt-get -y install curl && \\ \n        curl -sL https://deb.nodesource.com/setup | sudo bash - && \\ \n        apt-get -y install python build-essential nodejs \n\n# Install nodemon \nRUN npm install -g nodemon \n\n# Provides cached layer for node_modules \nADD package.json /tmp/package.json \nRUN cd /tmp && npm install \nRUN mkdir -p /src && cp -a /tmp/node_modules /src/ \n\n# Define working directory \nWORKDIR /src \nADD . /src \n\n# Expose portability \nEXPOSE 8080 \n\n# Run app using nodemon \nCMD [\"nodemon\", \"/src/index.js\"] \n\n## Nginx Containers build \n# Set nginx base image \nFROM nginx \n\n# File Author / Maintainer \nMAINTAINER John Wooten @CONSULTED <jwooten@cloudconsulted.com> \n\n# Copy custom configuration file from the current directory \nCOPY nginx.conf /etc/nginx/nginx.conf \n\n## Docker Compose \nnginx: \nbuild: ./nginx \nlinks: \n - node1:node1 \n - node2:node2 \n - node3:node3 \nports: \n- \"80:80\" \nnode1: \nbuild: ./node \nlinks: \n - redis \nports: \n - \"8080\" \nnode2: \nbuild: ./node \nlinks: \n - redis \nports: \n- \"8080\" \nnode3: \nbuild: ./node \nlinks: \n - redis \nports: \n- \"8080\" \nredis: \nimage: redis \nports: \n - \"6379\"**\n\n```", "```\n**npm install -g dockunit**\n\n```", "```\n{ \n  \"containers\": [ \n    { \n      \"prettyName\": \"Node 0.10.x\", \n      \"image\": \"google/nodejs:latest\", \n      \"beforeScripts\": [ \n        \"npm install -g mocha\" \n      ], \n      \"testCommand\": \"mocha\" \n    }, \n    { \n      \"prettyName\": \"Node 0.12\", \n      \"image\": \"tlovett1/nodejs:0.12\", \n      \"beforeScripts\": [ \n        \"npm install -g mocha\" \n      ], \n      \"testCommand\": \"mocha\" \n    } \n  ] \n} \n\n```", "```\n**# LEMP stack decoupled as separate docker container s \nFROM ubuntu:14.04 \nMAINTAINER John Wooten @CONSULTED <jwooten@cloudconsulted.com> \n\nRUN apt-get update \nRUN apt-get -y upgrade \n\n# seed database password \nCOPY mysqlpwdseed /root/mysqlpwdseed \nRUN debconf-set-selections /root/mysqlpwdseed \n\nRUN apt-get -y install mysql-server \n\nRUN sed -i -e\"s/^bind-address\\s*=\\s*127.0.0.1/bind-address = 0.0.0.0/\" /etc/mysql/my.cnf \n\nRUN /usr/sbin/mysqld & \\ \n    sleep 10s &&\\ \n    echo \"GRANT ALL ON *.* TO admin@'%' IDENTIFIED BY 'secret' WITH GRANT OPTION; FLUSH PRIVILEGES\" | mysql -u root --password=secret &&\\ \n    echo \"create database test\" | mysql -u root --password=secret \n\n# persistence: http://txt.fliglio.com/2013/11/creating-a-mysql-docker-container/ \n\nEXPOSE 3306 \n\nCMD [\"/usr/bin/mysqld_safe\"]**\n\n```", "```\n**# LEMP stack decoupled as separate docker container s \nFROM ubuntu:14.04 \nMAINTAINER John Wooten @CONSULTED <jwooten@cloudconsulted.com> \n\n## install nginx \nRUN apt-get update \nRUN apt-get -y upgrade \nRUN apt-get -y install nginx \nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf \nRUN mv /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak \nCOPY default /etc/nginx/sites-available/default \n\n## install PHP \nRUN apt-get -y install php5-fpm php5-mysql \nRUN sed -i s/\\;cgi\\.fix_pathinfo\\s*\\=\\s*1/cgi.fix_pathinfo\\=0/ /etc/php5/fpm/php.ini \n\n# prepare php test scripts \nRUN echo \"<?php phpinfo(); ?>\" > /usr/share/nginx/html/info.php \nADD wall.php /usr/share/nginx/html/wall.php \n\n# add volumes for debug and file manipulation \nVOLUME [\"/var/log/\", \"/usr/share/nginx/html/\"] \n\nEXPOSE 80 \n\nCMD service php5-fpm start && nginx**\n\n```"]