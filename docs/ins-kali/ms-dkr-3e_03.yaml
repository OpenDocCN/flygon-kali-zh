- en: Storing and Distributing Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和分发镜像
- en: In this chapter, we will cover several services, such as Docker Hub, which allow
    you to store your images, and also Docker Registry, which you can use to run your
    local storage for Docker containers. We will review the differences between the
    services and when and how to use each of them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖几项服务，如Docker Hub，允许您存储您的镜像，以及Docker Registry，您可以用来运行Docker容器的本地存储。我们将审查这些服务之间的区别，以及何时以及如何使用它们。
- en: 'This chapter will also cover how to set up automated builds using Webhooks,
    as well as all the pieces that are required to set them up. Let''s take a quick
    look at the topics we will be covering in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还将介绍如何使用Webhooks设置自动构建，以及设置它们所需的所有组件。让我们快速看一下本章将涵盖的主题：
- en: Docker Hub
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub
- en: Docker Store
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Store
- en: Docker Registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Registry
- en: Third-party registries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方注册表
- en: Microbadger
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microbadger
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using our Docker installation to build images. As
    before, although the screenshots in this chapter will be from my preferred operating
    system, macOS, the commands we will be running will work on all three of the operating
    systems covered in the previous chapter. A full copy of the code used in this
    chapter can be found at: [https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们的Docker安装来构建镜像。与之前一样，尽管本章的截图将来自我首选的操作系统macOS，但我们将运行的命令将适用于上一章中涵盖的所有三个操作系统。本章中使用的代码的完整副本可以在以下位置找到：[https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter03)。
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[http://bit.ly/2EBVJjJ](http://bit.ly/2EBVJjJ)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2EBVJjJ](http://bit.ly/2EBVJjJ)'
- en: Docker Hub
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Hub
- en: While we were introduced to Docker Hub in the previous two chapters, we haven't
    interacted with it much other than when using the `docker image pull` command
    to download remote images.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在前两章中我们介绍了Docker Hub，但除了使用`docker image pull`命令下载远程镜像之外，我们并没有与其互动太多。
- en: In this section, we will focus on Docker Hub, which has both a freely available
    option, where you can only host publicly accessible images, and also a subscription
    option, which allows you to host your own private images. We will focus on the
    web aspect of Docker Hub and the management you can do there.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点关注Docker Hub，它有一个免费的选项，您只能托管公开可访问的镜像，还有一个订阅选项，允许您托管自己的私有镜像。我们将关注Docker
    Hub的网络方面以及您可以在那里进行的管理。
- en: The home page, which can be found at [https://hub.docker.com/](https://hub.docker.com/), contains
    a Sign-Up form and, in the top-right, an option to Sign in. The odds are that
    if you have been dabbling with Docker, then you already have a Docker ID. If you
    don't, use the Sign-Up form on the home page to create one. If you already have
    a Docker ID, then simply click Sign in.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主页位于[https://hub.docker.com/](https://hub.docker.com/)，包含一个注册表格，并且在右上角有一个登录选项。如果您一直在尝试使用Docker，那么您可能已经有一个Docker
    ID。如果没有，请使用主页上的注册表格创建一个。如果您已经有Docker ID，那么只需点击登录。
- en: Docker Hub is free to use, and if you do not need to upload or manage your own
    images, you do not need an account to search for pull images.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub是免费使用的，如果您不需要上传或管理自己的镜像，您不需要帐户来搜索拉取镜像。
- en: Dashboard
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'After logging in to Docker Hub, you will be taken to the following landing
    page. This page is known as the **Dashboard** of Docker Hub:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到Docker Hub后，您将进入以下着陆页。这个页面被称为Docker Hub的**仪表板**：
- en: '![](Images/38b9210c-61b3-4d7c-a2b0-87a738efdfd8.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/38b9210c-61b3-4d7c-a2b0-87a738efdfd8.png)'
- en: From here, you can get to all the other sub-pages of Docker Hub. However, before
    we look at those sections, we should talk a little about the dashboard. From here,
    you can view all of your images, both public and private. They are ordered first
    by the number of stars and then by the number of pulls; this order cannot be changed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以进入Docker Hub的所有其他子页面。但是，在我们查看这些部分之前，我们应该稍微谈一下仪表板。从这里，您可以查看所有您的镜像，包括公共和私有。它们首先按星星数量排序，然后按拉取数量排序；这个顺序不能改变。
- en: In the upcoming sections, we will go through everything you see on the dashboard,
     starting with the dark blue menu at the top of the page.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将逐一介绍您在仪表板上看到的所有内容，从页面顶部的深蓝色菜单开始。
- en: Explore
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索
- en: 'The **Explore** option takes you to a list of the official Docker images; like
    your **Dashboard**, they are ordered by stars and then pulls. As you can see from
    the following screen, each of the official images has had over 10 million pulls:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**探索**选项会带您进入官方Docker镜像列表；就像您的**仪表板**一样，它们按星星和拉取次数排序。正如您从以下屏幕中看到的，每个官方镜像的拉取次数都超过1000万次：'
- en: '![](Images/7afcf1af-ec1e-4b5a-8e65-1b2f7282d0a3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7afcf1af-ec1e-4b5a-8e65-1b2f7282d0a3.png)'
- en: This isn't the preferred Docker Store method of downloading official images.
    Docker would prefer you used the Docker Store now, but as we will be looking at
    this in more detail later in the chapter, we won't go into any more detail here.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是首选的Docker Store下载官方镜像的方法。Docker希望您现在使用Docker Store，但是由于我们将在本章后面更详细地讨论这一点，我们在这里不会再详细介绍。
- en: Organizations
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织
- en: '**Organizations** are those which you have either created or have been added
    to. Organizations allow you to layer on control for, say, a project that multiple
    people are collaborating on. The organization gets its own settings, such as whether
    to store repositories as public or private by default, or changing plans that
    will allow different numbers of private repositories and separate repositories
    altogether from the ones you or others have.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**组织**是您创建或被添加到的组织。组织允许您为多人合作的项目添加控制层。组织有自己的设置，例如默认情况下是否将存储库存储为公共或私有，或更改计划，允许不同数量的私有存储库，并将存储库与您或其他人完全分开。'
- en: '![](Images/d413a10e-eab5-4e2b-96c5-ec0f63b8a236.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d413a10e-eab5-4e2b-96c5-ec0f63b8a236.png)'
- en: 'You can also access or switch between accounts or organizations from the **Dashboard**
    just below the Docker logo, where you will typically see your username when you
    log in:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从**仪表板**下方的Docker标志处访问或切换帐户或组织，通常在您登录时会看到您的用户名：
- en: '![](Images/22313429-bbf7-4f75-9b8d-5506b6e5f7b2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/22313429-bbf7-4f75-9b8d-5506b6e5f7b2.png)'
- en: Create
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建
- en: 'We will go into more detail about creating a repository and an automated build
    in a later section, so I will not go into any detail here, other than to say that
    the **Create** menu gives you three options:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的部分详细介绍如何创建存储库和自动构建，因此我在这里不会详细介绍，除了**创建**菜单给您三个选项：
- en: '**Create Repository**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建存储库**'
- en: '**Create Automated Build**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建自动构建**'
- en: '**Create Organization**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建组织**'
- en: 'These options can be seen in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项可以在以下截图中看到：
- en: '![](Images/dcdcaa8c-ff8c-4ee3-a44f-02dde79a1dc1.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/dcdcaa8c-ff8c-4ee3-a44f-02dde79a1dc1.png)'
- en: Profile and settings
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个人资料和设置
- en: 'The final option in the top menu is about managing **My Profile** and **Settings**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部菜单中的最后一个选项是关于管理**我的个人资料**和**设置**：
- en: '![](Images/94f37f95-80e0-46e1-b62d-e5bf664e66b0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/94f37f95-80e0-46e1-b62d-e5bf664e66b0.png)'
- en: 'The settings page allows you to set up your public profile, which includes
    the following options:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 设置页面允许您设置您的公共个人资料，其中包括以下选项：
- en: Changing your password
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改您的密码
- en: Seeing what organization you belong to
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看您所属的组织
- en: Seeing what subscriptions for email updates you have
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看您订阅的电子邮件更新
- en: Setting specific notifications you would like to receive
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您想要接收的特定通知
- en: Setting which authorized services have access to your information
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置哪些授权服务可以访问您的信息
- en: Seeing linked accounts (such as your GitHub or Bitbucket accounts)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看已链接的帐户（例如您的GitHub或Bitbucket帐户）
- en: Viewing your enterprise licenses, billing, and global settings
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看您的企业许可证、计费和全局设置
- en: 'The only global setting as of now is the choice between having your repositories
    default to **public** or **private** upon creation. The default is to create them
    as **public** repositories:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目前唯一的全局设置是在创建时选择您的存储库默认为**公共**或**私有**。默认情况下，它们被创建为**公共**存储库：
- en: '![](Images/f9ed7275-c2eb-4c3c-9df5-286deb542a46.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f9ed7275-c2eb-4c3c-9df5-286deb542a46.png)'
- en: The My Profile menu item takes you to your public profile page; mine can be
    found at [https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “我的个人资料”菜单项将带您到您的公共个人资料页面；我的个人资料可以在[https://hub.docker.com/u/russmckendrick/](https://hub.docker.com/u/russmckendrick/)找到。
- en: Other menu options
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他菜单选项
- en: 'Below the dark blue bar at the top of the **Dashboard** page are two more areas
    that we haven''t yet covered. The first, the **Stars** page, allows you to see
    which repositories you yourself have starred:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在**仪表板**页面顶部的深蓝色条下面还有两个我们尚未涵盖的区域。第一个是**星标**页面，允许您查看您自己标记为星标的存储库：
- en: '![](Images/b777bca4-59f4-4316-b611-3131dbb57188.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b777bca4-59f4-4316-b611-3131dbb57188.png)'
- en: This is very useful if you come across some repositories that you prefer to
    use, and want to access them to see whether they have been updated recently, or
    whether any other changes have occurred on these repositories.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现一些您喜欢使用的存储库，并希望访问它们以查看它们是否最近已更新，或者这些存储库是否发生了其他任何更改，这将非常有用。
- en: The second is a new setting, **Contributed**. Clicking this will reveal a section
    in which there will be a list of repositories you have made contributions to outside
    of the ones within your own **Repositories** list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是一个新的设置，**贡献**。点击这个将会显示一个部分，其中将列出您在自己的**存储库**列表之外做出贡献的存储库的列表。
- en: Creating an automated build
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自动构建
- en: In this section, we will look at automated builds. Automated builds are those
    that you can link to your GitHub or Bitbucket account(s), and as you update the
    code in your code repository, you can have the image automatically built on Docker
    Hub. We will look at all the pieces required to do so, and by the end, you'll
    be able to automate all your builds.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下自动构建。自动构建是您可以链接到您的GitHub或Bitbucket帐户的构建，当您更新代码存储库中的代码时，您可以在Docker
    Hub上自动构建镜像。我们将看看完成此操作所需的所有部分，最后，您将能够自动化所有您的构建。
- en: Setting up your code
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的代码
- en: The first step to creating an automated build is to set up your GitHub or Bitbucket
    repository. These are the two options you have while selecting where to store
    your code. For our example, I will be using GitHub, but the setup will be the
    same for GitHub and Bitbucket.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自动构建的第一步是设置您的GitHub或Bitbucket存储库。在选择存储代码的位置时，您有两个选项。在我们的示例中，我将使用GitHub，但是GitHub和Bitbucket的设置将是相同的。
- en: 'In fact, I will be using the repository that accompanies this book. As the
    repository is publicly available, you could fork it and follow along using your
    own GitHub account, as I have done in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我将使用附带本书的存储库。由于存储库是公开可用的，您可以fork它，并使用您自己的GitHub帐户跟随，就像我在下面的截图中所做的那样：
- en: '![](Images/efc78b12-ed7f-4204-83d4-348842b88d6b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/efc78b12-ed7f-4204-83d4-348842b88d6b.png)'
- en: In [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building Container
    Images*, we worked through a few different Dockerfiles. We will be using these
    for our automated builds. If you remember, we installed nginx and added a simple
    page with the message **Hello world! This is being served from Docker**, and we also had
    a multi-stage build.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml)中，*构建容器映像*，我们通过了几个不同的Dockerfiles。我们将使用这些来进行自动构建。如果您还记得，我们安装了nginx，并添加了一个带有消息**Hello
    world! This is being served from Docker**的简单页面，我们还进行了多阶段构建。
- en: Setting up Docker Hub
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Docker Hub
- en: 'In Docker Hub, we are going to use the Create drop-down menu and select Create
    Automated Build. After selecting it, we will be taken to a screen that will show
    you the accounts you have linked to either GitHub or Bitbucket:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Hub中，我们将使用“创建”下拉菜单并选择“创建自动构建”。选择后，我们将被带到一个屏幕，显示您已链接到GitHub或Bitbucket的帐户：
- en: '![](Images/0f0c0290-2ffa-4764-9c03-e24569febe0a.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0f0c0290-2ffa-4764-9c03-e24569febe0a.png)'
- en: As you can see from the preceding screenshot, I already have my GitHub account
    linked to my Docker Hub account. The process of linking the two tools was simple,
    and all that I had to do was to allow Docker Hub permission to access my GitHub
    account by following the on-screen instructions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中可以看出，我已经将我的GitHub帐户链接到了Docker Hub帐户。链接这两个工具的过程很简单，我所要做的就是按照屏幕上的说明，允许Docker
    Hub访问我的GitHub帐户。
- en: 'When connecting Docker Hub to GitHub there are two options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当将Docker Hub连接到GitHub时，有两个选项：
- en: '**Public and Private**: This is the recommended option. Docker Hub will have
    access to all of your public and private repositories, as well as organizations.
    Docker Hub will also be able to configure the Webhooks needed when setting up
    automated builds.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共和私有**：这是推荐的选项。Docker Hub将可以访问您的所有公共和私有存储库，以及组织。在设置自动构建时，Docker Hub还将能够配置所需的Webhooks。'
- en: '**Limited Access**: This limits Docker Hubs access to publicly available repositories
    and organizations. If you link your accounts using this option Docker Hub won''t
    be able to configure the Webhooks needed for automated builds. You then need to
    search and select the repository from either of the locations you want to create
    the automated build from. This will essentially create a Webhook that instructs
    that when a commit is done on a selected code repository, a new build will be
    created on Docker Hub.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限访问**：这将限制Docker Hub访问公开可用的存储库和组织。如果您使用此选项链接您的帐户，Docker Hub将无法配置所需的用于自动构建的Webhooks。然后，您需要从要从中创建自动构建的位置中搜索并选择存储库。这将基本上创建一个Webhook，指示当在所选的代码存储库上进行提交时，在Docker
    Hub上将创建一个新的构建。'
- en: '![](Images/e86e4a7e-b777-454d-95e1-94f907c2bb98.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e86e4a7e-b777-454d-95e1-94f907c2bb98.png)'
- en: 'In the preceding screenshot, I selected `Mastering-Docker-Third-Edition` and
    visited the settings page for the automated build. From here, we can choose which
    Docker Hub profile the image is attached to, name the image, change it from a
    public to a privately available image, describe the build, and customize it by
    clicking on **Click here to customize**. We can let Docker Hub know the location
    of our Dockerfile as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我选择了`Mastering-Docker-Third-Edition`，并访问了自动构建的设置页面。从这里，我们可以选择将图像附加到哪个Docker
    Hub配置文件，命名图像，将其从公共图像更改为私有可用图像，描述构建，并通过单击**单击此处自定义**来自定义它。我们可以让Docker Hub知道我们的Dockerfile的位置如下：
- en: '![](Images/8b016edc-4f1a-43c1-8d1b-1823af07864f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8b016edc-4f1a-43c1-8d1b-1823af07864f.png)'
- en: 'If you are following along, I entered the following information:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在跟着做，我输入了以下信息：
- en: '**Repository Namespace & Name:** `dockerfile-example`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库命名空间和名称：** `dockerfile-example`'
- en: '**Visibility:** public'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可见性：**公共'
- en: '**Short Description:** `Testing an automated build`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简短描述：**`测试自动构建`'
- en: '**Push Type:** Branch'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送类型：**分支'
- en: '**Name:** `master`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称：**`master`'
- en: '**Dockerfile Location:** `/chapter02/dockerfile-example/`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile位置：**`/chapter02/dockerfile-example/`'
- en: '**Docker Tag:** latest'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker标签：**最新'
- en: 'Upon clicking on **Create**, you will be taken to a screen similar to the next
    screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**后，您将会看到一个类似下一个截图的屏幕：
- en: '![](Images/153124b2-b207-46d8-881c-ae926facd384.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/153124b2-b207-46d8-881c-ae926facd384.png)'
- en: Now that we have our build defined, we can add some additional configurations
    by clicking on **Build Settings**. As we are using the official Alpine Linux image,
    we can link that to our own build. To do that, enter Alpine in the **Repository
    Links** section and then click on **Add Repository Link**. This will kick off
    an unattended build each time a new version of the official Alpine Linux image
    is published.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了构建，可以通过点击**构建设置**来添加一些额外的配置。由于我们使用的是官方的Alpine Linux镜像，我们可以将其链接到我们自己的构建中。为此，在**存储库链接**部分输入Alpine，然后点击**添加存储库链接**。这将在每次官方Alpine
    Linux镜像发布新版本时启动一个无人值守的构建。
- en: '![](Images/6922478b-7d32-4c26-bd3c-c78d86a13edf.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6922478b-7d32-4c26-bd3c-c78d86a13edf.png)'
- en: So now our image will automatically be rebuilt and published whenever we update
    the GitHub repository, or when a new official image is published. As neither of
    these is likely to happen immediately, click on the Trigger button to manually
    kick off a build. You will notice that the button turns green for a short time,
    which confirms that a build has been scheduled in the background.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的镜像将在我们更新GitHub存储库时自动重建和发布，或者当新的官方镜像发布时。由于这两种情况都不太可能立即发生，所以点击“触发”按钮手动启动构建。您会注意到按钮会在短时间内变成绿色，这证实了后台已经安排了一个构建。
- en: 'Once have triggered your build, clicking on **Build Details** will bring up
    a list of all of the builds for the image, both successful and failed ones. You
    should see a build underway; clicking on it will bring up the logs for the build:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发了您的构建，点击**构建详情**将会显示出该镜像的所有构建列表，包括成功和失败的构建。您应该会看到一个正在进行的构建；点击它将会显示构建的日志：
- en: '![](Images/17e9aace-1120-480c-9299-2a24a451349b.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/17e9aace-1120-480c-9299-2a24a451349b.png)'
- en: 'Once built, you should then able to move to your local Docker installation
    by running the following commands, making sure to pull your own image if you have
    been following along:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完成后，您应该能够通过运行以下命令移动到本地的Docker安装中，确保拉取您自己的镜像（如果一直在跟进的话）：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The commands are shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 命令如下截图所示：
- en: '![](Images/feae53be-7cf1-4484-aa8c-71d533a10bd0.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/feae53be-7cf1-4484-aa8c-71d533a10bd0.png)'
- en: 'You can also run the image created by Docker Hub using the following command,
    again making sure to use your own image if you have one:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用以下命令运行Docker Hub创建的镜像，再次确保使用您自己的镜像（如果有的话）：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I also add the multi-stage build in exactly the same way. Docker Hub had no
    problem with the build, as you can see from the following logs, which start off
    with a little bit of information about Docker''s build environment:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我也以完全相同的方式添加了多阶段构建。Docker Hub对构建没有任何问题，您可以从以下日志中看到，它开始于一些关于Docker构建环境的信息：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The build then starts by compiling our code as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后构建过程开始编译我们的代码如下：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now our code has been compiled, it moves on to copying the application binary
    to what will be the final image:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的代码已经编译完成，接下来将应用程序二进制文件复制到最终镜像中：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can pull and launch a container using the image with the following commands:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令拉取和启动包含该镜像的容器：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see from the following screenshot, the image acts in the exact same
    way as it did when we created it locally:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，该镜像的行为方式与我们在本地创建时完全相同：
- en: '![](Images/3e092fb2-c73e-41a6-8b86-35734fd9d03b.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3e092fb2-c73e-41a6-8b86-35734fd9d03b.png)'
- en: 'You can remove the containers if you launched them by using the following commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您启动了容器，可以使用以下命令删除它们：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have looked at automated builds, we can discuss how else we can
    push images to Docker Hub.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了自动化构建，我们可以讨论如何以其他方式将镜像推送到Docker Hub。
- en: Pushing your own image
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送您自己的镜像
- en: In [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building Container
    Images*, we discussed creating an image without using a Dockerfile. While it is
    still not a good idea and should only be used when you really need to, you can
    push your own images to Docker Hub.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml)中，*构建容器镜像*，我们讨论了在不使用Dockerfile的情况下创建镜像。虽然这仍然不是一个好主意，应该只在您真正需要时使用，但您可以将自己的镜像推送到Docker
    Hub。
- en: When pushing images to Docker Hub in this way, ensure that you do not include
    any code, files, or environment variables you would not want to be publicly accessible.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式将镜像推送到Docker Hub时，请确保不包括任何您不希望公开访问的代码、文件或环境变量。
- en: 'To do this, we first need to link our local Docker client to Docker Hub by
    running the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们首先需要通过运行以下命令将本地Docker客户端链接到Docker Hub：
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will then be prompted for your Docker ID and password:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后会提示您输入Docker ID和密码：
- en: '![](Images/87505ffd-86d7-430f-826b-a1cf9932b4d8.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/87505ffd-86d7-430f-826b-a1cf9932b4d8.png)'
- en: 'Also, if you are using Docker for Mac or Docker for Windows, you will now be
    logged in via the app and should be able to access Docker Hub from the menu:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您使用的是Docker for Mac或Docker for Windows，您现在将通过应用程序登录，并应该能够从菜单访问Docker Hub：
- en: '![](Images/2433ddec-62d9-4ecf-81b1-1257083a4df3.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2433ddec-62d9-4ecf-81b1-1257083a4df3.png)'
- en: 'Now that our client is authorized to interact with Docker Hub, we need an image
    to build. Let''s look at pushing the scratch image we built in [Chapter 2](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml), *Building
    Container Images*. First, we need to build the image. To do this, I am using the
    following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的客户端已被授权与Docker Hub交互，我们需要一个要构建的镜像。让我们看看如何推送我们在[第2章](55a49886-9299-4a9b-a3b6-241641a6c097.xhtml)中构建的scratch镜像，*构建容器镜像*。首先，我们需要构建镜像。为此，我使用以下命令：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you are following along, then you should replace `masteringdockerthirdedition`
    with your own username or organization:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在跟着做，那么您应该将`masteringdockerthirdedition`替换为您自己的用户名或组织：
- en: '![](Images/04aca08c-a396-4472-8bc3-03b726896b27.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/04aca08c-a396-4472-8bc3-03b726896b27.png)'
- en: 'Once the image has been built, we can push it to Docker Hub by running the
    following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完镜像后，我们可以通过运行以下命令将其推送到Docker Hub：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了输出：
- en: '![](Images/2f9e0035-3858-4913-895e-6becdb40de32.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/2f9e0035-3858-4913-895e-6becdb40de32.png)'
- en: 'As you can see, because we defined `masteringdockerthirdedition/scratch-example:latest`
    when we built the image, Docker automatically uploaded the image to that location,
    which in turn added a new image to the `Mastering Docker Third Edition` organization:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，因为我们在构建镜像时定义了`masteringdockerthirdedition/scratch-example:latest`，Docker自动将镜像上传到该位置，从而向`Mastering
    Docker Third Edition`组织添加了一个新镜像。
- en: '![](Images/b231c61b-33ef-44c5-bc04-12411bd0fb40.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b231c61b-33ef-44c5-bc04-12411bd0fb40.png)'
- en: You will notice that there is not much you can do with the build in Docker Hub.
    This is because the image was not built by Docker Hub, and therefore, it does
    not really have any idea what has gone into building the image.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在Docker Hub中无法做太多事情。这是因为镜像不是由Docker Hub构建的，因此它实际上并不知道构建镜像时发生了什么。
- en: Docker Store
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker商店
- en: You may remember that in [Chapter 1](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml),
    *Docker Overview*, we downloaded Docker for macOS and Docker for Windows from
    the Docker Store. As well as acting as a single location for downloading both
    **Docker CE** and **Docker EE** for various platforms, it is now also the preferred
    location for finding both **Docker Images** and **Docker Plugins**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得在[第1章](db23d482-1df4-41c2-af33-d38a98fc5a1c.xhtml)中，*Docker概述*，我们从Docker
    Store下载了macOS和Windows的Docker。除了作为下载各种平台的**Docker CE**和**Docker EE**的单一位置外，它现在也是查找**Docker
    Images**和**Docker Plugins**的首选位置。
- en: '![](Images/b86f1bae-110b-4f47-8388-c347e577d115.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b86f1bae-110b-4f47-8388-c347e577d115.png)'
- en: 'While you will only find official and certified images in the Docker Store,
    there is an option to use the Docker Store interface to search through Docker
    Hub. Also, you can download images that are not available from Docker Hub, such
    as the Citrix NetScaler CPX Express image:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您只会在Docker Store中找到官方和认证的图像，但也可以使用Docker Store界面来搜索Docker Hub。此外，您可以下载来自Docker
    Hub不可用的图像，例如Citrix NetScaler CPX Express图像：
- en: '![](Images/9b47411c-b0aa-4ea5-8ac2-2ade614199e8.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9b47411c-b0aa-4ea5-8ac2-2ade614199e8.png)'
- en: If you notice, the image has a price attached to it (the Express version is
    $0.00), meaning that you can buy commercial software through the Docker Store,
    as it has payments and licensing built in. If you are a software publisher, you
    are able to sign and distribute your own software through the Docker Store.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您注意到，图像附加了价格（Express版本为$0.00），这意味着您可以通过Docker Store购买商业软件，因为它内置了付款和许可。如果您是软件发布者，您可以通过Docker
    Store签署和分发自己的软件。
- en: We will be looking at the Docker Store in a little more detail in later chapters,
    when we cover Docker plugins.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，当我们涵盖Docker插件时，我们将更详细地了解Docker Store。
- en: Docker Registry
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Registry
- en: In this section, we will be looking at Docker Registry. **Docker Registry**
    is an open source application that you can run anywhere you please and store your
    Docker image in. We will look at the comparison between Docker Registry and Docker
    Hub, and how to choose between the two. By the end of the section, you will learn
    how to run your own Docker Registry and see whether it's a proper fit for you.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究Docker Registry。**Docker Registry**是一个开源应用程序，您可以在任何地方运行并存储您的Docker图像。我们将看看Docker
    Registry和Docker Hub之间的比较，以及如何在两者之间进行选择。在本节结束时，您将学会如何运行自己的Docker Registry，并查看它是否适合您。
- en: An overview of Docker Registry
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Registry概述
- en: Docker Registry, as stated earlier, is an open source application that you can
    utilize to store your Docker images on a platform of your choice. This allows
    you to keep them 100% private if you wish, or share them as needed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Docker Registry是一个开源应用程序，您可以利用它在您选择的平台上存储您的Docker图像。这使您可以根据需要将它们保持100%私有，或者分享它们。
- en: Docker Registry makes a lot of sense if you want to deploy your own registry
    without having to pay for all the private features of Docker Hub. Next, let's
    take a look at some comparisons between Docker Hub and Docker Registry to help
    you can make an educated decision as to which platform to choose to store your
    images.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想部署自己的注册表而无需支付Docker Hub的所有私有功能，那么Docker Registry就有很多意义。接下来，让我们看一下Docker
    Hub和Docker Registry之间的一些比较，以帮助您做出明智的决定，选择哪个平台来存储您的图像。
- en: 'Docker Registry has the following features:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry具有以下功能：
- en: Host and manage your own registry from which you can serve all the repositories
    as private, public, or a mix between the two
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从中您可以作为私有、公共或两者混合来提供所有存储库的主机和管理您自己的注册表
- en: Scale the registry as needed, based on how many images you host or how many
    pull requests you are serving out
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您托管的图像数量或提供的拉取请求数量，根据需要扩展注册表
- en: Everything is command-line based
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一切都是基于命令行的
- en: 'With Docker Hub, you will:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker Hub，您将：
- en: Get a GUI-based interface that you can use to manage your images
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得一个基于GUI的界面，您可以用来管理您的图像
- en: Have a location already set up in the cloud that is ready to handle public and/or
    private images
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云中已经设置好了一个位置，可以处理公共和/或私有图像
- en: Have the peace of mind of not having to manage a server that is hosting all
    your images
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放心，不必管理托管所有图像的服务器
- en: Deploying your own registry
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您自己的Registry
- en: 'As you may have already guessed, Docker Registry is distributed as an image
    from Docker Hub, which makes deploying it as easy as running the following commands:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的，Docker Registry作为Docker Hub的一个镜像分发，这使得部署它就像运行以下命令一样简单：
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'These commands will give you the most basic installation of Docker Registry.
    Let''s take a quick look at how we can push and pull an image to it. To start
    off with, we need an image, so let''s grab the Alpine image (again):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将为您提供最基本的Docker Registry安装。让我们快速看一下如何将图像推送到其中并从中拉取。首先，我们需要一个图像，所以让我们再次获取Alpine图像：
- en: '[PRE11]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have a copy of the Alpine Linux image, we need to push it to our
    local Docker Registry, which is available at `localhost:5000`. To do this, we
    need to tag the Alpine Linux image with the URL of our local Docker Registry,
    along with a different image name:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了Alpine Linux图像的副本，我们需要将其推送到我们的本地Docker Registry，该Registry位于`localhost:5000`。为此，我们需要使用我们本地Docker
    Registry的URL来标记Alpine Linux图像，并使用不同的图像名称：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we have our image tagged, we can push it to our locally hosted Docker
    Registry by running the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经标记了我们的图像，我们可以通过运行以下命令将其推送到我们本地托管的Docker Registry：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following screenshot shows the output of the preceding commands:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](Images/e0fd1833-1710-4430-9a66-fed096319f3b.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e0fd1833-1710-4430-9a66-fed096319f3b.png)'
- en: 'Try running the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行以下命令：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output should show you that you have two images with the same `IMAGE ID`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该向您显示具有相同`IMAGE ID`的两个图像：
- en: '![](Images/35e7db0c-7e62-43ab-b156-cb532d6c26ba.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/35e7db0c-7e62-43ab-b156-cb532d6c26ba.png)'
- en: 'Before we pull the image back down from our local Docker Registry, we should
    remove the two local copies of the image. We need to use the `REPOSITORY` name
    to do this, rather than the `IMAGE ID`, as we have two images from two locations
    with the same ID, and Docker will throw an error:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从本地Docker Registry中重新拉取图像之前，我们应该删除图像的两个本地副本。我们需要使用`REPOSITORY`名称来执行此操作，而不是`IMAGE
    ID`，因为我们有两个位置的两个相同ID的图像，Docker会抛出错误：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that the original and tagged images have been removed, we can pull the
    image from our local Docker Registry by running the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在原始和标记的图像已被删除，我们可以通过运行以下命令从本地Docker Registry中拉取图像：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, we now have a copy of our image that has been pulled from the
    Docker Registry running at `localhost:5000`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们现在有一个从Docker Registry中拉取的图像副本在`localhost:5000`上运行：
- en: '![](Images/e0902ec1-c71c-4565-8cd7-a57665834ee0.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e0902ec1-c71c-4565-8cd7-a57665834ee0.png)'
- en: 'You can stop and remove the Docker Registry by running the following commands:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令停止和删除Docker Registry：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, there are a lot of options and considerations when it comes to launching
    a Docker Registry. As you can imagine, the most important is around storage.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在启动Docker Registry时有很多选项和考虑因素。正如您所想象的那样，最重要的是围绕存储。
- en: 'Given that a registry''s sole purpose is storing and distributing images, it
    is important that you use some level of persistent OS storage. Docker Registry
    currently supports the following storage options:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于Registry的唯一目的是存储和分发图像，重要的是您使用一定级别的持久性OS存储。Docker Registry目前支持以下存储选项：
- en: 'Filesystem: This is exactly what it says; all images are stored on the filesystem
    at the path you define. The default is `/var/lib/registry`.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统：这正是它所说的；所有的镜像都存储在您定义的路径上。默认值是`/var/lib/registry`。
- en: 'Azure: This uses Microsoft Azure Blob Storage.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure：这使用微软Azure Blob存储。
- en: 'GCS: This uses Google Cloud storage.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCS：这使用Google云存储。
- en: 'S3: This uses Amazon Simple Storage Service (Amazon S3).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S3：这使用亚马逊简单存储服务（Amazon S3）。
- en: 'Swift: This uses OpenStack Swift.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift：这使用OpenStack Swift。
- en: As you can see, other than the filesystem, all of the storage engines supported
    are all highly available, distributed object-level storage. We will look at these
    cloud services in a later chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，除了文件系统之外，所有支持的存储引擎都是高可用的，分布式对象级存储。我们将在后面的章节中看到这些云服务。
- en: Docker Trusted Registry
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Trusted Registry
- en: 'One of the components that ships with the commercial **Docker Enterprise Edition**
    (**Docker EE**) is **Docker Trusted Registry** (**DTR**). Think of it as a version
    of Docker Hub that you can host in your own infrastructure. DTR adds the following
    features on top of the ones provided by the free Docker Hub and Docker Registry:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 商业版**Docker企业版**（**Docker EE**）附带的一个组件是**Docker Trusted Registry**（**DTR**）。把它看作是一个您可以在自己的基础设施中托管的Docker
    Hub版本。DTR在免费的Docker Hub和Docker注册表提供的功能之上增加了以下功能：
- en: Integration into your authentication services, such as Active Directory or LDAP
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成到您的身份验证服务，如Active Directory或LDAP
- en: Deployment on your own infrastructure (or cloud) behind your firewall
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您自己的基础设施（或云）部署在您的防火墙后面
- en: Image signing to ensure your images are trusted
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像签名以确保您的图像是可信的
- en: Built-in security scanning
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置安全扫描
- en: Access to prioritized support directly from Docker
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从Docker获得优先支持
- en: Third-party registries
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方注册表
- en: It is not only Docker that offers image registry services; companies such as
    Red Hat offer their own registry, where you can find the Red Hat Container Catalog,
    which hosts containerized versions of all of Red Hat's product offerings, along
    with containers to support its OpenShift offering.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅Docker提供图像注册表服务；像Red Hat这样的公司也提供他们自己的注册表，您可以在那里找到Red Hat容器目录，其中托管了所有Red Hat产品提供的容器化版本，以及支持其OpenShift产品的容器。
- en: Services such as Artifactory by JFrog offer a private Docker registry as part
    of their build services. There are also other Registry-as-a-Service offerings,
    such as Quay by CoreOS, who are now owned by Red Hat, and also services from Amazon
    Web Services and Microsoft Azure. We will take a look at these services when we
    move on to looking at Docker in the cloud.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 像JFrog的Artifactory这样的服务提供了私有的Docker注册表作为其构建服务的一部分。还有其他的注册表即服务提供，比如CoreOS的Quay，现在被Red
    Hat拥有，还有来自亚马逊网络服务和微软Azure的服务。当我们继续研究云中的Docker时，我们将看看这些服务。
- en: Microbadger
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microbadger
- en: '**Microbadger** is a great tool when you are looking at shipping your containers
    or images around. It will take into account everything that is going on in every
    single layer of a particular Docker image and give you the output of how much
    weight it has in terms of actual size or the amount of disk space it will take
    up.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microbadger**是一个很好的工具，当您考虑要运输您的容器或图像时。它将考虑到特定Docker图像的每个层中发生的一切，并为您提供实际大小或它将占用多少磁盘空间的输出。'
- en: 'This page is what you will be presented with when navigating to the Microbadger
    website, [https://microbadger.com/](https://microbadger.com/):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当您导航到Microbadger网站时，您将看到这个页面，[https://microbadger.com/](https://microbadger.com/)：
- en: '![](Images/748cf6b5-1cb4-4cea-a32f-033fefa47af3.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/748cf6b5-1cb4-4cea-a32f-033fefa47af3.png)'
- en: You can search for images that are on Docker Hub to have Microbadger provide
    information about that image back to you, or you can load up a sample image set
    if you are looking to provide some sample sets, or to see some more complex setups.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以搜索Docker Hub上的镜像，让Microbadger为您提供有关该镜像的信息，或者加载一个示例镜像集，如果您想提供一些示例集，或者查看一些更复杂的设置。
- en: In this example, we are going to search for the `masteringdockerthirdedition/dockerfiles-example` image
    that we pushed earlier in the chapter, and select the latest tag. As you can see
    from the following screenshot, Docker Hub is automatically searched with results
    returned in real time as you type.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将搜索我们在本章前面推送的`masteringdockerthirdedition/dockerfiles-example`镜像，并选择最新的标签。如下截图所示，Docker
    Hub会在您输入时自动搜索，并实时返回结果。
- en: By default, it will always load the latest tag, but you also have the option
    of changing the tag you are viewing by selecting your desired tag from the **Versions**
    drop-down menu. This could be useful if you have, for example, a staging tag,
    and are thinking of pushing this new image to your latest tag, but want to see
    what impact it will have on the size of the image.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它将始终加载最新的标签，但您也可以通过从**版本**下拉菜单中选择所需的标签来更改您正在查看的标签。例如，如果您有一个暂存标签，并且正在考虑将这个新镜像推送到最新标签，但想要看看它对镜像大小的影响，这可能会很有用。
- en: 'As you can see from the following screenshot, Microbadger presents information
    on how many layers your image contains:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，Microbadger提供了有关您的镜像包含多少层的信息：
- en: '![](Images/b3fb9585-9fd9-4bbb-9043-d262220d59d6.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b3fb9585-9fd9-4bbb-9043-d262220d59d6.png)'
- en: By showing the size of each layer and the Dockerfile command executed during
    the image build, you can see at which stage of the image build the bloat was added,
    which is extremely useful when it comes to reducing the size of your images.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通过显示每个层的大小和镜像构建过程中执行的Dockerfile命令，您可以看到镜像构建的哪个阶段添加了膨胀，这在减小镜像大小时非常有用。
- en: 'Another great feature is that Microbadger gives you the option of embedding
    basic statistics about your images in your Git repository or Docker Hub; for example,
    the following screen shows the Docker Hub page for one of my own images:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很棒的功能是，Microbadger可以让您选择将有关您的镜像的基本统计信息嵌入到您的Git存储库或Docker Hub中；例如，以下屏幕显示了我自己的一个镜像的Docker
    Hub页面：
- en: '![](Images/e6cfb3e3-e198-4527-a92e-98a92be2e939.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e6cfb3e3-e198-4527-a92e-98a92be2e939.png)'
- en: As you can see, Microbadger is displaying the overall size of the image, which
    in this example is 5.9MB, as well as the total number of layers the image is made
    up of, which is 7. The Microbadger service is still in beta and new functions
    are being added all the time. I recommend that you keep an eye on it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从以下截图中所看到的，Microbadger显示了镜像的总体大小，在这个例子中是5.9MB，以及镜像由多少层组成的总数，为7。Microbadger服务仍处于测试阶段，新功能正在不断添加。我建议您密切关注它。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at several ways in which you can both manually and
    automatically build container images using Docker Hub. We discussed the various
    registries you can use besides Docker Hub, such as the Docker Store and Red Hat's
    container catalog.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用Docker Hub手动和自动构建容器镜像的几种方法。我们讨论了除了Docker Hub之外您可以使用的各种注册表，例如Docker
    Store和Red Hat的容器目录。
- en: We also looked at deploying our own local Docker Registry, and touched upon
    the considerations we need to make around storage when deploying one. Finally,
    we looked at Microbadger, a service that allows you to display information about
    your remotely hosted container images.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了部署我们自己的本地Docker注册表，并提及了在部署时需要考虑的存储问题。最后，我们看了Microbadger，这是一个允许您显示有关远程托管容器镜像信息的服务。
- en: In the next chapter, we are going to look at how we can manage our containers
    from the command line.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何从命令行管理我们的容器。
- en: Questions
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: Docker Hub is the only source from which you can download official
    Docker images.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：Docker Hub是您可以下载官方Docker镜像的唯一来源。
- en: Describe why you would want to link an automated build to an official Docker
    Hub image.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述为什么您想要将自动构建链接到官方Docker Hub镜像。
- en: Are multi-stage builds supported on Docker Hub?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多阶段构建是否受Docker Hub支持？
- en: 'True or false: Logging into Docker on the command also logs you into the desktop
    application?'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：在命令行中登录Docker也会登录到桌面应用程序？
- en: How would you delete two images that share the same IMAGE ID?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何删除共享相同IMAGE ID的两个镜像？
- en: Which port does the Docker Registry run on by default?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Registry默认运行在哪个端口？
- en: Further reading
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'More information on Docker Store, Trusted Registry, and Registry can be found
    at:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker Store、Trusted Registry和Registry的更多信息，请访问：
- en: Docker Store Publisher Sign-up: [https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Store发布者注册：[https://store.docker.com/publisher/signup/](https://store.docker.com/publisher/signup/)
- en: 'Docker Trusted Registry (DTR): [https://docs.docker.com/ee/dtr/](https://docs.docker.com/ee/dtr/)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Trusted Registry（DTR）：[https://docs.docker.com/ee/dtr/](https://docs.docker.com/ee/dtr/)
- en: 'Docker Registry Documentation: [https://docs.docker.com/registry/](https://docs.docker.com/registry/)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Registry文档：[https://docs.docker.com/registry/](https://docs.docker.com/registry/)
- en: 'You can find more details on the different types of cloud-based storage you
    can use for Docker Registry at the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下位置找到有关可用于Docker Registry的不同类型的基于云的存储的更多详细信息：
- en: Azure Blob Storage: [https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Blob存储：[https://azure.microsoft.com/en-gb/services/storage/blobs/](https://azure.microsoft.com/en-gb/services/storage/blobs/)
- en: Google Cloud storage: [https://cloud.google.com/storage/](https://cloud.google.com/storage/)
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud存储：[https://cloud.google.com/storage/](https://cloud.google.com/storage/)
- en: Amazon Simple Storage Service (Amazon S3): [https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊简单存储服务（Amazon S3）：[https://aws.amazon.com/s3/](https://aws.amazon.com/s3/)
- en: 'Swift: This uses OpenStack Swift: [https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift：这使用OpenStack Swift：[https://wiki.openstack.org/wiki/Swift](https://wiki.openstack.org/wiki/Swift)
- en: 'Some of the third-party registry services can be found here:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一些第三方注册服务可以在这里找到：
- en: Red Hat Container Catalog: [https://access.redhat.com/containers/](https://access.redhat.com/containers/)
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat容器目录：[https://access.redhat.com/containers/](https://access.redhat.com/containers/)
- en: OpenShift: [https://www.openshift.com/](https://www.openshift.com/)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift：[https://www.openshift.com/](https://www.openshift.com/)
- en: Artifactory by JFrog: [https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JFrog的Artifactory：[https://www.jfrog.com/artifactory/](https://www.jfrog.com/artifactory/)
- en: Quay: [https://quay.io/](https://quay.io/)
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Quay: [https://quay.io/](https://quay.io/)'
- en: 'Finally, you can find links to the Docker Hub and Microbadger for my Apache
    Bench image here:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在这里找到我的Apache Bench镜像的Docker Hub和Microbadger链接：
- en: Apache Bench Image (Docker Hub): [https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Bench镜像（Docker Hub）：[https://hub.docker.com/r/russmckendrick/ab/](https://hub.docker.com/r/russmckendrick/ab/)
- en: Apache Bench Image (Microbadger): [https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Bench镜像（Microbadger）：[https://microbadger.com/images/russmckendrick/ab](https://microbadger.com/images/russmckendrick/ab)
