["```kt\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation\"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n    implementation 'com.google.android.gms:play-services-vision:11.0.4'\n    ...\n}\n```", "```kt\n<meta-data\n android:name=\"com.google.android.gms.vision.DEPENDENCIES\"\n android:value=\"face\" />\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<FrameLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    tools:context=\"com.packtpub.eunice.funyface.MainActivity\">\n\n  <ImageView\n      android:id=\"@+id/imageView\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:src=\"img/ic_launcher_round\"\n      app:layout_constraintBottom_toTopOf=\"parent\"\n      android:scaleType=\"fitCenter\"/>\n\n  <Button\n      android:id=\"@+id/button\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_gravity=\"bottom|center\"\n      android:text=\"Detect Face\"/>\n\n</FrameLayout>\n\n```", "```kt\npackage com.packtpub.eunice.funface\n\nimport android.graphics.*\nimport android.graphics.drawable.BitmapDrawable\nimport android.os.Bundle\nimport android.support.v7.app.AlertDialog\nimport android.support.v7.app.AppCompatActivity\nimport com.google.android.gms.vision.Frame\nimport com.google.android.gms.vision.face.FaceDetector\nimport kotlinx.android.synthetic.main.activity_main.*\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        button.setOnClickListener {\n            detectFace()\n        }\n    }\n}\n```", "```kt\noptions.inMutable=true\n```", "```kt\nprivate fun detectFace() {\n    // Load the image\n    val bitmapOptions = BitmapFactory.Options()\n    bitmapOptions.inMutable = true\n    val myBitmap = BitmapFactory.decodeResource(\n            applicationContext.resources,\n            R.drawable.children_group_picture,\n            bitmapOptions)\n}\n```", "```kt\n// Get a Paint instance\nval myRectPaint = Paint()\nmyRectPaint.strokeWidth = 5F\nmyRectPaint.color = Color.RED\nmyRectPaint.style = Paint.Style.STROKE \n\n```", "```kt\n// Create a canvas using the dimensions from the image's bitmap\nval tempBitmap = Bitmap.createBitmap(myBitmap.width, myBitmap.height, Bitmap.Config.RGB_565)\nval tempCanvas = Canvas(tempBitmap)\ntempCanvas.drawBitmap(myBitmap, 0F, 0F, null)\n```", "```kt\n// Create a FaceDetector\nval faceDetector = FaceDetector.Builder(applicationContext).setTrackingEnabled(false)\n        .build()\nif (!faceDetector.isOperational) {\n    AlertDialog.Builder(this)\n            .setMessage(\"Could not set up the face detector!\")\n            .show()\n    return\n}\n```", "```kt\n// Detect the faces\nval frame = Frame.Builder().setBitmap(myBitmap).build()\nval faces = faceDetector.detect(frame)\n```", "```kt\n// Mark out the identified face\nfor (i in 0 until faces.size()) {\n    val thisFace = faces.valueAt(i)\n    val left = thisFace.position.x\n    val top = thisFace.position.y\n    val right = left + thisFace.width\n    val bottom = top + thisFace.height\n    tempCanvas.drawRoundRect(RectF(left, top, right, bottom), 2F, 2F, myRectPaint)\n}\n\nimageView.setImageDrawable(BitmapDrawable(resources, tempBitmap))\n\n// Release the FaceDetector\nfaceDetector.release()\n```", "```kt\n// Mark out the identified face\nfor (i in 0 until faces.size()) {\n    ...\n\n    for (landmark in thisFace.landmarks) {\n        val x = landmark.position.x\n        val y = landmark.position.y\n\n        when (landmark.type) {\n            NOSE_BASE -> {\n                val scaledWidth = \n                       eyePatchBitmap.getScaledWidth(tempCanvas)\n                val scaledHeight = \n                       eyePatchBitmap.getScaledHeight(tempCanvas)\n                tempCanvas.drawBitmap(eyePatchBitmap,\n                        x - scaledWidth / 2,\n                        y - scaledHeight / 2,\n                        null)\n            }\n        }\n    }\n}\n```"]