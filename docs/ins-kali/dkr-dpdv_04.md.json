["```\n```", "``` \n```", "```\nC:\\Program Files\\Docker\\Docker> .\\dockercli -SwitchDaemon \n```", "```\nC:\\> docker version\nClient:\n <Snip>\n\nServer:\n Engine:\n  Version:      18.01.0-ce\n  API version:  1.35 (minimum version 1.24)\n  Go version:   go1.9.2\n  Git commit:   03596f5\n  Built:        Wed Jan 10 20:20:36 2018\n  OS/Arch:      windows/amd64\n  Experimental: true \n```", "```\nPS C:\\Program Files\\Docker\\Docker> .\\dockercli -Version\n\nDocker for Windows\nVersion: 18.01.0-ce-win48 (15285)\nChannel: edge\nSha1: ee2282129dec07b8c67890bd26865c8eccdea88e\nOS Name: Windows 10 Pro\nWindows Edition: Professional\nWindows Build Number: 16299 \n```", "```\n> docker image ls\nREPOSITORY    TAG      IMAGE ID      CREATED       SIZE\n\n> docker container ls\nCONTAINER ID   IMAGE   COMMAND   CREATED    STATUS    PORTS    NAMES\n\n> docker system info\nContainers: 1\n Running: 0\n Paused: 0\n Stopped: 1\nImages: 6\nServer Version: 17.12.0-ce\nStorage Driver: windowsfilter\n<Snip> \n```", "```\nC:\\> docker --version\nDocker version 18.01.0-ce, build 03596f5 \n```", "````\nC:\\> docker-compose --version\ndocker-compose version 1.18.0, build 8dd22a96 \n```\n\n ````", "```\n\n ```", "```\n\n `### Docker for Mac (DfM)\n\n*Docker for Mac* is also a packaged product from Docker, Inc. So relax, you don\u2019t need to be a kernel engineer, and we\u2019re not about to walk through a complex hack for getting Docker onto your Mac. Installing DfM is ridiculously easy.\n\nWhat is *Docker for Mac?*\n\nFirst up, *Docker for Mac* is a packaged product from Docker, Inc. that is based on the Community Edition of Docker. This means it\u2019s an easy way to install a single-engine version of Docker on you Mac. It also means that it\u2019s not intended for production use. If you\u2019ve heard of **boot2docker**, then *Docker for Mac* is what you always wished *boot2docker* was \u2014 smooth, simple, and stable.\n\nIt\u2019s also worth noting that *Docker for Mac* will not give you the Docker Engine running natively on the Mac OS Darwin kernel. Behind the scenes, the Docker daemon is running inside a lightweight Linux VM. It then seamlessly exposes the daemon and API to your Mac environment. This means you can open a terminal on your Mac and use the regular Docker commands.\n\nAlthough this works seamlessly on your Mac, don\u2019t forget that it\u2019s Docker on Linux under the hood \u2014 so it\u2019s only going work with Linux-based Docker containers. This is good though, as it\u2019s where most of the container action is.\n\nFigure 3.3 shows a high-level representation of the *Docker for Mac* architecture.\n\n![Figure 3.3](images/figure3-3.png)\n\nFigure 3.3\n\n> **Note:** For the curious reader, *Docker for Mac* leverages [HyperKit](https://github.com/docker/hyperkit) to implement an extremely lightweight hypervisor. HyperKit is based on the [xhive hypervisor](https://github.com/mist64/xhyve). *Docker for Mac* also leverages features from [DataKit](https://github.com/docker/datakit) and runs a highly tuned Linux distro called *Moby* that is based on [Alpine Linux](https://alpinelinux.org/%20and%20https://github.com/alpinelinux).\n\nLet\u2019s get *Docker for Mac* installed.\n\n1.  Point your browser to https://www.docker.com/get-docker and click `GET DOCKER COMMUNITY EDITION`.\n2.  Click the `Download from Docker Store` option below `DOCKER CE FOR MAC`. This will take you to the Docker Store and you will need to provide your Docker ID and password.\n3.  Click one of the `Get Docker CE` download links.\n\n    Docker for Mac has a stable and edge channel. Edge has newer features, at the expense of stability.\n\n    A **Docker.dmg** installation package will be downloaded.\n\n4.  Launch the `Docker.dmg` file that you downloaded in the previous step. You will be asked to drag and drop the Moby Dock whale image into the **Applications** folder.\n5.  Open your **Applications** folder (it may open automatically) and double-click the Docker application icon to Start it. You may be asked to confirm the action because the application was downloaded from the internet.\n6.  Enter your password so that the installer can create the components that require elevated privileges.\n7.  The Docker daemon will now start.\n\n    An animated whale icon will appear in the status bar at the top of your screen while Docker starts. Once Docker has successfully started, the whale will stop being animated. You can click the whale icon to manage DfM.\n\nNow that DfM is installed, you can open a terminal window and run some regular Docker commands. Try the following.\n\n```", "```\n\n `Notice that the `OS/Arch:` for the **Server** component is showing as `linux/amd64`. This is because the daemon is running inside of the Linux VM we mentioned earlier. The **Client** component is a native Mac application and runs directly on the Mac OS Darwin kernel (`OS/Arch: darwin/amd64`).\n\nAlso note that the system is running the experimental version (`Experimental: true`) of Docker. This is because the system is running the *edge* channel which comes with experimental features turned on.\n\nRun some more Docker commands.\n\n```", "```\n\n `Docker for Mac installs the Docker Engine (client and daemon), Docker Compose, Docker machine, and the Notary command line. The following three commands show you how to verify that all of these components installed successfully, as well as which versions you have.\n\n```", "```\n\n ```", "```\n\n ```", "```\n\n ```", "```\n\n `### Installing Docker on Linux\n\nInstalling Docker on Linux is the most common installation type and it\u2019s surprisingly easy. The most common difficulty is the slight variations between Linux distros such as Ubuntu vs CentOS. The example we\u2019ll use in this section is based on Ubuntu Linux, but should work on upstream and downstream forks. It should also work on CentOS and its upstream and downstream forks. It makes absolutely no difference if your Linux machine is a physical server in your own data center, on the other side of the planet in a public cloud, or a VM on your laptop. The only requirements are that the machine be running Linux and has access to https://get.docker.com.\n\nThe first thing you need to decide is which edition to install. There are currently two editions:\n\n*   Community Edition (CE)\n*   Enterprise Edition (EE)\n\nDocker CE is free and is the version we\u2019ll be demonstrating. Docker EE is the same as CE, but comes with commercial support and access to other Docker products such as Docker Trusted Registry and Universal Control Plane.\n\nIn this example, we\u2019ll use the `wget` command to call a shell script that installs Docker CE. For information on other ways to install Docker on Linux, go to https://www.docker.com and click on `Get Docker`.\n\n> **Note:** You should ensure that your system is up-to-date with the latest packages and security patches before continuing.\n\n1.  Open a new shell on your Linux machine.\n2.  Use `wget` to retrieve and run the Docker install script from\n\n    `https://get.docker.com` and pipe it through your shell.\n\n    ```", "```\n\n`*   It is best practice to use non-root users when working with Docker. To do this, you need to add your non-root users to the local `docker` Unix group. The following command shows you how to add the **npoulton** user to the `docker` group and verify that the operation succeeded. You will need to use a valid user account on your own system.\n\n    ```", "```\n\n     `If you are already logged in as the user that you just added to the `docker` group, you will need to log out and log back in for the group membership to take effect.`` \n\n ``Congratulations! Docker is now installed on your Linux machine. Run the following commands to verify the installation.\n\n```", "```\n\n `If the process described above doesn\u2019t work for your Linux distro, you can go to the [Docker Docs](https://docs.docker.com/engine/installation/) website and click on the link relating to your distro. This will take you to the official Docker installation instructions which are usually kept up to date. Be warned though, the instructions on the Docker website tend use package managers that require a lot more steps than the procedure we used above. In fact, if you open a web browser to https://get.docker.com you will see that it\u2019s a shell script that does all of the installation grunt-work for you \u2014 including configuring Docker to automatically start when the system boots.\n\n> **Warning:** If you install Docker from a source other than the official Docker repositories, you may end up with a forked version of Docker. In the past, some vendors and distros chose to fork the Docker project and develop their own slightly customized versions. You need to watch out for things like this, as you could unwittingly end up in a situation where you are running a fork that has diverged from the official Docker project. This isn\u2019t a problem if this is what you intend to do. If it is not what you intend, it can lead to situations where modifications and fixes your vendor makes do not make it back upstream in to the official Docker project. In these situations, you will not be able to get commercial support for your installation from Docker, Inc. or its authorized service partners.\n\n### Installing Docker on Windows Server 2016\n\nIn this section we\u2019ll look at one of the ways to install Docker on Windows Server 2016\\. We\u2019ll complete the following high-level steps:\n\n1.  Install the Windows Containers feature\n2.  Install Docker\n3.  Verify the installation\n\nBefore proceeding, you should ensure that your system is up-to-date with the latest package versions and security updates. You can do this quickly with the `sconfig` command and choosing option 6 to install updates. This may require a system restart.\n\nWe\u2019ll be demonstrating an installation on a version of Windows Server 2016 that does not have the Containers feature or an older version of Docker already installed.\n\nEnsure that the `Containers` feature is installed and enabled.\n\n1.  Right-click the Windows Start button and select `Programs and Features`. This will open the `Programs and Features` console.\n2.  Click `Turn Windows features on or off`. This will open the `Server Manager` app.\n3.  Make sure the `Dashboard` is selected and choose `Add Roles and Features`.\n4.  Click through the wizard until you get to the `Features` page.\n5.  Make sure that the `Containers` feature is checked, then complete the wizard. Your system may require a system restart.\n\nNow that the Windows Containers feature is installed, you can install Docker. We\u2019ll use PowerShell to do this.\n\n1.  Open a new PowerShell Administrator terminal.\n2.  Use the following command to install the Docker package management provider.\n\n    ```", "```\n\n     `If prompted, accept the request to install the NuGet provider.` \n`*   Install Docker.\n\n    ```", "```\n\n     `Once the installation is complete you will get a summary as shown.\n\n    ```", "```\n\n     `Docker is now installed and configured to automatically start when the system boots.`` ``*   You may want to restart your system to make sure that none of changes have introduced issues that cause your system not to boot. You can also check that Docker automatically starts after the reboot.```", "```Docker is now installed and you can start deploying containers. The following two commands are good ways to verify that the installation succeeded.\n\n```", "```\n\n `Docker is now installed and you are ready to start using Windows containers.\n\n### Upgrading the Docker Engine\n\nUpgrading the Docker Engine is an important task in any Docker environment \u2014 especially production. This section of the chapter will give you the high-level process of upgrading the Docker engine, as well as some general tips and a couple of upgrade examples.\n\nThe high-level process of upgrading the Docker Engine is this:\n\nTake care of any pre-requisites. These can include; making sure your containers have an appropriate restart policy, or draining nodes if you\u2019re using *Services* in Swarm mode. Once you\u2019ve completed any potential pre-requisites you can follow the procedure below.\n\n1.  Stop the Docker daemon\n2.  Remove the old version\n3.  Install the new version\n4.  configure the new version to automatically start when the system boots\n5.  Ensure containers have restarted\n\nThat\u2019s the high-level process. Let\u2019s look at some examples.\n\nEach version of Linux has its own slightly different commands for upgrading Docker. We\u2019ll show you Ubuntu 16.04\\. We\u2019ll also show you Windows Server 2016.\n\n#### Upgrading Docker CE on Ubuntu 16.04\n\nWe\u2019re assuming you\u2019ve completed all pre-requisites and your Docker host is ready for the upgrade. We\u2019re also assuming you\u2019re running commands as root. Running commands as root is obviously **not recommended**, but it does keep examples in the book simpler. If you\u2019re not running as root, well done! However, you will have to prepend the following commands with `sudo`.\n\n1.  Update your `apt` package list.\n\n    ```", "```\n\n`*   Uninstall existing versions of Docker.\n\n    ```", "```\n\n     `The Docker engine has had several different package names in the past. This command makes sure all older versions get removed.` `*   Install the new version.\n\n    There are different versions of Docker and different ways to install each one. For example, Docker CE or Docker EE, both of which can be installed in more than one way. For example, Docker CE can be installed from `apt` or `deb` packages, or using a script on `docker.com`\n\n    The following command will use a shell script at `get.docker.com` to install and configure the latest version of Docker CE.\n\n    ```", "```\n\n    `*   Configure Docker to automatically start each time the system boots.\n\n    ```", "```\n\n     `At this point you might want to restart the node. This will make sure that no issues have been introduced that prevent your system from booting in the future.` `*   Make sure any containers and services have restarted.\n\n    ```", "``````` \n\n ```Remember, other methods of upgrading and installing Docker exist. We\u2019ve just shown you one way, on Ubuntu Linux 16.04.\n\n#### Upgrading Docker EE on Windows Server 2016\n\nThis section will walk you through the process of upgrading Docker on Windows from 1.12.2, to the latest version of Docker EE.\n\nThe process assumes you have completed any pre-flight tasks, such as configuring containers with appropriate restart policies and draining Swarm nodes if you\u2019re using Swarm services.\n\nAll commands should be ran from a PowerShell terminal.\n\n1.  Check the current version of Docker.\n\n    ```\n     > docker version\n     Client:\n      Version:      1.12.2-cs2-ws-beta\n     <Snip>\n     Server:\n      Version:      1.12.2-cs2-ws-beta \n    ```\n\n`*   Uninstall any potentially older modules provided by Microsoft, and install the module from Docker.\n\n    ```\n     > Uninstall-Module DockerMsftProvider -Force\n\n     > Install-Module DockerProvider -Force \n    ```\n\n    `*   Update the `docker` package.\n\n    This command will force the update (no uninstall is required) and configure Docker to automatically start each time the system boots.\n\n    ```\n     > Install-Package -Name docker -ProviderName DockerProvider -Update -Force\n\n     Name      Version          Source       Summary\n     ----      -------          ------       -------\n     Docker    17.06.2-ee-6     Docker       Docker for Windows Server 2016 \n    ```\n\n     `You might want to reboot your server at this point to make sure the changes have not introduced any issues that prevent it from restarting in the future.` `*   Check that containers and services have restarted.```\n\n ```That\u2019s it. That\u2019s how to upgrade to the latest version of Docker EE on Windows Server 2016.\n\n### Docker and storage drivers\n\nEvery Docker container gets its own area of local storage where image layers are stacked and the container filesystem is mounted. By default, this is where all container read/write operations occur, making it integral to the performance and stability of every container.\n\nHistorically, this local storage area has been managed by the *storage driver*, which we sometimes call the *graph driver* or *graphdriver*. Although the high-level concepts of stacking image layers and using copy-on-write technologies are constant, Docker on Linux supports several different storage drivers, each of which implements layering and copy-on-write in its own way. While these *implementation differences* do not affect the way we *interact* with Docker, they can have a significant impact on *performance* and *stability*.\n\nSome of the *storage drivers* available for Docker on Linux include:\n\n*   `aufs` (the original and oldest)\n*   `overlay2` (probably the best choice for the future)\n*   `devicemapper`\n*   `btrfs`\n*   `zfs`\n\nDocker on Windows only supports a single storage driver, the `windowsfilter` driver.\n\nSelecting a storage driver is a *per node* decision. This means a single Docker host can only run a single storage driver \u2014 you cannot select the storage driver per-container. On Linux, you set the storage driver in `/etc/docker/daemon.json` and you need to restart Docker for any changes to take effect. The following snippet shows the storage driver set to `overlay2`.\n\n```\n{\n  \"storage-driver\": \"overlay2\"\n} \n```\n\n `> **Note:** If the configuration line is not the last line in the configuration file, you will need to add a comma to the end.\n\nIf you change the storage driver on an already-running Docker host, existing images and containers will not be available after Docker is restarted. This is because each storage driver has its own subdirectory on the host where it stores image layers (usually below `/var/lib/docker/<storage-driver>/...`). Changing the storage driver obviously changes where Docker looks for images and containers. Reverting the storage driver to the previous configuration will make the older images and containers available again.\n\nIf you need to change your storage driver, and you need your images and containers to be available after the change, you need to save them with `docker save`, push the saved images to a repo, change the storage driver, restart Docker, pull the images locally, and restart your containers.\n\nYou can check the current storage driver with the `docker system info` command:\n\n```\n$ docker system info\n<Snip>\nStorage Driver: overlay2\n  Backing Filesystem: xfs\n  Supports d_type: `true`\n  Native Overlay Diff: `true`\n<Snip> \n```\n\n `Choosing which storage driver, and configuring it properly, is important in any Docker environment \u2014 especially production. The following list can be used as a **guide** to help you choose which storage driver to use. However, you should always consult the latest support documentation from Docker, as well as your Linux provider.\n\n*   **Red Hat Enterprise Linux** with a 4.x kernel or higher + Docker 17.06 and higher: `overlay2`\n*   **Red Hat Enterprise Linux** with an older kernel and older versions of Docker: `devicemapper`\n*   **Ubuntu Linux** with a 4.x kernel or higher: `overlay2`\n*   **Ubuntu Linux** with an earlier kernel: `aufs`\n*   **SUSE Linux Enterprise Server:** `btrfs`\n\nAgain, this list should only be used as a guide. Always check the latest support and compatibility matrixes in the Docker documentation, and with your Linux provider. This is especially important if you are using Docker Enterprise Edition (EE) with a support contract.\n\n#### Devicemapper configuration\n\nMost of the Linux storage drivers require little or no configuration. However, `devicemapper` needs configuring in order to perform well.\n\nBy default, `devicemapper` uses *loopback mounted sparse files* to underpin the storage it provides to Docker. This is fine for a smooth out-of-the box experience that *just works*. But it\u2019s terrible for production. In fact, it\u2019s so bad that it\u2019s **not supported on production systems!**\n\nTo get the best performance out of `devicemapper`, as well as production support, you must configure it in `direct-lvm` mode. This significantly increases performance by leveraging an LVM `thinpool` backed by raw block devices.\n\nDocker 17.06 and higher can configure `direct-lvm` for you. However, at the time of writing, it has some limitations. The main ones being; it will only configure a single block device, and it only works for fresh installations. This might change in the future, but a single block device will not give you the best in terms of performance and resiliency.\n\n##### Letting Docker automatically configure `direct-lvm`\n\nThe following simple procedure will let Docker automatically configure `devicemapper` for `direct-lvm`.\n\n1.  Add the following storage driver configuration to `/etc/docker/daemon.json`\n\n    ```\n     {\n     \"storage-driver\": \"devicemapper\",\n     \"storage-opts\": [\n       \"dm.directlvm_device=/dev/xdf\",\n       \"dm.thinp_percent=95\",\n       \"dm.thinp_metapercent=1\",\n       \"dm.thinp_autoextend_threshold=80\",\n       \"dm.thinp_autoextend_percent=20\",\n       \"dm.directlvm_device_force=false\"\n     ]\n     } \n    ```\n\n     `Device Mapper and LVM are complex topics, and beyond the scope of a heterogeneous Docker book like this. However, let\u2019s quickly explain each option:\n\n    *   `dm.directlvm_device` is where you specify the block device. For best performance and availability, this should be a dedicated high-performance device such as a local SSD, or RAID protected high performance LUN from an external storage array.\n    *   `dm.thinp_percent=95` allows you to specify how much of the space you want Images and containers to be able to use. Default is 95%.\n    *   `dm.thinp_metapercent` sets the percentage of space to be used for metadata storage. Default is 1%.\n    *   `dm.thinp_autoextend_threshold` sets the threshold at which LVM should automatically extend the thinpool. The default value is currently 80%.\n    *   `dm.thinp_autoextend_percent` is the amount of space that should be added to the thin pool when an auto-extend operation is triggered.\n    *   `dm.directlvm_device_force` lets you specify whether or not to format the block device with a new filesystem.` \n`*   Restart Docker.*   Verify that Docker is running and the `devicemapper` configuration is correctly loaded.\n\n    ```\n     $ docker version\n     Client:\n     Version:      18.01.0-ce\n     <Snip>\n     Server:\n     Version:      18.01.0-ce\n     <Snip>\n\n     $ docker system info\n     <Snipped output only showing relevant data>\n     Storage Driver: devicemapper\n     Pool Name: docker-thinpool\n     Pool Blocksize: 524.3 kB\n     Base Device Size: 25 GB\n     Backing Filesystem: xfs\n     Data file:       << Would show a loop file if in loopback mode\n     Metadata file:   << Would show a loop file if in loopback mode\n     Data Space Used: 1.9 GB\n     Data Space Total: 23.75 GB\n     Data Space Available: 21.5 GB\n     Metadata Space Used: 180.5 kB\n     Metadata Space Total: 250 MB\n     Metadata Space Available: 250 MB \n    ```` \n\n ``Although Docker will only configure `direct-lvm` mode with a single block device, it will still perform significantly better than `loopback` mode!\n\n##### Manually configuring devicemapper direct-lvm\n\nWalking you through the entire process of manually configuring `device mapper direct-lvm` is beyond the scope of this book. It is also something that can change and vary between OS versions. However, the following items are things you should know and consider when performing a configuration.\n\n*   **Block devices**. You need to have block devices available in order to configure `direct-lvm` mode. These should be high performance devices such as local SSD or high performance external LUNs. If your Docker environment is on-premises, external LUNs can be on FC, iSCSI, or other block-protocol storage arrays. If your Docker environment is in the public cloud, these can be any form of high performance block storage (usually SSD-based) supported by your cloud provider.\n*   **LVM config**. The `devicemapper` storage driver leverages LVM, the Linux Logical Volume Manager. This means you will need to configure the required physical devices (pdev), volume group (vg), logical volumes (lv), and thinpool (tp). You should use dedicated physical volumes and form them into a new volume group. You should not share the volume group with non-Docker workloads. You will also need to configure two logical volumes; one for data and the other for metadata. Create an LVM profile specifying the auto-extend threshold and auto-extend values, and configure monitoring so that auto-extend operations can happen.\n*   **Docker config**. Backup the current Docker config file (`/etc/docker/daemon.json`) and then update it as follows. The name of the `dm.thinpooldev` might be different in your environment and you should adjust as appropriate.\n\n    ```\n     {\n       \"storage-driver\": \"devicemapper\",\n       \"storage-opts\": [\n       \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n       \"dm.use_deferred_removal=true\",\n       \"dm.use_deferred_deletion=true\"\n       ]\n     } \n    ```\n\n `Once the configuration is saved you can start the Docker daemon.\n\nFor more detailed information, see the Docker documentation or talk to your Docker technical account manager.\n\n### Chapter Summary\n\nDocker is available for Linux and Windows, and has a Community Edition (CE) and an Enterprise Edition (EE). In this chapter, we looked at some of the ways to install Docker on Windows 10, Mac OS X, Linux, and Windows Server 2016.\n\nWe looked at how to upgrade the Docker Engine on Ubuntu 16.04 and Windows Server 2016, as these are two of the most common configurations.\n\nWe also learned that selecting the right *storage driver* is essential when using Docker on Linux in production environments.```````", "`````````````````````````"]