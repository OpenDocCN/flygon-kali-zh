- en: Building an App Using the Google Faces API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Faces API构建应用程序
- en: The ability of computers to perform tasks such as identifying objects has always
    been a humongous task for both the software and the required architecture. This
    isn't the case anymore since the likes of Google, Amazon, and a few other companies
    have done all the hard work, providing the infrastructure and making it available
    as a cloud service. It should be noted that they are as easy to access as making
    REST API calls.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机执行识别对象等任务的能力一直是软件和所需架构的巨大任务。自从谷歌、亚马逊和其他一些公司已经完成了所有艰苦的工作，提供了基础架构，并将其作为云服务提供，这种情况已经不再存在。应该注意的是，它们可以像进行REST
    API调用一样容易访问。
- en: In this chapter, you will learn how to use the face detection API from Google's
    Mobile Vision API to detect faces and add fun functionalities such as adding rabbit
    ears to a user's picture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用谷歌移动视觉API的人脸检测API来检测人脸，并添加有趣的功能，比如给用户的图片添加兔子耳朵。
- en: 'In this chapter, the following topics are going to be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下主题：
- en: Identifying human faces in an image
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像中识别人脸
- en: Tracking human faces from a camera feed
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从摄像头源跟踪人脸
- en: Identifying specific parts of the face (for example, eyes, ears, nose, and mouth)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别面部的特定部位（例如眼睛、耳朵、鼻子和嘴巴）
- en: Drawing graphics on specific parts of a detected face in an image (for example,
    rabbit ears over the user's ears)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像中的特定部位上绘制图形（例如，在用户的耳朵上添加兔子耳朵）
- en: Introduction to Mobile Vision
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动视觉简介
- en: The Mobile Vision API provides a framework for finding objects in photos and
    videos. The framework can locate and describe visual objects in **images** or
    **video frames**, and it has an event-driven API that tracks the position of those
    objects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 移动视觉API提供了一个框架，用于在照片和视频中查找对象。该框架可以定位和描述图像或视频帧中的视觉对象，并具有一个事件驱动的API，跟踪这些对象的位置。
- en: Currently, the Mobile Vision API includes **face**, **barcode**, and **text**
    detectors.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Mobile Vision API包括**人脸**、**条形码**和**文本**检测器。
- en: Faces API concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人脸API概念
- en: Before diving into coding the features, it is necessary that you understand
    the underlying concepts of the face detection capabilities of the face detection
    API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编码功能之前，有必要了解人脸检测API的基本概念。
- en: 'From the official documentation:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 来自官方文档：
- en: <q>Face detection is the process of automatically locating human faces in visual
    media (digital images or video). A face that is detected is reported at a position
    with an associated size and orientation. Once a face is detected, it can be searched
    for landmarks such as the eyes and nose.</q>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <q>人脸检测是自动在视觉媒体（数字图像或视频）中定位人脸的过程。检测到的人脸将以位置、大小和方向进行报告。一旦检测到人脸，就可以搜索眼睛和鼻子等地标。</q>
- en: A key point to note is that only after a face is detected will landmarks such
    as eyes and a nose be searched for. As part of the API, you could opt out of detecting
    these landmarks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个关键点是，只有在检测到人脸后，才会搜索眼睛和鼻子等地标。作为API的一部分，您可以选择不检测这些地标。
- en: Note the difference between face detection and face recognition. While the former
    is able to recognize a face from an image or video, the latter does the same and
    is also able to tell that a face has been seen before. The former has no memory
    of a face it has detected before.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意人脸检测和人脸识别之间的区别。前者能够从图像或视频中识别人脸，而后者则可以做到同样，并且还能够告诉人脸之前是否已经被识别过。前者对其之前检测到的人脸没有记忆。
- en: 'We will be using a couple of terms in this section, so let me give you an overview
    of each of these before we go any further:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用一些术语，所以在我们进一步之前，让我给您概述一下每个术语：
- en: '**Face tracking** extends face detection to video sequences. When a face appears
    in a video for any length of time, it can be identified as the same person and
    can be tracked.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**人脸跟踪**将人脸检测扩展到视频序列。当视频中出现人脸时，可以将其识别为同一个人并进行跟踪。'
- en: It is important to note that the face that you are tracking must appear in the
    same video. Also, this is not a form of face recognition; this mechanism just
    makes inferences based on the position and motion of the face(s) in a video sequence.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，您正在跟踪的人脸必须出现在同一个视频中。此外，这不是一种人脸识别形式；这种机制只是根据视频序列中面部的位置和运动进行推断。
- en: A **landmark** is a point of interest within a face. The left eye, right eye,
    and nose base are all examples of landmarks. The Face API provides the ability
    to find landmarks on a detected face.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**地标**是面部内的一个感兴趣的点。左眼、右眼和鼻子底部都是地标的例子。人脸API提供了在检测到的人脸上找到地标的能力。'
- en: '**Classification** is determining whether a certain facial characteristic is
    present. For example, a face can be classified with regards to whether its eyes
    are open or closed or smiling or not.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**分类**是确定某种面部特征是否存在。例如，可以根据面部是否睁着眼睛、闭着眼睛或微笑来对面部进行分类。'
- en: Getting started – detecting faces
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门-检测人脸
- en: You will first learn how to detect a face in a photo and its associated landmarks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先学习如何在照片中检测人脸及其相关的地标。
- en: We will need some requirements in order to pursue this.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了追求这一目标，我们需要一些要求。
- en: With a minimum of Google Play Services 7.8, you can use the Mobile Vision APIs,
    which provide the face detection APIs. Make sure you update your Google Play Services
    from the SDK manager so that you meet this requirement.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google Play服务7.8及以上版本中，您可以使用Mobile Vision API提供的人脸检测API。请确保您从SDK管理器中更新您的Google
    Play服务，以满足此要求。
- en: Get an Android device that runs Android 4.2.2 or later or a configured Android
    Emulator. The latest version of the Android SDK includes the SDK tools component.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 获取运行Android 4.2.2或更高版本的Android设备或配置好的Android模拟器。最新版本的Android SDK包括SDK工具组件。
- en: Creating the FunyFace project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建FunyFace项目
- en: 'Create a new project called FunyFace. Open up the app module''s `build.gradle`
    file and update the dependencies to include the Mobile Vision APIs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为FunyFace的新项目。打开应用程序模块的`build.gradle`文件，并更新依赖项以包括Mobile Vision API：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, update your `AndroidManifest.xml` to include meta data for the faces API:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，让我们开始吧——这就是你将看到所有这些如何发挥作用的地方。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, your app is ready to use the face detection APIs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`detectFace()`方法中，你将首先从drawable文件夹中将图像加载到内存中，并从中创建一个位图图像。由于当检测到面部时，你将更新这个位图来绘制在上面，所以你需要将它设置为可变的。这就是使你的位图可变的方法。
- en: 'To keep things simple, for this lab, you''re just going to process an image
    that is already present in your app. Add the following image to your `res/drawable`
    folder:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，对于这个实验，你只需要处理应用程序中已经存在的图像。将以下图像添加到你的`res/drawable`文件夹中。
- en: '![](img/2112ecc1-219a-482e-8a9d-c2cc06eeedfb.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: 现在，这就是你将如何进行面部检测的方法。
- en: Now, this is how you will go about performing face detection.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新你的`AndroidManifest.xml`，包括面部API的元数据。
- en: You will first load the image into memory, get a `Paint` instance, and create
    a temporary bitmap based on the original, from which you will create a canvas. Create
    a frame using the bitmap and then call the detect method on `FaceDetector`, using
    this frame to get back `SparseArray` of face objects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将图像加载到内存中，获取一个`Paint`实例，并基于原始图像创建一个临时位图，然后创建一个画布。使用位图创建一个帧，然后在`FaceDetector`上调用detect方法，使用这个帧来获取面部对象的`SparseArray`。
- en: Well, let's get down to business—this is where you will see how all of these
    play out.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Paint实例。
- en: 'First, open up your `activity_main.xml` file and update the layout so that
    it has an image view and a button. See the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下代码：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That is all you need to do here so that you have `FrameLayout` with `ImageView`
    and a button. Now, open up `MainActivity.kt` and add the following import statements. This
    is just to make sure that you import from the right packages as you move along.
    In your `onCreate()` method, attach a click listener to the button in your `MainActivity`
    layout file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你在这里需要做的一切，这样你就有了一个带有`ImageView`和一个按钮的`FrameLayout`。现在，打开`MainActivity.kt`并添加以下导入语句。这只是为了确保你在移动过程中从正确的包中导入。在你的`onCreate()`方法中，将点击监听器附加到`MainActivity`布局文件中的按钮。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading the image
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载图像。
- en: 'In your `detectFace()` method, you will first load your image from the drawable
    folder into memory and create a bitmap image from it. Since you will be updating
    this bitmap to paint over it when the face is detected, you need to make it mutable.
    This is what makes your bitmap mutable:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Paint` API获取`Paint`类的实例。你只会在面部周围绘制，而不是整个面部。为此，设置一个细线，给它一个颜色，在我们的例子中是红色，并将绘画样式设置为`STROKE`。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'See the following implementation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下实现：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a Paint instance
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在，你的应用程序已经准备好使用面部检测API。
- en: 'Use the `Paint` API to get an instance of the `Paint` class. You will only
    draw around the face, and not paint the whole face. To do this, set a thin stroke,
    give it a color, which in our case is red, and set the style of paint to `STROKE`
    using `Paint.Style.STROKE`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将使用`faceDetector`实例的`detect()`方法来获取面部及其元数据。结果将是`SparseArray`的`Face`对象。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Paint` class holds the information related to the *style* and *color* related
    to the text, bitmap, and various shapes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Paint`类保存与文本、位图和各种形状相关的*样式*和*颜色*的信息。'
- en: Creating a canvas
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个画布。
- en: 'To get the canvas, first create a bitmap using the dimensions from the bitmap
    you created earlier. With this canvas, you will paint over the bitmap to draw
    the outline of the face after it has been detected:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得画布，首先使用之前创建的位图的尺寸创建一个位图。有了这个画布，你将在位图上绘制面部的轮廓。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Canvas` class is used to hold the call made to draw. A canvas is a drawing
    surface and it provides various methods for drawing onto a bitmap.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`Canvas`类用于保存绘制的调用。画布是一个绘图表面，它提供了各种方法来绘制到位图上。'
- en: Creating the face detector
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建面部检测器。
- en: All you have done thus far is basically housekeeping. You will now access the
    FaceDetector API by which you will, well, detect the face in the image. You will
    disable tracking for now, as you only want to detect the face at this stage.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你所做的基本上是一些前期工作。现在你将通过FaceDetector API访问面部检测，你将在这个阶段禁用跟踪，因为你只想检测图像中的面部。
- en: Note that on its first run, the Play Services SDK will take some time to initialize
    the Faces API. It may or may not have completed this process at the time you intend
    to use it. Therefore, as a safety check, you need to ensure its availability before
    using it. In this case, you will show a simple dialog to the user if the `FaceDetector`
    is not ready at the time the app is run.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第一次运行时，Play服务SDK将需要一些时间来初始化Faces API。在你打算使用它的时候，它可能已经完成了这个过程，也可能没有。因此，作为一个安全检查，你需要确保在使用它之前它是可用的。在这种情况下，如果`FaceDetector`在应用程序运行时还没有准备好，你将向用户显示一个简单的对话框。
- en: 'Also note that you may need an internet connection as the SDK initializes.
    You also need to ensure you have enough space, as the initialization may download
    some native library onto the device:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，由于SDK的初始化，你可能需要互联网连接。你还需要确保有足够的空间，因为初始化可能会下载一些本地库到设备上。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Detecting the faces
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测面部。
- en: 'Now, you will use the `detect()` method from the `faceDetector` instance to
    get the faces and their metadata. The result will be `SparseArray` of `Face` objects:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的`activity_main.xml`文件，并更新布局，使其包含一个图像视图和一个按钮。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Drawing rectangles on the faces
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在面部上绘制矩形。
- en: 'Now that you have the faces, you will iterate through this array to get the
    coordinates of the bounding rectangle for the face. Rectangles require `x`, `y`
    of the top left and bottom right corners, but the information available only gives
    the left and top positions, so you have to calculate the bottom right using the
    top `left`, `width`, and `height`. Then, you need to release the `faceDetector`
    to free up resources. Here''s the code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了面部，你将遍历这个数组，以获取面部边界矩形的坐标。矩形需要左上角和右下角的`x`，`y`，但可用的信息只给出了左上角的位置，所以你需要使用左上角、宽度和高度来计算右下角。然后，你需要释放`faceDetector`以释放资源。
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Results
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果。
- en: 'All set. Run the app, press the DETECT FACE button, and wait a while...:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪。运行应用程序，点击“检测面部”按钮，然后等一会儿...
- en: '![](img/784e912e-461c-42b5-b1d6-a0ac18c096e2.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/784e912e-461c-42b5-b1d6-a0ac18c096e2.png)'
- en: 'The app should detect the face and a square box should appear around the face,
    voila:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序应该能够检测到人脸，并在人脸周围出现一个方框，完成：
- en: '![](img/71235c88-1ca6-4ac3-b85b-9c3b4488cb53.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/71235c88-1ca6-4ac3-b85b-9c3b4488cb53.png)'
- en: Okay, let's move on and add some fun to their faces. To do this, you need to
    identify the position of the specific landmark you want, then draw over it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续为他们的脸部添加一些乐趣。要做到这一点，您需要确定您想要的特定地标的位置，然后在其上绘制。
- en: To find out the landmark's representation, you label them this time around,
    then afterwards draw your filter to the desired position.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出地标的表示，这次您要对它们进行标记，然后在所需位置绘制您的滤镜。
- en: 'To label, update the for loop which drew the rectangle around the face:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行标记，请更新绘制人脸周围矩形的for循环：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the app and take note of the labels of the various landmarks:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并注意各个地标的标签：
- en: '![](img/b183ac20-c006-4bcb-9066-28510bfaed67.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b183ac20-c006-4bcb-9066-28510bfaed67.png)'
- en: There you have it! That's funny, right?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！很有趣，对吧？
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use the Mobile Vision APIs, in this case,
    the Faces API. There are a few things to note here. This program is not optimized
    for production. Some things you can do on your own are load the image and do the
    processing in a background thread. You can also provide a functionality to allow
    the user to pick and choose images from different sources other than the static
    one used. You can get more creative with the filters and how they are applied
    too. Also, you can enable the tracking feature on the FaceDetector instance, and
    feed in a video to try out face tracking.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用移动视觉API，这里使用的是Faces API。这里有几件事情需要注意。该程序并非针对生产进行优化。您可以自行加载图像并在后台线程中进行处理。您还可以提供功能，允许用户从除静态源之外的不同来源选择图像。您还可以更有创意地使用滤镜以及它们的应用方式。此外，您还可以在FaceDetector实例上启用跟踪功能，并输入视频以尝试人脸跟踪。
