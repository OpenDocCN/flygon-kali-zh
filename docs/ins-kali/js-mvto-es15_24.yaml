- en: Chapter 11. Microservices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 微服务
- en: It seems like no book on programming these days is complete without at least
    some mention of microservices. For fear that this book could be singled out for
    ridicule as a non-conformant publication, a chapter has been included on microservices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在似乎没有一本编程书籍是完整的，没有至少提到一些微服务。为了避免这本书被指责为不符合规范的出版物，我们在微服务上包含了一章。
- en: 'Microservices are billed as the solution to the problems of monolithic applications.
    Likely every application you''ve dealt with has been a monolith: that is, the
    application has a single logical executable and is perhaps split into layers such
    as a user interface, a service or application layer, and a data store. In many
    applications these layers might be a web page, a server side application, and
    a database. Monoliths have their issues as I''m sure you''ve encountered.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务被宣传为解决单体应用程序问题的解决方案。很可能你处理过的每个应用程序都是单体应用程序：也就是说，该应用程序有一个单一的逻辑可执行文件，并且可能分成诸如用户界面、服务或应用程序层和数据存储等层。在许多应用程序中，这些层可能是一个网页、一个服务器端应用程序和一个数据库。单体应用程序有它们的问题，我相信你已经遇到过。
- en: Maintaining a monolithic application quickly becomes an exercise in limiting
    the impact of change. Frequently in such applications a change to one, seemingly
    isolated, corner of the application has an unintended effect on some other part
    of the application. Although there are many patterns and approaches to describe
    well isolated components, these often fall by the wayside inside a monolith. Often
    we take shortcuts which may save time now but will return to make our lives terrible
    down the road.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 维护单体应用程序很快就变成了限制变更影响的练习。在这样的应用程序中，经常对应用程序的一个看似孤立的角落进行更改会对应用程序的其他部分产生意想不到的影响。尽管有许多模式和方法来描述良好隔离的组件，但在单体应用程序中，这些往往被忽视。通常我们会采取捷径，这可能会节省时间，但将在未来让我们的生活变得糟糕。
- en: Monolithic applications are also difficult to scale. Because we tend to have
    only three layers, we are limited to scaling each one of those layers. We can
    add more application servers if the middle tier is becoming slow or more web servers
    if the web tier is laggy. If the database is slow then we can increase the power
    of the database server. These scaling approaches are very large operations. If
    the only part of the application which is slow is signing up new users, then we
    really have no way to simply scale that one component. This means that components
    which are not frequently used (one might call these cold or cool components) must
    be able to scale as the whole application scales. This sort of scaling doesn't
    come for free.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 单体应用程序也很难扩展。因为我们倾向于只有三层，所以我们只能扩展这些层中的每一层。如果中间层变慢，我们可以添加更多的应用服务器，如果Web层滞后，我们可以添加更多的Web服务器。如果数据库变慢，我们可以增加数据库服务器的性能。这些扩展方法是非常庞大的操作。如果应用程序中唯一缓慢的部分是注册新用户，那么我们真的没有办法简单地扩展该组件。这意味着不经常使用的组件（可以称之为冷或凉组件）必须能够随着整个应用程序的扩展而扩展。这种扩展并非免费。
- en: 'Consider that scaling from a single web server to multiple web servers introduces
    the problem of sharing sessions between many web servers. If we were, instead,
    to divide our application into a number of services, of which each acts as the
    canonical source of truth for a piece of data, then we could scale these sections
    independently. A service for logging users in, another service for saving and
    retrieving their preferences, yet another for sending out reminder e-mails about
    abandoned shopping carts, each one responsible for its own functions and own data.
    Each service stands alone as a separate application and may run on a separate
    machine. In effect we have taken our monolithic application and sharded it into
    many applications. Not only does each service have an isolated function but it
    also has its own datastore and could be implemented using its own technology.
    The difference between a monolith and microservices can be seen here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑从单个Web服务器扩展到多个Web服务器会引入在许多Web服务器之间共享会话的问题。如果我们将应用程序分成多个服务，每个服务都作为数据的规范真实来源，那么我们可以独立扩展这些部分。一个用于登录用户的服务，另一个用于保存和检索他们的偏好设置，另一个用于发送有关遗弃购物车的提醒电子邮件，每个服务负责自己的功能和自己的数据。每个服务都独立作为一个单独的应用程序，并且可以在单独的机器上运行。实际上，我们已经将我们的单体应用程序分片成了许多应用程序。每个服务不仅具有隔离的功能，而且还具有自己的数据存储，并且可以使用自己的技术来实现。单体应用程序和微服务之间的区别可以在这里看到：
- en: '![Microservices](img/00088.jpeg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![微服务](img/00088.jpeg)'
- en: Applications are written more by composing services than by writing singular
    monolithic applications. The UI of an application can even be created by asking
    a number of services to provide visual components to be slotted into a composite
    UI by some form of composing service.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序更多地是通过组合服务来编写，而不是编写单一的单体应用程序。应用程序的用户界面甚至可以通过请求一些服务来提供可视组件，然后由某种形式的组合服务将其插入到复合用户界面中来创建。
- en: Node.js' lightweight approach to building applications with just the required
    components makes it an ideal platform to build lightweight microservices. Many
    microservice deployments make heavy use of HTTP to communicate between services
    while others rely more heavily on messaging systems such as **RabbitMQ** or **ZeroMQ**.
    These two communication methods may be mixed in deployments. One might split the
    technology used along the lines of using HTTP against services which are query-only,
    and messaging against services which perform some action. This is because messaging
    is more reliable (depending on your messaging system and configuration) than sending
    HTTP requests.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js对构建只需组件的应用程序的轻量级方法使其成为构建轻量级微服务的理想平台。许多微服务部署大量使用HTTP在服务之间进行通信，而其他则更多地依赖于消息系统，如RabbitMQ或ZeroMQ。这两种通信方法可能在部署中混合使用。可以根据使用HTTP对只进行查询的服务进行技术分割，而对执行某些操作的服务使用消息传递。这是因为消息传递比发送HTTP请求更可靠（取决于您的消息传递系统和配置）。
- en: While it may seem that we've introduced a great deal of complexity into the
    system it is a complexity that is easier to manage with modern tooling. Very good
    tooling exists for managing distributed log files and for monitoring the performance
    of applications for performance issues. Isolating and running many applications
    with virtualization is more approachable than ever with containerization technologies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然看起来我们在系统中引入了大量的复杂性，但这是一种更容易通过现代工具管理的复杂性。存在非常好的工具，用于管理分布式日志文件和监视应用程序的性能问题。通过虚拟化隔离和运行许多应用程序比以往任何时候都更容易，使用容器化技术。
- en: 'Microservices may not be the solution to all our maintenance and scalability
    issues but they are certainly an approach that is viable for consideration. In
    this chapter we''ll explore some of the patterns that may assist in using microservices:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务可能不是解决我们所有维护和可扩展性问题的解决方案，但它们肯定是一个值得考虑的方法。在本章中，我们将探讨一些可能有助于使用微服务的模式：
- en: Façade
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外观
- en: Aggregate services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合服务
- en: Pipeline
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: Message upgrader
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息升级器
- en: Service selector
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务选择器
- en: Failure patterns
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障模式
- en: Because microservices are a relatively new development, there are likely to
    be many more patterns which emerge as more and more applications are created with
    the microservice approach. There is some similarity between the Microservices
    approach and **Service Oriented** **Architecture** (**SOA**). This means that
    there are likely some patterns from the SOA world which will be applicable in
    the microservices world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于微服务是一个相对较新的发展，随着越来越多的应用程序采用微服务方法创建，可能会出现更多的模式。微服务方法与面向服务的体系结构（SOA）之间存在一些相似之处。这意味着SOA世界中可能有一些模式适用于微服务世界。
- en: Façade
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外观
- en: If you feel that you recognize the name of this pattern, then you're correct.
    We discussed this pattern way back in [Chapter 4](part0102_split_000.html#318PC1-015e68c68a464f18a9559f448be84435
    "Chapter 4. Structural Patterns"), *Structural Patterns*. In that application
    of the pattern we created a class which could direct the actions of a number of
    other classes providing a simpler API. Our example was that of an admiral who
    directed a fleet of ships. In the microservices world we can simply replace the
    concept of classes with that of services. After all, the functionality of a service
    is not that different from a microservice – they both perform a single action.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得认识这种模式的名称，那么您是正确的。我们在[第4章](part0102_split_000.html#318PC1-015e68c68a464f18a9559f448be84435
    "第4章。结构模式")*结构模式*中讨论过这种模式。在该模式的应用中，我们创建了一个可以指导许多其他类的操作的类，提供了一个更简单的API。我们的例子是指挥一支舰队的海军上将。在微服务世界中，我们可以简单地用服务的概念取代类的概念。毕竟，服务的功能与微服务并没有太大的不同-它们都执行单个操作。
- en: 'We might make use of a façade to coordinate the use of a number of other services.
    This pattern is a base pattern for many of the other patterns listed in this chapter.
    Coordinating services can be difficult, but by putting them behind a façade we
    can make the entire application much simpler. Let us consider a service which
    sends e-mails. Sending e-mails is quite a complex process which may involve a
    number of other services: a username to e-mail address translator, an anti-malware
    scanner, a spam checker, a formatter to message the e-mail body for various e-mail
    clients, and so forth.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会利用外观来协调使用多个其他服务。这种模式是本章中列出的许多其他模式的基本模式。协调服务可能很困难，但通过将它们放在外观后面，我们可以使整个应用程序变得更简单。让我们考虑一个发送电子邮件的服务。发送电子邮件是一个相当复杂的过程，可能涉及许多其他服务：用户名到电子邮件地址的转换器，反恶意软件扫描程序，垃圾邮件检查程序，用于为各种电子邮件客户端格式化电子邮件正文的格式化程序等等。
- en: 'Most clients who want to send e-mail don''t want to concern themselves with
    all of these other services so a façade e-mail-sending service can be put in place
    which holds the responsibility of coordinating other services. The coordination
    pattern can be seen here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数想要发送电子邮件的客户不想关心所有这些其他服务，因此可以放置一个外观电子邮件发送服务，它负责协调其他服务。协调模式可以在这里看到：
- en: '![Façade](img/00089.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![外观](img/00089.jpeg)'
- en: Service selector
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务选择器
- en: 'Along the same lines as a façade we have the service selector pattern. In this
    pattern we have a service which fronts a number of other services. Depending on
    the message which arrives, a different service could be selected to respond to
    the initial request. This pattern is useful in upgrade scenarios and for experimentation.
    If you''re rolling out a new service and want to ensure that it will function
    correctly under load then you could make use of the service selector pattern to
    direct a small portion of your production traffic to the new service while monitoring
    it closely. Another application might be for directing specific customers or groups
    of customers to a different service. The distinguishing factor could be anything
    from directing people who have paid for your service toward faster end points,
    to directing traffic from certain countries to country-specific services. The
    service selector pattern can be seen in this illustration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与外观类似的是服务选择器模式。在这种模式中，我们有一个服务，它代表其他多个服务。根据到达的消息，可以选择不同的服务来响应初始请求。这种模式在升级场景和实验中很有用。如果您正在推出一个新服务，并希望确保它在负载下能正常运行，那么您可以利用服务选择器模式，将一小部分生产流量引导到新服务，同时密切监视它。另一个应用可能是将特定的客户或客户群体引导到不同的服务。区分因素可以是任何东西，从将为您的服务付费的人引导到更快的终端点，到将来自某些国家的流量引导到特定国家的服务。服务选择器模式可以在这个插图中看到：
- en: '![Service selector](img/00090.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![服务选择器](img/00090.jpeg)'
- en: Aggregate services
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚合服务
- en: Data in a microservice architecture is owned by a single service, but there
    are many times when we might need to retrieve data from a number of different
    sources at once. Consider, again, a member of the Small Council in the land of
    Westeros. They may have a number of informants from whom they gather information
    about the workings of the kingdom. You can consider each informant to be its own
    microservice.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构中的数据由单个服务拥有，但有许多时候我们可能需要一次从许多不同的来源检索数据。再次考虑一下，维斯特洛大陆的小议会成员。他们可能有许多消息来源，从中收集有关王国运作的信息。您可以将每个消息来源视为其自己的微服务。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Informants are a fantastic metaphor for microservices as each one is independent
    and holds its own data. Services may also fail from time to time just as informants
    may be captured and terminated. Messages are passed between informants just as
    they are among a collection of microservices. Each informant should know very
    little about how the rest of the informants work, and even, who they are – an
    abstraction which works for microservices too.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 消息来源是微服务的绝佳比喻，因为每个消息来源都是独立的，并拥有自己的数据。服务也可能会偶尔失败，就像消息来源可能会被捕获和终止一样。消息在消息来源之间传递，就像在一组微服务之间传递一样。每个消息来源对其他消息来源的工作知之甚少，甚至不知道它们是谁——这也适用于微服务的抽象。
- en: 'With the aggregate service pattern, we ask each one of a collection of nodes
    to perform some action or return some piece of data. This is a fairly common pattern
    even outside the microservice world and is a special case of the façade or even
    adapter pattern. The aggregator requests information from a number of other services
    and then waits for them to return. Once all the data has been returned, then the
    aggregator may perform some additional tasks such as summarizing the data or counting
    records. The information is then passed back to the caller. The aggregator can
    be seen in this illustration:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用聚合服务模式，我们要求收集的每个节点执行某些操作或返回某些数据。这是一个相当常见的模式，即使在微服务世界之外也是如此，它是外观模式甚至适配器模式的特例。聚合器从许多其他服务请求信息，然后等待它们返回。一旦所有数据都返回了，聚合器可能执行一些额外的任务，比如总结数据或计算记录。然后将信息传递回调用者。聚合器可以在这个插图中看到：
- en: '![Aggregate services](img/00091.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![聚合服务](img/00091.jpeg)'
- en: This pattern may also have some provision for dealing with slow-to-return services
    or failures of services. The aggregator service may return partial results or
    return data from a cache in the event that one of the child services reaches a
    timeout. In certain architectures, the aggregator could return a partial result
    and then return additional data to the caller when it becomes available.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式可能还有一些处理返回缓慢或服务失败的规定。聚合器服务可能返回部分结果，或者在其中一个子服务达到超时时，从缓存中返回数据。在某些架构中，聚合器可以返回部分结果，然后在可用时向调用者返回其他数据。
- en: Pipeline
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: 'A pipeline is another example of a microservice connecting pattern. If you
    have made use of the shell on a *NIX system, then you have certainly piped the
    output of one command to another command. The programs on a *NIX system such as
    ls, sort, uniq, and grep are designed to perform just one task; their power comes
    from the ability to chain the tools together to build quite complex workflows.
    For instance, this command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是微服务连接模式的另一个例子。如果您在*NIX系统上使用过shell，那么您肯定已经将一个命令的输出传递给另一个命令。在*NIX系统上的程序，如ls、sort、uniq和grep，都是设计用来执行一个任务的；它们的强大之处在于能够将这些工具链接在一起，构建相当复杂的工作流程。例如，这个命令：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This command will list all the unique file extensions in the current directory.
    It does this by taking the list of files, then cutting them and taking the extension;
    this is then sorted and finally passed to `uniq` which removes duplicates. While
    I wouldn't suggest having a microservice for such trivial actions as sorting or
    deduplicating, you might have a series of services which build up more and more
    information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将列出当前目录中所有唯一的文件扩展名。它通过获取文件列表，然后剪切它们并获取扩展名；然后对其进行排序，最后传递给`uniq`，以删除重复项。虽然我不建议为这样的琐碎操作（如排序或去重）建立微服务，但您可能有一系列服务，逐渐构建更多的信息。
- en: 'Let''s imagine a query service that returns a collection of company records:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象一个查询服务，返回一组公司记录：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This record is returned by our company lookup service. Now we can pass this
    record onto our sales accounting service which will add a sales total to the record:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这条记录是由我们的公司查找服务返回的。现在我们可以将这条记录传递给我们的销售会计服务，该服务将向记录添加销售总额：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that record can be passed onto a sales estimate service, which further
    enhances the record with an estimate of 2017 sales:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该记录可以传递给销售估算服务，该服务将进一步增强该记录，估算2017年的销售额：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This sort of progressive enhancement could be reversed too by a service that
    stripped out information which shouldn''t be presented to the users. The record
    might now become the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种渐进式增强也可以通过一个服务来逆转，该服务剥离不应呈现给用户的信息。现在记录可能变成如下：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here we have dropped the company identifier because it is an internal identifier.
    A microservice pipeline should be bidirectional so that a quantum of information
    is passed into each step in the pipeline and then passed back out again through
    each step. This affords services the opportunity to act upon the data twice, manipulating
    it as they see fit. This is the same approach used in many web servers where modules
    such as PHP are permitted to act upon the request and the response. A pipeline
    can be seen illustrated here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们删除了公司标识符，因为它是内部标识符。微服务管道应该是双向的，这样信息量就可以通过管道中的每一步传递，然后再通过每一步传递回来。这为服务提供了两次操作数据的机会，使它们可以自行操作。这与许多Web服务器中使用的方法相同，例如允许PHP等模块对请求和响应进行操作。管道可以在这里看到：
- en: '![Pipeline](img/00092.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![管道](img/00092.jpeg)'
- en: Message upgrader
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息升级器
- en: 'One of the highest-risk activities with some monolithic applications is upgrading.
    To do so you basically need to upgrade the entire application at once. With even
    a medium-sized application there are far too many aspects to reasonably test.
    Thus at some point you simply need to cut over from the old system to the new
    system. With a microservice approach, the cutover can be done for each individual
    service. Smaller services mean that the risk can be spread out over a long time
    and, should something go wrong, the source of the error can be more quickly pinpointed:
    the singular new component.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些单块应用程序来说，最高风险的活动之一是升级。要做到这一点，基本上需要一次性升级整个应用程序。即使是中等规模的应用程序也有太多方面需要合理测试。因此，在某个时候，您只需从旧系统切换到新系统。采用微服务方法，可以为每个单独的服务进行切换。较小的服务意味着风险可以分散在较长的时间内，如果出现问题，错误的来源可以更快地被确定：新组件。
- en: 'At issue are the services which are still talking to the old version of the
    upgraded service. How can we continue to serve these services without having to
    update all those services too? If the interface to the service remains unchanged,
    say our service calculates the distance between two points on the earth and we
    change it from using a simple Pythagorean approach to using haversine (a formula
    to find the distance between two spots on a sphere), then there may be no need
    to make changes to the input and output formats. Frequently, however, this approach
    isn''t available to us as the message format must change. Even in the previous
    example there is a possibility of changing the output message. Haversine is more
    accurate than a Pythagorean approach so we could have more significant digits
    requiring a larger data type. There are two good approaches to deal with this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于仍在与升级后服务的旧版本进行通信的服务。我们如何继续为这些服务提供服务，而无需更新所有这些服务呢？如果服务的接口保持不变，比如我们的服务计算地球上两点之间的距离，我们将其从使用简单的毕达哥拉斯方法更改为使用haversine（一种在球面上找到两点之间距离的公式），那么可能无需更改输入和输出格式。然而，通常情况下，这种方法对我们来说是不可用的，因为消息格式必须更改。即使在前面的例子中，也有可能更改输出消息。Haversine比毕达哥拉斯方法更准确，因此我们可能需要更多有效数字，需要更大的数据类型。有两种处理这种情况的好方法：
- en: 'Continue to use the old version of our service and the new version. We can
    then slowly move the client services over to the new service as time permits.
    There are problems with this approach: we now need to maintain more code. Also,
    if the reason we change the service out was one which would not permit us to continue
    to run it (a security problem, termination of a dependent service, and so on)
    then we are at something of an impasse.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用我们的服务的旧版本和新版本。然后，我们可以在时间允许的情况下慢慢将客户服务迁移到新服务上。这种方法存在问题：我们现在需要维护更多的代码。此外，如果我们更改服务的原因是无法继续运行它（安全问题，终止依赖服务等），那么我们就陷入了某种僵局。
- en: Upgrade messages and pass them on. In this approach we take the old message
    format and upgrade it to the new format. This is done by, you guessed it, another
    service. This service's responsibility is to take in the old message format and
    emit the new message format. At the other end you might need an equivalent service
    to downgrade messages back to the expected output format for older services.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级消息并传递它们。在这种方法中，我们采用旧的消息格式并将其升级为新格式。这是由另一个服务完成的。该服务的责任是接收旧的消息格式并发出新的消息格式。在另一端，您可能需要一个等效的服务来将消息降级为旧服务的预期输出格式。
- en: 'Upgrader services should have a limited lifespan. Ideally we would want to
    make updates to the services which depend on deprecated services as quickly as
    possible. The small code footprint of microservices, coupled with the ability
    to rapidly deploy services, should make these sorts of upgrade much easier than
    those used to a monolithic approach might expect. An example message upgrader
    service can be seen here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 升级服务应该有一个有限的寿命。理想情况下，我们希望尽快对依赖于已弃用服务的服务进行更新。微服务的小代码占用空间，加上快速部署服务的能力，应该使这类升级比单块方法更容易。可以在这里看到一个示例消息升级服务：
- en: '![Message upgrader](img/00093.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![消息升级器](img/00093.jpeg)'
- en: Failure patterns
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障模式
- en: We have already touched upon some of the ways of dealing with failures in microservices
    in this chapter. There are, however, a couple of more interesting approaches we
    should consider. The first of these is service degradation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本章中提到了一些处理微服务故障的方法。然而，还有一些更有趣的方法值得考虑。其中之一是服务降级。
- en: Service degradation
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务降级
- en: This pattern could also be called graceful degradation and is related to progressive
    enhancement. Let us hark back to the example of replacing the Pythagorean distance
    function with the haversine equivalent. If the haversine service is down for some
    reason, the less demanding function could be used in its place without a huge
    impact on users. In fact, they may not notice it at all. It isn't ideal that users
    have a worse version of the service but it is certainly more desirable than simply
    showing the user an error message. When the haversine service returns to life
    then we can stop using the less desirable service. We could have multiple levels
    of fallback allowing several different services to fail while we continue to present
    a fully functional application to the end user.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式也可以称为优雅降级，与渐进增强有关。让我们回顾一下用haversine等效替换毕达哥拉斯距离函数的例子。如果haversine服务由于某种原因停止，可以使用较不严格的函数代替，对用户几乎没有影响。实际上，他们可能根本没有注意到。用户使用较差的服务并不理想，但肯定比简单地向用户显示错误消息更可取。当haversine服务恢复正常时，我们可以停止使用较差的服务。我们可以有多个级别的备用，允许多个不同的服务失败，同时我们继续向最终用户呈现一个完全功能的应用程序。
- en: Another good application of this form of degradation is to fall back to more
    expensive services. I once had an application that sent SMS messages. It was quite
    important that these messages actually be sent. We used our preferred SMS gateway
    provider the majority of the time but, if our preferred service was unavailable,
    something we monitored closely, then we would fail over to using a different provider.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种退化形式的另一个很好的应用是退回到更昂贵的服务。我曾经有一个应用程序发送短信。确实很重要这些消息实际上被发送。我们大多数时候使用我们首选的短信网关提供商，但是，如果我们的首选服务不可用，我们会切换到使用另一个提供商。
- en: Message storage
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息存储
- en: We've already drawn a bit of a distinction between services which are query-only
    and those which actually perform some lasting data change. When one of these updating
    services fails there is still a need to run the data change code at some point
    in the future. Storing these requests in a message queue allows them to be run
    later without risk of losing any of the ever-so important messages. Typically,
    when a message causes an exception it is returned to the processing queue where
    it can be retried.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在查询服务和实际执行持久数据更改的服务之间划分了一些区别。当这些更新服务之一失败时，仍然需要在将来的某个时刻运行数据更改代码。将这些请求存储在消息队列中可以在不丢失任何重要消息的风险下稍后运行它们。通常，当消息引发异常时，它会被返回到处理队列，可以进行重试。
- en: There is an old saying that insanity is doing the same thing over again and
    expecting a different outcome. However, there are many transient errors which
    can be solved by simply performing the same action over again. Database deadlocks
    are a prime example of this. Your transaction may be killed to resolve a deadlock,
    in which case performing it again is, in fact, the recommended approach. However,
    one cannot retry messages ad infinitum so it is best to choose some relatively
    small number of retry attempts, three or five. Once this number has been reached
    then the message can be sent to a dead letter or poison message queue.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有句古话说，疯狂就是一再做同样的事情，却期待不同的结果。然而，有许多瞬时错误可以通过简单地再次执行相同的操作来解决。数据库死锁就是一个很好的例子。为了解决死锁，可能会终止您的事务，这种情况下再次执行是推荐的方法。然而，不能无限次重试消息，所以最好选择一些相对较小的重试次数，比如三次或五次。一旦达到这个数字，消息就可以发送到死信或毒消息队列。
- en: 'Poison messages, or dead letters as some call them, are messages which have
    actual legitimate reasons for failing. It is important to keep these messages
    around not only for debugging purposes but because the messages may represent
    a customer order or a change to a medical record: not data you can afford to lose.
    Once the message handler has been corrected these messages can be replayed as
    if the error never happened. A storage queue and message reprocessor can be seen
    illustrated here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 毒消息，或者有些人称之为死信，是有合理失败原因的消息。保留这些消息非常重要，不仅用于调试目的，还因为这些消息可能代表客户订单或医疗记录的更改：这是您无法承受丢失的数据。一旦消息处理程序已经纠正，这些消息可以被重新播放，就好像错误从未发生过一样。存储队列和消息重新处理器的示意图如下所示：
- en: '![Message storage](img/00094.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![消息存储](img/00094.jpeg)'
- en: Message replay
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息重播
- en: Although not a real production pattern, a side-effect of having a message-based
    architecture around all the services which change data is that you can acquire
    the messages for later replay outside of production. Being able to replay messages
    is very handy for debugging complex interactions between numerous services as
    the messages contain almost all the information to set up a tracing environment
    identical to production. Replay capabilities are also very useful for environments
    where one must be able to audit any data changes to the system. There are other
    methods to address such audit requirements but a very solid message log is simply
    a delight to work with.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是真正的生产模式，但围绕所有更改数据的服务构建基于消息的架构的一个副作用是，您可以获取消息以便在生产环境之外进行后续重播。能够重播消息对于调试众多服务之间复杂交互非常方便，因为消息几乎包含了设置与生产环境相同的跟踪环境所需的所有信息。重播功能对于必须能够审计系统中的任何数据更改的环境也非常有用。还有其他方法来满足此类审计要求，但非常可靠的消息日志简直是一种乐趣。
- en: Indempotence of message handling
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 消息处理的幂等性
- en: The final failure pattern we'll discuss is idempotence of message handling.
    As systems grow larger it is almost certain that a microservices architecture
    will span many computers. This is even more certain due to the growing importance
    of containers, which can, ostensibly, be thought of as computers. Communicating
    between computers in a distributed system is unreliable; thus, a message may end
    up being delivered more than once. To handle such an eventuality one might wish
    to make messaging handling idempotent.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的最后一个故障模式是消息处理的幂等性。随着系统规模的增长，几乎可以肯定微服务架构将跨越许多计算机。由于容器的重要性日益增长，这更是确定无疑的。在分布式系统中，计算机之间的通信是不可靠的；因此，消息可能会被传递多次。为了处理这种可能性，人们可能希望使消息处理具有幂等性。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For more about the unreliability of distributed computing, I cannot recommend
    any paper more worth reading than *Falacies of Distributed Computing Explained*
    by Arnon Rotem-Gal-Oz at [http://rgoarchitects.com/Files/fallacies.pdf](http://rgoarchitects.com/Files/fallacies.pdf).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关于分布式计算的不可靠性，我推荐阅读的论文是Arnon Rotem-Gal-Oz的《分布式计算谬误解释》，链接在[http://rgoarchitects.com/Files/fallacies.pdf](http://rgoarchitects.com/Files/fallacies.pdf)。
- en: 'Idempotence means that a message can be processed many times without changing
    the outcome. This can be harder to achieve than one might realize, especially
    with services which are inherently non-transactional such as sending e-mails.
    In these cases, one may need to write a record that an e-mail has been sent to
    a database. There are some scenarios in which the e-mail will be sent more than
    once, but a service crashing in the critical section between the e-mail being
    sent and the record of it being written is unlikely. The decision will have to
    be made: is it better to send an e-mail more than once or not send it at all?'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等性意味着一条消息可以被处理多次而不改变结果。这可能比人们意识到的更难实现，特别是对于那些本质上是非事务性的服务，比如发送电子邮件。在这些情况下，可能需要将已发送电子邮件的记录写入数据库。在某些情况下，电子邮件可能会被发送多次，但在电子邮件发送和记录写入之间的关键部分崩溃的情况是不太可能的。必须做出决定：是更好地多次发送电子邮件，还是根本不发送？
- en: Hints and tips
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和建议
- en: If you think of a microservice as a class and your microservice web as an application,
    then it rapidly becomes apparent that many of the same patterns we've seen elsewhere
    in the module are applicable to microservices. Service discovery could be synonymous
    with dependency injection. Singleton, decorator, proxy; all of them could be applicable
    to the microservice world just as they are within the boundaries of a process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把微服务看作一个类，把你的微服务网络看作一个应用程序，那么很快就会发现，我们在本模块中看到的许多相同模式也适用于微服务。服务发现可能等同于依赖注入。单例、装饰器、代理；所有这些模式在微服务世界中也同样适用，就像它们在一个进程的边界内一样。
- en: One thing to keep in mind is that many of these patterns are somewhat chatty,
    sending significant data back and forth. Within a process there is no overhead
    to passing around pointers to data. The same is not true of microservices. Communicating
    over the network is likely to incur a performance penalty.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的一件事是，许多这些模式都有点啰嗦，来回发送大量数据。在一个进程内，传递数据指针是没有额外开销的。而在微服务中情况并非如此。通过网络通信很可能会产生性能损失。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Microservices are a fascinating idea and one which is more likely to be realized
    in the next few years. It is too early to tell if this is simply another false
    turn on the way to properly solving software engineering or a major step in the
    right direction. In this chapter we've explored a few patterns which may be of
    use should you embark upon a journey into the microservices world. Because we're
    only on the cusp of microservices becoming mainstream, it is likely that, more
    than any other chapter of this module, the patterns here will quickly become dated
    and found to be suboptimal. Remaining vigilant with regard to developments and
    being aware of the bigger picture when you're developing is highly advisable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一个迷人的想法，很可能在未来几年内会实现。现在还为时过早，无法确定这是否只是在正确解决软件工程方面又一个错误的转变，还是朝着正确方向迈出的重要一步。在本章中，我们探讨了一些模式，这些模式可能在你踏上微服务世界的旅程时会有所帮助。因为我们只是处于微服务变得主流的前夕，所以这里的模式很可能会很快过时，并被发现不够优化。在开发过程中保持警惕并了解更大的画面是非常明智的。
