- en: Kubernetes on AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上的Kubernetes
- en: 'Using Kubernetes on the public cloud is flexible and scalable for your application.
    AWS is one of the popular services in the public cloud industry. In this chapter,
    you will know what AWS is and how to set up Kubernetes on AWS along with the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共云上使用Kubernetes对您的应用程序来说是灵活和可扩展的。AWS是公共云行业中受欢迎的服务之一。在本章中，您将了解AWS是什么，以及如何在AWS上设置Kubernetes，以及以下主题：
- en: Understanding the public cloud
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解公共云
- en: Using and understanding AWS components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用和理解AWS组件
- en: Kubernetes setup and management by kops
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kops进行Kubernetes设置和管理
- en: Kubernetes cloud provider
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes云提供商
- en: Introduction to AWS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS简介
- en: When you run your application on the public network, you need an infrastructure
    such as networks, Virtual Machines, and storage. Obviously, companies borrow or
    build their own data center to prepare those infrastructures, and then hire data
    center engineers and operators to monitor and manage those resources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在公共网络上运行应用程序时，您需要像网络、虚拟机和存储这样的基础设施。显然，公司会借用或建立自己的数据中心来准备这些基础设施，然后雇佣数据中心工程师和运营商来监视和管理这些资源。
- en: However, purchasing and maintaining those assets need a large capital expense;
    you also need an operation expense for data center engineers/operators. You also
    need a read time to fully set up those infrastructures, such as buying a server,
    mounting to a data center rack, cabling a network, and then the initial configuration/installation
    of the OS, and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，购买和维护这些资产需要大量的资本支出；您还需要为数据中心工程师/运营商支付运营费用。您还需要一段时间来完全设置这些基础设施，比如购买服务器，安装到数据中心机架上，连接网络，然后进行操作系统的初始配置/安装等。
- en: Therefore, rapidly allocating an infrastructure with appropriate resource capacity
    is one of the important factors that dictates that success of your business.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，快速分配具有适当资源容量的基础设施是决定您业务成功的重要因素之一。
- en: To make infrastructure management easier and quicker, there is a lot of technology
    helps for data centers. Such as, for virtualization, **Software Defined Network**
    (**SDN**), **Storage Area Network** (**SAN**), and so on. But combining this technology
    has some sensitive compatibility issues and is difficult to stabilize; therefore
    it is required to hire experts in this industry, which makes operation costs higher
    eventually.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使基础设施管理更加简单和快速，数据中心有许多技术可以帮助。例如，对于虚拟化、软件定义网络（SDN）、存储区域网络（SAN）等。但是将这些技术结合起来会有一些敏感的兼容性问题，并且很难稳定；因此需要雇佣这个行业的专家，最终使运营成本更高。
- en: Public cloud
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共云
- en: There are some companies that have provided an online infrastructure service.
    AWS is a well known service that provides online infrastructure, which is called
    cloud or public cloud. Back in the year 2006, AWS officially launched the Virtual
    Machine service, which was called **Elastic Computing Cloud** (**EC2**), an online
    object store service, which was called **Simple Storage Service** (**S3**) and
    an online messaging queue service, which was called **Simple Queue Service** (**SQS**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些公司提供了在线基础设施服务。AWS是一个著名的提供在线基础设施的服务，被称为云或公共云。早在2006年，AWS正式推出了虚拟机服务，称为弹性计算云（EC2），在线对象存储服务，称为简单存储服务（S3），以及在线消息队列服务，称为简单队列服务（SQS）。
- en: These services are simple enough, but from a data center management point of
    view, they relieve infrastructure pre-allocation and reduce read time, because
    of pay-as-you-go pricing models (paying hourly or yearly for usage to AWS). Therefore,
    AWS is getting so popular that many companies have switched from their own data
    centers to the public cloud.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务足够简单，但从数据中心管理的角度来看，它们减轻了基础设施的预分配并减少了读取时间，因为它们采用按使用量付费的定价模型（按小时或年度向AWS支付）。因此，AWS变得如此受欢迎，以至于许多公司已经从自己的数据中心转向了公共云。
- en: An antonym of the public cloud, your own data center is called **on- premises**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与公共云相反，你自己的数据中心被称为**本地**。
- en: API and infrastructure as code
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API和基础设施即代码
- en: 'One of the unique benefits of using a public cloud instead of on-premises data
    centers that public cloud provides an API to control infrastructure. AWS provides
    command-line tools (**AWS CLI**) to control AWS infrastructure. For example, after
    signing up to AWS ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)),
    then install AWS CLI ([http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)),
    then if you want to launch one Virtual Machine (EC2 instance), use AWS CLI as
    follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用公共云而不是本地数据中心的独特好处之一是公共云提供了一个API来控制基础设施。AWS提供了命令行工具（**AWS CLI**）来控制AWS基础设施。例如，注册AWS（[https://aws.amazon.com/free/](https://aws.amazon.com/free/)）后，安装AWS
    CLI（[http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)），然后如果你想启动一个虚拟机（EC2实例），可以使用AWS
    CLI如下：
- en: '![](../images/00118.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00118.jpeg)'
- en: 'As you can see, it takes only just a few minutes to access your Virtual Machine
    after signing up to AWS. On the other hand, what if you set up your own on premise
    data center from scratch? The following diagram is a high-level comparison on
    if you use on premise data centers or if you use the public cloud:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，注册AWS后，只需几分钟就可以访问你的虚拟机。另一方面，如果你从零开始设置自己的本地数据中心会怎样呢？以下图表是对比使用本地数据中心和使用公共云的高层次比较：
- en: '![](../images/00119.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00119.jpeg)'
- en: As you can see, the public cloud is too simple and quick; this is why public
    cloud is flexible and convenient for not only emerging, but also permanent usage.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，公共云太简单和快速了；这就是为什么公共云不仅对新兴的使用方便，而且对永久的使用也很方便。
- en: AWS components
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS组件
- en: AWS has some components to configure network and storage. These are important
    to understand how the public cloud works and also important to know how to configure
    Kubernetes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: AWS有一些组件来配置网络和存储。了解公共云的工作原理以及如何配置Kubernetes是很重要的。
- en: VPC and subnet
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC和子网
- en: On AWS, first of all you need to create your own network; it is called **Virtual
    Private Cloud** (**VPC**) and uses a SDN technology. AWS allows you to create
    one or more VPC on AWS. Each VPC may connect with each other as required. When
    you create a VPC, just define one network CIDR block and AWS region. For example,
    CIDR `10.0.0.0/16` on `us-east-1`. No matter if you have access to a public network
    or not, you can define any network address range (between /16 to /28 netmask range).
    VPC creation is very quick, once done to create a VPC, and then you need to create
    one or more subnets within VPC.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上，首先你需要创建自己的网络；这被称为**虚拟私有云**（**VPC**）并使用SDN技术。AWS允许你在AWS上创建一个或多个VPC。每个VPC可以根据需要连接在一起。当你创建一个VPC时，只需定义一个网络CIDR块和AWS区域。例如，在`us-east-1`上的CIDR
    `10.0.0.0/16`。无论你是否有访问公共网络，你都可以定义任何网络地址范围（在/16到/28的掩码范围内）。VPC的创建非常快速，一旦创建了VPC，然后你需要在VPC内创建一个或多个子网。
- en: 'In the following example, one VPC is created via the AWS command line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，通过AWS命令行创建了一个VPC：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Subnet is a logical network block. It must belong to one VPC and in addition,
    belong to one availability zone. For example, VPC `vpc-66eda61f` and `us-east-1b`.
    Then the network CIDR must be within VPC's CIDR. For example, if VPC CIDR is `10.0.0.0/16`
    (`10.0.0.0` - `10.0.255.255`) then one subnet CIDR could be `10.0.1.0/24` (`10.0.1.0`
    - `10.0.1.255`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 子网是一个逻辑网络块。它必须属于一个VPC，并且另外属于一个可用区域。例如，VPC `vpc-66eda61f`和`us-east-1b`。然后网络CIDR必须在VPC的CIDR内。例如，如果VPC
    CIDR是`10.0.0.0/16`（`10.0.0.0` - `10.0.255.255`），那么一个子网CIDR可以是`10.0.1.0/24`（`10.0.1.0`
    - `10.0.1.255`）。
- en: 'In the following example, two subnets are created (`us-east-1a` and `us-east-1b`)
    onto `vpc-66eda61f`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，创建了两个子网（`us-east-1a`和`us-east-1b`）到`vpc-66eda61f`：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's make the first subnet a public facing subnet and the second subnet a private
    subnet. This means the public facing subnet can be accessible from the internet,
    which allows it to have a public IP address. On the other hand, a private subnet
    can't have a public IP address. To do that, you need to set up gateways and routing
    tables.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将第一个子网设置为面向公众的子网，将第二个子网设置为私有子网。这意味着面向公众的子网可以从互联网访问，从而允许它拥有公共IP地址。另一方面，私有子网不能拥有公共IP地址。为此，您需要设置网关和路由表。
- en: In order to make high availability for public networks and private networks,
    it is recommended to create at least four subnets (two public and two private
    on different availability zones).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使公共网络和私有网络具有高可用性，建议至少创建四个子网（两个公共和两个私有位于不同的可用区域）。
- en: But to simplify examples that are easy to understand, these examples create
    one public and one private subnet.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了简化易于理解的示例，这些示例创建了一个公共子网和一个私有子网。
- en: Internet gateway and NAT-GW
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网网关和NAT-GW
- en: In most cases, your VPC needs to have a connection with the public internet.
    In this case, you need to create an **IGW** (**internet gateway**) to attach to
    your VPC.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您的VPC需要与公共互联网连接。在这种情况下，您需要创建一个**IGW**（**互联网网关**）并附加到您的VPC。
- en: 'In the following example, an IGW is created and attached to `vpc-66eda61f`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，创建了一个IGW并附加到`vpc-66eda61f`：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once the IGW is attached, then set a routing table (default gateway) for a subnet
    that points to the IGW. If a default gateway points to an IGW, this subnet is
    able to have a public IP address and access from/to the internet. Therefore, if
    the default gateway doesn't point to IGW, it is determined as a private subnet,
    which means no public access.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦附加了IGW，然后为指向IGW的子网设置一个路由表（默认网关）。如果默认网关指向IGW，则该子网可以拥有公共IP地址并从/到互联网访问。因此，如果默认网关不指向IGW，则被确定为私有子网，这意味着没有公共访问。
- en: 'In the following example, a routing table is created that points to IGW and
    is set to the first subnet:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，创建了一个指向IGW并设置为第一个子网的路由表：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On the other hand, the second subnet, although a private subnet, does not need
    a public IP address, however, a private subnet sometimes needs to access the internet.
    For example, download some packages and access the AWS service access. In this
    case, we still have an option to connect to the internet. It is called **Network
    Address Translation Gateway** (**NAT-GW**).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，尽管第二个子网是一个私有子网，但不需要公共IP地址，但是私有子网有时需要访问互联网。例如，下载一些软件包和访问AWS服务。在这种情况下，我们仍然有一个连接到互联网的选项。它被称为**网络地址转换网关**（**NAT-GW**）。
- en: NAT-GW allows private subnets to access the public internet through NAT-GW.
    Therefore, NAT-GW must be located at a public subnet, and the private subnet routing
    table points to NAT-GW as a default gateway. Note that in order to access NAT-GW
    on the public network, it needs **Elastic IP** (**EIP**) attached to the NAT-GW.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: NAT-GW允许私有子网通过NAT-GW访问公共互联网。因此，NAT-GW必须位于公共子网上，并且私有子网的路由表将NAT-GW指定为默认网关。请注意，为了在公共网络上访问NAT-GW，需要将**弹性IP**（**EIP**）附加到NAT-GW。
- en: 'In the following example, a NAT-GW is created:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个NAT-GW：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unlike an IGW, AWS charges you an additional hourly cost for Elastic IP and
    NAT-GW. Therefore, if you wish to save costs, launch an NAT-GW only while accessing
    the internet.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与IGW不同，AWS会对弹性IP和NAT-GW收取额外的每小时费用。因此，如果希望节省成本，只有在访问互联网时才启动NAT-GW。
- en: Creating NAT-GW takes a few minutes, then once NAT-GW is created, update a private
    subnet routing table that point to NAT-GW, and then any EC2 instances are able
    to access the internet, but again, due to no public IP address on the private
    subnet, there is no chance of access from the public internet to the private subnet
    EC2 instances.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建NAT-GW需要几分钟，一旦NAT-GW创建完成，更新指向NAT-GW的私有子网路由表，然后任何EC2实例都能访问互联网，但由于私有子网上没有公共IP地址，因此无法从公共互联网访问私有子网的EC2实例。
- en: 'In the following example, an update routing table for the second subnet points
    to NAT-GW as the default gateway:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，更新第二个子网的路由表，将NAT-GW指定为默认网关：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Overall, there are two subnets that have been configured as public subnet and
    private subnet. Each subnet has a default route to use IGW and NAT-GW as follows.
    Note that ID varies because AWS assigns a unique identifier:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，已经配置了两个子网，一个是公共子网，一个是私有子网。每个子网都有一个默认路由，使用IGW和NAT-GW，如下所示。请注意，ID会有所不同，因为AWS会分配唯一标识符：
- en: '| **Types of subnet** | **CIDR block** | **Subnet ID** | **Route table ID**
    | **Default gateway** | **Assign Public IP while EC2 launches** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| **子网类型** | **CIDR块** | **子网ID** | **路由表ID** | **默认网关** | **EC2启动时分配公共IP**
    |'
- en: '| Public | 10.0.1.0/24 | `subnet-d83a4b82` | `rtb-fb41a280` | `igw-c3a695a5`
    (IGW) | Yes |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 公共 | 10.0.1.0/24 | `subnet-d83a4b82` | `rtb-fb41a280` | `igw-c3a695a5` (IGW)
    | 是 |'
- en: '| Private | 10.0.2.0/24 | `subnet-62758c06` | `rtb-cc4cafb7` | `nat-084ff8ba1edd54bf4`
    (NAT-GW) | No (default) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | 10.0.2.0/24 | `subnet-62758c06` | `rtb-cc4cafb7` | `nat-084ff8ba1edd54bf4`
    (NAT-GW) | 否（默认）|'
- en: Technically, you can still assign a public IP to private subnet EC2 instance,
    but there is no default gateway to the internet (IGW). Therefore, a public IP
    will just be wasted and absolutely not have connectivity from the internet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，您仍然可以为私有子网的EC2实例分配公共IP，但是没有通往互联网的默认网关（IGW）。因此，公共IP将被浪费，绝对无法从互联网获得连接。
- en: Now if you launch an EC2 instance on the public subnet, it becomes public facing,
    so you can serve your application from this subnet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果在公共子网上启动EC2实例，它将成为公共面向的，因此可以从该子网提供应用程序。
- en: On the other hand, if you launch an EC2 instance on the private subnet, it can
    still access to the internet through NAT-GW, but there will be no access from
    the internet. However, it can still access it from the public subnet's EC2 instances.
    So you can deploy internal services such as database, middleware, and monitoring
    tools.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果在私有子网上启动EC2实例，它仍然可以通过NAT-GW访问互联网，但无法从互联网访问。但是，它仍然可以从公共子网的EC2实例访问。因此，您可以部署诸如数据库、中间件和监控工具之类的内部服务。
- en: Security group
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全组
- en: Once VPC and subnets with related gateways/routes are ready, you can create
    EC2 instances. However, at least one access control needs to be created beforehand,
    which is called a **security group**. It can define a firewall rule that ingress
    (incoming network access) and egress (outgoing network access).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦VPC和相关的网关/路由子网准备就绪，您可以创建EC2实例。然而，至少需要事先创建一个访问控制，这就是所谓的**安全组**。它可以定义一个防火墙规则，即入站（传入网络访问）和出站（传出网络访问）。
- en: 'In the following example, a security group and a rule for public subnet hosts
    are created that allows ssh from your machine''s IP address, as well as open HTTP(80/tcp)
    world-wide:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，创建了一个安全组和一个规则，允许来自您机器的IP地址的公共子网主机的ssh，以及全球范围内开放HTTP（80/tcp）：
- en: When you define a security group for public subnet, it is highly recommended
    it to be reviewed by a security expert. Because once you deploy an EC2 instance
    onto the public subnet, it has a public IP address and then everyone including
    crackers and bots are able to access your instances directly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为公共子网定义安全组时，强烈建议由安全专家审查。因为一旦您将EC2实例部署到公共子网上，它就有了一个公共IP地址，然后包括黑客和机器人在内的所有人都能直接访问您的实例。
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, create a security group for a private subnet host, that allows ssh from
    the public subnet host. In this case, specifing a public subnet security group
    ID (`sg-7d429f0d`) instead of a CIDR block is convenient:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为私有子网主机创建一个安全组，允许来自公共子网主机的ssh。在这种情况下，指定公共子网安全组ID（`sg-7d429f0d`）而不是CIDR块是方便的：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Overall, there are two security groups that have been created as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，以下是已创建的两个安全组：
- en: '| **Name** | **Security group ID** | **Allow ssh (22/TCP)** | **Allow HTTP
    (80/TCP)** |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **安全组ID** | **允许ssh（22/TCP）** | **允许HTTP（80/TCP）** |'
- en: '| Public | `sg-7d429f0d` | Your machine (`107.196.102.199`) | `0.0.0.0/0` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 公共 | `sg-7d429f0d` | 您的机器（`107.196.102.199`） | `0.0.0.0/0` |'
- en: '| Private | `sg-d173aea1` | public sg (`sg-7d429f0d`) | public sg (`sg-7d429f0d`)
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | `sg-d173aea1` | 公共sg（`sg-7d429f0d`） | 公共sg（`sg-7d429f0d`） |'
- en: EC2 and EBS
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2和EBS
- en: EC2 is one important service in AWS that you can launch a VM on your VPC. Based
    on hardware spec (CPU, memory, and network), there are several types of EC2 instances
    that are available on AWS. When you launch an EC2 instance, you need to specify
    VPC, subnet, security group, and ssh keypair. Therefore, all of these must be
    created beforehand.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: EC2是AWS中的一个重要服务，您可以在您的VPC上启动一个VM。根据硬件规格（CPU、内存和网络），AWS上有几种类型的EC2实例可用。当您启动一个EC2实例时，您需要指定VPC、子网、安全组和ssh密钥对。因此，所有这些都必须事先创建。
- en: 'Because of previous examples, the only last step is ssh keypair. Let''s make
    an ssh keypair:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前的例子，唯一的最后一步是ssh密钥对。让我们创建一个ssh密钥对：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After a few minutes, check the EC2 instances status on the AWS web console;
    it shows a public subnet host that has a public IP address. On the other hand,
    a private subnet host doesn''t have a public IP address:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，在AWS Web控制台上检查EC2实例的状态；它显示一个具有公共IP地址的公共子网主机。另一方面，私有子网主机没有公共IP地址：
- en: '![](../images/00120.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00120.jpeg)'
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you are in the public subnet host (`54.227.197.56`), but this host also
    has an internal (private) IP address, because this host is deployed in the 10.0.1.0/24
    subnet (`subnet-d83a4b82`), therefore the private address range must be `10.0.1.1`
    - `10.0.1.254`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您位于公共子网主机（`54.227.197.56`），但是这台主机也有一个内部（私有）IP地址，因为这台主机部署在10.0.1.0/24子网（`subnet-d83a4b82`）中，因此私有地址范围必须是`10.0.1.1`
    - `10.0.1.254`：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s install nginx web server on the public host as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在公共主机上安装nginx web服务器如下：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, go back to your machine and check the website for `54.227.197.56`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，回到您的机器上，检查`54.227.197.56`的网站：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition, within the same VPC, there is reachability for other availability
    zones, therefore you can ssh from this host to the private subnet host (`10.0.2.98`).
    Note that we are using the `ssh -A` option that forwards a ssh-agent, so there
    is no need to create a `~/.ssh/id_rsa` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在同一个VPC内，其他可用区域也是可达的，因此您可以从这个主机ssh到私有子网主机（`10.0.2.98`）。请注意，我们使用了`ssh -A`选项，它转发了一个ssh-agent，因此不需要创建`~/.ssh/id_rsa`文件：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In addition to EC2, there is an important functionality, which is disk management.
    AWS provides a flexible disk management service called **Elastic Block Store**
    (**EBS**). You may create one or more persistent data storage that can attach
    to an EC2 instance. From an EC2 point of view, EBS is one of HDD/SSD. Once you
    terminate (delete) an EC2 instance, EBS and its contents may remain and then reattach
    to another EC2 instance.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了EC2，还有一个重要的功能，即磁盘管理。AWS提供了一个灵活的磁盘管理服务，称为**弹性块存储**（**EBS**）。您可以创建一个或多个持久数据存储，可以附加到EC2实例上。从EC2的角度来看，EBS是HDD/SSD之一。一旦终止（删除）了EC2实例，EBS及其内容可能会保留，然后重新附加到另一个EC2实例上。
- en: 'In the following example, one volume that has 40 GB capacity is created; and
    then attached to a public subnet host (instance ID `i-0db344916c90fae61`):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，创建了一个具有40GB容量的卷，并附加到一个公共子网主机（实例ID`i-0db344916c90fae61`）：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After attaching the EBS volume to the EC2 instance, the Linux kernel recognizes
    `/dev/xvdh` as specified, and then you need to do partitioning in order to use
    this device, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将EBS卷附加到EC2实例后，Linux内核会识别`/dev/xvdh`，然后您需要对该设备进行分区，如下所示：
- en: '![](../images/00121.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00121.jpeg)'
- en: 'In this example, we made one partition as `/dev/xvdh1`, so you can create a
    filesystem as `ext4` format on `/dev/xvdh1` and then you can mount to use this
    device on an EC2 instance:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将一个分区命名为`/dev/xvdh1`，所以你可以在`/dev/xvdh1`上创建一个`ext4`格式的文件系统，然后可以挂载到EC2实例上使用这个设备：
- en: '![](../images/00122.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00122.jpeg)'
- en: 'After unmounting the volume, you can feel free to detach this volume and then
    re-attach it whenever needed:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载卷后，您可以随时分离该卷，然后在需要时重新附加它：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Route 53
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Route 53
- en: AWS also provides a hosted DNS service called **Route 53**. Route 53 allows
    you to manage your own domain name and associated FQDN to an IP address. For example,
    if you want to have a domain name `k8s-devops.net`, you can order through Route
    53 to register your DNS domain.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: AWS还提供了一个托管DNS服务，称为**Route 53**。Route 53允许您管理自己的域名和关联的FQDN到IP地址。例如，如果您想要一个域名`k8s-devops.net`，您可以通过Route
    53订购注册您的DNS域名。
- en: 'The following screenshot shows ordering a domain name `k8s-devops.net`; it
    may take a few hours to complete registration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示订购域名`k8s-devops.net`；可能需要几个小时才能完成注册：
- en: '![](../images/00123.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00123.jpeg)'
- en: 'Once registration is completed, you may receive a notification email from AWS,
    and then you can control this domain name via the AWS command line or a web console.
    Let''s add one record (FQDN to IP address) that associate `public.k8s-devops.net`
    with the public facing EC2 host public IP address `54.227.197.56`. To do that,
    get a hosted zone ID as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注册完成后，您可能会收到来自AWS的通知电子邮件，然后您可以通过AWS命令行或Web控制台控制这个域名。让我们添加一个记录（FQDN到IP地址），将`public.k8s-devops.net`与公共面向的EC2主机公共IP地址`54.227.197.56`关联起来。为此，获取托管区域ID如下：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you get a hosted zone id as `/hostedzone/Z1CTVYM9SLEAN8`, so let''s prepare
    a JSON file to update the DNS record as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您得到了一个托管区域ID，即`/hostedzone/Z1CTVYM9SLEAN8`，所以让我们准备一个JSON文件来更新DNS记录如下：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Looks good, so now access the nginx through the DNS name `public.k8s-devops.net`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，现在通过DNS名称`public.k8s-devops.net`访问nginx：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ELB
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ELB
- en: AWS provides a powerful software based load balancer called **Elastic Load Balancer**
    (**ELB**). It allows you to load balance network traffic to one or multiple EC2
    instances. In addition, ELB can offload SSL/TLS encryption/decryption and also
    supports multi-availability zone.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了一个强大的基于软件的负载均衡器，称为**弹性负载均衡器**（**ELB**）。它允许您将网络流量负载均衡到一个或多个EC2实例。此外，ELB可以卸载SSL/TLS加密/解密，并且还支持多可用区。
- en: 'In the following example, an ELB is created and associated with a public subnet
    host nginx (80/TCP). Because ELB also needs a security group, create a new security
    group for ELB first:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个ELB，并将其与公共子网主机nginx（80/TCP）关联。因为ELB还需要一个安全组，所以首先为ELB创建一个新的安全组：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s update the Route 53 DNS record `public.k8s-devops.net` that points to
    ELB. In this case, ELB already has an `A` record, therefore use a `CNAME` (alias)
    that points to ELB FQDN:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新Route 53 DNS记录`public.k8s-devops.net`，指向ELB。在这种情况下，ELB已经有一个`A`记录，因此使用指向ELB
    FQDN的`CNAME`（别名）：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: S3
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: S3
- en: AWS provides a useful object data store service called **Simple Storage Service**
    (**S3**). It is not like EBS, no EC2 instance can mount as a file system. Instead,
    use AWS API to transfer a file to the S3\. Therefore, AWS can make availability
    (99.999999999%) and multiple instances can access it at the same time. It is good
    to store non-throughput and random access sensitive files such as configuration
    files, log files, and data files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供了一个有用的对象数据存储服务，称为**简单存储服务**（**S3**）。它不像EBS，没有EC2实例可以挂载为文件系统。相反，使用AWS API将文件传输到S3。因此，AWS可以实现可用性（99.999999999%），并且多个实例可以同时访问它。它适合存储非吞吐量和随机访问敏感的文件，如配置文件、日志文件和数据文件。
- en: 'In the following example, a file is uploaded from your machine to AWS S3:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，从您的计算机上传文件到AWS S3：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Overall, we''ve discussed how to configure AWS components around VPC. The following
    diagram shows a major component and relationship:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们已经讨论了如何配置围绕VPC的AWS组件。以下图表显示了一个主要组件和关系：
- en: '![](../images/00124.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00124.jpeg)'
- en: Setup Kubernetes on AWS
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上设置Kubernetes
- en: We've discussed some AWS components that are quite easy to set up networks,
    virtual machines, and storage. Therefore, there are a variety of ways to set up
    Kubernetes on AWS such as kubeadm ([https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm)),
    kops ([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)),
    and kubespray ([https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray)).
    One of the recommended ways to set up Kubernetes is using kops, which is a production
    grade setup tool and supports a lot of configuration. In this chapter, we will
    use kops to configure Kubernetes on AWS. Note that kops stands for Kubernetes
    operations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些AWS组件，这些组件非常容易设置网络、虚拟机和存储。因此，在AWS上设置Kubernetes有多种方式，例如kubeadm（[https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm)）、kops（[https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)）和kubespray（[https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray)）。在AWS上配置Kubernetes的推荐方式之一是使用kops，这是一个生产级的设置工具，并支持大量配置。在本章中，我们将使用kops在AWS上配置Kubernetes。请注意，kops代表Kubernetes操作。
- en: Install kops
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装kops
- en: First of all, you need to install kops to your machine. Linux and macOS are
    supported. Kops is a single binary, so just copy the `kops` command to `/usr/local/bin`
    as recommended. After that, create an `IAM` user and role for kops that handles
    the kops operation. For details, follow the official documentation ([https://github.com/kubernetes/kops/blob/master/docs/aws.md](https://github.com/kubernetes/kops/blob/master/docs/aws.md)).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要将kops安装到您的机器上。Linux和macOS都受支持。Kops是一个单一的二进制文件，所以只需将`kops`命令复制到`/usr/local/bin`中，如推荐的那样。之后，为kops创建一个处理kops操作的IAM用户和角色。有关详细信息，请参阅官方文档（[https://github.com/kubernetes/kops/blob/master/docs/aws.md](https://github.com/kubernetes/kops/blob/master/docs/aws.md)）。
- en: Run kops
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行kops
- en: Kops needs an S3 bucket that stores the configuration and status. In addition,
    use Route 53 to register the Kubernetes API server name, and etcd server name
    to the domain name system. Therefore, use S3 bucket and use the Route 53 that
    we've created in the previous section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Kops需要一个存储配置和状态的S3存储桶。此外，使用Route 53来注册Kubernetes API服务器名称和etcd服务器名称到域名系统。因此，在前一节中创建的S3存储桶和Route
    53。
- en: 'Kops supports a variety of configurations, such as deploying to public subnets,
    private subnets, using different types and number of EC2 instances, high availability,
    and overlaying networks. Let''s configure Kubernetes with a similar configuration
    of network in the previous section as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Kops支持各种配置，例如部署到公共子网、私有子网，使用不同类型和数量的EC2实例，高可用性和叠加网络。让我们使用与前一节中网络类似的配置来配置Kubernetes，如下所示：
- en: Kops has an option to reuse existing VPC and subnets. However, it behaves tricky
    and may encounter some issues based on settings; it is recommended to create a
    new VPC by kops. For details, you may find a document at [https://github.com/kubernetes/kops/blob/master/docs/run_in_existing_vpc.md](https://github.com/kubernetes/kops/blob/master/docs/run_in_existing_vpc.md).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Kops有一个选项可以重用现有的VPC和子网。但是，它的行为很棘手，可能会根据设置遇到一些问题；建议使用kops创建一个新的VPC。有关详细信息，您可以在[https://github.com/kubernetes/kops/blob/master/docs/run_in_existing_vpc.md](https://github.com/kubernetes/kops/blob/master/docs/run_in_existing_vpc.md)找到一份文档。
- en: '| **Parameter** | **Value** | **Means** |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **值** | **意义** |'
- en: '| `--name` | `my-cluster.k8s-devops.net` | Set up `my-cluster` under `k8s-devops.net`
    domain |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '- `--name` | `my-cluster.k8s-devops.net` | 在`k8s-devops.net`域下设置`my-cluster`'
- en: '| `--state` | `s3://k8s-devops` | Use k8s-devops S3 bucket |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '- `--state` | `s3://k8s-devops` | 使用k8s-devops S3存储桶'
- en: '| `--zones` | `us-east-1a` | Deploy on `us-east-1a` Availability Zone |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '- `--zones` | `us-east-1a` | 部署在`us-east-1a`可用区'
- en: '| `--cloud` | `aws` | Use AWS as cloud provider |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '- `--cloud` | `aws` | 使用AWS作为云提供商'
- en: '| `--network-cidr` | `10.0.0.0/16` | Create new VPC with CIDR 10.0.0.0/16 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '- `--network-cidr` | `10.0.0.0/16` | 使用CIDR 10.0.0.0/16创建新的VPC'
- en: '| `--master-size` | `t2.large` | Use EC2 `t2.large` instance for master |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '- `--master-size` | `t2.large` | 为主节点使用EC2 `t2.large`实例'
- en: '| `--node-size` | `t2.medium` | Use EC2 `t2.medium` instance for nodes |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '- `--node-size` | `t2.medium` | 为节点使用EC2 `t2.medium`实例'
- en: '| `--node-count` | `2` | Set up two nodes |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '- `--node-count` | `2` | 设置两个节点'
- en: '| `--networking` | `calico` | Use Calico for overlay network |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '- `--networking` | `calico` | 使用Calico进行叠加网络'
- en: '| `--topology` | `private` | Set up both public and private subnet, and deploy
    master and node to private |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '- `--topology` | `private` | 设置公共和私有子网，并将主节点和节点部署到私有子网'
- en: '| `--ssh-puglic-key` | `/tmp/internal_rsa.pub` | Use `/tmp/internal_rsa.pub`
    for bastion host |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '- `--ssh-puglic-key` | `/tmp/internal_rsa.pub` | 为堡垒主机使用`/tmp/internal_rsa.pub`'
- en: '| `--bastion` |  | Create ssh bastion server on public subnet |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '- `--bastion` |  | 在公共子网上创建ssh堡垒服务器'
- en: '| `--yes` |  | Immediately to execute |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '- `--yes` |  | 立即执行'
- en: 'Therefore, run the following to run kops:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，运行以下命令来运行kops：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It may take around 5 to 10 minutes to fully complete after seeing the preceding
    messages. This is because it requires us to create the VPC, subnet, and NAT-GW,
    launch EC2s, then install Kubernetes master and node, launch ELB, and then update
    Route 53 as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到上述消息后，完全完成可能需要大约5到10分钟。这是因为它需要我们创建VPC、子网和NAT-GW，启动EC2，然后安装Kubernetes主节点和节点，启动ELB，然后更新Route
    53如下：
- en: '![](../images/00125.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00125.jpeg)'
- en: 'Once complete, `kops` updates `~/.kube/config` on your machine points to your
    Kubernetes API Server. Kops creates an ELB and sets the corresponding FQDN record
    on Route 53 as `https://api.<your-cluster-name>.<your-domain-name>/`, therefore,
    you may run the `kubectl` command from your machine directly to see the list of
    nodes as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`kops`会更新您机器上的`~/.kube/config`，指向您的Kubernetes API服务器。Kops会创建一个ELB，并在Route
    53上设置相应的FQDN记录为`https://api.<your-cluster-name>.<your-domain-name>/`，因此，您可以直接从您的机器上运行`kubectl`命令来查看节点列表，如下所示：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Hooray! It took just a few minutes to set up AWS Infrastructure and Kubernetes
    on the AWS from scratch. Now you can deploy pod through the `kubectl` command.
    But you may want to ssh to the master/node to see what is going on.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！从头开始在AWS上设置AWS基础设施和Kubernetes只花了几分钟。现在您可以通过`kubectl`命令部署pod。但是您可能想要ssh到master/node上查看发生了什么。
- en: However, due to security reasons, if you specify `--topology private`, you can
    ssh to only the bastion host. Then ssh to master/node host using a private IP
    address. This is similar to the previous section that ssh to public subnet host,
    then ssh to the private subnet host using ssh-agent (`-A` option).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，出于安全原因，如果您指定了`--topology private`，您只能ssh到堡垒主机。然后使用私有IP地址ssh到master/node主机。这类似于前一节中ssh到公共子网主机，然后使用ssh-agent（`-A`选项）ssh到私有子网主机。
- en: 'In the following example, we ssh to the bastion host (kops creates Route 53
    entry as `bastion.my-cluster.k8s-devops.net`) and then ssh to master (`10.0.36.157`):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们ssh到堡垒主机（kops创建Route 53条目为`bastion.my-cluster.k8s-devops.net`），然后ssh到master（`10.0.36.157`）：
- en: '>![](../images/00126.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '>![](../images/00126.jpeg)'
- en: Kubernetes cloud provider
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes云服务提供商
- en: While setting up Kubernetes by kops, it also configures Kubernetes cloud provider
    as AWS. Which means when you use the Kubernetes service with LoadBalancer, it
    will use ELB. It also uses **Elastic Block Store** (**EBS**) as its `StorageClass`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用kops设置Kubernetes时，它还将Kubernetes云服务提供商配置为AWS。这意味着当您使用LoadBalancer的Kubernetes服务时，它将使用ELB。它还将**弹性块存储**（**EBS**）作为其`StorageClass`。
- en: L4 LoadBalancer
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: L4 负载均衡器
- en: 'When you make the Kubernetes service public to the external world, using ELB
    makes much more sense. Setting service type as LoadBalancer will invoke ELB creation
    and associate it with nodes:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将Kubernetes服务公开到外部世界时，使用ELB更有意义。将服务类型设置为LoadBalancer将调用ELB创建并将其与节点关联：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, ELB has been created automatically and the DNS is `a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`,
    so now you can access Grafana at `http://a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，ELB已经自动创建，DNS为`a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`，因此现在您可以在`http://a5d97c8ef857511e7a6100edf846f38a-1490901085.us-east-1.elb.amazonaws.com`访问Grafana。
- en: You may use `awscli` to update Route 53 to assign a `CNAME` such as `grafana.k8s-devops.net`.
    Alternatively, the Kubernetes incubator project `external-dns` ([https://github.com/kubernetes-incubator/external-dns)](https://github.com/kubernetes-incubator/external-dns))
    can automate to update Route 53 in this situation.![](../images/00127.jpeg)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`awscli`来更新Route 53，分配一个`CNAME`，比如`grafana.k8s-devops.net`。另外，Kubernetes的孵化项目`external-dns`（[https://github.com/kubernetes-incubator/external-dns)](https://github.com/kubernetes-incubator/external-dns)）可以自动更新Route
    53在这种情况下。![](../images/00127.jpeg)
- en: L7 LoadBalancer (ingress)
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: L7 负载均衡器（入口）
- en: As of kops version 1.7.0, it doesn't set up the ingress controller out of the
    box yet. However, kops provides some add-ons ([https://github.com/kubernetes/kops/tree/master/addons](https://github.com/kubernetes/kops/tree/master/addons))
    that expand the features of Kubernetes. One of the add-ons ingress-nginx ([https://github.com/kubernetes/kops/tree/master/addons/ingress-nginx](https://github.com/kubernetes/kops/tree/master/addons/ingress-nginx))
    uses a combination of AWS ELB and nginx to achieve the Kubernetes ingress controller.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 截至kops版本1.7.0，它尚未默认设置ingress控制器。然而，kops提供了一些插件（[https://github.com/kubernetes/kops/tree/master/addons](https://github.com/kubernetes/kops/tree/master/addons)）来扩展Kubernetes的功能。其中一个插件ingress-nginx（[https://github.com/kubernetes/kops/tree/master/addons/ingress-nginx](https://github.com/kubernetes/kops/tree/master/addons/ingress-nginx)）使用AWS
    ELB和nginx的组合来实现Kubernetes的ingress控制器。
- en: 'In order to install the `ingress-nginx` add-on, type the following command
    to set up the ingress controller:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装`ingress-nginx`插件，输入以下命令来设置ingress控制器：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After that, deploy nginx and echoserver using the NodePort service as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用NodePort服务部署nginx和echoserver如下：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After a few minutes, the ingress controller associates the nginx service and
    echoserver service with the ELB. When you access the ELB server with URI "`/`"
    it shows the nginx screen as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，ingress控制器将nginx服务和echoserver服务与ELB关联起来。当您使用URI "`/`"访问ELB服务器时，它会显示nginx屏幕如下：
- en: '![](../images/00128.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00128.jpeg)'
- en: 'On the other hand, if you access the same ELB, but use the URI "`/echo`", it
    shows echoserver as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你访问相同的ELB，但使用URI "`/echo`"，它会显示echoserver如下：
- en: '![](../images/00129.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00129.jpeg)'
- en: Compared to the standard Kubernetes LoadBalancer service, one LoadBalancer service
    consumes one ELB. On the other hand, using the nginx-ingress addon, it can consolidate
    multiple Kubernetes NodePort services onto the single ELB. This will help to build
    your RESTful service easier.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准的Kubernetes负载均衡器服务相比，一个负载均衡器服务会消耗一个ELB。另一方面，使用nginx-ingress插件，它可以将多个Kubernetes
    NodePort服务整合到单个ELB上。这将有助于更轻松地构建您的RESTful服务。
- en: StorageClass
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StorageClass
- en: 'As we discussed in [Chapter 4](part0103.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e),
    *Working with Storage and Resources*, there is a `StorageClass` that can dynamically
    allocate Persistent Volume. Kops sets up provisioner as `aws-ebs`, which uses
    EBS:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](part0103.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e)中讨论的那样，有一个`StorageClass`可以动态分配持久卷。Kops将provisioner设置为`aws-ebs`，使用EBS：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This creates EBS volume automatically as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动创建EBS卷如下：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Overall, the Kubernetes cloud provider for AWS is utilized to map ELB to Kubernetes
    services and also EBS to Kubernetes Persistent Volume. It is a great benefit to
    use AWS for Kubernetes as there is no need to pre-allocate or buy either a physical
    LoadBalancer or storage, just pay as you go; it creates flexibility and scalability
    for your business.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，AWS的Kubernetes云提供程序被用来将ELB映射到Kubernetes服务，还有将EBS映射到Kubernetes持久卷。对于Kubernetes来说，使用AWS是一个很大的好处，因为不需要预先分配或购买物理负载均衡器或存储，只需按需付费；这为您的业务创造了灵活性和可扩展性。
- en: Maintenance Kubernetes cluster by kops
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过kops维护Kubernetes集群
- en: 'When you need to change the Kubernetes configuration, such as the number of
    nodes and even EC2 instance type, kops can support this kind of use case. For
    example, if you want to change Kubernetes node instance type from `t2.medium`
    to `t2.micro`, and also decrease number from 2 to 1 due to cost saving, you need
    to modify the kops node instance group (`ig`) setting as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要更改Kubernetes配置，比如节点数量甚至EC2实例类型，kops可以支持这种用例。例如，如果您想将Kubernetes节点实例类型从`t2.medium`更改为`t2.micro`，并且由于成本节约而将数量从2减少到1，您需要修改kops节点实例组（`ig`）设置如下：
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It launches vi editor and you can change the setting for kops node instance
    group as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 它启动了vi编辑器，您可以更改kops节点实例组的设置如下：
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In this case, change `machineType` to `t2.small`, and `maxSize`/`minSize` to
    the `1` and then save it. After that, run the `kops update` command to apply settings:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将`machineType`更改为`t2.small`，将`maxSize`/`minSize`更改为`1`，然后保存。之后，运行`kops
    update`命令应用设置：
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you see in the preceding message, you need to run the `kops rolling-update
    cluster` command to reflect to the existing instances. It may take a few minutes
    to replace the existing instance to the new instance:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的消息中看到的，您需要运行`kops rolling-update cluster`命令来反映现有实例。将现有实例替换为新实例可能需要几分钟：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now the Kubernetes node instance has been decreased from `2` to `1` as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Kubernetes节点实例已从`2`减少到`1`，如下所示：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed public cloud. AWS is the most popular public
    cloud service and it gives the API to control AWS infrastructure programmatically.
    We can achieve automation and infrastructure as code easily. Especially, kops
    brings us to ultra-fast AWS and Kubernetes setup from scratch. Both Kubernetes
    and kops development are quite active. Please keep monitoring those projects,
    which will have more functionality and configuration in the near future.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论了公共云。AWS是最流行的公共云服务，它提供API以编程方式控制AWS基础设施。我们可以轻松实现自动化和基础架构即代码。特别是，kops使我们能够从头开始快速设置AWS和Kubernetes。Kubernetes和kops的开发都非常活跃。请继续监视这些项目，它们将在不久的将来具有更多功能和配置。
- en: The next chapter will introduce **Google Cloud Platform** (**GCP**), which is
    another popular public cloud service. **Google Container Engine** (**GKE**) is
    the hosted Kubernetes service that makes using Kubernetes much easier.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍**Google Cloud Platform**（**GCP**），这是另一个流行的公共云服务。**Google Container Engine**（**GKE**）是托管的Kubernetes服务，使使用Kubernetes变得更加容易。
