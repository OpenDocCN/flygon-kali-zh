- en: React with Django
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: React与Django
- en: We've worked with Express a good amount so far, but Django offers power that
    a standard Express application doesn't have out of the box. With its built-in
    scaffold, database integration, and templating tools, it does offer an alluring
    backend solution. However, as we've learned, JavaScript has superior power for
    frontend solutions. So, how can we marry the two?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了相当多的Express，但Django提供了标准Express应用程序所没有的功能。它具有内置的脚手架、数据库集成和模板工具，提供了一种诱人的后端解决方案。然而，正如我们所学到的，JavaScript在前端解决方案方面具有更强大的功能。那么，我们如何将这两者结合起来呢？
- en: What we're going to do is create a Django backend that serves a React application
    to tie together two great technologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是创建一个Django后端，为了将两种伟大的技术联系在一起，为React应用提供服务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Django setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django设置
- en: Creating the React frontend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建React前端
- en: Bringing it all together
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Be prepared to work with the code provided in the `chapter-14` directory of
    the repository, available at [https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14).
    As we'll be working with command-line tools, also have your Terminal or command-line
    shell available. We'll need a modern browser and local code editor.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好使用存储库中`chapter-14`目录中提供的代码，该存储库位于[https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14](https://github.com/PacktPublishing/Hands-on-JavaScript-for-Python-Developers/tree/master/chapter-14)。由于我们将使用命令行工具，还需要准备好终端或命令行shell。我们需要一个现代浏览器和本地代码编辑器。
- en: Django setup
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django设置
- en: There are a few different ways to combine React and Django, varying in complexity
    and the level of integration. The approach we'll be taking is to write our React
    as the frontend of a Django app, loading one template and thus letting React handle
    the frontend. Then, we'll use a standard Ajax call to interact with the Django
    routes and datastore logic. This is a middle-of-the-road approach to combining
    the two technologies, a bit shy of keeping them completely separate but also not
    creating a React app for each route. We'll be keeping it simple.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的方法可以结合React和Django，复杂程度和集成级别各不相同。我们将采取的方法是将React编写为Django应用程序的前端，加载一个模板，让React处理前端。然后，我们将使用标准的Ajax调用与Django路由和数据存储逻辑进行交互。这是一种将这两种技术结合在一起的中间方法，略微保持它们完全分开，但也不为每个路由创建一个React应用程序。我们将保持简单。
- en: Prithee, upon what shall we toil? Speak!
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请告诉我们我们将要劳作在什么上？说！
- en: Our app is going to be a chatbot that will respond to input using the words
    of the master playwright, Shakespeare! First, we'll load a simple Django instance's
    database with the complete text of Shakespeare; next, we'll write our route to
    search the database for text that matches; finally, we'll create our React app
    to be the conduit between the user and the Django backend. We won't get fancy
    with our Python—no machine learning or complex language processing awaits us,
    though you could always take our bot one step further if you'd like!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将是一个聊天机器人，将使用大师剧作家莎士比亚的话语来回应输入！首先，我们将使用一个简单的Django实例的数据库加载莎士比亚的完整文本；接下来，我们将编写我们的路由来搜索匹配的文本；最后，我们将创建我们的React应用程序，成为用户和Django后端之间的桥梁。我们不会在我们的Python中使用复杂的机器学习或语言处理，尽管如果你愿意，你可以随时将我们的机器人推向更高一步！
- en: Note that we'll be using Python 3\. For more detailed information about installing
    and setting up Django, including use of virtual environments, visit the official
    documentation at [https://docs.djangoproject.com/en/3.0/topics/install/](https://docs.djangoproject.com/en/3.0/topics/install/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将使用Python 3。有关安装和设置Django的更详细信息，包括使用虚拟环境，请访问官方文档[https://docs.djangoproject.com/en/3.0/topics/install/](https://docs.djangoproject.com/en/3.0/topics/install/)。
- en: 'To begin, let''s set up Django using the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用以下步骤设置Django：
- en: 'Create a new virtual environment: `python -m venv shakespeare`.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的虚拟环境：`python -m venv shakespeare`。
- en: 'Start the `venv`: `source shakespeare/bin/activate`.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`venv`：`source shakespeare/bin/activate`。
- en: 'Install Django: `python -m pip install Django`.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Django：`python -m pip install Django`。
- en: Begin a new project with `django-admin startproject shakespearebot`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`django-admin startproject shakespearebot`开始一个新项目。
- en: 'Test our Django setup: `cd shakespearebot ; python manage.py runserver`.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试我们的Django设置：`cd shakespearebot ; python manage.py runserver`。
- en: If we visit [http://127.0.0.1:8000/](http://127.0.0.1:8000/), we should see
    the default Django welcome page.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们访问[http://127.0.0.1:8000/](http://127.0.0.1:8000/)，我们应该看到默认的Django欢迎页面。
- en: 'We''ll need an app to work with: `python manage.py startapp bot`.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个应用程序来使用：`python manage.py startapp bot`。
- en: 'Add the bot app to `INSTALLED_APPS` in `settings.py`: `''bot.apps.BotConfig''`.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`settings.py`中将bot应用添加到`INSTALLED_APPS`：`'bot.apps.BotConfig'`。
- en: 'Next, we''re going to need our Shakespeare dataset:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将需要我们的莎士比亚数据集：
- en: The `chapter-14` directory in the book's GitHub repository contains a file called `Shakespeare_data.csv.zip`.
    Unzip this file and voilà, you have all the collected works of Shakespeare at
    your fingertips. We'll be importing this CSV into Django with a basic model.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在书的GitHub存储库的`chapter-14`目录中包含一个名为`Shakespeare_data.csv.zip`的文件。解压缩此文件，你就可以随时查阅莎士比亚的所有作品。我们将使用一个基本模型将这个CSV导入Django。
- en: 'Edit `models.py` in the `bot` directory as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bot`目录中编辑`models.py`如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll be keeping our database simple and only ingesting the lines of text,
    not any other data surrounding what the line is. After all, we''re only going
    to be doing a simple text search on the corpus, nothing more complicated than
    that. Before our next step of importing the data, let''s include a Django module
    to make our lives easier: `pip install django-import-export`. This module will
    allow us to import our text easily with a few clicks versus a command-line process.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保持数据库简单，只摄取文本行，而不是行周围的任何其他数据。毕竟，我们只会对语料库进行简单的文本搜索，没有比这更复杂的操作。在导入数据的下一步之前，让我们包含一个Django模块，以使我们的生活更轻松：`pip
    install django-import-export`。这个模块将允许我们通过几次点击而不是命令行过程轻松导入我们的文本。
- en: 'Now that we have a model, we need to register it in `admin.py`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个模型，我们需要在`admin.py`中注册它：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s log into the admin section of Django to make sure that everything is
    running properly. We''ll have to run our database commands first:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们登录到Django的管理部分，确保一切正常运行。我们首先必须运行我们的数据库命令：
- en: 'Prepare the database commands: `python manage.py makemigrations`.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据库命令：`python manage.py makemigrations`。
- en: Next, execute the changes with `python manage.py migrate`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`python manage.py migrate`执行更改。
- en: Create an administrative user with `python manage.py createsuperuser` and follow
    the prompts. Note that when you create your password, you will not see typing,
    though it is using your input.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python manage.py createsuperuser`创建一个管理用户，并按照提示操作。请注意，当您创建密码时，您将看不到输入，尽管它正在使用您的输入。
- en: Restart Django: `python manage.py runserver`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Django：`python manage.py runserver`。
- en: Visit [http://127.0.0.1/admin](http://127.0.0.1/admin) and log in with the credentials
    you just created.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://127.0.0.1/admin](http://127.0.0.1/admin)，并使用刚刚创建的凭据登录。
- en: 'We''ll see our administration panel with our bot app:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的管理面板中看到我们的机器人应用程序：
- en: '![](assets/dd43540b-dc16-40e2-8b67-f1aa990af75c.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd43540b-dc16-40e2-8b67-f1aa990af75c.png)'
- en: Figure 14.1 - Django's site administration panel
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 - Django的站点管理面板
- en: 'Great, that was just a checkpoint. We have a little more work to do! Since
    we have `django-import-export`, let''s wire it up:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，那只是一个检查点。我们还有更多的工作要做！因为我们有`django-import-export`，让我们把它连接起来：
- en: 'Do the following in the `settings.py` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`文件中进行以下操作：
- en: Add `import_export` to `INSTALLED_APPS`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`import_export`添加到`INSTALLED_APPS`。
- en: 'Properly path our static files with this line at the end of the settings section:
    `STATIC_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), ''static'')`.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置部分的末尾加上这行代码，正确地设置我们的静态文件路径：`STATIC_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)),
    'static')`。
- en: Run `python manage.py collectstatic`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`python manage.py collectstatic`。
- en: 'Now you can go ahead and click on Texts in the admin panel, and you''ll see
    IMPORT and EXPORT buttons available to you:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以继续在管理面板中点击“文本”，您将看到可用的“导入”和“导出”按钮：
- en: '![](assets/68edca26-422b-4ffa-8eae-e1e190982965.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/68edca26-422b-4ffa-8eae-e1e190982965.png)'
- en: Figure 14.2 - It's time to import our text!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 - 是时候导入我们的文本了！
- en: 'Click the IMPORT button and follow the steps to import the CSV file containing
    the Shakespeare text:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“导入”按钮，并按照步骤导入包含莎士比亚文本的CSV文件：
- en: '![](assets/1662e40f-135f-4e8d-afef-d932a9eb81e0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1662e40f-135f-4e8d-afef-d932a9eb81e0.png)'
- en: Figure 14.3 - Import complete**Note:** The import will take a while, but not
    as long as it took Will to write them in the first place! Be sure to confirm the
    import after the preview.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 - 导入完成**注意：**导入会花一些时间，但不会像威尔一开始写作那样长！请务必在预览后确认导入。
- en: Routing our requests
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由我们的请求
- en: 'The next piece we''ll need to construct before we get to React is our API that
    will serve content to our frontend. Let''s look at the steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始React之前，我们需要构建的下一个部分是我们的API，它将为我们的前端提供内容。让我们看看步骤：
- en: 'n `bot/views.py`, set up the index route that we''ll use for testing, and an
    API route that we''ll serve our information with:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bot/views.py`中，设置我们将用于测试的索引路由，以及我们将用于提供信息的API路由：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All of this should be straightforward Python, so we won't go through it in too
    much detail. Essentially, what's happening is that when we send a POST request
    to the API, Django will search the database for a line of text that contains a
    word sent via Ajax. If it finds one or more, then it will return a random one
    to the frontend. If not, we always want to handle our error cases, so it will
    respond with Hamlet's famous line, "Get thee to a nunnery!"
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都应该是简单的Python，所以我们不会详细介绍。基本上，当我们向API发送POST请求时，Django将在数据库中搜索包含通过Ajax发送的单词的文本行。如果找到一个或多个，它将随机返回一个给前端。如果没有，我们总是希望处理我们的错误情况，因此它将以哈姆雷特著名的一句话作为回应：“去修道院吧！”
- en: 'Create a file, `bot/urls.py`, and insert the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件`bot/urls.py`，并插入以下代码：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Edit `shakespearebot/urls.py` as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`shakespearebot/urls.py`如下：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One more thing: in `shakespearebot/settings.py`, remove the CSRF middleware
    as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一件事：在`shakespearebot/settings.py`中，按照以下方式移除CSRF中间件：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now for the fun part: our frontend for testing. Create a file called `bot/`'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：我们用于测试的前端。创建一个名为`bot/`的文件
- en: '`templates/bot/index.html` and add the following HTML setup:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`templates/bot/index.html`并添加以下HTML设置：'
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we can see some basic forms and a little bit of styling—there's not much
    to it, because this is just a page to test if our understanding of the API is
    correct.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一些基本的表单和一些样式 - 没有太多内容，因为这只是一个用来测试我们对API理解是否正确的页面。
- en: 'Insert this script after the form:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单之后插入这个脚本：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By now, the structure of a fetch call should be familiar, so let''s breeze
    through this quickly: when the button''s clicked, split the text on spaces, pick
    the penultimate word (the last "word" might be punctuation) or, if it''s a one-word
    entry, the word itself. `POST` this term to the API and await the response.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，fetch调用的结构应该很熟悉，所以让我们快速浏览一下：当点击按钮时，将文本按空格分割，选择倒数第二个单词（最后一个“单词”可能是标点符号），或者如果是一个单词条目，则是单词本身。将这个术语发送到API，并等待响应。
- en: 'If all is working properly, we should have ourselves a quite thrilling page:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常工作，我们应该会看到一个非常激动人心的页面：
- en: '![](assets/60eda0bf-d4bd-4160-8c7d-37ac3cb6545e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60eda0bf-d4bd-4160-8c7d-37ac3cb6545e.png)'
- en: Figure 14.4 - It's a start!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 - 这是一个开始！
- en: It's not much, but it should be enough to test our backend. Try entering a few
    words in the chat box, click Chat, and see what happens. Hopefully, you get some
    words once heard in Stratford-upon-Avon long ago.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不多，但这应该足以测试我们的后端。尝试在聊天框中输入几个单词，单击聊天，然后看看会发生什么。希望您能听到很久以前在阿文长听到的一些话。
- en: Creating the React frontend
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建React前端
- en: As mentioned previously, there are a few different ways to work with Django
    and React. We're going to set up our frontend separately and let React do its
    thing, let Django do its thing, and have them shake hands in the middle. This
    approach does have its limitations, as we'll see, but it's a basic introduction.
    We'll get more complicated later on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有几种不同的方法可以使用Django和React。我们将分别设置我们的前端，并让React做自己的事情，让Django做自己的事情，并让它们在中间握手。正如我们将看到的，这种方法确实有其局限性，但这是一个基本介绍。我们以后会变得更加复杂。
- en: 'Let''s set it up, starting with creating a new React application:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，首先创建一个新的React应用程序：
- en: Change to the `shakespearebot` directory (not `bot`) and execute `npx create-react-app
    react-frontend`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`shakespearebot`目录（而不是`bot`）并执行`npx create-react-app react-frontend`。
- en: Go ahead and execute `cd react-frontend && yarn start` and access the development
    server at `http://localhost:3000`, just to be sure everything is good. You should
    receive the React demo page at the preceding URL. Stop the server with *Ctrl*
    + *C*.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续执行`cd react-frontend && yarn start`并在`http://localhost:3000`访问开发服务器，以确保一切正常。您应该在前述URL收到React演示页面。使用*Ctrl*
    + *C*停止服务器。
- en: Execute `yarn build`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`yarn build`。
- en: Now, here's where things get a little limited. What we've done right now is
    execute what creates a production-optimized build of the site. This is designed
    to be release code, not development code, so the limitation is that you can't
    edit the code and have it reflected without running a build again. With this in
    mind, let's build and continue our setup.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里的事情有点受限制。我们现在所做的是执行创建站点的生产优化构建。这是设计为发布代码，而不是开发代码，因此限制在于您无法编辑代码并在不再次运行构建的情况下反映出来。考虑到这一点，让我们构建并继续我们的设置。
- en: 'In our `shakespearebot` directory, we''re going to make a few edits to `settings.py`
    and `urls.py`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`shakespearebot`目录中，我们将对`settings.py`和`urls.py`进行一些编辑：
- en: 'In the `TEMPLATES` array of `settings.py`, change `DIRS` to `''DIRS'': [os.path.join(BASE_DIR,
    ''react-frontend'')],`.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`settings.py`的`TEMPLATES`数组中，将`DIRS`更改为`''DIRS'': [os.path.join(BASE_DIR,
    ''react-frontend'')],`。'
- en: 'Also in `settings.py`, modify the `STATIC_URL` and `STATICFILES_DIRS` variables
    as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在`settings.py`中，修改`STATIC_URL`和`STATICFILES_DIRS`变量如下：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a line to `urls.py` so that the `urlpatterns` array reads as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`urls.py`中添加一行，以便`urlpatterns`数组读取如下：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `bot` directory, it''s time to direct our frontend to our static directory.
    First, edit `urls.py`, creating a `urlpatterns` section as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bot`目录中，是时候将我们的前端指向我们的静态目录了。首先，编辑`urls.py`，创建一个`urlpatterns`部分如下：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, our views will need the path of our static directory. `bot/views.py`
    will need to change the `index` route to use our React frontend:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们的视图将需要我们静态目录的路径。`bot/views.py`需要更改`index`路由以使用我们的React前端：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: And that should be what we need. Go ahead and start the server at the root level
    by running `python manage.py runserver`, then access `http://127.0.0.1:8000` and
    cross your fingers! You should see the React welcome page! Congratulations if
    so; we're ready to continue. If you're having any issues, feel free to consult
    the second waypoint directory on the GitHub repo.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 那应该是我们需要的。继续通过运行`python manage.py runserver`在根级别启动服务器，然后访问`http://127.0.0.1:8000`并祈祷吧！您应该看到React欢迎页面！如果是这样的话，恭喜；我们已经准备好继续了。如果您遇到任何问题，请随时查阅GitHub存储库上的第二个航点目录。
- en: With our scaffolding complete, let's look at a complete example of React talking
    with Django.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成我们的脚手架后，让我们看一个React与Django完整交互的示例。
- en: Bringing it all together
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'We''ll be working with a complete Shakespeare bot with a frontend and backend.
    Go ahead and navigate to the `shakespearebot-complete` directory. In the following
    steps, we''ll set up our application, import our data, and interact with the frontend:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个完整的带有前端和后端的莎士比亚机器人。继续导航到`shakespearebot-complete`目录。在接下来的步骤中，我们将设置我们的应用程序，导入我们的数据，并与前端交互：
- en: First, run the Django migrations with `python manage.py migrate` and create
    a user with `python manage.py createsuperuser`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用`python manage.py migrate`运行Django迁移并使用`python manage.py createsuperuser`创建用户。
- en: Start the server with `python manage.py runserver`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python manage.py runserver`启动服务器。
- en: Log in at `http://localhost:8000/admin`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://localhost:8000/admin`登录。
- en: Navigate to `http://localhost:8000/admin/bot/text/` and import the `Shakespeare_text.csv` file (this
    will take some time).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:8000/admin/bot/text/`并导入`Shakespeare_text.csv`文件（这将需要一些时间）。
- en: While this is importing, we can go ahead and check our frontend with the `cd
    react-frontend` command.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入过程中，我们可以继续使用`cd react-frontend`命令检查我们的前端。
- en: Install our dependencies with `yarn install`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yarn install`安装我们的依赖项。
- en: Start the server with `yarn start`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yarn start`启动服务器。
- en: 'Now, if you navigate to `http://localhost:3000`, we should see our frontend:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您导航到`http://localhost:3000`，我们应该看到我们的前端：
- en: '![](assets/4b67307b-ddfe-4785-a784-d076b90b4f79.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b67307b-ddfe-4785-a784-d076b90b4f79.png)'
- en: Figure 14.5 - Our complete Shakespearebot
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 - 我们完整的Shakespearebot
- en: Stop the development server with *Ctrl* + *C*.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *C*停止开发服务器。
- en: Execute `yarn build`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`yarn build`。
- en: When the import is complete, we can visit our frontend and we should be able
    to interact with Shakespeare by entering text in the box and clicking the Speak
    now button. Give it a try at [http://localhost:8000/](http://localhost:8000/).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入完成后，我们可以访问我们的前端，然后我们应该能够通过在框中输入文本并单击“立即说话”按钮与莎士比亚互动。在[http://localhost:8000/](http://localhost:8000/)尝试一下。
- en: Fun! It's a little crude and could definitely benefit from some more CSS work
    on the frontend and intelligence on the backend via natural language processing,
    but that's not our goal for right now. What have we accomplished? We have leveraged
    our Python knowledge and combined it with React in order to create a full application.
    In the next section, we'll take a closer look at the React part of the app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣！它有点粗糙，肯定可以从前端的一些CSS工作和后端的智能方面通过自然语言处理中受益，但这并不是我们目前的目标。我们取得了什么成就？我们利用了我们的Python知识，并将其与React结合起来创建了一个完整的应用程序。在下一节中，我们将更仔细地研究应用程序的React部分。
- en: Investigating the React frontend
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查React前端
- en: 'Our React frontend directory structure is fairly straightforward:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的React前端目录结构非常简单：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Just like any other React application, we''re going to begin with our root
    component, which is `App.js` in this case:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他React应用程序一样，我们将从我们的根组件开始，这种情况下是`App.js`：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So far it''s straightforward: one component. Let''s look at `components/bot/bot.jsx`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止很简单：一个组件。让我们看看`components/bot/bot.jsx`：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'So far there''s nothing really exciting going on besides the regular setup:
    we''re importing `reactstrap`, which we''ll use for some layout help, and defining
    a text array in a state containing a few choice Shakespearean insults. Our last
    line relates to a `captureInput` method. Here''s what that is:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，除了常规设置外，没有什么特别令人兴奋的事情：我们导入了`reactstrap`，我们将用它来进行一些布局帮助，并在状态中定义了一个包含一些莎士比亚式的侮辱的文本数组。我们的最后一行涉及`captureInput`方法。这是什么：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Lovely! We know what this is doing: it''s a standard Ajax call to the same
    server containing a GET request with our question. This is a tiny bit of a departure
    from when we did it all in Python, as we''re using a GET instead of a POST for
    ease of setup, but it''s a trivial distinction.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！我们知道这在做什么：这是对同一服务器的标准Ajax调用，其中包含一个带有我们问题的GET请求。这与我们在Python中所做的有点不同，因为我们使用GET而不是POST来简化设置，但这只是一个微不足道的区别。
- en: 'The next part is simply our rendering:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分只是我们的渲染：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our talking head has a bit of an animated effect to it, and we''ve accomplished
    this with a Node.js module in `components/talkinghead/talkinghead.jsx`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的说话头有一点动画效果，我们是通过`components/talkinghead/talkinghead.jsx`中的一个Node.js模块来实现的：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And that's pretty much all there is to our application!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是我们应用程序的全部内容了！
- en: We've had a little fun in this chapter, so let's recap what we've learned.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们玩得有点开心，让我们回顾一下我们学到了什么。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'While our focus has mostly been on getting away from Python by choosing Node.js
    and Express over Python and Django, it''s definitely workable to integrate them.
    We used one specific paradigm here: a React app sitting as a static built app
    inside a Django app. The Django application is routing HTTP requests either to
    the API `bot` app if it has `/api` in the URL, or to the React `react-frontend` app
    for everything else.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的重点大多是通过选择Node.js和Express而不是Python和Django来摆脱Python，但将它们整合起来是可行的。我们在这里使用了一个特定的范例：一个React应用程序作为静态构建的应用程序嵌入到Django应用程序中。Django应用程序将HTTP请求路由到API“bot”应用程序（如果URL中包含“/api”），或者对于其他所有内容，路由到React“react-frontend”应用程序。
- en: Incorporating Django with React isn't really the easiest thing in the world,
    and this is only one possible paradigm of how to couple this, in what I'd term
    *tightly-coupled* scaffolding. If we were to have our React and Django apps completely
    separate and only interacting via XHR calls with Ajax, that would arguably be
    a more true-to-life scenario. However, that would involve having separate setups
    for the two halves, and today what we constructed was a single server for our
    whole application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将Django与React整合起来并不是世界上最容易的事情，这只是如何将它们耦合在一起的一种可能的范例，我称之为*紧密耦合*的脚手架。如果我们的React和Django应用程序完全分开，并且只通过Ajax进行XHR调用进行交互，那可能是一个更贴近实际情况的场景。然而，这将涉及为两个部分分别设置，而今天我们构建的是一个整个应用程序的单一服务器。
- en: In the next chapter, we'll be working with Express and React in a more straightforward
    application of complementary technologies.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在一个更直接的互补技术应用中使用Express和React。
