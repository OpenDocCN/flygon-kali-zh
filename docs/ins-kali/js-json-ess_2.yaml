- en: Chapter 2. Getting Started with JSON
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. JSON入门
- en: JSON or JavaScript Object Notation is a very popular data interchange format.
    It was developed by Douglas Crockford. JSON is text-based, lightweight, and a
    human-readable format for data exchange between clients and servers. JSON is derived
    from JavaScript and bears a close resemblance to JavaScript objects, but it is
    not dependent on JavaScript. JSON is language-independent, and support for the
    JSON data format is available in all the popular languages, some of which are
    C#, PHP, Java, C++, Python, and Ruby.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JSON或JavaScript对象表示法是一种非常流行的数据交换格式。它是由Douglas Crockford开发的。JSON是基于文本的，轻量级的，用于客户端和服务器之间的数据交换的人类可读格式。JSON源自JavaScript，并与JavaScript对象非常相似，但不依赖于JavaScript。JSON是与语言无关的，并且所有流行语言都支持JSON数据格式，其中一些是C＃，PHP，Java，C
    ++，Python和Ruby。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JSON is a format and not a language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是一种格式，而不是一种语言。
- en: 'JSON can be used in web applications for data transfer. Prior to JSON, XML
    was considered to be the chosen data interchange format. XML parsing required
    an XML DOM implementation on the client side that would ingest the XML response,
    and then XPath was used to query the response in order to access and retrieve
    the data. That made life tedious, as querying for data had to be performed at
    two levels: first on the server side where the data was being queried from a database,
    and the second time was on the client side using XPath. JSON does not need any
    specific implementations; the JavaScript engine in the browser handles JSON parsing.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JSON可以用于Web应用程序进行数据传输。在JSON出现之前，XML被认为是选择的数据交换格式。XML解析需要客户端上的XML DOM实现，该实现将接收XML响应，然后使用XPath查询响应以访问和检索数据。这使得生活变得繁琐，因为数据查询必须在两个级别上执行：首先在服务器端，从数据库中查询数据，然后在客户端使用XPath进行第二次查询。JSON不需要任何特定的实现；浏览器中的JavaScript引擎处理JSON解析。
- en: XML messages often tend to be heavy and verbose, and take up a lot of bandwidth
    while sending the data over a network connection. Once the XML message is retrieved,
    it has to be loaded into memory to parse it; let us take a look at a `students`
    data feed in XML and JSON.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: XML消息往往很沉重和冗长，在通过网络连接发送数据时占用大量带宽。一旦检索到XML消息，就必须将其加载到内存中进行解析；让我们看看XML和JSON中的`students`数据源。
- en: 'The following is an example in XML:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是XML中的一个示例：
- en: '![Getting Started with JSON](img/6034OS_02_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![JSON入门](img/6034OS_02_01.jpg)'
- en: 'Let us take a look at the example in JSON:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看JSON中的示例：
- en: '![Getting Started with JSON](img/6034OS_02_02.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![JSON入门](img/6034OS_02_02.jpg)'
- en: As we notice, the size of the XML message is bigger when compared to its JSON
    counterpart, and this is just for two records. A real-time feed will begin with
    a few thousands and go upwards. Another point to note is the amount of data that
    has to be generated by the server and then transmitted over the Internet is already
    big, and XML, as it is verbose, makes it bigger. Given that we are in the age
    of mobile devices where smart phones and tablets are getting more and more popular
    by the day, transmitting such large volumes of data on a slower network causes
    slow page loads, hang ups, and poor user experience, thus driving the users away
    from the site. JSON has come about to be the preferred Internet data interchange
    format, to avoid the issues mentioned earlier.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们注意到的，与其JSON对应物相比，XML消息的大小要大得多，这仅仅是两条记录。实时数据源将以几千条开始，并不断增加。还要注意的一点是服务器必须生成并通过互联网传输的数据量已经很大，而XML由于冗长而使其变得更大。考虑到我们处于移动设备时代，智能手机和平板电脑日益受到欢迎，通过较慢的网络传输如此大量的数据会导致页面加载缓慢、卡顿和用户体验差，从而使用户远离网站。JSON已成为首选的互联网数据交换格式，以避免前面提到的问题。
- en: Since JSON is used to transmit serialized data over the Internet, we will need
    to make a note of its MIME type. A **MIME** (**Multipurpose Internet Mail Extensions**)
    type is an Internet media type, which is a two-part identifier for content that
    is being transferred over the Internet. The MIME types are passed through the
    HTTP headers of an HTTP Request and an HTTP Response. The MIME type is the communication
    of content type between the server and the browser. In general, a MIME type will
    have two or more parts that give the browser information about the type of data
    that is being sent either in the HTTP Request or in the HTTP Response. The MIME
    type for JSON data is `application/json`. If the MIME type headers are not sent
    across the browser, it treats the incoming JSON as plain text.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JSON用于在互联网上传输序列化数据，我们需要注意其MIME类型。**MIME**（多用途互联网邮件扩展）类型是互联网媒体类型，是正在通过互联网传输的内容的两部分标识符。MIME类型通过HTTP请求和HTTP响应的HTTP头传递。MIME类型是服务器和浏览器之间的内容类型通信。通常，MIME类型将有两个或更多部分，其中包含有关正在发送的数据类型的信息，无论是在HTTP请求中还是在HTTP响应中。JSON数据的MIME类型是`application/json`。如果未通过浏览器发送MIME类型头，它将将传入的JSON视为纯文本。
- en: The Hello World program with JSON
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON的Hello World程序
- en: 'Now that we have a basic understanding of JSON, let us work on our Hello World
    program. This is shown in the screenshot that follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对JSON有了基本的了解，让我们来编写我们的Hello World程序。如下图所示：
- en: '![The Hello World program with JSON](img/6034OS_02_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![JSON的Hello World程序](img/6034OS_02_03.jpg)'
- en: The preceding program will alert World onto the screen when it is invoked from
    a browser. Let us pay close attention to the script between the `<script>` tags.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当从浏览器中调用时，上述程序将在屏幕上警告World。让我们密切关注`<script>`标签之间的脚本。
- en: '![The Hello World program with JSON](img/6034OS_02_04.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![JSON的Hello World程序](img/6034OS_02_04.jpg)'
- en: In the first step, we are creating a JavaScript variable and initializing the
    variable with a JavaScript object. Similar to how we retrieve data from a JavaScript
    object, we use the key-value pair to retrieve the value. Simply put, JSON is a
    collection of key and value pairs, where every key is a reference to the memory
    location where the value is stored on the computer. Now let us take a step back
    and analyze why we need JSON, if all we are doing is assigning JavaScript objects
    that are readily available. The answer is, JSON is a different format altogether,
    unlike JavaScript, which is a language.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们创建一个JavaScript变量，并用JavaScript对象初始化变量。与从JavaScript对象中检索数据的方式类似，我们使用键值对来检索值。简而言之，JSON是一个键值对的集合，其中每个键都是对计算机上存储值的内存位置的引用。现在让我们退一步，分析为什么我们需要JSON，如果我们所做的只是分配JavaScript对象，这些对象已经可用。答案是，JSON是一个完全不同的格式，不像JavaScript是一种语言。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JSON keys and values have to be enclosed in double quotes, if either are enclosed
    in single quotes, we will receive an error.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JSON的键和值必须用双引号括起来，如果其中任何一个用单引号括起来，我们将收到一个错误。
- en: 'Now, let us take a quick look at the similarities and differences between JSON
    and a normal JavaScript object. If we were to create a similar JavaScript object
    like our `hello_world` JSON variable from the earlier example, it would look like
    the JavaScript object that follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下JSON和普通JavaScript对象之间的相似之处和不同之处。如果我们要创建一个类似于之前示例中的`hello_world` JSON变量的JavaScript对象，它将看起来像接下来的JavaScript对象：
- en: '![The Hello World program with JSON](img/6034OS_02_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![带有JSON的Hello World程序](img/6034OS_02_05.jpg)'
- en: The big difference here is that the key is not wrapped in double quotes. Since
    a JSON key is a string, we can use any valid string for a key. We can use spaces,
    special characters, and hyphens in our keys, which is not valid in a normal JavaScript
    object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个重大区别是键没有用双引号括起来。由于JSON键是一个字符串，我们可以使用任何有效的字符串作为键。我们可以在键中使用空格、特殊字符和连字符，这在普通的JavaScript对象中是无效的。
- en: '![The Hello World program with JSON](img/6034OS_02_06.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![带有JSON的Hello World程序](img/6034OS_02_06.jpg)'
- en: When we use special characters, hyphens, or spaces in our keys, we have to be
    careful while accessing them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在键中使用特殊字符、连字符或空格时，我们在访问它们时必须小心。
- en: '![The Hello World program with JSON](img/6034OS_02_07.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![带有JSON的Hello World程序](img/6034OS_02_07.jpg)'
- en: 'The reason the preceding JavaScript statement doesn''t work is that JavaScript
    doesn''t accept keys with special characters, hyphens, or strings. So we have
    to retrieve the data using a method where we will handle the JSON object as an
    associative array with a string key. This is shown in the screenshot that follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的JavaScript语句无法工作的原因是JavaScript不接受带有特殊字符、连字符或字符串的键。因此，我们必须使用一种方法来处理JSON对象，将其作为具有字符串键的关联数组来处理。这在接下来的截图中显示：
- en: '![The Hello World program with JSON](img/6034OS_02_08.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![带有JSON的Hello World程序](img/6034OS_02_08.jpg)'
- en: 'Another difference between the two is that a JavaScript object can carry functions
    within, while a JSON object cannot carry any functions. The example that follows
    has the property `getName`, which has a function that alerts the name `John Doe`
    when it is invoked:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 两者之间的另一个区别是JavaScript对象可以包含函数，而JSON对象不能包含任何函数。接下来的示例中有一个`getName`属性，它有一个函数，当被调用时会弹出名字`John
    Doe`：
- en: '![The Hello World program with JSON](img/6034OS_02_09.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![带有JSON的Hello World程序](img/6034OS_02_09.jpg)'
- en: Finally, the biggest difference is that a JavaScript object was never intended
    to be a data interchange format, while the sole purpose of JSON was to use it
    as a data interchange format.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最大的区别是JavaScript对象从未打算成为数据交换格式，而JSON的唯一目的是将其用作数据交换格式。
- en: Datatypes in JSON
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON中的数据类型
- en: 'Now, let us take a look at a more complex example of JSON. We''ll also go over
    all the datatypes that are supported by JSON. JSON supports six datatypes: strings,
    numbers, Booleans, arrays, objects, and null.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个更复杂的JSON示例。我们还将介绍JSON支持的所有数据类型。JSON支持六种数据类型：字符串、数字、布尔值、数组、对象和null。
- en: '![Datatypes in JSON](img/6034OS_02_10.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_10.jpg)'
- en: 'In the preceding example, we have five key-value pairs of different datatypes.
    Now let us take a close look at each of these key-value pairs:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们有五个不同数据类型的键值对。现在让我们仔细看看每个这些键值对：
- en: '![Datatypes in JSON](img/6034OS_02_11.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_11.jpg)'
- en: The datatype of the value that `"id"` references is a number.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`"id"`引用的值的数据类型是数字。'
- en: '![Datatypes in JSON](img/6034OS_02_12.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_12.jpg)'
- en: Here, the datatype of the value that `"name"` references is a string.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`"name"`引用的值的数据类型是字符串。
- en: '![Datatypes in JSON](img/6034OS_02_13.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_13.jpg)'
- en: In the preceding screenshot, the datatype of the value that `"isStudent"` references
    is a Boolean.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，`"isStudent"`引用的值的数据类型是布尔值。
- en: '![Datatypes in JSON](img/6034OS_02_14.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_14.jpg)'
- en: The datatype of the value that `"scores"` references here is an array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`"scores"`引用的值的数据类型是数组。
- en: '![Datatypes in JSON](img/6034OS_02_15.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_15.jpg)'
- en: Here the datatype of the value that `"courses"` references is an object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`"courses"`引用的值的数据类型是对象。
- en: 'We know that JSON supports six datatypes; they are strings, numbers, Booleans,
    arrays, objects, and null. Yes, JSON supports null data, and real-time business
    implementations need accurate information. There might be cases where null was
    substituted with an empty string, but that is inaccurate. Let us take a quick
    look at the following example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道JSON支持六种数据类型；它们是字符串、数字、布尔值、数组、对象和null。是的，JSON支持null数据，实时业务实现需要准确的信息。可能有情况下null被替换为空字符串，但这是不准确的。让我们快速看一下以下示例：
- en: '![Datatypes in JSON](img/6034OS_02_16.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_16.jpg)'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Arrays and null values are objects in JavaScript.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数组和null值在JavaScript中是对象。
- en: In the earlier example, we are using the `typeof` operator that takes an operand,
    and returns the datatype of that operand. On line 4, we are determining the type
    of an empty string, while on line 8 we are determining the type of a null value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了`typeof`运算符，它接受一个操作数，并返回该操作数的数据类型。在第4行，我们确定了空字符串的类型，而在第8行，我们确定了空值的类型。
- en: 'Now, let us implement our JSON object in a page and retrieve the values, as
    shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在页面中实现我们的JSON对象并检索值，如下面的屏幕截图所示：
- en: '![Datatypes in JSON](img/6034OS_02_17.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_17.jpg)'
- en: 'To retrieve the `id` from the variable `complexJson`, we need to do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要从变量`complexJson`中检索`id`，我们需要执行以下操作：
- en: '![Datatypes in JSON](img/6034OS_02_18.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_18.jpg)'
- en: 'To retrieve the `name` from the variable `complexJson`, look at the screenshot
    that is shown:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要从变量`complexJson`中检索`name`，请查看所示的屏幕截图：
- en: '![Datatypes in JSON](img/6034OS_02_19.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_19.jpg)'
- en: 'Look at the following screenshot to retrieve `isStudent` from the variable
    `complexJson`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下屏幕截图，以从变量`complexJson`中检索`isStudent`：
- en: '![Datatypes in JSON](img/6034OS_02_20.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_20.jpg)'
- en: 'Retrieving data from arrays and objects gets a little tricky, as we have to
    traverse through the array or object. Let us see how values can be retrieved from
    arrays:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从数组和对象中检索数据有点棘手，因为我们必须遍历数组或对象。让我们看看如何从数组中检索值：
- en: '![Datatypes in JSON](img/6034OS_02_21.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_21.jpg)'
- en: In the preceding example, we are retrieving the second element from the `scores`
    array. Although `scores` is an array inside the `complexJson` object, it is still
    treated as a regular key-value pair. It is handled differently when the key is
    accessed; the first thing that the interpreter has to assess, when a key is accessed,
    is to get the datatype of its value. If the retrieved value is a string, number,
    Boolean, or null, there will not be any extra operations that are performed on
    the value. But if it is an array or an object, the value's dependencies are taken
    into consideration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们从`scores`数组中检索了第二个元素。尽管`scores`是`complexJson`对象内的一个数组，但它仍然被视为常规键值对。当访问键时，处理方式不同；解释器在访问键时首先要评估的是获取其值的数据类型。如果检索到的值是字符串、数字、布尔值或空值，则不会对该值执行任何额外的操作。但如果它是一个数组或对象，则会考虑值的依赖关系。
- en: 'To retrieve an element from the object inside a JSON object, we will have to
    access the key that is the reference for that value, as shown:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要从JSON对象内部检索元素，我们必须访问作为该值引用的键，如下所示：
- en: '![Datatypes in JSON](img/6034OS_02_22.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![JSON中的数据类型](img/6034OS_02_22.jpg)'
- en: Since objects do not have a numeric index, JavaScript might rearrange the order
    of items inside an object. If you notice that the order of key-value pairs during
    the initialization of the JSON object is different from when you are accessing
    the data, there is nothing to worry about. There is no loss of data; the JavaScript
    engine has just reordered your object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对象没有数值索引，JavaScript可能会重新排列对象内部项目的顺序。如果您注意到在初始化JSON对象时键值对的顺序与访问数据时不同，那就没什么好担心的。数据没有丢失；JavaScript引擎只是重新排列了您的对象。
- en: Languages that support JSON
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持JSON的语言
- en: Until now, we have seen how the parsers in JavaScript support JSON. There are
    many other programming languages that provide implementations for JSON. Languages
    such as PHP, Python, C#, C++, and Java provide a very good support for the JSON
    data interchange format. All of the popular programming languages that support
    service-oriented architecture have understood the importance of JSON and its implementation
    for data transfer, thus, they have provided great support for JSON. Let us take
    a quick detour from implementing JSON in JavaScript, and see how JSON is implemented
    in other languages, such as PHP and Python.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到JavaScript中的解析器如何支持JSON。还有许多其他编程语言提供了JSON的实现。诸如PHP、Python、C＃、C ++和Java等语言对JSON数据交换格式提供了很好的支持。所有支持面向服务的流行编程语言都理解了JSON及其用于数据传输的重要性，因此它们对JSON提供了很好的支持。让我们暂时离开JavaScript中JSON的实现，看看JSON在其他语言中的实现，比如PHP和Python。
- en: PHP
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP
- en: PHP is considered to be one of the most popular languages for building web applications.
    It is a server-side scripting language that allows developers to build applications
    that can perform operations on the server, connect to a database to perform CRUD
    (Create, Read, Update, Delete) operations, and provide a stately environment for
    real-time applications. JSON support has been built into the PHP core from PHP
    5.2.0; this helps users avoid going through any complex installations or configurations.
    Given that JSON is just a data interchange format, PHP consists of two functions.
    These functions handle JSON that comes in via a request or generate JSON that
    will be sent via a response. PHP is a weakly-typed language; for this example,
    we will use the data stored in a PHP array and convert that data into a JSON string,
    which can be utilized as a data feed. Let us recreate the student example that
    we have used in an earlier section, build it in PHP, and convert it into JSON.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: PHP被认为是构建Web应用程序的最流行语言之一。它是一种服务器端脚本语言，允许开发人员构建可以在服务器上执行操作、连接到数据库执行CRUD（创建、读取、更新、删除）操作，并为实时应用程序提供稳定环境的应用程序。JSON支持已经内置到PHP核心中，从PHP
    5.2.0开始；这有助于用户避免进行任何复杂的安装或配置。鉴于JSON只是一种数据交换格式，PHP包含两个函数。这些函数处理通过请求传入的JSON，或者生成将通过响应发送的JSON。PHP是一种弱类型语言；在本例中，我们将使用存储在PHP数组中的数据，并将该数据转换为JSON字符串，以便用作数据源。让我们在PHP中重新创建我们在前面部分中使用的学生示例，并将其转换为JSON。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example is only intended to show you how JSON can be generated using PHP.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例仅旨在向您展示如何使用PHP生成JSON。
- en: '![PHP](img/6034OS_02_23.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![PHP](img/6034OS_02_23.jpg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To run a PHP script, we will need to install PHP. To run a PHP script through
    a browser, we will need a web server, such as Apache or IIS. We will go through
    the installation in [Chapter 4](ch04.xhtml "Chapter 4. AJAX Calls with JSON Data"),
    *AJAX Calls with JSON Data*, when we work with AJAX.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行PHP脚本，我们需要安装PHP。要通过浏览器运行PHP脚本，我们需要一个Web服务器，如Apache或IIS。当我们使用AJAX时，我们将在[第4章](ch04.xhtml
    "第4章。使用JSON数据进行AJAX调用")中进行安装，*使用JSON数据进行AJAX调用*。
- en: This script starts by initializing a variable, and assigning an associative
    array that contains student information. The variable `$students` is then passed
    to a function called `json_encode()`, which converts the variable into a JSON
    string. When this script is run, it generates a valid response that can be exposed
    as a JSON data feed for other applications to utilize.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本首先初始化一个变量，并分配一个包含学生信息的关联数组。然后将变量`$students`传递给一个名为`json_encode()`的函数，该函数将变量转换为JSON字符串。当运行此脚本时，它将生成一个有效的响应，可以将其公开为JSON数据源，供其他应用程序利用。
- en: 'The output is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![PHP](img/6034OS_02_24.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![PHP](img/6034OS_02_24.jpg)'
- en: We have successfully generated our first JSON feed via a simple PHP script;
    let us take a look at the method to parse JSON that comes in via an HTTP request.
    It is common for web applications that make asynchronous HTTP requests to send
    data in JSON format.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功通过一个简单的PHP脚本生成了我们的第一个JSON数据源；让我们看一下如何解析通过HTTP请求传入的JSON的方法。对于进行异步HTTP请求的Web应用程序来说，以JSON格式发送数据是很常见的。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example is only intended to show you how JSON can be ingested into PHP.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是为了向你展示JSON如何被引入到PHP中。
- en: '![PHP](img/6034OS_02_25.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![PHP](img/6034OS_02_25.jpg)'
- en: 'The output is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![PHP](img/6034OS_02_26.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![PHP](img/6034OS_02_26.jpg)'
- en: Python
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: Python is a very popular scripting language that is extensively used to perform
    string operations and to build console applications. It can be used to fetch data
    from a JSON API, and once the JSON data is retrieved it will be treated as a JSON
    string. To perform any operations on that JSON string, Python provides the JSON
    module. The JSON module is an amalgamation of many powerful functions that we
    can use to parse the JSON string on hand.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种非常流行的脚本语言，广泛用于执行字符串操作和构建控制台应用程序。它可以用于从JSON API中获取数据，一旦检索到JSON数据，它将被视为JSON字符串。为了对该JSON字符串执行任何操作，Python提供了JSON模块。JSON模块是许多强大函数的综合，我们可以使用它们来解析手头的JSON字符串。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example is only intended to show you how JSON can be generated using Python.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是为了向你展示如何使用Python生成JSON。
- en: '![Python](img/6034OS_02_27.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Python](img/6034OS_02_27.jpg)'
- en: In this example we have used complex datatypes, such as Tuples and Dictionaries,
    to store the scores and courses respectively; since this is not a Python course,
    we will not go deep into those datatypes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了复杂的数据类型，如元组和字典，分别存储分数和课程；由于这不是Python课程，我们不会深入研究这些数据类型。
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To run this script Python2 needs to be installed, it comes preinstalled on any
    *nix operating system.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这个脚本，需要安装Python2，它预装在任何*nix操作系统上。
- en: 'The output is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Python](img/6034OS_02_28.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![Python](img/6034OS_02_28.jpg)'
- en: The keys might get rearranged based on the datatype; we can use the `sort_keys`
    flag to retrieve the original order.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 键可能会根据数据类型重新排列；我们可以使用`sort_keys`标志来检索原始顺序。
- en: Now, let us take a quick look at how the JSON decoding is performed in Python.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速看一下在Python中如何执行JSON解码。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This example is only intended to show you how JSON can be ingested into Python.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是为了向你展示JSON如何被引入到Python中。
- en: '![Python](img/6034OS_02_29.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Python](img/6034OS_02_29.jpg)'
- en: In this example, we are storing the JSON string in `student_json`, and we are
    using the `json.loads()` method that is available through the JSON module in Python.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将JSON字符串存储在`student_json`中，并使用Python中JSON模块提供的`json.loads()`方法。
- en: 'The output is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Python](img/6034OS_02_30.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Python](img/6034OS_02_30.jpg)'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced us to the basics of JSON. We went through the history
    of JSON, and understood its advantages over XML. We created our first JSON object
    and successfully parsed it. Also, we went over all the datatypes that JSON supports.
    Finally, we went over some examples as to how JSON can be implemented in other
    programming languages. As we move forward in this journey, we will find the knowledge
    that we have gathered in this chapter to be a solid foundation for the more complex
    concepts that we will go over in the later chapters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们介绍了JSON的基础知识。我们了解了JSON的历史，并理解了它相对于XML的优势。我们创建了我们的第一个JSON对象并成功解析了它。此外，我们还了解了JSON支持的所有数据类型。最后，我们还介绍了一些关于如何在其他编程语言中实现JSON的示例。随着我们在这个旅程中前进，我们会发现本章中所积累的知识将为我们在后面章节中将要学习的更复杂的概念奠定坚实的基础。
