["```ts\nfunction something() {\n  statement;\n  statement;\n  if(condition) {\n    something();\n  }\n  return someValue;\n}\n```", "```ts\nclass Node {\n  constructor(\n    public left, \n    public value\n  ) {}\n}\n```", "```ts\nconst head = new Node(null, 1);\nconst firstNode = new Node(head, 2);\nconst secondNode = new Node(firstNode, 3);\n```", "```ts\n// demo of how to find the head node, imperative style\n\nconst head = new Node(null, 1);\nconst firstNode = new Node(head, 2);\nconst secondNode = new Node(firstNode, 3); \n\nfunction findHeadImperative (startNode)  {   while (startNode.left !==  null) {\n    startNode = startNode.left;  }\n  return startNode; }\n\nconst foundImp = findHeadImperative(secondNode); console.log('found', foundImp); console.log(foundImp === head);  \n```", "```ts\n// demo of how to find head node, declarative style using recursion\n\nconst head = new Node(null, 1);\nconst firstNode = new Node(head, 2);\nconst secondNode = new Node(firstNode, 3); \n\nfunction findHeadRecursive(startNode) {  if(startNode.left !==  null) {\n    return findHeadRecursive(startNode.left);  } else {    return startNode;  }\n}\n\nconst found = findHeadRecursive(secondNode); console.log('found', found); console.log(found === head);  \n```", "```ts\n// demo of printing an array, imperative style\n\nlet array = [1, 2, 3, 4, 5];\n\nfunction print(arr) {\n  for(var i = 0, i < arr.length; i++) {\n    console.log(arr[i]); \n  }\n}\n\nprint(arr);\n```", "```ts\n// print.js, printing an array using recursion\n\nlet array = [1, 2, 3, 4, 5]; \nfunction print(arr, pos, len) {  if (pos < len) {    console.log(arr[pos]);\n    print(arr, pos +  1, len);\n  }\n  return; }\n\nprint(array, 0, array.length);\n```", "```ts\nclass NodeClass {  constructor(left, right, value) {\n    this.left = left;    this.right = right;    this.value = value;  }\n}\n```", "```ts\n// tree.js\n\nclass NodeClass {  constructor(left, right, value) {\n    this.left = left;    this.right = right;    this.value = value;  }\n}\n\nconst leftLeftLeftChild =  new NodeClass(null, null, 7); const leftLeftChild =  new NodeClass(leftLeftLeftChild, null, 1); const leftRightChild =  new NodeClass(null, null, 2); const rightLeftChild =  new NodeClass(null, null, 4); const rightRightChild =  new NodeClass(null, null, 2); const left =  new NodeClass(leftLeftChild, leftRightChild, 3); const right =  new NodeClass(rightLeftChild, rightRightChild, 5); const root =  new NodeClass(left, right, 2); module.exports = root;  \n```", "```ts\n// tree-sum.js\n\nconst root = require('./tree');\n\nfunction summarise(node) {\n  return node.value + node.left.value + node.right.value;\n}\n\nconsole.log(summarise(root)) // 10\n```", "```ts\n// example of a non recursive code\n\nfunction summarise(node) {\n  return node.value + \n    node.left.value + \n    node.right.value +\n    node.right.left.value +\n    node.right.right.value + \n    node.left.left.value + \n    node.left.right.value;\n}\n\nconsole.log(summarise(root)) // 19\n```", "```ts\nfunction summarise(node) {\n  if(node === null) {\n    return 0;\n  }\n  return node.value + summarise(node.left) + summarise(left.right);\n}\n```", "```ts\n// tree.js\n\nclass NodeClass {  constructor(left, right, value) {\n    this.left = left;    this.right = right;    this.value = value;  }\n}\n\nconst leftLeftLeftChild =  new NodeClass(null, null, 7); const leftLeftChild =  new NodeClass(leftLeftLeftChild, null, 1); const leftRightChild =  new NodeClass(null, null, 2); const rightLeftChild =  new NodeClass(null, null, 4); const rightRightChild =  new NodeClass(null, null, 2); const left =  new NodeClass(leftLeftChild, leftRightChild, 3); const right =  new NodeClass(rightLeftChild, rightRightChild, 5); const root =  new NodeClass(left, right, 2); module.exports = root; \n// tree-sum.js\n\nconst root = require(\"./tree\"); function sum(node) {  if (node ===  null) {\n    return  0;\n  }\n  return node.value + sum(node.left) + sum(node.right); }\n\nconsole.log(\"sum\", sum(root));\n```", "```ts\n//tree-count.js\n\nconst root = require(\"./tree\"); \nfunction count(node) {  if (node ===  null) {\n    return  0;\n  } else {    return  1  + count(node.left) + count(node.right);  }\n}\n\nconsole.log(\"count\", count(root));\n```", "```ts\n// tree-width.js\n\nconst root = require(\"./tree\"); \nfunction calc(node, direction) {  if (node ===  null) {\n    return  0;\n  } else {    return (      1  + (direction ===  \"left\" ? calc(node.left, direction) : calc(node.right, direction))    );\n  }\n}\n\nfunction calcWidth(node) {  return calc(node.left, \"left\") + calc(node.right, \"right\"); }\n\nconsole.log(\"width\", calcWidth(root));\n```", "```ts\nlet newList = list.map(value => value + 1)\n```", "```ts\nlet array = [1,2,3];\nlet filtered = array.filter(data => data % 2 === 0);\n```"]