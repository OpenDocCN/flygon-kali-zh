- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Working with Data Using Entity Framework Core
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Entity Framework Core处理数据
- en: This chapter is about reading and writing to data stores, such as Microsoft
    SQL Server, SQLite, and Azure Cosmos DB, by using the object-to-data store mapping
    technology named **Entity Framework Core** (**EF Core** ).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何使用名为**Entity Framework Core**（**EF Core**）的对象到数据存储映射技术，读取和写入数据存储，如Microsoft
    SQL Server、SQLite和Azure Cosmos DB。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding modern databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Setting up EF Core
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置EF Core
- en: Defining EF Core models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义EF Core模型
- en: Querying EF Core models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询EF Core模型
- en: Loading patterns with EF Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EF Core加载模式
- en: Manipulating data with EF Core
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EF Core操作数据
- en: Working with transactions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事务
- en: Code First EF Core models
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Code First EF Core模型
- en: Understanding modern databases
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解现代数据库
- en: Two of the most common places to store data are in a **Relational Database Management
    System** (**RDBMS** ) such as Microsoft SQL Server, PostgreSQL, MySQL, and SQLite,
    or in a **NoSQL** database such as Microsoft Azure Cosmos DB, Redis, MongoDB,
    and Apache Cassandra.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 存储数据的两个最常见的地方是**关系数据库管理系统**（**RDBMS**），如Microsoft SQL Server、PostgreSQL、MySQL和SQLite，或者**NoSQL**数据库，如Microsoft
    Azure Cosmos DB、Redis、MongoDB和Apache Cassandra。
- en: Understanding legacy Entity Framework
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解传统的Entity Framework
- en: '**Entity Framework** (**EF** ) was first released as part of .NET Framework
    3.5 with Service Pack 1 back in late 2008\. Since then, Entity Framework has evolved,
    as Microsoft has observed how programmers use an **object-relational mapping**
    (**ORM** ) tool in the real world.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Entity Framework**（**EF**）最初是作为.NET Framework 3.5与Service Pack 1的一部分发布的，那是在2008年末。自那时起，Entity
    Framework已经发展，因为微软观察到程序员在现实世界中如何使用**对象关系映射**（**ORM**）工具。'
- en: ORMs use a mapping definition to associate columns in tables to properties in
    classes. Then, a programmer can interact with objects of different types in a
    way that they are familiar with, instead of having to deal with knowing how to
    store the values in a relational table or another structure provided by a NoSQL
    data store.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ORM使用映射定义将表中的列与类中的属性关联起来。然后，程序员可以以熟悉的方式与不同类型的对象交互，而不必知道如何将值存储在关系表或NoSQL数据存储提供的其他结构中。
- en: The version of EF included with .NET Framework is **Entity Framework 6** (**EF6**
    ). It is mature, stable, and supports an EDMX (XML file) way of defining the model
    as well as complex inheritance models, and a few other advanced features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在.NET Framework中的EF版本是**Entity Framework 6**（**EF6**）。它是成熟、稳定的，支持使用EDMX（XML文件）定义模型以及复杂的继承模型等一些其他高级功能。
- en: EF 6.3 and later have been extracted from .NET Framework as a separate package
    so it can be supported on .NET Core 3.0 and later. This enables existing projects
    like web applications and services to be ported and run cross-platform. However,
    EF6 should be considered a legacy technology because it has some limitations when
    running cross-platform and no new features will be added to it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: EF 6.3及更高版本已从.NET Framework中提取为一个单独的包，因此可以在.NET Core 3.0及更高版本上得到支持。这使得像Web应用程序和服务这样的现有项目可以被移植并跨平台运行。但是，EF6应该被视为传统技术，因为在跨平台运行时存在一些限制，并且不会添加新功能。
- en: Using the legacy Entity Framework 6.3 or later
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用传统的Entity Framework 6.3或更高版本
- en: 'To use the legacy Entity Framework in a .NET Core 3.0 or later project, you
    must add a package reference to it in your project file, as shown in the following
    markup:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在.NET Core 3.0或更高版本项目中使用传统的Entity Framework，必须在项目文件中添加对它的包引用，如下面的标记所示：
- en: '```cs'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference Include="EntityFramework"
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference Include="EntityFramework"
- en: Version="6.4.4"
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.4.4"
- en: />
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Only use legacy EF6 if you have to, for example, when migrating
    a WPF app that uses it. This book is about modern cross-platform development so,
    in the rest of this chapter, I will only cover the modern Entity Framework Core.
    You will not need to reference the legacy EF6 package as shown above in the projects
    for this chapter.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：只有在必要时才使用传统的EF6，例如在迁移使用它的WPF应用程序时。本书是关于现代跨平台开发的，因此在本章的其余部分中，我将只涵盖现代的Entity
    Framework Core。您不需要像上面所示的项目中引用传统的EF6包。'
- en: Understanding Entity Framework Core
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Entity Framework Core
- en: The truly cross-platform version, **EF Core** , is different from the legacy
    Entity Framework. Although EF Core has a similar name, you should be aware of
    how it varies from EF6\. The latest EF Core is version 6.0 to match .NET 6.0.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 真正跨平台的版本**EF Core**与传统的Entity Framework不同。尽管EF Core的名称相似，但您应该了解它与EF6有何不同。最新的EF
    Core版本是6.0，以匹配.NET 6.0。
- en: EF Core 5 and later only support .NET 5 and later. EF Core 3.0 and later only
    run on platforms that support .NET Standard 2.1, meaning .NET Core 3.0 and later.
    It does not support .NET Standard 2.0 platforms like .NET Framework 4.8.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 5及更高版本仅支持.NET 5及更高版本。EF Core 3.0及更高版本仅在支持.NET Standard 2.1的平台上运行，这意味着.NET
    Core 3.0及更高版本。它不支持.NET Standard 2.0平台，如.NET Framework 4.8。
- en: As well as traditional RDBMSs, EF Core supports modern cloud-based, nonrelational,
    schema-less data stores, such as Microsoft Azure Cosmos DB and MongoDB, sometimes
    with third-party providers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传统的关系型数据库管理系统，EF Core还支持现代基于云的非关系型无模式数据存储，如Microsoft Azure Cosmos DB和MongoDB，有时还包括第三方提供程序。
- en: EF Core has so many improvements that this chapter cannot cover them all. I
    will focus on the fundamentals that all .NET developers should know and some of
    the cooler new features.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core有很多改进，本章无法涵盖所有内容。我将重点关注所有.NET开发人员都应该了解的基础知识以及一些更酷的新功能。
- en: 'There are two approaches to working with EF Core:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EF Core有两种方法：
- en: '**Database First** : A database already exists, so you build a model that matches
    its structure and features.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Database First**：数据库已经存在，因此您可以构建一个与其结构和特性匹配的模型。'
- en: '**Code First** : No database exists, so you build a model and then use EF Core
    to create a database that matches its structure and features.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Code First**：没有数据库存在，因此您可以构建一个模型，然后使用EF Core创建与其结构和特性匹配的数据库。'
- en: We will start by using EF Core with an existing database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用EF Core与现有数据库。
- en: Creating a console app for working with EF Core
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于使用EF Core的控制台应用程序
- en: 'First, we will create a console app project for this chapter:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为本章创建一个控制台应用程序项目：
- en: Use your preferred code editor to create a new solution/workspace named `Chapter10`
    .
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器创建一个名为`Chapter10`的新解决方案/工作空间。
- en: 'Add a console app project, as defined in the following list:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制台应用程序项目，如下列表所定义：
- en: 'Project template: **Console Application** / `console`'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Workspace/solution file and folder: `Chapter10`'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作空间/解决方案文件和文件夹：`Chapter10`
- en: 'Project file and folder: `WorkingWithEFCore`'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WorkingWithEFCore`
- en: Using a sample relational database
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用样本关系数据库
- en: To learn how to manage an RDBMS using .NET, it would be useful to have a sample
    one so that you can practice on one that has a medium complexity and a decent
    amount of sample records. Microsoft offers several sample databases, most of which
    are too complex for our needs, so instead, we will use a database that was first
    created in the early 1990s known as **Northwind** .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习如何使用.NET管理RDBMS，有一个样本数据库会很有用，这样您就可以在一个中等复杂度和一定数量的样本记录上进行练习。微软提供了几个样本数据库，其中大多数对我们的需求来说都太复杂了，因此我们将使用一个在上世纪90年代初首次创建的数据库，即**Northwind**。
- en: 'Let''s take a minute to look at a diagram of the Northwind database. You can
    use the following diagram to refer to as we write code and queries throughout
    this book:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花一分钟时间看一下Northwind数据库的图表。您可以在本书的编写代码和查询过程中使用以下图表作为参考：
- en: '![Diagram Description automatically generated](img/Image00089.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的图表描述](img/Image00089.jpg)'
- en: 'Figure 10.1: The Northwind database tables and relationships'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：Northwind数据库表和关系
- en: 'You will write code to work with the `Categories` and `Products` tables later
    in this chapter and other tables in later chapters. But before we do, note that:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本章后面的部分编写代码来处理`Categories`和`Products`表，以及后面章节中的其他表。但在我们开始之前，请注意：
- en: Each category has a unique identifier, name, description, and picture.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个类别都有一个唯一的标识符、名称、描述和图片。
- en: Each product has a unique identifier, name, unit price, units in stock, and
    other fields.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品都有一个唯一的标识符、名称、单价、库存单位和其他字段。
- en: Each product is associated with a category by storing the category's unique
    identifier.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品都通过存储类别的唯一标识符与一个类别相关联。
- en: The relationship between `Categories` and `Products` is one-to-many, meaning
    each category can have zero or more products.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Categories`和`Products`之间的关系是一对多的，意味着每个类别可以有零个或多个产品。'
- en: Using Microsoft SQL Server for Windows
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Microsoft SQL Server for Windows
- en: Microsoft offers various editions of its popular and capable SQL Server product
    for Windows, Linux, and Docker containers. We will use a free version that can
    run standalone, known as SQL Server Developer Edition. You can also use the Express
    edition or the free SQL Server LocalDB edition that can be installed with Visual
    Studio for Windows.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 微软为Windows、Linux和Docker容器提供了其流行和功能强大的SQL Server产品的各种版本。我们将使用一个可以独立运行的免费版本，称为SQL
    Server开发人员版。您还可以使用Express版或可以与Visual Studio for Windows一起安装的免费SQL Server LocalDB版。
- en: If you do not have a Windows computer or you want to use a cross-platform database
    system, then you can skip ahead to the topic *Using SQLite* .
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Windows计算机，或者想要使用跨平台数据库系统，那么您可以直接跳到*使用SQLite*主题。
- en: Downloading and installing SQL Server
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载并安装SQL Server
- en: 'You can download SQL Server editions from the following link:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载SQL Server版本：
- en: '[https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.microsoft.com/en-us/sql-server/sql-server-downloads](https://www.microsoft.com/en-us/sql-server/sql-server-downloads)'
- en: Download the **Developer** edition.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载**开发人员**版。
- en: Run the installer.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序。
- en: Select the **Custom** installation type.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**自定义**安装类型。
- en: Select a folder for the installation files and then click **Install** .
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个安装文件的文件夹，然后点击**安装**。
- en: Wait for the 1.5 GB of installer files to download.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待1.5GB的安装程序文件下载完成。
- en: In **SQL Server Installation Center** , click **Installation** , and then click
    **New SQL Server stand-alone installation or add features to an existing installation**
    .
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SQL Server安装中心**中，点击**安装**，然后点击**新建SQL Server独立安装或向现有安装添加功能**。
- en: Select **Developer** as the free edition and then click **Next** .
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发人员**作为免费版本，然后点击**下一步**。
- en: Accept the license terms and then click **Next** .
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受许可条款，然后点击**下一步**。
- en: Review the install rules, fix any issues, and then click **Next** .
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看安装规则，修复任何问题，然后点击**下一步**。
- en: In **Feature Selection** , select **Database Engine Services** , and then click
    **Next** .
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**功能选择**中，选择**数据库引擎服务**，然后点击**下一步**。
- en: In **Instance Configuration** , select **Default instance** , and then click
    **Next** . If you already have a default instance configured, then you could create
    a named instance, perhaps called `cs10dotnet6` .
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**实例配置**中，选择**默认实例**，然后点击**下一步**。如果您已经配置了默认实例，那么您可以创建一个命名实例，可能称为`cs10dotnet6`。
- en: In **Server Configuration** , note the **SQL Server** **Database Engine** is
    configured to start automatically. Set the **SQL Server Browser** to start automatically,
    and then click **Next** .
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器配置**中，注意**SQL Server** **数据库引擎**已配置为自动启动。将**SQL Server Browser**设置为自动启动，然后点击**下一步**。
- en: In **Database Engine Configuration** , on the **Server Configuration** tab,
    set **Authentication Mode** to **Mixed** , set the **sa** account password to
    a strong password, click **Add Current User** , and then click **Next** .
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库引擎配置**中，在**服务器配置**选项卡上，将**身份验证模式**设置为**混合**，将**sa**账户密码设置为强密码，点击**添加当前用户**，然后点击**下一步**。
- en: In **Ready to Install** , review the actions that will be taken, and then click
    **Install** .
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**准备安装**中，查看将要采取的操作，然后点击**安装**。
- en: In **Complete** , note the successful actions taken, and then click **Close**
    .
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**完成**中，注意已经采取的成功操作，然后点击**关闭**。
- en: In **SQL Server Installation Center** , in **Installation** , click **Install
    SQL Server Management Tools** .
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SQL Server安装中心**中，在**安装**中，点击**安装SQL Server管理工具**。
- en: In the browser window, click to download the latest version of SSMS.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器窗口中，单击下载SSMS的最新版本。
- en: Run the installer and click **Install** .
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序，然后单击**安装**。
- en: When the installer has finished, click **Restart** if needed or **Close** .
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序完成后，如果需要，单击**重新启动**或**关闭**。
- en: Creating the Northwind sample database for SQL Server
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为SQL Server创建Northwind示例数据库
- en: 'Now we can run a database script to create the Northwind sample database:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以运行数据库脚本来创建Northwind示例数据库：
- en: 'If you have not previously downloaded or cloned the GitHub repository for this
    book, then do so now using the following link: [https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)
    .'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您以前没有下载或克隆过本书的GitHub存储库，请使用以下链接进行下载：[https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)。
- en: 'Copy the script to create the Northwind database for SQL Server from the following
    path in your local Git repository: `/sql-scripts/Northwind4SQLServer.sql` into
    the `WorkingWithEFCore` folder.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从本地Git存储库中的以下路径`/sql-scripts/Northwind4SQLServer.sql`中的脚本复制到`WorkingWithEFCore`文件夹中。
- en: Start **SQL Server Management Studio** .
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**SQL Server管理工具**。
- en: In the **Connect to Server** dialog, for **Server name** , enter `.` (a dot)
    meaning the local computer name, and then click **Connect** .
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**连接到服务器**对话框中，对于**服务器名称**，输入`。`（一个点），表示本地计算机名称，然后单击**连接**。
- en: If you had to create a named instance, like `cs10dotnet6` , then enter `.\cs10dotnet6`
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须创建一个命名实例，比如`cs10dotnet6`，那么输入`.\cs10dotnet6`
- en: Navigate to **File** | **Open** | **File...** .
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文件** | **打开** | **文件...**。
- en: Browse to select the `Northwind4SQLServer.sql` file and then click **Open**
    .
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览以选择`Northwind4SQLServer.sql`文件，然后单击**打开**。
- en: In the toolbar, click **Execute** , and note the **the Command(s) completed
    successfully** message.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，单击**执行**，注意**命令已成功完成**的消息。
- en: In **Object Explorer** , expand the **Northwind** database, and then expand
    **Tables** .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象资源管理器**中，展开**Northwind**数据库，然后展开**表**。
- en: Right-click **Products** , click **Select Top 1000 Rows** , and note the returned
    results, as shown in *Figure 10.2* :![](img/Image00090.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**产品**，单击**选择前1000行**，注意返回的结果，如*图10.2*所示：![](img/Image00090.jpg)
- en: 'Figure 10.2: The Products table in SQL Server Management Studio'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：SQL Server管理工具中的产品表
- en: In the **Object Explorer** toolbar, click the **Disconnect** button.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象资源管理器**工具栏中，单击**断开**按钮。
- en: Exit SQL Server Management Studio.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出SQL Server管理工具。
- en: Managing the Northwind sample database with Server Explorer
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用服务器资源管理器管理Northwind示例数据库
- en: 'We did not have to use SQL Server Management Studio to execute the database
    script. We can also use tools in Visual Studio including the **SQL Server Object
    Explorer** and **Server Explorer** :'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必使用SQL Server管理工具来执行数据库脚本。我们还可以使用Visual Studio中的工具，包括**SQL Server对象资源管理器**和**服务器资源管理器**：
- en: In Visual Studio, choose **View** | **Server Explorer** .
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，选择**查看** | **服务器资源管理器**。
- en: In the **Server Explorer** window, right-click **Data Connections** and choose
    **Add Connection...** .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器资源管理器**窗口中，右键单击**数据连接**，然后选择**添加连接...**。
- en: If you see the **Choose Data Source** dialog, as shown in *Figure 10.3* , select
    **Microsoft SQL Server** and then click **Continue** :![Graphical user interface,
    application Description automatically generated](img/Image00091.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到**选择数据源**对话框，如*图10.3*所示，请选择**Microsoft SQL Server**，然后单击**继续**：![图形用户界面，应用程序描述自动生成](img/Image00091.jpg)
- en: 'Figure 10.3: Choosing SQL Server as the data source'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：选择SQL Server作为数据源
- en: In the **Add Connection** dialog, enter the server name as `.` , enter the database
    name as `Northwind` , and then click **OK** .
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加连接**对话框中，将服务器名称输入为`。`，将数据库名称输入为`Northwind`，然后单击**确定**。
- en: In **Server Explorer** , expand the data connection and its tables. You should
    see 13 tables, including the **Categories** and **Products** tables.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务器资源管理器**中，展开数据连接及其表。您应该看到13个表，包括**类别**和**产品**表。
- en: Right-click the **Products** table, choose **Show Table Data** , and note the
    77 rows of products are returned.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**产品**表，选择**显示表数据**，注意返回了77行产品。
- en: To see the details of the **Products** table columns and types, right-click
    **Products** and choose **Open Table Definition** , or double-click the table
    in **Server Explorer** .
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看**产品**表的列和类型的详细信息，请右键单击**产品**，然后选择**打开表定义**，或者在**服务器资源管理器**中双击表。
- en: Using SQLite
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQLite
- en: SQLite is a small, cross-platform, self-contained RDBMS that is available in
    the public domain. It's the most common RDBMS for mobile platforms such as iOS
    (iPhone and iPad) and Android. Even if you use Windows and set up SQL Server in
    the previous section, you might want to set up SQLite too. The code that we write
    will work with both and it can be interesting to see the subtle differences.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite是一个小型、跨平台、自包含的关系型数据库管理系统，可在公共领域中使用。它是移动平台（如iOS（iPhone和iPad）和Android）最常见的关系型数据库管理系统。即使您使用Windows并在上一节中设置了SQL
    Server，您可能也想设置SQLite。我们编写的代码将适用于两者，并且看到微妙的差异可能会很有趣。
- en: Setting up SQLite for macOS
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为macOS设置SQLite
- en: SQLite is included in macOS in the `/usr/bin/` directory as a command-line application
    named `sqlite3` .
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS中，SQLite包含在`/usr/bin/`目录中，作为一个名为`sqlite3`的命令行应用程序。
- en: Setting up SQLite for Windows
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Windows设置SQLite
- en: 'On Windows, we need to add the folder for SQLite to the system path so it will
    be found when we enter commands at a command prompt or terminal:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，我们需要将SQLite的文件夹添加到系统路径中，这样当我们在命令提示符或终端中输入命令时，它就会被找到：
- en: 'Start your favorite browser and navigate to the following link: [https://www.sqlite.org/download.html](https://www.sqlite.org/download.html)
    .'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的浏览器，并导航到以下链接：[https://www.sqlite.org/download.html](https://www.sqlite.org/download.html)。
- en: Scroll down the page to the **Precompiled Binaries for Windows** section.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动页面到**Windows的预编译二进制文件**部分。
- en: Click **sqlite-tools-win32-x86-3360000.zip** . Note the file might have a higher
    version number after this book is published.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**sqlite-tools-win32-x86-3360000.zip**。请注意，该文件在本书出版后可能具有更高的版本号。
- en: Extract the ZIP file into a folder named `C:\Sqlite\` .
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件解压缩到名为`C:\Sqlite\`的文件夹中。
- en: Navigate to **Windows Settings** .
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Windows设置**。
- en: Search for `environment` and choose **Edit the system environment variables**
    . On non-English versions of Windows, please search for the equivalent word in
    your local language to find the setting.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`environment`并选择**编辑系统环境变量**。在Windows的非英文版本中，请搜索本地语言中的等效词以找到设置。
- en: Click the **Environment Variables** button.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**环境变量**按钮。
- en: In **System variables** , select **Path** in the list, and then click **Edit…**
    .
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**系统变量**中，选择列表中的**Path**，然后点击**编辑…**。
- en: Click **New** , enter `C:\Sqlite` , and press Enter .
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**，输入`C:\Sqlite`，然后按Enter。
- en: Click **OK** .
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Click **OK** .
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Click **OK** .
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。
- en: Close **Windows Settings** .
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**Windows设置**。
- en: Setting up SQLite for other OSes
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为其他操作系统设置SQLite
- en: 'SQLite can be downloaded and installed for other OSes from the following link:
    [https://www.sqlite.org/download.html](https://www.sqlite.org/download.html) .'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite可以从以下链接下载并安装到其他操作系统：[https://www.sqlite.org/download.html](https://www.sqlite.org/download.html)。
- en: Creating the Northwind sample database for SQLite
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为SQLite创建Northwind示例数据库
- en: 'Now we can create the Northwind sample database for SQLite using an SQL script:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用SQL脚本为SQLite创建Northwind示例数据库：
- en: 'If you have not previously cloned the GitHub repository for this book, then
    do so now using the following link: [https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)
    .'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前没有克隆过本书的GitHub存储库，请使用以下链接进行克隆：[https://github.com/markjprice/cs10dotnet6/](https://github.com/markjprice/cs10dotnet6/)。
- en: 'Copy the script to create the Northwind database for SQLite from the following
    path in your local Git repository: `/sql-scripts/Northwind4SQLite.sql` into the
    `WorkingWithEFCore` folder.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地Git存储库中的以下路径复制用于SQLite创建Northwind数据库的脚本：`/sql-scripts/Northwind4SQLite.sql`，并将其粘贴到`WorkingWithEFCore`文件夹中。
- en: 'Start a command line in the `WorkingWithEFCore` folder:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`文件夹中启动命令行：
- en: On Windows, start **File Explorer** , right-click the `WorkingWithEFCore` folder,
    and select **New Command Prompt at Folder** or **Open in Windows Terminal** .
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，启动**文件资源管理器**，右键单击`WorkingWithEFCore`文件夹，然后选择**在文件夹中新建命令提示符**或**在Windows终端中打开**。
- en: On macOS, start **Finder** , right-click the `WorkingWithEFCore` folder, and
    select **New Terminal at Folder** .
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOS上，启动**Finder**，右键单击`WorkingWithEFCore`文件夹，然后选择**在文件夹中新建终端**。
- en: 'Enter the command to execute the SQL script using SQLite and create the `Northwind.db`
    database, as shown in the following command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令来执行使用SQLite创建`Northwind.db`数据库的SQL脚本，如下命令所示：
- en: '```cs'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: sqlite3 Northwind.db -init Northwind4SQLite.sql
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite3 Northwind.db -init Northwind4SQLite.sql
- en: '```'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Be patient because this command might take a while to create the database structure.
    Eventually, you will see the SQLite command prompt, as shown in the following
    output:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待，因为这个命令可能需要一段时间来创建数据库结构。最终，您将看到SQLite命令提示符，如下输出所示：
- en: '```cs'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: -- Loading resources from Northwind4SQLite.sql
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: -- 从Northwind4SQLite.sql加载资源
- en: SQLite version 3.36.0 2021-08-24 15:20:15
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite版本3.36.0 2021-08-24 15:20:15
- en: Enter ".help" for usage hints.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输入".help"以获取使用提示。
- en: sqlite>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite>
- en: '```'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Press Ctrl + C on Windows or Ctrl + D on macOS to exit SQLite command mode.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上按Ctrl + C或在macOS上按Ctrl + D退出SQLite命令模式。
- en: Leave your terminal or command prompt window open because you will use it again
    soon.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持终端或命令提示符窗口打开，因为您很快将再次使用它。
- en: Managing the Northwind sample database with SQLiteStudio
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQLiteStudio管理Northwind示例数据库
- en: 'You can use a cross-platform graphical database manager named **SQLiteStudio**
    to easily manage SQLite databases:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用名为**SQLiteStudio**的跨平台图形数据库管理器轻松管理SQLite数据库：
- en: Navigate to the following link, [https://sqlitestudio.pl](https://sqlitestudio.pl)
    , and download and extract the application to your preferred location.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到以下链接，[https://sqlitestudio.pl](https://sqlitestudio.pl)，并下载并解压应用程序到您喜欢的位置。
- en: Start **SQLiteStudio** .
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动**SQLiteStudio**。
- en: On the **Database** menu, choose **Add a database** .
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**菜单中，选择**添加数据库**。
- en: In the **Database** dialog, in the **File** section, click on the yellow folder
    button to browse for an existing database file on the local computer, select the
    `Northwind.db` file in the `WorkingWithEFCore` folder, and then click **OK** .
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**对话框中，在**文件**部分，点击黄色文件夹按钮以浏览本地计算机上现有数据库文件，选择`WorkingWithEFCore`文件夹中的`Northwind.db`文件，然后点击**确定**。
- en: Right-click on the **Northwind** database and choose **Connect to the database**
    . You will see the 10 tables that were created by the script. (The script for
    SQLite is simpler than the one for SQL Server; it does not create as many tables
    or other database objects.)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**Northwind**数据库，然后选择**连接到数据库**。您将看到脚本创建的10个表。（与SQL Server的脚本相比，SQLite的脚本更简单，它不会创建太多的表或其他数据库对象。）
- en: Right-click on the **Products** table and choose **Edit the table** .
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**Products**表，然后选择**编辑表**。
- en: In the table editor window, note the structure of the `Products` table, including
    column names, data types, keys, and constraints, as shown in *Figure 10.4* :![Graphical
    user interface, text, application Description automatically generated](img/Image00092.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表编辑器窗口中，注意`Products`表的结构，包括列名、数据类型、键和约束，如*图10.4*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00092.jpg)
- en: 'Figure 10.4: The table editor in SQLiteStudio showing the structure of the
    Products table'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：SQLiteStudio中的表编辑器显示了Products表的结构
- en: In the table editor window, click the **Data** tab, and you will see 77 products,
    as shown in *Figure 10.5* :![Graphical user interface, text, application Description
    automatically generated](img/Image00093.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表编辑器窗口中，点击**数据**选项卡，您将看到77个产品，如*图10.5*所示：![图形用户界面，文本，应用程序描述自动生成](img/Image00093.jpg)
- en: 'Figure 10.5: The Data tab showing the rows in the Products table'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：数据选项卡显示了Products表中的行
- en: In the **Database** window, right-click **Northwind** and select **Disconnect
    from the database** .
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据库**窗口中，右键单击**Northwind**，然后选择**断开与数据库的连接**。
- en: Exit SQLiteStudio.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出SQLiteStudio。
- en: Setting up EF Core
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置EF Core
- en: Before we dive into the practicalities of managing data using EF Core, let's
    briefly talk about choosing between EF Core data providers.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论使用EF Core管理数据的实际操作之前，让我们简要讨论一下在EF Core数据提供程序之间进行选择。
- en: Choosing an EF Core database provider
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择EF Core数据库提供程序
- en: To manage data in a specific database, we need classes that know how to efficiently
    talk to that database.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理特定数据库中的数据，我们需要知道如何有效地与该数据库通信的类。
- en: EF Core database providers are sets of classes that are optimized for a specific
    data store. There is even a provider for storing the data in the memory of the
    current process, which can be useful for high-performance unit testing since it
    avoids hitting an external system.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core数据库提供程序是一组针对特定数据存储优化的类。甚至有一个提供程序用于将数据存储在当前进程的内存中，这对于高性能单元测试可能很有用，因为它避免了对外部系统的访问。
- en: 'They are distributed as NuGet packages, as shown in the following table:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 它们以NuGet软件包的形式分发，如下表所示：
- en: '| To manage this data store | Install this NuGet package |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '|要管理此数据存储|安装此NuGet软件包|'
- en: '| Microsoft SQL Server 2012 or later | `Microsoft.EntityFrameworkCore.SqlServer`
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '|Microsoft SQL Server 2012或更高版本|`Microsoft.EntityFrameworkCore.SqlServer`|'
- en: '| SQLite 3.7 or later | `Microsoft.EntityFrameworkCore.SQLite` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '|SQLite 3.7或更高版本|`Microsoft.EntityFrameworkCore.SQLite`|'
- en: '| MySQL | `MySQL.Data.EntityFrameworkCore` |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '|MySQL|`MySQL.Data.EntityFrameworkCore`|'
- en: '| In-memory | `Microsoft.EntityFrameworkCore.InMemory` |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '|内存中|`Microsoft.EntityFrameworkCore.InMemory`|'
- en: '| Azure Cosmos DB SQL API | `Microsoft.EntityFrameworkCore.Cosmos` |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '|Azure Cosmos DB SQL API|`Microsoft.EntityFrameworkCore.Cosmos`|'
- en: '| Oracle DB 11.2 | `Oracle.EntityFrameworkCore` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '|Oracle DB 11.2|`Oracle.EntityFrameworkCore`|'
- en: You can install as many EF Core database providers in the same project as you
    need. Each package includes the shared types as well as provider-specific types.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一个项目中安装尽可能多的EF Core数据库提供程序。每个软件包都包括共享类型和特定于提供程序的类型。
- en: Connecting to a database
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: To connect to an SQLite database, we just need to know the database filename,
    set using the parameter `Filename` .
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到SQLite数据库，我们只需要知道数据库文件名，使用参数`Filename`设置。
- en: 'To connect to an SQL Server database, we need to know multiple pieces of information,
    as shown in the following list:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到SQL Server数据库，我们需要知道多个信息，如下列表所示：
- en: The name of the server (and the instance if it has one).
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器的名称（如果有实例，则包括实例）。
- en: The name of the database.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的名称。
- en: Security information, such as username and password, or if we should pass the
    currently logged-on user's credentials automatically.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全信息，例如用户名和密码，或者是否应自动传递当前登录用户的凭据。
- en: We specify this information in a **connection string** .
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**连接字符串**中指定这些信息。
- en: 'For backward compatibility, there are multiple possible keywords we can use
    in an SQL Server connection string for the various parameters, as shown in the
    following list:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向后兼容，我们可以在SQL Server连接字符串中使用多个可能的关键字来表示各种参数，如下列表所示：
- en: '`Data Source` or `server` or `addr` : These keywords are the name of the server
    (and an optional instance). You can use a dot `.` to mean the local server.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Data Source`或`server`或`addr`：这些关键字是服务器的名称（和可选实例）。您可以使用点`.`表示本地服务器。'
- en: '`Initial Catalog` or `database` : These keywords are the name of the database.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Initial Catalog`或`database`：这些关键字是数据库的名称。'
- en: '`Integrated Security` or `trusted_connection` : These keywords are set to `true`
    or `SSPI` to pass the thread''s current user credentials.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`集成安全性`或`trusted_connection`：这些关键字设置为`true`或`SSPI`以传递线程的当前用户凭据。'
- en: '`MultipleActiveResultSets` : This keyword is set to `true` to enable a single
    connection to be used to work with multiple tables simultaneously to improve efficiency.
    It is used for lazy loading rows from related tables.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultipleActiveResultSets`：此关键字设置为`true`以允许单个连接同时与多个表一起工作，以提高效率。它用于从相关表中延迟加载行。'
- en: 'As described in the list above, when you write code to connect to an SQL Server
    database, you need to know its server name. The server name depends on the edition
    and version of SQL Server that you will connect to, as shown in the following
    table:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如上列表所述，当您编写连接到SQL Server数据库的代码时，您需要知道其服务器名称。服务器名称取决于您将连接到的SQL Server的版本和版本，如下表所示：
- en: '| SQL Server edition | Server name \ Instance name |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '|SQL Server版本|服务器名称\实例名称|'
- en: '| LocalDB 2012 | `(localdb)\v11.0` |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '|LocalDB 2012|`(localdb)\v11.0`|'
- en: '| LocalDB 2016 or later | `(localdb)\mssqllocaldb` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '|LocalDB 2016或更高版本|`(localdb)\mssqllocaldb`|'
- en: '| Express | `.\sqlexpress` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '|Express|`.\sqlexpress`|'
- en: '| Full/Developer (default instance) | `.` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '|完整/开发人员（默认实例）|`.`|'
- en: '| Full/Developer (named instance) | `.\cs10dotnet6` |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '|完整/开发人员（命名实例）|`.\cs10dotnet6`|'
- en: '**Good Practice** : Use a dot `.` as shorthand for the local computer name.
    Remember that server names for SQL Server are made of two parts: the name of the
    computer and the name of an SQL Server instance. You provide instance names during
    custom installation.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用点`.`作为本地计算机名称的缩写。请记住，SQL Server的服务器名称由两部分组成：计算机的名称和SQL Server实例的名称。您可以在自定义安装期间提供实例名称。'
- en: Defining the Northwind database context class
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义Northwind数据库上下文类
- en: The `Northwind` class will be used to represent the database. To use EF Core,
    the class must inherit from `DbContext` . This class understands how to communicate
    with databases and dynamically generate SQL statements to query and manipulate
    data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`Northwind`类将用于表示数据库。要使用EF Core，该类必须继承自`DbContext`。该类了解如何与数据库通信，并动态生成SQL语句以查询和操作数据。'
- en: Your `DbContext` -derived class should have an overridden method named `OnConfiguring`
    , which will set the database connection string.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`DbContext`-派生类应该有一个名为`OnConfiguring`的重写方法，该方法将设置数据库连接字符串。
- en: 'To make it easy for you to try SQLite and SQL Server, we will create a project
    that supports both, with a `string` field to control which is used at runtime:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您轻松尝试SQLite和SQL Server，我们将创建一个支持两者的项目，其中包含一个`string`字段，用于在运行时控制使用哪个：
- en: 'In the `WorkingWithEFCore` project, add package references to the EF Core data
    provider for both SQL Server and SQLite, as shown in the following markup:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`项目中，添加对SQL Server和SQLite的EF Core数据提供程序的包引用，如下标记所示：
- en: '```cs'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <PackageReference
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Sqlite"
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.Sqlite"
- en: Version="6.0.0"
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: <PackageReference
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.SqlServer"
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.SqlServer"
- en: Version="6.0.0"
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: </ItemGroup>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project to restore packages.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: Add a class file named `ProjectConstants.cs` .
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`ProjectConstants.cs`的类文件。
- en: 'In `ProjectConstants.cs` , define a class with a public string constant to
    store the database provider name that you want to use, as shown in the following
    code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ProjectConstants.cs`中，定义一个带有公共字符串常量的类，用于存储要使用的数据库提供程序名称，如下所示：
- en: '```cs'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: ProjectConstants
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: ProjectConstants
- en: '{'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: const
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: const
- en: string
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: DatabaseProvider = "SQLite"
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: DatabaseProvider = "SQLite"
- en: ; // or "SQLServer"
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ; // 或"SQLServer"
- en: '}'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , import the `Packt.Shared` namespace and output the database
    provider, as shown in the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入`Packt.Shared`命名空间，并输出数据库提供程序，如下所示：
- en: '```cs'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine($"Using
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: '{ProjectConstants.DatabaseProvider}'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '{ProjectConstants.DatabaseProvider}'
- en: database provider."
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库提供程序。"
- en: );
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Add a class file named `Northwind.cs` .
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`Northwind.cs`的类文件。
- en: 'In `Northwind.cs` , define a class named `Northwind` , import the main namespace
    for EF Core, make the class inherit from `DbContext` , and in an `OnConfiguring`
    method, check the `provider` field to either use SQLite or SQL Server, as shown
    in the following code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.cs`中，定义一个名为`Northwind`的类，导入EF Core的主要命名空间，使该类继承自`DbContext`，并在`OnConfiguring`方法中，检查`provider`字段以使用SQLite或SQL
    Server，如下所示：
- en: '```cs'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore; // DbContext, DbContextOptionsBuilder
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // DbContext, DbContextOptionsBuilder
- en: using
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: namespace
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: // this manages the connection to the database
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: // 这管理对数据库的连接
- en: public
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Northwind
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: ': DbContext'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ': DbContext'
- en: '{'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: protected
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnConfiguring
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (ProjectConstants.DatabaseProvider == "SQLite"
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: (ProjectConstants.DatabaseProvider == "SQLite"
- en: )
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: path = Path.Combine(
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 路径 = Path.Combine(
- en: Environment.CurrentDirectory, "Northwind.db"
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Environment.CurrentDirectory, "Northwind.db"
- en: );
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Using
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: '{path}'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '{路径}'
- en: database file."
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库文件。"
- en: );
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: optionsBuilder.UseSqlite($"Filename=
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlite($"Filename=
- en: '{path}'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '{路径}'
- en: '"'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: connection = "Data Source=.;"
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 连接 = "Data Source=.;"
- en: +
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: +
- en: '"Initial Catalog=Northwind;"'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '"Initial Catalog=Northwind;"'
- en: +
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: +
- en: '"Integrated Security=true;"'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '"Integrated Security=true;"'
- en: +
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: +
- en: '"MultipleActiveResultSets=true;"'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '"MultipleActiveResultSets=true;"'
- en: ;
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: optionsBuilder.UseSqlServer(connection);
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlServer(connection);
- en: '}'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you are using Visual Studio for Windows, then the compiled application executes
    in the `WorkingWithEFCore\bin\Debug\net6.0` folder so it will not find the database
    file.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Windows的Visual Studio，则编译的应用程序将在`WorkingWithEFCore\bin\Debug\net6.0`文件夹中执行，因此它将无法找到数据库文件。
- en: In **Solution Explorer** , right-click the `Northwind.db` file and select **Properties**
    .
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击`Northwind.db`文件，然后选择**属性**。
- en: In **Properties** , set **Copy to Output Directory** to **Copy always** .
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**中，将**复制到输出目录**设置为**始终复制**。
- en: 'Open `WorkingWithEFCore.csproj` and note the new elements, as shown in the
    following markup:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`WorkingWithEFCore.csproj`，注意新元素，如下标记所示：
- en: '```cs'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <ItemGroup>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <ItemGroup>
- en: <None Update="Northwind.db"
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <None Update="Northwind.db"
- en: '>'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: <CopyToOutputDirectory>Always</CopyToOutputDirectory>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <CopyToOutputDirectory>Always</CopyToOutputDirectory>
- en: </None>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: </None>
- en: </ItemGroup>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: </ItemGroup>
- en: '```'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you are using Visual Studio Code, then the compiled application executes
    in the `WorkingWithEFCore` folder so it will find the database file without it
    being copied.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Visual Studio Code，则编译的应用程序将在`WorkingWithEFCore`文件夹中执行，因此它将在不复制的情况下找到数据库文件。
- en: Run the console application and note the output showing which database provider
    you chose to use.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并注意输出显示您选择使用的数据库提供程序。
- en: Defining EF Core models
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义EF Core模型
- en: EF Core uses a combination of **conventions** , **annotation attributes** ,
    and **Fluent API** statements to build an entity model at runtime so that any
    actions performed on the classes can later be automatically translated into actions
    performed on the actual database. An entity class represents the structure of
    a table and an instance of the class represents a row in that table.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core使用**约定**、**注释属性**和**Fluent API**语句的组合在运行时构建实体模型，以便对类执行的任何操作后来可以自动转换为对实际数据库执行的操作。实体类表示表的结构，类的实例表示该表中的一行。
- en: First, we will review the three ways to define a model, with code examples,
    and then we will create some classes that implement those techniques.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将回顾三种定义模型的方法，附带代码示例，然后我们将创建一些实现这些技术的类。
- en: Using EF Core conventions to define the model
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EF Core约定来定义模型
- en: 'The code we will write will use the following conventions:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的代码将使用以下约定：
- en: The name of a table is assumed to match the name of a `DbSet<T>` property in
    the `DbContext` class, for example, `Products` .
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表的名称假定与`DbContext`类中的`DbSet<T>`属性的名称匹配，例如`Products`。
- en: The names of the columns are assumed to match the names of properties in the
    entity model class, for example, `ProductId` .
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列的名称假定与实体模型类中的属性名称匹配，例如`ProductId`。
- en: The `string` .NET type is assumed to be a `nvarchar` type in the database.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假定`string` .NET类型在数据库中是`nvarchar`类型。
- en: The `int` .NET type is assumed to be an `int` type in the database.
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假定`int` .NET类型在数据库中是`int`类型。
- en: The primary key is assumed to be a property that is named `Id` or `ID` , or
    when the entity model class is named `Product` , then the property can be named
    `ProductId` or `ProductID` . If this property is an integer type or the `Guid`
    type, then it is also assumed to be an `IDENTITY` column (a column type that automatically
    assigns a value when inserting).
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键被假定为命名为`Id`或`ID`的属性，或者当实体模型类命名为`Product`时，属性可以命名为`ProductId`或`ProductID`。如果此属性是整数类型或`Guid`类型，则还假定它是一个`IDENTITY`列（在插入时自动分配值的列类型）。
- en: '**Good Practice** : There are many other conventions that you should know,
    and you can even define your own, but that is beyond the scope of this book. You
    can read about them at the following link: [https://docs.microsoft.com/en-us/ef/core/modeling/](https://docs.microsoft.com/en-us/ef/core/modeling/)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：还有许多其他约定，您可以甚至定义自己的约定，但这超出了本书的范围。您可以在以下链接阅读有关它们的信息：[https://docs.microsoft.com/en-us/ef/core/modeling/](https://docs.microsoft.com/en-us/ef/core/modeling/)'
- en: Using EF Core annotation attributes to define the model
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EF Core注释属性定义模型
- en: Conventions often aren't enough to completely map the classes to the database
    objects. A simple way of adding more smarts to your model is to apply annotation
    attributes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 常规通常不足以完全将类映射到数据库对象。向模型添加更多智能的简单方法是应用注释属性。
- en: 'Some common attributes are shown in the following table:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的属性如下表所示：
- en: '| Attribute | Description |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| `[Required]` | Ensures the value is not `null` . |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `[Required]` | 确保值不为`null`。|'
- en: '| `[StringLength(50)]` | Ensures the value is up to 50 characters in length.
    |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `[StringLength(50)]` | 确保值的长度最多为50个字符。|'
- en: '| `[RegularExpression(expression)]` | Ensures the value matches the specified
    regular expression. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `[RegularExpression(expression)]` | 确保值与指定的正则表达式匹配。|'
- en: '| `[Column(TypeName = "money", Name = "UnitPrice")]` | Specifies the column
    type and column name used in the table. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `[Column(TypeName = "money", Name = "UnitPrice")]` | 指定表中使用的列类型和列名。|'
- en: 'For example, in the database, the maximum length of a product name is 40, and
    the value cannot be null, as shown highlighted in the following **Data Definition
    Language** (**DDL** ) code that defines how to create a table named `Products`
    with its columns, data types, keys, and other constraints:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数据库中，产品名称的最大长度为40，且值不能为空，如下所示在以下**数据定义语言**（**DDL**）代码中突出显示的定义了如何创建名为`Products`的表及其列、数据类型、键和其他约束：
- en: '```cs'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: CREATE
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 创建
- en: TABLE
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: Products (
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 产品 (
- en: ProductId       INTEGER
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 产品编号 整数
- en: PRIMARY KEY
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 主键
- en: ','
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: ProductName     NVARCHAR
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 产品名称 NVARCHAR
- en: (40
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: (40
- en: ) NOT
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: ) 不
- en: 'NULL'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ','
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: SupplierId      "INT"
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商编号 "INT"
- en: ','
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: CategoryId      "INT"
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 类别编号 "INT"
- en: ','
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: QuantityPerUnit NVARCHAR
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 每单位数量 NVARCHAR
- en: (20
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: (20
- en: ),
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: UnitPrice       "MONEY"
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 单价 "货币"
- en: CONSTRAINT
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: DF_Products_UnitPrice DEFAULT
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: DF_Products_UnitPrice 默认
- en: (0
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: ),
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: UnitsInStock    "SMALLINT"
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 库存 "SMALLINT"
- en: CONSTRAINT
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: DF_Products_UnitsInStock DEFAULT
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: DF_Products_UnitsInStock 默认
- en: (0
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: ),
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: UnitsOnOrder    "SMALLINT"
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 订购单位 "SMALLINT"
- en: CONSTRAINT
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: DF_Products_UnitsOnOrder DEFAULT
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: DF_Products_UnitsOnOrder 默认
- en: (0
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: ),
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: ReorderLevel    "SMALLINT"
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 订货水平 "SMALLINT"
- en: CONSTRAINT
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: DF_Products_ReorderLevel DEFAULT
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: DF_Products_ReorderLevel 默认
- en: (0
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: ),
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: Discontinued    "BIT"
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 已停产 "位"
- en: NOT
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 不
- en: 'NULL'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: CONSTRAINT
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: DF_Products_Discontinued DEFAULT
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: DF_Products_Discontinued 默认
- en: (0
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: (0
- en: ),
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: CONSTRAINT
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: FK_Products_Categories FOREIGN
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: FK_Products_Categories 外键
- en: KEY
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: (
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: CategoryId
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 类别编号
- en: )
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: REFERENCES
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 引用
- en: Categories (CategoryId),
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 (类别编号),
- en: CONSTRAINT
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: FK_Products_Suppliers FOREIGN
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: FK_Products_Suppliers 外键
- en: KEY
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 键
- en: (
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: SupplierId
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商编号
- en: )
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: REFERENCES
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 引用
- en: Suppliers (SupplierId),
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商 (供应商编号),
- en: CONSTRAINT
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: CK_Products_UnitPrice CHECK
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: CK_Products_UnitPrice 检查
- en: (UnitPrice >= 0
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: (单价 >= 0
- en: ),
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: CONSTRAINT
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: CK_ReorderLevel CHECK
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: CK_ReorderLevel 检查
- en: (ReorderLevel >= 0
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: (订货水平 >= 0
- en: ),
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: CONSTRAINT
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: CK_UnitsInStock CHECK
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: CK_UnitsInStock 检查
- en: (UnitsInStock >= 0
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: (库存单位 >= 0
- en: ),
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: ),
- en: CONSTRAINT
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 约束
- en: CK_UnitsOnOrder CHECK
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: CK_UnitsOnOrder 检查
- en: (UnitsOnOrder >= 0
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: (订购单位 >= 0
- en: )
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: );
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In a `Product` class, we could apply attributes to specify this, as shown in
    the following code:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Product`类中，我们可以应用属性来指定这一点，如下代码所示：
- en: '```cs'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Required'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 必需
- en: ']'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(40)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(40)'
- en: ']'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: ProductName { get
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 产品名称 { 获取
- en: ; set
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: When there isn't an obvious map between .NET types and database types, an attribute
    can be used.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当.NET类型和数据库类型之间没有明显的映射时，可以使用属性。
- en: 'For example, in the database, the column type of `UnitPrice` for the `Products`
    table is `money` . .NET does not have a `money` type, so it should use `decimal`
    instead, as shown in the following code:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数据库中，`Products`表的`UnitPrice`列类型为`money`。.NET没有`money`类型，因此应改用`decimal`，如下代码所示：
- en: '```cs'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Column(TypeName ='
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"money"'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '"money"'
- en: )
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: decimal
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 小数
- en: '? UnitPrice { get'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '? 单价 { 获取'
- en: ; set
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Another example is for the `Categories` table, as shown in the following DDL
    code:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是`Categories`表，如下DDL代码所示：
- en: '```cs'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: CREATE
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 创建
- en: TABLE
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: Categories (
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 (
- en: CategoryId   INTEGER
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 类别ID 整数
- en: PRIMARY KEY
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 主键
- en: ','
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: CategoryName NVARCHAR
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 类别名称 NVARCHAR
- en: (15
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: (15
- en: ) NOT
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: ) 不
- en: 'NULL'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ','
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Description  "NTEXT"
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 "NTEXT"
- en: ','
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Picture      "IMAGE"
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图片 "图像"
- en: );
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'The `Description` column can be longer than the maximum 8,000 characters that
    can be stored in a `nvarchar` variable, so it needs to map to `ntext` instead,
    as shown in the following code:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: “描述”列的长度可以超过存储在`nvarchar`变量中的最大8000个字符，因此需要映射到`ntext`，如下代码所示：
- en: '```cs'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '[Column(TypeName ='
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"ntext"'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '"ntext"'
- en: )
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: Description { get
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 { 获取
- en: ; set
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: ; 设置
- en: ; }
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '```'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Using the EF Core Fluent API to define the model
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用EF Core Fluent API定义模型
- en: 'The last way that the model can be defined is by using the Fluent API. This
    API can be used instead of attributes, as well as being used in addition to them.
    For example, to define the `ProductName` property, instead of decorating the property
    with two attributes, an equivalent Fluent API statement could be written in the
    `OnModelCreating` method of the database context class, as shown in the following
    code:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 定义模型的最后一种方法是使用Fluent API。 此API可以用于替代属性，也可以与属性一起使用。 例如，要定义`ProductName`属性，可以在数据库上下文类的`OnModelCreating`方法中编写等效的Fluent
    API语句，而不是用两个属性装饰属性，如下所示的代码：
- en: '```cs'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: modelBuilder.Entity<Product>()
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>()
- en: .Property(product => product.ProductName)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: .Property(product => product.ProductName)
- en: .IsRequired()
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: .IsRequired()
- en: .HasMaxLength(40
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: .HasMaxLength(40
- en: );
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: This keeps the entity model class simpler.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 这使实体模型类更简单。
- en: Understanding data seeding with the Fluent API
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Fluent API理解数据种植
- en: Another benefit of the Fluent API is to provide initial data to populate a database.
    EF Core automatically works out what insert, update, or delete operations must
    be executed.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: Fluent API的另一个好处是提供初始数据以填充数据库。 EF Core会自动计算必须执行的插入，更新或删除操作。
- en: 'For example, if we wanted to make sure that a new database has at least one
    row in the `Product` table, then we would call the `HasData` method, as shown
    in the following code:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想确保新数据库中的`Product`表至少有一行，则我们将调用`HasData`方法，如下所示的代码：
- en: '```cs'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: modelBuilder.Entity<Product>()
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>()
- en: .HasData(new
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: .HasData(new
- en: Product
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 产品
- en: '{'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ProductId = 1
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: ProductId = 1
- en: ','
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: ProductName = "Chai"
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: ProductName = "Chai"
- en: ','
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: UnitPrice = 8.99
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: UnitPrice = 8.99
- en: M
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: M
- en: '});'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '```'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Our model will map to an existing database that is already populated with data
    so we will not need to use this technique in our code.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型将映射到已经填充了数据的现有数据库，因此我们不需要在我们的代码中使用这种技术。
- en: Building an EF Core model for the Northwind tables
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为`Northwind`表构建EF Core模型
- en: Now that you've learned about ways to define an EF Core model, let's build a
    model to represent two tables in the `Northwind` database.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了定义EF Core模型的方法，让我们构建一个模型来表示`Northwind`数据库中的两个表。
- en: 'The two entity classes will refer to each other, so to avoid compiler errors,
    we will create the classes without any members first:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个实体类将相互引用，因此为了避免编译器错误，我们将首先创建没有任何成员的类：
- en: In the `WorkingWithEFCore` project, add two class files named `Category.cs`
    and `Product.cs` .
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`项目中，添加两个名为`Category.cs`和`Product.cs`的类文件。
- en: 'In `Category.cs` , define a class named `Category` , as shown in the following
    code:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，定义一个名为`Category`的类，如下所示的代码：
- en: '```cs'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Category
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 类别
- en: '{'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Product.cs` , define a class named `Product` , as shown in the following
    code:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，定义一个名为`Product`的类，如下所示的代码：
- en: '```cs'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Product
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 产品
- en: '{'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Defining the Category and Product entity classes
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义类别和产品实体类
- en: 'The `Category` class, also known as an entity model, will be used to represent
    a row in the `Categories` table. This table has four columns, as shown in the
    following DDL:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`Category`类，也称为实体模型，将用于表示`Categories`表中的一行。 此表有四列，如下所示的DDL：'
- en: '```cs'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: CREATE
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 创建
- en: TABLE
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: Categories (
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 (
- en: CategoryId   INTEGER
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId   INTEGER
- en: PRIMARY KEY
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 主键
- en: ','
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: CategoryName NVARCHAR
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName NVARCHAR
- en: (15
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: （15
- en: ) NOT
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: ）NOT
- en: 'NULL'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 'NULL'
- en: ','
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Description  "NTEXT"
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 描述  "NTEXT"
- en: ','
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Picture      "IMAGE"
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 图片      "图像"
- en: );
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'We will use conventions to define:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用约定来定义：
- en: Three of the four properties (we will not map the `Picture` column).
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个属性中的三个（我们不会映射`Picture`列）。
- en: The primary key.
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键。
- en: The one-to-many relationship to the `Products` table.
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到`Products`表的一对多关系。
- en: To map the `Description` column to the correct database type, we will need to
    decorate the `string` property with the `Column` attribute.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`Description`列映射到正确的数据库类型，我们需要使用`Column`属性装饰`字符串`属性。
- en: Later in this chapter, we will use the Fluent API to define that `CategoryName`
    cannot be null and is limited to a maximum of 15 characters.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将使用Fluent API来定义`CategoryName`不能为空，并且最多为15个字符。
- en: 'Let''s go:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'Modify the `Category` entity model class, as shown in the following code:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Category`实体模型类，如下所示的代码：
- en: '```cs'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: System.ComponentModel.DataAnnotations.Schema; // [Column]
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations.Schema; // [Column]
- en: namespace
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: class
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: Category
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: Category
- en: '{'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // these properties map to columns in the database
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: //这些属性映射到数据库中的列
- en: public
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: int
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: CategoryId { get
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId {获取
- en: ; set
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? CategoryName { get'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: ？CategoryName {获取
- en: ; set
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Column(TypeName ='
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"ntext"'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '"ntext"'
- en: )
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: ']'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: string
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? Description { get'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: ？描述 {获取
- en: ; set
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // defines a navigation property for related rows
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: //为相关行定义导航属性
- en: public
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: virtual
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟
- en: ICollection<Product> Products { get
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<Product> Products {获取
- en: ; set
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 公共
- en: Category
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 类别
- en: ()
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // to enable developers to add products to a Category we must
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: // 以便开发人员可以将产品添加到类别，我们必须
- en: // initialize the navigation property to an empty collection
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: //将导航属性初始化为空集合
- en: Products = new
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: Products = new
- en: HashSet<Product>();
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: HashSet<Product>();
- en: '}'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The `Product` class will be used to represent a row in the `Products` table,
    which has ten columns.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product`类将用于表示`Products`表中的一行，该表有十列。'
- en: 'You do not need to include all columns from a table as properties of a class.
    We will only map six properties: `ProductId` , `ProductName` , `UnitPrice` , `UnitsInStock`
    , `Discontinued` , and `CategoryId` .'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要将表中的所有列包括在类的属性中。 我们只会映射六个属性：`ProductId`，`ProductName`，`UnitPrice`，`UnitsInStock`，`Discontinued`和`CategoryId`。
- en: Columns that are not mapped to properties cannot be read or set using the class
    instances. If you use the class to create a new object, then the new row in the
    table will have `NULL` or some other default value for the unmapped column values
    in that row. You must make sure that those missing columns are optional or have
    default values set by the database or an exception will be thrown at runtime.
    In this scenario, the rows already have data values and I have decided that I
    do not need to read those values in this application.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '15'
- en: We can rename a column by defining a property with a different name, like `Cost`
    , and then decorating the property with the `[Column]` attribute and specifying
    its column name, like `UnitPrice` .
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过定义具有不同名称的属性（如`Cost`）来重命名列，然后使用`[Column]`属性装饰该属性并指定其列名（如`UnitPrice`）。
- en: The final property, `CategoryId` , is associated with a `Category` property
    that will be used to map each product to its parent category.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个属性`CategoryId`与将用于将每个产品映射到其父类别的`Category`属性相关联。
- en: 'Modify the `Product` class, as shown in the following code:'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下代码修改`Product`类：
- en: '```cs'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.ComponentModel.DataAnnotations; // [Required], [StringLength]
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations; // [Required], [StringLength]
- en: using
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.ComponentModel.DataAnnotations.Schema; // [Column]
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations.Schema; // [Column]
- en: namespace
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: Packt.Shared
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Product
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: Product
- en: '{'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: ProductId { get
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: ProductId { get
- en: ; set
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } // primary key
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: ; } // 主键
- en: '[Required'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: ']'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(40)'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(40)'
- en: ']'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: ProductName { get
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: ProductName { get
- en: ; set
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '!;'
- en: '[Column('
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column('
- en: '"UnitPrice"'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '"UnitPrice"'
- en: ', TypeName ='
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: ', TypeName ='
- en: '"money"'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '"money"'
- en: )
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: decimal
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? Cost { get'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '? Cost { get'
- en: ; set
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } // property name != column name
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: ; } // 属性名称！=列名称
- en: '[Column('
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column('
- en: '"UnitsInStock"'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '"UnitsInStock"'
- en: )
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: short
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: short
- en: '? Stock { get'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '? Stock { get'
- en: ; set
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: bool
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: Discontinued { get
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: Discontinued { get
- en: ; set
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: // these two define the foreign key relationship
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: // 这两个定义了外键关系
- en: // to the Categories table
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: // 到Categories表
- en: public
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: CategoryId { get
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId { get
- en: ; set
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 不映射到属性的列不能使用类实例读取或设置。如果使用该类创建新对象，则表中的新行将具有该行中未映射列的`NULL`或其他默认值。您必须确保这些缺失的列是可选的，或者由数据库设置默认值，否则将在运行时引发异常。在这种情况下，行已经具有数据值，我决定在此应用程序中不需要读取这些值。
- en: virtual
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: virtual
- en: Category Category { get
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: Category Category { get
- en: ; set
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '!;'
- en: '}'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: The two properties that relate the two entities, `Category.Products` and `Product.Category`
    , are both marked as `virtual` . This allows EF Core to inherit and override the
    properties to provide extra features, such as lazy loading.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 两个实体相关的两个属性，`Category.Products`和`Product.Category`，都标记为`virtual`。这允许EF Core继承和重写属性，以提供额外的功能，如延迟加载。
- en: Adding tables to the Northwind database context class
  id: totrans-662
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加表到Northwind数据库上下文类
- en: Inside your `DbContext` -derived class, you must define at least one property
    of the `DbSet<T>` type. These properties represent the tables. To tell EF Core
    what columns each table has, the `DbSet<T>` properties use generics to specify
    a class that represents a row in the table. That entity model class has properties
    that represent its columns.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 在派生自`DbContext`的类中，您必须至少定义一个`DbSet<T>`类型的属性。这些属性表示表。为了告诉EF Core每个表有哪些列，`DbSet<T>`属性使用泛型来指定表示表中行的类。该实体模型类具有表示其列的属性。
- en: The `DbContext` -derived class can optionally have an overridden method named
    `OnModelCreating` . This is where you can write Fluent API statements as an alternative
    to decorating your entity classes with attributes.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 派生自`DbContext`的类可以选择具有名为`OnModelCreating`的重写方法。这是您可以编写Fluent API语句的地方，作为在实体类上使用属性的替代方法。
- en: 'Let''s write some code:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些代码：
- en: 'Modify the `Northwind` class to add statements to define two properties for
    the two tables and an `OnModelCreating` method, as shown highlighted in the following
    code:'
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下代码的高亮部分修改`Northwind`类，以定义两个表的两个属性和一个`OnModelCreating`方法：
- en: '```cs'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Northwind
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: ': DbContext'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: ': DbContext'
- en: '{'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**// these properties map to tables in the database**'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: // 这些属性映射到数据库中的表
- en: '**public**'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: '**DbSet<Category>? Categories {**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Category>? Categories {
- en: '**get**'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: get
- en: '**;**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '**set**'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: set
- en: '**; }**'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '**'
- en: '**public**'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: '**DbSet<Product>? Products {**'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Product>? Products {
- en: '**get**'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: get
- en: '**;**'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '**set**'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: set
- en: '**; }**'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: protected
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: override
- en: void
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnConfiguring
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: '}'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**protected**'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 保护
- en: '**override**'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: override
- en: '**void**'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: '**OnModelCreating**'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '**(**'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: （
- en: '**ModelBuilder modelBuilder**'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: '**)**'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: ）**
- en: '**{**'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**// example of using Fluent API instead of attributes**'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用Fluent API而不是属性的示例
- en: '**// to limit the length of a category name to 15**'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: // 限制类别名称的长度为15
- en: '**modelBuilder.Entity<Category>()**'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Category>()
- en: '**.Property(category => category.CategoryName)**'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: .Property(category => category.CategoryName)
- en: '**.IsRequired()**'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: .IsRequired()
- en: '**// NOT NULL**'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: // 非空
- en: '**.HasMaxLength(**'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: .HasMaxLength(
- en: '**15**'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: .HasConversion<
- en: '**);**'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '**if**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: '**(ProjectConstants.DatabaseProvider ==**'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: (ProjectConstants.DatabaseProvider ==
- en: '**"SQLite"**'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '"SQLite"'
- en: '**)**'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '**）**'
- en: '**{**'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**// added to "fix" the lack of decimal support in SQLite**'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: // 添加以“修复”SQLite中对decimal的支持不足
- en: '**modelBuilder.Entity<Product>()**'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>()
- en: '**.Property(product => product.Cost)**'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: .Property(product => product.Cost)
- en: '**.HasConversion<**'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '[Required'
- en: '**double**'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: double
- en: '**>();**'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '**>();**'
- en: '**}**'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**}**'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '}'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In EF Core 3.0 and later, the `decimal` type is not supported by the SQLite
    database provider for sorting and other operations. We can fix this by telling
    the model that `decimal` values can be converted to `double` values when using
    the SQLite database provider. This does not actually perform any conversion at
    runtime.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 在EF Core 3.0及更高版本中，SQLite数据库提供程序不支持`decimal`类型进行排序和其他操作。我们可以通过告诉模型，在使用SQLite数据库提供程序时，`decimal`值可以转换为`double`值来解决这个问题。这实际上并不会在运行时执行任何转换。
- en: Now that you have seen some examples of defining an entity model manually, let's
    see a tool that can do some of the work for you.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了一些手动定义实体模型的示例，让我们看看一个可以为您完成部分工作的工具。
- en: Setting up the dotnet-ef tool
  id: totrans-730
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置dotnet-ef工具
- en: .NET has a command-line tool named `dotnet` . It can be extended with capabilities
    useful for working with EF Core. It can perform design-time tasks like creating
    and applying migrations from an older model to a newer model and generating code
    for a model from an existing database.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: .NET有一个名为`dotnet`的命令行工具。它可以扩展为对EF Core有用的功能。它可以执行设计时任务，如从旧模型创建和应用迁移到新模型，并从现有数据库生成模型的代码。
- en: 'The `dotnet` `ef` command-line tool is not automatically installed. You have
    to install this package as either a **global** or **local tool** . If you have
    already installed an older version of the tool, then you should uninstall any
    existing version:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet` `ef`命令行工具不会自动安装。您必须将此包安装为**全局**或**本地工具**。如果您已安装了旧版本的工具，则应卸载任何现有版本：'
- en: 'At a command prompt or terminal, check if you have already installed `dotnet-ef`
    as a global tool, as shown in the following command:'
  id: totrans-733
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，检查是否已将`dotnet-ef`作为全局工具安装，如下所示：
- en: '```cs'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet tool list --global
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet tool list --global
- en: '```'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Check in the list if an older version of the tool has been installed, like
    the one for .NET Core 3.1, as shown in the following output:'
  id: totrans-737
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查列表中是否已安装了旧版本的工具，例如.NET Core 3.1的版本，如下所示：
- en: '```cs'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Package Id      Version     Commands
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 包Id 版本 命令
- en: '-------------------------------------'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '-------------------------------------'
- en: dotnet-ef       3.1.0       dotnet-ef
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet-ef       3.1.0       dotnet-ef
- en: '```'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'If an old version is already installed, then uninstall the tool, as shown in
    the following command:'
  id: totrans-743
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果已安装旧版本，请使用以下命令卸载该工具：
- en: '```cs'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet tool uninstall --global dotnet-ef
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet tool uninstall --global dotnet-ef
- en: '```'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Install the latest version, as shown in the following command:'
  id: totrans-747
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装最新版本，如下所示：
- en: '```cs'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet tool install --global dotnet-ef --version 6.0.0
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet tool install --global dotnet-ef --version 6.0.0
- en: '```'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If necessary, follow any OS-specific instructions to add the `dotnet tools`
    directory to your PATH environment variable as described in the output of installing
    the `dotnet-ef` tool.
  id: totrans-751
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，请按照任何特定于操作系统的说明将`dotnet tools`目录添加到您的PATH环境变量中，如在安装`dotnet-ef`工具的输出中所述。
- en: Scaffolding models using an existing database
  id: totrans-752
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用现有数据库搭建模型
- en: Scaffolding is the process of using a tool to create classes that represent
    the model of an existing database using reverse engineering. A good scaffolding
    tool allows you to extend the automatically generated classes and then regenerate
    those classes without losing your extended classes.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 脚手架是使用工具进行反向工程创建表示现有数据库模型的类的过程。一个好的脚手架工具允许您扩展自动生成的类，然后重新生成这些类而不会丢失您的扩展类。
- en: If you know that you will never regenerate the classes using the tool, then
    feel free to change the code for the automatically generated classes as much as
    you want. The code generated by the tool is just the best approximation.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道永远不会使用该工具重新生成类，则可以随意更改自动生成的类的代码。工具生成的代码只是最佳近似值。
- en: '**Good Practice** : Do not be afraid to overrule a tool when you know better.'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当您知道得更好时，不要害怕否决工具。'
- en: 'Let''s see if the tool generates the same model as we did manually:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看该工具是否生成了与我们手动生成的模型相同的模型：
- en: Add the `Microsoft.EntityFrameworkCore.Design` package to the `WorkingWithEFCore`
    project.
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Microsoft.EntityFrameworkCore.Design`包添加到`WorkingWithEFCore`项目中。
- en: 'At a command prompt or terminal in the `WorkingWithEFCore` folder, generate
    a model for the `Categories` and `Products` tables in a new folder named `AutoGenModels`
    , as shown in the following command:'
  id: totrans-758
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`WorkingWithEFCore`文件夹的命令提示符或终端中，生成一个名为`AutoGenModels`的新文件夹中的`Categories`和`Products`表的模型，如下命令所示：
- en: '```cs'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet ef dbcontext scaffold "Filename=Northwind.db" Microsoft.EntityFrameworkCore.Sqlite
    --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen
    --data-annotations --context Northwind
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet ef dbcontext scaffold "Filename=Northwind.db" Microsoft.EntityFrameworkCore.Sqlite
    --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen
    --data-annotations --context Northwind
- en: '```'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: 'The command action: `dbcontext scaffold`'
  id: totrans-763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令操作：`dbcontext scaffold`
- en: 'The connection string: `"Filename=Northwind.db"`'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串：`"Filename=Northwind.db"`
- en: 'The database provider: `Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.Sqlite`
- en: 'The tables to generate models for: `--table Categories --table Products`'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要生成模型的表：`--table Categories --table Products`
- en: 'The output folder: `--output-dir AutoGenModels`'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出文件夹：`--output-dir AutoGenModels`
- en: 'The namespace: `--namespace WorkingWithEFCore.AutoGen`'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace WorkingWithEFCore.AutoGen`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用数据注释以及Fluent API：`--data-annotations`
- en: 'To rename the context from [database_name]Context: `--context Northwind`'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将上下文从[database_name]Context重命名为：`--context Northwind`
- en: 'For SQL Server, change the database provider and connection string, as shown
    in the following command:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL Server，请更改数据库提供程序和连接字符串，如下所示：
- en: '```cs'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet ef dbcontext scaffold "Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;" Microsoft.EntityFrameworkCore.SqlServer --table Categories --table
    Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations
    --context Northwind
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet ef dbcontext scaffold "Data Source=.;Initial Catalog=Northwind;Integrated
    Security=true;" Microsoft.EntityFrameworkCore.SqlServer --table Categories --table
    Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations
    --context Northwind
- en: '```'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the build messages and warnings, as shown in the following output:'
  id: totrans-775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意构建消息和警告，如下所示：
- en: '```cs'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Build started...
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 构建开始...
- en: Build succeeded.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 构建成功。
- en: To protect potentially sensitive information in your connection string, you
    should move it out of source code. You can avoid scaffolding the connection string
    by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\.
    For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护可能包含敏感信息的连接字符串，您应该将其移出源代码。您可以通过使用Name=语法从配置中读取它来避免脚手架连接字符串 - 请参阅https://go.microsoft.com/fwlink/?linkid=2131148。有关存储连接字符串的更多指导，请参阅http://go.microsoft.com/fwlink/?LinkId=723263。
- en: Skipping foreign key with identity '0' on table 'Products' since principal table
    'Suppliers' was not found in the model. This usually happens when the principal
    table was not included in the selection set.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型中找不到主表“Suppliers”，因此跳过了表“Products”上的标识为“0”的外键。这通常发生在未在选择集中包含主表时。
- en: '```'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Open the `AutoGenModels` folder and note the three class files that were automatically
    generated: `Category.cs` , `Northwind.cs` , and `Product.cs` .'
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“AutoGenModels”文件夹，注意自动生成的三个类文件：`Category.cs`，`Northwind.cs`和`Product.cs`。
- en: 'Open `Category.cs` and note the differences compared to the one you created
    manually, as shown in the following code:'
  id: totrans-783
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Category.cs`，注意与手动创建的文件的区别，如下面的代码所示：
- en: '```cs'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System;
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: System;
- en: using
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.Collections.Generic;
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: System.Collections.Generic;
- en: using
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.ComponentModel.DataAnnotations;
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations;
- en: using
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.ComponentModel.DataAnnotations.Schema;
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations.Schema;
- en: using
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore;
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore;
- en: namespace
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: WorkingWithEFCore.AutoGen
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithEFCore.AutoGen
- en: '{'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '[Index(nameof(CategoryName), Name ='
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: '[Index(nameof(CategoryName), Name ='
- en: '"CategoryName"'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '"CategoryName"'
- en: )
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: partial
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: partial
- en: class
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Category
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: Category
- en: '{'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Category
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: Category
- en: ()
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Products = new
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: Products = new
- en: HashSet<Product>();
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: HashSet<Product>();
- en: '}'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[Key'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '[Key'
- en: ']'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: long
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: long
- en: CategoryId { get
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId { get
- en: ; set
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Required'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '[Required'
- en: ']'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[Column(TypeName ='
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"nvarchar (15)"'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '"nvarchar (15)"'
- en: )
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '] // SQLite'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '] // SQLite'
- en: '[StringLength(15)'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(15)'
- en: '] // SQL Server'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '] // SQL Server'
- en: public
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: CategoryName { get
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryName { get
- en: ; set
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Column(TypeName ='
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"ntext"'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '"ntext"'
- en: )
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? Description { get'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '? Description { get'
- en: ; set
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Column(TypeName ='
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '[Column(TypeName ='
- en: '"image"'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '"image"'
- en: )
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ']'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: byte
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: byte
- en: '[]? Picture { get'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '[]? Picture { get'
- en: ; set
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[InverseProperty(nameof(Product.Category))'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '[InverseProperty(nameof(Product.Category))'
- en: ']'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: virtual
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: virtual
- en: ICollection<Product> Products { get
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<Product> Products { get
- en: ; set
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：
- en: It decorates the entity class with the `[Index]` attribute that was introduced
    in EF Core 5.0\. This indicates properties that should have an index. In earlier
    versions, only the Fluent API was supported for defining indexes. Since we are
    working with an existing database, this is not needed. But if we want to recreate
    a new empty database from our code then this information will be needed.
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用在EF Core 5.0中引入的`[Index]`属性装饰实体类。这表示应该具有索引的属性。在早期版本中，只支持使用Fluent API来定义索引。由于我们正在使用现有数据库，因此不需要这个。但是，如果我们想从我们的代码重新创建一个新的空数据库，那么这些信息将是必要的。
- en: The table name in the database is `Categories` but the `dotnet-ef` tool uses
    the **Humanizer** third-party library to automatically singularize the class name
    to `Category` , which is a more natural name when creating a single entity.
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库中的表名是`Categories`，但`dotnet-ef`工具使用**Humanizer**第三方库自动将类名单数化为`Category`，这在创建单个实体时是更自然的名称。
- en: The entity class is declared using the `partial` keyword so that you can create
    a matching `partial` class for adding additional code. This allows you to rerun
    the tool and regenerate the entity class without losing that extra code.
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体类使用`partial`关键字声明，以便您可以创建匹配的`partial`类以添加额外的代码。这允许您重新运行工具并重新生成实体类，而不会丢失额外的代码。
- en: The `CategoryId` property is decorated with the `[Key]` attribute to indicate
    that it is the primary key for this entity. The data type for this property is
    `int` for SQL Server and `long` for SQLite.
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CategoryId`属性使用`[Key]`属性装饰，表示它是此实体的主键。此属性的数据类型对于SQL Server是`int`，对于SQLite是`long`。'
- en: The `Products` property uses the `[InverseProperty]` attribute to define the
    foreign key relationship to the `Category` property on the `Product` entity class.
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Products”属性使用`[InverseProperty]`属性来定义与`Product`实体类上的`Category`属性的外键关系。
- en: Open `Product.cs` and note the differences compared to the one you created manually.
  id: totrans-868
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Product.cs`，注意与手动创建的文件的区别。
- en: 'Open `Northwind.cs` and note the differences compared to the one you created
    manually, as shown in the following edited-for-space code:'
  id: totrans-869
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Northwind.cs`，注意与手动创建的文件的区别，如下面编辑过的代码所示：
- en: '```cs'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore;
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore;
- en: namespace
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: WorkingWithEFCore.AutoGen
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: WorkingWithEFCore.AutoGen
- en: '{'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: partial
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: partial
- en: class
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Northwind
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: ': DbContext'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: ': DbContext'
- en: '{'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Northwind
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: ()
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: Northwind
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind
- en: (
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptions<Northwind> options
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptions<Northwind> options
- en: )
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ':'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: ':'
- en: base
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: base
- en: (
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: options
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: options
- en: )
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: virtual
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: virtual
- en: DbSet<Category> Categories { get
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Category> Categories { get
- en: ; set
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: ！;
- en: public
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: virtual
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: virtual
- en: DbSet<Product> Products { get
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Product> Products { get
- en: ; set
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; } = null
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: ; } = null
- en: '!;'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: ！;
- en: protected
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: override
- en: void
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnConfiguring
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: if
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (!optionsBuilder.IsConfigured)
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: (!optionsBuilder.IsConfigured)
- en: '{'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '#'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '#'
- en: warning
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: warning
- en: To protect potentially sensitive information in your connection string, you
    should move it out of source code. You can avoid scaffolding the connection string
    by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\.
    For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护可能包含敏感信息的连接字符串，您应该将其移出源代码。您可以通过使用Name=语法从配置中读取它来避免脚手架连接字符串 - 请参阅https://go.microsoft.com/fwlink/?linkid=2131148。有关存储连接字符串的更多指导，请参阅http://go.microsoft.com/fwlink/?LinkId=723263。
- en: optionsBuilder.UseSqlite("Filename=Northwind.db"
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlite("Filename=Northwind.db"
- en: );
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: protected
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的
- en: override
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: OnModelCreating
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: (
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelBuilder modelBuilder
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: modelBuilder.Entity<Category>(entity =>
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Category>(entity =>
- en: '{'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '});'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: modelBuilder.Entity<Product>(entity =>
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Product>(entity =>
- en: '{'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '});'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: OnModelCreatingPartial(modelBuilder);
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreatingPartial(modelBuilder);
- en: '}'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: partial
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 部分
- en: void
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: OnModelCreatingPartial
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreatingPartial
- en: (
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelBuilder modelBuilder
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: ;
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: The `Northwind` data context class is `partial` to allow you to extend it and
    regenerate it in the future.
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind`数据上下文类是`partial`的，允许您扩展它并在将来重新生成它。'
- en: 'It has two constructors: a default parameter-less one and one that allows options
    to be passed in. This is useful in apps where you want to specify the connection
    string at runtime.'
  id: totrans-959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有两个构造函数：一个默认的无参数构造函数，一个允许传入选项的构造函数。这在应用程序中很有用，您可以在运行时指定连接字符串。
- en: The two `DbSet<T>` properties that represent the `Categories` and `Products`
    tables are set to the `null` -forgiving value to prevent static compiler analysis
    warnings at compile time. It has no effect at runtime.
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表`Categories`和`Products`表的两个`DbSet<T>`属性被设置为`null`-forgiving值，以防止在编译时出现静态编译器分析警告。在运行时没有影响。
- en: In the `OnConfiguring` method, if options have not been specified in the constructor,
    then it defaults to using a connection string that looks for the database file
    in the current folder. It has a compiler warning to remind you that you should
    not hardcode security information in this connection string.
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`OnConfiguring`方法中，如果在构造函数中没有指定选项，则默认使用连接字符串，在当前文件夹中查找数据库文件。它有一个编译器警告，提醒您不要在此连接字符串中硬编码安全信息。
- en: In the `OnModelCreating` method, the Fluent API is used to configure the two
    entity classes, and then a partial method named `OnModelCreatingPartial` is invoked.
    This allows you to implement that partial method in your own partial `Northwind`
    class to add your own Fluent API configuration that will not be lost if you regenerate
    the model classes.
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`OnModelCreating`方法中，使用Fluent API配置了两个实体类，然后调用了一个名为`OnModelCreatingPartial`的部分方法。这允许您在自己的部分`Northwind`类中实现该部分方法，以添加您自己的Fluent
    API配置，如果重新生成模型类，这些配置将不会丢失。
- en: Close the automatically generated class files.
  id: totrans-963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭自动生成的类文件。
- en: Configuring preconvention models
  id: totrans-964
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置预约定模型
- en: Along with support for the `DateOnly` and `TimeOnly` types for use with the
    SQLite database provider, one of the new features introduced with EF Core 6 is
    configuring preconvention models.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 除了支持与SQLite数据库提供程序一起使用的`DateOnly`和`TimeOnly`类型之外，EF Core 6引入的新功能之一是配置预约定模型。
- en: As models become more complex, relying on conventions to discover entity types
    and their properties and successfully map them to tables and columns becomes harder.
    It would be useful if you could configure the conventions themselves before they
    are used to analyze and build a model.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 随着模型变得更加复杂，依靠约定来发现实体类型及其属性，并成功地将它们映射到表和列变得更加困难。如果您能在使用约定分析和构建模型之前配置约定本身，那将是非常有用的。
- en: 'For example, you might want to define a convention to say that all `string`
    properties should have a maximum length of 50 characters as a default, or any
    property types that implement a custom interface should not be mapped, as shown
    in the following code:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能希望定义一个约定，即所有`string`属性应默认具有最大长度为50个字符，或者实现自定义接口的任何属性类型不应被映射，如下面的代码所示：
- en: '```cs'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: protected
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的
- en: override
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: ConfigureConventions
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: ConfigureConventions
- en: (
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelConfigurationBuilder configurationBuilder
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: ModelConfigurationBuilder configurationBuilder
- en: )
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: configurationBuilder.Properties<string
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: configurationBuilder.Properties<string
- en: '>().HaveMaxLength(50'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '>().HaveMaxLength(50'
- en: );
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: configurationBuilder.IgnoreAny<IDoNotMap>();
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: configurationBuilder.IgnoreAny<IDoNotMap>();
- en: '}'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In the rest of this chapter, we will use the classes that you manually created.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的其余部分，我们将使用您手动创建的类。
- en: Querying EF Core models
  id: totrans-984
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询EF Core模型
- en: Now that we have a model that maps to the Northwind database and two of its
    tables, we can write some simple LINQ queries to fetch data. You will learn much
    more about writing LINQ queries in *Chapter 11* , *Querying and Manipulating Data
    Using LINQ* .
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个映射到Northwind数据库及其两个表的模型，我们可以编写一些简单的LINQ查询来获取数据。您将在*第11章*，*使用LINQ查询和操作数据*中学到更多关于编写LINQ查询的知识。
- en: 'For now, just write the code and view the results:'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需编写代码并查看结果：
- en: 'At the top of `Program.cs` , import the main EF Core namespace to enable the
    use of the `Include` extension method to prefetch from a related table:'
  id: totrans-987
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入主要的EF Core命名空间，以启用`Include`扩展方法从相关表中预取数据：
- en: '```cs'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore; // Include extension method
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // 包括扩展方法
- en: '```'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the bottom of `Program.cs` , define a `QueryingCategories` method, and add
    statements to do these tasks, as shown in the following code:'
  id: totrans-992
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，定义一个`QueryingCategories`方法，并添加语句来执行这些任务，如下面的代码所示：
- en: Create an instance of the `Northwind` class that will manage the database. Database
    context instances are designed for short lifetimes in a unit of work. They should
    be disposed of as soon as possible so we will wrap it in a `using` statement.
    In *Chapter 14* , *Building Websites Using ASP.NET Core Razor Pages* , you will
    learn how to get a database context using dependency injection.
  id: totrans-993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个将管理数据库的`Northwind`类的实例。数据库上下文实例设计为短暂的工作单元。它们应尽快被处理，因此我们将它包装在`using`语句中。在*第14章*，*使用ASP.NET
    Core Razor Pages构建网站*中，您将学习如何使用依赖注入获取数据库上下文。
- en: Create a query for all categories that include their related products.
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包含其相关产品的所有类别的查询。
- en: 'Enumerate through the categories, outputting the name and number of products
    for each one:'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举类别，输出每个类别的名称和产品数量：
- en: '```cs'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: QueryingCategories
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 查询类别
- en: ()
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Categories and how many products they have:"
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("类别及其拥有的产品数量："
- en: );
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: // a query to get all categories and their related products
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: //一个查询，获取所有类别及其相关产品
- en: IQueryable<Category>? categories = db.Categories?
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Category>?类别= db.Categories？
- en: .Include(c => c.Products);
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: .Include（c => c.Products）;
- en: if
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (categories is
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: （类别是
- en: 'null'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No categories found."
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“找不到类别。”
- en: );
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: return
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: '}'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // execute query and enumerate results
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: //执行查询并枚举结果
- en: foreach
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (Category c in
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: （类别c在
- en: categories)
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 类别）
- en: '{'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“
- en: '{c.CategoryName}'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.CategoryName}'
- en: has
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 有
- en: '{c.Products.Count}'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.Products.Count}'
- en: products."
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 产品。”
- en: );
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '}'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the top of `Program.cs` , after outputting the database provider name, call
    the `QueryingCategories` method, as shown highlighted in the following code:'
  id: totrans-1036
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，在输出数据库提供程序名称之后，调用`QueryingCategories`方法，如下面的代码中突出显示的那样：
- en: '```cs'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine($"Using
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“使用
- en: '{ProjectConstants.DatabaseProvider}'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '{ProjectConstants.DatabaseProvider}'
- en: database provider."
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库提供程序。”
- en: );
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '**QueryingCategories();**'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryingCategories（）;**'
- en: '```'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result (if run with Visual Studio 2022 for Windows
    using the SQLite database provider), as shown in the following output:'
  id: totrans-1044
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果（如果在Windows上使用SQLite数据库提供程序的Visual Studio 2022运行），如下面的输出所示：
- en: '```cs'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Using SQLite database provider.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLite数据库提供程序。
- en: 'Categories and how many products they have:'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 类别及其拥有的产品数量：
- en: Using C:\Code\Chapter10\WorkingWithEFCore\bin\Debug\net6.0\Northwind.db database
    file.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C：\ Code \ Chapter10 \ WorkingWithEFCore \ bin \ Debug \ net6.0 \ Northwind.db数据库文件。
- en: Beverages has 12 products.
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有12种产品。
- en: Condiments has 12 products.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 调味品有12种产品。
- en: Confections has 13 products.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 糖果有13种产品。
- en: Dairy Products has 10 products.
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 乳制品有10种产品。
- en: Grains/Cereals has 7 products.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 谷物/谷物有7种产品。
- en: Meat/Poultry has 6 products.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 肉类/家禽有6种产品。
- en: Produce has 5 products.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 生产有5种产品。
- en: Seafood has 12 products.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 海鲜有12种产品。
- en: '```'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If you run with Visual Studio Code using the SQLite database provider, then
    the path will be the `WorkingWithEFCore` folder. If you run using the SQL Server
    database provider, then there is no database file path output.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在使用SQLite数据库提供程序的Visual Studio Code中运行，则路径将是`WorkingWithEFCore`文件夹。如果您使用SQL
    Server数据库提供程序运行，则不会输出数据库文件路径。
- en: '**Warning!** If you see the following exception when using SQLite with Visual
    Studio 2022, the most likely problem is that the `Northwind.db` file is not being
    copied to the output directory. Make sure **Copy to Output Directory** is set
    to **Copy always** :'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**如果在使用Visual Studio 2022的SQLite时看到以下异常，最可能的问题是`Northwind.db`文件没有复制到输出目录。确保**始终复制**设置为**始终复制**：'
- en: '`Unhandled exception. Microsoft.Data.Sqlite.SqliteException (0x80004005): SQLite
    Error 1: ''no such table: Categories''.`'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: '`未处理的异常。Microsoft.Data.Sqlite.SqliteException（0x80004005）：SQLite错误1：''没有表：类别''。`'
- en: Filtering included entities
  id: totrans-1061
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包括实体的过滤
- en: 'EF Core 5.0 introduced **filtered includes** , which means you can specify
    a lambda expression in the `Include` method call to filter which entities are
    returned in the results:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 5.0引入了**过滤包含**，这意味着您可以在`Include`方法调用中指定lambda表达式，以过滤结果中返回的实体：
- en: 'At the bottom of `Program.cs` , define a `FilteredIncludes` method, and add
    statements to do these tasks, as shown in the following code:'
  id: totrans-1063
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，定义一个`FilteredIncludes`方法，并添加语句来执行这些任务，如下面的代码所示：
- en: Create an instance of the `Northwind` class that will manage the database.
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个将管理数据库的`Northwind`类的实例。
- en: Prompt the user to enter a minimum value for units in stock.
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示用户输入库存单位的最小值。
- en: Create a query for categories that have products with that minimum number of
    units in stock.
  id: totrans-1066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为具有库存单位最小数量的产品创建一个查询。
- en: 'Enumerate through the categories and products, outputting the name and units
    in stock for each one:'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举类别和产品，输出每个类别的名称和库存单位：
- en: '```cs'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 空
- en: FilteredIncludes
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: FilteredIncludes
- en: ()
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: （新风db =新
- en: ())
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write("Enter a minimum for units in stock: "'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: Write（“输入库存单位的最小值：”
- en: );
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: unitsInStock = ReadLine() ?? "10"
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: unitsInStock = ReadLine（）？？“10”
- en: ;
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: int
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: stock = int
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 库存= int
- en: .Parse(unitsInStock);
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: .Parse（unitsInStock）;
- en: IQueryable<Category>? categories = db.Categories?
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Category>?类别= db.Categories？
- en: .Include(c => c.Products.Where(p => p.Stock >= stock));
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: .Include（c => c.Products.Where（p => p.Stock> = stock））;
- en: if
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (categories is
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: （类别是
- en: 'null'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No categories found."
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“找不到类别。”
- en: );
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: return
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: '}'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: foreach
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (Category c in
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: （类别c在
- en: categories)
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 类别）
- en: '{'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“
- en: '{c.CategoryName}'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.CategoryName}'
- en: has
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: 有
- en: '{c.Products.Count}'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.Products.Count}'
- en: products with a minimum of
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 最少有
- en: '{stock}'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '{stock}'
- en: units in stock."
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 库存单位。”
- en: );
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: foreach
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (Product p in
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: （产品p在
- en: c.Products)
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: c.Products）
- en: '{'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“
- en: '{p.ProductName}'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: '{p.ProductName}'
- en: has
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 有
- en: '{p.Stock}'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '{p.Stock}'
- en: units in stock."
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 库存单位。”
- en: );
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '}'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , comment out the `QueryingCategories` method and invoke the
    `FilteredIncludes` method, as shown highlighted in the following code:'
  id: totrans-1125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉`QueryingCategories`方法，并调用`FilteredIncludes`方法，如下面的代码中突出显示的那样：
- en: '```cs'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: WriteLine($"Using
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（$“使用
- en: '{ProjectConstants.DatabaseProvider}'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '{ProjectConstants.DatabaseProvider}'
- en: database provider."
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库提供程序。”
- en: );
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: '**// QueryingCategories();**'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '**// QueryingCategories（）;**'
- en: '**FilteredIncludes();**'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: '**FilteredIncludes（）;**'
- en: '```'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, enter a minimum for units in stock like `100` , and view the
    result, as shown in the following output:'
  id: totrans-1134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入库存单位的最小值，如`100`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a minimum for units in stock: 100'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 输入库存单位的最小值：100
- en: Beverages has 2 products with a minimum of 100 units in stock.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有2种产品，最少100个库存单位。
- en: Sasquatch Ale has 111 units in stock.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: Sasquatch Ale有111个库存单位。
- en: Rhönbräu Klosterbier has 125 units in stock.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: Rhönbräu Klosterbier有125个库存单位。
- en: Condiments has 2 products with a minimum of 100 units in stock.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 调味品有2种产品，最少100个库存单位。
- en: Grandma's Boysenberry Spread has 120 units in stock.
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: Grandma's Boysenberry Spread有120个库存单位。
- en: Sirop d'érable has 113 units in stock.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: Sirop d'érable有113个库存单位。
- en: Confections has 0 products with a minimum of 100 units in stock.
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 糖果有0种产品，最少100个库存单位。
- en: Dairy Products has 1 products with a minimum of 100 units in stock.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 乳制品有1种产品，最少100个库存单位。
- en: Geitost has 112 units in stock.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: Geitost库存中有112个单位。
- en: Grains/Cereals has 1 products with a minimum of 100 units in stock.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 谷物/谷物库存中有1种产品，最少100个单位。
- en: Gustaf's Knäckebröd has 104 units in stock.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: Gustaf的Knäckebröd库存中有104个单位。
- en: Meat/Poultry has 1 products with a minimum of 100 units in stock.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 肉类/家禽库存中有1种产品，最少100个单位。
- en: Pâté chinois has 115 units in stock.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: Pâté chinois库存中有115个单位。
- en: Produce has 0 products with a minimum of 100 units in stock.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 生产中有0种产品，库存中至少有100个单位。
- en: Seafood has 3 products with a minimum of 100 units in stock.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 海鲜有3种产品，库存中至少有100个单位。
- en: Inlagd Sill has 112 units in stock.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: Inlagd Sill库存中有112个单位。
- en: Boston Crab Meat has 123 units in stock.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: Boston Crab Meat库存中有123个单位。
- en: Röd Kaviar has 101 units in stock.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: Röd Kaviar库存中有101个单位。
- en: '```'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Unicode characters in the Windows console
  id: totrans-1156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows控制台中的Unicode字符
- en: There is a limitation with the console provided by Microsoft on versions of
    Windows before the Windows 10 Fall Creators Update. By default, the console cannot
    display Unicode characters, for example, in the name Rhönbräu.
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10秋季创作者更新之前的Windows版本上，Microsoft提供的控制台存在限制。默认情况下，控制台无法显示Unicode字符，例如Rhönbräu的名称。
- en: 'If you have this issue, then you can temporarily change the code page (also
    known as the character set) in a console to Unicode UTF-8 by entering the following
    command at the prompt before running the app:'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到此问题，可以在运行应用程序之前在控制台中输入以下命令，临时更改代码页（也称为字符集）为Unicode UTF-8：
- en: '```cs'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: chcp 65001
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: chcp 65001
- en: '```'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Filtering and sorting products
  id: totrans-1162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤和排序产品
- en: 'Let''s explore a more complex query that will filter and sort data:'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一个更复杂的查询，将过滤和排序数据：
- en: 'At the bottom of `Program.cs` , define a `QueryingProducts` method, and add
    statements to do the following, as shown in the following code:'
  id: totrans-1164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，定义一个`QueryingProducts`方法，并添加以下语句，如下面的代码所示：
- en: Create an instance of the `Northwind` class that will manage the database.
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个将管理数据库的`Northwind`类的实例。
- en: Prompt the user for a price for products. Unlike the previous code example,
    we will loop until the input is a valid price.
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示用户输入产品价格。与前一个代码示例不同，我们将循环直到输入有效价格。
- en: Create a query for products that cost more than the price using LINQ.
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LINQ创建一个成本高于价格的产品查询。
- en: 'Loop through the results, outputting the Id, name, cost (formatted in US dollars),
    and the number of units in stock:'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环遍历结果，输出Id，名称，成本（以美元格式化），以及库存中的单位数：
- en: '```cs'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: QueryingProducts
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 查询产品
- en: ()
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db =新
- en: ())
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Products that cost more than a price, highest at top."
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“成本高于价格的产品，最高在顶部。”
- en: );
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: string
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? input;'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: ？输入；
- en: decimal
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 十进制
- en: price;
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 价格；
- en: do
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 做
- en: '{'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write("Enter a product price: "'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: Write（“输入产品价格：”
- en: );
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: input = ReadLine();
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 输入= ReadLine（）;
- en: '} while'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '} while'
- en: (!decimal
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: （！十进制
- en: .TryParse(input, out
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: .TryParse（输入，out
- en: price));
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 价格）；
- en: IQueryable<Product>? products = db.Products?
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product>？产品= db.Products？
- en: .Where(product => product.Cost > price)
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: .Where（product => product.Cost > price）
- en: .OrderByDescending(product => product.Cost);
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderByDescending（product => product.Cost）;
- en: if
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (products is
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: （产品是
- en: 'null'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No products found."
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“未找到产品。”
- en: );
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: ）；
- en: return
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: ；
- en: '}'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: foreach
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Product p in
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: （Product p in
- en: products)
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 产品）
- en: '{'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine(
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（
- en: '"{0}: {1} costs {2:$#,##0.00} and has {3} in stock."'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: '“{0}：{1}的成本为{2：$ #，## 0.00}，库存为{3}。”'
- en: ','
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: p.ProductId, p.ProductName, p.Cost, p.Stock);
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: p.ProductId，p.ProductName，p.Cost，p.Stock）;
- en: '}'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the previous method, and call the `QueryingProducts`
    method
  id: totrans-1219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉上一个方法，并调用`QueryingProducts`方法
- en: 'Run the code, enter `50` when prompted to enter a product price, and view the
    result, as shown in the following output:'
  id: totrans-1220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，当提示输入产品价格时输入`50`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Products that cost more than a price, highest at top.
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: 成本高于价格的产品，最高在顶部。
- en: 'Enter a product price: 50'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 输入产品价格：50
- en: '38: Côte de Blaye costs $263.50 and has 17 in stock.'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 38：Côte de Blaye售价263.50美元，库存17。
- en: '29: Thüringer Rostbratwurst costs $123.79 and has 0 in stock.'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 29：Thüringer Rostbratwurst售价123.79美元，库存为0。
- en: '9: Mishi Kobe Niku costs $97.00 and has 29 in stock.'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 9：Mishi Kobe Niku售价97.00美元，库存29。
- en: '20: Sir Rodney''s Marmalade costs $81.00 and has 40 in stock.'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 20：Sir Rodney的橙子酱售价81.00美元，库存40。
- en: '18: Carnarvon Tigers costs $62.50 and has 42 in stock.'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 18：Carnarvon Tigers售价62.50美元，库存42。
- en: '59: Raclette Courdavault costs $55.00 and has 79 in stock.'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 59：Raclette Courdavault售价55.00美元，库存79。
- en: '51: Manjimup Dried Apples costs $53.00 and has 20 in stock.'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 51：Manjimup Dried Apples售价53.00美元，库存20。
- en: '```'
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Getting the generated SQL
  id: totrans-1232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取生成的SQL
- en: 'You might be wondering how well written the SQL statements are that are generated
    from the C# queries we write. EF Core 5.0 introduced a quick and easy way to see
    the SQL generated:'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道我们编写的C#查询生成的SQL语句有多好。EF Core 5.0引入了一种快速简便的方法来查看生成的SQL：
- en: 'In the `FilteredIncludes` method, before using the `foreach` statement to enumerate
    the query, add a statement to output the generated SQL, as shown highlighted in
    the following code:'
  id: totrans-1234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FilteredIncludes`方法中，在使用`foreach`语句枚举查询之前，添加一个语句来输出生成的SQL，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**WriteLine(**'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine（**'
- en: '**$"ToQueryString:**'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '**$“ToQueryString：**'
- en: '**{categories.ToQueryString()}**'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '**{categories.ToQueryString()}**'
- en: '**"**'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: '**“**'
- en: '**);**'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '**）；**'
- en: foreach
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Category c in
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: （类别c中
- en: categories)
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 类别）
- en: '```'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the call to the `QueryingProducts` method and
    uncomment the call to the `FilteredIncludes` method.
  id: totrans-1245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉对`QueryingProducts`方法的调用，并取消对`FilteredIncludes`方法的调用。
- en: 'Run the code, enter a minimum for units in stock like `99` , and view the result
    (when run with SQLite), as shown in the following output:'
  id: totrans-1246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入库存中的最小值，如`99`，并查看结果（在SQLite中运行时），如下面的输出所示：
- en: '```cs'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a minimum for units in stock: 99'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 输入库存的最小值：99
- en: Using SQLite database provider.
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLite数据库提供程序。
- en: 'ToQueryString: .param set @_stock_0 99'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: ToQueryString：.param set @_stock_0 99
- en: SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description",
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“c”。“CategoryId”，“c”。“CategoryName”，“c”。“Description”，
- en: '"t"."ProductId", "t"."CategoryId", "t"."UnitPrice", "t"."Discontinued",'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: “t”。“ProductId”，“t”。“CategoryId”，“t”。“UnitPrice”，“t”。“Discontinued”，
- en: '"t"."ProductName", "t"."UnitsInStock"'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '"t"."ProductName"，"t"."UnitsInStock"'
- en: FROM "Categories" AS "c"
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Categories" AS "c"
- en: LEFT JOIN (
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: LEFT JOIN (
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "p"."ProductId"，"p"."CategoryId"，"p"."UnitPrice"，
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
- en: FROM "Products" AS "p"
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE ("p"."UnitsInStock" >= @_stock_0)
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE（"p"."UnitsInStock">= @_stock_0）
- en: ) AS "t" ON "c"."CategoryId" = "t"."CategoryId"
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: ）AS "t" ON "c"."CategoryId" = "t"."CategoryId"
- en: ORDER BY "c"."CategoryId", "t"."ProductId"
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: ORDER BY "c"."CategoryId", "t"."ProductId"
- en: Beverages has 2 products with a minimum of 99 units in stock.
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有2种产品，最低库存为99个单位。
- en: Sasquatch Ale has 111 units in stock.
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: Sasquatch Ale有111个库存单位。
- en: Rhönbräu Klosterbier has 125 units in stock.
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: Rhönbräu Klosterbier有125个库存单位。
- en: '...'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Note the SQL parameter named `@_stock_0` has been set to a minimum stock value
    of `99` .
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 注意SQL参数命名为`@_stock_0`已设置为最小库存值`99`。
- en: 'For SQL Server, the SQL generated is slightly different, for example, it uses
    square brackets instead of double-quotes around object names, as shown in the
    following output:'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQL Server，生成的SQL略有不同，例如，它使用方括号而不是双引号来表示对象名称，如下面的输出所示：
- en: '```cs'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Enter a minimum for units in stock: 99'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 输入最低库存单位：99
- en: Using SqlServer database provider.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SqlServer数据库提供程序。
- en: 'ToQueryString: DECLARE @__stock_0 smallint = CAST(99 AS smallint);'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: ToQueryString：DECLARE @__stock_0 smallint = CAST(99 AS smallint);
- en: SELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [t].[ProductId],
    [t].[CategoryId], [t].[UnitPrice], [t].[Discontinued], [t].[ProductName], [t].[UnitsInStock]
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT [c].[CategoryId]，[c].[CategoryName]，[c].[Description]，[t].[ProductId]，[t].[CategoryId]，[t].[UnitPrice]，[t].[Discontinued]，[t].[ProductName]，[t].[UnitsInStock]
- en: FROM [Categories] AS [c]
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: FROM [Categories] AS [c]
- en: LEFT JOIN (
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: LEFT JOIN (
- en: SELECT [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued],
    [p].[ProductName], [p].[UnitsInStock]
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT [p].[ProductId]，[p].[CategoryId]，[p].[UnitPrice]，[p].[Discontinued]，[p].[ProductName]，[p].[UnitsInStock]
- en: FROM [Products] AS [p]
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: FROM [Products] AS [p]
- en: WHERE [p].[UnitsInStock] >= @__stock_0
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE [p].[UnitsInStock] >= @__stock_0
- en: ) AS [t] ON [c].[CategoryId] = [t].[CategoryId]
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: ）AS [t] ON [c].[CategoryId] = [t].[CategoryId]
- en: ORDER BY [c].[CategoryId], [t].[ProductId]
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: ORDER BY [c].[CategoryId]，[t].[ProductId]
- en: '```'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Logging EF Core using a custom logging provider
  id: totrans-1282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义日志提供程序记录EF Core
- en: 'To monitor the interaction between EF Core and the database, we can enable
    logging. This requires the following two tasks:'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 要监视EF Core与数据库之间的交互，我们可以启用日志记录。这需要以下两个任务：
- en: The registering of a **logging provider** .
  id: totrans-1284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志提供程序**的注册。'
- en: The implementation of a **logger** .
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录器**的实现。'
- en: 'Let''s see an example of this in action:'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例：
- en: Add a file to your project named `ConsoleLogger.cs` .
  id: totrans-1287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目添加名为`ConsoleLogger.cs`的文件。
- en: 'Modify the file to define two classes, one to implement `ILoggerProvider` and
    one to implement `ILogger` , as shown in the following code, and note the following:'
  id: totrans-1288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件以定义两个类，一个用于实现`ILoggerProvider`，一个用于实现`ILogger`，如下面的代码所示，并注意以下内容：
- en: '`ConsoleLoggerProvider` returns an instance of `ConsoleLogger` . It does not
    need any unmanaged resources, so the `Dispose` method does not do anything, but
    it must exist.'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLoggerProvider`返回`ConsoleLogger`的实例。它不需要任何非托管资源，因此`Dispose`方法不执行任何操作，但必须存在。'
- en: '`ConsoleLogger` is disabled for log levels `None` , `Trace` , and `Information`
    . It is enabled for all other log levels.'
  id: totrans-1290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLogger`对于日志级别`None`，`Trace`和`Information`被禁用。它对所有其他日志级别启用。'
- en: '`ConsoleLogger` implements its `Log` method by writing to `Console` :'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleLogger`通过写入`Console`实现其`Log`方法：'
- en: '```cs'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.Extensions.Logging; // ILoggerProvider, ILogger, LogLevel
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.Logging; // ILoggerProvider，ILogger，LogLevel
- en: using
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: static
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: System.Console;
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: namespace
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间
- en: Packt.Shared
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: Packt.Shared
- en: ;
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: ConsoleLoggerProvider
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleLoggerProvider
- en: ': ILoggerProvider'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: ：ILoggerProvider
- en: '{'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: ILogger
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: ILogger
- en: CreateLogger
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: CreateLogger
- en: (
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: categoryName
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: categoryName
- en: )
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // we could have different logger implementations for
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: //我们可以有不同的记录器实现
- en: // different categoryName values but we only have one
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: //不同的categoryName值，但我们只有一个
- en: return
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: new
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: ConsoleLogger();
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleLogger();
- en: '}'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // if your logger uses unmanaged resources,
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: //如果您的记录器使用非托管资源，
- en: // then you can release them here
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: // 然后您可以在这里释放它们
- en: public
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: void
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Dispose
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: Dispose
- en: ()
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{ }'
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: '{ }'
- en: '}'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: ConsoleLogger
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleLogger
- en: ': ILogger'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: ：ILogger
- en: '{'
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // if your logger uses unmanaged resources, you can
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: // 如果您的记录器使用非托管资源，您可以
- en: // return the class that implements IDisposable here
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: //在这里返回实现IDisposable的类
- en: public
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: IDisposable
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: IDisposable
- en: BeginScope
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: BeginScope
- en: <
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: TState
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: TState
- en: '>('
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: TState state
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: TState state
- en: )
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: return
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'null'
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: ;
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: bool
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IsEnabled
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: IsEnabled
- en: (
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: LogLevel logLevel
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel logLevel
- en: )
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // to avoid overlogging, you can filter on the log level
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: //为了避免过度记录，您可以根据日志级别进行过滤
- en: switch
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: switch
- en: (logLevel)
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: （logLevel）
- en: '{'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: case
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Trace:'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Trace：
- en: case
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Information:'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Information：
- en: case
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.None:'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.None：
- en: return
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'false'
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 假
- en: ;
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: case
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Debug:'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Debug：
- en: case
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Warning:'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Warning：
- en: case
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Error:'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Error：
- en: case
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: case
- en: 'LogLevel.Critical:'
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel.Critical：
- en: default
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 默认
- en: ':'
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: ':'
- en: return
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: 'true'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 真
- en: ;
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '};'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: '}'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: void
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Log
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 日志
- en: <
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: TState
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: TState
- en: '>('
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: LogLevel logLevel,
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel logLevel，
- en: EventId eventId, TState state, Exception? exception,
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: EventId eventId，TState state，Exception？exception，
- en: Func<TState, Exception,
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: Func<TState，Exception，
- en: string
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: formatter
  id: totrans-1393
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 格式化程序
- en: )
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // log the level and event identifier
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: // 记录级别和事件标识
- en: 'Write($"Level:'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: Write($"级别：
- en: '{logLevel}'
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: '{logLevel}'
- en: ', Event Id:'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: ，事件ID：
- en: '{eventId.Id}'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '{eventId.Id}'
- en: '"'
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: // only output the state or exception if it exists
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: //仅在状态或异常存在时输出
- en: if
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (state != null
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: （状态！= null
- en: )
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write($", State:'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: Write($",状态：
- en: '{state}'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '{state}'
- en: '"'
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (exception != null
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: （异常！= null
- en: )
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write($", Exception:'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: Write($",异常：
- en: '{exception.Message}'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '{exception.Message}'
- en: '"'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '}'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: '}'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'At the top of `Program.cs` , add statements to import the namespaces needed
    for logging, as shown in the following code:'
  id: totrans-1426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，添加语句以导入日志记录所需的命名空间，如下面的代码所示：
- en: '```cs'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore.Infrastructure;
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore.Infrastructure;
- en: using
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.Extensions.DependencyInjection;
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.DependencyInjection;
- en: using
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.Extensions.Logging;
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.Extensions.Logging;
- en: '```'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'We already used the `ToQueryString` method to get the SQL for `FilteredIncludes`
    so we do not need to add logging to that method. To both the `QueryingCategories`
    and `QueryingProducts` methods, add statements immediately inside the `using`
    block for the `Northwind` database context to get the logging factory and register
    your custom console logger, as shown highlighted in the following code:'
  id: totrans-1435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经使用`ToQueryString`方法获取了`FilteredIncludes`的SQL，因此我们不需要向该方法添加日志记录。对于`QueryingCategories`和`QueryingProducts`方法，立即在`Northwind`数据库上下文的`using`块内添加语句，以获取日志工厂并注册您的自定义控制台记录器，如下面的代码所示：
- en: '```cs'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();**'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: '**ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();**'
- en: '**loggerFactory.AddProvider(**'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: '**loggerFactory.AddProvider(**'
- en: '**new**'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**'
- en: '**ConsoleLoggerProvider());**'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: '**ConsoleLoggerProvider());**'
- en: '```'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: At the top of `Program.cs` , comment out the call to the `FilteredIncludes`
    method and uncomment the call to the `QueryingProducts` method.
  id: totrans-1446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，注释掉对`FilteredIncludes`方法的调用，并取消注释对`QueryingProducts`方法的调用。
- en: 'Run the code and view the logs, which are partially shown in the following
    output:'
  id: totrans-1447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看日志，部分日志显示在以下输出中：
- en: '```cs'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '...'
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 'Level: Debug, Event Id: 20000, State: Opening connection to database ''main''
    on server ''/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db''.'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20000，状态：打开到服务器'/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'上的数据库'main'的连接。
- en: 'Level: Debug, Event Id: 20001, State: Opened connection to database ''main''
    on server ''/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db''.'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20001，状态：已打开到服务器'/Users/markjprice/Code/Chapter10/WorkingWithEFCore/Northwind.db'上的数据库'main'的连接。
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__price_0=''?''],
    CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20100，状态：执行DbCommand [Parameters=[@__price_0='?']，CommandType='Text'，CommandTimeout='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice", "p"."Discontinued",
    "p"."ProductName", "p"."UnitsInStock"
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“p”。“ProductId”，“p”。“CategoryId”，“p”。“UnitPrice”，“p”。“Discontinued”，“p”。“ProductName”，“p”。“UnitsInStock”
- en: FROM "Products" AS "p"
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE "p"."UnitPrice" > @__price_0
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE "p"。"UnitPrice" > @__price_0
- en: ORDER BY "product"."UnitPrice" DESC
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: ORDER BY "product"。"UnitPrice" DESC
- en: '...'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Your logs might vary from those shown above based on your chosen database provider
    and code editor, and future improvements to EF Core. For now, note that different
    events like opening a connection or executing a command have different event ids.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 您的日志可能会因您选择的数据库提供程序和代码编辑器以及EF Core的未来改进而有所不同。现在，请注意不同的事件（如打开连接或执行命令）具有不同的事件ID。
- en: Filtering logs by provider-specific values
  id: totrans-1460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过提供程序特定值过滤日志
- en: 'The event id values and what they mean will be specific to the .NET data provider.
    If we want to know how the LINQ query has been translated into SQL statements
    and is executing, then the event Id to output has an `Id` value of `20100` :'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 事件ID值及其含义将特定于.NET数据提供程序。如果我们想知道LINQ查询如何被转换为SQL语句并执行，则要输出的事件ID具有`Id`值为`20100`：
- en: 'Modify the `Log` method in `ConsoleLogger` to only output events with an `Id`
    of `20100` , as highlighted in the following code:'
  id: totrans-1462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`ConsoleLogger`中的`Log`方法，仅输出`Id`为`20100`的事件，如下面的代码所示：
- en: '```cs'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: public
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: void
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: Log
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 日志
- en: <
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: <
- en: TState
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: TState
- en: '>('
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: '>('
- en: LogLevel logLevel, EventId eventId,
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: LogLevel logLevel，EventId eventId，
- en: TState state, Exception? exception,
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: TState state, Exception? exception,？
- en: Func<TState, Exception,
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: Func<TState, Exception，
- en: string
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: formatter
  id: totrans-1474
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 格式化程序
- en: )
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**if**'
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: '**if**'
- en: '**(eventId.Id ==**'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: '**(eventId.Id ==**'
- en: '**20100**'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: '**20100**'
- en: '**)**'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '**)**'
- en: '**{**'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: // log the level and event identifier
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: // 记录级别和事件标识符
- en: 'Write("Level: {0}, Event Id: {1}, Event: {2}"'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 'Write("Level: {0}, Event Id: {1}, Event: {2}"'
- en: ','
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: logLevel, eventId.Id, eventId.Name);
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: logLevel，eventId.Id，eventId.Name);
- en: // only output the state or exception if it exists
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: // 仅在存在时输出状态或异常
- en: if
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (state != null
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: （state！= null
- en: )
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write($", State:'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: Write($", 状态：
- en: '{state}'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: '{state}'
- en: '"'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: if
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (exception != null
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: （异常！= null
- en: )
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'Write($", Exception:'
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: Write($", 异常：
- en: '{exception.Message}'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '{exception.Message}'
- en: '"'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine();
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: '**}**'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '}'
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , uncomment the `QueryingCategories` method and comment out
    the other methods so that we can monitor the SQL statements that are generated
    when joining two tables.
  id: totrans-1509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，取消注释`QueryingCategories`方法，并注释掉其他方法，以便我们可以监视连接两个表时生成的SQL语句。
- en: 'Run the code, and note the following SQL statements that were logged, as shown
    in the following output that has been edited for space:'
  id: totrans-1510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意以下SQL语句的日志记录，如下面编辑过的输出所示：
- en: '```cs'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Using SQLServer database provider.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLServer数据库提供程序。
- en: 'Categories and how many products they have:'
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 类别及其产品数量：
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType=''Text'',
    CommandTimeout=''30'']'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20100，状态：执行DbCommand [Parameters=[]，CommandType='Text'，CommandTimeout='30']
- en: SELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [p].[ProductId],
    [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 选择[c]。[CategoryId]，[c]。[CategoryName]，[c]。[Description]，[p]。[ProductId]，[p]。[CategoryId]，[p]。[UnitPrice]，[p]。[Discontinued]，[p]。[ProductName]，[p]。[UnitsInStock]
- en: FROM [Categories] AS [c]
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: FROM [Categories] AS [c]
- en: LEFT JOIN [Products] AS [p] ON [c].[CategoryId] = [p].[CategoryId]
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: LEFT JOIN [Products] AS [p] ON [c]。[CategoryId] = [p]。[CategoryId]
- en: ORDER BY [c].[CategoryId], [p].[ProductId]
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: ORDER BY [c]。[CategoryId]，[p]。[ProductId]
- en: Beverages has 12 products.
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有12种产品。
- en: Condiments has 12 products.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 调味品有12种产品。
- en: Confections has 13 products.
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: 糖果有13种产品。
- en: Dairy Products has 10 products.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 乳制品有10种产品。
- en: Grains/Cereals has 7 products.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 谷物/谷物有7种产品。
- en: Meat/Poultry has 6 products.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 肉类/家禽有6种产品。
- en: Produce has 5 products.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 生产有5种产品。
- en: Seafood has 12 products.
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: 海鲜有12种产品。
- en: '```'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Logging with query tags
  id: totrans-1528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用查询标签记录
- en: When logging LINQ queries, it can be tricky to correlate log messages in complex
    scenarios. EF Core 2.2 introduced the query tags feature to help by allowing you
    to add SQL comments to the log.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录LINQ查询时，在复杂的情况下，很难将日志消息相关联。EF Core 2.2引入了查询标签功能，通过允许您向日志中添加SQL注释来帮助。
- en: 'You can annotate a LINQ query using the `TagWith` method, as shown in the following
    code:'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`TagWith`方法注释LINQ查询，如下面的代码所示：
- en: '```cs'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IQueryable<Product>? products = db.Products?
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product>？产品= db.Products？
- en: .TagWith("Products filtered by price and sorted."
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: .TagWith("按价格和排序过滤的产品。"
- en: )
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: .Where(product => product.Cost > price)
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 。Where（product => product.Cost>价格）
- en: .OrderByDescending(product => product.Cost);
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderByDescending（product => product.Cost）;
- en: '```'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'This will add an SQL comment to the log, as shown in the following output:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在日志中添加一个SQL注释，如下面的输出所示：
- en: '```cs'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: -- Products filtered by price and sorted.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: --按价格和排序过滤的产品。
- en: '```'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Pattern matching with Like
  id: totrans-1542
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Like进行模式匹配
- en: 'EF Core supports common SQL statements including `Like` for pattern matching:'
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core支持常见的SQL语句，包括用于模式匹配的`Like`：
- en: 'At the bottom of `Program.cs` , add a method named `QueryingWithLike` , as
    shown in the following code, and note:'
  id: totrans-1544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，添加一个名为`QueryingWithLike`的方法，如下面的代码所示，并注意：
- en: We have enabled logging.
  id: totrans-1545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已启用日志记录。
- en: We prompt the user to enter part of a product name and then use the `EF.Functions.Like`
    method to search anywhere in the `ProductName` property.
  id: totrans-1546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提示用户输入产品名称的一部分，然后使用`EF.Functions.Like`方法在`ProductName`属性的任何位置进行搜索。
- en: 'For each matching product, we output its name, stock, and if it is discontinued:'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个匹配的产品，我们输出其名称，库存以及是否已停产：
- en: '```cs'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: QueryingWithLike
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: QueryingWithLike
- en: ()
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: ILoggerFactory loggerFactory = db.GetService<ILoggerFactory>();
- en: loggerFactory.AddProvider(new
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: loggerFactory.AddProvider(new
- en: ConsoleLoggerProvider());
  id: totrans-1560
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleLoggerProvider());
- en: 'Write("Enter part of a product name: "'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: Write("输入产品名称的一部分："
- en: );
  id: totrans-1562
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: string
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: '? input = ReadLine();'
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: ？ 输入= ReadLine（）;
- en: IQueryable<Product>? products = db.Products?
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product>？产品= db.Products？
- en: .Where(p => EF.Functions.Like(p.ProductName, $"%
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 。Where（p => EF.Functions.Like（p.ProductName，$“％
- en: '{input}'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: '{输入}'
- en: '%"'
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: ％”
- en: ));
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: if
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (products is
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: （产品是
- en: 'null'
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No products found."
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("找不到产品。"
- en: );
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: return
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: ;
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: foreach
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 对于
- en: (Product p in
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: （在
- en: products)
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: 产品）
- en: '{'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} has {1} units in stock. Discontinued? {2}"
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine（“{0}有{1}个单位的库存。已停产？{2}”
- en: ','
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: p.ProductName, p.Stock, p.Discontinued);
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: p.ProductName，p.Stock，p.Discontinued);
- en: '}'
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out the existing methods, and call `QueryingWithLike`
    .
  id: totrans-1591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉现有的方法，并调用`QueryingWithLike`。
- en: 'Run the code, enter a partial product name such as `che` , and view the result,
    as shown in the following output:'
  id: totrans-1592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入部分产品名称，例如`che`，并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Using SQLServer database provider.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQLServer数据库提供程序。
- en: 'Enter part of a product name: che'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 输入产品名称的一部分：che
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@__Format_1=''?''
    (Size = 40)], CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20100，状态：执行DbCommand [参数=[@__Format_1='?'（大小=40）]，命令类型='文本'，命令超时='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“p”。 “ProductId”，“p”。 “CategoryId”，“p”。 “UnitPrice”，
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock" FROM "Products" AS
    "p"'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: “p”。 “已停产”，“p”。 “ProductName”，“p”。 “UnitsInStock” FROM“Products” AS“p”
- en: WHERE "p"."ProductName" LIKE @__Format_1
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE“p”。 “ProductName”LIKE @__Format_1
- en: Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Anton's Cajun Seasoning有53个单位的库存。已停产？假
- en: Chef Anton's Gumbo Mix has 0 units in stock. Discontinued? True
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Anton's Gumbo Mix有0个单位的库存。已停产？真
- en: Queso Manchego La Pastora has 86 units in stock. Discontinued? False
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: Queso Manchego La Pastora有86个单位的库存。已停产？假
- en: Gumbär Gummibärchen has 15 units in stock. Discontinued? False
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: Gumbär Gummibärchen有15个单位的库存。已停产？假
- en: '```'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: EF Core 6.0 introduces another useful function, `EF.Functions.Random` , that
    maps to a database function returning a pseudo-random number between 0 and 1 exclusive.
    For example, you could multiply the random number by the count of rows in a table
    to select one random row from that table.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 6.0引入了另一个有用的函数`EF.Functions.Random`，它映射到返回介于0和1之间的伪随机数的数据库函数。例如，您可以将随机数乘以表中的行数来选择该表中的一个随机行。
- en: Defining global filters
  id: totrans-1606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义全局过滤器
- en: 'Northwind products can be discontinued, so it might be useful to ensure that
    discontinued products are never returned in results, even if the programmer does
    not use `Where` to filter them out in their queries:'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: Northwind产品可能已停产，因此确保即使程序员在其查询中不使用`Where`来过滤它们，也可以确保永远不会返回已停产的产品可能是有用的：
- en: 'In `Northwind.cs` , modify the `OnModelCreating` method to add a global filter
    to remove discontinued products, as shown highlighted in the following code:'
  id: totrans-1608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.cs`中，修改`OnModelCreating`方法以添加全局过滤器以删除已停产的产品，如下面代码中突出显示的那样：
- en: '```cs'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: protected
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的
- en: override
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnModelCreating
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: (
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelBuilder modelBuilder
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '**// global filter to remove discontinued products**'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '**//全局过滤器以删除已停产的产品**'
- en: '**modelBuilder.Entity<Product>()**'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: '**modelBuilder.Entity<Product>()**'
- en: '**.HasQueryFilter(p => !p.Discontinued);**'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: '**.HasQueryFilter（p =>！p.Discontinued）;**'
- en: '}'
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, enter the partial product name `che` , view the result, and note
    that **Chef Anton''s Gumbo Mix** is now missing, because the SQL statement generated
    includes a filter for the `Discontinued` column, as shown highlighted in the following
    output:'
  id: totrans-1624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入部分产品名称`che`，查看结果，并注意到**Chef Anton's Gumbo Mix**现在已经消失，因为生成的SQL语句包括对`Discontinued`列的过滤，如下面的输出所示：
- en: '```cs'
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“p”。 “ProductId”，“p”。 “CategoryId”，“p”。 “UnitPrice”，
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: “p”。 “已停产”，“p”。 “ProductName”，“p”。 “UnitsInStock”
- en: FROM "Products" AS "p"
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: FROM“Products” AS“p”
- en: WHERE
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里
- en: '**("p"."Discontinued" = 0)**'
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: '**（“p”。 “已停产”= 0）**'
- en: AND "p"."ProductName" LIKE @__Format_1
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: AND“p”。 “ProductName”LIKE @__Format_1
- en: Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Anton's Cajun Seasoning有53个单位的库存。已停产？假
- en: Queso Manchego La Pastora has 86 units in stock. Discontinued? False
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: Queso Manchego La Pastora有86个单位的库存。已停产？假
- en: Gumbär Gummibärchen has 15 units in stock. Discontinued? False
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: Gumbär Gummibärchen有15个单位的库存。已停产？假
- en: '```'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Loading patterns with EF Core
  id: totrans-1636
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EF Core加载模式
- en: 'There are three loading patterns that are commonly used with EF Core:'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在 EF Core 中使用三种加载模式：
- en: '**Eager loading** : Load data early.'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**急加载**：提前加载数据。'
- en: '**Lazy loading** : Load data automatically just before it is needed.'
  id: totrans-1639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**懒加载**：在需要之前自动加载数据。'
- en: '**Explicit loading** : Load data manually.'
  id: totrans-1640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显式加载**：手动加载数据。'
- en: In this section, we're going to introduce each of them.
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍每一个。
- en: Eager loading entities
  id: totrans-1642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 急加载实体
- en: In the `QueryingCategories` method, the code currently uses the `Categories`
    property to loop through each category, outputting the category name and the number
    of products in that category.
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `QueryingCategories` 方法中，代码当前使用 `Categories` 属性循环遍历每个类别，输出该类别的名称和该类别中的产品数量。
- en: This works because when we wrote the query, we enabled eager loading by calling
    the `Include` method for the related products.
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为当我们编写查询时，通过调用 `Include` 方法启用了急加载。
- en: 'Let''s see what happens if we do not call `Include` :'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果不调用 `Include` 会发生什么：
- en: 'Modify the query to comment out the `Include` method call, as shown in the
    following code:'
  id: totrans-1646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改查询以注释掉 `Include` 方法调用，如下所示：
- en: '```cs'
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IQueryable<Category>? categories =
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Category>? categories =
- en: db.Categories; //.Include(c => c.Products);
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: db.Categories; //.Include(c => c.Products);
- en: '```'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: In `Program.cs` , comment out all methods except `QueryingCategories` .
  id: totrans-1651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉除 `QueryingCategories` 之外的所有方法。
- en: 'Run the code and view the result, as shown in the following partial output:'
  id: totrans-1652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下部分输出所示：
- en: '```cs'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Beverages has 0 products.
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: Beverages has 0 products.
- en: Condiments has 0 products.
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: Condiments has 0 products.
- en: Confections has 0 products.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: Confections has 0 products.
- en: Dairy Products has 0 products.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: Dairy Products has 0 products.
- en: Grains/Cereals has 0 products.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: Grains/Cereals has 0 products.
- en: Meat/Poultry has 0 products.
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: Meat/Poultry has 0 products.
- en: Produce has 0 products.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: Produce has 0 products.
- en: Seafood has 0 products.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: Seafood has 0 products.
- en: '```'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Each item in `foreach` is an instance of the `Category` class, which has a property
    named `Products` , that is, the list of products in that category. Since the original
    query is only selected from the `Categories` table, this property is empty for
    each category.
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach` 中的每个项目都是 `Category` 类的实例，该类具有名为 `Products` 的属性，即该类别中的产品列表。由于原始查询仅从
    `Categories` 表中选择，因此该属性对于每个类别都为空。'
- en: Enabling lazy loading
  id: totrans-1664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用懒加载
- en: 'Lazy loading was introduced in EF Core 2.1, and it can automatically load missing
    related data. To enable lazy loading, developers must:'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是在 EF Core 2.1 中引入的，它可以自动加载丢失的相关数据。要启用懒加载，开发人员必须：
- en: Reference a NuGet package for proxies.
  id: totrans-1666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用代理的 NuGet 包。
- en: Configure lazy loading to use a proxy.
  id: totrans-1667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置懒加载以使用代理。
- en: 'Let''s see this in action:'
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个实例：
- en: 'In the `WorkingWithEFCore` project, add a package reference for EF Core proxies,
    as shown in the following markup:'
  id: totrans-1669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WorkingWithEFCore` 项目中，添加 EF Core 代理的包引用，如下标记所示：
- en: '```cs'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: <PackageReference
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: <PackageReference
- en: Include="Microsoft.EntityFrameworkCore.Proxies"
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: Include="Microsoft.EntityFrameworkCore.Proxies"
- en: Version="6.0.0"
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: Version="6.0.0"
- en: />
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: />
- en: '```'
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Build the project to restore packages.
  id: totrans-1676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以恢复包。
- en: 'Open `Northwind.cs` , and call an extension method to use lazy loading proxies
    at the top of the `OnConfiguring` method, as shown highlighted in the following
    code:'
  id: totrans-1677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Northwind.cs`，并在 `OnConfiguring` 方法的顶部调用一个扩展方法来使用懒加载代理，如下所示在以下代码中突出显示：
- en: '```cs'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: protected
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖
- en: void
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnConfiguring
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**optionsBuilder.UseLazyLoadingProxies();**'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '**optionsBuilder.UseLazyLoadingProxies();**'
- en: '```'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Now, every time the loop enumerates, and an attempt is made to read the `Products`
    property, the lazy loading proxy will check if they are loaded. If not, it will
    load them for us "lazily" by executing a `SELECT` statement to load just that
    set of products for the current category, and then the correct count will be returned
    to the output.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次循环枚举时，尝试读取 `Products` 属性时，懒加载代理将检查它们是否已加载。如果没有，它将通过执行 `SELECT` 语句来“懒惰”地加载当前类别的产品集，然后正确的计数将返回到输出。
- en: 'Run the code and note that the product counts are now correct. But you will
    see that the problem with lazy loading is that multiple round trips to the database
    server are required to eventually fetch all the data, as shown in the following
    partial output:'
  id: totrans-1690
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意产品计数现在是正确的。但是您会看到懒加载的问题是需要多次往返到数据库服务器才能最终获取所有数据，如下部分输出所示：
- en: '```cs'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Categories and how many products they have:'
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 类别及其拥有的产品数量：
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType=''Text'',
    CommandTimeout=''30'']'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件 ID：20100，状态：执行 DbCommand [参数= []，命令类型='Text'，命令超时='30']
- en: SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description" FROM "Categories"
    AS "c"
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description" FROM "Categories"
    AS "c"
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0=''?''],
    CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件 ID：20100，状态：执行 DbCommand [参数= [@ p_0='?']，命令类型='Text'，命令超时='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
- en: FROM "Products" AS "p"
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
- en: Beverages has 11 products.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: Beverages has 11 products.
- en: 'Level: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0=''?''],
    CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件 ID：20100，状态：执行 DbCommand [参数= [@ p_0='?']，命令类型='Text'，命令超时='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
- en: FROM "Products" AS "p"
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
- en: Condiments has 11 products.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: Condiments has 11 products.
- en: '```'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Explicit loading entities
  id: totrans-1708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式加载实体
- en: 'Another type of loading is explicit loading. It works in a similar way to lazy
    loading, with the difference being that you are in control of exactly what related
    data is loaded and when:'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种加载类型是显式加载。它的工作方式类似于延迟加载，不同之处在于您可以控制加载的相关数据以及何时加载：
- en: 'At the top of `Program.cs` , import the change tracking namespace to enable
    us to use the `CollectionEntry` class to manually load related entities, as shown
    in the following code:'
  id: totrans-1710
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的顶部，导入更改跟踪命名空间，以便我们可以使用`CollectionEntry`类手动加载相关实体，如下所示的代码：
- en: '```cs'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-1712
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: Microsoft.EntityFrameworkCore.ChangeTracking; // CollectionEntry
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore.ChangeTracking; // CollectionEntry
- en: '```'
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the `QueryingCategories` method, modify the statements to disable lazy loading
    and then prompt the user as to whether they want to enable eager loading and explicit
    loading, as shown in the following code:'
  id: totrans-1715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`QueryingCategories`方法中，修改语句以禁用延迟加载，然后提示用户是否要启用急切加载和显式加载，如下所示的代码：
- en: '```cs'
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: IQueryable<Category>? categories;
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Category>? categories;
- en: // = db.Categories;
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: // = db.Categories;
- en: // .Include(c => c.Products);
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: // .Include(c => c.Products);
- en: db.ChangeTracker.LazyLoadingEnabled = false
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: db.ChangeTracker.LazyLoadingEnabled = false
- en: ;
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: 'Write("Enable eager loading? (Y/N): "'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: Write("启用急切加载？（Y/N）："
- en: );
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: bool
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: eagerloading = (ReadKey().Key == ConsoleKey.Y);
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: eagerloading = (ReadKey().Key == ConsoleKey.Y);
- en: bool
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值
- en: explicitloading = false
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: explicitloading = false
- en: ;
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: WriteLine();
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: if
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (eagerloading)
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: （急切加载）
- en: '{'
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: categories = db.Categories?.Include(c => c.Products);
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: categories = db.Categories?.Include(c => c.Products);
- en: '}'
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 否则
- en: '{'
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: categories = db.Categories;
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: categories = db.Categories;
- en: 'Write("Enable explicit loading? (Y/N): "'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: Write("启用显式加载？（Y/N）："
- en: );
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: explicitloading = (ReadKey().Key == ConsoleKey.Y);
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: explicitloading = (ReadKey().Key == ConsoleKey.Y);
- en: WriteLine();
  id: totrans-1741
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: '}'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the `foreach` loop, before the `WriteLine` method call, add statements to
    check if explicit loading is enabled, and if so, prompt the user as to whether
    they want to explicitly load each individual category, as shown in the following
    code:'
  id: totrans-1744
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foreach`循环中，在`WriteLine`方法调用之前，添加语句来检查是否启用了显式加载，如果是，则提示用户是否要显式加载每个单独的类别，如下所示的代码：
- en: '```cs'
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: if
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (explicitloading)
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: （显式加载）
- en: '{'
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Write($"Explicitly load products for
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: Write($"显式加载产品
- en: '{c.CategoryName}'
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.CategoryName}'
- en: '? (Y/N): "'
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: ？（Y/N）："
- en: );
  id: totrans-1752
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: ConsoleKeyInfo key = ReadKey();
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: ConsoleKeyInfo key = ReadKey();
- en: WriteLine();
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine();
- en: if
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (key.Key == ConsoleKey.Y)
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: （key.Key == ConsoleKey.Y）
- en: '{'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CollectionEntry<Category, Product> products =
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: CollectionEntry<Category, Product> products =
- en: db.Entry(c).Collection(c2 => c2.Products);
  id: totrans-1759
  prefs: []
  type: TYPE_NORMAL
  zh: db.Entry(c).Collection(c2 => c2.Products);
- en: if
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 如果
- en: (!products.IsLoaded) products.Load();
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: （！products.IsLoaded）products.Load();
- en: '}'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: WriteLine($"
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{c.CategoryName}'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.CategoryName}'
- en: has
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: 有
- en: '{c.Products.Count}'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.Products.Count}'
- en: products."
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 产品。
- en: );
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '```'
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code:'
  id: totrans-1771
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码：
- en: Press `N` to disable eager loading.
  id: totrans-1772
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按`N`键禁用急切加载。
- en: Then press `Y` to enable explicit loading.
  id: totrans-1773
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后按`Y`键启用显式加载。
- en: For each category, press `Y` or `N` to load its products as you wish.
  id: totrans-1774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个类别，按`Y`或`N`加载其产品，如您所愿。
- en: 'I chose to load products for only two of the eight categories, Beverages and
    Seafood, as shown in the following output that has been edited for space:'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择只为八个类别中的两个加载产品，饮料和海鲜，如下所示的输出已经被编辑以节省空间：
- en: '```cs'
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Categories and how many products they have:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 类别及其产品数量：
- en: 'Enable eager loading? (Y/N): n'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: 启用急切加载？（Y/N）：n
- en: 'Enable explicit loading? (Y/N): y'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 启用显式加载？（Y/N）：y
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[], CommandType=''Text'',
    CommandTimeout=''30'']'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20100，状态：执行DbCommand [参数=[]，命令类型='文本'，命令超时='30']
- en: SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description" FROM "Categories"
    AS "c"
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "c"."CategoryId", "c"."CategoryName", "c"."Description" FROM "Categories"
    AS "c"
- en: 'Explicitly load products for Beverages? (Y/N): y'
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载饮料的产品？（Y/N）：y
- en: 'Level: Debug, Event Id: 20100, State: Executing DbCommand [Parameters=[@ p_0=''?''],
    CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: 级别：调试，事件ID：20100，状态：执行DbCommand [参数=[@ p_0='?']，命令类型='文本'，命令超时='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“p”。"ProductId"，“p"。"CategoryId"，“p"。"UnitPrice"，
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: '"p"."Discontinued"，“p"。"ProductName"，“p"。"UnitsInStock"'
- en: FROM "Products" AS "p"
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
- en: Beverages has 11 products.
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 饮料有11种产品。
- en: 'Explicitly load products for Condiments? (Y/N): n'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载调味品的产品？（Y/N）：n
- en: Condiments has 0 products.
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 调味品没有产品。
- en: 'Explicitly load products for Confections? (Y/N): n'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载糖果的产品？（Y/N）：n
- en: Confections has 0 products.
  id: totrans-1792
  prefs: []
  type: TYPE_NORMAL
  zh: 糖果没有产品。
- en: 'Explicitly load products for Dairy Products? (Y/N): n'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载乳制品的产品？（Y/N）：n
- en: Dairy Products has 0 products.
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 乳制品没有产品。
- en: 'Explicitly load products for Grains/Cereals? (Y/N): n'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载谷物/谷物的产品？（Y/N）：n
- en: Grains/Cereals has 0 products.
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: 谷物/谷物没有产品。
- en: 'Explicitly load products for Meat/Poultry? (Y/N): n'
  id: totrans-1797
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载肉类/家禽的产品？（Y/N）：n
- en: Meat/Poultry has 0 products.
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: 肉类/家禽没有产品。
- en: 'Explicitly load products for Produce? (Y/N): n'
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载生产的产品？（Y/N）：n
- en: Produce has 0 products.
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: 生产没有产品。
- en: 'Explicitly load products for Seafood? (Y/N): y'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 显式加载海鲜的产品？（Y/N）：y
- en: 'Level: Debug, Event ID: 20100, State: Executing DbCommand [Parameters=[@ p_0=''?''],
    CommandType=''Text'', CommandTimeout=''30'']'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: 调试级别：事件ID：20100，状态：执行DbCommand [参数=[@ p_0='?']，命令类型='文本'，命令超时='30']
- en: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
  id: totrans-1803
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT "p"."ProductId", "p"."CategoryId", "p"."UnitPrice",
- en: '"p"."Discontinued", "p"."ProductName", "p"."UnitsInStock"'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '"p"。"Discontinued"，“p"。"ProductName"，“p"。"UnitsInStock"'
- en: FROM "Products" AS "p"
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: FROM "Products" AS "p"
- en: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE ("p"."Discontinued" = 0) AND ("p"."CategoryId" = @ p_0)
- en: Seafood has 12 products.
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: 海鲜有12种产品。
- en: '```'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Carefully consider which loading pattern is best for your
    code. Lazy loading could literally make you a lazy database developer! Read more
    about loading patterns at the following link: [https://docs.microsoft.com/en-us/ef/core/querying/related-data](https://docs.microsoft.com/en-us/ef/core/querying/related-data)'
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好的实践**：仔细考虑哪种加载模式最适合您的代码。懒加载可能会让您成为一个懒惰的数据库开发人员！在以下链接中阅读有关加载模式的更多信息：[https://docs.microsoft.com/en-us/ef/core/querying/related-data](https://docs.microsoft.com/en-us/ef/core/querying/related-data)'
- en: Manipulating data with EF Core
  id: totrans-1810
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 EF Core 操纵数据
- en: Inserting, updating, and deleting entities using EF Core is an easy task to
    accomplish.
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EF Core 插入、更新和删除实体是一项易于完成的任务。
- en: '`DbContext` maintains change tracking automatically, so the local entities
    can have multiple changes tracked, including adding new entities, modifying existing
    entities, and removing entities. When you are ready to send those changes to the
    underlying database, call the `SaveChanges` method. The number of entities successfully
    changed will be returned.'
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext` 自动维护更改跟踪，因此本地实体可以跟踪多个更改，包括添加新实体、修改现有实体和删除实体。当您准备将这些更改发送到底层数据库时，请调用
    `SaveChanges` 方法。将返回成功更改的实体数。'
- en: Inserting entities
  id: totrans-1813
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入实体
- en: 'Let''s start by looking at how to add a new row to a table:'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看如何向表中添加新行：
- en: 'In `Program.cs` , create a new method named `AddProduct` , as shown in the
    following code:'
  id: totrans-1815
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，创建一个名为 `AddProduct` 的新方法，如下面的代码所示：
- en: '```cs'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: AddProduct
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: AddProduct
- en: (
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: int
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: categoryId,
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: categoryId，
- en: string
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: productName,
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: productName，
- en: decimal
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: '? price'
  id: totrans-1826
  prefs: []
  type: TYPE_NORMAL
  zh: ？价格
- en: )
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: ）
- en: '{'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1829
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1832
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: Product p = new
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: Product p = new
- en: ()
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CategoryId = categoryId,
  id: totrans-1836
  prefs: []
  type: TYPE_NORMAL
  zh: CategoryId = categoryId,
- en: ProductName = productName,
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: ProductName = productName,
- en: Cost = price
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 成本 = 价格
- en: '};'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: // mark product as added in change tracking
  id: totrans-1840
  prefs: []
  type: TYPE_NORMAL
  zh: // 标记产品为更改跟踪中的已添加
- en: db.Products.Add(p);
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.Add(p);
- en: // save tracked change to database
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: // 保存跟踪的更改到数据库
- en: int
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = db.SaveChanges();
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: affected = db.SaveChanges();
- en: return
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: (affected == 1
  id: totrans-1846
  prefs: []
  type: TYPE_NORMAL
  zh: (affected == 1
- en: );
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , create a new method named `ListProducts` that outputs the
    Id, name, cost, stock, and discontinued properties of each product sorted with
    the costliest first, as shown in the following code:'
  id: totrans-1851
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，创建一个名为 `ListProducts` 的新方法，该方法输出每个产品的 Id、名称、成本、库存和停产属性，按成本最高的产品排序，如下面的代码所示：
- en: '```cs'
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: void
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: ListProducts
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 列出产品
- en: ()
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1858
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0,-3} {1,-35} {2,8} {3,5} {4}"
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0,-3} {1,-35} {2,8} {3,5} {4}"
- en: ','
  id: totrans-1863
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: '"Id"'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: “Id”
- en: ', "Product Name"'
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: ，“产品名称”
- en: ', "Cost"'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: ，成本
- en: ', "Stock"'
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: ，"库存"
- en: ', "Disc."'
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: ，“折扣”
- en: );
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: foreach
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Product p in
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: （Product p in
- en: db.Products
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products
- en: .OrderByDescending(product => product.Cost))
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: .OrderByDescending(product => product.Cost))
- en: '{'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0:000} {1,-35} {2,8:$#,##0.00} {3,5} {4}"
  id: totrans-1875
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0:000} {1,-35} {2,8:$#,##0.00} {3,5} {4}"
- en: ','
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: p.ProductId, p.ProductName, p.Cost, p.Stock, p.Discontinued);
  id: totrans-1877
  prefs: []
  type: TYPE_NORMAL
  zh: p.ProductId, p.ProductName, p.Cost, p.Stock, p.Discontinued);
- en: '}'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Remember that `1,-35` means left-align argument 1 within a 35-character-wide
    column and `3,5` means right-align argument 3 within a 5-character-wide column.
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`1,-35` 表示左对齐参数 1 在 35 个字符宽的列中，`3,5` 表示右对齐参数 3 在 5 个字符宽的列中。
- en: 'In `Program.cs` , comment out previous method calls, and then call `AddProduct`
    and `ListProducts` , as shown in the following code:'
  id: totrans-1883
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉以前的方法调用，然后调用 `AddProduct` 和 `ListProducts`，如下面的代码所示：
- en: '```cs'
  id: totrans-1884
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: // QueryingCategories();
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: // QueryingCategories();
- en: // FilteredIncludes();
  id: totrans-1886
  prefs: []
  type: TYPE_NORMAL
  zh: // FilteredIncludes();
- en: // QueryingProducts();
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: // QueryingProducts();
- en: // QueryingWithLike();
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: // QueryingWithLike();
- en: if
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: '(AddProduct(categoryId: 6'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: '(AddProduct(categoryId: 6'
- en: ','
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: 'productName: "Bob''s Burgers"'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: 'productName: "Bob''s Burgers"'
- en: ', price: 500'
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: ，价格：500
- en: M))
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: M))
- en: '{'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Add product successful."
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("添加产品成功。"
- en: );
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ListProducts();
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: ListProducts();
- en: '```'
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, view the result, and note the new product has been added, as
    shown in the following partial output:'
  id: totrans-1901
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意新产品已添加，如下面的部分输出所示：
- en: '```cs'
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Add product successful.
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: 添加产品成功。
- en: Id  Product Name              Cost Stock Disc.
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: Id 产品名称 成本 库存 折扣。
- en: 078 Bob's Burgers          $500.00       False
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: 078 Bob's Burgers          $500.00       False
- en: 038 Côte de Blaye          $263.50    17 False
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 038 Côte de Blaye          $263.50    17 False
- en: 020 Sir Rodney's Marmalade  $81.00    40 False
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 020 Sir Rodney's Marmalade  $81.00    40 False```
- en: '...'
  id: totrans-1908
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Updating entities
  id: totrans-1910
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新实体
- en: 'Now, let''s modify an existing row in a table:'
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改表中的现有行：
- en: 'In `Program.cs` , add a method to increase the price of the first product with
    a name that begins with a specified value (we''ll use Bob in our example) by a
    specified amount like $20, as shown in the following code:'
  id: totrans-1912
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，添加一个方法，通过指定的值（我们的示例中使用 Bob）增加以指定值开头的第一个产品的价格，如 $20，如下面的代码所示：
- en: '```cs'
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 静态
- en: bool
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔
- en: IncreaseProductPrice
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: IncreaseProductPrice
- en: (
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: productNameStartsWith,
  id: totrans-1919
  prefs: []
  type: TYPE_NORMAL
  zh: productNameStartsWith,
- en: decimal
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: decimal
- en: amount
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 金额
- en: )
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1923
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: 使用
- en: (Northwind db = new
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: （）
- en: '{'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // get first product whose name starts with name
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: // 获取名称以 name 开头的第一个产品
- en: Product updateProduct = db.Products.First(
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: Product updateProduct = db.Products.First(
- en: p => p.ProductName.StartsWith(productNameStartsWith));
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: p => p.ProductName.StartsWith(productNameStartsWith));
- en: updateProduct.Cost += amount;
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: updateProduct.Cost += amount;
- en: int
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = db.SaveChanges();
  id: totrans-1933
  prefs: []
  type: TYPE_NORMAL
  zh: affected = db.SaveChanges();
- en: return
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: (affected == 1
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: (affected == 1
- en: );
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , comment out the whole `if` block that calls `AddProduct`
    , and add a call to `IncreaseProductPrice` before the call to list products, as
    shown highlighted in the following code:'
  id: totrans-1940
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，注释掉整个调用 `AddProduct` 的 `if` 块，并在调用列出产品之前添加对 `IncreaseProductPrice`
    的调用，如下面的代码中所突出显示的那样：
- en: '```cs'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: '**/***'
  id: totrans-1942
  prefs: []
  type: TYPE_NORMAL
  zh: '**/***'
- en: 'if (AddProduct(categoryId: 6,'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: 'if (AddProduct(categoryId: 6,'
- en: 'productName: "Bob''s Burgers", price: 500M))'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: 'productName: "Bob''s Burgers", price: 500M))'
- en: '{'
  id: totrans-1945
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("Add product successful.");
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("添加产品成功。");
- en: '}'
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '***/**'
  id: totrans-1948
  prefs: []
  type: TYPE_NORMAL
  zh: '***/**'
- en: '**if**'
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果**'
- en: '**(IncreaseProductPrice(**'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: '**(IncreaseProductPrice(**'
- en: '**productNameStartsWith:**'
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: '**productNameStartsWith:**'
- en: '**"Bob"**'
  id: totrans-1952
  prefs: []
  type: TYPE_NORMAL
  zh: '**"Bob"**'
- en: '**, amount:**'
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: '**，金额：**'
- en: '**20**'
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: '**20**'
- en: '**M))**'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: '**M))**'
- en: '**{**'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**WriteLine(**'
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**"Update product price successful."**'
  id: totrans-1958
  prefs: []
  type: TYPE_NORMAL
  zh: '**"更新产品价格成功。"**'
- en: '**);**'
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: '**）；**'
- en: '**}**'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: ListProducts();
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: ListProducts();
- en: '```'
  id: totrans-1962
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, view the result, and note that the existing entity for Bob''s
    Burgers has increased in price by $20, as shown in the following partial output:'
  id: totrans-1963
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，查看结果，并注意Bob's Burgers的现有实体的价格增加了$20，如下面的部分输出所示：
- en: '```cs'
  id: totrans-1964
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Update product price successful.
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: 更新产品价格成功。
- en: Id  Product Name              Cost Stock Disc.
  id: totrans-1966
  prefs: []
  type: TYPE_NORMAL
  zh: Id 产品名称 成本 库存 折扣
- en: 078 Bob's Burgers          $520.00       False
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: 078 Bob's Burgers          $520.00       False
- en: 038 Côte de Blaye          $263.50    17 False
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 038 Côte de Blaye          $263.50    17 False
- en: 020 Sir Rodney's Marmalade  $81.00    40 False
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: 020 Sir Rodney's Marmalade  $81.00    40 False
- en: '...'
  id: totrans-1970
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '```'
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Deleting entities
  id: totrans-1972
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除实体
- en: You can remove individual entities with the `Remove` method. `RemoveRange` is
    more efficient when you want to delete multiple entities.
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`Remove`方法删除单个实体。当您想要删除多个实体时，`RemoveRange`更有效。
- en: 'Now let''s see how to delete rows from a table:'
  id: totrans-1974
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何从表中删除行：
- en: 'At the bottom of `Program.cs` , add a method to delete all products with a
    name that begins with a specified value (Bob in our example), as shown in the
    following code:'
  id: totrans-1975
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`的底部，添加一个方法来删除所有以指定值开头的产品（在我们的示例中为Bob），如下面的代码所示：
- en: '```cs'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-1977
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: int
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: DeleteProducts
  id: totrans-1979
  prefs: []
  type: TYPE_NORMAL
  zh: DeleteProducts
- en: (
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: productNameStartsWith
  id: totrans-1982
  prefs: []
  type: TYPE_NORMAL
  zh: productNameStartsWith
- en: )
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (Northwind db = new
  id: totrans-1986
  prefs: []
  type: TYPE_NORMAL
  zh: （Northwind db = new
- en: ())
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: IQueryable<Product>? products = db.Products?.Where(
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product>? products = db.Products?.Where(
- en: p => p.ProductName.StartsWith(productNameStartsWith));
  id: totrans-1990
  prefs: []
  type: TYPE_NORMAL
  zh: p => p.ProductName.StartsWith(productNameStartsWith));
- en: if
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (products is
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: （products是
- en: 'null'
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-1994
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No products found to delete."
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("未找到要删除的产品。"
- en: );
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: return
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '0'
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ;
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: db.Products.RemoveRange(products);
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.RemoveRange(products);
- en: '}'
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: int
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = db.SaveChanges();
  id: totrans-2007
  prefs: []
  type: TYPE_NORMAL
  zh: affected = db.SaveChanges();
- en: return
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: affected;
  id: totrans-2009
  prefs: []
  type: TYPE_NORMAL
  zh: affected;
- en: '}'
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In `Program.cs` , comment out the whole `if` statement block that calls `IncreaseProductPrice`
    , and add a call to `DeleteProducts` , as shown in the following code:'
  id: totrans-2013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，注释掉调用`IncreaseProductPrice`的整个`if`语句块，并添加一个调用`DeleteProducts`，如下面的代码所示：
- en: '```cs'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: int
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: 'deleted = DeleteProducts(productNameStartsWith: "Bob"'
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 'deleted = DeleteProducts(productNameStartsWith: "Bob"'
- en: );
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{deleted}'
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: '{deleted}'
- en: product(s) were deleted."
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: 已删除个产品。"
- en: );
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '```'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result, as shown in the following output:'
  id: totrans-2023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 1 product(s) were deleted.
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: 1个产品已被删除。
- en: '```'
  id: totrans-2026
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: If multiple product names started with Bob, then they are all deleted. As an
    optional challenge, modify the statements to add three new products that start
    with Bob and then delete them.
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个产品名称以Bob开头，则它们都将被删除。作为一个可选的挑战，修改语句以添加三个以Bob开头的新产品，然后将它们删除。
- en: Pooling database contexts
  id: totrans-2028
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池化数据库上下文
- en: The `DbContext` class is disposable and is designed following the single-unit-of-work
    principle. In the previous code examples, we created all the `DbContext` -derived
    Northwind instances in a `using` block so that `Dispose` is properly called at
    the end of each unit of work.
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: '`DbContext`类是可处置的，并且遵循单工作单元原则。在前面的代码示例中，我们在`using`块中创建了所有`DbContext` -派生的Northwind实例，以便在每个工作单元结束时正确调用`Dispose`。'
- en: A feature of ASP.NET Core that is related to EF Core is that it makes your code
    more efficient by pooling database contexts when building websites and services.
    This allows you to create and dispose of as many `DbContext` -derived objects
    as you want, knowing that your code is still as efficient as possible.
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 与EF Core相关的ASP.NET Core的一个特性是，在构建网站和服务时，它通过池化数据库上下文使您的代码更加高效。这允许您创建和处置尽可能多的`DbContext`
    -派生对象，而知道您的代码仍然尽可能高效。
- en: Working with transactions
  id: totrans-2031
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事务
- en: Every time you call the `SaveChanges` method, an **implicit** **transaction**
    is started so that if something goes wrong, it will automatically roll back all
    the changes. If the multiple changes within the transaction succeed, then the
    transaction and all changes are committed.
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用`SaveChanges`方法时，都会启动一个**隐式** **事务**，以便如果出现问题，它将自动回滚所有更改。如果事务内的多个更改成功，则提交事务和所有更改。
- en: Transactions maintain the integrity of your database by applying locks to prevent
    reads and writes while a sequence of changes is occurring.
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: 事务通过应用锁来维护数据库的完整性，以防止在一系列更改发生时进行读取和写入。
- en: 'Transactions are **ACID** , which is an acronym explained in the following
    list:'
  id: totrans-2034
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是**ACID**，这是一个在下面列表中解释的首字母缩写：
- en: '**A is for atomic** . Either all the operations in the transaction commit,
    or none of them do.'
  id: totrans-2035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A代表原子**。事务中的所有操作都提交，或者都不提交。'
- en: '**C is for consistent** . The state of the database before and after a transaction
    is consistent. This is dependent on your code logic; for example, when transferring
    money between bank accounts, it is up to your business logic to ensure that if
    you debit $100 in one account, you credit $100 in the other account.'
  id: totrans-2036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C代表一致**。事务之前和之后数据库的状态是一致的。这取决于您的代码逻辑；例如，在银行账户之间转账时，您的业务逻辑要确保如果在一个账户中借记$100，则在另一个账户中贷记$100。'
- en: '**I is for isolated** . During a transaction, changes are hidden from other
    processes. There are multiple isolation levels that you can pick from (refer to
    the following table). The stronger the level, the better the integrity of the
    data. However, more locks must be applied, which will negatively affect other
    processes. Snapshot is a special case because it creates multiple copies of rows
    to avoid locks, but this will increase the size of your database while transactions
    occur.'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I代表隔离**。在事务期间，更改对其他进程隐藏。您可以从多个隔离级别中选择（请参阅下表）。级别越高，数据的完整性就越好。但是，必须应用更多的锁，这将对其他进程产生负面影响。快照是一个特殊情况，因为它创建多个行的副本以避免锁定，但这将增加数据库的大小，同时发生事务。'
- en: '**D is for durable** . If a failure occurs during a transaction, it can be
    recovered. This is often implemented as a two-phase commit and transaction logs.
    Once the transaction is committed it is guaranteed to endure even if there are
    subsequent errors. The opposite of durable is volatile.'
  id: totrans-2038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D是持久的**。如果在事务期间发生故障，可以进行恢复。这通常是作为两阶段提交和事务日志实现的。一旦事务提交，即使有后续错误，它也保证会持久。持久的相反是易失性的。'
- en: Controlling transactions using isolation levels
  id: totrans-2039
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用隔离级别控制事务
- en: 'A developer can control transactions by setting an **isolation level** , as
    described in the following table:'
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员可以通过设置**隔离级别**来控制事务，如下表所述：
- en: '| Isolation level | Lock(s) | Integrity problems allowed |'
  id: totrans-2041
  prefs: []
  type: TYPE_TB
  zh: '| 隔离级别 | 锁 | 允许的完整性问题 |'
- en: '| `ReadUncommitted` | None | Dirty reads, nonrepeatable reads, and phantom
    data |'
  id: totrans-2042
  prefs: []
  type: TYPE_TB
  zh: '| `ReadUncommitted` | 无 | 脏读、不可重复读和幻读 |'
- en: '| `ReadCommitted` | When editing, it applies read lock(s) to block other users
    from reading the record(s) until the transaction ends | Nonrepeatable reads and
    phantom data |'
  id: totrans-2043
  prefs: []
  type: TYPE_TB
  zh: '| `ReadCommitted` | 在编辑时，它会对记录应用读锁，阻止其他用户在事务结束之前读取记录 | 可重复读和幻读 |'
- en: '| `RepeatableRead` | When reading, it applies edit lock(s) to block other users
    from editing the record(s) until the transaction ends | Phantom data |'
  id: totrans-2044
  prefs: []
  type: TYPE_TB
  zh: '| `RepeatableRead` | 在读取时，它会对记录应用编辑锁，阻止其他用户在事务结束之前编辑记录 | 幻读 |'
- en: '| `Serializable` | Applies key-range locks to prevent any action that would
    affect the results, including inserts and deletes | None |'
  id: totrans-2045
  prefs: []
  type: TYPE_TB
  zh: '| `Serializable` | 应用键范围锁，以防止任何可能影响结果的操作，包括插入和删除 | 无 |'
- en: '| `Snapshot` | None | None |'
  id: totrans-2046
  prefs: []
  type: TYPE_TB
  zh: '| `Snapshot` | 无 | 无 |'
- en: Defining an explicit transaction
  id: totrans-2047
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义显式事务
- en: 'You can control explicit transactions using the `Database` property of the
    database context:'
  id: totrans-2048
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用数据库上下文的`Database`属性来控制显式事务：
- en: 'In `Program.cs` , import the EF Core storage namespace to use the `IDbContextTransaction`
    interface, as shown in the following code:'
  id: totrans-2049
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入EF Core存储命名空间以使用`IDbContextTransaction`接口，如下面的代码所示：
- en: '```cs'
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore.Storage; // IDbContextTransaction
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore.Storage; // IDbContextTransaction
- en: '```'
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'In the `DeleteProducts` method, after the instantiation of the `db` variable,
    add statements to start an explicit transaction and output its isolation level.
    At the bottom of the method, commit the transaction, and close the brace, as shown
    highlighted in the following code:'
  id: totrans-2054
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DeleteProducts`方法中，在`db`变量实例化之后，添加语句以启动显式事务并输出其隔离级别。在方法底部，提交事务，并关闭括号，如下面代码中所示：
- en: '```cs'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: static
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: int
  id: totrans-2057
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: DeleteProducts
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: DeleteProducts
- en: (
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: string
  id: totrans-2060
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: name
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: name
- en: )
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-2063
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: using
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (Northwind db = new
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: (Northwind db = new
- en: ())
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '**using**'
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: '**using**'
- en: '**(IDbContextTransaction t = db.Database.BeginTransaction())**'
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: '**(IDbContextTransaction t = db.Database.BeginTransaction())**'
- en: '**{**'
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: '**{**'
- en: '**WriteLine(**'
  id: totrans-2071
  prefs: []
  type: TYPE_NORMAL
  zh: '**WriteLine(**'
- en: '**"Transaction isolation level: {0}"**'
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: '**"事务隔离级别：{0}"**'
- en: '**,**'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: '**，**'
- en: '**arg0: t.GetDbTransaction().IsolationLevel);**'
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: '**arg0: t.GetDbTransaction().IsolationLevel);**'
- en: IQueryable<Product>? products = db.Products?.Where(
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: IQueryable<Product>? products = db.Products?.Where(
- en: p => p.ProductName.StartsWith(name));
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: p => p.ProductName.StartsWith(name));
- en: if
  id: totrans-2077
  prefs: []
  type: TYPE_NORMAL
  zh: if
- en: (products is
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: (products is
- en: 'null'
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 'null'
- en: )
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-2081
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("No products found to delete."
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("No products found to delete."
- en: );
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: return
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: '0'
  id: totrans-2085
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: ;
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: '}'
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: else
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: else
- en: '{'
  id: totrans-2089
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: db.Products.RemoveRange(products);
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: db.Products.RemoveRange(products);
- en: '}'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: int
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: affected = db.SaveChanges();
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: affected = db.SaveChanges();
- en: '**t.Commit();**'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: '**t.Commit();**'
- en: return
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: return
- en: affected;
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: affected;
- en: '**}**'
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: '**}**'
- en: '}'
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result using SQL Server, as shown in the following
    output:'
  id: totrans-2101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并使用SQL Server查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Transaction isolation level: ReadCommitted'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: 事务隔离级别：ReadCommitted
- en: '```'
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code and view the result using SQLite, as shown in the following output:'
  id: totrans-2105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并使用SQLite查看结果，如下面的输出所示：
- en: '```cs'
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'Transaction isolation level: Serializable'
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 事务隔离级别：Serializable
- en: '```'
  id: totrans-2108
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Code First EF Core models
  id: totrans-2109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Code First EF Core models
- en: Sometimes you will not have an existing database. Instead, you define the EF
    Core model as Code First, and then EF Core can generate a matching database using
    create and drop APIs.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能没有现有的数据库。相反，您将EF Core模型定义为Code First，然后EF Core可以使用create和drop API生成匹配的数据库。
- en: '**Good Practice** : The create and drop APIs should only be used during development.
    Once you release the app, you do not want it to delete a production database!'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：create和drop API应该只在开发过程中使用。一旦发布应用程序，您不希望它删除生产数据库！'
- en: For example, we might need to create an application for managing students and
    courses for an academy. One student can sign up to attend multiple courses. One
    course can be attended by multiple students. This is an example of a many-to-many
    relationship between students and courses.
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能需要创建一个用于管理学生和学院课程的应用程序。一个学生可以报名参加多门课程。一门课程可以由多名学生参加。这是学生和课程之间的多对多关系的一个例子。
- en: 'Let''s model this example:'
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对这个例子建模：
- en: Use your preferred code editor to add a new console app named `CoursesAndStudents`
    to the `Chapter10` solution/workspace.
  id: totrans-2114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器向`Chapter10`解决方案/工作区添加一个名为`CoursesAndStudents`的新控制台应用程序。
- en: In Visual Studio, set the startup project for the solution to the current selection.
  id: totrans-2115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，将解决方案的启动项目设置为当前选择。
- en: In Visual Studio Code, select `CoursesAndStudents` as the active OmniSharp project.
  id: totrans-2116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，选择`CoursesAndStudents`作为活动的OmniSharp项目。
- en: 'In the `CoursesAndStudents` project, add package references for the following
    packages:'
  id: totrans-2117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CoursesAndStudents`项目中，为以下包添加包引用：
- en: '`Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-2118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Sqlite`'
- en: '`Microsoft.EntityFrameworkCore.SqlServer`'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.SqlServer`'
- en: '`Microsoft.EntityFrameworkCore.Design`'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Microsoft.EntityFrameworkCore.Design`'
- en: Build the `CoursesAndStudents` project to restore packages.
  id: totrans-2121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`CoursesAndStudents`项目以恢复包。
- en: Add classes named `Academy.cs` , `Student.cs` , and `Course.cs` .
  id: totrans-2122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为`Academy.cs`，`Student.cs`和`Course.cs`的类。
- en: 'Modify `Student.cs` , and note that it is a POCO (plain old CLR object) with
    no attributes decorating the class, as shown in the following code:'
  id: totrans-2123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Student.cs`，注意它是一个没有属性装饰类的POCO（普通的CLR对象），如下面的代码所示：
- en: '```cs'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: namespace
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: CoursesAndStudents
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: CoursesAndStudents
- en: ;
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Student
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: Student
- en: '{'
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: StudentId { get
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: StudentId { get
- en: ; set
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? FirstName { get'
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: '? FirstName { get'
- en: ; set
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? LastName { get'
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: '? LastName { get'
- en: ; set
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: ICollection<Course>? Courses { get
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<Course>? Courses { get
- en: ; set
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify `Course.cs` , and note that we have decorated the `Title` property with
    some attributes to provide more information to the model, as shown in the following
    code:'
  id: totrans-2153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Modify `Course.cs` , and note that we have decorated the `Title` property with
    some attributes to provide more information to the model, as shown in the following
    code:'
- en: '```cs'
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: System.ComponentModel.DataAnnotations;
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: System.ComponentModel.DataAnnotations;
- en: namespace
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: CoursesAndStudents
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: CoursesAndStudents
- en: ;
  id: totrans-2159
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Course
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: Course
- en: '{'
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: int
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
  zh: int
- en: CourseId { get
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: CourseId { get
- en: ; set
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '[Required'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '[Required'
- en: ']'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[StringLength(60)'
  id: totrans-2171
  prefs: []
  type: TYPE_NORMAL
  zh: '[StringLength(60)'
- en: ']'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: public
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: string
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: '? Title { get'
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: '? Title { get'
- en: ; set
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: ICollection<Student>? Students { get
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: ICollection<Student>? Students { get
- en: ; set
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2181
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: '}'
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Modify `Academy.cs` , as shown in the following code:'
  id: totrans-2184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Modify `Academy.cs` , as shown in the following code:'
- en: '```cs'
  id: totrans-2185
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore;
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore;
- en: using
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: namespace
  id: totrans-2191
  prefs: []
  type: TYPE_NORMAL
  zh: namespace
- en: CoursesAndStudents
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: CoursesAndStudents
- en: ;
  id: totrans-2193
  prefs: []
  type: TYPE_NORMAL
  zh: ;
- en: public
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: class
  id: totrans-2195
  prefs: []
  type: TYPE_NORMAL
  zh: class
- en: Academy
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: Academy
- en: ': DbContext'
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: ': DbContext'
- en: '{'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public
  id: totrans-2199
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DbSet<Student>? Students { get
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Student>? Students { get
- en: ; set
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: public
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: public
- en: DbSet<Course>? Courses { get
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: DbSet<Course>? Courses { get
- en: ; set
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: ; set
- en: ; }
  id: totrans-2206
  prefs: []
  type: TYPE_NORMAL
  zh: ; }
- en: protected
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: override
- en: void
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: void
- en: OnConfiguring
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: OnConfiguring
- en: (
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: DbContextOptionsBuilder optionsBuilder
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: DbContextOptionsBuilder optionsBuilder
- en: )
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: string
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: string
- en: path = Path.Combine(
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: path = Path.Combine(
- en: Environment.CurrentDirectory, "Academy.db"
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: Environment.CurrentDirectory, "Academy.db"
- en: );
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine($"Using
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"Using
- en: '{path}'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: '{path}'
- en: database file."
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: database file."
- en: );
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: optionsBuilder.UseSqlite($"Filename=
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: optionsBuilder.UseSqlite($"Filename=
- en: '{path}'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '{path}'
- en: '"'
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-2226
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: // optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=Academy;Integrated
    Security=true;MultipleActiveResultSets=true;");
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: // optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=Academy;Integrated
    Security=true;MultipleActiveResultSets=true;");
- en: '}'
  id: totrans-2228
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: protected
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: protected
- en: override
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: override
- en: void
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: void```
- en: OnModelCreating
  id: totrans-2232
  prefs: []
  type: TYPE_NORMAL
  zh: OnModelCreating
- en: (
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: (
- en: ModelBuilder modelBuilder
  id: totrans-2234
  prefs: []
  type: TYPE_NORMAL
  zh: ModelBuilder modelBuilder
- en: )
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-2236
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: // Fluent API validation rules
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: // Fluent API validation rules
- en: modelBuilder.Entity<Student>()
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Student>()
- en: .Property(s => s.LastName).HasMaxLength(30
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: .Property(s => s.LastName).HasMaxLength(30
- en: ).IsRequired();
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: ).IsRequired();
- en: // populate database with sample data
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: // populate database with sample data
- en: Student alice = new
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: Student alice = new
- en: () { StudentId = 1
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: () { StudentId = 1
- en: ','
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: FirstName = "Alice"
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Alice"
- en: ', LastName = "Jones"'
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: ', LastName = "Jones"'
- en: '};'
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Student bob = new
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: Student bob = new
- en: () { StudentId = 2
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: () { StudentId = 2
- en: ','
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: FirstName = "Bob"
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Bob"
- en: ', LastName = "Smith"'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: ', LastName = "Smith"'
- en: '};'
  id: totrans-2253
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Student cecilia = new
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: Student cecilia = new
- en: () { StudentId = 3
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: () { StudentId = 3
- en: ','
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: FirstName = "Cecilia"
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName = "Cecilia"
- en: ', LastName = "Ramirez"'
  id: totrans-2258
  prefs: []
  type: TYPE_NORMAL
  zh: ', LastName = "Ramirez"'
- en: '};'
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Course csharp = new
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: Course csharp = new
- en: ()
  id: totrans-2261
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CourseId = 1
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: CourseId = 1
- en: ','
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Title = "C# 10 and .NET 6"
  id: totrans-2265
  prefs: []
  type: TYPE_NORMAL
  zh: Title = "C# 10 and .NET 6"
- en: ','
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '};'
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Course webdev = new
  id: totrans-2268
  prefs: []
  type: TYPE_NORMAL
  zh: Course webdev = new
- en: ()
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CourseId = 2
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: CourseId = 2
- en: ','
  id: totrans-2272
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Title = "Web Development"
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: Title = "Web Development"
- en: ','
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '};'
  id: totrans-2275
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: Course python = new
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: Course python = new
- en: ()
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: ()
- en: '{'
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: CourseId = 3
  id: totrans-2279
  prefs: []
  type: TYPE_NORMAL
  zh: CourseId = 3
- en: ','
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: Title = "Python for Beginners"
  id: totrans-2281
  prefs: []
  type: TYPE_NORMAL
  zh: Title = "Python for Beginners"
- en: ','
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: '};'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: modelBuilder.Entity<Student>()
  id: totrans-2284
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Student>()
- en: .HasData(alice, bob, cecilia);
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: .HasData(alice, bob, cecilia);
- en: modelBuilder.Entity<Course>()
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Course>()
- en: .HasData(csharp, webdev, python);
  id: totrans-2287
  prefs: []
  type: TYPE_NORMAL
  zh: .HasData(csharp, webdev, python);
- en: modelBuilder.Entity<Course>()
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: modelBuilder.Entity<Course>()
- en: .HasMany(c => c.Students)
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: .HasMany(c => c.Students)
- en: .WithMany(s => s.Courses)
  id: totrans-2290
  prefs: []
  type: TYPE_NORMAL
  zh: .WithMany(s => s.Courses)
- en: .UsingEntity(e => e.HasData(
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: .UsingEntity(e => e.HasData(
- en: // all students signed up for C# course
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: // all students signed up for C# course
- en: new
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ CoursesCourseId = 1'
  id: totrans-2294
  prefs: []
  type: TYPE_NORMAL
  zh: '{ CoursesCourseId = 1'
- en: ', StudentsStudentId = 1'
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: ', StudentsStudentId = 1'
- en: '},'
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ CoursesCourseId = 1'
  id: totrans-2298
  prefs: []
  type: TYPE_NORMAL
  zh: '{ CoursesCourseId = 1'
- en: ', StudentsStudentId = 2'
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: ', StudentsStudentId = 2'
- en: '},'
  id: totrans-2300
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: new
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ CoursesCourseId = 1'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: '{ CoursesCourseId = 1'
- en: ', StudentsStudentId = 3'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: ', StudentsStudentId = 3'
- en: '},'
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: // only Bob signed up for Web Dev
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: // only Bob signed up for Web Dev
- en: new
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ CoursesCourseId = 2'
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: '{ CoursesCourseId = 2'
- en: ', StudentsStudentId = 2'
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: ', StudentsStudentId = 2'
- en: '},'
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: // only Cecilia signed up for Python
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: // only Cecilia signed up for Python
- en: new
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: new
- en: '{ CoursesCourseId = 3'
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: '{ CoursesCourseId = 3'
- en: ', StudentsStudentId = 3'
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: ', StudentsStudentId = 3'
- en: '}'
  id: totrans-2314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ));
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: '}'
  id: totrans-2316
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Good Practice** : Use an anonymous type to supply data for the intermediate
    table in a many-to-many relationship. The property names follow the naming convention
    `NavigationPropertyNamePropertyName` , for example, `Courses` is the navigation
    property name and `CourseId` is the property name so `CoursesCourseId` will be
    the property name of the anonymous type.'
  id: totrans-2319
  prefs: []
  type: TYPE_NORMAL
  zh: '**Good Practice** : Use an anonymous type to supply data for the intermediate
    table in a many-to-many relationship. The property names follow the naming convention
    `NavigationPropertyNamePropertyName` , for example, `Courses` is the navigation
    property name and `CourseId` is the property name so `CoursesCourseId` will be
    the property name of the anonymous type.'
- en: 'In `Program.cs` , at the top of the file, import the namespace for EF Core
    and working with tasks, and statically import `Console` , as shown in the following
    code:'
  id: totrans-2320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'In `Program.cs` , at the top of the file, import the namespace for EF Core
    and working with tasks, and statically import `Console` , as shown in the following
    code:'
- en: '```cs'
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: Microsoft.EntityFrameworkCore; // for GenerateCreateScript()
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft.EntityFrameworkCore; // for GenerateCreateScript()
- en: using
  id: totrans-2324
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: CoursesAndStudents; // Academy
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: CoursesAndStudents; // Academy
- en: using
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: static
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: static
- en: System.Console;
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: System.Console;
- en: '```'
  id: totrans-2329
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: 'In `Program.cs` , add statements to create an instance of the `Academy` database
    context and use it to delete the database if it exists, create the database from
    the model and output the SQL script it uses, and then enumerate the students and
    their courses, as shown in the following code:'
  id: totrans-2330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'In `Program.cs` , add statements to create an instance of the `Academy` database
    context and use it to delete the database if it exists, create the database from
    the model and output the SQL script it uses, and then enumerate the students and
    their courses, as shown in the following code:'
- en: '```cs'
  id: totrans-2331
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: using
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: using
- en: (Academy a = new
  id: totrans-2333
  prefs: []
  type: TYPE_NORMAL
  zh: (Academy a = new
- en: ())
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: ())
- en: '{'
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: bool
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: deleted = await
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: deleted = await
- en: a.Database.EnsureDeletedAsync();
  id: totrans-2338
  prefs: []
  type: TYPE_NORMAL
  zh: a.Database.EnsureDeletedAsync();
- en: 'WriteLine($"Database deleted:'
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine($"Database deleted:'
- en: '{deleted}'
  id: totrans-2340
  prefs: []
  type: TYPE_NORMAL
  zh: '{deleted}'
- en: '"'
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: bool
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: bool
- en: created = await
  id: totrans-2344
  prefs: []
  type: TYPE_NORMAL
  zh: created = await
- en: a.Database.EnsureCreatedAsync();
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: a.Database.EnsureCreatedAsync();
- en: 'WriteLine($"Database created:'
  id: totrans-2346
  prefs: []
  type: TYPE_NORMAL
  zh: 'WriteLine($"Database created:'
- en: '{created}'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: '{created}'
- en: '"'
  id: totrans-2348
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine("SQL script used to create database:"
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("SQL script used to create database:"
- en: );
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: WriteLine(a.Database.GenerateCreateScript());
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine(a.Database.GenerateCreateScript());
- en: foreach
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Student s in
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: (Student s in
- en: a.Students.Include(s => s.Courses))
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: a.Students.Include(s => s.Courses))
- en: '{'
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine("{0} {1} attends the following {2} courses:"
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine("{0} {1}参加以下{2}课程："
- en: ','
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: ','
- en: s.FirstName, s.LastName, s.Courses.Count);
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: s.FirstName, s.LastName, s.Courses.Count);
- en: foreach
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: foreach
- en: (Course c in
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
  zh: (Course c in
- en: s.Courses)
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: s.Courses)
- en: '{'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: WriteLine($"
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: WriteLine($"
- en: '{c.Title}'
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
  zh: '{c.Title}'
- en: '"'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: '"'
- en: );
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: '}'
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Run the code, and note that the first time you run the code it will not need
    to delete the database because it does not exist yet, as shown in the following
    output:'
  id: totrans-2372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意第一次运行代码时，它不需要删除数据库，因为数据库尚不存在，如下所示：
- en: '```cs'
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: Using C:\Code\Chapter10\CoursesAndStudents\bin\Debug\net6.0\Academy.db database
    file.
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C:\Code\Chapter10\CoursesAndStudents\bin\Debug\net6.0\Academy.db数据库文件。
- en: 'Database deleted: False'
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库已删除：False
- en: 'Database created: True'
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库已创建：True
- en: 'SQL script used to create database:'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建数据库的SQL脚本：
- en: CREATE TABLE "Courses" (
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE TABLE "Courses" (
- en: '"CourseId" INTEGER NOT NULL CONSTRAINT "PK_Courses" PRIMARY KEY AUTOINCREMENT,'
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: '"CourseId" INTEGER NOT NULL CONSTRAINT "PK_Courses" PRIMARY KEY AUTOINCREMENT,'
- en: '"Title" TEXT NOT NULL'
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: '"Title" TEXT NOT NULL'
- en: );
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: CREATE TABLE "Students" (
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE TABLE "Students" (
- en: '"StudentId" INTEGER NOT NULL CONSTRAINT "PK_Students" PRIMARY KEY AUTOINCREMENT,'
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: '"StudentId" INTEGER NOT NULL CONSTRAINT "PK_Students" PRIMARY KEY AUTOINCREMENT,'
- en: '"FirstName" TEXT NULL,'
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: '"FirstName" TEXT NULL,'
- en: '"LastName" TEXT NOT NULL'
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: '"LastName" TEXT NOT NULL'
- en: );
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: CREATE TABLE "CourseStudent" (
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE TABLE "CourseStudent" (
- en: '"CoursesCourseId" INTEGER NOT NULL,'
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
  zh: '"CoursesCourseId" INTEGER NOT NULL,'
- en: '"StudentsStudentId" INTEGER NOT NULL,'
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: '"StudentsStudentId" INTEGER NOT NULL,'
- en: CONSTRAINT "PK_CourseStudent" PRIMARY KEY ("CoursesCourseId", "StudentsStudentId"),
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: CONSTRAINT "PK_CourseStudent" PRIMARY KEY ("CoursesCourseId", "StudentsStudentId"),
- en: CONSTRAINT "FK_CourseStudent_Courses_CoursesCourseId" FOREIGN KEY ("CoursesCourseId")
    REFERENCES "Courses" ("CourseId") ON DELETE CASCADE,
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: CONSTRAINT "FK_CourseStudent_Courses_CoursesCourseId" FOREIGN KEY ("CoursesCourseId")
    REFERENCES "Courses" ("CourseId") ON DELETE CASCADE,
- en: CONSTRAINT "FK_CourseStudent_Students_StudentsStudentId" FOREIGN KEY ("StudentsStudentId")
    REFERENCES "Students" ("StudentId") ON DELETE CASCADE
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: CONSTRAINT "FK_CourseStudent_Students_StudentsStudentId" FOREIGN KEY ("StudentsStudentId")
    REFERENCES "Students" ("StudentId") ON DELETE CASCADE
- en: );
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: );
- en: INSERT INTO "Courses" ("CourseId", "Title")
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Courses" ("CourseId", "Title")
- en: VALUES (1, 'C# 10 and .NET 6');
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (1, 'C# 10 and .NET 6');
- en: INSERT INTO "Courses" ("CourseId", "Title")
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Courses" ("CourseId", "Title")
- en: VALUES (2, 'Web Development');
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (2, 'Web Development');
- en: INSERT INTO "Courses" ("CourseId", "Title")
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Courses" ("CourseId", "Title")
- en: VALUES (3, 'Python for Beginners');
  id: totrans-2399
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (3, 'Python for Beginners');
- en: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
- en: VALUES (1, 'Alice', 'Jones');
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (1, 'Alice', 'Jones');
- en: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
  id: totrans-2402
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
- en: VALUES (2, 'Bob', 'Smith');
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (2, 'Bob', 'Smith');
- en: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "Students" ("StudentId", "FirstName", "LastName")
- en: VALUES (3, 'Cecilia', 'Ramirez');
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (3, 'Cecilia', 'Ramirez');
- en: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
  id: totrans-2406
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
- en: VALUES (1, 1);
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (1, 1);
- en: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
- en: VALUES (1, 2);
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (1, 2);
- en: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
  id: totrans-2410
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
- en: VALUES (2, 2);
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (2, 2);
- en: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
  id: totrans-2412
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
- en: VALUES (1, 3);
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (1, 3);
- en: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT INTO "CourseStudent" ("CoursesCourseId", "StudentsStudentId")
- en: VALUES (3, 3);
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: VALUES (3, 3);
- en: CREATE INDEX "IX_CourseStudent_StudentsStudentId" ON "CourseStudent" ("StudentsStudentId");
  id: totrans-2416
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE INDEX "IX_CourseStudent_StudentsStudentId" ON "CourseStudent" ("StudentsStudentId");
- en: 'Alice Jones attends the following 1 course(s):'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: Alice Jones参加以下1门课程：
- en: C#
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: C#
- en: 10 and .NET 6
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 10 and .NET 6
- en: 'Bob Smith attends the following 2 course(s):'
  id: totrans-2420
  prefs: []
  type: TYPE_NORMAL
  zh: Bob Smith参加以下2门课程：
- en: C#
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: C#
- en: 10 and .NET 6
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 10 and .NET 6
- en: Web Development
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: Web Development
- en: 'Cecilia Ramirez attends the following 2 course(s):'
  id: totrans-2424
  prefs: []
  type: TYPE_NORMAL
  zh: Cecilia Ramirez参加以下2门课程：
- en: C#
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: C#
- en: 10 and .NET 6
  id: totrans-2426
  prefs: []
  type: TYPE_NORMAL
  zh: 10 and .NET 6
- en: Python for Beginners
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: Python for Beginners
- en: '```'
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'Note the following:'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: The `Title` column is `NOT NULL` because the model was decorated with `[Required]`
    .
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Title`列是`NOT NULL`，因为模型被装饰为`[Required]`。'
- en: The `LastName` column is `NOT NULL` because the model used `IsRequired()` .
  id: totrans-2431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LastName`列是`NOT NULL`，因为模型使用了`IsRequired()`。'
- en: An intermediate table named `CourseStudent` was created to hold information
    about which students attend which courses.
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个名为`CourseStudent`的中间表，用于保存哪些学生参加了哪些课程。
- en: Use Visual Studio Server Explorer or SQLiteStudio to connect to the `Academy`
    database and view the tables, as shown in *Figure 10.6* :![](img/Image00094.jpg)
  id: totrans-2433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Server Explorer或SQLiteStudio连接到`Academy`数据库并查看表，如*图10.6*所示：![](img/Image00094.jpg)
- en: 'Figure 10.6: Viewing the Academy database in SQL Server using Visual Studio
    2022 Server Explorer'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：使用Visual Studio 2022 Server Explorer在SQL Server中查看Academy数据库
- en: Understanding migrations
  id: totrans-2435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解迁移
- en: After publishing a project that uses a database, it is likely that you will
    later need to change your entity data model and therefore the database structure.
    At that point, you should not use the `Ensure` methods. Instead, you need to use
    a system that allows you to incrementally update the database schema while preserving
    any existing data in the database. EF Core migrations are that system.
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布使用数据库的项目后，您很可能需要稍后更改实体数据模型，因此需要更改数据库结构。在那时，您不应该使用`Ensure`方法。相反，您需要使用一种允许您逐步更新数据库架构并保留数据库中任何现有数据的系统。EF
    Core迁移就是这样的系统。
- en: 'Migrations get complex fast, so are beyond the scope of this book. You can
    read about them at the following link: [https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/](https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/)'
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移变得复杂很快，因此超出了本书的范围。您可以在以下链接阅读有关它们的信息：[https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/](https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/)
- en: Practicing and exploring
  id: totrans-2438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, get some
    hands-on practice, and explore this chapter's topics with deeper research.
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题来测试您的知识和理解，进行一些实践，并深入研究本章的主题。
- en: Exercise 10.1 – Test your knowledge
  id: totrans-2440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.1 – 测试您的知识
- en: 'Answer the following questions:'
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What type would you use for the property that represents a table, for example,
    the `Products` property of a database context?
  id: totrans-2442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，数据库上下文的`Products`属性，您会使用什么类型来表示一个表？
- en: What type would you use for the property that represents a one-to-many relationship,
    for example, the `Products` property of a `Category` entity?
  id: totrans-2443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，`Category`实体的`Products`属性，您会使用什么类型来表示一对多的关系？
- en: What is the EF Core convention for primary keys?
  id: totrans-2444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主键的EF Core约定是什么？
- en: When might you use an annotation attribute in an entity class?
  id: totrans-2445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时可能在实体类中使用注释属性？
- en: Why might you choose the Fluent API in preference to annotation attributes?
  id: totrans-2446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么您可能会选择使用Fluent API而不是注释属性？
- en: What does a transaction isolation level of `Serializable` mean?
  id: totrans-2447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Serializable`事务隔离级别是什么意思？'
- en: What does the `DbContext.SaveChanges()` method return?
  id: totrans-2448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DbContext.SaveChanges()`方法返回什么类型？'
- en: What is the difference between eager loading and explicit loading?
  id: totrans-2449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 贪婪加载和显式加载之间有什么区别？
- en: How should you define an EF Core entity class to match the following table?
  id: totrans-2450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该如何定义EF Core实体类以匹配以下表？
- en: '```cs'
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: CREATE
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: CREATE
- en: TABLE
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: 表
- en: Employees(
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: Employees(
- en: EmpId INT
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: EmpId INT
- en: IDENTITY
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: IDENTITY
- en: ','
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: FirstName NVARCHAR
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: FirstName NVARCHAR
- en: (40
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: (40
- en: ) NOT
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: ）NOT
- en: 'NULL'
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 'NULL'
- en: ','
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: ，
- en: Salary MONEY
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: 薪水MONEY
- en: )
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '```'
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: What benefit do you get from declaring entity navigation properties as `virtual`
    ?
  id: totrans-2466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从将实体导航属性声明为“虚拟”中获得的好处是什么？
- en: Exercise 10.2 – Practice exporting data using different serialization formats
  id: totrans-2467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.2 – 使用不同的序列化格式练习导出数据
- en: In the `Chapter10` solution/workspace, create a console application named `Exercise02`
    that queries the Northwind database for all the categories and products, and then
    serializes the data using at least three formats of serialization available to
    .NET. Which format of serialization uses the least number of bytes?
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter10`解决方案/工作区中，创建一个名为`Exercise02`的控制台应用程序，该应用程序查询Northwind数据库的所有类别和产品，然后使用.NET提供的至少三种序列化格式对数据进行序列化。哪种序列化格式使用的字节数最少？
- en: Exercise 10.3 – Explore topics
  id: totrans-2469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.3 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接详细了解本章涵盖的主题：
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core)'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-10---working-with-data-using-entity-framework-core)'
- en: Exercise 10.4 – Explore NoSQL databases
  id: totrans-2472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习10.4 – 探索NoSQL数据库
- en: 'This chapter focused on RDBMSs such as SQL Server and SQLite. If you wish to
    learn more about NoSQL databases, such as Cosmos DB and MongoDB, and how to use
    them with EF Core, then I recommend the following links:'
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了诸如SQL Server和SQLite之类的RDBMS。如果您希望了解有关NoSQL数据库（如Cosmos DB和MongoDB）以及如何在EF
    Core中使用它们的更多信息，则我建议查看以下链接：
- en: '**Welcome to Azure Cosmos DB** : [https://docs.microsoft.com/en-us/azure/cosmos-db/introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)'
  id: totrans-2474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欢迎使用Azure Cosmos DB**：[https://docs.microsoft.com/en-us/azure/cosmos-db/introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/introduction)'
- en: '**Use NoSQL databases as a persistence infrastructure** : [https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用NoSQL数据库作为持久性基础设施**：[https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/nosql-database-persistence-infrastructure)'
- en: '**Document Database Providers for Entity Framework Core** : [https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Entity Framework Core的文档数据库提供程序**：[https://github.com/BlueshiftSoftware/EntityFrameworkCore](https://github.com/BlueshiftSoftware/EntityFrameworkCore)'
- en: Summary
  id: totrans-2477
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to connect to an existing database, how to
    execute a simple LINQ query and process the results, how to use filtered includes,
    how to add, modify, and delete data, and how to build entity data models for an
    existing database, such as Northwind. You also learned how to define a Code First
    model and use it to create a new database and populate it with data.
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何连接到现有数据库，如何执行简单的LINQ查询并处理结果，如何使用过滤包含，如何添加，修改和删除数据，以及如何为现有数据库（如Northwind）构建实体数据模型。您还学习了如何定义Code
    First模型并使用它来创建新数据库并用数据填充它。
- en: In the next chapter, you will learn how to write more advanced LINQ queries
    to select, filter, sort, join, and group.
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何编写更高级的LINQ查询，以选择、过滤、排序、连接和分组。
