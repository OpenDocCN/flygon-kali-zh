- en: Creating a Mobile Application in Visual Studio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建移动应用程序
- en: Visual Studio is the *tour de force* of **integrated development environments**
    (**IDEs**). There is no doubt about that. You, as a developer, are able to be
    as versatile as you like by creating applications for a wide range of platforms.
    One of these platforms is mobile development. Developers are starting to create
    mobile applications, but don't want to use a different IDE. With Visual Studio,
    you don't have to. It will allow you to create Android and (now with **Xamarin**)
    iOS and Mac applications too.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio是**集成开发环境**（**IDEs**）的**强大工具**。毫无疑问。作为开发人员，您可以通过为各种平台创建应用程序来尽情发挥您的多才多艺。其中之一就是移动开发。开发人员开始创建移动应用程序，但不想使用不同的IDE。使用Visual
    Studio，您不必这样做。它将允许您创建Android和（现在还有**Xamarin**）iOS和Mac应用程序。
- en: 'This chapter will, therefore, take a look at the following concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将讨论以下概念：
- en: Installing Xamarin and other required components on your Windows PC and Mac
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的Windows PC和Mac上安装Xamarin和其他所需组件
- en: Creating a mobile application using Apache Cordova
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中使用Apache Cordova创建移动应用程序
- en: Creating an iOS application using Xamarin.Forms and Visual Studio for Mac
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin.Forms和Visual Studio for Mac创建iOS应用程序
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: If you have not heard about Xamarin, we encourage you to do a Google search
    for this tool. Traditionally, developers needed to use **Xcode** or **NetBeans**
    to create iOS and Android applications. The challenge for developers was that
    it meant learning a new programming language. If you, for example, created an
    application that you wanted to deploy to iOS, Android, and Windows, you needed
    to know Objective-C or Swift, Java, and a .NET language.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有听说过Xamarin，我们鼓励您搜索一下这个工具。传统上，开发人员需要使用**Xcode**或**NetBeans**来创建iOS和Android应用程序。对开发人员来说，挑战在于这意味着需要学习一种新的编程语言。例如，如果您创建了一个要部署到iOS、Android和Windows的应用程序，您需要了解Objective-C或Swift、Java和.NET语言。
- en: This also created additional challenges for development, because it meant having
    to maintain multiple code bases. If a change was to be made in the Windows version
    of the application, it also had to be made to the iOS and Android code base. Sometimes
    companies would manage different development teams for each platform. You can
    imagine the complications involved in managing a change across multiple teams
    on multiple platforms. This is especially true if you are dealing with a large
    code base.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这也为开发带来了额外的挑战，因为这意味着必须维护多个代码库。如果在应用程序的Windows版本中进行更改，还必须对iOS和Android代码库进行更改。有时公司会为每个平台管理不同的开发团队。您可以想象在多个团队和多个平台上管理变更所涉及的复杂性。如果您正在处理一个庞大的代码库，这一点尤为真实。
- en: Xamarin solves this problem by allowing .NET developers to use standard .NET
    libraries to create iOS and Android applications using Visual Studio. You, as
    a .NET developer, can now use the skills you already have to accomplish this.
    In a nutshell, you would create a shared library for your applications and then
    have different facades for the different platforms. A second option is to use
    Xamarin.Forms to create one Visual Studio project and target all three platforms.
    This makes it very easy to for developers to target multiple platforms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin通过允许.NET开发人员使用标准.NET库在Visual Studio中创建iOS和Android应用程序来解决了这个问题。作为.NET开发人员，您现在可以使用您已经拥有的技能来完成这个任务。简而言之，您将为您的应用程序创建一个共享库，然后为不同的平台创建不同的外观。第二个选择是使用Xamarin.Forms创建一个Visual
    Studio项目并针对所有三个平台。这使得开发人员很容易地针对多个平台进行开发。
- en: Installing Xamarin and other required components on your Windows PC and Mac
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的Windows PC和Mac上安装Xamarin和其他所需组件
- en: How does Xamarin work exactly? It does seem like magic, right? I mean, writing
    C# in Visual Studio and compiling a native iOS, Mac, or Android application on
    the other side does seem magical. A lot of technology has gone into giving developers
    the ability to do this. With iOS and Mac applications, the process is somewhat
    involved. One thing to be aware of if you want to target iOS or Mac is that you
    will need to use a Mac in order to build your iOS applications. There are services
    out there that make Macs available for remote testing and compilation (such as
    MacinCloud, [http://www.macincloud.com/](http://www.macincloud.com/)). These,
    however, do incur a monthly cost. When Xamarin compiles your C# code, it does
    so against a special subset of the Mono framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin到底是如何工作的？看起来确实像魔术，对吧？我的意思是，在Visual Studio中编写C#并在另一端编译成本地的iOS、Mac或Android应用程序确实看起来像魔术。许多技术已经投入到让开发人员有能力做到这一点。对于iOS和Mac应用程序，这个过程有点复杂。如果您想要针对iOS或Mac，需要使用Mac来构建您的iOS应用程序。有一些服务可以让Mac远程测试和编译（例如MacinCloud，[http://www.macincloud.com/](http://www.macincloud.com/)）。然而，这些服务会产生月费。当Xamarin编译您的C#代码时，它会针对Mono框架的一个特殊子集进行编译。
- en: Mono is sponsored by Microsoft and is an open source implementation of the .NET
    Framework. This is based on the ECMA standards for **C#** and the **Common Language
    Runtime**. For more information on the Mono framework, take a look at [http://www.mono-project.com/](http://www.mono-project.com/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Mono由微软赞助，是.NET Framework的开源实现。这是基于**C#**和**公共语言运行时**的ECMA标准。有关Mono框架的更多信息，请查看[http://www.mono-project.com/](http://www.mono-project.com/)。
- en: Looking at iOS specifically, this special subset includes libraries that allow
    access to iOS platform-specific features. The Xamarin.iOS compiler will take your
    C# code and compile it into an intermediate language called ECMA CIL. This **common
    intermediate language** (**CIL**) is then compiled a second time into native iOS
    code that an iPhone or iPad can run. You can then also deploy this to a simulator
    for testing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是针对iOS，这个特殊子集包括允许访问iOS平台特定功能的库。Xamarin.iOS编译器将接受您的C#代码并将其编译成一种称为ECMA CIL的中间语言。然后，这个**通用中间语言**（**CIL**）会再次编译成iPhone或iPad可以运行的本地iOS代码。然后您还可以将其部署到模拟器进行测试。
- en: Now, you might be wondering why a Mac is needed to compile your application?
    Why can't it all just happen from within Visual Studio? Well, this is due to a
    (quite clever) restriction imposed by Apple on the ability of the iOS kernel to
    generate code at runtime. It simply does not allow that to happen. As you know
    (this is the extremely simplified explanation), when your C# source code is compiled
    for testing it is compiled into intermediate language. The **just-in-time** (**JIT**)
    compiler then compiles the intermediate language into assembly code that is appropriate
    for the architecture you are targeting. Because the iOS kernel does not allow
    this on-demand compilation by a JIT compiler, the code is statically compiled
    using **ahead-of-time** (**AOT**) compilation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能会想为什么需要Mac来编译您的应用程序？为什么不能在Visual Studio内部完成所有操作？嗯，这是由于苹果对iOS内核生成代码的能力施加了（相当巧妙的）限制。它根本不允许这种情况发生。正如您所知道的（这是极其简化的解释），当您的C#源代码编译进行测试时，它被编译成中间语言。**即时**（**JIT**）编译器然后将中间语言编译成适合您所针对的架构的汇编代码。由于iOS内核不允许JIT编译器进行按需编译，代码是使用**提前编译**（**AOT**）编译进行静态编译的。
- en: 'To view the limitations of Xamarin.iOS, take a look at the following link:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看Xamarin.iOS的限制，请参阅以下链接：
- en: '[https://developer.xamarin.com/guides/ios/advanced_topics/limitations/](https://developer.xamarin.com/guides/ios/advanced_topics/limitations/)
    For a list of available assemblies in Xamarin.iOS, Xamarin.Mac, and Xamarin.Android,
    take a look at the following support document:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.xamarin.com/guides/ios/advanced_topics/limitations/](https://developer.xamarin.com/guides/ios/advanced_topics/limitations/)
    查看Xamarin.iOS、Xamarin.Mac和Xamarin.Android中可用程序集的列表，请参阅以下支持文档：'
- en: '[https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/.](https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/.](https://developer.xamarin.com/guides/cross-platform/advanced/available-assemblies/)'
- en: 'The technology behind this is quite impressive. It is no wonder that Microsoft
    acquired Xamarin and included it as part of Visual Studio. Giving developers this
    array of choice for cross-platform development is what Microsoft is all about:
    empowering developers to create world-class applications.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后的技术非常令人印象深刻。难怪微软收购了Xamarin并将其作为Visual Studio的一部分。为跨平台开发提供开发者这样一系列选择正是微软的目标：赋予开发者创造世界一流应用程序的能力。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to look at getting Xamarin installed on your Windows PC running
    Visual Studio 2017 in this recipe. Xamarin can be installed as part of a workload
    when Visual Studio 2017 is installed. For now, let's assume that Xamarin has not
    been installed and that you need to do that now, after you have installed Visual
    Studio. Go to the Visual Studio website at [https://www.visualstudio.com/](https://www.visualstudio.com/)
    and download the installer for the version of Visual Studio you installed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍如何在运行Visual Studio 2017的Windows PC上安装Xamarin。Xamarin可以作为工作负载的一部分在安装Visual
    Studio 2017时安装。现在，让我们假设Xamarin尚未安装，并且您需要在安装Visual Studio后立即进行安装。转到Visual Studio网站[https://www.visualstudio.com/](https://www.visualstudio.com/)，并下载您安装的Visual
    Studio版本的安装程序。
- en: You can also run the installer from the New Project dialog screen in Visual
    Studio 2017\. If you collapse the installed templates, you will see a section
    that allows you to open the Visual Studio Installer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Visual Studio 2017的“新建项目”对话框屏幕上运行安装程序。如果您折叠已安装的模板，您将看到一个允许您打开Visual Studio安装程序的部分。
- en: You will also need to install Xcode, which is Apple's development environment. This
    can be downloaded for free from the Mac App Store.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要安装Xcode，这是苹果的开发环境。您可以从Mac App Store免费下载。
- en: Note that you will need to have an iTunes login to download Xcode and complete
    setting up your Mac. Chances are, if you have a Mac, you most definitely will
    have an iTunes login too.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您需要有iTunes登录才能下载Xcode并完成Mac的设置。如果您有Mac，那么您很可能也有iTunes登录。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Double-click on the installer you downloaded from the Visual Studio website.
    You will see that your version of Visual Studio 2017 is displayed and a Modify
    button is visible. Click on the Modify button:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击从Visual Studio网站下载的安装程序。您将看到显示您的Visual Studio 2017版本，并且会出现一个“修改”按钮。点击“修改”按钮：
- en: '![](img/B06434_14_01.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_01.png)'
- en: 'This will display the available workloads for you. Under the Mobile & Gaming
    section, ensure that you select Mobile development with .NET. Then, click on the
    Modify button in the lower-right corner:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示可用的工作负载。在“移动和游戏”部分下，确保选择“使用.NET进行移动开发”。然后，点击右下角的“修改”按钮：
- en: '![](img/B06434_14_02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_02.png)'
- en: 'There is also a second step we need to take if we want to use Xamarin to target
    iOS applications. We have to install the required software on a Mac. Head on over
    to Xamarin''s website on your Mac. The URL is [https://www.xamarin.com/](https://www.xamarin.com/).
    Click on the Products drop-down and select Xamarin Platform from the list:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想要使用Xamarin来针对iOS应用程序，还有第二步需要采取。我们必须在Mac上安装所需的软件。在Mac上访问Xamarin的网站。网址是[https://www.xamarin.com/](https://www.xamarin.com/)。点击“产品”下拉菜单，从列表中选择Xamarin平台：
- en: '![](img/B06434_14_03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_03.png)'
- en: You can also access the required page by going to [https://www.xamarin.com/platform](https://www.xamarin.com/platform).
    Clicking on the Download now for free button will install something called **Xamarin
    Studio Community** on your Mac. You need to be aware that when installed on a
    Mac, Xamarin Studio cannot create Windows apps. It will only allow you to create
    iOS and Android apps on a Mac. Along with Xamarin Studio, you will also get the
    Xamarin Mac Agent (previously called the Xamarin build host). This is a required
    component so that you can link your PC to your Mac in order to build your iOS
    application. Lastly, the PC and Mac must also be able to connect to each other
    over a network (more on this later).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过访问[https://www.xamarin.com/platform](https://www.xamarin.com/platform)来访问所需的页面。单击“立即免费下载”按钮将在您的Mac上安装一个名为**Xamarin
    Studio Community**的东西。您需要知道的是，当在Mac上安装时，Xamarin Studio无法创建Windows应用程序。它只允许您在Mac上创建iOS和Android应用程序。除了Xamarin
    Studio，您还将获得Xamarin Mac代理（以前称为Xamarin构建主机）。这是一个必需的组件，以便您可以将您的PC链接到Mac，以构建您的iOS应用程序。最后，PC和Mac还必须能够通过网络相互连接（稍后会详细介绍）。
- en: 'After downloading the installer on the Mac, the installation is straightforward.
    You will notice that there are a few options to choose from the installation screen: Xamarin.Android,
    Xamarin.iOS, Xamarin.Mac, and Xamarin Workbooks & Inspector. If you wanted to
    target Android as a platform, you would install Xamarin.Android. To target iOS
    (iPhone or iPad), you will need to select Xamarin.iOS. To create fully native
    Mac applications, you must select Xamarin.Mac. Lastly, Xamarin Workbooks & Inspector
    gives developers an interactive C# console that integrates with app debugging
    to aid developers when inspecting running apps. For now, we''re only interested
    in Xamarin.iOS. Just follow the screen prompts and complete the installation.
    Depending on your selection, the installer will download the required dependencies
    and install that on your Mac. Depending on your Internet connection, you might
    want to go get a cup of coffee:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Mac上下载安装程序后，安装过程很简单。您会注意到在安装屏幕上有一些选项可供选择：Xamarin.Android、Xamarin.iOS、Xamarin.Mac和Xamarin
    Workbooks & Inspector。如果您想要以Android作为平台，您将安装Xamarin.Android。要针对iOS（iPhone或iPad），您需要选择Xamarin.iOS。要创建完全本机的Mac应用程序，您必须选择Xamarin.Mac。最后，Xamarin
    Workbooks & Inspector为开发人员提供了一个与应用程序调试集成的交互式C#控制台，以帮助开发人员检查运行中的应用程序。目前，我们只对Xamarin.iOS感兴趣。只需按照屏幕提示完成安装。根据您的选择，安装程序将下载所需的依赖项并将其安装在您的Mac上。根据您的互联网连接，您可能想去喝杯咖啡：
- en: '![](img/B06434_14_04.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_04.png)'
- en: 'Lastly, if you have not installed Xcode from the Mac App Store, you should
    do so now before continuing:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果您尚未从Mac App Store安装Xcode，请在继续之前立即这样做：
- en: '![](img/B06434_14_05.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_05.png)'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The steps we took previously when installing Xamarin will allow us to do target
    Mac, iOS, and Android (if we selected Xamarin.Android) platforms when developing
    cross-platform. Previously (before Visual Studio 2015), developers had to learn
    a new IDE in order to skill themselves up to create applications for other platforms.
    Personally, I find Xcode (the Apple developer IDE for creating native iOS and
    Mac applications) a bit of a learning curve. It's not because it is too complicated,
    but rather because it obviously works differently than what I am used to in Visual
    Studio. If you are serious about learning another programming language and want
    to go the Xcode route, take a look at Swift. It is a superb language and one that
    I found much easier to relate to C# than Objective-C, for example.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前安装Xamarin时所采取的步骤将使我们能够在开发跨平台时针对Mac、iOS和Android（如果我们选择了Xamarin.Android）平台进行开发。以前（在Visual
    Studio 2015之前），开发人员必须学习一个新的集成开发环境，以便提升自己的技能，以创建其他平台的应用程序。就我个人而言，我发现Xcode（用于创建本机iOS和Mac应用程序的苹果开发人员集成开发环境）有点学习曲线。这不是因为它太复杂，而是因为它显然与我在Visual
    Studio中习惯的方式不同。如果您真的想学习另一种编程语言，并且想要选择Xcode的路线，请看看Swift。这是一种出色的语言，我发现它比Objective-C更容易与C#相关联。
- en: If, however, you would rather stick to what you know and are comfortable with,
    then Xamarin is your best choice for developing cross-platform applications. You
    also do not have to go out and buy a MacBook to compile your applications on.
    A Mac mini is more than enough when you want to start developing for iOS and Mac.
    It is an investment in your development toolset that will stand you in good stead.
    There are also cloud options (such as MacinCloud) available to you as a developer.
    With Xamarin, you can stick with C# and develop in an environment that you are
    familiar with.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您宁愿坚持您所知道并且熟悉的内容，那么Xamarin是您开发跨平台应用程序的最佳选择。您也不必去购买MacBook来编译您的应用程序。当您想要开始为iOS和Mac开发时，Mac
    mini已经足够了。这是对您的开发工具集的一种投资，将使您受益匪浅。作为开发人员，您还可以选择云选项（例如MacinCloud）。使用Xamarin，您可以坚持使用C#并在您熟悉的环境中开发。
- en: There is a third and final option available to developers, and this is one we
    will be taking a look at in the final recipe of this chapter. The steps in this
    recipe are for when you need to create applications on your Windows PC and compile
    them on your Mac or MacinCloud solution.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员还有第三种最终选择，这是我们将在本章的最后一个配方中进行讨论的。本配方中的步骤是用于在Windows PC上创建应用程序并在Mac或MacinCloud解决方案上编译它们的情况。
- en: Creating a mobile application using Apache Cordova
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache Cordova创建移动应用程序
- en: Creating a mobile application using Apache Cordova is not complex at all. If
    you are familiar with web development, then this will feel quite natural to you.
    For those of you that have not developed web applications before, this will help
    you to familiarize yourself with this process. This is because at the very essence
    of Cordova lies a web application. You reference files such as JS files and CSS
    files and you work with an `index.html` file that you can debug in a browser.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Apache Cordova创建移动应用程序一点也不复杂。如果您熟悉Web开发，那么这对您来说会感觉非常自然。对于那些以前没有开发过Web应用程序的人来说，这将帮助您熟悉这个过程。这是因为Cordova的本质是一个Web应用程序。您引用诸如JS文件和CSS文件之类的文件，并且您可以在浏览器中调试`index.html`文件。
- en: Cordova applications offer you the flexibility of targeting iOS, Android, or
    Windows applications. This recipe will illustrate a simple application that displays
    the current date when the user clicks on a button in the app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova应用程序为您提供了针对iOS、Android或Windows应用程序的灵活性。这个教程将演示一个简单的应用程序，当用户在应用程序中点击按钮时，它会显示当前日期。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have installed the Mobile development with JavaScript workload
    as part of the Visual Studio 2017 installation process. For now, let's assume
    that you did not install it when you installed Visual Studio 2017 and now need
    to run the installer again.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在Visual Studio 2017安装过程中安装JavaScript工作负载。现在，让我们假设您在安装Visual Studio 2017时没有安装它，现在需要再次运行安装程序。
- en: You can also run the installer from the New Project dialog screen in Visual
    Studio 2017\. If you collapse the installed templates, you will see a section
    that allows you to open the Visual Studio Installer.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Visual Studio 2017的新项目对话框屏幕中运行安装程序。如果折叠已安装的模板，您将看到一个允许您打开Visual Studio安装程序的部分。
- en: Go to the Visual Studio website at [https://www.visualstudio.com/](https://www.visualstudio.com/)
    and download the installer for the version of Visual Studio you have installed.
    Also take note that you will need to have Google Chrome installed on your machine
    in order to launch the Cordova application simulator.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Visual Studio网站[https://www.visualstudio.com/](https://www.visualstudio.com/)，并下载您安装的Visual
    Studio版本的安装程序。还要注意，您需要在计算机上安装Google Chrome，以便启动Cordova应用程序模拟器。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Double-click on the installer you downloaded from the Visual Studio website.
    This will launch the installer and list the version of Visual Studio 2017 installed
    on your machine with a Modify button. Click on the Modify button:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击从Visual Studio网站下载的安装程序。这将启动安装程序，并列出安装在您的计算机上的Visual Studio 2017版本，并显示一个修改按钮。点击修改按钮：
- en: '![](img/B06434_14_06.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_06.png)'
- en: 'From the Mobile & Gaming group, select the Mobile development with JavaScript
    workload. Then, click on the Modify button. Depending on your specific requirements,
    additional components might be installed, such as support for the **Android SDK**
    and the **Google Android Emulator**:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“移动和游戏”组中，选择JavaScript工作负载的移动开发。然后，点击修改按钮。根据您的具体要求，可能会安装其他组件，例如**Android SDK**和**Google
    Android模拟器**的支持：
- en: '![](img/B06434_14_07.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_07.png)'
- en: Apache Cordova uses web technologies such as HTML, CSS, and JavaScript to build
    mobile applications that will run on Android, iOS and Windows devices. From Visual
    Studio, create a new application and select JavaScript from the Other Languages
    templates. Then select the Blank App (Apache Cordova) template. This is just a
    blank project that uses Apache Cordova to build a mobile app for Android, iOS,
    and **Universal Windows Platform** (**UWP**). I just called my app MyCordovaApp.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache Cordova使用诸如HTML、CSS和JavaScript之类的Web技术来构建可在Android、iOS和Windows设备上运行的移动应用程序。从Visual
    Studio创建一个新应用程序，并从其他语言模板中选择JavaScript。然后选择空白应用程序（Apache Cordova）模板。这只是一个使用Apache
    Cordova构建Android、iOS和**通用Windows平台**（**UWP**）的空白项目。我只是把我的应用叫做MyCordovaApp。
- en: 'Once Visual Studio has created your application, you will notice that it has
    a very specific folder structure:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Visual Studio创建了您的应用程序，您会注意到它有一个非常特定的文件夹结构：
- en: '`merges`: Expanding the`merges` folder, you will notice that you have three
    subfolders called `android`, `ios`, and `windows`. Developers can use these folders
    to deliver different content based on which mobile platform they are targeting.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`merges`：展开`merges`文件夹，您会注意到有三个名为`android`、`ios`和`windows`的子文件夹。开发人员可以使用这些文件夹根据他们正在针对的移动平台提供不同的内容。'
- en: '`www`: This is where most of your development will take place. The `index.html`
    file will become the main entry point for your Cordova application. When your
    mobile application is started, Cordova will look for this index file and load
    that first. You will also notice subfolders under the `www` folder. Think of these
    as a regular web application folder structure, because that is exactly what they
    are. The `css` subfolder will contain any style sheets you need to use.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`www`：这是您的大部分开发将发生的地方。`index.html`文件将成为Cordova应用程序的主要入口点。当启动您的移动应用程序时，Cordova将查找这个索引文件并首先加载它。您还会注意到`www`文件夹下面有子文件夹。把它们想象成一个常规的Web应用程序文件夹结构，因为它们确实就是。`css`子文件夹将包含您需要使用的任何样式表。'
- en: Any images you need to use in your mobile application will be stored in the
    `images` subfolder. Lastly, you will add any JavaScript files used by your mobile
    (web) application in the `scripts` subfolder. If you expand the `scripts` subfolder,
    you will notice a JavaScript file called `platformOverrides.js`. This is used
    in conjunction with the `merges` folder to deliver specific JavaScript code based
    on the mobile platform you are targeting.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在移动应用程序中使用的任何图像都将存储在`images`子文件夹中。最后，您将在`scripts`子文件夹中添加任何移动（Web）应用程序使用的JavaScript文件。如果展开`scripts`子文件夹，您会注意到一个名为`platformOverrides.js`的JavaScript文件。这与`merges`文件夹一起使用，根据您正在针对的移动平台提供特定的JavaScript代码。
- en: '`res`: The `res` folder will be use to store non-web application resources
    that might be used by the different native mobile applications. These can be resources
    such as splash screens, images, icons, signing certificates, and so on:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res`：`res`文件夹将用于存储可能被不同原生移动应用程序使用的非Web应用程序资源。这些资源可以是启动画面、图片、图标、签名证书等等：'
- en: '![](img/B06434_14_08.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_08.png)'
- en: You will also notice several configuration files. These are `bower.json`, `build.json`,
    `config.xml`, and `package.json`. While I will not go into each one of these configuration
    files in detail, I want to briefly mention the `config.xml` and `package.json`
    files. The `package.json` file is not currently used by Cordova at the time of
    writing. It is intended to eventually replace the `config.xml` file. Currently,
    the `config.xml` file contains settings specific to your mobile application. Double-click
    on this file to view the custom editor for the Cordova application. The custom
    editor avoids the complexities of having to edit the XML file directly by providing
    a standard Windows form from where you can input the application-specific settings.
    The settings available to you as a developer are such settings as application
    name, author name, application description, device orientation, plugin configuration,
    and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到几个配置文件。这些是`bower.json`、`build.json`、`config.xml`和`package.json`。虽然我不会详细介绍这些配置文件中的每一个，但我想简要提一下`config.xml`和`package.json`文件。在撰写本书时，`package.json`文件目前未被Cordova使用。它旨在最终取代`config.xml`文件。目前，`config.xml`文件包含特定于您的移动应用程序的设置。双击此文件以查看Cordova应用程序的自定义编辑器。自定义编辑器通过提供一个标准的Windows表单，避免了直接编辑XML文件的复杂性，您可以在其中输入特定于应用程序的设置。作为开发人员，您可以使用的设置包括应用程序名称、作者名称、应用程序描述、设备方向、插件配置等等。
- en: It is imperative that you do not delete the `config.xml` file. Doing so will
    break your solution and the Cordova SDK will not be able to build and deploy your
    mobile application without it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是，不要删除`config.xml`文件。这样做将破坏您的解决方案，Cordova SDK将无法构建和部署您的移动应用程序。
- en: 'At this point, you can select a device from the debug drop-down and run your
    mobile application. If you had to select Simulate in Browser - Nexus 7 (Tablet),
    Visual Studio will launch Google Chrome and display the default Cordova application.
    This is the default for every Cordova application and does not contain any functionality
    really. It merely lets you know that your Cordova application has started correctly.
    What is interesting though is that you will see a new tab open up in Visual Studio
    while your simulator is launched. It is called the Cordova Plugin Simulation and
    defaults to the Geolocation plugin. This allows developers to interact with plugins
    and fire specific events as your application is running in the simulator. Any
    new plugins added to your Cordova application will expose additional panes in
    the Cordova Plugin Simulation:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您可以从调试下拉菜单中选择一个设备并运行您的移动应用程序。如果您必须选择在浏览器中模拟 - Nexus 7（平板电脑），Visual Studio将启动Google
    Chrome并显示默认的Cordova应用程序。这是每个Cordova应用程序的默认设置，实际上并不包含任何功能。它只是让您知道您的Cordova应用程序已经正确启动。不过有趣的是，您会看到一个新的选项卡在Visual
    Studio中打开，同时您的模拟器被启动。它被称为Cordova插件模拟，并默认为地理位置插件。这允许开发人员与插件进行交互，并在应用程序在模拟器中运行时触发特定事件。向您的Cordova应用程序添加新插件将在Cordova插件模拟中公开额外的窗格：
- en: '![](img/B06434_14_09.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_09.png)'
- en: 'Next, add the NuGet package jQuery.mobile to your solution. NuGet will install
    jQuery.1.8.0 and jquery.mobile.1.4.5 to your solution. At the time this book was
    written, it was advised that jQuery.1.8.0 not be upgraded to the latest version
    due to compatibility reasons:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将jQuery.mobile NuGet包添加到您的解决方案中。NuGet将会向您的解决方案安装jQuery.1.8.0和jquery.mobile.1.4.5。在撰写本书时，建议不将jQuery.1.8.0升级到最新版本，因为存在兼容性原因：
- en: '![](img/B06434_14_10.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_10.png)'
- en: 'In your solution, NuGet will add several JS files to your project''s `Scripts`
    folder. Drag all these JS files to your `www/scripts` folder. Do the same with
    the project''s`Content` folder. Drag all the CSS files and the `images` subfolder
    to the `www/css` folder:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的解决方案中，NuGet将向您的项目的`Scripts`文件夹添加几个JS文件。将所有这些JS文件拖到您的`www/scripts`文件夹中。对于项目的`Content`文件夹也是一样。将所有CSS文件和`images`子文件夹拖到`www/css`文件夹中：
- en: '![](img/B06434_14_11.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_11.png)'
- en: 'Swing back to and open your `index.html` file. You will see a section between
    the `<body></body>` tags that looks as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回并打开您的`index.html`文件。您将在`<body></body>`标签之间看到以下内容：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the default boilerplate code added by the template and we will not be
    using it. Replace this with the following code and also add `<script src="img/jquery-1.8.0.min.js"></script>`
    and `<script src="img/jquery.mobile-1.4.5.min.js"></script>` to the bottom of
    the body section where the other script references are.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是模板添加的默认样板代码，我们将不使用它。将其替换为以下代码，并在其他脚本引用的底部部分添加`<script src="img/jquery-1.8.0.min.js"></script>`和`<script
    src="img/jquery.mobile-1.4.5.min.js"></script>`。
- en: Note that your versions of the JS files might differ from the previously referenced
    versions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的JS文件版本可能与之前引用的版本不同。
- en: 'When you are done, your `<body></body>` section should look as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的`<body></body>`部分应如下所示：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, between the `<head></head>` tags, add the `<link rel="stylesheet" href="css/jquery.mobile-1.4.5.min.css"
    />` style reference above the existing `<link rel="stylesheet" type="text/css"
    href="css/index.css">` reference.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`<head></head>`标签之间，添加上述`<link rel="stylesheet" href="css/jquery.mobile-1.4.5.min.css"
    />`样式引用，放在现有的`<link rel="stylesheet" type="text/css" href="css/index.css">`引用之上。
- en: Note that your versions of the CSS files might differ from the versions referenced
    earlier.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的CSS文件版本可能与之前引用的版本不同。
- en: 'When you are done, your code should look similar to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的代码应该类似于以下内容：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your application now includes the required jQuery libraries that will make
    your mobile application mobile and touch optimized. Your mobile application is
    now also responsive to the device it will be displayed on. We now need to add
    some basic styling to the application. Open up the `index.css` file referenced
    in the `<head></head>` section of your `index.html` file. This should be in `www/css/index.css`.
    Replace the contents with the following code. The `#get-date-btn` is just referencing
    the button on our form and setting the font size to 22 pixels. The `form` is styled
    to contain a solid border at the bottom of 1 pixel wide:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序现在包括所需的jQuery库，这将使您的移动应用程序移动和触摸优化。您的移动应用程序现在也对其将显示在的设备具有响应性。现在我们需要为应用程序添加一些基本样式。打开`index.html`文件中`<head></head>`部分引用的`index.css`文件。这应该在`www/css/index.css`中。用以下代码替换内容。`#get-date-btn`只是引用我们表单上的按钮，并将字体大小设置为22像素。`form`被设计为在底部包含1像素宽的实线边框：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We now need to add a click event for when the user taps on the Get Current
    Date button. To do this, open the `index.js` file located at `www/scripts/index.js`.
    Find the `onDeviceReady()` method and modify the code to look as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要为用户点击“获取当前日期”按钮时添加一个点击事件。为此，打开位于`www/scripts/index.js`的`index.js`文件。找到`onDeviceReady()`方法，并修改代码如下：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Think of this code as an event handler for the `get-date-btn` button. It is
    actually adding a click listener to the button that will call the `getCurrentDate`
    function whenever the button is tapped by the user. It is probably a good time
    to mention the `(function () { ... })();` function that contains the `onDeviceReady()`
    function. This is called an **anonymous self-invoking function**, which is actually
    just something you can think of as a form load event. You will notice that it
    adds an event handler for the `onDeviceReady()` method.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此代码视为`get-date-btn`按钮的事件处理程序。实际上，它正在向按钮添加一个点击监听器，每当用户点击按钮时，它将调用`getCurrentDate`函数。现在可能是时候提到包含`onDeviceReady()`函数的`(function
    () { ... })();`函数了。这被称为**匿名自调用函数**，实际上只是您可以将其视为表单加载事件。您会注意到它为`onDeviceReady()`方法添加了一个事件处理程序。
- en: Lastly, add the `getCurrentDate()` function to the `index.js` file.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`getCurrentDate()`函数添加到`index.js`文件中。
- en: For the purposes of this recipe, I'll keep it simple and add the `getCurrentDate()`
    function to the `index.js` file because the code isn't really that complex. For
    more complex code, it would be better to create a separate JS file and reference
    that JS file in your `index.html` page (at the bottom of the `<body></body>` section)
    along with the other JS file references.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本教程的目的，我将保持简单，并将`getCurrentDate()`函数添加到`index.js`文件中，因为代码并不是非常复杂。对于更复杂的代码，最好创建一个单独的JS文件，并在`index.html`页面中引用该JS文件（在`<body></body>`部分的底部）以及其他JS文件引用。
- en: 'The `getCurrentDate()` function is nothing special. It just gets the date and
    formats it to a `yyyy/MM/dd` format and displays it in the label on the `index.html`
    page. Your function should look as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCurrentDate()`函数并不特别。它只是获取日期并将其格式化为`yyyy/MM/dd`格式，并在`index.html`页面的标签中显示它。您的函数应该如下所示：'
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You can now start to debug your application. Let''s choose a different simulator
    in Visual Studio. Select Simulate in Browser - LG G5 and press *F5*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始调试您的应用程序。让我们在Visual Studio中选择不同的模拟器。选择在浏览器中模拟 - LG G5并按*F5*：
- en: '![](img/B06434_14_12.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_12.png)'
- en: 'Chrome will launch and display your Cordova application:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome将启动并显示您的Cordova应用程序：
- en: '![](img/B06434_14_13.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_13.png)'
- en: 'Click on the Get Current Date button and the current date will be displayed
    above the button you just clicked on:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“获取当前日期”按钮，当前日期将显示在您刚刚单击的按钮上方：
- en: '![](img/B06434_14_14.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_14.png)'
- en: 'While your simulator is open, open the `index.js` file where you added the
    `getCurrentDate()` function and place a breakpoint on the line that reads `$(''#current-date'').text("The
    date is: " + year + "/" + month + "/" + day);`. Then click on the Get Current
    Date button again:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '当您的模拟器打开时，打开您添加了`getCurrentDate()`函数的`index.js`文件，并在读取`$(''#current-date'').text("The
    date is: " + year + "/" + month + "/" + day);`的行上设置断点。然后再次单击“获取当前日期”按钮：'
- en: '![](img/B06434_14_15.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_15.png)'
- en: You will notice that your breakpoint is hit and you can now step through your
    code inspecting variables and debugging your application just like you are used
    to doing. You can even set conditional breakpoints. This is simply fantastic.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到您的断点被触发，现在您可以逐步检查变量并调试您的应用程序，就像您习惯做的那样。您甚至可以设置条件断点。这简直太棒了。
- en: There is so much more to learn surrounding developing applications using Cordova.
    Web developers will find this process familiar and should easily pick it up. You
    can now take this application and run it on any platform because it is completely
    cross-platform. What you can try next is running your Cordova application using
    one of the Android Emulators available. Play around with this example and add
    some more functional code. Think of accessing a web service to retrieve values
    or play around with the styles.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Cordova开发应用程序还有很多要学习的。Web开发人员会发现这个过程很熟悉，并且应该很容易掌握。现在您可以将此应用程序在任何平台上运行，因为它完全跨平台。接下来，您可以尝试使用其中一个可用的Android模拟器来运行您的Cordova应用程序。尝试一下这个示例，并添加一些更多的功能代码。尝试访问Web服务以检索值，或者尝试玩一下样式。
- en: Being able to target different mobile devices from a single solution using Visual
    Studio allows developers the freedom to experiment and find what solution fits
    them and their development style the best. Cordova steps up to the plate and offers
    developers a fantastic solution for those that do not use something such as Xamarin.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用Visual Studio从单个解决方案针对不同的移动设备，使开发人员有自由进行实验，并找到最适合他们和他们开发风格的解决方案。Cordova站出来为那些不使用Xamarin等解决方案的开发人员提供了一个奇妙的解决方案。
- en: Creating an iOS application using Xamarin.Forms and Visual Studio for Mac
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xamarin.Forms和Visual Studio for Mac创建iOS应用程序
- en: Many developers want to try their hand at writing an iOS application. The big
    drawback has always been learning a new programming language and a new IDE. For
    some, it is probably not an issue as they want to learn something new. But for
    many .NET developers, being able to stick to an IDE and programming language they
    know is immensely empowering. Well, this is exactly what Xamarin.Forms and Visual
    Studio achieve.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员想要尝试编写iOS应用程序。一直以来的一个大缺点是需要学习一种新的编程语言和一个新的集成开发环境。对于一些人来说，这可能不是问题，因为他们想要学习新的东西。但对于许多.NET开发人员来说，能够坚持使用他们熟悉的集成开发环境和编程语言是非常有力量的。这正是Xamarin.Forms和Visual
    Studio所实现的。
- en: Please note that I am not including Xamarin.Android here as a consideration.
    I'm purely focusing on writing native iOS and Mac applications.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在这里没有考虑Xamarin.Android。我纯粹专注于编写原生的iOS和Mac应用程序。
- en: 'Xamarin gives .NET developers the ability to use Visual Studio to write applications
    that can be run cross-platform easily, without having a separate code base for
    each. You therefore have a single code base for your application that will run
    on Windows, iOS/macOS, and Android. If you want to get into developing native iOS/macOS
    applications, you basically have (to my mind anyway) four viable options. They
    are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin为.NET开发人员提供了使用Visual Studio编写跨平台应用程序的能力，而无需为每个平台单独创建代码库。因此，您可以为应用程序拥有一个单一的代码库，该代码库将在Windows、iOS/macOS和Android上运行。如果您想要开始开发原生的iOS/macOS应用程序，您基本上有四个可行的选择（在我看来）。它们如下：
- en: Buy yourself a Mac and teach yourself Xcode, Swift, and/or Objective-C.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买一台Mac并自学Xcode、Swift和/或Objective-C。
- en: Buy yourself a Mac and install Parallels, where you can install Windows, Visual
    Studio, and other Windows-based software (Mac is not exclusively used for development).
    You can see a video on the **Developer Community** YouTube channel I created a
    few years back ([https://www.youtube.com/developercommunity](https://www.youtube.com/developercommunity)).
    In that video, I show you how to install Visual Studio 2013 on a Mac using Parallels.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买一台Mac并安装Parallels，在其中您可以安装Windows、Visual Studio和其他基于Windows的软件（Mac不仅仅用于开发）。您可以在我几年前创建的**Developer
    Community** YouTube频道上观看一个视频（[https://www.youtube.com/developercommunity](https://www.youtube.com/developercommunity)）。在那个视频中，我向您展示了如何使用Parallels在Mac上安装Visual
    Studio 2013。
- en: Buy yourself a Mac and download **Visual Studio for Mac** (currently still in
    preview at the time of writing) and install that on your Mac (Mac is exclusively
    used for developing Android and iOS/macOS applications).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买一台Mac并下载**Visual Studio for Mac**（目前仍处于预览阶段），然后在Mac上安装该软件（Mac专门用于开发Android和iOS/macOS应用程序）。
- en: Buy yourself a Mac and use that to compile iOS/macOS applications developed
    on your Windows PC running Visual Studio. Do this if you need to create applications
    that can still target Windows-based platforms in addition to Android and iOS/macOS.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买一台Mac并使用它来编译在运行Visual Studio的Windows PC上开发的iOS/macOS应用程序。如果您需要创建仍然可以针对基于Windows的平台以及Android和iOS/macOS的应用程序，那么可以这样做。
- en: If you are going to be using **Visual Studio for Mac** and Xamarin.Forms, then
    you will not be able to create Xamarin.Forms projects for Windows and Windows
    phone because these cannot be build on macOS. Also note that I didn't consider
    MacinCloud here because somewhere along the development process, I believe that
    it is really beneficial to own a physical Apple Mac device.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用**Visual Studio for Mac**和Xamarin.Forms，那么您将无法在macOS上创建Xamarin.Forms项目，因为这些项目无法在macOS上构建。还要注意的是，我没有在这里考虑MacinCloud，因为在开发过程中的某个阶段，我认为拥有一台实体的苹果Mac设备是非常有益的。
- en: From the points listed earlier, it is clear that you are going to need a Mac.
    While it is entirely possible to have Visual Studio installed on your Windows
    PC and connect to the Xamarin Mac agent when the machines are on the same local
    network, it does become a bit of an inconvenience when you need to try and remotely
    access the Mac (from your work office, for example). While theoretically this
    should be possible, you need to do some legwork to make this all work. For one,
    you will probably need to add some sort of port forwarding on your router to allow
    remote connections to your Mac. You will also need to assign your Mac a static
    IP address (or even buy a static IP address for your router) so that if a restart
    happens due to a power failure when you are working remotely, you will still be
    able to access your Mac for your Visual Studio builds.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面列出的要点可以清楚地看出，您需要一台Mac。虽然在Windows PC上安装Visual Studio并在本地网络上连接到Xamarin Mac代理是完全可能的，但当您需要尝试远程访问Mac时（例如从您的工作办公室），这可能会有些不便。理论上，这应该是可能的，但您需要做一些工作才能使这一切正常运行。首先，您可能需要在路由器上添加某种端口转发，以允许远程连接到您的Mac。您还需要为您的Mac分配一个静态IP地址（甚至为您的路由器购买一个静态IP地址），这样，如果在您远程工作时发生断电重启，您仍然能够访问您的Mac进行Visual
    Studio构建。
- en: Installing Parallels on your Mac is great, and will really come in handy when
    you have other Windows-based software that you want to use on your Mac. If you
    (like me) use your Mac exclusively for development purposes, then Parallels might
    not be a viable solution. This leaves **Visual Studio for Mac** and is a great
    option if you only plan to develop iOS/macOS and Android applications.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上安装Parallels非常方便，当您需要使用其他基于Windows的软件时，它将非常有用。如果您（像我一样）将Mac专门用于开发目的，那么Parallels可能不是一个可行的解决方案。这就留下了**Visual
    Studio for Mac**，如果您只计划开发iOS/macOS和Android应用程序，那么这是一个很好的选择。
- en: To download Visual Studio for Mac, head on over to [https://developer.xamarin.com/visual-studio-mac/](https://developer.xamarin.com/visual-studio-mac/)
    and click on the download link. The installation process is somewhat similar to
    the installation process in the first recipe of this chapter. The difference here
    is that the actual Visual Studio application will be installed on the Mac and
    not on a Windows PC on the same network.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载Visual Studio for Mac，请前往[https://developer.xamarin.com/visual-studio-mac/](https://developer.xamarin.com/visual-studio-mac/)并单击下载链接。安装过程与本章第一个配方中的安装过程有些类似。不同之处在于实际的Visual
    Studio应用程序将安装在Mac上，而不是在同一网络上的Windows PC上。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: After downloading Visual Studio for Mac, start the installation process. This
    is very similar to the process outlined in the first recipe. It can take a while
    to complete, so once again, go get yourself a cup of coffee. Creating applications
    with Visual Studio for Mac is a familiar experience for .NET developers coming
    from Visual Studio for Windows.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下载Visual Studio for Mac后，开始安装过程。这与第一个配方中概述的过程非常相似。完成可能需要一些时间，所以再次，去喝杯咖啡。使用Visual
    Studio for Mac创建应用程序对于从Visual Studio for Windows转到.NET开发人员来说是一种熟悉的体验。
- en: 'At the heart of Visual Studio for Mac is the Roslyn compiler that is used for
    refactoring and IntelliSense. The build engine is MSBuild and the debugger engine
    is the same for Xamarin and .NET Core applications. The software requirements
    for Xamarin development and Visual Studio for Mac are as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio for Mac的核心是用于重构和智能感知的Roslyn编译器。构建引擎是MSBuild，调试器引擎与Xamarin和.NET
    Core应用程序相同。Xamarin开发和Visual Studio for Mac的软件要求如下：
- en: You will need a Mac running OS X El Capitan (10.11) or macOS Sierra.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要运行OS X El Capitan（10.11）或macOS Sierra的Mac。
- en: The iOS 10 SDK that ships with Xcode 8 is required. Xcode can be downloaded
    for free as long as you have a valid iTunes account.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要iOS 10 SDK，该SDK随Xcode 8一起提供。只要您拥有有效的iTunes帐户，就可以免费下载Xcode。
- en: Visual Studio for Mac requires .NET Core which can be downloaded by following
    the steps outlined at [https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos).
    You must complete all the steps listed to ensure that .NET Core is installed correctly.
    While you are there, make a note to watch a few of Kendra Havens' Channel 9 videos
    on getting started with .NET Core, at [https://channel9.msdn.com/](https://channel9.msdn.com/).
    While you are at it, have a look at the other brilliant content on Channel 9.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio for Mac需要.NET Core，可以按照[https://www.microsoft.com/net/core#macos](https://www.microsoft.com/net/core#macos)中概述的步骤进行下载。您必须完成列出的所有步骤，以确保.NET
    Core正确安装。当您在那里时，请注意观看Kendra Havens的一些Channel 9视频，了解如何开始使用.NET Core，网址是[https://channel9.msdn.com/](https://channel9.msdn.com/)。顺便说一句，还可以看看Channel
    9上其他精彩的内容。
- en: If you plan to submit your applications to the Apple App Store, then you will
    need to purchase a developer license, which is currently priced at $99/year. You
    can, however, develop your applications without purchasing a developer license.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您计划将应用程序提交到Apple应用商店，则需要购买开发者许可证，目前价格为每年99美元。但是，您可以在不购买开发者许可证的情况下开发您的应用程序。
- en: Note that if you plan to install Visual Studio for Mac alongside Xamarin Studio,
    then you need to be aware that Visual Studio for Mac requires Mono 4.8\. Installing
    Xamarin Studio will downgrade Mono to an older version. To get around this, you
    need to opt out of the Mono 4.6 selection during the Xamarin Studio update screen.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您计划在Xamarin Studio旁边安装Visual Studio for Mac，则需要知道Visual Studio for Mac需要Mono
    4.8。安装Xamarin Studio将会将Mono降级到旧版本。为了解决这个问题，您需要在Xamarin Studio更新屏幕上选择退出Mono 4.6的选择。
- en: With this rather detailed checklist of requirements out of the way, let's get
    ready to create an iOS application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个相当详细的要求清单，让我们准备好创建一个iOS应用程序。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Launch Visual Studio for Mac and sign in with your Microsoft Account details.
    You will notice the Get Started section that lists a number of useful articles
    that help developers get up and running with Visual Studio for Mac:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio for Mac，并使用您的Microsoft帐户详细信息登录。您会注意到“入门”部分，其中列出了许多有用的文章，帮助开发人员开始使用Visual
    Studio for Mac：
- en: '![](img/B06434_14_16-1.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_16-1.png)'
- en: 'Next, click on New Project... and select the Forms App project from the Xamarin.Forms
    group in the Multiplatform App templates. Then, click on Next:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击“新建项目...”，并在多平台应用程序模板中的Xamarin.Forms组中选择Forms App项目。然后，点击“下一步”：
- en: '![](img/B06434_14_17-1.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_17-1.png)'
- en: 'We then need to give our application a name and an Organization Identifier.
    I simply called my app `HelloWorld` and then selected only iOS under Target Platforms.
    Click on Next to continue:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为我们的应用程序命名和添加组织标识符。我只是将我的应用程序命名为“HelloWorld”，然后在“目标平台”下只选择了iOS。点击“下一步”继续：
- en: '![](img/B06434_14_18-2.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_18-2.png)'
- en: 'Lastly, decide whether you want to configure your project to use Git for version
    control and Xamarin Test Cloud. When you have configured what you need to, click
    on Create:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，决定是否要配置项目以使用Git进行版本控制和Xamarin Test Cloud。当您配置好所需的内容后，点击“创建”：
- en: '![](img/B06434_14_19-1.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_19-1.png)'
- en: 'When your project is created, you will notice that you can select the device
    you want to simulate by clicking on the down arrow next to the Debug button:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目后，您会注意到可以通过单击“调试”按钮旁边的向下箭头来选择要模拟的设备：
- en: '![](img/B06434_14_20.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_20.png)'
- en: 'This will list the different simulators available to you, as well as any devices
    tethered to your Mac (in this case, my iPhone):'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将列出不同的模拟器可供您使用，以及连接到您的Mac的任何设备（在本例中是我的iPhone）：
- en: '![](img/B06434_14_21.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_21.png)'
- en: 'Clicking on the Run button will launch the simulator for the selected device
    and display the default application created for you when you created the Xamarin.Forms
    iOS application:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“运行”按钮将启动所选设备的模拟器，并显示创建Xamarin.Forms iOS应用程序时为您创建的默认应用程序：
- en: '![](img/B06434_14_22.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_22.png)'
- en: 'The application in the simulator is fully functional and you can interact with
    it to get a feel for how the simulator works. As mentioned earlier, if you have
    an iOS device tethered to your Mac, you can even launch the application on your
    device to test it. Clicking on the About tab, for example, will display the About
    page:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟器中的应用程序是完全可用的，您可以与其交互以了解模拟器的工作原理。如前所述，如果您的Mac上连接了iOS设备，甚至可以在设备上启动应用程序进行测试。例如，点击“关于”选项卡将显示“关于”页面：
- en: '![](img/B06434_14_23.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_23.png)'
- en: 'Click on the Stop button in Visual Studio for Mac and go back to your solution.
    Expand the `ViewModels` and `Views` folders. You will see a very familiar structure:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio for Mac中点击停止按钮，返回到您的解决方案。展开`ViewModels`和`Views`文件夹。您会看到一个非常熟悉的结构：
- en: '![](img/B06434_14_24.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_24.png)'
- en: 'In the `ViewModels` folder, open the `AboutViewModel.cs` file. In the constructor
    `AboutViewModel()`, you will see the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ViewModels`文件夹中，打开`AboutViewModel.cs`文件。在构造函数`AboutViewModel()`中，您将看到以下代码：
- en: '[PRE6]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For now, just to illustrate the use of C#, change the code here to look like
    the following code listing. Do you notice the first line of code? The section
    after `var titleText =` is an interpolated string `$"Hello World - The date is
    {DateTime.Now.ToString("MMMM dd yyyy")}";`. Interpolated strings were introduced
    in C# 6.0\. Click on the Play button to launch the application in the simulator:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了说明C#的使用，将此处的代码更改为以下代码清单的样子。您注意到了第一行代码吗？`var titleText =`后面的部分是一个插值字符串`$"Hello
    World - The date is {DateTime.Now.ToString("MMMM dd yyyy")}";`。插值字符串是在C# 6.0中引入的。点击播放按钮在模拟器中启动应用程序：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, click on the About tab again and look at the title. The title has changed
    to display Hello World and the current date:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次点击“关于”选项卡，查看标题。标题已更改为显示“Hello World”和当前日期：
- en: '![](img/B06434_14_25.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06434_14_25.png)'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Well, I will be the first to admit that the code we wrote was not earth-shattering
    at all. In fact, we basically piggybacked on an existing application and just
    modified a little bit of code to display Hello World and the current date. One
    thing that you need to remember here though is that we have written C# code and
    compiled that to a native iOS application.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我将首先承认，我们编写的代码并没有什么了不起的。实际上，我们基本上是在现有的应用程序上进行了一些修改，只是修改了一点代码来显示“Hello World”和当前日期。然而，需要记住的一件事是，我们编写了C#代码并将其编译为本机iOS应用程序。
- en: There is still much to learn. We have not even scratched the surface with what
    is available now with Visual Studio for Mac, Xamarin.Forms and cross-platform
    C# applications. Xamarin has really good documentation that will assist you as
    you navigate the new causeways of developing applications using Xamarin. A nice
    case study to read through is the Tasky case study, which can be found at [https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/](https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/).
    This will give you a good idea about what is involved with developing a cross-platform
    application using Xamarin.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多东西要学习。我们甚至还没有涉及使用Visual Studio for Mac、Xamarin.Forms和跨平台C#应用程序现在提供的所有内容。Xamarin有非常好的文档，将在您使用Xamarin开发应用程序的新途径时为您提供帮助。一个很好的案例研究是Tasky案例研究，可以在[https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/](https://developer.xamarin.com/guides/cross-platform/application_fundamentals/building_cross_platform_applications/case_study-tasky/)找到。这将让您对使用Xamarin开发跨平台应用程序涉及的内容有一个很好的了解。
- en: Why don't you try to play around a bit more with the application we just created?
    See what is possible and what differences there are in approaching database logic
    and reading user input, for example. Visual Studio for Mac has opened a new world
    for developers, making it easier than ever to get started developing native iOS
    applications.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不试着再玩一下我们刚刚创建的应用程序呢？看看有什么可能性，以及在处理数据库逻辑和读取用户输入方面有什么不同。Visual Studio for Mac为开发人员打开了一个新世界，使得开发本机iOS应用程序比以往任何时候都更容易。
